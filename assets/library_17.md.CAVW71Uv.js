import{_ as c,o as n,c as r,a as t,m as h,t as d,C as g,M as _,U as y,f as u,F as b,p as v,e as w,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},P={class:"review-title"},R={class:"review-content"};function A(i,e,l,m,s,a){return n(),r("div",q,[t("div",T,[t("div",P,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),h(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",R,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),h(d(l.poem.solution),1)])])])}const I=c(k,[["render",A],["__scopeId","data-v-a58612b6"]]),C=JSON.parse(`[{"question":"Develop a Python function to calculate the aggregate of bitwise exclusive OR operations performed on every possible pair of integers within the provided array. Additionally, the function should handle edge cases such as non-integer values, single element arrays, and empty arrays.","solution":"def aggregate_xor(arr): Calculate the aggregate of bitwise exclusive OR operations performed on every possible pair of integers within the provided array. Handles edge cases such as non-integer values, single element arrays, and empty arrays. Parameters: arr (list): A list of integers. Returns: int: The aggregate XOR sum or 0 for edge cases like empty or single non-integer element arrays. if not arr: # Check if the array is empty return 0 valid_integers = [x for x in arr if isinstance(x, int)] if len(valid_integers) < 2: # Check if there are less than 2 valid integers return 0 total_xor = 0 n = len(valid_integers) for i in range(n): for j in range(i + 1, n): total_xor += valid_integers[i] ^ valid_integers[j] return total_xor"},{"question":"Given a Python list called \`numbers\` with integer elements, write a Python function named \`is_sorted\` that returns \`True\` if the \`numbers\` list is sorted either in ascending order or in descending order, and returns \`False\` otherwise.","solution":"def is_sorted(numbers): Checks if the list \\"numbers\\" is sorted either in ascending or descending order. Returns True if sorted, False otherwise. if not numbers: # Handle empty list return True return numbers == sorted(numbers) or numbers == sorted(numbers, reverse=True)"},{"question":"Write a Python script that accepts a positive integer as input and displays the numbers in its Fibonacci sequence up to the entered value.","solution":"def fibonacci_up_to(n): Generate the Fibonacci sequence up to a given number n. Args: - n (int): The upper limit for the Fibonacci sequence. Returns: - list: A list containing the Fibonacci sequence up to n. if n < 0: return [] sequence = [] a, b = 0, 1 while a <= n: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Given a 2D grid of 0s and 1s, write a Python code that will return the number of \\"live\\" neighboring cells (ones) for a cell at (i, j) position in the grid. You should consider a cell's neighbors as the eight cells that are closest to it (horizontally, vertically, and diagonally).","solution":"def count_live_neighbors(grid, i, j): Returns the number of \\"live\\" neighboring cells (ones) for a cell at (i, j) position in the grid. :param grid: List of lists of integers (0s and 1s) :param i: Row index of the cell :param j: Column index of the cell :return: Number of live neighbors neighbors = [ (-1, -1), (-1, 0), (-1, 1), ( 0, -1), ( 0, 1), ( 1, -1), ( 1, 0), ( 1, 1) ] live_neighbors = 0 rows = len(grid) cols = len(grid[0]) for dx, dy in neighbors: ni, nj = i + dx, j + dy if 0 <= ni < rows and 0 <= nj < cols and grid[ni][nj] == 1: live_neighbors += 1 return live_neighbors"},{"question":"Develop a Python method for calculating the frequency of unique case-sensitive alphabetic characters within a given sentence.","solution":"def calculate_character_frequency(sentence): Returns a dictionary with the frequency of unique case-sensitive alphabetic characters in the given sentence. frequency = {} for char in sentence: if char.isalpha(): if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Develop a function that verifies if a list or any nested lists within it are empty, including lists nested within other lists to any depth. The function should return True only if the main list and all nested lists are empty.","solution":"def are_all_lists_empty(lst): Verifies if a list and any nested lists within it are empty. Args: lst (list): A list which may contain nested lists. Returns: bool: True if the main list and all nested lists are empty, False otherwise. if isinstance(lst, list): return all(are_all_lists_empty(item) for item in lst) return False"},{"question":"Write a Python function that takes a positive integer as an argument and returns a list of prime numbers less than that integer. Make sure to write a docstring for your function and add comments to explain your logic.","solution":"def get_primes_less_than(n): Returns a list of prime numbers less than the given positive integer n. Parameters: n (int): A positive integer Returns: List[int]: A list of prime numbers less than n if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a Python function which accepts three parameters - two strings and a positive integer. The function should display the strings in reverse sequence, only if the length of the first string is exactly equal to the integer parameter. If the condition is not met, return an empty string.","solution":"def reverse_strings_if_length_equals(string1, string2, length): Returns the two strings in reverse order if the length of the first string equals the given length. Otherwise, returns an empty string. Parameters: string1 (str): The first string string2 (str): The second string length (int): The positive integer to compare with the length of string1 Returns: str: Reversed combination of string2 and string1 or an empty string if len(string1) == length: return string2[::-1] + \\" \\" + string1[::-1] return \\"\\""},{"question":"Create a simple game using python where the user has to guess the random number generated by the code. Give the user 3 chances to guess the correct number, after which the game ends","solution":"import random def guess_the_number(): A simple game where the user has to guess a random number between 1 and 10. The user gets 3 chances to guess the correct number. number_to_guess = random.randint(1, 10) attempts = 0 max_attempts = 3 print(\\"Guess the number between 1 and 10. You have 3 attempts.\\") while attempts < max_attempts: guess = int(input(\\"Enter your guess: \\")) attempts += 1 if guess == number_to_guess: print(\\"Congratulations! You've guessed the correct number.\\") return True elif attempts < max_attempts: print(\\"Try again.\\") print(f\\"Sorry! The correct number was {number_to_guess}.\\") return False"},{"question":"Given an array of integers, sort the elements in increasing order using a sorting algorithm of your choice.","solution":"def sort_array(arr): Sorts an array of integers in increasing order. Parameters: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers. return sorted(arr)"},{"question":"Briefly, how would you do script that runs GeoNet download script, but only when there is internet connection and also checks if the file is already up-to-date.","solution":"import requests import os import hashlib def is_internet_connected(url=\\"http://www.google.com/\\", timeout=5): Checks if the internet connection is available. try: response = requests.get(url, timeout=timeout) return True except (requests.ConnectionError, requests.Timeout): return False def file_hash(filepath): Returns the SHA-256 hash of the file. sha256 = hashlib.sha256() with open(filepath, 'rb') as f: for block in iter(lambda: f.read(4096), b\\"\\"): sha256.update(block) return sha256.hexdigest() def download_file(url, filepath): Downloads the file from the given URL to the specified filepath. response = requests.get(url) response.raise_for_status() with open(filepath, 'wb') as f: f.write(response.content) def is_file_up_to_date(filepath, url): Checks if the file is up-to-date by comparing its hash with the server copy. local_hash = file_hash(filepath) # Assumes the server provides a hash file (this is a simplification) hash_url = url + \\".sha256\\" response = requests.get(hash_url) response.raise_for_status() remote_hash = response.text.strip() return local_hash == remote_hash def run_geonet_download_script(file_url, local_filepath): Runs the GeoNet download script only when there is an internet connection and if the local file is not up-to-date. if is_internet_connected(): if not os.path.exists(local_filepath) or not is_file_up_to_date(local_filepath, file_url): download_file(file_url, local_filepath) print(\\"File downloaded and updated.\\") else: print(\\"File is already up-to-date.\\") else: print(\\"No internet connection.\\")"},{"question":"Write a Python code that allows a user to create a nested dictionary from two lists, one of keys and the other of values. The values list can have elements that are either strings or lists. If a value is a string, it should be mapped to the corresponding key in a dictionary. If it is a list, it should create a nested dictionary with the first element of the list being the key and the rest of the elements being the values (assuming the list has more than one element). The input lists will never be empty.","solution":"def create_nested_dictionary(keys, values): Creates a nested dictionary from two lists, one of keys and the other of values. result = {} for key, value in zip(keys, values): if isinstance(value, list) and len(value) > 1: nested_dict = {value[0]: value[1:]} result[key] = nested_dict else: result[key] = value return result"},{"question":"Craft a Python code that can substitute each given character in a sequence of letters with its immediate successor in the English alphabet, and in addition, your solution should account for edge cases such as the transition from 'z' to 'a', and appropriately handle both uppercase and lowercase letters.","solution":"def next_alphabet_char(char): Returns the immediate successor of the given character in the English alphabet. Handles the transition from 'z' to 'a' and 'Z' to 'A'. if 'a' <= char <= 'y' or 'A' <= char <= 'Y': return chr(ord(char) + 1) elif char == 'z': return 'a' elif char == 'Z': return 'A' return char def substitute_with_next_char(sequence): Returns a new string where each character in the sequence is replaced with its immediate successor in the English alphabet. Handles both uppercase and lowercase letters. Non-alphabetic characters are returned unchanged. return ''.join(next_alphabet_char(ch) if ch.isalpha() else ch for ch in sequence)"},{"question":"Generate two random prime numbers between 1 and 100 and perform the following operations on them: addition, subtraction, multiplication, and division. Write a code in Python to execute these operations and handle any possible exceptions that may arise, such as division by zero.","solution":"import random import sympy def random_prime(low, high): Returns a random prime number between low and high (inclusive). primes = list(sympy.primerange(low, high + 1)) return random.choice(primes) def perform_operations(a, b): Returns the results of addition, subtraction, multiplication, and division of two numbers. Handles division by zero exception and returns None for division result in such case. results = { \\"addition\\": a + b, \\"subtraction\\": a - b, \\"multiplication\\": a * b, } if b != 0: results[\\"division\\"] = a / b else: results[\\"division\\"] = None return results # Generate two random prime numbers between 1 and 100 prime1 = random_prime(1, 100) prime2 = random_prime(1, 100) # Perform operations results = perform_operations(prime1, prime2) results"},{"question":"Write a function that takes in a string, and returns true if the string is a palindrome, false if it's not.","solution":"def is_palindrome(s: str) -> bool: Returns True if the input string is a palindrome, False otherwise. A palindrome is a string that reads the same forwards and backwards. s = ''.join(c.lower() for c in s if c.isalnum()) # Remove non-alphanumeric characters and convert to lowercase return s == s[::-1]"},{"question":"Design and implement a Least Recently Used (LRU) cache in a programming language of your choice, featuring an explication of your design philosophy and any trade-offs you encountered during the development process. Additionally, elucidate the mechanisms that your LRU cache utilizes to manage cache entries, and understand the operations time complexity, such as put, get and remove.","solution":"class Node: def __init__(self, key, value): self.key = key self.value = value self.prev = None self.next = None class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = {} # Map to store key to node self.head = Node(0, 0) # Dummy head self.tail = Node(0, 0) # Dummy tail self.head.next = self.tail self.tail.prev = self.head def _remove(self, node): prev_node = node.prev next_node = node.next prev_node.next = next_node next_node.prev = prev_node def _add(self, node): prev_node = self.head next_node = self.head.next prev_node.next = node node.prev = prev_node node.next = next_node next_node.prev = node def get(self, key: int) -> int: if key in self.cache: node = self.cache[key] self._remove(node) self._add(node) return node.value return -1 def put(self, key: int, value: int): if key in self.cache: self._remove(self.cache[key]) node = Node(key, value) self._add(node) self.cache[key] = node if len(self.cache) > self.capacity: lru = self.tail.prev self._remove(lru) del self.cache[lru.key]"},{"question":"Create a Python script snippet that Displays Extreme Education: Grade Calculation for Engineer for Professionals. Use if/else or switch/case statements to conditionally perform different actions based on the Privacy. Dry-run, then include comments that outline the control flow and how you handle different scenarios.","solution":"def calculate_grade(percentage): Calculate the grade based on the provided percentage for Engineering professionals. :param percentage: float, the score percentage. :returns: string, the grade. # Check the value of percentage and assign grades accordingly if percentage >= 90: return 'A+' elif percentage >= 80: return 'A' elif percentage >= 70: return 'B+' elif percentage >= 60: return 'B' elif percentage >= 50: return 'C' elif percentage >= 40: return 'D' else: return 'F' # Example usage percentage = 85 grade = calculate_grade(percentage) print(f\\"With a percentage of {percentage}, the grade is {grade}.\\")"},{"question":"Write a Python function that finds the longest palindromic substring within a given string.","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring in the given string. Parameters: s (str): The input string. Returns: str: The longest palindromic substring. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest_palindrome = '' for i in range(len(s)): # Check for odd length palindromes odd_palindrome = expand_around_center(s, i, i) # Check for even length palindromes even_palindrome = expand_around_center(s, i, i + 1) # Update longest_palindrome if len(odd_palindrome) > len(longest_palindrome): longest_palindrome = odd_palindrome if len(even_palindrome) > len(longest_palindrome): longest_palindrome = even_palindrome return longest_palindrome"},{"question":"Create a function called \\"reverse_print\\" that takes in a list as a parameter. The function should print the elements of the list in reverse order, excluding the middle element if the list length is odd.","solution":"def reverse_print(lst): Print the elements of the list in reverse order, excluding the middle element if the list length is odd. if len(lst) % 2 != 0: middle_index = len(lst) // 2 lst.pop(middle_index) for elem in reversed(lst): print(elem)"},{"question":"Write a code to check on the length of the longest increasing subsequence (LIS) in a given array of integers.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the given list of integers. Args: nums (list): A list of integers. Returns: int: The length of the longest increasing subsequence. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"How can I develop a Python program that lists all files in a specific directory, including its subdirectories?","solution":"import os def list_files(directory): Lists all files in the specified directory, including its subdirectories. Parameters: directory (str): The directory to list the files from. Returns: List[str]: A list of file paths. file_list = [] for root, dirs, files in os.walk(directory): for file in files: file_list.append(os.path.join(root, file)) return file_list"},{"question":"Write a program that generates a random maze using Prim's algorithm and then finds a path through the maze using Depth-First Search (DFS). The maze should be visualized as ASCII art.","solution":"import random def generate_maze(rows, cols): Generates a random maze using Prim's algorithm. def add_walls(walls, x, y): if x > 1: walls.append((x - 2, y)) if x < rows - 2: walls.append((x + 2, y)) if y > 1: walls.append((x, y - 2)) if y < cols - 2: walls.append((x, y + 2)) maze = [['#'] * cols for _ in range(rows)] start_x, start_y = random.randint(1, rows // 2) * 2 - 1, random.randint(1, cols // 2) * 2 - 1 maze[start_x][start_y] = ' ' walls = [(start_x, start_y)] add_walls(walls, start_x, start_y) while walls: rand_wall = random.choice(walls) walls.remove(rand_wall) x, y = rand_wall if maze[x][y] == '#': adj_walls = [(x - 2, y), (x + 2, y), (x, y - 2), (x, y + 2)] random.shuffle(adj_walls) for adj_x, adj_y in adj_walls: if 0 <= adj_x < rows and 0 <= adj_y < cols and maze[adj_x][adj_y] == ' ': delta_x = (adj_x - x) // 2 delta_y = (adj_y - y) // 2 maze[x + delta_x][y + delta_y] = ' ' maze[x][y] = ' ' add_walls(walls, x, y) break return maze def find_path(maze, start, end): Finds a path through the maze using Depth-First Search (DFS). rows = len(maze) cols = len(maze[0]) stack = [start] visited = set() path = [] while stack: x, y = stack.pop() if (x, y) == end: path.append((x, y)) return path if (x, y) not in visited: visited.add((x, y)) path.append((x, y)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == ' ': stack.append((nx, ny)) if path[-1] != (x, y): path.pop() return path def print_maze(maze): Visualizes the maze as ASCII art. for row in maze: print(''.join(row)) def generate_and_solve_maze(rows, cols): Generates a maze and finds a path from the top-left to the bottom-right corner. maze = generate_maze(rows, cols) print(\\"Generated Maze:\\") print_maze(maze) path = find_path(maze, (0, 1), (rows-1, cols-2)) for (x, y) in path: maze[x][y] = '.' print(\\"nMaze with Solution Path:\\") print_maze(maze)"},{"question":"Edit the code to print out a string in reverse order, without using any built-in string manipulation functions or libraries. The input string may contain any printable ASCII characters, including alphanumeric characters, spaces, punctuation marks, and special characters. The solution should be optimized for time complexity, aiming for a linear time complexity O(n) where n is the length of the input string. Additionally, the solution should be implemented using constant space complexity O(1), meaning no additional data structures should be used except for the given string variable.","solution":"def reverse_string(s): Returns the reverse of the input string s. This function does not use any built-in string manipulation functions or libraries. # Convert the string to a list of characters to allow in-place modifications s_list = list(s) n = len(s_list) # Use two pointers to swap characters from the start and end towards the center left, right = 0, n - 1 while left < right: # Swap the characters s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 # Convert the list of characters back to a string return ''.join(s_list)"},{"question":"In Python's static type checking tool, mypy, how do you declare a list argument in a function that only accepts lists of a specific length, for instance, lists containing exactly three items?","solution":"from typing import Tuple def process_triplet(triplet: Tuple[int, int, int]) -> int: Takes a tuple of exactly three integers and processes it. return sum(triplet)"},{"question":"Create a function in Python that takes as arguments two strings and returns a boolean indicating whether both strings are equal or not.","solution":"def are_strings_equal(str1, str2): Returns True if both strings are equal, False otherwise. return str1 == str2"},{"question":"Create a helper function in Python to repeat a given string for a given number of times, but the repeated strings should be separated by a specific delimiter. The function should also check if the given number of times is within a valid range and raise an exception if it's not.","solution":"def repeat_string(string, times, delimiter, min_times=1, max_times=100): Repeats the given string for the specified number of times, separated by a delimiter. Ensures the number of times is within the specified min and max range, inclusive. :param string: The string to be repeated. :param times: The number of times to repeat the string. :param delimiter: The delimiter separating each repetition. :param min_times: Minimum times the string should be repeated (default 1). :param max_times: Maximum times the string should be repeated (default 100). :return: A single string with the repeated substrings separated by the delimiter. :raises ValueError: If times is not within the min_times and max_times range. if not (min_times <= times <= max_times): raise ValueError(f\\"Times must be between {min_times} and {max_times}\\") return delimiter.join([string] * times)"},{"question":"Write a Python program to test whether all elements of a given list are equal or not. However, the list can contain positive integers or negative integers. The program should have a time complexity of O(n) and a space complexity of O(1), where n is the length of the list.","solution":"def all_elements_equal(lst): Returns True if all elements in the list are equal, otherwise False. if not lst: return True first_element = lst[0] for element in lst[1:]: if element != first_element: return False return True"},{"question":"Compose a program to reverse a list of numbers without using any built-in functions or methods for list manipulation. Additionally, ensure the program enables swapping specific elements before the reversal.","solution":"def reverse_list_with_swap(numbers, swap_indices=None): Reverses a list of numbers with optional specific element swapping before reversal. :param numbers: List of numbers to be reversed :param swap_indices: Tuple containing indices of the elements to swap before reversal :return: Reversed list if swap_indices is not None: i, j = swap_indices if 0 <= i < len(numbers) and 0 <= j < len(numbers): # Swap elements at index i and j numbers[i], numbers[j] = numbers[j], numbers[i] # Reverse the list without using built-in functions reversed_numbers = [] for i in range(len(numbers) - 1, -1, -1): reversed_numbers.append(numbers[i]) return reversed_numbers"},{"question":"Create a Python dictionary that stores square roots of prime numbers from 1 to 15. Moreover, implement a function that checks the integrity of the dictionary by verifying if the keys are indeed prime numbers and the values are their accurate square roots. Be sure to handle any potential errors that may arise from faulty data in the dictionary.","solution":"import math def is_prime(n): Check if a number is a prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(math.sqrt(n)) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def create_prime_sqrt_dict(): Create a dictionary of prime numbers and their square roots from 1 to 15. prime_sqrt_dict = {} for i in range(1, 16): if is_prime(i): prime_sqrt_dict[i] = math.sqrt(i) return prime_sqrt_dict def check_prime_sqrt_dict(prime_sqrt_dict): Check the integrity of the prime square roots dictionary. for k, v in prime_sqrt_dict.items(): if not is_prime(k): return False if not math.isclose(v, math.sqrt(k), rel_tol=1e-9): return False return True"},{"question":"Write a Python program that accepts a string input from the user. This program should not only display the ASCII value of each character in the string, but it should also classify whether the ASCII value is even or odd. Furthermore, the program should include a function to count the number of even and odd ASCII values in the string. Lastly, add an error handling mechanism in case the user inputs an empty string.","solution":"def ascii_classification(input_string): This function takes a string input and returns a list of tuples where each tuple contains the character, its ASCII value, and whether that ASCII value is even or odd. if not input_string: raise ValueError(\\"Input string cannot be empty.\\") result = [] for char in input_string: ascii_value = ord(char) classification = 'even' if ascii_value % 2 == 0 else 'odd' result.append((char, ascii_value, classification)) return result def count_even_odd_ascii(ascii_list): This function takes a list of tuples with ASCII classifications and returns the count of even and odd ASCII values. even_count = sum(1 for item in ascii_list if item[2] == 'even') odd_count = sum(1 for item in ascii_list if item[2] == 'odd') return even_count, odd_count"},{"question":"Write a function in Python to print the Fibonacci sequence up to a given number, n. However, you are not allowed to use recursion or a loop structure (such as for or while) in your solution. You may only use basic arithmetic and logical operations, function calls, and variables. Additionally, your solution should have a time complexity of O(n) and a space complexity of O(1).","solution":"def fibonacci_sequence(n): Prints the Fibonacci sequence up to a given number n. Non-recursively and without loop structures. def fibonacci_helper(a, b, count): if count < n: print(a, end=\\" \\") fibonacci_helper(b, a + b, count + 1) else: print() if n > 0: fibonacci_helper(0, 1, 0) else: print()"},{"question":"Use a Python code to generate a list of all prime numbers between 1 to 100, with an added constraint to implement the solution using a function. Also, identify and print the twin prime pairs from the generated list. Twin primes are pairs of primes that are two apart. An example of this would be (3, 5) or (11, 13). This requires an extra check after primes are computed.","solution":"def generate_primes(n): Returns a list of all prime numbers up to n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes def find_twin_primes(primes): Returns a list of twin prime pairs from the given list of primes. twin_primes = [] for i in range(len(primes) - 1): if primes[i + 1] - primes[i] == 2: twin_primes.append((primes[i], primes[i + 1])) return twin_primes if __name__ == \\"__main__\\": primes = generate_primes(100) print(\\"Primes between 1 and 100: \\", primes) twin_primes = find_twin_primes(primes) print(\\"Twin primes: \\", twin_primes)"},{"question":"Given the following code, write a function to validate the input dates are in increasing order, and handle erroneous input code. Additionally, improve the function to accommodate a twist where the dates could also be in descending order, based on a parameter you'll define in your function.","solution":"def validate_dates(dates, ascending=True): Validates that the input dates are in increasing order if ascending is True. If ascending is False, validates that the dates are in descending order. Args: dates: List of dates as strings in 'YYYY-MM-DD' format. ascending: Boolean, if True checks for increasing order, if False checks for descending order. Returns: bool: True if dates are in correct order, otherwise False. from datetime import datetime try: date_objects = [datetime.strptime(date, '%Y-%m-%d') for date in dates] if ascending: return all(earlier <= later for earlier, later in zip(date_objects, date_objects[1:])) else: return all(earlier >= later for earlier, later in zip(date_objects, date_objects[1:])) except ValueError: return False"},{"question":"Write a Python code to insert a new node at the head of a doubly linked list and ensure that the linked list remains sorted in ascending order.","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None def insert_sorted(self, data): new_node = Node(data) if self.head is None: # List is empty self.head = new_node elif self.head.data >= new_node.data: new_node.next = self.head self.head.prev = new_node self.head = new_node else: current = self.head while current.next is not None and current.next.data < new_node.data: current = current.next new_node.next = current.next if current.next is not None: new_node.next.prev = new_node current.next = new_node new_node.prev = current def to_list(self): Helper function to convert linked list to list for easy testing result = [] current = self.head while current: result.append(current.data) current = current.next return result"},{"question":"As a fitness coach, I want to create a Python function that randomly selects three different exercises for three weekly group exercise sessions. I already have a list of exercises that I want to use, which includes 'squat', 'push-up', 'lunge', 'pull-up', 'deadlift', 'dumbbell row', and 'burpee'. How can I write a Python function that takes this list as input and returns a list of three randomly selected exercises, without any repetition?","solution":"import random def select_exercises(exercises_list): Returns a list of three randomly selected exercises from the given list without repetition. Parameters: exercises_list (list): A list of exercise names. Returns: list: A list containing three randomly selected exercises. return random.sample(exercises_list, 3) # Example usage: # exercises = ['squat', 'push-up', 'lunge', 'pull-up', 'deadlift', 'dumbbell row', 'burpee'] # print(select_exercises(exercises))"},{"question":"Given a string, replace all occurrences of a given character with another given character in an efficient manner. Do this while handling a possible case of the input string being extremely large, exceeding the memory limits. Initialize your function with a 50 million character string to test this. Make sure your implementation considers both the computational time complexity and space complexity.","solution":"def replace_character(input_string, target_char, replacement_char): Replace all occurrences of target_char with replacement_char in input_string. if type(input_string) is not str or type(target_char) is not str or type(replacement_char) is not str: raise TypeError(\\"All inputs must be of str type.\\") if len(target_char) != 1 or len(replacement_char) != 1: raise ValueError(\\"Both target_char and replacement_char must be single characters.\\") return input_string.replace(target_char, replacement_char) # Efficiently handling extremely large strings can be inherently done with the built-in replace method."},{"question":"Write a Python program to identify all prime numbers within a given range. The program should accept two integers as input, representing the lower and upper bounds of the range, and output a list of all prime numbers within that range. Additionally, the program should implement the Sieve of Eratosthenes algorithm for finding prime numbers, and should include a function for determining whether a given number is prime using the Miller-Rabin primality test.","solution":"import random def is_prime_miller_rabin(n, k=5): if n <= 1: return False if n <= 3: return True if n % 2 == 0: return False s, d = 0, n - 1 while d % 2 == 0: d //= 2 s += 1 def miller_rabin_trial(a, d, n, s): x = pow(a, d, n) if x == 1 or x == n - 1: return True for _ in range(s - 1): x = pow(x, 2, n) if x == n - 1: return True return False for _ in range(k): a = random.randint(2, n - 2) if not miller_rabin_trial(a, d, n, s): return False return True def sieve_of_eratosthenes(lower, upper): if lower < 2: lower = 2 prime = [True] * (upper + 1) p = 2 while p * p <= upper: if prime[p]: for i in range(p * p, upper + 1, p): prime[i] = False p += 1 return [p for p in range(lower, upper + 1) if prime[p]] def find_primes_in_range(lower, upper): return sieve_of_eratosthenes(lower, upper)"},{"question":"Generate a list of length n containing all numbers from 1 to n using Python.","solution":"def generate_list(n): Generates a list of integers from 1 to n. Parameters: n (int): The length of the list and the highest number. Returns: list: List of integers from 1 to n. return list(range(1, n + 1))"},{"question":"What is a Linear Search algorithm? Write a recursive python code to implement it.","solution":"def linear_search_recursive(arr, target, index=0): Recursively searches for the target value in the array. Returns the index of the target if found, otherwise returns -1. Parameters: arr (list): List of elements. target: The element to search for. index (int): The current index in the array, initially 0. Returns: int: Index of the target if found, otherwise -1. if index >= len(arr): return -1 if arr[index] == target: return index return linear_search_recursive(arr, target, index + 1)"},{"question":"Write a function to get the length of a given string without using any built-in function. The string can contain both upper and lower case alphabets, digits, and special characters. The function should also return the number of unique characters in the string, but the function should exclude any special characters and digits from the count of unique characters. Additionally, the function should ignore leading and trailing white spaces when calculating the length of the string.","solution":"def custom_strlen_and_unique_chars(s): Returns the length of the given string (excluding leading and trailing spaces) and the number of unique alphabetic characters (both upper and lower case). Special characters and digits are excluded from the count of unique characters. special_chars = set('!@#%^&*()-_=+[{]}|;:'\\",<.>/?\`~0123456789') s = s.strip() length = 0 unique_chars = set() for char in s: if char not in special_chars and char.isalpha(): unique_chars.add(char.lower()) length += 1 unique_char_count = len(unique_chars) return length, unique_char_count"},{"question":"Write a code to count the number of occurrences of a given word in an array of strings, while considering both case sensitivity, word boundaries, and ignoring special characters.","solution":"import re def count_occurrences(arr, word): Count the number of occurrences of a given word in an array of strings, while considering case sensitivity, word boundaries, and ignoring special characters. Parameters: arr (list of str): The input array of strings. word (str): The word to count the occurrences. Returns: int: The number of occurrences of the given word in the array. count = 0 word_boundary_pattern = re.compile(r'b' + re.escape(word) + r'b') for sentence in arr: cleaned_sentence = re.sub(r'[^ws]', '', sentence) count += len(word_boundary_pattern.findall(cleaned_sentence)) return count"},{"question":"Write a Python program for searching a 2D numpy array for a specific value and returning its row and column indices. If the value is found in multiple locations, the program should return all the locations. If not found, the program should output a message saying so.","solution":"import numpy as np def search_2d_array(array, value): Search a 2D numpy array for a specific value and return its row and column indices. If the value is found in multiple locations, return all the locations. If not found, return a message saying so. Args: array (np.ndarray): 2D numpy array to be searched. value: value to search for in the array. Returns: List of tuples representing the row and column indices of the found value, or a message if not found. results = [(i, j) for i in range(array.shape[0]) for j in range(array.shape[1]) if array[i, j] == value] if results: return results else: return \\"Value not found\\""},{"question":"Using Python programming language, write a function that takes two integer arguments, 9 and 6 respectively, and returns the result of subtracting 6 from 9. Additionally, create a table that displays the binary representation of the integers, their hexadecimal representation, and their respective ASCII characters. Finally, provide a written explanation of the subtraction process in both decimal and binary formats.","solution":"def subtract_and_info(a, b): Takes two integers a and b, returns the result of subtracting b from a. Also, returns a table displaying the binary representation, hexadecimal representation, and the ASCII characters for the given integers. subtraction_result = a - b binary_representation = {\\"a\\": bin(a), \\"b\\": bin(b), \\"result\\": bin(subtraction_result)} hex_representation = {\\"a\\": hex(a), \\"b\\": hex(b), \\"result\\": hex(subtraction_result)} ascii_representation = {\\"a\\": chr(a) if 0 <= a < 128 else None, \\"b\\": chr(b) if 0 <= b < 128 else None, \\"result\\": chr(subtraction_result) if 0 <= subtraction_result < 128 else None} info_table = { \\"Value\\": [a, b, subtraction_result], \\"Binary\\": [binary_representation[\\"a\\"], binary_representation[\\"b\\"], binary_representation[\\"result\\"]], \\"Hexadecimal\\": [hex_representation[\\"a\\"], hex_representation[\\"b\\"], hex_representation[\\"result\\"]], \\"ASCII\\": [ascii_representation[\\"a\\"], ascii_representation[\\"b\\"], ascii_representation[\\"result\\"]] } return subtraction_result, info_table # Explanation: # Initial values: a = 9 # decimal b = 6 # decimal # In binary: # a -> 1001 (binary representation of 9) # b -> 0110 (binary representation of 6) # Subtracting 6 from 9: # Decimal subtraction: 9 - 6 = 3 # Binary subtraction: # 1001 # - 0110 # -------- # 0011 (binary representation of 3)"},{"question":"Write a script to sort an array of numbers from largest to smallest using quick sort. The script should also handle duplicate numbers in the array and sort them based on their original positions. You are not allowed to use any built-in sorting functions or libraries. The time complexity of the script should be O(n log n) and the space complexity should be O(log n). The script should be able to handle arrays of up to 1 million elements.","solution":"def quicksort(arr, low, high): if low < high: pi = partition(arr, low, high) quicksort(arr, low, pi-1) quicksort(arr, pi+1, high) def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] > pivot: i = i + 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def sort_array(arr): Returns a sorted array in descending order. if len(arr) <= 1: return arr quicksort(arr, 0, len(arr)-1) return arr"},{"question":"Create a recursive Python function to generate the Fibonacci series up to the n-th term. The function should have a time complexity of O(2^n).","solution":"def fibonacci_recursive(n): Returns the n-th Fibonacci number using a recursive approach. Time Complexity: O(2^n) if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)"},{"question":"Create a Python function called 'sum_of_unique' that accepts a list of integers as an argument. This function should return the sum of all unique numbers in the list. If a number repeats in the list, it should not be included in the sum. The function should also handle empty lists by returning 0.","solution":"def sum_of_unique(numbers): Returns the sum of unique numbers in the list. If a number repeats in the list, it should not be included in the sum. Handles empty lists by returning 0. from collections import Counter # Count the occurrences of each number in the list counts = Counter(numbers) # Sum only the numbers that appear exactly once unique_sum = sum(number for number, count in counts.items() if count == 1) return unique_sum"},{"question":"With the XML and JSON data provided below, write a program that demonstrates the complete process of data transformation from XML to JSON in Python. Also, the program should handle any errors during transformation.","solution":"import json import xml.etree.ElementTree as ET def xml_to_json(xml_data): Converts XML data to JSON format. :param xml_data: str, Input XML data as a string. :return: str, JSON formatted string or error message. try: # Parse the XML data root = ET.fromstring(xml_data) # Convert the parsed XML to a dictionary xml_dict = etree_to_dict(root) # Convert the dictionary to a JSON string json_data = json.dumps(xml_dict) return json_data except ET.ParseError as e: return json.dumps({\\"error\\": f\\"Failed to parse XML: {str(e)}\\"}) def etree_to_dict(tree): Helper function to convert an XML tree into a dictionary. :param tree: xml.etree.ElementTree.Element, The root element of the XML tree. :return: dict, The XML data represented as a dictionary. d = {tree.tag: {} if tree.attrib else None} children = list(tree) if children: dd = {} for dc in map(etree_to_dict, children): for k, v in dc.items(): if k in dd: if not isinstance(dd[k], list): dd[k] = [dd[k]] dd[k].append(v) else: dd[k] = v d = {tree.tag: dd} if tree.attrib: d[tree.tag].update(('@' + k, v) for k, v in tree.attrib.items()) if tree.text: text = tree.text.strip() if children or tree.attrib: if text: d[tree.tag]['#text'] = text else: d[tree.tag] = text return d"},{"question":"Write a Python script that calculates the sum of the digits of a given positive integer. The script should also handle input validation, ensuring that the provided input is a positive integer. If the input is not a positive integer, the script should display an error message and ask the user to re-enter the number. Additionally, the script should keep track of the number of times the user has incorrectly entered a positive integer and display this count before exiting.","solution":"def sum_of_digits(number): Calculate and return the sum of the digits of the given positive integer. return sum(int(digit) for digit in str(number)) def is_positive_integer(s): Check if the given string represents a positive integer. if s.isdigit() and int(s) > 0: return True return False def main(): incorrect_attempts = 0 while True: user_input = input(\\"Please enter a positive integer: \\") if is_positive_integer(user_input): number = int(user_input) print(f\\"The sum of the digits of {number} is {sum_of_digits(number)}.\\") break else: incorrect_attempts += 1 print(\\"Error: The input is not a positive integer. Please try again.\\") print(f\\"You had {incorrect_attempts} incorrect attempts.\\") if __name__ == \\"__main__\\": main()"},{"question":"Create a Python function that accepts a list of numeric data as input, and returns a new list where each element is the result of the square of the original element. Ensure to handle non-numeric types by skipping them and only processing numeric elements. Additionally, include a main function that tests the functionality of this function with a predefined list of mixed data types.","solution":"def square_numeric_elements(data): Returns a list where each element is the square of the numeric elements in the original list. Non-numeric elements are skipped. result = [] for item in data: if isinstance(item, (int, float)): result.append(item ** 2) return result def main(): Main function to test square_numeric_elements with a predefined list of mixed data types. test_data = [1, 2, 'a', 3.0, 'b', 4] print(square_numeric_elements(test_data)) # Expected Output: [1, 4, 9.0, 16] if __name__ == \\"__main__\\": main()"},{"question":"I want to write a Python function to generate the first n Fibonacci numbers in a list. Can you help me with that?","solution":"def generate_fibonacci(n): Generates the first n Fibonacci numbers in a list. Parameters: n (int): The number of Fibonacci numbers to generate Returns: list: A list containing the first n Fibonacci numbers if n <= 0: return [] fibonacci_sequence = [0, 1] while len(fibonacci_sequence) < n: next_value = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_value) return fibonacci_sequence[:n]"},{"question":"Create a Python function, that when called with a string argument, will return all of the possible substrings of that string.","solution":"def get_substrings(s): Returns a list of all possible substrings of the input string. substrings = [] n = len(s) for i in range(n): for j in range(i+1, n+1): substrings.append(s[i:j]) return substrings"},{"question":"Design a binary tree data structure with the following operations: insert, search, and remove. Additionally, implement a function to find the lowest common ancestor of two given nodes in the tree. Ensure that the tree maintains its balance after each operation to ensure optimal performance. Also, make sure to handle edge cases such as attempting to remove a node that doesn't exist in the tree.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BinaryTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) def _insert(self, root, key): if key < root.val: if root.left is None: root.left = TreeNode(key) else: self._insert(root.left, key) else: if root.right is None: root.right = TreeNode(key) else: self._insert(root.right, key) def search(self, key): return self._search(self.root, key) def _search(self, root, key): if root is None or root.val == key: return root if key < root.val: return self._search(root.left, key) return self._search(root.right, key) def remove(self, key): self.root = self._remove(self.root, key) def _remove(self, root, key): if root is None: return root if key < root.val: root.left = self._remove(root.left, key) elif key > root.val: root.right = self._remove(root.right, key) else: if root.left is None: return root.right elif root.right is None: return root.left temp = self.minValueNode(root.right) root.val = temp.val root.right = self._remove(root.right, temp.val) return root def minValueNode(self, node): current = node while current.left is not None: current = current.left return current def findLCA(self, root, n1, n2): if root is None: return None if root.val > n1 and root.val > n2: return self.findLCA(root.left, n1, n2) if root.val < n1 and root.val < n2: return self.findLCA(root.right, n1, n2) return root def lowestCommonAncestor(self, n1, n2): return self.findLCA(self.root, n1, n2)"},{"question":"Write a python function called \`select_words\` that takes a string and a positive integer \`n\` as arguments and returns a list of all words from the string that contain exactly \`n\` consonants. The string will consist of words separated by spaces and will not exceed 100 characters. The output should maintain the order the words appear in the string. If the input string is empty, the function should return an empty list. For example, given the input \`(\\"Mary had a little lamb\\", 4)\`, the function should return \`[\\"little\\"]\`.","solution":"def select_words(s, n): Returns a list of words from the string s that contain exactly n consonants. vowels = \\"aeiouAEIOU\\" words = s.split() result = [] for word in words: consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels) if consonant_count == n: result.append(word) return result"},{"question":"Parse a deeply nested JSON string that contains arrays and objects, ensuring that the parsing algorithm has a time complexity of O(n) and a space complexity of O(1). The JSON string may include additional data types such as boolean, null, and numeric values, and must be parsed without the use of any external libraries or frameworks.","solution":"def parse_json(json_string): Parse a deeply nested JSON string that contains arrays and objects. :param json_string: A string containing a valid JSON :return: The parsed JSON as a Python object import json return json.loads(json_string)"},{"question":"Write a function in Python that takes two arrays of integers as parameters and returns the maximum product that can be obtained by multiplying one integer from each array. Note that the length of the two arrays will always be the same.","solution":"def max_product(arr1, arr2): Returns the maximum product that can be obtained by multiplying one integer from each array. The lengths of both arrays are the same. Parameters: arr1 (list of int): First array of integers. arr2 (list of int): Second array of integers. Returns: int: Maximum product of one integer from arr1 and one integer from arr2. # Find the maximum element from arr1 max1 = max(arr1) # Find the maximum element from arr2 max2 = max(arr2) # Return the product of the maximum elements return max1 * max2"},{"question":"Develop an algorithm using Python language that determines whether a given number is a prime number or not. Your program should not just return the boolean result but should also display appropriate messages for better user experience. Also, you will be given an erroneous piece of code with some logical mistakes and you are required to spot those errors and correct them.","solution":"def is_prime(n): Determines if the given number n is a prime number. Returns a tuple of (boolean, message). if n <= 1: return (False, f\\"{n} is not a prime number because it is less than or equal to 1.\\") if n <= 3: return (True, f\\"{n} is a prime number because it is 2 or 3.\\") if n % 2 == 0 or n % 3 == 0: return (False, f\\"{n} is not a prime number because it is divisible by 2 or 3.\\") i = 5 while i * i <= n: if n % i == 0 or n % i + 2 == 0: return (False, f\\"{n} is not a prime number because it is divisible by {i} or {i + 2}.\\") i += 6 return (True, f\\"{n} is a prime number because it is only divisible by 1 and itself.\\")"},{"question":"Given a list of tuples where each tuple contains an integer and a string, create a function in Python that converts the integer to its binary representation, and prepends the string component of each tuple with this binary representation.","solution":"def convert_and_prepend(tuples_list): Converts the integer component of each tuple to its binary representation and prepends it to the string component. Arguments: tuples_list -- list of tuples where each tuple contains an integer and a string Returns: new list of strings with binary representations prepended result = [] for num, text in tuples_list: binary_rep = bin(num)[2:] # Convert integer to binary and remove '0b' prefix result.append(f\\"{binary_rep}{text}\\") return result"},{"question":"Imagine you're working with a 'cfg' dictionary in Python, structured to hold various hyperparameters for a machine learning model. This dictionary encompasses elements such as the learning rate, the batch size, and the epochs for model training. Now, your task involves augmenting this dictionary with a new key-value pair. However, the catch is that the value pertinent to this new entry should be formulated via a blend of the existing learning rate and batch ratio values. If you visualize the learning rate as '0.001' and the batch ratio as '32', we’re aiming for a fusion of these two to contrive a novel, unobserved key known as 'hyperparam'. Your challenge is to achieve this in an effective manner, employing Python as your medium, and ensuring the accuracy of the 'hyperparam' key's value given the described process.","solution":"def augment_cfg_with_hyperparam(cfg): Augments the given cfg dictionary with a new key 'hyperparam'. The value of 'hyperparam' is calculated as the product of the learning rate and the batch size. Parameters: cfg (dict): Configuration dictionary containing 'learning_rate' and 'batch_size'. Returns: dict: The augmented configuration dictionary with 'hyperparam' added. learning_rate = cfg.get('learning_rate') batch_size = cfg.get('batch_size') if learning_rate is None or batch_size is None: raise ValueError(\\"cfg dictionary must contain 'learning_rate' and 'batch_size' keys.\\") hyperparam = learning_rate * batch_size cfg['hyperparam'] = hyperparam return cfg"},{"question":"Devise a function that accepts an array composed of strings and outputs an array, where each constituent string is rendered in reverse order. However, this function should exclude any strings that either contain numbers or are palindromes when reversed.","solution":"def reverse_and_filter_strings(strings): Reverses each string in the array, but excludes strings that contain numbers or are palindromes. Parameters: strings (list): List of strings. Returns: list: A new list with reversed strings excluding those with numbers or palindromes. def contains_numbers(s): return any(char.isdigit() for char in s) def is_palindrome(s): return s == s[::-1] result = [] for s in strings: if not contains_numbers(s) and not is_palindrome(s): result.append(s[::-1]) return result"},{"question":"Create a method to check if a given string contains duplicate characters. The method should return True if any character appears more than once in the string, and False otherwise. You should aim for an efficient solution with a time complexity of O(n), where n is the length of the string. The method should be case-sensitive, meaning that uppercase and lowercase characters should be treated as distinct. Additionally, you should not use any built-in functions or libraries for counting or checking the frequency of characters, such as collections.Counter or set(). Instead, you should implement your own logic to count the occurrences of each character in the string and determine if any character appears more than once.","solution":"def has_duplicate_characters(s): Checks if a given string contains duplicate characters. :param s: The input string to be checked. :return: True if any character appears more than once, otherwise False. char_count = {} for char in s: if char in char_count: return True char_count[char] = 1 return False"},{"question":"Generate a Python code to find the second largest number of an unsorted list. Additionally, provide a piece of erroneous code and explain why it doesn't work correctly.","solution":"def second_largest(numbers): Returns the second largest number in an unsorted list. if len(numbers) < 2: raise ValueError(\\"List must contain at least two distinct numbers.\\") first, second = float('-inf'), float('-inf') for number in numbers: if number > first: second = first first = number elif first > number > second: second = number if second == float('-inf'): raise ValueError(\\"List must contain at least two distinct numbers.\\") return second # Erroneous code def erroneous_second_largest(numbers): Returns the second largest number in an unsorted list. This code is erroneous. unique_numbers = list(set(numbers)) # create a list of unique numbers unique_numbers.sort() # sort the list return unique_numbers[-2] # return the second last element"},{"question":"Write a Python function that takes a list of strings as input and returns a dictionary where the keys are the unique email domains found in the list and the values are the number of emails associated with each domain. Ignore invalid email addresses that do not contain exactly one \\"@\\" and one \\".\\" after the \\"@\\".","solution":"def count_email_domains(email_list): Takes a list of strings and returns a dictionary with unique email domains as keys and the number of emails associated with each domain as values. domain_count = {} for email in email_list: if \\"@\\" in email and email.count('@') == 1: local, domain = email.split('@') if '.' in domain: if domain in domain_count: domain_count[domain] += 1 else: domain_count[domain] = 1 return domain_count"},{"question":"Reverse a given list without using any predefined functions. The solution should have a time complexity of O(n) and a space complexity of O(1).","solution":"def reverse_list(arr): Reverses the given list in place with O(n) time complexity and O(1) space complexity. left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Write a python program that will randomly generate a combination of K distinct elements from a list of N distinct elements. Specifically, select without replacement in a manner that each subset of K elements has an equal chance of being selected. For example, if the given list is [1, 2, 3, 4, 5] and K is 3, then any of the combinations such as [1, 2, 3], [4, 5, 3], [3, 1, 4] etc. must have an equal chance of being selected.","solution":"import random def random_combination(lst, K): Returns a randomly generated combination of K distinct elements from the list lst, where each subset of K elements has an equal chance of being selected. Parameters: lst (List): A list of N distinct elements K (int): The number of elements to select Returns: List: A list of K distinct randomly selected elements return random.sample(lst, K)"},{"question":"Given a list of integers, write a Python program to count how many numbers in the list are greater than 10 and have at least one digit that is a 3. Additionally, implement the solution using recursion.","solution":"def count_special_numbers(lst): Count numbers in the list that are greater than 10 and have at least one digit that is a 3. def contains_digit_3(n): Check if the number contains the digit 3. if n == 0: return False elif n % 10 == 3: return True else: return contains_digit_3(n // 10) if not lst: return 0 current = lst[0] if current > 10 and contains_digit_3(current): return 1 + count_special_numbers(lst[1:]) else: return 0 + count_special_numbers(lst[1:])"},{"question":"Create a Flask route for handling GET requests with the path \\"/hello\\". Additionally, implement a form in the HTML template that sends a POST request to the same route. The route should handle the POST request by retrieving the form data and displaying it on the web page.","solution":"from flask import Flask, request, render_template_string app = Flask(__name__) @app.route('/hello', methods=['GET', 'POST']) def hello(): if request.method == 'POST': name = request.form.get('name', 'World') return render_template_string('<h1>Hello, {{ name }}!</h1>', name=name) return render_template_string(''' <form method=\\"post\\" action=\\"/hello\\"> <label for=\\"name\\">Enter your name:</label> <input type=\\"text\\" id=\\"name\\" name=\\"name\\"> <button type=\\"submit\\">Submit</button> </form> ''')"},{"question":"Given a list of tuples, each with at least five elements, write a Python function that returns the third element of the tuple with the smallest fifth element. Additionally, the function should handle cases where the list is empty or where any tuple has less than five elements, by returning None.","solution":"def third_of_smallest_fifth_element(lst): Returns the third element of the tuple with the smallest fifth element. If the list is empty or any tuple has less than five elements, returns None. if not lst: return None valid_tuples = [tup for tup in lst if len(tup) >= 5] if not valid_tuples: return None smallest_fifth_tuple = min(valid_tuples, key=lambda x: x[4]) return smallest_fifth_tuple[2]"},{"question":"You have a numpy array named 'my_array' that contains 3 rows and 4 columns. Add a new row to this array with values: [0, 0, 0, 0] without using loops or inbuilt concatenate or resize functions. Instead, utilize the numpy's \\"np.lib.pad\\" function for this task. Also, write a function named 'add_row' that takes the original array and new row's values as arguments and returns the array with the new row appended.","solution":"import numpy as np def add_row(my_array, new_row_values): Adds a new row to a numpy array. Parameters: my_array (numpy array): The original array (3x4). new_row_values (list): The values of the new row to be added. Returns: numpy array: The new array with the added row. new_row = np.array(new_row_values).reshape(1, -1) padded_array = np.lib.pad(my_array, ((0, 1), (0, 0)), 'constant', constant_values=(0,)) padded_array[-1, :] = new_row return padded_array"},{"question":"Write a function in Python that returns the maximum sum of a subarray within a given array.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray within a given array. Parameters: nums (list): A list of integers Returns: int: Maximum sum of any subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given the following erroneous Python code, correct and modify it to write a Python program that not only converts the temperature given in Celsius to Fahrenheit but also handles conversions in the opposite direction and Kelvin scale. Your solution should also be able to handle arbitrary number of temperature inputs at once.","solution":"def celsius_to_fahrenheit(celsius): Converts Celsius to Fahrenheit. return (celsius * 9/5) + 32 def fahrenheit_to_celsius(fahrenheit): Converts Fahrenheit to Celsius. return (fahrenheit - 32) * 5/9 def celsius_to_kelvin(celsius): Converts Celsius to Kelvin. return celsius + 273.15 def kelvin_to_celsius(kelvin): Converts Kelvin to Celsius. return kelvin - 273.15 def convert_temperatures(temps, from_scale, to_scale): Converts a list of temperatures from one scale to another. Args: temps (list): List of temperature values. from_scale (str): The scale of the input temperature values. One of 'C', 'F', 'K'. to_scale (str): The scale to convert the temperature values to. One of 'C', 'F', 'K'. Returns: list: List of converted temperatures. converted_temps = [] for temp in temps: if from_scale == 'C': if to_scale == 'F': converted_temps.append(celsius_to_fahrenheit(temp)) elif to_scale == 'K': converted_temps.append(celsius_to_kelvin(temp)) elif to_scale == 'C': converted_temps.append(temp) elif from_scale == 'F': if to_scale == 'C': converted_temps.append(fahrenheit_to_celsius(temp)) elif to_scale == 'K': converted_temps.append(celsius_to_kelvin(fahrenheit_to_celsius(temp))) elif to_scale == 'F': converted_temps.append(temp) elif from_scale == 'K': if to_scale == 'C': converted_temps.append(kelvin_to_celsius(temp)) elif to_scale == 'F': converted_temps.append(celsius_to_fahrenheit(kelvin_to_celsius(temp))) elif to_scale == 'K': converted_temps.append(temp) return converted_temps"},{"question":"I want to create a basic blockchain in Python to understand its fundamentals. Can you guide me on how to do this?","solution":"import hashlib import time class Block: def __init__(self, index, previous_hash, timestamp, data, hash): self.index = index self.previous_hash = previous_hash self.timestamp = timestamp self.data = data self.hash = hash def calculate_hash(index, previous_hash, timestamp, data): value = f\\"{index}{previous_hash}{timestamp}{data}\\" return hashlib.sha256(value.encode('utf-8')).hexdigest() def create_genesis_block(): timestamp = int(time.time()) return Block(0, \\"0\\", timestamp, \\"Genesis Block\\", calculate_hash(0, \\"0\\", timestamp, \\"Genesis Block\\")) def create_new_block(previous_block, data): index = previous_block.index + 1 timestamp = int(time.time()) previous_hash = previous_block.hash hash = calculate_hash(index, previous_hash, timestamp, data) return Block(index, previous_hash, timestamp, data, hash) def is_valid_new_block(new_block, previous_block): if previous_block.index + 1 != new_block.index: return False if previous_block.hash != new_block.previous_hash: return False if calculate_hash(new_block.index, new_block.previous_hash, new_block.timestamp, new_block.data) != new_block.hash: return False return True blockchain = [create_genesis_block()] # Example usage: new_block = create_new_block(blockchain[-1], \\"Some data\\") if is_valid_new_block(new_block, blockchain[-1]): blockchain.append(new_block) print(\\"New block added\\") else: print(\\"Invalid block\\")"},{"question":"Is there a way to write a Python script that generates a random password of a specified length, where at least half of the characters are uppercase letters?","solution":"import random import string def generate_password(length): Generates a random password of specified length, where at least half of the characters are uppercase letters. if length < 2: raise ValueError(\\"Password length should be at least 2\\") num_uppercase = length // 2 num_remaining = length - num_uppercase uppercase_letters = random.choices(string.ascii_uppercase, k=num_uppercase) remaining_characters = random.choices(string.ascii_letters + string.digits + string.punctuation, k=num_remaining) password = uppercase_letters + remaining_characters random.shuffle(password) return ''.join(password)"},{"question":"Formulate a recursive function that calculates the factorial of a number. Your function should include error handling for scenarios where the input is not a positive integer. Additionally, implement a mechanism to avoid stack overflow in case of a large input.","solution":"import sys sys.setrecursionlimit(1500) def factorial(n): Returns the factorial of a non-negative integer n. Raises a ValueError if n is not a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a recursive function in Python which takes an integer as input and prints the Fibonacci series up to that number. Also, incorporate memoization to optimize your function for larger inputs. Bonus challenge: Modify your function to additionally return the sum of the Fibonacci series up to that number.","solution":"def fibonacci_series(n): memo = {0: 0, 1: 1} def fib_memo(n): if n not in memo: memo[n] = fib_memo(n - 1) + fib_memo(n - 2) return memo[n] series = [] sum_series = 0 for i in range(n + 1): fib_val = fib_memo(i) series.append(fib_val) sum_series += fib_val return series, sum_series"},{"question":"Write a code that takes a list as input and returns a list of every permutation of that list","solution":"import itertools def list_permutations(input_list): Returns a list of every permutation of the input list. return list(itertools.permutations(input_list))"},{"question":"Generate a SHA-256 hash for a given dictionary, ensuring that all keys and values are in lowercase and the keys are sorted alphabetically. The dictionary should not contain any empty or null values. Only consider keys and values that are of string or integer type. Return the hash in hexadecimal format.","solution":"import hashlib import json def dict_to_sha256_hash(dictionary): Generates a SHA-256 hash for a given dictionary. - Ensures all keys and values are in lowercase. - Sorts keys alphabetically. - Filters out empty, null, and non-string/integer values. Returns the hash in hexadecimal format. if not isinstance(dictionary, dict): raise ValueError(\\"Input must be a dictionary\\") # Filter dictionary: remove non-string/integer types, empty/null values filtered_dict = {k.lower(): str(v).lower() for k, v in dictionary.items() if (isinstance(k, (str, int)) and isinstance(v, (str, int)) and str(v).strip())} # Sort the dictionary by keys sorted_dict = dict(sorted(filtered_dict.items())) # Convert sorted dictionary to JSON string json_string = json.dumps(sorted_dict, separators=(',', ':')) # Generate SHA-256 hash hash_object = hashlib.sha256(json_string.encode('utf-8')) return hash_object.hexdigest()"},{"question":"Write a detailed guide on sorting a list of numbers using the bubble sort technique in Python. Include code snippets and explanations for each step. Additionally, discuss the time complexity of the algorithm and suggest improvements for efficiency.","solution":"def bubble_sort(arr): Sorts a list of numbers using the bubble sort algorithm. Parameters: arr (list): List of numbers to be sorted Returns: list: Sorted list n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] # Swap if elements are in the wrong order swapped = True if not swapped: break # If no two elements were swapped by inner loop, then the list is sorted return arr"},{"question":"Develop a Python code that interprets an input string consisting of numerous concatenated names and segregates them back into individual components based on a specific delimiter. Your function should deal with varying cases and possible whitespace irregularities. For instance, given the string: \\"Roark || Stacey || Martin\\", your program should return a list with the names as separate elements: [\\"Roark\\", \\"Stacey\\", \\"Martin\\"].","solution":"def segregate_names(input_string, delimiter=\\"||\\"): Splits the input string into individual names based on the given delimiter. Args: input_string (str): The concatenated names in a single string. delimiter (str): The delimiter used to separate names in the input string. Returns: list: A list containing the individual name components. # Strip any leading/trailing whitespace from the input string stripped_input = input_string.strip() # Split the string based on the delimiter names = stripped_input.split(delimiter) # Strip any leading/trailing whitespace from each name result = [name.strip() for name in names] return result"},{"question":"Consider the problem of counting the number of paths from one corner of an m x n grid to the opposite corner, with the constraint that you can only move either down or right at any point in time. Write a function to solve this problem using dynamic programming in Python.","solution":"def count_paths(m, n): Returns the number of paths from the top-left corner to the bottom-right corner of an m x n grid, moving only right or down. # Create a 2D list initialized to 0 dp = [[0 for _ in range(n)] for _ in range(m)] # There is exactly one way to reach any cell in the first row or first column # i.e., by only moving right or down respectively for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function in Python that takes two lists of integers as parameters and returns a new list that contains only the elements common to both lists.","solution":"def common_elements(list1, list2): Returns a list of common elements between list1 and list2. return list(set(list1) & set(list2))"},{"question":"Given a list of integers, write a function that prints the integers in reverse order, without using any built-in functions or data structures for reversing the list. You are allowed to use loops, conditional statements, and variables to solve this problem.","solution":"def reverse_print(lst): Prints the integers in the given list in reverse order. n = len(lst) for i in range(n-1, -1, -1): print(lst[i])"},{"question":"Create a Python function that fabricates a dictionary. In this dictionary, utilize the individual characters of a provided string as keys, and associate each key with its equivalent ASCII numeric value. The input string should be \\"abcd\\".","solution":"def fabricate_dict(input_string): Fabricates a dictionary using individual characters of the provided string as keys, and associates each key with its equivalent ASCII numeric value. :param input_string: The string to be used for creating the dictionary. :return: A dictionary mapping characters to their ASCII values. return {char: ord(char) for char in input_string} input_string = \\"abcd\\" result_dict = fabricate_dict(input_string) print(result_dict) # Should print: {'a': 97, 'b': 98, 'c': 99, 'd': 100}"},{"question":"Given a sorted array \`A\` and a target number \`k\`, write a Python function to find the number of times \`k\` appears in the array using binary search. Additionally, the function should return the starting and ending indexes of \`k\` in \`A\`.","solution":"def binary_search_count_and_indices(A, k): Returns the count of k in sorted array A and the starting and ending indices of k. If k is not found, returns (0, -1, -1). def find_left_index(A, k): left, right = 0, len(A) - 1 while left <= right: mid = (left + right) // 2 if A[mid] < k: left = mid + 1 else: right = mid - 1 return left def find_right_index(A, k): left, right = 0, len(A) - 1 while left <= right: mid = (left + right) // 2 if A[mid] <= k: left = mid + 1 else: right = mid - 1 return right n = len(A) left_index = find_left_index(A, k) right_index = find_right_index(A, k) if left_index <= right_index and 0 <= left_index < n and A[left_index] == k: count = right_index - left_index + 1 return count, left_index, right_index return 0, -1, -1"},{"question":"Write a python function which takes in a list of words and returns the word which has the maximum number of vowels in it. In case of a tie, return the word which occurs first in the list.","solution":"def word_with_max_vowels(words): Returns the word with the maximum number of vowels. In case of a tie, returns the word which occurs first in the list. vowels = set('aeiouAEIOU') def count_vowels(word): return sum(1 for letter in word if letter in vowels) max_count = -1 max_word = \\"\\" for word in words: current_count = count_vowels(word) if current_count > max_count: max_count = current_count max_word = word return max_word"},{"question":"Write a python program that traverses through a list of integers, finds a number that has the digit five in its value, and raises it to the power of 2. Display the final value found.","solution":"def find_and_square_five(numbers): This function traverses through a list of integers, finds the first number that has the digit five in its value, and raises it to the power of 2. for number in numbers: if '5' in str(number): return number ** 2 return None # in case no number contains the digit 5"},{"question":"Once we have a cubic equation of the form ax^3 + bx^2 + cx + d = 0, how can we graphics this equation in Python, and then add two vertical line x = p and x = q to the graph? And on top of that, how about adding two horizontal line y = m and y = n?","solution":"import numpy as np import matplotlib.pyplot as plt def plot_cubic_with_lines(a, b, c, d, p, q, m, n, x_range=(-10, 10)): Plots a cubic equation of the form ax^3 + bx^2 + cx + d = 0 and adds vertical lines at x = p and x = q, and horizontal lines at y = m and y = n. Parameters: - a, b, c, d: coefficients of the cubic equation - p, q: x-coordinates for the vertical lines - m, n: y-coordinates for the horizontal lines - x_range: tuple defining the range of x values to plot Returns: A plot of the cubic equation with the specified to vertical and horizontal lines. x = np.linspace(x_range[0], x_range[1], 400) y = a*x**3 + b*x**2 + c*x + d plt.figure(figsize=(10, 6)) plt.plot(x, y, label=f'{a}x^3 + {b}x^2 + {c}x + {d} = 0') # Adding vertical lines plt.axvline(x=p, color='red', linestyle='--', label=f'x = {p}') plt.axvline(x=q, color='blue', linestyle='--', label=f'x = {q}') # Adding horizontal lines plt.axhline(y=m, color='green', linestyle='--', label=f'y = {m}') plt.axhline(y=n, color='orange', linestyle='--', label=f'y = {n}') plt.xlabel('x') plt.ylabel('y') plt.title('Plot of Cubic Equation with Vertical and Horizontal Lines') plt.legend() plt.grid(True) plt.show()"},{"question":"Write a Python code that converts a given decimal number to a binary string, with a twist: the binary string should be reversed. For example, if the input number is 11, which is \\"1011\\" in binary, the output should be \\"1101\\". Implement this in a function called reverse_binary.","solution":"def reverse_binary(n): Converts a given decimal number to a binary string and returns the reversed binary string. :param n: An integer to be converted to reversed binary string. :return: A string representing the reversed binary of the input number. # Convert the number to binary (removing the '0b' prefix) and reverse the string reversed_binary = bin(n)[2:][::-1] return reversed_binary"},{"question":"Create a Python function that takes a list containing unpaired fruit names and returns a new list with each fruit name concatenated with the count of its characters.","solution":"def fruits_with_length(fruits): This function takes a list containing fruit names and returns a new list with each fruit name concatenated with the count of its characters. :param fruits: List of fruit names. :return: List of fruit names concatenated with their respective lengths. return [f\\"{fruit}{len(fruit)}\\" for fruit in fruits]"},{"question":"Create a Python function that receives a dictionary and a list of keys, and returns a list of values corresponding to those keys.","solution":"def get_values_from_keys(dictionary, keys): Returns a list of values corresponding to the provided list of keys. Parameters: dictionary (dict): The dictionary to retrieve values from. keys (list): The list of keys to retrieve values for. Returns: list: A list of values corresponding to the provided keys. return [dictionary.get(key) for key in keys]"},{"question":"Create a function that compares two strings and counts the number of mismatched alphabetic characters, taking into account their case and position in the strings. The compared strings can have a length from 1 to 1000 characters. The function should return the total number of mismatches.","solution":"def count_mismatches(str1, str2): Compares two strings and counts the number of mismatched characters, taking into account their case and position. Parameters: str1 (str): The first string to compare. str2 (str): The second string to compare. Returns: int: The total number of mismatches. mismatches = 0 # Ensure both strings are of the same length by padding the shorter one with spaces. max_length = max(len(str1), len(str2)) padded_str1 = str1.ljust(max_length) padded_str2 = str2.ljust(max_length) for ch1, ch2 in zip(padded_str1, padded_str2): if ch1 != ch2: mismatches += 1 return mismatches"},{"question":"Write a Python program to print a dictionary where the keys are prime numbers between 1 and 1000 (both included) and the values are the squares of the keys. Additionally, ensure that the program uses a function to check for prime numbers, and the program should also include error handling for potential invalid input.","solution":"def is_prime(n): Check if the number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def generate_prime_square_dict(start, end): Generate a dictionary where keys are prime numbers between \`start\` and \`end\` (both inclusive) and values are the squares of the keys. if not (isinstance(start, int) and isinstance(end, int)): raise ValueError(\\"Start and end values must be integers.\\") if start > end: raise ValueError(\\"Start value must not be greater than end value.\\") prime_square_dict = {i: i**2 for i in range(start, end+1) if is_prime(i)} return prime_square_dict # Generate the desired dictionary prime_square_dict = generate_prime_square_dict(1, 1000) print(prime_square_dict)"},{"question":"How can you create a dictionary in Python with 3 key-value pairs? Additionally, implement a function that checks if a given key is present in the dictionary and if not, adds it with a default value of 0. The function should also return the updated dictionary.","solution":"def create_dict(): Creates a dictionary with 3 key-value pairs. return {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'} def check_and_add_key(dictionary, key): Checks if a given key is present in the dictionary. If not, adds it with a default value of 0. Returns the updated dictionary. if key not in dictionary: dictionary[key] = 0 return dictionary"},{"question":"Develop a Python function to compute the factorial for a provided integer. Your function should handle and raise exceptions for invalid inputs (e.g., negative numbers, non-integer values). Implement it without using any built-in factorial functions but by utilizing recursion. Afterwards, add an additional feature to your function to calculate the number of trailing zeros in the factorial result. This too should be done without using any built-in Python functions. Below is a piece of erroneous code for reference. Analyze it and write the correct code.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Raises ValueError for negative numbers or non-integer values. if not isinstance(n, int): raise ValueError(\\"Factorial is only defined for integers.\\") if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1) def trailing_zeros_in_factorial(n): Returns the number of trailing zeros in the factorial of a non-negative integer n. Raises ValueError for negative numbers or non-integer values. if not isinstance(n, int): raise ValueError(\\"Trailing zero calculation is only defined for integers.\\") if n < 0: raise ValueError(\\"Trailing zero calculation is not defined for negative numbers.\\") count = 0 i = 5 while n // i > 0: count += n // i i *= 5 return count"},{"question":"Implement a function in Python that takes a string as input and reverses it in-place using only the letters of the original string. The function should ignore any non-letter characters and preserve their positions in the reversed string.","solution":"def reverse_letters_in_place(s): Reverses only the letters in the string 's' in place, preserving the positions of non-letter characters. Parameters: s (str): The input string containing letters and possibly non-letter characters. Returns: str: A new string with the letters reversed and non-letter characters in their original positions. letters = [ch for ch in s if ch.isalpha()] result = [] letter_index = len(letters) - 1 for char in s: if char.isalpha(): result.append(letters[letter_index]) letter_index -= 1 else: result.append(char) return ''.join(result)"},{"question":"Encapsulate an algorithm which enumerates the unique characters present in a specified sequence of alphanumeric characters, and indicate their positions. Additionally, implement error handling for inputs that aren't alphanumeric.","solution":"def unique_characters_positions(sequence): Takes an alphanumeric sequence and returns a dictionary with unique characters as keys and their positions as values. Raises a ValueError if the input is not alphanumeric. if not sequence.isalnum(): raise ValueError(\\"Input should be an alphanumeric sequence.\\") unique_positions = {} for index, char in enumerate(sequence): if char not in unique_positions: unique_positions[char] = [] unique_positions[char].append(index) return unique_positions"},{"question":"Develop a Python script for checking palindromes. The script should allow the user to input a word or phrase, and should then determine whether or not it is a palindrome, ignoring case, spaces, and punctuation.","solution":"import re def is_palindrome(s): Returns True if the input string s is a palindrome, ignoring case, spaces, and punctuation. # Remove spaces and punctuation, and convert to lower case cleaned_str = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"I have 500 URLs from various websites from which I want to scrape product information like product name, price, description, and image URLs. The websites are all e-commerce sites but have different structures. The product data is in HTML format and I need the output in CSV format for further analysis. Can you help me write a robust Python script that can handle this task? Also, it would be great if the script can automatically detect any anti-scraping mechanisms and handle them gracefully.","solution":"import requests from bs4 import BeautifulSoup import pandas as pd from random import randint from time import sleep from fake_useragent import UserAgent import logging # Set up logging logging.basicConfig(level=logging.INFO, filename='scraping.log', filemode='a', format='%(name)s - %(levelname)s - %(message)s') def get_headers(): ua = UserAgent() return {'User-Agent': ua.random} def parse_html(html_content): soup = BeautifulSoup(html_content, 'html.parser') # Extract product information product_name = soup.find(class_='product-name') price = soup.find(class_='price') description = soup.find(class_='description') image = soup.find('img', class_='product-image') product_info = { 'name': product_name.text if product_name else 'N/A', 'price': price.text if price else 'N/A', 'description': description.text if description else 'N/A', 'image_url': image['src'] if image else 'N/A' } return product_info def scrape_product_info(url): try: headers = get_headers() response = requests.get(url, headers=headers) # Handle potential anti-scraping mechanisms if response.status_code == 403: logging.warning(f'Access denied to {url}') return None if response.status_code != 200: logging.error(f'Failed to retrieve page: {url} with status code {response.status_code}') return None product_info = parse_html(response.content) logging.info(f'Successfully scraped: {url}') return product_info except requests.RequestException as e: logging.error(f'Error occurred for URL {url}: {str(e)}') return None def scrape_urls(urls): all_product_info = [] for url in urls: sleep(randint(1, 5)) product_info = scrape_product_info(url) if product_info: all_product_info.append(product_info) return all_product_info def save_to_csv(data, filename='products.csv'): df = pd.DataFrame(data) df.to_csv(filename, index=False) logging.info(f'Data saved to {filename}') if __name__ == \\"__main__\\": urls = [f'https://example.com/product/{i}' for i in range(1, 501)] # Replace with actual URLs list all_product_info = scrape_urls(urls) save_to_csv(all_product_info)"},{"question":"Build a closure that returns the number of times a specific word appears in a given string.","solution":"def word_counter(word): Returns a function that counts the occurrences of 'word' in a given string. def count_occurrences(s): return s.split().count(word) return count_occurrences"},{"question":"You are a Python programmer. Write a function \`missing_element\` that takes in two lists as parameters. The first list \`original_list\` will contain unique integers, and the second list \`modified_list\` is a copy of the first list with one element removed. Your task is to identify and return the missing element from the \`modified_list\`. Also, describe the time complexity of your solution. Consider adding a failing example, but ensure the test cases you provide, including the failing one, are clear and well thought out.","solution":"def missing_element(original_list, modified_list): Returns the missing element from modified_list which is not present compared to original_list. return sum(original_list) - sum(modified_list) # Time Complexity: O(n), where n is the length of the original_list. # This is because the sum function will iterate over each element of the lists once."},{"question":"Please write a Python 3 program that calculates the nth Fibonacci number using recursion. Also, include error handling to ensure that only non-negative integers are used as input, and display an appropriate message if the input is invalid.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. Validates that n is a non-negative integer. if not isinstance(n, int) or n < 0: return \\"Invalid input! Please enter a non-negative integer.\\" if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"How can I create a neural network using Pytorch to predict real estate prices?","solution":"import torch import torch.nn as nn import torch.optim as optim class RealEstateModel(nn.Module): def __init__(self, input_size): super(RealEstateModel, self).__init__() self.fc1 = nn.Linear(input_size, 64) self.fc2 = nn.Linear(64, 32) self.fc3 = nn.Linear(32, 1) def forward(self, x): x = torch.relu(self.fc1(x)) x = torch.relu(self.fc2(x)) x = self.fc3(x) return x def train_model(model, criterion, optimizer, train_loader, num_epochs=100): for epoch in range(num_epochs): for inputs, targets in train_loader: optimizer.zero_grad() outputs = model(inputs) loss = criterion(outputs, targets) loss.backward() optimizer.step() return model def evaluate_model(model, test_loader): model.eval() total_loss = 0 criterion = nn.MSELoss() with torch.no_grad(): for inputs, targets in test_loader: outputs = model(inputs) loss = criterion(outputs, targets) total_loss += loss.item() return total_loss / len(test_loader)"},{"question":"Given the erroneous code below, debug it and modify it to convert a very large string (containing up to 10^6 characters) to an integer. However, there's a twist. Your solution should interprete the string input as a large binary number which can then be converted to an integer.","solution":"def large_binary_string_to_int(binary_string): Converts a very large binary string to an integer. :param binary_string: A string containing the binary representation. :return: The integer representation of the binary string. return int(binary_string, 2)"},{"question":"Create a Python function that finds the maximum and minimum values in an input list of integers without using any built-in functions except for \`len()\` to get the length of the list. Also, develop a method to validate the input data type, ensuring it is either a list or tuple of integers.","solution":"def find_max_min(values): Finds the maximum and minimum values in a list or tuple of integers. Parameters: values (list or tuple): A list or tuple of integers. Returns: tuple: A tuple containing the maximum and minimum values in the format (max, min). Raises: TypeError: If the input is not a list or tuple of integers. ValueError: If the list or tuple is empty. if not isinstance(values, (list, tuple)): raise TypeError(\\"Input should be a list or tuple.\\") if len(values) == 0: raise ValueError(\\"Input list or tuple cannot be empty.\\") for v in values: if not isinstance(v, int): raise TypeError(\\"All elements in the list or tuple should be integers.\\") max_val, min_val = values[0], values[0] for v in values: if v > max_val: max_val = v if v < min_val: min_val = v return max_val, min_val"},{"question":"In the python code below, it is meant to be a function for decoding Caesar's cipher, where every letter is shifted backwards by the shift variable. However, the function seems to have some quirks that don't produce the correct output. Identify the error and rework the function so that it can properly decode a Caesar's cipher. In addition, enhance this function to accommodate both lower and uppercase letters, and preserve the case while decoding.","solution":"def caesar_cipher_decode(ciphertext, shift): Decodes a ciphertext using Caesar's cipher with the given shift, accommodating both lower and upper case letters, and preserving the case while decoding. decoded_text = [] for char in ciphertext: if char.isupper(): # Decode uppercase characters decoded_char = chr((ord(char) - shift - 65) % 26 + 65) decoded_text.append(decoded_char) elif char.islower(): # Decode lowercase characters decoded_char = chr((ord(char) - shift - 97) % 26 + 97) decoded_text.append(decoded_char) else: # Non-alphabetic characters remain the same decoded_text.append(char) return ''.join(decoded_text)"},{"question":"Modify the given code to be able to print an asterisk pyramid as specified in the output. The program should validate the input to ensure that the number of rows is a positive integer and prompt the user to re-enter the number of rows if it is not. Additionally, the program should limit the maximum number of rows to 20 and display an error message if the user inputs a number greater than 20. The output should have a space between each asterisk and each row of the pyramid should be centered. Finally, the program should ask the user if they want to print the pyramid in reverse order before printing it.","solution":"def print_pyramid(rows, reverse=False): pyramid = [] for i in range(rows): row = ' ' * (rows - i - 1) + ' '.join(['*'] * (i + 1)) pyramid.append(row) if reverse: pyramid = pyramid[::-1] for row in pyramid: print(row) def main(): while True: try: rows = int(input(\\"Enter the number of rows (1-20): \\")) if rows < 1 or rows > 20: print(\\"Please enter a value between 1 and 20.\\") else: break except ValueError: print(\\"Please enter a valid integer.\\") reverse_input = input(\\"Do you want to print the pyramid in reverse order? (yes/no): \\").strip().lower() reverse = reverse_input == 'yes' print_pyramid(rows, reverse) if __name__ == \\"__main__\\": main()"},{"question":"Given the following list of numbers [1,2,3,4,5,6,7,8,9,10], write a Python function to separate them into two different lists: one for prime numbers and one for composite numbers. Make sure to check the time complexity of your solution and optimize it to the best of your ability.","solution":"def is_prime(n): Check if n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def separate_prime_composite(numbers): Separate the given list into prime and composite numbers. primes = [] composites = [] for number in numbers: if is_prime(number): primes.append(number) elif number > 1: composites.append(number) return primes, composites # Example Usage numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] primes, composites = separate_prime_composite(numbers) print(\\"Primes:\\", primes) print(\\"Composites:\\", composites)"},{"question":"Create a Python program that generates a random password using a combination of uppercase letters, lowercase letters, numbers, and symbols. The password must be at least 12 characters long and contain at least one of each type of character. The program should prompt the user for the desired length of the password and generate a password accordingly. The generated password should be displayed on the screen and saved to a file named \\"generated_password.txt\\".","solution":"import random import string def generate_password(length): Generates a random password with the specified length. The password will contain at least one uppercase letter, one lowercase letter, one digit, and one special character. if length < 12: raise ValueError(\\"Password length must be at least 12 characters.\\") # Define the character sets upper = string.ascii_uppercase lower = string.ascii_lowercase digits = string.digits symbols = string.punctuation # Ensure the password has at least one of each required character type password = [ random.choice(upper), random.choice(lower), random.choice(digits), random.choice(symbols) ] # Fill the rest of the password length with random choices from all character sets combined all_chars = upper + lower + digits + symbols password += random.choices(all_chars, k=length - 4) # Shuffle the list to avoid a predictable pattern and convert to a string random.shuffle(password) password = ''.join(password) # Save the password to a file with open(\\"generated_password.txt\\", \\"w\\") as file: file.write(password) return password"},{"question":"Write a function in Python that takes a list of numbers and returns the greatest difference between any two numbers in the list. The function should also handle edge cases like an empty list or a list with a single element. Finally, write tests to ensure that the function works as expected under different scenarios.","solution":"def greatest_difference(nums): Returns the greatest difference between any two numbers in the list. For an empty list or a list with a single element, returns 0. if len(nums) < 2: return 0 return max(nums) - min(nums)"},{"question":"Given the list of integers, write a Python program to compute the running median for the list. Note that the list can have an even or odd number of elements, and it might have duplicated values. As a hint, you might consider using a heaps.","solution":"import heapq def running_median(stream): Returns the running median of a stream of integers. Parameters: stream (List[int]): List of integer values in the stream. Returns: List[float]: List containing running median values. min_heap = [] # right half max_heap = [] # left half def add_num(num): heapq.heappush(max_heap, -heapq.heappushpop(min_heap, num)) if len(min_heap) < len(max_heap): heapq.heappush(min_heap, -heapq.heappop(max_heap)) def get_median(): if len(min_heap) > len(max_heap): return float(min_heap[0]) return (min_heap[0] - max_heap[0]) / 2.0 result = [] for number in stream: add_num(number) result.append(get_median()) return result"},{"question":"Can you provide an AI solution for creating a web application that takes user input and generates a URL-safe base64 string from it?","solution":"import base64 def generate_url_safe_base64(user_input): Takes a user input string and returns a URL-safe base64 encoded string. Parameters: user_input (str): The string to encode. Returns: str: The URL-safe base64 encoded string. byte_input = user_input.encode('utf-8') encoded_bytes = base64.urlsafe_b64encode(byte_input) encoded_str = encoded_bytes.decode('utf-8') return encoded_str"},{"question":"Reverse the order of items in an array without using any built-in functions or creating a new array for storing the reversed elements. Your solution should have a time complexity of O(n) and should not use any extra space beyond a few integer variables. The input array will always contain at least one element. Additionally, you are not allowed to use any loop constructs such as for, while, or do-while.","solution":"def reverse_array(arr, start=0, end=None): Reverses the order of items in the array in place without using any built-in functions. if end is None: end = len(arr) - 1 if start >= end: return arr # Swap elements at start and end arr[start], arr[end] = arr[end], arr[start] # Recursively call function to reverse the rest of the array return reverse_array(arr, start + 1, end - 1)"},{"question":"Chatbot, can you write a computer program in Python that takes in a list of integers, and outputs the largest value among them? The program should also include error handling for non-integer inputs and empty lists. Finally, it should use the function in two different scenarios to demonstrate its correctness and versatility.","solution":"def find_largest_value(numbers): Returns the largest integer from a list of integers. Args: numbers (list): A list of integers. Returns: int: The largest integer in the list. Raises: ValueError: If the list is empty or contains non-integer elements. if not numbers: raise ValueError(\\"The list is empty.\\") if any(not isinstance(x, int) for x in numbers): raise ValueError(\\"The list contains non-integer elements.\\") return max(numbers) # Scenario demonstration: try: print(\\"Scenario 1:\\", find_largest_value([3, 5, 7, 2, 8])) # Should print: 8 print(\\"Scenario 2:\\", find_largest_value([-10, -20, -30, -1])) # Should print: -1 except ValueError as e: print(e)"},{"question":"Given a binary tree, write a function to serialize and deserialize the tree. Additionally, implement an order traversal (pre-order, in-order or post-order based on your preference) during serialization and during deserialization, recreate the tree according to the order traversal used. Also ensure that your solution can handle not only positive numbers, but also negative numbers and zero.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def serialize(root): Serializes a binary tree to a string using pre-order traversal. def helper(node): if node is None: return \\"None\\" return f\\"{node.value},{helper(node.left)},{helper(node.right)}\\" return helper(root) def deserialize(data): Deserializes a string to a binary tree using pre-order traversal. def helper(nodes): value = nodes.pop(0) if value == \\"None\\": return None node = TreeNode(int(value)) node.left = helper(nodes) node.right = helper(nodes) return node node_values = data.split(',') return helper(node_values) # Additional functions for traversing the binary tree (for testing purposes) def pre_order_traversal(node): if node is None: return [] return [node.value] + pre_order_traversal(node.left) + pre_order_traversal(node.right)"},{"question":"Given a string and an int k, write a function to find the maximum number of unique characters in the string after replacing every character at least once with any other character at a cost of k operations. Each operation involves replacing a character with another character. Consider that all characters in the string are lowercase English letters.","solution":"def max_unique_characters(s, k): Returns the maximum number of unique characters in the string \`s\` after performing at most \`k\` operations of replacing characters. from collections import Counter n = len(s) if k >= n: return min(26, n) # At most there can be 26 unique letters in English freq = Counter(s) unique_chars = len(freq) if k == 0: return unique_chars replacements_needed = n - unique_chars max_unique_after_k_operations = min(unique_chars + k, 26, n) return max_unique_after_k_operations"},{"question":"Develop an in-place algorithm to rearrange an array of unique integer elements. The goal is to form two subarrays that have an equal sum, yet, unlike the conventional approach, you are required to perform this without creating new arrays or additional data structures. Your code should illustrate how to achieve this by modifying the original array in place. For an added challenge, aim for a time complexity better than O(n²). Below is a demonstration using Python; feel free to select another language if preferred.","solution":"def partition_into_two_equal_sum_subarrays(arr): This function attempts to rearrange the array in place so that two subarrays of equal sum are formed. Returns True if it is possible, otherwise False. total_sum = sum(arr) n = len(arr) # If total sum is odd, it's not possible to partition into two equal sum subarrays if total_sum % 2 != 0: return False target_sum = total_sum // 2 current_sum = 0 # Using two-pointer technique for in-place partitioning simulation left = 0 right = n - 1 while left < right: if current_sum + arr[left] <= target_sum: current_sum += arr[left] left += 1 elif current_sum + arr[right] <= target_sum: current_sum += arr[right] right -= 1 else: return False if current_sum == target_sum: return True return False"},{"question":"Create a function in Python that takes in a positive integer N as input and returns a list of N randomly generated numbers between 0 and 100, inclusive. The function should ensure that all numbers in the list are unique. The function should have a time complexity of O(N) and a space complexity of O(N).","solution":"import random def generate_unique_numbers(N): Generate a list of N unique random integers between 0 and 100 inclusive. Args: N (int): The number of unique random integers to generate. Returns: list: A list of N unique random integers between 0 and 100 inclusive. if N > 101 or N <= 0: raise ValueError(\\"N must be between 1 and 101 (inclusive)\\") numbers = list(range(101)) random.shuffle(numbers) return numbers[:N]"},{"question":"Reverse a string using Python code and without using any built-in string reversal functions, slicing, or any additional data structures. Additionally, ensure that the solution has a time complexity of O(n), where n is the length of the string.","solution":"def reverse_string(s): Reverses a string without using any built-in string reversal functions, slicing, or additional data structures. s_list = list(s) # Convert string to a list to allow mutability n = len(s_list) for i in range(n // 2): # Swap the elements s_list[i], s_list[n - i - 1] = s_list[n - i - 1], s_list[i] return ''.join(s_list) # Convert list back to string"},{"question":"let's say I have a linked list, and I want to remove the k-th node from the end of the linked list. How can I do this?","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_kth_from_end(head, k): Removes the k-th node from the end of the linked list. # Define a dummy node dummy = ListNode(0, head) first = dummy second = dummy # Move first pointer k+1 steps ahead for _ in range(k+1): first = first.next # Move first to the end, maintaining the gap while first is not None: first = first.next second = second.next # Remove the k-th node from the end second.next = second.next.next return dummy.next"},{"question":"How can I extract a specific block of text between two delimiter words in a string using Python?","solution":"def extract_block(text, start_delim, end_delim): Extracts and returns the block of text between the start_delim and end_delim in the given text. If either delimiter is not found, returns an empty string. :param text: The string from which to extract the block of text :param start_delim: The starting delimiter :param end_delim: The ending delimiter :return: The block of text between the start_delim and end_delim start_index = text.find(start_delim) if start_index == -1: return \\"\\" end_index = text.find(end_delim, start_index + len(start_delim)) if end_index == -1: return \\"\\" return text[start_index + len(start_delim):end_index]"},{"question":"Given an iterable collection of key-value pairs, write a Python program to separate the keys and values into two lists.","solution":"def separate_keys_values(pairs): Separates the keys and values from the given iterable collection of key-value pairs. Args: pairs (iterable): An iterable collection of key-value pairs (tuples). Returns: list: A list of keys. list: A list of values. keys = [] values = [] for key, value in pairs: keys.append(key) values.append(value) return keys, values"},{"question":"Write a function that takes as input an array of integers and returns a new array where each element is the product of all the elements in the original array except itself. You are not allowed to use division and the solution should have a time complexity of O(n) and space complexity of O(1), excluding the space required for the output array.","solution":"def product_except_self(nums): Returns an array where each element at index i is the product of all elements in the nums array except nums[i]. The solution cannot use division and must have O(n) time complexity. n = len(nums) result = [1] * n # initialize result array with 1s # Calculate the products of elements to the left of each element left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Calculate the products of elements to the right of each element right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Given a list of words, write a program to filter out the words that can be typed using only the left-hand side of a standard QWERTY keyboard.","solution":"def left_hand_words(words): Filters out words that can be typed using only the left-hand side keys of a QWERTY keyboard. Parameters: words (list): A list of words. Returns: list: A list of words that can be typed using the left-hand side keys only. left_hand_keys = set(\\"qwertasdfgzxcvb\\") result = [] for word in words: if all(char in left_hand_keys for char in word.lower()): result.append(word) return result"},{"question":"Write a python function to print the multiplication table of a given number, but only for the numbers that are prime and less than or equal to the given number. The function should also return the sum of all the prime numbers in the multiplication table.","solution":"def is_prime(n): Check if the number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def prime_multiplication_table_and_sum(num): Print the multiplication table for prime numbers less than or equal to num and return the sum of these prime numbers. primes = [i for i in range(2, num + 1) if is_prime(i)] prime_sum = sum(primes) for prime in primes: for i in range(1, 11): print(f'{prime} x {i} = {prime * i}') print('---------') return prime_sum"},{"question":"Use PyTorch to write a function that predicts a class label based on five numerical features. Additionally, implement a data preprocessing step that includes normalization, and add error handling for potential missing values. You are provided with an erroneous code as reference below which lacks these essential components.","solution":"import torch import torch.nn as nn import torch.optim as optim import numpy as np from sklearn.preprocessing import StandardScaler class SimpleNN(nn.Module): def __init__(self): super(SimpleNN, self).__init__() self.fc1 = nn.Linear(5, 10) self.fc2 = nn.Linear(10, 2) def forward(self, x): x = torch.relu(self.fc1(x)) x = self.fc2(x) return x def preprocess_data(data): # Check and handle missing values if np.isnan(data).any(): raise ValueError(\\"Data contains NaN values\\") # Normalize the data scaler = StandardScaler() data = scaler.fit_transform(data) return data def predict(data): Predicts class label based on five numerical features after normalizing the features and handling missing values. Parameters: data (array): A numpy array of shape (n_samples, 5) with numerical features. Returns: Array of predicted class labels. # Preprocess data data = preprocess_data(data) # Convert to PyTorch tensor data_tensor = torch.tensor(data, dtype=torch.float32) # Initialize the model and set it to evaluation mode model = SimpleNN() model.eval() with torch.no_grad(): outputs = model(data_tensor) # Predict classes (taking the index of the max logit) _, predicted = torch.max(outputs, 1) return predicted.numpy()"},{"question":"Given a map of a game where every cell can be either a wall represented as 1 or a free space represented as 0. The map is represented in the format of a two-dimensional integer array, such as [[0, 0, 0], [0, 1, 0], [0, 0, 0]]. We need to modify the map so that in each row, the zeros to the left of the first 1 are filled with 2 if there is a 1 in that row. The cells containing 1 or 0 remain unchanged.","solution":"def modify_map(game_map): Modifies the game map such that every zero to the left of the first 1 is filled with 2. :param game_map: List[List[int]] - A two-dimensional array representing the game map :return: List[List[int]] - The modified game map for row in game_map: try: first_one_index = row.index(1) for i in range(first_one_index): row[i] = 2 except ValueError: # No '1' in the current row, do nothing pass return game_map"},{"question":"Write a Python function that processes a string and returns the number of vowels and consonants in it. Also, provide a piece of erroneous code and ask the candidate to identify and correct the issues in it.","solution":"def count_vowels_and_consonants(s): Returns the number of vowels and consonants in the string s. Parameters: s (str): Input string. Returns: tuple: A tuple containing the number of vowels and consonants. vowels = \\"aeiouAEIOU\\" num_vowels = 0 num_consonants = 0 for char in s: if char.isalpha(): if char in vowels: num_vowels += 1 else: num_consonants += 1 return (num_vowels, num_consonants)"},{"question":"Write a Python code to map the street names with their corresponding IDs from two different files, namely 'street_file.csv' and 'id_file.csv'. The street_file contains only the street names while the id_file contains only the IDs. Can you also provide a method to check the number of mappings that have been successfully found?","solution":"import csv def map_streets_to_ids(street_file, id_file): Maps street names from street_file with IDs from id_file. Assumes that the lines in the files correspond to each other. :param street_file: path to the CSV file containing street names :param id_file: path to the CSV file containing IDs :return: dictionary with street names as keys and their corresponding IDs as values street_to_id = {} with open(street_file, 'r') as sf, open(id_file, 'r') as idf: street_reader = csv.reader(sf) id_reader = csv.reader(idf) for street, street_id in zip(street_reader, id_reader): street_name = street[0] street_id = street_id[0] street_to_id[street_name] = street_id return street_to_id def count_successful_mappings(street_to_id): Returns the number of successful mappings in the provided dictionary. :param street_to_id: dictionary with street names as keys and their corresponding IDs as values :return: number of successful mappings return len(street_to_id)"},{"question":"Given 3 unequal lists as input, write a python function to return a list containing only the common elements in all 3 lists without using any inbuilt python functions such as intersection and union. Additionally, implement the function in such a way that it handles not only numerical data but also string data.","solution":"def common_elements(list1, list2, list3): Returns a list containing only the common elements in all 3 lists. result = [] for item in list1: if item in list2 and item in list3: result.append(item) return result"},{"question":"Develop a python function that not only identifies the number of numerical characters in a given string, but also recognizes and returns a dictionary of each unique numerical character and its frequency. The function should also be capable of handling and counting numerical characters from different numeral systems like Roman, Arabic, Chinese, etc. However, for the purpose of this question, let's focus only on Roman numerals.","solution":"import re def count_numerical_characters(s): Identifies the number of numerical characters in a given string and returns a dictionary of each unique numerical character and its frequency. This function currently recognizes Arabic and Roman numeral characters. # Define regex for Arabic numerals (0-9) and Roman numerals (I, V, X, L, C, D, M) pattern = re.compile(r'[0-9IVXLCDM]') # Find all numerical character matches in the input string matches = pattern.findall(s) # Count frequency of each unique numerical character frequency_dict = {} for match in matches: if match in frequency_dict: frequency_dict[match] += 1 else: frequency_dict[match] = 1 return frequency_dict"},{"question":"Take a positive integer input greater than 1 and output the Fibonacci sequence up to that number, but only include the Fibonacci numbers that are also prime numbers. Additionally, make sure that the program runs in O(n) time complexity, where n is the input number.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def fibonacci_primes_up_to_n(n): if n <= 1: return [] fibonacci_primes = [] a, b = 0, 1 while a <= n: if is_prime(a): fibonacci_primes.append(a) a, b = b, a + b return fibonacci_primes"},{"question":"Write a function in Python that takes a list of numbers as an argument and returns a new list with only the odd numbers from the original list. The function should be named \\"extract_odd_numbers\\" and should handle empty lists gracefully, returning an empty list in that case.","solution":"def extract_odd_numbers(numbers): Returns a new list with only the odd numbers from the original list. Args: numbers (list): A list of integers. Returns: list: A list containing only the odd integers from the input list. return [num for num in numbers if num % 2 != 0]"},{"question":"I want you to write a Python function that takes a list of strings as input and returns a new list with only the strings of length 2 or greater.","solution":"def filter_strings(strings): Filters strings from the input list that are of length 2 or greater. Args: strings (list of str): A list of strings to be filtered. Returns: list of str: A new list containing only strings of length 2 or greater. return [string for string in strings if len(string) >= 2]"},{"question":"Write a Python script that finds the most frequent character in a string that is not a vowel. The script should print the most frequent non-vowel character and its frequency. If there are multiple characters with the same maximum frequency, print the one that appears first in the string. Ignore case sensitivity.","solution":"def most_frequent_non_vowel(s): Returns the most frequent non-vowel character in a string and its frequency. If there are multiple characters with the same maximum frequency, returns the one that appears first. Ignore case sensitivity. vowels = set('aeiou') frequency = {} for char in s.lower(): if char.isalpha() and char not in vowels: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 if not frequency: return None, 0 most_frequent_char = max(frequency, key=lambda k: (frequency[k], -s.lower().index(k))) return most_frequent_char, frequency[most_frequent_char]"},{"question":"I have a list in Python, [1,2,0,3,0,4,5], and I want to remove all the zeros from it. How can I implement a function that removes these zeros and returns the modified list?","solution":"def remove_zeros(input_list): Removes all zeros from the input list. Args: input_list (list): List of integers. Returns: list: A new list with all zeros removed. return [x for x in input_list if x != 0]"},{"question":"Explain how a Doubly Linked List works and provide an implementation in Python using classes and methods in one shot, also include methods for adding elements at the beginning, end, and in between at a given index, deleting elements by value, and reversing the list.","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None def add_to_beginning(self, data): new_node = Node(data) if self.head is None: self.head = new_node else: new_node.next = self.head self.head.prev = new_node self.head = new_node def add_to_end(self, data): new_node = Node(data) if self.head is None: self.head = new_node else: current = self.head while(current.next): current = current.next current.next = new_node new_node.prev = current def add_at_index(self, index, data): if index == 0: self.add_to_beginning(data) return new_node = Node(data) current = self.head for i in range(index - 1): if current is None: raise IndexError(\\"Index is out of bounds\\") current = current.next if current is None: raise IndexError(\\"Index is out of bounds\\") new_node.next = current.next new_node.prev = current if current.next: current.next.prev = new_node current.next = new_node def delete_by_value(self, data): current = self.head while current: if current.data == data: if current.prev: current.prev.next = current.next if current.next: current.next.prev = current.prev if current == self.head: self.head = current.next return current = current.next raise ValueError(\\"Value not found in the list\\") def reverse(self): current = self.head temp = None while current: temp = current.prev current.prev = current.next current.next = temp current = current.prev if temp: self.head = temp.prev def display(self): elements = [] current = self.head while current: elements.append(current.data) current = current.next return elements"},{"question":"Develop a function 'detectDupes' that not only identifies if a tuple has more than one of the same entries, but also returns a dictionary identifying the duplicate numbers along with the number of times they are repeated in the tuple. You are not allowed to use any built-in python library for this task.","solution":"def detectDupes(tup): Identifies if a tuple has duplicate entries and returns a dictionary with the duplicate entries and their frequencies. Arguments: tup -- tuple of integers Returns: A dictionary where keys are the duplicate entries and values are the number of times they are repeated. element_count = {} for item in tup: if item in element_count: element_count[item] += 1 else: element_count[item] = 1 duplicates = {} for key in element_count: if element_count[key] > 1: duplicates[key] = element_count[key] return duplicates"},{"question":"Write a Python function that not only converts time from 24-hour format to 12-hour format with AM/PM indicators but also validates if the input time is in correct 24-hour format. The function should throw an exception with appropriate error message in case of invalid input. Consider leap year scenarios for February month. The input to the function would be a string in the format \\"HH:MM\\" and you also need to account for leading zeros.","solution":"import re def convert_and_validate_time(time_24): Converts a time from 24-hour format to 12-hour format with AM/PM. Validates if the input time is in correct 24-hour format. if not re.match(r'^([01]d|2[0-3]):[0-5]d', time_24): raise ValueError('Invalid time format') hours, minutes = map(int, time_24.split(':')) period = 'AM' if hours < 12 else 'PM' hours = hours % 12 hours = 12 if hours == 0 else hours return f\\"{hours:02}:{minutes:02} {period}\\""},{"question":"Create a Python function that extracts the tertiary constituent from a Python list, provided the list has at least 'n' elements. Additionally, have the function return a suitable error message if the number of elements in the list is less than 'n'.","solution":"def extract_tertiary_element(lst, n): Extracts the tertiary (3rd) element from the list if the list has at least 'n' elements. Parameters: lst (list): The input list. n (int): The minimum required number of elements in the list. Returns: element (any): The tertiary element if conditions are met. str: Error message if the number of elements is less than 'n'. if len(lst) < n: return f\\"Error: The list has fewer than {n} elements.\\" if len(lst) < 3: return \\"Error: The list has fewer than 3 elements.\\" return lst[2]"},{"question":"Create a recursive function in Python that calculates the factorial of a number. Additionally, implement error checking to ensure the input is a positive integer, and handle any potential recursion depth issues.","solution":"def factorial(n): Returns the factorial of a positive integer n. Raises ValueError if n is not a positive integer. Handles recursion depth issues. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a positive integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Given a binary number as a string, convert it to a hexadecimal number and return it as a string. Make sure to handle possible exceptions and edge cases. Your code should not use in-build or library functions for converting directly from binary to hexadecimal.","solution":"def binary_to_hex(binary_str): if not isinstance(binary_str, str): raise ValueError(\\"Input should be a string.\\") # Check if the input contains only binary digits (0 and 1) if any(ch not in '01' for ch in binary_str): raise ValueError(\\"Input string should contain only binary digits.\\") # Pad the binary string with leading zeros to make its length a multiple of 4 while len(binary_str) % 4 != 0: binary_str = '0' + binary_str binary_to_hex_map = { \\"0000\\": \\"0\\", \\"0001\\": \\"1\\", \\"0010\\": \\"2\\", \\"0011\\": \\"3\\", \\"0100\\": \\"4\\", \\"0101\\": \\"5\\", \\"0110\\": \\"6\\", \\"0111\\": \\"7\\", \\"1000\\": \\"8\\", \\"1001\\": \\"9\\", \\"1010\\": \\"A\\", \\"1011\\": \\"B\\", \\"1100\\": \\"C\\", \\"1101\\": \\"D\\", \\"1110\\": \\"E\\", \\"1111\\": \\"F\\" } hex_str = \\"\\" for i in range(0, len(binary_str), 4): nibble = binary_str[i:i+4] hex_str += binary_to_hex_map[nibble] return hex_str"},{"question":"Generate a python program to generate a random number from 1 to 100.","solution":"import random def generate_random_number(): Generates a random number between 1 and 100 (inclusive). return random.randint(1, 100)"},{"question":"Create a Python program that scrapes data from a public website, processes the data, and generates an informative graph. I want the code to include an advanced data structure, such as a hash map or binary tree, to optimize data processing. Additionally, incorporate multi-threading or asynchronous programming to improve performance. To complete the task, you may need to use APIs or web scraping libraries, and you should also save the final graph in a file format that can be visualized later.","solution":"import requests from bs4 import BeautifulSoup import matplotlib.pyplot as plt from collections import defaultdict import threading def scrape_data(url): Scrapes data from the provided URL and parses it using BeautifulSoup. Args: - url (str): URL of the website to scrape. Returns: - data (list of tuples): A list of (category, value) tuples extracted from the web page. response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') data = [] # Assumes specific HTML structure (e.g., <div class='category'>Category</div> <div class='value'>Value</div>) categories = soup.find_all('div', class_='category') values = soup.find_all('div', class_='value') for cat, val in zip(categories, values): data.append((cat.text.strip(), int(val.text.strip()))) return data def process_data(data): Processes data using a hash map to count occurrences of each category. Args: - data (list of tuples): List of (category, value) tuples. Returns: - category_counts (dict): Dictionary with categories as keys and counts as values. category_counts = defaultdict(int) for category, value in data: category_counts[category] += value return dict(category_counts) def generate_graph(category_counts, filename): Generates a bar graph from the category counts and saves it as an image file. Args: - category_counts (dict): Dictionary with categories as keys and counts as values. - filename (str): The name of the file to save the graph. categories = list(category_counts.keys()) counts = list(category_counts.values()) plt.figure(figsize=(10, 5)) plt.bar(categories, counts, color='blue') plt.xlabel('Categories') plt.ylabel('Counts') plt.title('Category Counts') plt.xticks(rotation=45) plt.tight_layout() plt.savefig(filename) plt.close() def main(): url = 'https://example.com/data' # Replace with the actual URL for data scraping data = [] def scrape_thread(): nonlocal data data = scrape_data(url) # Creating a threading object for scraping function thread = threading.Thread(target=scrape_thread) thread.start() thread.join() category_counts = process_data(data) generate_graph(category_counts, 'category_counts.png') if __name__ == '__main__': main()"},{"question":"Given the array [1,2,3,4,5], use the built-in function of a selected programming language to obtain and return the last three elements of this array in reversed order. In addition, ensure that the selected function or method does not alter the original array.","solution":"def get_last_three_reversed(arr): Returns the last three elements of the array in reversed order without altering the original array. return arr[-3:][::-1]"},{"question":".Write a python function to display the current day and date using the datetime module.","solution":"from datetime import datetime def current_day_and_date(): Returns a string containing the current day and date in the format 'Day, YYYY-MM-DD'. now = datetime.now() return now.strftime(\\"%A, %Y-%m-%d\\")"},{"question":"Write a function that takes a list of unsorted numbers and sorts them in non-decreasing order. However, you are not allowed to use any built-in sorting functions or methods (e.g. sorted(), .sort()) in your solution.","solution":"def bubble_sort(arr): Sorts a list of numbers in non-decreasing order using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Given two strings, develop a function to calculate the Levenshtein distance between them.","solution":"def levenshtein_distance(s1, s2): Calculates the Levenshtein distance between two strings. if len(s1) < len(s2): return levenshtein_distance(s2, s1) if len(s2) == 0: return len(s1) previous_row = range(len(s2) + 1) for i, c1 in enumerate(s1): current_row = [i + 1] for j, c2 in enumerate(s2): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1]"},{"question":"Using Python 3, write a code snippet to calculate the mean of a list of numbers. Additionally, handle the case where the list may contain negative numbers. The list should also be sorted in ascending order before calculating the mean.","solution":"def calculate_mean(numbers): Calculates the mean of a list of numbers. Takes care of sorting the list. If the list is empty, returns None. if not numbers: return None sorted_numbers = sorted(numbers) mean = sum(sorted_numbers) / len(sorted_numbers) return mean"},{"question":"Write a Python program to perform an element-wise addition of two lists.","solution":"def element_wise_addition(list1, list2): Returns a new list that is the element-wise addition of list1 and list2. If the lists are of unequal length, raises a ValueError. if len(list1) != len(list2): raise ValueError(\\"Lists must be of the same length\\") return [a + b for a, b in zip(list1, list2)]"},{"question":"I want to create a program in Python that can check if a given list is sorted. How can I do this? Also, how can I modify the program to sort the list if it is not already sorted?","solution":"def is_sorted(lst): Checks if the given list is sorted in ascending order. Parameters: lst (list): The list to check. Returns: bool: True if the list is sorted, False otherwise. return all(lst[i] <= lst[i+1] for i in range(len(lst) - 1)) def sort_list_if_not_sorted(lst): Checks if the given list is sorted. If not, sorts the list in ascending order. Parameters: lst (list): The list to check and possibly sort. Returns: list: The original list if it was sorted, otherwise the sorted list. if is_sorted(lst): return lst return sorted(lst)"},{"question":"Write a code block that implements a Python function called \\"calculate_bmi\\" which takes in three parameters: weight (in kilograms), height (in meters), and age (in years). The function should first check if the weight is less than 0, the height is less than 0.1, or age is less than 0. If any of these conditions are true, the function should raise a ValueError with an appropriate error message.","solution":"def calculate_bmi(weight, height, age): Calculates and returns the Body Mass Index (BMI). Parameters: weight (float): Weight in kilograms height (float): Height in meters age (int): Age in years Returns: float: Calculated BMI Raises: ValueError: If weight is less than 0, height is less than 0.1, or age is less than 0. if weight < 0: raise ValueError(\\"Weight cannot be less than 0\\") if height < 0.1: raise ValueError(\\"Height cannot be less than 0.1 meters\\") if age < 0: raise ValueError(\\"Age cannot be less than 0\\") return weight / (height ** 2)"},{"question":"Create a program to find the intersection of two given lists. The intersection should only include elements that are divisible by 3 and appear at least twice in both lists. The resulting list should be sorted in ascending order.","solution":"def intersection_of_lists(list1, list2): Finds the intersection of two given lists where elements are divisible by 3 and appear at least twice in both lists. The result is sorted in ascending order. from collections import Counter # Count elements in each list count1 = Counter(list1) count2 = Counter(list2) # Find intersection elements appearing at least twice in both lists and divisible by 3 result = [element for element in count1 if element % 3 == 0 and count1[element] >= 2 and count2[element] >= 2] # Sort the results return sorted(result)"},{"question":"Given an array, write a program to sort the elements in ascending order without using any pre-defined function. After sorting, print out the elements in reverse order. The program should also handle cases and maintain functionality when the array contains negative values and decimal numbers.","solution":"def sort_and_reverse(arr): Sorts the given array in ascending order and then returns it in reverse order. # Implementing Bubble Sort for sorting in ascending order n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] # Return the sorted array in reverse order return arr[::-1]"},{"question":"I have a list of numbers in Python and I want to sort them in descending order. How can I modify a given code that sorts the list in ascending order to achieve this?","solution":"def sort_descending(numbers): Sorts a list of numbers in descending order. numbers.sort(reverse=True) return numbers"},{"question":"I need to generate a random 4x4 matrix with integer values between -20 and 20 (both inclusive). How can I do that using Python? Also, I would like a function to calculate the sum of all elements in this matrix.","solution":"import random def generate_random_matrix(): Generates a 4x4 matrix with integer values between -20 and 20 (inclusive). return [[random.randint(-20, 20) for _ in range(4)] for _ in range(4)] def sum_matrix_elements(matrix): Calculates the sum of all elements in the given matrix. return sum(sum(row) for row in matrix)"},{"question":"Write a python function that can convert a date string in the format YYYYMMDD to a python datetime object.","solution":"from datetime import datetime def convert_date_string_to_datetime(date_string): Converts a date string in the format YYYYMMDD to a Python datetime object. Parameters: date_string (str): Date in the format YYYYMMDD Returns: datetime: Python datetime object return datetime.strptime(date_string, '%Y%m%d')"},{"question":"Write a Python code to generate a dictionary named \`validation_dict\`, which checks if a specific key exists in a given dictionary and if its value matches a certain condition. Additionally, if the key exists, the value of this key must be a list with a length meeting another customized condition. The function should take three parameters: \`input_dict\`, \`target_key\`, and \`expected_condition\`. \`expected_condition\` should be a function that takes one argument (the value associated with \`target_key\`) and returns a boolean.","solution":"def validation_dict(input_dict, target_key, expected_condition): Validates if a specific key exists in the dictionary and if its value matches the expected condition. Additionally checks if the key's value is a list with appropriate length. Parameters: input_dict (dict): The dictionary to be validated. target_key (str): The key to look for in the dictionary. expected_condition (function): A function that takes one argument and returns a boolean. Returns: dict: A dictionary with the results of the validation. if target_key in input_dict: value = input_dict[target_key] if isinstance(value, list) and expected_condition(len(value)): return {target_key: value} else: return {'error': 'Expected condition not met or value is not a list'} else: return {'error': 'Key not found'}"},{"question":"Create a method to print all the prime numbers up to n, but the method should be written using a recursive approach instead of an iterative one.","solution":"def is_prime(num, divisor=None): Helper function to check if a number is prime. A number is prime if it has no divisors other than 1 and itself. if divisor is None: divisor = num - 1 if num <= 1: return False if divisor == 1: return True if num % divisor == 0: return False return is_prime(num, divisor - 1) def print_primes_recursive(n, current=2): Prints all prime numbers up to n using recursion. if current > n: return if is_prime(current): print(current) print_primes_recursive(n, current + 1)"},{"question":"Given a list of numbers and a target, write a Python function that finds two numbers in the list that add up to the target. However, you are not allowed to use the same number twice. Additionally, you must implement the function without using any built-in sorting functions or data structures.","solution":"def two_sum(numbers, target): Find two numbers in the list that add up to the target. The same number cannot be used twice. for i in range(len(numbers)): for j in range(i + 1, len(numbers)): if numbers[i] + numbers[j] == target: return numbers[i], numbers[j] return None"},{"question":"Develop a recursive approach to evaluate the presence of a given character within a string, avoiding the use of in-built functions. You must also implement your own string iteration system for the function.","solution":"def contains_char(s, c): Recursively checks if character c is present in string s. def helper(s, c, index): # Base case: if index is beyond the string, char not found if index == len(s): return False # Char found if s[index] == c: return True # Move to the next character return helper(s, c, index + 1) # Initialize recursion from index 0 return helper(s, c, 0)"},{"question":"Complete the following function to output a reversed string, but you are not allowed to use any built-in string reversal functions or create any new string variables. You can only modify the given string in-place and return it.","solution":"def reverse_string(s): Reverses the input string in-place and returns it. s_list = list(s) left, right = 0, len(s_list) - 1 while left < right: s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 return ''.join(s_list)"},{"question":"What is a palindrome and how can I identify if a string is a palindrome using Python?","solution":"def is_palindrome(s): Determines whether a given string is a palindrome. A palindrome is a string that reads the same forward and backward. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. s = s.lower().replace(\\" \\", \\"\\") # Convert to lowercase and remove spaces return s == s[::-1]"},{"question":"Create a Python function that takes a matrix of numbers as input and returns a new matrix where each element is the exponential of the corresponding element in the input matrix. The function should support broadcasting, similar to NumPy's broadcasting rules.","solution":"import numpy as np def matrix_exponential(matrix): Takes a matrix of numbers as input and returns a new matrix where each element is the exponential of the corresponding element in the input matrix. return np.exp(matrix)"},{"question":"Write a function that receives an array and removes every odd element from it. However, you are not allowed to use any built-in array methods or create a new array. You must modify the original array in place. The array can contain any positive or negative integer, including duplicates.","solution":"def remove_odd_elements(arr): Removes every odd element from the array in place. write_index = 0 for read_index in range(len(arr)): if arr[read_index] % 2 == 0: arr[write_index] = arr[read_index] write_index += 1 # Truncate the remaining elements del arr[write_index:]"},{"question":"Develop a function in Python that accepts a string as an argument and returns the length of the string.","solution":"def string_length(s): Returns the length of the input string s. return len(s)"},{"question":"How can I use Python to create a function that sorts a list of tuples in descending order based on the second element of each tuple?","solution":"def sort_tuples_desc(tuples_list): Sorts a list of tuples in descending order based on the second element of each tuple. :param tuples_list: List of tuples to be sorted :return: List of tuples sorted in descending order by the second element return sorted(tuples_list, key=lambda x: x[1], reverse=True)"},{"question":"Implement a function that returns the maximum sum of elements from a given array without using any in-built or third party sorting function. The array can have both positive and negative integers. The function should also identify the indexes of the elements contributing to this maximum sum.","solution":"def max_sum_subarray(arr): Returns the maximum sum of a contiguous subarray and the start and end indexes of that subarray. if not arr: return 0, -1, -1 max_sum = current_sum = arr[0] start = end = 0 temp_start = 0 for i in range(1, len(arr)): if current_sum + arr[i] < arr[i]: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, start, end"},{"question":"Create an algorithm to sort a list of numbers in ascending order, ensuring that the algorithm has a time complexity of O(n log n). Additionally, the algorithm should handle duplicate numbers within the list and ensure their relative order is preserved. The list to be sorted is lst = [2, 5, 1, 7, 4].","solution":"def merge_sort(lst): Sorts a list of numbers in ascending order using the merge sort algorithm. This algorithm has a time complexity of O(n log n). if len(lst) > 1: mid = len(lst) // 2 left_half = lst[:mid] right_half = lst[mid:] # Recursive call on each half merge_sort(left_half) merge_sort(right_half) i = j = k = 0 # Data merging while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: lst[k] = left_half[i] i += 1 else: lst[k] = right_half[j] j += 1 k += 1 # Checking if any element was left while i < len(left_half): lst[k] = left_half[i] i += 1 k += 1 while j < len(right_half): lst[k] = right_half[j] j += 1 k += 1 return lst # Example usage lst = [2, 5, 1, 7, 4] sorted_lst = merge_sort(lst) print(sorted_lst) # Output should be [1, 2, 4, 5, 7]"},{"question":"Determine the index of an element in a given array using binary search. Implement the binary search algorithm without using any pre-built functions and handle possible edge cases, such as an empty array or elements not found in the array.","solution":"def binary_search(arr, target): Returns the index of the target in the sorted array arr. If the target does not exist in the array, returns -1. Uses binary search algorithm. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"With reference to the given observation, develop a recursive function to navigate through every node of a binary tree with the structure like the one mentioned below, and print the node values in pre-order traversal. Additionally, implement a functionality to calculate and return the sum of all the node values in the right sub-tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def pre_order_traversal(node): if node is None: return print(node.value) pre_order_traversal(node.left) pre_order_traversal(node.right) def sum_of_right_subtree(node): if node is None: return 0 return node.value + sum_of_right_subtree(node.left) + sum_of_right_subtree(node.right) def get_sum_of_right_subtree(root): if root is None or root.right is None: return 0 return sum_of_right_subtree(root.right)"},{"question":"Create a program to find the maximum length common subsequence of two given strings.","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence of two strings. m = len(str1) n = len(str2) # Create a 2D array to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from bottom up for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Rewrite the following python code to an equivalent code using lambda and sorted function, also add error handling to handle cases where the input list might contain non-integer values.","solution":"def sort_list(input_list): Sorts the list in increasing order. # Ensure all elements are integers try: return sorted(input_list, key=lambda x: int(x) if isinstance(x, int) else _raise(ValueError(\\"List must contain only integers\\"))) except ValueError as e: return str(e) def _raise(exception): raise exception"},{"question":"Suggest a code to print the first three distinct positive positions in an array, where the array can contain duplicates, negative numbers, and zero as well. The code should also handle cases where the array does not have three distinct positive positions.","solution":"def first_three_distinct_positive_positions(numbers): Returns the first three distinct positive positions in the given array. If there are less than three distinct positive positions, returns as many as exist. Parameters: numbers (list): A list of integers. Returns: list: A list of the first three distinct positive positions. distinct_positive_positions = [] seen_positives = set() for i, number in enumerate(numbers): if number > 0 and number not in seen_positives: distinct_positive_positions.append(i) seen_positives.add(number) if len(distinct_positive_positions) == 3: break return distinct_positive_positions"},{"question":"Develop a Python program to display odd numbers from 11 to 100 that are prime numbers.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def odd_prime_numbers_between_11_and_100(): Returns a list of odd numbers that are prime in the range from 11 to 100. return [n for n in range(11, 101) if n % 2 != 0 and is_prime(n)]"},{"question":"Given two strings, create a function to find the total number of occurrences of the second string in the first string. This function should also account for overlapping occurrences. Additionally, implement this function using recursion rather than iterative methods or built-in functions.","solution":"def count_occurrences_recursive(text, pattern, index=0): Returns the total number of occurrences of pattern in text, including overlapping, using recursion. if not pattern or not text: return 0 if len(text[index:]) < len(pattern): return 0 found = 1 if text[index:index+len(pattern)] == pattern else 0 return found + count_occurrences_recursive(text, pattern, index + 1)"},{"question":"Write a python function to simulate a fast charge station that can charge a percentage of an electric car battery per minute. In addition to that, the function needs to calculate the vehicles' battery power that'll be taken as input. The function should ensure that total charge does not exceed the battery power. If multiple fast charge stations are used simultaneously, the function should also accurately track and return the remaining charge capacity of each station. Implement necessary error handling for potential exceptions such as invalid inputs, battery power exceeding the 100% limit, power input not numeric etc.","solution":"def charge_battery(battery_capacity, initial_charge, charge_rate, minutes, num_stations=1): Simulates a fast charge station that charges a percentage of an electric car battery per minute. Parameters: - battery_capacity (float): The total capacity of the battery in percentage (0 to 100). - initial_charge (float): The initial charge of the battery in percentage (0 to 100). - charge_rate (float): The percentage of battery charged per minute. - minutes (int): The number of minutes the battery is charged. - num_stations (int): The number of charging stations being used simultaneously. Returns: - float: The final battery charge after the charging duration. - float: The remaining capacity of each charge station. try: # Validating input if not all(isinstance(i, (int, float)) for i in [battery_capacity, initial_charge, charge_rate, minutes]): raise ValueError(\\"All inputs except num_stations should be numeric.\\") if not isinstance(num_stations, int) or num_stations < 1: raise ValueError(\\"num_stations should be a positive integer.\\") if battery_capacity < 0 or battery_capacity > 100: raise ValueError(\\"Battery capacity should be between 0 and 100.\\") if initial_charge < 0 or initial_charge > 100: raise ValueError(\\"Initial charge should be between 0 and 100.\\") # Calculate the total charge to add total_charge_to_add = charge_rate * minutes # Each station adds a portion of the total charge station_charge = total_charge_to_add / num_stations # Calculate final charge final_charge = initial_charge + total_charge_to_add if final_charge > battery_capacity: final_charge = battery_capacity remaining_station_capacity = max(0, battery_capacity - final_charge) / num_stations return final_charge, remaining_station_capacity except Exception as e: return str(e)"},{"question":"Design a Python function capable of identifying identical elements present within two separate, sequentially ordered arrays. Additionally, the function should return the matching elements in the form of a new sorted list. The task must be completed without using any built-in Python functions for intersecting or sorting operations.","solution":"def intersect_sorted_lists(list1, list2): Returns a sorted list of identical elements present in two sequentially ordered arrays. result = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: i += 1 elif list1[i] > list2[j]: j += 1 else: result.append(list1[i]) i += 1 j += 1 return result"},{"question":"Please write a 7-line algorithm in Python that takes as input an NxN matrix A and computes its transpose using an in-place operation, meaning that the transpose should be computed within the same memory location as the original matrix A. Moreover, the algorithm should maintain the same order of elements in each row, i.e., the 1st element in the 1st row should remain in the 1st row after the transpose operation. In addition, please include comments explaining each step of the algorithm to ensure that the user can understand the reasoning behind each operation.","solution":"def transpose_in_place(matrix): Transposes the given NxN matrix in place. n = len(matrix) # Get the size of the NxN matrix # Iterate through the upper triangle of the matrix for i in range(n): for j in range(i + 1, n): # Swap elements at positions (i, j) and (j, i) matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] return matrix"},{"question":"Write a python code to find median of two sorted lists using divide and conquer method.","solution":"def find_median_sorted_arrays(nums1, nums2): Finds the median of two sorted lists using the divide and conquer method. def find_kth_element(arr1, arr2, k): if not arr1: return arr2[k] if not arr2: return arr1[k] median1, median2 = len(arr1) // 2, len(arr2) // 2 median1_val, median2_val = arr1[median1], arr2[median2] if median1 + median2 < k: if median1_val > median2_val: return find_kth_element(arr1, arr2[median2 + 1:], k - median2 - 1) else: return find_kth_element(arr1[median1 + 1:], arr2, k - median1 - 1) else: if median1_val > median2_val: return find_kth_element(arr1[:median1], arr2, k) else: return find_kth_element(arr1, arr2[:median2], k) total_length = len(nums1) + len(nums2) if total_length % 2 == 1: return find_kth_element(nums1, nums2, total_length // 2) else: return (find_kth_element(nums1, nums2, total_length // 2 - 1) + find_kth_element(nums1, nums2, total_length // 2)) / 2.0"},{"question":"I need a python program that combines two lists into a dictionary. The keys should come from list1, and the values should come from list2. Additionally, the program should be able to handle cases where list1 and list2 have different lengths. If list1 is longer, the additional keys should map to a default value (which can be None or any other value). If list2 is longer, the extra elements should simply be ignored. The solution should be efficient even with large lists.","solution":"def combine_lists_to_dict(list1, list2, default_value=None): Combines two lists into a dictionary. Keys come from list1, values come from list2. If list1 is longer, additional keys map to default_value. If list2 is longer, extra elements are ignored. Parameters: - list1: List of keys - list2: List of values - default_value: Default value for keys without a corresponding value, defaults to None Returns: - A dictionary combining list1 and list2 return {list1[i]: list2[i] if i < len(list2) else default_value for i in range(len(list1))}"},{"question":"Draft a Python code snippet to return the last character of a given string. However, you should write the code in such a way that it can handle not only strings but also lists and tuples. Additionally, the code should return \\"None\\" if the input is an empty string, list, or tuple.","solution":"def get_last_element(collection): Returns the last element of a string, list, or tuple. Returns None if the input is an empty string, list, or tuple. if isinstance(collection, (str, list, tuple)) and len(collection) > 0: return collection[-1] return None"},{"question":"loc is a given array of strings, such as [\\"H\\", \\"E\\", \\"L\\", \\"L\\", \\"O\\"]. Write a function that reverses the strings inside loc without using the built-in reverse() method or any other direct string reversal functions. Also, consider space complexity in your approach.","solution":"def reverse_strings(loc): Reverses the order of characters in the input array of strings without using built-in reverse methods. Args: - loc (list of str): The input list of strings to be reversed. Each string is a single character. Returns: - list of str: A new list with the characters in reversed order. n = len(loc) for i in range(n // 2): # Swap the elements loc[i], loc[n - i - 1] = loc[n - i - 1], loc[i] return loc"},{"question":"Identify the type of variables used in the following Python code snippet and implement a function that will check if a given variable is of the same type.","solution":"def identify_variable_type(variable): Identify and return the type of the variable. return type(variable).__name__ def is_same_type(var1, var2): Check if var1 and var2 are of the same type. return type(var1) == type(var2)"},{"question":"Create a function in Python that takes four parameters: a start number, an end number, a specific multiple, and a transformation function. This function should return a list containing numbers between the start and end (both inclusive) that are multiples of the given number, but transformed by the provided transformation function. Additionally, include error handling for scenarios where the input parameters are invalid.","solution":"def transformed_multiples(start, end, multiple, transformation): Generates a list of numbers between start and end (both inclusive) that are multiples of the given number, transformed by the provided transformation function. Parameters: start (int): The start number of the range. end (int): The end number of the range. multiple (int): The number to check multiples of. transformation (function): A function to transform the multiple. Returns: list: A list containing the transformed multiples. if not isinstance(start, int) or not isinstance(end, int) or not isinstance(multiple, int): raise TypeError(\\"Start, end, and multiple must be integers.\\") if not callable(transformation): raise TypeError(\\"Transformation must be a function.\\") if multiple == 0: raise ValueError(\\"Multiple cannot be zero.\\") if start > end: raise ValueError(\\"Start number must be less than or equal to end number.\\") result = [] for num in range(start, end + 1): if num % multiple == 0: result.append(transformation(num)) return result"},{"question":"Create a function to check if an array has any mirrored pairs. A mirrored pair consists of two elements which are reverse of each other. For example, in the array [\\"cat\\", \\"dog\\", \\"god\\", \\"tac\\"], (\\"cat\\", \\"tac\\") and (\\"dog\\", \\"god\\") are mirrored pairs. Make sure to account for case sensitivity and special characters.","solution":"def has_mirrored_pairs(array): This function checks if an array has any mirrored pairs. A mirrored pair consists of two elements which are reverse of each other. For example, in the array [\\"cat\\", \\"dog\\", \\"god\\", \\"tac\\"], (\\"cat\\", \\"tac\\") and (\\"dog\\", \\"god\\") are mirrored pairs. Parameters: array (list of str): A list of strings to check for mirrored pairs. Returns: bool: True if there are any mirrored pairs, False otherwise. seen = set() for element in array: reverse_element = element[::-1] if reverse_element in seen: return True seen.add(element) return False"},{"question":"Write a python program that takes a list of words as an argument. From this list, identify and return a list of words that contain two consecutive vowels that are the same. The program should ignore case sensitivity.","solution":"def find_words_with_consecutive_vowels(words): Returns a list of words containing two consecutive vowels that are the same. Args: words (list): List of words. Returns: list: List of words with consecutive same vowels. vowels = set('aeiou') result = [] for word in words: lower_word = word.lower() for i in range(len(lower_word) - 1): if lower_word[i] in vowels and lower_word[i] == lower_word[i + 1]: result.append(word) break return result"},{"question":"I want to create a Flask application with two routes. The first route should display a greeting message, and the second route should accept an integer parameter and display a message based on the value of that parameter. How can I implement this in Python?","solution":"from flask import Flask, request app = Flask(__name__) @app.route('/') def greeting(): return \\"Hello, welcome to my Flask app!\\" @app.route('/number/<int:num>') def number_message(num): if num < 10: return \\"The number is less than 10.\\" elif num == 10: return \\"The number is exactly 10.\\" else: return \\"The number is greater than 10.\\" if __name__ == \\"__main__\\": app.run(debug=True)"},{"question":"You are tasked with creating a Python script to read a configuration file and extract specific values from it. The configuration file is in a simple key-value pair format, with each line containing a key and its corresponding value separated by an equal sign (=). Your script should be able to read this file and extract the value associated with a given key.","solution":"def read_config(file_path, key): Reads a configuration file and extracts the value associated with the given key. :param file_path: Path to the configuration file :param key: The key whose value needs to be extracted :return: The value associated with the key, or None if the key is not found try: with open(file_path, 'r') as file: for line in file: if '=' in line: config_key, config_value = line.strip().split('=', 1) if config_key == key: return config_value except FileNotFoundError: print(f\\"The file {file_path} was not found.\\") return None"},{"question":"Write a Python program that takes a list of integers and returns a new list containing only the prime numbers from the original list. The program should also display the number of prime numbers in the resulting list. Additionally, the program should validate that all input integers are positive before processing.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n < 2: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def filter_primes(numbers): Takes a list of integers and returns a new list containing only the prime numbers from the original list. Also returns the count of prime numbers in the resulting list. Validates that all input integers are positive before processing. if not all(isinstance(num, int) and num > 0 for num in numbers): raise ValueError(\\"All numbers must be positive integers\\") prime_numbers = [num for num in numbers if is_prime(num)] return prime_numbers, len(prime_numbers)"},{"question":"Write a function in Python which takes a list and a value as input, and removes all occurrences of this value from the list. Additionally, the function should return the modified list in reverse order. The function should handle cases where the input list is empty, and where the input value is not present in the list.","solution":"def remove_and_reverse(lst, value): Remove all occurrences of value from lst and return the modified list in reverse order. Parameters: lst (list): The list from which to remove the value. value: The value to be removed from the list. Returns: list: The modified list in reverse order. filtered_list = [item for item in lst if item != value] return filtered_list[::-1]"},{"question":"Reverse the order of the elements in a list using only recursion. Additionally, you are not allowed to use any built-in list manipulation functions or create any additional lists. However, you can use an additional variable to keep track of the index of the elements.","solution":"def reverse_list_recursive(lst, start=0, end=None): Reverses the order of elements in the given list using recursion. if end is None: end = len(lst) - 1 if start >= end: return lst # Swap the elements at the start and end indices lst[start], lst[end] = lst[end], lst[start] # Recur for the next positions reverse_list_recursive(lst, start + 1, end - 1) return lst"},{"question":"Develop a Python function to calculate the area of a triangle given its three sides. The function should also verify if the given sides form a valid triangle (the sum of the lengths of any two sides must be greater than the length of the third side). If the sides do not form a valid triangle, the function should raise ValueError. Moreover, the function should be able to handle floating point numbers and should round the final area to 2 decimal places.","solution":"import math def triangle_area(a, b, c): Returns the area of a triangle given its three sides using the Heron's formula. This function also checks if the provided sides form a valid triangle. It rounds the final area to 2 decimal places. Parameters: a (float): Length of the first side b (float): Length of the second side c (float): Length of the third side Returns: float: Area of the triangle rounded to 2 decimal places Raises: ValueError: If the sides provided do not form a valid triangle # Check if the given sides form a valid triangle if a + b <= c or a + c <= b or b + c <= a: raise ValueError(\\"The provided sides do not form a valid triangle\\") # Calculate the semi-perimeter s = (a + b + c) / 2 # Calculate the area using Heron's formula area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return round(area, 2)"},{"question":"Create a Python function that not only accepts a string argument, but also a list of string arguments. This function should return a concatenated string from the list elements excluding the initial string argument.","solution":"def concatenate_excluding_initial(initial_string, string_list): Concatenates all strings in string_list excluding the initial_string and returns the result. Parameters: initial_string (str): The string to exclude from concatenation. string_list (list of str): The list of strings to concatenate. Returns: str: The concatenated string excluding the initial_string. return ''.join([s for s in string_list if s != initial_string])"},{"question":"Create a function that takes two strings as input and returns a Boolean value indicating whether the two words are anagrams or not.","solution":"def are_anagrams(word1, word2): Returns True if word1 and word2 are anagrams, False otherwise. return sorted(word1) == sorted(word2)"},{"question":"Use python to make a calculator that can add, subtract, multiply, and divide two numbers. Additionally, implement functionality to calculate the factorial of a number and the power of a number.","solution":"def add(a, b): Returns the sum of a and b. return a + b def subtract(a, b): Returns the difference when b is subtracted from a. return a - b def multiply(a, b): Returns the product of a and b. return a * b def divide(a, b): Returns the quotient when a is divided by b. Throws an exception if b is zero. if b == 0: raise ValueError(\\"Cannot divide by zero\\") return a / b def factorial(n): Returns the factorial of n. Throws an exception if n is negative. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result def power(base, exp): Returns the result of raising base to the power of exp. return base ** exp"},{"question":"Given a list of strings and a search string, write a program to find the first index of the search string in the list. If the search string is not present in the list, return -1. The list may contain duplicate strings.","solution":"def find_first_index(lst, search_string): Returns the first index of the search string in the list. If the search string is not present in the list, returns -1. try: return lst.index(search_string) except ValueError: return -1"},{"question":"Given a list of integers, write a Python program to find the index of the first occurrence of a target integer. If the target integer is not found in the list, return -1.","solution":"def find_first_occurrence(lst, target): Returns the index of the first occurrence of the target integer in the list. Parameters: lst (list): A list of integers. target (int): The target integer to find in the list. Returns: int: The index of the first occurrence of the target integer, or -1 if not found. try: return lst.index(target) except ValueError: return -1"},{"question":"Create a Python program that takes two lists as input and outputs a new list containing the common elements between the two input lists. The program should also count the number of common elements and output this count along with the list. Additionally, ensure the program can handle lists of different lengths and types of elements, such as integers and strings.","solution":"def find_common_elements(list1, list2): Takes two lists as input and returns a tuple containing: - a list of the common elements between the two lists - the count of the common elements common_elements = list(set(list1) & set(list2)) count_common_elements = len(common_elements) return common_elements, count_common_elements"},{"question":"Implement a Matplotlib program that generates a 3D surface plot using input data from a CSV file. The X, Y, and Z values in the CSV file should represent a mathematical function such as a Gaussian distribution. Enhance the plot by adding contour lines, a color map, and a color bar. Also, allow the user to specify the CSV file path as a command-line argument.","solution":"import matplotlib.pyplot as plt import numpy as np import pandas as pd import sys from mpl_toolkits.mplot3d import Axes3D def generate_3d_surface_plot(csv_file_path): # Read CSV file data = pd.read_csv(csv_file_path) # Extract X, Y, Z values X = data['X'].values Y = data['Y'].values Z = data['Z'].values # Convert to grid format suitable for plotting X_unique = np.unique(X) Y_unique = np.unique(Y) X_grid, Y_grid = np.meshgrid(X_unique, Y_unique) Z_grid = Z.reshape(len(Y_unique), len(X_unique)) # Create a 3D plot fig = plt.figure() ax = fig.add_subplot(111, projection='3d') # Plot the surface surf = ax.plot_surface(X_grid, Y_grid, Z_grid, cmap='viridis') # Add contour lines ax.contour(X_grid, Y_grid, Z_grid, zdir='z', offset=Z_grid.min(), cmap='viridis') # Add color bar fig.colorbar(surf, shrink=0.5, aspect=5) # Show plot plt.show() if __name__ == \\"__main__\\": if len(sys.argv) != 2: print(\\"Usage: python script.py <path_to_csv_file>\\") else: csv_file_path = sys.argv[1] generate_3d_surface_plot(csv_file_path)"},{"question":"Create a Python Flask web application that displays \\"Greetings, Universe!\\" on the home page at the route '/'. Additionally, include a route that accepts a username as a parameter and displays a personalized greeting. Implement comprehensive error handling, ensure the application is secure against common web vulnerabilities, and deploy it on a cloud server using Docker containers. The application should also support session management, with a login page that redirects users to the personalized greeting page upon successful authentication.","solution":"from flask import Flask, request, session, redirect, url_for, render_template_string app = Flask(__name__) app.secret_key = 'your_secret_key_here' # Secret key for session management # Home page route @app.route('/') def home(): return 'Greetings, Universe!' # Login page route @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': username = request.form['username'] password = request.form['password'] # Simple authentication logic for demonstration if username == 'user' and password == 'pass': # Replace with a real authentication mechanism session['username'] = username return redirect(url_for('greet_user', username=username)) else: return 'Invalid credentials, please try again.' return ''' <form method=\\"post\\"> Username: <input type=\\"text\\" name=\\"username\\"><br> Password: <input type=\\"password\\" name=\\"password\\"><br> <input type=\\"submit\\" value=\\"Login\\"> </form> ''' # Personalized greeting route @app.route('/greet/<username>') def greet_user(username): if 'username' in session and session['username'] == username: return f'Hello, {username}!' else: return redirect(url_for('login')) if __name__ == '__main__': app.run(debug=True)"},{"question":"Write a Python function \`binarySearch\` that takes in a list of sorted integers and an integer target. The function should use a binary search algorithm to find the index of \`target\` in the list. The list will not contain duplicates and will always be sorted in ascending order. If the target is not found in the list, the function should return -1.","solution":"def binarySearch(nums, target): Performs binary search on a sorted list of integers to find the target. Parameters: nums (list): A sorted list of integers. target (int): The integer to search for in the list. Returns: int: The index of the target if found, otherwise -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"You are given two strings, \`need\` and \`got\`. Your task is to implement a function \`countMatches\` that counts the number of characters in the \`got\` string that are also present in the \`need\` string. Each character in the \`need\` string can be used multiple times for matching.","solution":"def countMatches(need, got): Counts the number of characters in the 'got' string that are also present in the 'need' string. :param need: String containing characters to be matched. :param got: String in which characters need to be counted. :return: Integer count of matching characters. need_set = set(need) return sum(1 for char in got if char in need_set)"},{"question":"Write a program to calculate the Hamming distance between two DNA sequences, taking into account possible insertions, deletions, and mismatches. The Hamming distance should only be calculated for sequences of the same length. If the sequences are of different lengths, the program should return an error message.","solution":"def hamming_distance(seq1, seq2): Calculate the Hamming distance between two DNA sequences of equal length. The Hamming distance is calculated only for sequences of the same length. If the sequences are of different lengths, an error message is returned. Parameters: seq1 (str): The first DNA sequence. seq2 (str): The second DNA sequence. Returns: int: The Hamming distance between the sequences if they are of the same length. str: An error message if the sequences are of different lengths. if len(seq1) != len(seq2): return \\"Error: Sequences are of different lengths.\\" distance = 0 for a, b in zip(seq1, seq2): if a != b: distance += 1 return distance"},{"question":"Write a Python program to find the sum of all integers from 1 to a given number using a while loop.","solution":"def sum_of_integers(n): Returns the sum of all integers from 1 to n using a while loop. total = 0 current = 1 while current <= n: total += current current += 1 return total"},{"question":"Write a Python program that removes an item at a specific position in a list and returns a new list without modifying the original list. Also, take into consideration the situation where the index might be out of range. For this task, you are not allowed to use the built-in 'remove' function or list comprehension.","solution":"def remove_item_at_index(lst, index): Returns a new list with the item at the specified index removed. If the index is out of range, the original list is returned. Parameters: lst (list): The original list. index (int): The index of the item to remove. Returns: list: A new list with the item removed if index is valid, otherwise the original list. if index < 0 or index >= len(lst): # Index is out of range, return the original list return lst[:] # Create a new list without the item at the specified index new_list = [] for i in range(len(lst)): if i != index: new_list.append(lst[i]) return new_list"},{"question":"Write a Python program to find the unique elements in a list that appear exactly once. The solution should ignore case sensitivity.","solution":"def find_unique_elements(lst): Returns a list of unique elements that appear exactly once in the given list, ignoring case sensitivity. from collections import Counter # Prepare the list in a case-insensitive manner normalized_list = [item.lower() if isinstance(item, str) else item for item in lst] # Get the count of each element count = Counter(normalized_list) # Extract elements that appear exactly once unique_elements = [item for item, cnt in count.items() if cnt == 1] return unique_elements"},{"question":"Develop a program that identifies the operating system, the version and the architecture (32 or 64 bits) of the system it's being run on. Moreover, your program should also detect if it's running on a physical machine or virtual machine. Lastly, implement a feature to detect the current user and his/her privilege level (administrator or standard user).","solution":"import platform import os import ctypes import sys import getpass def get_system_info(): system_info = { \\"os\\": platform.system(), \\"version\\": platform.version(), \\"architecture\\": platform.architecture()[0], \\"machine\\": platform.machine(), \\"node\\": platform.node() } if hasattr(sys, 'real_prefix'): system_info[\\"physical_or_virtual\\"] = \\"virtual\\" else: system_info[\\"physical_or_virtual\\"] = \\"physical\\" user_info = { \\"current_user\\": getpass.getuser(), \\"is_admin\\": is_admin() } system_info.update(user_info) return system_info def is_admin(): try: return ctypes.windll.shell32.IsUserAnAdmin() == 1 except: return os.getuid() == 0 # Example run to showcase the output if __name__ == \\"__main__\\": print(get_system_info())"},{"question":"Given an array of non-negative integers, return an array consisting of all the even elements of 'nums', followed by all the odd elements of 'nums'. Additionally, sort the even elements in ascending order and the odd elements in descending order. However, do not use any additional data structures or sorting functions. You must implement your own sorting algorithm. The relative order of the elements should be maintained.","solution":"def custom_sort(nums): Returns an array with even numbers sorted in ascending order followed by odd numbers sorted in descending order. def insertion_sort(arr, reverse=False): for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and ((arr[j] > key and not reverse) or (arr[j] < key and reverse)): arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] sorted_evens = insertion_sort(evens) sorted_odds = insertion_sort(odds, reverse=True) return sorted_evens + sorted_odds"},{"question":"Write the shortest Python function that returns the maximum value in a list.","solution":"def find_max(lst): Returns the maximum value in a list. return max(lst)"},{"question":"Write a code to get the number of unique elements in a given list, while ensuring that the solution has a time complexity of O(n) and does not use any additional data structures.","solution":"def count_unique_elements(lst): Returns the number of unique elements in the given list. Ensures O(n) time complexity and does not use any additional data structures. element_set = set() for elem in lst: if elem not in element_set: element_set.add(elem) return len(element_set)"},{"question":"Construct a Python function to simulate the traditional two-player game of Noughts and Crosses, also known as Tic-Tac-Toe. The implemented function should also feature an AI opponent with different levels of difficulty: beginner(user wins most of the time), intermediate(equal chance of user or AI winning), and advanced(AI wins most of the time). Besides, include a feature to let the user choose whether they want to play as 'X' or 'O', and which level of AI they want to compete against. Below is a Python solution using the Minimax algorithm, a popular algorithm for implementing game AI. The game 'Tic-Tac-Toe' is simple enough to be represented using a 3x3 2D list.","solution":"import random def create_board(): return [['' for _ in range(3)] for _ in range(3)] def print_board(board): for row in board: print('|'.join(cell or ' ' for cell in row)) def check_winner(board, player): # Check rows, columns, and diagonals win_conditions = ( [board[0][0], board[0][1], board[0][2]], [board[1][0], board[1][1], board[1][2]], [board[2][0], board[2][1], board[2][2]], [board[0][0], board[1][0], board[2][0]], [board[0][1], board[1][1], board[2][1]], [board[0][2], board[1][2], board[2][2]], [board[0][0], board[1][1], board[2][2]], [board[2][0], board[1][1], board[0][2]] ) return [player, player, player] in win_conditions def is_full(board): return all(all(cell for cell in row) for row in board) def get_valid_moves(board): return [(i, j) for i in range(3) for j in range(3) if not board[i][j]] def minimax(board, depth, is_maximizing, player, opponent): if check_winner(board, player): return 1 elif check_winner(board, opponent): return -1 elif is_full(board): return 0 if is_maximizing: best_score = -float('inf') for (i, j) in get_valid_moves(board): board[i][j] = player score = minimax(board, depth + 1, False, player, opponent) board[i][j] = '' best_score = max(best_score, score) return best_score else: best_score = float('inf') for (i, j) in get_valid_moves(board): board[i][j] = opponent score = minimax(board, depth + 1, True, player, opponent) board[i][j] = '' best_score = min(best_score, score) return best_score def ai_move(board, player, opponent, difficulty): if difficulty == 'beginner': return random.choice(get_valid_moves(board)) elif difficulty == 'intermediate': if random.random() < 0.5: return random.choice(get_valid_moves(board)) else: return advanced_move(board, player, opponent) elif difficulty == 'advanced': return advanced_move(board, player, opponent) def advanced_move(board, player, opponent): best_score = -float('inf') best_move = None for (i, j) in get_valid_moves(board): board[i][j] = player score = minimax(board, 0, False, player, opponent) board[i][j] = '' if score > best_score: best_score = score best_move = (i, j) return best_move def play_game(user_symbol, ai_symbol, ai_difficulty): board = create_board() current_player = 'X' while True: print_board(board) if current_player == user_symbol: move = input(f\\"Enter your move (row col): \\") i, j = map(int, move.split()) else: i, j = ai_move(board, ai_symbol, user_symbol, ai_difficulty) print(f\\"AI Move: {i} {j}\\") if board[i][j]: print(\\"Invalid move! Try again.\\") continue board[i][j] = current_player if check_winner(board, current_player): print_board(board) print(f\\"{current_player} wins!\\") break if is_full(board): print_board(board) print(\\"It's a draw!\\") break current_player = ai_symbol if current_player == user_symbol else user_symbol return board"},{"question":"Given two sentences, write a program to determine if the first sentence is a substring of the second sentence without using built-in string functions.","solution":"def is_substring(sentence1, sentence2): Check if sentence1 is a substring of sentence2 without using built-in string functions. len1 = len(sentence1) len2 = len(sentence2) if len1 == 0: return True if len2 == 0: return False for i in range(len2 - len1 + 1): j = 0 while j < len1 and sentence2[i + j] == sentence1[j]: j += 1 if j == len1: return True return False"},{"question":"Create a method that accepts an integer parameter n and provides a four-dimensional array of size nxnxnxn made up of prime numbers starting from 2 up to the nth power of 4 in a sequence that is not only uniform but also ensures that each dimensionstitially, the numbers are in ascending order. The Algorithm should sieve out only primes within the implementation, showcasing an intricate handling of prime derivation without using any package explicitly for prime number generation.","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def generate_primes(limit): Returns a list of prime numbers up to the given limit. primes = [] num = 2 while len(primes) < limit: if is_prime(num): primes.append(num) num += 1 return primes def create_prime_4d_array(n): Returns a 4-dimensional array of size nxnxnxn filled with prime numbers. size = n ** 4 primes = generate_primes(size) array_4d = [] index = 0 for i in range(n): array_3d = [] for j in range(n): array_2d = [] for k in range(n): array_1d = [] for l in range(n): array_1d.append(primes[index]) index += 1 array_2d.append(array_1d) array_3d.append(array_2d) array_4d.append(array_3d) return array_4d"},{"question":"Develop a Python algorithm to detect the number of times a substring appears in a larger string, without utilizing any built-in string methods. Additionally, include functionality to find overlapping instances of the substring in the main string.","solution":"def count_substring(main_str, sub_str): Returns the number of times sub_str appears in main_str, including overlapping instances. count = 0 main_len = len(main_str) sub_len = len(sub_str) for i in range(main_len - sub_len + 1): match = True for j in range(sub_len): if main_str[i + j] != sub_str[j]: match = False break if match: count += 1 return count"},{"question":"Design a decentralized blockchain network architecture using your programming knowledge. Illustrate the functioning of essential components and write code for at least two core operations: adding a block to the chain and validating the chain's integrity. Explain how these operations ensure data security and immutability.","solution":"import hashlib import time class Block: def __init__(self, index, previous_hash, timestamp, data): self.index = index self.previous_hash = previous_hash self.timestamp = timestamp self.data = data self.hash = self.calculate_hash() def calculate_hash(self): Creates a SHA-256 hash of the block's contents. block_string = f\\"{self.index}{self.previous_hash}{self.timestamp}{self.data}\\" return hashlib.sha256(block_string.encode()).hexdigest() class Blockchain: def __init__(self): self.chain = [self.create_genesis_block()] def create_genesis_block(self): Generates the initial block in the blockchain. return Block(0, \\"0\\", time.time(), \\"Genesis Block\\") def get_latest_block(self): Retrieves the most recently added block in the chain. return self.chain[-1] def add_block(self, new_data): Adds a new block to the blockchain with the provided data. last_block = self.get_latest_block() new_block = Block( last_block.index + 1, last_block.hash, time.time(), new_data ) self.chain.append(new_block) def is_chain_valid(self): Validates the blockchain integrity. for i in range(1, len(self.chain)): current_block = self.chain[i] previous_block = self.chain[i - 1] # Validate hash if current_block.hash != current_block.calculate_hash(): return False # Validate previous hash link if current_block.previous_hash != previous_block.hash: return False return True"},{"question":"Write a python program that implements the bisection method to find the root of an equation f(x). The program should take as input the function f(x), the interval [a,b] in which the root lies, and the tolerance level epsilon.","solution":"def bisection_method(f, a, b, epsilon): Applies the bisection method to find the root of the function f(x) within the interval [a, b] and up to the specified tolerance epsilon. Parameters: f (function): The function for which the root is calculated. a (float): The starting point of the interval. b (float): The ending point of the interval. epsilon (float): The tolerance level. Returns: float: The estimated root of the function. if f(a) * f(b) >= 0: raise ValueError(\\"The function must have different signs at endpoints a and b\\") while (b - a) / 2.0 > epsilon: midpoint = (a + b) / 2.0 if f(midpoint) == 0: return midpoint elif f(a) * f(midpoint) < 0: b = midpoint else: a = midpoint return (a + b) / 2.0"},{"question":"What is the equivalent of the shell command \`ls -al\` in Python?","solution":"import os def list_directory_contents(path='.'): Emulates the shell command \`ls -al\` by listing the contents of the directory at the specified path with detailed information. :param path: The directory path to list contents. Defaults to the current directory. :return: A list of tuples where each tuple contains detailed information about a file. contents = [] with os.scandir(path) as it: for entry in it: info = entry.stat() contents.append( { 'name': entry.name, 'is_dir': entry.is_dir(), 'size': info.st_size, 'permissions': info.st_mode, 'owner': info.st_uid, 'group': info.st_gid, 'last_modified': info.st_mtime } ) return contents"},{"question":"Design a Python function that not only identifies the first occurrence and last occurrence of a given string within a list of strings, but also counts and lists the distinct words within the given string. Additionally, the function should be able to manage errors or anomalies within its input. For guidance, consider the following flawed code snippet that attempts to solve a simpler version of this problem.","solution":"def analyze_string_occurrences(strings, target): Identifies the first and last occurrence of the target string within the list of strings. Also counts and lists the distinct words within the target string. Args: strings (list): List of strings to search within. target (str): Target string to search for. Returns: dict: A dictionary with keys 'first_occurrence', 'last_occurrence', and 'distinct_words'. 'first_occurrence' and 'last_occurrence' are indices, 'distinct_words' is a set of distinct words. if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings): raise ValueError(\\"The first argument must be a list of strings.\\") if not isinstance(target, str): raise ValueError(\\"The target must be a string.\\") first_occurrence = -1 last_occurrence = -1 for i, s in enumerate(strings): if s == target: if first_occurrence == -1: first_occurrence = i last_occurrence = i distinct_words = set(target.split()) return { 'first_occurrence': first_occurrence, 'last_occurrence': last_occurrence, 'distinct_words': distinct_words }"},{"question":"Given two arrays of integers, write a function in Python that interchanges their elements while keeping the same index for each number. Make sure your implementation doesn't use built-in functions such as zip or list comprehension for swapping the values, and also account for the case where the two input arrays may not be of the same length.","solution":"def interchange_elements(arr1, arr2): Interchanges elements of two arrays while keeping the same index for each number. Both arrays should be of the same size for the interchange to work correctly. If the arrays are of different lengths, the function will only process up to the length of the shorter array. Parameters: arr1 (list): first list of integers arr2 (list): second list of integers Returns: tuple: the modified lists with interchanged elements # Find the length of the shorter array min_length = min(len(arr1), len(arr2)) # Interchange elements using a simple loop for i in range(min_length): # Swap elements at index i temp = arr1[i] arr1[i] = arr2[i] arr2[i] = temp return arr1, arr2"},{"question":"Could you write the code for a Python program that generates the first N Fibonacci numbers, given an integer N as input?","solution":"def generate_fibonacci(n): Generates the first N Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: List[int]: A list containing the first N Fibonacci numbers. if n <= 0: return [] fib_sequence = [0] if n > 1: fib_sequence.append(1) for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Help me to find the largest 2 numbers in a list of numbers using Python.","solution":"def find_largest_two(numbers): Returns a tuple of the two largest numbers in the given list. :param numbers: List of integers :return: Tuple containing the two largest integers from the list if len(numbers) < 2: raise ValueError(\\"The list must contain at least two numbers.\\") first_max = float('-inf') second_max = float('-inf') for number in numbers: if number > first_max: second_max = first_max first_max = number elif number > second_max: second_max = number return (first_max, second_max)"},{"question":"Create a Python function that takes in a string as an argument and returns a boolean value indicating whether or not the string is a pangram. A pangram is a sentence that contains every letter of the alphabet at least once. Your function should ignore any non-alphabetical characters and any letters should be treated as case-insensitive. Additionally, your code should avoid using any built-in functions or libraries that directly check for pangrams.","solution":"def is_pangram(s): Returns whether the input string is a pangram. alphabet_set = set('abcdefghijklmnopqrstuvwxyz') clean_string = ''.join([char.lower() for char in s if char.isalpha()]) seen_letters = set(clean_string) return alphabet_set <= seen_letters"},{"question":"Create a Python script equivalent to the following Bash script. To intensify the challenge, include functionality in your script that checks if the file 'hello.txt' exists in the current working directory before running the file command. If it doesn't exist, create the file with some content. If it exists, append the content without deleting the previous data. Also, include Error Handling to manage possible issues during file operations.","solution":"import os def check_and_modify_file(): try: filename = 'hello.txt' if os.path.exists(filename): with open(filename, 'a') as file: file.write('nHello, this is appended content.') else: with open(filename, 'w') as file: file.write('Hello, this is the initial content.') except IOError as e: print(f\\"An error occurred: {e}\\") if __name__ == \\"__main__\\": check_and_modify_file()"},{"question":"Write a Python function named \\"find_max_length_consecutive\\" that takes a list of strings as input and returns the length of the longest consecutive sequence of strings with equal length. If there are multiple sequences with the same maximum length, return the length of the first one encountered.","solution":"def find_max_length_consecutive(strings): if not strings: return 0 max_length = 0 current_length = 1 current_streak_length = len(strings[0]) for i in range(1, len(strings)): if len(strings[i]) == current_streak_length: current_length += 1 else: max_length = max(max_length, current_length) current_streak_length = len(strings[i]) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Modify the following code to display alter the existing function to accept an additional parameter d and then multiply the sum of a and b by the additional parameter raised to the power of d.","solution":"def add_and_multiply(a, b, d): Returns the sum of a and b, and then multiplies the result by 2 raised to the power of d. return (a + b) * (2 ** d)"},{"question":"Create a Python program that takes a list of strings as input and converts all strings to lowercase.","solution":"def to_lowercase(strings): Converts all strings in the list to lowercase. :param strings: List of strings :return: List of strings with all characters converted to lowercase return [s.lower() for s in strings]"},{"question":"Write a python function called 'multiply_numbers' that takes in a list of numbers as input and returns their product. If the input list is empty, the function should raise a custom exception called 'EmptyListError'.","solution":"class EmptyListError(Exception): pass def multiply_numbers(numbers): Multiply all the numbers in the input list. :param numbers: List of numbers :return: Product of all numbers :raises: EmptyListError if the input list is empty if not numbers: raise EmptyListError(\\"The input list is empty.\\") product = 1 for number in numbers: product *= number return product"},{"question":"You are a magnificent AI professor and I am your student. I am trying to learn advanced topics in NLP. Could you teach me how to fine-tune BERT for text classification using PyTorch and Transformers?","solution":"import torch from torch.utils.data import DataLoader, Dataset from transformers import BertTokenizer, BertForSequenceClassification, AdamW class TextClassificationDataset(Dataset): def __init__(self, texts, labels, tokenizer, max_len): self.texts = texts self.labels = labels self.tokenizer = tokenizer self.max_len = max_len def __len__(self): return len(self.texts) def __getitem__(self, idx): text = str(self.texts[idx]) label = self.labels[idx] encoding = self.tokenizer.encode_plus( text, add_special_tokens=True, max_length=self.max_len, return_token_type_ids=False, padding='max_length', truncation=True, return_attention_mask=True, return_tensors='pt', ) return { 'text': text, 'input_ids': encoding['input_ids'].flatten(), 'attention_mask': encoding['attention_mask'].flatten(), 'labels': torch.tensor(label, dtype=torch.long) } def train_epoch(model, data_loader, optimizer, device, scheduler): model = model.train() total_loss = 0 correct_predictions = 0 for batch in data_loader: optimizer.zero_grad() input_ids = batch['input_ids'].to(device) attention_mask = batch['attention_mask'].to(device) labels = batch['labels'].to(device) outputs = model( input_ids=input_ids, attention_mask=attention_mask, labels=labels ) loss = outputs.loss total_loss += loss.item() correct_predictions += torch.sum(outputs.logits.argmax(dim=1) == labels) loss.backward() optimizer.step() scheduler.step() return correct_predictions.double() / len(data_loader.dataset), total_loss / len(data_loader) def eval_model(model, data_loader, device): model = model.eval() correct_predictions = 0 total_loss = 0 with torch.no_grad(): for batch in data_loader: input_ids = batch['input_ids'].to(device) attention_mask = batch['attention_mask'].to(device) labels = batch['labels'].to(device) outputs = model( input_ids=input_ids, attention_mask=attention_mask, labels=labels ) loss = outputs.loss total_loss += loss.item() correct_predictions += torch.sum(outputs.logits.argmax(dim=1) == labels) return correct_predictions.double() / len(data_loader.dataset), total_loss / len(data_loader) def train_model(texts, labels, model_name='bert-base-uncased', batch_size=16, epochs=4, learning_rate=2e-5): device = torch.device(\\"cuda\\" if torch.cuda.is_available() else \\"cpu\\") tokenizer = BertTokenizer.from_pretrained(model_name) model = BertForSequenceClassification.from_pretrained(model_name, num_labels=len(set(labels))) model = model.to(device) dataset = TextClassificationDataset(texts, labels, tokenizer, max_len=128) data_loader = DataLoader(dataset, batch_size=batch_size, shuffle=True) optimizer = AdamW(model.parameters(), lr=learning_rate) total_steps = len(data_loader) * epochs scheduler = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr=learning_rate, total_steps=total_steps) for epoch in range(epochs): train_acc, train_loss = train_epoch(model, data_loader, optimizer, device, scheduler) print(f'Epoch {epoch+1}/{epochs}') print(f'Train loss {train_loss} accuracy {train_acc}') return model, tokenizer"},{"question":"Write a recursive function in Python to calculate the nth term of the Fibonacci series, but this time, you also need to implement memoization to optimize the solution for larger inputs. Additionally, include error handling for invalid inputs such as negative numbers and non-integer types.","solution":"def fibonacci(n, memo=None): Returns the nth term of the Fibonacci series using memoization. if memo is None: memo = {} # Error handling if not isinstance(n, int): raise TypeError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") # Base cases if n == 0: return 0 if n == 1: return 1 # Check in memo if n in memo: return memo[n] # Recursive computation with memoization memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Problem: Recall the Collatz conjecture. Write a Python program that simulates the steps for a given positive integer. The program should also not exceed the bounded number of iterations, say 50, before printing a message indicating the process might have entered an infinite loop.","solution":"def collatz_conjecture(n, max_iterations=50): Simulates the Collatz conjecture steps for a given positive integer \`n\`. Parameters: n (int): The starting integer for the Collatz sequence. max_iterations (int): The maximum number of iterations to perform (default is 50). Returns: list: A list of the steps in the Collatz sequence until 1 is reached or the maximum iterations is exceeded. if n <= 0: raise ValueError(\\"The input must be a positive integer.\\") steps = [] iterations = 0 while n != 1 and iterations < max_iterations: steps.append(n) if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 iterations += 1 if n == 1: steps.append(1) else: steps.append(f\\"Process might have entered an infinite loop after {iterations} iterations.\\") return steps"},{"question":"Develop a code segment to calculate the frequency of each distinct character in a given string. The code must consider case sensitivity and punctuation. Also, it should exclude white spaces.","solution":"def character_frequency(s): Returns a dictionary with the frequency of each distinct character in the given string, excluding white spaces. The function is case-sensitive and considers punctuation. frequency = {} for char in s: if char != ' ': if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Write a Python program to filter out key-value pairs from a dictionary where the key is a palindrome.","solution":"def filter_palindrome_keys(d): Filters out key-value pairs from a dictionary where the key is a palindrome. :param d: Dictionary to filter. :return: Dictionary with non-palindrome keys. def is_palindrome(s): return s == s[::-1] return {k: v for k, v in d.items() if not is_palindrome(k)}"},{"question":"Create a function to generate a random password 8-10 characters long, consisting of a combination of uppercase and lowercase letters, numbers, and special characters. Additionally, ensure that the generated password contains at least one uppercase letter, one lowercase letter, one number, and one special character.","solution":"import random import string def generate_password(): Generates a random password 8-10 characters long, consisting of a combination of uppercase and lowercase letters, numbers, and special characters. Ensures that the password contains at least one uppercase letter, one lowercase letter, one number, and one special character. length = random.randint(8, 10) all_characters = string.ascii_letters + string.digits + string.punctuation while True: password = \\"\\".join(random.choice(all_characters) for _ in range(length)) if (any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password) and any(c in string.punctuation for c in password)): return password"},{"question":"How can I create a Python function that takes an input sentence containing \\"company\\", \\"new\\", \\"plan\\", \\"publicize\\", and \\"the\\" in any order and rearranges them to form a coherent sentence with the structure \\"the company's plan to publicize the new\\"? The function should handle various tenses and plural forms of the words. For example, \\"The new plan of the company to publicize\\" should be rearranged to \\"The company's new plan to publicize\\". Can you provide a code snippet to achieve this?","solution":"import re def rearrange_sentence(sentence): # Define the components we are looking for keywords = [\\"company's\\", \\"company\\", \\"new\\", \\"plan\\", \\"publicize\\", \\"publicized\\", \\"publicizing\\", \\"publicizes\\", \\"the\\"] # Find all matches for each keyword matches = {word: re.search(r'b' + re.escape(word) + r'b', sentence, re.IGNORECASE) for word in keywords} # Check if all necessary components are present if all(matches.get(keyword) for keyword in [\\"company\\", \\"new\\", \\"plan\\", \\"publicize\\", \\"the\\"]): # Create the rearranged sentence return \\"the company's new plan to publicize\\" else: return \\"Unable to rearrange the sentence due to missing components\\""},{"question":"Write a script in Python to remove the characters from the given string which are not in the alphabet, are not a space, and are not one of the following special characters: '-', '_', or '@'.","solution":"def sanitize_string(s): Removes characters from the string that are not alphabet characters, spaces, or one of the following special characters: '-', '_', '@'. allowed_chars = set(\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ -_@\\") return ''.join(filter(lambda c: c in allowed_chars, s))"},{"question":"Given two strings, write a program to find the number of common characters. However, you are not allowed to use any built-in string methods or data structures such as lists or dictionaries. You can only use basic string manipulation operations such as indexing and concatenation.","solution":"def common_characters_count(str1, str2): Returns the number of common characters between two strings. count = 0 checked_chars = \\"\\" for char1 in str1: if char1 not in checked_chars: count1 = 0 count2 = 0 for c in str1: if c == char1: count1 += 1 for c in str2: if c == char1: count2 += 1 count += min(count1, count2) checked_chars += char1 return count"},{"question":"Write a program in Python that generates a list of all prime numbers up to a given limit using the Sieve of Eratosthenes algorithm. The program should take an integer input from the user, which represents the limit of prime numbers to be generated. The program should then print the list of prime numbers up to that limit. The program should be well-documented and formatted according to PEP 8 guidelines.","solution":"def sieve_of_eratosthenes(limit): Generates a list of all prime numbers up to a given limit using the Sieve of Eratosthenes algorithm. Parameters: limit (int): The upper limit for generating prime numbers. Returns: list: A list of prime numbers up to the given limit. if limit < 2: return [] # Initialize a boolean array indicating prime status is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers for start in range(2, int(limit**0.5) + 1): if is_prime[start]: for multiple in range(start*start, limit + 1, start): is_prime[multiple] = False # Extract the prime numbers primes = [num for num, prime in enumerate(is_prime) if prime] return primes"},{"question":"please help me with 10 coding questions that I could use to interview a senior full stack engineer. please make the questions challenging yet relevant to real-world scenarios. focus on the practicality of the solutions rather than theoretical concepts. and instead of having me recall certain details about these questions later, please write the questions in the form of a python script with necessary comments so that I can simply execute the code to review the questions whenever I want. Additionally, incorporate a random element that will alter the parameters of each question each time the script is executed to make the interview more challenging.","solution":"import random def generate_interview_questions(): questions = [] # 1. Data retrieval and filtering based on randomized parameters year = random.randint(2000, 2023) threshold = random.randint(1000, 10000) questions.append(f\\"1. Given a dataset of transactions, write a Python function that retrieves all transactions for the year {year} where the amount exceeds {threshold}.\\") # 2. Random array size and values for sorting and searching problems array_size = random.randint(10, 50) questions.append(f\\"2. Given an unsorted array of {array_size} integers, write a function that first sorts the array and then implements binary search to find a particular element provided as an input.\\") # 3. Dynamic route calculation for delivery services stops = random.randint(5, 20) questions.append(f\\"3. A delivery truck has {stops} stops to make. Implement an algorithm to determine the most efficient route that minimizes the travel distance using a suitable graph-based approach.\\") # 4. Randomized transaction logs for concurrency control question transaction_count = random.randint(50, 200) questions.append(f\\"4. Given a log of {transaction_count} transactions happening concurrently, write a code to resolve conflicting transactions using a locking mechanism.\\") # 5. Randomized file sizes for data processing file_size = random.randint(100, 1000) questions.append(f\\"5. Write a function to process a log file with {file_size}MB size and extract meaningful statistics such as number of errors, warnings, and info messages. Ensure your code can handle large file sizes efficiently.\\") # 6. Randomized API failure rate failure_rate = random.uniform(0.05, 0.3) questions.append(f\\"6. Given an API with a failure rate of {failure_rate*100:.2f}%, write a code that ensures high availability by implementing a retry mechanism with exponential backoff.\\") # 7. Varying levels of nesting for JSON data parsing nesting_levels = random.randint(1, 5) questions.append(f\\"7. Parse and extract data from a JSON response with up to {nesting_levels} levels of nested objects. Write a function that can handle varying levels of nesting robustly.\\") # 8. Dynamic URL shortening with random lengths url_length = random.randint(100, 200) questions.append(f\\"8. Design a URL shortening service that can take any URL with up to {url_length} characters and returns a shortened version. Implement the encoder and decoder functions.\\") # 9. Random threshold for monitoring system metrics cpu_threshold = random.randint(70, 95) questions.append(f\\"9. Implement a monitoring system that raises alerts if the CPU usage exceeds {cpu_threshold}%. Write code to simulate varying CPU loads and test your monitoring system.\\") # 10. Random edge numbers for finding cycles in graph edges = random.randint(10, 30) questions.append(f\\"10. Write a function to determine if a directed graph with {edges} edges contains any cycles. Use appropriate graph traversal algorithms in your implementation.\\") return questions interview_questions = generate_interview_questions() for question in interview_questions: print(question)"},{"question":"Given a set of numbers, let's say [15, 39, 8, 2, 7, 11]. I want to create a function that can rearrange these numbers so that I get the maximum possible number from them. Can you help me write this function in Python? I also want to understand the complexity of this solution.","solution":"from functools import cmp_to_key def compare(a, b): Custom comparator: returns -1 if a should come before b, 1 otherwise. if a + b > b + a: return -1 elif a + b < b + a: return 1 else: return 0 def largest_possible_number(nums): Rearranges a list of numbers so that the largest possible number is formed. Args: nums (list of int): A list of integers. Returns: str: The largest possible number formed by the integers. # Convert all numbers to strings because we will be comparing concatenated results str_nums = list(map(str, nums)) # Sort numbers with custom comparator sorted_nums = sorted(str_nums, key=cmp_to_key(compare)) # Edge case: If the largest number is '0', then all numbers are 0 if sorted_nums[0] == '0': return '0' # Join sorted numbers into the largest possible number largest_number = ''.join(sorted_nums) return largest_number # Complexity: # The core of the algorithm involves sorting, which has a time complexity of O(n log n), # where n is the number of elements in the input list. The comparison function itself # operates in constant time given two fixed-length strings."},{"question":"Here is my implementation of Kadane's Algorithm, (used to find the maximum sum of a contiguous subarray) which works for arrays that contain only positive values, but it doesn't work for arrays that contain a mixture of positive and negative values. Can you help me adjust it to handle that case?","solution":"def max_subarray_sum(arr): This function implements Kadane's Algorithm to find the maximum sum of a contiguous subarray. It works for arrays with both positive and negative values. if not arr: return 0 max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Given two strings s1 and s2, write a Python program to find whether s1 is an anagram of s2.","solution":"def is_anagram(s1, s2): Check if s1 and s2 are anagrams. Anagrams are words or phrases that contain the same letters in the same quantities. This function will return True if s1 and s2 are anagrams, otherwise it will return False. # Clean strings by removing spaces and converting to lower case s1, s2 = s1.replace(\\" \\", \\"\\").lower(), s2.replace(\\" \\", \\"\\").lower() # If the sorted characters of the strings are the same, they are anagrams return sorted(s1) == sorted(s2)"},{"question":"Write a function to move all zeros in an array to the end. However, you are not allowed to use any extra space, i.e., the operation should be done in-place. For example, if the array is [1,0,2,0,3,0,4], the result should be [1,2,3,4,0,0,0].","solution":"def move_zeros_to_end(arr): Moves all zeros in the array to the end while maintaining the order of non-zero elements. This operation is done in-place without using extra space. # Initialize a pointer to traverse the array position = 0 # Traverse the array, if the element is non-zero, store it at current position for i in range(len(arr)): if arr[i] != 0: arr[position] = arr[i] position += 1 # After all non-zero elements have been moved to the front, fill the rest with zeros for i in range(position, len(arr)): arr[i] = 0"},{"question":"Given the following block of code in Python that incorrectly implements the functionality to find ASCII representation of a list of characters, identify and correct the errors. Also, enhance the function to not only get the ASCII representation but also to filter and ignore non-printable characters. The function should return a list of ASCII values corresponding to each character in the received string, only if the characters are printable.","solution":"def get_printable_ascii_values(chars): Returns the ASCII values of the printable characters in the given list of characters. Args: chars (list of str): list of characters to process. Returns: list of int: list of ASCII values of printable characters. # Generating ASCII values for printable characters return [ord(char) for char in chars if char.isprintable()]"},{"question":"Develop a Python program that asks for an input string and then checks whether the string contains any duplicate characters. The program should count the number of unique characters in the string and also return the frequency of each character. Additionally, the program should use a hash data structure to store the character frequencies and optimize the duplicate character detection algorithm to achieve a time complexity of O(n). The program should handle strings with both uppercase and lowercase letters as input and provide a user-friendly output.","solution":"def check_duplicates_and_count_frequency(input_string): Returns a dictionary with the frequency of each character and indicates whether the input string has any duplicate characters. frequency_dict = {} has_duplicates = False for char in input_string: if char in frequency_dict: frequency_dict[char] += 1 has_duplicates = True else: frequency_dict[char] = 1 return { 'frequency': frequency_dict, 'has_duplicates': has_duplicates, 'unique_count': len(frequency_dict) }"},{"question":"Given an online system that tracks the attendance of students in multiple courses. The system needs to generate an accurate report on the attendance of a specific student across all the courses they are taking. The system also needs to consider any missed classes and calculate an overall attendance percentage for the student. Write a Python script that would solve this problem, you may make assumptions, but make them explicit.","solution":"def calculate_attendance(student_records): Calculates the overall attendance percentage for each course. Parameters: student_records (dict): A dictionary where keys are course names and values are lists of attendance records. Each attendance record is a tuple (date, present), where 'date' is a string and 'present' is a boolean. Returns: dict: A dictionary with course names as keys and overall attendance percentage as values. attendance_report = {} for course, records in student_records.items(): total_classes = len(records) attended_classes = sum(1 for date, present in records if present) # Calculate attendance percentage if total_classes > 0: attendance_percentage = (attended_classes / total_classes) * 100 else: attendance_percentage = 0.0 # Store the result with the course name as key attendance_report[course] = attendance_percentage return attendance_report"},{"question":"Develop a Python script that accepts a string and a numerical input from the user, then outputs the string a number of times equal to the numerical input. Additionally, introduce error handling for invalid inputs and optimize the program to handle large inputs efficiently.","solution":"def repeat_string(string, num_times): Returns the input string repeated num_times times. Parameters: string (str): The string to be repeated. num_times (int): The number of times to repeat the string. Returns: str: The repeated string. if not isinstance(string, str): raise TypeError(\\"The first argument must be a string.\\") if not isinstance(num_times, int): raise TypeError(\\"The second argument must be an integer.\\") if num_times < 0: raise ValueError(\\"The number of times should be a non-negative integer.\\") return string * num_times"},{"question":"Write a function in Python that takes a character (i.e. a string of length 1) and returns True if it is a vowel, False otherwise.","solution":"def is_vowel(char): Returns True if the given character is a vowel, False otherwise. vowels = 'aeiouAEIOU' return char in vowels"},{"question":"Write a program that implements the asyncio library to create an asynchronous function that prints the numbers from 0 to 10 with a delay of 1 second in between.","solution":"import asyncio async def print_numbers(): Asynchronously prints the numbers from 0 to 10 with a delay of 1 second in between. for number in range(11): print(number) await asyncio.sleep(1) # To run this function, the following lines of code should be executed: # asyncio.run(print_numbers())"},{"question":"Create a python code that checks for the palindromic property in a specific subset of genetic DNA strings. Unlike typical palindromes which read the same backwards and forwards, in genetics, a palindromic DNA sequence means that the sequence of nucleotides on one strand reads the same in the opposite direction on the complementary strand. These sequences are known as inverted repeats.","solution":"def is_dna_palindrome(sequence: str) -> bool: Checks if a given DNA sequence is palindromic. A DNA palindromic sequence reads the same on reverse of its complementary strand. :param sequence: DNA sequence (string of 'A', 'T', 'C', 'G') :return: True if it is a palindromic sequence, False otherwise complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'} # Generate complementary strand complementary_strand = ''.join(complement[base] for base in sequence[::-1]) # Check if the original sequence is the same as complementary strand's reverse return sequence == complementary_strand"},{"question":"Create a blockchain data structure in Python using a list and implement functions to add a new block, validate the entire chain, and get the last block.","solution":"import hashlib import time class Block: def __init__(self, index, previous_hash, data, timestamp=None): self.index = index self.previous_hash = previous_hash self.timestamp = timestamp or time.time() self.data = data self.hash = self.hash_block() def hash_block(self): sha = hashlib.sha256() sha.update(f'{self.index}{self.previous_hash}{self.timestamp}{self.data}'.encode('utf-8')) return sha.hexdigest() class Blockchain: def __init__(self): self.chain = [self.create_genesis_block()] def create_genesis_block(self): return Block(0, \\"0\\", \\"Genesis Block\\") def get_latest_block(self): return self.chain[-1] def add_block(self, data): previous_block = self.get_latest_block() new_block = Block(index=previous_block.index + 1, previous_hash=previous_block.hash, data=data) self.chain.append(new_block) def is_chain_valid(self): for i in range(1, len(self.chain)): current_block = self.chain[i] previous_block = self.chain[i - 1] if current_block.hash != current_block.hash_block(): return False if current_block.previous_hash != previous_block.hash: return False return True"},{"question":"Generate a code to take in a list of sentences, totaling no more than 1000 words, and output the longest sentence. The code should also exclude any sentences that contain numbers or special characters. Additionally, the code should also ignore any sentence that is a question or contains the word \\"and\\". The code should be able to handle sentences that contain multiple clauses separated by commas or semicolons.","solution":"import re def find_longest_sentence(sentences): Find the longest sentence from a list of sentences that doesn't contain any numbers, special characters, isn't a question and doesn't contain the word \\"and\\". pattern = re.compile(r'[^a-zA-Zs,.]') filtered_sentences = [] for sentence in sentences: if pattern.search(sentence) or '?' in sentence or 'and' in sentence.lower(): continue filtered_sentences.append(sentence) longest_sentence = \\"\\" for sentence in filtered_sentences: if len(sentence) > len(longest_sentence): longest_sentence = sentence return longest_sentence"},{"question":"Create a Python program to sort an array of numbers in descending order","solution":"def sort_descending(arr): Sorts an array of numbers in descending order. Parameters: arr (list): A list of numbers Returns: list: Sorted list of numbers in descending order return sorted(arr, reverse=True)"},{"question":"Write a Python function that checks if the input (an integer) is a prime number or not. Additionally, the function should be able to handle large numbers (up to 10^12) efficiently.","solution":"import math def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a program in Python to reverse a string and its words without using any inbuilt reverse() function or slicing methods.","solution":"def reverse_string_words(s): Reverses a string and its words without using any inbuilt reverse() function or slicing methods. def reverse_word(word): reversed_word = \\"\\" for ch in word: reversed_word = ch + reversed_word return reversed_word words = s.split() reversed_words = [] for word in words: reversed_words.append(reverse_word(word)) joined_reversed_words = \\"\\" for word in reversed(reversed_words): joined_reversed_words += word + \\" \\" return joined_reversed_words.strip()"},{"question":"Create a simple python flask app with two endpoints: one for uploading an image and another one for downloading the uploaded image.","solution":"from flask import Flask, request, send_file import os app = Flask(__name__) UPLOAD_FOLDER = 'uploads' if not os.path.exists(UPLOAD_FOLDER): os.makedirs(UPLOAD_FOLDER) @app.route('/upload', methods=['POST']) def upload_file(): if 'file' not in request.files: return 'No file part', 400 file = request.files['file'] if file.filename == '': return 'No selected file', 400 filepath = os.path.join(UPLOAD_FOLDER, file.filename) file.save(filepath) return 'File successfully uploaded', 200 @app.route('/download/<filename>', methods=['GET']) def download_file(filename): filepath = os.path.join(UPLOAD_FOLDER, filename) if not os.path.exists(filepath): return 'File not found', 404 return send_file(filepath, as_attachment=True) if __name__ == '__main__': app.run(debug=True)"},{"question":"Create a Python dictionary that stores square roots of prime numbers from 1 to 15. Additionally, implement functionality for checking if the input number is prime.","solution":"import math def is_prime(n): Checks if a number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return False return True def prime_square_roots(upper_limit): Returns a dictionary with prime numbers as keys and their square roots as values, up to the given upper limit (inclusive). primes_sqrt = {} for num in range(1, upper_limit + 1): if is_prime(num): primes_sqrt[num] = math.sqrt(num) return primes_sqrt # Dictionary for prime numbers from 1 to 15 and their square roots prime_sqrt_dict = prime_square_roots(15)"},{"question":"Write a function filter_odd_numbers in Python to filter out all odd numbers from a given list of integers.","solution":"def filter_odd_numbers(numbers): Filters out odd numbers from a given list of integers. Parameters: numbers (list): A list of integers. Returns: list: A list with only even numbers. return [num for num in numbers if num % 2 == 0]"},{"question":"Write a Python program to determine the largest number that is less than a given number and is also divisible by a second number, while only using a single for loop.","solution":"def largest_divisible_less_than(n, divisor): Returns the largest number less than \`n\` that is divisible by \`divisor\`. for i in range(n-1, 0, -1): if i % divisor == 0: return i return None # In case no such number exists"},{"question":"Given a list of words, write code using Python to return the longest palindrome from the list.","solution":"def longest_palindrome(words): Returns the longest palindrome from the list of words. If there are no palindromes, returns an empty string. If there are multiple longest palindromes with the same length, returns the first one found. def is_palindrome(word): return word == word[::-1] longest = \\"\\" for word in words: if is_palindrome(word) and len(word) > len(longest): longest = word return longest"},{"question":"Create a python function that extracts all the emails from a given text or a string.","solution":"import re def extract_emails(text): Extracts all email addresses from a given text. Parameters: text (str): The input text from which to extract emails. Returns: list: A list of email addresses found in the text. email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' return re.findall(email_pattern, text)"},{"question":"Write a simple python code that reads a CSV file into a list of dictionaries","solution":"import csv def read_csv_to_dict_list(file_path): Reads a CSV file and returns a list of dictionaries, with each dictionary representing a row. dict_list = [] with open(file_path, mode='r', newline='') as csvfile: reader = csv.DictReader(csvfile) for row in reader: dict_list.append(row) return dict_list"},{"question":"How would you modify the above code to implement a word guessing game, where the user can set the length of the word to guess and the number of incorrect guesses allowed before the game ends?","solution":"import random import string class WordGuessGame: def __init__(self, word_length, max_incorrect_guesses): self.word_length = word_length self.max_incorrect_guesses = max_incorrect_guesses self.word_to_guess = ''.join(random.choices(string.ascii_lowercase, k=word_length)) self.guessed_letters = set() self.incorrect_guesses = 0 def guess(self, letter): if letter in self.guessed_letters: return \\"Already guessed.\\" self.guessed_letters.add(letter) if letter in self.word_to_guess: if all(char in self.guessed_letters for char in self.word_to_guess): return \\"Congratulations! You've guessed the word.\\" return f\\"Good guess! The word so far: {self.get_display_word()}\\" else: self.incorrect_guesses += 1 if self.incorrect_guesses >= self.max_incorrect_guesses: return f\\"Game over! The word was: {self.word_to_guess}\\" return f\\"Wrong guess. You have {self.max_incorrect_guesses - self.incorrect_guesses} incorrect guesses left.\\" def get_display_word(self): return ''.join(char if char in self.guessed_letters else \\"_\\" for char in self.word_to_guess) def get_incorrect_guesses_left(self): return self.max_incorrect_guesses - self.incorrect_guesses"},{"question":"Write code to detect if a linked list cycle and return the node where the cycle begins.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def detect_cycle(head): Detect if a linked list has a cycle. If a cycle is detected, return the node where the cycle begins. If there's no cycle, return None. slow, fast = head, head # Determine if there is a cycle while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break else: # No cycle return None # Find the node where the cycle begins slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"How can I write a function that multiplies all the numbers in a given list? Can you provide a code example?","solution":"def multiply_list(numbers): Returns the product of all the numbers in the given list. Parameters: numbers (list of numbers): A list of numbers to multiply. Returns: number: The product of all the numbers in the list. product = 1 for number in numbers: product *= number return product"},{"question":"Write a Python program that illustrates the concept of variable scoping, demonstrating the differences between local, enclosing, and global variables.","solution":"# Global variable global_var = \\"I am a global variable\\" def outer_function(): # Enclosing variable enclosing_var = \\"I am an enclosing variable\\" def inner_function(): # Local variable local_var = \\"I am a local variable\\" print(local_var) # Accessing local variable print(enclosing_var) # Accessing enclosing variable print(global_var) # Accessing global variable inner_function() # This function will demonstrate the scoping def demonstrate_scoping(): outer_function()"},{"question":"Develop a Python method to compute the cumulative mass in kilograms of grocery items that a user has indicated they will purchase. Provided is a dictionary that maps grocery items to their respective weights. Also, assume that the user input will be in the form of a list of items they intend to buy. However, the user might input items that are not in the grocery dictionary, and in this case, you should handle the error by printing \\"Item not found\\" and continue with the next item.","solution":"def compute_cumulative_mass(grocery_dict, user_items): Computes the cumulative mass of grocery items based on user input. Parameters: grocery_dict (dict): A dictionary where keys are grocery items and values are their weights in kilograms. user_items (list): A list of grocery items that the user intends to buy. Returns: float: The cumulative mass of the grocery items in kilograms. total_mass = 0.0 for item in user_items: if item in grocery_dict: total_mass += grocery_dict[item] else: print(\\"Item not found:\\", item) return total_mass # Example usage: grocery_dict = { \\"apple\\": 0.2, \\"banana\\": 0.12, \\"milk\\": 2.0, \\"bread\\": 0.5 } user_items = [\\"apple\\", \\"milk\\", \\"banana\\", \\"chicken\\"] cumulative_mass = compute_cumulative_mass(grocery_dict, user_items) print(\\"Cumulative mass:\\", cumulative_mass)"},{"question":"Write a python function that takes a string as an input and returns a list of unique characters in the string.","solution":"def unique_characters(input_string): Returns a list of unique characters in the input string. unique_chars = list(set(input_string)) return unique_chars"},{"question":"I have a list of numbers in Python, and I want to generate a new list where each element is the cumulative sum of the elements up to that point in the original list. For example, given the list [1, 2, 3, 4], the output should be [1, 3, 6, 10]. How can I achieve this using Python programming? Additionally, can you provide an example using the given data points to verify the correctness of the solution?","solution":"def cumulative_sum(numbers): Returns a new list where each element is the cumulative sum of the elements up to that point in the original list. if not numbers: return [] result = [numbers[0]] for i in range(1, len(numbers)): result.append(result[-1] + numbers[i]) return result"},{"question":"Given two sorted lists of numbers, write a code to merge them and remove any duplicates. Additionally, modify the code to handle cases where one or both of the lists contain non-numeric elements, such as strings or objects. The code should compare and merge the lists based on the lexicographical order of the string representations of the elements.","solution":"def merge_and_remove_duplicates(list1, list2): Merges two sorted lists and removes any duplicate elements, handling both numeric and non-numeric items. The merged list is sorted based on the lexicographical order of the string representations of the elements. combined_list = sorted(set(list1) | set(list2), key=lambda x: str(x)) return combined_list"},{"question":"Refine the subsequent Python code into a procedure that detects prime numbers from a supplied list, returning a catalogue containing only the prime integers in ascending sequence.","solution":"def is_prime(n): Check whether a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def filter_primes(numbers): Filters and returns a sorted list of prime numbers from the provided list. primes = [num for num in numbers if is_prime(num)] return sorted(primes)"},{"question":"Design a Python function that can identify prime numbers from a set of numbers. This function should be designed to handle errors and exceptions. The input will be a list of numbers, which can include negative numbers, zero, decimals, strings, and complex numbers. The function should verify the validity of the input and return a dictionary where the keys are the prime numbers and the values are the indices of the original list where the prime numbers were found. Moreover, the function should also be capable of handling large numbers efficiently.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def identify_primes(numbers): Identifies prime numbers in the given list of numbers. Args: numbers (list): List of numbers which can include negative numbers, zero, decimals, strings, and complex numbers. Returns: dict: Dictionary where the keys are the prime numbers identified in the list and the values are the indices at which these primes were found. primes = {} for index, value in enumerate(numbers): try: number = int(value) if is_prime(number): primes[number] = index except (ValueError, TypeError): continue return primes"},{"question":"Implement a Python function that makes an HTTP GET request to a given URL and returns the response body. The function should handle any possible exceptions, such as connection errors or invalid URLs, and return None in case of an error.","solution":"import requests def get_response_body(url): Makes an HTTP GET request to the given URL and returns the response body. Returns None in case of an error (connection error, invalid URL, etc.). try: response = requests.get(url) response.raise_for_status() # Will raise an HTTPError for bad responses return response.text except (requests.RequestException, ValueError): return None"},{"question":"Merge two sorted lists into a new sorted list in Python without using any built-in sorting functions.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a new sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"I am trying to find the best way to generate a unique ID for a new user in my Python application. The ID should be a combination of the user's first name, last name, and a sequence number. Can you help me implement a function that takes the first name, last name, and a sequence number as input and returns the unique ID? Additionally, include a function to validate if the generated ID matches the input details.","solution":"def generate_unique_id(first_name, last_name, sequence_number): Generates a unique ID based on given first name, last name, and sequence number. Args: first_name (str): The first name of the user. last_name (str): The last name of the user. sequence_number (int): The sequence number. Returns: str: The unique ID generated. return f\\"{first_name}_{last_name}_{sequence_number}\\" def validate_unique_id(unique_id, first_name, last_name, sequence_number): Validates if the given unique ID matches the input details. Args: unique_id (str): The unique ID to validate. first_name (str): The first name used to generate the ID. last_name (str): The last name used to generate the ID. sequence_number (int): The sequence number used to generate the ID. Returns: bool: True if the ID matches the input details, False otherwise. expected_id = generate_unique_id(first_name, last_name, sequence_number) return unique_id == expected_id"},{"question":"Write a python function to transpose a given matrix, where the matrix can have any number of rows and columns. The function should return the transposed matrix.","solution":"def transpose(matrix): Transposes the given matrix. Parameters: matrix (list of list of any): The matrix to be transposed. Returns: list of list of any: The transposed matrix. if not matrix: return [] return [list(row) for row in zip(*matrix)]"},{"question":"Create a basic blockchain system in python that includes functionalities like adding new transactions, mining new blocks, and checking the validity of the chain.","solution":"import hashlib import time class Block: def __init__(self, index, previous_hash, timestamp, transactions, nonce=0): self.index = index self.previous_hash = previous_hash self.timestamp = timestamp self.transactions = transactions self.nonce = nonce self.hash = self.calculate_hash() def calculate_hash(self): block_string = f\\"{self.index}{self.previous_hash}{self.timestamp}{self.transactions}{self.nonce}\\" return hashlib.sha256(block_string.encode()).hexdigest() class Blockchain: def __init__(self): self.chain = [self.create_genesis_block()] self.pending_transactions = [] self.difficulty = 2 def create_genesis_block(self): return Block(0, \\"0\\", time.time(), \\"Genesis Block\\") def get_latest_block(self): return self.chain[-1] def add_transaction(self, transaction): self.pending_transactions.append(transaction) def mine_pending_transactions(self): if not self.pending_transactions: return False latest_block = self.get_latest_block() new_block = Block(len(self.chain), latest_block.hash, time.time(), self.pending_transactions) self.mine_block(new_block) self.chain.append(new_block) self.pending_transactions = [] return True def mine_block(self, block): while not block.hash.startswith('0' * self.difficulty): block.nonce += 1 block.hash = block.calculate_hash() def is_chain_valid(self): for index in range(1, len(self.chain)): current_block = self.chain[index] previous_block = self.chain[index - 1] if current_block.hash != current_block.calculate_hash(): return False if current_block.previous_hash != previous_block.hash: return False return True"},{"question":"Write a code that takes a nested dictionary and reverses the order of its keys at both the top-level and second-level. If there are same valued inner dictionaries, reverse the order of the keys within these duplicate inner dictionaries as well.","solution":"def reverse_nested_dictionary(nested_dict): Reverses the order of the keys in a nested dictionary at both the top-level and the second-level. reversed_dict = {} for key in reversed(nested_dict.keys()): value = nested_dict[key] if isinstance(value, dict): reversed_value = {k: value[k] for k in reversed(value.keys())} reversed_dict[key] = reversed_value else: reversed_dict[key] = value return reversed_dict"},{"question":"Generate three random unique 5-character strings using the letters a-z and the numbers 0-9. To ensure uniqueness, do not allow strings to be repeated in your output. Additionally, implement a function that checks and ensures that no previously generated string in your program's history matches the new ones.","solution":"import random import string class UniqueStringGenerator: def __init__(self): self.generated_strings = set() def generate_unique_string(self): while True: new_string = ''.join(random.choices(string.ascii_lowercase + string.digits, k=5)) if new_string not in self.generated_strings: self.generated_strings.add(new_string) return new_string def generate_three_unique_strings(self): unique_strings = set() while len(unique_strings) < 3: unique_strings.add(self.generate_unique_string()) return list(unique_strings) # The main function to be used for generating three unique random strings def generate_three_unique_random_strings(): generator = UniqueStringGenerator() return generator.generate_three_unique_strings()"},{"question":"I have a JSON string and I want to remove all the duplicated terms from it. How can I achieve that in Python? Can you provide me with a code example?","solution":"import json def remove_duplicates_from_json(json_string): Removes duplicated terms from a JSON string and returns the cleaned JSON string. json_data = json.loads(json_string) def remove_duplicates(obj): if isinstance(obj, dict): return {key: remove_duplicates(value) for key, value in obj.items()} elif isinstance(obj, list): seen = set() result = [] for item in obj: item_as_str = json.dumps(item, sort_keys=True) if item_as_str not in seen: result.append(remove_duplicates(item)) seen.add(item_as_str) return result else: return obj cleaned_data = remove_duplicates(json_data) return json.dumps(cleaned_data, indent=4)"},{"question":"Create a function that takes two parameters, a number and a string, and returns an array with those two values in it. Additionally, the function should check if the provided number is a prime number and if the string is a palindrome. The function should return the array only if both conditions are met; otherwise, return an empty array.","solution":"def is_prime(num): Checks if a number is a prime number. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def is_palindrome(s): Checks if a string is a palindrome. return s == s[::-1] def create_array_if_prime_and_palindrome(number, string): Returns an array containing the number and string if the number is prime and the string is a palindrome. Otherwise, returns an empty array. if is_prime(number) and is_palindrome(string): return [number, string] return []"},{"question":"Given two arrays, write a program to compute their intersection. The intersection is defined as the set of elements that are common to both the arrays. For example, if array1 = [1, 2, 3, 4] and array2 = [3, 4, 5, 6], the output should be [3, 4].","solution":"def array_intersection(array1, array2): Returns the intersection of two arrays. Parameters: array1 (list): The first list of integers. array2 (list): The second list of integers. Returns: list: A list containing the intersection of both arrays. set1 = set(array1) set2 = set(array2) intersection = set1.intersection(set2) return list(intersection)"},{"question":"Develop a function that converts a given positive integer number to its equivalent binary representation as a string, without using any built-in conversion functions. In addition, be sure to include error checking within your function to verify that the input is indeed a positive integer.","solution":"def integer_to_binary(n): Converts a positive integer number to its binary representation as a string. Parameters: n (int): A positive integer. Returns: str: Binary representation of the positive integer. Raises: ValueError: If the input is not a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") binary_rep = \\"\\" while n > 0: binary_rep = str(n % 2) + binary_rep n = n // 2 return binary_rep"},{"question":"Modify the following python code using a decorator to add a delay of 1 second before executing the function.","solution":"import time from functools import wraps def delay(seconds): Decorator that delays executing the function by a specified number of seconds. def decorator(func): @wraps(func) def wrapper(*args, **kwargs): time.sleep(seconds) return func(*args, **kwargs) return wrapper return decorator @delay(1) def example_function(): A simple function to demonstrate the delay decorator. return \\"Function executed\\""},{"question":"Write a python function called \`merge_sorted_lists\` that takes two sorted lists that can contain both numbers and strings, and merges them into a single sorted list. The list can have duplicate values or different type of data, for example ['a', 'b', 2, 1]. Your function should be robust in handling such varied inputs.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list, handling both numbers and strings. merged_list = sorted(list1 + list2, key=lambda x: (isinstance(x, str), x)) return merged_list"},{"question":"Create a function named \\"compare_find\\" that takes two lists of strings as input: \\"string_list\\" and \\"substring\\". The function should return the index of the first occurrence of the substring in any of the strings in the list. If the substring is not found in any of the strings, the function should return -1.","solution":"def compare_find(string_list, substring): Returns the index of the first occurrence of the substring in any of the strings in the list. If the substring is not found, returns -1. :param string_list: List of strings to search within. :param substring: Substring to find in the string list. :return: Index of the first occurrence of the substring or -1 if not found. for index, string in enumerate(string_list): if substring in string: return index return -1"},{"question":"Please create a program in Python that can perform multi-step data manipulation with conditional statements. The program should read data from a CSV file, where each row contains a user's name, age, and city. The program should only display the information of users who meet two conditions: they are over 30 years old and they live in London. The output should be in the format of a dictionary, where the key is the user's name and the value is a tuple containing their age and city. In addition, the program should provide a feature to sort the output by users' age in descending order. Please make sure the code can handle complex logical operations and is scalable for large datasets.","solution":"import csv def read_and_filter_users(file_path): Reads data from a CSV file and filters users who are over 30 years old and live in London. Args: - file_path: str : path of the CSV file to read. Returns: - dict : a dictionary where the key is the user's name and the value is a tuple (age, city). users = {} with open(file_path, mode='r') as file: reader = csv.DictReader(file) for row in reader: name = row['name'] age = int(row['age']) city = row['city'] if age > 30 and city.lower() == 'london': users[name] = (age, city) return users def sort_users_by_age(users): Sorts users by age in descending order. Args: - users: dict : dictionary where the key is the user's name and the value is a tuple (age, city). Returns: - list : a list of tuples where each tuple is (name, (age, city)), sorted by age in descending order. return sorted(users.items(), key=lambda item: item[1][0], reverse=True)"},{"question":"How can I write a Python program that generates a specified number of prime numbers using a function that implements the Sieve of Eratosthenes algorithm? Additionally, can you provide an example of how to use the function to generate the first 10 prime numbers and store them in a list?","solution":"def sieve_of_eratosthenes(n): Returns a list of the first n prime numbers using the Sieve of Eratosthenes algorithm. if n <= 0: return [] limit = 2 while True: primes = [] sieve = [True] * (limit + 1) p = 2 while p * p <= limit: if sieve[p] == True: for i in range(p * p, limit + 1, p): sieve[i] = False p += 1 primes = [p for p in range(2, limit) if sieve[p]] if len(primes) >= n: return primes[:n] limit *= 2 # Example usage: first_10_primes = sieve_of_eratosthenes(10) print(first_10_primes) # Output should be [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"},{"question":"Generate a program that can extract all URLs from a given string. The program should ignore any URLs that are not from reputable news sources, such as CNN, BBC, or The New York Times. If there are no URLs from reputable news sources, the program should return an empty list.","solution":"import re def extract_reputable_news_urls(text): Extract URLs that are from reputable news sources (CNN, BBC, New York Times) from a given string. Args: text (str): the input string containing URLs Returns: List[str]: a list of URLs from reputable news sources urls = re.findall(r'(https?://[^s]+)', text) reputable_sources = ['cnn.com', 'bbc.com', 'nytimes.com'] reputable_urls = [ url for url in urls if any(source in url for source in reputable_sources) ] return reputable_urls"},{"question":"How can I design a decision tree classifier in Python to classify animals into four different categories?","solution":"from sklearn.tree import DecisionTreeClassifier import pandas as pd import numpy as np def train_decision_tree_classifier(features, labels): Trains a decision tree classifier on the given features and labels. Parameters: - features: A 2D array-like structure (list of lists, numpy array, or pandas DataFrame) containing the features. - labels: A 1D array-like structure (list, numpy array, or pandas Series) containing the labels. Returns: - A trained DecisionTreeClassifier instance. # Create the decision tree classifier clf = DecisionTreeClassifier() # Fit the classifier on the provided features and labels clf.fit(features, labels) return clf"},{"question":"Develop an algorithm that performs a ternary search on a balanced ternary tree. Additionally, incorporate functionality to handle cases when the tree is not balanced. The function should adjust the tree to maintain balance (using AVL tree rules) before performing the search.","solution":"class Node: def __init__(self, key): self.key = key self.left = None self.mid = None self.right = None self.height = 1 def height(node): if node is None: return 0 return node.height def update_height(node): if node is not None: node.height = 1 + max(height(node.left), height(node.mid), height(node.right)) def balance_factor(node): if node is None: return 0 return height(node.left) - height(node.right) def rotate_left(z): y = z.right T2 = y.left y.left = z z.right = T2 update_height(z) update_height(y) return y def rotate_right(y): x = y.left T2 = x.right x.right = y y.left = T2 update_height(y) update_height(x) return x def balance(node): if node is None: return None update_height(node) bf = balance_factor(node) if bf > 1: if balance_factor(node.left) < 0: node.left = rotate_left(node.left) return rotate_right(node) elif bf < -1: if balance_factor(node.right) > 0: node.right = rotate_right(node.right) return rotate_left(node) return node def insert(node, key): if node is None: return Node(key) if key < node.key: node.left = insert(node.left, key) elif key > node.key: node.right = insert(node.right, key) else: node.mid = insert(node.mid, key) return balance(node) def ternary_search(node, key): if node is None: return False if key < node.key: return ternary_search(node.left, key) elif key > node.key: return ternary_search(node.right, key) else: return True def balanced_ternary_search(root, key): root = balance(root) return ternary_search(root, key)"},{"question":"Write a function in Python that takes in a list of integers and returns a new list that contains only the even numbers in the original list. The function should have a time complexity of O(n) and should not use any built-in Python functions such as filter() or list comprehension. Additionally, the function should only use a single loop to iterate over the input list.","solution":"def filter_even_numbers(numbers): Returns a list containing only the even numbers from the input list. even_numbers = [] for number in numbers: if number % 2 == 0: even_numbers.append(number) return even_numbers"},{"question":"Given an array of integers and an integer k, write a program to find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k. Additionally, modify the solution to return the maximum number of such index pairs present in the array.","solution":"def contains_nearby_duplicate(nums, k): Returns True if there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k. Also returns the maximum number of such index pairs. index_map = {} pair_count = 0 for i, num in enumerate(nums): if num in index_map: for j in index_map[num]: if abs(i - j) <= k: pair_count += 1 break index_map[num].append(i) else: index_map[num] = [i] return pair_count > 0, pair_count"},{"question":"Can you help me with a Python script for a calculator that can add, subtract, multiply, and divide two numbers entered through an input?","solution":"def calculator(a, b, operation): Performs basic arithmetic operations based on the given arguments. Args: a (float): The first number. b (float): The second number. operation (str): The operation to perform ('add', 'subtract', 'multiply', 'divide'). Returns: float: The result of the arithmetic operation. if operation == 'add': return a + b elif operation == 'subtract': return a - b elif operation == 'multiply': return a * b elif operation == 'divide': if b == 0: raise ValueError(\\"Cannot divide by zero\\") return a / b else: raise ValueError(\\"Invalid operation\\")"},{"question":"Given a singly linked list, reverse the list using recursion. Now, extend this function to reverse the list in groups of a given size (k). This means, you need to reverse the list such that each group of k nodes is reversed.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): if head is None or head.next is None: return head new_head = reverse_linked_list(head.next) head.next.next = head head.next = None return new_head def reverse_k_group(head, k): if head is None: return None # check if there are at least k nodes left in the linked list count = 0 current = head while current is not None and count < k: current = current.next count += 1 if count == k: reversed_head = reverse_k_group(current, k) # reverse first k nodes while count > 0: temp = head.next head.next = reversed_head reversed_head = head head = temp count -= 1 head = reversed_head return head"},{"question":"Develop a Python function specifically designed to perform an operation of rearranging a supplied dictionary object, utilizing the integer values as the focal rearrangement tool with the dictionary given as my_dict = {\\"Jerry\\": 10, \\"Marcus\\": 3, \\"Hanna\\": 5}. This function has to incorporate the logic that uses the dictionary's numerical entities for a newer sequence structure.","solution":"def rearrange_dict_by_values(my_dict): Rearranges the supplied dictionary by its integer values. :param my_dict: Dictionary to be rearranged. :return: A new dictionary rearranged by values in ascending order. # Sorting the dictionary by its values sorted_items = sorted(my_dict.items(), key=lambda item: item[1]) # Turning the sorted items back into a dictionary sorted_dict = dict(sorted_items) return sorted_dict # Example usage: my_dict = {\\"Jerry\\": 10, \\"Marcus\\": 3, \\"Hanna\\": 5} rearranged_dict = rearrange_dict_by_values(my_dict) print(rearranged_dict) # Output should be {\\"Marcus\\": 3, \\"Hanna\\": 5, \\"Jerry\\": 10}"},{"question":"Conceptualize an algorithmic application capable of deconstructing the condensed representation of web URLs embedded in slug back to its unshortened, original string length and content.","solution":"slug_to_url_mapping = { \\"abc123\\": \\"https://www.example.com/home\\", \\"xyz789\\": \\"https://www.sample.com/about\\", \\"qwerty\\": \\"https://www.otherwebsite.com/contact\\" } def resolve_slug_to_url(slug): Given a slug, return the corresponding full URL. return slug_to_url_mapping.get(slug, None)"},{"question":"Create a Python script to calculate the hypotenuse of a right-angled triangle. The script should prompt the user to enter the lengths of the other two sides. Validate the input to only accept positive numbers and display an error message if the user enters invalid input. Additionally, implement a function to calculate the area of the triangle and display it along with the hypotenuse. The script should be able to handle very large numbers (up to 10^18) efficiently and accurately, without causing any overflow or precision errors.","solution":"import math def calculate_hypotenuse(a, b): Returns the hypotenuse of a right-angled triangle given the lengths of the other two sides. return math.sqrt(a**2 + b**2) def calculate_area(a, b): Returns the area of a right-angled triangle given the lengths of the two perpendicular sides. return 0.5 * a * b def get_positive_number(prompt): Prompts the user for input and validates that it is a positive number. while True: try: value = float(input(prompt)) if value > 0: return value else: print(\\"Please enter a positive number.\\") except ValueError: print(\\"Invalid input. Please enter a numeric value.\\") def main(): Main function to execute the script. a = get_positive_number(\\"Enter the length of side a: \\") b = get_positive_number(\\"Enter the length of side b: \\") hypotenuse = calculate_hypotenuse(a, b) area = calculate_area(a, b) print(f\\"The hypotenuse of the right-angled triangle is: {hypotenuse}\\") print(f\\"The area of the right-angled triangle is: {area}\\") if __name__ == \\"__main__\\": main()"},{"question":"Given a list of strings, write a function to sort them alphabetically in ascending order while considering the case sensitivity. The function should handle strings with special characters and leading/trailing whitespaces. The function should return a new sorted list without modifying the original list. Example: sortStrings([\\"orange\\", \\"apple\\", \\"banana\\"]) should return [\\"apple\\", \\"banana\\", \\"orange\\"]. Additionally, the function should have a time complexity of O(n log n) and should not use any built-in sorting functions.","solution":"def sort_strings(strings): Returns a new list with the strings sorted alphabetically in ascending order considering the case sensitivity and handles strings with special characters and leading/trailing whitespaces. def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] merge_sort(left_half) merge_sort(right_half) i = j = k = 0 while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] j += 1 k += 1 while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1 result = list(strings) # Create a copy of the original list merge_sort(result) return result"},{"question":"Create a function that returns the nth element of the Fibonacci sequence using recursion. However, you are not allowed to use memoization techniques or any additional variables other than the input and return variables.","solution":"def fibonacci(n): Returns the nth element of the Fibonacci sequence using recursion. if n <= 0: raise ValueError(\\"n should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"In Python, write a program to not only remove all duplicates from a given list while maintaining the original order of elements, but also report how many duplicates were removed, their values and frequencies. For this task, you must use only vanilla Python, without any built-in functions for counting and sorting.","solution":"def remove_duplicates_with_report(input_list): Removes duplicates from the given list while maintaining the original order. Additionally, reports the number of duplicates that were removed, their values and frequencies. Args: input_list (list): The input list from which duplicates are to be removed. Returns: tuple: A tuple containing three elements: - A list with duplicates removed. - An integer representing the number of duplicates removed. - A dictionary with duplicates values and their frequencies. seen = set() no_duplicates = [] duplicate_count = 0 duplicates = {} for item in input_list: if item in seen: duplicate_count += 1 if item in duplicates: duplicates[item] += 1 else: duplicates[item] = 1 else: seen.add(item) no_duplicates.append(item) return no_duplicates, duplicate_count, duplicates"},{"question":"Write a code that allows a user to search a array of objects by any parameter, but the search must be case-insensitive and should consider only the first letter of each parameter. For example, if the user searches for 'c', it should return all objects with parameters starting with 'C' or 'c'.","solution":"def search_objects(objects, search_term): Returns a list of objects that match the search term (case-insensitive and only considering first letter). Parameters: - objects (list of dict): List of dictionaries to search through. - search_term (str): The term to search for (only first letter considered). Returns: - list of dict: List of dictionaries that match the search term. search_term = search_term[0].lower() result = [] for obj in objects: for key, value in obj.items(): if isinstance(value, str) and value[0].lower() == search_term: result.append(obj) break return result"},{"question":"We have a list of nodes in a tree, where each node has a unique value. Can you write a function that constructs a tree from this list? The input list is in the following order: for each node i (except the last node), its left child is node 2*i+1 and its right child is node 2*i+2. If the child does not exist, it is represented as null. The input list is guaranteed to be valid.","solution":"class TreeNode: Definition for a binary tree node. def __init__(self, x): self.val = x self.left = None self.right = None def construct_tree_from_list(nodes): Constructs a binary tree from a list where for each node i (except the last node), its left child is node 2*i + 1 and its right child is node 2*i + 2. if not nodes: return None node_list = [TreeNode(x) if x is not None else None for x in nodes] for i in range(len(nodes)): if nodes[i] is not None: left_index = 2 * i + 1 right_index = 2 * i + 2 if left_index < len(nodes): node_list[i].left = node_list[left_index] if right_index < len(nodes): node_list[i].right = node_list[right_index] return node_list[0]"},{"question":"Write a Python function that takes in a list of strings and returns the strings that contain a specific substring, with the option to filter based on the position of the substring within the string. The function should allow for case sensitivity and the ability to search for multiple substrings simultaneously.","solution":"def filter_strings(strings, substrings, case_sensitive=True, position=None): Filters strings based on presence of substrings. Parameters: - strings: List of strings to be filtered. - substrings: List of substrings to look for in the strings. - case_sensitive: Boolean indicating if the search should be case sensitive. - position: String specifying the position to search for the substring. Can be 'start', 'end', or 'anywhere'. Default is 'anywhere'. Returns: - List of strings that contain the specified substrings. def check_position(s, sub, pos): if pos == 'start': return s.startswith(sub) elif pos == 'end': return s.endswith(sub) else: return sub in s if not case_sensitive: substrings = [sub.lower() for sub in substrings] filtered_strings = [] for s in strings: s_to_check = s if case_sensitive else s.lower() if any(check_position(s_to_check, sub, position) for sub in substrings): filtered_strings.append(s) return filtered_strings"},{"question":"Create a function in Python that takes an integer input and returns the sum of the first n prime numbers. The function should handle cases where n is not a positive integer and return an appropriate error message. The function should also handle cases where n is a very large number (e.g. greater than 10^6) efficiently.","solution":"import math def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_first_n_primes(n): Returns the sum of the first n prime numbers. If n is not a positive integer, returns an appropriate error message. if not isinstance(n, int) or n <= 0: return \\"Error: Input must be a positive integer.\\" prime_count = 0 current_num = 2 prime_sum = 0 while prime_count < n: if is_prime(current_num): prime_sum += current_num prime_count += 1 current_num += 1 return prime_sum"},{"question":"Write a function that takes in two lists of integers and returns a new list that contains only the common elements between the two input lists, but the common elements should appear in the order that they appear in the first list. The input lists may contain duplicate elements, but the output list should not have any duplicates.","solution":"def common_elements(list1, list2): Returns the list of common elements between list1 and list2 in the order they appear in list1, without duplicates. common_set = set(list2) result = [] seen = set() for item in list1: if item in common_set and item not in seen: result.append(item) seen.add(item) return result"},{"question":"Create a code that sorts elements in an array, but the sort must be performed in ascending order without using any built-in sort functions. Additionally, the array may contain negative numbers and zeros.","solution":"def custom_sort(arr): Sorts the elements of the array in ascending order. for i in range(len(arr)): for j in range(0, len(arr) - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Create an algorithm that returns an array of the unique items in a given list, but now you are not allowed to use any built-in functions, data structures, or algorithms for removing duplicates. You must implement your own method for removing duplicates. Additionally, you must ensure that the algorithm has a time complexity of O(n), where n is the length of the input list.","solution":"def unique_items(lst): Returns a list of unique items in the given list without using any built-in functions, data structures, or algorithms for removing duplicates. item_count = {} for item in lst: if item not in item_count: item_count[item] = 1 unique_lst = [] for item in lst: if item_count[item] == 1: unique_lst.append(item) item_count[item] = 0 # ensures item is only added once return unique_lst"},{"question":"Write a program in python that removes duplicate elements from a list. The program should also be able to handle various data types (numbers, strings, etc.) and nested lists. Note that the orders of the elements should be preserved after removing the duplicates. Additionally, write the test cases to verify the correctness of your program.","solution":"def remove_duplicates(lst): Returns a new list with duplicates removed, preserving the order. Handles various data types, including nested lists. seen = set() result = [] for item in lst: tuple_item = tuple(item) if isinstance(item, list) else item if tuple_item not in seen: seen.add(tuple_item) result.append(item) return result"},{"question":"Create a Rock-Paper-Scissors game with Python. The game should allow two players to play against each other. Each player should have the option to choose between rock, paper, and scissors. The game should check if one of the players has won and announce the winner. If the game is a tie, the game should prompt the players to play again.","solution":"def determine_winner(player1_choice, player2_choice): Determines the winner between two players in rock-paper-scissors. :param player1_choice: str - Choice of player 1 ('rock', 'paper', or 'scissors') :param player2_choice: str - Choice of player 2 ('rock', 'paper', or 'scissors') :return: str - Result message if player1_choice == player2_choice: return \\"It's a tie! Play again.\\" elif (player1_choice == 'rock' and player2_choice == 'scissors') or (player1_choice == 'scissors' and player2_choice == 'paper') or (player1_choice == 'paper' and player2_choice == 'rock'): return \\"Player 1 wins!\\" else: return \\"Player 2 wins!\\""},{"question":"What is recursion in programming? Provide an example of a recursive function and explain its purpose.","solution":"def factorial(n): Returns the factorial of a given number n. if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"How do I find the Fibonacci sequence in a given list of numbers using Python?","solution":"def is_fibonacci(n): Helper function to check if a number is a Fibonacci number. if n < 0: return False # A number is a Fibonacci number if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square x1 = 5 * n * n + 4 x2 = 5 * n * n - 4 return is_perfect_square(x1) or is_perfect_square(x2) def is_perfect_square(x): Helper function to check if a number is a perfect square. s = int(x**0.5) return s * s == x def find_fibonacci_numbers(numbers): Returns a list of numbers from the given list that are Fibonacci numbers. return [n for n in numbers if is_fibonacci(n)]"},{"question":"Create a Python program that takes two lists as input and outputs a list that contains only the elements that appear in both lists. The program should also remove any duplicates from the resulting list.","solution":"def intersect_unique(list1, list2): Returns a list containing the unique elements that appear in both input lists. # Convert lists to sets to remove duplicates and find the intersection set1, set2 = set(list1), set(list2) intersection = set1.intersection(set2) # Convert the set back to a list return list(intersection)"},{"question":"Write a function in Python to format a given date according to the format \\"Day-Name, Month Name, Day, Year\\".","solution":"from datetime import datetime def format_date(date_str): Formats a given date string into \\"Day-Name, Month Name, Day, Year\\". Parameters: date_str (str): A date string in the format \\"YYYY-MM-DD\\". Returns: str: Formatted date string in the format \\"Day-Name, Month Name, Day, Year\\". date_obj = datetime.strptime(date_str, \\"%Y-%m-%d\\") formatted_date = date_obj.strftime(\\"%A, %B %d, %Y\\") return formatted_date"},{"question":"Write a Python function named \\"find_abs_difference\\" that takes two numbers as input and returns the absolute difference between them.","solution":"def find_abs_difference(a, b): Returns the absolute difference between two numbers a and b. return abs(a - b)"},{"question":"Show me a python function that given an integer n, returns the nth fibonacci number. Remember that the fibonacci sequence starts with 0 and 1, and every subsequent number is the sum of the previous two.","solution":"def fibonacci(n): Returns the nth fibonacci number. Parameters: n (int): The position in the fibonacci sequence. Returns: int: The nth fibonacci number. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to simulate a dice roll. The function should take in the number of sides on the dice, the number of dice being rolled, and the number of times the dice should be rolled. The function should return a list of the results of each roll. Additionally, the function should have a time complexity of O(n), where n is the number of times the dice are rolled.","solution":"import random def roll_dice(num_sides, num_dice, num_rolls): Simulates rolling a specified number of dice with a specified number of sides, a specified number of times. Parameters: num_sides (int): The number of sides on the dice. num_dice (int): The number of dice being rolled. num_rolls (int): The number of times the dice will be rolled. Returns: list: A list of the results of each roll. results = [] for _ in range(num_rolls): roll_sum = sum(random.randint(1, num_sides) for _ in range(num_dice)) results.append(roll_sum) return results"},{"question":"Given a list of integers, write a Python function to reverse the elements of the list and then remove the duplicates. Return the modified list.","solution":"def reverse_and_remove_duplicates(lst): Reverses the elements of the list and removes duplicates. Args: lst (list): A list of integers. Returns: list: A new list with the elements reversed and duplicates removed. seen = set() reversed_list = [] for item in reversed(lst): if item not in seen: seen.add(item) reversed_list.append(item) return reversed_list"},{"question":"Given a list of n integers and a specific target value, write a function in python to find two distinct elements in the list whose sum is equal to the target value. If there exist multiple pairs, return any one of them. If no such pair exists, return an empty list.","solution":"def find_pair_with_sum(nums, target): Given a list of integers and a target sum, returns a pair of distinct elements whose sum equals the target. Returns an empty list if no such pair exists. :param nums: List of integers :param target: Target sum :return: List containing a pair of integers or an empty list seen = {} for num in nums: complement = target - num if complement in seen: return [complement, num] seen[num] = True return []"},{"question":"Given a list of integers, implement a function \`max_sub_array_optimized\` that finds the contiguous subarray within the list (containing at least one number) which has the largest sum and return its sum. Your solution should have a time complexity of O(n) and a space complexity of O(1), where n is the length of the input list. Do not use the built-in Python \`max()\` function in your solution.","solution":"def max_sub_array_optimized(nums): Finds the contiguous subarray within nums which has the largest sum and returns its sum. Time complexity: O(n) Space complexity: O(1) if not nums: return 0 current_sum = nums[0] max_sum = nums[0] for num in nums[1:]: current_sum = max(current_sum + num, num) max_sum = max(current_sum, max_sum) return max_sum"},{"question":"Write a Python script that takes an input integer n, and prints the square of each number from 1 to n in ascending order.","solution":"def print_squares(n): Prints the square of each number from 1 to n in ascending order. for i in range(1, n + 1): print(i ** 2)"},{"question":"Write a Python script to find the prime factors of a number and display them in ascending order.","solution":"def prime_factors(n): Returns a list of prime factors of the given number n in ascending order. i = 2 factors = [] while i * i <= n: if n % i: i += 1 else: n //= i factors.append(i) if n > 1: factors.append(n) return factors"},{"question":"Write a function \`deserialize_dates\` that takes a dictionary \`data\` as input, where the values are strings representing dates in the format YYYY-MM-DDTHH:MM:SS (e.g., '1994-12-29T16:37:15'). The function should convert these string values into datetime objects and return the updated dictionary. The function should correctly handle incorrect data types and invalid date formats by skipping those entries and only updating the entries with valid date strings. For example, if the input dictionary is {'birthday': '1994-12-29T16:37:15', 'anniversary': '2001-05-20T09:35:42'}, the function should return a dictionary with datetime objects for these keys. If there are any entries with invalid data types or formats, they should be left unchanged in the returned dictionary.","solution":"from datetime import datetime def deserialize_dates(data): Converts string date representations in a dictionary to datetime objects. Parameters: data (dict): A dictionary where values are strings representing dates in the format YYYY-MM-DDTHH:MM:SS. Returns: dict: A dictionary with valid date strings converted to datetime objects. result = {} for key, value in data.items(): try: result[key] = datetime.strptime(value, '%Y-%m-%dT%H:%M:%S') except (ValueError, TypeError): result[key] = value return result"},{"question":"Write a python function that accepts an array of integers and returns the number of elements that are divisible by 5. Ensure the code is well-commented for clarity.","solution":"def count_divisible_by_5(arr): Returns the number of elements in the array that are divisible by 5. Parameters: arr (list): List of integers Returns: int: Number of elements divisible by 5 count = 0 for number in arr: if number % 5 == 0: count += 1 return count"},{"question":"Develop a function in Python that, given an input n, calculates the nth term of the Lucas series. The function should also manage exceptions for invalid input like negative numbers or non-integer data types. Incorporate memoization to optimize the function for large values of n.","solution":"def lucas(n, memo={0: 2, 1: 1}): Returns the nth term of the Lucas series. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") if n in memo: return memo[n] memo[n] = lucas(n - 1, memo) + lucas(n - 2, memo) return memo[n]"},{"question":"Given a string containing a binary number, write a Python function to find the positions of the first and last set bits in the binary string. The position should be calculated as from right to left with the right most position as 1. If the binary string does not contain any 1s, return a message indicating that no set bits were found.","solution":"def find_first_last_set_bits(binary_string): Returns the positions of the first and last set bits in the binary string, with positions calculated from right to left (rightmost position as 1). If no set bits are found, returns a message indicating that. if '1' not in binary_string: return \\"No set bits found\\" first_set_bit_position = len(binary_string) - binary_string.rfind('1') last_set_bit_position = len(binary_string) - binary_string.find('1') return first_set_bit_position, last_set_bit_position"},{"question":"Develop a Python function to compute the factorial of a provided integer using recursion. After you have defined this recursive function, create a second function to handle and guard against potential errors or exceptions such as (0, negative numbers, and non-integer inputs). This second function should call the recursive factorial function if the input is valid, and return an informative error message if it's not. Also, write test cases for both valid and invalid scenarios.","solution":"def recursive_factorial(n): Computes the factorial of a provided integer n using recursion. if n == 0 or n == 1: return 1 return n * recursive_factorial(n - 1) def safe_factorial(n): Validates the input and computes the factorial using recursion if valid. Returns an error message if the input is invalid. if not isinstance(n, int): return \\"Error: Input must be an integer.\\" elif n < 0: return \\"Error: Input must be a non-negative integer.\\" else: return recursive_factorial(n)"},{"question":"Given a 2D array of integers, write a function to print the elements in a spiral order. The function should traverse the array in a clockwise spiral starting from the top-left corner.","solution":"def spiral_order(matrix): Returns the elements of the 2D array in a spiral order. if not matrix: return [] result = [] while matrix: # Add the first row to result result += matrix.pop(0) # Add the last element of each remaining row if matrix and matrix[0]: for row in matrix: result.append(row.pop()) # Add the last row in reverse order if matrix: result += matrix.pop()[::-1] # Add the first element of each remaining row in reverse order if matrix and matrix[0]: for row in matrix[::-1]: result.append(row.pop(0)) return result"},{"question":"Develop a function in the Python programming language that accepts an input of a positive integer. This function's aim is to return a list that contains the mathematical square of every integer in the range from 1 up to the provided input number, inclusively. Sure, you can incorporate any preferred method for validating the input to ensure it's an integer and to confirm that it's a positive value.","solution":"def generate_squares(n): Returns a list containing the square of every integer from 1 to n (inclusive). n must be a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") return [i**2 for i in range(1, n+1)]"},{"question":"In Python programming language, construct a function that takes an array of strings as parameter and returns the strings that are palindromes and also have a length of more than 5 characters. Make sure the function is case-insensitive.","solution":"def filter_long_palindromes(strings): Filters and returns a list of strings that are palindromes and have a length greater than 5, case insensitive. Parameters: strings (list): List of strings to be filtered. Returns: list: List of strings that are palindromes and longer than 5 characters. result = [] for string in strings: normalized_string = string.lower() if len(normalized_string) > 5 and normalized_string == normalized_string[::-1]: result.append(string) return result"},{"question":"Create a Monte Carlo simulation using Python to estimate the value of Pi. Your simulation should take into account the convergence of the estimated value over a large number of iterations. Additionally, implement a function that calculates the error between the estimated value of Pi and the actual value of Pi (3.14159265359) and provide a graphical representation of how the error decreases as the number of iterations increases. Also, include a feature in your code that allows the user to adjust the number of random points used in the simulation to estimate Pi, and observe the effect on the accuracy of the estimation.","solution":"import random import matplotlib.pyplot as plt def monte_carlo_pi_simulation(num_points): Perform a Monte Carlo simulation to estimate the value of Pi. Args: num_points (int): The number of random points to generate. Returns: float: Estimated value of Pi. inside_circle = 0 for _ in range(num_points): x, y = random.uniform(0, 1), random.uniform(0, 1) if x ** 2 + y ** 2 <= 1: inside_circle += 1 pi_estimate = (inside_circle / num_points) * 4 return pi_estimate def error_between_estimates(estimated_pi, actual_pi=3.14159265359): Calculate the error between estimated Pi and the actual value of Pi. Args: estimated_pi (float): The estimated value of Pi. actual_pi (float): The actual value of Pi. Returns: float: The absolute error. return abs(estimated_pi - actual_pi) def plot_error_convergence(max_iterations, step=1000): Plot the error convergence of the Monte Carlo Pi simulation. Args: max_iterations (int): The maximum number of iterations for the simulation. step (int): The step size for each iteration range. actual_pi = 3.14159265359 errors = [] estimates = [] for i in range(step, max_iterations + 1, step): pi_estimate = monte_carlo_pi_simulation(i) estimates.append(pi_estimate) errors.append(error_between_estimates(pi_estimate, actual_pi)) plt.plot(range(step, max_iterations + 1, step), errors) plt.xlabel('Number of Random Points') plt.ylabel('Error') plt.title('Error Convergence in Monte Carlo Pi Simulation') plt.show() # Example usage: # plot_error_convergence(100000)"},{"question":"How would you implement a function in Python to remove duplicates from a given list, while preserving the order of the elements? Your solution should have a time complexity of O(n) and a space complexity of O(n), where n is the length of the input list.","solution":"def remove_duplicates(input_list): Removes duplicates from the given list while preserving the order of elements. :param input_list: List of elements that may contain duplicates. :return: A list with duplicates removed, preserving the original order. seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a code to remove duplicates from a given list, while preserving the order of the elements. The code should have a time complexity of O(n), where n is the length of the input list.","solution":"def remove_duplicates(lst): Remove duplicates from the list while preserving the order of elements. seen = set() result = [] for item in lst: if item not in seen: result.append(item) seen.add(item) return result"},{"question":"Design a program to detect an infinite loop in a given program, without using any loops or recursion. Additionally, provide an erroneous code snippet that may initially misdirect the reader and make the detection of the infinite loop more challenging.","solution":"def detect_infinite_loop(code_snippet): Analyzes the given code snippet to detect an infinite loop. # Keywords/pattern indicating potential infinite loops potential_loops = [\\"while True:\\", \\"while(1):\\"] # Check if any of the potential loop patterns exist in the snippet for pattern in potential_loops: if pattern in code_snippet: return True # Infinite loop detected return False # No infinite loop detected"},{"question":"Determine the quantile function of an exponential distribution and write a Python function to implement this. Furthermore debug the following erroneous code used to generate quantile from an exponential distribution.","solution":"import math def exponential_quantile(p, lambda_): Computes the quantile function for an exponential distribution. Parameters: - p: Probability value (0 <= p < 1) - lambda_: Rate parameter (lambda > 0) Returns: - The quantile (inverse CDF) for the given p if not (0 <= p < 1): raise ValueError(\\"p must be in the range [0, 1)\\") if lambda_ <= 0: raise ValueError(\\"lambda must be greater than 0\\") return -math.log(1 - p) / lambda_"},{"question":"Create a Python function named \`rotate_right\` that takes a sequence (list or string) and an integer \`n\` as input. The function should return a new sequence of the same type with its elements rotated to the right by n positions, with n being the length of the sequence if n exceeds its length.","solution":"def rotate_right(sequence, n): Rotates the elements of the sequence to the right by n positions. If n exceeds the length of the sequence, it uses n % len(sequence). Args: sequence (list or string): The sequence to be rotated. n (int): Number of positions to rotate the sequence. Returns: list or string: The rotated sequence. if not sequence: return sequence length = len(sequence) n = n % length # Ensure n is within the bounds of the sequence length return sequence[-n:] + sequence[:-n]"},{"question":"Write a function in Python to find the kth smallest element in an unsorted list of integers. Now, implement this using the QuickSelect algorithm without sorting the entire list.","solution":"def quick_select(arr, k): Returns the kth smallest element in the list arr using the QuickSelect algorithm. if k < 1 or k > len(arr): raise ValueError(\\"k is out of bounds\\") def partition(left, right, pivot_index): pivot_value = arr[pivot_index] arr[pivot_index], arr[right] = arr[right], arr[pivot_index] store_index = left for i in range(left, right): if arr[i] < pivot_value: arr[i], arr[store_index] = arr[store_index], arr[i] store_index += 1 arr[right], arr[store_index] = arr[store_index], arr[right] return store_index left = 0 right = len(arr) - 1 while left <= right: pivot_index = (left + right) // 2 pivot_index = partition(left, right, pivot_index) if pivot_index == k - 1: return arr[pivot_index] elif pivot_index < k - 1: left = pivot_index + 1 else: right = pivot_index - 1"},{"question":"Write a recursive function in Python to calculate the factorial of a given number, but you are not allowed to use any loops or the multiplication operator in your solution.","solution":"def add(a, b): Adds two numbers without using the + operator. while b: carry = a & b a = a ^ b b = carry << 1 return a def factorial(n): Returns the factorial of a given number n using recursion, without using any loops or the multiplication operator. if n == 0 or n == 1: return 1 def multiply(a, b): Multiplies two numbers without using the * operator. result = 0 for _ in range(0, b): result = add(result, a) return result return multiply(n, factorial(n - 1))"},{"question":"The following code calculates the factorial of a number using recursion. Add a constraint that the input number should be a non-negative integer and less than 10. Then, modify the code to add error handling that will return None for invalid inputs.","solution":"def factorial(n): Returns the factorial of a non-negative integer n, if n is less than 10. For invalid inputs (negative integers or integers greater than or equal to 10), it returns None. if not isinstance(n, int) or n < 0 or n >= 10: return None if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Given the input list of integers, write a function to find the maximum element in the list. However, you are not allowed to use any built-in sorting functions or any linear scan algorithm to solve this problem. Instead, you need to implement a divide-and-conquer algorithm using a binary tree structure for finding the maximum element.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(nums, start, end): if start > end: return None mid = (start + end) // 2 node = TreeNode(nums[mid]) node.left = build_tree(nums, start, mid - 1) node.right = build_tree(nums, mid + 1, end) return node def find_max_in_tree(node): if not node: return float('-inf') left_max = find_max_in_tree(node.left) right_max = find_max_in_tree(node.right) return max(node.value, left_max, right_max) def find_max(nums): if not nums: raise ValueError(\\"The input list is empty\\") nums.sort() # Sorting the array first to create a balanced binary search tree root = build_tree(nums, 0, len(nums) - 1) return find_max_in_tree(root)"},{"question":"Write a python function to find the longest palindromic substring in a given string. The function should have a time complexity of O(n^2) and a space complexity of O(1). The function should not use any built-in functions or libraries that directly solve the problem. Additionally, the function should handle cases where the input string contains special characters and numbers, while also considering both uppercase and lowercase letters as distinct characters.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. Time complexity: O(n^2) Space complexity: O(1) if not s: return \\"\\" start, end = 0, 0 def expand_from_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(len(s)): l1, r1 = expand_from_center(s, i, i) l2, r2 = expand_from_center(s, i, i + 1) if r1 - l1 > end - start: start, end = l1, r1 if r2 - l2 > end - start: start, end = l2, r2 return s[start:end + 1]"},{"question":"Write a python function to split a string into a list of substrings, removing redundant delimiters. The delimiter for the split operation will be given as input.","solution":"def split_string(s, delimiter): Splits the input string \`s\` into a list of substrings based on the given \`delimiter\`, and removes redundant delimiters. return [substr for substr in s.split(delimiter) if substr]"},{"question":"In Python, write a function that takes a pair of sentences and determines if they are anagrams of each other when punctuations, spaces, letter cases are disregarded, and words are ordered alphabetically. Furthermore, consider an additional condition - if the sentences contain identical sequences of unique words, they should be deemed as anagrams too. For instance, the sentences, \\"The wolf is at the door!\\" and \\"The door is at the wolf.\\" are not only anagrams but also contain the same sequence of unique words. However, \\"This is fun.\\" and \\"Is this not fun?\\" are only anagrams as they contain the same words in different sequences.","solution":"import string def clean_sentence(sentence): Removes punctuation, converts to lowercase, and sorts the words. # Remove punctuation translator = str.maketrans('', '', string.punctuation) cleaned_sentence = sentence.translate(translator) # Convert to lowercase and split into words words = cleaned_sentence.lower().split() # Sort words alphabetically words.sort() return words def are_anagrams(seq_1, seq_2): Returns True if two sequences are anagrams of each other while ignoring punctuation, spaces, and letter cases. Additionally, considers sequences with identical unique words as anagrams too. cleaned_seq_1 = clean_sentence(seq_1) cleaned_seq_2 = clean_sentence(seq_2) return cleaned_seq_1 == cleaned_seq_2"},{"question":"Explain how you can implement a basic neural network using NumPy and what are some of the challenges you might face in the process. Implementing a basic neural network using NumPy would involve various steps, including initializing parameters, defining the model architecture, forward propagation, loss function, backward propagation, and updating parameters.","solution":"import numpy as np def sigmoid(Z): return 1 / (1 + np.exp(-Z)) def sigmoid_derivative(Z): return Z * (1 - Z) def initialize_parameters(layers_dims): np.random.seed(1) parameters = {} for l in range(1, len(layers_dims)): parameters['W' + str(l)] = np.random.randn(layers_dims[l], layers_dims[l-1]) * 0.01 parameters['b' + str(l)] = np.zeros((layers_dims[l], 1)) return parameters def forward_propagation(X, parameters): cache = {'A0': X} L = len(parameters) // 2 for l in range(1, L + 1): Z = np.dot(parameters['W' + str(l)], cache['A' + str(l-1)]) + parameters['b' + str(l)] A = sigmoid(Z) cache['Z' + str(l)] = Z cache['A' + str(l)] = A return A, cache def compute_cost(A_last, Y): m = Y.shape[1] cost = -(1 / m) * np.sum(Y * np.log(A_last) + (1 - Y) * np.log(1 - A_last)) cost = np.squeeze(cost) return cost def backward_propagation(parameters, cache, X, Y): grads = {} L = len(parameters) // 2 m = X.shape[1] A_last = cache['A' + str(L)] dA = - (np.divide(Y, A_last) - np.divide(1 - Y, 1 - A_last)) for l in reversed(range(1, L + 1)): dZ = dA * sigmoid_derivative(cache['A' + str(l)]) dW = (1 / m) * np.dot(dZ, cache['A' + str(l-1)].T) db = (1 / m) * np.sum(dZ, axis=1, keepdims=True) dA = np.dot(parameters['W' + str(l)].T, dZ) grads['dW' + str(l)] = dW grads['db' + str(l)] = db return grads def update_parameters(parameters, grads, learning_rate): L = len(parameters) // 2 for l in range(1, L + 1): parameters['W' + str(l)] = parameters['W' + str(l)] - learning_rate * grads['dW' + str(l)] parameters['b' + str(l)] = parameters['b' + str(l)] - learning_rate * grads['db' + str(l)] return parameters def nn_model(X, Y, layers_dims, learning_rate=0.01, num_iterations=10000): parameters = initialize_parameters(layers_dims) for i in range(num_iterations): A_last, cache = forward_propagation(X, parameters) cost = compute_cost(A_last, Y) grads = backward_propagation(parameters, cache, X, Y) parameters = update_parameters(parameters, grads, learning_rate) if i % 1000 == 0: print(f\\"Cost after iteration {i}: {cost}\\") return parameters def predict(X, parameters): A_last, _ = forward_propagation(X, parameters) predictions = (A_last > 0.5).astype(int) return predictions"},{"question":"Using Python and Matplotlib, write a function that generates a 2D scatter plot with error bars for given data x, y, and error values yerr. Also ensure the plot includes title, labels, a legend, and gridlines. Optionally save the plot to a file instead of showing it.","solution":"import matplotlib.pyplot as plt def scatter_plot_with_error(x, y, yerr, title=\\"Scatter Plot with Error Bars\\", xlabel=\\"X-axis\\", ylabel=\\"Y-axis\\", legend_label=\\"Data\\", grid=True, save_to_file=None): Generates a 2D scatter plot with error bars. Parameters: x (list or array-like): Data for the x-axis. y (list or array-like): Data for the y-axis. yerr (list or array-like): Error values for the y-axis. title (str): The title of the plot. xlabel (str): The label of the x-axis. ylabel (str): The label of the y-axis. legend_label (str): Label for the legend. grid (bool): Whether to display gridlines. save_to_file (str, optional): If provided, save the plot to this file path. plt.figure(figsize=(10, 6)) plt.errorbar(x, y, yerr=yerr, fmt='o', label=legend_label, ecolor='red', capsize=5) plt.title(title) plt.xlabel(xlabel) plt.ylabel(ylabel) plt.legend() if grid: plt.grid(True) if save_to_file: plt.savefig(save_to_file) else: plt.show()"},{"question":"Write a Python function that counts the number of times a target value appears in a list. However, this function should handle not only flat lists but also lists that contain nested lists. So, if the function is passed a list like [3, [5, 3, [2, 3]], 4], and the target is 3, it should return 3, as the value 3 appears three times in the list.","solution":"def count_target_in_list(lst, target): Counts the number of times the target value appears in a nested list. Args: - lst: The input list, which might contain nested lists. - target: The value to count in the list. Returns: - int: The count of occurrences of the target in the list. count = 0 for item in lst: if isinstance(item, list): count += count_target_in_list(item, target) elif item == target: count += 1 return count"},{"question":"Write a Python function that accepts two arguments, the first is a list of names and the second is a target prefix. The function should return a list containing names that start with that target prefix.","solution":"def filter_names_by_prefix(names, prefix): Returns a list of names that start with the given prefix. Parameters: names (list of str): The list of names to filter. prefix (str): The prefix to filter names by. Returns: list of str: The list of names that start with the prefix. return [name for name in names if name.startswith(prefix)]"},{"question":"Write a Python function \`concat_lists(lists)\` that takes in n lists as input and returns a single list that is the concatenation of all the input lists. The function should handle an arbitrary number of lists and work efficiently even when the total number of elements across all lists is very large.","solution":"def concat_lists(*lists): Concatenates all input lists into a single list. Args: *lists: Arbitrary number of lists to concatenate. Returns: A single concatenated list. concatenated_list = [] for lst in lists: concatenated_list.extend(lst) return concatenated_list"},{"question":"Create a Python function that takes a string as input and returns a dictionary where the keys are the lowercase letters of the string and the values are the counts of each letter.","solution":"def count_letters(s): Takes a string as input and returns a dictionary where the keys are the lowercase letters of the string and the values are the counts of each letter. result = {} for char in s.lower(): if char.isalpha(): if char in result: result[char] += 1 else: result[char] = 1 return result"},{"question":"Create an algorithm to find the k most common elements in an array of integers, where k is a given integer. However, you are not allowed to use any additional data structures such as hash maps or sets to store intermediate results. You can only use basic data types and operations on the array itself.","solution":"def k_most_frequent_elements(arr, k): Returns the k most frequent elements in the array. if k == 0 or not arr: return [] # Sort array to bring duplicates together arr.sort() # Count frequencies using basic data types freq_list = [] current_element = arr[0] count = 1 for i in range(1, len(arr)): if arr[i] == current_element: count += 1 else: freq_list.append((count, current_element)) current_element = arr[i] count = 1 # Append last element's frequency freq_list.append((count, current_element)) # Sort frequencies in descending order freq_list.sort(reverse=True, key=lambda x: x[0]) # Collect the top k elements top_k_elements = [element for count, element in freq_list[:k]] return top_k_elements"},{"question":"Create a for-loop in Python that iterates through a list of numbers and prints out only the prime numbers in the list that are divisible by 7, without any remainders. The list should contain at least 10000 elements.","solution":"def is_prime(n): Helper function to check if a given number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def print_primes_divisible_by_7(num_list): Iterate through a list of numbers and print the prime numbers that are divisible by 7. :param num_list: List of integers for num in num_list: if num % 7 == 0 and is_prime(num): print(num)"},{"question":"Create a Python function that accepts two arguments: a list of integers and a target integer. The function should return the indices of the target integer within the list. If the target integer is not found, return an empty list. List doesn't contain duplicated elements.","solution":"def find_indices(int_list, target): Returns the indices of the target integer within the list. If the target integer is not found, returns an empty list. return [index for index, value in enumerate(int_list) if value == target]"},{"question":"Write the Python code to rotate a 2D list of integers by 90 degrees clockwise in place.","solution":"def rotate_90_degrees_clockwise(matrix): Rotates a given 2D list of integers by 90 degrees clockwise in place. Args: matrix (list of list of int): A 2D list of integers to be rotated. Returns: None: The function modifies the matrix in place, no return value. n = len(matrix) # First, transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Second, reverse each row for row in matrix: row.reverse()"},{"question":"Develop a Python function that identifies and lists every prime number up to a specified number, here denoted as 'n'. For context, a prime number is a natural number greater than 1 that is not the product of two smaller natural numbers. To illustrate, execute this function with 'n' being 20.","solution":"def get_primes_up_to_n(n): Returns a list of all prime numbers up to a specified number 'n' (inclusive). if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"How can I extract all possible combinations of continuous subsequences of a specific length from a given list in Python? Additionally, I want to store these combinations in a new list without any duplication. For example, if I have a list [1, 2, 3, 4] and I want subsequences of length 3, I should get [[1, 2, 3], [2, 3, 4]].","solution":"def get_continuous_subsequences(lst, k): Extracts all possible combinations of continuous subsequences of length \`k\` from the given list \`lst\`. Parameters: lst (list): The input list from which to extract subsequences. k (int): The length of each subsequence. Returns: list: A list containing all the continuous subsequences of length \`k\`. subsequences = [] n = len(lst) for i in range(n - k + 1): subsequence = lst[i:i + k] if subsequence not in subsequences: subsequences.append(subsequence) return subsequences"},{"question":"Develop a Python function to calculate the area of a rectangular surface using user-provided values for length and width. Additionally, implement error handling to ensure the inputs are positive numbers.","solution":"def calculate_area(length, width): Calculate the area of a rectangular surface with given length and width. :param length: Length of the rectangle, should be a positive number. :param width: Width of the rectangle, should be a positive number. :return: Area of the rectangle. if not (isinstance(length, (int, float)) and isinstance(width, (int, float))): raise TypeError(\\"Both length and width must be numbers.\\") if length <= 0 or width <= 0: raise ValueError(\\"Both length and width must be positive numbers.\\") return length * width"},{"question":"What is the code to find the length of the longest palindromic substring in a given string using a bottom-up dynamic programming approach?","solution":"def longest_palindromic_substring(s): n = len(s) if n == 0: return 0 dp = [[False for _ in range(n)] for _ in range(n)] max_length = 1 for i in range(n): dp[i][i] = True start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if k > max_length: start = i max_length = k return max_length"},{"question":"Write a Python function that counts the number of characters in a given string, and test it with various inputs including an empty string, strings with whitespaces, special characters, and non-Latin characters.","solution":"def count_characters(s): Returns the count of characters in the string s. return len(s)"},{"question":"Implement a function in Python that can perform Quicksort on a given array. The function should take in an array as an argument and return the sorted array.","solution":"def quicksort(arr): Perform Quicksort on the given array. Parameters: arr (list): The input array to be sorted. Returns: list: The sorted array. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a Python program to find the Nth Lucas number, where the value of N should be provided as an input by the user. Please make sure to define the function using recursion and include a check to validate the correctness of your solution against provided data points.","solution":"def lucas_number(n): Returns the Nth Lucas number using recursion. if n == 0: return 2 elif n == 1: return 1 else: return lucas_number(n - 1) + lucas_number(n - 2)"},{"question":"Given a list of numbers, write a Python program to find the second highest element in the list. However, you are not allowed to use the built-in functions \`max()\`, \`sorted()\`, or any external libraries. Additionally, you must solve this problem using only a single loop and without using any additional data structures.","solution":"def second_highest(numbers): Returns the second highest element in the list of numbers. If the list has fewer than 2 unique elements, returns None. if len(numbers) < 2: return None first_highest = float('-inf') second_highest = float('-inf') for num in numbers: if num > first_highest: second_highest = first_highest first_highest = num elif num > second_highest and num != first_highest: second_highest = num return second_highest if second_highest != float('-inf') else None"},{"question":"Write a Python function that implements a Merge Sort algorithm on a given array of numbers. Your solution should include error handling for non-array inputs and you should explain the time complexity of your algorithm.","solution":"def merge_sort(arr): Implements the Merge Sort algorithm to sort a given array of numbers. Parameters: arr (list): A list of numbers to sort. Returns: list: A sorted list of numbers. Raises: TypeError: If the input is not a list. Time Complexity: O(n log n), where n is the number of elements in the input list. # Error handling for non-array inputs if not isinstance(arr, list): raise TypeError(\\"Input must be a list\\") # If the array is of length 0 or 1, it's already sorted if len(arr) <= 1: return arr def merge(left, right): Helper function to merge two sorted lists. merged = [] left_idx, right_idx = 0, 0 while left_idx < len(left) and right_idx < len(right): if left[left_idx] < right[right_idx]: merged.append(left[left_idx]) left_idx += 1 else: merged.append(right[right_idx]) right_idx += 1 # When we run out of elements in either left or right, we append the remainder. merged.extend(left[left_idx:]) merged.extend(right[right_idx:]) return merged # Splitting the array into two halves and recursively sorting each half mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) # Merging the sorted halves return merge(left_half, right_half)"},{"question":"Write a Python program to divide two positive integers, handling division by zero and ensuring the result is a float. Also, include a simple user interface to input the two numbers.","solution":"def divide(a, b): Returns the division of a by b as a float. If b is zero, raise a ValueError. if b == 0: raise ValueError(\\"Cannot divide by zero.\\") return a / b if __name__ == \\"__main__\\": try: a = int(input(\\"Enter the first positive integer: \\")) b = int(input(\\"Enter the second positive integer: \\")) result = divide(a, b) print(f\\"The result of dividing {a} by {b} is {result}\\") except ValueError as e: print(e)"},{"question":"Design a Python function snippet to Display High Clothing cleanliness: Laundry Basics for Analysis for Experts. Implement if/else or switch/case statements to handle different conditions related to the Safety. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def display_clothing_cleanliness(cleanliness_score): Display the level of clothing cleanliness based on a score. Parameters: - cleanliness_score (int): An integer score indicating the level of cleanliness. Returns: - str: A string message corresponding to the level of cleaning required. if cleanliness_score >= 90: message = \\"Clothing is in excellent condition! Minimal cleaning required.\\" elif 70 <= cleanliness_score < 90: message = \\"Clothing is in good condition. Light cleaning recommended.\\" elif 50 <= cleanliness_score < 70: message = \\"Clothing is in fair condition. Regular cleaning needed.\\" elif 30 <= cleanliness_score < 50: message = \\"Clothing is in poor condition. Thorough cleaning needed.\\" else: message = \\"Clothing is in critical condition! Immediate and intense cleaning required.\\" return message"},{"question":"Implement a version of the quicksort algorithm in Python that sorts an array of strings based on their lexicographical order. Also, make sure your function handles not only valid string arrays, but also edge cases like None or any non-string type values.","solution":"def quicksort(arr): Sorts an array of strings in lexicographical order using the quicksort algorithm. if arr is None or not all(isinstance(i, str) for i in arr): raise ValueError(\\"Input should be a list of strings.\\") if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Develop a Python programming snippet that constructs a function designed to compute the summation of the digits of a particular integer number. In addition, the function should be able to handle negative numbers by converting them to positive before summing the digits. Also, implement error handling to ensure that the input is a numeric type (integers or floats are accepted, but not strings). If a non-numeric type is given as argument, the function should return an error message: \\"Invalid input type\\".","solution":"def sum_of_digits(num): Returns the summation of the digits of a given integer or float number. Converts negative numbers to positive before summing the digits. Returns an error message for non-numeric inputs. if not isinstance(num, (int, float)): return \\"Invalid input type\\" num = abs(num) num_str = str(num).replace('.', '') # Remove decimal point for floats return sum(int(digit) for digit in num_str)"},{"question":"Given two strings, s1, and s2, write a program to check if s2 is a rotation of s1 using only one call to isSubstring function.","solution":"def is_rotation(s1, s2): Returns True if s2 is a rotation of s1, otherwise returns False. if len(s1) != len(s2): return False return is_substring(s1 + s1, s2) def is_substring(s1, s2): Checks if s2 is a substring of s1. return s2 in s1"},{"question":"Write a Python program that calculates the area and perimeter of a triangle given the lengths of its three sides. The program should also check if the given sides can form a valid triangle. If not, it should print an error message.","solution":"import math def is_valid_triangle(a, b, c): Check if sides a, b, c can form a valid triangle. return a + b > c and a + c > b and b + c > a def triangle_area(a, b, c): Calculate the area of a triangle with sides a, b, c using Heron's formula. s = (a + b + c) / 2 return math.sqrt(s * (s - a) * (s - b) * (s - c)) def triangle_perimeter(a, b, c): Calculate the perimeter of a triangle with sides a, b, c. return a + b + c def triangle_properties(a, b, c): Return the area and perimeter of the triangle if the sides are valid. Return an error message otherwise. if is_valid_triangle(a, b, c): area = triangle_area(a, b, c) perimeter = triangle_perimeter(a, b, c) return { \\"area\\": area, \\"perimeter\\": perimeter } else: return \\"Error: the sides do not form a valid triangle.\\""},{"question":"Write a function that takes in an array of integers and returns a new array with all elements greater than 5 incremented by 1, all elements less than -5 decremented by 1, and all other elements left unchanged. The function should also handle empty arrays by returning an empty array. If the input array contains any non-integer values, the function should raise a ValueError with the message \\"Input array contains non-integer values\\". Additionally, the function should only use a single loop to iterate through the input array, and should not use any built-in array manipulation functions such as map, filter, or reduce.","solution":"def adjust_elements(arr): Adjusts elements of the array based on given conditions. Elements greater than 5 are incremented by 1. Elements less than -5 are decremented by 1. All other elements remain unchanged. An empty array returns an empty array. Parameters: arr (list): A list of integers. Returns: list: A new list with adjusted elements. Raises: ValueError: If the input array contains non-integer values. if any(not isinstance(item, int) for item in arr): raise ValueError(\\"Input array contains non-integer values\\") result = [] for num in arr: if num > 5: result.append(num + 1) elif num < -5: result.append(num - 1) else: result.append(num) return result"},{"question":"Develop a Python function which, provided with a specific number as an argument, will systematically eliminate all even integers from a list ranging from 1 up to that number, and then return the remaining list of odd integers only.","solution":"def remove_evens(n): Returns a list of odd integers from 1 to n (inclusive). Args: n: An integer up to which the odd integers are to be listed. Returns: List of odd integers from 1 to n. return [i for i in range(1, n + 1) if i % 2 != 0]"},{"question":"Create a magic method for a python class that calculates the volume of a regular tetrahedron, if the lengths of its edges are given as input. Make sure to handle potential exceptions or errors that might arise from incorrect inputs, such as non-numerical input or negative numbers. You also need to validate whether the given lengths form a regular tetrahedron. For reference, a similar problem is solved here: https://www.geeksforgeeks.org/python-program-to-find-volume-of-pyramid/.","solution":"import math class Tetrahedron: def __init__(self, edge_length): if not isinstance(edge_length, (int, float)): raise ValueError(\\"Edge length must be a number.\\") if edge_length <= 0: raise ValueError(\\"Edge length must be a positive number.\\") self.edge_length = edge_length def volume(self): volume = self.edge_length ** 3 * math.sqrt(2) / 12 return volume"},{"question":"Can you create a Flask route for handling REST requests in Python to add a new car to a database? The route should also include input validation to check for missing or invalid data and return appropriate error messages. Additionally, the route should only allow authorized users to add a new car by checking for a valid API key in the request headers.","solution":"from flask import Flask, request, jsonify, abort import re app = Flask(__name__) # A mock in-memory database db = [] VALID_API_KEY = \\"your_valid_api_key\\" def validate_input(data): required_fields = [\\"make\\", \\"model\\", \\"year\\", \\"price\\"] for field in required_fields: if field not in data: return f\\"Missing required field: {field}\\", False if not isinstance(data['year'], int) or data['year'] < 1885 or data['year'] > 2023: return \\"Invalid 'year'. It should be an integer between 1885 and 2023.\\", False if not isinstance(data['price'], (int, float)) or data['price'] < 0: return \\"Invalid 'price'. It should be a non-negative number.\\", False return \\"All inputs are valid\\", True @app.route('/add_car', methods=['POST']) def add_car(): api_key = request.headers.get('API-Key') if api_key != VALID_API_KEY: return jsonify({\\"error\\": \\"Unauthorized access\\"}), 403 data = request.get_json() if not data: return jsonify({\\"error\\": \\"Request must be JSON\\"}), 400 message, valid = validate_input(data) if not valid: return jsonify({\\"error\\": message}), 400 db.append(data) return jsonify({\\"message\\": \\"Car successfully added\\", \\"car\\": data}), 201 if __name__ == '__main__': app.run()"},{"question":"Given an array of integers, write a python function to find and print the sum of all the contiguous subarrays with zero sum.","solution":"def sum_of_zero_sum_subarrays(arr): Returns the sum of all contiguous subarrays with a zero sum in the given array. n = len(arr) sum_zero_subarrays = 0 for i in range(n): for j in range(i, n): if sum(arr[i:j+1]) == 0: sum_zero_subarrays += sum(arr[i:j+1]) return sum_zero_subarrays"},{"question":"Write a Python method to determine if a string contains all unique characters. Additionally, if the string does not contain all unique characters, return the first recurring character.","solution":"def check_unique_characters(s): Checks if the string contains all unique characters. If not, returns the first recurring character. seen = set() for char in s: if char in seen: return char seen.add(char) return True"},{"question":"Write a Python program to resolve a mathematical expression given in a string format. The expression can include parentheses, plus, minus, multiply, divide and power operations.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression given in a string format. The expression can include parentheses, plus, minus, multiply, divide and power operations. try: result = eval(expression) return result except Exception as e: return str(e)"},{"question":"Create a Python function that calculates the mean absolute error (MAE) between two lists of numbers (predicted and actual).","solution":"def mean_absolute_error(predicted, actual): Calculate the mean absolute error between two lists. :param predicted: List of predicted values. :param actual: List of actual values. :return: The mean absolute error. if len(predicted) != len(actual): raise ValueError(\\"The lengths of predicted and actual lists must be the same.\\") total_error = 0.0 for p, a in zip(predicted, actual): total_error += abs(p - a) return total_error / len(predicted)"},{"question":"I've just started learning the basics of Python programming, and I'm familiar with writing print statements and basic data types. I've also learned about for loops and while loops, but I'm curious about generators and their practical applications in Python. Could you give me an introduction to generators and how they are used in Python, with maybe a couple of examples?","solution":"def number_generator(n): Yields numbers from 0 to n-1. for i in range(n): yield i def fibonacci_sequence(limit): Generates Fibonacci numbers up to the given limit. a, b = 0, 1 while a < limit: yield a a, b = b, a + b"},{"question":"Given the list of numbers [1,2,3,4,5,6,7,8,9,10], write a function in Python to return every second element starting from the first element. Also, ensure your function can take a step parameter that could change the item's frequency in the array to return, and manage error exceptions.","solution":"def get_elements(lst, step=2): Returns every second element starting from the first element by default. Allows for custom step sizes. Args: - lst: List of numbers to process. - step: Frequency of elements to return (default 2). Returns: - List of elements with the specified step. if not isinstance(lst, list): raise TypeError(\\"The first argument must be a list.\\") if not all(isinstance(x, (int, float)) for x in lst): raise ValueError(\\"All elements in the list must be numbers.\\") if not isinstance(step, int) or step <= 0: raise ValueError(\\"The step must be a positive integer.\\") return lst[::step]"},{"question":"As a music lover, I want to create a jukebox program for my party. I have a playlist of 100 songs, but I want to shuffle the order based on certain criteria. Can you help me write a Python program that allows me to filter the songs by genre, artist, or decade and then shuffle the remaining songs randomly? Additionally, I want to be able to input a \\"vibe level\\" which will only play songs with a matching energy level. The program should display the shuffled list and allow me to add or remove songs from the final playlist. Finally, it should suggest three new songs based on the filtering criteria and vibe level that I can add to the playlist if I choose.","solution":"import random class Song: def __init__(self, title, artist, genre, decade, vibe): self.title = title self.artist = artist self.genre = genre self.decade = decade self.vibe = vibe def __repr__(self): return f\\"{self.title} by {self.artist}\\" class Jukebox: def __init__(self, songs): self.songs = songs def filter_songs(self, genre=None, artist=None, decade=None, vibe=None): filtered_songs = self.songs if genre: filtered_songs = [song for song in filtered_songs if song.genre == genre] if artist: filtered_songs = [song for song in filtered_songs if song.artist == artist] if decade: filtered_songs = [song for song in filtered_songs if song.decade == decade] if vibe: filtered_songs = [song for song in filtered_songs if song.vibe == vibe] return filtered_songs def shuffle_songs(self, genre=None, artist=None, decade=None, vibe=None): filtered_songs = self.filter_songs(genre, artist, decade, vibe) random.shuffle(filtered_songs) return filtered_songs def add_song(self, song): self.songs.append(song) def remove_song(self, song): self.songs.remove(song) def suggest_songs(self, genre=None, artist=None, decade=None, vibe=None): filtered_songs = self.filter_songs(genre, artist, decade, vibe) new_suggestions = random.sample(filtered_songs, min(3, len(filtered_songs))) return new_suggestions"},{"question":"Can you write a Python program that takes a number as input from the user and checks if it is a prime number or not?","solution":"def is_prime(num): Determines if a given number is prime. Args: num (int): The number to check. Returns: bool: True if the number is prime, False otherwise. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True"},{"question":"Given a positive integer n, write a recursive function to compute the n-th Fibonacci number. Assume you have a function to add two integers.","solution":"def add(a, b): Returns the sum of a and b. return a + b def fibonacci(n): Returns the n-th Fibonacci number using recursion. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: return add(fibonacci(n-1), fibonacci(n-2))"},{"question":"You have been given a list of integers. Write a Python program that prints the sum of the elements in the list and also returns the sum. As an added complexity, the list may contain not only integers but also other lists (nested lists) of integers. Ensure your program can handle these nested lists and calculate the total sum of all integers, including those in nested lists.","solution":"def nested_list_sum(lst): Returns the sum of all elements in the list, including nested lists. total = 0 for element in lst: if isinstance(element, list): total += nested_list_sum(element) else: total += element print(total) return total # Example Usage # nested_list_sum([1, 2, [3, 4, [5]], 6])"},{"question":"What do you think of tuple unpacking in Python and how can it be used in a function argument list?","solution":"def calculate(a, b, c): Returns a tuple containing the sum, difference, and product of the three arguments. return (a + b + c, a - b - c, a * b * c) def calculate_with_tuple(input_tuple): Unpacks a tuple and passes the values to the calculate function. return calculate(*input_tuple)"},{"question":"Implement the decorator pattern in Python3, but instead of using the typical Python syntax for decorators, create a more verbose, manual function and class-based implementation that achieves the same goal. Also, include an example of its usage in your solution.","solution":"class Decorator: def __init__(self, func): self.func = func def __call__(self, *args, **kwargs): print(\\"Before function execution\\") result = self.func(*args, **kwargs) print(\\"After function execution\\") return result def my_function(x, y): return x + y # Applying the decorator manually decorated_function = Decorator(my_function) # Example usage result = decorated_function(3, 4) # Should print the before and after messages and return 7 print(result)"},{"question":"Create a function called \\"multiply_dict_values\\" that takes in a dictionary as input and returns a new dictionary where the keys are multiplied by their respective values in the input dictionary. However, if the input is not a dictionary or if any of the keys or values are not numeric, the function should raise a TypeError.","solution":"def multiply_dict_values(input_dict): Multiplies the keys by their respective values in the input dictionary. Raises a TypeError if the input is not a dictionary or any key/value is not numeric. Args: input_dict (dict): The dictionary to process. Returns: dict: A new dictionary with keys multiplied by their values. if not isinstance(input_dict, dict): raise TypeError(\\"Input must be a dictionary\\") output_dict = {} for key, value in input_dict.items(): if not isinstance(key, (int, float)) or not isinstance(value, (int, float)): raise TypeError(\\"Both keys and values must be numeric\\") output_dict[key] = key * value return output_dict"},{"question":"Write a Python code that finds all prime numbers within a given range [a, b] inclusively. For an extra challenge, assume that the range is very large (up to 10^7). This will require your program to have efficient performance in terms of time and memory usage. Make sure to consider the conditions where a > b or where either a or b are not integers.","solution":"def find_primes_in_range(a, b): Returns a list of all prime numbers in the range [a, b] inclusively. import math # Handle cases where input values are not integers or a > b if not isinstance(a, int) or not isinstance(b, int) or a > b: return [] # Sieve of Eratosthenes for large range def sieve(n): is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(math.sqrt(n)) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return is_prime # Edge case if a < 2: a = 2 sieve_result = sieve(b) primes = [num for num in range(a, b + 1) if sieve_result[num]] return primes"},{"question":"I am trying to understand theبا 'lambda' keyword in Python. I know it is used for short anonymous functions, but I'm having trouble understanding how it works and how to use it. Could someone explain it to me using examples?","solution":"# Explanation of 'lambda' in Python # A lambda function is a small anonymous function defined with the keyword 'lambda'. # It can take any number of arguments, but can only have one expression. # Here is the general syntax for a lambda function: # lambda arguments: expression # Example 1: Basic usage of lambda to add two numbers add = lambda x, y: x + y # Example 2: Using lambda with map to square elements of a list numbers = [1, 2, 3, 4] squared = list(map(lambda x: x ** 2, numbers)) # Example 3: Using lambda with filter to get even numbers from a list evens = list(filter(lambda x: x % 2 == 0, numbers)) # Example 4: Using lambda with sorted to sort a list of tuples by the second element tuples = [(1, 'one'), (2, 'two'), (3, 'three')] sorted_tuples = sorted(tuples, key=lambda x: x[1])"},{"question":"Create a program that accepts two strings as input, and then check to see if the two strings are an anagram of each other. An anagram is a word or phrase that is made by rearranging the letters of another word or phrase, using all the original letters exactly once. For example, the word \\"silent\\" and \\"listen\\" are anagrams of each other.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, else returns False. # Remove any white spaces and make both strings lower case str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Return True if sorted characters of both strings are same return sorted(str1) == sorted(str2)"},{"question":"Use creating function to create a Python method. This function should take an array of integers and a target value as input, and return an array of the two numbers that add up to the target value.","solution":"def two_sum(nums, target): Returns indices of the two numbers such that they add up to target. Parameters: nums (list): List of integers. target (int): The target sum. Returns: List[int]: Indices of the two numbers if found, else return empty list. num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return [num_dict[complement], i] num_dict[num] = i return []"},{"question":"Develop a python program that generates a list of prime numbers up to a given number.","solution":"def generate_primes(up_to): Generates a list of prime numbers up to a given number. Parameters: up_to (int): The upper limit to generate prime numbers to. Returns: list: A list of prime numbers up to \`up_to\`. if up_to < 2: return [] primes = [] for num in range(2, up_to + 1): for i in range(2, int(num ** 0.5) + 1): if num % i == 0: break else: primes.append(num) return primes"},{"question":"In the Python programming language, construct a code snippet to find the length of a given string. Additionally, compute the length of each word in the string individually and store these values in a dictionary where keys are the words and values are the lengths. Make sure the string is not empty and handle any special characters or numbers included in the string.","solution":"def string_and_word_lengths(s): Computes the length of the given string and the length of each word in the string. Parameters: s (str): A non-empty string. Returns: tuple: A tuple containing two elements - 1. An integer representing the length of the string. 2. A dictionary where keys are the words and values are the lengths of the words. if not s: raise ValueError(\\"Input string must not be empty\\") string_length = len(s) words = s.split() word_lengths = {word: len(word) for word in words} return string_length, word_lengths"},{"question":"Write a Python program that includes an execution of a while loop with a break statement and a nested if-else condition. Additionally, implement a function that receives a list of integers as input and returns their cumulative product. Ensure all code adheres to PEP8 style guidelines.","solution":"def cumulative_product(lst): Returns the cumulative product of a list of integers. Parameters: lst (list): A list of integers Returns: int: The cumulative product of the list elements if not lst: # edge case where list is empty return 0 product = 1 for num in lst: product *= num return product def execute_while_loop(n): Executes a while loop that decrements \`n\` until it reaches 0 or satisfies a certain condition. Parameters: n (int): The starting integer value Returns: str: A message indicating whether the loop terminated because n hit 0 or due to a break condition while n > 0: if n == 5: break n -= 1 if n == 0: return \\"Loop completed\\" else: return f\\"Loop broke at n = {n}\\""},{"question":"Write a program that takes two lists of equal size and creates a dictionary representing a bipartite graph with one list as keys and the other as values.","solution":"def create_bipartite_graph(list1, list2): Returns a dictionary representing a bipartite graph with keys from list1 and values from list2. Assumes that both lists are of equal size. if len(list1) != len(list2): raise ValueError(\\"Both lists must be of equal size\\") bipartite_graph = {list1[i]: list2[i] for i in range(len(list1))} return bipartite_graph"},{"question":"You are tasked with creating a Python function that can transform a given string from snake_case to CamelCase. The function should take a single string input and return the modified string in CamelCase format. CamelCase is a naming convention where each word in the string is capitalized and concatenated without any spaces or underscores.","solution":"def snake_to_camel(snake_str): Transforms a snake_case string to CamelCase string. Parameters: snake_str (str): A string in snake_case format. Returns: str: A string in CamelCase format. components = snake_str.split('_') return ''.join(x.capitalize() for x in components)"},{"question":"Please implement the selection sort algorithm in any programming language you are comfortable with, but instead of sorting integers, make it capable of sorting strings alphabetically. Also include a function to integrate the sorting function and check its accuracy with a set of strings.","solution":"def selection_sort_strings(arr): Sorts a list of strings alphabetically using selection sort. n = len(arr) for i in range(n): min_index = i for j in range(i+1, n): if arr[j] < arr[min_index]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i] return arr def check_sorted(arr): Check if the list of strings is sorted alphabetically. for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return False return True"},{"question":"Write a code that takes the values from a given array, adds them to a new array, and sorts the array in ascending order.","solution":"def sort_array(arr): Takes values from the given array, adds them to a new array, and sorts the new array in ascending order. Parameters: arr (list): The input array to be sorted. Returns: list: A new sorted array. new_array = arr[:] # Copy the input array to a new array new_array.sort() # Sort the new array in ascending order return new_array"},{"question":"Create a python program that reads a list of numbers and prints the number of even and odd numbers","solution":"def count_even_odd(numbers): Returns a tuple containing the number of even and odd numbers in the list. :param numbers: List of integers :return: Tuple (even_count, odd_count) even_count = 0 odd_count = 0 for number in numbers: if number % 2 == 0: even_count += 1 else: odd_count += 1 return even_count, odd_count"},{"question":"How can I create a function in Python that calculates the sum of elements in a given list?","solution":"def sum_of_elements(lst): Returns the sum of all elements in the given list. Parameters: lst (list): A list of numbers Returns: int/float: The sum of the elements in the list return sum(lst)"},{"question":"Automate the problem of searching for an element in an array using a binary search algorithm.","solution":"def binary_search(arr, target): Performs binary search on a sorted array to find the index of the target element. Parameters: arr (list): The sorted list in which to search for the target. target (int): The element to search for. Returns: int: The index of the target element if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write an algorithm in Python that takes an array of integers as input and checks if it is a palindrome.","solution":"def is_palindrome(arr): Checks if the input array of integers is a palindrome. Args: arr (list of int): List of integers to check. Returns: bool: True if the input array is a palindrome, False otherwise. return arr == arr[::-1]"},{"question":"You are tasked with creating a simple web service using the Flask framework in Python. Your task is to implement an endpoint that accepts a POST request with a JSON payload containing a list of names. Your service should then respond with a JSON object that includes a greeting message for each name in the input list. If the input is not a list or if the list contains non-string elements, the service should return an error message.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/greet', methods=['POST']) def greet(): data = request.get_json(silent=True) if not isinstance(data, list): return jsonify({\\"error\\": \\"Input should be a list\\"}), 400 for name in data: if not isinstance(name, str): return jsonify({\\"error\\": f\\"All elements in list should be strings, but got a {type(name).__name__}\\"}), 400 greetings = [{\\"name\\": name, \\"greeting\\": f\\"Hello, {name}!\\"} for name in data] return jsonify(greetings), 200 if __name__ == \\"__main__\\": app.run(debug=True)"},{"question":"While using the Python3 type hinting feature, which word do we use to type hint the value of a return which is of no value and has no type?","solution":"def example_function() -> None: This function returns None, indicating no value is returned. print(\\"This function returns None\\")"},{"question":"Create an algorithm in Python that converts a given number from base 10 to binary, without using the built-in bin() function or any other built-in functions or libraries.","solution":"def decimal_to_binary(n): Converts a given number from base 10 to binary. Parameters: n (int): The decimal number to be converted. Returns: str: The binary representation of the number. if n == 0: return \\"0\\" binary = \\"\\" is_negative = n < 0 n = abs(n) while n > 0: binary = str(n % 2) + binary n = n // 2 if is_negative: binary = '-' + binary return binary"},{"question":"Write a recursive function in Python which takes an integer as input and prints the Fibonacci series up to that number. Also, incorporate memoization to optimize the function for larger input values. Bonus point if you can modify the function to return the series in reverse order.","solution":"def fibonacci_series(n, memo=None): Returns the Fibonacci series up to the nth number using memoization. Also returns the series in reverse order. if memo is None: memo = {} if n in memo: return memo[n] if n <= 0: return [] if n == 1: return [0] if n == 2: return [0, 1] # Compute the Fibonacci series up to n-1 series = fibonacci_series(n-1, memo) new_value = series[-1] + series[-2] series.append(new_value) memo[n] = series return series def reverse_fibonacci_series(n): Returns the Fibonacci series up to the nth number in reverse order using the optimized fibonacci_series function. series = fibonacci_series(n) return series[::-1]"},{"question":"You are provided with a JSON file containing a list of records. Each record consists of multiple fields, including a \`name\` field. Your task is to convert this JSON file into a CSV file while keeping only the records where the \`age\` field has a value greater than 25. Also, only include fields that are specified in a given list of fields to output. Write a Python program that accomplishes this task.","solution":"import json import csv def filter_json_to_csv(json_data, fieldnames, output_csv_path): Converts JSON data to a CSV file, filtering records with \`age\` > 25 and considering only specified fields. :param json_data: List of dictionaries containing the JSON data. :param fieldnames: List of fields to include in the CSV output. :param output_csv_path: Path to the output CSV file. filtered_data = [record for record in json_data if record.get('age', 0) > 25] with open(output_csv_path, 'w', newline='') as csvfile: writer = csv.DictWriter(csvfile, fieldnames=fieldnames) writer.writeheader() for record in filtered_data: writer.writerow({field: record.get(field, '') for field in fieldnames}) # Example function usage # Assuming you have a file \`data.json\` with the JSON content def convert_json_file_to_csv(json_file_path, fieldnames, output_csv_path): with open(json_file_path, 'r') as file: json_data = json.load(file) filter_json_to_csv(json_data, fieldnames, output_csv_path)"},{"question":"Write a Python function named \\"capitalize_words\\" that takes a string as an argument and returns a new string with the first letter of each word capitalized.","solution":"def capitalize_words(s): Returns a string with the first letter of each word capitalized. :param s: Input string :return: String with each word's first letter capitalized return ' '.join(word.capitalize() for word in s.split())"},{"question":"Create a function in Python that takes a list as parameter and returns a tuple containing the maximum and minimum elements in the list. The list should contain at least one element and only contain integer values. The function should have a time complexity of O(n) and a space complexity of O(1). Additionally, the function should ignore any negative integers in the list when determining the maximum and minimum values.","solution":"def get_max_min_positive(lst): Returns a tuple containing the maximum and minimum positive integer elements in the list. If no positive integers are present, returns (None, None). if not lst or all(x <= 0 for x in lst): return None, None max_val = None min_val = None for num in lst: if num > 0: if max_val is None or num > max_val: max_val = num if min_val is None or num < min_val: min_val = num return max_val, min_val"},{"question":"Write a function called \\"binary_search_char\\" that takes in a string and a character as parameters, and returns true if the character is present in the string and false otherwise. You are not allowed to use any built-in search functions.","solution":"def binary_search_char(s, char): Returns True if the character 'char' is present in the string 's', False otherwise. Assumes 's' is sorted in ascending order. :param s: A sorted string :param char: A character to search for :return: True if 'char' is found, False otherwise left, right = 0, len(s) - 1 while left <= right: mid = (left + right) // 2 if s[mid] == char: return True elif s[mid] < char: left = mid + 1 else: right = mid - 1 return False"},{"question":"How can I design an algorithm that checks for balanced parentheses in a given string of text?","solution":"def is_balanced(s): Checks if the parentheses in the string are balanced. Args: s (str): The input string containing parentheses. Returns: bool: True if the parentheses are balanced, False otherwise. stack = [] matching_parentheses = {')': '(', '}': '{', ']': '['} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or stack.pop() != matching_parentheses[char]: return False return stack == []"},{"question":"Define a function in Python that takes a number as an argument and returns the sum of the cubes of its digits.","solution":"def sum_of_cubes_of_digits(n): Returns the sum of the cubes of the digits of the number n. return sum(int(digit) ** 3 for digit in str(abs(n)))"},{"question":"Design a Python function that accepts a list of string elements as input and outputs the string with the greatest number of characters. If there are multiple strings with the same maximum length, return the one that appears first in the list.","solution":"def longest_string(strings): Returns the string with the greatest number of characters from the input list. If there are multiple strings with the same maximum length, returns the one that appears first in the list. if not strings: return None return max(strings, key=len)"},{"question":"I want to create a script that converts an RGB image to grayscale using Python. Can you provide a solution?","solution":"from PIL import Image def convert_to_grayscale(image_path, output_path): Converts an RGB image to grayscale and saves it to the given output_path. :param image_path: Path to the input RGB image. :param output_path: Path to save the grayscale image. # Open the image file image = Image.open(image_path) # Convert the image to grayscale grayscale_image = image.convert(\\"L\\") # Save the grayscale image grayscale_image.save(output_path)"},{"question":"Write a Python program to print all the leap years between 1980 and 2025.","solution":"def leap_years(start, end): Returns a list of leap years between start and end. leap_years_list = [] for year in range(start, end + 1): if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): leap_years_list.append(year) return leap_years_list # Print all leap years between 1980 and 2025 print(leap_years(1980, 2025))"},{"question":"Fabricate a Python program script utilizing the function \\"get_name\\" to solicit the complete official nomenclature from the end-user. This program must then apply intricate logic to validate the input, before reverberating the authenticated input back to the user, encapsulated in a greeting message. Here is a possible solution to your request. This Python script will prompt the user for their full name, verify that it fits some basic criteria (in this case, that it contains both a first and last name, with each beginning with a capital letter), and then echo the name back in a greeting.","solution":"def get_name(): Prompts the user to enter their full name and validates that it contains both a first and last name, with each starting with a capital letter. Returns: str: The validated full name. while True: name = input(\\"Please enter your full official name: \\") parts = name.strip().split() if len(parts) < 2: print(\\"Invalid input. Please enter both your first and last name.\\") continue if not all(part.isalpha() and part[0].isupper() for part in parts): print(\\"Invalid input. Ensure each name starts with a capital letter and contains only alphabetic characters.\\") continue return name if __name__ == \\"__main__\\": user_name = get_name() print(f\\"Hello, {user_name}!\\")"},{"question":"Output all the elements in an array where the last character of the element is a vowel. The solution should have a time complexity of O(n) and should not use any built-in functions or libraries to check if a character is a vowel. Additionally, you are not allowed to use any additional data structures or variables to store the vowels or the result. You must directly print the elements that meet the criteria.","solution":"def print_elements_with_vowel_end(arr): Prints elements of the array where the last character is a vowel. A vowel is defined as one of the characters: 'a', 'e', 'i', 'o', 'u' (lowercase only). for element in arr: if len(element) > 0: last_char = element[-1] if last_char == 'a' or last_char == 'e' or last_char == 'i' or last_char == 'o' or last_char == 'u': print(element)"},{"question":"How do I determine if a given number is a prime number in Python? Can you provide a code snippet for this?","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a Python function that takes two strings as parameters and returns True if the first string contains the second string, otherwise False. The function should be case-insensitive, meaning that it should not matter whether the letters are uppercase or lowercase. For example, if the first string is \\"Hello World\\" and the second string is \\"world\\", the function should return True.","solution":"def contains_ignore_case(str1, str2): Returns True if str1 contains str2, ignoring case. return str2.lower() in str1.lower()"},{"question":"Write a Python function that arranges three given numbers into a non-decreasing order. Here, the numbers can incorporate both integer and decimal values. Each number is denoted with its own variable: \`alpha\` for the first number, \`beta\` for the second, and \`gamma\` for the third. This function will return these numbers in an ascending sequence, but keep in mind that the numbers might not necessarily be in their original input order. Moreover, achieve this task with the least number of variable swaps, for instance, using the built-in sorting functionality in Python.","solution":"def arrange_numbers(alpha, beta, gamma): Arranges three given numbers into non-decreasing order. Parameters: alpha (float/int): The first number. beta (float/int): The second number. gamma (float/int): The third number. Returns: tuple: A tuple containing the numbers in non-decreasing order. return tuple(sorted([alpha, beta, gamma]))"},{"question":"Given a list of integers, number_list, write a program that generates a 2D matrix with the dimension specified in size_list. The elements of the matrix are the values from number_list, starting with the first element from the top-left corner and moving left to right and top to bottom. In the case where number_list contains more elements than the flattened matrix, the extra elements are placed in a separate flat list. Finally, if the difference between the sum of elements in the top row and the sum of elements in the bottom row is greater than 100, multiply each element in the matrix by -1.","solution":"def create_2d_matrix(number_list, size_list): Creates a 2D matrix with given dimensions and processes the extra steps described in the problem. Args: number_list (list): List of integers to populate the matrix. size_list (list): List containing two integers representing the dimensions of the matrix. Returns: tuple: Containing the matrix and the extra elements list. rows, columns = size_list[0], size_list[1] matrix = [] extra_elements = [] for i in range(rows): row = [] for j in range(columns): if number_list: row.append(number_list.pop(0)) else: row.append(0) # Fill with zeros if number_list is exhausted matrix.append(row) extra_elements = number_list # Calculate the sum of the top and bottom rows top_row_sum = sum(matrix[0]) if rows > 0 else 0 bottom_row_sum = sum(matrix[-1]) if rows > 1 else 0 # Check if the difference between sums is greater than 100 if abs(top_row_sum - bottom_row_sum) > 100: for i in range(rows): matrix[i] = [-x for x in matrix[i]] return matrix, extra_elements"},{"question":"Develop an algorithm using Python programming language to find the maximum number of elements that exists in any subarray of size K.","solution":"def max_elements_in_subarray(array, k): Returns the maximum number of elements that exists in any subarray of size K. Parameters: array (list): List of integers k (int): Size of the subarray Returns: int: Maximum number of elements in any subarray of size K if not array or k <= 0 or k > len(array): return None max_elements = max(sum(array[i:i+k]) for i in range(len(array) - k + 1)) return max_elements"},{"question":"Create a Python function that flattens a nested list while preserving the order of elements and map its values to their indices in a new list. However, the nested list can contain other nested lists up to 3 levels deep. Additionally, if a list at any level contains a duplicate value, remove that entire list from the final flattened list.","solution":"def flatten_and_map(nested_list): Flattens a nested list up to 3 levels deep while preserving the order of elements and map its values to their indices in a new list. It filters out any list containing duplicate values at any level. def flatten(lst): flattened = [] for item in lst: if isinstance(item, list): if len(set(flatten(item))) != len(flatten(item)): # Check for duplicates within the nested lists return [] flattened.extend(flatten(item)) else: flattened.append(item) return flattened flattened_list = flatten(nested_list) if flattened_list and len(set(flattened_list)) == len(flattened_list): mapped_list = list(range(len(flattened_list))) else: mapped_list = [] return mapped_list"},{"question":"Your mission is to output \\"Hello Multiverse\\" to the console. However, to make things more interesting, you will need to write a function that can take in a string and output it to the console, but with a twist. The function should only output the string if the length of the string is a prime number. If the length of the string is not a prime number, the function should instead output \\"Greetings Multiverse\\". Your task is to write this function in the most efficient way possible, without using any built-in libraries for checking prime numbers.","solution":"def is_prime(n): Helper function to determine if a number is prime. A prime number is greater than 1 and has no divisors other than 1 and itself. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def hello_multiverse(s): Prints the input string if its length is a prime number. Otherwise, prints \\"Greetings Multiverse\\". if is_prime(len(s)): print(s) else: print(\\"Greetings Multiverse\\")"},{"question":"Create a code to save the first ten prime numbers in an array and additionally, calculate the sum of these prime numbers. Make sure to implement an efficient algorithm for the prime number checking function as the code will also be tested for performance, especially in finding large prime numbers.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False sqrt_n = int(n**0.5) + 1 for i in range(3, sqrt_n, 2): if n % i == 0: return False return True def first_n_primes(n): Returns a list of the first n prime numbers. primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return primes def sum_of_primes(primes): Returns the sum of the given prime numbers. return sum(primes) def get_first_ten_primes_and_sum(): Returns the first ten prime numbers and their sum. primes = first_n_primes(10) return primes, sum_of_primes(primes)"},{"question":"What is an example of an algorithm in Python that can be used to convert an infix expression to postfix notation? The infix expression should be provided as a string.","solution":"def infix_to_postfix(expression): precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3} output = [] stack = [] def has_higher_precedence(op1, op2): return precedence.get(op1, 0) >= precedence.get(op2, 0) for char in expression: if char.isalnum(): # checking if the character is an operand output.append(char) elif char == '(': stack.append(char) elif char == ')': while stack and stack[-1] != '(': output.append(stack.pop()) stack.pop() else: while stack and has_higher_precedence(stack[-1], char): output.append(stack.pop()) stack.append(char) while stack: output.append(stack.pop()) return ''.join(output)"},{"question":"I want you to act as a programming tutor for me. I will ask you questions about my code and you will answer them in simple terms that I can understand. Do not give me the answers outright, but guide me through the process of finding the solution myself. You should only reply with a brief explanation, hints or questions that could help me solve the problem. My first question is: How do I create a function in Python that takes two arguments and returns their sum?","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Write a function in Python that takes a list of integers and returns a new list containing only the even numbers from the original list, in the same order. The function should have a time complexity of O(n), should not use any built-in functions or libraries, and should also ensure that the resulting list is sorted in ascending order. Additionally, the function should handle negative integers correctly and ensure that the resulting list does not contain any duplicates.","solution":"def filter_and_sort_unique_evens(lst): This function takes a list of integers and returns a new list containing only the unique even numbers from the original list, sorted in ascending order. seen = set() result = [] for num in lst: if num % 2 == 0 and num not in seen: seen.add(num) result.append(num) # Sort the result list (as we cannot use built-in sorted or libraries, implementing a simple bubble sort) n = len(result) for i in range(n): for j in range(n-i-1): if result[j] > result[j+1]: result[j], result[j+1] = result[j+1], result[j] return result"},{"question":"Devise a Python subroutine that transforms a decimal numeral into a currency format specifically adhering to the USD standards. The decimal number in focus for this exercise is 68.34567.","solution":"def to_usd_currency(amount): Format the given decimal number as per USD currency standards. Rounds to two decimal places and adds '' symbol at the beginning. return f\\"{amount:.2f}\\" # Example usage formatted_value = to_usd_currency(68.34567) print(formatted_value) # Output: 68.35"},{"question":"Propose an efficient algorithm to remove duplicates from a given list while preserving the order of the remaining elements. Your algorithm should have a time complexity of O(n) and should use only constant space, i.e., it should not create any additional data structures.","solution":"def remove_duplicates(input_list): Removes duplicates from a list while preserving the order of the remaining elements. This solution has a time complexity of O(n) and uses only constant additional space. seen = set() write_index = 0 for read_index in range(len(input_list)): if input_list[read_index] not in seen: seen.add(input_list[read_index]) input_list[write_index] = input_list[read_index] write_index += 1 # Remove the leftover duplicates del input_list[write_index:] return input_list"},{"question":"Given an array of integers, write a Python program to find a peak element which is greater than its neighbors.","solution":"def find_peak_element(nums): Finds a peak element in the array that is greater than its neighbors. Args: nums : List[int] - A list of integers. Returns: int - A peak element in the array. if not nums: return None n = len(nums) if n == 1: return nums[0] if nums[0] >= nums[1]: return nums[0] if nums[n - 1] >= nums[n - 2]: return nums[n - 1] left, right = 1, n - 2 while left <= right: mid = (left + right) // 2 if nums[mid] >= nums[mid - 1] and nums[mid] >= nums[mid + 1]: return nums[mid] elif nums[mid - 1] > nums[mid]: right = mid - 1 else: left = mid + 1 return None # This should never be reached if input has at least one peak."},{"question":"Formulate a regex expression in Python to check if a given string is an Indian mobile number. Additionally, the regex should also account for formats where the country code (+91 or 91) is included. Furthermore, the mobile number should not be just any random sequence of digits but should follow the usual pattern of Indian mobile numbers i.e., the first five digits should fall in the range 70000 to 99999 and the next six digits can be any number.","solution":"import re def is_valid_indian_mobile_number(number): Checks if the given string is a valid Indian mobile number. The number can optionally start with +91 or 91. pattern = re.compile(r'^(?:+91|91)?[7-9]d{9}') return bool(pattern.match(number))"},{"question":"Given a list of words, write a program to generate all possible anagrams using all the words and them in lexicographical order while ignoring any duplicates.","solution":"import itertools def generate_anagrams(words): Generates all possible anagrams using all the words and returns them in lexicographical order while ignoring duplicates. sorted_words_combinations = sorted(set([''.join(p) for p in itertools.permutations(words)])) return sorted_words_combinations"},{"question":"Create a Python script to implement a singly linked list data structure with methods for adding elements at the beginning, end, and any specified position, as well as removing elements by value or position.","solution":"class Node: def __init__(self, data): self.data = data self.next = None class SinglyLinkedList: def __init__(self): self.head = None def add_at_beginning(self, data): new_node = Node(data) new_node.next = self.head self.head = new_node def add_at_end(self, data): new_node = Node(data) if not self.head: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node def add_at_position(self, data, position): if position == 0: self.add_at_beginning(data) else: new_node = Node(data) current = self.head for _ in range(position - 1): if not current: return # Position is out of bounds current = current.next if current: new_node.next = current.next current.next = new_node else: return # Position is out of bounds def remove_by_value(self, data): current = self.head if current and current.data == data: self.head = current.next current = None return prev = None while current and current.data != data: prev = current current = current.next if not current: return # Value not found prev.next = current.next current = None def remove_by_position(self, position): if self.head is None: return current = self.head if position == 0: self.head = current.next current = None return prev = None for _ in range(position): prev = current current = current.next if not current: return # Position is out of bounds if current: prev.next = current.next current = None else: return # Position is out of bounds def to_list(self): result = [] current = self.head while current: result.append(current.data) current = current.next return result"},{"question":"Design a Python function snippet to Transform Extreme Weather: Temperature for Decision Making for Beginners. Implement if/else or switch/case statements to handle different conditions related to the Bias. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def transform_temperature(temp_celsius, bias): Transforms the temperature based on a given bias. Parameters: temp_celsius (float): Temperature in degrees Celsius. bias (str): The type of bias to be applied. Can be 'increase', 'decrease', or 'normalize'. Returns: float: The transformed temperature. if bias == 'increase': # Increase the temperature by 2 degrees transformed_temp = temp_celsius + 2 elif bias == 'decrease': # Decrease the temperature by 2 degrees transformed_temp = temp_celsius - 2 elif bias == 'normalize': # Normalize the temperature, which means bringing it closer to a moderate value, e.g., room temperature (20 degrees) if temp_celsius > 20: transformed_temp = 20 + (temp_celsius - 20) / 2 else: transformed_temp = 20 - (20 - temp_celsius) / 2 else: # If the bias is not recognized, return the original temperature transformed_temp = temp_celsius return transformed_temp"},{"question":"Devise a piece of programming script that accepts a dictionary structure, specifically a hashmap, as an input; then, it proceeds to invert the initial hashmap such that the initial key entities are transformed into value entities, and the initial value entities assume the role of key entities. The hashmap provided as reference is { \\"apple\\" : 1, \\"banana\\": 2, \\"carrot\\" : 3 }.","solution":"def invert_dictionary(input_dict): Inverts a dictionary such that the keys become values and values become keys. Parameters: input_dict (dict): The dictionary to invert. Returns: dict: The inverted dictionary. return {v: k for k, v in input_dict.items()}"},{"question":"Given two strings, s and t, write a python program to find the number of distinct non-empty subsequences of s that are not in t.","solution":"def count_distinct_subsequences(s, t): Returns the number of distinct non-empty subsequences of s that are not in t. def get_subsequences(seq): subsequences = set() n = len(seq) for i in range(1, 1 << n): subseq = ''.join(seq[j] for j in range(n) if (i & (1 << j))) subsequences.add(subseq) return subsequences subsequences_s = get_subsequences(s) subsequences_t = get_subsequences(t) distinct_subsequences = subsequences_s - subsequences_t return len(distinct_subsequences)"},{"question":"Create a Python function named \\"unique_sorted_list\\" that takes a list of elements as input and returns a new list containing the unique elements from the input list, sorted in ascending order.","solution":"def unique_sorted_list(elements): Given a list of elements, return a new list containing the unique elements from the input list, sorted in ascending order. :param elements: List of input elements. :return: Sorted list of unique elements. return sorted(set(elements))"},{"question":"Write a python function named \\"create_matrix\\" that takes in two integer arguments \\"rows\\" and \\"columns\\" and returns a 2D matrix with the specified dimensions. Fill the matrix with random integers between 0 and 9 (inclusive). Import the necessary module at the beginning of your code. Include a docstring that explains the purpose of the function. Finally, include test cases to verify the correctness of your solution.","solution":"import random def create_matrix(rows, columns): Create a 2D matrix with the specified number of rows and columns, filled with random integers between 0 and 9 (inclusive). Args: rows (int): Number of rows for the matrix. columns (int): Number of columns for the matrix. Returns: list: A 2D list (matrix) filled with random integers. return [[random.randint(0, 9) for _ in range(columns)] for _ in range(rows)]"},{"question":"Create a Python program that can convert a list of strings into a dictionary, where each string is a key and its index in the list is the value.","solution":"def list_to_dict(lst): Converts a list of strings into a dictionary, where each string is a key and its index in the list is the value. Args: lst (list of str): List of strings Returns: dict: Dictionary with strings as keys and their indices as values return {string: index for index, string in enumerate(lst)}"},{"question":"Write a Python function that takes an integer representing a decimal and outputs its binary equivalent as a string without using built-in or library functions for binary conversion. Also, ensure your function can handle both positive and negative integers by implementing two's complement for negative numbers, with a fixed size of 8 bits.","solution":"def decimal_to_binary(n): Converts an integer to its binary equivalent as a string without using built-in or library functions. Handles both positive and negative integers using two's complement for negative numbers (8 bits size). if n == 0: return \\"00000000\\" if n > 127 or n < -128: raise ValueError(\\"Number out of 8-bit range\\") bits = [] if n < 0: n = 256 + n # Two's complement for negative numbers while n > 0: bits.append(n % 2) n = n // 2 # Ensure the binary string is 8 bits long while len(bits) < 8: bits.append(0) # Reverse the bits to form the correct binary string binary_str = ''.join(str(bit) for bit in reversed(bits)) return binary_str"},{"question":"Create a Python program to combine two lists into a dictionary. However, instead of combining the lists based on their indices, combine them based on a common attribute between the elements of both lists.","solution":"def combine_lists_to_dict(list1, list2, key): Combines two lists into a dictionary based on a common attribute. Args: list1 (list): The first list of dictionaries. list2 (list): The second list of dictionaries. key (str): The common key attribute to combine the lists. Returns: dict: A dictionary with keys from list1 and values from list2 based on the common attribute. dict1 = {item[key]: item for item in list1} dict2 = {item[key]: item for item in list2} combined_dict = {} for k in dict1.keys() & dict2.keys(): combined_dict[k] = (dict1[k], dict2[k]) return combined_dict"},{"question":"Write an algorithm for implementing binary search on a rotated sorted array. The array has been shifted an unknown number of times. Include error checking for invalid inputs and handle cases where the array is not rotated at all.","solution":"def binary_search_rotated(arr, target): Performs binary search on a rotated sorted array. :param arr: List[int], a rotated sorted array :param target: int, the target value to search for :return: int, the index of target in the array if present, otherwise -1 if not arr: return -1 left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid # Determine which part is sorted if arr[left] <= arr[mid]: # left part is sorted if arr[left] <= target < arr[mid]: right = mid - 1 else: left = mid + 1 else: # right part is sorted if arr[mid] < target <= arr[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Develop a Python function that encrypts a message using a Caesar cipher with a given key.","solution":"def caesar_cipher_encrypt(message, key): Encrypts the message using the Caesar cipher with the given key. Parameters: - message: The string message to be encrypted. - key: The integer key (number of positions to shift each character). Returns: - encrypted_message: The encrypted string. encrypted_message = [] for char in message: if char.isalpha(): # Determine whether the character is uppercase or lowercase offset = 65 if char.isupper() else 97 # Shift the character and wrap around if necessary encrypted_character = chr((ord(char) - offset + key) % 26 + offset) encrypted_message.append(encrypted_character) else: encrypted_message.append(char) return ''.join(encrypted_message)"},{"question":"Write a Python program that queries user input for three different positive integers x, y, and z. It will compute and output the product of x and y raised to the power of z, but in a way that also determines and shows the time complexity of your solution. Include error handling to ensure the integers entered are positive and also add exception handling for any potential issues.","solution":"def compute_product_power(x, y, z): Computes the product of x and y raised to the power of z. Ensures x, y, and z are positive integers. Parameters: x (int): a positive integer y (int): a positive integer z (int): a positive integer Returns: int: the result of (x * y) ** z if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)): raise ValueError(\\"All inputs must be integers.\\") if x <= 0 or y <= 0 or z <= 0: raise ValueError(\\"All inputs must be positive integers.\\") product = x * y result = product ** z return result"},{"question":"Given two strings, how can you check if they are anagrams of each other using a programming language?","solution":"def are_anagrams(str1, str2): Returns True if the two strings are anagrams of each other, False otherwise. # Anagrams must have the same length if len(str1) != len(str2): return False # Sort both strings and compare return sorted(str1) == sorted(str2)"},{"question":"Write a python function that outputs a Fibonacci sequence of a given length. The length of the sequence should be at least 10 and the numbers in the sequence should be between 1 and 10000. Additionally, the function should also calculate and output the sum of all the numbers in the Fibonacci sequence.","solution":"def fibonacci_sequence(length): Generates a Fibonacci sequence of a given length and returns the sequence along with the sum of its elements. Parameters: length (int): The length of the Fibonacci sequence Returns: tuple: (list, int) - The Fibonacci sequence and the sum of its elements if length < 10: raise ValueError(\\"Length of the sequence should be at least 10.\\") sequence = [1, 1] while len(sequence) < length: next_number = sequence[-1] + sequence[-2] if next_number > 10000: break sequence.append(next_number) return sequence, sum(sequence)"},{"question":"Design a program that takes a string with a sentence and returns a list containing the number of characters in each word of the sentence. Make sure to ignore any punctuation marks.","solution":"import string def count_chars_in_words(sentence): Returns a list containing the number of characters in each word of the sentence, ignoring punctuation. words = sentence.split() table = str.maketrans('', '', string.punctuation) cleaned_words = [word.translate(table) for word in words] char_counts = [len(word) for word in cleaned_words] return char_counts"},{"question":"Write a function to find the longest common prefix string amongst an array of strings. The function should have a time complexity of O(n * m), where n is the number of strings in the array and m is the length of the longest string. Additionally, the function should not use any built-in string matching functions (such as startsWith or substring), and it should also not use any loops or recursion. Instead, you should implement your own algorithm to solve the problem using only bitwise operations and basic arithmetic.","solution":"def longest_common_prefix(strs): Find the longest common prefix string amongst an array of strings. if not strs: return \\"\\" prefix = strs[0] for string in strs: min_length = min(len(prefix), len(string)) i = 0 while i < min_length and prefix[i] == string[i]: i += 1 prefix = prefix[:i] return prefix"},{"question":"Create a dictionary from a list of tuples, then write functions to add, remove, and modify entries in this dictionary. The tuple list will look like this: tuple_list = [('apple', 1), ('banana', 2), ('cherry', 3)].","solution":"def create_dict_from_tuples(tuple_list): Create a dictionary from a list of tuples. return dict(tuple_list) def add_entry(dictionary, key, value): Add an entry to the dictionary. dictionary[key] = value def remove_entry(dictionary, key): Remove an entry from the dictionary. if key in dictionary: del dictionary[key] def modify_entry(dictionary, key, value): Modify an entry in the dictionary. if key in dictionary: dictionary[key] = value"},{"question":"Create a program that returns the middle character(s) of a given string. If the length of the string is odd, return the single middle character. If the length is even, return the two middle characters. Additionally, the program should also check if the given string is a palindrome. If it is, the program should return the middle character(s) in uppercase, otherwise it should return them in lowercase.","solution":"def get_middle_character(s): Returns the middle character(s) of a given string. If the string is a palindrome, the middle character(s) is returned in uppercase, otherwise in lowercase. length = len(s) def is_palindrome(s): return s == s[::-1] mid_index = length // 2 if length % 2 == 0: # even length middle_chars = s[mid_index - 1:mid_index + 1] else: # odd length middle_chars = s[mid_index] if is_palindrome(s): return middle_chars.upper() else: return middle_chars.lower()"},{"question":"Write a function in Python that accepts an array of positive integers as an argument and returns the index of the first occurrence of the item with the maximum value. If there are multiple occurrences of the maximum value, return the index of the first occurrence. If the array is empty, the function should return -1.","solution":"def index_of_first_max(arr): Returns the index of the first occurrence of the maximum value in the array. If the array is empty, returns -1. if not arr: return -1 max_value = max(arr) return arr.index(max_value)"},{"question":"Write a Python function that takes two lists and finds their intersection (elements present in both lists).","solution":"def intersection(list1, list2): Returns a list containing the intersection of list1 and list2. Elements in the result appear as many times as they appear in both lists. # Use set intersection and then reconstruct the result from lists to preserve counts set1 = set(list1) set2 = set(list2) common_set = set1.intersection(set2) result = [] for item in common_set: count = min(list1.count(item), list2.count(item)) result.extend([item] * count) return result"},{"question":"Please write a Python function that takes in a list of integers and returns a new list that contains only the unique elements from the original list, in the order that they first appeared. You may not use any built-in functions or libraries that easily solve the problem, such as set() or collections.Counter(). Instead, please implement your own logic to identify and remove duplicates.","solution":"def unique_elements(lst): Takes a list of integers and returns a new list containing only the unique elements, in the order they first appeared. Parameters: lst (list): A list of integers. Returns: list: A list containing the unique elements of the original list. seen = {} unique_list = [] for item in lst: if item not in seen: seen[item] = True unique_list.append(item) return unique_list"},{"question":"Generate a code snippet for sorting an array of integers in descending order using the bubble sort algorithm. Additionally, implement a function that checks if the array is already sorted in descending order before performing the sort. The code should have a time complexity of O(n^2) for the sorting algorithm and O(n) for the checking function.","solution":"def is_sorted_desc(arr): Check if the array is sorted in descending order. Parameters: arr (list): The array to check. Returns: bool: True if sorted in descending order, False otherwise. for i in range(len(arr) - 1): if arr[i] < arr[i + 1]: return False return True def bubble_sort_desc(arr): Sort the array in descending order using the bubble sort algorithm. Parameters: arr (list): The array to sort. Returns: list: The sorted array in descending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def sort_if_not_sorted(arr): Sort the array in descending order if it is not already sorted. Parameters: arr (list): The array to sort if not already sorted. Returns: list: The sorted array in descending order. if not is_sorted_desc(arr): return bubble_sort_desc(arr) return arr"},{"question":"Develop a Python function named \\"merge\\" that accepts two lists as parameters. The function should return a list that is a result of merging the two lists in alternating order. If one list is longer than the other, append the remaining elements of the longer list to the end of the result.","solution":"def merge(list1, list2): Merges two lists in alternating order. If one list is longer, append the remaining elements of the longer list to the end. merged_list = [] length1, length2 = len(list1), len(list2) for i in range(max(length1, length2)): if i < length1: merged_list.append(list1[i]) if i < length2: merged_list.append(list2[i]) return merged_list"},{"question":"Write a python function to move all zeroes to the end of the given list. The function should maintain the relative order of the non-zero elements.","solution":"def move_zeroes_to_end(lst): Moves all zeroes in the list to the end while maintaining the relative order of the non-zero elements. Args: lst (list of int): The list of integers to be processed. Returns: list of int: A new list with zeroes moved to the end. if not lst: return lst non_zeroes = [x for x in lst if x != 0] zeroes = [x for x in lst if x == 0] return non_zeroes + zeroes"},{"question":"Given a positive integer number, generate the Fibonacci series up to the given number using recursion. Additionally, implement a check to validate if the generated series is correct.","solution":"def fibonacci(n): Returns the Fibonacci series up to the given number using recursion. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: series = fibonacci(n-1) series.append(series[-1] + series[-2]) return series[:n] def is_fibonacci_series(series): Checks if the given series is a valid Fibonacci series. if len(series) == 0: return True elif len(series) == 1: return series[0] == 0 elif len(series) == 2: return series == [0, 1] else: for i in range(2, len(series)): if series[i] != series[i-1] + series[i-2]: return False return True"},{"question":"Write a Python program that can determine if a given word is an isogram or not. An isogram is a word that does not have repeating letters, all letters are unique.","solution":"def is_isogram(word): Checks if the given word is an isogram. Parameters: word (str): The word to check. Returns: bool: True if the word is an isogram, False otherwise. cleaned_word = word.lower() return len(cleaned_word) == len(set(cleaned_word))"},{"question":"Write a Python code to check if the given string contains only digits.","solution":"def contains_only_digits(s): Check if the given string contains only digits. Parameters: s (str): The string to check. Returns: bool: True if the string only contains digits, False otherwise. return s.isdigit()"},{"question":"Write a python function called \`string_inverter\` that reverses the order of words in a given string, while maintaining the initial order of letters within each word. The function should take a single argument being the string to be processed.","solution":"def string_inverter(s): Returns a string with the order of words reversed, while maintaining the initial order of letters within each word. words = s.split() reversed_words = ' '.join(reversed(words)) return reversed_words"},{"question":"Explain what is a stack overflow error and provide an example of how it can occur in a recursive function. Describe how tail recursion can be used to prevent stack overflow errors in recursive functions. Additionally, provide the time and space complexity of the tail-recursive solution for the Fibonacci sequence calculation.","solution":"def fibonacci(n, a=0, b=1): if n == 0: return a if n == 1: return b return fibonacci(n - 1, b, a + b)"},{"question":"Implement a Python program that takes two 2D matrices as input arguments, checks if matrix multiplication is feasible based on their dimensions, and if it is, performs and outputs the result of their multiplication. Also, consider performance optimization while designing your solution.","solution":"import numpy as np def multiply_matrices(mat1, mat2): Multiplies two 2D matrices if their dimensions are compatible. :param mat1: List of List of integers, first matrix :param mat2: List of List of integers, second matrix :return: List of List of integers, the resultant matrix after multiplication :raises ValueError: if the matrices cannot be multiplied due to incompatible dimensions if len(mat1[0]) != len(mat2): raise ValueError(\\"Matrices cannot be multiplied due to incompatible dimensions.\\") result = np.dot(mat1, mat2).tolist() return result"},{"question":"Write a function that takes an array of integers as input and sorts it using the Heapsort algorithm.","solution":"def heapify(arr, n, i): largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[i] < arr[left]: largest = left if right < n and arr[largest] < arr[right]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify(arr, n, largest) def heapsort(arr): n = len(arr) for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) for i in range(n-1, 0, -1): arr[i], arr[0] = arr[0], arr[i] heapify(arr, i, 0) return arr"},{"question":"Write a recursive function in Python that calculates the factorial of a number. Also include error handling to check if the input is a non-negative integer. If not, the function should raise an exception.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Raises a ValueError if n is not a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"I have a Python dictionary and I want to use it to create a function that returns the value associated with a given key in the dictionary. If the key is not found in the dictionary, the function should return None. How can I achieve this? Also, can you provide a code example to illustrate this?","solution":"def get_value_from_dict(d, key): Returns the value associated with the given key in the dictionary d. If the key is not found, returns None. return d.get(key)"},{"question":"Code a program to delete all occurrences of a given element from an array. The array can contain duplicates. You are not allowed to use any built-in functions or data structures.","solution":"def delete_occurrences(arr, element): Deletes all occurrences of \`element\` from the array \`arr\`. :param arr: List of integers. :param element: The element to be removed from the list. :return: A new list with the specified element removed. # Create a new list to store the result result = [] for item in arr: if item != element: result.append(item) return result"},{"question":"Write a Python program that accepts a matrix (a list of lists) and returns the matrix transposed. The program should also handle non-rectangular matrices and maintain the transposition correctly.","solution":"def transpose(matrix): Returns the transposed version of the input matrix. if not matrix: return [] # Find the maximum row length to handle non-rectangular matrices max_len = max(len(row) for row in matrix) # Transpose the matrix transposed = [[] for _ in range(max_len)] for row in matrix: for i in range(max_len): if i < len(row): transposed[i].append(row[i]) else: transposed[i].append(None) return transposed"},{"question":"Develop a programming function that examines the supplied HTML script and produces a selective count of certain Uniform Resource Locators (URLs) embedded within. Your function should focus on URLs that originate with \\"https\\" and are located within 'src' attributes of 'script' tags or 'href' attributes of 'link' tags.","solution":"from bs4 import BeautifulSoup def count_specific_urls(html): Takes a string containing HTML and counts the number of URLs starting with 'https' within 'src' attributes of 'script' tags or 'href' attributes of 'link' tags. Returns the count of such URLs. soup = BeautifulSoup(html, 'html.parser') count = 0 # Find all 'script' tags with a 'src' attribute scripts = soup.find_all('script', src=True) for script in scripts: src = script['src'] if src.startswith('https://'): count += 1 # Find all 'link' tags with a 'href' attribute links = soup.find_all('link', href=True) for link in links: href = link['href'] if href.startswith('https://'): count += 1 return count"},{"question":"Create a function that not only returns the longest string from a list but also count the number of vowels in that string. If there are two or more strings with the same length, return the one that appears first in the list. Include error handling for situations where the list may be empty.","solution":"def longest_string_with_vowel_count(strings): Returns the longest string and the count of vowels in it from a list of strings. If the input list is empty, returns (None, 0). if not strings: return None, 0 vowels = set('aeiouAEIOU') longest_string = '' longest_length = 0 vowel_count_in_longest = 0 for string in strings: length = len(string) if length > longest_length: longest_length = length longest_string = string vowel_count_in_longest = sum(1 for char in string if char in vowels) return longest_string, vowel_count_in_longest"},{"question":"Finish this program: given an integer array as input, you should calculate and provide the overall maximum and minimum values, alongside the median value of the array. If there are two median numbers (in case of an even array length), return the one in the middle.","solution":"def calculate_statistics(arr): Given an integer array, calculates and returns the maximum, minimum, and median values. If the array length is even, returns the middle value as the median. Parameters: arr (list of int): The input array. Returns: tuple: A tuple containing the minimum value, maximum value, and median value. if not arr: raise ValueError(\\"The array should not be empty\\") arr_sorted = sorted(arr) n = len(arr_sorted) min_val = arr_sorted[0] max_val = arr_sorted[-1] if n % 2 == 1: median_val = arr_sorted[n // 2] else: median_val = arr_sorted[n // 2 - 1] return (min_val, max_val, median_val)"},{"question":"Write a Python function that takes in three parameters: \`message\`, \`key\`, and \`mode\`. The function should implement the Caesar Cipher algorithm for encryption and decryption based on the \`mode\` parameter. The Caesar Cipher is a type of substitution cipher in which each letter in the plaintext is 'shifted' a certain number of places down the alphabet. This number, called the 'key', is the input to the cipher. For example, with a shift of 1, A would be replaced by B, B would become C, and so on.","solution":"def caesar_cipher(message, key, mode): Encrypts or decrypts a message using the Caesar Cipher algorithm. :param message: str, the message to be encrypted or decrypted :param key: int, the number of places each letter is shifted :param mode: str, either 'encrypt' or 'decrypt' to specify the operation mode :return: str, the encrypted or decrypted message result = [] # Normalize key within the range of 0-25 key = key % 26 for char in message: if char.isalpha(): # Only shift alphabetic characters shift = key if mode == 'encrypt' else -key new_char = shift_character(char, shift) result.append(new_char) else: result.append(char) # Do not alter non-alphabetic characters return ''.join(result) def shift_character(char, shift): Shifts a character by the given number of places, wrapping around as necessary. if char.islower(): start = ord('a') else: start = ord('A') new_char = chr(start + (ord(char) - start + shift) % 26) return new_char"},{"question":"How do I create a space separated list using Python that counts from 1 up to an input number and replaces multiples of 3 with \\"Fizz\\", multiples of 5 with \\"Buzz\\", and multiples of 3 and 5 with \\"FizzBuzz\\"?","solution":"def fizz_buzz_count(n): Creates a space-separated list counting from 1 to n, replacing multiples of 3 with \\"Fizz\\", multiples of 5 with \\"Buzz\\", and multiples of 3 and 5 with \\"FizzBuzz\\". Parameters: n (int): The upper limit of the count Returns: str: A space-separated list with the described replacements result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return \\" \\".join(result)"},{"question":"Write a code to reverse a stack using only recursion and without using any additional data structures.","solution":"def reverse_stack(stack): Reverses a stack using only recursion and without using any additional data structures. if not stack: return # Remove the bottom element from stack and store it in a variable bottom = pop_bottom(stack) # Recursively reverse the rest of the stack reverse_stack(stack) # Append the bottom element to the top of the stack stack.append(bottom) def pop_bottom(stack): Helper function to remove the bottom element from the stack. element = stack.pop() if not stack: # If stack is now empty, we have reached the bottom return element else: # Recursively pop the bottom element bottom = pop_bottom(stack) # Push the top element back to the stack stack.append(element) return bottom"},{"question":"I need to access the nth element in a Python list. How can I write a function that allows me to retrieve the nth element of a given list?","solution":"def get_nth_element(lst, n): Returns the nth element of the list lst. Parameters: lst (list): The list from which the nth element is to be retrieved. n (int): The index of the element to retrieve (0-based index). Returns: Element at index n of lst if n is within bounds, else raises IndexError. try: return lst[n] except IndexError: raise IndexError(\\"Index out of range\\") from None"},{"question":"Write a Python function that takes in three side lengths as input and calculates the area of a triangle using Heron's formula. The function should round the result to 2 decimal places and return it. Additionally, the function should check if the given side lengths form a valid triangle (i.e., the sum of any two sides is greater than the third side). If the side lengths do not form a valid triangle, the function should raise a custom exception called \\"InvalidTriangleError\\".","solution":"import math class InvalidTriangleError(Exception): Custom exception to be raised when the sides do not form a valid triangle. pass def area_of_triangle(a, b, c): Calculate the area of a triangle using Heron's formula. Parameters: a (float): First side length b (float): Second side length c (float): Third side length Returns: float: Area of the triangle rounded to 2 decimal places Raises: InvalidTriangleError: If the side lengths do not form a valid triangle # Check for the validity of the triangle if not (a + b > c and a + c > b and b + c > a): raise InvalidTriangleError(\\"The given sides do not form a valid triangle.\\") # Calculate the semi-perimeter s = (a + b + c) / 2 # Calculate the area using Heron's formula area = math.sqrt(s * (s - a) * (s - b) * (s - c)) # Return the area rounded to 2 decimal places return round(area, 2)"},{"question":"I want to create a moving plot, refresh it every 2 seconds and identify a given point on the plot with respect to the previously plotted data. Can matplotlib in Python do that or is there another library which can help me with this problem?","solution":"import matplotlib.pyplot as plt import matplotlib.animation as animation import numpy as np def update_point(new_data_x, new_data_y, history_x, history_y, threshold): Identifies a given point with respect to the previously plotted data. Args: new_data_x (float) : The x coordinate of the new data point. new_data_y (float) : The y coordinate of the new data point. history_x (list) : The list of x coordinates of previous data points. history_y (list) : The list of y coordinates of previous data points. threshold (float) : Distance threshold to identify whether the new point is close to any previous point. Returns: closest_point (tuple) : The closest point from history if within threshold, else None. min_distance = float('inf') closest_point = None for hx, hy in zip(history_x, history_y): distance = np.sqrt((hx - new_data_x) ** 2 + (hy - new_data_y) ** 2) if distance < threshold and distance < min_distance: min_distance = distance closest_point = (hx, hy) return closest_point def animate_plot(): fig, ax = plt.subplots() history_x, history_y = [], [] threshold = 1.0 def update(frame): new_data_x = np.random.rand() * 10 new_data_y = np.random.rand() * 10 history_x.append(new_data_x) history_y.append(new_data_y) ax.clear() ax.plot(history_x, history_y, 'bo-') # Check if the new point is close to any previous points closest_point = update_point(new_data_x, new_data_y, history_x, history_y, threshold) if closest_point: ax.plot(*closest_point, 'ro') # Mark the closest point in red ax.plot(new_data_x, new_data_y, 'go') # Mark the new point in green plt.xlim([0, 10]) plt.ylim([0, 10]) ani = animation.FuncAnimation(fig, update, interval=2000) plt.show()"},{"question":"Write a Python program to unzip a given list of tuples into separate lists for each position in the tuples, with an additional constraint. The tuples in the list can be of varying sizes and you need to accommodate for that and fill in missing spots with a provided fill value if needed.","solution":"def unzip_with_fill(tuples, fill_value=None): Unzips a list of tuples into separate lists for each position in the tuples. Fill missing spots with the provided fill value. :param tuples: List of tuples to be unzipped. :param fill_value: Value to fill in missing spots. :return: A list of lists. Each sublist corresponds to the elements at the same position in the tuples. if not tuples: return [] max_length = max(len(t) for t in tuples) unzipped = [[] for _ in range(max_length)] for t in tuples: for i in range(max_length): if i < len(t): unzipped[i].append(t[i]) else: unzipped[i].append(fill_value) return unzipped"},{"question":"I am building a comment system and I would like to implement a way to hide comments based on a score. I want users to be able to assign either +1 (upvote) or -1 (downvote) to each comment. Comments with a score lower than -2 should be hidden from view. How can I implement this feature in Python, considering I might have thousands of comments?","solution":"def hide_comments(comments): Returns a list of comments to be hidden based on their score. Parameters: comments (list of dict): A list of dictionaries where each dictionary contains the 'comment' text and 'score' as key-value pairs. Returns: list of dict: A list of dictionaries with comments that have a score lower than -2. return [comment for comment in comments if comment['score'] < -2]"},{"question":"Write a simple program script in Python language to generate a sequence of Fibonacci numbers up to the nth term. The nth term should be an input from the user. Also, the program should include error handling for invalid data inputs such as string values or negative numbers.","solution":"def fibonacci_sequence(n): Generates a Fibonacci sequence up to the nth term. Parameters: n (int): The length of the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to the nth term. if not isinstance(n, int) or n < 0: raise ValueError(\\"The input must be a non-negative integer.\\") sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(a) a, b = b, a + b return sequence"},{"question":"Create a python program that takes a list of numbers as input and prints out the second largest number in the list.","solution":"def second_largest(numbers): Returns the second largest number in the list. if len(numbers) < 2: raise ValueError(\\"List must contain at least two numbers.\\") first, second = float('-inf'), float('-inf') for number in numbers: if number > first: first, second = number, first elif first > number > second: second = number if second == float('-inf'): raise ValueError(\\"There is no second distinct largest number in the list.\\") return second"},{"question":"Given a list of strings containing alphanumeric characters, special characters, and spaces, write a program that prints out the strings in uppercase without using built-in string manipulation functions (such as str.upper()), list comprehension, or any additional libraries/modules. The solution should have a time complexity of O(n), where n is the total number of characters across all strings in the list, and use only constant space (O(1)) in addition to the input list.","solution":"def uppercase_strings(lst): Prints the strings in uppercase. def my_upper(char): # Convert lowercase letters 'a'-'z' to uppercase 'A'-'Z' if 'a' <= char <= 'z': return chr(ord(char) - (ord('a') - ord('A'))) else: return char for string in lst: uppercase_str = '' for char in string: uppercase_str += my_upper(char) print(uppercase_str)"},{"question":"Write a lambda function in Python that calculates the standard deviation of a given list of numbers. In addition, provide a function that uses your lambda function to calculate the standard deviation for each column of a given 2D array (list of lists) and returns these as a list. Account for potential exceptions, like empty lists, list of non-numeric values, or an irregular 2D array.","solution":"import math # Lambda function to calculate standard deviation std_dev = lambda nums: math.sqrt(sum((x - (sum(nums) / len(nums))) ** 2 for x in nums) / len(nums)) if len(nums) > 0 else float('nan') def calc_column_std_dev(matrix): Calculates the standard deviation for each column of the given 2D array. :param matrix: List of lists where each inner list represents a row of the matrix. :return: List of standard deviations for each column. if not matrix or any(not isinstance(row, list) for row in matrix) or any(len(row) != len(matrix[0]) for row in matrix): raise ValueError(\\"Input must be a well-formed 2D array with rows of equal length.\\") columns = zip(*matrix) try: return [std_dev(list(col)) for col in columns if all(isinstance(x, (int, float)) for x in col)] except Exception as e: raise ValueError(\\"Matrix contains non-numeric data.\\") from e"},{"question":"Generate the Fibonacci sequence using a Python generator. Additionally, implement a feature to return the sequence in reverse order.","solution":"def fibonacci_generator(): A generator function for creating a Fibonacci sequence. Yields the next number in the sequence indefinitely. a, b = 0, 1 while True: yield a a, b = b, a + b def get_fibonacci_sequence(n, reverse=False): Returns the first n numbers in the Fibonacci sequence. Parameters: - n: int - The number of Fibonacci numbers to generate. - reverse: bool - If True, return the sequence in reverse order. Returns: List of the first n Fibonacci numbers, optionally reversed. fib_gen = fibonacci_generator() fib_sequence = [next(fib_gen) for _ in range(n)] if reverse: fib_sequence.reverse() return fib_sequence"},{"question":"Translate the following SQL command into Python using Def and If statements, and add functionality to filter users above 18 years old and have 'confirmed' status.","solution":"def filter_users(users): Filters users who are above 18 years old and have 'confirmed' status. Parameters: users (list of dict): List of users, where each user is represented as a dictionary with keys 'age' and 'status'. Returns: list of dict: List of filtered users. filtered_users = [] for user in users: if user['age'] > 18 and user['status'] == 'confirmed': filtered_users.append(user) return filtered_users"},{"question":"Write a Python function that takes a string input and formats it as a percentage value. The function should ensure that the input is a valid decimal number, rounds it to a specified number of decimal places, and then returns it with a percentage sign appended. If the input is not a valid decimal number, the function should raise a ValueError with a custom error message.","solution":"def format_percentage(value, decimal_places=2): Formats a given string input as a percentage value. The input must be a valid decimal number. Parameters: value (str): The input string to be formatted. decimal_places (int): The number of decimal places to round to (default is 2). Returns: str: The formatted percentage string. Raises: ValueError: If the input is not a valid decimal number. try: number = float(value) formatted_value = f\\"{round(number * 100, decimal_places):.{decimal_places}f}%\\" return formatted_value except ValueError: raise ValueError(\\"Invalid input: The provided value is not a valid decimal number.\\")"},{"question":"Create a 2D array with five rows and five columns. Each element in the array must be a unique prime number greater than 100. Additionally, include a piece of erroneous code that mistakenly assigns non-prime numbers less than 100 to some elements in the array, which should be identified and fixed.","solution":"import sympy def generate_prime_grid(rows, cols, start_value): Generates a grid with unique prime numbers starting from a given value. prime_array = [[None for _ in range(cols)] for _ in range(rows)] prime_gen = sympy.primepi(start_value) # Start from the first prime greater than start_value for i in range(rows): for j in range(cols): prime_gen += 1 prime_array[i][j] = sympy.prime(prime_gen) return prime_array def generate_erroneous_grid(): Erroneously assigns non-prime numbers less than 100 to some elements in the array. erroneous_grid = [ [101, 103, 107, 109, 113], [127, 131, 133, 139, 149], # 133 is not a prime [151, 157, 163, 80, 173], # 80 is not a prime and less than 100 [179, 181, 191, 193, 197], [199, 137, 211, 223, 227] ] return erroneous_grid def is_prime(num): Check if a number is a prime. return sympy.isprime(num) def fix_erroneous_grid(grid): Replace non-prime numbers in the grid with the next prime numbers greater than 100. fixed_grid = [] for row in grid: fixed_row = [] for num in row: if num <= 100 or not is_prime(num): num = sympy.nextprime(100) # Start replacing primes from 101 fixed_row.append(num) fixed_grid.append(fixed_row) return fixed_grid"},{"question":"Write a function in Python to merge two sorted arrays in descending order. The arrays may contain duplicate elements.","solution":"def merge_sorted_arrays_desc(arr1, arr2): Merge two sorted arrays into a single sorted array in descending order. Parameters: arr1 (list): First sorted array in descending order. arr2 (list): Second sorted array in descending order. Returns: list: A new array containing all elements from arr1 and arr2 in descending order. # Initialize pointers for both arrays i, j = 0, 0 merged_array = [] # Traverse both arrays and insert elements in merged_array while i < len(arr1) and j < len(arr2): if arr1[i] >= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Collect remaining elements of arr1, if any while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Collect remaining elements of arr2, if any while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a Python program to find the number of days in a month specified by the user. However, instead of using the calendar module, implement the logic by creating a dictionary that maps each month to its respective number of days, taking into account leap years. The program should also handle invalid inputs gracefully. For example, if the user enters a non-integer value, the program should display a warning message and prompt the user to enter a valid month number.","solution":"def is_leap_year(year): Returns True if the given year is a leap year, False otherwise. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False def days_in_month(month, year): Returns the number of days in the specified month of a given year. Handles leap years for February. days_in_month_dict = { 1: 31, 2: 28, # will be adjusted if leap year 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31 } if not isinstance(month, int) or not (1 <= month <= 12): raise ValueError(\\"Invalid month. Please provide an integer between 1 and 12.\\") if not isinstance(year, int) or year <= 0: raise ValueError(\\"Invalid year. Please provide a positive integer value for the year.\\") if month == 2 and is_leap_year(year): return 29 return days_in_month_dict[month]"},{"question":"Develop an algorithm to implement an in-order tree traversal using an iterative method without using recursion.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def inorder_traversal(root): Perform in-order traversal of a binary tree iteratively. Args: root (TreeNode): Root of the binary tree. Returns: List[int]: List of values in in-order. result = [] stack = [] current = root while current or stack: while current: stack.append(current) current = current.left current = stack.pop() result.append(current.value) current = current.right return result # Example usage: # root = TreeNode(1, None, TreeNode(2, TreeNode(3))) # print(inorder_traversal(root)) # Output: [1, 3, 2]"},{"question":"Write a code that takes a dictionary with mixed types as keys (i.e., containing both numeric and string data types) and values, and reverses the order of the keys. The dictionary has at least one string key, one integer key, one float key, and one tuple key. Empty strings or tuples are not valid inputs.","solution":"def reverse_dict_keys(input_dict): Reverses the order of the keys in the given dictionary. # Ensure the input dictionary is not empty if not input_dict: raise ValueError(\\"The input dictionary cannot be empty.\\") reversed_key_dict = {} keys = list(input_dict.keys()) for key in reversed(keys): reversed_key_dict[key] = input_dict[key] return reversed_key_dict"},{"question":"Create a new function that reverses the given input string and returns the reversed string. Additionally, implement a functionality that checks whether the reversed string is a palindrome (the same string when read forwards and backwards). If it is a palindrome, return the string and a message indicating it's a palindrome. If not, return the reversed string and a message indicating it's not a palindrome.","solution":"def reverse_string_and_check_palindrome(s): Reverses the given input string and checks whether the reversed string is a palindrome. Args: s (str): The input string Returns: tuple: A tuple containing the reversed string and a message indicating whether it's a palindrome. reversed_string = s[::-1] if s == reversed_string: return reversed_string, \\"The string is a palindrome\\" else: return reversed_string, \\"The string is not a palindrome\\""},{"question":"How should I code an algorithm in Python for performing a linear search on a given list?","solution":"def linear_search(lst, target): Performs a linear search for the target in the list. Parameters: lst (list): The list to search in. target: The value to search for. Returns: int: The index of the target if found, else -1. for index, value in enumerate(lst): if value == target: return index return -1"},{"question":"How to use Python to generate a random five-word sentence that follows a specific pattern: the first word must be a noun, the second word must be an adjective, the third word must be a verb in the past tense, the fourth word must be an adverb, and the fifth word must be a preposition. Additionally, create a function that allows the user to input a topic or theme for the sentence and outputs a sentence that incorporates the inputted theme while still following the specified word pattern.","solution":"import random nouns = [\\"dog\\", \\"cat\\", \\"car\\", \\"house\\", \\"flower\\"] adjectives = [\\"red\\", \\"big\\", \\"smart\\", \\"funny\\", \\"beautiful\\"] verbs_past_tense = [\\"ran\\", \\"jumped\\", \\"drove\\", \\"ate\\", \\"smiled\\"] adverbs = [\\"quickly\\", \\"happily\\", \\"sadly\\", \\"quietly\\", \\"loudly\\"] prepositions = [\\"to\\", \\"with\\", \\"on\\", \\"in\\", \\"under\\"] def generate_random_sentence(): Generates a random five-word sentence with a specific pattern: noun, adjective, verb(past tense), adverb, preposition. return f\\"{random.choice(nouns)} {random.choice(adjectives)} {random.choice(verbs_past_tense)} {random.choice(adverbs)} {random.choice(prepositions)}.\\" def generate_sentence_with_theme(theme): Generates a random five-word sentence with a specific pattern: noun, adjective, verb(past tense), adverb, preposition incorporating a given theme. themed_nouns = [theme, *nouns] return f\\"{random.choice(themed_nouns)} {random.choice(adjectives)} {random.choice(verbs_past_tense)} {random.choice(adverbs)} {random.choice(prepositions)}.\\" # Generate and print a random sentence print(generate_random_sentence()) # Generate and print a themed sentence print(generate_sentence_with_theme(\\"party\\"))"},{"question":"Consider the \`per_squared\` function, which is meant to accept three arguments - \`l\`, \`b\`, and \`h\` (representing the length, breadth, and height of a 3D box respectively) and return the value of the expression \`(2 * l * (b + h))\` squared. However, due to some design flaws, it fails when the values are directly passed to it. Your goal is to enhance the function by creating a decorator \`adjust_negatives\` that will handle negative input values by converting them to their positive equivalents before passing them to the \`per_squared\` function. Additionally, the decorator should handle the case when any of the input arguments are not numeric by raising a \`TypeError\`. To increase the difficulty, incorporate two layers of decorators, where the first decorator (\`validate_input\`) checks for non-numeric inputs, and the second decorator (\`convert_negatives_to_positives\`) converts negative values to positive without modifying the original function.","solution":"def validate_input(func): def wrapper(*args, **kwargs): # Check for non-numeric inputs for arg in args: if not isinstance(arg, (int, float)): raise TypeError(f\\"Non-numeric input: {arg}\\") return func(*args, **kwargs) return wrapper def convert_negatives_to_positives(func): def wrapper(*args, **kwargs): # Convert negative inputs to positive args = tuple(abs(arg) if isinstance(arg, (int, float)) else arg for arg in args) return func(*args, **kwargs) return wrapper @validate_input @convert_negatives_to_positives def per_squared(l, b, h): return (2 * l * (b + h)) ** 2"},{"question":"Write a code that allows a user to search a array of objects by any parameter, but the search must be case-insensitive and should consider only the first letter of each parameter. For example, searching for 'c' should return an object with the name starting with 'C', 'c', 'Ch', 'ch', etc. The search should also return all matches found, instead of just the first match. Additionally, the code should handle situations where the search parameter is an empty string or contains only whitespace characters, by returning an empty array in such cases. The code should also handle situations where the search parameter is a single character, by returning an array of objects whose corresponding parameter starts with that character, regardless of case.","solution":"def search_in_array(array_of_objects, search_param): Returns an array of objects filtered by the search parameter. Parameters: - array_of_objects: List of dictionaries to search. - search_param: String parameter to search for (case-insensitive, looking only at first character). Returns: - List of dictionaries that match the search criteria. # Strip search_param to handle whitespace characters search_param = search_param.strip() # Return empty list if search_param is empty after stripping if not search_param: return [] # Convert search_param to lower case for case-insensitive comparison search_param = search_param.lower() # Find and return all matching objects return [obj for obj in array_of_objects if any( str(value).lower().startswith(search_param) for value in obj.values() )]"},{"question":"Write a Python function that takes in a list of integers and returns the maximum value among them. Make sure to include a docstring that clearly describes the problem being solved and how the function works. Additionally, add comments to your code to explain the logic behind each step.","solution":"def max_value(nums): Returns the maximum value in a list of integers. Parameters: nums (list): A list of integers. Returns: int: The maximum value in the list. Raises: ValueError: If the list is empty. if not nums: # Raise an error if the input list is empty raise ValueError(\\"The input list must not be empty\\") # Initialize the maximum value with the first element in the list. max_val = nums[0] # Iterate over the list to find the maximum value. for num in nums[1:]: if num > max_val: max_val = num return max_val"},{"question":"Write a Python function to randomly generate a set of 50 unique integers within the range of -1000 to 1000 and return the sum of all the numbers in the set. However, there's a twist - the function should not use any in-built Python libraries or functions to generate random numbers.","solution":"def simple_random(seed): Simple Linear Congruential Generator (LCG) to generate pseudo-random numbers. The generated numbers will be in the range [-2**31, 2**31]. a = 1664525 c = 1013904223 m = 2**32 return (a * seed + c) % m def generate_unique_integers(n, min_val, max_val): Generate a set of n unique integers within the range [min_val, max_val]. result_set = set() seed = 42 # Any arbitrary seed value to start the generation while len(result_set) < n: seed = simple_random(seed) # Convert to the desired range value = min_val + (seed % (max_val - min_val + 1)) result_set.add(value) return result_set def sum_of_unique_integers(): Generate a set of 50 unique integers within the range of -1000 to 1000 and return the sum of all the numbers in the set. unique_integers = generate_unique_integers(50, -1000, 1000) return sum(unique_integers)"},{"question":"Write a python method to remove duplicate values from a list while preserving the original order of elements.","solution":"def remove_duplicates(input_list): Removes duplicate values from the input list while preserving the original order. Parameters: input_list (list): The list from which to remove duplicates. Returns: list: A new list with duplicates removed and original order preserved. seen = set() output_list = [] for item in input_list: if item not in seen: seen.add(item) output_list.append(item) return output_list"},{"question":"Write a program that can generate the first N numbers in the Fibonacci sequence, where N is input by the user. Additionally, modify the program to include an option where the user can choose to either generate the sequence iteratively or recursively. While both methods can be used to solve the problem, highlight the differences and potential limitations of each approach in terms of time and memory complexity, as well as stack usage. Specifically, explain how the choice of method can impact the program's performance and scalability based on the value of N, and provide examples of scenarios where one method may be more suitable than the other.","solution":"def fibonacci_iterative(n): Returns the first N numbers in the Fibonacci sequence using iteration. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence def fibonacci_recursive(n, sequence=None): Returns the first N numbers in the Fibonacci sequence using recursion. if n <= 0: return [] if sequence is None: sequence = [0, 1] if len(sequence) >= n: return sequence[:n] return fibonacci_recursive(n, sequence + [sequence[-1] + sequence[-2]]) # Differences, Potential Limitations, and Usage Scenarios: # Iterative Method: # - Time Complexity: O(N) # - Space Complexity: O(N) # - Iterative approach does not use the call stack, so it is more memory-efficient and faster. # - Suitable for large values of N due to its efficiency. # Recursive Method: # - Time Complexity: O(N) for memoized, but the default implementation here is O(2^N) without memoization. # - Space Complexity: Up to O(N) due to call stack usage for depth levels. # - Recursive approach can be limited by stack size and may result in stack overflow for large values of N # unless optimized with techniques like memoization. # - Suitable for educational purposes or cases where N is relatively small."},{"question":"Given two strings, write a Python program to check if they are anagrams. Anagrams are two words that can be formed by rearranging the letters of another word. Your program should also account for the frequency of each character in the strings.","solution":"def are_anagrams(str1, str2): Returns True if the two strings are anagrams, False otherwise. from collections import Counter return Counter(str1) == Counter(str2)"},{"question":"Write a program in Python to find the power of a number using recursion. The program should also handle negative exponents and return a \\"Not a number\\" message for float('inf') when the power is less than 0. Additionally, implement the solution in such a way that it avoids the usage of Python's default power function (i.e., pow() or ** operator).","solution":"def power(base, exp): Calculate the power of a number using recursion. Handles negative exponents and returns \\"Not a number\\" for float('inf') when the power is less than 0. if base == float('inf') and exp < 0: return \\"Not a number\\" # Base case for exponent 0 if exp == 0: return 1 # Base case for exponent 1 if exp == 1: return base # Handle negative exponent if exp < 0: return 1 / power(base, -exp) # Recursive call for positive exponent return base * power(base, exp - 1)"},{"question":"Given a list of elements, write a program to remove all duplicates from the list while preserving the original order of the elements. The solution should have a time complexity of O(n) and a space complexity of O(n), where n is the number of elements in the list. Additionally, the solution should not use any built-in functions or libraries for manipulating the list or creating a new data structure. The list can only contain integers and can have up to 10^6 elements.","solution":"def remove_duplicates(lst): Remove duplicates from the list while preserving the original order of the elements. Parameters: lst (list): A list of integers. Returns: list: A list with duplicates removed while preserving the original order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Given the following faulty code which attempts to calculate the total sales tax for a given shopping basket as a percentage, identify and fix the issues to correctly implement a function. Note that the sales tax is 8% and it should be rounded up to the nearest two decimal places.","solution":"def calculate_total_sales_tax(basket): Calculate the total sales tax for a given shopping basket. Args: basket (list of floats): A list containing the prices of the items in the basket. Returns: float: The total sales tax rounded to two decimal places. sales_tax_rate = 0.08 total_tax = sum(basket) * sales_tax_rate return round(total_tax, 2)"},{"question":"Create a Python program to calculate the area of different shapes. The program should have functions for calculating the area of a square, rectangle, circle, and triangle. It should also include a main script that asks the user to choose a shape and then asks for the necessary dimensions to calculate the area.","solution":"import math def area_square(side): Calculate the area of a square. Parameters: side (float): The length of the side of the square. Returns: float: The area of the square. return side ** 2 def area_rectangle(length, width): Calculate the area of a rectangle. Parameters: length (float): The length of the rectangle. width (float): The width of the rectangle. Returns: float: The area of the rectangle. return length * width def area_circle(radius): Calculate the area of a circle. Parameters: radius (float): The radius of the circle. Returns: float: The area of the circle. return math.pi * (radius ** 2) def area_triangle(base, height): Calculate the area of a triangle. Parameters: base (float): The base of the triangle. height (float): The height of the triangle. Returns: float: The area of the triangle. return 0.5 * base * height"},{"question":"Write a Python program that prompts the user to enter a positive integer 'n', and then finds and prints the 'n' largest elements in a randomly generated list of 1000 integers between 0 and 10000. The program should also ensure that 'n' is no larger than the length of the list by repeating the prompt until a valid input is given.","solution":"import random def find_largest_elements(n): This function generates a list of 1000 random integers between 0 and 10000, and returns the 'n' largest elements from that list. if n < 1 or n > 1000: raise ValueError(\\"n must be a positive integer no larger than 1000\\") random_list = [random.randint(0, 10000) for _ in range(1000)] largest_elements = sorted(random_list, reverse=True)[:n] return largest_elements def main(): while True: try: n = int(input(\\"Enter a positive integer 'n' (no larger than 1000): \\")) if n > 0 and n <= 1000: break else: print(\\"Please enter a positive integer no larger than 1000.\\") except ValueError: print(\\"Invalid input. Please enter a valid positive integer.\\") largest_elements = find_largest_elements(n) print(f\\"The {n} largest elements in the list are: {largest_elements}\\") if __name__ == \\"__main__\\": main()"},{"question":"Write a Python program to generate a histogram for a given list of numbers, but instead of counting the occurrences of each number, count the occurrences of the digit 7 in the binary representation of each number.","solution":"def digit_seven_histogram(numbers): Generate a histogram showing the occurrences of digit 7 in the binary representation of each number in the input list. histogram = {} for number in numbers: binary_representation = bin(number)[2:] count_sevens = binary_representation.count('7') if count_sevens in histogram: histogram[count_sevens] += 1 else: histogram[count_sevens] = 1 return histogram"},{"question":"Write a program in Python that generates a list of all prime numbers within a given range. The program should take two integers as input, representing the start and end of the range, and should output the prime numbers in that range. Make sure your program is efficient and can handle large ranges, even up to 10^6. Avoid using external libraries, and focus on optimizing the algorithm used to find the prime numbers. Additionally, your program should be able to handle ranges where the start number is greater than the end number, and should output an appropriate message in such cases.","solution":"def generate_primes(start, end): Generates a list of all prime numbers within a given range. :param start: The starting integer of the range. :param end: The ending integer of the range. :return: A list of prime numbers within the specified range. if start > end: return \\"Invalid range: start should be less than or equal to end\\" if end < 2: return [] sieve = [True] * (end + 1) sieve[0] = sieve[1] = False for num in range(2, int(end**0.5) + 1): if sieve[num]: for multiple in range(num*num, end + 1, num): sieve[multiple] = False return [num for num in range(max(2, start), end + 1) if sieve[num]]"},{"question":"Create a Python program to calculate the Fibonacci sequence until the n-th number and print the result. In the Fibonacci sequence, the first two numbers are 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the n-th number. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_value = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_value) return fib_sequence"},{"question":"I need ordering of document data using rule like LIFO (Last in First out). Say, someone uploaded multiple documents using an 'add' button and now using a 'delete' button, I need to delete the latest uploaded document first. How to implement in Python?","solution":"class DocumentManager: def __init__(self): self.documents = [] def add_document(self, document): Adds a new document. self.documents.append(document) def delete_latest_document(self): Deletes the latest document added using LIFO order. if self.documents: return self.documents.pop() else: return None def get_all_documents(self): Returns all documents. return self.documents"},{"question":"Write a Python program that can find the maximum and minimum numbers from a list of numbers provided as input by the user. The program should allow the user to input the number of elements in the list, followed by each element, all through the console. Ensure that the program handles invalid inputs gracefully and can run until the user decides to quit. Additionally, the program should print out both the maximum and minimum numbers found in the list to the console. Finally, your code should be well-documented and properly formatted to ensure easy readability and maintainability.","solution":"def find_max_and_min(numbers): Returns the maximum and minimum numbers from a list of numbers. :param numbers: List of numbers. :return: A tuple containing the maximum and minimum numbers (max, min). if not numbers: return None, None max_num = max(numbers) min_num = min(numbers) return max_num, min_num def main(): while True: try: n = int(input(\\"Enter the number of elements in the list (or -1 to quit): \\")) if n == -1: break numbers = [] for _ in range(n): number = float(input(\\"Enter a number: \\")) numbers.append(number) max_num, min_num = find_max_and_min(numbers) print(f\\"The maximum number is: {max_num}\\") print(f\\"The minimum number is: {min_num}\\") except ValueError: print(\\"Invalid input. Please enter valid numbers.\\") except Exception as e: print(f\\"An error occurred: {e}\\") if __name__ == \\"__main__\\": main()"},{"question":"Given two 2D coordinates (x1, y1) and (x2, y2), plot a line from (x1, y1) to (x2, y2) using only integer coordinates. The line should be as close as possible to the actual line, but due to the requirement of having integer coordinates, it might appear staircased. This algorithm is known as Bresenham Line Algorithm. Implement this algorithm in Python.","solution":"def bresenham_line(x1, y1, x2, y2): Generates a list of integer coordinates approximating a line from (x1, y1) to (x2, y2) using Bresenham's line algorithm. points = [] dx = abs(x2 - x1) dy = abs(y2 - y1) sx = 1 if x1 < x2 else -1 sy = 1 if y1 < y2 else -1 err = dx - dy while True: points.append((x1, y1)) if x1 == x2 and y1 == y2: break e2 = 2 * err if e2 > -dy: err -= dy x1 += sx if e2 < dx: err += dx y1 += sy return points"},{"question":"Create a Python program to sort a dictionary's content based on the values that are lists of numbers, in descending order. The dictionary keys represent unique identifiers, and the values are lists of three numbers (e.g., {1:[170, 80, 60], 2:[160, 45, 85], 3:[100, 150, 120]}). Additionally, write a function to remove any list from the dictionary values where the first number in the list is less than 150. Use the dictionary provided above as an example.","solution":"def sort_dict_by_values(d): Sorts a dictionary by the sum of its numerical list values in descending order. return dict(sorted(d.items(), key=lambda item: sum(item[1]), reverse=True)) def remove_lists_with_first_number_less_than(d, threshold): Removes lists from dictionary values where the first number in the list is less than the given threshold. return {k: v for k, v in d.items() if v[0] >= threshold} # Example dictionary example_dict = {1: [170, 80, 60], 2: [160, 45, 85], 3: [100, 150, 120]} sorted_dict = sort_dict_by_values(example_dict) filtered_dict = remove_lists_with_first_number_less_than(example_dict, 150)"},{"question":"In this task, you are given inputs i, j, and A, where i and j are integers and A is a list. You need to find all elements of A from the ith element to the jth element, reverse the order in which they occur, and then concatenate them to output the resultant string. i and j will be non-negative, and will always have a value less than the length of A. i will always be less than j. Perform the operations in order, i.e., do not concatenate the elements and then reverse the string.","solution":"def reverse_sublist_concatenate(i, j, A): Returns a string that consists of list elements from index i to j in reversed order. Parameters: i (int): The starting index. j (int): The ending index. A (list of str): The list of string elements. Returns: str: A string of elements from index i to j reversed and concatenated. sublist = A[i:j+1] # Slice the list from i to j (inclusive) sublist.reverse() # Reverse the sliced list return ''.join(sublist) # Concatenate the reversed elements and return the result"},{"question":"How to do binary linear classification using logistic regression by numpy and matplotlib in python?","solution":"import numpy as np import matplotlib.pyplot as plt # Function for sigmoid activation def sigmoid(z): return 1 / (1 + np.exp(-z)) # Function to train logistic regression model def train_logistic_regression(X, y, learning_rate=0.01, iterations=1000): m, n = X.shape X = np.hstack((np.ones((m, 1)), X)) # Adding bias term theta = np.zeros(n + 1) for _ in range(iterations): z = np.dot(X, theta) h = sigmoid(z) gradient = np.dot(X.T, (h - y)) / m theta -= learning_rate * gradient return theta # Function to make predictions def predict(X, theta): X = np.hstack((np.ones((X.shape[0], 1)), X)) # Adding bias term probabilities = sigmoid(np.dot(X, theta)) return [1 if p >= 0.5 else 0 for p in probabilities] # Function to plot decision boundary def plot_decision_boundary(X, y, theta): plt.figure(figsize=(10, 6)) plt.scatter(X[:, 0], X[:, 1], c=y, cmap='viridis') x_boundary = np.array([np.min(X[:, 0]), np.max(X[:, 0])]) y_boundary = -(theta[0] + theta[1] * x_boundary) / theta[2] plt.plot(x_boundary, y_boundary, 'r') plt.xlabel('Feature 1') plt.ylabel('Feature 2') plt.title('Decision Boundary') plt.show()"},{"question":"Write a Python function that takes a list of integers as input and returns the second smallest number in the list. Make sure to handle cases where the list contains duplicates and ensure that the function has a time complexity of O(n).","solution":"def second_smallest(numbers): Returns the second smallest number in the list. If the list contains less than 2 unique numbers, return None. if len(numbers) < 2: return None first, second = float('inf'), float('inf') for number in numbers: if number <= first: if number < first: first, second = number, first elif number < second: second = number return second if second != float('inf') else None"},{"question":"Create a Python program that reads a list of integers from the input and performs a cyclic shift on the elements. The number of positions to shift and the direction (left or right) should be specified by the user. After performing the shift operation, print the resulting list. If an invalid direction or shift value is given, display an error message.","solution":"def cyclic_shift(lst, shift, direction): Perform a cyclic shift on the list. :param lst: List of integers to be shifted. :param shift: Number of positions to shift. :param direction: Direction of shift ('left' or 'right'). :return: Shifted list or an error message if invalid direction or shift value is given. if not isinstance(shift, int) or shift < 0: return \\"Error: shift must be a non-negative integer\\" if direction not in ('left', 'right'): return \\"Error: direction must be 'left' or 'right'\\" n = len(lst) shift = shift % n # To handle shifts larger than the list size if direction == 'left': return lst[shift:] + lst[:shift] elif direction == 'right': return lst[-shift:] + lst[:-shift]"},{"question":"Please write a function that takes in a list and outputs the maximum number in the list. However, you are not allowed to use any built-in functions or methods that directly give you the maximum element of a list (e.g. max()). Instead, you need to implement your own algorithm to find the maximum element.","solution":"def find_maximum(lst): Returns the maximum number in the list. Args: lst (list): a list of numbers. Returns: int/float: the maximum number in the list. if not lst: # If the list is empty raise ValueError(\\"The list is empty\\") max_number = lst[0] for num in lst: if num > max_number: max_number = num return max_number"},{"question":"Explain the bubble sort algorithm and provide a step-by-step explanation of how it works. Additionally, write a function in your preferred programming language that implements the bubble sort algorithm and analyze its time complexity. Discuss the advantages and disadvantages of using bubble sort compared to other sorting algorithms, such as quicksort or mergesort, and explain in which scenarios bubble sort might still be a reasonable algorithm to use.","solution":"def bubble_sort(arr): Sorts an array in ascending order using the bubble sort algorithm. Parameters: arr (list): List of elements to be sorted. Returns: list: Sorted list. n = len(arr) for i in range(n): # Track if any elements were swapped during this pass swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap elements if they are in the wrong order arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no elements were swapped, the list is already sorted if not swapped: break return arr"},{"question":"Write a Python function that takes two lists and returns a new list which contains only the unique elements from both of the lists. The function should also remove any duplicates within each list before combining them.","solution":"def unique_elements_from_lists(list1, list2): Takes two lists and returns a new list which contains only the unique elements from both lists. Removes duplicates within each list before combining them. unique_set1 = set(list1) unique_set2 = set(list2) combined_unique_set = unique_set1.union(unique_set2) return list(combined_unique_set)"},{"question":"Develop a Python script that converts a given list of temperatures from Kelvin to Celsius and then finds the average of these Celsius temperatures. The script should be able to take a list of temperatures as input and return the average, rounded to two decimal places. For an added challenge, ensure that the script includes exception handling for non-numeric inputs and also provides a friendly error message if any temperatures in the list are outside the valid Kelvin range (i.e., less than 0 K).","solution":"def kelvin_to_celsius(kelvin): Converts a temperature from Kelvin to Celsius. return kelvin - 273.15 def average_celsius_from_kelvin(temperatures): Converts a list of temperatures from Kelvin to Celsius and returns the average of these Celsius temperatures, rounded to two decimal places. Includes exception handling for non-numeric inputs and invalid Kelvin temperatures. if not isinstance(temperatures, list): raise ValueError(\\"Input must be a list\\") celsius_temperatures = [] for temp in temperatures: if not isinstance(temp, (int, float)): raise ValueError(f\\"Non-numeric temperature found: {temp}\\") if temp < 0: raise ValueError(f\\"Invalid temperature in Kelvin range: {temp}\\") celsius_temperatures.append(kelvin_to_celsius(temp)) if not celsius_temperatures: return 0.0 return round(sum(celsius_temperatures) / len(celsius_temperatures), 2)"},{"question":"Write a Python code snippet to sort a dictionary by its values in descending order, but also consider the alphabetical order of keys with the same value.","solution":"def sort_dict_by_value_then_key_desc(d): Sorts a dictionary by its values in descending order, and by keys lexicographically in ascending order in case of a tie in values. Parameters: d (dict): The dictionary to be sorted. Returns: dict: A new dictionary sorted by the specified criteria. sorted_items = sorted(d.items(), key=lambda item: (-item[1], item[0])) return dict(sorted_items)"},{"question":"Develop a codebook containing five uncommon symbols and their corresponding meanings. Then, write a Python function that encrypts a given sentence using these symbols. The symbols must not be limited to single characters and should include a mix of characters, numbers, and/or special symbols. Additionally, implement a decryption function to translate the encoded message back into its original form. To ensure the correctness of your functions, include a test function with provided data points.","solution":"# Codebook with five uncommon symbols and their corresponding meanings codebook = { 'a': '@!', 'e': '3#', 'i': '&1', 'o': '*0', 'u': '%^' } def encrypt(sentence): Encrypt a given sentence using the codebook. encrypted_sentence = \\"\\" for char in sentence: if char in codebook: encrypted_sentence += codebook[char] else: encrypted_sentence += char return encrypted_sentence def decrypt(encrypted_sentence): Decrypt a given encrypted sentence using the codebook. reversed_codebook = {v: k for k, v in codebook.items()} decrypted_sentence = \\"\\" i = 0 while i < len(encrypted_sentence): match = False for symbol in reversed_codebook: if encrypted_sentence[i:i+len(symbol)] == symbol: decrypted_sentence += reversed_codebook[symbol] i += len(symbol) match = True break if not match: decrypted_sentence += encrypted_sentence[i] i += 1 return decrypted_sentence"},{"question":"You are given a list of n distinct integers, each integer falls within the range [-50, 50]. Design a recursive algorithm to sort the list in increasing order without using any built-in sorting functions. Moreover, provide a case to test your code. Please tweak your algorithm to operate in O(nlogn) time, characteristic of a divide-and-conquer strategy.","solution":"def quicksort(arr): Quicksort algorithm to sort an array in increasing order. if len(arr) <= 1: return arr else: pivot = arr[0] less_than_pivot = [x for x in arr[1:] if x <= pivot] greater_than_pivot = [x for x in arr[1:] if x > pivot] return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)"},{"question":"Write a function to implement the sequential search algorithm to find the maximum and minimum elements in an array. In addition to this, calculate the total number of comparisons made during the search. The function should return the maximum, minimum and the total number of comparisons made.","solution":"def find_max_min(arr): This function finds the maximum and minimum elements in an array using a sequential search algorithm and returns the maximum, minimum, and the total number of comparisons made. :param arr: List of integers :return: Tuple (max_element, min_element, comparisons) if not arr: raise ValueError(\\"Array must not be empty\\") max_element = arr[0] min_element = arr[0] comparisons = 0 for i in range(1, len(arr)): comparisons += 2 if arr[i] > max_element: max_element = arr[i] if arr[i] < min_element: min_element = arr[i] return max_element, min_element, comparisons"},{"question":"Encrypt the following string using an XOR encryption algorithm with a key of 'hello': \\"This is a secret message\\" Also, provide the decryption function to convert the encrypted string back to its original form.","solution":"def xor_encrypt_decrypt(input_string, key): Encrypts or decrypts the input_string using XOR encryption with the provided key. output = ''.join(chr(ord(c) ^ ord(key[i % len(key)])) for i, c in enumerate(input_string)) return output # Encrypt the message encrypted_message = xor_encrypt_decrypt(\\"This is a secret message\\", \\"hello\\") # Decrypt the message decrypted_message = xor_encrypt_decrypt(encrypted_message, \\"hello\\")"},{"question":"Write a Python function that takes a matrix of numbers as input and returns a list of lists, where each inner list represents the row-wise maximum of the input matrix. If the input is not a proper matrix (i.e., rows of unequal length or contains non-numeric elements), the function should raise a ValueError.","solution":"def row_wise_max(matrix): Returns a list of lists with the maximum value of each row in the input matrix. Raises a ValueError if the input is not a proper matrix (i.e., rows of unequal length or contains non-numeric elements). if not matrix or not all(isinstance(row, list) for row in matrix): raise ValueError(\\"Input must be a list of lists.\\") row_length = len(matrix[0]) if any(len(row) != row_length for row in matrix): raise ValueError(\\"All rows must be of the same length.\\") if any(not all(isinstance(item, (int, float)) for item in row) for row in matrix): raise ValueError(\\"Matrix must contain only numbers.\\") return [[max(row)] for row in matrix]"},{"question":"Update the code to return a different string depending on the value of the variable test. If test is equal to 1, return the string \\"One\\". If test is equal to 2, return the string \\"Two\\". If test is equal to 3, return the string \\"Three\\". If test is equal to 4, return the string \\"Four\\". If test is equal to 5, return the string \\"Five\\". If test is equal to any other value, return the string \\"Unknown\\".","solution":"def number_to_string(test): Given an integer, return a corresponding string based on its value. if test == 1: return \\"One\\" elif test == 2: return \\"Two\\" elif test == 3: return \\"Three\\" elif test == 4: return \\"Four\\" elif test == 5: return \\"Five\\" else: return \\"Unknown\\""},{"question":"How can I simulate a scenario in Python where I have 100 prisoners and 100 boxes, each with a unique number from 1 to 100, in random order? The prisoners also have numbers from 1 to 100. Each prisoner can open 50 boxes to try to find their matching number and if all prisoners find their number, they all win. How can I model this game and find the probability of winning? Can you provide a Python code for this?","solution":"import random def find_number(strategy, boxes, prisoner_number): Simulates a prisoner following a given strategy to find their number. box_to_open = prisoner_number for _ in range(50): if boxes[box_to_open] == prisoner_number: return True box_to_open = boxes[box_to_open] return False def simulate_prisoners_game(): Simulates the game for 100 prisoners and returns whether all prisoners found their number. prisoners = list(range(100)) boxes = list(range(100)) random.shuffle(boxes) # Randomize the numbers in the boxes for prisoner in prisoners: if not find_number(strategy=find_number, boxes=boxes, prisoner_number=prisoner): return False return True def probability_simulation(runs): Calculates the probability of winning the prisoners game over a number of runs. wins = 0 for _ in range(runs): if simulate_prisoners_game(): wins += 1 return wins / runs"},{"question":"Build a Python program that calculates the harmonic mean of a series of numbers stored in a CSV file. The program should handle exceptions for non-numeric values and should report an error if the file cannot be located or opened. The output should display both the harmonic mean of the data and the number of numeric values considered in the calculation.","solution":"import csv import statistics def harmonic_mean(numbers): Calculate the harmonic mean of a list of numbers. Handles cases where the list is empty or contains non-positive numbers by raising ValueError. if not numbers: raise ValueError(\\"The list of numbers is empty.\\") return statistics.harmonic_mean(numbers) def read_numbers_from_csv(file_path): Reads numbers from a CSV file and handles exceptions for non-numeric values and file access errors. Returns a tuple of the list of numbers and the count of numeric values considered. numbers = [] try: with open(file_path, mode='r') as file: reader = csv.reader(file) for row in reader: for item in row: try: num = float(item) numbers.append(num) except ValueError: print(f\\"Non-numeric value encountered: {item}. Skipping.\\") return numbers, len(numbers) except FileNotFoundError: raise FileNotFoundError(f\\"The file {file_path} cannot be located or opened.\\") except Exception as e: raise e def calculate_harmonic_mean_from_csv(file_path): Reads numbers from a CSV file, calculates and prints the harmonic mean and the count of numeric values. numbers, count = read_numbers_from_csv(file_path) if count == 0: raise ValueError(\\"No numeric values found in the file.\\") h_mean = harmonic_mean(numbers) return h_mean, count"},{"question":"Define a python function called \`\`string_length\`\` that can take a string as an argument and output the length of that string. However, the function should also handle the case where the input string is None or an empty string and return an appropriate error message.","solution":"def string_length(s): Returns the length of the input string 's'. If 's' is None or an empty string, returns an appropriate error message. if s is None: return \\"Input is None\\" elif s == \\"\\": return \\"Input is an empty string\\" else: return len(s)"},{"question":"Write 10 lines of a Python function that will reverse any given string.","solution":"def reverse_string(s): Returns the reverse of a given string s. Args: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Develop a Python method named 'mergeAndSmoothLists' that takes two arguments, both of which are arrays of numerical values. This function should merge the two lists into one list, eliminate all duplicate numbers, and then sort the list in ascending order.","solution":"def mergeAndSmoothLists(list1, list2): Merges two lists, removes duplicates, and sorts the result in ascending order. merged_list = list(set(list1 + list2)) merged_list.sort() return merged_list"},{"question":"Rewrite the following Python function without using any if or elif statements. Additionally, you are not allowed to use any logical operators (and, or, not).","solution":"def categorize_age(age): return (\\"child\\", \\"teen\\", \\"adult\\", \\"senior\\")[ (age >= 13) + (age >= 18) + (age >= 65) ]"},{"question":"Translate the recursive process for computing the Fibonacci function into an iterative one that employs dynamic programming for enhanced computational efficiency. Additionally, implement a function to calculate the n-th Fibonacci number with n up to 10^6, and another function to test its correctness through a series of assertions.","solution":"def fibonacci(n): Computes the n-th Fibonacci number using an iterative approach with dynamic programming. if n == 0: return 0 elif n == 1: return 1 fibs = [0] * (n + 1) fibs[1] = 1 for i in range(2, n + 1): fibs[i] = fibs[i - 1] + fibs[i - 2] return fibs[n]"},{"question":"Given a list of numbers, write Python code to print the sum of all elements in the list.","solution":"def sum_of_list(numbers): Returns the sum of all elements in the list. return sum(numbers)"},{"question":"Given two strings, str1 = \\"python\\" and str2 = \\"coding\\", write a Python program to find the longest common subsequence between the two strings.","solution":"def longest_common_subsequence(str1, str2): Returns the longest common subsequence between two strings str1 and str2. m, n = len(str1), len(str2) # Create a 2D array to store lengths of longest common subsequence. dp = [[None] * (n + 1) for i in range(m + 1)] # Building the dp array bottom up approach. for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) # Now dp[m][n] contains the length of LCS. index = dp[m][n] # Create a list to store the LCS. lcs = [\\"\\"] * (index + 1) lcs[index] = \\"\\" i, j = m, n while i > 0 and j > 0: # If current characters in both strings are the same, then it's part of LCS. if str1[i - 1] == str2[j - 1]: lcs[index - 1] = str1[i - 1] i -= 1 j -= 1 index -= 1 # If not, find the larger value and move accordingly. elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return ''.join(lcs)"},{"question":"Generate a Python function that correctly implements the logic for determining if the number 11 is present in a provided list of integers. However, there is a twist. Consider the following incorrect code snippet as a reference. Your task is to identify the mistakes, correct them, and provide a refined, efficient solution.","solution":"def contains_eleven(numbers): Checks if the list of integers contains the number 11. Parameters: numbers (list): A list of integers. Returns: bool: True if 11 is present in the list, False otherwise. return 11 in numbers"},{"question":"Define a recursive function to print out the elements in a list without using a loop. The function should also include a counter to keep track of the number of elements printed and should stop printing after a specified number of elements. Additionally, you should modify the function to only print elements that meet a certain condition, such as only printing even numbers.","solution":"def print_elements(lst, condition_function, max_elements, counter=0): Recursively prints elements in a list that meet a specified condition, up to a maximum number of elements. Args: lst : list The list of elements to print. condition_function : function A function that takes an element and returns True if the element should be printed. max_elements : int Maximum number of elements to print. counter : int, optional Internal counter to keep track of how many elements have been printed (default is 0). Returns: int The number of elements printed. if not lst or counter >= max_elements: return counter if condition_function(lst[0]): print(lst[0]) counter += 1 return print_elements(lst[1:], condition_function, max_elements, counter)"},{"question":"Create a Python variable a with value 5. Additionally, ensure that the variable a is of type int and cannot be modified or reassigned once it is initialized. Implement a solution that achieves this without using any built-in Python data types or methods.","solution":"class ImmutableVariable: def __init__(self, value): self._value = value @property def value(self): return self._value # Create an immutable variable a with value 5 a = ImmutableVariable(5)"},{"question":"Write a function in Python to remove duplicates from a list, but do not use any built-in functions or data structures such as set() or {}. Additionally, your function should preserve the original order of the elements in the list.","solution":"def remove_duplicates(lst): Removes duplicates from the list while preserving the original order. result = [] seen = [] for item in lst: if item not in seen: result.append(item) seen.append(item) return result"},{"question":"Reverse the order of elements in a given array, without using any built-in functions or creating a new array for storing the reversed elements. The solution should be implemented in-place, meaning that the original array should be modified directly.","solution":"def reverse_array(arr): Reverses the order of elements in the array in place. left = 0 right = len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1"},{"question":"Modify the code in Python to convert a lower case string to an upper case string, without using the built-in string method \`upper()\`, and without using any loops. The input string will only contain alphabetic characters.","solution":"def to_upper_case(s): Converts a lower case string to an upper case string. Arguments: s -- a string containing only lower case alphabetic characters Returns: A new string where all characters of the input string are in upper case. return ''.join(chr(ord(char) - 32) for char in s)"},{"question":"Write a snippet of code that finds the largest number in an array of integers, excluding any duplicates. The array must be of size greater than or equal to 100, and the integers must be within the range of [-1000, 1000]. The code should run in O(n) time complexity and O(1) space complexity.","solution":"def largest_unique_number(arr): Finds the largest number in the array, excluding duplicates. counts = {} # Count occurrences of each number. for num in arr: if num in counts: counts[num] += 1 else: counts[num] = 1 largest_unique = None # Find the largest number that occurs exactly once. for num in counts: if counts[num] == 1: if largest_unique is None or num > largest_unique: largest_unique = num return largest_unique"},{"question":"Write a Python program to remove stopwords from a text file. The program should read the text file and a list of stopwords, both provided as command line arguments. It should then output the filtered text without the stopwords to a new file, whose name is also provided as a command line argument.","solution":"import sys def remove_stopwords(input_file, stopwords_file, output_file): Remove stopwords from a text file and save the filtered text to a new file. :param input_file: The input text file containing the text to be filtered. :param stopwords_file: The text file containing the stopwords, one per line. :param output_file: The output text file to save the filtered text. # Read stopwords from file and store them in a set with open(stopwords_file, 'r') as sf: stopwords = set(sf.read().splitlines()) # Read input file and filter out stopwords with open(input_file, 'r') as inf: text = inf.read() words = text.split() filtered_words = [word for word in words if word.lower() not in stopwords] # Write filtered words to output file with open(output_file, 'w') as outf: outf.write(' '.join(filtered_words)) # Example usage: # remove_stopwords('input.txt', 'stopwords.txt', 'output.txt')"},{"question":"Write a python program to simulate a biased coin flip, where the probability of landing on heads is 0.6 and on tails is 0.4. The program should record the outcomes of 1000 coin flips and print the total number of heads and tails.","solution":"import random def biased_coin_flip(): Simulates a biased coin flip with a 0.6 probability of landing on heads and 0.4 probability of landing on tails. return 'heads' if random.random() < 0.6 else 'tails' def simulate_coin_flips(n): Simulates n biased coin flips and returns the counts of heads and tails. counts = {'heads': 0, 'tails': 0} for _ in range(n): result = biased_coin_flip() counts[result] += 1 return counts if __name__ == \\"__main__\\": results = simulate_coin_flips(1000) print(f\\"Total heads: {results['heads']}\\") print(f\\"Total tails: {results['tails']}\\")"},{"question":"Given two strings, haystack and needle, find the starting index of all occurrences of the needle within the haystack, taking into account case sensitivity. If the needle is not found, return an empty list. Additionally, do not use any built-in string search functions provided by your programming environment.","solution":"def find_occurrences(haystack, needle): Returns the starting index of all occurrences of the needle within the haystack. if not needle: return [] indices = [] haystack_len = len(haystack) needle_len = len(needle) for i in range(haystack_len - needle_len + 1): match = True for j in range(needle_len): if haystack[i + j] != needle[j]: match = False break if match: indices.append(i) return indices"},{"question":"Given a binary tree, you need to write a Python program to print out all the nodes at each level, starting from the root level. Ensure that the nodes at the same level are printed from left to right.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def level_order_traversal(root): Returns a list of lists, where each sublist contains the nodes at a given level starting from the root. if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) current_level = [] for _ in range(level_size): node = queue.popleft() current_level.append(node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(current_level) return result"},{"question":"Write a code to calculate the average of an array of integers. However, the array may contain negative integers and the code should handle this appropriately. Additionally, the code should also handle the case where the array is empty and return 0 as the average. The code should also be able to handle arrays with a very large number of elements, up to 10^6.","solution":"def average_array(arr): Returns the average of the array elements. If the array is empty, returns 0. if not arr: return 0 return sum(arr) / len(arr)"},{"question":"Write a script in Python for drawing a hollow irregular hexagon on the screen with user-defined sides. The program should validate the input to ensure that it is possible to form an irregular hexagon with the given sides.","solution":"import turtle def validate_hexagon_sides(sides): Validates if the given sides can form an irregular hexagon. Each pair of adjacent sides should sum up to more than the opposite side. if len(sides) != 6: return False for i in range(6): if sides[i] + sides[(i + 1) % 6] <= sides[(i + 3) % 6]: return False return True def draw_hollow_irregular_hexagon(sides): Draws a hollow irregular hexagon using turtle graphics with the given sides. if not validate_hexagon_sides(sides): raise ValueError(\\"The given sides cannot form an irregular hexagon.\\") angles = [120, 60, 120, 60, 120, 60] turtle.penup() turtle.goto(0, 0) turtle.pendown() for side, angle in zip(sides, angles): turtle.forward(side) turtle.left(angle) turtle.done() # To use the function: # sides = [50, 70, 50, 70, 50, 70] # draw_hollow_irregular_hexagon(sides)"},{"question":"What is the command to delete all occurrences of the element \\"5\\" from a given Python array, but without using any built-in Python methods or library functions?","solution":"def delete_all_occurrences(arr, element): Deletes all occurrences of the specified element from the given array. Parameters: arr (list): The list of elements element: The element to delete from the list Returns: list: A new list with all occurrences of the specified element removed result = [] for item in arr: if item != element: result.append(item) return result"},{"question":"Develop an algorithm to implement a tree traversal using an iterative approach instead of recursion, specifically for a binary search tree. Your solution should ensure to visit each node exactly once and maintain the order of traversal. In traditional recursion, the system call stack is used to remember the state (position) of the recursive function, which allows us to continue processing after the recursive call has finished. Implementing tree traversal iteratively without the use of recursion requires us to explicitly manage our own stack, usually using a data structure like a stack or deque.","solution":"class TreeNode: Represents a node in a binary search tree. def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def inorder_traversal(root): Performs an iterative inorder traversal of the binary search tree. Returns a list of node values in inorder sequence. result = [] stack = [] current = root while current is not None or stack: while current is not None: stack.append(current) current = current.left current = stack.pop() result.append(current.value) current = current.right return result"},{"question":"Write a Python program that calculates the factorial of a number using a while loop. Also, include error handling to ensure the input is a positive integer.","solution":"def factorial(n): Returns the factorial of a given positive integer n using a while loop. :param n: A positive integer :return: Factorial of n :raises ValueError: if n is not a positive integer if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a positive integer.\\") result = 1 while n > 1: result *= n n -= 1 return result"},{"question":"Develop a Python program that generates a list of Twin Primes between 1 and n, where n is a user input. Twin Primes are pairs of primes that are two units apart (like 11 and 13). Alongside this, make a function that checks the correctness of the generated list by comparing it against known values for certain intervals. Remember to optimize your code for larger inputs.","solution":"def is_prime(num): Checks if a number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def generate_twin_primes(n): Generates a list of twin primes up to n. twin_primes = [] prev_prime = 2 for num in range(3, n + 1, 2): if is_prime(num): if num - prev_prime == 2: twin_primes.append((prev_prime, num)) prev_prime = num return twin_primes"},{"question":"What is a recursive function in programming and how does it work? Provide an example of a recursive function that calculates the factorial of a number.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 # Base case else: return n * factorial(n-1) # Recursive case"},{"question":"Create a python function that takes a string argument and returns the number of uppercase letters in the string.","solution":"def count_uppercase_letters(s): Returns the number of uppercase letters in the string s. Args: s (str): The input string. Returns: int: The count of uppercase letters in the string. return sum(1 for char in s if char.isupper())"},{"question":"Write a python function that takes two arguments, a list of strings and a character. The function should return the number of strings in the list that contain the given character. If no character is provided, the function should return a dictionary where each key is one of the strings from the list and the value is the number of unique characters in that string.","solution":"def count_strings_containing_char(strings, char=None): if char: return sum(1 for string in strings if char in string) else: return {string: len(set(string)) for string in strings}"},{"question":"Write a code to calculate the hamming distance between two strings, but the strings can contain uppercase and lowercase letters, numbers, and special characters. Additionally, the code should handle strings with a maximum length of 1000 characters. The code should also ensure that the two strings are of equal length and return an error message if they are not.","solution":"def hamming_distance(str1, str2): Returns the Hamming distance between two strings of equal length. If the strings are not of equal length, returns an error message. if len(str1) != len(str2): return \\"Error: Strings must be of equal length.\\" distance = 0 for char1, char2 in zip(str1, str2): if char1 != char2: distance += 1 return distance"},{"question":"Using Python, write a code to display the current date and time in ISO8601 format. Also, write a function that manipulates the current datetime object to display it in a time zone of your choosing (not UTC). You should also account for daylight savings.","solution":"from datetime import datetime import pytz def get_current_datetime_iso(): Returns the current date and time in ISO8601 format. return datetime.now().isoformat() def get_datetime_in_timezone(timezone_str): Returns the current date and time in the specified timezone, accounting for daylight savings. Params: timezone_str (str): The timezone string, e.g., 'America/New_York' Returns: str: The current date and time in the specified timezone in ISO8601 format. tz = pytz.timezone(timezone_str) now = datetime.now(tz) return now.isoformat()"},{"question":"Given a list of fruits: \\"apple\\", \\"banana\\", \\"pear\\", \\"cherry\\". Now you are required to write a python program that generates a new list with each fruit name being repeated based on the length of the fruit name. But, there's a twist. You have to use both, a dictionary and list, to solve this problem. Use a dictionary to map the fruit names to their lengths first. Then use this dictionary to create the final list where each fruit name is repeated based on its length. Furthermore, the program should be able to handle any list of strings, not just the given list of fruits. For instance, if the input is [\\"dog\\", \\"elephant\\", \\"cat\\"], the output should be [\\"dog\\", \\"dog\\", \\"dog\\", \\"elephant\\", \\"elephant\\", \\"elephant\\", \\"elephant\\", \\"elephant\\", \\"elephant\\", \\"cat\\", \\"cat\\"].","solution":"def repeat_fruits(fruits): Takes a list of fruits (names) and generates a new list where each fruit name is repeated based on its length. Args: fruits (list): List of fruit names (strings). Returns: list: New list with fruit names repeated based on their length. fruit_lengths = {fruit: len(fruit) for fruit in fruits} repeated_fruits = [fruit for fruit in fruits for _ in range(fruit_lengths[fruit])] return repeated_fruits"},{"question":"Create a function in Python for sending an email using the SMTP protocol.","solution":"import smtplib from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart def send_email(subject, body, to_email, from_email, smtp_server, smtp_port, smtp_user, smtp_password): Sends an email using the SMTP protocol. Parameters: subject (str): Subject of the email. body (str): Body content of the email. to_email (str): Recipient email address. from_email (str): Sender email address. smtp_server (str): SMTP server address. smtp_port (int): SMTP server port. smtp_user (str): SMTP user for authentication. smtp_password (str): SMTP password for authentication. Returns: bool: True if the email was sent successfully, False otherwise. msg = MIMEMultipart() msg['From'] = from_email msg['To'] = to_email msg['Subject'] = subject msg.attach(MIMEText(body, 'plain')) try: server = smtplib.SMTP(smtp_server, smtp_port) server.starttls() server.login(smtp_user, smtp_password) server.sendmail(from_email, to_email, msg.as_string()) server.quit() return True except Exception as e: print(f\\"Error: {e}\\") return False"},{"question":"Utilizing the provided list and dictionary data, develop a Python code snippet with a function that not only identifies all the dictionaries with a prime number age value but also returns the average age of these prime-aged individuals. The function should handle scenarios where the database may contain duplicate names or ages and ensure the output is accurate regardless of these duplicates. You are provided with a list of dictionaries named \`db\` and a function \`is_prime\` that can be used to check if a number is prime. Your task is to write a function \`avg_prime_age\` that takes in the \`db\` list and returns the average age of the individuals whose age is a prime number.","solution":"def is_prime(n): Checks if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def avg_prime_age(db): Identifies all the dictionaries with a prime number age value and returns the average age of these prime-aged individuals. prime_ages = [entry['age'] for entry in db if is_prime(entry['age'])] if not prime_ages: return 0 # Return 0 if no prime ages are found return sum(prime_ages) / len(prime_ages)"},{"question":"Write a function in Python that takes two arguments, a list of strings and a letter, and returns the strings from the list which contain the letter. The function should ignore case sensitivity.","solution":"def filter_strings_with_letter(strings, letter): Returns the list of strings that contain the specified letter, ignoring case. Parameters: - strings: List[str], list of strings to be filtered. - letter: str, the letter to check for in the strings. Returns: - List[str] containing strings that have the specified letter. letter = letter.lower() return [string for string in strings if letter in string.lower()]"},{"question":"Write a python program that simulates a simple bank account. It should have the functionalities to deposit, withdraw and check the balance. Also, implement an exception handling mechanisms to prevent erroneous transactions like withdraw exceeding the balance.","solution":"class BankAccount: def __init__(self, starting_balance=0): self.balance = starting_balance def deposit(self, amount): if amount < 0: raise ValueError(\\"Deposit amount must be positive.\\") self.balance += amount def withdraw(self, amount): if amount < 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds.\\") self.balance -= amount def check_balance(self): return self.balance"},{"question":"Write a Python function that takes a list of strings and returns a dictionary where the keys are the unique strings from the list and the values are the lengths of those strings.","solution":"def string_lengths(strings): Takes a list of strings and returns a dictionary where the keys are the unique strings from the list and the values are the lengths of those strings. return {string: len(string) for string in set(strings)}"},{"question":"Given an infinite 2-dimensional integer grid with every cell initially 0, write a program that, given a list of cells for which you should flip their values and their neighbor's, outputs the resulting grid.","solution":"def flip_cells(grid, flips): Flips the value of the given cells and their neighbors on a 2D grid. :param list[list[int]] grid: 2D list representing the grid. :param list[tuple[int, int]] flips: List of coordinates (tuples) to flip. :return: The modified grid after all flips. :rtype: list[list[int]] def flip(x, y): if 0 <= x < len(grid) and 0 <= y < len(grid[0]): grid[x][y] ^= 1 for x, y in flips: flip(x, y) flip(x + 1, y) flip(x - 1, y) flip(x, y + 1) flip(x, y - 1) return grid"},{"question":"Given two lists my_list1 = [1, 2, 3, 4, 5] and my_list2 = [3, 4, 5, 6, 7], write a Python function that identifies the common elements between them and further returns these common elements in a sorted list without duplicates. Discuss the time complexity of your solution.","solution":"def find_common_elements(my_list1, my_list2): Identifies the common elements between two lists and returns them in a sorted list without duplicates. # Convert lists to sets to identify common elements and remove duplicates common_elements = set(my_list1).intersection(set(my_list2)) # Convert the set back to a list and sort it sorted_common_elements = sorted(list(common_elements)) return sorted_common_elements"},{"question":"Write a recursive function in Python to compute the nth Fibonacci number. Then, modify the function to return the sequence of all Fibonacci numbers up to and including the nth number. The sequence should be returned as a list.","solution":"def fibonacci_recursive(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"n should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2) def fibonacci_sequence(n): Returns the sequence of all Fibonacci numbers up to and including the nth number. if n <= 0: raise ValueError(\\"n should be a positive integer.\\") sequence = [] for i in range(1, n + 1): sequence.append(fibonacci_recursive(i)) return sequence"},{"question":"Given a dictionary representation of a directed graph and a starting node, write a Python program to find the shortest path to every reachable node using Breadth First Search (BFS).","solution":"from collections import deque, defaultdict def bfs_shortest_paths(graph, start): Returns the shortest paths from the start node to all other reachable nodes in the graph. \`graph\` is represented as a dictionary where keys are node identifiers and values are lists of adjacent nodes. \`start\` is the starting node for BFS. # Initialize the queue with the start node, and the distances dictionary with the start node having distance 0 queue = deque([start]) distances = {start: 0} while queue: current_node = queue.popleft() current_distance = distances[current_node] for neighbor in graph[current_node]: if neighbor not in distances: distances[neighbor] = current_distance + 1 queue.append(neighbor) return distances"},{"question":"Write a Python program to delete an element from a specific index in a two-dimensional array. Also, after deletion, shift the elements of the subarrays to the right of the deleted index to the left to fill up the space. The 2D array can have varying number of elements in each subarray.","solution":"def delete_element_2d_array(arr, row, col): Deletes an element from the 2D array at the specified row and column, then shifts the elements to the right of the deleted element to the left. :param arr: List of lists, representing the 2D array. :param row: Index of the row of the element to delete. :param col: Index of the column of the element to delete. :return: Modified 2D array with the element deleted. if row < 0 or row >= len(arr) or col < 0 or col >= len(arr[row]): return arr # out of bounds, return the original array # Removing the element arr[row].pop(col) # Shifting elements to the left would be already handled by the nature of lists return arr"},{"question":"Plot the Julia set for the function f(z)=z^2+0.3+0.6i in Python using Matplotlib and NumPy libraries with at least 1000 iterations per point and use a custom color map with at least 10 different colors.","solution":"import numpy as np import matplotlib.pyplot as plt def julia_set(c, width, height, xlim, ylim, max_iter): Generates the Julia set for a given complex constant c. Parameters: c: constant complex number in the Julia set formula f(z) = z^2 + c width: width of the plot height: height of the plot xlim: tuple defining the x-axis limits ylim: tuple defining the y-axis limits max_iter: maximum number of iterations Returns: numpy array representing the Julia set x = np.linspace(xlim[0], xlim[1], width) y = np.linspace(ylim[0], ylim[1], height) X, Y = np.meshgrid(x, y) Z = X + 1j * Y julia = np.zeros(Z.shape, dtype=int) for i in range(max_iter): mask = np.abs(Z) <= 2 Z[mask] = Z[mask] ** 2 + c julia[mask] = i return julia def plot_julia_set(julia, xlim, ylim, cmap='viridis'): Plots the Julia set using Matplotlib. Parameters: julia: numpy array representing the Julia set xlim: tuple defining the x-axis limits ylim: tuple defining the y-axis limits cmap: color map for the plot plt.imshow(julia, extent=(xlim[0], xlim[1], ylim[0], ylim[1]), cmap=cmap) plt.colorbar() plt.xlabel('Re') plt.ylabel('Im') plt.title('Julia Set') plt.show() c = complex(0.3, 0.6) width, height = 800, 800 xlim = (-2, 2) ylim = (-2, 2) max_iter = 1000 julia = julia_set(c, width, height, xlim, ylim, max_iter) plot_julia_set(julia, xlim, ylim, cmap='twilight')"},{"question":"Rewrite the following code to use a loop instead of recursion. Additionally, modify the code to print only the even numbers in the Fibonacci sequence up to a given number N.","solution":"def fibonacci_evens_up_to_n(n): Generates all even Fibonacci numbers up to n. result = [] a, b = 0, 1 while a <= n: if a % 2 == 0: result.append(a) a, b = b, a + b return result"},{"question":"Write a Python program that takes a list as input, removes the duplicate elements and prints the unique elements present in the list in their original order.","solution":"def remove_duplicates(input_list): Removes duplicate elements from the input list while maintaining the original order of elements. seen = set() unique_list = [] for elem in input_list: if elem not in seen: unique_list.append(elem) seen.add(elem) return unique_list"},{"question":"Build a Python program that not only calculates the frequency of each distinct character within a given phrase, but also returns the character with the highest frequency and the location(s) of this character within the phrase. The program should also account for uppercase and lowercase letters considered as the same character (i.e., \\"A\\" and \\"a\\" should be considered as the same character).","solution":"def character_frequency(phrase): from collections import defaultdict # Convert phrase to lowercase to handle case insensitivity phrase_lower = phrase.lower() # Dictionary to store character frequency freq = defaultdict(int) # Count frequency of each character for char in phrase_lower: if char.isalpha(): freq[char] += 1 # Find the character with the highest frequency max_freq = 0 max_char = '' for char, count in freq.items(): if count > max_freq: max_freq = count max_char = char # Get the location(s) of the character with the highest frequency locations = [i for i, char in enumerate(phrase_lower) if char == max_char] return { 'frequency': freq, 'max_char': max_char, 'max_freq': max_freq, 'locations': locations }"},{"question":"I want to design a code that takes a string and returns all unique characters in the string. How can I achieve this using Python?","solution":"def unique_characters(s): Returns a list of unique characters in the string s. return list(set(s))"},{"question":"Write a function in Python that takes in a list of integers and returns a new list that contains only the unique elements from the original list, in the order they first appeared. Your solution should have a time complexity of O(n) and a space complexity of O(n).","solution":"def unique_elements(lst): Returns a list containing only the unique elements from the original list, in the order they first appeared. :param lst: List of integers :return: List of unique integers seen = set() unique_lst = [] for elem in lst: if elem not in seen: unique_lst.append(elem) seen.add(elem) return unique_lst"},{"question":"Create a program to sort the elements of an unsorted array using the bubble sort algorithm.","solution":"def bubble_sort(arr): Sorts an array using the bubble sort algorithm. n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already sorted for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a Python function that takes an array of integers as input and returns the array sorted in ascending order using the heap sort algorithm. The function should be named \`heap_sort\`.","solution":"def heapify(arr, n, i): To heapify a subtree rooted with node i which is an index in arr[]. n is the size of heap. largest = i # Initialize largest as root left = 2 * i + 1 # left = 2*i + 1 right = 2 * i + 2 # right = 2*i + 2 # See if left child of root exists and is greater than root if left < n and arr[largest] < arr[left]: largest = left # See if right child of root exists and is greater than the root if right < n and arr[largest] < arr[right]: largest = right # Change root, if needed if largest != i: arr[i], arr[largest] = arr[largest], arr[i] # swap # Heapify the root. heapify(arr, n, largest) def heap_sort(arr): Main function to do heap sort. n = len(arr) # Build a maxheap. for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) # One by one extract elements for i in range(n-1, 0, -1): arr[i], arr[0] = arr[0], arr[i] # swap heapify(arr, i, 0) return arr"},{"question":"Create a function that takes a list of strings as input and performs multiple steps to find the string with the highest number of vowels. If there are multiple strings with the same highest number of vowels, return the one that comes first lexicographically (i.e., 'apple' before 'banana'). If the list is empty, the function should return None. Additionally, the function should handle cases where strings consist of uppercase and lowercase letters, and should strip punctuation from the strings before evaluating the vowels. This problem aims to test the logic of handling strings, list operations, and dictionary usage in Python.","solution":"import string def count_vowels(s): Count the number of vowels in a given string. vowels = 'aeiouAEIOU' return sum(1 for char in s if char in vowels) def strip_punctuation(s): Remove punctuation from a given string. return s.translate(str.maketrans(\\"\\", \\"\\", string.punctuation)) def string_with_most_vowels(strings): Given a list of strings, find the string with the most vowels. If there are several strings with the same highest number of vowels, return the first one lexicographically. If the list is empty, return None. if not strings: return None # Clean the strings and count their vowels cleaned_strings = [(strip_punctuation(s).lower(), s) for s in strings] vowel_counts = [(count_vowels(cleaned), original) for cleaned, original in cleaned_strings] # Find the string with the highest number of vowels max_vowel_count = max(vowel_counts, key=lambda x: (x[0], -ord(x[1][0])))[0] highest_vowel_strings = [original for count, original in vowel_counts if count == max_vowel_count] return min(highest_vowel_strings) if highest_vowel_strings else None"},{"question":"Write a function in Python to move the second-to-last element of a given list to the beginning of the list. However, you are not allowed to use any list manipulation methods or slicing operations. You can only use basic operations such as assignment, loops, and conditionals.","solution":"def move_second_to_last_to_front(lst): Moves the second-to-last element of the given list to the beginning of the list. if len(lst) < 2: # If the list has less than 2 elements, return it unchanged return lst second_last_index = len(lst) - 2 second_last_element = lst[second_last_index] # Shift elements to the right starting from the second-to-last position for i in range(second_last_index, 0, -1): lst[i] = lst[i - 1] # Place the second-to-last element at the beginning lst[0] = second_last_element return lst"},{"question":"Design an algorithm to find the longest substring without repeating characters in a given string. The algorithm should also return the length of the longest substring.","solution":"def longest_substring_without_repeating(s: str) -> (str, int): Finds the longest substring without repeating characters and its length. :param s: Input string :return: A tuple containing the longest substring without repeating characters and its length if not s: return \\"\\", 0 start, max_len = 0, 0 max_substr = \\"\\" used_chars = {} for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: length = i - start + 1 if length > max_len: max_len = length max_substr = s[start:i+1] used_chars[char] = i return max_substr, max_len"},{"question":"Implement the binary search algorithm for the given sorted list of integers to locate the given target value. The target value may appear multiple times in the list. Return the index and the number of iterations it took for each successful and unsuccessful search attempt. Additionally, return the number of times the target value was found in the list.","solution":"def binary_search(arr, target): Perform a binary search on a sorted list to find the target value. Parameters: arr (list of int): A sorted list of integers. target (int): The target value to find in the list. Returns: index (int): The index of the target value if found, otherwise -1. iterations (int): The number of iterations it took for the search. count (int): The number of times the target value was found in the list. left, right = 0, len(arr) - 1 iterations = 0 count = 0 index = -1 while left <= right: iterations += 1 mid = (left + right) // 2 if arr[mid] == target: index = mid count = arr.count(target) break elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return index, iterations, count"},{"question":"Write a Python function that receives a list of float numbers as a parameter and returns the maximum value. The function should handle potential errors such as if the list is empty or if it contains non-float elements.","solution":"def find_max_value(numbers): Returns the maximum value in a list of float numbers. Parameters: numbers (list): List of float numbers Returns: float: The maximum value in the list Raises: ValueError: If the list is empty or contains non-float elements if not numbers: raise ValueError(\\"The list is empty\\") for num in numbers: if not isinstance(num, (float, int)): raise ValueError(\\"List contains non-float elements\\") return max(numbers)"},{"question":"Now that I have provided you with a fundamental understanding of the刮lotto game and its strategy, as well as a basic example. Would you be able to modify the code given below to implement the game with a different number of balls (e.g., 50), a different number of picks (e.g., 7), include a feature that allows the list of picked numbers to not have any repeated values, and provides an option for the user to generate a specific number of unique game boards (tickets) at once? Also, expand the functionality of the program by including a method to check the user's tickets against a set of pre-determined winning numbers and output the number of matches and the corresponding prize for each ticket.","solution":"import random class LottoGame: def __init__(self, num_balls=50, num_picks=7): self.num_balls = num_balls self.num_picks = num_picks def generate_ticket(self): return random.sample(range(1, self.num_balls + 1), self.num_picks) def generate_multiple_tickets(self, num_tickets): tickets = [] for _ in range(num_tickets): tickets.append(self.generate_ticket()) return tickets def check_ticket(self, ticket, winning_numbers): matches = set(ticket).intersection(set(winning_numbers)) num_matches = len(matches) return num_matches def check_tickets(self, tickets, winning_numbers): result = [] for ticket in tickets: matches = self.check_ticket(ticket, winning_numbers) prize = self.calculate_prize(matches) result.append((ticket, matches, prize)) return result def calculate_prize(self, matches): prize_dict = {0: 0, 1: 0, 2: 0, 3: 10, 4: 50, 5: 100, 6: 1000, 7: 10000} return prize_dict.get(matches, 0) # Example usage # game = LottoGame() # tickets = game.generate_multiple_tickets(5) # winning_numbers = [1, 2, 3, 4, 5, 6, 7] # results = game.check_tickets(tickets, winning_numbers) # for result in results: # print(f\\"Ticket: {result[0]}, Matches: {result[1]}, Prize: {result[2]}\\")"},{"question":"Develop a Python program snippet to Display Extreme Handling personal items: Cleaning Accessories for Engineer for Beginners. Incorporate if/else or switch/case statements to handle various cases related to the Responsibility. Dry-run, ensure your control flow logic is clear and well-commented.","solution":"def get_cleaning_recommendations(level): Returns cleaning accessories recommendations based on the experience level of an engineer. :param level: str - the experience level of the engineer ('Beginner', 'Intermediate', 'Expert') :return: List[str] - list of recommended cleaning accessories if level == 'Beginner': return [\\"Microfiber Cloths\\", \\"Screen Cleaner Spray\\", \\"Keyboard Brush\\"] elif level == 'Intermediate': return [\\"Compressed Air Duster\\", \\"Anti-Static Cloth\\", \\"Vacuum Cleaner\\"] elif level == 'Expert': return [\\"Circuit Board Cleaner\\", \\"Ultrasonic Cleaner\\", \\"Precision Cleaning Tools\\"] else: return [\\"Invalid experience level. Please choose 'Beginner', 'Intermediate', or 'Expert'.\\"] # Dry-run example: # level = \\"Beginner\\" # recommended_accessories = get_cleaning_recommendations(level) # print(recommended_accessories) # Output: [\\"Microfiber Cloths\\", \\"Screen Cleaner Spray\\", \\"Keyboard Brush\\"]"},{"question":"Write a code to check if a string contains only digits and output true or false.","solution":"def is_digit_only(input_str): Returns True if the input string contains only digits, False otherwise. return input_str.isdigit()"},{"question":"Given a list of words, write a Python function to print each word in the list in reverse order. Additionally, the function should ignore any words that contain special characters or numbers.","solution":"def reverse_words(words): Prints each word in the list in reverse order, ignoring words with special characters or numbers. for word in words: if word.isalpha(): print(word[::-1])"},{"question":"In a Python code segment, create a function that accepts an array of binary numerals as an argument and returns the numerals sorted in an ascending sequence, but with a twist. Your function should perform this task without utilizing conventional sorting methods such as sort() or sorted(). Instead, implement your own sorting algorithm.","solution":"def binary_array_sort(arr): Sorts an array of binary numerals in ascending order using bubble sort algorithm. :param arr: List of binary numeral strings :return: Sorted list of binary numeral strings n = len(arr) # Convert binary numerals to integers for comparison int_arr = [int(x, 2) for x in arr] # Bubble Sort Implementation for i in range(n): for j in range(0, n-i-1): if int_arr[j] > int_arr[j+1]: int_arr[j], int_arr[j+1] = int_arr[j+1], int_arr[j] arr[j], arr[j+1] = arr[j+1], arr[j] # Swap the original binary strings as well return arr"},{"question":"How do I multiply matrices in Python without using any external libraries?","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. Args: A: List of lists where each inner list represents a row in matrix A. B: List of lists where each inner list represents a row in matrix B. Returns: A new matrix that is the product of matrices A and B. Raises: ValueError: If number of columns in A does not equal number of rows in B. if len(A[0]) != len(B): raise ValueError(\\"Number of columns in A must be equal to number of rows in B.\\") # Initialize result matrix with zeroes result = [[0] * len(B[0]) for _ in range(len(A))] # Perform matrix multiplication for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Generate a method to prints the elements of a binary tree in pre-order traversal order.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def preorder_traversal(root): Function to perform pre-order traversal on a binary tree. Pre-order traversal: Root -> Left -> Right result = [] def helper(node): if node: result.append(node.value) helper(node.left) helper(node.right) helper(root) return result"},{"question":"Create a function that returns the nth Fibonacci number using a recursive approach with memoization. However, you are not allowed to use global or static variables for memoization. Instead, you should pass the memoization table as a parameter to the function and update it within the function. The function should have a time complexity of O(n) and a space complexity of O(n).","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using a recursive approach with memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"I have a set of documents in the form of emails where each email contains sentences that are either statements or questions. I want to classify these sentences into two categories: declarative statements and interrogative questions. Can you help me with a Python code that uses Natural Language Processing (NLP) techniques to classify these sentences accurately? Please also explain the approach you have taken in your code.","solution":"import re def classify_sentence(sentence): Classifies a sentence as either a 'statement' or 'question'. Args: sentence (str): The input sentence to classify. Returns: str: 'statement' if the sentence is declarative, 'question' if the sentence is interrogative. # Remove any trailing spaces and lowercase the sentence sentence = sentence.strip().lower() # A rule-based approach: # - If the sentence ends with a question mark, it is classified as a question if sentence.endswith('?'): return 'question' # - Otherwise, it is classified as a statement return 'statement' # Example usage: # sentences = [\\"How are you?\\", \\"I am fine.\\", \\"Is it raining today?\\", \\"It was a sunny day.\\"] # classifications = [classify_sentence(sent) for sent in sentences] # print(classifications)"},{"question":"Write a Python program to print the multiplication table of a number up to a given range, but only for odd numbers. The program should also calculate and display the sum of all the odd numbers in the multiplication table.","solution":"def multiplication_table_odd(number, upto): This function generates and returns the multiplication table of \`number\` up to \`upto\`, but only for odd numbers. It also calculates the sum of these odd values. :param number: int - The base number for generating the multiplication table. :param upto: int - The range for generating the multiplication table. :return: tuple - A tuple containing a list of tuples where each tuple is (multiplier, result) and the sum of all odd results. table = [] odd_sum = 0 for i in range(1, upto + 1): result = number * i if result % 2 != 0: table.append((i, result)) odd_sum += result return table, odd_sum"},{"question":"Write a function that takes two arguments, an array and an element, and returns the number of times the element occurs in the array. The function should only iterate through the array once and should have a time complexity of O(n). Additionally, the function should not use any built-in array methods or data structures to count the occurrences of the element.","solution":"def count_occurrences(arr, element): Returns the number of times the element occurs in the array. Parameters: arr (list): The array to search in. element (any): The element to count in the array. Returns: int: The number of times element occurs in arr. count = 0 for item in arr: if item == element: count += 1 return count"},{"question":"Devise a sorting mechanism using parallel computing in Python. Your solution should make use of the multiprocessing module to sort a large array of randomly generated numbers. Ensure to compare the performance of your parallel sorting algorithm against a standard, non-parallel sorting algorithm by measuring and comparing the execution times.","solution":"import multiprocessing import random import time def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result def parallel_merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left_part = arr[:mid] right_part = arr[mid:] pool = multiprocessing.Pool() left_sorted, right_sorted = pool.map(merge_sort, [left_part, right_part]) return merge(left_sorted, right_sorted) def compare_sorting_algorithms(): size = 10**5 arr = [random.randint(0, 1000) for _ in range(size)] start = time.time() sorted_arr_1 = merge_sort(arr) end = time.time() merge_sort_time = end - start start = time.time() sorted_arr_2 = parallel_merge_sort(arr) end = time.time() parallel_merge_sort_time = end - start assert sorted_arr_1 == sorted_arr_2, \\"Both sorted arrays should be equal\\" return merge_sort_time, parallel_merge_sort_time if __name__ == \\"__main__\\": merge_sort_time, parallel_merge_sort_time = compare_sorting_algorithms() print(f\\"Merge Sort Time: {merge_sort_time}\\") print(f\\"Parallel Merge Sort Time: {parallel_merge_sort_time}\\")"},{"question":"Take the following dictionary and sort its values alphabetically. However, you are not allowed to use any built-in sorting functions or methods, and you must implement your own sorting algorithm from scratch. Additionally, you must ensure that the algorithm has a time complexity of O(n log n) and a space complexity of O(1), meaning it should sort the values in place without using any extra data structures.","solution":"def custom_sort_dict_values(d): Takes a dictionary and sorts its values alphabetically using an in-place merge sort algorithm. Parameters: d (dict): The input dictionary. Returns: dict: The dictionary with its values sorted alphabetically. values = list(d.values()) def merge_sort_in_place(arr, start, end): if end - start > 1: mid = (start + end) // 2 merge_sort_in_place(arr, start, mid) merge_sort_in_place(arr, mid, end) merge(arr, start, mid, end) def merge(arr, start, mid, end): left = start right = mid while left < right and right < end: if arr[left] <= arr[right]: left += 1 else: temp = arr[right] for i in range(right, left, -1): arr[i] = arr[i - 1] arr[left] = temp left += 1 right += 1 mid += 1 merge_sort_in_place(values, 0, len(values)) sorted_dict = {k: v for k, v in zip(d.keys(), values)} return sorted_dict"},{"question":"Write a Python code to find the top K frequent elements in an array. Additionally, in case of a tie, the element that appears first in the array should be selected.","solution":"from collections import Counter def top_k_frequent_elements(arr, k): Returns the top K frequent elements in the array. In case of a tie, the element that appears first in the array is selected. :param arr: List of elements :param k: The number of top frequent elements to return :return: List of top K frequent elements if k <= 0: return [] # Count the frequency of each element in the array frequency = Counter(arr) # Create a list of elements sorted by frequency and by first occurrence in case of tie sorted_elements = sorted(arr, key=lambda x: (-frequency[x], arr.index(x))) # Use a set to keep track of the added elements to ensure unique elements unique_sorted_elements = [] seen = set() for element in sorted_elements: if element not in seen: seen.add(element) unique_sorted_elements.append(element) if len(unique_sorted_elements) == k: break return unique_sorted_elements"},{"question":"Write a code that prints each word in a given string on a separate line. Additionally, reverse the order of the characters in each word.","solution":"def print_words_and_reverse_order(input_string): Prints each word in the input string on a separate line with the characters in each word reversed. words = input_string.split() for word in words: print(word[::-1])"},{"question":"Given an array of integers, write a Python program to find and remove all the duplicates elements and print the modified array. Additionally, for each duplicate removed, the program should keep only the first occurrence and remove subsequent occurrences.","solution":"def remove_duplicates(arr): This function takes an array of integers and removes duplicate elements, keeping only the first occurrence, and returns the modified array. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Write a Python function 'is_prime' that takes an integer as an argument and returns 'True' if the number is prime, and 'False' otherwise.","solution":"def is_prime(number): Returns True if the number is prime, and False otherwise. if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True"},{"question":"Reverse the order of the elements in the array \`[1, 2, 3, 4, 5]\` without using any built-in functions or creating a new array. Additionally, make sure that the space complexity of your solution is O(1). Your solution should not exceed O(n) time complexity.","solution":"def reverse_in_place(arr): Reverses the order of the elements in the array in place. Args: arr: list of elements to be reversed n = len(arr) for i in range(n // 2): # Swap the elements arr[i], arr[n - i - 1] = arr[n - i - 1], arr[i] return arr"},{"question":"Create a function that merges two dictionaries. If the dictionaries have common keys, don't just update the value of the key, but instead merge the values if they are lists. If the values under the same key are not both lists, raise a ValueError.","solution":"def merge_dicts(dict1, dict2): Merges two dictionaries. If they have common keys and their values are lists, merge those lists. If the values under the same key are not both lists, raise a ValueError. :param dict1: First dictionary. :param dict2: Second dictionary. :returns: Merged dictionary. :raises ValueError: If values under the same key are not both lists. merged = dict1.copy() for key, value in dict2.items(): if key in merged: if isinstance(merged[key], list) and isinstance(value, list): merged[key].extend(value) else: raise ValueError(f\\"Values under the key {key} are not both lists.\\") else: merged[key] = value return merged"},{"question":"Write a python function that accepts a denominator and returns a lambda function to divide a number by the denominator.","solution":"def create_divider(denominator): Returns a lambda function that divides a number by the given denominator. if denominator == 0: raise ValueError(\\"Denominator cannot be zero.\\") return lambda numerator: numerator / denominator"},{"question":"Code a function in Python that returns the length of the longest common substring between two given strings. The function should have a time complexity of O(n*m), where n is the length of the first string and m is the length of the second string. Additionally, the function should not use any built-in string comparison or substring functions.","solution":"def longest_common_substring(str1, str2): Returns the length of the longest common substring between str1 and str2. n = len(str1) m = len(str2) # Create a 2D array to store lengths of longest common suffixes # dp[i][j] will contain the length of longest common suffix of str1[0..i-1] and str2[0..j-1] dp = [[0] * (m + 1) for _ in range(n + 1)] max_length = 0 # Build the dp array from bottom up for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_length = max(max_length, dp[i][j]) return max_length"},{"question":"Write code to calculate the total number of votes for a candidate in an election, but only consider the votes from eligible voters who are 18 years old or above. The age of each voter is stored in a separate list called \\"ages\\" in the same order as the votes. Additionally, implement a feature to handle cases where the \\"ages\\" list may contain duplicate values, ensuring that only one vote per eligible voter is counted.","solution":"def total_votes(votes, ages): Returns the total number of votes for a candidate from eligible voters who are 18 years or older. Only one vote per eligible voter is counted based on age. Args: - votes (list of int): List of votes. - ages (list of int): List of ages corresponding to each vote. Returns: - int: Total number of valid votes. seen = set() total = 0 for vote, age in zip(votes, ages): if age >= 18 and age not in seen: total += vote seen.add(age) return total"},{"question":"How can I implement a stock split in a hypothetical scenario for a company named \\"Example Inc.\\" using Python code, and explain how it would affect the company's stock price and share count? Can you provide a simulation of a 3-for-1 stock split, where each shareholder receives two additional shares for every one share they own, and the stock price is reduced to a third of its previous value? Additionally, can you discuss how this stock split would impact the company's valuation and market capitalization? Please include the Python code for implementing the stock split in your response.","solution":"class ExampleInc: def __init__(self, total_shares, stock_price): self.total_shares = total_shares self.stock_price = stock_price def stock_split(self, split_ratio): Performs a stock split given the split ratio. For example, for a 3-for-1 stock split, the split_ratio would be 3. self.total_shares *= split_ratio self.stock_price /= split_ratio @property def market_capitalization(self): return self.total_shares * self.stock_price # Example scenario for a 3-for-1 stock split company = ExampleInc(total_shares=10000, stock_price=150) company.stock_split(split_ratio=3)"},{"question":"Create a function that outputs a nested dictionary from a given list of keys and values. The function should handle cases where the list of keys is nested. The function should also have a time complexity of O(n^2), where n is the length of the input list of keys. The function should also have a space complexity of O(n).","solution":"def create_nested_dict(keys, values): Create a nested dictionary from a list of keys and values. :param keys: List of lists representing the keys (nested structure) :param values: List of values corresponding to the last keys :return: A nested dictionary structure if len(keys) != len(values): raise ValueError(\\"Length of keys and values must be the same\\") nested_dict = {} for i, key_list in enumerate(keys): current = nested_dict for key in key_list[:-1]: if key not in current: current[key] = {} current = current[key] current[key_list[-1]] = values[i] return nested_dict"},{"question":"Propose a method to get the intersection of two lists without using built-in functions and also take into account that these lists can contain nested lists (depth of nesting can be one). The intersection should also preserve the original order of elements in the lists. Also, write code that is efficient in terms of time and space complexity.","solution":"def flatten(lst): This function flattens a list by one level, which means it returns a new list where elements of any nested list become part of the main list. flattened = [] for item in lst: if isinstance(item, list): flattened.extend(item) else: flattened.append(item) return flattened def list_intersection(list1, list2): This function returns the intersection of two lists, preserving the order of appearance in list1. It also handles nested lists by flattening them by one level. flat_list1 = flatten(list1) flat_list2 = flatten(list2) intersection = [] for item in flat_list1: if item in flat_list2: intersection.append(item) flat_list2.remove(item) # removing ensures element isn't reused return intersection"},{"question":"Rewrite the subsequent Python function without utilizing any else, elif statements or the ternary operator. Your solution should still manage to return 'Even' for even numbers, and 'Odd' for odd numbers.","solution":"def check_even_or_odd(number): Returns 'Even' if the number is even, 'Odd' if the number is odd. if number % 2 == 0: return 'Even' return 'Odd'"},{"question":"Draft a Python code snippet to create a program that outputs even numbers from 0 to a given positive integer, including the integer if it is even. Ensure your code includes user input for the positive integer and handles input errors for non-integers or negative integers.","solution":"def even_numbers_up_to_n(): Outputs even numbers from 0 to a given positive integer n, including n if it is even. while True: try: n = int(input(\\"Enter a positive integer: \\")) if n < 0: print(\\"Please enter a positive integer.\\") continue break except ValueError: print(\\"Invalid input. Please enter a valid integer.\\") even_numbers = [i for i in range(0, n + 1) if i % 2 == 0] for number in even_numbers: print(number) if __name__ == \\"__main__\\": even_numbers_up_to_n()"},{"question":"Create a Python function that checks if a list of numerical values is in ascending order. This function should also handle exceptions for inputs that are not numeric and lists that are empty.","solution":"def is_ascending(lst): Returns True if the list of numerical values is in ascending order, False otherwise. Raises ValueError for non-numeric types in the list, and returns False for empty lists. if not lst: return False for item in lst: if not isinstance(item, (int, float)): raise ValueError(\\"List contains non-numeric value\\") return all(earlier <= later for earlier, later in zip(lst, lst[1:]))"},{"question":"Given the following erroneous code as a reference, write a program that not only identifies the uppercase vowels and their positions in a given string but also calculates the frequency of each of these vowels. Bear in mind that this operation should be performed on the entire string, including repeated characters.","solution":"def analyze_uppercase_vowels(s): This function identifies uppercase vowels and their positions in a given string, and calculates the frequency of each of these vowels. Parameters: s (str): The input string. Returns: dict: A dictionary with uppercase vowels as keys and a tuple as values. Each tuple contains a list of positions and the frequency count. vowels = \\"AEIOU\\" result = {} for index, char in enumerate(s): if char in vowels: if char not in result: result[char] = ([], 0) # Initialize a tuple with empty list and frequency 0 positions, freq = result[char] positions.append(index) result[char] = (positions, freq + 1) return result"},{"question":"Create a function that returns the sum of the Fibonacci sequence up to the nth number, while ensuring that the function has a time complexity of O(n) and does not use recursion. Additionally, the function should handle large values of n efficiently without causing any overflow errors. The function should also handle negative values of n by returning an error message.","solution":"def fibonacci_sum(n): Returns the sum of the Fibonacci sequence up to the nth number. Handles negative values of n by returning an error message. if n < 0: return \\"Error: n must be a non-negative integer.\\" if n == 0: return 0 if n == 1: return 1 # Initialize the first two Fibonacci numbers and their sum a, b = 0, 1 total_sum = 1 # sum up to 1st Fibonacci number (1) for _ in range(2, n + 1): # iteratively compute the next fibonacci number a, b = b, a + b total_sum += b return total_sum"},{"question":"Generate a python algorithm to perform binary search on a sorted array","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the index of the target element. Parameters: arr (list): A sorted list of elements. target: The element to search for in the list. Returns: int: The index of the target element if it exists in the list, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"I have several strings that contain ZIP codes in them. However, the ZIP codes are sometimes followed by a dash and four more digits (ZIP+4 format). I want to write a regular expression that can extract the ZIP codes from these strings, but I only want the first five digits (the basic ZIP code). I don't want to include the dash and the four extra digits if they are present. How can I achieve this using regular expressions in Python?","solution":"import re def extract_zip_code(text): Extracts the first five digits of ZIP codes from input text. Args: text (str): The text containing the ZIP code. Returns: str: The extracted ZIP code. match = re.search(r'bd{5}b', text) return match.group(0) if match else None"},{"question":"Write a Python program that takes user input for the base and height of a triangle and uses a function to calculate and return the area of the triangle. The function should include a docstring that explains its purpose and parameters. The program should also validate the input to ensure that both the base and height are positive numbers, and if not, display a message to the user and prompt for input again. Finally, the program should print the calculated area of the triangle.","solution":"def calculate_triangle_area(base, height): Calculates the area of a triangle given its base and height. Parameters: base (float): The base of the triangle. Must be a positive number. height (float): The height of the triangle. Must be a positive number. Returns: float: The area of the triangle. return 0.5 * base * height def get_positive_number(prompt): Prompts the user to input a positive number. Keeps prompting if the input is not positive. Parameters: prompt (str): The prompt message shown to the user. Returns: float: The positive number entered by the user. number = -1 while number <= 0: try: number = float(input(prompt)) if number <= 0: print(\\"Please enter a positive number.\\") except ValueError: print(\\"Invalid input. Please enter a numeric value.\\") return number def main(): base = get_positive_number(\\"Enter the base of the triangle: \\") height = get_positive_number(\\"Enter the height of the triangle: \\") area = calculate_triangle_area(base, height) print(f\\"The area of the triangle is {area:.2f}\\") if __name__ == \\"__main__\\": main()"},{"question":"Can you create a bespoke Python script for me that, using a multi-step approach, gradually increases the size of my有待 expansion vocabulary list named \\"word_list\\" through the addition of words? In order to ensure that each word is unique and not repeated, the script should check for duplicates before adding new words. This process should be performed in a more complex manner than a simple linear scan, to ensure efficiency. Could you also include a progress tracker in the script to monitor the number of words added and the total size of the updated vocabulary list throughout the augmentation process? Finally, could you export the augmented list to a new file named \\"expanded_word_list.txt\\" for easier data management? Here's a Python script that gradually increases the size of a vocabulary list named \\"word_list\\" through the addition of words, while checking for duplicates before adding new words. It uses a binary search algorithm for efficient checking and includes a progress tracker to monitor the number of words added and the total size of the updated vocabulary list throughout the augmentation process. The augmented list is exported to a new file named \\"expanded_word_list.txt\\".","solution":"import bisect def add_words(word_list, new_words): Adds new words to the word_list, ensuring each word is unique and the list remains sorted. Args: word_list (list of str): The original list of words. new_words (list of str): The list of new words to be added. Returns: list of str: The updated list of words with new words added. added_count = 0 total_size = len(word_list) # Sort the word list initially word_list.sort() for new_word in new_words: # Use bisect to find insert position pos = bisect.bisect_left(word_list, new_word) # Check if the word is already present if pos < len(word_list) and word_list[pos] == new_word: continue word_list.insert(pos, new_word) added_count += 1 total_size += 1 print(f\\"Added '{new_word}'. Total words now: {total_size}\\") # Export to file with open(\\"expanded_word_list.txt\\", \\"w\\") as file: for word in word_list: file.write(f\\"{word}n\\") return word_list"},{"question":"In Python, create a program that takes a list of strings as input and returns a new list where each string is followed by a comma and a space, except for the last string. However, you must use recursion to achieve this.","solution":"def format_strings_with_commas(strings): Takes a list of strings and returns a new list where each string is followed by a comma and a space, except for the last string. # base case if not strings: return [] elif len(strings) == 1: return strings return [strings[0] + \\", \\"] + format_strings_with_commas(strings[1:])"},{"question":"Create a Python script to switch the positions of two provided strings, as well as the characters at each position within those strings. Then, reverse the order of the inner characters.","solution":"def switch_and_reverse(str1, str2): Switches the positions of the two strings and reverses the order of the inner characters within each new position. reversed_str1 = str1[::-1] reversed_str2 = str2[::-1] return reversed_str2, reversed_str1"},{"question":"Render a 4D array to understand its structure in Python and implement a custom 4D array data structure with the following functionalities: inserting an element, retrieving an element, deleting an element, and traversing the array. Compare the performance of your custom data structure with Python's built-in 4D numpy array in terms of time and space complexity.","solution":"import numpy as np class Custom4DArray: def __init__(self, dims): self.dims = dims self.array = self._create_4d_array(dims, 0) def _create_4d_array(self, dims, default_value): return [[[[ default_value for _ in range(dims[3]) ] for _ in range(dims[2]) ] for _ in range(dims[1]) ] for _ in range(dims[0])] def insert(self, value, i, j, k, l): self.array[i][j][k][l] = value def retrieve(self, i, j, k, l): return self.array[i][j][k][l] def delete(self, i, j, k, l): self.array[i][j][k][l] = 0 def traverse(self): elements = [] for i in range(self.dims[0]): for j in range(self.dims[1]): for k in range(self.dims[2]): for l in range(self.dims[3]): elements.append(self.array[i][j][k][l]) return elements # Example usage: dims = (2, 3, 4, 5) custom_array = Custom4DArray(dims) custom_array.insert(10, 0, 1, 2, 3) retrieved_value = custom_array.retrieve(0, 1, 2, 3) custom_array.delete(0, 1, 2, 3) traversed_elements = custom_array.traverse() # Comparison with numpy array np_array = np.zeros(dims) np_array[0, 1, 2, 3] = 10 retrieved_np_value = np_array[0, 1, 2, 3] np_array[0, 1, 2, 3] = 0 traversed_np_elements = np_array.flatten()"},{"question":"Create a program that generates a list of 25 unique random hexadecimal numbers. Each number must be on a separate line. Additionally, the program should validate that none of the generated numbers match any of the previous 5 numbers generated. Ensure the program is efficient in terms of time and space complexity.","solution":"import random def generate_unique_hex_numbers(): Generates a list of 25 unique random hexadecimal numbers. Each number is checked to ensure it does not match any of the previous 5 generated numbers. hex_numbers = [] recent_set = set() while len(hex_numbers) < 25: new_hex = \\"{:08x}\\".format(random.randint(0, 0xFFFFFFFF)) # Ensure the new hex number is unique in hex_numbers and recent_set if new_hex not in hex_numbers and new_hex not in recent_set: hex_numbers.append(new_hex) recent_set.add(new_hex) # Maintain only the last 5 unique hex numbers in recent_set if len(recent_set) > 5: recent_set.pop() return hex_numbers"},{"question":"Develop a Python script that can download a webpage's HTML content using the requests library and parse it with BeautifulSoup to extract all links within the page. Output the extracted links as a list.","solution":"import requests from bs4 import BeautifulSoup def extract_links(url): Downloads the HTML content of a webpage and extracts all links within the page. Parameters: url (str): The URL of the webpage to download and parse Returns: list: A list of extracted links response = requests.get(url) response.raise_for_status() # Raise an HTTPError for bad responses soup = BeautifulSoup(response.text, 'html.parser') links = [a.get('href') for a in soup.find_all('a', href=True)] return links"},{"question":"Below you will find a piece of Python code that is supposed to take two inputs, a list of integers named \`a\` and an integer \`n\`, and return the element at the \`n\`th position from the end of the list \`a\`. It is supposed to work for any valid list \`a\` containing integers, and for any valid integer \`n\` that is less than or equal to the length of the list \`a\`. However, the code contains errors and thus does not function correctly. Your task is to correct these errors and also add some additional functionality. Specifically, you need to modify the function such that if \`n\` is greater than the length of the list \`a\` it returns \\"Invalid\\". Furthermore, if the list \`a\` is empty it should return \\"Empty List\\". If the type of \`a\` is not a list, or the type of \`n\` is not an integer, the function should return \\"Invalid Input\\".","solution":"def nth_from_end(a, n): Returns the nth element from the end of the list \`a\`. Returns 'Invalid' if n is greater than the length of the list. Returns 'Empty List' if the list is empty. Returns 'Invalid Input' if the input types are not as expected. if not isinstance(a, list) or not isinstance(n, int): return \\"Invalid Input\\" if not a: return \\"Empty List\\" if n > len(a) or n < 1: return \\"Invalid\\" return a[-n]"},{"question":"Given a binary tree, write a function to print out the elements in level order. Additionally, implement a function that returns the average value of each level in the binary tree.","solution":"from collections import deque from typing import List, Optional, Tuple class TreeNode: def __init__(self, val: int, left: Optional['TreeNode'] = None, right: Optional['TreeNode'] = None): self.val = val self.left = left self.right = right def level_order_traversal(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level = [] for _ in range(level_size): node = queue.popleft() level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level) return result def average_of_levels(root: Optional[TreeNode]) -> List[float]: if not root: return [] averages = [] queue = deque([root]) while queue: level_size = len(queue) level_sum = 0 for _ in range(level_size): node = queue.popleft() level_sum += node.val if node.left: queue.append(node.left) if node.right: queue.append(node.right) averages.append(level_sum / level_size) return averages"},{"question":"You are given a string S which you need to append to another string K. Write a function that takes in the string S, string K, and an integer N as parameters. The function should append N copies of string S to string K and return the resultant string. Remember to validate the input values to check if they are within the expected constraints.","solution":"def append_string(S, K, N): Appends N copies of string S to string K and returns the resultant string. Parameters: S (str): The string to be appended. K (str): The base string. N (int): Number of times to append S to K. Returns: str: The resultant string after appending. Raises: ValueError: If S or K is not a string or if N is not a non-negative integer. if not isinstance(S, str) or not isinstance(K, str): raise ValueError(\\"S and K should be strings\\") if not isinstance(N, int) or N < 0: raise ValueError(\\"N should be a non-negative integer\\") return K + (S * N)"},{"question":"Develop a Python function that calculates the aggregate product of the sums of all possible subarrays within a given list, as explained in this online resource: https://www.geeksforgeeks.org/product-of-sum-of-all-subarrays/.","solution":"def aggregate_product_of_sums(arr): Calculate the aggregate product of the sums of all possible subarrays within the given list. :param arr: List of integers :return: Integer representing the aggregate product of sums of all possible subarrays n = len(arr) result = 1 # Create an array to store sum of subarrays sum_of_subarrays = [0] * n for i in range(n): subarray_sum = 0 for j in range(i, n): subarray_sum += arr[j] sum_of_subarrays[i] += subarray_sum # Calculate the product of all sums for sum_subarray in sum_of_subarrays: result *= sum_subarray return result"},{"question":"Given a list of numbers, develop a code snippet in Python to find the maximum number that is divisible by all the numbers in the list. The length of the list will be between 2 and 10, and the numbers in the list will be between 1 and 10^6.","solution":"import math from functools import reduce def gcd(a, b): Computes the greatest common divisor of a and b. while b: a, b = b, a % b return a def lcm(a, b): Computes the least common multiple of a and b. return a * b // gcd(a, b) def find_max_number_divisible_by_all(numbers): Given a list of numbers, finds the maximum number that is divisible by all the numbers in the list. This maximum number is the least common multiple (LCM) of all the numbers in the list. return reduce(lcm, numbers)"},{"question":"construct a 3d matrix of size 4x4x4 in python and fill it with random integers between 0 and 9. Then, write a function that calculates and returns the sum of all elements in the matrix. After that, check if your function works correctly by comparing its output to the sum calculated by manually iterating through the 3d matrix.","solution":"import numpy as np # Create a 3D matrix of size 4x4x4 filled with random integers between 0 and 9 matrix = np.random.randint(0, 10, (4, 4, 4)) def sum_matrix_elements(matrix): Returns the sum of all elements in the 3D matrix. return np.sum(matrix)"},{"question":"Given a list of tuples, return a new list of tuples where each tuple is reversed and has negative values. However, you are not allowed to use any built-in functions or methods for tuple manipulation or arithmetic operations. Additionally, you are not allowed to use any temporary variables or constructs for tuple reversal or value negation. You may only use basic loop constructs, conditional statements, and arithmetic operations. You must achieve the desired result in-place, without creating any additional data structures.","solution":"def reverse_and_negate_tuples(lst): Returns a new list of tuples where each tuple is reversed and has negative values. for i in range(len(lst)): t = lst[i] a = t[0] b = t[1] lst[i] = (-b, -a) return lst"},{"question":"Write a function \`matrix_transform\` that takes in a 2D list \`matrix\`, an integer \`rotation\`, and an optional \`shape\` parameter. The function should rotate the elements of the matrix \`rotation\` degrees clockwise. If the \`shape\` parameter is provided, it should reshape the elements of the matrix into that new shape while preserving the order of the elements after rotation. If the provided shape is not compatible with the number of elements in the matrix, the function should return \`None\`.","solution":"def matrix_transform(matrix, rotation, shape=None): def rotate_matrix(mat, degree): if degree == 0: return mat elif degree == 90: return [list(row) for row in zip(*mat[::-1])] elif degree == 180: return [row[::-1] for row in mat[::-1]] elif degree == 270: return [list(row) for row in zip(*mat)][::-1] else: raise ValueError(\\"Rotation must be one of [0, 90, 180, 270]\\") def reshape_matrix(flat_list, new_shape): rows, cols = new_shape if len(flat_list) != rows * cols: return None return [flat_list[i * cols:(i + 1) * cols] for i in range(rows)] rotated_matrix = rotate_matrix(matrix, rotation) if shape: flat_list = [item for sublist in rotated_matrix for item in sublist] reshaped_matrix = reshape_matrix(flat_list, shape) return reshaped_matrix return rotated_matrix"},{"question":"Given a singly linked list, write a function to find the nth to last node. The function should handle various edge cases, such as an empty linked list, a single node linked list, and a linked list where n is greater than the number of nodes in the list. Additionally, the function should return the nth to last node without modifying the linked list in any way.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_nth_to_last_node(head, n): Returns the nth to last node in the singly linked list. :param head: ListNode, the head of the singly linked list. :param n: int, the position from the end (1-indexed). :return: ListNode or None if n is out of bounds. if not head or n <= 0: return None # Initialize two pointers fast = slow = head # Move fast pointer n steps ahead for _ in range(n): if not fast: return None # If n is greater than the number of nodes fast = fast.next # Move both pointers until fast reaches the end while fast: fast = fast.next slow = slow.next return slow"},{"question":"Can you write a Python code snippet to check if a given number is a power of three?","solution":"def is_power_of_three(n): Checks if the given number is a power of three. Args: n (int): The number to check. Returns: bool: True if n is a power of three, False otherwise. if n <= 0: return False while n % 3 == 0: n /= 3 return n == 1"},{"question":"Develop a Python function that not only determines if a given integer is a palindrome, but also assesses whether it is a prime number. The function should be capable of handling large integers efficiently. Additionally, the function should be able to handle negative integers and return a specific error message for non-integer inputs.","solution":"def is_palindrome_prime(n): Determines if a given integer n is both a palindrome and a prime number. Handles negative integers and returns an error message for non-integer inputs. if not isinstance(n, int): return \\"Error: Input is not an integer.\\" if n < 0: return False def is_palindrome(x): str_x = str(x) return str_x == str_x[::-1] def is_prime(x): if x < 2: return False for i in range(2, int(x**0.5) + 1): if x % i == 0: return False return True return is_palindrome(n) and is_prime(n)"},{"question":"Write a Monte Carlo simulation to estimate pi. Your program should output the estimated value of pi as well as the percentage error compared to the actual value of pi. Additionally, implement the simulation using parallel processing to improve performance. The number of iterations should be adjustable through an argument or input.","solution":"import random import math from multiprocessing import Pool def monte_carlo_pi_part(samples): count_inside_circle = 0 for _ in range(samples): x, y = random.random(), random.random() if x*x + y*y <= 1: count_inside_circle += 1 return count_inside_circle def monte_carlo_pi(total_samples, num_processes=4): pool = Pool(num_processes) samples_per_process = total_samples // num_processes count_inside_circle = sum(pool.map(monte_carlo_pi_part, [samples_per_process]*num_processes)) pool.close() pool.join() pi_estimate = (count_inside_circle / total_samples) * 4 return pi_estimate def calculate_percentage_error(estimated_pi, actual_pi=math.pi): error = abs(estimated_pi - actual_pi) / actual_pi * 100 return error if __name__ == \\"__main__\\": total_samples = 1000000 estimated_pi = monte_carlo_pi(total_samples, num_processes=4) percentage_error = calculate_percentage_error(estimated_pi) print(f'Estimated Pi: {estimated_pi}') print(f'Percentage Error: {percentage_error}%')"},{"question":"Write a recursive function that calculates the factorial of a given positive integer. Additionally, implement error handling to raise a custom exception if a non-positive integer is passed as the argument.","solution":"class NonPositiveIntegerError(Exception): Custom exception for non-positive integers pass def factorial(n): Returns the factorial of a given positive integer n. Raises NonPositiveIntegerError if n is not a positive integer. if not isinstance(n, int) or n <= 0: raise NonPositiveIntegerError(\\"Input must be a positive integer\\") if n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function, \\"factorial_of()\\", that calculates the factorial of a given number. Also, include a check function to validate the correctness of your factorial function with a set of test cases. Make sure your function handles both positive numbers and zero as input. Ensure to take care of potential overflow errors for large inputs.","solution":"def factorial_of(n): Calculate the factorial of a given number. Returns the factorial of n. Raises ValueError if n is negative or not an integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a Python program that takes a text from the user and determines whether it is a pangram(a sentence that uses all the letters of the alphabet at least once)","solution":"def is_pangram(text): Returns True if the given text is a pangram, False otherwise. alphabet = set('abcdefghijklmnopqrstuvwxyz') text = text.lower() return alphabet <= set(text)"},{"question":"Given two strings s1 and s2, write a function in Python to return a new string containing the characters present only in s1, without any duplicates. Also, the character in the new string must retain the order of their first occurrence in s1.","solution":"def unique_chars_in_s1(s1, s2): Returns a string containing characters present only in s1, without duplicates, retaining the order of their first occurrence in s1. s2_set = set(s2) seen = set() result = [] for char in s1: if char not in s2_set and char not in seen: result.append(char) seen.add(char) return ''.join(result)"},{"question":"Given a list of integers, write a program in Python that sorts the list in ascending order using a self-implemented sorting algorithm rather than using pre-existing Python functions or libraries. For an added challenge, implement your algorithm using only O(1) additional space (i.e., in-place sorting). As an example, the input list might be something like: [7, 1, 9, 2, 3]","solution":"def insertion_sort(arr): Sorts a list of integers in ascending order using the insertion sort algorithm. This function performs the sorting in-place. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Devise a function in Python to decrypt an encrypted email using the MIME protocol.","solution":"from email import message_from_bytes from email.policy import default def decrypt_email(encrypted_email): Decrypts an encrypted email using the MIME protocol. Parameters: encrypted_email (bytes): The byte stream of the encrypted email. Returns: str: The decrypted email content. # Parse the email msg = message_from_bytes(encrypted_email, policy=default) # If content is multipart, get the payload assuming it's the first part if msg.is_multipart(): parts = msg.get_payload() for part in parts: if part.get_content_type() == 'text/plain': return part.get_payload(decode=True).decode() # If content is not multipart else: if msg.get_content_type() == 'text/plain': return msg.get_payload(decode=True).decode() return \\"\\""},{"question":"Create all permutations of an array of integers with parallel processing. Consider the scenario where the input array could potentially contain duplicate integers.","solution":"from itertools import permutations from multiprocessing import Pool def unique_permutations(iterable): Return unique permutations of the iterable. seen = set() unique_perms = [] for perm in set(permutations(iterable)): if perm not in seen: seen.add(perm) unique_perms.append(perm) return unique_perms def parallel_permutations(arr): Generate all unique permutations of the array \`arr\` using parallel processing. if not arr: return [] with Pool() as pool: chunk_size = len(arr) // pool._processes + 1 result = pool.map(unique_permutations, [arr[i:i + chunk_size] for i in range(0, len(arr), chunk_size)]) # Merging results from all processes all_permutations = list(set(permutations(arr))) return all_permutations"},{"question":"Write a Python program to create a list of n Lucas numbers (where n is the input) and print the list in reverse order. Lucas numbers are similar to Fibonacci numbers but start with 2 and 1 instead of 0 and 1.","solution":"def lucas_numbers(n): Returns a list of n Lucas numbers in reverse order. if n == 0: return [] elif n == 1: return [2] lucas_list = [2, 1] for i in range(2, n): next_lucas = lucas_list[-1] + lucas_list[-2] lucas_list.append(next_lucas) return lucas_list[::-1]"},{"question":"Write a program that would simulate a simple Rock Paper Scissors game. The game should accept inputs from one player competing against a computer opponent. Ensure your solution includes a way to handle game states (i.e., win, lose, draw), track the number of rounds played and the player's score. Incorporate error handling for invalid inputs as well.","solution":"import random def get_computer_choice(): Randomly returns 'rock', 'paper', or 'scissors'. choices = ['rock', 'paper', 'scissors'] return random.choice(choices) def determine_winner(player_choice, computer_choice): Determines the outcome of a rock-paper-scissors round. Returns 'win', 'lose', or 'draw'. outcomes = { 'rock': {'rock': 'draw', 'paper': 'lose', 'scissors': 'win'}, 'paper': {'rock': 'win', 'paper': 'draw', 'scissors': 'lose'}, 'scissors': {'rock': 'lose', 'paper': 'win', 'scissors': 'draw'} } return outcomes[player_choice][computer_choice] def validate_choice(choice): Validates if the user choice is one of 'rock', 'paper', or 'scissors'. Returns True if valid, False otherwise. valid_choices = ['rock', 'paper', 'scissors'] return choice in valid_choices def play_round(player_choice, computer_choice): Plays a single round of Rock-Paper-Scissors. Returns the game state ('win', 'lose', or 'draw') and the computer's choice. if not validate_choice(player_choice): return \\"Invalid input; must be 'rock', 'paper', or 'scissors'.\\", computer_choice result = determine_winner(player_choice, computer_choice) return result, computer_choice"},{"question":"Develop a Python script that can continuously monitor the CPU usage of a specific process by reading data from the /proc file system. The script should include a function that uses the inotify framework to receive notifications when the process's stat file is modified. This function should be able to parse the updated data and return the CPU usage as a percentage in real-time. Additionally, the script should have the capability to filter out data that does not belong to the targeted process, ensuring efficient and accurate monitoring.","solution":"import os import struct import time import psutil def get_process_cpu_percentage(pid): Returns the CPU usage percentage of a specified process by its PID. if not psutil.pid_exists(pid): return None proc = psutil.Process(pid) return proc.cpu_percent(interval=1.0) def monitor_cpu_usage(pid): Monitors CPU usage of a specified process by its PID and prints the CPU usage percentage. while True: cpu_usage = get_process_cpu_percentage(pid) if cpu_usage is not None: print(f\\"Process {pid} CPU Usage: {cpu_usage}%\\") else: print(f\\"Process {pid} does not exist.\\") time.sleep(1)"},{"question":"Develop an algorithm to traverse a circular doubly linked list in a reverse order and print the data of each node.","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None class CircularDoublyLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if self.head is None: self.head = new_node new_node.next = self.head new_node.prev = self.head else: tail = self.head.prev tail.next = new_node new_node.prev = tail new_node.next = self.head self.head.prev = new_node def print_reverse(self): if self.head is None: return [] current = self.head.prev # start from the last node result = [] while True: result.append(current.data) current = current.prev if current == self.head.prev: break print(result) return result # Utility function to setup the circular doubly linked list and print in reverse order def setup_and_print_reverse(data_list): cdl_list = CircularDoublyLinkedList() for data in data_list: cdl_list.append(data) return cdl_list.print_reverse()"},{"question":"You have a stream of binary data, e.g. 01011001, that you need to process using a frozen set. However, this data is continuously coming in and you have to continuously add these binary strings to the set without any duplicates. Your task is to design a function that takes in a new string of binary data at each call and checks if it is already present in the frozen set. If it is not present, it adds it to the set and returns true. If it is a duplicate, it simply returns false without adding it again. Your function should be optimized for efficiency to handle a large stream of incoming data.","solution":"class BinaryDataStream: def __init__(self): # Use a set to keep track of the binary data strings for efficiency self.seen_data = set() def process_data(self, binary_string): Processes the incoming binary string and checks if it's already present. If not, it adds it to the set and returns True. If it's a duplicate, returns False. Args: binary_string (str): a string of binary data. Returns: bool: True if the string was added to the set, False if it was a duplicate. if binary_string in self.seen_data: return False self.seen_data.add(binary_string) return True"},{"question":"Given a biased simulation framework, explain how to apply the Metropolis-Hastings algorithm in the context of reinforcement learning to correct the bias and provide a sample python code to show the implementation.","solution":"import numpy as np class MetropolisHastings: def __init__(self, target_distribution, proposal_distribution): self.target_distribution = target_distribution self.proposal_distribution = proposal_distribution def sample(self, initial_state, iterations=10000): current_state = initial_state samples = [current_state] for _ in range(iterations): proposed_state = self.proposal_distribution(current_state) acceptance_ratio = min(1, self.target_distribution(proposed_state) / self.target_distribution(current_state)) if np.random.rand() < acceptance_ratio: current_state = proposed_state samples.append(current_state) return samples"},{"question":"Suggest a function to round a float number to two decimal places in Python without using any built-in rounding functions or libraries. Your function should follow the standard rules of rounding, such as rounding up if the digit after two decimal places is 5 or greater, and rounding down if it is less than 5. Additionally, your function should handle negative numbers correctly and round them towards negative infinity.","solution":"def custom_round(number): Rounds a float number to two decimal places without using built-in rounding functions. factor = 10**2 if number >= 0: result = (int(number * factor + 0.5)) / factor else: result = (int(number * factor - 0.5)) / factor return result"},{"question":"Write a Python function named \\"calculate_circle_area\\" that takes a parameter \\"radius\\" which is a positive number, and returns the area of a circle with the given radius.","solution":"import math def calculate_circle_area(radius): Returns the area of a circle with a given radius. Arguments: radius -- a positive number representing the radius of the circle Returns: The area of the circle if radius <= 0: raise ValueError(\\"Radius must be a positive number\\") return math.pi * (radius ** 2)"},{"question":"Use Python to filter out all the prime numbers from a given list of integers. Additionally, handle any errors that may occur during the filtering process and provide appropriate error messages.","solution":"def is_prime(n): Helper function to determine if n is a prime number. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def filter_primes(nums): Filters out prime numbers from a given list of integers. Parameters: nums (list): List of integers to filter for prime numbers. Returns: list: List of prime numbers from the input list. if not isinstance(nums, list): raise TypeError(\\"Input should be a list\\") primes = [] for num in nums: if not isinstance(num, int): raise ValueError(f\\"Invalid item in the list: {num}. All items must be integers.\\") if is_prime(num): primes.append(num) return primes"},{"question":"Please write a Python function named \\"calculate_discounted_price\\" in the code editor below. The function should take two parameters: \\"price\\" (a positive float) and \\"discount_percent\\" (a float between 0 and 100, inclusive). The function should return the price after applying the discount.","solution":"def calculate_discounted_price(price, discount_percent): Calculates the discounted price given the original price and discount percentage. Parameters: price (float): The original price, a positive float. discount_percent (float): The discount percentage, a float between 0 and 100 inclusive. Returns: float: The price after applying the discount. if not 0 <= discount_percent <= 100: raise ValueError(\\"Discount percent must be between 0 and 100 inclusive\\") discount_amount = (discount_percent / 100) * price discounted_price = price - discount_amount return discounted_price"},{"question":"I have a list of integers, and I want to generate every possible permutation of the list. I can write a Python function to achieve this. Can you provide a solution that meets these requirements?","solution":"from itertools import permutations def generate_permutations(lst): Generate all possible permutations of a list of integers. Args: lst (list): List of integers to generate permutations for. Returns: list: A list containing all permutations of the input list. return list(permutations(lst))"},{"question":"Given a positive integer n, print all possible permutations of numbers from 1 to n. Try to optimize your program to reduce redundant computation as much as possible.","solution":"from itertools import permutations def generate_permutations(n): Given a positive integer n, generate all possible permutations of numbers from 1 to n. return list(permutations(range(1, n + 1)))"},{"question":"Create a function that takes a list of strings and combines them together into one string. The function should also remove any duplicate strings from the list before concatenating them. If the list is empty, the function should return an empty string. The input list can contain up to 100 strings, each string can have up to 50 characters. The function should be able to handle this large input size efficiently.","solution":"def combine_unique_strings(string_list): Combines a list of strings into one string, removing any duplicates. unique_strings = list(dict.fromkeys(string_list)) # Remove duplicates and preserve order return ''.join(unique_strings) # Concatenate the unique strings"},{"question":"Create a Python function that takes two input strings and determines if they are anagrams by checking if they contain the exact same characters with the same frequency, ignoring case and whitespace. If the strings are anagrams, return True; otherwise, return False. The function should handle Unicode strings and any special characters. Use a dictionary to store character frequencies. To increase the difficulty, implement the function without using any built-in Python functions for sorting or collections library, and ensure it runs in O(n) time complexity.","solution":"def are_anagrams(s1, s2): Determines if two strings are anagrams, ignoring case and whitespace. Args: s1 (str): First string. s2 (str): Second string. Returns: bool: True if the strings are anagrams, False otherwise. def clean_string(s): Helper function to normalize the string: converts to lower case and removes spaces. return ''.join(c.lower() for c in s if not c.isspace()) def get_char_count(s): Helper function to count frequency of each character in the string. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count cleaned_s1 = clean_string(s1) cleaned_s2 = clean_string(s2) if len(cleaned_s1) != len(cleaned_s2): return False s1_char_count = get_char_count(cleaned_s1) s2_char_count = get_char_count(cleaned_s2) return s1_char_count == s2_char_count"},{"question":"How can I generate a random floating-point number between two specified numbers using Python?","solution":"import random def generate_random_float(start, end): Generates a random floating-point number between the specified \`start\` and \`end\` values. Args: start (float): The lower bound of the range. end (float): The upper bound of the range. Returns: float: A random floating-point number between \`start\` and \`end\`. return random.uniform(start, end)"},{"question":"Write a function that takes in a 2D list of integers and returns the first non-repeating element. If there are no non-repeating elements, the function should return None. However, there are two caveats: you can only iterate through the 2D list once, and you cannot use any additional data structures or libraries (such as dictionaries or sets) to aid in your solution. Can you come up with a solution that meets these requirements?","solution":"def first_non_repeating_element(matrix): Returns the first non-repeating element in a 2D list of integers. If no non-repeating element exists, returns None. flatten_list = [num for row in matrix for num in row] for i, num in enumerate(flatten_list): if flatten_list.count(num) == 1: return num return None"},{"question":"Write a Python function called \`is_proper_sublist\` that takes in two lists, \`sublist\` and \`main_list\`, and returns True if \`sublist\` is a proper sublist of \`main_list\`, and False otherwise. A proper sublist is a sublist that is a part of the main list but is not equal to the main list itself.","solution":"def is_proper_sublist(sublist, main_list): Returns True if 'sublist' is a proper sublist of 'main_list', and False otherwise. if sublist == main_list: return False len_sublist = len(sublist) len_main_list = len(main_list) for i in range(len_main_list - len_sublist + 1): if main_list[i:i+len_sublist] == sublist: return True return False"},{"question":"Implement a recursive algorithm with a single argument that calculates the factorial of a number in Python. The function should also handle edge cases, such as negative numbers and non-integer values.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Returns None for negative numbers or non-integer values. if not isinstance(n, int): return None if n < 0: return None if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a python code to add two numbers using a function. However, the function should only work for numbers that are both integers and positive. If either of the numbers is negative or a float, the function should return an error message. Additionally, the function should only return the sum of the two numbers if the sum is greater than 100. Otherwise, it should return \\"The sum is too small\\".","solution":"def add_positive_integers(a, b): Returns the sum of a and b if both are positive integers and the sum is greater than 100. Otherwise, returns an appropriate error message. if not (isinstance(a, int) and isinstance(b, int)): return \\"Error: Both inputs must be integers.\\" if a <= 0 or b <= 0: return \\"Error: Both inputs must be positive.\\" result = a + b if result > 100: return result else: return \\"The sum is too small\\""},{"question":"Create a Python script that reads a CSV file containing a list of names and email addresses, then generates a personalized greeting email for each recipient using a template stored in a separate text file. The output should be a series of text files, each containing an individualized email ready to be sent.","solution":"import csv def read_csv(file_path): Reads a CSV file and returns a list of dictionaries where each dictionary represents a row in the CSV file with column headers as keys. with open(file_path, mode='r') as file: reader = csv.DictReader(file) return [row for row in reader] def read_template(file_path): Reads a template text file and returns its content as a string. with open(file_path, mode='r') as file: return file.read() def create_personalized_emails(recipients, template): Creates personalized emails by replacing placeholders in the template with the actual recipient data. emails = [] for recipient in recipients: email = template.format(**recipient) emails.append(email) return emails def save_emails(emails, output_dir): Saves each email in the emails list to a separate text file in the specified output directory. Files are named 'email_<index>.txt'. for i, email in enumerate(emails): with open(f\\"{output_dir}/email_{i+1}.txt\\", mode='w') as file: file.write(email)"},{"question":"Given the following Python code, generate a function that will print the first 5 even-indexed elements of a list. If the list has fewer than 5 elements, print all elements that have even indices. Add error handling in case the input is not a list.","solution":"def print_even_indexed_elements(input_list): Prints the first 5 even-indexed elements of the input list. If the list has fewer than 5 elements, prints all elements that have even indices. Adds error handling for cases where the input is not a list. if not isinstance(input_list, list): raise ValueError(\\"Input must be a list\\") # Get the elements at even indices (0, 2, 4, 6, 8) even_indexed_elements = [input_list[i] for i in range(0, len(input_list), 2)] # Print the first 5 of them for element in even_indexed_elements[:5]: print(element)"},{"question":"Write a code snippet to find the most frequent number greater than 100 from a list of numbers. The list may contain duplicates and can have a maximum of 10^6 numbers. The numbers in the list are guaranteed to be integers between 1 and 10^6. Your solution should have a time complexity of O(n) and a space complexity of O(m), where n is the number of elements in the list and m is the number of unique numbers greater than 100 in the list.","solution":"from collections import defaultdict def most_frequent_number_greater_than_100(arr): Returns the most frequent number greater than 100 in the list. count = defaultdict(int) max_freq = 0 most_freq_num = -1 for num in arr: if num > 100: count[num] += 1 if count[num] > max_freq: max_freq = count[num] most_freq_num = num return most_freq_num"},{"question":"Write a function \`combine_lists(list1, list2)\` that combines two given lists with an alternating pattern while also adding the index of the element at the start of each element. The function should return the combined list with the specified format.","solution":"def combine_lists(list1, list2): Combines two lists in an alternating pattern while prefixing each element with its index. If one list is longer, the remaining elements should still be included with their respective indices. combined_list = [] max_length = max(len(list1), len(list2)) for i in range(max_length): if i < len(list1): combined_list.append(f\\"{i}{list1[i]}\\") if i < len(list2): combined_list.append(f\\"{i}{list2[i]}\\") return combined_list"},{"question":"Write a Python program which not only returns an alphabetical list of all the files in a given directory but also provides an option to filter the list by file extensions. The user should be able to specify multiple extensions for filtering. Moreover, the program should maintain the hierarchy of directories and provide results in a nested dictionary format where the keys are directory names and values are lists of filtered file names within those directories. Additionally, the program should be able to handle large directory trees efficiently. Implement appropriate error handling and consider edge cases.","solution":"import os def list_files(directory, extensions=None): Returns a nested dictionary with directory names as keys and values as lists of files within those directories. Filters the files based on the provided extensions if any. def recursive_list_files(current_directory): result = {} entries = os.listdir(current_directory) files = [] directories = [] for entry in entries: full_path = os.path.join(current_directory, entry) if os.path.isdir(full_path): directories.append(full_path) else: if extensions: if any(entry.endswith(ext) for ext in extensions): files.append(entry) else: files.append(entry) files.sort() result[current_directory] = files for d in directories: result.update(recursive_list_files(d)) return result if not os.path.isdir(directory): raise ValueError(\\"The specified directory does not exist or is not a directory\\") return recursive_list_files(directory)"},{"question":"Could you help me to write a python code that can calculate the proportion of non-zero pixels in certain x,y range of a image with shape, for example, (1024,1024)? All elements in the image are integers.","solution":"import numpy as np def calculate_non_zero_proportion(image, x_range, y_range): Calculate the proportion of non-zero pixels in the specified x and y range of the image. Parameters: image (np.ndarray): The input image as a 2D numpy array of integers. x_range (tuple): A tuple indicating the (start, end) range of x-coordinates. y_range (tuple): A tuple indicating the (start, end) range of y-coordinates. Returns: float: The proportion of non-zero pixels in the specified range. x_start, x_end = x_range y_start, y_end = y_range # Extract the sub-image sub_image = image[x_start:x_end, y_start:y_end] # Calculate the number of non-zero pixels non_zero_count = np.count_nonzero(sub_image) # Calculate the total number of pixels in the sub-image total_pixels = sub_image.size # Calculate the proportion of non-zero pixels if total_pixels == 0: return 0.0 return non_zero_count / total_pixels"},{"question":"Write a 5 line Python code to calculate the area of a triangle given the lengths of its three sides using Heron's Formula. Your code should also check if the given lengths can form a valid triangle.","solution":"import math def triangle_area(a, b, c): if a + b > c and a + c > b and b + c > a: # check if it's a valid triangle s = (a + b + c) / 2 # semi-perimeter return math.sqrt(s * (s - a) * (s - b) * (s - c)) # area using Heron's formula else: return None"},{"question":"Devise a sorting algorithm that not only sorts an array consisting of 20 distinct integers in non-descending order, but also finds the median. Moreover, implement it without using any built-in sorting functions or data structures, and optimize it for better time complexity.","solution":"def quicksort(arr): Performs quicksort on the input array and returns the sorted array. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) def find_median(sorted_arr): Finds and returns the median value of the sorted array. n = len(sorted_arr) if n % 2 == 0: return (sorted_arr[n // 2 - 1] + sorted_arr[n // 2]) / 2 else: return sorted_arr[n // 2] def sort_and_find_median(arr): Sorts the array of 20 distinct integers using quicksort and finds the median. sorted_arr = quicksort(arr) median = find_median(sorted_arr) return sorted_arr, median"},{"question":"You are working on a physics simulation project and need to implement a function to calculate the magnetic field due to a current carrying wire at a given point in space. The wire is assumed to be infinitely long and straight, carrying a steady current. The magnetic field at a point is given by the Biot-Savart law. You are provided with a Python function \`calc_B_from_wire.py\` that contains the code snippet below, which is part of the function that calculates the magnetic field components due to the wire.","solution":"import numpy as np def magnetic_field(current, position): Calculate the magnetic field at a position due to a current-carrying wire. Parameters: - current: The current through the wire (I) - position: A tuple (x, y, z) representing the point in space where to calculate the field. Returns: - A tuple (Bx, By, Bz) representing the magnetic field components at the given position. mu0 = 4 * np.pi * 1e-7 # Permeability of free space x, y, z = position # Assume the wire goes along the z-axis and we calculate the magnetic field in the xy-plane r = np.sqrt(x**2 + y**2) if r == 0: return (0.0, 0.0, 0.0) B_magnitude = (mu0 * current) / (2 * np.pi * r) Bx = -B_magnitude * y / r By = B_magnitude * x / r Bz = 0.0 return (Bx, By, Bz)"},{"question":"Write a Python program to take a list of numbers as input and output the number that appears the most number of times. If there is a tie for the most frequent number, output all the numbers that are tied for the lead. If the given list of numbers is empty, output \\"Empty List\\".","solution":"from collections import Counter def most_frequent_numbers(numbers): Returns the number(s) that appear the most frequently in the list. If there is a tie, returns all the numbers that are tied for the lead. If the list is empty, returns \\"Empty List\\". if not numbers: return \\"Empty List\\" count = Counter(numbers) max_count = max(count.values()) most_frequent = [num for num, freq in count.items() if freq == max_count] if len(most_frequent) == 1: return most_frequent[0] else: return most_frequent"},{"question":"Convert the provided pseudocode into the equivalent Python code. Additionally, include error handling for non-integer values and implement a function to check if the input number is a prime. Also ensure the code is optimised for performance considering large numbers.","solution":"import math def is_prime(num): Returns True if the input number is a prime number, otherwise False. if not isinstance(num, int): raise ValueError(\\"Input must be an integer\\") if num <= 1: return False for i in range(2, int(math.sqrt(num)) + 1): if num % i == 0: return False return True"},{"question":"Create a Python script. It should take one string argument and print '_success_' if the argument passed is a non-empty string with more than 5 characters, otherwise, it should print 'failure_'. Additionally, the implementation should not use if-else statements or ternary operators for the condition checking.","solution":"def check_string_length(string): Prints '_success_' if the given string is a non-empty string with more than 5 characters, otherwise prints 'failure_'. Does not use if-else or ternary operators. print(('_success_' * (len(string) > 5) + 'failure_' * (len(string) <= 5))[:9])"},{"question":"Write a Python code that checks if a given string has at least two different characters. Your code should not use any built-in Python functions such as set() or len(). It should return False if all characters in the string are the same, and True otherwise.","solution":"def has_two_different_characters(s): Returns True if the string contains at least two different characters, else returns False. if not s: return False first_char = s[0] for char in s[1:]: if char != first_char: return True return False"},{"question":"Given two different strings, write a program to output the longest common subsequence using dynamic programming.","solution":"def longest_common_subsequence(s1, s2): Returns the longest common subsequence between two strings s1 and s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) lcs = [] i, j = m, n while i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: lcs.append(s1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return ''.join(reversed(lcs))"},{"question":"Develop a recursive function in Python to print a user-specified string m times, each time removing the first and last letter of the string. The string length should initially be at least m characters.","solution":"def recursive_print(s, m): Prints the given string s m times, each time removing the first and last letters of the string. If the resulting string length is less than 1, the recursion stops. if m <= 0 or len(s) < 1: return print(s) recursive_print(s[1:-1], m-1)"},{"question":"Create a random string of 100 characters where each character is a lowercase letter. Additionally, the string should not contain any repeated characters.","solution":"import random import string def generate_random_unique_string(): Generates a random string containing all unique lowercase letters. lowercase_letters = list(string.ascii_lowercase) random.shuffle(lowercase_letters) return ''.join(lowercase_letters)"},{"question":"Write a python program to delete a node from a singly linked list given only access to that node.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def deleteNode(node): Given only access to the node to be deleted, delete this node from the linked list. It is guaranteed that the node is not the tail node of the list. node.val = node.next.val node.next = node.next.next"},{"question":"Given the following input, suggest a python code for computing the Fibonacci number for n using recursion. Additionally, include error handling to handle invalid input.","solution":"def fibonacci(n): Returns the n-th Fibonacci number using recursion. Parameters: n (int): The position in the Fibonacci sequence (must be a non-negative integer) Returns: int: The n-th Fibonacci number Raises: ValueError: If the input is not a non-negative integer if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"I have a dataset of gas station information that I loaded into a Python Pandas DataFrame. How can I write a script that automatically exports the data to a CSV file when I run it? Additionally, could you show me how to implement error handling to prevent potential issues during the export process?","solution":"import pandas as pd def export_to_csv(dataframe, filename): Exports the given DataFrame to a CSV file with the specified filename. Args: dataframe (pd.DataFrame): The DataFrame to export. filename (str): The name of the file to which the data will be exported. Returns: bool: True if export is successful, False otherwise. try: dataframe.to_csv(filename, index=False) return True except Exception as e: print(f\\"An error occurred while exporting to CSV: {e}\\") return False"},{"question":"I want to implement the Scalar Vector product problem using the design pattern and publish the repository on Github. I want the implementation to be based on the Factory design pattern, Strategy Design pattern and also take advantage of polymorphism. Then I want to test the code using PyTest.","solution":"from abc import ABC, abstractmethod class VectorStrategy(ABC): @abstractmethod def compute(self, scalar, vector): pass class ScalarVectorProduct(VectorStrategy): def compute(self, scalar, vector): return [scalar * v for v in vector] class VectorFactory: def __init__(self): self._strategies = {} def register_strategy(self, key, strategy): self._strategies[key] = strategy def get_strategy(self, key): strategy = self._strategies.get(key) if not strategy: raise ValueError(f\\"Strategy not found for key: {key}\\") return strategy # Register the strategies factory = VectorFactory() factory.register_strategy('scalar_vector_product', ScalarVectorProduct())"},{"question":"Could you modify the following code to achieve the desired functionality without using global variables or nonlocal keyword, and without using any built-in Python functions or libraries? The goal is to increment the value of \`x\` by 1, then print the value of \`x\` only if it is greater than 10. If \`x\` is less than or equal to 10, the function should return without printing anything.","solution":"def increment_and_print(x): Increments x by 1 and prints x if it is greater than 10. x = x + 1 if x > 10: print(x)"},{"question":"Reverse the following array in-place using Python, without using any built-in functions or libraries that directly reverse the array. Your solution should have a time complexity of O(n) and a space complexity of O(1).","solution":"def reverse_array(arr): Reverse the array in place. Parameters: arr (list): List of elements to be reversed. Returns: None: The list is reversed in place. left = 0 right = len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1"},{"question":"Write a program in Python to calculate the factorial of a given number using recursive function. Avoid using built-in math functions.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a Python program that parses a JSON object and returns only the values of a specific key. The program should ignore any keys that do not match the specified key. Additionally, if the specified key is nested within multiple levels of the JSON object, the program should still be able to retrieve all of its values.","solution":"import json def extract_values(json_obj, key): Extract all values of specified key from a nested JSON object. Parameters: - json_obj (dict or list): The JSON object or array to search through. - key (str): The key to search for and extract values. Returns: - list: A list of values corresponding to the specified key. def extract(obj, key): Recursively search for values of key in JSON tree. values = [] if isinstance(obj, dict): for k, v in obj.items(): if k == key: values.append(v) else: values.extend(extract(v, key)) elif isinstance(obj, list): for item in obj: values.extend(extract(item, key)) return values return extract(json_obj, key)"},{"question":"Write a clear and concise Python script that features novel functions not included in the standard libraries. This script should be able to transform an array of hexadecimal values into a list of their decimal equivalents. Consider using a list comprehension or a map/filter function for a more optimized solution. Don't forget to include a function name, input parameters, and print statements for output verification.","solution":"def hex_to_decimal(hex_array): Converts an array of hexadecimal values into a list of their decimal equivalents. Parameters: hex_array (list of str): List of hexadecimal strings. Returns: list of int: List of decimal integers. return [int(x, 16) for x in hex_array] # Example usage: hex_array = [\\"1A\\", \\"2F\\", \\"3B\\", \\"FF\\"] print(hex_to_decimal(hex_array))"},{"question":"Create a function in Python to find the maximum number of overlapping intervals. The input will be a list of intervals, where each interval is represented as a tuple of two integers: the start and end points. The function should return the maximum number of overlapping intervals at any point.","solution":"def max_overlapping_intervals(intervals): Finds the maximum number of overlapping intervals from a list of intervals. Parameters: intervals (list of tuple): A list of intervals where each interval is represented as a tuple (start, end). Returns: int: The maximum number of overlapping intervals. if not intervals: return 0 events = [] for start, end in intervals: events.append((start, 'start')) events.append((end, 'end')) events.sort() max_overlaps = 0 current_overlaps = 0 for event in events: if event[1] == 'start': current_overlaps += 1 max_overlaps = max(max_overlaps, current_overlaps) elif event[1] == 'end': current_overlaps -= 1 return max_overlaps"},{"question":"Generate a code to extract the key-value pairs from a JSON string, where the JSON string may contain nested objects and arrays. Additionally, handle cases where the JSON string is invalid or contains invalid characters.","solution":"import json def extract_key_value_pairs(json_string): Extracts key-value pairs from a JSON string, handling nested objects and arrays. Args: - json_string (str): JSON string to extract key-value pairs from. Returns: - dict: Dictionary containing flattened key-value pairs. try: json_data = json.loads(json_string) except json.JSONDecodeError: return \\"Invalid JSON\\" def flatten(data, parent_key=''): items = [] if isinstance(data, dict): for k, v in data.items(): new_key = f\\"{parent_key}.{k}\\" if parent_key else k items.extend(flatten(v, new_key).items()) elif isinstance(data, list): for i, v in enumerate(data): new_key = f\\"{parent_key}[{i}]\\" items.extend(flatten(v, new_key).items()) else: items.append((parent_key, data)) return dict(items) return flatten(json_data)"},{"question":"Write a script in Python that counts from 0 to 10, but also prints whether the current number is an even or odd number. Additionally, the script should raise an exception if the number is a prime number and the number should be checked for primality using a recursive function.","solution":"def is_prime(n, i=2): Recursively checks if a number n is a prime number. if n <= 2: return n == 2 if n % i == 0: return False if i * i > n: return True return is_prime(n, i + 1) def count_and_check(): Counts from 0 to 10, prints whether the current number is even or odd, and raises an exception if the current number is prime. for num in range(11): if is_prime(num): raise Exception(f\\"{num} is a prime number!\\") elif num % 2 == 0: print(f\\"{num} is even.\\") else: print(f\\"{num} is odd.\\")"},{"question":"Create a python function that takes a string as an input and returns a result string with all vowels swapped with their next alphabet character and all consonants swapped with their previous alphabet character.","solution":"def swap_characters(s): This function takes a string as an input and returns a string where all vowels are swapped with their next alphabet character and all consonants are swapped with their previous alphabet character. Parameters: s (str): The input string Returns: str: The resulting string after swapping characters vowels = \\"aeiouAEIOU\\" result = [] for char in s: if char.isalpha(): if char in vowels: # Swap vowels with next character next_char = chr(ord(char) + 1) result.append(next_char) else: # Swap consonants with previous character prev_char = chr(ord(char) - 1) result.append(prev_char) else: result.append(char) return ''.join(result)"},{"question":"I want a \\"preference\\" solution in Python, where I have two dictionaries, ref_dict and comp_dict. If their values don't match, I will choose the value from comp_dict. All values should be from comp_dict if the dictionary does not match.","solution":"def preference(ref_dict, comp_dict): Returns a dictionary containing values from comp_dict. If a key exists in both dictionaries and their values don't match, the value from comp_dict is taken. Parameters: ref_dict (dict): Reference dictionary. comp_dict (dict): Comparison dictionary. Returns: dict: A dictionary with values from comp_dict, preferring its values over ref_dict. # Initialize the result dictionary with values from comp_dict result_dict = comp_dict.copy() # Update values from ref_dict that are missing in comp_dict for key, value in ref_dict.items(): if key not in comp_dict: result_dict[key] = value return result_dict"},{"question":"Write a code that takes in a list of names and creates a dictionary with the names as keys and their lengths as values.","solution":"def names_to_lengths(names): Takes a list of names and returns a dictionary with the names as keys and their lengths as values. :param names: List of names :return: Dictionary with names as keys and their lengths as values return {name: len(name) for name in names}"},{"question":"Write a function in Python that takes a list of integers as input and returns the most frequent integer in the list. If there are multiple integers with the same highest frequency, return the one that appears first in the list.","solution":"from collections import defaultdict def most_frequent_integer(lst): Returns the most frequent integer in the list. If there are multiple integers with the same highest frequency, return the one that appears first in the list. if not lst: return None frequency = defaultdict(int) for num in lst: frequency[num] += 1 max_freq = max(frequency.values()) for num in lst: if frequency[num] == max_freq: return num"},{"question":"Write a Python program that asks the user to input the number of movies they want to add to a list. For each movie, the program asks the user to input the movie title and its genre. The program stores the movie and genre information in a dictionary with the movie title as the key and the genre as the value. After the user has finished adding movies, the program excludes genres that have duplicate items in the list and print out the updated list of movies with their respective genres. In the end, the program counts and displays the total number of movies in the list, excluding the duplicates.","solution":"def get_movies(): movie_dict = {} num_movies = int(input(\\"Enter the number of movies you want to add: \\")) for _ in range(num_movies): title = input(\\"Enter the movie title: \\") genre = input(\\"Enter the movie genre: \\") movie_dict[title] = genre # Exclude genres that have duplicate movies all_genres = list(movie_dict.values()) unique_genres = {genre for genre in all_genres if all_genres.count(genre) == 1} updated_movies = {title: genre for title, genre in movie_dict.items() if genre in unique_genres} print(\\"Updated List of Movies with their Genres:\\") for title, genre in updated_movies.items(): print(f\\"{title}: {genre}\\") print(f\\"Total number of movies in the updated list: {len(updated_movies)}\\") return updated_movies # Uncomment the below line to run the program interactively # get_movies()"},{"question":"Create a Python function that takes a matrix of numbers as input and returns a list of the top k rows with the highest sum of absolute differences between consecutive elements.","solution":"def top_k_rows_with_highest_abs_diff(matrix, k): Returns the top k rows with the highest sum of absolute differences between consecutive elements. :param matrix: List of lists, where each inner list is a row of numbers. :param k: Integer, the number of top rows to return. :return: List of lists, the top k rows with the highest sum of absolute differences. def sum_of_abs_diff(row): return sum(abs(row[i] - row[i - 1]) for i in range(1, len(row))) # Calculate the sum of absolute differences for each row row_scores = [(row, sum_of_abs_diff(row)) for row in matrix] # Sort rows by their scores in descending order and take the top k sorted_rows = sorted(row_scores, key=lambda x: x[1], reverse=True) # Extract the rows from the sorted (row, score) tuples top_k_rows = [row for row, score in sorted_rows[:k]] return top_k_rows"},{"question":"Design a Python function snippet to Update Extreme Weather: Weather Forecast for Decision Making for Beginners. Implement if/else or switch/case statements to handle different conditions related to the Reliability. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def update_weather_forecast(temperature, wind_speed, precipitation): Provides a weather forecast based on temperature, wind speed, and precipitation. Param: temperature (float): The temperature in degrees Celsius. wind_speed (float): The wind speed in km/h. precipitation (float): The amount of precipitation in mm. Returns: str: A string describing the weather forecast. # Initialize the forecast variable forecast = \\"Weather forecast: \\" # Decision making based on temperature if temperature <= 0: forecast += \\"It's freezing cold. \\" elif temperature <= 15: forecast += \\"It's a bit chilly. \\" elif temperature <= 30: forecast += \\"The temperature is moderate. \\" else: forecast += \\"It's quite hot. \\" # Decision making based on wind speed if wind_speed < 15: forecast += \\"The wind speed is calm. \\" elif wind_speed < 30: forecast += \\"There is a light breeze. \\" elif wind_speed < 50: forecast += \\"Expect some strong winds. \\" else: forecast += \\"It's very windy. \\" # Decision making based on precipitation if precipitation == 0: forecast += \\"No precipitation expected.\\" elif precipitation < 5: forecast += \\"Light rain is possible.\\" elif precipitation < 20: forecast += \\"Moderate rainfall expected.\\" else: forecast += \\"Heavy rain is likely.\\" return forecast"},{"question":"Given a bi-dimensional matrix and a number 'n', create a program that will display the 'n' largest elements in the matrix and their respective positions (in terms of row and column indices). The matrix and number 'n' should be user-inputted, bearing in mind that 'n' can be up to the total number of elements in the matrix.","solution":"def find_n_largest_elements(matrix, n): Finds the n largest elements in a bi-dimensional matrix along with their positions. Args: matrix: List[List[int]] -> A bi-dimensional list representing the matrix. n: int -> The number of largest elements to find. Returns: List[Tuple[int, int, int]] -> A list of tuples where each tuple consists of an element and its position (row, column). # Flatten the matrix to access elements along with their positions elements = [] for row in range(len(matrix)): for col in range(len(matrix[row])): elements.append((matrix[row][col], row, col)) # Sort the elements based on their value in descending order elements.sort(key=lambda x: x[0], reverse=True) # Fetch the first n elements n_largest_elements = elements[:n] return n_largest_elements # Example usage (uncomment to run this example): # matrix = [ # [5, 12, 3], # [8, 7, 6], # [14, 10, 9] # ] # n = 4 # print(find_n_largest_elements(matrix, n)) # Expected output: [(14, 2, 0), (12, 0, 1), (10, 2, 1), (9, 2, 2)]"},{"question":"Create a function that takes in a list of integers and a target integer as parameters. The function should search the list and return the first index at which the target integer is found, or -1 if the target integer does not exist in the list.","solution":"def find_index(lst, target): Returns the first index of the target in the list lst. If the target is not found, returns -1. try: return lst.index(target) except ValueError: return -1"},{"question":"Write a Python script that takes a list of temperatures in Fahrenheit as input, and prints out the sum, average, minimum, and maximum temperatures in Celsius. Make sure to handle any possible errors, such as non-numeric input.","solution":"def fahrenheit_to_celsius(fahrenheit): Converts a temperature from Fahrenheit to Celsius. Formula: (Fahrenheit - 32) * 5/9 try: return (float(fahrenheit) - 32) * 5/9 except ValueError: raise ValueError(\\"Temperature must be a number\\") def process_temperatures(temperatures): Takes a list of temperatures in Fahrenheit, converts them to Celsius, and returns the sum, average, minimum, and maximum temperatures in Celsius. Handles non-numeric input by raising a ValueError. if not temperatures: raise ValueError(\\"Input list is empty\\") celsius_temps = [fahrenheit_to_celsius(temp) for temp in temperatures] temp_sum = sum(celsius_temps) temp_avg = temp_sum / len(celsius_temps) temp_min = min(celsius_temps) temp_max = max(celsius_temps) return temp_sum, temp_avg, temp_min, temp_max"},{"question":"Write a Python program that multiplies two large numbers represented as strings and returns the product as a string. The input strings can contain up to 1000 digits. You should not use any built-in multiplication functions or libraries for handling large numbers. The program should handle both positive and negative numbers.","solution":"def multiply_strings(num1, num2): Multiplies two large numbers represented as strings and returns the product as a string. Both numbers can be negative. # Check if either of the numbers is zero if num1 == \\"0\\" or num2 == \\"0\\": return \\"0\\" # Check for negative numbers negative = False if num1[0] == '-' and num2[0] == '-': num1, num2 = num1[1:], num2[1:] elif num1[0] == '-': negative = True num1 = num1[1:] elif num2[0] == '-': negative = True num2 = num2[1:] # Initialize the result as an array of zeros, of length equal to the sum of lengths of two numbers result = [0] * (len(num1) + len(num2)) # Reverse both numbers to simplify position calculation num1, num2 = num1[::-1], num2[::-1] # Multiply each digit and add to the result for i in range(len(num1)): for j in range(len(num2)): result[i + j] += int(num1[i]) * int(num2[j]) result[i + j + 1] += result[i + j] // 10 # carry over result[i + j] %= 10 # Remove leading zeros while len(result) > 1 and result[-1] == 0: result.pop() # Convert result back to a string result_str = ''.join(map(str, result[::-1])) # If the result should be negative if negative: result_str = '-' + result_str return result_str"},{"question":"Create a regex pattern to validate a URL that begins with 'https', ends with '.com', and must include one or more subdomains. The pattern should also exclude any URL with query or fragment identifiers.","solution":"import re def validate_url(url): Validates a URL that starts with 'https', ends with '.com', includes one or more subdomains, and does not contain query or fragment identifiers. Parameters: url (str): The URL to validate. Returns: bool: True if the URL is valid, False otherwise. pattern = r'^https://([a-zA-Z0-9-]+.)+[a-zA-Z0-9-]+.com' return bool(re.match(pattern, url))"},{"question":"Develop a Python function which, given a sequential group of numerical values as input, constructs a dictionary. The keys of this dictionary should be the original numbers from the list, while the respective values should represent the square of these numbers, demonstrating a transformation from linear to quadratic space. As an example, the sequential list num_list = [1, 2, 3, 4] should be processed by this function.","solution":"def construct_square_dict(num_list): Constructs a dictionary where the keys are the numbers from the input list and the values are their respective squares. :param num_list: List of sequential numerical values :return: Dictionary with numbers as keys and their squares as values return {num: num ** 2 for num in num_list}"},{"question":"Develop a Python function that takes an input decimal number, specifically an integer, and transforms it into the corresponding binary representation as string without using built-in or library functions for binary conversion. The function should also handle negative integers by implementing the two's complement binary form. Input: -15.","solution":"def int_to_binary(num): Converts an integer to its binary representation as a string. This function does not use any built-in or library functions for binary conversion. For negative integers, it uses two's complement binary representation. if num == 0: return \\"0\\" is_negative = num < 0 if is_negative: num = -num binary_str = \\"\\" while num > 0: binary_str = str(num % 2) + binary_str num = num // 2 if is_negative: # Convert to two's complement binary representation n = len(binary_str) binary_str = '0' * (32 - n) + binary_str # Make it a 32-bit binary number binary_str = ''.join('1' if x == '0' else '0' for x in binary_str) # Invert bits binary_str = bin(int(binary_str, 2) + 1)[2:] # Add 1 for two's complement and convert back to binary string return binary_str"},{"question":"Write a python function that takes in a list of integers and returns a new list with only the odd numbers.","solution":"def filter_odd_numbers(numbers): Returns a list containing only the odd numbers from the given list of integers. :param numbers: List of integers :return: List of odd integers return [num for num in numbers if num % 2 != 0]"},{"question":"Your task is to generate a random 5 digit number using the function given in the example below. Additionally, you need to modify the program to ensure that the generated number is not divisible by any prime number less than or equal to 10. You cannot use any additional libraries or functions to check for prime numbers. Can you come up with a solution that satisfies these requirements? Remember, your code should be self-contained and not rely on any external packages or libraries.","solution":"import random def is_divisible_by_any_prime(n, primes): for prime in primes: if n % prime == 0: return True return False def generate_random_5_digit_number(): primes_upto_10 = [2, 3, 5, 7] while True: num = random.randint(10000, 99999) if not is_divisible_by_any_prime(num, primes_upto_10): return num"},{"question":"Given an array of integers, implement a function that returns the sum of all the unique elements in the input array. Unique elements are defined as elements that appear exactly once in the array. Additionally, whenever an element is added to the sum, log that operation to a separate array which will contain pairs of the added value and the current sum after it was added.","solution":"def sum_of_unique_elements(arr): Returns the sum of all unique elements in the input array. A unique element is defined as an element that appears exactly once in the array. Also logs the addition operation to a separate list containing pairs of the added value and the current sum. from collections import Counter # Count the occurrences of each element in the array counts = Counter(arr) # Initialize the sum and log list unique_sum = 0 log = [] # Loop through the array for num in arr: if counts[num] == 1: # If the element is unique, add it to the sum unique_sum += num # Log the addition log.append((num, unique_sum)) return unique_sum, log"},{"question":"Write a Python program that sorts an array of integers using the merge sort algorithm.","solution":"def merge_sort(arr): Sorts an array of integers using the merge sort algorithm. Parameters: arr (list): A list of integers to be sorted. Returns: list: A new sorted list. if len(arr) <= 1: return arr def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half)"},{"question":"I have a function called \`svmClassifier\`, I want to use it with another function called \`calculateAccuracy\`. The \`svmClassifier\` takes in three arguments: \`features_train\`, \`labels_train\`, and \`features_test\` as well as \`kernel\`, \`C\`, and \`verbose\` as keyword arguments. The \`calculateAccuracy\` function takes in the \`predictions\` and \`labels_test\` as arguments. Modify the \`calculateAccuracy\` function so I can pass in the three arguments: \`features_train\`, \`labels_train\`, \`features_test\`, \`labels_test\`, \`kernel\`, \`C\`, and \`verbose\`.","solution":"def svmClassifier(features_train, labels_train, features_test, kernel='linear', C=1.0, verbose=False): from sklearn import svm clf = svm.SVC(kernel=kernel, C=C, verbose=verbose) clf.fit(features_train, labels_train) return clf.predict(features_test) def calculateAccuracy(features_train, labels_train, features_test, labels_test, kernel='linear', C=1.0, verbose=False): predictions = svmClassifier(features_train, labels_train, features_test, kernel, C, verbose) accuracy = sum(predictions == labels_test) / len(labels_test) return accuracy"},{"question":"Given a set of unique words, write a function to find the minimal possible prefix tree (Trie) of the given words, where the tree's nodes can only contain lowercase letters and have at most 26 children (one for each letter). Each word in the input set must appear as a prefix in this tree. Additionally, ensure that the function can handle large inputs efficiently.","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word): node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def minimal_prefix_tree(self, words): for word in words: self.insert(word) return self.root def build_minimal_prefix_tree(words): trie = Trie() return trie.minimal_prefix_tree(words)"},{"question":"Given a sorted list of n integers that has been rotated an unknown number of times, write a function that takes an element and returns its position in the rotated list using binary search. Handle cases where the element is not in the list. Alongside this, analyze the provided piece of erroneous code and list at least 3 mistakes found.","solution":"def binary_search_rotated(nums, target): This function returns the index of target in a rotated sorted list. If target is not in the list, it returns -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid # Determine which part is sorted if nums[left] <= nums[mid]: # Left part is sorted if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: # Right part is sorted if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1 # Example usage: # rotated_list = [4, 5, 6, 7, 0, 1, 2] # target = 0 # print(binary_search_rotated(rotated_list, target)) # Output: 4"},{"question":"I need to write a Python script that can go through a directory and list all the files that have been modified within the last 24 hours. Can someone help me with this?","solution":"import os import time def get_recent_files(directory): Returns a list of files in the specified directory that were modified in the last 24 hours. :param directory: Directory to search for files :return: List of file paths modified in the last 24 hours current_time = time.time() recent_files = [] for dirpath, dirnames, filenames in os.walk(directory): for filename in filenames: filepath = os.path.join(dirpath, filename) modification_time = os.path.getmtime(filepath) if current_time - modification_time <= 86400: # 24 hours in seconds recent_files.append(filepath) return recent_files"},{"question":"Create a two player turn based game that awards points to the player that wins the turn. Use the random module in python to generate the moves for each player.","solution":"import random def generate_move(): Generates a random move for the player. Returns a random integer between 1 and 100. return random.randint(1, 100) def play_turn(player1, player2): Plays a turn and returns the name of the winner of the turn and the moves of both players. move1 = generate_move() move2 = generate_move() if move1 > move2: winner = player1 elif move1 < move2: winner = player2 else: winner = None # Tie situation return winner, move1, move2 def play_game(player1, player2, rounds=5): Plays the game for a specified number of rounds, and returns the final score. score = {player1: 0, player2: 0} for _ in range(rounds): winner, move1, move2 = play_turn(player1, player2) if winner: score[winner] += 1 return score"},{"question":"Write a function 'play_game' that plays a simplified version of rock-paper-scissors against a computer opponent. The function should take two string arguments: the player's choice ('rock', 'paper', or 'scissors') and the computer's choice (also 'rock', 'paper', or 'scissors'). The function should return a string indicating the outcome of the game: 'You win!', 'You lose!', or 'It's a tie!'. If either the player or the computer makes an invalid choice, the function should return 'Invalid input!'. Additionally, the function should raise a ValueError if the input types are not strings.","solution":"def play_game(player_choice, computer_choice): Plays a simplified version of rock-paper-scissors. Parameters: player_choice (str): The player's choice ('rock', 'paper', or 'scissors'). computer_choice (str): The computer's choice ('rock', 'paper', or 'scissors'). Returns: str: The outcome of the game: 'You win!', 'You lose!', 'It's a tie!', or 'Invalid input!'. valid_choices = ['rock', 'paper', 'scissors'] if not isinstance(player_choice, str) or not isinstance(computer_choice, str): raise ValueError('Both player_choice and computer_choice must be strings.') player_choice = player_choice.lower() computer_choice = computer_choice.lower() if player_choice not in valid_choices or computer_choice not in valid_choices: return 'Invalid input!' if player_choice == computer_choice: return \\"It's a tie!\\" if (player_choice == 'rock' and computer_choice == 'scissors') or (player_choice == 'paper' and computer_choice == 'rock') or (player_choice == 'scissors' and computer_choice == 'paper'): return 'You win!' return 'You lose!'"},{"question":"Write a function that takes an input of a binary tree, and returns a list that contains the tree's odd value nodes in reverse order. Exclude even valued nodes and ensure your function has good time and space complexity.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def get_odd_values_reverse_order(root): Given the root of a binary tree, return a list of odd value nodes in reverse order. Exclude even valued nodes. if not root: return [] def dfs(node, values): if not node: return if node.value % 2 != 0: values.append(node.value) # Perform DFS on left and right children dfs(node.left, values) dfs(node.right, values) odd_values = [] dfs(root, odd_values) return odd_values[::-1]"},{"question":"You have a wrapper function that takes in three parameters, where the second and third parameters are optional. Your task is to implement a decorator that modifies the behavior of this wrapper function. The decorator should enforce that if the second parameter is provided, the third parameter must also be provided, and vice versa. If any of the parameters is missing when the other is present, the decorator should raise a ValueError with an appropriate message. The decorator should also ensure that the wrapper function only accepts the parameters types specified (int for the first parameter and str for the second and third parameters), raising a TypeError if the types are incorrect.","solution":"def validate_params(func): def wrapper(a, b=None, c=None): if not isinstance(a, int): raise TypeError(\\"First parameter must be an int\\") if (b is not None and not isinstance(b, str)) or (c is not None and not isinstance(c, str)): raise TypeError(\\"Second and third parameters must be str if provided\\") if (b is None and c is not None) or (b is not None and c is None): raise ValueError(\\"Either provide both second and third parameters or provide neither\\") return func(a, b, c) return wrapper @validate_params def my_function(a, b=None, c=None): return f\\"Received: {a}, {b}, {c}\\""},{"question":"I want to create a Python code to generate a dictionary that contains all the unique characters of a given string as keys and their frequency as values. Additionally, I want to ignore spaces and case sensitivity. Can you provide a solution for this?","solution":"def char_frequency_map(s: str) -> dict: Generates a dictionary with unique characters of the string as keys and their frequency as values, ignoring spaces and case sensitivity. Parameters: s (str): The input string. Returns: dict: A dictionary containing character frequencies. frequency = {} for char in s.lower(): if char != ' ': if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Write a Python function that takes two strings as input and modifies the first string by replacing all occurrences of the substring \\"ab\\" with the second string. The modified string is then returned by the function. However, there is a twist - you are not allowed to use Python's built-in string replacement method (str.replace).","solution":"def replace_ab(original, replacement): Replaces all occurrences of 'ab' in the original string with the replacement string. :param original: String in which replacement should be done. :param replacement: String to replace occurrences of 'ab'. :return: Modified string with 'ab' replaced by the replacement string. result = [] i = 0 while i < len(original): if original[i:i+2] == 'ab': result.append(replacement) i += 2 else: result.append(original[i]) i += 1 return ''.join(result)"},{"question":"Design a program to find out how many times a pattern occurs in a given string. The pattern can be of any length and can consist of any combination of letters and numbers. The program should be able to handle patterns of varying lengths and should be case-sensitive.","solution":"def count_pattern_occurrences(text, pattern): Returns the number of times the pattern occurs in the given text. Arguments: text -- the string in which to search for the pattern pattern -- the substring to search for within text Returns: int -- the number of times the pattern occurs in the text return text.count(pattern)"},{"question":"Write an algorithm in Python that calculates the maximum subarray of a given array of integers using Kadane's algorithm.","solution":"def max_subarray(nums): Finds the maximum sum of a contiguous subarray using Kadane's algorithm. Parameters: nums (list of int): A list of integers. Returns: int: The maximum sum of a contiguous subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Edit the following code to correctly add a new element at the end of a doubly linked list in Python. Remember that a doubly linked list has references to the next node in the sequence, as well as the previous one. Your solution should also handle the edge cases when the list is empty and when the new element is to be added after an existing node.","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if self.head is None: # List is empty self.head = new_node else: # Traverse to the end of the list temp = self.head while temp.next is not None: temp = temp.next # Append new node temp.next = new_node new_node.prev = temp"},{"question":"Create a function which takes two strings as arguments and returns true if the first string contains all the characters of the second string.","solution":"def contains_all_chars(s1, s2): Returns True if the string s1 contains all the characters of the string s2. for char in s2: if char not in s1: return False return True"},{"question":"Write a Python function that finds the second maximum number in a list of integers. The list will have unique positive integer values only.","solution":"def second_maximum(numbers): Returns the second maximum number in a list of unique positive integers. if len(numbers) < 2: raise ValueError(\\"The list must contain at least two unique numbers.\\") first_max = second_max = float('-inf') for num in numbers: if num > first_max: second_max = first_max first_max = num elif num > second_max: second_max = num return second_max"},{"question":"Design a Python function that accepts a sentence as an input argument and reverses the order of the words in the sentence without using any built-in reversing methods or libraries.","solution":"def reverse_sentence(sentence): Reverses the order of words in the given sentence. Args: sentence (str): The input sentence to reverse. Returns: str: The sentence with the order of words reversed. words = sentence.split() reversed_words = [] for word in words: reversed_words.insert(0, word) return ' '.join(reversed_words)"},{"question":"Develop a Python function to decompress a given nested list of integers into a single, flat list of integers. The function should handle not only list of lists, but also any level of nested list.","solution":"def decompress(nested_list): Decompresses a given nested list of integers into a single, flat list of integers. Args: nested_list (list): A nested list of integers. Returns: list: A flat list of integers. flat_list = [] def flatten(lst): for item in lst: if isinstance(item, list): flatten(item) else: flat_list.append(item) flatten(nested_list) return flat_list"},{"question":"Write a code in Python that returns an inversion of a given string, but you are not allowed to use any built-in string manipulation functions or methods. Additionally, you are not allowed to use any built-in data structures such as lists or arrays.","solution":"def invert_string(s): Returns the inversion of the given string s. # Step 1: Convert the string into a simple linked list. class Node: def __init__(self, character): self.character = character self.next = None # Step 2: Construct the linked list from the input string. head = None for character in s: new_node = Node(character) if not head: head = new_node else: new_node.next = head head = new_node # Step 3: Traverse the linked list to reconstruct the inverted string. inverted_string = \\"\\" current = head while current: inverted_string += current.character current = current.next return inverted_string"},{"question":"Design a Python function snippet to Display Low Toilet hygiene: Handwashing After Using the Toilet for Decision Making for Experts. Implement if/else or switch/case statements to handle different conditions related to the Bias. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def assess_toilet_hygiene(handwashing_habits): Assesses toilet hygiene based on handwashing habits after using the toilet. Parameters: handwashing_habits (str): A string indicating the handwashing habit after using the toilet. Expected values are: \\"always\\", \\"often\\", \\"sometimes\\", \\"rarely\\", \\"never\\" Returns: str: A recommendation or assessment based on the handwashing habit. if handwashing_habits == \\"always\\": return \\"Hygiene is excellent. Keep up the good work!\\" elif handwashing_habits == \\"often\\": return \\"Hygiene is good, but there's room for improvement.\\" elif handwashing_habits == \\"sometimes\\": return \\"Hygiene is average. Make sure to wash hands every time.\\" elif handwashing_habits == \\"rarely\\": return \\"Hygiene is poor. Please wash hands more frequently.\\" elif handwashing_habits == \\"never\\": return \\"Hygiene is very poor. Immediate action is needed to start washing hands after toilet use.\\" else: return \\"Invalid input. Please provide handwashing habits as one of: always, often, sometimes, rarely, never.\\""},{"question":"Given two strings, create a function to find the total number of occurrences of the second string in the first string. This should include overlapping occurrences. Also, implement this function without using built-in functions for string searching like str.find() or str.count() in Python or similar functions in other programming languages.","solution":"def count_occurrences(text, pattern): Counts the total number of occurrences of the pattern string in the text string. This includes overlapping occurrences without using built-in functions. count = 0 text_length = len(text) pattern_length = len(pattern) # Traverse through the text for i in range(text_length - pattern_length + 1): # Check if the current slice matches the pattern if text[i:i + pattern_length] == pattern: count += 1 return count"},{"question":"Use multiple function definitions to create a program that calculates the volume of a sphere with a given radius. In addition, create a function to calculate the surface area of the same sphere. To challenge your skills, the program should handle the case where the radius is a floating-point number, and moreover, it should implement error handling for cases where the radius is negative or non-numerical.","solution":"import math def calculate_volume(radius): Calculate the volume of a sphere with the given radius. if not isinstance(radius, (int, float)): raise ValueError(\\"Radius must be a numeric value\\") if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return (4/3) * math.pi * radius**3 def calculate_surface_area(radius): Calculate the surface area of a sphere with the given radius. if not isinstance(radius, (int, float)): raise ValueError(\\"Radius must be a numeric value\\") if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return 4 * math.pi * radius**2"},{"question":"Write a code snippet for an AI agent finding the shortest path in a 2D maze using a Depth-First Search (DFS) algorithm.","solution":"def dfs_shortest_path(maze, start, goal): Finds the shortest path in a 2D maze using Depth-First Search. :param maze: 2D list of 0s and 1s where 0 represents a path and 1 represents a wall :param start: Tuple (x, y) representing the starting coordinates :param goal: Tuple (x, y) representing the goal coordinates :return: List of coordinates representing the shortest path from start to goal, or empty list if no path found if not maze or start == goal: return [] stack = [(start, [start])] visited = set() while stack: (x, y), path = stack.pop() if (x, y) == goal: return path if (x, y) not in visited: visited.add((x, y)) # Explore neighbors (up, down, left, right) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 0: stack.append(((nx, ny), path + [(nx, ny)])) return []"},{"question":"Generate a function that takes in two strings and returns the index of the first occurrence of the second string in the first string.","solution":"def find_substring_index(s, sub): Returns the index of the first occurrence of the substring 'sub' in the string 's'. If 'sub' is not found, returns -1. return s.find(sub)"},{"question":"Write a function to create a complex 3D parametric equation for a moving particle in Python, taking into account an elaborate trajectory characterized by periodicity, non-linearity, and a variable velocity, then animate the motion using Matplotlib's animation library.","solution":"import numpy as np import matplotlib.pyplot as plt import matplotlib.animation as animation from mpl_toolkits.mplot3d import Axes3D def complex_3d_parametric_equation(t): Calculate the x, y, z coordinates of a particle in a complex 3D parametric equation. Parameters: t : float : Time parameter Returns: (x, y, z) : tuple of floats : The x, y, z coordinates of the particle at time t x = np.sin(t) * np.cos(2 * t) y = np.sin(t) * np.sin(2 * t) z = np.cos(t) + np.log(np.abs(t+1)) return x, y, z def animate(i, xdata, ydata, zdata, ax): t = 0.1 * i x, y, z = complex_3d_parametric_equation(t) xdata.append(x) ydata.append(y) zdata.append(z) ax.clear() ax.plot3D(xdata, ydata, zdata, 'blue') ax.set_xlim([-2, 2]) ax.set_ylim([-2, 2]) ax.set_zlim([-2, 2]) def create_animation(): fig = plt.figure() ax = fig.add_subplot(111, projection='3d') xdata, ydata, zdata = [], [], [] ani = animation.FuncAnimation(fig, animate, fargs=(xdata, ydata, zdata, ax), frames=300, interval=50) plt.show()"},{"question":"Please devise a Python code snippet to return the k-th smallest element in two sorted lists. However, this time you need to merge these lists yourself without using built-in Python functions or any external libraries.","solution":"def find_kth_smallest(arr1, arr2, k): Finds the k-th smallest element in two sorted lists. Arguments: arr1 -- first sorted list arr2 -- second sorted list k -- the k-th smallest index (1-based) Returns: The k-th smallest element in the merged sorted list. i, j = 0, 0 merged = [] while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 while i < len(arr1): merged.append(arr1[i]) i += 1 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged[k-1]"},{"question":"Develop a Python script to calculate the real solution to the polynomial equation ax^2 + bx + c = 0, where the inputs a, b, and c are provided by the user. You should implement a function \`find_real_solution\` that will return the real root(s) of the equation. If the discriminant is less than zero, the function should return a message stating there are no real roots. If there is only one real root (discriminant equals to zero), return this value as well.","solution":"import math def find_real_solution(a, b, c): Returns the real roots of the quadratic equation ax^2 + bx + c = 0. If the discriminant is less than zero, returns a message that there are no real roots. If there is only one real root, returns that root. Otherwise, returns both real roots. discriminant = b ** 2 - 4 * a * c if discriminant < 0: return \\"There are no real roots.\\" elif discriminant == 0: root = -b / (2 * a) return [root] else: root1 = (-b + math.sqrt(discriminant)) / (2 * a) root2 = (-b - math.sqrt(discriminant)) / (2 * a) return [root1, root2]"},{"question":"Write a Python program to create a random number generator that returns a random integer between 1 and 10.","solution":"import random def generate_random_number(): Returns a random integer between 1 and 10. return random.randint(1, 10)"},{"question":"What is a method in Python for reversing a string without using built-in functions?","solution":"def reverse_string(s): Reverses the given string s without using built-in functions. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a Python function that takes two positive integers a and b and returns the least common multiple and greatest common divisor of a and b using Euclidean algorithm.","solution":"def gcd(a, b): Returns the greatest common divisor of a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return a def lcm(a, b): Returns the least common multiple of a and b. return a * b // gcd(a, b) def gcd_lcm(a, b): Returns a tuple containing the greatest common divisor and the least common multiple of a and b. return gcd(a, b), lcm(a, b)"},{"question":"Create an algorithm to sort an array using insertion sort.","solution":"def insertion_sort(arr): Sorts an array using the insertion sort algorithm. Parameters: arr (list): A list of elements to be sorted. Returns: list: The sorted list. for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are greater than key, # to one position ahead of their current position while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Using the programming language Python, write a function that takes in an integer as input and returns the result of multiplying that integer by 5. The function should also output the original integer and the final result in a table format using Latex syntax. Additionally, please provide a written explanation of the function's logic and any relevant mathematical concepts used in the problem. Finally, test the function with the input of 1456 and provide the output in both Python and Latex formats.","solution":"def multiply_by_five(num): Multiplies the given integer by 5 and returns the result. Also prints the result in a table format using Latex syntax. :param num: Integer to be multiplied by 5 :return: The result of num * 5 result = num * 5 # Print in Latex table format latex_table = f begin{{table}}[] begin{{tabular}}{{ll}} hline Original Number & {num} Result (Number * 5) & {result} hline end{{tabular}} end{{table}} print(latex_table) return result # Test the function with the input of 1456 test_num = 1456 test_result = multiply_by_five(test_num) print(f\\"The result of multiplying {test_num} by 5 is: {test_result}\\")"},{"question":"Build a Python command-line app that takes a user's inputted list of numbers, separates it into odd and even numbers, and calculates the sum of each.","solution":"def separate_and_sum(numbers): Separates the input list into odd and even numbers, and calculates the sum of each. :param numbers: List of integers. :return: A tuple with two elements: - Sum of even numbers. - Sum of odd numbers. evens_sum = sum(num for num in numbers if num % 2 == 0) odds_sum = sum(num for num in numbers if num % 2 != 0) return evens_sum, odds_sum"},{"question":"Please design an algorithm using Python to delete a specific node in a doubly linked list by passing the node as a parameter. The algorithm should have a time complexity of O(1). Additionally, you are not allowed to use any additional data structures or modify the linked list itself (i.e., you can only modify the pointers within the nodes). To increase the difficulty, implement the algorithm in a way that ensures that the deleted node is always the node immediately following the node passed as a parameter, even if the node passed as a parameter is the tail node or the last node in the linked list. Also, make sure to handle cases where the node passed as a parameter is already the head of the linked list.","solution":"class Node: def __init__(self, data): self.data = data self.prev = None self.next = None def delete_next_node(node): Deletes the node immediately following the given node in a doubly linked list. Assumes that the node passed is not None and is not the tail node (it has a next node). if node is None or node.next is None: return to_delete = node.next node.next = to_delete.next if to_delete.next: to_delete.next.prev = node"},{"question":"Create a shell script that gerenates a random 10 character string. The string should contain at least two lowercase letters, two uppercase letters, two digits, and two special characters from the set of @#%^&*(). The remaining two characters can be any combination of letters, digits, and special characters. The script should also ensure that no consecutive characters are the same, and that no character is repeated more than twice in the string.","solution":"import random import string def generate_random_string(): Generates a random 10 character string which satisfies the following criteria: - At least two lowercase letters - At least two uppercase letters - At least two digits - At least two special characters from the set of @#%^&*() - No consecutive characters are the same - No character is repeated more than twice in the string special_characters = '@#%^&*()' while True: password_chars = ( random.sample(string.ascii_lowercase, 2) + random.sample(string.ascii_uppercase, 2) + random.sample(string.digits, 2) + random.sample(special_characters, 2) ) all_chars = string.ascii_letters + string.digits + special_characters password_chars += random.sample(all_chars, 2) random.shuffle(password_chars) password = ''.join(password_chars) if not any(password[i] == password[i + 1] for i in range(len(password) - 1)): return password"},{"question":"Employing the principles of recursive methodology, write a Python code to accurately generate the Fibonacci series up until a specified nth term.","solution":"def fibonacci(n): Returns the nth term in the Fibonacci series using recursion. if n <= 0: return \\"Incorrect input\\" elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Given two lists: list1 = ['a', 'b', 'c'] and list2 = [1, 2, 3]. The task is to create a Python program that generates a dictionary utilizing the elements of these two lists. The elements of 'list1' should serve as keys, and the elements of 'list2' should serve as their corresponding values. Additionally, incorporate error handling to accommodate lists of unequal lengths.","solution":"def create_dict_from_lists(list1, list2): Creates a dictionary from two lists. Elements of \`list1\` are keys, and elements of \`list2\` are their corresponding values. Returns: dict: A dictionary with keys from \`list1\` and values from \`list2\`. Raises: ValueError: If the lengths of \`list1\` and \`list2\` are not equal. if len(list1) != len(list2): raise ValueError(\\"The two lists must have the same length.\\") return dict(zip(list1, list2))"},{"question":"Given the following binary tree in Python, write a breadth-first search (BFS) algorithm that prints the tree level by level. Also modify the same algorithm to return the average value for each level of the binary tree.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def bfs_and_level_averages(root): Performs a breadth-first search (BFS) on the binary tree and prints the tree level by level. Also returns the average value for each level of the binary tree. :param root: TreeNode, the root of the binary tree. :return: List of floats, representing the average values for each level. if not root: return [] queue = deque([root]) level_averages = [] while queue: level_size = len(queue) level_sum = 0 current_level = [] for _ in range(level_size): node = queue.popleft() current_level.append(node.value) level_sum += node.value if node.left: queue.append(node.left) if node.right: queue.append(node.right) average = level_sum / level_size level_averages.append(average) print(\\"Level:\\", current_level) return level_averages"},{"question":"Define a Python function that expects a list of integer inputs. This function should return the largest integer from the input list only if that largest number is an odd number. If the largest number in the list is even, the function must return the largest odd number from the list. Handle any possible exception such as if the list is empty, or all numbers are even, etc.","solution":"def largest_odd_number(numbers): This function returns the largest odd number in the list. If the largest number in the list is not an odd number, it returns the largest odd number from the list. If the list is empty or there are no odd numbers, it raises a ValueError. if not numbers: raise ValueError(\\"The list is empty\\") # Filter out the odd numbers from the list odd_numbers = [num for num in numbers if num % 2 != 0] if not odd_numbers: raise ValueError(\\"There are no odd numbers in the list\\") return max(odd_numbers)"},{"question":"Write code to create and train a neural network in PyTorch for the sentiment analysis task. This network should take in a sequence of word embeddings, have an LSTM layer for sequence learning, output a binary sentiment score, and include a mechanism to tackle imbalanced datasets.","solution":"import torch import torch.nn as nn import torch.optim as optim from torch.utils.data import DataLoader, Dataset, WeightedRandomSampler class SentimentAnalysisDataset(Dataset): def __init__(self, texts, labels, embeddings): self.texts = texts self.labels = labels self.embeddings = embeddings def __len__(self): return len(self.texts) def __getitem__(self, index): text = self.texts[index] label = self.labels[index] # Converting text to embeddings (a simple illustration, actual implementation may vary) text_embeddings = self.embeddings[text] return torch.tensor(text_embeddings, dtype=torch.float32), torch.tensor(label, dtype=torch.long) class SentimentAnalysisModel(nn.Module): def __init__(self, embedding_dim, hidden_dim, output_dim, num_layers=1): super(SentimentAnalysisModel, self).__init__() self.lstm = nn.LSTM(embedding_dim, hidden_dim, num_layers, batch_first=True) self.fc = nn.Linear(hidden_dim, output_dim) self.sigmoid = nn.Sigmoid() def forward(self, x): _, (hn, _) = self.lstm(x) hn = hn[-1] out = self.fc(hn) return self.sigmoid(out) def train_model(model, criterion, optimizer, train_loader, device, num_epochs=5): model.to(device) for epoch in range(num_epochs): model.train() running_loss = 0.0 for text, labels in train_loader: text = text.to(device) labels = labels.to(device).float() optimizer.zero_grad() outputs = model(text).squeeze() loss = criterion(outputs, labels) loss.backward() optimizer.step() running_loss += loss.item() print(f'Epoch {epoch+1}/{num_epochs}, Loss: {running_loss/len(train_loader)}') # Example usage if __name__ == \\"__main__\\": # Dummy dataset texts = [\\"Example text 1\\", \\"Example text 2\\"] labels = [0, 1] embeddings = { \\"Example text 1\\": [[0.1, 0.2], [0.2, 0.3]], \\"Example text 2\\": [[0.3, 0.4], [0.4, 0.5]] } dataset = SentimentAnalysisDataset(texts, labels, embeddings) class_sample_count = [len([x for x in labels if x == 0]), len([x for x in labels if x == 1])] weights = 1. / torch.tensor(class_sample_count, dtype=torch.float) samples_weights = weights[labels] sampler = WeightedRandomSampler(samples_weights, len(samples_weights)) train_loader = DataLoader(dataset, batch_size=2, sampler=sampler) embedding_dim = 2 hidden_dim = 4 output_dim = 1 num_layers = 1 model = SentimentAnalysisModel(embedding_dim, hidden_dim, output_dim, num_layers) criterion = nn.BCELoss() optimizer = optim.Adam(model.parameters(), lr=0.001) device = torch.device(\\"cuda\\" if torch.cuda.is_available() else \\"cpu\\") train_model(model, criterion, optimizer, train_loader, device)"},{"question":"Create a Python script that takes in a list of numbers and implements the selection sort algorithm to sort the list in ascending order. The script should prompt the user to input the list of numbers and print the sorted list after sorting. The script should also include comments explaining the code and function of the selection sort algorithm. The script should handle errors gracefully and should be well-formatted with appropriate variable names and code style.","solution":"def selection_sort(input_list): Sorts input_list using the selection sort algorithm. Parameters: input_list (list): List of numbers to be sorted. Returns: list: Sorted list in ascending order. n = len(input_list) for i in range(n): # Assume the minimum is the first element min_index = i # Find the minimum element in remaining unsorted array for j in range(i+1, n): if input_list[j] < input_list[min_index]: min_index = j # Swap the found minimum element with the first element input_list[i], input_list[min_index] = input_list[min_index], input_list[i] return input_list if __name__ == \\"__main__\\": try: input_string = input(\\"Enter a list of numbers separated by spaces: \\") input_list = list(map(float, input_string.split())) sorted_list = selection_sort(input_list) print(\\"Sorted list:\\", sorted_list) except ValueError: print(\\"Error: Please ensure that all inputs are valid numbers.\\")"},{"question":"Write a python code to add two numbers represented by a reversed linked list. Each node in the linked list represents a single digit of the number.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_two_numbers(l1, l2): Adds two numbers represented by two reversed linked lists. Args: l1 (ListNode): The head of the first linked list. l2 (ListNode): The head of the second linked list. Returns: ListNode: The head of a new linked list representing the sum. dummy_head = ListNode() current = dummy_head carry = 0 while l1 or l2 or carry: val1 = (l1.val if l1 else 0) val2 = (l2.val if l2 else 0) carry, out = divmod(val1 + val2 + carry, 10) current.next = ListNode(out) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy_head.next"},{"question":"Create a recursive function using python programming language to display the values in a tuple. Also, implement it such that it can handle nested tuples. If the depth of nesting goes beyond three levels, throw a custom exception. As part of the solution provide a piece of erroneous code and explain what is wrong with it.","solution":"class NestingDepthException(Exception): pass def display_values_in_tuple(tup, depth=0): Recursively displays values in the tuple. If the depth of nesting goes beyond three levels, throws \`NestingDepthException\`. if depth > 3: raise NestingDepthException(\\"Nesting depth exceeds three levels\\") for item in tup: if isinstance(item, tuple): display_values_in_tuple(item, depth + 1) else: print(item) # Example of erroneous code def faulty_function(tup): This function is supposed to display values in a tuple, but it does not handle nested tuples correctly and does not provide a guard against depth. for item in tup: print(item)"},{"question":"Develop a recursive function to compute the Fibonacci series value corresponding to the specified position within the sequence. The function must be robust enough to manage scenarios where the input is negative or not an integer, by returning an error message in such cases.","solution":"def fibonacci(n): Returns the Fibonacci series value at position n. Raises a ValueError for incorrect inputs. if not isinstance(n, int): return \\"Invalid input: Input must be an integer.\\" if n < 0: return \\"Invalid input: Input must be a non-negative integer.\\" if n == 0: return 0 if n == 1: return 1 return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a Python program using only lists and list comprehensions to represent a numerical 8x8 2D matrix as a flat 1D list. Also, implement a function to rotate the matrix 90 degrees clockwise. Initially, populate your 2D matrix with random integers ranging from 1 to 100. Then convert this matrix into the flat 1D list. After that, use the 1D list to regenerate the 2D matrix but rotated 90 degrees clockwise.","solution":"import random def generate_2d_matrix(size=8, min_val=1, max_val=100): Generates a 2D matrix of given size with random integers ranging from min_val to max_val. return [[random.randint(min_val, max_val) for _ in range(size)] for _ in range(size)] def flatten_2d_matrix(matrix): Flattens a 2D matrix into a 1D list. return [element for row in matrix for element in row] def rotate_2d_matrix_90_clockwise(matrix): Rotates a 2D matrix 90 degrees clockwise. size = len(matrix) return [[matrix[size - 1 - j][i] for j in range(size)] for i in range(size)] def regenerate_2d_matrix_from_1d(flat_list, size=8): Regenerates a 2D matrix from a given 1D list. return [flat_list[i*size:(i+1)*size] for i in range(size)]"},{"question":"Investigate the performance of three sorting algorithms: Bubble Sort, Insertion Sort, and Selection Sort. Discuss their time and space complexity and demonstrate their effectiveness by writing Python functions for each algorithm. Also, provide a brief comparison of their performance when sorting an array of 1000 random integers.","solution":"import random def bubble_sort(arr): Sorts an array using bubble sort algorithm. n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break return arr def insertion_sort(arr): Sorts an array using insertion sort algorithm. for i in range(1, len(arr)): key = arr[i] j = i-1 while j >= 0 and key < arr[j]: arr[j+1] = arr[j] j -= 1 arr[j+1] = key return arr def selection_sort(arr): Sorts an array using selection sort algorithm. n = len(arr) for i in range(n): min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j arr[min_idx], arr[i] = arr[i], arr[min_idx] return arr # Time and space complexity: # - Bubble Sort: Time - O(n^2), Space - O(1) (in-place) # - Insertion Sort: Time - O(n^2), Space - O(1) (in-place) # - Selection Sort: Time - O(n^2), Space - O(1) (in-place) def generate_random_array(size, seed=0): random.seed(seed) return [random.randint(0, 1000) for _ in range(size)]"},{"question":"Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.","solution":"def contains_all_words(s, words): Returns True if the string s contains all the words in the list words. s_lower = s.lower() return all(word.lower() in s_lower for word in words)"},{"question":"Write a function that counts how many times a substring appears in a string, with the added option to include overlapping occurrences.","solution":"def count_substring(string, substring, overlapping=False): Counts the number of times a substring appears in a string. Includes overlapping occurrences if overlapping is set to True. Parameters: string (str): The string to search within. substring (str): The substring to count. overlapping (bool): If True, counts overlapping occurrences. Returns: int: The number of times the substring appears in the string. if not overlapping: return string.count(substring) count = start = 0 while True: start = string.find(substring, start) if start == -1: return count count += 1 start += 1"},{"question":"Create a function in Python that takes a string and an integer as parameters and returns a string with the last n characters of the given string.","solution":"def last_n_characters(s, n): Returns the last n characters of the string s. Parameters: s (str): The input string. n (int): The number of characters to return from the end of the string. Returns: str: A string containing the last n characters of s. if n <= 0: return \\"\\" return s[-n:]"},{"question":"I have a text file with a list of numbers, each number on a separate line. Some of the numbers are negative, and they are mixed with positive numbers. How can I write a Python script to filter out all the negative numbers and leave only the positive ones in the file?","solution":"def filter_positive_numbers(file_path): Reads a file, filters out negative numbers and rewrites the file with only positive numbers. Parameters: file_path (str): The path to the text file containing numbers. with open(file_path, 'r') as file: numbers = file.readlines() positive_numbers = [num for num in numbers if int(num.strip()) >= 0] with open(file_path, 'w') as file: file.writelines(positive_numbers)"},{"question":"Write a Python program to check if a given expression is parenthesis balanced or not. The expression will contain the characters '(', ')', '{', '}', '[' and ']'.","solution":"def is_balanced(expression): Check if the given expression is balanced in terms of parenthesis. Parameters: expression (str): The expression containing '(', ')', '{', '}', '[' and ']' Returns: bool: True if balanced, False otherwise stack = [] bracket_map = {')': '(', '}': '{', ']': '['} for char in expression: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: continue return stack == []"},{"question":"Write the Python code for this moderately advanced API function, which combines an array of multiple individual textual strings into a single cohesive unit. Then apply the function to an array like this: ['one', 'two', 'three']. Below is a simple Python function named join_strings that uses the built-in method join provided by Python’s str object to concatenate the strings in the list into a single string. I will also apply that function to your list.","solution":"def join_strings(string_list): Combines an array of multiple individual textual strings into a single cohesive unit. Parameters: string_list (list of str): List of strings to combine. Returns: str: A single string combined from the list of strings. return ''.join(string_list) # Applying the function to the array ['one', 'two', 'three'] result = join_strings(['one', 'two', 'three']) # Print the result for verification print(result) # Expected Output: 'onetwothree'"},{"question":"Write a python program that determines the index of a sorted list where a character is present. If the character is not present in the list, return -1.","solution":"def find_char_index(sorted_list, char): Returns the index of the character 'char' in the sorted list 'sorted_list'. If the character is not present, returns -1. Parameters: sorted_list (list): A sorted list of characters char (str): A character to find in the list Returns: int: Index of the character in the list or -1 if not found try: index = sorted_list.index(char) return index except ValueError: return -1"},{"question":"Generate an AI agent to play the game of Connect Four with perfect play.","solution":"import math import numpy as np # Constants for the game ROWS = 6 COLUMNS = 7 PLAYER_PIECE = 1 AI_PIECE = 2 EMPTY = 0 WINDOW_LENGTH = 4 def create_board(): return np.zeros((ROWS, COLUMNS), dtype=int) def drop_piece(board, row, col, piece): board[row][col] = piece def is_valid_location(board, col): return board[ROWS-1][col] == 0 def get_next_open_row(board, col): for r in range(ROWS): if board[r][col] == 0: return r def print_board(board): print(np.flip(board, 0)) def winning_move(board, piece): # Check horizontal locations for c in range(COLUMNS-3): for r in range(ROWS): if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece: return True # Check vertical locations for c in range(COLUMNS): for r in range(ROWS-3): if board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece: return True # Check positively sloped diagonals for c in range(COLUMNS-3): for r in range(ROWS-3): if board[r][c] == piece and board[r+1][c+1] == piece and board[r+2][c+2] == piece and board[r+3][c+3] == piece: return True # Check negatively sloped diagonals for c in range(COLUMNS-3): for r in range(3, ROWS): if board[r][c] == piece and board[r-1][c+1] == piece and board[r-2][c+2] == piece and board[r-3][c+3] == piece: return True return False def score_position(board, piece): score = 0 # Score center column center_array = [int(i) for i in list(board[:, COLUMNS//2])] center_count = center_array.count(piece) score += center_count * 3 # Score Horizontal for r in range(ROWS): row_array = [int(i) for i in list(board[r, :])] for c in range(COLUMNS-3): window = row_array[c:c+WINDOW_LENGTH] score += evaluate_window(window, piece) # Score Vertical for c in range(COLUMNS): col_array = [int(i) for i in list(board[:, c])] for r in range(ROWS-3): window = col_array[r:r+WINDOW_LENGTH] score += evaluate_window(window, piece) # Score positive sloped diagonal for r in range(ROWS-3): for c in range(COLUMNS-3): window = [board[r+i][c+i] for i in range(WINDOW_LENGTH)] score += evaluate_window(window, piece) # Score negative sloped diagonal for r in range(ROWS-3): for c in range(COLUMNS-3): window = [board[r+3-i][c+i] for i in range(WINDOW_LENGTH)] score += evaluate_window(window, piece) return score def evaluate_window(window, piece): score = 0 opp_piece = PLAYER_PIECE if piece == AI_PIECE else AI_PIECE if window.count(piece) == 4: score += 100 elif window.count(piece) == 3 and window.count(EMPTY) == 1: score += 5 elif window.count(piece) == 2 and window.count(EMPTY) == 2: score += 2 if window.count(opp_piece) == 3 and window.count(EMPTY) == 1: score -= 4 return score def is_terminal_node(board): return winning_move(board, PLAYER_PIECE) or winning_move(board, AI_PIECE) or len(get_valid_locations(board)) == 0 def minimax(board, depth, alpha, beta, maximizingPlayer): valid_locations = get_valid_locations(board) is_terminal = is_terminal_node(board) if depth == 0 or is_terminal: if is_terminal: if winning_move(board, AI_PIECE): return (None, 100000000000000) elif winning_move(board, PLAYER_PIECE): return (None, -10000000000000) else: # Game is over, no more valid moves return (None, 0) else: # Depth is zero return (None, score_position(board, AI_PIECE)) if maximizingPlayer: value = -math.inf column = np.random.choice(valid_locations) for col in valid_locations: row = get_next_open_row(board, col) b_copy = board.copy() drop_piece(b_copy, row, col, AI_PIECE) new_score = minimax(b_copy, depth-1, alpha, beta, False)[1] if new_score > value: value = new_score column = col alpha = max(alpha, value) if alpha >= beta: break return column, value else: # Minimizing player value = math.inf column = np.random.choice(valid_locations) for col in valid_locations: row = get_next_open_row(board, col) b_copy = board.copy() drop_piece(b_copy, row, col, PLAYER_PIECE) new_score = minimax(b_copy, depth-1, alpha, beta, True)[1] if new_score < value: value = new_score column = col beta = min(beta, value) if alpha >= beta: break return column, value def get_valid_locations(board): valid_locations = [] for col in range(COLUMNS): if is_valid_location(board, col): valid_locations.append(col) return valid_locations def pick_best_move(board, piece): valid_locations = get_valid_locations(board) best_score = -10000 best_col = np.random.choice(valid_locations) for col in valid_locations: row = get_next_open_row(board, col) temp_board = board.copy() drop_piece(temp_board, row, col, piece) score = score_position(temp_board, piece) if score > best_score: best_score = score best_col = col return best_col"},{"question":"Given a text file containing a list of strings, write a program that removes all vowels from each string in the list, and prints the resulting strings in a table format, where each row of the table corresponds to a string in the list, and each column of the table corresponds to a vowel-less string of the corresponding row. The program should be able to handle strings of any length, and should also be able to handle non-English strings, such as those in Cyrillic or Chinese characters. As an example, apply this program to the following list of strings: [\\"Hello World!\\", \\"Привет мир!\\", \\"你好，世界！\\"]","solution":"def remove_vowels(strings): Given a list of strings, removes all vowels from each string and returns the resulting strings. vowels = \\"aeiouAEIOUауоыиэяюёеУОЫИЭЯЮЁЕ\\" # English and Russian vowels result = [] for s in strings: no_vowels = ''.join(char for char in s if char not in vowels) result.append(no_vowels) return result def print_table(strings): Prints the given list of strings in a table format, where each row corresponds to a string. no_vowel_strings = remove_vowels(strings) for s in no_vowel_strings: print(s)"},{"question":"Produce a code for finding the shortest path from a source vertex to all other vertices in a given weighted graph using Dijkstra's algorithm.","solution":"import heapq def dijkstra(graph, start): Finds the shortest paths from the start vertex to all other vertices in the given weighted graph. :param graph: A dictionary where keys are vertices and values are lists of tuples (neighbor, weight). :param start: The starting vertex. :return: A dictionary with the shortest distances from the start vertex to each other vertex. # Initialize the priority queue, distances dictionary and visited set priority_queue = [(0, start)] distances = {vertex: float('inf') for vertex in graph} distances[start] = 0 visited = set() while priority_queue: # Get the vertex in the priority queue with the smallest distance current_distance, current_vertex = heapq.heappop(priority_queue) if current_vertex in visited: continue visited.add(current_vertex) # Update the distances to the neighboring vertices for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"Given a large 2 dimensional array of integers, find a method to sum up all of its integer values. Also, augment your solution with an option to either sum up all the integers, or sum up column-wise or row-wise totals without re-calculating the entire sum. Your function should also handle edge scenarios, like missing or null values. Use Python for your solution and remember to consider the time and space complexity of your solution.","solution":"import numpy as np def sum_matrix(matrix, option='total'): Returns the sum of all integers in the matrix based on the option provided. Parameters: matrix (list of lists of int): 2D array of integers. option (str): Specifies the sum to be calculated: 'total' -> sum of all integers, 'row' -> list of sums of each row, 'col' -> list of sums of each column. Returns: int or list: The sum based on the option. if matrix is None or len(matrix) == 0 or all(isinstance(i, list) and len(i) == 0 for i in matrix): return 0 if option == 'total' else [] np_matrix = np.array(matrix, dtype=np.float64) np_matrix = np.nan_to_num(np_matrix) # Convert NaNs to 0 for calculation if option == 'total': return int(np.sum(np_matrix)) elif option == 'row': return [int(row_sum) for row_sum in np.sum(np_matrix, axis=1)] elif option == 'col': return [int(col_sum) for col_sum in np.sum(np_matrix, axis=0)] else: raise ValueError(\\"Option should be 'total', 'row', or 'col'.\\")"},{"question":"In the given code, write a function that not only reverses a string, but also counts the occurrences of each character in the reversed string. The function should return the reversed string along with a dictionary where each key-value pair corresponds to a unique character (key) and its number of occurrences (value) in the reversed string.","solution":"def reverse_and_count(s): Reverses the given string and counts the occurrences of each character in the reversed string. Args: s (str): The string to be reversed and analyzed. Returns: tuple: A tuple containing the reversed string and a dictionary with character counts in the reversed string. reversed_s = s[::-1] count_dict = {} for char in reversed_s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return reversed_s, count_dict"},{"question":"Develop a function in Python that calculates the factorial of all Fibonacci numbers between 1 and N, where N is a user-provided input. For the purpose of this task, assume that the Fibonacci sequence starts with 1 and 1 (not 0 and 1). Furthermore, implement this function using recursion. Python's built-in recursion limit might be exceeded for relatively small N due to the double recursion in the Fibonacci sequence calculation. Try to find a way to overcome this limit without using global variables. You might want to utilize a helper function for this task. Let's start by implementing the Fibonacci sequence, then we'll calculate the factorial for each Fibonacci number. We'll create two separate functions for this task, one for calculating Fibonacci numbers and another for calculating the factorial.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using recursion with memoization. if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n] def factorial(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 return n * factorial(n-1) def factorial_of_fibonacci_up_to_n(N): Returns a list of factorials of all Fibonacci numbers between 1 and N. fibs = [] i = 1 while True: fib = fibonacci(i) if fib > N: break fibs.append(fib) i += 1 return [factorial(fib) for fib in fibs]"},{"question":"Given a string, write a function that returns the number of times a specific character appears in it. For example, if the input string is \\"hello\\" and the character is 'l', your function should return 2. Please make sure to include a function signature and a docstring explaining what the function does. Additionally, write a test function that tests the correctness of your code with multiple test cases, including edge cases. The code should follow PEP 8 style guidelines.","solution":"def count_character_occurrences(s, char): Returns the number of times a specific character appears in the given string. :param s: The input string. :param char: The character to count occurrences of. :return: The number of times char appears in s. return s.count(char)"},{"question":"Given a single linked list, reverse it in place without creating a new list or using any built-in methods or functions. To clarify, you cannot use any additional data structures or library functions for linked list manipulation, and the solution should have a time complexity of O(N), where N is the number of nodes in the list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses the linked list in place. Args: head: ListNode - The head node of the linked list. Returns: ListNode - The new head of the reversed linked list. prev = None current = head while current is not None: next_node = current.next # Remember next node current.next = prev # Reverse the link prev = current # Move prev to current node current = next_node # Move to next node in the original list return prev"},{"question":"Draft a code to implement bubble sort in an array of integers. Add optimizations for improved performance and explain your algorithm.","solution":"def bubble_sort(arr): Implements Bubble Sort with an optimization that stops the algorithm if the array becomes sorted before completing all passes. Args: arr (list of int): The list of integers to be sorted. Returns: list of int: The sorted list of integers. n = len(arr) for i in range(n): swapped = False # Perform a bubble pass for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no elements were swapped in the inner loop, then the array is already sorted if not swapped: break return arr"},{"question":"You are a software engineer working on enhancing an existing Python application. Your task is to create a decorator that will add functionality for logging function calls, ensuring that the application performs as expected. The decorator should be named \`log_execution\` and should print the name of the function being called along with its arguments before calling the function. Additionally, it should print the function's return value after the function has been executed.","solution":"def log_execution(func): A decorator that logs the function execution details. def wrapper(*args, **kwargs): # Log the function call details print(f\\"Calling function '{func.__name__}' with arguments {args} and keyword arguments {kwargs}\\") result = func(*args, **kwargs) # Log the function return details print(f\\"Function '{func.__name__}' returned {result}\\") return result return wrapper # Example usage: @log_execution def add(a, b): return a + b @log_execution def multiply(a, b): return a * b"},{"question":"In a pursuit to solidify my comprehension of neural networks employed in deep learning, I am aiming to construct one from scratch utilizing NumPy, a step further from merely applying libraries like TensorFlow or PyTorch. Could you elucidate on the comprehensive procedure, encompassing all indispensable stages and formulas, required for the creation of a rudimentary neural network using this approach? It would be particularly beneficial if the explication encompasses the modus operandi of backpropagation for weight updating, the use of a loss function for error calculation, and the implementation of an activation function to introduce non-linearity.","solution":"import numpy as np def sigmoid(x): return 1 / (1 + np.exp(-x)) def sigmoid_derivative(x): return x * (1 - x) def mse_loss(y_true, y_pred): return ((y_true - y_pred) ** 2).mean() class SimpleNeuralNetwork: def __init__(self, input_size, hidden_size, output_size): self.input_size = input_size self.hidden_size = hidden_size self.output_size = output_size # Initialize weights self.weights_input_hidden = np.random.rand(self.input_size, self.hidden_size) self.weights_hidden_output = np.random.rand(self.hidden_size, self.output_size) # Initialize biases self.bias_hidden = np.random.rand(1, self.hidden_size) self.bias_output = np.random.rand(1, self.output_size) def forward(self, X): # Input to hidden layer self.hidden_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden self.hidden_output = sigmoid(self.hidden_input) # Hidden layer to output self.final_input = np.dot(self.hidden_output, self.weights_hidden_output) + self.bias_output self.final_output = sigmoid(self.final_input) return self.final_output def backward(self, X, y, y_pred, learning_rate=0.1): # Calculate loss derivative loss_derivative = 2 * (y_pred - y) # Calculate gradient for weights from hidden to output delta_output = loss_derivative * sigmoid_derivative(y_pred) weights_hidden_output_gradient = np.dot(self.hidden_output.T, delta_output) # Calculate gradient for weights from input to hidden delta_hidden = np.dot(delta_output, self.weights_hidden_output.T) * sigmoid_derivative(self.hidden_output) weights_input_hidden_gradient = np.dot(X.T, delta_hidden) # Update the weights and biases self.weights_hidden_output -= learning_rate * weights_hidden_output_gradient self.weights_input_hidden -= learning_rate * weights_input_hidden_gradient self.bias_output -= learning_rate * np.sum(delta_output, axis=0, keepdims=True) self.bias_hidden -= learning_rate * np.sum(delta_hidden, axis=0, keepdims=True) def train(self, X, y, epochs=1000, learning_rate=0.1): for _ in range(epochs): # Forward pass y_pred = self.forward(X) # Backward pass and update weights self.backward(X, y, y_pred, learning_rate) def predict(self, X): return self.forward(X)"},{"question":"Sort an array of integers in descending order by implementing a Bubble Sort algorithm. However, you must modify the bubble sort algorithm so that it sorts the array in ascending order instead of descending order. Additionally, you are not allowed to use any built-in sorting functions or libraries.","solution":"def bubble_sort_ascending(arr): Sorts an array of integers in ascending order using a modified Bubble Sort algorithm. :param arr: List of integers to sort :return: The sorted list in ascending order n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Search the python list for a specific string and return the index of the match. However, the search should be case-insensitive and the string should only be considered a match if it appears at the beginning of an element in the list.","solution":"def search_list(target, lst): Searches for a target string in the list \`lst\`. The search is case-insensitive and only considers matches where the target appears at the beginning of an element. Parameters: target (str): The string to search for. lst (list): The list of strings to search in. Returns: int: The index of the first match, or -1 if no match is found. target_lower = target.lower() for index, item in enumerate(lst): if item.lower().startswith(target_lower): return index return -1"},{"question":"Using a binary search algorithm, write a function to find the index of the first appearance of a target number in a sorted array. If the target number does not exist in the array, return -1. Your solution should have a time complexity of O(log n) and a space complexity of O(1).","solution":"def binary_search_first_occurrence(arr, target): Returns the index of the first occurrence of target in a sorted array. If the target is not found, returns -1. :param arr: List[int] - The sorted array to search. :param target: int - The target number to find. :return: int - The index of the first occurrence of target, or -1 if not found. left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: result = mid right = mid - 1 # Continue search to the left (to find the first occurrence) elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return result"},{"question":"Given a string, write a python function to check if it is palindrome. A palindrome is a string which reads the same from front and back. For example, \\"radar\\" is a palindrome but \\"radix\\" is not.","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, False otherwise. return s == s[::-1]"},{"question":"Please generate Python code to find the occurrence of a specific word in a given paragraph. The code should be case-insensitive and should only consider whole words.","solution":"import re def word_occurrence(paragraph, word): Returns the number of occurrences of a specific word in a given paragraph. The search is case-insensitive and only considers whole words. # Create a regex pattern to find the whole word pattern = r'b' + re.escape(word) + r'b' # Find all matches ignoring case matches = re.findall(pattern, paragraph, re.IGNORECASE) return len(matches)"},{"question":"Write code to the output the following string in reverse order using a loop. The input string can be up to 10^6 characters long and will only contain lowercase letters. The code should have a time complexity of O(n) and should not use any built-in string manipulation functions or extra memory.","solution":"def reverse_string(s: str) -> str: Takes a string s and returns its reverse. n = len(s) reversed_s = [''] * n for i in range(n): reversed_s[n - 1 - i] = s[i] return ''.join(reversed_s)"},{"question":"Given a list of numbers in Python, write a function that removes all duplicate elements from the list while maintaining the original order of the elements.","solution":"def remove_duplicates(lst): Remove duplicates from the list lst while maintaining the original order. Args: lst (list): The input list from which duplicates are to be removed. Returns: list: A list with duplicates removed, maintaining the original order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a code to find all possible combinations of words formed by concatenating the strings in the given list.","solution":"from itertools import permutations def all_combinations(words): Returns all possible unique combinations of words formed by concatenating strings in the given list. if not words: return [] result = set() for perm in permutations(words): result.add(\\"\\".join(perm)) return list(result)"},{"question":"Given a sequence of alphanumeric strings, your task is to devise a Python function that can combine these strings in a specific pattern. This pattern involves inserting a copy of the third string between the first and second strings, but only if the third string appears before the second string alphabetically. If this condition is not met, the function should concatenate the third string at the end of the resulting string instead. Each test case will involve unique strings that are guaranteed not to contain any spaces.","solution":"def combine_strings(s1, s2, s3): Combines three strings s1, s2, and s3 in a specific pattern: - If s3 appears alphabetically before s2, insert s3 between s1 and s2. - Otherwise, concatenate s3 at the end of the resulting string. if s3 < s2: return s1 + s3 + s2 else: return s1 + s2 + s3"},{"question":"Write a python function called 'retrieve_colors' that will read a JSON string and return a list of colors stored in that JSON. The JSON will have a top-level key 'colors' that contains a list. The function should return the elements of this list as a Python list.","solution":"import json def retrieve_colors(json_string): This function takes a JSON string with a top-level key 'colors' containing a list. It returns the list of colors stored in that JSON. :param json_string: str - JSON string containing the colors :return: list - A list of colors data = json.loads(json_string) return data.get('colors', [])"},{"question":"Use the Python built-in function filter() to find all numbers divisible by 5.","solution":"def find_divisible_by_5(numbers): Returns a list of numbers from the input list that are divisible by 5. return list(filter(lambda x: x % 5 == 0, numbers))"},{"question":"Write a recursive function to calculate the factorial of a number. Additionally, provide error-handling capabilities to ensure the function only accepts positive integers inputs. For erroneous input, the function should return a meaningful error message.","solution":"def factorial(n): Returns the factorial of a positive integer n. If n is not a positive integer, returns an error message. if not isinstance(n, int) or n < 0: return \\"Error: Input must be a positive integer.\\" if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Given two strings s1 and s2, write a function that returns true if s1 is an anagram of s2. An anagram is a word formed by rearranging the letters of a different word, typically using all the original letters exactly once.","solution":"def is_anagram(s1, s2): Returns True if s1 is an anagram of s2, False otherwise. # Clean and sort the strings s1_cleaned = sorted(s1.replace(\\" \\", \\"\\").lower()) s2_cleaned = sorted(s2.replace(\\" \\", \\"\\").lower()) return s1_cleaned == s2_cleaned"},{"question":"Given a list of strings, write a function to return a new list of strings where all the duplicates have been removed. You can assume that the input list will only contain lowercase alphabetic characters and the length of each string will not exceed 100. The function should have a time complexity of O(n) and a space complexity of O(n), where n is the length of the input list.","solution":"def remove_duplicates(strings): Returns a new list of strings where all the duplicates have been removed. seen = set() result = [] for string in strings: if string not in seen: seen.add(string) result.append(string) return result"},{"question":"Given an array of integers and an integer k, write a program to find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.","solution":"def contains_nearby_duplicate(nums, k): Check if there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k. :param nums: List[int], the list of integers :param k: int, the maximum distance between the equal elements :return: bool, True if such elements exist, False otherwise num_indices = {} for i, num in enumerate(nums): if num in num_indices and i - num_indices[num] <= k: return True num_indices[num] = i return False"},{"question":"Given a JSON string, write a program to convert it into an equivalent XML string. The JSON string will contain nested objects and arrays. You need to handle any level of nesting in the JSON data.","solution":"import json import xml.etree.ElementTree as ET def json_to_xml(json_obj, line_padding=\\"\\"): Converts a JSON object to an XML string. elem = ET.Element('root') _convert_json_to_xml(json_obj, elem) return ET.tostring(elem, encoding='unicode') def _convert_json_to_xml(json_obj, parent): if isinstance(json_obj, dict): for tag_name, value in json_obj.items(): sub_elem = ET.SubElement(parent, tag_name) _convert_json_to_xml(value, sub_elem) elif isinstance(json_obj, list): for item in json_obj: sub_elem = ET.SubElement(parent, 'item') _convert_json_to_xml(item, sub_elem) else: parent.text = str(json_obj) # Example usage: json_str = '{\\"greeting\\": \\"Hello\\", \\"target\\": {\\"name\\": \\"World\\"}}' json_obj = json.loads(json_str) xml_str = json_to_xml(json_obj) print(xml_str)"},{"question":"Using a novel, unseen before method, write code in the language of your choice that takes an input of a sentence, and reverses the order of the words in the sentence without using any in-built string reverse functions or methods. For example, given the sentence \\"The quick brown fox jumps over the lazy dog\\", your program should output \\"dog lazy the over jumps fox brown quick The\\".","solution":"def reverse_sentence(sentence): Reverses the order of words in the given sentence. Parameters: - sentence (str): The input sentence to be reversed. Returns: - str: The sentence with the word order reversed. words = sentence.split() reversed_words = [] for word in words: reversed_words.insert(0, word) return ' '.join(reversed_words)"},{"question":"I have started learning Python programming and one of the standard suggestions is to practice by building a to-do list app. I am looking for a simple and effective way to add, remove, and display to-do items in the command line using Python. Could you guide me through creating a basic to-do list app?","solution":"class ToDoList: def __init__(self): self.tasks = [] def add_task(self, task): Adds a task to the to-do list. self.tasks.append(task) def remove_task(self, task): Removes a task from the to-do list. If the task is not found, do nothing. if task in self.tasks: self.tasks.remove(task) def display_tasks(self): Returns the list of tasks. return self.tasks"},{"question":"Create a function that takes a list of strings as input, removes any duplicates, and sorts the list alphabetically. Any string with more than ten characters should be removed from the list before removing duplicates and sorting. Additionally, the function should be case-insensitive when comparing strings for duplicates and sorting.","solution":"def process_strings(input_list): Processes a list of strings by removing duplicates, sorting alphabetically, and removing strings with more than ten characters. The comparison is case-insensitive. # Remove strings with more than ten characters filtered_list = [s for s in input_list if len(s) <= 10] # Convert strings to lower case to handle case-insensitivity for duplicates lower_case_set = set(s.lower() for s in filtered_list) # Sort the list alphabetically sorted_list = sorted(lower_case_set) return sorted_list"},{"question":"I have a file with a list of words. Each line in the file contains one word. I want to write a Python script that reads this file and returns the word that appears most frequently. How can I do this?","solution":"from collections import Counter def most_frequent_word(file_path): Reads a file and returns the word that appears most frequently. Parameters: file_path (str): Path to the file containing words. Returns: str: The most frequent word. with open(file_path, 'r') as file: words = file.read().split() word_count = Counter(words) most_common_word, _ = word_count.most_common(1)[0] return most_common_word"},{"question":"Write a python function which takes an integer input. This function should handle exceptions, determine if the inputted integer is odd and return the square of the integer only if it is odd. If the input is not odd or not an integer, the function should return an appropriate error message.","solution":"def process_integer(input_value): Returns the square of the input_value if it is an odd integer. If the input_value is not an odd integer, returns an appropriate error message. try: value = int(input_value) if value % 2 == 0: return \\"The integer is not odd.\\" return value ** 2 except ValueError: return \\"The input is not an integer.\\""},{"question":"Here's a Python function that takes in two arguments: \`price\` and \`location\`. The function is supposed to return a float value. However, the code snippet contains some errors. Your task is to identify and fix these errors. Moreover, modify the function to include a check for the \`location\` parameter. If \`location\` is not equal to 'NYC', return a message saying \\"Invalid location\\". Only if \`location\` is 'NYC' should the function calculate and return the new price.","solution":"def calculate_price(price, location): Returns the price with NYC tax applied if location is 'NYC'. Otherwise, returns a message \\"Invalid location\\". if location != 'NYC': return \\"Invalid location\\" tax_rate = 0.08875 # NYC tax rate new_price = price * (1 + tax_rate) return new_price"},{"question":"Create a coding program that sorts a given list of numbers into order from least to greatest. The program should also remove any duplicate numbers from the list before sorting it. Additionally, the program should not use any built-in sorting functions or libraries to sort the list. The program should be implemented using a recursive sorting algorithm such as quicksort or mergesort.","solution":"def sort_and_remove_duplicates(numbers): Sorts a list of numbers in ascending order and removes any duplicates. Uses the merge sort algorithm. def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): sorted_list = [] while left and right: if left[0] < right[0]: sorted_list.append(left.pop(0)) else: sorted_list.append(right.pop(0)) while left: sorted_list.append(left.pop(0)) while right: sorted_list.append(right.pop(0)) return sorted_list # Remove duplicates by converting the list to a set and back to a list unique_numbers = list(set(numbers)) # Sort the unique list using merge sort sorted_unique_numbers = merge_sort(unique_numbers) return sorted_unique_numbers"},{"question":"Write a Python function to generate the powerset of a given list, where the list may contain duplicate elements. The output should not contain duplicate subsets. The function should return the powerset in lexicographical order.","solution":"def powerset(lst): Generates the powerset of a given list, where the list may contain duplicate elements. The output won't contain duplicate subsets and will be in lexicographical order. from itertools import chain, combinations # Sorting the list to ensure lexicographical order lst.sort() # Function to get all combinations of the list elements def all_combinations(lst): return chain.from_iterable(combinations(lst, r) for r in range(len(lst) + 1)) # Generating all subsets and converting them to a sorted list of sets, to remove duplicates all_subsets = set(all_combinations(lst)) # Converting to a sorted list of lists for the powerset powerset_result = sorted(map(list, all_subsets)) return powerset_result"},{"question":"Given any string, write a Python function that determines if that string is a palindrome. A palindrome string is defined as a string that remains the same when its characters are reversed. Your function should ignore case sensitivity, whitespace, punctuation, and only consider alphanumeric characters. For example, the string \\"A man, a plan, a canal: Panama\\" is a valid palindrome under these rules.","solution":"import re def is_palindrome(s): Returns True if the given string is a palindrome, False otherwise. Ignores case sensitivity, whitespace, and non-alphanumeric characters. # Normalize the string: convert to lowercase and remove non-alphanumeric characters normalized_str = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Check if the normalized string is the same forwards and backwards return normalized_str == normalized_str[::-1]"},{"question":"Write a code snippet that adds two matrices of equal sizes and then multiply the resulting matrix by a scalar value. Also, define a function that checks if two matrices are of equal size.","solution":"def are_matrices_equal_size(matrix1, matrix2): Checks if two matrices are of equal size. Parameters: matrix1 (list of lists): The first matrix. matrix2 (list of lists): The second matrix. Returns: bool: True if matrices are of equal size, False otherwise. if len(matrix1) != len(matrix2): return False for row1, row2 in zip(matrix1, matrix2): if len(row1) != len(row2): return False return True def add_matrices(matrix1, matrix2): Adds two matrices of equal sizes. Parameters: matrix1 (list of lists): The first matrix. matrix2 (list of lists): The second matrix. Returns: list of lists: The resulting matrix after addition. if not are_matrices_equal_size(matrix1, matrix2): raise ValueError(\\"Matrices are not of equal size.\\") result = [] for row1, row2 in zip(matrix1, matrix2): result.append([val1 + val2 for val1, val2 in zip(row1, row2)]) return result def multiply_matrix_by_scalar(matrix, scalar): Multiplies a matrix by a scalar value. Parameters: matrix (list of lists): The matrix to multiply. scalar (int or float): The scalar value to multiply by. Returns: list of lists: The resulting matrix after multiplication. return [[val * scalar for val in row] for row in matrix]"},{"question":"I have a list of numbers in Python and there might be some duplicates in this list. I need to remove these duplicates to ensure all numbers are unique in the list. How can I achieve this?","solution":"def remove_duplicates(numbers): Removes duplicate numbers from the list, ensuring all numbers are unique. Args: numbers (list): A list of numbers which may contain duplicates. Returns: list: A new list with duplicates removed. return list(set(numbers))"},{"question":"Write a Python function to find maximum profit of buying and selling any number of shares of stock given an array of daily stock prices","solution":"def max_profit(prices): Given an array of daily stock prices, return the maximum profit from any number of stock buys and sells. We use a greedy algorithm to achieve this. The idea is to find every pair of consecutive days where buying on the first day and selling on the next day would be profitable. :param prices: List[int], a list of daily stock prices :return: int, the maximum profit achievable max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"Given a list of integers 'arr' and an integer 'k', write a Python function named 'get_max_subarray_sum' that finds the maximum sum of a subarray of length 'k' within 'arr'.","solution":"def get_max_subarray_sum(arr, k): Finds the maximum sum of a subarray of length 'k' within 'arr'. Parameters: arr (list of int): List of integers. k (int): Length of the subarray. Returns: int: Maximum sum of a subarray of length 'k'. if len(arr) < k or k <= 0: return 0 # Initial sum of the first window max_sum = current_sum = sum(arr[:k]) # Slide the window over the array starting from index k for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given a list of ingredients and a set of recipes, create a python function that finds all recipes that can be made with the given ingredients. Each recipe will have a name, a list of required ingredients, and an optional list of optional ingredients. The function should return a list of recipe names that can be made with the given ingredients, including those that contain optional ingredients that the given ingredients can cover.","solution":"def find_recipes(available_ingredients, recipes): Returns a list of recipe names that can be made with the given ingredients. Parameters: available_ingredients (list): A list of ingredients available. recipes (list of dict): A list of recipes where each recipe is represented as a dict with: 'name' (str): The name of the recipe, 'required' (list): The list of required ingredients, 'optional' (list, optional): The list of optional ingredients. Returns: list: A list of recipe names that can be made with the given ingredients. result = [] available_ingredients_set = set(available_ingredients) for recipe in recipes: required_ingredients_set = set(recipe.get('required', [])) # Check if all required ingredients are available if not required_ingredients_set.issubset(available_ingredients_set): continue # Check for optional ingredients optional_ingredients_set = set(recipe.get('optional', [])) if len(required_ingredients_set.union(optional_ingredients_set) - available_ingredients_set) <= len(optional_ingredients_set): result.append(recipe['name']) return result"},{"question":"When a function is executed in Python, can you explain where in memory the Python interpreter looks for the function definition? Also, could you explain what Python's scope resolution order is and how it applies to finding variables and functions?","solution":"def where_is_function_definition_looked(): When a function is executed in Python, the interpreter looks for the function definition in the following order: LEGB. LEGB stands for: - Local: The local scope within the current function. - Enclosing: Any enclosing functions scope. - Global: The top-level module scope. - Built-in: The built-in scope which contains Python's built-in functions. return \\"LEGB: Local, Enclosing, Global, Built-in\\" def scope_resolution_order(): Explains Python's scope resolution order (LEGB). Local: - The innermost scope, containing local names. Enclosing: - Any enclosing function's scope, if available. Global: - The next-to-last scope, containing the current module’s global names. Built-in: - The outermost scope, containing built-in names pre-defined in Python. return \\"LEGB: Local, Enclosing, Global, Built-in\\""},{"question":"Develop a Python script that accepts a numeric input and outputs the digits in reverse order. For instance, if the input is 12345, the output should be 54321.","solution":"def reverse_digits(number): Returns the digits of the number in reverse order. # Ensure the input number is a string to handle its digits. number_str = str(number) # Reverse the string and convert to integer if needed. reversed_str = number_str[::-1] # Handle negative numbers by preserving the negative sign at the beginning. if number_str[0] == '-': # Move the negative sign to the beginning of the reversed string. return int('-' + reversed_str[:-1]) else: return int(reversed_str)"},{"question":"Create a Python program to take in a list of words and output a new list with only the words that have a length greater than or equal to 5.","solution":"def filter_long_words(words): Returns a list of words that are at least 5 characters long. :param words: A list of words (strings). :return: A list of words from the input list with length >= 5. return [word for word in words if len(word) >= 5]"},{"question":"Write a function in Python to remove all occurrences of the element with the value of 'apple' from the list, but without using the built-in remove() function. The function should also return the indices of the removed elements. The list may contain duplicate elements and should not be empty.","solution":"def remove_apple_elements(lst): Removes all occurrences of the element 'apple' from the list and returns the modified list along with the indices of the removed elements. Args: lst (list): The list from which to remove 'apple'. Returns: tuple: A tuple containing the modified list and a list of indices where 'apple' was removed. indices = [i for i, v in enumerate(lst) if v == 'apple'] modified_list = [v for v in lst if v != 'apple'] return modified_list, indices"},{"question":"Write a function to reverse a string without using any built-in functions or methods that directly reverse the string. Additionally, you are not allowed to use any additional data structures such as arrays or lists.","solution":"def reverse_string(s): Reverses the given string without using any built-in functions or additional data structures. reversed_str = '' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a Python program to create a dictionary with five elements. Each element should have a key-value pair, where the key is a string and the value is a list of integers. However, each integer in the list should be a prime number. Additionally, ensure that the keys in the dictionary are in lexicographical order. Here is a Python program that creates a dictionary with five elements, where each element has a key-value pair. The key is a string, and the value is a list of prime numbers. The keys in the dictionary are in lexicographical order.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def generate_prime_list(size): Generate a list of prime numbers of specified size. primes = [] num = 2 # First prime number while len(primes) < size: if is_prime(num): primes.append(num) num += 1 return primes def create_prime_dict(): Returns a dictionary with five elements. Each element has a key (string) and a value (list of prime numbers) with keys in lexicographical order. keys = [\\"alpha\\", \\"beta\\", \\"gamma\\", \\"delta\\", \\"epsilon\\"] prime_dict = {} for key in keys: prime_dict[key] = generate_prime_list(5) return prime_dict"},{"question":"Write a Python code to create a dictionary named 'vehicles', and fill it with five key-value pairs. Then extend the task by adding a function that performs operations efficiently on the dictionary such as searching for a vehicle, adding a new vehicle, deleting a vehicle, and updating vehicle information. The function must be designed such that the time complexity does not cross O(log n) for any operations. The implementation should also handle corner cases such as what happens when trying to delete or search for a vehicle that does not exist in the dictionary.","solution":"import bisect class Vehicles: def __init__(self): self.vehicles = {} def add_vehicle(self, name, info): self.vehicles[name] = info def delete_vehicle(self, name): if name in self.vehicles: del self.vehicles[name] def update_vehicle(self, name, new_info): if name in self.vehicles: self.vehicles[name] = new_info def search_vehicle(self, name): return self.vehicles.get(name, None) def create_and_fill_vehicles(): vehicles = Vehicles() vehicles.add_vehicle('Car', {'Make': 'Toyota', 'Model': 'Corolla', 'Year': 2020}) vehicles.add_vehicle('Bike', {'Make': 'Yamaha', 'Model': 'R15', 'Year': 2019}) vehicles.add_vehicle('Truck', {'Make': 'Ford', 'Model': 'F-150', 'Year': 2018}) vehicles.add_vehicle('Bus', {'Make': 'Mercedes', 'Model': 'Sprinter', 'Year': 2021}) vehicles.add_vehicle('Van', {'Make': 'Dodge', 'Model': 'Grand Caravan', 'Year': 2017}) return vehicles"},{"question":"Write a python program that implements a simple calculator. The calculator should be able to do basic arithmetic operations like addition, subtraction, multiplication, division and modulus operations. Beyond implementing these functionalities, also add exception handling capabilities to deal with illegal operations, such as division by zero.","solution":"def add(a, b): Returns the sum of a and b. return a + b def subtract(a, b): Returns the difference between a and b. return a - b def multiply(a, b): Returns the product of a and b. return a * b def divide(a, b): Returns the division of a by b. Raises an exception if b is zero. if b == 0: raise ValueError(\\"Cannot divide by zero\\") return a / b def modulus(a, b): Returns the modulus of a by b. Raises an exception if b is zero. if b == 0: raise ValueError(\\"Cannot perform modulus by zero\\") return a % b"},{"question":"Create a list of the first 1000 prime numbers using Python, but without using any built-in functions or libraries for prime number generation or checking. Your solution should have a time complexity of O(n^2) or better.","solution":"def is_prime(number): Helper function to determine if a number is prime. if number <= 1: return False for i in range(2, int(number ** 0.5) + 1): if number % i == 0: return False return True def generate_primes(n): Generates first n prime numbers. primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return primes # Generate the first 1000 prime numbers first_1000_primes = generate_primes(1000)"},{"question":"Write a python code that takes a list as input. The elements of the list can be sublists or other iterable objects. The returned output should be a single list with all the sub-elements without any sublist or iterable object.","solution":"def flatten_list(nested_list): Flattens a nested list. Args: nested_list (list): A list which may contain nested lists, sets, tuples. Returns: list: A single-level list with all the sub-elements. flat_list = [] def flatten(item): if isinstance(item, (list, set, tuple)): for sub_item in item: flatten(sub_item) else: flat_list.append(item) flatten(nested_list) return flat_list"},{"question":"Given a list, write a function to find the kth max and min element in the list. To further modify the problem, do not use built-in Python functions for sorting or finding the max and min values. Moreover, implement a function that can handle an additional input of a comparator function to determine the \\"max\\" and \\"min\\" values based upon.","solution":"def find_kth_min_max(lst, k, comparator): Returns the kth minimum and maximum element in a list using a custom comparator function. :param lst: List of elements :param k: The k-th index for finding minimum and maximum (1-based index) :param comparator: A function that defines comparison logic :return: A tuple containing kth minimum and kth maximum elements def partition(arr, low, high, comp): i = low - 1 pivot = arr[high] for j in range(low, high): if comp(arr[j], pivot): i = i + 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quickselect(arr, low, high, k, comp): if low == high: return arr[low] pivot_index = partition(arr, low, high, comp) if k == pivot_index: return arr[k] elif k < pivot_index: return quickselect(arr, low, pivot_index - 1, k, comp) else: return quickselect(arr, pivot_index + 1, high, k, comp) if not lst or k < 1 or k > len(lst): return None, None lst_min = lst[:] lst_max = lst[:] kth_min = quickselect(lst_min, 0, len(lst_min) - 1, k - 1, comparator) reverse_comparator = lambda x, y: comparator(y, x) kth_max = quickselect(lst_max, 0, len(lst_max) - 1, k - 1, reverse_comparator) return kth_min, kth_max"},{"question":"Generate a python function that calculate the Fibonacci number of a given length n, where n must be greater than or equal to 0 and less than or equal to 50. The function should return the Fibonacci number at the specified length. The function should also check if the input n is an integer and raise a ValueError if it is not.","solution":"def fibonacci(n): Returns the Fibonacci number at the given length n. n must be an integer between 0 and 50 (inclusive). Raises ValueError if n is not an integer or is out of bounds. if not isinstance(n, int): raise ValueError(\\"n must be an integer\\") if n < 0 or n > 50: raise ValueError(\\"n must be between 0 and 50 (inclusive)\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Develop a regex pattern that can match the pattern 'www.somedomain.com/posts/[post_id]' considering post_id can be a varying length alphanumeric value. Also, handle potential http/s:// and trailing slash variations. Below is a Python code that employs the Python 're' module to match the provided regular expression pattern with various test URLs.","solution":"import re def is_valid_post_url(url): Returns whether the input URL matches the pattern for a valid post URL of the form: www.somedomain.com/posts/[post_id], considering post_id can be a varying length alphanumeric value. Handles potential http/https:// and trailing slash variations. pattern = r'^(https?://)?(www.)?somedomain.com/posts/[a-zA-Z0-9]+/?' return bool(re.match(pattern, url))"},{"question":"Write a program that reverses the input string while maintaining the position of special characters.","solution":"def reverse_string_maintain_special_chars(s): Reverses the input string while maintaining the position of special characters. # Extract only alphanumeric characters and reverse them alphanumeric_chars = [c for c in s if c.isalnum()] alphanumeric_reversed = alphanumeric_chars[::-1] # Place the reversed alphanumeric characters back into their original positions, skipping special characters result = [] reversed_index = 0 for char in s: if char.isalnum(): result.append(alphanumeric_reversed[reversed_index]) reversed_index += 1 else: result.append(char) return ''.join(result)"},{"question":"Given an array of integers, implement the quicksort algorithm to sort the array in ascending order. However, you are not allowed to use any built-in sorting functions or libraries.","solution":"def quicksort(arr): Sorts an array of integers in ascending order using the quicksort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a python program to check whether a given string is a palindrome ignoring case, spaces, and punctuation marks.","solution":"import string def is_palindrome(s): Check whether a given string is a palindrome ignoring case, spaces, and punctuation marks. # Remove spaces, punctuation marks and convert to lower case cleaned_s = ''.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"You are given a list of names and you need to create a function that returns a dictionary where the keys are the names of people and the values are their associated ASCII values. If the input list contains duplicate names, you should keep the ASCII value of the last occurrence of the name.","solution":"def names_to_ascii(names): Converts a list of names into a dictionary with names as keys and the ASCII values of their last characters as values. Parameters: names (list of str): The list of names. Returns: dict: A dictionary with the names as keys and the ASCII values of their last characters as values. result = {} for name in names: if name: # ensuring the name is not an empty string result[name] = ord(name[-1]) return result"},{"question":"Write a python code snippet that not only removes all elements from a set, but also verifies the operation by attempting to remove an element that does not exist in the set. If such an element is not found, your code should output an appropriate message. Ensure your code is efficient, employing the correct data structures and methods for optimal performance.","solution":"def clear_set(s): Removes all elements from the set s and attempts to remove a non-existent element to verify. # Clear the set s.clear() # Attempt to remove a non-existent element non_existent_element = 'non_existent_element' if non_existent_element not in s: return \\"The set is empty and the non-existent element was not found.\\" else: return \\"There was an error in clearing the set.\\""},{"question":"I have an array of numbers and I would like to get the largest number from it. Can you help me write the code to achieve this in Python?","solution":"def get_largest_number(arr): Returns the largest number in the given array. If the array is empty, returns None. if not arr: return None return max(arr)"},{"question":"I am trying to extract audio data from a .wav file using numpy in python code so I can take the discrete Fourier transform of the audio data afterwards. The RawDataBuffer in the .wav file is in a PCM format, which I understand is a pulse code modulation format that contains audio samples. I tried to write a function that takes in the filename of the .wav file, then successfully converted the PCM data into a vector of integers that represents the discrete audio data. However, when I take the length of the vector, the number is half of what I expected it to be (e.g., a 50,000 data point file returns a vector of length 25,000). I think the problem might be related to stereo vs. mono data. Can you help me modify the function?","solution":"import numpy as np import wave def extract_audio_data(file_path): Extracts the audio data from a .wav file. Parameters: file_path (str): Path to the .wav file. Returns: np.ndarray: Array containing the audio data. int: Number of channels in the audio file. # Open the WAV file with wave.open(file_path, 'rb') as wav_file: # Extract Raw Audio from Wav File signal = wav_file.readframes(wav_file.getnframes()) # Get number of audio channels (1 for mono, 2 for stereo) channels = wav_file.getnchannels() # Convert byte data to numpy array audio_data = np.frombuffer(signal, dtype=np.int16) # If stereo, reshape the array if channels == 2: audio_data = audio_data.reshape((-1, 2)) return audio_data, channels"},{"question":"Given a programming code, fix syntax errors and modify the code to calculate the length of the longest uncommon subsequence (LUS) of two strings. If there is no uncommon subsequence, return -1. An uncommon subsequence is a subsequence that is present in one string but not the other.","solution":"def find_lus_length(a, b): Returns the length of the longest uncommon subsequence of strings a and b. If no uncommon subsequence exists, return -1. if a == b: return -1 else: return max(len(a), len(b))"},{"question":"Write a function in Python that takes two date objects, \`date1\` and \`date2\`, as arguments. The function should return a string in the format \\"Day, Month Day, Year\\" representing the date that is the middle date between \`date1\` and \`date2\`. If \`date1\` and \`date2\` are on the same day, return \`date1\` or \`date2\`. Ensure your solution handles cases where \`date1\` is greater than \`date2\`.","solution":"from datetime import date, timedelta def format_date(dt): Convert a date object to a string in the format \\"Day, Month Day, Year\\". return dt.strftime(\\"%A, %B %d, %Y\\") def middle_date(date1, date2): Return the middle date between date1 and date2 as a formatted string. If date1 and date2 are the same, return date1 or date2. Assumes date1 and date2 are both instances of datetime.date. if date1 > date2: date1, date2 = date2, date1 mid_days = (date2 - date1).days // 2 middle_dt = date1 + timedelta(days=mid_days) return format_date(middle_dt)"},{"question":"Use Python code to find the size of the file 'example.txt' in bytes and also return the number of lines in the file. Additionally, make sure that the code can handle files that are larger than 1GB in size.","solution":"def get_file_size_and_line_count(file_path): Returns the size of the file in bytes and the number of lines in the file. Args: file_path (str): the path to the file Returns: tuple: a tuple containing the size of the file (int) in bytes and the number of lines (int) size = 0 lines = 0 with open(file_path, 'rb') as file: file.seek(0, 2) size = file.tell() with open(file_path, 'r', encoding='utf-8', errors='ignore') as file: for _ in file: lines += 1 return size, lines"},{"question":"Write a Python function that converts given start time and time difference to the final time. The input time will be in the format of 'HH:MM:SS' and you have to consider the case where the time difference may exceed 24 hours. Your function should also detect any non-standard time format input and raise an exception.","solution":"from datetime import datetime, timedelta def convert_time(start_time, time_difference): Converts given start time in 'HH:MM:SS' format and time difference in seconds to the final time. Parameters: start_time (str): The start time as a string in the format 'HH:MM:SS'. time_difference (int): The time difference in seconds, can be positive or negative. Returns: str: The final time in 'HH:MM:SS' format. Raises: ValueError: If the start time is not in the correct format. # Validate start time format try: start_dt = datetime.strptime(start_time, '%H:%M:%S') except ValueError: raise ValueError(\\"Invalid start time format. Expected format is 'HH:MM:SS'\\") # Calculate new time final_dt = start_dt + timedelta(seconds=time_difference) # Format the final time in 'HH:MM:SS' format final_time = final_dt.strftime('%H:%M:%S') return final_time"},{"question":"Use the softmax function and cross-entropy loss function to implement a multi-class classifier in Python.","solution":"import numpy as np def softmax(logits): Compute the softmax of a list of numbers. Args: logits (np.array): An array of logits (raw class scores). Returns: np.array: The softmax probabilities. exp_values = np.exp(logits - np.max(logits)) probabilities = exp_values / np.sum(exp_values) return probabilities def cross_entropy_loss(predictions, labels): Compute the cross entropy loss between predictions and true labels. Args: predictions (np.array): An array of predicted probabilities. labels (np.array): An array of true labels, one-hot encoded. Returns: float: The cross-entropy loss. loss = -np.sum(labels * np.log(predictions)) return loss / labels.shape[0] def predict(logits): Compute the class predictions based on softmax probabilities. Args: logits (np.array): An array of logits (raw class scores). Returns: int: The predicted class index. probabilities = softmax(logits) return np.argmax(probabilities)"},{"question":"Write a Python function that receives a nested list as input and returns a flattened version of the list. The function should be able to handle lists of arbitrary depth.","solution":"def flatten(nested_list): Returns a flattened version of a nested list. flat_list = [] for item in nested_list: if isinstance(item, list): flat_list.extend(flatten(item)) else: flat_list.append(item) return flat_list"},{"question":"Write a Python script which can print out all prime numbers between 0 and a given number n.","solution":"def find_primes(n): Returns a list of all prime numbers between 0 and n (inclusive). if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for divisor in range(2, int(num ** 0.5) + 1): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Modify the code to make it compatible with Python 3. Additionally, implement a function that calculates the volume of a sphere given its radius. The function should round the volume to 2 decimal places and return it. The radius should be a positive integer.","solution":"import math def sphere_volume(radius): Returns the volume of a sphere given its radius. Parameters: radius (int): The radius of the sphere. Should be a positive integer. Returns: float: The volume of the sphere rounded to 2 decimal places. if radius <= 0: raise ValueError(\\"Radius should be a positive integer.\\") volume = (4/3) * math.pi * radius**3 return round(volume, 2) # Example usage # print(sphere_volume(3)) # Outputs: 113.1"},{"question":"Write a Python function that not only checks if a given string is a palindrome, but also confirms the string is a valid numerical value (i.e., it's numeric). If it is both a numeric value and a palindrome, return True. If either is not met, return False. Exception handling should be incorporated to handle non-string type inputs.","solution":"def is_numeric_palindrome(s): Check if the given string s is both a palindrome and a valid numeric value. Parameters: s (str): The string to check. Returns: bool: True if s is numeric and a palindrome, False otherwise. try: # Check if s is a string if not isinstance(s, str): return False # Check if s is numeric if not s.isnumeric(): return False # Check if s is a palindrome if s != s[::-1]: return False return True except Exception: return False"},{"question":"We have been giving two lists of numbers. Let's say list A and list B. Now, also assume that our task is to determine the elements that are present in both lists, i.e. the points where these lists overlap. However, there is one restriction: do not use any inbuilt python libraries, such as numpy or pandas. Write a python function that accomplishes this task.","solution":"def find_overlap(list_a, list_b): Find the overlap elements present in both list_a and list_b. overlap = [] for element in list_a: if element in list_b and element not in overlap: overlap.append(element) return overlap"},{"question":"Use the turtle graphics library in the Python programming language to produce a visual output resembling the Fibonacci sequence, while implementing a recursive function that can handle input values up to 100. Incorporate proper exception handling for invalid inputs. Note that the Fibonacci sequence begins with 0 and 1, and each subsequent term is the sum of the two preceding ones.","solution":"import turtle def draw_fibonacci_spiral(n, length): Draws a Fibonacci spiral for the first \`n\` Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to include in the spiral. length (int): The initial length of the sides of the squares. screen = turtle.Screen() screen.bgcolor(\\"white\\") fibonacci = get_fibonacci_sequence(n) t = turtle.Turtle() for i in range(n): draw_square(t, length * fibonacci[i]) t.forward(length * fibonacci[i]) t.right(90) length += fibonacci[i] turtle.done() def draw_square(t, size): Draws a square of a given \`size\`. Parameters: t (turtle.Turtle): The turtle instance used to draw. size (int): The size of the square to draw. for _ in range(4): t.forward(size) t.right(90) def get_fibonacci_sequence(n): Generates a list of the first \`n\` Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first \`n\` Fibonacci numbers. if n < 0: raise ValueError(\\"The number of terms must be a non-negative integer.\\") sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Convert the following code into an equivalent function in Python and add error handling for invalid inputs.","solution":"def divide_numbers(a, b): Returns the result of dividing a by b. try: if not isinstance(a, (int, float)) or not isinstance(b, (int, float)): raise ValueError(\\"Inputs must be numbers.\\") return a / b except ZeroDivisionError: return \\"Error: Division by zero.\\" except ValueError as ve: return f\\"Error: {ve}\\""},{"question":"Given a matrix, write a function to rotate it 90 degrees clockwise.","solution":"def rotate_matrix_90_clockwise(matrix): Rotate the given matrix 90 degrees clockwise. Args: matrix: List of List of integers (matrix) Returns: Rotated matrix 90 degrees clockwise. if not matrix or not matrix[0]: return matrix rows, cols = len(matrix), len(matrix[0]) # Create a new matrix to store the rotated values rotated_matrix = [[0] * rows for _ in range(cols)] for r in range(rows): for c in range(cols): rotated_matrix[c][rows - 1 - r] = matrix[r][c] return rotated_matrix"},{"question":"Given the following Python code, generate a function that will print the first 3 elements of a list, but with the constraint that the function must have a time complexity of O(1). Additionally, the function must not modify the original list or create a new list with the first 3 elements. The function should only print the elements directly without any additional formatting.","solution":"def print_first_three_elements(lst): Prints the first 3 elements of a list, ensuring an O(1) time complexity. Parameters: lst (list): The list from which to print the first 3 elements. Returns: None if len(lst) >= 1: print(lst[0]) if len(lst) >= 2: print(lst[1]) if len(lst) >= 3: print(lst[2])"},{"question":"Can you give me a sample of what a beginner python programmer should be able to code? This Python code aims to perform some basic tasks like manipulating strings, using control structures, and working with lists. It includes a function to create and display a grocery list.","solution":"def create_grocery_list(): Creates a grocery list and displays its contents. grocery_list = [] # Welcome message print(\\"Welcome to the grocery list app!\\") # Collect grocery items while True: item = input(\\"Enter an item for your grocery list (or 'done' to finish): \\") if item.lower() == 'done': break grocery_list.append(item) print(f\\"Added {item} to your grocery list.\\") # Display grocery list print(\\"nYour Grocery List:\\") for idx, item in enumerate(grocery_list, start=1): print(f\\"{idx}. {item}\\") return grocery_list"},{"question":"You are tasked with creating a Python function that simulates a simple version of the \`include\` directive found in many configuration file formats. The \`include\` directive allows for the inclusion of another file into the current one, effectively merging the contents of the included file at the point of the directive.","solution":"def include_files(files, start): Simulates the \`include\` directive by merging the contents of the included files. Args: files (dict): A dictionary where the keys are file names and the values are the content of the files. start (str): The starting file name to begin the merging process. Returns: str: The final merged content after including all specified files. def process_file(file_name, seen_files): if file_name in seen_files: raise ValueError(\\"Circular inclusion detected!\\") if file_name not in files: raise FileNotFoundError(f\\"File '{file_name}' not found.\\") seen_files.add(file_name) content = [] for line in files[file_name].splitlines(): if line.startswith(\\"include \\"): include_file = line.split(\\" \\")[1] content.append(process_file(include_file, seen_files)) else: content.append(line) seen_files.remove(file_name) return \\"n\\".join(content) return process_file(start, set())"},{"question":"How would you implement the functionality of a stack data structure using a list in Python, while also ensuring that the time complexity for both push and pop operations is O(1)? Provide the implementation in the form of a class with the necessary methods.","solution":"class Stack: def __init__(self): self.stack = [] def push(self, item): self.stack.append(item) def pop(self): if not self.is_empty(): return self.stack.pop() raise IndexError(\\"pop from empty stack\\") def is_empty(self): return len(self.stack) == 0 def peek(self): if not self.is_empty(): return self.stack[-1] raise IndexError(\\"peek from empty stack\\") def size(self): return len(self.stack)"},{"question":"Given an array of strings and an integer, create a function to output an array containing the strings of the input at indices less than the specified integer.","solution":"def strings_at_indices(strings, index): Returns an array containing the strings of the input at indices less than the specified integer. Parameters: strings (list of str): The input list of strings. index (int): The index threshold. Returns: list of str: The strings at indices less than the specified integer. if index < 0: return [] return strings[:index]"},{"question":"Design a Python function that not only finds the frequency of a specific value in a multi-dimensional list but also returns the indexes at which these values are located. Additionally, write another function that can take these indexes and remove the values from the list without changing the structure of the multi-dimensional list. The function should return the updated list.","solution":"def find_value_indexes(matrix, value): Finds the frequency of a specific value in a multi-dimensional list and returns the indexes where these values are located. Args: matrix (list of lists): The multi-dimensional list to search in. value: The value to search for in the multi-dimensional list. Returns: (frequency, indexes): A tuple containing the frequency of the value and a list of tuples of indexes. indexes = [] for i, row in enumerate(matrix): for j, element in enumerate(row): if element == value: indexes.append((i, j)) frequency = len(indexes) return frequency, indexes def remove_values_by_indexes(matrix, indexes): Removes the values at the given indexes from the multi-dimensional list without changing the structure of the list. Args: matrix (list of lists): The multi-dimensional list to modify. indexes (list of tuples): The list of tuples containing the indexes of the values to be removed. Returns: list of lists: The updated multi-dimensional list with the values removed. for i, j in indexes: matrix[i][j] = None return matrix"},{"question":"Create poker hands {Hands} and provide a function \`verify_poker_hands\` to verify the correctness of the implemented poker hands. The poker hand types include \`HighCard\`, \`OnePair\`, \`TwoPairs\`, \`ThreeOfAKind\`, \`Straight\`, \`Flush\`, \`FullHouse\`, \`FourOfAKind\`, \`StraightFlush\`, and \`RoyalFlush\`. The verification function should compare two poker hands and determine which hand wins based on poker hand ranking rules. Additionally, include a \`HandType\` class to represent the different types of poker hands and a \`Card\` class to represent individual cards in a hand. The \`Deck\` and \`sample\` classes act as support for generating random hands to test the verification function.","solution":"from collections import Counter import itertools class Card: def __init__(self, rank, suit): self.rank = rank self.suit = suit def __lt__(self, other): return self.rank < other.rank def __repr__(self): return f\\"{self.rank}{self.suit}\\" class HandType: def __init__(self, hand_type, ranks): self.hand_type = hand_type self.ranks = ranks def __lt__(self, other): if self.hand_type != other.hand_type: return self.hand_type < other.hand_type return self.ranks < other.ranks class PokerHand: def __init__(self, cards): self.cards = sorted(cards, reverse=True) self.hand_type = self.evaluate_hand() def evaluate_hand(self): if self.is_royal_flush(): return HandType(9, self.cards) if self.is_straight_flush(): return HandType(8, self.cards) if self.is_four_of_a_kind(): return HandType(7, self.sorted_ranks()) if self.is_full_house(): return HandType(6, self.sorted_ranks()) if self.is_flush(): return HandType(5, self.cards) if self.is_straight(): return HandType(4, self.cards) if self.is_three_of_a_kind(): return HandType(3, self.sorted_ranks()) if self.is_two_pairs(): return HandType(2, self.sorted_ranks()) if self.is_one_pair(): return HandType(1, self.sorted_ranks()) return HandType(0, self.cards) def sorted_ranks(self): counter = Counter(card.rank for card in self.cards) sorted_counter = sorted(counter.items(), key=lambda x: (x[1], x[0]), reverse=True) return [card for card, _ in sorted_counter] def is_royal_flush(self): if self.is_straight_flush(): return self.cards[0].rank == 14 return False def is_straight_flush(self): return self.is_flush() and self.is_straight() def is_four_of_a_kind(self): counter = Counter(card.rank for card in self.cards) return 4 in counter.values() def is_full_house(self): counter = Counter(card.rank for card in self.cards) return 3 in counter.values() and 2 in counter.values() def is_flush(self): suits = [card.suit for card in self.cards] return len(set(suits)) == 1 def is_straight(self): ranks = [card.rank for card in self.cards] return ranks == list(range(ranks[0], ranks[0] - 5, -1)) def is_three_of_a_kind(self): counter = Counter(card.rank for card in self.cards) return 3 in counter.values() def is_two_pairs(self): counter = Counter(card.rank for card in self.cards) return list(counter.values()).count(2) == 2 def is_one_pair(self): counter = Counter(card.rank for card in self.cards) return 2 in counter.values() def __lt__(self, other): return self.hand_type < other.hand_type def verify_poker_hands(hand1, hand2): poker_hand1 = PokerHand(hand1) poker_hand2 = PokerHand(hand2) if poker_hand1 < poker_hand2: return \\"Hand2 wins\\" elif poker_hand2 < poker_hand1: return \\"Hand1 wins\\" return \\"It's a tie\\""},{"question":"Write a Python code that detects if a given character is uppercase, lowercase, or something else. The code should handle multiple characters and return the frequency of each type of character (uppercase, lowercase, and other) in the given string. Additionally, the code should exclude any characters that are not in the English alphabet and consider the frequency of each letter (uppercase and lowercase separately). The code should also keep track of the number of vowels and consonants in the string, excluding any characters that are not in the English alphabet.","solution":"import string def character_analysis(input_string): Analyzes the given string and returns the frequency of uppercase, lowercase, and other characters, along with the count of vowels and consonants. Parameters: input_string (str): The string to analyze. Returns: dict: A dictionary containing the frequencies and counts. result = { \\"uppercase\\": 0, \\"lowercase\\": 0, \\"other\\": 0, \\"vowels\\": 0, \\"consonants\\": 0 } vowels = \\"AEIOUaeiou\\" consonants = string.ascii_letters.replace(vowels, \\"\\") for char in input_string: if char in string.ascii_uppercase: result[\\"uppercase\\"] += 1 if char in vowels: result[\\"vowels\\"] += 1 else: result[\\"consonants\\"] += 1 elif char in string.ascii_lowercase: result[\\"lowercase\\"] += 1 if char in vowels: result[\\"vowels\\"] += 1 else: result[\\"consonants\\"] += 1 else: result[\\"other\\"] += 1 return result"},{"question":"Develop a recursive function utilizing Python programming language, intended to find the smallest numerical value within a specified list of integers. The list for this scenario is [500, 20, 8, 1000, 1024].","solution":"def find_min_recursive(lst): Recursively finds the minimum value in a list of integers. # If the list contains only one element, return it as the minimum if len(lst) == 1: return lst[0] # Otherwise, get the minimum value between the first element # and the minimum of the remaining list return min(lst[0], find_min_recursive(lst[1:]))"},{"question":"Create a Python function \`palindrome()\` which accepts a string as an argument and returns \`True\` if the string is a palindrome, else \`False\`. Moreover, enhance the function to ignore case sensitivity and non-alphanumeric characters while determining if the string is a palindrome. For instance, consider the phrases, \\"A man, a plan, a canal, Panama!\\", and \\"Was it a car or a cat I saw?\\" which should be recognized as valid palindromes.","solution":"import re def palindrome(s): Returns True if the string s is a palindrome, else False. Ignores case sensitivity and non-alphanumeric characters. cleaned = re.sub(r'[^A-Za-z0-9]', '', s).lower() return cleaned == cleaned[::-1]"},{"question":"Given two ranges [ Start1, End1] and [Start2, End2], write a Python program to check if the two ranges overlap. The program should return True if there is at least one number that lies within both ranges, and False otherwise.","solution":"def ranges_overlap(start1, end1, start2, end2): Checks if the two ranges [start1, end1] and [start2, end2] overlap. Returns True if they overlap, otherwise returns False. return max(start1, start2) <= min(end1, end2)"},{"question":"Create a Python function that takes a list of strings and returns a dictionary with the strings grouped by their lengths.","solution":"def group_strings_by_length(strings): Groups a list of strings by their lengths. :param strings: List of strings to be grouped. :return: Dictionary with lengths as keys and lists of strings of that length as values. length_dict = {} for string in strings: length = len(string) if length not in length_dict: length_dict[length] = [] length_dict[length].append(string) return length_dict"},{"question":"Convert a given positive integer to its binary representation without using any inbuilt functions or libraries for conversion. Also, the function should handle edge cases, for example, zero and very large numbers efficiently.","solution":"def integer_to_binary(n): Converts a given positive integer to its binary representation without using any inbuilt functions or libraries for the conversion. if n == 0: return \\"0\\" binary = \\"\\" while n > 0: binary = str(n % 2) + binary n = n // 2 return binary"},{"question":"Devise a computer code function for the discernment of a character sequence that conforms to the American telephone number format.","solution":"import re def is_american_telephone_number(phone_number): Checks if the given phone number conforms to the American telephone number format. The formats considered valid are: - (XXX) XXX-XXXX - XXX-XXX-XXXX - XXX.XXX.XXXX Args: - phone_number (str): The phone number string to check. Returns: - bool: True if the phone number matches the American telephone number format, else False. pattern = re.compile(r'^((d{3})s?d{3}-d{4}|d{3}-d{3}-d{4}|d{3}.d{3}.d{4})') return bool(pattern.match(phone_number))"},{"question":"Write all the code needed in a Flask application using a Jinja2 template to show a friendly \\"Hello World!\\" message. Additionally, demonstrate how to receive a user's input from a form containing an input field and a submit button, then use the input to personalize the greeting message. In your solution, provide detailed inline comments explaining the role of each major line of code. You must also ensure that the application can handle potential form submission errors gracefully. Below is a very detailed breakdown of creating a Flask application with a simple Jinja2 template. You will create a form to accept user input and send a personalized greeting back to the user. The code includes detailed comments explaining the major operations.","solution":"from flask import Flask, request, render_template, redirect, url_for, flash app = Flask(__name__) app.secret_key = 'your_secret_key' # Necessary for flashing messages # Route to display the initial form for user input @app.route('/') def home(): return render_template('home.html') # Route to handle the form submission @app.route('/greet', methods=['POST']) def greet(): try: # Get user input from form name = request.form.get('name') if not name: flash('Name is required!', 'error') return redirect(url_for('home')) # Render the greeting page with personalized message return render_template('greet.html', name=name) except Exception as e: flash(f\\"An error occurred: {str(e)}\\", 'error') return redirect(url_for('home')) if __name__ == '__main__': app.run(debug=True)"},{"question":"Create a Python program to reverse a string. The string can contain alphanumeric characters and punctuation. Your program should also consider reversing the string in terms of words and not just characters. For example, if the input string is \\"Hello, World!\\", the output should be \\"!dlroW ,olleH\\".","solution":"def reverse_string(input_str): Reverses the input string in terms of characters. Args: input_str (str): The string to be reversed. Returns: str: The reversed string. return input_str[::-1]"},{"question":"Write a Python program to print the prime numbers from a specified list of integers, but also check and handle possible exceptions elegantly. Your input list will include negative numbers, zero, non-integer types, and strings which need to be filtered out. For instance, your program should be able to handle inputs like [11, \\"string\\", 4, 19.5, -7, 0, 13]. The program should only return the prime numbers.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def filter_primes(nums): Filter prime numbers from a specified list of integers. prime_numbers = [] for num in nums: try: if isinstance(num, int) and is_prime(num): prime_numbers.append(num) except Exception as e: # Log the exception if needed, here we keep it silent pass return prime_numbers"},{"question":"Create a function to find all the positions of a substring in a string, without using built-in functions or external libraries. Additionally, implement a case-insensitive search with an optional parameter.","solution":"def find_substring_positions(string, substring, case_insensitive=False): Returns a list of starting positions of the substring in the string. Optionally performs case-insensitive search. Parameters: - string (str): The string to search in. - substring (str): The substring to search for. - case_insensitive (bool): Whether the search is case-insensitive. Returns: - List[int]: A list of starting positions of the substring. if case_insensitive: string = string.lower() substring = substring.lower() positions = [] length = len(substring) for i in range(len(string) - length + 1): if string[i:i + length] == substring: positions.append(i) return positions"},{"question":"How can you modify the given code to add a new functionality that allows the user to input a range of numbers and print the sum of all prime numbers in that range?","solution":"def is_prime(num): Check if a number is a prime number. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def sum_of_primes_in_range(start, end): Returns the sum of all prime numbers in the given range [start, end]. return sum(num for num in range(start, end + 1) if is_prime(num))"},{"question":"I want to create an array that stores the powers of 2 from 2^0 to 2^N. How can I achieve this in a programming script? Additionally, I need a function to print out the contents of this array. Can you provide a solution using Python?","solution":"def generate_powers_of_2(N): Generates an array that contains the powers of 2 from 2^0 to 2^N. Args: N (int): The highest exponent. Returns: list: List of powers of 2 from 2^0 to 2^N. return [2 ** i for i in range(N + 1)] def print_powers_of_2(array): Prints out the contents of the array. Args: array (list): The array to print. for item in array: print(item)"},{"question":"Write a Python function that takes in two sets, \`set1\` and \`set2\`, and an optional parameter \`operation_type\` which is a string that can be either \\"and\\" or \\"or\\". If \`operation_type\` is \\"and\\", the function should return a new set containing elements that are present in both \`set1\` and \`set2\` (the intersection of the two sets). If \`operation_type\` is \\"or\\", the function should return a new set containing elements that are present in either \`set1\` or \`set2\` (the union of the two sets). If \`operation_type\` is not provided or is not one of the allowed values, the function should raise a ValueError.","solution":"def set_operation(set1, set2, operation_type=None): Performs a set operation on two sets based on the operation type. Parameters: set1 (set): The first set. set2 (set): The second set. operation_type (str): The type of operation to perform ('and' for intersection, 'or' for union). Returns: set: The result of the set operation. Raises: ValueError: If operation_type is not provided or is invalid. if operation_type == \\"and\\": return set1.intersection(set2) elif operation_type == \\"or\\": return set1.union(set2) else: raise ValueError(\\"Invalid operation type. Must be 'and' or 'or'.\\")"},{"question":"Write an AWS Lambda function using Python that checks the health status of a given URL. The function should have a parameter for the URL and should return a status code and a status message indicating the health of the URL. Additionally, the function should use the requests library to make an HTTP request to the URL and handle any exceptions that may occur.","solution":"import requests def check_url_health(url): Checks the health status of the given URL. Parameters: url (str): The URL to check. Returns: tuple: A tuple containing the status code and status message. try: response = requests.get(url) status_code = response.status_code if 200 <= status_code < 400: return (status_code, \\"Healthy\\") else: return (status_code, \\"Unhealthy\\") except requests.RequestException as e: return (None, f\\"Error: {str(e)}\\")"},{"question":"Write a function in Python that takes as input a list of strings and returns the first string that contains all the vowels (a, e, i, o, u) in order, and its index. If no such string exists, return an object with a value of -1 and a warning message in the console. The function should have a time complexity of O(n).","solution":"def find_string_with_all_vowels(strings): Finds the first string that contains all the vowels (a, e, i, o, u) in order. Args: strings (list): List of strings. Returns: tuple: A tuple containing the string and its index if found, otherwise (-1). vowels = \\"aeiou\\" for idx, s in enumerate(strings): vowel_index = 0 for char in s: if char == vowels[vowel_index]: vowel_index += 1 if vowel_index >= len(vowels): return (s, idx) if vowel_index == len(vowels): return (s, idx) print(\\"No string contains all vowels in order.\\") return -1"},{"question":"Given a list of floating point numbers, write a Python function to calculate the sum of only those numbers that are exactly divisible by 3, without using the inbuilt 'sum' function or any external libraries.","solution":"def sum_divisible_by_3(nums): Returns the sum of numbers in the list that are exactly divisible by 3. total = 0 for num in nums: if num % 3 == 0: total += num return total"},{"question":"Rewrite the following recursive function in an iterative form. Additionally, implement a check to validate the input n, ensuring it's a positive integer.","solution":"def iterative_factorial(n): Compute the factorial of a number using an iterative approach. Ensures the input is a positive integer. Parameters: n (int): The number for which factorial is to be calculated. Returns: int: Factorial of n. if not isinstance(n, int) or n < 1: raise ValueError(\\"Input must be a positive integer.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Given two lists of integers, write a Python function to return a list that contains the intersection of the two given lists. Avoid using built-in python set function and instead, implement your own logic to find the intersection. Your function should also take care of the order of elements in the resulting list as it should match the order in the first input list.","solution":"def list_intersection(list1, list2): Returns a list that contains the intersection of list1 and list2. The order of elements in the resulting list matches the order in list1. intersection = [] list2_elements = {} # Populate a dictionary with the count of each element in list2 for item in list2: if item in list2_elements: list2_elements[item] += 1 else: list2_elements[item] = 1 # Iterate through list1 and check for intersection with list2 for item in list1: if item in list2_elements and list2_elements[item] > 0: intersection.append(item) list2_elements[item] -= 1 return intersection"},{"question":"Create a Python function named \\"reverse_vowels\\" that takes a string as an argument and returns the string with its vowels reversed.","solution":"def reverse_vowels(s): Reverse the vowels in a given string. vowels = \\"aeiouAEIOU\\" s_list = list(s) i, j = 0, len(s) - 1 while i < j: if s_list[i] not in vowels: i += 1 continue if s_list[j] not in vowels: j -= 1 continue # Swap the vowels s_list[i], s_list[j] = s_list[j], s_list[i] i += 1 j -= 1 return ''.join(s_list)"},{"question":"Produce a code to implement a Binary Search Tree with following methods: insert, delete, search, and inorder traversal.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) def _insert(self, node, key): if key < node.val: if node.left is None: node.left = TreeNode(key) else: self._insert(node.left, key) else: if node.right is None: node.right = TreeNode(key) else: self._insert(node.right, key) def search(self, key): return self._search(self.root, key) def _search(self, node, key): if node is None or node.val == key: return node if key < node.val: return self._search(node.left, key) return self._search(node.right, key) def delete(self, key): self.root = self._delete(self.root, key) def _delete(self, root, key): if root is None: return root if key < root.val: root.left = self._delete(root.left, key) elif key > root.val: root.right = self._delete(root.right, key) else: if root.left is None: return root.right elif root.right is None: return root.left temp_val = self._min_value_node(root.right) root.val = temp_val.val root.right = self._delete(root.right, temp_val.val) return root def _min_value_node(self, node): current = node while current.left is not None: current = current.left return current def inorder(self): result = [] self._inorder(self.root, result) return result def _inorder(self, node, result): if node: self._inorder(node.left, result) result.append(node.val) self._inorder(node.right, result)"},{"question":"Build a code script that, when provided with two singly linked data structures, determines if they share common elements. Assume that the linked lists can be of arbitrary length and the elements within them are unique. Additionally, consider the time and space complexity of your solution to ensure efficiency.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def have_common_elements(list1, list2): Returns True if the two linked lists have at least one common element, False otherwise. elements_set = set() current = list1 while current: elements_set.add(current.value) current = current.next current = list2 while current: if current.value in elements_set: return True current = current.next return False"},{"question":"Create a function that applies a gated linear unit (GLU) activation function to the input data. The GLU function takes a weight matrix, an input vector, and a bias vector as inputs. The weight matrix should have a shape of (input_size, output_size), the input vector should have a shape of (input_size,), and the bias vector should have a shape of (output_size,). The function should return the result of applying the GLU activation function to the input data.","solution":"import numpy as np def glu(weight_matrix, input_vector, bias_vector): Applies the Gated Linear Unit (GLU) activation function to the input data. Parameters: weight_matrix (numpy.ndarray): Weight matrix of shape (input_size, output_size). input_vector (numpy.ndarray): Input vector of shape (input_size,). bias_vector (numpy.ndarray): Bias vector of shape (output_size,). Returns: numpy.ndarray: Result after applying the GLU activation function. input_size, output_size = weight_matrix.shape assert input_vector.shape == (input_size,), \\"Input vector shape mismatch\\" assert bias_vector.shape == (output_size,), \\"Bias vector shape mismatch\\" # Linear transformation linear_transform = np.dot(input_vector, weight_matrix) + bias_vector # Splitting the linear transformation into two parts linear_transform_u, linear_transform_v = np.split(linear_transform, 2) # Applying GLU activation function glu_output = linear_transform_u * sigmoid(linear_transform_v) return glu_output def sigmoid(x): Sigmoid activation function. Parameters: x (numpy.ndarray): Input array. Returns: numpy.ndarray: Sigmoid of the input. return 1 / (1 + np.exp(-x))"},{"question":"Given two strings, determine if they are anagrams. An anagram is a word or phrase formed by rearranging the letters of another word or phrase. For example, the strings \\"listen\\" and \\"silent\\" are anagrams. Implement a function that takes in two strings and returns True if they are anagrams and False otherwise. Your function should be case-insensitive, ignore whitespace, and handle unicode characters.","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams, ignoring case and whitespace. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. import unicodedata def normalize_string(s): # Normalize the string to 'NFD' form s = unicodedata.normalize('NFD', s) # Convert to lower case s = s.lower() # Remove all non-alphanumeric characters s = ''.join(char for char in s if char.isalnum()) return s normalized_str1 = normalize_string(str1) normalized_str2 = normalize_string(str2) # Compare sorted versions of the normalized strings return sorted(normalized_str1) == sorted(normalized_str2)"},{"question":"Generate random password containing 8 characters with a guaranteed minimum of 1 Capital letter, 1 Number and 1 special character.","solution":"import random import string def generate_password(): Generates a random password containing 8 characters with at least one uppercase letter, one number, and one special character. # Define the character sets uppercase_letters = string.ascii_uppercase digits = string.digits special_characters = string.punctuation all_characters = string.ascii_letters + digits + special_characters # Ensure the password contains at least one character from each required set password = [ random.choice(uppercase_letters), random.choice(digits), random.choice(special_characters) ] # Fill the remaining characters to reach the desired length while len(password) < 8: password.append(random.choice(all_characters)) # Shuffle the resulting list to ensure randomness random.shuffle(password) return ''.join(password)"},{"question":"Verify the correctness of the following Python program. It should return 'yes' if an array contains an odd number of elements and 'no' if it does not. For an empty array, it should return 'no'. Implement a function \`check_odd_length\` that takes an array as input without using built-in Python functions to determine the length of the array.","solution":"def check_odd_length(arr): Returns 'yes' if the array has an odd length, otherwise returns 'no'. count = 0 for _ in arr: count += 1 if count % 2 == 1: return 'yes' else: return 'no'"},{"question":"I'm learning Python, and I recently watched a video on YouTube where the code was using a function without the 'def' keyword in front of it. Could you explain how this is possible? The function seemed to work perfectly fine, which is confusing since we're always taught to define a function with 'def'.","solution":"# Function defined using def def add_using_def(a, b): Returns the sum of a and b. return a + b # Function defined using lambda add_using_lambda = lambda a, b: a + b"},{"question":"Create a method to filter out odd numbers from an array, but now also filter out any number that is divisible by 3. Additionally, the resulting array should only include numbers that are greater than or equal to 5. The resulting array should be sorted in ascending order and should not contain any duplicate numbers. The method should have a time complexity of O(n) and a space complexity of O(1).","solution":"def filter_numbers(arr): Filters out odd numbers, numbers divisible by 3, and numbers less than 5. Returns the sorted list with unique numbers which are even, not divisible by 3, and >= 5. result = set() # Using a set to avoid duplicates for num in arr: if num >= 5 and num % 2 == 0 and num % 3 != 0: result.add(num) return sorted(result) # Sort the result before returning"},{"question":"Given an array with n elements, where items are randomly placed integers. Find the longest strictly increasing subsequence using dynamic programming in Python. In addition to this, your solution should be able to return the actual subsequence, not just the length. Avoid using inbuilt or any external libraries/ functions designed specifically for this task.","solution":"def longest_increasing_subsequence(arr): Returns the longest strictly increasing subsequence. if not arr: return [] n = len(arr) dp = [1] * n prev = [-1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev[i] = j max_len = max(dp) max_index = dp.index(max_len) lis = [] while max_index != -1: lis.append(arr[max_index]) max_index = prev[max_index] return lis[::-1]"},{"question":"Write a Python function to find the maximum profit of a given stock prices array. The function should also determine the buy and sell days to achieve this maximum profit. Additionally, include a condition to check if no profit is possible. Given an array of stock prices, the task is to find the maximum profit that can be made by buying and selling at most once. If no profit is possible, return 0 and indicate that no transaction should be made.","solution":"def max_profit(prices): This function finds the maximum profit that can be made by buying and selling a stock at most once. It also returns the buy day and sell day for that maximum profit. If no profit is possible, it returns 0 and (-1, -1) indicating no transaction. :param prices: List of stock prices :return: A tuple containing maximum profit and another tuple with buy day and sell day n = len(prices) if n < 2: return 0, (-1, -1) min_price = prices[0] min_day = 0 max_profit = 0 buy_day, sell_day = -1, -1 for i in range(1, n): if prices[i] < min_price: min_price = prices[i] min_day = i profit = prices[i] - min_price if profit > max_profit: max_profit = profit buy_day = min_day sell_day = i if max_profit == 0: return 0, (-1, -1) return max_profit, (buy_day, sell_day)"},{"question":"Create a function to find all the positions of a substring in a string, without using built-in functions or external libraries. Also, create a benchmark function to compare its efficiency against the built-in function method.","solution":"def find_substring_positions(string, substring): Returns a list of start indices of the substring in the string. positions = [] sub_len = len(substring) str_len = len(string) for i in range(str_len - sub_len + 1): if string[i:i + sub_len] == substring: positions.append(i) return positions def find_substring_positions_builtin(string, substring): Returns a list of start indices of the substring in the string using built-in find function. positions = [] index = string.find(substring) while index != -1: positions.append(index) index = string.find(substring, index + 1) return positions"},{"question":"Suggest a way to check for balanced parentheses in a given string using Python, but also account for different types of brackets like curly \`{}\`, or square \`[]\` brackets, ensuring that all types of brackets are properly matched and balanced. You can't use any built-in or library function to directly achieve this, only basic programming constructs and data structures.","solution":"def is_balanced(s): Checks if a given string has balanced parentheses, curly brackets, and square brackets. Arguments: s -- the string to be checked Returns: True if the string is balanced, False otherwise stack = [] # Dictionary to hold matching pairs match = {')': '(', '}': '{', ']': '['} # Set of opening brackets opening = set(match.values()) for char in s: if char in opening: stack.append(char) elif char in match: if not stack or stack[-1] != match[char]: return False stack.pop() return not stack"},{"question":"Write a Python program that creates a dictionary of N key-value pairs, where the key is a tuple (i, j) and the value is the sum of the elements in the tuple. The keys should be all possible combinations of integers from 0 to N-1 for both i and j. The program should ensure that the sum of i and j is less than or equal to N-1.","solution":"def create_sum_dictionary(N): Create a dictionary of N key-value pairs where each key is a tuple (i, j) and the value is the sum of the elements in the tuple, with constraint that sum is less than or equal to N-1. :param N: Integer, range limit for i and j (0 to N-1) :return: Dictionary with keys as tuples of (i, j) and values as sum of i and j sum_dict = {} for i in range(N): for j in range(N): if i + j <= N - 1: sum_dict[(i, j)] = i + j return sum_dict"},{"question":"Write a python program to print a binary tree in level order using queue.","solution":"from collections import deque class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def level_order_traversal(root): if not root: return [] result = [] queue = deque([root]) while queue: current_level_size = len(queue) current_level_values = [] for _ in range(current_level_size): node = queue.popleft() current_level_values.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(current_level_values) return result"},{"question":"hello, can you help me with a hello world server in python using flask? I'd like to have an html form that allows the user to upload a file (will be just text) to the server, which is then returned with additional text prepended and appended to it when returned to the user. You can assume the server has appropriate access to the filesystem to write the file.","solution":"from flask import Flask, request, render_template_string app = Flask(__name__) @app.route('/') def home(): return render_template_string( <title>File Upload</title> <h1>Upload a File</h1> <form method=\\"POST\\" action=\\"/upload\\" enctype=\\"multipart/form-data\\"> <input type=\\"file\\" name=\\"file\\"/> <input type=\\"submit\\"/> </form> ) @app.route('/upload', methods=['POST']) def upload_file(): if 'file' not in request.files: return \\"No file part\\" file = request.files['file'] if file.filename == '': return \\"No selected file\\" if file: content = file.read().decode('utf-8') modified_content = f\\"Prepended text.nn{content}nnAppended text.\\" return modified_content if __name__ == '__main__': app.run(debug=True)"},{"question":"Given the following piece of erroneous Python code, identify and correct the mistakes in order to create a function that replicates the performance of a 'reduce' function. The function should accumulate the output of a division operation on a list of numbers. The list will include only non-zero integers.","solution":"def reduce_division(numbers): Performs a cumulative division operation on a list of numbers. Equivalent to reducing the list with a division operator. if not numbers: raise ValueError(\\"The list is empty, cannot perform reduction.\\") result = numbers[0] for number in numbers[1:]: result /= number return result"},{"question":"Offer a completion for the subsequent Python code snippet aiming at showcasing the elements of a list that incorporates string data types.","solution":"def filter_strings(lst): Returns a list containing only the string elements from the input list. Parameters: lst (list): The list to filter. Returns: list: List containing only string elements from the input list. return [item for item in lst if isinstance(item, str)]"},{"question":"Given two strings, \\"Text1\\" and \\"Text2\\", write a function to check if \\"Text2\\" is a rotation of \\"Text1\\". Additionally, determine the minimum number of letter rotations needed to convert \\"Text1\\" to \\"Text2\\", returning -1 if it is not possible.","solution":"def check_rotation(Text1, Text2): To check if Text2 is a rotation of Text1 and to find the minimum number of rotations needed. :param Text1: A string :param Text2: A string :return: An integer representing the minimum number of rotations needed, or -1 if Text2 is not a rotation of Text1. if len(Text1) != len(Text2): return -1 concatenated = Text1 + Text1 if Text2 in concatenated: return concatenated.find(Text2) return -1"},{"question":"Devise a function that receives an array of unambiguous strings and metamorphoses each distinct string into its equivalent lowercase counterpart. However, the function should also include an exception handling feature that will return an error message if the array includes anything other than string datatypes.","solution":"def lowercase_strings(array): Transforms each distinct string in the array into its lowercase counterpart. Returns an error message if the array includes any non-string types. try: # Check that all elements in array are strings if not all(isinstance(item, str) for item in array): raise ValueError(\\"All elements in the array must be strings.\\") # Convert each string in the array to lowercase return [item.lower() for item in array] except Exception as e: return str(e)"},{"question":"Please write a function in Python to generate a list containing the sum of corresponding elements given two lists. However, the function should also handle cases where the lengths of the two input lists are not equal. In such cases, the function should continue adding the remaining elements from the longer list to the result. Additionally, the function should ignore any non-numeric elements in both lists.","solution":"def sum_corresponding_elements(list1, list2): Returns a list containing the sum of corresponding elements from list1 and list2. If the lists have different lengths, the remaining elements from the longer list are added to the result. Non-numeric elements are ignored. result = [] length1, length2 = len(list1), len(list2) max_length = max(length1, length2) for i in range(max_length): elem1 = list1[i] if i < length1 and isinstance(list1[i], (int, float)) else 0 elem2 = list2[i] if i < length2 and isinstance(list2[i], (int, float)) else 0 result.append(elem1 + elem2) return result"},{"question":"Design a classifier using PyTorch for distinguishing between cat and dog images.","solution":"import torch import torch.nn as nn import torch.nn.functional as F class CatDogClassifier(nn.Module): def __init__(self): super(CatDogClassifier, self).__init__() self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1) # first convolutional layer self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1) # second convolutional layer self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1) # third convolutional layer self.pool = nn.MaxPool2d(2, 2) # max pooling layer self.fc1 = nn.Linear(128 * 8 * 8, 512) # fully connected layer 1 self.fc2 = nn.Linear(512, 2) # fully connected layer 2 def forward(self, x): x = self.pool(F.relu(self.conv1(x))) # first conv layer with relu and pooling x = self.pool(F.relu(self.conv2(x))) # second conv layer with relu and pooling x = self.pool(F.relu(self.conv3(x))) # third conv layer with relu and pooling x = x.view(-1, 128 * 8 * 8) # flatten the tensor x = F.relu(self.fc1(x)) # first fully connected layer with relu x = self.fc2(x) # second fully connected layer return x"},{"question":"Devise a generator function instead of a generator expression that will iterate through a pre-defined sequence of numerical entities, executing the squaring operation. Moreover, to increase the complexity handle exceptions for non-numeric entities within this sequence. As a bonus, implement a feature that enables the generator to either execute the squaring operation or cube operation based on a given parameter.","solution":"def generate_powers(sequence, power='square'): A generator that iterates through a given sequence and computes the square or cube of each numerical entity. Non-numerical entities are skipped. Args: sequence (iterable): A predefined sequence of elements to iterate through. power (str): Either 'square' to square the numbers or 'cube' to cube the numbers. Default is 'square'. Yields: int: The square or cube of each numerical entity in the sequence. for item in sequence: try: num = float(item) # Convert to float to handle numeric strings if power == 'square': yield num ** 2 elif power == 'cube': yield num ** 3 else: raise ValueError(\\"Invalid power parameter. Must be 'square' or 'cube'.\\") except (ValueError, TypeError): continue # Skip non-numeric entities"},{"question":"Given a list 'a=' containing elements [1, 2, 3, 4, 5], write a python function to create a new list 'b=' which is a reverse of 'a='. Also, instead of using built-in functions for reversing the list, use loops to achieve this. After reversing, sort the list using any of the sorting algorithms (loops only, no use of built-in function for sorting). You should also incorporate error checking to ensure that the input is a list and that all its elements are integers.","solution":"def reverse_and_sort_list(a): Reverses the given list 'a' and sorts it. Preconditions: - 'a' should be a list. - All elements in 'a' should be integers. if not isinstance(a, list): raise TypeError(\\"Input must be a list.\\") for x in a: if not isinstance(x, int): raise ValueError(\\"All elements in the list must be integers.\\") # Reverse the list using a loop b = [] for i in range(len(a)-1, -1, -1): b.append(a[i]) # Sort the list using bubble sort n = len(b) for i in range(n): for j in range(0, n-i-1): if b[j] > b[j+1]: b[j], b[j+1] = b[j+1], b[j] return b"},{"question":"Write a python function that takes in two arguments, a list of integers and a target integer. The function should return the number of times the target integer appears in the list.","solution":"def count_occurrences(lst, target): Returns the number of times the target integer appears in the list. Parameters: lst (list): List of integers target (int): Target integer to count in the list Returns: int: Number of times the target integer appears in the list return lst.count(target)"},{"question":"Write a Python script to take two lists and output the common elements of the given lists. The script should also handle the case where one or both of the input lists are empty. Additionally, the script should only output unique common elements, even if they occur multiple times in the input lists.","solution":"def find_common_elements(list1, list2): Returns a list of unique common elements between list1 and list2. return list(set(list1) & set(list2))"},{"question":"Write a Python function that takes an array of integers as input and returns the first missing positive integer that does not appear in the array. If all positive integers up to the maximum number in the array are present, return the next integer after the maximum.","solution":"def first_missing_positive(nums): Returns the first missing positive integer that does not appear in the array nums. nums = set(nums) i = 1 while i in nums: i += 1 return i"},{"question":"Create a python script that counts the number of vowels in a sentence provided by the user.","solution":"def count_vowels(sentence): Counts the number of vowels in a given sentence. Parameters: sentence (str): The sentence in which to count vowels. Returns: int: The number of vowels in the sentence. vowels = 'aeiouAEIOU' return sum(1 for char in sentence if char in vowels)"},{"question":"Create a code to input a sentence and output the number of vowels in the sentence. Additionally, you should also output the frequency of each vowel present in the sentence, including both lowercase and uppercase vowels. The code should have a time complexity of O(n), where n is the length of the sentence, and a space complexity of O(1).","solution":"def count_vowels(sentence): Count the number of vowels and the frequency of each vowel in a given sentence. Args: sentence (str): The sentence to analyze. Returns: total_count (int): Total number of vowels in the sentence. frequency (dict): A dictionary with the frequency of each vowel. vowels = \\"aeiouAEIOU\\" frequency = {v: 0 for v in vowels} total_count = 0 for char in sentence: if char in vowels: frequency[char] += 1 total_count += 1 return total_count, frequency"},{"question":"Create a class in Python that implements an algorithm for sorting a list of numbers. The algorithm should sort the list in ascending order.","solution":"class Sorter: A class that implements an algorithm for sorting a list of numbers in ascending order. @staticmethod def sort(numbers): Sorts a list of numbers in ascending order using the bubble sort algorithm. :param numbers: List of integers or floats. :return: List of sorted numbers. n = len(numbers) for i in range(n): for j in range(0, n-i-1): if numbers[j] > numbers[j+1]: numbers[j], numbers[j+1] = numbers[j+1], numbers[j] return numbers"},{"question":"Write a Python code snippet to check if an integer is both prime and between 5 and 10 (including both). The code should handle incorrect input types gracefully and return an error message for invalid inputs.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def is_prime_between_5_and_10(n): Checks if an integer is both prime and between 5 and 10 (inclusive). Returns: True if the number is prime and within the range False if the number is within the range but not prime Error message for invalid inputs if not isinstance(n, int): return \\"Error: Input is not an integer.\\" if n < 5 or n > 10: return False return is_prime(n)"},{"question":"Please implement a function \`is_substr\` that takes in two strings \`str1\` and \`str2\` as parameters and returns a boolean value indicating whether \`str1\` is a substring of \`str2\` or not.","solution":"def is_substr(str1, str2): Checks if str1 is a substring of str2. return str1 in str2"},{"question":"Write a Python code to find the second smallest number in a list without using built-in functions or \`min()\` or \`sorted()\`. Also, include handling for duplicate numbers.","solution":"def find_second_smallest(numbers): Returns the second smallest number in the list. If the list has less than two distinct numbers, raises a ValueError. if len(numbers) < 2: raise ValueError(\\"At least two numbers are required\\") first = second = float('inf') for number in numbers: if number < first: first, second = number, first elif first < number < second: second = number if second == float('inf'): raise ValueError(\\"No second smallest element found\\") return second"},{"question":"Write a python function to convert binary to decimal using recursion. You also need to handle error checking, in the case the input is not a proper binary string.","solution":"def binary_to_decimal(binary_string): Converts a binary string to its decimal equivalent using recursion. Parameters: binary_string (str): The binary string to convert. Returns: int: Decimal equivalent of the binary string. Raises: ValueError: If the input is not a valid binary string. # Error checking to ensure the provided string is a valid binary string. if not all(char in '01' for char in binary_string): raise ValueError(\\"Input is not a valid binary string.\\") def helper(bin_str): if not bin_str: return 0 return int(bin_str[0]) * (2 ** (len(bin_str) - 1)) + helper(bin_str[1:]) return helper(binary_string)"},{"question":"Write a function in Python that returns the sum of all even numbers from a given list of integers. The function should also handle negative numbers and ensure the list is not modified.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers from a given list of integers. The function handles negative numbers and ensures the list is not modified. return sum(num for num in numbers if num % 2 == 0)"},{"question":"Write a function that converts a python object into a JSON string, but without using any built-in json libraries or modules. Your function should handle the following python object types: dict, list, tuple, str, int, float, and boolean. Additionally, your function should handle nested structures of these object types.","solution":"def to_json(obj): Converts a Python object to a JSON string representation. Supported types: dict, list, tuple, str, int, float, boolean, and None. if isinstance(obj, str): return f'\\"{obj}\\"' elif isinstance(obj, bool): return \\"true\\" if obj else \\"false\\" elif obj is None: return \\"null\\" elif isinstance(obj, (int, float)): return str(obj) elif isinstance(obj, list) or isinstance(obj, tuple): items = [to_json(item) for item in obj] return f'[{\\", \\".join(items)}]' elif isinstance(obj, dict): items = [f'{to_json(key)}: {to_json(value)}' for key, value in obj.items()] return f'{{{\\", \\".join(items)}}}' else: raise TypeError(f\\"Type {type(obj)} not supported\\")"},{"question":"Write a python script to create a dictionary containing the counts of each character in a given string.","solution":"def character_count(s): Returns a dictionary containing the counts of each character in the given string. Parameters: s (str): The input string. Returns: dict: A dictionary with characters as keys and their counts as values. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Design a Python function that fabricates the initial 10 values of the Fibonacci series, while computing the time complexity of this function using Big O notation.","solution":"def fibonacci(n): Returns the first n values of the Fibonacci series. if n <= 0: return [] elif n == 1: return [0] else: fib_series = [0, 1] for i in range(2, n): fib_series.append(fib_series[-1] + fib_series[-2]) return fib_series # Time complexity of this function is O(n) because we are using a loop that runs n-2 times."},{"question":"Create a program to detect if a string contains only unique characters.","solution":"def has_unique_characters(s): Returns True if the string s contains only unique characters, False otherwise. return len(s) == len(set(s))"},{"question":"Create a function called \\"creatureFeature\\" that takes in two arguments, \\"numOfLegs\\" (an integer) and \\"hasTail\\" (a boolean). The function should return a string that describes the creature based on the number of legs and the presence of a tail.","solution":"def creatureFeature(numOfLegs, hasTail): Returns a description of a creature based on the number of legs and whether it has a tail. if numOfLegs == 0: return \\"A legless creature\\" + (\\" with a tail.\\" if hasTail else \\" without a tail.\\") elif numOfLegs == 2: return \\"A bipedal creature\\" + (\\" with a tail.\\" if hasTail else \\" without a tail.\\") elif numOfLegs == 4: return \\"A quadrupedal creature\\" + (\\" with a tail.\\" if hasTail else \\" without a tail.\\") else: return f\\"A creature with {numOfLegs} legs\\" + (\\" and a tail.\\" if hasTail else \\" without a tail.\\")"},{"question":"Write a Python script that identifies and prints the first 10 prime numbers between 1 and 1000 that are also palindromes. Factor in efficiency and ensure your code is optimized for speed.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def is_palindrome(n): Check if a number is a palindrome. return str(n) == str(n)[::-1] def first_10_palindromic_primes_in_range(start, end): Find the first 10 palindromic prime numbers in a given range. palindromic_primes = [] for num in range(start, end): if is_prime(num) and is_palindrome(num): palindromic_primes.append(num) if len(palindromic_primes) == 10: break return palindromic_primes # Output the first 10 palindromic primes between 1 and 1000 result = first_10_palindromic_primes_in_range(1, 1000) print(result)"},{"question":"Write a code to reverse each character of each element in a list of strings without using any built-in string reverse function.","solution":"def reverse_each_word_in_list(str_list): Reverse each character of each element in a list of strings. Parameters: str_list (list): A list of strings. Returns: list: A list of strings with each character in each element reversed. def reverse_string(s): reversed_chars = [] for char in s: reversed_chars.insert(0, char) return ''.join(reversed_chars) return [reverse_string(word) for word in str_list]"},{"question":"Write a Python code that detects if a given character is uppercase, lowercase, or something else. The code should handle multiple characters and return the frequency of each type of character (uppercase, lowercase, and other) in the given string.","solution":"def character_frequency(s): Returns a dictionary with the frequency of uppercase, lowercase, and other characters. frequency = { \\"uppercase\\": 0, \\"lowercase\\": 0, \\"other\\": 0 } for char in s: if char.isupper(): frequency['uppercase'] += 1 elif char.islower(): frequency['lowercase'] += 1 else: frequency['other'] += 1 return frequency"},{"question":"Generate a Python dictionary containing the squares of the numbers from 1 to n, where n is a positive integer less than or equal to 50. Each square value in the dictionary should be unique and the keys should be in ascending order. Additionally, the algorithm should have a time complexity of O(n) and a space complexity of O(n).","solution":"def generate_squares(n): Generate a dictionary where the keys are the integers from 1 to n (inclusive) and the values are the squares of the keys. n must be a positive integer less than or equal to 50. The dictionary keys are in ascending order. :param int n: The upper limit of the range of keys (must be 1 <= n <= 50) :return: Dictionary containing the squares of the numbers from 1 to n :rtype: dict if not (1 <= n <= 50): raise ValueError(\\"n must be a positive integer between 1 and 50, inclusive.\\") return {i: i * i for i in range(1, n + 1)}"},{"question":"Write a Python function that takes a string as input and determines if the string is a palindrome. A palindrome is a sequence of characters that reads the same backward as forward, such as \\"madam\\" or \\"racecar\\".","solution":"def is_palindrome(s): Checks if the input string s is a palindrome. Parameters: s (str): The input string. Returns: bool: True if s is a palindrome, False otherwise. # Normalize the string by converting it to lower case and removing all non-alphanumeric characters normalized_s = ''.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string reads the same backward and forward return normalized_s == normalized_s[::-1]"},{"question":"Write a Python program using TensorFlow or PyTorch to create a custom Loss function for a binary classification problem. Also, implement a model to train on a given dataset using this custom loss function. Remember to include the handling of gradient computations and parameter updates.","solution":"import torch import torch.nn as nn import torch.optim as optim class CustomBinaryCrossEntropyLoss(nn.Module): def __init__(self): super(CustomBinaryCrossEntropyLoss, self).__init__() def forward(self, outputs, targets): outputs = torch.clamp(outputs, min=1e-7, max=1-1e-7) loss = - (targets * torch.log(outputs) + (1 - targets) * torch.log(1 - outputs)) return torch.mean(loss) class SimpleBinaryClassificationModel(nn.Module): def __init__(self): super(SimpleBinaryClassificationModel, self).__init__() self.fc1 = nn.Linear(10, 1) # Example input size of 10 for the sake of example def forward(self, x): x = torch.sigmoid(self.fc1(x)) return x # Sample dataset (Features and Labels) torch.manual_seed(42) features = torch.randn(100, 10) labels = (torch.rand(100) > 0.5).float().unsqueeze(1) # Model, Optimizer, and Custom Loss Function Initialization model = SimpleBinaryClassificationModel() optimizer = optim.SGD(model.parameters(), lr=0.01) custom_loss_fn = CustomBinaryCrossEntropyLoss() # Training Loop num_epochs = 100 for epoch in range(num_epochs): optimizer.zero_grad() outputs = model(features) loss = custom_loss_fn(outputs, labels) loss.backward() optimizer.step() if (epoch+1) % 10 == 0: print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')"},{"question":"Given an input string, reverse the string without using any built-in string reversal functions or methods, and without using any loops or recursion. Additionally, you are not allowed to use any temporary variables or strings.","solution":"def reverse_string(s): Reverses the input string s without using any built-in string reversal functions or methods. This function uses slicing to reverse the string. return s[::-1]"},{"question":"How can I generate a random 4 letter string using Python?","solution":"import random import string def generate_random_string(length=4): Generates a random string of letters with the specified length. :param length: The length of the random string to generate, default is 4. :return: A random string of letters. letters = string.ascii_letters # Include both lowercase and uppercase letters return ''.join(random.choice(letters) for i in range(length)) # Example Usage: # random_string = generate_random_string() # print(random_string)"},{"question":"Write a code that can generate a list of random prime numbers between 1000 to 2000, with the constraint that each number in the list should be unique.","solution":"import random from sympy import isprime def generate_unique_prime_list(): primes = [] while len(primes) < 100: num = random.randint(1000, 2000) if isprime(num) and num not in primes: primes.append(num) return primes"},{"question":"One classic example of an iterative process is the calculation of the factorial of a number. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. For example, the factorial of 5 is 5*4*3*2*1, which equals 120. Implement a Python function called calc_factorial that takes a positive integer as input and returns its factorial using iteration.","solution":"def calc_factorial(n): Returns the factorial of a non-negative integer n using iteration. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Given a non-empty linked list, write a function to find the middle node of that linked list. If the length of the list is even, return the second middle node.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def middle_node(head): Returns the middle node of the linked list. If the length of the list is even, returns the second middle node. :param head: ListNode :return: ListNode slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow"},{"question":"Write a script in Python to delete all the empty folders in the given directory.","solution":"import os def delete_empty_folders(directory): Deletes all empty folders in the given directory. Parameters: directory (str): The path of the directory to remove empty folders from. Returns: int: The number of empty folders deleted. empty_folder_count = 0 for root, dirs, files in os.walk(directory, topdown=False): for dir in dirs: dir_path = os.path.join(root, dir) # Check if the directory is empty if len(os.listdir(dir_path)) == 0: os.rmdir(dir_path) empty_folder_count += 1 return empty_folder_count"},{"question":"In the Python programming language, implement a function to accurately compute the surface area of an isolated, circular, flat lake with a predefined radius.","solution":"import math def compute_surface_area(radius): Computes the surface area of a circular lake given its radius. Parameters: - radius (float): The radius of the circular lake. Returns: - float: The surface area of the lake. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * (radius ** 2)"},{"question":"Write a program in Python to generate a random matrix with an input size of m x n, where each element is a random integer between 0 and 99. The program should also ensure that the sum of the elements in each row and each column of the matrix is greater than a specified threshold value, which is a positive integer provided by the user. The program should have a time complexity of O(m*n) and a space complexity of O(m*n).","solution":"import random def generate_random_matrix_with_threshold(m, n, threshold): Generates an m x n matrix with random integers between 0 and 99. Ensures the sum of the elements in each row and column is greater than the specified threshold. Parameters: - m: Number of rows - n: Number of columns - threshold: The threshold value which the sum of elements in each row and column must exceed Returns: - matrix: Generated matrix satisfying the conditions if m <= 0 or n <= 0 or threshold <= 0: raise ValueError(\\"m, n, and threshold must be positive integers.\\") matrix = [[random.randint(0, 99) for _ in range(n)] for _ in range(m)] for i in range(m): while sum(matrix[i]) <= threshold: for j in range(n): matrix[i][j] = random.randint(0, 99) for j in range(n): while sum(matrix[i][j] for i in range(m)) <= threshold: for i in range(m): matrix[i][j] = random.randint(0, 99) return matrix"},{"question":"Formulate a function in Python which carries out the operation of extracting the middle element from an array that has an odd number of items. For instance, consider an array: [2, 4, 6, 8, 5].","solution":"def extract_middle_element(arr): Returns the middle element of an odd-length array. Parameters: arr (list): A list with an odd number of elements. Returns: Middle element of the array. if len(arr) % 2 == 0: raise ValueError(\\"Array length must be odd.\\") middle_index = len(arr) // 2 return arr[middle_index]"},{"question":"Write a code to find the square of the first n numbers, where n is a positive integer. The code should also calculate the sum of the squares and return both the sum and the list of squares.","solution":"def squares_and_sum(n): Returns a tuple containing the list of the squares of the first n numbers and the sum of those squares. squares = [i ** 2 for i in range(1, n + 1)] sum_of_squares = sum(squares) return (sum_of_squares, squares)"},{"question":"Create a program that can generate a sequence of prime numbers between 10,000 and 20,000 using the Sieve of Eratosthenes algorithm. The program should be able to handle larger numerical ranges with optimized performance, taking into account memory and processing limitations. Additionally, the program should provide the user with the option to input their desired numerical range for generating prime numbers. Finally, the program should output the results in a formatted table that includes the prime numbers and their corresponding values.","solution":"def sieve_of_eratosthenes(start, end): Generates a list of prime numbers in the given range [start, end] using the Sieve of Eratosthenes algorithm. if end < 2: return [] sieve = [True] * (end + 1) p = 2 while (p * p <= end): if sieve[p]: for i in range(p * p, end + 1, p): sieve[i] = False p += 1 primes = [] for p in range(max(start, 2), end + 1): if sieve[p]: primes.append(p) return primes def format_prime_table(primes): Formats the list of primes into a table-like string. result = \\"Prime Numbersn\\" result += \\"=============n\\" for prime in primes: result += f\\"{prime}n\\" return result # Example usage within the default range default_start = 10000 default_end = 20000 def generate_and_print_primes(start=default_start, end=default_end): primes = sieve_of_eratosthenes(start, end) formatted_table = format_prime_table(primes) print(formatted_table)"},{"question":"I have a 2D numpy array. I need to write a python function that takes this array and flips it horizontally. How can I achieve this?","solution":"import numpy as np def flip_horizontal(arr): Flips a 2D numpy array horizontally. Parameters: arr (numpy.ndarray): 2D numpy array to be flipped. Returns: numpy.ndarray: The horizontally flipped 2D numpy array. return np.fliplr(arr)"},{"question":"Write a Python program to sort the values of a dictionary by its keys in alphabetical order.","solution":"def sort_dict_by_keys(d): Returns a dictionary sorted by its keys in alphabetical order. return dict(sorted(d.items()))"},{"question":"Write a program code that takes an input string, then concatenates the numbers and characters from it. The program should separate digits [0-9] and alphabetic characters [a-zA-Z] into two separate strings. Here is an example: if the input is \\"Hello123\\", the output must be \\"123Hello\\".","solution":"def concatenate_numbers_and_characters(s): Takes an input string s and concatenates the numbers and characters from it separately. First the numbers follow the characters. Parameters: s (str): The input string containing characters and numbers. Returns: str: A concatenation of digits first followed by characters. digits = ''.join(c for c in s if c.isdigit()) characters = ''.join(c for c in s if c.isalpha()) return digits + characters"},{"question":"Given a list of words, create a function that returns the index of the last occurrence of the word that contains a specific substring. The function should use bitwise operators to achieve a time complexity of O(n) and should not rely on any built-in string operations or library functions for searching or manipulating strings. Additionally, the function should handle cases where multiple words contain the specified substring by returning the index of the last occurrence among them.","solution":"def last_occurrence_index(words, substring): Returns the index of the last occurrence of a word containing the specified substring. Parameters: words (list of str): List of words to search in. substring (str): Substring to look for within the words. Returns: int: Index of the last occurrence of a word containing the substring, or -1 if not found. def contains_substring(word, substring): Returns whether the word contains the substring. Parameters: word (str): Word to search in. substring (str): Substring to look for within the word. Returns: bool: True if the word contains the substring, False otherwise. # Lengths of word and substring len_word = len(word) len_substring = len(substring) # Iterate over the word for i in range(len_word - len_substring + 1): # Check each substring in word match = True for j in range(len_substring): # Compare characters if word[i + j] != substring[j]: match = False break if match: return True return False last_index = -1 # Iterate over the words to find the last occurrence for index, word in enumerate(words[::-1]): if contains_substring(word, substring): last_index = len(words) - 1 - index break return last_index"},{"question":"Write a function in Python that takes a string and a set of characters as inputs and removes all characters in the string that are in the set.","solution":"def remove_characters(s, charset): Removes all characters in the set \`charset\` from the string \`s\`. :param s: The input string from which characters will be removed. :param charset: A set of characters to be removed from the string \`s\`. :return: A new string with the characters from \`charset\` removed. return ''.join(c for c in s if c not in charset)"},{"question":"Generate a random letter from the string provided without using any built-in random functions or libraries. The string must contain at least 100 characters. The time complexity of your solution should be O(log n) and the space complexity should be O(1), where n is the length of the string. Additionally, the generated random letter should have a uniform distribution, meaning each character in the string has an equal probability of being selected.","solution":"def pseudo_random(seed): Generates a pseudo-random integer based on a seed using linear congruential generator algorithm. a = 1664525 c = 1013904223 m = 2 ** 32 return (a * seed + c) % m def get_random_index(num_chars, seed): Generates a pseudo-random index based on the number of characters and seed. max_val = 2 ** 32 - 1 random_value = pseudo_random(seed) return (random_value % num_chars) def get_random_letter(large_string, seed): Returns a random letter from the given string using a seed. index = get_random_index(len(large_string), seed) return large_string[index]"},{"question":"Given an array of integers, write a function that modifies the array in-place to sort it in ascending order using Bubble Sort algorithm. Your function should not return anything since it will be modifying the original array. For example, if the input array is [-4, 5, 8, 1, -4], your function should modify it to [-4, -4, 1, 5, 8].","solution":"def bubble_sort(arr): Sort the array in-place using Bubble Sort algorithm. n = len(arr) for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j]"},{"question":"How can I create a program that converts Roman numerals to decimal numbers using Python?","solution":"def roman_to_decimal(roman): Converts a Roman numeral to a decimal number. :param roman: A string representing the Roman numeral. :return: An integer representing the decimal value of the Roman numeral. roman_values = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 prev_value = 0 for char in reversed(roman.upper()): # Process from right to left value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Create a python function which finds the intersection of two lists and returns a list containing the common elements.","solution":"def intersection(list1, list2): Returns a list containing the common elements of list1 and list2. return list(set(list1) & set(list2))"},{"question":"Implement a recursive function to print the output of a given sequence. The sequence starts from 0 and increments by 1 until a provided number is reached. The number should be passed as an argument to the function. You also should be able to handle errors gracefully, such as the argument being a non-integer or a negative integer. For instance, if the argument is 6, your function should print the numbers 0 to 6. Test your function with multiple inputs to ensure its correctness.","solution":"def print_sequence(n): Prints the sequence from 0 to n, if n is a non-negative integer. Raises an error for negative integers or non-integer inputs. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") def recurse(i): if i > n: return print(i) recurse(i + 1) recurse(0)"},{"question":"Write a Python function that takes a list of strings as input and returns a dictionary with the strings as keys and their lengths as values. Additionally, the function should ignore any strings that contain numbers or special characters. The function should also handle cases where the input list contains duplicate strings by only including the first occurrence of each string in the dictionary.","solution":"import re def strings_to_dict(strings): Takes a list of strings and returns a dictionary with the strings as keys and their lengths as values. Ignores strings that contain numbers or special characters and handles duplicates by including only the first occurrence. result = {} for string in strings: if not re.search(r'[^a-zA-Z]', string) and string not in result: result[string] = len(string) return result"},{"question":"Design a Python function to count the number of characters in a string, excluding spaces and punctuation.","solution":"def count_characters(s): Returns the number of characters in a string, excluding spaces and punctuation. return sum(c.isalnum() for c in s)"},{"question":"Write a function in Python to print \\"Hello World!\\". The function should also take a parameter \`name\` and should print \\"Hello {name}!\\" if the \`name\` is not empty or None. Additionally, the function should only accept strings as the value for \`name\`, and should raise a TypeError if a non-string value is passed as the \`name\` parameter.","solution":"def greet(name=None): Prints \\"Hello World!\\" if name is None or an empty string. Otherwise, prints \\"Hello {name}!\\". Raises TypeError if name is not a string. if name is not None and not isinstance(name, str): raise TypeError(\\"Name must be a string\\") if name: print(f\\"Hello {name}!\\") else: print(\\"Hello World!\\")"},{"question":"Devise a coding test question asking for the creation of a binary search tree (BST) from a list of integers. Additionally, include a requirement for a function to verify the BST property.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def insert_into_bst(root, value): if root is None: return TreeNode(value) if value < root.value: root.left = insert_into_bst(root.left, value) else: root.right = insert_into_bst(root.right, value) return root def create_bst_from_list(values): root = None for value in values: root = insert_into_bst(root, value) return root def is_bst(node, min_value=float('-inf'), max_value=float('inf')): if node is None: return True if node.value <= min_value or node.value >= max_value: return False return is_bst(node.left, min_value, node.value) and is_bst(node.right, node.value, max_value)"},{"question":"How can I create a function in Python that checks if a given string is a palindrome without using any built-in reverse functions?","solution":"def is_palindrome(s): Check if the given string is a palindrome. A palindrome is a string that reads the same forward and backward. Args: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Converting string to lowercase to make the check case-insensitive s = s.lower() left = 0 right = len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True"},{"question":"Create an AWS Lambda function in Python to handle an HTTP POST request, process JSON data from the request body, and return a response. The function should also handle error cases gracefully. You are provided with a sample erroneous code to reference for identifying and fixing bugs.","solution":"import json def lambda_handler(event, context): AWS Lambda function to handle an HTTP POST request, process JSON data, and return a response. Args: event (dict): The event dict contains information from the invoking service. context (LambdaContext): The context object contains runtime information. Returns: dict: Contains the status code, headers, and processed JSON body. try: # Check if method is POST if event['httpMethod'] != 'POST': return { 'statusCode': 405, 'headers': {'Content-Type': 'application/json'}, 'body': json.dumps({'message': 'Method Not Allowed'}) } body = json.loads(event['body']) # Simulate process by echoing the received body back processed_data = { 'received_data': body } return { 'statusCode': 200, 'headers': {'Content-Type': 'application/json'}, 'body': json.dumps(processed_data) } except json.JSONDecodeError: return { 'statusCode': 400, 'headers': {'Content-Type': 'application/json'}, 'body': json.dumps({'message': 'Invalid JSON'}) } except Exception as e: return { 'statusCode': 500, 'headers': {'Content-Type': 'application/json'}, 'body': json.dumps({'message': 'Internal Server Error', 'error': str(e)}) }"},{"question":"Convert a decimal number to a binary representation using Python. The program should take user input for the decimal number and output the corresponding binary representation. Ensure that the program can handle decimal numbers up to 10^12 and that the output is in the correct binary format. Additionally, implement the conversion algorithm without using built-in functions or libraries for converting decimal to binary.","solution":"def decimal_to_binary(decimal_number): Converts a decimal number to its binary representation. if decimal_number == 0: return '0' is_negative = decimal_number < 0 decimal_number = abs(decimal_number) binary_representation = [] while decimal_number > 0: binary_representation.append(str(decimal_number % 2)) decimal_number = decimal_number // 2 if is_negative: return '-' + ''.join(binary_representation[::-1]) else: return ''.join(binary_representation[::-1])"},{"question":"Build a Python function that normalizes a given vector by calculating its norm and then scaling the vector so that its norm becomes 1. You should implement the function without using any external libraries, such as numpy. The function should handle both positive and negative values in the vector. Additionally, the vector will always have at least 3 elements.","solution":"import math def normalize_vector(vector): if len(vector) < 3: raise ValueError(\\"The vector must have at least 3 elements.\\") # Calculate the L2 norm of the vector norm = math.sqrt(sum(x**2 for x in vector)) # Normalize the vector by dividing each component by the norm normalized_vector = [x / norm for x in vector] return normalized_vector"},{"question":"Write a Python program that takes in a list of numbers as input. The program should find the first three elements in the list that are consecutive integers. Once found, it should replace the first of these three elements with the average of the three numbers, rounded to the nearest integer. If no three consecutive integers are found, the program should return the original list. Ensure the program is efficient and uses loops and conditionals effectively.","solution":"def replace_with_average(nums): Finds the first three consecutive integers in the list and replaces the first of these three elements with the average of the three numbers, rounded to the nearest integer. Parameters: nums (list): A list of integers. Returns: list: The modified list with the first of the three consecutive integers replaced with their average. for i in range(len(nums) - 2): if nums[i+1] == nums[i] + 1 and nums[i+2] == nums[i] + 2: average = round((nums[i] + nums[i+1] + nums[i+2]) / 3) return nums[:i] + [average] + nums[i+1:] return nums"},{"question":"Create a program that prints the vowels in a string. Additionally, your program should count the number of occurrences for each vowel, and display the results in a dictionary. The program should ignore case sensitivity and non-alphabet characters. If a vowel does not exist in the string, the program should return a message stating so. Input is a string and output is a dictionary or a message.","solution":"def find_vowels(s): Extracts and counts vowels in the input string. Parameters: s (str): input string Returns: dict: dictionary with vowel counts or a message if no vowels are found vowels = \\"aeiou\\" s = s.lower() vowel_count = {v: 0 for v in vowels} for char in s: if char in vowel_count: vowel_count[char] += 1 # Filtering out vowels with zero occurrences vowel_count = {k: v for k, v in vowel_count.items() if v > 0} if not vowel_count: return \\"No vowels found in the string.\\" return vowel_count"},{"question":"Generate a list of prime numbers up to 100 using Python. Additionally, improve the following erroneous piece of code that attempts to achieve the same task. Consider time and space complexity of your solution.","solution":"def generate_primes_up_to_100(): Generates a list of prime numbers up to 100 using the Sieve of Eratosthenes. limit = 100 sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit + 1, start): sieve[multiple] = False primes = [num for num in range(limit + 1) if sieve[num]] return primes"},{"question":"How do I reverse a list in Python using a recursive function?","solution":"def recursive_reverse(lst): Recursively reverses a list in Python. if len(lst) == 0: return [] else: return [lst[-1]] + recursive_reverse(lst[:-1])"},{"question":"Write a python function that gets as input a list and returns a new list that contains only the even numbers in the input list","solution":"def get_even_numbers(lst): Takes a list of integers and returns a new list containing only the even numbers from the input list. Args: lst (list): List of integers. Returns: list: A list containing only the even numbers from the input list. return [num for num in lst if num % 2 == 0]"},{"question":"Design a Python function snippet to Transform High Regular health check-ups: Monitoring Health Indicators for Analysis for Professionals. Implement if/else or switch/case statements to handle different conditions related to the Reliability. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def health_checkup_recommendation(age, bmi, blood_pressure, cholesterol, is_smoker, is_diabetic): Returns health check-up recommendations based on various health indicators. Parameters: age (int): Age of the individual. bmi (float): Body Mass Index of the individual. blood_pressure (int): Blood pressure measurement. cholesterol (int): Cholesterol level measurement. is_smoker (bool): Smoking habit status. is_diabetic (bool): Diabetic condition status. Returns: str: Recommendations for health check-ups. recommendations = [] # Age-based recommendations if age > 50: recommendations.append(\\"Annual comprehensive health check-up\\") elif age > 30: recommendations.append(\\"Health check-up every 2 years\\") else: recommendations.append(\\"Health check-up every 3 years\\") # BMI-based recommendations if bmi < 18.5 or bmi > 24.9: recommendations.append(\\"Nutritional and fitness consultation\\") # Blood pressure-based recommendations if blood_pressure > 130: recommendations.append(\\"Regular blood pressure monitoring\\") # Cholesterol-based recommendations if cholesterol > 200: recommendations.append(\\"Lipid profile test every 6 months\\") # Smoking habit recommendations if is_smoker: recommendations.append(\\"Smoking cessation programs\\") # Diabetic condition recommendations if is_diabetic: recommendations.append(\\"Regular blood sugar monitoring\\") return recommendations"},{"question":"Can you explain how the function merge_sort() works in the given Python code for sorting an array? Specifically, could you provide a detailed explanation of the base case of the recursion, how the input array is split and merged, and how the sorted subarrays are recursively produced? Additionally, please describe the time complexity of this algorithm and how it compares to other popular sorting algorithms such as quicksort and heapsort.","solution":"def merge_sort(arr): Sorts an array using the merge sort algorithm. Parameters: arr (list): The list to be sorted. Returns: list: The sorted list. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two sorted arrays into one sorted array. Parameters: left (list): The left half sorted list. right (list): The right half sorted list. Returns: list: The merged and sorted list. sorted_arr = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: sorted_arr.append(left[i]) i += 1 else: sorted_arr.append(right[j]) j += 1 sorted_arr.extend(left[i:]) sorted_arr.extend(right[j:]) return sorted_arr"},{"question":"Sort an array of integers using a modified version of heapsort algorithm, with the additional requirement of implementing the heapsort algorithm using a min-heap data structure. The input array may contain duplicates and have a length of at least 10. Additionally, the solution should have a time complexity of O(n log k), where n is the length of the input array and k is the number of distinct elements in the input array.","solution":"import heapq from collections import Counter def modified_heapsort(arr): Sorts an array of integers using a modified version of heapsort algorithm with a min-heap. # Count the frequency of each element to get distinct elements counter = Counter(arr) k = len(counter) # number of distinct elements # Convert array into a min-heap heapq.heapify(arr) # Extract elements from the heap to get a sorted array sorted_arr = [] for _ in range(len(arr)): sorted_arr.append(heapq.heappop(arr)) return sorted_arr"},{"question":"Write an algorithm to sort a given array using the insertion sort technique.","solution":"def insertion_sort(arr): Sorts an array using the insertion sort algorithm. Parameters: arr (list): The list to be sorted. Returns: list: The sorted list. for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are greater than key, # to one position ahead of their current position while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Develop a Python program to find the position of a substring in a string, but you cannot use any built-in string search functions (e.g., \`str.find()\`, \`str.index()\`, etc.). Additionally, you must implement the search algorithm yourself and not use any external libraries or modules.","solution":"def find_substring(s, sub): Finds the position of the substring \`sub\` in the string \`s\`. Returns the index of the first occurrence of the substring, or -1 if not found. if len(sub) == 0: return 0 # an empty substring is considered to be found at index 0 for i in range(len(s) - len(sub) + 1): match = True for j in range(len(sub)): if s[i + j] != sub[j]: match = False break if match: return i return -1"},{"question":"Write a piece of code to print the first 20 Fibonacci numbers in Python. Additionally, implement the program using recursion and ensure that the program can handle a scenario where the user can request the 'n'th Fibonacci number (where n can be any positive integer) without computing the entire sequence up to 'n'. Be sure to handle edge cases for negative numbers or non-integer inputs.","solution":"def fibonacci_recursive(n): Returns the nth Fibonacci number using recursion. Parameters: n (int): The position in the Fibonacci sequence (1-based index) Returns: int: The nth Fibonacci number if not isinstance(n, int) or n < 1: raise ValueError(\\"Input should be a positive integer.\\") if n == 1: return 0 elif n == 2: return 1 else: return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2) def first_n_fibonacci(n): Returns the first n Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate Returns: list: A list of the first n Fibonacci numbers if not isinstance(n, int) or n < 1: raise ValueError(\\"Input should be a positive integer.\\") return [fibonacci_recursive(i) for i in range(1, n + 1)] # Print the first 20 Fibonacci numbers print(first_n_fibonacci(20))"},{"question":"Create a python function that performs an exponential search on a sorted list. This function should include exception handling for cases where the list is not sorted or does not contain the target number.","solution":"def exponential_search(arr, target): Performs an exponential search on a sorted list for the target value. Parameters: arr (list): A sorted list of numbers target (int/float): The number to search for Returns: int: The index of the target in the list, or -1 if the target is not found Raises: ValueError: If the list is not sorted # Check if the list is sorted if arr != sorted(arr): raise ValueError(\\"The list is not sorted.\\") n = len(arr) # Handling empty list if n == 0: return -1 # Checking the first element if arr[0] == target: return 0 # Find range for binary search by repeated doubling i = 1 while i < n and arr[i] <= target: i *= 2 # Binary search for the target in the range found left = i // 2 right = min(i, n) return binary_search(arr, target, left, right) def binary_search(arr, target, left, right): Helper function to perform binary search on a subarray. Parameters: arr (list): A sorted list of numbers target (int/float): The number to search for left (int): The starting index of the subarray right (int): The ending index of the subarray Returns: int: The index of the target in the list, or -1 if the target is not found while left < right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid return -1"},{"question":"Using the following code snippet, generate a list containing only the prime numbers from 1 to n, excluding multiples of 3. Additionally, the solution should not use any built-in functions or libraries for checking primality or filtering. The time complexity should be less than O(n^2) and the space complexity should be less than O(n).","solution":"def generate_primes_excluding_multiples_of_3(n): Generate a list of prime numbers from 1 to n, excluding multiples of 3. if n < 2: return [] primes = [] # Boolean array to mark prime numbers is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, n + 1): if is_prime[i]: if i % 3 != 0: primes.append(i) # Mark multiples of i as non-prime for j in range(i * i, n + 1, i): is_prime[j] = False return primes"},{"question":"Construct a code segment to find all unique characters in a given string, excluding any whitespace characters.","solution":"def unique_characters(s): Returns a set of unique characters in the given string, excluding any whitespace characters. return {char for char in s if not char.isspace()}"},{"question":"Given three lists, write a Python function that finds the intersection of these lists (i.e., elements common to all three lists) without using built-in functions like set(). The function should also return the intersection in sorted order and handle duplicate elements correctly.","solution":"def intersection_of_three_lists(list1, list2, list3): Finds the intersection of three lists without using set(), and returns the intersection in sorted order. # Step 1: Find the intersection of the first two lists intersection = [] for item in list1: if item in list2 and item not in intersection: intersection.append(item) # Step 2: Find the intersection of the resulting list with the third list final_intersection = [] for item in intersection: if item in list3 and item not in final_intersection: final_intersection.append(item) # Step 3: Return the intersection in sorted order final_intersection.sort() return final_intersection"},{"question":"Given an integer N, create a list of all integers from 1 to N in reverse order. Do not use any built-in functions to reverse the list. Your solution should have a time complexity of O(N) and a space complexity of O(N).","solution":"def reverse_list(N): Given an integer N, return a list of all integers from 1 to N in reverse order. result = [] for i in range(N, 0, -1): result.append(i) return result"},{"question":"Your website has two types of users: Members who joined for free and paid subscribers. Generate a Python function that takes a list of user profiles and separates them into two lists based on whether their subscription status. Additionally, the function should calculate and print the percentage of Members and paid subscribers in the given user list.","solution":"def categorize_users(user_profiles): Separates user profiles into members and paid subscribers lists, and prints the percentage of each category. :param user_profiles: List of dictionaries containing user data with 'subscription_status'. :return: Tuple containing two lists: (members, paid_subscribers) members = [] paid_subscribers = [] for user in user_profiles: if user.get('subscription_status') == 'Paid': paid_subscribers.append(user) else: members.append(user) total_users = len(user_profiles) member_percentage = (len(members) / total_users) * 100 if total_users > 0 else 0 paid_percentage = (len(paid_subscribers) / total_users) * 100 if total_users > 0 else 0 print(f\\"Members: {member_percentage:.2f}%\\") print(f\\"Paid Subscribers: {paid_percentage:.2f}%\\") return members, paid_subscribers"},{"question":"Given two lowercase strings a and b, you are tasked to find out if b can be obtained by rearranging the characters in a. Also, provided is a piece of erroneous code for reference. Your assignment is to first identify the mistake in the given code, and then write your own corrected and efficient solution.","solution":"def can_rearrange(a, b): Determine if string b can be formed by rearranging the characters in string a. if len(a) != len(b): return False from collections import Counter return Counter(a) == Counter(b)"},{"question":"Write a Python function to generate a random password using a mix of uppercase characters, lowercase characters, digits, and special characters. Also add functionality to generate multiple passwords - the number of passwords and the length of each password should be parameters of the function. The password should not contain any sequential characters (e.g., \\"123\\", \\"abc\\", \\"ABC\\"), and must include at least one character from each category.","solution":"import random import string def has_sequential(s): Checks if the string contains any sequential characters. for i in range(len(s) - 2): if (ord(s[i]) + 1 == ord(s[i + 1]) and ord(s[i + 1]) + 1 == ord(s[i + 2])): return True return False def generate_password(length): Generates a single password with the given length. The password will contain at least one uppercase character, one lowercase character, one digit, and one special character. if length < 4: raise ValueError(\\"Password length must be at least 4 characters.\\") while True: upper = random.choice(string.ascii_uppercase) lower = random.choice(string.ascii_lowercase) digit = random.choice(string.digits) special = random.choice(string.punctuation) all_chars = string.ascii_letters + string.digits + string.punctuation password = [upper, lower, digit, special] password.extend(random.choice(all_chars) for _ in range(length - 4)) random.shuffle(password) password_str = ''.join(password) if not has_sequential(password_str): return password_str def generate_passwords(count, length): Generates a list of passwords. - count: Number of passwords to generate. - length: Length of each password. return [generate_password(length) for _ in range(count)]"},{"question":"Write a function that not only counts the characters in a string, but also categorizes them into vowels, consonants, digits, special characters (any character that is not a letter or digit), and whitespaces. The function should ignore case while categorizing letters.","solution":"def categorize_characters(s): vowels = \\"aeiou\\" result = { \\"vowels\\": 0, \\"consonants\\": 0, \\"digits\\": 0, \\"special_characters\\": 0, \\"whitespaces\\": 0 } for char in s.lower(): if char in vowels: result[\\"vowels\\"] += 1 elif char.isalpha(): result[\\"consonants\\"] += 1 elif char.isdigit(): result[\\"digits\\"] += 1 elif char.isspace(): result[\\"whitespaces\\"] += 1 else: result[\\"special_characters\\"] += 1 return result"},{"question":"Create a function in Python to calculate the factorial of a number. Additionally, handle the case when the input is negative and raise an exception with a custom error message. The function should also check if the input is a floating-point number and round it to the nearest integer before calculating the factorial.","solution":"import math def factorial(n): Returns the factorial of a number. If the input is a floating-point number, it rounds it. Raises ValueError if the input number is negative. if not isinstance(n, (int, float)): raise TypeError(\\"Input must be an int or float\\") n = round(n) if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") return math.factorial(n)"},{"question":"Write a python code that takes a sentence as input from the user and checks whether it is a palindrome or not. Also, add functionality to ignore case sensitivity and punctuation in the check. Provide clear directions and examples in the comments of your code.","solution":"import string def is_palindrome(sentence): Checks whether the given sentence is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward, ignoring case, spaces, and punctuation. Parameters: sentence (str): The input sentence to check Returns: bool: True if the sentence is a palindrome, False otherwise. # Remove punctuation and convert to lower case translator = str.maketrans('', '', string.punctuation) cleaned_sentence = sentence.translate(translator).replace(' ', '').lower() # Check if cleaned sentence is a palindrome return cleaned_sentence == cleaned_sentence[::-1]"},{"question":"Write a recursive function that prints the characters of a given string in reverse order. However, you are not allowed to use any built-in functions or data structures (such as arrays or stacks) to store or manipulate the string. You can only use recursion and basic string manipulation operations.","solution":"def reverse_string_recursive(s): Prints the characters of the given string in reverse order using recursion. if len(s) == 0: return \\"\\" return s[-1] + reverse_string_recursive(s[:-1])"},{"question":"How can you replace all punctuation in a given string with a specific character in Python, without using the built-in replace() or translate() methods? Additionally, what if you need to preserve the punctuation in certain conditions, for example, when the punctuation is part of an HTML tag or within a string enclosed in double quotes? Please write a Python code that meets these requirements and includes a check function to verify the solution. This should be done in such a way that the complexity is no worse than O(n), where n is the length of the string.","solution":"import re def replace_punctuation(input_str, replacement_char, exceptions=[]): Replaces all punctuation in the input_str with replacement_char, except for punctuations in the exceptions list. Args: input_str (str): The input string. replacement_char (str): The character to replace the punctuation with. exceptions (list of str): List of substrings where punctuation shouldn't be replaced. Returns: str: The string with punctuation replaced. preserved_indices = set() for ex in exceptions: for match in re.finditer(re.escape(ex), input_str): for i in range(match.start(), match.end()): preserved_indices.add(i) def is_punctuation(c): return re.match(r'[^ws]', c) result = [] for i, c in enumerate(input_str): if is_punctuation(c) and i not in preserved_indices: result.append(replacement_char) else: result.append(c) return ''.join(result)"},{"question":"In Python, write a function to print out a sequence of numbers from 1 to 100. However, for multiples of three, print \\"Fizz\\" instead of the number, for multiples of five, print \\"Buzz\\" instead of the number, and for numbers which are multiples of both three and five, print \\"FizzBuzz\\".","solution":"def fizz_buzz(): Prints numbers from 1 to 100, but for multiples of three prints \\"Fizz\\" instead of the number, for multiples of five prints \\"Buzz\\" instead, and for multiples of both three and five prints \\"FizzBuzz\\". for i in range(1, 101): if i % 3 == 0 and i % 5 == 0: print(\\"FizzBuzz\\") elif i % 3 == 0: print(\\"Fizz\\") elif i % 5 == 0: print(\\"Buzz\\") else: print(i)"},{"question":"Write a Python function that takes a list of strings and returns only the unique strings in it, preserving the original order. Use sets for this problem.","solution":"def unique_strings(strings): Returns a list of unique strings from the input list, preserving the original order. seen = set() unique_list = [] for string in strings: if string not in seen: seen.add(string) unique_list.append(string) return unique_list"},{"question":"Create an algorithm that takes in an array of positive integers and finds the longest strictly increasing subsequence within the array. A strictly increasing subsequence is a sequence of numbers where each number is greater than the previous number. For example, in the array [10, 9, 2, 5, 3, 4], the longest strictly increasing subsequence is [2, 3, 4].","solution":"def longest_increasing_subsequence(arr): Returns the longest strictly increasing subsequence from the given array of positive integers. Parameters: arr (list of int): The input array of positive integers. Returns: list of int: The longest strictly increasing subsequence. if not arr: return [] n = len(arr) lengths = [1] * n previous_indices = [-1] * n # Compute length of the longest increasing subsequences ending at each position for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lengths[i] < lengths[j] + 1: lengths[i] = lengths[j] + 1 previous_indices[i] = j # Find the index of the maximum length in lengths array max_length = max(lengths) index = lengths.index(max_length) # Reconstruct the longest increasing subsequence lis = [] while index != -1: lis.append(arr[index]) index = previous_indices[index] return lis[::-1]"},{"question":"Write a function that takes in two lists, a and b, and returns a list that contains the elements that are present in list a but not in list b. The function should not use any built-in Python functions or libraries that directly solve the problem, such as set operations or list comprehensions.","solution":"def difference(a, b): Returns a list containing elements present in list a but not in list b. res = [] for item in a: found = False for b_item in b: if item == b_item: found = True break if not found: res.append(item) return res"},{"question":"Write a python program that accepts a string input, uses it to create a dictionary, and sorts it by alphabetical order. Each key in the dictionary should be a character from the string, and the value should be the number of occurrences of that character in the string.","solution":"def char_count_dict(string): Returns a dictionary with characters as keys and their occurrence counts as values, sorted alphabetically by key. count_dict = {} for char in string: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return dict(sorted(count_dict.items()))"},{"question":"Hello, how can I manipulate a YAML file using Python? Could you give me a basic example that includes handling nested dictionaries and lists within the YAML file, as well as writing the changes back to the file?","solution":"import yaml def read_yaml(file_path): Reads a YAML file and returns the content as a Python dictionary. with open(file_path, 'r') as file: data = yaml.safe_load(file) return data def write_yaml(file_path, data): Writes a Python dictionary to a YAML file. with open(file_path, 'w') as file: yaml.safe_dump(data, file) def manipulate_yaml(data): Example function to demonstrate manipulation of nested dictionaries and lists within a YAML file. - Adds a new key-value pair to a dictionary. - Modifies an existing list. # Add a new key-value pair data['new_key'] = 'new_value' # Modify an existing list if 'some_list' in data: data['some_list'].append('new_item') return data # Example usage: # original_data = read_yaml('example.yaml') # modified_data = manipulate_yaml(original_data) # write_yaml('example_updated.yaml', modified_data)"},{"question":"Write a python function that checks if the number is prime or not. The function should also handle invalid inputs gracefully, such as strings or floating point numbers, and return an appropriate error message. Additionally, the function should be able to handle very large numbers efficiently.","solution":"def is_prime(number): Checks if the given number is a prime number. Returns True if the number is prime, False otherwise. if not isinstance(number, int): return \\"Invalid input: Input must be an integer.\\" if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a Python program that finds the number of common characters in two given strings, while ignoring case sensitivity. Additionally, output the common characters. Input strings will be alphanumeric and can have spaces.","solution":"def common_characters(s1, s2): Finds the number of common characters in two given strings while ignoring case sensitivity and returns the number of common characters and the characters themselves. s1 = s1.lower() s2 = s2.lower() common = set(s1) & set(s2) common.discard(' ') # Removing space as it's not a significant character return len(common), sorted(common)"},{"question":"You need to create a function that takes a character as input and prints out all words from a given dictionary that start with the given character. The function should ignore case when comparing the starting character of a word; for example, if the character given is 'a', the function should consider words starting with both 'A' and 'a'.","solution":"def find_words_starting_with(character, dictionary): Finds all words in the given dictionary that start with the input character. :param character: The character with which the words should start :param dictionary: A list of words to search through :return: A list of words starting with the given character (case-insensitive) character = character.lower() return [word for word in dictionary if word.lower().startswith(character)]"},{"question":"Write a decorator function in Python that logs the execution time of any function it decorates, and prints the arguments passed to the function and the return value.","solution":"import time import functools def log_execution_time(func): Decorator that logs the execution time of any function it decorates, prints the arguments passed to the function and the return value. @functools.wraps(func) def wrapper(*args, **kwargs): start_time = time.time() print(f\\"Calling {func.__name__} with args: {args} and kwargs: {kwargs}\\") result = func(*args, **kwargs) end_time = time.time() execution_time = end_time - start_time print(f\\"{func.__name__} returned {result} in {execution_time:.4f} seconds\\") return result return wrapper @log_execution_time def sample_function(x, y): return x + y"},{"question":"You are an AI agent. Your task is to find the shortest path from the start node to the goal node in a graph with weighted edges. The graph is represented as a list of nodes, each with a set of neighbors and the weight of the edge between them. You should implement a function that takes the graph, the start node, and the goal node as input, and returns the shortest path from the start node to the goal node.","solution":"from heapq import heappop, heappush def dijkstra(graph, start, goal): Finds the shortest path in a graph using Dijkstra's algorithm. Parameters: graph (dict): A dictionary where keys are node identifiers and values are lists of tuples representing neighbors and the weight of the edge [(neighbor, weight), ...]. start: The starting node identifier. goal: The goal node identifier. Returns: (float, list): A tuple consisting of the total weight of the shortest path and the path as a list. # Priority queue to store (distance to node, current node, path to current) pq = [(0, start, [])] # Dictionary to store the shortest distance to each node distances = {node: float('inf') for node in graph} distances[start] = 0 while pq: current_distance, current_node, path = heappop(pq) if current_node == goal: return (current_distance, path + [goal]) for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heappush(pq, (distance, neighbor, path + [current_node])) return (float('inf'), []) # Example Graph: # graph = { # 'A': [('B', 1), ('C', 4)], # 'B': [('A', 1), ('C', 2), ('D', 5)], # 'C': [('A', 4), ('B', 2), ('D', 1)], # 'D': [('B', 5), ('C', 1)] # } # start = 'A' # goal = 'D' # shortest_path_weight, path = dijkstra(graph, start, goal) # print(\\"Shortest Path Weight:\\", shortest_path_weight) # print(\\"Path:\\", path)"},{"question":"Implement a function in your preferred programming language that takes a list of strings (names) as an input, and for each unique name prints out the name, its length, and its frequency in the original list. The function should ignore case when identifying unique names to consider \\"John\\" and \\"john\\" as the same name. For names that have the same length, sort them alphabetically before printing.","solution":"def process_names(names): For each unique name (case-insensitive), prints the name, its length, and its frequency in the original list. The output is sorted by length primarily and alphabetically for names with the same length. from collections import Counter # Normalize names to lower case normalized_names = [name.lower() for name in names] counter = Counter(normalized_names) # Create a list of tuples (name, length, frequency) result = [(name, len(name), counter[name]) for name in sorted(counter.keys())] # Sort primarily by length of name, then alphabetically result.sort(key=lambda x: (x[1], x[0])) # Printing the results for name, length, freq in result: print(f'{name}: {length}, {freq}')"},{"question":"I want to write a function in Python that takes seven numbers as arguments and returns the second smallest number among them. How can I achieve this?","solution":"def second_smallest(a, b, c, d, e, f, g): Returns the second smallest number among the seven numbers. numbers = [a, b, c, d, e, f, g] unique_numbers = list(set(numbers)) # Remove duplicates unique_numbers.sort() # Sort the list return unique_numbers[1] if len(unique_numbers) > 1 else None # Return the second smallest element"},{"question":"I want to create an AI program that can optimize the route for a package delivery system. How can I achieve this using Python?","solution":"import itertools import sys def calculate_distance(point1, point2): Calculate the Euclidean distance between two points. Each point is a tuple of (x, y) return ((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) ** 0.5 def optimize_route(locations): Optimize the delivery route to minimize total distance. :param locations: List of (x, y) tuples representing delivery locations :return: Optimal route as a list of locations and total distance best_route = None min_distance = sys.maxsize for perm in itertools.permutations(locations): current_distance = 0 for i in range(len(perm) - 1): current_distance += calculate_distance(perm[i], perm[i+1]) if current_distance < min_distance: min_distance = current_distance best_route = perm return list(best_route), min_distance"},{"question":"Use Python to build a random number generator in the range [0,1)","solution":"import random def generate_random_number(): Generates a random floating-point number in the range [0, 1). return random.random()"},{"question":"I am trying to create a function in Python that takes two positive integers and returns the smallest missing number that is not present in either of the inputs. Can you help me write this function?","solution":"def smallest_missing_number(x, y): Returns the smallest missing positive integer that is not present in either x or y. # Combine the digits of x and y into a set of digits digits = set(str(x) + str(y)) # Check for the smallest missing positive integer for i in range(1, 10): if str(i) not in digits: return i # If all digits from 1 to 9 are present, return 10 return 10"},{"question":"Generate a function that finds the length of the longest substring without repeating characters.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right, char in enumerate(s): if char in char_map and char_map[char] >= left: left = char_map[char] + 1 char_map[char] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Can you write a Python function that computes Fibonacci numbers using dynamic programming for efficient results?","solution":"def fibonacci(n): Computes the n-th Fibonacci number using dynamic programming. if n <= 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write me a python code that can check if all elements in a list are unique and do not repeat more than once. Additionally, modify the code to return the number of repetitions for each element that appears more than once in the list.","solution":"def check_uniqueness(lst): Checks if all elements in the list are unique. Returns: - A boolean indicating if all elements are unique. - A dictionary with counts of elements that appear more than once. from collections import Counter counts = Counter(lst) all_unique = all(count == 1 for count in counts.values()) repetitions = {element: count for element, count in counts.items() if count > 1} return all_unique, repetitions"},{"question":"Write a function that takes an array of integers and returns a new array with all duplicate numbers removed.","solution":"def remove_duplicates(arr): Returns a new array with all duplicate numbers removed. return list(set(arr))"},{"question":"Write a Python function to determine if an input number is prime. The function should also check if the input is an integer and greater than 1. If the input does not meet these conditions, the function should raise a ValueError.","solution":"def is_prime(n): Determines if the input number n is a prime number. Raises a ValueError if the input is not an integer or is not greater than 1. Args: n: The input number to check. Returns: bool: True if n is a prime number, False otherwise. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n <= 1: raise ValueError(\\"Input must be greater than 1.\\") for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"question":"Write a function in Python to sort this dictionary by values in descending order, but only consider values that are divisible by 3.","solution":"def sort_dict_by_value_div_3(input_dict): Sorts the dictionary by values in descending order, but only consider values that are divisible by 3. :param input_dict: A dictionary with numeric values :return: A list of tuples representing sorted items (key, value) # Filter the dictionary to include only items with values divisible by 3 filtered_dict = {k: v for k, v in input_dict.items() if v % 3 == 0} # Sort the filtered dictionary by values in descending order sorted_items = sorted(filtered_dict.items(), key=lambda item: item[1], reverse=True) return sorted_items"},{"question":"Write a Python function that takes a positive integer as input and returns a list of its prime factors.","solution":"def prime_factors(n): Returns a list of prime factors of the given positive integer n. factors = [] divisor = 2 while n > 1: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 if divisor * divisor > n: # No need to check beyond sqrt(n) if n > 1: factors.append(n) break return factors"},{"question":"Fill in the missing lines in the following Python code to create a 'multiply_by_two' function that takes an integer as an argument and returns this integer multiplied by 2. Although providing an erroneous code snippet would normally mislead the question, the missing lines mean this potential pitfall is avoided.","solution":"def multiply_by_two(x): Returns the input integer multiplied by 2. return x * 2"},{"question":"Conceptualize a Python function to find the length of the longest increasing subsequence in a given array.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 n = len(arr) lis = [1] * n # Initialize LIS values for all indexes as 1 # Compute optimized LIS values in a bottom up manner for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return the maximum value in lis[] return max(lis)"},{"question":"Write a function in Python that prints out the numbers from the given parameter to 0, but only if the number is divisible by 3. Additionally, the function should raise a ValueError if the parameter is not a positive integer.","solution":"def print_divisible_by_3(n): Prints numbers from n to 0 that are divisible by 3. Raises ValueError if n is not a positive integer. if not isinstance(n, int) or n < 1: raise ValueError(\\"Parameter must be a positive integer\\") for i in range(n, -1, -1): if i % 3 == 0: print(i)"},{"question":"Create a Bash script that runs a Python code and passes an argument to the Python function. The Python function should only accept lowercase alphabets as the name argument and should also check if the name is a palindrome. Additionally, the Bash script should pass multiple arguments to the Python function, and the Python function should check if all the arguments are palindromes.","solution":"import sys def is_palindrome(name): Check if the provided name is a palindrome. Only lowercase alphabets are allowed. if not name.isalpha() or not name.islower(): raise ValueError(\\"Name must only contain lowercase alphabets.\\") return name == name[::-1] if __name__ == \\"__main__\\": args = sys.argv[1:] if not args: print(\\"No arguments provided. Please provide names as arguments.\\") exit(1) all_palindromes = all(is_palindrome(arg) for arg in args) if all_palindromes: print(\\"All provided names are palindromes.\\") else: print(\\"Not all provided names are palindromes.\\")"},{"question":"Write a function that not only returns the length of the longest word in a list, but also the number of vowels in that word and a list of all the consonants, preserving their order of appearance in the word. If the list does not contain any words, your function should return None for the length and vowels, and an empty list for the consonants.","solution":"def analyze_longest_word(words): Analyze the longest word in a list and return its length, the number of vowels, and a list of all the consonants in the order they appear in the word. :param words: List of words (strings) :return: Tuple containing the length of the longest word, number of vowels in it, and a list of consonants from that word. If the input list is empty, return None for length and vowels, and an empty list for consonants. if not words: return None, None, [] longest_word = max(words, key=len) vowels = 'aeiouAEIOU' vowel_count = sum(1 for char in longest_word if char in vowels) consonants = [char for char in longest_word if char not in vowels] return len(longest_word), vowel_count, consonants"},{"question":"Write an algorithm to perform binary search on a sorted array that may contain duplicate elements. The algorithm should find the first occurrence of a target element and return its index. If the target element is not present in the array, the algorithm should return -1. Ensure that the time complexity is O(log n) and the space complexity is O(1).","solution":"def binary_search_first_occurrence(arr, target): Perform binary search to find the first occurrence of a target element in a sorted array. Parameters: arr (list of int): A sorted list of integers which may contain duplicates. target (int): The target element to find. Returns: int: The index of the first occurrence of the target element, or -1 if the element is not present. left, right = 0, len(arr) - 1 first_occurrence_index = -1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: first_occurrence_index = mid right = mid - 1 # Continue searching in the left half. elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return first_occurrence_index"},{"question":"Develop a Python function that employs the \`remove()\` method to eliminate a specific element from a list by its value, and return the altered list.","solution":"def remove_element(lst, value): Removes the first occurrence of value in the list. Parameters: lst (list): The list from which to remove the element. value: The value to remove from the list. Returns: list: The list after removing the element. try: lst.remove(value) except ValueError: pass return lst"},{"question":"Design a function that not only has the ability to eliminate specified tuples from an existing tuple, but also adeptly handles nested tuples, eradicating the targeted tuples from within these as well. This function should be designed in such a way that it ensures the preservation of the sequence of the remaining elements in the original tuple, even after the cleaning operation. The function should also be robust enough to handle edge cases and unexpected inputs, maintaining the integrity of the tuple structure throughout the process.","solution":"def clean_tuple(data, target): Removes the target tuple from the data tuple, recursively handling nested tuples. Args: data (tuple): The input tuple which may contain nested tuples. target (tuple): The tuple to be removed from the input tuple. Returns: tuple: The cleaned tuple with the target tuple removed. if not isinstance(data, tuple): return data cleaned_data = [] for item in data: if isinstance(item, tuple): cleaned_item = clean_tuple(item, target) if cleaned_item == target: continue cleaned_data.append(cleaned_item) elif item != target: cleaned_data.append(item) return tuple(cleaned_data)"},{"question":"Create a python program that accepts a string input, uses it to create a dictionary, and sorts it by alphabetical order. The program should also include error handling for invalid inputs.","solution":"def string_to_sorted_dict(s): Takes a string input and converts it into a dictionary with each character as a key and its frequency as the value, then returns the dictionary sorted by key. Args: s (str): Input string Returns: dict: A dictionary with characters as keys and their frequency as values, sorted by key Raises: ValueError: If the input is not a string if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") char_dict = {} for char in s: if char in char_dict: char_dict[char] += 1 else: char_dict[char] = 1 sorted_dict = dict(sorted(char_dict.items())) return sorted_dict"},{"question":"Imagine you are a software engineer for a large online retail site. You're working on a program to help manage the inventory of their books, which are stored in multiple warehouses. To help your company quickly identify which books are in stock and where they're located, you decide to write a Python program that will take a list of book ISBNs as input and return the location in the warehouse where each book can be found. However, you want this program to be efficient and avoid repetitive searching for the same book in all warehouses, so you decide to approach this problem in two different ways to compare their performance.","solution":"# Sample warehouse data for illustration warehouse_inventory = { '978-3-16-148410-0': 'Aisle 1, Shelf 3', '978-1-56619-909-4': 'Aisle 2, Shelf 1', '978-0-262-13472-9': 'Aisle 1, Shelf 5', '978-0-07-042807-2': 'Aisle 3, Shelf 2' } def find_books_with_dict(isbns, inventory): Approach 1: Efficient method using a dictionary for O(1) lookups. Parameters: isbns (list of str): List of ISBN strings to search for. inventory (dict): Dictionary with ISBNs as keys and their locations as values. Returns: dict: Dictionary with ISBNs as keys and their locations as values for the given ISBNs. book_locations = {isbn: inventory[isbn] for isbn in isbns if isbn in inventory} return book_locations def find_books_with_linear_search(isbns, inventory): Approach 2: Less efficient method using linear search for O(n) lookups. Parameters: isbns (list of str): List of ISBN strings to search for. inventory (dict): Dictionary with ISBNs as keys and their locations as values. Returns: dict: Dictionary with ISBNs as keys and their locations as values for the given ISBNs. book_locations = {} inventory_items = list(inventory.items()) for isbn in isbns: for actual_isbn, location in inventory_items: if isbn == actual_isbn: book_locations[isbn] = location break return book_locations"},{"question":"Generate a Python program to insert an element at a given position in a list","solution":"def insert_element(lst, element, position): Inserts an element at a given position in a list. Parameters: lst (list): The list where the element will be inserted. element (any): The element to be inserted. position (int): The position at which the element should be inserted. Returns: list: The list after inserting the element. return lst[:position] + [element] + lst[position:]"},{"question":"Given a list of integers, write a Python function that removes duplicates from the list while preserving the order of the elements. Additionally, include unit tests to verify the correctness of your solution.","solution":"def remove_duplicates(lst): Removes duplicates from the list while preserving the order of the elements. Parameters: lst (list): A list of integers. Returns: list: A list with duplicates removed, preserving the order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Create a web application using Flask that takes in a number and returns the sum of all the digits.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/sum_of_digits', methods=['GET']) def sum_of_digits(): number = request.args.get('number') if number is None or not number.isdigit(): return jsonify({\\"error\\": \\"Invalid number\\"}), 400 sum_digits = sum(int(digit) for digit in number) return jsonify({\\"sum_of_digits\\": sum_digits}) if __name__ == '__main__': app.run(debug=True)"},{"question":"Given two lists, write a Python code to find the common elements in both the lists and return them as a new list. The common elements should be unique and sorted in descending order.","solution":"def find_common_elements(list1, list2): Returns a sorted list of unique common elements in descending order from two input lists. # Find common elements and remove duplicates common_elements = set(list1) & set(list2) # Convert to a sorted list in descending order sorted_common_elements = sorted(common_elements, reverse=True) return sorted_common_elements"},{"question":"How do I download a file from the internet using Python, including handling timeouts, retry logic, and exceptions? Also, encapsulate this functionality into a reusable function which accepts the URL, download location and maximum number of retries as parameters.","solution":"import requests from requests.exceptions import RequestException, Timeout import os def download_file(url, download_location, max_retries=3): Downloads a file from the given URL to the specified download location, handling timeouts and retry logic. Parameters: url (str): The URL of the file to download. download_location (str): The file path where the downloaded file should be saved. max_retries (int): Maximum number of retry attempts if the download fails. Returns: bool: True if the download was successful, False otherwise. retries = 0 while retries < max_retries: try: response = requests.get(url, timeout=10) response.raise_for_status() with open(download_location, 'wb') as file: file.write(response.content) return True except (Timeout, RequestException) as e: print(f\\"Error encountered: {e}. Retrying {retries + 1}/{max_retries}...\\") retries += 1 return False"},{"question":"Craft a Python-based software module that can evaluate and conclude whether a given numerical entity can be classified as a perfect square, including optimised handling for large integers and floating point numbers.","solution":"import math def is_perfect_square(n): Evaluates and concludes whether a given numerical entity can be classified as a perfect square. Parameters: n (int or float): The number to be checked. Returns: bool: True if n is a perfect square, False otherwise. if n < 0: return False if isinstance(n, float): if n != int(n): return False n = int(n) sqrt_n = int(math.isqrt(n)) return sqrt_n * sqrt_n == n"},{"question":"Create a Python function that extracts all the unique words from a given string, while also counting the frequency of each word. The function should return a dictionary where the keys are the unique words and the values are their frequencies. The words should be considered case-insensitive, meaning \\"Hello\\" and \\"hello\\" should be counted as the same word. Additionally, the function should ignore any punctuation marks, numbers, or special characters in the string, and only consider alphabetical characters.","solution":"import re from collections import defaultdict def extract_unique_words(text): Extracts all unique words from the given string and counts their frequency. Ignores punctuation, numbers, and special characters. Case insensitive. :param text: str - The input text string. :return: dict - Dictionary with unique words as keys and their frequencies as values. # Convert to lower case text = text.lower() # Remove punctuation, numbers, and special characters text = re.sub(r'[^a-zs]', '', text) # Split into words words = text.split() # Count frequency of each word word_count = defaultdict(int) for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"Write an efficient algorithm in Python to find the number of occurrences of an element in a sorted array.","solution":"def count_occurrences(sorted_array, x): Return the number of occurrences of x in the sorted array \`sorted_array\`. This function uses binary search to find the first and last occurrence of x, making it efficient. def binary_search_left(arr, target): low, high = 0, len(arr) while low < high: mid = (low + high) // 2 if arr[mid] < target: low = mid + 1 else: high = mid return low def binary_search_right(arr, target): low, high = 0, len(arr) while low < high: mid = (low + high) // 2 if arr[mid] > target: high = mid else: low = mid + 1 return low left_idx = binary_search_left(sorted_array, x) right_idx = binary_search_right(sorted_array, x) # if x is not found in the array, left_idx will equal right_idx if left_idx < len(sorted_array) and sorted_array[left_idx] == x: return right_idx - left_idx else: return 0"},{"question":"Given a set of elements {1, 2, 3, 4, 5}, write a Python program to generate all possible subsets of this set using backtracking.","solution":"def generate_subsets(nums): Generate all possible subsets of the given set of numbers using backtracking. Args: nums (list): List of elements to generate subsets from. Returns: list: A list of lists, where each list is a subset of the original set. def backtrack(start, path): result.append(path) for i in range(start, len(nums)): backtrack(i + 1, path + [nums[i]]) result = [] backtrack(0, []) return result # Example usage: generate_subsets([1, 2, 3, 4, 5])"},{"question":"Given a list of numbers, write a Python program to find the maximum and the minimum number, ensuring that the program does not use built-in functions max() and min(). Additionally, the program should handle empty list and list with only one number gracefully, by returning None for these cases.","solution":"def find_max_and_min(numbers): Returns a tuple containing the maximum and minimum number from the list. If the list is empty or has only one element, return (None, None). if not numbers or len(numbers) == 1: return (None, None) max_num = numbers[0] min_num = numbers[0] for num in numbers[1:]: if num > max_num: max_num = num if num < min_num: min_num = num return (max_num, min_num)"},{"question":"Design an algorithm that reverses a given string without using in-built reverse functions.","solution":"def reverse_string(s): Reverses the given string without using in-built reverse functions. Args: s (str): The string to be reversed. Returns: str: The reversed string. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Build a python program that take two strings as inputs and checks if they are anagrams of each other.","solution":"def are_anagrams(str1, str2): Check if the two input strings are anagrams of each other. Args: str1 (str): First input string. str2 (str): Second input string. Returns: bool: True if the strings are anagrams, False otherwise. # Normalize the strings by removing spaces and converting to lowercase str1_normalized = ''.join(sorted(str1.replace(\\" \\", \\"\\").lower())) str2_normalized = ''.join(sorted(str2.replace(\\" \\", \\"\\").lower())) # Compare the normalized versions return str1_normalized == str2_normalized"},{"question":"Design a Python function snippet to Check High Hygiene during illness: Coughing and Sneezing Etiquette for Engineer for Experts. Implement if/else or switch/case statements to handle different conditions related to the Reliability. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def check_hygiene_during_illness(symptom): Checks the recommended hygiene etiquette during illness based on the symptom provided. Parameters: symptom (str): The symptom that needs to be addressed (e.g., \\"coughing\\", \\"sneezing\\", etc.) Returns: str: The recommended action to take for the given symptom. # Lowercase the symptom to handle case insensitivity symptom = symptom.lower() if symptom == \\"coughing\\": return \\"Cover your mouth with a tissue or the inside of your elbow when you cough.\\" elif symptom == \\"sneezing\\": return \\"Cover your nose and mouth with a tissue or the inside of your elbow when you sneeze.\\" elif symptom == \\"fever\\": return \\"Stay at home, rest, and keep hydrated. Contact a healthcare provider if necessary.\\" elif symptom == \\"sore throat\\": return \\"Gargle with warm salt water, stay hydrated, and avoid spreading germs.\\" elif symptom == \\"runny nose\\": return \\"Use disposable tissues and discard them immediately. Wash your hands frequently.\\" else: return \\"Monitor your symptoms and follow general hygiene recommendations such as washing hands regularly and keeping a safe distance from others.\\""},{"question":"Write a python dictionary which contains a list of items with prices and quantity, and a function to compute the total cost of all items.","solution":"items = { \\"apple\\": {\\"price\\": 1.20, \\"quantity\\": 10}, \\"banana\\": {\\"price\\": 0.50, \\"quantity\\": 5}, \\"orange\\": {\\"price\\": 0.80, \\"quantity\\": 2}, \\"pear\\": {\\"price\\": 1.00, \\"quantity\\": 4} } def total_cost(item_dict): Computes the total cost of all items in the dictionary with their price and quantity. total = 0.0 for item in item_dict.values(): total += item[\\"price\\"] * item[\\"quantity\\"] return total"},{"question":"Suggest a completion for the following python function to check whether a given number is an ugly number or not. An ugly number is a number whose only prime factors are 2, 3, or 5.","solution":"def is_ugly_number(num): Returns True if the given number is an ugly number, else returns False. An ugly number is a number whose only prime factors are 2, 3, or 5. if num <= 0: return False for p in [2, 3, 5]: while num % p == 0: num //= p return num == 1"},{"question":"Write a python program that takes a list of tuples, where each tuple represents a triangle with three side lengths, and returns a list of boolean values indicating whether the triangle is a right triangle based on the Pythagorean theorem.","solution":"def is_right_triangle(triangles): Given a list of tuples representing the side lengths of triangles, this function returns a list of boolean values indicating whether each triangle is a right triangle. result = [] for sides in triangles: a, b, c = sorted(sides) result.append(a**2 + b**2 == c**2) return result"},{"question":"Provide a Python code to determine the name of a compound based on its chemical formula. For instance, given the formula C6H12O6, what is the name of the compound?","solution":"def get_compound_name(formula): Returns the name of a compound based on its chemical formula. :param formula: string of the chemical formula (e.g., 'H2O') :return: string name of the compound (e.g., 'Water') compound_names = { 'H2O': 'Water', 'CO2': 'Carbon Dioxide', 'O2': 'Oxygen', 'N2': 'Nitrogen', 'C6H12O6': 'Glucose', 'NaCl': 'Salt' } return compound_names.get(formula, 'Unknown Compound')"},{"question":"Given two strings s1 and s2, implement a function to interleave their characters, one from each string at a time. If one string is longer than the other, append the extra characters of the longer string to the end of the result. If an empty string is provided as an argument, interleave with an empty string and return the result.","solution":"def interleave_strings(s1, s2): Interleaves characters from two strings, one from each string at a time. If one string is longer, append the extra characters of the longer string. Parameters: s1 (str): The first string s2 (str): The second string Returns: str: The interleaved string result = [] min_length = min(len(s1), len(s2)) for i in range(min_length): result.append(s1[i]) result.append(s2[i]) # Append remaining characters from the longer string if len(s1) > len(s2): result.extend(s1[min_length:]) if len(s2) > len(s1): result.extend(s2[min_length:]) return ''.join(result)"},{"question":"Write a Python program that takes a positive integer and returns the sum of its digits in a reverse order.","solution":"def sum_of_digits_in_reverse(n): Returns the sum of the digits of n in reverse order. Parameters: n (int): A positive integer. Returns: int: The sum of the digits of n in reverse order. # Convert the number to string to process digit by digit digits = list(str(n)) # Reverse the list of digits digits.reverse() # Convert each string digit back to integer and sum them up return sum(int(digit) for digit in digits)"},{"question":"Write a method to implement a priority queue using stacks. Note that elements in the queue are always inserted in accordance with their priority. Elements with higher priority are dequeued before elements with lower priority. In case of a tie, the element that has been in the priority queue longer should be dequeued first (FIFO principle for elements of the same priority).","solution":"class PriorityQueueUsingStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def is_empty(self): return not self.stack1 and not self.stack2 def push(self, priority, value): if self.is_empty(): self.stack1.append((priority, value)) else: while self.stack1 and self.stack1[-1][0] >= priority: self.stack2.append(self.stack1.pop()) self.stack1.append((priority, value)) while self.stack2: self.stack1.append(self.stack2.pop()) def pop(self): if self.is_empty(): raise IndexError('Pop from empty priority queue') return self.stack1.pop()[1] def peek(self): if self.is_empty(): raise IndexError('Peek from empty priority queue') return self.stack1[-1][1]"},{"question":"Write a recursive Python function to compute the factorial of a positive integer, with the additional requirement that the function should handle negative integers by raising a ValueError and return None for non-integer input. Also, write a comprehensive unit test for this function using the PyTest framework, testing all possible edge cases and negative test cases.","solution":"def factorial(n): Computes the factorial of a positive integer. Raises a ValueError if n is a negative integer. Returns None if n is not an integer. if not isinstance(n, int): return None if n < 0: raise ValueError(\\"Factorial is not defined for negative integers\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a Python function that takes a list of integers as input and returns a new list containing only the odd numbers from the original list. The function should have a descriptive name and include comments explaining what it does.","solution":"def filter_odd_numbers(numbers): Takes a list of integers and returns a new list containing only the odd numbers. Parameters: numbers (list of int): The list of integers to filter. Returns: list of int: A new list containing only the odd numbers from the original list. return [num for num in numbers if num % 2 != 0]"},{"question":"Develop a Python program to implement the K-Means Clustering algorithm without using any machine learning libraries, such as scikit-learn. Your code should be able to take a dataset as input and output the cluster labels for each data point.","solution":"import random def initialize_centroids(data, k): Initialize k centroids randomly from the data points. return random.sample(data, k) def assign_clusters(data, centroids): Assign each data point to the nearest centroid. clusters = [[] for _ in range(len(centroids))] for point in data: distances = [euclidean_distance(point, centroid) for centroid in centroids] min_distance_index = distances.index(min(distances)) clusters[min_distance_index].append(point) return clusters def calculate_new_centroids(clusters): Calculate new centroids by finding the mean of the points in each cluster. centroids = [calculate_mean(cluster) for cluster in clusters] return centroids def euclidean_distance(point1, point2): Calculate the Euclidean distance between two points. return sum((i - j) ** 2 for i, j in zip(point1, point2)) ** 0.5 def calculate_mean(cluster): Calculate the mean of the points in a cluster. mean = [sum(coord) / len(cluster) for coord in zip(*cluster)] return mean def k_means(data, k, max_iterations=100): K-Means clustering algorithm. centroids = initialize_centroids(data, k) for _ in range(max_iterations): clusters = assign_clusters(data, centroids) new_centroids = calculate_new_centroids(clusters) if new_centroids == centroids: break centroids = new_centroids labels = [None] * len(data) for cluster_index, cluster in enumerate(clusters): for point in cluster: labels[data.index(point)] = cluster_index return labels # Sample data data = [ [1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0], [8.0, 2.0], [10.0, 2.0], [9.0, 3.0] ] # Running K-Means k = 3 labels = k_means(data, k) print(labels)"},{"question":"Design a Python function that not only extracts the last element from a given list, but does so under different conditions. The function should accommodate a scenario where the list may be empty or have a single element. Furthermore, the programme should also have the capability to check whether the input is indeed a list or not. If the input is not a list, the function should raise an exception.","solution":"def get_last_element(lst): Returns the last element of the list if it exists, else returns None. Raises a TypeError if the input is not a list. if not isinstance(lst, list): raise TypeError('Input must be a list') if len(lst) == 0: return None return lst[-1]"},{"question":"Write a function that takes an array and removes all duplicates in place, returning the length of the new array. The function should also modify the original array to contain only the unique elements in ascending order. The input array will contain integers between 0 and 1000.","solution":"def remove_duplicates(nums): Removes duplicates from the array in place and returns the length of the array after removing duplicates. The original array will be modified to contain only the unique elements in ascending order. Args: nums (list): List of integers between 0 and 1000. Returns: int: The length of the array after removing duplicates. if not nums: return 0 nums.sort() write_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Create a simple web app using Flask (Python) which takes two numbers as input, adds them, and displays the result on the webpage.","solution":"from flask import Flask, request, render_template_string app = Flask(__name__) HTML_TEMPLATE = ''' <!DOCTYPE html> <html> <head> <title>Addition App</title> </head> <body> <h1>Addition of Two Numbers</h1> <form method=\\"POST\\"> <label for=\\"num1\\">Number 1:</label> <input type=\\"number\\" id=\\"num1\\" name=\\"num1\\" required> <br> <label for=\\"num2\\">Number 2:</label> <input type=\\"number\\" id=\\"num2\\" name=\\"num2\\" required> <br> <input type=\\"submit\\" value=\\"Add\\"> </form> {% if result is not none %} <h2>Result: {{ result }}</h2> {% endif %} </body> </html> ''' @app.route('/', methods=['GET', 'POST']) def index(): result = None if request.method == 'POST': try: num1 = int(request.form['num1']) num2 = int(request.form['num2']) result = num1 + num2 except ValueError: result = 'Invalid input, please enter numbers only.' return render_template_string(HTML_TEMPLATE, result=result) if __name__ == '__main__': app.run(debug=True)"},{"question":"Construct a computer code function that rotates the elements of a given list to the right by a specified number of positions. Additionally, provide a piece of erroneous code that might mislead someone trying to solve this problem, and explain what's wrong with it.","solution":"def rotate_right(lst, positions): Rotates the elements of the list lst to the right by the number of positions specified. if not lst or positions <= 0: return lst n = len(lst) positions = positions % n # In case positions is greater than the length of the list return lst[-positions:] + lst[:-positions]"},{"question":"Write the equation f(x) = 2x + 3 in Python code.","solution":"def f(x): Returns the value of the equation f(x) = 2x + 3. return 2 * x + 3"},{"question":"Explain how to calculate the Levenshtein distance between two strings. Provide a code example in Python that does not use any external libraries.","solution":"def levenshtein_distance(s1, s2): Calculate the Levenshtein distance between two strings. :param s1: first string :param s2: second string :return: Levenshtein distance # If one of the strings is empty if len(s1) == 0: return len(s2) if len(s2) == 0: return len(s1) # Create a 2D array to store the distances m = len(s1) + 1 n = len(s2) + 1 dp = [[0] * n for _ in range(m)] # Initialize the first row and column for i in range(m): dp[i][0] = i for j in range(n): dp[0][j] = j # Compute the distances for i in range(1, m): for j in range(1, n): if s1[i-1] == s2[j-1]: cost = 0 else: cost = 1 dp[i][j] = min(dp[i-1][j] + 1, # Deletion dp[i][j-1] + 1, # Insertion dp[i-1][j-1] + cost) # Substitution return dp[-1][-1]"},{"question":"The make_file function creates a file with the given file_name and file_content. However, there is a bug in the function that prevents it from working correctly. Please fix the bug and write a new version of the function that correctly creates the file and writes the content to it.","solution":"def make_file(file_name, file_content): Creates a file with the given file_name and writes file_content to it. with open(file_name, 'w') as file: file.write(file_content)"},{"question":"Create a function in Python that will take in a list of integers and return a new list containing the squares of each element in the input list. The function should use a for loop to iterate through the input list and calculate the square of each element, and then append the squared value to a new list. The function should return the new list containing the squared values. Additionally, the function should include error handling to ensure that the input is a list of integers, and should return an error message if the input contains any non-integer values. The function should also be optimized to have a time complexity of O(n), where n is the number of elements in the input list.","solution":"def square_elements(input_list): Takes a list of integers and returns a new list containing the squares of each element. Args: input_list (list of int): A list of integers. Returns: list of int: A list of squared integers, or an error message if the input is invalid. if not isinstance(input_list, list): return \\"Error: Input is not a list\\" for item in input_list: if not isinstance(item, int): return \\"Error: Input list contains non-integer values\\" result = [] for item in input_list: result.append(item ** 2) return result"},{"question":"Design an algorithm for reversing a doubly linked list in-place. Additionally, implement a functionality to detect and remove any loops that might get created as a result of reversing the list. If a loop is detected, your algorithm should identify the starting node of the loop.","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None def reverse_doubly_linked_list(head): Reverses the given doubly linked list in-place. current = head temp = None while current: temp = current.prev current.prev = current.next current.next = temp current = current.prev if temp: head = temp.prev return head def detect_and_remove_loop(head): Detects and removes a loop in the doubly linked list if present. Returns the node where the loop starts, or None if no loop is found. slow = head fast = head # Detect loop using Floyd's Cycle-Finding Algorithm while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break if fast is None or fast.next is None: return None # Loop detected; identify the loop starting node slow = head while slow != fast: slow = slow.next fast = fast.next loop_start = slow # Remove loop current = loop_start while current.next != loop_start: current = current.next current.next = None return loop_start"},{"question":"passwd must be 8-20 characters, and must contain at least one letter in lowercase, exactly two uppercase letters, at least two digits, and must contain no spaces. Implement a function that checks if a given password is valid based on these rules.","solution":"import re def is_valid_password(password): Checks if the given password is valid based on the specified rules: - Password length is between 8 and 20 characters. - Contains at least one lowercase letter. - Contains exactly two uppercase letters. - Contains at least two digits. - Contains no spaces. length_check = 8 <= len(password) <= 20 lowercase_check = re.search(r'[a-z]', password) is not None uppercase_check = len(re.findall(r'[A-Z]', password)) == 2 digit_check = len(re.findall(r'd', password)) >= 2 space_check = ' ' not in password return all([length_check, lowercase_check, uppercase_check, digit_check, space_check])"},{"question":"Develop an algorithm that takes an array and reverses the order of its elements without using any built-in reverse methods. The solution should be implemented in code and should include support for arrays with different data types. Additionally, explain the time and space complexity of the algorithm.","solution":"def reverse_array(arr): Reverses the elements of the array without using any built-in reverse methods. Parameters: arr (list): The array to be reversed. Returns: list: The reversed array. start = 0 end = len(arr) - 1 while start < end: # Swap the elements arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1 return arr # Time Complexity: O(n) # Space Complexity: O(1)"},{"question":"Write a function that not only checks if a reference argument path exists, but also creates the path if it does not exist. This function should also handle any permission issues that may arise during the process.","solution":"import os def ensure_path_exists(path): Checks if the given path exists and creates it if it does not exist. Handles any permission issues that may arise during the process. Parameters: path (str): The path to check and create if necessary. Returns: bool: True if the path exists or was created successfully, False otherwise. try: os.makedirs(path, exist_ok=True) return True except PermissionError: return False"},{"question":"Given a list of strings, use Python to remove all duplicates from the list while maintaining the original order of the elements. Additionally, ensure that the solution has a time complexity of O(n) and a space complexity of O(n), where n is the length of the input list. You are not allowed to use any built-in functions or data structures for this task.","solution":"def remove_duplicates(input_list): Remove duplicates from a list of strings while preserving the original order. This implementation assumes that you cannot use built-in functions dedicated to this task and that you have to maintain a time complexity of O(n). seen = {} output_list = [] for item in input_list: if item not in seen: seen[item] = True output_list.append(item) return output_list"},{"question":"Write a Python script that takes HTML content as input and strips out all HTML tags, leaving only the text content. The script should handle nested tags, self-closing tags, and attributes. Additionally, it should recognize and preserve HTML entities, such as \`&amp;\` for the ampersand character. Write a function that performs this operation and validate its correctness with several test cases.","solution":"from html import unescape import re def strip_html_tags(html_content): Strips HTML tags from the input HTML content, leaving only text content. Also preserves HTML entities like &amp;. clean = re.compile('<.*?>') return unescape(re.sub(clean, '', html_content))"},{"question":"Develop a PyTorch-based model, applying a Recurrent Neural Network, to analyze and predict the next several characters in a sequence from the Gutenberg Project text database.","solution":"import torch import torch.nn as nn import torch.optim as optim import numpy as np class CharRNN(nn.Module): def __init__(self, input_size, hidden_size, output_size, n_layers=1): super(CharRNN, self).__init__() self.hidden_size = hidden_size self.n_layers = n_layers self.rnn = nn.RNN(input_size, hidden_size, n_layers, batch_first=True) self.fc = nn.Linear(hidden_size, output_size) def forward(self, x, hidden): out, hidden = self.rnn(x, hidden) out = out.contiguous().view(-1, self.hidden_size) out = self.fc(out) return out, hidden def init_hidden(self, batch_size): return torch.zeros(self.n_layers, batch_size, self.hidden_size)"},{"question":"Please write a Python program that finds the longest common subsequence of two strings, while considering case sensitivity and whitespace. Additionally, the program should only use iterative methods and avoid the use of recursion or built-in Python functions such as zip() or itertools.","solution":"def longest_common_subsequence(s1, s2): Returns the longest common subsequence of two strings s1 and s2. Considers case sensitivity and whitespace. m = len(s1) n = len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) lcs_length = dp[m][n] lcs = [''] * lcs_length i, j = m, n while i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: lcs[lcs_length - 1] = s1[i - 1] i -= 1 j -= 1 lcs_length -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return ''.join(lcs)"},{"question":"Design a program to find the first non-repeating character in a given string.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in a given string. If all characters are repeating or the string is empty, returns None. char_count = {} # First pass: count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass: find the first non-repeating character for char in s: if char_count[char] == 1: return char return None"},{"question":"Write a recursive function in Python to calculate the Least Common Multiple (L.C.M) of a list of numbers. Furthermore, to make this challenge more interesting, the function should handle any amount of numbers in the list and also manage errors if unsuitable data types or negative numbers are given in the list.","solution":"def gcd(a, b): Helper function to calculate the Greatest Common Divisor (GCD) of two numbers. while b: a, b = b, a % b return a def lcm(a, b): Helper function to calculate the Least Common Multiple (LCM) of two numbers. return abs(a * b) // gcd(a, b) def lcm_list(numbers): Recursive function to calculate the LCM of a list of numbers. if not isinstance(numbers, list) or not all(isinstance(x, int) and x > 0 for x in numbers): raise ValueError(\\"Input must be a list of positive integers.\\") if len(numbers) == 0: return 1 elif len(numbers) == 1: return numbers[0] else: first = numbers[0] rest = lcm_list(numbers[1:]) return lcm(first, rest)"},{"question":"Build a web scraper in Python that extracts the 5 most frequent words from the homepage of a given website.","solution":"import requests from bs4 import BeautifulSoup from collections import Counter import re def get_most_frequent_words(url, num_words=5): Extracts the num_words most frequent words from the homepage of a given website. Args: url (str): URL of the website to scrape. num_words (int): Number of top frequent words to return. Default is 5. Returns: List[Tuple[str, int]]: A list of tuples containing words and their frequencies. response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') # Extract text from the webpage text = soup.get_text() # Remove non-alphanumeric characters and split the text into words words = re.findall(r'bw+b', text.lower()) # Count the frequency of words word_counts = Counter(words) # Get the most common words most_common_words = word_counts.most_common(num_words) return most_common_words"},{"question":"Make a function that takes two strings and determines if the strings share any common characters. However, you are not allowed to use any built-in string methods or data structures such as lists or sets. You can only use basic operations such as loops, conditional statements, and string indexing. The function should return True if the strings have at least one common character and False otherwise.","solution":"def have_common_characters(str1, str2): Determines if two strings have any common characters without using built-in string methods or data structures. Args: str1 (str): First input string. str2 (str): Second input string. Returns: bool: True if there are common characters, False otherwise. for char1 in str1: for char2 in str2: if char1 == char2: return True return False"},{"question":"Given a list of Python built-in functions, you are to create a new programming question. The task is to write a function that uses some of these built-ins to perform a specific operation. Also, provide a piece of erroneous code as a reference alongside the correct solution.","solution":"def process_and_sum(nums): Takes a list of integers, filters out negative numbers, squares the remaining numbers and returns the sum of the squared numbers. filtered_nums = filter(lambda x: x > 0, nums) squared_nums = map(lambda x: x**2, filtered_nums) total_sum = sum(squared_nums) return total_sum"},{"question":"i have a python class def TV which has attributes isnameofshow, price, numberofshows. when creating a new instance of this class aka tv1, i want to include a function that checks if numberofshows is more than 10, if so print(\\"too many tv shows\\") otherwise do nothing","solution":"class TV: def __init__(self, isnameofshow, price, numberofshows): self.isnameofshow = isnameofshow self.price = price self.numberofshows = numberofshows self.check_number_of_shows() def check_number_of_shows(self): if self.numberofshows > 10: print(\\"too many tv shows\\")"},{"question":"Develop a Python program snippet to Calculate High Hygiene in shared spaces: Proper Use of Shared Utensils and Equipment for Engineer for Beginners. Incorporate if/else or switch/case statements to handle various cases related to the Ethics. Dry-run, ensure your control flow logic is clear and well-commented. Here’s a python program which implements high hygiene practices while sharing utensils and equipment in public places like cafes, restaurants etc. This implementation uses \`if\` conditional statement alongside some basic error handling to deal with unexpected input from users.","solution":"def proper_use_of_shared_utensils(behavior): This function evaluates the behavior of an individual in using shared utensils and equipment and returns an appropriate hygiene practice message. Parameters: behavior (str): A string representing the individual's behavior. Returns: str: A message suggesting the proper hygiene practice. if behavior == \\"drinking directly from a shared container\\": return \\"Please, use a clean glass to pour your drink instead of drinking directly from the container.\\" elif behavior == \\"sharing utensils without cleaning\\": return \\"Utensils should be washed thoroughly with soap and water before sharing.\\" elif behavior == \\"double dipping in communal sauces\\": return \\"Avoid double dipping. Use a spoon to put some sauce on your plate instead.\\" elif behavior == \\"not washing hands before using shared equipment\\": return \\"Always wash your hands with soap and water before using shared equipment.\\" elif behavior == \\"sneezing near shared utensils\\": return \\"Cover your mouth and nose with a tissue or elbow when sneezing and stay away from shared utensils.\\" else: return \\"Behavior not recognized. Please follow general hygiene practices.\\" # Demonstration # This will print: Please, use a clean glass to pour your drink instead of drinking directly from the container. print(proper_use_of_shared_utensils(\\"drinking directly from a shared container\\"))"},{"question":"Design a detailed algorithm that can sort a given list of numbers using the quick sort method. You must specify the pivot selection strategy, and how the list is partitioned at each step. Also, implement a function that checks if the quick sort algorithm has correctly sorted the list. To add complexity, you have been given an erroneous piece of code as a reference. Identify and correct the mistakes in this code to complete the task.","solution":"def quick_sort(arr): Sorts the input list using the quick sort algorithm with the median-of-three pivot selection. if len(arr) <= 1: return arr # Median-of-three pivot selection def median_of_three(low, high): mid = (low + high) // 2 if arr[low] > arr[mid]: arr[low], arr[mid] = arr[mid], arr[low] if arr[low] > arr[high]: arr[low], arr[high] = arr[high], arr[low] if arr[mid] > arr[high]: arr[mid], arr[high] = arr[high], arr[mid] return arr[mid] # Partition function def partition(low, high): pivot = median_of_three(low, high) left = low right = high while left <= right: while arr[left] < pivot: left += 1 while arr[right] > pivot: right -= 1 if left <= right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return left # Recursive quick sort function def quick_sort_recursive(low, high): if low < high: pi = partition(low, high) quick_sort_recursive(low, pi - 1) # Recursively sort elements before partition quick_sort_recursive(pi, high) # Recursively sort elements after partition quick_sort_recursive(0, len(arr) - 1) return arr def is_sorted(arr): Returns True if the list is sorted in ascending order, otherwise False. return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))"},{"question":"Write a python function that takes an array of integers, and returns the largest sum of non-adjacent elements.","solution":"def largest_sum_non_adjacent(arr): Returns the largest sum of non-adjacent elements in the array. if not arr: return 0 if len(arr) == 1: return arr[0] # Initialize variables to store the maximum sum including and excluding the previous element include = arr[0] exclude = 0 for i in range(1, len(arr)): # Current maximum excluding i(th) element new_exclude = max(include, exclude) # Current maximum including i(th) element include = exclude + arr[i] exclude = new_exclude # Return the maximum of including and excluding the last element return max(include, exclude)"},{"question":"Build a Python code snippet to print the diamond structure with the specified number of rows. This code should include two functions: one for generating a single row of the diamond pattern, and another for rendering the complete diamond figure. Incorporate input validation to ensure the row number is an odd integer and more than 1.","solution":"def generate_diamond_row(n, row): Generates a single row of the diamond pattern. Args: n (int): Total number of rows in the diamond. row (int): The current row number to generate. Returns: str: A string representation of the row in the diamond. spaces = abs((n // 2) - row) stars = n - 2 * spaces return ' ' * spaces + '*' * stars + ' ' * spaces def print_diamond(n): Prints the complete diamond pattern with the specified number of rows. Args: n (int): Total number of rows in the diamond. Must be odd and more than 1. Raises: ValueError: If n is not an odd integer greater than 1. if not isinstance(n, int) or n <= 1 or n % 2 == 0: raise ValueError(\\"Number of rows must be an odd integer greater than 1.\\") for row in range(n): print(generate_diamond_row(n, row))"},{"question":"Write code to print the first 100 prime numbers in reverse order, but exclude any numbers that are palindromic primes.","solution":"def is_prime(n): Checks if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(n): Checks if a number is a palindrome. return str(n) == str(n)[::-1] def first_100_primes_excluding_palindromes(): Generates the first 100 prime numbers excluding palindromic primes, in reverse order. primes = [] num = 2 while len(primes) < 100: if is_prime(num) and not is_palindrome(num): primes.append(num) num += 1 return primes[::-1] # Generate and print the first 100 prime numbers excluding palindromes in reverse primes = first_100_primes_excluding_palindromes() print(primes)"},{"question":"Given a set of coordinates representing cities on a map, write a Python program to find the shortest path that visits each city exactly once and returns to the original city (the traveling salesman problem). Use the nearest neighbor algorithm for simplicity. Note that the optimal solution uses the minimum spanning tree + Christofides algorithm.","solution":"def calculate_distance(city1, city2): Calculates the Euclidean distance between two cities. import math return math.sqrt((city2[0] - city1[0])**2 + (city2[1] - city1[1])**2) def nearest_neighbor_tsp(cities): Implements the nearest neighbor algorithm to approximate the solution to the Traveling Salesman Problem. num_cities = len(cities) if num_cities == 0: return [] unvisited = set(range(1, num_cities)) path = [0] current_city = 0 while unvisited: next_city = min(unvisited, key=lambda city: calculate_distance(cities[current_city], cities[city])) unvisited.remove(next_city) path.append(next_city) current_city = next_city path.append(0) # Return to the original city return path"},{"question":"Write a code in Python to rotate an array to the right by k steps, where k is non-negative.","solution":"def rotate_array(arr, k): Rotate array to the right by k steps. Parameters: arr (list): List of integers. k (int): Number of steps to rotate the array. Returns: list: The rotated array. if not arr: return arr k = k % len(arr) # Normalize k to be within the bounds of len(arr) return arr[-k:] + arr[:-k]"},{"question":"Write a program in Python that uses a 'for' loop to iterate over a string and print each character of the string in uppercase. However, if the character is a vowel (a, e, i, o, u), you are to print its corresponding position in the string instead. Also, count and print the number of vowels encountered in the string.","solution":"def iterate_and_transform_string(input_string): Iterates over a string and prints each character in uppercase. Prints the position of the character instead of vowels. Returns the number of vowels encountered in the string. vowels = \\"aeiou\\" vowel_count = 0 transformed_output = [] for index, char in enumerate(input_string): if char.lower() in vowels: transformed_output.append(str(index)) vowel_count += 1 else: transformed_output.append(char.upper()) print(' '.join(transformed_output)) print(\\"Number of vowels:\\", vowel_count) return vowel_count"},{"question":"Propose a method in Python for sorting an array of floating point numbers from largest to smallest, but without using any built-in Python sorting functions. Additionally, implement error handling for cases where the input is not an array of floating point numbers.","solution":"def sort_descending(arr): Sorts an array of floating point numbers from largest to smallest. Throws a TypeError if the input is not a list of floats. if not isinstance(arr, list) or any(not isinstance(x, float) for x in arr): raise TypeError(\\"Input must be a list of floating point numbers.\\") # Implementing bubble sort for demonstration purposes. n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] < arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"How would you determine if a given number is a prime number in a programming language like Python?","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"question":"Write a Python function that takes two lists of integers and returns a new list that contains only the common elements between the two lists. The function should have a time complexity of O(n), where n is the length of the longer list.","solution":"def common_elements(list1, list2): Returns a list of common elements between list1 and list2. The function accepts two lists of integers and returns a new list with only the elements that are present in both lists. set1 = set(list1) # Convert list1 to a set set2 = set(list2) # Convert list2 to a set return list(set1.intersection(set2)) # Return the intersection as a list"},{"question":"How can I check if a list is sorted in ascending order using Python?","solution":"def is_sorted_ascending(lst): Returns True if the list is sorted in ascending order, False otherwise. return all(l <= r for l, r in zip(lst, lst[1:]))"},{"question":"I want to write a Python program that generates The Fibonacci sequence and prints the number that is at the index that the use provided. How would I do that? For example, if the user provides the number 10, the program would print out the number at the 10th index in the Fibonacci sequence.","solution":"def fibonacci_at_index(n): Returns the Fibonacci number at index n. if n < 0: raise ValueError(\\"Index cannot be negative\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b # Example usage: # user_index = 10 # print(fibonacci_at_index(user_index)) # Output: 55"},{"question":"Design a Python function that accepts a list of integers and returns a tuple. The first element of the tuple is the cumulative product of all even numbers in the list, and the second element is the cumulative product of all odd numbers. If there are no even or odd numbers in the list, return 1 for their respective products.","solution":"def cumulative_products(numbers): Returns a tuple where the first element is the cumulative product of all even numbers in the list, and the second element is the cumulative product of all odd numbers in the list. If there are no even or odd numbers in the list, return 1 for their respective products. even_product = 1 odd_product = 1 for num in numbers: if num % 2 == 0: even_product *= num else: odd_product *= num return even_product, odd_product"},{"question":"I have a CSV file with comma-separated values that I need to convert to a text file with a specific delimiter. The delimiter I need is a pipe symbol (|). How can I do this conversion in Python?","solution":"import csv def convert_csv_to_delimited_text(input_file_path, output_file_path, delimiter='|'): Converts a CSV file to a text file with a specific delimiter. Parameters: - input_file_path (str): The path to the input CSV file. - output_file_path (str): The path to the output text file. - delimiter (str): The delimiter to use in the output file. Default is '|'. with open(input_file_path, mode='r', newline='') as csv_file: csv_reader = csv.reader(csv_file) with open(output_file_path, mode='w', newline='') as text_file: text_writer = csv.writer(text_file, delimiter=delimiter) for row in csv_reader: text_writer.writerow(row)"},{"question":"Write a Python program to insert an element in a list at the given index, replacing any existing element at that index.","solution":"def replace_element_at_index(lst, index, element): Replaces the element at the specified index in the list with the given element. Parameters: lst (list): The list in which the replacement is to be made. index (int): The index at which the replacement is to be done. element: The new element to insert at the specified index. Returns: list: The updated list with the replaced element. if index >= len(lst) or index < -len(lst): raise IndexError(\\"Index out of range\\") lst[index] = element return lst"},{"question":"Reverse the order of the elements in a given array, using a recursive approach, without using any built-in reverse functions or temporary variables. The array can contain any positive or negative integer. The solution should have a time complexity of O(n) and a space complexity of O(log n).","solution":"def reverse_array(arr): Reverses the array in place using a recursive approach. Parameters: arr (list): The array to be reversed. Returns: list: The reversed array. def helper(left, right): if left >= right: return # Swap the elements arr[left], arr[right] = arr[right], arr[left] # Recurse for the next pair helper(left + 1, right - 1) helper(0, len(arr) - 1) return arr"},{"question":"Can you write a function in Python to transform the contact list from a list of dictionaries into a dictionary of dictionaries using the 'email' entry as the key?","solution":"def transform_contact_list(contact_list): Transforms the contact list from a list of dictionaries into a dictionary of dictionaries using the 'email' entry as the key. Parameters: contact_list (list): List of dictionaries, each representing a contact with at least an 'email' entry. Returns: dict: Dictionary of contact dictionaries with emails as keys. return {contact['email']: contact for contact in contact_list}"},{"question":"I want to gather all the links to pdf files from a webpage, and download them to my computer. How could I approach this in Python? I want to avoid using any external packages try to use only the standard libraries. Assume I already have the HTML content in a string variable.","solution":"import re import os from urllib.request import urlretrieve def gather_pdf_links(html_content): Extracts all PDF links from the provided HTML content string. :param html_content: The HTML content as a string. :return: A list of URLs to PDF files. # Regex pattern to find all links ending with .pdf pdf_pattern = re.compile(r'href=\\"([^\\"]+.pdf)\\"', re.IGNORECASE) pdf_links = pdf_pattern.findall(html_content) return pdf_links def download_pdfs(pdf_links, download_folder): Downloads all PDFs from the list of PDF links to the specified folder. :param pdf_links: List of URLs to PDF files. :param download_folder: Folder to save the downloaded PDFs. if not os.path.exists(download_folder): os.makedirs(download_folder) for link in pdf_links: file_name = os.path.join(download_folder, os.path.basename(link)) urlretrieve(link, file_name)"},{"question":"Write a Python code to count the number of uppercase and lowercase letters in a given string. The string can contain alphanumeric characters and special characters. Additionally, the code should also count the number of digits and special characters in the string.","solution":"def count_characters(s): Counts the number of uppercase letters, lowercase letters, digits, and special characters in the given string \`s\`. Parameters: s (str): The input string to be analyzed. Returns: dict: A dictionary with counts of uppercase, lowercase, digits, and special characters. counts = { 'uppercase': 0, 'lowercase': 0, 'digits': 0, 'special': 0 } for char in s: if char.isupper(): counts['uppercase'] += 1 elif char.islower(): counts['lowercase'] += 1 elif char.isdigit(): counts['digits'] += 1 else: counts['special'] += 1 return counts"},{"question":"Write a Python program to delete elements from a list based on their index, without using built-in functions like \`remove()\`, \`pop()\`, or the \`del\` statement.","solution":"def delete_elements_by_index(input_list, indices): Deletes elements from the input list based on the given list of indices. Returns a new list with elements removed. :param input_list: List of elements :param indices: List of indices to be removed from input_list :return: New list with specified indices removed indices_set = set(indices) return [item for i, item in enumerate(input_list) if i not in indices_set]"},{"question":"Given two strings s and t, create a new string where all occurrences of any character in t that appear in s are removed. Implement this in an efficient way considering extended ASCII characters.","solution":"def remove_occurrences(s, t): Returns a new string where all occurrences of any character in t that appear in s are removed. Parameters: s (str): The input string. t (str): The string containing characters to be removed from s. Returns: str: A new string with the characters in t removed from s. # Create a set of characters to be removed remove_set = set(t) # List comprehension to filter out the characters that need to be removed result = [char for char in s if char not in remove_set] # Join the list to form the resulting string return ''.join(result)"},{"question":"I have an array: [4, 3, 2, 10, 12, 1, 5, 6]. Implement a function that sorts this array using the quick sort algorithm. Additionally, the algorithm should be implemented from scratch without using any built-in sort functions. Further, illustrate how the algorithm works by showing the array at each stage of the sorting process.","solution":"def quick_sort(arr): Sorts an array using the quick sort algorithm and prints the array at each stage of the sorting process. def _quick_sort(arr, low, high): if low < high: pi = partition(arr, low, high) print(arr) # print the array after partitioning _quick_sort(arr, low, pi-1) _quick_sort(arr, pi+1, high) def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i+1], arr[high] = arr[high], arr[i+1] return i+1 _quick_sort(arr, 0, len(arr) - 1) return arr # Example array and sorting array = [4, 3, 2, 10, 12, 1, 5, 6] sorted_array = quick_sort(array) print(\\"Sorted Array:\\", sorted_array)"},{"question":"Write a Python function \`subtract_func(a, b)\` that takes two integers, \`a\` and \`b\`, as input and returns their difference. Additionally, implement a function \`validate_input\` that checks if the inputs to \`subtract_func\` are integers. If the inputs are not integers, \`validate_input\` should raise a \`TypeError\`. Also, create a decorator \`@validate_input\` that applies this validation to \`subtract_func\` before it performs the subtraction.","solution":"def validate_input(func): Decorator to validate that inputs to a function are integers. def wrapper(a, b): if not isinstance(a, int) or not isinstance(b, int): raise TypeError(\\"Both inputs must be integers\\") return func(a, b) return wrapper @validate_input def subtract_func(a, b): Returns the difference between a and b. return a - b"},{"question":"Create a Python program that takes a string of text as input, and returns the most commonly occurring letter in the text. If there is a tie for the most occurring letter, return the one that comes first alphabetically.","solution":"from collections import Counter def most_common_letter(text): Returns the most commonly occurring letter in the text. If there is a tie, return the one that comes first alphabetically. # Filter only alphabetic characters and convert to lowercase filtered_text = ''.join(filter(str.isalpha, text)).lower() if not filtered_text: return None # Count the frequency of each letter letter_counts = Counter(filtered_text) # Find the letter(s) with the maximum frequency max_frequency = max(letter_counts.values()) common_letters = [letter for letter, count in letter_counts.items() if count == max_frequency] # Return the first one alphabetically return sorted(common_letters)[0]"},{"question":"You have access to a dataset repository that contains three different data sets: \` getWidthAndHeightImage\`, \`getEdgeletsImage\`, and \`getHogImage\`. You are also given the code for a \`Dataset\` class, which provides a template for loading and pre-processing data from these sets. Your task is to implement the \`_load_data\` method for each dataset, ensuring that the data is correctly loaded and pre-processed according to specific requirements.","solution":"class Dataset: def __init__(self, dataset_type): self.dataset_type = dataset_type self.data = self._load_data() def _load_data(self): if self.dataset_type == 'getWidthAndHeightImage': return self._load_width_and_height_image() elif self.dataset_type == 'getEdgeletsImage': return self._load_edgelets_image() elif self.dataset_type == 'getHogImage': return self._load_hog_image() else: raise ValueError(f\\"Unknown dataset_type: {self.dataset_type}\\") def _load_width_and_height_image(self): # Stub function to simulate loading data, apply actual logic. return \\"Width and Height Image data loaded\\" def _load_edgelets_image(self): # Stub function to simulate loading data, apply actual logic. return \\"Edgelets Image data loaded\\" def _load_hog_image(self): # Stub function to simulate loading data, apply actual logic. return \\"HOG Image data loaded\\""},{"question":"Design a Python function snippet to Update Extreme Food hygiene: Preventing Cross-Contamination for Decision Making for Professionals. Implement if/else or switch/case statements to handle different conditions related to the Safety. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def update_food_hygiene_prevention(risk_level): Updates food hygiene prevention measures based on the specified risk level. Parameters: risk_level (str): The risk level which can be 'low', 'medium', or 'high'. Returns: str: Appropriate prevention measures message. if risk_level == 'low': # Low risk level requires basic hygiene practices return \\"Maintain basic hygiene practices: wash hands regularly, clean surfaces.\\" elif risk_level == 'medium': # Medium risk requires additional caution, including separation of raw and cooked foods return \\"Implement moderate prevention measures: separate raw and cooked foods, use different utensils for different food types.\\" elif risk_level == 'high': # High risk calls for strict measures to prevent any form of cross-contamination return \\"Adopt stringent prevention measures: use color-coded cutting boards, sanitize all surfaces and utensils, stricter personal hygiene practices.\\" else: # Invalid risk level input return \\"Invalid risk level. Please provide 'low', 'medium', or 'high'.\\""},{"question":"Write a function called \`isSymmetric\` that takes in a 2D list (matrix) and returns \`True\` if it is symmetric, and \`False\` otherwise. A matrix is symmetric if it is equal to its transpose.","solution":"def isSymmetric(matrix): Returns True if the given 2D list (matrix) is symmetric, and False otherwise. A matrix is symmetric if it is equal to its transpose. :param matrix: List[List[int]] - 2D list representing the matrix. :return: bool - True if the matrix is symmetric, False otherwise. rows = len(matrix) for i in range(rows): for j in range(rows): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"I have an array of n integers and I need to find the subarray with the largest sum. However, I also want to know the range of that subarray (i.e., the starting and ending indices). Can you help me develop an algorithm in Python to solve this problem?","solution":"def max_subarray_sum(arr): Finds the subarray with the largest sum and returns both the sum and the range (start and end indices). Parameters: arr (list): List of integers. Returns: tuple: Maximum sum, start index, end index. if not arr: return 0, -1, -1 max_sum = current_sum = arr[0] start = end = current_start = 0 for i in range(1, len(arr)): if current_sum < 0: current_sum = arr[i] current_start = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = current_start end = i return max_sum, start, end"},{"question":"Write a Python function that first checks if a given string is a palindrome. After checking, the function should return \\"True\\" if the string is a palindrome and \\"False\\" if it isn't. Moreover, if the string is not a palindrome, the function should also suggest the next closest palindrome that requires the minimal number of character changes.","solution":"def is_palindrome(s): Checks if a given string is a palindrome. If not, suggests the closest palindrome. Args: s (str): Input string Returns: str: \\"True\\" if the string is a palindrome, otherwise \\"False\\" and the next closest palindrome. if s == s[::-1]: return \\"True\\" n = len(s) s_list = list(s) for i in range(n // 2): if s_list[i] != s_list[n - i - 1]: s_list[n - i - 1] = s_list[i] closest_palindrome = \\"\\".join(s_list) return f\\"False, closest palindrome: {closest_palindrome}\\""},{"question":"Write a function to implement the sequential search algorithm to find the maximum element in an array. The function should return the maximum element in the array.","solution":"def sequential_search_max(arr): Returns the maximum element in the array using a sequential search algorithm. :param arr: List of elements :return: The maximum element in the list if not arr: # If the list is empty, return None return None max_element = arr[0] for element in arr[1:]: if element > max_element: max_element = element return max_element"},{"question":"Generate a Python program to find the maximum element in a given array using divide-and-conquer strategy.","solution":"def find_maximum(arr): Finds the maximum element in an array using the divide-and-conquer strategy. def maximum_in_subarray(left, right): if left == right: # Base case: only one element return arr[left] mid = (left + right) // 2 left_max = maximum_in_subarray(left, mid) right_max = maximum_in_subarray(mid + 1, right) return max(left_max, right_max) if not arr: raise ValueError(\\"Array is empty\\") return maximum_in_subarray(0, len(arr) - 1)"},{"question":"Write a function in Python to remove all occurrences of the element with the value of 'apple' from the list, but without using the built-in remove() function.","solution":"def remove_all_apples(fruits): Returns a list with all occurrences of 'apple' removed from the input list 'fruits'. return [fruit for fruit in fruits if fruit != 'apple']"},{"question":"python3 code example for scraping website using BeautifulSoup","solution":"import requests from bs4 import BeautifulSoup def scrape_website(url): Scrapes the given URL and returns the text within the title of the page. :param url: URL of the website to scrape. :return: Text within the title tag of the page. response = requests.get(url) if response.status_code != 200: return None soup = BeautifulSoup(response.text, 'html.parser') title = soup.title.string if soup.title else None return title"},{"question":"Write a Python code that creates a dictionary where keys are the first five factorial numbers and their values are the Fibonacci numbers corresponding to the length of their binary representations. Additionally, include a function that computes the factorial and the Fibonacci sequence. Both functions must implement and use recursion.","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n-1) def fibonacci(n): Returns the nth Fibonacci number using recursion. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) def factorial_fibonacci_mapping(): Returns a dictionary where keys are the first five factorial numbers and values are the corresponding Fibonacci numbers based on the length of their binary representation. result = {} for i in range(1, 6): fact = factorial(i) binary_length = len(bin(fact)) - 2 # to remove '0b' prefix result[fact] = fibonacci(binary_length) return result"},{"question":"Write a function to determine if a given number is in a sorted array using binary search.","solution":"def binary_search(arr, x): Returns True if x is in the sorted array arr using binary search, otherwise False. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 # Check if x is present at mid if arr[mid] == x: return True # If x is greater, ignore left half elif arr[mid] < x: left = mid + 1 # If x is smaller, ignore right half else: right = mid - 1 # If we reach here, then the element was not present return False"},{"question":"Write a basic Socket program that listens and receives data from a socket connection in Python using the \`socket\` module. Ensure that your program can handle basic error cases.","solution":"import socket def start_socket_server(host='127.0.0.1', port=65432): Starts a simple socket server that listens for connections and receives data. :param host: The hostname or IP address to listen on (default is localhost). :param port: The port to listen on (default is 65432). with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.bind((host, port)) s.listen() print(f\\"Server listening on {host}:{port}\\") while True: try: conn, addr = s.accept() with conn: print(f\\"Connected by {addr}\\") while True: data = conn.recv(1024) if not data: break print(f\\"Received data: {data.decode('utf-8')}\\") conn.sendall(data) # Echo the data back to the client except socket.error as e: print(f\\"Socket error occurred: {e}\\") except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Create a random password generator in Python that outputs 15 characters of random alphanumeric characters, including at least one uppercase letter, one lowercase letter, and one special character.","solution":"import random import string def generate_random_password(length=15): Generates a random password of specified length containing at least one uppercase letter, one lowercase letter, one number, and one special character. if length < 4: raise ValueError(\\"Password length should be at least 4 to include all character types.\\") # Define character sets lowercase = string.ascii_lowercase uppercase = string.ascii_uppercase digits = string.digits special_characters = string.punctuation # Ensure the password has at least one of each type password = [ random.choice(lowercase), random.choice(uppercase), random.choice(digits), random.choice(special_characters) ] # Fill the rest of the password length with a mix of all character types all_characters = lowercase + uppercase + digits + special_characters password += random.choices(all_characters, k=length-4) # Shuffle to mix characters random.shuffle(password) return ''.join(password)"},{"question":"Write a Python program that outputs the length of the longest common substring between two input strings and identify the substring(s). Your program should also handle strings that do not share any common substring gracefully by outputting an appropriate message.","solution":"def longest_common_substring(str1, str2): Finds the length of the longest common substring between str1 and str2 and returns the substring(s) and their length. # Create a table to store the lengths of longest common suffixes of substrings. # LCSuff[i][j] contains the length of the longest common suffix of # str1[0..i-1] and str2[0..j-1]. m, n = len(str1), len(str2) LCSuff = [[0] * (n + 1) for _ in range(m + 1)] length = 0 # To store the length of the longest common substring end_pos = 0 # To store the ending index of the longest common substring in str1 # Build the LCSuff matrix in bottom-up fashion. for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: LCSuff[i][j] = 0 elif str1[i - 1] == str2[j - 1]: LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1 if length < LCSuff[i][j]: length = LCSuff[i][j] end_pos = i else: LCSuff[i][j] = 0 if length == 0: return \\"No common substring found.\\" # Extract the longest common substring longest_common_substring = str1[end_pos - length:end_pos] return longest_common_substring, length"},{"question":"Write a Python program that identifies the number of unique words in a sentence and sorts them in descending order based on their frequency. Also, ignore case sensitivity and punctuation while considering a word as unique. Example input: \\"Hello, Hello world","solution":"import re from collections import Counter def unique_words_sorted_by_frequency(sentence): Identifies the number of unique words in a sentence and sorts them in descending order based on their frequency. Ignores case sensitivity and punctuation. Args: sentence (str): The input sentence. Returns: List[Tuple[str, int]]: A list of tuples where each tuple contains a word and its frequency, sorted by frequency. # Remove punctuation and make all words lowercase cleaned_sentence = re.sub(r'[^ws]', '', sentence).lower() # Split the sentence into words words = cleaned_sentence.split() # Count the frequency of each word word_counter = Counter(words) # Sort the words based on frequency in descending order sorted_words = sorted(word_counter.items(), key=lambda x: x[1], reverse=True) return sorted_words"},{"question":"Create a python function that converts a given temperature in Fahrenheit to Kelvin, but without using any built-in conversion functions or formulas. The function should also round the result to the nearest integer and return it. Additionally, the function should handle both positive and negative Fahrenheit temperatures and account for the absolute temperature scale, where absolute zero is -459.67 degrees Fahrenheit. The function should also check if the given temperature is a valid number and raise an error if it is not. The function should have a time complexity of O(1) and space complexity of O(1).","solution":"def fahrenheit_to_kelvin(fahrenheit): Converts a given temperature in Fahrenheit to Kelvin, rounding to the nearest integer. Handles both positive and negative Fahrenheit temperatures and accounts for the absolute temperature scale. An error is raised if the given temperature is not a valid number. if not isinstance(fahrenheit, (int, float)): raise ValueError(\\"Temperature must be a number.\\") absolute_zero_f = -459.67 if fahrenheit < absolute_zero_f: raise ValueError(\\"Temperature must be above absolute zero (-459.67°F).\\") kelvin = (fahrenheit - 32) * 5/9 + 273.15 return round(kelvin)"},{"question":"Write a function to generate a random number from 1 to 100. Additionally, implement a feature that allows the user to specify a range within 1 to 100 from which the random number should be generated. The function should also handle any invalid range inputs by the user. Here is a piece of erroneous code for reference, identify the mistakes and correct them in your answer.","solution":"import random def generate_random_number(start=1, end=100): Generates a random number between start and end, inclusive. If the range is invalid, default to 1 to 100. if not (1 <= start <= end <= 100): start, end = 1, 100 return random.randint(start, end)"},{"question":"Translate the following Python code that calculates the factorial of a number into equivalent ARM assembly language.","solution":"def factorial(n): Computes the factorial of a non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n+1): result *= i return result"},{"question":"Given two text strings s and t, write a function to determine the maximal length of the identical subsequence shared by these two. This function should be optimized for performance, particularly for larger strings.","solution":"def longest_common_subsequence(s, t): Returns the length of the longest common subsequence shared by strings s and t. m, n = len(s), len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[m][n]"},{"question":"Generate a code to reverse a string without using any loop or recursion.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Create a function in Python to evaluate the given numpy array and return the maximum absolute difference of any two elements, where the difference is calculated by subtracting the smaller element from the larger element. The function should also ignore any elements that are divisible by both 3 and 5.","solution":"import numpy as np def max_absolute_difference(arr): Evaluates the given numpy array and returns the maximum absolute difference of any two elements, excluding elements divisible by both 3 and 5. # Filter out elements divisible by both 3 and 5 filtered_arr = arr[(arr % 3 != 0) | (arr % 5 != 0)] # Ensure array is not empty after filtering if len(filtered_arr) < 2: return 0 # Find the maximum and minimum elements in the filtered array max_element = np.max(filtered_arr) min_element = np.min(filtered_arr) # Return the absolute difference between max and min elements return abs(max_element - min_element)"},{"question":"Fibonacci sequence in Python using list comprehension vs for loop, which is faster?","solution":"import time # Function to generate Fibonacci sequence using list comprehension def fibonacci_list_comprehension(n): fib = [0, 1] [fib.append(fib[-2] + fib[-1]) for _ in range(2, n)] return fib[:n] # Function to generate Fibonacci sequence using for loop def fibonacci_for_loop(n): fib = [0, 1] for _ in range(2, n): fib.append(fib[-2] + fib[-1]) return fib[:n] # Function to compare the time of both methods def compare_fibonacci_methods(n): start_time = time.time() fibonacci_list_comprehension(n) list_comprehension_time = time.time() - start_time start_time = time.time() fibonacci_for_loop(n) for_loop_time = time.time() - start_time return list_comprehension_time, for_loop_time"},{"question":"Modify the following block of code to set a maximum length of the list. Additionally, ensure that the length of the list cannot exceed the maximum length. Finally, implement a custom sorting algorithm to sort the list in descending order.","solution":"class CustomList: def __init__(self, max_length): Initializes the CustomList with a maximum length. Args: max_length (int): The maximum allowable length of the list. self.max_length = max_length self.list = [] def add(self, item): Adds an item to the list if the list length is less than the specified maximum length. Args: item: Item to be added to the list. if len(self.list) < self.max_length: self.list.append(item) else: raise ValueError(\\"Cannot add more items. The list is at its maximum length.\\") def sort_descending(self): Sorts the list in descending order using a custom sorting algorithm. n = len(self.list) for i in range(n): for j in range(0, n-i-1): if self.list[j] < self.list[j+1]: self.list[j], self.list[j+1] = self.list[j+1], self.list[j] def get_list(self): Returns the current list. return self.list"},{"question":"Create a function to reverse a list without using the reverse() method, without using any built-in Python functions or methods, and without creating a new list or using additional data structures.","solution":"def reverse_list_in_place(lst): Reverses a list in place without using the reverse() method, built-in functions, or additional data structures. left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Use the flask web framework to create a simple web application that has one route \\"/\\" with a GET request. The route should accept a query parameter \\"name\\" and display \\"Hello, {name}\\" on the page.","solution":"from flask import Flask, request app = Flask(__name__) @app.route(\\"/\\", methods=[\\"GET\\"]) def hello(): name = request.args.get(\\"name\\", \\"World\\") return f\\"Hello, {name}\\""},{"question":"Write a Python program that takes user input of three numbers separated by a comma and space. The program should ensure that only numbers are inputted by the user and trigger an exception if invalid input is provided. Additionally, the program should check if all three numbers are integers and distinct, and then sort them in descending order. Lastly, the program should output the list of sorted numbers.","solution":"def process_and_sort_numbers(input_str): Takes a string of three numbers separated by a comma and space, validates that all inputs are integers and distinct, and returns them sorted in descending order. :param input_str: str : input string in the format 'num1, num2, num3' :return: list of integers sorted in descending order try: # Split the input string and convert to integers numbers = [int(x) for x in input_str.split(', ')] # Check if there are exactly three numbers if len(numbers) != 3: raise ValueError(\\"Input must contain exactly three numbers.\\") # Check if numbers are distinct if len(set(numbers)) != 3: raise ValueError(\\"All three numbers must be distinct.\\") # Sort numbers in descending order sorted_numbers = sorted(numbers, reverse=True) return sorted_numbers except ValueError as e: raise ValueError(f\\"Invalid input: {e}\\")"},{"question":"Reverse a linked list in place, but with the constraint that you are not allowed to use any additional data structures and the solution must have a time complexity of O(n).","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a linked list in place. :param head: ListNode, the head of the linked list. :return: ListNode, the new head of the reversed linked list. prev = None current = head while current: next_node = current.next # temporarily store the next node current.next = prev # reverse the current node's pointer prev = current # move the prev pointer one step forward current = next_node # move the current pointer one step forward return prev # prev will be the new head"},{"question":"I want to create a program to print the nth row of Pascal's triangle. How can I do this using Python?","solution":"def get_pascals_triangle_row(n): Returns the nth row of Pascal's Triangle. :param n: Row index (0-based) :return: List representing the nth row row = [1] for k in range(1, n + 1): row.append(row[k - 1] * (n - k + 1) // k) return row"},{"question":"Design a function in Python to toggle whether a webpage is displayed in light or dark mode, and implement a persistent mechanism to save the user's preference for the mode across different sessions. Add an animation effect when switching between the two modes and ensure that the change in mode does not trigger a page refresh.","solution":"def toggle_mode(current_mode: str) -> str: Toggles the display mode between light and dark. Parameters: - current_mode (str): The current mode, either 'light' or 'dark'. Returns: - str: The new mode opposite to the current mode. if current_mode not in ('light', 'dark'): raise ValueError(\\"Invalid mode. Mode should be either 'light' or 'dark'.\\") return 'dark' if current_mode == 'light' else 'light'"},{"question":"Create a code to format the given text using a given indentation level and remove all consecutive duplicate characters in the text. Additionally, count the number of occurrences of each character in the formatted text and return a dictionary containing the character and its count.","solution":"def format_text(text, indentation): Formats the given text by removing consecutive duplicate characters and inserting the specified indentation at the beginning of each line. Also counts the number of occurrences of each character in the formatted text. Args: text (str): The input text to format. indentation (int): The number of spaces to insert at the beginning of each line. Returns: tuple: A tuple containing the formatted text and a dictionary with the character counts. # Remove consecutive duplicate characters formatted_text = [] last_char = '' for char in text: if char != last_char: formatted_text.append(char) last_char = char formatted_text = ''.join(formatted_text) # Add indentation indented_formatted_text = (' ' * indentation) + formatted_text # Count occurrences of each character char_count = {} for char in indented_formatted_text: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return indented_formatted_text, char_count"},{"question":"Create a robust function named 'restoreDeletedPosts' that can handle a complex scenario where a social media platform is under attack by hackers. The platform is facing an issue where the hackers are deleting all user posts that contain a specific keyword, however, the keyword being targeted by the hackers is not a common word and is specific to the platform's user base. The function should retrieve deleted posts from a backup folder located at the given file path and restore them to the user's account, but only if the post was created after a certain date specified as a fourth parameter. The function should accept three parameters - the user ID, the targeted keyword and the file path to the backup folder and the date in the format of 'YYYY-MM-DD'. The function should also handle cases where the backup folder may contain duplicates of the same deleted post, and should only restore the post once.","solution":"import os from datetime import datetime def restoreDeletedPosts(user_id, keyword, backup_folder_path, target_date_str): Restores deleted posts which contain a specific keyword, created after a given date. Args: user_id (str): The ID of the user. keyword (str): The specific keyword targeted by hackers. backup_folder_path (str): The path to the backup folder. target_date_str (str): The date after which posts should be restored (in 'YYYY-MM-DD' format). Returns: List[str]: List of restored post contents. target_date = datetime.strptime(target_date_str, '%Y-%m-%d') restored_posts = set() for root, dirs, files in os.walk(backup_folder_path): for file in files: if file.endswith('.txt'): file_path = os.path.join(root, file) with open(file_path, 'r') as f: post_data = f.read() post_date_str, post_content = post_data.split('n', 1) post_date = datetime.strptime(post_date_str, '%Y-%m-%d') if keyword in post_content and post_date > target_date: restored_posts.add(post_content) return list(restored_posts)"},{"question":"Given input string s, write a function \`non_empty_substrings(s)\` that returns all possible non-empty substrings of \`s\` in lexicographical order. Ensure there are no duplicates in the output list.","solution":"def non_empty_substrings(s): Returns all possible non-empty substrings of the input string s in lexicographical order without duplicates. substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return sorted(list(substrings))"},{"question":"Design a Python function for recursive bubble sort in a linked list environment. The function should adhere to the non-mutating principle, meaning it should not modify the original list, thereby returning a new sorted linked list instead. Additionally, incorporate functionality to ascertain the reversal of the list, deciding whether to sort in ascending or descending order, based on a boolean input parameter.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def bubble_sort_recursive(head, reverse=False): Recursive bubble sort for linked list. :param head: ListNode, head of the linked list :param reverse: bool, if True sort in descending order :return: ListNode, head of the newly sorted linked list if not head or not head.next: return head swapped = False dummy = ListNode(0) dummy.next = head prev, current = dummy, dummy.next while current.next: if (not reverse and current.val > current.next.val) or (reverse and current.val < current.next.val): swapped = True next_node = current.next current.next = next_node.next next_node.next = current prev.next = next_node current = next_node prev = current current = current.next if swapped: return bubble_sort_recursive(dummy.next, reverse) return dummy.next"},{"question":"So I've been working on this Python program and I want to selectively access specific values from a list. Can you assist me in constructing a function that retrieves the element at a given index from a list and returns it? Moreover, I'd like to include error handling to manage scenarios where the index is out of range or the data type is incorrect. Could you also include a main function to demonstrate the usage of this utility function with some examples?","solution":"def get_element_at_index(my_list, index): Returns the element at a given index from a list. Args: my_list (list): The list from which to retrieve the element. index (int): The index of the element to retrieve. Returns: The element at the specified index in the list. Raises: IndexError: If the index is out of range. TypeError: If the index is not an integer or the provided list is not a list. if not isinstance(my_list, list): raise TypeError('First argument must be a list.') if not isinstance(index, int): raise TypeError('Index must be an integer.') if index < 0 or index >= len(my_list): raise IndexError('Index out of range.') return my_list[index] def main(): # Example usage of get_element_at_index function sample_list = [10, 20, 30, 40, 50] try: print(f\\"Element at index 2: {get_element_at_index(sample_list, 2)}\\") print(f\\"Element at index 4: {get_element_at_index(sample_list, 4)}\\") print(f\\"Element at index 5: {get_element_at_index(sample_list, 5)}\\") # This will raise an IndexError except (IndexError, TypeError) as e: print(f\\"Error: {e}\\") if __name__ == \\"__main__\\": main()"},{"question":"Create a function in Python to split a given string into a list of strings using a comma as a delimiter. However, make sure to handle cases where there are multiple consecutive spaces in the string and remove any leading or trailing spaces. Additionally, the function should ignore any commas that are inside double quotation marks and consider them as part of the string. Lastly, the function should return a dictionary where the keys are the elements in the string and the values are the number of times each element appears in the string.","solution":"import re from collections import Counter def process_string(input_string): Splits a given string into a list of strings using a comma as a delimiter, ignoring commas inside double quotes, and handles multiple consecutive spaces. Returns a dictionary with elements as keys and their frequencies as values. # Remove leading and trailing spaces and handle multiple consecutive spaces. input_string = input_string.strip() input_string = re.sub(r's+', ' ', input_string) # Split the string while respecting quoted substrings with commas. pattern = re.compile(r'''\\"([^\\"]*)\\"|[^,s]+''') elements = [] for match in pattern.finditer(input_string): if match.group(1): elements.append(match.group(1)) else: elements.append(match.group(0)) # Remove any additional leading/trailing spaces within the elements elements = [element.strip() for element in elements] # Create a frequency dictionary frequency_dict = Counter(elements) return frequency_dict"},{"question":"Given two lists of integers, arr1 and arr2, write a function called \\"merge_sorted_lists\\" that merges the two lists into a single sorted list. The resulting list should be sorted in non-decreasing order. Do not use any built-in sorting functions or libraries.","solution":"def merge_sorted_lists(arr1, arr2): Merges two sorted lists into a single sorted list in non-decreasing order. merged_list = [] i = j = 0 # Merge input lists until one becomes empty while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_list.append(arr1[i]) i += 1 else: merged_list.append(arr2[j]) j += 1 # Append the remaining elements of arr1, if any while i < len(arr1): merged_list.append(arr1[i]) i += 1 # Append the remaining elements of arr2, if any while j < len(arr2): merged_list.append(arr2[j]) j += 1 return merged_list"},{"question":"Construct a Python function that accepts an array of integers as an argument and returns a list where each element is the product of all elements in the input list except the element at the current index. Additionally, write test cases for your function to ensure its correctness. You cannot use division in your solution.","solution":"def product_except_self(nums): Given an array nums of n integers, this function returns an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. length = len(nums) # Initialize two arrays for left and right products respectively left_products = [1] * length right_products = [1] * length result = [1] * length # Fill the left products array for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill the right products array for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Fill the result array by multiplying left and right products for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"I have a set of integers that I want to sort in ascending order using a Python function. Can you write a function that will accomplish this task? Please ensure that your function is named 'ascending_sort' and accepts a list of integers as input. The function should return a list of integers sorted in ascending order. Additionally, please include a sample set of integers and the expected output in your solution.","solution":"def ascending_sort(lst): Returns the list sorted in ascending order. return sorted(lst) # Sample set of integers and expected output sample_set = [5, 2, 9, 1, 5, 6] expected_output = [1, 2, 5, 5, 6, 9]"},{"question":"I want to generate a list of prime numbers between two given numbers. Can you provide a code for that in Python?","solution":"def is_prime(n): Check if a number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def prime_numbers_between(a, b): Returns a list of prime numbers between a and b (exclusive). return [x for x in range(a+1, b) if is_prime(x)]"},{"question":"Write a Python function to merge two strings together without using any built-in functions or '+' operator. Additionally, write another function to reverse the merged string and then sort the characters in ascending order, again without using any built-in functions like reverse() or sort().","solution":"def merge_strings(str1, str2): Merges two strings together by appending characters of str2 to str1. merged = \\"\\" for char in str1: merged += char for char in str2: merged += char return merged def reverse_and_sort_string(s): Reverses the input string and sorts the characters in ascending order. # Reverse the string n = len(s) reversed_s = \\"\\" for i in range(n - 1, -1, -1): reversed_s += s[i] # Sort the reversed string sorted_s = \\"\\" while len(reversed_s) > 0: min_char = reversed_s[0] min_index = 0 for i in range(1, len(reversed_s)): if reversed_s[i] < min_char: min_char = reversed_s[i] min_index = i sorted_s += min_char reversed_s = reversed_s[:min_index] + reversed_s[min_index + 1:] return sorted_s"},{"question":"Given two sets, A and B, write a Python program to find the set of all possible ordered pairs (a, b) where a is an element of A and b is an element of B. Then, modify the program to exclude any pairs where the sum of a and b is less than a given threshold value, which is provided as an additional input to the program.","solution":"def ordered_pairs(A, B, threshold): Returns a set of all possible ordered pairs (a, b) such that a is in A and b is in B, and a + b is greater than or equal to the given threshold. return {(a, b) for a in A for b in B if a + b >= threshold} # Example use case: # A = {1, 2} # B = {3, 4} # threshold = 5 # The result should be {(1, 4), (2, 3), (2, 4)} because the pairs (1, 3) do not satisfy the threshold condition"},{"question":"Write a Python program that creates a basic calculator. The calculator should have the following functions: addition, subtraction, multiplication, and division. Make sure the program handles the case when the user inputs '0' as the divisor in the division function. Additionally, implement error handling for when the user enters non-numeric values.","solution":"def add(a, b): try: a, b = float(a), float(b) return a + b except ValueError: return \\"Invalid input! Please enter numeric values.\\" def subtract(a, b): try: a, b = float(a), float(b) return a - b except ValueError: return \\"Invalid input! Please enter numeric values.\\" def multiply(a, b): try: a, b = float(a), float(b) return a * b except ValueError: return \\"Invalid input! Please enter numeric values.\\" def divide(a, b): try: a, b = float(a), float(b) if b == 0: return \\"Division by zero is not allowed.\\" return a / b except ValueError: return \\"Invalid input! Please enter numeric values.\\""},{"question":"Craft a sequence displaying the initial 10 numbers in the Fibonacci series, utilizing any coding language. Instead of using arrays, implement the code using recursion and without the assistance of any libraries or built-in functions specifically designed for the Fibonacci sequence. Additionally, include a functionality to calculate the sum of the first 10 Fibonacci numbers.","solution":"def fib(n): Recursively calculates the n-th Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 else: return fib(n-1) + fib(n-2) def fib_sequence(n_terms): Generates the first n_terms of the Fibonacci sequence. sequence = [] for i in range(n_terms): sequence.append(fib(i)) return sequence def sum_fib_sequence(sequence): Calculates the sum of a list of numbers. total = 0 for num in sequence: total += num return total # Generate the first 10 numbers of the Fibonacci sequence sequence = fib_sequence(10) # Sum the first 10 numbers of the Fibonacci sequence sum_of_sequence = sum_fib_sequence(sequence) sequence, sum_of_sequence"},{"question":"Write a simple python code that given a number N, print all prime numbers till N.","solution":"def is_prime(num): Returns True if the number is prime, otherwise False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def print_primes_till_n(n): Given a number N, print all prime numbers till N. primes = [i for i in range(2, n+1) if is_prime(i)] return primes"},{"question":"Create for me a python regex that checks if a string has zipcodes in the format of 12345-1234 or 12345. It should return true if any occur and false otherwise.","solution":"import re def contains_zipcode(text): Checks if a string contains a zipcode in the format 12345-1234 or 12345. :param text: The input string to check. :return: True if a zipcode is found, False otherwise. pattern = r'bd{5}(-d{4})?b' return bool(re.search(pattern, text))"},{"question":"Write a python code to solve for the roots of a quadratic equation. Your code should handle complex roots and have a mechanism to check if the inputs are valid for a quadratic equation (for example, it should handle cases where the coefficient of the quadratic term is zero). Additionally, implement your solution in a class called \\"QuadraticEquationSolver\\".","solution":"import cmath class QuadraticEquationSolver: def __init__(self, a, b, c): if a == 0: raise ValueError(\\"Coefficient 'a' cannot be zero for a quadratic equation.\\") self.a = a self.b = b self.c = c def solve(self): Solves the quadratic equation ax^2 + bx + c = 0 and returns the roots. Handles complex roots. discriminant = (self.b ** 2) - (4 * self.a * self.c) root1 = (-self.b + cmath.sqrt(discriminant)) / (2 * self.a) root2 = (-self.b - cmath.sqrt(discriminant)) / (2 * self.a) return root1, root2"},{"question":"Given a string containing mixed uppercase, lowercase letters, and special characters, create a dictionary in Python mapping the uppercase English alphabet letters to their corresponding ordinal values ranging from 1 to 26. Additionally, write a function that takes this string as an input, processes it character by character, and replaces uppercase letters with their corresponding values from the dictionary. Other characters (lowercase letters and special characters) should remain the same in the output string.","solution":"def create_uppercase_dict(): uppercase_dict = {chr(i): i - ord('A') + 1 for i in range(ord('A'), ord('Z') + 1)} return uppercase_dict def replace_uppercase(input_string): uppercase_dict = create_uppercase_dict() result = \\"\\" for char in input_string: if char in uppercase_dict: result += str(uppercase_dict[char]) else: result += char return result"},{"question":"Write a function in Python that takes a list of strings and returns a list of integers indicating the number of vowels in the corresponding string.","solution":"def count_vowels(strings): Takes a list of strings and returns a list of integers indicating the number of vowels in each corresponding string. Parameters: strings (list): List of strings to analyze. Returns: List: List of integers representing the number of vowels in each string. vowels = set('aeiouAEIOU') result = [] for string in strings: count = sum(1 for char in string if char in vowels) result.append(count) return result"},{"question":"Write a program in Python that calculates net salary from gross salary after deducting taxes (use 30% tax rate) and adding benefits (use a fixed benefit amount of 1000).","solution":"def calculate_net_salary(gross_salary): Calculate net salary from gross salary by deducting a 30% tax and adding 1000 as benefits. Args: gross_salary (float): The gross salary. Returns: float: The net salary. tax_rate = 0.30 benefit_amount = 1000.0 taxes = gross_salary * tax_rate net_salary = gross_salary - taxes + benefit_amount return net_salary"},{"question":"Develop a Python function configured to construct a novel dictionary. This dictionary should precisely possess the identical keys as an originally provided dictionary, though, with a noteworthy difference in their associated values. Instead of direct values, each key should now correlate to a list that includes all the alphabet letters from the English language, thereby significantly expanding the informational landscape that each key-value pair in the dictionary can embody.","solution":"def transform_dict_to_alphabet_values(input_dict): Transforms the input dictionary to a new dictionary where every key maps to a list of all alphabet letters. Parameters: input_dict (dict): The original dictionary with any values. Returns: dict: A new dictionary with the same keys but values as lists of alphabet letters. alphabet = list('abcdefghijklmnopqrstuvwxyz') return {key: alphabet for key in input_dict.keys()}"},{"question":"Given two strings S and T, write a Python program to check if string T is a rotated version of string S.","solution":"def is_rotated_version(S, T): Check if the string T is a rotated version of string S. :param S: Original string :param T: String to check if it is a rotated version of S :return: True if T is a rotated version of S, False otherwise if len(S) != len(T): return False concatenated = S + S return T in concatenated"},{"question":"write a simple Flask python code that has one endpoint that accepts post request with json payload and updates a provided global dictionary variable with the contents of the payload","solution":"from flask import Flask, request, jsonify app = Flask(__name__) # Global dictionary that will be updated global_dict = {} @app.route('/update_dict', methods=['POST']) def update_dict(): data = request.get_json() global global_dict global_dict.update(data) return jsonify(global_dict) if __name__ == \\"__main__\\": app.run(debug=True)"},{"question":"Given three lists in Python, design and implement a function that combines elements from all the lists into a single list. Ensure that the combination is not a mere concatenation, but rather a well-interleaved one, where elements are taken one by one while preserving the original order of elements within their respective lists as much as possible.","solution":"def interleave_lists(list1, list2, list3): Combines elements from list1, list2, and list3 into a single interleaved list. Args: list1 (list): The first list to interleave. list2 (list): The second list to interleave. list3 (list): The third list to interleave. Returns: list: A new list with elements from list1, list2, and list3 interleaved. interleaved_list = [] max_length = max(len(list1), len(list2), len(list3)) for i in range(max_length): if i < len(list1): interleaved_list.append(list1[i]) if i < len(list2): interleaved_list.append(list2[i]) if i < len(list3): interleaved_list.append(list3[i]) return interleaved_list"},{"question":"Please write a Python function that takes a list of integers as input and returns the sum of all even numbers in the list. Make sure to include a docstring that fully describes the problem and how the function works. Additionally, make the function name and variable names more specific to the task being performed. Finally, add several test cases to demonstrate the correctness of your function, including edge cases like empty lists or lists with no even numbers.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the given list. Parameters: numbers (list): A list of integers. Returns: int: The sum of all even integers in the list. If the list is empty or contains no even numbers, returns 0. return sum(number for number in numbers if number % 2 == 0)"},{"question":"Write a Python code snippet to get the first 1000 prime numbers, but with a time complexity of O(n^2) or better.","solution":"def generate_primes(n): Generates the first n prime numbers. primes = [] num = 2 # Starting from the first prime number while len(primes) < n: is_prime = True for p in primes: if num % p == 0: is_prime = False break if is_prime: primes.append(num) num += 1 return primes # Get the first 1000 prime numbers first_1000_primes = generate_primes(1000) # Printing the first 10 primes to verify print(first_1000_primes[:10])"},{"question":"Write a Python program that utilizes a generator function to print the first n prime numbers.","solution":"def is_prime(num): Check if a number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_generator(n): Generator function to yield the first n prime numbers. count, current = 0, 2 while count < n: if is_prime(current): yield current count += 1 current += 1"},{"question":"Write a Python function that computes the maximum of three numbers. Additionally, debug the following erroneous code that attempts to solve the problem, and explain what is wrong with it.","solution":"def max_of_three(a, b, c): Returns the maximum of three numbers a, b, and c. return max(a, b, c)"},{"question":"Create a Python function that takes a list of strings as input and returns a new list containing the number of uppercase letters in each string from the input list.","solution":"def count_uppercase_letters(strings): Takes a list of strings and returns a list containing the number of uppercase letters in each string. Parameters: strings (list of str): List of strings to analyze. Returns: list of int: List containing the number of uppercase letters in each input string. return [sum(1 for char in string if char.isupper()) for string in strings]"},{"question":"Write code for displaying the Fibonacci sequence up to the nth term, where the nth term is provided as input by the user. Additionally, implement a method to calculate the sum of all the Fibonacci numbers up to the nth term and display it. The code should be written in a way that ensures the time complexity of the Fibonacci sequence generation is O(n) and the space complexity is O(1). The implementation should also handle edge cases, such as negative input for the nth term, by displaying an error message.","solution":"def fibonacci_sequence(n): Generate the Fibonacci sequence up to the nth term and return the sequence as a list. Args: n (int): The number of terms in the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to the nth term. if n <= 0: raise ValueError(\\"The input must be a positive integer\\") # Base cases if n == 1: return [0] if n == 2: return [0, 1] # Iteratively create the Fibonacci sequence (space complexity O(1)) sequence = [0, 1] a, b = 0, 1 for _ in range(2, n): a, b = b, a + b sequence.append(b) return sequence def sum_fibonacci_sequence(n): Calculate the sum of the Fibonacci sequence up to the nth term. Args: n (int): The number of terms in the Fibonacci sequence to sum. Returns: int: The sum of the Fibonacci sequence up to the nth term. sequence = fibonacci_sequence(n) return sum(sequence)"},{"question":"Create a Python function that takes an array of strings and returns a dictionary whose keys are the strings and the values are the lengths of the strings. The function should also remove any duplicate strings from the input array before processing it.","solution":"def string_lengths(arr): Takes an array of strings, removes duplicates, and returns a dictionary with strings as keys and their lengths as values. unique_strings = list(set(arr)) # Remove duplicate strings return {string: len(string) for string in unique_strings}"},{"question":"Can you write a function in Python that removes consecutive repeating characters in a given string, while keeping the first character of each sequence of repeating characters intact?","solution":"def remove_consecutive_repeats(s): Removes consecutive repeating characters in a given string, while keeping the first character of each sequence of repeating characters intact. if not s: return s result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return ''.join(result)"},{"question":"How can I create an animation in Python that displays a rotating 3D cube?","solution":"import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D import matplotlib.animation as animation def rotate_cube(): fig = plt.figure() ax = fig.add_subplot(111, projection='3d') # Define the vertices of a cube vertices = np.array([[-1, -1, -1], [ 1, -1, -1], [ 1, 1, -1], [-1, 1, -1], [-1, -1, 1], [ 1, -1, 1], [ 1, 1, 1], [-1, 1, 1]]) # Define the edges of the cube edges = [[0, 1], [1, 2], [2, 3], [3, 0], [4, 5], [5, 6], [6, 7], [7, 4], [0, 4], [1, 5], [2, 6], [3, 7]] def update(num): ax.cla() angle = np.deg2rad(num) rotation_matrix = np.array([[np.cos(angle), -np.sin(angle), 0], [np.sin(angle), np.cos(angle), 0], [0, 0, 1]]) rotated_vertices = np.dot(vertices, rotation_matrix.T) for edge in edges: points = rotated_vertices[edge, :] ax.plot(points[:, 0], points[:, 1], points[:, 2], color='b') ax.set_xlim([-2, 2]) ax.set_ylim([-2, 2]) ax.set_zlim([-2, 2]) ani = animation.FuncAnimation(fig, update, frames=360, interval=50) plt.show() # Call the function to run the animation rotate_cube()"},{"question":"Write a program to create a 2D array of size n x n, where each row and column should sum up to a constant value. Your program should generate the array with the smallest possible integer values, and none of the rows and columns should have duplicate numbers. Your program should also print the array.","solution":"def generate_magic_square(n): Generates a n x n 2D array (magic square) where each row and column sums up to a constant value and prints it. if n % 2 == 0: raise ValueError(\\"Magic square is only possible for odd numbers.\\") magic_square = [[0] * n for _ in range(n)] num = 1 i, j = 0, n // 2 while num <= n * n: magic_square[i][j] = num num += 1 new_i, new_j = (i - 1) % n, (j + 1) % n if magic_square[new_i][new_j]: i += 1 else: i, j = new_i, new_j for row in magic_square: print(\\" \\".join(str(x) for x in row)) return magic_square"},{"question":"Create a program that encrypts the text \\"Hello World!\\" using a substitution cipher with a key that is generated randomly every time the program is run. The key should be a permutation of the alphabet and should not have any repeated letters. Additionally, the program should also include a decryption function that can decrypt the encrypted text using the same key.","solution":"import random import string def generate_key(): Generates a random permutation of the alphabet. alphabet = list(string.ascii_lowercase) random.shuffle(alphabet) return ''.join(alphabet) def encrypt(text, key): Encrypts the text using the given substitution key. text = text.lower() alphabet = string.ascii_lowercase encrypted_text = '' for char in text: if char in alphabet: encrypted_text += key[alphabet.index(char)] else: encrypted_text += char return encrypted_text def decrypt(encrypted_text, key): Decrypts the text using the given substitution key. alphabet = string.ascii_lowercase decrypted_text = '' for char in encrypted_text: if char in key: decrypted_text += alphabet[key.index(char)] else: decrypted_text += char return decrypted_text # Example usage key = generate_key() text = \\"Hello World!\\" encrypted = encrypt(text, key) decrypted = decrypt(encrypted, key) print(f\\"Key: {key}\\") print(f\\"Original: {text}\\") print(f\\"Encrypted: {encrypted}\\") print(f\\"Decrypted: {decrypted}\\")"},{"question":"Create a mini-library in Python that contains a set of functions for matrix manipulations. It should include functions for addition, scalar multiplication, matrix multiplication, and finding the transpose.","solution":"def add_matrices(A, B): Adds two matrices A and B. Parameters: A (list of list of int/float): first matrix B (list of list of int/float): second matrix Returns: list of list of int/float: resultant matrix after addition rows, cols = len(A), len(A[0]) return [[A[i][j] + B[i][j] for j in range(cols)] for i in range(rows)] def scalar_multiply(scalar, A): Multiplies a matrix A by a scalar. Parameters: scalar (int/float): the scalar value A (list of list of int/float): the matrix Returns: list of list of int/float: resultant matrix after scalar multiplication rows, cols = len(A), len(A[0]) return [[scalar * A[i][j] for j in range(cols)] for i in range(rows)] def matrix_multiply(A, B): Multiplies two matrices A and B. Parameters: A (list of list of int/float): first matrix B (list of list of int/float): second matrix Returns: list of list of int/float: resultant matrix after multiplication rows_A, cols_A = len(A), len(A[0]) rows_B, cols_B = len(B), len(B[0]) # Initialize the result matrix with zeros result = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result def transpose_matrix(A): Returns the transpose of a matrix A. Parameters: A (list of list of int/float): the matrix Returns: list of list of int/float: transpose of the given matrix return [list(row) for row in zip(*A)]"},{"question":"I have two strings: \\"ABCD\\" and \\"CDAB\\". I hear Python's cyclic permutation could help determine if one string is a cyclic permutation of another. Could you write a Python function to check this?","solution":"def is_cyclic_permutation(s1, s2): Returns True if s2 is a cyclic permutation of s1, otherwise returns False. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Write a function in Python that prints all the elements of a given square matrix one by one, row wise.","solution":"def print_matrix_elements(matrix): Prints all elements of a square matrix one by one, row wise. Parameters: matrix (list of lists): A square matrix. for row in matrix: for element in row: print(element)"},{"question":"Given a string s and an integer k, write a code to find the kth most frequent word with a length of at least 5 characters in the string. Consider that the string can contain any printable ASCII characters, including punctuation marks and special characters.","solution":"import re from collections import Counter def kth_most_frequent_long_word(s, k): Finds the kth most frequent word with at least 5 characters in the string s. :param s: Input string :param k: The rank of frequency to find :return: The kth most frequent word or None if not found words = re.findall(r'bw{5,}b', s) word_counts = Counter(words) common_words = word_counts.most_common() if k <= 0 or k > len(common_words): return None return common_words[k-1][0]"},{"question":"I want to create a library in Python for working with 3D geometric transformations. These transformations should include functions for translation, rotation (around the x, y, and z axes), scaling, and reflection. The library should utilize NumPy for efficient numerical calculations. Can you provide guidance on how to structure and implement this library?","solution":"import numpy as np def translate(point, dx, dy, dz): Translates a point in 3D space by dx, dy, dz. translation_matrix = np.array([ [1, 0, 0, dx], [0, 1, 0, dy], [0, 0, 1, dz], [0, 0, 0, 1] ]) point_homogeneous = np.append(point, 1) translated_point = np.dot(translation_matrix, point_homogeneous) return translated_point[:3] def rotate_x(point, angle): Rotates a point around the x-axis by the given angle (in radians). cos_theta = np.cos(angle) sin_theta = np.sin(angle) rotation_matrix = np.array([ [1, 0, 0, 0], [0, cos_theta, -sin_theta, 0], [0, sin_theta, cos_theta, 0], [0, 0, 0, 1] ]) point_homogeneous = np.append(point, 1) rotated_point = np.dot(rotation_matrix, point_homogeneous) return rotated_point[:3] def rotate_y(point, angle): Rotates a point around the y-axis by the given angle (in radians). cos_theta = np.cos(angle) sin_theta = np.sin(angle) rotation_matrix = np.array([ [cos_theta, 0, sin_theta, 0], [0, 1, 0, 0], [-sin_theta, 0, cos_theta, 0], [0, 0, 0, 1] ]) point_homogeneous = np.append(point, 1) rotated_point = np.dot(rotation_matrix, point_homogeneous) return rotated_point[:3] def rotate_z(point, angle): Rotates a point around the z-axis by the given angle (in radians). cos_theta = np.cos(angle) sin_theta = np.sin(angle) rotation_matrix = np.array([ [cos_theta, -sin_theta, 0, 0], [sin_theta, cos_theta, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1] ]) point_homogeneous = np.append(point, 1) rotated_point = np.dot(rotation_matrix, point_homogeneous) return rotated_point[:3] def scale(point, sx, sy, sz): Scales a point in 3D space by sx, sy, sz. scaling_matrix = np.array([ [sx, 0, 0, 0], [0, sy, 0, 0], [0, 0, sz, 0], [0, 0, 0, 1] ]) point_homogeneous = np.append(point, 1) scaled_point = np.dot(scaling_matrix, point_homogeneous) return scaled_point[:3] def reflect(point, plane='xy'): Reflects a point in 3D space in the specified plane ('xy', 'xz', 'yz'). if plane == 'xy': reflection_matrix = np.array([ [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1] ]) elif plane == 'xz': reflection_matrix = np.array([ [1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1] ]) elif plane == 'yz': reflection_matrix = np.array([ [-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1] ]) else: raise ValueError(\\"Invalid plane argument. Expected 'xy', 'xz', or 'yz'\\") point_homogeneous = np.append(point, 1) reflected_point = np.dot(reflection_matrix, point_homogeneous) return reflected_point[:3]"},{"question":"Create a function in Python that takes two parameters a and b and returns the product of the two. However, you are not allowed to use the multiplication operator (*) or any built-in Python functions that directly handle multiplication. You should instead implement your own logic to multiply the two numbers.","solution":"def multiply(a, b): Returns the product of a and b without using the multiplication operator (*) or built-in multiplication functions. # Determine the sign of the result positive = (a < 0) == (b < 0) # Take the absolute values of a and b a = abs(a) b = abs(b) # Perform the multiplication using repeated addition result = 0 for _ in range(b): result += a # Adjust the sign of the result if not positive: result = -result return result"},{"question":"Write a code that takes the input of two strings, and returns the longest common substring in them. However, you are not allowed to use any built-in string manipulation functions or libraries. You can only use basic operations such as loops, conditionals, and arithmetic.","solution":"def longest_common_substring(s1, s2): Finds the longest common substring between two strings s1 and s2. max_length = 0 longest_substring = \\"\\" for i in range(len(s1)): for j in range(len(s2)): l = 0 while (i + l < len(s1)) and (j + l < len(s2)) and (s1[i + l] == s2[j + l]): l += 1 if l > max_length: max_length = l longest_substring = \\"\\" for k in range(l): longest_substring += s1[i + k] return longest_substring"},{"question":"Can you write a simple encryption function for strings that shifts every letter by one in the alphabet (A->B, B->C, ... Z->A)?","solution":"def shift_encrypt(text): Encrypts the given text by shifting each letter by one position in the alphabet. Non-letter characters are not modified. result = [] for char in text: if char.isalpha(): if char.islower(): # handle lowercase letters new_char = chr(((ord(char) - ord('a') + 1) % 26) + ord('a')) elif char.isupper(): # handle uppercase letters new_char = chr(((ord(char) - ord('A') + 1) % 26) + ord('A')) result.append(new_char) else: # non-letter characters remain unchanged result.append(char) return ''.join(result)"},{"question":"Create a function that takes a list of numbers as an argument and then modifies the list so that all the even numbers in it are doubled, whereas all the odd numbers are replaced with their square root (rounded down to the nearest integer). Test your function using the given array arr = [2, 3, 4, 5, 6, 7, 8] and make sure it returns a new array with the correct value.","solution":"import math def modify_list(numbers): Modifies the list so that all even numbers are doubled, whereas all odd numbers are replaced with their square root (rounded down to the nearest integer). Args: numbers (list): List of numbers. Returns: list: Modified list. return [number * 2 if number % 2 == 0 else math.isqrt(number) for number in numbers]"},{"question":"Write a function to print out all possible permutations of a list of numbers, but do not use any built-in functions or libraries for generating permutations. Additionally, your solution should have a time complexity of O(n!) and should also handle duplicate numbers in the list without generating duplicate permutations.","solution":"def permute_unique(nums): Generates all unique permutations of the list nums. def backtrack(start, end): if start == end: result.add(tuple(nums[:])) for i in range(start, end): if i != start and nums[start] == nums[i]: continue nums[start], nums[i] = nums[i], nums[start] backtrack(start + 1, end) nums[start], nums[i] = nums[i], nums[start] nums.sort() result = set() backtrack(0, len(nums)) return [list(p) for p in result]"},{"question":"Given two lists of integers, list1 and list2, write a Python function to find the difference (list1 - list2) between the two lists.","solution":"def list_difference(list1, list2): Returns the difference between list1 and list2. Elements are considered once per occurrence in list1. result = [] for item in list1: if item in list2: list2.remove(item) else: result.append(item) return result"},{"question":"Please design a function in Python that can be used to calculate the intersection area of two rectangles and implement an algorithm to check if they overlap. The input for the function will be the coordinates of the vertices of the two rectangles.","solution":"def intersection_area(rect1, rect2): Calculates the intersection area of two rectangles. Each rectangle is defined by the coordinates of its bottom-left and top-right corners. Arguments: rect1 -- tuple (x1, y1, x2, y2) where (x1, y1) are the coordinates of the bottom-left corner and (x2, y2) are the coordinates of the top-right corner of the first rectangle. rect2 -- tuple (x1, y1, x2, y2) where (x1, y1) are the coordinates of the bottom-left corner and (x2, y2) are the coordinates of the top-right corner of the second rectangle. # Extract the coordinates x1_1, y1_1, x2_1, y2_1 = rect1 x1_2, y1_2, x2_2, y2_2 = rect2 # Determine the overlap boundaries x_left = max(x1_1, x1_2) y_bottom = max(y1_1, y1_2) x_right = min(x2_1, x2_2) y_top = min(y2_1, y2_2) # Check if there is an overlap if x_left < x_right and y_bottom < y_top: # Calculate intersection area intersect_area = (x_right - x_left) * (y_top - y_bottom) return intersect_area else: return 0"},{"question":"Write a python function that takes an array of strings and returns an ordered dictionary. In this dictionary, each key should be one of the strings from the array, and the value should be a list of indexes where that string appears in the array. If a word appears more than once, the indexes should be ordered from greatest to least.","solution":"from collections import OrderedDict def string_indexes(arr): Returns an ordered dictionary where each key is a string from the array and the value is a list of indexes (ordered from greatest to least) where the string appears in the array. index_dict = {} for idx, val in enumerate(arr): if val not in index_dict: index_dict[val] = [] index_dict[val].append(idx) for key in index_dict.keys(): index_dict[key].sort(reverse=True) sorted_keys = sorted(index_dict.keys()) ordered_dict = OrderedDict() for key in sorted_keys: ordered_dict[key] = index_dict[key] return ordered_dict"},{"question":"Create a program to check if a given string is a palindrome. The string may contain uppercase and lowercase letters, numbers, and special characters. The program should ignore any spaces or punctuation marks and only consider the alphanumeric characters in the string. The program should also handle strings with a length of up to 10^6 characters and should use a constant amount of additional memory, regardless of the input string length.","solution":"def is_palindrome(s): Checks if a given string is a palindrome, considering only alphanumeric characters, and ignoring spaces and punctuation. :param s: The input string :return: True if the input string is a palindrome, False otherwise i, j = 0, len(s) - 1 while i < j: while i < j and not s[i].isalnum(): i += 1 while i < j and not s[j].isalnum(): j -= 1 if i < j and s[i].lower() != s[j].lower(): return False i += 1 j -= 1 return True"},{"question":"Write a function in Python that takes a list of integers as input and returns the first duplicate number for which the second occurrence has the minimal index. In other words, if there are multiple duplicated numbers, return the number for which the second occurrence appears earliest in the list. If no duplicates are found, return -1.","solution":"def first_duplicate(nums): Returns the first duplicate number for which the second occurrence has the minimal index. If no duplicates are found, returns -1. seen = {} for index, num in enumerate(nums): if num in seen: return num seen[num] = index return -1"},{"question":"I need help making a function in Python that can determine if a given year is a leap year or not. Can you assist me with the code? I also want to understand how to check if a specific year, like 2024, is a leap year using this function.","solution":"def is_leap_year(year): Determines whether the given year is a leap year. Args: year (int): The year to be checked. Returns: bool: True if the year is a leap year, False otherwise. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False # Example usage year = 2024 print(f\\"Is {year} a leap year? {is_leap_year(year)}\\")"},{"question":"Modify the function \`func3(x, y, z)\` such that it returns the product of the three inputs. Also, add type annotations to the function to specify that all three arguments and the return type are integers.","solution":"def func3(x: int, y: int, z: int) -> int: Returns the product of x, y, and z. return x * y * z"},{"question":"How to quickly sort a singly linked list in Python using the merge sort technique while making sure that the memory usage is minimal?","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_sort_list(head): if not head or not head.next: return head def get_middle(node): slow, fast = node, node.next while fast and fast.next: slow = slow.next fast = fast.next.next return slow def merge(left, right): dummy = ListNode() tail = dummy while left and right: if left.val < right.val: tail.next = left left = left.next else: tail.next = right right = right.next tail = tail.next tail.next = left or right return dummy.next middle = get_middle(head) right_head = middle.next middle.next = None left = merge_sort_list(head) right = merge_sort_list(right_head) return merge(left, right)"},{"question":"Write a function that takes a dictionary as input and returns a new dictionary with keys and values as reversed as possible. If the input dictionary has keys that are not of string type, ignore them and do not include them in the output. If the input dictionary has values that are not of integer type, ignore them and do not include them in the output. The output dictionary should only include keys that are strings and values that are integers. The function should also reverse the order of the keys in the output dictionary.","solution":"def reverse_dict(input_dict): Takes a dictionary as input and returns a new dictionary with keys and values reversed. Only consider keys that are strings and values that are integers. Parameters: input_dict (dict): The input dictionary. Returns: dict: The output dictionary with keys and values reversed. output_dict = {} # Extract only valid key-value pairs valid_pairs = [(k, v) for k, v in input_dict.items() if isinstance(k, str) and isinstance(v, int)] # Reverse the valid pairs for k, v in reversed(valid_pairs): output_dict[k] = v return output_dict # Example Usage # input_dict = {'a': 1, 'b': 2, 3: 'c', 'd': 4, 'e': 'f'} # output: {'b': 2, 'a': 1}"},{"question":"Create a Python function that takes an input list of integers and returns a dictionary where the keys are the original numbers and the values are their corresponding squares. Use the dictionary data type to store the results.","solution":"def create_square_dict(lst): Takes a list of integers and returns a dictionary with numbers as keys and their squares as values. return {num: num ** 2 for num in lst}"},{"question":"Develop a Python program to generate a dictionary named \\"phonetics_dict\\" that maps letters of the English alphabet to their phonetic alphabet equivalent. Your program should also allow users to input a word and return the phonetic representation. Add error handling for situations where the input is not valid.","solution":"# Define the phonetic alphabet dictionary phonetics_dict = { 'A': 'Alpha', 'B': 'Bravo', 'C': 'Charlie', 'D': 'Delta', 'E': 'Echo', 'F': 'Foxtrot', 'G': 'Golf', 'H': 'Hotel', 'I': 'India', 'J': 'Juliett', 'K': 'Kilo', 'L': 'Lima', 'M': 'Mike', 'N': 'November', 'O': 'Oscar', 'P': 'Papa', 'Q': 'Quebec', 'R': 'Romeo', 'S': 'Sierra', 'T': 'Tango', 'U': 'Uniform', 'V': 'Victor', 'W': 'Whiskey', 'X': 'X-ray', 'Y': 'Yankee', 'Z': 'Zulu' } def word_to_phonetics(word): Converts a word to its phonetic alphabet representation. Args: word (str): The word to convert. Returns: str: The phonetic alphabet representation of the word. Raises: ValueError: If the input contains non-alphabetic characters. if not word.isalpha(): raise ValueError(\\"Word must contain only alphabetic characters.\\") return ' '.join(phonetics_dict[char.upper()] for char in word) # Example usage # print(word_to_phonetics(\\"HELLO\\")) # Expected: Hotel Echo Lima Lima Oscar"},{"question":"Write a function that takes an integer 'base' and another integer 'exponent' and calculates the power of the base to the exponent using a recursive algorithm. The function name should be \\"my_pow\\". Additionally, your base case should handle the scenario where the exponent is 0, in which case the function should return 1. Make sure to handle the scenario where the exponent is negative and in this case, you should return the reciprocal of the base raised to the absolute value of the exponent.","solution":"def my_pow(base, exponent): Returns the base raised to the power of exponent using recursion. :param base: Integer base :param exponent: Integer exponent :return: base raised to the power of exponent if exponent == 0: return 1 elif exponent < 0: return 1 / my_pow(base, -exponent) else: return base * my_pow(base, exponent - 1)"},{"question":"I want to write a Python function that takes a list of names and an integer n as input. The function should return a list containing only those names that have n or fewer characters. Can someone help me write this function?","solution":"def filter_names_by_length(names, n): Returns a list of names that have n or fewer characters. Parameters: names (list): List of names (strings) n (int): Maximum number of characters Returns: list: List of names with n or fewer characters return [name for name in names if len(name) <= n]"},{"question":"Create a function that finds all anagrams of a given word while also ensuring that the length of each anagram is less than or equal to the length of the given word.","solution":"from itertools import permutations def find_anagrams(word): Returns a set of all unique anagrams of the given word that are equal to or shorter than the word length. anagrams = set() for length in range(1, len(word) + 1): for perm in permutations(word, length): anagram = ''.join(perm) anagrams.add(anagram) return anagrams"},{"question":"Create a function that takes a string as input and prints each letter of the string on a separate line. However, you should also modify the function to handle cases where the input string contains special characters, numbers, and uppercase letters. If the input string contains any special characters or numbers, they should be ignored and not printed. If the input string contains uppercase letters, they should be converted to lowercase before printing. Additionally, you should handle the case where the input string is empty and return an error message instead of printing nothing. The function should also check if the input string is a palindrome (a word, phrase, or sequence that reads the same backwards as forwards, ignoring special characters, numbers, and case) and print \\"Palindrome detected!\\" if it is. The function should also count the number of vowels in the input string and print the count after printing each letter of the string.","solution":"def process_string(input_string): if not input_string: return \\"Error: Empty string provided\\" cleaned_string = ''.join([char.lower() for char in input_string if char.isalpha()]) for char in cleaned_string: print(char) if cleaned_string == cleaned_string[::-1]: print(\\"Palindrome detected!\\") vowels = 'aeiou' vowel_count = sum(char in vowels for char in cleaned_string) print(f\\"Number of vowels: {vowel_count}\\")"},{"question":"In Python, write a program that prints out the first 100 prime numbers in reverse order. The program should also calculate and display the average value of these prime numbers. Additionally, the program should ensure that the prime numbers are only printed if they are also palindrome numbers.","solution":"def is_prime(n): Returns if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(n): Returns if a number n is a palindrome. return str(n) == str(n)[::-1] def first_n_primes(n): Returns the first n prime numbers that are also palindromes. primes = [] num = 2 while len(primes) < n: if is_prime(num) and is_palindrome(num): primes.append(num) num += 1 return primes def main(): primes = first_n_primes(100) primes.reverse() for prime in primes: print(prime) avg_value = sum(primes) / len(primes) print(f\\"Average value of the primes: {avg_value}\\")"},{"question":"Write a Python program to remove duplicates from a list and return a new list with unique elements.","solution":"def remove_duplicates(lst): Removes duplicates from a list and returns a new list with unique elements. return list(set(lst))"},{"question":"Modify the existing code so it prints out the odd numbers from 1 to 1000000 in descending order, while also calculating the sum of all the odd numbers printed. The final solution should have a time complexity of O(log(N)).","solution":"def print_odds_and_sum(): Prints odd numbers from 1 to 1000000 in descending order and calculates the sum of these odd numbers. Returns the calculated sum. total_sum = 0 for i in range(999999, 0, -2): print(i) total_sum += i return total_sum"},{"question":"Convert the following SQL statement into a Python def() and write the code. It should take city(name), country(name) and population as arguments.","solution":"def create_city(city_name, country_name, population): Returns a dictionary representing a city with its name, country, and population. return { 'city': city_name, 'country': country_name, 'population': population }"},{"question":"Modify the following function to return the number of unique elements in a given array, without using any additional data structures such as arrays, hash maps, or sets. Additionally, the solution should have a time complexity of O(n) or less.","solution":"def count_unique_elements(arr): Returns the number of unique elements in the array \`arr\`. if not arr: return 0 # Sort the array arr.sort() # Initialize the count of unique elements unique_count = 1 # Because the first element is unique initially # Traverse the sorted array and count unique elements for i in range(1, len(arr)): if arr[i] != arr[i - 1]: unique_count += 1 return unique_count"},{"question":"Given two strings, write a Python function that finds the common letters between them. However, your function should also return the number of times each common letter appears in both strings, ignoring case sensitivity. Both strings will consist of only alphabetic characters.","solution":"from collections import Counter def find_common_letters(str1, str2): Finds the common letters between two strings and counts their occurrences, ignoring case sensitivity. Args: str1 (str): First input string. str2 (str): Second input string. Returns: dict: A dictionary where keys are the common letters and values are the minimal count of each letter in both strings. # Convert both strings to lowercase to ignore case sensitivity. str1 = str1.lower() str2 = str2.lower() # Use Counter to count occurrences of each letter in both strings. counter1 = Counter(str1) counter2 = Counter(str2) # Find the common letters and their counts in both strings. common_letters = {letter: min(counter1[letter], counter2[letter]) for letter in counter1 if letter in counter2} return common_letters"},{"question":"You have a list of n byn matrices. Each matrix in your list has the same size n * n. Write a function in a language of your choice, that takes the list of matrices and an integer n as input, and returns a new list, where each matrix in the list is transposed. Note that your function should be able to handle matrices that are not square as well.","solution":"def transpose_matrices(matrices, n): Returns a new list where each matrix in the input list is transposed. Parameters: - matrices: List of n*n matrices - n: Size of the matrices Returns: - List of transposed matrices transposed = [] for matrix in matrices: transposed_matrix = [] for i in range(len(matrix[0])): # Iterate over columns transposed_row = [] for j in range(len(matrix)): # Iterate over rows transposed_row.append(matrix[j][i]) transposed_matrix.append(transposed_row) transposed.append(transposed_matrix) return transposed"},{"question":"Formulate a JSON code structure which not only maintains a numerical count of the frequency of a specific user's visits to a distinct web domain, but also tracks the duration of their visit, the device used, the browser used and the geographical location from which the website was accessed. The programme should prioritize efficient space utilization. Also, you must create a functionality to fetch and manipulate this data for analysis and pattern recognition purposes. Create unit tests to support your solution.","solution":"import json class VisitTracker: def __init__(self): self.data = {} def log_visit(self, user, domain, duration, device, browser, location): if user not in self.data: self.data[user] = {} if domain not in self.data[user]: self.data[user][domain] = { 'count': 0, 'visits': [] } self.data[user][domain]['count'] += 1 self.data[user][domain]['visits'].append({ 'duration': duration, 'device': device, 'browser': browser, 'location': location }) def get_user_data(self, user): return self.data.get(user, {}) def get_domain_data(self, user, domain): return self.data.get(user, {}).get(domain, {}) def to_json(self): return json.dumps(self.data) def from_json(self, data_str): self.data = json.loads(data_str)"},{"question":"Given two strings \\"abc\\" and \\"xyz\\", write a program to check if they are anagrams of each other.","solution":"def are_anagrams(s1, s2): Returns True if s1 and s2 are anagrams, False otherwise. return sorted(s1) == sorted(s2)"},{"question":"Create a Python function to generate a Fibonacci sequence of a given length. The length of the sequence should be at least 10. Additionally, modify the function to include error handling for invalid input, such as non-integer values or negative numbers.","solution":"def fibonacci_sequence(length): Generates a Fibonacci sequence of the given length. The length should be at least 10. Parameters: length (int): The length of the desired Fibonacci sequence. Returns: list: A list containing the Fibonacci sequence of the given length. Raises: ValueError: If the length is less than 10 or not an integer. if not isinstance(length, int) or length < 10: raise ValueError(\\"Length must be an integer greater than or equal to 10.\\") sequence = [0, 1] for _ in range(2, length): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Develop a dynamic Python algorithm that accurately transmutes压力values from the unit Pascal to the unit Bar, and ensure the function can handle a range of values from a list or a data-set, implementing error handling for invalid inputs.","solution":"def pascal_to_bar(pressure_values): Converts a list of pressures from Pascal to Bar. Args: pressure_values (list): List of pressures in Pascal. Returns: list: List of pressures in Bar. Raises: TypeError: If the input is not a list or contains non-numeric values. if not isinstance(pressure_values, list): raise TypeError(\\"Input must be a list.\\") try: converted_values = [(value / 100000) for value in pressure_values] except TypeError as e: raise TypeError(f\\"List contains non-numeric values. Original error: {str(e)}\\") return converted_values"},{"question":"Create a Python program that would generate a random password using the standard ASCII character set, given a minimum length of 8 characters.","solution":"import random import string def generate_random_password(length=8): Generates a random password with a given minimum length. Args: length (int): The minimum length of the password. Default is 8. Returns: str: The generated random password. if length < 8: raise ValueError(\\"Password length must be at least 8 characters\\") password_characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(password_characters) for i in range(length)) return password"},{"question":"Remove the duplicates from the list without using built-in methods. However, you are only allowed to use a single loop. The original list is not allowed to be modified, and the resulting list should maintain the original order of elements. The time complexity of your solution should be O(n) and the space complexity should be O(1).","solution":"def remove_duplicates(input_list): Removes duplicates from the list while maintaining the original order. This function does not use any built-in methods for removing duplicates. seen = {} result = [] for item in input_list: if item not in seen: seen[item] = True result.append(item) return result"},{"question":"Write a Python code snippet to transform lowercase letters to uppercase letters for a given string.","solution":"def to_uppercase(s): Transforms all lowercase letters to uppercase letters in the given string. :param s: input string :return: string with all lowercase letters transformed to uppercase return s.upper()"},{"question":"Write a function in Python that takes a sentence (i.e., a string of words) and returns a dictionary containing the frequency of each word in the sentence.","solution":"def word_frequency(sentence): Returns a dictionary containing the frequency of each word in the given sentence. words = sentence.split() frequency = {} for word in words: word = word.lower() if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Create a Python function that takes in four parameters: a main string, a searching sub-string, a replacement string, and a maximum number of replacements. The function should return the main string with at most the specified number of occurrences of the searching sub-string replaced by the replacement string. If the sub-string is not found, return the original string.","solution":"def replace_substring(main_str, search_str, replacement_str, max_replacements): Replaces up to max_replacements occurrences of search_str in main_str with replacement_str. Parameters: main_str (str): The main string where replacements are to be done. search_str (str): The substring to search for in the main string. replacement_str (str): The substring to replace the search_str with. max_replacements (int): The maximum number of replacements to be made. Returns: str: The string after replacements. return main_str.replace(search_str, replacement_str, max_replacements)"},{"question":"Write a program that takes in a list of integers and returns a new list containing only the prime numbers in the original list.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def filter_primes(numbers): Given a list of integers, returns a list containing only the prime numbers. return [num for num in numbers if is_prime(num)]"},{"question":"Create a Python program that takes a list of integers and returns a new list containing only the prime numbers from the original list. The program should also display the count of prime numbers and their sum. Additionally, the program should use multithreading to speed up the prime number checking process. The function should be able to handle large lists efficiently.","solution":"import threading from queue import Queue def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_worker(queue, primes): Worker function to check primes and add to the result list. while True: number = queue.get() if number is None: break if is_prime(number): primes.append(number) queue.task_done() def find_primes(numbers): Find all prime numbers in a list using multithreading. Returns the list of primes, their count, and their sum. num_threads = 4 queue = Queue() primes = [] # Creating worker threads threads = [] for _ in range(num_threads): thread = threading.Thread(target=prime_worker, args=(queue, primes)) thread.start() threads.append(thread) # Put all numbers into the queue for number in numbers: queue.put(number) # Wait for all tasks to be completed queue.join() # Stop all worker threads for _ in range(num_threads): queue.put(None) for thread in threads: thread.join() return primes, len(primes), sum(primes)"},{"question":"Can you develop a python function that checks if a given string is a palindrome, but with a twist? The function should ignore case sensitivity and non-alphanumeric characters.","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome, ignoring case sensitivity and non-alphanumeric characters. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_str = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the cleaned string is the same forwards and backwards return cleaned_str == cleaned_str[::-1]"},{"question":"Write a Python function to calculate the sum of all items in a given dictionary with integer values. The dictionary may contain nested dictionaries as values, and the function should recursively calculate the sum of all integers in the dictionary.","solution":"def sum_of_dict(d): Returns the sum of all items in a given dictionary with integer values. The dictionary may contain nested dictionaries as values. total = 0 for key, value in d.items(): if isinstance(value, dict): total += sum_of_dict(value) elif isinstance(value, int): total += value return total"},{"question":"Write a Python function named \\"find_median_odd\\" that takes a list parameter \\"lst\\" and returns the median of the odd numbers in the list. If there are no odd numbers, return None.","solution":"def find_median_odd(lst): Returns the median of the odd numbers in the given list. If there are no odd numbers, returns None. # Filter the list to get only odd numbers odd_numbers = [num for num in lst if num % 2 != 0] # If there are no odd numbers, return None if not odd_numbers: return None # Sort the list of odd numbers odd_numbers.sort() # Find the length of the odd_numbers list n = len(odd_numbers) # Compute the median based on the length being odd or even if n % 2 == 1: return odd_numbers[n // 2] else: mid = n // 2 return (odd_numbers[mid - 1] + odd_numbers[mid]) / 2"},{"question":"create a field f which is a function of positional arguments x1, x2, x3 and also f takes two optional keyword arguments h and u. the default value of h is 0 and the default value of u is 1.","solution":"def f(x1, x2, x3, h=0, u=1): Example function combining positional and optional keyword arguments. Let's assume f calculates a simple formula just for demonstration, f(x1, x2, x3, h, u) = (x1 + x2 + x3 + h) * u. :param x1: positional argument :param x2: positional argument :param x3: positional argument :param h: optional keyword argument, default is 0 :param u: optional keyword argument, default is 1 :return: result of applying the formula return (x1 + x2 + x3 + h) * u"},{"question":"If a nested dictionary in Python, how do you write code to count the total number of elements in it including the elements in the nested dictionaries?","solution":"def count_elements(nested_dict): Returns the total number of elements in a nested dictionary. count = 0 for key, value in nested_dict.items(): count += 1 if isinstance(value, dict): count += count_elements(value) return count"},{"question":"Create a method \`add_event\` to add a new event to the \`Schedule\` class. The method should take in an \`Event\` object as a parameter and add it to the \`_events\` dictionary with the event's name as the key. If an event with the same name already exists in the \`_events\` dictionary, the method should raise a \`ValueError\` with an appropriate error message. The \`Event\` class is already defined and has attributes \`name\`, \`start_time\`, and \`end_time\`.","solution":"class Event: def __init__(self, name, start_time, end_time): self.name = name self.start_time = start_time self.end_time = end_time class Schedule: def __init__(self): self._events = {} def add_event(self, event): Adds a new event to the schedule. :param event: Event object containing name, start_time, and end_time :raises ValueError: if an event with the same name already exists if event.name in self._events: raise ValueError(f\\"Event with name '{event.name}' already exists.\\") self._events[event.name] = event"},{"question":"Write a function to remove all occurrences of a given element from a list while maintaining the order of the remaining elements. Your solution should have a time complexity of O(n) and should not use any built-in functions or libraries to remove the elements.","solution":"def remove_element(lst, element): Removes all occurrences of element from lst while maintaining the order of the remaining elements. Args: lst (list): The list from which to remove the element. element: The element to be removed. Returns: list: A new list with all occurrences of element removed. result = [] for item in lst: if item != element: result.append(item) return result"},{"question":"Write me a recursive function in Python to calculate the factorial of a number. Also, include error handling to check if the input is a positive integer.","solution":"def factorial(n): Returns the factorial of a positive integer n. If n is not a positive integer, raises a ValueError. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a positive integer\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Given the task of modifying a Python function to verify if a list solely contains unique float numbers with decimal points, I need you to craft a function that checks the list for uniqueness, float type of every member, and presence of decimal points, returning \`True\` if all criteria are met. Your function should also discern and deal with possible issues within the supplied code, enhancing the error handling.","solution":"def are_unique_floats_with_decimals(lst): Checks if a list solely contains unique float numbers with decimal points. # Check if all elements in the list are floats and contain decimal points for item in lst: if not isinstance(item, float) or item.is_integer(): return False # Check if the list has unique elements return len(lst) == len(set(lst))"},{"question":"Develop a linear search algorithm that also tracks the number of comparisons made to find the element in a provided array. Then apply your algorithm to the following series of integers: [1, 5, 9, 10, 11, 15, 20, 25, 34, 55, 78, 99]","solution":"def linear_search_with_comparisons(arr, target): Perform a linear search on the array to find the target element. Returns a tuple containing the index of the target element and the number of comparisons made. If the target element is not found, returns (-1, number of comparisons made). comparisons = 0 for index, element in enumerate(arr): comparisons += 1 if element == target: return index, comparisons return -1, comparisons # Apply the algorithm to the series [1, 5, 9, 10, 11, 15, 20, 25, 34, 55, 78, 99] result = linear_search_with_comparisons([1, 5, 9, 10, 11, 15, 20, 25, 34, 55, 78, 99], 20) print(result) # Expected output: (6, 7) because 20 is at index 6 and 7 comparisons were made."},{"question":"Write a recursive function in Python for generating a list with the Fibonacci sequence up to a given number n. Additionally, implement an option to return the sequence in reverse order.","solution":"def fibonacci_sequence(n, reverse=False): Generates a list with the Fibonacci sequence up to the number n. If reverse is True, the sequence will be returned in reverse order. def fibonacci_recursive(limit): if limit <= 0: return [] elif limit == 1: return [0] elif limit == 2: return [0, 1] else: seq = fibonacci_recursive(limit - 1) seq.append(seq[-1] + seq[-2]) return seq sequence = fibonacci_recursive(n) return sequence[::-1] if reverse else sequence"},{"question":"Write a script in Python to find the geometric and harmonic mean of all the numbers in a list of multiple nested lists. You should also consider exceptions, such as the presence of zero and negative numbers in the list.","solution":"import math import functools def geometric_mean(numbers): Returns the geometric mean of a flat list of numbers. if any(n <= 0 for n in numbers): raise ValueError(\\"Geometric mean is undefined for non-positive values.\\") product = functools.reduce(lambda x, y: x * y, numbers) return product ** (1 / len(numbers)) def harmonic_mean(numbers): Returns the harmonic mean of a flat list of numbers. if any(n == 0 for n in numbers): raise ValueError(\\"Harmonic mean is undefined for zero values.\\") reciprocal_sum = sum(1 / n for n in numbers) return len(numbers) / reciprocal_sum def flatten(nested_list): Flattens a nested list into a single list of numbers. flat_list = [] for item in nested_list: if isinstance(item, list): flat_list.extend(flatten(item)) else: flat_list.append(item) return flat_list def calculate_means(nested_list): Calculate both geometric and harmonic mean for a nested list of numbers. flat_list = flatten(nested_list) geo_mean = geometric_mean(flat_list) har_mean = harmonic_mean(flat_list) return geo_mean, har_mean"},{"question":"Write a function called \\"binarySearch\\" that takes in an array of integers and a target integer as parameters. The function should return the index of the target integer in the array, or -1 if the target integer is not present in the array.","solution":"def binary_search(arr, target): left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a simple python app that can respond to two CLI commands: start and stop. When \\"start\\" is invoked, the app should print \\"Application started\\" and when \\"stop\\" is invoked, the app should print \\"Application stopped\\".","solution":"import sys def main(): if len(sys.argv) != 2: print(\\"Usage: app.py <command>\\") sys.exit(1) command = sys.argv[1] if command == \\"start\\": print(\\"Application started\\") elif command == \\"stop\\": print(\\"Application stopped\\") else: print(f\\"Unknown command: {command}\\") sys.exit(1) if __name__ == \\"__main__\\": main()"},{"question":"Create a Python function that converts decimal numbers to ternary (base 3) representation for a given range, and another function to convert the ternary numbers back to decimal. The functions should also handle invalid inputs gracefully by returning appropriate error messages.","solution":"def decimal_to_ternary(num): Converts a decimal number to its ternary representation. :param num: An integer to be converted :return: Ternary representation of the input number as a string or an error message if not isinstance(num, int): return \\"Error: Input must be an integer\\" if num < 0: return \\"Error: Input must be a non-negative integer\\" if num == 0: return \\"0\\" ternary_str = \\"\\" while num > 0: ternary_str = str(num % 3) + ternary_str num //= 3 return ternary_str def ternary_to_decimal(ternary_str): Converts a ternary representation back to its decimal form. :param ternary_str: A string representing a ternary number :return: Decimal value of the ternary input or an error message if not isinstance(ternary_str, str): return \\"Error: Input must be a string\\" if not ternary_str.isdigit() or any(c not in \\"012\\" for c in ternary_str): return \\"Error: Input must be a valid ternary number\\" decimal_num = 0 for i, digit in enumerate(reversed(ternary_str)): decimal_num += int(digit) * (3 ** i) return decimal_num"},{"question":"Write a code to list out the unique prime numbers in an array and count the frequency of each unique prime number in the array. Return the prime numbers along with their frequencies as a dictionary.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def prime_frequency(arr): List out the unique prime numbers in an array and count the frequency of each unique prime number. Return the prime numbers along with their frequencies as a dictionary. primes = [num for num in arr if is_prime(num)] frequency = {} for prime in primes: if prime in frequency: frequency[prime] += 1 else: frequency[prime] = 1 return frequency"},{"question":"Write a function in Python that takes an integer and returns a boolean value specifying whether the number is a prime number or not. Additionally, examine the provided erroneous code snippet and point out the mistakes before writing your own solution.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"question":"Write a code to perform linear search in an array of integers and return the indices of all occurrences of the target element. If the target element is not found, return an empty list. The code should have a time complexity of O(n), where n is the size of the array. Additionally, you are not allowed to use any built-in functions or libraries for searching. Furthermore, you are not allowed to use any extra space (i.e., additional arrays or data structures) other than the input array and the variables needed for the search.","solution":"def linear_search(arr, target): Performs a linear search to find all occurrences of the target in the array. Parameters: arr (list): The list of integers to search. target (int): The target integer to search for. Returns: list: A list of indices where the target is found. result = [] for i in range(len(arr)): if arr[i] == target: result.append(i) return result"},{"question":"Given the input list of size N, write a code to print out the sum of the first N-1 elements, where N is a prime number. Additionally, the program should output the product of the first N-2 elements if N is a perfect square. If N is not prime or a perfect square, the program should output an error message.","solution":"import math def is_prime(n): Checks if a number is a prime number. if n <= 1: return False for i in range(2, int(math.sqrt(n)) + 1): if n % i == 0: return False return True def is_perfect_square(n): Checks if a number is a perfect square. return int(math.sqrt(n))**2 == n def sum_or_product(lst): If the size of the list N is a prime number, returns the sum of the first N-1 elements. If the size of the list N is a perfect square, returns the product of the first N-2 elements. Otherwise, returns an error message. N = len(lst) if is_prime(N): return sum(lst[:N-1]) elif is_perfect_square(N): product = 1 for num in lst[:N-2]: product *= num return product else: return \\"Error: N is neither a prime number nor a perfect square\\""},{"question":"Given a dimension of 10, implement a Python code that generates a 2D array filled with random integers ranging from 1 to 20. Add a feature that ensures no two integers in the same row or column are the same.","solution":"import random def generate_unique_2d_array(dimension=10, min_val=1, max_val=20): Generates a 2D array with given dimension filled with random integers ranging from min_val to max_val ensuring no two integers in the same row or column are the same. if max_val - min_val + 1 < dimension: raise ValueError(\\"Range is too small to guarantee uniqueness in each row and column.\\") arr = [[0]*dimension for _ in range(dimension)] available_nums = [[list(range(min_val, max_val + 1)) for _ in range(dimension)] for _ in range(dimension)] for i in range(dimension): for j in range(dimension): num = random.choice(available_nums[i][j]) arr[i][j] = num # Remove this number from the rest of the row and column choices to ensure uniqueness for k in range(dimension): if num in available_nums[i][k]: available_nums[i][k].remove(num) if num in available_nums[k][j]: available_nums[k][j].remove(num) return arr"},{"question":"Given a list of phone numbers, write a code to find the one with the highest number of repeated digits. The phone numbers may contain special characters such as parentheses, hyphens, or spaces. Your code should consider the repeated digits only when comparing the phone numbers. Additionally, the code should handle international phone numbers that start with a \\"+\\" sign. The phone numbers should be validated to ensure they contain only digits, special characters, and the \\"+\\" sign.","solution":"import re from collections import Counter def clean_phone_number(phone_number): Cleans the phone number by removing special characters and spaces. return re.sub(r'[^d]', '', phone_number) def find_highest_repeated_digit_phone(phone_numbers): Finds the phone number with the highest number of repeated digits. Returns the first found phone number if there's a tie. max_repeats = 0 result_phone_number = None for phone in phone_numbers: clean_number = clean_phone_number(phone) digit_counts = Counter(clean_number) # Find the highest number of repeats for any single digit in this number current_max_repeats = max(digit_counts.values(), default=0) if current_max_repeats > max_repeats: max_repeats = current_max_repeats result_phone_number = phone return result_phone_number"},{"question":"Given two lists in Python, one containing tuples with IDs and first names, and the other containing tuples with IDs and last names, write a function to merge these lists based on the matching IDs. Your output should be in the form of a dictionary where each key is the ID and the value is a list containing the first name and last name.","solution":"def merge_lists(first_names, last_names): Merges two lists of tuples based on matching IDs. Parameters: - first_names: List of tuples (ID, first_name) - last_names: List of tuples (ID, last_name) Returns: A dictionary where each key is the ID and the value is a list [first_name, last_name]. merged_dict = {} # Create a dictionary from first_names first_name_dict = {ID: first_name for ID, first_name in first_names} # Create a dictionary from last_names last_name_dict = {ID: last_name for ID, last_name in last_names} # Merge the dictionaries based on IDs for ID in first_name_dict: if ID in last_name_dict: merged_dict[ID] = [first_name_dict[ID], last_name_dict[ID]] return merged_dict"},{"question":"Write a python function 'addOne' that takes an integer as input and returns the integer incremented by 1. Also, provide a piece of erroneous code that could lead to a common mistake and explain why it is incorrect.","solution":"def addOne(n): Returns the integer n incremented by 1. return n + 1 # Erroneous code that could lead to a common mistake # def addOne(n): # # Incorrectly returns n instead of n incremented by 1. # # return n # This does not increment the integer and will always return the input value as is."},{"question":"Create a Python function that accepts a list of names and a positive integer 'n'. The function should return a dictionary where the keys are names from the list and their values are their respective positions in the list if they are among the first 'n' number of names. If a name appears more than once, return the index of its last occurrence.","solution":"def map_names_to_positions(names, n): Returns a dictionary mapping each unique name in the first 'n' names in the list to its position. If a name appears more than once, the index of its last occurrence among the first 'n' names is returned. :param names: List of names :param n: Positive integer specifying the first 'n' number of names to consider :return: Dictionary with names as keys and their respective indices as values name_position_map = {} for i in range(min(n, len(names))): name_position_map[names[i]] = i return name_position_map"},{"question":"At work, we are attempting to optimize a function to minimize its output. It is a black-box optimization problem and Derivative-Free Optimization (DFO) would be suitable. Can you provide a step-by-step guide to implementing the algorithm in Python using the SciPy library? Additionally, could you provide some general guidelines or tips for designing and implementing DFO algorithms, particularly in the context of black-box optimization problems?","solution":"import numpy as np from scipy.optimize import minimize def objective_function(params): Example objective function: A simple quadratic function. x, y = params return x**2 + y**2 + x*y + 1 def optimize_function(): # Initial guess initial_guess = np.array([1.0, 1.0]) # Perform the optimization using Nelder-Mead algorithm result = minimize(objective_function, initial_guess, method='Nelder-Mead') return result.x, result.fun # Run the optimization and print results optimal_params, optimal_value = optimize_function() print(f\\"Optimal parameters: {optimal_params}\\") print(f\\"Optimal value: {optimal_value}\\")"},{"question":"Write code in python to find the maximum number of unique summands that add up to a given number n, where each summand is a positive integer and no two summands are equal. The summands must be listed in strictly increasing order.","solution":"def max_unique_summands(n): Finds the maximum number of unique summands that add up to n, where each summand is a positive integer and no two summands are equal. The summands are listed in strictly increasing order. summands = [] current = 1 while n > 0: if n - current > current: summands.append(current) n -= current current += 1 else: summands.append(n) break return summands"},{"question":"Given a list of unique characters and an integer k, write a function in Python that returns a string containing all possible combinations of those characters of length exactly k, in lexicographic order. Remember that the characters can repeat in the combinations.","solution":"def generate_combinations(chars, k): Generates all possible combinations (with replacement) of length k from given list of unique characters. Returns them in lexicographic order. from itertools import product # Generate all combinations combinations = [''.join(p) for p in product(chars, repeat=k)] # Sort combinations in lexicographic order combinations.sort() return combinations"},{"question":"Given two strings, write a function to check if they are anagrams. In addition to this, ensure that the function also checks whether the strings are comprised of only lowercase English alphabets and have spaces between words. If the strings contain any other characters or uppercase letters, the function should return an error message.","solution":"def are_anagrams(s1, s2): Check if two strings are anagrams and contain only lowercase English alphabets and spaces. If invalid input is detected, return an error message. # Check for invalid characters if not (s1.replace(' ', '').isalpha() and s1 == s1.lower() and s2.replace(' ', '').isalpha() and s2 == s2.lower()): return \\"Error: Strings must contain only lowercase English alphabets and spaces.\\" # Remove spaces and sort the characters for comparison s1_filtered = ''.join(s1.split()) s2_filtered = ''.join(s2.split()) return sorted(s1_filtered) == sorted(s2_filtered)"},{"question":"Create a python program that takes a list of numbers and counts the number of positive numbers in the list.","solution":"def count_positive_numbers(numbers): Returns the count of positive numbers in the given list. Parameters: numbers (list): List of numbers Returns: int: Count of positive numbers return sum(1 for number in numbers if number > 0)"},{"question":"Use the regex module in python to write a program that searches for email addresses in a given string. The program should also validate if the email address has a proper format: it must include an \\"@\\" symbol followed by a domain, and it should not have any spaces. Additionally, the program should remove any email addresses that have a \\".com\\" domain. Finally, the program should return a list of the valid email addresses found, without any duplicates.","solution":"import re def find_emails(input_string): Searches for and returns a list of unique valid email addresses from the given string, excluding those with a .com domain. # Regular expression to find email addresses email_pattern = r'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Za-z]{2,}b' # Find all email addresses emails = re.findall(email_pattern, input_string) # Filter out emails with .com domain and remove duplicates valid_emails = list(set(email for email in emails if not email.endswith(\\".com\\"))) return valid_emails"},{"question":"Write a piece of code that converts a list of strings into a dictionary. Each string in the list contains multiple words. Your task is to create a dictionary where each unique word is a key, and its value is the number of times it appears in the string. Ignore case sensitivity (i.e., \\"The\\" and \\"the\\" should be the same key). If the list is empty, your function should return an empty dictionary.","solution":"def words_frequency(words_list): Converts a list of strings into a dictionary with each unique word as a key and its value as the number of times it appears in the strings (case insensitive). :param words_list: List of strings. :return: Dictionary with word frequencies. frequency = {} for phrase in words_list: words = phrase.lower().split() for word in words: frequency[word] = frequency.get(word, 0) + 1 return frequency"},{"question":"Write a Python function that converts a given expression from infix notation to postfix notation. The function should take a string representing the infix expression as input and return the postfix notation as a string.","solution":"def infix_to_postfix(expression): Converts an infix expression to a postfix expression. :param expression: str, the infix expression :return: str, the postfix expression precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3} output = [] stack = [] for char in expression: if char.isalnum(): # operand output.append(char) elif char == '(': # left parenthesis stack.append(char) elif char == ')': # right parenthesis while stack and stack[-1] != '(': output.append(stack.pop()) stack.pop() # pop '(' else: # operator while stack and stack[-1] != '(' and precedence[char] <= precedence.get(stack[-1], 0): output.append(stack.pop()) stack.append(char) while stack: output.append(stack.pop()) return ''.join(output)"},{"question":"As a developer, you have been tasked with creating a program that can determine if a given sentence is a valid pangram. A pangram is a sentence that contains every letter of the alphabet at least once. Your program should take a string input and return a boolean value indicating whether or not the input is a pangram.","solution":"import string def is_pangram(sentence): Determine if the given sentence is a pangram. A pangram is a sentence that contains every letter of the alphabet at least once. Args: sentence (str): the sentence to check Returns: bool: True if the sentence is a pangram, False otherwise alphabet = set(string.ascii_lowercase) sentence_letters = set(sentence.lower()) return alphabet <= sentence_letters"},{"question":"Create a python script that will run the main function only and print \\"Hello, world!\\".","solution":"def main(): Prints the classic 'Hello, world!' message to the console. print(\\"Hello, world!\\") if __name__ == \\"__main__\\": main()"},{"question":"Write scripts for simulating various data types with given parameters. These include discrete uniform, uniform, normal, binomial, exponential, and Poisson distributions. For each data type, specify the function name and the parameters it should take. Normal data should be generated with a mean of 20 and a standard deviation of 5. For the Poisson distribution, assume a lambda value of 3. For the binomial distribution, use a size of 20 and probability of success of 0.2. For the exponential distribution, use a lambda value of 0.5. The uniform distribution should generate data between the range 0 and 100. Discrete uniform distribution should generate data between 1 and 20. Each function should return a numpy array of a specified size. Also, create a main function that calls all these functions with a default array size of 1000. Add assertions to check that the generated arrays are of the required length.","solution":"import numpy as np def generate_discrete_uniform(size, low, high): Generates a numpy array of the specified size with values from a discrete uniform distribution in the range [low, high], inclusive. return np.random.randint(low, high + 1, size) def generate_uniform(size, low, high): Generates a numpy array of the specified size with values from a uniform distribution in the range [low, high). return np.random.uniform(low, high, size) def generate_normal(size, mean=20, std_dev=5): Generates a numpy array of the specified size with values from a normal distribution with the given mean and standard deviation. return np.random.normal(mean, std_dev, size) def generate_binomial(size, n=20, p=0.2): Generates a numpy array of the specified size with values from a binomial distribution with the number of trials \`n\` and probability of success \`p\`. return np.random.binomial(n, p, size) def generate_exponential(size, lambda_=0.5): Generates a numpy array of the specified size with values from an exponential distribution with the given rate parameter \`lambda_\`. return np.random.exponential(1/lambda_, size) def generate_poisson(size, lambda_=3): Generates a numpy array of the specified size with values from a Poisson distribution with the given lambda parameter. return np.random.poisson(lambda_, size) def main(size=1000): discrete_uniform_data = generate_discrete_uniform(size, 1, 20) uniform_data = generate_uniform(size, 0, 100) normal_data = generate_normal(size) binomial_data = generate_binomial(size) exponential_data = generate_exponential(size) poisson_data = generate_poisson(size) assert len(discrete_uniform_data) == size assert len(uniform_data) == size assert len(normal_data) == size assert len(binomial_data) == size assert len(exponential_data) == size assert len(poisson_data) == size return { \\"discrete_uniform\\": discrete_uniform_data, \\"uniform\\": uniform_data, \\"normal\\": normal_data, \\"binomial\\": binomial_data, \\"exponential\\": exponential_data, \\"poisson\\": poisson_data }"},{"question":"Using the input provided, write a code in Python to print the elements of a given dictionary. However, the output should be formatted in such a way that the keys and values are displayed in reverse order. Additionally, you should only include the elements where the value is a string and the key is a palindrome. If the value is a string but the key is not a palindrome, append the string \\"NotPalindrome\\" at the end of the value. If the value is not a string, append the string \\"NotString\\" at the end of the value.","solution":"def process_dict(input_dict): Processes the given dictionary by displaying the keys and values in reverse order. Includes only the elements where the value is a string and the key is a palindrome. :param input_dict: Dictionary to process :return: List of formatted strings result = [] for key, value in input_dict.items(): if isinstance(key, str) and key == key[::-1]: if isinstance(value, str): result.append(f\\"{key[::-1]} {value[::-1]}\\") else: result.append(f\\"{key[::-1]} NotString\\") else: if isinstance(value, str): result.append(f\\"{key[::-1]} {value[::-1]}NotPalindrome\\") else: result.append(f\\"{key[::-1]} NotString\\") return result"},{"question":"Create a python code that can take a list of heights as input, iterate through each height, and print the height in centimeters. Ensure the code is presented in a clean and organized manner.","solution":"def print_heights_in_cm(heights): Given a list of heights in meters, prints each height in centimeters. Parameters: heights (list of float): Heights in meters. Returns: None for height in heights: height_in_cm = height * 100 print(f\\"{height_in_cm:.2f} cm\\") # Example usage # heights_in_meters = [1.75, 1.8, 1.65] # print_heights_in_cm(heights_in_meters)"},{"question":"Write a Python script to create a dictionary containing key-value pairs from a given list. The list has an even number of elements, with each pair of elements representing a key followed by its corresponding value. In case of duplicate keys, the last occurrence of the key should have its associated value stored in the dictionary.","solution":"def list_to_dict(input_list): Converts a list into a dictionary, assuming the list has an even number of elements. Each pair of elements represents a key followed by its corresponding value. Args: input_list (list): A list of elements where each pair represents key-value. Returns: dict: A dictionary containing key-value pairs from the list. if len(input_list) % 2 != 0: raise ValueError(\\"The list should have an even number of elements.\\") result_dict = {} for i in range(0, len(input_list), 2): key = input_list[i] value = input_list[i + 1] result_dict[key] = value return result_dict"},{"question":"Create a Python program that prints out the average of all elements in a list.","solution":"def calculate_average(numbers): Returns the average of all elements in the list 'numbers'. If the list is empty, returns None. if not numbers: return None return sum(numbers) / len(numbers) # Example usage # numbers = [1, 2, 3, 4, 5] # print(calculate_average(numbers)) # Output: 3.0"},{"question":"Explain the meaning and uses of the 'args' (arguments) keyword in Python. Also, design and demonstrate a scenario where 'args' can be usefully applied in a Python function.","solution":"def sum_numbers(*args): Returns the sum of all the passed numbers. :param args: Variable length argument list containing numbers to sum. :return: Sum of all the numbers. return sum(args)"},{"question":"Code a Python script that converts temperatures in celsius to fahrenheit. The script should also include error handling to ensure that the user enters a valid temperature. Additionally, the script should provide an option for the user to convert the temperature in reverse, from fahrenheit to celsius. The user should be able to convert multiple temperatures at once by entering a list of temperatures separated by commas.","solution":"def celsius_to_fahrenheit(celsius): Converts Celsius temperature to Fahrenheit. return (celsius * 9/5) + 32 def fahrenheit_to_celsius(fahrenheit): Converts Fahrenheit temperature to Celsius. return (fahrenheit - 32) * 5/9 def convert_temperatures(temperatures, to_unit): Converts a list of temperatures to the specified unit. Parameters: - temperatures: list of temperatures to convert - to_unit: target unit for conversion ('F' for Fahrenheit, 'C' for Celsius) Returns: - list of converted temperatures if to_unit.upper() not in ['F', 'C']: raise ValueError(\\"Invalid target unit. Use 'F' for Fahrenheit or 'C' for Celsius.\\") try: temperatures = [float(temp) for temp in temperatures] except ValueError: raise ValueError(\\"All temperatures must be valid numbers.\\") if to_unit.upper() == 'F': return [celsius_to_fahrenheit(temp) for temp in temperatures] else: return [fahrenheit_to_celsius(temp) for temp in temperatures]"},{"question":"Given a malfunctioning function that is intended to search for a value in a binary search tree (BST), identify and correct the mistakes in the code. After modifying the function, it should efficiently search the tree for the given value, return the node if found, and return 'Not Found' if the value does not exist in the tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def search_bst(root, val): Searches for a value in a binary search tree. Args: root (TreeNode): The root of the binary search tree. val (int): The value to search for. Returns: TreeNode: The node with the desired value if found. str: 'Not Found' if the value does not exist in the tree. if root is None: return 'Not Found' if root.value == val: return root elif val < root.value: return search_bst(root.left, val) else: return search_bst(root.right, val)"},{"question":"I have a dictionary in Python and I need to extract the values from it. Can you show me how to write a function that takes a dictionary as input and returns a list of all its values?","solution":"def get_dict_values(d): Returns a list of all values in the dictionary d. return list(d.values())"},{"question":"Illustrate the process of generating The Fibonacci series up to a given number using both recursive and iterative methods in Python. Highlight the differences in efficiency between the two methods. Fibonacci series is a series of numbers in which each number is the sum of the two preceding ones. Usually starting with 0 and 1. Here's how you can generate Fibonacci series in Python, both recursively and iteratively.","solution":"def fibonacci_recursive(n): Returns the nth Fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci_recursive(n-1) + fibonacci_recursive(n-2) def fibonacci_iterative(n): Returns the nth Fibonacci number using iteration. if n <= 0: return 0 elif n == 1: return 1 fib_numbers = [0, 1] for i in range(2, n+1): next_fib = fib_numbers[-1] + fib_numbers[-2] fib_numbers.append(next_fib) return fib_numbers[n]"},{"question":"Write a function that takes a string as input and returns a new string that is the reverse of the input string. The input string may contain special characters, digits, and multiple whitespace characters. Additionally, the function should have a time complexity of O(n) and a space complexity of O(1), where n is the length of the input string. The function should only use a constant amount of extra space, meaning that it cannot create any additional data structures or arrays.","solution":"def reverse_string_in_place(s: str) -> str: Reverses the input string s in place and returns the resulting string. Uses O(n) time complexity and O(1) space complexity. # Convert to a list to mutate the characters in place char_list = list(s) # Two-pointer technique left, right = 0, len(char_list) - 1 while left < right: # Swap characters char_list[left], char_list[right] = char_list[right], char_list[left] left += 1 right -= 1 return ''.join(char_list)"},{"question":"Given an array, write a function that swaps the elements at indices i and j. However, you are not allowed to use a temporary variable to store the value during the swap. The function should modify the array directly.","solution":"def swap_elements(arr, i, j): Swaps the elements at indices i and j in the array arr without using a temporary variable. Parameters: arr (list): The array of elements. i (int): The index of the first element to be swapped. j (int): The index of the second element to be swapped. if i != j: arr[i], arr[j] = arr[j], arr[i]"},{"question":"Write a code in Python to remove the punctuation from a given sentence and convert all letters to lowercase.","solution":"import string def clean_sentence(sentence): Removes punctuation from the sentence and converts all letters to lowercase. translator = str.maketrans('', '', string.punctuation) return sentence.translate(translator).lower()"},{"question":"Write a recursive function in Python that calculates the factorial of a number. The function should check if the input is an integer and also handle negative numbers by returning an error message. Moreover, the function should enforce strictly positive integer inputs by raising an exception if the input is not a strictly positive integer. Additionally, include a feature to provide a custom error message if the input is negative.","solution":"def factorial(n, error_message=\\"Input must be a strictly positive integer.\\"): Returns the factorial of a strictly positive integer n. Raises ValueError with a custom error message if n is negative. Raises TypeError if n is not an integer. if not isinstance(n, int): raise TypeError(\\"Input must be an integer.\\") if n < 0: raise ValueError(error_message) if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"How can I add new methods to an existing Python module without modifying its source code?","solution":"def add_method_to_module(module, method_name, method): Adds a new method to an existing module. Args: module (module): the module to which the method should be added. method_name (str): the name of the new method. method (function): the method to add to the module. setattr(module, method_name, method)"},{"question":"Given a square matrix (NxN) in a CSV file (Link: https://people.sc.fsu.edu/~jburkardt/data/csv/csv.html), write a Python function to read the matrix and find the minimum path sum from top-left to bottom-right corner. You can only move either down or right at any point in time. It's guaranteed that the sum of all elements in the matrix and your result will be less than or equal to 2^31-1. For instance, for the matrix [[1,3,1],[1,5,1],[4,2,1]], the minimum path sum is 7 (1→3→1→1→1). Also, consider a scenario where an additional requirement is to find all possible paths that give the minimum sum. Now, develop a function that returns the sum along with a list of minimum sum paths. Solve this problem in a time-efficient manner.","solution":"import csv import sys def read_matrix_from_csv(file_path): Reads a square matrix from a CSV file. matrix = [] with open(file_path, 'r') as file: reader = csv.reader(file) for row in reader: matrix.append(list(map(int, row))) return matrix def min_path_sum_and_paths(matrix): Finds the minimum path sum and all possible paths that give the minimum sum from the top-left to the bottom-right corner of a square matrix. Only down and right movements are allowed. n = len(matrix) dp = [[sys.maxsize] * n for _ in range(n)] paths = [[[] for _ in range(n)] for _ in range(n)] dp[0][0] = matrix[0][0] paths[0][0] = [[(0, 0)]] for i in range(n): for j in range(n): if i > 0: if dp[i][j] > dp[i-1][j] + matrix[i][j]: dp[i][j] = dp[i-1][j] + matrix[i][j] paths[i][j] = [path + [(i, j)] for path in paths[i-1][j]] elif dp[i][j] == dp[i-1][j] + matrix[i][j]: paths[i][j].extend([path + [(i, j)] for path in paths[i-1][j]]) if j > 0: if dp[i][j] > dp[i][j-1] + matrix[i][j]: dp[i][j] = dp[i][j-1] + matrix[i][j] paths[i][j] = [path + [(i, j)] for path in paths[i][j-1]] elif dp[i][j] == dp[i][j-1] + matrix[i][j]: paths[i][j].extend([path + [(i, j)] for path in paths[i][j-1]]) return dp[-1][-1], paths[-1][-1] # For testing purposes, a helper function to convert paths to a more readable format def convert_paths_to_values(matrix, paths): Converts coordinate paths to their respective values in the matrix. value_paths = [] for path in paths: value_paths.append([matrix[x][y] for x, y in path]) return value_paths"},{"question":"Write a program using Python that generates a random number between a given range, provided by the user. The program should also include error handling to ensure that the user enters valid inputs.","solution":"import random def generate_random_number(start, end): Generates a random number between start and end, inclusive. Parameters: start (int): The lower bound of the range. end (int): The upper bound of the range. Returns: int: A random number between start and end. Raises: ValueError: If start is not less than or equal to end. TypeError: If start or end are not integers. if not isinstance(start, int) or not isinstance(end, int): raise TypeError(\\"Both start and end must be integers.\\") if start > end: raise ValueError(\\"Start must be less than or equal to end.\\") return random.randint(start, end)"},{"question":"Implement a function in Python that takes in a list of integers and returns the count of distinct numbers in the list. The function should have a time complexity of O(n) and a space complexity of O(n).","solution":"def count_distinct_numbers(arr): Returns the count of distinct numbers in the list. Time complexity: O(n) Space complexity: O(n) return len(set(arr))"},{"question":"How can I write a custom loss function in PyTorch, while ensuring it supports multiple GPUs and provides a gradient penalty for certain cases?","solution":"import torch import torch.nn as nn class CustomLossFunction(nn.Module): def __init__(self, alpha=1.0): super(CustomLossFunction, self).__init__() self.alpha = alpha self.mse_loss = nn.MSELoss() def forward(self, y_pred, y_true): # Calculate the Mean Squared Error loss mse = self.mse_loss(y_pred, y_true) # Calculate the gradient penalty (example: L2 norm of the gradients) gradients = torch.autograd.grad(outputs=mse, inputs=y_pred, grad_outputs=torch.ones(mse.size()).to(y_pred.device), create_graph=True, retain_graph=True, only_inputs=True)[0] gradient_penalty = torch.mean(gradients**2) final_loss = mse + self.alpha * gradient_penalty return final_loss"},{"question":"Write a Python function that takes a list of strings and a prefix as arguments and returns a list of strings that start with the given prefix. If no strings in the list start with the prefix, the function should return 'No matches found'. Additionally, if the prefix is empty, it should return all strings.","solution":"def strings_with_prefix(strings, prefix): Returns a list of strings that start with the given prefix. If no strings match, returns 'No matches found'. If the prefix is empty, returns all strings. if not prefix: return strings result = [s for s in strings if s.startswith(prefix)] if not result: return 'No matches found' return result"},{"question":"Write a python function that accepts a string and a number as input, then outputs the string repeated that number of times. Additionally, if the number is negative, the function should raise a ValueError.","solution":"def repeat_string(s, n): Returns the string s repeated n times. Raises ValueError if n is negative. if n < 0: raise ValueError(\\"The number must be non-negative\\") return s * n"},{"question":"Write a python method to convert a decimal number to binary representation. Additionally, write a second method that converts this binary representation back to a decimal number to verify the accuracy of the initial conversion. Implement the conversion without using built-in or library functions like bin() or int(). Your method should handle both positive and negative numbers.","solution":"def decimal_to_binary(num): Converts a decimal number to its binary representation. if num == 0: return \\"0\\" negative = num < 0 if negative: num = -num binary = \\"\\" while num > 0: binary = str(num % 2) + binary num = num // 2 if negative: binary = '-' + binary return binary def binary_to_decimal(binary_str): Converts a binary representation back to a decimal number. if binary_str == \\"0\\": return 0 negative = binary_str[0] == '-' if negative: binary_str = binary_str[1:] decimal = 0 exponent = 0 for digit in reversed(binary_str): decimal += int(digit) * (2 ** exponent) exponent += 1 if negative: decimal = -decimal return decimal"},{"question":"Create a Python script for a web application that implements a genetic algorithm for optimizing a given function. The script should include a Flask server, an endpoint for running the optimization, and a visualization of the results.","solution":"from flask import Flask, jsonify, request import random import numpy as np import matplotlib.pyplot as plt import io import base64 app = Flask(__name__) def objective_function(x): return x**2 def create_individual(size): return [random.uniform(-10, 10) for _ in range(size)] def create_population(pop_size, ind_size): return [create_individual(ind_size) for _ in range(pop_size)] def calculate_fitness(individual): return objective_function(sum(individual)) def selection(population): sorted_population = sorted(population, key=calculate_fitness) return sorted_population[:len(population)//2] def crossover(parent1, parent2): point = random.randint(1, len(parent1) - 1) child1 = parent1[:point] + parent2[point:] child2 = parent2[:point] + parent1[point:] return child1, child2 def mutate(individual, mutation_rate): return [gene + random.uniform(-1, 1) if random.random() < mutation_rate else gene for gene in individual] def genetic_algorithm(pop_size, ind_size, generations, mutation_rate): population = create_population(pop_size, ind_size) best_individuals = [] for generation in range(generations): population = selection(population) next_generation = [] while len(next_generation) < pop_size: parent1, parent2 = random.sample(population, 2) child1, child2 = crossover(parent1, parent2) next_generation.append(mutate(child1, mutation_rate)) next_generation.append(mutate(child2, mutation_rate)) population = next_generation best_individual = min(population, key=calculate_fitness) best_individuals.append(best_individual) return best_individuals @app.route('/optimize', methods=['POST']) def optimize(): data = request.json pop_size = data.get('pop_size', 100) ind_size = data.get('ind_size', 1) generations = data.get('generations', 100) mutation_rate = data.get('mutation_rate', 0.01) best_individuals = genetic_algorithm(pop_size, ind_size, generations, mutation_rate) best_solution = min(best_individuals, key=calculate_fitness) # Plot the fitness over generations fitness_values = [calculate_fitness(ind) for ind in best_individuals] plt.plot(fitness_values) plt.xlabel('Generations') plt.ylabel('Fitness') plt.title('Genetic Algorithm Optimization') # Save plot to a bytes object and encode as base64 buf = io.BytesIO() plt.savefig(buf, format='png') buf.seek(0) img_base64 = base64.b64encode(buf.read()).decode('utf-8') return jsonify({'best_solution': best_solution, 'fitness_plot': img_base64}) if __name__ == '__main__': app.run(debug=True)"},{"question":"Given a linked list, swap the position of the two adjacent nodes without altering the data inside the nodes. Additionally, ensure that your solution works efficiently for lists of any size, including cyclical linked lists.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def swap_adjacent_nodes(head): Swaps the position of the two adjacent nodes in a linked list without altering the data inside the nodes. Parameters: head (ListNode): Head node of the linked list. Returns: ListNode: Modified head of the linked list with adjacent nodes swapped. dummy = ListNode(0) dummy.next = head prev, current = dummy, head while current and current.next: # Nodes to be swapped first = current second = current.next # Swapping prev.next = second first.next = second.next second.next = first # Moving pointers prev = first current = first.next return dummy.next"},{"question":"Write a Python function that compresses a given string by counts of repeated characters. However, in addition to compressing the string, your function should also be able to decompress the string back to its original form.","solution":"def compress(s): Compresses the given string by counts of repeated characters. Args: s (str): The input string to compress. Returns: str: The compressed string. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) # Append last character and its count return ''.join(compressed) def decompress(s): Decompresses the given string back to its original form. Args: s (str): The compressed string to decompress. Returns: str: The original decompressed string. if not s: return \\"\\" decompressed = [] i = 0 while i < len(s): char = s[i] count = '' i += 1 while i < len(s) and s[i].isdigit(): count += s[i] i += 1 decompressed.append(char * int(count)) return ''.join(decompressed)"},{"question":"Create a program that converts temperatures from Fahrenheit to Celsius and vice versa. The program should allow the user to choose the conversion direction and handle invalid input gracefully.","solution":"def fahrenheit_to_celsius(fahrenheit): Converts Fahrenheit to Celsius. return (fahrenheit - 32) * 5.0 / 9.0 def celsius_to_fahrenheit(celsius): Converts Celsius to Fahrenheit. return (celsius * 9.0 / 5.0) + 32 def convert_temperature(value, to_scale): Converts the temperature based on the given scale. to_scale should be 'F' for Fahrenheit or 'C' for Celsius. Returns the converted temperature. if to_scale.upper() == 'C': return fahrenheit_to_celsius(value) elif to_scale.upper() == 'F': return celsius_to_fahrenheit(value) else: raise ValueError(\\"Invalid scale: choose 'C' or 'F'\\")"},{"question":"Write a computer program to guess a number between 1 and 100 using binary search.","solution":"def guess_number_binary_search(low, high, guess_function): Uses binary search to guess a number between low and high. Args: - low (int): the lower bound of the range. - high (int): the upper bound of the range. - guess_function (function): a function that takes an integer as input and returns -1 if the guess is too high, 1 if the guess is too low, and 0 if the guess is correct. Returns: - int: the guessed number. while low <= high: mid = (low + high) // 2 result = guess_function(mid) if result == 0: return mid elif result < 0: high = mid - 1 else: low = mid + 1 # If we exhaust the loop, we did not guess the correct number. return -1"},{"question":"How can I create a program that converts every character in a string to uppercase?","solution":"def to_uppercase(s): Converts every character in the string s to uppercase. return s.upper()"},{"question":"Using the Python programming language, create a function that takes in a range of angles in degrees as input and returns a list of the trigonometric tangent values of those angles. The function should also include error handling to ensure that the input is a valid range of angles and that the tangent values are not undefined (i.e., the angle is not an odd multiple of 90 degrees). Additionally, the function should be vectorized to allow for efficient computation of the tangent values of multiple angles at once. Finally, create a table that displays the input angles and their corresponding tangent values with a precision of four decimal places, and include a plot of the tangent function over the input range of angles. In mathematics, the tangent function is a trigonometric function that is defined as the ratio of the sine of an angle to the cosine of that angle. It is commonly used in geometry, physics, and engineering applications. In Python, the tangent function can be computed using the math module, which provides a tan() function that takes an angle in radians as input and returns its tangent value. However, since we want our function to take angles in degrees as input, we need to convert the input angles to radians before computing their tangent values using the math.tan() function. Here is the code for the vectorized function that takes a range of angles in degrees as input and returns a list of their tangent values:\`\`\`python","solution":"import numpy as np import pandas as pd import matplotlib.pyplot as plt def compute_tangent_values(start_angle, end_angle): Compute the tangent values of angles in degrees within the specified range. Args: start_angle (float): The starting angle in degrees. end_angle (float): The ending angle in degrees. Returns: list of tuples: A list of tuples where each tuple contains the angle in degrees and its tangent value. if not isinstance(start_angle, (int, float)) or not isinstance(end_angle, (int, float)): raise ValueError(\\"Inputs should be numeric.\\") if start_angle >= end_angle: raise ValueError(\\"The start angle must be less than the end angle.\\") # Generate a range of angles angles = np.arange(start_angle, end_angle + 1) # Convert angles to radians radians = np.deg2rad(angles) # Compute tangent values tangent_values = np.tan(radians) # Filter out undefined tangent values (angles that are odd multiples of 90 degrees) valid_indices = ~np.isclose(np.mod(angles, 180), 90) valid_angles = angles[valid_indices] valid_tangents = tangent_values[valid_indices] # Create a list of tuples (angle, tangent value) result = list(zip(valid_angles, np.round(valid_tangents, 4))) # Create a DataFrame to display angles and tangent values df = pd.DataFrame(result, columns=[\\"Angle (Degrees)\\", \\"Tangent Value\\"]) print(df) # Plot the tangent function plt.figure(figsize=(10, 6)) plt.plot(angles, tangent_values, label=\\"tan(x)\\") plt.scatter(valid_angles, valid_tangents, color='red') plt.xlabel(\\"Angle (Degrees)\\") plt.ylabel(\\"Tangent Value\\") plt.title(\\"Tangent Function\\") plt.axhline(y=0, color='black', linewidth=0.5) plt.axvline(x=0, color='black', linewidth=0.5) plt.grid(True) plt.legend() plt.show() return result"},{"question":"Create a Python program that can convert a list of phone numbers in the format of \\"(XXX) XXX-XXXX\\" to a new format: \\"XXX-XXX-XXXX\\". The input should be a list of phone numbers in the original format, and the output should be a list of phone numbers in the new format.","solution":"def convert_phone_numbers(phone_numbers): Converts a list of phone numbers from the format (XXX) XXX-XXXX to XXX-XXX-XXXX Parameters: phone_numbers (list of str): The list of phone numbers in the format (XXX) XXX-XXXX Returns: list of str: The list of phone numbers in the format XXX-XXX-XXXX converted_numbers = [] for number in phone_numbers: new_number = number.replace('(', '').replace(')', '').replace(' ', '-') converted_numbers.append(new_number) return converted_numbers"},{"question":"Write a code that splits a list into two equal halves. If the list has an odd number of elements, place the middle element in the second half. Additionally, implement this without using any built-in functions for list manipulation and without using any additional data structures other than the output lists.","solution":"def split_list(lst): Splits the input list into two halves. If the list has an odd number of elements, the middle element is placed in the second half. Parameters: lst (list): The list to be split. Returns: tuple: A tuple containing two lists, representing the two halves. length = len(lst) mid = (length + 1) // 2 if length % 2 != 0 else length // 2 first_half = [] second_half = [] for i in range(length): if i < mid: first_half.append(lst[i]) else: second_half.append(lst[i]) return first_half, second_half"},{"question":"Imagine you're working on a project that involves manipulating a 2D list (a list of lists) in Python. You need to write a function that can replace all occurrences of a specific value, let's call it \`old_val\`, with a new value \`new_val\` in this 2D list. Your function should handle any type of 2D list, regardless of its size or the types of values it contains.","solution":"def replace_in_2d_list(matrix, old_val, new_val): Replace all occurrences of old_val with new_val in the 2D list (matrix). Args: matrix (list of list): The 2D list to modify. old_val: The value to be replaced. new_val: The value to replace with. Returns: list of list: The modified 2D list. return [[new_val if item == old_val else item for item in row] for row in matrix]"},{"question":"Construct a while loop to print out all prime numbers between 1 and 1000 in reverse order, but only if their sum of digits is a prime number as well. Additionally, the program should output the number of prime numbers found and the sum of all prime numbers.","solution":"def is_prime(n): Check if a number is a prime if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sum_of_digits(n): Return the sum of the digits of a number return sum(int(digit) for digit in str(n)) def prime_numbers_with_prime_digit_sum(): Constructs a list of prime numbers between 1 and 1000 where the sum of digits is also prime. Prints the primes in reverse order, along with their count and total sum. primes = [] for num in range(1000, 0, -1): if is_prime(num) and is_prime(sum_of_digits(num)): primes.append(num) for prime in primes: print(prime) print(\\"Number of prime numbers found:\\", len(primes)) print(\\"Sum of all prime numbers:\\", sum(primes)) if __name__ == \\"__main__\\": prime_numbers_with_prime_digit_sum()"},{"question":"You are coding an auto-reply feature for a company's email system. They want it to only trigger replies during certain hours of the day. The system should not reply outside of business hours. How would you implement this in Python, using the datetime module?","solution":"from datetime import datetime def should_reply(current_time, start_hour=9, end_hour=17): Determines if an auto-reply should be triggered based on current time and business hours. Parameters: current_time (datetime): The current datetime. start_hour (int): The business start hour, default is 9 AM. end_hour (int): The business end hour, default is 5 PM (17). Returns: bool: True if the current time is within business hours, False otherwise. current_hour = current_time.hour return start_hour <= current_hour < end_hour"},{"question":"Design a Python function snippet to Display Extreme Hair care: Conditioning and Moisturizing for Analysis for Professionals. Implement if/else or switch/case statements to handle different conditions related to the Safety. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def hair_care_safety_analysis(condition): Analyzes hair care safety based on the given condition related to conditioning and moisturizing. Parameters: condition (str): The specific hair care condition to analyze. Possible values: - \\"dryness\\" - \\"oily\\" - \\"brittle\\" - \\"normal\\" - \\"sensitive\\" Returns: str: A safety recommendation for hair care based on the given condition. # Define the safety recommendations for each condition if condition == \\"dryness\\": return \\"Use deep conditioning treatments and moisturizing products regularly.\\" elif condition == \\"oily\\": return \\"Use lightweight, oil-free products and avoid heavy moisturizing conditioners.\\" elif condition == \\"brittle\\": return \\"Use protein-rich conditioners and avoid heat styling tools.\\" elif condition == \\"normal\\": return \\"Maintain a balanced hair care routine with regular conditioning and moisturizing.\\" elif condition == \\"sensitive\\": return \\"Use gentle, hypoallergenic products and avoid harsh chemicals.\\" else: return \\"Unknown condition. Please provide a valid condition: dryness, oily, brittle, normal, or sensitive.\\""},{"question":"How can I develop an AI agent to play the classic Snake game using a Q-Learning algorithm in Python?","solution":"import numpy as np import random from collections import deque class QLearningAgent: def __init__(self, state_size, action_size): self.state_size = state_size self.action_size = action_size self.q_table = np.zeros((state_size, action_size)) self.learning_rate = 0.1 self.discount_rate = 0.95 self.exploration_rate = 1.0 self.exploration_decay = 0.995 self.exploration_min = 0.01 def choose_action(self, state): if random.uniform(0, 1) < self.exploration_rate: return random.randint(0, self.action_size - 1) # Random action return np.argmax(self.q_table[state]) # Best action def learn(self, state, action, reward, next_state): best_next_action = np.argmax(self.q_table[next_state]) td_target = reward + self.discount_rate * self.q_table[next_state][best_next_action] td_error = td_target - self.q_table[state][action] self.q_table[state][action] += self.learning_rate * td_error if self.exploration_rate > self.exploration_min: self.exploration_rate *= self.exploration_decay def get_q_table(self): return self.q_table"},{"question":"Implement a function called \`string_compressor\` that takes in a string as input and returns a compressed version of the string using the counts of repeated characters. The compressed string should be formed by placing the count of repeated characters immediately after the character. If the compressed string is not shorter than the original string, the function should return the original string.","solution":"def string_compressor(s): Compresses the input string using the counts of repeated characters. If the compressed string is not shorter than the original string, returns the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1]) compressed.append(str(count)) count = 1 # Append the last group compressed.append(s[-1]) compressed.append(str(count)) compressed_string = ''.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Create a detailed guide on how to create a Python function that checks if a number is prime or not. The function should include an explanation of the algorithm used, and should be written in a clear and concise manner. Additionally, create a table that displays the execution time of the function for various input sizes, and provide the code used to generate the table. Finally, include a section on how to optimize the function for performance, including any trade-offs that may be involved.","solution":"import math import time def is_prime(n): Checks if a number is prime or not. Parameters: n (int): The number to check. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def measure_execution_time(n): start_time = time.time() is_prime(n) end_time = time.time() execution_time = end_time - start_time return execution_time def generate_execution_time_table(max_input_size): Generates a table of execution times for the is_prime function with various input sizes. Parameters: max_input_size (int): The maximum input size to test. Returns: list of tuples: Each tuple contains (input_size, execution_time). table = [] input_sizes = [10**i for i in range(1, max_input_size + 1)] for size in input_sizes: execution_time = measure_execution_time(size) table.append((size, execution_time)) return table # Example usage: Generate a table of execution times up to 10^6 execution_time_table = generate_execution_time_table(6) for size, exec_time in execution_time_table: print(f\\"Input Size: {size}tExecution Time: {exec_time:.10f} seconds\\") # Function Optimization: # The current implementation of the is_prime function is efficient for most practical purposes. # It uses trial division up to the square root of n, which reduces the number of divisions significantly. # Further optimization could involve more advanced algorithms like the Miller-Rabin primality test, # but these come at the cost of increased complexity and probabilistic nature in some cases."},{"question":"Compare two strings and output true if they are an anagram. Additionally, implement the solution by comparing the frequency of occurrences of each character in both strings without sorting them.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams of each other, False otherwise. # Early return if lengths are not equal if len(str1) != len(str2): return False # Dictionary to count frequency of characters in str1 count1 = {} for char in str1: count1[char] = count1.get(char, 0) + 1 # Dictionary to count frequency of characters in str2 count2 = {} for char in str2: count2[char] = count2.get(char, 0) + 1 # Compare both dictionaries return count1 == count2"},{"question":"Implement a function that takes in three strings and returns a boolean value indicating whether the first string is a valid IPv4 address within a network defined by the second and third strings, which represent the network address and subnet mask, respectively. The function should check if the first string is a valid IPv4 address and if it falls within the network defined by the second and third strings. In addition, the function should validate the format of all three input strings to ensure they are valid IPv4 addresses.","solution":"import ipaddress def is_ip_in_network(ip_address, network_address, subnet_mask): Checks if an IP address is in a network defined by a network address and subnet mask. Args: ip_address (str): A string representing the IP address to be checked. network_address (str): A string representing the network address. subnet_mask (str): A string representing the subnet mask. Returns: bool: True if the IP address is within the network, False otherwise. try: ip = ipaddress.IPv4Address(ip_address) network = ipaddress.IPv4Network(f\\"{network_address}/{subnet_mask}\\", strict=False) except ipaddress.AddressValueError: return False except ipaddress.NetmaskValueError: return False return ip in network"},{"question":"In Python, create a function that takes two parameters, a list of integers and an integer, and returns a new list with all elements multiplied by the parameter.","solution":"def multiply_elements(input_list, multiplier): This function takes a list of integers and an integer as parameters, and returns a new list where each element from the input list is multiplied by the multiplier. Parameters: input_list (list of int): A list of integers to be multiplied. multiplier (int): The integer by which each element in the input list will be multiplied. Returns: list of int: A new list with each element from the input list multiplied by the multiplier. return [x * multiplier for x in input_list]"},{"question":"Convert a Python list into a string of comma-separated values, but exclude any numbers divisible by 3.","solution":"def list_to_comma_separated_string(lst): Converts a list into a string of comma-separated values, excluding any numbers divisible by 3. Args: lst (list): A list of integers. Returns: str: A comma-separated string excluding numbers divisible by 3. filtered_list = [str(num) for num in lst if num % 3 != 0] return ','.join(filtered_list)"},{"question":"Can you create a quick Python program? The task is to generate a list of four-digit \\"lucky\\" numbers. A \\"lucky\\" number is defined as a number that, when its digits are multiplied together, the result equals 24.","solution":"def generate_lucky_numbers(): Generate a list of four-digit \\"lucky\\" numbers. A \\"lucky\\" number is defined as a number that, when its digits are multiplied together, the result equals 24. lucky_numbers = [] for number in range(1000, 10000): digits = [int(d) for d in str(number)] product = 1 for digit in digits: product *= digit if product == 24: lucky_numbers.append(number) return lucky_numbers"},{"question":"Write a Python program that extracts the domain name from an email address. The program should take user input for the email address and then output the domain name. Additionally, validate the email address format before extracting the domain. If the email address is not valid, return an appropriate error message.","solution":"import re def extract_domain_from_email(email): Extract and return the domain name from a valid email address. If the email address is not valid, return an error message. # Regex pattern for validating an Email regex = r'^b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,}b' if re.match(regex, email): return email.split('@')[1] else: return \\"Invalid email address\\""},{"question":"Write a script in Python to find the longest word in a given string that starts with a vowel.","solution":"def longest_vowel_starting_word(s): Finds the longest word in a given string that starts with a vowel. vowels = 'aeiouAEIOU' words = s.split() max_length = 0 longest_word = \\"\\" for word in words: if word[0] in vowels: if len(word) > max_length: max_length = len(word) longest_word = word return longest_word"},{"question":"Build a function to sort an array of numbers in descending order without using the sort() method. Your solution should have a time complexity of O(n^2) and should not use any built-in sorting functions or data structures. Additionally, you are not allowed to use any extra space or create any additional arrays or data structures.","solution":"def bubble_sort_desc(array): Sorts an array of numbers in descending order using bubble sort algorithm. The time complexity is O(n^2). n = len(array) for i in range(n - 1): # Traverse through array from 0 to n-i-1 for j in range(0, n - i - 1): # Swap if the element found is smaller than the next element if array[j] < array[j + 1]: array[j], array[j + 1] = array[j + 1], array[j] return array"},{"question":"Write a python code to create an array of 100,000,000 integers with values ranging from 0 to 100,000,000. Then, sort the array in ascending order using the bubble sort algorithm. Finally, implement a binary search algorithm to find a target number in the sorted array.","solution":"import random def generate_large_array(size, max_value): Generates an array of given size with random integers ranging from 0 to max_value-1. return [random.randint(0, max_value - 1) for _ in range(size)] def bubble_sort(arr): Sorts an array using the bubble sort algorithm. n = len(arr) for i in range(n): # Track if any swapping happens swapped = False for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swapped = True # If no two elements were swapped by inner loop, then break if not swapped: break return arr def binary_search(arr, target): Performs binary search on a sorted array to find the target number. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1 # Main Execution if __name__ == \\"__main__\\": # Generating large array array_size = 1000000 # Reduced size for demonstrative purposes max_value = 100000000 large_array = generate_large_array(array_size, max_value) # Sorting the array (using a placeholder efficient sort here for practicality) sorted_array = sorted(large_array) # Performing binary search for an example target target = random.randint(0, max_value - 1) index = binary_search(sorted_array, target) print(f\\"Target {target} found at index: {index}\\" if index != -1 else f\\"Target {target} not found.\\")"},{"question":"Develop a Python function that accepts an integer input and calculates its Fibonacci sequence value using recursion. Additionally, implement memoization to optimize the function for large inputs. The function should also validate the input to ensure it's within the range of 0 to 50.","solution":"def fibonacci(n, memo={0: 0, 1: 1}): Returns the n-th Fibonacci number. Uses recursion with memoization for optimization. :param n: Integer value between 0 and 50 (inclusive) :param memo: Dictionary to store previously computed Fibonacci values :return: n-th Fibonacci number if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0 or n > 50: raise ValueError(\\"Input must be within the range of 0 to 50.\\") if n not in memo: memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Given a JSON string, convert it into a Python dictionary without using any in-built or external libraries for JSON parsing. Enforce handling of nested objects within the JSON string as well.","solution":"def parse_json(json_str): Parses a JSON string and converts it to a Python dictionary. Handles nested objects as well. def parse_value(value): value = value.strip() if value.startswith('\\"') and value.endswith('\\"'): return value[1:-1] if value == 'null': return None if value == 'true': return True if value == 'false': return False if value.startswith('{'): return parse_object(value) if value.startswith('['): return parse_array(value) try: return int(value) except ValueError: try: return float(value) except ValueError: raise ValueError(f\\"Unrecognized value: {value}\\") def parse_object(obj_str): obj = {} obj_str = obj_str.strip('{}').strip() if not obj_str: return obj key_values = split_key_values(obj_str) for key, value in key_values: obj[key.strip('\\"')] = parse_value(value) return obj def split_key_values(obj_str): key_values = [] stack = [] start = 0 for i, char in enumerate(obj_str): if char == '{' or char == '[': stack.append(char) elif char == '}' and stack[-1] == '{': stack.pop() elif char == ']' and stack[-1] == '[': stack.pop() elif char == ',' and not stack: key_values.append(obj_str[start:i]) start = i + 1 key_values.append(obj_str[start:].strip()) result = [] for key_value in key_values: key, value = split_key_value(key_value) result.append((key, value)) return result def split_key_value(key_value_str): stack = [] for i, char in enumerate(key_value_str): if char == ':' and not stack: return key_value_str[:i].strip(), key_value_str[i+1:].strip() elif char == '{' or char == '[': stack.append(char) elif char == '}' and stack[-1] == '{': stack.pop() elif char == ']' and stack[-1] == '[': stack.pop() raise ValueError(f\\"Invalid key-value pair: {key_value_str}\\") def parse_array(array_str): array = [] array_str = array_str.strip('[]').strip() if not array_str: return array elements = split_elements(array_str) for element in elements: array.append(parse_value(element)) return array def split_elements(array_str): elements = [] stack = [] start = 0 for i, char in enumerate(array_str): if char == '{' or char == '[': stack.append(char) elif char == '}' and stack[-1] == '{': stack.pop() elif char == ']' and stack[-1] == '[': stack.pop() elif char == ',' and not stack: elements.append(array_str[start:i]) start = i + 1 elements.append(array_str[start:].strip()) return elements return parse_object(json_str)"},{"question":"Given a sequence of characters, devise a Python function that checks whether this sequence qualifies as a palindrome. A string is identified as a palindrome if it maintains the same sequence when read backwards. Your function should be capable of affirming this property through a boolean return value.","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, otherwise returns False. # Removing any spaces and converting the string to lower case for uniformity s_cleaned = s.replace(\\" \\", \\"\\").lower() return s_cleaned == s_cleaned[::-1]"},{"question":"Can I pass network interfaces as a parameter to a Python function, but have their configuration preserved by the network service (such as NetworkManager)? I am primarily interested in finding a way to preserve the ability to apply existing configurations (e.g. not static IP addresses) after passing network interfaces to a Python function. All solutions I have found so far, such as networkx, seem to manipulate configurations directly, which is not desirable for my use case.","solution":"def process_network_interfaces(*interfaces): This function receives network interface names and performs some processing without altering their configurations. Args: *interfaces (str): Variable number of network interface names. Returns: list: A list of dictionaries containing the interface name and a dummy status. results = [] for interface in interfaces: # Simulate processing without changing configuration result = { \\"interface\\": interface, \\"status\\": \\"unmodified\\" } results.append(result) return results"},{"question":"Design a Python function that not only accepts a list of dictionaries and returns a list of dictionaries with distinct values based on a provided key, but also ensures that the output order is based on the ascending order of the values for that key. The function should handle erroneous inputs gracefully.","solution":"def filter_and_sort_dicts(dict_list, key): Filters a list of dictionaries to return unique dictionaries based on a specified key and sorts them in ascending order of the values corresponding to that key. Args: - dict_list (list of dict): List containing dictionaries. - key (str): The key on which to base uniqueness and sort order. Returns: - List of dictionaries sorted by the specified key with unique values. if not isinstance(dict_list, list) or not all(isinstance(d, dict) for d in dict_list): raise TypeError(\\"Input must be a list of dictionaries.\\") unique_dict = {} for d in dict_list: if key in d and d[key] not in unique_dict: unique_dict[d[key]] = d return sorted(unique_dict.values(), key=lambda x: x[key])"},{"question":"Write a Python script to find the common elements between two lists, but you are not allowed to use the built-in set() function. Additionally, the solution should have a time complexity of O(n) and should not use any additional data structures.","solution":"def find_common_elements(list1, list2): Find common elements between two lists without using set and ensures a time complexity of O(n). # Empty dictionary to store the counts of elements in list1 element_counts = {} # Iterate through list1 and count elements for elem in list1: if elem in element_counts: element_counts[elem] += 1 else: element_counts[elem] = 1 # List to store common elements common_elements = [] # Iterate through list2 and check for common elements for elem in list2: if elem in element_counts and element_counts[elem] > 0: common_elements.append(elem) element_counts[elem] -= 1 return common_elements"},{"question":"Develop a program that not only finds the first occurrence of substring \\"data\\" in the given string, but also counts the total occurrences of the substring in a case-insensitive way. Moreover, the program should replace the found substring with a dynamically provided another string.","solution":"def process_string(original_string, replacement_string): Finds the first occurrence of the substring \\"data\\" in the original_string, counts the total occurrences of the substring in a case-insensitive way, and replaces the first found instance with replacement_string. Parameters: original_string (str): The string to process. replacement_string (str): The string to replace the first instance of \\"data\\". Returns: result (dict): A dictionary containing: - \\"first_occur_position\\" (int): The position of the first occurrence of \\"data\\", or -1 if not found. - \\"total_occurrences\\" (int): The total occurrences of \\"data\\". - \\"modified_string\\" (str): The modified string with the first instance of \\"data\\" replaced by replacement_string. lower_string = original_string.lower() substring = \\"data\\" first_occur_position = lower_string.find(substring) total_occurrences = lower_string.count(substring) if first_occur_position != -1: modified_string = original_string[:first_occur_position] + replacement_string + original_string[first_occur_position + len(substring):] else: modified_string = original_string return { \\"first_occur_position\\": first_occur_position, \\"total_occurrences\\": total_occurrences, \\"modified_string\\": modified_string }"},{"question":"Create a function in Python to filter out all the numbers that are divisible by 2 in a given list.","solution":"def filter_divisible_by_2(numbers): Returns a list containing only the numbers from the input list that are divisible by 2. return [num for num in numbers if num % 2 == 0]"},{"question":"Given three strings, write a Python program to check if any permutation of the first two strings forms a substring of the third string.","solution":"from itertools import permutations def check_permutation_substring(str1, str2, str3): Returns True if any permutation of concatenation of str1 and str2 forms a substring of str3, otherwise False. combined = str1 + str2 for perm in permutations(combined): if ''.join(perm) in str3: return True return False"},{"question":"Write a program in Python to implement a neural network for the XOR function using only NumPy and no external deep learning libraries. Additionally, provide a detailed explanation of how backpropagation works in the process of training this network.","solution":"import numpy as np # Sigmoid activation function and its derivative def sigmoid(x): return 1 / (1 + np.exp(-x)) def sigmoid_derivative(x): return x * (1 - x) class NeuralNetwork: def __init__(self, x, y): self.input = x self.weights1 = np.random.rand(self.input.shape[1], 4) # 4 nodes in the hidden layer self.weights2 = np.random.rand(4, 1) self.y = y self.output = np.zeros(y.shape) def feedforward(self): self.layer1 = sigmoid(np.dot(self.input, self.weights1)) self.output = sigmoid(np.dot(self.layer1, self.weights2)) def backprop(self): error = self.y - self.output d_output = error * sigmoid_derivative(self.output) error_hidden_layer = d_output.dot(self.weights2.T) d_hidden_layer = error_hidden_layer * sigmoid_derivative(self.layer1) self.weights1 += self.input.T.dot(d_hidden_layer) self.weights2 += self.layer1.T.dot(d_output) def train(self, epochs=10000): for _ in range(epochs): self.feedforward() self.backprop() # XOR dataset x = np.array([[0, 0], [0, 1], [1, 0], [1, 1]]) y = np.array([[0], [1], [1], [0]]) # Instantiate and train the neural network nn = NeuralNetwork(x, y) nn.train()"},{"question":"Define a recursive function in Python that, given an initial value and a termination condition, can compute the factorial of a number.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is 0, returns 1 as 0! is 1. If n is negative, returns None because factorial is not defined for negative numbers. if n < 0: return None if n == 0: return 1 return n * factorial(n - 1)"},{"question":"How can I create a basic blockchain using Python?","solution":"import hashlib import json from time import time class Blockchain: def __init__(self): self.chain = [] self.current_transactions = [] # Create the genesis block self.new_block(previous_hash='1', proof=100) def new_block(self, proof, previous_hash=None): Create a new Block in the Blockchain. :param proof: The proof given by the Proof of Work algorithm :param previous_hash: Hash of previous Block :return: New Block block = { 'index': len(self.chain) + 1, 'timestamp': time(), 'transactions': self.current_transactions, 'proof': proof, 'previous_hash': previous_hash or self.hash(self.chain[-1]), } # Reset the current list of transactions self.current_transactions = [] self.chain.append(block) return block def new_transaction(self, sender, recipient, amount): Creates a new transaction to go into the next mined Block. :param sender: Address of the Sender :param recipient: Address of the Recipient :param amount: Amount :return: The index of the Block that will hold this transaction self.current_transactions.append({ 'sender': sender, 'recipient': recipient, 'amount': amount, }) return self.last_block['index'] + 1 @staticmethod def hash(block): Creates a SHA-256 hash of a Block. :param block: Block :return: Hash block_string = json.dumps(block, sort_keys=True).encode() return hashlib.sha256(block_string).hexdigest() @property def last_block(self): return self.chain[-1] def proof_of_work(self, last_proof): Simple Proof of Work algorithm: - Find a number p such that hash(pp') contains 4 leading zeroes, where p is the previous p' p is the previous proof, and p' is the new proof :param last_proof: <int> :return: <int> proof = 0 while self.valid_proof(last_proof, proof) is False: proof += 1 return proof @staticmethod def valid_proof(last_proof, proof): Validates the Proof: Does hash(last_proof, proof) contain 4 leading zeroes? :param last_proof: <int> Previous Proof :param proof: <int> Current Proof :return: <bool> True if correct, False if not. guess = f'{last_proof}{proof}'.encode() guess_hash = hashlib.sha256(guess).hexdigest() return guess_hash[:4] == \\"0000\\""},{"question":"Write a simple python program to detect if two rectangles are colliding, and if so, return the coordinates of the point at which they collide. The rectangles are axis-aligned and can be any width and height. Assume you are given the coordinates of the top left and bottom right corners of each rectangle as two tuples.","solution":"def detect_collision(rect1, rect2): Detects if two rectangles are colliding and returns the coordinates of the collision point. Parameters: - rect1: A tuple containing the coordinates of the top-left and bottom-right corners of the first rectangle. Format: ((x1_topleft, y1_topleft), (x1_bottomright, y1_bottomright)) - rect2: A tuple containing the coordinates of the top-left and bottom-right corners of the second rectangle. Format: ((x2_topleft, y2_topleft), (x2_bottomright, y2_bottomright)) Returns: - A list of tuples containing the coordinates of the collision points. If there is no collision, returns an empty list. x1_topleft, y1_topleft = rect1[0] x1_bottomright, y1_bottomright = rect1[1] x2_topleft, y2_topleft = rect2[0] x2_bottomright, y2_bottomright = rect2[1] # Check if rectangles do not collide if (x1_bottomright < x2_topleft or x1_topleft > x2_bottomright or y1_bottomright > y2_topleft or y1_topleft < y2_bottomright): return [] # Calculate collision area coordinates x_overlap_start = max(x1_topleft, x2_topleft) x_overlap_end = min(x1_bottomright, x2_bottomright) y_overlap_start = max(y1_bottomright, y2_bottomright) y_overlap_end = min(y1_topleft, y2_topleft) collision_points = [] if x_overlap_start < x_overlap_end and y_overlap_start < y_overlap_end: collision_points.append((x_overlap_start, y_overlap_start)) collision_points.append((x_overlap_end, y_overlap_start)) collision_points.append((x_overlap_start, y_overlap_end)) collision_points.append((x_overlap_end, y_overlap_end)) return collision_points"},{"question":"Write a Python program to find the maximum pair sum of two numbers from the given list of integers. For instance, in the list [10, 20, 30, 40], the maximum pair sum is 70 (30 + 40).","solution":"def max_pair_sum(numbers): Finds the maximum pair sum of two numbers from the given list. Args: numbers (list): A list of integers. Returns: int: The maximum pair sum. if len(numbers) < 2: raise ValueError(\\"List must contain at least two numbers\\") sorted_numbers = sorted(numbers, reverse=True) return sorted_numbers[0] + sorted_numbers[1]"},{"question":"Code a function to clamp a given number between a minimum value and maximum value. However, if the given number is negative, return the absolute value of the number before clamping it.","solution":"def clamp_and_abs(number, min_value, max_value): Clamps the given number within the range [min_value, max_value] after taking the absolute value if necessary. Args: - number (float): The number to be clamped. - min_value (float): The minimum value of the range. - max_value (float): The maximum value of the range. Returns: - float: The clamped value within the specified range. if number < 0: number = abs(number) if number < min_value: return min_value elif number > max_value: return max_value else: return number"},{"question":"Create a Python program that simulates a simple calculator. The program should accept two numbers and an operator (+, -, *, /) as input and perform the corresponding arithmetic operation. Ensure proper error handling for invalid inputs and division by zero.","solution":"def calculator(a, b, operator): Simulates a simple calculator that performs the arithmetic operation specified by the operator on two numbers a and b. :param a: First number. :param b: Second number. :param operator: A string representing the arithmetic operation ('+', '-', '*', '/'). :return: The result of the arithmetic operation, or a string message in case of an error. try: if operator == '+': return a + b elif operator == '-': return a - b elif operator == '*': return a * b elif operator == '/': if b == 0: return \\"Error: Division by zero.\\" return a / b else: return \\"Error: Invalid operator.\\" except TypeError: return \\"Error: Invalid input type. Only numbers are allowed.\\""},{"question":"Write a function that generates a random integer between two given numbers and returns the generated number. The function should also include error handling for cases where the input is not a number or the second number is smaller than the first number.","solution":"import random def generate_random_number_between(a, b): Returns a random integer between a and b (inclusive). Includes error handling for non-numeric inputs and cases where the second number is smaller than the first number. if not (isinstance(a, (int, float)) and isinstance(b, (int, float))): return \\"Error: Both inputs must be numbers.\\" if a > b: return \\"Error: The second number (b) must be greater than or equal to the first number (a).\\" return random.randint(int(a), int(b))"},{"question":"Use Python to create a program that accepts ingredient measurements including volume, weight, density and units, and then use those measurements to output common liquid or dry ingredient unit conversions.","solution":"# Define a function to convert volume to weight using density def volume_to_weight(volume, density, volume_unit=\\"liters\\"): if volume_unit == \\"milliliters\\": volume = volume / 1000 # convert milliliters to liters elif volume_unit == \\"cubic meters\\": volume = volume * 1000 # convert cubic meters to liters weight = volume * density # density should be in kg/L return weight # Define a function to convert weight to volume using density def weight_to_volume(weight, density, weight_unit=\\"kilograms\\"): if weight_unit == \\"grams\\": weight = weight / 1000 # convert grams to kilograms elif weight_unit == \\"tons\\": weight = weight * 1000 # convert tons to kilograms volume = weight / density # density should be in kg/L return volume # Define a function for volume unit conversion def convert_volume(volume, from_unit, to_unit): conversion_factors = { \\"liters\\": 1, \\"milliliters\\": 1000, \\"cubic meters\\": 0.001, \\"gallons\\": 0.264172, \\"quarts\\": 1.05669, \\"pints\\": 2.11338, \\"cups\\": 4.22675, \\"fluid ounces\\": 33.814, \\"tablespoons\\": 67.628, \\"teaspoons\\": 202.884 } if from_unit not in conversion_factors or to_unit not in conversion_factors: return None # First convert to liters volume_in_liters = volume / conversion_factors[from_unit] # Then convert from liters to to_unit converted_volume = volume_in_liters * conversion_factors[to_unit] return converted_volume # Define a function for weight unit conversion def convert_weight(weight, from_unit, to_unit): conversion_factors = { \\"kilograms\\": 1, \\"grams\\": 1000, \\"milligrams\\": 1_000_000, \\"tons\\": 0.001, \\"pounds\\": 2.20462, \\"ounces\\": 35.274 } if from_unit not in conversion_factors or to_unit not in conversion_factors: return None # First convert to kilograms weight_in_kilograms = weight / conversion_factors[from_unit] # Then convert from kilograms to to_unit converted_weight = weight_in_kilograms * conversion_factors[to_unit] return converted_weight"},{"question":"Write a Python program that converts a hashmap to a list. The key-value pairs in the hashmap should be converted to tuples in the resulting list.","solution":"def hashmap_to_list(hashmap): Converts a hashmap (dictionary) to a list of tuples. Parameters: hashmap (dict): A dictionary to convert. Returns: list: A list of tuples where each tuple is a key-value pair from the hashmap. return list(hashmap.items())"},{"question":"Given the pandas DataFrame below, your task is to not only convert it into a NumPy array but also implement a function to check if the conversion was successful. Also, given a piece of erroneous code that attempts this task, identify the bugs and rectify it. Additionally, write unit tests to validate the correctness of your solution.","solution":"import pandas as pd import numpy as np # Sample pandas DataFrame data = {'col1': [1, 2, 3], 'col2': [4, 5, 6]} df = pd.DataFrame(data) def convert_df_to_numpy(dataframe): Converts a pandas DataFrame to a NumPy array. Parameters: dataframe (pd.DataFrame): The pandas DataFrame to convert. Returns: np.ndarray: The resulting NumPy array. return dataframe.values def check_conversion(dataframe, array): Checks if a pandas DataFrame was successfully converted to a NumPy array. Parameters: dataframe (pd.DataFrame): The original pandas DataFrame. array (np.ndarray): The resulting NumPy array. Returns: bool: True if conversion is successful, False otherwise. return np.array_equal(dataframe.values, array)"},{"question":"Create a function in Python that takes an integer as an argument and returns True if the number is even, and False if the number is odd.","solution":"def is_even(number): Returns True if the number is even, and False if the number is odd. return number % 2 == 0"},{"question":"Modify the given Python code to calculate the sum of the given list. However, the program should only include even numbers in the sum. Additionally, ensure that the program raises a ValueError if any element in the list is negative or a TypeError if any element is not an integer.","solution":"def sum_even_numbers(nums): Returns the sum of even numbers from the given list. Raises ValueError if any element in the list is negative. Raises TypeError if any element is not an integer. total = 0 for num in nums: if not isinstance(num, int): raise TypeError(\\"All elements must be integers\\") if num < 0: raise ValueError(\\"All elements must be non-negative\\") if num % 2 == 0: total += num return total"},{"question":"Show me an example of using the PyTorch framework to create a model for classifying handwritten digits.","solution":"import torch import torch.nn as nn import torch.nn.functional as F import torch.optim as optim from torchvision import datasets, transforms # Define a fully connected neural network class DigitClassifier(nn.Module): def __init__(self): super(DigitClassifier, self).__init__() self.fc1 = nn.Linear(28 * 28, 512) self.fc2 = nn.Linear(512, 256) self.fc3 = nn.Linear(256, 10) def forward(self, x): x = x.view(-1, 28 * 28) # Flatten the input x = F.relu(self.fc1(x)) x = F.relu(self.fc2(x)) x = self.fc3(x) return F.log_softmax(x, dim=1) # Load dataset with transformations transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]) train_dataset = datasets.MNIST('.', train=True, download=True, transform=transform) train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=64, shuffle=True) # Instantiate the model, define the loss function and the optimizer model = DigitClassifier() criterion = nn.CrossEntropyLoss() optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9) # Training loop def train(model, device, train_loader, optimizer, epoch): model.train() for batch_idx, (data, target) in enumerate(train_loader): data, target = data.to(device), target.to(device) optimizer.zero_grad() output = model(data) loss = criterion(output, target) loss.backward() optimizer.step() if batch_idx % 100 == 0: print(f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)}] Loss: {loss.item():.6f}')"},{"question":"Write a Python script to calculate the geometric mean of a list of positive numbers. Your script should include error handling for non-numeric and non-positive values. Additionally, provide a piece of erroneous code as a reference to highlight potential pitfalls.","solution":"import math def geometric_mean(numbers): Calculate the geometric mean of a list of positive numbers. Parameters: numbers (list): A list of positive numbers. Returns: float: Geometric mean of the numbers. Raises: ValueError: If any number is non-numeric or non-positive. if not all(isinstance(x, (int, float)) for x in numbers): raise ValueError(\\"All elements must be numeric\\") if not all(x > 0 for x in numbers): raise ValueError(\\"All elements must be positive\\") product = 1 for number in numbers: product *= number return product ** (1 / len(numbers))"},{"question":"Write a program to find the maximum and minimum numbers in a list without using the built-in functions \`max()\` and \`min()\`. Additionally, calculate the average of the list values. Account for possible exceptions such as an empty list.","solution":"def find_max_min_avg(numbers): Returns the maximum, minimum, and average of a list of numbers. If the list is empty, returns None, None, None. if not numbers: return None, None, None max_num = numbers[0] min_num = numbers[0] total = 0 for num in numbers: if num > max_num: max_num = num if num < min_num: min_num = num total += num average = total / len(numbers) return max_num, min_num, average"},{"question":"Write a function that takes a text and encodes it using Ceaser Cipher with a provided key.","solution":"def caesar_cipher(text, key): Encodes the provided text using Caesar Cipher with the provided key. :param text: The text to be encoded. :param key: The number of positions to shift each character. :return: The encoded text. result = [] for char in text: if char.isalpha(): shift = key % 26 if char.islower(): shifted_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a')) elif char.isupper(): shifted_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A')) result.append(shifted_char) else: result.append(char) return ''.join(result)"},{"question":"Create a function that checks if two given phrases contain the same unique letters. Additionally, ensure the function evaluates the case sensitivity and ignores special characters or numbers.","solution":"import string def sanitize_phrase(phrase): Removes special characters and numbers, and lowercases the letters. return ''.join(filter(lambda x: x in string.ascii_letters, phrase)).lower() def same_unique_letters(phrase1, phrase2): Checks if the two given phrases contain the same unique letters. sanitized1 = set(sanitize_phrase(phrase1)) sanitized2 = set(sanitize_phrase(phrase2)) return sanitized1 == sanitized2"},{"question":"Code a function to flatten a nested dictionary. The function should take a dictionary as input and return a flattened dictionary where any nested dictionaries are flattened into a single level dictionary.","solution":"def flatten_dict(d, parent_key='', sep='_'): Flattens a nested dictionary. Args: d (dict): The dictionary to flatten. parent_key (str): The base key to build upon. sep (str): The separator between keys. Returns: dict: The flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Write a function in Python that implements bubble sort to sort an array in ascending order. The array should be sorted in-place, without creating a new array. The input array should contain positive integers only. Additionally, the function should handle duplicate elements in the array and ensure they are placed in ascending order. The function should also check that the input array contains at least 10 elements and has a maximum length of 100. The function should handle cases where the array is empty or does not contain any positive integers, by raising a custom exception \\"InvalidInputError\\" with an appropriate error message.","solution":"class InvalidInputError(Exception): Custom exception for invalid input arrays. pass def bubble_sort(arr): Sorts an array of positive integers in-place in ascending order using bubble sort algorithm. Parameters: arr (list): The array to sort. Raises: InvalidInputError: If the array is empty, if any element is not positive, or if the length is not within [10, 100]. if not arr: raise InvalidInputError(\\"Array is empty.\\") if not all(isinstance(x, int) and x > 0 for x in arr): raise InvalidInputError(\\"Array contains non-positive integers.\\") if not (10 <= len(arr) <= 100): raise InvalidInputError(\\"Array length is not within the acceptable range [10, 100].\\") n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function in Python to sort this dictionary by values in descending order, then by keys in ascending order if values are equal.","solution":"def sort_dict_by_value_and_key(data): Sorts the input dictionary by values in descending order, and by keys in ascending order if values are equal. Parameters: data (dict): A dictionary to be sorted. Returns: dict: A new dictionary sorted by the specified criteria. sorted_items = sorted(data.items(), key=lambda item: (-item[1], item[0])) return dict(sorted_items)"},{"question":"Design a program that uses a loop to generate 25 random prime numbers between 0 and 100.","solution":"import random def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def generate_prime_numbers(count, lower_bound, upper_bound): primes = [] while len(primes) < count: num = random.randint(lower_bound, upper_bound) if is_prime(num): primes.append(num) return primes def generate_25_random_primes_between_0_and_100(): return generate_prime_numbers(25, 0, 100)"},{"question":"Convert the following Python nested list comprehension into generator expression but also, implement an if-else statement that checks if the integer is prime. If it is, provide its square, if not - the integer itself.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def prime_square_or_self(nested_list): Generator that yields the square of a number if it is prime, otherwise the number itself, for each number in the nested list. for sublist in nested_list: for num in sublist: yield num**2 if is_prime(num) else num"},{"question":"Given a list of integers, write a function in Python to sort the list in non-decreasing order. However, you are not allowed to use any built-in sorting functions or methods, and your solution should have a time complexity of O(n log n) or better.","solution":"def merge_sort(arr): Sorts a list of integers in non-decreasing order using merge sort algorithm. :param arr: List of integers :return: Sorted list of integers if len(arr) <= 1: return arr # Finding the middle point to divide the array into two halves mid = len(arr) // 2 # Recursive call for the two halves left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) # Merging the two sorted halves return merge(left_half, right_half) def merge(left, right): Merges two sorted lists into a single sorted list. :param left: Sorted left half list :param right: Sorted right half list :return: Merged and sorted list sorted_list = [] left_index = right_index = 0 # Traverse both lists and append smaller element to the sorted_list while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_list.append(left[left_index]) left_index += 1 else: sorted_list.append(right[right_index]) right_index += 1 # Collect remaining elements sorted_list.extend(left[left_index:]) sorted_list.extend(right[right_index:]) return sorted_list"},{"question":"Write a Python 3 program that simulates a simple command-line calculator. The calculator should support addition, subtraction, multiplication, and division operations. It should accept two numbers and an operator as input from the command line and print the result. Make sure to handle division by zero appropriately.","solution":"def calculator(a, b, operator): Simulates a simple command-line calculator that supports addition, subtraction, multiplication, and division. Handles division by zero appropriately. :param a: First number. :param b: Second number. :param operator: A string representing an mathematical operator: '+', '-', '*', '/'. :return: The result of the calculation. if operator == '+': return a + b elif operator == '-': return a - b elif operator == '*': return a * b elif operator == '/': if b == 0: return \\"Error: Division by zero\\" return a / b else: return \\"Error: Invalid operator\\""},{"question":"Given a string s, write a Python function that returns the first non-repeating character in the string. If there are no non-repeating characters, return None.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If there are no non-repeating characters, return None. char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char return None"},{"question":"Need your help in integrating and deploying a code. Second screen in the onboarding flow requires the user to input their goal, age, and time frame as strings, however, the current code only accepts numerical values. Can you modify the code to accept strings as input and convert them to a numerical format for the subsequent screens to process? Please make sure the solution maintains the existing functionality of the code and seamlessly integrates with the string input. Also, ensure that the converted numerical values are within acceptable ranges for age and time frame.","solution":"def process_input(goal_input, age_input, timeframe_input): Processes the goal, age, and timeframe inputs ensuring age and timeframe are converted to integers and are within acceptable ranges. # Validate and convert age input try: age = int(age_input) if not (0 < age < 120): # reasonable age range raise ValueError(\\"Age must be between 1 and 119.\\") except ValueError as e: return f\\"Invalid age input: {e}\\" # Validate and convert timeframe input try: timeframe = int(timeframe_input) if not (0 < timeframe < 100): # reasonable timeframe range raise ValueError(\\"Time frame must be between 1 and 99.\\") except ValueError as e: return f\\"Invalid timeframe input: {e}\\" # Process the goal as string input directly goal = goal_input.strip() # Basic sanitation step return goal, age, timeframe"},{"question":"Write a function to reverse a doubly linked list in O(n) time complexity. However, you are not allowed to use any additional data structures or modify the values of the nodes. Additionally, your implementation should be recursive. You can assume that the doubly linked list is non-empty and each node contains a reference to both its previous and next nodes.","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None def reverse_doubly_linked_list_recursively(head): Reverses a doubly linked list recursively. Args: head (Node): The head node of the doubly linked list. Returns: Node: The new head node of the reversed doubly linked list. if not head: return None # Base case if not head.next: head.next, head.prev = head.prev, head.next return head # Swap next and prev pointers head.next, head.prev = head.prev, head.next # Recursion for next node new_head = reverse_doubly_linked_list_recursively(head.prev) return new_head"},{"question":"I want to split a string on a specific character, except when that character is inside a pair of matching parentheses or square brackets. Can anyone help with a python script for this task?","solution":"import re def custom_split(s, delimiter): Splits the string on the given delimiter except when inside parentheses or square brackets. :param s: The input string to split. :param delimiter: The delimiter character on which to split the string. :return: A list of strings after splitting. # Create lists to store the parts and the current part parts = [] current_part = [] # Outermost level of nested ( and [ paren_level = 0 bracket_level = 0 i = 0 while i < len(s): char = s[i] if char == delimiter and paren_level == 0 and bracket_level == 0: parts.append(''.join(current_part)) current_part = [] else: current_part.append(char) if char == '(': paren_level += 1 elif char == ')': paren_level -= 1 elif char == '[': bracket_level += 1 elif char == ']': bracket_level -= 1 i += 1 parts.append(''.join(current_part)) return parts"},{"question":"Given a hash table 'items' that supposedly keeps track of several keys with various values, write a function that fixes the erroneous code below. The function, 'check_key', should take in the hash table and a key as parameters. It should correctly check if a key exists in the hash table. If the key exists, it should return the value of the key from the hash table; if it doesn't exist, it should return -1.","solution":"def check_key(items, key): Checks if the key exists in the hash table. If it does, returns the value associated with the key. If the key does not exist, returns -1. return items.get(key, -1)"},{"question":"将以下英文算法描述转化为相应的Python函数代码。Your task is to compute the factorial of a given integer n. The factorial of n, denoted as n!, is the product of all positive integers less than or equal to n. For example, the factorial of 4, 4!, is equal to 4 * 3 * 2 * 1 = 24.","solution":"def factorial(n): Computes the factorial of a given integer n. The factorial of n, denoted as n!, is the product of all positive integers less than or equal to n. Parameters: n (int): A non-negative integer. Returns: int: The factorial of the input integer. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Given a list of strings that represent numbers, write a Python function to convert each string into an integer and calculate the sum of all the numbers. The function should return the sum.","solution":"def sum_of_string_numbers(string_numbers): Converts a list of strings that represent numbers into integers and returns the sum of all the numbers. :param string_numbers: List of strings representing numbers :return: Integer sum of the numbers return sum(int(num) for num in string_numbers)"},{"question":"Generate a Python function to get the index of a given string from a list of strings. If the string is not present in the list, return -1. The function should also be case-sensitive, meaning that \\"apple\\" and \\"Apple\\" should be treated as different strings.","solution":"def get_index(strings_list, target_string): Returns the index of the target_string in the strings_list. If the target_string is not in the list, returns -1. The comparison is case-sensitive. Args: strings_list (list of str): The list of strings to search. target_string (str): The string to find. Returns: int: The index of target_string in strings_list or -1 if not found. try: return strings_list.index(target_string) except ValueError: return -1"},{"question":"Write python code to implement a 3D matrix of size 4x4x4 with all elements initialized to -1. Then, write a function that iterates and prints the entire matrix layer by layer.","solution":"def create_3d_matrix(size=4, initial_value=-1): Create a 3D matrix of given size with all elements initialized to the given initial value. :param size: The size of the 3D matrix (default is 4). :param initial_value: The initial value for each element in the matrix (default is -1). :return: A 3D matrix of the specified size and initial value. return [[[initial_value for _ in range(size)] for _ in range(size)] for _ in range(size)] def print_3d_matrix(matrix): Print the 3D matrix layer by layer. :param matrix: The 3D matrix to be printed. size = len(matrix) for layer in range(size): print(f\\"Layer {layer+1}:\\") for row in matrix[layer]: print(row) print() # Blank line between layers # Example usage: matrix = create_3d_matrix() print_3d_matrix(matrix)"},{"question":"Write a function that utilizes the Dijkstra's algorithm to find the shortest path from a starting node to an ending node in a directed weighted graph. The graph is represented using an adjacency list.","solution":"import heapq def dijkstra(graph, start, end): Finds the shortest path in a directed weighted graph using Dijkstra's algorithm. Parameters: graph (dict): A dictionary representing the adjacency list of the graph where the keys are nodes and values are lists of tuples representing (neighbor, weight) of the edges. start: The starting node end: The ending node Returns: (list, int): A tuple containing the shortest path from start to end and the total distance. # Priority queue to store (distance, node) tuples pq = [(0, start)] # Dictionary to store the shortest path to each node distances = {node: float('inf') for node in graph} distances[start] = 0 # Dictionary to store the previous node in the shortest path previous_nodes = {node: None for node in graph} while pq: current_distance, current_node = heapq.heappop(pq) # Skip if we've already processed a better path if current_distance > distances[current_node]: continue # Explore neighbors for neighbor, weight in graph[current_node]: distance = current_distance + weight # Only consider this path if it's better if distance < distances[neighbor]: distances[neighbor] = distance previous_nodes[neighbor] = current_node heapq.heappush(pq, (distance, neighbor)) # Reconstruct path path = [] node = end while node is not None: path.append(node) node = previous_nodes[node] path.reverse() # If the end node was not reached, the path is not valid. if distances[end] == float('inf'): return [], float('inf') return path, distances[end]"},{"question":"What is the purpose of function arguments in Python? Provide an example of a function that takes two arguments and returns their sum, but with a twist: the function should only return the sum if both arguments are positive integers and their sum is a multiple of 3. If any of these conditions are not met, the function should raise a custom exception with an appropriate error message.","solution":"class InvalidInputError(Exception): Custom exception for invalid inputs in the add_positive_multiple_of_three function. pass def add_positive_multiple_of_three(a, b): Returns the sum of a and b if both are positive integers and their sum is a multiple of 3. Raises InvalidInputError otherwise. if not (isinstance(a, int) and isinstance(b, int)): raise InvalidInputError(\\"Both arguments must be integers.\\") if a <= 0 or b <= 0: raise InvalidInputError(\\"Both arguments must be positive integers.\\") sum_ab = a + b if sum_ab % 3 != 0: raise InvalidInputError(\\"The sum of the arguments must be a multiple of 3.\\") return sum_ab"},{"question":"Create a function that, given two list inputs, returns a negative boolean value when none of the elements from the second list can be identified within the first. Additionally, it should also return the count of how many elements from the second list were found in the first list. Consider optimal space and time complexity in your solution.","solution":"def check_and_count_elements(list1, list2): Returns a tuple where the first element is a boolean indicating if none of the elements from list2 can be found in list1, and the second element is the count of how many elements from list2 were found in list1. set1 = set(list1) count = sum(1 for item in list2 if item in set1) return (count == 0, count)"},{"question":"Write a function that takes a string and a sorted list of strings as input. Return the Kth shortest string from the list that is a valid subsequence of the given string. If no such string exists, return an empty string.","solution":"def is_subsequence(s, subseq): Helper function to determine if subseq is a subsequence of s. it = iter(s) return all(char in it for char in subseq) def kth_shortest_subsequence(string, lst, k): Returns the K-th shortest string from the sorted list that is a valid subsequence of the given string. subsequences = [] for item in lst: if is_subsequence(string, item): subsequences.append(item) if len(subsequences) < k: return \\"\\" return subsequences[k-1]"},{"question":"Write a Python program that prints all prime numbers from 1 to 100. Additionally, you should also print a message for each number stating whether it is a prime number or not.","solution":"def is_prime(num): Returns True if the number is prime, else False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def print_primes(): Prints all prime numbers from 1 to 100 with a message indicating whether each number is a prime number or not. for number in range(1, 101): if is_prime(number): print(f\\"{number} is a prime number.\\") else: print(f\\"{number} is not a prime number.\\") # Run the function to see the output print_primes()"},{"question":"Develop a Python script that calculates the power of a given number using a loop, then compare the result with the in-built Python function for exponentiation. Additionally, create a function that checks the accuracy of your loop-based solution against the in-built function for a set of test cases. To make it more challenging, the loop-based solution should handle both positive and negative exponents and the comparison function should report the percentage accuracy of the results.","solution":"def power_loop(base, exponent): Calculates the power of a given number using a loop. Handles both positive and negative exponents. if exponent == 0: return 1 if exponent > 0: result = 1 for _ in range(exponent): result *= base return result else: result = 1 for _ in range(-exponent): result *= base return 1 / result def calculate_accuracy(test_cases): Compares the loop-based power function result with the in-built function for a set of test cases and reports the percentage accuracy. correct_count = 0 for base, exponent in test_cases: loop_result = power_loop(base, exponent) builtin_result = base ** exponent if loop_result == builtin_result: correct_count += 1 accuracy = (correct_count / len(test_cases)) * 100 return accuracy"},{"question":"Generate a 15-digit random number using Python. Make sure the first 3 digits are 9, the last 2 digits are not 0, and the remaining digits should be randomly generated. Additionally, implement a function to check if the generated number is a prime number.","solution":"import random def generate_random_number(): Generates a 15-digit number where the first 3 digits are 9, the last 2 digits are not 0, and the remaining digits are randomly generated. first_three = '999' middle_ten = ''.join([str(random.randint(0, 9)) for _ in range(10)]) last_two = random.randint(1, 9) * 10 + random.randint(1, 9) return int(first_three + middle_ten + f'{last_two:02d}') def is_prime(n): Checks if a given number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Develop a Python function capable of calculating the aggregate of all elements within an array of numbers, including negative numbers and floating-point numbers, provided the array's length is within a specified range. The function should throw an error if the array exceeds the defined limit of 5 to 20 elements. Additionally, ensure that the function includes functionality to manage and notify of incorrect data types, specifically if any non-numerical elements are included in the array.","solution":"def aggregate_elements(arr): Calculate the aggregate of all elements in an array, given the array length is within the range [5, 20] and all elements are numbers. Args: arr (list): List of elements to be aggregated. Returns: float: The aggregate sum of all elements in the array. Raises: ValueError: If the array length is outside the range [5, 20] or contains non-numeric elements. # Check if the array length is within the valid range if len(arr) < 5 or len(arr) > 20: raise ValueError(\\"Array length must be between 5 and 20 inclusive.\\") # Check all elements are numbers if not all(isinstance(x, (int, float)) for x in arr): raise ValueError(\\"All elements in the array must be numbers.\\") # Calculate the aggregate return sum(arr)"},{"question":"I have a list of words, and I want to delete all the words that start with a specific prefix from that list. For example, if my list is [\\"apple\\", \\"banana\\", \\"apricot\\", \\"cherry\\"] and I want to delete words that start with \\"ap\\", the resulting list should be [\\"banana\\", \\"cherry\\"]. How can I achieve this using Python?","solution":"def delete_words_with_prefix(words, prefix): Deletes all words that start with the specific prefix from the list. :param words: List of words :param prefix: The prefix to check :return: A list of words without the ones starting with the prefix return [word for word in words if not word.startswith(prefix)]"},{"question":"Write a Python function that prints a square of a given size using the '#' character. The function should validate the input and handle errors gracefully. Additionally, the function should only print squares with sizes greater than or equal to 2.","solution":"def print_square(size): Prints a square of the given size using the '#' character. Parameters: size (int) : size of the square Returns: None if not isinstance(size, int): print(\\"Error: Size must be an integer.\\") return if size < 2: print(\\"Error: Size must be greater than or equal to 2.\\") return for _ in range(size): print('#' * size)"},{"question":"Write a Python code to count the number of uppercase characters in the given string. The string should contain at least one lowercase character and at most 100 characters.","solution":"def count_uppercase_characters(s): Returns the number of uppercase characters in the given string. The string should contain at least one lowercase character and at most 100 characters. if len(s) > 100: raise ValueError(\\"String length exceeds 100 characters\\") if all(c.islower() or not c.isalpha() for c in s): raise ValueError(\\"String must contain at least one uppercase character\\") return sum(1 for c in s if c.isupper())"},{"question":"Devise a search procedure, employing the Depth-First Search algorithm, for navigating through a tree structure to locate a specified node. The tree is represented as an adjacency list. Your solution should implement the full algorithm, rather than simply sketching out the process.","solution":"def depth_first_search(graph, start_node, target_node): Performs a depth-first search on a tree to find the target node. :param graph: Dictionary representing the adjacency list of the tree. :param start_node: Node to start the search from. :param target_node: Node to search for. :return: Boolean value indicating whether the target node is found. stack = [start_node] visited = set() while stack: current_node = stack.pop() if current_node == target_node: return True if current_node not in visited: visited.add(current_node) stack.extend(graph.get(current_node, [])) return False"},{"question":"Write a Python code that turns the given input into a list of dictionaries, where each dictionary should have a 'name' key and an 'age' key. The 'name' key should store a string and the 'age' key should store an integer. The input should be a list of strings in the format 'name,age' and the output should be a list of dictionaries in the format [{'name': 'John', 'age': 21}, {'name': 'Jane', 'age': 27}, {'name': 'Jack', 'age': 38}]. However, if the input does not follow the correct format, the code should raise an exception with a specific error message. Additionally, the code should include a function that validates if the 'age' value is a positive integer and if the 'name' value is a valid name. The validation function should be called 'validate_data'. If any of the data does not pass the validation, the code should raise a specific exception with an appropriate error message. Each dictionary in the output list should also have an additional 'id' key, which is a unique integer starting from 1 and incrementing by 1 for each dictionary in the list.","solution":"def validate_data(name, age): Validates if the 'name' is a valid string and 'age' is a positive integer. if not isinstance(name, str) or not name.isalpha(): raise ValueError(\\"Invalid name: must be a string containing only alphabetical characters.\\") if not isinstance(age, int) or age <= 0: raise ValueError(\\"Invalid age: must be a positive integer.\\") def convert_input_to_list_of_dicts(input_list): Converts the input list of strings into a list of dictionaries with 'name', 'age', and 'id' keys. result = [] for i, item in enumerate(input_list): try: name, age = item.split(',') name = name.strip() age = int(age.strip()) validate_data(name, age) except ValueError as e: raise ValueError(f\\"Invalid format or data in input: {item}. Error: {e}\\") result.append({'name': name, 'age': age, 'id': i + 1}) return result"},{"question":"Write a Python function that takes a string as an input from the user and checks if it is a palindrome or not. The function should consider all alphanumeric characters in the string and ignore any case sensitivity.","solution":"def is_palindrome(s): Checks if the given string is a palindrome considering alphanumeric characters and ignoring case sensitivity. # Filter out non-alphanumeric characters and convert to lowercase cleaned_str = ''.join(char.lower() for char in s if char.isalnum()) # Check if cleaned string is equal to its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"Can you give me a Python program, named \\"autotune\\", which can be used to sort the values in a list by their frequency in ascending order? And could you make sure that the code can be run with the command \`python -m autotune\`? Also, can you include a function to check the correctness of the program by comparing the output with a manually verified answer?","solution":"import sys from collections import Counter def autotune(lst): Sorts the values in the list by their frequency in ascending order. # Count the frequency of each element in the list freq = Counter(lst) # Sort the items by frequency and then by the actual value if frequencies are the same sorted_list = sorted(lst, key=lambda x: (freq[x], x)) return sorted_list if __name__ == \\"__main__\\": if len(sys.argv) < 2: print(\\"Please provide a list of values.\\") sys.exit(1) try: lst = eval(sys.argv[1]) if not isinstance(lst, list): raise ValueError except: print(\\"Please provide a valid list.\\") sys.exit(1) sorted_list = autotune(lst) print(\\"Sorted list:\\", sorted_list)"},{"question":"Create a program in Python to calculate the sum of all prime numbers within a given range (1 to 1000) without using any built-in or external libraries or modules. Also, your program should be optimized such that it performs this task in less time for larger ranges. Demonstrate your understanding of time complexity. Sure, I'll create a Python program for this using the Sieve of Eratosthenes algorithm. This is an efficient way to find all primes smaller than a given number 'n'. The time complexity of this algorithm is O(n log log n), which is quite efficient for larger numbers.","solution":"def sum_of_primes(n): Calculate the sum of all prime numbers up to n using the Sieve of Eratosthenes. if n < 2: return 0 sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers p = 2 while (p * p <= n): if (sieve[p] == True): for i in range(p * p, n + 1, p): sieve[i] = False p += 1 return sum(i for i in range(n + 1) if sieve[i])"},{"question":"Write a Python function that creates a hashmap where the keys are individual characters from a given string and their corresponding values are their corresponding ASCII values. Additionally, implement a function that takes this hashmap as input and sorts it in descending order based on ASCII values of the characters. This sorted hashmap should then be returned as output. The input strings for this task will be alphanumeric strings, a mix of lowercase and uppercase letters, digits and some special characters. Examples of such strings could be \\"abcABC123#@\\".","solution":"def create_ascii_hashmap(s): Creates a hashmap where the keys are individual characters from the string 's' and their corresponding values are their ASCII values. return {char: ord(char) for char in s} def sort_hashmap_descending(hashmap): Sorts the given hashmap in descending order based on ASCII values. Returns a sorted hashmap. return dict(sorted(hashmap.items(), key=lambda item: item[1], reverse=True))"},{"question":"Create a Python function to generate a list of prime numbers in a given range, with the additional requirement that the function should also return the sum of all the prime numbers in the list.","solution":"def generate_primes_and_sum(lower, upper): Generates a list of prime numbers between \`lower\` and \`upper\` (inclusive) and returns the list and the sum of all primes. Args: lower (int): The lower bound of the range. upper (int): The upper bound of the range. Returns: tuple: A tuple containing the list of primes and the sum of the primes. def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True primes = [num for num in range(lower, upper + 1) if is_prime(num)] primes_sum = sum(primes) return primes, primes_sum"},{"question":"Please design a regular expression library tailored for extracting URL information from a body of text. The library should include various methods for interacting with URLs such as validating their format, retrieving specific parts like the domain or path, and isolating parameters. Consider including functions for parsing URLs into individual components for easy access. Your library should also include comprehensive unit tests to confirm the accuracy of the regex patterns and accompanying functions.","solution":"import re from urllib.parse import urlparse, parse_qs class UrlUtilities: def __init__(self): # Regex pattern to validate URLs self.url_pattern = re.compile( r'http[s]?://' # http:// or https:// r'(?:[a-zA-Z]|[0-9]|[-_@.&+]|[!*(),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+' # domain... ) def validate_url(self, url: str) -> bool: Validates if the provided URL matches the URL pattern. return re.match(self.url_pattern, url) is not None def get_domain(self, url: str) -> str: Extracts and returns the domain from the provided URL. parsed_url = urlparse(url) return parsed_url.netloc def get_path(self, url: str) -> str: Extracts and returns the path from the provided URL. parsed_url = urlparse(url) return parsed_url.path def get_parameters(self, url: str) -> dict: Extracts and returns a dictionary of query parameters from the provided URL. parsed_url = urlparse(url) return parse_qs(parsed_url.query) def parse_url(self, url: str) -> dict: Parses the URL into its components and returns a dictionary with the components. parsed_url = urlparse(url) return { \\"scheme\\": parsed_url.scheme, \\"domain\\": parsed_url.netloc, \\"path\\": parsed_url.path, \\"params\\": parsed_url.params, \\"query\\": parsed_url.query, \\"fragment\\": parsed_url.fragment }"},{"question":"In Python, write a program to remove all duplicates from a given list of integers and sort the list in ascending order. The program should have a time complexity of O(n log n) and should not use any built-in functions or libraries for sorting or removing duplicates. Additionally, the program should only use constant extra space and should not modify the original list. You are not allowed to use any additional data structures such as sets or dictionaries to solve this problem. The program should also handle negative integers in the input list and ensure that the negative integers appear before the positive integers in the sorted list.","solution":"def remove_duplicates_and_sort(nums): This function removes all duplicates from the input list and returns the list in sorted order with negative integers appearing before positive integers. :param nums: List of integers. :return: Sorted list of integers with no duplicates. # Make a copy of the original list to avoid modifying it nums = nums[:] n = len(nums) if n == 0: return nums # Sort the list using a modified quicksort algorithm def quicksort(start, end): if start >= end: return pivot = nums[(start + end) // 2] left = start right = end while left <= right: while nums[left] < pivot: left += 1 while nums[right] > pivot: right -= 1 if left <= right: nums[left], nums[right] = nums[right], nums[left] left += 1 right -= 1 quicksort(start, right) quicksort(left, end) quicksort(0, n - 1) # Remove duplicates index = 1 # Index to place the next unique element for i in range(1, n): if nums[i] != nums[i - 1]: nums[index] = nums[i] index += 1 # Split the negative and non-negative numbers negatives = [nums[i] for i in range(index) if nums[i] < 0] non_negatives = [nums[i] for i in range(index) if nums[i] >= 0] return negatives + non_negatives"},{"question":"Consider a faulty function below that is supposed to create an equilateral triangle using Turtle in Python. However, it does not work as expected. Your task is to identify the issue, explain why it happens, and correct the function. Furthermore, enhance the function so it doesn't only draw an equilateral triangle, but also allows for drawing an equiangular polygon of n-sides, where n is a positive integer.","solution":"import turtle def draw_equilateral_polygon(sides, length): Draws an equiangular polygon with the given number of sides and side length. Parameters: sides (int): Number of sides of the polygon. length (float): Length of each side of the polygon. Raises: ValueError: If the number of sides is less than 3. if sides < 3: raise ValueError(\\"Number of sides must be at least 3\\") angle = 360 / sides for _ in range(sides): turtle.forward(length) turtle.left(angle) turtle.done()"},{"question":"Please write a python function that takes in a list of integers and returns a new list that contains only the even numbers from the original list. If there are no even numbers in the original list, the function should return an empty list. Additionally, the function should ignore any non-integer elements in the input list. For example, if the input list is [1, 2, 3, 4], the function should return [2, 4]. If the input list is [1, 3, 5], the function should return [].","solution":"def filter_even_numbers(input_list): Takes in a list of integers and returns a new list that contains only the even numbers from the original list. Ignores non-integer elements in the input list. :param input_list: List of elements :return: List of even integer numbers return [item for item in input_list if isinstance(item, int) and item % 2 == 0]"},{"question":"Write a Python program to compute and return a list that contains every possible combination of two given lists. The resulting list should contain tuples, where the first element of each tuple is from the first given list and the second element of each tuple is from the second given list. Additionally, the program should remove any duplicates from the resulting list, and the tuples should be sorted first by the first element of each tuple in ascending order, and then by the second element in descending order.","solution":"def combine_lists(list1, list2): Returns a list of tuples containing every possible combination of two given lists. The tuples are sorted first by the first element in ascending order, and then by the second element in descending order. Duplicates are removed. # Generate all combinations combinations = [(a, b) for a in list1 for b in list2] # Remove duplicates by converting to a set and back to a list combinations = list(set(combinations)) # Sort combinations combinations.sort(key=lambda x: (x[0], -x[1])) return combinations"},{"question":"Given a text file as input, I want to create a dictionary in Python where each key is a unique word in the text file and the value is the number of times that word appears. How can I achieve this?","solution":"def word_count_in_file(file_path): Returns a dictionary where keys are unique words and values are the count of those words in the text file. :param file_path: The file path of the text file to analyze. :return: Dictionary with word counts. word_count = {} with open(file_path, 'r') as file: for line in file: words = line.split() for word in words: word = word.lower() # Assuming case insensitivity word = ''.join(char for char in word if char.isalnum()) # Clean punctuation if word: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"Given two strings \\"abc\\" and \\"def\\", write a function in Python to concatenate the two strings in reverse order i.e. resulting string should be \\"fedcba\\".","solution":"def concatenate_reverse(str1, str2): Concatenates two strings in reverse order. Args: str1 (str): First string to concatenate. str2 (str): Second string to concatenate. Returns: str: Concatenated string in reverse order. combined = str1 + str2 reversed_combined = combined[::-1] return reversed_combined"},{"question":"Design a Python function that accepts a URL as input and checks its validity using a regex pattern. Additionally, the function should ensure that the URL includes either 'http' or 'https', it should verify that a 'www' prefix is followed by a valid domain name, and should also be able to identify the presence of sub-domains. The function should then parse the valid URL and return its domain and sub-domain(s) if any as key-value pair(s).","solution":"import re from urllib.parse import urlparse def validate_and_parse_url(url): Validates a URL and returns domain and sub-domains if valid. Parameters: url (str): The URL to validate and parse. Returns: dict: A dictionary with 'domain' and 'sub_domains' keys, or None if invalid. regex = re.compile( r'^(http|https)://([a-zA-Z0-9-]+(.[a-zA-Z0-9-]+)*).([a-zA-Z]{2,})(:[0-9]{1,5})?/?.*' ) if regex.match(url): parsed_url = urlparse(url) hostname = parsed_url.hostname if hostname: parts = hostname.split('.') if len(parts) >= 2: domain = parts[-2] + '.' + parts[-1] sub_domains = parts[:-2] return { 'domain': domain, 'sub_domains': sub_domains } return None"},{"question":"I'd like to generate Python code based on the input of a form in a Streamlit app. I've created the necessary form fields for the user input, including checkboxes, text inputs, and selectboxes. Now I need to process this data to generate the requested Python code string. Can you help me write a function that will take in the form values and return the code string, dealing with variations in case and specific conditions for certain fields?","solution":"def generate_python_code(checkboxes, text_inputs, selectboxes): Generates Python code based on form input values. :param checkboxes: Dictionary with checkbox labels as keys and boolean values indicating whether they are checked. :param text_inputs: Dictionary with text input labels as keys and their string inputs as values. :param selectboxes: Dictionary with selectbox labels as keys and their selected options as values. :return: A string containing the generated Python code. # Initialize the generated code string code_string = \\"# Generated Python Coden\\" # Process checkboxes for label, checked in checkboxes.items(): code_string += f\\"# Checkbox '{label}' is {'checked' if checked else 'unchecked'}n\\" if checked: code_string += f\\"print('Checkbox {label} is checked')n\\" # Process text inputs for label, value in text_inputs.items(): code_string += f\\"# Text input '{label}' has value '{value}'n\\" code_string += f\\"{label.lower().replace(' ', '_')} = '{value}'n\\" # Process selectboxes for label, selection in selectboxes.items(): code_string += f\\"# Selectbox '{label}' selected option '{selection}'n\\" code_string += f\\"{label.lower().replace(' ', '_')}_selection = '{selection}'n\\" return code_string"},{"question":"Write a Python script to find the first 1000 prime numbers.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def first_n_primes(n): Returns a list of the first n prime numbers. primes = [] current = 2 while len(primes) < n: if is_prime(current): primes.append(current) current += 1 return primes # Finding the first 1000 prime numbers first_1000_primes = first_n_primes(1000)"},{"question":"Develop a python function to convert a given date in the format \\"dd/mm/yyyy\\" to a new format that represents the day in words.","solution":"import datetime def convert_date_to_words(date_str): Convert a date string in the format \\"dd/mm/yyyy\\" to a date represented in words. Example: \\"25/12/2021\\" -> \\"25th December 2021\\" Parameters: date_str (str): Date in the format \\"dd/mm/yyyy\\". Returns: str: Date in words. # Parse the date string to a date object date_obj = datetime.datetime.strptime(date_str, \\"%d/%m/%Y\\") # Get the day with suffix day = date_obj.day if 11 <= day <= 13: day_suffix = \\"th\\" else: day_suffix = {1: \\"st\\", 2: \\"nd\\", 3: \\"rd\\"}.get(day % 10, \\"th\\") day_word = f\\"{day}{day_suffix}\\" month_word = date_obj.strftime(\\"%B\\") year = date_obj.year return f\\"{day_word} {month_word} {year}\\""},{"question":"Create a Python function that reverses the order of words in a string and prints the reversed string. The function should handle cases where there are multiple spaces between words or leading/trailing spaces. You are not allowed to use any built-in functions or methods to reverse the string or the words.","solution":"def reverse_words(s): Reverses the order of words in a string and returns the reversed string. It handles multiple spaces between words or leading/trailing spaces. words = [] n = len(s) i = 0 while i < n: while i < n and s[i] == ' ': i += 1 if i >= n: break start = i while i < n and s[i] != ' ': i += 1 words.append(s[start:i]) # Reversing the words manually reversed_words = \\"\\" for j in range(len(words) - 1, -1, -1): reversed_words += words[j] if j != 0: reversed_words += ' ' return reversed_words.strip()"},{"question":"Using the programming language Python, write a function that takes a list of integers as input and returns the median value. The function should also handle cases where the input list contains an even number of values by returning the average of the two middle values. Additionally, the input list should be sorted using the bubble sort algorithm before calculating the median. Finally, the function should be able to handle extremely large input lists without running out of memory or taking an unreasonable amount of time to execute. Test the function using the given list of values: [2, 3, 5, 4, 1].","solution":"def bubble_sort(arr): Sorts a list in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def calculate_median(arr): Returns the median value of a list of integers. If the list contains an even number of values, it returns the average of the two middle values. sorted_arr = bubble_sort(arr) n = len(sorted_arr) if n % 2 == 1: return sorted_arr[n//2] else: return (sorted_arr[n//2 - 1] + sorted_arr[n//2]) / 2"},{"question":"Create a program that generates a random password consisting of 8 to 10 characters, which must include at least one lowercase letter, one uppercase letter, and one number. The password must not contain any repeated characters. Additionally, the first character of the password must be a lowercase letter, the second character must be a number, and the third character must be an uppercase letter. The remaining characters can be a random combination of lowercase letters, uppercase letters, and numbers, but no repeated characters are allowed. The program should output the generated password.","solution":"import random import string def generate_password(): Generate a password with the following constraints: - Length of 8 to 10 characters - At least one lowercase letter, one uppercase letter, and one number - No repeated characters - First character is a lowercase letter - Second character is a number - Third character is an uppercase letter Returns: str: The generated password characters = string.ascii_letters + string.digits while True: length = random.randint(8, 10) password = [] password.append(random.choice(string.ascii_lowercase)) # first character: lowercase password.append(random.choice(string.digits)) # second character: digit password.append(random.choice(string.ascii_uppercase)) # third character: uppercase remaining_chars = set(characters) - set(password) for _ in range(length - 3): new_char = random.choice(list(remaining_chars)) password.append(new_char) remaining_chars = remaining_chars - set(new_char) if (any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password)): return ''.join(password)"},{"question":"Write a Python program to multiply two matrices. The matrices should be read from standard input, and each matrix should be preceded by its dimensions (number of rows and columns). Each row of the matrix should be given on a new line, with values separated by spaces.","solution":"def multiply_matrices(): # Read dimensions for the first matrix rows_a, cols_a = map(int, input().split()) matrix_a = [list(map(int, input().split())) for _ in range(rows_a)] # Read dimensions for the second matrix rows_b, cols_b = map(int, input().split()) matrix_b = [list(map(int, input().split())) for _ in range(rows_b)] # Multiply matrices result = [[0] * cols_b for _ in range(rows_a)] for i in range(rows_a): for j in range(cols_b): result[i][j] = sum(matrix_a[i][k] * matrix_b[k][j] for k in range(cols_a)) # Print result matrix for row in result: print(' '.join(map(str, row)))"},{"question":"Create a python program that implements a scientific calculator with the following functions: addition, subtraction, multiplication, division, square root, power, and logarithm.","solution":"import math class ScientificCalculator: Scientific Calculator with various functions. def add(self, a, b): return a + b def subtract(self, a, b): return a - b def multiply(self, a, b): return a * b def divide(self, a, b): if b == 0: raise ValueError(\\"Cannot divide by zero.\\") return a / b def square_root(self, a): if a < 0: raise ValueError(\\"Cannot take the square root of a negative number.\\") return math.sqrt(a) def power(self, a, b): return math.pow(a, b) def logarithm(self, a, base=10): if a <= 0: raise ValueError(\\"Logarithm base must be positive and non-zero.\\") return math.log(a, base)"},{"question":"Create a Python function that calculates the greatest common divisor (GCD) of two numbers using recursion. Then, expand this function to work with an array of integers by finding the GCD of all the numbers in the array. Also, implement error handling for situations where the input array is empty or contains non-integer values.","solution":"def gcd(a, b): Returns the greatest common divisor of a and b using recursion. if b == 0: return a else: return gcd(b, a % b) def gcd_array(arr): Returns the greatest common divisor of an array of integers. Implements error handling for empty arrays and non-integer values. if not arr: raise ValueError(\\"Input array is empty\\") if not all(isinstance(x, int) for x in arr): raise ValueError(\\"Input array contains non-integer values\\") result = arr[0] for num in arr[1:]: result = gcd(result, num) return result"},{"question":"Given a list of integers and a target sum, write a Python program to find a pair of numbers from the list that adds up to the target sum. If such a pair exists, return the pair as a list of two numbers. If no such pair exists, return an empty list.","solution":"def find_pair_with_sum(numbers, target): Finds a pair of numbers in the list that adds up to the target sum. Parameters: numbers: A list of integers. target: The target sum. Returns: A list containing the pair of numbers that add up to the target sum. If no such pair is found, returns an empty list. visited = set() for num in numbers: complement = target - num if complement in visited: return [complement, num] visited.add(num) return []"},{"question":"Write a function in Python to compute the sum of two matrices.","solution":"def add_matrices(matrix1, matrix2): Returns the sum of two matrices. Args: matrix1: List of lists, where each list represents a row in the first matrix. matrix2: List of lists, where each list represents a row in the second matrix. Returns: A matrix represented as a list of lists, with each element being the sum of the corresponding elements in matrix1 and matrix2. if not matrix1 or not matrix2: raise ValueError(\\"Both matrices must be non-empty.\\") num_rows = len(matrix1) num_cols = len(matrix1[0]) # Check if both matrices have the same dimensions if len(matrix2) != num_rows or any(len(row) != num_cols for row in matrix2): raise ValueError(\\"Both matrices must have the same dimensions.\\") result_matrix = [[matrix1[i][j] + matrix2[i][j] for j in range(num_cols)] for i in range(num_rows)] return result_matrix"},{"question":"Write a function 'hasRepeats' that checks if a list has two of the same elements.","solution":"def hasRepeats(lst): Checks if a list has any repeated elements. return len(lst) != len(set(lst))"},{"question":"I need to write a Python program that calculates the product of numbers in an array and returns the maximum product. How can I achieve this?","solution":"def max_product(nums): Returns the maximum product of any three numbers in the array. if len(nums) < 3: raise ValueError(\\"Input array must have at least three elements\\") nums.sort() # Maximum product will be the maximum of: # 1. Product of the three largest elements # 2. Product of the two smallest elements (negative) and the largest element return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a Python program that prompts the user to input a number and calculates the factorial of the number using recursive function. The program must include a function named \\"factorial_recursive\\" that takes the input number as an argument and returns the factorial of that number. The program must also display the result of the calculation and handle any potential exception that may occur.","solution":"def factorial_recursive(n): Returns the factorial of n using a recursive approach. Raises ValueError if n is negative. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: return n * factorial_recursive(n - 1) if __name__ == \\"__main__\\": try: number = int(input(\\"Enter a number: \\")) result = factorial_recursive(number) print(f\\"The factorial of {number} is {result}.\\") except ValueError as e: print(f\\"Error: {e}\\")"},{"question":"Create a nested for loop that prints all prime numbers within the range of 1 to 50, but exclude the number 2 and 3. Additionally, the program should also calculate and print the sum of all the prime numbers.","solution":"def is_prime(num): Checks if a number is prime. if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def print_and_sum_primes(): Prints all prime numbers in the range 1 to 50 excluding 2 and 3. Returns the sum of these prime numbers. prime_sum = 0 primes = [] for num in range(1, 51): if is_prime(num) and num not in [2, 3]: primes.append(num) prime_sum += num print(\\"Prime numbers between 1 and 50 excluding 2 and 3:\\") for prime in primes: print(prime, end=\\" \\") print(\\"nSum of these prime numbers:\\", prime_sum) return primes, prime_sum"},{"question":"Develop a Python-based web scraper to extract all hyperlink references and associated metadata, such as the text description and their positioning on the page, from the specific webpage provided. The target webpage is situated at https://www.example.com. Furthermore, ensure your program can handle redirects and is robust against occasional connection errors.","solution":"import requests from bs4 import BeautifulSoup import logging def scrape_links(url): Scrapes all hyperlink references and associated metadata from the specified webpage. :param url: The URL of the webpage to scrape. :return: A list of dictionaries containing 'href', 'text', and 'position' keys. try: response = requests.get(url, allow_redirects=True, timeout=10) response.raise_for_status() soup = BeautifulSoup(response.content, 'html.parser') links = [] for idx, link in enumerate(soup.find_all('a'), 1): href = link.get('href') text = link.get_text(strip=True) links.append({'href': href, 'text': text, 'position': idx}) return links except requests.exceptions.RequestException as e: logging.error(f\\"Error occurred: {e}\\") return []"},{"question":"Create the Fibonacci series with a twist in Python. The twist is that you should implement this using an iterative method instead of recursive to avoid stack overflow for large series. Additionally, include a functionality that allows the user to input a range for the Fibonacci series (for example, the first 20 numbers or only up to the 10th number). Also, ensure that your function validates this input to prevent any errors.","solution":"def fibonacci_with_twist(n): Returns the first n numbers in the Fibonacci sequence using an iterative method. Validates input to ensure n is a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") if n == 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: next_value = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_value) return fib_sequence"},{"question":"Write a Python function that checks if a number is within a given range both inclusive. Then, use that function in a program which checks whether each element in a list of integers is within the range of 1 to 10 inclusive, and returns a list of boolean values correspondingly.","solution":"def is_within_range(number, start, end): Check if a number is within a given range [start, end] inclusive. Parameters: number (int): The number to be checked. start (int): The start of the range. end (int): The end of the range. Returns: bool: True if number is within the range [start, end], False otherwise. return start <= number <= end def check_numbers_in_range(numbers, start=1, end=10): Check if each element in a list of integers is within a specified range (1 to 10 inclusive by default). Parameters: numbers (list): List of integers to be checked. start (int): The start of the range. end (int): The end of the range. Returns: list: List of boolean values representing whether each element is within the range. return [is_within_range(number, start, end) for number in numbers]"},{"question":"Write a code for cloning a list along with its inner nested lists and dictionaries, ensuring that the clone does not reference the original list's elements. Also, include a function to compare the original and cloned lists for equality in terms of values, but not in terms of reference.","solution":"import copy def clone_list(input_list): Clones a list along with its inner nested lists and dictionaries. Args: input_list (list): The list to be cloned. Returns: list: A deep clone of the input list. return copy.deepcopy(input_list) def compare_lists(original_list, cloned_list): Compares the original and cloned lists for value equality but not reference equality. Args: original_list (list): The original list. cloned_list (list): The cloned list. Returns: bool: True if lists are equal in terms of values but not in terms of reference, False otherwise. return (original_list == cloned_list) and (original_list is not cloned_list)"},{"question":"Write a Python function that takes in a list of strings and returns a list containing only the strings that have a length greater than or equal to 5 and contain at least one uppercase letter.","solution":"def filter_strings(strings): Returns a list of strings that have length >= 5 and contain at least one uppercase letter. return [s for s in strings if len(s) >= 5 and any(c.isupper() for c in s)]"},{"question":"Architect a computational procedure utilizing Python's capabilities that would implement a search technique based on a ternary structure. This procedure should enable an optimized navigation through a sorted dataset, echoes of which can be found in ternary search algorithms, thereby giving a new perspective on dissecting and processing the data efficiently.","solution":"def ternary_search(arr, key): Performs ternary search on a sorted array to find the index of the key. If the key is not found, returns -1. Args: arr (list): A sorted list of elements to search in. key: The element to search for. Returns: int: The index of the key in the array, or -1 if the key is not found. left, right = 0, len(arr) - 1 while left <= right: third1 = left + (right - left) // 3 third2 = right - (right - left) // 3 if arr[third1] == key: return third1 if arr[third2] == key: return third2 if key < arr[third1]: right = third1 - 1 elif key > arr[third2]: left = third2 + 1 else: left = third1 + 1 right = third2 - 1 return -1"},{"question":"Write a python code for a game where two players compete to reach a certain number of points by rolling an n-sided die. The game involves betting, where each player starts with a certain number of points and antes up a certain number of points per game. The game board can be represented as a line of n spaces, and the players take turns rolling the die, moving their piece forward the number of spaces rolled. The player whose turn it is can choose to roll the die once or to end their turn and keep their current position. If a player rolls a 1, their turn automatically ends, and the other player gets to roll. The first player to reach the end of the line and accumulate the specific number of points wins the game.","solution":"import random class Game: def __init__(self, n, target_points, initial_points, ante_points): self.n = n # number of spaces on the game board self.target_points = target_points # points needed to win the game self.players = [initial_points, initial_points] # starting points for both players self.ante_points = ante_points # points bet each round self.positions = [0, 0] # both players start at position 0 self.turn = 0 # player 1 starts the game def roll_die(self): return random.randint(1, self.n) def take_turn(self): current_turn_points = 0 while True: roll = self.roll_die() print(f\\"Player {self.turn + 1} rolled a {roll}.\\") if roll == 1: print(f\\"Player {self.turn + 1} rolled a 1 and loses the turn.\\") self.end_turn(0) break else: current_turn_points += roll self.positions[self.turn] += roll if self.positions[self.turn] >= self.n: self.end_turn(current_turn_points) print(f\\"Player {self.turn + 1} reached the end of the line!\\") break if self.choose_to_hold(): self.end_turn(current_turn_points) break self.switch_turn() def choose_to_hold(self): # Players can implement their strategy here; for now it’s randomized return random.choice([True, False]) def end_turn(self, round_points): self.players[self.turn] -= self.ante_points self.players[1 - self.turn] -= self.ante_points self.players[self.turn] += round_points def switch_turn(self): self.turn = 1 - self.turn def check_winner(self): if self.players[0] >= self.target_points: return 1 elif self.players[1] >= self.target_points: return 2 else: return None def play_game(self): while True: self.take_turn() winner = self.check_winner() if winner: print(f\\"Player {winner} wins the game with {self.players[winner-1]} points!\\") break"},{"question":"Develop a Python function that accepts a positive integer as input and returns a list of its prime factors, arranged in ascending order. This task requires the function to identify and list all the prime numbers that, when multiplied together, reconstruct the original input number.","solution":"def prime_factors(n): Returns the list of prime factors of n in ascending order. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") factors = [] # Check for number of twos while n % 2 == 0: factors.append(2) n //= 2 # Check for factors from 3 to sqrt(n) factor = 3 while factor * factor <= n: while n % factor == 0: factors.append(factor) n //= factor factor += 2 # If n is still a prime number and greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Write a code function that identifies prime numbers within a given list, distinguishing between odd and even numbers while optimizing for runtime efficiency. Use the list [2, 3, 4, 5, 6, 7, 8, 9, 10, 11] as your input, and include a segment of flawed code for reference to enhance analytical processing skills. Analyze the provided erroneous code, pinpoint the inaccuracies, and rectify them.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def identify_primes_and_odds_evens(numbers): Given a list of numbers, identify which are prime and also categorize them into odd and even numbers. primes = [num for num in numbers if is_prime(num)] odds = [num for num in numbers if num % 2 != 0] evens = [num for num in numbers if num % 2 == 0] return {'primes': primes, 'odds': odds, 'evens': evens} # The reference flawed code: # def check_prime(num): # if num == 1: # return False # elif num == 2: # return True # for i in range(2, num//2): # if (num % i) == 0: # return False # return True # def prime_and_odd_even(numbers): # primes = [] # odds = [] # evens = [] # for n in numbers: # if check_prime(n): # primes.append(n) # if n % 2 == 0: # evens.append(n) # else: # odds.append(n) # return {'primes': primes, 'odds': odds, 'evens': evens} # Issues in the flawed code: # - It loops up to num//2 instead of sqrt(num) # - Incorrect checking for prime in check_prime() function # - Inefficency in the algorithm due to redundant prime checks."},{"question":"Task 5.7 Create a dictionary called \\"purchase\\" containing \\"item\\", \\"price\\" and \\"quantity\\" as keys. Assign value pairs to this dictionary. Next, create a function that takes this dictionary as an argument and returns the total cost of the purchase (price * quantity). Remember to check the types of received inputs.","solution":"# Define the purchase dictionary purchase = { \\"item\\": \\"Apple\\", \\"price\\": 0.5, \\"quantity\\": 10 } def total_cost(purchase): Calculate the total cost of the purchase. Args: purchase (dict): A dictionary containing keys \\"item\\", \\"price\\", and \\"quantity\\". Returns: float: The total cost calculated as price * quantity. Raises: ValueError: If \\"price\\" or \\"quantity\\" are not numeric types. if not isinstance(purchase, dict): raise ValueError(\\"The input must be a dictionary\\") if \\"price\\" not in purchase or \\"quantity\\" not in purchase: raise ValueError(\\"The dictionary must contain 'price' and 'quantity' keys\\") if not isinstance(purchase[\\"price\\"], (int, float)): raise ValueError(\\"Price must be a numeric value\\") if not isinstance(purchase[\\"quantity\\"], (int, float)): raise ValueError(\\"Quantity must be a numeric value\\") return purchase[\\"price\\"] * purchase[\\"quantity\\"]"},{"question":"Develop a recursive function to calculate the product of all prime numbers in an array. The function also needs to incorporate error handling for cases where the array is empty or contains non-integer or negative values. Furthermore, ensure that the recursive function can handle large arrays without running into stack overflow errors.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def product_of_primes(arr): Returns the product of all prime numbers in the array. Raises ValueError if the array is empty or contains non-integer or negative values. if not arr: raise ValueError(\\"Array is empty\\") for x in arr: if not isinstance(x, int) or x < 0: raise ValueError(\\"Array contains non-integer or negative values\\") def recursive_product(index): if index == len(arr): return 1 current_value = arr[index] if is_prime(current_value): return current_value * recursive_product(index + 1) else: return recursive_product(index + 1) return recursive_product(0)"},{"question":"Rewrite the following code snippet in Python to multiply an input list of numbers by a given factor, using functional programming concepts. You may assume that the input list will always contain numbers and the factor will always be an integer.","solution":"from typing import List def multiply_list(numbers: List[int], factor: int) -> List[int]: Returns a new list with each number in the input list multiplied by the given factor. :param numbers: List of integers to be multiplied. :param factor: The integer factor to multiply with each number in the list. :return: A new list with each number multiplied by the factor. return list(map(lambda x: x * factor, numbers))"},{"question":"I want a python function that takes a list and a function as input and returns a new list where the function has been applied to each element of the previous list.","solution":"def apply_function(lst, func): Applies a given function to each element of the list and returns a new list with the results. Parameters: lst (list): A list of elements. func (function): A function that takes an element from the list and returns a new element. Returns: list: A new list with the function applied to each element. return [func(item) for item in lst]"},{"question":"Write a Python program that prompts the user to enter a key and a dictionary, and then checks if the key exists in the dictionary. If the key exists, the program should print the corresponding value. If the key does not exist, the program should prompt the user to enter another key until a valid key is provided.","solution":"def check_key_in_dict(dictionary, key): Check if the provided key exists in the dictionary and return the value if it exists. If the key does not exist, return None. return dictionary.get(key) def prompt_user_for_key(dictionary): Prompts the user to enter keys and checks if they exist in the dictionary, stopping only when a valid key is provided. while True: key = input(\\"Please enter a key: \\") if key in dictionary: print(f\\"The value for '{key}' is: {dictionary[key]}\\") break else: print(f\\"The key '{key}' does not exist in the dictionary. Please try again.\\")"},{"question":"I am trying to build a web application using Python's Flask framework. Can you provide an example of how to create a basic web application with a single page that displays a welcome message?","solution":"from flask import Flask app = Flask(__name__) @app.route('/') def home(): return \\"Welcome to my web application!\\" if __name__ == '__main__': app.run(debug=True)"},{"question":"Create a function in Python to return the approximate value of sin(x) using degrees, the math module, and recursion without using the direct sin() function. Limit the recursion depth to ensure it's safe for large inputs.","solution":"import math def sin_degrees(x, terms=10, current_term=1): Returns the approximate value of sin(x) where x is in degrees. Uses Taylor series expansion and recursion. :param x: Angle in degrees :param terms: Number of terms to consider in the Taylor series expansion :param current_term: The term index in the recursion :return: Approximated value of sin(x) in degrees # Convert degrees to radians x_rad = math.radians(x) # Base case, after enough terms, return 0 for further terms result if current_term > terms: return 0 # Recursive term calculation for Taylor series sin(x) = x - x^3/3! + x^5/5! - x^7/7! + ... term = ((-1)**(current_term-1)) * (x_rad ** (2*current_term-1)) / math.factorial(2*current_term-1) # Recursive call for the next terms return term + sin_degrees(x, terms, current_term + 1)"},{"question":"Create an algorithm to check if a binary tree is univalued, where the nodes in the tree store integers and the univalued property means that all nodes in the tree have the same integer value. Additionally, the algorithm should find and return the number of occurrences of the univalent value in the tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_unival_tree(root): Returns a tuple (is_unival, count) where is_unival is True if the tree is univalued, otherwise False, and count is the number of occurrences of the univalued value in the tree. if not root: return (True, 0) def dfs(node): if not node: return (True, 0) left_is_unival, left_count = dfs(node.left) right_is_unival, right_count = dfs(node.right) is_unival = left_is_unival and right_is_unival and (not node.left or node.left.val == node.val) and (not node.right or node.right.val == node.val) total_count = left_count + right_count if is_unival: total_count += 1 return (is_unival, total_count) result = dfs(root) if result[0]: return result else: return (False, 0)"},{"question":"Write a Python program that checks if a given list of strings is a palindrome. Note that the individual words in the string do not have to be palindromes, only the full list when read forward and backward. Also, implement a case-insensitive check, and ignore punctuation, spaces and capitalization for the palindrome check.","solution":"import string def is_list_palindrome(lst): Checks if a given list of strings is a palindrome. This function is case-insensitive and ignores punctuation and spaces. Parameters: lst (list): The list of strings to check. Returns: bool: True if the list of strings is a palindrome, False otherwise. # Join the list into a single string combined_string = ''.join(lst) # Remove spaces and punctuation, and convert to lowercase normalized_string = combined_string.translate(str.maketrans('', '', string.punctuation)).replace(' ', '').lower() # Check if the normalized string is a palindrome return normalized_string == normalized_string[::-1]"},{"question":"Given an array arr containing strings and an integer k. Modify the array in-place by removing the kth last element. Return the array after modification. If k is greater than the length of the array, remove the last element until the array is empty. If k is negative or zero, return the original array. Note that you have to create your own solution, and you are not allowed to use programming language-specific built-in functions like \\"del\\", \\"pop\\", \\"splice\\", \\"remove\\", etc.","solution":"def remove_kth_last_element(arr, k): Modifies the array in-place by removing the kth last element. If k is greater than the length of the array, remove the last element until the array is empty. If k is negative or zero, return the original array. if k <= 0: return arr while len(arr) > 0 and k > len(arr): arr = arr[:-1] # Remove the last element k -= 1 if len(arr) > 0 and k > 0: index_to_remove = len(arr) - k # Shift elements to the left for i in range(index_to_remove, len(arr) - 1): arr[i] = arr[i + 1] arr = arr[:-1] # Adjust length after removal return arr"},{"question":"Write a code snippet to create an array filled with alternating 0s and 1s, where the number of 0s and 1s are equal. The array should start with 0.","solution":"def create_alternating_array(n): Creates an array of length 2n filled with alternating 0s and 1s, starting with 0. :param n: Number of 0s (and also the number of 1s) :return: List containing the alternating sequence of 0s and 1s return [i % 2 for i in range(n * 2)]"},{"question":"Create a function in Python that takes two parameters, x and y, and returns a matrix of size x * y filled with random numbers.","solution":"import random def generate_random_matrix(x, y): Generates a matrix of size x * y filled with random numbers. Parameters: x (int): number of rows y (int): number of columns Returns: list: A matrix represented as a list of lists where each element is a random number. matrix = [] for i in range(x): row = [] for j in range(y): row.append(random.random()) matrix.append(row) return matrix"},{"question":"Develop a Python function that swaps the initial and terminal elements in an array. Concurrently, the function should also swap the penultimate element with the second one, the antepenultimate with the third one, and so forth. The function should be capable of managing arrays of arbitrary length and diverse data types.","solution":"def swap_elements(arr): Swaps the initial and terminal elements in an array. Concurrently, the function also swaps the penultimate element with the second one, the antepenultimate with the third one, and so forth. Parameters: arr (list): The input list whose elements need to be swapped. Returns: list: The list with swapped elements. n = len(arr) mid = n // 2 for i in range(mid): arr[i], arr[n - 1 - i] = arr[n - 1 - i], arr[i] return arr"},{"question":"Imagine you have two software systems each with a unique identifier. One system uses a 3-character code with all uppercase letters (e.g., ABC, XYZ) while the other uses a 2-character code combined with a 3-digit number (e.g., AB123). If you are asked to convert the 3-character code to the 2-character code plus a 3-digit number, how would you go about doing it in a Python program?","solution":"def convert_code_3_to_5(code): Converts a 3-character code to a 2-character code and a 3-digit number. Parameters: - code: str, a 3-character code with all uppercase letters (e.g., \\"ABC\\"). Returns: - str, the converted code in the format of a 2-character code with a 3-digit number (e.g., \\"AB003\\"). assert len(code) == 3, \\"The input code must be 3 characters long.\\" # First two characters remain the same first_two_chars = code[:2] # Last character is converted to a 3-digit number last_char = code[2] number = ord(last_char) - ord('A') + 1 three_digit_number = f\\"{number:03}\\" # Concatenate the parts converted_code = first_two_chars + three_digit_number return converted_code"},{"question":"Write a code in Python to find the longest increasing subsequence of a given sequence. The code should not only find the length of the longest increasing subsequence, but also return the subsequence itself. The sequence will contain unique positive integers. You must solve this problem using dynamic programming. sequence = [5, 2, 8, 6, 3, 6, 9, 5]","solution":"def longest_increasing_subsequence(sequence): Finds the longest increasing subsequence of a given sequence. Args: sequence (list of int): The input sequence of unique positive integers. Returns: tuple: A tuple containing the length of the longest increasing subsequence and the subsequence itself. if not sequence: return (0, []) n = len(sequence) lengths = [1] * n predecessors = [-1] * n for i in range(1, n): for j in range(i): if sequence[i] > sequence[j] and lengths[i] < lengths[j] + 1: lengths[i] = lengths[j] + 1 predecessors[i] = j # Find the length and the end index of the longest increasing subsequence max_length = max(lengths) max_index = lengths.index(max_length) # Reconstruct the longest increasing subsequence lis = [] while max_index != -1: lis.append(sequence[max_index]) max_index = predecessors[max_index] lis.reverse() # Reverse the list as we tracked it backwards return (max_length, lis)"},{"question":"You are a software engineer, and your tech lead assigns you to create a function in Python that returns the last occurrence of an element in a specifically sorted, non-repeating integer list. You are provided with pre-defined essential aspects such as the boundaries of the list length (1 ≤ length ≤ 10^4) and the elements (-10^9 ≤ element ≤ 10^9). Additionally, you are given a code snippet that provides an initial solution using an iterative approach with a time complexity of O(n). Your task is to redefine the function, potentially increasing the difficulty by utilizing a binary search technique, and ensure the function is properly documented and tested.","solution":"def find_last_occurrence(sorted_list, target): Returns the index of the last occurrence of the target element in the sorted list. If the target is not found, returns -1. :param sorted_list: A list of integers sorted in ascending order :param target: An integer, the target element to find :return: An integer, the index of the last occurrence of the target or -1 if not found left, right = 0, len(sorted_list) - 1 result = -1 while left <= right: mid = (left + right) // 2 if sorted_list[mid] == target: result = mid left = mid + 1 elif sorted_list[mid] < target: left = mid + 1 else: right = mid - 1 return result"},{"question":"Write a Python code to create two empty lists. Then, write functions to add elements to these lists, remove elements from them, and find their intersection. Make sure to handle potential errors like trying to remove an element that doesn't exist.","solution":"def create_empty_lists(): Returns two empty lists. return [], [] def add_element_to_list(lst, element): Adds an element to the list. lst.append(element) def remove_element_from_list(lst, element): Removes an element from the list if it exists. If the element does not exist, raises a ValueError. if element in lst: lst.remove(element) else: raise ValueError(f\\"Element {element} not found in list\\") def find_intersection(lst1, lst2): Returns a list containing elements that are common to both lists. return list(set(lst1) & set(lst2))"},{"question":"In a computer science context, analyze the distinction between a linked list and an array in terms of memory allocation, data access, insertion and deletion operations, and memory management. Then, write a code snippet in your preferred language illustrating the implementation of both data structures and their operations.","solution":"# Differences between a linked list and an array: # Memory Allocation: # - Array: Allocated in contiguous memory blocks. # - Linked List: Allocated in non-contiguous memory blocks with each node containing a reference to the next node. # # Data Access: # - Array: O(1) time complexity for accessing elements via index. # - Linked List: O(n) time complexity for accessing elements as traversal is needed. # # Insertion and Deletion Operations: # - Array: O(n) time complexity for insertion and deletion because elements may need to be shifted. # - Linked List: O(1) time complexity for insertion/deletion if the node reference is known; O(n) otherwise due to traversal. # # Memory Management: # - Array: Fixed size defined at the time of creation; resizing can be costly. # - Linked List: Dynamic size, can grow or shrink easily with insertions and deletions. class Node: A class representing a node in a linked list. def __init__(self, value=None): self.value = value self.next = None class LinkedList: A class representing a singly linked list. def __init__(self): self.head = None def append(self, value): Appends a new value to the end of the linked list. new_node = Node(value) if not self.head: self.head = new_node return current = self.head while current.next: current = current.next current.next = new_node def delete(self, value): Deletes the first occurrence of a value in the linked list. current = self.head if current and current.value == value: self.head = current.next return prev = None while current and current.value != value: prev = current current = current.next if current: prev.next = current.next def display(self): Displays all the elements in the linked list. current = self.head elements = [] while current: elements.append(current.value) current = current.next return elements class Array: A class representing a dynamic array (similar to Python list). def __init__(self): self.array = [] def append(self, value): Appends a new value to the end of the array. self.array.append(value) def delete(self, value): Deletes the first occurrence of a value in the array. self.array.remove(value) def display(self): Displays all the elements in the array. return self.array"},{"question":"Given a set of directories with images, write a Python function to iterate through all the directories and return the count of images present in each directory. Also provide a piece of erroneous code and explain what is wrong with it.","solution":"import os def count_images_in_directories(base_dir): Counts the number of image files in each directory present in the base directory. Arguments: base_dir: str - Path to the base directory containing subdirectories with images. Returns: dict - A dictionary with directory names as keys and image counts as values. image_extensions = {'.png', '.jpg', '.jpeg', '.gif', '.bmp'} dir_image_count = {} for root, dirs, files in os.walk(base_dir): for directory in dirs: dir_path = os.path.join(root, directory) image_count = 0 for file in os.listdir(dir_path): if os.path.splitext(file)[1].lower() in image_extensions: image_count += 1 dir_image_count[directory] = image_count return dir_image_count # Erroneous code def count_files(base_dir): image_extensions = {'.png', '.jpg', '.jpeg', '.gif', '.bmp'} image_count = 0 for root, _, files in os.walk(base_dir): for file in files: if os.path.splitext(file)[1].lower() in image_extensions: image_count += 1 return image_count # Explanation of error: # The erroneous code counts image files in the entire directory tree under base_dir # and returns a single count value. It does not track counts for individual directories."},{"question":">Create a function that takes an array of strings and returns an array of their lengths. The function should also filter out any strings that contain numbers and only consider strings that have at least one vowel in them.","solution":"def has_vowel(s): Returns True if the string contains at least one vowel; otherwise, returns False. vowels = \\"aeiouAEIOU\\" return any(char in vowels for char in s) def contains_number(s): Returns True if the string contains any numerical digits; otherwise, returns False. return any(char.isdigit() for char in s) def filter_and_length(arr): Takes an array of strings and returns an array of their lengths after filtering out any strings that contain numbers and only considering strings that have at least one vowel in them. return [len(s) for s in arr if not contains_number(s) and has_vowel(s)]"},{"question":"Develop a regex statement to evaluate if a specific string contains a palindrome sequence of characters. Your solution should also accommodate letter case sensitivity, punctuation and spaces, meaning that these should not disrupt the functionality of identifying a palindrome (e.g. \\"Madam, in Eden, I'm Adam\\" , ignoring punctuation, spaces and case differences, it's a palindrome). Hence enhance it to identify palindromes in a multitude of strings listed in a table.","solution":"import re def is_palindrome(s): Evaluate if a specific string contains a palindrome sequence of characters. This accommodates letter case sensitivity, punctuation and spaces. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1] def identify_palindromes(strings): Identify palindromes in a list of strings. return [s for s in strings if is_palindrome(s)]"},{"question":"Construct a function called \\"divisible_by\\" that takes in a positive integer as an argument and returns a string indicating the largest number that evenly divides the given number. The function should handle edge cases, such as when the input number is zero or negative, by returning an appropriate error message. Additionally, the function should only accept integers as input, and should return an error message if a non-integer value is passed as an argument.","solution":"def divisible_by(n): Returns the largest number that evenly divides the given positive integer \`n\`. Returns an error message for invalid inputs. if not isinstance(n, int): return \\"Error: Input must be an integer.\\" if n <= 0: return \\"Error: Input must be a positive integer.\\" # Since n is a positive integer, the largest number that evenly divides n is n itself. return f\\"The largest number that evenly divides {n} is {n}.\\""},{"question":"I need to generate a Fibonacci sequence, but the twist is, I need the sequence to be of a specific length and the numbers in the sequence should only be even. Can you help me write a code in Python to achieve this? Remember, the length of the sequence will be given as input by the user and it can be any positive integer.","solution":"def generate_even_fibonacci(length): Generates a Fibonacci sequence of specified length consisting of only even numbers. if length <= 0: return [] sequence = [] a, b = 0, 1 while len(sequence) < length: a, b = b, a + b if b % 2 == 0: sequence.append(b) return sequence"},{"question":"How can you represent a fraction in Python? Provide a code snippet to create a fraction object with a numerator and denominator, and include error handling for invalid inputs.","solution":"from fractions import Fraction def create_fraction(numerator, denominator): Creates a Fraction object given a numerator and a denominator. Raises a ValueError if the denominator is zero. Raises a TypeError if inputs are not integers. if not isinstance(numerator, int) or not isinstance(denominator, int): raise TypeError(\\"Numerator and denominator must be integers.\\") if denominator == 0: raise ValueError(\\"Denominator cannot be zero.\\") return Fraction(numerator, denominator)"},{"question":"Write a function in Python that takes a sequence (list, tuple, string, etc.) and returns a new sequence of the same type containing only the elements at even indices.","solution":"def even_indices_elements(seq): Returns a new sequence of the same type containing only the elements at even indices. :param seq: The input sequence (list, tuple, string, etc.) :return: A new sequence of the same type containing elements at even indices return seq[::2]"},{"question":"Create a function to simulate a coin flip that can handle an arbitrary number of flips. The function should return the number of heads and the number of tails in a tuple. Additionally, the function should be able to handle weighted coins, where the probability of landing on heads or tails can be specified as an argument.","solution":"import random def coin_flip_simulator(num_flips, heads_prob=0.5): Simulates a coin flip for a given number of flips with a specified probability of landing on heads. Args: num_flips (int): The number of times to flip the coin. heads_prob (float): The probability of the coin landing on heads. Must be between 0 and 1. Returns: tuple: A tuple containing the number of heads and the number of tails. if not (0 <= heads_prob <= 1): raise ValueError(\\"Heads probability must be between 0 and 1 inclusive\\") heads = 0 tails = 0 for _ in range(num_flips): if random.random() < heads_prob: heads += 1 else: tails += 1 return (heads, tails)"},{"question":"What is the function of str.format in Python? Provide an example of using str.format to format a string with multiple variables, including at least one variable that is a nested attribute of an object. Additionally, include an error in the code snippet provided and explain how to fix it.","solution":"class Person: def __init__(self, first_name, last_name): self.first_name = first_name self.last_name = last_name def format_person_info(person, age, height): Formats information about a person including their nested attributes. Args: - person (Person): a Person object - age (int): age of the person - height (float): height of the person Returns: - str: formatted string return \\"Name: {0.first_name} {0.last_name}, Age: {1}, Height: {2}\\".format(person, age, height)"},{"question":"Write python code to get the equilibrium index of an array. An equilibrium index of array is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes. Consider that the index starts from 0. If there is no equilibrium index then return -1.","solution":"def equilibrium_index(arr): Finds the equilibrium index of an array where the sum of elements at lower indexes is equal to the sum of elements at higher indexes. Parameters: arr (list): List of integers Returns: int: The equilibrium index or -1 if none exists total_sum = sum(arr) left_sum = 0 for i in range(len(arr)): total_sum -= arr[i] if left_sum == total_sum: return i left_sum += arr[i] return -1"},{"question":"Write a code to check if an element is present in a nested array. If the element is found, print its index position in the outer array and inner array. If the element is not found, print a message stating that the element is not present.","solution":"def find_element_in_nested_array(nested_array, element): Searches for an element in a nested array. If found, returns a tuple with the index position in the outer and inner array. If not found, returns a message stating the element is not present. :param nested_array: List of lists (nested array) :param element: Element to search for :return: Tuple of indices (outer, inner) or a string message for outer_index, inner_list in enumerate(nested_array): if element in inner_list: inner_index = inner_list.index(element) return (outer_index, inner_index) return \\"Element is not present\\""},{"question":"Implement a singly linked list structure in Python where the numerical value stored in the first node, or head, is identical to that of the final node, or tail. Additionally, implement a method to detect and remove duplicates from the list.","solution":"class Node: def __init__(self, value): self.value = value self.next = None class SinglyLinkedList: def __init__(self, value): new_node = Node(value) self.head = new_node self.tail = new_node self.value = value # Ensure head and tail have the same value def append(self, value): if value == self.value: new_node = Node(value) self.tail.next = new_node self.tail = new_node def remove_duplicates(self): if not self.head: return current = self.head seen_values = set([self.head.value]) while current.next: if current.next.value in seen_values: current.next = current.next.next else: seen_values.add(current.next.value) current = current.next def to_list(self): node = self.head result = [] while node: result.append(node.value) node = node.next return result"},{"question":"Write a type annotation for a function that takes a List of Integers and returns a List of Integers where all even numbers are removed.","solution":"from typing import List def remove_evens(numbers: List[int]) -> List[int]: Removes all even numbers from the input list of integers. parameters: numbers (List[int]): A list of integers. returns: List[int]: A list of integers with all even numbers removed. return [num for num in numbers if num % 2 != 0]"},{"question":"Write a recursive function to print all permutations of a given string in Python.","solution":"def permute(s, step=0, result=None): Returns a list of all permutations of the input string s. if result is None: result = [] if step == len(s): result.append(\\"\\".join(s)) for i in range(step, len(s)): s_copy = [c for c in s] s_copy[step], s_copy[i] = s_copy[i], s_copy[step] permute(s_copy, step + 1, result) return result"},{"question":"Write documentation for a Python function that takes two strings as inputs. This function should return the number of unique characters that appear in both strings, ignoring case sensitivity. The function name is \`count_unique_common_chars\`.","solution":"def count_unique_common_chars(str1, str2): Returns the number of unique characters that appear in both input strings, ignoring case sensitivity. Args: str1 (str): The first input string. str2 (str): The second input string. Returns: int: The number of unique common characters in both strings. # Convert both strings to lowercase to ignore case sensitivity str1 = str1.lower() str2 = str2.lower() # Convert each string to a set to get unique characters unique_chars_str1 = set(str1) unique_chars_str2 = set(str2) # Find the intersection of the two sets to get common unique characters common_chars = unique_chars_str1 & unique_chars_str2 # Return the length of the intersection set which represents the number of unique common characters return len(common_chars)"},{"question":"You are a developer working on a robotics project. Your task is to add a new feature to an existing Python-based robot controller program. This new feature involves parsing a configuration file to set the joint angles for a robotic arm. The configuration file is in JSON format and includes the names of the joints along with their desired angles.","solution":"import json def parse_joint_angles(config_file_path): Parses a JSON configuration file to set the joint angles for a robotic arm. The configuration file should be in the following format: { \\"joint1\\": angle1, \\"joint2\\": angle2, ... } Parameters: config_file_path: str - The path to the JSON configuration file. Returns: dict - A dictionary where the keys are joint names and the values are the angles. with open(config_file_path, 'r') as file: config_data = json.load(file) return config_data"},{"question":"Create a Python function that takes two arguments, a positive integer and a boolean, and return the word \\"yes\\" if the boolean is true and the number is a prime number, or return the word \\"no\\" otherwise.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def check_prime_and_boolean(number, flag): Returns the word \\"yes\\" if the flag is True and the number is a prime number, or returns the word \\"no\\" otherwise. if flag and is_prime(number): return \\"yes\\" return \\"no\\""},{"question":"Given a list of numbers, write a Python code snippet to print the elements of the list in reverse order without using any built-in functions or additional data structures. Additionally, the code should have a space complexity of O(1), meaning that it should not use any extra memory except for a few integer variables. Furthermore, the code must be implemented in a class with a method that takes the list as an argument. In addition to this, the method should only accept and return a list of integers, and it should handle negative numbers correctly.","solution":"class ListReverser: def reverse_list(self, nums): Reverses the elements of the list in place without using any built-in functions or additional data structures. Args: nums (list of int): List of integers to be reversed. Returns: list of int: Reversed list of integers. left = 0 right = len(nums) - 1 while left < right: # Swap the elements at left and right indices nums[left], nums[right] = nums[right], nums[left] left += 1 right -= 1 return nums # Example usage: # nums = [1, 2, 3, 4, 5] # reverser = ListReverser() # reversed_nums = reverser.reverse_list(nums) # print(reversed_nums) # Output should be [5, 4, 3, 2, 1]"},{"question":"Write a Python code to split a list into two equal halves and then print the average of all the elements in each half. The input list will always contain even number of elements.","solution":"def split_and_average(lst): Splits the list into two equal halves and returns the average of all the elements in each half as a tuple (average_of_first_half, average_of_second_half). mid = len(lst) // 2 first_half = lst[:mid] second_half = lst[mid:] average_first_half = sum(first_half) / len(first_half) average_second_half = sum(second_half) / len(second_half) return (average_first_half, average_second_half)"},{"question":"I'm designing a function in Python that determines whether a given positive integer is a perfect number. A perfect number is defined as a number which is equal to the sum of its proper divisors (excluding itself). Could you help me with the implementation?","solution":"def is_perfect_number(n): Determine whether a given positive integer is a perfect number. A perfect number is defined as a number which is equal to the sum of its proper divisors (excluding itself). :param n: Positive integer to check. :return: True if n is a perfect number, False otherwise. if n <= 1: return False # Find all proper divisors of n divisors = [1] for i in range(2, int(n**0.5) + 1): if n % i == 0: divisors.append(i) if i != n // i: divisors.append(n // i) # Check if sum of proper divisors equals n return sum(divisors) == n"},{"question":"Given a list of dates and times in the format: \\"MM/DD/YYYY HH:MM\\", write a Python function to sort these in chronological order while handling different time zones. Assume that the dates could span multiple centuries and time zones include Daylight Saving Time adjustments.","solution":"from datetime import datetime import pytz def sort_dates_with_timezones(dates_and_times, timezone_str): Sorts a list of dates and times in chronological order considering the given timezone. Args: - dates_and_times: List of strings representing dates and times in the format 'MM/DD/YYYY HH:MM'. - timezone_str: A string representing the time zone against which to interpret the dates and times. Returns: - A list of strings sorted in chronological order. local_tz = pytz.timezone(timezone_str) date_objects = [ local_tz.localize(datetime.strptime(dt_str, \\"%m/%d/%Y %H:%M\\")) for dt_str in dates_and_times ] sorted_date_objects = sorted(date_objects) return [dt.strftime(\\"%m/%d/%Y %H:%M\\") for dt in sorted_date_objects]"},{"question":"Translate this into Python: function x = vecsum(v) if length(v) == 1 x = v; else x = v(1) + vecsum(v(2:end)); end end","solution":"def vecsum(v): Computes the sum of the elements in the vector v recursively. If the vector has only one element, it returns that element. Otherwise, it adds the first element to the sum of the rest of the elements. if len(v) == 1: return v[0] else: return v[0] + vecsum(v[1:])"},{"question":"I have a very large list of items with many duplicates. Let's say the items are just numbers. I want to remove all duplicates but for each item in the final list I want to retain one duplicate item too. For example if the input list is the integers 1 to 6 repeated twice, I want the list that has each integer only twice (1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6). Can you write a Python function that does this?","solution":"def retain_one_duplicate(items): Returns a list where each item appears exactly twice. :param items: List of integers with many duplicates. :return: List of integers with each integer appearing exactly twice. from collections import Counter item_counts = Counter(items) result = [] for item, count in item_counts.items(): result.extend([item] * min(count, 2)) return result"},{"question":"Compare two identical lists in Python and return the elements that are common in both the lists.","solution":"def common_elements(list1, list2): Returns a list of elements that are common in both list1 and list2. return list(set(list1).intersection(set(list2)))"},{"question":"Design an algorithm in Python for reversing a doubly linked list. Keep in mind that a doubly linked list has references to both the next node in line and the previous one. Additionally, to increase the difficulty of the task, consider the following inefficient and erroneous piece of code as a reference. Your goal is to both correct and optimize this code snippet.","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if not self.head: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node new_node.prev = last def reverse(self): temp = None current = self.head while current: temp = current.prev current.prev = current.next current.next = temp current = current.prev if temp: self.head = temp.prev def to_list(self): result = [] current = self.head while current: result.append(current.data) current = current.next return result"},{"question":"Write a code that takes in a nested array and flattens it into a one-dimensional array. In addition, your function should also be capable of handling different datatypes within the array.","solution":"def flatten_array(nested_array): Flattens a nested array into a one-dimensional array. Can handle different datatypes within the array. flattened = [] def _flatten(sub_array): for elem in sub_array: if isinstance(elem, list): _flatten(elem) else: flattened.append(elem) _flatten(nested_array) return flattened"},{"question":"Create a function that takes in a list of integers and returns a new list containing only the even numbers from the original list. The function should have a time complexity of O(n), where n is the length of the input list. Additionally, the function should not use any built-in functions or libraries to solve the problem.","solution":"def filter_even_numbers(input_list): Returns a list containing only the even numbers from the input list. Parameters: input_list (list): A list of integers Returns: list: A list containing only the even numbers from the input list result = [] for num in input_list: if num % 2 == 0: result.append(num) return result"},{"question":"Create a Python program to check if all items in a list are unique, without using any built-in functions or data structures. Additionally, consider time and space complexity.","solution":"def are_all_items_unique(arr): Check if all items in a list are unique without using any built-in functions or data structures. Args: arr (list): List of items to check for uniqueness. Returns: bool: True if all items are unique, False otherwise. n = len(arr) for i in range(n): for j in range(i + 1, n): if arr[i] == arr[j]: return False return True"},{"question":"Create a Python function named 'find_largest_number' that takes a list of numbers as a parameter and returns the largest number in the list.","solution":"def find_largest_number(numbers): Returns the largest number in the list. :param numbers: A list of numbers :return: The largest number in the list if not numbers: raise ValueError(\\"The list is empty\\") largest = numbers[0] for number in numbers: if number > largest: largest = number return largest"},{"question":"Leverage Regex in Python programming to discern and enumerate the instances of each distinct word in a supplied sentence. Additionally, consider words to be case-insensitive and surrounded by any non-letter characters as separate entities. For instance, \\"Python\\" and \\"python,\\" should be treated as the same word.","solution":"import re from collections import Counter def count_words(sentence): Count the occurrences of each distinct word in a given sentence. Words are considered case-insensitive. Args: sentence (str): The input sentence. Returns: dict: A dictionary with words as keys and their counts as values. # Convert sentence to lowercase sentence = sentence.lower() # Use regex to find words, considering words as sequences of letters words = re.findall(r'bw+b', sentence) # Use Counter to count the occurrences of each word word_counts = Counter(words) return dict(word_counts)"},{"question":"Given two linked lists, write a Python program to compare them and output true if they are equal and false if not. Additionally, implement the comparison with a time complexity of O(n) where n is the length of the longer list. The program should also handle circular linked lists and linked lists with loops.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def compare_linked_lists(head1, head2): Compares two linked lists and returns True if they are equal, False otherwise. This version handles circular linked lists and linked lists with loops. if not head1 and not head2: return True if (not head1 and head2) or (head1 and not head2): return False visited_nodes1 = set() visited_nodes2 = set() current1, current2 = head1, head2 while current1 and current2: if current1.value != current2.value: return False if current1 in visited_nodes1 or current2 in visited_nodes2: return True visited_nodes1.add(current1) visited_nodes2.add(current2) current1 = current1.next current2 = current2.next return current1 is None and current2 is None"},{"question":"Write a function to find the n-th Fibonacci number for a given n, using a recursive approach. However, you are not allowed to use memoization or any built-in caching mechanisms.","solution":"def fibonacci(n): Returns the n-th Fibonacci number using a recursive approach without memoization. if n <= 0: raise ValueError(\\"n should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Formulate an algorithm that traverses a binary tree using a level-order approach, with additional functionality to calculate and return the average value of nodes at each level. Remember to manage edge cases, for instance, when the tree is empty or contains negative values.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def average_of_levels(root): Returns the average value of nodes at each level of the binary tree. if not root: return [] result = [] queue = deque([root]) while queue: level_length = len(queue) level_sum = 0 for _ in range(level_length): node = queue.popleft() level_sum += node.val if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level_sum / level_length) return result"},{"question":"Create an algorithm to check if a binary tree is univalued and strictly increasing, where the nodes in the tree store positive integers. Additionally, the algorithm should ensure that the binary tree is height-balanced, meaning that the height difference between the left and right subtrees of any node is at most 1.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_univalued_and_increasing(root): Returns True if the binary tree is univalued and strictly increasing, and height-balanced. Otherwise, returns False. def is_unival_and_increasing_and_balanced(node): if not node: return True, None, 0 # (univalued and increasing, last seen value, height) left_is_unival, left_last_value, left_height = is_unival_and_increasing_and_balanced(node.left) right_is_unival, right_last_value, right_height = is_unival_and_increasing_and_balanced(node.right) # Check if the left and right subtrees are height-balanced if abs(left_height - right_height) > 1: return False, node.val, max(left_height, right_height) + 1 # Check if the current node is strictly greater than the last value nodes in left and right subtrees current_is_increasing = (left_last_value is None or (left_last_value is not None and left_last_value < node.val)) and (right_last_value is None or (right_last_value is not None and node.val < right_last_value)) current_is_univalued = left_is_unival and right_is_unival # Update the last value seen if the current node is valid last_value = node.val if current_is_increasing else left_last_value if left_last_value is not None else right_last_value return current_is_univalued and current_is_increasing, last_value, max(left_height, right_height) + 1 univalued_and_increasing, _, _ = is_unival_and_increasing_and_balanced(root) return univalued_and_increasing"},{"question":"Write a recursive function in Python that implements depth-first search on a binary tree. The nodes of the tree contain integer values, and the goal is to find if a given target integer exists in the tree or not. You need to traverse the tree in a Pre-order manner (Node - Left - Right).","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def depth_first_search(root, target): Perform a pre-order depth-first search on the binary tree to find the target value. if root is None: return False # Check the current node if root.value == target: return True # Recursively check the left subtree if depth_first_search(root.left, target): return True # Recursively check the right subtree return depth_first_search(root.right, target)"},{"question":"Create a program in Python to sort a given array in ascending order using bubble sort.","solution":"def bubble_sort(arr): Sorts an array in ascending order using bubble sort algorithm. :param arr: List of elements to be sorted :return: Sorted list of elements n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a Python function which accepts three parameters - two integers X and Y and a lambda function L. The function generates a 2-D array. The element in the i-th row and j-th column of the array is i*j processed through the lambda function L. Execute this function with X = 5, Y = 5 and L as a lambda function with one integer input that returns the square of the input.","solution":"def generate_2d_array(X, Y, L): Generates a 2-D array where the element at i-th row and j-th column is i*j processed through the lambda function L. Parameters: X (int): Number of rows Y (int): Number of columns L (lambda): A lambda function that processes the integer input Returns: list: A 2-D array of processed values return [[L(i * j) for j in range(Y)] for i in range(X)] # Example usage with X=5, Y=5, and L as squaring the input example_array = generate_2d_array(5, 5, lambda x: x ** 2)"},{"question":"Write a python function to check if a list is sorted in non-decreasing order and all elements are unique. The function should return True if the list is sorted in non-decreasing order and all elements are unique, and False otherwise. The function should have a time complexity of O(n) and a space complexity of O(1).","solution":"def is_sorted_and_unique(lst): Checks if the list is sorted in non-decreasing order and all elements are unique. Parameters: lst (list): The list to check. Returns: bool: True if the list is sorted in non-decreasing order and all elements are unique, False otherwise. if not lst: return True for i in range(1, len(lst)): if lst[i] <= lst[i - 1]: return False return True"},{"question":"Write a python function which implements insertion sort algorithm to sort an array of integers in non-decreasing order. Also, include functionality to sort in non-increasing order based on an optional boolean parameter.","solution":"def insertion_sort(arr, descending=False): Sorts an array of integers using the insertion sort algorithm. :param arr: list of integers to be sorted :param descending: boolean indicating if sorting should be in descending order :return: sorted list of integers for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are greater (or lesser if descending is True) # than key, to one position ahead of their current position while j >= 0 and (arr[j] > key if not descending else arr[j] < key): arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a Python function that can determine if a given string is a pangram (contains every letter of the alphabet) and also ignores case sensitivity and non-letter characters. Additionally, provide a piece of erroneous code as an example of how not to write this function.","solution":"import string def is_pangram(s): Determines if the given string is a pangram (contains every letter of the alphabet). Case insensitive and ignores non-letter characters. Parameters: s (str): The input string to check. Returns: bool: True if the string is a pangram, False otherwise. s = s.lower() alphabet_set = set(string.ascii_lowercase) for char in s: if char in alphabet_set: alphabet_set.remove(char) return len(alphabet_set) == 0 # Example of erroneous code: def erroneous_is_pangram(s): This is an example of how not to write the is_pangram function. for letter in string.ascii_lowercase: if letter not in s.lower(): return False return True"},{"question":"Create a command-line calculator program using Python that accepts two numbers as input and performs basic arithmetic operations (addition, subtraction, multiplication, division). The program should handle the case where the user enters an invalid input, such as a non-numeric value or a division by zero. Additionally, the program should allow the user to continue performing operations without exiting the program until they choose to exit manually.","solution":"def add(a, b): return a + b def subtract(a, b): return a - b def multiply(a, b): return a * b def divide(a, b): if b == 0: return \\"Error: Division by zero\\" return a / b def calculator(): while True: try: print(\\"Enter 'exit' to quit\\") num1 = input(\\"Enter first number: \\") if num1.lower() == 'exit': break num1 = float(num1) num2 = input(\\"Enter second number: \\") if num2.lower() == 'exit': break num2 = float(num2) operation = input(\\"Enter operation (+, -, *, /): \\") if operation == '+': result = add(num1, num2) elif operation == '-': result = subtract(num1, num2) elif operation == '*': result = multiply(num1, num2) elif operation == '/': result = divide(num1, num2) else: result = \\"Error: Invalid operation\\" print(f\\"Result: {result}n\\") except ValueError: print(\\"Error: Invalid inputn\\")"},{"question":"Write a Python program to simulate a biased coin toss. The bias is determined by a probability p of landing on heads (0 <= p <= 1). If p is not provided, the coin should be fair (p = 0.5). The program should provide an option to run the simulation for a specified number of trials and output the number and proportion of times the coin lands on heads.","solution":"import random def biased_coin_toss(p=0.5): Simulates a single biased coin toss. Returns 'H' for heads or 'T' for tails based on the bias p. return 'H' if random.random() < p else 'T' def run_simulation(trials, p=0.5): Runs a biased coin toss simulation for a specified number of trials. Returns a tuple with the number and proportion of heads obtained. heads_count = sum(1 for _ in range(trials) if biased_coin_toss(p) == 'H') return heads_count, heads_count / trials if trials > 0 else 0"},{"question":"I'm trying to create a Python program that can calculate the sum of all positive integers up to a given number. How can I achieve this?","solution":"def sum_of_positive_integers(n): Returns the sum of all positive integers up to n. if n < 1: return 0 return n * (n + 1) / 2"},{"question":"Write a Python program that takes two strings as input and finds out if the second string is a subsequence of the first string or not.","solution":"def is_subsequence(s1, s2): Check if s2 is a subsequence of s1. Args: s1 (str): The main string. s2 (str): The string to check as a subsequence. Returns: bool: True if s2 is a subsequence of s1, False otherwise. iter_s1 = iter(s1) return all(char in iter_s1 for char in s2)"},{"question":"Create a program in python that sorts a given list of integers in descending order, without using any built-in sorting functions or methods. Additionally, the program should handle cases where the list contains duplicate integers and should remove any duplicates before sorting the list.","solution":"def sort_descending_remove_duplicates(lst): Sort a list in descending order and remove duplicates. Parameters: lst (list): A list of integers Returns: list: A new sorted list without duplicates unique_lst = list(set(lst)) # Remove duplicates by converting to a set and back to a list # Implementing bubble sort to sort list in descending order n = len(unique_lst) for i in range(n): for j in range(0, n-i-1): if unique_lst[j] < unique_lst[j+1]: unique_lst[j], unique_lst[j+1] = unique_lst[j+1], unique_lst[j] return unique_lst"},{"question":"Consider a company with a hierarchical system of management where each supervisor can manage up to 5 teams. Each team consists of 10 members. Write a Python program to create a dictionary where the keys represent supervisors and the values are dictionaries with team numbers as keys and a list of team members as values.","solution":"def create_hierarchy(supervisors): Creates a hierarchical dictionary representing the company management structure. Args: supervisors (list): A list of supervisor names. Returns: dict: A dictionary with supervisors as keys and a dictionary of teams as values. hierarchy = {} team_count = 5 members_per_team = 10 for supervisor in supervisors: hierarchy[supervisor] = {} for team_num in range(1, team_count + 1): hierarchy[supervisor][team_num] = [f'Member{member}' for member in range(1, members_per_team + 1)] return hierarchy"},{"question":"Write a Python script to find the sum of the ASCII values of all unique uppercase characters in a given string.","solution":"def sum_of_unique_uppercase_ascii(s): Returns the sum of the ASCII values of all unique uppercase characters in the given string. Parameters: s (str): The input string. Returns: int: The sum of ASCII values of unique uppercase characters. unique_uppercase_chars = set(c for c in s if c.isupper()) return sum(ord(c) for c in unique_uppercase_chars)"},{"question":"Write a code to calculate the Hamming distance between two binary strings of equal lengths.","solution":"def hamming_distance(bin_str1, bin_str2): Calculate the Hamming distance between two binary strings of equal length. Parameters: bin_str1 (str): The first binary string. bin_str2 (str): The second binary string. Returns: int: The Hamming distance between the two binary strings. if len(bin_str1) != len(bin_str2): raise ValueError(\\"Binary strings must be of equal length\\") distance = 0 for b1, b2 in zip(bin_str1, bin_str2): if b1 != b2: distance += 1 return distance"},{"question":"Write a Python program that calculates the sum, difference, product, and quotient of two numbers provided by the user. Handle any division by zero error by displaying a custom error message. The program should ask the user for input until they choose to exit.","solution":"def calculate_operations(a, b): Calculates the sum, difference, product, and quotient of two numbers. Handles division by zero by returning a custom error message for the quotient. results = {} results['sum'] = a + b results['difference'] = a - b results['product'] = a * b try: results['quotient'] = a / b except ZeroDivisionError: results['quotient'] = \\"Error: Division by zero\\" return results"},{"question":"Given three arrays of integers, combine them into a single array while removing any duplicates. The resulting array should be sorted in ascending order. Additionally, implement the solution in such a way that it has a time complexity of O(nlogn) or better.","solution":"def combine_and_sort_unique_arrays(arr1, arr2, arr3): Combines three arrays into a single array, removes any duplicates, and returns the array sorted in ascending order. Parameters: arr1 (list): First list of integers. arr2 (list): Second list of integers. arr3 (list): Third list of integers. Returns: list: A sorted list of unique integers in ascending order. combined_set = set(arr1).union(arr2, arr3) sorted_unique_list = sorted(combined_set) return sorted_unique_list"},{"question":"Create a python dictionary of three elements 'name', 'age' and 'profesion' and assing respective values. Add a fourth key 'skills' whose value will be a list containing at least three skills of your choice. Additionally, create a function to update any of the dictionary elements. The function should take as parameters the dictionary and the key of the item to be updated, and the new value.","solution":"def create_person_dictionary(): Create a dictionary with given keys and their respective values. person = { 'name': 'John Doe', 'age': 30, 'profession': 'Software Engineer', 'skills': ['Python', 'JavaScript', 'SQL'] } return person def update_dictionary_element(dictionary, key, new_value): Update the value of a given key in the dictionary. Parameters: dictionary (dict): The dictionary to update. key (str): The key of the element to be updated. new_value: The new value to be assigned to the key. Returns: dict: The updated dictionary. if key in dictionary: dictionary[key] = new_value else: raise KeyError(\\"Key not found in the dictionary\\") return dictionary"},{"question":"Write a function to calculate the parity of a given binary number using Python. The function should not use any built-in parity calculation functions or libraries, and should only use bitwise operations. The time complexity of the function should be O(log n), where n is the number of bits in the given binary number.","solution":"def calculate_parity(x): Calculates the parity of a given binary number using bitwise operations. Parity is 1 if the number of 1s in the binary representation of the number is odd; otherwise, it's 0. Args: x (int): The input integer whose parity is to be calculated. Returns: int: The parity of the input integer (0 or 1). result = 0 while x: result ^= x & 1 x >>= 1 return result"},{"question":"Given a list of lists in Python where each sublist represents a set of items, write a function that returns the intersection of all these sublists. For instance, given \`[[1,2,3,4,5], [5,6,7,8,9], [5,10]]\`, the function should return \`[5]\` as it is the only common item across all sublists.","solution":"def intersection_of_sublists(lists): Returns the intersection of all sublists in the given list of lists. Parameters: lists (list of lists): The input list of lists. Returns: list: A list containing the common elements across all sublists. if not lists: return [] # Initialize the set with the elements of the first sublist common_elements = set(lists[0]) # Iterate through the remaining sublists and find intersection for sublist in lists[1:]: common_elements.intersection_update(sublist) return list(common_elements)"},{"question":"Write a code that prints the absolute difference between two given numbers.","solution":"def absolute_difference(a, b): Returns the absolute difference between two given numbers. return abs(a - b)"},{"question":"Write a Python function that takes in two lists of dictionaries. The first list represents a group of people, where each dictionary contains the person's name and age. The second list represents a group of addresses, where each dictionary contains the person's name and their address. The function should return a new list of dictionaries, where each dictionary contains the person's name, age, and address. If a person does not have an address, the address field in the dictionary should be set to None.","solution":"def merge_people_and_addresses(people, addresses): Merges two lists of dictionaries, one with people's names and ages, and one with people's names and addresses. Returns a new list of dictionaries containing name, age, and address. If a person does not have an address, the address field should be set to None. # Create a dictionary for quick lookup of addresses by name address_dict = {address['name']: address['address'] for address in addresses} # Create the list with merged data merged_list = [] for person in people: name = person['name'] age = person['age'] address = address_dict.get(name, None) merged_list.append({'name': name, 'age': age, 'address': address}) return merged_list"},{"question":"Given a list of numbers, write a program to find the maximum subarray sum using Kadane's algorithm.","solution":"def max_subarray_sum(nums): Finds the maximum subarray sum using Kadane's algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function that takes a number as an argument. If the number is odd, return the number multiplied by 3. If it's even, return the original number. To make the task more challenging, there is a piece of erroneous code provided below. Find the error, fix it, and then write your own code.","solution":"def process_number(n): Returns n multiplied by 3 if n is odd, otherwise returns n. if n % 2 != 0: # Check if the number is odd return n * 3 return n"},{"question":"Design a Python function, employing recursion as your solution strategy, to compute the factorial of a given number. Moreover, craft an error handling mechanism for the scenario where the input is not a non-negative integer.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. Includes error handling for invalid input. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a function that takes two strings and determines if the first string is one character away from the second string. The function should handle case sensitivity, whitespace, and punctuation. Additionally, the function should return False if the two strings have a difference in length greater than 1. The function should have a time complexity of O(n), where n is the length of the longer string.","solution":"def is_one_char_away(s1, s2): Determines if s1 is one character away from s2. One character away means you can insert, remove, or replace exactly one character in s1 to make it equal to s2. len_s1, len_s2 = len(s1), len(s2) if abs(len_s1 - len_s2) > 1: return False if len_s1 > len_s2: s1, s2 = s2, s1 len_s1, len_s2 = len_s2, len_s1 i, j, count_diff = 0, 0, 0 while i < len_s1 and j < len_s2: if s1[i] != s2[j]: if count_diff == 1: return False count_diff += 1 if len_s1 == len_s2: i += 1 else: i += 1 j += 1 if i < len_s1 or j < len_s2: count_diff += 1 return count_diff == 1"},{"question":"Design a radix sort algorithm for an array of 16-bit unsigned integers. Additionally, adapt the algorithm to handle sorting of integers in varying sizes (from 16 bit up to 32 bit). Consider time and space complexity in your solution for optimal performance.","solution":"def counting_sort(arr, exp): A function to do counting sort of arr[] according to the digit represented by exp. Here exp is 10^i where i is the current digit number n = len(arr) # The output array elements that will have sorted arr output = [0] * n # Initialize count array as 0 count = [0] * 10 # Store count of occurrences in count[] for i in range(n): index = arr[i] // exp count[index % 10] += 1 # Change count[i] so that count[i] now contains the actual # position of this digit in output[] for i in range(1, 10): count[i] += count[i - 1] # Build the output array i = n - 1 while i >= 0: index = arr[i] // exp output[count[index % 10] - 1] = arr[i] count[index % 10] -= 1 i -= 1 # Copy the output array to arr[], so that arr now # contains sorted numbers according to current digit for i in range(n): arr[i] = output[i] def radix_sort(arr): The main function to that sorts arr[] of size n using Radix Sort # Find the maximum number to know the number of digits max1 = max(arr) # Do counting sort for every digit. Note that instead # of passing digit number, exp is passed. exp is 10^i # where i is current digit number exp = 1 while max1 // exp > 0: counting_sort(arr, exp) exp *= 10"},{"question":"You are given a set of lists in Python, each with an unknown number of elements. Write a function to remove all duplicate elements from each list, and return the modification status along with the updated list and the number of elements removed for each list.","solution":"def remove_duplicates_and_report(lists): Removes duplicates from each list inside the lists, returns a tuple where: - first element is a boolean indicating if any list was modified - second element is the updated list of lists - third element is a list of counts of elements removed from each original list Parameters: - lists: List[List[Any]], a list of lists containing elements Returns: - Tuple[bool, List[List[Any]], List[int]] any_modified = False updated_lists = [] removed_counts = [] for lst in lists: original_length = len(lst) unique_lst = list(dict.fromkeys(lst)) modified = original_length != len(unique_lst) any_modified = any_modified or modified updated_lists.append(unique_lst) removed_counts.append(original_length - len(unique_lst)) return any_modified, updated_lists, removed_counts"},{"question":"Write a function in Python that takes a list of strings as input and returns a list with only the strings that have more than 3 vowels.","solution":"def has_more_than_three_vowels(s): Returns True if the string s has more than 3 vowels, otherwise False. vowels = set(\\"aeiouAEIOU\\") count = sum(1 for char in s if char in vowels) return count > 3 def filter_strings_with_more_than_three_vowels(strings): Takes a list of strings and returns a list of strings with more than 3 vowels. return [s for s in strings if has_more_than_three_vowels(s)]"},{"question":"Write a script in Python which takes a directory path as input and prints all files inside that directory and its subdirectories.","solution":"import os def list_files_in_directory(directory_path): Recursively lists all files in a given directory and its subdirectories. :param directory_path: Path to the directory for root, dirs, files in os.walk(directory_path): for file in files: print(os.path.join(root, file))"},{"question":"Write a program that reads a binary file and encrypts its content using an XOR cipher with a user-provided key. The program will then write the encrypted content to another binary file. Additionally, implement a function to decrypt the file using the same key.","solution":"def xor_cipher(data, key): Encrypts or decrypts the data using XOR cipher with the provided key. key_byte = key.to_bytes(1, 'little') return bytes([b ^ key_byte[0] for b in data]) def encrypt_file(input_filename, output_filename, key): Encrypts the content of the input binary file using XOR cipher with the provided key and writes the encrypted content to the output binary file. with open(input_filename, 'rb') as file: data = file.read() encrypted_data = xor_cipher(data, key) with open(output_filename, 'wb') as file: file.write(encrypted_data) def decrypt_file(input_filename, output_filename, key): Decrypts the content of the input binary file using XOR cipher with the provided key and writes the decrypted content to the output binary file. with open(input_filename, 'rb') as file: data = file.read() decrypted_data = xor_cipher(data, key) with open(output_filename, 'wb') as file: file.write(decrypted_data)"},{"question":"Create a program that generates a random number between 1 and 100 and allows the user to guess it. The program should provide feedback to the user if their guess is too high, too low, or correct. The program should also limit the number of guesses to 10 and display the number of guesses made by the user.","solution":"import random class GuessNumberGame: def __init__(self): self.number = random.randint(1, 100) self.guesses = 0 self.max_guesses = 10 def guess(self, user_guess): Handles a user guess, returning a tuple with feedback and remaining guesses. if self.guesses >= self.max_guesses: return \\"Game over! You've reached the maximum number of guesses.\\", 0 self.guesses += 1 if user_guess < self.number: return \\"Too low!\\", self.max_guesses - self.guesses elif user_guess > self.number: return \\"Too high!\\", self.max_guesses - self.guesses else: return f\\"Correct! You guessed the number {self.number} in {self.guesses} tries.\\", self.max_guesses - self.guesses"},{"question":"Write a Python script that converts the temperature from degrees Celsius to degrees Fahrenheit and vice versa based on the user's input. The script should handle invalid inputs gracefully.","solution":"def celsius_to_fahrenheit(celsius): Converts Celsius to Fahrenheit. try: celsius = float(celsius) return (celsius * 9/5) + 32 except ValueError: return \\"Invalid input\\" def fahrenheit_to_celsius(fahrenheit): Converts Fahrenheit to Celsius. try: fahrenheit = float(fahrenheit) return (fahrenheit - 32) * 5/9 except ValueError: return \\"Invalid input\\""},{"question":"Design a program that can identify if the given number is a narcissistic number or not. Additionally, the program should be able to handle multiple inputs at once and return the results in the order of input. The program should also be able to handle erroneous inputs and return an appropriate error message.","solution":"def is_narcissistic_number(number): Determines if a number is a narcissistic number. A narcissistic number is a number that is the sum of its own digits each raised to the power of the number of digits. if not isinstance(number, int) or number < 0: return f\\"Invalid input: {number}\\" digits = [int(d) for d in str(number)] power = len(digits) narcissistic_sum = sum(d ** power for d in digits) return number == narcissistic_sum def identify_narcissistic_numbers(numbers): Handles multiple inputs and returns a list of results. Each result is True if the corresponding number is a narcissistic number, False if it is not, or an error message for invalid inputs. results = [] for number in numbers: result = is_narcissistic_number(number) results.append(result) return results"},{"question":"Write a Python program to print the fibonacci sequence upto n terms using while loop.","solution":"def fibonacci_sequence(n): Generate the Fibonacci sequence up to n terms. Parameters: n (int): The number of terms in the Fibonacci sequence to generate. Returns: list: The Fibonacci sequence up to n terms. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] count = 2 while count < n: next_term = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_term) count += 1 return fib_sequence"},{"question":"Write a function that takes a list of integers as input and returns a new list with only the prime numbers from the input list, in the same order. The function should be implemented using list comprehension.","solution":"def is_prime(n): Checks if a number is a prime number. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def primes_from_list(numbers): Returns a list of prime numbers from the input list using list comprehension. return [num for num in numbers if is_prime(num)]"},{"question":"Write a Python program that uses a LIFO (last-in, first-out) queue (also called a stack) to reverse the order of a sentence entered by the user.","solution":"def reverse_sentence(sentence): Reverses the order of a sentence using a stack. :param sentence: str : The sentence to reverse :return: str : The reversed sentence words = sentence.split() stack = [] # Push all words to the stack for word in words: stack.append(word) # Pop all words from the stack to get them in reverse order reversed_sentence = [] while stack: reversed_sentence.append(stack.pop()) return ' '.join(reversed_sentence)"},{"question":"Can you write a python function 'odds' that returns all odd numbers in a given list? If no odd number is present, the function should return an empty list.","solution":"def odds(numbers): Returns a list of all the odd numbers in the given list of numbers. return [number for number in numbers if number % 2 != 0]"},{"question":"A password is considered strong if it contains at least 12 characters, one uppercase letter, one lowercase letter, and one digit. Write a function in Python that takes a string as input and returns True if it is a strong password and False otherwise. Use a regular expression to solve this problem.","solution":"import re def is_strong_password(password): Checks if the password is strong. A strong password contains at least 12 characters, one uppercase letter, one lowercase letter, and one digit. if len(password) < 12: return False if not re.search(r'[A-Z]', password): return False if not re.search(r'[a-z]', password): return False if not re.search(r'd', password): return False return True"},{"question":"Design an algorithm that encrypts a string using the XOR cipher with a randomly generated key of a specified length, and implement a function to decrypt the encrypted string. The key should only consist of uppercase alphabetical characters (A-Z).","solution":"import random import string def generate_key(length): Generates a random key of specified length using uppercase alphabetical characters (A-Z). return ''.join(random.choice(string.ascii_uppercase) for _ in range(length)) def xor_encrypt(plaintext, key): Encrypts the plaintext using the XOR cipher with the given key. encrypted = ''.join(chr(ord(p) ^ ord(k)) for p, k in zip(plaintext, key)) return encrypted def xor_decrypt(ciphertext, key): Decrypts the ciphertext using the XOR cipher with the given key. decrypted = ''.join(chr(ord(c) ^ ord(k)) for c, k in zip(ciphertext, key)) return decrypted"},{"question":"I have an array that I want to convert into a max heap. How can I achieve this using Python?","solution":"import heapq def convert_to_max_heap(lst): Converts an array into a max heap. # Negate the elements to use heapq (which provides a min heap) max_heap = [-elem for elem in lst] heapq.heapify(max_heap) # Negate back the elements to restore original values for a max heap property return [-elem for elem in max_heap]"},{"question":"Given two matrices A and B, write a Python function to compute the matrix sum of A and B.","solution":"def matrix_sum(A, B): Returns the sum of two matrices A and B. Matrices A and B must have the same dimensions. if len(A) != len(B) or len(A[0]) != len(B[0]): raise ValueError(\\"Matrices A and B must have the same dimensions\\") result = [] for i in range(len(A)): row = [] for j in range(len(A[0])): row.append(A[i][j] + B[i][j]) result.append(row) return result"},{"question":"Write a code to find the maximum value in a numeric array using recursion. The array may contain negative numbers.","solution":"def find_max_recursive(arr): Returns the maximum value in an array using recursion. # Base case: if the array has only one element, return that element if len(arr) == 1: return arr[0] # Recursively find the maximum in the rest of the array max_of_rest = find_max_recursive(arr[1:]) # Return the maximum between the first element and the maximum of the rest return max(arr[0], max_of_rest)"},{"question":"Write a Python function that reverses a given string using recursion instead of the built-in reverse method. Additionally, include an erroneous code snippet that some might use in an attempt to solve the problem. Explain why this code is incorrect and provide the correct recursive function.","solution":"def reverse_string_recursive(s): Recursively reverses a given string. if len(s) == 0: return s else: return reverse_string_recursive(s[1:]) + s[0] # Erroneous code that some might use incorrectly: def reverse_string_incorrect(s): reversed_string = \\"\\" for i in range(len(s)): reversed_string = s[i] + reversed_string return reversed_string # Explanation of erroneous code: # The \`reverse_string_incorrect\` function is not recursive; it uses a loop to # build the reversed string by concatenating each character from the original # string to the beginning of \`reversed_string\`. This approach correctly reverses # the string but does not use recursion, which is the requirement of the task."},{"question":"Can you generate a code solution in Python for performing a linear search on a given array?","solution":"def linear_search(arr, target): Performs a linear search on the provided array for the target value. Args: arr: List[int] - List of integers where the search is performed. target: int - The value to search for in the array. Returns: int - The index of the target if found, otherwise -1. for index, value in enumerate(arr): if value == target: return index return -1"},{"question":"I need help creating an algorithm for a Breadth-First Search (BFS) in a binary tree. Can you provide a solution using Python?","solution":"from collections import deque class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def bfs(root): Perform a Breadth-First Search (BFS) on a binary tree and return the values of the nodes in BFS order. if root is None: return [] result = [] queue = deque([root]) while queue: node = queue.popleft() result.append(node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result"},{"question":"Create a Python function that yields an array of prime numbers up to a specific upper limit value provided as an input parameter. Additionally, implement your function so that it uses a prime number sieve algorithm (such as the Sieve of Eratosthenes) for an efficient solution to the problem. Furthermore, include functionality that allows the function to either return the full list of prime numbers or the count of prime numbers up to the given limit, based on an additional boolean input parameter \\"return_primes\\".","solution":"def sieve_of_eratosthenes(limit, return_primes=True): Generates an array of prime numbers up to a specified limit using the Sieve of Eratosthenes algorithm. :param limit: Integer, the upper limit up to which to find prime numbers. :param return_primes: Boolean, if True the function returns the list of primes, otherwise it returns the count of primes. :return: List of prime numbers up to the limit if return_primes is True, otherwise the count of primes. if limit < 2: return [] if return_primes else 0 sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiples in range(start*start, limit + 1, start): sieve[multiples] = False primes = [num for num, is_prime in enumerate(sieve) if is_prime] if return_primes: return primes else: return len(primes)"},{"question":"How can I create a Python function that returns a random synonym for the word \\"amazing\\" from a given list of synonyms every time it's called?","solution":"import random def get_random_synonym(): Returns a random synonym for the word 'amazing'. synonyms = [\\"incredible\\", \\"fantastic\\", \\"marvelous\\", \\"wonderful\\", \\"astonishing\\", \\"astounding\\"] return random.choice(synonyms)"},{"question":"Write the code for a function that takes two parameters n and m and returns the sum of the first n odd integers starting with m. Additionally, the function should handle cases where m is not an odd integer, and in such cases, it should return the sum of the first n odd integers that are greater than m.","solution":"def sum_first_n_odd_integers(n, m): Returns the sum of the first n odd integers starting with m. If m is not an odd integer, it starts with the first odd integer greater than m. if m % 2 == 0: m += 1 sum_odd = 0 for i in range(n): sum_odd += m m += 2 return sum_odd"},{"question":"def tree(root, left, right): Returns a new tree with root value as root and left and right branches as the given left and right respectively.","solution":"class TreeNode: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right def tree(root, left, right): Returns a new tree with root value as root and left and right branches as the given left and right respectively. return TreeNode(root, left, right)"},{"question":"Given a list of integers, write a Python program to create a new list that contains the square of every element in the original list. Then, from this squared list, remove all elements that are divisible by 3.","solution":"def square_and_filter(lst): Takes a list of integers, returns a new list containing squares of the original elements with elements divisible by 3 removed. Parameters: lst (list): List of integers Returns: list: List of integers (squares with elements divisible by 3 removed) squared_lst = [x**2 for x in lst] filtered_lst = [x for x in squared_lst if x % 3 != 0] return filtered_lst"},{"question":"Given a list of integers, create a function in Python that finds all possible permutations of the list. Additionally, implement a mechanism to filter these permutations such that only those which meet a specific condition are returned.","solution":"from itertools import permutations def find_permutations(nums, condition=None): Finds all permutations of a list of integers and filters them based on a specific condition function. Args: nums (list): A list of integers. condition (function, optional): A function that takes a permutation tuple and returns True if it meets the condition, False otherwise. Returns: list: A list of permutations that meet the condition. all_perms = list(permutations(nums)) if condition is None: return all_perms return [perm for perm in all_perms if condition(perm)]"},{"question":"Write a Python function that takes a list of integers as input and uses the map function to square each element. Then, filter out the numbers that are divisible by 3 and sum them up. Print the final sum.","solution":"def sum_of_squares_divisible_by_three(numbers): Takes a list of integers, squares each element, filters out numbers that are divisible by 3, and returns the sum of those numbers. squared_numbers = map(lambda x: x**2, numbers) filtered_numbers = filter(lambda x: x % 3 == 0, squared_numbers) return sum(filtered_numbers)"},{"question":"Write a function that takes an array of integers and a target sum as input, and returns a subset of the integers that adds up to the target sum. If there are multiple subsets that satisfy this condition, return any one of them.","solution":"def find_subset_with_sum(nums, target): Returns a subset of the integers that adds up to the target sum. If multiple subsets satisfy this condition, return any one of them. def dfs(index, target, path): if target == 0: return path if target < 0 or index == len(nums): return None # include current number and move to next index with_current = dfs(index + 1, target - nums[index], path + [nums[index]]) if with_current is not None: return with_current # skip current number and move to next index return dfs(index + 1, target, path) result = dfs(0, target, []) return result if result is not None else []"},{"question":"Given a consecutive integer check function, write a code that identifies the largest and smallest integers in the list. Then, modify the code to return the sum of all the integers in the list. Lastly, create a new consecutive integer check function that can handle both positive and negative integers.","solution":"def identify_largest_smallest_sum(numbers): Returns the smallest, largest, and sum of all integers in the list \`numbers\`. if not numbers: return None, None, 0 smallest = min(numbers) largest = max(numbers) total_sum = sum(numbers) return smallest, largest, total_sum"},{"question":"Design an algorithm in Python that takes in two sorted lists of numbers and merges them together into one sorted list.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. :param list1: First sorted list. :param list2: Second sorted list. :return: A new sorted list containing all elements from list1 and list2. merged_list = [] i = j = 0 # Traverse through both lists and append the smallest element to merged_list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append the remaining elements from list1, if any while i < len(list1): merged_list.append(list1[i]) i += 1 # Append the remaining elements from list2, if any while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a recursive function to find the maximum depth of a nested dictionary. The dictionary can contain other dictionaries as values.","solution":"def max_depth(d): Returns the maximum depth of a nested dictionary. Parameters: d (dict): A dictionary that may contain nested dictionaries. Returns: int: Maximum depth of the nested dictionary. if not isinstance(d, dict) or not d: return 0 return 1 + max(max_depth(value) for value in d.values())"},{"question":"Use the shell sort algorithm to sort the following list and determine the number of comparisons needed: [49, 33, 54, 22, 9, 18, 69, 1, 71]. Implement the code yourself rather than using a built-in or library function, and demonstrate understanding of the dynamics of the shell sort algorithm. In addition, analyze and explain the time complexity of your solution.","solution":"def shell_sort(arr): Perform shell sort on the input list and return the sorted list and the number of comparisons. n = len(arr) gap = n // 2 comparisons = 0 while gap > 0: for i in range(gap, n): temp = arr[i] j = i while j >= gap and arr[j - gap] > temp: arr[j] = arr[j - gap] j -= gap comparisons += 1 arr[j] = temp comparisons += 1 gap //= 2 return arr, comparisons # Sorting the given list and determining the number of comparisons sorted_list, num_comparisons = shell_sort([49, 33, 54, 22, 9, 18, 69, 1, 71]) (sorted_list, num_comparisons)"},{"question":"Using the Python programming language, create a function that takes in a positive integer as input and returns the result of dividing the input number by 26. The function should also check if the input is a multiple of 13 and return an error message if so. Test the function with the input number 732 and print the result to the console. Additionally, provide a written explanation of the mathematical and programming concepts involved in dividing a number by another number and checking for multiples of a given number.","solution":"def divide_and_check(n): Returns the result of dividing the input number by 26. If the input number is a multiple of 13, returns an error message. if n % 13 == 0: return \\"Input number is a multiple of 13, cannot proceed.\\" return n / 26 # Testing the function with 732 and print the result print(divide_and_check(732))"},{"question":"Design a Python function capable of dissecting an array into two subsidiary arrays of matching size. For instance, applying it to the array arr = [1, 2, 3, 4, 5, 6] should yield this outcome.","solution":"def split_array(arr): Splits the given array into two subarrays of equal length. If the original array has an odd number of elements, the extra element goes into the second subarray. Parameters: arr (list): The original array to be split. Returns: tuple: A tuple containing the two subarrays. mid_index = (len(arr) + 1) // 2 # Ceil the mid index if the length is odd subarray1 = arr[:mid_index] subarray2 = arr[mid_index:] return (subarray1, subarray2)"},{"question":"In Python, write a function that takes a list as the input, and prints the elements of the list in reverse order. However, you are not allowed to use the reverse() function, the slicing syntax, or any built-in function or method that directly reverses a list.","solution":"def print_reverse_list(input_list): Prints the elements of the list in reverse order. This function does not use reverse(), slicing or any built-in function that reverses a list. for i in range(len(input_list) - 1, -1, -1): print(input_list[i])"},{"question":"Given an integer array nums, write a Python function that moves all 0's to the end of it while maintaining the relative order of the non-zero elements. Avoid using extra space and complete it in O(n) time complexity.","solution":"def move_zeroes(nums): Move all zeroes in the input list nums to the end while maintaining the relative order of non-zero elements. This is done in-place with O(n) time complexity. :param nums: List of integers non_zero_index = 0 for i in range(len(nums)): if nums[i] != 0: nums[non_zero_index], nums[i] = nums[i], nums[non_zero_index] non_zero_index += 1 return nums"},{"question":"Modify the code below to create a new function called \\"addSquares()\\" that adds the squares of two numbers and returns the result.","solution":"def addSquares(a, b): Returns the sum of the squares of a and b. return a ** 2 + b ** 2"},{"question":"Given a function in Python that converts meters to kilometers. However, the code contains some errors. Your job is to identify and correct this code and then use it to calculate and return the equivalent kilometers for 2,000 meters.","solution":"def meters_to_kilometers(meters): Converts meters to kilometers. return meters / 1000 # Calculating the equivalent kilometers for 2,000 meters result = meters_to_kilometers(2000)"},{"question":"Plot the first 10 numbers of the Fibonacci sequence using Matplotlib in Python.","solution":"import matplotlib.pyplot as plt def fibonacci(n): Generates the first n numbers in the Fibonacci sequence. fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[:n] def plot_fibonacci_sequence(n): Plots the first n numbers of the Fibonacci sequence using Matplotlib. fib_sequence = fibonacci(n) plt.figure(figsize=(10, 5)) plt.plot(fib_sequence, marker='o') plt.title(f'First {n} Numbers of the Fibonacci Sequence') plt.xlabel('Index') plt.ylabel('Value') plt.grid(True) plt.show()"},{"question":"Devise a Python coding challenge that calls for a function named \`find_palindromes\`. This function should be crafted to identify all palindromic numbers within a given range, inclusively. It should accept a tuple with two integers defining the range as input, and return a list containing all the palindromic numbers found within that range. For clarity, a palindromic number is one that maintains the same sequence of digits when read backward as it does when read forward. To ensure the function's reliability, include a verification section with provided data points.","solution":"def find_palindromes(range_tuple): Returns a list of palindromic numbers within the given range (inclusive). :param range_tuple: A tuple containing two integers (start and end of range) :return: A list of palindromic numbers within the range start, end = range_tuple palindromes = [] for number in range(start, end + 1): if str(number) == str(number)[::-1]: palindromes.append(number) return palindromes"},{"question":"Given an erroneous piece of code below, identify the bugs and fix them to create a 3x3 Identity Matrix. Moreover, enhance the code by making it functional for generating an Identity Matrix of 'n' dimension, where 'n' can be any positive integer.","solution":"def identity_matrix(n): Returns an n x n identity matrix. # Initialize an n x n matrix filled with zeros matrix = [[0]*n for _ in range(n)] # Fill the diagonal with 1s for i in range(n): matrix[i][i] = 1 return matrix"},{"question":"Create a Python program to generate the Fibonacci series between 0 and N, where N is an integer input by the user. Additionally, determine the sum of even numbers and the average of all numbers in the generated series. Note that the sequence starts from 0 and 1.","solution":"def fibonacci_series(n): Generate the Fibonacci series up to n, calculate the sum of even numbers, and the average of the sequence. Args: n (int): The upper limit for the Fibonacci series. Returns: tuple: A tuple containing the Fibonacci series (list), sum of even numbers (int), and the average of all numbers (float). if n < 0: return [], 0, 0 fib_series = [] a, b = 0, 1 while a <= n: fib_series.append(a) a, b = b, a + b even_sum = sum(x for x in fib_series if x % 2 == 0) average = sum(fib_series) / len(fib_series) if fib_series else 0 return fib_series, even_sum, average"},{"question":"Develop a Python-based software module that produces a visually aesthetic representation of a given quantity of hours in terms of seconds, minutes and hours. Moreover, the module should also display the provided time in a more comprehensible format i.e., days, hours, minutes and seconds. Also, write a function that can convert the received hours into standard AM/PM format alongside the total minutes and seconds. Consider scenarios involving days as well when input hours exceed 24.","solution":"def convert_hours(hours): Converts given hours into days, hours, minutes, and seconds. total_seconds = hours * 3600 days = hours // 24 remainder_hours = hours % 24 minutes = (remainder_hours % 1) * 60 seconds = (minutes % 1) * 60 return { \\"days\\": int(days), \\"hours\\": int(remainder_hours), \\"minutes\\": int(minutes), \\"seconds\\": int(seconds) } def convert_am_pm_format(hours): Converts given hours into AM/PM format along with the total minutes and seconds. Includes \\"days\\" if hours exceed 24. days = hours // 24 remainder_hours = hours % 24 period = \\"AM\\" if remainder_hours < 12 else \\"PM\\" am_pm_hours = int(remainder_hours % 12 if remainder_hours % 12 != 0 else 12) minutes = (remainder_hours % 1) * 60 seconds = (minutes % 1) * 60 return { \\"days\\": int(days), \\"am_pm_time\\": f\\"{am_pm_hours:02}:{int(minutes):02}:{int(seconds):02} {period}\\", \\"total_minutes\\": int(hours * 60), \\"total_seconds\\": int(hours * 3600) }"},{"question":"Write a code in Python for comparing two strings without using a built-in function. However, you are not allowed to use any loops or recursion.","solution":"def compare_strings(s1, s2): Compares two strings lexicographically without using any built-in functions, loops, or recursion. Returns: -1 if s1 < s2 0 if s1 == s2 1 if s1 > s2 def compare_chars(c1, c2): return (ord(c1) > ord(c2)) - (ord(c1) < ord(c2)) def compare_strings_recursive(s1, s2, index): if index == len(s1) and index == len(s2): return 0 elif index == len(s1): return -1 elif index == len(s2): return 1 comparison = compare_chars(s1[index], s2[index]) if comparison != 0: return comparison return compare_strings_recursive(s1, s2, index + 1) return compare_strings_recursive(s1, s2, 0)"},{"question":"Create a function in Python that takes two lists as arguments and returns a dictionary with elements of the first list as keys and elements of the second list as values.","solution":"def lists_to_dict(keys, values): Takes two lists as arguments and returns a dictionary with elements of the first list as keys and elements of the second list as values. return dict(zip(keys, values))"},{"question":"Write a method in Python that not only verifies whether a given string is a pangram but also determines the frequency of each character of the English alphabet present in it. It should then return a dictionary with the character as the key and its frequency as the value. The function should ignore case sensitivity.","solution":"def pangram_and_frequency(s): Verify if a string s is a pangram and calculate the frequency of each alphabet character. :param s: Input string :return: A dictionary with each character as key and its frequency as value from collections import defaultdict import string # Normalize the input string to lower case s = s.lower() # Create a dictionary for letters frequency frequency = defaultdict(int) # Fill the dictionary with lower case alphabets frequency for char in s: if char in string.ascii_lowercase: frequency[char] += 1 # Check if the string is a pangram is_pangram = all(letter in frequency for letter in string.ascii_lowercase) return frequency, is_pangram"},{"question":"Write a Python program that prints the prime numbers between 2 and 1000, each on a separate line. Additionally, the program should only use a single loop and should not make use of the modulus operator (%) to check for divisibility.","solution":"def is_prime(n): Helper function to determine if a number n is prime using prime by trial division method without using modulus operator. if n < 2: return False for i in range(2, n): if n // i * i == n: return False return True def print_primes_2_to_1000(): Prints prime numbers between 2 and 1000 inclusive, each on a separate line. Uses a single loop and does not use the modulus operator. for num in range(2, 1001): if is_prime(num): print(num)"},{"question":"Write a method in Python to check if a string is a palindrome.","solution":"def is_palindrome(s): Returns True if the given string is a palindrome, False otherwise. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring case and non-alphanumeric characters. # Normalize the string: remove non-alphanumeric characters and convert to lowercase normalized_str = ''.join(char.lower() for char in s if char.isalnum()) # Compare the string to its reverse return normalized_str == normalized_str[::-1]"},{"question":"Create a recursive function to showcase the first n numbers in the Fibonacci sequence, ensuring the function is optimized for a large value of n. Additionally, implement a function to calculate the n-th Fibonacci number using Binet’s formula. Compare the performance of both functions using a time complexity analysis.","solution":"def fibonacci_recursive(n, computed={0: 0, 1: 1}): Returns the first n numbers in the Fibonacci sequence using a recursive approach. The function is optimized with memoization for large values of n. if n in computed: return computed[n] computed[n] = fibonacci_recursive(n-1, computed) + fibonacci_recursive(n-2, computed) return computed[n] def get_fibonacci_sequence(n): Returns the list of the first n numbers in the Fibonacci sequence. return [fibonacci_recursive(i) for i in range(n)] import math def fibonacci_binet(n): Returns the n-th Fibonacci number using Binet's formula. phi = (1 + math.sqrt(5)) / 2 psi = (1 - math.sqrt(5)) / 2 return int((phi**n - psi**n) / math.sqrt(5))"},{"question":"Given two strings, write a function to check if the second string is a substring of the first string. The function should return True if the second string is a substring of the first string, and False otherwise. The function should not use any built-in string search functions or regular expressions. The function should have a time complexity of O(n), where n is the length of the first string.","solution":"def is_substring(main_string, sub_string): Returns True if sub_string is a substring of main_string, False otherwise. def create_prefix_array(pattern): Creates the prefix array (failure function) used in KMP algorithm length = len(pattern) prefix_array = [0] * length j = 0 # length of previous longest prefix suffix i = 1 while i < length: if pattern[i] == pattern[j]: j += 1 prefix_array[i] = j i += 1 else: if j != 0: j = prefix_array[j - 1] else: prefix_array[i] = 0 i += 1 return prefix_array if not sub_string: return True n = len(main_string) m = len(sub_string) prefix_array = create_prefix_array(sub_string) i = 0 # index for main_string j = 0 # index for sub_string while i < n: if sub_string[j] == main_string[i]: i += 1 j += 1 if j == m: return True # found the match elif i < n and sub_string[j] != main_string[i]: if j != 0: j = prefix_array[j - 1] else: i += 1 return False"},{"question":"Automate the process of formatting and sending messages for a WhatsApp broadcast list using Python.","solution":"from typing import List, Dict def format_message(template: str, personalization: Dict[str, str]) -> str: Formats a message template with the provided personalization details. Args: template (str): The message template containing placeholders. personalization (Dict[str, str]): Dictionary containing the placeholder keys and their replacement values. Returns: str: The formatted message. formatted_message = template for placeholder, value in personalization.items(): formatted_message = formatted_message.replace(f\\"{{{{{placeholder}}}}}\\", value) return formatted_message def send_messages(contact_list: List[Dict[str, str]], template: str) -> List[str]: Formats and 'sends' each message using the given template and contact list. Args: contact_list (List[Dict[str, str]]): List of contacts with personalization details. template (str): The message template with placeholders. Returns: List[str]: List of formatted messages. messages = [] for contact in contact_list: formatted_message = format_message(template, contact) # Simulate sending the message messages.append(formatted_message) return messages"},{"question":"Create a program in Python that will generate and print a random password of length 8, consisting of uppercase letters, lowercase letters, and digits.","solution":"import random import string def generate_password(length=8): Generates a random password of given length consisting of uppercase letters, lowercase letters, and digits. characters = string.ascii_letters + string.digits password = ''.join(random.choice(characters) for _ in range(length)) return password"},{"question":"Finish the code for a function that checks if a whole number is in-between two other numbers (inclusive). The function should also handle cases where the first number is larger than the second number and the input numbers are not in sorted order. Additionally, the function should only use basic arithmetic operations (addition, subtraction, multiplication, division) and no conditional statements or loops. The function should return True if the first number is in-between the other two numbers (inclusive) and False otherwise.","solution":"def is_in_between(num, a, b): Checks if num is in the range [a, b] (inclusive). The order of a and b does not matter. return (num - a) * (num - b) <= 0"},{"question":"Construct a Python-based functional program that efficiently identifies the lowest numerical value found within a specific list of floating point numbers.","solution":"def find_lowest_value(numbers): Returns the lowest value in a list of floating point numbers. :param numbers: list of floating point numbers :return: the lowest number in the list if not numbers: return None # Return None if the list is empty return min(numbers)"},{"question":"Implement a function in Python that takes in a string and returns a dictionary with the frequency of each character in the string. The function should be case-sensitive, meaning that lowercase and uppercase characters should be considered different. Additionally, the function should ignore any special characters or punctuation marks and only consider alphanumeric characters. The string can have a maximum length of 1000 characters.","solution":"import re from collections import defaultdict def char_frequency(s): Returns a dictionary with the frequency of each alphanumeric character in the string. The function is case-sensitive and ignores special characters or punctuation marks. s = re.sub(r'[^a-zA-Z0-9]', '', s) # Remove non-alphanumeric characters frequency = defaultdict(int) for char in s: frequency[char] += 1 return dict(frequency)"},{"question":"Given a list of numbers, write a code to find the maximum, minimum, and the average of the numbers using a more efficient approach than simply iterating through the list multiple times. Also, include error handling for potential non-number inputs within the list.","solution":"def get_stats(numbers): Returns the maximum, minimum, and average of the given list of numbers. Non-number inputs are ignored. valid_numbers = [num for num in numbers if isinstance(num, (int, float))] if not valid_numbers: return None, None, None total_sum = valid_numbers[0] max_number = valid_numbers[0] min_number = valid_numbers[0] for number in valid_numbers[1:]: total_sum += number if number > max_number: max_number = number if number < min_number: min_number = number average = total_sum / len(valid_numbers) return max_number, min_number, average"},{"question":"Write a Python function that reverses an array without any import statement. The function should take an array as an input and return the reversed array. Additionally, implement this function using recursion. Example: input array: arr = [7, 5, 2, 6, 4, 3, 1]","solution":"def reverse_array(arr): Recursively reverses the array. :param arr: List of elements to be reversed :return: Reversed list of elements if len(arr) == 0: return [] else: return [arr[-1]] + reverse_array(arr[:-1])"},{"question":"Create a Python function to find the second smallest prime number in a given list of integers. The list will contain at least 100 elements and at most 10,000 elements. All elements in the list will be positive integers between 1 and 1,000,000. The function should return the second smallest prime number found in the list. If no prime number is found, the function should return -1. You should not use any built-in Python functions or libraries for prime number generation or checking.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def second_smallest_prime(numbers): Find the second smallest prime number in the given list. primes = [] for number in numbers: if is_prime(number): primes.append(number) if len(primes) < 2: return -1 primes.sort() # Sorting to find the smallest and second smallest primes return primes[1]"},{"question":"Write scripts to create a synthetic dataset for binary classification using the Python programming language. The dataset should contain 1000 samples with 10 features each. Additionally, implement a function to split the dataset into training and testing sets (80:20 ratio). Ensure that the split maintains the proportion of samples from each class.","solution":"import numpy as np from sklearn.model_selection import train_test_split def create_synthetic_dataset(n_samples=1000, n_features=10, random_state=42): Creates a synthetic dataset for binary classification. Parameters: n_samples : int Number of samples in the dataset. n_features : int Number of features in the dataset. random_state : int Random seed for reproducibility. Returns: X : np.ndarray Feature matrix. y : np.ndarray Target vector. np.random.seed(random_state) X = np.random.randn(n_samples, n_features) # Generate random features y = np.random.randint(0, 2, n_samples) # Generate random binary targets return X, y def split_dataset(X, y, test_size=0.2, random_state=42): Splits the dataset into training and testing sets with stratification. Parameters: X : np.ndarray Feature matrix. y : np.ndarray Target vector. test_size : float Proportion of the dataset to include in the test split. random_state : int Random seed for reproducibility. Returns: X_train, X_test, y_train, y_test : np.ndarray Training and testing sets for features and targets. X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=test_size, stratify=y, random_state=random_state ) return X_train, X_test, y_train, y_test"},{"question":"Develop a Python program to simulate a simple calculator that performs addition, subtraction, multiplication, and division.","solution":"def add(a, b): Returns the sum of a and b. return a + b def subtract(a, b): Returns the difference of a and b. return a - b def multiply(a, b): Returns the product of a and b. return a * b def divide(a, b): Returns the division of a by b. If b is zero, raises a ZeroDivisionError. if b == 0: raise ZeroDivisionError(\\"division by zero\\") return a / b"},{"question":"In the context of Python, consider the list of animals provided. Your task is to filter out and categorize these animals into two specific groups: those that are considered nocturnal and those that are not. Your output should consist of two lists: one for nocturnal animals and one for non-nocturnal animals.","solution":"def categorize_nocturnal_animals(animals): Categorizes animals into nocturnal and non-nocturnal based on a predefined list of nocturnal animals. Parameters: animals (list): List of animal names (strings). Returns: tuple: A tuple containing two lists - (nocturnal_animals, non_nocturnal_animals). nocturnal_animals_list = ['owl', 'bat', 'raccoon', 'opossum', 'skunk', 'hedgehog', 'leopard'] nocturnal_animals = [] non_nocturnal_animals = [] for animal in animals: if animal.lower() in nocturnal_animals_list: nocturnal_animals.append(animal) else: non_nocturnal_animals.append(animal) return (nocturnal_animals, non_nocturnal_animals)"},{"question":"Write a code to convert temperature from Celsius to Fahrenheit and vice versa. In addition, include a feature that allows the user to input the temperature and choose the conversion direction. You should also validate the user's input to ensure that they enter a valid temperature (i.e., not a string or a negative value for Fahrenheit). Finally, your code should be able to handle conversions for multiple temperatures at once and display the results in a tabular format.","solution":"def celsius_to_fahrenheit(celsius): Converts Celsius to Fahrenheit. return (celsius * 9/5) + 32 def fahrenheit_to_celsius(fahrenheit): Converts Fahrenheit to Celsius. return (fahrenheit - 32) * 5/9 def valid_temperature(temp, unit): Validates if the temperature is a number and if it's a non-negative value for Fahrenheit. try: temp = float(temp) except ValueError: return False, \\"Temperature must be a number.\\" if unit.lower() == 'f' and temp < 0: return False, \\"Fahrenheit temperature cannot be negative.\\" return True, \\"\\" def display_results_table(results): Displays the conversion results in a tabular format. print(f\\"{'Index':<10}{'Original Value':<20}{'Converted Value':<20}\\") print(\\"-\\" * 50) for index, (original, converted) in enumerate(results): print(f\\"{index:<10}{original:<20}{converted:<20}\\") def main(): temperatures = input(\\"Enter temperatures separated by commas: \\").split(',') direction = input(\\"Convert from (c) Celsius to Fahrenheit or (f) Fahrenheit to Celsius? \\").strip().lower() if direction not in ['c', 'f']: print(\\"Invalid conversion direction. Use 'c' for Celsius to Fahrenheit, 'f' for Fahrenheit to Celsius.\\") return results = [] for temp in temperatures: temp = temp.strip() is_valid, error_msg = valid_temperature(temp, direction) if not is_valid: print(f\\"Invalid temperature '{temp}': {error_msg}\\") continue temp = float(temp) if direction == 'c': converted_temp = celsius_to_fahrenheit(temp) results.append((f\\"{temp} °C\\", f\\"{converted_temp:.2f} °F\\")) else: # direction == 'f' converted_temp = fahrenheit_to_celsius(temp) results.append((f\\"{temp} °F\\", f\\"{converted_temp:.2f} °C\\")) display_results_table(results) if __name__ == \\"__main__\\": main()"},{"question":"Create a code that sums the first n Fibonacci numbers, where n is an integer input from the user. The code should also handle cases where n is less than or equal to 0.","solution":"def sum_fibonacci(n): Returns the sum of the first n Fibonacci numbers. If n is less than or equal to 0, returns 0. if n <= 0: return 0 fib = [0, 1] for i in range(2, n): fib.append(fib[-1] + fib[-2]) return sum(fib[:n])"},{"question":"Generate a three dimensional matrix of size 3 x 3 x 3 with all elements equal to 1, utilizing the numpy library. Proceed to implement a function that will randomly replace one-third of the elements with a value of either 2 or 3. Note that the decision to replace an element with a 2 or a 3 should be random and evenly distributed. Finally, make sure to verify the integrity of the function by calling it multiple times and printing out the resulted matrices.","solution":"import numpy as np def create_and_modify_matrix(): # Create a 3x3x3 matrix with all elements equal to 1 matrix = np.ones((3, 3, 3), dtype=int) # Flatten the matrix to make element selection easier flat_matrix = matrix.ravel() # Calculate the number of elements to replace num_elements = flat_matrix.size num_to_replace = num_elements // 3 # Randomly select indices to replace replace_indices = np.random.choice(num_elements, num_to_replace, replace=False) # Randomly choose between replacing with 2 or 3 replacements = np.random.choice([2, 3], num_to_replace) # Replace selected elements in the flattened matrix flat_matrix[replace_indices] = replacements # Reshape matrix back to 3x3x3 modified_matrix = flat_matrix.reshape(3, 3, 3) return modified_matrix"},{"question":"Create a python function that takes a string argument and counts the frequency of each character in the string. The function should then print the characters and their frequencies in descending order of frequency.","solution":"def count_char_frequencies(s): Takes a string s and returns a dictionary with the frequency of each character in the string. The dictionary is sorted in descending order of frequency. from collections import Counter # Count frequencies using Counter freq_dict = Counter(s) # Sort the frequency dictionary in descending order of frequency and return it sorted_freq_dict = dict(sorted(freq_dict.items(), key=lambda item: item[1], reverse=True)) return sorted_freq_dict"},{"question":"Create a Python function that takes two inputs: a square matrix \`M\` and a float \`threshold\`. The function should transform \`M\` such that all elements strictly greater than \`threshold\` are clipped to \`threshold\`, while all elements strictly less than \`-threshold\` are clipped to \`-threshold\`. The function should return the modified matrix.","solution":"def clip_matrix(M, threshold): Clips the values in the matrix M to the given threshold. Parameters: M (list of list of floats): Square matrix. threshold (float): Clipping threshold. Returns: list of list of floats: Transformed matrix with values clipped to the threshold. clipped_M = [[min(max(element, -threshold), threshold) for element in row] for row in M] return clipped_M"},{"question":"Given a list, write a Python program to find the mode (the element that appears most frequently) of the list without using any built-in library functions like collections.Counter. Your solution should handle multiple modes by returning a list of modes if there are any ties.","solution":"def find_mode(numbers): Returns the mode(s) of the list 'numbers'. If there are multiple modes, returns a list of modes. frequency = {} max_freq = 0 modes = [] # Count the frequency of each number for num in numbers: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 # Update max frequency if frequency[num] > max_freq: max_freq = frequency[num] # Identify the mode(s) for num, freq in frequency.items(): if freq == max_freq: modes.append(num) return modes"},{"question":"Develop a Python function that will eliminate sequences of continuous repeated characters inside a provided string, making use of intermediate iterations and data transformations.","solution":"def eliminate_repeated_chars(s): Returns a string with consecutive repeated characters removed. if not s: return s result = [] previous_char = None for char in s: if char != previous_char: result.append(char) previous_char = char return ''.join(result)"},{"question":"Write a function in Python that takes an integer as an input and prints the number of digits in the integer, without converting the integer to a string. Additionally, the function should be able to handle both positive and negative integers. You may not use any built-in Python functions that directly solve the problem, such as \`len()\`, \`str()\`, \`abs()\`, and logarithmic functions from the \`math\` module.","solution":"def count_digits(n): Returns the number of digits in the integer n without converting it to a string or using any built-in functions that directly solve the problem. Handles both positive and negative integers. if n == 0: return 1 count = 0 if n < 0: n = -n # Make n positive to count digits while n > 0: count += 1 n //= 10 # Use integer division to remove the last digit return count"},{"question":"Create a function in Python that takes in a list of numbers as input. The function should return the largest number in the list. If the list is empty, the function should return None. The list can contain both positive and negative numbers.","solution":"def find_largest_number(numbers): Returns the largest number in the list. If the list is empty, returns None. if not numbers: return None return max(numbers)"},{"question":"Write a Python function that takes in a list of integers and returns the sum of the even numbers in the list. Make sure to include a docstring that explains what the function does, the input parameter, and the return value. Also, include type hints for the input parameter and return value.","solution":"def sum_of_evens(numbers: list[int]) -> int: Returns the sum of the even numbers in the list. Parameters: numbers (list of int): The list of integers to be processed. Returns: int: The sum of the even numbers in the list. return sum(number for number in numbers if number % 2 == 0)"},{"question":"Write a Python program that reads a list of words and prints the most frequent word. If there are multiple words with the same highest frequency, print all of them.","solution":"from collections import Counter def most_frequent_word(words): Returns the list of most frequent word(s) in the input list of words. Arguments: words -- list of strings Returns: list of string(s) with the highest frequency in word list if not words: return [] word_count = Counter(words) max_freq = max(word_count.values()) most_frequent_words = [word for word, count in word_count.items() if count == max_freq] return most_frequent_words"},{"question":"How can I create a time-series dataset for stock price forecasting using Python? I have data on stock prices in the form of a list of numbers. I need to convert this list to a time-series dataset suitable for input to a deep learning model that takes in sequences of 50 days and predicts the stock price for the 51st day. Can you provide me with a code template to accomplish this using NumPy arrays? Additionally, could you show me how to split the dataset into training and testing sets with a 70:30 ratio using the train_test_split function from scikit-learn?","solution":"import numpy as np from sklearn.model_selection import train_test_split def create_time_series_dataset(data, sequence_length): Generates a time-series dataset from the given list of stock prices. Args: data (list or array-like): A list of stock prices. sequence_length (int): Number of days in each input sequence. Returns: tuple: (X, y) where X is the input sequences and y is the corresponding output values. X, y = [], [] for i in range(len(data) - sequence_length): X.append(data[i:i + sequence_length]) y.append(data[i + sequence_length]) return np.array(X), np.array(y) # Example usage data = [i for i in range(1, 101)] # Example data from 1 to 100 sequence_length = 50 X, y = create_time_series_dataset(data, sequence_length) # Splitting the dataset into training and testing sets (70:30 ratio) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"},{"question":"Write a function in Python to print a greeting with the text \\"Hello, World!\\" n times, where n is an integer input by the user. The function should validate the input and only accept values within the specified range (1 ≤ n ≤ 10^6). If an invalid input is provided, the function should display an error message and prompt the user to enter a valid input.","solution":"def print_greeting_n_times(n): Prints 'Hello, World!' n times. Only accepts values within the range 1 <= n <= 10^6. If the input is invalid, displays an error message. if not isinstance(n, int) or n < 1 or n > 10**6: return \\"Error: Please enter a valid integer within the range 1 to 10^6.\\" else: for _ in range(n): print(\\"Hello, World!\\") return None"},{"question":"I have a string and a list of separator characters. I want to split the string at each instance of any of the separators and return all substrings, including empty strings resulting from consecutive separators. Can you help me write a Python function to do this?","solution":"import re def split_string(string, separators): Splits the string at each instance of any of the separators and returns all substrings, including empty strings resulting from consecutive separators. :param string: The input string to be split. :param separators: A list of separator characters. :return: A list of substrings. # Create a regex pattern for all separators, wrapping each in [] pattern = f'[{re.escape(\\"\\".join(separators))}]' return re.split(pattern, string)"},{"question":"Create a function that takes in a string as input and converts it to an integer. The string may contain digits, spaces, and punctuation marks, but the function should only consider the digits when converting to an integer. If there are no digits in the string, the function should return -1.","solution":"def string_to_int(s): Converts input string to an integer by considering only digits. If there are no digits, returns -1. digits = ''.join(filter(str.isdigit, s)) return int(digits) if digits else -1"},{"question":"Create a RNN model with PyTorch to classify a sequence of words into positive, negative, and neutral sentiment categories.","solution":"import torch import torch.nn as nn class RNNModel(nn.Module): def __init__(self, vocab_size, embedding_dim, hidden_dim, output_dim): super(RNNModel, self).__init__() # Embedding layer self.embedding = nn.Embedding(vocab_size, embedding_dim) # RNN layer self.rnn = nn.RNN(embedding_dim, hidden_dim, batch_first=True) # Fully connected layer self.fc = nn.Linear(hidden_dim, output_dim) # Softmax activation function for output self.softmax = nn.LogSoftmax(dim=1) def forward(self, x): # Pass input through embedding layer x = self.embedding(x) # Pass embeddings through RNN rnn_out, hidden = self.rnn(x) # Take the last output of the RNN last_out = rnn_out[:, -1, :] # Pass through the fully connected layer out = self.fc(last_out) # Apply softmax to get class probabilities out = self.softmax(out) return out"},{"question":"Create a Python program that reads a CSV file named 'data.csv' and prints the sum of values in the 'age' column. Then, implement a function that returns the average age from the CSV file.","solution":"import csv def read_csv_and_sum_ages(file_path): total_age = 0 count = 0 with open(file_path, newline='') as csvfile: reader = csv.DictReader(csvfile) for row in reader: try: age = int(row['age']) total_age += age count += 1 except ValueError: continue return total_age, count def average_age(file_path): total_age, count = read_csv_and_sum_ages(file_path) if count == 0: return 0 # To avoid division by zero return total_age / count # Example usage (uncomment to use): # file_path = 'data.csv' # print(average_age(file_path))"},{"question":"How to modify the 'func' function to accept an optional parameter 'exponent', and perform the power operation on the 'base' variable with the 'exponent' while still maintaining the functionality of the given code?","solution":"def func(base, exponent=2): Returns the base raised to the power of exponent. If exponent is not provided, it defaults to 2 (i.e., it returns the square of the base). return base ** exponent"},{"question":"Create a Python function to find the closest number in a given array to a given number, where the array can contain up to 1 million elements. The function should have a time complexity of O(log n).","solution":"def closest_number(arr, target): Returns the closest number to the target in a sorted array in O(log n) time. if not arr: return None left, right = 0, len(arr) - 1 closest = arr[0] while left <= right: mid = (left + right) // 2 if abs(arr[mid] - target) < abs(closest - target): closest = arr[mid] if arr[mid] == target: return arr[mid] elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return closest"},{"question":"Write a Python program to implement the Naive Bayes classifier using the scikit-learn library. The program should load the iris dataset, split it into training and test sets, and use the training set to train the classifier. The classifier should then be used to predict the species of the test set, and the accuracy of the predictions should be calculated. Additionally, the program should include all necessary libraries and modules and handle any potential errors that could occur during the execution. Remember to comment your code for clarity.","solution":"from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.naive_bayes import GaussianNB from sklearn.metrics import accuracy_score def naive_bayes_classifier(): # Load the iris dataset iris = datasets.load_iris() X = iris.data y = iris.target # Split the dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Initialize the Gaussian Naive Bayes classifier gnb = GaussianNB() # Train the classifier on the training data gnb.fit(X_train, y_train) # Predict the species of the test set y_pred = gnb.predict(X_test) # Calculate the accuracy of the predictions accuracy = accuracy_score(y_test, y_pred) return accuracy, y_pred, y_test"},{"question":"Write a Python code snippet to define a function that calculates the highest common factor (HCF) of three given integer inputs, a, b, and c. The function should also validate if the inputs are integers and non-zero.","solution":"from math import gcd from functools import reduce def validate_inputs(a, b, c): if not all(isinstance(i, int) and i != 0 for i in [a, b, c]): raise ValueError(\\"All inputs must be non-zero integers.\\") def hcf_of_three(a, b, c): Returns the highest common factor (HCF) of the three given non-zero integers a, b, and c. validate_inputs(a, b, c) return reduce(gcd, [a, b, c])"},{"question":"Given a large integer, write a function that compresses it to a shorter string. Don't use any built-in functions or libraries for compression. Assume that the input is always a positive integer. The challenge here is to design an encoding algorithm that significantly reduces the length of the numeric string, and decoding it back to the original number. The score will be based on the compression ratio, the readability of the code, and the time and space complexity of your solution.","solution":"def encode_number(num): Encodes a large integer to a shorter base 36 string. if num == 0: return '0' base_chars = \\"0123456789abcdefghijklmnopqrstuvwxyz\\" result = [] while num > 0: remainder = num % 36 result.append(base_chars[remainder]) num = num // 36 return ''.join(result[::-1]) def decode_number(encoded): Decodes a base 36 string back to the original integer. base_chars = \\"0123456789abcdefghijklmnopqrstuvwxyz\\" char_to_value = {char: idx for idx, char in enumerate(base_chars)} num = 0 for char in encoded: num = num * 36 + char_to_value[char] return num"},{"question":"Given two linked lists, write a Python program to compare them and output true if they are equal, false if not. Each node in the linked list contains an integer value and a next pointer to the next node. The linked lists are equal if they have the same length and each corresponding node's value is equal.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def are_linked_lists_equal(l1, l2): Compares two linked lists for equality. Returns True if they are equal, otherwise False. while l1 is not None and l2 is not None: if l1.value != l2.value: return False l1 = l1.next l2 = l2.next if l1 is None and l2 is None: return True return False"},{"question":"Write a Python function that takes a list of numbers as input and reverses the elements of the list in place. The function should not return anything.","solution":"def reverse_list_in_place(lst): Reverses the elements of the list in place. left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Write a python script that lists archives in the current directory whose names end in \`\`.zip\`\`, renames them by replacing spaces in their filenames with underscores, and then extracts each archive to a new directory that has the same name as the archive (but without the \`\`.zip\`\` extension). The script should not move or copy the original archives.","solution":"import os import zipfile def process_archives(): # List all files in the current directory files = os.listdir('.') # Filter out .zip files zip_files = [f for f in files if f.endswith('.zip')] for zip_file in zip_files: # Replace spaces with underscores in filenames new_filename = zip_file.replace(' ', '_') # Rename the file if necessary if new_filename != zip_file: os.rename(zip_file, new_filename) # Extract the archive dir_name = new_filename[:-4] # Remove the .zip extension if not os.path.exists(dir_name): os.makedirs(dir_name) with zipfile.ZipFile(new_filename, 'r') as zip_ref: zip_ref.extractall(dir_name)"},{"question":"Please construct a Python function that requires two input parameters: one for the path to a specific directory and another for a particular filename. The function's task is to search for all files with the given filename within the specified directory and its subdirectories. Should it find multiple files with the same name, it must return the complete path to the one with the latest modification timestamp. If no file with the given name is found, the function should return None.","solution":"import os def find_latest_file(directory, filename): Searches for all files with the given filename within the specified directory and its subdirectories. Returns the complete path to the one with the latest modification timestamp. If no file with the given name is found, returns None. latest_file_path = None latest_modification_time = -1 for root, dirs, files in os.walk(directory): if filename in files: file_path = os.path.join(root, filename) modification_time = os.path.getmtime(file_path) if modification_time > latest_modification_time: latest_modification_time = modification_time latest_file_path = file_path return latest_file_path"},{"question":"Write a Python function named \\"find_product\\" that takes a list of numbers as a parameter and returns the product of all the numbers in the list.","solution":"def find_product(numbers): Returns the product of all the numbers in the list. if not numbers: return 0 product = 1 for number in numbers: product *= number return product"},{"question":"Create a Python function that reverses a given string and prints it.","solution":"def reverse_string(s): Takes a string s and returns the reverse of the string. return s[::-1]"},{"question":"Create a dictionary in Python and store the names of four countries and the cities within them. Implement a function that takes a country name as input and returns the number of cities in that country. The function should have a time complexity of O(1).","solution":"def get_number_of_cities(country): Returns the number of cities in the given country. countries = { \\"USA\\": [\\"New York\\", \\"Los Angeles\\", \\"Chicago\\", \\"Houston\\"], \\"India\\": [\\"Mumbai\\", \\"Delhi\\", \\"Bangalore\\", \\"Hyderabad\\"], \\"UK\\": [\\"London\\", \\"Manchester\\", \\"Birmingham\\", \\"Liverpool\\"], \\"Australia\\": [\\"Sydney\\", \\"Melbourne\\", \\"Brisbane\\", \\"Perth\\"] } return len(countries.get(country, []))"},{"question":"Given a real number 'k' and a list of integers 'nums', write a program that generates a new list 'squared'. This list should contain the square of the absolute differences between each element in 'nums' and 'k', sorted in non-decreasing order. Also, implement the solution using a priority queue (min heap) to ensure the resulting list is sorted without performing a final sort operation.","solution":"from heapq import heappush, heappop def sorted_squared_differences(nums, k): Returns a list containing the square of the absolute differences between each element in 'nums' and 'k', sorted in non-decreasing order. min_heap = [] # Calculate the squared differences and push them onto the heap for num in nums: diff = abs(num - k) squared_diff = diff ** 2 heappush(min_heap, squared_diff) # Extract the sorted squared differences from the heap squared = [] while min_heap: squared.append(heappop(min_heap)) return squared"},{"question":"You have a string and you need to write a function in Python to find the character that appears the most frequently in the string. You should also account for cases when multiple characters have the same highest frequency. In such cases, return the character that appears first in the string. Your function should ignore spaces and punctuation.","solution":"import string def most_frequent_character(s): Find the character that appears the most frequently in the string \`s\`. If multiple characters have the same highest frequency, return the character that appears first in the string. Ignore spaces and punctuation. Args: s (str): The input string Returns: char: The most frequent character # Filter out spaces and punctuation s = ''.join(filter(lambda x: x.isalnum(), s)) # Count the frequencies of each character frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Find the most frequent character max_freq = 0 max_char = None for char in s: if frequency[char] > max_freq: max_freq = frequency[char] max_char = char return max_char"},{"question":"Write the Python Script which uses a regex pattern to extract all the links from the given HTML text. Additionally, categorize these links into internal (those pointing to the same domain) and external (those pointing to other domains). Only consider http and https links. Test for a piece of flawed code given below where the categorization is not working correctly.","solution":"import re from urllib.parse import urlparse def extract_links(html, base_domain): Extracts and categorizes all the http and https links from the given HTML text. Parameters: html (str): A string containing the HTML text. base_domain (str): The base domain to distinguish between internal and external links. Returns: dict: A dictionary with two keys: 'internal' and 'external'. Each key contains a list of respective links. pattern = r'<a[^>]+href=[\\"'](http[s]?://[^\\"']+)[\\"']' links = re.findall(pattern, html) internal_links = [] external_links = [] for link in links: parsed_url = urlparse(link) domain = parsed_url.netloc if base_domain in domain: internal_links.append(link) else: external_links.append(link) return { 'internal': internal_links, 'external': external_links }"},{"question":"Create a Python function that takes a dictionary as input and returns a new dictionary where the values are squared. The function should also check if the values are integers and raise a ValueError if not. Additionally, the function should only square values that are greater than 0 and raise a ValueError for any negative values.","solution":"def square_values(input_dict): Takes a dictionary as input and returns a new dictionary with the values squared. Raises ValueError if any of the values are not integers or if any of the values are negative. output_dict = {} for key, value in input_dict.items(): if not isinstance(value, int): raise ValueError(f\\"Value for key '{key}' is not an integer.\\") if value < 0: raise ValueError(f\\"Value for key '{key}' is negative.\\") output_dict[key] = value ** 2 return output_dict"},{"question":"Write a python code to insert a new node at the head of a doubly linked list and ensure the list remains sorted in ascending order. The new node should have a minimum value of 5. Each node in the list should have a unique value and contain a validation check to prevent insertion of duplicate values.","solution":"class Node: def __init__(self, value): self.value = value self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None def insert_sorted(self, value): if value < 5: raise ValueError(\\"Value must be at least 5.\\") new_node = Node(value) if self.head is None: self.head = new_node return current = self.head prev = None while current and current.value < value: prev = current current = current.next if current and current.value == value: raise ValueError(\\"Duplicate value insertion is not allowed.\\") new_node.next = current new_node.prev = prev if prev is None: self.head = new_node else: prev.next = new_node if current: current.prev = new_node def to_list(self): result = [] current = self.head while current: result.append(current.value) current = current.next return result"},{"question":"Write a function that takes in two strings as input and outputs True if they are anagrams, False otherwise. Anagrams are words formed by rearranging the letters of another word.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, False otherwise. # Remove all white spaces and convert both strings to lowercase str1 = ''.join(str1.split()).lower() str2 = ''.join(str2.split()).lower() # Sort the letters of both strings and compare return sorted(str1) == sorted(str2)"},{"question":"Write a Python script that utilizes the OpenCV and Pillow libraries to load an image, apply a Gaussian blur filter, and then save the blurred image to disk.","solution":"import cv2 from PIL import Image import numpy as np def load_apply_gaussian_blur_save(input_image_path, output_image_path, ksize=(5, 5), sigmaX=0): Load an image from disk, apply a Gaussian blur filter, and save the blurred image back to disk. Args: input_image_path (str): The file path of the image to be loaded and blurred. output_image_path (str): The file path where the blurred image should be saved. ksize (tuple): Kernel size for the Gaussian blur. Default is (5, 5). sigmaX (int): Gaussian kernel standard deviation in X direction. Default is 0. # Load image using OpenCV image = cv2.imread(input_image_path) if image is None: raise ValueError(\\"The image could not be loaded. Check the path and file format.\\") # Apply Gaussian blur using OpenCV blurred_image = cv2.GaussianBlur(image, ksize, sigmaX) # Convert the OpenCV image (which is in BGR format) to RGB format blurred_image_rgb = cv2.cvtColor(blurred_image, cv2.COLOR_BGR2RGB) # Convert to PIL Image and save pil_image = Image.fromarray(blurred_image_rgb) pil_image.save(output_image_path)"},{"question":"Create a function that given a string of words, counts the frequency of each word and returns a dictionary with the word as the key and the frequency as the value. The function should handle different cases of words (e.g. \\"Hello\\" and \\"hello\\" should be treated as the same word). Additionally, the function should ignore any punctuation marks or special characters that may be included in the words. The function should also handle the case where a word is a number, and count the frequency of each digit in the number separately.","solution":"import re from collections import defaultdict def word_frequency(s): Returns a dictionary with the frequency of each word in the input string. Ignores case, punctuation marks, and special characters. Treats each digit in a number separately. # Remove punctuation and special characters cleaned_string = re.sub(r'[^a-zA-Z0-9s]', '', s) # Normalize to lowercase words = cleaned_string.lower().split() # Initialize a default dictionary to count word frequencies freq_dict = defaultdict(int) # Iterate over each word in the list of words for word in words: # If the word is a number, treat each digit as a separate word if word.isdigit(): for digit in word: freq_dict[digit] += 1 else: freq_dict[word] += 1 return dict(freq_dict)"},{"question":"Given a list of numbers, write a Python program to check if there exists a triplet in the list whose sum is equal to the given number. Do this without using any built-in function for generating all possible triplets, and make sure your solution is efficient enough for larger lists (with thousands of entries).","solution":"def find_triplet_with_sum(arr, target): Check if there exists a triplet in the list whose sum is equal to the given number. Parameters: arr (list): List of integers target (int): Target sum for the triplet Returns: bool: True if such a triplet exists, False otherwise arr.sort() n = len(arr) for i in range(n - 2): left = i + 1 right = n - 1 while (left < right): current_sum = arr[i] + arr[left] + arr[right] if (current_sum == target): return True elif (current_sum < target): left += 1 else: right -= 1 return False"},{"question":"Write a Python program that illustrates and utilizes at least three different data types, along with two functions manipulating these data types. Include an explanation regarding the use and functionality of these data types and functions in your program's comments. The program should also incorporate exception handling for possible data type misuse.","solution":"def calculate_mean(numbers): Calculate and return the mean of a list of numbers. if not all(isinstance(n, (int, float)) for n in numbers): raise ValueError(\\"All elements in the list must be numbers.\\") return sum(numbers) / len(numbers) def concatenate_strings(*strings): Concatenate and return a single string composed of all the input strings. if not all(isinstance(s, str) for s in strings): raise ValueError(\\"All arguments must be strings.\\") return ' '.join(strings) # Usage demonstration: try: # List (contains int and float) as a data type mean = calculate_mean([10, 20, 30.5, 40.7]) print(f\\"Mean: {mean}\\") # Strings as a data type concatenated_string = concatenate_strings(\\"Hello\\", \\"World!\\") print(f\\"Concatenated String: {concatenated_string}\\") # Incorrect data type usage: # This should raise an exception calculate_mean([10, \\"20\\", 30]) except Exception as e: print(f\\"Exception: {e}\\")"},{"question":"Write two Python functions. The first function should take in a string and return the number of vowels in the string. The second function should take in a sentence and return how many vowels are in the sentence using the first function. To increase difficulty, I've included a piece of erroneous code for you to correct.","solution":"def count_vowels_in_string(s): Returns the number of vowels in the given string s. vowels = 'aeiouAEIOU' return sum(1 for char in s if char in vowels) def count_vowels_in_sentence(sentence): Returns the number of vowels in the given sentence using count_vowels_in_string. return count_vowels_in_string(sentence)"},{"question":"You are given a list of numbers. Write a code to sort them in ascending order using the Bubble Sort algorithm. However, you are not allowed to use any additional data structures or built-in sorting functions. You must implement the sorting algorithm from scratch using only basic language features and constructs. Additionally, the code should have a time complexity of O(n^2) and should not use any nested loops.","solution":"def bubble_sort(arr): Sorts the list of numbers in ascending order using the Bubble Sort algorithm. :param arr: List of numbers :return: Sorted list of numbers n = len(arr) swapped = True # Only one loop will be used with a while loop to maintain O(n^2) complexity while swapped: swapped = False for i in range(1, n): if arr[i - 1] > arr[i]: arr[i - 1], arr[i] = arr[i], arr[i - 1] # Swap the elements swapped = True n -= 1 # Reduce the effective length of the array return arr"},{"question":"Proceed to create a unique, unguessable secret code following the specified guidelines. The code must be 8 characters long, and it should comprise of a blend of lowercase Latin alphabets and numeric digits. The alphabets must alternate with the digits in a consistent manner, starting with an alphabet.","solution":"import random import string def generate_secret_code(): Generate a unique, unguessable secret code. The code is 8 characters long, alternating between lowercase Latin alphabets and numeric digits, starting with an alphabet. code = [] for i in range(4): code.append(random.choice(string.ascii_lowercase)) # Append a random lowercase letter code.append(random.choice(string.digits)) # Append a random digit return ''.join(code)"},{"question":"Use Python to write a code that displays a multiplication table of a given number 'n' up to a given range 'm'. Additionally, implement a method to print the table in a formatted manner with the products aligned in columns. Add error handling for negative numbers and non-integer inputs as well.","solution":"def multiplication_table(n, m): Generates a multiplication table for the given number 'n' up to the range 'm'. Returns the table as a list of strings. # Error handling if not isinstance(n, int) or not isinstance(m, int): raise ValueError(\\"Both 'n' and 'm' must be integers.\\") if n < 0 or m < 0: raise ValueError(\\"Both 'n' and 'm' must be non-negative integers.\\") table = [] for i in range(1, m + 1): table.append(f\\"{n} * {i} = {n * i}\\") return table def format_table(table): Takes the multiplication table list and formats it into a string with aligned columns. return \\"n\\".join(table) # Example usage: # table = multiplication_table(5, 10) # print(format_table(table))"},{"question":"Write some Python code to check if two strings are anagrams. An anagram is a word or phrase formed by rearranging the letters of another word or phrase. However, in this case, you are not allowed to use any built-in functions or libraries to sort the strings or compare their characters. You have to implement your own logic to determine if the two strings are anagrams.","solution":"def are_anagrams(str1, str2): Checks if two strings are anagrams without using any built-in functions to sort the strings or compare their characters. if len(str1) != len(str2): return False count1 = {} count2 = {} for char in str1: if char in count1: count1[char] += 1 else: count1[char] = 1 for char in str2: if char in count2: count2[char] += 1 else: count2[char] = 1 for key in count1: if key not in count2 or count1[key] != count2[key]: return False return True"},{"question":"Write a code snippet in Python to print a grid of size n x n where each row contains numbers from 1 to n.","solution":"def print_grid(n): Prints a grid of size n x n where each row contains numbers from 1 to n. for _ in range(n): print(\\" \\".join(map(str, range(1, n + 1)))) # Example usage print_grid(3)"},{"question":"Given an input of a date in the format \\"mm/dd/yyyy\\", write a program in Python to output the corresponding day of the week, accounting for leap years.","solution":"from datetime import datetime def get_day_of_week(date_str): Returns the day of the week for the given date string in \\"mm/dd/yyyy\\" format. # Parse the date string into a datetime object date_obj = datetime.strptime(date_str, \\"%m/%d/%Y\\") # Get the day of the week and return it return date_obj.strftime(\\"%A\\")"},{"question":"Write a python code to merge two lists into one, where the resulting list maintains the same order for elements from both lists, and then reverse the entire list.","solution":"def merge_and_reverse(list1, list2): Merge two lists and then reverse the resulting list. The merged list should maintain the order of elements in the original lists. merged_list = list1 + list2 return merged_list[::-1]"},{"question":"Write a Python script to remove duplicates from the list and sort the remaining elements in descending order. The script should have a time complexity of O(nlogn) or better.","solution":"def remove_duplicates_and_sort_descending(lst): Remove duplicates from the list and sort the remaining elements in descending order. :param lst: List of elements :return: List of elements with duplicates removed, sorted in descending order unique_elements = set(lst) sorted_unique_elements = sorted(unique_elements, reverse=True) return sorted_unique_elements"},{"question":"Write a python function to check if a given string has all unique characters. The function should return True if all characters in the string are unique, and False otherwise. As a twist, you are not allowed to use any additional data structures (such as lists, sets, dictionaries) in your solution.","solution":"def has_unique_characters(s): Checks if the given string has all unique characters. Args: s (str): The string to check for uniqueness of characters. Returns: bool: True if all characters in the string are unique, False otherwise. n = len(s) for i in range(n): for j in range(i + 1, n): if s[i] == s[j]: return False return True"},{"question":"How can a Python function be programmed to create an instance of the Trope class \\"Sarcastic Petrologist\\" with the parameters name=\\"Rock Jock\\",Occupation=\\"Petrologist\\", and Level_of_Sarcasm=\\"Maximum\\"? After that, how can the function be utilized to call the introduce() method of the object to give an overview of the character in the form \\"Name: Rock Jock, Occupation: Petrologist, Level of Sarcasm: Maximum\\"? Moreover, could you present an example of how this function can be integrated into a larger program that utilizes multiple Trope objects with different parameters to create a diverse group of characters for a story or game?","solution":"class Trope: def __init__(self, name, occupation, level_of_sarcasm): self.name = name self.occupation = occupation self.level_of_sarcasm = level_of_sarcasm def introduce(self): return f\\"Name: {self.name}, Occupation: {self.occupation}, Level of Sarcasm: {self.level_of_sarcasm}\\" def create_sarcastic_petrologist(): sarcastic_petrologist = Trope(name=\\"Rock Jock\\", occupation=\\"Petrologist\\", level_of_sarcasm=\\"Maximum\\") return sarcastic_petrologist.introduce() # Example function to create diverse group of characters def create_diverse_characters(): characters = [ Trope(name=\\"Rock Jock\\", occupation=\\"Petrologist\\", level_of_sarcasm=\\"Maximum\\"), Trope(name=\\"Gale Storm\\", occupation=\\"Meteorologist\\", level_of_sarcasm=\\"Moderate\\"), Trope(name=\\"Quake Master\\", occupation=\\"Seismologist\\", level_of_sarcasm=\\"High\\"), Trope(name=\\"Ocean Wave\\", occupation=\\"Oceanographer\\", level_of_sarcasm=\\"Low\\") ] introductions = [character.introduce() for character in characters] return introductions"},{"question":"Create a function to check if an array contains any duplicate elements, while also ensuring that the array elements are sorted in ascending order and that the length of the array is less than or equal to 100. Additionally, the function should check if the array contains any negative integers, and if so, it should return False. The function should return a boolean value indicating the presence of duplicate elements.","solution":"def check_array(array): Checks if an array contains any duplicate elements, while ensuring that the array elements are sorted in ascending order, the length of the array is less than or equal to 100, and that the array does not contain any negative integers. Returns: - False if the array contains negative integers or is not sorted in ascending order - True if the array contains duplicate elements - False if the array does not contain duplicate elements # Check for negative integers if any(x < 0 for x in array): return False # Check if array is sorted if array != sorted(array): return False # Check length of the array if len(array) > 100: return False # Check for duplicates seen = set() for number in array: if number in seen: return True seen.add(number) return False"},{"question":"Reverse the following array in-place using Python, without using any built-in functions or libraries that directly reverse the array. Your solution should have a time complexity of O(n) and a space complexity of O(1). The array will contain integers ranging from -10^9 to 10^9.","solution":"def reverse_array_in_place(arr): Reverses the given array in-place. Parameters: arr (list): A list of integers. Returns: None left, right = 0, len(arr) - 1 while left < right: # Swap the elements at the left and right indices arr[left], arr[right] = arr[right], arr[left] # Move towards the center left += 1 right -= 1 # No need to return anything since the array is modified in place"},{"question":"Write a function in Python that accepts an array as an argument and returns the index of the item with the maximum value.","solution":"def max_value_index(arr): Returns the index of the item with the maximum value in the array. if not arr: return None max_index = 0 max_value = arr[0] for i in range(1, len(arr)): if arr[i] > max_value: max_value = arr[i] max_index = i return max_index"},{"question":"Create a function that takes a two-dimensional array and returns a new two-dimensional array that is the transpose of the input array.","solution":"def transpose(matrix): Returns the transpose of a two-dimensional array (matrix). Parameters: matrix (list of list of int): A two-dimensional array to transpose Returns: list of list of int: The transposed two-dimensional array # Use list comprehension to generate the transpose of the matrix return [list(row) for row in zip(*matrix)]"},{"question":"Devise a cipher, employing your chosen computer programming language, that can encrypt a textual message. Your cipher should incorporate an operation for decryption too, forming a pair of encoding and decoding functions. We'll be using Python to solve this problem. A simple yet effective solution can be the Caesar Cipher technique, which is a type of substitution cipher in which each letter in the plaintext is 'shifted' a certain number of places down the alphabet. In our case, we will implement a more modern technique - the XOR encryption, also known as bitwise exclusive OR. With this method, each character of the input string is combined with a character from a secret key using bitwise XOR function.","solution":"def xor_encrypt_decrypt(message, key): Encrypt or decrypt a message using XOR encryption with the provided key. Args: message (str): The input string to be encrypted or decrypted. key (str): The key used for the XOR operation. Returns: str: The resulting encrypted or decrypted string. key_length = len(key) output = [] for i, char in enumerate(message): xor_char = chr(ord(char) ^ ord(key[i % key_length])) output.append(xor_char) return ''.join(output)"},{"question":"Write a python function that takes an integer n as input, and prints the pattern given below. The function should be able to handle n up to 100, but return \\"Invalid input\\" for any n that is negative, zero, or greater than 100.","solution":"def print_pattern(n): Prints a pattern of numbers based on the input integer n. Returns \\"Invalid input\\" if n is negative, zero, or greater than 100. if n <= 0 or n > 100: return \\"Invalid Input\\" pattern = \\"\\" for i in range(n, 0, -1): line = ' '.join(str(x) for x in range(1, i + 1)) pattern += line + \\"n\\" return pattern.strip()"},{"question":"How can I write a Python script that finds the n largest elements in a list and returns them in ascending order?","solution":"import heapq def n_largest_elements(lst, n): Returns the n largest elements in the list in ascending order. Parameters: lst (list): The list of elements. n (int): The number of largest elements to find. Returns: list: A list of the n largest elements in ascending order. if n <= 0: return [] largest_elements = heapq.nlargest(n, lst) # Find the n largest elements return sorted(largest_elements) # Sort them in ascending order"},{"question":"Given the following two lists: list1 = [1, 2, 3] and list2 = [1, 1, 1]. Implement a function \`elementwise_max(list1, list2)\` that takes two lists of equal length and returns a new list containing the element-wise maximum of the input lists. Additionally, write a function to verify the correctness of your implementation.","solution":"def elementwise_max(list1, list2): Returns a new list containing the element-wise maximum of the input lists. :param list1: List of integers. :param list2: List of integers. :return: List containing the element-wise maximum of list1 and list2. return [max(a, b) for a, b in zip(list1, list2)]"},{"question":"Given a list of strings and a single character, write a Python function to return the count of strings containing that character. However, the catch is that the function should ignore case sensitivity while searching for the character in the strings. Additionally, create a function to test the correctness of your solution with various inputs.","solution":"def count_strings_containing_char(strings, char): Returns the count of strings containing the given character (case insensitive). :param strings: List of strings :param char: Single character to search for (case insensitive) :return: Count of strings containing the character char_lower = char.lower() return sum(char_lower in s.lower() for s in strings)"},{"question":"Write a Python function to check whether a string has all unique characters. The function should have a time complexity of O(n) and a space complexity of O(1).","solution":"def all_unique_characters(s): Returns True if the string \`s\` has all unique characters, False otherwise. if len(s) > 128: # Considering extended ASCII, which has 128 characters return False char_set = [False] * 128 for char in s: val = ord(char) if char_set[val]: return False char_set[val] = True return True"},{"question":"Develop a Python script that generates a program to calculate the mode of an array of random integers. The program should also contain a function that checks if the mode is a Fibonacci number. Additionally, the script should include a feature to plot the frequency distribution of the array.","solution":"import random from collections import Counter import matplotlib.pyplot as plt def generate_random_array(size, lower_bound, upper_bound): Generates an array of random integers. Parameters: size (int): Number of elements in the array. lower_bound (int): The minimum value an element can take. upper_bound (int): The maximum value an element can take. Returns: list: An array of random integers. return [random.randint(lower_bound, upper_bound) for _ in range(size)] def calculate_mode(arr): Calculates the mode of an array. Parameters: arr (list): The input array. Returns: int: The mode of the array. count = Counter(arr) return count.most_common(1)[0][0] def is_fibonacci(num): Checks if a number is a Fibonacci number. Parameters: num (int): The input number. Returns: bool: True if the number is a Fibonacci number, False otherwise. if num < 0: return False a, b = 0, 1 while a < num: a, b = b, a + b return a == num def plot_frequency_distribution(arr): Plots the frequency distribution of an array. Parameters: arr (list): The input array. count = Counter(arr) plt.bar(count.keys(), count.values()) plt.xlabel('Number') plt.ylabel('Frequency') plt.title('Frequency Distribution') plt.show()"},{"question":"Now, let's define a new function \`contains_even_number\` using comprehensions. This function will take a list of nested lists as an argument and return \`True\` if any of the nested lists contain an even number. If no nested list contains an even number, return \`False\`. If the input list is empty, return \`None\`.","solution":"def contains_even_number(nested_lists): Returns True if any of the nested lists contain an even number, False otherwise. If the input list is empty, returns None. if not nested_lists: return None return any(any(num % 2 == 0 for num in sublist) for sublist in nested_lists if sublist)"},{"question":"Write a python function that checks if one string is a substring of another. However, things are not that easy. Your function should not rely on any built-in string functions such as str.find() or str.index(). It should instead implement the KMP (Knuth-Morris-Pratt) algorithm for string matching. Also, write test cases to verify your solution.","solution":"def compute_lps(pattern): Compute the LPS (Longest Prefix which is also Suffix) array used in KMP algorithm. lps = [0] * len(pattern) length = 0 # length of the previous longest prefix suffix i = 1 while i < len(pattern): if pattern[i] == pattern[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps def kmp_substring_search(text, pattern): KMP algorithm for substring search. if not pattern: return False # Empty pattern is not considered a valid substring lps = compute_lps(pattern) i = 0 # Index for text j = 0 # Index for pattern while i < len(text): if pattern[j] == text[i]: i += 1 j += 1 if j == len(pattern): return True # Found the pattern in text if i < len(text) and pattern[j] != text[i]: if j != 0: j = lps[j - 1] else: i += 1 return False def is_substring(s1, s2): Check if s1 is a substring of s2 using KMP algorithm. return kmp_substring_search(s2, s1)"},{"question":"Create a program that uses a loop to determine if each element in a list is odd or even. If the element is odd, print \\"{element} is odd\\". If the element is even, print \\"{element} is even\\". Make sure to include a condition within the loop to check if the number is zero and print \\"0 is zero\\" if true. Include a piece of erroneous code as a reference to increase misdirection.","solution":"def determine_odd_even(numbers): Determine if each element in a list of numbers is odd, even, or zero. Parameters: numbers (list): List of integers to check. Returns: list: List of strings describing if elements are odd, even or zero. result = [] for number in numbers: if number == 0: result.append(\\"0 is zero\\") elif number % 2 == 0: result.append(f\\"{number} is even\\") else: result.append(f\\"{number} is odd\\") return result"},{"question":"Create a program to sort a given array in an ascending order using the bubble sort method.","solution":"def bubble_sort(arr): Sorts an array in ascending order using the bubble sort method. Arguments: arr -- List of elements to be sorted Returns: List of elements sorted in ascending order n = len(arr) for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Concatenate two lists in Python without using the '+' operator or the 'extend' method. The resulting list should contain the elements of the first list followed by the elements of the second list.","solution":"def concatenate_lists(list1, list2): Concatenates two lists without using the '+' operator or the 'extend' method. Parameters: list1 (list): The first input list. list2 (list): The second input list. Returns: list: A new list containing elements from list1 followed by elements from list2. result = list1[:] for item in list2: result.append(item) return result"},{"question":"Code a solution that prints out the string \\"Hello, [name]!\\" and calculate the length of the resulted string by considering the name is stored in a variable. Additionally, make the program able to handle names with special characters and capital letters without changing their format.","solution":"def greet_and_calculate_length(name): Returns a greeting string with the given name and the length of the resulting string. Args: name (str): The name to greet. Returns: tuple: A tuple containing the greeting string and its length. greeting = f\\"Hello, {name}!\\" return greeting, len(greeting)"},{"question":"Given two strings s1 and s2, write a Python program to find whether s1 is an anagram of s2, but without using any built-in functions for sorting or converting the strings to lists.","solution":"def is_anagram(s1, s2): Returns True if s1 is an anagram of s2, otherwise False. if len(s1) != len(s2): return False char_count = {} for char in s1: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s2: if char in char_count: char_count[char] -= 1 else: return False for count in char_count.values(): if count != 0: return False return True"},{"question":"Design a Python function that can identify prime numbers from a collection of integers, including negative integers and zero. This function should be capable of handling exceptions for inputs that are non-numerical, floating point numbers, or even numbers that exceed Python's integer limit. The output should be arranged as a three-element tuple: the first element being the list of prime numbers in ascending order, the second element being the product of all prime numbers, and the third element being the sum of all prime numbers.","solution":"def is_prime(n): Helper function to check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_numbers_info(numbers): This function takes a collection of integers and returns a tuple consisting of: - A list of prime numbers in ascending order - The product of all prime numbers - The sum of all prime numbers primes = [] for n in numbers: if isinstance(n, int) and is_prime(n): primes.append(n) primes = sorted(primes) product = 1 for prime in primes: product *= prime total_sum = sum(primes) if primes == []: # handle edge case of empty prime list product = 0 return (primes, product, total_sum)"},{"question":"Write a Python program to generate an edit distance matrix for two given strings.","solution":"def edit_distance_matrix(str1, str2): Generates the edit distance matrix for two given strings. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: list: A 2D list representing the edit distance matrix. len_str1 = len(str1) + 1 len_str2 = len(str2) + 1 # Create a matrix filled with zeros matrix = [[0] * len_str2 for _ in range(len_str1)] # Initialize the first column and first row of the matrix for i in range(len_str1): matrix[i][0] = i for j in range(len_str2): matrix[0][j] = j # Populate the matrix for i in range(1, len_str1): for j in range(1, len_str2): if str1[i-1] == str2[j-1]: cost = 0 else: cost = 1 matrix[i][j] = min(matrix[i-1][j] + 1, # Deletion matrix[i][j-1] + 1, # Insertion matrix[i-1][j-1] + cost) # Substitution return matrix"},{"question":"Generate a random letter from the string provided without using any built-in random functions or libraries. The string must contain at least 100 characters. The time complexity of your solution should be O(1) and the space complexity should be O(n), where n is the length of the string.","solution":"def custom_random_choice(s: str) -> str: Returns a pseudo-random character from the given string without using any built-in random functions or libraries. :param s: The string from which to select a character. Must be at least 100 characters long. :return: A pseudo-random character from the string. assert len(s) >= 100, \\"String must be at least 100 characters long\\" index = hash(s) % len(s) return s[index]"},{"question":"Create a Python function that converts a text string into its equivalent string of its binary representation of the ASCII values. Also, implement a secondary function to decode the binary back to its original text string. Before converting, your program should validate that the inputted text string only contains printable ASCII characters.","solution":"def text_to_binary(text): Converts a text string into its equivalent string of binary representation of the ASCII values. if not all(32 <= ord(char) <= 126 for char in text): raise ValueError(\\"Input text contains non-printable ASCII characters.\\") return ' '.join(format(ord(char), '08b') for char in text) def binary_to_text(binary): Converts a binary representation string back to its original text string. try: binary_values = binary.split() text = ''.join(chr(int(b, 2)) for b in binary_values) if not all(32 <= ord(char) <= 126 for char in text): raise ValueError(\\"Decoded text contains non-printable ASCII characters.\\") return text except ValueError as e: raise ValueError(\\"Input binary string is invalid or contains non-printable ASCII characters.\\") from e"},{"question":"Create an efficient algorithm to find the median of an unsorted array of numbers without using built-in sorting functions. Additionally, implement the algorithm in such a way that it performs well for large datasets. The solution should be self-contained, making use of no external libraries apart from Python's stdlib.","solution":"def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i = i + 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quickselect(arr, low, high, k): if low == high: return arr[low] pivot_index = partition(arr, low, high) if k == pivot_index: return arr[k] elif k < pivot_index: return quickselect(arr, low, pivot_index - 1, k) else: return quickselect(arr, pivot_index + 1, high, k) def find_median(arr): n = len(arr) if n % 2 == 1: return quickselect(arr, 0, n - 1, n // 2) else: return 0.5 * (quickselect(arr, 0, n - 1, n // 2 - 1) + quickselect(arr, 0, n - 1, n // 2))"},{"question":"Write a python program to filter a list of numbers to only include numbers that are divisible by both 3 and 5, and sort them in descending order. The program should also calculate and display the product of all the numbers in the filtered list. The program should handle cases where the input list is empty and return an appropriate message.","solution":"def filter_and_process(numbers): Filters the list to include only numbers divisible by both 3 and 5, sorts them in descending order, and returns the product of these numbers. If the filtered list is empty, returns an appropriate message. filtered_numbers = [num for num in numbers if num % 3 == 0 and num % 5 == 0] filtered_numbers.sort(reverse=True) if not filtered_numbers: return \\"No numbers divisible by both 3 and 5 found.\\" product = 1 for num in filtered_numbers: product *= num return filtered_numbers, product"},{"question":"Reverse the given array and return it, but do not use any built-in array reversing functions or methods. Your solution should have a time complexity of O(n) and a space complexity of O(1).","solution":"def reverse_array(arr): Reverses the given array in place. left = 0 right = len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"}]`),F={name:"App",components:{PoemCard:I},data(){return{searchQuery:"",visibleCount:4,poemsData:C,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},z={class:"card-container"},E={key:0,class:"empty-state"},N=["disabled"],S={key:0},L={key:1};function D(i,e,l,m,s,a){const f=g("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",z,[(n(!0),r(b,null,v(a.displayedPoems,(o,p)=>(n(),w(f,{key:p,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",E,' No results found for "'+d(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",L,"Loading...")):(n(),r("span",S,"See more"))],8,N)):u("",!0)])}const W=c(F,[["render",D],["__scopeId","data-v-de2f3287"]]),G=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"library/17.md","filePath":"library/17.md"}'),V={name:"library/17.md"},M=Object.assign(V,{setup(i){return(e,l)=>(n(),r("div",null,[x(W)]))}});export{G as __pageData,M as default};
