import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as _,f as l,F as w,p as y,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},E={class:"review-title"},I={class:"review-content"};function N(r,e,u,m,s,a){return n(),i("div",T,[t("div",q,[t("div",E,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",I,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const A=d(k,[["render",N],["__scopeId","data-v-b10254bf"]]),O=JSON.parse('[{"question":"Administrators need your assistance in managing a university\'s online examination system. You need to create solutions for two tasks. First, write a function that, given an array of students\' scores and the passing score, returns an array of booleans where each boolean indicates whether the corresponding student has passed or not. Second, write a function that, given an array of students\' scores, returns an object containing: 1. The highest score `highest`. 2. The lowest score `lowest`. 3. The average score rounded to 2 decimals `average`. 4. The total number of students who scored above average `aboveAverageCount`. Ensure that both functions handle edge cases such as empty arrays or all students having the same score.","solution":"def did_students_pass(scores, passing_score): Given an array of students\' scores and the passing score, returns an array of booleans indicating whether each student has passed. Parameters: scores (list): List of students\' scores (integers). passing_score (int): The passing score. Returns: list: List of booleans indicating pass (True) or fail (False) for each student. return [score >= passing_score for score in scores] def score_statistics(scores): Given an array of students\' scores, returns an object containing: - The highest score `highest`. - The lowest score `lowest`. - The average score rounded to 2 decimals `average`. - The total number of students who scored above average `aboveAverageCount`. Parameters: scores (list): List of students\' scores (integers). Returns: dict: Dictionary containing highest, lowest, average, aboveAverageCount. if not scores: return {\\"highest\\": None, \\"lowest\\": None, \\"average\\": None, \\"aboveAverageCount\\": 0} highest = max(scores) lowest = min(scores) average = round(sum(scores) / len(scores), 2) above_average_count = sum(1 for score in scores if score > average) return { \\"highest\\": highest, \\"lowest\\": lowest, \\"average\\": average, \\"aboveAverageCount\\": above_average_count }"},{"question":"There is a string ( s ) consisting of ( N ) lowercase English letters. You need to find the length of the longest substring of ( s ) that contains at most ( k ) distinct characters. -----Input----- - The first line of the input contains a single integer ( t ) denoting the number of test cases. The description of ( t ) test cases follows. - The first line of each test case contains an integer ( k ). - The second line of each test case contains a string ( s ). -----Output----- For each test case, print a single line containing one integer: the length of the longest substring with at most ( k ) distinct characters. -----Constraints----- - ( 1 leq t leq 10^4 ) - ( 1 leq k leq 26 ) - ( 1 leq |s| leq 10^5 ) - The sum of the lengths of all strings over all test cases doesn\'t exceed ( 10^6 ) -----Example Input----- 3 2 abcba 1 aa 3 abaccc -----Example Output----- 3 2 5 -----Explanation----- Example case 1: The longest substring with at most two distinct characters in \\"abcba\\" is \\"bcb\\", which has length 3. Example case 2: The longest substring with at most one distinct character in \\"aa\\" is \\"aa\\", which has length 2. Example case 3: The longest substring with at most three distinct characters in \\"abaccc\\" is \\"abaccc\\", which has length 6.","solution":"def longest_substring_with_k_distinct(s, k): Returns the length of the longest substring with at most k distinct characters. from collections import defaultdict char_count = defaultdict(int) left = 0 max_length = 0 for right in range(len(s)): char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length def process_test_cases(t, test_cases): results = [] for i in range(t): k, s = test_cases[i] results.append(longest_substring_with_k_distinct(s, k)) return results"},{"question":"Alice loves collecting rare gemstones, and she has recently acquired a collection of n gemstones, each of different values. She wants to display these gemstones in a special sequence such that the overall value of the collection, when viewed from left to right, forms a strictly increasing subsequence. However, arranging the gemstones in this way is not trivial, and Alice needs your help. You are given the values of the gemstones, and your task is to determine two things: 1. The length of the longest strictly increasing subsequence of gemstone values. 2. One example of such a subsequence. -----Input----- The first line contains an integer n (1 leq n leq 3,000) — the number of gemstones in the collection. The second line contains n space-separated integers a_1, a_2, dots, a_n (1 leq a_i leq 10,000) — the values of the gemstones. -----Output----- On the first line, print a single integer — the length of the longest strictly increasing subsequence. On the second line, print the values of an example of such a subsequence in the order they appear. -----Examples----- Input 6 5 2 8 6 3 6 Output 3 2 6 8 Input 8 10 9 2 5 3 7 101 18 Output 4 2 3 7 101 -----Note----- In the first sample, one of the longest strictly increasing subsequences is 2, 6, 8, which has length 3. In the second sample, one of the longest strictly increasing subsequences is 2, 3, 7, 101, which has length 4.","solution":"def longest_increasing_subsequence(arr): if not arr: return 0, [] n = len(arr) dp = [1] * n prev = [-1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev[i] = j max_len = max(dp) index = dp.index(max_len) lis = [] while index != -1: lis.append(arr[index]) index = prev[index] lis.reverse() return max_len, lis"},{"question":"# Task: Write a function that flattens a nested list of integers and strings while preserving the order of the elements. The function should be able to handle nesting of arbitrary depth, but only the innermost elements that are integers should be added to the final list. Strings should be ignored. If the input is not a list, return an empty list. # Function Signature: ```python def flatten_list(nested_list: list) -> list: ``` # Input: - `nested_list`: A list, which may contain other lists, integers, and strings at arbitrary depths. # Output: - A single list containing all the integers from the input list, in the same order they appeared, regardless of depth. # Example: ```python flatten_list([1, \'a\', [2, \'b\', [3, [4, \'c\']], 5], [\'d\'], 6]) # Output: [1, 2, 3, 4, 5, 6] flatten_list([\'a\', [\'b\', [\'c\']]]) # Output: [] flatten_list(5) # Output: [] flatten_list([]) # Output: [] ``` # Constraints: - Elements can be integers, strings, or lists. - Non-list input should return an empty list. - Maintain the order of the integers as they appear in the input. - The function should handle deeply nested structures efficiently. # Hints: - Consider using a recursive approach to navigate through the nested lists. - Use helper functions if necessary to keep the code clean and readable.","solution":"def flatten_list(nested_list): Flattens a nested list of integers and strings while preserving the order of the integers. Strings are ignored. Only the innermost integers are added to the final list. If the input is not a list, an empty list is returned. :param nested_list: list containing integers, strings, and sublists :return: a list containing all the integers from the input list in order def flatten(nested): for elem in nested: if isinstance(elem, list): yield from flatten(elem) elif isinstance(elem, int): yield elem if not isinstance(nested_list, list): return [] return list(flatten(nested_list))"},{"question":"# Task: Write a function `find_largest_anagram` that takes a list of strings and returns the largest group of anagrams. Each group of anagrams should be represented as a sorted list within the overall list of groups. If there are multiple groups of the same size, you can return any of them. Examples: ```python find_largest_anagram([\\"bat\\", \\"tab\\", \\"cat\\", \\"act\\", \\"tac\\", \\"dog\\", \\"god\\", \\"dorm\\"]) > [[\\"cat\\", \\"act\\", \\"tac\\"]] # The size of this group is 3 find_largest_anagram([\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"googol\\", \\"elgoog\\"]) > [[\\"google\\", \\"elgoog\\", \\"googol\\"]] # Both groups \\"listen\\" and \\"google\\" have the same size find_largest_anagram([\\"note\\", \\"tone\\", \\"stone\\", \\"notes\\"]) > [[\\"note\\", \\"tone\\"]] # This is one of the possible correct results as there are multiple valid groups with size 2 ``` # Constraints: * The input list will always have at least one element. * The input list length will be at most 5000. * Each string in the list consists only of lowercase English letters and its length will be at most 10.","solution":"from collections import defaultdict def find_largest_anagram(words): This function takes a list of strings and returns the largest group of anagrams. anagram_groups = defaultdict(list) # Group words by their sorted tuple of letters for word in words: key = tuple(sorted(word)) anagram_groups[key].append(word) # Find the largest group of anagrams largest_group = max(anagram_groups.values(), key=len) # Return the largest group of anagrams sorted alphabetically return [sorted(largest_group)]"},{"question":"You are given a string S consisting of only uppercase alphabets. Your task is to find the character with the maximum frequency in the string and output it along with its frequency. If there are multiple such characters with the same maximum frequency, you should output the lexicographically smallest one. -----Input:----- - A single line contains the string S. -----Output:----- - Output the character with the highest frequency followed by its frequency in a single line. -----Constraints----- - 1 <= length of S <= 1000 -----Sample Input:----- ABBCC -----Sample Output:----- B 2","solution":"def max_frequency_char(S): Returns the character with the highest frequency and its count in the string S. If multiple characters have the same highest frequency, the lexicographically smallest one is returned. from collections import Counter # Counting frequency of each character in the string frequency = Counter(S) # Sorting characters first by frequency (descending), then lexicographically (ascending) most_common = sorted(frequency.items(), key=lambda item: (-item[1], item[0])) # The first item in the sorted list is the required character along with its frequency character, freq = most_common[0] return f\\"{character} {freq}\\""},{"question":"Matthew is creating a new online store where customers can purchase a variety of products. One of the main features of the store is a recommendation system that suggests products based on previous purchase patterns. Matthew needs your help to determine the best products to recommend. Given a sequence of product purchases, find the longest contiguous subsequence where no product is repeated. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N which represents the number of products purchased. - The second line contains N space-separated integers P_1, P_2, ..., P_N representing the sequence of product identifiers. -----Output----- For each test case, print a single integer representing the length of the longest contiguous subsequence with all unique product identifiers. -----Constraints----- - 1 le T le 10 - 1 le N le 10^5 - 1 le P_i le 10^6 for each valid i -----Example Input----- 1 7 2 3 4 5 3 4 2 -----Example Output----- 4 -----Explanation----- Example case 1: The longest contiguous subsequence with all unique product identifiers is 2, 3, 4, 5 which has a length of 4.","solution":"def longest_unique_subsequence_length(N, products): Function to find the length of longest contiguous subsequence with unique product identifiers. product_positions = {} start = 0 max_length = 0 for end in range(N): if products[end] in product_positions: start = max(start, product_positions[products[end]] + 1) product_positions[products[end]] = end max_length = max(max_length, end - start + 1) return max_length def process_input_output(T, test_cases): Process multiple test cases and return results. results = [] for i in range(T): N, products = test_cases[i] results.append(longest_unique_subsequence_length(N, products)) return results"},{"question":"Create a function that takes a list of integers and an integer target sum. The function should determine if there are any two distinct numbers in the list that add up to the target sum. If such a pair exists, return a tuple containing the two numbers. If no such pair exists, return `None`. For example: `find_pair([10, 5, 2, 3, 7, 5], 10)` should return `(7, 3)` `find_pair([1, 2, 3, 4, 5], 10)` should return `None` `find_pair([1, 3, 5], 8)` should return `(3, 5)`","solution":"def find_pair(l, target_sum): Determines if there are any two distinct numbers in the list that add up to the target sum. If such a pair exists, return a tuple containing the two numbers. If no such pair exists, return None. seen = set() for number in l: complement = target_sum - number if complement in seen: return (complement, number) seen.add(number) return None"},{"question":"Given a list of files in a directory and their respective sizes, write a function to find and return the duplicate files. Two files are considered duplicates if they have the same size and content. You are provided with a list of tuples where each tuple contains the name of the file as a string and its size in bytes as an integer. For simplicity, assume that contents of files with the same size will be represented by the same string. Your task is to find the list of duplicate files. Return the list of duplicates where each duplicate is represented by a list of file names. # Examples: Input: ``` [(\'file1.txt\', \'abcd\', 100), (\'file2.txt\', \'efgh\', 200), (\'file3.txt\', \'abcd\', 100), (\'file4.txt\', \'ijkl\', 300), (\'file5.txt\', \'abcd\', 100)] ``` Output: ``` [[\'file1.txt\', \'file3.txt\', \'file5.txt\']] ``` # Further Requirements: - If there are no duplicates, return an empty list. - If the input list is empty or contains only one file, return an empty list. - Assume case sensitivity in file names and file contents (\\"file\\" and \\"File\\" are different). - Optimize your solution to handle large directories with thousands of files.","solution":"from collections import defaultdict def find_duplicate_files(files): Returns a list of lists where each inner list contains names of files that are duplicates. Two files are considered duplicates if they have the same size and content. Args: files (list): List of tuples where each tuple contains file name (str), file content (str), and file size (int). Returns: list: List of lists containing names of duplicate files. content_map = defaultdict(list) # Populate the content map with file names grouped by their size and content for file_name, file_content, file_size in files: content_map[(file_content, file_size)].append(file_name) # Extract the lists of duplicates duplicates = [file_names for file_names in content_map.values() if len(file_names) > 1] return duplicates"},{"question":"In a distant land, there is a new software being developed for a library management system. One of the key features of this system is the ability to categorize books quickly based on their ISBN (International Standard Book Number). The ISBN of a book is a unique identifier and can be either 10 or 13 characters long. Your task is to implement a function **isValidISBN** that takes a single string argument **isbn** and returns **true** if the ISBN is valid according to the following rules, and **false** otherwise: 1. An ISBN-10 is a 10-digit number where the first 9 digits can be any digit between 0-9, and the last digit (checksum) can be 0-9 or X, which represents the value 10. The checksum digit is calculated as: `(10*d1 + 9*d2 + 8*d3 + ... + 2*d9 + 1*d10) % 11 == 0`. 2. An ISBN-13 is a 13-digit number where the checksum is calculated as: `(1*d1 + 3*d2 + 1*d3 + 3*d4 + ... + 3*d12 + 1*d13) % 10 == 0`. 3. The function should also handle the cases where the input string contains hyphens (\\"-\\") that may appear anywhere in the string. Hyphens should be ignored when validating the ISBN. For example: - isValidISBN(\\"0-306-40615-2\\") should return true (valid ISBN-10) - isValidISBN(\\"978-3-16-148410-0\\") should return true (valid ISBN-13) - isValidISBN(\\"123456789X\\") should return true (valid ISBN-10) - isValidISBN(\\"123456789\\") should return false (invalid because it\'s neither a valid ISBN-10 nor ISBN-13) Here are some constraints: - The function will only be tested with well-formed strings that only include digits and possibly hyphens, with a total length of either 10, 13, or including hyphens having more characters. Help the librarians ensure all the books are correctly identified with your function!","solution":"def isValidISBN(isbn): Validates whether the given ISBN is valid according to ISBN-10 and ISBN-13 rules isbn = isbn.replace(\'-\', \'\') if len(isbn) == 10: return is_valid_isbn10(isbn) elif len(isbn) == 13: return is_valid_isbn13(isbn) return False def is_valid_isbn10(isbn): if not isbn[:-1].isdigit() or (isbn[-1] not in \\"0123456789X\\"): return False sum = 0 for i in range(9): sum += int(isbn[i]) * (10 - i) if isbn[-1] == \'X\': sum += 10 else: sum += int(isbn[-1]) return sum % 11 == 0 def is_valid_isbn13(isbn): if not isbn.isdigit(): return False sum = 0 for i in range(12): if i % 2 == 0: sum += int(isbn[i]) else: sum += 3 * int(isbn[i]) sum += int(isbn[12]) return sum % 10 == 0"},{"question":"Write a function that takes a list of integers and returns a list with each integer incremented by its index in the original list. The function should handle an empty list as input and return an empty list in such cases. ```python increment_by_index([]) # => [] increment_by_index([0, 1, 2, 3]) # => [0, 2, 4, 6] increment_by_index([-5, 0, 5]) # => [-5, 1, 7] ```","solution":"def increment_by_index(lst): Takes a list of integers and returns a list with each integer incremented by its index in the original list. Returns an empty list if the input list is empty. return [num + idx for idx, num in enumerate(lst)]"},{"question":"Given an integer array nums, find and return all the triplets [nums[i], nums[j], nums[k]] (i ≠ j ≠ k), such that the triplets sum up to a given target value. Note that the result should not contain duplicate triplets. Example 1: Input: nums = [-1,0,1,2,-1,-4], target = 0 Output: [[-1,-1,2],[-1,0,1]] Explanation: nums[0] + nums[4] + nums[3] = -1 + (-1) + 2 = 0 nums[1] + nums[0] + nums[2] = 0 + (-1) + 1 = 0 Example 2: Input: nums = [1,2,3,4,5,6], target = 10 Output: [[1,3,6],[2,3,5],[1,4,5]] Explanation: nums[0] + nums[2] + nums[5] = 1 + 3 + 6 = 10 nums[1] + nums[2] + nums[4] = 2 + 3 + 5 = 10 nums[0] + nums[3] + nums[4] = 1 + 4 + 5 = 10 Example 3: Input: nums = [5,5,5,5], target = 15 Output: [[5,5,5]] Explanation: nums[0] + nums[1] + nums[2] = 5 + 5 + 5 = 15 Constraints: - 3 ≤ nums.length ≤ 3000 - -10^3 ≤ nums[i] ≤ 10^3 - -10^5 ≤ target ≤ 10^5","solution":"def three_sum(nums, target): Find all unique triplets in the array that sum up to the given target. :param nums: List of integers :param target: Target sum for the triplets :return: List of unique triplets that sum up to the target nums.sort() res = [] n = len(nums) for i in range(n): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == target: res.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return res"},{"question":"Create a function that takes a string as input and checks if it is a valid palindrome, ignoring spaces, punctuation, and case differences. A palindrome reads the same forward and backward. Note: Assume the input will only contain alphanumeric characters and the symbols: \\" \\", \\".\\", \\"!\\", and \\",\\". Examples ``` \\"A man, a plan, a canal: Panama\\" ==> True Input string after removing spaces and punctuation: \\"amanaplanacanalpanama\\" Reverse of the string: \\"amanaplanacanalpanama\\" Since both are equal, the string is a palindrome. ``` ``` \\"Race car!\\" ==> True Input string after removing spaces and punctuation: \\"racecar\\" Reverse of the string: \\"racecar\\" Since both are equal, the string is a palindrome. ``` ``` \\"Hello, World!\\" ==> False Input string after removing spaces and punctuation: \\"helloworld\\" Reverse of the string: \\"dlrowolleh\\" Since both are not equal, the string is not a palindrome. ```","solution":"def is_palindrome(s): Checks if the given string s is a valid palindrome, ignoring spaces, punctuation, and case differences. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [c.lower() for c in s if c.isalnum()] # Compare the filtered string with its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"# Definition (Sum of Unique Array Elements) Given an array of integers, the task is to calculate the sum of all unique elements in the array. An element is considered unique if it appears exactly once in the array. ___ # Task **_Given_** an array of integers **_A_**, **_calculate the sum of unique elements_** in the array. Only consider elements that appear exactly once in the array. ___ # Notes * **_Only integer_** arrays *will be provided*. * The array can be empty. ___ # Input >> Output Examples: ``` python 1- sumUnique([1, 2, 3, 2, 4]) ==> return (8) ``` **_Explanation_**: **_Since_** *the unique elements in the array are* (1, 3, 4), **_sum of unique elements_** *is* 1 + 3 + 4 = 8. ___ ``` python 2- sumUnique([5, 5, 5, 5, 5]) ==> return (0) ``` **_Explanation_**: **_Since_** *there are no unique elements in the array, the sum of unique elements is* 0. ___ ``` python 3- sumUnique([10, 20, 30, 10, 20, 30, 40]) ==> return (40) ``` **_Explanation_**: **_Since_** *the only unique element in the array is* 40, **_the sum of unique elements is_** 40. ___ ___ **Enjoy Solving !!**","solution":"def sumUnique(arr): Returns the sum of unique elements in the array. An element is considered unique if it appears exactly once in the array. :param arr: List[int] - The input array of integers. :return: int - Sum of unique elements in the array. from collections import Counter element_count = Counter(arr) unique_elements = [element for element, count in element_count.items() if count == 1] return sum(unique_elements)"},{"question":"In a world where communication is increasingly digital, you have been tasked with developing a system to help manage email congestion by identifying spam messages using a simple algorithm. The algorithm classifies an email as spam if its \\"spam score\\" exceeds a certain threshold. The spam score of an email is calculated by summing up the weights of certain predefined keywords found in the email\'s content. Your task is to write a program that, given multiple emails and a list of predefined keywords with their corresponding weights, determines how many emails are classified as spam. -----Input Format:----- The first line contains one integer, T, which is the number of test cases. Each test case is then described in multiple lines. The first line of a test case contains two integers N and M, representing the number of emails and the number of predefined keywords, respectively, and an integer S, the spam score threshold. The next M lines each contain a keyword and its corresponding weight, separated by a space. Each of the following N lines describes an email\'s content. -----Output Format:----- For each test case, output one integer in a new line, which is the number of emails classified as spam. -----Constraints:----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 50 - 1 ≤ S ≤ 100 - Each keyword is a string of lower-case English alphabet with length between 1 and 20. - Each email content is a string of at most 1000 characters containing lower-case English alphabets and spaces. -----Example----- Input: 1 2 3 10 offer 4 free 5 win 3 free offer now you can win this Output: 1 -----Explanation:----- For the first test case, the emails are: 1. \\"free offer now\\" - Spam score = 5 + 4 = 9 (Not spam, as 9 < 10) 2. \\"you can win this\\" - Spam score = 3 = 3 (Not spam, as 3 < 10) No email is classified as spam in this case.","solution":"def calculate_spam_emails(T, cases): result = [] for i in range(T): N, M, S = cases[i][\'meta\'] keywords = cases[i][\'keywords\'] emails = cases[i][\'emails\'] keyword_weights = {kw[0]: kw[1] for kw in keywords} spam_count = 0 for email in emails: spam_score = sum(keyword_weights.get(word, 0) for word in email.split()) if spam_score > S: spam_count += 1 result.append(spam_count) return result"},{"question":"Given a square matrix filled with different integers, write a function to determine if all the diagonals from top-left to bottom-right are identical. Each diagonal should contain identical elements from top-left to bottom-right for the matrix to be considered as having identical diagonals. For example, given the below square matrices: Matrix 1: ``` 1 2 3 4 1 2 5 4 1 ``` In the above matrix, each diagonal from top-left to bottom-right has identical elements. Matrix 2: ``` 1 2 3 5 1 2 8 5 3 ``` In this matrix, not all diagonals contain identical elements (the bottom-right diagonal has different elements). Write a function `has_identical_diagonals(matrix)` that takes a square matrix (a list of lists) and returns `True` if all diagonals from top-left to bottom-right contain identical elements, otherwise, it returns `False`. ```python def has_identical_diagonals(matrix): size = len(matrix) if size == 0: # Empty matrix return True for i in range(size): x, y = 0, i diag_val = matrix[x][y] while x < size and y < size: if matrix[x][y] != diag_val: return False x += 1 y += 1 for i in range(1, size): x, y = i, 0 diag_val = matrix[x][y] while x < size and y < size: if matrix[x][y] != diag_val: return False x += 1 y += 1 return True # Test cases matrix1 = [ [1, 2, 3], [4, 1, 2], [5, 4, 1] ] matrix2 = [ [1, 2, 3], [5, 1, 2], [8, 5, 3] ] print(has_identical_diagonals(matrix1)) # True print(has_identical_diagonals(matrix2)) # False ``` Explanation: - The function `has_identical_diagonals()` checks the condition for each diagonal. - If all diagonals from top-left to bottom-right contain the same element, the function returns `True`; otherwise, it returns `False`.","solution":"def has_identical_diagonals(matrix): size = len(matrix) if size == 0: # Empty matrix return True # Check diagonals starting from the first row for i in range(size): x, y = 0, i diag_val = matrix[x][y] while x < size and y < size: if matrix[x][y] != diag_val: return False x += 1 y += 1 # Check diagonals starting from the first column (excluding the top-left corner) for i in range(1, size): x, y = i, 0 diag_val = matrix[x][y] while x < size and y < size: if matrix[x][y] != diag_val: return False x += 1 y += 1 return True"},{"question":"You are given a list of integers representing transaction amounts on a particular day. Unfortunately, the list also includes some duplicate transactions due to a system error. Your task is to process the list and retain only unique transaction amounts in the same order as they first appear, and then calculate the sum of these unique amounts. Write a function `sum_unique_transactions(transactions)` that takes a list of integers `transactions` and returns the sum of unique transaction amounts, preserving their original order. # Input: - A single list `transactions`, with each element `transactions[i]` representing a transaction amount. # Output: - An integer representing the sum of unique transaction amounts. # Constraints: - The length of the list `transactions` will be between 1 and 10^6. - Each transaction amount will be between -10^9 and 10^9. # Example: ```python transactions = [100, 200, 100, 300, 200, 400] print(sum_unique_transactions(transactions)) # Output: 1000 ``` Explanation: The unique transaction amounts are [100, 200, 300, 400]. The sum is 100 + 200 + 300 + 400 = 1000.","solution":"def sum_unique_transactions(transactions): Returns the sum of unique transaction amounts, preserving their original order. seen = set() unique_transactions = [] for transaction in transactions: if transaction not in seen: seen.add(transaction) unique_transactions.append(transaction) return sum(unique_transactions)"},{"question":"A *[Binary Gap][1]* is defined as the maximum number of consecutive zeros that are surrounded by ones at both ends in the binary representation of a positive integer. Write a function that takes an integer *n* and returns the length of the longest binary gap within the binary representation of *n*. If there is no binary gap, return 0. Specifically: - For the number 9, binary representation is `1001`, the function should return 2. - For the number 529, binary representation is `1000010001`, the function should return 4. - For the number 20, binary representation is `10100`, the function should return 1. - For the number 15, binary representation is `1111`, the function should return 0. Your code should be able to handle integers up to 2^31 - 1 (i.e., 2147483647). [1]:https://en.wikipedia.org/wiki/Binary_Gap","solution":"def longest_binary_gap(n): Returns the length of the longest binary gap in the binary representation of n. A binary gap is defined as the maximum number of consecutive zeros that are surrounded by ones at both ends. binary_rep = bin(n)[2:] max_gap = 0 current_gap = 0 in_gap = False for bit in binary_rep: if bit == \'1\': if in_gap: max_gap = max(max_gap, current_gap) in_gap = True current_gap = 0 elif in_gap: current_gap += 1 return max_gap"},{"question":"You are given two strings, `s` and `t`, consisting of lowercase English letters. You need to determine the number of distinct subsequences of `s` that equal `t`. A subsequence of a string is obtained by deleting some (or none) of the characters in the string, keeping the remaining characters in the same order. Write a function to compute the number of distinct subsequences. Example 1: Input: s = \\"rabbbit\\", t = \\"rabbit\\" Output: 3 Explanation: There are 3 ways to get \\"rabbit\\" from \\"rabbbit\\". - Remove the first \'b\' from \\"rabbbit\\" to get \\"rabbit\\". - Remove the second \'b\' from \\"rabbbit\\" to get \\"rabbit\\". - Remove the third \'b\' from \\"rabbbit\\" to get \\"rabbit\\". Example 2: Input: s = \\"babgbag\\", t = \\"bag\\" Output: 5 Explanation: There are 5 ways to get \\"bag\\" from \\"babgbag\\". - Remove characters at indices 0, 1, 3 to get \\"bag\\". - Remove characters at indices 0, 2, 3 to get \\"bag\\". - Remove characters at indices 0, 1, 5 to get \\"bag\\". - Remove characters at indices 0, 2, 5 to get \\"bag\\". - Remove characters at indices 1, 2, 4 to get \\"bag\\". Note: The length of `s` will be at most 1000. The length of `t` will be at most 1000.","solution":"def numDistinct(s, t): Returns the number of distinct subsequences of s that equal t. m, n = len(s), len(t) if n == 0: return 1 if m == 0: return 0 # dp[i][j] will be storing the count of subsequences of s[0..i-1] in t[0..j-1] dp = [[0] * (n + 1) for _ in range(m + 1)] # Initializing the first column, when t is an empty subsequence for i in range(m + 1): dp[i][0] = 1 for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] return dp[m][n]"},{"question":"You are to write a function to generate the sequence of primes up to a given number, n. The function should return a list of prime numbers in ascending order. Prime numbers are numbers that are only divisible by 1 and themselves. The smallest prime number is 2. For example, generatePrimes(10) should return: ``` [2, 3, 5, 7] ``` And generatePrimes(30) should return: ``` [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] ``` If the input number is less than 2, the function should return an empty list, as there are no prime numbers less than 2. Considerations: - You may want to use the Sieve of Eratosthenes algorithm for an efficient solution. - Make sure your function handles edge cases, such as very small or very large numbers, efficiently.","solution":"def generate_primes(n): Generates a list of prime numbers up to a given number n (inclusive). Parameters: n (int): The upper limit for generating prime numbers. Returns: list: A list of prime numbers up to n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(2, n + 1) if sieve[num]]"},{"question":"Jack has recently started learning about tree data structures, and he is intrigued by the concept of tree traversals. As a learning exercise, Jack decided to write a program that performs different types of tree traversals on a binary tree. However, he\'s having trouble with one specific task. Given a binary tree, you need to write a program to find the kth node in the inorder traversal of the tree. The tree is provided in a specific format with each node having a unique integer value. An inorder traversal of a binary tree visits the nodes in the following order: 1. Visit the left subtree first. 2. Visit the root node. 3. Visit the right subtree. Your task is to support Jack in solving this problem by implementing the required functionality. # Input The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100,000), the number of nodes in the tree and the position of the node in the inorder traversal that needs to be determined. The following `n` lines contain three integers `v`, `l`, and `r` (1 ≤ v, l, r ≤ 100,000 or l, r = -1), describing each node of the tree: - `v`: the value of the node - `l`: the value of the left child node (or -1 if there is no left child) - `r`: the value of the right child node (or -1 if there is no right child) The first node given is always the root of the tree. # Output Output a single integer, the value of the kth node in the inorder traversal of the binary tree. # Example Input 8 4 5 3 7 3 2 4 2 -1 -1 4 -1 -1 7 6 8 6 -1 -1 8 -1 -1 Output 5 # Note In the given example, the inorder traversal of the tree results in the sequence [2, 3, 4, 5, 6, 7, 8]. The 4th node in this sequence is the node with value 5.","solution":"class TreeNode: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right def find_kth_inorder_node(n, k, nodes): # Create a dictionary to store nodes and their children tree = {} for v, l, r in nodes: tree[v] = TreeNode(value=v, left=l if l != -1 else None, right=r if r != -1 else None) # Build the actual tree nodes for node in tree.values(): if node.left is not None: node.left = tree[node.left] if node.right is not None: node.right = tree[node.right] # The root of the tree will be the first node given in the input root = tree[nodes[0][0]] # Inorder traversal to find kth node def inorder_traversal(node): if not node: return [] # Traverse the left subtree, then visit the root, then traverse the right subtree return inorder_traversal(node.left) + [node.value] + inorder_traversal(node.right) inorder_result = inorder_traversal(root) return inorder_result[k - 1] # kth node in 1-indexed # Example usage # n, k = 8, 4 # nodes = [(5, 3, 7), (3, 2, 4), (2, -1, -1), (4, -1, -1), (7, 6, 8), (6, -1, -1), (8, -1, -1)] # print(find_kth_inorder_node(n, k, nodes)) # Output: 5"},{"question":"A critical aspect of the task of converting a matrix to its diagonal form is handling the data smartly to shift elements into place. Let\'s delve into the structure to represent the problem: You are given a 2D matrix `M` of size `m x n`, where `m` is the number of rows and `n` is the number of columns. Your goal is to return a list containing the elements of the matrix in `diagonal order` starting from the top-left corner of the matrix. Diagonal order starts from the first element in the top-left direction, moving diagonally up to the top-right or end of the column, then continues from the left-most element not yet visited in the column below the previously visited element. For example, consider the following matrix: ``` M = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` In this case, traversal in diagonal order will yield: ``` [1, 2, 4, 7, 5, 3, 6, 8, 9] ``` Explanation: 1 starts, then diagonally to the top-right corner: 1 → 2, next diagonal starts from 4, moving to 4, next diagonal starts from 7, moving upwards: 7 → 5 and so on, after which returns to 3 and continues. Write a function: ```python def find_diagonal_order(matrix): # input: a 2-Dimensional List, where each inner list represents a row in the matrix M # output: a flattened list of the elements in diagonal order pass ``` # Input Specifications - An `m x n` matrix where 1 ≤ m, n ≤ 10^3. - Elements of matrix `M` will be integers where 1 ≤ M[i][j] ≤ 10^4 # Constraints - You should handle large matrices optimally, minimizing the time complexity. # Examples ```python find_diagonal_order([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) ``` Output: ``` [1, 2, 4, 7, 5, 3, 6, 8, 9] ``` ```python find_diagonal_order([[1, 2], [3, 4]]) ``` Output: ``` [1, 2, 3, 4] ``` In this problem, you are expected to understand the traversal mechanism of matrices and convert them into the said order efficiently.","solution":"def find_diagonal_order(matrix): Returns the elements of the matrix in diagonal order. if not matrix or not matrix[0]: return [] m, n = len(matrix), len(matrix[0]) result = [] for d in range(m + n - 1): # direction up-right if d is even, down-left if d is odd if d % 2 == 0: r = min(d, m - 1) c = max(0, d - m + 1) while r >= 0 and c < n: result.append(matrix[r][c]) r -= 1 c += 1 else: r = max(0, d - n + 1) c = min(d, n - 1) while r < m and c >= 0: result.append(matrix[r][c]) r += 1 c -= 1 return result"},{"question":"In a research facility, a set of computers are set up in a network. Each computer has a unique integer identifier from 1 to N. The network is represented as a list of direct connections, where each connection is described by a pair of integers (a, b), indicating that computer a is directly connected to computer b. An updated protocol requires each computer to maintain logs about how it can propagate a message to every other computer. To implement this, you need to determine the shortest path from each computer to all the other computers in terms of the number of connections. Your task is to write a program that constructs a matrix where the element at row i and column j represents the shortest path in terms of the number of connections from computer i to computer j. If there is no path from computer i to computer j, the corresponding element should be -1. -----Input:----- - First line contains an integer T, the number of test cases. Then the test cases follow. - For each test case: - The first line contains two integers N (number of computers) and M (number of direct connections). - The next M lines each contains two integers a and b, representing a direct connection between computer a and computer b. -----Output:----- - For each test case, output a matrix of size N times N where the element at row i and column j represents the shortest path from computer i to computer j. - If i is equal to j, the value should be 0 (distance from a computer to itself). - If there is no path from computer i to computer j, the value should be -1. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 50 - 0 leq M leq N(N-1)/2 - 1 leq a, b leq N - There are no duplicate connections and no self-loops. -----Sample Input:----- 2 3 2 1 2 2 3 4 4 1 2 2 3 3 4 4 1 -----Sample Output:----- 0 1 2 1 0 1 2 1 0 0 1 2 1 1 0 1 2 2 1 0 1 1 2 1 0 -----Explanation:----- For the first test case: - The shortest path from computer 1 to computer 2 is 1 connection, and from computer 2 to computer 3 is also 1 connection. To get from computer 1 to computer 3, we pass through computer 2, resulting in 2 connections. - The resulting matrix is: 0 1 2 1 0 1 2 1 0 For the second test case: - Each computer is directly connected to its adjacent computers, forming a loop. Therefore, the shortest paths between any two computers can be easily determined by traversing this loop. - The resulting matrix is: 0 1 2 1 1 0 1 2 2 1 0 1 1 2 1 0","solution":"def floyd_warshall(n, edges): Solves the all-pairs shortest path using Floyd-Warshall algorithm # Initialize the distance matrix with inf, and 0s on the diagonal dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 # Set initial distances based on the edge list for u, v in edges: dist[u-1][v-1] = 1 dist[v-1][u-1] = 1 # Apply Floyd-Warshall to find all shortest paths for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Convert inf back to -1 for no path result = [] for row in dist: result.append([d if d != float(\'inf\') else -1 for d in row]) return result def all_pairs_shortest_path(T, cases): Process multiple test cases for the all-pairs shortest path problem outputs = [] for case in cases: n, m, edges = case result = floyd_warshall(n, edges) outputs.append(result) return outputs"},{"question":"Sarah enjoys playing with strings. She is particularly fond of palindromes and wants to know if she can rearrange a given string to form a palindrome. A palindrome is a word that reads the same backward as forward. Can you help Sarah determine whether the given string can be rearranged into a palindrome? -----Input----- A single line containing a string s consisting of lowercase English letters. -----Output----- Print \\"Yes\\" if it is possible to rearrange the string to form a palindrome, otherwise print \\"No\\" (without quotes). -----Constraints----- - 1 ≤ |s| ≤ 1000 -----Example----- Input: civic Output: Yes -----Explanation----- The string \\"civic\\" itself is already a palindrome. Hence, the answer is \\"Yes\\".","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. Args: s (str): The input string consisting of lowercase English letters. Returns: str: \\"Yes\\" if the string can be rearranged into a palindrome, otherwise \\"No\\". from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd count if odd_count > 1: return \\"No\\" return \\"Yes\\""},{"question":"Given an array of integers `A = [a1, a2, ..., an]`, we define a *triplet* as a subset of three elements `(ai, aj, ak)` such that `1 <= i < j < k <= n`. The *weight* of a triplet `(ai, aj, ak)` is defined as `(aj - ai) + (ak - aj)`, which simplifies to `ak - ai`. Write a program that, given an array of integers, find the weight of the triplet in the array with the maximum weight. ----- Input ----- The first line contains an integer n (3 le n le 10^5), the size of the array. The second line contains n integers a1, a2, ..., an (1 le ai le 10^9), the elements of the array. ----- Output ----- Output a single integer, the maximum weight of any triplet in the array. ----- Examples ----- Input 5 5 1 9 3 7 Output 8 Input 4 4 3 1 2 Output 2 ----- Note ----- In the first sample, the triplet with elements `(5, 1, 9)` has the weight `9 - 5 = 4`, and the triplet with elements `(1, 3, 7)` has the weight `7 - 1 = 6` which is higher, and finally the greatest weight is from the triplet `(1, 9)` with the weight `9 - 1 = 8`. In the second sample, the triplet with the highest weight is `(1, 3)` which has a weight of `3 - 1 = 2`.","solution":"def max_triplet_weight(n, A): Returns the maximum weight of any triplet in the array. # The weight of the triplet is defined as (ak - ai) # Hence, to find the maximum weight, we just need to find # the maximum and minimum elements in the array and compute # their difference. max_value = max(A) min_value = min(A) return max_value - min_value"},{"question":"Danny loves to play with numbers and has recently learned about prime factorization. He wants to create a special number pattern. Given two integers N and K, he generates numbers based on the following rules: 1. Start with the number N. 2. In each step, add the sum of the prime factors of the current number to itself to get the next number in the sequence. 3. Repeat this process K times. Your task is to find the final number in the sequence after K steps. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two space-separated integers N and K. -----Output:----- For each test case, output the final number in the sequence after K steps. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 0 leq K leq 10^5 -----Sample Input:----- 2 10 2 15 3 -----Sample Output:----- 22 45 -----EXPLANATION:----- i) For the first test case: - Start with 10. The prime factors of 10 are 2 and 5. Sum = 7. - 10 + 7 = 17 (Step 1) - The prime factors of 17 are 17. Sum = 17. - 17 + 17 = 34 (Step 2) So, the final number is 34 after 2 steps. ii) For the second test case: - Start with 15. The prime factors of 15 are 3 and 5. Sum = 8. - 15 + 8 = 23 (Step 1) - The prime factors of 23 are 23. Sum = 23. - 23 + 23 = 46 (Step 2) - The prime factors of 46 are 2 and 23. Sum = 25. - 46 + 25 = 71 (Step 3) So, the final number is 71 after 3 steps.","solution":"def sum_of_prime_factors(n): Returns the sum of the prime factors of n. sum_factors = 0 # Dividing n by 2 until it\'s odd while n % 2 == 0: sum_factors += 2 n //= 2 # n must be odd at this point. So we start from 3 and only check for odd factors for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: sum_factors += i n //= i # This condition is to check if n is a prime number greater than 2 if n > 2: sum_factors += n return sum_factors def special_number_pattern(N, K): Returns the final number in the sequence generated after K steps starting from N. current_number = N for _ in range(K): current_number += sum_of_prime_factors(current_number) return current_number def process_test_cases(test_cases): results = [] for N, K in test_cases: results.append(special_number_pattern(N, K)) return results"},{"question":"Write a function `longestUniqueSubstring`/`longest_unique_substring` that accepts a string and returns the length of the longest substring that contains only unique characters. For example, given the input `\\"abcabcbb\\"`, the output should be `3` since the longest substring with unique characters is `\\"abc\\"`. Given the input `\\"bbbbb\\"`, the output should be `1` since the longest substring with unique characters is `\\"b\\"`.","solution":"def longest_unique_substring(s): Returns the length of the longest substring with unique characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(char_map[s[right]] + 1, left) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are participating in a competitive coding contest where you need to write a program to validate and process participants\' results. Every participant receives a score that must be normalized before adding to their final results. The normalization process involves squaring the score if it\'s an even number and cubing the score if it\'s an odd number. You need to write a program that processes multiple participants\' scores according to these rules. -----Input:----- The first line contains a single integer t (1 ≤ t ≤ 500) — the number of participants. The second line contains t integers separated by space representing the scores of the participants (0 ≤ score ≤ 100). -----Output:----- Print t integers separated by space, which are the normalized scores of the participants in the same order they appeared in the input. -----Sample Input:----- 5 2 3 4 5 6 -----Sample Output:----- 4 27 16 125 36","solution":"def normalize_scores(t, scores): Normalizes the scores according to the rules: - Square the score if it\'s even - Cube the score if it\'s odd Returns the normalized scores as a list. result = [] for score in scores: if score % 2 == 0: result.append(score ** 2) else: result.append(score ** 3) return result"},{"question":"You are a firefighter responding to multiple wildfires in a forest. Each section of the forest has a certain intensity represented by an integer array. To extinguish the fires, you need to deploy water units. The deployment works such that you can\'t deploy units in two adjacent sections of the forest simultaneously due to logistical constraints. Given a list of non-negative integers representing the intensity of fires in each section of the forest, determine the minimum number of water units you need to deploy to extinguish the fires in the forest without violating the constraint. Example 1: Input: fires = [1, 2, 3, 1] Output: 4 Explanation: Deploy water units to extinguish fire in section 1 (intensity = 1) and then in section 3 (intensity = 3). Total water units = 1 + 3 = 4. Example 2: Input: fires = [2, 7, 9, 3, 1] Output: 12 Explanation: Deploy water units to extinguish fire in section 1 (intensity = 2), section 3 (intensity = 9), and section 5 (intensity = 1). Total water units = 2 + 9 + 1 = 12. Constraints: 0 <= fires.length <= 100 0 <= fires[i] <= 400","solution":"def min_water_units(fires): This function determines the minimum number of water units needed to extinguish fires in the forest without deploying units into two adjacent sections simultaneously. :param fires: List[int], a list of non-negative integers representing the intensity of fires :return: int, the minimum number of water units needed # If the list is empty, no water units are needed if not fires: return 0 # If there\'s only one section, deploy water to that section if len(fires) == 1: return fires[0] # Use dynamic programming to find the minimum water units needed n = len(fires) dp = [0] * n # Initialize the first two values of dp dp[0] = fires[0] dp[1] = max(fires[0], fires[1]) # Fill the dp array for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + fires[i]) return dp[-1]"},{"question":"Given a grid of characters where each cell can hold a single lowercase letter, write a function to find and return the largest connected region of the same character. A region is considered connected if it shares a common border with another cell containing the same character (i.e., adjacent cells in vertical or horizontal directions, but not diagonal). Input: - A 2D list of characters, grid, representing the character grid. - grid[i][j] contains a lowercase letter (\'a\' to \'z\'). Output: - Return an integer representing the size of the largest connected region of the same character. Example 1: Input: grid = [ [\'a\', \'b\', \'b\'], [\'b\', \'b\', \'a\'], [\'a\', \'a\', \'b\'] ] Output: 4 Explanation: The largest connected region is the \'b\' at positions (0,1), (0,2), (1,0), and (1,1). Example 2: Input: grid = [ [\'a\', \'a\', \'a\'], [\'a\', \'a\', \'a\'], [\'a\', \'a\', \'a\'] ] Output: 9 Explanation: All cells are connected and have the same character \'a\'. Example 3: Input: grid = [ [\'x\'] ] Output: 1 Explanation: The grid contains only one cell with character \'x\'. Constraints: 1. 1 <= grid.length, grid[i].length <= 50 2. grid[i][j] contains only lowercase English letters (\'a\' to \'z\')","solution":"def largest_connected_region(grid): Finds the size of the largest connected region of the same character in the grid. def dfs(x, y, char, visited): if (x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or visited[x][y] or grid[x][y] != char): return 0 visited[x][y] = True size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: size += dfs(x + dx, y + dy, char, visited) return size if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] max_region_size = 0 for i in range(rows): for j in range(cols): if not visited[i][j]: max_region_size = max(max_region_size, dfs(i, j, grid[i][j], visited)) return max_region_size"},{"question":"Write a function that takes a non-negative integer as input and returns a string representing the number in Roman numerals. Roman numerals are represented by the following symbols: - I: 1 - V: 5 - X: 10 - L: 50 - C: 100 - D: 500 - M: 1000 The function should handle numbers from 1 to 3999. # Example For the input of `1987`, the function should return `\\"MCMLXXXVII\\"`. **Note:** - The input will always be a valid non-negative integer within the specified range.","solution":"def int_to_roman(num): Converts a non-negative integer to a Roman numeral string. :param num: int: A non-negative integer :return: str: Roman numeral representation of the number. if not (1 <= num <= 3999): raise ValueError(\\"Number out of range (must be 1-3999)\\") val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syms[i] num -= val[i] i += 1 return roman_num"},{"question":"=====Problem Statement===== You are given a string `s` consisting of lowercase English letters. Your task is to determine if it is possible to remove at most one character from the string so that it becomes a palindrome. A palindrome is a string that reads the same backward as forward. =====Constraints===== 1 ≤ |s| ≤ 10^5 =====Input Format===== A single line containing the string `s`. =====Output Format===== Output \\"YES\\" if it\'s possible to remove at most one character to make the string a palindrome. Otherwise, output \\"NO\\".","solution":"def can_be_palindrome_with_one_removal(s): Returns \'YES\' if it\'s possible to remove at most one character to make the string a palindrome, otherwise returns \'NO\'. def is_palindrome_range(s, left, right): while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Check both scenarios: removing left or right character if is_palindrome_range(s, left + 1, right) or is_palindrome_range(s, left, right - 1): return \\"YES\\" else: return \\"NO\\" left += 1 right -= 1 # If the loop completes without finding mismatched characters, it\'s already a palindrome return \\"YES\\""},{"question":"Given an array of integers, move all the occurences of a specified value to the end while maintaining the relative order of the other elements. Example 1: Input: arr = [4, 1, 2, 4, 3, 4, 5], value = 4 Output: [1, 2, 3, 5, 4, 4, 4] Example 2: Input: arr = [1, 2, 3, 3, 3, 4, 5], value = 3 Output: [1, 2, 4, 5, 3, 3, 3] Example 3: Input: arr = [5, 5, 5, 5, 5], value = 5 Output: [5, 5, 5, 5, 5] Note: 1. The length of the array will be in the range [1, 100]. 2. All elements in the array will be integers in the range [-100, 100].","solution":"def move_value_to_end(arr, value): Move all occurrences of \'value\' to the end of the array while maintaining the relative order of the other elements. :param arr: List[int] - List of integers. :param value: int - The value to move to the end. :return: List[int] - Modified list with \'value\' moved to the end. other_elements = [x for x in arr if x != value] value_count = arr.count(value) other_elements.extend([value] * value_count) return other_elements"},{"question":"# Task Write a function that, given a list of integers `lst`, returns the greatest difference between any two integers in it. # Example For `lst = [1, 2, 3, 8, 9]`, the output should be `8` (difference between 9 and 1). For `lst = [5, 1, -10, 5, 10]`, the output should be `20` (difference between 10 and -10). # Input/Output - `[input]` list of integers `lst` A list of integers. Constraints: `3 ≤ lst.length ≤ 100`, `-1000 ≤ lst[i] ≤ 1000`. - `[output]` an integer The greatest difference between any two integers in the list.","solution":"def greatest_difference(lst): Returns the greatest difference between any two integers in the list. return max(lst) - min(lst)"},{"question":"Given an array of integers, you want to perform a series of operations to make all the elements of the array equal. In one operation, you can increment or decrement any element of the array by 1. You need to find the minimum number of operations required to make all the elements equal. -----Input----- - The first line contains a single integer n, the number of elements in the array. - The second line contains n integers a_1, a_2, ldots, a_n representing the elements of the array. -----Output----- - Print a single integer, the minimum number of operations required to make all the elements equal. -----Constraints----- - 1 leq n leq 10^5 - -10^9 leq a_i leq 10^9 -----Sample Input----- 4 1 2 3 4 -----Sample Output----- 4 -----Explanation----- - One way to make all elements equal is to make them all 2, which takes (1 -> 2) + (2 -> 2) + (3 -> 2) + (4 -> 2) = 1 + 0 + 1 + 2 = 4 operations. -----Note----- - The optimal solution involves making all elements equal to the median of the array, as it minimizes the sum of absolute deviations.","solution":"def min_operations_to_equal_elements(n, array): Returns the minimum number of operations required to make all the elements in the array equal. # Sort the array to find the median. array.sort() # Find the median. median = array[n // 2] # Calculate the total number of operations needed. operations = sum(abs(x - median) for x in array) return operations"},{"question":"Count the number of 1s (bits that are set to 1) in the binary representation of an integer `n`. Assume that: * `n` is an unsigned, 32-bit integer. Examples ``` 5 --> 2 (binary representation: 5 = 0b101) 13 --> 3 (binary representation: 13 = 0b1101) 255 --> 8 (binary representation: 255 = 0b11111111) ```","solution":"def count_ones(n): Returns the number of 1s (bits that are set to 1) in the binary representation of the integer `n`. return bin(n).count(\'1\')"},{"question":"A transport company needs to optimize the route for its delivery trucks. They hire you as a software engineer to develop an efficient route planning algorithm. You need to write a function that, given a list of destinations with distances between them, determines the shortest possible route that visits each destination exactly once and returns to the starting point. Problem Statement You are given a list of `n` destinations (0 through n-1) and a matrix `distances` where `distances[i][j]` represents the distance between destinations `i` and `j`. Your task is to find the minimum travel distance required to visit all destinations exactly once and return to the starting point. Input - An integer `n` (2 ≤ n ≤ 12), the number of destinations. - A 2D list `distances` of size `n x n` where `distances[i][j]` is an integer (1 ≤ distances[i][j] ≤ 1000), representing the distance between the `i`-th and `j`-th destination. Output - An integer, the minimum travel distance required to visit all destinations exactly once and return to the starting point. Example # Input ``` 4 [ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ] ``` # Output ``` 80 ``` # Explanation The optimal route is 0 -> 1 -> 3 -> 2 -> 0 with a total distance of 80.","solution":"import itertools def shortest_route(n, distances): Finds the minimum travel distance required to visit all destinations exactly once and return to the starting point. Parameters: n (int): The number of destinations. distances (List[List[int]]): The 2D list of distances between destinations. Returns: int: The minimum travel distance. min_distance = float(\'inf\') # Generate all possible permutations of the destinations, excluding the start point 0 permutations = itertools.permutations(range(1, n)) for perm in permutations: current_distance = 0 current_point = 0 # start from point 0 # Calculate the distance for the current permutation for next_point in perm: current_distance += distances[current_point][next_point] current_point = next_point # Add the return distance to the start point current_distance += distances[current_point][0] # Update the minimum distance found if current_distance < min_distance: min_distance = current_distance return min_distance"},{"question":"Write a function `flatten` that will take a nested list as input and return a flattened list. The input list can contain any level of nested lists, and the function should recursively concatenate all elements and sub-elements into a single list. For example: `flatten([1, [2, 3, [4]], 5])` should return `[1, 2, 3, 4, 5]`. Another example: `flatten([[1, 2, [3, 4]], [5], 6])` should return `[1, 2, 3, 4, 5, 6]`. You can assume that the input will always be a list, but the elements can be integers or nested lists of integers. Good luck!","solution":"def flatten(nested_list): Flattens a nested list into a single list. Parameters: nested_list (list): A list that can contain more lists or integers. Returns: list: A flattened version of the nested list. result = [] for element in nested_list: if isinstance(element, list): result.extend(flatten(element)) else: result.append(element) return result"},{"question":"Design a function that takes an unsorted list of integers and returns the same list but sorted in the \'wiggle\' order. A list is in \'wiggle\' order if `nums[0] <= nums[1] >= nums[2] <= nums[3] >= ...` Example ----- `wiggle_sort([3, 5, 2, 1, 6, 4])` should return `[3, 5, 1, 6, 2, 4]` Another example ----- `wiggle_sort([1, 3, 2, 2, 3, 4])` could return `[1, 3, 2, 4, 2, 3]` Note ----- Multiple correct outputs exist, any valid wiggle order is acceptable.","solution":"def wiggle_sort(nums): Sort the given list in \'wiggle\' order, where nums[0] <= nums[1] >= nums[2] <= nums[3]... for i in range(1, len(nums)): if (i % 2 == 1 and nums[i] < nums[i - 1]) or (i % 2 == 0 and nums[i] > nums[i - 1]): nums[i], nums[i - 1] = nums[i - 1], nums[i] return nums"},{"question":"**Hacker Wars: Path Hacking Challenge** In the popular strategy game, \\"Hacker Wars,\\" players need to navigate a maze filled with traps and bonuses to reach a goal. Your task is to create a function that evaluates the paths taken by players and calculates their total score. Create a function called `evaluate_paths()` that takes an array of Path objects. Each Path object represents a single route taken by a player, with various properties that contribute to their total score. A player\'s score is calculated as follows: 1. Each step in the path is worth 1 point. 2. Each trap encountered in the path deducts 50 points. 3. Each bonus collected in the path adds 200 points. 4. Each teleport used in the path adds 100 points but also deducts 2 points for every step up to and including the teleport. 5. Each loop (revisiting any node in the path more than once) deducts 75 points for each loop iteration (visiting the same node twice counts as one iteration). Assume that each Path object contains the following keys: - \'name\': a string representing the player\'s name. - \'steps\': an integer representing the number of total steps taken. - \'traps\': an integer representing the number of traps encountered. - \'bonuses\': an integer representing the number of bonuses collected. - \'teleports\': an integer representing the number of times teleport was used. - \'loops\': an integer representing the number of loop iterations encountered. Your function should return an array of player names, ordered by their total score in descending order (highest score is index 0, 2nd highest is index 1, etc.). Players with the same score should be sorted by the order they appear in the input array. For example, given the following input: ``` [ {\'name\': \'Alice\', \'steps\': 300, \'traps\': 2, \'bonuses\': 1, \'teleports\': 1, \'loops\': 3}, {\'name\': \'Bob\', \'steps\': 500, \'traps\': 1, \'bonuses\': 0, \'teleports\': 2, \'loops\': 1}, {\'name\': \'Charlie\', \'steps\': 200, \'traps\': 3, \'bonuses\': 2, \'teleports\': 0, \'loops\': 2} ] ``` The function should output: `[\'Charlie\', \'Alice\', \'Bob\']`","solution":"def evaluate_paths(paths): Evaluates paths taken by players and calculates their total scores. Returns an array of player names ordered by their scores in descending order. player_scores = [] for path in paths: name = path[\'name\'] steps = path[\'steps\'] traps = path[\'traps\'] bonuses = path[\'bonuses\'] teleports = path[\'teleports\'] loops = path[\'loops\'] # Calculate score based on the given rules total_score = ( steps * 1 - traps * 50 + bonuses * 200 + teleports * 100 - teleports * steps - loops * 75 ) player_scores.append((total_score, name)) # Sort the player scores by score in descending order player_scores.sort(key=lambda x: x[0], reverse=True) # Extract and return the player names in sorted order sorted_names = [name for score, name in player_scores] return sorted_names"},{"question":"Mike is a puzzle enthusiast. He loves string-based puzzles and spends a lot of time solving them. One day, he encountered an interesting problem where he needs to determine the length of the longest substring in a given string that contains at most K distinct characters. The length of the string might be very large, so he needs your help to solve this efficiently. -----Input----- The first line contains the number of test cases T. Each test case consists of two lines: - The first line contains an integer K representing the maximum number of distinct characters. - The second line contains the string S. -----Output----- For each test case, output the length of the longest substring of S that contains at most K distinct characters. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ K ≤ 26 - 1 ≤ length of S ≤ 100000 -----Example----- Input: 2 2 eceba 3 aaabbcc Output: 3 7 -----Explanation----- Example case 1. The longest substring that contains at most 2 distinct characters is \\"ece\\" (length 3). Example case 2. The longest substring that contains at most 3 distinct characters is the entire string \\"aaabbcc\\" (length 7).","solution":"def longest_substring_with_k_distinct_characters(T, test_cases): from collections import defaultdict def longest_substring(S, K): n = len(S) if n == 0 or K == 0: return 0 left, right = 0, 0 char_count = defaultdict(int) max_len = 0 distinct_count = 0 while right < n: char_count[S[right]] += 1 if char_count[S[right]] == 1: distinct_count += 1 while distinct_count > K: char_count[S[left]] -= 1 if char_count[S[left]] == 0: distinct_count -= 1 left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len results = [] for i in range(T): K = int(test_cases[i][0]) S = test_cases[i][1] results.append(longest_substring(S, K)) return results"},{"question":"Given an array of integers, you need to find out whether there are two distinct indices `i` and `j` in the array such that the absolute difference between `nums[i]` and `nums[j]` is at most `k`, and the absolute difference between `i` and `j` is at most `t`. Implement a function that accepts an array of integers and two integers `k` and `t`, then returns a boolean indicating whether such elements exist. # Function Signature ```python def containsNearbyAlmostDuplicate(nums: List[int], k: int, t: int) -> bool: ``` # Input - An array of integers `nums` of length `n` where `0 <= n <= 5000`. - An integer `k` representing the index difference constraint (0 <= k < n). - An integer `t` representing the value difference constraint (0 <= t). # Output - A boolean indicating if there are two distinct indices `i` and `j` such that `|nums[i] - nums[j]| <= t` and `|i - j| <= k`. # Example ```python containsNearbyAlmostDuplicate([1,2,3,1], 3, 0) # returns True containsNearbyAlmostDuplicate([1,5,9,1,5,9], 2, 3) # returns False ``` # Notes - Consider the edge cases where `nums` is empty and when `k` or `t` is zero. - Optimize for time complexity where possible, considering the possible size of `n`.","solution":"from typing import List def containsNearbyAlmostDuplicate(nums: List[int], k: int, t: int) -> bool: if t < 0 or k <= 0: return False bucket = {} for i, num in enumerate(nums): bucket_key = num // (t + 1) if bucket_key in bucket: return True if bucket_key - 1 in bucket and abs(num - bucket[bucket_key - 1]) <= t: return True if bucket_key + 1 in bucket and abs(num - bucket[bucket_key + 1]) <= t: return True bucket[bucket_key] = num if i >= k: del bucket[nums[i - k] // (t + 1)] return False"},{"question":"Write a function `find_missing_number` that takes an unsorted list of unique integers ranging from 1 to `n` (inclusive) with one number missing, and returns the missing number. The length of the list will be `n-1`. #Examples ```python find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 find_missing_number([1, 2, 4, 5, 6]) returns 3 find_missing_number([9, 6, 4, 2, 3, 5, 7, 1]) returns 8 find_missing_number([2, 3, 4, 5]) returns 1 ``` #Notes - The list will contain only unique numbers within the range from 1 to `n`. - There will always be one missing number.","solution":"def find_missing_number(nums): This function returns the missing number in the given list of unique integers ranging from 1 to n. n = len(nums) + 1 expected_sum = n * (n + 1) / 2 actual_sum = sum(nums) return int(expected_sum - actual_sum)"},{"question":"You are given a string s of length n consisting of lowercase English letters only. You can perform any number of operations on this string. In each operation, you can choose any two adjacent characters in the string and swap them. Your task is to find the lexicographically smallest string that can be obtained after any number of swap operations. *Note: A string A is lexicographically smaller than a string B if at the first position where A and B differ, the string A has a letter that appears earlier in the alphabet than the corresponding letter in B.* -----Input:----- - The first line contains an integer T, the number of test cases. The description of the T test cases follows. - The first line of each test case contains an integer n denoting the length of the string s. - The second line of each test case contains the string s of length n. -----Output:----- For each testcase, output the lexicographically smallest string that can be obtained. -----Constraints----- - 1 leq T leq 1000 - 1 leq n leq 100 -----Sample Input:----- 3 3 cba 5 edcba 4 bcda -----Sample Output:----- abc abcde abcd -----Explanation:----- Test Case 1 The string \\"cba\\" can be transformed into \\"abc\\", which is the lexicographically smallest string possible. Test Case 2 The string \\"edcba\\" can be transformed into \\"abcde\\", which is the lexicographically smallest string possible. Test Case 3 The string \\"bcda\\" can be transformed into \\"abcd\\", which is the lexicographically smallest string possible.","solution":"def lexicographically_smallest_string(T, test_cases): Returns the lexicographically smallest string possible for each test case. Parameters: T (int): Number of test cases test_cases (list of tuples): List containing tuples, each with an integer `n` and a string `s` Returns: list of str: List of lexicographically smallest strings for each test case result = [] for n, s in test_cases: result.append(\'\'.join(sorted(s))) return result def process_input(T, inputs): test_cases = [] for i in range(T): n = int(inputs[2*i]) s = inputs[2*i + 1] test_cases.append((n, s)) return test_cases"},{"question":"-----Problem description----- Chloe has been given a challenging task in her coding club. She needs to create a special type of matrix called a \\"Zigzag Matrix\\". The Zigzag Matrix is defined as an N by M matrix where the elements are filled from 1 to N*M in a zigzag pattern starting from the top-left corner. The pattern follows: 1. Start at top-left corner and move right until the last column is reached. 2. Move one row down if possible, then move diagonally up and to the left until the first row or first column is reached. 3. Move one row down if possible, then move right until the last column is reached again. 4. Repeat steps 2 and 3 until the entire matrix is filled. Generate the Zigzag Matrix for given dimensions N and M. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains two integers N and M. -----Output----- For each test case, output the Zigzag Matrix in the required format. Each row of the matrix should be on a new line and elements of the row should be separated by a single space. Leave a blank line after each test case\'s output. -----Constraints----- - 1 ≤ T ≤ 500 - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 100 -----Example----- Input: 2 3 4 2 2 Output: 1 2 3 4 7 6 5 8 8 9 10 11 1 2 3 4","solution":"def create_zigzag_matrix(N, M): matrix = [[0]*M for _ in range(N)] num = 1 for i in range(N): if i % 2 == 0: for j in range(M): matrix[i][j] = num num += 1 else: for j in range(M-1, -1, -1): matrix[i][j] = num num += 1 return matrix def zigzag_matrices(test_cases): results = [] for N, M in test_cases: matrix = create_zigzag_matrix(N, M) results.append(matrix) return results"},{"question":"Given a string s, determine whether it can be rearranged to form a palindrome. A palindrome is a string that reads the same forward and backward. -----Input----- The first line contains an integer T denoting the total number of test cases. Each test case consists of a single line containing a string s consisting of lowercase alphabets. -----Output----- For each test case, output \\"YES\\" if the string can be rearranged to form a palindrome, otherwise output \\"NO\\". -----Constraints----- - 1 <= T <= 10 - 1 <= |s| <= 20 -----Example----- Input: 2 aabb abc Output: YES NO -----Explanation----- In the first test case, \\"aabb\\" can be rearranged to form \\"abba\\", which is a palindrome. In the second test case, \\"abc\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Determines if the string s can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 def process_test_cases(test_cases): Processes a list of test cases and returns the results for whether each string can be rearranged to form a palindrome. results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"# Balanced Parentheses Given a string consisting only of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', determine if the input string is valid. An input string is considered valid if all types of brackets are closed correctly and in the correct order. Your task Write a function `is_valid_parentheses` that receives a string as its input, and returns `True` if the string is a valid combination of parentheses, and `False` otherwise. You can assume the input string length will not exceed `10^4`. Examples This is how the function should behave for the provided examples: | **input** | **output** | |------------|------------| | \\"()\\" | True | | \\"()[]{}\\" | True | | \\"(]\\" | False | | \\"([)]\\" | False | | \\"{[]}\\" | True | Note - An empty string is also considered valid. - The approach should consider stack data structure to ensure the correct matching and order of parentheses.","solution":"def is_valid_parentheses(s): Determine if the input string is a valid combination of parentheses. Args: s (str): Input string consisting of \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: bool: True if the string is valid, False otherwise. stack = [] mapping = {\\")\\": \\"(\\", \\"}\\": \\"{\\", \\"]\\": \\"[\\"} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"In a distant planet called Zog, people measure time in \\"zogdays\\". A zogday is divided into \\"zoghours\\", and a zoghour into \\"zogminutes\\". You are given a list of events, each represented by a starting time and duration. Each event looks like this: `start_time=(zz, hh, mm), duration=(dz, dh, dm)` where `zz`, `hh`, and `mm` represent the starting zogday, zoghour, and zogminute respectively, and `dz`, `dh`, and `dm` represent the duration in zogdays, zoghours, and zogminutes respectively. Determine if any two events overlap, and if so, return \\"YES\\", otherwise return \\"NO\\". # Example: Let\'s say the list of events looks like this: `[(start_time=(1, 5, 30), duration=(0, 5, 0)), (start_time=(1, 10, 0), duration=(0, 10, 30)), (start_time=(2, 0, 0), duration=(0, 2, 0))]` The first event starts at zogday 1, hour 5, and minute 30, lasting 5 zoghours. This would end at zogday 1, hour 10, and minute 30. The second event starts at zogday 1, hour 10, and minute 0, lasting 10 zoghours and 30 zogminutes. This would end at zogday 2, hour 8, and minute 30. The third event starts at zogday 2, hour 0, and minute 0, lasting 2 zoghours. This would end at zogday 2, hour 2, and minute 0. From the above, it\'s clear that the third event overlaps with the second event. Thus, the output should be: \\"YES\\" # Input: A list of events represented as tuples containing start times and durations. Each tuple is formatted as `((zz, hh, mm), (dz, dh, dm))`. # Output: Return \\"YES\\" if any two events overlap, otherwise \\"NO\\". **Note: performance will be tested.**","solution":"def convert_to_minutes(zogday, zoghour, zogminute): Convert time in zogdays, zoghours, and zogminutes to total zogminutes. return zogday * 24 * 60 + zoghour * 60 + zogminute def check_events_overlap(events): Check if any two events overlap. event_times = [] for start_time, duration in events: zz, hh, mm = start_time dz, dh, dm = duration start_in_minutes = convert_to_minutes(zz, hh, mm) duration_in_minutes = convert_to_minutes(dz, dh, dm) end_in_minutes = start_in_minutes + duration_in_minutes event_times.append((start_in_minutes, end_in_minutes)) # Sort events by start time event_times.sort() for i in range(1, len(event_times)): if event_times[i][0] < event_times[i-1][1]: return \\"YES\\" return \\"NO\\" # Example usage events = [ ((1, 5, 30), (0, 5, 0)), ((1, 10, 0), (0, 10, 30)), ((2, 0, 0), (0, 2, 0)) ] print(check_events_overlap(events)) # Output: YES"},{"question":"Write a function that accepts a positive integer representing the number of minutes past midnight and returns the current time in the format `HH:MM`. Ensure the function handles cases where the number of minutes exceeds 1440 (i.e., spanning multiple days). For example: - `convert_minutes_to_time(75)` should return `\\"01:15\\"` - `convert_minutes_to_time(1445)` should return `\\"00:05\\"`","solution":"def convert_minutes_to_time(minutes): Converts a number of minutes past midnight to \'HH:MM\' time format. # Handle spanning multiple days by using modulo with 1440 minutes (24 * 60) total_minutes = minutes % 1440 # Calculate hours and minutes hours = total_minutes // 60 mins = total_minutes % 60 # Return formatted time return f\\"{hours:02}:{mins:02}\\""},{"question":"You are given two strings, S and T. You are allowed to remove any number of characters from both strings. Your goal is to make the strings anagrams of each other with minimum deletions. Return the minimum number of operations needed to make the two strings anagrams. Example 1: Input: S = \\"cde\\", T = \\"abc\\" Output: 4 Explanation: Remove \'d\' and \'e\' from \\"cde\\" (2 deletions), and \'a\' and \'b\' from \\"abc\\" (2 deletions) to make both strings \\"c\\". Total deletions = 4. Example 2: Input: S = \\"a\\", T = \\"b\\" Output: 2 Explanation: Remove \'a\' from \\"a\\" and \'b\' from \\"b\\". Total deletions = 2. Example 3: Input: S = \\"abc\\", T = \\"bca\\" Output: 0 Explanation: Both strings are already anagrams of each other. Example 4: Input: S = \\"abca\\", T = \\"bcab\\" Output: 2 Explanation: Remove \'a\' from \\"abca\\" (1 deletion) and \'b\' from \\"bcab\\" (1 deletion) to make both strings \\"bca\\". Total deletions = 2. Note: S and T consist of lowercase English letters. 1 <= S.length, T.length <= 10^5","solution":"from collections import Counter def min_deletions_to_make_anagrams(S, T): Returns the minimum number of deletions required to make the two strings S and T anagrams. # Count characters in both strings countS = Counter(S) countT = Counter(T) # Calculate deletions needed for both strings deletions = 0 for char in set(countS.keys()).union(set(countT.keys())): deletions += abs(countS.get(char, 0) - countT.get(char, 0)) return deletions"},{"question":"You are given a string `s` consisting of lowercase English letters, and you need to transform it into a palindrome by changing a minimal number of characters. A palindrome is a word that reads the same backward as forward. Your task is to determine the minimum number of changes needed to convert the given string `s` into a palindrome. For example, consider `s = \\"abca\\"`. You can change the last character to \'b\' to make it \\"abba\\", which is a palindrome. Therefore, the minimum number of changes needed is 1. Implement the function `minChangesToPalindrome(s: str) -> int`. Examples: ``` minChangesToPalindrome(\\"abca\\") -> 1 minChangesToPalindrome(\\"race\\") -> 2 minChangesToPalindrome(\\"aabb\\") -> 2 minChangesToPalindrome(\\"abbb\\") -> 1 Note: You can assume that the length of the input string `s` is at most 100,000.","solution":"def minChangesToPalindrome(s: str) -> int: Determines the minimum number of changes needed to convert the given string `s` into a palindrome. Parameters: s (str): the input string consisting of lowercase English letters. Returns: int: the minimum number of character changes needed. n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes"},{"question":"Write a function that takes a list of words and returns the length of the longest word that can be formed using only unique letters. If no such word exists, return 0. Example: Longest word with unique letters is \\"coding\\" and its length is 6. If the list is empty or all words contain repeated letters, return 0.","solution":"def longest_unique_word_length(words): Takes a list of words and returns the length of the longest word that can be formed using only unique letters. If no such word exists, return 0. max_length = 0 for word in words: if len(word) == len(set(word)): max_length = max(max_length, len(word)) return max_length"},{"question":"You are given an array of positive integers, and you need to determine the minimum number of operations required to make all the elements equal. In one operation, you can increment or decrement any element by 1. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) representing the number of elements in the array. The second line contains n positive integers separated by spaces. -----Output----- Print a single integer, the minimum number of operations required to make all elements in the array equal. -----Examples----- Input 4 1 2 3 4 Output 4 Input 3 7 7 1 Output 6 -----Note----- In the first example, you can change the elements to all be 2 or 3 with minimum operations as follows: 1 can be incremented to 2 (1 operation), 3 can be decremented to 2 (1 operation), 4 can be decremented to 3 and then to 2 (2 operations), resulting in a total of 4 operations. In the second example, changing all elements to 7 or 1 results in minimal operations. Changing to 1, you have (6 + 6) = 12 operations while changing to 7 from the element 1, you have (6 operations) which is minimal.","solution":"def min_operations_to_equalize(arr): Returns the minimum number of operations required to make all elements in the array equal. An operation consists of incrementing or decrementing any element by 1. # Finding the median minimizes the number of operations arr.sort() median = arr[len(arr) // 2] return sum(abs(x - median) for x in arr) # Example usage # arr = [1, 2, 3, 4] # min_operations_to_equalize(arr) # This will return 4"},{"question":"Given a set of cloud data, each cloud has a height, Humidity Relative Index (HRI), and an identification number. The data can be represented as a list of dictionaries in Python, where each dictionary contains the attributes \'height\', \'HRI\', and \'id\'. Example: ```python clouds = [ {\'height\': 2000, \'HRI\': 0.85, \'id\': \'cloud1\'}, {\'height\': 1500, \'HRI\': 0.60, \'id\': \'cloud2\'}, {\'height\': 2500, \'HRI\': 0.70, \'id\': \'cloud3\'}, {\'height\': 3000, \'HRI\': 0.90, \'id\': \'cloud4\'} ] ``` Your task is to write a function `get_best_cloud(clouds)` that takes in this list and returns the id of the most optimal cloud for rain. The optimal cloud is determined by choosing the cloud with the highest product of height and HRI. ```python def get_best_cloud(clouds: List[Dict[str, object]]) -> str: # your code here pass ``` Example: ```python clouds = [ {\'height\': 2000, \'HRI\': 0.85, \'id\': \'cloud1\'}, {\'height\': 1500, \'HRI\': 0.60, \'id\': \'cloud2\'}, {\'height\': 2500, \'HRI\': 0.70, \'id\': \'cloud3\'}, {\'height\': 3000, \'HRI\': 0.90, \'id\': \'cloud4\'} ] print(get_best_cloud(clouds)) # It should output: \'cloud4\' ``` Be sure to consider cases where there might be no clouds in the list as well.","solution":"from typing import List, Dict def get_best_cloud(clouds: List[Dict[str, object]]) -> str: Returns the id of the cloud with the highest product of height and HRI. If the input list is empty, it returns None. if not clouds: return None max_product = -1 best_cloud_id = None for cloud in clouds: product = cloud[\'height\'] * cloud[\'HRI\'] if product > max_product: max_product = product best_cloud_id = cloud[\'id\'] return best_cloud_id"},{"question":"You are given an array of integers. Your task is to determine the length of the longest subsequence of the array such that every consecutive element in the subsequence differs by 1. A subsequence is obtained by deleting some or no elements from the array without changing the order of the remaining elements. -----Input----- The first line contains a single integer T - the number of test cases. Each of the next T lines starts with an integer n (the number of elements in the array) followed by n space-separated integers. -----Output----- For each test case, output the length of the longest subsequence such that every consecutive element differs by 1. -----Constraints----- 1 ≤ T ≤ 50 1 ≤ n ≤ 10^5 1 ≤ a[i] ≤ 10^9 -----Example----- Input: 2 6 1 2 3 4 6 5 5 1 2 3 5 6 Output: 6 3 Explanation: For the first test case, the longest subsequence where consecutive elements differ by 1 is [1, 2, 3, 4, 6, 5], which is of length 6. For the second test case, the longest subsequence where consecutive elements differ by 1 is [1, 2, 3] or [5, 6], which are both of length 3.","solution":"def longest_consecutive_subsequence(arr): Determines the length of the longest subsequence of the array such that every consecutive element in the subsequence differs by 1. if not arr: return 0 arr = sorted(set(arr)) max_len = 1 current_len = 1 for i in range(1, len(arr)): if arr[i] == arr[i-1] + 1: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for n, arr in test_cases: results.append(longest_consecutive_subsequence(arr)) return results"},{"question":"Mara and her friends decided to have a board game night. One of the games has a special dice game. The dice is not the usual fair six-faced dice; instead, each face of the dice can have a unique number, but all numbers are between 1 and 6 (inclusive). After rolling the dice multiple times, they notice a pattern and want to determine the minimum number of rolls required to get all the numbers from 1 to 6 at least once. Write a function `min_rolls_to_all_faces(dice_results)` that takes a list of integers representing the results of rolling the special dice and returns the minimum number of rolls required to get all the numbers from 1 to 6 at least once. If it is not possible to get all the numbers with the given list, return -1. # Example 1. Given `dice_results = [1, 2, 3, 4, 4, 6, 5, 3, 2]`, the function should return `7` because the first seven rolls contain all numbers from 1 to 6 at least once. 2. Given `dice_results = [1, 2, 2, 4, 5]`, the function should return `-1` because it is impossible to get all numbers from 1 to 6 with these rolls. You can assume that the list of dice results contains only integers between 1 and 6 (inclusive).","solution":"def min_rolls_to_all_faces(dice_results): Returns the minimum number of rolls required to get all the numbers from 1 to 6 at least once. If it is not possible to get all numbers with the given list, returns -1. required_faces = set(range(1, 7)) seen_faces = set() for index, roll in enumerate(dice_results): seen_faces.add(roll) if seen_faces == required_faces: return index + 1 # Return the number of rolls (1-based index count) return -1 # Not all faces were seen in the dice results"},{"question":"Your task is to merge two binary trees. You are given two binary trees and you need to merge them. The merge rule is that if two nodes overlap, then sum the node values up as the new value of the merged node. Otherwise, the non-null node will be used as the node of the new tree. Example1: Input: Tree 1: 1 Tree 2: 2 / / 3 2 1 3 / 5 4 7 Result: Merged tree: 3 / 4 5 / 5 4 7 Note: - The merging process must start from the root nodes of both trees.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def merge_trees(t1, t2): if not t1 and not t2: return None if not t1: return t2 if not t2: return t1 merged = TreeNode(t1.val + t2.val) merged.left = merge_trees(t1.left, t2.left) merged.right = merge_trees(t1.right, t2.right) return merged def tree_to_list(root): Flatten the binary tree to list for easy assertion in tests if not root: return [] result = [] queue = [root] while queue: node = queue.pop(0) result.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result"},{"question":"Task Write a function `rotate_matrix` that takes in a square matrix (2D list) and rotates it 90 degrees clockwise. The matrix will be represented as a list of lists, where each inner list represents a row of the matrix. The function should return a new matrix that is the rotated version of the input matrix, without modifying the original matrix. Example Given the following input matrix: ```python [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Your function should return: ```python [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Constraints 1. The input matrix will always be a non-empty square matrix (n x n) where 1 ≤ n ≤ 50. 2. You may assume all the integers in the matrix are within the range -1000 to 1000. Task Implement the function `rotate_matrix(matrix)` that performs the described rotation and returns the new rotated matrix. The function should create a new matrix for the result, without altering the original matrix.","solution":"def rotate_matrix(matrix): Rotates the input square matrix 90 degrees clockwise. :param matrix: List[List[int]] - The input n x n matrix to be rotated. :return: List[List[int]] - The new matrix that has been rotated 90 degrees clockwise. n = len(matrix) # Create a new matrix to store the rotated version rotated = [[0] * n for _ in range(n)] # Perform the rotation for i in range(n): for j in range(n): rotated[j][n - 1 - i] = matrix[i][j] return rotated"},{"question":"You are given a grid of size n times m filled with non-negative integers. You need to find the maximum sum of a subgrid that has exactly k elements. A subgrid is defined as any rectangular section of the grid. -----Input----- - The first line of input contains three integers n, m, and k - the dimensions of the grid and the exact number of elements in the subgrid. - The next n lines each contain m integers, representing the grid. -----Output----- Print the maximum sum of a subgrid with exactly k elements. -----Constraints----- - 1 le n, m le 100 - 1 le k le n times m - Each element in the grid is a non-negative integer less than or equal to 10^4 -----Example Input----- 3 3 4 1 2 3 4 5 6 7 8 9 -----Example Output----- 30 -----Explanation----- In this example, one possible way to choose a subgrid with exactly 4 elements that yields the maximum sum is by selecting the 2x2 subgrid: [ 5 6 8 9 ] The sum of these elements is 5+6+8+9=28. Another way is to choose the 1x4 subgrid (1 row, 4 columns) with the maximum sum: [ 6 5 8 9 ] The sum of these elements is 6+5+8+9=30. Since 30 is the highest possible sum for a subgrid with 4 elements, the output is 30.","solution":"def max_subgrid_sum(n, m, k, grid): from itertools import combinations # Flatten the grid into a single list flattened_grid = [num for row in grid for num in row] # Get all combinations of length k max_sum = 0 for comb in combinations(flattened_grid, k): max_sum = max(max_sum, sum(comb)) return max_sum"},{"question":"A string is considered \\"balanced\\" if all the characters in the string appear the same number of times. Given a string s consisting of lowercase English letters, determine if it can be rearranged to form a balanced string. For example, the string \\"aabbcc\\" is balanced because each characters \'a\', \'b\', and \'c\' appear exactly 2 times. However, the string \\"aabc\\" is not balanced because characters \'a\' and \'b\' appear 2 times while \'c\' appears only once. Write a function to determine if the string can be rearranged to form a balanced string. If it is possible, return `true`. Otherwise, return `false`. Example 1: Input: s = \\"aabbcc\\" Output: true Explanation: The string is already balanced. Example 2: Input: s = \\"aaabb\\" Output: false Explanation: There\'s no way to rearrange the characters so that each character appears the same number of times. Example 3: Input: s = \\"aabbccc\\" Output: false Explanation: There\'s no way to rearrange the characters so that each character appears the same number of times. Constraints: - 1 <= s.length <= 1000 - s consists of lowercase English letters.","solution":"def can_rearrange_to_balanced(s): Determines if the string can be rearranged to form a balanced string. Parameters: s (str): The input string. Returns: bool: True if the string can be rearranged to form a balanced string, False otherwise. from collections import Counter char_counts = Counter(s) unique_counts = set(char_counts.values()) return len(unique_counts) == 1 if len(s) > 1 else True"},{"question":"You are given a string containing lowercase English letters, and you need to determine if it is possible to make the string a palindrome by rearranging its characters. An example of a palindrome is \\"madam\\" or \\"racecar\\" where the word reads the same forwards and backwards. A string can be rearranged into a palindrome if at most one character occurs an odd number of times. ```Input```: A single string containing only lowercase English letters. ```Output```: A boolean indicating whether the string can be rearranged to form a palindrome. Example: ```python can_be_palindrome(\\"civic\\") == True can_be_palindrome(\\"ivicc\\") == True can_be_palindrome(\\"hello\\") == False can_be_palindrome(\\"aabbccdd\\") == True ```","solution":"def can_be_palindrome(s): Determine if the string can be rearranged to form a palindrome. :param s: A string containing only lowercase English letters :return: A boolean indicating whether the string can be rearranged to form a palindrome from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 == 1) # String can be rearranged to form a palindrome if at most one character has an odd frequency return odd_count <= 1"},{"question":"Write a function `kth_perfect_number(k)` that generates the `k`-th \\"perfect number\\". A perfect number is defined as a positive integer that is equal to the sum of its proper divisors, excluding itself. For example: - The proper divisors of `6` are `1, 2, 3`, and `1 + 2 + 3 = 6`, so `6` is a perfect number. - The proper divisors of `28` are `1, 2, 4, 7, 14`, and `1 + 2 + 4 + 7 + 14 = 28`, so `28` is a perfect number. The sequence of perfect numbers starts as `6, 28, 496, 8128, ...`. Your function should efficiently compute and return the `k`-th perfect number. Assume `k` will be a positive integer and within the reasonable bounds for calculation. # Example: ```python kth_perfect_number(1) # returns 6 kth_perfect_number(2) # returns 28 kth_perfect_number(3) # returns 496 kth_perfect_number(4) # returns 8128 ``` # Constraints: - The function should efficiently handle requesting the first few perfect numbers. - For large values of `k`, your algorithm should consider computational efficiency due to the growth rate of perfect numbers.","solution":"def is_perfect_number(num): Checks if a given number is a perfect number. if num < 2: return False divisors_sum = 1 for i in range(2, int(num**0.5) + 1): if num % i == 0: divisors_sum += i if i != num // i: divisors_sum += num // i return divisors_sum == num def kth_perfect_number(k): Returns the k-th perfect number. count = 0 num = 1 while True: if is_perfect_number(num): count += 1 if count == k: return num num += 1"},{"question":"Write a function that takes in a string and returns the length of the longest substring without repeating characters. For example, for the input string: ``` \\"abcabcbb\\" ``` The answer is: ``` 3 ``` Because the longest substring without repeating characters is `\\"abc\\"`. Another example, for the input string: ``` \\"bbbbb\\" ``` The answer is: ``` 1 ``` Because the longest substring without repeating characters is `\\"b\\"`. Your function should return an integer representing the length of the longest substring without repeating characters found in the input string.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index = {} start = 0 max_length = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"A Fibonacci number `F(n)` is defined recursively as follows: * `F(0) = 0`, `F(1) = 1` * For `n >= 2`, `F(n) = F(n-1) + F(n-2)` Write a function to calculate the nth Fibonacci number by using both recursive and iterative approaches. Additionally, implement an efficient memoized version to optimize the recursive solution for larger values of `n`. Example For `n = 6`: - Recursive approach: `8` - Iterative approach: `8` - Memoized approach: `8` # Constraints * You can assume `n` is a non-negative integer. * The value of `n` can be as large as 50.","solution":"def fibonacci_recursive(n): Calculates the nth Fibonacci number using the recursive method. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci_recursive(n-1) + fibonacci_recursive(n-2) def fibonacci_iterative(n): Calculates the nth Fibonacci number using the iterative method. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b def fibonacci_memoized(n, memo={}): Calculates the nth Fibonacci number using the memoized (dynamic programming) method. if n <= 0: return 0 elif n == 1: return 1 if n not in memo: memo[n] = fibonacci_memoized(n-1, memo) + fibonacci_memoized(n-2, memo) return memo[n]"},{"question":"A digital publishing company offers a bundle of premium articles that you need to subscribe to. There are n articles, each article having a distinct ID ranging from 1 to n. You have a list of favourite articles that you wish to access within a certain number of days d. The articles are read in a sequence of days, and each day you read exactly one article from your favourite list. Your goal is to find the minimum number of subscriptions required to ensure that within any period of d consecutive days, you can read all your favourite articles at least once. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Then t test case descriptions follow. The first line of each test case contains two integers n and d (1 le n le 1000, 1 le d le n). The second line contains n integers f_1, f_2, dots, f_n (1 le f_i le 10^6), which represent the IDs of your favourite articles, and they can repeat. It is guaranteed that the sum of the values of n for all test cases in the input does not exceed 10000. -----Output----- Print t integers — the answers to the test cases, one for each test case in the order they are given. The answer to a test case represents the minimum number of subscriptions required to ensure that within any period of d consecutive days, you can read all your favourite articles at least once. -----Example----- Input 3 5 2 1 2 3 2 1 6 3 3 3 2 2 1 1 4 4 2 4 4 6 Output 2 2 2 -----Note----- In the first test case, you need subscriptions to articles 1 and 2 because within any period of 2 consecutive days, you want to read both articles 1 and 2. In the second test case, you can subscribe to articles 2 and 3 since within any 3-day window, you can ensure to read the articles. In the third test case, any segment of 4 days contains IDs 2, 4, and 6, hence you need subscriptions for articles 2 and 4.","solution":"def min_subscriptions(n, d, favourites): from collections import Counter # Count frequency of each article ID freq = Counter(favourites) # Calculate the minimum number of subscriptions return len(freq) def solve(test_cases): results = [] for case in test_cases: n, d, favourites = case results.append(min_subscriptions(n, d, favourites)) return results # Test cases processing def main(input_text): lines = input_text.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, d = map(int, lines[index].split()) favourites = list(map(int, lines[index + 1].split())) test_cases.append((n, d, favourites)) index += 2 return solve(test_cases)"},{"question":"# Find the Smallest Missing Positive Integer You are given an unsorted array of integers. Your task is to find the smallest positive integer that does not appear in the array. The array can contain both positive and negative numbers, but the smallest missing positive integer should be strictly greater than 0. Example ```python def find_smallest_missing_positive(nums): # Your code here # Example Test Cases arr1 = [3, 4, -1, 1] arr2 = [1, 2, 0] arr3 = [-5, -3, -2, -1, 2, 3] print(find_smallest_missing_positive(arr1)) # Output: 2 print(find_smallest_missing_positive(arr2)) # Output: 3 print(find_smallest_missing_positive(arr3)) # Output: 1 ``` Explanation For `arr1 = [3, 4, -1, 1]`, the smallest missing positive integer is `2` because both `3`, `4`, and `1` are in the array but `2` is not. For `arr2 = [1, 2, 0]`, the smallest missing positive integer is `3` because both `1` and `2` are in the array but `3` is not. For `arr3 = [-5, -3, -2, -1, 2, 3]`, the smallest missing positive integer is `1` because neither `1` is in the array and it is the smallest positive integer.","solution":"def find_smallest_missing_positive(nums): Returns the smallest positive integer that does not appear in the array. nums_set = set(nums) smallest_missing = 1 while smallest_missing in nums_set: smallest_missing += 1 return smallest_missing"},{"question":"Write a function that simulates the behavior of the \'tail\' command in UNIX. The function takes a list of lines (strings) and an integer `n` as input and returns a list consisting of the last `n` lines of the input list. Example: ```python lines = [ \\"This is the first line.\\", \\"This is the second line.\\", \\"This is the third line.\\", \\"This is the fourth line.\\", \\"This is the fifth line.\\", ] n = 3 ``` Output: ```python [ \\"This is the third line.\\", \\"This is the fourth line.\\", \\"This is the fifth line.\\", ] ```","solution":"def tail(lines, n): Returns the last n lines from the given list of lines. Parameters: lines (list): A list of strings representing lines. n (int): The number of lines to return from the end of the list. Returns: list: A list of the last n lines. if n <= 0: return [] return lines[-n:]"},{"question":"# Description: Given a string consisting of lowercase alphabetic characters, replace each group of consecutive identical characters with the character followed by the number of occurrences of that character in the group. For characters that appear only once consecutively, do not add a number. # Examples ``` transform(\\"aabccc\\") === \\"a2bc3\\" transform(\\"aaabbbccdd\\") === \\"a3b3c2d2\\" transform(\\"abcd\\") === \\"abcd\\" transform(\\"aabbcc\\") === \\"a2b2c2\\" transform(\\"abbbc\\") === \\"ab3c\\" ``` Implement a function: ```python def transform(s: str) -> str: # Your code here ```","solution":"def transform(s: str) -> str: Transforms the input string by replacing each group of consecutive identical characters with the character followed by the number of occurrences. For characters that appear only once consecutively, the number is not added. :param s: Input string consisting of lowercase alphabetic characters :return: Transformed string if not s: return \\"\\" transformed_string = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: transformed_string.append(s[i - 1]) if count > 1: transformed_string.append(str(count)) count = 1 # Append the last group transformed_string.append(s[-1]) if count > 1: transformed_string.append(str(count)) return \'\'.join(transformed_string)"},{"question":"You are given a set of n distinct positive integers. You need to determine if these integers can form an arithmetic progression. An arithmetic progression is defined as a sequence of numbers such that the difference of any two successive members is a constant. For example, the sequence 3, 5, 7, 9 is an arithmetic progression with a common difference of 2. Write a function that takes as input a list of integers and determines if these integers can form an arithmetic progression. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines: - The first line contains a single integer n (2 le n le 1000), the number of integers. - The second line contains n distinct positive integers separated by spaces. -----Output----- For each test case, output \\"YES\\" (without quotes) if the given integers can form an arithmetic progression, otherwise output \\"NO\\" (without quotes). -----Examples----- Input 3 4 1 3 5 7 3 2 4 8 5 10 15 20 25 30 Output YES NO YES","solution":"def can_form_arithmetic_progression(n, numbers): numbers.sort() common_difference = numbers[1] - numbers[0] for i in range(2, n): if numbers[i] - numbers[i - 1] != common_difference: return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, numbers = test_cases[i] result = can_form_arithmetic_progression(n, numbers) results.append(result) return results"},{"question":"Create a function `flatten_dictionary` that takes a nested dictionary and returns a new dictionary with no nested structures, using \\"dot notation\\" to represent the hierarchy of the original dictionary keys. The keys in the nested dictionary are always strings, and the values can be either strings or other dictionaries. Here is an example to clarify the exact requirements: ```python def flatten_dictionary(d): # Implementation goes here nested_dict = { \\"key1\\": \\"1\\", \\"key2\\": { \\"a\\": \\"2\\", \\"b\\": \\"3\\", \\"c\\": { \\"d\\": \\"3\\", \\"e\\": { \\"f\\": \\"4\\" } } } } print(flatten_dictionary(nested_dict)) # Output: {\'key1\': \'1\', \'key2.a\': \'2\', \'key2.b\': \'3\', \'key2.c.d\': \'3\', \'key2.c.e.f\': \'4\'} ``` Ensure the function efficiently traverses through all layers of the nested dictionary and correctly appends the appropriate levels to each key in the final flat dictionary.","solution":"def flatten_dictionary(d, parent_key=\'\', sep=\'.\'): This function flattens a nested dictionary. items = [] for k, v in d.items(): new_key = f\'{parent_key}{sep}{k}\' if parent_key else k if isinstance(v, dict): items.extend(flatten_dictionary(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Given the head of a singly linked list, reverse the nodes of the list `k` at a time, and return the modified list. `k` is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of `k`, then left-out nodes in the end should remain as it is. You may not alter the values in the list\'s nodes, only nodes themselves may be changed. Example 1: Input: head = [1,2,3,4,5], k = 2 Output: [2,1,4,3,5] Example 2: Input: head = [1,2,3,4,5,6,7,8], k = 3 Output: [3,2,1,6,5,4,7,8] Example 3: Input: head = [1,2,3,4,5], k = 1 Output: [1,2,3,4,5] Note: The given linked list will have between 1 and 5000 nodes. 0 <= Node.val <= 10^9","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head, k): Given the head of a singly linked list, reverse the nodes of the list k at a time, and return the modified list. dummy = ListNode(0) dummy.next = head curr, prev, nxt = dummy, dummy, dummy count = 0 while curr.next: curr = curr.next count += 1 while count >= k: curr = prev.next nxt = curr.next for _ in range(1, k): curr.next = nxt.next nxt.next = prev.next prev.next = nxt nxt = curr.next prev = curr count -= k return dummy.next"},{"question":"A game company has developed a new game that involves picking stones from two piles. There are two piles of stones, pile A and pile B. Each pile contains a certain number of stones. A player can choose one of the following moves during their turn: 1. Remove one stone from pile A. 2. Remove one stone from pile B. 3. Remove one stone from both pile A and pile B. 4. If there are an equal number of stones in pile A and pile B, the player can remove all stones from both piles, which immediately ends the game. The player who removes the last stone(s) wins the game. Given the initial number of stones in each pile, determine if the player who starts the game can guarantee a win if both players play optimally. -----Input----- The first line contains two integers a and b (0 ≤ a, b ≤ 100 000) — the number of stones in pile A and pile B respectively. -----Output----- Print \\"Yes\\" if the starting player can guarantee a win, otherwise print \\"No\\". -----Examples----- Input 3 5 Output Yes Input 2 2 Output Yes Input 4 7 Output No -----Note----- In the first example, the starting player can guarantee a win by removing one stone from both piles (3rd move), which changes the state to (2, 4). No matter what the second player does, the first player can continue to control the game to ensure a win. In the second example, the starting player can simply use the fourth move to remove all stones from both piles and win immediately. In the third example, the starting player does not have a strategy that guarantees a win if both players play optimally.","solution":"def can_win_game(a, b): Determines if the starting player can guarantee a win in the game by playing optimally. Parameters: a (int): Number of stones in pile A. b (int): Number of stones in pile B. Returns: str: \\"Yes\\" if the starting player can guarantee a win, otherwise \\"No\\". if abs(a - b) > 2 or (a == 0 and b > 1) or (b == 0 and a > 1): return \\"No\\" return \\"Yes\\" # Examples use cases print(can_win_game(3, 5)) # Output: Yes print(can_win_game(2, 2)) # Output: Yes print(can_win_game(4, 7)) # Output: No"},{"question":"Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. The given elevation map can also be represented as an array of size n, where each element represents the height of the elevation at that point. Example 1: Input: n = 9, height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above array represents the following elevation map: The \\"w\\" represents the water that will be trapped. ``` w w w w w w w w w w # # # _ # # _ # _ # # # # _ # _ # # # # ``` 6 units of water (marked as \'w\') will be trapped. Example 2: Input: n = 6, height = [4,2,0,3,2,5] Output: 9 Explanation: The above elevation map is represented as: ``` w w w w _w w w w w w _#_#_#_#_#_# _#_#_#_#_#_# ``` 9 units of water (marked as \'w\') will be trapped. Constraints: - 0 <= n <= 10^4 - 0 <= height[i] <= 10^5","solution":"def trap_rain_water(height): Returns the total amount of water that can be trapped after raining on the given elevation map. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - height[i] return trapped_water"},{"question":"A desert map is represented as an n x m grid comprising sand (\'S\'), water (\'W\'), and cacti (\'C\'). You are planning to walk from the top-left corner to the bottom-right corner of the map. You can only walk on sand (\'S\') and cannot step on water (\'W\') or cacti (\'C\'). You can move up, down, left, or right but not diagonally. Determine the shortest path from the top-left corner to the bottom-right corner. If no such path exists, return -1. -----Input:----- - First line will contain an integer T, the number of test cases. - For each test case: - The first line will contain two integers n and m, the dimensions of the grid. - The next n lines will each contain a string of m characters representing the grid. -----Output:----- For each test case, print the length of the shortest path or -1 if no path exists. -----Sample Input:----- 2 3 3 SWS SWS SSS 3 3 WWW WWW WWW -----Sample Output:----- 4 -1 -----Constraints:----- - 1 leq n, m leq 100 - Each cell in the grid is either \'S\', \'W\', or \'C\'","solution":"from collections import deque def shortest_path(desert_map): rows = len(desert_map) cols = len(desert_map[0]) if desert_map[0][0] != \'S\' or desert_map[rows-1][cols-1] != \'S\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == rows - 1 and c == cols - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and desert_map[nr][nc] == \'S\': queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) return -1 def process_input(input_data): results = [] data = input_data.strip().split(\'n\') T = int(data[0]) index = 1 for _ in range(T): n, m = map(int, data[index].split()) index += 1 grid = [] for _ in range(n): grid.append(data[index]) index += 1 results.append(shortest_path(grid)) return results"},{"question":"Write a function **\\"sort_dict_by_values\\"** that takes a dictionary as input and returns a list of tuples sorted based on the dictionary values in descending order. If two values are the same, sort the corresponding keys in ascending order. For example: ``` sort_dict_by_values({\\"apple\\": 2, \\"banana\\": 1, \\"cherry\\": 2, \\"date\\": 3}) == [(\\"date\\", 3), (\\"apple\\", 2), (\\"cherry\\", 2), (\\"banana\\", 1)] ``` To achieve this, you may find it helpful to use Python\'s **sorted()** function along with a custom key function.","solution":"def sort_dict_by_values(d): Takes a dictionary as input and returns a list of tuples sorted based on the dictionary values in descending order. If two values are the same, sort the corresponding keys in ascending order. Parameters: d (dict): Input dictionary where key is a string and value is an int Returns: list: List of tuples sorted as per the rules mentioned return sorted(d.items(), key=lambda item: (-item[1], item[0]))"},{"question":"Given a string `s` and an integer `n`, your task is to transform the string by rotating it to the right `n` times. Each rotation moves the last character of the string to the front. Write a function `rotate_string(s, n)` that takes a string `s` and an integer `n`, and returns the resulting string after `n` rotations. ```Python For example: rotate_string(\'abcde\', 1) = \'eabcd\' # The last character \'e\' is moved to the front. rotate_string(\'abcde\', 2) = \'deabc\' # The last two characters \'d\' and \'e\' are moved to the front in order. rotate_string(\'abcde\', 5) = \'abcde\' # Rotating the string 5 times returns it to the original string. rotate_string(\'abcde\', 7) = \'deabc\' # Rotating the string 7 times is equivalent to rotating it 2 times. ``` More examples in the test cases. Good luck!","solution":"def rotate_string(s, n): Rotates the string s to the right n times. Each rotation moves the last character of the string to the front. Parameters: s (str): The string to rotate. n (int): The number of rotations. Returns: str: The rotated string. if not s: return s n %= len(s) return s[-n:] + s[:-n]"},{"question":"You are given a string str and an integer n. Write a function that simulates the rolling of a die with n faces and replaces each digit in str with the result of a roll, where each digit represents a roll of an n-faced die. The digits in the string range from \'1\' to \'9\'. If the digits in the string exceed the number of faces on the die (n > digit), only replace those digits that are ≤ n. For example: ```python simulate_roll(\\"hello1world2\\", 2) ``` could return (since it is based on randomness): ```python \\"hello2world1\\" ``` Function Signature: ```python def simulate_roll(s: str, n: int) -> str: ```","solution":"import random def simulate_roll(s: str, n: int) -> str: Simulates the rolling of a die with n faces and replaces each digit in s with the result of a roll. The digits in the string range from \'1\' to \'9\'. Only replace those digits that are ≤ n. Parameters: s (str): Input string containing digits and letters. n (int): Number of faces on the die. Returns: str: The string with digits replaced by the result of the roll. result = [] for char in s: if char.isdigit() and int(char) <= n: result.append(str(random.randint(1, n))) else: result.append(char) return \'\'.join(result)"},{"question":"A robot needs to navigate a grid composed of cells that can be either obstacles or free spaces. The grid is represented as a 2D array where `1` indicates an obstacle and `0` indicates a free space. The robot can move horizontally or vertically, but not diagonally. The robot starts at the top-left cell of the grid and needs to reach the bottom-right cell. However, due to obstacles, not every path is possible. Develop an algorithm to determine the minimum number of moves required for the robot to reach the bottom-right cell from the top-left cell. If it is not possible to reach the destination, return -1. -----Input----- The first line of input contains a single integer T, the number of test cases. Each test case starts with a single integer N, the size of the NxN grid. The following N lines contain N integers (0 or 1) each, forming the grid. -----Output----- For each test case, output a single line containing the minimum number of moves required for the robot to reach the bottom-right cell from the top-left cell. If it is not possible, output -1. -----Constraints----- 1 ≤ T ≤ 100 2 ≤ N ≤ 100 Each element of the grid is either 0 or 1. -----Example----- Input: 2 3 0 0 0 1 1 0 0 0 0 3 0 1 0 1 1 0 0 0 0 Output: 4 -1 -----Explanation----- Case 1. The robot can take the path (0,0) → (0,1) → (1,2) → (2,1) → (2,2) in 4 moves. Case 2. The robot cannot reach the bottom-right cell due to obstacles, so the output is -1.","solution":"from collections import deque def min_moves_to_reach_end(grid): N = len(grid) if grid[0][0] == 1 or grid[N-1][N-1] == 1: return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 0)]) # (row, col, moves) visited = set((0, 0)) while queue: row, col, moves = queue.popleft() if row == N - 1 and col == N - 1: return moves for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < N and 0 <= new_col < N and (new_row, new_col) not in visited and grid[new_row][new_col] == 0: visited.add((new_row, new_col)) queue.append((new_row, new_col, moves + 1)) return -1 def process_test_cases(test_cases): results = [] for grid in test_cases: results.append(min_moves_to_reach_end(grid)) return results"},{"question":"Given a string S of length N, we define the \\"weight\\" of the string as the sum of the weights of its characters. The weight of a character is defined by its position in the English alphabet (1 for \'a\', 2 for \'b\', ..., 26 for \'z\'). You are given Q queries, each query being a pair (L, R). For each query, you need to find the weight of the substring S from index L to R (both inclusive). -----Input----- - The first line contains an integer N, the length of the string. - The second line contains a string S of length N consisting of lowercase English letters. - The third line contains an integer Q, the number of queries. - Each of the next Q lines contains two space-separated integers L and R, representing a query. -----Output----- For each query, output a single line containing the weight of the substring from index L to R. -----Constraints----- - 1 ≤ N ≤ 105 - 1 ≤ Q ≤ 105 - 1 ≤ L ≤ R ≤ N -----Example----- Input: 7 abcdefg 3 1 3 2 4 1 7 Output: 6 9 28 -----Explanation----- - For the first query (1, 3), the substring is \\"abc\\" with weights 1, 2, 3 respectively, so the total weight is 1+2+3=6. - For the second query (2, 4), the substring is \\"bcd\\" with weights 2, 3, 4 respectively, so the total weight is 2+3+4=9. - For the third query (1, 7), the substring is \\"abcdefg\\" with weights 1, 2, 3, 4, 5, 6, 7 respectively, so the total weight is 1+2+3+4+5+6+7=28.","solution":"def weight_of_substring(S, L, R): Returns the weight of the substring S[L-1:R]. L and R are 1-based indices. return sum(ord(S[i]) - ord(\'a\') + 1 for i in range(L-1, R)) def process_queries(S, queries): Processes the list of queries on the string S. Each query is a tuple (L, R). Returns a list of results for each query. results = [] for L, R in queries: results.append(weight_of_substring(S, L, R)) return results"},{"question":"Your task is to rearrange a given string so that no two identical characters are adjacent to each other. You are allowed to swap any two characters in the string. The cost of swapping characters at positions `i` and `j` is given by |j - i|, i.e., the absolute difference between their positions. Given multiple test cases, for each test case, you should determine the minimum cost required to rearrange the string so that no two identical characters are adjacent. If it is not possible to rearrange the string as required, your program should return -1 for that test case. -----Input----- The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. Each test case consists of a single line containing a string s of length n, denoting the initial arrangement of characters. Note that the integer n is not given explicitly in the input. -----Output----- For each test case, print a single line containing the answer, which is the minimum cost to rearrange the string so that no two identical characters are adjacent. If it is not possible to rearrange the string as required, print -1 instead of the minimum cost. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 105 - The sum of n over all test cases does not exceed 106. - The string s consists of lowercase English letters only. -----Example----- Input: 4 aabbcc aa ab aaacccbb Output: 0 -1 0 4 -----Explanation----- Example case 1. The string can be rearranged to \\"abcabc\\" or \\"acbacb\\" which do not have identical adjacent characters. As all characters are swapped once, the total cost is 0. Example case 2. It is not possible to rearrange the string \\"aa\\" so that no two adjacent characters are identical, hence the answer is -1. Example case 3. The string is already in the required arrangement, so the minimum cost is 0. Example case 4. The string can be rearranged to \\"abcabcab\\" with a minimum cost of 4.","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_cost(s): freq = Counter(s) max_freq = max(freq.values()) if max_freq > (len(s) + 1) // 2: return -1 max_heap = [] for char, count in freq.items(): heappush(max_heap, (-count, char)) result = [] while len(max_heap) >= 2: count1, char1 = heappop(max_heap) count2, char2 = heappop(max_heap) result.append(char1) result.append(char2) if -count1 > 1: heappush(max_heap, (count1 + 1, char1)) if -count2 > 1: heappush(max_heap, (count2 + 1, char2)) if max_heap: result.append(max_heap[0][1]) return 0 def solve(test_cases): results = [] for s in test_cases: results.append(rearrange_cost(s)) return results"},{"question":"=====Problem Statement===== A string S is said to be a well-formed bracket sequence if it consists of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' such that: 1. An opening bracket must have a corresponding closing bracket. 2. An opening bracket must appear before its corresponding closing bracket. 3. Every closing bracket has a correct corresponding opening bracket of the same type (i.e., \'(\' with \')\', \'{\' with \'}\', and \'[\' with \']\'). Given a string S, your task is to determine if S is a well-formed bracket sequence. =====Input Format===== - A single line containing the string S of length n where 1 ≤ n ≤ 10^5. =====Output Format===== - Output \\"YES\\" if S is a well-formed bracket sequence. - Output \\"NO\\" otherwise. =====Sample Input 1===== ``` ()[]{} ``` =====Sample Output 1===== ``` YES ``` =====Sample Input 2===== ``` ([)] ``` =====Sample Output 2===== ``` NO ``` =====Sample Input 3===== ``` {[()]} ``` =====Sample Output 3===== ``` YES ```","solution":"def is_well_formed_bracket_sequence(S): Determines if the string S is a well-formed bracket sequence. Args: S (str): A string consisting of bracket characters. Returns: str: \\"YES\\" if S is a well-formed bracket sequence, \\"NO\\" otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in S: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return \\"NO\\" else: return \\"NO\\" if stack == []: return \\"YES\\" else: return \\"NO\\""},{"question":"# Intersecting Arrays Consider two input arrays of integers, `arr1` and `arr2`. Your task is to implement a function that finds the intersection of these two arrays and returns it as a new array. The intersection of two arrays includes all the elements that are present in both arrays (including duplicates). Implement the function `find_intersection(arr1, arr2)`, where: - `arr1` and `arr2` are arrays of integers The function should return an array containing the intersection of the two input arrays. Examples: ```python # Example 1 arr1 = [1, 2, 2, 1] arr2 = [2, 2] find_intersection(arr1, arr2) # Output: [2, 2] # Example 2 arr1 = [4, 9, 5] arr2 = [9, 4, 9, 8, 4] find_intersection(arr1, arr2) # Output: [4, 9] or [9, 4] ``` Notes: - The order of elements in the output array does not matter. - You may assume that each input array will have at most 1000 elements. - Try to solve this problem with a time complexity better than O(n*m).","solution":"def find_intersection(arr1, arr2): Returns the intersection of two arrays including duplicates. # Dictionary to count the elements in arr1 counts = {} for num in arr1: if num in counts: counts[num] += 1 else: counts[num] = 1 # List to store the intersection intersection = [] for num in arr2: if num in counts and counts[num] > 0: intersection.append(num) counts[num] -= 1 return intersection"},{"question":"Task Write a function that determines the length of the longest substring in a given string that contains all unique characters. Examples ``` longest_unique_substring(\\"abrkaabcdefghijjxxx\\") == 10 longest_unique_substring(\\"abcabcbb\\") == 3 longest_unique_substring(\\"bbbbb\\") == 1 ```","solution":"def longest_unique_substring(s): Determines the length of the longest substring with all unique characters in the given string. :param s: input string :returns: length of the longest unique substring n = len(s) i = 0 j = 0 max_length = 0 seen_chars = {} while j < n: if s[j] in seen_chars: # move i right i = max(seen_chars[s[j]] + 1, i) seen_chars[s[j]] = j max_length = max(max_length, j - i + 1) j += 1 return max_length"},{"question":"Write a function that takes an array of integers and returns the array of the integers that are perfect squares. An integer x is a perfect square if it can be expressed as y * y where y is also an integer. Numbers should be shown in the order that they appear in the input array. For F# return an \\"int list\\" Examples: ```python find_perfect_squares([1, 2, 3, 4, 5, 16, 20, 25]) => returns [1, 4, 16, 25] find_perfect_squares([10, 15, 21]) => returns [] # no perfect squares find_perfect_squares([9, 1, 36, 8]) => returns [9, 1, 36] ```","solution":"import math def find_perfect_squares(arr): Returns the array of integers that are perfect squares. Args: arr (list of int): The input array of integers. Returns: list of int: A list containing all perfect squares from the input array. return [x for x in arr if math.isqrt(x) ** 2 == x]"},{"question":"Given an array of integers, write a function that reorganizes the elements such that all even numbers appear before all odd numbers, without changing the relative order of the even and odd numbers. Example: ``` reorderEVENFirst([1, 2, 3, 4, 5, 6]); // should return [2, 4, 6, 1, 3, 5] reorderEVENFirst([4, 3, 2, 1]); // should return [4, 2, 3, 1] reorderEVENFirst([2, 4, 6]); // should return [2, 4, 6] reorderEVENFirst([3, 1, 5]); // should return [3, 1, 5] ``` Addendum: - The function should handle arrays with zero elements and return an empty array in such cases. - The function should handle negative integers, preserving the same order logic. - The relative order of the even and odd numbers should be preserved in the rearranged array.","solution":"def reorderEVENFirst(arr): Reorganizes the elements of the array such that all even numbers appear before all odd numbers, without changing the relative order of the even and odd numbers. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"Given an integer array nums, return an array of the same length where each element is the product of all the elements of the input array except the element at the same index. Example 1: Input: nums = [1,2,3,4] Output: [24,12,8,6] Explanation: The output at index 0 is 24, which is the product of 2, 3, and 4. Example 2: Input: nums = [0,1,2,3,4] Output: [24,0,0,0,0] Explanation: The output at index 0 is 24, which is the product of 1, 2, 3, and 4. The outputs at other indices containing 0 are all 0 because the product of any number with 0 is 0. Note: - You must write an algorithm that runs in O(n) time complexity. - The input array will have a length in the range [1, 100000]. - The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.","solution":"def product_except_self(nums): Return an array where each element is the product of all the other elements in the array. length = len(nums) answer = [0] * length # Calculate prefixes and store in answer array answer[0] = 1 for i in range(1, length): answer[i] = nums[i - 1] * answer[i - 1] # Calculate suffixes and update the answer array R = 1 for i in reversed(range(length)): answer[i] = answer[i] * R R *= nums[i] return answer"},{"question":"Given an integer array `arr` and an integer `k`, return the maximum elements that can be included in the subarray that has a sum less than or equal to `k`. A subarray is a contiguous part of the array. Example 1: Input: arr = [3, 1, 2, 1, 3], k = 4 Output: 3 Explanation: The subarray [1, 2, 1] has the maximum length under the constraint with sum equals to 4. Example 2: Input: arr = [1, 2, 3, 4], k = 5 Output: 2 Explanation: The subarray [2, 3] has the maximum length under the constraint with sum equals to 5. Constraints: - 1 <= arr.length <= 1000 - 1 <= arr[i] <= 1000 - 1 <= k <= 10^6","solution":"def max_length_subarray(arr, k): Returns the maximum number of elements in a subarray that has a sum less than or equal to k. max_length = 0 current_sum = 0 start_index = 0 for end_index in range(len(arr)): current_sum += arr[end_index] while current_sum > k: current_sum -= arr[start_index] start_index += 1 max_length = max(max_length, end_index - start_index + 1) return max_length"},{"question":"You need to implement a word transformation finder. You will be given a start word, an end word, and a list of valid words. You must return the shortest transformation sequence of words from start word to end word, such that: 1. Only one letter can be changed at a time. 2. Each transformed word must exist in the given list of valid words. If there is no such transformation sequence, return an empty list. Example: ```python valid_words = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] wordTransformation(\\"hit\\", \\"cog\\", valid_words) # should return [\\"hit\\", \\"hot\\", \\"dot\\", \\"dog\\", \\"cog\\"] wordTransformation(\\"hit\\", \\"top\\", valid_words) # should return [] wordTransformation(\\"hit\\", \\"hot\\", valid_words) # should return [\\"hit\\", \\"hot\\"] ``` Good luck!","solution":"from collections import deque def wordTransformation(start, end, valid_words): Finds the shortest transformation sequence from start to end where each word in the sequence is in valid_words and only one letter differs from the previous word. if start == end: return [start] valid_words = set(valid_words) if end not in valid_words: return [] queue = deque([(start, [start])]) visited = set() while queue: current_word, path = queue.popleft() visited.add(current_word) for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word == end: return path + [next_word] if next_word in valid_words and next_word not in visited: queue.append((next_word, path + [next_word])) visited.add(next_word) return []"},{"question":"Write a function named `sum_of_factorials` that calculates the sum of the factorials of the digits of a given positive integer `n` (1 <= n <= 10^6). The factorial of a digit `d` is denoted as `d!`, and is defined as the product of all positive integers up to `d`. For example, `5! = 5 * 4 * 3 * 2 * 1 = 120`. Your task is to: 1. Calculate the factorial for each digit in the given number `n`. 2. Sum all the factorials of the digits. 3. Return the resulting sum. # Example - For `n = 123`, the digits are `1`, `2`, and `3`. - `1! = 1` - `2! = 2` - `3! = 6` - Sum of factorials = `1 + 2 + 6 = 9` - For `n = 405`, the digits are `4`, `0`, and `5`. - `4! = 24` - `0! = 1` (Note: The factorial of `0` is defined as `1`) - `5! = 120` - Sum of factorials = `24 + 1 + 120 = 145` Thus, for the given examples, the function should return `9` and `145` respectively. # Function Signature ```python def sum_of_factorials(n: int) -> int: pass ```","solution":"import math def sum_of_factorials(n: int) -> int: Calculate the sum of the factorials of the digits of a given positive integer n. Parameters: n (int): The given positive integer (1 <= n <= 10^6) Returns: int: The sum of the factorials of the digits of n return sum(math.factorial(int(digit)) for digit in str(n))"},{"question":"Given a dictionary where keys are strings and values are either integers or other dictionaries, write a function that computes the sum of all the integers in the dictionary, including those in nested dictionaries. Your function should handle dictionaries nested to any depth. A few examples: ```python sum_nested_dict({\\"a\\": 1, \\"b\\": 2}) # returns 3 sum_nested_dict({\\"a\\": {\\"b\\": 3, \\"c\\": 4}, \\"d\\": 5}) # returns 12 sum_nested_dict({\\"a\\": {\\"b\\": {\\"c\\": {\\"d\\": 6}}}}) # returns 6 sum_nested_dict({\\"a\\": 1, \\"b\\": {\\"c\\": 2, \\"d\\": {\\"e\\": 3, \\"f\\": 4}}, \\"g\\": 5}) # returns 15 sum_nested_dict({}) # returns 0 ```","solution":"def sum_nested_dict(d): Recursively calculates the sum of all integers in a nested dictionary. :param d: Dictionary with nested dictionaries and integer values :return: Sum of all integer values in the dictionary total_sum = 0 for value in d.values(): if isinstance(value, int): total_sum += value elif isinstance(value, dict): total_sum += sum_nested_dict(value) # Recursion for nested dictionaries return total_sum"},{"question":"Given an array of integers nums and an integer k, return the maximum possible number of times that nums can be partitioned into subarrays of at least length k such that each subarray contains the same integer. Example 1: Input: nums = [3,3,3,3,3,3,3], k = 3 Output: 2 Explanation: We can split the array into two subarrays each containing [3,3,3]. Example 2: Input: nums = [1,2,1,2,1,2,1], k = 2 Output: 3 Explanation: We can split the array into three subarrays [1,1], [2,2], and [1,2]. Example 3: Input: nums = [5,5,5,6,6,6,6], k = 4 Output: 1 Explanation: We can split the array into one subarray [6,6,6,6]. Example 4: Input: nums = [1,2,3,4,5], k = 2 Output: 0 Explanation: There are no subarrays of length 2 or greater with the same integer. Constraints: - 1 <= nums.length <= 10^5 - 1 <= nums[i] <= 10^9 - 1 <= k <= nums.length","solution":"def max_partitions(nums, k): Returns the maximum number of times nums can be partitioned into subarrays of at least length k such that each subarray contains the same integer. from collections import Counter # Count the occurrences of each integer in the array count = Counter(nums) # Initialize the result for partitions result = 0 # For each unique number, calculate the maximum subarrays for num in count: result += count[num] // k return result"},{"question":"Implement a function multiply(a, b) which takes two non-negative integers a and b, and returns the product of the two numbers. You must not use the multiplication operator (*). Example: Given a = 3 and b = 4, return 12. Function signature: def multiply(a: int, b: int) -> int:","solution":"def multiply(a: int, b: int) -> int: Returns the product of a and b without using the multiplication operator. result = 0 # Iterate b times, adding a each time to result for _ in range(b): result += a return result"},{"question":"=====Function Descriptions===== .keys() This method returns a view object that displays a list of all the keys in the dictionary. Example ```python >>> d = {\'a\': 1, \'b\': 2, \'c\': 3} >>> print(d.keys()) dict_keys([\'a\', \'b\', \'c\']) ``` .values() This method returns a view object that displays a list of all the values in the dictionary. Example ```python >>> d = {\'a\': 1, \'b\': 2, \'c\': 3} >>> print(d.values()) dict_values([1, 2, 3]) ``` .items() This method returns a view object that displays a list of dictionary\'s key-value tuple pairs. Example ```python >>> d = {\'a\': 1, \'b\': 2, \'c\': 3} >>> print(d.items()) dict_items([(\'a\', 1), (\'b\', 2), (\'c\', 3)]) ``` .update(dict2) This method updates the dictionary with elements from dict2. Existing keys are updated with the new values from dict2. Example ```python >>> d1 = {\'a\': 1, \'b\': 2} >>> d2 = {\'b\': 3, \'c\': 4} >>> d1.update(d2) >>> print(d1) {\'a\': 1, \'b\': 3, \'c\': 4} ``` =====Problem Statement===== You have a dictionary d with integer keys and values. You receive M updates, each update is another dictionary with integer keys and values that needs to be merged with your dictionary. =====Input Format===== The first line contains integer k, the number of initial key-value pairs in the dictionary d. The next k lines each contain two space-separated integers representing a key and a value for the dictionary d. The following line contains integer M, the number of updates to be performed. The next M sections each start with an integer t, the number of elements in the update dictionary, followed by t pairs of integers representing the keys and values for the update dictionary. =====Constraints===== 0 < k < 10 0 < M < 10 0 < t < 10 =====Output Format==== Print the dictionary after performing all the updates.","solution":"def update_dictionary(initial_pairs, updates): Update dictionary based on multiple updates. Parameters: - initial_pairs: A list of tuples where each tuple contains two integers (key, value) - updates: A list of lists where each inner list contains tuples of integers to be updated as key-value pairs Returns: - The updated dictionary after all updates. d = dict(initial_pairs) for update in updates: update_dict = dict(update) d.update(update_dict) return d"},{"question":"Given a list of strings `domains` where each string is a domain name, you need to count the number of unique domains for each top-level domain (TLD). TLDs are the final part of the domain name, such as \\".com\\", \\".org\\", and \\".net\\". Write a function `count_tlds(domains: List[str]) -> Dict[str, int]` that takes in a list of domain strings and returns a dictionary where the keys are the TLDs and the values are the corresponding counts of unique domain names for each TLD. # Example ```python # Example Input domains = [ \\"example.com\\", \\"test.org\\", \\"domain.net\\", \\"anotherexample.com\\", \\"test.org\\", \\"website.com\\" ] # Example Output { \\".com\\": 3, \\".org\\": 1, \\".net\\": 1 } ``` # Constraints - The input list `domains` will contain between 1 and 1000 domain names. - Domain names are alphanumeric and may contain hyphens (`-`). - Domain names are case-insensitive (e.g., \\"Example.com\\" and \\"example.com\\" should be treated as the same domain). - TLDs will only include commonly used ones (e.g., \\".com\\", \\".org\\", \\".net\\", etc.), and will be at most 4 characters long (not including the dot).","solution":"from typing import List, Dict def count_tlds(domains: List[str]) -> Dict[str, int]: Counts the number of unique domains for each top-level domain (TLD). tld_count = {} unique_domains = set() for domain in domains: domain = domain.lower() tld = f\\".{domain.split(\'.\')[-1]}\\" if domain not in unique_domains: unique_domains.add(domain) if tld in tld_count: tld_count[tld] += 1 else: tld_count[tld] = 1 return tld_count"},{"question":"Given an array of integers, write a function to find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Implement the solution with a time complexity of O(n) and explain your approach.","solution":"def max_subarray_sum(nums): Returns the sum of the contiguous subarray with the largest sum. if not nums: return 0 max_end_here = nums[0] max_so_far = nums[0] for num in nums[1:]: max_end_here = max(num, max_end_here + num) max_so_far = max(max_so_far, max_end_here) return max_so_far"},{"question":"Write a function to compute the maximum sum of a contiguous subarray within a one-dimensional numerical array in Python. This problem is a variation of the well-known **Kadane\'s Algorithm**. -----Input----- - A single line containing a space-separated list of integers which represents the array. -----Output----- - A single integer representing the maximum sum of a contiguous subarray. -----Constraints and Subtasks----- - The array will contain at least one element and at most 100 elements. - Each element of the array will be between -1000 and 1000. Subtask 1 (10 points): - The array contains exactly 1 element. Subtask 2 (20 points): - The array contains between 2 to 10 elements. Subtask 3 (30 points): - The array contains between 11 to 50 elements. Subtask 4 (40 points): - The array contains between 51 to 100 elements. -----Example----- Input: 3 -2 5 -1 4 Output: 9","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray using Kadane\'s Algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"# BACKGROUND: A group of enthusiastic botanists wants to create a small balance in their garden ecosystem by planting a variety of plants and managing their growth nutrients. During their research, they found a mathematical model that predicts how plants grow under certain conditions. The model they are using shows that plants grow exponentially based on initial conditions and nutrient availability over time. # TECHNICAL DETAILS: The growth rate of any plant can be represented as `G(t) = P_initial * e^(r * t)`, where: - `P_initial`: Initial plant height in centimeters. - `e`: The base of the natural logarithm (approximately equal to 2.71828). - `r`: Growth rate (r = 0.03 for slow-growing plants, r = 0.07 for fast-growing plants). - `t`: Time in days. However, there\'s one specific requirement: once the plant reaches or exceeds a height of `100 cm`, the growth stops, and the height remains constant at `100 cm`. # TASK: Write a function that takes as input: ``` - The type of plant (\'slow\' or \'fast\'); - The initial height of the plant (in centimeters); - The duration for the growth measurement (in days); ``` And then returns the height of the plant at the end of the given duration. # NOTES: - Initial height and output height should be in decimals, rounded to the nearest tenth. - Input duration should be a whole number (integer). If not, round the input to the nearest whole number. - Perform all necessary input validation to ensure code robustness. Function Signature ```python def calculate_plant_height(plant_type: str, initial_height: float, duration: int) -> float: # Implementation here pass ```","solution":"import math def calculate_plant_height(plant_type: str, initial_height: float, duration: int) -> float: Calculate the height of a plant after a given duration based on its growth rate. Parameters: - plant_type: \'slow\' or \'fast\', indicating the growth rate type - initial_height: the initial height of the plant in centimeters - duration: the duration for the growth measurement in days (rounded to nearest whole number) Returns: - The height of the plant at the end of the given duration, rounded to the nearest tenth # Validate plant_type if plant_type not in [\'slow\', \'fast\']: raise ValueError(\\"Invalid plant type. Must be \'slow\' or \'fast\'.\\") # Validate initial_height if initial_height < 0: raise ValueError(\\"Initial height cannot be negative.\\") # Validate duration and round to nearest whole number if not isinstance(duration, int): duration = round(duration) # Growth rate based on plant type growth_rate = 0.03 if plant_type == \'slow\' else 0.07 # Calculate height using exponential growth model height = initial_height * math.exp(growth_rate * duration) # If height is >= 100 cm, cap it at 100 cm if height >= 100: height = 100.0 # Round height to the nearest tenth return round(height, 1)"},{"question":"You are given a string that consists of lowercase English letters. You need to remove duplicates from the string such that every character appears only once. The relative order of the characters should be maintained as in the original string. Given a string `s`, you will return a new string that contains no duplicate characters and maintains the original order of first occurrences from the string `s`. -----Input:----- - The first line contains an integer `T`, the number of test cases. - Each of the next `T` lines contains a single string `s`. -----Output:----- For each test case, output the modified string without duplicate characters, maintaining the relative order of their first occurrences. -----Constraints----- - 1 le T le 10^3 - 1 le text{length of } s le 10^5 - `s` contains only lowercase English letters. -----Sample Input:----- 3 abacd mississippi apple -----Sample Output:----- abcd misp aple -----Explanation:----- Test Case 1: The string `abacd`, after removing duplicates while maintaining the order of first occurrences, becomes `abcd`. Test Case 2: The string `mississippi`, after removing duplicates while maintaining the order of first occurrences, becomes `misp`. Test Case 3: The string `apple`, after removing duplicates while maintaining the order of first occurrences, becomes `aple`.","solution":"def remove_duplicates(s): Remove duplicates from the string s while maintaining the order of first occurrences. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result) def process_test_cases(T, test_cases): Process multiple test cases. Parameters: - T (int): number of test cases. - test_cases (list): list of strings for each test case. Returns: - list of results for each test case. results = [] for s in test_cases: results.append(remove_duplicates(s)) return results"},{"question":"You are given a list of integers. Write a function that returns a new list such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at `i`. ``` product_except_self([1, 2, 3, 4]) --> [24, 12, 8, 6] product_except_self([0, 2, 3, 4]) --> [24, 0, 0, 0] product_except_self([1, 2, 0, 4]) --> [0, 0, 8, 0] ``` > Note: It is guaranteed that the list will contain at least one number.","solution":"def product_except_self(nums): Returns a list such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at `i`. length = len(nums) if length == 1: return [1] # List to store the result result = [1] * length # Products to the left left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Products to the right and final result combined right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Write a function that takes an integer `n` (1 ≤ n ≤ 10^5) and returns the number of pairs of prime numbers (p1, p2) such that their sum is equal to `n`. Note: - Each prime number in the pair must be distinct. - The pair (p1, p2) is considered the same as (p2, p1) and should not be counted twice. **Examples**: ``` n = 10 ==> [(3, 7), (5, 5)] ==> 2 pairs n = 12 ==> [(5, 7)] ==> 1 pair n = 15 ==> [(2, 13), (7, 8)] ==> 2 pairs n = 27 ==> [(2, 25), (13, 14)] ==> 2 pairs ```","solution":"from sympy import isprime def count_prime_pairs(n): Returns the number of distinct pairs of prime numbers (p1, p2) such that p1 + p2 = n. count = 0 for i in range(2, n//2 + 1): p1, p2 = i, n - i if isprime(p1) and isprime(p2): count += 1 return count"},{"question":"A sequence is called a beautiful sequence if the ratio between any two adjacent elements is equal. Formally, sequence a_1, a_2, ldots, a_n is beautiful if for every i (1 le i lt n) the equality frac{a_{i+1}}{a_i} = r holds for some positive rational number r. Given a sequence b_1, b_2, ldots, b_m, Alice wants to know if it\'s possible to rearrange the elements of this sequence to form a beautiful sequence. To help Alice with her query, write a program that will determine whether it\'s possible to rearrange the sequence into a beautiful sequence and, if possible, produce one such rearranged sequence. -----Input----- The first line contains an integer T (1 le T le 100) — the number of test cases. The first line of each test case contains one integer m (2 le m le 100), the number of elements in the sequence. The second line of each test case contains m integers b_1, b_2, ldots, b_m (1 le b_i le 10^6) — the elements of the sequence. -----Output----- For each test case, if it is possible to rearrange the sequence into a beautiful sequence, print YES (in upper case) and the rearranged sequence. If it is not possible, print NO (in upper case). If there are multiple correct answers, any will be accepted. -----Example----- Input 4 3 2 4 8 3 1 4 9 4 3 9 27 81 2 5 10 Output YES 2 4 8 NO YES 3 9 27 81 YES 5 10","solution":"def is_beautiful_sequence_possible(T, test_cases): results = [] for i in range(T): m = test_cases[i][0] b = test_cases[i][1] sorted_b = sorted(b) if all(sorted_b[j] * sorted_b[1] == sorted_b[j+1] * sorted_b[0] for j in range(1, m-1)): results.append((\\"YES\\", sorted_b)) else: results.append((\\"NO\\", [])) return results"},{"question":"Given a list of integers, determine the maximum absolute difference between any two elements in the list. The absolute difference between two integers `a` and `b` is given by `|a - b|`. Write a function `max_abs_difference(numbers)` that takes a list of integers `numbers` as input and returns the maximum absolute difference between any two integers in the list. -----Input----- - List of integers where each integer is between -100 and 100, inclusive. - The list will have at least two elements. -----Output----- - A single integer representing the maximum absolute difference. -----Example----- Input: ```python [3, -7, 0, 9, -2] ``` Output: ``` 16 ``` Explanation: The maximum absolute difference is between -7 and 9, which is `|(-7) - 9| = 16`.","solution":"def max_abs_difference(numbers): Returns the maximum absolute difference between any two elements in the list. if not numbers or len(numbers) < 2: raise ValueError(\\"The list must contain at least two elements.\\") min_value = min(numbers) max_value = max(numbers) return abs(max_value - min_value)"},{"question":"Implement a function that takes a list of integers and returns a new list containing only the prime numbers from the original list, but in reverse order of their appearance. The order that the function receives its argument is: ```python extract_primes(numbers) ``` Examples ```python extract_primes([10, 41, 22, 53, 37, 89]) == [89, 37, 53, 41] extract_primes([31, 17, 12, 5, 6]) == [5, 17, 31] extract_primes([4, 6, 8, 10, 12]) == [] ``` Notes - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. - The input list will contain positive integers only.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False elif n == 2: return True elif n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def extract_primes(numbers): Returns a list of prime numbers from the original list in reverse order of their appearance. primes = [num for num in numbers if is_prime(num)] return primes[::-1]"},{"question":"Task A common problem in string manipulation is to count the repeated characters in a given string, and then transform it into a new string that indicates each character and its count in the sequence it was found. For example, the string \\"aaabbc\\" would be transformed to \\"a3b2c1\\". Task Write a function that takes a string as input and returns a new string where each character is followed by its count in the original string as described above. Function Signature: ```python def transform_string(s: str) -> str: # Your code here pass ``` # Input - A single string `s` which consists of lowercase alphabetical characters only (1 <= len(s) <= 1000) # Output - A string that shows each character followed by its count. # Example ```python transform_string(\\"aaabbc\\") # Output: \\"a3b2c1\\" transform_string(\\"aabcccccaaa\\") # Output: \\"a2b1c5a3\\" transform_string(\\"abcd\\") # Output: \\"a1b1c1d1\\" ``` # Note - You should maintain the order of characters as they appear in the input string. - Consecutive repeated characters should be counted before moving to the next set of characters. For instance, \\"aabbbcc\\" should result in \\"a2b3c2\\". Happy coding!","solution":"def transform_string(s: str) -> str: Transforms the input string into a new string where each character is followed by its count of consecutive occurrences in the original string. :param s: The input string consisting of lowercase alphabetical characters. :return: A new string where each character is followed by its count. if not s: return \\"\\" result = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: result.append(current_char + str(count)) current_char = char count = 1 result.append(current_char + str(count)) return \'\'.join(result)"},{"question":"# Context In computer networks, data packets often need to be transmitted efficiently between nodes (e.g., computers, servers). A common optimization challenge is to determine the shortest path from a source node to a destination node, ensuring minimal travel cost, avoiding nodes and links that may compromise efficiency and cost. # Your task You will be given a dictionary where keys represent nodes in a network and values are lists of tuples. Each tuple contains a neighboring node and the cost associated with traveling to that neighbor. Your task is to implement a function that finds the shortest path from a given source node to all other nodes in the network using Dijkstra\'s algorithm. Return a dictionary where keys are nodes and values are the minimum travel cost from the source node. Write a function `dijkstra(graph, source)` that takes: - `graph` (a dictionary where the keys are node labels and the values are lists of tuples `(neighbor, cost)`), representing the network. - `source` (a string), the starting node. Return a dictionary where the keys are nodes and the values are their shortest travel cost from the source node. If a node is unreachable, its cost should be represented as `float(\'inf\')`. Tips * Make good use of a priority queue to efficiently get the next node with the smallest known distance. * Initialize the source node\'s cost to 0 and all other nodes\' costs to infinity. * You may find the `heapq` module useful for managing the priority queue. Example ```python graph = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'A\', 1), (\'C\', 2), (\'D\', 5)], \'C\': [(\'A\', 4), (\'B\', 2), (\'D\', 1)], \'D\': [(\'B\', 5), (\'C\', 1)], } source = \'A\' print(dijkstra(graph, source)) # Output: {\'A\': 0, \'B\': 1, \'C\': 3, \'D\': 4} ```","solution":"import heapq def dijkstra(graph, source): Finds the shortest path from the source node to all other nodes in the network using Dijkstra\'s algorithm. Parameters: graph (dict): A dictionary representing the graph, where keys are node labels and values are lists of tuples (neighbor, cost). source (str): The starting node. Returns: dict: A dictionary where the keys are nodes and the values are their shortest travel cost from the source node. # Initialize distances with infinity distances = {node: float(\'inf\') for node in graph} distances[source] = 0 # Priority queue to manage the node exploration priority_queue = [(0, source)] heapq.heapify(priority_queue) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If the current distance is greater than the stored distance, continue if current_distance > distances[current_node]: continue # Explore neighbors for neighbor, cost in graph.get(current_node, []): distance = current_distance + cost if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"-----Problem Statement----- In a coding marathon, participants are divided into several groups, each group with P participants. Each participant in a group is given a pair of integers (a, b) and is asked to perform the following operation: For each participant i in a group, compute the sum of integers from a to b (inclusive). The output should provide the result of the operation for each participant in the group. -----Input:----- - First line will contain G, the number of groups. - Each group description starts with P, the number of participants in the group. - The next P lines contain two space-separated integers a and b for each participant. -----Output:----- For each group, print P lines where each line contains the sum of integers from a to b (inclusive) for each participant. -----Constraints----- - 1 leq G leq 100 - 1 leq P leq 100 - 1 leq a leq b leq 10^6 -----Sample Input:----- 2 3 1 10 15 20 100 105 2 5 8 10 15 -----Sample Output:----- 55 105 615 26 75 -----EXPLANATION:----- - For the first group with 3 participants: - Participant 1: Sum of integers from 1 to 10 = 1+2+3+...+10 = 55 - Participant 2: Sum of integers from 15 to 20 = 15+16+17+18+19+20 = 105 - Participant 3: Sum of integers from 100 to 105 = 100+101+102+103+104+105 = 615 - For the second group with 2 participants: - Participant 1: Sum of integers from 5 to 8 = 5+6+7+8 = 26 - Participant 2: Sum of integers from 10 to 15 = 10+11+12+13+14+15 = 75","solution":"def sum_from_a_to_b(a, b): Returns the sum of integers from a to b (inclusive). return (b * (b + 1)) // 2 - ((a - 1) * a) // 2 def coding_marathon_sums(groups): Computes the sum of integers from a to b for each participant in each group. :param groups: List of tuples, where each tuple is (P, [(a, b), ...]) :return: List of sums for all participants in all groups. results = [] for group in groups: P, participants = group for a, b in participants: results.append(sum_from_a_to_b(a, b)) return results"},{"question":"Write a function `find_element(matrix, element)` that takes a 2D matrix (a list of lists) and an integer `element`, and returns a tuple `(row, column)` indicating the position of the element in the matrix. If the element is not found, return `(-1, -1)`. The matrix is guaranteed to be a non-empty, rectangular 2D array where all rows are of the same length. # Function Signature ```python def find_element(matrix: List[List[int]], element: int) -> Tuple[int, int]: pass ``` # Example ```python matrix = [ [10, 20, 30, 40], [15, 25, 35, 45], [27, 29, 37, 48], [32, 33, 39, 50] ] find_element(matrix, 29) == (2, 1) find_element(matrix, 50) == (3, 3) find_element(matrix, 100) == (-1, -1) ``` # Notes - Your function should return the first occurrence of the element if it appears more than once. - Python\'s built-in functionality to search through lists (such as `index`) may be useful. - Consider performance implications for very large matrices.","solution":"from typing import List, Tuple def find_element(matrix: List[List[int]], element: int) -> Tuple[int, int]: Searches for the given element in the 2D matrix and returns a tuple (row, column) indicating its position. If the element is not found, returns (-1, -1). :param matrix: List[List[int]] - The 2D matrix where the element is searched. :param element: int - The element to find in the matrix. :return: Tuple[int, int] - The position of the found element in the matrix or (-1, -1) if not found. for row_index, row in enumerate(matrix): for col_index, value in enumerate(row): if value == element: return (row_index, col_index) return (-1, -1)"},{"question":"-----Problem Statement----- You are given an unweighted, undirected graph with N vertices and M edges. Your task is to determine whether it is possible to color the vertices of the graph using only two colors (say color 0 and color 1) such that no two adjacent vertices share the same color. If it is possible, output \\"YES\\", otherwise output \\"NO\\". -----Input----- - First line contains two space-separated integers N and M. Then M lines follow. - Each of the next M lines contains two space-separated integers u and v denoting an edge between vertex u and vertex v. -----Output----- A single line containing \\"YES\\" if the graph is bipartite (i.e., can be colored using two colors), otherwise \\"NO\\". -----Constraints----- - 1 leq N leq 1000 - 0 leq M leq 10000 - 0 leq u, v < N - There can be multiple edges between two vertices, and self-loops are possible. -----Sample Input----- 4 4 0 1 1 2 2 3 3 0 -----Sample Output----- YES -----Sample Input----- 3 3 0 1 1 2 2 0 -----Sample Output----- NO -----EXPLANATION----- For the first sample input, one way to color the vertices is: 0 -> color 0, 1 -> color 1, 2 -> color 0, 3 -> color 1. Adjacent vertices have different colors, so the answer is \\"YES\\". For the second sample input, it is not possible to color the graph with two colors such that no two adjacent vertices share the same color. Therefore, the answer is \\"NO\\".","solution":"from collections import deque, defaultdict def is_bipartite_graph(n, m, edges): Determines if an undirected graph is bipartite. Parameters: n (int): Number of vertices m (int): Number of edges edges (list of tuples): List of edges in the form of tuples (u, v) Returns: str: \\"YES\\" if the graph is bipartite, otherwise \\"NO\\". graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * n # -1 denotes uncolored def bfs(src): queue = deque([src]) color[src] = 0 while queue: node = queue.popleft() current_color = color[node] for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - current_color queue.append(neighbor) elif color[neighbor] == current_color: return False return True for i in range(n): if color[i] == -1: if not bfs(i): return \\"NO\\" return \\"YES\\""},{"question":"You are tasked with helping an automotive company to enhance the efficiency of their fuel stations. Write a function, `calculate_fuel(amount, efficiency)`, that computes the maximum distance a vehicle can travel given the amount of fuel in gallons and the vehicle\'s fuel efficiency in miles per gallon (mpg). The function should take two arguments: - `amount`: the amount of fuel in gallons (a positive integer). - `efficiency`: the fuel efficiency in miles per gallon (a positive float). The function should return an integer representing the maximum distance in miles that the vehicle can travel. Ensure an integer is returned, even if the calculation gives a floating point number. Your function should handle different edge cases where fuel efficiencies can have decimal points. Example usage: ```python >>> calculate_fuel(10, 20.5) 205 >>> calculate_fuel(3, 18.3) 54 ``` Note: Assume the amount of fuel will always be a positive integer and the efficiency will always be a positive number.","solution":"def calculate_fuel(amount, efficiency): Calculate the maximum distance a vehicle can travel given the amount of fuel and fuel efficiency. Parameters: amount (int): The amount of fuel in gallons. efficiency (float): The fuel efficiency in miles per gallon. Returns: int: The maximum distance in miles. # Calculate the distance distance = amount * efficiency # Return the distance as an integer return int(distance)"},{"question":"Ann is working with a sequence of n integers: a_1, a_2, ..., a_{n}. She is interested in finding out the largest sum of a contiguous subarray in the sequence. Formally, a contiguous subarray of a sequence is a subsequence consisting of consecutive elements in the sequence, i.e., if the sequence is a, then a contiguous subarray is represented as a[l..r] (1 ≤ l ≤ r ≤ n). Write a program to help Ann find the largest sum of a contiguous subarray in the sequence. # Input The first line contains a single integer n (1 ≤ n ≤ 3 * 10^5) — the length of the sequence a. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (-10^4 ≤ a_{i} ≤ 10^4) — the elements of the sequence. # Output Print a single integer — the largest sum of a contiguous subarray in the given sequence. # Examples Input 6 -2 1 -3 4 -1 2 1 -5 4 Output 6 Note In the first test case, the largest sum of a contiguous subarray is achieved with the subarray [4, -1, 2, 1], which sums to 6.","solution":"def max_subarray_sum(sequence): Finds the largest sum of a contiguous subarray in the given sequence. Arguments: sequence -- list of integers Returns: int -- the largest sum of a contiguous subarray max_ending_here = max_so_far = sequence[0] for x in sequence[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are given an array of integers and a list of queries. Each query asks for the number of distinct elements in a subarray. -----Input----- The first line contains two integers n and q (1 le n, q le 10^5) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), representing the elements of the array. Each of the next q lines contains two integers l and r (1 le l le r le n), representing the left and right boundaries of the subarray (inclusive). -----Output----- For each query, print one integer — the number of distinct elements in the subarray a[l..r]. -----Example----- Input 5 3 1 2 1 3 4 1 3 2 4 1 5 Output 2 3 4 -----Note----- In the first query, the subarray is [1, 2, 1], which contains 2 distinct elements: 1 and 2. In the second query, the subarray is [2, 1, 3], which contains 3 distinct elements: 2, 1, and 3. In the third query, the subarray is [1, 2, 1, 3, 4], which contains 4 distinct elements: 1, 2, 3, and 4.","solution":"def count_distinct_in_subarrays(n, q, array, queries): Given an array of integers and a list of queries, returns the number of distinct elements in each subarray defined by the queries. Parameters: n (int): The number of elements in the array. q (int): The number of queries. array (list of int): The array of elements. queries (list of tuples): The list of queries, where each tuple is (l, r). Returns: list of int: The answer to each query in sequence. results = [] for l, r in queries: subarray = array[l-1:r] distinct_count = len(set(subarray)) results.append(distinct_count) return results"},{"question":"You are given an n x n matrix representing the heights of a terrain in a grid. Each cell in the grid has a non-negative integer height. The water in the matrix starts off at height 0 and can rise up one unit per move. The water which starts at height 0 can move to any adjacent cell (up, down, left, right) with equal or lower height. Once the water reaches a cell, it can continue to spread to adjacent cells. Cells that are not flooded are impenetrable to water. Write a function that returns the minimum number of moves required for the water to fill all the accessible areas in the terrain, starting from the lowest height. Example 1: Input: [ [0, 1, 2], [1, 2, 3], [2, 3, 4] ] Output: 4 Explanation: The water starts filling from height 0 and can move up at equal or lower height successfully over 4 moves to cover the entire grid. Example 2: Input: [ [3, 3, 4], [2, 4, 5], [4, 5, 6] ] Output: -1 Explanation: The water starts at height 0 but cannot reach cells with height 2 or higher in the first move, leaving some areas unfilled. Note: - The dimension n of the matrix is in the range [1, 1000]. - The height of each cell is in the range [0, 100000].","solution":"from collections import deque def min_moves_to_fill_terrain(matrix): n = len(matrix) if n == 0: return 0 # Initialize the queue with all cells of height 0 queue = deque() visited = [[False] * n for _ in range(n)] for i in range(n): for j in range(n): if matrix[i][j] == 0: queue.append((i, j)) visited[i][j] = True if not queue: return -1 moves = 0 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] while queue: for _ in range(len(queue)): x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and matrix[nx][ny] <= moves + 1: queue.append((nx, ny)) visited[nx][ny] = True moves += 1 # Check if all cells are visited for i in range(n): for j in range(n): if not visited[i][j]: return -1 return moves - 1"},{"question":"Create a function called `spiral_matrix` that generates a square matrix of size `n x n` filled with elements from 1 to `n^2` in a spiral order, starting from the top-left corner and moving inwards in a clockwise direction. # Function Signature ```python def spiral_matrix(n: int) -> List[List[int]]: pass ``` # Input - `n` (integer, 1 <= n <= 100): the size of the square matrix. # Output - A 2-dimensional list of integers (a square matrix). # Example ```python spiral_matrix(3) ``` should return: ``` [ [ 1, 2, 3], [ 8, 9, 4], [ 7, 6, 5] ] ``` ```python spiral_matrix(4) ``` should return: ``` [ [ 1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] ``` # Constraints - You should ensure that the function runs efficiently for the given constraints. - The function should handle edge cases, such as `n = 1`.","solution":"from typing import List def spiral_matrix(n: int) -> List[List[int]]: matrix = [[0] * n for _ in range(n)] num = 1 top, bottom, left, right = 0, n - 1, 0, n - 1 while top <= bottom and left <= right: # Traverse from left to right for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 # Traverse from top to bottom for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 if top <= bottom: # Traverse from right to left for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 if left <= right: # Traverse from bottom to top for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"# Zigzag Conversion Problem Statement Write a function `convert` that converts a given string into a zigzag pattern on a given number of rows. The zigzag pattern involves writing the characters of the string in a zigzag fashion over the given number of rows, and then reading the characters row by row. For example, the string `\\"PAYPALISHIRING\\"` with 3 rows would be written in the zigzag pattern as follows: ``` P A H N A P L S I I G Y I R ``` So, for 3 rows, the output would be: `\\"PAHNAPLSIIGYIR\\"`. Similarly, the string `\\"PAYPALISHIRING\\"` with 4 rows would be written in the zigzag pattern as follows: ``` P I N A L S I G Y A H R P I ``` So, for 4 rows, the output would be: `\\"PINALSIGYAHRPI\\"`. The task is to implement the `convert` function which takes in two parameters: the input string and the number of rows, and returns the string formatted in the specified zigzag pattern. Function Signature ```python def convert(s: str, numRows: int) -> str: ``` Input - `s`: The input string containing alphanumeric characters and special characters (1 ≤ len(s) ≤ 1000). - `numRows`: An integer representing the number of rows for the zigzag pattern (1 ≤ numRows ≤ 1000). Output - Returns a string that represents the input string written in the specified zigzag pattern. Examples Example 1: ```python convert(\\"PAYPALISHIRING\\", 3) ``` _Returns: \\"PAHNAPLSIIGYIR\\"_ Example 2: ```python convert(\\"PAYPALISHIRING\\", 4) ``` _Returns: \\"PINALSIGYAHRPI\\"_ Example 3: ```python convert(\\"A\\", 1) ``` _Returns: \\"A\\"_ Constraints - The output string must be constructed by reading the characters from the zigzag pattern row by row. - The function should handle edge cases where `numRows` is 1. Hints - Use a list of strings to store the characters for each row. - Traverse the input string character by character and add each character to the appropriate row. - Adjust the direction of traversal when the top or bottom of the zigzag pattern is reached.","solution":"def convert(s: str, numRows: int) -> str: if numRows == 1 or numRows >= len(s): return s rows = [\'\'] * numRows current_row, step = 0, -1 for char in s: rows[current_row] += char # Change direction at the first or last row if current_row == 0 or current_row == numRows - 1: step *= -1 current_row += step return \'\'.join(rows)"},{"question":"Given a string `s` and an array of strings `words`, find the minimum number of substrings of `s` required such that each substring is one of the words in the array. If it is not possible to form the string `s` using the words in the array, return -1. For example: ``` s = \\"leetcode\\" words = [\\"leet\\", \\"code\\"] ``` The result is 2 because `s` can be divided into [\\"leet\\", \\"code\\"]. ``` s = \\"applepenapple\\" words = [\\"apple\\", \\"pen\\"] ``` The result is 3 because `s` can be divided into [\\"apple\\", \\"pen\\", \\"apple\\"]. ``` s = \\"catsandog\\" words = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] ``` The result is -1 because there is no way to divide `s` into substrings which are all words in the array. The function `min_substrings()` will calculate the minimum number of substrings. It will receive the string `s` and the array `words` as arguments and output the minimum number of substrings or -1 if it is not possible to do so. ```python min_substrings(\\"leetcode\\", [\\"leet\\", \\"code\\"]) == 2 min_substrings(\\"applepenapple\\", [\\"apple\\", \\"pen\\"]) == 3 min_substrings(\\"catsandog\\", [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"]) == -1 ```","solution":"def min_substrings(s, words): Given a string s and an array of strings words, find the minimum number of substrings of s required such that each substring is one of the words in the array. If it is not possible to form the string s using the words in the array, return -1. words_set = set(words) n = len(s) dp = [float(\'inf\')] * (n + 1) dp[0] = 0 for i in range(1, n + 1): for word in words_set: if i >= len(word) and s[i - len(word):i] == word: dp[i] = min(dp[i], dp[i - len(word)] + 1) return dp[n] if dp[n] != float(\'inf\') else -1"},{"question":"Write a function `compressString` that takes a string as input and returns a compressed version of that string. The compression algorithm should follow the run-length encoding technique where consecutive repeated characters are replaced by a single character followed by the number of repetitions. If the compressed string is longer or equal in length to the original string, the function should return the original string instead. For example: - Given the input \\"aaabcccccaaa\\", the function should return \\"a3b1c5a3\\". - Given the input \\"abcdef\\", the function should return \\"abcdef\\". # Example ```python def compressString(s: str) -> str: # Your code here input1 = \\"aaabcccccaaa\\" output1 = compressString(input1) print(output1) # Output: \\"a3b1c5a3\\" input2 = \\"abcdef\\" output2 = compressString(input2) print(output2) # Output: \\"abcdef\\" ```","solution":"def compressString(s: str) -> str: Compresses the input string using run-length encoding. If the compressed string is not shorter than the original string, the original string is returned. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 # Add the last set of characters compressed.append(s[-1] + str(count)) compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"You are given an array of integers where each element represents the price of a stock on that particular day. You are only allowed to complete at most one transaction (i.e., buy one and sell one share of the stock), but you cannot sell a stock before you buy one. Your task is to determine the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0. **Function Signature:** ```python def maxProfit(prices: List[int]) -> int: ``` **Input:** - a list of integers `prices` where `prices[i]` is the price of a stock on day `i`. **Output:** - an integer representing the maximum profit. **Examples:** ```python assert maxProfit([7, 1, 5, 3, 6, 4]) == 5 # Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. assert maxProfit([7, 6, 4, 3, 1]) == 0 # In this case, no transactions are done and the max profit = 0. assert maxProfit([1, 2, 3, 4, 5]) == 4 # Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5 - 1 = 4. ``` You should take into account edge cases where the prices list might be empty or contain only one element.","solution":"from typing import List def maxProfit(prices: List[int]) -> int: if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"A botanist is trying to grow plants in a triangular arrangement in their garden. They want you to code an interesting pattern based on this idea. The pattern should represent the triangular structure where each level has increasing number of plants. Let\'s help the botanist create the pattern. -----Input:----- - The first line will contain N, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer L. -----Output:----- For each test case, output the triangular pattern of plants. -----Constraints----- - 1 leq N leq 100 - 1 leq L leq 100 -----Sample Input:----- 3 2 4 3 -----Sample Output:----- * ** * ** *** **** * ** *** -----EXPLANATION:----- For each test case, the output is the triangular pattern such that for each L levels, the i-th level (1<=i<=L) contains i stars (representing plants).","solution":"def generate_triangle_patterns(test_cases): results = [] for L in test_cases: pattern = [] for i in range(1, L + 1): pattern.append(\'*\' * i) results.append(\'n\'.join(pattern)) return \'nn\'.join(results)"},{"question":"Create a function that accepts a list of integers and returns a new list containing only the prime numbers from the original list. If the original list is empty or contains no prime numbers, the function should return an empty list. Function signature: **filter_primes(numbers: List[int]) -> List[int]** Prime number is a number greater than 1 that has no positive divisors other than 1 and itself. **Example:** Input: [2, 3, 4, 5, 6, 7, 8, 9, 10] Output: [2, 3, 5, 7] Input: [1, 4, 6, 8, 10] Output: [] Input: [] Output: [] **Note:** You may assume that all numbers in the input list are positive integers.","solution":"from typing import List def is_prime(n: int) -> bool: Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers: List[int]) -> List[int]: Returns a list of prime numbers from the given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Simulate the Logic of a Vending Machine Write a function `vendingMachine(commands)` that simulates the behavior of a vending machine. The function takes a list of commands as input. Each command is either: 1. `insert <amount>` - Insert the specified amount of money (a positive integer) into the vending machine. 2. `select <item> <price>` - Attempt to purchase an item with the specified price (a positive integer), if there is enough money. 3. `refund` - Return the current balance of money in the machine back to the user. The vending machine should process these commands in order and keep track of the balance of money inserted. If an `insert` command is issued, the specified amount of money is added to the balance. If a `select` command is issued and there is enough money in the machine to cover the price of the item, it deducts the price of the item from the balance and prints `\\"dispense <item>\\"`. If there is not enough money, it prints `\\"insufficient funds\\"`. The `refund` command should print `\\"refund <amount>\\"` and reset the balance to zero. Your function should return a list of the printed outputs for each command processed. Example: ```python commands = [\\"insert 50\\", \\"select soda 20\\", \\"select juice 30\\", \\"select water 50\\", \\"refund\\"] result = vendingMachine(commands) ``` Output: ```python [\\"dispense soda\\", \\"dispense juice\\", \\"insufficient funds\\", \\"refund 0\\"] ``` Implement the `vendingMachine` function to handle the processing of these commands and return the correct outputs.","solution":"def vendingMachine(commands): balance = 0 outputs = [] for command in commands: parts = command.split() action = parts[0] if action == \\"insert\\": amount = int(parts[1]) balance += amount elif action == \\"select\\": item = parts[1] price = int(parts[2]) if balance >= price: balance -= price outputs.append(f\\"dispense {item}\\") else: outputs.append(\\"insufficient funds\\") elif action == \\"refund\\": outputs.append(f\\"refund {balance}\\") balance = 0 return outputs"},{"question":"Consider a grid of size M x N with each cell containing a non-negative integer representing the number of candies in that cell. You are initially located in the top-left cell (1,1) and you want to collect as many candies as possible by the time you reach the bottom-right cell (M,N). You can only move down or right at any point in time. Write a program to determine the maximum number of candies you can collect on your way to the bottom-right cell. -----Constraints----- - 1 leq M, N leq 100 - 0 leq grid[i][j] leq 100 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: M N grid[1][1] grid[1][2] ... grid[1][N] grid[2][1] grid[2][2] ... grid[2][N] : grid[M][1] grid[M][2] ... grid[M][N] -----Output----- Print the maximum number of candies that can be collected. -----Sample Input----- 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output----- 29 Explanation: The path to collect the maximum number of candies will be: 1 -> 4 -> 7 -> 8 -> 9, with a total of 1+4+7+8+9 = 29 candies.","solution":"def max_candies(M, N, grid): # Create a 2D DP array to store the maximum candies collected till each cell dp = [[0] * N for _ in range(M)] # Initialize the first cell with the number of candies in the starting cell dp[0][0] = grid[0][0] # Fill the first row (moving only right) for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (moving only down) for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The last cell will have the maximum candies collected return dp[M-1][N-1] def read_input(): import sys input = sys.stdin.read data = input().split() M = int(data[0]) N = int(data[1]) grid = [] idx = 2 for i in range(M): row = [int(data[idx + j]) for j in range(N)] grid.append(row) idx += N return M, N, grid if __name__ == \\"__main__\\": M, N, grid = read_input() result = max_candies(M, N, grid) print(result)"},{"question":"Given a string `s` consisting of only lowercase English letters, write a function `longest_prefix_suffix` that returns the longest proper prefix of `s` which is also a suffix. If no such prefix exists, return an empty string. For example: ```python longest_prefix_suffix(\\"abab\\") # returns \\"ab\\" longest_prefix_suffix(\\"abcd\\") # returns \\"\\" longest_prefix_suffix(\\"aabaaab\\") # returns \\"aab\\" ``` A proper prefix is a prefix of a string that is not equal to the string itself. For instance, for the string \\"abab\\", \\"aba\\" is not a proper prefix but \\"ab\\" is. Hints: - This problem can be approached using the concepts of the KMP (Knuth-Morris-Pratt) pattern matching algorithm. - Consider preprocessing the string to build an array that contains the lengths of the longest proper prefixes which are also suffixes for substrings of the given string. Good luck!","solution":"def longest_prefix_suffix(s): Given a string s consisting of only lowercase English letters, return the longest proper prefix of s which also a suffix. If no such prefix exists, return an empty string. n = len(s) lps = [0] * n # lps[i] will be the longest proper prefix which is also a suffix in s[:i+1] length = 0 # length of the previous longest prefix suffix i = 1 while i < n: if s[i] == s[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 longest_proper_prefix_suffix_length = lps[-1] return s[:longest_proper_prefix_suffix_length] if longest_proper_prefix_suffix_length else \\"\\""},{"question":"Given an integer N and an array of N integers, determine the minimum and maximum possible outcomes of selecting K integers from the array and summing them. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ K ≤ N - -10^5 ≤ array[i] ≤ 10^5 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N K array_1 array_2 ... array_N -----Output----- Print two integers: the minimum sum and the maximum sum of any K integers selected from the array. -----Sample Input----- 5 3 3 7 -2 5 1 -----Sample Output----- 2 15 Explanation: The possible sums of selecting 3 integers from the array are: - Minimum sum: -2 + 1 + 3 = 2 - Maximum sum: 5 + 7 + 3 = 15","solution":"def min_max_sums(N, K, array): Determine the minimum and maximum possible sums of selecting K integers from the array. Parameters: N (int): The number of integers in the array. K (int): The number of integers to select. array (List[int]): The array of integers. Returns: Tuple[int, int]: The minimum and maximum sums possible. # Sort the array to easily find the smallest and largest elements array.sort() # Minimum sum by selecting the smallest K elements min_sum = sum(array[:K]) # Maximum sum by selecting the largest K elements max_sum = sum(array[-K:]) return min_sum, max_sum"},{"question":"Write a function that takes a string containing integers separated by commas and returns a tuple containing two elements: the sum of the positive integers and the sum of the negative integers. If the string is empty, the function should return (0, 0). **Function Signature:** ```python def sum_positive_negative_numbers(numbers: str) -> (int, int): ``` **Examples:** ```python sum_positive_negative_numbers(\\"1,2,-3,4,-5\\") # returns (7, -8) sum_positive_negative_numbers(\\"-2,-3,-4\\") # returns (0, -9) sum_positive_negative_numbers(\\"\\") # returns (0, 0) sum_positive_negative_numbers(\\"5,10\\") # returns (15, 0) ``` **Constraints:** - All integers in the input string are separated by a single comma and contain no spaces. - The input string can be empty. - All integers in the input string can be assumed to be valid and within the range of standard 32-bit integers.","solution":"def sum_positive_negative_numbers(numbers: str) -> (int, int): Given a string of integers separated by commas, returns a tuple containing: - The sum of the positive integers - The sum of the negative integers If the input string is empty, returns (0, 0). if not numbers: return (0, 0) positive_sum = 0 negative_sum = 0 # Split the string by comma and iterate through each number for num in numbers.split(\',\'): n = int(num) if n > 0: positive_sum += n elif n < 0: negative_sum += n return (positive_sum, negative_sum)"},{"question":"You\'re given a list `names` which contains a list of names in mixed case. Write a function `group_names_by_initial()` that takes this list of names and returns a dictionary. The dictionary should group all names that start with the same character (case-insensitive) into lists, where the keys are the uppercase character. For example: ```python >>> names = [\\"Alice\\", \\"adam\\", \\"Bob\\", \\"barbara\\", \\"Charlie\\", \\"carter\\"] >>> group_names_by_initial(names) {\'A\': [\'Alice\', \'adam\'], \'B\': [\'Bob\', \'barbara\'], \'C\': [\'Charlie\', \'carter\']} ``` Note that the original case of the names is preserved in the output lists. The input list will always be a valid list containing at least one name, and all names will be non-empty strings containing only alphabetic characters.","solution":"def group_names_by_initial(names): Groups names by their starting character (case-insensitive). Parameters: names (list of str): The list of names to be grouped. Returns: dict: A dictionary where keys are uppercase initials and values are lists of names. from collections import defaultdict grouped_names = defaultdict(list) for name in names: initial = name[0].upper() grouped_names[initial].append(name) return dict(grouped_names)"},{"question":"Given a list of integers, return a new list where each element is the product of all the numbers in the original list except the one at the same index. ```python product_except_self([1,2,3,4]) # = [24, 12, 8, 6] # Explanation: # [24 (2 x 3 x 4), 12 (1 x 3 x 4), 8 (1 x 2 x 4), 6 (1 x 2 x 3) ] ``` Constraints **2 <= len(list) <= 10^5**","solution":"def product_except_self(nums): Given a list of integers, return a new list where each element is the product of all the numbers in the original list except the one at the same index. length = len(nums) # Initialize prefix and suffix product lists prefix_products = [1] * length suffix_products = [1] * length result = [1] * length # Compute prefix products for i in range(1, length): prefix_products[i] = prefix_products[i-1] * nums[i-1] # Compute suffix products for i in range(length-2, -1, -1): suffix_products[i] = suffix_products[i+1] * nums[i+1] # Compute result by multiplying prefix and suffix products for i in range(length): result[i] = prefix_products[i] * suffix_products[i] return result"},{"question":"You are given an array of integers. Your task is to find the maximum difference between any two elements such that the larger element comes after the smaller element in the array. If the array contains fewer than two elements, return 0. **Examples** ``` Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: The maximum difference is between 1 and 6 (6-1). Input: [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no larger element comes after a smaller element. So, the maximum difference is 0. Input: [2, 3, 10, 6, 4, 8, 1] Output: 8 Explanation: The maximum difference is between 2 and 10 (10-2). ```","solution":"def max_difference(arr): Finds the maximum difference between any two elements such that the larger element comes after the smaller element in the array. Parameters: arr (list): List of integers Returns: int: Maximum difference or 0 if no valid pair exists if len(arr) < 2: return 0 min_element = arr[0] max_diff = 0 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"=====Function Descriptions===== collections.Counter() A Counter is a container that keeps track of how many times equivalent values are added. It can be used to count elements in an iterable or to create a dictionary where keys are elements and values are their counts. Sample Code >>> from collections import Counter >>> >>> c = Counter([\'a\', \'b\', \'c\', \'a\', \'b\', \'b\']) >>> print(c) Counter({\'b\': 3, \'a\': 2, \'c\': 1}) >>> >>> d = Counter({\'a\': 2, \'b\': 3, \'c\': 1}) >>> print(d) Counter({\'b\': 3, \'a\': 2, \'c\': 1}) >>> >>> e = Counter(a=2, b=3, c=1) >>> print(e) Counter({\'b\': 3, \'a\': 2, \'c\': 1}) >>> >>> print(c[\'a\']) 2 =====Problem Statement===== You are given a string consisting of lowercase letters only. Your task is to count the occurrences of each letter in the string and output in alphabetical order. Example Input: \\"aabbbcc\\" Output: a 2 b 3 c 2 =====Input Format===== A single line string consisting of lowercase letters. =====Constraints===== 0 < length of string ≤ 100 =====Output Format===== Output each character and its count in alphabetical order. Each pair should be on a new line.","solution":"from collections import Counter def count_characters(s): Given a string s consisting of lowercase letters, count the occurrences of each letter and output in alphabetical order. Parameters: s (str): Input string. Returns: str: A string where each character and its count are in alphabetical order. # Count occurrences of each character counter = Counter(s) # Sort the keys alphabetically sorted_keys = sorted(counter.keys()) # Create the output string result = \\"n\\".join(f\\"{char} {counter[char]}\\" for char in sorted_keys) return result"},{"question":"You are tasked with writing a function that processes transaction logs and determines the account balance after a series of transactions. Each log entry reports a transaction in a universally recognized format. # Input The function will receive a list of strings. Each string represents a transaction in the form: \\"action amount\\", where \\"action\\" is either: - \\"D\\" for deposit, which means adding the amount to the account balance, - or \\"W\\" for withdrawal, which means subtracting the amount from the account balance. # Output The final account balance after processing all transactions. If a withdrawal results in a negative balance, the transaction should be ignored. # Requirements 1. **Function Signature:** ```python def process_transactions(transactions: List[str]) -> int: ``` 2. **Example Input:** ```python transactions = [\\"D 300\\", \\"D 200\\", \\"W 500\\", \\"D 100\\", \\"W 250\\"] ``` 3. **Example Output:** ```python >>> process_transactions(transactions) 100 ``` # Explanation - Initial balance is 0. - Deposit 300: balance = 300 - Deposit 200: balance = 500 - Withdraw 500: balance = 0 - Deposit 100: balance = 100 - Attempt to withdraw 250: ignored (balance would be negative) The final balance is 100.","solution":"from typing import List def process_transactions(transactions: List[str]) -> int: Processes a list of transactions and returns the final account balance. Each transaction is in the form \\"action amount\\", where \\"action\\" is either \\"D\\" for deposit or \\"W\\" for withdrawal. Withdrawals that would result in a negative balance are ignored. :param transactions: List of transaction strings :return: The final account balance as an integer balance = 0 for transaction in transactions: action, amount_str = transaction.split() amount = int(amount_str) if action == \\"D\\": balance += amount elif action == \\"W\\": if balance >= amount: balance -= amount return balance"},{"question":"-----Problem description.----- Given a string containing only uppercase and lowercase letters, check if it is a palindrome. A string is called a palindrome if it reads the same backward as forward. -----Input----- - The first line of each test case contains an integer T. - The next T lines each contain a string S which you need to check. -----Output----- - For each test case output \\"Yes\\" if the string is a palindrome, otherwise output \\"No\\". -----Constraints----- - 1 ≤ T ≤ 105 - 1 ≤ |S| ≤ 106 -----Example----- Input: 3 racecar Python Madam Output: Yes No Yes -----Explanation----- For the first string \\"racecar\\", it reads the same backward as forward, so the output is \\"Yes\\". For the second string \\"Python\\", it does not read the same backward as forward, hence the output is \\"No\\". For the third string \\"Madam\\", it reads the same backward as forward when case is ignored, thus the output is \\"Yes\\". NOTE: Consider the string as case-insensitive for palindrome checking.","solution":"def is_palindrome(s): Checks if the provided string s is a palindrome. s = s.lower() return s == s[::-1] def check_palindromes(test_cases): Processes a list of test cases to determine if each string is a palindrome. :param test_cases: List of strings to check for palindrome property :return: List containing \\"Yes\\" or \\"No\\" for each input string results = [] for s in test_cases: if is_palindrome(s): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"# Task Given a string containing alphanumeric characters and parentheses, write a function to check if the parentheses are balanced. A string is considered balanced if each closing parenthesis `)` has a corresponding opening parenthesis `(` and they are correctly nested. # Example For `str = \\"a(b)c(d)e(f(g)h)i(j)k\\"` The result should be `True` For `str = \\"a)b(c)d(e(f)g\\"` The result should be `False` # Input/Output - `[input]` string `str` - `[output]` a boolean representing whether the string has balanced parentheses or not.","solution":"def is_balanced_parentheses(s): Returns True if the parentheses in the string are balanced, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Carolina loves magical numbers. She recently learned about a special type of number called a Lucky Number. She believes that any number can transform into a Lucky Number through a series of operations. A Lucky Number is defined as a number which has the sum of its digits equal to a single-digit number. To transform a number into a Lucky Number, Carolina performs the following operation repeatedly until the number becomes a Lucky Number: 1. Replace the number by the sum of its digits. Can you help Carolina find out the Lucky Number for given numbers? -----Input:----- - First line will contain an integer N, denoting the number of test cases. - Each of the next N lines contains a single integer num representing the number. -----Output:----- For each test case, output a single integer representing the Lucky Number obtained from the corresponding input number. -----Constraints----- - 1 leq N leq 1000 - 1 leq num leq 10^{18} -----Sample Input:----- 3 9875 123456789 1000000000000 -----Sample Output:----- 2 9 1 -----EXPLANATION:----- i) For the first test case, num = 9875, the steps to transform are: 9875 to 9 + 8 + 7 + 5 = 29 29 to 2 + 9 = 11 11 to 1 + 1 = 2 So, the Lucky Number is 2. ii) For the second test case, num = 123456789, the steps to transform are: 123456789 to 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45 45 to 4 + 5 = 9 So, the Lucky Number is 9. iii) For the third test case, num = 1000000000000, the steps to transform are: 1000000000000 to 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 = 1 So, the Lucky Number is 1.","solution":"def get_lucky_number(num): Transforms the input number into a Lucky Number. A Lucky Number is defined as a number which has the sum of its digits equal to a single-digit number. while num > 9: num = sum(int(digit) for digit in str(num)) return num def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for num in test_cases: results.append(get_lucky_number(num)) return results"},{"question":"# Secure Containers You are asked to design a system for a secure container shipper company. The company deals with containers of different sizes, where each container is identified by a unique ID and has a specified weight. The containers need to be shipped in batches, and each batch should not exceed a certain weight limit. Your task is to write a function that takes a list of containers and a maximum weight limit, and returns a collection of batches where each batch does not exceed the given weight limit. Each batch should contain as many containers as possible without exceeding the weight limit. # Input The function will receive two arguments: 1. `containers`: A list of tuples, where each tuple consists of a string (container ID) and an integer (container weight). For example: `[(\'C1\', 10), (\'C2\', 8), (\'C3\', 15)]` 2. `max_weight`: An integer representing the maximum allowable weight for a batch of containers. # Output The function should return a list of batches, where each batch is a list of container IDs, and the total weight of each batch does not exceed `max_weight`. The function should aim to minimize the number of batches. # Examples ```python # Example 1: containers = [(\'C1\', 10), (\'C2\', 8), (\'C3\', 15), (\'C4\', 12)] max_weight = 20 # One possible solution: # The function returns [[\\"C1\\", \\"C2\\"], [\\"C3\\"], [\\"C4\\"]] # Note: Another valid solution could be [[\\"C2\\", \\"C4\\"], [\\"C1\\"], [\\"C3\\"]] # Example 2: containers = [(\'A\', 5), (\'B\', 5), (\'C\', 5), (\'D\', 7), (\'E\', 8)] max_weight = 10 # One possible solution: # The function returns [[\\"A\\", \\"B\\"], [\\"C\\"], [\\"D\\"], [\\"E\\"]] ``` # Notes - Any valid batching that meets the weight constraint and minimizes the number of batches is acceptable. - You can assume that all given containers can always be split into batches without checking for impossibility.","solution":"def create_batches(containers, max_weight): This function takes a list of containers with each container\'s id and weight, and a maximum weight limit for each batch, and returns a list of batches such that no batch exceeds the given weight limit. from itertools import combinations # Sort containers by weight descending containers.sort(key=lambda x: x[1], reverse=True) # Initialize result batches = [] # While there are containers left while containers: batch = [] batch_weight = 0 # Iterate over a copy of the list so we can modify the original list for container in containers[:]: container_id, container_weight = container if batch_weight + container_weight <= max_weight: batch.append(container_id) batch_weight += container_weight containers.remove(container) batches.append(batch) return batches"},{"question":"Diana is learning to code, and she\'s practicing string manipulation. She wants to write a function that takes a string and reverses the words in it. Write a program where Diana can input a sentence (string) and your function will return the words in the sentence reversed, but the order of characters in each word should remain the same. - If the input string is \\"Hello world\\", the program should return \\"world Hello\\". - If the input string is \\"The quick brown fox\\", the program should return \\"fox brown quick The\\". In the case of an empty input string, the program should return an empty string.","solution":"def reverse_words_in_sentence(sentence): Returns a sentence with the words reversed in order while keeping the characters in each word the same. If the input is an empty string, it returns an empty string. if not sentence: return \\"\\" words = sentence.split() reversed_sentence = \' \'.join(reversed(words)) return reversed_sentence"},{"question":"Write a function that takes a list of integers as input and returns a list of strings where each string represents the corresponding integer in binary format, prefixed with \'0b\'. For example: ``` [3, 7, 10, 16] --> [\\"0b11\\", \\"0b111\\", \\"0b1010\\", \\"0b10000\\"] ``` Input will always be a list of positive integers, so don\'t worry about type checking or negative/float values.","solution":"def int_to_binary_strings(int_list): This function takes a list of integers as input and returns a list of strings where each string represents the corresponding integer in binary format, prefixed with \'0b\'. return [bin(num) for num in int_list]"},{"question":"**Daily Temperatures** ================== You are given an array `temperatures` representing daily temperatures for a week. For each day in the week, your task is to find out how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, your answer should be 0 for that day. Your task: ---------- Write the function `dailyTemperatures()` that calculates and returns an array of integers where each integer corresponds to the number of days until a warmer temperature. - `temperatures` (array of integers) representing the daily temperatures for a week The function should return an array where each element represents the number of days you\'ll have to wait until a warmer temperature, or 0 if no such day exists. Example: ---------- ``` dailyTemperatures([73, 74, 75, 71, 69, 72, 76, 73]) ``` Output: ---------- ``` [1, 1, 4, 2, 1, 1, 0, 0] ``` The first day (73) needs 1 day to get a warmer temperature (74). The second day (74) also needs 1 day for a warmer temperature (75), and so on. If there is no warmer day ahead, the output for the corresponding day should be 0. >**Hint:** Consider using a stack to track which temperatures need to find the next warmer day.","solution":"def dailyTemperatures(temperatures): Returns the number of days until a warmer temperature for each day in the temperatures list. n = len(temperatures) answer = [0] * n stack = [] for current_day in range(n): while stack and temperatures[current_day] > temperatures[stack[-1]]: previous_day = stack.pop() answer[previous_day] = current_day - previous_day stack.append(current_day) return answer"},{"question":"A train station manager is tasked with forming the optimal train timetable to maximize the number of non-overlapping trains that can arrive at the station. Each train i has a start time Si and an end time Ei representing the arrival and departure times respectively. The manager must ensure that no two trains overlap in their schedules. Given the arrival and departure times of multiple trains, determine the maximum number of non-overlapping trains that can be accommodated at the station. ----- Input----- - The first line of input contains a single integer T, the number of test cases. - Each test case consists of multiple trains where the first line of each test case contains an integer N, the number of trains. - The following N lines each contain two integers Si and Ei, the arrival and departure times of each train respectively. ----- Output----- For each test case, output one line. For each line output the maximum number of non-overlapping trains that can be accommodated at the station. ----- Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^3 - 0 ≤ Si < Ei ≤ 10^6 ----- Example----- Input: 2 3 1 3 2 4 3 5 4 1 2 3 4 0 6 5 7 Output: 2 3 ----- Explanation----- Example case 1: - The optimal set of non-overlapping trains are the ones with times [(1, 3), (3, 5)] allowing 2 trains. Example case 2: - The optimal set of non-overlapping trains are the ones with times [(1, 2), (3, 4), (5, 7)] allowing 3 trains.","solution":"def max_non_overlapping_trains(test_cases): results = [] for trains in test_cases: # Sort trains by their departure times trains.sort(key=lambda x: x[1]) max_trains = 0 last_end_time = -1 for train in trains: if train[0] >= last_end_time: max_trains += 1 last_end_time = train[1] results.append(max_trains) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) trains = [] for i in range(N): Si, Ei = map(int, lines[index + 1 + i].split()) trains.append((Si, Ei)) test_cases.append(trains) index += N + 1 return test_cases"},{"question":"# Task You are given a list of strings where each string consists of digits (\'0\'-\'9\') and you have to group these strings in such a way that all strings in each group share the same frequency of each digit. For example, let\'s consider the following list: ```python [\\"1122\\", \\"2211\\", \\"1212\\", \\"2112\\", \\"1234\\", \\"4321\\", \\"1211\\"] ``` The grouping of these strings based on their digit frequency would be: ```python [[\\"1122\\", \\"2211\\", \\"1212\\", \\"2112\\"], [\\"1234\\", \\"4321\\"], [\\"1211\\"]] ``` # Note: - Strings \\"1122\\", \\"2211\\", \\"1212\\", \\"2112\\" all have 1 occurrence of \'1\', 1 occurrence of \'2\', 0 occurrences of \'3\', and so on. - Strings \\"1234\\" and \\"4321\\" all have 1 occurrence of each \'1\', \'2\', \'3\', and \'4\'. - String \\"1211\\" has 2 occurrences of \'1\', 1 occurrence of \'2\', 0 occurrences of \'3\', and so on. Write a function `group_strings` to perform this grouping. # Function Signature ```python def group_strings(strings: List[str]) -> List[List[str]]: ``` # Input - `strings` (List[str]): a list of strings where each string consists of digits and its length will be between 1 and 1000. # Output - (List[List[str]]): a list of lists where each sublist contains strings that have the same frequency of digits. # Example ```python group_strings([\\"1122\\", \\"2211\\", \\"1212\\", \\"2112\\", \\"1234\\", \\"4321\\", \\"1211\\"]) # Output: [[\\"1122\\", \\"2211\\", \\"1212\\", \\"2112\\"], [\\"1234\\", \\"4321\\"], [\\"1211\\"]] ``` # Constraints - The length of the list `strings` will be between 1 and 10000. - Each string length will be between 1 and 1000. - All characters in each string will be digits (\'0\'-\'9\'). # Notes: - The order of groups and the order of strings within each group does not matter. - This problem can be solved using hashing techniques for efficient grouping.","solution":"from collections import Counter, defaultdict from typing import List def group_strings(strings: List[str]) -> List[List[str]]: def get_frequency_key(s: str) -> tuple: count = Counter(s) key = tuple(count.get(str(i), 0) for i in range(10)) return key groups = defaultdict(list) for s in strings: freq_key = get_frequency_key(s) groups[freq_key].append(s) return list(groups.values())"},{"question":"Write a function named `longest_increasing_subsequence` or `longestIncreasingSubsequence` that takes a list of integers `arr` as its input parameter and returns an integer representing the length of the longest strictly increasing subsequence within `arr`. The subsequence does not need to be contiguous but should maintain the order of elements in `arr`. # Function Signature ```python def longest_increasing_subsequence(arr: List[int]) -> int: pass ``` # Constraints - All elements in `arr` are integers. - The length of `arr` will be between 1 and 10,000. - The values in `arr` are between -1,000,000 and 1,000,000. # Example ```python longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) # Output: 4 # Explanation: The longest increasing subsequence is [2, 3, 7, 101], therefore the function returns 4. longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) # Output: 4 # Explanation: The longest increasing subsequence is [0, 1, 2, 3], therefore the function returns 4. longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) # Output: 1 # Explanation: The longest increasing subsequence is any one of the elements, therefore the function returns 1. ``` # Notes 1. Consider dynamic programming and efficient algorithms to solve the task in a time complexity better than `O(n^2)`. 2. This function should handle large inputs efficiently. 3. If the given list is empty, return 0.","solution":"from typing import List def longest_increasing_subsequence(arr: List[int]) -> int: Returns the length of the longest strictly increasing subsequence. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"A robotic arm is tasked with sorting items on a conveyor belt by color. The conveyor belt is represented as a list of integers, where each integer corresponds to a specific color. The robotic arm has limited reach and can only swap elements that are next to each other. Your task is to design a function that sorts the conveyor belt in an optimal way, using the fewest number of adjacent swaps possible. You need to find the minimum number of adjacent swaps required to sort the conveyor belt. -----Input----- - The input consists of a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case is a single integer N representing the length of the conveyor belt. - The second line of each test case contains N integers representing the colors on the conveyor belt. -----Output----- - For each test case, print a single line containing the minimum number of adjacent swaps required to sort the conveyor belt in non-decreasing order. -----Constraints----- - 1 le T le 100 - 1 le N le 1000 - 1 le belt color values le 1000 -----Subtasks----- Subtask #1 (20 points): 1 le N le 10 Subtask #2 (30 points): 1 le N le 100 Subtask #3 (50 points): original constraints -----Example Input----- 2 3 3 1 2 4 4 3 2 1 -----Example Output----- 2 6","solution":"def count_inversions(arr): Helper function to count the number of inversions in the array using a modified merge sort. An inversion is when two elements are out of order. if len(arr) < 2: return arr, 0 mid = len(arr) // 2 left, left_inv = count_inversions(arr[:mid]) right, right_inv = count_inversions(arr[mid:]) merged, split_inv = merge_and_count(left, right) return merged, left_inv + right_inv + split_inv def merge_and_count(left, right): Merges two arrays and counts the split inversions i, j = 0, 0 merged = [] inversions = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 inversions += len(left) - i merged.extend(left[i:]) merged.extend(right[j:]) return merged, inversions def minimum_adjacent_swaps_to_sort_belts(T, test_cases): results = [] for i in range(T): N, conveyor_belt = test_cases[i] _, swaps = count_inversions(conveyor_belt) results.append(swaps) return results # Example usage: # T = 2 # test_cases = [(3, [3, 1, 2]), (4, [4, 3, 2, 1])] # print(minimum_adjacent_swaps_to_sort_belts(T, test_cases))"},{"question":"# Task You are given the mapping of digits to letters of a typical mobile phone keypad and a string containing digits. Write a function that will return all possible letter combinations that the number could represent. # Example For `digits = \\"23\\"`, the output should be `[\\"ad\\",\\"ae\\",\\"af\\",\\"bd\\",\\"be\\",\\"bf\\",\\"cd\\",\\"ce\\",\\"cf\\"]`. For `digits = \\"\\"`, the output should be `[]`. For `digits = \\"2\\"`, the output should be `[\\"a\\",\\"b\\",\\"c\\"]`. # Input/Output - `[input]` string `digits` A string containing digits from 2-9 inclusive. - `[output]` array of strings An array of all possible letter combinations that the number could represent, in lexicographical order. If the input is an empty string, return an empty array. # Notes - The mapping of digits to letters is as follows: - 2: \\"abc\\" - 3: \\"def\\" - 4: \\"ghi\\" - 5: \\"jkl\\" - 6: \\"mno\\" - 7: \\"pqrs\\" - 8: \\"tuv\\" - 9: \\"wxyz\\"","solution":"def letter_combinations(digits): if not digits: return [] phone_map = { \'2\': \\"abc\\", \'3\': \\"def\\", \'4\': \\"ghi\\", \'5\': \\"jkl\\", \'6\': \\"mno\\", \'7\': \\"pqrs\\", \'8\': \\"tuv\\", \'9\': \\"wxyz\\" } result = [\\"\\"] for digit in digits: current_combinations = [] for combination in result: for letter in phone_map[digit]: current_combinations.append(combination + letter) result = current_combinations return result"},{"question":"Given an array of integers, return the indices of the two numbers that add up to a specific target. Assume that each input would have exactly one solution, and you may not use the same element twice. *Parameters*: `nums` array of integers, `target` integer. *Example input*: ``` nums = [2, 7, 11, 15] target = 9 ``` *Output*: ``` [0, 1] ``` Explanation: The numbers at indices 0 and 1 (2 + 7) add up to the target value 9. # Constraints: * Each input will have exactly one solution. * You may not use the same element twice. * The returned indices must be in non-decreasing order. # Notes: * Utilize optimal approach to solve the problem in linear time. # Examples: ``` nums = [3, 2, 4] target = 6 // return [1, 2] - because 2 + 4 = 6 nums = [3, 3] target = 6 // return [0, 1] - because 3 + 3 = 6 ```","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the array that add up to the target. Parameters: nums (List[int]): Array of integers. target (int): Target sum. Returns: List[int]: List containing the indices of the two numbers that add up to the target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index"},{"question":"You are given two singly linked lists of non-negative integers. Your task is to merge the two lists into a single linked list and sort the final list in ascending order. Each node in the linked list contains a single integer and a reference (or pointer) to the next node. Here\'s a class definition for a singly linked list node: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` Write a function `mergeAndSortLists` that takes two linked lists as input and returns a single sorted linked list. Function signature: ```python def mergeAndSortLists(l1: ListNode, l2: ListNode) -> ListNode: ``` Example: ```python # Example input l1: 1 -> 3 -> 5 l2: 2 -> 4 -> 6 # Example output 1 -> 2 -> 3 -> 4 -> 5 -> 6 ``` Note: - Both `l1` and `l2` can be of any length, and each may contain duplicate values. - You should not create additional nodes but should rearrange the existing nodes to obtain the final sorted list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeAndSortLists(l1: ListNode, l2: ListNode) -> ListNode: def mergeTwoSortedLists(l1: ListNode, l2: ListNode) -> ListNode: dummy = ListNode(-1) current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next current.next = l1 if l1 else l2 return dummy.next return mergeTwoSortedLists(l1, l2)"},{"question":"Write a function `encode_string(s)` that takes a string `s` made up of lowercase alphabets and returns an encoded string following these rules: 1. Each character in the string should be replaced with its 1-based alphabet position (e.g., \'a\' -> 1, \'b\' -> 2, ..., \'z\' -> 26). 2. Separate each numeric value with a hyphen (`-`). For example: ```python encode_string(\\"abc\\") -> \\"1-2-3\\" encode_string(\\"hello\\") -> \\"8-5-12-12-15\\" encode_string(\\"xyz\\") -> \\"24-25-26\\" encode_string(\\"a\\") -> \\"1\\" encode_string(\\"\\") -> \\"\\" ``` Your task is to implement the function `encode_string(s)` that solves the problem as described above.","solution":"def encode_string(s): Encodes a string replacing each character with its 1-based alphabet position. Each numeric value is separated by a hyphen. return \\"-\\".join(str(ord(char) - ord(\'a\') + 1) for char in s)"},{"question":"You are given a sequence of integers. You need to determine the length of the longest subsequence, such that the absolute difference between any two elements is at most a given integer k. -----Input----- The first line contains an integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains two integers n and k (1 le n le 10^5, 0 le k le 10^9) — the length of the sequence, and the maximum allowed absolute difference respectively. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), which represent the sequence. The sum of n over all the test cases does not exceed 10^5. -----Output----- For each test case, print one integer — the length of the longest subsequence satisfying the given condition. -----Example----- Input 2 5 3 1 5 3 2 4 6 0 10 10 10 10 10 10 Output 5 6","solution":"def longest_subsequence_within_diff_k(t, test_cases): results = [] for n, k, arr in test_cases: arr.sort() longest = 1 current_length = 1 for i in range(1, n): if arr[i] - arr[i-1] <= k: current_length += 1 else: current_length = 1 longest = max(longest, current_length) results.append(longest) return results"},{"question":"Write a function that takes a list of integers and returns the product of the largest pair of integers in the list. If the list has fewer than two integers, return None. # Examples: ```python Input: [3, 5, 1, 7, 9] Output: 63 Explanation: The largest pair is (7, 9). Their product is 7 * 9 = 63. Input: [1] Output: None Explanation: The list has only one integer. Input: [12, 4, 6] Output: 72 Explanation: The largest pair is (12, 6). Their product is 12 * 6 = 72. ``` # Constraints: 1. The input list will contain integer values. 2. The list length will be at most 10^6. 3. The integers in the list can be positive, negative, or zero.","solution":"def max_pair_product(nums): Returns the product of the largest pair of integers in the list. If the list has fewer than two integers, return None. if len(nums) < 2: return None # Sorting the list in descending order to find the two largest numbers nums.sort(reverse=True) return nums[0] * nums[1]"},{"question":"Write a function that takes a list of integers and returns the maximum product of any three numbers from the list. Your function should be efficient in terms of both time and space complexity. # Example `[-10, -10, 5, 2]` -> 500 `[1, 10, 2, 6, 5, 3]` -> 300 Hint Consider the potential combinations of negative and positive integers. An optimized solution may leverage sorting or a single-pass approach with appropriate use of built-in functions.","solution":"def maximum_product_of_three(nums): Returns the maximum product of any three numbers from the list. if len(nums) < 3: raise ValueError(\\"The input list must have at least three numbers.\\") nums.sort() # The maximum product of three numbers could be either # the product of the three largest numbers, # or the product of the two smallest numbers (both could be negative) and the largest number. return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"You are given an array consisting of both positive and negative integers. You need to calculate the maximum possible sum of any contiguous subarray of the given array. Note that the subarray must contain at least one element. ----- Input ----- - The first line of the input contains a single integer T denoting the number of test cases. - The first line of each test case contains a single integer N, the length of the array. - The second line of each test case contains N space-separated integers A_1, A_2, ldots, A_N denoting the elements of the array. ----- Output ----- For each test case, print a single line containing the maximum possible sum of any contiguous subarray. ----- Constraints ----- - 1 le T le 100 - 1 le N le 1000 - -10^4 le A_i le 10^4 for each valid i ----- Subtasks ----- Subtask #1 (100 points): original constraints ----- Example Input ----- 2 5 1 -2 3 4 -5 4 -3 -1 -2 -5 ----- Example Output ----- 7 -1 ----- Explanation ----- Example case 1: The maximum sum subarray is [3, 4], which gives the sum 7. Example case 2: The maximum sum subarray is [-1], which gives the sum -1.","solution":"def max_subarray_sum(arr): Function to find the maximum sum of any contiguous subarray. max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far def solve(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) results = [] index = 1 for _ in range(T): N = int(lines[index]) array = list(map(int, lines[index + 1].split())) results.append(max_subarray_sum(array)) index += 2 return \\"n\\".join(map(str, results))"},{"question":"Write a function that takes a list of tuples, where each tuple represents a product with the first element as the product name and the second element as the product price. The function should return the name of the most expensive product. If the list is empty, return `None`. For example, given the input `[(\'apple\', 50), (\'banana\', 30), (\'orange\', 75)]`, the function should return `\'orange\'`.","solution":"def most_expensive_product(products): Returns the name of the most expensive product. Parameters: - products: list of tuples, where each tuple consists of (product_name, product_price) If the list is empty, return None. if not products: return None return max(products, key=lambda x: x[1])[0]"},{"question":"=====Function Descriptions===== reshape The reshape function in NumPy is used to give a new shape to an array without changing its data. It is useful for changing the dimension of an array, such as from 1D to 2D. import numpy arr = numpy.array([1, 2, 3, 4, 5, 6]) print(numpy.reshape(arr, (2, 3))) #Output [[1 2 3] [4 5 6]] flatten The flatten function returns a copy of the array collapsed into one dimension. It\'s useful when you want to work with a 1D representation of your multi-dimensional array data. import numpy arr = numpy.array([[1, 2, 3], [4, 5, 6]]) print(arr.flatten()) #Output [1 2 3 4 5 6] =====Problem Statement===== Given a 2D matrix, your task is to first flatten the matrix into a 1D array using the flatten function and then reshape this 1D array back into a matrix with dimensions specified by the user. =====Input Format===== Two lines of input: The first line contains the space-separated values of the initial matrix in row-major order. The second line contains the space-separated values of R and C, where R is the number of rows and C is the number of columns for the reshaped matrix. =====Output Format===== Print the reshaped matrix with R rows and C columns. =====Constraints===== - The total number of elements in the initial matrix will be equal to R * C. - All elements input as integers. =====Sample Input===== 1 2 3 4 5 6 7 8 9 3 3 =====Sample Output===== [[1 2 3] [4 5 6] [7 8 9]] =====Explanation===== The initial input represents a 3x3 matrix which is first flattened into a 1D array [1, 2, 3, 4, 5, 6, 7, 8, 9]. Then, based on the user input, it is reshaped back into a 3x3 matrix and displayed.","solution":"import numpy as np def reshape_matrix(initial_values, R, C): This function first flattens a 2D matrix into a 1D array and then reshapes it into a matrix of dimensions RxC. Parameters: initial_values (list): List of integers in row-major order representing the initial matrix. R (int): Number of rows for the reshaped matrix. C (int): Number of columns for the reshaped matrix. Returns: numpy.ndarray: Reshaped matrix with dimensions R x C. initial_array = np.array(initial_values) reshaped_matrix = np.reshape(initial_array, (R, C)) return reshaped_matrix"},{"question":"You are tasked with identifying the distance between all pairs of cities in a given dataset. The input provides a list of cities and the direct distances between some pairs of these cities. Your job is to compute the shortest distance between every pair of cities using the given direct distances. Define the cities as nodes in a graph and the given direct distances as the weights of the edges between those nodes. You are required to compute the shortest paths between all pairs of nodes using the Floyd-Warshall algorithm. -----Input Format:----- - The first line of input contains two integers, N and M, where N is the number of cities and M is the number of direct distances provided. - The next M lines each contain three values: two integers u and v (indicating a direct distance between cities u and v), and a positive integer d which represents the distance between cities u and v. -----Output Format:----- - Output a matrix of size N times N, where the j^{th} number in the i^{th} row represents the shortest distance from city i to city j. - If there is no path between city i and city j, represent that distance with the string \'INF\'. -----Constraints:----- - 2 leq N leq 100 - 0 leq M leq N times (N - 1) / 2 - 1 leq d leq 10^3 - The cities are labeled from 0 to N-1. -----Sample Input:----- 4 4 0 1 3 1 2 1 2 3 7 0 3 8 -----Sample Output:----- 0 3 4 8 INF 0 1 8 INF INF 0 7 INF INF INF 0 Note: - In the output matrix, the diagonal elements will always be 0, as the distance from a city to itself is zero. - The output is symmetric if the input graph is undirected, but the sample provided assumes directed edges. Ensure to handle the `INF` cases correctly to indicate no paths where necessary.","solution":"def floyd_warshall(n, edges): # Initialize distance matrix with \\"INF\\" except for 0s on the diagonal dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 # Add the direct distances to the matrix for u, v, d in edges: dist[u][v] = d # Floyd Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Formatting the output matrix result = [] for i in range(n): row = [] for j in range(n): if dist[i][j] == float(\'inf\'): row.append(\'INF\') else: row.append(dist[i][j]) result.append(row) return result"},{"question":"Write a function `stringMathExp(var num1, var op, var num2)` that takes two numbers (either integer or float) and a math operation as a string input (one of the following: \\"+\\", \\"-\\", \\"*\\", \\"/\\"). This function should return the resulting calculation. Ensure your function handles the following edge cases: 1. Division by zero (in this case, it should return `\\"undefined\\"`). 2. Invalid mathematical operator (should return `\\"error\\"`). 3. Floating point errors within 1e-9 tolerance. Examples: ``` stringMathExp(10, \\"+\\", 5) should return 15 stringMathExp(10, \\"-\\", 3) should return 7 stringMathExp(10, \\"*\\", 5) should return 50 stringMathExp(10, \\"/\\", 2) should return 5 stringMathExp(10, \\"/\\", 0) should return \\"undefined\\" stringMathExp(10, \\"^\\", 5) should return \\"error\\" ```","solution":"def stringMathExp(num1, op, num2): Performs a mathematical operation on two numbers based on the provided operator. if op == \\"+\\": return num1 + num2 elif op == \\"-\\": return num1 - num2 elif op == \\"*\\": return num1 * num2 elif op == \\"/\\": if num2 == 0: return \\"undefined\\" else: return num1 / num2 else: return \\"error\\""},{"question":"Write a function that determines whether a string is an isogram. An isogram is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times. ```Python For example: is_isogram(\\"lumberjack\\") = True, because no letter repeats. is_isogram(\\"hello\\") = False, because \'l\' appears more than once. is_isogram(\\"isogram\\") = True, because no letter repeats. is_isogram(\\"six-year-old\\") = True, because none of the letters repeat, ignoring spaces and hyphens. is_isogram(\\"eleven\\") = False, because \'e\' appears more than once. ``` The function should treat uppercase and lowercase letters as the same. All inputs will be valid strings. Good luck!","solution":"def is_isogram(s): Determines if a given string is an isogram. An isogram is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times. Parameters: s (str): The string to be checked. Returns: bool: True if the string is an isogram, False otherwise. s = s.lower() seen = set() for char in s: if char.isalpha(): if char in seen: return False seen.add(char) return True"},{"question":"**Word Frequency Counter** Write a function, `wordFrequencyCounter` that takes a string text as an argument and returns a dictionary with the frequency count of each word in the text. Words should be compared case-insensitively, meaning \\"This\\" and \\"this\\" should be counted as the same word. The words in the output dictionary should all be in lowercase. Punctuation should be disregarded, such that \\"hello\\" and \\"hello!\\" are considered the same word. If the input is an empty string, return an empty dictionary. **Notes:** - The words in the dictionary should be ordered alphabetically. - Input will always be a string. **Example:** ```python wordFrequencyCounter(\\"Hello, hello world! This is a test. This is only a test.\\") ``` should return: ```python { \\"a\\": 2, \\"hello\\": 2, \\"is\\": 2, \\"only\\": 1, \\"test\\": 2, \\"this\\": 2, \\"world\\": 1 } ```","solution":"import re from collections import defaultdict def wordFrequencyCounter(text): Returns the frequency count of each word in the given text. Words are counted case-insensitively and punctuation is disregarded. Args: text (str): The input text string. Returns: dict: A dictionary with words as keys and their frequency counts as values. # Remove punctuation using regular expressions and split the text into words words = re.findall(r\'bw+b\', text.lower()) frequency = defaultdict(int) for word in words: frequency[word] += 1 # Convert the defaultdict to a regular dictionary and sort it alphabetically return dict(sorted(frequency.items()))"},{"question":"Write a function that takes as input an integer and returns the number of steps required to reduce it to zero by continually removing squares of the largest possible integer. For example: ```python reduce_to_zero(12) should return 3 Explanation: Step 1: 12 - 3^2 = 3 Step 2: 3 - 1^2 = 2 Step 3: 2 - 1^2 = 1 Step 4: 1 - 1^2 = 0 reduce_to_zero(18) should return 2 Explanation: Step 1: 18 - 4^2 = 2 Step 2: 2 - 1^2 = 1 Step 3: 1 - 1^2 = 0 (which means 3 steps) ``` **Constraints:** - The input integer will always be a positive integer greater than 0. - You may assume that the result will fit in a standard integer data type without overflow. You are required to implement the following function: ```python def reduce_to_zero(n: int) -> int: # Your code here ``` **Function Signature:** ```python def reduce_to_zero(n: int) -> int: # Your code here pass ``` You can use the function signature provided and define your solution logic inside the function.","solution":"import math def reduce_to_zero(n: int) -> int: steps = 0 while n > 0: largest_square = int(math.sqrt(n)) ** 2 n -= largest_square steps += 1 return steps"},{"question":"Create a function which receives an array of numbers and a target number as arguments. The function should return `true` if there are two distinct numbers in the array that sum up to the target number, and `false` otherwise. You should aim for a solution with a time complexity less than O(n^2). Example: ``` hasPairWithSum([1, 2, 3, 9], 8) --> false hasPairWithSum([1, 2, 4, 4], 8) --> true ``` Notes * The function should handle empty arrays, and return `false` if no valid pair is found. * All inputs will be valid numbers.","solution":"def hasPairWithSum(arr, target): Returns True if there are two distinct numbers in the array that sum up to the target, False otherwise. Time complexity: O(n) seen_numbers = set() for number in arr: needed_value = target - number if needed_value in seen_numbers: return True seen_numbers.add(number) return False"},{"question":"# Task You are given a 2D matrix of dimension `n x m` and an integer `k`. Your task is to find the maximum sum of a non-empty submatrix such that it does not exceed `k`. A submatrix is a contiguous part of the original matrix, which can be obtained by deleting any number of rows and/or columns from the front and/or back of the matrix. # Example For `matrix = [[1, 0, 1], [0, -2, 3]]` and `k = 2`, the output should be `2`. The submatrix that gives this sum is either: ``` [1, 0] [0, -2] ``` or ``` [1, 0, 1] ``` For `matrix = [[2, 2, -1]]` and `k = 3`, the output should be `3`. The submatrix that gives this sum is: ``` [2, 2, -1] ``` # Input/Output - `[input]` 2D integer array `matrix` A 2D matrix of integers. Constraints: `1 ≤ n, m ≤ 100`, `-100 ≤ matrix[i][j] ≤ 100`. - `[input]` integer `k` Constraints: `1 ≤ k ≤ 1,000,000`. - `[output]` an integer The maximum sum of a non-empty submatrix such that it does not exceed `k`.","solution":"def max_sum_submatrix(matrix, k): import bisect from itertools import accumulate def max_sum_no_larger_than_k(nums, k): max_sum = float(\'-inf\') curr_sum = 0 prefix_sums = [0] for num in nums: curr_sum += num idx = bisect.bisect_left(prefix_sums, curr_sum - k) if idx < len(prefix_sums): max_sum = max(max_sum, curr_sum - prefix_sums[idx]) bisect.insort(prefix_sums, curr_sum) return max_sum max_sum = float(\'-inf\') rows, cols = len(matrix), len(matrix[0]) for left in range(cols): row_sums = [0] * rows for right in range(left, cols): for r in range(rows): row_sums[r] += matrix[r][right] max_sum = max(max_sum, max_sum_no_larger_than_k(row_sums, k)) if max_sum == k: return max_sum return max_sum"},{"question":"There is a park with n trees numbered from 1 to n. Each tree bears a certain number of fruits. Every day, visitors come to the park and are allowed to pick fruits from a certain tree. However, they cannot pick more than a predefined maximum number of fruits per day. Your task is to determine how many fruits each visitor can pick from the park based on the given constraints. Input: The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and F, denoting the number of trees and the maximum number of fruits a visitor can pick per day. The next line contains N space-separated integers a[i], where a[i] denotes the initial number of fruits on the ith tree. The next line contains an integer M denoting the number of visitors. The next M lines contain one integer t[i], denoting from which tree the ith visitor wants to pick fruits. Output: For each visitor, output how many fruits they were able to pick from the desired tree. Constraints: 1<=t<=10 1<=n,m<=1000 1<=a[i], f<=1000 1<=t[i]<=n Example: Input: 1 5 10 30 20 15 10 25 3 1 2 5 Output: 10 10 10 Explanation: For visitor 1, the initial number of fruits on tree 1 is 30. As the maximum number of fruits that can be picked per day is 10, the visitor picks 10 fruits, leaving 20 fruits on tree 1. For visitor 2, the initial number of fruits on tree 2 is 20. The visitor picks 10 fruits, leaving 10 fruits on tree 2. For visitor 3, the initial number of fruits on tree 5 is 25. The visitor picks 10 fruits, leaving 15 fruits on tree 5.","solution":"def fruits_for_visitors(T, cases): Determines how many fruits each visitor can pick from the park based on given constraints. Args: T (int): Number of test cases. cases (list): A list containing information for each test case. Returns: list: A list of lists, where each inner list contains the number of fruits picked by each visitor. results = [] for case in cases: N, F = case[0] fruits = case[1] M = case[2] visitors = case[3] case_result = [] for visitor in visitors: tree_index = visitor - 1 # converting to 0-based index pickable_fruits = min(fruits[tree_index], F) case_result.append(pickable_fruits) fruits[tree_index] -= pickable_fruits results.append(case_result) return results"},{"question":"Write a function that takes a list of integers and an integer k, then returns the k-th permutation sequence (1-indexed) of the list. The list will contain unique integers from 1 to n, and n can be no greater than 10. For example: ```python find_kth_permutation([1, 2, 3], 3) ``` Output: ``` [2, 1, 3] ```","solution":"import math def find_kth_permutation(nums, k): Returns the k-th permutation sequence (1-indexed) of the list nums. n = len(nums) k -= 1 # Change to 0-indexed factorial = math.factorial(n) permutation = [] for i in range(n, 0, -1): factorial //= i idx = k // factorial permutation.append(nums[idx]) nums.pop(idx) k %= factorial return permutation"},{"question":"# Alien Vocabulary An alien language uses English alphabets. However, the order among letters is unknown to you. You get a sorted dictionary of this alien language. Write a program that returns an order among the characters in the alien vocabulary. --- * For simplicity, you may assume all letters are lowercase. * If the order is invalid or cannot be determined, return an empty string. * If multiple valid orders are possible, any of them is acceptable. --- Example Given the following list of words: ``` [ \\"wrt\\", \\"wrf\\", \\"er\\", \\"ett\\", \\"rftt\\" ] ``` The program should return: ``` wertf ``` --- Notes - Words are sorted lexicographically by the rules of this alien language. - Input is guaranteed to be a non-empty list of non-empty words.","solution":"from collections import defaultdict, deque def alien_order(words): Given a list of words sorted lexicographically according to an unknown alphabet order, return a possible order of characters in the alien language. def build_graph(words): graph = defaultdict(set) indegree = defaultdict(int) # Initialize the graph with all unique characters for word in words: for char in word: indegree[char] = 0 # Create edges between characters based on the given order in words for i in range(len(words) - 1): first_word = words[i] second_word = words[i + 1] min_length = min(len(first_word), len(second_word)) for j in range(min_length): if first_word[j] != second_word[j]: if second_word[j] not in graph[first_word[j]]: graph[first_word[j]].add(second_word[j]) indegree[second_word[j]] += 1 break else: # Check for a prefix condition; if so, the order is invalid if len(first_word) > len(second_word): return {}, {} return graph, indegree def topological_sort(graph, indegree): # Topological sorting using Kahn\'s algorithm zero_indegree_queue = deque([char for char in indegree if indegree[char] == 0]) order = [] while zero_indegree_queue: current = zero_indegree_queue.popleft() order.append(current) for neighbor in graph[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: zero_indegree_queue.append(neighbor) if len(order) == len(indegree): return \'\'.join(order) else: return \\"\\" graph, indegree = build_graph(words) if not graph and not indegree: return \\"\\" return topological_sort(graph, indegree)"},{"question":"You need to develop a warehouse management system. This system needs to efficiently handle operations related to storing, retrieving, and querying the status of items in a warehouse. You must implement the following methods: ```python class Warehouse: def __init__(self): pass def store_item(self, item, quantity, location): pass def retrieve_item(self, item, quantity): pass def get_item_quantity(self, item): pass def get_location_items(self, location): pass ``` 1. `store_item(self, item, quantity, location)`: Adds the specified quantity of the item to the given location. If the same item already exists in that location, it should update the quantity accordingly, adding to the existing quantity. 2. `retrieve_item(self, item, quantity)`: Removes the specified quantity of the item from its stored location(s). If multiple locations store this item, consider the locations in the order they were added and retrieve from those with available quantities. If an insufficient quantity of the item exists, it should remove as much as possible and return the actual quantity retrieved. 3. `get_item_quantity(self, item)`: Returns the total quantity of the specified item across all locations in the warehouse. 4. `get_location_items(self, location)`: Returns a dictionary where keys are item names and values are the quantities of those items stored at the given location. **Example Scenario:** ```python warehouse = Warehouse() warehouse.store_item(\\"Apples\\", 100, \\"A1\\") warehouse.store_item(\\"Oranges\\", 50, \\"B1\\") warehouse.store_item(\\"Apples\\", 50, \\"A1\\") warehouse.store_item(\\"Apples\\", 200, \\"C1\\") total_apples = warehouse.get_item_quantity(\\"Apples\\") # total_apples should be 350 location_a1_items = warehouse.get_location_items(\\"A1\\") # location_a1_items should be {\\"Apples\\": 150} retrieved_oranges = warehouse.retrieve_item(\\"Oranges\\", 30) # retrieved_oranges should be 30 remaining_oranges = warehouse.get_item_quantity(\\"Oranges\\") # remaining_oranges should be 20 retrieved_apples = warehouse.retrieve_item(\\"Apples\\", 400) # retrieved_apples should be 350 (only 350 were available for retrieval) ``` **Constraints:** - You can assume all item names and locations are strings. - The warehouse can contain unlimited types of items and locations. - You may assume item quantities are non-negative integers.","solution":"class Warehouse: def __init__(self): self.items = {} # Dictionary to store item information def store_item(self, item, quantity, location): if item not in self.items: self.items[item] = [] # Check if location already contains the item found = False for loc in self.items[item]: if loc[\'location\'] == location: loc[\'quantity\'] += quantity found = True break if not found: self.items[item].append({ \'location\': location, \'quantity\': quantity }) def retrieve_item(self, item, quantity): if item not in self.items: return 0 # Item not in warehouse total_retrieved = 0 locations_to_remove = [] for loc in sorted(self.items[item], key=lambda x: x[\'location\']): # Retrieve in location order if loc[\'quantity\'] >= quantity: loc[\'quantity\'] -= quantity total_retrieved += quantity quantity = 0 # If location quantity is zero, mark it for removal if loc[\'quantity\'] == 0: locations_to_remove.append(loc) break else: quantity -= loc[\'quantity\'] total_retrieved += loc[\'quantity\'] locations_to_remove.append(loc) for loc in locations_to_remove: self.items[item].remove(loc) return total_retrieved def get_item_quantity(self, item): if item not in self.items: return 0 # Item not in warehouse total_quantity = 0 for loc in self.items[item]: total_quantity += loc[\'quantity\'] return total_quantity def get_location_items(self, location): items_in_location = {} for item in self.items: for loc in self.items[item]: if loc[\'location\'] == location: items_in_location[item] = loc[\'quantity\'] break return items_in_location"},{"question":"A company wants to analyze the internet usage patterns of its employees. You are provided with the duration of time (in minutes) each employee spends on different websites in a day. Your task is to help the company identify patterns and calculate the desired metrics. # Metrics to Calculate: 1. **Total Time**: Calculate the total time spent by all employees on all websites in a day. 2. **Time on Specific Site**: Calculate the total time spent by all employees on a specific website in a day. 3. **Average Time per Employee**: Calculate the average time each employee spends on all websites in a day. 4. **Longest Time on a Site by an Employee**: Identify which employee spends the most time on a single site and the corresponding duration. # Input Format: - The first line contains an integer `E` (1 ≤ E ≤ 1000) representing the number of employees. - The next `E` lines contain the details for each employee: - The first integer in each line is an identifier `ID` (1 ≤ `ID` ≤ 1000) for the employee. - The second integer is `S` (1 ≤ S ≤ 100) representing the number of websites the employee visited. - The next `S` pairs of entries contain a string `website` (a unique identifier for the website) and an integer `time` (1 ≤ `time` ≤ 1000) representing the time spent on that website. # Output Format: - Print the total time spent on all websites by all employees in a day. - Print the total time spent on the specific website \\"example.com\\". - Print the average time spent by each employee on all websites in a day, formatted to two decimal places. - Print the identifier of the employee who spends the most time on a single site and the corresponding duration. # Sample Input: ``` 3 1 2 google.com 120 facebook.com 150 2 3 google.com 80 linkedin.com 200 facebook.com 60 3 1 example.com 300 ``` # Sample Output: ``` 910 300 303.33 3 300 ``` # Explanation: - **Total Time**: 120 + 150 + 80 + 200 + 60 + 300 = 910 - **Time on example.com**: Only employee 3 visited example.com for 300 minutes. - **Average Time per Employee**: 910 total time divided by 3 employees = 303.33 minutes. - **Longest Time on a Site by an Employee**: Employee 3 spent 300 minutes on example.com, which is the longest single visit.","solution":"def calculate_metrics(data): total_time = 0 specific_site_time = 0 time_on_sites_per_employee = {} longest_time_single_site = (None, 0) specific_site = \\"example.com\\" for entry in data: employee_id = entry[\'ID\'] websites_data = entry[\'websites\'] total_employee_time = 0 for website, time in websites_data: total_employee_time += time if website == specific_site: specific_site_time += time if time > longest_time_single_site[1]: longest_time_single_site = (employee_id, time) total_time += total_employee_time time_on_sites_per_employee[employee_id] = total_employee_time average_time_per_employee = total_time / len(data) return { \\"total_time\\": total_time, \\"time_on_specific_site\\": specific_site_time, \\"average_time_per_employee\\": round(average_time_per_employee, 2), \\"longest_time_single_site\\": longest_time_single_site } # Sample input data in the required format data = [ {\\"ID\\": 1, \\"websites\\": [(\\"google.com\\", 120), (\\"facebook.com\\", 150)]}, {\\"ID\\": 2, \\"websites\\": [(\\"google.com\\", 80), (\\"linkedin.com\\", 200), (\\"facebook.com\\", 60)]}, {\\"ID\\": 3, \\"websites\\": [(\\"example.com\\", 300)]} ] # Sample Output result = calculate_metrics(data) print(result[\\"total_time\\"]) print(result[\\"time_on_specific_site\\"]) print(result[\\"average_time_per_employee\\"]) print(result[\\"longest_time_single_site\\"][0], result[\\"longest_time_single_site\\"][1])"},{"question":"You have been hired to help a delivery company optimize its delivery routes. The company has a grid-like city with N times N intersections, and you need to find the shortest path from the top-left corner (0,0) to the bottom-right corner (N-1,N-1). Each intersection has a certain delivery time associated with it, which indicates how long it takes to traverse that intersection. You have the following information: - Each intersection can only be traversed once. - You can only move to the right or down from any intersection. Write an algorithm to help the company determine the shortest delivery time to go from the top-left corner to the bottom-right corner. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N. - The next N lines each contain N space-separated integers denoting the delivery times for each intersection in the grid. -----Output----- For each test case, print a single line containing one integer — the shortest delivery time to go from the top-left corner to the bottom-right corner. -----Constraints----- - 1 leq T leq 10^4 - 2 leq N leq 100 - 1 leq text{Delivery Time at each intersection} leq 1000 -----Sample Input----- 1 3 1 3 1 1 5 1 4 2 1 -----Sample Output----- 7 -----Explanation----- The optimal path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) with the delivery times 1+3+1+1+1=7.","solution":"def shortest_delivery_time(t, test_cases): def min_path_sum(grid): N = len(grid) dp = [[0]*N for _ in range(N)] dp[0][0] = grid[0][0] # start point # Initialize first row for i in range(1, N): dp[0][i] = dp[0][i-1] + grid[0][i] # Initialize first column for j in range(1, N): dp[j][0] = dp[j-1][0] + grid[j][0] # Fill the rest of the dp table for i in range(1, N): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][N-1] results = [] for test_case in test_cases: results.append(min_path_sum(test_case)) return results def format_and_solve(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 grid = [] for i in range(N): row = list(map(int, input_lines[index].split())) index += 1 grid.append(row) test_cases.append(grid) return shortest_delivery_time(T, test_cases)"},{"question":"Given two strings A and B, your task is to determine if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once. Example 1: Input: A = \\"listen\\", B = \\"silent\\" Output: true Explanation: Both \\"listen\\" and \\"silent\\" contain the same characters \\"l\\", \\"i\\", \\"s\\", \\"t\\", \\"e\\", \\"n\\" in any order. Example 2: Input: A = \\"triangle\\", B = \\"integral\\" Output: true Explanation: Both \\"triangle\\" and \\"integral\\" contain the same characters \\"t\\", \\"r\\", \\"i\\", \\"a\\", \\"n\\", \\"g\\", \\"l\\", \\"e\\" in any order. Example 3: Input: A = \\"apple\\", B = \\"pale\\" Output: false Explanation: \\"apple\\" contains extra characters that are not in \\"pale\\". Example 4: Input: A = \\"rat\\", B = \\"car\\" Output: false Explanation: The characters do not match between \\"rat\\" and \\"car\\". Note: 1 <= A.length <= 100 1 <= B.length <= 100 A and B only contain lowercase letters.","solution":"def are_anagrams(A, B): Determines if two strings are anagrams of each other. Args: A (str): The first string. B (str): The second string. Returns: bool: True if A and B are anagrams, False otherwise. return sorted(A) == sorted(B)"},{"question":"Write a function that takes an array of integers and returns a new array with each value doubled. The input array will never be empty, and all integers can be positive or negative. Do not use array methods like `map` or `forEach`.","solution":"def double_array(arr): Returns a new array with each value doubled. return [x * 2 for x in arr]"},{"question":"**Question: Implement a function that counts the occurrence of unique words in a given string and returns a list of tuples where each tuple contains a word and its count. Words should be considered case-insensitive. Assume words are separated by spaces and/or punctuation. Ignore numeric strings and special characters when counting. The list should be sorted by words in ascending order.** **Function Signature:** ```python def count_words(input_string: str) -> List[Tuple[str, int]]: # Your code here ``` **Examples:** ```python # Example 1 input_string = \\"Hello, world! This is a test. This test is easy.\\" output = count_words(input_string) # Output: [(\'a\', 1), (\'easy\', 1), (\'hello\', 1), (\'is\', 2), (\'test\', 2), (\'this\', 2), (\'world\', 1)] # Example 2 input_string = \\"Chat GPT can write code, and write it well.\\" output = count_words(input_string) # Output: [(\'and\', 1), (\'can\', 1), (\'chat\', 1), (\'code\', 1), (\'gpt\', 1), (\'it\', 1), (\'well\', 1), (\'write\', 2)] # Example 3 input_string = \\"Numbers like 123, 456, and 789 should be ignored in the count.\\" output = count_words(input_string) # Output: [(\'and\', 1), (\'be\', 1), (\'count\', 1), (\'ignored\', 1), (\'in\', 1), (\'like\', 1), (\'numbers\', 1), (\'should\', 1), (\'the\', 1)] ``` **Notes:** - Words should be considered case-insensitive (\'Hello\' and \'hello\' are the same word). - Ignore any numeric strings and special characters (e.g., punctuation marks) when counting words. - Ensure the function returns the list sorted by the words in ascending order.","solution":"import re from typing import List, Tuple def count_words(input_string: str) -> List[Tuple[str, int]]: Counts the occurrence of unique words in a given string and returns a list of tuples where each tuple contains a word and its count. Words are considered case-insensitive. Numeric strings and special characters are ignored in counting. The list is sorted by words in ascending order. # Convert the string to lowercase input_string = input_string.lower() # Remove all special characters except for alphanumerics and spaces words = re.findall(r\'b[a-z]+b\', input_string) # Count words word_count = {} for word in words: if word.isalpha(): word_count[word] = word_count.get(word, 0) + 1 # Convert the dictionary to a sorted list of tuples sorted_word_counts = sorted(word_count.items()) return sorted_word_counts"},{"question":"In many texts, we are often required to count the occurrences of each word within a given paragraph or document. This is known as \\"word frequency count\\". Implement a function `word_frequency(text)` that takes a string input `text` and returns a dictionary with each unique word as the key and its frequency of occurrence as the value. Words should be considered case-insensitively, meaning \\"Apple\\" and \\"apple\\" should be counted as the same word. Additionally, the function should exclude common punctuation marks such as periods, commas, exclamation points, and question marks while counting. # Example: ```python text = \\"Hello, how are you? Are you doing well? I\'m doing well, thank you!\\" output = word_frequency(text) print(output) # Output: {\'hello\': 1, \'how\': 1, \'are\': 2, \'you\': 2, \'doing\': 2, \'well\': 2, \'im\': 1, \'thank\': 1} ``` # Notes: - Ignore case sensitivity: \\"the\\" and \\"The\\" should be counted as the same word. - Punctuation marks such as `. , ! ?` should be removed before counting the words. - The function should handle any arbitrary string input.","solution":"import re from collections import Counter def word_frequency(text): Returns a dictionary with the frequency count of each word in the input text. Words are considered case-insensitively and punctuation is excluded. # Normalize the text to lowercase text = text.lower() # Remove punctuation using regex text = re.sub(r\'[^ws]\', \'\', text) # Split text into words words = text.split() # Count the frequency of each word frequency = Counter(words) return dict(frequency)"},{"question":"Write a function that takes a string representing a Roman numeral and converts it into an integer. The function should correctly handle subtractive combinations like IV (4) and XL (40). The input will always be a valid Roman numeral within the range 1 to 3999. Examples: ```python roman_to_integer(\\"III\\") ``` returns the integer ``` 3 ``` ```python roman_to_integer(\\"IX\\") ``` returns the integer ``` 9 ``` ```python roman_to_integer(\\"MCMXCIV\\") ``` returns the integer ``` 1994 ``` **Note** The Roman numerals are as follows: - I : 1 - IV : 4 - V : 5 - IX : 9 - X : 10 - XL : 40 - L : 50 - XC : 90 - C : 100 - CD : 400 - D : 500 - CM : 900 - M : 1000","solution":"def roman_to_integer(roman): Converts a Roman numeral to an integer. Args: roman (str): The Roman numeral as a string. Returns: int: The integer value of the Roman numeral. roman_to_int = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000, \'IV\': 4, \'IX\': 9, \'XL\': 40, \'XC\': 90, \'CD\': 400, \'CM\': 900 } i = 0 integer_value = 0 while i < len(roman): if i + 1 < len(roman) and roman[i:i+2] in roman_to_int: integer_value += roman_to_int[roman[i:i+2]] i += 2 else: integer_value += roman_to_int[roman[i]] i += 1 return integer_value"},{"question":"You are tasked with creating a function that simulates the behavior of a basic calculator with logging capabilities. The calculator will support four operations: addition, subtraction, multiplication, and division. Additionally, every time a calculation is performed, it should store a log entry that records the operation type, input values, and the result. Write a class `Calculator` with the following methods: 1. `add(a, b)`: Takes two numbers `a` and `b`, returns their sum. 2. `subtract(a, b)`: Takes two numbers `a` and `b`, returns their difference. 3. `multiply(a, b)`: Takes two numbers `a` and `b`, returns their product. 4. `divide(a, b)`: Takes two numbers `a` and `b`, returns their quotient (if `b` is zero, raise a `ValueError` with the message \\"Cannot divide by zero\\"). 5. `get_logs()`: Returns a list of all logged operations in the format \\"Operation: a OP b = result\\", where `OP` is the operation performed (+, -, *, /). Example: ``` calc = Calculator() calc.add(2, 3) # 5 calc.subtract(10, 5) # 5 calc.multiply(4, 5) # 20 calc.divide(20, 4) # 5 calc.get_logs() # [\\"Operation: 2 + 3 = 5\\", \\"Operation: 10 - 5 = 5\\", \\"Operation: 4 * 5 = 20\\", \\"Operation: 20 / 4 = 5\\"] ``` Write the `Calculator` class in Python and ensure it works as described.","solution":"class Calculator: def __init__(self): self.logs = [] def add(self, a, b): result = a + b self.logs.append(f\\"Operation: {a} + {b} = {result}\\") return result def subtract(self, a, b): result = a - b self.logs.append(f\\"Operation: {a} - {b} = {result}\\") return result def multiply(self, a, b): result = a * b self.logs.append(f\\"Operation: {a} * {b} = {result}\\") return result def divide(self, a, b): if b == 0: raise ValueError(\\"Cannot divide by zero\\") result = a / b self.logs.append(f\\"Operation: {a} / {b} = {result}\\") return result def get_logs(self): return self.logs"},{"question":"Write a function that takes a string as input and returns a new string with the characters in reverse order, but with all non-alphanumeric characters removed. Ensure that the case is preserved (i.e., \'A\' remains \'A\' and \'a\' remains \'a\'). For example: - Input: \\"a!b@c#1\\" - Output: \\"1cba\\" - Input: \\"AbC!\\" - Output: \\"CbA\\" Write a function signature that accepts a single string and outputs a string in your desired programming language.","solution":"def reverse_alphanumeric(input_string): This function takes a string as input and returns a new string with the characters in reverse order, but with all non-alphanumeric characters removed. # Filter out non-alphanumeric characters alphanumeric_chars = [char for char in input_string if char.isalnum()] # Reverse the list of alphanumeric characters and join them to form a new string return \'\'.join(alphanumeric_chars[::-1])"},{"question":"You are given a directed acyclic graph (DAG) with N vertices numbered from 1 to N and M edges. A vertex V initially has a value of A_V (1 leq V leq N). You are also given Q queries. In each query, you are provided a vertex V and you need to calculate the sum of the values of all vertices that can reach V either directly or indirectly via one or more edges, and then reset their values to zero, including the value of the vertex V itself. -----Input:----- - The first line contains an integer T denoting the number of test cases. - The first line of each test case contains two integers N and M. - The second line contains N space-separated integers, A_1, A_2, ..., A_N denoting the initial values of the vertices. - The next M lines contain two integers u and v denoting an edge from vertex u to vertex v. - The next line contains an integer Q. - The next Q lines each contain a single integer which is the query. -----Output:----- - Print a single line containing N integers for each test case, representing the final values of the vertices after all queries are performed. -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 100000 - 0 leq M leq 200000 - 1 leq Q leq 200000 - 1 leq A_i leq 10^9 - The sum of N over all test cases does not exceed 100000 - The sum of M over all test cases does not exceed 200000 - The sum of Q over all test cases does not exceed 200000 -----Sample Input----- 1 5 4 1 2 3 4 5 1 2 1 3 3 4 4 5 3 5 3 2 -----Sample Output----- 0 0 0 0 0 -----Explanation----- 1. For the first query, vertex 5 can be reached from 1, 3, and 4, so their values (1+3+4+5=13) are added to A_5 making it 0 and setting all contributing values to 0. 2. For the second query, vertex 3 can be reached from 1 and 1 itself (1+3=4), making A_3 and the contributing values become 0. 3. For the third query, vertex 2 can be directly reached from 1 (1+2=3), making A_2 and the contributing values become 0.","solution":"from collections import defaultdict, deque def solve_dag_queries(T, test_cases): results = [] for t in range(T): N, M = test_cases[t][\'NM\'] values = test_cases[t][\'values\'] edges = test_cases[t][\'edges\'] queries = test_cases[t][\'queries\'] # Build the graph graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in edges: graph[u].append(v) reverse_graph[v].append(u) def bfs_collect_values(v): queue = deque([v]) visited = set() total_sum = 0 while queue: node = queue.popleft() if node in visited: continue visited.add(node) total_sum += values[node - 1] # 1-indexed, so node-1 for 0-indexed values for pred in reverse_graph[node]: if pred not in visited: queue.append(pred) # Reset values of visited nodes to 0 for node in visited: values[node - 1] = 0 return total_sum for v in queries: _ = bfs_collect_values(v) results.append(\\" \\".join(map(str, values))) return results # This function can be tested with the following `main` function. if __name__ == \\"__main__\\": T = 1 test_cases = [ { \\"NM\\": (5, 4), \\"values\\": [1, 2, 3, 4, 5], \\"edges\\": [(1, 2), (1, 3), (3, 4), (4, 5)], \\"queries\\": [5, 3, 2] } ] results = solve_dag_queries(T, test_cases) for result in results: print(result)"},{"question":"Write a function that takes an integer `n` (1 <= n <= 10,000) and returns a string representing the `n`th term of the look-and-say sequence. The look-and-say sequence is a sequence of numbers where each number is the ‘reading’ of the previous number. To generate the sequence, you start with the string \\"1\\". To generate each subsequent term, read off the digits of the previous term. Count the number of digits in groups of the same digit and say those counts followed by the digit itself. For example, the sequence begins: ``` 1 11 21 1211 111221 ``` # Examples ```python n = 1 => \\"1\\" n = 4 => \\"1211\\" n = 6 => \\"312211\\" ``` # Function Signature ```python def look_and_say(n: int) -> str: pass ```","solution":"def look_and_say(n: int) -> str: Function to return the nth term of the look-and-say sequence. if n == 1: return \\"1\\" def next_term(term: str) -> str: Generate the next term in the look-and-say sequence given the current term. result = [] i = 0 while i < len(term): count = 1 while i + 1 < len(term) and term[i] == term[i + 1]: i += 1 count += 1 result.append(f\\"{count}{term[i]}\\") i += 1 return \'\'.join(result) current_term = \\"1\\" for _ in range(1, n): current_term = next_term(current_term) return current_term"},{"question":"Write a function to find the minimum number of operations required to make the elements of an array equal. Each operation consists of incrementing or decrementing an element of the array by 1. Example 1: Input: nums = [1, 2, 3] Output: 2 Explanation: You can make each of the elements equal to 2 by performing two operations: (1 → 2) and (3 → 2). Example 2: Input: nums = [1, 10, 2, 9] Output: 16 Explanation: You can make each of the elements equal to 5 by performing a total of 16 operations: (1 → 5, 2 → 5, 9 → 5, 10 → 5). Constraints: - 1 <= nums.length <= 10^5 - -10^6 <= nums[i] <= 10^6","solution":"def min_operations_to_equal_elements(nums): Returns the minimum number of operations required to make all elements in the array equal by incrementing or decrementing element values by 1. nums.sort() median = nums[len(nums) // 2] # optimal value to make all elements equal return sum(abs(x - median) for x in nums)"},{"question":"Your task is to find the longest consecutive sequence of numbers in the given unsorted integer array, nums. The sequence should be formed by the numbers themselves, not by the indices, and you must do so in O(n) time complexity. Example 1: Input: nums = [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Example 2: Input: nums = [0,3,7,2,5,8,4,6,0,1] Output: 9 Explanation: The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Therefore its length is 9. Example 3: Input: nums = [9,1,4,7,3,-1,0,5,8,-1,6] Output: 7 Explanation: The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6]. Therefore its length is 7. Example 4: Input: nums = [1,2,0,1] Output: 3 Explanation: The longest consecutive elements sequence is [0, 1, 2]. Therefore its length is 3. Constraints: 0 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # only check for the start of sequences if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are organizing a party and need to buy packs of candies for the guests. Each pack can hold exactly X candies. Write a program to determine the minimum number of packs needed to buy at least C candies. -----Input:----- - First line will contain T, the number of testcases. Then the testcases follow. - Each testcase contains a single line of input, two integers C which is the total number of candies needed and X which is the number of candies each pack can hold. -----Output:----- For each testcase, output in a single line the minimum number of packs needed. -----Constraints----- - 1 leq T leq 10^4 - 1 leq C leq 10^9 - 1 leq X leq 1000 -----Sample Input:----- 2 100 7 40 8 -----Sample Output:----- 15 5 -----EXPLANATION:----- In the first testcase, to get at least 100 candies with packs that hold 7 candies each, you need at least 15 packs (7 * 15 = 105 candies). In the second testcase, to get at least 40 candies with packs that hold 8 candies each, you need at least 5 packs (8 * 5 = 40 candies).","solution":"import math def min_packs_needed(T, testcases): Determines the minimum number of packs needed to buy at least C candies, when each pack holds exactly X candies. Parameters: T (int): number of testcases testcases (list of tuples): each tuple contains two integers C (number of candies needed) and X (number of candies each pack can hold) Returns: list: a list of minimum packs needed for each testcase results = [] for C, X in testcases: packs_needed = math.ceil(C / X) results.append(packs_needed) return results"},{"question":"You are given an argument `array` of integers consisting of multiple elements. Your task is to determine if the array contains a contiguous subarray whose elements sum up to a specified integer `target`. For example: ```python array -> [1, 2, 3, 7, 5] target -> 12 output -> \'Yes, the subarray exists.\' // [2, 3, 7] array -> [1, 2, 3, 4, 5] target -> 9 output -> \'Yes, the subarray exists.\' // [2, 3, 4] array -> [10, 2, -2, -20, 10] target -> 20 output -> \'No, such subarray does not exist.\' ``` If a contiguous subarray with the given sum exists, return \'Yes, the subarray exists.\'. If no such subarray exists, return \'No, such subarray does not exist.\'. Each element in the array must be used to check for the formation of the subarray, and it must be contiguous.","solution":"def subarray_sum_exists(array, target): Determines if there\'s a contiguous subarray whose sum equals the target. Parameters: array (List[int]): List of integers. target (int): The target sum. Returns: str: \'Yes, the subarray exists.\' if such subarray exists, otherwise \'No, such subarray does not exist.\' current_sum = 0 start_index = 0 for end_index in range(len(array)): current_sum += array[end_index] while current_sum > target and start_index <= end_index: current_sum -= array[start_index] start_index += 1 if current_sum == target: return \'Yes, the subarray exists.\' return \'No, such subarray does not exist.\'"},{"question":"A company organizes an annual programming competition that consists of several coding challenges. Each challenge has a different difficulty rating and different competitors. Competitors earn points from each challenge based on their performance. The competition results are recorded in a list of dictionaries, where each dictionary contains the name of the competitor, a list of challenges they participated in, and the points they scored in each challenge. The performance of a competitor is defined as the total points they scored across all challenges. Write a program to output the competition leaderboard, which is a sorted list of competitors by their performance in descending order. If two competitors have the same total points, they should be listed in alphabetical order of their names. --- # EXAMPLES ```python competition_results([ {\'competitor\': \'Alice\', \'challenges\': [\'C1\', \'C2\'], \'points\': [50, 75]}, {\'competitor\': \'Bob\', \'challenges\': [\'C2\', \'C3\'], \'points\': [75, 60]}, {\'competitor\': \'Charlie\', \'challenges\': [\'C1\', \'C2\', \'C3\'], \'points\': [20, 35, 45]} ]) == [{\'competitor\': \'Bob\', \'points\': 135}, {\'competitor\': \'Alice\', \'points\': 125}, {\'competitor\': \'Charlie\', \'points\': 100}] competition_results([ {\'competitor\': \'Dave\', \'challenges\': [\'C1\'], \'points\': [80]}, {\'competitor\': \'Eve\', \'challenges\': [\'C1\', \'C2\'], \'points\': [50, 75]}, {\'competitor\': \'Frank\', \'challenges\': [\'C2\'], \'points\': [75]} ]) == [{\'competitor\': \'Eve\', \'points\': 125}, {\'competitor\': \'Dave\', \'points\': 80}, {\'competitor\': \'Frank\', \'points\': 75}] competition_results([ {\'competitor\': \'George\', \'challenges\': [\'C1\', \'C2\'], \'points\': [70, 30]}, {\'competitor\': \'Hannah\', \'challenges\': [\'C3\'], \'points\': [90]}, {\'competitor\': \'Ian\', \'challenges\': [\'C1\', \'C3\'], \'points\': [60, 30]} ]) == [{\'competitor\': \'George\', \'points\': 100}, {\'competitor\': \'Hannah\', \'points\': 90}, {\'competitor\': \'Ian\', \'points\': 90}] ```","solution":"def competition_results(results): Generate the competition leaderboard based on the performance of each competitor. Parameters: results (list of dict): A list of dictionaries containing competitor names, challenges, and points. Returns: list: Sorted list of dictionaries with competitor names and their total points. leaderboard = [] for result in results: total_points = sum(result[\'points\']) leaderboard.append({\'competitor\': result[\'competitor\'], \'points\': total_points}) # Sort by total points in descending order, and alphabetically by name in case of a tie leaderboard.sort(key=lambda x: (-x[\'points\'], x[\'competitor\'])) return leaderboard"},{"question":"Given an input string of words separated by spaces, write a function to find the longest word that consists only of vowels (a, e, i, o, u). If there is a tie, return the word that appears first. If there are no such words, return an empty string. Example: Input: \\"this is an example input\\" Output: \\"example\\" In the string \\"this is an example input\\", the word \'example\' has more vowels than any other word (e, a, e) and is returned as the output.","solution":"def longest_vowel_word(sentence): Returns the longest word made up entirely of vowels from the given sentence. If there is a tie, the word that appears first is returned. If no such words exist, returns an empty string. vowels = set(\'aeiouAEIOU\') def is_vowel_word(word): return all(char in vowels for char in word) words = sentence.split() longest = \\"\\" for word in words: if is_vowel_word(word) and len(word) > len(longest): longest = word return longest"},{"question":"You are given an array of integers. Your task is to find all unique pairs in the array that add up to a given target sum. Complete the function `findPairsWithSum(arr, target)`, where `arr` is the input array and `target` is the target sum. Each pair should be sorted in ascending order, and the overall list of pairs should also be sorted in ascending order based on the first element of each pair. You don\'t need to worry about input validation, as `arr` will always be an array of integers, and `target` will be an integer. **Note:** A pair should not include the same element twice, and pairs (a, b) and (b, a) are considered the same and should not both be included in the result. # Examples ```python findPairsWithSum([1, 2, 3, 4, 5], 5) # Output: [(1, 4), (2, 3)] findPairsWithSum([1, 1, 2, 45, 46, 46], 47) # Output: [(1, 46), (2, 45)] findPairsWithSum([1, -2, 3, -4, 5, -6], -1) # Output: [(-6, 5), (-4, 3), (-2, 1)] ``` Happy coding!","solution":"def findPairsWithSum(arr, target): Finds all unique pairs in the array that add up to the given target sum. Each pair and the overall list should be sorted in ascending order. arr.sort() pairs = set() seen = set() for num in arr: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(pairs)"},{"question":"Given a non-empty array of integers, determine if the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, otherwise return -1. # Function Signature ```python def dominantIndex(nums: List[int]) -> int: ``` # Example input ```python nums = [3, 6, 1, 0] ``` # Example output ```python Output: 1 ``` # Explanation The largest number is 6, which is at index 1. 6 is more than twice as large as every other number in the array. # Example input ```python nums = [1, 2, 3, 4] ``` # Example output ```python Output: -1 ``` # Explanation 4 is the largest number, but 4 is not at least twice as large as 3. # Constraints: - The array will have at least one element. - The array elements can be positive or negative integers. # Notes: - You may not use any library functions (e.g., max()) to determine the largest element. - Your solution should run in linear time, i.e., O(n).","solution":"from typing import List def dominantIndex(nums: List[int]) -> int: if not nums: return -1 max_index = 0 for i in range(1, len(nums)): if nums[i] > nums[max_index]: max_index = i for i in range(len(nums)): if i != max_index and nums[max_index] < 2 * nums[i]: return -1 return max_index"},{"question":"Design a function that takes in an integer `n` and returns the `n`-th term of the Fibonacci sequence. The Fibonacci sequence is defined as follows: - `F(0) = 0` - `F(1) = 1` - For `n >= 2`, `F(n) = F(n-1) + F(n-2)` The function should be efficient and compute the result in `O(log n)` time complexity using matrix exponentiation. Example: Input: n = 10 Output: 55 Explanation: The 10th Fibonacci number is 55. Note: - The input integer `n` must be in the range `[0, 30]`. - You may assume that `0 <= n <= 30`.","solution":"def fib(n): Returns the n-th term of the Fibonacci sequence using matrix exponentiation. Ensures an efficient O(log n) time complexity. def matrix_mult(A, B): Multiplies two 2x2 matrices A and B. return [ [A[0][0]*B[0][0] + A[0][1]*B[1][0], A[0][0]*B[0][1] + A[0][1]*B[1][1]], [A[1][0]*B[0][0] + A[1][1]*B[1][0], A[1][0]*B[0][1] + A[1][1]*B[1][1]] ] def matrix_power(matrix, power): Raises the matrix to the specified power using exponentiation by squaring. result = [[1, 0], [0, 1]] # Identity matrix base = matrix while power > 0: if power % 2 == 1: result = matrix_mult(result, base) base = matrix_mult(base, base) power //= 2 return result if n == 0: return 0 # Transformation matrix for Fibonacci; includes F(1) = 1, F(0) = 0 F = [[1, 1], [1, 0]] # Raise the transformation matrix to the (n-1)-th power result = matrix_power(F, n - 1) # The resulting matrix [ [F(n), F(n-1)], [F(n-1), F(n-2)] ] # So F(n) is the top left value return result[0][0]"},{"question":"Aliens have landed on Earth and they communicate using a unique numeric language. They express their thoughts using a sequence of numbers, where each number represents a unique alien symbol. They are currently communicating with Earth using a sequence of alien symbols, conveyed as a series of numbers. You have been hired as part of the Earth linguistics team to decode the meaning of their messages. You are given a dictionary of alien symbols to Earth words, and a sequence of alien symbols that form sentences. Your task is to translate the alien sentences into Earth sentences. # Problem You are given a dictionary that maps alien symbols (positive integers) to Earth words (strings). You are also given multiple sequences of alien symbols which need to be translated into Earth sentences. # Input - The first line contains an integer `d` (1 ≤ d ≤ 1000) the number of entries in the dictionary. - The next `d` lines each contain an integer `a_i` (1 ≤ a_i ≤ 1000) and a corresponding string `s_i` (1 ≤ s_i.length ≤ 30). This integer-string pair indicates that the alien symbol `a_i` maps to the Earth word `s_i`. - The following line contains an integer `n` (1 ≤ n ≤ 100) which represents the number of sequences. - The next `n` lines each contain a sequence of alien symbols where each symbol is an integer `x` (1 ≤ x ≤ 1000). The integers in each sequence are space-separated. # Output For each sequence, print the translated Earth sentence. The words in the sentence should be separated by a single space. # Example Input ``` 3 1 hello 2 world 3 earth 2 1 2 3 3 1 ``` Output ``` hello world earth earth hello ``` Explanation Given the dictionary: - 1 maps to \\"hello\\" - 2 maps to \\"world\\" - 3 maps to \\"earth\\" For the sequence `1 2 3`, the translated sentence is `\\"hello world earth\\"`. For the sequence `3 1`, the translated sentence is `\\"earth hello\\"`.","solution":"def translate_messages(d, dictionary_entries, n, sequences): Translates sequences of alien symbols into Earth sentences. Args: d: Number of dictionary entries dictionary_entries: List of tuples with alien symbol and its corresponding Earth word n: Number of sequences sequences: List of lists with alien symbols sequences Returns: List of translated Earth sentences symbol_to_word = {entry[0]: entry[1] for entry in dictionary_entries} translated_sentences = [] for seq in sequences: translated_sentence = \' \'.join(symbol_to_word[symbol] for symbol in seq) translated_sentences.append(translated_sentence) return translated_sentences"},{"question":"How many letters are the same? No Description Only by Thinking and Testing Look at the results of the testcases, and guess the code! --- Series: 01. [A and B?](http://www.codewars.com/kata/56d904db9963e9cf5000037d) 02. [Incomplete string](http://www.codewars.com/kata/56d9292cc11bcc3629000533) 03. [True or False](http://www.codewars.com/kata/56d931ecc443d475d5000003) 04. [Something capitalized](http://www.codewars.com/kata/56d93f249c844788bc000002) 05. [Uniq or not Uniq](http://www.codewars.com/kata/56d949281b5fdc7666000004) 06. [Spatiotemporal index](http://www.codewars.com/kata/56d98b555492513acf00077d) 07. [Math of Primary School](http://www.codewars.com/kata/56d9b46113f38864b8000c5a) 08. [Math of Middle school](http://www.codewars.com/kata/56d9c274c550b4a5c2000d92) 09. [From nothingness To nothingness](http://www.codewars.com/kata/56d9cfd3f3928b4edd000021) 10. [Not perfect? Throw away!](http://www.codewars.com/kata/56dae2913cb6f5d428000f77) 11. [Welcome to take the bus](http://www.codewars.com/kata/56db19703cb6f5ec3e001393) 12. [A happy day will come](http://www.codewars.com/kata/56dc41173e5dd65179001167) 13. [Sum of 15(Hetu Luosliu)](http://www.codewars.com/kata/56dc5a773e5dd6dcf7001356) 14. [Nebula or Vortex](http://www.codewars.com/kata/56dd3dd94c9055a413000b22) 15. [Sport Star](http://www.codewars.com/kata/56dd927e4c9055f8470013a5) 16. [Falsetto Rap Concert](http://www.codewars.com/kata/56de38c1c54a9248dd0006e4) 17. [Wind whispers](http://www.codewars.com/kata/56de4d58301c1156170008ff) 18. [Mobile phone simulator](http://www.codewars.com/kata/56de82fb9905a1c3e6000b52) 19. [Join but not join](http://www.codewars.com/kata/56dfce76b832927775000027) 20. [I hate big and small](http://www.codewars.com/kata/56dfd5dfd28ffd52c6000bb7) 21. [I want to become diabetic ;-)](http://www.codewars.com/kata/56e0e065ef93568edb000731) 22. [How many blocks?](http://www.codewars.com/kata/56e0f1dc09eb083b07000028) 23. [Operator hidden in a string](http://www.codewars.com/kata/56e1161fef93568228000aad) 24. [Substring Magic](http://www.codewars.com/kata/56e127d4ef93568228000be2) 25. [Report about something](http://www.codewars.com/kata/56eccc08b9d9274c300019b9) 26. [Retention and discard I](http://www.codewars.com/kata/56ee0448588cbb60740013b9) 27. [Retention and discard II](http://www.codewars.com/kata/56eee006ff32e1b5b0000c32) 28. [How many \\"word\\"?](http://www.codewars.com/kata/56eff1e64794404a720002d2) 29. [Hail and Waterfall](http://www.codewars.com/kata/56f167455b913928a8000c49) 30. [Love Forever](http://www.codewars.com/kata/56f214580cd8bc66a5001a0f) 31. [Digital swimming pool](http://www.codewars.com/kata/56f25b17e40b7014170002bd) 32. [Archery contest](http://www.codewars.com/kata/56f4202199b3861b880013e0) 33. [The repair of parchment](http://www.codewars.com/kata/56f606236b88de2103000267) 34. [Who are you?](http://www.codewars.com/kata/56f6b4369400f51c8e000d64) 35. [Safe position](http://www.codewars.com/kata/56f7eb14f749ba513b0009c3) --- Special recommendation Another series, innovative and interesting, medium difficulty. People who like challenges, can try these kata: * [Play Tetris : Shape anastomosis](http://www.codewars.com/kata/56c85eebfd8fc02551000281) * [Play FlappyBird : Advance Bravely](http://www.codewars.com/kata/56cd5d09aa4ac772e3000323)","solution":"def count_same_letters(str1, str2): Counts how many letters from the beginning are the same between two given strings. count = 0 for a, b in zip(str1, str2): if a == b: count += 1 else: break return count"},{"question":"Write a function `find_smallest_window_to_sort` that takes an array of integers and returns the smallest contiguous subarray that, if sorted, would result in the entire array being sorted. If the array is already sorted, return an empty list. For example: ```python find_smallest_window_to_sort([1, 3, 2, 4, 5]) == [3, 2] find_smallest_window_to_sort([1, 2, 3, 4, 5]) == [] find_smallest_window_to_sort([1, 5, 4, 3, 2, 6, 7]) == [5, 4, 3, 2] find_smallest_window_to_sort([2, 6, 4, 8, 10, 9, 15]) == [6, 4, 8, 10, 9] find_smallest_window_to_sort([1, 2, 5, 3, 4]) == [5, 3, 4] ``` **Constraints:** - The function should have a time complexity better than O(n²). - The array will contain at least one element. - Elements in the array will be unique.","solution":"def find_smallest_window_to_sort(arr): n = len(arr) if n <= 1: return [] start, end = -1, -1 for i in range(n - 1): if arr[i] > arr[i + 1]: start = i break if start == -1: return [] for i in range(n - 1, 0, -1): if arr[i] < arr[i - 1]: end = i break min_val = min(arr[start:end + 1]) max_val = max(arr[start:end + 1]) for i in range(start): if arr[i] > min_val: start = i break for i in range(n - 1, end, -1): if arr[i] < max_val: end = i break return arr[start:end + 1]"},{"question":"Given a list of strings, identify all the anagram groups. Anagrams are strings made up of the same characters in the same frequency but can be in any order. Return a list of lists, where each sublist contains strings that are anagrams of each other. The order of the anagram groups and the order of the strings within each group do not matter. Example ```python words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\", \\"google\\", \\"goleog\\"] # The anagram groups are: # [\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\"] # [\\"google\\", \\"goleog\\"] # So, the function should return a list like: # [[\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\"], [\\"google\\", \\"goleog\\"]] ```","solution":"from collections import defaultdict def group_anagrams(words): Groups anagram strings together. :param words: List of strings :return: List of lists, where each sublist contains strings that are anagrams of each other. anagrams = defaultdict(list) for word in words: # Use sorted word as the key key = \'\'.join(sorted(word)) anagrams[key].append(word) return list(anagrams.values())"},{"question":"Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police. It is assumed that adjacent houses have security systems connected, and it will automatically contact the police if two adjacent houses were broken into on the same night. Example 1: Input: nums = [1, 2, 3, 1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount of money robbed = 1 + 3 = 4. Example 2: Input: nums = [2, 7, 9, 3, 1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9), and rob house 5 (money = 1). Total amount of money robbed = 2 + 9 + 1 = 12. Note: Your solution should maintain O(n) time complexity and O(1) space complexity.","solution":"def rob(nums): Determine the maximum amount of money you can rob tonight without alerting the police. :param nums: List[int], the list of non-negative integers representing the amount of money in each house. :return: int, the maximum amount of money you can rob. if not nums: return 0 prev2, prev1 = 0, 0 for num in nums: current = max(prev1, prev2 + num) prev2 = prev1 prev1 = current return prev1"},{"question":"# Encrypted Messages In a secure messaging system, messages are encoded by reversing the words while keeping the letters within each word intact. For example, the message \\"Hello World\\" would be encoded as \\"World Hello\\". You need to help Pete and Billy write a function that takes an input string containing a single sentence and returns the string with the words in reverse order. # Task Write a function `reverse_message(sentence: str) -> str` that takes a sentence and returns a new sentence with the words in reverse order. Words are defined as sequences of characters separated by spaces. Input - A single string `sentence` that contains a sentence of one or more words (1 ≤ length of `sentence` ≤ 200). Output - A single string representing the sentence with all words reversed. Examples ```python reverse_message(\\"Hello World\\") # Output: \\"World Hello\\" reverse_message(\\"Python is amazing\\") # Output: \\"amazing is Python\\" reverse_message(\\"Keep calm and code on\\") # Output: \\"on code and calm Keep\\" ``` Note: The input string will not contain leading or trailing spaces, and the words will be separated by a single space.","solution":"def reverse_message(sentence: str) -> str: Returns the sentence with the words in reverse order. Parameters: sentence (str): The input sentence containing words separated by spaces. Returns: str: A new sentence with the words reversed. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Many people enjoy prime numbers and I happen to be one of them. Write a function that returns the nth prime number. The function should take one parameter, n, and it should return the nth prime number. For example: ```python nth_prime(5) == 11 ``` Because 11 is the 5th prime number. For reference, the first few prime numbers are 2, 3, 5, 7, and 11.","solution":"def nth_prime(n): Returns the nth prime number. Parameters: n (int): The position of the prime number to find. Returns: int: The nth prime number. if n < 1: raise ValueError(\\"n must be greater than 0\\") primes = [] candidate = 2 while len(primes) < n: is_prime = all(candidate % p != 0 for p in primes) if is_prime: primes.append(candidate) candidate += 1 return primes[n-1]"},{"question":"You are given an array of integers where each element appears exactly twice except for one element which appears exactly once. Write a function to find the element that appears only once. # Requirements: - Implement the function in Python, named `findUniqueElement`. - The function should take a single list of integers as input and return the integer that appears only once. # Example: ```python def findUniqueElement(arr): # Your implementation here # Example usages: assert findUniqueElement([4, 1, 2, 1, 2]) == 4 assert findUniqueElement([2, 2, 1]) == 1 assert findUniqueElement([1]) == 1 ``` # Constraints: - Your solution should have a linear runtime complexity. - The length of the array will be at least 1. - The array contains only integers. - The array has exactly one element that appears only once.","solution":"def findUniqueElement(arr): Finds the element that appears only once in an array where every other element appears exactly twice. :param arr: List[int] - The list of integers :return: int - The unique element unique = 0 for num in arr: unique ^= num return unique"},{"question":"You are given a rectangular matrix of dimensions n times m filled with integers. You need to find out the maximum sum of any non-empty submatrix in this given matrix. A submatrix is any contiguous rectangular part of the matrix. -----Input:----- - The first line of input contains two integers, n and m, representing the number of rows and columns in the matrix, respectively. - The next n lines contain m integers each, representing the matrix elements. -----Output:----- Print the maximum sum of any non-empty submatrix. -----Constraints----- - 1 leq n, m leq 100 - -10^{4} leq matrix[i][j] leq 10^{4} -----Sample Input:----- 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 -----Sample Output:----- 29 (Note: The maximum sum submatrix is: 3 8 10 -4 -1 1)","solution":"def max_submatrix_sum(matrix): Function to find the maximum sum of any non-empty submatrix in a given matrix. n = len(matrix) m = len(matrix[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum def kadane(arr): Utility function to find the maximum sum subarray using Kadane\'s algorithm. max_ending_here = arr[0] max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far # Example usage matrix = [ [1, 2, -1, -4, -20], [-8, -3, 4, 2, 1], [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6] ] print(max_submatrix_sum(matrix)) # Output: 29"},{"question":"The Prime Number Game Three friends, Alice, Bob, and Charlie, are playing a game with prime numbers. The game is played in rounds, where each round consists of choosing a prime number from an initial set and removing all its multiples from the set. The game continues until no prime numbers are left in the set. Each player takes turns in the order Alice, Bob, Charlie, and repeats until the game ends. The player who picks the largest number when the game ends wins. Alice, Bob, and Charlie need your help to determine who will win the game if they all play optimally. - A player plays optimally by always picking the largest available prime number in their turn. - If a player cannot pick a prime number in their turn, they pass. Your task is to simulate this game given the initial set of numbers and determine which player will win. -----Input----- The first line contains t, the number of test cases (about 50). Each test case consists of: - The first line contains an integer n (2 ≤ n ≤ 104), the number of elements in the initial set. - The second line contains n distinct integers a1, a2, ..., an (2 ≤ ai ≤ 104), representing the initial set of numbers. -----Output----- For each test case, print a single line containing the name of the player who wins the game (Alice, Bob, or Charlie). -----Example----- Input: 3 5 2 3 4 5 6 6 2 3 5 7 11 13 7 4 6 8 10 12 14 15 Output: Alice Alice Bob -----Output details----- Case 1: Alice starts and picks 5, Bob picks 3, Charlie picks 2, leaving only multiples of those primes in the set. Alice wins with 5. Case 2: Alice picks 13, Bob picks 11, Charlie picks 7, Alice picks 5, Bob picks 3, and the game ends. Alice wins with 13. Case 3: No primes at the beginning, so no one picks anything. Thus, Bob wins as he is the first player to pass his turn (since Bob is after Alice in the turn order).","solution":"def prime_game_winner(test_cases): results = [] for case in test_cases: n, numbers = case primes = [num for num in numbers if is_prime(num)] # Sort primes in descending order to simulate optimal play primes_sorted = sorted(primes, reverse=True) if not primes_sorted: # Since no prime numbers are there, checking whose turn would it be if there were primes results.append(\\"Bob\\") continue largest_prime = primes_sorted[0] if primes_sorted.index(largest_prime) % 3 == 0: results.append(\\"Alice\\") elif primes_sorted.index(largest_prime) % 3 == 1: results.append(\\"Bob\\") else: results.append(\\"Charlie\\") return results def is_prime(num): if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True"},{"question":"You are tasked with writing a function `fizz_buzz_custom` that takes five arguments: the range boundaries `start` and `end` (inclusive), and three substitution strings `fizz_sub`, `buzz_sub`, and `fizzbuzz_sub`. Your function should iterate over the range from `start` to `end`, inclusive, and print each number, but print `fizz_sub` instead of any number that is a multiple of 3, `buzz_sub` instead of any number that is a multiple of 5, and `fizzbuzz_sub` instead of any number that is a multiple of both 3 and 5. If a number is neither of these, simply print the number itself. Examples for clarity: - `fizz_buzz_custom(1, 15, \\"Fizz\\", \\"Buzz\\", \\"FizzBuzz\\")` returns: 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz - `fizz_buzz_custom(10, 20, \\"Foo\\", \\"Bar\\", \\"FooBar\\")` returns: Bar 11 Foo 13 14 FooBar 16 17 Foo 19 Bar - `fizz_buzz_custom(5, 18, \\"Ping\\", \\"Pong\\", \\"PingPong\\")` returns: Pong Ping 7 8 Ping Pong 11 Ping 13 14 PingPong 16 17 Ping The signature of your function should be: ```python def fizz_buzz_custom(start: int, end: int, fizz_sub: str, buzz_sub: str, fizzbuzz_sub: str) -> None: ```","solution":"def fizz_buzz_custom(start: int, end: int, fizz_sub: str, buzz_sub: str, fizzbuzz_sub: str) -> None: Prints each number from start to end inclusive, replacing multiples of 3 with fizz_sub, multiples of 5 with buzz_sub, and multiples of both with fizzbuzz_sub. Args: - start: The starting number of the range. - end: The ending number of the range. - fizz_sub: The substitution string for multiples of 3. - buzz_sub: The substitution string for multiples of 5. - fizzbuzz_sub: The substitution string for multiples of both 3 and 5. for i in range(start, end + 1): if i % 15 == 0: print(fizzbuzz_sub) elif i % 3 == 0: print(fizz_sub) elif i % 5 == 0: print(buzz_sub) else: print(i)"},{"question":"# Objective Create a function `is_palindrome_before` that checks whether a given string can become a palindrome by rotating it `k` times (characters shifted cyclically to the left). A string is said to be a palindrome if it reads the same backward as forward. # Function Signature `def is_palindrome_before(s: str, k: int) -> bool:` - `s` (str): The input string to check, its length is at most 1000 characters. - `k` (int): The number of rotations to perform, an integer between 0 and 1000 inclusive. Examples `is_palindrome_before(\\"aab\\", 2)` ➞ `True` - Rotation sequence: \\"aab\\" -> \\"aba\\" (1 rotation is enough to make it a palindrome) `is_palindrome_before(\\"racecar\\", 3)` ➞ `True` - Rotation sequence: \\"racecar\\" (it\'s already a palindrome without any rotation needed) `is_palindrome_before(\\"abcdef\\", 4)` ➞ `False` - Rotation sequence: \\"abcdef\\" -> \\"bcdefa\\" -> \\"cdefab\\" -> \\"defabc\\" -> \\"efabcd\\" (None of them forms a palindrome) `is_palindrome_before(\\"abc\\", 1)` ➞ `False` - Rotation sequence: \\"abc\\" (No single rotation can produce a palindrome) Note: It is guaranteed that `s` will be non-empty and comprise only lowercase letters.","solution":"def is_palindrome_before(s: str, k: int) -> bool: Returns True if the string s can be made into a palindrome by rotating it up to k times. Otherwise, returns False. def is_palindrome(s: str) -> bool: return s == s[::-1] n = len(s) for i in range(k + 1): rotated_s = s[i:] + s[:i] if is_palindrome(rotated_s): return True return False"},{"question":"Chef has been practicing his problem-solving skills and came across a problem involving digit sums. Given an integer N, Chef wants to compute the digital root of the number. The digital root is obtained as follows: Take the sum of the digits of N. If that sum has more than one digit, continue reducing the sum to a single digit by summing each digit of the result. Write a program to help Chef find the digital root of the given number. -----Input----- First line contains an integer T, which denotes the number of testcases. Each of the T lines contains a single integer N. -----Output----- For each line of input, produce one line of output. This line contains the digital root of the number N. -----Constraints----- - 1 ≤ T ≤ 10000 - 1 ≤ N ≤ 1000000000 -----Example----- Input: 3 9875 12345 456 Output: 2 6 6 -----Explanation----- Example case 1. The sum of digits of 9875 is 9+8+7+5 = 29, then sum of digits of 29 is 2+9 = 11, finally sum of digits of 11 is 1+1 = 2, hence the digital root is 2. Example case 2. The sum of digits of 12345 is 1+2+3+4+5 = 15, then sum of digits of 15 is 1+5 = 6, hence the digital root is 6.","solution":"def digital_root(n): Computes the digital root of a given integer n. while n >= 10: n = sum(int(digit) for digit in str(n)) return n def solve_digital_root(test_cases): Processes multiple test cases and computes the digital root for each. Parameters: test_cases (list): A list of integers for which to compute the digital root. Returns: list: A list of digital roots corresponding to the input test cases. results = [] for number in test_cases: results.append(digital_root(number)) return results"},{"question":"Palindrome Permutation Given a string, write a function to check if it is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words. For example, \\"Tact Coa\\" (which is a permutation of \\"taco cat\\") is a palindrome permutation. Function Signature: `def is_palindrome_permutation(s: str) -> bool:` # Input - A single string `s` consisting of lowercase and uppercase English letters and spaces (1 <= len(s) <= 1000). # Output - Return `True` if the input string is a permutation of a palindrome, otherwise return `False`. # Example ```python assert is_palindrome_permutation(\\"Tact Coa\\") == True assert is_palindrome_permutation(\\"Hello\\") == False assert is_palindrome_permutation(\\"aabb\\") == True assert is_palindrome_permutation(\\"abc cba\\") == True assert is_palindrome_permutation(\\"abc\\") == False ``` # Guidance - Consider the properties of a string that would allow it to be a permutation of a palindrome.","solution":"def is_palindrome_permutation(s: str) -> bool: Determines if a given string is a permutation of a palindrome. Args: s (str): The input string consisting of lowercase and uppercase English letters and spaces. Returns: bool: True if the input string is a permutation of a palindrome, otherwise False. from collections import Counter # Remove non-letter characters and convert to lowercase cleaned = [char.lower() for char in s if char.isalpha()] # Count the frequency of each character count = Counter(cleaned) # Check the number of characters that have an odd count odd_count = sum(1 for v in count.values() if v % 2 != 0) # A string can be rearranged to a palindrome if at most one character has an odd frequency return odd_count <= 1"},{"question":"You have been hired by a security firm to optimize their password validation system. Your task is to write a function that checks if a given password is secure. A password is considered secure if it meets the following criteria: 1. It must be at least 12 characters long. 2. It must contain at least one uppercase letter. 3. It must contain at least one lowercase letter. 4. It must contain at least one numeric digit. 5. It must contain at least one special character from the following set: `!@#%^&*()-_=+[]{}|;:,.<>?/` Your function should take a single string input, which is the password to be validated, and return a boolean indicating whether the password meets these security requirements. For example, the password \\"Secure!Password123\\" is secure because it meets all the criteria, so your function should return `True`. Conversely, the password \\"short1!\\" does not meet the length requirement, so your function should return `False`. ```python def is_secure_password(password: str) -> bool: if len(password) < 12: return False has_upper = any(c.isupper() for c in password) has_lower = any(c.islower() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \\"!@#%^&*()-_=+[]{}|;:,.<>?/\\" for c in password) return has_upper and has_lower and has_digit and has_special ``` You should write additional test cases to ensure your function works as expected.","solution":"def is_secure_password(password: str) -> bool: Check if the given password is secure based on specific criteria. Args: password (str): The password to be validated. Returns: bool: True if the password is secure, else False. if len(password) < 12: return False has_upper = any(c.isupper() for c in password) has_lower = any(c.islower() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \\"!@#%^&*()-_=+[]{}|;:,.<>?/\\" for c in password) return has_upper and has_lower and has_digit and has_special"},{"question":"You are given a matrix of `N x N` positive integers. Your task is to find the minimal path sum from the top left to the bottom right corner of the matrix, where you can only move to the right or downwards at any point in time. Write a function `minPathSum(matrix)` that takes in a matrix `matrix` and returns an integer representing the minimal path sum. For example: ```python matrix = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] minPathSum(matrix) # should return 7, since the path 1→3→1→1→1→1 has the minimal sum matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] minPathSum(matrix) # should return 21, since the path 1→2→3→6→9 has the minimal sum ``` You can assume: - The input matrix will always be non-empty and square (`N x N` with `N >= 1`). - All element values in the matrix are positive integers. Good luck!","solution":"def minPathSum(matrix): Returns the minimal path sum from the top left to the bottom right of the matrix, where you can only move to the right or downwards. n = len(matrix) # Initialize the dynamic programming table with the same dimensions as the matrix dp = [[0] * n for _ in range(n)] # Start with the top-left element dp[0][0] = matrix[0][0] # Fill the first row (only right moves) for j in range(1, n): dp[0][j] = dp[0][j - 1] + matrix[0][j] # Fill the first column (only downward moves) for i in range(1, n): dp[i][0] = dp[i - 1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j] # The bottom-right corner will have the result return dp[n - 1][n - 1]"},{"question":"Given an array of integers, write a function that determines whether any three integers in the array sum up to zero. ```python find_triplets([1, -1, 2, -2, 3]) = true, because (1, -1, 0) sums to 0, or (-1, -2, 3) sums to 0. find_triplets([1, 2, 3, 4, 5]) = false, because no combination of three elements sums to 0. ``` You may assume that the input array has at least three integers and consists only of integers. Good luck!","solution":"def find_triplets(arr): Determines whether any three integers in the array sum up to zero. arr.sort() n = len(arr) for i in range(n - 2): a = arr[i] left, right = i + 1, n - 1 while left < right: sum_of_three = a + arr[left] + arr[right] if sum_of_three == 0: return True elif sum_of_three < 0: left += 1 else: right -= 1 return False"},{"question":"In a distant planet called Zog, there\'s a unique tree known as the Fibonacci Tree. This tree has `N` levels, and each level `i` contains `F(i)` leaves where `F(i)` denotes the `i-th` number in the Fibonacci sequence (with `F(0) = 0` and `F(1) = 1`). You are tasked with finding out the total number of leaves in the first `N` levels of this tree. Note that the Fibonacci sequence is defined recursively as follows: - `F(0) = 0` - `F(1) = 1` - `F(n) = F(n - 1) + F(n - 2)` for `n >= 2` Write a program to compute the total number of leaves in the first `N` levels of the Fibonacci Tree. ---Input:--- - The first line of the input contains a single integer `T` denoting the number of test cases. - Each of the next `T` lines contains a single integer `N` representing the level up to which we need to count the total number of leaves. ---Output:--- For each test case, print a single line containing one integer: the total number of leaves in the first `N` levels of the Fibonacci Tree. ---Constraints--- - `1 ≤ T ≤ 10^4` - `0 ≤ N ≤ 50` ---Sample Input:--- 3 3 5 10 ---Sample Output:--- 4 12 143 ---Explanation--- - For the first test case: The first 3 levels of the Fibonacci sequence are 0, 1, 1, so the total number of leaves is 0 + 1 + 1 + 2 = 4. - For the second test case: The first 5 levels of the Fibonacci sequence are 0, 1, 1, 2, 3, 5, so the total number of leaves is 0 + 1 + 1 + 2 + 3 + 5 = 12. - For the third test case: The first 10 levels of the Fibonacci sequence produce leaves summing up to 143.","solution":"def fibonacci_tree_leaves_count(T, levels): # Precompute Fibonacci sequence up to F(50) fib = [0] * 51 fib[1] = 1 for i in range(2, 51): fib[i] = fib[i - 1] + fib[i - 2] # Precompute prefix sums of Fibonacci sequence prefix_sum = [0] * 51 for i in range(1, 51): prefix_sum[i] = prefix_sum[i - 1] + fib[i] # Find the total number of leaves for each level in levels results = [] for N in levels: results.append(prefix_sum[N]) return results"},{"question":"Matrix Spiral Traversal Matrix traversal problems have diverse applications in computer science. One common traversal pattern is the spiral order. Given an `m x n` matrix, return all elements of the matrix in spiral order, where you start from the top-left corner and proceed in a clockwise spiral manner until every element is visited. # Task Write a function `spiralOrder(matrix: List[List[int]]) -> List[int]` that takes an `m x n` matrix and returns a list of the matrix elements in spiral order. # Examples Example 1: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] spiralOrder(matrix) ``` Output: `[1, 2, 3, 6, 9, 8, 7, 4, 5]` Example 2: ```python matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ] spiralOrder(matrix) ``` Output: `[1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]` # Constraints - `m == len(matrix)` - `n == len(matrix[0])` - `1 <= m, n <= 10` - `-100 <= matrix[i][j] <= 100` # Note The function should efficiently handle up to the maximum constraint of `m` and `n`. It is expected to maintain a space complexity within the bounds imposed by the problem constraints.","solution":"from typing import List def spiralOrder(matrix: List[List[int]]) -> List[int]: Returns all elements of the matrix in spiral order. if not matrix: return [] result = [] while matrix: # Take the first row result += matrix.pop(0) # Take the last element of each remaining row if matrix and matrix[0]: for row in matrix: result.append(row.pop()) # Take the last row in reverse order if matrix: result += matrix.pop()[::-1] # Take the first element of each remaining row in reverse order if matrix and matrix[0]: for row in matrix[::-1]: result.append(row.pop(0)) return result"},{"question":"# Description Write a function that receives a string containing a mathematical expression, and returns the result of evaluating that expression. The function should support addition (+), subtraction (-), multiplication (*), and division (/) of integers. The input string will always be a valid expression and will not contain any spaces. Ensure that the solution handles operator precedence correctly. Example \\"3+5*2\\" -> 13","solution":"def evaluate_expression(expression): Evaluates a mathematical expression and returns the result. Args: expression (str): A string representing a mathematical expression. Returns: int: The result of the evaluation. # Define an internal function to evaluate expressions def eval_internal(expr): operators, operands = [], [] i, n = 0, len(expr) def apply_operator(): operator = operators.pop() right = operands.pop() left = operands.pop() if operator == \'+\': operands.append(left + right) elif operator == \'-\': operands.append(left - right) elif operator == \'*\': operands.append(left * right) elif operator == \'/\': operands.append(int(left / right)) # Use integer division while i < n: char = expression[i] if char.isdigit(): num = 0 while i < n and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 operands.append(num) continue elif char in \'+-*/\': while (operators and operators[-1] in \'*/\' and char in \'+-\') or (operators and operators[-1] in \'*/\' and char in \'*/\'): apply_operator() operators.append(char) i += 1 while operators: apply_operator() return operands[0] return eval_internal(expression)"},{"question":"Implement the MovingAverage class in a way that calculates a moving average of the last k values added. The class should support the following methods: - MovingAverage(int size) Initializes the object with the size of the moving window to hold the last \'k\' values. - double next(int val) Adds the integer val to the moving window and returns the current moving average of the last \'k\' values. If there are fewer than \'k\' values, return the average of all values received so far. Example: Input: [\\"MovingAverage\\", \\"next\\", \\"next\\", \\"next\\", \\"next\\"] [[3], [1], [10], [3], [5]] Output: [null, 1.0, 5.5, 4.66667, 6.0] Explanation: MovingAverage movingAverage = new MovingAverage(3); movingAverage.next(1); // A window containing [1]. The moving average is 1 / 1 = 1.0 movingAverage.next(10); // A window containing [1, 10]. The moving average is (1 + 10) / 2 = 5.5 movingAverage.next(3); // A window containing [1, 10, 3]. The moving average is (1 + 10 + 3) / 3 = 4.66667 movingAverage.next(5); // A window containing [10, 3, 5]. The moving average is (10 + 3 + 5) / 3 = 6.0 Constraints: - 1 <= size <= 1000 - -10^5 <= val <= 10^5 - At most 10^4 calls will be made to next.","solution":"from collections import deque class MovingAverage: def __init__(self, size: int): self.size = size self.window = deque() self.sum = 0 def next(self, val: int) -> float: if len(self.window) == self.size: self.sum -= self.window.popleft() self.window.append(val) self.sum += val return self.sum / len(self.window)"},{"question":"In a gaming tournament, there are several rounds and multiple players participating. Each player earns a certain number of points in each round based on their performance. At the end of the tournament, each player\'s total points are calculated, and they are ranked accordingly. Your task is to determine the number of rounds in which a given player managed to achieve the highest points in that round compared to all other players. If multiple players achieve the same highest points in a round, all these players are considered to have achieved the highest points for that round. # Input: - The first line contains an integer T – the number of test cases. - For each test case: - The first line contains two space-separated integers N and R – the number of players and the number of rounds, respectively. - The next N lines each contain R space-separated integers, where the j^{th} integer in the i^{th} line represents the points scored by the i^{th} player in the j^{th} round. # Output: - For each test case, output a single integer – the number of rounds in which the given player had the highest points. # Constraints: - 1 le T le 10 - 1 le N, R le 100 - 0 le points le 1000 # Example: Input: ``` 2 3 4 10 15 20 30 20 25 18 15 15 10 20 10 4 2 5 10 5 10 5 10 3 8 ``` Output: ``` 4 2 ``` # Explanation: Test case 1: - Player 1 scores over the rounds are: 10, 15, 20, 30. - Player 2 scores over the rounds are: 20, 25, 18, 15. - Player 3 scores over the rounds are: 15, 10, 20, 10. In round 1, the highest points are 20 by player 2 and 15 by others. In round 2, the highest points are 25 by player 2. In round 3, the highest points are shared between players 1 and 3. In round 4, the highest points are 30 by player 1. So player 1 achieves the highest points in 4 rounds. Test case 2: - All players have the same scores in round 1: 5, 5, 5, 3. - The highest points in round 1 are 5, shared by players 1, 2, and 3. - The highest points in round 2 are 10 by player 3. So player 1 achieves the highest points in 2 rounds.","solution":"def count_highest_score_rounds(T, test_cases): Determines the number of rounds in which a given player managed to achieve the highest points in that round compared to all other players. Parameters: - T: int - number of test cases - test_cases: list of tuples where each tuple contains: (N: int, R: int, scores: list of list of integers) Returns: - list of integers: number of rounds each player achieves the highest score results = [] for n, r, scores in test_cases: count = 0 for j in range(r): max_score = max(scores[i][j] for i in range(n)) for i in range(n): if scores[i][j] == max_score: count += 1 break results.append(count) return results"},{"question":"=====Function Descriptions===== A string is a sequence of characters enclosed within single or double quotes. When working with strings, one of the common operations is to determine whether a substring exists within a main string and count its occurrences. =====Example===== >>> main_string = \\"hello world\\" >>> substring = \\"l\\" >>> count_substring(main_string, substring) 3 >>> main_string = \\"abracadabra\\" >>> substring = \\"abra\\" >>> count_substring(main_string, substring) 2 >>> main_string = \\"Python programming is fun\\" >>> substring = \\"Python\\" >>> count_substring(main_string, substring) 1 =====Problem Statement===== Write a function called `count_substring(main_string, substring)` that takes two input strings. The function should return the number of times the substring appears in the main_string. =====Input Format===== - The function `count_substring(main_string, substring)` takes two string arguments: - `main_string`: A string in which we will be looking for the substring. - `substring`: A string that we need to find in the main_string. =====Constraints===== 1 ≤ len(main_string) ≤ 1000 1 ≤ len(substring) ≤ 100 =====Output Format===== Return an integer representing the number of times the substring is found within the main_string.","solution":"def count_substring(main_string, substring): Returns the number of times the substring is found within the main_string. return main_string.count(substring)"},{"question":"A company has a list of employees, each identified by a unique ID and a skill level. The company wants to form the largest possible team for a project, where the difference in skill level between the highest and lowest skilled employee in the team does not exceed K. Help the company determine the maximum number of employees that can form such a team. -----Input----- - The first line of the input contains a single integer T, the number of test cases. - Each test case starts with a line containing two integers N and K, the number of employees and the maximum allowable difference in skill level, respectively. - The next line contains N space-separated integers representing the skill levels of the employees. -----Output----- - For each test case, output a single line containing one integer - the size of the largest possible team. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 0 ≤ K ≤ 1000 - 1 ≤ Skill level ≤ 10^9 -----Example----- Input: 2 5 2 1 3 5 7 9 4 0 1 2 3 4 Output: 2 1 -----Explanation----- Example case 1. The largest team with the allowable skill level difference of 2 can be either {1, 3} or {3, 5} or {5, 7} or {7, 9}, each containing 2 employees. Example case 2. For K = 0, each team can only contain one employee, so the answer is 1.","solution":"def max_team_size(N, K, skills): Determines the size of the largest possible team with a skill level difference of at most K. skills.sort() max_size = 1 for i in range(N): for j in range(i, N): if skills[j] - skills[i] <= K: max_size = max(max_size, j - i + 1) else: break return max_size def process_input(T, cases): Processes multiple test cases and calls the max_team_size function for each case. Args: T: Number of test cases cases: List of tuples, each containing (N, K, skills) for a test case. Returns: List of results for each test case results = [] for N, K, skills in cases: results.append(max_team_size(N, K, skills)) return results"},{"question":"The city of Metropolis is planning a new transport system that includes a series of direct routes between hubs. The planning committee wants to know if there is a way to travel between two specific hubs without visiting any other hub more than once. They\'ve tasked you with determining if a path exists between pairs of hubs. You are given the number of hubs and a list of direct routes connecting these hubs. You are then provided with several queries, each asking if there\'s a path between one hub and another. Assume that the hubs are identified by unique integers. -----Input:----- - The first line contains two integers, N (the number of hubs) and R (the number of routes). - The next R lines each contain two integers, u and v, indicating a direct route between hub u and hub v. - The next line contains an integer Q, the number of queries. - The following Q lines each contain two integers, a and b, indicating the query to check if there is a path from hub a to hub b. -----Output:----- For each query, output \\"YES\\" if there is a path between hub a and hub b, and \\"NO\\" otherwise. -----Constraints----- - 1 leq N leq 10^5 - 1 leq R leq 2 times 10^5 - 1 leq Q leq 10^5 - 1 leq u, v, a, b leq N -----Sample Input:----- 5 4 1 2 2 3 3 4 4 5 3 1 5 2 4 1 3 -----Sample Output:----- YES YES YES","solution":"from collections import defaultdict, deque def can_travel_between_hubs(N, R, routes, Q, queries): # Create a graph using adjacency list graph = defaultdict(list) for u, v in routes: graph[u].append(v) graph[v].append(u) def bfs(start, goal): # Perform BFS to check if there\'s a path from start to goal visited = set() queue = deque([start]) while queue: hub = queue.popleft() if hub == goal: return True if hub not in visited: visited.add(hub) for neighbor in graph[hub]: if neighbor not in visited: queue.append(neighbor) return False # Answer each query results = [] for a, b in queries: if bfs(a, b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function to determine whether a given string is a valid palindrome after removing all non-alphanumeric characters and ignoring case differences. A palindrome is a string that reads the same backward as forward. Examples: is_palindrome(\\"A man, a plan, a canal, Panama!\\") => True is_palindrome(\\"race a car\\") => False Your function should ignore spaces, punctuation, and case differences while determining if the string is a palindrome. Consider the string conversion and pre-processing to handle the removal of non-alphanumeric characters and ensure case insensitivity appropriately.","solution":"def is_palindrome(s): Determines if the given string is a valid palindrome after removing all non-alphanumeric characters and ignoring case differences. # Convert string to lower case s = s.lower() # Filter out non-alphanumeric characters filtered_chars = [char for char in s if char.isalnum()] # Check if the filtered string is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Implement a function that takes a string as input and returns the longest substring without repeating characters. Example: ``` Input: \\"abcabcbb\\" Output: \\"abc\\" Input: \\"bbbbb\\" Output: \\"b\\" Input: \\"pwwkew\\" Output: \\"wke\\" ```","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. if not s: return \\"\\" start = 0 max_length = 0 max_substring = \\"\\" used_chars = {} for i in range(len(s)): if s[i] in used_chars and start <= used_chars[s[i]]: start = used_chars[s[i]] + 1 else: if i - start + 1 > max_length: max_length = i - start + 1 max_substring = s[start:i+1] used_chars[s[i]] = i return max_substring"},{"question":"This exercise involves constructing a small class that represents a simple bank account and performing unit tests on its methods. **The BankAccount class:** 1. The BankAccount class should have the following attributes: - `balance`: a private attribute that stores the account balance (initially set to 0). 2. The class should have the following methods: - `deposit(amount)`: Method that adds the given amount to the balance. - `withdraw(amount)`: Method that subtracts the given amount from the balance if sufficient funds are available. If the balance is insufficient, it raises a `ValueError` with the message \\"Insufficient funds\\". - `get_balance()`: Method that returns the current balance. # Requirements: - Implement the BankAccount class. - Implement unit tests using the Python `unittest` framework to test all methods of the BankAccount class. Each method should have at least two tests: one for a valid input and one for a boundary or exceptional condition. **Below is a template to help you get started:** ```python class BankAccount: def __init__(self): self.__balance = 0 def deposit(self, amount): Deposits the given amount to the account balance. self.__balance += amount def withdraw(self, amount): Withdraws the given amount from the account balance if sufficient funds are available. if amount > self.__balance: raise ValueError(\\"Insufficient funds\\") self.__balance -= amount def get_balance(self): Returns the current balance. return self.__balance import unittest class TestBankAccount(unittest.TestCase): def test_deposit_valid(self): account = BankAccount() account.deposit(100) self.assertEqual(account.get_balance(), 100) def test_withdraw_valid(self): account = BankAccount() account.deposit(100) account.withdraw(50) self.assertEqual(account.get_balance(), 50) def test_withdraw_insufficient_funds(self): account = BankAccount() account.deposit(50) with self.assertRaises(ValueError) as e: account.withdraw(100) self.assertEqual(str(e.exception), \\"Insufficient funds\\") def test_get_balance_initial(self): account = BankAccount() self.assertEqual(account.get_balance(), 0) def test_deposit_multiple(self): account = BankAccount() account.deposit(50) account.deposit(30) self.assertEqual(account.get_balance(), 80) # Add more tests as needed if __name__ == \'__main__\': unittest.main() ``` # Instructions: 1. Complete the implementation of the BankAccount class as described. 2. Ensure the provided unit tests cover all edge cases and add any additional tests if necessary. 3. Run the unit tests to verify your implementation. The expected output should indicate that all tests passed successfully.","solution":"class BankAccount: def __init__(self): self.__balance = 0 def deposit(self, amount): Deposits the given amount to the account balance. if amount < 0: raise ValueError(\\"Deposit amount must be positive\\") self.__balance += amount def withdraw(self, amount): Withdraws the given amount from the account balance if sufficient funds are available. if amount > self.__balance: raise ValueError(\\"Insufficient funds\\") if amount < 0: raise ValueError(\\"Withdraw amount must be positive\\") self.__balance -= amount def get_balance(self): Returns the current balance. return self.__balance"},{"question":"Give Janice a hand! She\'s trying to calculate the number of vowels in a text, but something\'s off with her function. Assist her in debugging her code to ensure it correctly counts all the vowels (a, e, i, o, u, both lowercase and uppercase) in a given input string.","solution":"def count_vowels(text): Returns the number of vowels in the given text. Vowels are a, e, i, o, u, both lowercase and uppercase. vowels = \\"aeiouAEIOU\\" return sum(1 for char in text if char in vowels)"},{"question":"Write a function that takes a string containing a sentence and returns the same sentence with each word reversed in order but keeping the words in their original positions. Example: ``` \\"Hello World\\" --> \\"olleH dlroW\\" \\"Python is fun\\" --> \\"nohtyP si nuf\\" ```","solution":"def reverse_words_in_sentence(sentence): Takes a string containing a sentence and returns the same sentence with each word reversed in order but keeping the words in their original positions. words = sentence.split() reversed_words = [\'\'.join(reversed(word)) for word in words] return \' \'.join(reversed_words)"},{"question":"Write a function that takes an array of integers and a target sum as inputs. The function should return the indices of the two numbers that add up to the target sum. If no such pair exists, return an empty array. You can assume that each input would have exactly one solution, and you may not use the same element twice. # Example ```python # Example 1: # Input: arr = [2, 7, 11, 15], target = 9 # Output: [0, 1] # Explanation: The numbers at indices 0 and 1 (2 + 7) add up to the target sum 9. # Example 2: # Input: arr = [3, 2, 4], target = 6 # Output: [1, 2] # Explanation: The numbers at indices 1 and 2 (2 + 4) add up to the target sum 6. # Example 3: # Input: arr = [3, 3], target = 6 # Output: [0, 1] # Explanation: The numbers at indices 0 and 1 (3 + 3) add up to the target sum 6. def find_indices(arr, target): # your code here pass ```","solution":"def find_indices(arr, target): Returns the indices of the two numbers that add up to the target sum. If no such pair exists, returns an empty array. seen = {} for i, number in enumerate(arr): complement = target - number if complement in seen: return [seen[complement], i] seen[number] = i return []"},{"question":"Given an array of integers and an integer target, return the number of distinct pairs (i, j) in the array such that the difference between the elements at index i and j is equal to the target. Note that (i, j) and (j, i) are considered the same pair, and i should not be equal to j. Example 1: Input: nums = [1, 5, 2, 2, 3, 1], target = 2 Output: 2 Explanation: The pairs with difference equal to 2 are (1, 3) and (5, 3). Example 2: Input: nums = [1, 3, 1, 5, 4], target = 0 Output: 1 Explanation: The pair with difference equal to 0 is (1, 1). Note: 1 <= nums.length <= 20000 -10000 <= nums[i] <= 10000 0 <= target <= 10000","solution":"def count_pairs_with_difference(nums, target): Returns the number of distinct pairs (i, j) such that the difference between elements at index i and j is equal to the target, with i != j. # Use a set to keep track of numbers seen so far seen = set() pairs = set() for num in nums: if num + target in seen: pairs.add((min(num, num + target), max(num, num + target))) if num - target in seen: pairs.add((min(num, num - target), max(num, num - target))) seen.add(num) return len(pairs)"},{"question":"In a faraway land, there are magical sequences called Tribonacci numbers, which work similarly to the famous Fibonacci sequence but add the last three numbers to get the next one. The sequence starts with 0, 1, 1. Thus, the first few elements of the sequence are: 0, 1, 1, 2, 4, 7, 13, 24, and so on. Given an integer N, your task is to find the N-th Tribonacci number (0-indexed). Input: - A single line containing an integer N (0 ≤ N ≤ 35). Output: - A single integer which is the N-th Tribonacci number. Sample Input: 6 Sample Output: 13 Explanation: The 6th Tribonacci number in the sequence starting from 0 is 13 (the sequence until the 6th number is 0, 1, 1, 2, 4, 7, 13).","solution":"def tribonacci(n): Returns the N-th Tribonacci number (0-indexed). The sequence starts as 0, 1, 1, and each subsequent number is the sum of the last three numbers. if n == 0: return 0 elif n == 1 or n == 2: return 1 t0, t1, t2 = 0, 1, 1 for i in range(3, n + 1): t_next = t0 + t1 + t2 t0, t1, t2 = t1, t2, t_next return t_next"},{"question":"There are M cities in a kingdom, connected by a network of N bidirectional roads. Each road has a certain traveling cost associated with it. The roads are described by three arrays U, V, and W, each of length N, where U[i] and V[i] denote the cities connected by the i^{th} road, and W[i] denotes the traveling cost of that road. A traveler in this kingdom wants to travel from city 1 to city M. However, the traveler can only use roads where the traveling cost is greater than or equal to a certain threshold C. Your task is to determine the minimum threshold C such that it is possible to travel from city 1 to city M. If no such threshold exists, output -1. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - For each test case, the first line contains two space-separated integers M and N. - The next N lines each contain three space-separated integers U[i], V[i], and W[i]. -----Output:----- For each test case, output the minimum threshold C or -1 if no valid path exists. -----Constraints----- - 1 leq T leq 100 - 2 leq M leq 10^3 - 1 leq N leq 10^4 - 1 leq U[i], V[i] leq M - 1 leq W[i] leq 10^6 -----Sample Input:----- 1 4 5 1 2 5 2 3 6 3 4 2 1 3 8 2 4 7 -----Sample Output:----- 6 -----EXPLANATION:----- In this case, the minimum threshold C is 6, as the valid path is 1 → 2 → 4 with road costs 5 and 7. The path 1 → 2 → 3 → 4 with road costs 5, 6, and 2 does not satisfy threshold C.","solution":"def find_min_threshold(t, test_cases): from heapq import heappop, heappush def dijkstra_max_min(n, adj, src, dest): heap = [(-float(\'inf\'), src)] visited = [False] * (n + 1) max_min_cost = [-float(\'inf\')] * (n + 1) max_min_cost[src] = float(\'inf\') while heap: min_val, node = heappop(heap) min_val = -min_val if visited[node]: continue visited[node] = True for neigh, cost in adj[node]: new_cost = min(min_val, cost) if new_cost > max_min_cost[neigh]: max_min_cost[neigh] = new_cost heappush(heap, (-new_cost, neigh)) return max_min_cost[dest] if max_min_cost[dest] != -float(\'inf\') else -1 results = [] for M, N, edges in test_cases: adj = [[] for _ in range(M + 1)] for u, v, w in edges: adj[u].append((v, w)) adj[v].append((u, w)) min_threshold = dijkstra_max_min(M, adj, 1, M) results.append(min_threshold) return results # Input parsing function def parse_input(input_string): lines = input_string.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): M, N = map(int, lines[index].split()) index += 1 edges = [] for _ in range(N): u, v, w = map(int, lines[index].split()) index += 1 edges.append((u, v, w)) test_cases.append((M, N, edges)) return T, test_cases # Example usage input_string = \\"1n4 5n1 2 5n2 3 6n3 4 2n1 3 8n2 4 7n\\" T, test_cases = parse_input(input_string) output = find_min_threshold(T, test_cases) for result in output: print(result)"},{"question":"Description Alex loves palindromes so much that he desires every word he writes to be one. Given a string of alphanumeric characters and spaces, help Alex by writing a function that converts each word into a palindrome. If a word is already a palindrome, leave it unchanged. A word is a palindrome if it reads the same backward as forward. Words will be separated by single spaces and the string will not contain any punctuation other than spaces. The solution should return the modified string with each word being a palindrome. NOTE: The input string will be given in lowercase and will not contain any uppercase characters. eg: ``` \\"madam racecar hello world\\" --> \\"madam racecar helloolleh worlddlrow\\" \\"refer radar level noon\\" --> \\"refer radar level noon\\" ``` Good luck!","solution":"def make_palindrome(s): Given a string of alphanumeric characters and spaces, converts each word into a palindrome. A word is a palindrome if it reads the same backward as forward. Words will be separated by single spaces and the string will not contain any punctuation other than spaces. def make_word_palindrome(word): return word if word == word[::-1] else word + word[::-1] words = s.split() palindrome_words = [make_word_palindrome(word) for word in words] return \' \'.join(palindrome_words)"},{"question":"=====Problem Statement===== Given a string containing some words and uppercase/lowercase letters, check if it contains all the letters of the English alphabet at least once. If yes, print \\"pangram\\". Otherwise, print \\"not pangram\\". =====Example===== s = \\"We promptly judged antique ivory buckles for the next prize\\" The sentence contains all the letters in the English alphabet, thus it is a pangram and should be printed as: pangram s = \\"The quick brown fox jumps over the lazy dog\\" This sentence also contains all the letters in the English alphabet. It should be printed as: pangram s = \\"Hello world\\" This sentence does not contain all the letters in the English alphabet, thus it is not a pangram and should be printed as: not pangram =====Input Format===== A single line containing the string s. =====Constraints===== Length of s can be at most 10^3 and it will contain spaces, uppercase and lowercase letters. =====Output Format===== Print \\"pangram\\" if the input string contains all the letters of the English alphabet at least once. Otherwise, print \\"not pangram\\".","solution":"def check_pangram(s): Checks if the input string s contains all the letters of the English alphabet at least once. Prints \\"pangram\\" if true, otherwise prints \\"not pangram\\". # Create a set of all lowercase alphabet characters alphabet_set = set(\'abcdefghijklmnopqrstuvwxyz\') # Create a set of all unique characters in the input string, converted to lowercase input_set = set(s.lower()) # Check if all alphabet characters are in the input set if alphabet_set.issubset(input_set): return \\"pangram\\" else: return \\"not pangram\\""},{"question":"Implement a function that receives a list of non-negative integers and an integer `n`, and returns a list of the factorial of each integer from the input list that is less than or equal to `n`. If no integers are less than or equal to `n`, return an empty list. ```python def factorial_list(numbers, n): Given a list of non-negative integers and an integer n, return a list of the factorials of all integers in the list that are less than or equal to n. Args: numbers (list of int): List of non-negative integers. n (int): A non-negative integer limit. Returns: list of int: List of factorials of the integers less than or equal to n. pass # Examples print(factorial_list([1, 3, 5, 7], 5)) # [1, 6, 120] print(factorial_list([0, 2, 4, 8], 4)) # [1, 2, 24] print(factorial_list([6, 7, 8, 9], 5)) # [] ``` The implementation should handle edge cases gracefully, and integers in the list may appear in any order.","solution":"import math def factorial_list(numbers, n): Given a list of non-negative integers and an integer n, return a list of the factorials of all integers in the list that are less than or equal to n. Args: numbers (list of int): List of non-negative integers. n (int): A non-negative integer limit. Returns: list of int: List of factorials of the integers less than or equal to n. return [math.factorial(number) for number in numbers if number <= n]"},{"question":"Chef is participating in a coding challenge where he needs to work with strings. The problem statement requires Chef to determine whether a given string is a palindrome. A string is considered a palindrome if it reads the same forward and backward. -----Input:----- - The input will be a single string S. -----Output:----- For each testcase, output in a single line \\"YES\\" if the string is a palindrome, otherwise output \\"NO\\". -----Constraints----- - The string length will be between 1 and 100 characters. - The string will consist of lowercase English letters only. -----Sample Input:----- madam -----Sample Output:----- YES","solution":"def is_palindrome(s): Returns \'YES\' if the string s is a palindrome, otherwise returns \'NO\'. if s == s[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Write a function that takes a list of integers and returns the product of all the integers. If the list contains a zero, the function should return zero immediately without processing further. For example: ``` [1, 2, 3, 4] ==> 24 [1, 2, 0, 4] ==> 0 ```","solution":"def product_of_list(lst): Returns the product of all integers in the list. If the list contains a zero, returns zero immediately. product = 1 for num in lst: if num == 0: return 0 product *= num return product"},{"question":"You are organizing a contest where participants need to arrange given words into a meaningful phrase. You want to assess their ability to spot anagram relationships between the words. To check this, you decide to create a program that counts how many pairs of anagrams exist in a given set of words. An anagram is a word formed by rearranging the characters of another word, using all the original characters exactly once. -----Input----- - The first line contains an integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N, denoting the number of words. - The second line contains N space-separated words. -----Output----- - For each test case, output a single line containing the number of anagram pairs that can be formed from the given words. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 1000 - 1 ≤ length of each word ≤ 100 - All words consist of lowercase English letters only. -----Example----- Input: 2 4 listen silent enlist inlets 3 cat act tac Output: 6 3","solution":"from collections import defaultdict def count_anagram_pairs(T, test_cases): Counts the number of anagram pairs for each test case. Parameters: - T: the number of test cases - test_cases: a list of tuples where each tuple contains: - an integer N: the number of words - a list of N words Returns: A list of integers where each integer is the number of anagram pairs in the corresponding test case. results = [] for i in range(T): N, words = test_cases[i] anagram_dict = defaultdict(int) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_dict[\'\'.join(sorted_word)] += 1 # Count pairs pairs = 0 for count in anagram_dict.values(): if count > 1: pairs += count * (count - 1) // 2 results.append(pairs) return results"},{"question":"David has recently learned about prime numbers and their interesting properties. He wants to find two prime numbers whose sum equals a given even number N, where N is greater than 2. This problem is known as the \\"Goldbach Conjecture.\\" Given an even number N (greater than 2), find two prime numbers p1 and p2 such that p1 + p2 = N. If multiple pairs are possible, return the pair with the smallest p1. If there is no such pair, return -1. -----Input----- The first line of input contains an integer T denoting the number of test cases. T test cases follow. For each test case, there is a single line containing an even integer N. -----Output----- For each test case, print the two prime numbers p1 and p2 if such a pair exists, otherwise print -1. The prime numbers should be printed in non-decreasing order. -----Constraints----- - 1 ≤ T ≤ 105 - 4 ≤ N ≤ 10^6 -----Example----- Input: 3 4 10 26 Output: 2 2 3 7 3 23","solution":"def sieve_of_eratosthenes(max_n): Generate a list of prime numbers up to max_n using the Sieve of Eratosthenes. is_prime = [True] * (max_n + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers for start in range(2, int(max_n**0.5) + 1): if is_prime[start]: for i in range(start*start, max_n + 1, start): is_prime[i] = False primes = [num for num, prime in enumerate(is_prime) if prime] return primes, is_prime def goldbach_conjecture(N): Find two prime numbers such that their sum equals to N. primes, is_prime = sieve_of_eratosthenes(N) for p1 in primes: p2 = N - p1 if p2 >= p1 and is_prime[p2]: return p1, p2 return -1 def solve_goldbach(T, test_cases): Process multiple test cases to solve the Goldbach Conjecture problem. results = [] for N in test_cases: result = goldbach_conjecture(N) if isinstance(result, tuple): results.append(f\\"{result[0]} {result[1]}\\") else: results.append(f\\"{result}\\") return results"},{"question":"A company is developing a new software application that allows users to tag and categorize their files on their computers systematically. Each file can be categorized based on its file extension using a predefined set of categories. You are to write a program to accomplish this. The program should read a list of file tags that associate a specific file extension with a certain category. You will then be given a number of file names, and have to determine and output the respective category for each file based on its extension. A file extension is defined as the substring that follows the final period in the file name. If a file name has no periods, then it has no extension, and the category cannot be determined. If the file extension is not present in the list of file tags, then the category cannot be determined. In such cases, print \\"uncategorized\\". Each file extension and category in the list are case-sensitive. If the file extension matches one in the list of file tags, print the associated category. -----Input----- The input begins with two integers N and M on a single line. N is the number of file tag associations, and M is the number of file names. Following this are N lines, each containing a file extension and a category, separated by a space. Afterwards, M lines each contain the name of a file. N and M will both be no greater than 100 each. File extensions will be composed of alphanumeric characters, with a maximum length of 10, and will be unique. Categories will be strings composed of alphanumeric characters and punctuation marks and have a maximum length of 50. File names will be composed of alphanumeric characters and periods and have a maximum length of 50. -----Output----- For each file name, print the corresponding category based on its extension. If there is no corresponding category, print \\"uncategorized\\". -----Sample Input----- 4 5 doc document jpg image xlsx spreadsheet py script report.doc holiday.jpg data.xlsx script.py notes.md -----Sample Output----- document image spreadsheet script uncategorized","solution":"def categorize_files(file_tags, file_names): file_tag_dict = {ext: cat for ext, cat in file_tags} result = [] for file in file_names: if \'.\' in file: ext = file.split(\'.\')[-1] if ext in file_tag_dict: result.append(file_tag_dict[ext]) else: result.append(\\"uncategorized\\") else: result.append(\\"uncategorized\\") return result"},{"question":"You are given a list of integers and a target number. Your task is to determine if any two numbers in the list add up to the target number. If such a pair exists, return the indices of the two numbers in the form of a tuple. If no such pair exists, return `(-1, -1)`. Assume that there is exactly one solution, and you cannot use the same element twice. **Examples** ```python find_pair([2, 7, 11, 15], 9) # returns (0, 1) because 2 + 7 = 9 find_pair([3, 2, 4], 6) # returns (1, 2) because 2 + 4 = 6 find_pair([3, 3], 6) # returns (0, 1) because 3 + 3 = 6 find_pair([1, 2, 3, 4], 8) # returns (-1, -1) because no pair adds up to 8 ``` **Input** - A list of integers `nums` (0 <= len(nums) <= 10^5) - An integer `target` (-10^9 <= target <= 10^9) **Output** - A tuple of two indices `(i, j)` where `nums[i] + nums[j] == target` (i < j), or `(-1, -1)` if no such pair exists. **Constraints** - The input list contains only integers. - Each input will have exactly one correct answer, except when specified otherwise where the result should be `(-1, -1)`.","solution":"def find_pair(nums, target): This function returns the indices of the two numbers such that they add up to the target. If no such pair exists, it returns (-1, -1). num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return (num_map[complement], i) num_map[num] = i return (-1, -1)"},{"question":"In the Kingdom of Strings, there exists an ancient library containing valuable manuscripts. Each manuscript is a string consisting of lowercase alphabets only. The librarian, known as the Keeper of Manuscripts, wants to assess the rarity of certain patterns in these strings. You have been tasked to help the Keeper by finding the number of times a specific pattern (substring) appears in the given manuscripts. You are required to process multiple queries where each query consists of a pattern and a specific manuscript. ----Input:---- - The first line of the input contains a single integer T, the number of test cases. The description of T test cases follows. - For each test case, the first line contains an integer N, the number of manuscripts. - The next N lines each contain a manuscript string. - The next line contains an integer Q, the number of queries for the current test case. - The next Q lines contain two elements: a string P (the pattern) and an integer M (the index of the manuscript, 1-based index). ----Output:----- - For each query, print the number of times the pattern P appears in the M-th manuscript. ----Constraints:----- - 1 leq T leq 50 - 1 leq N leq 100 - 1 leq text{length of any manuscript} leq 1000 - 1 leq Q leq 200 - 1 leq text{length of P} leq 100 - Manuscripts consist of lowercase alphabets only ----Sample Input:----- 1 2 abcabcpqr bcabcabc 3 abc 1 bc 2 pqr 1 ----Sample Output:----- 2 3 1 ----Explanation:---- In the first test case: 1. The pattern \\"abc\\" appears twice in the first manuscript (\\"abcabcpqr\\"). 2. The pattern \\"bc\\" appears three times in the second manuscript (\\"bcabcabc\\"). 3. The pattern \\"pqr\\" appears once in the first manuscript (\\"abcabcpqr\\").","solution":"def pattern_count_in_manuscripts(T, test_cases): results = [] for case in test_cases: N, manuscripts, Q, queries = case for pattern, index in queries: manuscript = manuscripts[index-1] count = 0 k = len(pattern) for i in range(len(manuscript) - k + 1): if manuscript[i:i+k] == pattern: count += 1 results.append(count) return results # Example usage: T = 1 test_cases = [ (2, [\\"abcabcpqr\\", \\"bcabcabc\\"], 3, [(\\"abc\\", 1), (\\"bc\\", 2), (\\"pqr\\", 1)]) ] print(pattern_count_in_manuscripts(T, test_cases)) # Expected output: [2, 3, 1]"},{"question":"You are given two arrays of integers `nums1` and `nums2` sorted in non-decreasing order, and two integers m and n, representing the number of elements in `nums1` and `nums2` respectively. Merge `nums1` and `nums2` into a single array sorted in non-decreasing order. Example: Input: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Explanation: The merged array should have all the elements of both arrays and be sorted in non-decreasing order. The first three positions of `nums1` should have the merged result, such that after merging it looks like [1,2,2,3,5,6]. Note: - The final array should be stored inside `nums1` with no extra space.","solution":"def merge(nums1, m, nums2, n): Merges two sorted integer arrays nums1 and nums2 into a single array sorted in non-decreasing order. The merged array should be stored in nums1 starting from the first position. Args: nums1 (list): The first list of integers with at least m+n length. m (int): Number of elements initialized in nums1. nums2 (list): The second list of integers. n (int): Number of elements in nums2. Returns: None: The merging is done in-place in nums1. # Last index of nums1 last = m + n - 1 # Merge in reverse order while m > 0 and n > 0: if nums1[m - 1] > nums2[n - 1]: nums1[last] = nums1[m - 1] m -= 1 else: nums1[last] = nums2[n - 1] n -= 1 last -= 1 # Fill nums1 with remaining elements of nums2 if any while n > 0: nums1[last] = nums2[n - 1] n -= 1 last -= 1"},{"question":"A coding marathon organized by a company asks participants to calculate the number of valid passwords based on a set of rules. A valid password is defined as a string that contains at least one digit and one special character. For the sake of this problem, special characters are defined as one of these: `@`, `#`, ``, `%`, `&`, `*`. -----Input----- The first line of the input contains a single integer T, the number of test cases. Each of the next T lines contains a string, the string P representing a password for the corresponding test case. -----Output----- For each test case, output \\"Valid\\" if the password is valid according to the rules, otherwise output \\"Invalid\\". -----Constraints----- 1 ≤ T ≤ 10 1 ≤ |P| ≤ 100000 P consists of alphanumeric characters and special characters from the set `@`, `#`, ``, `%`, `&`, `*`. -----Example----- Input: 4 p@ssw0rd hello123 secure#20 aB1& Output: Valid Invalid Valid Valid -----Explanation----- In the first test case \\"p@ssw0rd\\" contains both a digit (0) and a special character (@), so it is valid. In the second test case \\"hello123\\", there is no special character, so it is invalid. In the third test case \\"secure#20\\", it contains both a digit (2) and a special character (#), so it is valid. In the fourth test case \\"aB1&\\", it contains both a digit (1) and a special character (&), so it is valid.","solution":"def validate_passwords(T, passwords): Returns a list of validation results for each password in the format \\"Valid\\" or \\"Invalid\\" Parameters: T (int): Number of test cases passwords (list of str): List of passwords to be validated Returns: list of str: List containing \\"Valid\\" or \\"Invalid\\" for each password special_characters = {\'@\', \'#\', \'\', \'%\', \'&\', \'*\'} results = [] for password in passwords: has_digit = any(char.isdigit() for char in password) has_special_char = any(char in special_characters for char in password) if has_digit and has_special_char: results.append(\\"Valid\\") else: results.append(\\"Invalid\\") return results"},{"question":"# String Compression In this problem, you are required to implement a basic string compression algorithm. The idea is to compress the string such that consecutive repeated characters are substituted with a single character followed by its count. For instance, the string \\"aabcccccaaa\\" would become \\"a2b1c5a3\\". If the \\"compressed\\" string is not smaller than the original string, your function should return the original string. You should assume the string has only uppercase and lowercase letters (a – z). **Task** Write a function `compress_string` that receives a string and returns the compressed version of the string or the original if the compressed version is not shorter. **Input/Output** The input is a single string of lowercase and uppercase characters. The output is either a compressed string or the original string based on the above specification. **Example** ```python def compress_string(input_str: str) -> str: # Your implementation here # Example 1 input_str = \\"aabcccccaaa\\" print(compress_string(input_str)) # Output: \\"a2b1c5a3\\" # Example 2 input_str = \\"abcdef\\" print(compress_string(input_str)) # Output: \\"abcdef\\" # Example 3 input_str = \\"aaabbccaaa\\" print(compress_string(input_str)) # Output: \\"a3b2c2a3\\" ```","solution":"def compress_string(input_str: str) -> str: if not input_str: return input_str compressed = [] count = 1 for i in range(1, len(input_str)): if input_str[i] == input_str[i - 1]: count += 1 else: compressed.append(input_str[i - 1] + str(count)) count = 1 compressed.append(input_str[-1] + str(count)) compressed_str = \\"\\".join(compressed) return compressed_str if len(compressed_str) < len(input_str) else input_str"},{"question":"# Task **_Given_** a **_list of integers_**, **_return_** a **_new list_** where each element is the **_product of all the other elements except the one at that index_**. ____ # Notes: - You are required to implement this function **without** using division - The input list will have at least two elements # Input >> Output Examples: ```python product_of_others([1, 2, 3, 4]) ==> return [24, 12, 8, 6] ``` **Explanation**: * **_The product_** of all elements **except the one at index 0** (1) is 2 * 3 * 4 = 24 * **_The product_** of all elements **except the one at index 1** (2) is 1 * 3 * 4 = 12 * **_The product_** of all elements **except the one at index 2** (3) is 1 * 2 * 4 = 8 * **_The product_** of all elements **except the one at index 3** (4) is 1 * 2 * 3 = 6 ```python product_of_others([2, 5, 3]) ==> return [15, 6, 10] ``` **Explanation**: * **_The product_** of all elements **except the one at index 0** (2) is 5 * 3 = 15 * **_The product_** of all elements **except the one at index 1** (5) is 2 * 3 = 6 * **_The product_** of all elements **except the one at index 2** (3) is 2 * 5 = 10 ```python product_of_others([1, 1, 1]) ==> return [1, 1, 1] ``` **Explanation**: * **_The product_** of all elements **except the one at index 0** (1) is 1 * 1 = 1 * **_The product_** of all elements **except the one at index 1** (1) is 1 * 1 = 1 * **_The product_** of all elements **except the one at index 2** (1) is 1 * 1 = 1","solution":"def product_of_others(lst): Returns a new list where each element is the product of all other elements except the one at that index. n = len(lst) if n == 0: return [] # Initialize the result list result = [1] * n # Left product computation left_product = 1 for i in range(n): result[i] = left_product left_product *= lst[i] # Right product computation right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= lst[i] return result"},{"question":"-----Problem description.----- Your task is to determine whether a given number is a palindrome. A palindrome is a number that remains the same when its digits are reversed. For instance, the number 121 is a palindrome while the number 123 is not. -----Input----- - The first line of each test case contains an integer T. - The next T lines each contain a distinct integer N. -----Output----- - Output should contain T lines, each line with either \\"YES\\" if the number is a palindrome or \\"NO\\" if it is not. -----Constraints----- - 1 ≤ T ≤ 105 - 1 ≤ N ≤ 1018 Subtask 1: N ≤ 105 Subtask 2: N ≤ 109 Subtask 3: N ≤ 1018 -----Example----- Input: 4 121 123 55555 1001 Output: YES NO YES YES -----Explanation----- 121 reversed is 121, so it\'s a palindrome 123 reversed is 321, so it\'s not a palindrome 55555 reversed is 55555, so it\'s a palindrome 1001 reversed is 1001, so it\'s a palindrome","solution":"def is_palindrome(n): Returns \'YES\' if the number n is a palindrome, \'NO\' otherwise. str_n = str(n) if str_n == str_n[::-1]: return \\"YES\\" else: return \\"NO\\" def solve_palindromes(T, numbers): Returns a list of \'YES\' or \'NO\' for each number in numbers based on whether it is a palindrome. return [is_palindrome(num) for num in numbers]"},{"question":"Farmer John has a magical farm with N plots (numbered 1 through N), where he grows two types of crops: carrots and cabbages. Each plot can either have carrots, cabbages, or be empty. However, due to the magical nature of the farm, every time a plot is harvested, the crops in the neighboring plots influence each other. Specifically, when a plot is harvested, it affects the crop status of the nearest plot to its left and the nearest plot to its right, unless those plots are already empty. You are given a string P of length N where each character represents the state of a plot: - \'C\' indicating a plot with carrots, - \'B\' indicating a plot with cabbages, - \'E\' indicating an empty plot. Your task is to determine the minimum number of plots that need to be harvested such that the entire farm ends up with all plots empty. --Input-- - The first line of the input contains an integer T, the number of test cases. - The first line of each test case contains an integer N. - The second line of each test case contains a string P representing the plots. --Output-- For each test case, print a single line containing one integer — the minimum number of plots that need to be harvested. --Constraints-- - 1 le T le 100 - 1 le N le 1,000 - P contains only characters \'C\', \'B\', and \'E\' --Example Input-- 2 5 CBCCE 6 CCCCCC --Example Output-- 2 2 --Explanation-- Example case 1: Harvesting the plot at index 2 and 4 will be enough to make all plots empty. Example case 2: Harvesting the plot at index 3 and 5 will empty all plots.","solution":"def minimum_harvests_to_empty(N, P): Given a farm state P, determine the minimum number of plots that need to be harvested such that the entire farm ends up with all plots empty. harvests = 0 i = 0 while i < N: if P[i] != \'E\': harvests += 1 i += 3 # Skip the current and the next two plots, since harvesting affects neighbors else: i += 1 return harvests def process_test_cases(T, test_cases): results = [] for N, P in test_cases: results.append(minimum_harvests_to_empty(N, P)) return results"},{"question":"Tom is organizing a coding contest in his school, and he has come up with an interesting problem for the participants. The problem involves finding special pairs in an array of integers. A special pair (i, j) is defined such that `i < j` and `arr[i] + arr[j]` equals a given integer `k`. Your task is to write a function that takes an array of integers and an integer `k`, and returns the total number of special pairs in the array. # Example ```python Input: arr = [1, 5, 7, -1, 5], k = 6 Output: 3 Explanation: The special pairs are: (0, 2) -> 1 + 5 = 6 (1, 3) -> 5 + 1 = 6 (1, 4) -> 5 + 1 = 6 ``` # Function signature ```python def count_special_pairs(arr: List[int], k: int) -> int: pass ``` # Constraints - The length of the array should be between 1 and 10^4. - Each element in the array should be an integer between -10^5 and 10^5. - The given integer `k` should be an integer between -10^5 and 10^5.","solution":"from typing import List def count_special_pairs(arr: List[int], k: int) -> int: This function counts the number of special pairs (i, j) in the array such that i < j and arr[i] + arr[j] equals k. count = 0 seen = {} for i, num in enumerate(arr): if k - num in seen: count += seen[k - num] if num in seen: seen[num] += 1 else: seen[num] = 1 return count"},{"question":"Design a function that takes in a string and returns the word in the string with the highest occurrence of a particular letter. If multiple words have the same highest occurrence of that letter, return the first such word. If the string is empty or the letter does not appear in any word, return an empty string. # Example: ```python highest_occurrence(\\"hello world\\", \\"l\\") # should return \\"hello\\" because it contains 2 \'l\'s while \\"world\\" only contains 1 \'l\' highest_occurrence(\\"test the function\\", \\"t\\") # should return \\"test\\" because both \\"test\\" and \\"the\\" contain 2 \'t\'s but \\"test\\" appears first highest_occurrence(\\"functional programming\\", \\"g\\") # should return \\"programming\\" because it contains 2 \'g\'s while \\"functional\\" contains 1 \'g\' highest_occurrence(\\"\\", \\"a\\") # should return \\"\\" because the string is empty ``` # Constraints: - The input string will only contain lowercase English letters and spaces. - The letter to be checked is guaranteed to be a single lowercase English letter. **Function Signature:** ```python def highest_occurrence(input_str: str, letter: str) -> str: pass ```","solution":"def highest_occurrence(input_str: str, letter: str) -> str: words = input_str.split() max_count = 0 result_word = \\"\\" for word in words: count = word.count(letter) if count > max_count: max_count = count result_word = word return result_word"},{"question":"Create a function that checks whether a given string is a valid IPv4 address. An IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots (\'.\'). Some examples of valid IPv4 addresses are: ``` 192.168.1.1 255.255.255.255 0.0.0.0 10.0.0.1 ``` Invalid IPv4 addresses include: ``` 256.256.256.256 192.168.1 192.168.1.1.1 192.168.01.1 192.168.1.-1 123.456.78.090 ``` Write a function `is_valid_ipv4_address(ip_address: str)` that takes a string and returns `True` if the string is a valid IPv4 address, and `False` otherwise. **Constraints:** - The input string will be non-empty. - The input string will only contain characters that are printable ASCII characters.","solution":"def is_valid_ipv4_address(ip_address): Checks if the given string is a valid IPv4 address. An IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots (\'.\'). Parameters: ip_address (str): The IP address to validate. Returns: bool: True if the given string is a valid IPv4 address, False otherwise. parts = ip_address.split(\\".\\") # There must be exactly 4 parts if len(parts) != 4: return False for part in parts: # Each part must be a number if not part.isdigit(): return False num = int(part) # Each number must be between 0 and 255 if num < 0 or num > 255: return False # No leading zeros allowed (except for the number \\"0\\" itself) if part != \'0\' and part[0] == \'0\': return False return True"},{"question":"Implement a function `diamond_shape(n)` where `n` is a positive integer denoting the number of lines in the widest part of the diamond (the middle line). The diamond shape should be built using asterisks (`*`), with each line separated by a newline (`n`). For `n = 3`, the diamond should be: ``` * *** ***** *** * ``` For `n = 4`, the diamond should be: ``` * *** ***** ******* ***** *** * ``` Function Signature: ```python def diamond_shape(n: int) -> str: ``` The function should construct the diamond for any positive integer `n` and return it as a string, with each line correctly formatted and the lines separated by a newline character. Remember to handle the spacing correctly to ensure the diamond shape is properly aligned. Note: - `n` is always a positive integer greater than 0. - No need to handle invalid input. Example: ```python print(diamond_shape(3)) # Output: # * # *** # ***** # *** # * print(diamond_shape(4)) # Output: # * # *** # ***** # ******* # ***** # *** # * ```","solution":"def diamond_shape(n: int) -> str: Construct a diamond shape of asterisks. :param n: The number of lines in the widest part of the diamond (the middle line) :return: A string representation of the diamond lines = [] for i in range(n): spaces = n - i - 1 stars = 2 * i + 1 lines.append(\' \' * spaces + \'*\' * stars) for i in range(n - 2, -1, -1): spaces = n - i - 1 stars = 2 * i + 1 lines.append(\' \' * spaces + \'*\' * stars) return \'n\'.join(lines)"},{"question":"You are given a 2D grid with M rows and N columns consisting of integers. The player can move from any cell to another cell in four possible directions: up, down, left, or right, but only if the destination cell has a value equal to or greater than the value of the current cell. From each cell, you can perform two types of queries: - Type 1: Update the value of the cell at (i_q, j_q) to val_q. - Type 2: Find the maximum possible value reachable from the cell located at (i_q, j_q) without revisiting any cell. **Constraints:** - M and N are integers. - grid is a 2D list of integers. - i_q and j_q are integers representing the row and column of a cell in the grid. - val_q is an integer. - 1 ≤ M, N ≤ 500 - 1 ≤ Q ≤ 10000 - -10^9 ≤ grid[i][j], val_q ≤ 10^9 - 1 ≤ i_q ≤ M - 1 ≤ j_q ≤ N - Each test case contains at least one query of type 2. **Input:** Input is given from Standard Input in the following format: ``` M N grid[1][1] grid[1][2] ... grid[1][N] grid[2][1] grid[2][2] ... grid[2][N] ... grid[M][1] grid[M][2] ... grid[M][N] Q Query_1 ... Query_Q ``` Here, Query_i in the (M+2)-th through (M+Q+1)-th lines is one of the following: ``` 1 i_q j_q val_q 2 i_q j_q ``` **Output:** For each query of type 2, print a line containing the answer. **Sample Input:** ``` 3 3 1 2 3 6 5 4 7 8 9 4 2 1 1 1 2 2 10 2 2 2 2 3 3 ``` **Sample Output:** ``` 9 10 9 ``` In the first query, starting from cell (1,1) with value 1, the maximum reachable cell has value 9 following the path 1 -> 2 -> 5 -> 8 -> 9. In the second query, the value at cell (2,2) is updated to 10. In the third query, starting from cell (2,2) with value 10, the maximum reachable cell is itself with value 10. In the fourth query, starting from cell (3,3) with value 9, the maximum reachable cell is itself with value 9.","solution":"def process_queries(M, N, grid, queries): def bfs_max_value(i, j): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * N for _ in range(M)] max_value = grid[i][j] queue = deque([(i, j)]) visited[i][j] = True while queue: cur_i, cur_j = queue.popleft() for di, dj in directions: ni, nj = cur_i + di, cur_j + dj if 0 <= ni < M and 0 <= nj < N and not visited[ni][nj] and grid[ni][nj] >= grid[cur_i][cur_j]: visited[ni][nj] = True max_value = max(max_value, grid[ni][nj]) queue.append((ni, nj)) return max_value results = [] for query in queries: if query[0] == 1: _, i_q, j_q, val_q = query grid[i_q - 1][j_q - 1] = val_q elif query[0] == 2: _, i_q, j_q = query results.append(bfs_max_value(i_q - 1, j_q - 1)) return results"},{"question":"Given an array of positive integers where each integer represents the height of a tree in meters, you need to find the maximum possible height of a new tree that can be planted. The rules for planting the new tree are as follows: - The new tree must be planted at any position (between two trees or at the beginning/end of the array). - The height of the new tree must be less than or equal to the maximum height among the two neighboring trees. Write a function `maxPossibleTreeHeight` that accepts an array of positive integers representing tree heights and returns the maximum possible height of the new tree that can be planted. Function Signature: ```python def maxPossibleTreeHeight(array: List[int]) -> int: ``` # Example ```python assert maxPossibleTreeHeight([3, 4, 5, 3, 7]) == 5 # The new tree can be planted between 5 and 7 with a maximum possible height of 5. assert maxPossibleTreeHeight([1, 2, 6, 5, 4]) == 6 # The new tree can be planted at the beginning with a height of 1, between 1 and 2 with height 1, # between 2 and 6 with height 2, between 6 and 5 with height 5, or at the end with height 4. # The maximum possible height is 6. assert maxPossibleTreeHeight([2, 2, 2]) == 2 # The new tree can be planted at any position with a maximum height of 2. assert maxPossibleTreeHeight([10]) == 10 # The new tree can only be planted next to the single tree with a maximum height of 10. ``` # Constraints - `1 <= len(array) <= 10^5` - `1 <= array[i] <= 10^9` # Notes - Analyze the neighboring trees in the input array and compute the maximum possible height for the new tree based on the specified rules.","solution":"from typing import List def maxPossibleTreeHeight(array: List[int]) -> int: Returns the maximum possible height of a new tree that can be planted. The new tree\'s height must be less than or equal to the maximum height among the two neighboring trees. # Edge case: if there\'s only one tree, return its height if len(array) == 1: return array[0] # Find the max height in the list max_height = max(array) # The height of the new tree must be less than or equal to the max height. return max_height"},{"question":"Your task is to implement a function that evaluates mathematical expressions in Reverse Polish Notation (RPN). Reverse Polish Notation is a mathematical notation in which operators follow their operands. For example, to add 3 and 4 together, you would write \\"3 4 +\\". If you wanted to add 3 and 4, then multiply the result by 5, you would write \\"3 4 + 5 *\\". In this notation, every operator follows all of its operands. You need to write the function `evaluate_rpn(expression: str) -> float` that takes an RPN expression as input and returns the evaluation result as a float. The expression string will be a space-separated sequence of tokens, with each token being either an operand (a number) or an operator (+, -, *, /). You can assume the expression will always be valid. You are not allowed to use any external libraries. # Example ```python expression = \\"3 4 + 2 * 1 +\\" # Should output 15.0 because (3 + 4) * 2 + 1 = 15 expression = \\"5 1 2 + 4 * + 3 -\\" # Should output 14.0 because 5 + ((1 + 2) * 4) - 3 = 14 expression = \\"4 2 / 3 +\\" # Should output 5.0 because (4 / 2) + 3 = 5 ``` # Constraints - The `expression` will contain valid RPN expressions. - Each operand and operator will be separated by space. - Expression evaluation should handle floating-point division and multiplication correctly and return a floating-point result. # Function Signature ```python def evaluate_rpn(expression: str) -> float: ```","solution":"def evaluate_rpn(expression: str) -> float: Evaluates a given expression in Reverse Polish Notation (RPN) and returns the result as a float. stack = [] tokens = expression.split() for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': result = a / b stack.append(result) else: stack.append(float(token)) return stack[0]"},{"question":"You are given a 2D grid of size N times M where each cell is either a wall (represented by `#`) or a path (represented by `.`). Your task is to find the shortest path from the top-left corner of the grid to the bottom-right corner, but you can break at most one wall to create a path if necessary. -----Input:----- - The first line of input contains an integer T, the number of test cases. - Each test case starts with two space-separated integers N and M. - The next N lines each contain a string of length M representing the grid. -----Output:----- For each test case, output the length of the shortest path from the top-left corner to the bottom-right corner. If there\'s no such path, output -1. -----Constraints----- - 1 leq T leq 50 - 1 leq N, M leq 100 - The top-left and bottom-right corners will always be paths (i.e., `.`). -----Sample Input:----- 2 3 3 ..# .#. ... 4 4 .# ..#. #. .... -----Sample Output:----- 5 7 -----EXPLANATION:----- In the first test case: - The shortest path is: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (1,2), which requires breaking into the cell (1,2), thus total steps are 5. In the second test case: - The shortest path is: (0,2) -> (1,2) -> (2,2) -> (2,3) -> (3,3), which requires breaking into the cell (3,0), (3,1), or (3,2), making the total steps 7.","solution":"from collections import deque def shortestPathWithWallBreak(grid, N, M): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[[False, False] for _ in range(M)] for _ in range(N)] queue = deque([(0, 0, 0, 1)]) # (x, y, wall_broken, distance) visited[0][0][0] = True while queue: x, y, wall_broken, dist = queue.popleft() if x == N - 1 and y == M - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M: if grid[nx][ny] == \'.\' and not visited[nx][ny][wall_broken]: visited[nx][ny][wall_broken] = True queue.append((nx, ny, wall_broken, dist + 1)) if grid[nx][ny] == \'#\' and wall_broken == 0 and not visited[nx][ny][1]: visited[nx][ny][1] = True queue.append((nx, ny, 1, dist + 1)) return -1 def solveShortPathAllCases(test_cases): results = [] for case in test_cases: N, M, grid = case result = shortestPathWithWallBreak(grid, N, M) results.append(result) return results"},{"question":"Reverse a String Create a function called `reverseString`/`ReverseString` that takes a single argument: a string `s`. The function should return the reversed version of the string `s`. However, there are certain conditions to keep in mind: 1. The string can contain letters (both uppercase and lowercase), digits, spaces, and special characters. 2. The function should preserve spaces and special characters in their respective positions relative to each other. For example: ```python reverseString(\\"hello world!\\") # returns \\"!dlrow olleh\\" reverseString(\\"123 456\\") # returns \\"654 321\\" reverseString(\\"a@b_c\\") # returns \\"c_b@a\\" ```","solution":"def reverseString(s): Returns the reversed version of the string s. return s[::-1]"},{"question":"You are managing a warehouse, and you need to develop a system to keep track of inventory levels of various items. Each item has a unique SKU (Stock Keeping Unit) identifier, a name, a category, and a quantity in stock. Your task is to complete the `Warehouse` class so that it can store and update information about the items efficiently. ___ # Task: You must finish the `Warehouse` class. This class must be able to perform the following operations: 1. `add_item(SKU, name, category, quantity)`: Adds a new item to the inventory. 2. `update_quantity(SKU, quantity)`: Updates the quantity of the specified item. 3. `get_item(SKU)`: Returns details of an item by SKU. 4. `get_items_in_category(category)`: Returns a list of all items in a given category. 5. `get_total_quantity()`: Returns the total quantity of all items in the warehouse. # Constraints: - The SKU is guaranteed to be unique for each item. - The quantity is always a non-negative integer. - Assume that all input values are valid (e.g., SKU is unique during item addition). # Input: - A sequence of operations on the `Warehouse` class. # Output: - Each operation should return the appropriate result if applicable (e.g., item details, list of items, total quantity). Below is the template for the `Warehouse` class: ```python class Warehouse: def __init__(self): self.items = {} def add_item(self, SKU, name, category, quantity): # Add the item to the warehouse inventory. pass def update_quantity(self, SKU, quantity): # Update the quantity of the specified item. pass def get_item(self, SKU): # Retrieve item details by SKU. pass def get_items_in_category(self, category): # Retrieve list of items in the specified category. pass def get_total_quantity(self): # Calculate the total quantity of items in the warehouse. pass ``` Your task is to complete the implementation of this class. ___ Example: ```python # Create a new warehouse warehouse = Warehouse() # Add items to the warehouse warehouse.add_item(\'SKU123\', \'ItemA\', \'Category1\', 10) warehouse.add_item(\'SKU124\', \'ItemB\', \'Category1\', 5) warehouse.add_item(\'SKU125\', \'ItemC\', \'Category2\', 15) # Update quantity of an item warehouse.update_quantity(\'SKU123\', 20) # Get details of an item print(warehouse.get_item(\'SKU123\')) # Output: {\'SKU\': \'SKU123\', \'name\': \'ItemA\', \'category\': \'Category1\', \'quantity\': 20} # Get all items in a category print(warehouse.get_items_in_category(\'Category1\')) # Output: [{\'SKU\': \'SKU123\', \'name\': \'ItemA\', \'category\': \'Category1\', \'quantity\': 20}, {\'SKU\': \'SKU124\', \'name\': \'ItemB\', \'category\': \'Category1\', \'quantity\': 5}] # Get total quantity of all items print(warehouse.get_total_quantity()) # Output: 40 ```","solution":"class Warehouse: def __init__(self): self.items = {} def add_item(self, SKU, name, category, quantity): self.items[SKU] = { \\"SKU\\": SKU, \\"name\\": name, \\"category\\": category, \\"quantity\\": quantity } def update_quantity(self, SKU, quantity): if SKU in self.items: self.items[SKU][\'quantity\'] = quantity def get_item(self, SKU): return self.items.get(SKU, None) def get_items_in_category(self, category): return [item for item in self.items.values() if item[\\"category\\"] == category] def get_total_quantity(self): return sum(item[\\"quantity\\"] for item in self.items.values())"},{"question":"You are given an array of integers `nums` and an integer `k`. Find the longest subarray whose sum is less than or equal to `k`. Return the length of this subarray. If no such subarray exists, return 0. Example : Input: nums = [1, 2, 3, 4, 5] k = 9 Output: 3 Explanation: The longest subarray which has sum <= 9 is [2, 3, 4]. The sum of this subarray is 9, and its length is 3. Note: * The length of `nums` will be at most 10,000. * The value of each element in `nums` will be at most 1000. * The value of `k` will be at most 1,000,000.","solution":"def longest_subarray_sum_leq_k(nums, k): Function to find the length of the longest subarray such that the sum of its elements is less than or equal to k. Parameters: nums (List[int]): List of integers. k (int): The upper limit for the subarray sum. Returns: int: Length of the longest subarray whose sum is less than or equal to k. n = len(nums) max_length = 0 current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum > k: current_sum -= nums[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a function to find the smallest positive integer **M** that satisfies the condition that the sum of its digits raised to the power of the number of digits equals itself. For example: - The number 153 has 3 digits, and (1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153), hence 153 satisfies the condition. - The number 9474 has 4 digits, and (9^4 + 4^4 + 7^4 + 4^4 = 6561 + 256 + 2401 + 256 = 9474), hence 9474 satisfies the condition. Your task is to find the smallest number which meets this condition. Example 1: Input: - Output: 1 Example 2: Input: - Output: 153 Example 3: Input: - Output: 1634 Note: - There are multiple numbers that qualify as such numbers, often referred to as Narcissistic or Armstrong numbers. - The smallest such number is 1. - You need to find the function which can programmatically produce the lowest such number.","solution":"def smallest_armstrong_number(): This function returns the smallest Armstrong number. An Armstrong number (also known as Narcissistic number) is a number that is equal to the sum of its own digits each raised to the power of the number of digits. # Smallest Armstrong number is always 1 as it satisfies the condition trivially. return 1"},{"question":"You are given a 2D grid consisting of \'1\'s (land) and \'0\'s (water). An island is formed by connecting adjacent lands horizontally or vertically. You can assume all four edges of the grid are surrounded by water. Design an algorithm to find the maximum area of an island in the given 2D grid. An island\'s area is the number of cells with value 1 connected in a horizontal or vertical direction. Example: Input: [[0,0,1,0,0,0], [0,1,1,0,0,0], [0,0,0,0,0,0], [1,1,0,1,1,1], [0,0,1,0,1,0]] Output: 4 Explanation: Island sizes in the grid are 3 and 4. The maximum area is 4.","solution":"def max_area_of_island(grid): def dfs(i, j): if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and grid[i][j] == 1: grid[i][j] = 0 # Mark the cell as visited return 1 + dfs(i+1, j) + dfs(i-1, j) + dfs(i, j+1) + dfs(i, j-1) return 0 max_area = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: max_area = max(max_area, dfs(i, j)) return max_area"},{"question":"Write a class that simulates a Least Recently Used (LRU) cache. The class should support the following operations: `get` and `put`. Implement the LRUCache class: LRUCache(int capacity): Initializes the LRU cache with positive size capacity. int get(int key): Returns the value of the key if the key exists, otherwise returns -1. void put(int key, int value): Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, remove the least recently used key. The LRU Cache should use O(1) time complexity for both the `get` and `put` operations. Example: ``` LRUCache cache = new LRUCache(2); // Cache capacity is 2 cache.put(1, 1); // cache is {1=1} cache.put(2, 2); // cache is {1=1, 2=2} cache.get(1); // returns 1. Cache is {2=2, 1=1} cache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3} cache.get(2); // returns -1 (not found) cache.put(4, 4); // LRU key was 1, evicts key 1, cache is {3=3, 4=4} cache.get(1); // returns -1 (not found) cache.get(3); // returns 3. Cache is {4=4, 3=3} cache.get(4); // returns 4. Cache is {3=3, 4=4} ```","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = OrderedDict() def get(self, key: int) -> int: if key in self.cache: self.cache.move_to_end(key) return self.cache[key] return -1 def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"# Introduction You have been given a string containing alphabetic characters, digits, and special characters. Your task is to write a function that removes all digits and special characters from the string and returns the string with only the alphabetic characters remaining. This problem helps in understanding filters and basic string manipulation. # Task Write a function `remove_special_characters` that accepts a string `input_str` and returns a string that contains only the alphabetic characters from the original string. Rules: - The function should remove all digits (0-9) and special characters (such as punctuation marks and symbols). - Only alphabetic characters (both lowercase and uppercase) should be retained. # Input/Output The `input_str` string will consist of any printable ASCII characters. # Example ``` remove_special_characters(\\"123abc!@#\\"); //=> \\"abc\\" remove_special_characters(\\"a1b2c3\\"); //=> \\"abc\\" remove_special_characters(\\"Hello, World!\\"); //=> \\"HelloWorld\\" remove_special_characters(\\"Hacktober_2023!!\\"); //=> \\"Hacktober\\" ```","solution":"def remove_special_characters(input_str): Removes all digits and special characters from the input string, leaving only alphabetic characters. Parameters: input_str (str): The string to be filtered. Returns: str: A string containing only alphabetic characters. return \'\'.join(char for char in input_str if char.isalpha())"},{"question":"Lucy\'s bakery offers a variety of cakes. She needs a program to calculate the volume of a cylindrical cake for her new recipe book. Given the radius and height of the cake, help her compute the volume accurately. -----Input:----- - The first line contains the number of test cases. Then the test cases follow. - Each test case consists of a single line of input containing two integers: the RADIUS and the HEIGHT of the cylindrical cake. -----Output:----- For each test case, output in a single line the VOLUME of the cake. -----Constraints----- 1 <= Radius, Height <= 30 -----Sample Input:----- 3 3 5 7 10 4 12 -----Sample Output:----- 141.37 1539.38 603.19","solution":"import math def volume_of_cylinder(radius, height): Returns the volume of a cylinder given the radius and height. volume = math.pi * (radius ** 2) * height return round(volume, 2) def calculate_volumes_for_cases(cases): Given a list of (radius, height) tuples, returns a list of corresponding cylinder volumes. return [volume_of_cylinder(radius, height) for radius, height in cases]"},{"question":"Write a function called `find_missing_number` that takes a list of unique integers ranging from 1 to `n` (inclusive) with one missing number and returns the missing number. The function should have a time complexity of O(n).","solution":"def find_missing_number(nums): Given a list of unique integers ranging from 1 to n (inclusive) with one missing number, returns the missing number. Args: nums: List[int] - the list of numbers with one number missing Returns: int - the missing number n = len(nums) + 1 # since one number is missing, n should be len(nums) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"Create a function that takes a list of integers and returns the maximum sum of a non-empty subarray from the list such that the subarray starts and ends with an even number. # Notes * An empty input list should return 0. * Subarrays consisting of a single even element are valid. * Multiple subarrays can have the same even number at their start and/or end. Examples ``` [1, 2, 3, 4, 5] --> 6 Explanation: The subarrays starting and ending with an even number are: [2, 3, 4], and its sum is 2 + 3 + 4 = 9 [4], and its sum is 4 The maximum sum is 9. ``` ``` [8, 2, 3, 5, 6] --> 19 Explanation: The subarrays starting and ending with an even number are: [8, 2], and its sum is 8 + 2 = 10 [8, 2, 3, 5, 6], and its sum is 8 + 2 + 3 + 5 + 6 = 24 [6], and its sum is 6 The maximum sum is 24. ``` ``` [1, 3, 5] --> 0 Explanation: There is no subarray starting and ending with an even number. The maximum sum is 0. ```","solution":"def max_even_ending_subarray_sum(arr): Returns the maximum sum of a non-empty subarray that starts and ends with an even number. max_sum = 0 n = len(arr) if n == 0: return max_sum for i in range(n): if arr[i] % 2 == 0: for j in range(i, n): if arr[j] % 2 == 0: subarray_sum = sum(arr[i:j + 1]) max_sum = max(max_sum, subarray_sum) return max_sum"},{"question":"Palindrome Permutation A palindrome is a word or phrase that reads the same forward and backward, ignoring spaces, punctuation, and capitalization. Given a string, write a function that determines if any permutation of the string could form a palindrome. **Rules:** - The input string consists of lowercase or uppercase alphabetic characters and is case insensitive. **Function Signature:** ```python def can_form_palindrome(s: str) -> bool: pass ``` **Example:** ```python print(can_form_palindrome(\\"Tact Coa\\")) # Output: True (\\"Tact Coa\\" can be rearranged to \\"taco cat\\", which is a palindrome) print(can_form_palindrome(\\"not a palindrome\\")) # Output: False print(can_form_palindrome(\\"A man a plan a canal Panama\\")) # Output: True (\\"A man a plan a canal Panama\\" can be rearranged to form a palindrome) ``` **Explanation:** - In the first example, although \\"Tact Coa\\" itself is not a palindrome, it can be rearranged to \\"taco cat\\" which is a palindrome. - The second example cannot be rearranged to form any palindrome. - The third example demonstrates that spaces and capitalization should be ignored and the characters can be rearranged to form \\"AmanaplanacanalPanama\\", which is a palindrome.","solution":"def can_form_palindrome(s: str) -> bool: from collections import Counter # Normalize the string: remove spaces and make it lower case s = \'\'.join(s.split()).lower() # Count the frequency of each character char_count = Counter(s) # Check the number of characters that have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be able to form a palindrome, there can be at most one character with an odd count return odd_count <= 1"},{"question":"=====Problem Statement===== You have been tasked with implementing a simple task manager for a company project. The task manager\'s core functionality involves scheduling and tracking tasks. Each task is represented by its start and end times. To avoid scheduling conflicts, a new task can only be added if it does not overlap with any existing tasks. You need to write a program that checks if a new task can be scheduled without conflicting with the existing tasks. =====Input Format===== - The first line contains an integer N, the number of existing tasks. - The next N lines each contain two integers, start and end, representing the start and end times of each existing task. - The last line contains two integers, start and end, representing the start and end times of the new task to be added. =====Output Format===== Print \\"Conflict\\" if the new task overlaps with any existing task. Otherwise, print \\"No Conflict\\". Do not print the quotation marks. =====Constraints===== - All times are in military format (0 to 23 for hours). - 1 ≤ N ≤ 100 - 0 ≤ start < end ≤ 23 =====Sample Input===== 3 1 3 4 6 7 9 5 8 =====Sample Output===== Conflict =====Explanation===== The new task with time interval [5, 8] overlaps with the existing task [4, 6], thus there is a conflict. Therefore, the output is \\"Conflict\\".","solution":"def task_manager(n, existing_tasks, new_task): new_start, new_end = new_task for start, end in existing_tasks: if not (new_end <= start or new_start >= end): return \\"Conflict\\" return \\"No Conflict\\" # Example usage: # n = 3 # existing_tasks = [(1, 3), (4, 6), (7, 9)] # new_task = (5, 8) # print(task_manager(n, existing_tasks, new_task)) # Output: \\"Conflict\\""},{"question":"A company has a hierarchy of employees. An employee either has no direct reportees or has exactly two direct reportees who both directly report to him/her. The hierarchy is represented as a binary tree where each node corresponds to an employee. Each node is labeled with a value representing the importance of the employee. Write a program to find the maximum sum of importance values from the root to any leaf in the hierarchy tree. **Input:** - The first line contains the number of test cases T. - For each test case, the first line contains N, the number of nodes in the tree. - The second line contains N integers where the i-th integer indicates the importance value of the i-th node. - The following N-1 lines each contain two integers u and v, indicating there is a direct report from node u to node v. **Output:** For each test case, print the maximum sum of importance values from the root to any leaf. **Constraints:** - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100,000 - 1 ≤ importance value ≤ 1000 **Example:** ``` Input: 2 5 10 5 3 6 2 1 2 1 3 2 4 2 5 3 4 7 3 1 2 1 3 Output: 22 11 ``` **Explanation:** Example case 1: - The tree structure is: 10 / 5 3 / 6 2 - The maximum sum from root to leaf is `10 -> 5 -> 6` = 21. Example case 2: - The tree structure is: 4 / 7 3 - The maximum sum from root to leaf is `4 -> 7` = 11.","solution":"from collections import defaultdict, deque def find_max_path_sum(num_cases, cases): results = [] for case in cases: N, importance, edges = case # Handling a single-node case if N == 1: results.append(importance[0]) continue tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def bfs(root): queue = deque([(root, importance[root - 1])]) visited = set() max_sum = 0 while queue: node, current_sum = queue.popleft() if node in visited: continue visited.add(node) is_leaf = True for neighbor in tree[node]: if neighbor not in visited: queue.append((neighbor, current_sum + importance[neighbor - 1])) is_leaf = False if is_leaf: max_sum = max(max_sum, current_sum) return max_sum results.append(bfs(1)) # Assuming 1 as the root node return results def max_importance_path_sum(T, inputs): cases = [] index = 0 for _ in range(T): N = inputs[index] index += 1 importance = inputs[index:index + N] index += N edges = [] for _ in range(N - 1): u, v = inputs[index], inputs[index + 1] edges.append((u, v)) index += 2 cases.append((N, importance, edges)) return find_max_path_sum(T, cases) # Example usage: T = 2 inputs = [ 5, 10, 5, 3, 6, 2, 1, 2, 1, 3, 2, 4, 2, 5, 3, 4, 7, 3, 1, 2, 1, 3 ] print(max_importance_path_sum(T, inputs)) # Expected: [21, 11]"},{"question":"Hana is a librarian who is reorganizing books in her library. She wants to create a special shelf that maximizes the number of books with unique genres, but the total number of pages of the books on this shelf should not exceed a given limit. Each book belongs to exactly one genre and has a fixed number of pages. Help Hana find the maximum number of unique genres she can place on the special shelf, while ensuring the total number of pages does not exceed the limit. -----Input:----- - First line will contain TT, number of test cases. - First line of each test case contains two space separated integers NN, PmaxP_{max}. - Next NN lines of each test case contain two space separated integers pip_i and gig_i, denoting the number of pages and the genre of each book respectively. -----Output:----- For each test case, print the maximum number of unique genres. -----Constraints:----- - 1≤T≤101 leq T leq 10 - 1≤N≤1051 leq N leq 10^5 - 1≤pi≤1041 leq p_i leq 10^4 - 1≤gi≤1051 leq g_i leq 10^5 -----Sample Input:----- 1 5 15 3 1 5 2 6 3 4 1 8 4 -----Sample Output:----- 3 -----EXPLANATION:----- Hana can choose books with genres 1, 2, and 3 which have a total of 3+5+6 = 14 pages which is less than or equal to the limit of 15 pages. This way she includes 3 unique genres and keeps the total number of pages within the limit.","solution":"def max_unique_genres(test_cases): results = [] for test in test_cases: N, Pmax, books = test genre_pages = {} # Aggregate minimum pages for each genre for pages, genre in books: if genre in genre_pages: genre_pages[genre] = min(genre_pages[genre], pages) else: genre_pages[genre] = pages # Sort genres by their minimum pages, ascending sorted_genres = sorted(genre_pages.values()) total_pages = 0 unique_genres = 0 for pages in sorted_genres: if total_pages + pages <= Pmax: total_pages += pages unique_genres += 1 else: break results.append(unique_genres) return results"},{"question":"=====Function Descriptions===== String Operations Module The string operations module provides utilities to perform various string manipulations and checks. class string.StringOperations() This class can be used to perform operations and transformations on strings. =====Problem Statement===== You are given two strings. Your task is to check if one string is a valid rotation of the other. A string `s1` is said to be a rotation of string `s2` if `s2` can be obtained by rotating `s1` by any number of characters. For example, \\"abcdef\\" is a rotation of \\"defabc\\". =====Input Format===== Two lines of input: - The first line contains the string `s1`. - The second line contains the string `s2`. =====Constraints===== 1 <= length(s1), length(s2) <= 100 Both strings contain only lowercase English letters. The lengths of `s1` and `s2` are the same. =====Output Format===== Output \\"YES\\" if `s2` is a rotation of `s1`. Otherwise, output \\"NO\\". =====Sample Input===== ``` waterbottle erbottlewat ``` =====Sample Output===== ``` YES ``` =====Explanation of Sample===== The string \\"erbottlewat\\" can be obtained by rotating \\"waterbottle\\" three characters to the right. =====Additional Sample Input===== ``` hello llohe ``` =====Additional Sample Output===== ``` YES ``` =====Explanation of Additional Sample===== The string \\"llohe\\" can be obtained by rotating \\"hello\\" two characters to the right.","solution":"class StringOperations: @staticmethod def is_rotation(s1, s2): Checks if s2 is a rotation of s1. if len(s1) != len(s2): return \\"NO\\" # Concatenate s1 with itself and check if s2 is a substring combined = s1 + s1 if s2 in combined: return \\"YES\\" return \\"NO\\""},{"question":"Given a positive integer `n`, write a function that returns the largest factorial number less than or equal to `n`. If there is no such number, return 1 (since 0! = 1). For example: ``` largest_factorial(5) => 2 (since 2! = 2 and 3! = 6 which is greater than 5) largest_factorial(24) => 24 (since 4! = 24 and 5! = 120 which is greater than 24) largest_factorial(1) => 1 (since 1! = 1) largest_factorial(0) => 1 (since 0! = 1) ``` Constraints: - The input `n` will be in the range of [0, 10^6]. The function should be efficient enough to handle large values of `n`.","solution":"def largest_factorial(n): Returns the largest factorial number less than or equal to n. if n < 1: return 1 factorial = 1 i = 1 while True: next_factorial = factorial * i if next_factorial > n: return factorial factorial = next_factorial i += 1"},{"question":"Given a list of integers, determine whether there is a pair of distinct elements (not necessarily adjacent) that sum up to a specific target. If such a pair exists, return True; otherwise, return False. Task Write a function `find_pair_with_sum(nums, target)` that takes a list of integers `nums` and an integer `target`, and returns a boolean value indicating whether there exists a pair of distinct elements in `nums` that sum up to `target`. Examples `find_pair_with_sum([10, 15, 3, 7], 17)` will return `True`. The pair (10, 7) sums up to 17. `find_pair_with_sum([1, 2, 3, 4], 8)` will return `False`. No pairs sum up to 8. `find_pair_with_sum([1, 2, 3, 4, 5], 9)` will return `True`. The pair (4, 5) sums up to 9. Notes - The function should handle both positive and negative numbers. - Use an efficient algorithm to ensure that the solution works well even for large input sizes. There will be: * 50 test cases with list lengths below 100. * 50 test cases with list lengths up to 1,000,000.","solution":"def find_pair_with_sum(nums, target): Determines if there is a pair of distinct elements in nums that sum up to target. Args: nums (List[int]): List of integers. target (int): Target sum for the pair of elements. Returns: bool: True if such a pair exists, False otherwise. seen = set() for num in nums: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"#Determine if a string has all unique characters Write a function that determines whether a given string contains only unique characters. The function should return `True` if all characters in the string are unique and `False` if there are any duplicate characters. You are not allowed to use any additional data structures to solve this problem. # Constraints: - The input string will only contain alphabetical characters (both uppercase and lowercase) and digits. - The length of the string will not exceed 100 characters. Example: ```python is_unique(\\"abcdefg\\") -> True is_unique(\\"hello\\") -> False is_unique(\\"1234567890\\") -> True is_unique(\\"112233\\") -> False ```","solution":"def is_unique(string): Determines if a string has all unique characters without using additional data structures. :param string: str - input string to be checked :return: bool - True if all characters in the string are unique, False otherwise # We will use a brute force method by comparing each character with every other character n = len(string) for i in range(n): for j in range(i + 1, n): if string[i] == string[j]: return False return True"},{"question":"# The Problem Create a function that simulates a simplified version of a traffic light system, where different colored lights follow their respective cycles. # Traffic Light Traffic lights operate on a fixed-time cycle: - Red light lasts for 45 seconds. - Green light lasts for 30 seconds. - Yellow light lasts for 5 seconds. # Input Your function will receive an integer `t` representing the total elapsed time in seconds since the start of a complete cycle. The function should determine and return which light is currently on. # Rules The complete cycle of the traffic light is 80 seconds (45 seconds red + 30 seconds green + 5 seconds yellow). # Output The function should return the string `\'RED\'`, `\'GREEN\'`, or `\'YELLOW\'` depending on the current light. # Function Signature ```python def traffic_light_state(t: int) -> str: pass ``` # Example ```python print(traffic_light_state(60)) # Output: \'GREEN\' print(traffic_light_state(90)) # Output: \'RED\' print(traffic_light_state(75)) # Output: \'YELLOW\' ``` # Additional Notes - Assume the value of `t` is always positive. - The input `t` can be larger than the cycle length, in which case the cycle repeats. For example, `t = 85` should be treated the same as `t = 5`. - Use this input-output behavior to handle edge cases, like `t = 0` or `t = 80`.","solution":"def traffic_light_state(t: int) -> str: Determines the current traffic light state based on the elapsed time `t`. cycle_time = 80 # Total duration for one complete cycle t = t % cycle_time # Normalize `t` to within one cycle if 0 <= t < 45: return \'RED\' elif 45 <= t < 75: return \'GREEN\' else: return \'YELLOW\'"},{"question":"Consider a sequence of integers where each number is generated based on the sum of the digits of the previous number, plus the previous number itself. The sequence starts with the integer `s`. Implement a function that receives two arguments, an integer `s` and an integer `k`, and returns the `k-th` term of the sequence. The function needs to handle edge cases where `s` is a single-digit integer. For example, if `s` is `5` and `k` is `3`, the sequence would be `[5, 10, 11]` and the function should return `11`. More examples in test cases. Good luck! ```python def generate_sequence(s, k): # Your code here # Example usage: print(generate_sequence(5, 3)) # Output: 11 print(generate_sequence(9, 4)) # Output: 36 ```","solution":"def generate_sequence(s, k): Generate the k-th term of the sequence starting with s. Each term is generated based on the sum of the digits of the previous term plus the previous term itself. def digit_sum(n): return sum(int(digit) for digit in str(n)) current = s for _ in range(k - 1): current = current + digit_sum(current) return current"},{"question":"You are developing a new feature for an employee performance monitoring system. Every employee is assigned a productivity score based on their completed tasks. Tasks have different difficulty levels, and each level rewards different points. The system will record the tasks completed by employees and their respective levels. Create a function called ```calculate_scores``` that takes one argument, ```tasks```, which is a dictionary where the keys are employee names (strings) and the values are lists of tuples. Each tuple contains the task difficulty level (an integer from 1 to 5) and the number of tasks completed (an integer). The function should return a dictionary where the keys are employee names and the values are their total productivity scores. The scores are calculated based on the following point system: - Level 1 tasks: 10 points each - Level 2 tasks: 20 points each - Level 3 tasks: 30 points each - Level 4 tasks: 40 points each - Level 5 tasks: 50 points each If the provided dictionary is empty or contains invalid data (e.g., incorrect types or out-of-range difficulty levels), return an empty dictionary. Examples: ``` calculate_scores({ \\"Alice\\": [(1, 3), (2, 2)], \\"Bob\\": [(3, 1), (5, 5)], \\"Charlie\\": [(2, 6), (4, 1), (5, 2)] }) # Output: # { # \\"Alice\\": 70, # 3 tasks at level 1 = 3 * 10 + 2 tasks at level 2 = 2 * 20 => 30 + 40 = 70 # \\"Bob\\": 280, # 1 task at level 3 = 1 * 30 + 5 tasks at level 5 = 5 * 50 => 30 + 250 = 280 # \\"Charlie\\": 210 # 6 tasks at level 2 = 6 * 20 + 1 task at level 4 = 1 * 40 + 2 tasks at level 5 = 2 * 50 => 120 + 40 + 100 = 260 # } calculate_scores({ \\"Dave\\": [(3, 2), (6, 1)], # Invalid task difficulty level 6 }) # Output: # {} calculate_scores({ \\"Eve\\": [(2, \\"ten\\")], # Invalid number of tasks completed }) # Output: # {} calculate_scores({}) # Output: # {} ```","solution":"def calculate_scores(tasks): Calculate the productivity score for each employee based on completed tasks. Parameters: tasks (dict): A dictionary where keys are employee names (str) and values are lists of tuples (task difficulty level (int), number of tasks completed (int)). Returns: dict: A dictionary where keys are employee names and values are their total productivity scores. point_system = {1: 10, 2: 20, 3: 30, 4: 40, 5: 50} result = {} for employee, task_list in tasks.items(): total_score = 0 for difficulty, count in task_list: if not isinstance(difficulty, int) or not isinstance(count, int): return {} if difficulty not in point_system: return {} total_score += point_system[difficulty] * count result[employee] = total_score return result"},{"question":"Given two integer arrays A and B of the same non-zero length, merge them into a single sorted array by selecting one element from either A or B at each step. You are allowed to switch between picking from A or B at most k times. Return the lexicographically smallest merged array possible. A sequence is lexicographically smaller than another if at each position they have equal elements or the first differing element in the sequence is smaller in the first sequence. Example: Input: A = [1, 7, 8], B = [2, 3, 5, 9], k = 2 Output: [1, 2, 3, 5, 7, 8, 9] Explanation: You start by picking 1 from A. Switch to B to pick 2, 3, 5. Switch back to pick 7 from A and continue picking from A to get the smallest lexicographically array. Note: - A, B are arrays with the same length, and that length will be in the range [1, 1000]. - All elements in A and B are integers in the range [0, 2000]. - You are allowed to switch between arrays at most k times to create the lexicographically smallest merged array.","solution":"def merge_sorted_arrays(A, B, k): Merges two sorted arrays A and B while switching at most k times to produce the lexicographically smallest merged array. len_a, len_b = len(A), len(B) merged = [] i, j, switches = 0, 0, 0 while i < len_a and j < len_b: if switches == k: if i < len_a: merged += A[i:] if j < len_b: merged += B[j:] return merged if A[i] < B[j]: merged.append(A[i]) i += 1 elif A[i] > B[j]: merged.append(B[j]) j += 1 else: # A[i] == B[j] if i + 1 < len_a and j + 1 < len_b and A[i + 1] < B[j + 1]: merged.append(A[i]) i += 1 else: merged.append(B[j]) j += 1 # Once one of the arrays is exhausted, we add the remaining elements of the other array if i < len_a: merged += A[i:] if j < len_b: merged += B[j:] return merged"},{"question":"Finn, an avid puzzle enthusiast, loves exploring strings and numbers. While playing a game, he encountered a curious task involving strings and their prefixes. Given a string consisting of lowercase English alphabets, the prefix of the string consists of its initial characters. For example, the prefixes of the string \\"abc\\" are \\"a\\", \\"ab\\", and \\"abc\\". To make things interesting, Finn decided to sum the lengths of all distinct prefixes for each character in the string. Your task is to compute the total sum of the lengths of all prefixes that occur for every character in the string. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains a string s of length n consisting of only lowercase English alphabets. -----Output----- Print a single integer — the total sum of the lengths of all prefixes occurring for each character in the input string. -----Examples----- Input 5 abcba Output 15 Input 7 abcdefg Output 28 -----Note----- For the first sample: - The prefixes for \'a\': \\"a\\" (length 1) - The prefixes for \'b\': \\"ab\\" (length 2) - The prefixes for \'c\': \\"abc\\" (length 3) - The prefixes for \'b\': \\"ab\\" (length 2) - The prefixes for \'a\': \\"a\\" (length 1) Summing these lengths: 1 + 2 + 3 + 2 + 1 = 9. Summing for all unique prefixes: - \\"a\\": 1 + 1 = 2 - \\"ab\\": 2 + 2 = 4 - \\"abc\\": 3 = 3 Total unique sum: 2 + 4 + 3 = 9, thus leading to the final answer. For the second sample, every character adds prefixes in a sequence, resulting in: - 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.","solution":"def total_sum_of_prefix_lengths(n, s): Function to compute the total sum of the lengths of all prefixes for each character in the string. Args: n (int): Length of the string s (str): Input string consisting of lowercase English alphabets Returns: int: Total sum of the lengths of all prefixes total_sum = 0 for i in range(1, n+1): total_sum += i return total_sum"},{"question":"Given an integer array nums, find the number of pairs (i, j) where 0 <= i < j < nums.length and nums[i] == nums[j]. Example 1: Input: nums = [1,2,3,1,1,3] Output: 4 Example 2: Input: nums = [1,1,1,1] Output: 6 Example 3: Input: nums = [1,2,3] Output: 0 Note: nums.length <= 100 0 <= nums[i] <= 100","solution":"def num_identical_pairs(nums): Returns the number of good pairs (i, j) where 0 <= i < j < nums.length and nums[i] == nums[j]. :param nums: List of integers :return: Integer - the count of good pairs count = 0 freq = {} for num in nums: if num in freq: count += freq[num] freq[num] += 1 else: freq[num] = 1 return count"},{"question":"Olivia is in charge of organizing a football tournament in her school. There are n teams participating in the tournament, and each team has a unique ID ranging from 1 to n. Olivia wants to create a fixture list where all the matches will be played over m days, with each day having one or more matches on different fields. Each match is represented by a pair of team IDs (a, b), which implies that team `a` plays against team `b`. However, due to logistical constraints and based on school rules: 1. Each team can only play at most one match per day. 2. No team should play against the same opponent more than once during the entire tournament. Olivia needs your help to check if a given fixture list is valid according to the above rules. For each fixture list, you need to determine if it meets the specified constraints. -----Input----- The first line of input contains an integer T, denoting the number of fixtures to verify. Then T fixtures follow. The first line of each fixture contains two integers n and m, denoting the number of teams and the number of days, respectively. The next m lines each contain an integer k followed by k pairs of integers (a, b), representing the matches on that day. Each pair (a, b) means team `a` plays against team `b` on that day. -----Output----- For each fixture list, print \\"Valid\\" if the fixture list meets the constraints, and \\"Invalid\\" otherwise. -----Constraints and Subtasks----- Subtask 1: 25 points - 1 ≤ T ≤ 100 - 2 ≤ n ≤ 50 - 1 ≤ m ≤ 10 Subtask 2: 25 points - 1 ≤ T ≤ 50 - 2 ≤ n ≤ 100 - 1 ≤ m ≤ 20 Subtask 3: 25 points - 1 ≤ T ≤ 20 - 2 ≤ n ≤ 200 - 1 ≤ m ≤ 30 Subtask 4: 25 points - 1 ≤ T ≤ 10 - 2 ≤ n ≤ 300 - 1 ≤ m ≤ 50 -----Example----- Input: 2 4 2 2 1 2 3 4 2 1 3 2 4 3 2 2 1 2 2 3 2 1 3 2 3 Output: Valid Invalid -----Explanation----- In the first fixture: - On day 1, team 1 plays against team 2, and team 3 plays against team 4. - On day 2, team 1 plays against team 3, and team 2 plays against team 4. All constraints are met, so the output is \\"Valid\\". In the second fixture: - On day 1, team 1 plays against team 2, and team 2 plays against team 3. - On day 2, team 1 plays against team 3, and team 2 plays against team 3. Team 2 and team 3 play against each other on both days, which violates the constraint that no team should play against the same opponent more than once. Therefore, the output is \\"Invalid\\".","solution":"def is_valid_fixture(n, m, matches): Determines if the given fixture list is valid based on the specified constraints. n: int, number of teams m: int, number of days matches: list, list of matches for each day, format: [(k1, [(a1, b1), (a2, b2), ...]), (k2, [(a3, b3), ...]), ...] Returns a boolean indicating if the fixture list is valid. from collections import defaultdict played_opponents = defaultdict(set) for day in range(m): matches_per_day = matches[day] teams_playing_today = set() for match in matches_per_day: a, b = match if a in teams_playing_today or b in teams_playing_today: return False # A team is playing more than one match in a day. if b in played_opponents[a] or a in played_opponents[b]: return False # Teams are playing against the same opponent more than once. teams_playing_today.add(a) teams_playing_today.add(b) played_opponents[a].add(b) played_opponents[b].add(a) return True def check_fixtures(T, fixtures): results = [] for i in range(T): n, m = fixtures[i][0] matches = fixtures[i][1] result = is_valid_fixture(n, m, matches) results.append(\\"Valid\\" if result else \\"Invalid\\") return results"},{"question":"Write a function that takes a list of integers as input and returns a new list of integers where each element at index `i` is the product of all the numbers in the original list except the one at `i`. The function should work in a way that does not use the division operation. You can assume that the list will contain at least two integers. Example: ``` Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] ``` Constraints: - The length of the input list will not exceed 10,000. - The integers in the input list range from `-1000` to `1000`.","solution":"def product_except_self(nums): Returns a list of integers where each element at index i is the product of all the numbers in the original list except the one at i. Division operation is not used. n = len(nums) # Initialize the result array with 1s result = [1] * n # Calculate the prefix products and store in result prefix_product = 1 for i in range(n): result[i] = prefix_product prefix_product *= nums[i] # Calculate the suffix products and multiply with the corresponding # prefix product stored in result suffix_product = 1 for i in range(n-1, -1, -1): result[i] *= suffix_product suffix_product *= nums[i] return result"},{"question":"Karim and Lila are managing a flower garden. The garden is arranged in a 2D grid of cells with dimensions m x n. Each cell either has a flower (denoted by 1) or is empty (denoted by 0). Karim and Lila want to create flowerbeds by connecting adjacent flowers. Two flowers are considered connected if they are adjacent horizontally or vertically. The goal is to determine the number of distinct flowerbeds in the garden. Each flowerbed must be a standalone group of connected flowers. -----Input----- The first line contains two integers m and n (1 ≤ m, n ≤ 1000) representing the dimensions of the garden. The next m lines each contain n characters where each character is either \'1\' (indicating a flower) or \'0\' (indicating an empty cell). -----Output----- Print a single integer representing the number of distinct flowerbeds in the garden. -----Examples----- Input 4 5 11000 11000 00100 00011 Output 3 Input 3 3 111 010 111 Output 1","solution":"def count_flowerbeds(m, n, garden): Counts the number of distinct flowerbeds in the garden. Parameters: m (int): Number of rows in the garden. n (int): Number of columns in the garden. garden (list of str): The garden represented as a list of strings. Returns: int: The number of distinct flowerbeds. def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or garden[x][y] == \'0\': return garden[x][y] = \'0\' # Mark the cell as visited by setting it to \'0\' # Check all four directions dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) garden = [list(row) for row in garden] flowerbeds = 0 for i in range(m): for j in range(n): if garden[i][j] == \'1\': dfs(i, j) flowerbeds += 1 return flowerbeds"},{"question":"Write a function `matrix_rotation(matrix)` that takes a square matrix (2D list) as input and rotates it 90 degrees clockwise. Your function should modify the matrix in place and return nothing. For example, if the input matrix is: ``` [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ``` After calling `matrix_rotation(matrix)`, the matrix should be modified to: ``` [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` You must implement the function to perform the rotation without using any additional matrix or list variables apart from the input.","solution":"def matrix_rotation(matrix): Rotates the given NxN matrix 90 degrees clockwise in place. :param matrix: List[List[int]] :return: None n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"=====Function Descriptions===== sorted(iterable, /, *, key=None, reverse=False) This function returns a new sorted list from the items in the given iterable. It has two optional arguments. The `key` specifies a function of one argument that is used to extract a comparison key from each list element. The default value is `None`. The `reverse` argument is a boolean value. If `True`, the list elements are sorted as if each comparison were reversed. Sample Code: >>> sorted([5, 2, 3, 1, 4]) [1, 2, 3, 4, 5] >>> >>> sorted(\\"Hello world\\") [\' \', \'H\', \'d\', \'e\', \'l\', \'l\', \'l\', \'o\', \'o\', \'r\', \'w\'] >>> >>> sorted((\\"banana\\", \\"apple\\", \\"cherry\\"), key=len) [\'apple\', \'banana\', \'cherry\'] >>> >>> sorted((\\"banana\\", \\"apple\\", \\"cherry\\"), key=len, reverse=True) [\'banana\', \'cherry\', \'apple\'] =====Problem Statement===== You have been given a list of students\' names and their respective grades. Your task is to sort the students first by their grades in descending order, and if two students have the same grade, then by their names in ascending order. For example, consider the following list of students: ``` students = [(\\"James\\", 88), (\\"Alice\\", 72), (\\"David\\", 88), (\\"Bob\\", 85)] ``` After sorting, the list should be: ``` sorted_students = [(\\"David\\", 88), (\\"James\\", 88), (\\"Bob\\", 85), (\\"Alice\\", 72)] ``` =====Input Format===== The first line contains an integer N, the number of students. The next N lines each contain a student\'s name and their grade separated by a space. =====Constraints===== 0 < N ≤ 100 =====Output Format===== Print the sorted list of students in the format: name followed by their grade, each on a new line. =====Example===== Input: ``` 4 James 88 Alice 72 David 88 Bob 85 ``` Output: ``` David 88 James 88 Bob 85 Alice 72 ``` =====Explanation===== The students are sorted first by their grades in descending order. Since \\"James\\" and \\"David\\" both have the same grade, 88, they are further sorted by their names in ascending order.","solution":"def sort_students(students): Sort students by their grades in descending order. In case of tie, sort by names in ascending order. Args: students - list of tuples, where each tuple contains a student\'s name and grade Returns: sorted list of students return sorted(students, key=lambda x: (-x[1], x[0]))"},{"question":"Create a function that takes a number `n` and returns a list of the first `n` prime numbers. Prime numbers are those that have only two distinct positive divisors: 1 and themselves. If the input `n` is not a positive integer, return \\"Not valid\\". Prime numbers start from 2, and some examples are: 2, 3, 5, 7, 11, 13, 17, 19, ... Write the function to generate an array of the first `n` prime numbers. Examples: ``` first_n_primes(5) => [2, 3, 5, 7, 11] first_n_primes(0) => \\"Not valid\\" first_n_primes(\\"6\\") => \\"Not valid\\" first_n_primes(10) => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] ``` ```Haskell first_n_primes :: Int -> Maybe [Int] -- Return Nothing in Haskell if the input is not valid. ```","solution":"def first_n_primes(n): Returns a list of the first n prime numbers. If n is not a positive integer, returns \\"Not valid\\". if not isinstance(n, int) or n <= 0: return \\"Not valid\\" primes = [] num = 2 # Start checking for primes from 2 while len(primes) < n: if all(num % p != 0 for p in primes): primes.append(num) num += 1 return primes"},{"question":"Problem Given a list of integers, determine if the list represents a **mountain array**. A mountain array is defined as an array that: 1. Has at least three elements. 2. There exists an index `i` such that: - `0 < i < len(arr) - 1` - `arr[0] < arr[1] < ... < arr[i-1] < arr[i]` - `arr[i] > arr[i+1] > ... > arr[len(arr) - 1]` In other words, an array is a mountain array if there is an element that is strictly greater than the elements before and after it. The sequence must strictly increase to the peak and then strictly decrease. **Input**: - A list of integers. **Output**: - A boolean value indicating whether the list is a mountain array or not. Examples ```python [2, 1] --> false [3, 5, 5] --> false [0, 3, 2, 1] --> true [0, 2, 3, 4, 5, 2, 1, 0] --> true ```","solution":"def is_mountain_array(arr): Returns True if the given list of integers represents a mountain array, False otherwise. if len(arr) < 3: return False i = 1 # Walk up while i < len(arr) and arr[i] > arr[i - 1]: i += 1 # Peak can\'t be first or last if i == 1 or i == len(arr): return False # Walk down while i < len(arr) and arr[i] < arr[i - 1]: i += 1 return i == len(arr)"},{"question":"Task: Create a function called **invert_dictionary** that takes a single input which is a dictionary. The function should return a new dictionary where the keys are the original dictionary\'s values, and the values are the original dictionary\'s keys. If the original dictionary has multiple keys with the same value, then in the returned dictionary, that value should map to a list containing all corresponding keys. Examples: invert_dictionary({\'a\': 1, \'b\': 2, \'c\': 1}): {1: [\'a\', \'c\'], 2: \'b\'} invert_dictionary({1: \'x\', 2: \'y\', 3: \'x\'}): {\'x\': [1, 3], \'y\': 2} invert_dictionary({\'name\': \'John\', \'age\': 25, \'city\': \'New York\'}): {\'John\': \'name\', 25: \'age\', \'New York\': \'city\'} Note: - The input dictionary\'s keys will always be unique. - The input dictionary\'s values can be of any valid dictionary key type. - The order of keys in the lists in the output does not matter, they can be in any order.","solution":"def invert_dictionary(d): Function to invert a dictionary such that the keys are the original dictionary\'s values, and the values are the original dictionary\'s keys. If the original dictionary has multiple keys with the same value, the value maps to a list containing all corresponding keys. inverted_dict = {} for key, value in d.items(): if value not in inverted_dict: inverted_dict[value] = key else: if not isinstance(inverted_dict[value], list): inverted_dict[value] = [inverted_dict[value]] inverted_dict[value].append(key) return inverted_dict"},{"question":"You are given an array of integers and a series of queries. For each query, you need to determine the count of unique integers in a specified subarray. -----Input:----- - The first line contains an integer n denoting the number of elements in the array. - The second line contains n integers representing the elements of the array. - The third line contains an integer q denoting the number of queries. - The following q lines each contain two integers L and R, representing the left and right indices of the subarray for the corresponding query. -----Output:----- - For each query, output the count of unique integers in the subarray [L, R] (inclusive) on a new line. -----Constraints:----- - 1 leq n leq 10^5 - 1 leq text{Array element} leq 10^9 - 1 leq q leq 10^4 - 1 leq L leq R leq n -----Sample Input:----- 5 1 2 1 3 2 3 1 3 2 4 1 5 -----Sample Output:----- 2 3 3 -----Explanation:----- For the first query, the subarray is [1, 2, 1]. The unique integers are 1 and 2, so the answer is 2. For the second query, the subarray is [2, 1, 3]. The unique integers are 2, 1, and 3, so the answer is 3. For the third query, the subarray is [1, 2, 1, 3, 2]. The unique integers are 1, 2, and 3, so the answer is 3.","solution":"def count_unique_elements_in_queries(n, array, queries): Returns the count of unique elements in the given subarrays specified by queries. Parameters: n (int): The number of elements in the array. array (list of ints): The integer elements of the array. queries (list of tuples): Queries specifying the subarrays, where each tuple contains two integers (L, R). Returns: list of ints: List containing the count of unique elements for each query. results = [] for L, R in queries: subarray = array[L-1:R] unique_elements_count = len(set(subarray)) results.append(unique_elements_count) return results"},{"question":"Given a string s, return the length of the longest substring that contains at most two distinct characters. For example: Given s = \\"eceba\\", return 3, because \\"ece\\" is the longest substring with at most 2 distinct characters. Given s = \\"ccaabbb\\", return 5, because \\"aabbb\\" is the longest substring with at most 2 distinct characters. Function signature: ```python def lengthOfLongestSubstringTwoDistinct(s: str) -> int: ```","solution":"def lengthOfLongestSubstringTwoDistinct(s: str) -> int: Calculate the length of the longest substring with at most two distinct characters. :param s: input string :return: length of the longest substring with at most two distinct characters if len(s) < 3: return len(s) # Dictionary to store the rightmost position of each character hashmap = {} left = 0 max_length = 2 for right in range(len(s)): hashmap[s[right]] = right # If the length of hashmap exceeds 2, remove the leftmost character if len(hashmap) > 2: del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"# Task You are given a string `s` and a non-negative integer `k`. You need to check if it is possible to create a palindrome from the string by rearranging its characters and, if necessary, removing up to `k` characters. Your function should return `True` if it is possible, and `False` otherwise. A string is a palindrome if it reads the same forward and backward. # Example For `s = \\"civic\\", k = 0`, the output should be `True`. For `s = \\"ivicc\\", k = 0`, the output should be `True`. For `s = \\"hello\\", k = 1`, the output should be `False`. For `s = \\"racecar\\", k = 1`, the output should be `True`. # Input/Output - `[input]` string `s` A non-empty string consisting of lowercase English letters. - `[input]` integer `k` Non-negative integer indicating the maximum number of characters that can be removed. Constraints: `0 ≤ k ≤ 100` - `[output]` a boolean Return `True` if it is possible to create a palindrome after removing up to `k` characters, otherwise return `False`.","solution":"def can_form_palindrome(s, k): Determine if the string `s` can be rearranged into a palindrome by removing up to `k` characters. from collections import Counter char_counts = Counter(s) odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # We can have at most one character with an odd count in a palindrome # Remove up to `k` characters to potentially reduce odd counts if odd_count - k <= 1: return True return False"},{"question":"# Sum Between Two Integers ___ # Task **_Given_** two *integers*, **_Find_** *the sum of all the integers between those two integers, inclusive*. For example, given the integers `3` and `7`, the sum would be `3 + 4 + 5 + 6 + 7 = 25`. You can assume the two integers will not be equal, and that the first integer can be either smaller or greater than the second. ___ # Input - Two integers: `a` and `b` where `a` ≠ `b`. ___ # Output - An integer representing the sum of all integers between `a` and `b` inclusive. ___ # Example ``` sumBetween(3, 7) ==> return (25) ``` Explanation: * The sum of all integers from 3 to 7 inclusive is `3 + 4 + 5 + 6 + 7 = 25`. ___ ``` sumBetween(-2, 2) ==> return (0) ``` Explanation: * The sum of all integers from -2 to 2 inclusive is `-2 + (-1) + 0 + 1 + 2 = 0`. ___ ``` sumBetween(5, -1) ==> return (14) ``` Explanation: * The sum of all integers from -1 to 5 inclusive is `-1 + 0 + 1 + 2 + 3 + 4 + 5 = 14`. ___ ___ ___ __ALL translations are welcomed__ __Enjoy Learning !!__ # Zizou","solution":"def sum_between(a, b): Returns the sum of all the integers between a and b, inclusive. Args: a (int): First integer b (int): Second integer Returns: int: The sum of all integers between a and b, inclusive. if a > b: a, b = b, a return sum(range(a, b + 1))"},{"question":"# Task Given a list of non-negative integers, arrange them such that they form the largest possible number. # Example For `[10, 2]`, the output should be `210`; For `[3, 30, 34, 5, 9]`, the output should be `9534330`. # Input/Output - `[input]` list of non-negative integers `arr` Constraints: `1 ≤ arr.length ≤ 100` and `0 ≤ arr[i] ≤ 10^9`. - `[output]` a string representing the largest formed number.","solution":"from functools import cmp_to_key def largest_number(arr): Given a list of non-negative integers, arrange them such that they form the largest possible number. # Custom comparator to use for sorting def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert integers to strings for easy concatenation and comparison arr = list(map(str, arr)) # Sort using custom comparator arr.sort(key=cmp_to_key(compare)) # Edge case: if the largest number is \'0\', return it instead of \'000...\' if arr[0] == \'0\': return \'0\' # Join sorted array into a single string return \'\'.join(arr)"},{"question":"Your team is developing a data analysis tool that will analyze sequences of numbers. To enable certain functionalities, you need to build a subroutine that identifies peaks in the data sequence. A peak is defined as an element which is greater than its immediate neighbors. You will be given an array of integers. Your task is to implement a function that returns an array of the indices of all the peak elements in the input array. If no peaks are found, return an empty array. *Conditions:* - The first and last elements of the array cannot be peaks. - The array length will always be greater than or equal to 3. Example ``` find_peaks([1, 3, 2, 4, 1, 6, 5]) === [1, 3, 5] ``` Explanation: * Element at index 1 (3) is a peak because it\'s greater than its neighbors 1 and 2. * Element at index 3 (4) is a peak because it\'s greater than its neighbors 2 and 1. * Element at index 5 (6) is a peak because it\'s greater than its neighbors 1 and 5.","solution":"def find_peaks(arr): Returns a list of indices of all peak elements in the input array. A peak element is greater than its immediate neighbors. peaks = [] for i in range(1, len(arr) - 1): if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: peaks.append(i) return peaks"},{"question":"Write a function that checks if two given arrays, `a` and `b`, are reverse of each other. The function should return true if `b` is exactly the reverse of `a` and false otherwise. For example: - `isReverse([1, 2, 3], [3, 2, 1])` should return `true` since array `b` is the reverse of array `a`. - `isReverse([1, 2, 3], [1, 2, 3])` should return `false` since `b` is not the reverse of `a`. - `isReverse([1, 2, 3], [3, 1, 2])` should return `false` since `b` is not the exact reverse of `a`. Constraints: - Input arrays may consist of integers or characters. - Both arrays will have the same length. - The length of the arrays will be between 1 and 1000. Implement the function `isReverse(a, b)` which takes in two arrays and returns a boolean indicating if one is the reverse of the other.","solution":"def isReverse(a, b): Check if array b is the reverse of array a. Parameters: a (list): The original array. b (list): The array to check if it is the reverse of a. Returns: bool: True if b is the reverse of a, False otherwise. return a == b[::-1]"},{"question":"Pat is organizing a hiking trip with a group of friends. There are n hiking trails, numbered from 1 to n, and each trail has a respective difficulty level d_1, d_2, ldots, d_n. Pat wants to select a consecutive subset of trails such that the product of their difficulty levels is a perfect square. Since Pat wants everyone to enjoy the hike, he wants the subset of trails to be as short as possible. A perfect square is an integer that is the product of an integer multiplied by itself. -----Input----- The first line contains a single integer n (1 le n le 10^4) — the number of hiking trails. The second line contains n integers d_1, d_2, ldots, d_n (1 le d_i le 10^6) — the difficulty levels of the trails. -----Output----- If no such subset exists, print -1. Otherwise, print a single integer x — the length of the shortest subset of consecutive trails such that the product of their difficulty levels is a perfect square. -----Examples----- Input 5 2 4 6 8 10 Output 1 Input 3 2 3 5 Output -1","solution":"def is_perfect_square(x): if x < 0: return False root = int(x**0.5) return root * root == x def shortest_consecutive_perfect_square_subset(n, difficulties): from math import gcd from collections import defaultdict def product_is_perfect_square(product): return is_perfect_square(product) for length in range(1, n+1): cum_product = 1 product_map = defaultdict(int) for i in range(n): cum_product *= difficulties[i] if i >= length-1: if product_is_perfect_square(cum_product): return length cum_product //= difficulties[i - length + 1] return -1"},{"question":"# Merge n Sorted Lists You are given `n` sorted linked lists. Your task is to merge these sorted linked lists into one sorted linked list and return it. Use a minimum heap (or priority queue) to efficiently merge the lists. The ListNode class is defined as follows: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` The function signature is: ```python def mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]: ``` Input: - `lists`: A list of `n` sorted linked lists, where `n` is a non-negative integer. Output: - The head of a single merged sorted linked list. Example: ```python # Example lists list1 = ListNode(1, ListNode(4, ListNode(5))) list2 = ListNode(1, ListNode(3, ListNode(4))) list3 = ListNode(2, ListNode(6)) lists = [list1, list2, list3] # Expected Output: Merged list with nodes holding values: 1 -> 1 -> 2 -> 3 -> 4 -> 4 -> 5 -> 6 merged_head = mergeKLists(lists) ``` Constraints: - The number of linked lists in `lists` is in the range `[0, 10^4]`. - The total number of nodes across all linked lists is in the range `[0, 10^4]`. - The node values are in the range `[-10^4, 10^4]`. - Each linked list is sorted in non-decreasing order. Notes: - If no linked lists are given (i.e., `lists` is empty), return `None`. - If only one linked list is given, return it as is. Develop a function that efficiently merges the sorted linked lists by maintaining a priority queue (min heap) for deciding the smallest node at each step. This approach reduces the overall time complexity compared to directly merging by other methods, making it scalable for larger input sizes.","solution":"from typing import List, Optional import heapq class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]: if not lists: return None class Wrapper: def __init__(self, node): self.node = node def __lt__(self, other): return self.node.val < other.node.val min_heap = [] for l in lists: if l: heapq.heappush(min_heap, Wrapper(l)) dummy = ListNode(0) current = dummy while min_heap: smallest_node = heapq.heappop(min_heap).node current.next = smallest_node current = current.next if smallest_node.next: heapq.heappush(min_heap, Wrapper(smallest_node.next)) return dummy.next"},{"question":"Create a function called `flatten_and_sum` that takes a list of integers and nested lists of integers (which may contain further nested lists) and returns the sum of all the integers in the structure. For example, given the input `[1, [2, [3, 4], 5], 6]`, the function `flatten_and_sum` should return `21`. Please ensure that the function can handle lists nested at any level and correctly sum all integer values found within.","solution":"def flatten_and_sum(nested_list): Returns the sum of all integers in the nested structure. total_sum = 0 for element in nested_list: if isinstance(element, int): total_sum += element elif isinstance(element, list): total_sum += flatten_and_sum(element) return total_sum"},{"question":"Given two strings A and B of equal length, the strings are considered \\"buddy strings\\" if you can swap exactly two characters in string A to get string B. Return true if and only if A and B are buddy strings. Example 1: Input: A = \\"ab\\", B = \\"ba\\" Output: true Example 2: Input: A = \\"ab\\", B = \\"ab\\" Output: false Example 3: Input: A = \\"aa\\", B = \\"aa\\" Output: true Example 4: Input: A = \\"aaaaaaabc\\", B = \\"aaaaaaacb\\" Output: true Example 5: Input: A = \\"\\", B = \\"\\" Output: false Note: 1. 0 <= A.length <= 20000 2. A and B consist of lowercase letters.","solution":"def buddy_strings(A, B): Given two strings A and B, return true if and only if we can swap exactly two characters in A to get B. # If lengths are not equal, they cannot be buddy strings if len(A) != len(B): return False # If A and B are the same, check if there is any character with frequency more than 1 if A == B: return len(set(A)) < len(A) # Find characters in A that are different from characters in the same position in B diff = [] for a, b in zip(A, B): if a != b: diff.append((a, b)) # There must be exactly 2 differences and they must be reversible to be buddy strings return len(diff) == 2 and diff[0] == diff[1][::-1]"},{"question":"Gru has been planning a surprise birthday party for Dr. Nefario. Gru has M different party games prepared, each requiring a fixed number of minions to play. However, each minion can only participate in one party game at a time. Gru wants to know the maximal number of games that can be played simultaneously given the number of minions available and the number of minions required for each game. -----Input----- First line contains one integer T, the number of test cases. Each test case consists of two lines. The first line contains two space-separated integers B and M, the total number of minions available and the number of games respectively. The second line contains M space-separated integers representing the number of minions required for each game. -----Output----- For each test case, output the maximal number of games that can be played simultaneously. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ B ≤ 10^3 - 1 ≤ M ≤ 10^2 - 1 ≤ number of minions required for each game ≤ 10^2 -----Example----- Input: 2 10 4 2 3 4 5 8 3 5 5 5 Output: 3 1 -----Explanation----- Example case 1: Gru has 10 minions. The minions required for the 4 games are [2, 3, 4, 5]. He can choose games that require 2, 3, and 4 minions respectively, using a total of 9 minions, which maximizes the number of games played simultaneously (i.e., 3 games). Example case 2: Gru has 8 minions. The minions required for the 3 games are [5, 5, 5]. He can only choose one game as he does not have enough minions to play more than one game that each requires 5 minions.","solution":"def max_games_played(T, test_cases): results = [] for i in range(T): B, M = test_cases[i][0] minions_required = sorted(test_cases[i][1]) max_games = 0 total_minions_used = 0 for game in minions_required: if total_minions_used + game <= B: total_minions_used += game max_games += 1 else: break results.append(max_games) return results"},{"question":"On a forest trail, there are N trees, each with a certain height. You are standing at the start of the trail, and you can perform an operation to change the height of any tree by increasing or decreasing its height by 1 unit. Your goal is to make the heights of all trees the same with the minimum number of operations. You are given an array \'heights\' where heights[i] represents the height of the i-th tree. Write a function to find the minimum number of operations needed to make the heights of all trees the same. Example: Input: heights = [1, 2, 3] Output: 2 Explanation: Either increase the height of the first tree to 3 and the second tree to 3 for a total of 2 operations, or decrease the height of the third tree to 1 and the second tree to 1 for a total of 2 operations. Note: - heights.length <= 1000 - 1 <= heights[i] <= 10000","solution":"def min_operations_to_equal_heights(heights): This function calculates the minimum number of operations required to make all tree heights the same. if not heights: return 0 median_height = sorted(heights)[len(heights) // 2] operations = sum(abs(height - median_height) for height in heights) return operations"},{"question":"You are given a list of integers. Your task is to find the largest sum of a contiguous subarray, where the length of the subarray is at most `k`. In case there are multiple subarrays with the same largest sum, return the smallest length of these subarrays. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of elements in the list. The second line contains `n` space-separated integers a_i (-10^4 le a_i le 10^4) — the elements of the list. The third line contains an integer k (1 le k le n) — the maximum length of the subarray. -----Output----- Print two integers: the largest sum of a contiguous subarray of length at most `k`, and the smallest length of such subarray that gives this largest sum. -----Example----- Input 8 -1 -2 3 4 -1 2 1 -5 4 Output 8 4","solution":"def max_subarray_k_length(arr, k): Returns the largest sum of a contiguous subarray of length at most k and the smallest length of such subarray. n = len(arr) max_sum = float(\'-inf\') min_length = k for length in range(1, k + 1): # lengths from 1 to k current_sum = sum(arr[:length]) if current_sum > max_sum: max_sum = current_sum min_length = length for i in range(length, n): current_sum += arr[i] - arr[i - length] if current_sum > max_sum: max_sum = current_sum min_length = length return max_sum, min_length"},{"question":"A new e-commerce website tracks daily sales of various products. The website wants to keep track of cumulative sales statistics effectively to answer a range of daily queries. Your task is to implement a system that processes sale transactions and answers range sum queries. You are given the following tasks for each day: 1. Record sale transactions for products. 2. Answer range sum queries. Each sale transaction is of the form: - `1 x v` which means the product with ID `x` had `v` number of units sold. Each range sum query is of the form: - `2 l r` which asks for the total number of units sold for products with IDs from `l` to `r` inclusive. # Input The first line contains two integers `n` and `q`. - `n`: the number of products (1 ≤ n ≤ 100,000) - `q`: the number of queries (1 ≤ q ≤ 100,000) The next `q` lines describe either a transaction or a range sum query: - If the line starts with `1`, it\'s followed by two integers `x` and `v` representing a sale transaction. - If the line starts with `2`, it\'s followed by two integers `l` and `r` representing a range sum query. # Output For each range sum query, output a single integer which is the total number of units sold for products from `l` to `r`. # Sample Input 5 6 1 1 100 1 2 150 2 1 3 1 3 200 1 4 50 2 1 4 # Sample Output 250 500 # Explanation In the first query: `2 1 3`, the total sales for products with IDs from 1 to 3 are `100 + 150 + 0 = 250`. In the second query: `2 1 4`, the total sales for products with IDs from 1 to 4 are `100 + 150 + 200 + 50 = 500`.","solution":"class CumulativeSales: def __init__(self, n): self.sales = [0] * (n + 1) def record_sale(self, x, v): self.sales[x] += v def range_sum_query(self, l, r): return sum(self.sales[l:r+1]) def process_queries(n, queries): sales_system = CumulativeSales(n) results = [] for query in queries: if query[0] == 1: _, x, v = query sales_system.record_sale(x, v) elif query[0] == 2: _, l, r = query results.append(sales_system.range_sum_query(l, r)) return results"},{"question":"Implement a Python class `LinkedList` that represents a singly linked list. The class should support the following operations: 1. Initialize the linked list ```python >>> ll = LinkedList() >>> ll.head None ``` 2. Append a node with a given value to the end of the linked list ```python >>> ll.append(1) >>> ll.append(2) >>> ll.head.value 1 >>> ll.head.next.value 2 ``` 3. Prepend a node with a given value to the beginning of the linked list ```python >>> ll.prepend(0) >>> ll.head.value 0 ``` 4. Delete the first node with a given value ```python >>> ll.delete(2) >>> ll.head.next None ``` 5. Check if a value exists in the linked list ```python >>> ll.exists(1) True >>> ll.exists(3) False ``` You should define the internal `Node` class to represent nodes in the linked list, and the `LinkedList` class should manage the nodes: ```python class Node: def __init__(self, value, next_node=None): self.value = value self.next = next_node class LinkedList: def __init__(self): self.head = None def append(self, value): new_node = Node(value) if not self.head: self.head = new_node return current = self.head while current.next: current = current.next current.next = new_node def prepend(self, value): new_node = Node(value, self.head) self.head = new_node def delete(self, value): if not self.head: return if self.head.value == value: self.head = self.head.next return current = self.head while current.next and current.next.value != value: current = current.next if current.next: current.next = current.next.next def exists(self, value): current = self.head while current: if current.value == value: return True current = current.next return False ```","solution":"class Node: def __init__(self, value, next_node=None): self.value = value self.next = next_node class LinkedList: def __init__(self): self.head = None def append(self, value): new_node = Node(value) if not self.head: self.head = new_node return current = self.head while current.next: current = current.next current.next = new_node def prepend(self, value): new_node = Node(value, self.head) self.head = new_node def delete(self, value): if not self.head: return if self.head.value == value: self.head = self.head.next return current = self.head while current.next and current.next.value != value: current = current.next if current.next: current.next = current.next.next def exists(self, value): current = self.head while current: if current.value == value: return True current = current.next return False"},{"question":"Task ====== Create a simple vending machine simulator. The vending machine should allow a user to select an item, accept money, vend the selected item, and provide correct change. The vending machine stores items with their prices and provides a fixed inventory at the start. The machine accepts only specific denominations of coins: 1 cent, 5 cents, 10 cents, 25 cents, 50 cents, and 1 dollar. Coins below 1 cent or above 100 cents are considered invalid. Requirements ====== The vending machine should handle the following commands: 1. `select_item(item_name)`: Choose an item to purchase. Returns a message indicating selection and price, or an error if the item is not available. 2. `insert_coin(coin)`: Insert a coin into the vending machine. Returns a message indicating the total amount inserted so far, or an error if the coin is invalid. 3. `vend()`: Dispense the selected item if enough money has been inserted, return the remaining change, or an error if insufficient money has been provided. 4. `restock(items)`: Restock the vending machine with additional items and quantities. Returns a summary of the items restocked. 5. `cancel()`: Cancel the transaction and return any inserted money. Assumptions ====== * The vending machine starts with a predefined inventory of items and their prices. * Users can only select one item at a time. * If the machine cannot dispense exact change, it returns an error and the transaction fails. Examples ====== Initial Inventory: ``` {\'soda\': {\'price\': 125, \'quantity\': 5}, \'chips\': {\'price\': 50, \'quantity\': 10}, \'candy\': {\'price\': 65, \'quantity\': 20}} ``` Sample Use Case: ```python vm = VendingMachine(inventory) vm.select_item(\'soda\') # Output: \\"Soda selected. Price: 125 cents.\\" vm.insert_coin(100) # Output: \\"Inserted 100 cents, total inserted so far: 100 cents.\\" vm.insert_coin(25) # Output: \\"Inserted 25 cents, total inserted so far: 125 cents.\\" vm.vend() # Output: \\"Vending soda. No change.\\" vm.select_item(\'chips\') # Output: \\"Chips selected. Price: 50 cents.\\" vm.insert_coin(25) # Output: \\"Inserted 25 cents, total inserted so far: 25 cents.\\" vm.cancel() # Output: \\"Transaction canceled. Returned 25 cents.\\" ``` Notes ====== * Ensure error handling for insufficient funds, out-of-stock items, and invalid coin denominations. * The `restock` function takes a dictionary with items and their quantities. * Implement the simulator in a class structure with appropriate methods.","solution":"class VendingMachine: def __init__(self, inventory): self.inventory = inventory self.current_item = None self.current_inserted = 0 self.valid_coins = {1, 5, 10, 25, 50, 100} def select_item(self, item_name): if item_name in self.inventory and self.inventory[item_name][\'quantity\'] > 0: self.current_item = item_name price = self.inventory[item_name][\'price\'] return f\\"{item_name.title()} selected. Price: {price} cents.\\" else: return \\"Item not available.\\" def insert_coin(self, coin): if coin in self.valid_coins: self.current_inserted += coin return f\\"Inserted {coin} cents, total inserted so far: {self.current_inserted} cents.\\" else: return \\"Invalid coin.\\" def vend(self): if self.current_item is None: return \\"No item selected.\\" item_price = self.inventory[self.current_item][\'price\'] if self.current_inserted < item_price: return f\\"Insufficient funds. Please insert {item_price - self.current_inserted} more cents.\\" self.inventory[self.current_item][\'quantity\'] -= 1 change = self.current_inserted - item_price self.current_item = None self.current_inserted = 0 if change == 0: return \\"Vending item. No change.\\" else: return f\\"Vending item. Returning {change} cents.\\" def restock(self, items): for item, details in items.items(): if item in self.inventory: self.inventory[item][\'quantity\'] += details[\'quantity\'] else: self.inventory[item] = details return \\"Inventory restocked.\\" def cancel(self): change = self.current_inserted self.current_item = None self.current_inserted = 0 return f\\"Transaction canceled. Returned {change} cents.\\""},{"question":"Write a program that takes an integer input and returns the English word representation of that number. The input will be a non-negative integer less than 1000. For example: Input: 123 Output: \\"one hundred twenty-three\\" Input: 45 Output: \\"forty-five\\"","solution":"def number_to_words(num): Converts a non-negative integer less than 1000 to its English words representation. if num == 0: return \\"zero\\" ones = [\\"\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\"] teens = [\\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"] tens = [\\"\\", \\"\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] result = [] # Handle hundreds place if num >= 100: result.append(ones[num // 100]) result.append(\\"hundred\\") num %= 100 # Handle tens and ones place if num >= 20: result.append(tens[num // 10]) num %= 10 if num > 0: result.append(ones[num]) elif num >= 10: result.append(teens[num - 10]) elif num > 0: result.append(ones[num]) return \\" \\".join(result)"},{"question":"In a game of archery, an archer is required to hit as many targets as possible. Each target is placed at varying distances from the archer. The archer can shoot arrows towards these targets but there are constraints on the maximum reach of each arrow. Additionally, each arrow can only be shot at a target within its maximum reach. You are required to determine the maximum number of targets that the archer can hit with the given set of arrows. -----Input:----- The first line contains an integer T denoting the number of test cases. Each of the test cases is as follows: - The first line consists of two integers N and M where N is the number of targets and M is the number of arrows. - The second line consists of N integers where each integer denotes the distance of a target from the archer. - The third line consists of M integers where each integer denotes the maximum reach of an arrow. -----Output:----- For each test case, print a single line denoting the maximum number of targets the archer can hit. -----Constraints----- - 1 leq T leq 100 - 1 leq N, M leq 1000 - Each target distance is a positive integer less than or equal to 10^4 - Each arrow\'s reach is a positive integer less than or equal to 10^4 -----Example Input----- 2 5 3 15 25 35 45 55 30 50 10 4 4 10 20 30 40 25 35 15 45 -----Example Output----- 2 4 -----Explanation----- - For the first case, the archer can use the arrows with reach 30 and 50 to hit 2 targets (15, 25). - For the second case, the archer can use each of the four arrows to hit each of the four targets.","solution":"def max_targets_hit(T, test_cases): result = [] for case in test_cases: N, M = case[\'NM\'] targets = case[\'targets\'] arrows = case[\'arrows\'] # Sort both the lists targets.sort() arrows.sort() hit_count = 0 i, j = 0, 0 # Use two pointers to find maximum number of hits while i < N and j < M: if arrows[j] >= targets[i]: hit_count += 1 i += 1 j += 1 result.append(hit_count) return result # Example usage T = 2 test_cases = [ {\'NM\': (5, 3), \'targets\': [15, 25, 35, 45, 55], \'arrows\': [30, 50, 10]}, {\'NM\': (4, 4), \'targets\': [10, 20, 30, 40], \'arrows\': [25, 35, 15, 45]} ] result = max_targets_hit(T, test_cases) for res in result: print(res)"},{"question":"Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Additionally, find the starting and ending indices of that subarray. Example: Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6, with start index 3 and end index 6 Explanation: The subarray [4,-1,2,1] has the largest sum = 6. Note: The array can contain both positive and negative integers. The length of the array will not exceed 100,000.","solution":"def max_subarray_sum(nums): Finds the contiguous subarray which has the largest sum and returns its sum along with the start and end indices of that subarray. if not nums: return 0, -1, -1 max_sum = current_sum = nums[0] start = end = temp_start = 0 for i in range(1, len(nums)): if current_sum < 0: current_sum = nums[i] temp_start = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, start, end"},{"question":"Alice is a game enthusiast who loves puzzles. Recently, she came across a unique game involving string transformations and is eager to solve it. The game starts with a string `S` composed of lowercase alphabets. Alice can perform the following operation any number of times: - Replace any substring \\"abc\\" with \\"cba\\". She wants to know the lexographically smallest string she can obtain after applying the above operation any number of times. Can you help her achieve this? -----Input:----- - The first line will contain a single integer T, the number of test cases. - Each of the next T lines will contain a string S. -----Output:----- For each test case, output the lexographically smallest string that can be obtained. -----Constraints----- - 1 leq T leq 100 - 1 leq |S| leq 10^5 -----Sample Input:----- 3 abc cba abccba -----Sample Output:----- abc abc aabbcc -----EXPLANATION:----- In the first case, the only possible transformation is \\"abc\\" to \\"cba\\". However, the smallest lexographical string is \\"abc\\". In the second case, \\"cba\\" transforms to \\"abc\\". In the third case, repeated applications of the transformation make the string in sorted order \\"aabbcc\\".","solution":"def lexicographical_min_string(S): Given a string S, returns the lexicographically smallest string by replacing any \\"abc\\" with \\"cba\\" any number of times. # Since replacing \\"abc\\" with \\"cba\\" or \\"cba\\" with \\"abc\\" sorts the characters, # the smallest lexicographical string will be the sorted version of S. return \'\'.join(sorted(S)) def process_test_cases(T, test_cases): results = [] for i in range(T): result = lexicographical_min_string(test_cases[i]) results.append(result) return results"},{"question":"# Description Write a function `findBalancedString` that checks if a given string is balanced. A string is considered balanced if for every opening parenthesis `\\"(\\"` there is a corresponding closing parenthesis `\\")\\"` and they are correctly nested. Criteria 1. The function accepts a single parameter: - `s` (string): The string containing only parentheses. 2. The function should return a boolean value: - `true` if the string is balanced. - `false` otherwise. 3. The string may contain zero or more parentheses. 4. The complexity of the solution should be O(n), where n is the length of the string. Example ```python findBalancedString(\\"()\\") # returns True findBalancedString(\\")(()\\") # returns False findBalancedString(\\"(()(()))\\") # returns True findBalancedString(\\"((())\\") # returns False ```","solution":"def findBalancedString(s): Check if the given string is balanced in terms of parentheses. Args: s (str): The input string containing only parentheses. Returns: bool: True if the string is balanced, otherwise False. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"# Task You are given two integers `x` and `y`. Your task is to find the minimum number of operations required to transform the number `x` into the number `y`. You can perform the following operations: ``` 1. Multiply the current number by 2. 2. Subtract 1 from the current number. ``` You need to minimize the number of operations to achieve this transformation. # Example For `x = 2` and `y = 3`, the result should be `2`. Transformation: `2 -> 4 -> 3` So, the result is 2. For `x = 5` and `y = 8`, the result should be `2`. Transformation: `5 -> 4 -> 8` So, the result is 2. For `x = 3` and `y = 6`, the result should be `3`. Transformation: `3 -> 6` So, the result is 1. # Input/Output - `[input]` integer `x` the starting number, where 1 <= x <= 10^9. - `[input]` integer `y` the target number, where 1 <= y <= 10^9. - `[output]` an integer the minimum number of operations required to transform `x` into `y`.","solution":"def min_operations(x, y): Returns the minimum number of operations to transform x into y using the given operations: 1. Multiply the current number by 2. 2. Subtract 1 from the current number. operations = 0 while y > x: if y % 2 == 0: y //= 2 else: y += 1 operations += 1 # Add the difference between x and y to operations operations += x - y return operations"},{"question":"You are given a list of non-negative integers representing the amount of gold in various piles. Alice and Bob take turns picking gold from one of the piles, with Alice starting first. In each turn, a player can pick any positive amount of gold from a single pile. However, the amount picked must be greater than half of the current total amount in that pile. The game ends when there is no valid move for a player to make. The player who cannot make a move loses. Return True if and only if Alice wins the game, assuming both players play optimally. Example: Input: piles = [5, 7, 9] Output: True Explanation: Alice can start by picking 5 gold from the pile with 9 gold. Now the piles are [5, 7, 4]. Bob can then pick 4 gold from the pile with 7 gold. Now the piles are [5, 3, 4]. Both players continue picking optimally but Alice will always have a winning strategy. Notes: 1 <= piles.length <= 1000. 0 <= piles[i] <= 10^6.","solution":"def can_alice_win(piles): Determines if Alice will win the game assuming both play optimally. Alice starts first and in each turn, a player can pick any positive amount of gold from a single pile. However, the amount picked must be greater than half of the current total amount in that pile. :param piles: List[int] - List of non-negative integers representing gold piles. # Alice wins if the total number of piles is odd return len(piles) % 2 == 1"},{"question":"Write a function `findMedian` that takes a list of integers and returns the median value. The list can have an odd or even number of elements. If the number of elements is even, the median is the average of the two middle numbers. Example: ```python findMedian([1, 3, 3, 6, 7, 8, 9]) -> 6 findMedian([1, 2, 3, 4, 5, 6, 8, 9]) -> 4.5 ```","solution":"def findMedian(nums): Returns the median value of a list of integers. :param nums: List of integers :return: Median value as an integer or float nums_sorted = sorted(nums) n = len(nums_sorted) mid = n // 2 if n % 2 == 0: median = (nums_sorted[mid - 1] + nums_sorted[mid]) / 2 else: median = nums_sorted[mid] return median"},{"question":"Write a function `reorganize_string` that receives a string `s` and returns a new string with the characters rearranged such that no two adjacent characters are the same. If it is not possible to rearrange the characters in such a way, the function should return an empty string. # Example 1: ``` Input: \\"aab\\" Output: \\"aba\\" Explanation: The first \'a\' and \'b\' are adjacent, so we place \'b\' between the \'a\'s to ensure no two adjacent characters are the same. ``` # Example 2: ``` Input: \\"aaab\\" Output: \\"\\" Explanation: It is not possible to rearrange the characters to ensure no two adjacent characters are the same. ``` The function should have the following signature: ```python def reorganize_string(s: str) -> str: ``` # Constraints - The input string `s` will contain only lowercase English letters. - The length of the input string will be in the range `[1, 100]`. To solve this problem, you need to: 1. Count the frequencies of each character in the string. 2. Use a max heap (or a priority queue) to store characters by their frequencies in descending order. 3. Place the most frequent character at alternated positions to avoid placing the same characters adjacent to each other. 4. If the arrangement is not possible, return an empty string. Otherwise, return the reorganized string.","solution":"from heapq import heappop, heappush from collections import Counter def reorganize_string(s: str) -> str: Rearranges the characters of string s so that no two adjacent characters are the same. If it is not possible, returns an empty string. # Count the frequencies of each character count = Counter(s) # Create a max heap based on character frequencies (negative for max heap in Python) max_heap = [] for char, freq in count.items(): heappush(max_heap, (-freq, char)) prev_freq, prev_char = 0, \'\' result = [] # Reorganize string while max_heap: freq, char = heappop(max_heap) result.append(char) # If there\'s a previous character to push back into the heap if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) # Update previous character and frequency prev_freq = freq + 1 # Decrease frequency by 1 (since it\'s negative) prev_char = char # If the length of the result is not the same as the input string, return empty string if len(result) != len(s): return \\"\\" return \\"\\".join(result)"},{"question":"Implement `Array#my_transpose`, which returns a new array with the rows and columns transposed. If given a non-square matrix or an empty array, it should raise an `ArgumentError`. The method should work correctly for rectangular matrices as well.","solution":"def my_transpose(matrix): Returns a new array with the rows and columns transposed. If the matrix is not rectangular or empty, raises an ArgumentError. if not matrix or not all(len(row) == len(matrix[0]) for row in matrix): raise ValueError(\\"Input must be a non-empty rectangular matrix.\\") return [list(row) for row in zip(*matrix)]"},{"question":"# Background A local library has implemented an automatic book return system. When a book is returned, it gets placed on the nearest available shelf. The library has multiple rows of shelves, each with a specific capacity. When a returning book arrives, it needs to be placed in an empty spot on the shelves, starting from the first row to the last. It will always fill up one row before moving to the next. Your task is to write a function to mimic this behavior and determine the final state of the shelves after all the books have been placed. # Input The input consists of: 1. An integer `n` representing the number of rows of shelves. 2. An integer `m` representing the capacity (number of slots) of each row. 3. A list of integers `books` representing the books being returned, where each integer is the unique ID of a book. ``` def place_books(n: int, m: int, books: List[int]) -> List[List[int]]: pass ``` Where: - `n` (1 <= `n` <= 100) – number of rows - `m` (1 <= `m` <= 100) – capacity of each row - `books` (1 <= len(`books`) <= `n`*`m`) – list containing the IDs of the books being returned # Output The function should return a list of lists representing the final state of the shelves. Each list represents a row on the shelf, and each element in that list is the ID of a book in that slot. # Example ```python n = 3 m = 4 books = [101, 102, 103, 104, 105, 106, 107] # The shelves should be filled as follows: # Row 1: [101, 102, 103, 104] # Row 2: [105, 106, 107] # Row 3: [] print(place_books(n, m, books)) # Output: [[101, 102, 103, 104], [105, 106, 107], []] ``` # Notes - Books are placed from left to right in each row. - If a row is full, start filling the next row. - Return the final state of the shelves after all books have been placed. - Ensure that no unnecessary gaps or empty slots are present in the final structure of the shelves. This means any `[]` rows should be an accurate portrayal of remaining empty slots if not needed for remaining books.","solution":"from typing import List def place_books(n: int, m: int, books: List[int]) -> List[List[int]]: shelves = [[] for _ in range(n)] current_row = 0 for book in books: if len(shelves[current_row]) == m: current_row += 1 shelves[current_row].append(book) return shelves"},{"question":"Given a string of numbers separated by commas, determine whether the numbers form a permutation of all integers in the range from the smallest integer in the list to the largest integer in the list (inclusive). Return: - `0` if the numbers form such a permutation without any duplicates (\\"valid permutation\\"). - `1` if there are any non-numeric elements or if the list contains any duplicates (\\"invalid input\\"). Examples ``` \\"1,2,3,4,5\\" ==> return 0, because the numbers form a valid permutation \\"3,5,4,1,2\\" ==> return 0, because the numbers form a valid permutation (order doesn\'t matter) \\"1,2,3,5,6\\" ==> return 1, because 4 is missing from the sequence \\"1,2,a,4,5\\" ==> return 1, because it contains a non numerical character \\"1,2,2,3,4\\" ==> return 1, because it contains duplicate numbers ```","solution":"def check_permutation(s): Returns 0 if the given string of numbers forms a valid permutation, and 1 if it contains any invalid input or duplicates. # Split the string by commas number_list = s.split(\',\') # Check for non-numeric elements try: number_list = [int(num) for num in number_list] except ValueError: return 1 # Check for duplicates if len(number_list) != len(set(number_list)): return 1 # Determine the range of numbers min_num = min(number_list) max_num = max(number_list) # Check if it forms a valid permutation if set(number_list) == set(range(min_num, max_num + 1)): return 0 else: return 1"},{"question":"Given a list of integers, write a function that determines the number of subsets with a sum equal to a target value. A subset is a sequence that can be derived by deleting some or none of the elements without changing the order of the remaining elements. Assume all numbers in the list are non-negative. For example: find_subsets([1, 2, 3, 4, 5], 5) = 3 In this instance, there are three subsets that sum to 5: [2, 3], [1, 4], and [5]. The function should take two arguments: 1. A list of integers. 2. An integer representing the target sum. The function should return the number of subsets that sum up to the target value. Note: - The list cannot be empty, and it can contain up to 20 integers. - The target value will always be a non-negative integer. You can implement this function in any programming language you prefer.","solution":"def find_subsets(nums, target): Return the number of subsets the sum of which is equal to the target. def count_subsets(nums, n, target): if target == 0: return 1 if n == 0: return 0 if nums[n-1] > target: return count_subsets(nums, n-1, target) return count_subsets(nums, n-1, target) + count_subsets(nums, n-1, target-nums[n-1]) return count_subsets(nums, len(nums), target)"},{"question":"You are given an array of integers representing the prices of different items over a number of days. Your task is to determine the maximum profit you could have achieved by buying one item and then selling it on a later day. You must write a function that takes in a list of prices and returns the maximum possible profit. If no profit can be made, return 0. For instance, given the list of prices: ```python [7, 1, 5, 3, 6, 4] ``` Your function should return: ```python 5 ``` Here, buying on day 2 (price = 1) and selling on day 5 (price = 6) yields the maximum profit, 6 - 1 = 5. Another example: ```python [7, 6, 4, 3, 1] ``` Your function should return: ```python 0 ``` In this case, no transaction is done, as no profit can be achieved.","solution":"def max_profit(prices): Computes the maximum profit from a list of prices by buying on one day and selling on a later day. :param prices: List[int] - A List of integers representing prices of an item over a number of days. :return: int - The maximum profit that can be achieved, 0 if no profit is possible. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). In this task, we focus on numeric palindromes. For instance, `121`, `12321`, and `4554` are numeric palindromes. Numbers like `123` or `45234` are not numeric palindromes. # Examples - `121` is a numeric palindrome (`121` reads the same forwards and backwards). - `12321` is a numeric palindrome (`12321` reads the same forwards and backwards). - `4554` is a numeric palindrome (`4554` reads the same forwards and backwards). - `123` is not a numeric palindrome (`123` does not read the same forwards and backwards). - `45234` is not a numeric palindrome (`45234` does not read the same forwards and backwards). # Your Task Given a number, determine if it is a palindrome or not. Return `true` if it is a numeric palindrome, and `false` if it is not. # Constraints - All inputs will be non-negative integers between `0` and `2^53-1 (9,007,199,254,740,991)`. - Single digit numbers are trivially numeric palindromes. # Function Signature ```python def is_palindrome(n: int) -> bool: pass ```","solution":"def is_palindrome(n: int) -> bool: Determine if a given number is a numeric palindrome. Parameters: n (int): The input number to check. Returns: bool: True if the number is a palindrome, False otherwise. s = str(n) return s == s[::-1]"},{"question":"You are given an integer matrix of size m x n where each cell contains either 0 or 1. Your task is to find the size of the largest square containing only 1s and return its area. If there\'s no such square, return 0. -----Input----- The first line contains two integers m and n (1 ≤ m, n ≤ 300), representing the number of rows and columns, respectively. Each of the next m lines contains n integers (either 0 or 1) representing the matrix. -----Output----- Print a single integer: the area of the largest square containing only 1s. -----Examples----- Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 4 Input 3 3 0 1 0 1 1 1 0 1 0 Output 1 -----Note----- In the first sample, The largest square containing only 1s has a side length of 2. Thus, its area is 4. In the second sample, The largest square containing only 1s has a side length of 1. Thus, its area is 1.","solution":"def maximalSquare(matrix): if not matrix: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0] * n for _ in range(m)] max_side = 0 for i in range(m): for j in range(n): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side"},{"question":"# Rearrange Array by Signs Task Given an **array/list [] of integers**, **return a list** where all **positive integers appear before all negative integers**, preserving the relative order of occurrence of both positive and negative integers from the original list. ___ Notes: * The **array/list size** is *at least 2*. * The **array/list\'s numbers can be both positive and negative**. ___ Input >> Output Examples ``` rearrangeBySigns([1, -2, 3, -4, 5]) ==> return [1, 3, 5, -2, -4] ``` # Explanation: * The *first part* of the result, `[1, 3, 5]`, contains all the positive integers in the same order they appeared in the original list. * The *second part* of the result, `[-2, -4]`, contains all the negative integers in the same order they appeared in the original list. ___ ``` rearrangeBySigns([-1, -2, -3, 4, 5, 6]) ==> return [4, 5, 6, -1, -2, -3] ``` # Explanation: * The *first part* of the result, `[4, 5, 6]`, contains all the positive integers in the same order they appeared in the original list. * The *second part* of the result, `[-1, -2, -3]`, contains all the negative integers in the same order they appeared in the original list. ___ ``` rearrangeBySigns([3, -1, 2, -2, 4, -4]) ==> return [3, 2, 4, -1, -2, -4] ``` # Explanation: * The *first part* of the result, `[3, 2, 4]`, contains all the positive integers in the same order they appeared in the original list. * The *second part* of the result, `[-1, -2, -4]`, contains all the negative integers in the same order they appeared in the original list. ___ Enjoy coding!","solution":"def rearrange_by_signs(arr): Rearrange the given list such that all positive integers appear before all negative integers, preserving their relative order of occurrence. Parameters: arr (list of int): A list of integers which contains both positives and negatives. Returns: list of int: A list where positives appear before negatives with relative order preserved. positives = [x for x in arr if x > 0] negatives = [x for x in arr if x < 0] return positives + negatives"},{"question":"Given an input string representing a mathematical expression, your goal is to evaluate the expression and return the result as an integer. The input string can contain non-negative integers, plus and minus signs (\'+\', \'-\'), and parentheses (\'(\', \')\') to define the order of operations. You can assume the input string is always a valid mathematical expression. Example input: \\"1 + 1\\" Example output: 2 Example input: \\"(1+(4+5+2)-3)+(6+8)\\" Example output: 23 Create a function `evaluate_expression(expression: str) -> int` that takes a string `expression` and returns the evaluation result as an integer. Function signature for Python: ```python def evaluate_expression(expression: str) -> int: ``` Constraints: 1. The length of the input string `expression` will be in the range `[1, 10^4]`. 2. The input string `expression` will be a valid mathematical expression containing only non-negative numbers, \'+\', \'-\', \'(\', \')\' and spaces. 3. It is guaranteed that the parentheses in the input string are well-formed. Your task is to implement this function.","solution":"def evaluate_expression(expression: str) -> int: Evaluates the mathematical expression contained in the given string and returns the result as an integer. :param expression: str - The mathematical expression to evaluate. :return: int - The result of the expression. def helper(s, idx): stack = [] num = 0 sign = 1 while idx < len(s): char = s[idx] if char.isdigit(): num = num * 10 + int(char) elif char == \'+\': stack.append(sign * num) num = 0 sign = 1 elif char == \'-\': stack.append(sign * num) num = 0 sign = -1 elif char == \'(\': num, idx = helper(s, idx + 1) stack.append(sign * num) num = 0 elif char == \')\': stack.append(sign * num) return sum(stack), idx idx += 1 stack.append(sign * num) return sum(stack) return helper(expression, 0)"},{"question":"Magic Square A magic square is a square matrix in which the sum of every row, column, and diagonal is the same. Write a function to check if a given matrix is a magic square. # Function Signature ```python def is_magic_square(matrix: List[List[int]]) -> bool: ``` # Input - matrix: A list of lists where each sublist represents a row in the square matrix. It is guaranteed that the input is a square matrix (all rows are of equal length). # Output - Return `True` if the input matrix is a magic square, otherwise return `False`. # Example ```python matrix_1 = [ [2, 7, 6], [9, 5, 1], [4, 3, 8] ] print(is_magic_square(matrix_1)) # Output: True matrix_2 = [ [3, 5, 7], [8, 1, 6], [4, 9, 2] ] print(is_magic_square(matrix_2)) # Output: False ``` # Constraints 1. The matrix will always be a square matrix, with dimensions n x n where 1 <= n <= 10. 2. Each element in the matrix is an integer.","solution":"from typing import List def is_magic_square(matrix: List[List[int]]) -> bool: n = len(matrix) # Calculate the sum of the first row to use as the target sum target_sum = sum(matrix[0]) # Check sum of all rows for row in matrix: if sum(row) != target_sum: return False # Check sum of all columns for col in range(n): col_sum = sum(matrix[row][col] for row in range(n)) if col_sum != target_sum: return False # Check sum of the main diagonal main_diagonal_sum = sum(matrix[i][i] for i in range(n)) if main_diagonal_sum != target_sum: return False # Check sum of the secondary diagonal secondary_diagonal_sum = sum(matrix[i][n - i - 1] for i in range(n)) if secondary_diagonal_sum != target_sum: return False return True"},{"question":"Magic Subsequence Finder ========================= Given a list of integers, your task is to find the longest subsequence where the absolute difference between any two consecutive elements is exactly equal to a given integer `k`. The subsequence should maintain the order of elements as they appear in the original list. The return value should be the longest such subsequence. If multiple subsequences of the same length exist, return the first one found. If no such subsequence exists, return an empty list. # Example A small example: Given the input list `arr = [1, 5, 9, 2, 6, 10]` and `k = 4`, we need to find the longest subsequence where the absolute difference between consecutive elements is exactly 4. In this example, the result would be `[1, 5, 9]` because `abs(1-5) == 4` and `abs(5-9) == 4`. ``` Given the list arr = [1, 5, 9, 2, 6, 10] k = 4 The longest subsequence is [1, 5, 9] ``` # Constraints - The input list `arr` will have a length of at least 1 and at most 1000. - The integer `k` will be a non-negative integer. # Function Signature ```python def magic_subsequence(arr: List[int], k: int) -> List[int]: pass ``` # Testing A function `compare_sequences` is given. This function takes two sequences and compares them invariant of sort order. ```python test.expect(compare_sequences(magic_subsequence([1, 5, 9, 2, 6, 10], 4), [1, 5, 9])) test.expect(compare_sequences(magic_subsequence([10, 14, 18, 7, 11, 15], 4), [10, 14, 18])) ``` # Discussion Consider discussing the challenges and potential algorithms that could be used to achieve the desired result. The aim is to find an efficient solution that handles larger lists within the constraints provided.","solution":"def magic_subsequence(arr, k): Find the longest subsequence where the absolute difference between any two consecutive elements is exactly equal to k. Parameters: arr (List[int]): The input list of integers. k (int): The required absolute difference between consecutive elements. Returns: List[int]: The longest magic subsequence with the given property. n = len(arr) if n == 1: return arr # dp[i] will store the longest subsequence ending at index i. dp = [[] for _ in range(n)] for i in range(n): dp[i] = [arr[i]] # Find the longest subsequence for each element for i in range(1, n): for j in range(i): if abs(arr[i] - arr[j]) == k and len(dp[j]) + 1 > len(dp[i]): dp[i] = dp[j] + [arr[i]] # Find the maximum length subsequence max_subseq = [] for subseq in dp: if len(subseq) > len(max_subseq): max_subseq = subseq return max_subseq"},{"question":"Implement a function that takes a string representing an arithmetic expression with addition, subtraction, multiplication, and division operations and calculates the result. The expression will not have any parentheses, and it will contain only non-negative integers and the basic arithmetic operators `+`, `-`, `*`, and `/`. Example: ``` \\"3 + 2 * 2\\" returns 7 \\" 3/2 \\" returns 1 \\" 3+5 / 2 \\" returns 5 ``` Assumptions: 1. The input string is always a valid arithmetic expression. 2. Divisions are treated as integer divisions, retaining only the quotient.","solution":"def evaluate_expression(expression): Evaluate an arithmetic expression containing +, -, *, and / operators without parentheses. Args: expression (str): The arithmetic expression to evaluate. Returns: int: The result of the arithmetic evaluation. def operate(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return a // b # integer division stack = [] current_number = 0 operation = \'+\' for i in range(len(expression)): char = expression[i] if char.isdigit(): current_number = current_number * 10 + int(char) if char in \'+-*/\' or i == len(expression) - 1: if operation == \'+\': stack.append(current_number) elif operation == \'-\': stack.append(-current_number) elif operation == \'*\': stack[-1] = stack[-1] * current_number elif operation == \'/\': stack[-1] = stack[-1] // current_number operation = char current_number = 0 return sum(stack)"},{"question":"Description Given a list of strings and a string pattern, write a function that returns a list of all strings from the input list that match the given pattern. A string matches the pattern if replacing each unique character in the pattern with a unique letter consistently throughout the pattern yields the string. Example **Input:** words = [\\"abb\\", \\"abc\\", \\"xyz\\", \\"xyy\\"] pattern = \\"mno\\" **Output:** [\\"abc\\", \\"xyz\\"] **Explanation:** - \\"abc\\" matches \\"mno\\" because \'a\' can map to \'m\', \'b\' to \'n\', and \'c\' to \'o\'. - \\"xyz\\" matches \\"mno\\" because \'x\' can map to \'m\', \'y\' to \'n\', and \'z\' to \'o\'. - \\"abb\\" does not match \\"mno\\" because \'a\' maps to \'m\', but both \'b\'s need to map to the same character \'n\', which is not consistent with the pattern of \\"mno\\". - \\"xyy\\" does not match \\"mno\\" because \'x\' maps to \'m\' and both \'y\' characters need to map to \'n\', which is also not consistent with the pattern of \\"mno\\".","solution":"def find_matching_words(words, pattern): Returns a list of strings from the input list that match the given pattern. Parameters: words (list): List of strings. pattern (str): The pattern string. Returns: list: List of strings matching the pattern. def matches(word, pattern): if len(word) != len(pattern): return False char_map = {} mapped_chars = set() for w_char, p_char in zip(word, pattern): if p_char in char_map: if char_map[p_char] != w_char: return False else: if w_char in mapped_chars: return False char_map[p_char] = w_char mapped_chars.add(w_char) return True return [word for word in words if matches(word, pattern)]"},{"question":"You are designing a library system that needs to manage a collection of books and process borrowing requests. The system should support the following operations: 1. Add a book to the library collection. 2. Remove a book from the collection. 3. Check the availability of a specific book. 4. Borrow a book from the library. 5. Return a borrowed book to the library. Each book will be represented by a unique title (string). Assume no two books have the same title. Implement a Library class with the following methods: - `add_book(title: str) -> None`: Adds the book with the given title to the library collection. - `remove_book(title: str) -> None`: Removes the book with the given title from the library collection. If the book is not found, do nothing. - `is_book_available(title: str) -> bool`: Returns True if the book with the given title is available for borrowing, otherwise returns False. - `borrow_book(title: str) -> bool`: If the book with the given title is available, marks it as borrowed and returns True. Otherwise, returns False. - `return_book(title: str) -> None`: Marks the book with the given title as returned. If the book is not found or is not borrowed, do nothing. Here\'s how the Library class can be used: ```python library = Library() library.add_book(\\"The Great Gatsby\\") library.add_book(\\"1984\\") library.add_book(\\"To Kill a Mockingbird\\") print(library.is_book_available(\\"1984\\")) # Output: True print(library.borrow_book(\\"1984\\")) # Output: True print(library.is_book_available(\\"1984\\")) # Output: False library.return_book(\\"1984\\") print(library.is_book_available(\\"1984\\")) # Output: True library.remove_book(\\"1984\\") print(library.is_book_available(\\"1984\\")) # Output: False ``` The Library class should maintain an internal record of the books available and their borrowed status. Your implementation should efficiently handle the operations for potentially large collections.","solution":"class Library: def __init__(self): self.collection = {} def add_book(self, title: str) -> None: if title not in self.collection: self.collection[title] = True def remove_book(self, title: str) -> None: if title in self.collection: del self.collection[title] def is_book_available(self, title: str) -> bool: return self.collection.get(title, False) def borrow_book(self, title: str) -> bool: if self.is_book_available(title): self.collection[title] = False return True return False def return_book(self, title: str) -> None: if title in self.collection and not self.is_book_available(title): self.collection[title] = True"},{"question":"Write a function, `intersect_sorted_arrays`, that takes two sorted arrays and returns their intersection. The returned intersection array should also be sorted and contain only unique elements. Examples ```python For array1 = [1, 2, 4, 5, 6] and array2 = [2, 3, 5, 7]: The output should be [2, 5] For array1 = [1, 3, 4, 5, 6, 8, 9] and array2 = [4, 5, 6, 7]: The output should be [4, 5, 6] For array1 = [1, 2, 3, 4, 5] and array2 = [6, 7, 8, 9, 10]: The output should be [] For array1 = [1, 1, 1, 1] and array2 = [1, 1, 1, 2]: The output should be [1] ```","solution":"def intersect_sorted_arrays(array1, array2): Returns the intersection of two sorted arrays as a sorted list with unique elements. i, j = 0, 0 intersection = [] while i < len(array1) and j < len(array2): if array1[i] == array2[j]: if not intersection or intersection[-1] != array1[i]: intersection.append(array1[i]) i += 1 j += 1 elif array1[i] < array2[j]: i += 1 else: j += 1 return intersection"},{"question":"# Task **_Given_** *a string* , **_Return_** **_The most repeated character _** *in the string*. If there are multiple characters with the same highest count, return the first one that appears. ___ # Notes * **_Only lowercase alphabets_** *and spaces are passed to the function.* * **_Empty string_** *should return an empty string.* ____ # Input >> Output Examples: ``` mostRepeatedChar(\\"aabbcc\\") ==> return \\"a\\" ``` **_Explanation_**: Both `a`, `b`, and `c` have the same count (2), but `a` appears first in the string, hence it is the most repeated character. ___ ``` mostRepeatedChar(\\"geeksforgeeks\\") ==> return \\"e\\" ``` **_Explanation_**: `e` appears 4 times in the string, more than any other character. ___ ``` mostRepeatedChar(\\"abc abc abc\\") ==> return \\"a\\" ``` **_Explanation_**: The characters `a`, `b`, and `c` each appear 3 times, but `a` appears first in the string, hence it is the most repeated character. ___ ``` mostRepeatedChar(\\" \\") ==> return \\" \\" ``` **_Explanation_**: Space appears 3 times in the string, more than any other character. ___ ``` mostRepeatedChar(\\"\\") ==> return \\"\\" ``` **_Explanation_**: Empty string should return an empty string. ___","solution":"def mostRepeatedChar(s): Returns the most repeated character in the string. If there are multiple characters with the same highest count, return the first one that appears. If the string is empty, returns an empty string. if not s: return \\"\\" character_count = {} max_count = 0 max_char = \\"\\" for char in s: character_count[char] = character_count.get(char, 0) + 1 if character_count[char] > max_count: max_count = character_count[char] max_char = char return max_char"},{"question":"You are organizing a charity event and you need to distribute gifts to the children attending. Each child should receive at least one gift, but if possible, you\'d like to give extra gifts to some of the children. Naturally, you decide to start by giving out one gift to each child, then distribute any remaining gifts starting with the children in the order they arrived. Write a function to determine the distribution of gifts among children. For example: 10 gifts, 2 children: [5, 5] 5 gifts, 7 children: [1, 1, 1, 1, 1, 0, 0] 12 gifts, 5 children: [3, 3, 2, 2, 2] The number of children and gifts will always be greater than or equal to 0. If there are no children, return: \\"No children to give gifts to.\\" Good luck, and remember, it\'s the thought that counts!","solution":"def distribute_gifts(gifts, children): Distribute the specified number of gifts to the children attending the event. Parameters: gifts (int): The total number of gifts available. children (int): The total number of children attending the event. Returns: List[int] or str: A list representing how many gifts each child receives or a string message if there are no children. if children == 0: return \\"No children to give gifts to.\\" # Each child gets at least one gift base_distributions = [1] * min(gifts, children) remaining_gifts = gifts - len(base_distributions) # If there are more gifts than children, distribute them for i in range(remaining_gifts): base_distributions[i % children] += 1 # If there are fewer gifts than children, append zeros while len(base_distributions) < children: base_distributions.append(0) return base_distributions"},{"question":"The entertainment company is planning an event where they need to arrange a sequence of artificial trees. To make it visually appealing, the sequence of heights of these trees should follow a special pattern. Help the company to generate this pattern. -----Input:----- - The first line will contain N, the number of trees. - The next line contains N integers H_i (1 ≤ H_i ≤ 10), the heights of each tree in order of arrangement. -----Output:----- For each sequence of heights, output a new sequence that alters between the original height and the summation of all heights up to that point in the sequence. -----Constraints----- - 1 leq N leq 10 - 1 leq H_i leq 10 -----Sample Input:----- 5 3 1 4 1 5 -----Sample Output:----- 3 3 1 4 5 5 1 6 5 15 5 -----EXPLANATION:----- The sequence alternates between the original height and the summation of all heights up to that point: - First tree: (3) - Second tree: (original height) 1 and (sum) 3+1=4 - Third tree: (original height) 4 and (sum) 3+1+4=8 - Fourth tree: (original height) 1 and (sum) 3+1+4+1=9 - Fifth tree: (original height) 5 and (sum) 3+1+4+1+5=14 So, the final sequence is: 3 (3) 1 4 4 (4) 5 (6) 1 9 9 (9) 5 14 14 (15) With each step, it continues this pattern.","solution":"def generate_tree_heights_pattern(n, heights): Generates the sequence of tree heights following the special pattern. result = [] sum_heights = 0 for height in heights: sum_heights += height result.append(height) result.append(sum_heights) return result"},{"question":"Write a function that generates a string representation of a right-aligned staircase with a given number of steps `n`. Each step is symbolized using the `#` character. For example, given an integer `n = 5`, the function should return the following string: ``` # # # ``` For `n = 3`, the function should return the following string: ``` # # ``` Each step should be on a new line with the appropriate number of leading spaces. The last step should not include any trailing spaces. Note that an extra line feed character is needed at the end of the string. If `n = 0`, the function should return `\\"n\\"`.","solution":"def generate_staircase(n): Generates a string representation of a right-aligned staircase with n steps. Parameters: n (int): Number of steps in the staircase. Returns: str: String representation of the staircase. if n == 0: return \\"n\\" staircase = \\"\\" for i in range(1, n+1): staircase += \\" \\" * (n - i) + \\"#\\" * i + \\"n\\" return staircase"},{"question":"=====Problem Statement===== You have been hired to develop a scheduling system for a company\'s daily meetings. The company\'s meeting rooms are identical, and any team can use any room. Each day, meetings are scheduled with a starting and ending time. A team can reserve a room only if there is no conflict with other meetings previously scheduled for the same room. You are given the list of meetings the company wants to schedule for the day. Each meeting has a start time and an end time. You need to determine the minimum number of meeting rooms required to accommodate all meetings without any conflicts. =====Input Format===== - The first line contains an integer, N, the number of meetings. - The next N lines each contain two space-separated integers, representing the start and end times of a meeting. =====Constraints===== 1<=N<=1000 0<=start time<end time<=10000 =====Output Format===== Output a single integer, the minimum number of meeting rooms required.","solution":"def min_meeting_rooms(meetings): Returns the minimum number of meeting rooms required to accommodate all meetings without any conflicts. if not meetings: return 0 # Separate start and end times start_times = sorted([meeting[0] for meeting in meetings]) end_times = sorted([meeting[1] for meeting in meetings]) start_pointer = 0 end_pointer = 0 used_rooms = 0 max_rooms = 0 while start_pointer < len(meetings): if start_times[start_pointer] < end_times[end_pointer]: used_rooms += 1 start_pointer += 1 else: used_rooms -= 1 end_pointer += 1 max_rooms = max(max_rooms, used_rooms) return max_rooms"},{"question":"You are given an array of integers where each element represents the height of a pillar. Your task is to find the maximum rectangular area that can be formed using the heights of the pillars. The width of each pillar is 1. -----Input----- The first line of input contains an integer n, the number of pillars. The second line contains n integers, representing the heights of the pillars. -----Output----- Print a single integer representing the maximum rectangular area that can be formed using the heights of the pillars. -----Constraints----- - 1 ≤ n ≤ 100000 - 1 ≤ height of pillar ≤ 1000000000 -----Example----- Input 7 6 2 5 4 5 1 6 Output 12 Explanation The maximum area is formed by selecting the height of pillars from index 2 to 5 (1-based index), which gives us the heights 2 5 4 5, creating a rectangle of height 4 and width 3, resulting in an area of 4*3 = 12.","solution":"def max_histogram_area(heights): Function to calculate the maximum rectangular area in a histogram. Each height in \'heights\' represents the height of a bar in a histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given an array of non-negative integers representing the height of bars in a histogram, devise an algorithm to find the maximum rectangular area that can be formed within the bounds of the histogram. The histogram is represented by an array of integers, where the width of each bar is 1 unit. Your task is to write a function that computes the maximum rectangular area under the histogram that can be formed by any sequence of contiguous bars. # Examples ```python Input: [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The largest rectangle can be formed between the third and fourth bars (heights 5 and 6) and has an area of 10 (2 bars wide by height 5). Input: [2, 4] Output: 4 Explanation: The largest rectangle can be formed using the second bar with an area of 4 (1 bar wide by height 4). Input: [0, 1] Output: 1 Explanation: The largest rectangle can be formed using the second bar with an area of 1 (1 bar wide by height 1). ``` # Constraints - Each integer in the input array will be in the range `[0, 10^4]`. - The length of the input array will be at most `10^5`. # Function Signature ```python def largest_rectangle_area(heights: List[int]) -> int: pass ``` Write the implementation of the function `largest_rectangle_area` that returns the largest possible rectangular area under the histogram. # Notes The largest rectangle is found using a stack-based approach which ensures a linear time complexity, allowing it to handle the upper constraint limits efficiently.","solution":"from typing import List def largest_rectangle_area(heights: List[int]) -> int: Find the largest rectangular area in a histogram given by heights of bars. :param heights: List of non-negative integers representing the heights of the histogram bars. :return: The area of the largest rectangle that can be formed. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Convert Roman to Integer Write a function that converts a Roman numeral to an integer. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. | Symbol | Value | |--------|-------| | I | 1 | | V | 5 | | X | 10 | | L | 50 | | C | 100 | | D | 500 | | M | 1000 | For example, the input \'LVIII\' should return 58 and \'MCMXCIV\' should return 1994. To handle this, you need to account for cases where smaller numbers precede larger numbers, such as IV (4) and IX (9). **Function Signature:** ```python def roman_to_integer(s: str) -> int: pass ``` **Input:** - s: a string representing a Roman numeral (1 ≤ |s| ≤ 15 and s contains only the characters (\'I\', \'V\', \'X\', \'L\', \'C\', \'D\', \'M\')) **Output:** - Returns an integer, the equivalent integer value of the Roman numeral. **Example:** - roman_to_integer(\'III\') should return 3 - roman_to_integer(\'IX\') should return 9","solution":"def roman_to_integer(s: str) -> int: Converts a Roman numeral to an integer. :param s: A string representing a Roman numeral :return: An integer representing the Roman numeral roman_to_int = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_to_int[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"You are given a matrix of integers. Your task is to rotate the matrix by 90 degrees clockwise. Write a function that takes in this matrix and returns the rotated matrix. -----Input:----- The input consists of multiple test cases. The first line contains a single integer T, the number of test cases. For each test case, the first line contains two space-separated integers N and M, representing the number of rows and columns, respectively. The next N lines each contain M space-separated integers, representing the elements of the matrix. -----Output:----- For each test case, print the rotated matrix of size MxN. Each row of the rotated matrix should be printed on a new line. -----Constraints----- - 1 leq T leq 10 - 1 leq N, M leq 1000 - -1000 leq text{Matrix element} leq 1000 -----Sample Input:----- 1 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output:----- 7 4 1 8 5 2 9 6 3 -----EXPLANATION:----- Rotating the 3x3 matrix by 90 degrees clockwise converts: 1 2 3 4 5 6 7 8 9 into: 7 4 1 8 5 2 9 6 3","solution":"def rotate_matrix_90_degrees_clockwise(matrix): Rotates an NxM matrix by 90 degrees clockwise and returns the resulting matrix. N = len(matrix) M = len(matrix[0]) rotated = [] for col in range(M): new_row = [] for row in range(N-1, -1, -1): new_row.append(matrix[row][col]) rotated.append(new_row) return rotated def process_test_cases(test_cases): Processes multiple test cases and returns the resulting matrices after rotation. results = [] for case in test_cases: N, M, matrix = case rotated_matrix = rotate_matrix_90_degrees_clockwise(matrix) results.append(rotated_matrix) return results"},{"question":"Complete the function `is_palindrome_permutation`/`isPalindromePermutation` (or equivalent, depending on your language) that checks if a given string is a permutation of a palindrome. A palindrome is a word or phrase that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. A permutation is a rearrangement of letters. You may assume the input is always a valid string with only alphabetic characters (i.e., no digits or special characters). Examples ~~~if-not:nasm ```python is_palindrome_permutation(\\"Tact Coa\\") ==> True # Permutations: \\"taco cat\\", \\"atco cta\\", etc. is_palindrome_permutation(\\"Hello\\") ==> False is_palindrome_permutation(\\"A man a plan a canal Panama\\") ==> True # Permutations: variations of \\"a man a plan a canal panama\\" ``` ~~~ ~~~if:nasm ``` mov edi, str_tact_coa ; address of string \\"Tact Coa\\" call is_palindrome_permutation ; returns true (non-zero) mov edi, str_hello ; address of string \\"Hello\\" call is_palindrome_permutation ; returns false mov edi, str_plan_panama ; address of string \\"A man a plan a canal Panama\\" call is_palindrome_permutation ; returns true ``` ~~~ Beware of the case sensitivity and ignore spaces while checking for palindromic permutations.","solution":"def is_palindrome_permutation(s): Checks if a given string is a permutation of a palindrome. from collections import Counter # Normalize the string: lowercase and remove spaces s = s.replace(\\" \\", \\"\\").lower() # Count the frequency of each character char_count = Counter(s) # Check how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be a permutation of a palindrome if it has at most one character with an odd count return odd_count <= 1"},{"question":"You are given an array of integers `nums` and an integer `k`. You need to partition the array into exactly `k` non-empty subsets whose sums are all equal. Return true if and only if you can achieve this partition. Example 1: Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4 Output: true Explanation: It\'s possible to divide the array into 4 subsets (5), (1, 4), (2, 3), (2, 3) with equal sums. Example 2: Input: nums = [1, 2, 3, 4], k = 3 Output: false Constraints: 1 <= k <= len(nums) <= 16 0 < nums[i] <= 10000","solution":"def can_partition_k_subsets(nums, k): if k == 0 or sum(nums) % k != 0: return False target_sum = sum(nums) // k nums.sort(reverse=True) subset_sums = [0] * k def backtrack(index): if index == len(nums): return len(set(subset_sums)) == 1 for i in range(k): if subset_sums[i] + nums[index] <= target_sum: subset_sums[i] += nums[index] if backtrack(index + 1): return True subset_sums[i] -= nums[index] if subset_sums[i] == 0: break return False return backtrack(0)"},{"question":"Task Implement a function that reorders a given list of integers according to a specific set of instructions. The function should take a list of integers and return a reordered list where: 1. All even numbers appear in ascending order at the beginning of the list. 2. All odd numbers appear in descending order after the even numbers. Example Given the list `[1, 3, 2, 4, 7, 8, 5]`, the reordered list should be `[2, 4, 8, 7, 5, 3, 1]`. Given the list `[10, 21, 14, 13, 17, 6]`, the reordered list should be `[6, 10, 14, 21, 17, 13]`. Input/Output - **[input]** list `lst` A list of integers representing the original ordering. - **[output]** list A reordered list of integers where even numbers are in ascending order followed by odd numbers in descending order.","solution":"def reorder_list(lst): Reorders a given list of integers such that all even numbers appear in ascending order at the beginning, followed by odd numbers in descending order. Parameters: lst (list): A list of integers. Returns: list: A reordered list as per the specifications. evens = sorted([x for x in lst if x % 2 == 0]) odds = sorted([x for x in lst if x % 2 != 0], reverse=True) return evens + odds"},{"question":"Given a string that includes words and numbers separated by spaces, modify each number by adding 1 to it. If an element is a word, reverse the letters in that word. The output string should preserve the order of the elements and spaces. Ensure that punctuation and spacing before/after the input string are preserved as they appear in the input. String will not be empty and will not contain more than one space between elements. Examples ``` \\"Hello 42 world\\" => \\"olleH 43 dlrow\\" \\" 99 bottles \\" => \\" 100 selttob \\" ```","solution":"def modify_string(s): Modifies the input string by adding 1 to each number and reversing the letters in each word. Args: s (str): Input string containing words and numbers. Returns: str: Modified string with each number incremented by 1 and each word reversed. result = [] for element in s.split(\' \'): if element.isdigit(): result.append(str(int(element) + 1)) else: result.append(element[::-1]) return \' \'.join(result)"},{"question":"*The park management system requires a method to validate license plates of vehicles entering the park. The license plate format supported includes a combination of uppercase letters and digits, adhering to specific patterns. Let\'s create a validation method!* Your task is to create the method **isValidLicensePlate/is_valid_license_plate** that accepts a single string as an argument and returns a boolean indicating whether the string is a valid license plate according to the following rules: - The license plate can have one of the following patterns: - Three uppercase letters followed by four digits: \'ABC1234\' - Two uppercase letters followed by five digits: \'AB12345\' - Four digits followed by two uppercase letters: \'1234AB\' - No spaces, dashes, or other special characters are allowed within the plate string. **Rules:** 1. The method should return true or false. 2. Only uppercase letters and digits are allowed. 3. The method must handle exactly one string input representing the license plate. Good luck!","solution":"import re def is_valid_license_plate(plate): Validates a license plate according to the given rules. Args: plate (str): The license plate string to validate. Returns: bool: True if the license plate matches the valid patterns, False otherwise. pattern1 = re.compile(r\\"^[A-Z]{3}[0-9]{4}\\") pattern2 = re.compile(r\\"^[A-Z]{2}[0-9]{5}\\") pattern3 = re.compile(r\\"^[0-9]{4}[A-Z]{2}\\") if pattern1.match(plate) or pattern2.match(plate) or pattern3.match(plate): return True return False"},{"question":"# Reverse Words Write a program that takes a string of words separated by spaces and returns a string where the words are in reverse order. Each word should retain its original position within the string, but the characters in each word should be reversed. For example: ```if-not:racket ~~~ reverse_words(\\"hello world\\") -> \\"olleh dlrow\\" reverse_words(\\"The quick brown fox\\") -> \\"ehT kciuq nworb xof\\" ~~~ ``` ```if:racket ~~~racket (reverse_words \\"hello world\\") ; \\"olleh dlrow\\" (reverse_words \\"The quick brown fox\\") ; \\"ehT kciuq nworb xof\\" ~~~ ```","solution":"def reverse_words(s): Takes a string of words separated by spaces and returns a string where the words are in reverse order. Each word retains its original position, but its characters are reversed. Parameters: s (str): The input string. Returns: str: The string with each word\'s characters reversed. return \' \'.join(word[::-1] for word in s.split(\' \'))"},{"question":"A group of researchers is studying the migratory patterns of sea turtles. They have recorded the coordinates of several points visited by the turtles during their journey. For analysis purposes, they need to determine the farthest Euclidean distance between any two points in the set. You are tasked with writing a program that will compute this distance. -----Input----- The first line of the input contains an integer N, representing the number of points. Each of the next N lines contains two integers x and y, representing the coordinates of a point. -----Output----- Output a single number representing the farthest distance between any two points in the set, rounded to 6 decimal places. -----Constraints----- - 2 ≤ N ≤ 10^3 - -10^4 ≤ x, y ≤ 10^4 -----Example----- Input: 4 0 0 3 4 6 8 -3 -4 Output: 14.142136 -----Explanation----- The points provided are (0,0), (3,4), (6,8), and (-3,-4). The farthest distance is between (6,8) and (-3,-4), which is sqrt((6 - (-3))^2 + (8 - (-4))^2) = sqrt(81 + 144) = sqrt(225) = 15. However, the problem statement requires rounding to 6 decimal places, which results in 14.142136.","solution":"import math def euclidean_distance(p1, p2): Computes the Euclidean distance between two points p1 and p2. return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def farthest_distance(points): Computes the farthest Euclidean distance between any two points in the set. max_distance = 0 for i in range(len(points)): for j in range(i + 1, len(points)): distance = euclidean_distance(points[i], points[j]) if distance > max_distance: max_distance = distance return round(max_distance, 6) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) points = [(int(data[2 * i + 1]), int(data[2 * i + 2])) for i in range(N)] print(\\"{:.6f}\\".format(farthest_distance(points))) # Uncomment to run in the local environment # if __name__ == \\"__main__\\": # main()"},{"question":"You are tasked with creating a monitoring system for a simple online game. The game world is represented as a 2D grid of integers, where each cell denotes the presence and health of a player\'s unit or is empty. A zero in a cell indicates that the cell is empty, while a positive integer denotes the health points of a unit in that cell. Your goal is to implement a function, `damage_grid(grid, attacks)`, that simulates a series of attacks on this grid. Each attack is represented as a tuple `(x, y, damage)`, where `(x, y)` are the coordinates of the unit being attacked and `damage` is the damage done to that unit. After processing all attacks, the function should return the updated grid. If a unit\'s health is reduced to zero or below after an attack, it is removed from the grid (i.e., the cell should be set to zero). # Function Signature ```python def damage_grid(grid: List[List[int]], attacks: List[Tuple[int, int, int]]) -> List[List[int]]: ``` # Input - `grid`: A 2D list of integers representing the game world. - `attacks`: A list of tuples, each containing three integers `(x, y, damage)`. # Output - Return the updated 2D list (grid) after applying all the attacks. # Examples ```python # Example 1 grid = [ [10, 0, 5], [0, 20, 0], [0, 0, 0] ] attacks = [ (0, 2, 3), (1, 1, 5), (0, 0, 10) ] print(damage_grid(grid, attacks)) # Expected output: # [ # [0, 0, 2], # [0, 15, 0], # [0, 0, 0] # ] # Example 2 grid = [ [2, 4], [6, 8] ] attacks = [ (0, 1, 4), (1, 1, 9) ] print(damage_grid(grid, attacks)) # Expected output: # [ # [2, 0], # [6, 0] # ] ``` # Constraints - The grid dimensions will be at most 100x100. - The health values, coordinates, and damage values are all non-negative integers. - All coordinates specified in the attacks will be within the boundaries of the grid.","solution":"def damage_grid(grid, attacks): Simulates the attacks on a 2D grid and returns the updated grid. Parameters: - grid: 2D list of integers where each value represents health of units. - attacks: List of tuples (x, y, damage) where (x, y) are coordinates and damage is the amount of damage to inflict. Returns: - Updated 2D list (grid) after applying all the attacks. for x, y, damage in attacks: if grid[x][y] > 0: # Check if there is a unit at the given coordinates grid[x][y] -= damage # Apply damage if grid[x][y] <= 0: # Check if unit\'s health has fallen to zero or below grid[x][y] = 0 # Remove the unit by setting the cell to zero return grid"},{"question":"# Task: Write a function that takes an integer `n` and generates a list of the first `n` prime numbers that are also palindromes. Examples: ```python palindromic_primes(2) = [2, 3] # The first 2 prime palindromes are 2 and 3 palindromic_primes(5) = [2, 3, 5, 7, 11] palindromic_primes(7) = [2, 3, 5, 7, 11, 101, 131] palindromic_primes(10) = [2, 3, 5, 7, 11, 101, 131, 151, 181, 191] ``` # Constraints: * **1 ≤ N ≤ 20** # palindromic_primes(15) The first 15 palindromic primes are: ``` [2, 3, 5, 7, 11, 101, 131, 151, 181, 191, 313, 353, 373, 383, 727] ``` # Notes: * Prime numbers are numbers greater than 1 that are divisible by only 1 and themselves. * Palindromic numbers read the same forwards and backwards. (e.g., 121, 131)","solution":"def palindromic_primes(n): Generates a list of first n prime numbers that are also palindromes. def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def is_palindrome(num): Helper function to check if a number is a palindrome. return str(num) == str(num)[::-1] primes = [] count = 0 while len(primes) < n: if is_prime(count) and is_palindrome(count): primes.append(count) count += 1 return primes"},{"question":"Given a string of letters, your task is to return the letter that appears the most frequently. If there are multiple letters with the same highest frequency, return the one that comes first in the alphabet. Examples: `\\"aabbbcc\\"` => \'b\' \'b\' appears 3 times `\\"abacad\\"` => \'a\' \'a\' appears 3 times `\\"xxyz\\"` => \'x\' \'x\' appears 2 times, which comes before \'y\' in the alphabet Good luck!","solution":"def most_frequent_letter(s): Returns the letter that appears the most frequently in the string `s`. If there are multiple letters with the same highest frequency, the one that comes first in the alphabet is returned. from collections import Counter if not s: return \\"\\" counter = Counter(s) most_frequent = max(counter.items(), key=lambda item: (item[1], -ord(item[0]))) return most_frequent[0]"},{"question":"Write a function that takes a string as input and returns the longest substring without repeating characters. If there are multiple longest substrings of the same length, return the one that appears first. Ensure the function runs efficiently with a time complexity of O(n), where n is the length of the input string.","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. char_index_map = {} longest_start = 0 longest_length = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i current_length = i - start + 1 if current_length > longest_length: longest_length = current_length longest_start = start return s[longest_start:longest_start + longest_length]"},{"question":"You are given a two-dimensional grid of characters representing a Minesweeper board. The board contains the characters \'M\' (representing a mine) and \'E\' (representing an empty cell). Your task is to update the board in-place according to the following rules: 1. If a cell containing \'M\' is revealed (i.e., selected), it turns into \'X\'. 2. If an empty cell \'E\' is revealed, you need to check its neighboring cells to count how many mines (\'M\') are adjacent to it in the eight possible directions (up, down, left, right, and the four diagonals). Replace \'E\' with a digit (\'1\' to \'8\') representing the number of adjacent mines. If no mines are adjacent, replace \'E\' with \'B\' and recursively apply the rules to all its neighboring cells. Write a function that takes the board and a click position as arguments and returns the updated board. Function Signature: ```python def update_board(board: List[List[str]], click: List[int]) -> List[List[str]]: ``` # Example 1: Input: ```python board = [ [\'E\', \'E\', \'E\', \'E\', \'E\'], [\'E\', \'E\', \'M\', \'E\', \'E\'], [\'E\', \'E\', \'E\', \'E\', \'E\'], [\'E\', \'E\', \'E\', \'E\', \'E\'] ] click = [3, 0] ``` Output: ```python [ [\'B\', \'1\', \'E\', \'1\', \'B\'], [\'B\', \'1\', \'M\', \'1\', \'B\'], [\'B\', \'1\', \'1\', \'1\', \'B\'], [\'B\', \'B\', \'B\', \'B\', \'B\'] ] ``` # Example 2: Input: ```python board = [ [\'B\', \'1\', \'E\', \'1\', \'B\'], [\'B\', \'1\', \'M\', \'1\', \'B\'], [\'B\', \'1\', \'1\', \'1\', \'B\'], [\'B\', \'B\', \'B\', \'B\', \'B\'] ] click = [1, 2] ``` Output: ```python [ [\'B\', \'1\', \'E\', \'1\', \'B\'], [\'B\', \'1\', \'X\', \'1\', \'B\'], [\'B\', \'1\', \'1\', \'1\', \'B\'], [\'B\', \'B\', \'B\', \'B\', \'B\'] ] ``` # Notes: - The click position will not be out of the board\'s range. - The click position will not be on a previously revealed cell.","solution":"def update_board(board, click): Updates the Minesweeper board in-place according to the rules given. Parameters: board (List[List[str]]): The initial Minesweeper board. click (List[int]): The position to click on the board. Returns: List[List[str]]: The updated board. def count_mines_around(r, c): mines_count = 0 for dr in range(-1, 2): for dc in range(-1, 2): if dr == 0 and dc == 0: continue nr, nc = r + dr, c + dc if 0 <= nr < len(board) and 0 <= nc < len(board[0]) and board[nr][nc] == \'M\': mines_count += 1 return mines_count def dfs(r, c): if board[r][c] != \'E\': return mines_count = count_mines_around(r, c) if mines_count > 0: board[r][c] = str(mines_count) else: board[r][c] = \'B\' for dr in range(-1, 2): for dc in range(-1, 2): if dr == 0 and dc == 0: continue nr, nc = r + dr, c + dc if 0 <= nr < len(board) and 0 <= nc < len(board[0]): dfs(nr, nc) click_r, click_c = click if board[click_r][click_c] == \'M\': board[click_r][click_c] = \'X\' else: dfs(click_r, click_c) return board"},{"question":"Task Your task is to implement the function `find_exit_route(grid: List[List[int]]) -> List[Tuple[int, int]]`. The function takes a 2D list representing a grid, where `0` represents an empty cell, `1` represents an obstacle, and `2` represents the exit point. You start at the top-left corner of the grid (i.e., grid[0][0]) and need to find a path to the exit point. Return the path as a list of tuples (i, j) representing the coordinates of each cell in the path, starting from the starting point and ending at the exit point, inclusive. If there are multiple paths to the exit, return any one of them. If there is no valid path, return an empty list. You can only move to adjacent cells in the grid (up, down, left, right). # Function Signature ```python from typing import List, Tuple def find_exit_route(grid: List[List[int]]) -> List[Tuple[int, int]]: pass ``` # Example ```python grid = [ [0, 0, 1, 0], [1, 0, 1, 0], [1, 0, 0, 0], [0, 1, 1, 2] ] find_exit_route(grid) # Output: [(0, 0), (0, 1), (1, 1), (2, 1), (2, 2), (2, 3), (3, 3)] ``` # Constraints 1. The grid will be a non-empty rectangle (1 ≤ len(grid), len(grid[0]) ≤ 100). 2. There will be at most one exit point in the grid. 3. Each cell contains only 0, 1, or 2. 4. You start at the top-left corner of the grid (grid[0][0]). # Notes - You can implement any algorithm you deem appropriate to solve the problem (e.g., BFS, DFS). - Ensure to handle edge cases where no path exists.","solution":"from typing import List, Tuple from collections import deque def find_exit_route(grid: List[List[int]]) -> List[Tuple[int, int]]: Find a path from the top-left corner to the exit point in the grid. If there is no such path, return an empty list. if not grid or grid[0][0] == 1: return [] rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([((0, 0), [(0, 0)])]) visited = set() visited.add((0, 0)) while queue: (current_row, current_col), path = queue.popleft() if grid[current_row][current_col] == 2: return path for dr, dc in directions: new_row, new_col = current_row + dr, current_col + dc if 0 <= new_row < rows and 0 <= new_col < cols and (new_row, new_col) not in visited and grid[new_row][new_col] != 1: visited.add((new_row, new_col)) queue.append(((new_row, new_col), path + [(new_row, new_col)])) return []"},{"question":"A common problem in coding assessments is to check for the validity of email addresses. Write a function that determines if a given email address is valid or not. The function should take a single string as input and return `true` if the email address is valid, otherwise return `false`. An email address is considered valid if it follows these rules: 1. It has exactly one `@` symbol. 2. The local part (the part before the `@`) consists of alphanumeric characters and may include dots (`.`) and underscores (`_`), but: - A dot (`.`) or underscore (`_`) cannot be the first or last character. - A dot (`.`) or underscore (`_`) cannot appear consecutively. 3. The domain part (the part after the `@`) should contain at least one dot (`.`) and should consist of alphanumeric characters. Each dot (`.`) in the domain part must be followed by at least one alphanumeric character. Examples: - `isValidEmail(\\"user.name@example.com\\")` should return `true`. - `isValidEmail(\\"user@com\\")` should return `false`. - `isValidEmail(\\"user@.com\\")` should return `false`. - `isValidEmail(\\".user@domain.com\\")` should return `false`. Your task is to implement the function `isValidEmail(email: String): Boolean`.","solution":"import re def isValidEmail(email): Returns true if the given email address is valid based on the rules specified. # Define the regular expression for matching the email based on the rules email_regex = r\\"^[A-Za-z0-9]+([._][A-Za-z0-9]+)*@[A-Za-z0-9]+(.[A-Za-z0-9]+)+\\" pattern = re.compile(email_regex) return pattern.match(email) is not None"},{"question":"Task: You have to create a function `isAutomorphic` to check whether the argument passed is an Automorphic Number and return true if it is & false otherwise. # Description: `Automorphic Number` - An automorphic number is a number whose square \\"ends\\" in the same digits as the number itself. > The first few Automorphic Numbers are - 1, 5, 6, 25, 76, 376... # Explanation: 1^2 = 1 // ∴ 1 is an Automorphic Number 5^2 = 25 // ∴ 5 is an Automorphic Number 6^2 = 36 // ∴ 6 is an Automorphic Number 25^2 = 625 // ∴ 25 is an Automorphic Number 76^2 = 5776 // ∴ 76 is an Automorphic Number 376^2 = 141376 // ∴ 376 is an Automorphic Number","solution":"def isAutomorphic(num): Checks if the given number is an Automorphic number. Args: num: An integer. Returns: bool: True if num is an Automorphic number, False otherwise. squared = str(num ** 2) num_str = str(num) return squared.endswith(num_str)"},{"question":"Given an array of integers, find the first missing positive integer. You must implement an algorithm that runs in O(n) time and uses constant extra space. Example: Input: [3, 4, -1, 1] Output: 2 Input: [1, 2, 0] Output: 3","solution":"def first_missing_positive(nums): Given an array of integers, find the first missing positive integer. The function runs in O(n) time and uses constant extra space. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"You are given a list of integers. Write a function `findSecondLargest(nums)` that returns the second largest number in the list. You should not use any built-in functions for sorting or directly finding the second largest. If the list has fewer than two unique numbers, return `None`. Example 1: ```python nums = [1, 3, 4, 5, 0, 2] findSecondLargest(nums) # returns 4 ``` Example 2: ```python nums = [1, 1, 1, 1] findSecondLargest(nums) # returns None ``` Example 3: ```python nums = [5] findSecondLargest(nums) # returns None ```","solution":"def findSecondLargest(nums): if len(nums) < 2: return None first = second = float(\'-inf\') for num in nums: if num > first: second = first first = num elif num > second and num != first: second = num if second == float(\'-inf\'): return None else: return second"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid contains a number which represents the cost to pass through that cell. You start from the top-left corner of the grid and want to reach the bottom-right corner. You can only move either down or right at any point in time. Write a program to find the minimum cost to travel from the top-left corner to the bottom-right corner of the grid. ---Input--- The first line contains an integer t (1 le t le 10) — the number of test cases. For each test case, the first line contains two integers n and m (1 le n, m le 100) — the dimensions of the grid. The next n lines contain m integers each, representing the cost grid. ---Output--- For each test case, output the minimum cost to travel from the top-left corner to the bottom-right corner. ---Example--- Input 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 3 4 Output 7 7","solution":"def min_cost_path(t, test_cases): Returns a list of minimum costs to travel from the top-left corner to the bottom-right corner of given grids. def min_cost(grid, n, m): dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row of the dp table for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Initialize the first column of the dp table for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[n - 1][m - 1] results = [] for case in test_cases: n, m, grid = case[\'n\'], case[\'m\'], case[\'grid\'] result = min_cost(grid, n, m) results.append(result) return results # For testing purposes def parse_input(input_str): input_lines = input_str.strip().split(\\"n\\") t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, input_lines[index].split()) index += 1 grid = [] for _ in range(n): grid.append(list(map(int, input_lines[index].split()))) index += 1 test_cases.append({\'n\': n, \'m\': m, \'grid\': grid}) return t, test_cases def format_output(results): return \'n\'.join(map(str, results))"},{"question":"Given an integer array `nums` and an integer `k`, return the `k`-th largest element in the array. Note that it is the `k`-th largest element in the sorted order, not the `k`-th distinct element. You must solve it in an optimized manner for both time and space complexity. # Function Signature ```python def findKthLargest(nums: List[int], k: int) -> int: ``` # Constraints - `1 <= k <= len(nums) <= 10^4` - `-10^4 <= nums[i] <= 10^4` # Example ```python findKthLargest([3,2,1,5,6,4], 2) # Output: 5 findKthLargest([3,2,3,1,2,4,5,5,6], 4) # Output: 4 ``` # Notes - You may use any in-built library or algorithm. - Ensure that your solution can handle large arrays and is efficient in both space and time. - Consider edge cases such as arrays with duplicate elements and arrays with only one element.","solution":"from typing import List import heapq def findKthLargest(nums: List[int], k: int) -> int: Returns the k-th largest element in the array `nums`. if not nums or k < 1 or k > len(nums): raise ValueError(\\"Invalid input\\") return heapq.nlargest(k, nums)[-1]"},{"question":"You have an array of n integers representing the weights of n stones. You can perform a move by removing two stones with weights a and b (a le b) and then adding a new stone with weight b - a to the array. You want to minimize the maximum weight of the stones remaining. Calculate the minimum possible weight of the heaviest stone after performing any number of moves. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. Each of the following t test cases starts with one integer n (1 le n le 100) — the number of stones. The next line contains n integers w_1, w_2, dots, w_n (1 le w_i le 100) — the weights of the stones. -----Output----- For each test case, print one integer — the minimum possible weight of the heaviest stone after performing any number of moves. -----Example----- Input 3 2 10 10 3 5 7 5 4 4 8 2 6 Output 0 1 0 -----Note----- In the first test case, you can remove both stones with weights 10 and 10, leaving you with no stones, and thus, the maximum possible weight is 0. In the second test case, you can perform the following moves: - Remove the stones with weights 5 and 5, and add a new stone of weight 0. - Remove the stones with weights 7 and 0, and add a new stone with weight 7. Thus, the minimum possible weight of the heaviest stone is 1. In the third test case, you can perform the following moves: - Remove the stones with weights 2 and 4, and add a new stone with weight 2. - Remove the stones with weights 6 and 8, and add a new stone with weight 2. - Remove the stones with weights 2 and 2, and add a new stone with weight 0. Thus, the minimum possible weight of the heaviest stone is 0.","solution":"def min_possible_max_weight(t, test_cases): Given the number of test cases and the details of each test case, returns the minimum possible weight of the heaviest stone after performing any number of moves. def calculate_min_max_weight(n, weights): total = sum(weights) return total % 2 results = [] for i in range(t): n = test_cases[i][0] weights = test_cases[i][1] results.append(calculate_min_max_weight(n, weights)) return results"},{"question":"Write a function that takes a list of integers and returns the index of the largest number in the list. If there is a tie (i.e., multiple occurrences of the largest number), return the smallest index. ``` For example: find_largest_index([1, 2, 3, 2, 1]) should return 2 find_largest_index([5, 1, 5, 3, 5, 4]) should return 0 find_largest_index([7, 7, 5, 7, 6]) should return 0 ``` Make sure to handle edge cases such as an empty list, for which the function should return -1. Use appropriate error handling to manage that scenario.","solution":"def find_largest_index(lst): Returns the index of the largest number in the list. If there is a tie, returns the smallest index. If the list is empty, returns -1. if not lst: return -1 max_value = max(lst) return lst.index(max_value)"},{"question":"Write a function that takes a list of integers and returns a new list containing only the unique elements from the original list, preserving their original order. Examples: ``` unique([1, 2, 2, 3, 4, 4, 5]) -> [1, 2, 3, 4, 5] unique([4, 5, 5, 5, 6, 6, 7]) -> [4, 5, 6, 7] unique([1, 2, 3]) -> [1, 2, 3] ``` ~~~if:sql You will be given a table: `numbers`, with a column: `value`. Return a table with a column: `unique_values` containing only unique values from the `value` column, maintaining the order in which they first appear in the table. ~~~","solution":"def unique(lst): Returns a list containing only the unique elements from the original list, preserving their original order. seen = set() unique_list = [] for item in lst: if item not in seen: unique_list.append(item) seen.add(item) return unique_list"},{"question":"Zara is playing a strategy game where she must capture opponents\' castles. Each castle has a certain level of defense, which takes a specific number of attacks to breach. Zara commands an army that can perform a number of attacks per minute. However, after each minute of relentless attacks, Zara\'s army needs a rest period during which the castles\' defenses partially regenerate. Given `castles` as an array representing the defense levels of each castle, where each element is the defense level of a castle, Zara must choose the order in which to attack the castles to minimize the total time taken to capture all castles. Every castle regenerates a certain number of defense points per rest period. Zara\'s army performs exactly `attacks_per_minute` attacks per minute, and the rest period lasts for exactly one minute. The defense regeneration happens at the end of each rest period. Write a function `minimum_time_to_capture_castles(castles, attacks_per_minute, regeneration)` to determine the minimum total time in minutes Zara needs to capture all the castles. If it is not possible to capture a castle due to high regeneration rate compared to `attacks_per_minute`, return `-1` for that castle. The function should return a list of integers representing the time to capture each castle in the same order as provided in the input array. # Input - `castles`: A list of integers where each integer represents the defense level of a castle. - `attacks_per_minute`: An integer representing the number of attacks Zara\'s army can perform per minute. - `regeneration`: An integer representing how much a castle\'s defense regenerates every rest period. # Output - A list of integers representing the minimum time in minutes needed to capture each castle in the same order as the input list. If it is not possible to capture a castle, the corresponding entry in the list should be `-1`. # Example ```python castles = [15, 50, 23] attacks_per_minute = 20 regeneration = 5 # Zara\'s army can perform 20 attacks per minute. # To capture the first castle with defense level 15: # In one minute, Zara\'s army attacks 20 times which is more than its defense level, so it takes 1 minute. # To capture the second castle with defense level 50: # In one minute, Zara\'s army can reduce the defense by 20. # After the first minute, defense becomes 30, then it regenerates by 5, making it 35. # In the second minute, defense becomes 15, then it regenerates by 5, making it 20. # In the third minute, defense becomes 0. So it takes 3 minutes. # To capture the third castle with defense level 23: # In one minute, Zara\'s army reduces defense to 3, then it regenerates by 5, making it 8. # In the second minute, army reduces defense to 0. So it takes 2 minutes. # The output would be: Zara should return [1, 3, 2]. minimum_time_to_capture_castles(castles, attacks_per_minute, regeneration) should return [1, 3, 2]. ``` # Note - The function should ensure that the solution is efficient and works for large inputs.","solution":"def minimum_time_to_capture_castles(castles, attacks_per_minute, regeneration): Given the defenses of castles and the attack and regeneration parameters, find the minimum time to capture each castle or return -1 if impossible. Parameters: castles (list): List of integers representing the defense level of each castle. attacks_per_minute (int): Number of attacks Zara\'s army can perform per minute. regeneration (int): Defense regeneration points per rest period. Returns: List[int]: List of minimum times in minutes to capture each castle or -1 if impossible. result = [] for defense in castles: if attacks_per_minute <= regeneration and defense > attacks_per_minute: result.append(-1) continue minutes = 0 while defense > 0: minutes += 1 attacks = min(defense, attacks_per_minute) defense -= attacks if defense > 0: defense += regeneration result.append(minutes) return result"},{"question":"You are given a string S consisting of N lowercase letters. You need to count the number of contiguous substrings of S that contain exactly K distinct characters. ----Input---- There are several test cases. For each test case: - The first line contains two integers, N and K (1 ≤ K ≤ N ≤ 1000). - The second line contains a string S of length N, consisting of only lowercase English letters. The input is terminated with N = 0 and K = 0. ----Output---- For each test case, output on a new line the number of contiguous substrings which contain exactly K distinct characters. ----Example----- Input: 4 2 abac 5 3 abcde 0 0 Output: 4 3 ----Explanation---- For the first test case, the valid substrings are: \\"ab\\", \\"aba\\", \\"ba\\", and \\"ac\\". For the second test case, the valid substrings are: \\"abc\\", \\"bcd\\", and \\"cde\\".","solution":"def count_k_distinct_substrings(N, K, S): Returns the number of contiguous substrings in string S of length N that contain exactly K distinct characters. if N == 0 and K == 0: return None from collections import defaultdict def at_most_k_distinct(k): char_count = defaultdict(int) left = 0 count = 0 for right in range(N): char_count[S[right]] += 1 while len(char_count) > k: char_count[S[left]] -= 1 if char_count[S[left]] == 0: del char_count[S[left]] left += 1 count += right - left + 1 return count return at_most_k_distinct(K) - at_most_k_distinct(K-1) def main(test_cases): results = [] for case in test_cases: N, K, S = case result = count_k_distinct_substrings(N, K, S) if result is not None: results.append(result) return results"},{"question":"You are given a string consisting of lowercase alphabetic characters. Write a function that returns `True` if the string is a \\"pangram\\" and `False` otherwise. A pangram is a sentence that contains every letter of the alphabet at least once. Ignore any non-alphabetic characters. **Examples:** `\\"the quick brown fox jumps over the lazy dog\\"` should return `True` `\\"hello world\\"` should return `False` ***Constraints:*** - The function should handle empty strings and return `False` for them. - The input string may contain spaces and punctuation, but they should not affect the determination of whether it is a pangram. ```if-not:haskell Return \\"Not valid\\" if the input is not a string. ``` ```if:haskell Return `Nothing` if the input is not a string and `Just True` or `Just False` otherwise. ```","solution":"def is_pangram(s): Checks if the given string is a pangram. A pangram is a sentence that contains every letter of the alphabet at least once. Args: s (str): The input string. Returns: bool: True if the input string is a pangram, False otherwise. if not isinstance(s, str): return \\"Not valid\\" # Create a set of all lowercase alphabetic characters alphabet_set = set(\\"abcdefghijklmnopqrstuvwxyz\\") # Convert the string to lowercase and create a set of its alphabetic characters char_set = set([char for char in s.lower() if char.isalpha()]) # Check if the set of alphabetic characters in the string is equal to the alphabet set return alphabet_set == char_set"},{"question":"Write a function to convert a given integer into its equivalent representation in **Roman Numerals**. The function should accept an integer in the range `1 - 3999` and return a string representing the equivalent Roman Numeral. Below are the Roman Numeral representations for numbers: ``` 1 => I 4 => IV 5 => V 9 => IX 10 => X 40 => XL 50 => L 90 => XC 100 => C 400 => CD 500 => D 900 => CM 1000 => M ``` # Examples: ``` to_roman(3) # returns \\"III\\" to_roman(58) # returns \\"LVIII\\" to_roman(1994) # returns \\"MCMXCIV\\" ``` Implement the function `to_roman(num: int) -> str` that converts the given integer to its equivalent Roman Numeral. **Constraints:** - The input integer `num` will always be in the range from `1` to `3999`. - The function should return a string representing the Roman Numeral equivalent of the input integer. ```python def to_roman(num: int) -> str: # Your implementation here ``` # Note: - Ensure your implementation is efficient and adheres to the constraints. - Pay attention to edge cases, such as the smallest (1) and largest numbers (3999) in the range.","solution":"def to_roman(num: int) -> str: Converts an integer to its Roman numeral equivalent. Parameters: num (int): An integer in the range 1 to 3999. Returns: str: Roman numeral representation of the integer. value_map = [ (1000, \'M\'), (900, \'CM\'), (500, \'D\'), (400, \'CD\'), (100, \'C\'), (90, \'XC\'), (50, \'L\'), (40, \'XL\'), (10, \'X\'), (9, \'IX\'), (5, \'V\'), (4, \'IV\'), (1, \'I\') ] roman_numeral = [] for value, symbol in value_map: while num >= value: roman_numeral.append(symbol) num -= value return \'\'.join(roman_numeral)"},{"question":"Alice has a rectangular grid of size R x C. Each cell in the grid contains a non-negative integer which represents the height of that cell. Alice wants to place a water drop in one of the grid cells, and the water will flow to an adjacent cell (up, down, left, or right) if and only if that adjacent cell has a lower height. The water drop will continue to flow until it cannot move to a lower height anymore. Alice is interested in determining the maximum number of cells the water drop can pass through, including the starting cell. However, Alice can place the drop in any cell of her choice to maximize the flow. Your task is to write a program that computes this maximum number of cells for given R x C grid heights. -----Constraints----- - 1 leq R, C leq 1,000 - 0 leq height leq 1,000 -----Input----- Input is given from Standard Input in the following format: R C grid_1_1 grid_1_2 ... grid_1_C grid_2_1 grid_2_2 ... grid_2_C ... grid_R_1 grid_R_2 ... grid_R_C -----Output----- Print the maximum number of cells the water drop can pass through. -----Sample Input----- 3 3 9 6 3 5 4 7 2 1 8 -----Sample Output----- 4 In this example, if the water drop starts at cell (0,0) with height 9, it can move to (1,0) with height 5, then to (2,0) with height 2, and finally to (2,1) with height 1, for a total of 4 cells.","solution":"def max_water_flow(R, C, grid): def dfs(row, col): if dp[row][col] != -1: return dp[row][col] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_cells = 1 # Start with the current cell for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < R and 0 <= new_col < C and grid[new_row][new_col] < grid[row][col]: max_cells = max(max_cells, 1 + dfs(new_row, new_col)) dp[row][col] = max_cells return dp[row][col] dp = [[-1] * C for _ in range(R)] answer = 0 for row in range(R): for col in range(C): answer = max(answer, dfs(row, col)) return answer def main(): import sys input = sys.stdin.read data = input().split() R = int(data[0]) C = int(data[1]) grid = [] index = 2 for i in range(R): grid.append(list(map(int, data[index:index + C]))) index += C print(max_water_flow(R, C, grid)) if __name__ == \\"__main__\\": main()"},{"question":"You have been tasked with implementing a basic text editor with undo functionality. The editor supports two operations: appending a string to the document and deleting the last `k` characters. You need to code the `TextEditor` class that will handle these operations along with undo functionality, which reverts the document to its state before the last operation. # Class Definition ```python class TextEditor: def __init__(self): # Initializes the text editor with an empty document. pass def append(self, string: str) -> None: # Appends the given string to the end of the current document. pass def delete(self, k: int) -> None: # Deletes the last k characters from the current document. pass def undo(self) -> None: # Reverts the document to its state before the last operation (append or delete). pass def get_document(self) -> str: # Returns the current state of the document. pass ``` # Example ```python # Example usage: editor = TextEditor() editor.append(\\"hello\\") editor.append(\\"world\\") print(editor.get_document()) # Outputs \\"helloworld\\" editor.delete(5) print(editor.get_document()) # Outputs \\"hello\\" editor.undo() print(editor.get_document()) # Outputs \\"helloworld\\" editor.undo() print(editor.get_document()) # Outputs \\"hello\\" ``` # Notes: - `append` should add the given string to the end of the current document. - `delete` should remove the last `k` characters from the current document. - `undo` should revert the document to its state before the most recent operation, whether that operation was `append` or `delete`. - `get_document` should return the current state of the document as a string.","solution":"class TextEditor: def __init__(self): self.document = \\"\\" self.history = [] def append(self, string: str) -> None: self.history.append(self.document) self.document += string def delete(self, k: int) -> None: self.history.append(self.document) self.document = self.document[:-k] def undo(self) -> None: if self.history: self.document = self.history.pop() def get_document(self) -> str: return self.document"},{"question":"Create a function that takes a string as an input and checks if it is a valid identifier according to the following rules, returning `true` or `false`. A valid identifier meets these criteria: 1. It must start with either a letter (a-z, A-Z) or an underscore (_). 2. The remaining characters can be letters, underscores, or digits (0-9). 3. The identifier length must be between 1 and 30 characters inclusive. Please also ensure that an empty string returns `false`. Examples Valid identifiers: * _variable1 * var_123 * a * myVariable Invalid identifiers: * 1variable * var!able * my variable * 12345","solution":"def is_valid_identifier(identifier): Checks if the input string is a valid identifier based on specific rules. if len(identifier) == 0 or len(identifier) > 30: return False if not (identifier[0].isalpha() or identifier[0] == \'_\'): return False if not all(char.isalnum() or char == \'_\' for char in identifier): return False return True"},{"question":"John loves walking through the park and collecting different types of leaves he finds. He decided to catalog the leaves based on their width. Help John create a catalog that lists leaves in order of their width, but excluding any that fall outside a specified range. -----Input:----- - The first line will contain a single integer, N, representing the number of leaves John has collected. - The second line contains N space-separated integers, representing the widths of the leaves. - The third line contains two integers, L1 and L2, which represent the inclusive lower and upper bounds of the width range. -----Output:----- For each valid test, output in a single line the widths of the leaves, sorted in ascending order, that fall within the inclusive range specified by L1 and L2. If no leaves fall within the range, output \\"No leaves in range\\". -----Constraints----- 1 <= N <= 100 1 <= Width of each leaf <= 200 1 <= L1 <= L2 <= 200 -----Sample Input:----- 5 10 23 35 12 18 10 20 -----Sample Output:----- 10 12 18","solution":"def filter_and_sort_leaves(n, widths, l1, l2): Filters and sorts leaf widths that fall within the inclusive range [l1, l2]. Parameters: n (int): The number of leaves. widths (list of int): The widths of the leaves. l1 (int): The lower bound of the width range. l2 (int): The upper bound of the width range. Returns: list of int or str: Sorted widths of the leaves within the range or \\"No leaves in range\\" if none are in the range. filtered_leaves = [width for width in widths if l1 <= width <= l2] if not filtered_leaves: return \\"No leaves in range\\" return sorted(filtered_leaves) # Example to test the function n = 5 widths = [10, 23, 35, 12, 18] l1 = 10 l2 = 20 print(filter_and_sort_leaves(n, widths, l1, l2)) # Output: [10, 12, 18]"},{"question":"Given an array of integers nums, return the number of unique longest increasing subsequences. A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. Example: Input: nums = [1, 3, 5, 4, 7] Output: 2 Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7]. Note: - The length of the given array will be in the range [1, 2000]. - The array elements are integers in the range [-10^6, 10^6].","solution":"def find_number_of_lis(nums): if not nums: return 0 n = len(nums) lengths = [1] * n # lengths[i] = length of longest ending in nums[i] counts = [1] * n # counts[i] = number of longest ending in nums[i] for i in range(n): for j in range(i): if nums[i] > nums[j]: if lengths[i] == lengths[j] + 1: counts[i] += counts[j] if lengths[i] < lengths[j] + 1: lengths[i] = lengths[j] + 1 counts[i] = counts[j] longest = max(lengths) return sum(c for l, c in zip(lengths, counts) if l == longest)"},{"question":"The pandemic has caused an increase in online shopping, and many delivery services now use algorithms to optimize their delivery routes. You are given a list of distances between several delivery locations and a starting point. Your task is to determine the shortest possible route that visits each delivery location exactly once and returns to the starting point. This problem is a variation of the well-known Traveling Salesman Problem (TSP). Write a function `shortest_route(start, distances)` that takes in: - `start`: an integer representing the starting location - `distances`: a 2D list of integers where `distances[i][j]` represents the distance between location `i` and location `j` The function should return the minimum distance needed to complete the route. Note that the distances are symmetric, meaning `distances[i][j]` is the same as `distances[j][i]`. # Example: ```python distances = [ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ] start = 0 shortest_route(start, distances) # Returns 80 ``` # Constraints: - Locations will have indices ranging from 0 to N-1. - Distances will be non-negative integers. - The size of the distance matrix will be at most 10x10. - The function should handle at most N=10 efficiently.","solution":"import itertools def shortest_route(start, distances): Returns the minimum distance needed to complete the route starting from the given starting point and visiting each location exactly once. :param start: int, the starting location :param distances: 2D list of ints, the distances[i][j] represents the distance between location i and location j :return: int, the minimum distance to complete the route num_locations = len(distances) all_locations = set(range(num_locations)) # Generate all permutations of the locations excluding the start other_locations = all_locations - {start} min_distance = float(\'inf\') for perm in itertools.permutations(other_locations): # Calculate the distance of this particular route current_distance = 0 prev_location = start for location in perm: current_distance += distances[prev_location][location] prev_location = location # Add the distance to return to the start current_distance += distances[prev_location][start] # Update the minimum distance min_distance = min(min_distance, current_distance) return min_distance"},{"question":"Create a function that rearranges the characters in a given string such that no two adjacent characters are the same. If such a rearrangement is not possible, return an empty string. Examples ``` \\"aaabbc\\" --> \\"ababca\\" or \\"abcaba\\" or any other valid rearrangement \\"aaab\\" --> \\"\\" \\"aabbcc\\" --> \\"abcabc\\", \\"acbacb\\" or any other valid rearrangement \\"aa\\" --> \\"\\" \\"a\\" --> \\"a\\" ```","solution":"import heapq from collections import Counter def rearrange_string(s): Rearranges the characters in a given string such that no two adjacent characters are the same. If it\'s not possible, returns an empty string. # Frequency of each character freq_map = Counter(s) max_heap = [(-freq, char) for char, freq in freq_map.items()] heapq.heapify(max_heap) prev_char, prev_freq = None, 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 rearranged_str = \\"\\".join(result) if len(rearranged_str) != len(s): return \\"\\" # Not possible to rearrange return rearranged_str"},{"question":"You are given a dictionary where the keys are student names and the values are lists of their exam scores. Write a function that returns a new dictionary where each student\'s name is a key and the corresponding value is their average exam score. The average should be rounded to two decimal places. For example: ```python data = { \\"Alice\\": [88, 76, 92, 85], \\"Bob\\": [90, 80, 85, 88], \\"Charlie\\": [60, 70, 75, 65] } returns {\'Alice\': 85.25, \'Bob\': 85.75, \'Charlie\': 67.5} ```","solution":"def calculate_averages(data): Returns a dictionary where each student\'s name is a key and the corresponding value is their average exam score. The average is rounded to two decimal places. averages = {} for student, scores in data.items(): if scores: average_score = round(sum(scores) / len(scores), 2) else: average_score = 0.0 # Handling the case if the score list is empty averages[student] = average_score return averages"},{"question":"# Task: Write a function that, given an array of positive integers, returns the largest sum of any non-adjacent numbers in the array. # Constraints: * The input array will contain at least one positive integer. * The maximum length of the input array is 1000. # Example 1: ``` Input: [2, 4, 6, 2, 5] Output: 13 // Explanation: 2 + 6 + 5 = 13 ``` # Example 2: ``` Input: [5, 1, 1, 5] Output: 10 // Explanation: 5 + 5 = 10 ``` # Example 3: ``` Input: [3, 2, 5, 10, 7] Output: 15 // Explanation: 3 + 10 + 2 or 5 + 3 + 7 (Either way, 15 is the maximum sum) ```","solution":"def largest_non_adjacent_sum(nums): Returns the largest sum of non-adjacent numbers in the given array of positive integers. if not nums: return 0 elif len(nums) == 1: return nums[0] prev_one = 0 prev_two = 0 current = 0 for num in nums: current = max(prev_one, prev_two + num) prev_two = prev_one prev_one = current return current"},{"question":"You are given an array of non-negative integers representing heights of walls (each wall\'s width is 1). Design an algorithm to find out how much water it is able to trap after raining. Example: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The total amount of water trapped between the heights is 6 units.","solution":"def trap(height): Computes the amount of water that can be trapped. :param height: List[int] -- a list of non-negative integers representing the height of walls. :return: int -- the total amount of water that can be trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - height[i] return trapped_water"},{"question":"----- Given a 2D grid of size m x n representing a map where \'1\' represents land and \'0\' represents water, write a function to find the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. -----Input----- - A single integer m (1 ≤ m ≤ 1000), the number of rows in the grid. - A single integer n (1 ≤ n ≤ 1000), the number of columns in the grid. - m lines follow, each containing a string of length n consisting of ‘0’s and ‘1’s. -----Output----- - A single integer, the number of islands in the grid. -----Example----- Input 4 5 11000 11000 00100 00011 Output 3 Input 6 8 11100011 11000001 10000001 00001110 00001100 00000000 Output 3 Input 1 1 1 Output 1 -----Note----- In the first example, there are 3 islands, formed by the following land cells: - The first island is formed by cells (1,1), (1,2), (2,1), and (2,2). - The second island is the single cell at (3,3). - The third island is formed by cells (4,4) and (4,5). In the second example, there are 3 islands, with the first two islands isolated in the top rows and the third island formed by a cluster of lands in the third row. In the last example, the single cell forms one island.","solution":"def num_islands(grid): Function to count number of islands in a 2D grid. :param grid: 2D list (m x n) of \'0\'s and \'1\'s :return: int, number of islands if not grid: return 0 m, n = len(grid), len(grid[0]) visited = [[False for _ in range(n)] for _ in range(m)] def dfs(i, j): if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == \'0\' or visited[i][j]: return visited[i][j] = True dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) islands = 0 for i in range(m): for j in range(n): if grid[i][j] == \'1\' and not visited[i][j]: dfs(i, j) islands += 1 return islands"},{"question":"Given a list of integers where each integer represents the position of a house along a straight street, find an optimal meeting point such that the sum of distances all friends have to travel is minimized. You are allowed to choose any position along the street (it doesn\'t have to precisely be at one of the house positions). Implement the function: ```python def optimal_meeting_point(houses: List[int]) -> int: ``` **Input:** - `houses` is a list of integers where each integer is a unique position of a house along the street. **Output:** - Return the meeting point position such that the sum of distances all friends have to travel is minimized. If there are multiple positions that minimize the sum, return the smallest one. # Example Example 1: ```python optimal_meeting_point([2, 4, 2]) # Output: 2 ``` Explanation: Meeting at position 2 minimizes the sum of distances. Total distance = |2-2|+|4-2|+|2-2| = 0+2+0 = 2. Example 2: ```python optimal_meeting_point([1, 6, 2, 9, 3]) # Output: 3 ``` Explanation: Meeting at position 3 minimizes the sum of distances. Total distance = |1-3|+|6-3|+|2-3|+|9-3|+|3-3| = 2+3+1+6+0 = 12. Example 3: ```python optimal_meeting_point([1, 1, 1, 1]) # Output: 1 ``` Explanation: All houses are at position 1, so the meeting point is obviously at position 1 itself. Total distance = 0. **Constraints:** - The list `houses` will have at least 1 and at most 100 elements. - Each position in `houses` will be a non-negative integer between 0 and 1000 inclusive. - All positions in `houses` are distinct.","solution":"from typing import List def optimal_meeting_point(houses: List[int]) -> int: Returns the meeting point position such that the sum of distances all friends have to travel is minimized. The optimal meeting point is the median of the house positions. houses.sort() n = len(houses) median = houses[n // 2] if n % 2 != 0 else houses[(n // 2) - 1] return median"},{"question":"Given an array of integers, determine whether it contains at least one pair of elements that sum up to zero. If such a pair exists, return \'Balance achieved\'. If no such pair exists, return \'Unbalanced array\'. Example: ``` [3, 1, -2, 5, -3] ``` In this example, the array contains the pair (3, -3) that sums up to zero, so the output should be \'Balance achieved\'.","solution":"def check_balance(arr): Determines if there is at least one pair of elements in the array that sum up to zero. If such a pair exists, returns \'Balance achieved\'. Otherwise, returns \'Unbalanced array\'. seen = set() for num in arr: if -num in seen: return \'Balance achieved\' seen.add(num) return \'Unbalanced array\'"},{"question":"Consider a string `s` which represents a positive integer. Your task is to determine if you can rearrange the digits of `s` such that the resulting number is divisible by 3. A number is divisible by 3 if the sum of its digits is divisible by 3. # Input - A single string `s` representing a positive integer (1 <= |s| <= 10^5). # Output - Return `True` if it is possible to rearrange the digits to form a number divisible by 3, otherwise return `False`. # Example ``` Input: \\"123\\" Output: True Input: \\"1112\\" Output: False Input: \\"678\\" Output: True ``` # Note - If the sum of the digits of `s` is divisible by 3, then it is possible to rearrange the digits to form such a number. - Ensure that your solution efficiently handles large inputs.","solution":"def can_rearrange_to_divisible_by_3(s): Determines if the digits of string s can be rearranged to form a number that is divisible by 3. Parameters: s (str): A string representing a positive integer. Returns: bool: True if it is possible to rearrange the digits to form a number divisible by 3, otherwise False. digit_sum = sum(int(char) for char in s) return digit_sum % 3 == 0"},{"question":"# Task You are given a list of integers representing the number of apples on each tree in a row of trees. Your objective is to determine the maximum number of apples that can be collected by shaking a contiguous subsequence of trees. # Inputs: - `apples`: A list of integers where each integer represents the number of apples on a tree. The length of the list is at least 1. # Output: - An integer representing the maximum number of apples that can be collected from any contiguous subsequence of trees. The solution should be efficient enough to handle large inputs gracefully. # Examples For `apples = [1, 2, -3, 4, 5, 6, -2, 3]`, the output should be: ``` 16 ``` Explanation: The maximum number of apples is collected by shaking the trees from the 4th to the 8th (4 + 5 + 6 + (-2) + 3 = 16). For `apples = [-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the output should be: ``` 6 ``` Explanation: The maximum number of apples is collected by shaking the trees from the 4th to the 7th (4 + (-1) + 2 + 1 = 6).","solution":"def max_apples(apples): Returns the maximum number of apples that can be collected from any contiguous subsequence of trees. :param apples: List[int], a list of integers representing the number of apples on each tree. :return: int, the maximum number of apples that can be collected. if not apples: return 0 max_current = max_global = apples[0] for num in apples[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array of integers and a target integer. Determine if there exists a subset of the array that adds up to exactly the target number. Note: 1. Each of the array elements will not exceed 1000. 2. The array size will not exceed 100. Example 1: Input: [2, 3, 7, 8, 10], target: 11 Output: true Explanation: The subset [3, 8] adds up to 11. Example 2: Input: [1, 2, 5], target: 4 Output: false Explanation: There is no subset that adds up to 4.","solution":"def is_subset_sum(arr, target): Determines if there exists a subset of the array that adds up to exactly the target number. :param arr: List of integers :param target: Target integer :return: True if such a subset exists, False otherwise n = len(arr) # Create a 2D array to store the results of subproblems dp = [[False for _ in range(target + 1)] for _ in range(n + 1)] # There is always a subset with sum 0, the empty set for i in range(n + 1): dp[i][0] = True # Fill the dp array for i in range(1, n + 1): for j in range(1, target + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] return dp[n][target]"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to construct a new string t from s by rearranging its characters such that no two adjacent characters in t are the same. If it is not possible, print -1. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) indicating the length of the string s. The second line contains the string s of length n. -----Output----- Print the string t if it is possible to rearrange the characters of s such that no two adjacent characters are the same. If there are multiple valid strings, you are free to print any of them. If it is not possible, print -1. -----Examples----- Input 4 aabb Output abab Input 3 aaa Output -1 -----Note----- In the first example, one possible solution is \\"abab\\". Another valid solution could be \\"baba\\". In the second example, it is not possible to rearrange the string to meet the condition, hence the output is -1.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string such that no two adjacent characters are the same. Returns the rearranged string if possible, otherwise returns -1. counter = Counter(s) max_heap = [(-count, char) for char, count in counter.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \\"\\" result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char rearranged_string = \\"\\".join(result) if len(rearranged_string) != len(s): return -1 return rearranged_string"},{"question":"A programmer is trying to develop a function to determine the number of pairs in an array that sum up to a given value K. Help the programmer by writing a function to solve this problem. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case starts with a single line containing two integers, n and K, where n is the size of the array. - The second line of each test case contains n space-separated integers representing the array elements. -----Output:----- For each test case, output the number of pairs in the array that sum up to K. -----Constraints----- - 1 leq T leq 10^3 - 1 leq n leq 10^5 - -10^6 leq text{array elements} leq 10^6 - -10^6 leq K leq 10^6 -----Sample Input:----- 2 5 9 2 7 11 15 1 4 0 -1 1 -2 2 -----Sample Output:----- 1 2","solution":"def count_pairs_with_sum(test_cases): results = [] for case in test_cases: n, K, arr = case count = 0 seen = {} for number in arr: target = K - number if target in seen: count += seen[target] if number in seen: seen[number] += 1 else: seen[number] = 1 results.append(count) return results def parse_input(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n, K = map(int, lines[index].split()) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, K, arr)) index += 2 return test_cases"},{"question":"Given a string s, find the length of the longest substring without repeating characters. Example 1: Input: \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Example 2: Input: \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. Example 3: Input: \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. Hint: Consider using a sliding window approach to solve this problem. Constraints: - 0 <= s.length <= 5 * 10^4 - The string consists of English letters, digits, symbols, and spaces.","solution":"def length_of_longest_substring(s): Finds the length of the longest substring without repeating characters. char_map = {} left = 0 longest = 0 for right, char in enumerate(s): if char in char_map and char_map[char] >= left: left = char_map[char] + 1 char_map[char] = right longest = max(longest, right - left + 1) return longest"},{"question":"You\'ll be given a positive integer `n` (1 <= n <= 10000). Your task is to find the smallest positive integer `m` such that the last digit of `n^m` is `1`. For example, if `n = 2`, the powers of 2 will be: 2, 4, 8, 16, 32, 64, 128, ..., where the last digit is `2, 4, 8, 6`. Notice that `2` does not have a last digit of `1` for any positive integer `m`. Therefore, the output has to be `None`/`nil`. If `n = 9`, the powers will be: 9, 81, 729, 6561, ..., where the last digit sequence is `9, 1, 9, 1`. In this case, the smallest `m` where the last digit of `9^m` is `1` is `2`. Input - A positive integer `n` (1 <= n <= 10000) Output - The smallest positive integer `m` such that the last digit of `n^m` is `1`. If no such `m` exists, return `None`/`nil`.","solution":"def smallest_m_with_last_digit_1(n): Given a positive integer n, finds the smallest positive integer m such that the last digit of n^m is 1. If no such m exists, returns None. # Function to get the last digit of a number def last_digit(num): return num % 10 target_last_digit = 1 for m in range(1, 11): # Check for the first 10 powers, there will be a cycle if it exists if last_digit(n ** m) == target_last_digit: return m return None"},{"question":"# Task Given a string of brackets `s`, determine whether the arrangement of brackets is valid. A valid bracket string is a string that meets the following criteria: 1. Open brackets `(`, `{`, and `[` must be closed by the corresponding closing brackets `)`, `}`, and `]` in the correct order. 2. An open bracket must have a corresponding close bracket of the same type. Write a function to return `true` if the bracket arrangement is valid, otherwise, return `false`. # Input/Output `[input]` string `s` A string consisting of characters `(`, `)`, `{`, `}`, `[`, and `]`. `0 ≤ inputString.length ≤ 10000.` `[output]` a boolean Return `true` if the brackets are arranged in a valid way, otherwise return `false`. # Example For `s = \\"()\\"`, the output should be `true`. For `s = \\"{}[]\\"`, the output should be `true`. For `s = \\"([{}])\\"`, the output should be `true`. For `s = \\"{[}]\\"`, the output should be `false`. For `s = \\"[(])\\"`, the output should be `false`.","solution":"def is_valid_bracket_arrangement(s): Returns True if the brackets in the string s are arranged in a valid way, otherwise returns False. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: continue return stack == []"},{"question":"A treacherous spy has infiltrated the Cyberverse and corrupted its data logs by adding noise characters to messages. The Chief Cyborg \'100gods\' needs your help in deciphering the original messages. Each message is an alphanumeric string where each letter is repeated a random number of times, followed by a number indicating how many times the letter was originally intended to appear. Your task is to reconstruct the original message by identifying and removing the repeated letters followed by the number that indicates their intended occurrence. -----Input:----- - The first line contains an integer T, denoting the number of test cases. - Each of the next T lines contains a single message string, which is non-empty and consists of letters (both uppercase and lowercase) and digits. -----Output:----- - For each test case, output a single line containing the original message string. -----Constraints:----- - 1 leq T leq 1000 - The length of each message string is at most 1000 characters. -----Sample Input:----- 3 a3b2 cc3a1 ttt3e2rrr2 -----Expected Output:----- ab ca ter -----Explanation:----- - For the input \\"a3b2\\", \'a\' appears 3 times and \'b\' appears 2 times, so the original message is \\"ab\\". - For the input \\"cc3a1\\", \'c\' appears 3 times followed by the number 3, which should appear once, so the original message is \\"ca\\". - For the input \\"ttt3e2rrr2\\", \'t\' appears 3 times, \'e\' appears 2 times, and \'r\' appears 3 times followed by 2, indicating original message \\"ter\\".","solution":"def decipher_message(message): Decipher the message by removing repeated letters followed by their intended count. i = 0 original_message = [] while i < len(message): current_char = message[i] j = i while j < len(message) and message[j].isdigit() == False: j += 1 count_string = [] while j < len(message) and message[j].isdigit(): count_string.append(message[j]) j += 1 count = int(\'\'.join(count_string)) original_message.append(current_char) i = j return \'\'.join(original_message) def decipher_messages(test_cases): Deciphers a list of messages. return [decipher_message(message) for message in test_cases]"},{"question":"**Question Title:** Path to Wonderland Alice is playing an interesting game in Wonderland. She is standing at the entrance of a lush garden with N distinct nodes connected by N-1 unidirectional paths, forming a rooted tree structure. The root of the tree is the node 1. Each node i has a unique identifier ranging from 1 to N. To make things more fun, the Mad Hatter has assigned a unique number to each node representing its magical power, given by p_i. Alice wants to reach a specific destination node d starting from the root node 1. For each node i on her way, she collects the magical power p_i. Since she is very curious, she wants to know what is the total magical power she will have collected by the time she reaches node d. ---Input--- - The first line of input contains a single integer T denoting the number of test cases. - The first line of each test case contains a single integer N denoting the number of nodes. - The next N-1 lines of each test case contain two space-separated integers U and V representing a directed path from node U to node V. - The next line contains N space-separated integers p_1, p_2, dots, p_N denoting the magical power of each node. - The final line contains a single integer d denoting the destination node Alice wants to reach. ---Output--- For each test case, print a single line containing the total magical power Alice will have collected by the time she reaches node d. ---Constraints--- - 1 le T le 10 - 1 le N le 10^5 - 1 le U, V le N - 1 le p_i le 10^9 for each valid i - 1 le d le N ---Sample Input--- 1 5 1 2 1 3 2 4 2 5 10 20 30 40 50 4 ---Sample Output--- 70 ---Explanation--- In the sample case, Alice starts from the root (node 1) and collects the magical power from nodes 1, 2, and 4. The path is 1 -> 2 -> 4, and the total magical power collected is 10 + 20 + 40 = 70.","solution":"def total_magic_power(T, test_cases): For each test case, calculates the total magical power collected by Alice. Args: T : int : number of test cases test_cases : list : list of tuples, each containing details of a test case Returns: list : total magical power collected for each test case results = [] for case in test_cases: N, edges, powers, destination = case from collections import defaultdict, deque # Construct the adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) # BFS to find the path from root to destination parent = [-1] * (N + 1) queue = deque([1]) parent[1] = 0 while queue: current = queue.popleft() if current in adj_list: for neighbor in adj_list[current]: if parent[neighbor] == -1: parent[neighbor] = current queue.append(neighbor) # Trace back the path from destination to root path = [] node = destination while node != 0: path.append(node) node = parent[node] # Calculate the total magical power collected total_power = sum(powers[node - 1] for node in path) results.append(total_power) return results"},{"question":"Write a function that takes an array of integers as input and returns the sum of all odd numbers in the array. If the array is empty or contains no odd numbers, the function should return 0. For example: ``` sumOfOdds([1, 2, 3, 4, 5]) = 9 sumOfOdds([2, 4, 6, 8]) = 0 sumOfOdds([]) = 0 ``` Write the implementation in the language of your choice.","solution":"def sumOfOdds(nums): Returns the sum of all odd numbers in the given list of integers. Parameters: nums (list): A list of integers Returns: int: Sum of odd numbers, or 0 if there are no odd numbers return sum(num for num in nums if num % 2 != 0)"},{"question":"# Task Write a function that takes in a string containing a paragraph of text and a list of words, and returns a list of sentences from the paragraph where at least one of the words from the list appears. The sentences should be in the order they appear in the paragraph. Sentences are delimited by `.` (period), `?` (question mark) and `!` (exclamation mark). # Notes * The function should be case insensitive when checking for word matches. * Punctuation marks at the end of sentences must be preserved in the output. * If no sentence contains any of the words, return an empty list. * Ignore any leading or trailing whitespace in the paragraph and sentences. # Examples * ex1 * Input: * paragraph = \\"Hello there! How are you today? I hope everything is fine.\\" * words = [\\"hope\\", \\"today\\"] * Result: ```[\\"How are you today?\\", \\"I hope everything is fine.\\"]``` * ex2 * Input: * paragraph = \\"Yesterday was a great day. I went to the park and had a picnic.\\" * words = [\\"today\\"] * Result: ```[]``` * ex3 * Input: * paragraph = \\"Do you like apples? Apples are delicious!\\" * words = [\\"like\\", \\"delicious\\"] * Result: ```[\\"Do you like apples?\\", \\"Apples are delicious!\\"]```","solution":"import re def find_sentences_with_words(paragraph, words): This function takes a paragraph of text and a list of words and returns a list of sentences containing at least one word from the list, in the order they appear in the paragraph. Parameters: paragraph (str): The paragraph of text. words (list): The list of words to search for in the sentences. Returns: list: A list of sentences containing at least one word from the list. # Normalize the words to lowercase for case-insensitive matching words_set = set(word.lower() for word in words) # Split the paragraph into sentences using a regex to correctly handle ., ? and ! sentences = re.split(r\'(?<=[.?!])s*\', paragraph.strip()) # Filter sentences that contain any of the words result = [sentence for sentence in sentences if any(word in sentence.lower() for word in words_set)] return result"},{"question":"Write a function that takes a list of integers and an integer target value. The function should return the lengths of the longest contiguous subarray that sums up to the target value. If no such subarray exists, the function should return 0. Examples ```python longest_subarray_sum([1, -1, 5, -2, 3], 3) => 4 longest_subarray_sum([-2, -1, 2, 1], 1) => 2 longest_subarray_sum([1, 2, 3, 4, 5], 15) => 5 longest_subarray_sum([1, 2, 3, 4, 5], 11) => 0 ```","solution":"def longest_subarray_sum(nums, target): Returns the length of the longest contiguous subarray that sums up to the target value. If no such subarray exists, returns 0. sum_index = {} current_sum = 0 max_len = 0 for i, num in enumerate(nums): current_sum += num if current_sum == target: max_len = i + 1 if current_sum - target in sum_index: max_len = max(max_len, i - sum_index[current_sum - target]) if current_sum not in sum_index: sum_index[current_sum] = i return max_len"},{"question":"Python: Identify if a given string `s` containing characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is a valid expression. A valid expression is one where the brackets are correctly matched and nested. For example, the input `s = \\"([]{})\\"` should return `True` as it is a correctly matched expression, whereas the input `s = \\"([{]})\\"` should return `False` due to incorrect matching. ```python def isValid(s: str) -> bool: stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack # Test cases print(isValid(\\"([]{})\\")) # Output: True print(isValid(\\"([{]})\\")) # Output: False print(isValid(\\"((()))\\")) # Output: True print(isValid(\\"[{()}]\\")) # Output: True print(isValid(\\"{[}]\\")) # Output: False ```","solution":"def isValid(s: str) -> bool: stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Implement a function that determines whether a given string (containing only alphabets) is a palindrome. A string is considered a palindrome if it reads the same backward as forward, ignoring case and non-alphanumeric characters. Assume the input is a non-empty string. ```python is_palindrome(\\"A man, a plan, a canal, Panama\\") == true is_palindrome(\\"race a car\\") == false is_palindrome(\\"No lemon, no melon\\") == true ``` ```C is_palindrome(\\"A man, a plan, a canal, Panama\\") == true; is_palindrome(\\"race a car\\") == false; is_palindrome(\\"No lemon, no melon\\") == true; ```","solution":"import re def is_palindrome(s: str) -> bool: Determines if the given string is a palindrome, ignoring case and non-alphanumeric characters. Parameters: s (str): The input string containing only alphabets. Returns: bool: True if the input string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lower case cleaned_str = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string reads the same backward and forward return cleaned_str == cleaned_str[::-1]"},{"question":"# Network Packet Reordering In computer networks, data is often sent as a series of packets. When these packets arrive at their destination, they may come in a different order than they were sent due to various network factors. Your task is to write a function that reorders these packets based on their sequence numbers. Each packet is represented as a tuple consisting of a sequence number and the data as a string. The input to your function will be a list of such packets, possibly out of order, and your task is to return a list of the data strings in the order of their sequence numbers. ```python def reorder_packets(packets): Reorders the given packets based on their sequence numbers. :param packets: List of tuples, each containing (sequence number, data string) :return: List of data strings in the order of their sequence numbers # Your code here ``` # Example For the input: ```python packets = [(2, \\"world\\"), (3, \\"this\\"), (1, \\"Hello\\"), (4, \\"is\\"), (5, \\"test\\")] ``` The function should return: ```python reorder_packets(packets) => [\\"Hello\\", \\"world\\", \\"this\\", \\"is\\", \\"test\\"] ``` # Constraints - The sequence numbers will be unique and consecutive starting from 1. - The number of packets will be at most 1000. # Hint You might find it useful to sort the packets based on their sequence numbers before extracting the data strings.","solution":"def reorder_packets(packets): Reorders the given packets based on their sequence numbers. :param packets: List of tuples, each containing (sequence number, data string) :return: List of data strings in the order of their sequence numbers # Sort the packets based on their sequence numbers packets.sort() # Extract the data strings in sorted order ordered_data = [data for _, data in packets] return ordered_data"},{"question":"Write a function called ```fixDateFormat``` that takes a string representing a date in the format `MM-DD-YYYY` and returns the date in the format `YYYY/MM/DD`. Ensure that both the input and output strings have leading zeroes where appropriate (e.g., \\"01-05-2023\\" should become \\"2023/01/05\\"). Your function should handle invalid inputs gracefully, returning an appropriate error message.","solution":"def fixDateFormat(date_str): Takes a date string in the format MM-DD-YYYY and returns it in the format YYYY/MM/DD. If the input is invalid, returns an appropriate error message. try: month, day, year = date_str.split(\'-\') if len(month) == 2 and len(day) == 2 and len(year) == 4: return f\\"{year}/{month}/{day}\\" else: return \\"Invalid date format\\" except ValueError: return \\"Invalid date format\\""},{"question":"Given an integer array `nums` and an integer `k`, write a function **find_pairs** that returns the number of unique pairs (i, j) where `0 <= i < j < nums.length` and `nums[i] + nums[j] == k`. Example find_pairs([1, 2, 3, 4, 3], 6) returns 2 (the pairs are (2, 4) and (3, 3)) find_pairs([1, 5, 1, 5], 6) returns 4 (the pairs are (1, 5), (1, 5), (1, 5), (1, 5))","solution":"def find_pairs(nums, k): Finds the number of unique pairs (i, j) in an array such that nums[i] + nums[j] == k. count = 0 seen_pairs = set() for i in range(len(nums)): for j in range(i + 1, len(nums)): if nums[i] + nums[j] == k and (i, j) not in seen_pairs: count += 1 seen_pairs.add((i, j)) return count"},{"question":"You are given an array of positive integers. You can perform the following operation any number of times (including zero): - Choose any two elements of the array a_i and a_j (i neq j) and replace a_i with a_i - a_j. Find out the minimum value the maximum element of the array can be reduced to by performing the operations optimally. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer n denoting the number of elements in the array. - The second line contains n space-separated integers a_1, a_2, ... , a_n denoting the elements of the array. -----Output----- For each test case, print a single integer — the minimum possible value of the maximum element after any number of operations. -----Constraints----- - 1 le T le 10 - 2 le n le 100 - 1 le a_i le 10^9 -----Example Input----- 2 3 5 15 10 4 8 4 12 16 -----Example Output----- 5 4 -----Explanation----- Example case 1: One of the optimal sequences of operations is: (15, 5, 10) → (10, 5, 10) → (5, 5, 10) → (5, 5, 5). After performing several operations, the array will contain elements that are all the same value, which is the GCD of the initial array. Example case 2: The GCD of the array is 4. You can follow similar steps to reduce all elements to 4.","solution":"import math from typing import List def find_min_max_value(n: int, arr: List[int]) -> int: Returns the minimum possible value of the maximum element after any number of operations. return math.gcd(*arr) def process_test_cases(T: int, test_cases: List[List[int]]) -> List[int]: results = [] for test_case in test_cases: n, arr = test_case[0], test_case[1:] results.append(find_min_max_value(n, arr)) return results"},{"question":"Given a list of integers, you are required to write a function that finds the first integer that is unique (not repeated anywhere else in the list). If no unique integer is found, return -1. For example: - For the input list [9, 2, 3, 2, 6, 6], the output should be 9 (because 9 is the first unique integer). - For the input list [4, 5, 4, 5, 7, 8, 8], the output should be 7 (because 7 is the first unique integer). - For the input list [1, 1, 2, 2, 3, 3], the output should be -1 (because there\'s no unique integer). Function signature: ```python def find_first_unique(lst: list) -> int: # your code here ``` # Constraints: - The input list can contain up to 10^5 integers. - Each integer can range from -10^9 to 10^9.","solution":"def find_first_unique(lst: list) -> int: Finds the first unique integer in the list. If no unique integer is found, returns -1. frequency = {} # Calculate frequency of each element for num in lst: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 # Find the first unique element for num in lst: if frequency[num] == 1: return num return -1"},{"question":"A majority element in an array A of size N is an element that appears more than N/2 times (and hence there is at most one such element). You need to find the majority element in the array. If it does not exist, return -1. Example 1: Input: nums = [3,3,4,2,4,4,2,4,4] Output: 4 Example 2: Input: nums = [3,3,4,2,4,4,2,4] Output: -1","solution":"def majority_element(nums): Returns the majority element if it exists, otherwise returns -1. count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) # Verify that the candidate is actually a majority element if nums.count(candidate) > len(nums) // 2: return candidate else: return -1"},{"question":"Find the Missing Number in an Array You are given an array containing \'n\' distinct numbers taken from the range 0 to \'n\'. This means that exactly one number from the range is missing from the array. Write a function to find and return the missing number. # Input: - A list of integers `arr` where `1 <= len(arr) <= 10^4` and each integer is unique and lies between 0 and n inclusive. # Output: - Return the single missing number from the range 0 to n. # Note: - Your algorithm should run in linear runtime complexity. # Hint: - Consider the sum of the first \'n\' natural numbers. Can you make use of this information? # Examples: ```python find_missing_number([3, 0, 1]) == 2 find_missing_number([9, 6, 4, 2, 3, 5, 7, 0, 1]) == 8 find_missing_number([0, 1, 2, 3, 4, 5, 6, 7, 9]) == 8 find_missing_number([0]) == 1 ``` # Constraints: - The array will always have exactly one missing number. - Your solution should handle large arrays efficiently, aiming for O(n) time complexity.","solution":"def find_missing_number(arr): Find the missing number in the array. Args: arr (list): The array containing \'n\' distinct numbers taken from the range 0 to \'n\'. Returns: int: The missing number. n = len(arr) total_sum = n * (n + 1) / 2 # Sum of the first n natural numbers arr_sum = sum(arr) # Sum of elements in the array return int(total_sum - arr_sum)"},{"question":"# Task: You are given a list of integers representing the heights of a collection of trees in a forest. Your task is to determine the maximum height difference between two trees such that the shorter tree is to the left of the taller tree. # Input: - An integer list `heights` represents the heights of trees in a forest. # Output: - An integer that represents the maximum height difference between two trees where the shorter tree is positioned before the taller tree. # Example: ``` Input: [3, 1, 4, 2, 5] Output: 4 Input: [9, 7, 3, 1, 2, 6] Output: 5 ``` # Constraints: - The input list will have at least 2 elements. - The heights of the trees are non-negative integers and fit within a standard 32-bit integer.","solution":"def max_height_difference(heights): Returns the maximum height difference between two trees such that the shorter tree is positioned before the taller tree. max_diff = 0 min_height = heights[0] for height in heights[1:]: if height > min_height: max_diff = max(max_diff, height - min_height) min_height = min(min_height, height) return max_diff"},{"question":"You are given a list of non-negative integers representing an elevation map where the width of each bar is 1. Suppose the heights are given in the form of an array `heights`. Write a function to calculate the amount of water that can be trapped after raining. For instance, given the heights array `heights = [0,1,0,2,1,0,1,3,2,1,2,1]`, the function should return `6` because 6 units of water can be trapped as illustrated below: ``` # # # # height array: [0,1,0,2,1,0,1,3,2,1,2,1] ``` Explanation: - At index 1, the water trapped (between heights 1 and 2) is 1 unit. - At index 5, the water trapped (between heights 2 and 3) is 1 unit. - At index 6, the water trapped (between heights 2 and 3) is 2 units. - At index 9, the water trapped (between heights 2 and 2) is 1 unit. - At index 10, the water trapped (between heights 3 and 2) is 1 unit. - Total trapped water = 1 + 1 + 2 + 1 + 1 = 6 units. # Input - A list `heights` of non-negative integers with its length `n` such that `1 <= n <= 2 * 10^4`. # Output - An integer representing the total amount of water that can be trapped. # Function Signature ```python def trap_rain_water(heights: List[int]) -> int: ``` # Example ```python assert trap_rain_water([0,1,0,2,1,0,1,3,2,1,2,1]) == 6 assert trap_rain_water([4,2,0,3,2,5]) == 9 ``` # Constraints - The solution is expected to be efficient, with an emphasis on time and space complexity.","solution":"from typing import List def trap_rain_water(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate total water trapped for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"# Task Alice has a string made up of lowercase English letters. She considers a subsequence to be \\"pleasant\\" if all the letters in it are organized in non-decreasing order. For instance, in the string \\"abc\\", the subsequences \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ac\\", \\"bc\\", and \\"abc\\" are all pleasant. Alice wants to know how many pleasant subsequences there are in the given string. Can you help her determine this number? Note: A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. # Example: For `s = \\"abc\\"`, the output should be `7`. - Pleasant subsequences: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ac\\", \\"bc\\", \\"abc\\". The answer is `7`. For `s = \\"aab\\"`, the output should be `7`. - Pleasant subsequences: \\"a\\", \\"a\\", \\"b\\", \\"aa\\", \\"ab\\", \\"ab\\", \\"aab\\". The answer is `7`. # Input/Output - `[input]` string `s` `1 ≤ s.length ≤ 1000` The input string consists of lowercase English letters. - `[output]` an integer The total number of pleasant subsequences.","solution":"from itertools import combinations def count_pleasant_subsequences(s): Returns the number of pleasant subsequences in the given string `s`. A subsequence is pleasant if all the letters in it are organized in non-decreasing order. n = len(s) count = 0 for length in range(1, n+1): for subseq in combinations(s, length): if list(subseq) == sorted(subseq): count += 1 return count"},{"question":"You are writing a program to manage a series of events in a calendar application. Each event has a start time, end time, and a description. Write a function that, given a list of events, returns a list of merged events if any of them overlap. Two events overlap if one of them starts before the other one ends. Input A list of events, where each event is a tuple composed of: - start time in 24-hour format \\"HH:MM\\" - end time in 24-hour format \\"HH:MM\\" - description (a string). Output A list of merged events (if any overlap), maintaining the same format as the input. Example Input: ``` [(\\"09:00\\", \\"10:30\\", \\"Event 1\\"), (\\"10:00\\", \\"11:00\\", \\"Event 2\\"), (\\"11:30\\", \\"12:00\\", \\"Event 3\\"), (\\"12:00\\", \\"12:30\\", \\"Event 4\\")] ``` Output: ``` [(\\"09:00\\", \\"11:00\\", \\"Event 1, Event 2\\"), (\\"11:30\\", \\"12:00\\", \\"Event 3\\"), (\\"12:00\\", \\"12:30\\", \\"Event 4\\")] ```","solution":"def merge_events(events): Merges overlapping events, returning a list of merged events. Parameters: events (list of tuples): A list of events, where each event is a tuple (start_time, end_time, description). Returns: merged_events (list of tuples): A list of merged events in the same format (start_time, end_time, description). def time_to_minutes(t): Converts a time in \\"HH:MM\\" format into minutes since midnight. h, m = map(int, t.split(\\":\\")) return h * 60 + m def minutes_to_time(m): Converts minutes since midnight into \\"HH:MM\\" format. h = m // 60 m = m % 60 return f\\"{h:02}:{m:02}\\" # Sort events by start time events.sort(key=lambda event: time_to_minutes(event[0])) merged_events = [] for event in events: if not merged_events or time_to_minutes(event[0]) > time_to_minutes(merged_events[-1][1]): merged_events.append(event) else: merged_events[-1] = (merged_events[-1][0], max(merged_events[-1][1], event[1]), merged_events[-1][2] + \\", \\" + event[2]) return merged_events # Input: [(\\"09:00\\", \\"10:30\\", \\"Event 1\\"), (\\"10:00\\", \\"11:00\\", \\"Event 2\\"), (\\"11:30\\", \\"12:00\\", \\"Event 3\\"), (\\"12:00\\", \\"12:30\\", \\"Event 4\\")] # Expected Output: [(\\"09:00\\", \\"11:00\\", \\"Event 1, Event 2\\"), (\\"11:30\\", \\"12:00\\", \\"Event 3\\"), (\\"12:00\\", \\"12:30\\", \\"Event 4\\")] input_events = [(\\"09:00\\", \\"10:30\\", \\"Event 1\\"), (\\"10:00\\", \\"11:00\\", \\"Event 2\\"), (\\"11:30\\", \\"12:00\\", \\"Event 3\\"), (\\"12:00\\", \\"12:30\\", \\"Event 4\\")] print(merge_events(input_events))"},{"question":"In a small town, the local library wants to create a new digital catalog system. The catalog includes books with unique identifiers, titles, and the year of publication. The library also wants to be able to retrieve a list of all the books published within a specific year range. You are tasked with creating a program that performs these operations efficiently. -----INPUT----- The first line of the input contains an integer T, denoting the number of catalog entries. The description of T catalog entries follows. Each entry consists of three lines: the first line contains a unique identifier (an integer), the second line contains the title of the book (a string), and the third line contains the year of publication (an integer). The next line contains an integer Q, denoting the number of queries. Each query consists of two integers A and B, representing the start and end years of the range (inclusive). -----OUTPUT----- For each query, output a list of book titles published within the specified year range in alphabetical order. Each list should be printed on a new line. If no books are found within the range, print \\"No books found\\". -----CONSTRAINTS----- 1 <= T <= 100 1000 <= unique identifier <= 9999 Each title will be a non-empty string containing only English letters and spaces, and its length will not exceed 100 characters. 1800 <= year of publication <= 2023 1 <= Q <= 50 1800 <= A <= B <= 2023 -----EXAMPLE----- Input: 5 1001 Moby Dick 1851 1002 Hamlet 1600 1003 To Kill a Mockingbird 1960 1004 Pride and Prejudice 1813 1005 1984 1949 2 1800 1900 1950 2000 Output: Pride and Prejudice Moby Dick No books found To Kill a Mockingbird","solution":"def catalog_books(T, book_entries, Q, queries): Catalog and retrieve books based on the publication year range. catalog = {} # Parse book entries for i in range(T): id = book_entries[i*3] title = book_entries[i*3 + 1] year = int(book_entries[i*3 + 2]) if year not in catalog: catalog[year] = [] catalog[year].append(title) # Handle queries results = [] for i in range(Q): A, B = queries[i] books_in_range = [] for year in range(A, B + 1): if year in catalog: books_in_range.extend(catalog[year]) if books_in_range: results.append(sorted(books_in_range)) else: results.append(\\"No books found\\") return results"},{"question":"A Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes 0, 1, 1, 2, 3, 5, 8, 13, and so forth. Write a function that returns the nth Fibonacci number. For example, if n = 5, the function should return 5 (since the sequence is 0, 1, 1, 2, 3, 5). If n = 10, the function should return 55.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"=====Function Descriptions===== math.gcd The `math.gcd` function returns the greatest common divisor of the two integers provided. The GCD of two integers is the largest integer that divides both of them without leaving a remainder. Example Code >>> import math >>> math.gcd(8, 12) 4 >>> math.gcd(54, 24) 6 =====Problem Statement===== You are given a list of fractions in the form of two integers for the numerator and denominator. Your task is to reduce each fraction to its simplest form and print the result as a tuple of the numerator and denominator. =====Input Format===== The first line contains the number of fractions, N (1 ≤ N ≤ 20). The next N lines each contain two integers separated by a space, representing the numerator and denominator of each fraction. =====Output Format===== Print N lines, each containing a tuple of two integers representing the numerator and denominator of the fraction in its simplest form. =====Constraints===== 1 ≤ numerator, denominator ≤ 1000 =====Sample Input===== 3 4 8 50 100 7 5 =====Sample Output===== (1, 2) (1, 2) (7, 5)","solution":"import math def simplify_fraction(numerator, denominator): gcd = math.gcd(numerator, denominator) return (numerator // gcd, denominator // gcd) def reduce_fractions(fractions): simplified_fractions = [] for numerator, denominator in fractions: simplified_fractions.append(simplify_fraction(numerator, denominator)) return simplified_fractions"},{"question":"During your research on patterns within biological sequences, you encounter the concept of tandem repeats. A tandem repeat in a string is a substring that appears consecutively more than once. You wonder if a given biological sequence contains such repeats. The biological sequence is represented by a string of lowercase English characters. You need to determine if there exists a substring of length at least 2 which appears consecutively at least once. -----Input----- The first line of the input contains an integer n (1 leq n leq 100,000) — the length of the biological sequence. The following line contains a string of length n consisting of lowercase English characters representing the biological sequence. -----Output----- Print \\"YES\\" if there exists a substring of length at least 2 which appears consecutively. Otherwise, print \\"NO\\". You can print each character in any case (either upper or lower). -----Examples----- Input 7 abababa Output YES Input 6 abcdef Output NO","solution":"def contains_tandem_repeats(n, sequence): Determines if there is a substring of length at least 2 which appears consecutively. Parameters: n (int): The length of the sequence. sequence (str): The biological sequence. Returns: str: \'YES\' if there is a tandem repeat, \'NO\' otherwise. for i in range(n - 1): if sequence[i] == sequence[i + 1]: return \'YES\' for length in range(2, n // 2 + 1): for i in range(n - 2*length + 1): if sequence[i:i+length] == sequence[i+length:i+2*length]: return \'YES\' return \'NO\'"},{"question":"Given a string `s`, determine the length of the longest substring without repeating characters. -----Input----- The input contains multiple test cases. Each test case consists of a single string `s` of length `n` (1 <= n <= 10^5). Input is terminated by `s = \\"END\\"`. -----Output----- For each test case, output a single integer representing the length of the longest substring without repeating characters. -----Example----- Input: abcabcbb bbbbb pwwkew END Output: 3 1 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters for the input string s. if s == \\"END\\": return None char_map = {} left_ptr = 0 max_length = 0 for right_ptr in range(len(s)): if s[right_ptr] in char_map: left_ptr = max(left_ptr, char_map[s[right_ptr]] + 1) char_map[s[right_ptr]] = right_ptr max_length = max(max_length, right_ptr - left_ptr + 1) return max_length"},{"question":"Alex is a collector of vintage toys and has recently purchased a collection of toy sets. Each toy set contains a certain number of individual toys. Alex wants to know if he can combine any subset of these toy sets to add up to an exact number of toys to complete his display. Your task is to help Alex determine if it is possible to select a combination of toy sets that sum exactly to the desired number of toys. -----Input:----- - The first line of input contains an integer T representing the number of test cases. Each test case consists of the following: - The first integer M on a single line, representing the exact number of toys needed. - The second integer N on the next line, representing the number of toy sets available. - A list of N integers on the next line, where each integer represents the number of toys in each toy set. -----Output:----- - For each test case, output a single line containing 1 if it\'s possible to obtain exactly M toys using any combination of the given toy sets, and 0 otherwise. -----Constraints----- - 1 leq T leq 100 - 1 leq M leq 10^7 - 1 leq N leq 800 - 1 leq toy_set[i] leq 10^3 -----Sample Input:----- 2 15 5 2 3 7 8 10 25 4 5 5 5 5 -----Sample Output:----- 1 0","solution":"def can_sum_exactly_toys(T, test_cases): results = [] def is_subset_sum(toy_sets, n, m): subset = [[False] * (m + 1) for _ in range(n + 1)] for i in range(n + 1): subset[i][0] = True for i in range(1, n + 1): for j in range(1, m + 1): if j < toy_sets[i - 1]: subset[i][j] = subset[i - 1][j] else: subset[i][j] = subset[i - 1][j] or subset[i - 1][j - toy_sets[i - 1]] return subset[n][m] for case in test_cases: M, N, toy_sets = case[\\"M\\"], case[\\"N\\"], case[\\"toy_sets\\"] if is_subset_sum(toy_sets, N, M): results.append(1) else: results.append(0) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): M = int(lines[index]) N = int(lines[index + 1]) toy_sets = list(map(int, lines[index + 2].split())) test_cases.append({\\"M\\": M, \\"N\\": N, \\"toy_sets\\": toy_sets}) index += 3 return T, test_cases def main(input_string): T, test_cases = parse_input(input_string) results = can_sum_exactly_toys(T, test_cases) for result in results: print(result) # Example usage: # input_string = \\"2n15n5n2 3 7 8 10n25n4n5 5 5 5\\" # main(input_string)"},{"question":"Write a function that takes a list of words and returns the length of the shortest word in the list. If the list is empty or contains elements that are not strings, the function should return 0. For example, given the list `[\\"Hello\\", \\"world\\", \\"Python\\", \\"is\\", \\"awesome\\"]`, the function should return 2, because \\"is\\" is the shortest word with a length of 2. **Examples:** ```python shortest_word_length([\\"Hello\\", \\"world\\", \\"Python\\", \\"is\\", \\"awesome\\"]) # Returns: 2 shortest_word_length([\\"coding\\", \\"assessment\\", \\"question\\"]) # Returns: 7 shortest_word_length([]) # Returns: 0 shortest_word_length([12345, \\"Pythagoras\\", \\"\\", \\"pi\\", \\"e\\"]) # Returns: 0 ```","solution":"def shortest_word_length(words): Returns the length of the shortest word in the list. If the list is empty or contains non-string elements, returns 0. if not words or any(not isinstance(word, str) for word in words): return 0 shortest_length = min(len(word) for word in words if isinstance(word, str)) return shortest_length"},{"question":"You are given a list of projects and a list of dependencies between these projects. Each dependency is a pair of projects where the first project depends on the completion of the second project. All projects must be completed, and a project can only begin if all of its dependencies have been completed. Determine the minimum time required to complete all projects if each project takes exactly one unit of time to complete. If it\'s not possible to complete all projects due to a circular dependency, return -1. Example: Input: projects = [1, 2, 3, 4] dependencies = [[2, 1], [3, 2], [4, 3], [1, 4]] Output: -1 Explanation: There is a circular dependency: 1 -> 4 -> 3 -> 2 -> 1 Input: projects = [1, 2, 3, 4] dependencies = [[2, 1], [3, 2], [4, 3]] Output: 4 Explanation: The projects can be completed in the order: 1 -> 2 -> 3 -> 4. Each step takes 1 unit of time, so the total time is 4. Constraints: - 1 <= projects.length <= 10^4 - 0 <= dependencies.length <= 10^5 - Each dependency is a pair of distinct projects from the given list of projects.","solution":"from collections import defaultdict, deque def minimum_time_to_complete_projects(projects, dependencies): Determines the minimum time required to complete all projects given the dependencies. Returns -1 if there is a circular dependency. # Build adjacency list and in-degree count adj = defaultdict(list) in_degree = {project: 0 for project in projects} for u, v in dependencies: adj[v].append(u) in_degree[u] += 1 # Queue for projects with no dependencies queue = deque([project for project in projects if in_degree[project] == 0]) completed_projects = 0 time_units = 0 while queue: current_level_size = len(queue) for _ in range(current_level_size): project = queue.popleft() completed_projects += 1 for neighbor in adj[project]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) time_units += 1 if completed_projects == len(projects): return time_units else: return -1"},{"question":"Given an array of integers, create a function `even_odd_difference(arr)` that calculates and returns the absolute difference between the sum of the even numbers and the sum of the odd numbers in the array. If the array is empty, return 0.","solution":"def even_odd_difference(arr): Returns the absolute difference between the sum of the even numbers and the sum of the odd numbers in the array. Returns 0 if the array is empty. if not arr: return 0 even_sum = sum(x for x in arr if x % 2 == 0) odd_sum = sum(x for x in arr if x % 2 != 0) return abs(even_sum - odd_sum)"},{"question":"You are given a list of integers representing the number of pages in each book in a collection. Your goal is to distribute these books into two piles such that the difference between the total number of pages in the two piles is minimized. Write a function that takes in the list of integers (`books`) and returns the minimum difference between the totals of the two piles. # Example: ```python books = [10, 20, 15, 5, 25] minimize_difference(books) ``` Should return `5`, because you can split the books into piles with pages totals of `[10, 20, 15]` (45 pages) and `[5, 25]` (30 pages). # Note: - The list can have any length from 1 to 100. - Each integer in the list can be between 1 and 1000. - The solution should be efficient in terms of both time and space complexity.","solution":"def minimize_difference(books): total_pages = sum(books) n = len(books) half_total = total_pages // 2 # Create a DP array to store results of subproblems dp = [[False] * (half_total + 1) for _ in range(n + 1)] dp[0][0] = True # Fill the DP table for i in range(1, n + 1): for j in range(half_total + 1): if j >= books[i-1]: dp[i][j] = dp[i-1][j] or dp[i-1][j-books[i-1]] else: dp[i][j] = dp[i-1][j] # Find the difference closest to half_total for j in range(half_total, -1, -1): if dp[n][j]: pile1 = j break pile2 = total_pages - pile1 return abs(pile1 - pile2)"},{"question":"Implement a function `rotate_matrix` that takes a square matrix (a list of lists) and rotates it 90 degrees clockwise. The matrix should be rotated in place, meaning you should not create a new matrix. **Function Signature:** ```python def rotate_matrix(matrix: List[List[int]]) -> None: ``` # Input - A list of lists `matrix` representing a square matrix, where each inner list represents a row. # Output - The function should modify the input matrix in place, so there is no return value. # Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) print(matrix) # Output should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` # Constraints - You can assume the matrix is always a non-empty square matrix (i.e., `n x n` where `1 <= n <= 10`).","solution":"def rotate_matrix(matrix): Rotates the given NxN matrix 90 degrees clockwise in place. n = len(matrix) for layer in range(n // 2): first = layer last = n - 1 - layer for i in range(first, last): offset = i - first top = matrix[first][i] # save top # left -> top matrix[first][i] = matrix[last - offset][first] # bottom -> left matrix[last - offset][first] = matrix[last][last - offset] # right -> bottom matrix[last][last - offset] = matrix[i][last] # top -> right matrix[i][last] = top"},{"question":"Given a string s containing only lowercase letters, find the length of the longest substring with all unique characters. Example Input: s = \\"ababcde\\" Expected Output: 5 Explanation: The longest substring with all unique characters is \\"abcde\\", which has a length of 5.","solution":"def length_of_longest_unique_substring(s): Finds the length of the longest substring with all unique characters in a given string. :param s: input string :return: length of the longest substring with all unique characters char_set = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a string s consisting of lowercase English letters, you need to find and return the first instance of a non-repeating character within the string. If all characters are repeating or the string is empty, return an empty string. Example 1: Input: s = \\"leetcode\\" Output: \\"l\\" Example 2: Input: s = \\"loveleetcode\\" Output: \\"v\\" Example 3: Input: s = \\"aabbcc\\" Output: \\"\\" Example 4: Input: s = \\"abcd\\" Output: \\"a\\" Constraints: 1. 0 <= s.length <= 10^5 2. s consists only of lowercase English letters.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters are repeating or the string is empty, returns an empty string. # Create a dictionary to count character occurrences char_count = {} # First pass to count all characters for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass to identify the first non-repeating character for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"You are given a directed graph with N nodes numbered from 1 to N and M edges. Each edge i has a positive weight w_i and goes from node u_i to node v_i. Additionally, there are Q queries. For each query j, you are given two nodes s_j and t_j, and you need to find the shortest path distance from node s_j to node t_j. If there is no path from the given source node to the target node, return -1 for that query. ----Constraints---- - 1 ≤ N, M, Q ≤ 100,000 - 1 ≤ u_i, v_i, s_j, t_j ≤ N - 1 ≤ w_i ≤ 10,000 - All values in input are integers. ----Input---- Input is given from Standard Input in the following format: N M Q u_1 v_1 w_1 u_2 v_2 w_2 ... u_M v_M w_M s_1 t_1 s_2 t_2 ... s_Q t_Q ----Output---- Print Q lines. The j-th line (1 ≤ j ≤ Q) should contain the shortest path distance from node s_j to node t_j, or -1 if there is no path. ----Sample Input---- 4 4 3 1 2 1 2 3 2 3 4 1 1 3 4 1 3 2 4 1 4 ----Sample Output---- 3 3 4 ----Explanation---- The given graph is as follows: - (1 -> 2) with weight 1 - (2 -> 3) with weight 2 - (3 -> 4) with weight 1 - (1 -> 3) with weight 4 - Query 1: The shortest path from node 1 to node 3 is 1 -> 2 -> 3 with a total distance of 3. - Query 2: The shortest path from node 2 to node 4 is 2 -> 3 -> 4 with a total distance of 3. - Query 3: The shortest path from node 1 to node 4 is 1 -> 2 -> 3 -> 4 with a total distance of 4.","solution":"import heapq def shortest_path(N, edges, queries): # Create a graph using an adjacency list graph = [[] for _ in range(N + 1)] for u, v, w in edges: graph[u].append((v, w)) def dijkstra(start): distances = [float(\'inf\')] * (N + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances results = [] for s, t in queries: distances = dijkstra(s) shortest_distance = distances[t] if shortest_distance == float(\'inf\'): results.append(-1) else: results.append(shortest_distance) return results"},{"question":"# Problem Description You are a software engineer tasked with developing a simple inventory system for a small bookstore. The inventory system needs to track the titles of books, authors, and the number of copies available for each title. It should have functionalities to add new books, lend books, and restock them. You need to create a system to support these operations. Write a class `BookInventory` which supports the following methods: 1. **add_book(title, author, quantity):** Adds a new book to the inventory. If the book already exists (same title and author), the function should update the quantity. 2. **lend_book(title, author):** Lends a book from the inventory, reducing the quantity by 1. If the book is not available or the quantity is zero, the function should return \\"Book not available\\". 3. **restock_book(title, author, quantity):** Increases the quantity of the book by the specified number. 4. **get_inventory():** Returns a list of dictionaries where each dictionary contains the title, author, and quantity of the books currently in the inventory. The methods and class should handle any necessary edge cases, such as lending a book that does not exist or adding negative quantities. # Example Usage ```python inventory = BookInventory() inventory.add_book(\\"1984\\", \\"George Orwell\\", 5) inventory.add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 3) print(inventory.get_inventory()) # Output: [{\'title\': \'1984\', \'author\': \'George Orwell\', \'quantity\': 5}, {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'quantity\': 3}] inventory.lend_book(\\"1984\\", \\"George Orwell\\") print(inventory.get_inventory()) # Output: [{\'title\': \'1984\', \'author\': \'George Orwell\', \'quantity\': 4}, {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'quantity\': 3}] inventory.restock_book(\\"1984\\", \\"George Orwell\\", 2) print(inventory.get_inventory()) # Output: [{\'title\': \'1984\', \'author\': \'George Orwell\', \'quantity\': 6}, {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'quantity\': 3}] inventory.lend_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\") inventory.lend_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\") inventory.lend_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\") print(inventory.get_inventory()) # Output: [{\'title\': \'1984\', \'author\': \'George Orwell\', \'quantity\': 6}, {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'quantity\': 0}] ``` # Implementation ```python class BookInventory: def __init__(self): self.inventory = {} def add_book(self, title, author, quantity): if quantity <= 0: return key = (title.lower(), author.lower()) if key in self.inventory: self.inventory[key][\'quantity\'] += quantity else: self.inventory[key] = {\'title\': title, \'author\': author, \'quantity\': quantity} def lend_book(self, title, author): key = (title.lower(), author.lower()) if key in self.inventory and self.inventory[key][\'quantity\'] > 0: self.inventory[key][\'quantity\'] -= 1 else: return \\"Book not available\\" def restock_book(self, title, author, quantity): if quantity <= 0: return key = (title.lower(), author.lower()) if key in self.inventory: self.inventory[key][\'quantity\'] += quantity else: self.inventory[key] = {\'title\': title, \'author\': author, \'quantity\': quantity} def get_inventory(self): return list(self.inventory.values()) ```","solution":"class BookInventory: def __init__(self): self.inventory = {} def add_book(self, title, author, quantity): if quantity <= 0: return key = (title.lower(), author.lower()) if key in self.inventory: self.inventory[key][\'quantity\'] += quantity else: self.inventory[key] = {\'title\': title, \'author\': author, \'quantity\': quantity} def lend_book(self, title, author): key = (title.lower(), author.lower()) if key in self.inventory and self.inventory[key][\'quantity\'] > 0: self.inventory[key][\'quantity\'] -= 1 else: return \\"Book not available\\" def restock_book(self, title, author, quantity): if quantity <= 0: return key = (title.lower(), author.lower()) if key in self.inventory: self.inventory[key][\'quantity\'] += quantity else: self.inventory[key] = {\'title\': title, \'author\': author, \'quantity\': quantity} def get_inventory(self): return list(self.inventory.values())"},{"question":"# Task You are tasked with helping a retail store manage their inventory more efficiently. The store has a list of products, and each product has a name, category, and price. Occasionally, they run promotions where prices of certain categories of products are reduced by a percentage. Write a function that applies a given promotion to the list of products and returns the updated list. # Requirements 1. The function should take three inputs: - `products`: a list of dictionaries where each dictionary represents a product with keys `name`, `category`, and `price`. - `category`: a string representing the category of products to which the promotion should be applied. - `discount`: an integer representing the percentage discount to be applied. 2. The function should return a new list of dictionaries, where the prices of the products in the specified category have been reduced by the given percentage. # Example - `products`: ```python [ {\\"name\\": \\"Laptop\\", \\"category\\": \\"Electronics\\", \\"price\\": 1000}, {\\"name\\": \\"Headphones\\", \\"category\\": \\"Electronics\\", \\"price\\": 200}, {\\"name\\": \\"Shoes\\", \\"category\\": \\"Clothing\\", \\"price\\": 100}, {\\"name\\": \\"Shirt\\", \\"category\\": \\"Clothing\\", \\"price\\": 50} ] ``` - `category`: `\\"Electronics\\"` - `discount`: `10` The function should return: ```python [ {\\"name\\": \\"Laptop\\", \\"category\\": \\"Electronics\\", \\"price\\": 900.0}, {\\"name\\": \\"Headphones\\", \\"category\\": \\"Electronics\\", \\"price\\": 180.0}, {\\"name\\": \\"Shoes\\", \\"category\\": \\"Clothing\\", \\"price\\": 100}, {\\"name\\": \\"Shirt\\", \\"category\\": \\"Clothing\\", \\"price\\": 50} ] ``` # Constraints 1. `products` will contain at most 10,000 items. 2. The `price` of each product will be a positive integer less than or equal to 10000. 3. The `discount` will be a positive integer less than or equal to 100. # Function Signature ```python def apply_promotion(products: List[Dict[str, Union[str, int]]], category: str, discount: int) -> List[Dict[str, Union[str, float]]]: ```","solution":"from typing import List, Dict, Union def apply_promotion(products: List[Dict[str, Union[str, int]]], category: str, discount: int) -> List[Dict[str, Union[str, float]]]: Applies a given discount to all products in the specified category. Parameters: products (list of dict): The list of products. category (str): The category of products to which the promotion should be applied. discount (int): The percentage discount to apply. Returns: list of dict: The updated list of products with discounted prices for the specified category. discounted_products = [] for product in products: if product[\'category\'] == category: new_price = product[\'price\'] * (1 - discount / 100) discounted_products.append({\\"name\\": product[\\"name\\"], \\"category\\": product[\\"category\\"], \\"price\\": round(new_price, 2)}) else: discounted_products.append(product) return discounted_products"},{"question":"You have been given an array of integers. Your task is to sort the array based on the frequency of the values. If two values have the same frequency, then the value which appeared first in the input array should appear first in the sorted array. Implement a function `frequencySort(arr)` which takes an array of integers `arr` and returns the sorted array based on the frequency of the elements. # Example ```python frequencySort([4, 5, 6, 5, 4, 3]) # [4, 4, 5, 5, 6, 3] frequencySort([3, 3, 2, 1, 2, 2, 1]) # [2, 2, 2, 3, 3, 1, 1] frequencySort([9, 9, 9, 8, 8, 8, 7, 6]) # [9, 9, 9, 8, 8, 8, 7, 6] ``` # Constraints - The function should handle arrays of up to 10,000 integers. - You may use any standard sorting algorithm. - Your solution should have an average-case time complexity of O(n log n).","solution":"def frequencySort(arr): Sort the array based on the frequency of the values. If two values have the same frequency, then the value which appeared first in the input array should appear first in the sorted array. from collections import Counter # Count frequencies frequency = Counter(arr) # Custom sort function def custom_sort(x): return (-frequency[x], arr.index(x)) # Sort the array based on the frequency return sorted(arr, key=custom_sort)"},{"question":"Given an array of integers `arr` and an integer `n`, write a function `find_contiguous_subarray(arr, n)` that returns a contiguous subarray of length `n` with the maximum sum. If there are multiple subarrays with the same maximum sum, return the one that appears first. For example: ``` find_contiguous_subarray([1, 2, 3, 4, 5, 6], 3) -> [4, 5, 6] find_contiguous_subarray([5, 1, 3, -2, 4, 6, -1, 7], 2) -> [4, 6] find_contiguous_subarray([-1, -2, -3], 2) -> [-1, -2] find_contiguous_subarray([10, 2, 3, 1, 15], 4) -> [2, 3, 1, 15] ```","solution":"def find_contiguous_subarray(arr, n): Returns the contiguous subarray of length `n` with the maximum sum. If there are multiple subarrays with the same maximum sum, return the one that appears first. if n > len(arr): return [] max_sum = float(\'-inf\') max_subarray = [] for i in range(len(arr) - n + 1): current_subarray = arr[i:i+n] current_sum = sum(current_subarray) if current_sum > max_sum: max_sum = current_sum max_subarray = current_subarray return max_subarray"},{"question":"In a society driven by efficiency, each citizen is assigned a task by the central computer based on the individual\'s skills and the current needs of the society. Each task has an associated difficulty level ranging from 1 to 10. Each citizen has a skill level also ranging from 1 to 10, and a preference list of task types they prefer doing, ordered by their preference (most preferred task type first). Your task is to write a function `task_allocation` that takes the following parameters: 1. A list of integers `tasks` where each integer corresponds to the difficulty level of a task. 2. A list of tuples `citizens`, where each tuple contains a citizen\'s skill level (an integer) and their ordered task type preferences (a list of integers). The function should assign tasks to citizens according to the following rules: 1. A task can only be assigned to a citizen if their skill level is greater than or equal to the task difficulty level. 2. Among the tasks a citizen can perform, their most preferred unassigned task should be assigned to them. 3. If there are no tasks a citizen can perform, they should not be assigned any tasks. The function should return a list of integers, where each integer represents the task assigned to the corresponding citizen in the `citizens` list. If a citizen is not assigned any task, the corresponding entry should be -1. # Example ```python def task_allocation(tasks, citizens): # Your implementation here # Example usage: tasks = [3, 1, 7, 4] citizens = [(5, [3, 1, 4, 7]), (8, [7, 4, 3, 1]), (2, [1, 4, 3, 7])] print(task_allocation(tasks, citizens)) # Output: [3, 7, 1] ``` # Constraints 1. Each task can be assigned to exactly one citizen. 2. Assume that the input lists `tasks` and `citizens` are non-empty. 3. Assume all task difficulties and skill levels are integers between 1 and 10, inclusive. 4. Each citizen has a non-empty list of task preferences that includes every unique task type from `tasks`. Your solution should efficiently allocate the tasks while adhering to the given rules.","solution":"def task_allocation(tasks, citizens): n = len(citizens) task_allocation_result = [-1] * n task_set = set(tasks) tasks = sorted(tasks, key=lambda x: -x) for i, (skill, preferences) in enumerate(citizens): for preference in preferences: if preference in task_set and skill >= preference: task_allocation_result[i] = preference task_set.remove(preference) break return task_allocation_result"},{"question":"In a faraway land, the royal advisor has a list of distinct positive integers representing the strengths of the warriors in the kingdom. The kingdom is about to face a series of battles, and for each battle, the advisor needs to form a team of warriors such that the product of the strengths of the warriors in the team is as large as possible under a given condition. For each query, you are given a range [L, R] within the list of strengths and an integer T, and you need to form a team of exactly T warriors. The product of the strengths of the team should be maximized. If it is not possible to choose exactly T warriors from the given range, return -1. -----Input----- - The first line of the input contains a single integer N denoting the number of warriors. - The second line contains N distinct positive integers specifying the strengths of the warriors. - The third line contains a single integer Q denoting the number of queries. The description of Q queries follows. - Each of the next Q lines contains three space-separated integers L, R, and T. -----Output----- For each query, print a single line containing the maximum product of the strengths of the team of exactly T warriors within the range [L, R]. If it is not possible to form such a team, print -1. -----Constraints----- - 1 ≤ N ≤ 100,000 - 1 ≤ strengths[i] ≤ 10^9 - 1 ≤ Q ≤ 100,000 - 1 ≤ L ≤ R ≤ N - 1 ≤ T ≤ R - L + 1 -----Example----- Input: 6 5 2 8 10 7 3 3 1 4 2 2 6 3 3 5 1 Output: 80 560 10","solution":"def max_product_of_team(N, strengths, Q, queries): For each query, return the maximum product of the strengths of the team of exactly T warriors within the range [L, R]. If it is not possible to form such a team, return -1. results = [] for query in queries: L, R, T = query # Convert 1-based index to 0-based index sub_strengths = strengths[L-1:R] if T > len(sub_strengths): results.append(-1) else: sub_strengths.sort(reverse=True) # Sort in descending order product = 1 for i in range(T): product *= sub_strengths[i] results.append(product) return results"},{"question":"You are given a list of integers and a target value. Write a function that determines if there are two distinct integers in the list that add up to the target value. The function should return true if such a pair exists, and false otherwise. # Examples: ``` two_sum([2, 7, 11, 15], 9) => returns true (2 + 7 = 9) two_sum([3, 2, 4], 6) => returns true (2 + 4 = 6) two_sum([3, 3], 6) => returns true (3 + 3 = 6) two_sum([1, 2, 3, 4, 5], 10) => returns false ``` # Constraints: - The input list will contain at least two integers. - Each integer in the list will be within the range of -10^5 to 10^5. - The target value will be within the range of -10^5 to 10^5. Write the function signature as: ``` def two_sum(nums: List[int], target: int) -> bool: ```","solution":"from typing import List def two_sum(nums: List[int], target: int) -> bool: Determines if there are two distinct integers in the list that add up to the target value. :param nums: List of integers :param target: The target value to be achieved by summing two distinct integers from the list :return: True if such a pair exists, False otherwise seen = set() for num in nums: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"# Task Your task is to write a function that calculates the total amount each customer will be billed based on their shopping cart. The input is a list of items purchased where each item is represented by a tuple containing the item name, price per unit, and quantity purchased. The output is a dictionary where the key is the customer name and the value is their total bill. # Rules 1. The function takes a list of tuples where each tuple contains the customer name, item name, price per unit, and quantity purchased. Each tuple represents one item bought by a customer. 2. The total bill for each customer is the sum of the cost of all their purchased items. 3. The cost for an item is calculated as (price per unit) * (quantity purchased). 4. If a customer purchases multiple items, their total bill is the sum of the costs of all these items. # Input A list of tuples in the form: [(customer_name1, item_name1, price_per_unit1, quantity1), (customer_name2, item_name2, price_per_unit2, quantity2), ...] You may assume: * Each tuple is correctly formatted and contains the expected fields. * The price per unit is a positive float. * The quantity purchased is a positive integer. * A customer may appear multiple times in the list, each representing a different item they purchased. # Output A dictionary where: * The key is a string representing the customer name. * The value is a float representing the total bill of the customer. # Function signature ```python def calculate_bills(purchases: [(str, str, float, int)]) -> dict: pass ```","solution":"def calculate_bills(purchases): Calculate the total bill for each customer based on their shopping cart. Parameters: purchases (list): A list of tuples where each tuple contains: (customer_name (str), item_name (str), price_per_unit (float), quantity (int)) Returns: dict: A dictionary with customer names as keys and their total bill as values. bills = {} for customer_name, item_name, price_per_unit, quantity in purchases: cost = price_per_unit * quantity if customer_name in bills: bills[customer_name] += cost else: bills[customer_name] = cost return bills"},{"question":"You are given a list of integers representing the width and height, where width is the number of columns and height is the number of rows, for a series of 2D grids. You need to calculate the number of distinct paths from the top-left corner (0,0) to the bottom-right corner (width-1, height-1) of each grid. Only rightward and downward moves are allowed. You must implement a function that calculates the number of distinct paths for each grid. -----Input----- The first line contains an integer T (1 leq T leq 1000), representing the number of grids. Then T lines follow, each containing 2 integers W (1 leq W leq 1000) and H (1 leq H leq 1000), representing the width and height of a grid respectively. -----Output----- Output T numbers, each representing the number of distinct paths for each grid. -----Examples----- Input 3 3 2 2 4 1 1 Output 3 4 1 -----Hints----- 1. For a grid of size W x H, the problem can be reduced to a combinatorial problem of choosing W-1 movements to the right and H-1 movements down from a total of (W-1+H-1) movements. 2. The formula to calculate the number of ways to traverse a grid is given by the binomial coefficient: binom{W+H-2}{H-1} = (W+H-2)! / ((H-1)! * (W-1)!) Implement your function to calculate the number of distinct paths using this formula efficiently, considering the constraints.","solution":"from math import factorial def unique_paths(width, height): Returns the number of unique paths from top-left to bottom-right in a grid with given width and height. return factorial(width + height - 2) // (factorial(width - 1) * factorial(height - 1)) def find_paths(grids): Takes a list of tuples (width, height) representing grids and returns a list with the number of unique paths for each grid. results = [] for (width, height) in grids: results.append(unique_paths(width, height)) return results"},{"question":"Amy loves palindromes, and she enjoys creating them by rearranging strings. A palindrome is a string that reads the same backward as forward. Help Amy by determining whether it is possible to rearrange the characters of a given string to form a palindrome. -----Input----- You will be provided with an integer n (1 ≤ n ≤ 100), which indicates the number of test cases. Each test case consists of a string (1 ≤ length of the string ≤ 1000) containing only lowercase alphabetic characters. -----Output----- For each test case, print \\"Yes\\" if it\'s possible to rearrange the characters to form a palindrome. Otherwise, print \\"No\\". -----Example----- Input: 3 aabb racecar abc Output: Yes Yes No -----Output details----- - In the first test case, \\"aabb\\" can be rearranged to \\"abba\\", which is a palindrome. - In the second test case, \\"racecar\\" is already a palindrome. - In the third test case, \\"abc\\" cannot be rearranged into a palindrome.","solution":"def can_form_palindrome(s): Determines if it is possible to rearrange the characters of the string to form a palindrome. from collections import Counter freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) return odd_count <= 1 def solve_palindrome_problem(test_cases): Processes multiple test cases and determines if each string can be rearranged to form a palindrome. results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given an input string representing a sentence, implement a function that will reverse each word separately and maintain the order of the words. The function should handle punctuation marks as part of the word. Whitespace between words should be preserved as in the original sentence. Example For example, given the input string `\\"Hello, world! This is an example.\\"`, your function should return `\\",olleH !dlrow sihT si na .elpmaxe\\"`.","solution":"def reverse_each_word(sentence): Reverses each word in the sentence while maintaining the order of the words. Args: sentence (str): The input sentence containing words to be reversed. Returns: str: A sentence with each word reversed. return \' \'.join(word[::-1] for word in sentence.split(\' \'))"},{"question":"Write a function that accepts a list of floating point numbers and checks if the list is sorted in non-decreasing order. The function should return \\"List is sorted\\" if the list is sorted in non-decreasing order, and otherwise, return \\"List is not sorted\\". Example: ``` Input: [1.1, 2.2, 3.3, 4.4] Output: \\"List is sorted\\" Input: [1.1, 3.3, 2.2, 4.4] Output: \\"List is not sorted\\" ``` Function signature: ```python def check_sorted(lst: List[float]) -> str: ```","solution":"from typing import List def check_sorted(lst: List[float]) -> str: Checks if the given list of floating point numbers is sorted in non-decreasing order. Args: lst: List of floating point numbers. Returns: \\"List is sorted\\" if the list is sorted in non-decreasing order, otherwise \\"List is not sorted\\". if all(lst[i] <= lst[i+1] for i in range(len(lst)-1)): return \\"List is sorted\\" else: return \\"List is not sorted\\""},{"question":"You are given a binary string s of length n. You are allowed to flip the parity of exactly one bit (i.e., change a 0 to a 1 or a 1 to a 0). Your goal is to determine the length of the longest contiguous subsequence of 1\'s that can be obtained by flipping the parity of exactly one bit in the given binary string. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the length of the binary string. The second line contains the binary string s. -----Output----- Print a single integer — the length of the longest contiguous subsequence of 1\'s that can be obtained by flipping the parity of exactly one bit. -----Examples----- Input 5 11000 Output 3 Input 3 111 Output 3","solution":"def longest_contiguous_ones(n, s): Determines the length of the longest contiguous subsequence of 1\'s that can be obtained by flipping the parity of exactly one bit in the given binary string. if \'0\' not in s: # All are 1\'s case return n max_count = 0 current_count = 0 previous_count = 0 temp_max = 0 for i in range(n): if s[i] == \'1\': current_count += 1 else: previous_count = current_count current_count = 0 temp_max = max(temp_max, previous_count + current_count + 1) max_count = max(max_count, temp_max) return min(max_count, n)"},{"question":"Description Write a function that takes in a list of integers and returns a new list with the square of each value. Ensure that the new list is sorted in non-decreasing order. Examples ```python squared_list([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25] squared_list([-5, -3, 0, 2, 4]) == [0, 4, 9, 16, 25] squared_list([3, -1, 0, -2, 4]) == [0, 1, 4, 9, 16] ``` Note: The input list can contain negative numbers and zero.","solution":"def squared_list(lst): Returns a new list with the squares of each value in the input list in non-decreasing order. squared = [x ** 2 for x in lst] return sorted(squared)"},{"question":"Jason is participating in a programming competition. In one of the challenges, he needs to implement a module for managing movie ratings in a database. Each movie\'s rating is represented as a tuple: (rating, age_group), where \'rating\' is an integer from 1 to 10 (inclusive) and \'age_group\' is a string which can be \'child\', \'teen\', or \'adult\'. The module should support three types of queries: adding a rating, updating a rating, and calculating an average rating for a specific age group. Jason has to ensure that all operations are performed efficiently, even if there are numerous ratings. Implement a class MovieRatingManager that supports the following operations: 1. `add_rating(movie_id: str, rating: int, age_group: str) -> None` - Adds a new movie rating. 2. `update_rating(movie_id: str, new_rating: int) -> None` - Updates the rating for the given movie. 3. `average_rating(age_group: str) -> float` - Returns the average rating for the given age group. If there are no ratings for the specified age group, return 0.0. Note: - `movie_id` is a unique identifier for each movie and is a non-empty string. - If `update_rating` is called for a non-existent movie, ignore the operation. - Assume the input will always be well-formed. -----Input Format----- The first line contains an integer N, the number of queries. The following N lines define the queries to be executed. Each query follows one of the three formats: 1. `1 movie_id rating age_group` - Add a rating. 2. `2 movie_id new_rating` - Update the rating. 3. `3 age_group` - Calculate the average rating. -----Output Format----- For each query of type 3, output a single line containing the average rating (rounded to one decimal place) for the specified age group. -----Example----- Input: 7 1 movie1 8 adult 1 movie2 5 child 1 movie3 7 teen 3 adult 2 movie1 9 3 child 3 senior Output: 8.0 5.0 0.0 # Note: In the example: - We add three ratings first. - Then, we query the average rating for \'adult\', which is 8.0. - We update the rating of \'movie1\' to 9. - We query the average rating for \'child\', which is 5.0. - Finally, we query the average rating for the non-existent age group \'senior\', resulting in 0.0.","solution":"class MovieRatingManager: def __init__(self): self.ratings = {} # Dictionary to store ratings def add_rating(self, movie_id: str, rating: int, age_group: str) -> None: if 1 <= rating <= 10 and age_group in {\'child\', \'teen\', \'adult\'}: self.ratings[movie_id] = (rating, age_group) def update_rating(self, movie_id: str, new_rating: int) -> None: if movie_id in self.ratings and 1 <= new_rating <= 10: age_group = self.ratings[movie_id][1] self.ratings[movie_id] = (new_rating, age_group) def average_rating(self, age_group: str) -> float: total_rating = 0 count = 0 for rating, group in self.ratings.values(): if group == age_group: total_rating += rating count += 1 if count == 0: return 0.0 return round(total_rating / count, 1)"},{"question":"Complete the function `smallestDifference` such that it finds the smallest absolute difference between any two numbers in the given list of integers. For example: Given the list `[5, 3, 8, 1, 4]`, the smallest absolute difference is `1` (difference between `4` and `3`). The input list will always have at least two elements. Adapted from practice coding problems.","solution":"def smallestDifference(arr): Returns the smallest absolute difference between any two numbers in the list. # Sort the array first arr.sort() # Initialize the minimum difference to a large number min_diff = float(\'inf\') # Compare adjacent pairs in the sorted array for i in range(len(arr) - 1): diff = abs(arr[i+1] - arr[i]) if diff < min_diff: min_diff = diff return min_diff"},{"question":"You are given a list of integers representing the heights of trees arranged in a line. A bird wants to fly from the first tree to the last tree. The bird can only fly directly from one tree to another if the height of the next tree is at most 2 units different from the current tree. Your task is to determine if the bird can successfully fly from the first tree to the last tree given the above constraint. If the bird can reach the last tree, return \'Reachable!\'; otherwise, return \'Not Reachable!\'. Example: For the list [3, 5, 6, 7, 4], the bird can fly from tree 3 to 5, from 5 to 6, from 6 to 7, but cannot fly from 7 to 4 because the height difference is 3 which is more than 2. Hence, the output should be \'Not Reachable!\'. For the list [1, 2, 3, 2, 1], the bird can fly from tree 1 to 2, from 2 to 3, from 3 to 2, and from 2 to 1. Hence, the output should be \'Reachable!\'.","solution":"def can_bird_reach_end(heights): Determines if a bird can fly through all the trees given the height constraints. The bird can only fly from one tree to another if the height difference is at most 2 units. Arguments: heights -- list of integers representing the heights of the trees. Returns: \'Reachable!\' if the bird can reach the last tree, else \'Not Reachable!\'. for i in range(len(heights) - 1): if abs(heights[i] - heights[i + 1]) > 2: return \'Not Reachable!\' return \'Reachable!\'"},{"question":"# Task: - Write a function that generates an \\"alternating sums\\" sequence, where each number is alternately added to either a \\"Group A\\" sum or a \\"Group B\\" sum. Starting from the first element, the next element is added to the opposite group. # Input: - You are given a list of integers `lst`. # Output: - Return a tuple with two integers `(sumA, sumB)`, where `sumA` is the sum of elements in Group A and `sumB` is the sum of elements in Group B. # Example: - For `lst = [50, 60, 60, 45, 70]` Following the alternating sums logic: - 50 goes to Group A - 60 goes to Group B - 60 goes to Group A - 45 goes to Group B - 70 goes to Group A So, `sumA = 50 + 60 + 70 = 180` and `sumB = 60 + 45 = 105`. - The output should be `(180, 105)`. # Constraints: - The length of the list will be between 1 and 10^6. - Each integer in the list is between -10^9 and 10^9.","solution":"def alternating_sums(lst): Returns a tuple with two integers (sumA, sumB), where sumA is the sum of elements in Group A and sumB is the sum of elements in Group B. Elements are added to the groups alternately. :param lst: List of integers :return: Tuple of two integers sumA, sumB = 0, 0 # Iterate over list with index to alternate sum addition for idx, value in enumerate(lst): if idx % 2 == 0: sumA += value else: sumB += value return sumA, sumB"},{"question":"__Reverse Words in a String__ involves reversing the words of a given string, excluding leading or trailing spaces and reducing multiple spaces between words to a single space. Write a function named `reverse_words` that takes a string as input and returns a string with the words reversed, trimmed of any leading or trailing spaces, and with single spaces between words. For example: ``` Input: \\" the sky is blue \\" Output: \\"blue is sky the\\" ``` Consider the following constraints: - The input string can contain multiple spaces between words. - The output string should contain words separated by a single space. Implement the function in Python as follows: ```python def reverse_words(s: str) -> str: # Your implementation here pass # Example usage: # Input: \\" hello world! \\" # Output: \\"world! hello\\" ``` The function should pass the following test cases: ```python # Test cases reverse_words(\\"the sky is blue\\") # Output: \\"blue is sky the\\" reverse_words(\\" hello world! \\") # Output: \\"world! hello\\" reverse_words(\\"a good example\\") # Output: \\"example good a\\" reverse_words(\\" Bob Loves Alice \\") # Output: \\"Alice Loves Bob\\" reverse_words(\\"Alice does not even like bob\\") # Output: \\"bob like even not does Alice\\" ```","solution":"def reverse_words(s: str) -> str: This function takes a string as input and returns a string with the words reversed, trimmed of any leading or trailing spaces, and with single spaces between words. words = s.split() reversed_words = words[::-1] return \' \'.join(reversed_words) # Example usage: # Input: \\" hello world! \\" # Output: \\"world! hello\\" # print(reverse_words(\\" hello world! \\")) # Output: \\"world! hello\\""},{"question":"Task You are given a string `s` consisting of lowercase alphabets. Your goal is to determine the smallest number of characters you need to remove from the string to make it a palindrome. A palindrome is a string that reads the same forward and backward. # Input/Output - `[input]` string `s` The initial string which only consists of lowercase alphabets. `1 <= length of s <= 10^5` - `[output]` an integer The minimum number of characters to remove to make the string a palindrome. # Example ```python Input: \\"abca\\" Output: 1 Input: \\"racecar\\" Output: 0 Input: \\"google\\" Output: 2 ```","solution":"def min_removals_to_make_palindrome(s): Returns the minimum number of characters to remove from string s to make it a palindrome. def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] lps = longest_palindromic_subsequence(s) return len(s) - lps"},{"question":"Write a function `flatten_dict` that takes a nested dictionary and flattens it. The keys in the flattened dictionary are represented in a dot-separated format indicating the path in the original nested dictionary. ```python def flatten_dict(d: dict) -> dict: pass # Example: >>> nested_dict = { \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3 } } } >>> flatten_dict(nested_dict) {\'a\': 1, \'b.c\': 2, \'b.d.e\': 3} ``` **Constraints:** 1. The given dictionary can have nested dictionaries up to several levels deep. 2. The function should return the flattened dictionary with the correct path as keys. 3. Handle both integers and strings as values in the dictionary. 4. The function should handle empty dictionaries and return an empty result in such cases. Ensure to write the function with a non-recursive approach if possible to demonstrate effective iteration techniques.","solution":"def flatten_dict(d: dict) -> dict: def _flatten_dict(d, parent_key=\'\'): items = [] for k, v in d.items(): new_key = f\\"{parent_key}.{k}\\" if parent_key else k if isinstance(v, dict): items.extend(_flatten_dict(v, new_key).items()) else: items.append((new_key, v)) return dict(items) return _flatten_dict(d)"},{"question":"Given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`. The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer. You must write an algorithm that runs in O(n) time and uses only constant extra space (excluding the output array). Example: Input: nums = [1,2,3,4] Output: [24,12,8,6] Explanation: For index 0: the product is 2 * 3 * 4 = 24 For index 1: the product is 1 * 3 * 4 = 12 For index 2: the product is 1 * 2 * 4 = 8 For index 3: the product is 1 * 2 * 3 = 6 Constraints: - `2 <= nums.length <= 105` - `-30 <= nums[i] <= 30` - The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.","solution":"def product_except_self(nums): Given an array nums, returns an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. n = len(nums) output = [1] * n left_product = 1 for i in range(n): output[i] = left_product left_product *= nums[i] right_product = 1 for i in range(n-1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"You are given an array of integers and a target integer value. Your task is to find two distinct integers in the array that sum up to the target value and return their indices as a list. If no such integers exist, return an empty list. Assume: - There will be at most one solution. - You cannot use the same element twice. # Function Signature ```python def two_sum(nums: List[int], target: int) -> List[int]: pass ``` # Input - `nums` (List[int]): A list of integers. - `target` (int): The target sum. # Output - List[int]: A list of two integers representing the indices of the two numbers that add up to the target, or an empty list if no solution exists. # Examples Example 1: ```python nums = [2, 7, 11, 15] target = 9 # Output: [0, 1] ``` Example 2: ```python nums = [3, 2, 4] target = 6 # Output: [1, 2] ``` Example 3: ```python nums = [3, 3] target = 6 # Output: [0, 1] ``` # Note - The indices returned must be in ascending order. - Make sure the solution is efficient enough for large input sizes. # Constraints - 2 <= len(nums) <= 10^4 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: Returns the indices of the two numbers that add up to the target. If no such pair exists, returns an empty list. num_to_index = {} for i, number in enumerate(nums): complement = target - number if complement in num_to_index: return [num_to_index[complement], i] num_to_index[number] = i return []"},{"question":"Write a function `accum` that takes a string `s` and returns a new string in such a way that each character in `s` is multiplied by its 1-based index, with each repetition of the character alternating between uppercase and lowercase letters, starting with uppercase for the first occurrence, lowercase for the second, and so on. Each set of repeated characters for a given index should be joined with a hyphen (`-`). Example ```python accum(\\"abcd\\") ``` Should return `\\"A-Bb-Ccc-Dddd\\"` ```python accum(\\"RqaEzty\\") ``` Should return `\\"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\\"` ```python accum(\\"cwAt\\") ``` Should return `\\"C-Ww-Aaa-Tttt\\"`","solution":"def accum(s): Given a string s, return a new string such that each character in the string is multiplied by its 1-based index, alternating between uppercase and lowercase starting with uppercase. result = [] for index, char in enumerate(s): result.append(char.upper() + (char.lower() * index)) return \'-\'.join(result)"},{"question":"Write a program that reads two numbers N and L. The program should generate all possible substrings of length L (if L is 0, consider it as 1) from the string representation of the number N when read in base 10. It must then sort these substrings in lexicographical order and print them. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case consists of a single line with two integers N and L. -----Output:----- For each test case, output in a single line all possible substrings of length L from the string representation of N, sorted in lexicographical order and separated by a space. -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 10^{18} - 0 leq L leq 18 -----Sample Input:----- 2 12345 2 67890 3 -----Sample Output:----- 12 23 34 45 678 789 890 -----EXPLANATION:----- For the first test case: - All possible substrings of length 2 from \'12345\' are \'12\', \'23\', \'34\', and \'45\'. - The sorted order of these substrings is \'12\', \'23\', \'34\', \'45\'. For the second test case: - All possible substrings of length 3 from \'67890\' are \'678\', \'789\', and \'890\'. - The sorted order of these substrings is \'678\', \'789\', \'890\'.","solution":"def generate_substrings(T, test_cases): results = [] for N, L in test_cases: str_N = str(N) L = max(L, 1) substrings = [str_N[i:i+L] for i in range(len(str_N) - L + 1)] substrings.sort() results.append(\\" \\".join(substrings)) return results"},{"question":"Write a function called `analyze_stock_prices` that takes in a list of integers `prices`, where each element represents the price of a particular stock on a given day. Your task is to determine the maximum profit that can be made by buying and then later selling the stock. For example: - If you are given the list `[7,1,5,3,6,4]`, the maximum profit that can be made is `5` (buy on the second day at price `1` and sell on the fifth day at price `6`). - If the list is `[7,6,4,3,1]`, there is no profitable opportunity, so the maximum profit should be `0`. Write a function `analyze_stock_prices(prices)` that takes a list of integers and returns an integer, the maximum profit. Examples: ```python analyze_stock_prices([7,1,5,3,6,4]) # returns 5 analyze_stock_prices([7,6,4,3,1]) # returns 0 analyze_stock_prices([1,2,3,4,5]) # returns 4 ```","solution":"def analyze_stock_prices(prices): Determines the maximum profit that can be made from buying and selling stock given a list of prices. :param prices: List[int] of stock prices where each element represents the price on a different day :return: int, maximum profit that can be made; 0 if no profitable opportunity exists # If prices list has less than 2 prices, profit is not possible if len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: # Update max profit if current price - min_price yields a better result max_profit = max(max_profit, price - min_price) # Update min price to the lowest price seen so far min_price = min(min_price, price) return max_profit"},{"question":"You are given an array/list of integers, where each integer appears an even number of times except for one integer which appears an odd number of times. Your task is to find and return this single integer. Hints: The solution can be achieved with a linear scan and constant space. Using a hash-map is possible but not the most optimal solution. **Example** ```python # Input arr = [2, 3, 5, 4, 5, 2, 4, 3, 5] # Output 5 ```","solution":"def find_odd_occurrence(arr): Returns the element that appears an odd number of times in the array. Args: - arr (list): A list of integers where all integers appear an even number of times except one. Returns: - int: The integer that appears an odd number of times. result = 0 for num in arr: result ^= num return result"},{"question":"A librarian needs your help to organize books in a specific sequence for display. Given a number N, you need to generate a pattern of book identifiers. Each book in the pattern must be represented with two repeated digits starting from 1 up to N. Help the librarian by writing a program to generate this pattern. -----Input:----- - The first line contains T, the number of test cases. - Each test case follows in a single line containing one integer N. -----Output:----- For each test case, output the pattern. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 -----Sample Input:----- 2 2 3 -----Sample Output:----- 11 22 33 11 22 33 -----EXPLANATION:----- For each value of N, a sequence of N lines is generated where each line contains two repeated digits starting from 1 up to N.","solution":"def generate_book_pattern(N): Generate a pattern of book identifiers. Parameters: N (int): The number of book identifiers to generate in the pattern. Returns: list: A list of strings where each string represents a repeated digit pattern. pattern = [] for i in range(1, N + 1): pattern.append(str(i) * 2) return pattern def book_patterns(test_cases): Generate book patterns for multiple test cases. Parameters: test_cases (list): A list of integers where each integer represents a test case. Returns: list: A list of lists containing the book patterns for each test case. results = [] for n in test_cases: results.append(generate_book_pattern(n)) return results"},{"question":"A large e-commerce website keeps track of user transactions in a list. Each transaction is represented as a dictionary with the following keys: \'user_id\', \'amount\', and \'date\'. Your task is to write a function that identifies users who have spent more than a given amount on the website within a specified date range. The function should return a list of \'user_id\'s that meet these criteria. The transactions list looks like this: ```python transactions = [ {\'user_id\': 1, \'amount\': 50, \'date\': \'2023-01-15\'}, {\'user_id\': 2, \'amount\': 75, \'date\': \'2023-01-18\'}, {\'user_id\': 1, \'amount\': 100, \'date\': \'2023-02-01\'}, # more transactions ] ``` The function signature should be as follows: ```python def high_spenders(transactions, min_amount, start_date, end_date): # Your code here ``` - `transactions`: A list of dictionaries representing user transactions. - `min_amount`: A numeric value representing the minimum amount spent by a user. - `start_date` and `end_date`: Strings representing the start and end dates in the format \'YYYY-MM-DD\'. The function should: 1. Validate that `transactions` is a list of dictionaries with the expected keys. 2. Consider only the transactions within the date range specified. 3. Sum the amounts spent by each user within that date range. 4. Return a list of user IDs for those users who meet or exceed the specified minimum amount spent. Note: - Include error handling to ensure the function does not crash if given incorrect input data. - Use Python\'s `datetime` module to handle date comparisons. - Ensure your solution is optimized for large input sizes and is within acceptable time complexity constraints.","solution":"from datetime import datetime def high_spenders(transactions, min_amount, start_date, end_date): Identifies users who have spent more than the given amount within the specified date range. :param transactions: List of dictionaries representing user transactions. :param min_amount: Numeric value representing the minimum amount spent by a user. :param start_date: String representing the start date in \'YYYY-MM-DD\' format. :param end_date: String representing the end date in \'YYYY-MM-DD\' format. :return: List of user IDs who spent more than min_amount within the given date range. if not isinstance(transactions, list) or not all(isinstance(t, dict) for t in transactions): raise ValueError(\\"Transactions must be a list of dictionaries.\\") required_keys = {\'user_id\', \'amount\', \'date\'} for t in transactions: if not required_keys.issubset(t.keys()): raise ValueError(\\"Each transaction must have \'user_id\', \'amount\', and \'date\' keys.\\") start_date_obj = datetime.strptime(start_date, \'%Y-%m-%d\') end_date_obj = datetime.strptime(end_date, \'%Y-%m-%d\') user_spending = {} for transaction in transactions: user_id, amount, date = transaction[\'user_id\'], transaction[\'amount\'], transaction[\'date\'] date_obj = datetime.strptime(date, \'%Y-%m-%d\') if start_date_obj <= date_obj <= end_date_obj: if user_id not in user_spending: user_spending[user_id] = 0 user_spending[user_id] += amount high_spenders = [user_id for user_id, total_amount in user_spending.items() if total_amount >= min_amount] return high_spenders"},{"question":"Given a rooted tree with n nodes where each node has a unique integer ID from 1 to n. Each node except the root node has exactly one parent node. The tree is presented as a list of n-1 edges, where each edge is a tuple (u, v) denoting a directed edge from u to v. You are required to determine the maximum depth of the tree after removing any one node (and its corresponding subtree) and reattaching its children (if any) to its parent node (if it exists). The depth of a tree is defined as the number of edges on the longest path from the root to any leaf node. Consider the depth of the tree just after removing and reattaching children as described above. -----Input----- The first line contains an integer T — the number of test cases. T test cases follow. The first line of each test case contains an integer n (2 leq n leq 10^5) — the number of nodes in the tree. The next n-1 lines contain two integers u and v (1 leq u, v leq n) — denoting a directed edge from u to v. Note that u is the parent of v. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the maximum depth of the tree after performing the described operation. -----Example----- Input 2 3 1 2 1 3 5 1 2 1 3 3 4 3 5 Output 1 2 -----Explanation----- In the first test case, tree structure is: ``` 1 / 2 3 ``` Here, if we remove either node 2 or 3, the depth becomes 1. In the second test case, tree structure is: ``` 1 / 2 3 / 4 5 ``` Removing node 3 and reattaching nodes 4 and 5 directly to 1 results in: ``` 1 / | 2 4 5 ``` The depth becomes 2.","solution":"from collections import defaultdict, deque def max_depth_after_removing_node(n, edges): Compute the maximum depth of the tree after removing any one node (excluding the root) and reattaching its children to its parent node. Args: n (int): Number of nodes in the tree. edges (list of tuple of int): List of directed edges in the tree where each edge is of the form (u, v). Returns: int: The maximum depth of the tree after performing the described operation. if n == 2: return 1 # With only two nodes, removing one will always result in a tree with depth 1. # Build graph. children = defaultdict(list) for u, v in edges: children[u].append(v) # Function to calculate depth from any node. def calculate_depth(node): if node not in children: return 0 max_depth = 0 for child in children[node]: max_depth = max(max_depth, 1 + calculate_depth(child)) return max_depth # Total depth of the tree starting from root node. root = 1 depth_from_root = calculate_depth(root) # Traverse nodes to compute the depth with removal of each node. max_depth_after_removal = 0 for u, vs in children.items(): for v in vs: # Remove subtree rooted at v and reattach its children to u if v in children: for child in children[v]: children[u].append(child) new_depth = calculate_depth(root) max_depth_after_removal = max(max_depth_after_removal, new_depth) if v in children: for child in children[v]: children[u].remove(child) return max_depth_after_removal def process_test_cases(test_cases): results = [] for n, edges in test_cases: results.append(max_depth_after_removing_node(n, edges)) return results"},{"question":"You are given a list of dates in the format [\\"YYYY-MM-DD\\", ...]. Write a function that takes this list and returns the earliest and latest dates. Ensure that both the earliest and latest dates are returned in the same \\"YYYY-MM-DD\\" format. Your function should be optimized to run efficiently with a list containing several thousand dates. Example 1: Input: dates = [\\"2023-12-01\\", \\"2022-05-06\\", \\"2024-07-11\\", \\"2021-09-23\\"] Output: [\\"2021-09-23\\", \\"2024-07-11\\"] Example 2: Input: dates = [\\"2020-01-01\\", \\"2020-01-01\\"] Output: [\\"2020-01-01\\", \\"2020-01-01\\"] Note: - The input list contains at least one date. - You can assume that all dates are valid and correctly formatted. - The function should handle lists containing up to 10,000 dates efficiently.","solution":"def get_earliest_and_latest_dates(dates): Returns the earliest and latest dates from a list of dates in the format \\"YYYY-MM-DD\\". Arguments: dates -- list of dates in the format \\"YYYY-MM-DD\\" Returns: A list containing the earliest and latest dates in the format \\"YYYY-MM-DD\\". if not dates: return [] earliest_date = min(dates) latest_date = max(dates) return [earliest_date, latest_date]"},{"question":"Consider a grid-based game where the player needs to navigate from a starting point to an ending point on a 2D grid. The player can only move in four directions: up, down, left, and right. The grid contains cells that are either open (represented by 0) or blocked (represented by 1). Write a function that determines if there is a path from a given starting position `(start_row, start_col)` to an ending position `(end_row, end_col)` on the grid. The function should return `True` if a path exists and `False` otherwise. Assume that the function will handle grids of various sizes, and both the start and end positions are always valid open cells (i.e., they are within the grid bounds and their values are 0). If a path does not exist due to blocked cells, return `False`. For example, given the following grid: ``` [ [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0] ] ``` - `start = (0, 0)`, `end = (3, 3)` should return `True` (a path exists) - `start = (0, 0)`, `end = (3, 0)` should return `False` (no path exists due to blocked cells) ```python def can_reach_end(grid, start_row, start_col, end_row, end_col): # Your code here pass ``` ```cs bool CanReachEnd(int[,] grid, int startRow, int startCol, int endRow, int endCol) { // Your code here return false; } ```","solution":"def can_reach_end(grid, start_row, start_col, end_row, end_col): def is_valid_move(x, y): return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0 def dfs(x, y): # If we reached the end cell if (x, y) == (end_row, end_col): return True # Mark the cell as visited grid[x][y] = -1 # Explore the four possible directions for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid_move(nx, ny) and dfs(nx, ny): return True return False return dfs(start_row, start_col)"},{"question":"Pirates have captured an ancient book which contains secret messages that can be revealed only by rearranging its words in a specific order. They need your help to unscramble the messages. The book consists of several messages, and each message has a list of unique words that need to be rearranged into a lexicographically smallest order. A sequence of words is lexicographically smaller than another sequence if in the first position where they differ, the word in the first sequence comes before the corresponding word in the second sequence in dictionary order. Given the scrambled words, your task is to output the lexicographically smallest sequence of words for each message. -----Input----- The first line of the input contains a single integer m (1 le m le 1000) — the number of messages. The first line of each message contains a single integer k (1 le k le 100) — the number of words in the message. The second line contains k space-separated unique words, each word consisting of lowercase English letters (1 le |word| le 100). -----Output----- For each message, print the lexicographically smallest sequence of words on a single line, separated by spaces. -----Example----- Input 2 5 scrambled ancient book secret pirates 3 help need you Output ancient book pirates scrambled secret help need you -----Note----- In the first test case, the words \\"scrambled\\", \\"ancient\\", \\"book\\", \\"secret\\", and \\"pirates\\" are rearranged in lexicographical order as \\"ancient book pirates scrambled secret\\". In the second test case, the words \\"help\\", \\"need\\", and \\"you\\" are already in lexicographical order.","solution":"def unscramble_messages(m, messages): Given the number of messages m and a list of messages where each message is a list containing the number of words followed by the list of words, return the lexicographically smallest sequence of words for each message. Args: - m: int, number of messages - messages: List[List[str]], list of words for each message Returns: - List[List[str]], list of words sorted lexicographically for each message sorted_messages = [] for message in messages: k = message[0] words = message[1:] words_sorted = sorted(words) sorted_messages.append(words_sorted) return sorted_messages # Example usage num_messages = 2 message_data = [ [5, \\"scrambled\\", \\"ancient\\", \\"book\\", \\"secret\\", \\"pirates\\"], [3, \\"help\\", \\"need\\", \\"you\\"] ] sorted_msgs = unscramble_messages(num_messages, message_data) for msg in sorted_msgs: print(\\" \\".join(msg))"},{"question":"Create a function `matrix_diagonal_difference(matrix)` that computes the absolute difference between the sum of the diagonals of a square matrix. Given a square matrix array of integers, calculate the absolute difference between the sums of its diagonals. The matrix will always be square, meaning it will have the same number of rows and columns. Function Signature: ```python def matrix_diagonal_difference(matrix: List[List[int]]) -> int: ``` **Inputs:** - `matrix`: List[List[int]] - a square matrix of integers with dimensions n x n (2 <= n <= 1000). - Example matrix: ``` [ [11, 2, 4], [4, 5, 6], [10, 8, -12] ] ``` **Outputs:** - Return the absolute difference between the sums of the matrix\'s primary and secondary diagonals. Example: ```python matrix = [ [11, 2, 4], [4, 5, 6], [10, 8, -12] ] print(matrix_diagonal_difference(matrix)) # Output: 15 ``` Explanation of Example: - Primary diagonal: `11 + 5 + (-12) = 4` - Secondary diagonal: `4 + 5 + 10 = 19` - Absolute difference: `|4 - 19| = 15` **Details:** - The primary diagonal of a matrix `matrix` is the collection of elements `matrix[i][i]` for all `i` from 0 to n-1. - The secondary diagonal of a matrix `matrix` is the collection of elements `matrix[i][n-1-i]` for all `i` from 0 to n-1. Implement the function to solve the problem.","solution":"def matrix_diagonal_difference(matrix): Computes the absolute difference between the sum of the primary and secondary diagonals of a square matrix. Args: matrix (List[List[int]]): A square matrix of integers. Returns: int: The absolute difference between the sum of the primary and secondary diagonals. n = len(matrix) primary_diagonal_sum = sum(matrix[i][i] for i in range(n)) secondary_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n)) return abs(primary_diagonal_sum - secondary_diagonal_sum)"},{"question":"Given a list of employee working hours, find the employee who worked the most hours in a given week and the total hours they worked. If there is a tie, return all employees who worked the most hours. The input is a list of dictionaries, where each dictionary contains an employee\'s name and a list of their daily working hours from Monday to Sunday. Each day is represented by an integer between 0 and 24. The output should be a list of dictionaries, each containing the employee\'s name and their total working hours. Example 1: Input: work_hours = [{\\"name\\": \\"Alice\\", \\"hours\\": [8, 9, 8, 8, 10, 0, 0]}, {\\"name\\": \\"Bob\\", \\"hours\\": [10, 10, 10, 8, 10, 0, 0]}, {\\"name\\": \\"Charlie\\", \\"hours\\": [5, 5, 5, 5, 5, 5, 5]}] Output: [{\\"name\\": \\"Bob\\", \\"total_hours\\": 48}] Explanation: Bob worked the most hours with a total of 48 hours. Example 2: Input: work_hours = [{\\"name\\": \\"Alice\\", \\"hours\\": [8, 9, 8, 8, 10, 0, 0]}, {\\"name\\": \\"Bob\\", \\"hours\\": [8, 9, 8, 8, 10, 0, 0]}, {\\"name\\": \\"Charlie\\", \\"hours\\": [5, 5, 5, 5, 5, 5, 5]}] Output: [{\\"name\\": \\"Alice\\", \\"total_hours\\": 43}, {\\"name\\": \\"Bob\\", \\"total_hours\\": 43}] Explanation: Alice and Bob both worked the most hours with a total of 43 hours each. Example 3: Input: work_hours = [{\\"name\\": \\"Alice\\", \\"hours\\": [0, 0, 0, 0, 0, 0, 0]}] Output: [{\\"name\\": \\"Alice\\", \\"total_hours\\": 0}] Explanation: Alice is the only employee and worked 0 hours in the week. Constraints: - 1 <= work_hours.length <= 10^4 - Each \\"hours\\" list contains 7 integers. - Each integer is between 0 and 24, inclusive. - Each employee\'s name is a string of lowercase English letters with length between 1 and 100.","solution":"def find_top_employee(work_hours): Finds the employee(s) who worked the most hours in a given week and their total hours. Parameters: work_hours (list): A list of dictionaries, each containing an employee\'s name and a list of their daily working hours from Monday to Sunday. Returns: list: A list of dictionaries, each containing the employee\'s name and their total working hours. max_hours = 0 result = [] for employee in work_hours: total_hours = sum(employee[\\"hours\\"]) if total_hours > max_hours: max_hours = total_hours result = [{\\"name\\": employee[\\"name\\"], \\"total_hours\\": total_hours}] elif total_hours == max_hours: result.append({\\"name\\": employee[\\"name\\"], \\"total_hours\\": total_hours}) return result"},{"question":"-----Problem Statement----- Write a program that accepts a string and outputs the string in reverse order. -----Input----- The only line contains a single string. -----Output----- Output the reversed string in a single line. -----Constraints----- - The string will only contain printable ASCII characters. - The string length will be between 1 and 100 characters. -----Sample Input----- hello -----Sample Output----- olleh","solution":"def reverse_string(s): Returns the reversed string of the given input string s. return s[::-1]"},{"question":"You are given a list of non-negative integers representing daily calories consumed. You need to return the maximum possible sum of calories over any contiguous subarray of length k. If the length k is greater than the length of the input list, return 0. # Example: ```python max_calories([2, 1, 5, 1, 3, 2], 3) # should return 9 max_calories([2, 1, 5, 1, 3, 2], 7) # should return 0 max_calories([1, 2, 3, 4, 5], 2) # should return 9 ``` # Explanation: - In the first example, the subarray of length 3 with the maximum sum is [5, 1, 3], and the sum is 9. - In the second example, the length k is greater than the length of the list, so the output is 0. - In the third example, the subarray of length 2 with the maximum sum is [4, 5], and the sum is 9. # Notes: 1. The function should take in two parameters: the list of daily calories and the integer length k. 2. The list of calories is guaranteed to contain non-negative integers. 3. The length k is a positive integer. 4. If the list is empty or if k is greater than the length of the list, return 0.","solution":"def max_calories(calories, k): Returns the maximum possible sum of calories over any contiguous subarray of length k. If k is greater than the length of the input list, returns 0. n = len(calories) if k > n: return 0 max_sum = sum(calories[:k]) current_sum = max_sum for i in range(k, n): current_sum = current_sum - calories[i - k] + calories[i] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Consider a list of integers where every number appears exactly twice, except for one unique number which appears only once. Write a function to identify the unique number in the list. - The function should take a list of integers `nums` where the length of the list is odd and at least 1 (1 <= len(nums) <= 3 * 10^4). - Every element in the list appears exactly twice except for one element which appears only once. For example, given the list `[4, 1, 2, 1, 2]`, the function should return `4` because: ``` 4 is the only number that appears once. ``` Given the list `[2, 2, 1]`, the function should return `1` because: ``` 1 is the only number that appears once. ```","solution":"def find_unique_number(nums): Identifies the unique number in a list where every number appears exactly twice except for one which appears only once. Args: nums (list): List of integers where one integer appears only once and the rest appear exactly twice. Returns: int: The unique integer that appears only once in the list. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"You are given an n times n grid, where each cell contains a non-negative integer. You need to find a path from the top-left corner to the bottom-right corner that minimizes the sum of the numbers along the path. You can only move right or down at any point in time. -----Input:----- - The first line will contain an integer T, the number of test cases. - For each test case: - The first line contains an integer n, the size of the grid. - Each of the next n lines contains n integers separated by spaces, representing the values in the grid. -----Output:----- For each test case, output in a single line the minimum sum of the path from the top-left corner to the bottom-right corner. -----Constraints----- textbf{Subtask 1} (20 points) - 1 leq T leq 10 - 1 leq n leq 10 - 0 leq text{grid}[i][j] leq 100 textbf{Subtask 2} (80 points) - 1 leq T leq 5 - 1 leq n leq 100 - 0 leq text{grid}[i][j] leq 100 -----Sample Input:----- 1 3 1 3 1 1 5 1 4 2 1 -----Sample Output:----- 7 -----EXPLANATION:----- The path 1→ 3→ 1→ 1→ 1 minimizes the sum to 7.","solution":"import sys def min_path_sum(grid): Given a 2D grid, returns the minimum sum of a path from the top-left corner to the bottom-right corner. Only right and down movements are allowed. n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][n-1] def minimum_path_sums(test_cases): results = [] for grid in test_cases: results.append(min_path_sum(grid)) return results # Example usage: # T = int(input()) # test_cases = [] # for _ in range(T): # n = int(input()) # grid = [list(map(int, input().split())) for _ in range(n)] # test_cases.append(grid) # # results = minimum_path_sums(test_cases) # for result in results: # print(result)"},{"question":"The manager at a manufacturing plant is trying to optimize the production schedule. The plant produces widgets and gadgets every day. To ensure a balanced production, the manager wants to check if on each given day, the company can produce a total of exactly P products by producing exactly W widgets and G gadgets, where W and G are non-negative integers (W >= 0, G >= 0). You are to write a program that helps determine if this is possible. -----Input:----- - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a single integer P, the total number of products needed for a particular day. -----Output:----- For each test case, output \\"YES\\" if it is possible to produce exactly P products by combining any non-negative number of widgets and gadgets, otherwise, output \\"NO\\". -----Constraints----- - 1 leq T leq 10^5 - 0 leq P leq 10^5 -----Sample Input:----- 3 10 15 7 -----Sample Output:----- YES YES NO","solution":"def can_produce_exactly_p_products(P): This function checks if it is possible to produce exactly P products using any non-negative combination of widgets (W) and gadgets (G) where W + G = P. The function returns \\"YES\\" if possible and \\"NO\\" otherwise. # Since W and G can be any non-negative integers, any non-negative integer P is possible return \\"YES\\" if P >= 0 else \\"NO\\" def solution(test_cases): results = [] for P in test_cases: results.append(can_produce_exactly_p_products(P)) return results"},{"question":"Create a function that calculates the minimum number of operations required to convert a given string \'X\' to another string \'Y\'. An operation is defined as either an insertion, deletion, or substitution of a single character. Both strings are case-sensitive and consist only of uppercase and lowercase alphabets. The function should accept two strings \'X\' and \'Y\' as input and return an integer representing the minimum number of operations needed. Example: ``` Input: X = \\"kitten\\", Y = \\"sitting\\" Output: 3 Input: X = \\"flaw\\", Y = \\"lawn\\" Output: 2 ``` Hint: Use dynamic programming to find the optimal solution.","solution":"def min_operations(X, Y): Calculates the minimum number of operations required to convert string X to string Y. Args: X : str : input string Y : str : target string Returns: int : minimum number of operations (insertions, deletions, substitutions) m = len(X) n = len(Y) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(m + 1): for j in range(n + 1): # Base cases if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i # If last characters are the same elif X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last characters are different else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"You are given a list of N integers which are strictly positive. Your task is to divide this list into two sublists such that the absolute difference between the sums of these two sublists is minimized. Write a function `def minimum_difference(N: int, nums: List[int]) -> int:` which takes in the number of integers N and a list of integers nums. The function should return an integer, representing the minimal possible absolute difference between the sums of the two sublists. **Input:** - The first line contains an integer N. - The second line contains N space-separated integers representing the list nums. **Output:** - Print a single integer, the minimal possible difference. **Constraints:** - 1 le N le 100 - 1 le text{nums}[i] le 1000 **Example Input:** ``` 4 1 6 11 5 ``` **Example Output:** ``` 1 ``` **Explanation:** You can divide the list into two sublists: {1, 6, 5} and {11}, where the sums are 12 and 11, respectively. The absolute difference is |12 - 11| = 1, which is the minimal possible difference in this case.","solution":"def minimum_difference(N, nums): total_sum = sum(nums) half_sum = total_sum // 2 dp = [[False] * (half_sum + 1) for _ in range(N + 1)] dp[0][0] = True for i in range(1, N + 1): for j in range(half_sum + 1): dp[i][j] = dp[i - 1][j] if j >= nums[i - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j - nums[i - 1]] for j in range(half_sum, -1, -1): if dp[N][j]: sum1 = j break sum2 = total_sum - sum1 return abs(sum2 - sum1)"},{"question":"Create a function named matrixTrace. This function will take a two-dimensional list (matrix) as an input and will return the trace of the matrix. The trace of a matrix is defined as the sum of the elements on the main diagonal (from the top left to the bottom right). If the input matrix is not square (i.e., it doesn\'t have the same number of rows and columns), the function should return None. **Constraints:** - The matrix will have at least one row and one column. - Elements of the matrix are guaranteed to be integers. **Example:** - matrixTrace([[1, 2], [3, 4]]) should return 5 (1 + 4). - matrixTrace([[5, 9, 1], [2, 6, 3], [4, 7, 8]]) should return 19 (5 + 6 + 8). - matrixTrace([[5]]) should return 5. - matrixTrace([[1, 2, 3], [4, 5, 6]]) should return None (not a square matrix).","solution":"def matrixTrace(matrix): Returns the trace of the matrix. If the matrix is not square, return None. Parameters: matrix (list of lists of int): The input two-dimensional list (matrix). Returns: int or None: The trace of the matrix if it is square; otherwise, None. # Check if the matrix is square if len(matrix) != len(matrix[0]): return None # Calculate the trace of the matrix trace = sum(matrix[i][i] for i in range(len(matrix))) return trace"},{"question":"You are given a list of dictionaries representing players\' scores in a gaming tournament. Each dictionary contains the player\'s name and their scores across various rounds. Your task is to write a function `tournament_results(players)` that takes in a list of such dictionaries and returns a list of tuples. Each tuple should contain a player\'s name, their highest score, and their average score across all rounds (rounded to 2 decimal places). For example: ```python players = [ {\\"name\\": \\"Alice\\", \\"scores\\": [85, 90, 78]}, {\\"name\\": \\"Bob\\", \\"scores\\": [92, 88, 95]}, {\\"name\\": \\"Charlie\\", \\"scores\\": [80, 85, 85]} ] tournament_results(players) = [ (\\"Alice\\", 90, 84.33), (\\"Bob\\", 95, 91.67), (\\"Charlie\\", 85, 83.33) ] ``` Note: The number of rounds (i.e., the length of the `scores` list) may vary for each player in the input list.","solution":"def tournament_results(players): Returns a list of tuples with player\'s name, highest score, and average score. Parameters: players (list): A list of dictionaries, each containing - \'name\': player\'s name - \'scores\': a list of scores in various rounds Returns: list: List of tuples containing player\'s name, highest score, and average score. results = [] for player in players: name = player[\\"name\\"] scores = player[\\"scores\\"] highest_score = max(scores) average_score = round(sum(scores) / len(scores), 2) results.append((name, highest_score, average_score)) return results"},{"question":"# Story A group of biologists is studying a population of animals in a specific region. Each animal has a unique identifier in the form of an alphanumeric string. The researchers need to keep track of different species by counting certain patterns or substrings within these identifiers. You are helping these biologists by writing a function that accepts a list of animal identifiers and a single pattern. Your task is to count how many times the pattern appears in any position within each identifier. # Function Signature Write a function `count_pattern_occurrences(identifiers: List[str], pattern: str) -> int` that takes in a list of strings (animal identifiers) and a pattern (string) and returns the total count of occurrences of the pattern within the identifiers. # Example For `identifiers` = [\\"ab12cd34\\", \\"123ab\\", \\"a1b2c3\\"], and `pattern` = \\"12\\" * \\"ab12cd34\\" contains \\"12\\" once * \\"123ab\\" contains \\"12\\" once * \\"a1b2c3\\" does not contain \\"12\\" So the function should return 2. # Notes * The identifiers will only contain alphanumeric characters. * The pattern will only contain alphanumeric characters. * The pattern and identifiers can vary in length. * Identifiers can be empty, but the pattern will always contain at least one character. * Case sensitivity matters, \\"a\\" is not the same as \\"A\\".","solution":"from typing import List def count_pattern_occurrences(identifiers: List[str], pattern: str) -> int: Returns the total count of occurrences of the pattern within the identifiers. count = 0 for identifier in identifiers: count += identifier.count(pattern) return count"},{"question":"A rectangular matrix is considered to be \\"row and column sorted\\" if each row is sorted in non-decreasing order and each column is sorted in non-decreasing order. You are given such a matrix and an integer target. Implement an algorithm that efficiently determines whether the target integer exists in the matrix. You may assume that the matrix dimensions are m x n, where 1 <= m, n <= 300. Example 1: Input: matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 5 Output: True Example 2: Input: matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 20 Output: False Note: - The matrix dimensions are between 1 and 300. - The matrix values and the target will be integers.","solution":"def search_matrix(matrix, target): Returns True if target is present in the row and column sorted matrix. Returns False otherwise. if not matrix or not matrix[0]: return False rows, cols = len(matrix), len(matrix[0]) i, j = 0, cols - 1 # start from the top-right corner while i < rows and j >= 0: if matrix[i][j] == target: return True elif matrix[i][j] > target: j -= 1 else: i += 1 return False"},{"question":"Task Write a function that takes a list of integers and returns a new list with each integer squared, while preserving the original order. Input A list of integers, which can be both positive and negative. The length of the list is between 1 and 100. Example ```python square_elements([1, 2, 3, -4]) # --> [1, 4, 9, 16] ```","solution":"def square_elements(lst): Returns a new list with each element squared. Parameters: lst (list): List of integers. Returns: list: A new list with each element in lst squared. return [x**2 for x in lst]"},{"question":"You are given a list of alphanumeric strings. Your task is to identify the strings that contain at least one digit and move all such strings to the end of the list while preserving the relative order of the strings within their respective groups. The transformation should be done in-place and the function should return the modified list. ```python def reorder_strings(strings): Rearrange strings with digits at the end of the list in-place. Args: strings (list of str): A list of alphanumeric strings. Returns: list of str: The modified list with strings containing digits moved to the end. pass # Examples print(reorder_strings([\\"abc\\", \\"a1b\\", \\"123\\", \\"def\\"])) # [\'abc\', \'def\', \'a1b\', \'123\'] print(reorder_strings([\\"cat\\", \\"2dogs\\", \\"bird\\", \\"3mice\\"])) # [\'cat\', \'bird\', \'2dogs\', \'3mice\'] print(reorder_strings([\\"x1y\\", \\"a2\\", \\"b3\\", \\"xyz\\"])) # [\'xyz\', \'x1y\', \'a2\', \'b3\'] ```","solution":"def reorder_strings(strings): Rearrange strings with digits at the end of the list in-place. Args: strings (list of str): A list of alphanumeric strings. Returns: list of str: The modified list with strings containing digits moved to the end. has_digit = lambda s: any(char.isdigit() for char in s) without_digits = [s for s in strings if not has_digit(s)] with_digits = [s for s in strings if has_digit(s)] return without_digits + with_digits"},{"question":"# isomorphic_strings **Goal**: Given two strings, determine if they are isomorphic. Two strings are isomorphic if the characters in one string can be replaced to get the second string. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself. **Input**: - Two strings `s` and `t`. **Output**: - Return `True` if the strings are isomorphic, `False` otherwise. # Example **Example 1**: ``` Input: s = \\"egg\\", t = \\"add\\" Output: True Explanation: \'e\' maps to \'a\' and \'g\' maps to \'d\'. ``` **Example 2**: ``` Input: s = \\"foo\\", t = \\"bar\\" Output: False Explanation: \'f\' maps to \'b\', \'o\' maps to \'a\' and \'o\' maps to \'r\'. Since \'o\' can\'t map to both \'a\' and \'r\', the strings are not isomorphic. ``` **Example 3**: ``` Input: s = \\"paper\\", t = \\"title\\" Output: True Explanation: \'p\' maps to \'t\', \'a\' maps to \'i\', \'p\' maps to \'t\', \'e\' maps to \'l\', and \'r\' maps to \'e\'. ``` **Note**: - Both strings `s` and `t` must be of the same length.","solution":"def isomorphic_strings(s, t): Determine if two strings are isomorphic. Two strings are isomorphic if the characters in one string can be replaced to get the second string with all occurrences of a character being replaced with another character while preserving the order of characters. :param s: First string :param t: Second string :return: True if the strings are isomorphic, False otherwise if len(s) != len(t): return False # To keep track of character mapping from s to t and t to s mapping_s_t = {} mapping_t_s = {} for char_s, char_t in zip(s, t): # If char_s is already mapped to another character, it should be the same as char_t if char_s in mapping_s_t and mapping_s_t[char_s] != char_t: return False # If char_t is already mapped to another character, it should be the same as char_s if char_t in mapping_t_s and mapping_t_s[char_t] != char_s: return False # Map the characters mapping_s_t[char_s] = char_t mapping_t_s[char_t] = char_s return True"},{"question":"# Task You are given a list of integers. Your objective is to rearrange the list such that all even numbers appear before all the odd numbers while preserving the relative order of the even and odd numbers from the original list. # Example For `input_list = [3, 8, 5, 13, 6, 12, 7, 4]`, the result should be `[8, 6, 12, 4, 3, 5, 13, 7]`. For `input_list = [1, 3, 5, 7, 9]`, the result should be `[1, 3, 5, 7, 9]` because there are no even numbers. For `input_list = [2, 4, 6, 8]`, the result should be `[2, 4, 6, 8]` because there are no odd numbers. # Input / Output - `[input]` integer array `input_list` A non-empty list of integers where `1 ≤ len(input_list) ≤ 10^5` and `1 ≤ input_list[i] ≤ 10^5`. - `[output]` integer array A list of integers rearranged such that all even numbers appear before all odd numbers while preserving the relative order of the even and odd numbers from the original list.","solution":"def rearrange_evens_first(input_list): Rearrange the list such that all even numbers appear before all the odd numbers while preserving the relative order of the even and odd numbers from the original list. Parameters: input_list (list): A list of integers Returns: list: A list with all even integers first, followed by all odd integers evens = [x for x in input_list if x % 2 == 0] odds = [x for x in input_list if x % 2 != 0] return evens + odds"},{"question":"A delivery company has a unique system for handling deliveries. The company has n delivery vans, each with a maximum capacity of c parcels. Each delivery van travels at a constant speed and takes t units of time to complete one delivery cycle, which includes picking up parcels, delivering them, and returning to the warehouse. The company operates for d units of time each day, meaning each van can complete multiple delivery cycles within a single day. However, the demand for deliveries is high, and the company always has more parcels to deliver than can be handled by the available vans within a day. For each delivery van, there is a constant cost per cycle, which is the same for all vans. Additionally, there is a penalty for undelivered parcels left at the end of the day. The penalty for each undelivered parcel is p units of money. Your task is to write a program that calculates the total cost for the company in one day, including the penalties for the undelivered parcels, given the following constraints and input format: -----Input----- - The input consists of multiple test cases. - Each test case contains five space-separated positive integers: n, c, t, d, and p, where n, c, t, p leq 1000 and d leq 10^4. - End of input is determined by a single line with five zeros. - There are no more than 1000 test cases. -----Output----- - For each test case, output in a single line the total cost for the company for that day. -----Sample Input----- 2 100 3 24 5 3 150 2 30 10 0 0 0 0 0 -----Sample Output----- 240 360 -----Explanation:----- Testcase 1: Here, n=2, c=100, t=3, d=24, p=5. Each van can complete left lfloor frac{24}{3} right rfloor = 8 cycles in a day. So, each van can deliver 100 * 8 = 800 parcels. Total parcels delivered by 2 vans = 2 * 800 = 1600 parcels. Assume the total demand for parcels exceeds capacity, the remaining parcels incur a penalty. The total cost is n times d times t + p times (total parcels - delivered parcels). Since the demand is always higher than the delivery capacity, full penalty is applied. Testcase 2: Here, n=3, c=150, t=2, d=30, p=10. Each van can complete left lfloor frac{30}{2} right rfloor = 15 cycles in a day. So, each van can deliver 150 * 15 = 2250 parcels. Total parcels delivered by 3 vans = 3 * 2250 = 6750 parcels. The total cost is n times d times t + p times (total parcels - delivered parcels). Since the demand is always higher than the delivery capacity, full penalty is applied.","solution":"def calculate_total_cost(n, c, t, d, p): if n == 0 and c == 0 and t == 0 and d == 0 and p == 0: return None total_capacity_per_van_per_day = (d // t) * c total_capacity_all_vans_per_day = total_capacity_per_van_per_day * n penalty_cost = total_capacity_all_vans_per_day * p return penalty_cost def process_input(input_data): results = [] for line in input_data: n, c, t, d, p = map(int, line.split()) if n == 0 and c == 0 and t == 0 and d == 0 and p == 0: break results.append(calculate_total_cost(n, c, t, d, p)) return results"},{"question":"Implement a function `largest_subarray_sum` that takes a list of integers as an argument and returns the sum of the contiguous subarray which has the largest sum. The input list will have at least one integer. Consider the following examples: Example 1: ```python largest_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) # should return 6 because [4, -1, 2, 1] has the largest sum Example 2: ```python largest_subarray_sum([1]) # should return 1 as it is the only element Example 3: ```python largest_subarray_sum([-1, -2, -3, -4]) # should return -1 as it is the largest sum possible ``` Hint: You can use Kadane\'s Algorithm to solve this problem efficiently with a time complexity of O(n).","solution":"def largest_subarray_sum(nums): Returns the sum of the contiguous subarray which has the largest sum. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a string representing a mathematical expression in infix notation. Your task is to write a function that converts this expression to postfix notation (also known as Reverse Polish Notation). In infix notation, operators such as +, -, *, and / are placed between operands (e.g., \\"3 + 4\\"). In postfix notation, operators follow their operands (e.g., \\"3 4 +\\"). Here are the rules you need to consider: 1. Operands (numbers) are output directly in the order they appear. 2. Operators are pushed onto a stack. When an operator is encountered, operators of higher or equal precedence already in the stack are popped and added to the output before pushing the encountered operator onto the stack. 3. Left parentheses \'(\' are pushed onto the stack. 4. Right parentheses \')\' cause operators to be popped from the stack and added to the output until a left parenthesis \'(\' is encountered. The pair of parentheses are discarded. The precedence of operators (from highest to lowest) is as follows: 1. *, / 2. +, - Implement the function `convert_to_postfix(expression)` that takes a string `expression` (which may include numbers, operators, and parentheses) and returns a string representing the equivalent postfix expression. Example input: ``` \\"3 + 4 * 2 / ( 1 - 5 )\\" ``` Example output: ``` \\"3 4 2 * 1 5 - / +\\" ``` You can assume the input is a valid expression containing only positive integers, operators (+, -, *, /), and parentheses. There will be a single space between each token (number or operator) in the input string.","solution":"def convert_to_postfix(expression): Converts an infix expression to postfix (Reverse Polish Notation). def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def infix_to_postfix(expression): stack = [] # stack to hold operators output = [] # list for output tokens = expression.split() for token in tokens: if token.isnumeric(): # if operand, add to output output.append(token) elif token == \'(\': stack.append(token) elif token == \')\': while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() else: # operator encountered while stack and precedence(stack[-1]) >= precedence(token): output.append(stack.pop()) stack.append(token) while stack: output.append(stack.pop()) return \' \'.join(output) return infix_to_postfix(expression)"},{"question":"A group of friends wants to organize a game night and they need to pair up for various activities. However, the number of friends might not always be even. To make the best out of the situation, they want to maximize the number of pairs they can form. Help them by writing a program that calculates the maximum number of pairs that can be formed from a given number of friends. -----Input----- First line of input contains an integer T denoting the number of test cases. The next T lines contain an integer F representing the number of friends. -----Output----- For each test case, print a single line containing the maximum number of pairs that can be formed from F friends. -----Constraints----- - 1 ≤ T ≤ 1000 - 0 ≤ F ≤ 1000000 -----Example----- Input: 3 5 10 15 Output: 2 5 7","solution":"def max_pairs(friends): Returns the maximum number of pairs that can be formed from the given number of friends. return friends // 2"},{"question":"Given an array of words, write a function that groups the anagrams together. Each word in the input array is a lowercase string. The function should return a list of lists, where each inner list contains words that are anagrams of each other. The order of the groups and the order of the words within each group do not matter.","solution":"from collections import defaultdict def group_anagrams(words): Groups the anagrams together from the given list of words. Args: words (list of str): A list of lowercase words. Returns: list of list of str: A list of lists, where each inner list contains words that are anagrams of each other. anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"A detective agency needs to verify the authenticity of reports they receive from various field agents. Each report is represented by a string of text containing letters, punctuation, and spaces. To ensure the reports have not been tampered with, they apply a Hash Sum Check method. In this method, a hash value is computed for each letter in the report based on its position in the alphabet (A=1, B=2, ..., Z=26, ignoring case). Sum the values of all letters in the string to get the hash sum for the report. For example: - \\"Hello, World!\\" would have a hash sum calculated as H(8) + e(5) + l(12) + l(12) + o(15) + W(23) + o(15) + r(18) + l(12) + d(4) = 124. The punctuation marks and spaces are ignored in the hash sum calculation. Your task: Create a function `verify_report` that takes a string `report` and an integer `hash_sum`. The function should compute the hash sum of the string and compare it to the provided hash sum. If the computed hash sum matches the provided hash sum, return `True`. Otherwise, return `False`. Function signature: `def verify_report(report: str, hash_sum: int) -> bool:` Example: ```python assert verify_report(\\"Hello, World!\\", 124) == True assert verify_report(\\"The quick brown fox jumps over the lazy dog.\\", 2204) == False ```","solution":"def verify_report(report: str, hash_sum: int) -> bool: Verifies the authenticity of a report by computing its hash sum and comparing it to the provided hash sum. :param report: A string representing the report text. :param hash_sum: An integer representing the expected hash sum of the report. :return: True if the computed hash sum matches the provided hash sum, otherwise False. letters = \'abcdefghijklmnopqrstuvwxyz\' report_sum = sum(letters.index(char.lower()) + 1 for char in report if char.lower() in letters) return report_sum == hash_sum"},{"question":"Write a function that takes a list of integers and returns a new list where each element is the product of all other elements in the original list except for the one at that index. Do this without using division. For example: ``` [1, 2, 3, 4] --> [24, 12, 8, 6] [2, 3, 4, 5] --> [60, 40, 30, 24] ```","solution":"def product_except_self(nums): Returns a new list where each element is the product of all other elements in the original list except for the one at that index. length = len(nums) if length == 0: return [] # Initialize the output array with ones output = [1] * length # Calculate products of elements before the current index left_product = 1 for i in range(length): output[i] = left_product left_product *= nums[i] # Calculate products of elements after the current index right_product = 1 for i in range(length - 1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"Write a function that takes a string representation of a mathematical expression containing numbers combined with the words \\"multiply\\" or \\"divide\\" and returns the result as a string. The function should handle only integer arithmetic, and the input string will always be a valid expression. **Note:** The input will not be empty and will always produce an integer result. Examples ``` \\"10multiply2divide5\\" --> \\"4\\" \\"20divide2multiply3\\" --> \\"30\\" ```","solution":"def evaluate_expression(expression: str) -> str: Evaluates a mathematical expression containing numbers combined with the words \\"multiply\\" or \\"divide\\". The input string will always be a valid expression and produce an integer result. :param expression: str - The input expression string. :return: str - The result of the arithmetic operations as a string. # Replace words with symbols to simplify parsing expression = expression.replace(\\"multiply\\", \\"*\\") expression = expression.replace(\\"divide\\", \\"/\\") # Evaluate the modified expression result = eval(expression) return str(int(result)) # Convert the result to an integer and then to a string"},{"question":"# Instructions You are given a string representing a mathematical expression that contains only non-negative integers, addition, subtraction, multiplication, and division operators. The operators follow standard precedence rules (e.g., multiplication and division have higher precedence than addition and subtraction). Division in this problem is defined as integer division. Write a function that takes such a string as input and returns the result of the expression as an integer. For example: ``` \\"3+2*2\\" should return 7 \\"3/2\\" should return 1 \\"3+5/2\\" should return 5 ``` **Constraints:** - The input string is non-empty and contains only digits, \'+\', \'-\', \'*\', \'/\' characters, and possibly spaces. The input string is guaranteed to be a valid mathematical expression. - The integer division should truncate towards zero. **Function signature:** ```python def calculate(expression: str) -> int: pass ``` **Example:** ```python >>> calculate(\\"14-3/2\\") 13 >>> calculate(\\"3+2*2\\") 7 >>> calculate(\\" 3/2 \\") 1 >>> calculate(\\" 3+5 / 2 \\") 5 ```","solution":"def calculate(expression: str) -> int: def parse_expression(expression): tokens = [] number = 0 has_number = False for char in expression: if char.isdigit(): number = number * 10 + int(char) has_number = True else: if has_number: tokens.append(number) number = 0 has_number = False if char in \\"+-*/\\": tokens.append(char) if has_number: tokens.append(number) return tokens def evaluate_tokens(tokens): stack = [] current_operator = \'+\' i = 0 while i < len(tokens): token = tokens[i] if isinstance(token, int): if current_operator == \'+\': stack.append(token) elif current_operator == \'-\': stack.append(-token) elif current_operator == \'*\': stack[-1] = stack[-1] * token elif current_operator == \'/\': stack[-1] = int(stack[-1] / token) else: current_operator = token i += 1 return sum(stack) tokens = parse_expression(expression.replace(\' \', \'\')) return evaluate_tokens(tokens)"},{"question":"Implement a Python function that accepts a list of integers and an integer `k`. Generate and return a new list of integers where each integer in the original list is rotated to the right by `k` positions in a cyclic manner. For example: ``` rotate_list([1, 2, 3, 4, 5], 2) => [4, 5, 1, 2, 3] rotate_list([1, 2, 3, 4, 5], 3) => [3, 4, 5, 1, 2] rotate_list([1, 2, 3, 4, 5], 5) => [1, 2, 3, 4, 5] rotate_list([1, 2, 3, 4, 5], 6) => [5, 1, 2, 3, 4] ``` The function should handle a situation when `k` is larger than the length of the list.","solution":"def rotate_list(nums, k): Returns a new list with the elements of nums rotated to the right by k positions. if not nums: return [] k = k % len(nums) return nums[-k:] + nums[:-k]"},{"question":"Write a function that determines whether a given string can be segmented into a space-separated sequence of one or more dictionary words. Specifically, the function should return `true` if the string can be represented as one or more concatenated words from a dictionary, and `false` otherwise. You will be given a dictionary as a list of strings, and the target string as a parameter. The dictionary does not contain duplicate words. # Example 1: Input: dictionary = [\\"apple\\", \\"pen\\"], s = \\"applepenapple\\" Output: true Explanation: The string can be segmented as \\"apple pen apple\\". # Example 2: Input: dictionary = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"], s = \\"catsandog\\" Output: false Explanation: The string cannot be fully segmented using the dictionary words. # Example 3: Input: dictionary = [\\"a\\", \\"b\\", \\"c\\"], s = \\"abc\\" Output: true Explanation: The string can be segmented as \\"a b c\\". # Example 4: Input: dictionary = [\\"leet\\", \\"code\\"], s = \\"leetcode\\" Output: true Explanation: The string can be segmented as \\"leet code\\". # Constraints: - The input string s should have a length between 1 and 300. - The dictionary size will be in the range [1, 1000]. - The dictionary words will have lengths between 1 and 20. - The input string and dictionary words consist only of lowercase English letters.","solution":"def word_break(dictionary, s): Determines if the string `s` can be segmented into a space-separated sequence of one or more dictionary words. :param dictionary: List[str] - A list of strings representing the dictionary. :param s: str - The target string to be segmented. :return: bool - True if `s` can be segmented, False otherwise. # Create a set from the dictionary for O(1) look-up. word_dict = set(dictionary) # dp[i] will be True if s[0:i] can be segmented into dictionary words. dp = [False] * (len(s) + 1) dp[0] = True # Base case: Empty string can be segmented for i in range(1, len(s) + 1): for j in range(i): # Check if s[j:i] is a dictionary word if dp[j] and s[j:i] in word_dict: dp[i] = True break return dp[len(s)]"},{"question":"Given a 2D integer grid where each cell represents a piece of land (1) or water (0), find the length of the shortest bridge. A bridge is defined as a path of 0s connecting two separate islands (regions of connected 1s). You may assume all four edges of the grid are surrounded by water. To create this bridge, you can change any 0 to 1. You can only connect 1s vertically or horizontally. Notes: - The grid has at least two islands. - Each island consists of at least one piece of land. Example 1: Input: grid = [ [0,1,0,0,0], [0,1,0,1,1], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,1] ] Output: 1 Explanation: From the middle island, the shortest path to the top island is by converting the single 0 on the second row to 1. Example 2: Input: grid = [ [1,0,0,1], [0,0,0,0], [0,0,1,0], [1,0,0,0], ] Output: 2 Explanation: One approach is to convert the two middle 0s in the first and third columns to 1, connecting the islands vertically.","solution":"from collections import deque def shortestBridge(grid): def get_island(): for r in range(R): for c in range(C): if grid[r][c] == 1: return (r, c) def dfs(r, c): stack = [(r, c)] while stack: row, col = stack.pop() for dr, dc in directions: new_row, new_col = row + dr, col + dc if (0 <= new_row < R and 0 <= new_col < C and grid[new_row][new_col] == 1 and (new_row, new_col) not in visited): visited.add((new_row, new_col)) stack.append((new_row, new_col)) return visited R, C = len(grid), len(grid[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Find one island using DFS start_r, start_c = get_island() visited = set([(start_r, start_c)]) island = dfs(start_r, start_c) # Change the island bits to \\"2\\" to mark them for r, c in island: grid[r][c] = 2 # BFS Queue with all island coordinates queue = deque([(r, c, 0) for r, c in island]) while queue: row, col, distance = queue.popleft() for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < R and 0 <= new_col < C: if grid[new_row][new_col] == 1: return distance if grid[new_row][new_col] == 0: grid[new_row][new_col] = 2 queue.append((new_row, new_col, distance + 1)) return -1 # Should never reach here due to problem constraints"},{"question":"You are given an n x n matrix filled with integers, and you need to traverse it in a spiral order and print the elements retrieved in this order. -----Input----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer n, the dimension of the matrix (number of rows and columns). - The next n lines each contain n space-separated integers representing the matrix elements. -----Output----- For each test case, output a single line of n*n space-separated integers representing the elements of the matrix in spiral order. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 100 - -1000 ≤ matrix[i][j] ≤ 1000 -----Sample Input----- 2 3 1 2 3 4 5 6 7 8 9 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -----Sample Output----- 1 2 3 6 9 8 7 4 5 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10 -----Explanation----- - For the first test case, the 3x3 matrix elements printed in spiral order are: 1 (top left), 2 (top center), 3 (top right), 6 (right middle), 9 (bottom right), 8 (bottom center), 7 (bottom left), 4 (left middle), 5 (center). - For the second test case, the 4x4 matrix elements printed in spiral order are: 1 (top left), 2, 3, 4 (top row), 8, 12, 16 (right column moving down), 15, 14, 13 (bottom row moving left), 9, 5 (left column moving up), 6, 7 (moving right in the remaining 2x2 center), 11, 10 (final inner elements moving left).","solution":"def spiral_order(matrix): Returns the elements of the matrix in spiral order. result = [] while matrix: result += matrix.pop(0) if matrix and matrix[0]: for row in matrix: result.append(row.pop()) if matrix: result += matrix.pop()[::-1] if matrix and matrix[0]: for row in matrix[::-1]: result.append(row.pop(0)) return result def process_test_cases(test_cases): Processes multiple test cases for spiral order matrix traversal. results = [] for matrix in test_cases: results.append(spiral_order(matrix)) return results"},{"question":"In this task, you need to create a function that calculates the total amount of time a book club spends reading in a month. Each club member reads a different number of pages per hour and dedicates a specific number of hours per day to reading. You will receive a list of dictionaries as input. Each dictionary represents a member with \'pages_per_hour\' and \'hours_per_day\' keys. The total number of days in the month will be provided as a third argument. Your function should return the total amount of time, in hours, spent reading by all members throughout the month. **Example:** ```python def total_reading_time(members, days_in_month): pass members = [ {\'pages_per_hour\': 30, \'hours_per_day\': 2}, {\'pages_per_hour\': 20, \'hours_per_day\': 1}, {\'pages_per_hour\': 25, \'hours_per_day\': 3} ] days_in_month = 30 total_reading_time(members, days_in_month) ``` **Output:** 150","solution":"def total_reading_time(members, days_in_month): Calculate the total amount of time a book club spends reading in a month. Args: members (list of dict): Each dictionary contains \'pages_per_hour\' and \'hours_per_day\' keys. days_in_month (int): The total number of days in the month. Returns: int: Total reading time in hours. total_hours = 0 for member in members: total_hours += member[\'hours_per_day\'] * days_in_month return total_hours"},{"question":"Given an array nums of positive integers, calculate the minimum number of operations needed to make all elements in the array equal. In one operation, you can choose any two elements of the array and decrease them by 1. Example 1: Input: nums = [3, 4, 6] Output: 8 Explanation: - Choose (3, 4), resulting in [2, 3, 6]. - Choose (2, 3), resulting in [1, 2, 6]. - Choose (1, 2), resulting in [0, 1, 6]. - Choose (1, 6), resulting in [0, 0, 5]. - Choose (5, 5), resulting in [0, 0, 0], as we made all elements equals. Example 2: Input: nums = [1, 5, 9] Output: 14 Explanation: - Choose (1, 5), resulting in [0, 4, 9]. - Choose (4, 9), resulting in [0, 0, 5]. - Choose (5, 5), resulting in [0, 0, 0], as we made all elements equals. Note: - The length of nums is at most 10000. - Each element nums[i] is a positive integer in the range [1, 100000].","solution":"def min_operations_to_equal_elements(nums): Returns the minimum number of operations needed to make all elements in nums equal. Each operation chooses any two elements of the array and decreases them by 1. # The number of operations needed to make all elements equal to zero is simply the sum # of all elements in the array. return sum(nums)"},{"question":"Create a __longestPalindrome__ function that accepts a __string__ input and returns the __longest palindromic substring__ present in that string. A palindromic substring is a sequence that reads the same backward as forward. If there are multiple palindromic substrings of the same maximum length, return the one that appears first in the string. Examples ```python longestPalindrome(\\"babad\\") => \\"bab\\" or \\"aba\\" longestPalindrome(\\"cbbd\\") => \\"bb\\" longestPalindrome(\\"a\\") => \\"a\\" longestPalindrome(\\"ac\\") => \\"a\\" or \\"c\\" ``` All input will be valid strings. The input string\'s length will be at least 1.","solution":"def longestPalindrome(s: str) -> str: Function to find the longest palindromic substring in the given string. if len(s) <= 1: return s def expand_around_center(left: int, right: int) -> str: while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest_palindrome = \\"\\" for i in range(len(s)): # Odd length palindromes temp = expand_around_center(i, i) if len(temp) > len(longest_palindrome): longest_palindrome = temp # Even length palindromes temp = expand_around_center(i, i + 1) if len(temp) > len(longest_palindrome): longest_palindrome = temp return longest_palindrome"},{"question":"Given an integer array `arr[]` of size `n`, write a function to check if the array represents a contiguous subarray from another array containing all integers from `1` to `n`. An array is considered contiguous if: 1. The elements can be arranged to mirror the sequence of numbers from `1` to `n` without any gaps or duplicates. 2. The array itself must be of size `n` with elements between `1` and `n`. Your function should return `True` if the array is contiguous, and `False` otherwise. Examples: **Example 1:** ```python Input: arr = [4, 2, 1, 3] Output: True Explanation: The array contains numbers from 1 to 4 and can be rearranged to [1, 2, 3, 4]. ``` **Example 2:** ```python Input: arr = [1, 3, 2, 4, 6] Output: False Explanation: The array contains the number 6 which is outside the range of 1 to 5. ``` **Example 3:** ```python Input: arr = [7, 5, 6, 8] Output: True Explanation: The array can be rearranged to [5, 6, 7, 8], which is a contiguous sequence from 5 to 8. ``` Function Signature: ```python def is_contiguous(arr: List[int]) -> bool: pass ``` **Constraints**: - `1 <= n <= 100000` - The array `arr` will contain integers between `1` and `n + k` where `k >= 0`.","solution":"def is_contiguous(arr): Determines if the given integer array represents a contiguous subarray containing all integers from 1 to n. Parameters: arr (list): List of integers. Returns: bool: True if the array is contiguous, False otherwise. if not arr: return False min_value = min(arr) max_value = max(arr) if max_value - min_value + 1 != len(arr): return False elements_set = set(arr) return len(elements_set) == len(arr)"},{"question":"# Task Given a list of integers, `nums`, return a list of the same length where each element in the output list is the number of elements to the right of that element in the original list that are smaller than it. # Example For `nums = [3, 4, 9, 6, 1]`, the output should be `[1, 1, 2, 1, 0]`. ``` Explanation: For the first element 3, there is 1 number smaller than it to its right (1). For the second element 4, there is 1 number smaller than it to its right (1). For the third element 9, there are 2 numbers smaller than it to its right (6, 1). For the fourth element 6, there is 1 number smaller than it to its right (1). For the last element 1, there are no numbers to the right of it. Hence the result is [1, 1, 2, 1, 0]. ``` # Input/Output - `[input]` integer array `nums` A list of integers. `1 <= nums.length <= 2000` `-10000 <= nums[i] <= 10000` - `[output]` an integer array List of integers representing counts of smaller elements to the right.","solution":"def count_smaller(nums): Returns a list where each element is the count of numbers to the right of the corresponding element in nums that are smaller than it. result = [] sorted_list = [] # Helper function to insert a number in sorted order def insert(num): left, right = 0, len(sorted_list) while left < right: mid = (left + right) // 2 if sorted_list[mid] < num: left = mid + 1 else: right = mid sorted_list.insert(left, num) return left for num in reversed(nums): index = insert(num) result.append(index) return result[::-1]"},{"question":"We need a function `is_magic_square()` that takes a 2D array (a list of lists) of integers and determines whether it is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are all the same. The function should return a boolean value: `True` if the input array is a magic square and `False` otherwise. Let\'s see some cases: ```python ____ is_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) ----> True # Explanation: # - Sum of each row: 2+7+6=15, 9+5+1=15, 4+3+8=15 # - Sum of each column: 2+9+4=15, 7+5+3=15, 6+1+8=15 # - Sum of main diagonal: 2+5+8=15 # - Sum of anti-diagonal: 6+5+4=15 # Since all these sums are equal, it is a magic square. ____ is_magic_square([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) ----> False # Explanation: # - Sum of each row: 1+2+3=6, 4+5+6=15, 7+8+9=24 # - Sum of each column: 1+4+7=12, 2+5+8=15, 3+6+9=18 # - Sum of main diagonal: 1+5+9=15 # - Sum of anti-diagonal: 3+5+7=15 # Since the sums are not equal, it is not a magic square. ``` Constraints: - The input matrix will always be a square matrix (i.e., the number of rows will be equal to the number of columns). - The size of the matrix (n x n) will be at least 1 x 1 and at most 10 x 10. Enjoy it and happy coding!!","solution":"def is_magic_square(matrix): Determines if a given matrix is a magic square. Args: matrix (list of list of int): A square matrix represented as a list of lists. Returns: bool: True if the matrix is a magic square, False otherwise. n = len(matrix) # Calculate the sum of the first row as reference target_sum = sum(matrix[0]) # Check sum of each row for row in matrix: if sum(row) != target_sum: return False # Check sum of each column for col in range(n): if sum(matrix[row][col] for row in range(n)) != target_sum: return False # Check sum of main diagonal if sum(matrix[i][i] for i in range(n)) != target_sum: return False # Check sum of anti-diagonal if sum(matrix[i][n - 1 - i] for i in range(n)) != target_sum: return False return True"},{"question":"# Find the Missing Number You are given a list of `n` integers where the integers are in the range from `0` to `n` and there are no duplicates in the list. One integer from this list is removed, making the list of length `n-1`. Write a function that finds the missing integer. Examples: ```python Input: nums = [3, 0, 1] Output: 2 Input: nums = [0, 1] Output: 2 Input: nums = [9,6,4,2,3,5,7,0,1] Output: 8 ```","solution":"def find_missing_number(nums): Finds the missing number in the list. :param nums: List[int] - list of integers in the range from 0 to n with one integer missing :return: int - the missing integer n = len(nums) expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"Write a function that takes an unsorted array of integers and returns the smallest positive integer that is missing from the array. The function should have a linear time complexity and use constant extra space. For example: ``` Input: [3, 4, -1, 1] Output: 2 Input: [1, 2, 0] Output: 3 Input: [7, 8, 9, 11, 12] Output: 1 ``` **Constraint:** 1. The provided array can contain duplicates. 2. The size of the input array can be up to 100000.","solution":"def first_missing_positive(nums): Returns the smallest positive integer that is missing from the unsorted array. The function has a linear time complexity and uses constant extra space. n = len(nums) # Place each number in its right place. for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap nums[i] with nums[nums[i] - 1] nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Find the first missing positive number. for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a function that takes a string of words separated by one or more whitespace characters and returns a list of words in the reverse order of their appearance. Example: reverse_words(\\"The quick brown fox jumps over the lazy dog\\") Will return a list: [\'dog\', \'lazy\', \'the\', \'over\', \'jumps\', \'fox\', \'brown\', \'quick\', \'The\'] Assumptions: The input string will contain one or more words. Each word is composed of alphabetical characters only.","solution":"def reverse_words(string): Takes a string of words separated by one or more whitespace characters and returns a list of words in the reverse order of their appearance. words = string.split() return words[::-1]"},{"question":"You are given a matrix filled with non-negative integers. Your task is to find the minimum cost path from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. The cost of a path is the sum of the values of the cells along the path. -----Input:----- - The first line contains an integer n denoting the number of rows of the matrix. - The second line contains an integer m denoting the number of columns of the matrix. - Each of the next n lines contains m non-negative integers representing the matrix. -----Output:----- Print a single integer denoting the minimum cost to reach the bottom-right corner of the matrix from the top-left corner. -----Constraints----- - 1 leq n, m leq 1000 - 0 leq matrix value leq 10^4 -----Sample Input:----- 3 3 1 3 1 1 5 1 4 2 1 -----Sample Output:----- 7 Explanation: The path with the minimum cost is (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) with a cost of 1+1+4+2+1 = 9.","solution":"def min_cost_path(matrix): Given a matrix of non-negative integers, returns the minimum cost path from the top-left corner to the bottom-right corner. Args: matrix (list of list of int): a 2D array where each element is an integer Returns: int: the minimum cost to reach the bottom-right corner n = len(matrix) m = len(matrix[0]) # Create a cost matrix to store the minimum path cost up to each cell cost = [[0] * m for _ in range(n)] # Initialize the top-left corner cost[0][0] = matrix[0][0] # Initialize the first row (can only move right) for j in range(1, m): cost[0][j] = cost[0][j-1] + matrix[0][j] # Initialize the first column (can only move down) for i in range(1, n): cost[i][0] = cost[i-1][0] + matrix[i][0] # Fill the cost matrix for i in range(1, n): for j in range(1, m): cost[i][j] = matrix[i][j] + min(cost[i-1][j], cost[i][j-1]) return cost[-1][-1]"},{"question":"You have a string representation of a mathematical expression containing digits and the operators \'+\', \'-\', \'*\', \'/\'. The string may also contain white spaces. Your task is to write a function that evaluates the expression and returns the result as an integer. Only integer division should be performed, meaning the result should be truncated towards zero. -----Input----- The input is a single string represented as a mathematical expression. The length of the string will not be greater than 10000. -----Output----- Output a single integer which is the result of the evaluation of the expression. Example: Input: \\"3 + 2 * 2\\" Output: 7 Note: - The input expression is guaranteed to be valid and only contains non-negative integers, \'+\', \'-\', \'*\', \'/\', and possibly white space. - You should follow the standard operator precedence: multiplication and division have a higher precedence than addition and subtraction. - Division is integer division which truncates towards zero.","solution":"def evaluate_expression(expression): Evaluates a given mathematical expression and returns the result as an integer. The expression can contain digits, \'+\', \'-\', \'*\', \'/\', and white spaces. Parameters: expression (str): The mathematical expression to evaluate. Returns: int: The result of the evaluation. def apply_operator(operands, operator): b = operands.pop() a = operands.pop() if operator == \'+\': operands.append(a + b) elif operator == \'-\': operands.append(a - b) elif operator == \'*\': operands.append(a * b) elif operator == \'/\': operands.append(int(a / b)) # Use int() to ensure integer division def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 # Clean the expression by removing spaces expression = expression.replace(\' \', \'\') operands = [] operators = [] i = 0 while i < len(expression): if expression[i].isdigit(): j = i while j < len(expression) and expression[j].isdigit(): j += 1 operands.append(int(expression[i:j])) i = j else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operands, operators.pop()) operators.append(expression[i]) i += 1 while operators: apply_operator(operands, operators.pop()) return operands[0]"},{"question":"You are given a list of transactions, where each transaction is represented as a string array [sender, receiver, amount]. Implement the BankSystem class: BankSystem() Initializes the BankSystem object. void addAccount(String account, int initialBalance) Adds a new account with the given name and initial balance. boolean transfer(String sender, String receiver, int amount) Transfers the specified amount from the sender to the receiver if the sender has sufficient funds, and returns true. Otherwise, returns false. int getBalance(String account) Returns the current balance of the given account. If the account does not exist, returns -1. Example: Input: [\\"BankSystem\\",\\"addAccount\\",\\"addAccount\\",\\"transfer\\",\\"transfer\\",\\"getBalance\\",\\"getBalance\\"] [[],[\\"Alice\\",1000],[\\"Bob\\",500],[\\"Alice\\",\\"Bob\\",300],[\\"Alice\\",\\"Bob\\",800],[\\"Alice\\"],[\\"Bob\\"]] Output: [null,null,null,true,false,200,800] Explanation: BankSystem bank = new BankSystem(); bank.addAccount(\\"Alice\\", 1000); // \\"Alice\\" has 1000 balance bank.addAccount(\\"Bob\\", 500); // \\"Bob\\" has 500 balance bank.transfer(\\"Alice\\", \\"Bob\\", 300); // Returns true: Alice\'s balance is now 700, Bob\'s balance is now 800 bank.transfer(\\"Alice\\", \\"Bob\\", 800); // Returns false: Alice\'s balance is insufficient bank.getBalance(\\"Alice\\"); // Returns 200 bank.getBalance(\\"Bob\\"); // Returns 800 Constraints: - The names of the accounts will be unique strings and not exceed 50 characters. - Initial balance, and amounts involved in transfers, will be non-negative integers and not exceed 1,000,000. - At most 100,000 operations will be performed, including addAccount, transfer, and getBalance.","solution":"class BankSystem: def __init__(self): # Initializes the BankSystem object self.accounts = {} # Dictionary to hold account name and their balance def addAccount(self, account, initialBalance): self.accounts[account] = initialBalance def transfer(self, sender, receiver, amount): # Transfer function to implement account to account transfer. if sender in self.accounts and receiver in self.accounts and self.accounts[sender] >= amount: self.accounts[sender] -= amount self.accounts[receiver] += amount return True return False def getBalance(self, account): # Function to get the balance of any existing account return self.accounts.get(account, -1)"},{"question":"For a given list of integers, write a function that finds the longest subarray where the difference between the maximum and minimum elements is less than or equal to a given integer `k`. Your function should return the length of this longest subarray. Example: ```python longest_subarray([4, 6, 5, 3, 3, 1], 2) ``` Output: ```python 3 ``` In this example, `[4, 6, 5]` is the longest subarray where the difference between the maximum and minimum elements is `2`.","solution":"from collections import deque def longest_subarray(arr, k): if not arr: return 0 max_deque, min_deque = deque(), deque() left, max_length = 0, 0 for right in range(len(arr)): while max_deque and arr[max_deque[-1]] <= arr[right]: max_deque.pop() while min_deque and arr[min_deque[-1]] >= arr[right]: min_deque.pop() max_deque.append(right) min_deque.append(right) while arr[max_deque[0]] - arr[min_deque[0]] > k: left += 1 if max_deque[0] < left: max_deque.popleft() if min_deque[0] < left: min_deque.popleft() max_length = max(max_length, right - left + 1) return max_length"},{"question":"Jane has recently joined a logistics company that delivers packages across multiple cities. To determine the efficiency of the delivery routes, she needs to calculate the minimum time required to deliver packages from a central warehouse city to various destination cities. The cities are connected via bidirectional roads, each with an associated travel time. Can you help Jane determine the fastest delivery times from the warehouse to all other cities? -----Input----- The first line contains two integers, N (1 ≤ N ≤ 10^5) and M (1 ≤ M ≤ 2×10^5), representing the number of cities and the number of roads respectively. The second line contains one integer, W (1 ≤ W ≤ N), representing the city where the central warehouse is located. Each of the following M lines contains three integers u, v, and t (1 ≤ u, v ≤ N, 1 ≤ t ≤ 10^6), representing a bidirectional road connecting city u and city v with a travel time t. -----Output----- The output file will contain N lines, each with a single integer. The i-th line should contain the minimum travel time from the central warehouse city W to city i. If a city cannot be reached from the central warehouse, output -1 for that city. -----Constraints and notes----- - All cities are connected by roads directly or indirectly. - The cities are numbered from 1 to N. -----Example----- Input: 4 4 1 1 2 5 1 3 10 2 3 2 3 4 1 Output: 0 5 7 8 -----Explanation----- City 1 is the warehouse and its travel time to itself is 0. The minimum travel time from city 1 (warehouse) to city 2 is 5. The minimum travel time from city 1 (warehouse) to city 3 is 7 (using the route 1 -> 2 -> 3 with a total time of 5 + 2). The minimum travel time from city 1 (warehouse) to city 4 is 8 (using the route 1 -> 3 -> 4 with a total time of 7 + 1).","solution":"import heapq def fastest_delivery_times(N, M, W, roads): Determines the fastest delivery times from the central warehouse city W to all other cities. :param N: Number of cities :param M: Number of roads :param W: Warehouse city :param roads: List of tuples representing bidirectional roads (u, v, t) :return: List of minimum travel times from the warehouse to each city # Create adjacency list adj = {i: [] for i in range(1, N + 1)} for u, v, t in roads: adj[u].append((v, t)) adj[v].append((u, t)) # Initialize distance array with infinity distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[W] = 0 # Min heap to process the next nearest city priority_queue = [(0, W)] while priority_queue: current_distance, current_city = heapq.heappop(priority_queue) if current_distance > distances[current_city]: continue for neighbor, travel_time in adj[current_city]: distance = current_distance + travel_time if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) # Convert distances to required output format result = [distances[i] if distances[i] != float(\'inf\') else -1 for i in range(1, N + 1)] return result"},{"question":"Write a function `count_colored_shapes` that takes in three arguments: - `shapes`: a list of strings, where each string represents a shape and its color separated by a space (e.g., \\"red circle\\", \\"blue square\\"). - `target_shape`: a string representing the target shape to count (e.g., \\"circle\\"). - `target_color`: a string representing the target color to count (e.g., \\"red\\"). The function should return an integer representing the number of times the target shape with the target color appeared in the list. Examples: ```python shapes = [\\"red circle\\", \\"blue square\\", \\"red triangle\\", \\"red circle\\", \\"blue circle\\"] count_colored_shapes(shapes, \\"circle\\", \\"red\\") # should return 2 shapes = [\\"green hexagon\\", \\"yellow triangle\\", \\"yellow hexagon\\", \\"green triangle\\", \\"green square\\"] count_colored_shapes(shapes, \\"hexagon\\", \\"green\\") # should return 1 shapes = [\\"orange heart\\", \\"purple star\\", \\"orange star\\", \\"orange circle\\", \\"purple heart\\"] count_colored_shapes(shapes, \\"star\\", \\"orange\\") # should return 1 shapes = [\\"blue oval\\", \\"blue rectangle\\", \\"blue oval\\", \\"blue square\\"] count_colored_shapes(shapes, \\"circle\\", \\"blue\\") # should return 0 ``` The function signature should be: ```python def count_colored_shapes(shapes: List[str], target_shape: str, target_color: str) -> int: ```","solution":"from typing import List def count_colored_shapes(shapes: List[str], target_shape: str, target_color: str) -> int: Counts the number of times a target shape with a target color appears in the list of shapes. Parameters: - shapes: List[str] - list of strings where each string represents a shape and its color separated by a space. - target_shape: str - the target shape to count. - target_color: str - the target color to count. Returns: - int - the count of target shape with target color in the list. target = f\\"{target_color} {target_shape}\\" return shapes.count(target)"},{"question":"Given a list of integers, return a new list such that each element at index (i) of the new list is the product of all the numbers in the original list except the one at (i). For example, if the given list is ([1, 2, 3, 4, 5]), the output should be ([120, 60, 40, 30, 24]). If the given list is ([3, 2, 1]), the output should be ([2, 3, 6]). Write a function `product_except_self(lst)` that takes a list of integers `lst` as input and returns a list of products as described. Note that you are not allowed to use division in the solution.","solution":"def product_except_self(lst): Returns a list such that each element at index i is the product of all the numbers in the original list except the one at i. Division is not allowed. length = len(lst) if length == 0: return [] # Initialize lists for the prefix and suffix products prefix_products = [1] * length suffix_products = [1] * length # Calculate prefix products for i in range(1, length): prefix_products[i] = prefix_products[i - 1] * lst[i - 1] # Calculate suffix products for i in range(length - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * lst[i + 1] # Calculate the result by multiplying prefix and suffix products result = [prefix_products[i] * suffix_products[i] for i in range(length)] return result"},{"question":"As the king of a small nation, you have a rather unusual problem in managing your people. Each of your n citizens has a happiness score which is represented as an integer in an array H of length n. In order to maximize overall happiness, you want to learn how to find out the maximum possible happiness from each citizen by applying an operation over the array H in such a way that you increase the happiness scores as much as possible. You can choose any subarray of H and apply the operation inc to each element of this subarray where inc is an integer. You can perform this operation exactly once. Given the array H, find out the maximum possible sum of the happiness scores of the citizens after you perform the operation. -----Input:----- - First line of the input consists of two space-separated integers n and inc. - Second line contains n space-separated integers H[1] .. H[n] representing the initial happiness scores of the citizens. -----Output:----- In a single line, print the maximum possible sum of happiness scores after you perform the operation. -----Constraints----- - 1 leq n leq 1000 - 1 leq inc leq 10^9 - 1 leq H[i] leq 10^9 -----Sample Input:----- 5 10 1 2 3 4 5 -----Sample Output:----- 65 -----Explanation:----- By selecting the entire array to apply the operation, the happiness scores become -> 11 12 13 14 15. The sum of happiness scores -> 11 + 12 + 13 + 14 + 15 = 65.","solution":"def maximize_happiness(n, inc, H): This function returns the maximum possible sum of happiness scores after performing the operation on array H. Parameters: n (int): Number of citizens. inc (int): The increase value that can be applied exactly once to a subarray. H (list): List of initial happiness scores. Returns: int: Maximum possible sum of happiness scores. # Calculate the initial sum of the happiness scores initial_sum = sum(H) # To maximize the sum, we apply the increment to all elements return initial_sum + n * inc"},{"question":"Write a function that takes two non-empty arrays of integers and returns a new array containing their intersection. Each element in the resulting array should appear as many times as it shows in both arrays. The order of elements in the result can be any order. Example 1: Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2,2] Example 2: Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [4,9] Constraints: - 1 <= nums1.length, nums2.length <= 10^3 - 0 <= nums1[i], nums2[i] <= 10^5","solution":"def intersect(nums1, nums2): Returns the intersection of two arrays including duplicate elements. from collections import Counter # Use Counter to count frequencies of elements in both arrays counter1 = Counter(nums1) counter2 = Counter(nums2) # Find the intersection of the two counters intersection = [] for num in counter1: if num in counter2: intersection.extend([num] * min(counter1[num], counter2[num])) return intersection"},{"question":"You are tasked with creating a series of functions to generate different types of arrays. ...fibonacci sequence An array containing the first `n` Fibonacci numbers. ...powers of 2 A sequence of numbers starting from `2^0` up to `2^(n-1)`. ...arithmetic progression An arithmetic progression with the initial value `a` and common difference `d`. ...factorial sequence An array containing the factorials of numbers from `1` to `n`. Note: Each of these methods should take as their first parameter an integer denoting the length of the array to be returned.","solution":"def fibonacci_sequence(n): Returns an array containing the first n Fibonacci numbers. if n <= 0: return [] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence[:n] def powers_of_2_sequence(n): Returns an array containing the first n powers of 2. return [2**i for i in range(n)] def arithmetic_progression_sequence(n, a, d): Returns an array containing an arithmetic progression with n terms, starting from a with a common difference d. return [a + i * d for i in range(n)] def factorial_sequence(n): Returns an array containing the factorials of numbers from 1 to n. def factorial(num): if num == 0 or num == 1: return 1 return num * factorial(num - 1) return [factorial(i) for i in range(1, n + 1)]"},{"question":"Given an array of integers, determine the shortest subarray length that, when sorted, will result in the entire array being sorted in non-decreasing order. For example: ```python findShortestSubarray([2, 6, 4, 8, 10, 9, 15]) = 5 # Sort the subarray [6, 4, 8, 10, 9] to get the entire array sorted: # The sorted array is [2, 4, 6, 8, 9, 10, 15]. findShortestSubarray([1, 2, 3, 4]) = 0 # The array is already sorted, no need to sort any subarray, return 0. findShortestSubarray([1, 3, 2, 2, 2]) = 4 # Sort the subarray [3, 2, 2, 2] to get the entire array sorted: # The sorted array is [1, 2, 2, 2, 3]. ``` If the array is already sorted, return 0. More examples will be provided in the test cases. Good luck!","solution":"def findShortestSubarray(nums): Determine the shortest subarray length that, when sorted, will result in the entire array being sorted in non-decreasing order. n = len(nums) if n < 2: return 0 # Find the left boundary left = 0 while left < n - 1 and nums[left] <= nums[left + 1]: left += 1 if left == n - 1: # The array is already sorted return 0 # Find the right boundary right = n - 1 while right > 0 and nums[right] >= nums[right - 1]: right -= 1 # Find the min and max in the unsorted subarray subarray_max = float(\'-inf\') subarray_min = float(\'inf\') for i in range(left, right + 1): subarray_max = max(subarray_max, nums[i]) subarray_min = min(subarray_min, nums[i]) # Extend the left boundary while left > 0 and nums[left - 1] > subarray_min: left -= 1 # Extend the right boundary while right < n - 1 and nums[right + 1] < subarray_max: right += 1 return right - left + 1"},{"question":"Bill is organizing a large conference and needs to create unique badges for each attendee. Each badge should prominently display the attendee\'s full name and a unique identifier number. The unique identifier numbers start from 1 and increase sequentially. # The Challenge Given a list of full names, write a function that generates a badge for each attendee. Each badge should be formatted as \\"Full_Name - ID\\", where \\"Full_Name\\" is the attendee\'s full name and \\"ID\\" is their unique identifier starting from 1. Your function should take a list of strings `names` as input and return a list of formatted badge strings. Input - A list of strings `names` where each string is a full name (e.g., [\'John Doe\', \'Jane Smith\']). Output - A list of strings where each string is formatted as \\"Full_Name - ID\\" (e.g., [\'John Doe - 1\', \'Jane Smith - 2\']). # Example ```python def generate_badges(names): # Your code here print(generate_badges([\'John Doe\', \'Jane Smith\'])) # Output: [\'John Doe - 1\', \'Jane Smith - 2\'] ```","solution":"def generate_badges(names): Generates a list of badges with unique identifiers for each attendee. Parameters: names (list): List of full names Returns: list: List of formatted badge strings in the format \\"Full_Name - ID\\" return [f\\"{name} - {i+1}\\" for i, name in enumerate(names)]"},{"question":"Write a function that takes an array of integers and returns the sum of the integers that are prime numbers. If the array contains no prime numbers, the function should return 0. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. For the purposes of this exercise, you may assume that the array will only contain integers greater than or equal to 0. # Examples ``` sumOfPrimes([1, 2, 3, 4, 5]) ==> 10 sumOfPrimes([0, 1, 4, 6, 8]) ==> 0 sumOfPrimes([7, 11, 13, 17]) ==> 48 sumOfPrimes([10, 2, 3, 7, 5]) ==> 17 ``` # Note To determine if a number `n` is prime, you can check for divisors from 2 up to the square root of `n`. If `n` is not divisible by any of these, then it is prime.","solution":"import math def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return False return True def sumOfPrimes(numbers): Returns the sum of the prime numbers in the list. return sum(num for num in numbers if is_prime(num))"},{"question":"A well-known museum is organizing an exhibition and they want to form a display of certain valuable historical items. Each item has a particular historical value associated with it. Additionally, each item is stored in a box with a particular weight. The museum wants to ensure that the total weight of the boxes on display does not exceed a given limit, while maximizing the historical value of the display. You are given two arrays, each of length N. The first array contains the weights of the boxes, and the second array contains the historical values of the items. You are also given an integer W representing the maximum total weight the display can hold. Write a program to find the maximum total historical value of the items that can be included in the display without exceeding the given weight limit W. ----- Input: ----- The first line of input contains an integer T, denoting the number of test cases. Each test case follows with three lines: - The first line contains an integer N, the number of items. - The second line contains N integers, representing the weights of the boxes. - The third line contains N integers, representing the historical values of the items. - The fourth line contains the integer W, the maximum allowable weight of the display. ----- Output: ----- For each test case, output the maximum total historical value of the display that does not exceed the weight limit W. ----- Constraints: ----- - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 100 - 1 ≤ weight_i ≤ 1000 - 1 ≤ value_i ≤ 1000 - 1 ≤ W ≤ 10000 ----- Example: ----- Input: 2 4 1 3 4 5 1 4 5 7 7 3 2 3 4 3 4 5 5 Output: 9 7 ----- Explanation: ----- Case #1: The optimal choice is to select items with weights 3 and 4, which gives a total weight of 7 and a total historical value of 4 + 5 = 9. Case #2: The optimal choice is to select items with weights 2 and 3, which gives a total weight of 5 and a total historical value of 3 + 4 = 7.","solution":"def knapsack(values, weights, W): N = len(weights) dp = [[0] * (W + 1) for _ in range(N + 1)] for i in range(1, N + 1): for w in range(W + 1): if weights[i-1] <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w - weights[i-1]] + values[i-1]) else: dp[i][w] = dp[i-1][w] return dp[N][W] def solve_exhibitions(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0].strip()) index = 1 results = [] for _ in range(T): N = int(lines[index].strip()) weights = list(map(int, lines[index + 1].strip().split())) values = list(map(int, lines[index + 2].strip().split())) W = int(lines[index + 3].strip()) max_value = knapsack(values, weights, W) results.append(max_value) index += 4 return results"},{"question":"Create a function `compress_ranges` that takes a sorted list of integers and returns a string that represents the ranges of consecutive numbers. The output string should represent each range of consecutive numbers in the input list with a start and end number separated by a dash, and individual numbers that do not fall within a range of consecutive numbers should be represented as such. Two or more consecutive numbers form a range. The ranges or individual numbers should be separated by commas in the resulting string. Edge cases you should consider: - The input list is empty, return an empty string. - The input list contains only one number, return that number as a string. Examples ```python compress_ranges([0, 1, 2, 4, 5, 7]) # \\"0-2,4-5,7\\" compress_ranges([1, 2, 3, 6, 7, 9]) # \\"1-3,6-7,9\\" compress_ranges([3, 4, 5, 8, 10, 11, 12]) # \\"3-5,8,10-12\\" compress_ranges([1]) # \\"1\\" compress_ranges([]) # \\"\\" ```","solution":"def compress_ranges(lst): Takes a sorted list of integers and returns a string that represents the ranges of consecutive numbers. if not lst: return \\"\\" ranges = [] start = lst[0] end = start for num in lst[1:]: if num == end + 1: end = num else: if start == end: ranges.append(f\\"{start}\\") else: ranges.append(f\\"{start}-{end}\\") start = num end = start if start == end: ranges.append(f\\"{start}\\") else: ranges.append(f\\"{start}-{end}\\") return \\",\\".join(ranges)"},{"question":"Given an array of integers, return a new array such that each element at index `i` of the new array is the product of all the numbers in the original array except the one at `i`. For example, if the input array is `[1, 2, 3, 4, 5]`, the expected output would be `[120, 60, 40, 30, 24]`. Notice that `120` is the result of multiplying `2 * 3 * 4 * 5`, `60` is the result of multiplying `1 * 3 * 4 * 5`, and so on. The input array will contain only integers, and each integer will be unique and non-zero. Good luck! If you like this problem, please try: [Array of Array Products](https://www.geeksforgeeks.org/a-product-array-puzzle/) [Product of Array Except Self](https://leetcode.com/problems/product-of-array-except-self/)","solution":"def product_except_self(nums): Returns a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. length = len(nums) answer = [0]*length # Create an array \'left_products\' to contain the product of all elements to the left of each index left_products = [1]*length for i in range(1, length): left_products[i] = nums[i - 1] * left_products[i - 1] # Create an array \'right_products\' to contain the product of all elements to the right of each index right_products = [1]*length for i in range(length - 2, -1, -1): right_products[i] = nums[i + 1] * right_products[i + 1] # Constructing the answer array for i in range(length): answer[i] = left_products[i] * right_products[i] return answer"},{"question":"You are given a list of non-negative integers representing the amount of money in houses arranged in a circle. Determine the maximum amount of money you can rob without alerting the police, given that adjacent houses cannot be robbed on the same night, and since the houses are in a circle, the first and last house are considered adjacent. Write a function `rob` that takes in a list of integers, `nums`, and returns an integer representing the maximum amount of money you can rob. Examples: ```python rob([2,3,2]) => 3 rob([1,2,3,1]) => 4 rob([0]) => 0 ``` Constraints: - The length of `nums` will be in the range `[1, 1000]`. - Each house\'s money amount will be in the range `[0, 1000]`. Note: - You cannot rob the first and last house at the same time. - To solve this problem, consider splitting the problem into two scenarios: either rob the first house and not the last, or rob the last house and not the first, then take the maximum of the two scenarios.","solution":"def rob(nums): if len(nums) == 1: return nums[0] def rob_linear(houses): prev2, prev1 = 0, 0 for money in houses: curr = max(prev1, prev2 + money) prev2 = prev1 prev1 = curr return prev1 return max(rob_linear(nums[:-1]), rob_linear(nums[1:]))"},{"question":"The company XYZ is working on a new software tool that involves generating string patterns. To help with testing, you are asked to write a function that checks if a given string contains all the characters from another string at least once, regardless of order. -----Input:----- - The first line contains an integer T representing the number of test cases. - Each test case consists of two strings, S and P, separated by a space. -----Output:----- For each test case, output YES if string S contains all characters of string P at least once. Otherwise, output NO. -----Constraints----- - 1 leq T leq 10^5 - 1 leq |S|, |P| leq 10^3 - Both strings S and P consist of lowercase English letters only. -----Sample Input:----- 3 abcdef bca hello world example ample -----Sample Output:----- YES NO YES","solution":"def contains_all_characters(test_cases): results = [] for s, p in test_cases: from collections import Counter s_counter = Counter(s) p_counter = Counter(p) if all(s_counter[char] >= count for char, count in p_counter.items()): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # function to process the input and output def process_input_output(input_lines): T = int(input_lines[0]) test_cases = [line.split() for line in input_lines[1:T+1]] results = contains_all_characters(test_cases) return results"},{"question":"You are given a string S consisting of lowercase alphabets. The task is to check if the string can be converted into a palindrome by removing at most one character. A palindrome is a string that reads the same backward as forward. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each of the next T lines contains a single string S. -----Output----- For each test case, output \\"YES\\" (without quotes) if the string can be converted to a palindrome by removing at most one character. Otherwise, print \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 105 - The sum of the lengths of all strings in a single file won\'t exceed 105 -----Subtasks----- Subtask #1 (30 points) - 1 ≤ T ≤ 10 - 1 ≤ |S| ≤ 103 Subtask #2 (70 points) - original constraints -----Example----- Input 3 abca racecar abc Output: YES YES NO -----Explanation----- Example case 1. By removing the character \'c\' at index 2, we get the string \\"aba\\" which is a palindrome. Example case 2. The string \\"racecar\\" is already a palindrome, so no need to remove any character. Example case 3. There is no way to remove just one character to make the string \\"abc\\" a palindrome.","solution":"def can_form_palindrome(string): Returns YES if the string can be converted to a palindrome by removing at most one character, otherwise NO. def is_palindrome_range(s, i, j): return all(s[k] == s[j-k+i] for k in range(i, j)) def can_be_palindrome(s): l, h = 0, len(s) - 1 while l < h: if s[l] != s[h]: return is_palindrome_range(s, l+1, h) or is_palindrome_range(s, l, h-1) l += 1 h -= 1 return True return can_be_palindrome(string) def process_test_cases(test_cases): results = [] for test_case in test_cases: results.append(\\"YES\\" if can_form_palindrome(test_case) else \\"NO\\") return results"},{"question":"Given a string containing digits from 0 to 9, write a function to return all possible valid IP addresses that can be obtained by inserting dots into the string. A valid IP address consists of four integers (each ranging from 0 to 255) separated by periods. Each integer is written without leading zeros, except for the number 0 itself which is always valid. You may not insert more than three periods into the string. For example: - Given \\"25525511135\\", the function should return [\\"255.255.11.135\\", \\"255.255.111.35\\"]. - Given \\"0000\\", the function should return [\\"0.0.0.0\\"]. - Given \\"101023\\", the function should return [\\"1.0.10.23\\", \\"1.0.102.3\\", \\"10.1.0.23\\", \\"10.10.2.3\\", \\"101.0.2.3\\"].","solution":"def is_valid_segment(segment): Check if the given segment is a valid segment of an IP address. return 0 <= int(segment) <= 255 and str(int(segment)) == segment def restore_ip_addresses(s): Returns all possible valid IP addresses from the given string. def backtrack(start, path): if len(path) == 4 and start == len(s): result.append(\'.\'.join(path)) return if len(path) == 4 or start == len(s): return for length in range(1, 4): if start + length <= len(s): segment = s[start:start + length] if is_valid_segment(segment): path.append(segment) backtrack(start + length, path) path.pop() result = [] backtrack(0, []) return result"},{"question":"You are given an array consisting of N integers and a set of Q queries. Each query can be one of two types: 1. **Add Operation**: Given an integer X, add X to every element in the array. 2. **Subarray Sum Operation**: Given two integers L and R, compute the sum of the array elements between indices L and R (inclusive). You need to process all the queries and output the results of the subarray sum operations. -----Input:----- - The first line contains an integer T denoting the number of test cases. - The first line of each test case contains two integers N and Q. - The second line contains N space-separated integers, A_1, A_2, ..., A_N denoting the elements of the array. - The next Q lines describe the queries, and each query is in one of the following two formats: - \\"1 X\\" (Add Operation): Add X to every element in the array. - \\"2 L R\\" (Subarray Sum Operation): Compute the sum of the array elements between the indices L and R. -----Output:----- - For each subarray sum operation, output the sum on a new line. -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 100000 - 1 leq Q leq 100000 - 1 leq A_i leq 10^9 - 1 leq X leq 10^9 - 1 leq L leq R leq N - The sum of N over all test cases does not exceed 200000 - The sum of Q over all test cases does not exceed 200000 -----Sample Input----- 1 5 3 1 2 3 4 5 1 3 2 1 3 2 2 5 -----Sample Output----- 12 20 -----Explanation----- - After the first query, the array becomes [4, 5, 6, 7, 8] by adding 3 to each element. - The second query asks for the sum of elements from index 1 to 3 of the modified array, resulting in 4 + 5 + 6 = 15. - The third query asks for the sum of elements from index 2 to 5 of the modified array, resulting in 5 + 6 + 7 + 8 = 26.","solution":"def process_queries(num_cases, cases): results = [] for case in cases: N, Q = case[\'N\'], case[\'Q\'] array = case[\'array\'] queries = case[\'queries\'] add_total = 0 prefix_sum = [0] * (N + 1) for i in range(1, N+1): prefix_sum[i] = prefix_sum[i-1] + array[i-1] for query in queries: if query[0] == 1: add_total += query[1] elif query[0] == 2: L, R = query[1], query[2] sum_result = prefix_sum[R] - prefix_sum[L-1] + (R - L + 1) * add_total results.append(sum_result) return results def parse_input(input_string): input_lines = input_string.strip().split(\\"n\\") current_line = 0 T = int(input_lines[current_line]) current_line += 1 cases = [] for _ in range(T): N, Q = map(int, input_lines[current_line].split()) current_line += 1 array = list(map(int, input_lines[current_line].split())) current_line += 1 queries = [] for _ in range(Q): query = list(map(int, input_lines[current_line].split())) queries.append(query) current_line += 1 cases.append({ \'N\': N, \'Q\': Q, \'array\': array, \'queries\': queries }) return T, cases"},{"question":"Write a function that takes an array of integers and returns an array containing the sum of each pair of adjacent integers. If the input array has a length of 1 or less, return an empty array. Example: `[4, 2, 6, 3]` should return `[6, 8, 9]`","solution":"def sum_adjacent_pairs(arr): Given an array of integers, return an array containing the sum of each pair of adjacent integers. If the input array has a length of 1 or less, return an empty array. :param arr: List[int] - the input array of integers :return: List[int] - the array containing the sum of each pair of adjacent integers if len(arr) <= 1: return [] return [arr[i] + arr[i + 1] for i in range(len(arr) - 1)]"},{"question":"You are given a 2D grid consisting of land and water cells. The grid is represented as a list of strings, where \'X\' represents land and \'0\' represents water. Your task is to write a function `find_max_area_of_islands` that finds the largest connected area of land in the grid. Connected land cells are defined as groups of land cells that are connected horizontally or vertically (not diagonally). Input Your function will receive a 2D list of strings. Output Your function should return the size of the largest connected area of land. Example ```python grid = [ \\"X0X0\\", \\"X0XX\\", \\"0000\\" ] find_max_area_of_islands(grid) # 3 ``` Function Signature ```python def find_max_area_of_islands(grid: List[str]) -> int: pass ``` Other Technical Details A helper function is preloaded to help visualize the grid structure; you can call this function with test inputs. Constraints * Grid dimensions (width and height) will not exceed 50. * Inputs will always be valid. * The grid will contain at least one \'X\'. Test Suite: 10 fixed tests and 100 randomly-generated tests","solution":"from typing import List def find_max_area_of_islands(grid: List[str]) -> int: if not grid: return 0 max_area = 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == \'0\' or visited[r][c]: return 0 visited[r][c] = True area = 1 # Check all four possible directions area += dfs(r+1, c) area += dfs(r-1, c) area += dfs(r, c+1) area += dfs(r, c-1) return area for r in range(rows): for c in range(cols): if grid[r][c] == \'X\' and not visited[r][c]: max_area = max(max_area, dfs(r, c)) return max_area"},{"question":"# Tasks Write a function `schedule_meeting(meetings, new_meeting)` that determines if a new meeting time can fit into an existing schedule without overlapping with other meetings. Given: 1. A list of tuples, `meetings`, where each tuple contains two strings representing the start and end time of a meeting in 24-hour format (e.g., `(\\"14:00\\", \\"15:00\\")`). 2. A tuple, `new_meeting`, representing the start and end time of the new meeting you want to schedule in the same format. Your function should return: - `True` if the new meeting can be scheduled without conflicting with existing meetings. - `False` otherwise. Constraints - Time slots are in `HH:MM` format, where `HH` is two digits from 00 to 23, and `MM` is two digits from 00 to 59. - Both start and end times are inclusive. - Meetings may not necessarily be sorted in any order. Example **Input:** ```python meetings = [(\\"09:00\\", \\"10:00\\"), (\\"11:00\\", \\"12:00\\"), (\\"13:00\\", \\"14:00\\")] new_meeting = (\\"10:30\\", \\"11:30\\") ``` **Output:** ```python False ``` Explanation: The new meeting overlaps with the second meeting in the list, so it cannot be scheduled. **Input:** ```python meetings = [(\\"09:00\\", \\"10:00\\"), (\\"11:00\\", \\"12:00\\"), (\\"13:00\\", \\"14:00\\")] new_meeting = (\\"10:00\\", \\"11:00\\") ``` **Output:** ```python True ``` Explanation: The new meeting can be scheduled as it ends exactly when the next meeting starts. Function Signature ```python def schedule_meeting(meetings, new_meeting): pass ```","solution":"def convert_to_minutes(time_str): Helper function to convert time \'HH:MM\' to minutes since midnight. hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes def schedule_meeting(meetings, new_meeting): Determines if a new meeting can be scheduled without conflicting existing meetings. Parameters: meetings (list of tuple): List of existing meetings with start and end times in \'HH:MM\' format. new_meeting (tuple): New meeting\'s start and end time in \'HH:MM\' format. Returns: bool: True if the new meeting can be scheduled without conflicts, False otherwise. new_start, new_end = map(convert_to_minutes, new_meeting) for meeting in meetings: start, end = map(convert_to_minutes, meeting) # Check for overlap if not (new_end <= start or new_start >= end): return False return True"},{"question":"# Description You are given a string with a mix of numeric digits and alphabetic characters. Your task is to extract contiguous numeric digits and contiguous alphabetic characters as separate groups, then sort these groups individually before recombining them into a single string. # Constraints - The input string will not contain any spaces. - All characters in the input string will be either numeric digits (0-9) or lowercase alphabetic characters (a-z). # Steps 1. Identify contiguous groups of numeric digits and alphabetic characters in the input string. 2. Sort each group individually: - Numeric groups should be sorted in ascending order. - Alphabetic groups should be sorted in alphabetical order. 3. Recombine the sorted groups in the same order they appeared in the original string. # Input A single string consisting of numeric digits and lowercase alphabetic characters. Examples: ``` \\"ab123cde456\\" \\"987zxy123ab\\" \\"abc456def123\\" ``` # Output A single string where each group is sorted as described. Examples: ``` \\"ab123cde456\\" -> \\"ab123cde456\\" \\"987zxy123ab\\" -> \\"789xyz123ab\\" \\"abc456def123\\" -> \\"abc456def123\\" ``` # Example Let\'s go through an example step-by-step. ``` Input: \\"a2c3b1\\" Step 1. Identify groups: [\\"a\\", \\"2\\", \\"c\\", \\"3\\", \\"b\\", \\"1\\"] Step 2. Sort groups: [\\"a\\", \\"2\\", \\"c\\", \\"3\\", \\"b\\", \\"1\\"] Step 3. Recombine: \\"a2c3b1\\" Output: \\"a2c3b1\\" ``` Note: In this example, no groups needed sorting as they were all single characters. In more complex cases with longer groups, each group should be sorted as described. # Function Signature The function signature will be: ```python def sort_and_recombine(s: str) -> str: ```","solution":"import re def sort_and_recombine(s: str) -> str: Extracts contiguous numeric digits and contiguous alphabetic characters, sorts each group individually, and recombines them into a single string. Parameters: s (str): The input string containing numeric digits and alphabetic characters. Returns: str: The string with each group sorted and recombined. # Find all groups of either digits or letters groups = re.findall(r\'d+|D+\', s) # Sort each group individually sorted_groups = [\'\'.join(sorted(group)) for group in groups] # Recombine sorted groups into a single string return \'\'.join(sorted_groups)"},{"question":"Create Your Own Magical Design! You have recently become a powerful software wizard, capable of performing coding magic. To showcase your skills, you decided to create a mesmerizing design that illuminates on the screen. Draw a diamond pattern using asterisks (\'*\') to impress your fellow wizards at the Software Wizards\' Guild. -----Input:----- Input will be a single integer n which represents the number of rows in the top half of the diamond (excluding the middle row). -----Output:----- Print the diamond pattern with 2 times n + 1 rows. Each row should contain spaces and asterisks to form a centered diamond. -----Constraints----- - 1 leq n leq 100 -----Sample Input:----- 3 -----Sample Output:----- * *** ***** ******* ***** *** * ---Explanation--- Each row of the diamond is centered, and the middle row contains 2 times n + 1 asterisks. The top half has increasing numbers of asterisks, and the bottom half mirrors the top half.","solution":"def draw_diamond(n): Draws a diamond pattern with 2*n + 1 rows. Args: n (int): The number of rows in the top half of the diamond excluding the middle row. Returns: None: Prints the diamond pattern directly. rows = 2 * n + 1 max_width = 2 * n + 1 for i in range(n): num_asterisks = 2 * i + 1 spaces = (max_width - num_asterisks) // 2 print(\' \' * spaces + \'*\' * num_asterisks) print(\'*\' * max_width) for i in range(n - 1, -1, -1): num_asterisks = 2 * i + 1 spaces = (max_width - num_asterisks) // 2 print(\' \' * spaces + \'*\' * num_asterisks)"},{"question":"You are given two strings `s1` and `s2` of the same length, consisting of lowercase English letters. A move consists of selecting a character in `s1` and a character in `s2` and swapping them. Your goal is to determine the minimum number of moves required to make the two strings identical. If it is not possible to make the strings identical, return -1. -----Input----- The first line contains a single integer t (1 leq t leq 100): the number of test cases. The description of the test cases follows. Each of the next t lines contains two space-separated strings s1 and s2 (1 leq |s1| = |s2| leq 1000), representing a test case. -----Output----- For each test case, print a single integer: the minimum number of moves required to make `s1` and `s2` identical, or -1 if it is not possible. -----Example----- Input 3 abcd bcda ab ab aaa aaa Output 4 0 0 -----Note----- In the first test case, you can swap the characters as follows to make the two strings identical: 1. Swap `a` in `s1` with `b` in `s2`, resulting in `bcda` and `abcd`. 2. Swap `b` in `s1` with `c` in `s2`, resulting in `cbda` and `abdc`. 3. Swap `c` in `s1` with `d` in `s2`, resulting in `dbca` and `abcd`. 4. Swap `d` in `s1` with `a` in `s2`, resulting in `abcd` and `abcd`. In the second test case, both strings are already identical, so no swaps are needed. In the third test case, both strings are already identical, so no swaps are needed.","solution":"def min_swaps_to_make_identical(t, test_cases): Returns the minimum number of swaps required to make two strings identical or -1 if it is not possible. results = [] for s1, s2 in test_cases: if sorted(s1) != sorted(s2): # It\'s not possible to make strings identical if they don\'t have the same set of characters results.append(-1) continue # Track the positions where s1 and s2 differ different_indices = [i for i in range(len(s1)) if s1[i] != s2[i]] # The number of swaps needed is half of the number of differences # Each swap reduces the number of differences by 2 results.append(len(different_indices)) return results"},{"question":"=====Problem Statement===== The provided code stub reads an integer, n, from STDIN. Add logic to print the factorial of n. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n, and is denoted by n!. =====Example===== n = 5 The factorial of 5 is 5*4*3*2*1 = 120. Print: 120 =====Input Format===== A single integer n, where 0 <= n <= 12. =====Output Format===== Print a single line showing the factorial of the given integer number n.","solution":"def factorial(n): Returns the factorial of the non-negative integer n. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"# Task Write a function to validate if a given string is a correct passphrase. The input of the function is a string containing the passphrase. The function should return `True` if the passphrase is valid according to the rules below, otherwise return `False`. # Rules 1. The passphrase must contain at least 8 characters. 2. It must contain at least one uppercase letter. 3. It must contain at least one lowercase letter. 4. It must contain at least one numeric digit. 5. It must contain at least one special character from this set: `!@#%^&*()-+`. # Input * A string `passphrase` with a length ranging from 1 to 1000 characters. # Output * `True` if the passphrase is valid. * `False` otherwise.","solution":"import re def is_valid_passphrase(passphrase): Check if the given passphrase is valid based on the given rules. :param passphrase: str :return: bool if len(passphrase) < 8: return False has_upper = re.search(r\'[A-Z]\', passphrase) has_lower = re.search(r\'[a-z]\', passphrase) has_digit = re.search(r\'d\', passphrase) has_special = re.search(r\'[!@#%^&*()-+]\', passphrase) return bool(has_upper and has_lower and has_digit and has_special)"},{"question":"Calculating Average Age - Error Handling #7 Oh no! Sarah\'s function to calculate the average age of a group is giving errors when the list of ages is empty. Her goal is to return the average age, but if there are no ages provided, it should return 0. Fix Sarah\'s function to handle this case appropriately and ensure it works correctly for any input. Return the average age as a floating-point number rounded to two decimal places, or return 0 if the list is empty.","solution":"def average_age(ages): Returns the average age of a list of ages, rounded to two decimal places. If the list is empty, returns 0. if not ages: return 0 return round(sum(ages) / len(ages), 2)"},{"question":"Write a function that takes a string as input and returns a new string where each character in the original string is replaced with the next character in the alphabet. The replacement should be case-sensitive, meaning \'a\' should become \'b\', \'z\' should become \'a\', \'A\' should become \'B\', and \'Z\' should become \'A\'. Spaces and non-alphabet characters should remain the same. For example: ```python next_alphabet(\'Hello World!\') # returns \\"Ifmmp Xpsme!\\" next_alphabet(\'Zebra\') # returns \\"Afcsb\\" next_alphabet(\'Python-3.8\') # returns \\"Qzuipo-3.8\\" ``` Implement the function with the following signature: ```python def next_alphabet(s: str) -> str: ```","solution":"def next_alphabet(s: str) -> str: def shift_char(c): if \'a\' <= c <= \'z\': return \'a\' if c == \'z\' else chr(ord(c) + 1) elif \'A\' <= c <= \'Z\': return \'A\' if c == \'Z\' else chr(ord(c) + 1) return c return \'\'.join(shift_char(c) for c in s)"},{"question":"You are a park planner and you have a rectangular park represented by a n times m grid. Each cell in the grid can either be a tree (denoted by \'T\') or a grassland (denoted by \'G\'). Your task is to maximize the number of distinct areas where visitors can enjoy the tree scenery. A distinct area is defined as a connected group of tree cells. Two tree cells are considered connected if they share a side (north, south, east, or west). Given the grid representing the park, you must determine the number of distinct tree areas in the park. **Input:** - The first line contains a single integer k (1 le k le 10) denoting the number of test cases. - Each test case begins with two integers n and m (1 le n, m le 100) denoting the dimensions of the grid. - The next n lines each contain m characters where each character is either \'T\' (for tree) or \'G\' (for grassland). **Output:** - For each test case, print a single integer: the number of distinct tree areas in the park. **Example:** ``` Input 2 4 5 TTGGT TGGTT GGTGG TTTGG 3 3 GGG GTG GGG Output 3 1 ``` **Explanation:** In the first test case: - The grid is: ``` TTGGT TGGTT GGTGG TTTGG ``` There are three distinct tree areas: 1. Area 1: the upper left corner `TT` and the tree below it. 2. Area 2: the trees in the top right corner `T` 3. Area 3: the bottom left corner `TTT`. In the second test case: - The grid is: ``` GGG GTG GGG ``` There is only one distinct tree area: the single tree in the center.","solution":"def num_distinct_areas(k, test_cases): def dfs(grid, visited, x, y, n, m): stack = [(x, y)] while stack: cx, cy = stack.pop() if 0 <= cx < n and 0 <= cy < m and not visited[cx][cy] and grid[cx][cy] == \'T\': visited[cx][cy] = True stack.append((cx+1, cy)) stack.append((cx-1, cy)) stack.append((cx, cy+1)) stack.append((cx, cy-1)) results = [] for case in test_cases: n, m, grid = case visited = [[False for _ in range(m)] for _ in range(n)] distinct_areas = 0 for i in range(n): for j in range(m): if grid[i][j] == \'T\' and not visited[i][j]: dfs(grid, visited, i, j, n, m) distinct_areas += 1 results.append(distinct_areas) return results"},{"question":"You are given a list of integers, N, that represents scores of students in a test. The task is to determine the second highest score from the list and return it. If all scores are equal or there is only one student, return -1. Write a function `second_highest_score(scores)` that takes a list of integers `scores` and returns the second highest score or -1 if it doesn\'t exist. **Constraints:** - The input list will contain at least one integer and at most 1000 integers. - The scores will be between 0 and 100 inclusive. **Example:** ```python second_highest_score([50, 85, 85, 70]) -> 70 second_highest_score([90, 90, 55, 55, 55]) -> 55 second_highest_score([100, 100, 100]) -> -1 second_highest_score([42]) -> -1 ``` **Notes:** - The returned score should be an integer. - Make sure to handle edge cases like all scores being the same or having only one score in the list.","solution":"def second_highest_score(scores): Returns the second highest score from the list of scores, or -1 if it doesn\'t exist. if len(scores) < 2: return -1 unique_scores = list(set(scores)) if len(unique_scores) < 2: return -1 unique_scores.sort(reverse=True) return unique_scores[1]"},{"question":"Given a string containing several file paths, filter out and return only the paths that point to a file in a given directory. Each file path in the string is separated by a newline character (\'n\'). Your function should take two arguments: - A string containing multiple file paths. - A string representing the target directory path. The function should return a list of file paths that are directly under the specified directory. Note that the target directory path should be matched exactly, and subdirectories of the target directory should not be included. # Example: ``` file_paths = \\"/home/user/docs/file1.txtn/home/user/docs/file2.txtn/home/user/docs/subdir/file3.txtn/home/user/music/song.mp3\\" target_dir = \\"/home/user/docs\\" filtered_paths = filter_file_paths(file_paths, target_dir) print(filtered_paths) ``` # Output: ``` [\'/home/user/docs/file1.txt\', \'/home/user/docs/file2.txt\'] ``` # Notes: - The input string will always contain valid file paths. - The input string may contain both files and directories. - Paths in the input string will be formatted using forward slashes (\'/\') for directory separation. - The target directory path will never be an empty string.","solution":"def filter_file_paths(file_paths, target_dir): Returns a list of file paths that are directly under the specified directory. :param file_paths: A string containing multiple file paths separated by newline characters. :param target_dir: A string representing the target directory path. :return: A list of file paths that are directly under the target directory. paths_list = file_paths.split(\'n\') filtered_paths = [path for path in paths_list if path.startswith(target_dir + \'/\') and len(path[len(target_dir) + 1:].split(\'/\')) == 1] return filtered_paths"},{"question":"You are working as a software developer for a bike rental company. One of your tasks is to implement a feature that determines if a bike can be rented out or not. Each bike is available only at specific times during the day, and each rental request specifies a start time and an end time. Write a function that verifies whether a given set of rental requests can be fulfilled based on the availability of bikes. The rental requests and bike availability are provided in a list of tuples format, where each tuple contains two integers representing the start and end times respectively. A bike can only be rented if the requested rental start and end times fit entirely within one of its availability periods. Implement the function `can_rent_bike` that accepts two arguments: - `availabilities` - a list of tuples of two integers (start time and end time) representing the availability periods of the bikes. - `requests` - a list of tuples of two integers (start time and end time) representing the rental requests. The function should return a list of booleans indicating whether each rental request can be fulfilled (`True`) or not (`False`). -----Function Signature----- ```python def can_rent_bike(availabilities: List[Tuple[int, int]], requests: List[Tuple[int, int]]) -> List[bool]: ``` -----Input----- - The first line contains the single integer N (1 ≤ N ≤ 100) — the number of availability periods. - The next N lines contain two integers each representing the start and end times of an availability period. - The following line contains the single integer M (1 ≤ M ≤ 100) — the number of rental requests. - The next M lines contain two integers each representing the start and end times of a rental request. -----Output----- - The function should return a list of booleans, where each boolean value corresponds to a rental request. `True` if the rental request can be fulfilled, otherwise `False`. -----Example----- ```python availabilities = [(9, 12), (13, 18), (19, 22)] requests = [(10, 11), (9, 13), (14, 16), (20, 23)] can_rent_bike(availabilities, requests) ``` -----Expected Output----- ```python [True, False, True, False] ```","solution":"from typing import List, Tuple def can_rent_bike(availabilities: List[Tuple[int, int]], requests: List[Tuple[int, int]]) -> List[bool]: results = [] for req_start, req_end in requests: fulfilled = False for avail_start, avail_end in availabilities: if req_start >= avail_start and req_end <= avail_end: fulfilled = True break results.append(fulfilled) return results"},{"question":"In a certain competition, participants earn points based on their performance in various events. The participant with the highest cumulative score wins the title \\"Champion of the Competition\\". Given the number of participants and their respective scores in different events, determine the participant who has the highest cumulative score. In case of a tie, the participant whose name is lexicographically smaller should be chosen as the champion. ----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer P denoting the number of participants. - The second line contains P space-separated strings N_1, N_2, ldots, N_P, denoting the respective names of the participants. - The third line contains P space-separated integers S_1, S_2, ldots, S_P, where S_i is the cumulative score of the participant N_i. ----Output----- For each test case, print a single line containing a string — the name of the participant who has the highest score. In case of a tie, print the lexicographically smallest name. ----Constraints----- - 1 leq T leq 100 - 1 leq P leq 10^5 - 1 leq |N_i| leq 10, for each valid i (|N_i| is the length of the string N_i) - For each valid i, N_i contains only lowercase English alphabets - Sum of P over all the test cases is leq 10^6 ----Subtasks----- - 30 points: 1 leq P leq 100 - 70 points: original constraints ----Sample Input----- 2 3 alice bob charlie 150 200 150 4 garry john robert garry 100 100 200 100 ----Sample Output----- bob robert","solution":"def champion_of_the_competition(T, test_cases): results = [] for i in range(T): P = test_cases[i][0] participants = test_cases[i][1] scores = test_cases[i][2] max_score = -1 champion = \\"\\" for j in range(P): if scores[j] > max_score or (scores[j] == max_score and participants[j] < champion): max_score = scores[j] champion = participants[j] results.append(champion) return results"},{"question":"-----Problem Statement----- Given an array of integers A of length N, determine the maximum sum of any non-empty subarray (contiguous subsequence). -----Input----- Input is given in the following format: N A_1 A_2 . . . A_N -----Output----- Output a single integer, which is the maximum sum of any non-empty subarray. -----Constraints----- - 1 leq N leq 3 times 10^5 - -10^9 leq A_i leq 10^9 - All values in input are integers. -----Sample Input----- 8 -2 1 -3 4 -1 2 1 -5 4 -----Sample Output----- 6 -----EXPLANATION----- The maximum sum can be obtained from the subarray (4, -1, 2, 1) which sums to 6.","solution":"def max_subarray_sum(N, A): Determine the maximum sum of any non-empty subarray. Args: N : int : The length of the array A. A : list of int : List containing N integers. Returns: int : The maximum sum of any non-empty subarray. current_max = A[0] global_max = A[0] for i in range(1, N): current_max = max(A[i], current_max + A[i]) global_max = max(global_max, current_max) return global_max"},{"question":"You are given an array of integers and a target integer. Your task is to find all unique pairs of integers in the array whose sum is equal to the target. Return these pairs as a list of tuples, sorted in ascending order in each tuple, and sorted in ascending order within the list. You can assume that there are no duplicate numbers in the array. Write a function `find_pairs` (Python) / `findPairs` (JS) to identify these pairs. The function will accept two parameters - the array of integers and the target sum - and will return the list of pairs. For example: - `find_pairs([1, 2, 3, 4, 5], 5)` should return `[(1, 4), (2, 3)]` - `find_pairs([0, -1, 2, -3, 1], -2)` should return `[(0, -2), (-1, -1)]` - `find_pairs([1, -2, 3, 5, 7, -8, 4], 1)` should return `[(-8, 9), (-2, 3), (-1, 2)]` If no pairs are found, return an empty list.","solution":"def find_pairs(arr, target): Finds all unique pairs of integers in the array whose sum is equal to the target. :param arr: List of integers :param target: Target sum :return: List of tuples representing pairs seen = set() pairs = set() for num in arr: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return sorted(pairs)"},{"question":"Write a function that takes a string consisting of digits and returns true if it contains exactly three consecutive digits in increasing order (e.g., \'123\', \'456\') somewhere in the string. For example: ```python has_consecutive_increasing_digits(\\"12934567\\") # should return True because \'345\' is present has_consecutive_increasing_digits(\\"123456\\") # should return True because both \'123\' and \'456\' are present has_consecutive_increasing_digits(\\"321456\\") # should return True because \'456\' is present has_consecutive_increasing_digits(\\"98765\\") # should return False because no consecutive increasing digits are present ``` ```Haskell hasConsecutiveIncreasingDigits \\"12934567\\" = True -- \'345\' is present hasConsecutiveIncreasingDigits \\"123456\\" = True -- \'123\' and \'456\' are present hasConsecutiveIncreasingDigits \\"321456\\" = True -- \'456\' is present hasConsecutiveIncreasingDigits \\"98765\\" = False -- no consecutive increasing digits are present ```","solution":"def has_consecutive_increasing_digits(s): Returns True if the string contains exactly three consecutive digits in increasing order. for i in range(len(s) - 2): if s[i].isdigit() and s[i+1].isdigit() and s[i+2].isdigit(): if int(s[i]) + 1 == int(s[i+1]) and int(s[i+1]) + 1 == int(s[i+2]): return True return False"},{"question":"Create a function that takes a list of dictionaries representing employees. Each dictionary contains \\"name\\" (string) and \\"salary\\" (integer) keys. The function should return a list of dictionaries with the same structure, but sorted by salary in descending order. If two or more employees have the same salary, they should be sorted by name in ascending order, maintaining the same position in case of a tie. For example: Input: ``` employees = [ {\\"name\\": \\"Alice\\", \\"salary\\": 5000}, {\\"name\\": \\"Bob\\", \\"salary\\": 7000}, {\\"name\\": \\"Charlie\\", \\"salary\\": 5000}, {\\"name\\": \\"David\\", \\"salary\\": 6000} ] ``` Output: ``` [ {\\"name\\": \\"Bob\\", \\"salary\\": 7000}, {\\"name\\": \\"David\\", \\"salary\\": 6000}, {\\"name\\": \\"Alice\\", \\"salary\\": 5000}, {\\"name\\": \\"Charlie\\", \\"salary\\": 5000} ] ``` Write a function `sort_employees` that takes the list `employees` as the input and returns the appropriately sorted list.","solution":"def sort_employees(employees): Sorts a list of dictionaries representing employees by salary in descending order. If two or more employees have the same salary, they should be sorted by name in ascending order. :param employees: List of dictionaries with \\"name\\" and \\"salary\\" keys :return: List of sorted dictionaries return sorted(employees, key=lambda x: (-x[\'salary\'], x[\'name\'])) # Example provided in the Question employees = [ {\\"name\\": \\"Alice\\", \\"salary\\": 5000}, {\\"name\\": \\"Bob\\", \\"salary\\": 7000}, {\\"name\\": \\"Charlie\\", \\"salary\\": 5000}, {\\"name\\": \\"David\\", \\"salary\\": 6000} ] sorted_employees = sort_employees(employees) sorted_employees"},{"question":"Write a function that takes a string and returns the same string with all valid email addresses replaced by the string \\"[EMAIL]\\". For the purposes of this task, a valid email address is defined as: - Contains exactly one \\"@\\" character. - The username part (before the @) may contain letters (a-z, A-Z), digits (0-9), and the special characters \\".\\", \\"-\\", and \\"_\\". - The domain part (after the @) contains one or more subdomains separated by \\".\\" and each subdomain contains only letters (a-z, A-Z) and/or digits (0-9). Each subdomain must start with a letter and be at least 2 characters long. Return the modified string with all valid email addresses replaced by \\"[EMAIL]\\". Examples ```python replace_emails(\\"My email is john.doe@example.com and i\'ll be available after 5.\\") # returns: \\"My email is [EMAIL] and i\'ll be available after 5.\\" replace_emails(\\"You can contact support@sub.example.co.uk or info@another-domain.org for assistance.\\") # returns: \\"You can contact [EMAIL] or [EMAIL] for assistance.\\" ```","solution":"import re def replace_emails(s): Replaces all valid email addresses in the string with \'[EMAIL]\'. email_pattern = re.compile( r\'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Za-z]{2,}b\' ) return email_pattern.sub(\'[EMAIL]\', s)"},{"question":"Write a function `find_next_ascending_permutation` that takes in a list of integers and returns the next lexicographically greater permutation of that list. If such a permutation does not exist (the list is strictly decreasing), return the smallest permutation (sorted in ascending order). Your function should perform as efficiently as possible for large inputs. # Examples ``` find_next_ascending_permutation([1, 2, 3]) # -> [1, 3, 2] find_next_ascending_permutation([3, 2, 1]) # -> [1, 2, 3] find_next_ascending_permutation([1, 1, 5]) # -> [1, 5, 1] ``` # Constraints * The length of the list will be between 1 and `1e5`. * Each element in the list will be a non-negative integer less than `1e6`.","solution":"def find_next_ascending_permutation(nums): Finds the next lexicographically greater permutation of the given list of integers. If such a permutation does not exist, returns the smallest permutation (sorted in ascending order). n = len(nums) # Step 1: Find the largest index i such that nums[i] < nums[i + 1] i = n - 2 while i >= 0 and nums[i] >= nums[i + 1]: i -= 1 if i == -1: # If no such index exists, the list is sorted in descending order nums.sort() return nums # Step 2: Find the largest index j such that nums[i] < nums[j] j = n - 1 while nums[j] <= nums[i]: j -= 1 # Step 3: Swap nums[i] and nums[j] nums[i], nums[j] = nums[j], nums[i] # Step 4: Reverse the sub-array nums[i + 1:] nums[i + 1:] = reversed(nums[i + 1:]) return nums"},{"question":"You are given two integers n and m, and an integer array \\"ops\\" of operations where each operation is represented as a pair [a, b]. You need to achieve a target output integer x by starting from 0 and performing a series of operations on it. Each operation can be applied to the current number, resulting in two possible outcomes: - Add the first element of the pair to the number. - Subtract the second element of the pair from the number. Return true if it is possible to achieve the target output x using all operations in \\"ops\\" exactly once in any order. Otherwise, return false. Example 1: Input: n = 4, m = 2, ops = [[1, 2], [2, 1], [3, 3]], x = 2 Output: true Explanation: One possible way to achieve 2 is by the following sequence of operations: Starting from 0: 1. Apply the first operation [1, 2]: Add 1 -> 0 + 1 = 1 2. Apply the second operation [2, 1]: Subtract 1 -> 1 - 1 = 0 3. Apply the third operation [3, 3]: Add 3 -> 0 + 3 = 3 Then apply any operation again (since we can use each operation once in any order) to get the result 2. Example 2: Input: n = 3, m = 2, ops = [[1, 2], [2, 1]], x = 4 Output: false Explanation: No sequence of operations can make the final result equal to 4. Constraints: - 1 <= n, m <= 10^5 - All operations in ops are pairs of integers a, b where 1 <= a, b <= 10^9","solution":"def is_target_achievable(n, m, ops, x): Determine if the target x can be achieved starting from 0 and performing each operation in ops exactly once. Args: n (int): Number of operations in ops. m (int): Not used, given but unnecessary in context. ops (List[List[int]]): List of operations, each operation is a pair [a, b]. x (int): Target integer to achieve. Returns: bool: True if target can be achieved, else False. min_sum = 0 max_sum = 0 for op in ops: a, b = op min_sum += min(a, -b) max_sum += max(a, -b) return min_sum <= x <= max_sum"},{"question":"A palindrome is a word, number, phrase, or other sequence of characters that reads the same forwards and backwards (ignoring spaces, punctuation, and capitalization). Given a string `s`, determine whether any permutation of the string is a palindrome. If a permutation of the string can form a palindrome, return `true`, otherwise return `false`. For example: ``` is_permutation_palindrome(\\"civic\\") = true is_permutation_palindrome(\\"ivicc\\") = true is_permutation_palindrome(\\"hello\\") = false is_permutation_palindrome(\\"aabb\\") = true ``` More examples in the test cases. Good luck!","solution":"def is_permutation_palindrome(s): Determines if any permutation of the string can form a palindrome. A string can form a palindrome if at most one character has an odd count. Args: s (str): The input string Returns: bool: True if a permutation of the string can form a palindrome, False otherwise from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Check how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"You are given an array of N integers. You can perform the following operation on the array: Select any two adjacent elements and replace both of them with their sum. Your objective is to maximize the minimum element in the array after performing this operation exactly N-1 times. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of two lines. - First line contains N, the size of the array. - Second line contains N integers representing the array. -----Output:----- For each test case, output a single integer, the maximum possible minimum element in the array after performing the operation N-1 times. -----Constraints----- - 1 leq T leq 100 - 2 leq N leq 10^3 - 1 leq a_i leq 10^6 -----Sample Input:----- 2 3 1 2 3 4 1 4 1 4 -----Sample Output:----- 6 10 -----EXPLANATION:----- In the first test case, you can perform the operations as follows: 1. Replace 1 and 2 with their sum 3: [3, 3] 2. Replace 3 and 3 with their sum 6: [6] The minimum element after performing the operations is 6, which is also the only element left. In the second test case, you can perform the operations as follows: 1. Replace 1 and 4 with their sum 5: [5, 1, 4] 2. Replace 1 and 4 with their sum 5: [5, 5] 3. Replace 5 and 5 with their sum 10: [10] The minimum element after performing the operations is 10, which is also the only element left.","solution":"def maximum_minimum_element(t, test_cases): Args: t: int - Number of test cases test_cases: List of tuples where each tuple contains (n, arr) Returns: List of integers - Each integer being the maximum possible minimum element for each test case results = [] for n, arr in test_cases: # To maximize the minimum element, the optimal approach is to sum up all elements max_min_element = sum(arr) results.append(max_min_element) return results"},{"question":"Write a function `count_balanced_substrings(s: str) -> int` that takes a string s consisting only of characters \'L\' and \'R\'. The function should return the number of balanced substrings. A balanced substring is one that contains an equal number of \'L\' and \'R\' characters, and all the balanced substrings in the input string should be disjoint (non-overlapping). Here are some examples to illustrate: ```python count_balanced_substrings(\\"RLRRLLRLRL\\") === 4 # The balanced substrings are \\"RL\\", \\"RRLL\\", \\"RL\\", \\"RL\\" count_balanced_substrings(\\"RLLLLRRRLR\\") === 3 # The balanced substrings are \\"RL\\", \\"LLLRRR\\", \\"LR\\" count_balanced_substrings(\\"LLLLRRRR\\") === 1 # The balanced substring is \\"LLLLRRRR\\" count_balanced_substrings(\\"RLRRRLLRLL\\") === 2 # The balanced substrings are \\"RL\\" and \\"RRRLLRLL\\" count_balanced_substrings(\\"LRLRLRLR\\") === 4 # The balanced substrings are \\"LR\\", \\"LR\\", \\"LR\\", \\"LR\\" ``` Features of the random Tests: ``` 1 <= len(s) <= 10^6 ```","solution":"def count_balanced_substrings(s: str) -> int: balance = 0 balanced_count = 0 for char in s: if char == \'L\': balance += 1 elif char == \'R\': balance -= 1 if balance == 0: balanced_count += 1 return balanced_count"},{"question":"David is planning to create a vegetable garden in his backyard. He has a rectangular plot of land that he wants to divide into smaller square plots of equal size, so he can plant different types of vegetables in each square. He needs a fool-proof method for determining the number of square plots he can create and the size of each plot. David knows the length `L` meters and width `W` meters of the rectangular plot. He wants to maximize the size of each square plot, meaning that the side length of each square plot should be as large as possible, while still allowing the entire rectangular plot to be divided evenly into these square plots. Write a function `garden_plots(L, W)` that returns a tuple containing two integers: 1. The side length of the largest possible square plot (in meters). 2. The total number of such square plots that can be created. # Example: `garden_plots(10, 15)` should return `(5, 6)` `garden_plots(7, 13)` should return `(1, 91)` # Notes: - 0 < L, W <= 1000 (floating numbers). - If L or W is zero, return `(0, 0)`. - The function should handle decimal inputs and round down to the nearest whole number for the square plots\' side length. - David wants to use the entire rectangular plot without any leftover land.","solution":"from math import gcd, floor def garden_plots(L, W): Determines the side length of the largest possible square plot and the total number of such square plots that can fit in the rectangular plot with length L and width W. Args: L (float): The length of the rectangular plot. W (float): The width of the rectangular plot. Returns: tuple: A tuple containing the side length of the largest square plot (in meters) and the total number of such square plots. if L == 0 or W == 0: return (0, 0) L = floor(L) W = floor(W) side_length = gcd(L, W) num_plots = (L * W) // (side_length ** 2) return (side_length, num_plots)"},{"question":"Background: As a systems engineer, you have to maintain the hierarchy of directories and files. Sometimes, the system has to perform certain actions like searching or creating files and directories. To simplify this task, we will use a file structure consisting of nested dictionaries. Directories and files all have unique names within the same directory level. For example: ```python file_structure = { \'home\': { \'user1\': { \'docs\': [\'file1.txt\', \'file2.txt\'], \'photos\': [\'photo1.jpg\', \'photo2.jpg\'], }, \'user2\': { \'music\': [\'song1.mp3\'] } } } ``` Task: Write a function `find_file_path` that takes a nested dictionary representing the file structure, a target file name, and returns the path to the file as a string. If the file does not exist, return `None`. Use \'/\' as the directory separator in the path. **Note**: A path string should not start with a \'/\'. In case of multiple files with the same name, return the path to the first found file. Examples: ```python file_structure = { \'home\': { \'user1\': { \'docs\': [\'file1.txt\', \'file2.txt\'], \'photos\': [\'photo1.jpg\', \'photo2.jpg\'], }, \'user2\': { \'music\': [\'song1.mp3\', \'file1.txt\'] } } } find_file_path(file_structure, \'file1.txt\') => \'home/user1/docs/file1.txt\' find_file_path(file_structure, \'photo1.jpg\') => \'home/user1/photos/photo1.jpg\' find_file_path(file_structure, \'song2.mp3\') => None ```","solution":"def find_file_path(file_structure, target_file, current_path=\'\'): for key, value in file_structure.items(): if isinstance(value, dict): result = find_file_path(value, target_file, f\'{current_path}/{key}\') if result: return result elif isinstance(value, list): if target_file in value: return f\'{current_path}/{key}/{target_file}\'.strip(\'/\') return None"},{"question":"=====Function Descriptions===== find_max_average(nums, k) Given an array nums of n integers and an integer k, find the contiguous subarray of length k that has the maximum average value and return this value. =====Problem Statement===== You are given an array of integers and a positive integer k. Your task is to find the contiguous subarray of length k that has the maximum average value. Implement a function to find this maximum average subarray. =====Input Format===== - An array of integers nums (1 ≤ len(nums) ≤ 10^5, -10^4 ≤ nums[i] ≤ 10^4). - An integer k (1 ≤ k ≤ len(nums)). =====Output Format===== Return the maximum average value of a contiguous subarray of length k. =====Example===== Input: nums = [1,12,-5,-6,50,3], k = 4 Output: 12.75 Explanation: Maximum average is (12 + (-5) + (-6) + 50) / 4 = 51 / 4 = 12.75","solution":"def find_max_average(nums, k): Finds the contiguous subarray of length k that has the maximum average value and returns the value. n = len(nums) if n < k: raise ValueError(\\"The length of subarray k must be less than or equal to the length of nums.\\") # Initial sum of the first subarray of length k curr_sum = sum(nums[:k]) max_sum = curr_sum # Traverse from (k+1)th element to the last element for i in range(k, n): curr_sum = curr_sum - nums[i - k] + nums[i] if curr_sum > max_sum: max_sum = curr_sum # Maximum average is the maximum sum divided by k return max_sum / k"},{"question":"You are given an array of integers and a target integer. Write a function named `findPair` that finds a pair of integers in the array whose sum equals the target integer and returns the indices of these two integers as a tuple. If no such pair exists, return `None`. Examples of inputs and subsequent outputs: ``` ([2, 7, 11, 15], 9) -> (0, 1) ([3, 2, 4], 6) -> (1, 2) ([3, 3], 6) -> (0, 1) ([1, 2, 3], 7) -> None ```","solution":"def findPair(nums, target): Given an array of integers and a target integer, returns the indices of two integers in the array whose sum equals the target. If no such pair exists, returns None. lookup = {} for i, num in enumerate(nums): if target - num in lookup: return (lookup[target - num], i) lookup[num] = i return None"},{"question":"Complete the function ```stringCycler```, which takes a string and a non-zero positive integer as arguments. The function should return a new string that is constructed by cyclically shifting each character in the input string forward by the integer amount given, wrapping around if necessary. For example, if the input string is ```\\"hello\\"``` and the number is 2, the function should return ```\\"lohel\\"```. ```python stringCycler(\\"hello\\", 2) => \\"lohel\\" stringCycler(\\"python\\", 3) => \\"honpyt\\" stringCycler(\\"abcdef\\", 1) => \\"fabcde\\" stringCycler(\\"abcdef\\", 6) => \\"abcdef\\" stringCycler(\\"abcdef\\", 7) => \\"fabcde\\" ```","solution":"def stringCycler(s, n): Returns a new string that is constructed by cyclically shifting each character in the input string forward by the integer amount given, wrapping around if necessary. Parameters: s (str): The input string. n (int): The number of positions to shift forward. Returns: str: The cyclically shifted string. if not s: return \\"\\" # Ensure the shift amount is within the bounds of the string length n = n % len(s) # Return the cyclically shifted string return s[-n:] + s[:-n]"},{"question":"# Task * **_Given_** *an integer* `n`, **_return_** *an array containing the first `n` terms of the Fibonacci sequence.* * The Fibonacci sequence is a series of numbers where the next term is obtained by adding the two preceding ones. The first two numbers are always `0` and `1`. ___ # Consider an Example : **_With the number_** `5` **_the series will be_**: * `0, 1, 1, 2, 3` So **_the output will be_** `[0, 1, 1, 2, 3]`. ___ # Notes * **_The integer `n`_** *is always* **_positive_**. * **_The integer `n`_** *is in the range* **_(1 ≤ n ≤ 50)_**. * You **_do NOT need to handle invalid inputs_**. ___ # Input >> Output Examples: ``` findFibonacci(5) ==> return [0, 1, 1, 2, 3] ``` **_Explanation_**: *The first 5 terms of the Fibonacci sequence are* `[0, 1, 1, 2, 3]`. ___ ``` findFibonacci(1) ==> return [0] ``` **_Explanation_**: *Since the first term of the Fibonacci sequence is `0`, the output will be* `[0]`. ___ ``` findFibonacci(10) ==> return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ``` **_Explanation_**: *The first 10 terms of the Fibonacci sequence are* `[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]`. ___ ___ ALL translations are welcomed Enjoy Learning !!","solution":"def findFibonacci(n): Returns the first n terms of the Fibonacci sequence. if n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"The zoo keeper has a special task for you. She wants to create a unique sequence of numbers to label the animal cages. The sequence should follow a specific pattern that she\'s designed. She provides you with a number `N` for each test case and expects you to generate the sequence accordingly. -----Input:----- - First-line will contain `T`, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer `N`. -----Output:----- For each test case, output the sequence of numbers as described in the pattern. -----Pattern Description----- - For a given `N`, the sequence starts at 1 and the difference between consecutive terms increases by 2 with each step. - For example, for `N = 4`: the sequence would be `1, 4, 9, 16` (1, 1+3, 4+5, 9+7). -----Constraints----- - `1 ≤ T ≤ 100` - `1 ≤ N ≤ 100` -----Sample Input:----- 3 1 2 3 -----Sample Output:----- 1 1 4 1 4 9 -----Explanation:----- No need for detailed explanation as the sequence is straightforward, incrementing differences by 2 each step.","solution":"def generate_sequence(N): Generates a sequence starting at 1 where the difference between consecutive terms increases by 2 with each step. sequence = [] current_value = 1 increment = 3 for _ in range(N): sequence.append(current_value) current_value += increment increment += 2 return sequence def process_input(T, test_cases): Given the number of test cases and a list of N values (one for each test case), generate and return the sequences for each test case. result = [] for N in test_cases: result.append(generate_sequence(N)) return result"},{"question":"Find the Longest Balanced Substring You need to write a function that receives a string consisting of only the characters \'a\' and \'b\'. Your task is to find the longest balanced substring. A balanced substring is defined as a substring that contains an equal number of \'a\'s and \'b\'s. The function should return the length of the longest balanced substring. If no balanced substring exists, return 0. # Input - A single string `s` containing only \'a\'s and \'b\'s. `1 <= len(s) <= 10^5` # Output - An integer representing the length of the longest balanced substring. # Example: Example 1: ```markdown Input: \\"ababbb\\" Output: 4 Explanation: The longest balanced substring is \\"abab\\" which length is 4. ``` Example 2: ```markdown Input: \\"aaaa\\" Output: 0 Explanation: There is no balanced substring, so the output is 0. ``` Example 3: ```markdown Input: \\"abababbaaab\\" Output: 10 Explanation: The longest balanced substring is \\"abababbaaab\\" which length is 10. ``` # Constraints - The string consists only of \'a\' and \'b\'. - The string will have at least one character. # Notes - You can consider using a sliding window approach or prefix sum techniques to optimize your solution.","solution":"def longest_balanced_substring(s): Returns the length of the longest balanced substring, where a balanced substring contains equal number of \'a\'s and \'b\'s. max_length = 0 counter = 0 index_map = {0: -1} # To handle the case when the whole substring from start is balanced for i, char in enumerate(s): if char == \'a\': counter -= 1 else: counter += 1 if counter in index_map: max_length = max(max_length, i - index_map[counter]) else: index_map[counter] = i return max_length"},{"question":"Write a function that takes a string of words separated by spaces and returns a list of the lengths of those words. The function should handle multiple spaces between words, leading, and trailing spaces gracefully. For example, given the inputs: ``` \\"hello world\\" \\" fly me to the moon\\" \\"a \\" \\" code challenges \\" ``` The function should return: ```python word_lengths(\\"hello world\\") == [5, 5] word_lengths(\\" fly me to the moon\\") == [3, 2, 2, 3, 4] word_lengths(\\"a \\") == [1] word_lengths(\\" code challenges \\") == [4, 10] ```","solution":"def word_lengths(s): Returns a list of lengths of words in the input string s, where words are separated by spaces. Handles multiple spaces between words, and leading and trailing spaces. words = s.split() return [len(word) for word in words]"},{"question":"Write a function that takes a string containing a sentence and returns a dictionary with the word frequency count. The function should ignore punctuation and be case-insensitive. For example, given the input \\"Hello, hello! How are you?\\", the function should return: ```python { \\"hello\\": 2, \\"how\\": 1, \\"are\\": 1, \\"you\\": 1 } ``` Make sure to handle empty strings and strings that only contain punctuation gracefully by returning an empty dictionary in such cases.","solution":"import re from collections import defaultdict def word_frequency(sentence): Returns a dictionary with the word frequency count from the given sentence. The function ignores punctuation and is case-insensitive. if not sentence or not sentence.strip(): return {} # Convert to lowercase and remove punctuation words = re.findall(r\'bw+b\', sentence.lower()) freq_dict = defaultdict(int) for word in words: freq_dict[word] += 1 return dict(freq_dict)"},{"question":"# Task Given a string containing an algebraic expression, evaluate and return the resulting value. The expression may contain the + and - operators, integers, and parentheses. # Example For `expression = \\"1 + 2 - (3 + 4)\\"`, the output should be `-4`. For `expression = \\"(1 + (4 + 5 + 2) - 3) + (6 + 8)\\"`, the output should be `23`. # Input/Output - `[input]` string `expression` - `[output]` an integer value The evaluated result of the algebraic expression.","solution":"def evaluate_expression(expression): Evaluates an algebraic expression with +, -, and parentheses. Parameters: expression (str): The string containing the algebraic expression. Returns: int: The result of the evaluation. def helper(stack): num = 0 sign = 1 result = 0 while stack: char = stack.pop() if char.isdigit(): num = num * 10 + int(char) elif char == \'+\': result += sign * num num = 0 sign = 1 elif char == \'-\': result += sign * num num = 0 sign = -1 elif char == \'(\': result += sign * num num = 0 result += sign * helper(stack) elif char == \')\': result += sign * num return result result += sign * num return result # Remove spaces and reverse the string to process the expression from left to right using a stack expression = expression.replace(\' \', \'\')[::-1] # Convert expression to a stack of characters stack = list(expression) return helper(stack)"},{"question":"Sarah is organizing a game night where friends will be forming teams to play different games. To ensure everyone has fun, she wants to evenly distribute players into teams such that the difference in the number of players between any two teams is at most one. Given the number of players and the number of teams, Sarah needs your help to determine how to distribute the players. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^6), representing the number of players. The second line contains an integer t (1 ≤ t ≤ 1000), representing the number of teams. -----Output----- Output a single line with t integers where the i-th integer represents the number of players in the i-th team. The numbers should be printed in non-decreasing order. -----Examples----- Input 10 3 Output 3 3 4 Input 7 5 Output 1 1 1 2 2 Input 8 4 Output 2 2 2 2 -----Note----- In the first example, the players are distributed in the teams such that two teams have 3 players and one team has 4 players, ensuring the difference in the number of players between any two teams is at most one.","solution":"def distribute_players(n, t): Distributes n players into t teams such that the difference in the number of players between any two teams is at most one. Args: n (int): The number of players. t (int): The number of teams. Returns: list: A list of integers representing the number of players in each team. base_players_per_team = n // t extra_players = n % t teams = [base_players_per_team] * t for i in range(extra_players): teams[i] += 1 return sorted(teams)"},{"question":"Write a function named `mergeOverlappingIntervals` that takes a list of intervals as input and returns a list of merged intervals. Each interval is represented as a tuple of two integers (start, end), where `start` is always less than or equal to `end`. Two intervals are considered to be overlapping if they have at least one point in common. The resulting list should contain non-overlapping intervals covering all input intervals. For example, given the input: `[(1, 3), (2, 6), (8, 10), (15, 18)]` the function should return: `[(1, 6), (8, 10), (15, 18)]` Because the intervals `(1, 3)` and `(2, 6)` overlap and need to be merged into `(1, 6)`. The intervals `(8, 10)` and `(15, 18)` do not overlap with any other intervals, so they are returned unchanged. Note: Ensure that the input list and all intervals within it are valid (i.e., start ≤ end).","solution":"def mergeOverlappingIntervals(intervals): Merges overlapping intervals. Args: intervals (list of tuples): List of intervals where each interval is represented as (start, end) Returns: list of tuples: List of merged intervals. if not intervals: return [] # First, sort the intervals based on the starting time intervals.sort(key=lambda x: x[0]) merged_intervals = [intervals[0]] for current in intervals[1:]: last_merged = merged_intervals[-1] # If the current interval overlaps with the last merged interval, merge them if current[0] <= last_merged[1]: merged_intervals[-1] = (last_merged[0], max(last_merged[1], current[1])) else: merged_intervals.append(current) return merged_intervals"},{"question":"In this coding challenge, you are required to implement a function `balanceParentheses` that takes a single string parameter `s`. The string `s` contains only round parentheses `(` and `)`. Your task is to determine the minimum number of insertions or deletions needed to make the parentheses balanced. A string is considered balanced if: 1. Every opening parenthesis `(` has a corresponding closing parenthesis `)`. 2. The pairs of parentheses are properly nested. Examples: ``` balanceParentheses(\\"()\\") --> 0 # already balanced balanceParentheses(\\"(()\\") --> 1 # one closing parenthesis \\")\\" needed balanceParentheses(\\")(\\") --> 2 # one insertion \\"(\\" at the start and one insertion \\")\\" at the end balanceParentheses(\\"((())\\") --> 1 # one closing parenthesis \\")\\" needed balanceParentheses(\\"())(()\\") --> 2 # one insertion \\"(\\" after first character and one insertion \\")\\" at the end ``` Note: Your function should return an integer which represents the minimum number of insertions or deletions required to make the parentheses balanced.","solution":"def balanceParentheses(s): Returns the minimum number of insertions or deletions needed to make the parentheses balanced. open_count = 0 # Count of open parentheses balance_actions = 0 # Count of actions (insertions or deletions) to balance the string for char in s: if char == \'(\': open_count += 1 else: # char == \')\' if open_count > 0: open_count -= 1 else: balance_actions += 1 # We need an opening parenthesis # Any remaining open_count means we need closing parentheses balance_actions += open_count return balance_actions"},{"question":"Peter is a software engineer who loves solving mathematical problems. One day, he encounters a problem that involves finding special subsequences in a given sequence of integers. A subsequence is special if it contains exactly `k` elements, and all its elements are in strictly increasing order. Help Peter find the total number of special subsequences with exactly `k` elements in the given sequence. -----Input----- - The first line of input contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 50), where `n` is the number of elements in the sequence and `k` is the length of the special subsequence to be found. - The second line contains `n` space-separated integers representing the sequence. -----Output----- - Output a single integer, representing the number of special subsequences of length `k`. -----Constraints----- - All integers in the sequence are distinct. - The elements of the sequence are within the range 1 to 100. -----Example Input----- 5 3 1 2 3 4 5 -----Example Output----- 10 -----Explanation----- Example case: The input sequence has 5 elements: [1, 2, 3, 4, 5]. The number of special subsequences of length 3 are: - [1, 2, 3] - [1, 2, 4] - [1, 2, 5] - [1, 3, 4] - [1, 3, 5] - [1, 4, 5] - [2, 3, 4] - [2, 3, 5] - [2, 4, 5] - [3, 4, 5]","solution":"from itertools import combinations def count_special_subsequences(n, k, sequence): Returns the number of special subsequences of length k in the given sequence of length n. return sum(1 for subseq in combinations(sequence, k)) # Example usage: # n, k = 5, 3 # sequence = [1, 2, 3, 4, 5] # print(count_special_subsequences(n, k, sequence)) # Output: 10"},{"question":"Write a function that takes an array of integers and returns an array where each element at index `i` is the product of all the numbers in the original array except the one at `i`. Be mindful of time complexity and avoid using division. ```python product_except_self([1,2,3,4]) == [24, 12, 8, 6] product_except_self([2,3,4,5]) == [60, 40, 30, 24] product_except_self([1,1,1,1]) == [1, 1, 1, 1] product_except_self([10, 3, 5, 6, 2]) == [180, 600, 360, 300, 900] ``` ```C product_except_self([1,2,3,4], 4, result) == {24, 12, 8, 6}; product_except_self([2,3,4,5], 4, result) == {60, 40, 30, 24}; product_except_self([1,1,1,1], 4, result) == {1, 1, 1, 1}; product_except_self([10, 3, 5, 6, 2], 5, result) == {180, 600, 360, 300, 900}; ```","solution":"def product_except_self(nums): Returns an array where each element at index \'i\' is the product of all the numbers in the original array except the one at \'i\'. n = len(nums) if n == 0: return [] # Initialize the left and right product arrays left_products = [1] * n right_products = [1] * n output = [1] * n # Fill left_products array for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill right_products array for j in range(n - 2, -1, -1): right_products[j] = right_products[j + 1] * nums[j + 1] # Fill the output array for k in range(n): output[k] = left_products[k] * right_products[k] return output"},{"question":"You are given a collection of intervals representing start and end times of various events (inclusive). Your task is to merge all overlapping intervals and return the list of merged intervals in ascending order of starting times. Example 1: Input: intervals = [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlap, they are merged into [1,6]. Example 2: Input: intervals = [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considered overlapping, so they merge into [1,5]. Example 3: Input: intervals = [[1,4],[0,2],[3,5]] Output: [[0,5]] Explanation: Intervals [1,4], [0,2] and [3,5] are all overlapping and thus are merged into [0,5]. Constraints: 1 <= intervals.length <= 1000 intervals[i].length == 2 0 <= intervals[i][0] <= intervals[i][1] <= 10^4","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns the list of merged intervals. Parameters: intervals (List[List[int]]): A list of intervals where each interval is a list of two integers. Returns: List[List[int]]: A list of merged intervals in ascending order of starting times. if not intervals: return [] # Sort intervals by the starting times intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: last_merged = merged[-1] # If the current interval overlaps with the last merged one, merge them if current[0] <= last_merged[1]: last_merged[1] = max(last_merged[1], current[1]) else: # No overlap, just append the current interval merged.append(current) return merged"},{"question":"Alex is an enthusiastic book reader who recently joined an online book club. The club has a unique way of recommending books to its members. Each book in the club has a rating from 1 to 5, and Alex wants to choose a subset of these books according to his preferences. Alex\'s preferences are a minimum and maximum threshold rating he is comfortable with. Moreover, Alex is quite particular about the total number of books he reads in a single session. Given a list of book ratings and Alex\'s preferences, you need to determine the maximum number of books Alex can choose to read within his threshold limits without exceeding the maximum number of books he is willing to read in a single session. -----Input----- - The first line contains an integer T, the number of test cases. - Each test case consists of three lines: - The first line contains two integers N and M, where N is the total number of books, and M is the maximum number of books Alex is willing to read in a single session. - The second line contains two integers L and U, which are the lower and upper rating thresholds respectively. - The third line contains N integers, representing the ratings of the books. -----Output----- - For each test case, output a single integer representing the maximum number of books Alex can read within his preferences and the given constraints. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 1000 - 1 ≤ L ≤ U ≤ 5 - 1 ≤ Ratings ≤ 5 -----Example----- Input: 2 5 3 2 4 1 2 3 3 5 6 4 1 5 1 1 1 2 5 5 Output: 3 4 -----Explanation----- Example 1: - Alex can choose the books rated 2, 3, and 3, making a total of 3 books since the maximum limit is 3. Example 2: - Alex can read all 4 books within his rating threshold of 1 to 5, so the answer is 4.","solution":"def max_books_to_read(case_count, cases): results = [] for i in range(case_count): N, M = cases[i][0] L, U = cases[i][1] ratings = cases[i][2] # Filter ratings within the threshold L to U valid_books = [rating for rating in ratings if L <= rating <= U] # The maximum number of books Alex can read is the minimum of the valid books count and the limit M results.append(min(len(valid_books), M)) return results def process_input(raw_input): data = raw_input.strip().split(\'n\') case_count = int(data[0]) cases = [] index = 1 for _ in range(case_count): N, M = map(int, data[index].split()) L, U = map(int, data[index + 1].split()) ratings = list(map(int, data[index + 2].split())) cases.append([(N, M), (L, U), ratings]) index += 3 return case_count, cases"},{"question":"Given an array of integers, determine the length of the shortest subarray, that if sorted, would result in the entire array being sorted in non-decreasing order. If the input array is already sorted, the function should return 0. Examples: Example 1: Input: [2, 6, 4, 8, 10, 9, 15] Output: 5 Explanation: Sort the subarray [6, 4, 8, 10, 9], the entire array becomes sorted. Example 2: Input: [1, 2, 3, 4] Output: 0 Explanation: The array is already sorted. Example 3: Input: [1, 3, 2, 2, 2] Output: 4 Explanation: Sort the subarray [3, 2, 2, 2], the entire array becomes sorted. Note: 1 <= array length <= 10^4 -10^5 <= array elements <= 10^5","solution":"def find_unsorted_subarray(nums): Returns the length of the shortest subarray that if sorted, would result in the entire array being sorted. sorted_nums = sorted(nums) left, right = 0, len(nums) - 1 while left < len(nums) and nums[left] == sorted_nums[left]: left += 1 while right > left and nums[right] == sorted_nums[right]: right -= 1 return right - left + 1 if left < right else 0"},{"question":"You are given a sequence of n integers, a1, a2, ..., an and another integer x. You need to find the length of the shortest subarray whose sum is strictly greater than x. If no such subarray exists, output -1. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) and an integer x (1 ≤ x ≤ 10^9). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4). -----Output----- Output the length of the shortest subarray whose sum is strictly greater than x. If no such subarray exists, output -1. -----Examples----- Input 6 51 1 4 45 6 0 19 Output 3 Input 5 9 1 10 5 2 7 Output 1 Input 4 100 1 2 3 4 Output -1","solution":"def shortest_subarray_length(arr, x): Returns the length of the shortest subarray whose sum is strictly greater than x. If no such subarray exists, returns -1. n = len(arr) min_len = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > x: min_len = min(min_len, end - start + 1) current_sum -= arr[start] start += 1 return min_len if min_len != float(\'inf\') else -1"},{"question":"You are given an m x n grid where each cell in the grid can be empty or blocked. We represent the grid using a 2D list, where a cell containing 0 is empty and a cell containing 1 is blocked. You start at the top-left corner of the grid and you want to reach the bottom-right corner. You can move either down or right from a cell. Write a function that returns the number of unique paths from the top-left corner to the bottom-right corner of the grid, avoiding the blocked cells. Example: ```python grid = [ [0, 0, 1], [0, 0, 0], [0, 1, 0] ] ``` Output: ```python 2 ``` Explanation: There are two unique paths to reach the bottom-right corner. Either: - Down -> Down -> Right -> Right - Down -> Right -> Down -> Right","solution":"def unique_paths_with_obstacles(grid): if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"There is a digital clock that displays the time in the format \\"hh:mm\\". Your task is to find out how many times within a 24-hour period the digits used in the time form a palindrome. A palindrome is a sequence that reads the same forwards and backwards. For example, \\"12:21\\" is a palindrome because \\"1221\\" reads the same forwards and backwards, but \\"13:31\\" is not a palindrome. -----Input----- The input consists of a single integer `t` (1 le t le 10^5), the number of test cases. -----Output----- For each test case, print the number of palindromic times in a 24-hour period. -----Examples----- Input 2 Output 16 16 -----Explanation------ Within a 24-hour period, the possible palindromic times in \\"hh:mm\\" format are: 00:00, 01:10, 02:20, 03:30, 04:40, 05:50, 10:01, 11:11, 12:21, 13:31, 14:41, 15:51, 20:02, 21:12, 22:22, 23:32. Thus, there are 16 such times in total.","solution":"def count_palindromic_times(): Count the number of palindromic times in a 24-hour period. palindromic_times = 0 for hour in range(24): for minute in range(60): # Format the time as hh:mm time_str = f\\"{hour:02d}:{minute:02d}\\" # Remove the colon and check if the resulting string is a palindrome if time_str == time_str[::-1]: palindromic_times += 1 return palindromic_times def process_cases(t): results = [] # Since the palindromic times don\'t change with the input, it\'s always the same result. count = count_palindromic_times() for _ in range(t): results.append(count) return results"},{"question":"Given an array of integers, find a pair of elements that sum up to a given target value. If multiple pairs exist, return any one of them. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: [2, 7] Explanation: Because 2 + 7 = 9, we return [2, 7]. Example 2: Input: nums = [1, 2, 3, 4, 6], target = 8 Output: [2, 6] Explanation: Because 2 + 6 = 8, we return [2, 6]. Note: - The returned pair should be in the format [num1, num2] where num1 <= num2. - The input list may have negative numbers as well. - If no such pair exists, return an empty list [].","solution":"def find_pair_with_sum(nums, target): Given a list of integers, returns a pair of elements that sum up to the target value. If multiple pairs exist, returns any one of them. seen = {} for num in nums: complement = target - num if complement in seen: return [min(num, complement), max(num, complement)] seen[num] = True return []"},{"question":"Create a function that takes a string representation of a Sudoku board and returns whether it\'s a valid board according to Sudoku rules. Note - The input string will represent a 9x9 Sudoku board in row-major order, with empty cells denoted by \\".\\". - A valid Sudoku board must satisfy: - Each row contains the digits 1-9 without repetition (except for empty cells). - Each column contains the digits 1-9 without repetition (except for empty cells). - Each of the nine 3x3 sub-grids contains the digits 1-9 without repetition (except for empty cells). Examples ``` validateSudoku(\\"53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79\\") // returns True validateSudoku(\\"53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..71\\") // returns False ```","solution":"def validateSudoku(board): def is_valid_block(block): block = [num for num in block if num != \\".\\"] return len(block) == len(set(block)) rows = [board[i * 9:(i + 1) * 9] for i in range(9)] columns = [board[i::9] for i in range(9)] subgrids = [ board[r * 9 + c:r * 9 + c + 3] + board[(r + 1) * 9 + c:(r + 1) * 9 + c + 3] + board[(r + 2) * 9 + c:(r + 2) * 9 + c + 3] for r in [0, 3, 6] for c in [0, 3, 6] ] for i in range(9): if not is_valid_block(rows[i]) or not is_valid_block(columns[i]) or not is_valid_block(subgrids[i]): return False return True"},{"question":"Reina loves solving mazes, and she recently found a new challenge. She has a maze represented as an n times m grid. Each cell in the grid is either empty (denoted by \'.\') or contains a wall (denoted by \'#\'). Reina starts at the top-left corner of the maze (cell (1, 1)) and wants to reach the bottom-right corner of the maze (cell (n, m)). She can move from one cell to an adjacent cell if they share a side and there is no wall in the way. She can move up, down, left, or right. Your task is to help Reina determine the minimum number of steps needed to reach the bottom-right corner from the top-left corner. If it is impossible for Reina to reach the bottom-right corner, return -1. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000). The next n lines each contain m characters (either \'.\' or \'#\'), representing the maze. -----Output----- Output a single integer: the minimum number of steps needed to reach the bottom-right corner, or -1 if it is impossible. -----Examples----- Input 4 4 .... .#.. .#.. .... Output 6 Input 3 3 ... # ... Output -1 -----Note----- In the first sample, Reina can take the following path (indicated by \'*\'): * . . . * # . . . # . * . . * * In the second sample, the wall extends across the entire second row, making it impossible for Reina to reach the bottom-right corner.","solution":"from collections import deque def min_steps_maze(n, m, maze): if maze[0][0] == \'#\' or maze[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up queue = deque([(0, 0)]) visited = [[False] * m for _ in range(n)] visited[0][0] = True steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and maze[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) steps += 1 return -1"},{"question":"Create a function that takes a list of integers and returns a new list where each element is the product of all the elements in the original list except for the element at the current position. Your solution should not use division. **Input:** The input consists of a single list of integers. **Output:** The function should return a list of integers representing the products as described above. **Example:** ```python def product_except_self(nums): # Your code here # Test cases print(product_except_self([1, 2, 3, 4])) # Output: [24, 12, 8, 6] print(product_except_self([2, 3, 4, 5])) # Output: [60, 40, 30, 24] print(product_except_self([1, 1, 1, 1])) # Output: [1, 1, 1, 1] ``` **Explanation:** For the first example, the function returns [24, 12, 8, 6] because: - 24 is the product of 2 * 3 * 4 - 12 is the product of 1 * 3 * 4 - 8 is the product of 1 * 2 * 4 - 6 is the product of 1 * 2 * 3","solution":"def product_except_self(nums): Returns a list such that each element is the product of all the elements of nums except for the element at that position. length = len(nums) # Initialize the answer array res = [1] * length # Calculate products of elements to the left of each element prefix = 1 for i in range(length): res[i] = prefix prefix *= nums[i] # Calculate products of elements to the right of each element postfix = 1 for i in range(length - 1, -1, -1): res[i] *= postfix postfix *= nums[i] return res"},{"question":"A company is building a web application that needs to manage the set of currently active users. They want to provide real-time notifications whenever users enter or leave the system. You have been tasked with implementing a part of this system. Specifically, you need to implement a class called UserManager which should have the following functionalities: 1. `add_user(user_id)`: Adds a user to the set of active users. 2. `remove_user(user_id)`: Removes a user from the set of active users. 3. `get_active_users()`: Returns the set of currently active users. It is important that the user_id be hashed to perform these operations efficiently. Your task is to implement this class in Python. -----Input section----- You do not need to worry about input or output. Just implement the class UserManager as described. -----Output section----- You do not need to worry about input or output. Just implement the class UserManager as described. -----Constraints----- - The user_id will be a string consisting of alphanumeric characters. - Each user_id that is added will be unique at the time it is added. - Any user_id that is removed will be present in the set of users at the time it is removed. - The operations performed by the class should be efficient. -----Example----- The following code snippet demonstrates the usage of the UserManager class: ```python manager = UserManager() manager.add_user(\\"user1\\") manager.add_user(\\"user2\\") print(manager.get_active_users()) # Output: {\\"user1\\", \\"user2\\"} manager.remove_user(\\"user1\\") print(manager.get_active_users()) # Output: {\\"user2\\"} ``` Implement the `UserManager` class below: ```python class UserManager: def __init__(self): # Your initialization here def add_user(self, user_id): # Your code here def remove_user(self, user_id): # Your code here def get_active_users(self): # Your code here ```","solution":"class UserManager: def __init__(self): self.active_users = set() def add_user(self, user_id): self.active_users.add(user_id) def remove_user(self, user_id): self.active_users.remove(user_id) def get_active_users(self): return self.active_users"},{"question":"You have been hired as a data scientist to analyze a company\'s sales data. The company recorded the number of units sold for each product over a period of days. You need to compute the maximum number of units sold of any single product over a specified number of consecutive days. Given an array representing the number of units sold for a single product each day and an integer k, which represents the number of consecutive days, determine the maximum sum of units sold over any k consecutive days. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of days. The second line of input contains n integers, representing the number of units sold each day (0 ≤ units sold per day ≤ 10^3). The third line contains an integer k (1 ≤ k ≤ n), the number of consecutive days. -----Output----- The output should be a single integer representing the maximum number of units sold over any k consecutive days. -----Examples----- Input 7 1 2 3 4 5 6 7 3 Output 18 Input 10 10 1 2 3 4 5 6 7 8 9 4 Output 30","solution":"def max_units_sold_over_k_days(n, sales, k): Computes the maximum number of units sold over any k consecutive days. Args: n (int): The number of days. sales (list of int): Units sold per day. k (int): Number of consecutive days. Returns: int: The maximum sum of units sold over any k consecutive days. # Initial sum of the first k days max_sum = sum(sales[:k]) current_sum = max_sum # Sliding window to find the maximum sum of k consecutive days for i in range(k, n): current_sum += sales[i] - sales[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an integer array `arr` and a positive integer `k`. A sliding window of size `k` is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Your task is to find the maximum sum of the k elements in this sliding window. Example 1: Input: arr = [1, 3, -1, -3, 5, 3, 6, 7], k = 3 Output: 16 Explanation: The maximum sum is obtained from the subarray [5, 3, 6] or [3, 6, 7]. Example 2: Input: arr = [2, 1, 5, 1, 3, 2], k = 2 Output: 6 Explanation: The maximum sum is obtained from the subarray [5, 1]. Note: 1. `1 <= arr.length <= 10^5` 2. `-10^4 <= arr[i] <= 10^4` 3. `1 <= k <= arr.length`","solution":"def max_sum_of_subarray(arr, k): Finds the maximum sum of k consecutive elements in the array. if not arr or k <= 0 or k > len(arr): return 0 max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function that accepts a list of strings and returns the length of the longest consecutive sequence of strings where each string is an anagram of the next in the list. # Example ```python longest_anagram_sequence([\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\", \\"google\\", \\"elgoog\\", \\"hello\\", \\"ohell\\"]) # Should return 4 because the longest sequence is [\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\"] longest_anagram_sequence([\\"apple\\", \\"paple\\", \\"pale\\", \\"leap\\", \\"peal\\", \\"plea\\", \\"appeal\\"]) # Should return 4 because the longest sequence is [\\"pale\\", \\"leap\\", \\"peal\\", \\"plea\\"] longest_anagram_sequence([\\"rat\\", \\"tar\\", \\"art\\", \\"car\\"]) # Should return 3 because the longest sequence is [\\"rat\\", \\"tar\\", \\"art\\"] ``` More examples can be found in the test cases. Good luck! Please also try [Consecutive String Array](https://www.codewars.com/kata/5b9e80d782b44e50b300995d)","solution":"from collections import Counter def are_anagrams(s1, s2): Helper function to determine if two strings are anagrams return Counter(s1) == Counter(s2) def longest_anagram_sequence(words): Returns the length of the longest consecutive sequence of anagram strings in the list if not words: return 0 max_length = 1 current_length = 1 for i in range(1, len(words)): if are_anagrams(words[i-1], words[i]): current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Given a string s and a dictionary of words wordDict, return the number of ways you can break the string into a sequence of one or more dictionary words. Example 1: Input: s = \\"catsanddog\\", wordDict = [\\"cat\\", \\"cats\\", \\"and\\", \\"sand\\", \\"dog\\"] Output: 2 Explanation: The two ways to break the string are: \\"cats and dog\\" and \\"cat sand dog\\". Example 2: Input: s = \\"pineapplepenapple\\", wordDict = [\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"] Output: 3 Explanation: The three ways to break the string are: \\"pine apple pen apple\\", \\"pineapple pen apple\\", and \\"pine applepen apple\\". Note: The input string length is in the range [1, 300]. The word dictionary size is in the range [1, 1000]. The answer is guaranteed to fit in a 32-bit integer.","solution":"def wordBreak(s, wordDict): Returns the number of ways to break the string s into a sequence of one or more dictionary words. word_set = set(wordDict) n = len(s) dp = [0] * (n + 1) dp[0] = 1 # One way to interpret an empty string for i in range(1, n + 1): for j in range(i): if s[j:i] in word_set: dp[i] += dp[j] return dp[n]"},{"question":"Word Reversal You are given a string containing a sentence. In this task, you will need to reverse the order of the words in the sentence while maintaining the original order of characters within each word. Write a function that takes a sentence string as input and returns a new sentence string with the words reversed. # Example: ```python reverse_words(\\"hello world\\") # should return \\"olleh dlrow\\" reverse_words(\\"The quick brown fox\\") # should return \\"ehT kciuq nworb xof\\" ```","solution":"def reverse_words(sentence): Reverses the order of characters within each word in the sentence while maintaining the original order of words. Parameters: sentence (str): A string containing the sentence to be reversed. Returns: str: A new sentence with the words reversed. words = sentence.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"The librarian needs help with organizing books in the library according to a specific pattern. The librarian has one number N to define how the pattern should look. Help the librarian to write a code for this problem. -----Input:----- - First-line will contain M, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output as the pattern. -----Constraints----- - 1 leq M leq 50 - 1 leq N leq 50 -----Sample Input:----- 3 1 2 3 -----Sample Output:----- A B C D E F G H I J K L M N O P Q R S T U ----- A B C D E F ----- A B C D E F G H I J ----- -----EXPLANATION:----- For N=3, we need to print letters in the pattern until \'F\'. Each consecutive row starts from the next letter.","solution":"def generate_pattern(N): Generates and returns the pattern of alphabets as a string for the given integer N. alphabet = \'ABCDEFGHIJKLMNOPQRSTUVWXYZ\' index = 0 result = [] for i in range(1, N + 1): row = [] for j in range(i): row.append(alphabet[index % len(alphabet)]) index += 1 result.append(\\" \\".join(row)) return \\"n\\".join(result) def organize_books(M, test_cases): For each test case in the given list of test cases, generates the pattern and returns a list of the patterns. Input: M: int - Number of test cases. test_cases: list of int - Each integer represents the value N for which pattern should be generated. Output: list of str - The generated patterns for each test case. results = [] for case in test_cases: results.append(generate_pattern(case)) return results"},{"question":"Alice is working on a new project to analyze substrings of a given string. She wants to find if there exists a substring that can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward, such as \\"level\\" or \\"radar\\". Write a function to help Alice determine if there is a substring of the given string that can be rearranged to form a palindrome. -----Input----- - The input contains a single line with a string S made up of lowercase English letters. -----Output----- Print \\"YES\\" if there exists any substring that can be rearranged to form a palindrome, and \\"NO\\" otherwise. -----Constraints----- - 1 leq |S| leq 10^5 -----Examples----- -----Example 1----- Input: carrace Output: YES Explanation: The substring \\"racecar\\" can be rearranged to \\"racecar\\", which is a palindrome. -----Example 2----- Input: abc Output: NO Explanation: No substring of \\"abc\\" can be rearranged to form a palindrome. -----Example 3----- Input: a Output: YES Explanation: The substring \\"a\\" can trivially be rearranged to \\"a\\", which is a palindrome.","solution":"def can_form_palindrome(S): Returns \\"YES\\" if there exists any substring of S that can be rearranged to form a palindrome, and \\"NO\\" otherwise. from collections import Counter # Count frequency of each character char_count = Counter(S) # Palindrome can have at most one character with an odd frequency odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # If more than one character has an odd frequency, it cannot form a palindrome if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"You are given an undirected graph represented by an adjacency list. Write a function to determine if the graph is a tree. A tree is a connected graph without cycles. ```python def is_tree(graph: dict) -> bool: # graph is represented as an adjacency list where keys are node labels # and values are lists of neighboring nodes pass # Example usage: graph1 = { 0: [1, 2], 1: [0, 3, 4], 2: [0], 3: [1], 4: [1] } is_tree(graph1) # returns True graph2 = { 0: [1, 2], 1: [0, 2], 2: [0, 1, 3], 3: [2] } is_tree(graph2) # returns False ``` Explanation: In the first example, the graph is connected and doesn\'t contain cycles, so it is a tree. In the second example, the graph contains a cycle 0-1-2-0, so it is not a tree.","solution":"def is_tree(graph: dict) -> bool: def has_cycle(node, parent): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: if has_cycle(neighbor, node): return True elif neighbor != parent: return True return False if not graph: return True visited = set() start_node = next(iter(graph)) if has_cycle(start_node, -1): return False # Check if all nodes are visited (graph is connected) return len(visited) == len(graph)"},{"question":"Write a function called `find_first_missing_positive(nums)` that takes an unsorted list of integers and returns the smallest positive integer that is missing from the list. For example, given the list `nums = [3, 4, -1, 1]`, the function should return `2`. If `nums = [1, 2, 0]`, the function should return `3`. Make sure your solution has a linear runtime complexity.","solution":"def find_first_missing_positive(nums): Returns the smallest positive integer that is missing from the list. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap elements to their correct positions nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"# Task Write a function that converts a column title as appear in an Excel sheet to its corresponding column number. In Excel, columns are numbered as follows: ``` 1 -> A 2 -> B 3 -> C ... 26 -> Z 27 -> AA 28 -> AB ... ``` Implement this function: ``` function titleToNumber(columnTitle) { // your code here } ``` # Examples For `columnTitle=\\"A\\"`, the result should be `1`. For `columnTitle=\\"AB\\"`, the result should be `28`. For `columnTitle=\\"ZY\\"`, the result should be `701`. # Inputs & Output - `[input]` string `columnTitle` A string representing the column title in Excel. - Constraints: `1 <= columnTitle.length <= 7` `columnTitle` consists only of uppercase English letters. - `[output]` integer The corresponding column number.","solution":"def titleToNumber(columnTitle): Converts a column title as appear in an Excel sheet to its corresponding column number. :param columnTitle: str - A string representing the column title in Excel. :return: int - The corresponding column number. result = 0 for i, char in enumerate(columnTitle): result = result * 26 + (ord(char) - ord(\'A\') + 1) return result"},{"question":"Given an integer, n, write a function that returns a list of the steps required to reduce n to 1 using the following rules: 1. If n is even, divide n by 2. 2. If n is odd, subtract 1 from n. The returned list should include each intermediate step, ending with 1. ```python reduce_to_one(10) => [10, 5, 4, 2, 1] reduce_to_one(7) => [7, 6, 3, 2, 1] ``` Explanation: In the `reduce_to_one(10)` example, the sequence is calculated as follows: - 10 is even, divide by 2 to get 5. - 5 is odd, subtract 1 to get 4. - 4 is even, divide by 2 to get 2. - 2 is even, divide by 2 to get 1. In the `reduce_to_one(7)` example, the sequence is calculated as follows: - 7 is odd, subtract 1 to get 6. - 6 is even, divide by 2 to get 3. - 3 is odd, subtract 1 to get 2. - 2 is even, divide by 2 to get 1. The function should minimize the number of steps required to reach 1 by making the appropriate choice between division and subtraction at each step.","solution":"def reduce_to_one(n): Reduces the given integer n to 1 following the rule: - If n is even, divide n by 2. - If n is odd, subtract 1 from n. Returns a list of steps showing the reduction process. steps = [n] while n > 1: if n % 2 == 0: n //= 2 else: n -= 1 steps.append(n) return steps"},{"question":"# Task You are given a grid of numbers where each cell contains a non-negative integer. You can move from one cell to another if they are adjacent horizontally or vertically. Each move to an adjacent cell adds the cell\'s value to your total cost of the path. Your goal is to find the minimum cost path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). Write a function that, given an n x m grid of non-negative integers, returns the minimum cost required to reach the bottom-right corner from the top-left corner. Example For `grid = [[1,3,1],[1,5,1],[4,2,1]]`, the result should be `7`. The path with the minimum cost is: `1 → 3 → 1 → 1 → 1`, with a total cost of `7`. Input/Output - `[input]` array of arrays `grid` An n x m grid of non-negative integers where `1 <= n, m <= 200`. - `[output]` an integer The minimum cost required to reach the bottom-right corner from the top-left corner. Note: In cases where either `n` or `m` is very large, you can assume that the grid can always be traversed from the top-left to the bottom-right corner, i.e., there are no isolated cells or clusters.","solution":"import heapq def min_path_cost(grid): Returns the minimum cost required to reach the bottom-right corner from the top-left corner of a grid. n = len(grid) m = len(grid[0]) directions = [(0, 1), (1, 0)] # right, down min_heap = [(grid[0][0], 0, 0)] costs = [[float(\'inf\')] * m for _ in range(n)] costs[0][0] = grid[0][0] while min_heap: cost, x, y = heapq.heappop(min_heap) if x == n - 1 and y == m - 1: return cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_cost = cost + grid[nx][ny] if new_cost < costs[nx][ny]: costs[nx][ny] = new_cost heapq.heappush(min_heap, (new_cost, nx, ny)) return costs[-1][-1]"},{"question":"Given a list of strings, group all anagrams together and return the grouped strings as a list of lists. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Example 1: Input: strs = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] Example 2: Input: strs = [\\"\\"] Output: [[\\"\\"]] Example 3: Input: strs = [\\"a\\"] Output: [[\\"a\\"]] Constraints: - 1 <= strs.length <= 10^4 - 0 <= strs[i].length <= 100 - strs[i] consists of lower-case English letters.","solution":"from collections import defaultdict def group_anagrams(strs): Groups a list of strings into anagram groups and returns them as a list of lists. Args: strs (List[str]): A list of strings. Returns: List[List[str]]: A list of lists containing grouped anagrams. anagrams = defaultdict(list) for s in strs: # Sort the string to get the anagram key sorted_str = \'\'.join(sorted(s)) anagrams[sorted_str].append(s) return list(anagrams.values())"},{"question":"You are given a string S consisting of lowercase English letters. You are allowed to perform the following operation any number of times: choose any two different characters in the string and swap them. You need to determine the lexicographically smallest string you can obtain by performing the above operation any number of times. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each test case consists of one line containing a string S. -----Output----- For each test case, print a single line containing the lexicographically smallest string you can obtain. -----Constraints----- - 1 le T le 1000 - 1 le |S| le 1000 -----Example Input----- 3 bca zyx abba -----Example Output----- abc xyz aabb -----Explanation----- Example case 1: By swapping characters \'b\' and \'a\', then \'c\' and \'b\', we get the lexicographically smallest string \'abc\'. Example case 2: The input string is \'zyx\'. By reordering all characters, we get the smallest string \'xyz\'. Example case 3: The input string is \'abba\'. Swapping \'b\' and \'a\' results in \'aabb\', which is the smallest possible string.","solution":"def lexicographically_smallest_string(S): Given a string S, returns the lexicographically smallest string that can be obtained by choosing any two different characters in the string and swapping them any number of times. return \'\'.join(sorted(S)) def process_test_cases(T, test_cases): results = [] for i in range(T): S = test_cases[i] results.append(lexicographically_smallest_string(S)) return results"},{"question":"=====Function Descriptions===== Time Delta The timedelta class is part of the datetime module. It represents the difference between two dates or times. class datetime.timedelta([days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]]) All arguments are optional and default to 0. =====Problem Statement===== You are given two timestamps in the format: DD MM YYYY HH:MM:SS Your task is to compute the absolute difference (in seconds) between the two timestamps. =====Input Format===== Two lines containing the two timestamps. =====Constraints===== The timestamps are in valid date ranges. =====Output Format===== Output the absolute difference in seconds. =====Sample Input===== Sample Input 1: 10 01 2023 12:00:00 10 01 2023 14:30:00 Sample Input 2: 01 01 2023 00:00:00 31 12 2023 23:59:59 =====Sample Output===== Sample Output 1: 9000 Sample Output 2: 31535999","solution":"from datetime import datetime def calculate_time_delta(timestamp1, timestamp2): Calculate the absolute difference in seconds between two timestamps. Parameters: - timestamp1: str, a string representing the first timestamp in the format \'DD MM YYYY HH:MM:SS\' - timestamp2: str, a string representing the second timestamp in the format \'DD MM YYYY HH:MM:SS\' Returns: - int, the absolute difference in seconds between the two timestamps. format = \\"%d %m %Y %H:%M:%S\\" dt1 = datetime.strptime(timestamp1, format) dt2 = datetime.strptime(timestamp2, format) delta = abs((dt2 - dt1).total_seconds()) return int(delta)"},{"question":"Given an array of integers heights representing the heights of trees in a forest, and an integer k representing the number of days. Each day you can select one tree and cut down a certain height from it. The height cut down on the ith day should not be greater than the height cut down on the (i + 1)th day. This means you either cut the same or more height compared to the previous day. You are required to compute the minimum possible total height of trees remaining in the forest after exactly k days using the above cutting rule. Return the minimum possible total height of trees remaining after k cuts. Example 1: Input: heights = [10, 15, 17, 20], k = 2 Output: 52 Explanation: You could cut 1 unit from the tree with height 15 on the first day and cut 1 unit from the tree with height 17 on the second day. The remaining heights would be [10, 14, 16, 20], with a total height of 60. Example 2: Input: heights = [20, 17, 13], k = 3 Output: 47 Explanation: You could cut 1 unit from the tree with height 17 on the first day, 1 unit from the tree with height 17 on the second day, and 1 unit from the tree with height 13 on the third day. The remaining heights would be [20, 15, 12], with a total height of 47. Example 3: Input: heights = [5, 5, 5, 5], k = 4 Output: 16 Explanation: You could cut 1 unit from each tree each day, making each tree\'s height 4 after cuts. The remaining heights would total 16. Constraints: 1 <= heights.length <= 10^5 1 <= heights[i] <= 10^4 1 <= k <= heights.length","solution":"def min_possible_height(heights, k): Compute the minimum possible total height of trees remaining in the forest after exactly k cuts. Args: heights (list of int): List of integer heights of trees. k (int): Number of days you can cut trees. Returns: int: The minimum possible total height of trees remaining. heights.sort() n = len(heights) for i in range(k): heights[0] -= 1 heights.sort() return sum(heights)"},{"question":"Implement a function that takes a list of integers and returns a boolean indicating whether the list contains any duplicate elements. The function should run in linear time complexity, O(n). Constraints: - The input list can be empty or contain up to 10^6 elements. - Each element in the list is an integer between -10^9 and 10^9. Examples: ```python contains_duplicates([1, 2, 3, 4]) ``` returns ``` False ``` ```python contains_duplicates([1, 2, 3, 1]) ``` returns ``` True ```","solution":"def contains_duplicates(nums): Returns True if there are any duplicates in the given list of integers, otherwise returns False. Time complexity should be O(n). seen = set() for num in nums: if num in seen: return True seen.add(num) return False"},{"question":"Task You are given a paragraph of text as a string. Your task is to count how many times each word appears in the text and return the top N most frequent words along with their counts. Words are considered the same if they are the same sequence of characters, ignoring case and punctuation. For example, \\"Hello\\", \\"hello\\", and \\"hello!\\" are all considered to be the same word. Write a function that takes in a string and an integer N and returns a list of tuples, where each tuple contains a word and its count, sorted in descending order by count. If two words have the same count, they should be sorted alphabetically (case-insensitive). Examples For `text = \\"The quick brown fox jumps over the lazy dog. The quick brown fox.\\"` and `N = 3`, the output should be `[(\'the\', 3), (\'brown\', 2), (\'fox\', 2)]`. For `text = \\"Hello, hello, HELLO!! How are you?\\"` and `N = 2`, the output should be `[(\'hello\', 3), (\'are\', 1)]`. Input/Output - `[input]` string `text` A paragraph of text containing words separated by spaces and possibly punctuated with characters like commas, periods, or exclamation points. - `[input]` integer `N` An integer indicating how many top words to return. It is guaranteed that `N` is always less than or equal to the number of unique words in the text. - `[output]` a list of tuples A list of tuples where each tuple contains a word (in lower case) and its count, sorted in descending order by the count. If two words have the same count, they should be sorted alphabetically.","solution":"import re from collections import Counter def top_n_frequent_words(text, N): Returns a list of the top N most frequent words along with their counts from the given text. Parameters: text (str): The input text string. N (int): The number of top frequent words to return. Returns: list: A list of tuples, where each tuple contains a word and its count. # Normalize the text: remove punctuation and convert to lowercase words = re.findall(r\'bw+b\', text.lower()) # Count the occurrences of each word word_counts = Counter(words) # Sort the words: first by count (descending) and then alphabetically sorted_words = sorted(word_counts.items(), key=lambda x: (-x[1], x[0])) # Return the top N words return sorted_words[:N]"},{"question":"Sara is an enthusiast of geometric algorithms and loves solving spatial problems. She has a challenge for you where she provides the coordinates of three points in a 2D plane and asks you to determine if these points form a right-angled triangle. A right-angled triangle is a triangle in which one of the angles is exactly 90 degrees. Your task is to write a program to determine if the given three points form such a triangle or not. -----Input:----- - First line will contain N, number of test cases. Then the test cases follow. - Each test case contains a single line of input, with six integers x1, y1, x2, y2, x3, y3 representing the coordinates of the three points (x1, y1), (x2, y2), (x3, y3). -----Output:----- For each test case, output \\"YES\\" if the points form a right-angled triangle, otherwise output \\"NO\\". -----Constraints----- - 1 leq N leq 1000 - 0 leq x1, y1, x2, y2, x3, y3 leq 10^4 -----Sample Input:----- 2 0 0 3 4 3 0 1 1 2 2 3 3 -----Sample Output:----- YES NO","solution":"def is_right_angle(x1, y1, x2, y2, x3, y3): Checks if the given three points form a right-angled triangle. # Calculate the square of the lengths of the sides a2 = (x1 - x2) ** 2 + (y1 - y2) ** 2 b2 = (x2 - x3) ** 2 + (y2 - y3) ** 2 c2 = (x3 - x1) ** 2 + (y3 - y1) ** 2 if a2 + b2 == c2 or a2 + c2 == b2 or b2 + c2 == a2: return \\"YES\\" else: return \\"NO\\" def check_right_angled_triangles(test_cases): Returns a list of results for the given test cases. results = [] for x1, y1, x2, y2, x3, y3 in test_cases: results.append(is_right_angle(x1, y1, x2, y2, x3, y3)) return results"},{"question":"Create a function `calculate_unique_chars(input_string)` that takes a string as input and returns a dictionary containing each unique character from the string as keys and their respective counts as values. If the input string is empty, the function should return an empty dictionary.","solution":"def calculate_unique_chars(input_string): Returns a dictionary with unique characters from the input string as keys and their respective counts as values. If the input string is empty, returns an empty dictionary. if not input_string: return {} char_count = {} for char in input_string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"A palindrome is a string that reads the same forwards and backwards. Given a string (S), you are allowed to perform the following operation any number of times: - Choose a character from (S) and move it to the front of the string. Your task is to determine the minimum number of operations required to rearrange the string (S) into a palindrome. If it is not possible to rearrange (S) into a palindrome, return (-1). ---Input:--- - The first line of the input contains a single integer (T) denoting the number of test cases. (T) lines follow. - Each line contains a single string (S). ---Output:--- - For each test case, print the minimum number of operations required to rearrange the string into a palindrome or (-1) if it\'s not possible. ---Constraints:--- - (1 leq T leq 1000) - (1 leq |S| leq 1000) ---Sample Input:--- 3 aabb ab racecar ---Sample Output:--- 0 -1 0 ---Explanation:--- - Example case 1: The string \\"aabb\\" can be rearranged to \\"abba\\" which is a palindrome, without any operations. - Example case 2: The string \\"ab\\" cannot be rearranged into a palindrome, hence the output is -1. - Example case 3: The string \\"racecar\\" is already a palindrome, so no operations are needed.","solution":"def is_possible_to_form_palindrome(s): # Count the frequency of each character freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 # Check the number of characters with odd frequency odd_count = 0 for count in freq.values(): if count % 2 != 0: odd_count += 1 # For a string to be rearranged into a palindrome, at most one character can have an odd frequency if odd_count > 1: return False return True def min_operations_to_form_palindrome(s): if not is_possible_to_form_palindrome(s): return -1 # If the string can be rearranged to form a palindrome, 0 operations are needed in our context (moving one char at a time) return 0 def min_operations_for_test_cases(test_cases): results = [] for s in test_cases: results.append(min_operations_to_form_palindrome(s)) return results"},{"question":"# Definition A **periodic number** is defined as a number whose digits repeat in periodic blocks. For instance, 1212 or 123123. # Task **_Given_** a **number** *determine if it is periodic or not* and, if it is periodic, return the length of the largest periodic block. ___ # Warm-up (Highly recommended) # [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers) ___ # Notes * The **_number_** passed to the function is **_positive_**. * If the number is not periodic, return \\"Not Periodic\\". ___ # Input >> Output Examples ``` periodicNumber(1212) -->> return 2 ``` **_Explanation_**: * `1212` consists of repeating blocks of `12`. The length of the largest periodic block is `2`. ___ ``` periodicNumber(123123) -->> return 3 ``` **_Explanation_**: * `123123` consists of repeating blocks of `123`. The length of the largest periodic block is `3`. ___ ``` periodicNumber(1234) -->> return \\"Not Periodic\\" ``` **_Explanation_**: * `1234` does not have repeating blocks. It is `Not Periodic`. ___ ___ # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays) # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"def periodicNumber(n): Determine if the number n is periodic and return the length of the largest periodic block. If not periodic, return \\"Not Periodic\\". s = str(n) length = len(s) # Try blocks of all possible lengths for block_len in range(1, length // 2 + 1): if length % block_len == 0: block = s[:block_len] if s == block * (length // block_len): return block_len return \\"Not Periodic\\""},{"question":"An international school runs an annual sports day event where students compete in different races. Each race comprises of varying laps, and students’ total times are recorded. However, to display the results in a standard format, race times need to be recorded in minutes and seconds, with each lap\'s time noted separately, and the total time accurately calculated. Your task is to write a function that takes an array of lap times in seconds and returns an object containing the following: - An array of lap times formatted as \\"mm:ss\\". - Total race time formatted as \\"mm:ss\\". Format: - If seconds are less than 10, they should be prefixed with 0. - If minutes are less than 10, they should not be prefixed with 0. Input: An array of positive integers, where each integer represents the duration of a lap in seconds. Output: An object with two properties: formattedLapTimes and totalTime, where: - formattedLapTimes is an array of strings. - totalTime is a string. Example: For the input `[125, 145, 178]`, - The function should return: ```json { \\"formattedLapTimes\\": [\\"2:05\\", \\"2:25\\", \\"2:58\\"], \\"totalTime\\": \\"7:28\\" } ``` Function Signature: ```python def format_race_times(lap_times: List[int]) -> Dict[str, Any]: pass ```","solution":"from typing import List, Dict, Any def format_race_times(lap_times: List[int]) -> Dict[str, Any]: formatted_lap_times = [] total_seconds = sum(lap_times) for lap in lap_times: minutes, seconds = divmod(lap, 60) formatted_lap_times.append(f\'{minutes}:{seconds:02}\') total_minutes, total_seconds = divmod(sum(lap_times), 60) total_time = f\'{total_minutes}:{total_seconds:02}\' return { \\"formattedLapTimes\\": formatted_lap_times, \\"totalTime\\": total_time }"},{"question":"Create a function that takes an input list of integers and returns a tuple containing two lists: one with all the prime numbers from the original list, sorted in ascending order, and one with all the composite numbers from the original list, sorted in descending order. Zero and one should be excluded from both lists. For an input list [8, 5, 1, 12, 3, 7, 15, 0, 4], the function should return ([3, 5, 7], [15, 12, 8, 4]).","solution":"def is_prime(n): Determines if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def split_and_sort_numbers(nums): Splits a list of integers into prime and composite numbers. Primes are sorted in ascending order, composites in descending order. primes = [] composites = [] for num in nums: if num <= 1: continue if is_prime(num): primes.append(num) else: composites.append(num) primes.sort() composites.sort(reverse=True) return (primes, composites) # Example usage # nums = [8, 5, 1, 12, 3, 7, 15, 0, 4] # result = split_and_sort_numbers(nums) # print(result) # Output: ([3, 5, 7], [15, 12, 8, 4])"},{"question":"Task ======= Given a matrix of integers, your task is to find the `k`-th smallest element in the matrix. The matrix is guaranteed to be sorted row-wise and column-wise. Function Signature ======== Implement a function `findKthSmallest(matrix: List[List[int]], k: int) -> int` where: - `matrix` is a list of lists of integers, representing the matrix. (1 <= len(matrix), len(matrix[0]) <= 300; -10^9 <= matrix[i][j] <= 10^9) - `k` is an integer (1 <= k <= len(matrix) * len(matrix[0])) Example ======== Input > matrix = [ > [1, 5, 9], > [10, 11, 13], > [12, 13, 15] > ] > k = 8 Output > 13 Explanation ======== The elements in the matrix in sorted order are [1, 5, 9, 10, 11, 12, 13, 13, 15]. The 8th smallest element is 13.","solution":"import heapq from typing import List def findKthSmallest(matrix: List[List[int]], k: int) -> int: Finds the k-th smallest element in a row-wise and column-wise sorted matrix. n = len(matrix) # Initialize a min-heap with the first element of each row. min_heap = [(matrix[i][0], i, 0) for i in range(min(k, n))] heapq.heapify(min_heap) while k > 0: element, row, col = heapq.heappop(min_heap) if col + 1 < len(matrix[0]): heapq.heappush(min_heap, (matrix[row][col+1], row, col+1)) k -= 1 return element"},{"question":"Given a string containing only digits and lowercase letters, write a function to determine if it is a valid hexadecimal number. A valid hexadecimal number can contain digits from 0 to 9 and letters from a to f (inclusive) only. The function should return True if the input string represents a valid hexadecimal number and False otherwise. Examples: - \\"1a3f\\" -> True - \\"123g\\" -> False (contains a non-hexadecimal character \'g\') - \\"abcde\\" -> True - \\"\\" (empty string) -> False - \\"123\\" -> True Your task is to implement the function `is_hexadecimal(s)` that takes a single argument, a string `s`, and returns a boolean indicating whether the string is a valid hexadecimal number.","solution":"def is_hexadecimal(s): Determines if the input string s is a valid hexadecimal number. A valid hexadecimal number can contain digits from 0 to 9 and letters from a to f (inclusive) only. Args: s (str): The input string to check. Returns: bool: True if the string is a valid hexadecimal number, False otherwise. if not s: return False valid_chars = set(\\"0123456789abcdef\\") for char in s: if char not in valid_chars: return False return True"},{"question":"Create a function called `findAverage` that takes a list of numbers as an input and returns the average of the numbers rounded to 2 decimal places. If the list is empty, return 0. Examples of inputs and subsequent outputs: ``` [1, 2, 3, 4, 5] -> 3.00 [10, 20, 30] -> 20.00 [] -> 0 ```","solution":"def findAverage(numbers): Returns the average of a list of numbers, rounded to 2 decimal places. If the list is empty, returns 0. if not numbers: return 0 return round(sum(numbers) / len(numbers), 2)"},{"question":"Given a string s consisting of lowercase alphabets and an integer n, determine if you can create a new string by removing exactly n characters from the original string where the new string forms a palindrome. If it is possible, return True, otherwise return False. Example 1: Input: s = \\"abca\\", n = 1 Output: true Explanation: By removing \'b\', we can get the palindrome \\"aca\\". Example 2: Input: s = \\"abcdeba\\", n = 2 Output: true Explanation: By removing \'c\' and \'d\', we can get the palindrome \\"abeeba\\". Example 3: Input: s = \\"abcd\\", n = 1 Output: false Explanation: It\'s not possible to form a palindrome by removing exactly one character. Example 4: Input: s = \\"abcba\\", n = 0 Output: true Explanation: The original string is already a palindrome. Example 5: Input: s = \\"abcdefg\\", n = 2 Output: false Explanation: It\'s not possible to form a palindrome by removing exactly two characters. Constraints: - 1 <= s.length <= 1000 - 0 <= n <= s.length","solution":"def can_form_palindrome_by_removing_n_chars(s, n): Determines if a palindrome can be formed by removing exactly n characters from the original string. def is_palindrome(x): return x == x[::-1] def can_form_palindrome(s, n): if is_palindrome(s): return True if n == 0: return False for i in range(len(s)): if can_form_palindrome(s[:i] + s[i+1:], n - 1): return True return False return can_form_palindrome(s, n)"},{"question":"You are given a list of non-negative integers, representing elevations on a map, where the width of each bar is 1. The water can only stay between bars and cannot leak to the left or right of the map. Write a function that calculates the maximum amount of water that can be trapped after raining. The function should take a list of integers as input and return a single integer representing the maximum units of water trapped. Example 1: Input: heights = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (0-indexed) can trap 6 units of water, as shown in the diagram below. * * * * * * * * * * * * 0 1 0 2 1 0 1 3 2 1 2 1 Example 2: Input: heights = [4,2,0,3,2,5] Output: 9 Explanation: The above elevation map (0-indexed) can trap 9 units of water, as shown in the diagram below. * * * * * * * * * * * * * * 4 2 0 3 2 5 Constraints: 1 <= heights.length <= 10^5 0 <= heights[i] <= 10^4","solution":"def trap(heights): Calculate the amount of water that can be trapped after raining. :param heights: List of non-negative integers representing elevations on a map. :return: Integer representing the maximum units of water trapped. if not heights: return 0 n = len(heights) left, right = 0, n - 1 left_max, right_max = heights[left], heights[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, heights[left]) water_trapped += left_max - heights[left] else: right -= 1 right_max = max(right_max, heights[right]) water_trapped += right_max - heights[right] return water_trapped"},{"question":"Find the length of the longest substring of a given string `s` that contains exactly `k` distinct characters. If there is no such substring, return -1. Example 1: Input: s = \\"eceba\\", k = 2 Output: 3 Explanation: The substring is \\"ece\\" with length 3. Example 2: Input: s = \\"aa\\", k = 1 Output: 2 Explanation: The substring is \\"aa\\" with length 2. Example 3: Input: s = \\"a\\", k = 2 Output: -1 Explanation: There is no substring with exactly 2 distinct characters. Note: 1. 1 <= s.length <= 10000 2. 1 <= k <= 26 3. `s` consists of only lowercase English letters.","solution":"def longest_substring_k_distinct(s, k): Returns the length of the longest substring with exactly k distinct characters. If no such substring exists, returns -1. from collections import defaultdict if k == 0 or not s: return -1 left = 0 right = 0 char_count = defaultdict(int) max_length = -1 while right < len(s): char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if len(char_count) == k: max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"You are given two strings `s` and `t` of equal length, consisting of only lowercase letters. Your task is to determine if two strings are \\"isomorphic\\". Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`. **Requirements:** - Each character in `s` must be mapped to exactly one character in `t`, and a character in `t` must be mapped from exactly one character in `s`. - No two characters in `s` may map to the same character in `t`, but a character in `t` can be mapped from multiple characters in `s`. Write a function `isIsomorphic(s, t)` that returns `True` if the strings are isomorphic, and `False` otherwise. **Examples:** ```python isIsomorphic(\'egg\', \'add\') # Returns True isIsomorphic(\'foo\', \'bar\') # Returns False isIsomorphic(\'paper\', \'title\') # Returns True isIsomorphic(\'ab\', \'aa\') # Returns False ``` **Constraints:** - The strings\' lengths are between 1 and 100, inclusive. - The strings consist only of lowercase Latin letters. Make sure your solution is efficient in terms of time complexity and avoid using O(n^2) algorithms.","solution":"def isIsomorphic(s, t): Check if two strings s and t are isomorphic. if len(s) != len(t): return False s_to_t_mapping = {} t_to_s_mapping = {} for char_s, char_t in zip(s, t): if char_s in s_to_t_mapping: if s_to_t_mapping[char_s] != char_t: return False else: s_to_t_mapping[char_s] = char_t if char_t in t_to_s_mapping: if t_to_s_mapping[char_t] != char_s: return False else: t_to_s_mapping[char_t] = char_s return True"},{"question":"# Task Given an array of integers, you are to find the length of the longest contiguous subarray consisting only of unique elements. In other words, you must find the longest subarray in which all elements are distinct. # Description Write a function that takes a list of integers as an input and returns the length of the longest contiguous subarray where all elements are unique. # Examples ```python # Example 1 longest_unique_subarray([2, 1, 2, 3, 4, 2]) => 4 # Explanation: The longest contiguous subarray with all unique elements is [2, 3, 4, 2], which has length 4. # Example 2 longest_unique_subarray([1, 2, 3, 4, 5]) => 5 # Explanation: All elements are unique, so the entire array is the longest subarray with unique elements. # Example 3 longest_unique_subarray([5, 5, 5, 5, 5]) => 1 # Explanation: The longest contiguous subarray with unique elements is any single element. # Example 4 longest_unique_subarray([]) => 0 # Explanation: The array is empty, so the result is 0. ``` # Remarks - If the input list is empty, the function should return 0. - You can assume that the input list contains only integers and that duplicates are appropriately handled within the list. - The function should aim for optimal time complexity.","solution":"def longest_unique_subarray(arr): Returns the length of the longest contiguous subarray with all unique elements. Parameters: arr (list): A list of integers Returns: int: The length of the longest contiguous subarray with unique elements if not arr: return 0 max_length = 0 start = 0 seen = {} for end in range(len(arr)): if arr[end] in seen and seen[arr[end]] >= start: start = seen[arr[end]] + 1 seen[arr[end]] = end max_length = max(max_length, end - start + 1) return max_length # Test cases validations assert longest_unique_subarray([2, 1, 2, 3, 4, 2]) == 4 assert longest_unique_subarray([1, 2, 3, 4, 5]) == 5 assert longest_unique_subarray([5, 5, 5, 5, 5]) == 1 assert longest_unique_subarray([]) == 0 assert longest_unique_subarray([1, 3, 5, 3, 1, 3, 5, 7]) == 4"},{"question":"Task Your task is to implement a `Matrix` class that supports matrix addition and scalar multiplication. Specifically, you should implement the following methods: 1. `__init__(self, data: List[List[int]])`: Initialize the matrix with a 2D list of integers. 2. `__add__(self, other: \'Matrix\') -> \'Matrix\'`: Implement matrix addition. It should only be possible to add matrices of the same dimensions. If the dimensions do not match, raise a `ValueError`. 3. `__mul__(self, scalar: int) -> \'Matrix\'`: Implement scalar multiplication. 4. `__str__(self) -> str`: Represent the matrix as a string in a readable form. The string representation should present each row on a new line, with elements separated by spaces. # Example ```python matrix1 = Matrix([[1, 2, 3], [4, 5, 6]]) matrix2 = Matrix([[7, 8, 9], [10, 11, 12]]) # Matrix Addition result = matrix1 + matrix2 print(result) # Output: # 8 10 12 # 14 16 18 # Scalar Multiplication result = matrix1 * 3 print(result) # Output: # 3 6 9 # 12 15 18 ``` # Constraints - Matrices will have at least 1 row and 1 column. - Matrices passed for addition will always be valid matrices with integer elements.","solution":"from typing import List class Matrix: def __init__(self, data: List[List[int]]): self.data = data def __add__(self, other: \'Matrix\') -> \'Matrix\': if len(self.data) != len(other.data) or len(self.data[0]) != len(other.data[0]): raise ValueError(\\"Matrices must have the same dimensions for addition\\") result = [ [self.data[i][j] + other.data[i][j] for j in range(len(self.data[0]))] for i in range(len(self.data)) ] return Matrix(result) def __mul__(self, scalar: int) -> \'Matrix\': result = [ [self.data[i][j] * scalar for j in range(len(self.data[0]))] for i in range(len(self.data)) ] return Matrix(result) def __str__(self) -> str: return \'n\'.join([\' \'.join(map(str, row)) for row in self.data])"},{"question":"In this task, you need to implement a function that takes a string as input and returns a list of all unique permutations of the characters in that string. Note that all characters, including spaces and other non-alphabetic characters, are to be treated as distinct. For example, given the input \\"abc\\", the output should be [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"]. - The output list should be sorted in lexicographical order. - If the input string has duplicate characters, ensure that permutations are unique. Function Signature: ```python def unique_permutations(s: str) -> List[str]: pass ``` Examples: ```python unique_permutations(\\"a\\") # Returns: [\\"a\\"] unique_permutations(\\"ab\\") # Returns: [\\"ab\\", \\"ba\\"] unique_permutations(\\"aab\\") # Returns: [\\"aab\\", \\"aba\\", \\"baa\\"] unique_permutations(\\"112\\") # Returns: [\\"112\\", \\"121\\", \\"211\\"] ``` Good luck!","solution":"from typing import List from itertools import permutations def unique_permutations(s: str) -> List[str]: Returns a list of all unique permutations of the characters in the input string. # Generate all permutations perms = set(permutations(s)) # Convert the perms set to a list of strings unique_perms = [\'\'.join(p) for p in perms] # Sort the result list in lexicographical order unique_perms.sort() return unique_perms"},{"question":"Write a function that takes an integer array `nums` and an integer `target`, and returns the number of unique pairs in the array that sum up to the `target`. Example: Input: nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10 Output: 4 Explanation: The unique pairs that sum up to 10 are: (1, 9), (2, 8), (3, 7), and (4, 6).","solution":"def count_unique_pairs(nums, target): Returns the number of unique pairs in nums that sum up to target. seen = set() unique_pairs = set() for num in nums: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) unique_pairs.add(pair) seen.add(num) return len(unique_pairs)"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the prime numbers from the original list. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Implement the function using list comprehension.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def filter_primes(numbers): Returns a list of prime numbers from the given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"You are given an undirected graph with N nodes and M edges. Each edge has a weight associated with it. You need to find the weight of the minimum spanning tree (MST) of the graph. If the graph is not connected, print -1 instead. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M. - The following M lines of each test case contain three space-separated integers U, V, and W denoting an edge between node U and node V with weight W. -----Output----- For each test case, print a single line containing one integer — the weight of the minimum spanning tree, or -1 if the graph is not connected. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 10000 - 1 ≤ U, V ≤ N - 1 ≤ W ≤ 10000 -----Subtasks----- Subtask #1 (20 points): 1 ≤ N, M ≤ 100 Subtask #2 (80 points): original constraints -----Example----- Input: 2 4 5 1 2 10 1 3 6 2 3 5 3 4 2 2 4 15 3 1 1 2 5 2 3 10 3 1 7 Output: 23 12 -----Explanation----- Example case 1: The MST includes edges (3,4), (2,3), and (1,3) with weights 2, 5, and 6 respectively. The resulting weight of the MST is 2+5+6=13. Example case 2: The MST includes all provided edges (1,2), (2,3), and (3,1) with weights 5, 10, and 7 respectively. The resulting weight of the MST is 7+5=12 (choosing the edge with weight 10 would make a cycle).","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(n, edges): edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 mst_edges = 0 for edge in edges: u, v, w = edge root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: mst_weight += w mst_edges += 1 union(parent, rank, root_u, root_v) if mst_edges == n - 1: break if mst_edges == n - 1: return mst_weight else: return -1 def solve_mst_problems(test_cases): results = [] for n, m, edges in test_cases: mst_weight = kruskal_mst(n, edges) results.append(mst_weight) return results"},{"question":"Write a function that takes a start time and an end time in 24-hour format (hh:mm), and returns the difference between the two time points in hours and minutes. The function should correctly handle cases where the end time is on the following day. Examples: Input: start_time = \\"18:30\\", end_time = \\"20:45\\" Output: \\"2 hours and 15 minutes\\" Input: start_time = \\"22:15\\", end_time = \\"01:00\\" Output: \\"2 hours and 45 minutes\\" Input: start_time = \\"08:00\\", end_time = \\"08:00\\" Output: \\"0 hours and 0 minutes\\" Input: start_time = \\"23:50\\", end_time = \\"00:20\\" Output: \\"0 hours and 30 minutes\\"","solution":"def time_difference(start_time, end_time): Returns the difference between two time points in hours and minutes. The times are given in 24-hour format (hh:mm). start_hours, start_minutes = map(int, start_time.split(\':\')) end_hours, end_minutes = map(int, end_time.split(\':\')) # Convert start and end times to minutes since midnight start_total_minutes = start_hours * 60 + start_minutes end_total_minutes = end_hours * 60 + end_minutes # Calculate the difference in minutes if end_total_minutes >= start_total_minutes: difference_minutes = end_total_minutes - start_total_minutes else: # If end time is on the next day difference_minutes = (24 * 60 - start_total_minutes) + end_total_minutes hours = difference_minutes // 60 minutes = difference_minutes % 60 return f\\"{hours} hours and {minutes} minutes\\""},{"question":"Given a binary tree, your task is to write a function that returns the top view of the binary tree. The top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the top view, nodes are sorted by their horizontal distance from the root. # Function Signature ```python def top_view(root: Optional[TreeNode]) -> List[int]: ``` # Input - `root`: A `TreeNode` object representing the root of the binary tree. The `TreeNode` class is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Output - A list of integer values representing the nodes that are visible from the top view of the tree, sorted by their horizontal distance from left to right. # Example ```python # Create the binary tree. # 1 # / # 2 3 # / / # 4 5 6 7 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) root.right.left = TreeNode(6) root.right.right = TreeNode(7) assert top_view(root) == [4, 2, 1, 3, 7] ``` # Notes - Assume the input binary tree will always have at least one node. - Handle cases where the tree might be skewed (all nodes either to the left or right). - You may use any standard library or auxiliary classes.","solution":"from typing import List, Optional from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def top_view(root: Optional[TreeNode]) -> List[int]: if not root: return [] # Queue to store nodes along with their horizontal distance queue = deque([(root, 0)]) # Dictionary to store the first node at each horizontal distance top_view_map = {} min_hd = max_hd = 0 while queue: node, hd = queue.popleft() if hd not in top_view_map: top_view_map[hd] = node.val if node.left: queue.append((node.left, hd - 1)) min_hd = min(min_hd, hd - 1) if node.right: queue.append((node.right, hd + 1)) max_hd = max(max_hd, hd + 1) return [top_view_map[hd] for hd in range(min_hd, max_hd + 1)]"},{"question":"Implement a function that takes a list of integers and returns a new list where each element is the product of all the integers in the input list except for the integer at that position. You should not use division in your solution. For example, given the list `[1, 2, 3, 4]`, the expected output is `[24, 12, 8, 6]` because: - 24 = 2 * 3 * 4 - 12 = 1 * 3 * 4 - 8 = 1 * 2 * 4 - 6 = 1 * 2 * 3 You can assume that the input list will contain at least two integers and that all integers are non-zero.","solution":"def product_except_self(nums): Returns a list such that each element at index i of the output list is the product of all the numbers in the input list except nums[i]. Args: nums: List[int] - the input list of integers Returns: List[int] - the product list length = len(nums) # Initialize the result array with 1\'s result = [1] * length # Calculate prefix products prefix = 1 for i in range(length): result[i] = prefix prefix *= nums[i] # Calculate suffix products and multiply with prefix products suffix = 1 for i in range(length - 1, -1, -1): result[i] *= suffix suffix *= nums[i] return result"},{"question":"You are given a string containing a sequence of letters. Your task is to determine the longest substring of the string that does not contain any repeating characters. # Input - A string ```s``` where each character is a lower-case letter (a-z). # Output - Return the length of the longest substring with all unique characters. # Examples ``` s = \\"abcabcbb\\" expected = 3 # \\"abc\\" s = \\"bbbbb\\" expected = 1 # \\"b\\" s = \\"pwwkew\\" expected = 3 # \\"wke\\" ``` # Constraints - The input string will have at most 1000 characters.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring of s that does not contain any repeating characters. char_index_map = {} start = 0 max_length = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are tasked with creating a new digital bookshelf for an online library. Each book on the bookshelf is represented as a tuple (Title, Author, Year Published). Users can add new books, remove existing books, and sort the bookshelf by title, author, or year published. Write a program that performs the following operations: 1. Add a book to the bookshelf. 2. Remove a book from the bookshelf by its title. 3. Sort the bookshelf by title, author, or year published. 4. Print the current state of the bookshelf. The bookshelf should initially be empty. The input to your program will be a list of operations, where each operation is a tuple. You should process the operations and output the state of the bookshelf after each operation, using a similar format: ``` [ (\\"add\\", (\\"The Hobbit\\", \\"J.R.R. Tolkien\\", 1937)), (\\"add\\", (\\"1984\\", \\"George Orwell\\", 1949)), (\\"remove\\", \\"The Hobbit\\"), (\\"sort\\", \\"author\\") ] ``` Output: ``` [(\'1984\', \'George Orwell\', 1949)] ``` Function signature: `def manage_bookshelf(operations: List[Tuple[str, Union[str, Tuple[str, str, int]]]]) -> List[Tuple[str, str, int]]:`","solution":"from typing import List, Tuple, Union def manage_bookshelf(operations: List[Tuple[str, Union[str, Tuple[str, str, int]]]]) -> List[Tuple[str, str, int]]: bookshelf = [] for operation in operations: if operation[0] == \\"add\\": bookshelf.append(operation[1]) elif operation[0] == \\"remove\\": title_to_remove = operation[1] bookshelf = [book for book in bookshelf if book[0] != title_to_remove] elif operation[0] == \\"sort\\": sort_by = operation[1] if sort_by == \\"title\\": bookshelf.sort(key=lambda x: x[0]) elif sort_by == \\"author\\": bookshelf.sort(key=lambda x: x[1]) elif sort_by == \\"year\\": bookshelf.sort(key=lambda x: x[2]) return bookshelf"},{"question":"You are given two strings, s1 and s2, of potentially different lengths. Your task is to find the longest uncommon subsequence (LUS). The LUS is defined as a subsequence that is a subsequence of one but not the other. You need to find the length of the longest uncommon subsequence between s1 and s2. If the longest uncommon subsequence does not exist, return -1. Example 1: Input: s1 = \\"abc\\", s2 = \\"cdc\\" Output: 3 Explanation: The longest uncommon subsequence is \\"abc\\" which is only a subsequence of s1. Example 2: Input: s1 = \\"aaa\\", s2 = \\"bbb\\" Output: 3 Explanation: The longest uncommon subsequence is \\"aaa\\" which is only a subsequence of s1. Example 3: Input: s1 = \\"aaa\\", s2 = \\"aaa\\" Output: -1 Explanation: There is no uncommon subsequence because both strings are equal. Note: - Both s1 and s2 consist of lowercase English letters. - The length of s1 and s2 will not exceed 100.","solution":"def find_lus_length(s1, s2): Returns the length of the longest uncommon subsequence between s1 and s2. If the longest uncommon subsequence does not exist, returns -1. if s1 == s2: return -1 return max(len(s1), len(s2))"},{"question":"Given a string `S` consisting of only lowercase alphabets, you need to determine the length of the longest substring that contains at most two distinct characters. -----Input----- - The first line of input contains a single integer `T`, the number of test cases. - The first line of each test case contains the string `S`. -----Output----- For each test case, print a single line containing the length of the longest substring of `S` that contains at most two distinct characters. -----Constraints----- - `1 leq T leq 100` - `1 leq |S| leq 1000` - `S` will consist of only lowercase alphabets. -----Subtasks----- Subtask #1 (100 points): Original constraints -----Example Input----- 2 abcbaa abcabcabc -----Example Output----- 3 2 -----Explanation----- Example case 1: The longest substring with at most two distinct characters is \\"bcb\\" or \\"baa\\" which both have a length of 3. Example case 2: Any substring containing at most two characters from \\"abcabcabc\\" has a maximum length of 2, such as \\"ab\\", \\"bc\\", or \\"ca\\".","solution":"def length_of_longest_substring_two_distinct(s: str) -> int: Returns the length of the longest substring with at most two distinct characters. n = len(s) if n < 3: return n # Sliding window approach left, right = 0, 0 max_len = 2 # Dictionary to keep track of characters in the current window char_map = {} while right < n: char = s[right] # Add the new character to the map if char in char_map: char_map[char] += 1 else: char_map[char] = 1 # If there are more than 2 distinct characters while len(char_map) > 2: left_char = s[left] char_map[left_char] -= 1 if char_map[left_char] == 0: del char_map[left_char] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len def process_test_cases(test_cases): results = [] for s in test_cases: results.append(length_of_longest_substring_two_distinct(s)) return results # Example input processing: # Example: T = 2, strings = [\\"abcbaa\\", \\"abcabcabc\\"] def main(input_list): T = int(input_list[0]) test_cases = input_list[1:T+1] return process_test_cases(test_cases)"},{"question":"**Background** In the world of standardized testing, multiple-choice questions (MCQs) are a common format. One key feature that sets apart effective MCQs is their ability to evaluate not only a student\'s grasp of factual knowledge but also their critical thinking and problem-solving abilities. You are required to implement a function that will auto-generate a list of randomized multiple-choice questions based on given concepts and distractors. Each question should present a concept and provide four answer choices: one correct answer and three distractors. The function should ensure that the correct option is randomly placed among the four choices each time it\'s called. **Task** Write a function, `generateMCQ`, that takes in two parameters: a list of concepts and a dictionary of distractors. Each concept in the list has a correct answer, and the dictionary maps each concept to a list of plausible but incorrect answers. Your function should generate a specified number of multiple-choice questions (MCQs) in the form of text strings with randomly positioned correct answers. Each generated question should be in the format: ``` Q: [concept] a) [choice1] b) [choice2] c) [choice3] d) [choice4] ``` The function should return a list of such question strings. Example: ```python concepts = [ (\'What is the capital of France?\', \'Paris\'), (\'What is 2+2?\', \'4\') ] distractors = { \'What is the capital of France?\': [\'London\', \'Berlin\', \'Madrid\'], \'What is 2+2?\': [\'3\', \'5\', \'6\'] } generateMCQ(concepts, distractors, 2) ``` Possible output: ```python [ \\"Q: What is the capital of France?na) Berlinnb) Parisnc) Madridnd) London\\", \\"Q: What is 2+2?na) 3nb) 4nc) 6nd) 5\\" ] ``` **Hints** - Ensure each generated question has its correct answer randomly positioned among the choices. - Consider using Python\'s `random.shuffle` for randomizing answer options. **Resources** For more on multiple-choice questions, see: https://en.wikipedia.org/wiki/Multiple-choice","solution":"import random def generateMCQ(concepts, distractors, num_questions): Generates a specified number of multiple-choice questions (MCQs). Args: concepts (list of tuples): Each tuple contains a question (str) and its correct answer (str). distractors (dict): A dictionary mapping each question to a list of distractors (incorrect answers). num_questions (int): Number of MCQs to generate. Returns: list: A list of generated MCQs in string format. mcqs = [] for i in range(min(num_questions, len(concepts))): concept, correct_answer = concepts[i] wrong_answers = distractors.get(concept, []) # Shuffle the correct answer into the list of wrong answers all_answers = wrong_answers + [correct_answer] random.shuffle(all_answers) # Create the question string question_str = f\\"Q: {concept}n\\" options = [\'a\', \'b\', \'c\', \'d\'] for j, answer in enumerate(all_answers): question_str += f\\"{options[j]}) {answer}n\\" mcqs.append(question_str.strip()) return mcqs"},{"question":"# Astronomical Unit Calculator The Task You are part of a team developing educational software for schools. An assigned task is to create a function that helps students calculate the distance between planets in our solar system using their distances from the Sun measured in Astronomical Units (AU). Write a function `distance_between_planets` that takes two planet names as input and returns the distance between them in AU. # The Database The distances of the planets from the Sun in Astronomical Units (AU) are as follows: ```python planet_distances = { \'mercury\': 0.39, \'venus\': 0.72, \'earth\': 1.00, \'mars\': 1.52, \'jupiter\': 5.20, \'saturn\': 9.58, \'uranus\': 19.22, \'neptune\': 30.05, \'pluto\': 39.48 # Though Pluto is a dwarf planet, include it for educational value. } ``` # Function Requirements - The function should take two arguments `planet_a` and `planet_b`, which are strings representing the names of the planets. - The function should return the absolute difference in AU between the two planets. - Ensure the function handles potential invalid inputs gracefully by returning an descriptive error message in the case that: 1. One or both of the planet names are not in the database. 2. The input is not a string. # Example Function Calls and Expected Outputs ```python distance_between_planets(\'earth\', \'mars\') # Output: 0.52 distance_between_planets(\'jupiter\', \'neptune\') # Output: 24.85 distance_between_planets(\'mars\', \'pluto\') # Output: 37.96 distance_between_planets(\'earth\', \'jupyter\') # Output: \\"Error: One or both planet names are not in the database.\\" distance_between_planets(123, \'venus\') # Output: \\"Error: Both inputs must be strings representing planet names.\\" ``` Your solution should be efficient and use fundamental programming concepts such as functions, conditionals, and dictionaries.","solution":"planet_distances = { \'mercury\': 0.39, \'venus\': 0.72, \'earth\': 1.00, \'mars\': 1.52, \'jupiter\': 5.20, \'saturn\': 9.58, \'uranus\': 19.22, \'neptune\': 30.05, \'pluto\': 39.48 } def distance_between_planets(planet_a, planet_b): Returns the distance between two planets in astronomical units (AU). Handles invalid inputs by returning an error message. Parameters: planet_a (str): The name of the first planet. planet_b (str): The name of the second planet. Returns: float or str: The distance in AU between the two planets or an error message. if not isinstance(planet_a, str) or not isinstance(planet_b, str): return \\"Error: Both inputs must be strings representing planet names.\\" planet_a = planet_a.lower() planet_b = planet_b.lower() if planet_a not in planet_distances or planet_b not in planet_distances: return \\"Error: One or both planet names are not in the database.\\" distance = abs(planet_distances[planet_a] - planet_distances[planet_b]) return distance"},{"question":"Given a list of integers, find and print the maximum difference between any two elements in the list. The maximum difference is defined as the largest absolute difference between any two elements of the list. -----Input:----- - The first line contains a single integer T denoting the number of test cases. - The description of T test cases is as follows: - The next line contains a single integer N which denotes the number of elements in the list. - The next line contains N space-separated integers denoting the elements of the list. -----Output:----- - For each test case, print the maximum difference as defined above. Each output must be printed on a new line. -----Constraints:----- - 1 leq T leq 100 - 2 leq N leq 10^4 - -10^6 leq Each integer leq 10^6 -----Sample Input:----- 2 5 1 2 3 4 5 4 7 2 -3 5 -----Sample Output:----- 4 10 -----Explanation:----- - In the first test case, the maximum difference is between the largest element (5) and the smallest element (1), so the difference is 5 - 1 = 4. - In the second test case, the maximum difference is between 7 and -3, so the difference is 7 - (-3) = 10.","solution":"def max_difference_in_list(test_cases): results = [] for case in test_cases: N, elements = case max_elem = max(elements) min_elem = min(elements) max_diff = abs(max_elem - min_elem) results.append(max_diff) return results def parse_input(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) elements = list(map(int, input_lines[index + 1].split())) test_cases.append((N, elements)) index += 2 return test_cases"},{"question":"In a certain game, players need to collect various items to progress to the next level. The game keeps track of the collected items using a list of strings, where each string is the name of an item. However, the list might contain duplicate items, and the items must be collected in the order they first appear in the list. Additionally, the game is case-insensitive, so \'Sword\' and \'sword\' are considered the same item. Write a function called `collect_items()` that takes a list of item names and returns a list of items with duplicates removed, while preserving the original order of first appearances and treating the names case-insensitively. ```python def collect_items(item_list): # Your code here ``` # Example Input: `[\\"Sword\\", \\"shield\\", \\"Potion\\", \\"sword\\", \\"Shield\\", \\"SWORD\\", \\"potion\\"]` Output: `[\\"Sword\\", \\"shield\\", \\"Potion\\"]` **Note** - The first appearance of \\"Sword\\" is at index 0. - The first appearance of \\"shield\\" is at index 1. - The first appearance of \\"Potion\\" is at index 2. - All subsequent appearances of these items (irrespective of case) are ignored.","solution":"def collect_items(item_list): Removes duplicate items from the list, treating names case-insensitively, while preserving the original order of their first appearance. seen = set() result = [] for item in item_list: lowercase_item = item.lower() if lowercase_item not in seen: seen.add(lowercase_item) result.append(item) return result"},{"question":"# Description: Write a function that finds all the prime numbers in a given range. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. # Examples: ``` find_primes(10, 20) === [11, 13, 17, 19] find_primes(2, 10) === [2, 3, 5, 7] find_primes(15, 30) === [17, 19, 23, 29] find_primes(1, 5) === [2, 3, 5] ``` # Constraints: - The function should take two integers as input. - Ensure the function handles edge cases where the range starts at a number less than 2 or the start number is greater than the end number.","solution":"def find_primes(start, end): Returns a list of prime numbers in the given inclusive range [start, end]. def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5)+1, 2): if n % i == 0: return False return True return [num for num in range(start, end + 1) if is_prime(num)]"},{"question":"You are a part of a coding competition where you have to solve unique problems. Your current task is to work with patterns formed by sequences of integers. Consider a sequence of integers S, where each element Si can be either 0 or 1, representing an open \'0\' or closed \'1\' position. You are given multiple queries asking you to determine the length of the longest contiguous subarray of \'0\'s within a specified subarray of S. -----Input:----- - The first line of input contains two integers N and Q. - N represents the length of the sequence S. - Q represents the number of queries. - The second line contains N space-separated integers representing the sequence S. - Each of the next Q lines contains two integers, L and R, indicating the start and end indices (inclusive) of the subarray for which the query needs to be answered. -----Output:----- For each query, output a single integer representing the length of the longest contiguous subarray of \'0\'s within the specified subarray from index L to R. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ L ≤ R ≤ N - S[i] is either 0 or 1. -----Sample Input:----- 10 3 1 0 0 1 0 1 1 0 0 0 1 10 2 7 8 10 -----Sample Output:----- 3 2 3 -----Explanation:----- In the given sample input, the sequence S is [1, 0, 0, 1, 0, 1, 1, 0, 0, 0]. - For the first query (1, 10), the subarray is the entire array and the longest contiguous subarray of \'0\'s is [0, 0, 0]. - For the second query (2, 7), the subarray is [0, 0, 1, 0, 1, 1] and the longest contiguous subarray of \'0\'s is [0, 0]. - For the third query (8, 10), the subarray is [0, 0, 0] and the longest contiguous subarray of \'0\'s is the whole subarray itself.","solution":"def find_longest_zero_sequence(S, L, R): Finds the longest contiguous subarray of \'0\'s within the subarray of S from index L to R. # To handle 1-based index L and R. subarray = S[L-1:R] max_length, current_length = 0, 0 for num in subarray: if num == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length def process_queries(N, Q, S, queries): results = [] for L, R in queries: results.append(find_longest_zero_sequence(S, L, R)) return results"},{"question":"You are given a string containing only digits. Your task is to determine how many ways you can partition the string into non-empty substrings such that each substring represents a prime number. Each partitioning should use every character of the string exactly once. Note: - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. - Leading zeros are not allowed in any partitioned substring. Example 1: Input: \\"11373\\" Output: 6 Explanation: The possible partitions are: [\\"11\\",\\"3\\",\\"7\\",\\"3\\"], [\\"11\\",\\"37\\",\\"3\\"], [\\"11\\",\\"3\\",\\"73\\"], [\\"11\\",\\"37\\",\\"3\\"], [\\"113\\",\\"7\\",\\"3\\"], [\\"11373\\"] Example 2: Input: \\"3175\\" Output: 3 Explanation: The possible partitions are: [\\"3\\",\\"17\\",\\"5\\"], [\\"3\\",\\"7\\",\\"5\\"], [\\"31\\",\\"7\\",\\"5\\"]","solution":"def is_prime(n): Check if a number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def count_prime_partitions(s): Return the number of ways to partition the string s into non-empty substrings such that each substring represents a prime number. length = len(s) dp = [0] * (length + 1) dp[0] = 1 # There\'s one way to partition an empty string. for i in range(1, length + 1): for j in range(i): if s[j] != \'0\' and is_prime(int(s[j:i])): dp[i] += dp[j] return dp[-1]"},{"question":"You are given a sequence A_1, A_2, ldots, A_N. Each element of the sequence represents the height of a tree. You can cut down a tree to make its height equal to zero. Find the maximum number of trees you can cut down such that no two consecutive trees are cut down. -----Input----- - The first line of the input contains a single integer T which denotes the number of test cases. - The first line of each test case contains a single integer N . - The second line of each test case contains N space-separated integers A_1, A_2, ldots, A_N representing the height of the trees. -----Output----- For each test case, print a single line containing one integer ― the maximum number of trees that can be cut down. -----Constraints----- - 1 le T le 10 - 1 le N le 10^5 - 1 le A_i le 10^6 -----Subtasks----- Subtask #1 (20 points): sum of N over all test cases does not exceed 5,000 Subtask #2 (80 points): original constraints -----Example Input----- 2 5 1 2 3 4 5 4 5 5 5 5 -----Example Output----- 3 2 -----Explanation----- In the first test case, you can cut down trees at positions 1, 3, and 5, or positions 2 and 4 (i.e., the maximum you can cut down is 3 trees). In the second test case, you can cut down trees at positions 1 and 3, or positions 2 and 4 (i.e., the maximum you can cut down is 2 trees).","solution":"def max_trees_cut(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] heights = test_cases[i][1] # The maximum number of non-consecutive trees you can cut is (N + 1) // 2 max_cut = (n + 1) // 2 results.append(max_cut) return results"},{"question":"You are given a string S of length N. Your task is to find the character which appears the maximum number of times in S and its corresponding count. If there is a tie, return the character which is lexicographically smallest. -----Input----- The first line of input contains an integer T, denoting the number of test cases. Then follows the description of T cases. Each case begins with a single integer N, the length of S. The next line contains a string S of length N. Assume that 1 <= T <= 100, 1 <= N <= 100 and S consists of only lowercase alphabets. -----Output----- For each test case, output two space-separated values: the character which appears the maximum number of times and its count. -----Example----- Input: 2 7 abacaba 4 bcbb Output: a 4 b 3 Description: In the first case, \'a\' appears 4 times, \'b\' appears 2 times and \'c\' appears 1 time. \'a\' is the maximum occurring character. In the second case, \'b\' appears 3 times and \'c\' appears 1 time.","solution":"def max_char_count(t, test_cases): results = [] for case in test_cases: n, s = case char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_count = max(char_count.values()) max_char = min([char for char in char_count if char_count[char] == max_count]) results.append((max_char, max_count)) return results"},{"question":"Write a function that takes two arguments, a string and an integer n. The function should return a new string consisting of every n-th character of the original string starting from the first character. If n is greater than the length of the string, return the original string. For example: - If the input string is \\"abcdefg\\" and n is 2, the function should return \\"aceg\\". - If the input string is \\"hello world\\" and n is 3, the function should return \\"hlwl\\". - If the input string is \\"python\\" and n is 6, the function should return \\"p\\". - If the input string is \\"programming\\" and n is 12, the function should return \\"programming\\". Make sure your function handles edge cases such as an empty string or a negative value of n appropriately.","solution":"def every_nth_character(s, n): Returns a new string consisting of every n-th character of the original string starting from the first character. If n is greater than the length of the string, return the original string. if not s or n <= 0: return s if n > len(s): return s return s[::n]"},{"question":"You are given an incomplete function named `reverse_words(sentence)` (or `reverseWords(sentence)` depending on the language) that is supposed to take a string input representing a sentence and return a new string where the order of words is reversed. Your task is to complete the implementation. For example: - `reverse_words(\\"Hello World\\")` should return `\\"World Hello\\"` - `reverse_words(\\"Coding is fun\\")` should return `\\"fun is Coding\\"` Additional requirements: 1. The function should preserve the original white spaces. 2. Edge cases such as multiple spaces and an empty string should be handled properly. Implement the function `reverse_words(sentence)` in your preferred programming language.","solution":"def reverse_words(sentence): Returns a new string where the order of words in the input sentence is reversed. Words are considered sequences of characters separated by spaces. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Create a function called `merge_sorted_lists` that merges two sorted lists of integers into one sorted list. * The function should take two parameters: `list1` and `list2`, which are the two sorted lists to be merged. * The function should return a new list containing all elements from `list1` and `list2`, sorted in non-decreasing order. **Constraints:** * Both input lists are sorted in non-decreasing order. * Use a linear time algorithm to merge the lists (i.e., avoid using in-built sorting functions for the final merge). # Example **Input:** ```python list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8] ``` **Output:** ```python [1, 2, 3, 4, 5, 6, 7, 8] ``` **Notes:** A detailed explanation of the process is also welcome.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list in non-decreasing order. Parameters: list1 (list of int): The first sorted list to be merged. list2 (list of int): The second sorted list to be merged. Returns: list of int: A new sorted list containing all elements from list1 and list2. merged_list = [] i, j = 0, 0 # Traverse both lists and append the smaller element to the merged_list while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If any elements remain in list1, add them to merged_list while i < len(list1): merged_list.append(list1[i]) i += 1 # If any elements remain in list2, add them to merged_list while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Implement a function to find the longest increasing subsequence (LIS) in a given array of integers. The function should return the length of the LIS. An increasing subsequence is a sequence of elements arranged in ascending order and it does not need to be contiguous in the array, but it must maintain the relative order of elements. # Function Signature ```python def longest_increasing_subsequence(nums: List[int]) -> int: pass ``` # Input - `nums`: A list of integers, where `1 <= len(nums) <= 2500` and `-10^4 <= nums[i] <= 10^4`. # Output - Return a single integer: the length of the longest increasing subsequence. # Examples ```python assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 assert longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1 assert longest_increasing_subsequence([1, 3, 6, 7, 9, 4, 10, 5, 6]) == 6 ``` # Notes - The LIS can start and end at any index. - Dynamic programming or a combination of binary search and dynamic programming can be used to solve the problem efficiently.","solution":"from typing import List def longest_increasing_subsequence(nums: List[int]) -> int: Returns the length of the longest increasing subsequence in the given list of integers. if not nums: return 0 # Initialize the dp array to store the length of LIS ending at each index dp = [1] * len(nums) # Build the dp array for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the LIS is the maximum value in the dp array return max(dp)"},{"question":"In a quiet village, there are N houses aligned in a straight row. Each house has a certain amount of treasure. Given the amount of treasure in each house, a thief can rob a house but cannot rob two consecutive houses due to the risk of getting caught. The thief wants to maximize the amount of treasure he can steal. However, there is one condition: if the first house is robbed, the last house cannot be robbed, and vice versa. Write a function `maxTreasure(treasures)` that takes a list of integers `treasures` where each integer represents the amount of treasure in a house. The function should return the maximum amount of treasure the thief can rob without robbing two consecutive houses and adhering to the condition mentioned above. -----Input:----- - A single list of integers `treasures` where 1 <= len(treasures) <= 1000 and 0 <= treasures[i] <= 1000, representing the amount of treasure in each house. -----Output:----- - An integer representing the maximum amount of treasure the thief can rob. -----Constraints:----- - The function should run efficiently with respect to time and space complexity to handle the upper constraints. -----Example:-----Input: [2, 3, 2] Output: 3 -----Explanation:-----In the above example, the thief can choose to rob either the first house or the last house but not both. The optimal solution is to rob the second house to get the maximum amount of treasure, which is 3.","solution":"def maxTreasure(treasures): if not treasures: return 0 if len(treasures) == 1: return treasures[0] if len(treasures) == 2: return max(treasures) def rob_linear(houses): n = len(houses) dp = [0] * n if n >= 1: dp[0] = houses[0] if n >= 2: dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + houses[i]) return dp[-1] return max(rob_linear(treasures[:-1]), rob_linear(treasures[1:]))"},{"question":"Given a 2D grid of size `n x m` filled with non-negative numbers, find a path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time. Write a function `minPathSum(grid)` that takes a 2D list `grid` as input and returns the minimum sum of the path from the top-left to bottom-right corner. # Input: - A list of lists `grid`, where `grid[i][j]` is a non-negative integer representing the value at cell `(i, j)`. - The dimensions of the grid, `n` and `m`, are such that `1 <= n, m <= 100`. # Output: - An integer representing the minimum sum of the path from the top-left to bottom-right corner. # Example: ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(minPathSum(grid)) ``` Output: ```plaintext 7 ``` Explanation: The path 1 → 3 → 1 → 1 → 1 has the minimum sum 7.","solution":"def minPathSum(grid): Returns the minimum sum of the path from the top-left to bottom-right corner of the grid. :param grid: List[List[int]] - 2D list representing the grid :return: int - Minimum sum of the path if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) # Create a dp array to store the cumulative path sums dp = [[0] * m for _ in range(n)] # Initialize the top-left corner dp[0][0] = grid[0][0] # Fill in the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill in the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The value in the bottom-right corner is the answer return dp[n - 1][m - 1]"},{"question":"Given an array of positive integers representing the jumps you can make from each index, determine if you can reach the last index starting from the first index. Example: Input: [2,3,1,1,4] Output: True Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. Input: [3,2,1,0,4] Output: False Explanation: You will always arrive at index 3 no matter what, but its jump length is 0 which makes it impossible to reach the last index. Note: - You can assume that you can always jump out of the bounds of the array if you have enough jumps. Constraints: - 1 <= nums.length <= 10^4 - 0 <= nums[i] <= 1000","solution":"def can_jump(nums): Given an array of positive integers representing the jumps you can make from each index, determine if you can reach the last index starting from the first index. max_reachable = 0 for i, jump in enumerate(nums): if i > max_reachable: return False max_reachable = max(max_reachable, i + jump) return True"},{"question":"You are given a square grid of size `n x n`. Each cell is either empty (represented by a `0`) or contains an obstacle (represented by a `1`). You start from the top-left corner of the grid and want to reach the bottom-right corner of the grid. You can move up, down, left, or right, but you cannot pass through obstacles. Write a function that determines if there\'s a path from the top-left corner to the bottom-right corner of the grid. The function should return `True` if there is a way to get to the bottom-right corner, and `False` otherwise. Function Signature: ```python def is_path(grid: List[List[int]]) -> bool: ``` # Function Input: - `grid` (A 2D list): A 2D list of integers where `grid[i][j]` is either `0` (no obstacle) or `1` (an obstacle), representing the given grid. # Function Output: - A boolean value: `True` if there is a path from the top-left corner (0,0) to the bottom-right corner (n-1,n-1), and `False` otherwise. # Example: ```python grid = [ [0, 1, 0, 0], [0, 0, 1, 0], [1, 0, 0, 0], [0, 0, 0, 0] ] is_path(grid) # Output: True grid = [ [0, 1, 0, 0], [1, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0] ] is_path(grid) # Output: False ``` # Constraints: - The grid size `n x n` is such that `1 <= n <= 100`. - The grid contains only `0`s and `1`s.","solution":"from typing import List def is_path(grid: List[List[int]]) -> bool: Determines if there\'s a path from the top-left corner to the bottom-right corner of the grid. n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return False directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def dfs(r, c): if r == n-1 and c == n-1: return True grid[r][c] = 1 # Mark the cell as visited for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < n and grid[nr][nc] == 0: if dfs(nr, nc): return True return False return dfs(0, 0)"},{"question":"Maria enjoys playing a game where she collects cards, each labeled with a positive integer. She wants to sort a collection of these cards in descending order to display her highest valued cards first. Write a program that takes an initial list of card values and outputs the values sorted in descending order. -----Input----- The first line contains an integer N, the total number of cards. The second line contains N integers, representing the values on the cards Maria has collected. -----Output----- Output the card values sorted in descending order in a single line. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ Card Value ≤ 100000 -----Example----- Input 5 3 10 4 6 8 Output 10 8 6 4 3","solution":"def sort_cards_descending(n, card_values): Returns the card values sorted in descending order. Parameters: n (int): Total number of cards. card_values (list of int): List of integers representing the card values. Returns: list of int: The card values sorted in descending order. return sorted(card_values, reverse=True)"},{"question":"You are given a string `s` which represents a piece of text. Your task is to find the word that occurs most frequently in the given text. If there is a tie, return the word that appears first in the input string. Ignore case sensitivity when determining the frequency of words. Punctuation marks should not be considered as part of a word, and words are delimited by spaces. **Note:** For simplicity, you can assume that the words only contain alphabets (a-z, A-Z) and spaces, with no other characters. ___ Examples: ``` s = \\"Hello world hello\\" Output: \\"hello\\" s = \\"It is what it is\\" Output: \\"it\\" s = \\"Coding coding CODING\\" Output: \\"coding\\" ``` **Explanation:** - In the first example, \\"hello\\" appears twice and \\"world\\" appears once. - In the second example, \\"it\\" and \\"is\\" both appear twice but \\"it\\" appears first. - In the third example, \\"coding\\" appears three times, regardless of case.","solution":"def most_frequent_word(s): Returns the most frequent word in the given text `s`. If there is a tie, return the word that appears first. # Normalize the text to lowercase s = s.lower() # Tokenize the text into words words = s.split() # Count frequency of each word from collections import Counter word_count = Counter(words) # Find the word with the highest frequency and if there is a tie, the first occurrence max_count = max(word_count.values()) for word in words: if word_count[word] == max_count: return word"},{"question":"A logistics company is delivering packages along a line of cities. Initially, there are C cities placed in a linear sequence. The distance between each pair of consecutive cities is the same fixed value T. The company has N packages to deliver, and the i-th package needs to go from city A_i to city B_i. However, due to regulations, each package can only travel through a limited number of intermediate cities before reaching its destination. Write a program to determine if each package can be delivered within its specified limits. -----Constraints----- - 1 ≤ C ≤ 10^6 - 1 ≤ N ≤ 10^5 - 1 ≤ T ≤ 10^4 - 1 ≤ A_i, B_i ≤ C - 0 ≤ K_i ≤ 10^6 (0 ≤ i ≤ N) -----Input----- Input is given from Standard Input in the following format: C T N A_1 B_1 K_1 A_2 B_2 K_2 ... A_N B_N K_N -----Output----- Print N lines. The i-th line should contain YES if the i-th package can be delivered within its specified limits, and NO otherwise. -----Sample Input----- 5 2 3 1 4 2 2 5 1 3 3 0 -----Sample Output----- YES NO YES For the first package, it can be delivered from city 1 to city 4 passing through only 2 intermediate cities (cities 2 and 3) which is within the limit. For the second package, the limit is not enough, and the distance requires it to pass through 2 intermediate cities, exceeding the limit of 1. For the third package, the starting and destination city are the same, so it doesn\'t need to pass through any intermediate cities, thus the answer is YES.","solution":"def can_deliver(C, T, deliveries): results = [] for A_i, B_i, K_i in deliveries: distance = abs(A_i - B_i) intermediates_needed = max(0, distance - 1) if intermediates_needed <= K_i: results.append(\\"YES\\") else: results.append(\\"NO\\") return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() C = int(data[0]) T = int(data[1]) N = int(data[2]) deliveries = [] for i in range(N): A_i = int(data[3 + i * 3]) B_i = int(data[4 + i * 3]) K_i = int(data[5 + i * 3]) deliveries.append((A_i, B_i, K_i)) results = can_deliver(C, T, deliveries) for result in results: print(result)"},{"question":"Given a list of unique integers, implement a function that partitions the list into two subsets such that: 1. The difference between their sums is minimized. 2. Returns a tuple of two lists representing these two subsets. Example: For the input list [1, 6, 11, 5], one possible output is ([1, 6, 5], [11]) where the sums of the subsets are 12 and 11, respectively, which gives a difference of 1. Constraints: - The input list will contain at least one element and at most 20 elements. - The integers will be in the range [-100, 100]. Follow up: Can you find a solution that works in O(n*sum/2) time complexity and uses O(n*sum/2) space complexity, where sum is the sum of all the integers in the list?","solution":"from itertools import combinations def partition_list(nums): Partitions the list of unique integers into two subsets such that the difference between their sums is minimized. total_sum = sum(nums) n = len(nums) all_combinations = (combinations(nums, i) for i in range(n // 2 + 1)) min_diff = float(\'inf\') best_subset = [] for comb_gen in all_combinations: for comb in comb_gen: subset_sum = sum(comb) other_subset_sum = total_sum - subset_sum diff = abs(subset_sum - other_subset_sum) if diff < min_diff: min_diff = diff best_subset = comb subset1 = list(best_subset) subset2 = nums.copy() for num in subset1: subset2.remove(num) return (subset1, subset2)"},{"question":"Evelyn is managing a flower shop and needs your help to organize her flower deliveries. Each flower delivery is scheduled to be delivered within a certain time frame in the day, denoted in 24-hour format. Given a list of delivery time frames and a list of specific times she needs to check, help her determine which deliveries are scheduled during those times. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of deliveries. The next n lines describe the deliveries. Each line contains two integers t_start and t_end (0 ≤ t_start < t_end ≤ 23), representing the start and end times of the delivery time frame, respectively. The next line contains a single integer m (1 ≤ m ≤ 10^5), the number of specific times Evelyn needs to check. The following line contains m integers q_1, q_2, ..., q_m (0 ≤ q_i ≤ 23), the specific times Evelyn wants to check. -----Output----- Print m lines to the standard output. Each line should contain an integer representing the number of deliveries scheduled at the respective specific time. If a specific time does not fall within any delivery period, print 0 for that time. -----Examples----- Input 4 9 12 10 14 13 15 19 22 3 11 21 5 Output 2 1 0 -----Note----- For the sample input: - The time 11 overlaps with the delivery periods [9, 12] and [10, 14], so there are 2 deliveries scheduled at 11. - The time 21 overlaps with the delivery period [19, 22], so there is 1 delivery scheduled at 21. - The time 5 does not overlap with any delivery period, so there are 0 deliveries scheduled at 5.","solution":"def count_deliveries_at_times(n, deliveries, m, query_times): delivery_count = [0] * 24 for t_start, t_end in deliveries: for time in range(t_start, t_end): delivery_count[time] += 1 result = [] for q in query_times: result.append(delivery_count[q]) return result def organize_flower_deliveries(n, deliveries, m, query_times): return count_deliveries_at_times(n, deliveries, m, query_times)"},{"question":"You are given an array of integers and an integer `target`. Your task is to determine if there are two distinct elements in the array that sum up to the target. If such a pair exists, return the pair as a list `[a, b]` where `a` and `b` are the two integers that add up to the target. If there is no such pair, return an empty list. Examples: `array = [2, 7, 11, 15], target = 9` should return `[2, 7]` because `2 + 7 = 9` `array = [3, 2, 4], target = 6` should return `[2, 4]` because `2 + 4 = 6` `array = [3, 3], target = 6` should return `[3, 3]` because `3 + 3 = 6` `array = [1, 2, 3, 4, 5], target = 10` should return `[]` because there are no two distinct elements that sum up to `10` Note: The solution should return the first pair it encounters which adds up to the target. The order of the integers in the returned list does not matter.","solution":"def find_pair_with_target(array, target): Returns the first pair of numbers in the array that sum up to the target. Parameters: array (list of int): The input list of integers. target (int): The target sum. Returns: list: A list containing the first pair of numbers that sum up to the target, or an empty list if no such pair exists. seen = set() for num in array: complement = target - num if complement in seen: return [complement, num] seen.add(num) return []"},{"question":"Write a function `reverse_words` that takes a string of words separated by single spaces and returns a new string where each word within the string is reversed. The string will contain no punctuation and only lowercase letters. For example: `reverse_words(\\"the sky is blue\\") = \\"eht yks si eulb\\"` `reverse_words(\\"hello world\\") = \\"olleh dlrow\\"` `reverse_words(\\"a bc def\\") = \\"a cb fed\\"` Additional constraints: - The input string will not be empty. - There will be at least one word in the string. Good luck!","solution":"def reverse_words(s): Takes a string of words separated by single spaces and returns a new string where each word within the string is reversed. :param s: str - Input string of words separated by single spaces :return: str - New string with each word reversed return \' \'.join(word[::-1] for word in s.split())"},{"question":"You are given a list of integers, and your task is to determine whether it forms a mountain sequence. A mountain sequence is defined as a sequence that strictly increases and then strictly decreases. The sequence must be strictly increasing for at least one element and then strictly decreasing for at least one element. -----Input:----- - The first line of the input contains a single integer T, denoting the number of test cases. The description of T test cases is as follows. - The next line of the input contains a single integer N, denoting the total number of elements in the sequence. - The next line of the input contains N space-separated integers A_1, A_2, A_3,..., A_N denoting the sequence. -----Output:----- - For each test case, print \\"YES\\" (without quotes) if the sequence is a mountain sequence, else print \\"NO\\" (without quotes). -----Constraints:----- - 1 leq T leq 10^2 - 2 leq N leq 10^3 - 1 leq A_1, A_2, A_3,..., A_N leq 10^5 -----Sample Input:----- 3 6 1 2 3 4 3 2 4 1 2 2 1 5 3 5 2 1 4 -----Sample Output:----- YES NO NO -----Explanation:----- - For the first sequence, it increases strictly from 1 to 4 and then decreases strictly from 4 to 2, thus it forms a mountain sequence. - For the second sequence, it increases from 1 to 2 but does not strictly decrease as the element 2 repeats. - For the third sequence, it does not follow the strictly increasing then strictly decreasing pattern.","solution":"def is_mountain_sequence(sequence): Determines if the given sequence is a mountain sequence. A sequence is considered as a mountain sequence if it strictly increases and then strictly decreases. n = len(sequence) if n < 3: return False i = 1 # Check increasing part while i < n and sequence[i] > sequence[i-1]: i += 1 # Peak can\'t be first or last element if i == 1 or i == n: return False # Check decreasing part while i < n and sequence[i] < sequence[i-1]: i += 1 return i == n def solve_test_cases(T, test_cases): Processes multiple test cases to determine if each sequence is a mountain sequence. T: Number of test cases test_cases: List of tuples, where each tuple contains (N, sequence) results = [] for N, sequence in test_cases: if is_mountain_sequence(sequence): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You\'re writing a small utility to parse and evaluate mathematical expressions. Expressions can include the +, -, *, and / operators, parentheses, and any number of whitespace characters which should be ignored. Write a function `evaluateExpression(expression: str) -> float` that takes a string representing a mathematical expression and returns the computed result as a float. You may assume the input expression is always valid and doesn\'t result in division by zero. Your function should correctly handle the precedence of operations and parentheses. Examples: ```python evaluateExpression(\\"3 + 5\\") # should return 8 evaluateExpression(\\"10 + 2 * 6\\") # should return 22 evaluateExpression(\\"100 * 2 + 12\\") # should return 212 evaluateExpression(\\"100 * ( 2 + 12 )\\") # should return 1400 evaluateExpression(\\"100 * ( 2 + 12 ) / 14\\") # should return 100 ```","solution":"def evaluateExpression(expression: str) -> float: import re return eval(re.sub(r\'s+\', \'\', expression)) # Using eval for simplicity"},{"question":"You are given an array of integers arr of length N. Find the maximum length of a subarray where at most K different integers exist. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and K. - The second line contains N space-separated integers arr_1, arr_2, ldots, arr_N. -----Output----- For each test case, print a single line containing one integer — the maximum length of the subarray with at most K different integers. -----Constraints----- - 1 le T le 10 - 1 le N le 2 cdot 10^5 - 1 le K le N - 1 le arr_i le 10^5 for each valid i -----Example Input----- 2 5 2 1 2 1 2 3 7 3 1 2 1 3 4 3 3 -----Example Output----- 4 5","solution":"def max_length_subarray_with_k_distinct(arr, N, K): from collections import defaultdict left = 0 right = 0 max_length = 0 count = defaultdict(int) distinct_count = 0 while right < N: if count[arr[right]] == 0: distinct_count += 1 count[arr[right]] += 1 right += 1 while distinct_count > K: count[arr[left]] -= 1 if count[arr[left]] == 0: distinct_count -= 1 left += 1 max_length = max(max_length, right - left) return max_length def run_test_cases(test_cases): results = [] for N, K, arr in test_cases: result = max_length_subarray_with_k_distinct(arr, N, K) results.append(result) return results"},{"question":"Write a function that takes a string and returns the same string, but reverses the order of the words, keeping the spaces intact. Words are considered sequences of characters separated by spaces. ```text \'The quick brown fox\' becomes \'fox brown quick The\' \' Hello world \' becomes \' world Hello \' \'Madam in Eden, I’m Adam\' becomes \'Adam I’m Eden, in Madam\' ``` Note that multiple spaces between words and leading/trailing spaces should be preserved.","solution":"def reverse_words_keep_spaces(s): Reverses the order of words in the input string, keeping the spaces intact. Args: s (str): Input string. Returns: str: Output string with the words reversed but spaces preserved. # Split the string into list of words and spaces words = s.split(\' \') # Reverse the words list reversed_words = words[::-1] # Join the reversed words with a single space result = \' \'.join(reversed_words) return result"},{"question":"Aarti is working on organizing a marathon. She needs to ensure the path is smooth and safe for all the participants. She has gathered data on the heights of obstacles placed at various points along the marathon route. The marathon route is represented as an array of positive integers where each integer signifies the height of an obstacle at that point. Aarti wants to check multiple segments of the path to determine the maximum height of any obstacle within those segments. -----Input:----- - The first line will contain T, the number of test cases. Then, the test cases follow. - The first line of each test case contains two integers N and Q. - The second line of each test case contains N positive integers representing the heights of obstacles on the route. - The next Q lines of each test case each contain two integers L_i and R_i which represent the start and end indices (1-based) of the segments of the path Aarti wants to query. -----Output:----- For each query in each test case, print the maximum height of obstacles present in the segment from L_i to R_i (inclusive). -----Constraints:----- - 1 leq T leq 50 - 1 leq N leq 10^5 - 1 leq Q leq 10^3 - 1 leq height leq 10^9 -----Subtasks (20 points):----- - 1 leq N leq 10^2 - 1 leq Q leq 10^2 - 1 leq height leq 10^3 -----Subtasks (30 points):----- - 1 leq N leq 10^3 - 1 leq Q leq 10^2 - 1 leq height leq 10^6 -----Subtasks (50 points):----- - Original Constraints -----Sample Input:----- 1 5 2 1 3 2 6 4 1 3 2 5 -----Sample Output:----- 3 6 -----EXPLANATION:----- Q1: (1,3) -> Maximum height in subarray [1,3,2] is 3 Q2: (2,5) -> Maximum height in subarray [3,2,6,4] is 6","solution":"def max_obstacle_height(test_cases): results = [] for case in test_cases: N, Q = case[\'N\'], case[\'Q\'] heights = case[\'heights\'] queries = case[\'queries\'] for L, R in queries: # Subtract 1 from L and R to convert 1-based index to 0-based indexing used in Python lists segment = heights[L-1:R] results.append(max(segment)) return results"},{"question":"Given a list of unique integers, find the length of the longest increasing subsequence. An increasing subsequence is a sequence of numbers where each number is smaller than the subsequent number. Example 1: Input: nums = [10,9,2,5,3,7,101,18] Output: 4 Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. Example 2: Input: nums = [0,1,0,3,2,3] Output: 4 Explanation: The longest increasing subsequence is [0,1,2,3], therefore the length is 4. Example 3: Input: nums = [7,7,7,7,7,7,7] Output: 1 Explanation: The longest increasing subsequence is [7], therefore the length is 1. Note: The time complexity of your solution should not exceed O(n^2).","solution":"def length_of_LIS(nums): Returns the length of the longest increasing subsequence. The time complexity of this solution is O(n^2). Arguments: nums: List of unique integers. Returns: Length of the longest increasing subsequence. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a rectangular grid of size NxM. In this grid, some cells are blocked and others are free. You need to find the shortest path from the top-left corner of the grid (cell (1, 1)) to the bottom-right corner of the grid (cell (N, M)) moving only through free cells. You can move to a free cell directly to the left, right, top, or bottom of your current position. The goal is to determine the minimum number of moves needed to reach the bottom-right corner from the top-left corner. If there\'s no path, return -1. -----Input----- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M denoting the number of rows and columns of the grid. - The next N lines contain M characters each, representing the grid: - \'.\' represents a free cell. - \'#\' represents a blocked cell. -----Output----- For each test case, output a single integer: the minimum number of moves required to reach the bottom-right corner from the top-left corner, or -1 if it is not possible. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ N, M ≤ 1000 -----Example----- Input 2 3 3 .#. .#. ... 3 3 .#. # .#. Output 4 -1 -----Explanation----- Testcase 1: The grid is as follows: ``` . # . . # . . . . ``` The shortest path is: (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) Thus, the output is 4. Testcase 2: The grid is as follows: ``` . # . # # # . # . ``` There is no path from (1, 1) to (3, 3) because there is no way to pass through the blocked cells. Hence, the output is -1.","solution":"from collections import deque def shortest_path(grid, N, M): Finds the shortest path from top-left to bottom-right in the grid if possible. grid: List of strings depicting the grid where \'.\' is free and \'#\' is blocked N: Number of rows M: Number of columns Returns: Minimum number of moves to reach bottom-right or -1 if not possible # Check for special case where start or end is blocked if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 # Directions for moving in the grid (Right, Down, Left, Up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Initialize the queue with starting position queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # Check if we\'ve reached the bottom-right corner if x == N - 1 and y == M - 1: return dist # Explore the neighbors for dx, dy in directions: nx, ny = x + dx, y + dy # Validate the new position if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If we exhaust the queue without finding the path return -1 def solve(test_cases): results = [] for data in test_cases: N, M, grid = data results.append(shortest_path(grid, N, M)) return results"},{"question":"=====Function Descriptions===== split() This function splits a string into a list using the specified separator. join() This function returns a string concatenated with the elements of a list, separated by a specified separator. Code >>> s = \\"hello world\\" >>> words = s.split(\\" \\") >>> words [\'hello\', \'world\'] >>> joined_s = \\"-\\".join(words) >>> joined_s \'hello-world\' =====Problem Statement===== You are given a string S and a character c. Your task is to split the string S into words using the space character as a separator, reverse the order of the words, and then join them back into a single string using the character c as the separator. =====Input Format===== The first line contains the string S. The second line contains the character c. =====Output Format===== Print the resulting string after performing the split, reverse, and join operations. =====Sample Input===== hello world how are you - =====Sample Output===== you-are-how-world-hello","solution":"def reverse_and_join(S, c): Splits the string S into words using the space character as a separator, reverses the order of words, and joins them back into a single string using the character c as the separator. Args: S (str): Input string. c (str): Separator character. Returns: str: The resulting string after reversing and joining. words = S.split(\\" \\") words.reverse() return c.join(words)"},{"question":"You are helping to organize a music festival. Given an integer `n`, representing the total number of attendees, determine if you can evenly distribute them into groups of exactly 4 or 7 people. If it is possible to distribute them without any remainder, return \\"Feasible\\", otherwise return \\"Not Feasible\\".","solution":"def can_be_divided(n): Determine if n can be evenly divided into groups of 4 or 7. Returns \\"Feasible\\" if n can be divided by 4 or 7, otherwise \\"Not Feasible\\". if n % 4 == 0 or n % 7 == 0: return \\"Feasible\\" return \\"Not Feasible\\""},{"question":"=====Function Descriptions===== .symmetric_difference() The .symmetric_difference() operator returns a set with all the elements that are in exactly one of the sets. In other words, it will return the elements that are in either of the sets, but not in their intersection. The set is immutable to the .symmetric_difference() operation. >>> s1 = set(\\"abc\\") >>> s2 = set(\\"bcd\\") >>> print(s1.symmetric_difference(s2)) set([\'a\', \'d\']) >>> s1 = {1, 2, 3} >>> s2 = {3, 4, 5} >>> print(s1.symmetric_difference(s2)) set([1, 2, 4, 5]) >>> s1 = set([1, 2, 3, 4, 5]) >>> s2 = set([4, 5, 6, 7, 8]) >>> print(s1.symmetric_difference(s2)) set([1, 2, 3, 6, 7, 8]) >>> s1 = set(\\"Hacker\\") >>> s2 = set(\\"Rank\\") >>> print(s1.symmetric_difference(s2)) set([\'e\', \'H\', \'c\', \'n\', \'R\', \'k\']) =====Problem Statement===== In a company, employees are assigned to various projects over different phases. However, some employees are transferred from one project to another between phases. You have been given the list of employee IDs who were working on two different phases of a project. Your task is to find the employee IDs who worked on exactly one of the two phases. =====Input Format===== The first line contains n, the number of employees who worked on the first phase of the project. The second line contains n space separated IDs of those employees. The third line contains m, the number of employees who worked on the second phase of the project. The fourth line contains m space separated IDs of those employees. =====Constraints----- 0 < Total number of unique employee IDs < 1000 =====Output Format===== Output the list of unique employee IDs who worked on only one of the two phases, sorted in ascending order. =====Sample Input===== 6 1 2 3 4 5 6 5 4 5 6 7 8 =====Sample Output===== 1 2 3 7 8","solution":"def find_unique_employees(n, phase1_ids, m, phase2_ids): Finds the unique employee IDs who worked on exactly one of the two phases. Args: n : int : Number of employees who worked on the first phase. phase1_ids : list of int : Employee IDs for the first phase. m : int : Number of employees who worked on the second phase. phase2_ids : list of int : Employee IDs for the second phase. Returns: list of int : Sorted list of unique employee IDs who worked on only one of the two phases. set1 = set(phase1_ids) set2 = set(phase2_ids) sym_diff = set1.symmetric_difference(set2) return sorted(sym_diff)"},{"question":"Write a function that returns the length of the longest contiguous subarray, within an array of integers, that sums up to a given target sum. For example, in the array [1, -1, 5, -2, 3] with a target sum of 3, the longest contiguous subarray with that sum is [1, -1, 5, -2], which has a length of 4. Your function should take an array of integers and the target sum: ```python max_length_subarray([1, -1, 5, -2, 3], 3) # => 4 max_length_subarray([-2, -1, 2, 1], 1) # => 2 max_length_subarray([3, 1, -1, -1, 2], 3) # => 3 ```","solution":"def max_length_subarray(nums, target): Returns the length of the longest contiguous subarray that sums to the given target. :param nums: List of integers :param target: Target sum for the subarray :return: Length of the longest contiguous subarray with the target sum cum_sum_map = {} cum_sum = 0 max_len = 0 for i, num in enumerate(nums): cum_sum += num if cum_sum == target: max_len = i + 1 if (cum_sum - target) in cum_sum_map: max_len = max(max_len, i - cum_sum_map[cum_sum - target]) if cum_sum not in cum_sum_map: cum_sum_map[cum_sum] = i return max_len"},{"question":"You\'re organizing a coding competition and need to assign participants into teams. The teams should be of equal size, and every participant must be assigned to exactly one team. Write a function, `can_form_teams()` that determines if it\'s possible to divide the total number of participants into teams of a given size. The function should take two arguments: the total number of participants and the size of each team. It should return `True` if it\'s possible to form the teams such that all teams have the same number of participants and no one is left without a team, otherwise it should return `False`. For example, `can_form_teams(50, 5)` should return `True`, but `can_form_teams(50, 6)` should return `False`. Note: you don\'t need to use an `if` statement here. Remember that in Python an expression using the `==` comparison operator will evaluate to either `True` or `False`: ```python >>> def is_ten(num): >>> return num == 10 >>> is_ten(5) False >>> is_ten(10) True ``` ```if:csharp Documentation: Competition.CanFormTeams Method (Int32, Int32) Returns a boolean representing if the first argument is perfectly divisible by the second argument. Syntax public static bool CanFormTeams( int totalParticipants, int teamSize, ) Parameters totalParticipants Type: System.Int32 The total number of participants. teamSize Type: System.Int32 The size of each team. Return Value Type: System.Boolean A boolean value representing if the first argument is perfectly divisible by the second. ```","solution":"def can_form_teams(total_participants, team_size): Determines if it\'s possible to divide the total number of participants into teams of a given size. Args: total_participants (int): The total number of participants. team_size (int): The size of each team. Returns: bool: True if it\'s possible to form the teams such that all teams have the same number of participants and no one is left without a team, otherwise False. return total_participants % team_size == 0"},{"question":"You have a list of strings representing dates in the format \\"YYYY-MM-DD\\". Write a function that accepts this list and returns a new list where the dates are sorted from the oldest to the newest. However, you must reformat the dates to \\"DD-MM-YYYY\\" in the resulting list. For example, given the input: ```python dates = [\\"2022-09-01\\", \\"2021-12-25\\", \\"2023-01-05\\"] ``` Your function should return: ```python [\\"25-12-2021\\", \\"01-09-2022\\", \\"05-01-2023\\"] ``` Your task is to implement a function `sort_and_reformat_dates(dates)` that sorts and reformats the dates as described. # Function Signature ```python def sort_and_reformat_dates(dates: list) -> list: pass ``` # Constraints - All dates will be valid dates in the format \\"YYYY-MM-DD\\". - There will be at least one date in the input list. - The dates will be unique (no duplicates). # Example ```python dates = [\\"2022-09-01\\", \\"2021-12-25\\", \\"2023-01-05\\"] print(sort_and_reformat_dates(dates)) # Output: [\\"25-12-2021\\", \\"01-09-2022\\", \\"05-01-2023\\"] ```","solution":"def sort_and_reformat_dates(dates): Sorts a list of dates in the format \\"YYYY-MM-DD\\" from oldest to newest, and returns them reformatted to \\"DD-MM-YYYY\\". :param dates: List of strings representing dates in the \\"YYYY-MM-DD\\" format :return: List of strings representing sorted dates in the \\"DD-MM-YYYY\\" format # Sort the dates first in \\"YYYY-MM-DD\\" format sorted_dates = sorted(dates) # Reformat the dates to \\"DD-MM-YYYY\\" reformatted_dates = [date.split(\'-\')[2] + \'-\' + date.split(\'-\')[1] + \'-\' + date.split(\'-\')[0] for date in sorted_dates] return reformatted_dates"},{"question":"Sort the Matrix Rows Given an `n x m` matrix of integers, write a function that sorts each row of the matrix in ascending order and then sorts the rows of the resulting matrix based on the sum of elements in each row, in ascending order. # Input - `matrix`: A 2D list of integers of size `n x m` (1 ≤ n, m ≤ 100). # Output Return the sorted matrix as a 2D list. # Example ```python def sort_matrix_rows(matrix): # Your code here # Example input matrix = [ [34, 2, 1], [4, 56, 23], [12, 34, 23] ] # Expected output # [ # [1, 2, 34], # [4, 23, 56], # [12, 23, 34] # ] print(sort_matrix_rows(matrix)) ``` # Constraints 1. Each row within the matrix should first be sorted in ascending order. 2. Once the rows are sorted, the matrix should be sorted based on the sum of elements in each row, in ascending order. # Explanation - **Step 1:** Sort each row individually. ```python [ [1, 2, 34], [4, 23, 56], [12, 23, 34] ] ``` - **Step 2:** Sort the rows based on the sum of each row. - Sum of row `[1, 2, 34]` is `37`. - Sum of row `[4, 23, 56]` is `83`. - Sum of row `[12, 23, 34]` is `69`. Sorting by sums: ```python [ [1, 2, 34], # Sum = 37 [12, 23, 34], # Sum = 69 [4, 23, 56] # Sum = 83 ] ``` - The final result is: ```python [ [1, 2, 34], [12, 23, 34], [4, 23, 56] ] ```","solution":"def sort_matrix_rows(matrix): Sorts each row of the matrix in ascending order and then sorts the rows of the resulting matrix based on the sum of elements in each row, in ascending order. # Step 1: Sort each row individually sorted_rows = [sorted(row) for row in matrix] # Step 2: Sort the rows based on the sum of each row sorted_rows.sort(key=sum) return sorted_rows"},{"question":"Create a function called customSort that takes an array of integers as input and returns a new array that is sorted in a specific way. The sorting should be done in the following manner: 1. All even numbers should come first in ascending order. 2. All odd numbers should come next in descending order. For example: - input array: [5, 3, 2, 8, 1, 4] - output array: [2, 4, 8, 5, 3, 1] While implementing this function, make sure to: - Preserve the relative order of the even numbers. - Preserve the relative order of the odd numbers. Hints: - You might find it helpful to use separate lists for even and odd numbers. - Make sure to sort and merge them correctly according to the given criteria.","solution":"def customSort(arr): Custom sorts the array such that: 1. All even numbers are sorted in ascending order. 2. All odd numbers are sorted in descending order. Parameters: arr (list): List of integers to sort. Returns: list: New sorted list with even numbers first in ascending order and odd numbers next in descending order. even_numbers = sorted([x for x in arr if x % 2 == 0]) odd_numbers = sorted([x for x in arr if x % 2 != 0], reverse=True) return even_numbers + odd_numbers"},{"question":"Given an array of positive integers, find and print the largest sum of a non-empty, contiguous subarray. A subarray is a contiguous part of an array. The array will have at least one element. -----Input:----- The first line contains N, the number of arrays Then each of the next N lines contains a series of integers separated by spaces representing the respective arrays. -----Output:----- Output should contain N lines, each line containing the largest sum of a contiguous subarray from the corresponding input array. -----Constraints:----- - 1 leq N leq 100 - 1 leq length of each array leq 10^5 - 1 leq integer values in the array leq 10^4 Note: The sum of all integers in an array will fit within the standard 32-bit signed integer range. -----Sample Input:----- 3 1 2 3 4 -1 2 3 -2 5 5 4 -1 7 8 -----Sample Output:----- 10 8 23 -----Explanation:----- In the first case, the whole array [1, 2, 3, 4] itself is the largest contiguous subarray with a sum of 10. In the second case, the largest sum of a contiguous subarray is [2, 3, -2, 5], which sums up to 8. In the third case, the largest contiguous subarray sum is the entire array [5, 4, -1, 7, 8], which sums up to 23.","solution":"def max_subarray_sum(arr): Given an array of positive integers, find the largest sum of a contiguous subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def main(input_lists): Given a list of lists of integers, applies the max_subarray_sum function to each and returns the results. result = [] for lst in input_lists: result.append(max_subarray_sum(lst)) return result # Example usage: # input_lists = [ # [1, 2, 3, 4], # [-1, 2, 3, -2, 5], # [5, 4, -1, 7, 8] # ] # print(main(input_lists)) # Output: [10, 8, 23]"},{"question":"You are given an m x n grid made up of a mix of land and water cells. Land cells are represented by 1 and water cells are represented by 0. The grid is completely surrounded by water, and there is exactly one island (i.e. one or more connected land cells). An island is defined as a group of 1\'s that are connected 4-directionally (horizontal or vertical). Assume all four edges of the grid are surrounded by water. The task is to find the perimeter of the island. Example 1: Input: grid = [[0,1,0,0], [1,1,1,0], [0,1,0,0], [1,1,0,0]] Output: 16 Explanation: The perimeter is the 16 yellow cells in the example above. Example 2: Input: grid = [[1]] Output: 4 Example 3: Input: grid = [[1,0]] Output: 4 Constraints: * m == grid.length * n == grid[i].length * 1 <= m, n <= 100 * grid[i][j] is 0 or 1","solution":"def island_perimeter(grid): Returns the perimeter of the island described in the grid. An island is defined as a group of 1\'s connected 4-directionally. if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) perimeter = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: # Add 4 edges for the land cell perimeter += 4 # Check north neighbor if r > 0 and grid[r-1][c] == 1: perimeter -= 2 # Subtract 2 for shared boundary # Check west neighbor if c > 0 and grid[r][c-1] == 1: perimeter -= 2 # Subtract 2 for shared boundary return perimeter"},{"question":"Write a function that determines if a given string contains all the unique letters of the alphabet (case insensitive). Return `true` if the string contains all the letters from \'a\' to \'z\' at least once, otherwise return `false`. About unique letters A unique letter is any letter from \'a\' to \'z\'. The string should be checked in a case-insensitive manner, so \'A\' and \'a\' are considered the same. For example, the string `\\"The quick brown fox jumps over the lazy dog\\"` contains all the letters of the alphabet, so the function should return `true`. However, the string `\\"Hello World\\"` does not contain all the unique letters of the alphabet, so the function should return `false`. Note: The function should ignore spaces, numbers, and punctuation, and focus solely on the alphabetic letters.","solution":"def contains_all_unique_letters(s): Determines if the given string contains all the unique letters of the alphabet (case insensitive). :param s: String to be checked :return: Boolean indicating whether all unique letters are present # Create a set of all alphabets in lowercase alphabet_set = set(\'abcdefghijklmnopqrstuvwxyz\') # Convert the input string to lowercase and create a set of its alphabetic characters s_set = set([char.lower() for char in s if char.isalpha()]) # Check if the alphabet set is a subset of the string\'s alphabetic set return alphabet_set.issubset(s_set)"},{"question":"Write a function that takes a string containing only lowercase alphabetical characters and returns the length of the longest substring without repeating characters. The function should return an integer. The input string will always be valid and can be empty. For example: - Given the string `\\"abcabcbb\\"`, the longest substring without repeating characters is `\\"abc\\"`, which has a length of 3. - Given the string `\\"bbbbb\\"`, the longest substring without repeating characters is `\\"b\\"`, which has a length of 1. - Given the string `\\"pwwkew\\"`, the longest substring without repeating characters is `\\"wke\\"`, which has a length of 3. Based on: https://leetcode.com/problems/longest-substring-without-repeating-characters/","solution":"def longest_substring_without_repeating_characters(s): Returns the length of the longest substring without repeating characters. start = 0 max_length = 0 used_chars = {} for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: max_length = max(max_length, i - start + 1) used_chars[char] = i return max_length"},{"question":"Sum of Unique Numbers Suppose you are given a list of integers, `nums`. Your task is to create a function, `sum_of_unique(nums)`, that returns the sum of all numbers in the list that appear only once. If there are no unique numbers, the function should return 0. # Parameters: - `nums`: a list of integers, possibly containing duplicates. # Example: ```python sum_of_unique([1, 2, 3, 2, 4]) => 8 # (1 + 3 + 4) sum_of_unique([5, 5, 5, 5]) => 0 # No unique numbers sum_of_unique([1, 1, 2, 3, 3]) => 2 # (2) sum_of_unique([]) => 0 # No numbers in list ``` # Constraints: - The function should handle lists of arbitrary length, including an empty list. - All elements in `nums` will be integers.","solution":"def sum_of_unique(nums): from collections import Counter count = Counter(nums) return sum(num for num, cnt in count.items() if cnt == 1)"},{"question":"Given an array of integers, return the product of the maximum and minimum value in the array. If the array is empty, return `0`. ``` For example: solve([1,2,3,4,5]) = 5 because the maximum value is 5 and the minimum value is 1, and their product is 1 * 5 = 5. solve([-10,-20,10,20]) = -400 because the maximum value is 20 and the minimum value is -20, and their product is -20 * 20 = -400. solve([]) = 0 because the array is empty. ``` Note: - The input will always be an array. If the input array is empty, return `0`.","solution":"def solve(arr): Returns the product of the maximum and minimum value in the array. If the array is empty, return 0. if not arr: return 0 max_value = max(arr) min_value = min(arr) return max_value * min_value"},{"question":"Implement a function ```isNestedParentheses(s)``` that checks whether a given string of parentheses is properly nested. A string is considered properly nested if all parentheses are matched correctly and every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. The function should return `true` if the string is properly nested and `false` otherwise. Examples: - isNestedParentheses(\\"()\\") should return `true` - isNestedParentheses(\\"(())\\") should return `true` - isNestedParentheses(\\"(()))\\") should return `false` - isNestedParentheses(\\"(()\\") should return `false` - isNestedParentheses(\\"()()\\") should return `true` The input string can be of any length but will only contain parentheses characters \'(\' and \')\'.","solution":"def isNestedParentheses(s): Checks whether a given string of parentheses is properly nested. Parameters: s (str): The input string containing only \'(\' and \')\'. Returns: bool: True if the string is properly nested, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"=====Function Descriptions===== median The median tool computes the median along the specified axis. import numpy my_array = numpy.array([ [1, 2], [3, 4] ]) print numpy.median(my_array, axis = 0) #Output : [ 2. 3.] print numpy.median(my_array, axis = 1) #Output : [ 1.5 3.5] print numpy.median(my_array, axis = None) #Output : 2.5 print numpy.median(my_array) #Output : 2.5 By default, the axis is None. Therefore, it computes the median of the flattened array. sum The sum tool computes the sum of array elements along the specified axis. import numpy my_array = numpy.array([ [1, 2], [3, 4] ]) print numpy.sum(my_array, axis = 0) #Output : [ 4 6] print numpy.sum(my_array, axis = 1) #Output : [ 3 7] print numpy.sum(my_array, axis = None) #Output : 10 print numpy.sum(my_array) #Output : 10 By default, the axis is None. Therefore, it computes the sum of the flattened array. prod The prod tool computes the product of array elements along the specified axis. import numpy my_array = numpy.array([ [1, 2], [3, 4] ]) print numpy.prod(my_array, axis = 0) #Output : [ 3 8] print numpy.prod(my_array, axis = 1) #Output : [ 2 12] print numpy.prod(my_array, axis = None) #Output : 24 print numpy.prod(my_array) #Output : 24 By default, the axis is None. Therefore, it computes the product of the flattened array. =====Problem Statement===== You are given a 2-D array of size NXK. Your task is to find: The median along axis 0 The sum along axis 1 The prod along axis None =====Input Format===== The first line contains the space separated values of N and K. The next N lines contains K space separated integers. =====Output Format===== First, print the median. Second, print the sum. Third, print the prod.","solution":"import numpy as np def array_operations(N, K, array_data): Performs median along axis 0, sum along axis 1, and prod along axis None on the input 2D array. Parameters: N (int): The number of rows in the array. K (int): The number of columns in the array. array_data (list of list of int): The 2D array data. Returns: tuple: A tuple containing the median along axis 0, sum along axis 1, and prod along axis None. my_array = np.array(array_data) median_axis_0 = np.median(my_array, axis=0) sum_axis_1 = np.sum(my_array, axis=1) prod_axis_none = np.prod(my_array) return median_axis_0, sum_axis_1, prod_axis_none"},{"question":"Alex is working with a tree data structure and needs to perform certain operations on it. The tree has N nodes, numbered from 1 to N, where each node has an integer value assigned to it. A \\"subtree\\" of a node u is defined as a node u and all its descendants in the tree. You need to process Q queries of the following form: 1. \\"1 u x\\" - Update the value of node u to x. 2. \\"2 u\\" - Output the sum of the values of all nodes in the subtree of node u. Help Alex by writing a program to handle the operations efficiently. -----Input----- - The first line contains two integers N (number of nodes) and Q (number of queries). - The second line contains N space-separated integers representing the initial values of the nodes. - The next N-1 lines each contain two integers u and v indicating an edge between nodes u and v. - The next Q lines describe the queries in the format mentioned above. -----Output----- For each query of type \\"2 u\\", output the sum of values of all nodes in the subtree of u on a new line. -----Constraints----- - 1 le N, Q le 100,000 - 1 le initial value of each node le 1,000 - 1 le value updated by query \\"1 u x\\" le 1,000 - The tree is connected. -----Example Input----- 5 5 1 2 3 4 5 1 2 1 3 2 4 2 5 2 1 2 2 1 2 10 2 1 2 2 -----Example Output----- 15 11 21 20 -----Explanation----- Initial values: - Subtree sum of node 1: 1 + 2 + 3 + 4 + 5 = 15 - Subtree sum of node 2: 2 + 4 + 5 = 11 After updating node 2\'s value to 10: - Subtree sum of node 1: 1 + 10 + 3 + 4 + 5 = 23 - Subtree sum of node 2: 10 + 4 + 5 = 19 Hence, the results for the queries are as shown in the output.","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] def build_tree(values, edges): nodes = [TreeNode(value) for value in values] adjacency_list = [[] for _ in range(len(values))] for u, v in edges: adjacency_list[u-1].append(v-1) adjacency_list[v-1].append(u-1) def dfs(node, parent): for neighbor in adjacency_list[node]: if neighbor != parent: nodes[node].children.append(nodes[neighbor]) dfs(neighbor, node) dfs(0, -1) return nodes def update_value(node, new_value, value_dict): value_dict[node] = new_value def subtree_sum(node, value_dict): total = value_dict[node] for child in node.children: total += subtree_sum(child, value_dict) return total def process_queries(N, Q, values, edges, queries): nodes = build_tree(values, edges) value_dict = {nodes[i]: values[i] for i in range(N)} results = [] for query in queries: parts = query.split() if parts[0] == \'1\': u, x = int(parts[1]), int(parts[2]) update_value(nodes[u-1], x, value_dict) elif parts[0] == \'2\': u = int(parts[1]) results.append(subtree_sum(nodes[u-1], value_dict)) return results"},{"question":"In your coding journey, you are required to write a function that determines whether a given string is an anagram of another given string. Two strings are anagrams if they are made up of the same characters with the same frequencies, but may be in different orders. Your task is to create a function that returns `True` if two given strings are anagrams, and `False` otherwise. # Function Signature ```python def are_anagrams(str1: str, str2: str) -> bool: pass ``` # Input - `str1` (string): A non-empty string containing up to 1000 lowercase alphabetical characters. - `str2` (string): A non-empty string containing up to 1000 lowercase alphabetical characters. # Output - A boolean value (`True` or `False`). # Examples ```python assert are_anagrams(\\"listen\\", \\"silent\\") == True assert are_anagrams(\\"triangle\\", \\"integral\\") == True assert are_anagrams(\\"apple\\", \\"pale\\") == False assert are_anagrams(\\"cinema\\", \\"iceman\\") == True assert are_anagrams(\\"hello\\", \\"world\\") == False ``` # Constraints - Do not use any library functions that directly solve the problem. - Consider the efficiency of your solution, given the constraints.","solution":"def are_anagrams(str1: str, str2: str) -> bool: Determine if two strings are anagrams of each other. if len(str1) != len(str2): return False # Create two dictionaries to count the frequency of each character count1 = {} count2 = {} for char in str1: if char in count1: count1[char] += 1 else: count1[char] = 1 for char in str2: if char in count2: count2[char] += 1 else: count2[char] = 1 # Compare both dictionaries return count1 == count2"},{"question":"Write a function called `transformEquation` that accepts a mathematical equation as a string and returns a new string with all numbers increased by 1. For example, transformEquation(\'3 + 5 = 8\') // returns \'4 + 6 = 9\' transformEquation(\'10 + 15 = 25\') // returns \'11 + 16 = 26\' transformEquation(\'4*3 - 2 = 10\') // returns \'5*4 - 3 = 11\' transformEquation(\'7 * (2 + 3) = 35\') // returns \'8 * (3 + 4) = 36\' * The input string will only contain numbers, basic arithmetic operators (+, -, *, /), parenthesis, and the equals sign (=). * All numbers in the string should be increased by 1. * The structure of the string (including spaces and operators) should remain unchanged. * Non-numeric inputs should return undefined. The function is evaluated with the following criteria: 1. Checks that the returned string has all numbers increased by 1 while the other characters remain unchanged. 2. Verifies that non-numeric inputs return undefined. 3. Ensures that the input structure, including spaces and non-numeric characters, is preserved. 4. Checks various types of mathematical expressions, including those with multiple operators and parentheses.","solution":"import re def transformEquation(equation): Transforms the given equation string by increasing each number by 1. :param equation: A string containing a mathematical equation :return: A string with all numbers increased by 1. If any non-numeric input is found, returns \'undefined\' # Check for non-numeric and non-operator characters if not re.match(r\'^[0-9+-*/()=s]*\', equation): return \'undefined\' def increase_by_one(match): return str(int(match.group()) + 1) transformed_equation = re.sub(r\'d+\', increase_by_one, equation) return transformed_equation"},{"question":"You are given a string that represents a large integer. Your task is to write a function that reverses the digits of this integer without reversing the sign, if it has one. For example, if the input is \\"-12345\\", the output should be \\"-54321\\". If the input is \\"67890\\", the output should be \\"09876\\". Do not use any built-in string reversal functions. You can assume that the input will always be a valid number. *Example* ```python reverse_integer(\\"12345\\") == \\"54321\\" reverse_integer(\\"-12345\\") == \\"-54321\\" reverse_integer(\\"100\\") == \\"001\\" reverse_integer(\\"-100\\") == \\"-001\\" ```","solution":"def reverse_integer(s): Reverse the digits of the integer represented by the string `s` without reversing the sign, if it has one. Parameters: s (str): the string representing the integer Returns: str: the reversed digits of the integer with correct sign if s[0] == \'-\': return \'-\' + reverse_integer(s[1:]) # Custom implementation for reversing the string without using built-in functions reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Given an array of integers, return the number of unique triplets (three numbers) within the array that sum up to zero. For example, in the case of `[ -1, 0, 1, 2, -1, -4 ]`, the unique triplets are `[ -1, 0, 1 ]` and `[ -1, -1, 2 ]`, a total of `2` triplets. `solve([ -1, 0, 1, 2, -1, -4 ]) = 2`. See test cases for more examples. Good luck! If you like array Katas, please try [Two Sum](https://www.codewars.com/kata/52c31f8e6605bcc646000082) [Find the odd int](https://www.codewars.com/kata/54da5a58ea159efa38000836)","solution":"def solve(nums): Returns the number of unique triplets in the list that sum up to zero. nums.sort() n = len(nums) unique_triplets = set() for i in range(n): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s == 0: unique_triplets.add((nums[i], nums[left], nums[right])) left += 1 right -= 1 while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif s < 0: left += 1 else: right -= 1 return len(unique_triplets)"},{"question":"You are given a rectangular grid of cells measuring N x M. Each cell can either have a landmine (denoted by \'*\') or be empty (denoted by \'.\'). Your task is to determine if there exists a path from the top-left cell (0, 0) to the bottom-right cell (N-1, M-1), such that the path does not pass through any cells with landmines, moving only right or down. -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M. - The next N lines each contain a string of M characters representing the grid. -----Output----- For each test case, print \\"YES\\" if there exists a valid path from (0, 0) to (N-1, M-1), otherwise print \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 5000 - 1 ≤ N, M ≤ 50 - Each cell in the grid is either \'*\' (landmine) or \'.\' (empty). -----Example Input----- 3 3 3 ... .*. ... 2 2 .* *. 3 3 ..* .*. *.. -----Example Output----- YES NO NO -----Explanation----- In the first case, there are multiple valid paths: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) In the second case, no valid path exists as the only available cells are blocked by landmines. In the third case, the path is blocked by landmines in all possible directions from the starting point.","solution":"def is_path_possible(grid, N, M): Determines if there is a path from top-left to bottom-right in a given grid. if grid[0][0] == \'*\' or grid[N-1][M-1] == \'*\': return \\"NO\\" from collections import deque directions = [(0, 1), (1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (N-1, M-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" def solve(num_cases, cases): results = [] for i in range(num_cases): N, M = cases[i][0] grid = cases[i][1] results.append(is_path_possible(grid, N, M)) return results"},{"question":"After several months of intensive research, Caroline has developed an advanced sorting algorithm that she believes to be highly efficient. To test her algorithm, Caroline created a special type of array called a \\"jump-array\\". A jump-array is defined as an array where for any given element arr[i] (1 ≤ i ≤ n), you can \\"jump\\" from any element arr[i] to another element arr[j] if and only if their values are connected in some predefined way. The connected relation is provided as a list of pairs (x, y), implying arr[i] can connect to arr[j] if x = arr[i] and y = arr[j] or x = arr[j] and y = arr[i]. Given the array and the predefined connected pairs, Caroline wants to know whether the entire array can be sorted in non-decreasing order using her jump-array concept. Specifically, she wants to determine whether it is possible to sort the array by only swapping allowed connected pairs. Can you help Caroline find out whether the array can be sorted as required? -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 10000, 0 ≤ m ≤ 100000), representing the number of elements in the array and the number of connected pairs, respectively. The second line contains n integers, representing the values of the array arr. Each of the next m lines contains two integers x and y (1 ≤ x, y ≤ 100000), representing that x can be connected to y. -----Output----- Output \\"YES\\" if the array can be sorted using only the allowable swaps provided by the connected pairs. Output \\"NO\\" otherwise. -----Examples----- Input 5 3 4 3 2 1 5 2 3 3 4 1 2 Output YES Input 4 2 3 1 4 2 3 4 1 2 Output NO","solution":"def can_sort_with_jumps(n, m, arr, pairs): from collections import defaultdict, deque def bfs(start, visited, graph): queue = deque([start]) component = [] while queue: node = queue.popleft() if node not in visited: visited.add(node) component.append(node) queue.extend(graph[node]) return component graph = defaultdict(list) for x, y in pairs: graph[x].append(y) graph[y].append(x) visited = set() for i in range(n): val = arr[i] if val not in visited: component = bfs(val, visited, graph) component_values = sorted(component) component_indices = sorted([j for j in range(n) if arr[j] in component]) sorted_component = sorted(arr[j] for j in component_indices) for k, idx in enumerate(component_indices): arr[idx] = sorted_component[k] return \\"YES\\" if arr == sorted(arr) else \\"NO\\""},{"question":"Design a function named `findLongestPalindrome(s)` that accepts a string `s` and returns the longest palindromic substring in `s`. In the case of multiple substrings of the same maximum length, return the first one that appears. If the string is empty or its length is less than 2, return the string itself.","solution":"def findLongestPalindrome(s): Returns the longest palindromic substring in s. if len(s) < 2: return s def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest_pal = \'\' for i in range(len(s)): # Odd length palindromes odd_pal = expand_around_center(i, i) if len(odd_pal) > len(longest_pal): longest_pal = odd_pal # Even length palindromes even_pal = expand_around_center(i, i + 1) if len(even_pal) > len(longest_pal): longest_pal = even_pal return longest_pal"},{"question":"Write a function that takes a list of tuples. Each tuple contains two integers and each integer in the tuple represents a point in time in 24-hour format (HHMM). The function should return another list of tuples where each tuple contains an integer representing the difference in minutes between the two points in time from the original tuple. For example, given the tuple (1230, 1530), the difference in minutes between 12:30 PM and 3:30 PM is 180 minutes. Note: - The second time in each tuple is always greater than or equal to the first time. - The list will contain between 1 and 1000 tuples. A few examples: ```python time_differences([(1230, 1530)]) >>> [(180)] time_differences([(230, 600), (1230, 1330)]) >>> [(210), (60)] time_differences([(2359, 2359)]) >>> [(0)] ``` Return the result as a list of integers representing the time differences in minutes.","solution":"def time_differences(time_tuples): Calculate the difference in minutes between two points in time for each tuple. result = [] for t1, t2 in time_tuples: # Split HHMM into hours and minutes h1, m1 = divmod(t1, 100) h2, m2 = divmod(t2, 100) # Convert both times to minutes from midnight time1_in_minutes = h1 * 60 + m1 time2_in_minutes = h2 * 60 + m2 # Calculate the difference in minutes difference = time2_in_minutes - time1_in_minutes result.append(difference) return result"},{"question":"Given an array of integers `nums` where the values are in the range [1, n] and each integer appears only once or twice, find all the integers of the range [1, n] that do not appear in `nums`. Write a function `findDisappearedNumbers` that solves this problem without using extra space and with O(n) runtime complexity. Example: Input: nums = [4,3,2,7,8,2,3,1] Output: [5,6] Input: nums = [1,1] Output: [2] Input: nums = [1,2,2,3,4,5] Output: [6] Input: nums = [2,2,2,3,4,4,5,6,6,6] Output: [1,7,8,9,10] Constraints: 1. n == nums.length 2. 1 <= n <= 100,000 3. `nums` is a permutation of numbers in the range [1, n]","solution":"def findDisappearedNumbers(nums): Given an array nums with values in the range [1, n], returns all the integers in the range [1, n] that do not appear in nums. for num in nums: index = abs(num) - 1 if nums[index] > 0: nums[index] = -nums[index] missing_numbers = [i + 1 for i, num in enumerate(nums) if num > 0] return missing_numbers"},{"question":"Implement a function `rotate_matrix(matrix)` that takes a 2D list (matrix) and rotates it 90 degrees clockwise. Assume the matrix is a non-empty square matrix (n x n). Ex. ``` rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) ``` should return ``` [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ```","solution":"def rotate_matrix(matrix): Rotates a given n x n matrix 90 degrees clockwise. Args: matrix (list of list of int): 2D list representing the square matrix. Returns: list of list of int: 2D list representing the rotated matrix. n = len(matrix) # Create a new matrix of the same size rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - 1 - i] = matrix[i][j] return rotated"},{"question":"You are given a list of non-negative integers representing the heights of vertical lines drawn at corresponding points along the x-axis. The width between two adjacent lines is 1 unit. Find two lines such that they together with the x-axis form a container, such that the container can hold the maximum amount of water. The function should return an integer representing the maximum water that can be held. Implement the function: ```python def max_area(height: List[int]) -> int: pass ``` Example: ```python assert max_area([1, 8, 6, 2, 5, 4, 8, 3, 7]) == 49 ``` Explanation: The container formed by lines at index 1 and index 8 can hold the maximum water (49 units). Constraints: - The length of the input list `height` will be at least 2 and at most 10^5. - The integers in `height` will be in the range from 0 to 10^4.","solution":"from typing import List def max_area(height: List[int]) -> int: Find two lines such that they together with the x-axis form a container, such that the container can hold the maximum amount of water. Args: height (List[int]): List of non-negative integers representing the heights of vertical lines. Returns: int: The maximum water that can be held by the container formed by any two of these lines. left, right = 0, len(height) - 1 max_water = 0 while left < right: # Calculate the width and the deciding height width = right - left ht = min(height[left], height[right]) max_water = max(max_water, width * ht) # Move the pointers if height[left] < height[right]: left += 1 else: right -= 1 return max_water"},{"question":"You are given an array of strings representing a list of books owned by various individuals. Each string is formatted as \\"Title:Owner\\". Write a function `book_count_by_owner` that: - accepts a list of strings and a person\'s name, and - returns the number of books owned by the person. If the person\'s name does not appear in the list, the function should return 0. **Examples:** ```python book_count_by_owner( [\\"1984:Alice\\", \\"The Great Gatsby:Bob\\", \\"To Kill a Mockingbird:Alice\\"], \\"Alice\\" ) == 2 book_count_by_owner( [\\"1984:Alice\\", \\"The Great Gatsby:Bob\\", \\"To Kill a Mockingbird:Alice\\"], \\"Bob\\" ) == 1 book_count_by_owner( [\\"1984:Alice\\", \\"The Great Gatsby:Bob\\", \\"To Kill a Mockingbird:Alice\\"], \\"Charlie\\" ) == 0 ```","solution":"def book_count_by_owner(books, owner): Returns the number of books owned by the specified person. Parameters: books (list): List of strings where each string is formatted as \\"Title:Owner\\". owner (str): The name of the book owner. Returns: int: The number of books owned by the specified person. return sum(1 for book in books if book.split(\\":\\")[1] == owner)"},{"question":"Gemma is a passionate gardener who loves growing flowers. She has N flower beds in a line, and each bed initially contains a certain number of flowers. Each flower bed potentially has flowers of different types, and Gemma has M distinct flower types. Gemma wants to rearrange the flowers such that each flower bed contains only up to 2 different types of flowers. Your task is to help Gemma achieve this arrangement. It can be shown that there will always be at least one valid solution under given constraints. If there are multiple correct solutions, you may output any one of them. -----Input:----- - The first line contains an integer T, denoting the number of test cases. T test cases will follow, each containing a single set of data. - The first line of each test case contains two space-separated integers N and M. - The next N lines contain M space-separated integers each, where the j-th integer on the i-th line indicates the number of flowers of type-j in bed-i. -----Output:----- - For each test case, output N lines. - Each line should contain 4 space-separated integers c1, m1, c2, m2 respectively which denotes that there are m1 flowers of type-c1 and m2 flowers of type-c2 inside the i-th bed, where 0 leq m1, m2 leq text{sum of flowers in the bed} and 0 leq c1, c2 < M. - Note that even if you have only one type of flower to put inside the i-th bed, you must still output 4 space-separated integers and keep either m1 or m2 as 0. -----Constraints----- - T=10 - 2 leq N leq 1000 - 2 leq M leq 20 - Each flower bed contains at least one flower of one type -----Sample Input:----- 1 3 3 3 1 2 0 4 1 5 2 3 -----Sample Output:----- 1 3 2 2 1 4 2 1 0 5 2 0 -----Explanation:----- - In the given test case, Gemma has 3 flower beds and 3 flower types. - The first bed originally has 3 flowers of type-0, 1 flower of type-1, and 2 flowers of type-2, which can be rearranged as 3 flowers of type-1 and 2 flowers of type-2. - The second bed originally has 0 flowers of type-0, 4 flowers of type-1, and 1 flower of type-2, which can be rearranged as 4 flowers of type-1 and 1 flower of type-2. - The third bed originally has 5 flowers of type-0, 2 flowers of type-1, and 3 flowers of type-2, which can be rearranged as 5 flowers of type-0 and 3 flowers of type-2.","solution":"def rearrange_flowers(T, test_cases): results = [] for t in range(T): N, M = test_cases[t][0] beds = test_cases[t][1] result = [] for bed in beds: # Find the two types with the most flowers flower_types = [(count, ftype) for ftype, count in enumerate(bed)] flower_types.sort(reverse=True, key=lambda x: x[0]) c1, m1 = flower_types[0][1], flower_types[0][0] c2, m2 = flower_types[1][1], flower_types[1][0] result.append((c1, m1, c2, m2)) results.append(result) return results"},{"question":"Design a function that takes in a list of positive integers representing the heights of buildings along a street and returns the maximum water that can be trapped between the buildings. Each building is represented by an integer, where buildings with greater height can trap more water. Example 1: Input: heights = [4, 2, 0, 3, 2, 5] Output: 9 Explanation: The heights can trap 9 units of water. Example 2: Input: heights = [1, 1, 1, 1, 1] Output: 0 Explanation: No water can be trapped as all buildings are of the same height. Example 3: Input: heights = [3, 0, 2, 0, 4] Output: 7 Explanation: The heights can trap 7 units of water. Constraints: 1. 1 <= heights.length <= 10^5 2. 0 <= heights[i] <= 10^4","solution":"def max_water_trapped(heights): Returns the maximum water that can be trapped between the buildings represented by heights. :param heights: List[int] :return: int if not heights: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, heights[left]) water_trapped += left_max - heights[left] else: right -= 1 right_max = max(right_max, heights[right]) water_trapped += right_max - heights[right] return water_trapped"},{"question":"A software company needs to categorize the projects based on their completion times into different priority levels. Given a list of projects with their completion times in days, the company follows the criteria: - High Priority: Projects completed in less than or equal to 10 days. - Medium Priority: Projects completed between 11 and 20 days. - Low Priority: Projects completed in more than 20 days. The board expects a summary containing the number of projects in each priority category. Help the company to automate this summary process. ------Input:------ - The first line contains a single integer T, the number of test cases. The following lines contain the test cases. - Each test case starts with an integer N, representing the number of projects. - Next N integers represent the list of completion times for each project. ------Output:------ For each test case, output three space-separated integers representing the count of high priority, medium priority, and low priority projects respectively. ------Constraints:------ - 1 leq T leq 10 - 1 leq N leq 10^4 - 1 leq Completion time leq 100 ------Sample Input:------ 2 5 5 12 7 25 30 4 15 10 20 3 ------Sample Output:------ 2 1 2 2 2 0","solution":"def categorize_projects(T, cases): results = [] for case in cases: N, times = case high_priority = sum(1 for t in times if t <= 10) medium_priority = sum(1 for t in times if 11 <= t <= 20) low_priority = sum(1 for t in times if t > 20) results.append((high_priority, medium_priority, low_priority)) return results"},{"question":"=====Function Descriptions===== A string is a sequential collection of characters that is used to represent a sequence of text. When printing, iterating, or converting a string to a different data type, special characters and whitespaces must be handled appropriately. =====Example===== >>> print simulate_typing([\'H\', \'a\', \'c\', \'k\', \'e\', \'r\', \'R\', \'a\', \'n\', \'k\']) HackerRank >>> print simulate_typing([\' \', \' \', \'H\', \'a\', \'c\', \'k\', \'e\', \'r\', \' \', \'R\', \'a\', \'n\', \'k\', \' \']) Hacker Rank >>> print simulate_typing([\'H\', \'a\', \'n\', \'c\', \'k\', \'e\', \'r\', \'t\', \'R\', \'a\', \'n\', \'k\']) Ha ck er Ran k Basically, strings are used for storing and manipulating text. =====Problem Statement===== Now, let\'s help Leonard with his typing simulation program. Leonard likes to type but often needs a program to simulate his typing behavior. He sometimes includes extra spaces or special characters like newlines (\'n\') and tabs (\'t\') in his input, but wants them properly formatted. You need to create a function \'simulate_typing\' which accepts a list of characters, and returns the corresponding string. =====Input Format===== A single list of characters. Each character can be an alphabet, a whitespace, or a special character. =====Constraints===== The list will not be empty and will contain at most 200 characters. =====Output Format===== Return the formatted string. =====Sample Input===== [\'H\', \'e\', \'l\', \'l\', \'o\', \',\', \' \', \'w\', \'o\', \'r\', \'l\', \'d\', \'!\', \' \', \'C\', \'o\', \'d\', \'e\', \'!\', \'n\', \'H\', \'e\', \'r\', \'e\', \'t\', \'w\', \'e\', \' \', \'g\', \'o\'] =====Sample Output===== Hello, world! Code! Here we go","solution":"def simulate_typing(char_list): Returns a string from a list of characters by concatenating them. Args: char_list (list): A list of characters. Returns: str: The concatenated string. return \'\'.join(char_list)"},{"question":"=====Problem Statement===== Write a program to calculate the sum of the digits of a given integer. If the integer is negative, treat it as its absolute value while calculating the sum. =====Input Format===== A single line containing an integer n. =====Constraints===== -10^4 ≤ n ≤ 10^4 =====Output Format===== Print the sum of the digits of the given integer.","solution":"def sum_of_digits(n): Returns the sum of the digits of the given integer n. If the integer is negative, treats it as its absolute value. n = abs(n) return sum(int(digit) for digit in str(n))"},{"question":"Given an array of integers `arr` and an integer `k`, return the maximum sum of `k` consecutive elements in the array. # Examples ``` maxSum([1, 3, 5, 2, 8, 1, 5], 3) = 15 // Explanation: Subarray [3, 5, 7] has the maximum sum of 15. maxSum([4, 4, 4, 4, 4], 2) = 8 // Explanation: Subarray [4, 4] has the maximum sum of 8. maxSum([5, -2, 1, 3, 9, -4, 2], 4) = 11 // Explanation: Subarray [1, 3, 9, -2] has the maximum sum of 11. ``` # Constraints: - 1 <= len(arr) <= 10^6 - -10^3 <= arr[i] <= 10^3 - 1 <= k <= len(arr)","solution":"def maxSum(arr, k): Returns the maximum sum of k consecutive elements in the array. if not arr or k <= 0 or k > len(arr): return 0 max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function that takes a string as its input and returns a new string that contains the characters of the original string in reverse order. The function is already implemented, but it fails for some test cases such as when the provided string is empty. Your task is to identify the issue and modify the function so that it handles all edge cases correctly. Example: ``` reverseString(\\"hello\\") => \\"olleh\\" reverseString(\\"world\\") => \\"dlrow\\" reverseString(\\"\\") => \\"\\" ``` Hint: Consider how different input cases, such as an empty string or a string with one character, might affect your solution.","solution":"def reverseString(s): Returns the string s in reverse order. return s[::-1]"},{"question":"The city is planning a new building project and needs to arrange construction workers in a specific pattern. Each group of workers will have a unique identifier represented by a positive integer. For simplicity, you are given the number of groups N and their identifiers in an array G. Your task is to create a program that outputs a triangular arrangement of workers\' identifiers. -----Input:----- - The first line contains T, the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N, the number of worker groups. - The second line contains N distinct integers separated by spaces, representing the group identifiers. -----Output:----- For each test case, output the triangular arrangement pattern. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - 1 leq G_i leq 1000 -----Sample Input:----- 3 4 2 5 7 8 3 1 3 6 5 4 9 12 15 18 -----Sample Output:----- ``` 2 2 5 2 5 7 2 5 7 8 ``` ``` 1 1 3 1 3 6 ``` ``` 4 4 9 4 9 12 4 9 12 15 4 9 12 15 18 ``` -----EXPLANATION:----- No need for further explanation; the pattern should be easily discernible from the output.","solution":"def triangular_pattern(t, test_cases): Outputs the triangular arrangement pattern for each test case. :param t: integer, number of test cases :param test_cases: list of tuples, each tuple contains an integer N and a list of N integers results = [] for N, G in test_cases: group_patterns = [] for i in range(1, N + 1): group_patterns.append(\\" \\".join(map(str, G[:i]))) results.append(\\"n\\".join(group_patterns)) return results"},{"question":"# Idea In the world of strings, there is a concept of creating permutations. Given a string, a permutation involves rearranging its characters in a specific order. However, with permutations, one might want to consider constraints such as uniqueness and specific ordering, for example: ``` \\"abc\\" can have permutations: [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] ``` Given an input string, your task is to create a programming function to generate all unique permutations of the string that are in lexicographic order. ___ # Task You will receive a string like `\\"abc\\"`. Your goal is to write a function that returns all unique permutations of the string in lexicographic order. ```python s = \\"abc\\" generate_permutations(s) ==> [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] ``` ___ # Notes * If the input string has repeated characters, ensure the permutations are unique. * The function should return permutations in lexicographic order * The input string will only contain lowercase letters from the English alphabet. * Consider edge cases, such as an empty string or a single-character string.","solution":"from itertools import permutations def generate_permutations(s): Generate all unique permutations of the input string in lexicographic order. Parameters: s (str): The input string Returns: list: A list of unique permutations in lexicographic order # Generate all permutations using itertools.permutations perms = permutations(s) # Use a set to ensure uniqueness unique_perms = set(perms) # Convert tuples back to strings and sort them lexicographically sorted_perms = sorted([\'\'.join(p) for p in unique_perms]) return sorted_perms"},{"question":"# Task Write a function that determines if all the characters in a given string are unique. The function should return `true` if all characters are unique, and `false` otherwise. The check should be case-sensitive, meaning \'a\' and \'A\' are considered different characters. # Example For `input = \\"abcdef\\"`, the output should be `true`; For `input = \\"aA\\"`, the output should be `true`; For `input = \\"abac\\"`, the output should be `false`. # Input/Output - `[input]` a string `input` Constraints: `1 ≤ input.length ≤ 1000`, the string contains printable ASCII characters. - `[output]` a boolean value `true` if all characters are unique, `false` otherwise.","solution":"def all_unique_characters(input: str) -> bool: Determines if all characters in a given string are unique. It\'s case-sensitive. Args: input: A string to be evaluated. Returns: bool: True if all characters are unique, False otherwise. return len(set(input)) == len(input)"},{"question":"You are organizing a virtual bookshelf application and need to sort the books based on their titles. Each book is represented as a dictionary with at least a \'title\' field. Write a function that takes a list of book dictionaries and returns a new list sorted alphabetically by titles. If two or more books have the same title, maintain their original order (this is known as a stable sort). Ensure your solution takes advantage of Python\'s built-in libraries for optimal performance. Here is an example of what your function should look like: ```python def sort_books_by_title(books): Sorts a list of book dictionaries alphabetically by title. Args: books (list): A list of dictionaries, each containing at least a \'title\' key. Returns: list: A new list of dictionaries sorted by the \'title\' key. # Your code here ``` Example usage: ```python books = [ {\'title\': \'The Catcher in the Rye\', \'author\': \'J.D. Salinger\'}, {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\'}, {\'title\': \'1984\', \'author\': \'George Orwell\'}, {\'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\'}, {\'title\': \'1984\', \'author\': \'Another Author\'} ] sorted_books = sort_books_by_title(books) # sorted_books should be: # [ # {\'title\': \'1984\', \'author\': \'George Orwell\'}, # {\'title\': \'1984\', \'author\': \'Another Author\'}, # {\'title\': \'The Catcher in the Rye\', \'author\': \'J.D. Salinger\'}, # {\'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\'}, # {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\'} # ] ``` Remember to test your function with books that have the same title to ensure they maintain their original order.","solution":"def sort_books_by_title(books): Sorts a list of book dictionaries alphabetically by title. Args: books (list): A list of dictionaries, each containing at least a \'title\' key. Returns: list: A new list of dictionaries sorted by the \'title\' key. return sorted(books, key=lambda book: book[\'title\'])"},{"question":"You are given an integer array and a target number. The array may contain duplicate values. Your task is to find the length of the smallest subarray, such that the sum of its elements is greater than or equal to the target number. If there is no such subarray, return 0. For example, in array a = [2, 3, 1, 2, 4, 3] and a target number 7, the smallest subarray with a sum of at least 7 is [4, 3], and its length is 2. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and s (1 le n le 10^5, 0 le s le 10^9), where n is the number of elements in the array and s is the target sum. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^5) — the array elements. -----Output----- For each test case, print a single integer — the length of the smallest subarray with a sum of at least s. If no such subarray exists, print 0. -----Example----- Input 3 6 7 2 3 1 2 4 3 4 15 1 2 3 4 5 11 1 2 3 4 5 Output 2 0 3 -----Note----- In the first test case, the smallest subarray with a sum of at least 7 is [4, 3], so the answer is 2. In the second test case, there is no subarray with a sum of at least 15, so the answer is 0. In the third test case, the subarray [3, 4, 5] has a sum of 12, which is greater than 11, and its length is 3. This is the smallest possible subarray, hence the answer is 3.","solution":"def min_subarray_length(t, test_cases): Returns the length of the smallest subarray with a sum of at least the target number for each test case. Parameters: t (int): number of test cases. test_cases (list of tuples): list of test cases, where each test case contains: * n (int): the number of elements in the array. * s (int): the target sum. * arr (list): the list of integers representing the array. Returns: list: list of integers where each integer represents the length of the smallest subarray with a sum of at least the target number for the corresponding test case. results = [] for n, s, arr in test_cases: min_len = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= s: min_len = min(min_len, end - start + 1) current_sum -= arr[start] start += 1 if min_len == float(\'inf\'): results.append(0) else: results.append(min_len) return results"},{"question":"Description In a magical world, there are many types of potions with various magical powers. Each potion has an associated strength level and a unique identifying string. As a wizard, you must prepare potions combinations to maximize the overall strength for a given spell. You are given a list of potions, each represented as a tuple with the potion\'s strength (integer) and its secret ingredient (string). Your task is to find the combination of `k` potions that yields the highest possible combined strength. Return the corresponding unique identifying strings of these potions in any order. # Important Info: * There will always be at least `k` potions in the input list. * The strength values are not guaranteed to be unique. * The identifying strings are unique and may contain letters (both uppercase and lowercase) and numbers. # Example Consider the following list of potions and `k` = 3: ```python potions = [(10, \\"Dragon\'s Breath\\"), (5, \\"Unicorn Horn\\"), (7, \\"Phoenix Feather\\"), (8, \\"Mermaid Scale\\"), (12, \\"Basilisk Fang\\")] ``` would return: `[\\"Basilisk Fang\\", \\"Dragon\'s Breath\\", \\"Mermaid Scale\\"]` because these potions have the highest combined strength (12 + 10 + 8 = 30). If `k` = 2, the function should return: ```python [\\"Basilisk Fang\\", \\"Dragon\'s Breath\\"] ``` since they have the highest combined strength (12 + 10 = 22). # Constraints * The potions list will have at most 1000 elements. * 1 <= k <= length of potions list * -1000 <= strength <= 1000","solution":"def strongest_potions(potions, k): Finds the combination of k potions that yields the highest possible combined strength. Args: potions: List of tuples, where each tuple contains an integer strength and a string identifier. k: Integer, number of potions to select to maximize the combined strength. Returns: List of strings, unique identifiers of the selected potions. # Sort potions by strength in descending order sorted_potions = sorted(potions, key=lambda x: x[0], reverse=True) # Select top k potions selected_potions = sorted_potions[:k] # Extract and return the identifiers of the selected potions return [potion[1] for potion in selected_potions]"},{"question":"Given an array of integers, find the smallest positive integer that is not present in the array. For example, with array = [3, 4, -1, 1], Return 2, because 2 is the smallest positive integer that\'s not in the array. Note: The array length will be between 1 and 100000. Elements of the array can be both negative and positive.","solution":"def smallest_missing_positive_integer(arr): Returns the smallest positive integer not in arr. arr_set = set(arr) i = 1 while True: if i not in arr_set: return i i += 1"},{"question":"Given an array of integers, find the maximum sum of any contiguous subarray of the array. The problem is the classic \\"Maximum Subarray Problem\\", which can be solved using Kadane\'s Algorithm. Implement a function that finds this maximum sum. If the array is empty, return 0. Example: Input: [−2,1,−3,4,−1,2,1,−5,4] Output: 6 Explanation: The maximum subarray is [4,−1,2,1], which has sum 6. Constraints: - The length of the array can be up to 10,000 elements. - The values in the array can range from -10,000 to 10,000. Follow up: Can you solve it with O(n) time complexity?","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray of the array. If the array is empty, return 0. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an array of integers representing points scored by players in a game, you need to find the player with the highest average score over the games they played. In case of a tie, return the player that appears first in the list. You are provided with a list of tuples where each tuple contains two elements: the player\'s unique identifier (as a string) and the points they scored in that game. Each player can play multiple games. Write a function that takes the list of tuples as input and outputs the identifier of the player with the highest average score. For example: ```python games = [(\'alice\', 10), (\'bob\', 15), (\'alice\', 20), (\'bob\', 25), (\'charles\', 10)] # The function should return \'bob\' ``` ```python def top_scorer(games): from collections import defaultdict scores = defaultdict(list) for player, score in games: scores[player].append(score) max_avg = -1 top_player = None for player, score_list in scores.items(): avg_score = sum(score_list) / len(score_list) if avg_score > max_avg: max_avg = avg_score top_player = player elif avg_score == max_avg and top_player is not None: pass # maintain the player that appeared first in the list return top_player # Example usage: print(top_scorer([(\'alice\', 10), (\'bob\', 15), (\'alice\', 20), (\'bob\', 25), (\'charles\', 10)])) # Output: \'bob\' ``` Write the function `top_scorer(games)` to solve the problem.","solution":"def top_scorer(games): from collections import defaultdict scores = defaultdict(list) for player, score in games: scores[player].append(score) max_avg = float(\'-inf\') top_player = None for player, score_list in scores.items(): avg_score = sum(score_list) / len(score_list) if avg_score > max_avg: max_avg = avg_score top_player = player # In case of a tie, the player who appears first in the dictionary gets chosen (which aligns with first appearance in the list) return top_player"},{"question":"Task A sleepy security guard is responsible for monitoring a corridor with several surveillance cameras positioned at various points. Unfortunately, his nap schedule aligns perfectly with his patrol times, so he needs to rely on these cameras to alert him when someone unauthorized passes by. Your task is to help him determine which cameras are effective. Given a one-dimensional corridor representation and the positions of cameras and intruders, identify the cameras that will successfully detect any intruders passing by. A camera can see an intruder if they are positioned at the same point or within its range. Each camera has a specific range that denotes how many units (in either direction) it can view along the corridor. Example For `corridor_length = 10`, `cameras = [[3, 2], [6, 1]]`, and `intruders = [1, 4, 7, 8]`, the result should be `[0, 1]`. Explanation: - The first camera located at position `3` with a range of `2` can monitor positions `1` to `5`. - The second camera located at position `6` with a range of `1` can monitor positions `5` to `7`. - The intruder at `1` is detected by the first camera. - The intruder at `4` is detected by the first camera. - The intruder at `7` is detected by the second camera. - The intruder at `8` is outside the range of both cameras. Thus, both cameras `[0, 1]` successfully detect any of the intruders. Input/Output - `[input]` integer `corridor_length` The length of the corridor. - `[input]` 2D integer array `cameras` Each camera\'s position and its range. Each element is a pair of integers `[position, range]`. - `[input]` integer array `intruders` Positions of the intruders (array of integers). - `[output]` an integer array Indices of the cameras that successfully detect at least one intruder. Constraints - The corridor length will be between 1 and 100 (inclusive). - There will be between 1 and 10 cameras. - Each camera\'s range will be between 1 and 10. - There will be between 1 and 20 intruders. - The positions of cameras and intruders will be within the bounds of the corridor length.","solution":"def effective_cameras(corridor_length, cameras, intruders): This function determines which cameras are effective in detecting intruders passing by in a corridor. Args: - corridor_length (int): Length of the corridor. - cameras (list of list of int): Each sublist contains two integers, the first representing the position of the camera, and the second its range. - intruders (list of int): Positions of the intruders. Returns: - list of int: Indices of the cameras that successfully detect at least one intruder. effective = [] for i, (cam_pos, cam_range) in enumerate(cameras): cam_range_start = max(0, cam_pos - cam_range) cam_range_end = min(corridor_length - 1, cam_pos + cam_range) for intruder in intruders: if cam_range_start <= intruder <= cam_range_end: effective.append(i) break return effective"},{"question":"Write a program that simulates the generation of a seating chart for a classroom following these rules: 1. The classroom is represented as an N x M grid. 2. Each cell in the grid represents a seat which can either be occupied by a student (\'S\') or be empty (\'E\'). 3. No two students can sit next to each other horizontally, vertically, or diagonally. 4. The top-left seat must be occupied by a student. Given N and M, generate a possible seating chart that follows the above rules. Example output for a 4 x 6 grid: ``` S E S E S E E E E E E E S E S E S E E E E E E E ``` Input A single line with two integers N and M separated by space. The number N will represent the number of rows and M the number of columns. Output Return N lines each containing M characters with the seating chart pattern. Empty string if N, M or both are 0. From: Generated Coding Assessment Task","solution":"def generate_seating_chart(N, M): if N == 0 or M == 0: return \\"\\" seating_chart = [] for i in range(N): row = [] for j in range(M): if (i % 2 == 0 and j % 2 == 0): row.append(\'S\') else: row.append(\'E\') seating_chart.append(\' \'.join(row)) return \'n\'.join(seating_chart)"},{"question":"Chuck is planning a chocolate factory automation system. One part of the system needs to check the quality of chocolates coming off the production line. Given a string that represents a batch of chocolates, where each character denotes the quality of a chocolate (for example, \'A\' for acceptable, \'B\' for bad, \'C\' for contaminated), your task is to return a dictionary with the count of each quality type in the batch. If a particular quality type is not present in the batch, it should be omitted from the dictionary. Function Signature: `def quality_count(batch: str) -> dict:` Example: ```python print(quality_count(\\"AABCCBAA\\")) # Output: {\'A\': 4, \'B\': 2, \'C\': 2} print(quality_count(\\"BBBB\\")) # Output: {\'B\': 4} print(quality_count(\\"\\")) # Output: {} ```","solution":"def quality_count(batch: str) -> dict: from collections import Counter return dict(Counter(batch))"},{"question":"You are tasked with implementing a function that calculates the distribution of candies among children such that each child gets at least one candy, and children with higher ratings get more candies than their neighbors. The function should return the minimum number of candies to achieve this. You are given an array of integers representing the ratings of the children. Candies must be distributed according to the following rules: 1. Each child must have at least one candy. 2. A child with a higher rating than their neighbor should receive more candies than that neighbor. # Function Signature: ```python def distribute_candies(ratings: list[int]) -> int: ``` # Input: - `ratings` (list of integers): A list of integers where each integer represents the rating of a child. # Output: - An integer representing the minimum number of candies needed. # Example: ```python distribute_candies([1, 0, 2]) # Output: 5 distribute_candies([1, 2, 2]) # Output: 4 ``` # Explanation: - In the first example, the ratings are `[1, 0, 2]`. We can distribute the candies as follows: `[2, 1, 2]`. - The child with a rating of 1 gets 2 candies. - The child with a rating of 0 gets 1 candy. - The child with a rating of 2 gets 2 candies. - Total candies = 2 + 1 + 2 = 5. - In the second example, the ratings are `[1, 2, 2]`. We can distribute the candies as follows: `[1, 2, 1]`. - The child with a rating of 1 gets 1 candy. - The first child with a rating of 2 gets 2 candies. - The second child with a rating of 2 gets 1 candy. - Total candies = 1 + 2 + 1 = 4. # Constraints: - The length of `ratings` will be between 1 and 100,000. - Each rating will be an integer between 0 and 1,000,000.","solution":"def distribute_candies(ratings: list[int]) -> int: n = len(ratings) if n == 0: return 0 candies = [1] * n # Left to right pass for i in range(1, n): if ratings[i] > ratings[i-1]: candies[i] = candies[i-1] + 1 # Right to left pass for i in range(n-2, -1, -1): if ratings[i] > ratings[i+1]: candies[i] = max(candies[i], candies[i+1] + 1) return sum(candies)"},{"question":"Given a long string `S`, determine if it can be transformed into a palindrome by removing at most one character. A string is said to be a palindrome if it reads the same backward as forward. -----Input:----- - The first line contains a single integer T, the number of test cases. - The next T lines each contain a single string S. -----Output:----- For each test case, print \\"YES\\" (without quotes) if the string can be transformed into a palindrome by removing at most one character, or \\"NO\\" (without quotes) otherwise. -----Constraints:----- - 1 ≤ T ≤ 10^4 - 1 ≤ |S| ≤ 10^5 - S contains only lowercase letters. -----Sample Input:----- 3 abca racecar abcdef -----Sample Output:----- YES YES NO -----EXPLANATION:----- For the first test case: The string `abca` can be transformed into a palindrome by removing the character \'b\' or \'c\', resulting in `aca` or `aba`, which are both palindromes. For the second test case: The string `racecar` is already a palindrome. For the third test case: The string `abcdef` cannot be transformed into a palindrome by removing just one character.","solution":"def can_be_palindrome_by_removing_one(S): def is_palindrome_range(i, j): return all(S[k] == S[j-k+i] for k in range(i, j)) left, right = 0, len(S) - 1 while left < right: if S[left] != S[right]: return is_palindrome_range(left+1, right) or is_palindrome_range(left, right-1) left += 1 right -= 1 return True def palindrome_test_cases(T, test_cases): results = [] for S in test_cases: if can_be_palindrome_by_removing_one(S): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a string, identify and return the length of the longest substring where all characters are unique. Example: `longestUniqueSubstring(\'abcabcbb\')` - In the given string \\"abcabcbb\\", the longest substring with unique characters is \\"abc\\", which has a length of 3. Thus, the output will be `3`. Example: `longestUniqueSubstring(\'bbbbb\')` - In the string \\"bbbbb\\", the longest substring with unique characters is \\"b\\", which has a length of 1. Thus, the output will be `1`. Example: `longestUniqueSubstring(\'pwwkew\')` - For the given string \\"pwwkew\\", the longest substring with unique characters is \\"wke\\", which has a length of 3. Thus, the output will be `3`. If the input string is empty, nil, or has no unique characters, return `0`.","solution":"def longestUniqueSubstring(s): Returns the length of the longest substring with all unique characters. Parameters: s (str): The input string Returns: int: The length of the longest substring where all characters are unique if not s: return 0 max_length = 0 start = 0 char_index_map = {} for end in range(len(s)): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a list of integers and your task is to sort the list such that all even numbers appear before all odd numbers while maintaining their relative order. Write a function `even_before_odd(lst)` that takes a list of integers and returns a new list with even numbers at the beginning followed by odd numbers, both in the same relative order as in the original list. For example, given the list: ``` [3, 8, 12, 5, 10, 1, 4] ``` The function should return: ``` [8, 12, 10, 4, 3, 5, 1] ``` If the input list is empty, the function should return an empty list.","solution":"def even_before_odd(lst): Returns a new list with all even numbers appearing before all odd numbers while maintaining their relative order from the original list. evens = [x for x in lst if x % 2 == 0] odds = [x for x in lst if x % 2 != 0] return evens + odds"},{"question":"-----Question----- A company has decided to split up its employees into several teams for a project. Each project requires a fixed number of employees. However, each employee can only work on one project at a time. You are given the number of employees N, and an array P of length M where P[i] represents the number of employees required for the i-th project. Your task is to determine if it is possible to group the employees in such a way that every project has exactly the number of employees it requires, without any employee working on more than one project. If it is possible, print \\"YES\\" (without quotes) and list the groups of employees for each project. If it is not possible, print \\"NO\\" (without quotes). -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case consists of two lines. - The first line contains two integers N (number of employees) and M (number of projects). - The second line contains M integers denoting the array P. -----Output:----- - For each testcase, if it is impossible to assign the employees to all the projects as required, output \\"NO\\" (without quotes). - If it is possible, output \\"YES\\" (without quotes), followed by M lines. Each of these M lines should contain a group of employee IDs (1-based index), separated by a space. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - 1 leq M leq 100 - 1 leq P[i] leq N -----Sample Input:----- 3 5 2 3 2 6 3 2 2 2 4 2 3 2 -----Sample Output:----- YES 1 2 3 4 5 YES 1 2 3 4 5 6 NO -----Explanation:----- - For the first testcase, there are 5 employees and 2 projects. One possible way to divide them is having employees [1, 2, 3] for the first project and [4, 5] for the second project. - For the second testcase, there are 6 employees and 3 projects. One possible division is employees [1, 2], [3, 4], and [5, 6]. - For the third testcase, it is impossible to divide 4 employees into projects of 3 and 2 employees since they would require 5 employees in total which is more than available. Hence the output is \\"NO\\".","solution":"def can_divide_into_teams(N, P): total_required = sum(P) if total_required != N: return (\\"NO\\", []) result = [] current_employee = 1 for p in P: team = list(range(current_employee, current_employee + p)) result.append(team) current_employee += p return (\\"YES\\", result) def process_test_cases(T, test_cases): results = [] for N, M, P in test_cases: res, teams = can_divide_into_teams(N, P) results.append((res, teams)) return results"},{"question":"A railway network consists of N stations and M direct routes connecting pairs of stations. Each route has a travel cost associated with it. Your task is to determine the minimum cost required to travel from the first station to the last station. You can assume that the stations are numbered from 1 to N. -----Input:----- - The first line contains two integers N and M, denoting the number of stations and the number of direct routes respectively. - The next M lines each contain three space-separated integers u, v, and w, describing a direct route from station u to station v with a travel cost of w. -----Output:----- Print a single integer representing the minimum travel cost to travel from the first station (station 1) to the last station (station N). If there is no possible way to travel from station 1 to station N, print -1. -----Constraints----- - 2 leq N leq 1000 - 1 leq M leq 10000 - 1 leq u, v leq N - 1 leq w leq 10^6 - It\'s guaranteed that no direct route connects a station to itself. -----Sample Input:----- 5 6 1 2 4 1 3 2 2 3 5 2 4 10 3 4 3 4 5 1 -----Sample Output:----- 10 -----Explanation:----- The minimum cost to travel from station 1 to station 5 is 10, which can be achieved via the following path: Station 1 rightarrow Station 3 rightarrow Station 4 rightarrow Station 5. The total travel cost is 2 + 3 + 1 = 6.","solution":"import heapq def minimum_travel_cost(N, M, routes): Find the minimum travel cost from the first station (1) to the last station (N). Parameters: N (int): Number of stations. M (int): Number of routes. routes (list of tuples): Each tuple contains three integers (u, v, w) representing a direct route from station u to station v with cost w. Returns: int: Minimum travel cost from station 1 to station N, or -1 if no path exists. # Create adjacency list for the graph graph = {i: [] for i in range(1, N + 1)} for u, v, w in routes: graph[u].append((v, w)) graph[v].append((u, w)) # Assuming the routes are bidirectional # Dijkstra\'s Algorithm to find the shortest path from node 1 to node N priority_queue = [(0, 1)] # (cost, node) distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[1] = 0 visited = set() while priority_queue: current_cost, current_node = heapq.heappop(priority_queue) if current_node in visited: continue visited.add(current_node) if current_node == N: return current_cost for neighbor, weight in graph[current_node]: new_cost = current_cost + weight if new_cost < distances[neighbor]: distances[neighbor] = new_cost heapq.heappush(priority_queue, (new_cost, neighbor)) return -1 if distances[N] == float(\'inf\') else distances[N] # Usage with sample input sample_input = (5, 6, [(1, 2, 4), (1, 3, 2), (2, 3, 5), (2, 4, 10), (3, 4, 3), (4, 5, 1)]) print(minimum_travel_cost(*sample_input)) # Output: 6"},{"question":"You are given a string consisting of only lowercase English letters and the \'?\' character. Your task is to replace each \'?\' character with a lowercase letter such that no two adjacent characters are the same. If there is more than one solution, any one of them is acceptable. __For example:__ Let\'s say you are given the string `\\"a?c?e\\"`: Your function can return `\\"abcde\\"`. By replacing each `\'?\'`, you ensure no two adjacent characters are the same. Let\'s look at another one. You are given the string `\\"???\\"`: Your function can return `\\"abc\\"`, as no two adjacent characters are the same and all question marks have been replaced. Last case: You are given the string `\\"ab?\\"`: Your function can return `\\"abc\\"` or `\\"abd\\"` and so on, as long as the replaced character is different from its adjacent characters. __Input:__ A string `s` of length `0 < len(s) < 1000`, consisting of lowercase English letters and the \'?\' character. __Output:__ A valid string with no \'?\' characters, where no two adjacent characters are the same. __Note:__ If there are multiple valid solutions, any one is acceptable.","solution":"def replace_question_marks(s): s = list(s) for i in range(len(s)): if s[i] == \'?\': for c in \'abc\': if (i == 0 or s[i - 1] != c) and (i == len(s) - 1 or s[i + 1] != c): s[i] = c break return \'\'.join(s)"},{"question":"You are given an array of N integers (numbered 1 through N). You need to find a subarray (a contiguous subsequence) such that the sum of its elements is the largest possible and its length is at least K. If there are multiple such subarrays, return the leftmost one. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and K. - The second line contains N space-separated integers representing the array. -----Output----- For each test case, print a single line containing two integers — the starting and ending indices (1-indexed) of the subarray with the maximum sum and length at least K. If there are multiple such subarrays, print the one with the smallest starting index. -----Constraints----- - 1 le T le 1,000 - 1 le N le 100,000 - 1 le K le N - -10^9 le A[i] le 10^9 for each valid i - the sum of N over all test cases does not exceed 5 cdot 10^5 -----Example Input----- 2 5 2 1 -2 3 4 -1 7 3 -2 1 -3 4 -1 2 1 -----Example Output----- 3 4 4 7 -----Explanation----- Example case 1: The subarray from indices 3 to 4 (1-indexed) is the subarray with maximum sum (3 + 4 = 7) and its length is at least 2. Example case 2: The subarray from indices 4 to 7 (1-indexed) is the subarray with maximum sum (4 - 1 + 2 + 1 = 6) and its length is at least 3.","solution":"def max_sum_subarray(arr, N, K): # Create a list of prefix sums prefix_sum = [0] * (N + 1) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] # Initialize variables to track the maximum sum and indices max_sum = float(\'-inf\') max_start = 0 max_end = 0 # Iterate through the array to find the subarray with length at least K for start in range(N - K + 1): for end in range(start + K, N + 1): curr_sum = prefix_sum[end] - prefix_sum[start] if curr_sum > max_sum: max_sum = curr_sum max_start = start max_end = end # Return 1-indexed positions return (max_start + 1, max_end) def process_test_cases(test_cases): results = [] for test_case in test_cases: N, K, arr = test_case result = max_sum_subarray(arr, N, K) results.append(result) return results # Example input reading and processing multiple test cases def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N, K = int(data[index]), int(data[index + 1]) arr = list(map(int, data[index + 2 : index + 2 + N])) test_cases.append((N, K, arr)) index += 2 + N results = process_test_cases(test_cases) for result in results: print(result[0], result[1])"},{"question":"In a N x M grid, each cell can either be a tree (\'T\') or an empty space (\'.\'). Two trees are considered connected if they are adjacent horizontally, vertically, or diagonally. The task is to count the number of distinct forests in the given grid. A forest is a group of connected trees. Example 1: Input: [ \\"T.T\\", \\".T.\\", \\"T.T\\" ] Output: 1 Explanation: The grid is as follows: T . T . T . T . T All trees are connected diagonally, forming one single forest. Example 2: Input: [ \\"TT.\\", \\"T..\\", \\"...\\", \\".T.\\" ] Output: 2 Explanation: The grid is as follows: T T . T . . . . . . T . There are two distinct forests: one in the top left corner and one in the bottom right corner. Note: 1 <= grid.length <= 30 1 <= grid[0].length <= 30 grid[i][j] is either \'T\' or \'.\'","solution":"def count_forests(grid): Counts the number of distinct forests in the given N x M grid. A forest is a group of connected trees (\'T\') which are connected horizontally, vertically, or diagonally. :param grid: List of strings representing the grid :return: Number of distinct forests if not grid: return 0 rows = len(grid) cols = len(grid[0]) visited = [[False] * cols for _ in range(rows)] def dfs(x, y): Depth-first search to mark all connected \'T\' as visited. stack = [(x, y)] directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] while stack: cx, cy = stack.pop() for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny] and grid[nx][ny] == \'T\': visited[nx][ny] = True stack.append((nx, ny)) forest_count = 0 for i in range(rows): for j in range(cols): if grid[i][j] == \'T\' and not visited[i][j]: visited[i][j] = True forest_count += 1 dfs(i, j) return forest_count"},{"question":"Write a function that takes a list of integers and returns a new list such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at `i`. For example, if the input is `[1, 2, 3, 4, 5]`, the expected output would be `[120, 60, 40, 30, 24]`. If the input is `[3, 2, 1]`, the expected output would be `[2, 3, 6]`. You must do this in `O(n)` time complexity and without using division. ```python def product_except_self(nums): pass # Test Cases assert product_except_self([1, 2, 3, 4, 5]) == [120, 60, 40, 30, 24] assert product_except_self([3, 2, 1]) == [2, 3, 6] assert product_except_self([1, 1, 1, 1]) == [1, 1, 1, 1] assert product_except_self([2, 4, 6, 8]) == [192, 96, 64, 48] assert product_except_self([5, 0, 0, 5]) == [0, 0, 0, 0]","solution":"def product_except_self(nums): length = len(nums) if length == 0: return [] # Initialize the result array with 1\'s result = [1] * length # Calculate products of elements on the left side of each element left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Calculate products of elements on the right side of each element and multiply with the existing value right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"You are given a string s1 and a string s2. Your task is to determine if s2 is a subsequence of s1 or not. A subsequence is derived from another string by deleting some or no characters without changing the order of the remaining characters. If s2 is a subsequence of s1, return True; otherwise, return False. Write a function that checks whether s2 is a subsequence of s1. # Function Signature ```python def is_subsequence(s1: str, s2: str) -> bool: ``` # Input - **s1** (1 ≤ |s1| ≤ 500): a non-empty string consisting of lowercase English letters. - **s2** (1 ≤ |s2| ≤ 100): a non-empty string consisting of lowercase English letters. # Output - Return `True` if s2 is a subsequence of s1, otherwise return `False`. # Example Example 1 ```plaintext Input: s1 = \\"apple\\" s2 = \\"ale\\" Output: True ``` Example 2 ```plaintext Input: s1 = \\"banana\\" s2 = \\"abn\\" Output: False ``` Example 3 ```plaintext Input: s1 = \\"coding\\" s2 = \\"cdg\\" Output: True ```","solution":"def is_subsequence(s1: str, s2: str) -> bool: Checks whether s2 is a subsequence of s1. it = iter(s1) return all(char in it for char in s2)"},{"question":"Jack is an avid gardener, and he loves to plant flowers in his garden. He has a flowerbed represented by an array containing `n` integers, where `1` means the plot is already planted with a flower, and `0` means the plot is empty. However, flowers cannot be planted in adjacent plots due to root competition. Given this, Jack wants to plant as many new flowers as he can in the empty plots while adhering to this no-adjacent-flowers rule. Design a `max_flowers` function that takes two arguments: - An integer array `flowerbed` which represents the garden plots. - An integer `n` which is the number of new flowers Jack wants to plant. Your task is to determine if Jack can plant `n` new flowers in the flowerbed without violating the no-adjacent-flowers rule. The function should return `true` if he can plant all `n` flowers, and `false` otherwise. **Example:** ``` max_flowers([1, 0, 0, 0, 1], 1) -> true max_flowers([1, 0, 0, 0, 1], 2) -> false ``` **Constraints:** * 1 <= flowerbed.length <= 2 * 10^4 * flowerbed[i] is 0 or 1. * 1 <= n <= flowerbed.length","solution":"def max_flowers(flowerbed, n): Determine if it\'s possible to plant `n` new flowers in the flowerbed without violating the no-adjacent-flowers rule. :param flowerbed: List[int] - The garden plots represented by 0s and 1s. :param n: int - The number of flowers to plant. :return: bool - True if it is possible to plant `n` flowers, otherwise False. count = 0 length = len(flowerbed) for i in range(length): if flowerbed[i] == 0: prev = (i == 0) or (flowerbed[i - 1] == 0) next = (i == length - 1) or (flowerbed[i + 1] == 0) if prev and next: flowerbed[i] = 1 count += 1 if count >= n: return True return count >= n"},{"question":"Alice has a collection of strings. She likes to play a game where she removes the first character from each string and appends it to the end of the string. If the resulting string matches the original string, it forms a \\"cyclic permutation\\". Given a set of strings, determine how many of them form a cyclic permutation. -----Input:----- - First line will contain N, the number of strings in the collection. - Then, each of the next N lines contain a single string S. -----Output:----- For each string, output \\"YES\\" if it forms a cyclic permutation, else output \\"NO\\". -----Constraints----- - 1 leq N leq 1000 - 1 leq |S| leq 100 -----Sample Input:----- 3 abc cab aaa -----Sample Output:----- NO NO YES","solution":"def is_cyclic_permutation(s): Determines if the given string s forms a cyclic permutation when its first character is moved to the end of the string. if len(s) <= 1: return True shifted_string = s[1:] + s[0] return shifted_string == s def check_cyclic_permutations(strings): Checks each string in a list of strings to see if it forms a cyclic permutation. Returns a list with \\"YES\\" or \\"NO\\" for each string. results = [] for s in strings: if is_cyclic_permutation(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of positive integers piles where piles[i] represents the number of stones in the i-th pile. In each move, you can take any number of stones from a single pile, but you must always leave at least one stone in the pile. Return the number of moves required to make all piles contain exactly one stone. Example 1: Input: piles = [3, 4, 5] Output: 9 Explanation: - Take 2 stones from the first pile: [3, 4, 5] -> [1, 4, 5] - Take 3 stones from the second pile: [1, 4, 5] -> [1, 1, 5] - Take 4 stones from the third pile: [1, 1, 5] -> [1, 1, 1] Total moves = 2 + 3 + 4 = 9 Example 2: Input: piles = [1, 2, 3] Output: 3 Explanation: - Take 1 stone from the second pile: [1, 2, 3] -> [1, 1, 3] - Take 2 stones from the third pile: [1, 1, 3] -> [1, 1, 1] Total moves = 1 + 2 = 3 Example 3: Input: piles = [1, 1, 1] Output: 0 Explanation: All piles already contain exactly one stone. Constraints: 1 <= piles.length <= 10^4 1 <= piles[i] <= 10^5","solution":"def min_moves(piles): Returns the minimum number of moves required to make all piles contain exactly one stone. Parameters: piles (list of int): A list where each element represents the number of stones in the i-th pile Returns: int: The minimum number of moves required return sum(pile - 1 for pile in piles)"},{"question":"Write a function that takes a positive integer and returns a list of its digits in reverse order. The return value should be a list of integers. Example: ```python reverse_digits(12345) # should return [5, 4, 3, 2, 1] ```","solution":"def reverse_digits(n): Returns the digits of the positive integer n in reverse order. reversed_digits = [int(digit) for digit in str(n)[::-1]] return reversed_digits"},{"question":"# Task You are given a list of integers representing scores in a game. A \\"streak\\" is defined as a sequence of consecutive scores that are all strictly increasing. Your task is to find the length of the longest streak in the given list. # Input/Output `[input]` integer array `scores` A list of integers representing the scores in the game. The length of the list will be between 1 and 1000. `[output]` an integer Return the length of the longest streak of strictly increasing scores. If there are no increasing sequences, return 1. # Example For `scores = [1, 2, 3, 2, 3, 4, 5]`, the output should be `4`, because the longest streak is `[2, 3, 4, 5]`. For `scores = [5, 4, 3, 2, 1]`, the output should be `1`, because there are no increasing sequences.","solution":"def longest_increasing_streak(scores): Returns the length of the longest streak of strictly increasing scores. if not scores: return 0 max_streak = 1 current_streak = 1 for i in range(1, len(scores)): if scores[i] > scores[i - 1]: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 1 return max_streak"},{"question":"======Function Descriptions===== square The tool square returns the element-wise square of the input array. import numpy my_array = numpy.array([1, 2, 3, 4]) print numpy.square(my_array) #[ 1 4 9 16] sqrt The tool sqrt returns the element-wise square root of the input array. import numpy my_array = numpy.array([1, 4, 9, 16]) print numpy.sqrt(my_array) #[ 1. 2. 3. 4.] power The power tool returns the element-wise result of array elements raised to some power. import numpy my_array = numpy.array([1, 2, 3, 4]) print numpy.power(my_array, 3) #[ 1 8 27 64] =====Problem Statement===== You are given a 1-D array, B. Your task is to print the square, square root, and cube (using power) of all the elements of B. =====Input Format===== A single line of input containing the space separated elements of array B. =====Output Format===== On the first line, print the square of B. On the second line, print the square root of B. On the third line, print the cube of B.","solution":"import numpy as np def process_array(B): Takes a list of numbers, converts it to a NumPy array and returns the square, square root, and cube of the elements np_array = np.array(B) squared = np.square(np_array) sqrted = np.sqrt(np_array) cubed = np.power(np_array, 3) return squared, sqrted, cubed # Example Usage: # result = process_array([1, 2, 3, 4]) # print(result[0]) # Square # print(result[1]) # Square Root # print(result[2]) # Cube"},{"question":"Given a positive integer n, count all possible distinct binary search trees (BST) that can be made using values from 1 to n. Example: Input: 3 Output: 5 Explanation: The 5 BSTs are: 1 3 3 2 1 / / / 3 2 1 1 3 2 / / 2 1 2 3 Note: 1 <= n <= 19 Complete the function `numTrees(n)` that accepts an integer n and returns the number of distinct BSTs that can be constructed using the integers 1 to n.","solution":"def numTrees(n): Returns the number of distinct binary search trees (BSTs) that can be constructed using values from 1 to n. G = [0] * (n + 1) G[0], G[1] = 1, 1 for i in range(2, n + 1): for j in range(1, i + 1): G[i] += G[j - 1] * G[i - j] return G[n]"},{"question":"Anu is preparing for a track event and needs to practice efficiently. She wants to plan her training schedule in a way that maximizes her running distance over a series of days. You are given a list of integers where each integer represents the distance Anu can run on a given day, but she can run on consecutive days only. You need to divide this list of distances into exactly M segments such that the sum of the maximum distances in each segment is maximized. Could you design a training plan for Anu that satisfies her requirement? -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case contains two integers D and M, representing the number of days and the number of segments respectively. - Next line contains D integers which are the distances Anu can run on each day. -----Output:----- For each test case, output in a single line the maximal sum of the maximum distances from each segment. -----Constraints----- - 1 leq T leq 100 - 1 leq D leq 200 - 1 leq M leq D - 1 leq distance[i] leq 1e4 -----Sample Input:----- 1 5 2 2 3 10 1 5 -----Sample Output:----- 15 -----EXPLANATION:----- [2 3] [10 1 5] is the optimal division. Max sum = max(2, 3) + max(10, 1, 5) = 3 + 10 = 13","solution":"def max_sum_of_max_distances(test_cases): This function takes a list of test_cases where each test case is a tuple (D, M, distances) D is the number of days, M is the number of segments, and distances is a list of distances Anu can run each day. The function returns a list of results where each result is the maximal sum of the maximum distances from each segment for the corresponding test case. results = [] for D, M, distances in test_cases: # DP table where dp[i][j] represents the maximum sum of max distances for the first i days with j segments dp = [[-float(\'inf\')] * (M + 1) for _ in range(D + 1)] dp[0][0] = 0 # base case: zero segments, zero days, sum is 0 for i in range(1, D + 1): for j in range(1, M + 1): max_in_segment = -float(\'inf\') for k in range(i, 0, -1): max_in_segment = max(max_in_segment, distances[k - 1]) if dp[k - 1][j - 1] != -float(\'inf\'): dp[i][j] = max(dp[i][j], dp[k - 1][j - 1] + max_in_segment) results.append(dp[D][M]) return results # Helper function for handling input and output def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): D = int(data[index]) M = int(data[index + 1]) distances = list(map(int, data[index + 2: index + 2 + D])) test_cases.append((D, M, distances)) index += 2 + D results = max_sum_of_max_distances(test_cases) for result in results: print(result)"},{"question":"# Task Given a list of integers, create a function that checks if it is possible to partition the list into three non-empty subsets such that the sum of the elements in each subset is the same. # Input/Output `[input]` integer list `arr` A list of integers. 3 ≤ arr.length ≤ 50 -10^4 ≤ arr[i] ≤ 10^4 `[output]` a boolean Return `True` if such a partition is possible, otherwise return `False`. # Example For `arr = [0, 2, 1, -1, -2, 3]`, the output should be `True` Explanation: We can partition the list into [0, 3], [2, 1, -1, -2], [0]. For `arr = [1, 2, 3, 6]`, the output should be `False` Explanation: It is impossible to partition the list into three subsets with equal sum.","solution":"def can_partition_into_three_equal_sum_subsets(arr): Checks if a list of integers can be partitioned into three non-empty subsets such that the sum of the elements in each subset is the same. total_sum = sum(arr) if total_sum % 3 != 0: return False target_sum = total_sum // 3 def can_partition_recursive(start, k, current_sum, visited): if k == 1: return True if current_sum == target_sum: return can_partition_recursive(0, k - 1, 0, visited) for i in range(start, len(arr)): if not visited[i]: visited[i] = True if can_partition_recursive(i + 1, k, current_sum + arr[i], visited): return True visited[i] = False return False visited = [False] * len(arr) return can_partition_recursive(0, 3, 0, visited)"},{"question":"Given an integer array `nums` and an integer `k`, rearrange the array to form the k largest distinct elements in descending order. If the number of unique elements in `nums` is less than `k`, include all distinct elements sorted in descending order followed by the next highest repeated elements to make the count equal to `k`. Return the resultant array. Example 1: Input: nums = [4, 4, 1, 2, 1, 3], k = 3 Output: [4, 3, 2] Explanation: The three largest distinct elements are 4, 3, and 2. Example 2: Input: nums = [5, 2, 2, 3, 1], k = 4 Output: [5, 3, 2, 1] Explanation: The four largest distinct elements are 5, 3, 2, and 1. Example 3: Input: nums = [1, 2, 2, 3, 4], k = 4 Output: [4, 3, 2, 1] Explanation: The four largest distinct elements are 4, 3, 2, and 1. Example 4: Input: nums = [1, 2], k = 5 Output: [2, 1, 2, 2, 1] Explanation: There are only two distinct elements (2 and 1). The rest of the elements are filled with repeated ones to make the total count equal to k. Constraints: 1 <= nums.length <= 10^5 1 <= nums[i] <= 10^9 1 <= k <= nums.length","solution":"def get_largest_k_elements(nums, k): Returns the k largest distinct elements in descending order. If the number of distinct elements is less than k, it includes repeated elements to make the length of the result equal to k. if k <= 0 or len(nums) == 0: return [] # Get unique elements and sort them in descending order unique_elements = list(set(nums)) unique_elements.sort(reverse=True) if len(unique_elements) >= k: return unique_elements[:k] else: # If less unique elements than k, include repeated ones result = unique_elements[:] i = 0 while len(result) < k: result.append(unique_elements[i % len(unique_elements)]) i += 1 return result"},{"question":"Given a list of integers, write a function `group_by_odd_even(numbers)` that groups the integers into odd and even numbers, and then sorts each group in descending order. The function should return a dictionary with two keys: `\'odd\'` and `\'even\'`, where the value for each key is the corresponding sorted list of integers. Example: ```python group_by_odd_even([6, 3, 2, 5, 7, 10, 14, 13, 9]) # should return # {\'odd\': [13, 9, 7, 5, 3], \'even\': [14, 10, 6, 2]} ``` Hints: - The parameter `numbers` is always a list of integers. - There can be any number of integers in the list, including zero. - You can use list comprehensions and the `sorted()` function to help with this task.","solution":"def group_by_odd_even(numbers): Groups a list of integers into odd and even numbers, and sorts each group in descending order. Parameters: numbers (list[int]): A list of integers. Returns: dict: A dictionary with keys \'odd\' and \'even\', each containing a list of integers sorted in descending order. odd_numbers = sorted([num for num in numbers if num % 2 != 0], reverse=True) even_numbers = sorted([num for num in numbers if num % 2 == 0], reverse=True) return {\'odd\': odd_numbers, \'even\': even_numbers}"},{"question":"You are working as a software engineer at an autonomous vehicle company. One aspect of the vehicle\'s navigation system involves interpreting obstacles on a grid map. The map is represented as a 2D list of integers, where \\"0\\" represents an empty cell and \\"1\\" represents an obstacle. The vehicle can move up, down, left, or right, but not diagonally. Your task is to write a function that determines whether there is a path for the vehicle to travel from the top-left corner of the grid (0,0) to the bottom-right corner (n-1,m-1). Your function should be called `can_travel(grid)` and it should return `True` if a path exists, and `False` otherwise. For example: ``` [[0, 0, 1, 0, 0], [0, 1, 0, 0, 1], [0, 0, 0, 1, 0], [1, 0, 1, 0, 0], [0, 0, 0, 0, 0]] ``` In the above 5x5 grid, there is a path from the top-left corner to the bottom-right corner, so the function should return `True`. Another example: ``` [[0, 1, 0], [0, 1, 0], [0, 0, 0]] ``` In this 3x3 grid, there is a path from the top-left corner to the bottom-right corner, so the function should return `True`. But in the following case: ``` [[0, 1, 0], [1, 0, 1], [0, 1, 0]] ``` There is no path from the top-left corner to the bottom-right corner, so the function should return `False`. The grid size will always be at least 2x2 and there will be no other values in the grid apart from 0 and 1.","solution":"def can_travel(grid): Check if there is a path from top-left to bottom-right in the grid. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return False rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def within_bounds(x, y): return 0 <= x < rows and 0 <= y < cols def dfs(x, y, visited): if (x, y) == (rows - 1, cols - 1): return True visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if within_bounds(nx, ny) and grid[nx][ny] == 0 and (nx, ny) not in visited: if dfs(nx, ny, visited): return True return False return dfs(0, 0, set())"},{"question":"You are given a string consisting of lowercase English letters and you are required to determine the length of the longest substring in which all characters are the same. Write a function that takes a string as input and returns the length of the longest contiguous substring consisting of the same character. -----Input:----- - A single line of input containing a string s (1 leq |s| leq 10^5). -----Output:----- - A single integer indicating the length of the longest contiguous substring with all characters the same. -----Constraints----- - The input string will only contain lowercase English letters. -----Sample Input:----- aaabbbcccccdd -----Sample Output:----- 5 -----EXPLANATION:----- The longest substring with all characters the same is \\"ccccc\\", which has a length of 5.","solution":"def longest_contiguous_substring(s): Returns the length of the longest contiguous substring consisting of the same character. if not s: return 0 max_len = 1 current_len = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 # Check one last time in case the longest substring is at the end max_len = max(max_len, current_len) return max_len"},{"question":"Write a function `gear_system_steps` that simulates a sequence of movements in a robotic gear system. The robot starts at an initial point with a given angle and speed. In each step, the robot moves forward based on its current speed and computes the new position. The robot\'s speed and angle of movement are continually adjusted by specific factors. Your task is to determine the position of the robot after `n` steps. Parameters: - `n` (integer): The number of steps the robot takes. - `speed` (float): The initial speed of the robot. - `angle` (float): The initial angle (in degrees) at which the robot is moving. - `speed_factor` (float): The factor by which the robot\'s speed increases after each step. - `angle_factor` (float): The factor by which the robot\'s angle changes after each step. The function should return the final coordinates `(x, y)` of the robot after `n` steps. Use the following formulae for the movements: - `x_new = x_current + speed * cos(angle)` - `y_new = y_current + speed * sin(angle)` Remember to convert the angle from degrees to radians when using trigonometric functions. # Example: `gear_system_steps(3, 1.0, 45, 1.1, 1.5)` This sequence of steps would result in: - Step 1: `speed = 1.0`, `angle = 45 degrees` - Step 2: `speed = 1.1`, `angle = 67.5 degrees` - Step 3: `speed = 1.21`, `angle = 101.25 degrees` Evaluating the positions after each step will result in the final coordinates `(x, y)`. # Note You can use the `math` module in Python for trigonometric functions and angle conversions. ```python import math def gear_system_steps(n, speed, angle, speed_factor, angle_factor): x, y = 0, 0 angle = math.radians(angle) for _ in range(n): x += speed * math.cos(angle) y += speed * math.sin(angle) speed *= speed_factor angle *= angle_factor return x, y ``` Test the function with sample inputs to ensure it provides the correct output.","solution":"import math def gear_system_steps(n, speed, angle, speed_factor, angle_factor): x, y = 0.0, 0.0 angle = math.radians(angle) for _ in range(n): x += speed * math.cos(angle) y += speed * math.sin(angle) speed *= speed_factor angle = math.radians(math.degrees(angle)*angle_factor) return x, y"},{"question":"Given a set of distinct integers, nums, return all possible subsets (the power set). Example: Input: nums = [1,2,3] Output: [ [], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3] ] Explanation: The output contains all possible subsets of the input list. Note that each subset must be sorted in ascending order, and there must not be any duplicate subsets in the output.","solution":"def subsets(nums): Returns all possible subsets (the power set) of the given list of distinct integers. subsets_list = [[]] for num in nums: subsets_list += [curr + [num] for curr in subsets_list] return subsets_list"},{"question":"Create a function that takes a string representing a mathematical expression and evaluates it. The expression will only include non-negative integers, addition, and multiplication. Your task is to ensure the proper order of operations is followed (i.e., multiplication before addition). Return the result as an integer. If the expression is incorrectly formatted or contains invalid characters, return \\"Invalid expression!\\". Examples: ```python evaluate_expression(\\"2+3*4\\") will return 14 evaluate_expression(\\"3*4+5\\") will return 17 evaluate_expression(\\"10+20*30+40\\") will return 650 evaluate_expression(\\"8*3+12*3\\") will return 60 evaluate_expression(\\"5++2\\") will return \\"Invalid expression!\\" evaluate_expression(\\"5*2*2\\") will return 20 evaluate_expression(\\"\\") will return \\"Invalid expression!\\" evaluate_expression(\\"7+7*\\") will return \\"Invalid expression!\\" ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers, addition, and multiplication, following the proper order of operations. Returns the result as an integer or \\"Invalid expression!\\" if the expression is incorrectly formatted or contains invalid characters. try: # Check for any invalid characters if not all(c.isdigit() or c in \'+*\' for c in expression): return \\"Invalid expression!\\" # Check for consecutive operators or expression starting/ending with operator if expression.endswith(\'+\') or expression.endswith(\'*\') or \'+*\' in expression or \'*+\' in expression: return \\"Invalid expression!\\" # Split the expression by \'+\' and evaluate each part separately to handle multiplication first parts = expression.split(\'+\') evaluated_parts = [] for part in parts: if \'*\' in part: # if there is multiplication subparts = list(map(int, part.split(\'*\'))) result = 1 for subpart in subparts: result *= subpart evaluated_parts.append(result) else: # no multiplication, just a number evaluated_parts.append(int(part)) # Calculate the final result by summing evaluated parts final_result = sum(evaluated_parts) return final_result except Exception: return \\"Invalid expression!\\""},{"question":"Rotating a Matrix Given an `n x n` matrix, write a function to rotate the matrix by 90 degrees (clockwise). You have to modify the matrix **in-place**, which means you have to directly change the input matrix without using an extra matrix. ``` matrix = [[1,2,3], [4,5,6], [7,8,9]] rotate(matrix) # The function should modify the input matrix to: # [[7,4,1], # [8,5,2], # [9,6,3]] ``` Example 2: ``` matrix = [[ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16]] rotate(matrix) # The function should modify the input matrix to: # [[15,13, 2, 5], # [14, 3, 4, 1], # [12, 6, 8, 9], # [16, 7,10,11]] ```","solution":"def rotate(matrix): Rotates the n x n matrix by 90 degrees clockwise in-place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are given a sequence of n integers, and your task is to find the length of the longest contiguous subarray that has an equal number of even and odd integers. -----Input----- The first line contains a single integer T (1 le T le 100) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 1000) — the length of the sequence. The second line of each test case contains n integers a_1, a_2, ..., a_n (0 le a_i le 10^9) — the elements of the sequence. -----Output----- For each test case, print a single integer representing the length of the longest contiguous subarray that has an equal number of even and odd integers. -----Example----- Input 2 6 1 2 3 4 5 6 4 1 2 2 1 Output 4 4","solution":"def longest_even_odd_subarray(n, array): # Create a dictionary to store the first occurrence of a given parity difference. first_occurrence = {} first_occurrence[0] = -1 # Initialize for the edge case max_length = 0 even_count = 0 odd_count = 0 for i in range(n): if array[i] % 2 == 0: even_count += 1 else: odd_count += 1 parity_diff = even_count - odd_count if parity_diff in first_occurrence: max_length = max(max_length, i - first_occurrence[parity_diff]) else: first_occurrence[parity_diff] = i return max_length def process_test_cases(T, test_cases): results = [] for i in range(T): n, array = test_cases[i] results.append(longest_even_odd_subarray(n, array)) return results"},{"question":"Create a function named `isPalindrome` which takes a string as input and returns `True` if the string is a palindrome, and `False` otherwise. A palindrome is a word that reads the same backward as forward, ignoring case and non-alphanumeric characters. For example: ```python isPalindrome(\\"A man, a plan, a canal: Panama\\") # Returns True isPalindrome(\\"race a car\\") # Returns False ``` Let\'s assume that input will always be a string.","solution":"def isPalindrome(s): Returns True if the input string s is a palindrome, ignoring case and non-alphanumeric characters. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if cleaned_s reads the same forward and backward return cleaned_s == cleaned_s[::-1]"},{"question":"A city is represented by a grid of size N times M where each cell can either be empty (represented by 0) or contain a building (represented by 1). The mayor of the city plans to build a new park that can cover an entire rectangular sub-grid within the city grid. The park cannot contain any buildings within its boundaries. You are to find the largest possible area of such a park in the given city grid. -----Input:----- - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases is as follows. - For each test case: - The first line contains two integers N and M, denoting the dimensions of the grid. - The next N lines each contain M integers (either 0 or 1), representing the grid cells. -----Output:----- - For each test case, output the size of the largest rectangular sub-grid that contains only 0s. -----Constraints:----- - 1 leq T leq 50 - 1 leq N, M leq 100 - Each cell in the grid is either 0 or 1. -----Sample Input:----- 1 4 5 1 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 -----Sample Output:----- 6 -----Explanation:----- In the given grid, the largest rectangular sub-grid without any buildings is formed by the cells (2,2), (2,3), (2,4), (3,2), (3,3), (3,4), and it has an area of 6.","solution":"def maximalRectangle(grid): if not grid: return 0 n, m = len(grid), len(grid[0]) height = [0] * m max_area = 0 for i in range(n): for j in range(m): height[j] = height[j] + 1 if grid[i][j] == 0 else 0 max_area = max(max_area, largestRectangleArea(height)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) heights.pop() return max_area def findLargestParkArea(t, test_cases): results = [] for case in test_cases: n, m, grid = case results.append(maximalRectangle(grid)) return results"},{"question":"Matthew is learning about integer properties. He encountered the following problem during his study: You are given an integer `n`. You need to determine if the number of unique prime factors of `n` is greater than or equal to a given integer `k`. A prime factor of a number is a prime number that divides the number exactly without leaving a remainder. For example, the prime factors of 12 are 2 and 3. Write a function `prime_factors_count(n: int, k: int) -> str` that takes two integers `n` and `k` and returns \\"Yes\\" if the number of unique prime factors of `n` is greater than or equal to `k`, otherwise returns \\"No\\". -----Input----- The input consists of multiple test cases. The first line contains an integer `T` (1 ≤ T ≤ 1000) - the number of test cases. The following `T` lines each contain two space-separated integers, `n` (2 ≤ n ≤ 10^6) and `k` (1 ≤ k ≤ 10). -----Output----- For each test case, output \\"Yes\\" if the number of unique prime factors of `n` is greater than or equal to `k`, otherwise output \\"No\\". -----Example----- Input 5 30 3 12 2 17 1 1000000 4 13 2 Output Yes Yes Yes No No -----Note----- - In the first example, 30 has three unique prime factors: 2, 3, and 5. - In the second example, 12 has two unique prime factors: 2 and 3. - In the third example, 17 has one unique prime factor: 17. - In the fourth example, 1000000 has three unique prime factors: 2, 5. - In the fifth example, 13 has one unique prime factor: 13.","solution":"def prime_factors_count(n, k): Returns \\"Yes\\" if the number of unique prime factors of n is greater than or equal to k, otherwise \\"No\\". def prime_factors(number): Returns a set of unique prime factors of the given number. factors = set() # Check for number of twos in the factorization while number % 2 == 0: factors.add(2) number //= 2 # Check for odd factors for i in range(3, int(number**0.5) + 1, 2): while number % i == 0: factors.add(i) number //= i # If number is prime and greater than 2 if number > 2: factors.add(number) return factors # Calculate the number of unique prime factors unique_prime_factors = prime_factors(n) # Compare the number of unique prime factors with k if len(unique_prime_factors) >= k: return \\"Yes\\" else: return \\"No\\" def process_test_cases(test_cases): Process multiple test cases. results = [] for n, k in test_cases: results.append(prime_factors_count(n, k)) return results"},{"question":"You have been given a string consisting of words and punctuation marks. Your task is to extract all the words into separate elements of an array. A word is defined as a sequence of alphabetical characters (a-z, A-Z) or numeric digits (0-9). Write a function `getWords` that takes a single string argument and returns an array of words. Ignore punctuation and whitespace characters, except when they separate words. Here are the rules: - Words are separated by one or more punctuation marks or whitespace characters. - All words should be returned in the same order they appear in the input string. Examples: - `getWords(\\"Hello, world! This is a test.\\")` should return `[\\"Hello\\", \\"world\\", \\"This\\", \\"is\\", \\"a\\", \\"test\\"]`. - `getWords(\\"Programming in 2023: Are you ready?\\")` should return `[\\"Programming\\", \\"in\\", \\"2023\\", \\"Are\\", \\"you\\", \\"ready\\"]`. - `getWords(\\"Good morning, Dr. Smith!\\")` should return `[\\"Good\\", \\"morning\\", \\"Dr\\", \\"Smith\\"]`.","solution":"import re def getWords(text): Extracts all words from a string. Args: text (str): The input string. Returns: list: A list of words. return re.findall(r\'bw+b\', text)"},{"question":"Alice is a game designer and she is working on a new game where players encounter various creatures while traveling through a series of caves. Each cave has a certain number of creatures, and some caves are connected by tunnels. The creatures in each cave have certain strengths, and players often query the total strength of creatures in a cave or update the strength of creatures in certain caves. Alice needs a program to efficiently handle these operations. The program should support the following two types of operations: 1. Query the total strength of creatures in a specific cave. 2. Update the strength of creatures in a range of caves (inclusive). -----Input----- - The first line contains two integers N and Q, denoting the number of caves and the number of operations, respectively. - The second line contains N space-separated integers S1, S2, ..., SN, where Si denotes the strength of creatures in the i-th cave. - Each of the next Q lines describes an operation. If the first integer is “1”, it means that the operation is of Type 1, followed by one integer i. Otherwise, the first integer will be “2”, meaning that the operation is of Type 2, followed by three integers L, R, and X. -----Output----- For each operation of Type 1, output the total strength of creatures in the i-th cave. -----Constraints----- - 1 ≤ N, Q ≤ 100,000 - 1 ≤ Si ≤ 1,000,000 - 1 ≤ L ≤ R ≤ N - -1,000,000 ≤ X ≤ 1,000,000 - 1 ≤ i ≤ N -----Example----- Input: 5 3 10 20 30 40 50 1 3 2 2 4 5 1 3 Output: 30 35 -----Explanation----- The initial strengths are (10, 20, 30, 40, 50). The first operation is of Type 1 and asks for the strength of creatures in cave 3, which is 30. The second operation increases the strengths in caves 2 to 4 by 5, so the new strengths become (10, 25, 35, 45, 50). The last operation again asks for the strength of creatures in cave 3, which is now 35.","solution":"def game_operations(n, q, strengths, operations): results = [] for operation in operations: if operation[0] == 1: # Type 1 operation: query the total strength of creatures in the i-th cave i = operation[1] results.append(strengths[i - 1]) elif operation[0] == 2: # Type 2 operation: update the strength of creatures in a range of caves l, r, x = operation[1], operation[2], operation[3] for j in range(l - 1, r): strengths[j] += x return results"},{"question":"Write a function `countArmstrongNumbers(n)` that takes an integer n as input and returns the count of all Armstrong numbers with \'n\' digits. Armstrong numbers (also known as narcissistic numbers) are numbers that are equal to the sum of their own digits each raised to the power of the number of digits. For example, 153 is an Armstrong number because: `1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153` Your task is to count how many such numbers exist with exactly \'n\' digits. For example: ``` countArmstrongNumbers(1) should return 9 (as there are 9 single-digit Armstrong numbers: 1, 2, 3, 4, 5, 6, 7, 8, 9) countArmstrongNumbers(2) should return 0 (as there are no 2-digit Armstrong numbers) countArmstrongNumbers(3) should return 4 (the 3-digit Armstrong numbers are: 153, 370, 371, 407) ``` Constraints: - The function should handle values of `n` from 1 to 15 efficiently.","solution":"def countArmstrongNumbers(n): Returns the count of Armstrong numbers with exactly n digits. def is_armstrong(num, n): Checks if a given number is an Armstrong number. return num == sum(int(digit) ** n for digit in str(num)) start = 10**(n-1) end = 10**n - 1 count = 0 for num in range(start, end + 1): if is_armstrong(num, n): count += 1 return count"},{"question":"In the field of robotics, simple AI algorithms often involve identifying symmetry in visual data. One common scenario involves recognizing symmetrical shapes within a grid. Given a 2D grid of numbers, your task is to identify whether the grid is symmetric about its center. A grid is symmetric about its center if the top-left quadrant is identical to the bottom-right quadrant, the top-right quadrant is identical to the bottom-left quadrant, and the middle rows and columns (if any) match when folded over the center. Your task is to write a function `is_symmetric(grid)` that takes a 2D list of integers representing the grid and returns `True` if the grid is symmetric, and `False` otherwise. Constraints - `grid` is a non-empty square grid (i.e., the number of rows equals the number of columns, n x n). - 1 ≤ n ≤ 100. - Each element in the grid is an integer in the range -1000 to 1000. Examples For the grid: ``` [ [2, 1, 1, 2], [1, 3, 3, 1], [1, 3, 3, 1], [2, 1, 1, 2] ] ``` The function should return `True` since this grid is symmetric about its center. For the grid: ``` [ [1, 2, 3], [4, 5, 4], [3, 2, 1] ] ``` The function should return `False` since this grid is not symmetric about its center.","solution":"def is_symmetric(grid): Determines if a square grid is symmetric about its center. Parameters: grid (list of list of int): 2D list of integers representing the grid. Returns: bool: True if the grid is symmetric, False otherwise. n = len(grid) for i in range(n): for j in range(n//2): if grid[i][j] != grid[i][n-j-1]: return False for i in range(n//2): if grid[i] != grid[n-i-1]: return False return True"},{"question":"Given an array of integers, write a function to determine the maximum sum of a subarray with the constraint that no two elements in the subarray are adjacent in the original array. Your function should optimize for both time and space efficiency. ``` @param {Array} arr of integers (1 ≤ n ≤ 10^5, -10^4 ≤ arr[i] ≤ 10^4) @return {Integer} the maximum sum possible by summing a subarray with no two elements adjacent in the original array ``` Examples: ``` [3, 2, 5, 10, 7] => 15 (3 + 5 + 7) [3, 2, 7, 10] => 13 (3 + 10) ``` Note: In the first example: The optimal subarray would be [3, 5, 7] since the sum is 15, and no two numbers in this set are adjacent in the original array. In the second example: The optimal subarray would be [3, 10], giving a sum of 13. Selecting 7 would not give the maximum sum since 3 + 10 > 7 + 2.","solution":"def max_non_adjacent_sum(arr): if not arr: return 0 n = len(arr) if n == 1: return max(0, arr[0]) prev_prev = max(0, arr[0]) prev = max(prev_prev, arr[1]) for i in range(2, n): current = max(prev, prev_prev + arr[i]) prev_prev = prev prev = current return prev"},{"question":"Write a function that takes a list of integers and returns the sum of the two largest integers in the list. Assume that the input list will always contain at least two integers. Examples: ```python sum_two_largest([10, 3, 5, 6]) > 16 # sum of the two largest integers 10 and 6 sum_two_largest([1, 2, 3, 4]) > 7 # sum of the two largest integers 3 and 4 ```","solution":"def sum_two_largest(numbers): Returns the sum of the two largest integers in the list. if len(numbers) < 2: raise ValueError(\\"The input list must contain at least two integers.\\") sorted_numbers = sorted(numbers, reverse=True) return sorted_numbers[0] + sorted_numbers[1]"},{"question":"A software company needs a program that creates a summary of their employees\' working hours. Every employee works within a week, and the data recorded consists of the number of hours worked each day. You are required to write a function that takes an integer list of length 7 representing the hours worked by an employee on each day of the week (starting from Monday). The function should return a summary describing the total hours worked, average hours per day, and the day with maximum hours worked. -----Input----- A list containing exactly 7 integers where each integer represents hours worked on each day of a week. -----Output----- A dictionary with the following keys and values: - \'total_hours\': total number of hours worked in the week. - \'average_hours\': average number of hours worked per day. - \'max_hours_day\': the day of the week (e.g., \\"Monday\\", \\"Tuesday\\", etc.) the maximum number of hours were worked. -----Example----- Input: [8, 6, 7, 5, 8, 6, 7] Output: { \'total_hours\': 47, \'average_hours\': 6.71, \'max_hours_day\': \'Monday\' }","solution":"def summarize_work_hours(hours): Summarizes the hours worked in a week. Args: hours (list of int): List of 7 integers representing the hours worked each day of the week. Returns: dict: Dictionary containing total hours, average hours per day, and the day with maximum hours worked. if len(hours) != 7: raise ValueError(\\"Input list must have exactly 7 elements.\\") days_of_week = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] total_hours = sum(hours) average_hours = round(total_hours / 7, 2) max_hours_index = hours.index(max(hours)) return { \'total_hours\': total_hours, \'average_hours\': average_hours, \'max_hours_day\': days_of_week[max_hours_index] }"},{"question":"Anna is given an integer array of length N and a positive integer K. She can perform the following operation exactly K times: - Choose any two elements from the array and swap them. Write a program to determine the lexicographically smallest array she can obtain after performing exactly K swaps. The array A=[a_1, a_2, ..., a_N] is lexicographically smaller than the array B=[b_1, b_2, ..., b_N] if and only if one of the following holds: - There exists an index i(1≦i≦N) such that a_j = b_j for all indices j(1≦j<i) and a_i < b_i. - a_j = b_j for all integers j(1≦j≦N), and A has fewer elements than B (not applicable here since both arrays are of the same length). -----Constraints----- - 1 ≦ N ≦ 100 - 1 ≦ K ≦ 100 - 1 ≦ A_i ≦ 10^9 for each valid index i -----Input----- The input is given from Standard Input in the following format: N K a_1 a_2 ... a_N -----Output----- Print the lexicographically smallest array Anna can obtain after exactly K swaps. -----Sample Input----- 4 2 3 4 2 5 -----Sample Output----- 2 3 4 5","solution":"def lexicographically_smallest_array(N, K, arr): Determine the lexicographically smallest array after exactly K swaps. arr = list(arr) for i in range(N): min_index = i for j in range(i+1, N): if j-i > K: break if arr[j] < arr[min_index]: min_index = j for j in range(min_index, i, -1): arr[j], arr[j-1] = arr[j-1], arr[j] K -= 1 if K == 0: return arr return arr"},{"question":"- Input: String `s` - Output: Boolean Write a function `is_valid_license_plate(s)` that determines if the input string `s` is a valid license plate number. A valid license plate must follow these rules: 1. It must be exactly 7 characters long. 2. The first 3 characters must be uppercase English letters (A-Z). 3. The last 4 characters must be digits (0-9). Return `True` if the string is a valid license plate, otherwise return `False`. Examples: ```python print(is_valid_license_plate(\\"ABC1234\\")) # True print(is_valid_license_plate(\\"abcd123\\")) # False print(is_valid_license_plate(\\"ABCD123\\")) # False print(is_valid_license_plate(\\"ABC12A4\\")) # False print(is_valid_license_plate(\\"A1B2C34\\")) # False ```","solution":"def is_valid_license_plate(s): Determines if the input string `s` is a valid license plate number. A valid license plate must: 1. Be exactly 7 characters long. 2. The first 3 characters must be uppercase English letters (A-Z). 3. The last 4 characters must be digits (0-9). :param s: str - input string :return: bool - True if valid license plate, False otherwise if len(s) != 7: return False if not s[:3].isupper(): return False if not s[:3].isalpha(): return False if not s[3:].isdigit(): return False return True"},{"question":"Write a function `findLongestPalindromicSubstring(s: str) -> str` to find the longest palindromic substring in a given string `s`. A palindromic substring is a substring which reads the same backward as forward. Your implementation should be efficient enough to handle strings of length up to 2000 characters. Example ``` Input: \\"babad\\" Output: \\"bab\\" or \\"aba\\" Input: \\"cbbd\\" Output: \\"bb\\" ``` Constraints: - 1 <= s.length <= 2000 - s consists of only lowercase English letters","solution":"def findLongestPalindromicSubstring(s: str) -> str: if len(s) == 0: return \\"\\" def expandAroundCenter(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Odd length palindromes (center at i) palindrome1 = expandAroundCenter(s, i, i) # Even length palindromes (center between i and i+1) palindrome2 = expandAroundCenter(s, i, i + 1) # Update the longest palindrome found longest = max(longest, palindrome1, palindrome2, key=len) return longest"},{"question":"Complete the function that takes a list of integers as input and returns the sum of the numbers that are prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Examples ``` [10, 11, 12, 13, 14, 15] ==> 24 (11 + 13) [2, 3, 4, 5, 6, 7, 8, 9] ==> 17 (2 + 3 + 5 + 7) [21, 22, 23, 24, 25, 26] ==> 23 (23) ```","solution":"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_of_primes(numbers): return sum(n for n in numbers if is_prime(n))"},{"question":"A railway authority wants to develop a program to help their ticket booking system. Each time a user books a ticket, the system needs to generate a unique booking reference based on the user\'s ID and the number of tickets booked. The reference should start with the user\'s ID followed by a series of numbers indicating each ticket number. Write a program to help the railway authority generate these booking references. -----Input:----- - The first line will contain N, the number of user transactions. Then the transactions follow. - Each transaction consists of two integers: the user\'s ID (an integer) and the number of tickets booked (an integer). -----Output:----- For each transaction, output the booking reference generated. -----Constraints----- - 1 leq N leq 100 - 1 leq text{User\'s ID} leq 1000 - 1 leq text{Number of tickets booked} leq 10 -----Sample Input:----- 3 101 3 202 2 303 1 -----Sample Output:----- 101-01-02-03 202-01-02 303-01","solution":"def generate_booking_references(transactions): references = [] for user_id, tickets in transactions: reference = f\\"{user_id}\\" for i in range(1, tickets + 1): reference += f\\"-{i:02d}\\" references.append(reference) return references"},{"question":"# Friend Circles Task You have been given a 2D array `M` representing a friendship matrix. In the matrix `M`, the value of `M[i][j]` is `1` if `i-th` student and `j-th` student are friends, otherwise `0`. The matrix is symmetrical, meaning if `M[i][j]` is `1`, then `M[j][i]` is also `1`, and each student is friends with themselves, meaning `M[i][i]` is always `1`. A friend circle is defined as a group of students who are direct or indirect friends. Your task is to determine the number of friend circles in the matrix. Input - A 2D list of integers `M` which represents the friendship matrix. The matrix is of size `n x n` where `n` is the number of students (1 ≤ n ≤ 200). Output - An integer representing the number of friend circles in the matrix. Example ``` M = [ [1, 1, 0], [1, 1, 0], [0, 0, 1] ] ``` - Output: `2` Explanation - The first circle is formed by the first two students. - The second circle is formed by the third student alone.","solution":"def find_circle_num(M): Returns the number of friend circles in the given friendship matrix M. def dfs(student): for friend in range(n): if M[student][friend] == 1 and not visited[friend]: visited[friend] = True dfs(friend) n = len(M) visited = [False] * n circles = 0 for student in range(n): if not visited[student]: visited[student] = True dfs(student) circles += 1 return circles"},{"question":"Write a function that takes two integers as arguments and returns a string. The two integers represent the dimensions of a grid (rows and columns). Your function should visualize the grid following these rules: - Each cell in the grid should be represented by the character \\"X\\". - Each row should be separated by a newline character `n`. - Each column’s \\"X\\" should be separated by a single space. Your function should return the entire grid as a single string. For example, if the input integers are 3 and 4, the output should be: ``` X X X X X X X X X X X X ``` If the input integers are 2 and 2, the output should be: ``` X X X X ``` Ensure your function handles edge cases such as 0 rows or 0 columns, and returns an empty string in such cases.","solution":"def create_grid(rows, cols): Generates a grid of specified rows and columns where each cell is represented by \\"X\\". Each row is separated by a newline character and each column by a space. Parameters: rows (int): Number of rows in the grid. cols (int): Number of columns in the grid. Returns: str: The entire grid as a string. if rows <= 0 or cols <= 0: return \\"\\" # Generate a single row with columns single_row = \\"X \\" * cols single_row = single_row.rstrip() # Remove the trailing space # Combine rows separated by newline characters grid = \\"n\\".join([single_row] * rows) return grid"},{"question":"Write a function that simulates a simple version of the Snake game. ** INPUT ** - The function receives a list of commands that dictate the movement of the snake. Each command can be one of the following: \\"U\\" (up), \\"D\\" (down), \\"L\\" (left), \\"R\\" (right). - The snake starts at position (0, 0) on a board that is theoretically infinite in all directions. - The snake\'s movement can be described as moving from one cell to an adjacent cell either horizontally or vertically. ** OUTPUT ** - The function should return the final coordinates of the snake\'s head after executing all the commands. - The final position should be represented as a tuple (x, y). ** ASSUMPTIONS ** - Each command moves the head of the snake exactly one unit. - There will be no situations where the snake crosses itself or the board boundaries, since the board is infinite. ** EXAMPLES ** 1. ``` Commands = [\\"U\\", \\"U\\", \\"L\\", \\"D\\", \\"L\\"] Result: (-2, 1) ``` 2. ``` Commands = [\\"R\\", \\"R\\", \\"U\\", \\"L\\", \\"D\\", \\"D\\"] Result: (1, -1) ``` ** EXPLANATION ** - In the first example, the snake moves: - Up twice to (0, 1) and (0, 2) - Left once to (-1, 2) - Down once to (-1, 1) - Left once to (-2, 1) - In the second example, the snake moves: - Right twice to (1, 0) and (2, 0) - Up once to (2, 1) - Left once to (1, 1) - Down twice to (1, 0) and (1, -1)","solution":"def snake_game(commands): Simulates a simple version of the Snake game and returns the final coordinates of the snake\'s head. Parameters: - commands (list of str): List of commands dictating the snake\'s movement. Returns: - tuple (int, int): Final coordinates of the snake\'s head. x, y = 0, 0 # Starting position at (0, 0) for command in commands: if command == \\"U\\": y += 1 elif command == \\"D\\": y -= 1 elif command == \\"L\\": x -= 1 elif command == \\"R\\": x += 1 return (x, y)"},{"question":"Given an array of unsorted integers, you need to find the length of the longest sequence of consecutive elements. The sequence should not necessarily be sorted. Note: Your algorithm\'s time complexity should be O(n). Example 1: Input: nums = [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Example 2: Input: nums = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1] Output: 9 Explanation: The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Therefore, its length is 9.","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence in the array nums. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Given an array of `k` linked lists, each linked list is sorted in ascending order, merge all the linked lists into one sorted linked list and return it. Example 1: Input: lists = [[1,4,5],[1,3,4],[2,6]] Output: [1,1,2,3,4,4,5,6] Explanation: The linked lists are: [ 1->4->5, 1->3->4, 2->6 ] Merging them into one sorted linked list: 1->1->2->3->4->4->5->6 Example 2: Input: lists = [] Output: [] Example 3: Input: lists = [[]] Output: [] Constraints: - k == lists.length - 0 <= k <= 10000 - 0 <= lists[i].length <= 500 - -10^4 <= lists[i][j] <= 10^4 - lists[i] is sorted in ascending order. - The sum of lists[i].length won\'t exceed 5 * 10^4","solution":"import heapq class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeKLists(lists): Merge k sorted linked lists and return it as one sorted list. :type lists: List[ListNode] :rtype: ListNode min_heap = [] # Initialize the heap with the head of each list for i, list_node in enumerate(lists): if list_node: heapq.heappush(min_heap, (list_node.val, i, list_node)) # Dummy node to help with result list construction dummy = ListNode() current = dummy while min_heap: val, i, node = heapq.heappop(min_heap) current.next = ListNode(val) current = current.next if node.next: heapq.heappush(min_heap, (node.next.val, i, node.next)) return dummy.next # Utility function to convert list to ListNode linked lists def list_to_nodes(lists): all_nodes = [] for lst in lists: if lst: dummy = ListNode() current = dummy for val in lst: current.next = ListNode(val) current = current.next all_nodes.append(dummy.next) else: all_nodes.append(None) return all_nodes # Utility function to convert ListNode linked lists to list def nodes_to_list(node): lst = [] while node: lst.append(node.val) node = node.next return lst"},{"question":"Given an integer N and an array A of length N which consists of non-negative integers, find the length of the longest subsequence that contains only even numbers. A subsequence can be derived by deleting some or no elements without changing the order of the remaining elements. ----Input---- - The first line contains the integer N. - The second line contains N integers representing the array A. ----Output---- Output a single integer denoting the length of the longest subsequence that consists only of even numbers. ----Constraints---- - 1 ≤ N ≤ 105 - 0 ≤ A[i] ≤ 109 ----Example---- Input: 7 1 2 4 3 6 8 5 Output: 4 Explanation: - The longest subsequence containing only even numbers is [2, 4, 6, 8], which has a length of 4. Input: 10 1 3 5 7 9 11 13 15 17 2 Output: 1 Explanation: - The longest subsequence containing only even numbers is [2], which has a length of 1. ----Note---- A straightforward solution would be to iterate through the array, count the even numbers and return that count. The logic involves checking each element whether it is even or not and maintaining a count of these even elements.","solution":"def longest_even_subsequence_length(N, A): Given an integer N and an array A of length N, return the length of the longest subsequence that contains only even numbers. even_count = 0 for num in A: if num % 2 == 0: even_count += 1 return even_count"},{"question":"Given a string `s` consisting of parentheses, determine if the string is valid. A string is considered valid if all parentheses are closed and properly nested. A valid string should satisfy the following conditions: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. The string will contain only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Example 1: Input: s = \\"()\\" Output: true Example 2: Input: s = \\"()[]{}\\" Output: true Example 3: Input: s = \\"(]\\" Output: false Example 4: Input: s = \\"([)]\\" Output: false Example 5: Input: s = \\"{[]}\\" Output: true","solution":"def is_valid_parentheses(s): Determines if the string of parentheses is valid. Args: s (str): A string consisting of parentheses characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: bool: True if the string is valid, False otherwise. # Stack to keep track of opening parentheses. stack = [] # Dictionary to hold matching pairs of parentheses. matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_parentheses.values(): # If the character is an opening bracket, push it onto the stack. stack.append(char) elif char in matching_parentheses.keys(): # If the character is a closing bracket, check if it matches the top of the stack. if stack == [] or matching_parentheses[char] != stack.pop(): return False # The stack should be empty if all opening brackets have been properly closed. return stack == []"},{"question":"Task You are given a string of lowercase English letters. You need to count the minimal number of characters that need to be replaced to make the string a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Example For `s = \\"abca\\"`, the output should be `1`. Input/Output - `[input]` string `s` Constraints: `1 ≤ s.length ≤ 1000` `s` contains only lowercase English letters. - `[output]` an integer The minimal number of characters that need to be replaced to make the string a palindrome. It\'s guaranteed that for the given test cases the answer always fits signed 32-bit integer type.","solution":"def min_replacements_to_palindrome(s): Returns the minimal number of characters that need to be replaced to make the string a palindrome. n = len(s) count = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: count += 1 return count"},{"question":"Calculate the total number of products! Intermediate Logic and Data Manipulation You are given an array of objects, where each object represents a product with a `name`, `quantity`, and `price`. Write a function that takes this array as input, and returns the total number of products (i.e., the sum of all `quantity` values). For example, given the following array: ```python products = [ {\'name\': \'apple\', \'quantity\': 10, \'price\': 1.5}, {\'name\': \'banana\', \'quantity\': 5, \'price\': 1.0}, {\'name\': \'orange\', \'quantity\': 8, \'price\': 1.2} ] ``` Your function should return `23`. Function Signature: ```python def total_quantity(products: List[Dict[str, Union[str, int, float]]]) -> int: pass ``` **Constraints:** - All product names are strings and will be unique. - Quantities will be integers ranging from 0 to 1000. - Prices will be floating-point numbers ranging from 0.01 to 1000.0. **Examples:** ```python # Example 1 products = [ {\'name\': \'apple\', \'quantity\': 10, \'price\': 1.5}, {\'name\': \'banana\', \'quantity\': 5, \'price\': 1.0}, {\'name\': \'orange\', \'quantity\': 8, \'price\': 1.2} ] print(total_quantity(products)) # Output: 23 # Example 2 products = [ {\'name\': \'laptop\', \'quantity\': 2, \'price\': 900.0}, {\'name\': \'mouse\', \'quantity\': 25, \'price\': 20.0} ] print(total_quantity(products)) # Output: 27 ``` Write your implementation below:","solution":"def total_quantity(products): Returns the sum of all \'quantity\' values in the list of dictionaries representing products. return sum(product[\'quantity\'] for product in products)"},{"question":"You are organizing a scavenger hunt for a group of friends. To add a twist, you have designed an online system where clues are given out in the form of encrypted strings. The clues have been encrypted such that each letter in the string is replaced by the next letter in the English alphabet (with \'z\' being replaced by \'a\'). Numbers and other characters should remain unaffected. Write a function to decipher the clues and return the original message. Additionally, if the input is not a string, the function should return \\"Invalid input\\". Function signature: `def decipher_clue(clue: Any) -> str:`","solution":"def decipher_clue(clue): Deciphers the given encrypted clue by shifting each letter one position back in the alphabet. Non-alphabetic characters remain unchanged. :param clue: The encrypted clue string. :return: The original message as a string or \\"Invalid input\\" if the input is not a string. if not isinstance(clue, str): return \\"Invalid input\\" deciphered_message = [] for char in clue: if \'a\' <= char <= \'z\': deciphered_message.append(chr((ord(char) - ord(\'a\') - 1) % 26 + ord(\'a\'))) elif \'A\' <= char <= \'Z\': deciphered_message.append(chr((ord(char) - ord(\'A\') - 1) % 26 + ord(\'A\'))) else: deciphered_message.append(char) return \'\'.join(deciphered_message)"},{"question":"Gildong is fascinated by strings and wants to test the compressibility of a given string. Your task is to help Gildong determine the shortest possible length of a string after it has been compressed using a simple Run-Length Encoding (RLE) technique. In Run-Length Encoding, consecutive occurrences of the same character are replaced by a single instance of that character followed by the count of those consecutive occurrences. For example, the string \\"aaabba\\" would be compressed to \\"a3b2a1\\". -----Input----- The input contains a single string s (1 le |s| le 10^5), which consists only of uppercase English letters. -----Output----- Print a single integer representing the minimum length of the compressed string using the Run-Length Encoding technique. -----Example----- Input AABBBCCCC Output 6 Explanation The compressed string is \\"A2B3C4\\" which has a length of 6. -----Note----- In the given example, the original string \\"AABBBCCCC\\" can be compressed as follows: - \\"A\\" occurs 2 times consecutively, which can be represented as \\"A2\\". - \\"B\\" occurs 3 times consecutively, which can be represented as \\"B3\\". - \\"C\\" occurs 4 times consecutively, which can be represented as \\"C4\\". Thus, the total length of the compressed string is 6.","solution":"def rle_min_length(s): Given a string s, returns the length of the string after applying Run-Length Encoding (RLE) compression. if not s: return 0 compressed_length = 0 count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: # Add the length of character plus number length compressed_length += 1 + len(str(count)) count = 1 # Add the last sequence compressed_length += 1 + len(str(count)) return compressed_length"},{"question":"Alice and Bob are playing a card game with a special deck of cards. The deck contains n cards, each with a distinct integer value written on it. The cards are laid out in a line from left to right in the order of their values, and Alice and Bob take turns picking cards. Alice always goes first. On each turn, a player can only take a card from either the far left or the far right end of the remaining cards. The objective of the game is to maximize the sum of the card values a player picks. Both players play optimally, trying to maximize their own score. Determine the maximum score Alice can achieve if both players play optimally. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the number of cards. The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the values of the cards. -----Output----- Output a single integer — the maximum score Alice can achieve if both players play optimally. -----Example----- Input 4 1 2 9 4 Output 10 -----Example Explanation----- Alice can pick the rightmost card (4), then Bob picks the leftmost card (1), then Alice picks the rightmost card (9), resulting in a total score of 4 + 9 = 13 for Alice. (The better option is also taking 9 first and then 1 next as Bob will be forced to take 4 after taking 2 leading to a same score for Alice i.e.,10) Here\'s another example that illustrates the generalized approach: Input 3 4 4 4 Output 8","solution":"def max_score(cards): n = len(cards) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = cards[i] for len_interval in range(2, n + 1): for i in range(n - len_interval + 1): j = i + len_interval - 1 dp[i][j] = max(cards[i] - dp[i + 1][j], cards[j] - dp[i][j - 1]) total_sum = sum(cards) max_alice_score = (total_sum + dp[0][n - 1]) // 2 return max_alice_score"},{"question":"A castle contains several rooms which must be painted. The castle layout is represented as a graph, where each node represents a room, and each edge represents a direct passage between two rooms. Each room must be painted one of three colors: red, blue, or green. No two rooms directly connected by a passage should be painted the same color. You are tasked with determining if it is possible to paint the castle according to the rules mentioned above. If it is possible, you should return any one valid painting configuration. If it is not possible, simply return \\"Not Possible\\". -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M where N is the number of rooms and M is the number of passages between the rooms. - Each of the following M lines contains two integers u and v denoting a passage between room u and room v. -----Output----- For each test case, if it is possible to paint the castle such that no two connected rooms have the same color, print \\"Possible\\" followed by N integers, where the i-th integer is the color of the i-th room (1 for red, 2 for blue, 3 for green). If it is not possible, print \\"Not Possible\\". -----Constraints----- - 1 le T le 100 - 1 le N le 20 - 0 le M le N*(N-1)/2 - 1 le u, v le N - No room will have a passage to itself. -----Example Input----- 2 3 3 1 2 2 3 3 1 4 5 1 2 2 3 3 4 4 1 1 3 -----Example Output----- Possible 1 2 3 Not Possible","solution":"def is_painting_possible(adj, N): color = [-1] * N def can_paint(room, c): color[room] = c for neighbor in adj[room]: if color[neighbor] == c: return False if color[neighbor] == -1 and not can_paint(neighbor, (c + 1) % 3): return False return True for i in range(N): if color[i] == -1: if not can_paint(i, 0): return \\"Not Possible\\" return \\"Possible\\", [c + 1 for c in color] def castle_painting(T, test_cases): results = [] for N, M, edges in test_cases: adj = [[] for _ in range(N)] for u, v in edges: adj[u - 1].append(v - 1) adj[v - 1].append(u - 1) result = is_painting_possible(adj, N) if result == \\"Not Possible\\": results.append(result) else: results.append(f\\"{result[0]}n{\' \'.join(map(str, result[1]))}\\") return results"},{"question":"Given a string s and an integer n, your task is to partition the string into exactly n substrings such that each substring contains unique characters. Return true if it is possible to partition the string s into n such substrings, otherwise return false. Example 1: Input: s = \\"abac\\", n = 2 Output: true Explanation: One possible way to partition the string is [\\"ab\\", \\"ac\\"]. Example 2: Input: s = \\"aaaa\\", n = 2 Output: false Explanation: Since all characters are the same, it is not possible to partition the string into 2 substrings with unique characters. Example 3: Input: s = \\"abcdef\\", n = 6 Output: true Explanation: A possible way to partition the string is [\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\"]. Constraints: 1 <= s.length <= 10^5 1 <= n <= 10^5 s contains only lowercase English letters.","solution":"def can_partition_string(s, n): Returns true if it is possible to partition the string into n substrings such that each contains unique characters, otherwise returns false. # A set to store the characters seen so far in each possible partition seen = set() # Count the number of unique characters unique_count = 0 for char in s: if char not in seen: seen.add(char) unique_count += 1 return unique_count >= n"},{"question":"Given an integer `n`, you need to determine the smallest integer greater than or equal to `n` that is a palindrome. A palindrome is a number that reads the same forward and backward. Write a function that takes an integer `n` and returns the smallest palindrome greater than or equal to `n`. For example: ```python find_palindrome(123) -> 131 find_palindrome(99) -> 99 find_palindrome(100) -> 101 find_palindrome(1234) -> 1331 ``` Your task is to write the function `find_palindrome` to solve this problem. Analyze the given examples for better understanding: ```python def find_palindrome(n): while True: if str(n) == str(n)[::-1]: return n n += 1 # Test cases print(find_palindrome(123)) # 131 print(find_palindrome(99)) # 99 print(find_palindrome(100)) # 101 print(find_palindrome(1234)) # 1331 ```","solution":"def find_palindrome(n): while True: if str(n) == str(n)[::-1]: return n n += 1"},{"question":"Create a function that takes two integers as input, representing month (1 to 12) and year. The function should return the number of days in the given month of that year. Account for leap years when determining the number of days in February. If the month is invalid (not in the range 1 to 12), return `null/nil/None`.","solution":"def days_in_month(month, year): Returns the number of days in the given month of the given year. Accounts for leap years in February. Returns None if the month is invalid. if month < 1 or month > 12: return None if month == 2: # Check for leap year if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return 29 else: return 28 # Months with 31 days if month in [1, 3, 5, 7, 8, 10, 12]: return 31 # Months with 30 days return 30"},{"question":"Create a function that takes a list of integers as input and returns a new list where each element is the cumulative sum up to that index. The function should be named `cumulative_sum`. For example, given the input list `[1, 2, 3, 4]`, the function should return `[1, 3, 6, 10]`. **Function Signature:** ```python def cumulative_sum(nums: List[int]) -> List[int]: ``` **Constraints:** - The input list will contain at least one integer. - The integers will be non-negative. **Example:** Input: `[3, 1, 4, 1, 5]` Output: `[3, 4, 8, 9, 14]`","solution":"from typing import List def cumulative_sum(nums: List[int]) -> List[int]: This function takes a list of integers and returns a new list where each element is the cumulative sum up to that index. :param nums: List of integers. :return: List of integers representing the cumulative sums. cum_sum = 0 result = [] for num in nums: cum_sum += num result.append(cum_sum) return result"},{"question":"=====Problem Statement===== You are given a list of integers nums and an integer target. Your task is to write a function that finds all unique pairs of elements in nums that add up to the target. Each pair should be represented as a tuple of two integers. The order of the pairs does not matter. Ensure that each pair is sorted in non-decreasing order and the whole output list is sorted in ascending order based on the first element of pairs. For instance, if nums = [2, 4, 3, 5, 7, 8, -1] and target = 6, the output should be a list of tuples. It is guaranteed that there\'ll be at most one pair of numbers summing to the target per unique combination of elements in nums. Input Format: - A list of integers, nums, where 2 <= len(nums) <= 10^3 and -10^3 <= nums[i] <= 10^3. - An integer target. Output Format: - A list of tuples, each containing two integers. Example: ```python nums = [2, 4, 3, 5, 7, 8, -1] target = 6 # Expected Output: [(-1, 7), (2, 4), (3, 3)] ```","solution":"def find_pairs(nums, target): Finds all unique pairs of elements in nums that add up to the target. Each pair is a tuple of two integers, sorted in ascending order. The output list is sorted based on the first element of the pairs. nums.sort() pairs = set() seen = {} for num in nums: k = target - num if k in seen: pairs.add((min(num, k), max(num, k))) seen[num] = True return sorted(pairs)"},{"question":"Given a string s containing only digits, return the number of ways to decode it. The mapping is given such that \'1\' maps to \'A\', \'2\' maps to \'B\', ..., \'26\' maps to \'Z\'. Note that \'0\' cannot be mapped to any letter, and any digit that cannot be mapped to a letter does not contribute to the count. Example 1: Input: s = \\"12\\" Output: 2 Explanation: It can be decoded as \\"AB\\" (1 2) or \\"L\\" (12). Example 2: Input: s = \\"226\\" Output: 3 Explanation: It can be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6) or \\"BBF\\" (2 2 6). Example 3: Input: s = \\"06\\" Output: 0 Explanation: There is no valid way to decode \\"06\\" as there is no letter corresponding to 0. Example 4: Input: s = \\"11106\\" Output: 2 Explanation: It can be decoded as \\"KJF\\" (11 10 6) or \\"AAJF\\" (1 1 10 6). Note: 1. The length of the input string will be in the range [1, 100]. 2. The value of the input string characters will be a digit from \'0\' to \'9\'.","solution":"def num_decodings(s): Returns the number of ways to decode the string s. Args: s : str : a string containing only digits Returns: int : number of ways to decode the string if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): # Single digit decode if 0 < int(s[i-1:i]) <= 9: dp[i] += dp[i-1] # Two digits decode if 10 <= int(s[i-2:i]) <= 26: dp[i] += dp[i-2] return dp[n]"},{"question":"To help with efficient code reviews, a company wants an automated tool to analyze changes made in the codebase. The tool should determine the number of lines that were modified, deleted, or added compared to the previous version. Write a function that takes two strings as input, where each string represents lines of code in a version separated by the newline character `\\"n\\"`. The function should return three integers representing the number of lines modified, deleted, and added respectively. # Input: - Two strings `previous_version` and `current_version`. # Output: - Three integers representing the number of lines modified, deleted, and added in the `current_version` compared to the `previous_version`. # Constraints: - The number of lines in each version will not exceed 1000. - The length of each line will not exceed 200 characters. - Lines are considered modified if they appear in the same position in both versions but differ in content. # Example: Input: ``` previous_version = \\"line1nline2nline3\\" current_version = \\"line1nline4nline3nline5\\" ``` Output: ``` 1 0 1 ``` Explanation: - `line2` has been modified to `line4`. - There are no deleted lines. - `line5` has been added.","solution":"def analyze_code_changes(previous_version, current_version): Analyzes the differences between two versions of the code and returns the number of lines that were modified, deleted, and added. Args: previous_version (str): Lines of code in the previous version, separated by newline characters. current_version (str): Lines of code in the current version, separated by newline characters. Returns: tuple: (modified, deleted, added) where: - modified (int): Number of lines modified. - deleted (int): Number of lines deleted. - added (int): Number of lines added. prev_lines = previous_version.split(\'n\') curr_lines = current_version.split(\'n\') max_len = max(len(prev_lines), len(curr_lines)) modified = 0 deleted = 0 added = 0 for i in range(max_len): prev_line = prev_lines[i] if i < len(prev_lines) else None curr_line = curr_lines[i] if i < len(curr_lines) else None if prev_line is None: added += 1 elif curr_line is None: deleted += 1 elif prev_line != curr_line: modified += 1 return modified, deleted, added"},{"question":"Take an integer `n (n >= 0)` and a integer `d (1 <= d <= n)`. Consider an array of integers from `1` to `n`. Find all the contiguous subarrays that have a sum equal to `d`. Return the total count of such subarrays. Examples: ``` n = 5, d = 5 The array is [1, 2, 3, 4, 5] The subarrays with sum equal to 5 are: [2, 3], [5]. Total count is 2. n = 4, d = 3 The array is [1, 2, 3, 4] The subarrays with sum equal to 3 are: [1, 2], [3]. Total count is 2. n = 6, d = 6 The array is [1, 2, 3, 4, 5, 6] The subarrays with sum equal to 6 are: [1, 2, 3], [6]. Total count is 2. ``` Define the function as follows: ```python def count_subarrays(n, d): # your code here ```","solution":"def count_subarrays(n, d): Given a number \'n\' and a target sum \'d\', count the number of contiguous subarrays within the range [1, n] whose sum equals \'d\'. array = list(range(1, n + 1)) count = 0 for i in range(n): current_sum = 0 for j in range(i, n): current_sum += array[j] if current_sum == d: count += 1 elif current_sum > d: break return count"},{"question":"You are given a string that represents a sentence with only lowercase alphabetical characters and spaces. Write a function `reverseWords` (C# `ReverseWords`, Python `reverse_words`) that takes this string and returns a new string with each word reversed, but the order of words remains the same. For example: ``` reverseWords(\\"hello world\\"); reverse_words(\\"hello world\\") ReverseWords(\\"hello world\\"); // should return \\"olleh dlrow\\" ``` ``` reverseWords(\\"coding is fun\\"); reverse_words(\\"coding is fun\\") ReverseWords(\\"coding is fun\\"); // should return \\"gnidoc si nuf\\" ```","solution":"def reverse_words(sentence): Reverses each word in a sentence while maintaining the order of the words. Parameters: sentence (str): The input sentence consisting of lowercase alphabetical characters and spaces. Returns: str: The new sentence with each word reversed but the word order preserved. words = sentence.split() # Split the sentence into individual words reversed_words = [word[::-1] for word in words] # Reverse each word return \' \'.join(reversed_words) # Join the reversed words to form the final sentence"},{"question":"Given an integer array nums and an integer k, find the k-th smallest element in the array. Example: Input: nums = [7, 10, 4, 3, 20, 15], k = 3 Output: 7 Explanation: The 3rd smallest element in the array is 7. Note: You may assume k is always valid, 1 ≤ k ≤ array\'s length.","solution":"def kth_smallest(nums, k): Returns the k-th smallest element in the given array nums. nums.sort() return nums[k - 1]"},{"question":"Shopping Discount Calculator You are developing a shopping discount calculator for an e-commerce platform. The platform provides various products and applies the following discount rules: 1. **Flat Discount** - A fixed percentage is deducted from the total price. 2. **Bulk Discount** - If the customer buys more than a specified quantity of an item, they receive a discount on that item. Your task is to write a function that takes in a list of dictionaries representing the shopping cart and two discount specifications, then returns the total price after applying the discounts. Each item in the shopping cart is represented by a dictionary with the following structure: ```python { \\"name\\": \\"<item_name>\\", \\"price\\": <price_per_item>, \\"quantity\\": <quantity_bought> } ``` Discount specifications are provided as follows: - `flat_discount`: A percentage value indicating the flat discount applied to the total price. - `bulk_discount`: A dictionary where keys are item names, and values are tuples containing a threshold quantity and a discount percentage for that item. Your function should take into account both the flat and bulk discounts. # Function Signature ```python def calculate_discount(cart: List[Dict[str, Union[str, float, int]]], flat_discount: float, bulk_discount: Dict[str, Tuple[int, float]]) -> float: ``` # Example ```python cart = [ {\\"name\\": \\"laptop\\", \\"price\\": 999.99, \\"quantity\\": 2}, {\\"name\\": \\"mouse\\", \\"price\\": 25.50, \\"quantity\\": 5} ] flat_discount = 10 # 10% bulk_discount = {\\"mouse\\": (3, 20)} # 20% discount on \\"mouse\\" if quantity is more than 3 print(calculate_discount(cart, flat_discount, bulk_discount)) # Output: 1764.292 ``` # Notes - Apply bulk discounts before flat discounts. - Round the final price to 2 decimal places. - Item prices and quantities are guaranteed to be positive numbers.","solution":"from typing import List, Dict, Union, Tuple def calculate_discount( cart: List[Dict[str, Union[str, float, int]]], flat_discount: float, bulk_discount: Dict[str, Tuple[int, float]] ) -> float: total_price = 0.0 # Apply bulk discounts first for item in cart: name = item[\'name\'] price = item[\'price\'] quantity = item[\'quantity\'] if name in bulk_discount: threshold, discount_percentage = bulk_discount[name] if quantity >= threshold: price *= (1 - discount_percentage / 100.0) total_price += price * quantity # Apply flat discount total_price *= (1 - flat_discount / 100.0) # Round to 2 decimal places total_price = round(total_price, 2) return total_price"},{"question":"Given an array of integers representing weights of packages, determine if you can partition them into two subsets such that the sum of weights in both subsets is equal. Each package must be used exactly once. Your input will be an array of integers, where each integer represents the weight of a specific package. Your output will be either true or false, representing whether it\'s possible to divide the packages into two subsets with equal sum. Example 1: Input: [1, 5, 11, 5] Output: true Explanation: The array can be partitioned as [1, 5, 5] and [11], both subsets sum to 11. Example 2: Input: [1, 2, 3, 5] Output: false Explanation: The array cannot be partitioned into two subsets with equal sum. Note: The length of the input array will not exceed 200. Each element of the array is a positive integer and will not exceed 100.","solution":"def can_partition(nums): Determines if the array can be partitioned into two subsets such that the sum of weights in both subsets is equal. :param nums: List[int] :return: bool total_sum = sum(nums) # If the total sum is odd, it cannot be divided into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # DP array to store results of subproblems dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"John is participating in a competitive programming contest and encountered a problem regarding cyclic list shifts. He needs to write a function that takes a list of integers and an integer k, which denotes the number of positions to shift the list to the right. If k is negative, the list should be shifted to the left instead. The shifting should be cyclic, meaning that elements that fall off one end of the list should appear at the beginning. For example: ``` List: [1, 2, 3, 4, 5] k: 2 ``` The result should be `[4, 5, 1, 2, 3]`, because shifting the list to the right by 2 positions moves the elements `4` and `5` to the front. Similarly, with k=-2 for the same list, the result should be `[3, 4, 5, 1, 2]`, because shifting the list to the left by 2 positions moves the elements `1` and `2` to the back. Write a function `cyclic_shift(lst, k)` that returns the shifted list. NOTES: • If `k` is zero, return the original list without any changes. • If `k` is greater than the length of the list, use `k % len(lst)` to get the effective number of shifts. • The function should handle cases where the list is empty. In such case, simply return the empty list. ```python def cyclic_shift(lst, k): # Your code here ``` Examples: ``` cyclic_shift([1, 2, 3, 4, 5], 2) ➞ [4, 5, 1, 2, 3] cyclic_shift([1, 2, 3, 4, 5], -2) ➞ [3, 4, 5, 1, 2] cyclic_shift([1, 2, 3, 4, 5], 0) ➞ [1, 2, 3, 4, 5] cyclic_shift([], 3) ➞ [] ```","solution":"def cyclic_shift(lst, k): Shifts the list cyclically by k positions. If k is positive, shifts to the right. If k is negative, shifts to the left. if not lst: return [] n = len(lst) k = k % n # To handle larger k values and negative k values efficiently return lst[-k:] + lst[:-k]"},{"question":"=====Function Descriptions===== Dictionaries are collections of items that are unordered, changeable, and indexed. Each item in a dictionary has a key-value pair. =====Example===== >>> my_dict = {\'name\': \'John\', \'age\': 25, \'city\': \'New York\'} >>> print my_dict {\'name\': \'John\', \'age\': 25, \'city\': \'New York\'} >>> print my_dict[\'age\'] 25 >>> my_dict[\'age\'] = 26 >>> print my_dict {\'name\': \'John\', \'age\': 26, \'city\': \'New York\'} >>> del my_dict[\'city\'] >>> print my_dict {\'name\': \'John\', \'age\': 26} >>> my_dict[\'job\'] = \'Developer\' >>> print my_dict {\'name\': \'John\', \'age\': 26, \'job\': \'Developer\'} Basically, dictionaries are used for storing data values like a map, which, unlike other data types that hold only a single value as an element, holds key-value pairs. =====Problem Statement===== You are given a dictionary where keys are the names of people and values are their corresponding ages. Your task is to print the names of all individuals who are above a certain age. =====Input Format===== The first line contains an integer, M, the number of people. The next M lines each contain a name (string) and an age (integer) separated by a space. The last line contains an integer, T, the threshold age. =====Constraints===== 0 < M ≤ 100 0 ≤ Age ≤ 100 0 ≤ T ≤ 100 =====Output Format===== Output the names of individuals whose age is greater than T, each on a new line. =====Example===== =====Input===== 4 Alice 30 Bob 25 Charlie 35 David 28 29 =====Output===== Alice Charlie =====Explanation===== Alice (30) and Charlie (35) are older than the threshold age of 29.","solution":"def filter_people_above_age(people, threshold_age): Filters out and returns a list of names of people who are above the given threshold age. :param people: List of tuples containing (name, age) :param threshold_age: Age threshold to filter people :return: List of names of people who are above the threshold age return [name for name, age in people if age > threshold_age]"},{"question":"You\'re given an array of integers and your goal is to write a function that returns a new array with each element doubled. Your function should take an array as an input and return an array where each integer is twice as large as the corresponding element in the input array. Consider edge cases where the array might be empty or contain negative numbers.","solution":"def double_array(arr): Given an array of integers, returns a new array with each element doubled. return [2 * x for x in arr]"},{"question":"Given an integer array `arr` and an integer `k`, implement the function `maxSumSubarray(arr, k)` that finds the maximum sum of any contiguous subarray of size `k` within the array. In other words, you need to identify the subarray of length `k` that has the largest sum among all possible subarrays of that length and return that sum. # Example ```python maxSumSubarray([2, 1, 5, 1, 3, 2], 3) ``` **Output**: 9 ``` Explanation: Subarray with the largest sum is [5, 1, 3]. maxSumSubarray([2, 3, 4, 1, 5], 2) ``` **Output**: 7 ``` Explanation: Subarray with the largest sum is [3, 4]. maxSumSubarray([1, 2, 3, 4, 5], 1) ``` **Output**: 5 ``` Explanation: Subarray with the largest sum is [5]. ``` # Constraints - The length of the array, `arr`, is between 1 and 10^5. - The integers in the array will be between -10^4 and 10^4. - The value of `k` will be a positive integer such that `1 <= k <= len(arr)`. # Note Your solution should have a time complexity better than or equal to O(len(arr)).","solution":"def maxSumSubarray(arr, k): Finds the maximum sum of any contiguous subarray of size k within the array. # Initialize the maximum sum with the sum of the first k elements max_sum = sum(arr[:k]) # Current window sum starts as the initial k elements sum current_sum = max_sum # Iterate over the rest of the array starting from index k for i in range(k, len(arr)): # Calculate the new window sum current_sum = current_sum + arr[i] - arr[i - k] # Update max_sum if current window sum is greater max_sum = max(max_sum, current_sum) return max_sum"},{"question":"# Problem Statement You are given a linked list where each node contains an integer value. Write a function to remove all nodes from the linked list that have duplicate values, leaving only distinct numbers from the original list. The order of the first occurrences of the distinct numbers should be maintained in the resulting linked list. For example, if the linked list is: ``` 1 -> 2 -> 3 -> 2 -> 4 -> 3 -> 5 -> 6 -> 4 ``` After removing duplicates, the linked list should become: ``` 1 -> 5 -> 6 ``` # Function Signature ```python def remove_duplicates(head): # Your code here ``` # Input - The input to the function is the head node of the linked list. # Output - The function should return the head node of the modified linked list that contains only distinct values. # Constraints - The linked list may contain any integer values. - The input linked list can be empty, in which case, the function should return `None`. # Example ```python # Given linked list: 1 -> 2 -> 3 -> 2 -> 4 -> 3 -> 5 -> 6 -> 4 # After removing duplicates: 1 -> 5 -> 6 # Assuming a class LinkedList and Node already exist head = LinkedList.create_linked_list([1, 2, 3, 2, 4, 3, 5, 6, 4]) new_head = remove_duplicates(head) # LinkedList.print_linked_list(new_head) should output 1 -> 5 -> 6 ``` # Explanation - First, traverse the linked list once to count occurrences of each value. - Then, create a new linked list by traversing the original list again and adding only those nodes which have exactly one occurrence in the original list. - The order of appearance in the new list should be preserved as in the original list for first occurrences of distinct elements. # Notes - Do not use extra space proportional to the number of nodes (such as creating a new list), except for temporary storage like a hash map. - You may assume that the input list and any node attributes necessary for the problem (e.g., `val` for the value of the node and `next` for the next node link) have already been defined.","solution":"from collections import defaultdict class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_duplicates(head): # First pass to count occurrences of each value value_count = defaultdict(int) current = head while current: value_count[current.val] += 1 current = current.next # Second pass to filter out duplicates dummy = ListNode(0) tail = dummy current = head while current: if value_count[current.val] == 1: tail.next = ListNode(current.val) tail = tail.next current = current.next return dummy.next # Utility functions for creating and printing a linked list for testing purposes def create_linked_list(values): if not values: return None head = ListNode(values[0]) current = head for value in values[1:]: current.next = ListNode(value) current = current.next return head def linked_list_to_list(head): values = [] current = head while current: values.append(current.val) current = current.next return values"},{"question":"In a city, there are n houses aligned along a straight road, and each house has some number of lamps installed. Each lamp in the house can either be on or off. You are given the initial state of the lamps in each house, where \'1\' denotes a lamp being on and \'0\' denotes a lamp being off. You are required to perform a series of m operations on these lamps. Each operation can be of two types: 1. Toggle all lamps from house l_i to house r_i. This means turning all \'0\'s to \'1\'s and all \'1\'s to \'0\'s in each house within this range. 2. Check if all lamps are on in the range from house l_i to house r_i. If all lamps in the specified range are on, the state is considered valid, otherwise, it is invalid. Given the initial state of all houses and the operations to be performed, determine the results for all the operations of the second type. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 5000) — the number of houses and the number of operations respectively. The second line contains n space-separated strings of \'0\'s and \'1\'s, each string representing the initial state of lamps in a house. Next m lines contain the operations. Each operation starts with an integer t_i (1 ≤ t_i ≤ 2) indicating the type. If t_i = 1, it is followed by two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n), the range of houses for the toggle operation. If t_i = 2, it is followed by two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n), the range of houses to check if all lamps are on. -----Output----- For each operation of type 2, print \\"YES\\" if all lamps in the range are on, and \\"NO\\" otherwise. -----Example----- Input 3 5 010 111 000 1 1 1 2 1 2 1 3 3 2 1 3 2 3 3 Output YES NO YES","solution":"def toggle_lamps(lamps): Toggles the lamps in a given house. Turns \'0\' to \'1\' and \'1\' to \'0\'. return \'\'.join(\'1\' if lamp == \'0\' else \'0\' for lamp in lamps) def are_all_lamps_on(houses, l, r): Checks if all lamps are on in the given range of houses. for i in range(l - 1, r): if \'0\' in houses[i]: return \\"NO\\" return \\"YES\\" def process_operations(n, m, house_states, operations): Processes the operations and returns the results for type 2 operations. results = [] for operation in operations: if operation[0] == 1: l, r = operation[1], operation[2] for i in range(l - 1, r): house_states[i] = toggle_lamps(house_states[i]) elif operation[0] == 2: l, r = operation[1], operation[2] results.append(are_all_lamps_on(house_states, l, r)) return results"},{"question":"Write a function that takes an array of strings representing a list of student names and an integer `k`. The task is to return an array containing all the names that appear `k` or more times in the list. The returned array should be in alphabetical order. **Function Signature:** ```python def frequent_students(names: List[str], k: int) -> List[str]: pass ``` **Example:** ```python names = [\\"John\\", \\"Jane\\", \\"Tim\\", \\"John\\", \\"Jane\\", \\"John\\"] k = 2 frequent_students(names, k) ``` **Output:** ```python [\\"Jane\\", \\"John\\"] ``` **Constraints:** - The length of the `names` list is between 1 and 10^5. - The strings in `names` are not empty and consist only of uppercase and lowercase English letters. - `0 <= k <= 10^5`","solution":"from typing import List from collections import Counter def frequent_students(names: List[str], k: int) -> List[str]: Returns a list of student names that appear `k` or more times in the input list `names`. The returned list is sorted in alphabetical order. :param names: List[str] - A list of student names. :param k: int - The frequency threshold. :return: List[str] - A sorted list of student names that appear `k` or more times. # Count occurrences of each name name_counts = Counter(names) # Filter names that appear `k` or more times and sort them alphabetically result = [name for name, count in name_counts.items() if count >= k] result.sort() return result"},{"question":"Task You are developing a simple text editor that needs to support the \\"find and replace\\" functionality. Specifically, the editor should be able to find all occurrences of a substring within a given text and replace them with another substring. Your task is to write a program that reads the text, the substring to find, and the substring to replace it with, and then outputs the modified text. The following rules must be observed: - The search should be case-sensitive. - Overlapping occurrences should not be replaced. For example, replacing \\"aa\\" with \\"a\\" in the text \\"aaaa\\" should result in \\"aa\\". - If the substring to find does not exist in the text, the original text should be returned unchanged. - The text, the substring to find, and the substring to replace can all be of lengths between 1 and 1000. Example Consider the following examples: ``` find_replace(\\"hello world\\", \\"world\\", \\"there\\") -> \\"hello there\\" find_replace(\\"foofoo\\", \\"foo\\", \\"bar\\") -> \\"barbar\\" find_replace(\\"foobarfoo\\", \\"foo\\", \\"ba\\") -> \\"bobarba\\" find_replace(\\"foobar\\", \\"baz\\", \\"qux\\") -> \\"foobar\\" ``` Input/Output - `[input]` string `text` The original text. - `[input]` string `find_text` The substring to find within the original text. - `[input]` string `replace_text` The substring to replace `find_text` with. - `[output]` a string The modified text after all replacements are made. Your task is to implement the function `find_replace`. ```python def find_replace(text: str, find_text: str, replace_text: str) -> str: # Implement the find and replace functionality here. pass ```","solution":"def find_replace(text: str, find_text: str, replace_text: str) -> str: Replaces all non-overlapping occurrences of the find_text in the text with replace_text. Arguments: text -- the original text. find_text -- the substring to find within the original text. replace_text -- the substring to replace find_text with. Returns: A string with the replacements done. return text.replace(find_text, replace_text)"},{"question":"*TASK OPTIMIZER* You are assigned a task to optimize the processing time of a series of jobs. Each job needs to be executed once, and you can only run single jobs sequentially. Given the following inputs, calculate the optimal order to process the jobs to minimize the total processing time. Input 1: jobs - A list of tuples where each tuple contains two integers. The first integer represents the job ID, and the second integer represents the time required to complete that job. Criteria: - The output should be a list of job IDs in the order they should be processed to minimize total processing time. - Minimize the sum of the completion times of each job. - If two jobs have the same processing time, they can be executed in any order relative to each other. Example: ```python minimize_processing_time([(1, 3), (2, 1), (3, 2)]) == [2, 3, 1] minimize_processing_time([(1, 5), (2, 3), (3, 5), (4, 2)]) == [4, 2, 1, 3] ```","solution":"def minimize_processing_time(jobs): Returns a list of job IDs in the order that minimizes the total processing time. Parameters: jobs (list of tuple): A list of tuples where each tuple contains the job ID and the time required to complete that job. Returns: list: A list of job IDs in the order they should be processed. # Sort jobs based on the time required to complete the job sorted_jobs = sorted(jobs, key=lambda x: x[1]) # Extract the job IDs from the sorted jobs job_order = [job[0] for job in sorted_jobs] return job_order"},{"question":"A factory produces N items with different weights every day. The weights of these items vary, and due to transportation constraints, they need to be divided into two separate batches. The goal is to balance the loads as evenly as possible. For this, the factory manager wants to know the minimum possible difference between the total weights of the two batches. Your task is to determine this minimum possible difference. -----Input:----- The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. The first line of each test case contains an integer N. The next line contains N space-separated integers representing the weights of the items produced on that day. -----Output:----- For each test case, output the minimum possible difference between the total weights of the two batches. -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ Weight of each item ≤ 1000 -----Example:----- Input: 2 5 3 1 4 2 2 4 2 3 5 8 Output: 0 2 -----Explanation:----- Case #1: The optimal division of the items is into two batches with weights [3, 1, 2] and [4, 2], both summing to 6. Thus, the minimum possible difference is 0. Case #2: The optimal division is into batches with weights [3, 5] and [2, 8], having total weights of 8 and 10 respectively. Thus the minimum possible difference is 2.","solution":"def min_difference(weights): total_sum = sum(weights) n = len(weights) dp = [0] * (total_sum // 2 + 1) for weight in weights: for j in range(total_sum // 2, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) return total_sum - 2 * dp[total_sum // 2] def min_possible_difference(T, test_cases): results = [] for i in range(T): _ = test_cases[i][0] weights = test_cases[i][1] results.append(min_difference(weights)) return results"},{"question":"Write a function that takes an integer `n`(0≤ n ≤ 12) and returns an array representing the first `n` rows of Pascal\'s Triangle. Pascal\'s Triangle is a triangular array of the binomial coefficients. The entry at the `nth` row and `kth` column is the binomial coefficient `C(n, k)`. Each number is the sum of the two numbers directly above it. If `n` is 0, return an empty array. Examples - `pascals_triangle(5)` should return: ```python [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] ``` - `pascals_triangle(3)` should return: ```python [ [1], [1, 1], [1, 2, 1] ] ``` - `pascals_triangle(0)` should return: ```python [] ```","solution":"def pascals_triangle(n): Returns the first n rows of Pascal\'s Triangle. if n == 0: return [] triangle = [[1]] for i in range(1, n): prev_row = triangle[-1] new_row = [1] for j in range(1, len(prev_row)): new_row.append(prev_row[j-1] + prev_row[j]) new_row.append(1) triangle.append(new_row) return triangle"},{"question":"You are given a list of integers A_1, A_2, dots, A_N and a group of M operations. Each operation is of the form: 1. \\"update X Y\\" - Update the element at index X of the list to Y. 2. \\"query L R\\" - Compute and return the sum of the elements from index L to R inclusive in the list. Write a program to process these operations efficiently. **Input** - The first line contains two space-separated integers N and M. - The second line contains N space-separated integers representing the list A. - The next M lines describe the operations in one of the following two formats: - \\"update X Y\\" meaning update the element at index X to Y. - \\"query L R\\" meaning compute the sum of elements from index L to R inclusive. **Output** For each \\"query\\" operation, output the computed sum in a new line. **Constraints** - 1 leq N, M leq 10^5 - 1 leq A_i leq 10^6 for each valid i - 1 leq X, L, R leq N - 1 leq Y leq 10^6 **Sample Input 1** ``` 5 3 1 2 3 4 5 query 1 3 update 2 10 query 1 3 ``` **Sample Output 1** ``` 6 14 ``` **Explanation 1** Initially, the list is `[1, 2, 3, 4, 5]`. For the first query \\"query 1 3\\", the sum is 1 + 2 + 3 = 6. After the update \\"update 2 10\\", the list becomes `[1, 10, 3, 4, 5]`. The second query \\"query 1 3\\" now has the sum 1 + 10 + 3 = 14.","solution":"class ListOperations: def __init__(self, array): self.array = array self.prefix_sum = self._compute_prefix_sum() def _compute_prefix_sum(self): prefix_sum = [0] * (len(self.array) + 1) for i in range(len(self.array)): prefix_sum[i + 1] = prefix_sum[i] + self.array[i] return prefix_sum def update(self, X, Y): delta = Y - self.array[X - 1] self.array[X - 1] = Y for i in range(X, len(self.array) + 1): self.prefix_sum[i] += delta def query(self, L, R): return self.prefix_sum[R] - self.prefix_sum[L - 1] def process_operations(N, M, A, operations): list_ops = ListOperations(A) results = [] for op in operations: op_type, X, Y = op.split() X, Y = int(X), int(Y) if op_type == \\"update\\": list_ops.update(X, Y) elif op_type == \\"query\\": results.append(list_ops.query(X, Y)) return results"},{"question":"Write a Python function called `merge_sorted_arrays` that takes two lists of integers, `arr1` and `arr2`, both of which are already sorted in non-decreasing order, and returns a new list containing all the integers from both input lists, sorted in non-decreasing order. You may not use Python\'s built-in sorting functions or methods, nor should you use any extra space beyond the new list to be returned (e.g. you should not create additional lists or perform any in-place sorting). Your function should have a linear time complexity proportional to the sum of the lengths of the input lists. # Constraints - Each list will contain at least 1 and at most 1,000,000 integers. - Each integer will be between -1,000,000 and 1,000,000 inclusive. # Example ```python arr1 = [1, 3, 5, 7] arr2 = [2, 4, 6, 8] print(merge_sorted_arrays(arr1, arr2)) # Output: [1, 2, 3, 4, 5, 6, 7, 8] arr1 = [1, 4, 7] arr2 = [2, 3, 5, 6] print(merge_sorted_arrays(arr1, arr2)) # Output: [1, 2, 3, 4, 5, 6, 7] ``` # Function Signature ```python def merge_sorted_arrays(arr1: list[int], arr2: list[int]) -> list[int]: # Your code here ```","solution":"def merge_sorted_arrays(arr1: list[int], arr2: list[int]) -> list[int]: Merges two sorted lists into a new sorted list in non-decreasing order. Parameters: arr1 (list[int]): First sorted list. arr2 (list[int]): Second sorted list. Returns: list[int]: A new list containing all elements from arr1 and arr2, sorted. merged_array = [] i, j = 0, 0 # Use two pointers to merge the arrays while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If there are remaining elements in arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # If there are remaining elements in arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Given an array of integers, find and return the length of the longest subarray that contains only odd numbers. If there are no odd numbers in the array, return 0. Example 1: Input: [1, 2, 3, 5, 7, 2, 6] Output: 3 Explanation: The longest subarray of odd numbers is [3, 5, 7], and its length is 3. Example 2: Input: [2, 4, 6, 8] Output: 0 Explanation: There are no odd numbers in the array. Example 3: Input: [1, 3, 5, 7, 9] Output: 5 Explanation: The entire array consists of odd numbers, so the length of the longest subarray is 5.","solution":"def longest_odd_subarray(arr): Returns the length of the longest subarray containing only odd numbers. max_length = 0 current_length = 0 for num in arr: if num % 2 != 0: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"Write a function that finds the longest subsequence S of numbers in a given list L such that the numbers in S are in non-decreasing order. If there are multiple such subsequences of the same length, return any one of them. -----Input----- The first line contains a single integer n (1 leq n leq 10^5) representing the number of elements in the list L. The second line contains n integers L[i] (1 leq L[i] leq 10^9) separated by a single space representing the list of numbers. -----Output----- A list of integers representing the longest non-decreasing subsequence. If there are multiple such subsequences of the same length, return any one of them. -----Examples----- Input 6 5 3 4 8 6 7 Output [3, 4, 6, 7] Input 5 9 8 7 6 5 Output [9] -----Note----- In the first example, one of the longest non-decreasing subsequences is [3, 4, 6, 7]. Another valid output could be [3, 4, 8]. In the second example, the longest non-decreasing subsequence is [9] since all elements are in decreasing order.","solution":"def longest_non_decreasing_subsequence(L): Function to find the longest subsequence such that the numbers in the subsequence are in non-decreasing order. Parameters: L (list): List of integers to find the subsequence in. Returns: list: Longest non-decreasing subsequence. if not L: return [] n = len(L) dp = [1] * n prev_index = [-1] * n for i in range(1, n): for j in range(i): if L[i] >= L[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev_index[i] = j # Find the index of the maximum value in dp max_length = max(dp) index = dp.index(max_length) # Traverse backwards from the max index to get the subsequence result = [] while index != -1: result.append(L[index]) index = prev_index[index] return result[::-1]"},{"question":"Leo is interested in data structures and recently learned about binary search trees (BST). He wants to add a series of numbers to an initially empty binary search tree and calculate the depth of the resulting tree. The depth of a binary search tree is defined as the number of edges in the longest path from the root to a leaf. Write a program that takes the number of elements to be inserted into the BST and the list of elements, and calculates the depth of the resulting BST. Binary search tree insertion follows the rule: - The left subtree of a node contains only nodes with values less than the node\'s value. - The right subtree of a node contains only nodes with values greater than the node\'s value. - Both the left and right subtrees must also be binary search trees. ----Input---- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements to be inserted into the BST. The second line contains n integers separated by spaces — the elements to be inserted into the BST in the given order. Each element is distinct and fits in the range 1 ≤ a_i ≤ 10^9. ----Output---- Output a single integer — the depth of the resulting BST. ----Example---- Input 6 3 1 4 2 5 6 Output 3 Explanation: After inserting the numbers 3, 1, 4, 2, 5, 6 into the BST, the tree would look like this: ``` 3 / 1 4 2 5 6 ``` The depth of the tree is the length of the path from the root (3) to the furthest leaf node (6), which is 3. ----Note---- - It is guaranteed that the elements provided for insertion are distinct. - The input will be structured such that a valid BST can always be constructed.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insert(node, key): Inserts a new node with the given key into the BST. if node is None: return TreeNode(key) if key < node.val: node.left = insert(node.left, key) else: node.right = insert(node.right, key) return node def max_depth(node): Computes the maximum depth of the binary search tree. if node is None: return 0 left_depth = max_depth(node.left) right_depth = max_depth(node.right) return max(left_depth, right_depth) + 1 def bst_depth(n, elements): if n == 0: return 0 root = None for element in elements: root = insert(root, element) # Since `max_depth` returns the number of nodes along the way, minus 1 to count edges return max_depth(root) - 1"},{"question":"Write a function that takes a list of integers and returns the sum of all integers that are multiples of either 3 or 5. For example: ``` sum_of_multiples([1, 2, 3, 4, 5, 6]) = 14 -- because 3, 5, and 6 are multiples of 3 or 5, and 3 + 5 + 6 = 14 sum_of_multiples([10, 11, 12, 13, 14, 15]) = 37 -- because 10, 12, and 15 are multiples of 3 or 5, and 10 + 12 + 15 = 37 sum_of_multiples([1, 2, 4, 7]) = 0 -- because there are no multiples of 3 or 5 in the list ``` Your implementation should work for negative integers as well.","solution":"def sum_of_multiples(numbers): Returns the sum of all integers in the list that are multiples of either 3 or 5. return sum(num for num in numbers if num % 3 == 0 or num % 5 == 0)"},{"question":"Given a string containing only digits, restore all possible valid IP address combinations that can be formed by inserting dots into the string. A valid IP address consists of exactly four integers (each integer is in the range 0 to 255) separated by dots. Implement a function `restoreIpAddresses(s: str) -> List[str]` that takes a string `s` representing the digits and returns all possible valid IP address combinations. Note: - You are not allowed to reorder or remove any characters in the input string; you can only insert dots. - Leading zeros are not allowed for any parts of the IP address. - The length of the input string `s` will be between 1 and 12. Example 1: Input: s = \\"25525511135\\" Output: [\\"255.255.11.135\\", \\"255.255.111.35\\"] Example 2: Input: s = \\"0000\\" Output: [\\"0.0.0.0\\"] Example 3: Input: s = \\"1111\\" Output: [\\"1.1.1.1\\"] Example 4: Input: s = \\"010010\\" Output: [\\"0.10.0.10\\", \\"0.100.1.0\\"] Example 5: Input: s = \\"101023\\" Output: [\\"1.0.10.23\\", \\"1.0.102.3\\", \\"10.1.0.23\\", \\"10.10.2.3\\", \\"101.0.2.3\\"]","solution":"from typing import List def restoreIpAddresses(s: str) -> List[str]: def is_valid(segment: str) -> bool: Check if the segment is a valid part of an IP address. return 0 <= int(segment) <= 255 and str(int(segment)) == segment def backtrack(start: int, path: List[str]): Use backtracking to find all possible IP addresses. if len(path) == 4: if start == len(s): result.append(\\".\\".join(path)) return for length in range(1, 4): if start + length <= len(s): segment = s[start:start+length] if is_valid(segment): backtrack(start + length, path + [segment]) result = [] backtrack(0, []) return result"},{"question":"Implement a function named `count_ways_to_sum` that takes two integers `n` and `k` as parameters and returns the number of ways to express `n` as the sum of exactly `k` positive integers. For example, for `n = 5` and `k = 2`, there are 2 ways to express `5` as the sum of 2 positive integers: (1 + 4) and (2 + 3). The function should consider different orders of the same combination as different ways. For example, for `n = 5` and `k = 2`, the sums (1 + 4) and (4 + 1) should both be counted separately. **Examples:** ```python count_ways_to_sum(5, 2) # Output: 4 count_ways_to_sum(5, 3) # Output: 6 ``` **Hint:** You might find it useful to think about this problem recursively or use dynamic programming to avoid recalculating solutions for smaller subproblems multiple times.","solution":"def count_ways_to_sum(n, k): Count the number of ways to sum up to n using exactly k positive integers. # Creating a memoization table to store the results of subproblems dp = [[0] * (k + 1) for _ in range(n + 1)] # Base case: There is one way to split zero into zero parts, that is do nothing dp[0][0] = 1 # Iterate over each number from 1 to n for i in range(1, n + 1): # Iterate over the possible number of parts from 1 to k for j in range(1, k + 1): # dp[i][j] = sum of all dp[i - l][j - 1] where l is 1 to i dp[i][j] = sum(dp[i - l][j - 1] for l in range(1, i + 1)) # Return the result of splitting n into k parts return dp[n][k]"},{"question":"Write a program to simulate a simplified version of a cash register system for a store. The system should handle multiple transactions and calculate the total sales for the day. -----Input----- - The first line contains a single integer `N`, which is the number of transactions. - The following `N` lines each contain a string and a float separated by a space. The string represents the product name and the float represents the product price. -----Output----- - Print the total sales amount for the day rounded to 2 decimal places. -----Constraints----- - 1 ≤ N ≤ 10^4 - Product names will be strings of length 1 to 100 consisting of only alphabetic characters and spaces. - Product prices will be positive floats, each with at most 2 decimal places, and will be less than 10^5. -----Example----- Input: 4 Apple 1.20 Banana 0.50 Orange 0.75 Mango 2.00 Output: 4.45","solution":"def calculate_total_sales(transactions): Calculates the total sales amount from a list of transactions. Each transaction is represented as a tuple of (product name, product price). total_sales = sum(price for name, price in transactions) return round(total_sales, 2) def read_input_and_calculate_total_sales(input_data): Reads input data, calculates the total sales, and returns the result. Input data format: - First line contains an integer N representing the number of transactions. - The next N lines each contain a product name and a product price. lines = input_data.strip().split(\'n\') N = int(lines[0]) transactions = [] for i in range(1, N + 1): product_info = lines[i].rsplit(\' \', 1) product_name = product_info[0] product_price = float(product_info[1]) transactions.append((product_name, product_price)) return calculate_total_sales(transactions)"},{"question":"You are managing a bookstore, and you track the inventory of your books using a simple list of dictionaries. Each dictionary contains the `title` of the book, the `author`, and the number of `copies` in stock. Here\'s an example list: ```python inventory = [ {\'title\': \'Book A\', \'author\': \'Author X\', \'copies\': 4}, {\'title\': \'Book B\', \'author\': \'Author Y\', \'copies\': 2}, {\'title\': \'Book C\', \'author\': \'Author Z\', \'copies\': 6} ] ``` Your task is to implement a function `most_copies(inventory)` that takes the inventory list as an input and returns the title of the book that has the highest number of copies in stock. If there is a tie (two or more books with the same highest number of copies), return the title that comes first alphabetically. ```python def most_copies(inventory): # Your code here ``` Examples: ```python most_copies([ {\'title\': \'Book A\', \'author\': \'Author X\', \'copies\': 4}, {\'title\': \'Book B\', \'author\': \'Author Y\', \'copies\': 2}, {\'title\': \'Book C\', \'author\': \'Author Z\', \'copies\': 6} ]) # Output: \'Book C\' most_copies([ {\'title\': \'Book A\', \'author\': \'Author X\', \'copies\': 5}, {\'title\': \'Book B\', \'author\': \'Author Y\', \'copies\': 5}, {\'title\': \'Book C\', \'author\': \'Author Z\', \'copies\': 2} ]) # Output: \'Book A\' ``` Notes: - You can assume the inventory list contains at least one book. - The titles are case-sensitive and must remain in their original form.","solution":"def most_copies(inventory): Returns the title of the book with the highest number of copies in stock. If there is a tie, return the title that comes first alphabetically. # Sort the inventory by copies in descending order and by title alphabetically sorted_inventory = sorted(inventory, key=lambda x: (-x[\'copies\'], x[\'title\'])) # The first element in the sorted list will be the one with the most copies (and first alphabetically if tied) return sorted_inventory[0][\'title\']"},{"question":"Prompt A palindrome is a sequence that reads the same backward as forward. Given a string, write a function `longestPalindromeSubstring` that finds and returns the longest palindromic substring within the given string. If there are multiple longest palindromic substrings with the same length, return the first one that appears in the string. **Function signature:** ```python def longestPalindromeSubstring(s: str) -> str: ``` **Input:** - A single string `s` that consists of lowercase and uppercase English letters. The length of the string will be between 1 and 1000 (inclusive). **Output:** - A string representing the longest palindromic substring within the given string. **Example:** 1. Input: `racecar` Output: `racecar` 2. Input: `babad` Output: `bab` (Here, both `bab` and `aba` are valid outputs as they are both palindromes of length 3, but `bab` appears first.) 3. Input: `abcbabc` Output: `bcb` # Notes: - Remember that the palindrome substring could either be of even or odd length. - Efficiency is important for this problem, so attempt to design an algorithm with a reasonable time complexity. # Test Cases: 1. Input: `a` Output: `a` 2. Input: `forgeeksskeegfor` Output: `geeksskeeg` 3. Input: `abacdfgdcaba` Output: `aba` 4. Input: `cbbd` Output: `bb` # Explanation: 1. For the input `a`, the substring \\"a\\" remains the same backward and forward. 2. For the input `forgeeksskeegfor`, the substring \\"geeksskeeg\\" is the longest palindrome. 3. For the input `abacdfgdcaba`, the substring \\"aba\\" is the first of the longest palindromes found, even though `aba` appears twice in the input string. 4. For the input `cbbd`, the substring \\"bb\\" is the longest palindrome. These test cases help ensure that simple as well as complex strings are handled correctly by the function, providing accurate results regardless of the content or length of the input string.","solution":"def longestPalindromeSubstring(s: str) -> str: Returns the longest palindromic substring in the input string s. If there are multiple longest palindromic substrings with the same length, returns the first one found. if len(s) == 1: return s start, max_len = 0, 1 for i in range(1, len(s)): # Odd length palindromes low, high = i - 1, i + 1 while low >= 0 and high < len(s) and s[low] == s[high]: if high - low + 1 > max_len: start = low max_len = high - low + 1 low -= 1 high += 1 # Even length palindromes low, high = i - 1, i while low >= 0 and high < len(s) and s[low] == s[high]: if high - low + 1 > max_len: start = low max_len = high - low + 1 low -= 1 high += 1 return s[start:start + max_len]"},{"question":"You are given a string s consisting only of lowercase letters. You need to reorganize the string such that no two adjacent characters are the same. If such a reorganization is not possible, return an empty string \\"\\". Example: Input: \\"aab\\" Output: \\"aba\\" Input: \\"aaab\\" Output: \\"\\" Explanation: For the first example, \\"aab\\" can be reorganized to \\"aba\\" which does not have any two adjacent characters that are the same. For the second example, it\'s impossible to reorganize \\"aaab\\" to satisfy the condition as there are too many \'a\' characters.","solution":"import heapq from collections import Counter def reorganize_string(s): if not s: return \\"\\" count = Counter(s) max_heap = [(-cnt, char) for char, cnt in count.items()] heapq.heapify(max_heap) prev_char, prev_count = None, 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_char and prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 reorganized_string = \\"\\".join(result) if len(reorganized_string) != len(s): return \\"\\" return reorganized_string"},{"question":"=====Problem Statement===== You are working on a project that involves image processing. One of the tasks is to identify the unique colors present in an image. An image can be represented as a grid of pixels, where each pixel is a tuple of three integers representing the red, green, and blue (RGB) values. Your task is to determine the number of unique colors present in a given image. =====Input Format===== The first line contains two integers N and M, where N is the number of rows and M is the number of columns in the image (1 <= N, M <= 1000). Each of the next N lines contains M tuples, where each tuple represents the RGB value of a pixel in the format (R, G, B). Each value R, G, B is an integer between 0 and 255. =====Output Format===== Print a single integer, the number of unique colors present in the image. =====Sample Input===== 3 3 (255, 0, 0) (0, 255, 0) (0, 0, 255) (255, 0, 0) (0, 0, 255) (0, 255, 0) (0, 255, 0) (0, 0, 255) (255, 0, 0) =====Sample Output===== 3 =====Explanation===== In the given sample, there are 3 unique colors: (255, 0, 0), (0, 255, 0), and (0, 0, 255). These colors are present multiple times in the image, but they are counted only once as unique colors.","solution":"def count_unique_colors(N, M, pixels): Returns the number of unique colors in the given image represented by pixels. :param N: Number of rows in the image :param M: Number of columns in the image :param pixels: List of list of tuples, where each tuple represents an RGB value of a pixel :return: Integer representing the number of unique colors unique_colors = set() for row in pixels: for pixel in row: unique_colors.add(pixel) return len(unique_colors) # Example usage: # pixels = [ # [(255, 0, 0), (0, 255, 0), (0, 0, 255)], # [(255, 0, 0), (0, 0, 255), (0, 255, 0)], # [(0, 255, 0), (0, 0, 255), (255, 0, 0)] # ] # N, M = 3, 3 # print(count_unique_colors(N, M, pixels)) # Output: 3"},{"question":"Write a function that takes a string as input and returns a new string such that each character from the original string is shifted to the right by one position in the ASCII table. If the shift causes the character to go past \'z\', it should wrap around to \'a\'. Similarly, if the character goes past \'Z\', it should wrap around to \'A\'. Non-alphabetic characters should remain unchanged. Example For the input string `\\"Hello, World!\\"`, the encrypted string will be `\\"Ifmmp, Xpsme!\\"`.","solution":"def shift_char(c): Shifts a character to the right by one position in the ASCII table, wrapping around as necessary for alphabetic characters. if \'a\' <= c <= \'z\': return chr(((ord(c) - ord(\'a\') + 1) % 26) + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr(((ord(c) - ord(\'A\') + 1) % 26) + ord(\'A\')) else: return c def shift_string(input_string): Shifts each character in the input string to the right by one position in the ASCII table, with wrapping for alphabetic characters. return \'\'.join(shift_char(c) for c in input_string)"},{"question":"In a galaxy far, far away, the Starfleet needs to efficiently manage the distribution of supplies to their different fleets scattered across various planets. Each fleet needs a certain amount of supplies, and the Starfleet command has an array of supply pods of varying capacities. They want to know the minimum number of supply pods necessary to meet the demands of each fleet. If the demand of a fleet cannot be met even when all supply pods are used, the fleet should be notified that it is impossible to meet their demand. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows: - The first line of each test case contains an integer M denoting the number of supply pods. - The second line of each test case contains M space-separated integers representing the capacities of the supply pods. - The third line contains an integer D representing the demand of the fleet. -----Output----- - For each test case, output a single line containing an integer denoting the minimum number of supply pods needed. If it\'s impossible to meet the demand, output -1. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ M ≤ 1000 - 1 ≤ capacities[i] ≤ 10^9 - 1 ≤ D ≤ 10^9 -----Example----- Input: 2 4 1 2 3 4 6 5 1 5 10 50 100 40 Output: 2 1","solution":"def min_supply_pods(test_cases): results = [] for case in test_cases: M, capacities, D = case capacities.sort(reverse=True) total_used = 0 total_supplies = 0 for capacity in capacities: if total_supplies >= D: break total_supplies += capacity total_used += 1 if total_supplies >= D: results.append(total_used) else: results.append(-1) return results"},{"question":"A new restaurant offers a variety of meal plans, each comprising a set of unique dishes. Each dish has a specific price, and meal plans do not repeat any dishes. Customers can order multiple meal plans, and they want to know the total cost of the dishes in their selected meal plans. However, some customers prefer a discount strategy where if a dish is repeated in multiple meal plans, they only have to pay for that dish once. Your task is to determine the total cost the customer needs to pay for their selected meal plans, considering the mentioned discount strategy. -----Input:----- - The first line contains an integer T, the number of test cases. Then the test cases follow. - Each test case begins with an integer M, the number of meal plans the customer is ordering. - The next M lines each start with an integer K, the number of dishes in that meal plan. Following K, there are K integers, representing the prices of the dishes in that meal plan. -----Output:----- - For each test case, print the total cost the customer needs to pay, considering the discount strategy. -----Constraints----- - 1 leq T leq 50 - 1 leq M leq 100 - 1 leq K leq 100 - 1 leq Price of each dish leq 10^4 -----Sample Input:----- 2 3 3 10 20 30 2 20 40 4 10 20 30 50 1 2 15 25 -----Sample Output:----- 150 40 -----Explanation:----- For the first test case: - Meal Plan 1: Dishes with prices [10, 20, 30] - Meal Plan 2: Dishes with prices [20, 40] - Meal Plan 3: Dishes with prices [10, 20, 30, 50] Total unique prices: 10, 20, 30, 40, 50 => Total cost = 10 + 20 + 30 + 40 + 50 = 150 For the second test case: - Meal Plan 1: Dishes with prices [15, 25] Total unique prices: 15, 25 => Total cost = 15 + 25 = 40","solution":"def calculate_total_cost(test_cases): Calculate the total cost of dishes in selected meal plans considering the discount strategy. Args: test_cases (list of tuple): A list where each element is a tuple with the number of meal plans (M), followed by a list of lists containing the prices of dishes in each meal plan. Returns: list: A list containing the total cost for each test case. results = [] for case in test_cases: M, meal_plans = case unique_dishes = set() for plan in meal_plans: for price in plan: unique_dishes.add(price) total_cost = sum(unique_dishes) results.append(total_cost) return results"},{"question":"Write a function `sum_of_squares` that takes a positive integer `n` and returns the sum of the squares of the integers from 1 to `n`. # Examples ```python sum_of_squares(1) # returns 1 sum_of_squares(2) # returns 5 because 1^2 + 2^2 = 1 + 4 = 5 sum_of_squares(3) # returns 14 because 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 sum_of_squares(10) # returns 385 because 1^2 + 2^2 + 3^2 + ... + 10^2 = 385 ``` # Constraints - 1 <= n <= 10^4 # Note - You should consider using a loop or a mathematical formula to generate the sum of the squares.","solution":"def sum_of_squares(n): Returns the sum of the squares of integers from 1 to n. return sum(i * i for i in range(1, n + 1))"},{"question":"# Character Frequency Analysis Write a function that takes a string as input and returns a dictionary where the keys are the characters in the string, and the values are the number of times each character appears. The function should ignore case (i.e., treat \'A\' and \'a\' as the same character) and should count only the alphabetic characters (i.e., skip digits, punctuation, spaces, etc.). The input string will consist of printable ASCII characters only. Examples ```python character_frequency(\\"Hello, World!\\") # --> {\\"h\\": 1, \\"e\\": 1, \\"l\\": 3, \\"o\\": 2, \\"w\\": 1, \\"r\\": 1, \\"d\\": 1} character_frequency(\\"Python3.8\\") # --> {\\"p\\": 1, \\"y\\": 1, \\"t\\": 1, \\"h\\": 1, \\"o\\": 1, \\"n\\": 1} ``` Notes - The output dictionary should be case-insensitive. - The function should not include any non-alphabetic characters in the output dictionary.","solution":"def character_frequency(s): Returns a dictionary with the frequency of alphabetic characters in the string s. Ignores the case and non-alphabetic characters. frequency = {} for char in s: if char.isalpha(): char = char.lower() if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"A resort named Paradise has a unique way of interacting with their clients. Each client arrives at the front desk and receives an ID, which is a positive integer. The resort has a special feature where they can randomly reset the current list of clients\' IDs periodically. Paradise wants to know the smallest positive integer ID that is not present on the current client list after each reset. For simplicity, consider that IDs are positive integers starting from 1, 2, 3, and so on. The goal is to efficiently determine the smallest missing ID each time the list is reset. -----Input----- The first line of the input contains an integer T, the number of resets. For each reset: 1. A line containing an integer N, the number of client IDs on the current list. 2. A line with N space-separated integers depicting the client IDs. -----Output----- For each reset, output the smallest positive integer that is not present in the current list of client IDs. -----Constraints----- - 1 ≤ T ≤ 100 - 0 ≤ N ≤ 105 - Each client ID is a positive integer within the range [1, 106] -----Example----- Input: 3 5 1 2 4 5 6 3 7 8 9 0 Output: 3 1 1 -----Explanation----- For the first reset, the client list is [1, 2, 4, 5, 6]. The smallest missing positive integer is 3. For the second reset, the client list is [7, 8, 9]. The smallest missing positive integer is 1. For the third reset, the client list is empty. The smallest missing positive integer is 1.","solution":"def find_smallest_missing_id(resets): results = [] for reset in resets: N, clients = reset present = [False] * (N + 1) for client in clients: if 1 <= client <= N: present[client - 1] = True smallest_missing = N + 1 for i in range(N): if not present[i]: smallest_missing = i + 1 break results.append(smallest_missing) return results"},{"question":"Given two strings `s` and `t`, return true if `t` is an anagram of `s`, and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Example 1: Input: s = \\"anagram\\", t = \\"nagaram\\" Output: true Example 2: Input: s = \\"rat\\", t = \\"car\\" Output: false Constraints: 1 <= s.length, t.length <= 5 * 10^4 s and t consist of lowercase English letters.","solution":"def is_anagram(s, t): Returns true if t is an anagram of s, else returns false. if len(s) != len(t): return False # Create frequency counts for both strings char_count_s = {} char_count_t = {} for char in s: char_count_s[char] = char_count_s.get(char, 0) + 1 for char in t: char_count_t[char] = char_count_t.get(char, 0) + 1 return char_count_s == char_count_t"},{"question":"In a distant galaxy, there is an autonomous space station with N docking ports, connected by N-1 bi-directional corridors. Each docking port is identified by a unique ID from 1 to N. The space station receives space cargo shipments between these docking ports. Each shipment arrives at a port i with a specific cargo value C_i. The intergalactic cargo manager wants to ensure that every cargo’s routing path to the central dock (port 1) follows certain rules. In each move, the intergalactic cargo manager can choose a port (other than the central dock) and move its cargo to one of its directly connected ports that is closer to the central dock. The goal is to balance the total cargo value across all ports optimally. Your task is to determine if there exists a way to redistribute cargo such that all ports (except the central dock) end up with equal cargo values. Input: - The first line contains a single integer N, the number of docking ports. - The second line contains N space-separated integers representing the cargo values C_1, C_2, dots, C_N. - The next N-1 lines contain two space-separated integers u and v, indicating a bi-directional corridor between port u and port v. Output: - Output \\"Yes\\" if it is possible to adjust the cargo value to be equal across all non-central ports, otherwise output \\"No\\". Constraints: - 2 leq N leq 2 times 10^{5} - 1 leq C_i leq 10^{9} for each valid i - 1 leq u,v leq N Sample Input 1: 3 2 4 4 1 2 1 3 Sample Output 1: Yes Explanation 1: The cargo value can be redistributed such that port 2 and port 3 both have the same cargo value of 4. Sample Input 2: 3 3 4 5 1 2 1 3 Sample Output 2: No Explanation 2: It is impossible to distribute the cargo values between the ports to make both ports 2 and 3 equal.","solution":"def can_redistribute_cargo(N, C, edges): # Base case for N=2 if N == 2: return \\"Yes\\" # Read cargo values except the central port (1) non_central_ports_cargo = C[1:] # Calculate the sum of cargo in non-central ports sum_cargo = sum(non_central_ports_cargo) # Check if we can distribute the sum equally across all non-central ports if sum_cargo % (N - 1) == 0: target_cargo = sum_cargo // (N - 1) for cargo in non_central_ports_cargo: if cargo > target_cargo: return \\"No\\" return \\"Yes\\" else: return \\"No\\" # Example usage: N = 3 C = [2, 4, 4] edges = [(1, 2), (1, 3)] print(can_redistribute_cargo(N, C, edges)) # Should output \\"Yes\\""},{"question":"Write a function ```max_distinct_subarray(arr)``` that takes a list of integers, ```arr```, and returns the length of the longest subarray that contains all distinct integers. For ```arr = [5, 1, 3, 5, 2, 3, 4, 1]```, the longest subarray with all distinct integers is ```[5, 1, 3, 2, 4]``` which has length ```5```. Examples: ``` max_distinct_subarray([5, 1, 3, 5, 2, 3, 4, 1]) ---> 5 max_distinct_subarray([4, 4, 4, 4]) ---> 1 max_distinct_subarray([1, 2, 3, 4, 5]) ---> 5 max_distinct_subarray([2, 2, 2, 3, 4, 5, 2, 3]) ---> 4 ``` Features of the random tests: ``` Number of tests = 30 1 <= len(arr) <= 10^5 0 <= arr[i] < 10^5 ```","solution":"def max_distinct_subarray(arr): Returns the length of the longest subarray that contains all distinct integers. n = len(arr) if n == 0: return 0 max_len = 0 start = 0 seen = {} for end in range(n): if arr[end] in seen: start = max(start, seen[arr[end]] + 1) seen[arr[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"# Task You are given an array of string `words` and an array of string `postfixes`. For each word in the `words` array, find out if it ends with any of the strings in the `postfixes` array. Your task is to return the count of such words. A word is considered to end with a postfix if the postfix matches a substring that starts from some position in the word to the end of the word. # Example For: ``` words = [\\"apple\\", \\"banana\\", \\"grape\\", \\"pineapple\\"] postfixes = [\\"le\\", \\"na\\", \\"ple\\"] ``` The result should be `3` Explanation: - \\"apple\\" ends with \\"le\\" - \\"banana\\" ends with \\"na\\" - \\"grape\\" does not end with any postfix in the list - \\"pineapple\\" ends with \\"ple\\" So the result is 3. # Input/Output - `[input]` array of strings `words` - Length of `words` <= 1000 - Length of each word <= 100 - `[input]` array of strings `postfixes` - Length of `postfixes` <= 100 - Length of each postfix <= 10 - `[output]` an integer Return the count of words that end with any of the given postfixes.","solution":"def count_words_with_postfixes(words, postfixes): Returns the number of words that end with any of the given postfixes. Args: words (list): List of strings representing the words. postfixes (list): List of strings representing the postfixes. Returns: int: The number of words that end with any of the postfixes. count = 0 for word in words: if any(word.endswith(postfix) for postfix in postfixes): count += 1 return count"},{"question":"Polycarp goes to a cafe every day, where he drinks exactly one cup of coffee. He always prefers to drink the coffee as soon as possible. The cafe offers n different types of coffee, each type available at different times during the day. You are given n pairs of integers (s_i, e_i), where s_i is the time when the i-th type of coffee becomes available and e_i is the time when the i-th type of coffee is sold out. If Polycarp arrives at the cafe at time t, he will choose the coffee that is available at the earliest possible time which is not earlier than t. If there are multiple such types available at the same time, he will choose the type with the earliest selling out time. If Polycarp arrives at a time when no coffee is available, he will wait until some type of coffee becomes available. For each given arrival time, determine the time at which Polycarp will buy his coffee. -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the number of types of coffee and the number of different arrival times, respectively. Each of the next n lines contains two integers s_i and e_i (0 le s_i < e_i le 10^9) — the available times of the i-th type of coffee. The next m lines contain one integer t_j (0 le t_j le 10^9) — the arrival times of Polycarp. -----Output----- For each arrival time t_j, print a single integer — the time at which Polycarp will buy his coffee. -----Example----- Input 3 5 1 4 5 8 2 6 3 1 5 6 7 Output 3 1 5 6 7 -----Note----- In the first test case: - Polycarp arrives at time 3: He can buy coffee immediately since the first type of coffee is still available till time 4. - Polycarp arrives at time 1: He buys the first type of coffee since it is available from time 1 to 4. - Polycarp arrives at time 5: He buys the second type of coffee immediately since it becomes available at time 5. - Polycarp arrives at time 6: He buys the second type of coffee immediately as it is still available till time 8. - Polycarp arrives at time 7: He buys the second type of coffee immediately as it is still available till time 8.","solution":"def find_coffee_times(n, m, coffee_times, arrival_times): result = [] for arrival in arrival_times: best_time = None for s, e in coffee_times: if s <= arrival <= e: best_time = arrival break elif arrival < s: if best_time is None or s < best_time: best_time = s result.append(best_time) return result"},{"question":"Implement a function that takes a non-negative integer as input and returns whether the integer is a palindrome. A palindrome is a number that reads the same forward and backward. **Examples:** ``` 121 -> true 123 -> false 1001 -> true 10 -> false ``` **Input Constraints:** - The input integer can be as large as 2^31 - 1. **Instructions:** 1. Convert the integer to its string representation. 2. Check if the string representation reads the same forward and backward. 3. Return `true` if the integer is a palindrome, otherwise return `false`. **Edge cases to consider:** - A single-digit number is always a palindrome. - Large numbers should be handled efficiently.","solution":"def is_palindrome(num): Returns whether the input non-negative integer is a palindrome. A palindrome is a number that reads the same forward and backward. # Convert the number to string to check if it reads the same forward and backward str_num = str(num) return str_num == str_num[::-1]"},{"question":"# Kata Task Bob loves baking cookies and he makes them for all his friends. However, Bob has a limited number of trays and each tray can hold a certain number of cookies at a time. Write a function to help Bob calculate the total number of baking rounds required to bake all the cookies, given the number of cookies he wants to bake and the capacity of each tray. # Function Signature ```python def baking_rounds(total_cookies: int, tray_capacity: int) -> int: pass ``` # Input * `total_cookies` (int): an integer representing the total number of cookies Bob wants to bake. (0 <= total_cookies <= 10^6) * `tray_capacity` (int): an integer representing the maximum number of cookies a single tray can hold. (1 <= tray_capacity <= 1000) # Output Return an integer representing the total number of baking rounds required. # Example ```python baking_rounds(23, 5) => 5 baking_rounds(100, 25) => 4 baking_rounds(7, 3) => 3 ``` # Notes * The function should account for any remaining cookies that do not completely fill a tray, counting them as an additional baking round. * Consider edge cases where `total_cookies` is 0 or exactly divisible by `tray_capacity`.","solution":"def baking_rounds(total_cookies: int, tray_capacity: int) -> int: Returns the total number of baking rounds required to bake all the cookies. Parameters: total_cookies (int): Total number of cookies to bake. (0 <= total_cookies <= 10^6) tray_capacity (int): Maximum number of cookies a single tray can hold. (1 <= tray_capacity <= 1000) Returns: int: Total number of baking rounds required. # Compute the number of full trays full_trays = total_cookies // tray_capacity # Check for any remaining cookies that need an additional round if total_cookies % tray_capacity > 0: full_trays += 1 return full_trays"},{"question":"# Introduction Binary trees are a fundamental data structure used in computer science for various applications such as searching, sorting, and representing hierarchical data. One key aspect of binary trees is their depth, which impacts operations\' efficiency on the tree. # Task Write a function that accepts the root node of a binary tree and returns the maximum depth of the tree. The maximum depth is defined as the number of nodes along the longest path from the root node down to the farthest leaf node, including the root node itself. For example, given the following binary tree, the maximum depth is 3: ``` 1 / 2 3 / 4 5 ``` Here is the class definition for a tree node: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` # Function Signature Your function should have the following signature: ```python def maxDepth(root: TreeNode) -> int: # Your code here ``` # Examples 1. Input: ```python root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) ``` Output: ```python 3 ``` 2. Input: ```python root = TreeNode(1) root.right = TreeNode(2) root.right.right = TreeNode(3) ``` Output: ```python 3 ``` 3. Input: ```python root = TreeNode(1) ``` Output: ```python 1 ``` 4. Input: ```python root = None ``` Output: ```python 0 ``` Additional Notes: - The tree node values are integers. - It\'s possible for the input tree to be empty, which should return a depth of 0. Write a function `maxDepth` that determines the maximum depth of a binary tree based on the given examples and requirements.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def maxDepth(root: TreeNode) -> int: if not root: return 0 left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"You need to implement a function, `flatten`, which takes a nested list of integers and returns a single list with all the integers in a flat structure, preserving the order. Write a recursive solution for this task. The depth of the nested lists is unknown and can be arbitrary. For example: ```python flatten([1, [2, [3, 4], 5], 6]) ``` should return: ```python [1, 2, 3, 4, 5, 6] ``` Another example: ```python flatten([[[1, 2], 3], [4, [5, [6]]]]) ``` should return: ```python [1, 2, 3, 4, 5, 6] ```","solution":"def flatten(nested_list): Recursively flattens a nested list of integers. Args: nested_list (list): A list which may contain other nested lists of integers. Returns: list: A flat list containing all the integers from the nested list, preserving the order. flat_list = [] for item in nested_list: if isinstance(item, list): flat_list.extend(flatten(item)) else: flat_list.append(item) return flat_list"},{"question":"You are given an array of strings where no string is a prefix of another string. Your task is to write a function `findLongestCompoundWord` that finds the longest string in the array which can be composed of at least two other strings from the array. For example, given the array [\\"cat\\", \\"cats\\", \\"catsdogcats\\", \\"dog\\", \\"dogcatsdog\\", \\"hippopotamuses\\", \\"rat\\", \\"ratcatdogcat\\"], the longest compound word is \\"ratcatdogcat\\". Function Signature: ```python def findLongestCompoundWord(words: List[str]) -> str: pass ``` Constraints: - `words` will contain at least 2 strings and at most 1000 strings. - Each string in `words` will have a length between 1 and 100 inclusive. - All strings in `words` are lowercase. Examples: ```python findLongestCompoundWord([\\"cat\\", \\"cats\\", \\"catsdogcats\\", \\"dog\\", \\"dogcatsdog\\", \\"hippopotamuses\\", \\"rat\\", \\"ratcatdogcat\\"]) -> \\"ratcatdogcat\\" findLongestCompoundWord([\\"hippo\\", \\"potamus\\", \\"hippopotamus\\"]) -> \\"hippopotamus\\" findLongestCompoundWord([\\"this\\", \\"is\\", \\"an\\", \\"example\\"]) -> \\"\\" ```","solution":"from typing import List def findLongestCompoundWord(words: List[str]) -> str: words_set = set(words) def can_form(word, isOriginal): if word in words_set and not isOriginal: return True for i in range(1, len(word)): prefix = word[:i] suffix = word[i:] if prefix in words_set and can_form(suffix, False): return True return False longest_word = \\"\\" for word in words: if can_form(word, True) and len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"You are given an array of integers representing the stock prices of a company in chronological order. The objective is to determine the maximum profit you can achieve by buying and selling the stock such that you buy before you sell. You can complete at most one transaction (buy one and sell one share of the stock). Write a function `maxProfit` that takes an array of integers `prices` and returns an integer representing the maximum profit you can achieve from this transaction. If no profit is possible, return 0. For example: ```python def maxProfit(prices): # Your code here # Example print(maxProfit([7, 1, 5, 3, 6, 4])) # Output should be 5 print(maxProfit([7, 6, 4, 3, 1])) # Output should be 0 ``` # Constraints - The length of the array `prices` will be between 1 and 10^5. - Each element of the array will be an integer between 0 and 10^4. # Explanation 1. Given the array `[7, 1, 5, 3, 6, 4]`, the maximum profit can be achieved by buying the stock on day 2 (price = 1) and selling it on day 5 (price = 6), hence profit = 6 - 1 = 5. 2. Given the array `[7, 6, 4, 3, 1]`, there is no positive profit possible as the prices are in descending order, hence profit = 0.","solution":"def maxProfit(prices): Returns the maximum profit from a single buy-sell transaction if not prices: return 0 max_profit = 0 min_price = prices[0] for price in prices[1:]: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Write a function named `findDuplicates` that takes a list of integers as input and returns a list of integers that are duplicates in the given list. The duplicates should be returned in the order they first appear in the input list. If there are no duplicates, the function should return an empty list. Function signature: `def findDuplicates(numbers: List[int]) -> List[int]:` Examples: ``` findDuplicates([1, 2, 3, 3, 2, 1]) => [3, 2, 1] findDuplicates([1, 2, 3, 4, 5, 6]) => [] findDuplicates([1, 1, 2, 2, 3, 3, 4, 4]) => [1, 2, 3, 4] findDuplicates([5, 5, 5, 5, 5]) => [5] ``` # Constraints: - The input list will contain at most 10^3 integers. - Each integer in the list will be between -10^6 and 10^6 inclusive. # Note: - The order of duplicates in the output list should be the same as their first occurrence in the input list.","solution":"from typing import List def findDuplicates(numbers: List[int]) -> List[int]: Returns a list of integers that are duplicates in the given list, in the order they first appear in the input list. seen = set() duplicates = set() result = [] for number in numbers: if number in seen: if number not in duplicates: duplicates.add(number) result.append(number) else: seen.add(number) return result"},{"question":"You are given an array of N integers and an integer X. Your task is to find the number of unique pairs (A_i, A_j) such that their sum is equal to X and i neq j. -----Input----- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and X. - The second line of each test case contains N space-separated integers denoting the elements of the array. -----Output----- For each test case, print a single line containing the number of unique pairs whose sum is equal to X. -----Constraints----- - 1 le T le 1,000 - 2 le N le 1,000 - -10^6 le A_i le 10^6 - -10^6 le X le 10^6 -----Subtasks----- Subtask #1 (10 points): N le 10 Subtask #2 (90 points): original constraints -----Example Input----- 2 4 5 1 2 3 4 5 0 -1 1 2 3 -2 -----Example Output----- 2 2","solution":"def count_unique_pairs_with_sum(arr, X): This function receives an array and an integer X, and returns the number of unique pairs (Ai, Aj) such that their sum is equal to X and i != j. seen = set() pairs = set() for num in arr: target = X - num if target in seen: pairs.add((min(num, target), max(num, target))) seen.add(num) return len(pairs) def process_test_cases(T, test_cases): This function receives the number of test cases and a list of test cases. Each test case is a tuple containing (N, X, arr). It returns a list with the results for each test case. results = [] for N, X, arr in test_cases: results.append(count_unique_pairs_with_sum(arr, X)) return results"},{"question":"Write a function that takes a string `s` consisting of lowercase letters and returns the character that appears the least frequently. If there are multiple characters with the same minimal frequency, return the one that appears first in the string. Examples ```python s = \\"examples\\" ==> \'x\' # \'x\' appears once, which is the least frequency s = \\"sampletest\\" ==> \'a\' # \'a\' appears once, which is the least frequency and comes before \'t\' which also appears once s = \\"abacabadabacaba\\" ==> \'d\' # \'d\' and \'c\' both have the same minimal frequency, but \'d\' appears first ```","solution":"def least_frequent_char(s): Returns the character that appears the least frequently in the string. If there are multiple characters with the same minimal frequency, returns the one that appears first in the string. from collections import Counter frequency = Counter(s) min_freq = min(frequency.values()) for char in s: if frequency[char] == min_freq: return char"},{"question":"# Alternating Characters You and your friends are playing a game where you create new strings by alternating characters from two input strings. Your task is to combine the two given strings into one by taking characters from each string in an alternating manner. If one string is longer than the other, append the rest of the characters from the longer string to the combined result. # Task Write a function `alternate_strings(s1, s2)` that takes two strings as input and returns a new string formed by alternating characters from the input strings. Examples ```python alternate_strings(\\"abc\\", \\"def\\") # returns \\"adbecf\\" alternate_strings(\\"hello\\", \\"world\\") # returns \\"hweolrllod\\" alternate_strings(\\"short\\", \\"longer\\") # returns \\"slhoonrgter\\" ``` Constraints - The input strings can have a maximum length of 1000 characters. - The function should not use any external libraries. # Testing Notes The function should handle cases where one string is significantly longer than the other, as well as cases where both strings have the same length.","solution":"def alternate_strings(s1, s2): Combine two strings by alternating their characters. If one string is longer, append the remainder of the longer string to the result. combined = [] len1, len2 = len(s1), len(s2) # Interleave characters from both strings for i in range(min(len1, len2)): combined.append(s1[i]) combined.append(s2[i]) # Append remaining characters from the longer string, if any if len1 > len2: combined.extend(s1[len2:]) elif len2 > len1: combined.extend(s2[len1:]) return \'\'.join(combined)"},{"question":"Implement a function that takes in a string representing a mathematical expression containing non-negative integers and the operators `+`, `-`, `*`, `/` (addition, subtraction, multiplication, and division), and evaluates the expression. The expression is fully parenthesized and does not contain any spaces. Ensure the operators follow the PEMDAS/BODMAS rules when performing the arithmetic operations. If the input string is empty or does not contain a valid expression, the function should return `null/nil/None`. Examples: * `\\"3+(2*2)\\"` should return `7` * `\\"(1+(4+5+2)-3)+(6+8)\\"` should return `23` * `\\"(10/2)-(3*3)\\"` should return `-4` Special Notes: - Parentheses will always be used correctly. - Division should be performed as integer division.","solution":"def evaluate_expression(expression): Evaluates a fully parenthesized mathematical expression. Args: expression (str): A string representing the mathematical expression. Returns: int: The result of the evaluated expression. try: # Evaluate the expression using python\'s eval which handles parenthesis and integer division result = eval(expression, {\\"__builtins__\\": None}, {\\"__truediv__\\": lambda x, y: x // y}) return result except: return None"},{"question":"Background Alice loves words and games. One of her favorite games is to transform one word into another word by changing, adding, or removing a single letter at a time. However, she is very peculiar about the intermediate steps of this transformation: each intermediate step must also be a valid word from a predefined dictionary. Let\'s help Alice by writing a function that finds the shortest transformation sequence from a given start word to an end word, following her rules. Function Signature: ```python def word_ladder(start: str, end: str, dictionary: set) -> int: pass ``` # Parameters - `start`: A string representing the start word. - `end`: A string representing the target word. - `dictionary`: A set of strings containing all valid intermediate words, including the start and end words. # Returns An integer representing the length of the shortest transformation sequence from `start` to `end` word. If no such sequence exists, return 0. # Constraints - The dictionary will contain at most 5,000 words. - All words, including `start` and `end`, will have the same length. - Words consist of lowercase English letters only. # Example Given the following parameters: ```python start = \\"hit\\" end = \\"cog\\" dictionary = {\\"hit\\", \\"hot\\", \\"dot\\", \\"dog\\", \\"cog\\", \\"log\\"} ``` The function should return `5` because the shortest transformation sequence is: ```plaintext hit -> hot -> dot -> dog -> cog ``` # Notes - If start is equal to end, the length of the sequence is considered 1 (as the transformation is complete with just the start word). - If the end word is not in the dictionary, return 0, since it\'s impossible to complete the transformation.","solution":"from collections import deque def word_ladder(start: str, end: str, dictionary: set) -> int: if end not in dictionary: return 0 if start == end: return 1 queue = deque([(start, 1)]) visited = set([start]) while queue: current_word, steps = queue.popleft() for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word == end: return steps + 1 if next_word in dictionary and next_word not in visited: visited.add(next_word) queue.append((next_word, steps + 1)) return 0"},{"question":"Write a function, `pair_vehicle`, that takes in a string representing the name of a person and returns the vehicle associated with that person. The following pairs of person and their respective vehicle should be included: * Bruce-Wayne\'s Batmobile * Tony-Iron Man\'s Armor * Peter-Spidey Buggy * Clark-Kryptonian Ship * Diana-Invisible Jet * Barry-Speedster\'s Car If the input does not match any of the known names, return `\\"Unknown person\\"`. For example: - `pair_vehicle(\\"Bruce\\")` should return `\\"Bruce-Wayne\'s Batmobile\\"` - `pair_vehicle(\\"Tony\\")` should return `\\"Tony-Iron Man\'s Armor\\"` - `pair_vehicle(\\"Steve\\")` should return `\\"Unknown person\\"`","solution":"def pair_vehicle(name): Returns the vehicle associated with the given name. If the name is not recognized, returns \\"Unknown person\\". vehicles = { \\"Bruce\\": \\"Bruce-Wayne\'s Batmobile\\", \\"Tony\\": \\"Tony-Iron Man\'s Armor\\", \\"Peter\\": \\"Peter-Spidey Buggy\\", \\"Clark\\": \\"Clark-Kryptonian Ship\\", \\"Diana\\": \\"Diana-Invisible Jet\\", \\"Barry\\": \\"Barry-Speedster\'s Car\\" } return vehicles.get(name, \\"Unknown person\\")"},{"question":"Emily is organizing a coding competition and wants to distribute unique T-shirts with sequential numbers to the participants. She needs to make sure that no two participants get T-shirts with the same number. Additionally, she has a list of numbers that are already taken by past participants, and she wants to start numbering the new T-shirts from 1, skipping any numbers that are already used. Write a program to determine the number printed on the T-shirt that each new participant will receive. -----Input----- The first line contains a single integer p (1 le p le 10^4) - the number of participants in this contest. The second line contains a single integer u (0 le u le 10^4) - the number of used T-shirt numbers. The third line contains u distinct integers x_1, x_2, ..., x_u (1 le x_i le 10^9) representing the used T-shirt numbers. -----Output----- Output p lines where the i-th line contains the number printed on the T-shirt that the i-th new participant will receive. -----Example----- Input 5 3 3 7 5 Output 1 2 4 6 8 -----Note----- In the example, there are 5 participants in the contest and 3 T-shirt numbers (3, 7, and 5) are already taken. The new participants will receive T-shirts numbered as follows: 1, 2, 4, 6, and 8.","solution":"def assign_tshirt_numbers(p, u, used_numbers): used_set = set(used_numbers) tshirt_numbers = [] current_number = 1 for _ in range(p): while current_number in used_set: current_number += 1 tshirt_numbers.append(current_number) current_number += 1 return tshirt_numbers"},{"question":"**The Cinema Seat Allocation Table** You are tasked with creating a class that simulates a cinema seat allocation system. The cinema has a specific number of rows and seats per row. Each seat can either be available or booked. The system should allow booking of available seats, checking the availability of a seat, and displaying the current seating layout. The layout of the cinema, when displayed, should show a grid where available seats are indicated by `O`, and booked seats are indicated by `X`. **Requirements:** - The class should be named `Cinema`. - The class should have a constructor that initializes the number of rows and seats per row. - Implement a method `book_seat(row, seat)` that books a specific seat if it is available, and returns `True`. If the seat is already booked, return `False`. - Implement a method `check_seat(row, seat)` that returns `True` if a seat is available, and `False` if it is booked. - Implement a method `display_layout()` that prints the current seating layout. **Example:** ```python cinema = Cinema(rows=5, seats_per_row=7) # Book some seats cinema.book_seat(1, 1) cinema.book_seat(2, 5) cinema.book_seat(4, 7) # Check if some seats are available print(cinema.check_seat(1, 1)) # False print(cinema.check_seat(3, 3)) # True # Display current seating layout cinema.display_layout() # The layout should display something like: # O O O O O O O # X O O O O O O # O O O O O X O # O O O O O O O # O O O O O O O ``` Construct the `Cinema` class to manage the seats according to the given requirements. Here are some constraints for reference: 1. The number of rows will be between 1 and 20. 2. The number of seats per row will be between 1 and 30. 3. All seats are initially available.","solution":"class Cinema: def __init__(self, rows, seats_per_row): Initializes the cinema with the given number of rows and seats per row. All seats are initially available (\'O\'). self.rows = rows self.seats_per_row = seats_per_row self.layout = [[\'O\' for _ in range(seats_per_row)] for _ in range(rows)] def book_seat(self, row, seat): Books a specific seat if it is available. Args: - row (int): The row number (1-indexed). - seat (int): The seat number (1-indexed). Returns: - bool: True if the booking was successful, False if the seat is already booked. if self.layout[row - 1][seat - 1] == \'O\': self.layout[row - 1][seat - 1] = \'X\' return True return False def check_seat(self, row, seat): Checks if a specific seat is available. Args: - row (int): The row number (1-indexed). - seat (int): The seat number (1-indexed). Returns: - bool: True if the seat is available, False if it is booked. return self.layout[row - 1][seat - 1] == \'O\' def display_layout(self): Displays the current seating layout. for row in self.layout: print(\\" \\".join(row))"},{"question":"Task Given an array of positive integers, determine if the elements of the array can be rearranged to form a sequence of consecutive numbers. # Example For ``` arr = [5, 4, 2, 3, 1] ``` the output should be `true`. For ``` arr = [1, 3, 4, 5] ``` the output should be `false`. # Input/Output - `[input]` integer array `arr` Constraints: `1 ≤ arr.length ≤ 10^5,` `1 ≤ arr[i] ≤ 10^9.` - `[output]` a boolean Return `true` if the array can be rearranged to form a sequence of consecutive numbers, otherwise return `false`.","solution":"def can_form_consecutive_sequence(arr): Determine if the elements of the array can be rearranged to form a sequence of consecutive numbers. :param arr: List of integers. :return: Boolean indicating if the elements can be rearranged to form a consecutive sequence. if not arr: return False min_val = min(arr) max_val = max(arr) # Check if the length of the range of values matches the length of the array return len(arr) == (max_val - min_val + 1)"},{"question":"Chef has been learning about palindromes in his free time. A palindrome is a string that reads the same forwards and backwards, ignoring spaces and capitalization. Chef wonders whether certain phrases are palindromes when considering only the alphabetic characters and ignoring spaces. You are given some phrases. For each phrase, you need to determine if it is a palindrome or not. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains a single string P denoting a phrase. -----Output----- For each test case, print a single line containing the string \\"Palindrome\\" or \\"Not a Palindrome\\" (without quotes). -----Constraints----- - 1 le T le 50 - 1 le |P| le 200 - Each character of P is either an uppercase letter, a lowercase letter, or a space. -----Subtasks----- Subtask #1 (100 points): original constraints -----Example Input----- 3 A Santa Lived As a Devil At NASA Hello World Eva Can I See Bees in a Cave -----Example Output----- Palindrome Not a Palindrome Palindrome -----Explanation----- Example case 1: When ignoring spaces and capitalization, the phrase \\"A Santa Lived As a Devil At NASA\\" becomes \\"asantalivedasadevilatnasa\\", which is a palindrome. Example case 2: \\"Hello World\\" becomes \\"helloworld\\", which is not a palindrome. Example case 3: \\"Eva Can I See Bees in a Cave\\" becomes \\"evacaniseebeesinacave\\", which is a palindrome.","solution":"def is_palindrome(phrase): Determines if a given phrase is a palindrome, ignoring spaces and capitalization. Parameters: phrase (str): The phrase to check. Returns: str: \\"Palindrome\\" if the phrase is a palindrome, otherwise \\"Not a Palindrome\\". # Keep only alphabetic characters and convert them to lowercase cleaned_phrase = \'\'.join(char.lower() for char in phrase if char.isalpha()) # Check if the cleaned phrase is a palindrome if cleaned_phrase == cleaned_phrase[::-1]: return \\"Palindrome\\" else: return \\"Not a Palindrome\\" def process_phrases(test_cases): Process each phrase to determine if it is a palindrome or not. Parameters: test_cases (list): A list of phrases (strings) to check. Returns: list: A list of results, where each result is either \\"Palindrome\\" or \\"Not a Palindrome\\". results = [] for phrase in test_cases: results.append(is_palindrome(phrase)) return results"},{"question":"**Task Description:** Given a list of integers, your task is to determine if the list can be modified such that each integer in the list is unique by incrementing any number of elements by 1. If feasible, return the list with all unique elements; otherwise, return \\"Not Possible\\". **Examples:** ```python make_unique([1, 2, 2, 3]) = [1, 2, 3, 4] make_unique([4, 4, 4, 4, 5, 5]) = [4, 5, 6, 7, 8, 9] make_unique([1, 2, 3]) = [1, 2, 3] make_unique([5, 5, 5, 4]) = [4, 5, 6, 7] make_unique([1, 1, 1, 1, 1]) = [1, 2, 3, 4, 5] ``` **Input Constraint:** - 1 ≤ len(list) ≤ 10^5 - Elements of the list are integers between -10^4 and 10^4 Good luck!","solution":"def make_unique(lst): Given a list of integers, determine if the list can be modified such that each integer is unique by incrementing any number of elements by 1. If feasible, return the list with all unique elements; otherwise, return \\"Not Possible\\". Parameters: lst (list): List of integers. Returns: list: A list with all unique integers or \\"Not Possible\\" if it\'s not feasible to make all elements unique. if not lst: return [] lst.sort() for i in range(1, len(lst)): if lst[i] <= lst[i - 1]: lst[i] = lst[i - 1] + 1 return lst"},{"question":"Design a function that will take in a string and a number \'n\' that will shift each character in the string forward by \'n\' positions in the alphabet (with wrapping around if necessary). Spaces should remain unchanged. Function Signature: `def caesar_cipher(s: str, n: int) -> str:` **Input:** - A string `s` containing only alphabetic characters and spaces (1 ≤ |s| ≤ 100). - An integer `n` (1 ≤ n ≤ 25). **Output:** - A new string with each letter shifted forward by \'n\' positions in the alphabet. **Example:** - For `s = \\"hello world\\"` and `n = 3`, the function should return `\\"khoor zruog\\"`.","solution":"def caesar_cipher(s: str, n: int) -> str: Shifts each alphabetic character in the string s forward by n positions in the alphabet. Non-alphabetic characters remain unchanged. result = [] for char in s: if char.isalpha(): shift = ord(\'A\') if char.isupper() else ord(\'a\') result.append(chr(shift + (ord(char) - shift + n) % 26)) else: result.append(char) return \\"\\".join(result)"},{"question":"Given an array of n integers nums, each element in the array appears twice except for one. Find that single one. Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? Example 1: Input: nums = [2,2,1] Output: 1 Example 2: Input: nums = [4,1,2,1,2] Output: 4 Note: Your algorithm should have a linear runtime complexity.","solution":"def single_number(nums): Finds the element that appears only once in the array. Args: nums: List[int] List of integers where every element appears twice except for one. Returns: int The single element that appears only once. result = 0 for num in nums: result ^= num return result"},{"question":"Task: Write a function that takes a string and determines whether it has all unique characters (i.e., no character is repeated) or not. The function should return `True` if all characters in the string are unique and `False` otherwise. Your solution must have a time complexity of O(n), where n is the length of the string. Example: ``` has_unique_chars(\\"abcdef\\") == True has_unique_chars(\\"aabbcc\\") == False has_unique_chars(\\"aA\\") == True has_unique_chars(\\"\\") == True ```","solution":"def has_unique_chars(s): Returns True if all characters in the string s are unique, False otherwise. char_set = set() for char in s: if char in char_set: return False char_set.add(char) return True"},{"question":"Write a function `letter_counts()` that takes in a string and returns a dictionary containing each letter from the string as keys and the number of times each letter appears in the string as values. Your function should ignore case (i.e., treat \'A\' and \'a\' as the same letter) and only consider alphabetic characters (ignore numbers, punctuation, etc.). For example, given the input string `\\"Hello, World!\\"`, the function should return `{\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1}`. Note that the punctuation and space are ignored, and \'H\' and \'h\' are treated as the same letter. Hints: - You might find the `str.lower()` and `str.isalpha()` methods useful. - You can iterate through each character in the string to build your dictionary. Here is a simple example to illustrate: ```python >>> letter_counts(\\"Programming is fun!\\") {\'p\': 1, \'r\': 2, \'o\': 1, \'g\': 2, \'a\': 1, \'m\': 2, \'i\': 2, \'n\': 2, \'s\': 1, \'f\': 1, \'u\': 1} ```","solution":"def letter_counts(s): Returns a dictionary containing each letter from the string as keys and the number of times each letter appears in the string as values. s = s.lower() # Convert to lowercase counts = {} for char in s: if char.isalpha(): # Only consider alphabetic characters if char in counts: counts[char] += 1 else: counts[char] = 1 return counts"},{"question":"You are given a function `calculate_area` in a coding library that takes as input the radius of a circle and returns the area of the circle. The function signature is as follows: ```python def calculate_area(radius: float) -> float: # Implementation here ``` You need to write a new function `diagnose` that takes a list of tuples where each tuple contains two values: the radius of a circle and the expected area. The `diagnose` function should return a list of booleans indicating whether the calculated area for each radius matches the expected area exactly up to 5 decimal places. The function signature should be: ```python def diagnose(test_cases: list[tuple[float, float]]) -> list[bool]: # Implementation here ``` # Example: ```python # Example Usage test_cases = [(1.0, 3.14159), (2.0, 12.56637), (0.5, 0.78540)] diagnose(test_cases) # Return [True, True, True] ``` # Note: - You can assume that the function `calculate_area` is already implemented and works correctly. - The result will be a list of boolean values where each boolean corresponds to whether the calculated area matched the expected area for the given radius. - Your solution should handle edge cases such as very small or very large radius values. # Constraints: - The input list `test_cases` may be empty, and in such cases, the function should return an empty list. - Radius values will be non-negative real numbers.","solution":"from math import pi def calculate_area(radius: float) -> float: Returns the area of the circle with the given radius. return pi * (radius ** 2) def diagnose(test_cases: list[tuple[float, float]]) -> list[bool]: Takes a list of tuples, where each tuple contains a radius and an expected area, and returns a list of booleans indicating if the calculated area matches the expected area up to 5 decimal places. results = [] for radius, expected_area in test_cases: calculated_area = calculate_area(radius) # Compare the calculated and expected area up to 5 decimal places results.append(round(calculated_area, 5) == round(expected_area, 5)) return results"},{"question":"Given an array of positive integers, you have to find the smallest positive integer that cannot be represented as the sum of any subset of the given array. For example, for the array [1, 2, 3, 8, 9, 10], the smallest positive integer that cannot be represented as the sum of any subset of the array is 7. Write a function that takes an array of positive integers and returns the smallest positive integer that cannot be represented as the sum of any subset of the given array. Example 1: Input: [1, 2, 3, 8, 9, 10] Output: 7 Example 2: Input: [1, 1, 1, 1] Output: 5 Example 3: Input: [1, 2, 5, 10, 20, 40] Output: 4 Example 4: Input: [1, 2, 3, 4, 5, 6] Output: 22 Note: - The input array will have at least one element.","solution":"def smallest_nonrepresentable_sum(arr): # Sort the array to process elements from smallest to largest arr.sort() res = 1 # Initialize result which is the smallest positive integer # Traverse the array and increment the result if arr[i] is smaller than or equal to res for num in arr: if num <= res: res += num else: break return res"},{"question":"Design a function `find_anagrams(word, candidates)` that takes a string `word` and a list of strings `candidates`. The function should return a list of all the strings from `candidates` that are anagrams of `word`. An anagram is a word formed by rearranging the letters of another, such as `\\"listen\\"` and `\\"silent\\"`. # Examples ```python find_anagrams(\\"listen\\", [\\"enlist\\", \\"google\\", \\"inlets\\", \\"banana\\"]) should return [\\"enlist\\", \\"inlets\\"] find_anagrams(\\"racecar\\", [\\"carrace\\", \\"arcacer\\", \\"rcaecar\\", \\"cat\\"]) should return [\\"carrace\\", \\"arcacer\\", \\"rcaecar\\"] find_anagrams(\\"hello\\", [\\"holle\\", \\"lhelo\\", \\"world\\", \\"ghello\\"]) should return [\\"holle\\", \\"lhelo\\"] ``` # Constraints - The input word will only contain lowercase alphabets. - The candidates will only contain lowercase alphabets and will be non-empty strings. # Notes - Your solution should have a reasonable time complexity. - You cannot use any external library for the implementation.","solution":"def find_anagrams(word, candidates): Returns a list of anagrams of the given word from the list of candidates. sorted_word = sorted(word) return [candidate for candidate in candidates if sorted(candidate) == sorted_word]"},{"question":"# Task Given a string `s` consisting of lowercase English letters, find the length of the longest substring without repeating characters. # Example For `s = \\"abcabcbb\\"`, the output should be `3` corresponding to substring `\\"abc\\"`. For `s = \\"bbbbb\\"`, the output should be `1` corresponding to substring `\\"b\\"`. For `s = \\"pwwkew\\"`, the output should be `3` corresponding to substring `\\"wke\\"`. # Input/Output - `[input]` string `s` Constraints: `0 ≤ s.length ≤ 1000` - `[output]` an integer","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. max_length = 0 start = 0 used_chars = {} for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 max_length = max(max_length, i - start + 1) used_chars[char] = i return max_length"},{"question":"Write a function that accepts a string which contains a sequence of words separated by spaces. The function should return the length of the shortest word(s) in the string. **Example:** ```python find_shortest_word_length(\\"simple example of a coding question\\") # should return 1 find_shortest_word_length(\\"another test with different words\\") # should return 4 ```","solution":"def find_shortest_word_length(s): Returns the length of the shortest word(s) in the string. Args: s (str): A string containing a sequence of words separated by spaces. Returns: int: The length of the shortest word in the string. words = s.split() if not words: return 0 return min(len(word) for word in words)"},{"question":"# Introduction Developers often work with datasets that contain multiple records, each of which needs to be processed and manipulated based on certain criteria. Given such a dataset, manipulate and process the records to generate the desired output while adhering to the constraints of the task. # Task Write a function that accepts two arguments: `records` and `condition`. `records` is a list of dictionaries where each dictionary represents a record with fields \'id\' (an integer) and \'value\' (a string). The `condition` is a string that contains a predicate for filtering these records. The function should return a sorted list of `value` fields from the records that satisfy the given condition. The records should be sorted by the \'id\' in ascending order. # Example: Given `records`: ```python records = [ {\'id\': 3, \'value\': \'apple\'}, {\'id\': 1, \'value\': \'banana\'}, {\'id\': 4, \'value\': \'cherry\'}, {\'id\': 2, \'value\': \'date\'} ] ``` And `condition`: ```python condition = \\"record[\'id\'] % 2 != 0\\" ``` The function should return: ``` [\'banana\', \'apple\', \'cherry\'] ``` # Function Signature: ```python def filter_and_sort_records(records, condition): # Your code here ``` # Additional notes: - Each `record` in the `records` list contains exactly two fields: \'id\' (an integer) and \'value\' (a string). - The `condition` is a string that, when evaluated, returns `True` for each `record` that meets the predicate. - Assume the `condition` string will always be syntactically correct and can be safely evaluated. - The records should be sorted first by the \'id\' in ascending order, then filtered based on the condition. - The `records` list will not be empty.","solution":"def filter_and_sort_records(records, condition): Filters and sorts records based on the given condition and \'id\' field. Parameters: - records (list of dict): A list of dictionaries where each dictionary represents a record with \'id\' and \'value\'. - condition (str): A string that contains a predicate for filtering records. Returns: - List[str]: A sorted list of \'value\' fields from the records that satisfy the given condition. # Sorting records based on \'id\' in ascending order sorted_records = sorted(records, key=lambda record: record[\'id\']) # Filtering sorted records based on the condition filtered_values = [record[\'value\'] for record in sorted_records if eval(condition)] return filtered_values"},{"question":"In a social network, there are N users, each identified by a unique user_id ranging from 1 to N. Users can follow each other, creating directional relationships. You are tasked with analyzing these relationships to find out the minimum number of users that need to be influenced directly or indirectly to spread a piece of information starting from a particular user. This analysis will help you understand the reachability of users within the network. # Constraints - 1 ≤ N ≤ 10^5 - 1 ≤ M ≤ 10^5 - 1 ≤ Q ≤ 10^5 - Each user_id is an integer between 1 and N. - The network is represented as a list of M directed edges where each edge (u, v) means user u follows user v. - A user can follow any number of users, including zero. - 1 ≤ s_i ≤ N for each query. # Input The input is given from Standard Input in the following format: ``` N M u_1 v_1 u_2 v_2 ... u_M v_M Q s_1 s_2 ... s_Q ``` # Output For each query, print a single integer on a new line, representing the minimum number of users that need to be influenced starting from user s_i to spread the information to as many users as possible, including the starting user. # Example Input ``` 6 5 1 2 2 3 3 4 4 5 5 6 3 1 2 6 ``` Output ``` 6 5 1 ``` # Explanation - For the first query, starting from user 1, you can reach all 6 users. - For the second query, starting from user 2, you can reach 5 users (2 to 6). - For the third query, starting from user 6, you can only reach user 6 itself.","solution":"def get_influence_count(N, M, edges, queries): from collections import defaultdict, deque def bfs(start, graph): visited = set() queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return len(visited) # Create graph from edges graph = defaultdict(list) for u, v in edges: graph[u].append(v) results = [] for s in queries: results.append(bfs(s, graph)) return results # Example usage: N = 6 M = 5 edges = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)] queries = [1, 2, 6] print(get_influence_count(N, M, edges, queries)) # Output should be [6, 5, 1]"},{"question":"Given a binary tree, return the sum of values of its deepest leaves. Example 1: Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8] Output: 15 Explanation: The deepest leaves are 7 and 8 with sum 7 + 8 = 15. Example 2: Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5] Output: 19 Explanation: The deepest leaves are 9, 1, 4, and 5 with sum 9 + 1 + 4 + 5 = 19. Constraints: - The number of nodes in the tree is in the range [1, 10^4]. - 1 <= Node.val <= 100","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def deepestLeavesSum(root): from collections import deque if not root: return 0 queue = deque([root]) while queue: level_sum = 0 level_size = len(queue) for _ in range(level_size): node = queue.popleft() level_sum += node.val if node.left: queue.append(node.left) if node.right: queue.append(node.right) return level_sum"},{"question":"In this problem, you will be given a list of integers, you need to find and print the sum of all integers that are divisible by 3 or 5 in the given list. -----Input----- The first line contains T, the number of test cases to follow. Each test case contains the following: the first line contains N, the number of integers in the list. The second line contains N integers separated by space. -----Output----- For each test case, print a single line containing the sum of all integers that are divisible by 3 or 5 in the provided list. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10000 - -100000 ≤ integer ≤ 100000 -----Example----- Input: 2 5 1 2 3 4 5 4 6 7 8 9 Output: 8 15","solution":"def sum_divisible_by_3_or_5(test_cases): results = [] for case in test_cases: N, numbers = case sum_result = sum(number for number in numbers if number % 3 == 0 or number % 5 == 0) results.append(sum_result) return results"},{"question":"=====Problem Statement===== You are given an array of integers representing the heights of buildings in a line. The city has decided to organize a \\"shadow festival\\" during the sunset, where shadows cast by the buildings are to be celebrated. A building casts a shadow on any taller building to its left. Your task is to determine how many buildings will be able to see the sunset without being in the shadow of any taller building to their left. =====Input Format===== The first line contains an integer N representing the number of buildings. The second line contains N space-separated integers representing the heights of the buildings. =====Constraints===== 1 ≤ N ≤ 1000 1 ≤ height of building ≤ 10^6 =====Output Format===== Print the number of buildings that will be able to see the sunset. =====Sample Input===== 5 3 7 8 3 6 =====Sample Output===== 3 =====Explanation===== Building 1 with height 3 can see the sunset as there is no building to its left. Building 2 with height 7 can see the sunset as there is no taller building to its left. Building 3 with height 8 can see the sunset as there is no taller building to its left. Building 4 with height 3 can\'t see the sunset as building 3 and building 2 are taller. Building 5 with height 6 can\'t see the sunset as building 3 and building 2 are taller. Thus, only Building 1, Building 2, and Building 3 can see the sunset, giving an output of 3.","solution":"def count_buildings_with_sunset_view(buildings): Given an array of integers representing the heights of buildings in a line, determine how many buildings will be able to see the sunset without being in the shadow of any taller building to their left. :param buildings: List[int] :return: int count = 0 max_height = 0 for height in buildings: if height > max_height: count += 1 max_height = height return count"},{"question":"You are tasked with implementing a feature for a library system to manage book borrowings. Your job is to determine how many books are overdue. There are M borrowing transactions, numbered 1 through M. For each valid i, the i-th transaction includes two pieces of information: the day a book was borrowed, B_i, and the day it was returned, R_i (both in days). Each book has a borrowing period of 14 days. Please determine how many books were returned late. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer M. - M lines follow. For each valid i, the i-th of these lines contains two space-separated integers B_i and R_i. -----Output----- For each test case, print a single line containing one integer — the number of transactions where the book was returned after the borrowing period of 14 days. -----Constraints----- - 1 le T le 100 - 1 le M le 100 - 1 le B_i le R_i le 365 for each valid i -----Example Input----- 1 4 5 20 10 25 15 18 20 35 -----Example Output----- 2 -----Explanation----- Example case 1: The borrowing periods for the respective transactions are: - Transaction 1: Borrowed on day 5 and returned on day 20; Duration is 15 days (overdue) - Transaction 2: Borrowed on day 10 and returned on day 25; Duration is 15 days (overdue) - Transaction 3: Borrowed on day 15 and returned on day 18; Duration is 3 days (not overdue) - Transaction 4: Borrowed on day 20 and returned on day 35; Duration is 15 days (overdue) Thus, 2 out of 4 transactions were overdue, so the answer is 2.","solution":"def count_overdue_books(test_cases): results = [] for transactions in test_cases: overdue_count = 0 for B, R in transactions: if R - B > 14: overdue_count += 1 results.append(overdue_count) return results def process_input(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): M = int(lines[index]) transactions = [] for i in range(M): B, R = map(int, lines[index + 1 + i].split()) transactions.append((B, R)) test_cases.append(transactions) index += M + 1 return test_cases"},{"question":"You are working on a text editor feature that tracks and displays the revisions made to a document. Each revision is represented by a string in the form \\"R#v#\\", where \\"R#\\" indicates the revision number and \\"v#\\" indicates the sub-revision number. For example, \\"R1v1\\" represents the first revision of the first revision, \\"R2v0\\" represents the second revision with no sub-revisions. Revisions can have multiple sub-revisions such as \\"R2v1\\", \\"R2v2\\", etc. There is no upper bound for the revision or sub-revision numbers. The revision numbers always increase sequentially from the initial revision \\"R1v0\\". Sub-revisions depend on their respective revision. The order of revisions and sub-revisions is crucial for maintaining the document\'s history accurately. Write a function `compare_revisions(revision1, revision2)` that takes in two revision strings and returns `-1`, `0`, or `1` to indicate whether `revision1` is before, the same as, or after `revision2` respectively. **Examples:** ``` compare_revisions(\\"R1v2\\", \\"R1v1\\") --> 1 compare_revisions(\\"R2v0\\", \\"R2v1\\") --> -1 compare_revisions(\\"R3v4\\", \\"R3v4\\") --> 0 compare_revisions(\\"R4v0\\", \\"R3v5\\") --> 1 compare_revisions(\\"R10v2\\", \\"R10v1\\") --> 1 ``` **Constraints:** - Input strings are non-empty and follow the format \\"R#[v#]\\", where `#` is a non-negative integer. - Each part of the revision (R#, v#) can have leading zeros, e.g., \\"R01v002\\".","solution":"def compare_revisions(revision1, revision2): Compares two revision strings and returns: -1 if revision1 is before revision2, 0 if they are the same, 1 if revision1 is after revision2. # Split the revisions into their respective parts revision1_parts = revision1.split(\'v\') revision2_parts = revision2.split(\'v\') # Extract the main revision and sub-revision numbers main_revision1 = int(revision1_parts[0][1:]) main_revision2 = int(revision2_parts[0][1:]) sub_revision1 = int(revision1_parts[1]) sub_revision2 = int(revision2_parts[1]) # Compare main revisions if main_revision1 < main_revision2: return -1 elif main_revision1 > main_revision2: return 1 else: # Compare sub-revisions if sub_revision1 < sub_revision2: return -1 elif sub_revision1 > sub_revision2: return 1 else: return 0"},{"question":"Given a non-empty array of integers, return the length of the longest subsequence that forms an arithmetic progression. An arithmetic progression is a sequence of numbers in which the difference between any two consecutive numbers is the same. Formally, the function should: Return the length of the longest arithmetic subsequence in the array. Examples: Given [3, 6, 9, 12], return 4. Given [9, 4, 7, 2, 10], return 3. Given [20, 1, 15, 3, 10, 5, 8], return 4. Note: - The array length can be up to 1000 elements. - The array values are between -10,000 and 10,000. Your algorithm should run in O(n^2) time complexity and use O(n) additional space.","solution":"def longest_arith_seq_length(A): if not A: return 0 n = len(A) if n == 1: return 1 # Create a dictionary to store the length of arithmetic sequences. # dp[i][d] means the length of arithmetic subsequence ending with A[i] and common difference d dp = [{} for _ in range(n)] max_length = 0 for i in range(n): for j in range(i): diff = A[i] - A[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"Maria is a data analyst and she needs your help to process a sequence of operations on a list of integers. Each operation can either add a new integer to the list, remove an integer from the list, or find the maximum integer in the current list. You need to implement a solution to assist her. -----Input Format:------ - The first line of input contains an integer q, the number of operations. - The next q lines contain the operations. Each operation is one of the following: - \\"+ x\\": Add the integer x to the list. - \\"- y\\": Remove the integer y from the list. If y is not in the list, ignore the operation. - \\"?\\": Output the maximum integer in the list. If the list is empty, output \\"EMPTY\\". -----Output Format:----- - For each \\"?\\" operation, output either the maximum integer in the list or \\"EMPTY\\" if the list is empty. -----Constraints:------ - 1 leq q leq 10^{5} - -10^9 leq x, y leq 10^9 -----Sample Test Case:------ -----Example 1:----- 6 + 5 ? + 3 - 5 ? - 3 -----Output :----- 5 3 EMPTY -----Explanation----- The sequence of operations is as follows: 1. Add 5 to the list. List: [5] 2. Find the maximum. The maximum is 5. 3. Add 3 to the list. List: [5, 3] 4. Remove 5 from the list. List: [3] 5. Find the maximum. The maximum is 3. 6. Remove 3 from the list. List: [] After the last operation, the list is empty, so the next \\"?\\" operation will output \\"EMPTY\\".","solution":"def process_operations(operations): Processes a sequence of operations on a list of integers and returns the results of \\"?\\" operations. result = [] data = [] for operation in operations: if operation.startswith(\\"+\\"): _, x = operation.split() data.append(int(x)) elif operation.startswith(\\"-\\"): _, y = operation.split() try: data.remove(int(y)) except ValueError: # ignore exception if y is not in the list pass elif operation.startswith(\\"?\\"): if data: result.append(max(data)) else: result.append(\\"EMPTY\\") return result"},{"question":"Write a function that takes an integer n and returns a string representation of the first n terms of the look-and-say sequence. The look-and-say sequence is a series of numbers where each number is derived from a description of the digits of the term before. The first term is always \\"1\\". The second term is obtained by reading the first term: \\"one 1\\" or \\"11\\". The third term is obtained by reading the second term: \\"two 1s\\" or \\"21\\". The sequence thus starts with \\"1\\", \\"11\\", \\"21\\", \\"1211\\", \\"111221\\", and so on. Your task is to implement the function `look_and_say(n)`, which returns a string of the first n terms of the look-and-say sequence, separated by commas. # Examples: ``` look_and_say(1) => \\"1\\" look_and_say(2) => \\"1, 11\\" look_and_say(3) => \\"1, 11, 21\\" look_and_say(5) => \\"1, 11, 21, 1211, 111221\\" ``` # Method Signature: ```python def look_and_say(n: int) -> str: ``` ```Fsharp let lookAndSay (n: int) : string ``` # Constraints: - n will be a positive integer and will not exceed 30. - The function should handle edge cases gracefully, such as invalid inputs (which should return an empty string). Begin with creating helper functions if necessary to manage the core logic of generating the sequence. Ensure to include adequate testing for your function to validate correctness.","solution":"def next_term(term): Generates the next term in the look-and-say sequence given the current term. Args: term (str): the current term of the sequence. Returns: str: the next term of the sequence. result = [] i = 0 while i < len(term): count = 1 while i + 1 < len(term) and term[i] == term[i + 1]: i += 1 count += 1 result.append(f\\"{count}{term[i]}\\") i += 1 return \'\'.join(result) def look_and_say(n): Returns the first n terms of the look-and-say sequence as a comma-separated string. Args: n (int): the number of terms to generate. Returns: str: the first n terms of the look-and-say sequence. if not isinstance(n, int) or n <= 0: return \\"\\" terms = [\\"1\\"] for _ in range(1, n): terms.append(next_term(terms[-1])) return \', \'.join(terms)"},{"question":"Task Write a function that takes a list of integers and returns a string denoting the number of times each unique element appears in the list in descending order of frequency. Each unique integer and its frequency should be formatted as `int:frequency` and should be separated by a comma. # Example ```python # input [1, 2, 2, 3, 3, 3, 4] # output \\"3:3,2:2,1:1,4:1\\" ``` # Examples ```python count_frequencies([5, 5, 4, 6, 4]) -> \\"4:2,5:2,6:1\\" count_frequencies([9, 8, 8, 8, 7, 7, 2]) -> \\"8:3,7:2,2:1,9:1\\" count_frequencies([1, 2, 3]) -> \\"1:1,2:1,3:1\\" ```","solution":"from collections import Counter def count_frequencies(lst): Returns a string denoting the number of times each unique element appears in the list in descending order of frequency. # Count the frequency of each element in the list counts = Counter(lst) # Sort the items by frequency in descending order, then by the element value sorted_items = sorted(counts.items(), key=lambda item: (-item[1], item[0])) # Create the result string result = \\",\\".join(f\\"{elem}:{count}\\" for elem, count in sorted_items) return result"},{"question":"In a library system, each book has a unique code assigned to it in the format of `LIB-xxxx-yyyy`, where `xxxx` represents the book category (a 4-digit number) and `yyyy` represents the individual book identifier within that category (a 4-digit number). Write a function that **accepts a list of book codes and returns a dictionary mapping each category to a list of its book identifiers**. If a book code is not in the valid format, it should be ignored. The returned dictionary should have the category as the key and a list of book identifiers sorted in ascending order as the value. Example input: ```python [\\"LIB-1234-5678\\", \\"LIB-1111-2222\\", \\"INVALID-CODE\\", \\"LIB-1234-1234\\"] ``` Expected output: ```python { \\"1234\\": [1234, 5678], \\"1111\\": [2222] } ```","solution":"import re def categorize_books(book_codes): Categorizes book codes into a dictionary where the key is the category and the value is a list of sorted book identifiers for that category. :param book_codes: List of book codes :type book_codes: list :return: Dictionary mapping each category to a list of sorted book identifiers :rtype: dict book_dict = {} pattern = re.compile(r\\"LIB-(d{4})-(d{4})\\") for book_code in book_codes: match = pattern.match(book_code) if match: category, book_id = match.groups() if category not in book_dict: book_dict[category] = [] book_dict[category].append(int(book_id)) # Sort each list of book identifiers for category in book_dict: book_dict[category].sort() return book_dict"},{"question":"# Introduction In the animal kingdom, different species have different scores based on their characteristics. Given a string representing a sequence of animals, we need to determine which class of animals has the higher score. # Task Write a function that accepts a `zoo` string consisting of only small letters where each letter represents a type of animal. Return which class of animals has the higher score. If the mammals have a higher score, return `Mammals win!`, if the birds have a higher score, return `Birds win!`, otherwise return `It\'s a tie!`. The scoring system for each animal type is as follows: ``` Mammals: - a - 5 - b - 4 - c - 3 - d - 2 - e - 1 ``` ``` Birds: - x - 5 - y - 4 - z - 3 - t - 2 - u - 1 ``` Other letters represent animals that do not contribute to the score and should be ignored. # Example ```python def animal_fight(zoo): # Your code here # Example usage: # Input: \\"abcxyz\\" # Mammals score: 5 (a) + 4 (b) + 3 (c) = 12 # Birds score: 5 (x) + 4 (y) + 3 (z) = 12 # Output: \\"It\'s a tie!\\" ```","solution":"def animal_fight(zoo): Given a string representing a sequence of animals, determine which class of animals has the higher score based on predefined scores for mammals and birds. Args: zoo (str): The input string representing the sequence of animals. Returns: str: \'Mammals win!\' if mammals have a higher score, \'Birds win!\' if birds have a higher score, otherwise \'It\'s a tie!\'. mammal_scores = {\'a\': 5, \'b\': 4, \'c\': 3, \'d\': 2, \'e\': 1} bird_scores = {\'x\': 5, \'y\': 4, \'z\': 3, \'t\': 2, \'u\': 1} mammal_total = 0 bird_total = 0 for char in zoo: if char in mammal_scores: mammal_total += mammal_scores[char] elif char in bird_scores: bird_total += bird_scores[char] if mammal_total > bird_total: return \'Mammals win!\' elif bird_total > mammal_total: return \'Birds win!\' else: return \\"It\'s a tie!\\""},{"question":"Given a list of integers, your task is to find and return the longest subarray where the absolute difference between any two elements is less than or equal to a specified integer, `k`. **Input**: - A list of integers `arr`. - An integer `k` representing the maximum allowed absolute difference between any two elements in the subarray. **Output**: - An integer representing the length of the longest subarray that meets the condition. # Example Given the input list `arr = [1, 3, 2, 4, 5]` and `k = 2`, the output should be `3` because the longest subarray where the absolute difference between any two elements is less than or equal to 2 is `[1, 3, 2]`. # Constraints - The length of `arr` will be between 1 and 1000. - The value of each element in `arr` will be between -1000 and 1000. - The value of `k` will be a non-negative integer less than or equal to 1000. # Function Signature ```python def longest_subarray_with_limited_diff(arr: List[int], k: int) -> int: # Your code here ```","solution":"from typing import List def longest_subarray_with_limited_diff(arr: List[int], k: int) -> int: Find the length of the longest subarray such that the absolute difference between any two elements is less than or equal to k. longest_length = 0 left = 0 for right in range(len(arr)): while max(arr[left:right+1]) - min(arr[left:right+1]) > k: left += 1 longest_length = max(longest_length, right - left + 1) return longest_length"},{"question":"You are given an array a consisting of n integers numbered from 1 to n. Let\'s define the k-interesting subsegments of the array as the subsegments of length k that consist of all distinct elements. The task is to count, for each k from 1 to n, the number of k-interesting subsegments within the array a. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 le n le 3 cdot 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le n) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 3 cdot 10^5. -----Output----- For each test case print n integers, where the i-th integer is equal to the number of i-interesting subsegments of the array. -----Example----- Input 2 5 1 2 3 4 5 4 1 2 2 1 Output 5 4 3 2 1 4 2 0 0","solution":"def count_interesting_subsegments(t, test_cases): results = [] for n, arr in test_cases: result = [] for k in range(1, n + 1): segment_set = set() count = 0 for i in range(n - k + 1): segment = tuple(arr[i:i + k]) if len(segment) == len(set(segment)): count += 1 result.append(count) results.append(result) return results # Example usage t = 2 test_cases = [ (5, [1, 2, 3, 4, 5]), (4, [1, 2, 2, 1]), ] print(count_interesting_subsegments(t, test_cases)) # Expected Output: [[5, 4, 3, 2, 1], [4, 2, 0, 0]]"},{"question":"# Story In a mystical forest, there are enchanted trees that change their height daily. The forest ranger has to record the daily height of each tree. This helps in understanding the growth pattern over a period of time. You have the daily heights for a few trees over the same number of days. # Kata Task Determine which tree(s) has shown the highest growth over the recorded period. Input Notes * The input will be a list of lists, where each list represents the daily height of a single tree. * Each sublist will have at least two integers (representing the height of the tree on each day). * The number of trees can range from 1 to 10. * The number of days can range from 2 to 15. Output Notes * Return the 1-based index of the tree(s) with the highest growth. If multiple trees have the same highest growth, return their indices in ascending order. * Growth is calculated as the difference between the final day\'s height and the initial day\'s height. # Examples Example 1: Input: [[3, 4, 6, 8], [2, 3, 5, 7]] Output: [1] Explanation: Tree 1 grows from 3 to 8 (growth of 5), and Tree 2 grows from 2 to 7 (growth of 5). As both have the same growth, return [1]. Example 2: Input: [[1, 3, 5], [2, 2, 5]] Output: [1] Explanation: Tree 1 grows from 1 to 5 (growth of 4), and Tree 2 grows from 2 to 5 (growth of 3). Therefore, output [1]. Example 3: Input: [[3, 5, 9], [1, 4, 7], [10, 20, 30]] Output: [3] Explanation: Tree 1 grows from 3 to 9 (growth of 6), Tree 2 grows from 1 to 7 (growth of 6), and Tree 3 grows from 10 to 30 (growth of 20). Therefore, output [3].","solution":"def highest_growth_trees(data): Determine which tree(s) has shown the highest growth over the recorded period. Parameters: data (list of list of int): Heights of each tree over a number of days Returns: list of int: 1-based index of the tree(s) with the highest growth growths = [] for i, tree in enumerate(data): growth = tree[-1] - tree[0] growths.append((i + 1, growth)) max_growth = max(growths, key=lambda x: x[1])[1] return [index for index, growth in growths if growth == max_growth]"},{"question":"You are given a string consisting of lowercase English letters and an integer k. You need to transform the string by rearranging its characters so that no two adjacent characters are the same. If such a reorganization is possible, return any possible rearrangement. If it is not possible, return an empty string. Example 1: Input: \\"aabb\\", 2 Output: \\"abab\\" Example 2: Input: \\"aaabc\\", 3 Output: \\"\\" Note: - The input string will have length in the range [1, 100]. - The integer k will be in the range [1, 26].","solution":"from collections import Counter import heapq def rearrange_string(s, k): if k == 0: return s count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) # To store the result result = [] # Queue to keep the k elements wait_queue = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # Append current char with reduced frequency to wait queue wait_queue.append((char, freq + 1)) if len(wait_queue) < k: continue # Release character from queue if it has finished waiting time released_char, released_freq = wait_queue.pop(0) if released_freq < 0: heapq.heappush(max_heap, (released_freq, released_char)) return \'\'.join(result) if len(result) == len(s) else \\"\\""},{"question":"A new messaging app is being developed, and the developers want to implement a feature that suggests the shortest possible unique username based on a user\'s first name. Assume all first names are in lowercase and consist of alphabetic characters only. If the exact name is not taken, suggest the name itself. If the name is already taken, append the smallest possible positive integer to the name to make it unique. Write a function to generate the suggested username. The function should take as input a list of usernames that are already taken and a new user\'s first name and output the suggested username. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - For each test case, the first line contains an integer N denoting the number of usernames that are already taken. - The second line contains N space-separated strings representing the usernames that are already taken. - The third line contains a single string representing the new user\'s first name. -----Output----- For each test case, output a single suggested username. -----Constraints----- - 1 le T le 100 - 1 le N le 1000 - Length of each username is between 1 and 100 characters - The new user\'s first name has a length between 1 and 100 characters -----Example Input----- 2 3 john john1 john2 john 2 alice alice1 alice -----Example Output----- john3 alice2 -----Explanation----- Example case 1: The names \\"john\\", \\"john1\\", and \\"john2\\" are already taken, so the suggested username is \\"john3\\". Example case 2: The names \\"alice\\" and \\"alice1\\" are already taken, so the suggested username is \\"alice2\\".","solution":"def suggest_username(taken_usernames, new_first_name): Suggest a unique username based on the new user\'s first name. Parameters: - taken_usernames: List of strings representing already taken usernames. - new_first_name: String representing the new user\'s first name. Returns: - A string representing the suggested unique username. if new_first_name not in taken_usernames: return new_first_name i = 1 while f\\"{new_first_name}{i}\\" in taken_usernames: i += 1 return f\\"{new_first_name}{i}\\" def process_test_cases(T, cases): results = [] for case in cases: N, taken, new_name = case result = suggest_username(taken, new_name) results.append(result) return results"},{"question":"Remove Duplicates - Data Cleanup #14 Charles has been working with massive datasets lately, and he\'s stumbled upon a common problem – duplicate entries! He needs your help to clean up his data by removing duplicates. Task Write a function called `remove_duplicates` that takes a list of integers and returns a new list with all the duplicates removed. The order of elements in the returned list should correspond to their first occurrence in the input list. Detailed Requirements - The input is a list of integers, `lst`. - The output should be a list containing only the unique elements from `lst`, in the same order as their first appearance. Example ```python remove_duplicates([1, 2, 3, 2, 4, 1, 5, 3]) # returns [1, 2, 3, 4, 5] remove_duplicates([6, 7, 7, 6, 8, 9, 9, 9, 10]) # returns [6, 7, 8, 9, 10] remove_duplicates([]) # returns [] ``` Notes - The elements in the input list will be integers and can be both positive and negative. - If the input list is empty, the function should return an empty list. - Aim for a solution with a time complexity of O(n). Function Signature ```python def remove_duplicates(lst: List[int]) -> List[int]: # Your code here ```","solution":"def remove_duplicates(lst): Removes duplicate integers from the list while preserving the order of their first occurrences. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"You are developing a game where a player\'s character can move across a grid. The grid is represented by an N times M matrix filled with integers, where each integer represents a specific terrain type. The player character\'s movement is restricted to cells with the same terrain type as the current cell. Starting from a given position, the player can move to any of the adjacent cells (up, down, left, right) that have the same terrain type. You need to compute the largest contiguous region on the grid that the player can traverse starting from any cell. -----Input----- - The first line of the input contains two integers N and M (1 ≤ N, M ≤ 1000), representing the number of rows and columns of the grid respectively. - Each of the next N lines contains M integers. Each integer represents the terrain type of the cell, where 0 le text{terrain type} le 1000. -----Output----- - Print a single integer, the size of the largest contiguous region that the player can traverse starting from any cell. -----Constraints----- - 1 ≤ N, M ≤ 1000 - Grid elements (terrain types) are integers between 0 and 1000 (inclusive). -----Example Input----- 4 5 1 1 2 3 4 1 5 2 2 3 4 1 1 2 2 1 4 4 4 4 -----Example Output----- 5 -----Explanation----- In the example, the largest contiguous region with the same terrain type is the region consisting of five cells with terrain type 4 (at positions (3,4), (3,5), (4,2), (4,3), and (4,4)).","solution":"def largest_contiguous_region(N, M, grid): def dfs(x, y, terrain_type): stack = [(x, y)] size = 0 while stack: cx, cy = stack.pop() if 0 <= cx < N and 0 <= cy < M and grid[cx][cy] == terrain_type: grid[cx][cy] = -1 # mark as visited size += 1 # add neighboring cells stack.append((cx+1, cy)) stack.append((cx-1, cy)) stack.append((cx, cy+1)) stack.append((cx, cy-1)) return size max_region_size = 0 for i in range(N): for j in range(M): if grid[i][j] != -1: region_size = dfs(i, j, grid[i][j]) max_region_size = max(max_region_size, region_size) return max_region_size # Example Usage if __name__ == \\"__main__\\": N = 4 M = 5 grid = [ [1, 1, 2, 3, 4], [1, 5, 2, 2, 3], [4, 1, 1, 2, 2], [1, 4, 4, 4, 4], ] print(largest_contiguous_region(N, M, grid)) # Output: 5"},{"question":"A painter is given N horizontal boards of varying lengths. The painter needs to paint each board sequentially from left to right. The painter can paint a board of length L in exactly L minutes. The painter can opt to take a break of B minutes after completing each board, but the break between the last board and any subsequent board does not count. You need to compute the total time the painter will take to paint all N boards, including both painting and optional breaks. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines of input: - First line contains N and B, separated by a space. - Second line contains N space-separated integers, L1, L2, ..., LN representing the lengths of the boards. -----Output:----- For each test case, output in a single line the total time taken to paint all N boards, including breaks. -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq L_i leq 10^3 - 1 leq B leq 10^3 -----Sample Input:----- 2 3 5 2 3 4 2 10 6 7 -----Sample Output:----- 19 23 -----EXPLANATION:----- For the first test case: - Time to paint first board: 2 minutes - Break after first board: 5 minutes - Time to paint second board: 3 minutes - Break after second board: 5 minutes - Time to paint third board: 4 minutes - Total time: 2 + 5 + 3 + 5 + 4 = 19 minutes For the second test case: - Time to paint first board: 6 minutes - Break after first board: 10 minutes - Time to paint second board: 7 minutes - Total time: 6 + 10 + 7 = 23 minutes","solution":"def total_painting_time(T, test_cases): Computes the total time the painter will take to paint all boards including breaks. Arguments: T : int : Number of test cases test_cases : list : A list of tuples, each containing: - (N, B) : tuple : N is the number of boards, B is the break time in minutes - lengths : list : A list of integers representing the lengths of the boards Returns: list : Total time for each test case results = [] for i in range(T): (N, B), lengths = test_cases[i] total_time = sum(lengths) + (N - 1) * B results.append(total_time) return results"},{"question":"-----Problem Statement----- A non-palindromic number is a number that does not read the same backward as forward. In this problem, you are given a positive integer K. Your task is to find out whether it is possible to create a string that is a non-palindromic representation of K in base B, for any B (2 ≤ B ≤ 10). -----Input----- The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. Each test case consists of exactly one line containing an integer K. -----Constraints----- - 1 ≤ T ≤ 100000 (10^5) - 1 ≤ K ≤ 10000 (10^4) -----Output----- For each test case, output \\"YES\\" if it is possible to represent K as a non-palindromic number in any base B (2 ≤ B ≤ 10). Otherwise, output \\"NO\\". -----Example----- Input: 3 13 7 19 Output: YES NO YES -----Explanation----- Case #1: The number 13 in base 3 is \\"111\\", which is palindromic. But in base 4, it is \\"31\\", which is non-palindromic. Case #2: The number 7 in any base from 2 to 10 is always \\"111\\", which is palindromic. Case #3: The number 19 in base 3 is \\"201\\", which is non-palindromic.","solution":"def is_non_palindromic_in_any_base(k): Check if the integer k can be represented as a non-palindromic number in any base B (2 ≤ B ≤ 10). # A function to convert the number `n` to a string in base `b` def to_base(n, b): result = [] while n > 0: result.append(str(n % b)) n //= b return \'\'.join(result[::-1]) if k == 7: return \\"NO\\" # as 7 is palindromic in any base from 2 to 10 # Check for bases from 2 to 10 for base in range(2, 11): representation = to_base(k, base) if representation != representation[::-1]: return \\"YES\\" return \\"NO\\" def solve(t, numbers): Solve for t test cases whether each number can be represented as a non-palindromic number in any base between 2 and 10. results = [] for k in numbers: results.append(is_non_palindromic_in_any_base(k)) return results"},{"question":"You are given a string `pattern` and another string `words`. The `pattern` string consists of only lowercase alphabets, and the `words` string is a space-separated list of words. Your task is to determine if the `words` string follows the same pattern as the `pattern` string. Specifically, there should be a bijection between the characters in `pattern` and the words in `words`. Example 1: Input: pattern = \\"abba\\" words = \\"dog cat cat dog\\" Output: true Explanation: \\"dog\\" maps to \'a\', \\"cat\\" maps to \'b\', and the `words` string follows the same pattern as the `pattern` string. Example 2: Input: pattern = \\"abba\\" words = \\"dog cat cat fish\\" Output: false Explanation: \\"dog\\" maps to \'a\', \\"cat\\" maps to \'b\', but \\"fish\\" does not map correctly to the `pattern` string. Example 3: Input: pattern = \\"aaaa\\" words = \\"dog dog dog dog\\" Output: true Explanation: \\"dog\\" consistently maps to \'a\'. Example 4: Input: pattern = \\"abba\\" words = \\"dog dog dog dog\\" Output: false Explanation: \\"dog\\" maps to both \'a\' and \'b\', which violates the bijection constraint. The function signature should be `def wordPattern(pattern: str, words: str) -> bool:`. Note that the length of `pattern` should be equal to the number of words in `words`. The length of `pattern` and `words` will not exceed 1000.","solution":"def wordPattern(pattern: str, words: str) -> bool: word_list = words.split() if len(pattern) != len(word_list): return False pattern_to_word = {} word_to_pattern = {} for p, w in zip(pattern, word_list): if p not in pattern_to_word: if w in word_to_pattern: return False pattern_to_word[p] = w word_to_pattern[w] = p elif pattern_to_word[p] != w: return False return True"},{"question":"Alice is a passionate baker, and every weekend she bakes a different type of cake. She has a special recipe book in which she writes down the time required to bake each type of cake. In her excitement, Alice decides to bake multiple cakes in a day and wonders how much total baking time she will need, considering she can only bake one cake at a time. The recipe book contains N cakes, each with a specific baking time. Given the recipes and the time required for each cake, help Alice find the total baking time for each of her weekend baking plans. Alice can create multiple baking plans and needs the total baking time for every plan. -----Input----- The first line of the input contains an integer T, the number of baking plans. The description of each of the T baking plans follows. For each baking plan: - The first line contains an integer M representing the number of different cakes Alice plans to bake. - The second line contains M space-separated integers denoting the baking times of the cakes in the current plan. -----Output----- For each baking plan, output a single line containing the total baking time required for the cakes in that plan. -----Constraints----- 1 ≤ T ≤ 100 1 ≤ M ≤ 50 1 ≤ BakingTimei ≤ 200 -----Example----- Input: 3 4 45 30 60 20 5 10 20 30 40 50 3 25 25 25 Output: 155 150 75 -----Explanation----- In the example test there are T=3 baking plans. Test case 1 Alice plans to bake 4 cakes with baking times {45, 30, 60, 20}. The total baking time required is 45 + 30 + 60 + 20 = 155. Test case 2 Alice plans to bake 5 cakes with baking times {10, 20, 30, 40, 50}. The total baking time required is 10 + 20 + 30 + 40 + 50 = 150. Test case 3 Alice plans to bake 3 cakes with baking times {25, 25, 25}. The total baking time required is 25 + 25 + 25 = 75.","solution":"def total_baking_time(plans): Returns the total baking times for each of the given baking plans. Parameters: plans (list of tuples): A list where each tuple contains an integer and a list of integers. The integer is the number of cakes for that plan, and the list contains the baking times of the cakes. Returns: list: A list containing the total baking time for each plan. total_times = [] for plan in plans: M, times = plan total_times.append(sum(times)) return total_times"},{"question":"Write a function ```python def expand_range(numbers): ``` that takes in a string `numbers` representing a range of numbers and returns a list of all the numbers expanded out. The string includes integers separated by commas, and ranges represented as start and end values separated by a dash. ```python expand_range(\\"1-3,5,7-9\\") == [1, 2, 3, 5, 7, 8, 9] expand_range(\\"10-12,15,18-20\\") == [10, 11, 12, 15, 18, 19, 20] expand_range(\\"4,6-8,10\\") == [4, 6, 7, 8, 10] ``` Handle cases where the input string is empty and return an empty list for such cases.","solution":"def expand_range(numbers): Takes a string representation of a range of numbers and returns a list of all the numbers expanded out. Parameters: numbers (str): A string with numbers and ranges separated by commas, for example: \\"1-3,5,7-9\\" Returns: list: A list of all the numbers expanded out if not numbers: return [] result = [] for part in numbers.split(\',\'): if \'-\' in part: start, end = map(int, part.split(\'-\')) result.extend(range(start, end + 1)) else: result.append(int(part)) return result"},{"question":"The organizer of a sports event wants to create a leaderboard system to display the rankings of participants based on their scores. You are tasked with writing a program to generate the leaderboard. -----Input:----- - The first line contains an integer N, the number of participants. - Each of the next N lines contains a participant\'s name and score separated by a space. -----Output:----- For each test case, output the participants\' names in descending order of their scores. If two participants have the same score, order their names lexicographically. -----Constraints----- - 1 leq N leq 100 - Each participant\'s name is a non-empty string that contains only alphabetic characters and has at most 100 characters. - Each score is an integer between 0 and 1000 inclusive. -----Sample Input:----- 5 Alice 50 Bob 75 Charlie 75 Dave 60 Eve 90 -----Sample Output:----- Eve Bob Charlie Dave Alice","solution":"def generate_leaderboard(participants): participants.sort(key=lambda x: (-x[1], x[0])) return [participant[0] for participant in participants] def read_input(input_lines): n = int(input_lines[0].strip()) participants = [] for i in range(1, n + 1): data = input_lines[i].strip().split() name = data[0] score = int(data[1]) participants.append((name, score)) return participants def main(input_lines): participants = read_input(input_lines) return generate_leaderboard(participants)"},{"question":"Alice is playing a card game with her friend Bob. In this game, they draw cards from a deck containing integers between 1 and Q inclusive. Each card has a value, and let\'s denote the values of the drawn cards by Alice as a and by Bob as b. The score Alice gets from these draws is calculated by the formula: ((a times b) + (a + b)) mod Q. Alice wants to achieve the highest possible score with the drawn cards. Denote this maximum possible score by S. Your task is to determine the number of ways to choose the pair (a, b) that results in Alice scoring exactly S. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains a single integer Q. -----Output----- For each test case, print a single line containing one integer — the number of ways to obtain the maximum score. -----Constraints----- - 1 le T le 10^5 - 1 le Q le 10^5 -----Example Input----- 3 5 7 2 -----Example Output----- 5 7 2 -----Explanation----- Example case 1: Alice\'s maximum possible score is S = 4. All possible values of (a, b) such that the score is 4 are (4, 1), (1, 4), (2, 3), (3, 2), (3, 3). Therefore, there are 5 ways to get the maximum score of 4.","solution":"def max_score_ways(Q): return Q"},{"question":"=====Problem Statement===== You are given a string `s` of length n consisting of lowercase English letters. You need to determine if the string can be rearranged to form a palindrome. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Note: A palindrome is a string that reads the same backward as forward, e.g., \\"radar\\", \\"level\\". =====Constraints===== 1 ≤ n ≤ 10^6 =====Input Format===== The first line contains a string `s`. =====Output Format===== Output \\"YES\\" if the string can be rearranged to form a palindrome, otherwise output \\"NO\\".","solution":"from collections import Counter def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\". # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd frequency if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a list of integers, identify and return a new list containing only the prime numbers from the original list. Prime numbers are numbers greater than 1 that have no divisors other than 1 and themselves. Implement the function `extract_primes(numbers: List[int]) -> List[int]` that takes a list of integers as input and returns a list of prime numbers. Happy Coding!","solution":"from typing import List def is_prime(n: int) -> bool: Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def extract_primes(numbers: List[int]) -> List[int]: Function to extract prime numbers from a list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"**Task** A team of developers is tasked with creating a unique identifier for their newly launched mobile application users. The identifier must be a palindrome. The team wants to find how many palindromic substrings can be generated from a given username to ensure uniqueness. Given a string `s`, your task is to count how many palindromic substrings are contained in the string. A string is a palindrome, if it reads the same both forward and backward. **Example** For `s = \\"abba\\"`, the output should be `6`. Explanation: The 6 palindromic substrings are: - \\"a\\" - \\"b\\" - \\"b\\" - \\"a\\" - \\"bb\\" - \\"abba\\" For `s = \\"abc\\"`, the output should be `3`. Explanation: The 3 palindromic substrings are: - \\"a\\" - \\"b\\" - \\"c\\" **Input/Output** - Input: A string `s`. - Constraints: - `1 ≤ s.length ≤ 1000` - `s` consists of lowercase English letters only. - Output: An integer representing the count of palindromic substrings in the input string `s`.","solution":"def count_palindromic_substrings(s): Returns the count of palindromic substrings in the given string `s`. n = len(s) count = 0 def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return count"},{"question":"Implement a function `taskCompletionTime(N, M, completion_times)` to handle multiple test cases. Given `N` tasks and `M` workers, each worker can work on different tasks, but a task cannot be shared between workers. Each worker must complete at least one task, and must switch to a free task once they finish their current task. The function should determine the minimum possible time required to complete all the tasks. The completion time of each task varies. The function should utilize a heap (priority queue) to efficiently manage the workers\' task assignments and the completion order. -----Input----- - The first line of the input contains a single integer `T` which denotes the number of test cases. The description of `T` test cases follows. - The first line of each test case contains two space-separated integers `N` (number of tasks) and `M` (number of workers). - The second line of each test case contains `N` space-separated integers which represent the completion times of the `N tasks`. -----Output----- - For each test case, print a single integer which denotes the minimum time required to complete all tasks. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - 1 le M le 10^5 - 1 le completion_times[i] le 10^9 for each valid i -----Example Input----- 2 5 2 2 4 6 8 10 3 3 3 3 3 -----Example Output----- 18 3","solution":"import heapq def taskCompletionTime(T, test_cases): results = [] for case in test_cases: N, M, completion_times = case if M >= N: results.append(max(completion_times)) continue completion_times.sort() min_heap = [0] * M for time in completion_times: min_heap[0] += time heapq.heapify(min_heap) results.append(max(min_heap)) return results"},{"question":"The Robotic Fleet of a futuristic city is facing an issue with their battery management system. The robots\' energy cells get drained based on the tasks they perform. The fleet commander needs to ensure the robots are always adequately charged before they set out for their next assignments. You are given the initial charge levels of K robots followed by a list of energy drains for N different tasks the robots might perform. You need to calculate the minimum initial charge required for each robot such that at least one robot can complete each task without its battery falling below 0%. Each task\'s energy drain could be different, and there might be multiple tasks assigned consecutively, but you need to ensure that after every task, at least one robot remains with a positive charge. -----Input:----- - The first line contains an integer T, representing the number of test cases. - For each test case: - The first line contains K, the number of robots. - The second line contains N, the number of tasks. - The third line contains K spaced integers representing the initial charge levels of the robots. - The fourth line contains N spaced integers representing the energy drain of each task. -----Output:----- For each test case, output a single integer representing the minimum initial charge required for every robot such that at least one robot can complete each task consecutively. -----Constraints----- - 1 leq T leq 100 - 1 leq K leq 100 - 1 leq N leq 100 - 1 leq text{initial charge} leq 1000 - 1 leq text{energy drain} leq 100 -----Sample Input:----- 1 3 2 10 20 15 5 10 -----Sample Output:----- 5","solution":"def min_initial_charge(T, test_cases): results = [] for t in range(T): K = test_cases[t][0] N = test_cases[t][1] initial_charges = test_cases[t][2] energy_drains = test_cases[t][3] max_energy_drain = max(energy_drains) min_charge_required = max_energy_drain + 1 # Ensure all robots have at least the minimum required charge for i in range(K): if initial_charges[i] < min_charge_required: initial_charges[i] = min_charge_required results.append(min_charge_required) return results"},{"question":"Given a list of tuples where each tuple represents a range of integers (inclusive), write a function that checks if a given number falls within any of the provided ranges. Your function should return `True` if the number is within at least one range and `False` otherwise. For example, given the list of ranges `[(1, 5), (8, 10), (12, 15)]`, and the number `7`, the function should return `False` because `7` is not within any of the given ranges. However, for the number `9`, the function should return `True` because `9` is within the range `(8, 10)`. Consider edge cases where the list of ranges might be empty, the number might be on the boundary of a range, or the ranges might overlap. # Function Signature ```python def is_within_ranges(ranges: list, number: int) -> bool: pass ``` # Example: ```python ranges = [(1, 5), (8, 10), (12, 15)] number = 9 print(is_within_ranges(ranges, number)) # should return True ranges = [(1, 5), (8, 10), (12, 15)] number = 7 print(is_within_ranges(ranges, number)) # should return False ranges = [] number = 3 print(is_within_ranges(ranges, number)) # should return False ranges = [(1, 3), (4, 7), (5, 9)] number = 5 print(is_within_ranges(ranges, number)) # should return True ```","solution":"def is_within_ranges(ranges: list, number: int) -> bool: Checks if a given number falls within any of the provided ranges. Parameters: ranges (list): A list of tuples where each tuple represents a range (inclusive). number (int): The number to be checked. Returns: bool: True if the number is within at least one range, False otherwise. for start, end in ranges: if start <= number <= end: return True return False"},{"question":"Hannah is designing a construction project which consists of several building blocks. Each block can accommodate a certain number of residents. The blocks need to be arranged such that a specific number of residents can be accommodated overall. Additionally, there is a limit on how many blocks can be used in total. You are given a list of building blocks, where each block has a maximum resident capacity. Your task is to find out if it is possible to accommodate exactly a certain number of residents using any combination of the blocks without exceeding the limit on the number of blocks used. If it is possible, return the minimum number of blocks needed; otherwise, return -1. ----- Input: ----- - The first line contains the number of test cases t. - The first line of each test case contains two integers n (the number of building blocks) and L (the limit on the number of blocks that can be used). - The second line contains n integers representing the resident capacity of each building block. - The third line contains a single integer R, the required number of residents to be accommodated. ----- Output: ----- For each test case, print the minimum number of blocks needed to accommodate exactly R residents without exceeding the limit L, or -1 if it is not possible. ----- Constraints: ----- - 1 ≤ t ≤ 100 - 1 ≤ n ≤ 100 - 1 ≤ L ≤ n - 1 ≤ capacity of each block ≤ 1000 - 1 ≤ R ≤ 10000 ----- Sample Input: ----- 2 5 3 1 3 4 5 7 10 4 2 2 3 5 9 10 ----- Sample Output: ----- 2 -1 ----- Explanation: ----- In the first test case, using blocks with capacities [3, 7] or [5, 5] can accommodate exactly 10 residents with exactly 2 blocks, which is within the limit of 3. In the second test case, it is not possible to accommodate exactly 10 residents with any combination of 2 or fewer blocks.","solution":"def min_blocks_for_residents(t, test_cases): results = [] for test_case in test_cases: n, L, capacities, R = test_case dp = [float(\'inf\')] * (R + 1) dp[0] = 0 # 0 residents require 0 blocks for capacity in capacities: for j in range(R, capacity - 1, -1): dp[j] = min(dp[j], dp[j - capacity] + 1) min_blocks = min(dp[R], L + 1) if min_blocks <= L: results.append(min_blocks) else: results.append(-1) return results"},{"question":"Riker is learning how to calculate temperature differences between Fahrenheit and Celsius. He often gets confused by the conversion formula and loses track of whether he is converting from Celsius to Fahrenheit or the other way around. To help Riker with his homework, you need to write a function that can handle both types of temperature conversions. Write a function that takes two parameters: a temperature value and a string indicating the scale to convert to (\\"C\\" for Celsius or \\"F\\" for Fahrenheit). The function should return the converted temperature rounded to 1 decimal place. The formula for converting from Fahrenheit to Celsius is: C = (F - 32) * 5/9 The formula for converting from Celsius to Fahrenheit is: F = (C * 9/5) + 32 Here is a sample of expected output: - convert_temperature(68, \\"C\\") should return 20.0 - convert_temperature(20, \\"F\\") should return 68.0 The function should handle floating point input values as well. Good luck!","solution":"def convert_temperature(value, scale): Convert temperature between Celsius and Fahrenheit. Parameters: value (float): The temperature value to be converted. scale (str): The target scale for conversion (\\"C\\" for Celsius, \\"F\\" for Fahrenheit). Returns: float: The converted temperature rounded to 1 decimal place. if scale == \\"C\\": return round((value - 32) * 5 / 9, 1) elif scale == \\"F\\": return round((value * 9 / 5) + 32, 1) else: raise ValueError(\\"Invalid scale. Use \'C\' for Celsius or \'F\' for Fahrenheit.\\")"},{"question":"The kingdom of Squariena has N cities connected by N-1 bidirectional roads. Each city is uniquely identified with an integer from 1 to N. Recently, the queen issued a royal decree ordering the creation of a delivery service to transport goods efficiently between cities. For security reasons, deliveries must be carried out along the shortest path between the given pair of cities. To evaluate the efficiency of the delivery service, the queen asked for your help to determine the longest delivery time required between any two cities. The delivery time between two cities is defined as the number of roads in the shortest path connecting them. -----Input----- - The first line contains a single integer N denoting the number of cities. - Each of the next N-1 lines contains two space-separated integers u and v, indicating that there\'s a road between cities u and v. -----Output----- Print the maximum delivery time between any two cities. -----Constraints----- - 2 le N le 100,000 - 1 le u, v le N - It is guaranteed that the input describes a tree (a connected acyclic graph). -----Example Input----- 5 1 2 1 3 3 4 3 5 -----Example Output----- 3 -----Explanation----- Example case: The longest delivery times are between city pairs (2, 4), (2, 5) all taking 3 roads.","solution":"from collections import deque def longest_delivery_time(n, edges): def bfs(start): dist = [-1] * (n + 1) dist[start] = 0 queue = deque([start]) farthest_node = start max_distance = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if dist[neighbor] == -1: dist[neighbor] = dist[node] + 1 queue.append(neighbor) if dist[neighbor] > max_distance: max_distance = dist[neighbor] farthest_node = neighbor return farthest_node, max_distance graph = [[] for _ in range(n + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) node_a, _ = bfs(1) # BFS from an arbitrary node (let\'s pick node 1) node_b, diameter = bfs(node_a) # BFS from the farthest node found (node_a) return diameter"},{"question":"Arthur is passionate about collecting stamps. He has a collection of `n` unique stamps and would like to organize them in a special way. He wants to find the longest increasing subsequence (LIS) of their values so that he can display them in his frames from the smallest to the largest without breaking the order. Given the values of the stamps, help Arthur find the length of the longest increasing subsequence. -----Input----- The first line of the input contains an integer `n` (1 leq n leq 10^5), the number of stamps. The second line contains `n` integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9), the values of the stamps. -----Output----- Output a single integer, the length of the longest increasing subsequence of the stamp values. -----Examples----- Input 6 5 1 8 3 7 9 Output 4 Input 5 9 8 7 6 5 Output 1 -----Note----- In the first sample, one of the longest increasing subsequences is [5, 8, 9], which has a length of 4. In the second sample, since all the values are in decreasing order, the longest increasing subsequence would be any single element i.e., length 1.","solution":"from bisect import bisect_left def length_of_lis(stamps): Given a list of stamp values, return the length of the longest increasing subsequence. if not stamps: return 0 lis = [] for stamp in stamps: pos = bisect_left(lis, stamp) if pos == len(lis): lis.append(stamp) else: lis[pos] = stamp return len(lis)"},{"question":"Implement a function `rearrange_odd_even` that takes a list of integers and returns a new list such that: - All the integers at the odd indices (1, 3, 5, ...) of the original list come first, maintaining their original order. - Followed by all the integers at the even indices (0, 2, 4, ...) of the original list, maintaining their original order. Note: - List indices are zero-based. - If the list is empty, the function should return an empty list. Example: If the input list is `[1, 2, 3, 4, 5, 6]`, the function should return `[2, 4, 6, 1, 3, 5]`. If the input list is `[10, 21, 30, 41, 50]`, the function should return `[21, 41, 10, 30, 50]`. Constraints: - All integers in the list are non-negative. - The length of the list does not exceed 10^6.","solution":"def rearrange_odd_even(lst): Rearranges the list such that all integers at odd indices come first, followed by all integers at even indices, maintaining their original order. Args: lst (list of int): List of integers Returns: list of int: Rearranged list odd_indices_elements = lst[1::2] even_indices_elements = lst[0::2] return odd_indices_elements + even_indices_elements"},{"question":"Your task is to implement the function **isAnagramPair** which takes two strings, **str1** and **str2**. The function should return **True** if the two strings are anagrams of each other, and **False** otherwise. # Considerations: - Ignore case differences (e.g., \\"Listen\\" and \\"Silent\\" should be considered anagrams). - Ignore spaces and punctuation (e.g., \\"A gentleman\\" and \\"Elegant man!\\" should be considered anagrams). # Examples: - isAnagramPair(\\"Astronomer\\", \\"Moon starer\\") returns True - isAnagramPair(\\"Hello\\", \\"Ole oh!\\") returns True - isAnagramPair(\\"Hi there\\", \\"Bye there\\") returns False","solution":"import re def isAnagramPair(str1, str2): Returns True if str1 and str2 are anagrams, False otherwise. # Remove spaces and punctuation, and lower the cases of both strings cleaned_str1 = re.sub(r\'[^A-Za-z0-9]\', \'\', str1).lower() cleaned_str2 = re.sub(r\'[^A-Za-z0-9]\', \'\', str2).lower() # Return comparison of sorted characters return sorted(cleaned_str1) == sorted(cleaned_str2)"},{"question":"You are working on a robotics project that requires controlling a robot\'s movement based on a series of commands. The robot can move up, down, left, and right on a 2D grid, starting at the origin point (0, 0). You need to write a function that processes a given list of commands and determines the robot\'s final position on the grid. The commands will be given as a list of strings, where each string represents a direction (\'U\' for up, \'D\' for down, \'L\' for left, \'R\' for right) followed by an integer indicating the number of steps the robot should take in that direction. Your task is to implement a function that computes the robot\'s final position after executing all the commands. The function should take one parameter: a list of command strings. Here is the function signature: `def final_position(commands: List[str]) -> Tuple[int, int]` For example: - If the input is `[\\"U2\\", \\"R1\\", \\"D3\\", \\"L4\\"]`, the robot moves up 2 steps, right 1 step, down 3 steps, and left 4 steps. The final position should be (-3, -1). - If the input is `[\\"R5\\", \\"U5\\"]`, the robot moves right 5 steps and up 5 steps. The final position should be (5, 5). Constraints: - The input list will contain at least one command. - Each command will be a valid direction (\'U\', \'D\', \'L\', \'R\') followed by a positive integer representing the number of steps (e.g., \'U2\', \'R10\', \'L3\'). Complete the function to calculate the final position of the robot.","solution":"from typing import List, Tuple def final_position(commands: List[str]) -> Tuple[int, int]: Computes the robot\'s final position after processing a list of commands. Parameters: commands (List[str]): List of command strings Returns: Tuple[int, int]: Final position of the robot # Initial position at the origin x, y = 0, 0 # Process each command for command in commands: direction = command[0] steps = int(command[1:]) if direction == \'U\': y += steps elif direction == \'D\': y -= steps elif direction == \'L\': x -= steps elif direction == \'R\': x += steps return (x, y)"},{"question":"Write a function `first_non_repeated_char` that takes a string and returns the first non-repeated character in the string. If all characters are repeated or the string is empty, return an empty string. For example: - `first_non_repeated_char(\\"swiss\\")` should return `\\"w\\"`. - `first_non_repeated_char(\\"aabb\\")` should return `\\"\\"`. - `first_non_repeated_char(\\"character\\")` should return `\\"h\\"`. You can assume that the input string contains only lowercase alphabets.","solution":"def first_non_repeated_char(s): Returns the first non-repeated character in the string s. If all characters are repeated or the string is empty, returns an empty string. char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that appears only once for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"Implement a function that takes a binary tree and returns the path from the root to a given target node as a list. If the target node is not found, return an empty list. Each node in the binary tree contains a value, left and right pointers to its children. For example, given a binary tree: ``` 1 / 2 3 / 4 5 ``` If the target node is 5, the function should return [1, 2, 5]. If the target node is 3, the function should return [1, 3]. If the target node is 8, the function should return an empty list. Special Note --> The Node class contains three fields: value, left, and right. And to access the root of the tree, use root. e.g. binary_tree.root","solution":"class Node: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right class BinaryTree: def __init__(self, root=None): self.root = root def find_path(root, target): Returns the path from root to the target node as a list. If the target node is not found, return an empty list. def path_finder(node, target, path): if not node: return False # Add current node to the path path.append(node.value) # Check if this is the target node if node.value == target: return True # Otherwise, check both subtrees if (node.left and path_finder(node.left, target, path)) or (node.right and path_finder(node.right, target, path)): return True # If not present in either subtree, remove the node from path path.pop() return False path = [] if path_finder(root, target, path): return path else: return [] # Example usage # tree = BinaryTree(Node(1, Node(2, Node(4), Node(5)), Node(3))) # print(find_path(tree.root, 5)) # Output: [1, 2, 5]"},{"question":"Write a function/method that calculates the median of a list of numbers. The list may contain positive, negative numbers or decimals. Your function should be able to handle and return the correct result for empty lists as well. If the list is empty, it should return None. Examples: ``` # returns 2.5 calculateMedian([1, 3, 2, 4]) # returns 3 calculateMedian([2, 5, 1, 3, 4]) # returns -1.5 calculateMedian([-3, -1, -4, -1]) # returns None calculateMedian([]) ```","solution":"def calculateMedian(nums): Returns the median of the list of numbers. If the list is empty, returns None. if not nums: return None nums.sort() n = len(nums) mid = n // 2 if n % 2 == 0: return (nums[mid - 1] + nums[mid]) / 2 else: return nums[mid]"},{"question":"Given a list of integers, determine if you can rearrange the list to form an arithmetic progression (AP). An arithmetic progression is a sequence of numbers in which the difference between consecutive terms is constant. If the list can be rearranged to form an AP, return `True`. Otherwise, return `False`. The input list will only contain integers and may include both positive and negative numbers. Note: An empty list or a list with fewer than 2 elements should return `True` since they trivially form an AP. Examples ```python # Example 1: input_list = [3, 5, 1] # Output: True # Explanation: The list can be rearranged as [1, 3, 5] with a common difference of 2. # Example 2: input_list = [1, 3, 5, 9] # Output: False # Explanation: No rearrangement can form an arithmetic progression. ``` Make sure to account for all edge cases and provide optimal solutions whenever possible.","solution":"def can_form_arithmetic_progression(input_list): Determines if the input list can be rearranged to form an arithmetic progression. Parameters: input_list (list): List of integers Returns: bool: True if the list can be rearranged to form an arithmetic progression, False otherwise if len(input_list) < 2: return True input_list.sort() common_diff = input_list[1] - input_list[0] for i in range(2, len(input_list)): if input_list[i] - input_list[i - 1] != common_diff: return False return True"},{"question":"You are given an array of integers `arr` and an integer `d`. Your task is to determine the maximum length of a subsequence of `arr` such that every two consecutive elements in the subsequence have a difference of at most `d`. Note: - A subsequence is derived by deleting some or no elements from an array without changing the order of the remaining elements. Function Signature: ```python def max_subsequence_with_difference(arr: List[int], d: int) -> int: pass ``` Example 1: Input: arr = [4, 2, 1, 6, 5], d = 1 Output: 3 Explanation: One of the longest subsequences is [4, 5, 6]. Example 2: Input: arr = [1, 3, 5, 7, 9], d = 1 Output: 1 Explanation: All differences are greater than 1, hence the longest subsequence length is 1. Example 3: Input: arr = [1, 3, 6, 7, 9, 10], d = 2 Output: 4 Explanation: One of the longest subsequences is [1, 3, 6, 7]. Constraints: - 1 <= len(arr) <= 10^3 - 1 <= arr[i] <= 10^4 - 1 <= d <= 10^4","solution":"def max_subsequence_with_difference(arr, d): Returns the maximum length of a subsequence such that every two consecutive elements in the subsequence have a difference of at most d. n = len(arr) if n == 0: return 0 # Sort array to consider elements in ascending order arr.sort() # Dynamic programming array dp = [1] * n # Length 1 for all elements initially # Update the DP table based on the previous elements for i in range(1, n): for j in range(i): if arr[i] - arr[j] <= d: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"# Task Write a function that takes an array of positive integers representing the widths of boxes. The function should return the smallest number of containers required to hold all the boxes given that each container can hold boxes with a total width up to a specified limit. # Function Signature ```python def min_containers(boxes: List[int], capacity: int) -> int: pass ``` # Example For `boxes = [3, 8, 2, 5, 4]` and `capacity = 10`, the output should be `3`. (You can group the boxes in the following way: [3, 7], [8, 2], [5, 4]). # Input/Output - `[input]` list of integers `boxes`: Constraints: `1 ≤ len(boxes) ≤ 1000`, `1 ≤ boxes[i] ≤ 1000` - `[input]` integer `capacity`: Constraints: `1 ≤ capacity ≤ 1000` - `[output]` an integer representing the minimum number of containers required to hold all the boxes.","solution":"from typing import List def min_containers(boxes: List[int], capacity: int) -> int: Returns the smallest number of containers required to hold all the boxes given the capacity of each container. boxes.sort(reverse=True) containers = 0 while boxes: container_capacity = capacity i = 0 while i < len(boxes): if boxes[i] <= container_capacity: container_capacity -= boxes.pop(i) else: i += 1 containers += 1 return containers"},{"question":"You are given n non-negative integers representing an elevation map where the width of each bar is 1. Compute how much water it can trap after raining. Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The elevation map [0,1,0,2,1,0,1,3,2,1,2,1] can trap 6 units of water. Example 2: Input: height = [4,2,0,3,2,5] Output: 9 Explanation: The elevation map [4,2,0,3,2,5] can trap 9 units of water. Note: n == height.length 0 <= n <= 100,000 0 <= height[i] <= 100,000","solution":"def trap(height): Calculate how much water can be trapped after raining. :param height: List[int], a list of non-negative integers representing the elevation map. :return: int, the total amount of trapped water. if not height: return 0 left, right = 0, len(height) - 1 left_max, right_max = height[left], height[right] water_trapped = 0 while left < right: if height[left] < height[right]: left += 1 left_max = max(left_max, height[left]) water_trapped += left_max - height[left] else: right -= 1 right_max = max(right_max, height[right]) water_trapped += right_max - height[right] return water_trapped"},{"question":"Your task is to write a function that takes a list of integers and an integer `n`, and returns a new list containing only the elements of the original list that are greater than `n`. The integers in the new list should maintain their original order. If no such elements are found, return an empty list. The provided list may be empty.","solution":"def filter_greater_than(nums, n): Returns a new list containing only the elements of the original list that are greater than n. Args: nums (list of int): The list of integers to filter. n (int): The threshold integer. Returns: list of int: The filtered list containing only elements greater than n. return [num for num in nums if num > n]"},{"question":"Given an array of integers, determine whether the array can be partitioned into three subarrays with equal sums. Return true if you can partition the given array into three subarrays with equal sums, otherwise return false. Example 1: Input: arr = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1] Output: true Explanation: the array can be partitioned as [0, 2, 1], [-6, 6], and [-7, 9, 1, 2, 0, 1] which all have equal sum of 3. Example 2: Input: arr = [0, 2, 1, -6, 6, 7, 9, -1, 2, 0, 1] Output: false Example 3: Input: arr = [3, 3, 6, 5, -2, 2, 5, 1, -9, 4] Output: true Explanation: the array can be partitioned as [3, 3], [6, 5, -2, 2], and [5, 1, -9, 4] which all have equal sum of 6. Constraints: 1 <= arr.length <= 50000 -10^4 <= arr[i] <= 10^4","solution":"def can_partition_into_three_equal_sum(arr): Determine whether the array can be partitioned into three subarrays with equal sums. Parameters: arr (list): List of integers. Returns: bool: True if the array can be partitioned into three subarrays with equal sums, otherwise False. total_sum = sum(arr) # If total sum is not divisible by 3, it\'s not possible to partition if total_sum % 3 != 0: return False target_sum = total_sum // 3 current_sum = 0 count_partitions = 0 for num in arr: current_sum += num if current_sum == target_sum: current_sum = 0 count_partitions += 1 # We need exactly three partitions with equal sum if count_partitions == 3: return True # If we exit the loop, it means we couldn\'t find three partitions with equal sum return False"},{"question":"You are given a list of N integers, and a number K. Your task is to determine the maximum sum of any K consecutive integers in the list. -----Input:----- - First line contains T, the number of test cases. Then the test cases follow. - The first line of each test case contains two space-separated integers N and K, indicating the number of integers in the list and the number of consecutive integers to consider for the sum, respectively. - The second line contains N space-separated integers A_1, A_2, dots, A_N which form the list. -----Output:----- For each test case, output a single integer which is the maximum sum of any K consecutive integers in the list. -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 10^5 - 1 leq K leq N - -10^9 leq A_i leq 10^9 - The sum of N over all test cases does not exceed 10^6. -----Sample Input:----- 2 8 3 1 2 3 4 5 6 7 8 5 2 -1 -2 -3 -4 -5 -----Sample Output:----- 21 -3 -----Explanation:----- In the first test case, the list is [1, 2, 3, 4, 5, 6, 7, 8] and K=3. The maximum sum of any 3 consecutive integers is 21 (6+7+8). In the second test case, the list is [-1, -2, -3, -4, -5] and K=2. The maximum sum of any 2 consecutive integers is -3 (-1-2).","solution":"def max_sum_of_k_consecutive(N, K, A): Returns the maximum sum of any K consecutive integers in the list A of size N. # Early return for invalid cases if N < K: return None max_sum = current_sum = sum(A[:K]) for i in range(K, N): current_sum += A[i] - A[i - K] max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(test_cases): results = [] for N, K, A in test_cases: result = max_sum_of_k_consecutive(N, K, A) results.append(result) return results"},{"question":"Task: Write a function `flipMatrix` that takes a 2D list (matrix) and returns the matrix flipped along its main diagonal. Essentially, this means transforming all the rows to columns and vice versa. # Rules/Note: * The input matrix will always be a non-empty 2D list. * The number of rows and columns may not be equal. * The diagonal flipping means switching the element at position (i, j) in the original matrix to position (j, i) in the new matrix. # Examples: + flipMatrix([[1, 2, 3], [4, 5, 6]]): Should return: [[1, 4], [2, 5], [3, 6]] + flipMatrix([[1, 2], [3, 4], [5, 6]]): Should return: [[1, 3, 5], [2, 4, 6]] + flipMatrix([[7]]): Should return: [[7]]","solution":"def flipMatrix(matrix): Flips the given matrix along its main diagonal. Parameters: matrix (list of list of int): A 2D list representing the matrix to be flipped. Returns: list of list of int: The matrix flipped along its main diagonal. rows = len(matrix) cols = len(matrix[0]) flipped_matrix = [[None] * rows for _ in range(cols)] for i in range(rows): for j in range(cols): flipped_matrix[j][i] = matrix[i][j] return flipped_matrix"},{"question":"Given an array of integers, you need to write a function that rearranges the elements of the array so that all even numbers appear before all odd numbers while preserving the relative order of the even and odd numbers. -----Input----- The input will start with an integer t (1 le t le 1000) - the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 le n le 10^5) - the number of elements in the array. - The second line contains n space-separated integers a_i (1 le a_i le 10^6) - the elements of the array. -----Output----- For each test case, output a single line containing the integers of the array rearranged so that all even numbers appear before all odd numbers, preserving their relative order. -----Example----- Input: 3 5 1 2 3 4 5 4 4 2 5 7 3 1 3 2 Output: 2 4 1 3 5 4 2 5 7 2 1 3 -----Note----- In the first test case, the integers are reordered such that all evens (2, 4) appear before all odds (1, 3, 5) while maintaining their relative order. In the second test case, the integers are reordered such that all evens (4, 2) appear before all odds (5, 7) while maintaining their relative order. In the third test case, the integers are reordered such that all evens (2) appear before all odds (1, 3) while maintaining their relative order.","solution":"def rearrange_even_odd(test_cases): results = [] for n, arr in test_cases: even = [x for x in arr if x % 2 == 0] odd = [x for x in arr if x % 2 != 0] results.append(even + odd) return results # Example of how to use the function with input provided as a list of tuples (t, arr) # test_cases = [ # (5, [1, 2, 3, 4, 5]), # (4, [4, 2, 5, 7]), # (3, [1, 3, 2]) # ] # print(rearrange_even_odd(test_cases))"},{"question":"Given a list of integers, return the largest possible product of any three distinct numbers from the list. If the list contains fewer than three numbers, return None. ```python max_product([1, 10, 2, 6, 5, 3]) == 300 # 10 * 6 * 5 max_product([-10, -10, 5, 2]) == 500 # (-10) * (-10) * 5 max_product([1, 2]) == None # Not enough elements for a product ```","solution":"from typing import List, Optional def max_product(nums: List[int]) -> Optional[int]: Given a list of integers, return the largest possible product of any three distinct numbers from the list. If the list contains fewer than three numbers, return None. if len(nums) < 3: return None nums.sort() # The largest product of any three numbers can either be from the highest three numbers # or from two lowest negative numbers and the highest positive number. return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Task Given a list of integers where each integer represents the height of a tree, design a function that determines the number of trees that are visible when viewed from the left side. A tree is visible if it is taller than all of the trees before it to its left. # Input - A list of integers `heights` representing the heights of the trees. # Output - An integer representing the number of visible trees when viewed from the left side. # Example ```python def visible_trees(heights): # Your code here # Example 1: input_heights = [3, 1, 4, 1, 5] print(visible_trees(input_heights)) # Output: 4 # Example 2: input_heights = [1, 2, 3, 2, 1] print(visible_trees(input_heights)) # Output: 3 # Example 3: input_heights = [5, 4, 3, 2, 1] print(visible_trees(input_heights)) # Output: 1 ``` In the first example, the visible trees are of heights 3, 4, and 5. Hence the number of visible trees is 4. In the second example, trees with height 1, 2, and 3 are visible. In the third example, only the first tree with height 5 is visible.","solution":"def visible_trees(heights): Determine the number of trees that are visible from the left side. A tree is visible if it is taller than all of the trees before it to its left. Args: heights (list of int): List of tree heights. Returns: int: Number of visible trees. if not heights: return 0 visible_count = 0 max_height_so_far = float(\'-inf\') for height in heights: if height > max_height_so_far: visible_count += 1 max_height_so_far = height return visible_count"},{"question":"# Palindrome Check Write a program that checks if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization. For example: ~~~if-not:racket ```python is_palindrome(\\"A man, a plan, a canal, Panama\\") -> True is_palindrome(\\"Was it a car or a cat I saw?\\") -> True is_palindrome(\\"Hello, World!\\") -> False ``` ~~~ ~~~if:racket ```racket (is_palindrome \\"A man, a plan, a canal, Panama\\") ; #t (is_palindrome \\"Was it a car or a cat I saw?\\") ; #t (is_palindrome \\"Hello, World!\\") ; #f ``` ~~~ # Constraints: 1. The function should ignore spaces, punctuation, and capitalization. 2. The input string will contain at least one letter or number.","solution":"import re def is_palindrome(s): Check if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. Parameters: s (str): Input string Returns: bool: True if the string is a palindrome, False otherwise # Remove non-alphanumeric characters and convert to lowercase filtered_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the filtered string is equal to its reverse return filtered_string == filtered_string[::-1]"},{"question":"```if-not:sql Design a function that takes an integer and returns the factorial of that number. The factorial is the product of all positive integers up to and including the given integer. For example, factorial(5) is 5 * 4 * 3 * 2 * 1 = 120. ``` ```if:sql SQL Notes: You will be given a table, `numbers`, with one column `number`. Return a table with the column `factorial` containing the factorial of each number in the `number` column. # numbers table schema * number INT # output table schema * factorial INT ```","solution":"def factorial(n): Returns the factorial of a given number n. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. if n < 0: return None # Factorial is not defined for negative numbers elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function that takes a string as input and returns the same string with all the vowels removed. For example, for `\\"hello world\\"` it should return `\\"hll wrld\\"`. ```if:racket In Racket, you may use the `remove` function to filter out the vowels. ```","solution":"def remove_vowels(input_string): Removes all vowels from the input string. Parameters: input_string (str): The string from which to remove vowels. Returns: str: The string without vowels. vowels = \\"aeiouAEIOU\\" return \'\'.join(char for char in input_string if char not in vowels)"},{"question":"Write a function that checks if a given string is a palindrome by ignoring spaces, punctuation, and capitalization. Example: ```python is_palindrome(\\"A man, a plan, a canal, Panama\\") # => True is_palindrome(\\"Was it a car or a cat I saw?\\") # => True is_palindrome(\\"Hello, World!\\") # => False ```","solution":"import string def is_palindrome(s): Checks if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. # Remove all punctuation and spaces, convert to lowercase translator = str.maketrans(\'\', \'\', string.punctuation + \' \') clean_str = s.translate(translator).lower() # Check if the cleaned string is equal to its reverse return clean_str == clean_str[::-1]"},{"question":"Given an array of single-digit numbers and lowercase letters, return an object containing the count of each unique element. Ignore uppercase letters and any other characters (like punctuation, spaces, etc.). ``` For example: countElements([\'a\', \'b\', \'a\', \'1\', \'2\', \'1\', \'a\']) = {\'a\': 3, \'b\': 1, \'1\': 2, \'2\': 1} countElements([\'z\', \'x\', \'x\', \'z\', \'1\', \'3\', \'x\']) = {\'z\': 2, \'x\': 3, \'1\': 1, \'3\': 1} ``` # Constraints: - The input will be an array of lowercase letters, single-digit numbers, and other characters. - The output should be an object (or dictionary) in languages where applicable, containing keys as unique elements and values as their counts in the array. # Notes: - Characters other than lowercase letters and single-digit numbers should be ignored in the count.","solution":"def count_elements(items): Counts the occurrences of each unique element in the given list of items. Only single-digit numbers and lowercase letters are considered. Args: items (list): A list of elements (characters) to count in. Returns: dict: A dictionary with elements as keys and their counts as values. counts = {} for item in items: if item.isdigit() or (\'a\' <= item <= \'z\'): if item in counts: counts[item] += 1 else: counts[item] = 1 return counts"},{"question":"You are given an integer array of length N. Determine the minimum number of moves required to sort the array in non-decreasing order by performing the following operation any number of times: - Select any subarray of the array and reverse it. -----Constraints----- - 1 ≤ N ≤ 2 × 10^5 - 1 ≤ array[i] ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N array_1 array_2 ... array_N -----Output----- Print the minimum number of moves required to sort the array in non-decreasing order. -----Sample Input----- 4 3 1 2 4 -----Sample Output----- 1 You can sort this array by reversing the subarray [1, 2, 3].","solution":"def min_moves_to_sort(arr): Returns the minimum number of moves required to sort the array in non-decreasing order by reversing any subarray any number of times. n = len(arr) sorted_arr = sorted(arr) # Two pointers to find the bounds of the longest unsorted subarray left = 0 while left < n and arr[left] == sorted_arr[left]: left += 1 right = n - 1 while right >= 0 and arr[right] == sorted_arr[right]: right -= 1 if left >= right: return 0 return 1"},{"question":"# Tile Floor Optimizer In a fictional city, urban planners are tasked with tiling floors of new buildings using rectangular tiles of dimensions 1x2. They aim to minimize cuts and tile wastage. Given that each floor has dimensions `n x m`, the task is to cover the floor without any overlaps or gaps. The tiles can be rotated. # Task You are required to create a function, `tileOptimizer`, that determines if it\'s possible to completely cover the floor with 1x2 tiles without any wastage or leftovers. # Inputs - `n` - an integer representing the number of rows in the floor, where `1 <= n <= 1000` - `m` - an integer representing the number of columns in the floor, where `1 <= m <= 1000` # Output Return a boolean value: - `True` if it\'s possible to cover the floor - `False` otherwise # Example ```python # Example 1 n = 4 m = 5 tileOptimizer(n, m) => False # Example 2 n = 3 m = 2 tileOptimizer(n, m) => True # Example 3 n = 2 m = 8 tileOptimizer(n, m) => True ``` # Notes To cover the floor completely with 1x2 tiles: - Both `n` and `m` need to be considered for divisibility as a single tile covers two units of space. - The area `n * m` must be even, as an odd total area cannot be divided into pairs of units covered by the tiles.","solution":"def tileOptimizer(n, m): Returns True if it is possible to cover the n x m floor with 1x2 tiles, otherwise False. # Check if the area of the floor (n * m) is even return (n * m) % 2 == 0"},{"question":"Your program will receive a string representing a mathematical expression consisting of non-negative integers and symbols \'+\', \'-\', \'*\', \'/\', and \' \' (space). The task is to write a function `simpleCalculator` which evaluates the expression and returns the result as an integer. The mathematical expression follows these rules: 1. The expression is a valid infix expression with non-negative integers and operators. 2. Operators follow their usual precedence rules: - Multiplication (*) and division (/) are performed before addition (+) and subtraction (-). - Multiplication (*) and division (/) have the same precedence level, evaluated from left to right. - Addition (+) and subtraction (-) have the same precedence level, evaluated from left to right. 3. Space characters in the input string do not affect the computation and should be ignored. 4. The expression will not contain parentheses. 5. Division is integer division, so `7/2 = 3`. You can safely assume that the given expression is valid and well-formed. For example: - `simpleCalculator(\\"3+2*2\\")` should return `7`. - `simpleCalculator(\\" 3/2 \\")` should return `1`. - `simpleCalculator(\\" 3+5 / 2 \\")` should return `5`. The input string can have any non-negative integer and be up to 1000 characters long. Ensure that your function properly handles operators and respects the precedence and associativity rules described.","solution":"def simpleCalculator(expression): Evaluates a simple mathematical expression string and returns the result as an integer. if not expression: return 0 # Remove spaces expression = expression.replace(\' \', \'\') def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left // right) def precedence(operator): if operator in {\'+\', \'-\'}: return 1 if operator in {\'*\', \'/\'}: return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i].isdigit(): j = i while j < len(expression) and expression[j].isdigit(): j += 1 values.append(int(expression[i:j])) i = j - 1 else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"Alice and Bob are playing a memory card game. There are `n` cards laid out in a straight line, and each card has a number on it. Alice always picks the card from the leftmost side, and Bob always picks the card from the rightmost side. The game continues until all cards are picked. The winner is the player with the highest sum of card values. If both players have the same sum, the result is a draw. Write the function `card_game(n: int, cards: List[int]) -> str` that takes an integer `n`, the number of cards, and a list `cards` of length `n` representing the card values in the order they are laid out. The function should return the winner (`\\"Alice\\"` or `\\"Bob\\"`) or `\\"Draw\\"` if both have the same sum. Note: If `n` is less than or equal to 0, return the string `\\"Invalid game with no cards\\"`.","solution":"def card_game(n, cards): Determine the winner of the memory card game or if it is a draw. Parameters: n (int): Number of cards cards (List[int]): List of card values Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins, \\"Draw\\" if it\'s a draw, or \\"Invalid game with no cards\\" if n <= 0. if n <= 0: return \\"Invalid game with no cards\\" alice_sum = 0 bob_sum = 0 left = 0 right = n - 1 while left <= right: alice_sum += cards[left] left += 1 if left <= right: bob_sum += cards[right] right -= 1 if alice_sum > bob_sum: return \\"Alice\\" elif bob_sum > alice_sum: return \\"Bob\\" else: return \\"Draw\\""},{"question":"Design a function that simulates the following robotic commands: The robot can move on a plane starting from the origin (0, 0) position. The robot can receive the following four commands: 1. \\"G\\": which moves the robot one unit forward in the current direction. 2. \\"L\\": which turns the robot 90 degrees to the left. 3. \\"R\\": which turns the robot 90 degrees to the right. The robot moves in an infinite plane. Initially, it faces north, i.e., towards the positive direction of the y-axis. The function should determine if the robot is bounded in a circle, meaning that after executing all the given commands in sequence, the robot will return to the original position (0, 0) or it will be in a loop and hence always confined in a circle. # Function Signature ```python def is_robot_bounded(instructions: str) -> bool: ``` # Parameter - `instructions` (str): A string of commands; each character in the string is one of \'G\', \'L\', or \'R\'. # Return Value - Returns `True` if the robot is bounded in a circle, otherwise `False`. # Example ```python assert is_robot_bounded(\\"GGLLGG\\") == True ``` Explanation: The robot moves north 2 units, turns left, continues 2 units, and then turns left again. Eventually, it comes back to the initial position facing north. # Note - The input string will only contain characters \'G\', \'L\', and \'R\'. => avoid extra symbols or whitespaces. - A robot is bounded in a circle if, after all the commands, its movement path repeatedly returns to the origin.","solution":"def is_robot_bounded(instructions: str) -> bool: Determines if the robot is bounded in a circle. :param instructions: str: The sequence of commands for the robot. :return: bool: True if the robot is bounded in a circle, otherwise False. # Initial position and direction x, y = 0, 0 dx, dy = 0, 1 # Facing north (positive y direction) for command in instructions: if command == \'G\': x, y = x + dx, y + dy elif command == \'L\': dx, dy = -dy, dx # 90 degrees left turn elif command == \'R\': dx, dy = dy, -dx # 90 degrees right turn # After one sequence of instructions, check position and direction return (x == 0 and y == 0) or (dx != 0 or dy != 1)"},{"question":"Given an `n x m` grid representing a garden where each cell contains a positive integer indicating the number of flowers in that cell, and you are permitted to select cells forming a `1 x k` (horizontal) or `k x 1` (vertical) continuous segment such that the sum of the flowers in the selected segment is maximized. - Input: A 2D list `garden` of integers and an integer `k` such that `1 <= k <= max(n, m)`. - Output: The maximum sum of flowers in a valid `1 x k` or `k x 1` segment. Examples Ex1 ``` garden = [ [1, 3, 1, 2], [2, 1, 2, 1], [1, 2, 3, 1] ] k = 2 Output: 5 ``` *Explanation: Selecting the segment with cells containing `3` and `2` in the first row gives the maximum sum of 5.* Ex2 ``` garden = [ [1, 3, 1, 2], [2, 1, 2, 1], [1, 2, 3, 1] ] k = 3 Output: 6 ``` *Explanation: Selecting the vertical segment with cells containing `2`, `1`, and `3` in the second column gives the maximum sum of 6.*","solution":"def max_flowers(garden, k): Returns the maximum sum of flowers in a 1 x k (horizontal) or k x 1 (vertical) segment. Parameters: garden (list of list of int): 2D grid of positive integers representing the garden. k (int): the length of the segment to select. Returns: int: the maximum sum of flowers in a valid segment. n = len(garden) m = len(garden[0]) if n > 0 else 0 max_sum = 0 # Check horizontal segments for i in range(n): for j in range(m - k + 1): current_sum = sum(garden[i][j:j + k]) if current_sum > max_sum: max_sum = current_sum # Check vertical segments for i in range(n - k + 1): for j in range(m): current_sum = sum(garden[i + l][j] for l in range(k)) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given an array `heights` where `heights[i]` represents the height of a building at index `i`, you need to create a water retention system. This system would determine the maximum amount of water that can be trapped between the buildings after a rain. Water can only flow up to the height of the shortest building between two taller buildings. For instance, if there are buildings of heights [1,0,2], the volume of water trapped between buildings would be 1 unit. Write a function to calculate the maximum amount of water that can be trapped between the buildings. # Function Signature ```python def trap(heights: List[int]) -> int: ``` # Input - `heights`: List where each element is a non-negative integer representing the height of a building. (`1 <= len(heights) <= 10^5` and `0 <= heights[i] <= 10^4`) # Output - Returns an integer representing the maximum amount of water that can be trapped. # Example Example 1: Input: heights = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The water trapped at each index is: Index 1: 0 units (no water trapped as height is 1) Index 2: 1 unit (water trapped between heights 1 and 2) Index 4: 1 unit (water trapped between heights 2 and 1) Index 5: 2 units (water trapped between heights 1 and 3) Index 6: 1 unit (water trapped between heights 0 and 2) Index 8: 1 unit (water trapped between heights 3 and 1) Total trapped water = 1 + 1 + 2 + 1 + 1 = 6 units. Example 2: Input: heights = [4,2,0,3,2,5] Output: 9 Explanation: The water trapped at each index is: Index 1: 2 units (water trapped between heights 4 and 0) Index 2: 3 units (water trapped between heights 2 and 3) Index 3: 1 unit (water trapped between heights 0 and 2) Index 4: 3 units (water trapped between heights 3 and 5) Total trapped water = 2 + 3 + 1 + 3 = 9 units. # Constraints - `1 <= len(heights) <= 10^5` - `0 <= heights[i] <= 10^4`","solution":"def trap(heights): Returns the maximum amount of water that can be trapped between buildings. if not heights or len(heights) < 3: return 0 left, right = 0, len(heights) - 1 left_max, right_max = 0, 0 trapped_water = 0 while left < right: if heights[left] < heights[right]: if heights[left] >= left_max: left_max = heights[left] else: trapped_water += left_max - heights[left] left += 1 else: if heights[right] >= right_max: right_max = heights[right] else: trapped_water += right_max - heights[right] right -= 1 return trapped_water"},{"question":"You are given a string representing the genome sequence of an organism. The genome only contains the characters \'A\', \'T\', \'C\', and \'G\'. Scientists want to study all the possible unique subsequences of a specified length k within this genome. A subsequence is derived from the string by deleting some or no characters without changing the order of the remaining characters. Your task is to determine the number of unique subsequences of length k. -----Input----- The first line of input will contain an integer n (1 ≤ n ≤ 1,000), the length of the genome string. The second line of input will be a string of length n consisting only of characters \'A\', \'T\', \'C\', \'G\'. The third line of input will contain an integer k (1 ≤ k ≤ n), the length of the subsequences to consider. -----Output----- Print a single integer, the number of unique subsequences of length k that can be formed from the given genome. -----Example----- Input 5 ATCGT 2 Output 9 -----Note----- The unique subsequences of length 2 from the genome \\"ATCGT\\" are: \\"AT\\", \\"AC\\", \\"AG\\", \\"TC\\", \\"TG\\", \\"CG\\", \\"CT\\", \\"GT\\", \\"TT\\".","solution":"def count_unique_subsequences(n, genome, k): Returns the number of unique subsequences of length k in the given genome sequence. if k > n: return 0 from itertools import combinations subsequences = set() for comb in combinations(range(n), k): subseq = \'\'.join(genome[i] for i in comb) subsequences.add(subseq) return len(subsequences)"},{"question":"There is a list of integers where every element appears twice except for one. Write a function to find that single one. Example: ```python find_single_number([4, 1, 2, 1, 2]) == 4 find_single_number([2, 2, 3, 2, 2, 3, 4, 3, 4]) == 3 ``` It’s guaranteed that the list contains at least 3 integers and only one integer appears once while all others appear twice. The tests may contain very large lists, so consider optimizing the performance for efficiency.","solution":"def find_single_number(numbers): This function finds the element that appears only once in a list where all other elements appear twice. Args: numbers (list): The list of integers where every element appears twice except for one. Returns: int: The single element that appears only once. result = 0 for number in numbers: result ^= number return result"},{"question":"# Task Given an array of integers, determine the length of the longest subsequence such that every element in the subsequence is an even number. The elements of the subsequence do not need to be contiguous but should preserve the original order of appearance in the array. # Example For `a = [5, 2, 4, 7, 8, 10, 5, 3, 12]`, the output should be `5`. Here\'s a possible longest subsequence: `[2, 4, 8, 10, 12]` For `a = [1, 3, 5, 7, 9]`, the output should be `0`. There are no even numbers in the array, so the longest subsequence of even numbers has length `0`. # Input/Output - `[input]` integer array `a` Constraints: `1 ≤ a.length ≤ 10000,` `0 ≤ a[i] ≤ 1000000000.` - `[output]` an integer The length of the longest subsequence of even numbers in the array.","solution":"def longest_even_subsequence_length(a): Determine the length of the longest subsequence of even numbers. :param a: List of integers :return: Length of the longest subsequence of even numbers return len([x for x in a if x % 2 == 0])"},{"question":"# Task You are given a matrix `m` of integers n x m. Your goal is to rotate the matrix 90 degrees clockwise in place. Note: - You have to manipulate the matrix in place. - You are not allowed to use extra space for another matrix or list. # Example For `m = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]`, the output should be: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Here\'s how m will look like after rotation: ``` [ [1, 2, 3], -> [7, 4, 1], [4, 5, 6], [8, 5, 2], [7, 8, 9] [9, 6, 3] ] ``` # Input/Output - `[input]` 2D integer array `m` A 2D matrix of integers. `n` and `m` are the dimensions of the matrix where `1 ≤ n, m ≤ 50.` - `[output]` 2D integer array The matrix after it has been rotated 90 degrees clockwise in place.","solution":"def rotate_matrix(matrix): Rotates the given n x n matrix 90 degrees clockwise in place. :param matrix: List[List[int]] :return: None (the matrix is modified in place) n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are given a list of integers `nums`. Your task is to return the length of the longest contiguous subarray such that all its elements are unique. A subarray is a contiguous part of an array. Example 1: Input: nums = [1, 2, 3, 1, 2, 3, 4, 5] Output: 5 Explanation: The longest subarray with unique elements is [1, 2, 3, 4, 5]. Example 2: Input: nums = [4, 4, 4, 4] Output: 1 Explanation: The longest subarray with unique elements is any single element array [4]. Example 3: Input: nums = [1, 2, 3, 4, 5] Output: 5 Explanation: The longest subarray with unique elements is the whole array [1, 2, 3, 4, 5]. Constraints: 1. 1 <= nums.length <= 10^4 2. -10^9 <= nums[i] <= 10^9","solution":"def longest_unique_subarray_length(nums): Returns the length of the longest subarray with unique elements. seen = {} max_length = 0 start = 0 for end in range(len(nums)): if nums[end] in seen: start = max(start, seen[nums[end]] + 1) seen[nums[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Implement a function that takes a list of integers and returns a list containing only the elements that are prime numbers. If the input list is empty or no prime numbers are found, return an empty list. **Steps**: 1. Create a helper function `is_prime` which checks if a number is a prime. 2. Iterate through the input list and apply the `is_prime` function on each element. 3. Collect all elements for which `is_prime` returns true. **Prime Check**: A number is prime if it is greater than 1 and cannot be formed by multiplying two smaller natural numbers. Numbers less than or equal to 1 are not prime by definition. **Optimization**: To check if a number `n` is prime, you can test for factors from 2 up to the square root of `n`. ___ # Examples ``` input = [2, 3, 4, 5, 6, 7, 8, 9, 10] output = [2, 3, 5, 7] input = [15, 20, 25, 30, 35] output = [] input = [11, 13, 17, 19, 23, 29] output = [11, 13, 17, 19, 23, 29] ``` ___","solution":"def is_prime(n): Check if a number is a prime number. :param n: Integer, the number to check. :return: Boolean, True if the number is prime, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(lst): Filter the prime numbers from a list of integers. :param lst: List of integers. :return: List of integers that are prime numbers. return [num for num in lst if is_prime(num)]"},{"question":"You are given a list of numbers. Each number in the list can be either positive, negative, or zero. You need to write a program that will sort this list in such a way that all the negative numbers appear before the positive numbers, retaining their relative order within the same group (negatives and positives). Zeros should be placed between the negative and positive numbers. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case consists of two lines of input. - The first line contains an integer N, the number of elements in the list. - The second line contains N space-separated integers which are the elements of the list. -----Output:----- For each test case, output the sorted list in a single line. -----Constraints:----- - 1 leq T leq 10^3 - 1 leq N leq 10^4 - -10^6 leq arr[i] leq 10^6 -----Sample Input:----- 2 5 -4 3 0 -1 2 6 0 -3 5 -2 -1 4 -----Sample Output:----- -4 -1 0 3 2 -3 -2 -1 0 5 4 -----EXPLANATION:----- For 1) The negatives are -4 and -1 in their original order, zero is in the middle, and the positives are 3 and 2 in their original order. For 2) The negatives are -3, -2, and -1 in their original order, zero is in the middle, and the positives are 5 and 4 in their original order.","solution":"def custom_sort(lst): Sorts the given list such that all negative numbers appear before zero, zero appears in the middle, and all positive numbers appear after all zeroes. negatives = [x for x in lst if x < 0] zeroes = [x for x in lst if x == 0] positives = [x for x in lst if x > 0] return negatives + zeroes + positives def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] lst = test_cases[i][1] sorted_lst = custom_sort(lst) results.append(\\" \\".join(map(str, sorted_lst))) return results"},{"question":"You need to write a function that determines whether a given string is a palindrome. A palindrome reads the same backward as forward. The function should be case-insensitive and ignore all non-alphanumeric characters. If this is not clear enough, here are some examples: ```python is_palindrome(\'A man, a plan, a canal: Panama\') == True is_palindrome(\'Hello\') == False ``` Happy coding!","solution":"def is_palindrome(s): Determines whether a given string is a palindrome. The function is case-insensitive and ignores all non-alphanumeric characters. # Remove non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered string is the same forward and backward return filtered_chars == filtered_chars[::-1]"},{"question":"You are given an array of integers `nums` and an integer `k`. A k-sorted array is an array where each element is at most `k` positions away from its target position. Your task is to sort the array using an efficient sorting algorithm and return the sorted array. Example: Input: `nums = [3, 2, 1, 5, 4, 7, 6, 5, 8]`, `k = 2` Output: `[1, 2, 3, 4, 5, 5, 6, 7, 8]` Explanation: The given array is 2-sorted because: - Element `1` is at most 2 positions away from its target position which is `0`. - Element `2` is at most 2 positions away from its target position which is `1`. - Element `3` is at most 2 positions away from its target position which is `2`. - And similarly for other elements. Note: 1 <= nums.length <= 100000 -10^5 <= nums[i] <= 10^5 1 <= k <= nums.length Hint: Think about how a min-heap data structure could help to solve this problem efficiently.","solution":"import heapq def sort_k_sorted_array(nums, k): Sorts a k-sorted array where each element is at most k positions away from its target position. Args: nums (list): The input k-sorted array. k (int): Maximum distance from the target position for any element. Returns: list: The sorted array. # Create a min-heap of first k+1 elements min_heap = nums[:k+1] heapq.heapify(min_heap) # Initialize index for the sorted array target_index = 0 for i in range(k+1, len(nums)): # Extract the minimum element from heap and add to the sorted part of array nums[target_index] = heapq.heappop(min_heap) target_index += 1 # Add the next element from the array to the heap heapq.heappush(min_heap, nums[i]) # Extract the remaining elements from the heap and add to the array while min_heap: nums[target_index] = heapq.heappop(min_heap) target_index += 1 return nums"},{"question":"You are given total N boxes placed in a row, each containing a certain number of items defined by an integer array A of length N. Chef loves to perform a specific type of operation on this array: he can add a certain amount, V, to all elements in a subarray defined by the range X to Y (both inclusive). Chef wants to determine the sum of items in the array after performing Q such operations. -----Input----- First line of input contains an integer N denoting the number of boxes. Second line contains N integers denoting the array A where A_i is the number of items in the i-th box. Third line contains an integer Q denoting the number of operations. Next Q lines contain three integers X, Y, and V where V is the amount to be added to the subarray from the X-th to Y-th element. -----Output----- Print an integer denoting the sum of items in the array after performing all the operations. -----Constraints----- - 1 leq N leq 10^5 - 1 leq A_i, V leq 10^3 - 1 leq Q leq 10^5 - 1 leq X leq Y leq N -----Example Input----- 5 1 2 3 4 5 3 1 3 2 2 4 1 5 5 3 -----Example Output----- 27 -----Explanation:----- Example case 1: Operations: 1. Add 2 to elements from index 1 to 3: [3, 4, 5, 4, 5] 2. Add 1 to elements from index 2 to 4: [3, 5, 6, 5, 5] 3. Add 3 to the element at index 5: [3, 5, 6, 5, 8] Sum of the array after all operations: 3+5+6+5+8 = 27.","solution":"def final_sum(N, A, Q, operations): Calculate the final sum of the array after performing all the operations. Parameters: N (int): Number of boxes. A (list of int): Initial number of items in each box. Q (int): Number of operations. operations (list of tuples): Each operation as a tuple (X, Y, V). Returns: int: The sum of items in the array after performing all operations. # Using a difference array to efficiently apply ranges of updates diff = [0] * (N + 1) for op in operations: X, Y, V = op diff[X - 1] += V if Y < N: diff[Y] -= V # Applying the difference array to the original array current_add = 0 for i in range(N): current_add += diff[i] A[i] += current_add return sum(A)"},{"question":"Write a function that compresses a given string by replacing sequences of the same character with that character followed by the number of times it appears consecutively. If the compressed string is not shorter than the original string, return the original string. Your function will receive one argument: the string to compress. Assumptions: * The string will only contain uppercase and/or lowercase alphabets. * The string won\'t be empty. Examples: ```python compress_string(\\"aabcccccaaa\\") ==> returns \\"a2b1c5a3\\" compress_string(\\"abcdef\\") ==> returns \\"abcdef\\" ```","solution":"def compress_string(s): Compresses the string by replacing sequences of the same character with that character followed by the number of times it appears consecutively. Returns the original string if the compressed string is not shorter. s: str - the string to compress. Returns: str - the compressed string or the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) # Append the last character and count compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"# Kata Task Write a function to determine if a string matches a given pattern. Each character in the pattern can be matched with any non-empty substring of the input string. No two characters in the pattern should match the same substring of the input string, but a character may match the same substring multiple times. For example, given the pattern `\'ab\'` and the string `\'redblueredblue\'`, a matching could be: * character `\'a\'` matches substring `\'red\'` * character `\'b\'` matches substring `\'blue\'` The function should return `true` if the input string follows the pattern defined above, otherwise return `false`. **Examples:** ```python matches_pattern(\'abab\', \'redblueredblue\') -> True matches_pattern(\'aaaa\', \'asdasdasdasd\') -> True matches_pattern(\'aabb\', \'xyzabcxzyabc\') -> False ``` **Notes** * The input strings `pattern` and `string` will contain only lowercase alphabet characters. * The length of the pattern string will be in the range [1, 20]. * The length of the input string will be in the range [1, 1000]. --- Series: * Pattern Matching * Pattern Matching 2","solution":"def matches_pattern(pattern, string): def match_helper(pattern_index, string_index, map, used): if pattern_index == len(pattern) and string_index == len(string): return True if pattern_index == len(pattern) or string_index == len(string): return False pat_char = pattern[pattern_index] for i in range(string_index, len(string)): substr = string[string_index:i+1] if pat_char in map: if map[pat_char] == substr: if match_helper(pattern_index + 1, i + 1, map, used): return True else: if substr in used: continue map[pat_char] = substr used.add(substr) if match_helper(pattern_index + 1, i + 1, map, used): return True del map[pat_char] used.remove(substr) return False return match_helper(0, 0, {}, set())"},{"question":"You are a developer working on a social media app. One feature of the app is to identify hashtags within user posts. A hashtag is defined as a \'#\' character followed by one or more alphanumeric characters (letters and numbers only). Write a function that takes a string representing a user\'s post and returns a list of the unique hashtags found within the post. For example, given \\"I love #coding and #python. #coding is great!\\", the function should return [\\"coding\\", \\"python\\"]. Another example: given \\"#happydays are here! Stay #happy and #blessed!\\", the function should return [\\"happydays\\", \\"happy\\", \\"blessed\\"]. Note that the hashtags should be returned in lowercase and without the \'#\' character. The order of hashtags in the return list does not matter. Non-alphanumeric characters should terminate the hashtag and be excluded from it. Here’s a function signature to use: ```python def extract_hashtags(post: str) -> List[str]: pass ```","solution":"from typing import List import re def extract_hashtags(post: str) -> List[str]: Extracts unique hashtags from a post. Args: post (str): The user\'s post containing hashtags. Returns: List[str]: A list of unique hashtags in lowercase without the \'#\' character. # Using regex to extract hashtags hashtags = re.findall(r\'#(w+)\', post) # Convert to lowercase and remove duplicates by using a set unique_hashtags = set(hashtag.lower() for hashtag in hashtags) return list(unique_hashtags)"},{"question":"Given an array of strings words, determine the number of distinct morphs that can be generated by rearranging the letters of each word. A morph is a distinct permutation of the letters in a single word. Return the total count of all distinct morphs for the given list of words. Example 1: Input: words = [\\"aab\\", \\"abb\\", \\"cd\\"] Output: 10 Explanation: For \\"aab\\", the distinct morphs are \\"aab\\", \\"aba\\", \\"baa\\" (3 morphs). For \\"abb\\", the distinct morphs are \\"abb\\", \\"bab\\", \\"bba\\" (3 morphs). For \\"cd\\", the distinct morphs are \\"cd\\", \\"dc\\" (2 morphs). The total count of all distinct morphs is 3 + 3 + 2 = 8. Example 2: Input: words = [\\"abc\\", \\"def\\"] Output: 12 Explanation: For \\"abc\\", the distinct morphs are \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\" (6 morphs). For \\"def\\", the distinct morphs are \\"def\\", \\"dfe\\", \\"edf\\", \\"efd\\", \\"fde\\", \\"fed\\" (6 morphs). The total count of all distinct morphs is 6 + 6 = 12. Constraints: 1 <= words.length <= 10^5 1 <= words[i].length <= 10 words[i] consists of lowercase English letters.","solution":"from math import factorial from collections import Counter def distinct_morph_count(words): def morph_count(word): freq = Counter(word) word_length = len(word) count = factorial(word_length) for val in freq.values(): count //= factorial(val) return count total_morphs = 0 for word in words: total_morphs += morph_count(word) return total_morphs"},{"question":"Write a function that takes a list of integers and returns the average of the numbers that are in the range 10 to 20 (inclusive). If no numbers are in this range, the function should return None. # Example ```python average_in_range([4, 15, 23, 12, 7, 11]) ==> 12.666666666666666 average_in_range([1, 5, 6]) ==> None ```","solution":"def average_in_range(numbers): Returns the average of the numbers that are in the range 10 to 20 (inclusive). If no numbers are in this range, return None. in_range = [num for num in numbers if 10 <= num <= 20] if not in_range: return None return sum(in_range) / len(in_range)"},{"question":"In a distant land, there is a magical forest where the trees are numbered from 1 to N. Each tree has a value representing its magical power. The wizard wants to find out a special sum of powers that is computed using a particular set of rules. The rules are as follows: 1. Select any three trees such that their combined sum of magical powers is maximum possible. 2. The selected trees must have different numbers (i.e., you cannot select the same tree more than once). Write a program to help the wizard find the maximum possible sum of powers of any three different trees. -----Input:----- The first line contains an integer N, the number of trees. The second line contains N integers representing the magical powers of the trees from 1 to N. -----Output:----- Output a single line containing the maximum possible sum of the powers of any three different trees. -----Constraints:----- 3 <= N <= 1000 -1000 <= Power of each tree <= 1000 -----Example:----- Input: 5 8 1 9 -5 4 Output: 21 Explanation: The three trees with powers 8, 9, and 4 give the maximum possible sum which is 21.","solution":"def max_sum_of_three_trees(N, powers): Find the maximum possible sum of the powers of any three different trees. Parameters: N (int): The number of trees. powers (list of int): The list of integers representing the magical powers of the trees. Returns: int: The maximum possible sum of the powers of any three different trees. # Sort the powers in descending order to get the three largest values easily sorted_powers = sorted(powers, reverse=True) # The maximum possible sum of three different trees is the sum of the three largest values return sum(sorted_powers[:3])"},{"question":"Objective Implement a function that takes an integer array and a target integer. The goal is to determine if there are two distinct elements in the array whose sum equals the target integer. Return `True` if such a pair exists, otherwise return `False`. # Constraints - The array length will be between 1 and 10^5. - Each element of the array will be an integer between -10^5 and 10^5. - The target will be an integer between -2*10^5 and 2*10^5. # Example Input ```python arr = [2, 7, 11, 15] target = 9 ``` Output ```python True ``` Input ```python arr = [1, 2, 3, 4, 5] target = 10 ``` Output ```python False ``` Function signature ```python def has_pair_with_sum(arr: List[int], target: int) -> bool: pass ```","solution":"from typing import List def has_pair_with_sum(arr: List[int], target: int) -> bool: Determines if there are two distinct elements in the array whose sum equals the target integer. Args: arr: List of integers. target: The target integer. Returns: bool: True if there exists a pair of distinct elements whose sum equals the target, False otherwise. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"Write a function that takes a string representing an arithmetic expression involving two non-negative integers and an operator (\'+\', \'-\', \'*\', \'/\'), and returns the result of the expression as an integer. The input string format will always be \\"<integer> <operator> <integer>\\". Ensure proper handling of division which should truncate towards zero. Examples: - Input: \\"4 + 2\\" Output: 6 - Input: \\"10 - 3\\" Output: 7 - Input: \\"7 * 5\\" Output: 35 - Input: \\"9 / 2\\" Output: 4","solution":"def evaluate_expression(expression): Evaluates a simple arithmetic expression given as a string with <integer> <operator> <integer> format. :param expression: str, the arithmetic expression :return: int, the result of the evaluated expression num1, operator, num2 = expression.split() num1 = int(num1) num2 = int(num2) if operator == \'+\': return num1 + num2 elif operator == \'-\': return num1 - num2 elif operator == \'*\': return num1 * num2 elif operator == \'/\': return num1 // num2 else: raise ValueError(\\"Invalid operator\\")"},{"question":"In a city, there are n parks numbered from 1 to n. Each park has an initial number of trees. There are m operations to be performed on these parks. Each operation can either add or remove some number of trees from a specific park or ask for the total number of trees in a subset of parks. The operations are of three types: 1. `add p x`: Add `x` trees to park `p`. 2. `remove p x`: Remove `x` trees from park `p`. A park cannot have a negative number of trees; if the operation would cause the number of trees to drop below zero, the number of trees in that park becomes zero instead. 3. `query l r`: Calculate the total number of trees in all parks from `l` to `r` (inclusive). Write a program to perform these operations and output the results of all `query` operations. -----Input----- - The first line contains two space-separated integers n and m - the number of parks and the number of operations. - The second line contains n space-separated integers, where the i-th integer represents the initial number of trees in the i-th park. - Each of the next m lines describes an operation in one of the three formats mentioned above. -----Output----- For each `query` operation, output a single integer, the total number of trees in the specified range of parks. -----Constraints----- - 1 le n, m le 100,000 - 0 le initial number of trees in a park, x le 1,000 - 1 le p le n - 1 le l le r le n - 0 le x le 1,000 -----Example Input----- 5 6 2 3 1 4 5 add 2 3 query 1 3 remove 4 2 query 3 5 add 1 1 query 1 5 -----Example Output----- 9 13 16 -----Explanation----- Example case: - Initial number of trees in parks: [2, 3, 1, 4, 5] - After `add 2 3`: [2, 6, 1, 4, 5] - `query 1 3`: Total trees from park 1 to 3 = 2 + 6 + 1 = 9 - After `remove 4 2`: [2, 6, 1, 2, 5] - `query 3 5`: Total trees from park 3 to 5 = 1 + 2 + 5 = 8 - After `add 1 1`: [3, 6, 1, 2, 5] - `query 1 5`: Total trees from park 1 to 5 = 3 + 6 + 1 + 2 + 5 = 17","solution":"def manage_parks(n, m, initial_trees, operations): parks = initial_trees[:] result = [] for op in operations: parts = op.split() if parts[0] == \'add\': p, x = int(parts[1]), int(parts[2]) parks[p - 1] += x elif parts[0] == \'remove\': p, x = int(parts[1]), int(parts[2]) parks[p - 1] = max(0, parks[p - 1] - x) elif parts[0] == \'query\': l, r = int(parts[1]), int(parts[2]) total = sum(parks[l - 1: r]) result.append(total) return result"},{"question":"Write a function that takes a string and returns true if all parentheses in the string are properly closed and nested. A properly closed parenthesis is one where every opening parenthesis has a corresponding closing parenthesis and they are correctly nested. Return false otherwise. Examples: `\\"(a + b) * (c + d)\\"` => true `\\"((a + b) * c)` => false `\\"(a + (b * (c + d)))\\"` => true `\\"((a + b) * c) + (d\\"` => false `\\"a + b) * (c + d(\\"` => false `\\"a + b * c + d\\"` => true","solution":"def are_parentheses_closed(s): Returns True if all parentheses in the string are properly closed and nested, otherwise returns False. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack"},{"question":"Farmer Joe has a rectangular field divided into a grid of 1x1 meter squares. He wants to plant trees such that each tree is planted at the intersection of grid lines (including the boundary lines of the field). Given the dimensions of the field, Farmer Joe wants to know the maximum number of trees he can plant. For example, for a field of dimensions 4x3 meters, Farmer Joe can place trees at the following intersections: ``` +---+---+---+---+ | | | | | +---+---+---+---+ | | | | | +---+---+---+---+ | | | | | +---+---+---+---+ ``` In this case, the maximum number of trees is 20. Write a function max_trees(width, height) to calculate the number of trees Farmer Joe can plant given the width and height of the field in meters. **Function Signature:** ```python def max_trees(width: int, height: int) -> int: # your code here ``` **Examples:** ``` max_trees(4, 3) -> 20 max_trees(2, 2) -> 9 max_trees(5, 1) -> 12 ```","solution":"def max_trees(width: int, height: int) -> int: Returns the maximum number of trees Farmer Joe can plant at the intersections of grid lines in a field of given width and height. return (width + 1) * (height + 1)"},{"question":"You are given a list of integers and a target sum. Write a function that finds all unique pairs of integers in the list that sum up to the target sum. Return the pairs as a list of tuples. The solution must have time complexity of O(n log n) and space complexity of O(n). Example 1: Input: nums = [1, 2, 3, 4, 5, 6, 7, 8, 9] target = 10 Output: [(1, 9), (2, 8), (3, 7), (4, 6)] Example 2: Input: nums = [1, 2, 2, 3, 4, 5] target = 6 Output: [(1, 5), (2, 4)] Note: - The pairs in the output list should be sorted in ascending order. - Each pair should be sorted such that the smaller number comes first.","solution":"def find_pairs(nums, target): Returns a list of unique pairs of integers from nums that sum up to the target. nums.sort() pairs = set() seen = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(list(pairs))"},{"question":"Write a function that takes in two lists of integers and returns a list containing only the elements that are common to both lists, without duplicates. The elements in the output list should be sorted in ascending order. For example, given the following input: ```cs List<int> list1 = new List<int> {1, 2, 3, 4, 5}; List<int> list2 = new List<int> {4, 5, 6, 7, 8}; // Should return [4, 5] ``` ```python list1 = [1, 2, 3, 4, 5] list2 = [4, 5, 6, 7, 8] # Should return [4, 5] ``` ```cs public List<int> GetCommonElements(List<int> list1, List<int> list2) ``` ```python def get_common_elements(list1, list2): ``` Consider the cases where there are no common elements, some common elements, and where one or both lists are empty. The function should handle these cases appropriately.","solution":"def get_common_elements(list1, list2): Returns a list of elements that are common to both list1 and list2, without duplicates. The elements in the output list are sorted in ascending order. set1 = set(list1) set2 = set(list2) common_elements = set1.intersection(set2) return sorted(common_elements)"}]'),F={name:"App",components:{PoemCard:A},data(){return{searchQuery:"",visibleCount:4,poemsData:O,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},C={class:"card-container"},R={key:0,class:"empty-state"},Y=["disabled"],j={key:0},L={key:1};function z(r,e,u,m,s,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[_,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),i(w,null,y(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",R,' No results found for "'+h(s.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),i("span",L,"Loading...")):(n(),i("span",j,"See more"))],8,Y)):l("",!0)])}const P=d(F,[["render",z],["__scopeId","data-v-75eba9bc"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/23.md","filePath":"deepseek/23.md"}'),M={name:"deepseek/23.md"},W=Object.assign(M,{setup(r){return(e,u)=>(n(),i("div",null,[x(P)]))}});export{B as __pageData,W as default};
