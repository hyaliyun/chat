import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(r,e,h,m,s,a){return n(),i("div",k,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const j=d(q,[["render",O],["__scopeId","data-v-0b402b6a"]]),Y=JSON.parse('[{"question":"You are given a list of activities, each represented by a pair of integers `[start, end]`. Each activity starts at `start` and ends at `end`. You want to select the maximum number of non-overlapping activities that you can attend. Note that if `start` is equal to `end`, it means the activity is instantaneous and occupies only one time slot. Write a function `maxNonOverlappingActivities(activities)` that takes a list of activities and returns the maximum number of non-overlapping activities you can attend. **Input:** - A list of tuples, where each tuple `(start, end)` represents an activity. - 1 ≤ len(activities) ≤ 100 - 0 ≤ start < end ≤ 1000 **Output:** - An integer representing the maximum number of non-overlapping activities. **Example:** ```python def example(): activities = [(1, 3), (2, 4), (3, 5), (7, 8)] print(maxNonOverlappingActivities(activities)) # Output: 3 activities = [(0, 1), (3, 4), (1, 2), (5, 6)] print(maxNonOverlappingActivities(activities)) # Output: 4 ``` **Function signature:** `def maxNonOverlappingActivities(activities: List[Tuple[int, int]]) -> int:` **Explanation:** - In the first example: - You can attend activities (1, 3), (3, 5), and (7, 8) which are non-overlapping. - In the second example: - You can attend all activities as none of them overlap.","solution":"from typing import List, Tuple def maxNonOverlappingActivities(activities: List[Tuple[int, int]]) -> int: # Sort the activities based on their end times activities.sort(key=lambda x: x[1]) # Initialize variables count = 0 last_end_time = -1 # Iterate through the sorted list of activities for start, end in activities: if start >= last_end_time: # If the start time of the current activity is greater or equal to the end time of the last attended activity count += 1 last_end_time = end return count"},{"question":"You are given a string consisting of lowercase alphabets and digits. Write a function that counts the number of vowels (a, e, i, o, u) and the number of digits in the string, and returns them as a tuple (number_of_vowels, number_of_digits). The function should be implemented as follows: - Define a function named `count_vowels_and_digits(string: str) -> tuple`. - The parameter `string` is a non-empty string consisting of lowercase alphabets and digits. - Return a tuple where the first element is the count of vowels and the second element is the count of digits.","solution":"def count_vowels_and_digits(string: str) -> tuple: Counts the number of vowels and the number of digits in the given string. Parameters: string (str): The input string consisting of lowercase alphabets and digits. Returns: tuple: A tuple where the first element is the count of vowels and the second element is the count of digits. vowels = set(\'aeiou\') num_vowels = 0 num_digits = 0 for char in string: if char in vowels: num_vowels += 1 elif char.isdigit(): num_digits += 1 return num_vowels, num_digits"},{"question":"You are given an array of integers. Your task is to find the smallest positive integer that is not the sum of a subset of the given array. Input: - The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. Output: - Print the smallest positive integer that is not the sum of a subset of the given array. Example: Input: 5 1 2 2 5 7 Output: 18 Explanation: - All sums of subsets from the given array are {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 24}. The smallest positive integer not represented in this list is 18.","solution":"def smallest_non_subset_sum(n, arr): Find the smallest positive integer that is not the sum of a subset of the given array. arr.sort() smallest_sum = 1 for num in arr: if num > smallest_sum: break smallest_sum += num return smallest_sum"},{"question":"Johan and Lara are playing a game with strings. Johan created a string and wants Lara to check whether the string can be transformed into a palindrome by rearranging its characters. Lara can only rearrange the characters but not change or remove any character. She needs your help to determine if it\'s possible. A palindrome is a string that reads the same forward and backward. For example, \\"radar\\", \\"level\\", and \\"anna\\" are palindromes. Given a string, determine if it can be rearranged to form a palindrome. The first line contains an integer t (1 le t le 1000). Then t test cases follow. The first line of each test case contains one integer n (1 le n le 100) – the length of the string. The second line contains a string of length n, consisting of lowercase Latin letters. For each test case output: \\"YES\\" if the string can be rearranged to form a palindrome, and \\"NO\\" otherwise. You may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as positive answers). **Example:** Input: ``` 3 6 aabbcc 5 abcba 4 abac ``` Output: ``` YES YES NO ```","solution":"def can_form_palindrome(t, test_cases): results = [] for i in range(t): n, s = test_cases[i] char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"You are a software architect designing a new ticket management system for a fleet of buses. Each bus has a unique ID and commutes between multiple origin-destination pairs throughout the day. When a ticket is issued, it contains the bus ID, the origin and destination cities, and the departure time. To track and analyze the efficiency of the fleet, you need to develop a feature that provides insights into peak travel times and most frequented routes. Specifically, you need a function that processes a list of issued tickets and determines the most popular route (i.e., the combination of origin and destination that has the highest number of tickets), and the peak travel hour (i.e., the hour of the day when the most tickets are issued). Write a function `analyze_tickets` that takes a list of tickets as input and returns a tuple containing the most popular route and the peak travel hour. Each ticket in the input list is represented by a dictionary with the following keys: - `bus_id`: (String) The unique ID of the bus. - `origin`: (String) The origin city. - `destination`: (String) The destination city. - `departure_time`: (String) The departure time in the format \\"YYYY-MM-DD HH:MM\\". The function should return a tuple (most_popular_route, peak_travel_hour) where: - `most_popular_route` is a tuple (origin, destination) representing the most popular route. - `peak_travel_hour` is an integer representing the hour of the day (0-23) with the highest number of tickets issued. If there are multiple routes with the same number of tickets, return any of them. If multiple hours have the same number of tickets issued, return any of them. # Example ```python tickets = [ {\\"bus_id\\": \\"B1\\", \\"origin\\": \\"CityA\\", \\"destination\\": \\"CityB\\", \\"departure_time\\": \\"2023-01-01 09:00\\"}, {\\"bus_id\\": \\"B2\\", \\"origin\\": \\"CityA\\", \\"destination\\": \\"CityC\\", \\"departure_time\\": \\"2023-01-01 10:00\\"}, {\\"bus_id\\": \\"B1\\", \\"origin\\": \\"CityA\\", \\"destination\\": \\"CityB\\", \\"departure_time\\": \\"2023-01-01 11:00\\"}, {\\"bus_id\\": \\"B3\\", \\"origin\\": \\"CityB\\", \\"destination\\": \\"CityC\\", \\"departure_time\\": \\"2023-01-01 09:30\\"}, {\\"bus_id\\": \\"B2\\", \\"origin\\": \\"CityA\\", \\"destination\\": \\"CityC\\", \\"departure_time\\": \\"2023-01-01 09:45\\"}, ] result = analyze_tickets(tickets) print(result) # Output: ((\\"CityA\\", \\"CityB\\"), 9) ```","solution":"from collections import Counter from datetime import datetime def analyze_tickets(tickets): route_counter = Counter() hour_counter = Counter() for ticket in tickets: route = (ticket[\'origin\'], ticket[\'destination\']) departure_time = datetime.strptime(ticket[\'departure_time\'], \\"%Y-%m-%d %H:%M\\") hour = departure_time.hour route_counter[route] += 1 hour_counter[hour] += 1 most_popular_route = route_counter.most_common(1)[0][0] peak_travel_hour = hour_counter.most_common(1)[0][0] return most_popular_route, peak_travel_hour"},{"question":"You are given a grid of size n x m that contains different characters. Your task is to identify the length of the longest path that can be formed by moving only to adjacent cells (up, down, left, right) such that no character repeats on this path. Each cell in the grid can be visited once and you have to start the path from a given cell specified by its row and column index. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the dimensions of the grid. - The next n lines each contain m characters — the grid. - The last line contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the starting position of the path. # Output Print a single integer – the length of the longest path without repeating characters starting from the specified cell. # Example Input ``` 3 4 abcd efgh ijkl 1 1 ``` Output ``` 12 ``` # Note In the given example, one of the valid paths of maximum length is `a -> b -> c -> d -> h -> g -> f -> e -> i -> j -> k -> l`. This problem requires the implementation of a search algorithm, potentially using depth-first search (DFS) or backtracking to explore all possible paths while ensuring characters are not repeated on any single path.","solution":"def longest_path(grid, start_row, start_col): def dfs(x, y, visited): nonlocal n, m, max_length max_length = max(max_length, len(visited)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] not in visited: visited.add(grid[nx][ny]) dfs(nx, ny, visited) visited.remove(grid[nx][ny]) n = len(grid) m = len(grid[0]) max_length = 0 start_row -= 1 # Adjust for 0-based indexing start_col -= 1 # Adjust for 0-based indexing visited = set() visited.add(grid[start_row][start_col]) dfs(start_row, start_col, visited) return max_length"},{"question":"Given a bookshelf with a width of `w` and `n` books, where the books all have different widths but the same height, determine if it is possible to arrange all `n` books on the shelf without exceeding its width. Each book can only be placed horizontally and cannot be rotated. The input consists of an integer `w` representing the width of the bookshelf (15 ≤ w ≤ 50), an integer `n` representing the number of books (1 ≤ n ≤ 10), and a list of `n` integers where each integer represents the width of a book (1 ≤ width of each book ≤ 10). Write a single YES or NO. Write YES if and only if the total width of the books is less than or equal to the width of the bookshelf. Example input: ``` w = 25 n = 3 book_widths = [10, 8, 7] ``` Example output: ``` YES ```","solution":"def can_fit_bookshelf(w, n, book_widths): Determine if all books can fit on the shelf without exceeding its width. Parameters: w (int): width of the bookshelf n (int): number of books book_widths (list of int): widths of the books Returns: str: \\"YES\\" if all books can fit on the shelf, \\"NO\\" otherwise if sum(book_widths) <= w: return \\"YES\\" else: return \\"NO\\""},{"question":"A team of developers is implementing a new feature for an online collaborative document editor. The feature automatically tracks and visually tags sections of the document edited by different users. Each user is identified by a unique integer ID. A log of edits is provided, where each entry contains four values: the integer user ID, and the integer start and end positions of a section they edited within the document (both inclusive), as well as the sequence number indicating the order of edits. The edits are non-overlapping and occur in the order they appear in the log. You are required to determine the final range of positions edited by each user and print them in the order of user IDs. If a user has not edited any sections, they should not appear in the output. The first line contains an integer n (1 ≤ n ≤ 100), the number of edits in the log. The next n lines describe the document edits, each containing four integers: user_id, start, end, seq (1 ≤ user_id ≤ 100, 1 ≤ start ≤ end ≤ 1000, 1 ≤ seq ≤ n). For each user ID that appears in the log, print the user ID followed by the list of ranges they edited in sorted order (by start position). If a user edited multiple disjoint ranges, output them all. # Input: * The first input line contains an integer n (1 ≤ n ≤ 100). * Each of the following n lines contains four integers: user_id, start, end, seq. # Output: * For each user ID that appears in the log, in ascending order of user IDs, print the user ID followed by the ranges they edited. Each range is represented as (start, end). # Example: Input: ``` 5 3 5 9 1 1 2 4 2 2 12 14 3 1 15 18 4 3 20 25 5 ``` Output: ``` 1: (2, 4), (15, 18) 2: (12, 14) 3: (5, 9), (20, 25) ```","solution":"def track_edits(n, edits): Returns the final range of positions edited by each user. Parameters: n (int): the number of edits in the log edits (list of list of int): each entry is [user_id, start, end, seq] Returns: dict: keys are user IDs, values are lists of tuples representing the ranges from collections import defaultdict # Store edits by user user_edits = defaultdict(list) for edit in edits: user_id, start, end, _ = edit user_edits[user_id].append((start, end)) # Sort ranges for each user for user_id in user_edits: user_edits[user_id].sort() return user_edits def format_output(user_edits): result = [] for user_id in sorted(user_edits): ranges = \\", \\".join(f\\"({start}, {end})\\" for start, end in user_edits[user_id]) result.append(f\\"{user_id}: {ranges}\\") return \\"n\\".join(result) def process_input(n, edits): user_edits = track_edits(n, edits) return format_output(user_edits)"},{"question":"You are given an m x n grid of characters with a hidden word. The word can be constructed by concatenating letters sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell cannot be used more than once. Write a function to determine if the word exists in the grid. Implement the function `def exists(board: List[List[str]], word: str) -> bool:` that takes in a 2D list `board` representing the grid and a string `word` representing the word to be searched. **Input:** - `board`: a 2D character grid with 1 ≤ m, n ≤ 200 - `word`: a string with 1 ≤ word.length ≤ 100. **Output:** - Return `True` if the word is found in the grid, otherwise return `False`. **Example:** ```python board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word1 = \\"ABCCED\\" => True word2 = \\"SEE\\" => True word3 = \\"ABCB\\" => False ``` **Note:** You may assume that all the characters in the word and the board are uppercase English letters.","solution":"from typing import List def exists(board: List[List[str]], word: str) -> bool: def dfs(x, y, word_index): if word_index == len(word): return True if (x < 0 or y < 0 or x >= len(board) or y >= len(board[0]) or board[x][y] != word[word_index]): return False # Mark the cell as visited by temporarily changing the character temp = board[x][y] board[x][y] = \'#\' # Explore all possible directions result = (dfs(x + 1, y, word_index + 1) or dfs(x - 1, y, word_index + 1) or dfs(x, y + 1, word_index + 1) or dfs(x, y - 1, word_index + 1)) # Restore the original cell value board[x][y] = temp return result for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == word[0]: # Starting point if dfs(i, j, 0): return True return False"},{"question":"In a unique surveillance system, a sequence of distinct integers represents a timeline of events detected by sensors. Each event can have a priority level, which determines its criticality, but not necessarily in a linear fashion. You are tasked with identifying the highest priority event within specific segments of the timeline. You are given an array of n distinct integers where each integer denotes an event at a specific time, with its value representing the priority of the event. Additionally, there are q queries, each specifying a segment of the timeline for which you need to find the maximum priority event. The first line of input contains two integers n and q (1 ≤ n, q ≤ 100,000); the number of events and the number of queries, respectively. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the priorities of the events in the order they appear on the timeline. Each of the next q lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) — specifying the segment of the timeline (1-based inclusive indices) for which you must find the maximum priority event. Print q lines, each containing a single integer — the maximum priority event in the specified segment. For example, given the following inputs: ``` 5 3 3 1 4 8 2 1 3 2 5 1 5 ``` The output would be: ``` 4 8 8 ```","solution":"def max_priority_event(n, q, events, queries): Returns the highest priority event within specific segments of the timeline. Parameters: n (int): The number of events. q (int): The number of queries. events (list of int): The list of events\' priorities. queries (list of tuple): The list of queries specifying segments ([l, r]). Returns: list of int: Maximum priority event for each query. results = [] for (l, r) in queries: results.append(max(events[l-1:r])) return results"},{"question":"A group of archaeologists has uncovered an ancient artifact that appears to be a mysterious rectangular grid of numbers. This grid consists of N rows and M columns. After some analysis, they discovered that it hides a secret message if we follow a special pattern. To decode the secret message, they start from the top-left corner (1,1) and spiral clockwise inward. The sequence starts from the top row, proceeds to the rightmost column, then the bottom row (in reverse), and finally the leftmost column (in reverse). This pattern continues inward until all cells are visited. You are asked to write a program that decodes the secret message from the grid. # Input: - The first line contains two integers N and M (1 ≤ N, M ≤ 100), the number of rows and columns in the grid. - Each of the next N lines contains M integers representing the grid. # Output: - Output a single line containing the secret message decoded by following the spiral pattern. # Example: Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 1 2 3 6 9 8 7 4 5 ``` Input: ``` 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` Output: ``` 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10 ``` In this problem, your task is to implement a function that decodes the secret message encoded in a grid of numbers by following the specified spiral pattern.","solution":"def decode_spiral_message(grid): Decodes the secret message from the grid by following the spiral pattern clockwise. :param grid: List of List of integers representing the grid :return: List of integers representing the decoded message if not grid: return [] N = len(grid) M = len(grid[0]) top, bottom, left, right = 0, N - 1, 0, M - 1 result = [] while top <= bottom and left <= right: # Move right across the top row for j in range(left, right + 1): result.append(grid[top][j]) top += 1 # Move down the rightmost column for i in range(top, bottom + 1): result.append(grid[i][right]) right -= 1 if top <= bottom: # Move left across the bottom row for j in range(right, left - 1, -1): result.append(grid[bottom][j]) bottom -= 1 if left <= right: # Move up the leftmost column for i in range(bottom, top - 1, -1): result.append(grid[i][left]) left += 1 return result"},{"question":"You are working with a system that processes a list of tasks, each of which is characterized by a positive integer representing its processing time. The system can execute multiple tasks in parallel but cannot execute tasks consecutively due to a cool-down period that must be respected once a task finishes. An empty waiting period denotes the time a machine must remain idle before it can start executing another task, ensuring that no task starts immediately after another finishes on the same machine. The cool-down period is specified in seconds. You are given the list of tasks with their processing times and the cool-down period. You need to determine the minimal time required to complete all tasks, given that multiple machines are available to execute the tasks in parallel. Write a function `min_time_to_complete(tasks: List[int], cooldown: int) -> int` that takes in: - `tasks`: a list of integers where each integer represents the processing time of a task. - `cooldown`: an integer representing the cool-down period between tasks on the same machine. The function should return an integer representing the minimal time required to complete all tasks. **Constraints:** - `1 <= len(tasks) <= 10^5` - `1 <= tasks[i] <= 10^4` - `0 <= cooldown <= 10^4` **Example:** ```python def min_time_to_complete(tasks: List[int], cooldown: int) -> int: # Implement your solution here. pass # Example usage print(min_time_to_complete([2, 3, 1, 4], 2)) # Outputs 4, because tasks can be executed on different machines to minimize time print(min_time_to_complete([1, 2, 3, 2], 1)) # Outputs 4, staggered execution to maintain cool-down conditions ``` **Input:** - tasks: `[2, 3, 1, 4]` - cooldown: `2` **Output:** `4` **Explanation:** One of the possible schedules is: - Machine 1: [2, 3] - Machine 2: [1, 4] The first machine executes tasks 1 (2 seconds) and 2 (3 seconds) with a cool-down period of 2 seconds between them which fits perfectly, while the second machine executes tasks 3 (1 second) and 4 (4 seconds) under the same cool-down rules. Hence, minimal time to complete all tasks is the maximum processing time on any machine, which is 2 (for Machine 1) + 2 (cool-down period) = 4 seconds.","solution":"from typing import List def min_time_to_complete(tasks: List[int], cooldown: int) -> int: Determines the minimal time required to complete all tasks given the cool-down period. if not tasks: return 0 tasks.sort(reverse=True) # Cool-down time does not impact the minimum time when we can use separate machines return max(tasks)"},{"question":"Masha is fascinated by an array containing some integers. One day, she wrote down an array ( A ) of size ( n ) with different integers on a paper. Grisha, her friend, wants to create a new array ( B ) of the same size ( n ), such that the bitwise AND of every pair ( (ai, bj) ) is distinct, where ( ai ) is an element of ( A ) and ( bj ) is an element of ( B ). Given the constraints: - The range of values in arrays ( A ) and ( B ) is from 1 to ( 10^6 ). - The size of array ( n ) can be up to 50. Determine the array ( B ) for Grisha. # Input The input data contains multiple test cases. The first line contains an integer ( t ) representing the number of test cases (1 ≤ ( t ) ≤ 100). Each test case is represented as follows: - The first line contains an integer ( n ) representing the number of elements in array ( A ) (1 ≤ ( n ) ≤ 50). - The second line contains ( n ) distinct integers ( a_i ) (1 ≤ ( a_i ) ≤ ( 10^6 )). # Output For each test case, output ( n ) integers representing the array ( B ) containing ( n ) distinct integers ( b_j ) (1 ≤ ( b_j ) ≤ ( 10^6 )) such that for all pairs ( (a_i, b_j) ), the bitwise AND result is unique across all combinations. If there are multiple valid solutions, output any one of them.","solution":"def create_distinct_bitwise_and_array(t, test_cases): Given multiple test cases, for each input array A, generate a corresponding array B such that the bitwise AND of each pair (ai, bj) is unique. Parameters: t (int): number of test cases test_cases (list of tuples): each tuple contains a value n and an array A of size n Returns: list of lists: each list contains the array B for each test case results = [] for n, A in test_cases: B = list(range(1, n + 1)) results.append(B) return results"},{"question":"Your company has recently developed an innovative text-based game that includes various virtual items. The game stores the items and their properties in a complex data structure. The player interaction with this data structure is primarily through predefined queries. Your task is to implement a system that can efficiently handle these queries. # Task You\'re given a collection of items, each with a unique ID, name, and duration. The duration represents the time (in minutes) the item remains available from the current time. Players can execute the following queries on the item collection: 1. **Add Item**: Add a new item to the collection. 2. **Remove Item**: Remove an item from the collection given its ID. 3. **Extend Duration**: Extend the duration of an item given its ID by a specified number of minutes. 4. **List Items**: List all items that are currently available, sorted by their durations in ascending order. # Input 1. The first line contains an integer q (1 le q le 10^5), the number of queries. 2. Each of the next q lines contains a query. The format of each query is described as below: - **Add Item**: \\"ADD id name duration\\" - **Remove Item**: \\"REMOVE id\\" - **Extend Duration**: \\"EXTEND id additional_duration\\" - **List Items**: \\"LIST\\" # Output For each \\"LIST\\" query, output the IDs and names of currently available items, sorted by their durations in ascending order. If two items have the same duration, sort them by their IDs. If no items are available, output \\"NO ITEMS\\". # Example Input ``` 7 ADD 1 sword 60 ADD 2 shield 50 ADD 3 potion 20 LIST EXTEND 3 40 REMOVE 2 LIST ``` Output ``` 3 potion 2 shield 1 sword 1 sword 3 potion NO ITEMS ``` # Notes - Your implementation should be efficient with respect to time and space. - Assume all IDs are unique and duration, additional_duration are non-negative integers. - Item names do not contain whitespace and have a maximum length of 20 characters. - The duration of extended items should be recalculated relative to the current time. Implement the system in such a way that it can handle the large volume of queries efficiently.","solution":"import heapq class ItemCollection: def __init__(self): self.items = {} self.available_items = [] self.current_time = 0 def add_item(self, id, name, duration): self.items[id] = {\'name\': name, \'duration\': duration} heapq.heappush(self.available_items, (duration, id, name)) def remove_item(self, id): if id in self.items: del self.items[id] def extend_item_duration(self, id, additional_duration): if id in self.items: self.items[id][\'duration\'] += additional_duration # Once updated, re-add to heap heapq.heappush(self.available_items, (self.items[id][\'duration\'], id, self.items[id][\'name\'])) def list_items(self): while self.available_items: duration, id, name = heapq.heappop(self.available_items) if id in self.items and self.items[id][\'duration\'] == duration: heapq.heappush(self.available_items, (duration, id, name)) return [(id, name) for duration, id, name in sorted(self.available_items) if id in self.items] return [] def process_queries(queries): item_collection = ItemCollection() results = [] for query in queries: parts = query.split() action = parts[0] if action == \\"ADD\\": id = int(parts[1]) name = parts[2] duration = int(parts[3]) item_collection.add_item(id, name, duration) elif action == \\"REMOVE\\": id = int(parts[1]) item_collection.remove_item(id) elif action == \\"EXTEND\\": id = int(parts[1]) additional_duration = int(parts[2]) item_collection.extend_item_duration(id, additional_duration) elif action == \\"LIST\\": items = item_collection.list_items() if items: results.append(\\"n\\".join(f\\"{id} {name}\\" for id, name in items)) else: results.append(\\"NO ITEMS\\") return results"},{"question":"You are given a rectangular matrix of size n times m filled with distinct integers. Your task is to find the largest square sub-matrix (containing only distinct integers) present in the matrix. In the first line of input, there is one integer t (1 le t le 50), the number of test cases. For each test case: - The first line contains two integers n and m (1 le n, m le 1000), the dimensions of the matrix. - The next n lines each contain m integers, representing the elements of the matrix. For each test case, print the size of the largest square sub-matrix containing distinct integers. Input: ``` 2 3 3 1 2 3 4 5 6 7 8 9 4 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ``` Output: ``` 3 4 ```","solution":"def largest_square_submatrix(t, test_cases): def is_distinct(matrix, r, c, size): seen = set() for i in range(r, r + size): for j in range(c, c + size): if matrix[i][j] in seen: return False seen.add(matrix[i][j]) return True results = [] for case in test_cases: n, m, matrix = case[\'n\'], case[\'m\'], case[\'matrix\'] max_square_size = 0 min_dim = min(n, m) for size in range(1, min_dim + 1): found = False for r in range(n - size + 1): if found: break for c in range(m - size + 1): if is_distinct(matrix, r, c, size): max_square_size = size found = True break results.append(max_square_size) return results"},{"question":"You are given a string s consisting of lowercase English letters. You have to process two types of queries: 1. REPLACE i c: Replace the character at position i with character c (1 ≤ i ≤ length(s), c is a lowercase English letter). 2. PALINDROME li ri: Check whether the substring from position li to ri (both inclusive) is a palindrome (1 ≤ li ≤ ri ≤ length(s)). You need to print the result (\\"YES\\" or \\"NO\\") for each PALINDROME query. The first line contains an integer m (1 ≤ m ≤ 100000) — the number of queries to process. The second line contains the string s. Then m lines follow, each containing a query of one of the two types mentioned above. For each PALINDROME query, print the answer to it.","solution":"def process_queries(s, queries): s = list(s) results = [] for query in queries: parts = query.split() if parts[0] == \\"REPLACE\\": i = int(parts[1]) - 1 c = parts[2] s[i] = c elif parts[0] == \\"PALINDROME\\": li = int(parts[1]) - 1 ri = int(parts[2]) substring = s[li:ri] if substring == substring[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In the world of programming, balanced parentheses strings are very important. Given a string consisting of only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. An empty string is also considered valid. Write a function that takes a single string as input and returns `True` if the string is valid, and `False` otherwise. Example Cases: Example 1: Input: `s = \\"()\\"` Output: `True` Example 2: Input: `s = \\"()[]{}\\"` Output: `True` Example 3: Input: `s = \\"(]\\"` Output: `False` Constraints: - The input string will only contain \'(\', \')\', \'{\', \'}\', \'[\' and \']\' characters. - The length of the input string will be at most 1000. Ensure your function is efficient in terms of time and space complexity.","solution":"def is_valid_parentheses(s): Determine if the input string of parentheses is valid. Arguments: s -- input string consisting of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' Returns: True if the string is valid, otherwise False stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"A small robotics company is developing a new prototype of an autonomous delivery robot. The robot will navigate through a grid representing a warehouse with obstacles. The grid is represented by a 2D array where each cell is either empty (represented by a 0) or contains an obstacle (represented by a 1). The robot starts at the top-left corner of the grid (cell [0][0]) and must reach the bottom-right corner (cell [n-1][m-1]), moving only up, down, left, or right. Write a function to determine if the robot can successfully reach the destination cell. If the robot can reach the destination, output the minimum number of moves it takes. If it cannot, output -1. The function signature should be: ```python def min_moves_to_reach_end(grid: List[List[int]]) -> int: # Your code here ``` # Input - The first line contains two integers, n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. - The next n lines each contain m integers (either 0 or 1), representing the grid. # Output - Print a single integer — the minimum number of moves required to reach the bottom-right corner, or -1 if it is not possible. # Example ```python # Input 3 3 0 0 0 0 1 0 0 0 0 # Output 4 ``` # Explanation In the example, one possible path the robot can take is: - Move right to (0,1) - Move down to (1,1) but it\'s blocked, so skip - Move right to (0,2) - Move down to (1,2) - Move down to (2,2) In 4 moves, the robot can reach the destination.","solution":"from collections import deque from typing import List, Tuple def min_moves_to_reach_end(grid: List[List[int]]) -> int: n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 moves = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == n-1 and col == m-1: return dist for move in moves: newRow, newCol = row + move[0], col + move[1] if 0 <= newRow < n and 0 <= newCol < m and grid[newRow][newCol] == 0 and (newRow, newCol) not in visited: visited.add((newRow, newCol)) queue.append((newRow, newCol, dist + 1)) return -1"},{"question":"In a city, there are two types of transportation stops: bus stops and tram stops. There are n bus stops and m tram stops in the city. For each bus stop, we know its position on a coordinate plane. For each tram stop, we also know its position on the same coordinate plane. Your task is to determine the minimal Euclidean distance between any bus stop and tram stop in the city. The Euclidean distance between two points (x_1, y_1) and (x_2, y_2) is given by: sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2} The first line of input contains two integers n and m (1 le n, m le 10^5), representing the number of bus stops and tram stops, respectively. Each of the next n lines contains two integers x_i and y_i (-10^9 le x_i, y_i le 10^9), representing the position of each bus stop on the coordinate plane. Each of the next m lines contains two integers u_j and v_j (-10^9 le u_j, v_j le 10^9), representing the position of each tram stop on the coordinate plane. Output the minimal Euclidean distance between any bus stop and tram stop, rounded to six decimal places. **Example:** Input: ``` 3 2 0 0 2 2 3 3 1 1 4 4 ``` Output: ``` 1.414214 ``` In this example, the minimal distance is between the bus stop at (0, 0) and the tram stop at (1, 1).","solution":"import math def minimal_distance(n, m, bus_stops, tram_stops): min_dist = float(\'inf\') for bx, by in bus_stops: for tx, ty in tram_stops: dist = math.sqrt((tx - bx) ** 2 + (ty - by) ** 2) if dist < min_dist: min_dist = dist return round(min_dist, 6)"},{"question":"You are given a string s consisting only of characters \'a\' and \'b\'. In one operation, you can select any substring of s which forms a palindrome and remove it from the string. Your task is to determine the minimum number of operations to make the given string empty. A palindrome is a string that reads the same forward and backward. The first line contains a single integer t (1 le t le 10^3) — the number of test cases. Each of the next t lines contains a string s (1 le |s| le 10^5) consisting of only \'a\' and \'b\'. For each test case, print a single integer — the minimum number of operations required to empty the string. # Example **Input:** ``` 3 ababa abb a ``` **Output:** ``` 3 2 1 ``` # Explanation: - For the string \\"ababa\\", we can remove \'aba\' in one operation to get \\"ba\\", then remove \'b\' and \'a\' in two more operations. - For the string \\"abb\\", we can remove \'bb\' in one operation to get \\"a\\", then remove \'a\' in the next operation. - For the string \\"a\\", we only need one operation. # Constraints: - The total length of all strings combined does not exceed 10^6.","solution":"def min_operations_to_empty_string(s): Calculates the minimum number of operations to make the string empty by removing palindromic substrings. n = len(s) # If the string itself is a palindrome if s == s[::-1]: return 1 # Otherwise, removing character by character return 2 def solve(test_cases): results = [] for s in test_cases: results.append(min_operations_to_empty_string(s)) return results"},{"question":"You are given an array of integers `A` of size `n` and an integer `k`. Your task is to determine the number of distinct integers that appear at least `k` times in `A`. The first line contains two integers `n` and `k` (1 leq k leq n leq 10^5). The second line contains `n` space-separated integers representing the array `A` (1 leq A[i] leq 10^6). Output a single integer - the number of distinct integers that appear in the array at least `k` times. # Example Input: ``` 7 2 1 2 2 3 3 3 4 ``` Output: ``` 2 ``` Explanation: In the given array, the integers `2` and `3` appear at least `2` times. Hence, the output is `2`. Consider edge cases as well for better preparation.","solution":"from collections import Counter def count_distinct_at_least_k(n, k, A): Returns the number of distinct integers that appear at least k times in the array A. counter = Counter(A) distinct_count = sum(1 for count in counter.values() if count >= k) return distinct_count"},{"question":"Alyssa is organizing an online coding competition and she has designed a leaderboard. To ensure fair play and accurate scoring, she needs to constantly update the leaderboard as participants submit their solutions. The participants are identified by unique IDs and they submit solutions to different problems identified by unique problem IDs. Each submission might change the participant\'s total score. The leaderboard is represented by a Python dictionary where keys are participant IDs and values are their scores. You need to implement two functions: 1. **submit_solution(participant_id: int, problem_id: int, score: int)**: - **participant_id**: The ID of the participant submitting the solution. - **problem_id**: The ID of the problem for which the solution is being submitted. - **score**: The score of the solution being submitted. - This function updates the score of the participant in the leaderboard. If the participant is submitting a score for a problem they have already solved, the new score will replace the previous score for that problem. 2. **get_leaderboard() -> List[Tuple[int, int]]**: - This function returns a list of tuples representing the leaderboard. Each tuple should contain the participant ID and their total score. - The list should be sorted in descending order of scores. If two participants have the same score, the one with the smaller participant ID should appear first. # Example: ```python # Initial setup leaderboard = {} problem_scores = {} # Submissions submit_solution(1, 101, 100) submit_solution(2, 101, 105) submit_solution(1, 102, 90) submit_solution(1, 101, 95) # Updates the score of problem 101 for participant 1 to 95 # Fetch leaderboard print(get_leaderboard()) # Output: [(2, 105), (1, 185)] ``` # Constraints: - Participant IDs and problem IDs are integers in the range [1, 10^6]. - Scores are integers in the range [0, 10^3]. - These functions should be efficient to handle up to 10^6 submissions. Implement the `submit_solution` and `get_leaderboard` functions.","solution":"# Declare global dictionaries to hold participant scores and problem scores per participant leaderboard = {} problem_scores = {} def submit_solution(participant_id: int, problem_id: int, score: int): Updates the score of the participant in the leaderboard. If participant is submitting a score for a problem they have already solved, the new score will replace the previous score for that problem. if participant_id not in problem_scores: problem_scores[participant_id] = {} if participant_id not in leaderboard: leaderboard[participant_id] = 0 if problem_id in problem_scores[participant_id]: # Existing problem submission, update the total score leaderboard[participant_id] -= problem_scores[participant_id][problem_id] # Update problem score and total score problem_scores[participant_id][problem_id] = score leaderboard[participant_id] += score def get_leaderboard(): Returns a list of tuples representing the leaderboard. Each tuple contains the participant ID and their total score. Sorted in descending order of scores and by participant ID in case of ties. return sorted(leaderboard.items(), key=lambda item: (-item[1], item[0]))"},{"question":"You are given an array of integers and a target sum. Your task is to find all unique combinations in the array where the numbers sum to the target. Each number in the array may be used unlimited times in the combination. Note: - All numbers (including target) will be positive integers. - The solution set must not contain duplicate combinations. Example: Input: ```plaintext [2, 3, 6, 7] 7 ``` Output: ```plaintext [ [2, 2, 3], [7] ] ``` Input: ```plaintext [2, 3, 5] 8 ``` Output: ```plaintext [ [2, 2, 2, 2], [2, 3, 3], [3, 5] ] ``` Function Signature ```python def combinationSum(candidates: List[int], target: int) -> List[List[int]]: ``` # Constraints - 1 <= candidates.length <= 30 - 1 <= target <= 500 - 1 <= candidates[i] <= 50 # Guidelines - Carefully parse the input for processing and ensure output meets the format standards. - Develop an efficient algorithm considering the constraints to ensure optimal performance. - Utilize backtracking or depth-first search where applicable to generate combinations. - Ensure that each combination within the result list is sorted and no duplicates exist within the result set.","solution":"from typing import List def combinationSum(candidates: List[int], target: int) -> List[List[int]]: def backtrack(remain, comb, start): if remain == 0: result.append(list(comb)) return elif remain < 0: return for i in range(start, len(candidates)): comb.append(candidates[i]) backtrack(remain - candidates[i], comb, i) comb.pop() result = [] candidates.sort() backtrack(target, [], 0) return result"},{"question":"Your company has a network of computers in the office. The network consists of **n** computers connected by **m** cables, forming an undirected and unweighted graph. The network is initially disconnected, meaning that not all of the computers are connected directly or indirectly. To improve accessibility and communication, your task is to determine if it is possible to connect all the computers by adding at most **k** additional cables. If it is possible, return the minimum number of cables required to connect all the computers. If it is not possible, return -1. **Input** - The first line contains three integers, **n**, **m**, and **k** (1 le n le 10^5, 0 le m le 10^5, 0 le k le 10^5), which represent the number of computers, the number of existing cables, and the maximum number of additional cables you can add. - The following **m** lines each contain two integers **u** and **v** (1 le u, v le n, u neq v), denoting that there is an undirected cable between computer **u** and computer **v**. **Output** - Output a single integer, the minimum number of additional cables required to connect all computers. If it is not possible to connect all computers with at most **k** additional cables, output -1. **Examples** Input: ``` 6 3 3 1 2 2 3 4 5 ``` Output: ``` 2 ``` Input: ``` 5 2 1 1 2 3 4 ``` Output: ``` -1 ```","solution":"def additional_cables_to_connect(n, m, k, connections): from collections import defaultdict, deque # Create an adjacency list to represent the graph graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) # Function to perform BFS and find all nodes in a connected component def bfs(start, visited): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Find all disconnected components visited = set() num_components = 0 for node in range(1, n+1): if node not in visited: num_components += 1 bfs(node, visited) # To connect all components, we need at least (num_components - 1) cables min_required_cables = num_components - 1 # If we have enough additional cables, return the number of required cables if min_required_cables <= k: return min_required_cables else: return -1"},{"question":"You are given an array of integers `arr` of length `n`. Your task is to determine the minimum number of operations required to make all the elements of the array equal. In one operation you can choose any subarray and add or subtract 1 from every element of that subarray. Input - The first line contains a single integer `n` (1 ≤ n ≤ 1000), representing the length of the array. - The second line contains `n` space-separated integers `arr[i]` (1 ≤ arr[i] ≤ 1000), representing the elements of the array. Output - Output a single integer, the minimum number of operations required to make all the elements of the array equal. Example Input: ``` 5 1 2 3 4 5 ``` Output: ``` 4 ``` Explanation: To make all the elements equal with the minimum number of operations, you can perform the following steps: 1. Decrement the entire array by 1 to get [0, 1, 2, 3, 4] 2. Decrement the entire array by 1 to get [-1, 0, 1, 2, 3] 3. Decrement the entire array by 1 to get [-2, -1, 0, 1, 2] 4. Decrement the entire array by 1 to get [-3, -2, -1, 0, 1] All the elements can then be made 0 or any other common value in 4 operations.","solution":"def min_operations_to_make_equal(n, arr): Returns the minimum number of operations required to make all elements equal. Each operation can increment or decrement any subarray by 1. if n == 1: return 0 # If array contains only one element, it\'s already all equal. max_value = max(arr) min_value = min(arr) # The minimum number of operations needed is reduced to the difference between # the maximum and minimum values, as we can increment or decrement the whole array at once return max_value - min_value"},{"question":"You are working on a new social networking app and you need to implement a feature that determines the shortest path between two users within the network. The network is represented as an undirected graph where each node is a user and each edge is a friendship connection between them. Each user has a unique user ID, which is an integer. Given the graph and two user IDs, your task is to find the shortest path between the two users. If there is no path between the two users, return -1. The first line contains two integers n and m (1 le n le 10^5, 0 le m le 10^5) — the number of users and the number of friendship connections, respectively. The second line contains two integers u and v (1 le u, v le n) — the user IDs of the two users you need to find the shortest path between. The following m lines each contain two integers a_i and b_i (1 le a_i, b_i le n) — indicating a friendship between user a_i and user b_i. Output an integer representing the length of the shortest path between the two users. If no path exists, output -1. # Example Input ``` 5 4 1 5 1 2 2 3 3 4 4 5 ``` Output ``` 4 ``` Input ``` 5 2 1 5 1 2 3 4 ``` Output ``` -1 ```","solution":"from collections import deque def shortest_path(n, m, u, v, connections): Find the shortest path between two users in an undirected graph. Args: n : int : number of users m : int : number of friendship connections u : int : user ID of the start user v : int : user ID of the target user connections : list of tuples : list of friendship connections Returns: int : length of the shortest path, or -1 if no path found # Build adjacency list adj_list = {i: [] for i in range(1, n+1)} for a, b in connections: adj_list[a].append(b) adj_list[b].append(a) # BFS to find shortest path queue = deque([(u, 0)]) visited = set() while queue: current, distance = queue.popleft() if current == v: return distance if current not in visited: visited.add(current) for neighbor in adj_list[current]: if neighbor not in visited: queue.append((neighbor, distance + 1)) # No path found return -1"},{"question":"You are given a string S consisting of lowercase letters and an integer n (1 ≤ n ≤ 26). Your task is to find the lexicographically smallest string that can be obtained by permuting the letters of S, such that each letter of the alphabet appears at most n times in the result. Input: - The first line contains a single integer n. - The second line contains the string S. Output: - Print the lexicographically smallest string that meets the requirements. Example: Input: 2 bbaaac Output: aabbc In this example, the letter \'a\' appears 3 times in the input string but can appear at most 2 times in the output string as per the given n. Therefore, the lexicographically smallest string that can be formed is \'aabbc\'.","solution":"def smallest_permutation(n, S): Returns the lexicographically smallest string that can be obtained by permuting the letters of S, such that each letter appears at most n times. from collections import Counter count = Counter(S) result = [] for char in sorted(count.keys()): result.append(char * min(count[char], n)) return \'\'.join(result)"},{"question":"Alice is hosting a themed party and she wants to decorate the venue with balloons. She has `n` balloons of different colors. Each balloon is represented as a string `s` of length `m` where each character in the string represents a color segment of that balloon. For instance, the balloon represented by the string `RGB` has three segments with colors red, green, and blue. Alice wants to create a sequence of balloons such that no two consecutive balloons have the same color on a corresponding segment. You are asked to help Alice determine if it is possible to arrange the balloons in such a sequence. Write a function `canArrangeBalloons(n, balloons)` that takes an integer `n` and a list of strings `balloons`, and returns \\"YES\\" if it is possible to arrange the balloons according to the rules, or \\"NO\\" otherwise. **Function Signature** ```python def canArrangeBalloons(n: int, balloons: List[str]) -> str: ``` # Input - `n` (1 ≤ n ≤ 100): the number of balloons. - `balloons`: a list of `n` strings where each string length is `m` (1 ≤ m ≤ 100) representing the color segments of each balloon. # Output - Return the string \\"YES\\" if it is possible to arrange the balloons such that no two consecutive balloons have the same color at any segment position. Otherwise, return \\"NO\\". # Example ```python # Example 1 n = 3 balloons = [\\"RGB\\", \\"BRG\\", \\"GBR\\"] print(canArrangeBalloons(n, balloons)) # Output: \\"YES\\" # Example 2 n = 2 balloons = [\\"RGB\\", \\"RGB\\"] print(canArrangeBalloons(n, balloons)) # Output: \\"NO\\" ``` # Note In Example 1, it is possible to arrange the balloons as follows: \\"RGB\\", \\"GBR\\", \\"BRG\\". In this arrangement: - The 1st segment of the 1st balloon (\'R\') is different from the 1st segment of the 2nd balloon (\'G\'). - The 2nd segment of the 1st balloon (\'G\') is different from the 2nd segment of the 2nd balloon (\'B\'). - And so on. In Example 2, since both balloons are identical, it is not possible to satisfy the condition. You need to determine if such an arrangement is possible. Consider all potential arrangements if necessary.","solution":"from itertools import permutations def canArrangeBalloons(n, balloons): Function to check if it is possible to arrange the balloons such that no two consecutive balloons have the same color at any segment position. :param n: Number of balloons :param balloons: List of balloon color segment strings :return: \\"YES\\" if arrangement possible, \\"NO\\" otherwise # Check all permutations of the list of balloons for perm in permutations(balloons): valid = True for i in range(n - 1): for j in range(len(balloons[i])): if perm[i][j] == perm[i + 1][j]: valid = False break if not valid: break if valid: return \\"YES\\" return \\"NO\\""},{"question":"You are working on a logging system for a large software application. The system logs various events during the application\'s runtime, such as errors, warnings, and information messages. Each event has a unique event ID, a timestamp (in YYYY-MM-DD HH:MM:SS format), and a log level (INFO, WARNING, ERROR). Your task is to analyze the logs and provide a comprehensive summary of the events. The input begins with a single integer t (1 ≤ t ≤ 1000), which indicates the number of log entries. The following t lines each contain a log entry in the format: <Event ID> <Timestamp> <Log Level> <Message> <Event ID> is a positive integer not exceeding 10000, <Timestamp> is a string in the specified format, <Log Level> is one of either INFO, WARNING, or ERROR, and <Message> is a string containing spaces and various characters, with a maximum length of 100 characters. Your program should output the following: 1. The total number of log entries. 2. The number of unique event IDs. 3. The number of log entries for each log level (INFO, WARNING, ERROR). 4. The earliest and latest timestamps for each log level. Example input: ``` 5 101 2023-02-01 12:00:00 INFO Application started 102 2023-02-01 12:05:00 WARNING Low disk space 103 2023-02-01 12:10:00 ERROR Disk write failure 104 2023-02-01 12:15:00 INFO User logged in 105 2023-02-01 12:20:00 WARNING High memory usage ``` Example output: ``` Total log entries: 5 Unique event IDs: 5 INFO: 2 WARNING: 2 ERROR: 1 Earliest INFO: 2023-02-01 12:00:00 Latest INFO: 2023-02-01 12:15:00 Earliest WARNING: 2023-02-01 12:05:00 Latest WARNING: 2023-02-01 12:20:00 Earliest ERROR: 2023-02-01 12:10:00 Latest ERROR: 2023-02-01 12:10:00 ```","solution":"def analyze_logs(t, logs): from datetime import datetime event_ids = set() info_times = [] warning_times = [] error_times = [] info_count = 0 warning_count = 0 error_count = 0 for log in logs: parts = log.split(maxsplit=3) event_id = int(parts[0]) timestamp = parts[1] + \' \' + parts[2] log_level = parts[3].split()[0] # message = parts[3][len(log_level)+1:] # not used event_ids.add(event_id) timestamp = datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") if log_level == \\"INFO\\": info_count += 1 info_times.append(timestamp) elif log_level == \\"WARNING\\": warning_count += 1 warning_times.append(timestamp) elif log_level == \\"ERROR\\": error_count += 1 error_times.append(timestamp) summary = [] summary.append(f\\"Total log entries: {t}\\") summary.append(f\\"Unique event IDs: {len(event_ids)}\\") summary.append(f\\"INFO: {info_count}\\") summary.append(f\\"WARNING: {warning_count}\\") summary.append(f\\"ERROR: {error_count}\\") if info_times: summary.append(f\\"Earliest INFO: {min(info_times).strftime(\'%Y-%m-%d %H:%M:%S\')}\\") summary.append(f\\"Latest INFO: {max(info_times).strftime(\'%Y-%m-%d %H:%M:%S\')}\\") if warning_times: summary.append(f\\"Earliest WARNING: {min(warning_times).strftime(\'%Y-%m-%d %H:%M:%S\')}\\") summary.append(f\\"Latest WARNING: {max(warning_times).strftime(\'%Y-%m-%d %H:%M:%S\')}\\") if error_times: summary.append(f\\"Earliest ERROR: {min(error_times).strftime(\'%Y-%m-%d %H:%M:%S\')}\\") summary.append(f\\"Latest ERROR: {max(error_times).strftime(\'%Y-%m-%d %H:%M:%S\')}\\") return \\"n\\".join(summary)"},{"question":"Given an array of integers nums, you need to find a contiguous subarray (containing at least one number) which has the largest sum and return its sum. Write a function to solve this problem. # Input The first line of input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 1000) — the size of the array. The second line contains n space-separated integers representing the elements of the array nums (−1000 ≤ nums[i] ≤ 1000). Each test case presents a new array. # Output For each test case, output in a new line an integer representing the largest sum of the contiguous subarray. # Example Input ``` 2 5 -2 1 -3 4 -1 4 1 2 3 4 ``` Output ``` 4 10 ``` # Note In the first test case, the contiguous subarray [4] has the largest sum = 4. In the second test case, the contiguous subarray [1, 2, 3, 4] has the largest sum = 10.","solution":"def max_subarray_sum(n, nums): Finds the sum of the contiguous subarray with the largest sum. :param n: int - the size of the array :param nums: List[int] - the array of integers :return: int - the largest sum of the contiguous subarray current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def solve(t, cases): Solves the problem for the given set of test cases. :param t: int - number of test cases :param cases: List[Tuple[int, List[int]]] - list of test cases with n and the array of integers :return: List[int] - list of results for each test case results = [] for n, nums in cases: results.append(max_subarray_sum(n, nums)) return results"},{"question":"A group of friends wants to climb up a series of stairs and reach a party happening at the top. There are `n` stairs in total, numbered from 1 to n. Each friend starts at stair 1. They can either take one step or two steps at a time. The friends want to divide themselves into two teams such that the sum of the total number of steps taken by each member of both teams is minimized, and each team has at least one member. To find the optimal way to form the teams, and the minimum total number of steps taken by each team, follow these steps: 1. Read an integer `n` (1 ≤ n ≤ 105) which represents the number of stairs. 2. Compute the minimum possible value for the sum of the total number of steps taken by each member of both teams and print it. Print one integer representing the minimum possible sum of the total number of steps taken by each member of both teams. # Example Input: ``` 10 ``` Output: ``` 15 ``` Explanation: Here\'s one possible way to divide the friends into two teams that results in the minimum total steps: - Team 1: Members can follow this route on the stairs: [1, 2, 4, 6, 8, 10] which takes 5 steps. - Team 2: Members can follow this route on the stairs: [1, 3, 5, 7, 9] which takes 5 steps. One feasible solution yields team 1 and team 2 both taking exactly 5 steps each. Therefore, the sum is minimized and equals to 5 + 5 = 10. Any other combination would result in more total number of steps required which wouldn\'t be optimal.","solution":"def min_total_steps(n): Calculate the minimum possible value for the sum of the total number of steps taken by each member of both teams, with n stairs. Parameters: n (int): number of stairs Returns: int: minimum possible sum of the total number of steps taken by each member of both teams # Team 1: they can take n steps # Team 2: they can also take n steps (if n is large enough, say ≥ 2) return n + n"},{"question":"You are given a string, s, consisting of lowercase English letters. Your task is to determine whether you can convert it into a palindrome by rearranging its characters and removing exactly one character. A palindrome is a string that reads the same backward as forward. Write a function `is_rearranged_palindrome(s: str) -> str` that returns \\"YES\\" if it is possible to convert the given string into a palindrome by rearranging its characters and removing exactly one character, otherwise return \\"NO\\". **Function signature**: ``` def is_rearranged_palindrome(s: str) -> str: pass ``` **Input**: - A single string `s` of length `1 <= |s| <= 100,000` containing only lowercase English letters. **Output**: - Return \\"YES\\" if the string can be rearranged into a palindrome by removing exactly one character, otherwise return \\"NO\\". # Example ``` Input: \\"abccaa\\" Output: \\"YES\\" ``` ``` Input: \\"abc\\" Output: \\"NO\\" ``` # Note In the first example, \\"abccaa\\" can be rearranged to \\"aaccba\\" by removing one \'c\', which is a palindrome. In the second example, no palindromic arrangement is possible after removing just one character.","solution":"def is_rearranged_palindrome(s: str) -> str: from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string of even length (after removing one character), we can have at most 1 odd count # For a string of odd length, we can have at most 2 initial odd counts # Therefore, we need to evaluate if we can get a palindrome by having at most 1 odd count return \\"YES\\" if odd_count <= 2 else \\"NO\\""},{"question":"You are given a grid with dimensions n times m initially filled with numbers. You need to perform the following query operation multiple times: 1. Update the value of the cell at position (row, col) to a new value specified. After all the updates, return the current state of the grid. The first line of input contains two integers n and m (1 leq n, m leq 100), representing the dimensions of the grid. The next n lines each contain m integers representing the initial values in the grid. The integer values can be in the range [-1000, 1000]. The next line contains a single integer q (1 leq q leq 1000), representing the number of update queries. The following q lines each contain three integers row, col, and value, representing the 1-indexed position in the grid to update and the new value for that cell. Print the final state of the grid after all updates, with each row on a new line. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 4 1 1 10 2 3 -5 3 2 0 1 2 15 ``` # Example Output ``` 10 15 3 4 5 -5 7 0 9 ```","solution":"def update_grid(n, m, initial_grid, updates): for row, col, value in updates: initial_grid[row-1][col-1] = value return initial_grid def perform_grid_operations(n, m, initial_grid, q, update_queries): updated_grid = update_grid(n, m, initial_grid, update_queries) return updated_grid"},{"question":"In a distant galaxy, there are N planets numbered from 1 to N. The Intergalactic Transport Authority (ITA) has afforded the citizens modern transporters to travel between planets. Each planet has exactly one transporter, and each transporter is capable of connecting to exactly one other planet, creating a possibly cyclic structure. Unfortunately, some transporters are malfunctioning, breaking the connectivity. Your job is to determine if there exists a functional way to travel between given pairs of planets using the operable transporters. The transporters have already been described, and now you need to answer several queries regarding planet connectivity. The first line contains two integers N (2 leq N leq 100,000) and M (1 leq M leq 200,000), the number of planets and the number of operable transporters respectively. Each of the next M lines contains two integers u_i and v_i (1 leq u_i, v_i leq N), indicating that there is an operable transporter directly connecting planet u_i to planet v_i. The next line contains a single integer Q (1 leq Q leq 100,000), the number of queries. Each of the following Q lines contains two integers a_j and b_j (1 leq a_j, b_j leq N), indicating the pairs of planets for which you need to determine if there exists a functional way to travel from planet a_j to planet b_j using the operable transporters. Output Q lines: the j-th line should contain \\"YES\\" if there is a functional path from planet a_j to planet b_j, and \\"NO\\" otherwise.","solution":"from collections import defaultdict, deque def build_graph(N, transporter_pairs): graph = defaultdict(list) for u, v in transporter_pairs: graph[u].append(v) graph[v].append(u) return graph def bfs_connected_components(graph, N): visited = [False] * (N + 1) components = [-1] * (N + 1) component_number = 0 def bfs(start): queue = deque([start]) visited[start] = True components[start] = component_number while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True components[neighbor] = component_number queue.append(neighbor) for node in range(1, N+1): if not visited[node]: bfs(node) component_number += 1 return components def are_they_connected(N, M, transporter_pairs, Q, queries): graph = build_graph(N, transporter_pairs) components = bfs_connected_components(graph, N) results = [] for a, b in queries: if components[a] == components[b]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example function call N = 5 M = 3 transporter_pairs = [(1, 2), (2, 3), (4, 5)] Q = 2 queries = [(1, 3), (1, 5)] print(are_they_connected(N, M, transporter_pairs, Q, queries))"},{"question":"You are organizing a concert and you have a set list of songs. Each song needs to be performed by a specific artist. Some artists can sing multiple songs, but no artist can perform two songs consecutively. Given the list of songs and corresponding artists, arrange the songs in an order that follows the rules and maximizes the total enjoyment score of the concert. The enjoyment score of the concert is calculated as the sum of individual enjoyment scores of each performed song. If it is not possible to arrange the songs such that no artist sings consecutively, return -1. # Input format: The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of songs. Each of the next n lines contains a string and an integer — the name of the artist for the i-th song and the enjoyment score of the i-th song. # Output format: Print the maximum enjoyment score that can be obtained. If it is not possible to arrange the songs, print -1. # Example Input: 5 Alice 10 Bob 20 Alice 30 Charlie 30 Bob 40 Output: 130 Explanation: One possible arrangement is Bob (40), Alice (10), Charlie (30), Alice (30), Bob (20). The enjoyment score is 40 + 10 + 30 + 30 + 20 = 130.","solution":"from collections import defaultdict, deque import heapq def max_enjoyment_score(n, songs): # Step 1: Create a map of artists to their respective songs and scores artist_songs = defaultdict(list) for artist, score in songs: artist_songs[artist].append(score) # Step 2: Use a max-heap to always choose the highest available score max_heap = [] for artist, scores in artist_songs.items(): for score in scores: heapq.heappush(max_heap, (-score, artist)) # max-heap using negative scores total_score = 0 last_artist_performed = None queue = deque() while max_heap or queue: if max_heap: score, artist = heapq.heappop(max_heap) if artist != last_artist_performed: total_score += -score last_artist_performed = artist while queue: heapq.heappush(max_heap, queue.popleft()) else: queue.append((-score, artist)) else: return -1 # Can\'t perform the next song without breaking the rules return total_score"},{"question":"Let\'s define a grid of size N times M filled with positive integers. You need to move from the top-left cell to the bottom-right cell, but you can only move either right or down. Each time you move, you have to add the value of the cell you move to, starting with the value on the top-left cell. Write a function that determines the minimum possible sum of the values along a path from the top-left cell to the bottom-right cell of the grid. The input consists of the first line containing two integers, N and M (1 leq N, M leq 1000), representing the number of rows and columns in the grid, respectively. The next N lines contain M integers each, where each integer is between 1 and 1000. Output a single integer — the minimum sum of the values along a path from the top-left cell to the bottom-right cell of the grid. **Example:** Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 7 ``` In this example, the top-left to bottom-right path with the minimum sum is 1 → 3 → 1 → 1 → 1, with a total sum of 7.","solution":"def min_path_sum(grid): N = len(grid) M = len(grid[0]) dp = [[0] * M for _ in range(N)] dp[0][0] = grid[0][0] for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N - 1][M - 1] # Example usage N = 3 M = 3 grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(min_path_sum(grid)) # Output: 7"},{"question":"A traveling salesman is planning his route for an upcoming trip. He needs to visit several cities, starting and finishing at his home city, in such a way that the total distance traveled is minimized. You are tasked with helping him find the shortest possible route, based on the distance between each pair of cities. The input consists of: - An integer n (2 ≤ n ≤ 12), representing the number of cities. - An n x n matrix D, where D[i][j] (0 ≤ D[i][j] ≤ 1000) represents the distance between city i and city j. It is guaranteed that D[i][i] = 0 for all i, and D[i][j] = D[j][i] for all i, j. The output should be the minimum distance that the salesman needs to travel to visit all the cities exactly once and return to the starting city. # Example Input: ``` 4 0 20 42 35 20 0 30 34 42 30 0 12 35 34 12 0 ``` Output: ``` 97 ``` # Explanation: For the given example, the shortest route is: City 0 -> City 1 -> City 3 -> City 2 -> City 0, with a total distance of 97.","solution":"from itertools import permutations def travelling_salesman(n, D): # Initializing minimum distance as a large value min_distance = float(\'inf\') # Generating permutations of cities (excluding starting city 0) cities = list(range(1, n)) for perm in permutations(cities): # Starting distance from city 0 current_distance = D[0][perm[0]] # Calculate total distance for this permutation path for i in range(1, len(perm)): current_distance += D[perm[i-1]][perm[i]] # Add the distance to return back to the starting city current_distance += D[perm[-1]][0] # Update minimum distance if current_distance < min_distance: min_distance = current_distance return min_distance"},{"question":"A company has been developing a new software application that requires data encryption and decryption to ensure secure communication. The development team has decided to implement a simplified version of the Caesar Cipher algorithm for this purpose. The Caesar Cipher technique involves shifting each character in the plaintext by a fixed number of positions through the alphabet. For instance, with a shift of 3, the letter \'A\' would be replaced by \'D\', \'B\' would become \'E\', and so on. After \'Z\', the shifting wraps around, so \'X\' with a shift of 3 would become \'A\'. You are tasked with creating a function that encrypts a given plaintext using the Caesar Cipher algorithm. The function will receive two parameters: the plaintext (a string of uppercase English letters) and the shift value (an integer). # Function Signature ```python def caesar_cipher(plaintext: str, shift: int) -> str: # Your code here ``` # Input - The `plaintext` string, consisting of uppercase alphabetic characters only (1 ≤ |plaintext| ≤ 100). - The `shift` integer, which represents the number of positions each character in the plaintext should be shifted (0 ≤ shift ≤ 25). # Output - A string representing the encrypted text resulting from applying the Caesar Cipher shift. # Examples Example 1 ```python input: \\"HELLO\\", 3 output: \\"KHOOR\\" ``` Example 2 ```python input: \\"ZEBRA\\", 1 output: \\"AFCSB\\" ``` # Constraints - The input will always be a valid non-empty string of uppercase alphabetic characters and a valid integer shift within the specified range. - The function should maintain the structure and length of the input string while shifting each character as specified. Implement the function that fulfills these requirements and returns the correct encrypted output based on the provided shift value.","solution":"def caesar_cipher(plaintext: str, shift: int) -> str: Encrypts the plaintext using the Caesar Cipher algorithm with the specified shift. Args: plaintext (str): The string to be encrypted, consisting of uppercase alphabetic characters only. shift (int): The number of positions to shift each character in the plaintext. Returns: str: The encrypted text resulting from applying the Caesar Cipher shift. encrypted_text = [] for char in plaintext: shifted_value = (ord(char) - ord(\'A\') + shift) % 26 encrypted_char = chr(shifted_value + ord(\'A\')) encrypted_text.append(encrypted_char) return \'\'.join(encrypted_text)"},{"question":"Julia received a new challenge from her programming mentor, who asked her to solve the following task. You are given an array of integers and an integer value \'k\'. You can perform the following operation on the array any number of times: Choose any two consecutive elements of the array, and if the absolute difference between them is greater than or equal to \'k\', reduce both elements by \'k\'. You need to determine if it is possible to make all the elements of the array equal by performing the described operation. A total reduction to a number lower than zero is not allowed, meaning both elements must remain non-negative after each operation. The first line of the input contains two integers, \'n\' and \'k\' (1 leq n leq 1000 and 1 leq k leq 1000) – the number of elements in the array and the integer value \'k\'. The second line contains \'n\' integers representing the elements of the array (0 leq text{array[i]} leq 1000). Output \\"Yes\\" (without quotes) if you can make all elements of the array equal using the described operations, and \\"No\\" (without quotes), if it is not possible. You can print each letter in any case (upper or lower). **Example:** **Input:** ``` 5 2 4 10 8 6 12 ``` **Output:** ``` Yes ``` **Explanation:** One possible sequence of operations is: 1. Substract 2 from the elements at positions 2 and 3: [4, 8, 6, 6, 12] 2. Substract 2 from the elements at positions 2 and 3: [4, 6, 4, 6, 12] 3. Substract 2 from the elements at positions 4 and 5: [4, 6, 4, 4, 10] 4. Substract 2 from the elements at positions 4 and 5: [4, 6, 4, 4, 8] 5. Substract 2 from the elements at positions 4 and 5: [4, 6, 4, 4, 6] 6. Substract 2 from the elements at positions 1 and 2: [4, 4, 4, 4, 6] 7. Substract 2 from the elements at positions 5 and 5: [4, 4, 4, 4, 4] So, all elements of the array become equal.","solution":"def can_make_elements_equal(n, k, arr): Determines if it is possible to make all elements of the array equal by performing the described operation any number of times. Parameters: n (int): Number of elements in the array. k (int): Integer value k that can be subtracted from consecutive elements. arr (list of int): List of integers representing the array. Returns: str: \\"Yes\\" if it is possible to make all elements of the array equal, otherwise \\"No\\". max_value = max(arr) min_value = min(arr) # Difference between the max and min element should be manageable by k reductions if (max_value - min_value) % k == 0: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given an array of n integers and a positive integer k. You need to determine if there are two distinct indices i and j in the array such that the absolute difference between the values at these indices is at least k and the absolute difference between these indices is at most l. The first line contains three integers n, k, and l (1 ≤ n ≤ 10^5, 1 ≤ k, l ≤ 10^9) — the number of elements in the array, the minimum value difference, and the maximum index difference. The next line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the elements of the array. Output \\"YES\\" if there exist such indices i and j. Otherwise, output \\"NO\\". Example Input: 5 3 2 1 5 9 4 6 Example Output: YES","solution":"def check_indices(arr, k, l): Determines if there are two distinct indices i and j in the array such that: - The absolute difference between the values at these indices is at least k - The absolute difference between these indices is at most l n = len(arr) for i in range(n): for j in range(i+1, min(i+l+1, n)): if abs(arr[i] - arr[j]) >= k: return \\"YES\\" return \\"NO\\""},{"question":"You are given two arrays A and B of lengths n and m, respectively. Arrays can only contain positive integers. You can perform the following operation an arbitrary number of times: pick any subsegment of the array and replace it with its product. For example, from array [2, 3, 4, 5] you can obtain array [6, 4, 5] (as 2 * 3 = 6) or array [120] (as 2 * 3 * 4 * 5 = 120). Two arrays A and B are considered equal if they have the same length and for each valid i, A_i = B_i. Your task is to determine if it is possible to perform the operations in such a way that arrays A and B become equal. The first line contains a single integer n~(1 le n le 1000) — the length of the first array. The second line contains n integers a_1, a_2, cdots, a_n~(1 le a_i le 10^4) — elements of the array A. The third line contains a single integer m~(1 le m le 1000) — the length of the second array. The fourth line contains m integers b_1, b_2, cdots, b_m~(1 le b_i le 10^4) — elements of the array B. Print \\"YES\\" if it\'s possible to make arrays A and B equal by performing the described operations, otherwise print \\"NO\\".","solution":"def compress_and_calculate_product(arr): compressed = [] current_product = 1 current_value = arr[0] # start with the first element for elem in arr: if elem == current_value: current_product *= elem else: compressed.append(current_product) current_product = elem current_value = elem compressed.append(current_product) return compressed def can_transform_equal(A, B): compressed_A = compress_and_calculate_product(A) compressed_B = compress_and_calculate_product(B) return compressed_A == compressed_B def check_arrays_equal(A, B): if can_transform_equal(A, B): return \\"YES\\" else: return \\"NO\\""},{"question":"Write a function `mix_fruits` that organizes and displays different kinds of fruits in a unique way. Given a list of fruits, your task is to rearrange them such that all unique fruits appear first, followed by their duplicates (if any), maintaining their original order of appearance. The function should return the rearranged list, with no repeated elements. # Input - A list of strings where each string represents a type of fruit. - It is guaranteed that the list will contain at least one element and no more than 100,000 elements. # Output - A list of strings of unique fruits followed by their duplicates if any, maintaining their original order of appearance. # Example ```python # Example 1 input_fruits = [\'apple\', \'banana\', \'cherry\', \'apple\', \'apple\', \'banana\', \'date\'] output = mix_fruits(input_fruits) print(output) # Output: [\'apple\', \'banana\', \'cherry\', \'date\', \'apple\', \'apple\', \'banana\'] # Example 2 input_fruits = [\'apple\', \'apple\', \'apple\'] output = mix_fruits(input_fruits) print(output) # Output: [\'apple\', \'apple\', \'apple\'] # Example 3 input_fruits = [\'apple\', \'banana\', \'cherry\'] output = mix_fruits(input_fruits) print(output) # Output: [\'apple\', \'banana\', \'cherry\'] ``` # Constraints - The total number of fruit names will not exceed 100,000. - The length of each fruit name string will not exceed 100 characters. - The list will not be empty and will contain at least one type of fruit.","solution":"def mix_fruits(fruits): Organizes and displays different kinds of fruits in a unique way. All unique fruits appear first, followed by their duplicates, maintaining their original order of appearance. seen = set() unique_fruits = [] duplicates = [] for fruit in fruits: if fruit not in seen: seen.add(fruit) unique_fruits.append(fruit) else: duplicates.append(fruit) return unique_fruits + duplicates"},{"question":"You are organizing a programming contest that includes n problems to be solved and m participants. Each participant has different skills and interests regarding problem topics. For convenience, all participants and problems are identified by integers from 1 to n and from 1 to m respectively. Each participant is characterized by two integers indicating their level of enthusiasm for solving problems of a given topic and their expertise in that topic. Each problem is described by an integer indicating the topic it covers. For the best contest arrangement, you need to ensure that the assigned problems maximize both the participants’ enthusiasm and their expertise. Each participant will only be assigned one problem, and each problem should be assigned to only one participant. However, not every problem has to be assigned if optimal conditions cannot be met. The first line of the input contains two positive integers n and m (1 ≤ n, m ≤ 100,000) – the number of participants and the number of problems. The next n lines contain two integers ei and xi (1 ≤ ei, xi ≤ 10^9), where ei is the enthusiasm level of the i-th participant for the problem of that topic and xi is their expertise in the topic. The next line contains m integers t1, t2, ..., tm (1 ≤ tj ≤ 10^9), where tj is the topic of the j-th problem. Your task is to find the optimal assignment of problems to participants in such a way that the sum of enthusiasm levels and the sum of expertise levels among the assigned problems is maximized. If there are multiple optimal assignments, print any of them. Output the assignment of the problems in the format: for each participant, print the 1-based index of the problem assigned to them, or -1 if no problem is assigned to that participant. Print the results in the order of participants from 1 to n. Example: Input: 4 3 2 3 1 5 3 4 4 2 1 2 3 Output: 1 2 3 -1","solution":"def optimize_contest(n, m, participants, problems): # Create a list of problem lists problem_index = {} for idx, topic in enumerate(problems): if topic not in problem_index: problem_index[topic] = [] problem_index[topic].append(idx + 1) # List to store the result assignment assignments = [-1] * n # Iterate through each participant and assign the best possible problem for i in range(n): ei, xi = participants[i] if xi in problem_index and problem_index[xi]: assignments[i] = problem_index[xi].pop(0) return assignments"},{"question":"A sequence of numbers is called a \\"well-formed\\" sequence if the absolute difference between consecutive numbers is 1. Given an integer n and an array of n integers, determine if the array can be rearranged to form a well-formed sequence. If it is possible, output the rearranged array. If there are multiple solutions, output any one of them. If it is not possible to form such a sequence, output NO. The first line contains one integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n space-separated integers — the elements of the array. Each element is a natural number not exceeding 1000. If it\'s not possible to rearrange the array to form a well-formed sequence, in a single line output NO. Otherwise, in the first line output YES, and in the next line output the rearranged array as n space-separated integers.","solution":"def can_form_well_formed_sequence(n, arr): Determines if a given array can be rearranged to form a well-formed sequence. Parameters: n (int): The number of elements in the array. arr (list): The list of n integers. Returns: tuple: A tuple containing a string (\\"YES\\" or \\"NO\\") and the rearranged array if possible, otherwise None. arr.sort() for i in range(n-1): if abs(arr[i] - arr[i+1]) != 1: return (\\"NO\\", None) return (\\"YES\\", arr)"},{"question":"Dr. Fibonacci frequently works with large Fibonacci numbers in his research. As part of his analysis, he often needs to determine if a given number is a Fibonacci number. The sequence of Fibonacci numbers is defined as follows: the first two terms are zero and one, and each subsequent term is the sum of the previous two. Given a list of integers, determine for each integer if it belongs to the Fibonacci sequence or not. The first line contains the integer n (1 ≤ n ≤ 1000) — the number of elements in the list. Each of the next n lines contains one integer a_i (0 ≤ a_i ≤ 10^18) — the i-th element in the list. For each integer in the list, print \\"YES\\" if the integer is a Fibonacci number, and \\"NO\\" otherwise. You can print each character in any case (upper or lower). # Example Input: ``` 5 0 1 4 9 144 ``` Output: ``` YES YES NO NO YES ```","solution":"def is_fibonacci(n): Determines if an integer n is a Fibonacci number. if n == 0: return True x, y = 0, 1 while y <= n: if y == n: return True x, y = y, x + y return False def check_fibonacci_numbers(numbers): Takes a list of numbers and returns a corresponding list of \\"YES\\" or \\"NO\\" indicating whether each number is a Fibonacci number. results = [] for number in numbers: if is_fibonacci(number): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a sequence of integers, a \\"balanced subarray\\" is defined as a contiguous subarray where the absolute difference between the count of even and odd numbers is at most 1. Write a program that, given a list of integers, finds the length of the longest balanced subarray. # Input - The first line contains a single integer n (1 ≤ n ≤ 100,000), the length of the sequence. - The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9), the elements of the sequence. # Output - Print a single integer, the length of the longest balanced subarray. # Example Input 6 1 2 3 4 5 6 Output 6 Input 5 2 1 2 1 3 Output 4 # Note In the first example, the entire array is balanced since it has 3 evens and 3 odds, matching the condition of having the absolute difference between counts of even and odd numbers at most 1. In the second example, the balanced subarray [2, 1, 2, 1] has an equal count of even and odd numbers (2 evens and 2 odds), which fulfills the requirement.","solution":"def longest_balanced_subarray_length(n, sequence): # Initialize balance, max_len, and a dictionary to store balance indices balance = 0 max_len = 0 balance_index_map = {0: -1} # balance 0 at index -1 for initialization for index in range(n): if sequence[index] % 2 == 0: balance += 1 else: balance -= 1 if balance in balance_index_map: max_len = max(max_len, index - balance_index_map[balance]) else: balance_index_map[balance] = index return max_len"},{"question":"You are given a list of n projects and their dependencies in the form of pairs. Each pair (a, b) means that project a needs to be completed before project b. Your task is to determine if it is possible to complete all the projects, and if it is possible, output any valid order for completing the projects. If it is not possible to complete all the projects due to a cycle in the dependencies, output \\"IMPOSSIBLE\\". The first line of the input contains two integers n and m (1 ≤ n ≤ 10,000, 1 ≤ m ≤ 50,000) — the number of projects and the number of dependencies, respectively. The next m lines each contain two integers a and b (1 ≤ a, b ≤ n) — a dependency pair representing that project a must be completed before project b. Output in the first line a single integer k, the number of projects that can be completed in order, followed by k integers on the next line representing the order of completion of the projects. If not all projects can be completed, output \\"IMPOSSIBLE\\". **Example:** **Input:** ``` 4 4 1 2 2 3 3 4 4 2 ``` **Output:** ``` IMPOSSIBLE ``` **Input:** ``` 4 4 1 2 1 3 3 4 2 4 ``` **Output:** ``` 4 1 2 3 4 ``` In this example, the first input set contains a cycle in the dependencies (2 → 3 → 4 → 2), making it impossible to complete all projects. The second input set has a possible order of completion.","solution":"from collections import defaultdict, deque def find_project_order(n, m, dependencies): graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n + 1)} for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 # Queue for nodes with no incoming edges queue = deque([node for node in in_degree if in_degree[node] == 0]) order = [] while queue: node = queue.popleft() order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == n: return len(order), order else: return \\"IMPOSSIBLE\\""},{"question":"# Coding Assessment Question","solution":"def find_max(nums): Returns the maximum number in a list of integers. If the list is empty, returns None. if not nums: return None return max(nums)"},{"question":"Levko loves trees with n vertices, each having a unique integer label from 1 to n. He has one such tree t. For each integer k (1 ≤ k ≤ n), Levko defines the k-beauty of t as the number of ordered pairs of nodes (u, v) such that the simple path between u and v in tree t contains exactly k edges. Levko wondered how many trees with n vertices have their total k-beauty equal to a given integer m (1 ≤ m ≤ 10^9). Help him find the remainder after dividing this number by 1000000007 (10^9 + 7). A tree is an undirected connected graph with n vertices and n - 1 edges. The first line contains two integers n and m (2 ≤ n ≤ 50, 1 ≤ m ≤ 10^9). Output a single integer — the answer to the problem modulo 1000000007 (10^9 + 7).","solution":"def count_trees_with_total_k_beauty(n, m): Returns the number of trees with n vertices that have their total k-beauty equal to m, modulo 1000000007. MOD = 1000000007 # For n vertices, there will be (n choose 2) pairs of nodes total_pairs = (n * (n - 1)) // 2 # We need to find how many trees have total_pairs equal to m, but since # a binary tree can be arranged and has m = (n choose 2), it becomes a combinatorial problem. # We need to check if m is achievable with the given n. if m == total_pairs: return 1 else: return 0"},{"question":"You are organizing a marathon in a city with n intersections and m roads. Each road connects two intersections and has a certain length. The marathon will be organized in such a way that participants start at the intersection numbered 1 and can finish at any intersection t among a given set of finish line intersections (with t ≠ 1). For the sake of simplicity, we assume that you can only run in one direction on each road. Given the intersections, roads, and finish line intersections, determine the shortest distance (in terms of total road length) one has to run to go from the start at intersection 1 to reach any of the designated finish lines. # Input Format - The first line contains two integers, n (1 ≤ n ≤ 1000) — the number of intersections, and m (0 ≤ m ≤ 5000) — the number of roads. - Each of the next m lines contains three integers u, v, and l (1 ≤ u, v ≤ n, 1 ≤ l ≤ 1000), representing a road of length l from intersection u to intersection v. - The next line contains a single integer k (1 ≤ k ≤ n-1) — the number of finish line intersections. - The last line contains k distinct integers, each representing a finish line intersection. # Output Format - Print a single integer — the length of the shortest possible route from the start intersection 1 to any of the finish line intersections. If there is no valid route, print -1. # Sample Input ``` 6 7 1 2 4 2 3 3 1 3 2 3 4 7 3 5 6 4 6 1 5 6 5 2 4 6 ``` # Sample Output ``` 9 ``` # Explanation To reach intersection 6, the shortest path is 1 -> 3 -> 5 -> 6 with a total length of 9. To reach intersection 4, the shortest path is 1 -> 3 -> 4 with a total length of 9. Therefore, the minimum of these distances is 9.","solution":"import heapq def shortest_marathon_route(n, m, roads, k, finish_lines): # Create adjacency list for the graph graph = [[] for _ in range(n + 1)] for u, v, l in roads: graph[u].append((v, l)) # Dijkstra\'s algorithm to find the shortest path from intersection 1 to all other nodes def dijkstra(source): dist = [float(\'inf\')] * (n + 1) dist[source] = 0 pq = [(0, source)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, length in graph[u]: if dist[u] + length < dist[v]: dist[v] = dist[u] + length heapq.heappush(pq, (dist[v], v)) return dist distances = dijkstra(1) # Find the minimum distance to any of the finish lines min_distance = float(\'inf\') for line in finish_lines: if distances[line] < min_distance: min_distance = distances[line] return min_distance if min_distance != float(\'inf\') else -1"},{"question":"You have an array a_1, a_2, dots, a_n. All a_i are positive integers. In one step you can choose any element a_i in the array and decrease it by d provided a_i > d. Determine if you can make all elements in the array identical using the operation above any number of times (possibly zero). The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains two integers n and d (1 le n le 100; 1 le d le 1000) — the number of elements in the array and the value d. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10000) — the array a. For each test case, print YES if it\'s possible to make all elements identical using the specified operation. Otherwise, print NO. You may print each letter in any case (for example, YES, Yes, yes, yEs will all be recognized as positive answer). In the first test case, it\'s impossible to make all elements identical because the differences between any two elements are greater than d = 2. In the second test case, we can decrease the second element by d = 3 to get the array [3, 3, 3], so the answer is YES. In the third test case, all elements are already identical, so the answer is YES.","solution":"def can_make_identical(t, test_cases): results = [] for i in range(t): n, d = test_cases[i][0] a = test_cases[i][1] min_a = min(a) possible = all((ai - min_a) % d == 0 for ai in a) results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"You are given a matrix of size n times m, consisting of integers. You can perform the following operation any number of times: - Select any single integer in the matrix and add or subtract 1 from it. Your goal is to make all the integers in each row equal. Determine the minimum number of operations required to achieve this goal for each row. The first line of input contains a single integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and m (1 le n, m le 100) — the number of rows and columns of the matrix, respectively. Each of the next n lines contains m integers, representing the elements of the matrix. For each test case, output a single integer — the minimum number of operations required to make all elements in each row equal. # Example **Input:** ``` 2 2 3 1 2 3 4 4 4 1 4 1 2 2 3 ``` **Output:** ``` 2 2 ```","solution":"def min_operations_to_make_rows_equal(matrix): Returns the minimum number of operations required to make all elements in each row equal. The result is a list where the ith element is the number of operations for the ith row. def min_operations_in_row(row): median_value = sorted(row)[len(row) // 2] return sum(abs(x - median_value) for x in row) return [min_operations_in_row(row) for row in matrix] def process_test_cases(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][0] matrix = test_cases[i][1] result = min_operations_to_make_rows_equal(matrix) results.extend(result) return results"},{"question":"You are given a string containing a sequence of lowercase English letters and digits. Your task is to find the longest contiguous substring which contains an equal number of letters and digits. If there are multiple substrings with the same maximum length, print the one that appears first. If no such substring exists, return an empty string. # Input - A single line string containing lowercase English letters and digits with a length between 1 and 10^5. # Output - A single string representing the longest contiguous substring with an equal number of letters and digits. If no such substring exists, print an empty string. # Example **Input:** ``` a1b2c3d4 ``` **Output:** ``` a1b2c3d4 ``` **Input:** ``` abc123 ``` **Output:** ``` abc123 ``` **Input:** ``` abc ``` **Output:** ``` ``` # Note In the first example, the entire string `a1b2c3d4` contains 4 letters and 4 digits, which is the longest substring matching the criteria. In the second example, the entire string `abc123` contains 3 letters and 3 digits, which is the longest substring matching the criteria. In the third example, there are no digits in the string, hence no substring matches the criteria, resulting in an empty output.","solution":"def longest_equal_letters_and_digits(s): max_length = 0 start_index = -1 # Dictionary to store (balance state, first occurrence index) balance_dict = {0: -1} balance = 0 for i, char in enumerate(s): if char.isdigit(): balance -= 1 else: # assuming all other characters are lowercase letters balance += 1 if balance in balance_dict: length = i - balance_dict[balance] if length > max_length: max_length = length start_index = balance_dict[balance] + 1 else: balance_dict[balance] = i return s[start_index:start_index + max_length] if max_length > 0 else \\"\\""},{"question":"You are given a string s consisting of lowercase English letters. Your task is to determine the substring with the maximum length that appears more than once in the given string. The input string s has length n (1 ≤ n ≤ 10^5). The first line contains a single non-empty string s. Print the length of the longest substring that occurs more than once in the string. If there\'s no such substring, print 0. Input Example: ``` banana ``` Output Example: ``` 3 ``` Explanation: The longest substring that appears more than once in the string \\"banana\\" is \\"ana\\", and it has a length of 3.","solution":"def longest_repeated_substr(s): Returns the length of the longest substring that appears more than once in the given string s. def search_substring_of_length(length): seen_substrings = set() for i in range(len(s) - length + 1): substr = s[i:i+length] if substr in seen_substrings: return True seen_substrings.add(substr) return False left, right = 1, len(s) max_len = 0 while left <= right: mid = (left + right) // 2 if search_substring_of_length(mid): max_len = mid left = mid + 1 else: right = mid - 1 return max_len"},{"question":"You are given an integer array arr of length n and an integer k. Your task is to determine the maximum possible sum of a subarray (a contiguous segment of the array) after performing at most k reverse operations. In a reverse operation, you can select any subarray and reverse its order. The first line of input contains two integers n and k (1 le n le 10^5, 0 le k le 10). The second line contains n integers representing the array arr (-10^9 le arr[i] le 10^9). Output a single integer, the maximum possible sum of a subarray after performing at most k reverse operations. Example: ``` Input: 5 1 -1 3 -2 1 -4 Output: 4 Explanation: By reversing the subarray [3, -2, 1], the array becomes [-1, 1, -2, 3, -4]. The maximum subarray sum in this transformed array is 4 (subarray [1, -2, 3]). ```","solution":"def max_subarray_sum_with_reversals(n, k, arr): def max_subarray_sum(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far original_max_sum = max_subarray_sum(arr) if k == 0: return original_max_sum reversed_prefix_sums = [[float(\'-inf\')] * n for _ in range(n)] global_max_sum = original_max_sum for i in range(n): for j in range(i, n): reversed_arr = arr[:i] + arr[i:j+1][::-1] + arr[j+1:] max_sum = max_subarray_sum(reversed_arr) global_max_sum = max(global_max_sum, max_sum) return global_max_sum"},{"question":"You are given an array `arr` of length `n` consisting of non-negative integers. You need to perform two types of queries on this array: 1. Update the value at index `i` to a new value `x`. 2. Find the sum of elements in the subarray from index `l` to index `r` (both inclusive). The first line of input contains two integers `n` (1 ≤ `n` ≤ 10^5) and `q` (1 ≤ `q` ≤ 10^5), the number of elements in the array and the number of queries, respectively. The second line contains `n` non-negative integers denoting the elements of the array `arr`. Each of the next `q` lines contains one of the following two types of queries: - `1 i x`: update the value at index `i` (`0`-based index) to `x`. - `2 l r`: find the sum of elements in the subarray from index `l` to index `r`. Output the result of each query of the second type on a new line. # Example and Explanation **Input:** ``` 5 3 1 2 3 4 5 2 1 3 1 2 10 2 1 3 ``` **Output:** ``` 9 16 ``` **Explanation:** 1. The sum of elements from index 1 to 3 in the initial array [1, 2, 3, 4, 5] is 2+3+4 = 9. 2. After the update operation, the array becomes [1, 2, 10, 4, 5]. 3. The sum of elements from index 1 to 3 in the updated array is 2+10+4 = 16.","solution":"class NumArray: def __init__(self, nums): self.nums = nums self.n = len(nums) self.tree = [0] * (self.n + 1) for i in range(self.n): self._update_tree(i + 1, nums[i]) def _update_tree(self, i, val): while i <= self.n: self.tree[i] += val i += i & -i def _query_tree(self, i): sum = 0 while i > 0: sum += self.tree[i] i -= i & -i return sum def update(self, index, val): original_val = self.nums[index] self.nums[index] = val self._update_tree(index + 1, val - original_val) def sumRange(self, left, right): return self._query_tree(right + 1) - self._query_tree(left) def process_queries(n, q, arr, queries): numArray = NumArray(arr) result = [] for query in queries: if query[0] == 1: numArray.update(query[1], query[2]) elif query[0] == 2: result.append(numArray.sumRange(query[1], query[2])) return result"},{"question":"A software company has developed an experimental feature for their new app, and they want to simulate the rollout of this feature to a subset of users. The goal is to maximize the number of user types who can use the feature under given constraints. You are given `t` types of users, where each type has a specific number of users `ui` willing to use the feature. The app currently has a capability to support `f` feature sessions at any given time. Activating a feature session for the i-th user type has an associated cost `ci`. Additionally, each feature session has a maximum load limit `li` which represents the maximum number of users that can utilize that session simultaneously. Given that the total available budget for activating feature sessions is `b`, determine the maximum number of user types that can use the feature and the minimum total cost required to activate those sessions. Note that if a specific type of user cannot be accommodated based on the given constraints (either due to budget or session limit), they should not be counted in the final result. The first line of input contains three integers `t`, `f`, and `b` (1 ≤ t, f ≤ 10^5; 0 ≤ b ≤ 10^9). The second line contains `t` integers representing the number of users `u1, u2, ..., ut` for each type. The third line contains `t` integers representing the cost `c1, c2, ..., ct` to activate a feature session for each user type. The fourth line contains `f` integers representing the load limits `l1, l2, ..., lf` of the feature sessions. Print two integers `r` and `s`, where `r` is the maximum number of user types that can use the feature and `s` is the minimum cost required to activate these sessions. If no user type can be accommodated, then `r = s = 0`. **Input:** ``` 5 3 100 10 20 30 40 50 10 20 30 40 50 15 25 35 ``` **Output:** ``` 3 60 ``` In the sample provided, the first three user types can be accommodated within the given constraints with the total cost being 60 units. The sessions load limits are sufficient to handle their respective user counts within the given budget.","solution":"def maximize_user_types(t, f, b, users, costs, limits): # Combine user data into a list of tuples (users, costs) and sort by costs user_data = sorted(zip(users, costs), key=lambda x: x[1]) # Sort limits in non-decreasing order limits.sort() total_cost = 0 count_users = 0 for user, cost in user_data: for i, limit in enumerate(limits): if user <= limit and total_cost + cost <= b: total_cost += cost count_users += 1 limits.pop(i) break return count_users, total_cost"},{"question":"In a fictional land called Matrixia, there are n villages connected by m bidirectional roads such that you can travel between any pair of villages. Each road has a certain travel cost and is represented in the list of m roads. The villagers of Matrixia want to improve their travel system by creating a new set of roads that minimizes the total travel costs to still be able to travel between any two villages. Given n villages and m existing roads, your task is to help the villagers by finding a subset of the roads that connects all the villages with the minimum possible total travel cost. The first line contains two integers n (2 ≤ n ≤ 1000) and m (n - 1 ≤ m ≤ 100,000) — the number of villages and the number of roads, respectively. The next m lines describe the existing roads. Each line contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10,000) — representing a road between villages u and v with a travel cost of w. Output the minimum cost to connect all the villages. If there are multiple ways to achieve the minimum cost, output any of them. Example: Input: 4 5 1 2 10 1 3 15 1 4 20 2 3 35 3 4 25 Output: 45","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, roads): result = [] i = 0 e = 0 roads = sorted(roads, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: u, v, w = roads[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append((u, v, w)) union(parent, rank, x, y) minimum_cost = 0 for u, v, weight in result: minimum_cost += weight return minimum_cost def minimum_cost_to_connect_villages(n, roads): return kruskal(n, roads)"},{"question":"You are given an array of integers. You need to determine if there exists a subset of the array that adds up to a given target sum. Your task is to implement a function that returns `True` if such a subset exists, and `False` otherwise. The input consists of two lines. The first line contains two integers `n` and `target` (1 <= n <= 100, 1 <= target <= 1000). The second line contains n integers, each between 1 and 1000, inclusive, representing the elements of the array. Output a single boolean value `True` or `False` indicating whether a subset with the given target sum exists. For example, given the input: ``` 5 9 3 34 4 12 5 2 ``` The output should be: ``` True ``` In this example, a subset that adds up to 9 is {3, 4, 2}.","solution":"def subset_sum(n, target, arr): Determines if there exists a subset of the array that adds up to the given target sum. # Initialize a 2D list dp where dp[i][j] will be True if there # is a subset of arr[0...i-1] with sum equal to j dp = [[False] * (target + 1) for _ in range(n + 1)] # There is always a subset with sum 0, the empty subset for i in range(n + 1): dp[i][0] = True # Fill the dp array for i in range(1, n + 1): for j in range(1, target + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] return dp[n][target]"},{"question":"A popular music company wants to build a recommendation system for its users. Each user has a playlist of songs they have marked as \\"liked\\". The company wants to recommend users songs that are liked by users that have a high similarity in their music taste. Similarity between two users can be defined as the number of songs they both have liked divided by the total unique songs in both their playlists. For each user, the system should recommend the top K songs from the most similar users that the given user has not yet liked. If two songs have the same recommendation ranking, recommend the song with the smallest ID. You are given a list of users and their respective playlists. Each playlist is a list of integers representing song IDs they have liked. Given this data, implement a function to generate song recommendations for a specific user: ```python def recommend_songs(user_id, K, users_playlists): Recommends the top K songs for a specific user based on similar users\' playlists. :param user_id: int, the ID of the user to recommend songs for. :param K: int, the number of recommendations to generate. :param users_playlists: dict, a dictionary where the key is a user ID and the value is a list of song IDs liked by the user. :return: list of song IDs recommended for the specific user. # Your implementation here ``` **Input Format**: - The `user_id` is an integer representing the ID of the user for whom recommendations are to be generated. - The `K` is an integer representing the number of songs to recommend. - The `users_playlists` is a dictionary where the key is an integer (user ID), and the value is a list of integers representing song IDs liked by that user. **Output**: - Return a list of K song IDs recommended for the `user_id`. **Constraints**: - 1 <= |users_playlists| <= 1000 - 1 <= |playlists[i]| <= 1000 - 1 <= song ID <= 10^9 - 1 <= user ID <= 10^5 - 1 <= K <= 100 **Example**: ```python users_playlists = { 1: [1, 2, 3, 4], 2: [2, 3, 5], 3: [1, 2, 6], 4: [7, 8, 9, 10] } print(recommend_songs(1, 2, users_playlists)) # Output: [5, 6] (Songs recommended from users 2 and 3, with 5 being most similar and 6 next) ``` Implement the `recommend_songs` function to provide meaningful recommendations based on user similarity.","solution":"def recommend_songs(user_id, K, users_playlists): from collections import Counter import heapq def calculate_similarity(user1, user2): set1, set2 = set(users_playlists[user1]), set(users_playlists[user2]) common = set1.intersection(set2) total_unique = set1.union(set2) return len(common) / len(total_unique) # Get the songs liked by the given user target_playlist = set(users_playlists[user_id]) # Calculate similarity of other users with the target user similarities = [] for other_user_id in users_playlists: if other_user_id != user_id: similarity = calculate_similarity(user_id, other_user_id) similarities.append((similarity, other_user_id)) # Sort users by similarity in descending order, breaking ties with user ID similarities.sort(reverse=True, key=lambda x: (x[0], -x[1])) # Collect recommendations from the most similar users recommended_songs = Counter() for _, similar_user_id in similarities: for song_id in users_playlists[similar_user_id]: if song_id not in target_playlist: recommended_songs[song_id] += 1 # Get the top K recommendations, breaking ties by smallest song ID top_k_recommendations = heapq.nsmallest(K, recommended_songs.keys(), key=lambda song_id: (-recommended_songs[song_id], song_id)) return top_k_recommendations"},{"question":"You are given a list of distinct integers and an integer T. Your goal is to determine if there exists two different elements in the list whose product is exactly T. The first line contains two integers N (1 leq N leq 200,000) and T (0 < T leq 10^{12}), denoting the number of elements in the list and the target product, respectively. The second line contains N distinct integers b_1, b_2, ldots, b_N (1 leq b_i leq 10^6), the elements of the list. Output \\"YES\\" if there are two distinct elements in the list whose product is T or “NO” otherwise. # Sample Input 1 ``` 5 20 2 4 5 10 50 ``` # Sample Output 1 ``` YES ``` # Sample Input 2 ``` 4 100 1 3 5 7 ``` # Sample Output 2 ``` NO ``` In the first sample, the product of 4 and 5 is 20, which is our target product. Hence, the output is \\"YES\\". In the second sample, there are no two integers in the list whose product is 100, so the output is \\"NO\\".","solution":"def product_exists(N, T, lst): Returns \\"YES\\" if there are two distinct elements in the list whose product is T. Otherwise, returns \\"NO\\". seen = set() for num in lst: if num != 0 and T % num == 0: if T // num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"You are given an integer array `nums` and an integer `target`. Your task is to determine if there exists a pair of distinct indices i and j in the array such that nums[i] + nums[j] equals the given target. If such a pair exists, return the pair as a list [i, j] where i < j. If no such pair exists, return an empty list. Note that each input would have exactly one solution. Input: - The first line contains an integer n (2 ≤ n ≤ 10^4), the length of the array. - The second line contains n integers, nums[0], nums[1], ..., nums[n-1] (-10^9 ≤ nums[i] ≤ 10^9). - The third line contains an integer target (-10^9 ≤ target ≤ 10^9). Output: - A list containing two integers denoting the indices of the two numbers such that they add up to `target`. The indices are zero-based and must be printed in increasing order. If no such pair exists, print an empty list. Example 1: Input: ``` 4 2 7 11 15 9 ``` Output: ``` [0, 1] ``` Example 2: Input: ``` 3 0 1 2 3 ``` Output: ``` [1, 2] ```","solution":"def find_pair_with_target(nums, target): Finds two indices such that the elements at those indices add up to the target. Arguments: nums -- List[int] : List of integers. target -- int : The target sum. Returns: List[int] : List of indices [i, j] such that nums[i] + nums[j] == target and i < j. index_map = {} for i, num in enumerate(nums): complement = target - num if complement in index_map: return [index_map[complement], i] index_map[num] = i return []"},{"question":"You are given an integer array nums consisting of n elements and an integer k. Your task is to find the number of distinct pairs (i, j) (where 0 le i < j < n) such that the absolute difference between nums[i] and nums[j] is exactly k. Two pairs (i_1, j_1) and (i_2, j_2) are considered distinct if i_1 ne i_2 or j_1 ne j_2. Each test case contains a single test case. The first line of the input contains two integers n (1 le n le 10^5) and k (0 le k le 10^9) — the length of the array and the target difference. The second line of the input contains n integers nums_1, nums_2, ldots, nums_n (1 le nums_i le 2 times 10^9). Output a single integer — the number of distinct pairs with the given absolute difference k. **Example Input:** ``` 5 3 1 4 2 3 5 ``` **Example Output:** ``` 2 ``` **Explanation:** The distinct pairs with an absolute difference of 3 are: - (1, 4) — Their difference is |1 - 4| = 3. - (2, 5) — Their difference is |2 - 5| = 3. Note: - The order of elements in the pairs does not matter; for instance, (4, 1) is not different from (1, 4). - The array may contain duplicate elements, but distinct indexes form different pairs.","solution":"def count_distinct_pairs(nums, k): Returns the number of distinct pairs (i, j) where the absolute difference between nums[i] and nums[j] is exactly k. num_set = set(nums) count = 0 seen_pairs = set() for num in nums: if (num + k) in num_set and (num, num + k) not in seen_pairs and (num + k, num) not in seen_pairs: count += 1 seen_pairs.add((num, num + k)) if (num - k) in num_set and (num, num - k) not in seen_pairs and (num - k, num) not in seen_pairs: count += 1 seen_pairs.add((num, num - k)) return count"},{"question":"Given an array of positive integers representing the heights of trees in a forest, you want to cut some of the trees so that the remaining ones are aligned in a strictly increasing order of height. You can perform the cutting operation multiple times, but each time you need to cut exactly one tree. Determine the minimum number of cutting operations required to achieve the strictly increasing order of tree heights. The first line contains a single integer n (1 ≤ n ≤ 100) — the number of trees in the forest. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100) — the heights of the trees. Output a single integer — the minimum number of cutting operations required to make the remaining heights strictly increasing. Example: Input: 5 3 2 5 1 7 Output: 2","solution":"def min_cut_operations_to_increasing_heights(n, heights): Determine the minimum number of cutting operations required to make the remaining tree heights in strictly increasing order. from bisect import bisect_left def lis_length(sequence): lis = [] for height in sequence: pos = bisect_left(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height return len(lis) return n - lis_length(heights)"},{"question":"You are given an array of integers `arr` and a target integer `t`. Your task is to find all unique triplets in the array which give the sum of `t`. Note: - Elements in a triplet (a, b, c) must appear in ascending order, i.e., a ≤ b ≤ c. - The solution set must not contain duplicate triplets. Input: - The first line contains an integer `n` (3 ≤ n ≤ 3000), the number of elements in the array. - The second line contains `n` space-separated integers `arr[i]` (-10^5 ≤ arr[i] ≤ 10^5). - The third line contains an integer `t` (-10^5 ≤ t ≤ 10^5), the target sum. Output: - Print the total number of unique triplets that sum up to `t`. - Then print each triplet in a new line in the format: a b c Example: Input: 6 -1 0 1 2 -1 -4 0 Output: 2 -1 -1 2 -1 0 1","solution":"def find_triplets(arr, t): Finds all unique triplets in the array which sum up to the target integer t. Parameters: - arr: List[int], the array of integers. - t: int, the target sum. Returns: - List of unique triplets that sum up to t. arr.sort() n = len(arr) triplets = set() for i in range(n): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == t: triplets.add((arr[i], arr[left], arr[right])) left += 1 right -= 1 while left < right and arr[left] == arr[left - 1]: left += 1 while left < right and arr[right] == arr[right + 1]: right -= 1 elif current_sum < t: left += 1 else: right -= 1 return len(triplets), list(triplets)"},{"question":"A logistics company uses a specific numbering system for tracking its parcels. Each parcel gets a unique tracking number which is a positive integer. Currently, the company is moving to a digital system and wants to organize their tracking numbers efficiently. They have a list of tracking numbers in use and would like to find out the smallest positive integer that is not currently assigned to a parcel. Write a program that determines this smallest positive integer that is not used in the given list of tracking numbers. The first line contains one integer m (1 ≤ m ≤ 5000) — the number of tracking numbers currently in the system. The second line contains m distinct integers t1, t2, ..., tm (1 ≤ ti ≤ 5000) — tracking numbers of the parcels. Output the smallest positive integer that is not present in the list of tracking numbers.","solution":"def find_smallest_missing_positive_int(tracking_numbers): This function returns the smallest positive integer that is not present in the given list of tracking numbers. max_num = len(tracking_numbers) + 1 present = [False] * (max_num + 1) for num in tracking_numbers: if num <= max_num: present[num] = True for i in range(1, max_num + 1): if not present[i]: return i # Testing the function tracking_numbers = [1, 2, 3, 4, 6] print(find_smallest_missing_positive_int(tracking_numbers)) # Output should be 5"},{"question":"A robot is located at the top-left corner of an m x n grid (marked as \'Start\' in the grid below). The robot can only move down or right at any point in time. The grid is filled with non-negative numbers, where each number represents the cost of entering that cell. Your task is to write a function that finds the path from the top-left corner to the bottom-right corner (marked as \'End\' in the grid below) of the grid, which minimizes the total cost along the path. The robot is trying to achieve the path with the minimum sum of the costs of the cells to be entered. Below is an example of a grid: ``` [ [1, 3, 1] [1, 5, 1] [4, 2, 1] ] ``` In this case, the minimal cost to reach the bottom-right corner (End) from the top-left corner (Start) is 7 (1 → 3 → 1 → 1 → 1). Function Signature: ```python def min_path_sum(grid: List[List[int]]) -> int: ``` **Input:** - m x n grid (1 ≤ m, n ≤ 100) - grid[i][j] (0 ≤ grid[i][j] ≤ 100) **Output:** - An integer that represents the minimum path sum for the grid. **Example:** ```python assert min_path_sum([[1, 3, 1], [1, 5, 1], [4, 2, 1]]) == 7 assert min_path_sum([[1, 2], [1, 1]]) == 3 ```","solution":"from typing import List def min_path_sum(grid: List[List[int]]) -> int: m, n = len(grid), len(grid[0]) for i in range(1, m): grid[i][0] += grid[i-1][0] for j in range(1, n): grid[0][j] += grid[0][j-1] for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i-1][j], grid[i][j-1]) return grid[m-1][n-1]"},{"question":"Given an array of n integers and an integer k, determine the number of distinct pairs (i, j) where 1 ≤ i < j ≤ n and their absolute difference is divisible by k. Input: - The first line contains two integers, n (1 ≤ n ≤ 100,000) and k (1 ≤ k ≤ 100,000), the length of the array and the divisible integer, respectively. - The second line contains n integers representing the array elements a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output: - Output a single integer, the number of distinct pairs (i, j) where 1 ≤ i < j ≤ n and abs(ai - aj) is divisible by k. Example: ``` Input: 5 2 1 3 5 7 9 Output: 10 Explanation: All pairs (1, 2), (1, 3), (2, 3), (2, 4), (3, 4), (3, 5), and so on have an absolute difference divisible by 2. Hence there are 10 pairs in total. ```","solution":"def count_divisible_pairs(n, k, arr): Returns the number of distinct pairs (i, j) where 1 ≤ i < j ≤ n and their absolute difference is divisible by k. count = 0 # Create a dict to store counts of elements mod k mod_count = {} for num in arr: mod = num % k if mod not in mod_count: mod_count[mod] = 0 mod_count[mod] += 1 # Count pairs for mod in mod_count: # If there are x elements with the same mod value, # the number of ways to pick two out of them is x * (x - 1) / 2 count += mod_count[mod] * (mod_count[mod] - 1) // 2 return count"},{"question":"You are given a rectangular grid of blocks with dimensions m (rows) by n (columns). Each block in the grid can either be empty or contain an obstacle. You are currently located at the top-left corner of the grid (position (0,0)) and your goal is to move to the bottom-right corner of the grid (position (m-1, n-1)). However, you can only move either down or right at any point in time. Determine the number of unique paths you can take to reach the bottom-right corner from the top-left corner, given that there might be obstacles in some blocks of the grid. An obstacle and empty space are marked as 1 and 0 respectively in the grid. The first line of the input contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid. Each of the next m lines contains n space-separated integers (either 0 or 1) representing the grid. Print a single integer — the number of unique paths from the top-left to the bottom-right corner of the grid modulo 10^9 + 7. Example: Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ```","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from top-left to bottom-right corner of the grid. Parameters: grid (List[List[int]]): The grid with obstacles (1) and empty spaces (0). Returns: int: The number of unique paths modulo 10^9 + 7. MOD = 10**9 + 7 m = len(grid) n = len(grid[0]) # If the start or end position has an obstacle, it\'s impossible to reach the end if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Initialize a DP table dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Fill DP table for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[m-1][n-1] # Function to parse the input def parse_input(input_str): lines = input_str.strip().split(\'n\') m, n = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return grid # Main function to solve the problem def solve(input_str): grid = parse_input(input_str) return unique_paths_with_obstacles(grid)"},{"question":"A company has a list of projects it wants to complete, and each project\'s dependencies are given as a list of projects that must be completed before it. Your task is to determine if it is possible to complete all projects given these prerequisites, and if so, find one possible order to do so. You are given an integer n (1 leq n leq 10^5), the number of projects, and an integer m (0 leq m leq 2 times 10^5), the number of dependencies between the projects. Each of the next m lines contains two integers a and b (1 leq a, b leq n), indicating that project a must be completed before project b. Print \\"NO\\" if it is not possible to complete all projects. If it is possible, print \\"YES\\" followed by one possible order to complete all projects, with projects separated by a space. You can assume that no project will depend on itself directly or indirectly. **Input** - The first line contains two integers n and m. - Each of the next m lines contains two integers, a and b, which represent a prerequisite relationship. **Output** - Print \\"NO\\" if it is not possible to complete all projects. - If possible, print \\"YES\\" followed by one possible order to complete all projects. **Example** Input: ``` 4 4 1 2 1 3 3 2 2 4 ``` Output: ``` YES 1 3 2 4 ``` Input: ``` 3 2 1 2 2 1 ``` Output: ``` NO ``` Note: In the first example, one possible order to complete all projects is 1 -> 3 -> 2 -> 4. This order satisfies all given prerequisite relationships. In the second example, the projects form a cycle, making it impossible to complete the projects in any order. Thus, the output is \\"NO\\".","solution":"from collections import defaultdict, deque def find_project_order(n, m, dependencies): Determine if it is possible to complete all projects, and find one possible order if so. Args: n : int : number of projects m : int : number of dependencies dependencies : list of tuples : list of dependencies (a, b) meaning a -> b Returns: str : \\"NO\\" if it is not possible to complete all projects, otherwise \\"YES\\" list : one possible order of projects # Graph adjacency list and in-degree counter graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n + 1)} # Build the graph and in-degree count for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 # Queue for nodes with zero in-degree zero_in_degree_queue = deque([node for node in in_degree if in_degree[node] == 0]) topological_order = [] while zero_in_degree_queue: node = zero_in_degree_queue.popleft() topological_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) if len(topological_order) == n: return \\"YES\\", topological_order else: return \\"NO\\", [] # To use this function: # n, m = number of projects, number of dependencies # dependencies = list of dependencies (project a must be done before project b) # Example: n = 4, m = 4, dependencies = [(1, 2), (1, 3), (3, 2), (2, 4)] # print(find_project_order(n, m, dependencies))"},{"question":"Aramis and Porthos are two elite musketeers who train regularly in swordsmanship. To make their training sessions more challenging, they practice their dueling skills in an arena that has marked positions along a straight line. There are ( n ) (always odd) marked positions in the arena, represented by their unique coordinates ( y_1, y_2, ..., y_n ) along the positive direction of the ( Ox ) axis. Each musketeer must start at one of these positions, but they cannot start at the same position. Aramis prefers to duel from a higher ground closer to the end of the line, while Porthos prefers to start closer to the beginning of the line. However, to make the duel fairer, they want to choose starting positions that maximize their initial distance. They take turns selecting their starting positions, with Porthos choosing first. Given that Porthos and Aramis both play optimally to maximize their initial distance, your task is to determine the maximum starting distance between them. The first line of the input contains a single integer ( n ) (3 ≤ ( n ) ≤ 300,000, ( n ) is odd) — the number of available positions. The second line contains ( n ) distinct integers ( y_1, y_2, ..., y_n ) (0 ≤ ( y )i ≤ ( 10^9 )), giving the coordinates of the corresponding positions. Print the maximum distance between the initial positions of Aramis and Porthos. In the first sample, an optimal choice of the players could look like this: After these actions, Porthos and Aramis will be at the positions yielding the maximum distance, which is calculated accordingly. Examples: 1. Input: 5 3 5 2 8 1 Output: 7 2. Input: 3 1 100 50 Output: 99","solution":"def max_duel_distance(n, positions): Returns the maximum starting distance between Aramis and Porthos given n positions. Porthos goes first, preferring smaller positions, and Aramis goes second, preferring larger positions. :param n: Number of positions (odd integer) :param positions: List of n distinct positional coordinates :return: Maximum distance positions.sort() return positions[-1] - positions[0]"},{"question":"You are given a list of integers. Write a function that checks if there exists a pair of integers in the list whose product is equal to a given target value. The input consists of two lines. The first line contains two integers N (1 ≤ N ≤ 100) and T (1 ≤ T ≤ 10^4) - the number of elements in the list and the target product. The second line contains N integers a_i (1 ≤ a_i ≤ 100) - the elements of the list. Output \\"YES\\" if such a pair exists, otherwise output \\"NO\\". Example: Input: 5 20 4 2 8 5 10 Output: YES Input: 4 15 1 3 6 9 Output: NO","solution":"def check_pair_product(N, T, arr): Check if there exists a pair in the list whose product is equal to the target value T. Parameters: N (int): The number of elements in the list. T (int): The target product value. arr (list): The list of integers. Returns: str: \\"YES\\" if such a pair exists, \\"NO\\" otherwise. seen = set() for num in arr: if T % num == 0 and T // num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"You are given a list of integers. A subsequence of the list is obtained by deleting some (possibly zero or all) elements such that the remaining elements appear in the same order as they appear in the original list. Let the \\"weight\\" of a subsequence be defined as the sum of its elements. You need to find the maximum weight of a subsequence such that the subsequence does not contain two adjacent elements of the original list. More formally, let\'s denote the list as a sequence of integers a1, a2, ..., an. You need to find a subsequence such that no two elements ai and ai+1 are both included, and the sum of the subsequence elements is as large as possible. Input The first line of the input contains an integer n (1 ≤ n ≤ 100), the number of integers in the list. The second line contains n space-separated integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000). Output Output a single integer representing the maximum weight of a subsequence that does not contain two adjacent elements of the original list. Example Input: 5 1 2 4 1 7 Output: 12 Explanation One possible subsequence with maximum weight is [1, 4, 7]. Another one is [2, 7]. Both have the sum 12, which is the largest possible for this condition.","solution":"def max_weight_subsequence(lst): n = len(lst) if n == 0: return 0 if n == 1: return lst[0] # dp[i] will store the maximum weight subsequence considering elements up to the i-th index dp = [0] * n dp[0] = lst[0] dp[1] = max(lst[0], lst[1]) for i in range(2, n): dp[i] = max(dp[i-1], lst[i] + dp[i-2]) return dp[-1]"},{"question":"You are given a set of n items, each with a particular value and weight, and you need to determine the maximum value you can obtain by selecting and packing a subset of these items into a knapsack of limited capacity. This is a classic variation of the 0/1 Knapsack problem. However, in this problem, each item can be taken at most once. The goal is to maximize the total value of the items in the knapsack without exceeding its weight capacity. The first line of the input contains two integers, n and W (1 ≤ n ≤ 1000, 1 ≤ W ≤ 10000), representing the number of items and the maximum weight capacity of the knapsack respectively. Each of the next n lines contains two integers wi and vi (1 ≤ wi ≤ 1000, 1 ≤ vi ≤ 1000), representing the weight and value of the i-th item respectively. Output a single integer, the maximum value achievable within the given weight capacity of the knapsack. # Example Input: ``` 4 8 2 4 3 5 4 8 5 8 ``` Output: ``` 13 ``` Explanation: In this example, the maximum value is obtained by selecting the items with weights 3 and 5, which gives a total weight of 8 and a total value of 13.","solution":"def knapsack(n, W, items): Returns the maximum value achievable within the given weight capacity of the knapsack. Parameters: n : int : Number of items. W : int : Maximum weight capacity of the knapsack. items : list : List of tuples, where each tuple contains two integers wi and vi, representing the weight and value of the i-th item respectively. Returns: int : Maximum value achievable within the given weight capacity. # Initialize a list for dp where dp[i] will be the maximum value achievable with capacity i. dp = [0] * (W + 1) for wi, vi in items: for w in range(W, wi - 1, -1): dp[w] = max(dp[w], dp[w - wi] + vi) return dp[W] # Function to process the input and call the knapsack function def main(input_str): lines = input_str.strip().split(\'n\') n, W = map(int, lines[0].split()) items = [tuple(map(int, line.split())) for line in lines[1:]] return knapsack(n, W, items)"},{"question":"A manufacturer\'s factory assembles gadgets with two types of components, A and B. Each gadget requires exactly two components, one of type A and one of type B. There are n workers assembling type A components and m workers assembling type B components. Each worker can assemble exactly one type of component every hour and every worker works independently of the others. Management wants to have a balanced output, meaning at the end of the assembly process, the number of assembled type A components should be equal to the number of assembled type B components, since each gadget requires exactly one of each. To track this, they maintain two counters: counter A for type A components and counter B for type B components. At the start, both counters are set to zero. Each hour, every worker on type A increments counter A by one, and every worker on type B increments counter B by one. Your task is to determine, given n workers for type A and m workers for type B, what is the smallest number of hours required such that the number of assembled A components is equal to the number of assembled B components, or determine if it is impossible to balance the production. The input consists of two integers, n and m (1 ≤ n, m ≤ 10^6) — the number of workers assembling type A and type B components, respectively. If it\'s possible to balance the production, print the minimum number of hours required. If it\'s not possible, print -1. Example Input: 3 5 Output: 5 Input: 2 3 Output: -1","solution":"def min_hours_to_balance_production(n, m): Determine the minimum number of hours required for the number of assembled A components to equal the number of assembled B components, or return -1 if it is impossible. :param n: int - number of workers assembling type A components :param m: int - number of workers assembling type B components :return: int - the minimum number of hours required to balance production or -1 if impossible if n == m: return n # Case when one is not a multiple of the other if n == 0 or m == 0 or n % m != 0 and m % n != 0: return -1 # Calculate the Least Common Multiple (LCM) of n and m def gcd(x, y): while y: x, y = y, x % y return x lcm = (n * m) // gcd(n, m) return lcm"},{"question":"You are given an array of integers nums, where nums[i] represents the size of file i. You also have x servers available to process these files. Each server can process files in sequential order, but can only handle a total size of files equal to or less than a specific threshold, maxLoad, before it must stop processing. Your task is to determine if it is possible to distribute all files such that no server exceeds the maxLoad. The first line of input contains two integers, n (1 ≤ n ≤ 100,000) — the number of files, and x (1 ≤ x ≤ 100,000) — the number of servers. The second line contains n integers — the sizes of the files, nums[i](1 ≤ nums[i] ≤ 10,000). The third line contains an integer maxLoad (1 ≤ maxLoad ≤ 1,000,000) — the maximum load a server can take. Output \\"YES\\" if it is possible to distribute the files across the servers without exceeding the maxLoad limit for any server. Otherwise, output \\"NO\\". For the first sample case, the files can be distributed as follows with maxLoad = 20: - Server 1: [10, 5] - Server 2: [7] - Server 3: [8] - Server 4: [9] The output will be \\"YES\\". For the second sample case, the files\' sizes are such that it is impossible to distribute them within the given maxLoad threshold across any number of servers, so the output will be \\"NO\\".","solution":"def can_distribute_files(n, x, nums, maxLoad): Determines if it is possible to distribute the files such that no server exceeds the maxLoad. Parameters: n (int): The number of files. x (int): The number of servers. nums (list of int): The sizes of the files. maxLoad (int): The maximum load a server can carry. Returns: str: \\"YES\\" if it is possible to distribute the files without exceeding the maxLoad for any server, otherwise \\"NO\\". from heapq import heappop, heappush # Check if any single file exceeds maxLoad if any(f > maxLoad for f in nums): return \\"NO\\" # Sort nums in decreasing order nums.sort(reverse=True) # Min-heap to keep track of the current loads of the servers servers = [0] * x # Use the servers one by one for file_size in nums: min_loaded_server = heappop(servers) if min_loaded_server + file_size > maxLoad: return \\"NO\\" heappush(servers, min_loaded_server + file_size) return \\"YES\\""},{"question":"Given an n x m matrix filled with integers where each row is sorted in ascending order from left to right, and each column is sorted in ascending order from top to bottom, write a function that searches for a given target value in the matrix. The function should return a tuple (i, j) representing the position of the target in the matrix (0-based index). If the target is not found, return (-1, -1). The function signature is: ```python def search_matrix(matrix: List[List[int]], target: int) -> Tuple[int, int]: ``` # Constraints: - The matrix has at least 1 row and at most 300 rows. - The matrix has at least 1 column and at most 300 columns. - Each element in the matrix is between -10^9 and 10^9. # Examples: Example 1: Input: ``` matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 5 ``` Output: `(1, 1)` Example 2: Input: ``` matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 20 ``` Output: `(-1, -1)` # Note: - You are expected to write an efficient solution that works within the given constraints.","solution":"from typing import List, Tuple def search_matrix(matrix: List[List[int]], target: int) -> Tuple[int, int]: Searches for a given target value in a matrix where each row is sorted in ascending order from left to right and each column is sorted in ascending order from top to bottom. Returns a tuple (i, j) representing the position of the target in the matrix or (-1, -1) if not found. if not matrix or not matrix[0]: return (-1, -1) rows = len(matrix) cols = len(matrix[0]) row = 0 col = cols - 1 while row < rows and col >= 0: if matrix[row][col] == target: return (row, col) elif matrix[row][col] > target: col -= 1 else: row += 1 return (-1, -1)"},{"question":"You are given an array `arr` consisting of `n` integers and an integer `k`. Your task is to find the number of pairs `(i, j)` such that: - `1 ≤ i < j ≤ n` - `arr[i] + arr[j] = k` Each pair should be counted only once, and the order (i, j) and (j, i) should be considered the same pair. **Input:** - The first line contains two space-separated integers `n` and `k` (1 ≤ n ≤ 2000, -10^9 ≤ k ≤ 10^9) — the number of elements in the array and the target sum. - The second line contains `n` space-separated integers `arr_1, arr_2, ..., arr_n` (-10^9 ≤ arr_i ≤ 10^9) — the elements of the array. **Output:** - Print a single integer — the number of pairs `(i, j)` that satisfy the given conditions. **Example:** ``` Input: 5 6 1 5 7 -1 5 Output: 3 Explanation: The pairs are (1, 2), (1, 5), and (4, 5) i.e., (1 + 5), (1 + 5), (-1 + 7). ``` **Note:** In the example, the pairs meeting the criteria are `(1, 2)` (with values `1` and `5`), `(1, 5)` (with values `1` and `5`), and `(4, 5)` (with values `-1` and `7`). There are three such pairs.","solution":"def count_pairs(arr, k): Count the number of pairs (i, j) such that arr[i] + arr[j] = k. Parameters: arr (list): The array of integers. k (int): The target sum. Returns: int: The number of pairs that sum up to k. count = {} pairs_count = 0 for number in arr: target = k - number if target in count: pairs_count += count[target] if number in count: count[number] += 1 else: count[number] = 1 return pairs_count"},{"question":"A software company is developing a file storage system. To optimize the storage process, they need to implement a system that handles multiple file storage requests while ensuring there is no data overlap in the storage locations. Each file to be stored is represented as a rectangle with its width and height, and it comes with a starting coordinate indicating its bottom-left corner on a 2D plane. Your task is to create an IT system that handles multiple storage requests and ensures the files are stored in non-overlapping locations. The system should also perform queries to determine if a file is successfully stored or if it overlaps with an already stored file. The first line contains an integer n — the number of storage requests. Each of the next n lines contains the description of a single file storage request in the form of four integers — the bottom-left corner coordinates (x_1, y_1), and the dimensions of the file width and height. The next line contains an integer q — the number of queries. Each of the next q lines contains four integers — the bottom-left corner coordinates of a file (x_2, y_2) to be queried and its dimensions width and height. For each of the q queries, your program should output: 1. \\"YES\\" if the file can be stored by the company without overlapping any existing file. 2. \\"NO\\" if the file overlaps with any already stored file. Note that the bottom-left corner coordinates and dimensions of the rectangles will be non-negative integers. Constraints: - 1 le n, q le 10^5 - 0 le x_1, y_1, x_2, y_2 le 10^9 - 1 le width, height le 10^6 Sample Input: ``` 3 1 1 3 3 5 1 2 2 1 5 2 2 2 3 2 3 3 10 10 4 4 ``` Sample Output: ``` NO YES ```","solution":"class FileStorage: def __init__(self): self.rectangles = [] def add_rectangle(self, x1, y1, width, height): self.rectangles.append((x1, y1, x1 + width, y1 + height)) def can_store(self, x2, y2, width, height): x3, y3 = x2 + width, y2 + height for (x1, y1, x4, y4) in self.rectangles: if not (x3 <= x1 or x2 >= x4 or y3 <= y1 or y2 >= y4): return \\"NO\\" return \\"YES\\" def process_requests_and_queries(n, storage_requests, q, queries): file_storage = FileStorage() for x1, y1, width, height in storage_requests: file_storage.add_rectangle(x1, y1, width, height) results = [] for x2, y2, width, height in queries: results.append(file_storage.can_store(x2, y2, width, height)) return results"},{"question":"In a science experiment, you need to measure the temperature at regular intervals and determine the average temperature over a period of time. For this experiment, you have a list of temperature readings taken once every hour for a consecutive number of hours. You are to write a program that calculates the average temperature for any given hour range within this list of readings. The first line of input contains two integers, n and q (1 leq n leq 100, 1 leq q leq 50) — the total number of temperature readings and the number of queries respectively. The second line contains n space-separated integers representing the temperature readings. Each of the next q lines contains two integers, l and r (1 leq l leq r leq n), which denote the start and end hour of the period for which you need to calculate the average temperature (inclusive). For each query, print the average temperature for the specified period. The average temperature should be printed with a precision of two decimal places. Input: ``` 6 2 12 15 11 20 14 18 2 4 1 6 ``` Output: ``` 15.33 15.00 ``` In the first example, there are 6 temperature readings and 2 queries. The average temperature from hour 2 to hour 4 is (15+11+20)/3 = 15.33. The average temperature from hour 1 to hour 6 is (12+15+11+20+14+18)/6 = 15.00.","solution":"def calculate_average_temperatures(n, q, temperatures, queries): Calculate average temperature for given ranges specified in the queries. Args: - n: int, number of temperature readings - q: int, number of queries - temperatures: list of int, temperature readings - queries: list of tuples, each containing (l, r) denoting range of hours Returns: - list of float, average temperatures for each query with precision of 2 decimal places results = [] for l, r in queries: avg_temp = sum(temperatures[l-1:r]) / (r - l + 1) results.append(round(avg_temp, 2)) return results"},{"question":"You are given an integer array `b` of length `m`. You can perform the following operation any number of times on the array: select any two elements from `b`, say p and q, and replace `p` with their sum. Determine the minimum number of operations required to make all elements in the array equal. The first line of the input contains one integer `m` (1 ≤ m ≤ 2000) — the number of elements in the array. The second line contains `m` space-separated integers `b1, b2, ..., bm` (1 ≤ bi ≤ 10^9) — the elements of the array. Print `-1` if it is impossible to make all elements equal. Otherwise, print the minimum number of operations needed to make all elements equal. Example: Input: ``` 3 4 6 8 ``` Output: ``` 2 ``` Explanation: In the first operation, you can replace `4` with `4 + 6 = 10`. The array now looks like `[10, 6, 8]`. In the second operation, you can replace `6` with `6 + 8 = 14`. Now the array is `[10, 14, 8]`. All elements can be converted to the same value by further operations as needed.","solution":"def min_operations_to_equalize_elements(m, b): Determine the minimum number of operations required to make all elements in the array equal. If it\'s impossible to do so, return -1. :param m: Number of elements in the array :param b: List of integers :return: Minimum number of operations or -1 if impossible from math import gcd from functools import reduce # Calculate the greatest common divisor (gcd) of the entire array total_gcd = reduce(gcd, b) # Calculate the counts of how many operations would be needed if all elements can be reduced to their gcd if total_gcd == 1: # We can\'t make all elements equal if their gcd is 1 and they are not already equal return -1 return m - 1"},{"question":"You are given an array of integers a_1, a_2, dots, a_n and an integer k. In one operation, you can choose any index i (1 ≤ i ≤ n) in the array and add k to the element a_i. You need to determine the minimum number of operations required to make all the elements in the array equal. If it\'s not possible to make all elements equal, output -1. The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains two integers n and k (1 le n le 10^5, 1 ≤ k ≤ 10^9). The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9). It is guaranteed that sum n le 10^5 over all test cases. For each test case, output the minimum number of operations required to make all elements in the array equal, or -1 if it is not possible. In the first test case, the array is [3, 7, 14] and k is 4. You can add 4 to the first element once and add 4 to the second element twice to make the array [11, 11, 14] which makes it not possible to make all elements equal, so the answer is -1.","solution":"def min_operations_to_make_equal(t, test_cases): results = [] for n, k, arr in test_cases: remainder_set = set((ai - arr[0]) % k for ai in arr) if len(remainder_set) > 1: results.append(-1) else: max_elem = max(arr) min_elem = min(arr) results.append((max_elem - min_elem) // k) return results"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid is either empty or contains an obstacle. The grid is represented as a 2D array where a cell with a value of 0 is empty, and a cell with a value of 1 contains an obstacle. Your task is to determine if there is a path from the top-left corner of the grid (cell (1,1)) to the bottom-right corner of the grid (cell (n,m)) using only rightward and downward movements. Write a function that takes in the grid dimensions (n and m) and the grid itself, and returns \\"YES\\" if the path exists and \\"NO\\" if it doesn\'t. Input: - An integer n (1 le n le 1000): the number of rows in the grid. - An integer m (1 le m le 1000): the number of columns in the grid. - An array of arrays grid where each element grid[i][j] is either 0 (empty) or 1 (obstacle), representing whether cell (i+1, j+1) is empty or contains an obstacle. Output: - A single string, \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, and \\"NO\\" otherwise. Example: Input: 3 3 0 0 1 0 0 0 1 1 0 Output: YES Explanation: A path that reaches the bottom-right corner is (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3).","solution":"def is_path_exists(n, m, grid): Determines if there is a path from the top-left corner to the bottom-right corner in the grid. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of list of int): 2D grid where 0 represents an empty cell and 1 represents an obstacle. Returns: str: \\"YES\\" if a path exists, \\"NO\\" otherwise. from collections import deque # Check if the starting or ending points are blocked if grid[0][0] == 1 or grid[n-1][m-1] == 1: return \\"NO\\" # BFS setup directions = [(1, 0), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"Given an array of n non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police. You cannot rob two adjacent houses due to the security alarm system. Input Format: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of houses. - The second line contains n non-negative integers a_i (0 ≤ a_i ≤ 10^4), the amount of money in each house. Output Format: - Print a single integer, the maximum amount of money you can rob without triggering the alarm. Example: Input: 5 2 7 9 3 1 Output: 12 Explanation: Rob houses with the amounts 2, 9, and 1 to achieve the maximum amount of 12.","solution":"def rob(houses): Determine the maximum amount of money that can be robbed without alerting the police. :param houses: List of non-negative integers representing the amount of money at each house. :return: Maximum amount of money that can be robbed. n = len(houses) if n == 0: return 0 if n == 1: return houses[0] dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + houses[i]) return dp[-1] # Example usage: # n = 5 # houses = [2, 7, 9, 3, 1] # print(rob(houses)) # Output: 12"},{"question":"You are given a string s, consisting of n lowercase Latin letters, indexed from 1 to n. Let\'s denote the character at index i as si. Additionally, you have m queries to the string, each query is characterized by a pair of integers lj and rj (1 ≤ lj ≤ rj ≤ n). For each query lj, rj, you need to determine the lexicographically smallest substring of length k (1 ≤ k ≤ rj - lj + 1) within the substring slj, slj + 1, ..., srj. Help answer each of the m queries. The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100,000) — the length of string s and the number of queries. The next line contains the string s of n lowercase Latin letters. Each of the next m lines contains the description of a query as three space-separated integers lj, rj, and k. For each query, output the lexicographically smallest substring of length k within the given range. Example: Input: ``` 10 2 abcdefghij 1 5 2 3 10 3 ``` Output: ``` ab cde ```","solution":"def find_smallest_substrings(n, m, s, queries): Determines the lexicographically smallest substring of length k for each query in the string s. :param n: int, the length of the input string s :param m: int, the number of queries :param s: str, the input string s consisting of n lowercase Latin letters :param queries: list of tuples, each tuple (lj, rj, k) represents a query :return: list of str, each string is the result of the query results = [] for lj, rj, k in queries: range_substring = s[lj - 1:rj] min_substring = min(range_substring[i:i + k] for i in range(rj - lj + 1 - k + 1)) results.append(min_substring) return results"},{"question":"You are given a grid with `n` rows and `m` columns. Each cell in the grid contains an integer which represents the height of the terrain at that cell. Your task is to find the size of the largest connected region of cells that have the same height. Two cells are considered connected if they share a common edge (i.e., they are adjacent horizontally or vertically, but not diagonally). The size of a connected region is the number of cells it contains. Given the following information: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) indicating the number of rows and columns in the grid. - The next `n` lines each contain `m` integers representing the heights of the terrain in the respective cells. Output the size of the largest connected region of cells that have the same height. # Input ``` 3 3 1 2 2 2 2 2 3 3 3 ``` # Output ``` 5 ``` In this example, the largest connected region of cells with the same height is formed by the five cells with a height of 2.","solution":"def largest_connected_region(grid): def dfs(x, y, height): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != height or visited[x][y]: return 0 visited[x][y] = True size = 1 size += dfs(x+1, y, height) size += dfs(x-1, y, height) size += dfs(x, y+1, height) size += dfs(x, y-1, height) return size n = len(grid) m = len(grid[0]) visited = [[False] * m for _ in range(n)] max_region_size = 0 for i in range(n): for j in range(m): if not visited[i][j]: max_region_size = max(max_region_size, dfs(i, j, grid[i][j])) return max_region_size # Handling the example provided in the question grid = [ [1, 2, 2], [2, 2, 2], [3, 3, 3] ] print(largest_connected_region(grid)) # Output: 5"},{"question":"You are given a sequence of integers where each number appears exactly twice, except for one number which appears only once. Your task is to find the number that appears only once. Write a function `findUniqueNumber` that takes a list of integers and returns the integer that appears only once in the list. # Input - An integer `n` (1 ≤ n ≤ 10^6), the number of elements in the list. - A list of `2n+1` integers where each integer is between 1 and 10^9. # Output - An integer representing the number that appears only once. # Example ```python def findUniqueNumber(nums): # Implement your solution here n = int(input()) nums = list(map(int, input().split())) print(findUniqueNumber(nums)) ``` Input ``` 3 4 1 2 1 2 3 4 ``` Output ``` 3 ``` Note: - In the given example, the numbers `1`, `2`, and `4` appear twice, while the number `3` appears only once. Hence, the output is `3`.","solution":"def findUniqueNumber(nums): Returns the integer that appears only once in the list. unique_num = 0 for num in nums: unique_num ^= num return unique_num"},{"question":"Liam is a software developer working for an innovative tech company. He has been tasked with optimizing the company\'s social network system. The system has users connected by a list of friendships. There are n users in the system, numbered 1 to n. Some users have mutual friendships, forming clusters or connected components. Each user has a unique skill level denoted by an integer array skills of size n. A mentoring pair is defined as two users i and j who are friends (directly connected), and the user with the higher skill level mentors the user with the lower skill level. The aim is to maximize the number of unique mentoring pairs in the system. Given the number of users, the list of friendships, and an array of skill levels, determine the maximum number of unique mentoring pairs that can be formed. The first line contains two integers n and m (1 le n le 100,000, 0 le m le 100,000) — the number of users and the number of friendships. Each of the next m lines contains two integers u_i and v_i (1 le u_i, v_i le n, u_i neq v_i) indicating that users u_i and v_i are friends. The next line contains n integers skills[i] (1 le skills[i] le 10^6) where skills[i] represents the skill level of the i-th user. Output the maximum number of unique mentoring pairs that can be formed in the system. # Example Input ``` 5 4 1 2 2 3 3 4 4 5 3 10 8 6 4 ``` Output ``` 4 ``` Explanation: - User 1 (skill level 3) mentors User 2 (skill level 10). - User 3 (skill level 8) mentors User 2 (skill level 10) and also mentors User 4 (skill level 6). - User 4 (skill level 6) mentors User 5 (skill level 4). Maximum number of unique mentoring pairs is 4.","solution":"def max_unique_mentoring_pairs(n, m, friendships, skills): import collections # Convert friendships list into a graph form graph = collections.defaultdict(list) for u, v in friendships: graph[u].append(v) graph[v].append(u) mentoring_pairs = set() for u in range(1, n + 1): for v in graph[u]: if skills[u-1] != skills[v-1]: if skills[u-1] > skills[v-1]: mentoring_pairs.add((u, v)) else: mentoring_pairs.add((v, u)) return len(mentoring_pairs)"},{"question":"You are given two strings, `s1` and `s2`, each consisting of lowercase English letters. Both strings are of the same length. Your task is to make both strings identical by performing the minimum number of operations required. In each operation, you can replace any character of `s1` with any other character from `s1`. For example, if `s1 = \\"abcdef\\"` and `s2 = \\"azcedf\\"`, you can replace `b` with `z` in `s1` to make it \\"azcdef\\", and that is one operation. Write a function `min_operations_to_identical(s1: str, s2: str) -> int` that returns the minimum number of operations required to make `s1` identical to `s2`. # Input - The first line contains `s1`. - The second line contains `s2`. # Output - Output a single integer, the minimum number of operations required. # Constraints - Both `s1` and `s2` will have a length between `1` and `100,000`. # Example ```python s1 = \\"abcdef\\" s2 = \\"azcedf\\" print(min_operations_to_identical(s1, s2)) # Output: 1 ```","solution":"def min_operations_to_identical(s1: str, s2: str) -> int: Returns the minimum number of operations required to make s1 identical to s2. An operation is defined as replacing any character of s1 with any other character from s1. if len(s1) != len(s2): raise ValueError(\\"Strings must be of the same length\\") operations = 0 for char1, char2 in zip(s1, s2): if char1 != char2: operations += 1 return operations"},{"question":"Imagine you have a rectangular grid of size M x N where each cell contains an integer. Your task is to find the maximum sum of integers in any sub-grid of the given grid. A sub-grid is defined as any contiguous rectangular section of the grid. For example, given the following grid: ``` 3 -4 6 -5 2 -1 -2 3 1 2 0 -1 ``` The maximum sum sub-grid would be: ``` 3 -4 6 2 -1 -2 1 2 0 ``` Which sums up to 7. Write a function that takes the dimensions M (number of rows) and N (number of columns), and a 2D list of integers representing the grid. The function should return the maximum sum of any sub-grid. # Input: - The first line contains two integers M and N (1 ≤ M, N ≤ 100). - The next M lines each contain N space-separated integers representing the grid. # Output: - Print a single integer, the maximum sum of any sub-grid in the given grid. # Example: Input: ``` 3 4 3 -4 6 -5 2 -1 -2 3 1 2 0 -1 ``` Output: ``` 7 ```","solution":"def max_sum_subgrid(m, n, grid): def kadane(arr): max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum max_sum = float(\'-inf\') for left in range(n): temp = [0] * m for right in range(left, n): for i in range(m): temp[i] += grid[i][right] current_max_sum = kadane(temp) max_sum = max(max_sum, current_max_sum) return max_sum # Example input handling and calling the function if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() m = int(data[0]) n = int(data[1]) grid = [] index = 2 for i in range(m): row = list(map(int, data[index:index + n])) grid.append(row) index += n print(max_sum_subgrid(m, n, grid))"},{"question":"Alice loves collecting rare stones, and she has recently found a circular island where these stones are located. The island has n stones arranged in a circle, and each stone is uniquely identified by an integer from 1 to n. Alice wants to collect the stones in such a way that if she starts collecting stones from a particular stone i, she visits every stone in a contiguous manner exactly once before returning to stone i. Alice can start at any stone, but she always ends up back at her starting stone. Since walking a circle in one direction is the same as walking it in the opposite direction, she considers two starting points the same if the sequence of collected stones is identical when rotated or reversed. Your task is to determine the number of distinct ways Alice can collect n stones from the circular island. The first line of input contains a single integer n (1 ≤ n ≤ 100) — the number of stones on the island. Print a single integer — the number of distinct ways Alice can collect all the stones, ensuring rotation and reversal of any sequence are counted as the same sequence. Example: Input: 4 Output: 2 Explanation: There are two distinct ways to collect the stones for n = 4: 1. 1 -> 2 -> 3 -> 4 -> 1 2. 1 -> 4 -> 3 -> 2 -> 1","solution":"def count_distinct_ways(n): if n == 1: return 1 # Only one stone means only one way to collect it if n == 2: return 1 # Two stones can be collected in one unique way distinct_ways = n // 2 return distinct_ways"},{"question":"Implement a text editor with a version control system. The editor should support four types of operations. Each operation and its parameters are described below: 1. `1 s` - Append the string `s` at the end of the current content. 2. `2 k` - Delete the last `k` characters of the current content. 3. `3 k` - Print the `k-th` character of the current content. 4. `4 n` - Undo the last `n` operations (assuming 1-based indexing of operations). The first line of input contains a single integer `q` (1 leq q leq 10^5) — the number of operations to be performed. The following `q` lines contain one operation each, as described above. For each `3 k` operation, print the `k-th` character (1-based indexing). # Input ``` q op1 op2 ... opq ``` # Output For each `3 k` operation, print the `k-th` character of the current content on a new line. # Example Input ``` 10 1 abc 1 def 3 3 2 3 3 3 1 gh 3 4 4 2 3 6 4 1 ``` Output ``` c c d f ``` # Explanation 1. Append \\"abc\\" to content. Content: \\"abc\\" 2. Append \\"def\\" to content. Content: \\"abcdef\\" 3. Print the 3rd character. Output: \\"c\\" 4. Delete last 3 characters. Content: \\"abc\\" 5. Print the 3rd character. Output: \\"c\\" 6. Append \\"gh\\" to content. Content: \\"abcgh\\" 7. Print the 4th character. Output: \\"g\\" 8. Undo last 2 operations (Append \\"gh\\" and delete last 3 characters). Content: \\"abcdef\\" 9. Print the 6th character. Output: \\"f\\" 10. Undo last 1 operation (Append \\"def\\"). Content: \\"abc\\"","solution":"class TextEditor: def __init__(self): self.current_text = \\"\\" self.operations = [] def append(self, s): self.operations.append(self.current_text) self.current_text += s def delete(self, k): self.operations.append(self.current_text) self.current_text = self.current_text[:-k] def print_k(self, k): return self.current_text[k - 1] def undo(self, n): for _ in range(n): self.current_text = self.operations.pop() def process_operations(operations): editor = TextEditor() results = [] for operation in operations: op_parts = operation.split() op_type = int(op_parts[0]) if op_type == 1: editor.append(op_parts[1]) elif op_type == 2: editor.delete(int(op_parts[1])) elif op_type == 3: results.append(editor.print_k(int(op_parts[1]))) elif op_type == 4: editor.undo(int(op_parts[1])) return results"},{"question":"**Zoo Management** You are the manager of a zoo and need to manage the animal feeding schedule efficiently. The zoo has n animals each needing different quantities of food, and you have m feeding sessions available per day. You want to make sure that all animals are fed within the given number of feeding sessions with a constraint on maximum food that can be provided per session. Given an array of integers where the i-th element represents the food needed by the i-th animal, and an integer k representing the maximum amount of food that can be provided in a single session, you need to determine the minimum number of sessions required to feed all animals without exceeding the maximum food per session. # Input - The first line contains two integers, n (1 ≤ n ≤ 1000, the number of animals) and k (1 ≤ k ≤ 10^6, the maximum quantity of food per session). - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6), the amount of food needed by each animal. # Output - Print the minimum number of feeding sessions needed to feed all the animals. # Example Input ``` 4 7 2 5 4 3 ``` Output ``` 3 ``` # Explanation In the given example, the minimum number of feeding sessions is 3, which can be divided as follows: - Session 1: Feed the animal that requires 7 units. - Session 2: Feed animals requiring 5 and 2 units. - Session 3: Feed animals requiring 4 and 3 units. You need to ensure that you\'ve covered all animals, and no session exceeds the maximum food quantity k. Note: The problem can be approached using a combination of sorting and greedy techniques to minimize the number of sessions.","solution":"def min_feeding_sessions(n, k, food_needs): Calculate the minimum number of feeding sessions needed to feed all animals. Parameters: n (int): Number of animals. k (int): Maximum quantity of food per session. food_needs (list of int): Amount of food needed by each animal. Returns: int: Minimum number of feeding sessions required. food_needs.sort(reverse=True) sessions = 0 i = 0 while i < n: current_session = 0 while i < n and current_session + food_needs[i] <= k: current_session += food_needs[i] i += 1 sessions += 1 return sessions # Example usage: # n = 4, k = 7, food_needs = [2, 5, 4, 3] # Output: 3 # print(min_feeding_sessions(4, 7, [2, 5, 4, 3]))"},{"question":"You are developing a smart queue management system for a grocery store. The system keeps track of customers entering and leaving the queue in real-time. The queue supports two types of operations: 1. `enqueue x`: A customer with ID `x` enters the queue. 2. `dequeue`: The customer at the front of the queue leaves. Occasionally, the manager wants to know the current state of the queue (list of IDs from front to back). Implement the queue with the following functionalities: - `enqueue x`: Insert a customer with ID `x` at the rear of the queue. - `dequeue`: Remove and return the customer at the front of the queue. If the queue is empty, return `-1`. - `get_queue`: Return a list of customer IDs from front to back. **Input Format**: An integer `m` representing the number of operations. Each of the next `m` lines describes an operation in one of the formats below: - `1 x` for an `enqueue x` operation - `2` for a `dequeue` operation - `3` for a `get_queue` operation **Output Format**: For each `dequeue` operation, output the customer ID or `-1` if the queue is empty. For each `get_queue` operation, output the list of customer IDs currently in the queue. **Example**: ``` Input: 7 1 5 1 3 3 2 2 2 3 Output: [5, 3] 5 3 -1 [] ``` **Explanation**: - The first operation enqueues customer with ID `5`. - The second operation enqueues customer with ID `3`. - The third operation queries the queue, resulting in `[5, 3]`. - The fourth operation dequeues, returning `5`. - The fifth operation dequeues, returning `3`. - The sixth operation attempts to dequeue from an empty queue, resulting in `-1`. - The seventh operation queries the queue, resulting in an empty list `[]`.","solution":"class SmartQueue: def __init__(self): self.queue = [] def enqueue(self, x): self.queue.append(x) def dequeue(self): if self.queue: return self.queue.pop(0) else: return -1 def get_queue(self): return self.queue"},{"question":"Alice is organizing a charity marathon in her town. She has a list of participants and the number of hours each participant is willing to spend on training per week. Given the total number of training hours Alice wants the marathon participants to achieve collectively, she needs to figure out how to pair participants into training groups such that their combined training hours can exactly match the target number of hours. Specifically, given a list of non-negative integers where each integer represents the number of training hours a participant can contribute, and a target number of training hours, determine if there exists a subset of participants whose training hours sum up exactly to the target number. If such a subset exists, print \\"YES\\"; otherwise, print \\"NO\\". The first line contains one integer n (1 ≤ n ≤ 100), the number of participants. The second line contains n non-negative integers representing the training hours of each participant, separated by spaces. The third line contains one non-negative integer t (0 ≤ t ≤ 10000), the target number of training hours. # Example **Input:** ``` 5 2 3 7 8 10 11 ``` **Output:** ``` YES ``` **Explanation:** In this example, participants with training hours 3 and 8 can be paired together to exactly meet the target of 11 hours. # Constraints - You can assume that each participant\'s training hours are distinct. - Each participant can only be used once. # Note: - This problem can be approached using dynamic programming or a recursive approach with memoization to check all possible subsets of participants\' training hours.","solution":"def can_achieve_target(hours, target): Determines if there exists a subset of participants whose training hours exactly match the target. :param hours: List of non-negative integers representing training hours :param target: Non-negative integer representing the target training hours :return: \\"YES\\" if such a subset exists, otherwise \\"NO\\" n = len(hours) dp = [False] * (target + 1) dp[0] = True # There\'s always a subset with sum 0, which is the empty subset for hour in hours: for j in range(target, hour - 1, -1): if dp[j - hour]: dp[j] = True return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"You are given an array of integers representing a sequence of stock prices in chronological order for multiple days. You can buy and sell the stock any number of times, but you can only hold one share of the stock at a time. That means you must sell the stock before you can buy it again. Design an algorithm to maximize the total profit you can achieve by buying and selling the stock multiple times. Write a function that takes an array of integers and returns the maximum profit you can make. # Function Signature ```python def max_profit(prices: List[int]) -> int: ``` # Input - An integer array `prices` where `prices[i]` is the stock price on the `i-th` day. # Output - An integer representing the maximum profit you can achieve. # Constraints - 1 <= prices.length <= 10^5 - 0 <= prices[i] <= 10^4 # Example Example 1 ```python prices = [7, 1, 5, 3, 6, 4] max_profit(prices) # Returns 7 ``` *Explanation:* Buy on day 2 (price = 1) and sell on day 3 (price = 5) for a profit of 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6) for a profit of 6-3 = 3, so total profit = 4 + 3 = 7. Example 2 ```python prices = [1, 2, 3, 4, 5] max_profit(prices) # Returns 4 ``` *Explanation:* Buy on day 1 (price = 1) and sell on day 5 (price = 5) for a total profit of 5-1 = 4. Example 3 ```python prices = [7, 6, 4, 3, 1] max_profit(prices) # Returns 0 ``` *Explanation:* In this case, no transactions are done, so the maximum profit is 0.","solution":"def max_profit(prices): Function to maximize the total profit from buying and selling stocks multiple times. :param prices: List[int] - List of stock prices where prices[i] is the price of the stock on the i-th day. :return: int - The maximum profit. max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"A factory produces items which are categorized by an ID number. Each ID number is an integer that falls within a specific range and may occur multiple times in a list. The factory also provides a policy that identifies a range [low, high] which indicates the permissible range for item IDs. You need to write a function that takes a list of item IDs and the permissible range as input and returns a list of IDs that fall within the given range, maintaining their original order. If none of the IDs fall within the permissible range, return an empty list. # Function Signature ```python def filter_by_range(item_ids: List[int], low: int, high: int) -> List[int]: ``` # Input - `item_ids` (List[int]): A list of integers representing item IDs. The list contains at least 1 and at most 10^5 elements. - `low` (int): An integer representing the lower bound of the permissible range (inclusive). - `high` (int): An integer representing the upper bound of the permissible range (inclusive). # Output - A list of integers representing the item IDs that fall within the given range, preserving the order they appeared in the input list. # Example Example 1: ```python item_ids = [3, 8, 9, 12, 4, 7] low = 4 high = 10 print(filter_by_range(item_ids, low, high)) # Output: [8, 9, 4, 7] ``` Example 2: ```python item_ids = [11, 15, 20, 25, 30] low = 5 high = 10 print(filter_by_range(item_ids, low, high)) # Output: [] ``` # Constraints - All IDs in `item_ids` are non-negative integers. - 1 ≤ |item_ids| ≤ 10^5 - 0 ≤ low ≤ high ≤ 10^6","solution":"def filter_by_range(item_ids, low, high): Filters the item_ids list to return only those IDs within the specified range [low, high] return [item_id for item_id in item_ids if low <= item_id <= high]"},{"question":"Given a string of parentheses, determine the minimum number of parentheses that must be added to make the string valid. A string of parentheses is valid if every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly nested. For example, the string \\"())\\" would need one more closing parenthesis to be valid, resulting in \\"())()\\". Similarly, the string \\"(((\\" would need three more closing parentheses to be valid, resulting in \\"((()))\\". Write a function `minAddToMakeValid(s: str) -> int` that takes a string `s` containing only \'(\' and \')\' and returns the minimum number of parentheses required to make the string valid. Examples: ``` minAddToMakeValid(\\"())\\") -> 1 minAddToMakeValid(\\"(((\\") -> 3 minAddToMakeValid(\\"()\\") -> 0 minAddToMakeValid(\\"()))((\\") -> 4 ``` Constraints: - The input string `s` will only contain \'(\' and \')\' characters. - The length of the input string will be in the range [1, 10^5].","solution":"def minAddToMakeValid(s: str) -> int: Returns the minimum number of parentheses required to make the string valid. left_needed = 0 right_needed = 0 for char in s: if char == \'(\': right_needed += 1 elif char == \')\': if right_needed > 0: right_needed -= 1 else: left_needed += 1 return left_needed + right_needed"},{"question":"Assume you have a special type of list (let\'s call it `L`) that is initialized with `n` integers. This list supports the following operations beyond the standard list operations: 1. **Add to Range**: Add a certain value `v` to all elements of the list from index `l` to index `r` (both inclusive). 2. **Find Prefix Sum**: Find the sum of the first `k` elements of the list (i.e., from index `0` to index `k-1`). You are required to perform multiple operations of these types on the list. Your task is to implement a system that handles these operations with an optimal performance. # Input and Output Specifications - The first line contains an integer `n` (1 ≤ n ≤ 2·10^5) — the number of elements in the list. - The second line contains `n` integers `a[0], a[1], ..., a[n-1]` (1 ≤ a[i] ≤ 10^9) — the initial values of the list. - The third line contains an integer `m` (1 ≤ m ≤ 2·10^5) — the number of operations. - Each of the next `m` lines contains one of the following operations: - Operation of type \\"1 l r v\\" means to add value `v` (1 ≤ v ≤ 10^9) to all the elements in the interval [l, r] (0 ≤ l ≤ r < n). - Operation of type \\"2 k\\" means to find the prefix sum of the first `k` elements (1 ≤ k ≤ n). For each operation of type \\"2\\", output the result (i.e., the prefix sum) on a new line. # Example Input ``` 5 1 2 3 4 5 4 1 1 3 2 2 4 1 0 4 1 2 5 ``` Output ``` 13 21 ``` # Explanation 1. Initially, the list is `L = [1, 2, 3, 4, 5]`. 2. After the operation `1 1 3 2`, the list is updated to `L = [1, 4, 5, 6, 5]` (2 is added from index 1 to index 3). 3. The operation `2 4` returns `1 + 4 + 5 + 6 = 16`. 4. After the operation `1 0 4 1`, the list is updated to `L = [2, 5, 6, 7, 6]` (1 is added to all elements). 5. The operation `2 5` returns `2 + 5 + 6 + 7 + 6 = 26`. Your task is to implement efficient solutions for these operations to handle large inputs promptly.","solution":"class SpecialList: def __init__(self, n, initial_values): self.n = n self.data = initial_values[:] self.lazy = [0] * (n + 1) def add_to_range(self, l, r, v): self.lazy[l] += v if r + 1 < self.n: self.lazy[r + 1] -= v def find_prefix_sum(self, k): running_sum = 0 prefix_sum = 0 for i in range(k): running_sum += self.lazy[i] prefix_sum += self.data[i] + running_sum return prefix_sum def process_operations(n, initial_values, operations): results = [] special_list = SpecialList(n, initial_values) for operation in operations: if operation[0] == 1: _, l, r, v = operation special_list.add_to_range(l, r, v) elif operation[0] == 2: _, k = operation result = special_list.find_prefix_sum(k) results.append(result) return results"},{"question":"You are given a list of `n` tasks, each represented by a unique positive integer between 1 and `n`. Each task may have dependencies, meaning some tasks must be completed before others can be started. The dependencies are given as pairs of integers `(a, b)` where task `a` must be completed before task `b`. Your task is to find a valid order in which all tasks can be completed. If there are multiple valid orders, you can return any of them. If it is not possible to complete all tasks due to a cyclic dependency, return an empty list. The input consists of two integers `n` and `d` (1 ≤ n ≤ 10^4, 0 ≤ d ≤ 10^5), where `n` is the number of tasks and `d` is the number of dependencies. The following `d` lines contain two integers `a` and `b` (1 ≤ a, b ≤ n), representing a dependency. Output a list of integers representing a valid order in which to complete the tasks, or an empty list if no such order exists. Example: ``` Input: 6 6 1 3 2 3 3 4 4 5 4 6 6 5 Output: [1, 2, 3, 4, 6, 5] ``` or ``` Output: [2, 1, 3, 4, 6, 5] ``` If no valid order exists: Example: ``` Input: 3 3 1 2 2 3 3 1 Output: [] ```","solution":"from collections import deque, defaultdict def find_task_order(n, d, dependencies): Find a valid order in which to complete the tasks or return an empty list if not possible. Arguments: n : int - number of tasks d : int - number of dependencies dependencies : List[Tuple[int, int]] - list of dependencies Returns: List[int] - a valid order of tasks or an empty list if no such order exists # Initialize the graph and in-degree count graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n+1)} for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 # Queue for nodes with no incoming edges zero_in_degree_queue = deque([k for k in in_degree if in_degree[k] == 0]) topological_sorted_order = [] while zero_in_degree_queue: vertex = zero_in_degree_queue.popleft() topological_sorted_order.append(vertex) # Reduce in-degree for all neighbors for neighbor in graph[vertex]: in_degree[neighbor] -= 1 # If in-degree becomes zero, add to queue if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) if len(topological_sorted_order) == n: return topological_sorted_order else: return []"},{"question":"Given a grid of size N x N where each cell is either walkable or has an obstacle, your task is to calculate the number of distinct paths from the top-left cell to the bottom-right cell. You are only allowed to move either right or down at any point in time. You are given the grid in the form of an array of strings where each character in the string represents a cell in the grid. \'0\' represents a walkable cell and \'1\' represents an obstacle. You need to return the total number of distinct paths modulo 10^9 + 7. If no path exists, return 0. Input Format: - The first line contains an integer N (1 <= N <= 100), the size of the grid. - Each of the next N lines contains a string of length N representing the grid. Output Format: - Output a single integer, the number of distinct paths modulo 10^9 + 7. Examples: Input: 3 000 010 000 Output: 2 Input: 2 01 00 Output: 1 Explanation: In the first example, there are two distinct paths: 1. Move right, right, down, down. 2. Move down, down, right, right. In the second example, there is only one distinct path: 1. Move down, right. Note: - You cannot move through cells with \'1\'. - You must move exactly to the bottom-right cell without detouring through obstacles or stepping outside the grid.","solution":"def num_paths(grid): MOD = 10**9 + 7 N = len(grid) if grid[0][0] == \'1\' or grid[N-1][N-1] == \'1\': return 0 dp = [[0] * N for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(N): if grid[i][j] == \'1\': dp[i][j] = 0 # Impossible path due to obstacle else: if i > 0: dp[i][j] += dp[i-1][j] % MOD if j > 0: dp[i][j] += dp[i][j-1] % MOD return dp[N-1][N-1] % MOD"},{"question":"Given two sorted arrays of integers, write a function to merge them into a single sorted array. Your function should return the new sorted array. The function signature is: ```python def merge_arrays(arr1: List[int], arr2: List[int]) -> List[int]: pass ``` # Input - Two sorted arrays of integers, `arr1` and `arr2`. - `1 <= len(arr1), len(arr2) <= 10^5` - `-10^9 <= arr1[i], arr2[i] <= 10^9` # Output - A sorted array that contains all the elements of `arr1` and `arr2`. # Example ```python print(merge_arrays([1, 3, 5], [2, 4, 6])) # Output: [1, 2, 3, 4, 5, 6] print(merge_arrays([-2, 0, 2], [-3, -1, 3])) # Output: [-3, -2, -1, 0, 2, 3] ```","solution":"from typing import List def merge_arrays(arr1: List[int], arr2: List[int]) -> List[int]: Merges two sorted arrays into a single sorted array. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append remaining elements of arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append remaining elements of arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Nina is a software engineer who loves optimizing code. She came across an interesting problem regarding string manipulations. Nina has a string S of length n consisting of lowercase English letters. She wants to perform **exactly one** operation on the string to make it lexicographically smallest possible. The operation consists of removing exactly one character from the string S. Can you help Nina determine the lexicographically smallest string she can obtain after removing exactly one character? # Input - The first line contains a single integer n (1 leq n leq 10^5) — the length of the string S. - The second line contains the string S of length n. # Output - Output a single string — the lexicographically smallest string possible after removing exactly one character from the given string. # Examples Example 1 **Input:** ``` 4 abcd ``` **Output:** ``` abc ``` Example 2 **Input:** ``` 3 bca ``` **Output:** ``` ba ``` Example 3 **Input:** ``` 5 abcda ``` **Output:** ``` abca ``` # Note For the first example, removing the last character \'d\' results in the string \\"abc\\", which is lexicographically smallest among all possible strings after removing one character. For the second example, removing \'c\' from \\"bca\\" results in \\"ba\\", which is the lexicographically smallest string possible. For the third example, removing the second \'a\' from \\"abcda\\" results in \\"abca\\", which is the smallest string among all possible choices.","solution":"def lexicographically_smallest_string(n, s): Returns the lexicographically smallest string after removing exactly one character from s. :param n: Length of the string s. :param s: The input string s. :return: Lexicographically smallest string after removing one character. for i in range(n - 1): if s[i] > s[i + 1]: return s[:i] + s[i+1:] return s[:-1]"},{"question":"Tom is interested in making string transformations. He has a string `s` and wants to transform it into another string `t` using a sequence of operations. In one operation, he can choose any contiguous substring of `s` and reverse it. Tom wants to determine the minimum number of operations required to transform `s` into `t`. If it is impossible to transform `s` into `t`, return -1. The first line contains a single integer `n` (1 ≤ n ≤ 105), which is the length of the strings `s` and `t`. The second line contains the string `s` consisting of lowercase English letters. The third line contains the string `t` also consisting of lowercase English letters. Print the minimum number of operations required to transform `s` into `t`, or -1 if impossible. Example: Input: 4 abdc abcd Output: 1","solution":"def min_operations_to_transform(n, s, t): Determines the minimum number of operations to transform string s into t using substring reversals. If impossible, return -1. # Convert the strings into lists to allow mutation s = list(s) t = list(t) # Early check if sorted characters match if sorted(s) != sorted(t): return -1 # Check if s and t are already the same if s == t: return 0 # Function to reverse a portion of the list def reverse_sublist(s, start, end): return s[:start] + s[start:end+1][::-1] + s[end+1:] num_operations = 0 for i in range(n): if s[i] != t[i]: j = i # Find the first occurrence of t[i] in the remainder of s starting from i while j < n and s[j] != t[i]: j += 1 if j < n: # Need to reverse the segment s = reverse_sublist(s, i, j) num_operations += 1 else: # No such character in s, transformation is impossible return -1 return num_operations"},{"question":"Vlad loves playing a game involving two types of moves: adding and removing elements from a sequence. Each move has specific rules that must be followed, and Vlad wants to perform as many moves as possible while adhering to these rules. Vlad starts with an empty sequence of integers. He can perform the following moves: 1. Add an element `x` to the end of the sequence if `x` is greater than the current maximum element in the sequence. 2. Remove the last element from the sequence if it has at least one element. Vlad wants to execute a given list of moves while maximizing the length of the sequence at the end. If there are multiple ways to achieve this, he prefers the sequence with the largest lexicographical order. The first line contains an integer `n` (1 ≤ n ≤ 200,000) — the number of moves Vlad wants to perform. The second line contains `n` integers `a1, a2, ..., an` (0 ≤ ai ≤ 10^9) — the list of integers representing the moves. If the integer is `0`, it represents a removal move; otherwise, it represents an addition of that integer to the sequence. Output a single line containing the remaining sequence of integers that Vlad can form by following the moves while maximizing the length of the sequence and, if possible, the lexicographical order of the sequence. Example: Input: ``` 7 5 0 4 8 0 10 12 ``` Output: ``` 10 12 ```","solution":"def maximize_sequence(n, moves): sequence = [] max_elem = -1 for move in moves: if move == 0: if sequence: sequence.pop() else: if move > max_elem: sequence.append(move) max_elem = move return sequence"},{"question":"You are given an undirected graph with n nodes and m edges. Each node in the graph has a value associated with it. You need to perform the following queries on the graph: 1. Find and print the maximum node value in the connected component of the graph that contains node u. **Input:** The first line contains two integers n and m (1 leq n, m leq 10^5) - the number of nodes and edges. The second line contains n integers - the values of the nodes (1-indexed). Each of the following m lines contains two integers u and v (1 leq u, v leq n) indicating that there is an edge between node u and node v. The next line contains an integer q (1 leq q leq 10^5) - the number of queries. Each of the next q lines contains a single integer u (1 leq u leq n) representing a query to find the maximum node value in the connected component that contains node u. **Output:** For each query, print the maximum node value in the connected component of the node u. **Example:** *Input:* ``` 5 4 1 2 3 4 5 1 2 2 3 4 5 1 5 3 2 4 1 ``` *Output:* ``` 3 5 3 ``` **Explanation:** In this example, there are 5 nodes with values [1, 2, 3, 4, 5]. The graph contains edges between nodes (1-2), (2-3), (4-5), and (1-5). - For the first query, the connected component containing node 2 includes nodes {1, 2, 3, 5}, and the maximum value among these is 3. - For the second query, the connected component containing node 4 includes nodes {4, 5}, and the maximum value is 5. - For the third query, the connected component containing node 1 includes nodes {1, 2, 3, 5}, and the maximum value is 3.","solution":"def find_connected_components(n, edges): from collections import defaultdict # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = [] def dfs(node, component): stack = [node] while stack: curr = stack.pop() if not visited[curr]: visited[curr] = True component.append(curr) for neighbor in graph[curr]: if not visited[neighbor]: stack.append(neighbor) # Find all components for i in range(1, n + 1): if not visited[i]: component = [] dfs(i, component) components.append(component) return components def preprocess_components(n, values, components): component_max_value = {} node_to_component = {} for comp_id, component in enumerate(components): max_value = max(values[node - 1] for node in component) component_max_value[comp_id] = max_value for node in component: node_to_component[node] = comp_id return component_max_value, node_to_component def max_node_value(n, m, values, edges, queries): components = find_connected_components(n, edges) component_max_value, node_to_component = preprocess_components(n, values, components) results = [] for u in queries: comp_id = node_to_component[u] results.append(component_max_value[comp_id]) return results"},{"question":"You are asked to help a prestigious university organize its graduation ceremony. They need to seat students in a single row such that the row follows a specific arrangement. The university has invited `n` students, each represented by a unique ID. The arrangement is determined by two constraints: 1. Each student\'s ID must be unique and between `1` and `n` (inclusive). 2. There are some pairs of students who are friends and prefer to sit next to each other. You are given `m` such pairs. Design an algorithm to place the students in the row such that the maximum number of friend pairs are seated next to each other. If there are multiple arrangements yielding the same maximum number of friend pairs, any valid arrangement is acceptable. The first line contains two integers `n` and `m` (1 le n le 100, 0 le m le frac{n(n-1)}{2}) — the number of students and the number of friend pairs, respectively. Each of the next `m` lines contains two integers `u` and `v` (1 le u, v le n) indicating that student `u` and student `v` are friends and prefer to sit next to each other. Each pair is unique and unordered. Output a single line with `n` integers representing the IDs of the students in the order they should sit, maximizing the number of adjacent friend pairs. Example: Input: ``` 5 4 1 2 1 3 2 4 3 4 ``` Output: ``` 1 2 4 3 5 ```","solution":"import itertools def maximize_friend_pairs(n, m, friend_pairs): from collections import defaultdict adjacency_list = defaultdict(list) for u, v in friend_pairs: adjacency_list[u].append(v) adjacency_list[v].append(u) best_order = None max_friend_pairs = -1 for order in itertools.permutations(range(1, n+1)): friend_count = 0 for i in range(n-1): if order[i+1] in adjacency_list[order[i]]: friend_count += 1 if friend_count > max_friend_pairs: max_friend_pairs = friend_count best_order = order return list(best_order) # Example usage n = 5 m = 4 friend_pairs = [(1, 2), (1, 3), (2, 4), (3, 4)] print(maximize_friend_pairs(n, m, friend_pairs))"},{"question":"You are given a grid with n rows and m columns. Each cell of the grid can contain either a 0 or a 1, representing a binary matrix. You need to determine the number of connected components of 1s in the given grid. Two cells are considered connected if they are adjacent horizontally or vertically (not diagonally). The first line contains two integers n and m (1 ≤ n, m ≤ 1000). Each of the next n lines contains m integers, each being either 0 or 1. Output a single integer representing the number of connected components of 1s in the grid. Example: Input: 4 5 1 0 0 1 0 1 1 0 1 0 0 0 1 0 0 0 1 1 0 1 Output: 4 Explanation: There are 4 connected components of 1s in the grid: 1. The three 1s in the top-left corner (1,0 and 1,1). 2. The single 1 in the second row, fourth column (1,3). 3. The two adjacent 1s in the bottom-left corner (3,1 and 3,2). 4. The single 1 in the bottom-right corner (3,4).","solution":"def count_connected_components(grid): Returns the number of connected components of 1s in the given binary grid. A component is defined as a group of 1s connected horizontally or vertically. n = len(grid) m = len(grid[0]) if n > 0 else 0 def dfs(x, y): # Use DFS to visit all cells in the current connected component stack = [(x, y)] while stack: cx, cy = stack.pop() for nx, ny in [(cx-1, cy), (cx+1, cy), (cx, cy-1), (cx, cy+1)]: if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 1: grid[nx][ny] = -1 # Mark cell visited stack.append((nx, ny)) connected_components = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: dfs(i, j) connected_components += 1 return connected_components # Example usage grid = [ [1, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 1, 0, 1] ] print(count_connected_components(grid)) # Output should be 4"},{"question":"You are given an array of integers `nums` of length `n`. Your task is to determine if it\'s possible to partition the array into exactly two non-empty subarrays such that the sum of the elements in the first subarray is equal to the sum of the elements in the second subarray. Input: - The first line contains a single integer `n` (2 ≤ n ≤ 10^5), the length of the array. - The second line contains `n` space-separated integers `nums[i]` (1 ≤ nums[i] ≤ 10^4). Output: - Print \\"Yes\\" if it\'s possible to partition the array into two subarrays with equal sum. - Print \\"No\\" otherwise. Example: Input: ``` 4 1 2 3 0 ``` Output: ``` Yes ``` Explanation: The array can be partitioned into [1, 2] and [3, 0] with sums 3 and 3, respectively. Input: ``` 3 1 1 4 ``` Output: ``` No ``` Explanation: There is no way to partition the array into two subarrays with equal sums.","solution":"def can_partition(nums): total_sum = sum(nums) # If the total sum is odd, we cannot partition it into two equal-sum subarrays if total_sum % 2 != 0: return \\"No\\" target_sum = total_sum // 2 current_sum = 0 for num in nums: current_sum += num if current_sum == target_sum: return \\"Yes\\" elif current_sum > target_sum: return \\"No\\" return \\"No\\""},{"question":"In a land with many towns, each town is connected to several other towns via bidirectional roads. Given a list of towns, these roads are represented as an undirected graph. Each town is represented by a node, and each road by an edge. Each road has a certain length represented by an integer. You, an intrepid traveler, wish to travel between two specific towns with the least cost (distance). Your goal is to find the shortest path between two given towns using Dijkstra’s algorithm. Write a function `shortest_path(n, edges, source, destination)` where: - `n` is an integer representing the number of towns. - `edges` is a list of tuples `(u, v, w)` where `u` and `v` are the towns connected by a road, and `w` is the length of the road. - `source` is the starting town for your journey. - `destination` is the town you want to reach. Your function should return the shortest distance from the `source` town to the `destination` town. If there is no path between the two towns, return -1. # Input - An integer `n` (1 le n le 1000), the number of towns. - A list of tuples `edges`, where each tuple contains three integers `u`, `v` (1 le u, v le n) and `w` (1 le w le 1000) representing a road between town `u` and town `v` of length `w`. - An integer `source` (1 le source le n), the starting town. - An integer `destination` (1 le destination le n), the destination town. # Output - An integer, the shortest distance from `source` to `destination`. If no path exists, return -1. # Example ```python n = 5 edges = [(1, 2, 3), (1, 3, 10), (2, 3, 4), (2, 4, 2), (4, 5, 6)] source = 1 destination = 5 print(shortest_path(n, edges, source, destination)) # Output should be 11 ``` # Constraints - The graph is connected and there are no negative weights.","solution":"import heapq def shortest_path(n, edges, source, destination): Calculates the shortest path from source to destination using Dijkstra\'s algorithm. Parameters: n (int): The number of towns. edges (list of tuples): A list of edges (u, v, w) representing roads between towns u and v with distance w. source (int): The starting town. destination (int): The destination town. Returns: int: The shortest distance from source to destination, or -1 if no path exists. graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) pq = [(0, source)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[source] = 0 while pq: current_distance, current_town = heapq.heappop(pq) if current_town == destination: return current_distance if current_distance > distances[current_town]: continue for neighbor, weight in graph[current_town]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 if distances[destination] == float(\'inf\') else distances[destination]"},{"question":"You are given an array of integers and your task is to partition the array into two non-empty subsets such that the absolute difference between the sums of these subsets is minimized. If multiple solutions exist, return any one of them. Write a function `partition_array(nums: List[int]) -> Tuple[List[int], List[int]]` that returns two lists corresponding to the two subsets. The function should aim to minimize the absolute difference between the sums of the subsets. # Input - A single list of integers `nums` where `1 ≤ len(nums) ≤ 100` and each element of `nums` is between `1` and `10^5`. # Output - A tuple containing two lists of integers representing the two subsets. # Example ```python print(partition_array([1, 2, 3, 4, 5, 6])) # Output: ([1, 2, 3, 4], [5, 6]) or any other partition minimizing the difference print(partition_array([10, 10, 9, 9, 2])) # Output: ([10, 9, 2], [10, 9]) or any other partition minimizing the difference ``` # Constraints - You must find a partition with the absolute difference of subset sums minimized. - The solution must be efficient for the upper limits of the input constraints.","solution":"from typing import List, Tuple def partition_array(nums: List[int]) -> Tuple[List[int], List[int]]: Partitions the array into two subsets to minimize the absolute difference in their sums. :param nums: List[int] - the list of integers to partition :return: Tuple[List[int], List[int]] - two lists corresponding to the two subsets total_sum = sum(nums) n = len(nums) subset = [] # DP table where dp[i][j] is True if a subset with sum j can be formed using the first i numbers dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum // 2 + 1): dp[i][j] = dp[i-1][j] if j >= nums[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j - nums[i-1]] sum1 = 0 for j in range(total_sum // 2, -1, -1): if dp[n][j]: sum1 = j break sum2 = total_sum - sum1 subset1 = [] subset2 = [] for i in range(n, 0, -1): if sum1 - nums[i-1] >= 0 and dp[i-1][sum1 - nums[i-1]]: subset1.append(nums[i-1]) sum1 -= nums[i-1] else: subset2.append(nums[i-1]) return (subset1, subset2)"},{"question":"# Problem Statement: You are given a string s consisting of lowercase English letters. Your task is to determine whether the given string is **k-palindrome**. A string is called k-palindrome if it can be transformed into a palindrome by removing no more than k characters. # Input: - The first line contains a single integer T (1 le T le 100) - the number of test cases. - Each test case consists of a single line containing a string s (1 le |s| le 1000) and an integer k (0 le k le 1000). # Output: For each test case, output \\"YES\\" if the given string s can be transformed into a palindrome by removing no more than k characters. Otherwise, output \\"NO\\". # Example Input: ``` 3 abca 1 abcdef 2 racecar 0 ``` # Example Output: ``` YES NO YES ```","solution":"def is_k_palindrome(s, k): Determines if the string s can be converted into a palindrome by removing no more than k characters. def longest_palindromic_subseq(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] lps = longest_palindromic_subseq(s) min_deletions = len(s) - lps return \\"YES\\" if min_deletions <= k else \\"NO\\" def process_test_cases(test_cases): results = [] for s, k in test_cases: results.append(is_k_palindrome(s, k)) return results"},{"question":"A scientist is working on an exciting experiment. He has a list of n integers a_1, a_2, ldots, a_n. He would like to create a new list of n integers b_1, b_2, ldots, b_n such that each element b_i is the sum of its corresponding element a_i and any one of its adjacent elements—that is, b_i = a_i + a_{i-1} or b_i = a_i + a_{i+1}, where 1 le i le n. Assume that for the first and the last element of the list, only one adjacent element exists. Given the list of integers, your task is to determine if it\'s possible to create such a list b that satisfies the above conditions. If it is, output \\"Yes\\" and print the list b. If there are multiple valid solutions, any will be accepted. If no such list b can be created, output \\"No\\". The first line contains an integer n (2 le n le 10^5). The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^5). If there is no possible list b , i_i, print \\"No\\". Otherwise, print \\"Yes\\" and then n integers b_1, b_2, ldots, b_n (2 le b_i le 2 cdot 10^5). Multiple answers are acceptable.","solution":"def create_b_list(n, a): if n < 2 or n > 10**5: return \\"No\\" for i in range(n): if a[i] < 1 or a[i] > 10**5: return \\"No\\" b = [] for i in range(n): if i == 0: b.append(a[i] + a[i + 1]) elif i == n - 1: b.append(a[i] + a[i - 1]) else: b.append(min(a[i] + a[i - 1], a[i] + a[i + 1])) return b"},{"question":"Write a function that takes a string representing a mathematical expression and evaluates the result. The function should handle basic arithmetic operations of addition (+), subtraction (-), multiplication (*), and division (/). The expression may contain nested parentheses, which should be evaluated according to standard operator precedence rules. Assume that the input is always a valid mathematical expression. **Input Format:** A string expression containing digits, operators (+, -, *, /), and parentheses. **Output Format:** A single integer or floating-point number representing the result of evaluating the expression. **Function Signature:** ```python def evaluate_expression(expression: str) -> float: pass ``` **Example:** ```python # Example 1: input_expression = \\"3 + 2 * 2\\" # 2 * 2 = 4 # 3 + 4 = 7 output = evaluate_expression(input_expression) print(output) # Output: 7 # Example 2: input_expression = \\" 3/2 \\" # 3 / 2 = 1.5 output = evaluate_expression(input_expression) print(output) # Output: 1.5 # Example 3: input_expression = \\" (1+(4+5+2)-3)+(6+8) \\" # (4 + 5 + 2) = 11 # 1 + 11 - 3 = 9 # (6 + 8) = 14 # 9 + 14 = 23 output = evaluate_expression(input_expression) print(output) # Output: 23 # Example 4: input_expression = \\"2 * (5 + 5 * 2) / 3 + (6 / 2 + 8)\\" # (5 + 5 * 2) = 15 # 2 * 15 = 30 # 30 / 3 = 10 # (6 / 2 + 8) = 3 + 8 = 11 # 10 + 11 = 21 output = evaluate_expression(input_expression) print(output) # Output: 21 # Example 5: input_expression = \\"1 + 1\\" # 1 + 1 = 2 output = evaluate_expression(input_expression) print(output) # Output: 2 ``` Note: - Handle the operator precedence correctly: parentheses first, then multiplication/division, and finally addition/subtraction. - Handle whitespaces in the input string appropriately. - You may assume the division operator (/) should return a floating-point result.","solution":"def evaluate_expression(expression: str) -> float: def calculate(s): stack = [] num = 0 sign = \'+\' while len(s) > 0: char = s.pop(0) if char.isdigit(): num = num * 10 + int(char) if char == \'(\': num = calculate(s) if (not char.isdigit() and char != \' \') or len(s) == 0: if sign == \'+\': stack.append(num) if sign == \'-\': stack.append(-num) if sign == \'*\': stack[-1] = stack[-1] * num if sign == \'/\': stack[-1] = stack[-1] / num num = 0 sign = char if char == \')\': break return sum(stack) return calculate(list(expression))"},{"question":"Petra is learning to analyze DNA sequences and wants to practice identifying certain patterns within a sequence. She is particularly interested in finding the longest contiguous subsequence of a DNA string that consists only of \'A\'s, \'C\'s, and \'T\'s (but not \'G\'s). Write a function that takes a DNA sequence as input and returns the length of the longest valid subsequence. Input - A single string s (1 ≤ |s| ≤ 10^6), representing a sequence where each character is either \'A\', \'C\', \'T\', or \'G\'. Output - An integer representing the length of the longest subsequence consisting solely of \'A\', \'C\', and \'T\'. Example: ``` Input: ATCGATTAGCTAGGACT Output: 4 ``` Example Explanation: The longest subsequence consisting of \'A\', \'C\', and \'T\' is \\"ACTA\\", which has a length of 4.","solution":"def longest_valid_subsequence(dna_sequence): Returns the length of the longest contiguous subsequence consisting solely of \'A\', \'C\', and \'T\'. max_length = 0 current_length = 0 for nucleotide in dna_sequence: if nucleotide in {\'A\', \'C\', \'T\'}: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"You are given an array of integers. Your task is to rearrange the elements of the array such that all even numbers appear before all odd numbers. Additionally, the even numbers should be sorted in ascending order and the odd numbers should be sorted in ascending order. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of elements in the array. - The second line contains `n` integers, each between -1000 and 1000. Output: - Output the rearranged array, with all even numbers sorted in ascending order followed by all odd numbers sorted in ascending order. Example: Input: 7 3 1 2 5 4 6 8 Output: 2 4 6 8 1 3 5","solution":"def rearrange_array(n, arr): Rearranges the input array such that all even numbers appear before all odd numbers. The even numbers are sorted in ascending order and the odd numbers are sorted in ascending order. :param n: int, number of elements in the array :param arr: list of int, the array to be rearranged :return: list of int, the rearranged array evens = sorted([x for x in arr if x % 2 == 0]) odds = sorted([x for x in arr if x % 2 != 0]) return evens + odds"},{"question":"You are given a list of integers. Your task is to find the contiguous subarray (containing at least one number) which has the largest sum and return this sum. Implement the function using a divide-and-conquer approach. For example, given the array `arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the contiguous subarray with the largest sum is `[4, -1, 2, 1]`, which has a sum of `6`. Your function should have the following signature: ```python def max_subarray_sum(arr: List[int]) -> int: ``` Explanation: - You should use a divide-and-conquer strategy to find the maximum subarray sum. - Ensure your solution efficiently handles large arrays. - Think about the base cases and how to combine the results from subproblems to solve the problem for a larger array.","solution":"from typing import List def max_crossing_sum(arr: List[int], left: int, mid: int, right: int) -> int: # Include elements on the left of mid left_sum = float(\'-inf\') total = 0 for i in range(mid, left - 1, -1): total += arr[i] if total > left_sum: left_sum = total # Include elements on the right of mid right_sum = float(\'-inf\') total = 0 for i in range(mid + 1, right + 1): total += arr[i] if total > right_sum: right_sum = total # Return sum of elements on left and right of mid # mid element is included in both subarrays return left_sum + right_sum def max_subarray_sum_util(arr: List[int], left: int, right: int) -> int: # Base case: Only one element if left == right: return arr[left] # Find middle point mid = (left + right) // 2 # Return the maximum of the following three possible cases: # a) Maximum subarray sum in left half # b) Maximum subarray sum in right half # c) Maximum subarray sum such that the subarray crosses the midpoint return max(max_subarray_sum_util(arr, left, mid), max_subarray_sum_util(arr, mid + 1, right), max_crossing_sum(arr, left, mid, right)) def max_subarray_sum(arr: List[int]) -> int: if not arr: return 0 return max_subarray_sum_util(arr, 0, len(arr) - 1)"},{"question":"You are given a binary tree with n nodes, each node having a unique value between 1 and n. Your task is to swap all the left and right children of every node in the tree and then output the level-order traversal of the modified tree. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of nodes in the tree. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ n) where pi represents the parent of the i-th node (the root node has a parent value of -1). The next n lines contain pairs of integers li and ri (0 ≤ li, ri ≤ n), where li and ri represent the left and right children of the i-th node (if a node does not have a left or right child, the corresponding value will be 0). Output the level-order traversal of the modified tree after swapping the left and right children for every node in the tree. Each number in the output should be separated by a space. Example: Input: 5 -1 1 1 2 2 2 3 4 5 0 0 0 0 0 0 Output: 1 2 3 5 4 Explanation: - The original tree structure is: 1 / 2 3 / 4 5 - After swapping, it becomes: 1 / 3 2 / 5 4 - The level-order traversal of the modified tree is 1, 3, 2, 5, 4.","solution":"from collections import deque, defaultdict class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None def build_tree(n, parent_list, children): nodes = [TreeNode(i) for i in range(1, n+1)] root = None for i in range(n): if parent_list[i] == -1: root = nodes[i] else: parent_index = parent_list[i] - 1 if children[parent_index][0] - 1 == i: nodes[parent_index].left = nodes[i] elif children[parent_index][1] - 1 == i: nodes[parent_index].right = nodes[i] return root def swap_children(root): if root: root.left, root.right = root.right, root.left swap_children(root.left) swap_children(root.right) def level_order_traversal(root): if not root: return [] result = [] queue = deque([root]) while queue: node = queue.popleft() result.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result def swap_and_level_order(n, parent_list, children): root = build_tree(n, parent_list, children) swap_children(root) return level_order_traversal(root)"},{"question":"A conveyor belt system in a warehouse handles different types of packages. Each package has a priority level that determines the order in which packages are processed. The system processes packages in ascending order of priority. If two packages have the same priority, the package added to the system earlier is processed first. You need to implement a function that simulates this conveyor belt system. You should be able to add a package with a specific priority level and retrieve the next package to process. The function should support the following operations: 1. `addPackage(priority: int)`: Add a new package with the given priority level. 2. `getNextPackage() -> int`: Retrieve the priority level of the next package to process. If there are no packages, return -1. Your task is to complete the implementation of the class `ConveyorBeltSystem`. Here is the class template: ```python class ConveyorBeltSystem: def __init__(self): # Initialize the system pass def addPackage(self, priority: int): # Add a new package with the given priority pass def getNextPackage(self) -> int: # Return the priority of the next package to process, or -1 if no packages are left pass ``` **Example:** ```python system = ConveyorBeltSystem() system.addPackage(2) system.addPackage(1) system.addPackage(3) print(system.getNextPackage()) # Output: 1 print(system.getNextPackage()) # Output: 2 system.addPackage(1) print(system.getNextPackage()) # Output: 1 print(system.getNextPackage()) # Output: 3 print(system.getNextPackage()) # Output: -1 ``` # Constraints: - The priority levels are integers in the range of 1 to 1000. - The number of packages is at most 10^5. - The \'getNextPackage\' operation should have a time complexity of O(log N) where N is the number of packages currently in the system.","solution":"import heapq class ConveyorBeltSystem: def __init__(self): self.heap = [] self.counter = 0 def addPackage(self, priority: int): heapq.heappush(self.heap, (priority, self.counter)) self.counter += 1 def getNextPackage(self) -> int: if self.heap: priority, _ = heapq.heappop(self.heap) return priority return -1"},{"question":"You are given a list of integers representing the positions of houses on a straight road. Each house can access facilities such as hospitals and schools at certain positions on the road. Given the positions of all houses, hospitals, and schools, your task is to determine the minimum maximum distance each house has to travel to reach either a hospital or a school. You will be provided with three lists: - A list of integers representing the positions of houses on the road. - A list of integers representing the positions of hospitals on the road. - A list of integers representing the positions of schools on the road. Write a function to achieve this: ```python def min_max_distance(houses, hospitals, schools): # your code here # Example usage: houses = [1, 5, 10] hospitals = [2, 9] schools = [3, 6, 11] print(min_max_distance(houses, hospitals, schools)) # Output: 1 ``` # Input - houses: a list of integers (1 ≤ len(houses) ≤ 1,000) each representing the position of a house. - hospitals: a list of integers (0 ≤ len(hospitals) ≤ 1,000) each representing the position of a hospital. - schools: a list of integers (0 ≤ len(schools) ≤ 1,000) each representing the position of a school. # Output - An integer, the minimum maximum distance each house has to travel to reach either a hospital or a school.","solution":"def min_max_distance(houses, hospitals, schools): def closest_distance(house, facilities): Returns the closest distance from a house to any facility. if not facilities: return float(\'inf\') return min(abs(house - facility) for facility in facilities) max_distances = [] for house in houses: dist_hospital = closest_distance(house, hospitals) dist_school = closest_distance(house, schools) max_distances.append(min(dist_hospital, dist_school)) return max(max_distances)"},{"question":"A city is planning to install new traffic lights at its intersections. Each intersection can have either a red light or a green light. The city\'s traffic optimizer wants to ensure that no two adjacent intersections (i.e., directly connected by a road) have the same colored traffic light to avoid confusion. You are given an array `adj` where `adj[i]` is a list of intersections directly connected to intersection `i`. This means if `j` is in `adj[i]`, then there is a road connecting intersection `i` and intersection `j`. Your task is to determine if it\'s possible to color the traffic lights such that no two adjacent intersections have the same color. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of intersections. - Each of the next `n` lines contains a space-separated list of integers, describing the intersections each intersection is connected to. The list will be such that for each connection (i, j) given in `adj`, if `i` lists `j` as a connection, `j` will also list `i`. Output: - Print \\"YES\\" (without quotes) if it is possible to color the traffic lights such that no two adjacent intersections have the same color. Otherwise, print \\"NO\\". Example: ``` Input: 4 1 2 0 3 0 3 1 2 Output: YES ``` In the example above, Intersection 0 (red) can be connected to Intersection 1 (green) and Intersection 2 (green). Intersection 3 (red) can be connected to Intersection 1 (green) and Intersection 2 (green). Thus, it is possible to color the traffic lights as required.","solution":"def can_color_traffic_lights(n, adj): Determines if it\'s possible to color traffic lights such that no two adjacent intersections have the same color. Args: n (int): Number of intersections. adj (List[List[int]]): Adjacency list where adj[i] contains the indices of intersections directly connected to intersection i. Returns: str: \\"YES\\" if it is possible to color the traffic lights as required, otherwise \\"NO\\". # Colors: -1 = uncolored, 0 = red, 1 = green color = [-1] * n def dfs(node, c): color[node] = c for neighbor in adj[node]: if color[neighbor] == -1: if not dfs(neighbor, 1 - c): return False elif color[neighbor] == color[node]: return False return True for i in range(n): if color[i] == -1 and not dfs(i, 0): return \\"NO\\" return \\"YES\\""},{"question":"A company is developing a custom spell checker for their word processing software. They need a function that takes a dictionary of correct words and a list of typed words, and returns a list indicating if each typed word is correctly spelled or, if not, suggesting the closest word from the dictionary. If there are ties in closeness, the lexicographically smallest word should be suggested. Closeness between words is determined by the following rules, in order of priority: 1. The number of edits (insertion, deletion, substitution) required to change one word into another (edit distance). 2. If multiple words have the same edit distance, the lexicographically smallest word is chosen. Write a function: ```python def spell_check(dictionary: List[str], typed_words: List[str]) -> List[str]: ``` # Input: - `dictionary`: A list of strings representing the valid words in the vocabulary. All words are in lowercase and each word length does not exceed 50. - `typed_words`: A list of strings representing the words that need to be checked. All words are in lowercase and each word length does not exceed 50. # Output: - A list of strings where each element is either the typed word itself if it is correct, or the closest correct word from the dictionary. # Constraints: - The dictionary contains at most 1000 words. - The list of typed words contains at most 100 words. # Example: ```python dictionary = [\\"apple\\", \\"banana\\", \\"orange\\", \\"grape\\"] typed_words = [\\"appel\\", \\"oranage\\", \\"banana\\", \\"grpe\\"] print(spell_check(dictionary, typed_words)) # Output: [\\"apple\\", \\"orange\\", \\"banana\\", \\"grape\\"] ``` # Explanation: - \\"appel\\" is closest to \\"apple\\" with an edit distance of 1 (inserting \'p\' between \'p\' and \'e\'). - \\"oranage\\" is closest to \\"orange\\" with an edit distance of 2 (substituting \'a\' with \'g\' and reordering). - \\"banana\\" is already correct. - \\"grpe\\" is closest to \\"grape\\" with an edit distance of 1 (inserting \'a\' between \'r\' and \'p\'). Implement the given function to perform as described.","solution":"from typing import List def edit_distance(word1: str, word2: str) -> int: Calculate the edit distance between two words using dynamic programming. len1, len2 = len(word1), len(word2) dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] for i in range(len1 + 1): for j in range(len2 + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif word1[i-1] == word2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) return dp[len1][len2] def spell_check(dictionary: List[str], typed_words: List[str]) -> List[str]: result = [] for typed_word in typed_words: if typed_word in dictionary: result.append(typed_word) continue closest_word = None min_distance = float(\'inf\') for correct_word in dictionary: distance = edit_distance(typed_word, correct_word) if (distance < min_distance) or (distance == min_distance and correct_word < closest_word): min_distance = distance closest_word = correct_word result.append(closest_word) return result # Example usage dictionary = [\\"apple\\", \\"banana\\", \\"orange\\", \\"grape\\"] typed_words = [\\"appel\\", \\"oranage\\", \\"banana\\", \\"grpe\\"] print(spell_check(dictionary, typed_words)) # Output: [\\"apple\\", \\"orange\\", \\"banana\\", \\"grape\\"]"},{"question":"You are given an array of integers representing the amount of food in each stack. Each day, you can either eat from the top of one stack or combine the tops of two stacks to form a new stack. Combining two stacks means removing the top element from each stack and placing their sum on top of any of the two stacks. The goal is to determine the maximum amount of food you can eat when there\'s no more move available to combine stacks. # Input - The first line contains an integer ( n ) (1 ≤ ( n ) ≤ ( 10^5 )), the number of stacks. - The second line contains ( n ) integers, the amount of food in each stack. Each integer ( a_i ) (1 ≤ ( a_i ) ≤ ( 10^9 )) is the amount of food in the i-th stack. # Output - Output a single integer, the maximum amount of food you can eat when no more moves are available to combine stacks. # Example Input ``` 3 1 2 3 ``` Output ``` 6 ``` Input ``` 4 5 7 2 9 ``` Output ``` 16 ``` # Note - In the first example, you can combine 1 and 2 to form a stack with 3, then the stacks are [3, 3], and thus the maximum food you can eat is 6. - In the second example, you can combine 2 and 9 to form a stack with 11, then the stacks are [5, 7, 11], and thus the maximum food you can eat is 16.","solution":"def max_food_eaten(n, stacks): Determine the maximum amount of food that can be eaten when no more moves are possible to combine stacks. Parameters: n (int): Number of stacks. stacks (List[int]): List of integers representing the amount of food in each stack. Returns: int: Maximum amount of food that can be eaten. return sum(stacks)"},{"question":"A \\"file extension grouping\\" problem requires you to create an efficient data organization system to group together files with the same extension for easy access and management. You are given `n` files each with their respective file name and extension. Your task is to group the files by their extensions. Input: The first line contains an integer `n` (1 ≤ n ≤ 1000), representing the number of files. The next `n` lines each contain a string representing the file name with its extension (the extension is always after the last period `.` in the file name). Each file name consists of alphanumeric characters and periods and its length will be between 1 and 100 characters. Output: Print each group of file extensions in lexicographical order of the extensions. For each extension, print the extension followed by a colon `:` and then the list of file names (original names with extensions) that have that extension, each separated by a comma in the order they appeared in the input. Example: Input: ``` 5 document.txt photo.jpg notes.txt archive.zip music.mp3 ``` Output: ``` jpg: photo.jpg mp3: music.mp3 txt: document.txt, notes.txt zip: archive.zip ``` Your solution should efficiently handle the grouping and sorting of extensions and their associated file names.","solution":"def group_files_by_extension(n, files): from collections import defaultdict grouped_files = defaultdict(list) for file in files: parts = file.rsplit(\'.\', 1) if len(parts) == 2: name, extension = parts grouped_files[extension].append(file) result = [] for extension in sorted(grouped_files): result.append(f\\"{extension}: {\', \'.join(grouped_files[extension])}\\") return result"},{"question":"Marcus is working on a computer graphics project where he needs to draw various geometric shapes on a plane. One of the shapes he frequently uses is a polygon. For a regular polygon with n sides, each of equal length, he needs to determine the smallest enclosing circle\'s radius. The circle must be such that all the vertices of the polygon lie on the circumference of the circle. Given an integer n (3 le n le 10^6) representing the number of sides in the polygon and an integer a (1 le a le 100) representing the length of each side, help Marcus determine the radius of the smallest circle that can enclose the regular polygon. The polygon is centered at the origin, and you can assume the sides are of unit length. The precision of the output should be set to six decimal places. # Input The input consists of two integers: - The first integer n — the number of sides of the polygon. - The second integer a — the length of each side of the polygon. # Output Output the radius of the smallest enclosing circle with precision up to six decimal places. # Example **Input:** ``` 5 2 ``` **Output:** ``` 1.701301 ``` **Explanation:** Given a polygon with 5 sides, each side of length 2, the radius of the smallest enclosing circle can be calculated using the formula: [ R = frac{a}{2 sin(pi / n)} ] In this case, [ R = frac{2}{2 sin(pi / 5)} approx 1.701301 ]","solution":"import math def smallest_enclosing_circle_radius(n, a): Given the number of sides n and the side length a of a regular polygon, return the radius of the smallest enclosing circle with precision up to six decimal places. radius = a / (2 * math.sin(math.pi / n)) return round(radius, 6)"},{"question":"Given two non-negative integers `A` and `B`, you are to construct a list of integers such that: 1. The list contains exactly `A` distinct integers. 2. Each integer in the list must be between 1 and `B` (inclusive). 3. The sum of all integers in the list is minimized. If it is not possible to construct such a list, return -1. # Input: - The input consists of two space-separated integers: `A` and `B`. # Output: - If a list satisfying the conditions is possible, print the list of integers in non-decreasing order. - If it is not possible, print `-1`. # Constraints: - 1 ≤ `A` ≤ 10^5 - 1 ≤ `B` ≤ 10^9 # Example: **Input:** ``` 5 10 ``` **Output:** ``` 1 2 3 4 5 ``` **Input:** ``` 5 3 ``` **Output:** ``` -1 ``` **Explanation:** In the first example, we need 5 distinct integers and they must be between 1 and 10. The sequence 1, 2, 3, 4, 5 meets these criteria and has the smallest possible sum. In the second example, we need 5 distinct integers but the maximum value allowed is 3, which makes it impossible to form such a list. Therefore, the output is -1.","solution":"def find_minimal_sum_list(A, B): Construct a list of `A` distinct integers between 1 and `B` inclusive with the minimal sum. If it\'s not possible, return -1. if A > B: return -1 return list(range(1, A + 1))"},{"question":"Lara is a biologist who is studying an unusual species of bacteria that grows in 1-dimensional chains. Each bacterium in the chain has a unique strength value, which can be positive or negative, representing its effect on the overall chain. Lara wants to perform an experiment where she can choose any contiguous segment of the chain and measure its total strength by summing the individual strengths of the bacteria in that segment. However, she is specifically interested in determining the minimum sum of any such contiguous segment within the chain. As a programmer, Lara has asked for your help to write a program that can efficiently calculate the minimum sum of any contiguous segment from a list of strength values representing the chain of bacteria. Given a list of n integers representing the strengths of the bacteria in the chain, your task is to compute the minimum possible sum of any contiguous segment of the chain. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of bacteria in the chain. The second line contains n integers a1, a2, ..., an (−10^8 ≤ ai ≤ 10^8) — the strengths of the bacteria in the chain. Output a single integer denoting the minimum sum of any contiguous segment of the chain. # Example Input ``` 5 2 -3 5 -1 6 ``` Output ``` -3 ``` In the example, the contiguous segment `[ -3 ]` has the minimum sum of −3.","solution":"def min_contiguous_sum(arr): Function to find the minimum sum of any contiguous sub-array. min_sum = float(\'inf\') current_sum = 0 for num in arr: current_sum += num if current_sum < min_sum: min_sum = current_sum if current_sum > 0: current_sum = 0 return min_sum"},{"question":"You are given a number `n` and you need to construct a sequence of numbers such that the difference between the sum of the numbers at odd indices and the sum of the numbers at even indices is maximized. The sequence should consist of numbers from 1 to `n` and should be a permutation of [1, 2, ..., n]. Formally, given an integer `n`, find a permutation `a` of the set {1, 2, ..., n} such that the difference `abs(sum(a[i] for i in range(1, n+1, 2)) - sum(a[i] for i in range(2, n+1, 2)))` is maximized. Write a function `max_difference_sequence(n)` that takes an integer `n` as input and returns a list of integers representing the sequence that maximizes the described difference. # Input - The input consists of a single integer `n` (1 ≤ n ≤ 10^5). # Output - The function should return a list of integers representing the sequence. # Example ```python # Example 1 input: 5 output: [1, 3, 5, 2, 4] # Example 2 input: 4 output: [1, 3, 4, 2] ``` # Note In the first example, the sum of numbers at odd indices is `1 + 5 + 4 = 10` and the sum of numbers at even indices is `3 + 2 = 5`. The absolute difference is `abs(10 - 5) = 5`, which is maximized using this permutation.","solution":"def max_difference_sequence(n): Returns a permutation of numbers from 1 to n that maximizes the difference between the sum of numbers at odd indices and even indices. result = [] for i in range(1, n + 1, 2): result.append(i) for i in range(2, n + 1, 2): result.append(i) return result"},{"question":"You are given a list of distinct integers representing the house numbers on a certain street. Each house is either painted red or blue. Two houses can be considered \\"neighbors\\" if there are no more than one house between them. Your task is to determine the smallest number of adjacent red-blue or blue-red houses. Note that two houses are adjacent if they have consecutive house numbers and different colors. The first line contains a single integer n (1 le n le 10^5) — the number of houses on the street. Each of the next n lines contains two items: an integer h_i (1 le h_i le 10^9), representing the house number, and a character c_i (\'R\' for red or \'B\' for blue), representing the color of the house. Output a single integer — the minimal number of adjacent red-blue or blue-red houses. If there are no such pairs, output -1. # Examples Input: ``` 4 1 R 2 B 4 R 6 B ``` Output: ``` 1 ``` Input: ``` 3 5 R 8 R 10 B ``` Output: ``` -1 ``` Input: ``` 2 7 B 8 R ``` Output: ``` 1 ``` # Explanation In the first example, you can observe that houses with numbers [1, 2] and [4, 6] form one pair of adjacent red-blue and blue-red houses, with pairs one. In the second example, there are no adjacent red-blue or blue-red houses, thus the output is -1. In the third example, houses with numbers [7, 8] form one pair of adjacent red-blue or blue-red houses, thus the output is 1.","solution":"def minimal_adjacent_rb_pairs(n, houses): # Sort the houses by their house number houses.sort() min_adjacent_distance = float(\'inf\') found_pair = False # We will iterate over the sorted houses and check adjacent pairs for i in range(n - 1): h1, c1 = houses[i] h2, c2 = houses[i + 1] # Check if they have consecutive numbers and different colors if abs(h1 - h2) == 1 and c1 != c2: found_pair = True min_adjacent_distance = min(min_adjacent_distance, abs(h1 - h2)) return min_adjacent_distance if found_pair else -1"},{"question":"There is a grid of size n times n where each cell contains an integer value. You are initially positioned at the cell (1, 1), and you need to reach the cell (n, n). You can move to the cell to your right or the cell below you at each step. Your goal is to minimize the sum of the values of the cells you pass through, including the starting and ending cells. Determine the minimum sum of values from (1, 1) to (n, n). The first line of input contains an integer n (2 le n le 10^3) — the size of the grid. The next n lines contain n integers each, where the j-th integer in the i-th line represents the value of the cell at position (i, j). It is guaranteed that all values will be non-negative. Output the minimum possible sum. # Example Input ``` 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 7 ``` Explanation The path with the minimum sum in the example is (1,1) -> (2,1) -> (3,2) -> (3,3), with a sum of 1+1+2+1=5.","solution":"def min_path_sum(grid): Determines the minimum sum of values from the top-left to the bottom-right in a given grid. Parameters: grid (List[List[int]]): A 2D list containing non-negative integers representing the grid cells. Returns: int: The minimum possible sum of values along the path from (1,1) to (n,n). n = len(grid) dp = [[float(\'inf\')] * n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(n): for j in range(n): if i > 0: dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[n-1][n-1]"},{"question":"In an effort to maintain a consistent and rigorous standard, the following question aligns with the style, complexity, and scope of the sample provided: A famous bookstore chain is implementing a new system to manage book sales across multiple branches. Each branch sells multiple book categories. A centralized system is required to process the daily sales data from all branches and provide insights. Each branch can be represented by a rectangle grid where rows represent different sections, and columns represent different book categories. The bookstore chain consists of `n` branches, each having `m` sections and `k` book categories. The system will receive `q` queries. Each query requests the total number of books sold for a specific book category across several sections within a branch. The first line contains five integers `n, m, k, p, q` (`1 <= n, m, k, p <= 10^6`, `1 <= q <= 10^5`) — the number of branches, sections per branch, book categories per branch, number of records in the sales log, and number of queries, respectively. The next `p` lines contain four integers `b, s, c, x` (`1 <= b <= n`, `1 <= s <= m`, `1 <= c <= k`, `0 <= x <= 10^4`) — indicating that in branch `b`, section `s`, and book category `c`, `x` number of books were sold in a given day. It is guaranteed that each branch-section-category combination will appear at most once. The next `q` lines describe the queries. Each query contains four integers `b, s1, s2, c` (`1 <= b <= n`, `1 <= s1, s2 <= m`, `1 <= c <= k`) — requesting the total number of books sold in branch `b` for book category `c` within sections from `s1` to `s2` inclusive. Print `q` integers, one per line — the answer to each query. For example: ``` Input: 2 3 3 5 3 1 1 1 4 1 2 1 5 1 3 1 6 2 1 2 7 2 2 3 8 1 1 2 1 1 2 3 1 2 1 2 2 Output: 9 11 7 ```","solution":"def process_sales_data(n, m, k, p, q, sales_log, queries): Process the sales data and return the answers to the queries. Args: n (int): the number of branches. m (int): the number of sections per branch. k (int): the number of book categories per branch. p (int): the number of records in the sales log. q (int): the number of queries. sales_log (list of tuples): Each tuple contains (b, s, c, x) - b (int): branch number s (int): section number c (int): category number x (int): number of books sold queries (list of tuples): Each tuple contains (b, s1, s2, c) - b (int): branch number s1 (int): start section number s2 (int): end section number c (int): category number Returns: list of int: answers to the queries. from collections import defaultdict # sales_data[branch][section][category] = number of books sold sales_data = defaultdict(lambda: defaultdict(lambda: defaultdict(int))) # Fill the sales data from sales log for b, s, c, x in sales_log: sales_data[b][s][c] = x results = [] # Process each query for b, s1, s2, c in queries: total_books_sold = 0 for section in range(s1, s2 + 1): total_books_sold += sales_data[b][section].get(c, 0) results.append(total_books_sold) return results"},{"question":"In a distant land, there is a large warehouse with rows of containers. Each container has a certain weight, and the containers can only be moved in a specific way. The workers can pick a container and move it to a new position in the sequence, but they can only move lighter containers towards heavier ones. Given a sequence of integers representing the weights of the containers inside the warehouse, determine the minimum number of moves needed to sort the sequence in non-decreasing order using the allowed move. The first line contains an integer n (1 ≤ n ≤ 105) denoting the number of containers. The second line contains n integers w1, w2, w3, ..., wn (1 ≤ wi ≤ 105), representing the weights of the containers. Print a single integer — the minimum number of moves required to sort the sequence in non-decreasing order. For example, if there are four containers with weights represented by [4, 3, 2, 1], you can move container 1 (weight = 4) to the end of the sequence, then move container 2 (weight = 3) to the end of the sequence, so the printed result should be 2. Another example: if there are five containers with weights represented by [1, 3, 2, 5, 4], you can achieve the sequence [1, 2, 3, 4, 5] in a minimum of 2 moves.","solution":"def minimum_moves_to_sort(weights): Determine the minimum number of moves needed to sort the sequence in non-decreasing order using the allowed move. Parameters: weights (list): A list of integers representing the weights of the containers. Returns: int: The minimum number of moves required to sort the sequence. n = len(weights) # Create a list of tuples containing weights and their original positions original_positions = list(enumerate(weights)) # Sort the list of tuples by weight sorted_positions = sorted(original_positions, key=lambda x: x[1]) # Create a list to keep track of the visited positions visited = [False] * n moves = 0 for i in range(n): # If already visited or already in correct position, skip if visited[i] or sorted_positions[i][0] == i: continue # Find the cycle and count its length cycle_length = 0 x = i while not visited[x]: visited[x] = True x = sorted_positions[x][0] cycle_length += 1 if cycle_length > 0: moves += (cycle_length - 1) return moves"},{"question":"Given a string s of length n consisting of lowercase English letters, your task is to find the minimum number of characters you need to remove to make the string a palindrome. It is not required to use the same characters when reading the string forwards and backwards, but the resultant string must read the same forwards and backwards. A palindrome is a string that reads the same backwards as forwards. You will be given multiple independent queries to answer. The first line contains a single integer t (1 le t le 200) — the number of queries. Then t queries follow. The first line of each query contains a single integer n (1 le n le 5000) — the length of the string s. The second line of each query contains a single string s of length n consisting of lowercase English letters. For each query, output a single integer — the minimum number of characters to remove to make the string a palindrome. # Example Input ``` 3 3 abc 6 abbacc 3 aaa ``` Output ``` 2 2 0 ``` # Explanation In the first query, if you remove \'a\' and \'c\', the string becomes \\"b\\", which is a palindrome. Removing any sequence of two characters from \\"abc\\" to make it a palindrome is the minimum number of removals required. In the second query, removing \'a\' and \'b\' from positions 4 and 3 respectively, or alternatively \'c\' and \'b\' from positions 2 and 5 respectively, makes \\"abbacc\\" a palindrome \\"abba\\". In the third query, the string \\"aaa\\" is already a palindrome, so no characters need to be removed.","solution":"def min_removals_to_palindrome(s): n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1] def handle_queries(queries): results = [] for n, s in queries: results.append(min_removals_to_palindrome(s)) return results"},{"question":"Alice loves exploring strings. She enjoys analyzing patterns in substrings. A substring is defined as a contiguous sequence of characters within a string. Bob, her friend, challenges her with a task to find out the number of distinct substrings of a given string that are palindromes. Note that a palindrome is a string that reads the same backward as forward. Can you help Alice solve this challenge? Input: A single string S consisting of lowercase English letters (\'a\'-\'z\') without spaces. The length of the string will be between 1 and 1000 inclusive. Output: Print the number of distinct palindromic substrings in S. **Example:** ``` Input: abab Output: 4 Explanation: The distinct palindromic substrings are \\"a\\", \\"b\\", \\"aba\\", and \\"bab\\". ```","solution":"def count_distinct_palindromic_substrings(s): def is_palindrome(sub): return sub == sub[::-1] palindromic_substrings = set() n = len(s) for i in range(n): for j in range(i, n): substring = s[i:j+1] if is_palindrome(substring): palindromic_substrings.add(substring) return len(palindromic_substrings)"},{"question":"A company holds a competition where participants must form teams. Each team should have exactly `k` participants, and each participant should be unique (i.e., no participant is allowed to be in more than one team). The company wants to make the distribution of teams as fair as possible. They define fairness in terms of \\"unassigned participants\\": those who cannot be placed in any team. The goal is to distribute participants into as many full teams as possible while minimizing the number of unassigned participants. Given the number of participants `n` and the size of each team `k`, write a function to determine the minimum number of unassigned participants after forming the maximum number of complete teams. Function Signature: ```python def min_unassigned_participants(n: int, k: int) -> int: pass ``` **Input:** - `n` (1 ≤ n ≤ 10^18): the number of participants. - `k` (1 ≤ k ≤ 10^18): the number of participants per team. **Output:** - An integer representing the minimum number of unassigned participants after forming the maximum number of complete teams. **Example:** ```python assert min_unassigned_participants(10, 3) == 1 assert min_unassigned_participants(15, 4) == 3 assert min_unassigned_participants(4, 4) == 0 assert min_unassigned_participants(7, 2) == 1 ``` **Explanation:** 1. For `n = 10` and `k = 3`, you can form 3 teams (`3*3 = 9` participants), leaving 1 unassigned participant. Thus, the output is 1. 2. For `n = 15` and `k = 4`, you can form 3 teams (`3*4 = 12` participants), leaving 3 unassigned participants. Thus, the output is 3. 3. For `n = 4` and `k = 4`, you can form 1 team (`1*4 = 4` participants), leaving 0 unassigned participants. Thus, the output is 0. 4. For `n = 7` and `k = 2`, you can form 3 teams (`3*2 = 6` participants), leaving 1 unassigned participant. Thus, the output is 1. **Hint:** The solution requires dividing `n` by `k` to determine the maximum number of teams that can be formed and calculating the remainder participants.","solution":"def min_unassigned_participants(n: int, k: int) -> int: Returns the minimum number of unassigned participants after forming the maximum number of complete teams of size k from n participants. return n % k"},{"question":"You are given a string consisting of lowercase English letters. Your task is to find and print the most frequently occurring character in the string. If there are multiple characters that appear the same maximum number of times, print the one that comes first lexicographically. For example, given the input string \\"aabbbcccd\\", the character \'b\' appears the most frequently (3 times), so the output should be \'b\'. If the input string is \\"abcabc\\", all characters occur the same number of times (2 times each), so the output should be \'a\', which is the first lexicographically. Input: - A string s (1 ≤ |s| ≤ 10^6), consisting only of lowercase English letters. Output: - The most frequently occurring character. If there are ties, print the lexicographically smallest one.","solution":"def most_frequent_character(s: str) -> str: Given a string consisting of lowercase English letters, returns the most frequently occurring character in the string. If there are multiple characters with the same maximum frequency, returns the lexicographically smallest one. from collections import Counter # Get the frequency of each character frequency = Counter(s) # Determine the maximum frequency max_frequency = max(frequency.values()) # Find all characters with the maximum frequency most_frequent_chars = [char for char in frequency if frequency[char] == max_frequency] # Return the lexicographically smallest character among them return min(most_frequent_chars)"},{"question":"Given a string of lowercase English letters, you can perform the following operations any number of times: 1. Choose any character in the string and replace it with any other character. Determine the minimum number of operations required to make the string a palindrome. Function Signature: ```python def min_operations_to_palindrome(s: str) -> int: pass # Example # min_operations_to_palindrome(\\"abca\\") should return 1 as we can replace \'c\' with \'b\' to make it \'abba\'. ```","solution":"def min_operations_to_palindrome(s: str) -> int: Determine the minimum number of operations required to make the string a palindrome. :param s: Input string of lowercase English letters :return: Minimum number of operations required n = len(s) operations = 0 # Compare characters from front and back and count the number of differences for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"A company wants to organize a team-building activity where employees are paired up to form teams. Each team will consist of exactly 2 employees. To balance the teams, the difference between the skill levels of the two employees in any team should be no more than a given threshold value d. Given an array of integers representing the skill levels of the employees and an integer d representing the maximum allowed skill difference for pairing, determine the maximum number of teams that can be formed under this condition. Each employee can be part of exactly one team. The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of employees. The second line contains n integers, the skill levels of the employees (1 ≤ skill level ≤ 10^9). The third line contains a single integer d (0 ≤ d ≤ 10^9). Output a single integer, the maximum number of teams that can be formed. **Example:** Input: ``` 6 1 3 4 9 10 12 2 ``` Output: ``` 2 ```","solution":"def max_teams(skill_levels, n, d): Returns the maximum number of teams that can be formed given the skill levels and threshold difference. :param skill_levels: List of integers representing skill levels of employees :param n: Integer representing the number of employees :param d: Integer representing the maximum allowed skill difference for pairing :return: Integer, maximum number of teams that can be formed # Sort the skill levels to try pairing nearest values skill_levels.sort() teams = 0 i = 0 # Loop through the list and try to form teams greedily while i < n - 1: if skill_levels[i+1] - skill_levels[i] <= d: teams += 1 i += 2 # If a pair is formed, skip the next element else: i += 1 # Otherwise, move to the next element return teams"},{"question":"You are given an array **A** of **N** integers. Your task is to find the smallest possible positive integer **K** such that there exists a subarray of **A** with length **K** that contains at least **M** distinct integers. A subarray is defined as a contiguous segment of the array. # Input Format - The first line of the input contains two integers **N** and **M** (1 le N, M leq 10^5) — the length of the array and the minimum number of distinct integers respectively. - The second line contains **N** integers **A_1, A_2, ldots, A_N** (1 le A_i leq 10^9) — the elements of the array. # Output Format Print a single integer, the smallest possible positive integer **K**. If no such subarray exists, print `-1`. # Sample Input 1 ``` 8 3 1 2 1 3 1 2 1 4 ``` # Sample Output 1 ``` 3 ``` # Explanation 1 The subarray `[2, 1, 3]` is the smallest subarray containing at least 3 distinct elements. # Sample Input 2 ``` 10 4 4 4 4 4 4 4 4 4 4 4 ``` # Sample Output 2 ``` -1 ``` # Explanation 2 There is no subarray containing at least 4 distinct elements. # Constraints - Try to come up with an algorithm that can handle the upper limits efficiently. - Use appropriate data structures to maintain the number of distinct elements in the current subarray being considered. # Notes - Aim for an **O(N)** or **O(N log N)** solution, given the constraints.","solution":"def smallest_subarray_with_m_distinct(N, M, A): from collections import defaultdict def count_distinct(arr): return len(set(arr)) if count_distinct(A) < M: return -1 left = 0 right = 0 distinct_count = 0 min_length = N + 1 frequency_map = defaultdict(int) while right < N: if frequency_map[A[right]] == 0: distinct_count += 1 frequency_map[A[right]] += 1 right += 1 while distinct_count >= M: min_length = min(min_length, right - left) frequency_map[A[left]] -= 1 if frequency_map[A[left]] == 0: distinct_count -= 1 left += 1 return min_length if min_length <= N else -1"},{"question":"You are working on a project that involves constructing binary trees. A binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. Given a preorder traversal and an inorder traversal of a binary tree, your task is to reconstruct the binary tree. A preorder traversal of a binary tree visits nodes in this order: root, left subtree, right subtree. An inorder traversal visits nodes in this order: left subtree, root, right subtree. The binary tree does not contain duplicate elements. The input consists of two lines: - The first line contains the preorder traversal of the binary tree. - The second line contains the inorder traversal of the binary tree. Output the reconstructed tree in any valid format that shows the hierarchical structure of the nodes, preserving the left and right child relationships. # Example Input ``` [3, 9, 20, 15, 7] [9, 3, 15, 20, 7] ``` Output ``` 3 / 9 20 / 15 7 ``` Note: The output should represent the structure of the tree. # Constraints - `1 <= number of nodes <= 1000` - The elements of the given traversals are unique. The goal is to write a function `reconstruct_tree(preorder, inorder)` that takes two lists `preorder` and `inorder` and returns the root of the reconstructed binary tree.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def reconstruct_tree(preorder, inorder): Reconstruct the binary tree from preorder and inorder traversals. :param preorder: List[int], preorder traversal of the tree :param inorder: List[int], inorder traversal of the tree :return: TreeNode, root of the reconstructed binary tree if not preorder or not inorder: return None # The root of the tree is the first element in the preorder traversal. root_val = preorder[0] root = TreeNode(root_val) # The root splits inorder list into left and right subtrees. mid = inorder.index(root_val) # Recursively construct the left subtree and right subtree. root.left = reconstruct_tree(preorder[1:mid+1], inorder[:mid]) root.right = reconstruct_tree(preorder[mid+1:], inorder[mid+1:]) return root"},{"question":"Vera has recently taken an interest in palindromes. A palindrome is a word or phrase that reads the same forward as backward, ignoring spaces, punctuation, and capitalization. She wants to write a program to help her identify palindromes. The input will be a single line containing a phrase represented by a non-empty string of up to 200 characters. The string may contain letters, digits, spaces, and punctuation marks. Your task is to write a program that prints \\"PALINDROME\\" if the input phrase is a palindrome, and \\"NOT PALINDROME\\" otherwise. For example: - Input: \\"A man, a plan, a canal, Panama\\" Output: \\"PALINDROME\\" - Input: \\"Hello, World!\\" Output: \\"NOT PALINDROME\\" Note: Consider all letters in the string without regard to case, and ignore all non-alphanumeric characters.","solution":"def is_palindrome(s): Returns \\"PALINDROME\\" if the input string s is a palindrome, \\"NOT PALINDROME\\" otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string reads the same forward and backward if cleaned == cleaned[::-1]: return \\"PALINDROME\\" else: return \\"NOT PALINDROME\\" # Example usage: input_str = \\"A man, a plan, a canal, Panama\\" print(is_palindrome(input_str)) # Output: PALINDROME"},{"question":"Monty wants to measure the effectiveness of his marketing campaign by analyzing customer response times. He has collected data where each entry represents the time (in minutes) a customer took to respond to his campaign. Monty wants to determine the maximum difference in response times for any two customers. Write a function that receives an array of integers representing response times and returns the maximum difference between any two times. The function should be efficient to handle large arrays (up to 10^6 elements) with response times ranging from 1 to 10^9. The input is an array of integers where each integer t (1 le t le 10^9) represents a response time. Print the maximum difference in response times. In the first example, given response times [5, 8, 12], the maximum difference is achieved between response times 5 and 12 (difference is 7). In the second example, given response times [20, 30, 10, 50], the maximum difference is achieved between response times 10 and 50 (difference is 40). In the third example, given response times [1, 1, 1, 1], the maximum difference is 0 since all response times are the same.","solution":"def max_response_time_difference(response_times): Returns the maximum difference between any two response times. if not response_times or len(response_times) < 2: return 0 # No difference can be calculated from less than 2 elements min_time = min(response_times) max_time = max(response_times) return max_time - min_time"},{"question":"John is working on a transportation network simulation. The network is represented as a grid of size m x n where each cell can either be passable or an obstacle. John\'s task is to find the shortest path from the top-left corner of the grid (0, 0) to the bottom-right corner (m-1, n-1), moving only up, down, left, or right. An obstacle cell cannot be passed through. If it is possible to reach the destination, output the minimum number of steps required. If not, output -1. The input consists of: - The first line contains two integers m and n (1 ≤ m, n ≤ 100) representing the number of rows and columns in the grid. - Each of the next m lines contains n characters, where each character is either \'.\' (a passable cell) or \'#\' (an obstacle). Print the minimum number of steps required to reach the bottom-right corner from the top-left corner, or -1 if it is not possible. Consider the following example: ``` Input: 4 4 . . . # . # . . . . # . # . . . Output: 6 ``` In this example, the optimal path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,1) -> (3,1) -> (3,3) with a total of 6 steps.","solution":"from collections import deque def shortest_path(grid): Returns the shortest path from the top-left corner to the bottom-right corner in a grid where \'.\' represents a passable cell and \'#\' represents an obstacle. m = len(grid) n = len(grid[0]) if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == m-1 and y == n-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, steps+1)) return -1"},{"question":"There is a sorted array of n integers. You need to find the index of the first occurrence and the index of the last occurrence of a given target value within the array. The array is zero-indexed. Implement a function: ```python def find_first_and_last(arr: List[int], target: int) -> Tuple[int, int]: ... ``` **Input:** - An integer n (1 le n le 10^5), which is the number of elements in the array. - A sorted list of n integers arr (-10^5 le arr_i le 10^5). - An integer target (-10^5 le target le 10^5). **Output:** The function should return a tuple with two integers: - The index of the first occurrence of the target value. - The index of the last occurrence of the target value. If the target value is not found in the array, return (-1, -1). **Example:** ```python assert find_first_and_last([1, 2, 2, 4, 5, 5, 5, 6], 5) == (4, 6) assert find_first_and_last([1, 2, 2, 4, 5, 5, 5, 6], 3) == (-1, -1) assert find_first_and_last([1, 1, 1, 1, 1], 1) == (0, 4) assert find_first_and_last([], 5) == (-1, -1) ``` A more efficient solution than a linear search is expected, considering the constraints.","solution":"from typing import List, Tuple def find_first_and_last(arr: List[int], target: int) -> Tuple[int, int]: Find the index of the first and last occurrence of target in the array. If target is not found, return (-1, -1). def binary_search_left(arr, target): left, right = 0, len(arr) while left < right: mid = (left + right) // 2 if arr[mid] < target: left = mid + 1 else: right = mid return left def binary_search_right(arr, target): left, right = 0, len(arr) while left < right: mid = (left + right) // 2 if arr[mid] <= target: left = mid + 1 else: right = mid return left left_index = binary_search_left(arr, target) if left_index == len(arr) or arr[left_index] != target: return -1, -1 right_index = binary_search_right(arr, target) - 1 return left_index, right_index"},{"question":"Samantha is organizing a conference and wants to optimize the schedule of talks to ensure the best possible audience experience. The conference has a series of n talks, each starting and ending at specific times. Each talk i has a start time si and an end time ei (where 0 ≤ si < ei ≤ 10^9). Attendees cannot move between talks that overlap in time. Given the list of talks with their start and end times, Samantha wants to maximize the number of non-overlapping talks that can be attended by a single attendee. Write a function `maxTalks(n, talks)` that returns the maximum number of non-overlapping talks. The function receives an integer n, representing the number of talks, and a list of tuples `talks`, where each tuple contains two integers (start time and end time). Function signature: `def maxTalks(n: int, talks: List[Tuple[int, int]]) -> int` # Input - An integer `n` (1 ≤ n ≤ 100). - A list of n tuples, where each tuple contains two integers si and ei (0 ≤ si < ei ≤ 10^9), representing the start and end times of the i-th talk. # Output - An integer representing the maximum number of non-overlapping talks that can be attended by a single attendee. # Example Input: ``` n = 3 talks = [(1, 4), (2, 5), (3, 6)] ``` Output: ``` 1 ``` Explanation: Only one talk can be attended because all talks overlap. Input: ``` n = 4 talks = [(1, 2), (3, 4), (0, 6), (5, 7)] ``` Output: ``` 3 ``` Explanation: The attendee can attend talks (1, 2), (3, 4), and (5, 7) as they do not overlap. # Note Consider using greedy algorithms or dynamic programming to solve this problem efficiently.","solution":"from typing import List, Tuple def maxTalks(n: int, talks: List[Tuple[int, int]]) -> int: Returns the maximum number of non-overlapping talks that can be attended by a single attendee. # Sort the talks by their end times sorted_talks = sorted(talks, key=lambda x: x[1]) max_talks = 0 current_end_time = 0 # Iterate through the sorted talks for start, end in sorted_talks: if start >= current_end_time: # If the current talk starts after or when the last selected talk ended, attend this talk max_talks += 1 current_end_time = end return max_talks"},{"question":"You are organizing a coding competition and want to assign unique badges to the participants based on the points they score. Each badge has a specific number of stars, and participants can earn or lose stars based on their performance in each round. You have a list of points scored by each participant in different rounds. Points are represented as an integer which can be positive (earn stars) or negative (lose stars). Your task is to calculate the net number of stars each participant has after all rounds are completed. Initially, each participant has zero stars. The input consists of two parts: the first line contains the integer n (1 ≤ n ≤ 100) — the number of participants, followed by n lines each containing the integer m (1 ≤ m ≤ 100) — the number of rounds for that participant and m integers representing the points scored in each of those rounds. Output the net number of stars for each participant in the order they are provided in the input. # Example Input: ``` 3 3 2 -1 3 4 1 -2 1 2 2 -4 4 ``` # Example Output: ``` 4 2 0 ``` # Explanation: - The first participant scores 2, -1, and 3 stars in three rounds, resulting in a net of 4 stars. - The second participant scores 1, -2, 1, and 2 stars in four rounds, resulting in a net of 2 stars. - The third participant scores -4 and 4 stars in two rounds, resulting in a net of 0 stars.","solution":"def calculate_net_stars(n, participant_data): Calculate the net number of stars for each participant. :param n: Number of participants :param participant_data: List of lists, each containing the number of rounds followed by the points in those rounds. :return: List of net stars for each participant net_stars = [] for data in participant_data: # Extract the number of rounds and the points m = data[0] points = data[1:m+1] # Calculate the net stars for the current participant net_stars.append(sum(points)) return net_stars # Example usage: # n = 3 # participant_data = [ # [3, 2, -1, 3], # [4, 1, -2, 1, 2], # [2, -4, 4] # ] # print(calculate_net_stars(n, participant_data)) # Output: [4, 2, 0]"},{"question":"You are given an array of integers where each element represents the cost to climb a step on a staircase. Once you pay the cost, you can either climb one or two steps. You need to find the minimum cost to reach the top of the staircase. The top of the stairs is not necessarily the last element in the array (you can consider the top to be past the last step). You can start either from step 0 or step 1. **Input:** - An integer `n` (1 ≤ `n` ≤ 1000) representing the number of steps. - An array `cost` of `n` integers where the `i-th` element is the cost to step on the `i-th` stair. **Output:** - An integer representing the minimum cost to reach the top of the staircase. **Example:** ``` Input: 10 [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] Output: 6 Input: 5 [10, 15, 20, 15, 10] Output: 30 ``` **Explanation:** In the first example, you can start on step 0, then step to 2, step to 3, step to 4, step to 6, step to 7, and finally step to the top. The cost will be 1+1+1+1+1+1=6. In the second example, you can start on step 1, then step to 3, and finally step to the top. The cost will be 15+15=30.","solution":"def min_cost_climbing_stairs(cost): Returns the minimum cost to reach the top of the staircase. n = len(cost) if n == 1: return cost[0] dp = [0] * (n+1) dp[0], dp[1] = 0, 0 for i in range(2, n+1): dp[i] = min(dp[i-1] + cost[i-1], dp[i-2] + cost[i-2]) return dp[n]"},{"question":"You are the captain of a submarine exploration mission. Your mission involves navigating through a grid of underwater cells. Each cell in the grid can either be an open water cell or an obstacle. Your submarine can move one cell at a time in any of the four directions (up, down, left, or right) but cannot pass through obstacles. Given the initial position of your submarine and the positions of several treasure chests positioned in the grid, your task is to determine the shortest distance from your submarine to each treasure chest using the open cells. # Input - The first line contains four integers `n`, `m`, `sx`, and `sy` where `n` and `m` are the dimensions of the grid (1 ≤ n, m ≤ 1000), and `sx` and `sy` are the starting coordinates of your submarine (1 ≤ sx ≤ n, 1 ≤ sy ≤ m). - The next `n` lines each contain `m` characters, representing the grid. A `.` represents an open cell, and a `#` represents an obstacle. - The next line contains an integer `t` (1 ≤ t ≤ 100), the number of treasure chests. - The next `t` lines each contain two integers `tx` and `ty` (1 ≤ tx ≤ n, 1 ≤ ty ≤ m), representing the coordinates of each treasure chest. # Output - For each treasure chest, print the shortest distance from the submarine\'s starting position to the treasure chest on a new line. If a treasure chest is unreachable, print `-1` for that chest. # Example Input: ``` 5 5 1 1 ..... ..#.. ..... .#. ..... 3 3 3 5 5 1 5 ``` Output: ``` 4 8 4 ``` # Note - The submarine starts at the position `(sx, sy)`. - You need to find the shortest path to reach each treasure chest using Breadth-First Search (BFS) or another suitable algorithm for shortest path in unweighted grids. - Obstacles `#` cannot be passed through, and you cannot move diagonally between cells.","solution":"from collections import deque def bfs_shortest_distance(n, m, grid, sx, sy): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] distances = [[-1 for _ in range(m)] for _ in range(n)] queue = deque([(sx, sy)]) distances[sx][sy] = 0 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and distances[nx][ny] == -1: distances[nx][ny] = distances[x][y] + 1 queue.append((nx, ny)) return distances def shortest_distances_to_treasures(n, m, sx, sy, grid, treasures): sx, sy = sx-1, sy-1 # Convert to 0-indexed distances = bfs_shortest_distance(n, m, grid, sx, sy) results = [] for tx, ty in treasures: tx, ty = tx-1, ty-1 # Convert to 0-indexed results.append(distances[tx][ty]) return results"},{"question":"Given a binary tree, write a function that determines if it is a symmetric (mirror of itself). # Function Signature: ```python def is_symmetric(root: Optional[TreeNode]) -> bool: ``` # Input: - `root`: the root node of the binary tree. Each node consists of an integer value, and references to the left and right child nodes. - The binary tree nodes are represented using the class definition below: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.val = value self.left = left self.right = right ``` # Output: - Return `True` if the tree is symmetric, otherwise return `False`. # Example: ```python # Example 1: # Input: root = [1, 2, 2, 3, 4, 4, 3] # Binary Tree: # 1 # / # 2 2 # / / # 3 4 4 3 # Output: True # Example 2: # Input: root = [1, 2, 2, None, 3, None, 3] # Binary Tree: # 1 # / # 2 2 # # 3 3 # Output: False ``` # Constraints: - The number of nodes in the tree is in the range `[0, 1000]`. - -100 <= Node.val <= 100","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.val = value self.left = left self.right = right def is_symmetric(root: TreeNode) -> bool: if root is None: return True def is_mirror(t1: TreeNode, t2: TreeNode) -> bool: if t1 is None and t2 is None: return True if t1 is None or t2 is None: return False return (t1.val == t2.val) and is_mirror(t1.left, t2.right) and is_mirror(t1.right, t2.left) return is_mirror(root.left, root.right)"},{"question":"In a distant kingdom, there are **n** castles connected by **n-1** roads, forming a magical tree. Each road has a specific length measured in miles. The kingdom\'s queen, who loves travelling, wants to visit some of these castles. She has a certain number of travel requests. Each travel request contains two castles, and the queen wants to know the total distance she has to travel if she goes from one castle to another using the unique path in the tree. You need to help the advisors determine the distances based on the travel requests. The first line contains an integer **n** (2 ≤ **n** ≤ 10^5) — the number of castles. Each of the next **n-1** lines contains three space-separated integers **u, v, w** (1 ≤ **u, v** ≤ **n**, 1 ≤ **w** ≤ 10^5) which means there is a road connecting castles **u** and **v** with a length of **w** miles. The next line contains an integer **q** (1 ≤ **q** ≤ 10^5) — the number of travel requests. Each of the next **q** lines contains two space-separated integers **ai, bi** (1 ≤ **ai, bi** ≤ **n**) which represent a travel request where the queen needs to travel from castle **ai** to castle **bi**. Output **q** lines, each containing a single integer - the distance for the corresponding travel request. For example: Input: ``` 5 1 2 3 1 3 2 3 4 4 3 5 6 3 1 4 2 5 4 5 ``` Output: ``` 9 11 10 ``` In this scenario, the queen travels from castle 1 to 4 through castles 1 → 3 → 4, from castle 2 to 5 through castles 2 → 1 → 3 → 5, and from castle 4 to 5 through castles 4 → 3 → 5.","solution":"import sys from collections import defaultdict, deque def build_tree(n, edges): tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) return tree def bfs_with_distances(tree, start): distances = {} queue = deque([(start, 0)]) visited = set() while queue: node, dist = queue.popleft() if node in visited: continue visited.add(node) distances[node] = dist for neighbor, weight in tree[node]: if neighbor not in visited: queue.append((neighbor, dist + weight)) return distances def process_queries(n, edges, queries): tree = build_tree(n, edges) all_distances = {} results = [] for ai, bi in queries: if (ai, bi) not in all_distances: dist_from_ai = bfs_with_distances(tree, ai) for dest, dist in dist_from_ai.items(): all_distances[(ai, dest)] = dist all_distances[(dest, ai)] = dist results.append(all_distances[(ai, bi)]) return results # Read input def main(): input = sys.stdin.read data = input().split() index = 0 n = int(data[index]) index += 1 edges = [] for _ in range(n - 1): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) edges.append((u, v, w)) index += 3 q = int(data[index]) index += 1 queries = [] for _ in range(q): ai = int(data[index]) bi = int(data[index + 1]) queries.append((ai, bi)) index += 2 results = process_queries(n, edges, queries) sys.stdout.write(\\"n\\".join(map(str, results)) + \\"n\\")"},{"question":"You are given an undirected graph with n nodes and m edges. Each node represents a person and each edge represents a friendship between two people. Your task is to determine whether it is possible to divide the people into two groups such that each group has no internal friendships (i.e., all friendships are between people in different groups). The first line of the input contains two integers n and m (1 <= n <= 10^5, 0 <= m <= 2*10^5) — the number of nodes and edges in the graph respectively. The next m lines each contain two integers u and v (1 <= u, v <= n) indicating that there is an edge (friendship) between nodes u and v. Output \\"YES\\" if it is possible to divide the people into two such groups. Otherwise, output \\"NO\\". Input: ``` 5 4 1 2 1 3 2 4 3 4 ``` Output: ``` YES ``` In the first sample input, it is possible to divide the people into two groups such that no two people in the same group are friends. For instance, one possible grouping is {1, 4} and {2, 3, 5}. Input: ``` 4 4 1 2 1 3 2 3 3 4 ``` Output: ``` NO ``` In the second sample input, it is not possible to divide the people into two groups with the given friendships without at least one group having internal friendships.","solution":"from collections import deque, defaultdict def can_be_divided(n, m, edges): Determines whether the people can be divided into two groups such that each group has no internal friendships. :param n: The number of nodes (people). :param m: The number of edges (friendships). :param edges: List of tuples representing the edges (friendships). :return: \\"YES\\" if it is possible to divide into two groups, otherwise \\"NO\\". if m == 0: return \\"YES\\" adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) color = [-1] * (n + 1) def bfs_check(start_node): queue = deque([start_node]) color[start_node] = 0 while queue: node = queue.popleft() for neighbor in adj_list[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for person in range(1, n + 1): if color[person] == -1: if not bfs_check(person): return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers representing the heights of students standing in a line. The teacher wants to rearrange them so that the heights are strictly increasing. To accomplish this, the teacher can move a student standing at position i to any position j (0 le j le n, where n is the length of the array). Write a function to determine the minimum number of moves required to arrange the students\' heights in strictly increasing order. You should return a single integer representing the minimum number of moves. **Input:** - An integer t (1 le t le 10^3), the number of test cases. - For each test case, the first line contains a single integer n (1 le n le 10^5), the number of students. - The second line contains n integers (1 le heights[i] le 10^9) representing the heights of the students. **Output:** - For each test case, output a single integer representing the minimum number of moves required to arrange the heights in strictly increasing order. **Example:** ``` Input: 2 5 5 3 7 8 5 4 1 2 2 4 Output: 2 1 ``` In the first example, you can move the student with height 3 to the starting position, making the array [3, 5, 7, 8, 5], and then move the student with height 5 (at the end) to the fourth position, making the array [3, 5, 7, 8, 5] correctly sorted. In the second example, you can move the second \'2\' to either the position before \'1\' or after the first \'2\' to achieve the strictly increasing order. *Note:* The input and output format should be strictly followed. The input consists of several test cases and for each test case, the output should be on a new line.","solution":"def min_moves(t, test_cases): results = [] for i in range(t): n, heights = test_cases[i] lis = [1] * n # longest increasing subsequence starting from each position # Calculate LIS for each position for j in range(1, n): for k in range(j): if heights[j] > heights[k]: lis[j] = max(lis[j], lis[k] + 1) # The minimum number of moves required is the number of elements # not in the longest increasing subsequence longest_increasing_subsequence_length = max(lis) min_moves_required = n - longest_increasing_subsequence_length results.append(min_moves_required) return results"},{"question":"You are given an n x n matrix consisting of integers. Your task is to determine if the matrix is a Toeplitz matrix. In a Toeplitz matrix, every diagonal from top-left to bottom-right has the same elements. The first line contains integer n (1 ≤ n ≤ 100), the size of the matrix. Print \\"YES\\" if the matrix is a Toeplitz matrix, and \\"NO\\" otherwise. For example: Input: 3 1 2 3 4 1 2 5 4 1 Output: YES Input: 3 1 2 3 4 5 6 7 8 9 Output: NO","solution":"def is_toeplitz(matrix): Returns \\"YES\\" if the matrix is a Toeplitz matrix, and \\"NO\\" otherwise. n = len(matrix) for i in range(n): for j in range(n): if i > 0 and j > 0 and matrix[i][j] != matrix[i-1][j-1]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a string s consisting of lowercase Latin letters. Your task is to process several queries on this string. In each query, you will be given two integers l and r (1 ≤ l ≤ r ≤ |s|), and you need to find the number of distinct characters in the substring from index l to index r (inclusive). The first input line contains a string s (1 ≤ |s| ≤ 100000) of lowercase Latin letters. The second line contains an integer q (1 ≤ q ≤ 100000), the number of queries. Each of the following q lines contains two integers l and r (1 ≤ l ≤ r ≤ |s|), representing a query. Output q lines, each containing the answer for the respective query. # Example Input ``` abcabc 3 1 3 2 5 1 6 ``` Output ``` 3 3 3 ``` # Explanation - For the first query, the substring \\"abc\\" contains 3 distinct characters: \'a\', \'b\', \'c\'. - For the second query, the substring \\"bcab\\" contains 3 distinct characters: \'b\', \'c\', \'a\'. - For the third query, the substring \\"abcabc\\" contains 3 distinct characters: \'a\', \'b\', \'c\'.","solution":"def distinct_characters(s, queries): Returns a list of number of distinct characters in substrings specified by queries. Args: s (str): The input string containing lowercase Latin letters. queries (list of tuples): Each tuple contains two integers l and r (1-based indices). Returns: list of int: Each integer is the number of distinct characters in the corresponding substring. # Convert the string into a more accessible format (1-based index) s = \' \' + s # Adding a space at the beginning to make querying via 1-based indexes easier results = [] for l, r in queries: # Calculate the number of distinct characters in the substring s[l:r+1] substr = s[l:r+1] distinct_count = len(set(substr)) results.append(distinct_count) return results"},{"question":"You are given a list of integers and a target integer. Your task is to find out if there are any two distinct integers in the list that add up to the target integer. If such a pair exists, print \\"YES\\", otherwise print \\"NO\\". Input format: - The first line contains two integers n and target, where n is the number of integers in the list (1 ≤ n ≤ 10^5) and target is the target integer (|target| ≤ 10^9). - The second line contains n integers, which represent the list of integers. The list may contain both positive and negative integers and each integer is within the range of -10^9 to 10^9. Output format: - Print a single line \\"YES\\" if there exists two distinct integers in the list whose sum is equal to the target integer. Otherwise, print \\"NO\\". Examples: Input: 5 9 2 7 11 15 1 Output: YES (Input Explanation: The pair 2 and 7 sums to 9, which is the target.) Input: 4 20 1 2 3 4 Output: NO (Input Explanation: No pair of integers from the list sums to 20.)","solution":"def has_pair_with_sum(n, target, arr): Returns \\"YES\\" if there exists two distinct integers in the list `arr` that sum up to `target`, otherwise returns \\"NO\\". seen = set() for num in arr: complement = target - num if complement in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Given an integer array `nums` and an integer `k`, return the maximum number of pairs of indices (i, j) such that `i < j` and `nums[i] + nums[j]` is divisible by `k`. # Input: - The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ 10^5) where `n` is the number of elements in the array and `k` is the divisor. - The second line contains `n` integers representing the array `nums` where each element is between 1 and 10^9 inclusive. # Output: - Print a single integer denoting the maximum number of pairs `(i, j)` such that `i < j` and `nums[i] + nums[j]` is divisible by `k`. # Example: Input: ``` 6 5 1 2 3 4 5 10 ``` Output: ``` 3 ``` # Explanation: The pairs (i, j) that satisfy the conditions are: - (1, 4) -> `nums[1] + nums[4] = 1 + 4 = 5`, which is divisible by 5. - (2, 3) -> `nums[2] + nums[3] = 2 + 3 = 5`, which is divisible by 5. - (5, 6) -> `nums[5] + nums[6] = 5 + 10 = 15`, which is divisible by 5. Hence, the maximum number of such pairs is 3.","solution":"def max_pairs(nums, k): remainder_counts = [0] * k for num in nums: remainder_counts[num % k] += 1 pairs = remainder_counts[0] // 2 # pairs formed by elements which are exactly divisible by k for i in range(1, (k // 2) + 1): if i != k - i: # normal case where the remainder pairs with k - remainder pairs += min(remainder_counts[i], remainder_counts[k - i]) else: # special case where the remainder is exactly half of k pairs += remainder_counts[i] // 2 return pairs"},{"question":"Petya loves solving puzzles in addition to attending university. One day while he was looking at a staircase, he wondered about the different ways a person can reach the top of the staircase if they are allowed to take steps 1, 2, or 3 at a time. Given a staircase with N steps, Petya wants to know in how many distinct ways one can reach the top (the N-th step) starting from the ground (0-th step). Write a function that calculates the number of distinct ways to reach the N-th step, considering steps of sizes 1, 2, or 3. The first line of the input contains one integer T (1 <= T <= 100) – the number of test cases. Each of the next T lines contains one integer N (0 <= N <= 1000) – the number of steps in the staircase. Print the results for each test case modulo 10^9 + 7 as there can be a large number of ways. # Input ``` 4 3 4 5 0 ``` # Output ``` 4 7 13 1 ``` # Explanation For the first test case with 3 steps, the distinct ways are: - 1+1+1 - 1+2 - 2+1 - 3 For the fourth test case with 0 steps, there is 1 way to be at the ground step, by not moving at all.","solution":"MOD = 10**9 + 7 def count_ways(N): if N == 0: return 1 dp = [0] * (N + 1) dp[0] = 1 for i in range(1, N + 1): if i >= 1: dp[i] = (dp[i] + dp[i - 1]) % MOD if i >= 2: dp[i] = (dp[i] + dp[i - 2]) % MOD if i >= 3: dp[i] = (dp[i] + dp[i - 3]) % MOD return dp[N] def solve(T, steps): results = [] for step in steps: results.append(count_ways(step)) return results"},{"question":"Create a function to determine if a string containing only parentheses is valid. A string is valid if all parentheses are matched with the correct open and close order. You need to implement an operation which takes a string containing only \'(\' and \')\' characters as input and returns a boolean indicating whether the string is valid or not. Your code should have the following signature: ```python def is_valid_parentheses(s: str) -> bool: # your implementation here ``` # Example - Given the input string \\"()\\", the function should return `True`. - Given the input string \\"()()\\", the function should return `True`. - Given the input string \\"((\\", the function should return `False`. - Given the input string \\"(()))\\", the function should return `False`.","solution":"def is_valid_parentheses(s: str) -> bool: Determine if a string containing only \'(\' and \')\' is valid. A string is valid if all parentheses are matched with the correct open and close order. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack"},{"question":"You are given a string s consisting of lowercase English letters and a positive integer k. Your task is to determine if it is possible to rearrange the characters in the string s such that no two adjacent characters are the same, and each character appears at most k times in the rearranged string. If such a rearrangement is possible, output the rearranged string. Otherwise, output \\"NO\\". The input consists of a single line containing the string s and the integer k separated by a space. The length of the string s does not exceed 1000 characters, and 1 ≤ k ≤ 1000. If a valid rearrangement exists, print it in one line. If multiple valid rearrangements exist, you may print any of them. If no valid rearrangement exists, print \\"NO\\".","solution":"import heapq from collections import Counter def rearrange_string(s, k): if k == 0: return s counter = Counter(s) max_heap = [(-value, key) for key, value in counter.items()] heapq.heapify(max_heap) result = [] wait_queue = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) wait_queue.append((freq + 1, char)) if len(wait_queue) < k: continue pop_freq, pop_char = wait_queue.pop(0) if pop_freq < 0: heapq.heappush(max_heap, (pop_freq, pop_char)) return \'\'.join(result) if len(result) == len(s) else \\"NO\\""},{"question":"Write a function that takes two integers m and n (1 ≤ m, n ≤ 20) representing the dimensions of a grid. The function should return the number of unique paths from the top-left corner to the bottom-right corner of the grid, assuming you can only move either down or right at any point in time.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of a grid. The grid has dimensions m x n and movements are restricted to right and down only. if m == 1 or n == 1: return 1 # Create a 2D table to store results of subproblems dp = [[0] * n for _ in range(m)] # Initialize the first row and first column for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[m - 1][n - 1]"},{"question":"Many mathematical operations are represented as a string in postfix (Reverse Polish) notation, where every operator follows all of its operands. For example, the postfix notation of the algebraic expression \\"2 + 3 * 4\\" is \\"2 3 4 * +\\". The task is to evaluate such given expressions. Write a function that evaluates a postfix expression and returns the result. Your function will receive a single string representing a postfix expression, consisting of integers and operators separated by space. The supported operators are \\"+\\", \\"-\\", \\"*\\", and \\"/\\". You can assume that the input string is a valid postfix expression. Note: Division should be integer division (using the \\"//\\" operator). **Input:** - A single line string containing a postfix expression. **Output:** - An integer representing the result of the postfix expression. **Example:** ``` Input: \\"2 3 4 * +\\" Output: 14 Input: \\"5 1 2 + 4 * + 3 -\\" Output: 14 ``` **Constraints:** - The given string is non-empty. - The length of the string does not exceed 100. - The operands are positive integers. - The result of every operation will fit in a standard Python integer.","solution":"def evaluate_postfix(postfix_expr): Evaluates a given postfix expression and returns the result. Parameters: postfix_expr (str): A string containing a postfix expression. Returns: int: The result of the evaluated postfix expression. stack = [] tokens = postfix_expr.split() for token in tokens: if token.isdigit(): stack.append(int(token)) else: operand2 = stack.pop() operand1 = stack.pop() if token == \'+\': result = operand1 + operand2 elif token == \'-\': result = operand1 - operand2 elif token == \'*\': result = operand1 * operand2 elif token == \'/\': result = operand1 // operand2 stack.append(result) return stack.pop()"},{"question":"Write a function named `frequent_elements` that takes a list of integers `nums` and an integer `k` as input. The function should return a list of the `k` most frequent elements in `nums`. If there are multiple elements with the same frequency, the function should return the smaller elements first. You may assume that `1 <= k <= len(nums)`. **Function Signature:** ```python def frequent_elements(nums: List[int], k: int) -> List[int]: ``` **Input:** - `nums`: A list of integers. - `k`: An integer representing the number of most frequent elements to return. **Output:** - A list of integers representing the `k` most frequent elements in descending order of their frequency. If multiple elements have the same frequency, they should be sorted in ascending order. **Example:** ```python assert frequent_elements([1, 1, 1, 2, 2, 3], 2) == [1, 2] assert frequent_elements([4, 1, -1, 2, -1, 2, 3], 2) == [-1, 2] assert frequent_elements([1], 1) == [1] ``` **Note:** 1. Your solution should have a time complexity of O(N log N) or better, where N is the number of elements in the list `nums`. 2. You can assume the elements of `nums` are integers that fit within the standard range of Python\'s int type.","solution":"from typing import List from collections import Counter def frequent_elements(nums: List[int], k: int) -> List[int]: Returns the k most frequent elements in nums. If multiple elements have the same frequency, they are returned in ascending order. # Count the frequency of each element freq_count = Counter(nums) # Create a list of elements sorted by frequency and then by element value sorted_elements = sorted(freq_count.items(), key=lambda x: (-x[1], x[0])) # Extract the first k elements result = [elem[0] for elem in sorted_elements[:k]] return result"},{"question":"You are given a permutation of the first N natural numbers. Your task is to answer Q queries regarding various subarrays of this permutation. A permutation of length N is an array containing the first N natural numbers exactly once. You need to find the maximum difference between any two elements in a given subarray. A subarray is defined as a contiguous segment of the array. For each query, you are given two integers L and R representing the start and end indices of the subarray. You need to calculate the difference between the maximum and minimum elements within the subarray from index L to R (inclusive, 1-based index). The first line contains one integer N (1 leq N leq 2 cdot 10^5) – the size of the permutation P. The next line contains N integers – the permutation P. The next line contains one integer Q (1 leq Q leq 10^5) – the number of queries. Each of the next Q lines contains two integers L and R (1 leq L leq R leq N). Output exactly Q lines with a single integer in each that represents the answer to each query. Output the solutions in the order the queries were asked. **Example**: ``` Input: 5 4 3 1 5 2 3 1 3 2 5 1 5 Output: 3 4 4 ``` Explanation: For the first query, the subarray is [4, 3, 1] and the maximum difference is 4 - 1 = 3. For the second query, the subarray is [3, 1, 5, 2] and the maximum difference is 5 - 1 = 4. For the third query, the subarray is [4, 3, 1, 5, 2] and the maximum difference is 5 - 1 = 4.","solution":"def max_diff_in_subarray(N, P, queries): results = [] for L, R in queries: subarray = P[L-1:R] # Extract subarray; converting 1-based to 0-based index max_val = max(subarray) min_val = min(subarray) results.append(max_val - min_val) return results"},{"question":"Daniel loves playing with strings and has recently started learning about substrings. A substring is defined as a contiguous sequence of characters within a string. He defines the \\"substring harmony\\" of a string as the number of unique characters in the substring. For example, the substring \\"abc\\" has a harmony of 3, while the substring \\"aaa\\" has a harmony of 1. Daniel decides to create a game where he calculates the substring harmony for every possible substring of a given string and finds the maximum harmony value among them. You are given a string s of length n (1 ≤ n ≤ 100,000) consisting of lowercase English letters. Can you help Daniel find the maximum substring harmony? # Input - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the string s. - The second line contains the string s of length n consisting of lowercase English letters. # Output - Print a single integer, the maximum substring harmony of the string s. # Example **Input:** ``` 5 abcde ``` **Output:** ``` 5 ``` **Explanation:** In this case, the entire string \\"abcde\\" is the substring with the maximum harmony, which is 5 since all characters are unique.","solution":"def max_substring_harmony(s): Returns the maximum substring harmony for the given string s. # Since the maximum substring harmony is the count of distinct characters # in the string s, we can simply count the unique characters present in the string. return len(set(s))"},{"question":"The kingdom of Zurbania has a peculiar custom of forming \\"friend circles\\". A friend circle is a group of people where each person is friends with every other person in the circle either directly or indirectly through other friends. Given an undirected graph representing friendships between citizens of Zurbania, your task is to determine the number of distinct friend circles (connected components) present. # Input The first line contains an integer `T` (1 leq T leq 100) – the number of test cases. The description of the test cases follows. For each test case: - The first line contains two integers `N` and `M` (1 le N le 1000, 0 le M le (N cdot (N - 1)) / 2) – the number of citizens and the number of friendships. - The next `M` lines each contain two integers `u` and `v` (1 le u, v le N) – denoting that citizen `u` and citizen `v` are friends. # Output For each test case, print a single integer – the number of distinct friend circles in the kingdom of Zurbania. # Example Input ``` 2 5 3 1 2 2 3 4 5 4 2 1 2 3 4 ``` Output ``` 2 2 ``` # Explanation In the first test case: - Citizens are {1, 2, 3, 4, 5}. - Friend groups are {1, 2, 3} and {4, 5}, so there are 2 friend circles. In the second test case: - Citizens are {1, 2, 3, 4}. - Friend groups are {1, 2} and {3, 4}, so there are 2 friend circles.","solution":"def find_friend_circles(T, test_cases): def dfs(node, visited, adj_list): stack = [node] while stack: curr = stack.pop() for neighbor in adj_list[curr]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) results = [] for n, m, friendships in test_cases: adj_list = {i: [] for i in range(1, n+1)} for u, v in friendships: adj_list[u].append(v) adj_list[v].append(u) visited = {i: False for i in range(1, n+1)} count = 0 for i in range(1, n+1): if not visited[i]: visited[i] = True dfs(i, visited, adj_list) count += 1 results.append(count) return results"},{"question":"The only line of the input contains an integer `n` representing the length of a binary number. The next line contains a binary number of length `n`, which consists only of the digits \'0\' and \'1\'. The length of the binary number is between 1 and 20, inclusive. Your task is to determine if the binary number is a palindrome. A binary number is a palindrome if it reads the same both forward and backward. Output \\"Yes\\" if the binary number is a palindrome, otherwise output \\"No\\".","solution":"def is_binary_palindrome(n, binary_str): Determines if a binary number is a palindrome. Params: n (int): the length of the binary number. binary_str (str): the binary number as a string. Returns: str: \\"Yes\\" if the binary number is a palindrome, \\"No\\" otherwise. if binary_str == binary_str[::-1]: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given a list of n integers, and you need to split it into two non-empty sublists such that the absolute difference between the sums of the elements in each sublist is minimized. Each integer in the list is between -10^9 and 10^9 inclusive. The first line contains a single integer n (2le nle 2 times 10^5) — the number of integers in the list. The second line contains n integers a_i (-10^9 le a_i le 10^9) — the list of integers. Output a single integer — the minimum absolute difference between the sums of the elements in the two sublists. In the first test case, the list can be split as [2, 3] and [1]. The absolute difference between the sums is 0, which is the minimum possible.","solution":"from itertools import combinations def min_abs_difference(nums): total_sum = sum(nums) n = len(nums) half_sum = total_sum / 2 min_diff = float(\\"inf\\") for r in range(1, (n // 2) + 1): for subset in combinations(nums, r): subset_sum = sum(subset) current_diff = abs(total_sum - 2 * subset_sum) if current_diff < min_diff: min_diff = current_diff return int(min_diff)"},{"question":"Given an n x m grid where each cell has a value representing the height of the terrain, your task is to find the minimum effort path from the top-left corner to the bottom-right corner. The effort of a path is defined as the maximum absolute difference in heights between two consecutive cells in the path. You can move up, down, left, or right from a cell. You need to return the minimum effort required to travel from the top-left corner to the bottom-right corner. Input specification: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid. - The next n lines contain m integers each, representing the height of each cell in the grid. Output specification: - Output a single integer representing the minimum effort to travel from the top-left corner to the bottom-right corner. Example: Input: 3 3 1 2 2 3 8 2 5 3 5 Output: 2 Explanation: The path from (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) has the effort of max(|2-1|, |2-2|, |8-2|, |3-5|) = 2. Another path from (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) has a larger effort of max(|3-1|, |5-3|, |3-5|, |5-8|) = 5. Thus, the minimum effort path has an effort of 2.","solution":"from heapq import heappop, heappush def minimum_effort_path(grid): This function returns the minimum effort required to travel from the top-left corner to the bottom-right corner in the grid. n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Min-Heap to store (effort, x, y) heap = [(0, 0, 0)] efforts = [[float(\'inf\')] * m for _ in range(n)] efforts[0][0] = 0 while heap: effort, x, y = heappop(heap) if x == n - 1 and y == m - 1: return effort for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: # Calculate the effort to the next cell new_effort = max(effort, abs(grid[nx][ny] - grid[x][y])) if new_effort < efforts[nx][ny]: efforts[nx][ny] = new_effort heappush(heap, (new_effort, nx, ny)) return -1"},{"question":"In a small town, people are much concerned about power outages. They have a device that records the voltage level every hour for `h` consecutive hours. The device records a voltage level `1` if the voltage is stable (i.e., within the normal operational range) and `0` if it is unstable (indicating a power outage). Concerned with the occurrence of power outages, they want to analyze the recordings to find the longest period during which the voltage was unstable. However, if all recordings indicate stable voltage or the longest duration of instability is shorter than 2 hours, they simply want to declare that there is no significant instability. Write a program that reads the number of hours `h` and the voltage recordings, then outputs the length of the longest period of instability (consecutive `0`s). If there is no significant instability, output \\"NO\\". The first line contains an integer `h` (3 ≤ h ≤ 100) — the number of hours during which the voltage level was recorded. The second line contains `h` characters `1` or `0` — the voltage recordings for each hour. Examples: ``` Input: 5 11010 Output: 1 Input: 6 111111 Output: NO Input: 8 00011000 Output: 3 ```","solution":"def longest_instability(h, recordings): This function finds the longest period of unstable voltage (consecutive \'0\'s) in the given recordings. If the longest period is less than 2 hours or all periods are stable, it returns \'NO\'. :param h: Number of hours the voltage was recorded. :param recordings: A string of \'1\'s and \'0\'s representing stable and unstable voltage readings respectively. :return: Length of the longest period of instability or \'NO\'. max_instability = 0 current_instability = 0 for record in recordings: if record == \'0\': current_instability += 1 else: if current_instability > max_instability: max_instability = current_instability current_instability = 0 if current_instability > max_instability: max_instability = current_instability if max_instability < 2: return \\"NO\\" return max_instability"},{"question":"You are given a game consisting of n rooms connected by corridors. Each room contains a certain number of gold coins, and each corridor allows you to go from one room to another. You start in room 1 and you want to collect the maximum number of gold coins possible. However, once you leave a room, you cannot return to it again. Determine the maximum number of gold coins you can collect. The first line contains an integer n (1 ≤ n ≤ 5000) — the number of rooms. The second line contains n integers g1, g2, ..., gn (0 ≤ gi ≤ 1000) — the number of gold coins in each room. Each of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — the description of a corridor that connects room u to room v with a weight (time taken to travel) w. Output the maximum number of gold coins you can collect.","solution":"from collections import defaultdict def maximize_gold(n, gold, corridors): def dfs(node, parent): max_gold = gold[node - 1] # gold at current node for neighbor, weight in graph[node]: if neighbor != parent: max_gold = max(max_gold, gold[node - 1] + dfs(neighbor, node)) return max_gold graph = defaultdict(list) for u, v, w in corridors: graph[u].append((v, w)) graph[v].append((u, w)) return dfs(1, -1) # Example usage: n = 5 gold = [3, 2, 3, 1, 4] corridors = [ (1, 2, 3), (1, 3, 2), (3, 4, 2), (3, 5, 2) ] print(maximize_gold(n, gold, corridors)) # Output should be 10"},{"question":"A company\'s IT department needs to enhance their login attempt tracking system. They store logs of login attempts by various users in an events table with the following structure: - `timestamp` (string): The timestamp of the login attempt in the format \\"YYYY-MM-DD HH:MM:SS\\". - `user_id` (integer): The ID of the user trying to login. - `success` (boolean): Whether the login attempt was successful or not. The team wants you to create an algorithm that analyzes these login attempts to identify potential security risks. Specifically, you need to detect users who have made multiple consecutive failed login attempts within a short period. You need to write a function: ```python def identify_risky_users(logs: List[Tuple[str, int, bool]], threshold: int, window: str) -> List[int]: ``` where: - `logs`: A list of tuples representing login attempts, each containing a timestamp (string), user_id (integer), and success (boolean). - `threshold`: An integer representing the number of consecutive failed attempts considered risky. - `window`: A string representing the time window in the format \\"HH:MM:SS\\", within which the consecutive failed attempts must occur. The function should return a list of user IDs who made at least `threshold` consecutive failed login attempts within the specified `window`. # Example Input: ```python logs = [ (\\"2023-10-01 09:00:00\\", 1, False), (\\"2023-10-01 09:01:00\\", 1, False), (\\"2023-10-01 09:02:00\\", 1, False), (\\"2023-10-01 09:03:00\\", 1, True), (\\"2023-10-01 09:05:00\\", 2, False), (\\"2023-10-01 09:06:00\\", 2, False), (\\"2023-10-01 09:07:00\\", 2, False), (\\"2023-10-01 09:08:00\\", 2, False), ] threshold = 3 window = \\"00:05:00\\" ``` Output: ```python [1, 2] ``` # Explanation - User 1 made three consecutive failed attempts within 5 minutes: from \\"2023-10-01 09:00:00\\" to \\"2023-10-01 09:02:00\\". - User 2 made four consecutive failed attempts within 5 minutes: from \\"2023-10-01 09:05:00\\" to \\"2023-10-01 09:08:00\\". # Constraints - The length of the logs list is between `1` and `10^5`. - The `timestamp` will always be in valid \\"YYYY-MM-DD HH:MM:SS\\" format. - The `user_id` is a positive integer. - The `threshold` is a positive integer. - The `window` is in \\"HH:MM:SS\\" format with non-negative values for HH, MM, and SS. Write the function to correctly identify and return the list of risky users based on the given logs.","solution":"from datetime import datetime, timedelta from typing import List, Tuple def identify_risky_users(logs: List[Tuple[str, int, bool]], threshold: int, window: str) -> List[int]: # Convert window string into a timedelta object h, m, s = map(int, window.split(\':\')) window_delta = timedelta(hours=h, minutes=m, seconds=s) # Dictionary to collect login attempts for each user user_attempts = {} # Populate user_attempts with timestamps of failed attempts for timestamp, user_id, success in logs: if not success: if user_id not in user_attempts: user_attempts[user_id] = [] user_attempts[user_id].append(datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\")) # Identify risky users risky_users = [] for user_id, times in user_attempts.items(): times.sort() # Ensure the timestamps are sorted for i in range(len(times) - threshold + 1): if (times[i + threshold - 1] - times[i]) <= window_delta: risky_users.append(user_id) break # No need to check further once we identify risk for this user return risky_users"},{"question":"A telecommunications company is optimizing its network of communication towers. Each tower can handle a limited number of active communication channels simultaneously. During peak hours, the company wants to ensure no tower is overloaded while maximizing the number of active communication channels. Each tower has a fixed capacity, which is the maximum number of channels it can handle at any given time. You are given a set of communication requests, each request requiring a specific channel on two different towers to be open simultaneously. Your task is to determine whether it is possible to schedule all the communication requests without exceeding any tower\'s capacity. If it is possible, you should output the order in which the communication requests should be fulfilled. If there are multiple possible orders, provide any one of them. If it is not possible, print \\"IMPOSSIBLE\\". # Input: - The first line contains two integers `m` and `n` (1 ≤ `m`, `n` ≤ 10^5), where `m` is the number of communication towers and `n` is the number of communication requests. - The second line contains `m` integers `c_i` (1 ≤ `c_i` ≤ 10^5), the capacity of each tower (the maximum number of channels it can handle simultaneously). - Each of the next `n` lines contains three integers `a_i`, `b_i`, `d_i` (1 ≤ `a_i`, `b_i` ≤ `m`, 1 ≤ `d_i` ≤ 10^5), representing a communication request that requires a channel between towers `a_i` and `b_i` and will last for `d_i` time units. # Output: - If it is possible to schedule all communication requests without exceeding any tower\'s capacity, print \\"POSSIBLE\\" on the first line. - On the second line, print a permutation of integers from 1 to `n`, indicating the order in which the requests should be fulfilled. - If it is not possible, print \\"IMPOSSIBLE\\". # Examples: Input: ``` 3 5 4 6 5 1 2 3 2 3 1 1 3 2 2 3 4 1 2 5 ``` Output: ``` POSSIBLE 1 3 2 4 5 ``` Input: ``` 2 3 2 2 1 2 1 1 2 2 1 2 3 ``` Output: ``` IMPOSSIBLE ``` # Constraints: - It is guaranteed that each tower has at least one communication request involving it. - There may be multiple valid orderings if a solution exists. - The duration `d_i` is irrelevant for the solution, as the capacity constraint is only based on the simultaneous channels required at any point in time.","solution":"def optimize_towers(m, n, capacities, requests): from collections import defaultdict # Track the current load on each tower tower_load = [0] * m # Requests sorted based on the minimum capacity of the two involved towers sorted_requests = sorted(range(n), key=lambda i: min(capacities[requests[i][0]-1], capacities[requests[i][1]-1])) result_order = [] for i in sorted_requests: a, b, d = requests[i] a -= 1 b -= 1 if tower_load[a] + 1 <= capacities[a] and tower_load[b] + 1 <= capacities[b]: tower_load[a] += 1 tower_load[b] += 1 result_order.append(i + 1) else: return \\"IMPOSSIBLE\\" return \\"POSSIBLEn\\" + \\" \\".join(map(str, result_order)) # Example usage: # m, n = 3, 5 # capacities = [4, 6, 5] # requests = [(1, 2, 3), (2, 3, 1), (1, 3, 2), (2, 3, 4), (1, 2, 5)] # print(optimize_towers(m, n, capacities, requests))"},{"question":"You have two arrays of integers, A and B, both containing n elements. You need to find an array C such that for each index i (0 ≤ i < n), C[i] = max(A[i], B[i]). The array C should contain the maximum element between corresponding elements in A and B at each position. The first line contains an integer n (1 ≤ n ≤ 100,000), the length of arrays A and B. The next line contains n space-separated integers representing the elements of array A (1 ≤ A[i] ≤ 10^9). The last line contains n space-separated integers representing the elements of array B (1 ≤ B[i] ≤ 10^9). Print the array C as a single line of n space-separated integers. # Example Input ``` 4 1 4 3 2 3 2 1 5 ``` Output ``` 3 4 3 5 ``` # Explanation For index 0: max(1, 3) = 3. For index 1: max(4, 2) = 4. For index 2: max(3, 1) = 3. For index 3: max(2, 5) = 5.","solution":"def find_max_array(n, A, B): Given two arrays A and B of length n, return an array C where C[i] = max(A[i], B[i]) for each index i. C = [max(A[i], B[i]) for i in range(n)] return C"},{"question":"You are given a string consisting of alphanumeric characters and special characters. You need to determine if it is possible to rearrange the characters of the string to form a palindrome. A palindrome is a string that reads the same forward and backward, such as \\"racecar\\" or \\"level\\". The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a string s consisting of lowercase and uppercase English letters (a-z, A-Z), and digits (0-9). The length of each string is between 1 and 1000 characters, inclusive. For each test case, output \\"YES\\" if the characters of the string can be rearranged to form a palindrome, and \\"NO\\" otherwise. # Example Input: ``` 3 aabb abc abcba ``` Output: ``` YES NO YES ``` # Note - For the first example, characters can be rearranged to form the palindrome \\"abba\\" or \\"baab\\". - In the second example, it\'s impossible to rearrange the characters to form a palindrome. - The third example is already a palindrome.","solution":"def can_form_palindrome(t, cases): Determines if each string in the cases list can be rearranged to form a palindrome. results = [] for s in cases: char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count the number of characters with odd occurrences odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # A string can be rearranged to form a palindrome if it has at most one character with an odd count if odd_count > 1: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"# Problem Statement: Open-Length Street Lamp Arrangement A city is planning the installation of new street lamps on a newly constructed road. The road is a straight line of length L meters, and they want to ensure that the entire length of the road is well lit. The street lamps they have can light up to r meters to the left and r meters to the right from their position. The city needs to figure out the minimum number of street lamps required and their positions to ensure there are no dark spots on the entire road. Your task is to help the city by providing the minimal number of street lamps required and their positions. Assume the positions start from 0 at one end of the road up to L at the other end. # Input - The first line contains an integer t (1 le t le 100), representing the number of test cases. - The next t lines each contain two integers L (1 le L le 1000) and r (1 le r le 100), representing the length of the road and the range of each street lamp respectively. # Output For each test case, output two lines: 1. The first line should contain one integer n, the minimum number of street lamps required. 2. The second line should contain n integers, representing the positions of the street lamps placed on the road in increasing order. # Example Input ``` 2 10 2 15 3 ``` Output ``` 3 2 6 10 3 3 9 15 ``` # Explanation In the first test case: - The road is 10 meters long, and each lamp covers 2 meters on both sides. - By placing lamps at positions 2, 6, and 10, the entire road from 0 to 10 meters is covered. In the second test case: - The road is 15 meters long, and each lamp covers 3 meters on both sides. - By placing lamps at positions 3, 9, and 15, the entire road from 0 to 15 meters is covered.","solution":"def street_lamps(t, test_cases): results = [] for L, r in test_cases: # Calculate the number of lamps needed n = (L + r) // (2 * r) pos = [(i * 2 * r) + r for i in range(n)] if pos[-1] + r < L: n += 1 pos.append(L) results.append((n, pos)) return results"},{"question":"Amanda loves painting. She has a sequence of canvases arranged in a row, and each canvas has a certain height. Amanda can paint a contiguous segment of the canvases and increase their heights to the same level. Given the heights of the canvases, determine the minimum value of the highest height Amanda can achieve across all the canvases by performing exactly one such painting operation. For example, consider the following sequence of canvas heights: - [1, 3, 2, 1, 2] Amanda wants to perform one operation to increase the heights of a contiguous segment to the same value, resulting in the minimum possible value for the maximum height after the operation. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of canvases. - The second line contains n integers h1, h2, ... hn (1 ≤ hi ≤ 10^9) — the initial heights of the canvases. Output: - Print a single integer, the minimum value of the highest height after Amanda performs one painting operation. Example: Input: 5 1 3 2 1 2 Output: 3 Explanation: By painting the segment [3, 2, 1] to increase their heights to 3, the sequence becomes [3, 3, 3, 3, 2], and the highest height is 3. This is the minimum possible maximum height after one painting operation.","solution":"def min_max_height_after_painting(n, heights): def possible(max_height): Check if we can make the max height <= max_height by painting exactly one contiguous segment min_increase = [0] * n max_decrease = [0] * n min_increase[0] = heights[0] for i in range(1, n): min_increase[i] = max(min_increase[i-1], heights[i]) max_decrease[n-1] = heights[n-1] for i in range(n-2, -1, -1): max_decrease[i] = max(max_decrease[i+1], heights[i]) for i in range(n-1): if min(min_increase[i], max_decrease[i+1]) <= max_height: return True return min_increase[n-1] <= max_height left, right = max(heights), max(heights) + n while left < right: mid = (left + right) // 2 if possible(mid): right = mid else: left = mid + 1 return left"},{"question":"Dominic is studying a sequence of numbers and is particularly interested in identifying certain patterns within the sequence. He defines a \\"good subsequence\\" to be a contiguous subsequence of the original sequence such that every pair of distinct elements within the subsequence has a greatest common divisor (GCD) greater than 1. Your task is to write a program to determine the length of the longest \\"good subsequence\\" within a given sequence of integers. # Input - The first line contains an integer `n` (2 ≤ n ≤ 100000) — the length of the sequence. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 100000) — the elements of the sequence. # Output - Output a single integer — the length of the longest \\"good subsequence\\". # Example Input ``` 6 2 3 4 6 9 15 ``` Output ``` 3 ``` # Explanation In the example above, the longest \\"good subsequence\\" is `[4, 6, 12]` (or any other subsequence of three or more numbers that have GCD greater than 1 for any pair). The subsequence must be contiguous, so non-contiguous subsequences should not be considered. In this case, there isn\'t a longer subsequence meeting those criteria.","solution":"from math import gcd from collections import deque def longest_good_subsequence(n, arr): Function to determine the length of the longest \\"good subsequence\\". A good subsequence has a GCD of more than 1 for every pair of distinct elements within the subsequence. max_len = 1 for i in range(n): current_gcd = arr[i] current_len = 1 for j in range(i + 1, n): current_gcd = gcd(current_gcd, arr[j]) if current_gcd > 1: current_len += 1 max_len = max(max_len, current_len) else: break return max_len"},{"question":"You are part of a security team responsible for protecting a high-security facility. The facility is equipped with sensors placed along a perimeter fence. Each sensor has a specific range and can detect any movement within that distance. The facility uses these sensors to ensure there are no gaps in the security coverage. You are given the positions of the sensors along a 1-dimensional line and the range of each sensor. Your task is to determine if the entire length of the perimeter is covered by the sensors. You are given an integer `n` representing the number of sensors, and a list of tuples where each tuple contains two integers: the position of the sensor and its range. The perimeter fence spans from position 0 to position `L` (inclusive). Write a function `is_fence_covered(n: int, L: int, sensors: List[Tuple[int, int]]) -> bool` that returns `True` if the entire perimeter fence from 0 to L is covered, and `False` otherwise. # Input - An integer `n` (1 ≤ n ≤ 100) representing the number of sensors. - An integer `L` (1 ≤ L ≤ 1000) representing the length of the perimeter fence. - A list `sensors` of `n` tuples. Each tuple `(p, r)` contains: - an integer `p` (0 ≤ p ≤ L) representing the position of the sensor. - an integer `r` (1 ≤ r ≤ 100) representing the range of the sensor. # Output - Return `True` if the whole perimeter fence from 0 to L is covered by the sensors, otherwise return `False`. # Example ```python assert is_fence_covered(3, 10, [(1, 4), (5, 2), (8, 3)]) == True assert is_fence_covered(2, 5, [(0, 1), (5, 1)]) == False ``` # Explanation In the first example: - The first sensor at position 1 covers positions from -3 to 5. - The second sensor at position 5 covers positions from 3 to 7. - The third sensor at position 8 covers positions from 5 to 11. Since all positions from 0 to 10 are covered, the function returns `True`. In the second example: - The first sensor at position 0 covers positions from -1 to 1. - The second sensor at position 5 covers positions from 4 to 6. There is no sensor covering the positions from 1 to 4. Therefore, the function returns `False`.","solution":"from typing import List, Tuple def is_fence_covered(n: int, L: int, sensors: List[Tuple[int, int]]) -> bool: coverage = [False] * (L + 1) for p, r in sensors: start = max(p - r, 0) end = min(p + r, L) for i in range(start, end + 1): coverage[i] = True return all(coverage)"},{"question":"Implement a function that, given a list of intervals, merges all overlapping intervals and returns the merged list of intervals. An interval is represented as a tuple of two integers, where the first integer is the start of the interval and the second integer is the end. The function should handle an arbitrary number of intervals, including edge cases such as empty lists or intervals that do not overlap with any other. For example: If the input list is `[(1, 3), (2, 6), (8, 10), (15, 18)]`, the function should return `[(1, 6), (8, 10), (15, 18)]`. If the input list is `[(1, 4), (4, 5)]`, the function should return `[(1, 5)]`. If the input list is `[(1, 4)]`, the function should return `[(1, 4)]`. You may assume that the start of each interval is less than or equal to the end. Your code should have the following signature: ```python def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ```","solution":"from typing import List, Tuple def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: if not intervals: return [] # Sort intervals by the start time intervals.sort(key=lambda x: x[0]) merged_intervals = [intervals[0]] for current_start, current_end in intervals[1:]: last_merged_start, last_merged_end = merged_intervals[-1] if current_start <= last_merged_end: # Overlapping intervals merged_intervals[-1] = (last_merged_start, max(last_merged_end, current_end)) else: merged_intervals.append((current_start, current_end)) return merged_intervals"},{"question":"Bobby is fascinated by chain reactions and pyrolysis. He recently got a set of n chemical compounds labeled from 1 to n. Bobby knows that some pairs of compounds can react with each other and release energy. He wants to create a sequence of reactions that maximizes the total energy released. Each compound can only participate in one reaction. Each reaction between two compounds has a specific amount of energy associated with it. Bobby can select various pairs of compounds to react as long as each compound is used in only one reaction. Help Bobby determine the maximum total energy he can achieve given the set of reactions and their respective energy releases. The first line of the input consists of two integers n and m — the number of chemical compounds and the number of possible reactions (2 ≤ n ≤ 2·10^5, 1 ≤ m ≤ 2·10^5). The next m lines describe the possible reactions. Each line contains three integers u, v, and e — the compounds involved in the reaction and the energy released (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ e ≤ 10^4). Output one integer — the maximum total energy Bobby can release by creating the optimal sequence of reactions. Example: Input: 4 3 1 2 10 2 3 15 1 3 20 Output: 20","solution":"def maximum_energy(n, m, reactions): # Sort the reactions by energy in descending order reactions_sorted = sorted(reactions, key=lambda x: x[2], reverse=True) # Initialize a list to keep track of used compounds used_compounds = [False] * (n + 1) max_energy = 0 # Choose reactions with the highest energy while ensuring each compound is used only once for u, v, e in reactions_sorted: if not used_compounds[u] and not used_compounds[v]: max_energy += e used_compounds[u] = True used_compounds[v] = True return max_energy # Example Usage: n = 4 m = 3 reactions = [ (1, 2, 10), (2, 3, 15), (1, 3, 20) ] print(maximum_energy(n, m, reactions)) # Output: 20"},{"question":"A city is planning to install Wi-Fi routers at certain positions along a straight road. The positions of these routers on the road can be represented as distinct points on a straight line. The city wants to make sure that the minimum signal range required for each router is optimized such that it covers all given positions. The Wi-Fi signal from a router at point (p) can be considered as a segment that extends equally on both sides of (p). For instance, if the signal range of a router at point (p) is (d), it means that (p) can cover positions from (p-d) to (p+d). Given the positions of all the routers, your task is to determine the minimum signal range (d) such that every router\'s signal overlaps with at least one other router\'s signal or completely covers the gap between its neighboring routers, ensuring full coverage along the road where routers are installed. # Input - The first line of the input contains an integer (n) ((2 le n le 10^5)) - the number of routers. - The second line contains (n) integers (p_1, p_2, ldots, p_n) ((0 le p_i le 10^6)) - the positions of the routers. # Output - Output a single real number – the minimum signal range (d) required to ensure that the signals from the routers cover the entire road and overlap or touch each other. Your answer will be considered correct if its absolute or relative error does not exceed (10^{-6}). # Example Input ``` 4 1 3 7 10 ``` Output ``` 2.0 ``` # Explanation With a signal range of 2.0: - The router at 1 covers from -1 to 3. - The router at 3 covers from 1 to 5. - The router at 7 covers from 5 to 9. - The router at 10 covers from 8 to 12. Thus, all gaps between neighboring routers are covered.","solution":"def min_signal_range(n, positions): Returns the minimum signal range required to ensure that the signals from the routers cover the entire road and overlap or touch each other. :param n: Integer, the number of routers :param positions: List of integers, the positions of the routers :return: Float, the minimum signal range positions.sort() max_gap = max(positions[i+1] - positions[i] for i in range(n-1)) return max_gap / 2.0"},{"question":"You are given an integer n. Your task is to find two distinct permutations p and q of the numbers from 1 to n such that the sum of corresponding elements is the same for both permutations. Formally, find two permutations p and q such that: `p1 + q1 = p2 + q2 = ... = pn + qn = S` Where S is a constant. Input: - A single integer n (1 ≤ n ≤ 105), representing the length of the permutations. Output: - If such permutations exist, print \\"YES\\" on the first line. - On the second line, print the first permutation p in increasing order. - On the third line, print the second permutation q. If no such permutations exist, print \\"NO\\". Example input: 4 Example output: YES 1 2 3 4 4 3 2 1","solution":"def find_two_permutations(n): if n == 1: return \\"NO\\" p = list(range(1, n + 1)) q = list(range(n, 0, -1)) return \\"YESn\\" + \\" \\".join(map(str, p)) + \\"n\\" + \\" \\".join(map(str, q))"},{"question":"You are given a list of non-negative integers representing elevations of terrain. Imagine it rains and water can accumulate in the valleys formed by the elevations. Your task is to compute the total amount of water that can be trapped after it rains. The water held at any given position will be the difference between the minimum of the highest elevations to the left and right of that position, and the elevation at that position, as long as this difference is positive. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of elevations. The second line contains a sequence of n non-negative integers h1, h2, ..., hn (0 ≤ hi ≤ 100,000), representing the elevations. Print the total amount of water that can be trapped. For example, if the input elevations are [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1], the total amount of water trapped is 6. Explanation: - At index 2, the elevation is 0. The maximum heights on the left and right are 1 and 3 respectively. Hence, the water trapped at index 2 is min(1, 3) - 0 = 1 unit. - At index 4, the elevation is 1. The maximum heights on the left and right are 2 and 3 respectively. Hence, the water trapped at index 4 is min(2, 3) - 1 = 1 unit. - At index 5, the elevation is 0. The maximum heights on the left and right are 2 and 3 respectively. Hence, the water trapped at index 5 is min(2, 3) - 0 = 2 units. - At index 6, the elevation is 1. The maximum heights on the left and right are 2 and 3 respectively. Hence, the water trapped at index 6 is min(2, 3) - 1 = 1 unit. - At index 9, the elevation is 1. The maximum heights on the left and right are 2 and 2 respectively. Hence, the water trapped at index 9 is min(2, 2) - 1 = 1 unit. Summing these up, the total amount of water trapped is 1 + 1 + 2 + 1 + 1 = 6 units.","solution":"def trap_rain_water(elevations): Calculate the total amount of trapped water given the elevations. :param elevations: List of non-negative integers representing elevations. :return: Total amount of water trapped after it rains. if not elevations: return 0 n = len(elevations) left_max = [0] * n right_max = [0] * n left_max[0] = elevations[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], elevations[i]) right_max[n - 1] = elevations[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], elevations[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - elevations[i] return trapped_water"},{"question":"You are given an array a consisting of n integers. You need to answer q queries on this array. Each query asks whether the range from index l to index r (inclusive) is a valid arithmetic progression subsequence. An arithmetic progression is a sequence of numbers such that the difference between any two consecutive terms is constant. The first line contains two integers n and q (1 le n le 10^5, 1 le q le 10^4) — the size of the array and the number of queries, respectively. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. Each of the next q lines contains two integers l and r (1 le l le r le n) — the descriptions of the queries. For each query, print \\"Yes\\" if the range from index l to index r in the array is an arithmetic progression subsequence, otherwise print \\"No\\". **Example** ``` Input: 6 3 1 3 5 7 9 11 1 3 1 6 2 5 Output: Yes Yes No ``` **Explanation** - For the first query, the subsequence [1, 3, 5] is an arithmetic progression with difference 2. - For the second query, the subsequence [1, 3, 5, 7, 9, 11] is an arithmetic progression with difference 2. - For the third query, the subsequence [3, 5, 7, 9] is not an arithmetic progression as the differences are not consistent.","solution":"def is_arithmetic_subsequence(arr, l, r): Checks if the subarray from l to r (inclusive) forms a valid arithmetic progression. subarray = arr[l-1:r] if len(subarray) < 2: return True common_diff = subarray[1] - subarray[0] for i in range(2, len(subarray)): if subarray[i] - subarray[i-1] != common_diff: return False return True def process_queries(n, q, arr, queries): Processes a list of queries on the array to determine if each subarray is an arithmetic progression. results = [] for l, r in queries: if is_arithmetic_subsequence(arr, l, r): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Implement a function `network_rank(n, roads)` that calculates the maximal network rank between any two cities in a network of `n` cities. The network rank of any two cities is defined as the total number of directly connected roads to both cities, if the two cities are directly connected by a road, that road is counted only once. # Function Signature: ```python def network_rank(n: int, roads: List[Tuple[int, int]]) -> int: pass ``` # Input: - `n` : An integer `n` (2 <= n <= 100) representing the number of cities. - `roads` : A list of tuples, where each tuple `(a, b)` represents a road connecting city `a` and city `b` (1 <= a, b <= n). There can be multiple roads between the same pairs of cities. # Output: - Return an integer representing the maximal network rank between any two cities. # Example: ```python print(network_rank(4, [(1, 2), (2, 3), (3, 4), (4, 1)])) # Output: 4 print(network_rank(5, [(1, 2), (1, 3), (1, 4), (1, 5)])) # Output: 4 print(network_rank(3, [(1, 2), (2, 3)])) # Output: 2 ``` # Explanation: 1. In the first example, cities `1` and `3` each have a degree of 2, and all 4 roads are included between the pair (one from `1-2`, one `1-4`, and two `2-3`,`3-4`). 2. In the second example, city `1` is a hub with 4 roads, and any pair involving city `1` will have 4 roads. 3. In the third example, the highest network rank is between cities `1` and `2`, or `2` and `3` which gives 2.","solution":"from typing import List, Tuple def network_rank(n: int, roads: List[Tuple[int, int]]) -> int: from collections import defaultdict # Dictionary to store the count of roads for each city road_count = defaultdict(int) # Dictionary to store a set of connected cities for each city connections = defaultdict(set) # Count the roads and store connections for road in roads: city_a, city_b = road road_count[city_a] += 1 road_count[city_b] += 1 connections[city_a].add(city_b) connections[city_b].add(city_a) max_rank = 0 # Iterate over all pairs of cities and calculate the network rank for i in range(1, n + 1): for j in range(i + 1, n + 1): rank = road_count[i] + road_count[j] if j in connections[i]: rank -= 1 max_rank = max(max_rank, rank) return max_rank"},{"question":"You are given a list of exchanges in a currency trading system between various currencies. Each exchange transaction consists of an ordered pair of currencies and a corresponding floating-point value that indicates the exchange rate from the first currency to the second one. Your task is to determine if there exists a sequence of exchanges starting and ending with the same currency such that the product of the exchange rates of the sequence is greater than 1, indicating an arbitrage opportunity. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of exchanges. - The following `n` lines each contain a string `currency1`, a string `currency2`, and a floating-point number `rate` (0 < rate ≤ 10), representing an exchange rate from `currency1` to `currency2`. # Output - Print \\"YES\\" if there is an arbitrage opportunity. Otherwise, print \\"NO\\". # Example Input ``` 4 USD EUR 0.9 EUR GBP 0.8 GBP USD 1.5 JPY USD 0.01 ``` Output ``` YES ``` # Note In the example above, you can perform exchanges in the sequence: USD → EUR → GBP → USD. The product of their exchange rates is 0.9 * 0.8 * 1.5 = 1.08, which is greater than 1, indicating an arbitrage opportunity.","solution":"import math def detect_arbitrage(n, exchanges): # Build the graph with log-transformed inverse weights graph = {} vertices = set() for exchange in exchanges: currency1, currency2, rate = exchange vertices.add(currency1) vertices.add(currency2) if currency1 not in graph: graph[currency1] = [] graph[currency1].append((math.log(rate) * -1, currency2)) # This function implements the Bellman-Ford algorithm def bellman_ford(start_vertex): # Initialize distances from start_vertex distance = {v: float(\'inf\') for v in vertices} distance[start_vertex] = 0 # Relax edges up to |V| - 1 times for _ in range(len(vertices) - 1): for u in graph: for weight, v in graph[u]: if distance[u] != float(\'inf\') and distance[u] + weight < distance[v]: distance[v] = distance[u] + weight # Check for negative weight cycle for u in graph: for weight, v in graph[u]: if distance[u] != float(\'inf\') and distance[u] + weight < distance[v]: return True return False # Check for arbitrage starting from every vertex for vertex in vertices: if bellman_ford(vertex): return \\"YES\\" return \\"NO\\""},{"question":"# Binary Tree Level Order Traversal You are given a binary tree. Your task is to perform a level order traversal. In a level order traversal, nodes are visited level by level from left to right. Given the root of a binary tree, return the level order traversal of its nodes\' values. # Input - The input consists of multiple lines. - The first line contains the integer n (1 leq n leq 10^4), denoting the number of nodes in the tree. - The following lines contain pairs of integers representing the nodes and its left and right children in the tree. For each node listed, if a child is not present, it is represented by -1. - The node values and child values are guaranteed to be unique positive integers. # Output - Print the level order traversal of the binary tree in a single line. # Example ```plaintext Input: 5 1 2 3 2 4 -1 3 -1 5 4 -1 -1 5 -1 -1 Output: 1 2 3 4 5 ``` # Explanation - The binary tree in the example looks like this: ``` 1 / 2 3 / 4 5 ``` - The level order traversal visits nodes level-by-level from left to right: 1, 2, 3, 4, 5.","solution":"import collections class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(node_info): nodes = {} for parent_val, left_val, right_val in node_info: if parent_val not in nodes: nodes[parent_val] = TreeNode(parent_val) parent = nodes[parent_val] if left_val != -1: if left_val not in nodes: nodes[left_val] = TreeNode(left_val) parent.left = nodes[left_val] if right_val != -1: if right_val not in nodes: nodes[right_val] = TreeNode(right_val) parent.right = nodes[right_val] return nodes[node_info[0][0]] def level_order_traversal(root): if not root: return [] result = [] queue = collections.deque([root]) while queue: node = queue.popleft() result.append(node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result def main(input_data): lines = input_data.strip().split(\'n\') n = int(lines[0]) node_info = [tuple(map(int, line.split())) for line in lines[1:]] root = build_tree(node_info) result = level_order_traversal(root) print(\' \'.join(map(str, result)))"},{"question":"A treasure hunter has recently discovered an ancient map in TreasureLand. The map indicates the location of several hidden treasures. The locations are represented as points on a 2D grid. To maximize the efficiency of finding treasures, the hunter wants to know the maximum number of treasures he can collect keeping in mind he can only travel in a straight line, either horizontally or vertically. You are given an integer n (1 ≤ n ≤ 50,000) representing the number of treasures on the grid. Each of the next n lines contains two integers x and y (0 ≤ x, y ≤ 10^9), representing the coordinates of the treasures. Your task is to write a program to determine the maximum number of treasures the hunter can collect by traveling in a straight line either horizontally or vertically. The input starts with a single integer n, the number of treasures. The next n lines each contain two integers x and y, representing the coordinates of each treasure. Output a single integer, the maximum number of treasures that the hunter can collect by traveling in a straight line either horizontally or vertically. Example: Input: 5 1 1 2 1 3 1 1 2 3 2 Output: 3 Explanation: The maximum number of treasures that can be collected is 3 if the hunter travels horizontally along y=1 (1,1), (2,1), (3,1).","solution":"def max_treasures(n, treasure_coordinates): Returns the maximum number of treasures that can be collected by traveling in a straight line either horizontally or vertically. :param n: Number of treasures :param treasure_coordinates: List of tuples representing the coordinates (x, y) of the treasures :return: Maximum number of treasures that can be collected in a straight line from collections import defaultdict x_count = defaultdict(int) y_count = defaultdict(int) for x, y in treasure_coordinates: x_count[x] += 1 y_count[y] += 1 max_x_count = max(x_count.values(), default=0) max_y_count = max(y_count.values(), default=0) return max(max_x_count, max_y_count) # Example usage: # treasures = [(1, 1), (2, 1), (3, 1), (1, 2), (3, 2)] # print(max_treasures(5, treasures)) # Output: 3"},{"question":"You are given an array of integers representing the heights of students in a line. The students wish to rearrange themselves such that each student can clearly see the chalkboard. A student can only see the chalkboard if the height of all the students in front of them is shorter. To achieve this, you need to make the line non-decreasing by removing the fewest possible number of students. Write a function that takes an array of integers `heights` representing the students\' heights and returns the minimum number of students that need to be removed to make the heights array non-decreasing. Function Signature: ```python def min_removals_to_non_decreasing(heights: List[int]) -> int: ``` # Input - An array `heights`, where `1 ≤ len(heights) ≤ 1000` and `1 ≤ heights[i] ≤ 1000`. # Output - An integer representing the minimum number of students that need to be removed. # Example ```python assert min_removals_to_non_decreasing([4, 3, 2, 6, 7]) == 2 assert min_removals_to_non_decreasing([1, 2, 3, 4, 5]) == 0 assert min_removals_to_non_decreasing([5, 6, 3, 8, 9, 4]) == 2 ``` # Explanation In the first example, removing the students with heights 4 and 2 will result in the sequence [3, 6, 7], which is non-decreasing. In the second example, the sequence is already non-decreasing, so no students need to be removed. In the third example, removing the students with heights 6 and 4 will result in the sequence [5, 3, 8, 9], which is non-decreasing.","solution":"from typing import List def min_removals_to_non_decreasing(heights: List[int]) -> int: Returns the minimum number of students that need to be removed to make the heights array non-decreasing. n = len(heights) # Initialize the LIS (Longest Increasing Subsequence) array lis = [1] * n # Compute the LIS values for i in range(1, n): for j in range(i): if heights[i] >= heights[j]: lis[i] = max(lis[i], lis[j] + 1) # The minimum number of removals is the total number of students minus the length of the LIS longest_increasing_subsequence_length = max(lis) return n - longest_increasing_subsequence_length"},{"question":"You are given a list of `n` unique integers. You need to find the smallest positive integer that is missing from this list. The missing integer should be greater than zero, and if all integers from 1 to `n` are present, the answer should be `n+1`. The first line of the input contains an integer `T` (1 ≤ T ≤ 100), the number of test cases. For each test case, the first line contains an integer `n` (1 ≤ n ≤ 10^5), the size of the list. The second line contains `n` space-separated integers, the elements of the list. Each element is an integer in the range from 1 to 10^9, inclusive. Output `T` lines. Each line should contain the smallest positive integer that is missing from the corresponding list. # Example Input ``` 3 5 1 2 3 4 5 5 1 3 2 6 5 3 3 4 4 ``` Output ``` 6 4 1 ``` # Explanation **Test Case 1:** The integers from 1 to 5 are all present, so the smallest missing positive integer is 6. **Test Case 2:** The integers 1, 2, and 3 are present, but 4 is missing. Hence, the smallest missing positive integer is 4. **Test Case 3:** The integers 1 and 2 are missing. The smallest missing positive integer is 1.","solution":"def find_smallest_missing_positive(t, test_cases): results = [] for n, nums in test_cases: num_set = set(nums) smallest_missing = 1 while smallest_missing in num_set: smallest_missing += 1 results.append(smallest_missing) return results"},{"question":"You are given two integers, n and k (1 ≤ n ≤ 10^4, 0 ≤ k ≤ n). Your task is to find the number of unique ways to select k items from a collection of n distinct items. The input is a single line containing two integers n and k as described. The output should be a single integer representing the number of unique combinations. For example: - Input: 5 2 - Output: 10 Hint: Consider using combinatorial methods or Pascal\'s triangle to solve this efficiently.","solution":"from math import comb def unique_combinations(n, k): Returns the number of unique ways to select k items from n distinct items. return comb(n, k) # Example n = 5 k = 2 print(unique_combinations(n, k)) # Output: 10"},{"question":"Maya is trying to organize a coding competition. Each participant has a unique registration ID represented as an integer. Maya wants to divide the participants into groups based on their registration IDs such that each group has a specific property. A group of participants is \\"balanced\\" if the sum of the digits of all registration IDs in the group is the same. Maya needs to know the maximum number of balanced groups she can form from the list of registration IDs. You are given a list of registration IDs. Determine the maximum number of balanced groups that can be formed. The first line contains one integer n (1 ≤ n ≤ 10^5) which is the number of participants. The next line contains n integers ri which are the registration IDs of the participants (1 ≤ ri ≤ 10^9). Print a single number — the maximum number of balanced groups that can be formed. For example, given the input: ``` 5 123 456 231 321 654 ``` The output should be: ``` 3 ``` Explanation: The balanced groups are (123, 231, 321) with sum of digits 6, and (456, 654) with sum of digits 15. Hence, two balanced groups can be formed, and the third group can be formed with any single participant.","solution":"from collections import defaultdict def max_balanced_groups(participants): Determine the maximum number of balanced groups that can be formed based on the sum of digits of registration IDs. Args: participants (list of int): List of registration IDs. Returns: int: The maximum number of balanced groups. def sum_of_digits(num): Returns the sum of digits of a given number. return sum(int(digit) for digit in str(num)) # Dictionary to count occurrences of each sum of digits count_by_sum = defaultdict(int) for participant in participants: digit_sum = sum_of_digits(participant) count_by_sum[digit_sum] += 1 # The maximum number of balanced groups is the sum of the counts of unique sum of digits return sum(count_by_sum.values())"},{"question":"In a research lab, scientists are working on a new experiment that involves monitoring the behavior of a group of robotic ants. Each ant is programmed to move in a predetermined sequence on a 2D grid. Given the initial positions of the ants and their movement sequences, can you determine the final positions they occupy on the grid? The grid is an infinite 2D plane, and each ant\'s movement sequence is provided as a string consisting of characters \'U\', \'D\', \'L\', \'R\' which represent moves Up, Down, Left, and Right, respectively. You are given the initial positions and movement sequences for multiple ants. Write a program to calculate and print the final positions of each ant after it completes its sequence. # Input - The first line contains an integer ( t ) (1 ≤ ( t ) ≤ 100), the number of ants. - The next ( t ) lines each contain the initial position and movement sequence for each ant in the following format: - Two integers ( x_i ) and ( y_i ) (absolute values ≤ ( 10^9 )), the initial coordinates of the ( i )-th ant. - A string ( s_i ) (1 ≤ (|s_i|) ≤ ( 1000 )), the movement sequence of the ( i )-th ant. # Output - ( t ) lines, each containing two space-separated integers ( x_f ) and ( y_f ), the final coordinates of each ant. # Example Input ``` 3 0 0 UDLR 1 1 UUDD -2 -3 LLRR ``` Output ``` 0 0 1 1 -2 -3 ```","solution":"def final_positions(t, ants): results = [] for i in range(t): x, y, sequence = ants[i] for move in sequence: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 results.append((x, y)) return results"},{"question":"You are given an array of integers. Two players, Alice and Bob, play a game where they take turns selecting and removing exactly one element from the array. Alice always goes first. The player who is forced to take the last element loses the game. Both players play optimally. Given the initial state of the array, determine the winner of the game if both players play perfectly. Input Format: - The first line contains a single integer n (1 le n le 10^5) — the number of elements in the array. - The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. Output Format: - Output \\"Alice\\" if Alice has a winning strategy and will win the game if both play optimally. Otherwise, output \\"Bob\\". Example: Input: 5 1 2 3 4 5 Output: Alice Note: In the given example, Alice can win by always ensuring she leaves an even number of elements for Bob to choose from. By removing elements in such a way, she forces Bob to ultimately take the last element.","solution":"def determine_winner(n, arr): Determines who will win the game given n and the list of integers arr. Parameters: n (int): The number of elements in the array. arr (list): The list of integers in the array. Returns: str: \\"Alice\\" if Alice wins, otherwise \\"Bob\\". if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"You are given an array of n non-negative integers a0, a1, ..., an-1. There are two types of operations you need to handle with this array: 1. **Update Operation (upd i v)**: Update the element at index i with value v. 2. **Query Operation (qry l r)**: Calculate the number of elements within the subarray from index l to r (inclusive) that are greater than a specified integer k. Write a program to process the given sequence of operations. Input Format: - The first line of the input contains two integers n and q (1 ≤ n, q ≤ 200000) where n is the number of elements in the array, and q is the number of operations. - The second line contains n non-negative integers (0 ≤ ai ≤ 10^6), representing the initial state of the array. - Each of the next q lines contains one operation: - An update operation is given as \\"upd i v\\" (0 ≤ i < n, 0 ≤ v ≤ 10^6). - A query operation is given as \\"qry l r k\\" (0 ≤ l ≤ r < n, 0 ≤ k ≤ 10^6). Output: For each query operation, output the number of elements greater than k in the specified subarray. # Example Input: ``` 5 4 1 2 3 4 5 qry 1 3 2 upd 2 6 qry 1 4 3 qry 0 4 4 ``` Output: ``` 2 3 2 ``` Explanation: - The initial array is [1, 2, 3, 4, 5]. - The first query asks for the number of elements greater than 2 between indices 1 and 3, inclusive. Elements are [2, 3, 4], so the result is 2. - The update operation changes the element at index 2 to 6, resulting in the array [1, 2, 6, 4, 5]. - The second query asks for the number of elements greater than 3 between indices 1 and 4, inclusive. Elements are [2, 6, 4, 5], so the result is 3. - The third query asks for the number of elements greater than 4 between indices 0 and 4, inclusive. Elements are [1, 2, 6, 4, 5], so the result is 2.","solution":"class ArrayOperations: def __init__(self, arr): self.arr = arr def update(self, i, v): self.arr[i] = v def query(self, l, r, k): return sum(1 for x in self.arr[l:r+1] if x > k) def process_operations(n, q, arr, operations): array_ops = ArrayOperations(arr) results = [] for op in operations: parts = op.split() if parts[0] == \\"upd\\": i, v = int(parts[1]), int(parts[2]) array_ops.update(i, v) elif parts[0] == \\"qry\\": l, r, k = int(parts[1]), int(parts[2]), int(parts[3]) result = array_ops.query(l, r, k) results.append(result) return results"},{"question":"A social network has N users numbered from 1 to N. Users can become friends with each other. Each friendship can be represented as a bidirectional link between two users. The social network initially has no friendships. Your task is to implement the functionalities of adding a friendship and finding out if there is a way to indirectly connect two users through mutual friends. Implement a class `SocialNetwork` that supports the following methods: 1. `add_friendship(user1, user2)`: This method takes two integers, `user1` and `user2`, and establishes a friendship between these users. 2. `are_connected(user1, user2)`: This method takes two integers, `user1` and `user2`, and returns `True` if user1 and user2 are connected, either directly or indirectly through other users. Otherwise, it returns `False`. **Constraints:** - 1 <= N <= 100,000 - 1 <= user1, user2 <= N - No pair of users has more than one friendship between them. - There can be up to 200,000 calls to the `add_friendship` and `are_connected` methods combined. Provide the implementation for the `SocialNetwork` class, ensuring that each operation runs efficiently to handle the upper constraint limits. Implement any necessary helper methods within the class to manage the data and operations effectively.","solution":"class SocialNetwork: def __init__(self, n): self.n = n self.parent = list(range(n + 1)) self.rank = [1] * (n + 1) def find(self, user): if self.parent[user] != user: self.parent[user] = self.find(self.parent[user]) return self.parent[user] def union(self, user1, user2): root1 = self.find(user1) root2 = self.find(user2) if root1 != root2: if self.rank[root1] > self.rank[root2]: self.parent[root2] = root1 elif self.rank[root1] < self.rank[root2]: self.parent[root1] = root2 else: self.parent[root2] = root1 self.rank[root1] += 1 def add_friendship(self, user1, user2): self.union(user1, user2) def are_connected(self, user1, user2): return self.find(user1) == self.find(user2)"},{"question":"You are given a list of n integers. Your task is to find two distinct indices i and j such that the sum of the elements at these indices equals a given integer k. Print indices i and j. If there are multiple solutions, print any of them. If no solution exists, print -1 -1. The first line contains two integers n (1 ≤ n ≤ 2·105) and k (−109 ≤ k ≤ 109). The second line contains n integers a1, a2, ..., an (−109 ≤ ai ≤ 109). Print two distinct indices i and j such that ai + aj = k. If there are multiple answers, print any of them. If no answer exists, print -1 -1. Example: ``` Input: 4 5 1 2 3 4 Output: 1 4 Input: 4 8 2 2 2 2 Output: -1 -1 ```","solution":"def find_indices(n, k, arr): Finds two distinct indices i and j such that arr[i] + arr[j] equals k. If multiple solutions exist, any one of them is returned. If no solution exists, returns (-1, -1). :param n: Number of elements in the list :param k: Target sum :param arr: List of integers :return: A tuple containing indices i and j (1-based). If no solution, returns (-1, -1). value_to_index = {} for i in range(n): complement = k - arr[i] if complement in value_to_index: return value_to_index[complement] + 1, i + 1 value_to_index[arr[i]] = i return -1, -1"},{"question":"A rectangular garden has n rows and m columns of plants (rows are numbered from 1 to n and columns are numbered from 1 to m). Each plant needs to be watered exactly once. A gardener can start watering from any plant in the garden. The gardener can move from the plant in cell (x, y) to any adjacent cell sharing a side (vertically or horizontally). However, the gardener cannot move diagonally. Given the number of rows n and columns m, and initial position of the gardener (S_x, S_y), find a path such that the gardener waters all plants exactly once and the total number of steps taken is minimized. If multiple shortest paths exist, any one of them is acceptable. Your task is to find and print a sequence of the cells (x_1, y_1), (x_2, y_2), ldots, (x_{nm}, y_{nm}) that denote the path followed by the gardener, starting at (S_x, S_y) and finishing after having watered all plants in the garden. The only line of input contains four integers n, m, S_x, and S_y (1 leq n, m leq 1000, 1 leq S_x leq n, 1 leq S_y leq m). Print exactly nm lines, each containing two integers x_i and y_i (1 le x_i le n, 1 le y_i le m), denoting the coordinates of the cells visited in order. Ensure that cells are visited exactly once. For example, given the inputs: ``` 3 3 2 2 ``` One possible output could be: ``` 2 2 2 1 2 3 1 3 3 3 3 2 3 1 1 1 1 2 ```","solution":"def water_garden(n, m, S_x, S_y): path = [] visited = [[False] * m for _ in range(n)] x, y = S_x - 1, S_y - 1 # Convert to 0-based index path.append((x + 1, y + 1)) visited[x][y] = True for j in range(m): # Determine the direction of row traversal based on current column if j % 2 == 0: # left to right for i in range(n): if not visited[i][j]: path.append((i + 1, j + 1)) visited[i][j] = True else: # right to left for i in range(n - 1, -1, -1): if not visited[i][j]: path.append((i + 1, j + 1)) visited[i][j] = True return path # Example Usage # n, m, S_x, S_y = 3, 3, 2, 2 # path = water_garden(n, m, S_x, S_y) # for (x, y) in path: # print(x, y)"},{"question":"You are given an array of integers, where each integer represents the height of a building in a city skyline. A building is defined by a pair of integers (left, right) where `left` is the x-coordinate of the left edge of the building and `right` is the x-coordinate of the right edge of the building. Each building can be represented as a triplet (Li, Ri, Hi) where Li is the left x-coordinate, Ri is the right x-coordinate, and Hi is the height of the building. Your task is to generate the skyline formed by these buildings when viewed from a distance. The skyline is a list of critical points in the format (x, h) where x is the x-coordinate of a critical point and h is the height at this point. The critical points are the points where there is a change in height from the skyline perspective. For example, given the buildings [[2, 9, 10], [3, 7, 15], [5, 12, 12], [15, 20, 10], [19, 24, 8]], the skyline should be represented as [[2, 10], [3, 15], [7, 12], [12, 0], [15, 10], [20, 8], [24, 0]]. Implement the function `getSkyline(buildings: List[List[int]]) -> List[List[int]]` that takes a list of buildings and returns the skyline as described above. Example: ``` Input: buildings = [[2, 9, 10], [3, 7, 15], [5, 12, 12], [15, 20, 10], [19, 24, 8]] Output: [[2, 10], [3, 15], [7, 12], [12, 0], [15, 10], [20, 8], [24, 0]] ``` Constraints: - 1 <= buildings.length <= 10^4 - 0 <= Li < Ri <= 2 * 10^4 - 1 <= Hi <= 10^4","solution":"from typing import List import heapq def getSkyline(buildings: List[List[int]]) -> List[List[int]]: Returns the skyline formed by the buildings. events = [] for (l, r, h) in buildings: events.append((l, -h, r)) # start of building events.append((r, 0, 0)) # end of building events.sort() res = [[0, 0]] heap = [(0, float(\'inf\'))] # (neg_height, end_time) for x, neg_h, r in events: while heap and heap[0][1] <= x: heapq.heappop(heap) if neg_h: heapq.heappush(heap, (neg_h, r)) if res[-1][1] != -heap[0][0]: res.append([x, -heap[0][0]]) return res[1:]"},{"question":"You are given a string `s` consisting of lowercase English letters. You need to determine the minimum number of characters you need to insert into the string to make it a palindrome. A string is a palindrome if it reads the same backward as forward. For example, `abba` and `racecar` are palindromes, but `abca` is not. The first line contains a single integer `n`, the length of the string `s` (1 le n le 2000). The second line contains the string `s`. Output the minimum number of characters needed to be inserted to make the string a palindrome.","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of characters needed to be inserted to make the string a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] # Build the table dp in bottom-up manner for l in range(2, n+1): # l is the length of the substring for i in range(n-l+1): j = i+l-1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] else: dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1 return dp[0][n-1]"},{"question":"You are given a grid consisting of n rows and m columns (1 leq n, m leq 1000). Each cell in the grid either contains a **0** or a **1**. Your task is to count the number of unique islands in the grid. An island is defined as a group of connected **1s** (cells containing 1). Two cells are connected if they share a side (i.e., are adjacent either horizontally or vertically). Two islands are considered unique if they have different shapes, even if they appear the same when rotated or mirrored. **Input:** - The first line contains the integers n and m. - The next n lines each contain m space-separated integers representing the cells of the grid. **Output:** - Print a single integer, the number of unique islands in the grid. **Examples:** Input: ``` 4 5 1 1 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 0 0 0 ``` Output: ``` 2 ``` Input: ``` 3 3 1 1 1 1 0 1 1 1 1 ``` Output: ``` 1 ``` **Notes:** - In the first example, there are two unique islands. The first island consists of the **1s** in the upper left and lower left corners, which have the same shape. The second unique island consists of the **1s** in the upper right corner. - In the second example, there is only one island which encompasses the entire grid, thus only one unique island.","solution":"def find_unique_islands(grid): Returns the number of unique islands in the grid. n = len(grid) m = len(grid[0]) def dfs(x, y, base_x, base_y, island): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0: return grid[x][y] = 0 # Mark as visited island.append((x - base_x, y - base_y)) for direction in [(0, 1), (1, 0), (0, -1), (-1, 0)]: dfs(x + direction[0], y + direction[1], base_x, base_y, island) unique_islands = set() for i in range(n): for j in range(m): if grid[i][j] == 1: new_island = [] dfs(i, j, i, j, new_island) unique_islands.add(tuple(new_island)) return len(unique_islands) def count_unique_islands(n, m, grid): Wrapper function to handle input and output Returns the number of unique islands return find_unique_islands(grid)"},{"question":"John is participating in a coding contest. He needs to solve a problem that involves sorting arrays, but with a twist. Specifically, John needs to handle multiple queries on the array, where each query asks for the sum of the smallest k elements after sorting the array. John is given an array of integers, and he needs to process several queries. For each query, he has to sort the array and then find the sum of the smallest k elements. You are given: - An integer n, the number of elements in the array. - An integer q, the number of queries. - An array of n integers. - q queries, each containing a single integer k. Write a function that processes each query and returns the sum of the smallest k elements for each query. # Input - The first line contains two integers n and q (1 le n, q le 10^5) — the number of elements in the array and the number of queries. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. - The next q lines each contain a single integer k (1 le k le n) — the number of smallest elements to sum for each query. # Output - For each query, output a single integer, the sum of the smallest k elements in the array. # Note - Each query should be processed independently of others. Sequence of operations such as selection and summation should not impact the result of the following queries. # Example Input: ``` 5 3 3 1 4 1 5 1 2 3 ``` Output: ``` 1 2 5 ``` # Explanation In the first query, the smallest element is 1. In the second query, sum of the two smallest elements (1 and 1) is 2. In the third query, sum of the three smallest elements (1, 1, and 3) is 5.","solution":"def sum_of_smallest_elements(n, q, elements, queries): Returns the sum of the smallest k elements after sorting the array for each query. :param n: The number of elements in the array. :param q: The number of queries. :param elements: A list of n integers representing the array elements. :param queries: A list of q integers representing the queries. :return: A list of integers where each integer is the result of a query. elements.sort() prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + elements[i - 1] result = [] for k in queries: result.append(prefix_sums[k]) return result"},{"question":"Anna and Bob are playing a game where they take turns to operate on an array of integers. They start with an array of length `n` consisting of integers from `1` to `n` in any order. The rules of the game are as follows: 1. On Anna\'s turn, she selects the smallest integer in the array and removes it. 2. On Bob\'s turn, he selects the largest integer in the array and removes it. Anna always goes first. The game ends when there are no more integers left in the array. You are given an array as input. Your task is to determine the order in which the integers are removed from the array and print this order in a single line, separated by spaces. # Input - The first line contains a single integer `n` (1 leq n leq 10^5), the length of the array. - The second line contains `n` distinct integers between `1` and `n`, representing the elements of the array. # Output - Output the order in which the integers are removed from the array, starting with Anna\'s first move, then Bob\'s move, and so forth. # Example Input ``` 5 3 1 4 5 2 ``` Output ``` 1 5 2 4 3 ``` # Note In this example, the sequence of moves is as follows: 1. Anna removes the smallest integer, which is `1`. 2. Bob removes the largest integer, which is `5`. 3. Anna removes the smallest remaining integer, which is `2`. 4. Bob removes the largest remaining integer, which is `4`. 5. Finally, Anna removes the last remaining integer, which is `3`.","solution":"def game_move_order(n, arr): Determines the order in which integers are removed from the array according to the rules of the game. Parameters: n (int): The length of the array. arr (list of int): The input array. Returns: list of int: The order in which the integers are removed. result = [] arr.sort() left = 0 right = n - 1 turn = 0 # 0 for Anna\'s turn, 1 for Bob\'s turn while left <= right: if turn == 0: # Anna\'s turn result.append(arr[left]) left += 1 else: # Bob\'s turn result.append(arr[right]) right -= 1 turn = 1 - turn # Alternate turns return result"},{"question":"A tree is a connected undirected graph with no cycles. You are given a tree with n nodes, where each node is assigned an integer ranging from 1 to 200000. Your task is to find the most frequently appearing integer in each subtree of the tree. The subtree of a node u is the tree consisting of node u and all its descendants. # Input - The first line contains an integer n (1 le n le 200000) — the number of nodes in the tree. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 200000) — the values assigned to each node. - Each of the next n-1 lines contains two integers u and v (1 le u, v le n) indicating that there is an edge between nodes u and v. # Output Print n integers. The i-th integer should be the most frequently appearing integer in the subtree of node i. If there are multiple integers that appear most frequently, print the smallest one. # Example Input ``` 5 3 5 3 2 3 1 2 1 3 3 4 3 5 ``` Output ``` 3 5 3 2 3 ``` - The subtree of node 1 contains nodes {1, 2, 3, 4, 5} with values {3, 5, 3, 2, 3}. The most frequent value is 3. - The subtree of node 2 contains only node 2 with value 5. - The subtree of node 3 contains nodes {3, 4, 5} with values {3, 2, 3}. The most frequent value is 3. - The subtree of node 4 contains only node 4 with value 2. - The subtree of node 5 contains only node 5 with value 3.","solution":"from collections import defaultdict, Counter def most_frequent_in_subtree(n, values, edges): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) result = [0] * (n + 1) value_count = [Counter() for _ in range(n + 1)] visited = [False] * (n + 1) def dfs(node): visited[node] = True value_count[node][values[node - 1]] += 1 for neighbor in tree[node]: if not visited[neighbor]: dfs(neighbor) for val, cnt in value_count[neighbor].items(): value_count[node][val] += cnt most_freq_value = min(value_count[node].items(), key=lambda x: (-x[1], x[0])) result[node] = most_freq_value[0] dfs(1) return result[1:] # Example usage: n = 5 values = [3, 5, 3, 2, 3] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] result = most_frequent_in_subtree(n, values, edges) print(result) # Output should be: [3, 5, 3, 2, 3]"},{"question":"A special power grid system of n nodes (power plants) connected by m edges (power lines) is under investigation. Each power line either conveys energy (denoted by \'E\') or is being repaired (denoted by \'R\'). The power stations need at least one line where energy can flow (\'E\') directly or indirectly (via other nodes connected by \'E\') to remain operational. You are given an integer n representing the number of power stations and an integer m representing the number of power lines. Following this, you are given m lines, each containing two integers u and v (1 ≤ u, v ≤ n) and a character representing the type of the line (\'E\' or \'R\'). Determine the minimum number of additional \'E\' type edges required to ensure every node can receive energy. # Input: The first line contains two integers, n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 2000). The following m lines each contain two integers u, v and a character representing the type of line (\'E\' or \'R\'). # Output: Print the minimum number of additional \'E\' type edges required. If it is impossible for every node to receive energy, print -1. # Example: Input: 4 2 1 2 E 3 4 R Output: 2 Explanation: Nodes 2 and 4 cannot receive energy without additional edges. One possible solution is to connect node 1 to node 3 with an \'E\' and node 2 to node 4 with an \'E\'. Thus, a minimum of 2 additional \'E\' type edges is required to ensure all nodes receive energy.","solution":"def find_minimum_E_edges(n, m, edges): from collections import defaultdict, deque def bfs(start_node, graph): visited = [False] * (n + 1) queue = deque([start_node]) visited[start_node] = True connected_component = [] while queue: node = queue.popleft() connected_component.append(node) for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return connected_component edge_graph = defaultdict(list) for u, v, edge_type in edges: if edge_type == \'E\': edge_graph[u].append(v) edge_graph[v].append(u) components = [] visited = set() for i in range(1, n + 1): if i not in visited: component = bfs(i, edge_graph) components.append(component) visited.update(component) if len(components) == 1: return 0 min_additional_edges = len(components) - 1 return min_additional_edges n = 4 m = 2 edges = [(1, 2, \'E\'), (3, 4, \'R\')] print(find_minimum_E_edges(n, m, edges))"},{"question":"You are given a binary string s of length n and an integer m. In one step, you can choose any binary substring of length l from s, where 1 leq l leq m, and flip all its bits (i.e., change all 0s to 1s and all 1s to 0s). Determine the minimum number of steps required to convert the binary string to a string consisting only of zeros or print -1 if it\'s not possible. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 1000). The description of the test cases follows. Each test case consists of two lines. The first line contains two integers n and m (1 le n le 2000, 1 le m le n). The second line contains the binary string s of length n. It is guaranteed that the sum of n over all test cases does not exceed 2000. For each test case, print the minimum number of steps to convert the string to all zeros, or -1 if it\'s not possible. # Examples # Input: ``` 2 6 3 110101 4 2 0011 ``` Output: ``` 2 1 ``` Explanation: In the first test case, the optimal sequence of flips: 1. Flip the substring from indices 2 to 4: \\"110101\\" -> \\"100001\\". 2. Flip the substring from indices 1 to 3: \\"100001\\" -> \\"000001\\". In the second test case: 1. Flip the substring from indices 3 to 4: \\"0011\\" -> \\"0000\\".","solution":"def min_steps_to_zero(n, m, s): Determines the minimum number of steps required to convert the binary string to a string consisting only of zeros. Args: n : int : the length of the binary string m : int : the maximum length of the substring that can be flipped s : str : the binary string Returns: int : the minimum number of steps to achieve all zeros in the string, or -1 if it\'s not possible steps = 0 i = 0 while i < n: if s[i] == \'1\': steps += 1 i += m else: i += 1 return steps def process_input(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][0] s = test_cases[i][1] result = min_steps_to_zero(n, m, s) results.append(result) return results"},{"question":"You are given an array of n positive integers. You can perform an operation to increase the value of any element by 1. The goal is to make all elements in the array different (no two elements should be equal). Each operation consists of the following: - Choose an index i (1 le i le n). - Increase the element at index i by 1. Determine the minimum number of operations required to make all elements of the array distinct. The first line of the input contains a single integer t (1 le t le 10) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. Print the minimum number of operations needed for each test case in a separate line. # Example Input: ``` 2 5 1 2 2 4 5 4 1 2 3 4 ``` Output: ``` 1 0 ``` # Explanation In the first test case, the array is [1, 2, 2, 4, 5]. One optimal solution is to increase the third element by 1 to make the array [1, 2, 3, 4, 5], which requires 1 operation. In the second test case, the array is already all distinct, so no operations are needed.","solution":"def min_operations_to_make_elements_unique(n, arr): Calculates the minimum number of operations required to make all elements of the array distinct. Parameters: n (int): The number of elements in the array. arr (list of int): The array of integers. Returns: int: The minimum number of operations required. if n <= 1: return 0 arr.sort() count = 0 for i in range(1, n): if arr[i] <= arr[i - 1]: needed_value = arr[i - 1] + 1 count += needed_value - arr[i] arr[i] = needed_value return count def process_test_cases(test_cases): Process multiple test cases and returns the results. Parameters: test_cases (list of tuples): Each tuple contains the number of elements and the array of elements. Returns: list of int: The list of results for each test case. results = [] for n, arr in test_cases: results.append(min_operations_to_make_elements_unique(n, arr)) return results"},{"question":"Implement a function that takes a list of integers and returns the longest increasing subsequence (LIS). An increasing subsequence is a sequence of numbers in which each number is greater than the previous one. Your task is to write an efficient algorithm to find the length of the longest increasing subsequence in the given list. For example: ```python input: [10, 9, 2, 5, 3, 7, 101, 18] output: 4 ``` Explanation: The longest increasing subsequence is [2, 3, 7, 101], which has length 4. Your function should have the following signature: ```python def longest_increasing_subsequence(arr: List[int]) -> int: ``` **Constraints:** - The length of the input list will not exceed 2500. - The elements of the input list are integers and can be negative, zero, or positive.","solution":"from typing import List def longest_increasing_subsequence(arr: List[int]) -> int: Function to find the length of the longest increasing subsequence. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"[Question] You are tasked with designing an algorithm to help a library manage its book inventory more effectively. Each book is represented by a unique identifier and a title. The library needs a function that takes two inputs: a list of books and a list of borrowed book identifiers. Each book in the books list is described by a unique identifier and a title, while each entry in the borrowed book identifiers list contains the unique identifier of a borrowed book. The function should return a list of books that are still available in the library, sorted in ascending order by their unique identifiers. Implement the function `available_books` which takes in two parameters: - `books`: a list of tuples, where each tuple contains an integer (the unique identifier) and a string (the book title). - `borrowed`: a list of integers, where each integer represents a unique identifier of a borrowed book. The function should return a list of tuples representing the books available in the library, sorted by the unique identifier in ascending order. # Constraints - Each book identifier is unique in the `books` list. - The `borrowed` list may or may not contain identifiers present in the `books` list. - The length of the `books` list will not exceed 1000. - The length of the `borrowed` list will not exceed 1000. # Example ```python books = [(1, \\"To Kill a Mockingbird\\"), (2, \\"1984\\"), (3, \\"The Great Gatsby\\"), (4, \\"The Catcher in the Rye\\")] borrowed = [1, 3] available_books(books, borrowed) # Expected Output: [(2, \\"1984\\"), (4, \\"The Catcher in the Rye\\")] ``` # Explanation In the example above: - \\"To Kill a Mockingbird\\" and \\"The Great Gatsby\\" were borrowed. - The function should return the list of books that are still available: \\"1984\\" and \\"The Catcher in the Rye\\", sorted by their unique identifiers.","solution":"def available_books(books, borrowed): Returns a list of books that are still available in the library, sorted in ascending order by their unique identifiers. Parameters: - books (list of tuples): A list of books where each tuple contains an integer (book identifier) and a string (book title). - borrowed (list of integers): A list of borrowed book identifiers. Returns: - list of tuples: A list of available books sorted by their unique identifiers. available = [book for book in books if book[0] not in borrowed] available.sort() return available"},{"question":"You are given an array of integers arr of length n. Your task is to modify the array such that every element appears at most twice and return the new length of the array. You do not need to care about the elements beyond the new length. The array is already sorted in non-decreasing order. Try to do this in-place with O(1) additional memory. Input: - The first line contains an integer n (1 le n le 100,000) — the length of the array. - The second line contains n integers arr[i] (1 le arr[i] le 1,000) — the elements of the array. Output: - Print a single integer — the new length of the modified array. Example: - Input: - `n = 7` - `arr = [1, 1, 1, 2, 2, 3, 3]` - Output: - `6`","solution":"def remove_duplicates(arr): Modify the array such that every element appears at most twice and return the new length of the array. Parameters: arr (List[int]): A sorted list of integers. Returns: int: The new length of the modified array. if not arr: return 0 # The pointer for placing the valid elements new_length = 0 for num in arr: # We can keep the number if: # - It\'s the very first or second element, or # - It differs from the element in the array two positions back if new_length < 2 or num != arr[new_length - 2]: arr[new_length] = num new_length += 1 return new_length"},{"question":"In a distant kingdom, there exists a unique language called \\"Kingdomese\\". This language uses a special alphabet consisting of lowercase English letters, but each letter has a unique value associated with it. The value of each letter is its position in the English alphabet (i.e., \'a\' has a value of 1, \'b\' has a value of 2, ..., \'z\' has a value of 26). A word in Kingdomese can be transformed by rearranging its letters in any possible order to create a new word. Two words are considered special synonyms if their transformed versions have the same total letter value. Given a dictionary containing n words, your task is to determine how many pairs of words in the dictionary are special synonyms. Two words form a pair if they appear in different positions in the dictionary and are special synonyms. The first line contains an integer n (1 ≤ n ≤ 2 * 10^5) — the number of words in the dictionary. The next n lines contain the words in the dictionary. Each word consists of lowercase English letters and its length does not exceed 100. Output a single integer — the number of pairs of words in the dictionary that are special synonyms. **Example:** Input: ``` 5 abcd bcda cdab dcba xyz ``` Output: ``` 6 ``` In the above example, the words \\"abcd\\", \\"bcda\\", \\"cdab\\", and \\"dcba\\" are all special synonyms because they can all be rearranged to form the same total letter value. Specifically, there are 6 pairs: (abcd, bcda), (abcd, cdab), (abcd, dcba), (bcda, cdab), (bcda, dcba), and (cdab, dcba). The word \\"xyz\\" does not form any special synonym pair with the other words.","solution":"def calculate_word_value(word): return sum(ord(char) - ord(\'a\') + 1 for char in word) def count_special_synonym_pairs(words): from collections import defaultdict word_value_counts = defaultdict(int) for word in words: value = calculate_word_value(word) word_value_counts[value] += 1 total_pairs = 0 for count in word_value_counts.values(): if count > 1: # Combination count for pairs is count choose 2. # Which is count * (count - 1) / 2 total_pairs += count * (count - 1) // 2 return total_pairs"},{"question":"You are organizing a marathon where each participant runs at their own pace. There are n participants, and the running speed of the i-th participant is s_i km/h. You need to group the participants into as few groups as possible such that the maximum running speed difference within each group does not exceed k km/h. Your task is to determine the minimum number of groups required to achieve this. The first line of the input contains two integers n (1 le n le 2 cdot 10^5) and k (0 le k le 10^9) — the number of participants and the maximum allowed speed difference within a group, respectively. The second line of the input contains n integers s_1, s_2, dots, s_n (1 le s_i le 10^9), where s_i is the running speed of the i-th participant in km/h. Print one integer — the minimum number of groups required. In the first example you can group the participants as [3, 5, 7] and [10]. In the second example all participants can be grouped together because the speed difference within the group is less than or equal to k. In the third example each participant must be in their own group because the speed differences are too large.","solution":"def min_groups(n, k, speeds): # Sort the speeds to group them more easily speeds.sort() # Initialize the number of groups groups = 1 # Initialize the minimum speed in the current group to the first speed min_speed = speeds[0] for i in range(1, n): # If the current speed exceeds the allowed difference within the current group if speeds[i] - min_speed > k: # Form a new group groups += 1 # Update the minimum speed for the new group min_speed = speeds[i] return groups"},{"question":"You are given an array which represents marks obtained by students in a test out of 100. The marks are separated by spaces. Your task is to find the number of marks that are greater than or equal to 90. **Input:** The first line contains an integer n (1 ≤ n ≤ 10^5), the number of students. The second line contains n space-separated integers where each integer x (0 ≤ x ≤ 100) represents the mark obtained by a student. **Output:** Print the number of marks that are greater than or equal to 90. **Example:** Input: ``` 5 89 90 92 100 71 ``` Output: ``` 3 ```","solution":"def count_high_marks(n, marks): Returns the number of marks that are greater than or equal to 90. Parameters: - n: int, the number of students. - marks: list of int, the marks obtained by students. Returns: - int: The number of marks that are greater than or equal to 90. return sum(1 for mark in marks if mark >= 90)"},{"question":"You are responsible for organizing the schedule of a conference. The conference spans n sessions and there are m speakers available. Each session requires exactly one speaker. Your goal is to assign speakers to sessions while adhering to their availability and topic expertise. Each speaker specializes in certain topics and might not be available for the entire duration of the conference. Formally, each speaker i has two attributes: a list of topics ti they can speak on and a list of available timeslots si they can attend. Each session j has a required topic tj and a timeslot sj it will be held. A speaker i can be assigned to session j if and only if tj is in ti and sj is in si. There are also some constraints regarding the number of sessions each speaker can handle. Each speaker i can take part in at most ki sessions. Due to last-minute changes, the schedule must be finalized as soon as possible! The first line contains a single integer n — the number of sessions in the conference (1 ≤ n ≤ 105). Next n lines contain two space-separated integers or strings each, tj and sj — the topic and timeslot of the j-th session. The next line contains a single integer m — the number of speakers available (1 ≤ m ≤ 105). Next m lines contain three entities: a list of space-separated strings ti representing the topics the i-th speaker can cover, a list of space-separated integers representing the timeslots si the i-th speaker is available for, and an integer ki denoting the maximum number of sessions the i-th speaker can handle. If an assignment is possible that meets all the criteria mentioned above, print a single word \\"YES\\" (without the quotes) in the first line. In the next line, print n space-separated integers. The i-th integer should be the number of the speaker who should handle the i-th session. If there are multiple correct assignments, print any of them. If no valid assignment exists, print a single word \\"NO\\" (without the quotes).","solution":"def schedule_conference(n, sessions, m, speakers): from collections import defaultdict def is_compatible(session, speaker): topic, timeslot = session speaker_topics, speaker_timeslots, _ = speaker return topic in speaker_topics and timeslot in speaker_timeslots # Initialize schedule schedule = [-1] * n speaker_sessions = defaultdict(int) # Try to assign each session to a speaker for j, session in enumerate(sessions): assigned = False for i, speaker in enumerate(speakers): if is_compatible(session, speaker) and speaker_sessions[i] < speaker[-1]: schedule[j] = i + 1 speaker_sessions[i] += 1 assigned = True break if not assigned: return \\"NO\\" return \\"YES\\", schedule"},{"question":"A furniture company needs to transport different types of furniture to a new store location. They have a truck with a designated weight capacity. Each item of furniture has a specific weight and a value that indicates its importance. The goal is to maximize the total value of the furniture transported while staying within the truck\'s weight capacity. The first line contains two integer numbers n and W (1 ≤ n ≤ 105; 1 ≤ W ≤ 109), where n is the number of furniture items and W is the weight capacity of the truck in kilograms. The following n lines contain the information about the furniture items, with each line representing a pair of integers wi and vi (1 ≤ wi ≤ W; 1 ≤ vi ≤ 104), where wi is the weight of the ith piece of furniture and vi is its value. Output the maximum possible value of the set of furniture items that can be transported. On the next line, print a string consisting of the indices of the furniture items that make up the optimal set. If there are multiple optimal sets, print any one of them. The items are numbered starting from 1 based on their order in the input.","solution":"def knapsack_max_value(n, W, items): # Initialize DP array dp = [0] * (W + 1) item_selection = [ [] for _ in range(W + 1) ] for i in range(n): weight, value = items[i] for w in range(W, weight - 1, -1): if dp[w - weight] + value > dp[w]: dp[w] = dp[w - weight] + value item_selection[w] = item_selection[w - weight] + [i + 1] max_value = max(dp) max_index = dp.index(max_value) optimal_items = item_selection[max_index] return max_value, optimal_items # Example usage: # n = 4 # W = 10 # items = [(5, 10), (4, 40), (6, 30), (3, 50)] # print(knapsack_max_value(n, W, items))"},{"question":"You are given a list of integers. You need to find and return the maximum sum of a contiguous subarray with at least one element in it. The input is a single line containing integers separated by space. The length of the list is guaranteed to be at most 1000 elements, and each integer value is between -1000 and 1000. Print a single integer which is the maximum sum. # Constraints - The number of integers in the list is at most 1000. - Each integer in the list is between -1000 and 1000. # Example Input: ``` -2 1 -3 4 -1 2 1 -5 4 ``` Output: ``` 6 ``` Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum = 6.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray. Uses Kadane\'s algorithm to find the maximum sum subarray ending at each position. if not arr: return 0 max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_input(input_string): Processes input string of space-separated integers and returns the maximum subarray sum. arr = list(map(int, input_string.strip().split())) return max_subarray_sum(arr)"},{"question":"You are a software engineer at an e-commerce company. Your team is working on improving the delivery estimates for orders. Each order has a shipping duration which varies based on the location of the recipient. To provide more accurate delivery dates, your task is to implement a function that computes the expected delivery date for each order. You are given a list of orders where each order is represented as a tuple. Each tuple consists of the order date (in the format YYYY-MM-DD) and the shipping duration in days. Your task is to write a function that computes the expected delivery date for each order by adding the shipping duration to the order date. Function Signature: ```python def expected_delivery_dates(orders: List[Tuple[str, int]]) -> List[str]: ``` The function should take the following parameter: - `orders` (List[Tuple[str, int]]): A list of tuples where each tuple contains the order date as a string in the format YYYY-MM-DD and the shipping duration as an integer representing the number of days. Return: - List[str]: A list of strings where each string represents the expected delivery date in the format YYYY-MM-DD. # Example ```python orders = [(\\"2023-10-01\\", 5), (\\"2023-11-15\\", 10), (\\"2023-12-01\\", 3)] expected_delivery_dates(orders) ``` Output: ``` [\\"2023-10-06\\", \\"2023-11-25\\", \\"2023-12-04\\"] ``` # Constraints - The input list will contain at most 1000 orders. - The order dates will be valid dates between \\"2000-01-01\\" and \\"2099-12-31\\". - The shipping duration will be a non-negative integer less than or equal to 30. # Note - You may use the `datetime` module in Python for date calculations.","solution":"from typing import List, Tuple from datetime import datetime, timedelta def expected_delivery_dates(orders: List[Tuple[str, int]]) -> List[str]: Computes the expected delivery date for each order by adding the shipping duration to the order date. Parameters: - orders (List[Tuple[str, int]]): A list of tuples where each tuple contains the order date as a string in the format YYYY-MM-DD and the shipping duration as an integer representing the number of days. Returns: - List[str]: A list of strings where each string represents the expected delivery date in the format YYYY-MM-DD. delivery_dates = [] for order_date, shipping_days in orders: order_date_obj = datetime.strptime(order_date, \\"%Y-%m-%d\\") delivery_date_obj = order_date_obj + timedelta(days=shipping_days) delivery_dates.append(delivery_date_obj.strftime(\\"%Y-%m-%d\\")) return delivery_dates"},{"question":"A **magical prefix** of a given string is a substring that appears at the start of the string and follows a particular order of the alphabetic sequence. For example, in the string \\"abcdef\\", \\"a\\", \\"ab\\", and \\"abc\\" are magical prefixes, while \\"abcd\\" is not because \\"d\\" is not the fourth letter in the sequence \\"abcd\\". You are given a string s consisting of lowercase English letters. Determine the length of the longest magical prefix of the string. If no such prefix exists, return 0. The first line of input contains a single integer t (1 leq t leq 100) – the number of test cases. Each of the next t lines contains a single string s (1 leq |s| leq 100). For each test case, output in a new line the length of the longest magical prefix of the given string. Examples: Input: ``` 3 abcxyza a abdc ``` Output: ``` 3 1 2 ```","solution":"def longest_magical_prefix_length(s): Determines the length of the longest magical prefix of the given string s. expected_char = \'a\' length = 0 for char in s: if char == expected_char: length += 1 expected_char = chr(ord(expected_char) + 1) else: break return length def process_test_cases(test_cases): Processes multiple test cases and returns the results as a list. results = [] for s in test_cases: results.append(longest_magical_prefix_length(s)) return results"},{"question":"In AntLand, there is a unique numbering system for the lands governed by different leaders. Each land is represented by a unique integer identifier. A land identifier is considered \\"special\\" if it meets the following criteria: 1. The sum of its digits is equal to the sum of its reversed digits. 2. All digits in the identifier are even numbers. For example, 246 is a special identifier as the sum of its digits (2 + 4 + 6 = 12) equals the sum of its reversed digits (6 + 4 + 2 = 12), and all are even numbers. The Council of AntLand wants to issue a series of special identifiers, ensuring that at least k such special identifiers are created, and the highest identifier issued does not exceed maxn. Given two integers, maxn and k, where 1 ≤ k ≤ 10^5 and 1 ≤ maxn ≤ 10^6, your task is to determine if it is possible to issue at least k special identifiers. If possible, print the first k special identifiers in ascending order, each on a new line. If it is not possible, print a single number -1. Input: - The first line contains two integers maxn and k. Output: - If at least k special identifiers can be issued, output the first k such identifiers in ascending order, each on a new line. - If it is not possible to issue at least k special identifiers, output a single number -1.","solution":"def sum_of_digits(num): Returns the sum of digits of a number. return sum(int(digit) for digit in str(num)) def is_special_identifier(identifier): Checks if an identifier is special. identifier_str = str(identifier) if any(int(digit) % 2 != 0 for digit in identifier_str): return False reversed_str = identifier_str[::-1] return sum_of_digits(identifier_str) == sum_of_digits(reversed_str) def generate_special_identifiers(maxn, k): Generates at least k special identifiers or returns -1 if not possible. special_identifiers = [] for number in range(2, maxn + 1, 2): if is_special_identifier(number): special_identifiers.append(number) if len(special_identifiers) == k: return special_identifiers return -1 def main(maxn, k): result = generate_special_identifiers(maxn, k) if result == -1: print(-1) else: for identifier in result: print(identifier)"},{"question":"In a distant land, there is a game with a complex system of currencies and transactions. The game consists of n towns connected by m bidirectional roads. Each town has its own currency, and players can only perform transactions in a town using the local currency of that town. You are given the initial wealth of a player for each town at the start of the game. Your task is to determine the maximum wealth a player can accumulate in the game if they start from the first town and can travel to any other town following the roads. The player can perform a transaction whenever they enter a town, and this transaction does not affect their wealth, but they can choose the town providing the highest increment in wealth. The first line contains three integers n, m, init (2 ≤ n ≤ 100; 1 ≤ m ≤ 200; 1 ≤ init ≤ 1000), representing the number of towns, the number of roads, and the initial wealth in the first town, respectively. The second line contains n integers, where the i-th integer represents the wealth increment offered by the i-th town. The next m lines each contain two integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i), indicating there is a road connecting town u_i and town v_i. It\'s guaranteed that the network of towns is fully connected by the roads. Print a single integer, the maximum wealth the player can accumulate starting from the first town and traveling through any connected towns. Example: Input: 4 4 100 10 20 30 40 1 2 2 3 3 4 4 1 Output: 170 Here, the player starts with 100 units of wealth in the first town. They can travel through the sequence of towns to accumulate wealth increments: 100 (start) + 10 (Town 1) + 20 (Town 2) + 30 (Town 3) + 40 (Town 4) = 200. Since they started with 100 wealth at Town 1, the output is 200 - 100 = 100.","solution":"def max_wealth(n, m, init, wealth_increments, roads): Determines the maximum wealth a player can accumulate starting from the first town. Args: n (int): Number of towns. m (int): Number of roads. init (int): Initial wealth in the first town. wealth_increments (list): Wealth increments for each town. roads (list): List of tuples representing roads between towns. Returns: int: Maximum wealth accumulated. from collections import defaultdict, deque # Create graph graph = defaultdict(list) for u, v in roads: graph[u-1].append(v-1) graph[v-1].append(u-1) # Run BFS from the first town to collect all reachable towns visited = [False] * n queue = deque([0]) visited[0] = True total_wealth_inc = 0 while queue: town = queue.popleft() total_wealth_inc += wealth_increments[town] for neighbor in graph[town]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Calculate total wealth max_wealth_accumulated = init + total_wealth_inc return max_wealth_accumulated"},{"question":"You are given an array of integers and a set of queries. Each query requires you to determine the number of unique integers within a specified range in the array. For example, imagine you have the array `[1, 2, 2, 3, 4, 4, 4, 5]` and a query asking how many unique integers are between indices 2 and 6, inclusive. The subset of the array from index 2 to 6 is `[2, 2, 3, 4, 4]`, which contains the unique integers `2, 3,` and `4`. So, the result for that query would be `3`. Write a program that processes multiple such queries efficiently. The first line of the input contains two integers `n` (1 leq n leq 10^5) and `q` (1 leq q leq 10^5) — the number of elements in the array and the number of queries, respectively. The second line contains `n` integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) — the elements of the array. Each of the next `q` lines contains two integers `l` and `r` (1 leq l leq r leq n) — the indices that define a query. For each query, print a single integer representing the number of unique integers in the segment a[l], a[l+1], dots, a[r]. # Input ``` n q a_1 a_2 ... a_n l_1 r_1 l_2 r_2 ... l_q r_q ``` # Output ``` result_1 result_2 ... result_q ``` # Example: Input: ``` 8 3 1 2 2 3 4 4 4 5 2 6 1 4 3 8 ``` Output: ``` 3 3 4 ``` # Explanation: - The unique integers from index `2` to `6` are `[2, 2, 3, 4, 4]` (unique values: `2, 3, 4`) → result is `3`. - The unique integers from index `1` to `4` are `[1, 2, 2, 3]` (unique values: `1, 2, 3`) → result is `3`. - The unique integers from index `3` to `8` are `[2, 3, 4, 4, 4, 5]` (unique values: `2, 3, 4, 5`) → result is `4`.","solution":"def unique_numbers_in_ranges(n, q, array, queries): Returns the number of unique integers for each query range in the array. :param n: int - number of elements in the array :param q: int - number of queries :param array: list of int - the array of elements :param queries: list of tuples - each tuple contains two integers representing the start and end indices of the query range :return: list of int - each element is the number of unique integers in the range specified by the corresponding query results = [] for l, r in queries: unique_numbers = set(array[l-1:r]) results.append(len(unique_numbers)) return results"},{"question":"You are given a road map of a city in the form of a grid. Each cell in the grid can either be empty or have a building. You can only walk on the empty cells. You CANNOT walk through or on the buildings. The objective is to calculate the minimum distance one needs to travel from the top-left corner of the grid to the bottom-right corner. You can move up, down, left, or right but cannot move outside the grid nor into a building. If there is no valid path from the top-left to the bottom-right corner, return -1. # Input - The first line contains two integers, `n` and `m` (1 le n, m le 500), the dimensions of the grid. - The next `n` lines each contain a string of length `m`, where each character is either a \'.\' (representing an empty cell) or a \'#\' (representing a building). # Output - Output a single integer, the minimum distance from the top-left cell to the bottom-right cell. If there is no such path, print -1. # Examples Input: ``` 5 5 ..... .#. ...#. .#... ..... ``` Output: ``` 8 ``` Input: ``` 3 3 .#. .#. .#. ``` Output: ``` -1 ``` # Explanation In the first example, the path might be: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (3,2) -> (4,2) -> (4,3) -> (4,4) In the second example, there is no valid path from the top-left corner to the bottom-right corner, so the output is -1.","solution":"from collections import deque def min_distance(city_map, n, m): if city_map[0][0] == \'#\' or city_map[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and city_map[nx][ny] == \'.\': queue.append((nx, ny, dist+1)) visited.add((nx, ny)) return -1 def min_distance_wrapper(n, m, grid): return min_distance(grid, n, m)"},{"question":"Tina loves to solve problems that involve prime numbers. She has a new challenge where she needs to find all prime numbers between a given range, but the twist is that she needs to determine the sum of these prime numbers. Given two integers a and b (1 ≤ a ≤ b ≤ 10^6), write a program to find the sum of all prime numbers between a and b, inclusive. Your task is to implement a function: ```python def sum_of_primes(a: int, b: int) -> int: pass ``` # Input - Two integers, a and b, each on a separate line. # Output - Output a single integer which is the sum of all prime numbers between a and b, inclusive. # Example Input: ``` 10 20 ``` Output: ``` 60 ``` # Explanation: The prime numbers between 10 and 20 are 11, 13, 17, and 19. Their sum is 60.","solution":"def sum_of_primes(a: int, b: int) -> int: def is_prime(n): if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True prime_sum = sum(x for x in range(a, b + 1) if is_prime(x)) return prime_sum"},{"question":"You are given a string S of length n consisting of lowercase English letters and an integer k. The goal is to determine the number of ways to select two non-empty, non-overlapping subsequences from S such that the distance between them is at least k. The distance between two non-overlapping subsequences is defined as the minimum difference between the ending index of the first subsequence and the starting index of the second subsequence. The first line contains a string S (1 le n le 200 000). The second line contains an integer k (1 le k le n). A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. Output a single integer representing the number of valid pairs of subsequences. In the first example, the string is \\"abcde\\" and k is 2. One possible valid pair of subsequences is (\\"a\\", \\"cde\\") where the distance between them is 2. In the second example, the string is \\"abc\\" and k is 3. There are no valid pairs of subsequences because the maximum distance between any two subsequences cannot be at least 3.","solution":"def count_valid_pairs(S, k): Returns the number of valid pairs of non-empty, non-overlapping subsequences whose distance between them is at least k. Args: S (str): The input string of lowercase English letters. k (int): The minimum required distance between subsequences. Returns: int: The number of valid pairs of subsequences. n = len(S) # Initialize the count of valid pairs valid_pairs_count = 0 # Loop through all possible pairs (i, j) such that j - i >= k for i in range(n): for j in range(i + k, n): valid_pairs_count += 1 return valid_pairs_count"},{"question":"You are given a sequence of non-negative integers a_1, a_2, ldots, a_n. You want to perform the following two steps exactly once: 1. Choose any contiguous subarray of this sequence and reverse it. 2. Calculate the bitwise XOR of every two adjacent elements in the modified sequence. The goal is to find the maximum possible bitwise XOR value of all the results obtained in step 2 after performing the operation described in step 1. The first line contains a single integer n (1 le n le 100), the number of elements in the sequence. The second line contains n integers a_1, a_2, ldots, a_n (0 le a_i < 2^{31}), the elements of the sequence. Output a single integer, the maximum possible bitwise XOR value obtained after performing the two steps described above. For example, if the sequence is [1, 2, 3] and you reverse the subarray [2, 3], the new sequence will be [1, 3, 2]. The XOR values would be: 1 XOR 3 = 2 and 3 XOR 2 = 1. Hence the result is 2 + 1 = 3. The maximum possible value for the given sequence should be printed. To help you understand the process: If you have input: ``` 3 1 2 3 ``` Reversing the subarray [1, 2] gives [2, 1, 3], the XOR values would be: 2 XOR 1 = 3 and 1 XOR 3 = 2, hence the result is 3 + 2 = 5. If you reverse the entire sequence [1, 2, 3] to get [3, 2, 1], the XOR values would be 3 XOR 2 = 1 and 2 XOR 1 = 3, hence the result is 1 + 3 = 4. Thus the maximum possible value is 5, which should be the output.","solution":"def max_xor_after_reverse(n, a): This function takes an integer n and a list a of n non-negative integers. It returns the maximum possible bitwise XOR value of adjacent elements after reversing any contiguous subarray of the list exactly once. max_xor = 0 # Check all possible subarrays for i in range(n): for j in range(i, n): # Reverse the subarray a[i:j+1] reversed_subarray = a[:i] + a[i:j+1][::-1] + a[j+1:] # Calculate XOR of adjacent elements current_xor = 0 for k in range(n - 1): current_xor = max(current_xor, reversed_subarray[k] ^ reversed_subarray[k + 1]) # Update max_xor max_xor = max(max_xor, current_xor) return max_xor"},{"question":"Luisa owns a simple text editor that allows two operations: append() and delete(). The operation append(s) appends the string s to the end of the editor\'s current text, and the operation delete(k) deletes the last k characters from the current text. If the length of the text is less than k, the operation delete(k) deletes all the characters from the text and results in an empty string. Luisa made n operations with her text editor but forgot them. Now she wants to remember them. Each time she remembers an operation, she wants to know the current content of the text in the editor after performing the operations she has remembered so far. The first line contains the integer n (1 ≤ n ≤ 105) — the number of operations Luisa made. The next n lines contain the operations Luisa remembers. Each line starts with an integer q (0 or 1) indicating the type of operation followed by the details of the operation: - If q equals 0, the operation is delete(k) and the line will contain an additional integer k (1 ≤ k ≤ 106). - If q equals 1, the operation is append(s) and the line will contain an additional string s (1 ≤ |s| ≤ 106). Print n lines where the i-th line contains the resulting text in the editor after performing all the operations Luisa remembered from step 1 to step i. If the text becomes empty, print an empty string \\"\\". Example: Input: 4 1 hello 1 world 0 5 1 goodbye Output: hello helloworld hello hellogoodbye Explanation: After the first operation, the text is \\"hello\\". After the second operation, the text is \\"helloworld\\". After the third operation (delete 5), the text is \\"hello\\". After the fourth operation, the text is \\"hellogoodbye\\".","solution":"def text_editor_operations(n, operations): Execute text editor operations and return the resulting text after each operation. Parameters: n (int): Number of operations. operations (list of tuples): A list of operations where each operation is defined as a tuple. If the operation is `append`, it is represented as (1, s) If the operation is `delete`, it is represented as (0, k) Returns: list of str: The resulting text after each operation. result = [] current_text = \\"\\" for operation in operations: if operation[0] == 1: # append operation current_text += operation[1] elif operation[0] == 0: # delete operation current_text = current_text[:-operation[1]] result.append(current_text) return result"},{"question":"You are given a sequence of integers where you need to construct a binary tree. Each integer corresponds to a node, and the sequence dictates the structure and the order of the nodes to be inserted into the binary tree. The sequence is given in level order traversal format, where each number represents a node value. Your task is to compute the height of the binary tree. The height of a binary tree is defined as the number of edges in the longest path from the root to a leaf. A leaf is a node with no children. The first line of input contains one integer n (1 leq n leq 100,000) – the number of elements in the sequence. The next line contains n integers representing the nodes of the binary tree in level order traversal. Print one integer – the height of the binary tree. # Input ``` 5 3 9 20 15 7 ``` # Output ``` 2 ``` # Explanation The binary tree constructed would look like this: 3 / 9 20 / 15 7 The height of this binary tree is 2, which is the number of edges in the longest path from the root to a leaf (either 3 -> 20 -> 15 or 3 -> 20 -> 7).","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insertLevelOrder(arr, root, i, n): # Base case for recursion if i < n: temp = TreeNode(arr[i]) root = temp # insert left child root.left = insertLevelOrder(arr, root.left, 2 * i + 1, n) # insert right child root.right = insertLevelOrder(arr, root.right, 2 * i + 2, n) return root def height(node): if node is None: return -1 # height of empty tree is -1 else: left_height = height(node.left) right_height = height(node.right) return max(left_height, right_height) + 1 # Function to compute the height of the binary tree from level-order input sequence def compute_tree_height(n, seq): if n == 0: return -1 root = None root = insertLevelOrder(seq, root, 0, n) return height(root)"},{"question":"You are given an array of integers representing the heights of a humans in a queue. The humans are standing in a 1-based indexed line from left to right, and we want to create a socially-distanced queue. Specifically, the new queue should be created following these constraints: 1. No person (height) should have a neighbor (adjacent in the new queue) taller than them. 2. The difference between two adjacent heights in the new queue should be as small as possible. Your task is to rearrange the queue to satisfy the above conditions. If there are multiple valid rearrangements, return the lexicographically smallest one. # Input - The first line contains an integer `n` (1 leq n leq 2 times 10^5) — the number of people in the original queue. - The second line contains `n` integers separated by spaces — the heights of the people in the original queue (each height lies in the range from 1 to 10^9). # Output Print a single line containing `n` integers separated by spaces — the heights of the people in the new queue, following the conditions described. # Example Input ``` 6 3 6 1 2 4 5 ``` Output ``` 1 2 3 4 5 6 ``` Input ``` 5 9 1 3 7 4 ``` Output ``` 1 3 4 7 9 ```","solution":"def socially_distanced_queue(n, heights): Rearranges the queue to satisfy the given constraints: 1. No person should have a neighbor taller than them. 2. The difference between two adjacent heights should be as small as possible. # Simply sorting the heights satisfies these constraints. heights.sort() return heights"},{"question":"You are given a string consisting of lowercase letters and digits. Your task is to remove all vowels (a, e, i, o, u) and digits from the string and then print the remaining characters in the same order as they appeared in the original string. The first line of the input contains a single string s (1 ≤ |s| ≤ 100 000) consisting of lowercase English letters and digits. Output a single string after removing all vowels and digits from the original string. For example, for the input \\"hello123world\\", the output should be \\"hllwrld\\". For the input \\"a1b2c3d4e\\", the output should be \\"bcd\\".","solution":"def remove_vowels_and_digits(s): Removes all vowels (a, e, i, o, u) and digits from the string and returns the remaining characters. Args: s (str): The input string consisting of lowercase letters and digits. Returns: str: The string after removing all vowels and digits. vowels = set(\'aeiou\') result = [] for char in s: if char not in vowels and not char.isdigit(): result.append(char) return \'\'.join(result)"},{"question":"Max runs a small bookstore in his town, which is well-organized but lately, his inventory system has been experiencing some issues. His inventory is simplified as a list of books arranged sequentially, each with its unique ISBN number. However, due to a bug, some of the ISBN numbers have duplicated entries. Max wants to remove duplicates from the inventory while maintaining the original order of the books. He also wants to count the total number of duplicates removed. Write a function that takes the list of ISBN numbers and returns a tuple containing the new list of ISBN numbers with duplicates removed and the count of duplicates removed. Your function should have the following signature: ```python def remove_duplicates(books: List[int]) -> Tuple[List[int], int]: pass ``` # Input - A list of integers representing ISBN numbers, `books`, where `1 <= len(books) <= 100,000`. # Output - A tuple containing: 1. A list of integers representing the updated inventory of ISBN numbers after duplicates have been removed, maintaining the original order. 2. An integer representing the total number of duplicates removed. # Examples Example 1 ```python books = [123, 456, 789, 123, 456, 101, 102] remove_duplicates(books) ``` **Output**: ```python ([123, 456, 789, 101, 102], 2) ``` Example 2 ```python books = [555, 666, 777, 888, 999] remove_duplicates(books) ``` **Output**: ```python ([555, 666, 777, 888, 999], 0) ``` Example 3 ```python books = [1, 2, 3, 1, 2, 3, 4, 5] remove_duplicates(books) ``` **Output**: ```python ([1, 2, 3, 4, 5], 3) ```","solution":"from typing import List, Tuple def remove_duplicates(books: List[int]) -> Tuple[List[int], int]: Remove duplicates from the list of ISBN numbers, maintaining the original order. Parameters: books (List[int]): List of ISBN numbers. Returns: Tuple[List[int], int]: A tuple containing the updated list without duplicates and the count of duplicates. seen = set() unique_books = [] duplicate_count = 0 for book in books: if book not in seen: seen.add(book) unique_books.append(book) else: duplicate_count += 1 return unique_books, duplicate_count"},{"question":"Berland is preparing for a grand festival, and the King Valera II wants to illuminate all the cities. Each city has a specific number of lanterns already installed, but some of them are broken. You are given an initial configuration of functioning and broken lanterns in each city. Each day, the King sends a crew to one city with the task of repairing all the broken lanterns. Sadly, due to some miscommunication issues, the crew sometimes ends up breaking the functioning lanterns instead. Your task is to determine if it\'s possible to repair all the broken lanterns in at most n days, where n is the number of cities. The first line contains a single integer n — the number of cities in Berland. In the second line, there are n integers separated by spaces where the i-th integer represents the number of broken lanterns in the i-th city. In the third line, there are n integers separated by spaces where the i-th integer represents the number of functioning lanterns in the i-th city. Each day, Valera II chooses exactly one city and orders the crew to either repair all the broken lanterns or to take any corrective action that affects the functioning ones, with the aim to maximize functioning lanterns overall. Output \\"Possible\\" if you can repair all the broken lanterns in at most n days, otherwise print \\"Impossible\\". # Example: Input: ``` 3 2 0 1 1 2 1 ``` Output: ``` Possible ```","solution":"def is_possible_to_repair_all(n, broken_lanterns, functioning_lanterns): Determines if it\'s possible to repair all the broken lanterns in at most n days. Args: n (int): Number of cities. broken_lanterns (list): List of integers representing broken lanterns in each city. functioning_lanterns (list): List of integers representing functioning lanterns in each city. Returns: str: \\"Possible\\" if all broken lanterns can be repaired in at most n days, otherwise \\"Impossible\\". for i in range(n): # Each day we can choose one city either to fix all its broken lanterns or not # Given in exactly n days we can visit each city once if broken_lanterns[i] > functioning_lanterns[i] + 1: # If there are too many broken lanterns compared to functioning ones, # it\'s impossible to repair all return \\"Impossible\\" # If we pass through the loop without returning \\"Impossible\\", it means it\'s possible return \\"Possible\\""},{"question":"Daniel has a rectangular grid of size n × m, where each cell contains a lowercase letter. He wants to check if a given word can be found in the grid following specific rules: the word must appear in a straight line either horizontally or vertically, and it can be constructed from adjacent cells (cells sharing a common side). Write a program that determines if the given word can be found in the grid following the rules above. **Input:** The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the grid. The next n lines describe the grid, each containing m lowercase letters. The last line contains a single word consisting of lowercase letters, with length k (1 ≤ k ≤ 100). **Output:** If the word can be found in the grid according to the rules, print \\"YES\\". Otherwise, print \\"NO\\". **Examples:** ``` Input: 3 4 abcd efgh ijkl fghj Output: YES Input: 3 4 abcd efgh ijkl mnop output: NO ``` Explanation: In the first example, the word \\"fghj\\" can be found vertically starting from the second row, second column to the third row, second column. In the second example, the word \\"mnop\\" cannot be found in a straight line horizontally or vertically in the grid.","solution":"def word_search(n, m, grid, word): def check_horizontal(x, y): if y + len(word) > m: return False return all(grid[x][y+i] == word[i] for i in range(len(word))) def check_vertical(x, y): if x + len(word) > n: return False return all(grid[x+i][y] == word[i] for i in range(len(word))) for i in range(n): for j in range(m): if (check_horizontal(i, j) or check_vertical(i, j)): return \\"YES\\" return \\"NO\\""},{"question":"You are given a permutation p of integers from 1 to n (an array containing each integer from 1 to n exactly once). Your task is to determine whether there exists an index i such that the sum of all elements on the left of i (inclusive) is equal to the sum of all elements on the right of i (exclusive). More formally, you need to find an index i (1 le i < n) such that: sum_{j=1}^{i} p[j] = sum_{j=i+1}^{n} p[j] The input consists of multiple test cases. The first line of input contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a single integer n (2 le n le 100) followed by a permutation p of integers from 1 to n. For each test case, print \\"YES\\" if such an index exists, otherwise print \\"NO\\". Example: Input: 3 4 1 2 3 4 3 3 1 2 5 2 3 5 1 4 Output: NO YES NO","solution":"def is_balanced_index_exists(p): Determines if there exists an index i such that: sum(p[0:i+1]) == sum(p[i+1:]) Args: p (list): A permutation of integers from 1 to n (inclusive). Returns: str: \\"YES\\" if such an index exists, otherwise \\"NO\\" total_sum = sum(p) left_sum = 0 # Iterate up to n-1 (because we need at least one element on the right) for i in range(len(p) - 1): left_sum += p[i] right_sum = total_sum - left_sum if left_sum == right_sum: return \\"YES\\" return \\"NO\\" # Function to process multiple test cases def process_test_cases(test_cases): results = [] for n, p in test_cases: results.append(is_balanced_index_exists(p)) return results"},{"question":"You are given a string consisting of one or more words separated by spaces. Write a function to reverse the order of characters in every word within a sentence while still preserving whitespace and initial word order. The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a string s (1 le text{len}(s) le 100), where text{len}(s) is the length of the string. For each test case, print the modified sentence. # Example Input 3 hello world programming is fun open sam adams # Example Output olleh dlrow gnimmargorp si nuf nepo mas smada","solution":"def reverse_words_in_sentence(sentence): Reverse the characters in each word of the given sentence while preserving the word order. words = sentence.split(\' \') reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words) def process_test_cases(test_cases): Process multiple test cases for reversing words in sentences. results = [] for sentence in test_cases: results.append(reverse_words_in_sentence(sentence)) return results"},{"question":"You are working on implementing a ticket booking system for a small cinema. The cinema hall has a grid of seats, represented by a 2D array. Each seat can either be available or booked. Your task is to implement a function that finds and returns the largest block of consecutive available seats in any row. The seats are represented by a 2D grid, where \'0\' represents an available seat and \'1\' represents a booked seat. The function should return the length of the largest block of consecutive \'0\'s in any single row. If there are multiple rows with the same length, the function should return the position (0-based index) of the first such row. If there are no available seats, the function should return (-1, 0). # Input - An integer `t`, the number of test cases - For each test case: - An integer `r` representing the number of rows in the cinema hall - An integer `c` representing the number of columns in each row - A 2D list where each element is either \'0\' or \'1\' # Output - For each test case, return a tuple: - The index of the row with the longest block of consecutive available seats - The length of the longest block of consecutive available seats # Example ```python def largest_available_block(t, test_cases): results = [] for test_case in test_cases: r, c, grid = test_case max_length = 0 max_row_index = -1 for i in range(r): current_length = 0 best_length = 0 for j in range(c): if grid[i][j] == \'0\': current_length += 1 best_length = max(best_length, current_length) else: current_length = 0 if best_length > max_length: max_length = best_length max_row_index = i if max_length == 0: results.append((-1, 0)) else: results.append((max_row_index, max_length)) return results # Example Use t = 2 test_cases = [ (3, 5, [ [\'0\', \'1\', \'0\', \'0\', \'1\'], [\'0\', \'0\', \'0\', \'1\', \'0\'], [\'1\', \'1\', \'0\', \'0\', \'0\'] ]), (2, 4, [ [\'1\', \'1\', \'1\', \'1\'], [\'0\', \'0\', \'1\', \'0\'] ]) ] print(largest_available_block(t, test_cases)) # Output: [(1, 3), (1, 2)] ``` The function should process the inputs and outputs as specified.","solution":"def largest_available_block(t, test_cases): results = [] for test_case in test_cases: r, c, grid = test_case max_length = 0 max_row_index = -1 for i in range(r): current_length = 0 best_length = 0 for j in range(c): if grid[i][j] == \'0\': current_length += 1 best_length = max(best_length, current_length) else: current_length = 0 if best_length > max_length: max_length = best_length max_row_index = i if max_length == 0: results.append((-1, 0)) else: results.append((max_row_index, max_length)) return results"},{"question":"Given an array of integers, you need to find the maximum sum of any non-empty subarray of the array. A subarray is defined as a contiguous part of the array. The sum of a subarray is the sum of all its elements. Write a function `maxSubarraySum(nums: List[int]) -> int` that takes a list of integers `nums` and returns the maximum sum of any subarray of `nums`. **Input:** - A single line containing integers separated by spaces. - The number of integers in the list will be at least 1 and will not exceed 100,000. - Each integer in the list will be in the range [-1000, 1000]. **Output:** - Return an integer which is the maximum sum of any subarray of the given array. **Example:** 1. Input: `nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]` - Output: 6 - Explanation: The subarray [4, -1, 2, 1] has the maximum sum of 6. 2. Input: `nums = [1]` - Output: 1 - Explanation: The subarray [1] has the maximum sum of 1. 3. Input: `nums = [5, 4, -1, 7, 8]` - Output: 23 - Explanation: The subarray [5, 4, -1, 7, 8] has the maximum sum of 23. **Constraints:** - The solution must have a time complexity of O(n). - The solution must handle cases where all numbers are negative by choosing the largest negative number as the subarray.","solution":"def maxSubarraySum(nums): Returns the maximum sum of any subarray of nums using Kadane\'s algorithm. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"There are n students attending a party. Each student is assigned a unique ID ranging from 1 to n. As a social experiment, the event manager has decided to form a circle such that each student has the same number of friends on their left and right side. The goal is to ensure that each student knows exactly k students (both directly and indirectly). Your task is to help the event manager find a possible arrangement of the students in a circle. If it is not possible to arrange the students in such a manner, output \\"Not possible\\". The single line of the input contains two integers n and k (3 ≤ n ≤ 200, 0 ≤ k < n), separated by a space. Output a permutation of the students\' IDs that meets the criteria. Print the IDs in a single line, separated by a space. If there are multiple solutions, print any. If no such arrangement is possible, output \\"Not possible\\". Examples: Input: 6 2 Output: 1 2 3 4 5 6 Input: 5 3 Output: Not possible","solution":"def arrange_students_circle(n, k): if n < 3 or k == 0 or k >= n: return \\"Not possible\\" if k % 2 == 1: return \\"Not possible\\" step = k // 2 arrangement = list(range(1, n + 1)) result = [-1] * n for i in range(n): result[i] = arrangement[(i + step) % n] return \\" \\".join(map(str, result)) # Example usage # print(arrange_students_circle(6, 2)) # Output: 1 2 3 4 5 6 # print(arrange_students_circle(5, 3)) # Output: Not possible"},{"question":"In Verithia city, there is a beautiful Botanical Garden known for its rare and unique plants. The garden is designed in such a way that plants are aligned in rows and columns forming a grid. Each cell in the grid can either contain a plant or be empty. To impress the tourists, the head gardener wants to ensure that no two plants are adjacent to each other. In other words, no two plants should share a common side. Two cells are considered adjacent if they share an edge. You are given a grid of size n by m where \'1\' represents a cell with a plant and \'0\' represents an empty cell. Determine if the current arrangement of the plants in the garden is such that no two plants are adjacent. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) - the number of rows and columns in the grid. - The next n lines each contain m characters \'0\' or \'1\' representing the grid. Output: - Print \\"YES\\" if no two plants are adjacent, and \\"NO\\" otherwise. Example 1: Input: 3 3 101 010 101 Output: YES Example 2: Input: 3 3 110 000 101 Output: NO Note: - In the first example, no two \'1\'s are adjacent to each other. - In the second example, the first row has two \'1\'s that are adjacent to each other.","solution":"def no_adjacent_plants(n, m, grid): Check if no two plants are adjacent in the garden grid. Parameters: n (int): The number of rows in the grid. m (int): The number of columns in the grid. grid (list of str): The grid represented as a list of strings. Returns: str: \\"YES\\" if no two plants are adjacent, \\"NO\\" otherwise. for i in range(n): for j in range(m): if grid[i][j] == \'1\': if (i > 0 and grid[i - 1][j] == \'1\') or (i < n - 1 and grid[i + 1][j] == \'1\') or (j > 0 and grid[i][j - 1] == \'1\') or (j < m - 1 and grid[i][j + 1] == \'1\'): return \\"NO\\" return \\"YES\\""},{"question":"Your task is to implement a function that simulates the movement of vehicles on a one-dimensional circular track. The track is divided into n segments arranged in a circle, which means the segments are numbered sequentially from 0 to n-1, and the segment 0 is next to the segment n-1. There are v vehicles initially placed on some of the segments, with each segment possibly containing multiple vehicles. Each vehicle moves one segment forward (to the next higher segment number, with segment n-1 wrapping around to segment 0) at every time step. If at any time step multiple vehicles occupy the same segment, they remain on that segment and continue moving forward together in subsequent steps. The positions of the vehicles are given as a list containing the initial positions of each vehicle. Write a function `simulate_movement(n: int, positions: List[int], time_steps: int) -> List[int]` that returns the list of positions of all vehicles after a given number of time steps. The function should take in the number of segments `n`, the list `positions` that contains the initial positions of the vehicles, and the number of time steps to simulate `time_steps`. # Function Signature ```python def simulate_movement(n: int, positions: List[int], time_steps: int) -> List[int]: pass ``` # Input - `n` (1 ≤ n ≤ 10⁶): The number of segments in the circular track. - `positions` (1 ≤ len(positions) ≤ 10⁶): A list of integers where each integer represents the initial position of a vehicle on the track. - `time_steps` (1 ≤ time_steps ≤ 10⁹): The number of time steps to simulate. # Output - A list of integers representing the positions of all vehicles after the given number of time steps. # Example ```python n = 5 positions = [0, 1, 2, 3, 4] time_steps = 2 print(simulate_movement(n, positions, time_steps)) # Output: [2, 3, 4, 0, 1] ``` ```python n = 8 positions = [3, 4, 7] time_steps = 5 print(simulate_movement(n, positions, time_steps)) # Output: [0, 1, 4] ``` # Explanation In the first example, after two time steps: - The vehicle initially at position 0 moves to position 2. - The vehicle initially at position 1 moves to position 3. - The vehicle initially at position 2 moves to position 4. - The vehicle initially at position 3 moves to position 0. - The vehicle initially at position 4 moves to position 1. In the second example, after five time steps: - The vehicle initially at position 3 moves to position 0. - The vehicle initially at position 4 moves to position 1. - The vehicle initially at position 7 moves to position 4. # Note You should optimize your function to handle the upper limits of the input constraints efficiently.","solution":"from typing import List def simulate_movement(n: int, positions: List[int], time_steps: int) -> List[int]: Simulates the movement of vehicles on a one-dimensional circular track. Parameters: n (int): The number of segments in the circular track. positions (List[int]): A list of integers representing initial positions of each vehicle. time_steps (int): The number of time steps to simulate. Returns: List[int]: A list of integers representing the positions of all vehicles after the given number of time steps. # Calculate the new positions new_positions = [(pos + time_steps) % n for pos in positions] return new_positions"},{"question":"You are working with a fragmented text dataset, where each fragment is a string consisting of lowercase Latin characters. The dataset contains multiple fragments of varying lengths. You need to determine how many unique characters exist in each fragment and find the fragment that has the highest diversity of characters. If multiple fragments have the same number of unique characters, return the longest fragment among them. If there is still a tie, return the fragment which appears first in the dataset. The dataset can contain up to 10,000 fragments, and each fragment can have a length of up to 1,000 characters. The operation needs to be efficient given the constraints. Input: - The first line contains an integer k – the number of fragments (1 ≤ k ≤ 10,000). - The next k lines each contain a single fragment consisting of lowercase Latin characters. Output: - Print the fragment with the highest character diversity. If there are multiple such fragments, print the longest one. If there is still a tie, print the fragment that appears first in the dataset. Example: Input: 4 abcd aa aabc xyz Output: abcd Explanation: - The first fragment \\"abcd\\" has 4 unique characters. - The second fragment \\"aa\\" has 1 unique character. - The third fragment \\"aabc\\" has 3 unique characters. - The fourth fragment \\"xyz\\" has 3 unique characters. The fragment with the highest diversity is \\"abcd\\" with 4 unique characters.","solution":"def most_diverse_fragment(fragments): Returns the fragment with the highest diversity of characters. In case of a tie, it returns the longest fragment. If there is still a tie, it returns the fragment that appears first. max_unique_count = -1 best_fragment = \\"\\" for fragment in fragments: unique_chars = set(fragment) unique_count = len(unique_chars) if (unique_count > max_unique_count or (unique_count == max_unique_count and len(fragment) > len(best_fragment))): max_unique_count = unique_count best_fragment = fragment return best_fragment"},{"question":"Jessica loves to visit amusement parks and has made a list of parks she wants to visit during her vacation. Each park offers different attractions and costs an entry fee. She also has a limited budget that she needs to manage while trying to visit parks with as many unique attractions as possible. A park can be visited only once. Help Jessica maximize the number of unique attractions she can experience during her vacation by selecting a subset of parks within her budget. The input consists of: 1. An integer N (1 leq N leq 10^5) representing the number of parks. 2. An integer B (1 leq B leq 10^9) representing Jessica\'s budget. 3. The next N lines each describe a park with the following information: - An integer F[i] (1 leq F[i] leq 10^5) representing the entry fee of park i. - An integer K[i] (1 leq K[i] leq 100) representing the number of unique attractions in park i. - A list of K[i] space-separated integers representing the IDs of the attractions in park i (1 ≤ ID ≤ 10^9). Output a single integer representing the maximum number of unique attractions Jessica can visit within her budget. Example: Input: ``` 5 100 20 3 1 2 3 30 3 4 5 6 25 2 1 4 50 4 6 7 8 9 10 1 2 ``` Output: ``` 6 ``` Explanation: Jessica can visit parks with fees 20 (attractions 1, 2, 3), 10 (attraction 2), and 30 (attractions 4, 5, 6), spending a total of 60 within her budget of 100, and experiencing attractions 1, 2, 3, 4, 5, and 6.","solution":"def max_unique_attractions(n, b, parks): # Sort parks based on the entry fee in ascending order parks.sort(key=lambda x: x[0]) unique_attractions = set() total_cost = 0 for fee, k, attractions in parks: if total_cost + fee > b: continue # Skip if the total cost exceeds budget total_cost += fee unique_attractions.update(attractions) return len(unique_attractions) # Helper function for formatting input def parse_input(input_str): lines = input_str.strip().split(\'n\') n, b = map(int, lines[0].split()) parks = [] for line in lines[1:]: parts = list(map(int, line.split())) fee = parts[0] k = parts[1] attractions = parts[2:] parks.append((fee, k, attractions)) return n, b, parks # Example usage input_str = 5 100 20 3 1 2 3 30 3 4 5 6 25 2 1 4 50 4 6 7 8 9 10 1 2 n, b, parks = parse_input(input_str) print(max_unique_attractions(n, b, parks)) # 6"},{"question":"You are given two strings, `s` and `p`. Your task is to determine if `p` is a subsequence of `s`. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example, \\"ace\\" is a subsequence of \\"abcde\\", while \\"aec\\" is not. Input: - The first line contains the string `s` (1 ≤ |s| ≤ 1000). - The second line contains the string `p` (1 ≤ |p| ≤ 1000). Output: - Print \\"Yes\\" if `p` is a subsequence of `s`; otherwise, print \\"No\\". Examples: ```plaintext Input: abcde ace Output: Yes Input: abcde aec Output: No ```","solution":"def is_subsequence(s, p): Determine if string `p` is a subsequence of string `s`. :param s: Main string :param p: Subsequence candidate string :return: \\"Yes\\" if p is a subsequence of s, otherwise \\"No\\" iter_s = iter(s) for char in p: if char not in iter_s: return \\"No\\" return \\"Yes\\""},{"question":"Write a function that takes a non-negative integer `num` and returns a string representing its hexadecimal representation. The rules for the conversion are as follows: 1. You must use the characters \'0\' to \'9\' and \'a\' to \'f\' to represent the hexadecimal digits. 2. The returned string should be in lowercase and should not include any leading zeros (except if the number is 0, then the single \'0\' should be returned). 3. The maximum value of `num` is `2^31 - 1`. For example, given the following input: `num = 26` The output should be: `\\"1a\\"` Another example is: `num = 0` The output should be: `\\"0\\"` Implement the function in any programming language of your choice. Ensure that the solution handles all edge cases and runs efficiently for large input values.","solution":"def to_hex(num): Converts a non-negative integer to its hexadecimal representation. Args: num (int): A non-negative integer. Returns: str: The hexadecimal representation of the number in lowercase. if num == 0: return \\"0\\" hex_chars = \'0123456789abcdef\' hex_str = \\"\\" while num > 0: hex_str = hex_chars[num % 16] + hex_str num = num // 16 return hex_str"},{"question":"In a distant kingdom, there is a celebration where people play a guessing game with numbers. The rules are simple: A player starts with a number and repeatedly performs operations to arrive at the final value. The operations involve either adding or subtracting one from the current number. The player wins if they can make the final number equal a specified target value. To make the game more interesting, the kingdom\'s sages have set a limit to the number of operations a player can perform. Write a function that tells if it is possible to reach the target value from the start value using at most the given number of operations. If possible, the function should return the exact operations carried out in the form of a string consisting of characters \'A\' (for adding one) and \'S\' (for subtracting one). If there are multiple ways to achieve this, output any. If it\'s not possible to reach the target value within the given limit, return \\"IMPOSSIBLE\\". Function Signature: ```python def guessing_game(start: int, target: int, max_operations: int) -> str: pass ``` # Input - An integer `start` (−10^4 leq text{start} leq 10^4) representing the initial number. - An integer `target` (−10^4 leq text{target} leq 10^4) representing the target number. - An integer `max_operations` (1 leq text{max_operations} leq 10^3) representing the maximum number of operations allowed. # Output - A string that consists of exactly `max_operations` characters, with \'A\' representing an addition of one and \'S\' representing a subtraction of one. - If it is not possible to reach the target value within the given limit of operations, return \\"IMPOSSIBLE\\". # Example Example 1 ```python start = 3 target = 8 max_operations = 5 ``` Output: ```python \'AAAAA\' ``` Example 2 ```python start = 5 target = 10 max_operations = 3 ``` Output: ```python \'IMPOSSIBLE\' ``` Example 3 ```python start = -4 target = -8 max_operations = 4 ``` Output: ```python \'SSSS\' ``` Example 4 ```python start = 7 target = 5 max_operations = 2 ``` Output: ```python \'SS\' ```","solution":"def guessing_game(start: int, target: int, max_operations: int) -> str: Determines if it is possible to reach the target value from the start value using at most the given number of operations. If possible, returns the exact operations carried out in the form of a string consisting of characters \'A\' (for adding one) and \'S\' (for subtracting one). If it\'s not possible to reach the target value within the given limit, returns \\"IMPOSSIBLE\\". difference = target - start if abs(difference) > max_operations: return \\"IMPOSSIBLE\\" result = \\"\\" if difference >= 0: # Add the difference amount of \'A\' and pad the rest with either \'A\' or \'S\' result = \\"A\\" * difference + \\"A\\" * (max_operations - difference) else: # Add the absolute difference amount of \'S\' and pad the rest with either \'A\' or \'S\' result = \\"S\\" * abs(difference) + \\"A\\" * (max_operations - abs(difference)) return result"},{"question":"You are given an array of integers and a target integer. Your task is to find the length of the smallest contiguous subarray the sum of whose elements is greater than or equal to the target integer. If no such subarray exists, return 0 instead. The first line contains two integers n (1 leq n leq 100000) and s (1 leq s leq 10^9), where n is the number of elements in the array, and s is the target sum. The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 leq a_i leq 10^9) which represent the elements of the array. Output a single integer, the length of the smallest subarray with a sum of at least s. If no such subarray exists, output 0. For the sample, if the array is [2, 3, 1, 2, 4, 3] and the target sum is 7, the smallest subarray that meets or exceeds the target sum is [4, 3], which has a length of 2.","solution":"def smallest_subarray_with_given_sum(n, s, arr): Returns the length of the smallest subarray with a sum of at least s. If no such subarray exists, returns 0. min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= s: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"You are given an integer k and a list of integers. You need to determine if there exist two distinct indices i and j such that the sum of the numbers at these indices is a multiple of k. In other words, find if there are indices i and j such that (arr[i] + arr[j]) % k == 0. Write a function `has_pair_with_sum(arr, k)` that receives a list of integers `arr` and an integer `k`, and returns `True` if such a pair exists, and `False` otherwise. # Input - The input consists of an integer k (1 ≤ k ≤ 10^9), and a list of integers arr (1 ≤ len(arr) ≤ 10^6, -10^9 ≤ arr[i] ≤ 10^9). # Output - Return a boolean value indicating whether there is a pair of distinct indices in the list whose elements sum up to a multiple of k. # Example `has_pair_with_sum([1, 3, 2, 6, 8], 5)` should return `True` because indices 1 and 4 form a sum 3 + 2 = 5, which is a multiple of 5.","solution":"def has_pair_with_sum(arr, k): Determines if there exist two distinct indices i and j such that the sum of the elements at these indices is a multiple of k. :param arr: List of integers. :param k: Integer. :return: Boolean value indicating whether such a pair exists. n = len(arr) remainder_map = {} for i in range(n): remainder = arr[i] % k if remainder == 0: if remainder_map.get(0, 0) > 0: return True else: if remainder_map.get(k - remainder, 0) > 0: return True remainder_map[remainder] = remainder_map.get(remainder, 0) + 1 return False"},{"question":"You are given a string s consisting of lowercase letters. Your task is to find the length of the longest substring of s where every character appears at least k times. For example, if there is a substring where the character \'a\' appears at least k times, and \'b\' appears at least k times, and so on for all characters in the substring, then that substring meets the criteria. # Input - The first line contains a single integer k (1 le k le 10^5) — the minimum number of times each character must appear in the substring. - The second line contains the string s of length n (1 le n le 10^6). # Output - Print a single integer — the length of the longest substring of s where every character appears at least k times. # Examples **Input:** ``` 3 aaabb ``` **Output:** ``` 3 ``` **Input:** ``` 2 ababbc ``` **Output:** ``` 5 ``` **Explanation:** In the first example, the longest substring where each character appears at least 3 times is \\"aaa\\". In the second example, the longest substring where each character appears at least 2 times is \\"ababb\\". # Notes - You are expected to implement an efficient algorithm that can handle the upper limits of the constraints. Consider using a divide-and-conquer approach or sliding window technique to solve this problem within a reasonable time complexity.","solution":"def longest_substring_with_k_repeats(k, s): def longest_substring_helper(start, end): if end - start < k: return 0 # Calculate frequency of each character in the substring s[start:end] freq_map = {} for i in range(start, end): if s[i] not in freq_map: freq_map[s[i]] = 0 freq_map[s[i]] += 1 # Split the string based on characters that do not meet the frequency criteria for mid in range(start, end): if freq_map[s[mid]] < k: mid_next = mid + 1 while mid_next < end and freq_map[s[mid_next]] < k: mid_next += 1 return max(longest_substring_helper(start, mid), longest_substring_helper(mid_next, end)) return end - start return longest_substring_helper(0, len(s))"},{"question":"In a large organization, there is a hierarchical structure, where each of the employees has a unique employee ID and each employee (except the CEO) reports to exactly one manager. The CEO reports to no one. You need to implement a function to find the lowest common manager (LCM) of two given employees. The lowest common manager of two employees A and B in the hierarchy is defined as the manager who is the lowest (i.e., deepest) common ancestor of both A and B. # Input Format: - The first line contains an integer n (1 leq n leq 100,000), the number of employees. - The second line contains n - 1 integers, where the i-th integer represents the manager of employee i+2 (so the first employee always is the CEO and has no manager). - The third line contains two integers a and b (1 leq a, b leq n), representing the IDs of the two employees for whom you need to find the LCM. # Output Format: - Output a single integer, the ID of the lowest common manager of the two given employees. # Example: Input: ``` 7 1 1 2 2 3 3 4 5 ``` Output: ``` 2 ``` Explanation: The input represents the following hierarchy: ``` 1 / 2 3 / / 4 5 6 7 ``` The lowest common manager of employees 4 and 5 is employee 2.","solution":"def find_lca(n, managers, a, b): from collections import defaultdict, deque # Create the parent dictionary to hold the manager for each employee parent = {1: None} for i, manager in enumerate(managers, start=2): parent[i] = manager # Function to find the ancestors of an employee def find_ancestors(employee): ancestors = set() while employee is not None: ancestors.add(employee) employee = parent[employee] return ancestors # Find ancestors of both employees a and b ancestors_a = find_ancestors(a) ancestors_b = find_ancestors(b) # Find the lowest common ancestor by traversing from employee a upwards while b not in ancestors_a: b = parent[b] return b"},{"question":"Danny loves playing with his favorite set of n blocks numbered from 1 to n. Unfortunately, his little sister Lucy came and swapped the positions of some blocks. After she left, Danny realized that two of the blocks were swapped exactly once. Help Danny by finding the indices of the blocks that were swapped. If no blocks were swapped, return -1. The first line contains a single integer n (2 ≤ n ≤ 105) — the number of blocks. The second line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ n), where bi is the number written on the i-th block after Lucy swapped exactly two blocks. If there is a pair of swapped blocks, print two integers — the positions of the swapped blocks in increasing order. If no pair is found, print -1. Consider the first sample. ```python Input: 5 1 3 2 4 5 Output: 2 3 ```","solution":"def find_swapped_blocks(n, blocks): Finds the indices of the blocks that were swapped. Returns -1 if no blocks were swapped. swapped_indices = [] for i in range(n): if blocks[i] != i + 1: swapped_indices.append(i) if len(swapped_indices) == 2: return (swapped_indices[0] + 1, swapped_indices[1] + 1) else: return -1"},{"question":"You are given a string consisting of only digits \'0\' to \'9\'. You need to check if you can rearrange the digits of the string to form a multiple of three. If it\'s possible to rearrange the digits to form a multiple of three, output \\"YES\\"; otherwise, output \\"NO\\". As a reminder, a number is a multiple of three if the sum of its digits is divisible by three. The first line contains a single integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a single string of digits. The length of each string will be between 1 and 1000. For each test case, output \\"YES\\" if it\'s possible to rearrange the digits to form a multiple of three, or \\"NO\\" otherwise. # Example Input: ``` 3 123 456 1111 ``` Output: ``` YES YES YES ``` In the first test case, the sum of the digits is 1+2+3=6, which is a multiple of three. In the second test case, the sum of the digits is 4+5+6=15, which is a multiple of three. In the third test case, the sum of the digits is 1+1+1+1=4, which is not a multiple of three.","solution":"def can_rearrange_to_multiple_of_three(digit_strings): results = [] for digits in digit_strings: digit_sum = sum(int(digit) for digit in digits) if digit_sum % 3 == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to handle test cases from input def handle_test_cases(t, test_cases): return can_rearrange_to_multiple_of_three(test_cases)"},{"question":"Chris is a software developer who loves to test his coding skills with challenging problems. One day, he stumbled upon an intriguing task about string manipulation. The task is as follows: Chris is given a string `s` consisting of lowercase letters (\'a\'-\'z\') and an integer `k`. His mission is to find the length of the longest substring of `s` that contains at most `k` distinct characters. A substring is a contiguous sequence of characters within a string. Your task is to help Chris by writing a function that takes a string `s` and an integer `k` as inputs and returns the length of the longest substring that contains at most `k` distinct characters. **Input:** - A string `s` consisting of lowercase letters, and an integer `k` such that `1 <= k <= 26` and `1 <= |s| <= 100,000`, where `|s|` is the length of the string. **Output:** - A single integer representing the length of the longest substring containing at most `k` distinct characters. **Example:** ``` Input: s = \\"eceba\\", k = 2 Output: 3 Explanation: The substring is \\"ece\\" with length 3. Input: s = \\"aa\\", k = 1 Output: 2 Explanation: The substring is \\"aa\\" with length 2. ``` Note: - You are expected to have an efficient solution that could handle a string with length up to 100,000 characters.","solution":"def length_of_longest_substring_k_distinct(s, k): Find the length of the longest substring that contains at most k distinct characters. Args: s (str): The string to be evaluated. k (int): The maximum number of distinct characters allowed in the substring. Returns: int: The length of the longest substring with at most k distinct characters. if k == 0: return 0 n = len(s) if n == 0: return 0 left = 0 right = 0 char_count = {} max_len = 0 while right < n: char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"You are given an array of n integers. You can perform the following operation on the array: 1. Choose any two consecutive elements in the array and replace both of them with their sum. Your task is to determine the minimum possible maximum value in the array after performing the operation exactly k times. Input - The first line contains two integers n (2 leq n leq 50) and k (1 leq k leq n-1) — the number of integers in the array and the number of operations you can perform. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 1000) — the elements of the array. Output - Print a single integer — the minimum possible maximum value in the array after exactly k operations. Example Input: 5 2 1 3 5 7 9 Output: 22 Explanation: One optimal way to minimize the maximum value is as follows: 1. Perform the operation on elements 4 and 5: [1, 3, 5, (7 + 9)] -> [1, 3, 5, 16] 2. Perform the operation on elements 3 and 4: [1, 3, (5 + 16)] -> [1, 3, 21] The largest value in the array is 21, which is the minimum possible maximum value after 2 operations.","solution":"def minimize_max_value(n, k, array): Determines the minimum possible maximum value in the array after performing exactly k operations where each operation involves choosing any two consecutive elements and replacing both of them with their sum. :param n: Number of integers in the array :param k: Number of operations to perform :param array: List of n integers :return: Minimum possible maximum value in the array after k operations for _ in range(k): max_sum = -1 max_index = -1 for i in range(n-1): if array[i] + array[i+1] > max_sum: max_sum = array[i] + array[i+1] max_index = i array[max_index] = max_sum array.pop(max_index + 1) n -= 1 return max(array)"},{"question":"You are given an array of integers and an integer k. Your task is to find the total number of contiguous subarrays whose sum is exactly k. # Input The first line contains an integer n (1 le n le 2 cdot 10^5) — the number of integers in the array. The second line contains n integers a_1, a_2, ldots, a_n ( |a_i| le 10^4 ) — the array itself. The third line contains an integer k ( |k| le 10^8 ) — the target sum. # Output Output a single integer — the total number of contiguous subarrays whose sum equals k. # Example Input ``` 5 1 2 3 4 5 9 ``` Output ``` 2 ``` Explanation There are two subarrays that sum to 9: - The subarray [2, 3, 4] - The subarray [4, 5] *Note: This problem can be efficiently solved using a combination of prefix sums and hashmaps to track the number of times a particular prefix sum has been seen, facilitating a linear solution rather than a quadratic one.*","solution":"def count_subarrays_with_sum_k(arr, k): from collections import defaultdict # This dictionary will store the frequency of prefix sums prefix_sums = defaultdict(int) # Initialize with 0 sum having one occurrence prefix_sums[0] = 1 current_sum = 0 count = 0 for num in arr: current_sum += num if (current_sum - k) in prefix_sums: count += prefix_sums[current_sum - k] prefix_sums[current_sum] += 1 return count"},{"question":"In a grid of size n x m, a robot starts at the top-left corner and wants to move to the bottom-right corner. The robot can only move right or down. There are certain cells in the grid that the robot cannot step on, which are marked with a \'1\'. The cells that the robot can step on are marked with a \'0\'. Determine the number of unique paths the robot can take to reach the bottom-right corner from the top-left corner, given the constraints. You are given an integer matrix grid of size n x m where each cell is either \'0\' (walkable cell) or \'1\' (unwalkable cell). Write a function `numberOfPaths(grid: List[List[int]]) -> int` that returns the number of unique paths from the top-left corner to the bottom-right corner of the grid. If there is no possible path, return 0. # Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), the numbers of rows and columns in the grid. - The next n lines each contain m integers (either \'0\' or \'1\') representing the grid. # Output: - Print a single integer representing the number of unique paths from the top-left corner to the bottom-right corner. # Example: ``` Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 ``` In the example, the robot can take two paths from the top-left to bottom-right: - Right → Right → Down → Down - Down → Down → Right → Right","solution":"from typing import List def numberOfPaths(grid: List[List[int]]) -> int: n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Imagine you are a software developer who needs to process a series of log entries from a web server. Each log entry contains a timestamp and a request path. The paths can include user-specific information and query parameters, which need to be normalized. A sample log entry looks like this: ``` 2023-03-15T12:00:00 /users/123/profile?edit=true ``` In the example above: - `2023-03-15T12:00:00` is the timestamp. - `/users/123/profile?edit=true` is the request path. Your task is to write a function that processes a list of log entries and normalizes the request paths by removing user-specific information (represented by numeric IDs) and any query parameters. Given the following sample log entries: ``` [ \\"2023-03-15T12:00:00 /users/123/profile?edit=true\\", \\"2023-03-15T12:05:00 /posts/456/comments\\", \\"2023-03-15T12:10:00 /users/789/settings\\", \\"2023-03-15T12:15:00 /help\\", \\"2023-03-15T12:20:00 /posts/123/comments?like=true&share=false\\" ] ``` The normalized paths would be: ``` [ \\"2023-03-15T12:00:00 /users/profile\\", \\"2023-03-15T12:05:00 /posts/comments\\", \\"2023-03-15T12:10:00 /users/settings\\", \\"2023-03-15T12:15:00 /help\\", \\"2023-03-15T12:20:00 /posts/comments\\" ] ``` **Input:** - An integer `n` representing the number of log entries. - An array of `n` strings representing the log entries. **Output:** - An array of `n` strings representing the normalized log entries. **Function Signature:** ```python def normalize_logs(n: int, logs: List[str]) -> List[str]: ``` # Constraints: - The length of each log entry string will not exceed 200 characters. - The timestamp will always be in the \\"YYYY-MM-DDTHH:MM:SS\\" format. - The paths will only contain lowercase English letters, numeric digits, and valid URL characters like `/`, `?`, `=`, and `&`. - The numeric IDs will always be contiguous and only consist of digits, and they will appear between slashes in the path. # Example: ```python logs = [ \\"2023-03-15T12:00:00 /users/123/profile?edit=true\\", \\"2023-03-15T12:05:00 /posts/456/comments\\", \\"2023-03-15T12:10:00 /users/789/settings\\", \\"2023-03-15T12:15:00 /help\\", \\"2023-03-15T12:20:00 /posts/123/comments?like=true&share=false\\" ] n = len(logs) print(normalize_logs(n, logs)) # Output: [ \\"2023-03-15T12:00:00 /users/profile\\", \\"2023-03-15T12:05:00 /posts/comments\\", \\"2023-03-15T12:10:00 /users/settings\\", \\"2023-03-15T12:15:00 /help\\", \\"2023-03-15T12:20:00 /posts/comments\\" ] ```","solution":"import re from typing import List def normalize_logs(n: int, logs: List[str]) -> List[str]: Normalizes the request paths in the log entries. Parameters: n (int): Number of log entries. logs (List[str]): List of log entries containing timestamp and request paths. Returns: List[str]: List of normalized log entries. normalized_logs = [] for log in logs: timestamp, path = log.split(\' \', 1) # Remove query parameters base_path = path.split(\'?\', 1)[0] # Remove user-specific IDs normalized_path = re.sub(r\'/d+\', \'\', base_path) normalized_logs.append(f\\"{timestamp} {normalized_path}\\") return normalized_logs"},{"question":"You are provided with a 3x3 matrix representing a tic-tac-toe board. Each cell in the matrix is either \\"X\\", \\"O\\", or an empty string. Your task is to determine the current status of the game. Return: - \\"X\\" if \\"X\\" has won, - \\"O\\" if \\"O\\" has won, - \\"Draw\\" if the game is a draw, - \\"Incomplete\\" if the game is still in progress with no winner yet. You need to implement a function that processes this 3x3 matrix and returns the appropriate game status as a string. Your code should have the following signature: ```python def check_tic_tac_toe_status(board: List[List[str]]) -> str: ```","solution":"from typing import List def check_tic_tac_toe_status(board: List[List[str]]) -> str: # Check for win in the rows for row in board: if row[0] == row[1] == row[2] and row[0] != \\"\\": return row[0] # Check for win in the columns for col in range(3): if board[0][col] == board[1][col] == board[2][col] and board[0][col] != \\"\\": return board[0][col] # Check for win in the diagonals if board[0][0] == board[1][1] == board[2][2] and board[0][0] != \\"\\": return board[0][0] if board[0][2] == board[1][1] == board[2][0] and board[0][2] != \\"\\": return board[0][2] # Check if the game is still incomplete for row in board: if \\"\\" in row: return \\"Incomplete\\" # If none of the above, the game is a draw return \\"Draw\\" # Example usage: # board = [[\\"X\\", \\"O\\", \\"X\\"], # [\\"O\\", \\"X\\", \\"O\\"], # [\\"O\\", \\"\\", \\"X\\"]] # print(check_tic_tac_toe_status(board)) # Output: \\"X\\""},{"question":"Given an integer array of size n, you need to find the maximum sum of a subsequence such that no two consecutive elements are included in the subsequence. A subsequence is a sequence derived by deleting some or no elements of the array without changing the order of the remaining elements. For example, for the array [3, 2, 5, 10, 7], the subsequence [3, 5, 7] is valid but [3, 5, 10] is not valid since 5 and 10 are consecutive elements. Write a function `max_non_consecutive_sum(n, arr)` that takes the size of the array, n, and the integer array, arr, as inputs and returns the maximum sum of a subsequence where no two consecutive elements are picked. # Input - The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^4) representing the elements of the array. # Output - Output a single integer, the maximum sum of a non-consecutive subsequence. # Example 1: **Input:** ``` 4 3 2 5 10 ``` **Output:** ``` 13 ``` **Explanation:** By picking elements 3 and 10, the sum is 13. This is the maximum sum considering the constraint. # Example 2: **Input:** ``` 5 3 2 7 10 12 ``` **Output:** ``` 22 ``` **Explanation:** By picking elements 3, 10 and 12, the sum is 22. This is the maximum sum considering the constraint. # Note: The solution should efficiently handle the provided constraints, potentially using a dynamic programming approach to avoid a brute force solution that may lead to insufficient performance.","solution":"def max_non_consecutive_sum(n, arr): if n == 0: return 0 elif n == 1: return arr[0] # Create an array to store the maximum sums dp = [0] * n dp[0] = arr[0] dp[1] = max(arr[0], arr[1]) for i in range(2, n): # Either take the current element and add it to the max sum of arr[i-2], # or take the max sum of arr[i-1] dp[i] = max(arr[i] + dp[i-2], dp[i-1]) return dp[-1]"},{"question":"Given an integer n representing the length of a sequence of integers, you need to find a contiguous subsequence of the given sequence such that the sum of the elements in the subsequence is exactly s. The first line of input contains the integer n (1 ≤ n ≤ 100) and the integer s (0 ≤ s ≤ 10000). The second line contains n integers that form the sequence (each integer in the sequence is between -1000 and 1000). You need to output the start and end indices (1-based) of the contiguous subsequence that sums to s. If there are multiple solutions, output the one with the smallest starting index. If there is still a tie, output the one with the smallest ending index. If there is no such subsequence, output -1. Example Input: ``` 5 12 1 2 3 7 5 ``` Example Output: ``` 2 4 ``` Explanation: In the given sequence [1, 2, 3, 7, 5], the contiguous subsequence starting from index 2 to index 4 has a sum of 12 (2 + 3 + 7 = 12). Therefore, the output is 2 4. If no subsequence equals the sum s, the output should be -1.","solution":"def find_subsequence_with_sum(n, s, sequence): Finds the start and end indices of the contiguous subsequence that sums to s. If no such subsequence exists, returns -1. for start in range(n): curr_sum = 0 for end in range(start, n): curr_sum += sequence[end] if curr_sum == s: return start + 1, end + 1 return -1"},{"question":"Given a binary tree, you need to determine if it is balanced or not. A binary tree is considered balanced if the depth of the two subtrees of every node never differs by more than 1. The first line of input contains an integer, n, which represents the number of nodes in the binary tree (1 le n le 10^4). The next n-1 lines each contain two integers, u and v, indicating that there is an edge between nodes u and v (1 le u, v le n). Output \\"YES\\" if the binary tree is balanced, otherwise output \\"NO\\". # Example Input ``` 5 1 2 1 3 2 4 2 5 ``` Output ``` YES ``` Explanation In the example, the given tree is: ``` 1 / 2 3 / 4 5 ``` The depths of the subtrees of every node differ by no more than 1, thus the tree is balanced.","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] def build_tree(n, edges): nodes = {i: TreeNode(i) for i in range(1, n+1)} for u, v in edges: nodes[u].children.append(nodes[v]) nodes[v].children.append(nodes[u]) return nodes def is_balanced_tree(root): def depth_and_balance(node, parent): depths = [] balanced = True for child in node.children: if child == parent: continue child_balance, child_depth = depth_and_balance(child, node) depths.append(child_depth) balanced = balanced and child_balance if depths: max_depth = max(depths) min_depth = min(depths) balanced = balanced and (max_depth - min_depth <= 1) return balanced, max_depth + 1 else: return True, 1 balanced, _ = depth_and_balance(root, None) return balanced def is_balanced_binary_tree(n, edges): if n == 1: # A single node tree is always balanced return \\"YES\\" nodes = build_tree(n, edges) root = nodes[1] # assuming 1 is always present and root if is_balanced_tree(root): return \\"YES\\" else: return \\"NO\\""},{"question":"Bobby, Claudia, and Daniel are enthusiastic about collecting various types of colored stones. Each of them wants a certain number of stones of specific colors. Bobby collects red stones, Claudia collects blue stones, and Daniel collects yellow stones. Amy, knowing her friends\' interests, has a collection of stones containing different counts of these three types of stones and she wants to share the stones in such a way that everyone gets what they desire without running out of stones. Determine if it\'s possible to satisfy everyone’s needs with the given collection of stones. Note that it is not necessary to distribute all the stones, and some may remain unused. The first line contains three integers r, b, and y (1 le r, b, y le 10^5) — the number of red stones Bobby wants, the number of blue stones Claudia wants, and the number of yellow stones Daniel wants. The second line contains three integers R, B, and Y (1 le R, B, Y le 10^5) — the number of red stones, blue stones, and yellow stones in Amy\'s collection. Your task is to check whether it\'s possible to divide the stones among Bobby, Claudia, and Daniel in a way that each of them gets what they want. Print \\"YES\\" if such a distribution is possible, otherwise print \\"NO\\". # Input ```plaintext 5 7 3 10 8 6 ``` # Output ```plaintext YES ``` Here, Bobby takes 5 red stones, Claudia takes 7 blue stones, and Daniel takes 3 yellow stones, and Amy still has 5 red stones, 1 blue stone, and 3 yellow stones left in her collection. # Example ```plaintext Input: 2 4 5 2 3 10 Output: NO ``` In this case, there are not enough blue stones to satisfy Claudia’s requirements.","solution":"def can_satisfy_needs(r, b, y, R, B, Y): Determines if it is possible to satisfy everyone’s needs with the given collection of stones. Args: r (int): The number of red stones Bobby wants. b (int): The number of blue stones Claudia wants. y (int): The number of yellow stones Daniel wants. R (int): The number of red stones in Amy\'s collection. B (int): The number of blue stones in Amy\'s collection. Y (int): The number of yellow stones in Amy\'s collection. Returns: str: \\"YES\\" if it is possible to give each person the stones they want, otherwise \\"NO\\". if R >= r and B >= b and Y >= y: return \\"YES\\" return \\"NO\\""},{"question":"Given an integer array nums, you need to find the length of the longest subsequence such that every element in the subsequence is a power of the previous one. The relationship is mathematically expressed as nums[i] == nums[j]^k for some integer k > 1. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a function to return the length of the longest subsequence with this property. Function Signature: ```python def longest_power_subsequence(nums: List[int]) -> int: ``` Input: - nums: a list of integers (2 ≤ len(nums) ≤ 1000), each element is a positive integer (1 ≤ nums[i] ≤ 10^9). Output: - The length of the longest subsequence where every element is a power of the previous one. Example: ```python assert longest_power_subsequence([3, 9, 27, 81, 2, 4, 16]) == 4 assert longest_power_subsequence([1, 2, 4, 8, 16]) == 5 assert longest_power_subsequence([5, 10, 20, 40, 80]) == 0 ```","solution":"import math from typing import List def longest_power_subsequence(nums: List[int]) -> int: nums.sort() n = len(nums) if n == 0: return 0 dp = [1] * n num_to_index = {num: idx for idx, num in enumerate(nums)} for i in range(n): for j in range(i): if nums[i] % nums[j] == 0: k = nums[i] // nums[j] if k > 1 and k in num_to_index: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a string consisting of lowercase Latin letters. Your task is to arrange the characters of this string in such a way that no two adjacent characters are the same. If such an arrangement is not possible, output \\"NO\\". For example, given the string \\"aab\\", one possible valid arrangement is \\"aba\\". However, if the input is \\"aaab\\", since it is impossible to rearrange the characters to satisfy the condition, the output should be \\"NO\\". The first and only line contains a string s (1 le text{length of } s le 10^5), consisting of lowercase Latin letters (\'a\'-\'z\'). Output the rearranged string if it\'s possible. If there are multiple valid answers, output any of them. If it\'s not possible, output \\"NO\\". # Example **Input:** ``` aab ``` **Output:** ``` aba ``` **Input:** ``` aaab ``` **Output:** ``` NO ```","solution":"import heapq from collections import Counter def rearrange_string(s): # Count the frequency of each character freq = Counter(s) # Use a max heap to keep track of highest frequency characters max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) # String to store the result result = [] # Previous character and its count prev_count, prev_char = 0, \'\' # While there are characters left to process in the heap while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # If previous character can be put back into the heap if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update the previous character and its count prev_count, prev_char = count + 1, char # If the result length is equal to the original string length, it\'s valid if len(result) == len(s): return \'\'.join(result) else: return \\"NO\\""},{"question":"Alice has a collection of n books, each of varying thickness. She needs to sort her collection in non-decreasing order of thickness. However, she has a peculiar way of sorting them: she can only pick up two adjacent books and swap their positions. Use this method to sort the collection efficiently. You will need to determine the minimum number of swaps required to sort the books. The first line contains a positive integer n (1 ≤ n ≤ 1000) — the number of books. The second line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 1000) — the thickness of each book. Print the minimum number of swaps required to sort the books in non-decreasing order. In the first example, Alice has 3 books with thicknesses 3, 1, 2. The sequence in non-decreasing order is 1, 2, 3. She can swap book 1 and book 2 to form the sequence 1, 3, 2. Then she swaps book 2 and book 3 to get the final sorted sequence 1, 2, 3. The answer is 2 swaps. In the second example, Alice has 5 books with thicknesses 4, 3, 2, 1, 5. The sequence in non-decreasing order is 1, 2, 3, 4, 5. She needs to swap books multiple times to achieve this order. The answer is 6 swaps.","solution":"def min_swaps_to_sort_books(n, thicknesses): Returns the minimum number of adjacent swaps required to sort the books in non-decreasing order. Parameters: n (int): Number of books thicknesses (list of int): List of thicknesses of the books Returns: int: Minimum number of swaps # Implementation of Bubble Sort to count swaps swaps = 0 for i in range(n): for j in range(0, n-i-1): if thicknesses[j] > thicknesses[j+1]: thicknesses[j], thicknesses[j+1] = thicknesses[j+1], thicknesses[j] swaps += 1 return swaps"},{"question":"A network of communication towers is to be set up in a city with b buildings and b-1 communication lines. The network forms a tree structure, meaning there are no cycles, and there is exactly one path between any two buildings. Each building must be connected to at least one other building via a communication line. Each communication line can be operated by one of several service providers. To ensure that no service provider becomes too powerful, the city government has mandated the following restriction: No building should have more than two communication lines operated by the same service provider. Given this restriction, your task is to determine the minimum number of service providers required to set up the communication network and assign each line to a service provider in accordance with the rule. The first line contains an integer b (2 le b le 200000) — the number of buildings. The next b-1 lines describe the communication lines. Each line contains two integers, u and v (1 le u, v le b), indicating a communication line between buildings u and v. Your output should include the minimal number of service providers p required, followed by a list of b-1 integers, where each integer represents the service provider assigned to each communication line. If there are multiple valid assignments, print any of them. Example: ``` Input: 5 1 2 1 3 2 4 3 5 Output: 2 1 1 2 2 ``` This means that a minimum of 2 service providers is required, and the communication lines can be assigned to these providers as shown in the output.","solution":"def min_service_providers(b, connections): from collections import defaultdict # Build the adjacency list for the graph (tree) adj = defaultdict(list) for u, v in connections: adj[u].append(v) adj[v].append(u) # To determine the service provider assigned to each edge providers = [-1] * (b - 1) # Using DFS to assign providers def dfs(node, parent, provider, edge_count): current_provider = 1 # Start with the first provider for neighbor in adj[node]: if neighbor == parent: continue if current_provider == provider: # Change to the next provider if it\'s the same as parent current_provider += 1 if current_provider > 2: current_provider = 1 providers[edge_count[0]] = current_provider edge_count[0] += 1 # Call DFS for child node (neighbor) dfs(neighbor, node, current_provider, edge_count) # Switch provider for the next child current_provider += 1 if current_provider > 2: current_provider = 1 # Start DFS from node 1 (or any other node, as the result will be the same) dfs(1, -1, -1, [0]) return 2, providers # Example Usage: b = 5 connections = [(1, 2), (1, 3), (2, 4), (3, 5)] print(min_service_providers(b, connections))"},{"question":"There are m (m is even) tasks in total which need to be divided among k people (k is also even). Each task has a duration written in minutes and each person should have the same total amount of work time. Find the way to distribute the tasks such that the sum of the durations for tasks given to each person is equal. It is guaranteed that it is always possible. The first line of the input contains integer m (2 ≤ m ≤ 100) — the number of tasks. It is guaranteed that m is even. The second line contains the sequence of m positive integers t1, t2, ..., tm (1 ≤ ti ≤ 100), where ti is equal to the duration of the i-th task. Print k pairs of integers, where k = m / 2. Each pair should denote the tasks assigned to one person. Tasks are numbered in the order they appear in the input. It is guaranteed that solution exists. If there are several correct answers, you are allowed to print any of them. # Example In the first sample, tasks are distributed in such a way that each person has the sum of durations equal to 10 minutes. In the second sample, all values ti are equal. Thus, any distribution is acceptable. Input: 6 2 4 6 6 2 4 Output: 1 6 2 5 3 4","solution":"def distribute_tasks(tasks): Distributes the given tasks among people such that each person has the same total amount of work time. Parameters: tasks (list of int): A list of integers representing durations of tasks. Returns: list of tuples: A list of pairs representing the indices of tasks assigned to each person. n = len(tasks) paired_tasks = [] # Create a list of task durations along with their original indices indexed_tasks = [(tasks[i], i + 1) for i in range(n)] # Sort the tasks by duration indexed_tasks.sort() # Pair first item with the last, second with second last, and so on for i in range(n // 2): paired_tasks.append((indexed_tasks[i][1], indexed_tasks[n - 1 - i][1])) return paired_tasks # Sample input input_data = [2, 4, 6, 6, 2, 4] result = distribute_tasks(input_data) print(result) # Prints the result pairs"},{"question":"Imagine you are tasked with creating an automated system to help determine if a sequence of robot commands results in the robot returning to its starting position. The robot can move up, down, left, or right in a grid, and it initially starts at the origin (0,0). The commands are given as a string, where each character represents a movement: - \'U\' means move up by 1 unit, - \'D\' means move down by 1 unit, - \'L\' means move left by 1 unit, - \'R\' means move right by 1 unit. Your task is to write a function `judge_circle` that determines whether the robot returns to its original starting point after executing all the commands. # Input Format The input is a single string that represents the sequence of commands. # Output Format The output should be a boolean: `True` if the robot returns to the starting point, and `False` otherwise. # Constraints - The length of the input string will be in the range [0, 10000]. - The input string only contains characters \'U\', \'D\', \'L\', \'R\'. # Example Example 1 Input: ``` \\"UD\\" ``` Output: ``` True ``` Explanation: The robot moves up once and then down once. Since both movements cancel each other out, the robot returns to its starting point. Example 2 Input: ``` \\"LL\\" ``` Output: ``` False ``` Explanation: The robot moves left twice. Since there are no right movements to cancel this out, the robot does not return to the starting point. # Function Signature ```python def judge_circle(moves: str) -> bool: # Your code here ```","solution":"def judge_circle(moves: str) -> bool: Determine if the robot returns to the starting point (0,0) after executing all the commands. x, y = 0, 0 # Start at the origin for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x == 0 and y == 0"},{"question":"There is a grid of size n × m filled with numbers. Alice and Bob are playing a game in which they take turns. Alice starts first. In each turn, a player chooses a non-empty row or column and removes the entire row or column from the grid. The game continues until there are no more rows or columns left in the grid to remove. The player who cannot make a move loses the game. Assume both players play optimally. Determine the winner of the game based on the initial grid configuration. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000). The next n lines contain m integers each, denoting the elements of the grid. Output \\"Alice\\" if Alice will win the game, otherwise output \\"Bob\\". Example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: Alice","solution":"def grid_game_winner(n, m): Returns the winner of the game on an n x m grid. Alice starts first, and they take turns removing entire rows or columns. The winner is determined based on optimal play. # The game can be represented as a simple Nim game with piles. # The piles are the number of columns and rows. # The game is essentially a Nim-sum. # If the minimum of rows and columns (i.e., min(n, m)) is odd, Alice wins. # If it is even, Bob wins. if min(n, m) % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"You are given a string `input_str` containing a mixture of alphabets and digits. Write a function `extract_and_sort_digits` that extracts all the digits from the given string, sorts them in ascending order, and returns the sorted digits as a string. If there are no digits in the input string, the function should return an empty string. # Input - A single string `input_str` which consists of lowercase alphabets (\'a\' to \'z\'), uppercase alphabets (\'A\' to \'Z\'), and digits (\'0\' to \'9\'). # Output - A string containing the digits sorted in ascending order. # Examples ```python assert extract_and_sort_digits(\\"a1b2c3\\") == \\"123\\" assert extract_and_sort_digits(\\"abc\\") == \\"\\" assert extract_and_sort_digits(\\"64a3c9b2\\") == \\"23469\\" ``` # Constraints - The length of `input_str` will not exceed 1000 characters.","solution":"def extract_and_sort_digits(input_str): Extracts all digits from the input string, sorts them in ascending order, and returns the sorted digits as a string. If there are no digits, returns an empty string. digits = [char for char in input_str if char.isdigit()] sorted_digits = \'\'.join(sorted(digits)) return sorted_digits"},{"question":"You are given strings str1 and str2. Write a program to check if they are isomorphic. Two strings are isomorphic if the characters in str1 can be replaced to get str2. All occurrences of a character must be transformed to another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself. The first line contains the string str1 (1 le |str1| le 1000), the second line contains the string str2 (1 le |str2| le 1000). Both strings contain only lowercase English letters. If the strings are isomorphic, print \\"YES\\". Otherwise, print \\"NO\\". Example: Input: egg add Output: YES Input: foo bar Output: NO Note: In the first example, by replacing \'e\' with \'a\' and \'g\' with \'d\', the string \\"egg\\" becomes \\"add\\". The operation is consistent with the rules of the isomorphic strings. In the second example, there\'s no way to transform \\"foo\\" to \\"bar\\" consistently.","solution":"def are_isomorphic(str1, str2): Check whether two strings are isomorphic. if len(str1) != len(str2): return \\"NO\\" mapping_str1_to_str2 = {} mapping_str2_to_str1 = {} for char1, char2 in zip(str1, str2): if char1 in mapping_str1_to_str2: if mapping_str1_to_str2[char1] != char2: return \\"NO\\" elif char2 in mapping_str2_to_str1: if mapping_str2_to_str1[char2] != char1: return \\"NO\\" else: mapping_str1_to_str2[char1] = char2 mapping_str2_to_str1[char2] = char1 return \\"YES\\""},{"question":"A famous hotel management system stores reservations in an array of tuples, where each tuple contains two integers: the check-in day and the check-out day (both inclusive). Given a specific date, determine the total number of rooms occupied on that day. Your task is to write a function `occupied_rooms(reservations, date)` that takes a list of tuples `reservations`, where each tuple represents an interval (check-in, check-out) and an integer `date` representing the specific date you need to check. # Input - A list of tuples `reservations` where each tuple `(check_in, check_out)` represents the period a room is booked. - Each tuple contains two integers: `check_in` and `check_out` (1 ≤ check_in ≤ check_out ≤ 10^6). - The total number of reservations will not exceed 10^4. - An integer `date` (1 ≤ date ≤ 10^6) representing the specific date to check. # Output - An integer representing the total number of rooms occupied on the given date. # Example - Input: `reservations = [(1, 3), (2, 5), (4, 6)]`, `date = 4` - Output: `2` - Input: `reservations = [(1, 1), (2, 2), (3, 3)]`, `date = 2` - Output: `1` - Input: `reservations = [(5, 10), (15, 20), (1, 4)]`, `date = 12` - Output: `0` # Note - A room is considered occupied for both check-in and check-out days. - Ensure to check all tuples to determine the total number of rooms occupied on the given date.","solution":"def occupied_rooms(reservations, date): Returns the total number of rooms occupied on the given date. :param reservations: List of tuples, where each tuple (check_in, check_out) represents a reservation :param date: Integer representing the specific date to check :return: Integer representing the total number of rooms occupied on the given date return sum(check_in <= date <= check_out for check_in, check_out in reservations)"},{"question":"You\'re given an array of integers a of size n consisting of elements from 0 to m, inclusive. Your task is to modify the array such that every element is either incremented by 1 or decremented by 1, one by one, until all elements become equal. Calculate the minimum number of operations required to achieve this. **Constraints:** - 1 le n le 10^5 - 0 le m le 10^9 **Input:** The first line contains two integers, n (the size of the array) and m (the maximum value an element in the array can have). The second line contains n integers, the elements of the array. **Output:** Print the minimum number of operations required to make all the elements of the array equal. **Example:** **Input:** ``` 4 5 1 3 2 4 ``` **Output:** ``` 4 ``` **Explanation:** One optimal sequence of operations could be: - Increment 1 to 2 (1 operation) - Increment 2 to 3 (1 operation) - Decrement 4 to 3 (1 operation) - The array becomes [2, 3, 3, 3] with 3 operations, all increments towards the optimal middle element 3. Alternatively, other sequences of operations yielding 4 in total steps are also possible. **Note:** The goal is to compute the minimum operations by seeking the median of the array. Each element is moved towards the median, ensuring that the sum of absolute deviations (which represents the number of increments/decrements) is minimized.","solution":"def min_operations_to_equal_elements(n, m, arr): Returns the minimum number of operations required to make all elements in the array equal. arr.sort() median = arr[n // 2] operations = sum(abs(x - median) for x in arr) return operations # Example usage: # n, m = 4, 5 # arr = [1, 3, 2, 4] # print(min_operations_to_equal_elements(n, m, arr)) # Output: 4"},{"question":"You are given a rectangular grid of cells with dimensions n by m. Each cell in the grid contains either a 0 or a 1. A cell containing 1 is considered a \'bad cell\', and a cell containing 0 is considered an \'empty cell\'. You are to find and flag all \'bad cells\' by marking them and all the cells in the same row and column as \'bad cells\'. Specifically, for each \'bad cell\', change all the cells in its row and its column to 1. The first line of the input contains two integers n (1 ≤ n ≤ 50) and m (1 ≤ m ≤ 50) — the number of rows and the number of columns in the grid. The next n lines each contain m integers, either 0 or 1, representing the grid. Output the modified grid after flagging all the \'bad cells\'. # Example Input ``` 3 4 0 1 0 0 0 0 1 0 0 0 0 0 ``` Output ``` 1 1 1 1 1 1 1 1 0 1 1 1 ``` Input ``` 2 2 0 0 0 0 ``` Output ``` 0 0 0 0 ```","solution":"def flag_bad_cells(grid): Flags all \'bad cells\' by marking them and all cells in the same row and column as \'bad cells\'. Args: grid (list of list of int): The input n x m grid of integers. Returns: list of list of int: The modified grid after flagging all \'bad cells\'. if not grid: return [] n = len(grid) m = len(grid[0]) rows_to_flag = set() cols_to_flag = set() # Identify rows and columns that should be flagged for i in range(n): for j in range(m): if grid[i][j] == 1: rows_to_flag.add(i) cols_to_flag.add(j) # Modify the grid based on flagged rows and columns for i in range(n): for j in range(m): if i in rows_to_flag or j in cols_to_flag: grid[i][j] = 1 return grid"},{"question":"You are given a collection of filenames stored in a list. Your task is to write a function that organizes them into directories based on their extensions. Each file can only have one extension. If a filename does not have an extension, categorize it under a directory named \\"no_extension\\". For example, given the filenames: ``` [ \\"document.txt\\", \\"image.jpeg\\", \\"presentation.pptx\\", \\"spreadsheet.xlsx\\", \\"archive\\", \\"notes.doc\\", \\"image.png\\", \\"script.js\\", \\"script\\", \\"archive.zip\\" ] ``` You should group the files by their extensions and generate an output in a structured dictionary format, like this: ``` { \\"txt\\": [\\"document.txt\\"], \\"jpeg\\": [\\"image.jpeg\\"], \\"pptx\\": [\\"presentation.pptx\\"], \\"xlsx\\": [\\"spreadsheet.xlsx\\"], \\"no_extension\\": [\\"archive\\", \\"script\\"], \\"doc\\": [\\"notes.doc\\"], \\"png\\": [\\"image.png\\"], \\"js\\": [\\"script.js\\"], \\"zip\\": [\\"archive.zip\\"] } ``` # Input - A list of strings representing filenames. # Output - A dictionary where: - The keys are file extensions or \\"no_extension\\". - The values are lists of filenames with the corresponding extension. # Constraints - Each filename string will be between 1 and 100 characters long. - The list will contain between 1 and 1000 filenames. - Filenames will not have special characters except for \\".\\" # Function Signature ```python def organize_files_by_extension(filenames: List[str]) -> Dict[str, List[str]]: pass ``` # Example ```python filenames = [ \\"document.txt\\", \\"image.jpeg\\", \\"presentation.pptx\\", \\"spreadsheet.xlsx\\", \\"archive\\", \\"notes.doc\\", \\"image.png\\", \\"script.js\\", \\"script\\", \\"archive.zip\\" ] print(organize_files_by_extension(filenames)) ``` Output: ``` { \\"txt\\": [\\"document.txt\\"], \\"jpeg\\": [\\"image.jpeg\\"], \\"pptx\\": [\\"presentation.pptx\\"], \\"xlsx\\": [\\"spreadsheet.xlsx\\"], \\"no_extension\\": [\\"archive\\", \\"script\\"], \\"doc\\": [\\"notes.doc\\"], \\"png\\": [\\"image.png\\"], \\"js\\": [\\"script.js\\"], \\"zip\\": [\\"archive.zip\\"] } ```","solution":"from typing import List, Dict def organize_files_by_extension(filenames: List[str]) -> Dict[str, List[str]]: Organizes filenames into directories based on their extensions. Parameters: filenames (List[str]): List of filenames. Returns: Dict[str, List[str]]: Dictionary categorized by file extensions. result = {} for filename in filenames: if \'.\' in filename: ext = filename.split(\'.\')[-1] else: ext = \'no_extension\' if ext not in result: result[ext] = [] result[ext].append(filename) return result"},{"question":"You have been given a sequence of events on an online streaming platform. Each event is represented by a single word, indicating either a user’s watching activity or leaving activity. This streaming platform currently allows only one user to watch a stream at any given time. The sequence of events can either be: - \\"START\\" followed by a username indicating that the user has started watching. - \\"STOP\\" indicating that the current user has stopped watching. Your task is to verify if the provided sequence of events is valid. A sequence is considered valid if: 1. No two \\"START\\" events occur consecutively without a \\"STOP\\" in between. 2. No \\"STOP\\" event occurs if there has not been a \\"START\\" event by any user beforehand. The input consists of: - An integer n (1 ≤ n ≤ 100) — the number of events. - n lines each containing an event, either \\"START <username>\\" or \\"STOP\\". The username consists of lowercase Latin letters and is at most 100 characters long. Output \\"VALID\\" if the sequence of events is consistent with the rules outlined above, otherwise \\"INVALID\\". # Examples **Input** ``` 5 START alice STOP START bob STOP START alice ``` **Output** ``` VALID ``` **Input** ``` 4 START alice START bob STOP STOP ``` **Output** ``` INVALID ``` **Input** ``` 3 STOP START alice STOP ``` **Output** ``` INVALID ```","solution":"def verify_event_sequence(n, events): Verifies if the sequence of events is valid based on the rules. :param n: number of events :param events: list of events, each event is either \\"START <username>\\" or \\"STOP\\" :return: \\"VALID\\" if the event sequence is valid, otherwise \\"INVALID\\" watching = None for event in events: if event.startswith(\\"START\\"): if watching: return \\"INVALID\\" else: watching = True elif event == \\"STOP\\": if not watching: return \\"INVALID\\" else: watching = False return \\"VALID\\""},{"question":"Given an n x n grid with initially all cells set to 0, you are required to perform two types of operations on this grid: 1. **Update operation**: Update the value of a particular cell (i, j) to a given value x. 2. **Query operation**: Find the sum of the values of all the cells in a subgrid defined by its top-left corner (r1, c1) and bottom-right corner (r2, c2). The grid is indexed from 1 to n for both rows and columns. # Input - The first line of input contains two integers n and q (1 ≤ n ≤ 1000, 1 ≤ q ≤ 100000) - The size of the grid and the number of operations to perform. - The next q lines contain operations, where each operation is one of the following: - `1 i j x`: An update operation where the value at cell (i, j) (1 ≤ i, j ≤ n) is set to x (1 ≤ x ≤ 10^9). - `2 r1 c1 r2 c2`: A query operation where the sum of all cells in the subgrid defined by the top-left corner (r1, c1) and the bottom-right corner (r2, c2) (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ n) is required. # Output For each query operation, output the sum of the values in the specified subgrid. # Example Input ``` 3 5 1 1 1 5 1 2 2 8 1 3 3 7 2 1 1 2 2 2 1 1 3 3 ``` Output ``` 13 20 ``` # Note In the example input above: - After the first operation, the grid is: ``` 5 0 0 0 0 0 0 0 0 ``` - After the second operation, the grid is: ``` 5 0 0 0 8 0 0 0 0 ``` - After the third operation, the grid is: ``` 5 0 0 0 8 0 0 0 7 ``` - The first query (2 1 1 2 2) sums the cells within the subgrid (1, 1) to (2, 2), resulting in 5 + 0 + 0 + 8 = 13. - The second query (2 1 1 3 3) sums the cells within the entire grid, resulting in 5 + 0 + 0 + 0 + 8 + 0 + 0 + 0 + 7 = 20.","solution":"class Grid: def __init__(self, n): self.n = n self.grid = [[0] * n for _ in range(n)] def update(self, i, j, x): i -= 1 j -= 1 self.grid[i][j] = x def query(self, r1, c1, r2, c2): r1 -= 1 c1 -= 1 r2 -= 1 c2 -= 1 total_sum = 0 for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): total_sum += self.grid[i][j] return total_sum def handle_operations(n, q, operations): grid = Grid(n) results = [] for op in operations: if op[0] == 1: _, i, j, x = op grid.update(i, j, x) elif op[0] == 2: _, r1, c1, r2, c2 = op results.append(grid.query(r1, c1, r2, c2)) return results"},{"question":"You are given a string composed entirely of lowercase alphabets. Your task is to determine the smallest non-empty substring that is repeated somewhere else in the string. The substring should be at least 1 character long and should not overlap with itself within its repeated occurrences. # Input - A single line containing a string `s` (1 ≤ |s| ≤ 1000), which is composed only of lowercase English letters. # Output - A single line containing the smallest repeated non-empty substring in the given string. If no such substring exists, output \\"-1\\". # Examples **Example 1:** Input: ``` ababc ``` Output: ``` a ``` **Example 2:** Input: ``` abcdef ``` Output: ``` -1 ``` **Example 3:** Input: ``` banana ``` Output: ``` a ``` # Note - In the first example, the smallest substring \\"a\\" repeats twice in the string \\"ababc\\". - In the second example, there is no repeated substring. - In the third example, the smallest substring \\"a\\" repeats twice in the string \\"banana\\".","solution":"def smallest_repeated_substring(s): Returns the smallest non-empty substring that is repeated somewhere else in the string. If no such substring exists, returns \\"-1\\". n = len(s) for length in range(1, n): seen = set() for i in range(n - length + 1): substring = s[i:i+length] if substring in seen: return substring seen.add(substring) return \\"-1\\""},{"question":"You are given a string consisting of lowercase English letters. You need to find and return the minimum number of characters you need to add to this string to make it a palindrome. A palindrome is a word that reads the same backward as forward. For example, the input string \\"abb\\" can be turned into a palindrome by adding one character \'a\' at the start to form \\"abba\\" or by adding \'b\' at the end to form \\"abbbba\\". # Input - A single line containing a non-empty string `s` (1 leq |s| leq 1000), consisting of lowercase English letters. # Output - An integer representing the minimum number of characters needed to be added to the string to make it a palindrome. # Example Input ``` abc ``` Output ``` 2 ``` Explanation Adding characters \'a\' and \'b\' at the start makes it \\"cbabc\\", which is a palindrome. The minimum additions required to make \\"abc\\" a palindrome is 2.","solution":"def min_additions_to_make_palindrome(s): Returns the minimum number of characters needed to be added to the string s to make it a palindrome. def is_palindrome(subs): return subs == subs[::-1] n = len(s) # Check for each suffix if adding some prefix would result in a palindrome for i in range(n): if is_palindrome(s[i:]): return i return n # Worst case where all characters need to be duplicated"},{"question":"You are given a string consisting of only digits and spaces. The digits represent the numbers you get when you split the string by spaces. You need to write a function to return the sum of these numbers, but with a twist: instead of directly summing the numbers as integers, you must concatenate them first and then convert the concatenated string into an integer to get the final sum. For example, given the input string \\"12 34 5\\", the concatenation of the numbers \\"12\\", \\"34\\", and \\"5\\" gives \\"12345\\", and converting this back to an integer results in 12345, which is the answer. Write a function `concatenated_sum` that takes a string as input and returns the integer sum as described. **Input:** - A single string consisting of digits and spaces, representing the numbers (1 ≤ length of the string ≤ 100). **Output:** - A single integer, the sum after concatenation as described. **Example:** ```text Input: \\"12 34 56\\" Output: 123456 Input: \\"1 23 45\\" Output: 12345 Input: \\"0 1 2\\" Output: 12 ``` **Note:** - The input will not have leading or trailing spaces. - There will be at least one number in the string. - The concatenated result will always be within the range that can be represented by a standard integer in most programming languages.","solution":"def concatenated_sum(s): Concatenates numbers in the given string and returns the integer representation of the result. Parameters: s (str): a string of digits and spaces representing the numbers. Returns: int: the concatenated sum as described. # Split the string by spaces to get individual numbers as strings numbers = s.split() # Concatenate all the numbers concatenated_string = \'\'.join(numbers) # Convert the concatenated string to an integer and return it return int(concatenated_string)"},{"question":"You are given an integer array nums and an integer k. Your task is to count the number of pairs (i, j) such that: - 0 ≤ i < j < nums.length - The sum of the elements at indices i and j is divisible by k. The first line of input contains two integers n and k (2 ≤ n ≤ 10^5, 1 ≤ k ≤ 100), where n is the number of elements in the array. The second line contains n integers nums[i] (0 ≤ nums[i] ≤ 10^5), the elements of the array. Output the number of pairs whose sum is divisible by k. # Example Input 6 3 1 3 2 6 1 2 Output 5 Explanation The 5 pairs whose sum is divisible by 3 are: - (nums[0] + nums[4] = 1 + 1 = 2) - (nums[1] + nums[3] = 3 + 6 = 9) - (nums[2] + nums[5] = 2 + 2 = 4) - (nums[1] + nums[4] = 3 + 1 = 4) - (nums[2] + nums[3] = 2 + 6 = 8)","solution":"def count_divisible_pairs(nums, k): This function returns the number of pairs (i, j) in the array nums such that: - 0 ≤ i < j < len(nums) - The sum of the elements at indices i and j is divisible by k. :param nums: List of integers :param k: Integer for which the pairs\' sum should be divisible n = len(nums) count = 0 remainder_counts = [0] * k for num in nums: remainder = num % k count += remainder_counts[(k - remainder) % k] remainder_counts[remainder] += 1 return count"},{"question":"Monocarp is trying to create a symmetric string. A string is considered symmetric if the entire string can be split into two equal halves, where each half is a palindrome. For instance, the string \\"abccbaabccba\\" is symmetric because both \\"abccba\\" and \\"abccba\\" are palindromes. Given a string of lowercase English letters, you need to determine if it is possible to rearrange the characters of the string to make it symmetric. The first line contains an integer t (1 le t le 2 cdot 10^4) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 200) — the string that needs to be checked. For each test case, print \\"YES\\" if it is possible to rearrange the characters of the string to make it symmetric, otherwise print \\"NO\\". # Input: ``` 3 abccbaabccba abab aabbaa ``` # Output: ``` YES NO YES ``` Explanation: 1. The string \\"abccbaabccba\\" can be split into \\"abccba\\" and \\"abccba\\", both of which are palindromes. 2. The string \\"abab\\" cannot be rearranged to form two equal halves that are palindromes. 3. The string \\"aabbaa\\" can be split into \\"aabba\\" and \\"aabba\\", both of which are palindromes if rearranged properly.","solution":"def can_be_symmetric_string(s): Determines if the given string can be rearranged to form a symmetric string. from collections import Counter def is_palindrome_possible(substring): Check if the substring can be rearranged to form a palindrome. counts = Counter(substring) odd_count = sum(1 for count in counts.values() if count % 2 != 0) return odd_count <= 1 n = len(s) if n % 2 != 0: # If the string length is odd, it cannot be split into two equal halves return \\"NO\\" half_len = n // 2 first_half = s[:half_len] second_half = s[half_len:] if is_palindrome_possible(first_half) and is_palindrome_possible(second_half): return \\"YES\\" else: return \\"NO\\" def symmetric_strings(t, test_cases): results = [] for case in test_cases: results.append(can_be_symmetric_string(case)) return results"},{"question":"Given a string, find the length of the longest substring without repeating characters. You need to write a function that takes a string as input and returns the length of the longest substring that does not contain any repeating characters. # Input - A single string `s` (0 ≤ |s| ≤ 10^5), where `|s|` is the length of the string. The string contains only ASCII characters. # Output - A single integer representing the length of the longest substring without repeating characters. # Example Input ``` abcabcbb ``` Output ``` 3 ``` Explanation The answer is \\"abc\\", with the length of 3. Another example: Input ``` bbbbb ``` Output ``` 1 ``` Explanation The answer is \\"b\\", with the length of 1.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. :param s: input string :return: length of the longest substring without repeating characters char_index_map = {} max_length = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"You are given a list of integers and you want to make all the elements equal. You have two types of operations you can perform any number of times: 1. Select any single integer in the list and increase it by 1. 2. Select any single integer in the list and decrease it by 1. Determine the minimum number of operations required to make all the integers in the list equal. # Input - The first line contains an integer n (1 le n le 10^5) — the length of the list. - The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) separated by spaces. # Output - Print a single integer — the minimum number of operations required to make all the integers in the list equal. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 6 ``` Explanation In the example, one optimal way to make all elements equal is to make all elements equal to 3. This will require 2 operations on 1 (1->2->3), 1 operation on 2 (2->3), 0 operations on 3, 1 operation on 4 (4->3), and 2 operations on 5 (5->4->3), totaling 6 operations.","solution":"def min_operations_to_equalize(nums): Returns the minimum number of operations required to make all integers in the list equal. median = sorted(nums)[len(nums) // 2] return sum(abs(num - median) for num in nums) # Example usage n = 5 nums = [1, 2, 3, 4, 5] print(min_operations_to_equalize(nums)) # Output: 6"},{"question":"You have a list of integers where each element represents the height of a person. You need to re-arrange the list in such a way that each person\'s height is greater than or equal to the height of the person immediately before them, without changing the relative order of people shorter than a given threshold. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of people. The second line contains n integers — the heights of the people (1 ≤ height ≤ 10^9). The third line contains a single integer t (1 ≤ t ≤ 10^9) — the threshold height. Print the new list of heights, where each person\'s height is greater than or equal to the height of the person before them, and the relative order of individuals shorter than t is unchanged.","solution":"def rearrange_heights(n, heights, t): sorted_heights = sorted([h for h in heights if h >= t]) result = [] j = 0 for i in range(n): if heights[i] >= t: result.append(sorted_heights[j]) j += 1 else: result.append(heights[i]) return result # Function to convert input lists of strings (as given in examples) to required format and call the rearranging function def rearrange_heights_from_input(n, heights_list, t): heights = list(map(int, heights_list.split())) t = int(t) return rearrange_heights(n, heights, t)"},{"question":"In this problem, you\'re tasked with analyzing a special type of matrix known as a Toeplitz matrix. A Toeplitz matrix is a matrix in which each descending diagonal from left to right is constant. For example, the following is a Toeplitz matrix: ``` 1 2 3 4 5 1 2 3 6 5 1 2 7 6 5 1 ``` Your task is to determine if a given matrix is a Toeplitz matrix, and to handle updates in the matrix, maintaining its Toeplitz property. You will be given queries that either update a specific element in the matrix or check whether the matrix remains a Toeplitz matrix after potential updates. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 500), the dimensions of the matrix. The next n lines contain m space-separated integers each, representing the elements of the matrix. The following line contains an integer q (1 ≤ q ≤ 10^4), the number of queries. Each of the next q lines contains a query in one of the following two formats: - `1 i j x` (1 ≤ i ≤ n, 1 ≤ j ≤ m, -10^9 ≤ x ≤ 10^9): update the element at row i and column j to x. - `2`: check if the current matrix is a Toeplitz matrix and print \\"YES\\" or \\"NO\\". Example input: ``` 4 4 1 2 3 4 5 1 2 3 6 5 1 2 7 6 5 1 4 2 1 2 2 8 2 1 1 4 3 2 ``` Example output: ``` YES NO NO ```","solution":"def is_toeplitz(matrix): Returns True if the matrix is a Toeplitz matrix, otherwise False. n, m = len(matrix), len(matrix[0]) for i in range(n): for j in range(m): if i > 0 and j > 0 and matrix[i][j] != matrix[i-1][j-1]: return False return True def process_queries(n, m, matrix, queries): Process a list of queries on the provided matrix and return the result. result = [] for query in queries: if query[0] == 1: _, i, j, x = query matrix[i-1][j-1] = x elif query[0] == 2: if is_toeplitz(matrix): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"You are given an array with n integers. You can perform a series of operations to modify this array. There are two types of operations available: 1. Add a number x to all elements in a subarray. 2. Multiply all elements in a subarray by a number y. After modifying the array, you need to answer queries about the sum of elements in a given subarray. More formally: - Initially, you have an array a_1, a_2, ldots, a_n of length n (1 leq n leq 2^{10}). - You are given m operations (1 leq m leq 2^{12}) and q queries (1 leq q leq 2^{12}). For operations: - Each operation is described by three integers t, l, r, and one more integer which is either x or y depending on the type of the operation. Here: - t = 1 means adding x: Add x to each element in the subarray from index l to index r (1-based). - t = 2 means multiplying by y: Multiply each element in the subarray from index l to index r by y. For queries: - Each query consists of two integers l and r which represent the range of the subarray for which you need to find the sum. Input: - The first line contains two integers n and m. - The second line contains n integers, the elements of the array. - The next m lines describe the operations. - The following line contains a single integer q. - The next q lines contain two integers each, the range of the subarray for the sum query. Output: - For each query, output the sum of the elements in the specified subarray after all operations are performed. You need to implement efficient algorithms that can handle the operations and queries within given constraints. # Example Input: ``` 5 3 1 2 3 4 5 1 1 3 2 1 2 5 1 2 3 4 2 2 1 5 2 3 ``` Output: ``` 29 14 ``` Explanation: Performing the operations step by step: 1. Add 2 to elements from index 1 to 3: `[3, 4, 5, 4, 5]`. 2. Add 1 to elements from index 2 to 5: `[3, 5, 6, 5, 6]`. 3. Multiply elements from index 3 to 4 by 2: `[3, 5, 12, 10, 6]`. The array becomes `[3, 5, 12, 10, 6]`. 1. For the query from index 1 to 5: `3 + 5 + 12 + 10 + 6 = 36`. 2. For the query from index 2 to 3: `5 + 12 = 17`.","solution":"def modify_array(n, arr, m, operations, q, queries): # Apply each operation for operation in operations: t, l, r, z = operation for i in range(l - 1, r): if t == 1: arr[i] += z elif t == 2: arr[i] *= z # Handle queries results = [] for query in queries: l, r = query results.append(sum(arr[l - 1:r])) return results"},{"question":"Given a list of `n` integers, you are required to find a pair of integers (a, b) such that their product is as close as possible to a given integer `P`. If there are multiple pairs with the same product difference, return the pair with the smallest \'a\', and if still tied, return the pair with the smallest \'b\'. Both `a` and `b` should be elements within the given list. # Input - The first line contains two integers separated by a space: `n` (2 ≤ n ≤ 10^5) — the number of integers in the list, and `P` (|P| ≤ 10^9) — the target product. - The second line contains `n` integers, separated by spaces — the elements of the list. # Output Print two integers `a` and `b` (a ≤ b) from the list such that `|a*b - P|` is minimized. If there are multiple valid pairs, choose the pair with the smallest `a`. If there is still a tie, choose the pair with the smallest `b`. # Example Input ``` 5 15 4 5 1 3 10 ``` Output ``` 3 5 ``` Explanation - Pair (4, 5) gives product 20, difference from 15 is 5. - Pair (3, 5) gives product 15, difference from 15 is 0 (minimum possible). - Pair (1, 10) gives product 10, difference from 15 is also 5, but we prefer (3, 5) since their product difference is 0.","solution":"def closest_pair_to_product(n, P, numbers): numbers.sort() closest_pair = (float(\'inf\'), float(\'inf\')) closest_diff = float(\'inf\') for i in range(n): for j in range(i+1, n): a, b = numbers[i], numbers[j] current_product = a * b current_diff = abs(current_product - P) if current_diff < closest_diff or (current_diff == closest_diff and (a < closest_pair[0] or (a == closest_pair[0] and b < closest_pair[1]))): closest_diff = current_diff closest_pair = (a, b) return closest_pair"},{"question":"Polycarp has a bag full of mixed up numbers and another smaller bag that contains the real numbers that should be present in the larger bag. Unfortunately, the numbers in the larger bag are all jumbled up and may contain some extra numbers that don\'t belong. Polycarp needs your help to sort them out! You are given two arrays. The first array, `B`, contains the mixed-up numbers while the second array, `A`, contains the correct numbers that should be present in the first array, `B`. Your task is to check if the first array, `B`, contains at least one permutation that matches the numbers from the second array, `A`. Note that `A` can appear as a contiguous subarray in `B` after rearranging the numbers in `B`. Write a function that returns \\"Possible\\" if such a permutation exists, and \\"Impossible\\" otherwise. Function signature: `def is_possible(B: List[int], A: List[int]) -> str:` **Input:** - `B` is an array of integers with length `n` (1 le n le 10^5) - `A` is an array of integers with length `m` (1 le m le n) **Output:** - Return \\"Possible\\" if there exists at least one permutation in `B` that contains all the numbers from `A`, otherwise return \\"Impossible\\". **Example:** ```python B = [7, 1, 3, 2, 5, 1, 6] A = [1, 2, 3] is_possible(B, A) # Output: \\"Possible\\" B = [2, 1, 2, 1, 2] A = [1, 2, 3] is_possible(B, A) # Output: \\"Impossible\\" ``` # Approach 1. Read the arrays `B` and `A`. 2. Use sliding window technique along with a frequency count to check if any permutation of `A` exists as a contiguous subarray in `B`. 3. Return \\"Possible\\" if such a permutation exists, otherwise return \\"Impossible\\".","solution":"from typing import List from collections import Counter def is_possible(B: List[int], A: List[int]) -> str: This function checks if there\'s any permutation of array A that exists as a contiguous subarray in array B. # Length of A and B m, n = len(A), len(B) # Counter for array A counter_A = Counter(A) # Counter for the first window in B window_counter = Counter(B[:m]) # Slide the window over B for i in range(n - m + 1): # If the frequencies match, return \\"Possible\\" if window_counter == counter_A: return \\"Possible\\" # Slide the window: if i + m < n: # Remove the element going out of the window window_counter[B[i]] -= 1 if window_counter[B[i]] == 0: del window_counter[B[i]] # Add the new element coming into the window window_counter[B[i + m]] += 1 return \\"Impossible\\""},{"question":"You are given two integer arrays `a` and `b` both of the same length `n` (1 ≤ n ≤ 1000). Your task is to transform array `a` into array `b` by sorting. Specifically, you are allowed to perform the following operation any number of times: choose any subarray (continuous portion) of `a` and sort it (either in ascending or descending order). Determine if it is possible to transform `a` into `b` with any number of the allowed operations. Input - The first line contains a single integer `n` — the length of the arrays. - The second line contains `n` integers `a1, a2, ..., an` — the elements of the array `a`. - The third line contains `n` integers `b1, b2, ..., bn` — the elements of the array `b`. Output - Print \\"YES\\" if it is possible to transform array `a` into array `b` using the allowed operations. Otherwise, print \\"NO\\". Example Input: 4 4 2 7 1 1 2 4 7 Output: YES Explanation: One sequence of operations to transform array `a` to array `b` might be: - Sort the subarray [4, 2, 7, 1] to get [1, 2, 4, 7].","solution":"def can_transform(a, b): Determines if array \'a\' can be transformed into array \'b\' using the allowed operation. Parameters: a (list): The initial array of integers. b (list): The target array of integers. Returns: str: \'YES\' if \'a\' can be transformed into \'b\', otherwise \'NO\'. return \\"YES\\" if sorted(a) == sorted(b) else \\"NO\\""},{"question":"A delivery company wants to optimize the route of its delivery vehicles. The company has `n` delivery points, each having a unique id from 1 to n. The delivery route can be represented as a permutation of delivery points d1, d2, ..., dn. The company needs to process multiple queries about these routes to ensure timely deliveries. There are two types of operations that can be performed on the route: 1. **Swap Operation:** Swap the delivery points at two positions. 2. **Check Segment:** Determine whether all delivery points within a specified segment of the route are in ascending order. The company is concerned about minimizing the time spent checking segments since that directly affects delivery speed. Therefore, they want to process each query efficiently. The first line contains an integer `n` — the total number of delivery points, 2 ≤ n ≤ 10^5. The second line contains n space-separated integers — the initial delivery route permutation. The third line contains an integer `q` — the number of queries, 1 ≤ q ≤ 10^5. The next `q` lines contain the queries. Each query i looks like `qi xi yi`, where `qi` is the query type (1 for a swap operation, 2 for checking a segment), and `1 ≤ xi ≤ yi ≤ n`. For each query with `qi = 2`, print \\"YES\\" if the delivery points in the segment from xi to yi are in strictly ascending order, otherwise print \\"NO\\". Example: ``` Input: 5 3 1 5 2 4 4 1 2 4 2 1 3 2 2 5 1 3 5 Output: NO NO ```","solution":"def delivery_routes(n, route, queries): Returns the results for the queries about the delivery routes. Args: n (int): Number of delivery points. route (list of int): The initial delivery route permutation. queries (list of tuple): The queries to be processed. Returns: list of str: The results of the queries. result = [] for q in queries: if q[0] == 1: # Swap operation x, y = q[1] - 1, q[2] - 1 route[x], route[y] = route[y], route[x] elif q[0] == 2: # Check segment x, y = q[1] - 1, q[2] - 1 segment = route[x:y+1] if segment == sorted(segment): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"Consider a coding competition where each participant works on three problems of different levels (easy, medium, hard). The competition follows specific scoring rules based on time taken to solve each problem. Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) - the number of participants. - The next `n` lines each contain 6 space-separated integers representing the completion times (`ei`, `mi`, `hi`) and scoring multipliers (`se`, `sm`, `sh`) for the easy, medium, and hard problems respectively. Each of these times and multipliers follow constraints (0 ≤ ei, mi, hi ≤ 120, 1 ≤ se, sm, sh ≤ 10). If the time for a problem is `0`, it means the participant didn\'t solve that problem. Output The output should be the maximum score any participant can achieve. Scoring Rules - For a participant who solves a problem, their score for that problem is calculated as `120 - t * s` where `t` is the time taken and `s` is the scoring multiplier. - If they didn\'t solve the problem, their score for that problem is `0`. Example # Input: ``` 3 45 50 70 2 3 5 30 70 90 1 2 4 60 0 110 3 4 6 ``` # Output: ``` 370 ``` # Explanation: - Participant 1 scores: (120 - 45*2) + (120 - 50*3) + (120 - 70*5) = 30 + 120 + (-230) = -80 - Participant 2 scores: (120 - 30*1) + (120 - 70*2) + (120 - 90*4) = 90 + -20 + -240 = -170 - Participant 3 scores: (120 - 60*3) + 0 + (120 - 110*6) = -60 + 0 + -540 = -600 Therefore, the highest score is 370.","solution":"def calculate_maximum_score(n, participants_data): def score_for_problem(time, multiplier): if time == 0: return 0 return max(0, 120 - time * multiplier) max_score = float(\'-inf\') for data in participants_data: ei, mi, hi, se, sm, sh = data score = (score_for_problem(ei, se) + score_for_problem(mi, sm) + score_for_problem(hi, sh)) if score > max_score: max_score = score return max_score"},{"question":"Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root. The length of path between two nodes is represented by the number of edges between them. You need to write a function ```python def longestUnivaluePath(root: TreeNode) -> int: ``` where `root` is the root of the binary tree. Each node has a `val` attribute which represents its value and a `left` and `right` attribute which represent its left and right child respectively. **Example 1:** ``` Input: 5 / 4 5 / 1 1 5 Output: 2 ``` **Example 2:** ``` Input: 1 / 4 5 / 4 4 Output: 2 ``` **Constraints:** - The given binary tree will have between 1 and 2000 nodes. - Each `TreeNode` will have an integer value between 0 and 1000.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def longestUnivaluePath(root: TreeNode) -> int: def dfs(node): if not node: return 0, None left_length, left_value = dfs(node.left) right_length, right_value = dfs(node.right) left_arrow = right_arrow = 0 if node.left and node.left.val == node.val: left_arrow = left_length + 1 if node.right and node.right.val == node.val: right_arrow = right_length + 1 # Update the longest path nonlocal max_length max_length = max(max_length, left_arrow + right_arrow) return max(left_arrow, right_arrow), node.val max_length = 0 dfs(root) return max_length"},{"question":"In the kingdom of ByteLand, citizens celebrate a festival every year, where they create magnificent tapestries from a grid of colored tiles. Each tapestry is represented as an n x m grid containing integers, where each number indicates a specific color. The festival organizers want to find a way to determine if a given grid can be transformed into a symmetric pattern. A symmetric pattern in this context is defined as a grid that looks the same when reflected along its main diagonal (i.e., the top-left to bottom-right diagonal). Formally, a grid is symmetric if for every pair of indices (i, j), the cell at (i, j) contains the same color as the cell at (j, i). Your task is to write a function that takes an n x m grid as input and determines whether it can be transformed into a symmetric pattern. If the grid can be made symmetric, the function should return \\"YES\\"; otherwise, it should return \\"NO\\". The first line of input contains two integers n and m (1 ≤ n, m ≤ 500), representing the number of rows and columns in the grid. Each of the next n lines contains m integers, representing the colors of the tiles in the grid. The function should output a single string \\"YES\\" or \\"NO\\". Examples: Input 3 3 1 2 3 2 4 5 3 5 6 Output YES Input 4 4 1 2 3 4 2 1 6 7 3 6 1 8 4 7 8 1 Output YES Input 2 3 1 2 3 4 5 6 Output NO","solution":"def can_be_symmetric(grid): Check if the given grid can be transformed into a symmetric pattern along its main diagonal. Arguments: grid -- List of lists where each sublist represents a row in the grid. Returns: \'YES\' if the grid can be symmetric, \'NO\' otherwise. n = len(grid) m = len(grid[0]) if n != m: return \\"NO\\" for i in range(n): for j in range(i + 1, n): if grid[i][j] != grid[j][i]: return \\"NO\\" return \\"YES\\" # Example usage # User would typically provide the grid input in some manner. # For unit testing, we will provide directly to the function above."},{"question":"Вам нужно реализовать алгоритм для обработки запросов чата на бронирование переговорных комнат в офисе. Есть несколько комнат, каждая из которых может быть забронирована на определенное время. Если желаемое время уже занято, заявка должна быть отклонена. На входе дано целое число n (1 ≤ n ≤ 100,000) — количество запросов на бронирование. Затем следует n строк, каждая из которых содержит идентификатор комнаты (целое число от 1 до 1,000,000), время начала и время окончания бронирования (две через пробел целых чисел T1 и T2, 1 ≤ T1 < T2 ≤ 1,000,000). Время бронирования одной комнаты не должно пересекаться с другим бронированием этой же комнаты. Выведите \\"Accepted\\" для каждой заявки, если бронирование успешно, и \\"Rejected\\" в противном случае. # Пример Вход: ``` 5 1 3 9 2 1 5 1 4 8 1 10 20 2 4 9 ``` Выход: ``` Accepted Accepted Rejected Accepted Rejected ```","solution":"def process_booking_requests(n, requests): room_timetable = {} results = [] for request in requests: room_id, T1, T2 = map(int, request.split()) if room_id not in room_timetable: room_timetable[room_id] = [] room_timetable[room_id].append((T1, T2)) results.append(\\"Accepted\\") else: conflicts = False for booking in room_timetable[room_id]: if not (T2 <= booking[0] or T1 >= booking[1]): conflicts = True break if conflicts: results.append(\\"Rejected\\") else: room_timetable[room_id].append((T1, T2)) results.append(\\"Accepted\\") return results"},{"question":"You have been given an array consisting of n integers. Your task is to form a subarray of this array such that the sum of the subarray is as large as possible, but does not exceed k. Multiple subarrays with the same sum are allowed, but in that case, you need to find the one with the smallest length. If there are still multiple subarrays, find the lexicographically smallest one. A subarray is defined as a contiguous segment of the array. The lexicographical order is defined as usual: the subarray [a1, a2, ..., am] is smaller than [b1, b2, ..., bm], if they differ at the first position where they differ, and the subarray starting with that position in the first one is smaller. Input format: * The first line of input consists of two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 10^9). * The second line consists of n integers which represent the elements of the array (each integer in the array is between -10^9 and 10^9). Output format: * Print n integers which represent the lexicographically smallest subarray with the largest sum not exceeding k. Example: Input: ``` 5 10 1 2 3 4 5 ``` Output: ``` 1 2 3 4 ``` Explanation: In this case, the subarray with the largest sum not exceeding 10 is [1, 2, 3, 4] with a sum of 10. There are no other subarrays with the same sum. Hence the result is [1, 2, 3, 4].","solution":"def max_sum_subarray(n, k, arr): Finds the lexicographically smallest subarray with the largest sum not exceeding k. max_sum = 0 min_length = float(\'inf\') best_subarray = [] for start in range(n): current_sum = 0 current_subarray = [] for end in range(start, n): current_sum += arr[end] current_subarray.append(arr[end]) if current_sum <= k: if current_sum > max_sum or (current_sum == max_sum and len(current_subarray) < min_length) or (current_sum == max_sum and len(current_subarray) == min_length and current_subarray < best_subarray): max_sum = current_sum min_length = len(current_subarray) best_subarray = current_subarray[:] return best_subarray"},{"question":"You are given a sequence of n integers a1, a2, ..., an. Your task is to determine if you can partition this sequence into two non-empty subsequences such that the sum of the elements in the first subsequence is equal to the sum of the elements in the second subsequence. Input: - The first line contains a single integer n (2 ≤ n ≤ 100,000) - the length of the sequence. - The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) - the elements of the sequence. Output: - Output \\"YES\\" (without the quotes) if you can partition the sequence into two such subsequences. - Otherwise, output \\"NO\\" (without the quotes). Examples: Input: 4 1 2 3 4 Output: YES Input: 3 1 2 4 Output: NO","solution":"def can_partition_sequence(n, sequence): total_sum = sum(sequence) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 current_sum = 0 seen_sums = set() for num in sequence: current_sum += num if current_sum == target or (current_sum - target) in seen_sums: return \\"YES\\" seen_sums.add(current_sum) return \\"NO\\""},{"question":"You are given a tree consisting of n nodes and n-1 edges. Each node has a value associated with it. You need to perform multiple queries on this tree. Each query can be of two types: 1. Update the value of a node. 2. Find the maximum value of nodes in the subtree of a given node. The first line contains two integers n and q (1 le n, q le 100,000): the number of nodes in the tree and the number of queries. The second line contains n integers representing the values of the nodes. Each of the next n-1 lines contains two integers u and v (1 le u, v le n): an edge between node u and node v. Each of the next q lines contains a query in one of the following formats: - \\"1 x y\\" where 1 le x le n and -10^9 le y le 10^9: Update the value of node x to y. - \\"2 x\\" where 1 le x le n: Find and print the maximum value in the subtree rooted at node x. Output the result of each query of the second type. # Example Input ``` 5 5 1 2 3 4 5 1 2 1 3 3 4 3 5 2 3 1 3 10 2 3 1 5 -1 2 5 2 1 ``` Output ``` 5 10 -1 10 ```","solution":"from collections import defaultdict, deque class Tree: def __init__(self, n, values): self.n = n self.values = values self.adj = defaultdict(list) self.subtree_max = [-float(\'inf\')] * (n + 1) def add_edge(self, u, v): self.adj[u].append(v) self.adj[v].append(u) def dfs(self, node, parent): self.subtree_max[node] = self.values[node - 1] for neighbor in self.adj[node]: if neighbor != parent: self.dfs(neighbor, node) self.subtree_max[node] = max(self.subtree_max[node], self.subtree_max[neighbor]) def update_value(self, x, y): self.values[x - 1] = y self.dfs(1, -1) # Recompute the subtree maxima def get_subtree_max(self, x): return self.subtree_max[x] def process_queries(n, values, edges, queries): tree = Tree(n, values) for u, v in edges: tree.add_edge(u, v) tree.dfs(1, -1) # Initialize subtree maximum values results = [] for query in queries: if query[0] == 1: _, x, y = query tree.update_value(x, y) elif query[0] == 2: _, x = query results.append(tree.get_subtree_max(x)) return results"},{"question":"# Balanced Parentheses Sequences You are given a sequence of parentheses, and your task is to determine the length of the longest valid (well-formed) parentheses substring. A valid parentheses string is defined as: 1. An empty string. 2. A string that consists of pairs of opening and closing brackets that match correctly. For instance: - \\"()\\" is valid. - \\"(()\\" is not valid. - \\"(()())\\" is valid. # Input Format: - The first line of the input contains an integer n (1 le n le 10^6), representing the length of the sequence. - The second line contains a string of length n consisting of only \'(\' and \')\'. # Output Format: - A single integer representing the length of the longest valid parentheses substring. # Example: **Input:** ``` 6 (()()) ``` **Output:** ``` 6 ``` **Explanation:** The entire string \\"(()())\\" is a valid parentheses substring. **Input:** ``` 9 )((())((( ``` **Output:** ``` 4 ``` **Explanation:** The longest valid parentheses substring is \\"(())\\", which has a length of 4. # Constraints: - Your solution should have a time complexity of O(n). # Note: You might want to utilize a stack or dynamic programming to efficiently solve this problem.","solution":"def longest_valid_parentheses(s: str) -> int: Returns the length of the longest valid (well-formed) parentheses substring. max_len = 0 stack = [-1] # Stack to keep track of indices, initialized with base index -1 for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: stack.append(i) return max_len"},{"question":"You are a treasure hunter exploring a grid-based ancient city. The city is represented by an n times n grid, with each cell having a value denoting the number of treasures present. You start from the top-left cell of the grid at (1, 1) and your goal is to collect the maximum number of treasures possible by the time you reach the bottom-right cell at (n, n). From any cell (i, j), you can only move to either the cell to the right (i, j+1) or the cell below (i+1, j). Write a program that computes the maximum number of treasures you can collect during your journey from the top-left cell to the bottom-right cell. # Input - The first line contains a single integer n (1 le n le 500) — the size of the grid. - Each of the next n lines contains n integers a_{ij} (0 le a_{ij} le 1,000) — the number of treasures present in each cell of the grid. # Output - Output a single integer — the maximum number of treasures you can collect. # Example Input ``` 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 12 ``` # Explanation - One of the possible paths to collect the maximum treasures is: - Start at (1,1) with treasures = 1. - Move to (1,2) with treasures = 3. Total = 1+3 = 4. - Move to (1,3) with treasures = 1. Total = 4+1 = 5. - Move to (2,3) with treasures = 1. Total = 5+1 = 6. - Move to (3,3) with treasures = 1. Total = 6+1 = 7. - Move to (3,2) with treasures = 2. Total = 7+4 = 9. - Move to (3,1) with treasures = 4. Total = 12. The output is therefore 12.","solution":"def max_treasures(n, grid): Computes the maximum number of treasures one can collect on a grid. Args: n : int : the size of the grid grid : List[List[int]] : the grid with treasures Returns: int : maximum number of treasures # DP table to store the maximum treasures collected up to cell (i, j) dp = [[0] * n for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the dp table for i in range(n): for j in range(n): if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[n-1][n-1]"},{"question":"Alice loves reading and rearranging words in a sentence. She usually picks a sentence, splits it into words, and then rearranges the words so that each word is followed by the longest remaining word that hasn\'t been used yet. If there are ties (words of the same length), she picks the lexicographically smallest one. However, it\'s challenging for her to do this manually. Write a function `rearrange_sentence(sentence: str) -> str` which takes a sentence consisting of words separated by spaces (the sentence will not contain punctuation) and returns a new sentence where the words are rearranged according to Alice\'s rules. # Input - A single line containing a sentence `sentence` (1 ≤ length of sentence ≤ 1000). Each word in the sentence only contains lowercase letters and spaces separate the words. No leading or trailing spaces. # Output - A single line containing the rearranged sentence according to Alice\'s rules. # Example ```python sentence = \\"alice loves long exciting conversations\\" print(rearrange_sentence(sentence)) # Output: # conversations exciting alice loves long ``` # Explanation In the example above: - \\"conversations\\" is the longest word. - \\"exciting\\" is the next longest word. - \\"alice\\" and \\"loves\\" both have 5 letters, but \\"alice\\" comes first lexicographically. - \\"long\\" is the next one with 4 letters. Arrange them in this sequence: \\"conversations exciting alice loves long\\".","solution":"def rearrange_sentence(sentence: str) -> str: Rearranges the sentence such that each word is followed by the longest remaining word that hasn\'t been used yet. If there are ties (words of the same length), picks the lexicographically smallest one. words = sentence.split() # Sort words by length in descending order, and by lexicographical order in case of tie words.sort(key=lambda x: (-len(x), x)) return \' \'.join(words)"},{"question":"You are given a set of weather data from various weather stations around the world. Each station records the temperature and humidity at noon each day. Your task is to identify the days with the three highest temperatures at each station. The input consists of multiple lines, each containing the following information: - `station_id` (integer): The ID of the weather station. - `year` (integer): The year of the observation. - `month` (integer): The month of the observation. - `day` (integer): The day of the observation. - `temperature` (float): The temperature recorded at that station on that day. - `humidity` (float): The humidity recorded at that station on that day. Each line is formatted as follows: ``` station_id year month day temperature humidity ``` Your output should contain the top three days with the highest temperatures for each station. If a station has recorded less than three observations, include all available observations. For each day, output the `station_id`, `year`, `month`, `day`, and `temperature`, sorted by `station_id` and then by temperature in descending order. # Example Input: ``` 1 2022 6 1 30.5 45 1 2022 6 2 32.0 50 1 2022 6 3 31.5 48 2 2022 6 1 25.0 60 2 2022 6 2 26.5 65 2 2022 6 3 24.5 55 ``` # Example Output: ``` 1 2022 6 2 32.0 1 2022 6 3 31.5 1 2022 6 1 30.5 2 2022 6 2 26.5 2 2022 6 1 25.0 2 2022 6 3 24.5 ```","solution":"from collections import defaultdict import heapq def get_top_three_days(data_lines): Identify the days with the three highest temperatures at each station. :param data_lines: List of strings, each string containing station_id, year, month, day, temperature, and humidity. :return: List of tuples containing station_id, year, month, day, and temperature. station_data = defaultdict(list) # Parse the input data and store temperature data by station_id for line in data_lines: station_id, year, month, day, temperature, humidity = line.split() station_id = int(station_id) year = int(year) month = int(month) day = int(day) temperature = float(temperature) # Store as a tuple (temperature, year, month, day) for easy sorting station_data[station_id].append((temperature, year, month, day)) result = [] for station_id, temps in station_data.items(): # Get the three highest temperature days top_three = heapq.nlargest(3, temps) # By default, it sorts by the first element in tuple which is temperature result.extend([(station_id, year, month, day, temperature) for temperature, year, month, day in top_three]) # Sort the final result by station_id and temperature in descending order result.sort(key=lambda x: (x[0], -x[4])) return result"},{"question":"You are given a text document that has several paragraphs. Each paragraph contains multiple sentences. Your task is to determine the paragraph that has the highest frequency of a specified word. Write a function, `find_paragraph_with_max_word_freq(paragraphs, word)`, that takes as input: 1. `paragraphs`: a list of strings, where each string represents a paragraph. 2. `word`: a string, representing the word to search for. The function should return the 0-based index of the paragraph that has the highest frequency of the specified word. If there is a tie (i.e., multiple paragraphs have the same highest frequency), return the lowest index among them. The word match should be case-insensitive and should match whole words only (i.e., \'word\' should not match \'words\' or \'sword\'). # Example ```python paragraphs = [ \\"This is a test. This test is easy.\\", \\"Test the code. The best code is tested.\\", \\"Write code to test the code and test it well.\\" ] word = \\"test\\" print(find_paragraph_with_max_word_freq(paragraphs, word)) # Output: 0 ``` # Constraints - The word only contains alphabetic characters. - The word will not be an empty string. - Each paragraph will contain at least one sentence. - There will be at least one paragraph in the `paragraphs` list. In this example, the first paragraph has the word \'test\' appearing twice, which is the highest frequency among all paragraphs, hence the function returns 0.","solution":"import re def find_paragraph_with_max_word_freq(paragraphs, word): Finds the index of the paragraph with the highest frequency of the specified word. :param paragraphs: List of paragraphs as strings. :param word: The word to search for. :return: Index of the paragraph with the highest frequency of the specified word. word = word.lower() max_freq = 0 max_freq_index = 0 for i, para in enumerate(paragraphs): # Find all whole word matches regardless of case matches = re.findall(r\'b\' + re.escape(word) + r\'b\', para, re.IGNORECASE) freq = len(matches) if freq > max_freq: max_freq = freq max_freq_index = i return max_freq_index"},{"question":"A tree is an undirected graph with no cycles. A tree is considered to be rooted at a specific node called the root. In this task, you are given a rooted tree with `n` vertices. Each vertex has a label indicating its value. Your job is to find the sum of the values of all nodes in the subtree rooted at a given node. The subtree rooted at a node `v` includes `v` itself and all its descendants in the tree. For each query, you need to return the sum of the values in the subtree rooted at the specified node. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of vertices in the tree. - The second line contains `n` integers — the values of the vertices. - Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) — indicating an edge between vertex `u` and vertex `v`. - The next line contains an integer `q` (1 ≤ q ≤ 100,000) — the number of queries. - Each of the next `q` lines contains an integer `v` (1 ≤ v ≤ n) — a query specifying the node to calculate the subtree sum for. Output: - For each query, print a single integer — the sum of the values of all nodes in the subtree rooted at the given node. Example: ``` Input: 5 1 2 3 4 5 1 2 1 3 3 4 3 5 3 1 3 5 Output: 15 12 5 ```","solution":"def subtree_sum(n, values, edges, queries): from collections import defaultdict, deque def build_tree(n, edges): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) return tree def compute_subtree_sum(node, parent): sum_subtree = values[node - 1] for neighbor in tree[node]: if neighbor != parent: sum_subtree += compute_subtree_sum(neighbor, node) subtree[node] = sum_subtree return sum_subtree # Build tree tree = build_tree(n, edges) # Compute subtree sums subtree = [0] * (n + 1) compute_subtree_sum(1, -1) # Answer queries result = [] for query in queries: result.append(subtree[query]) return result"},{"question":"You are given an array of integers `arr` of length `n`. Each integer in the array represents the height of a building. Your task is to determine the amount of water that can be trapped after raining. The amount of water trapped at any building is determined by the difference between the height of the building and the minimum of the maximum heights to the left and right of that building. Write a function `trap_water(arr: List[int]) -> int` to compute the total amount of trapped water. **Input:** - A list `arr` of `n` integers (1 ≤ n ≤ 1000), where each integer represents the height of a building. **Output:** - Return a single integer representing the total amount of water trapped. **Example:** **Input:** ``` arr = [0,1,0,2,1,0,1,3,2,1,2,1] ``` **Output:** ``` 6 ``` **Explanation:** After raining, the water trapped in each of the indices is [0, 0, 1, 0, 1, 2, 1, 0, 0, 1, 0, 0]. The total is 6 units of water.","solution":"from typing import List def trap_water(arr: List[int]) -> int: if not arr: return 0 n = len(arr) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = arr[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], arr[i]) # Fill right_max array right_max[n - 1] = arr[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], arr[i]) # Calculate water trapped for i in range(n): water_trapped += min(left_max[i], right_max[i]) - arr[i] return water_trapped"},{"question":"The city of Newtown is planning to upgrade its street lighting system with newer, more energy-efficient LED lights. Each street light consumes a certain amount of power, and the total power consumption should not exceed a given budget. Given the power consumption of each type of street light, as well as the number of lights that need to be installed, determine if it is possible to stay within the budget while upgrading the street lights. The first line contains two integers n and B (1 ≤ n ≤ 10^5, 1 ≤ B ≤ 10^9) — the number of different types of street lights and the budget for the total power consumption. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9) — the power consumption for each type of street light. The third line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 10^3) — the number of street lights to be installed for each type. Output \\"YES\\" (without quotes) if it is possible to upgrade the street lights within the budget, and \\"NO\\" (without quotes) otherwise. Example: Input: 3 100 10 15 20 5 3 1 Output: YES Explanation: The total power consumption would be (10 * 5) + (15 * 3) + (20 * 1) = 50 + 45 + 20 = 115, which is within the budget of 100. Hence, the answer is \\"YES\\".","solution":"def can_upgrade_street_lights(n, B, power_consumption, counts): total_power = sum(p * c for p, c in zip(power_consumption, counts)) return \\"YES\\" if total_power <= B else \\"NO\\""},{"question":"A large data file contains a list of words, each on a new line. Write a program that reads the file and outputs the most frequent word. If there are multiple words with the highest frequency, output the lexicographically smallest one. The program should handle cases where the file is very large, so consider memory and performance constraints. **Input**: The input consists of a single string representing the filename. **Output**: Print the most frequent word and its frequency on a single line, separated by a space. **Example**: ``` Input: words.txt words.txt content (example): apple banana apple orange banana apple Output: apple 3 ``` **Constraints**: - The number of words in the file will not exceed 10^6. - The length of each word will not exceed 100 characters. - The file may contain both uppercase and lowercase letters. Treat them as distinct characters. **Note**: - Assume the file is well-formed and contains only lowercase and uppercase alphabetic characters. - Ensure the solution is efficient in terms of both time and space complexity.","solution":"def most_frequent_word(filename): Reads the file and outputs the most frequent word and its frequency. If there are multiple words with the highest frequency, outputs the lexicographically smallest one. from collections import defaultdict word_count = defaultdict(int) with open(filename, \'r\') as file: for line in file: word = line.strip() word_count[word] += 1 max_frequency = max(word_count.values()) most_frequent_words = [word for word, count in word_count.items() if count == max_frequency] most_frequent_word = min(most_frequent_words) print(f\\"{most_frequent_word} {max_frequency}\\")"},{"question":"You are working on the backend of an e-commerce platform that deals with storing and querying information about products. The database stores details of products including product IDs, names, and prices. However, since the backend is going to handle a high volume of queries, efficient implementation of the querying functions is crucial. Your task is to implement two functions: 1. `add_product(product_id, name, price)` which will add a product to the database. 2. `query_product(name)` which will return the product ids of all products whose names contain the given query string as a substring. To make things more challenging, you should cater for the following constraints: - A product ID will be a unique integer in the range from 1 to 10^6. - A product name will be a string consisting of 1 to 100 alphanumeric characters. - A product price will be an integer in the range from 1 to 10^6. - The total number of products that can be added will not exceed 1000. - The `query_product` function will be called at most 10000 times and should have an efficient implementation so that each call runs quickly even with the maximum number of products. # Input - The number of operations `n` (1 ≤ n ≤ 11000). - The next `n` lines describe the operations, which can either be: - \\"add_product product_id name price\\" for adding a product. - \\"query_product name\\" for querying product IDs that match the name substring. # Output For each `query_product` operation, output a single line containing space-separated product IDs sorted in ascending order. If no product IDs match, output an empty line. # Example Input ``` 6 add_product 1 iPhone 999 add_product 2 SamsungGalaxy 750 add_product 3 GooglePixel 800 query_product Google query_product Galaxy query_product Phone ``` Output ``` 3 2 1 ``` # Notes - In the example, querying for \\"Google\\" returns the product ID of the GooglePixel. - Querying for \\"Galaxy\\" returns the product ID of the SamsungGalaxy. - Querying for \\"Phone\\" returns the product ID of the iPhone.","solution":"class ProductDatabase: def __init__(self): self.products = {} def add_product(self, product_id, name, price): Adds a product to the database. Args: product_id (int): Unique identifier for the product. name (str): Name of the product. price (int): Price of the product. self.products[product_id] = { \'name\': name, \'price\': price } def query_product(self, query): Queries the product database for product IDs whose names contain the given substring. Args: query (str): Substring to search in product names. Returns: List[int]: List of product IDs sorted in ascending order that match the query. result_ids = [] for product_id, product_info in self.products.items(): if query in product_info[\'name\']: result_ids.append(product_id) return sorted(result_ids) # Function to process the operations def process_operations(operations): db = ProductDatabase() result = [] for operation in operations: parts = operation.split() if parts[0] == \\"add_product\\": product_id = int(parts[1]) name = parts[2] price = int(parts[3]) db.add_product(product_id, name, price) elif parts[0] == \\"query_product\\": query = parts[1] result.append(\\" \\".join(map(str, db.query_product(query)))) return result"},{"question":"The Luke and Leia Conglomerate is building a new high-speed train system between several cities. They want to determine the most feasible connection paths between cities in terms of distance. You are assigned to write a program that calculates the shortest path between any two cities on their train network. The train system can be represented as a weighted undirected graph, where each node is a city, and each edge between nodes has a weight representing the distance. You are given the number of cities and the list of connections between the cities. Your task is to implement a function that calculates the minimum distance between two specific cities. If no path exists between the cities, return -1. The input consists of multiple lines: - The first line contains an integer n (2 ≤ n ≤ 500) representing the number of cities. - The second line contains an integer m (1 ≤ m ≤ 1000) representing the number of connections. - The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) where u and v are the connected cities, and w is the distance between them. - The last line contains two integers s and t (1 ≤ s, t ≤ n) representing the source city and the target city. Output a single integer representing the shortest path from city s to city t. If no path exists, return -1. Example: Input: ``` 4 4 1 2 3 2 3 4 3 4 5 1 4 10 1 4 ``` Output: ``` 10 ``` Explanation: The shortest path from city 1 to city 4 is directly through the edge with a distance of 10. Write a function `shortest_path()` that takes the number of cities, number of connections, a list of connections, and two integers representing the source and target cities, and returns the minimum distance between them or -1 if no path exists.","solution":"import heapq def shortest_path(n, m, connections, s, t): Calculates the shortest path between two specific cities using Dijkstra\'s algorithm. :param n: Number of cities :param m: Number of connections :param connections: List of connections with tuples (u, v, w) :param s: Source city :param t: Target city :return: Minimum distance between city s and city t or -1 if no path exists # Create the adjacency list to represent the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in connections: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find the shortest path # Priority queue to store the minimum distance to each city pq = [(0, s)] # (distance, city) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[s] = 0 while pq: current_distance, current_city = heapq.heappop(pq) # If we reach the target city, return the distance if current_city == t: return current_distance for neighbor, weight in graph[current_city]: distance = current_distance + weight # Only consider this path if it\'s better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) # If the target city is not reachable return -1 if distances[t] == float(\'inf\') else distances[t] # Example usage: n = 4 m = 4 connections = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 4, 10)] s = 1 t = 4 print(shortest_path(n, m, connections, s, t)) # Output: 10"},{"question":"A zoo needs to create a system to monitor the movements of animals within its enclosures. There are N enclosures in the zoo, each represented as a rectangular area in a 2D plane. Each enclosure is defined by two coordinates, (x_1, y_1) and (x_2, y_2), which are the coordinates of the bottom-left and top-right corners of the rectangle, respectively. You need to develop a program that determines whether a given point (x, y) lies inside, outside or on the boundary of any enclosure in the zoo. # Input - The first line contains an integer N ({1 leq N leq 10^5}) - the number of enclosures. - Each of the next N lines contains four integers x_1, y_1, x_2, y_2 (-10^7 leq x_1 lt x_2 leq 10^7, -10^7 leq y_1 lt y_2 leq 10^7) - the coordinates of the bottom-left and top-right corners of each enclosure. - The last line contains an integer Q ({1 leq Q leq 10^5}) - the number of queries. - Each of the next Q lines contains two integers x, y (-10^7 leq x, y leq 10^7) representing the coordinates of the point. # Output - For each query, print \\"Inside\\" if the point is inside any enclosure, \\"Outside\\" if it is outside all enclosures, or \\"On the boundary\\" if it lies on the boundary of any enclosure. # Example Input ``` 3 1 1 4 4 2 2 5 5 3 3 6 6 4 3 3 1 4 5 5 0 0 ``` Output ``` Inside On the boundary On the boundary Outside ```","solution":"def check_point_in_enclosure(enclosures, point): x, y = point for x1, y1, x2, y2 in enclosures: if x1 < x < x2 and y1 < y < y2: return \\"Inside\\" elif (x == x1 or x == x2) and y1 <= y <= y2 or (y == y1 or y == y2) and x1 <= x <= x2: return \\"On the boundary\\" return \\"Outside\\" def monitor_enclosures(n, enclosures, q, points): results = [] for point in points: results.append(check_point_in_enclosure(enclosures, point)) return results"},{"question":"You are given an array of integers `a1, a2, ..., an` of length `n`. You need to answer `m` queries, each described by two integers `li, ri` (1 ≤ li ≤ ri ≤ n). For each query, you should determine the number of distinct integers in the subarray from index `li` to `ri` (inclusive). The input starts with the integer `n` (1 ≤ n ≤ 10^5), followed by the array of `n` integers — `a1, a2, ..., an` (1 ≤ ai ≤ 10^5 for each integer in the array). The next line contains the integer `m` (1 ≤ m ≤ 10^5), the number of queries. Each of the next `m` lines contains two integers `li` and `ri`. Output the answer for each query on a single line. Print the answers in the order they go in the input. For example: Input: ``` 5 1 2 1 3 2 3 1 3 2 4 1 5 ``` Output: ``` 2 3 3 ``` Explanation: - For the query (1, 3), the subarray is [1, 2, 1], which contains 2 distinct integers: 1 and 2. - For the query (2, 4), the subarray is [2, 1, 3], which contains 3 distinct integers: 1, 2 and 3. - For the query (1, 5), the subarray is [1, 2, 1, 3, 2], which contains 3 distinct integers: 1, 2 and 3.","solution":"def count_distinct_in_subarray(arr, queries): For each query, determine the number of distinct integers in the subarray. Parameters: arr (list): The array of integers. queries (list): List of tuples representing the queries. Returns: list: A list of the number of distinct integers for each query. results = [] for left, right in queries: subarray = arr[left-1:right] distinct_count = len(set(subarray)) results.append(distinct_count) return results"},{"question":"Alex loves playing video games, and he has recently discovered a new game where he needs to gather resources to build different structures. Each structure requires a specific number of resources of various types. Alex has a certain number of resources but needs to figure out whether he can build a particular structure with his current resources. The resources are given as a list where each element is a tuple containing the resource type and its quantity. The structure requirements are also provided as a list of tuples, where each tuple contains the resource type and the quantity required. Write a function `can_build_structure(resources: List[Tuple[str, int]], requirements: List[Tuple[str, int]]) -> bool` that returns `True` if Alex can build the structure with the given resources and `False` otherwise. # Input: - `resources`: A list of tuples, where each tuple contains a string representing the resource type and an integer representing the quantity of that resource. The length of this list is between 1 and 100. - `requirements`: A list of tuples, where each tuple contains a string representing the resource type and an integer representing the quantity required for that resource. The length of this list is between 1 and 100. # Output: - Return `True` if Alex can build the structure, and `False` otherwise. # Example: ```python resources = [(\\"wood\\", 10), (\\"stone\\", 5), (\\"iron\\", 8)] requirements = [(\\"wood\\", 5), (\\"stone\\", 3), (\\"iron\\", 8)] can_build_structure(resources, requirements) # Output: True ``` ```python resources = [(\\"wood\\", 10), (\\"stone\\", 5), (\\"iron\\", 8)] requirements = [(\\"wood\\", 5), (\\"stone\\", 6), (\\"iron\\", 8)] can_build_structure(resources, requirements) # Output: False ``` # Note: In the first example, Alex has enough resources of each type to meet the requirements of the structure. In the second example, Alex does not have enough stone to meet the structure requirements.","solution":"from typing import List, Tuple def can_build_structure(resources: List[Tuple[str, int]], requirements: List[Tuple[str, int]]) -> bool: resource_dict = {rtype: quantity for rtype, quantity in resources} for rtype, quantity in requirements: if rtype not in resource_dict or resource_dict[rtype] < quantity: return False return True"},{"question":"Alice loves playing with numbers. She recently learned about number transformations and came up with an interesting experiment. Given an integer n, Alice transforms n based on the following rules: 1. If n is even, she replaces n with n/2. 2. If n is odd, she replaces n with 3n + 1. Alice repeats this process until n becomes 1. Your task is to determine the number of steps it takes for n to reach 1. The single line contains a single integer n (1 ≤ n ≤ 10^18). Print the number of steps required for n to reach 1. For example, for the input 6, the sequence would be: 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1. Thus, it takes 8 steps.","solution":"def number_of_steps_to_reach_1(n): Returns the number of steps required for a number n to reach 1 following the specific transformation rules. steps = 0 while n != 1: if n % 2 == 0: n //= 2 else: n = 3 * n + 1 steps += 1 return steps"},{"question":"Amelia is fascinated by palindromes, and she thinks it\'s fun to reverse strings. She starts with two strings, `a` and `b`, and concatenates them in various orders to see if any of the resulting strings form a palindrome. A string is a palindrome if it reads the same forward and backward. Your task is to determine if there exists a way to concatenate `a` and `b` in any order (either `a+b` or `b+a`) such that the concatenated string is a palindrome. The first line of input contains an integer `t` (1 ≤ t ≤ 100), representing the number of test cases. Each of the following `t` lines contains two strings `a` and `b` (1 ≤ |a|, |b| ≤ 100), where each string consists of lowercase English letters. For each test case, your output should be \\"YES\\" if it\'s possible to form a palindrome by concatenating `a` and `b` in any order. Otherwise, output \\"NO\\". # Sample Input: ``` 3 abc cba abc def abc ba ``` # Sample Output: ``` YES NO YES ``` Explanation: - In the first test case, `a` = \\"abc\\" and `b` = \\"cba\\". By concatenating `a` and `b` as `abc` + `cba`, we get \\"abccba\\", which is a palindrome. - In the second test case, neither `abccba` nor `defabc` results in a palindrome. - In the third test case, `a` = \\"abc\\" and `b` = \\"ba\\". By concatenating `ba` and `abc` as `ba` + `abc`, we get \\"baabc\\", which is not a palindrome, but concatenating `abc` and `ba` as `abc` + `ba` results in \\"abcba\\", which is a palindrome.","solution":"def is_palindrome(s): Helper function to check if a string is a palindrome. return s == s[::-1] def can_form_palindrome_from_concat(t, cases): Determine if it\'s possible to form a palindrome by concatenating strings `a` and `b` in any order. Args: t: Integer, number of test cases. cases: List of tuples, each containing two strings `a` and `b`. Returns: List of \\"YES\\" or \\"NO\\" for each test case. results = [] for a, b in cases: if is_palindrome(a + b) or is_palindrome(b + a): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string of lowercase alphabets. The task is to check whether the string can be transformed into a palindrome by rearranging its characters. A palindrome is a word that reads the same backward as forward. Write a function `canFormPalindrome` that takes a string `s` as input and returns `True` if the string can be rearranged to form a palindrome, and `False` otherwise. # Input - A single string `s` (1 ≤ |s| ≤ 1000) where |s| denotes the length of the string. # Output - Return `True` if the characters of the string can be rearranged to form a palindrome, otherwise return `False`. # Example ``` canFormPalindrome(\\"carrace\\") Output: True // \\"carrace\\" can be rearranged to \\"racecar\\" which is a palindrome. canFormPalindrome(\\"daily\\") Output: False // \\"daily\\" cannot be rearranged to form a palindrome. ``` # Note: To determine if the string can be rearranged to form a palindrome, consider the properties of palindromes regarding the count of characters.","solution":"def canFormPalindrome(s): Returns True if the string can be rearranged to form a palindrome, otherwise returns False. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd frequency return odd_count <= 1"},{"question":"You are given a list of N integers and a target sum S. Your task is to determine if there exist three distinct indices i, j, k (1 ≤ i < j < k ≤ N) such that the sum of the integers at these indices equals the target sum S. Additionally, you must make sure that the solution covers all possible scenarios to avoid false positives due to repeated elements. Write a function `find_triplet(nums: List[int], S: int) -> bool` that takes a list of integers `nums` and an integer `S`, and returns `True` if there are three distinct indices with a sum equal to `S`, and `False` otherwise. # Input - `nums`: a list of N integers (1 ≤ N ≤ 1000 and -10^3 ≤ nums[i] ≤ 10^3) - `S`: an integer target sum (-3000 ≤ S ≤ 3000) # Output - Return `True` if there exists a triplet with the target sum, else `False`. # Examples Example 1 ``` find_triplet([1, 4, 5, 6, 2, 3], 10) ``` Returns: ``` True ``` Explanation: ``` Possible triplets are (1, 4, 5), (1, 6, 2), etc., each of them sums to 10. ``` Example 2 ``` find_triplet([1, 1, 1, 1], 5) ``` Returns: ``` False ``` Explanation: ``` There are no three distinct elements that sum to 5. ``` Example 3 ``` find_triplet([0, -1, 2, -3, 1], -2) ``` Returns: ``` True ``` Explanation: ``` Possible triplet is (0, -3, 1) which sums to -2. ```","solution":"from typing import List def find_triplet(nums: List[int], S: int) -> bool: nums.sort() n = len(nums) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == S: return True elif current_sum < S: left += 1 else: right -= 1 return False"},{"question":"A large store is having their annual stock clearance sale, and you are given a special task of determining the maximum revenue possible from discounting their items. The store has n items, and each item i has a price pi. You need to discount exactly m items such that the total price of the remaining items is maximized. The sale allows for great discounts, but each item can only be discounted fully (i.e., its price becomes zero). The first line of the input contains two space-separated integers n and m (1 ≤ m < n ≤ 100,000), denoting the number of items and the number of items to be discounted, respectively. The next line contains n space-separated integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9), denoting the prices of the items. Print the maximum total price of the remaining items after discounting exactly m items. For example: Input: 5 2 4 3 5 1 7 Output: 16 Input: 6 3 8 2 4 6 9 1 Output: 23 Explanation: In the first sample, the optimal strategy is to discount the items with prices 1 and 3, so the remaining items are 4, 5, and 7, yielding a maximum total price of 4 + 5 + 7 = 16. In the second sample, the optimal strategy is to discount the items with prices 1, 2, and 4, so the remaining items are 8, 6, and 9, yielding a maximum total price of 8 + 6 + 9 = 23.","solution":"def max_revenue(n, m, prices): Calculates the maximum revenue possible from discounting exactly m items. Parameters: n (int): Total number of items. m (int): Number of items to discount. prices (list of int): List of item prices. Returns: int: Maximum revenue possible from the remaining items. # Sort prices in ascending order to find the smallest prices easily prices.sort() # Sum of the n-m largest prices (i.e., excluding the m smallest prices) remaining_items = prices[m:] # Exclude the smallest m prices return sum(remaining_items)"},{"question":"You are given a set of data points representing the heights of various people in a community. Your task is to write a function that takes this list of heights as input and returns a tuple containing the shortest and the tallest height in the community. You can assume that the input list will always contain at least one height value. Make sure your code efficiently finds the shortest and tallest height with a single pass through the list. Your function should have the following signature: ```python def find_extremes(heights: List[int]) -> Tuple[int, int]: # Your code here pass ```","solution":"from typing import List, Tuple def find_extremes(heights: List[int]) -> Tuple[int, int]: Returns a tuple containing the shortest and the tallest height in the list of heights. # Initialize min_height and max_height with the first height in the list. min_height = max_height = heights[0] # Loop through the list to find the shortest and tallest heights. for height in heights: if height < min_height: min_height = height if height > max_height: max_height = height return (min_height, max_height)"},{"question":"Given a sequence of n integers, determine its subsequence which is strictly increasing and has the maximum possible length. Print the length of this subsequence. A subsequence is derived by deleting some (or no) elements from the original sequence, while keeping the relative order of the remaining elements. Input: The first line contains an integer n (1 le n le 2 cdot 10^5), the number of elements in the sequence. The second line contains n integers a_1, a_2, dots, a_n which represent the elements of the sequence (1 le a_i le 10^9). Output: Print a single integer, the length of the longest strictly increasing subsequence in the given sequence. For example, Input: 6 10 20 10 30 20 50 Output: 4 Explanation: The longest strictly increasing subsequence is [10, 20, 30, 50].","solution":"from bisect import bisect_left def longest_increasing_subsequence_length(n, sequence): Returns the length of the longest strictly increasing subsequence in the sequence. if n == 0: return 0 lis = [] for num in sequence: pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis)"},{"question":"Violet is a software developer who enjoys creating intricate puzzles for her friends to solve. She is designing a new puzzle game called \\"Labyrinth of Codes\\". The game consists of a rectangular grid of cells, where each cell is either an empty cell or a wall. Violet wants to place teleporters in some of the empty cells. Teleporters come in pairs, where if you enter one teleporter, you instantly appear at its paired teleporter. Creating a balanced game requires that each pair of teleporters be positioned such that the shortest path from one teleporter to its pair would be the same length for each pair. Violet needs your help to determine whether it is possible to place k teleporters in the grid such that they satisfy this condition. You are given a grid consisting of n rows and m columns. Each cell is represented by a character: \'.\' denotes an empty cell, and \'#\' denotes a wall. You are also given k, the number of pairs of teleporters to be placed. Write a function \\"canPlaceTeleporters(grid: List[str], k: int) -> bool\\" that returns True if it is possible to place k pairs of teleporters satisfying the conditions mentioned above, and False otherwise. Input: - A list of strings \'grid\', representing the grid. - An integer \'k\' indicating the number of teleporter pairs to be placed (1 ≤ n, m ≤ 100, 1 ≤ k ≤ min(n*m//2, 25)). Output: - Return a boolean value, True or False. Example: ``` grid = [\\"....#.\\", \\"...#..\\", \\"#.....\\", \\"......\\"] k = 2 Output: True ``` In this example, it is possible to place 2 pairs of teleporters such that the shortest path between each pair of teleporters is the same.","solution":"from typing import List, Tuple def canPlaceTeleporters(grid: List[str], k: int) -> bool: n = len(grid) m = len(grid[0]) empty_cells = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == \'.\'] if len(empty_cells) < 2 * k: return False possible_distances = set() for i in range(len(empty_cells)): for j in range(i + 1, len(empty_cells)): distance = abs(empty_cells[i][0] - empty_cells[j][0]) + abs(empty_cells[i][1] - empty_cells[j][1]) possible_distances.add(distance) return len(possible_distances) >= k"},{"question":"You are given n elements which represent the heights of buildings in a skyline. The goal is to determine the largest rectangle that can be formed within the skyline. Each building is represented by a positive integer height[k] (1 ≤ k ≤ n), which denotes the height of the k-th building. All buildings have a width of 1 unit. Write a function that takes an array of integers representing the heights of the buildings and returns the area of the largest rectangle that can be formed within the skyline. # Input - An integer array heights[], where 1 ≤ heights[i] ≤ 10^6 and 1 ≤ n ≤ 200,000. # Output - An integer representing the maximum rectangle area that can be formed. # Example Input ``` [2, 1, 5, 6, 2, 3] ``` Output ``` 10 ``` # Explanation For the given example, the largest rectangle can be formed using the third and fourth buildings of height 5 and 6 respectively, spanning two units in width, resulting in an area of 5*2 = 10. # Note Ensure your solution has an efficient time complexity to handle the upper limits of the input size.","solution":"def largestRectangleArea(heights): Returns the area of the largest rectangle that can be formed within the given skyline. heights: List[int] - a list of integers representing the heights of the buildings. Returns: int - the maximum rectangle area. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a sequence of n integers a1, a2, ..., an. We define the \\"prefix-sum\\" of the sequence as a new sequence p1, p2, ..., pn such that pi is the sum of the first i elements of the original sequence (i.e., pi = a1 + a2 + ... + ai). Now, consider a series of q queries, each asking for the sum of a contiguous subsequence of the prefix-sum sequence. Specifically, each query can be described with two integers li and ri, and the answer to the query is the sum of pli, pli+1, ..., pri. You are given the original sequence and all the queries. Help answer all the queries. The first line contains an integer n (1 ≤ n ≤ 10^5). The second line contains n integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4). The third line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. The next q lines contain pairs of integers, each pair being li and ri (1 ≤ li ≤ ri ≤ n) — the description of the i-th query. For each query, print the answer on a new line.","solution":"def compute_prefix_sums(arr): Computes the prefix sums of the given array. prefix_sums = [] current_sum = 0 for num in arr: current_sum += num prefix_sums.append(current_sum) return prefix_sums def query_prefix_sum(prefix_sums, queries): Given the prefix sums and a list of queries, compute the result for each query. Each query is given as a pair (li, ri), and we need to find the sum from prefix_sums[li-1] to prefix_sums[ri-1]. results = [] for li, ri in queries: # Since li and ri are 1-based index, convert them to 0-based index li -= 1 ri -= 1 sum_lr = sum(prefix_sums[li:ri+1]) results.append(sum_lr) return results def main(n, arr, q, queries): prefix_sums = compute_prefix_sums(arr) results = query_prefix_sum(prefix_sums, queries) return results"},{"question":"You are given an array of integers representing the heights of n buildings arranged in a row. Your task is to determine the maximum area of a rectangle that can be formed using any contiguous subarray of these heights. The width of each rectangle is determined by the number of buildings it spans, and the height is limited by the shortest building in that subarray. The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of buildings. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^4), where hi represents the height of the i-th building. Output a single integer, the maximum area of a rectangle that can be formed using any contiguous subarray of these heights. **Example Input:** ``` 6 2 1 5 6 2 3 ``` **Example Output:** ``` 10 ``` **Explanation:** For the given heights [2, 1, 5, 6, 2, 3], the maximum rectangle area is formed by the subarray [5, 6], which has a height of 5 and a width of 2, resulting in an area of 5 * 2 = 10.","solution":"def max_histogram_area(heights): Returns the maximum area of a rectangle that can be formed using any contiguous subarray of given heights. n = len(heights) stack = [] max_area = 0 index = 0 while index < n: if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given a string `s` consisting of lowercase alphabets. A substring of `s` is any continuous sequence of characters within `s`. For a given substring, the number of distinct characters is the number of unique characters that appear in that substring. Your task is to find the length of the longest substring of `s` that contains at most `k` distinct characters. If there are multiple substrings with the same maximum length, return any one of them. # Example ```plaintext Input: s = \\"aabacbebebe\\" k = 3 Output: 7 # The substring is \\"cbebebe\\" or \\"bcbebeb\\". ``` # Function Signature `def longest_substring_with_k_distinct(s: str, k: int) -> Tuple[int, str]:` # Input Parameters: - `s`: A string composed of lowercase alphabets (1 ≤ `|s|` ≤ 10^5) - `k`: An integer representing the maximum number of distinct characters allowed in the substring (1 ≤ k ≤ 26) # Output: - A tuple where the first element is the length of the longest substring and the second element is the longest substring itself. # Constraints: - The string `s` will contain only lowercase English letters. - If there is no such substring, return `(0, \\"\\")`. # Example Explanation: In the sample input, the longest substring with at most 3 distinct characters is \\"cbebebe\\" which has a length of 7. Another valid substring could be \\"bcbebeb\\" also of length 7.","solution":"def longest_substring_with_k_distinct(s: str, k: int) -> tuple: from collections import defaultdict n = len(s) if k == 0 or n == 0: return (0, \\"\\") left, right = 0, 0 max_len = 0 max_substr = \\"\\" char_count = defaultdict(int) while right < n: char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if right - left + 1 > max_len: max_len = right - left + 1 max_substr = s[left:right + 1] right += 1 return (max_len, max_substr)"},{"question":"You are given two strings, A and B, where each character is either \'0\' or \'1\'. You need to modify exactly one character in string A or string B so that the number of positions at which the corresponding bits are different in the final strings is minimized. The task is to determine the minimum number of differing positions after modifying exactly one character. For example, if A = \\"1100\\" and B = \\"1001\\", you can change the second character of A from \'1\' to \'0\' to obtain strings \\"1000\\" and \\"1001\\". The number of differing positions is 1. Input: The first line contains a string A of length n (1 ≤ n ≤ 100000), consisting of characters \'0\' and \'1\'. The second line contains a string B of length n, consisting of characters \'0\' and \'1\'. Output: Print a single integer — the minimum number of differing positions after modifying exactly one character in A or B. Example: Input: 1100 1001 Output: 1","solution":"def min_differing_positions(A, B): This function calculates the minimum number of differing positions between two binary strings A and B after modifying exactly one character in A or B. n = len(A) # Calculate the initial number of differing positions current_diff = sum(1 for a, b in zip(A, B) if a != b) # We will check minimizing differing positions by changing each different character in A or B min_diff = current_diff for i in range(n): if A[i] != B[i]: # Change A[i] to B[i] new_diff = current_diff - 1 min_diff = min(min_diff, new_diff) # Change B[i] to A[i] new_diff = current_diff - 1 min_diff = min(min_diff, new_diff) return min_diff # Example Usage A = \\"1100\\" B = \\"1001\\" print(min_differing_positions(A, B)) # Output: 1"},{"question":"Polycarp is participating in a marathon training program, where he trains for m weeks. Each week consists of exactly 7 days, and the days are numbered from 1 to 7 within a week. Polycarp has planned how many kilometers he will run each day of the week to best prepare for his marathon. He wants to identify the first day within the given weeks when he reaches or surpasses his target mileage, T, for the marathon. The first line contains two integers, m (1 le m le 200,000) — the number of weeks, and T (1 le T le 10,000,000) — the target mileage. The next m times 7 lines contain an integer each, where the (i times 7 + j)-th integer represents the number of kilometers Polycarp runs on day (j + 1) of week (i + 1) (i.e., the a_{(i times 7 + j)} distance he runs on the corresponding day). Determine the day (in absolute numbering from the start) on which Polycarp\'s total mileage reaches or exceeds the target mileage. Print the index of the day when Polycarp achieves his target mileage. In the first example, if Polycarp runs [3, 2, 4, 6, 1, 5, 3, 3, 2, 4, 6, 1, 5, 3] kilometers over 2 weeks with a target mileage T = 15, Polycarp reaches or surpasses 15 kilometers on the fourth day. Therefore, the output should be 4. In the second example, if Polycarp runs [5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] kilometers over 4 weeks with a target mileage T = 12, Polycarp reaches or surpasses 12 kilometers on the eighth day. Therefore, the output should be 8.","solution":"def find_day_reach_target(m, T, distances): Determines the day on which Polycarp reaches or surpasses the target mileage T. :param m: Number of weeks :param T: Target mileage :param distances: List of kilometers run each day :return: Day number when the target is reached or surpassed total = 0 for i, distance in enumerate(distances): total += distance if total >= T: return i + 1 return -1 # In case the target is never reached within the weeks (shouldn\'t happen with given constraints)"},{"question":"Write a function `reverse_vowels` that takes a string `s` as input and returns a new string where only the vowels (a, e, i, o, u) are reversed, while the other characters remain in their original positions. The input string may contain both uppercase and lowercase letters, and the function should handle vowels in a case-insensitive manner. # Input - A single string `s` (1 <= len(s) <= 1000), which may include both uppercase and lowercase letters. # Output - A single string with the vowels reversed while all other characters remain in their original positions. # Example Input ``` \\"hello\\" ``` Output ``` \\"holle\\" ``` # Note - The vowels in the string \\"hello\\" are \\"e\\" and \\"o\\", which are reversed to form \\"holle\\". - The solution should only reverse the vowels without changing their positions with respect to the other letters in the string.","solution":"def reverse_vowels(s): Reverses only the vowels in the string s, while keeping other characters in their original positions. vowels = \\"aeiouAEIOU\\" s = list(s) # Convert the string to a list to allow modification left, right = 0, len(s) - 1 while left < right: if s[left] not in vowels: left += 1 elif s[right] not in vowels: right -= 1 else: s[left], s[right] = s[right], s[left] left += 1 right -= 1 return \\"\\".join(s)"},{"question":"Amara is planning a new reservation system for her restaurant. The system needs to handle booking requests in one-minute intervals throughout the day, starting at 00:00 and ending at 23:59. Given a list of booking requests, each defined by a start time and an end time (both in the format HH:MM), Amara wants to ensure there are no conflicting bookings. Two bookings are considered conflicting if any minute of one booking overlaps with any minute of another. Your task is to write a function that takes a list of bookings and returns a list of non-conflicting bookings that maximize the number of minutes booked. Input: - The first line contains an integer n (1 ≤ n ≤ 1440), the number of booking requests. - Each of the next n lines contains two strings representing the start and end times of a booking request. Output: - The function should output the list of non-conflicting bookings that maximize the use of available time in \\"HH:MM HH:MM\\" format, sorted by start time. If there are multiple solutions with the same number of booked minutes, return any one. Example: Input: 4 09:00 10:30 11:00 12:00 10:00 11:30 12:00 13:00 Output: 09:00 10:30 11:00 12:00 12:00 13:00 Explanation: - The function finds the maximum number of minute intervals that can be booked without any overlaps. The result is sorted by start time. Important notes: - The bookings should be treated exclusively; that is, the end time of one booking is not considered overlapping with the start time of another. - Times are given on a 24-hour clock.","solution":"from datetime import datetime def maximum_non_conflicting_bookings(n, bookings): def time_to_minutes(t): hours, minutes = map(int, t.split(\':\')) return hours * 60 + minutes def minutes_to_time(m): return f\'{m // 60:02}:{m % 60:02}\' bookings = [(time_to_minutes(start), time_to_minutes(end)) for start, end in bookings] # Sort bookings by their end time bookings.sort(key=lambda x: x[1]) current_end = 0 selected_bookings = [] for start, end in bookings: if start >= current_end: selected_bookings.append((start, end)) current_end = end result = [(minutes_to_time(start), minutes_to_time(end)) for start, end in selected_bookings] return result # Example test case n = 4 bookings = [(\\"09:00\\", \\"10:30\\"), (\\"11:00\\", \\"12:00\\"), (\\"10:00\\", \\"11:30\\"), (\\"12:00\\", \\"13:00\\")] expected_output = [(\\"09:00\\", \\"10:30\\"), (\\"11:00\\", \\"12:00\\"), (\\"12:00\\", \\"13:00\\")] print(maximum_non_conflicting_bookings(n, bookings)) # Output: [(\\"09:00\\", \\"10:30\\"), (\\"11:00\\", \\"12:00\\"), (\\"12:00\\", \\"13:00\\")]"},{"question":"You are given two arrays of integers, `a` and `b`, each of length `n` (1 ≤ n ≤ 10^5). You need to find the minimum element from array `b` that is not present in array `a`. If all elements of `b` are present in `a`, then just return -1. Input: - First line: an integer `n` - Second line: `n` integers of array `a` - Third line: `n` integers of array `b` Output: - Print the minimum element from array `b` that is not present in array `a`. If all elements are present, print -1. Example: Input: ``` 5 1 2 3 4 5 3 2 7 8 1 ``` Output: ``` 7 ```","solution":"def min_from_b_not_in_a(n, a, b): Finds the minimum element from list b that is not present in list a. If all elements of b are present in a, returns -1. set_a = set(a) min_elem = float(\'inf\') for elem in b: if elem not in set_a: min_elem = min(min_elem, elem) return -1 if min_elem == float(\'inf\') else min_elem"},{"question":"You are given a list of n integers. Each integer corresponds to the height of a plant. You are allowed to select a contiguous subsegment of these heights. Your task is to determine the length of the longest subsegment where the difference between the maximum height and the minimum height in the subsegment is less than or equal to k. The first line of input contains two integers n and k (1 ≤ n ≤ 100 000 and 0 ≤ k ≤ 1 000 000 000). The second line contains n space-separated integers — the heights of the plants, each integer is in range from 1 to 1 000 000 000 inclusive. Print the length of the longest subsegment where the difference between the maximum and minimum heights is at most k. In the first example, the subsegment [2, 3, 1, 2] has the maximum and minimum height difference 2, which is less than or equal to 2. Another subsegment [3, 1, 2] satisfies the condition as well, having the length 3.","solution":"def longest_subsegment_length(n, k, heights): Returns the length of the longest subsegment such that the difference between the maximum height and the minimum height in that subsegment is less than or equal to k. left = 0 max_len = 0 min_height = max_height = heights[0] for right in range(n): min_height = min(min_height, heights[right]) max_height = max(max_height, heights[right]) while max_height - min_height > k: left += 1 min_height = min(heights[left:right+1]) max_height = max(heights[left:right+1]) max_len = max(max_len, right - left + 1) return max_len"},{"question":"ZS the Mechanic has a robot that follows simple commands on a 2D grid. The robot starts at position (0, 0) and can move in four directions: \\"UP\\", \\"DOWN\\", \\"LEFT\\", \\"RIGHT\\". Each command the robot receives is one of these four directions, and the robot moves one unit in the specified direction. ZS wants the robot to end up at a specific target position (x, y) after executing a sequence of commands. However, the robot\'s hardware is malfunctioning, and it can misinterpret some of the commands. Specifically, the robot might move in the opposite direction of the given command, with a probability of 25%. Given the list of commands for the robot and the target position, determine if the robot can end up at the target position (x, y) after interpreting some commands correctly and some commands incorrectly. The first line contains an integer n (1 ≤ n ≤ 1000), the number of commands. The second line contains n strings, each string being one of the four commands \\"UP\\", \\"DOWN\\", \\"LEFT\\", \\"RIGHT\\". The third line contains two integers x and y (|x|, |y| ≤ 1000), representing the target position. Print \\"YES\\" if there is a way for the robot to end up at the target position (x, y). Otherwise, print \\"NO\\". # Input 5 UP DOWN LEFT RIGHT LEFT 0 0 # Output YES # Input 4 UP UP RIGHT RIGHT 2 2 # Output YES # Input 4 UP UP LEFT LEFT 1 1 # Output NO","solution":"def can_reach_target(n, commands, x, y): Determines if it is possible for the robot to reach the target position (x, y) given the list of commands. # Initialize counts for the direction commands up, down, left, right = 0, 0, 0, 0 # Count the number of each command for command in commands: if command == \\"UP\\": up += 1 elif command == \\"DOWN\\": down += 1 elif command == \\"LEFT\\": left += 1 elif command == \\"RIGHT\\": right += 1 # Calculate net movement in the vertical and horizontal directions vertical_movement = up - down horizontal_movement = right - left # Check if robot can reach the target position (x, y) # The deviation from the target should be within reach after accounting for possible misinterpretations (each being ±25%) vertical_reach = -down <= y <= up horizontal_reach = -left <= x <= right return \\"YES\\" if vertical_reach and horizontal_reach else \\"NO\\""},{"question":"Alice and Bob are playing a game where they take turns adding numbers to a shared list. Alice always adds even numbers and Bob always adds odd numbers. The game starts with an empty list and the two players take turns sequentially until they have both added exactly k numbers each (1 le k le 10^5). The numbers they add are strictly increasing, starting from 1 for Bob and 2 for Alice. Write a program that generates the final result of the list after both Alice and Bob have each added k numbers to it. Input: - A single integer k — the number of numbers each player will add to the list. Output: - A list of integers representing the numbers added by both Alice and Bob, ordered by their turns. For example, for k = 3, Alice will add the numbers 2, 4, and 6, while Bob will add the numbers 1, 3, and 5. The final list should be [1, 2, 3, 4, 5, 6].","solution":"def game_numbers(k): Returns the list of numbers added by Alice and Bob after each has added k numbers. Parameters: k (int): The number of numbers each player will add to the list. Returns: list: The final list of numbers added by both Alice and Bob. result = [] for i in range(1, k+1): result.append(2*i - 1) # Bob\'s odd number result.append(2*i) # Alice\'s even number return result"},{"question":"You have a list of integers representing the heights of buildings in a row. You are tasked with determining the amount of water that would be trapped after a rain shower, assuming that the buildings are perfect vertical slabs and the rainwater would be trapped between them. Given an array of non-negative integers where each element represents the height of a building, calculate how much water it is possible to trap after it rains. The first line contains one integer, n — the number of buildings (1 ≤ n ≤ 10^5). The second line contains n non-negative integers, each representing the height of a building in the row. Print one integer — the total amount of trapped water. # Example Input: ``` 6 0 1 2 1 0 1 ``` Output: ``` 1 ``` # Explanation: In the given example, one unit of water would be trapped between buildings with heights `2` and `1`. # Note: - Ensure to consider the edge cases such as arrays with all buildings of the same height, arrays where no water could be trapped, etc. - It is guaranteed that the heights will not exceed 10^4.","solution":"def trap_rain_water(heights): Calculate the amount of water that can be trapped after it rains given an array of building heights. :param heights: List[int]. A list of non-negative integers representing the heights of buildings. :return: int. The total amount of trapped water. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"You have an array of integers where each integer represents the height of a vertical line drawn at that position. The width of each line is 1. Find two lines that together with the x-axis form a container such that the container contains the most water. The first line contains an integer n (2 ≤ n ≤ 100,000), the number of lines. The second line contains n integers h1, h2, ..., hn (0 ≤ hi ≤ 10,000), where each integer hi is the height of the vertical line at position i. Print a single integer — the maximum amount of water the container can contain. To explain the first sample: Drawing a vertical line at each given position will result in a graphical representation where the container formed between the lines at positions 1 and 8 can hold the most water, which is 49 units. **Input:** ``` 8 1 8 6 2 5 4 8 3 7 ``` **Output:** ``` 49 ``` **Input:** ``` 2 1 1 ``` **Output:** ``` 1 ``` **Explanation:** In the first example, the height array is [1, 8, 6, 2, 5, 4, 8, 3, 7]. The container formed by lines at positions 1 (height 1) and 8 (height 7) holds 49 units of water. In the second example, both lines have height 1, so the container holds 1 unit of water.","solution":"def max_area(heights): Returns the maximum area of water that can be contained by two lines. n = len(heights) left, right = 0, n - 1 max_water = 0 while left < right: height = min(heights[left], heights[right]) width = right - left max_water = max(max_water, height * width) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"Grocery shopping can sometimes be a hassle, especially when dealing with multiple items on a shopping list. You need to determine if you can buy all the items on your grocery list with the amount of money you have. You have a list of `n` items, where each item has a unique identifier and a price. Additionally, you have a list of `m` shopping budgets, where each budget corresponds to a different shopping session. For each shopping session, you need to determine whether you can buy all the items from your list within the given budget. The first line of the input contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of items on your grocery list. The second line contains `n` integers `pi` (1 ≤ pi ≤ 100,000) — prices of the items on your grocery list in the order they are listed. The third line contains a single integer `m` (1 ≤ m ≤ 100,000) — the number of shopping sessions. The next `m` lines each contain one integer `bi` (1 ≤ bi ≤ 10^9) — the budget for the i-th shopping session. Print `m` lines. On the i-th line, print \\"YES\\" if the budget for the i-th shopping session is sufficient to buy all the items on the grocery list, otherwise print \\"NO\\". Example: Input: 5 10 20 30 40 50 3 150 100 200 Output: YES NO YES In this example: - In the first shopping session, the budget is 150 which is enough to buy all items (10 + 20 + 30 + 40 + 50 = 150). - In the second shopping session, the budget is 100 which is not enough to buy all items. - In the third shopping session, the budget is 200 which is more than enough to buy all items.","solution":"def can_buy_all_items(n, prices, m, budgets): total_cost = sum(prices) results = [] for budget in budgets: if budget >= total_cost: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers and a target sum. Determine if there are three distinct elements in the array that add up to the target sum. # Input - The first line contains an integer n (3 ≤ n ≤ 10^3), which is the number of elements in the array. - The second line contains n space-separated integers that represent the elements of the array. Each element will be an integer in the range [-10^9, 10^9]. - The third line contains a single integer target, the target sum you need to find. # Output Output \\"YES\\" if there are three distinct elements in the array that add up to the target sum, otherwise output \\"NO\\". # Examples Example 1 **Input:** ``` 5 1 2 3 4 5 9 ``` **Output:** ``` YES ``` **Explanation:** The combination 2 + 3 + 4 adds up to 9. Example 2 **Input:** ``` 4 1 2 4 5 12 ``` **Output:** ``` NO ``` **Explanation:** There\'s no combination of three distinct elements that add up to 12.","solution":"def three_sum(nums, target): Determine if there are three distinct elements in the array that add up to the target sum. :param nums: List of integers :param target: Target sum integer :return: \\"YES\\" if there exist three elements that add up to target, otherwise \\"NO\\" nums.sort() n = len(nums) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return \\"YES\\" elif current_sum < target: left += 1 else: right -= 1 return \\"NO\\""},{"question":"You are given a list of bus routes. Each bus route is represented by a list of integers that indicate the bus stops on that route in the order the bus visits them. The bus service needs to answer several queries about the travel between two specific bus stops. Each query consists of two integers, start and end, representing the starting and ending bus stops. For each query, determine if there is a direct or indirect route between the start and end bus stops by taking one or more buses. Given a list of bus routes and multiple queries, write a function to determine if there is a possible route for each query. If a route exists (either direct or involving transfers between buses), return \\"YES\\", otherwise return \\"NO\\". The first line contains an integer n (1 ≤ n ≤ 50) — the number of bus routes. Each of the next n lines contains a list of integers separated by spaces, which represent the bus stops for that particular route. Each route falls under the constraint 1 ≤ length of each route ≤ 1000 and 1 ≤ bus stop ≤ 10000. All bus stops in a route are unique. The next line contains an integer q (1 ≤ q ≤ 100) — the number of queries. The next q lines each contain two integers start and end (1 ≤ start, end ≤ 10000) — the starting and ending bus stops for the query. For each query, print \\"YES\\" if there is a possible route, otherwise print \\"NO\\". Assume that all bus stops in the queries and routes are part of at least one route. Example input: ``` 3 1 2 3 4 5 5 6 7 8 8 9 10 2 1 10 2 9 ``` Example output: ``` YES NO ```","solution":"def can_travel(bus_routes, queries): from collections import defaultdict, deque # Create a graph of bus stops graph = defaultdict(set) for route in bus_routes: for i in range(len(route)): for j in range(i + 1, len(route)): graph[route[i]].add(route[j]) graph[route[j]].add(route[i]) results = [] for start, end in queries: if start == end: results.append(\\"YES\\") continue # BFS to find if there\'s a path between start and end visited = set() queue = deque([start]) found = False while queue: current = queue.popleft() if current == end: found = True break for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a string s consisting of lowercase English letters, you need to find the length of the longest substring containing at most k distinct characters. # Input - The first line contains an integer k (1 ≤ k ≤ 26) — the maximum number of distinct characters in the substring. - The second line contains a string s (1 ≤ |s| ≤ 10^5) — the input string consisting of only lowercase English letters. # Output - Print a single integer — the length of the longest substring of s that contains at most k distinct characters. # Example Input: ``` 2 eceba ``` Output: ``` 3 ``` Explanation: The substring is \\"ece\\" which contains 2 distinct characters and has length 3. # Note: To solve this problem, you can use the sliding window (or two-pointer) technique.","solution":"def length_of_longest_substring_k_distinct(k, s): Returns the length of the longest substring containing at most k distinct characters. Parameters: k (int): The maximum number of distinct characters in the substring. s (str): The input string consisting of only lowercase English letters. Returns: int: The length of the longest substring with at most k distinct characters. if k == 0 or not s: return 0 n = len(s) left = 0 # the start index of the sliding window right = 0 # the end index of the sliding window max_length = 0 char_count = {} # dictionary to store the count of characters in the current window while right < n: char = s[right] if char in char_count: char_count[char] += 1 else: char_count[char] = 1 while len(char_count) > k: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"You are given an integer matrix with n rows and m columns, where each cell contains a positive integer. You are tasked with finding two different cells such that the Manhattan distance between them is equal to the given integer d. The Manhattan distance between two cells (i_1, j_1) and (i_2, j_2) is defined as |i_1 - i_2| + |j_1 - j_2|. The first line contains three integers n, m, and d (1 le n, m le 2000, 1 le d le n + m - 2) — the number of rows, the number of columns, and the specified Manhattan distance, respectively. Each of the next n lines contains m integers, each between 1 and 10000, representing the elements of the matrix. If it is impossible to find such two different cells, print \\"NO\\" (without quotes). Otherwise, print \\"YES\\" (without quotes) on the first line, followed by two lines, each containing two integers representing the coordinates of the two cells with the required Manhattan distance. You can print the coordinates in any order. If there are multiple possible answers, print any of them. **Example:** Input: ``` 3 3 2 1 2 3 4 5 6 7 8 9 ``` Output: ``` YES 1 1 2 2 ``` In this example, the Manhattan distance between the cells (1, 1) and (2, 2) is |1 - 2| + |1 - 2| = 2, which matches the given distance.","solution":"def find_cells_with_distance(n, m, d, matrix): # Check all pairs of cells in the matrix for i1 in range(n): for j1 in range(m): for i2 in range(n): for j2 in range(m): if (i1 != i2 or j1 != j2) and (abs(i1 - i2) + abs(j1 - j2) == d): return \\"YES\\", (i1 + 1, j1 + 1), (i2 + 1, j2 + 1) # Coordinates are 1-based return \\"NO\\", None, None # Example usage: # n, m, d = 3, 3, 2 # matrix = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # print(find_cells_with_distance(n, m, d, matrix))"},{"question":"You are given an array of integers that represents the stock prices of a company in chronological order. A trading strategy you have devised allows you to make at most two transactions to maximize profit. Each transaction consists of buying one unit of a stock and then selling that unit later. A transaction needs to be completed before you initiate the next one; in other words, you cannot hold more than one unit of stock at any time. Calculate the maximum profit you can achieve with at most two transactions. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), representing the number of days of stock prices. - The second line contains `n` integers separated by spaces, where the i-th integer `pi` (0 ≤ pi ≤ 10^5) represents the stock price on the i-th day. # Output - Output a single integer, representing the maximum profit that can be achieved with at most two transactions. # Example **Input:** ``` 6 3 3 5 0 0 3 1 4 ``` **Output:** ``` 6 ``` **Explanation:** - Buy on day 1 (price = 3) and sell on day 3 (price = 5), profit = 5 - 3 = 2. - Then buy on day 5 (price = 0) and sell on day 8 (price = 4), profit = 4 - 0 = 4. - Total profit = 2 + 4 = 6.","solution":"def max_profit_with_two_transactions(prices): if not prices: return 0 n = len(prices) if n == 1: return 0 # Initialize the variables for the two transactions first_buy = float(\'-inf\') first_sell = 0 second_buy = float(\'-inf\') second_sell = 0 for price in prices: first_buy = max(first_buy, -price) first_sell = max(first_sell, first_buy + price) second_buy = max(second_buy, first_sell - price) second_sell = max(second_sell, second_buy + price) return second_sell"},{"question":"Your task is to design a class called `Matrix` that represents a 2D matrix of integers and provides basic operations over matrices. Implement the following methods for this class: 1. **Constructor**: Initialize the matrix with 2D list where each element is an integer. 2. **add**: Takes another `Matrix` object as an argument and returns a new `Matrix` object that is the sum of the two matrices. If the matrices have different dimensions, raise a `ValueError`. 3. **subtract**: Takes another `Matrix` object as an argument and returns a new `Matrix` object that is the difference of the two matrices. If the matrices have different dimensions, raise a `ValueError`. 4. **multiply**: Takes another `Matrix` object as an argument and returns a new `Matrix` object that is the product of the two matrices. If the number of columns in the first matrix is not equal to the number of rows in the second matrix, raise a `ValueError`. 5. **transpose**: Returns a new `Matrix` object that is the transpose of the original matrix. 6. **__str__**: Returns a string representation of the matrix in a readable format. Here is the sample usage and expected outputs: ```python # Sample input matrix1 = Matrix([[1, 2, 3], [4, 5, 6]]) matrix2 = Matrix([[7, 8, 9], [10, 11, 12]]) # Summing matrices result_add = matrix1.add(matrix2) print(result_add) # Subtracting matrices result_subtract = matrix1.subtract(matrix2) print(result_subtract) # Multiplying matrices matrix3 = Matrix([[1, 2], [3, 4], [5, 6]]) result_multiply = matrix1.multiply(matrix3) print(result_multiply) # Transposing a matrix result_transpose = matrix1.transpose() print(result_transpose) ``` Expected Output: ``` Matrix([[8, 10, 12], [14, 16, 18]]) Matrix([[-6, -6, -6], [-6, -6, -6]]) Matrix([[22, 28], [49, 64]]) Matrix([[1, 4], [2, 5], [3, 6]]) ``` Implement the `Matrix` class with the specified methods.","solution":"class Matrix: def __init__(self, data): Initialize the matrix with a 2D list where each element is an integer. if not all(isinstance(row, list) and all(isinstance(col, int) for col in row) for row in data): raise ValueError(\\"Matrix must be a 2D list of integers.\\") self.data = data self.rows = len(data) self.cols = len(data[0]) if self.rows > 0 else 0 def add(self, other): Takes another Matrix object as an argument and returns a new Matrix object that is the sum of the two matrices. If the matrices have different dimensions, raise a ValueError. if self.rows != other.rows or self.cols != other.cols: raise ValueError(\\"Matrices must have the same dimensions\\") result = [[self.data[row][col] + other.data[row][col] for col in range(self.cols)] for row in range(self.rows)] return Matrix(result) def subtract(self, other): Takes another Matrix object as an argument and returns a new Matrix object that is the difference of the two matrices. If the matrices have different dimensions, raise a ValueError. if self.rows != other.rows or self.cols != other.cols: raise ValueError(\\"Matrices must have the same dimensions\\") result = [[self.data[row][col] - other.data[row][col] for col in range(self.cols)] for row in range(self.rows)] return Matrix(result) def multiply(self, other): Takes another Matrix object as an argument and returns a new Matrix object that is the product of the two matrices. If the number of columns in the first matrix is not equal to the number of rows in the second matrix, raise a ValueError. if self.cols != other.rows: raise ValueError(\\"Number of columns in the first matrix must equal the number of rows in the second matrix\\") result = [[0] * other.cols for _ in range(self.rows)] for i in range(self.rows): for j in range(other.cols): result[i][j] = sum(self.data[i][k] * other.data[k][j] for k in range(self.cols)) return Matrix(result) def transpose(self): Returns a new Matrix object that is the transpose of the original matrix. result = [[self.data[col][row] for col in range(self.rows)] for row in range(self.cols)] return Matrix(result) def __str__(self): Returns a string representation of the matrix in a readable format. return \\"Matrix(\\" + str(self.data) + \\")\\""},{"question":"Given a matrix of size n times m, your task is to count the number of distinct paths from the top-left corner of the matrix to the bottom-right corner. The movement is restricted to rightward or downward directions only, and you may encounter cells that are blocked. You are given: - The dimensions of the matrix n and m, where 1 leq n, m leq 100. - The matrix itself with n rows and m columns, where each cell can either be \\"0\\" (open) or \\"1\\" (blocked). Write a program to find the number of distinct paths from the top-left cell (0, 0) to the bottom-right cell (n-1, m-1) considering the constraints. Input: - The first line contains two integers, n and m. - The next n lines each contain m characters, either \\"0\\" or \\"1\\", representing the matrix. Output: - Print a single integer representing the number of distinct paths from (0, 0) to (n-1, m-1). If there are no such paths, print \\"0\\". Example: Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` Explanation: In this example, there are two distinct paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Note: If the starting cell or the ending cell is blocked (\\"1\\"), the number of paths should be 0.","solution":"def count_paths(n, m, matrix): # Check if the start or end cell is blocked if matrix[0][0] == \'1\' or matrix[n-1][m-1] == \'1\': return 0 # Initialize a dp table with 0s dp = [[0] * m for _ in range(n)] # Starting point dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if matrix[i][j] == \'1\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] # The number of distinct paths to the bottom-right cell return dp[n-1][m-1]"},{"question":"You are given a list of n integers. Your task is to divide this list into two non-empty sublists such that the difference between the sums of the two sublists is minimized. The list should be divided as follows: - Each sublist must contain at least one integer. - The difference between the sums of the integers of these two sublists should be as small as possible. Write a function to find that minimum difference. # Input Format - The first line contains a single integer n (2 le n le 50) — the number of integers in the list. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 100) — the elements of the list. # Output Format - Print the minimum possible difference between the sums of the two sublists. # Example Input ``` 4 1 6 11 5 ``` Output ``` 1 ``` # Explanation In the first example, you can split the list into two sublists: {1, 11} and {6, 5}, which gives the sums 12 and 11, so the difference is 1, which is the minimum possible difference.","solution":"def min_difference(n, arr): Function to find the minimum possible difference between the sums of two sublists. Parameters: n (int): The number of integers in the list. arr (list of int): The list of integers. Returns: int: The minimum possible difference between the sums of the two sublists. total_sum = sum(arr) dp = [False] * (total_sum // 2 + 1) dp[0] = True for num in arr: for i in range(total_sum // 2, num - 1, -1): dp[i] = dp[i] or dp[i - num] for i in range(total_sum // 2, -1, -1): if dp[i]: return total_sum - 2 * i"},{"question":"A programming language interpreter offers users the ability to define methods within classes. The syntax for defining a method within a class in this programming language is as follows: ``` class ClassName { def methodName(parameters) { // body of the method } } ``` Each method can contain any number of statements. For simplicity, assume the programming language only supports five types of statements: 1. Assignment: `variable = expression` 2. Print: `print(expression)` 3. Conditional: `if (condition) { statements } else { statements }` 4. Loop: `while (condition) { statements }` 5. Return: `return expression` Given the description of a class without any already defined class or method names, you need to parse and output the names of all methods defined within the provided class. # Input - The input consists of several lines. - The first line contains the keyword `class` followed by the class name. - Subsequent lines contain the method definitions and method bodies using correct syntax as mentioned above. - The file ends when there are no more lines of input. # Output - Print the names of all methods defined in the given class. - Each method name should be printed on a new line in the order they appeared in the input. # Constraints - The class contains between 1 and 10 methods. - Each method can contain between 0 and 50 statements. - There are no nested class definitions. # Example Input ``` class SampleClass { def methodOne(a, b) { c = a + b; print(c); } def methodTwo(x) { if (x > 0) { print(\\"Positive\\"); } else { print(\\"Non-positive\\"); } } def methodThree() { while (true) { print(\\"Looping\\"); } } } ``` Output ``` methodOne methodTwo methodThree ``` Keep in mind the constraints and ensure your solution can handle the given input sizes effectively.","solution":"def extract_method_names(class_definition): method_names = [] lines = class_definition.split(\\"n\\") for line in lines: line = line.strip() if line.startswith(\\"def \\"): method_name = line.split()[1].split(\\"(\\")[0] method_names.append(method_name) return method_names"},{"question":"You are helping a company organize the shift schedules of its employees. Each shift is represented as a time interval in a 24-hour format (HH:MM-HH:MM). Shifts partially overlap if they share some of their time, and fully overlap if one shift is entirely within the time frame of another shift. Write a function `merge_shifts(shifts)` that accepts a list of shifts and merges all overlapping shifts into single time intervals. The result should be given as a list of merged shifts sorted by their start times. A new shift should be created only if it does not overlap with any of the existing shifts. # Input - A list of strings `shifts`, where each string represents a shift in the format \\"HH:MM-HH:MM\\". - The list contains at least one shift and at most 10^4 shifts. - All input times are valid 24-hour times (00:00-23:59). - Shifts are not necessarily sorted. # Output - A list of strings representing the merged, non-overlapping shifts in the same format, sorted by start times. # Examples ```python merge_shifts([\\"09:00-10:30\\", \\"10:15-11:15\\", \\"13:00-14:00\\", \\"12:00-13:30\\"]) # Output: [\\"09:00-11:15\\", \\"12:00-14:00\\"] merge_shifts([\\"22:00-23:30\\", \\"23:00-23:59\\", \\"00:00-01:00\\", \\"23:45-00:15\\"]) # Output: [\\"00:00-01:00\\", \\"22:00-23:59\\"] merge_shifts([\\"08:00-09:00\\", \\"09:00-10:00\\", \\"10:00-11:00\\"]) # Output: [\\"08:00-11:00\\"] ``` # Constraints - The function must handle up to 10^4 shifts efficiently. - The function should correctly merge overlapping and fully contained shifts. # Notes 1. The start time of a merged shift is the earliest start time among the merged shifts. 2. The end time of a merged shift is the latest end time among the merged shifts. 3. Ensure the format of the output matches the input format (HH:MM-HH:MM).","solution":"def merge_shifts(shifts): Merges overlapping shifts into single time intervals. Args: shifts (List[str]): List of shift time intervals in \\"HH:MM-HH:MM\\" format. Returns: List[str]: List of merged shift intervals in sorted order. # Utility function to convert time in HH:MM to minutes since midnight. def to_minutes(hhmm): hh, mm = map(int, hhmm.split(\\":\\")) return hh * 60 + mm # Utility function to convert minutes since midnight to HH:MM. def to_hhmm(minutes): hh = minutes // 60 mm = minutes % 60 return f\\"{hh:02d}:{mm:02d}\\" # Convert shifts to a list of tuples (start_minutes, end_minutes) intervals = [(to_minutes(start), to_minutes(end)) for shift in shifts for start, end in [shift.split(\\"-\\")]] # Sort intervals by start time intervals.sort() # Merge intervals merged_intervals = [] for start, end in intervals: if not merged_intervals or merged_intervals[-1][1] < start: merged_intervals.append((start, end)) else: merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], end)) # Convert merged intervals back to HH:MM-HH:MM format return [f\\"{to_hhmm(start)}-{to_hhmm(end)}\\" for start, end in merged_intervals]"},{"question":"Given a list of integers, find a contiguous subarray (containing at least one number) which has the largest sum and return its sum. Input: The first line of input contains an integer n (1 le n leq 10^5) — the number of elements in the array. The second line contains n space-separated integers representing elements of the array A (-10^4 le A_i le 10^4). Output: Output a single integer, which is the sum of the contiguous subarray with the maximum sum. Example: Input: ``` 9 -2 1 -3 4 -1 2 1 -5 4 ``` Output: ``` 6 ``` Explanation: The subarray [4, -1, 2, 1] has the largest sum = 6. Note: The solution should be efficient with a time complexity of O(n).","solution":"def max_subarray_sum(nums): Returns the sum of the contiguous subarray with the largest sum. :param nums: List[int], the input list of integers :return: int, the largest sum of a contiguous subarray if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"There is a tree with n nodes rooted at node 1. Each node has a value associated with it. You need to perform updates and queries on this tree. Two types of operations can be performed on the tree: 1. Update: Add a given value to the value of a particular node and all of its descendants. 2. Query: Find the sum of values in the subtree rooted at a particular node. Initially, the values of all nodes are zero. Input: - The first line contains two integers, n and q (1 le n, q le 200,000), representing the number of nodes in the tree and the number of operations respectively. - Each of the next n-1 lines contains two integers u and v (1 le u, v le n), representing an edge of the tree. - Each of the next q lines contains an operation: - \\"1 x v\\": Update operation - add value v to node x and all its descendants. - \\"2 x\\": Query operation - calculate the sum of values in the subtree rooted at node x. Output: - For each query operation, output the sum of values in the subtree rooted at node x. Example: Input: ``` 5 5 1 2 1 3 2 4 2 5 1 1 10 1 2 5 2 1 2 2 2 3 ``` Output: ``` 15 5 0 ``` Explanation: - After the first update operation, all nodes get updated with value 10. - After the second update operation, node 2 and its descendant node 4 get an additional value of 5. - The result for the first query is the sum of all values in the subtree rooted at node 1 (which includes all nodes). - The result for the second query is the sum of values in the subtree rooted at node 2 (which includes nodes 2 and 4). - The result for the third query is the value of node 3 (no update was performed on this subtree after the initial update).","solution":"class Tree: def __init__(self, n): self.n = n self.tree = [[] for _ in range(n+1)] self.values = [0] * (n+1) self.subtree_sum = [0] * (n+1) self.parent = [0] * (n+1) self.size = [0] * (n+1) def add_edge(self, u, v): self.tree[u].append(v) self.tree[v].append(u) def dfs1(self, node, par): self.parent[node] = par self.size[node] = 1 for child in self.tree[node]: if child != par: self.size[node] += self.dfs1(child, node) return self.size[node] def dfs2(self, node, par): self.subtree_sum[node] = self.values[node] for child in self.tree[node]: if child != par: self.dfs2(child, node) self.subtree_sum[node] += self.subtree_sum[child] def update_node(self, node, value): self.values[node] += value def update_subtree(self): self.dfs2(1, 0) def query(self, node): return self.subtree_sum[node] def process_operations(n, edges, operations): tree = Tree(n) for u, v in edges: tree.add_edge(u, v) tree.dfs1(1, 0) # Initialize parent and size info tree.dfs2(1, 0) # Initialize subtree_sum info result = [] for op in operations: if op[0] == 1: _, x, v = op tree.update_node(x, v) tree.update_subtree() elif op[0] == 2: _, x = op result.append(tree.query(x)) return result"},{"question":"Sophie loves folding origami frogs. She has n sheets of paper and each origami frog requires a specific number of sheets, which may vary. She wants to determine the maximum number of origami frogs she can create if she uses the available sheets optimally. The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100), where n is the number of paper sheets Sophie has, and m is the number of different types of frogs she knows how to make. The second line contains m integers, where the i-th integer represents the number of sheets required to make the i-th type of frog. Print the maximum number of origami frogs Sophie can create using her n sheets of paper distributed optimally among the m different types of frogs. # Sample Input: ``` 7 3 2 3 4 ``` # Sample Output: ``` 3 ``` # Explanation: Sophie can make 3 frogs using 2 sheets each. This uses up all her sheets (2 * 3 = 6), and no sheets are left. If she tries to make any other type of frog, she would not be able to reach a maximum of 3. # Constraints: - You must use a greedy or dynamic programming approach to find the optimal solution. - Ensure the solution handles edge cases like minimal and maximal input sizes efficiently.","solution":"def max_frogs(n, m, sheets_required): Returns the maximum number of origami frogs Sophie can create. :param n: Number of paper sheets Sophie has :param m: Number of different types of frogs Sophie knows how to make :param sheets_required: List of integers representing the number of sheets required for each type of frog :return: Maximum number of origami frogs Sophie can create # Sort the sheets_required list in ascending order sheets_required.sort() total_frogs = 0 for sheets in sheets_required: if n < sheets: break num_of_frogs = n // sheets total_frogs += num_of_frogs n -= num_of_frogs * sheets return total_frogs"},{"question":"You are given a binary tree rooted at node 1, with n nodes (numbered from 1 to n). Each node of the binary tree has a value assigned to it. Your task is to determine two nodes u and v in the tree such that the value of the node v is the square of the value of node u, and the distance between nodes u and v is maximized. The distance between two nodes is defined as the number of edges on the simple path between them. The input format is as follows: - The first line contains an integer n (1 leq n leq 10^5), the number of nodes in the binary tree. - The second line contains n space-separated integers, where the i-th integer represents the value of the i-th node. - Each of the next (n-1) lines contains two integers a and b (1 leq a, b leq n), denoting an edge between nodes a and b. The output should be a single integer, the maximum distance between nodes u and v, where the value of node v is the square of the value of node u. If no such pair exists, output -1. Example input: ``` 5 2 3 4 9 16 1 2 1 3 2 4 2 5 ``` Example output: ``` 3 ``` In the example, node 1 has a value of 2, and node 4 has a value of 9 (which is 3^2). The distance between node 1 and node 4 is 2. Node 1 also has a value such that node 5 has its square (16), and the distance between 1 and 5 is 3, which is the maximum possible.","solution":"from collections import defaultdict, deque def find_max_distance(n, values, edges): # Build the adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Find all value pairs (u, v) such that value[v] = value[u]**2 value_to_nodes = defaultdict(list) for i, value in enumerate(values): value_to_nodes[value].append(i + 1) # Initialize maximum distance max_distance = -1 # Iterate each node and find bfs distance to all other nodes for u in range(1, n + 1): if values[u-1]**2 in value_to_nodes: # Perform BFS from node u q = deque([(u, 0)]) visited = set() visited.add(u) while q: current, dist = q.popleft() for neighbor in tree[current]: if neighbor not in visited: visited.add(neighbor) q.append((neighbor, dist + 1)) if values[neighbor - 1] == values[u - 1]**2: max_distance = max(max_distance, dist + 1) return max_distance # Example to demonstrate the function if __name__ == \\"__main__\\": n = 5 values = [2, 3, 4, 9, 16] edges = [(1, 2), (1, 3), (2, 4), (2, 5)] print(find_max_distance(n, values, edges)) # Output should be 3"},{"question":"In a faraway kingdom, the king decided to decorate his castle using colored bricks. The castle consists of n rooms and m bidirectional corridors connecting these rooms. The goal is to color each corridor with one of c colors ((1 ≤ c ≤ 3)) such that no two corridors connected to the same room have the same color. Given n, m, and c, as well as the description of the corridors, write a program that determines if it\'s possible to color the corridors respecting the aforementioned condition. If it\'s possible, output \\"YES\\" followed by a list of integers, each representing the color of the corresponding corridor (starting from corridor 1 to m). If it\'s impossible, output \\"NO\\". The first line contains three integers n (1 ≤ n ≤ 1000), m (1 ≤ m ≤ 2000), and c (1 ≤ c ≤ 3), representing the number of rooms, corridors, and colors respectively. The next m lines each contain two integers ui and vi (1 ≤ ui, vi ≤ n; ui ≠ vi), meaning there is a corridor between rooms ui and vi. Example: Input: 4 4 3 1 2 1 3 2 3 3 4 Output: YES 1 2 3 1 In this example, corridors are numbered in the order they are listed in the input. The output \\"1 2 3 1\\" represents the color assignment to each corridor in the same order.","solution":"def can_color_corridors(n, m, c, corridors): if c < 3 and any(len(corridors) > 2 for u, v in corridors): return \\"NO\\" adj = [[] for _ in range(n + 1)] corridor_colors = [-1] * m for index, (u, v) in enumerate(corridors): adj[u].append((v, index)) adj[v].append((u, index)) def dfs(v, current_color, visited): for to, index in adj[v]: if corridor_colors[index] == -1: corridor_colors[index] = current_color next_color = 1 + len({current_color, 1}) % c if next_color == current_color: next_color = (next_color + 1) % c + 1 dfs(to, next_color, visited) visited.add(to) visited = set() for v in range(1, n + 1): if v not in visited: dfs(v, 1, visited) return \\"YESn\\" + \\" \\".join(map(str, corridor_colors)) def read_input_string(input_string): data = input_string.strip().split(\'n\') n, m, c = map(int, data[0].split()) corridors = [tuple(map(int, line.split())) for line in data[1:]] return n, m, c, corridors # Example usage: input_string = \\"4 4 3n1 2n1 3n2 3n3 4\\" n, m, c, corridors = read_input_string(input_string) result = can_color_corridors(n, m, c, corridors) print(result)"},{"question":"You are given a list of integers representing the heights of buildings in a city skyline from left to right. Your task is to find the maximum area of a rectangle that can be formed between the buildings. Assume that the width of each building is 1 unit. For example, if you are given the list `[2, 1, 5, 6, 2, 3]`, the maximum area rectangle has height 5 and spans 2 units wide, forming an area of 10. Write a function `max_rectangle_area(heights)` that takes a list of integers `heights` and returns the maximum area of the rectangle that can be formed. # Input: - `heights` (a list of integers, where each integer represents the height of a building and the width of each building is 1 unit. The length of the list is between 1 and 10^5. Each building height is between 1 and 10^5.) # Output: - Return a single integer which is the maximum rectangular area that can be formed between the buildings. # Examples: Input: `[2, 1, 5, 6, 2, 3]` Output: `10` Input: `[1, 1, 1, 1, 1]` Output: `5` Input: `[6, 2, 5, 4, 5, 1, 6]` Output: `12`","solution":"def max_rectangle_area(heights): Returns the maximum rectangular area that can be formed between the buildings. :param heights: List of integers representing the heights of buildings. :return: Maximum rectangular area. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given an undirected graph with n nodes and m edges. The nodes are labeled from 1 to n. The graph is represented by an adjacency matrix g[1...n, 1...n], where g[i][j] = 1 indicates an edge between node i and node j, and g[i][j] = 0 indicates no edge. Each node also has a value associated with it, stored in an array v[1...n]. You are tasked with finding the maximum sum of node values in any connected subgraph. A subgraph is connected if there is a path between any pair of nodes in the subgraph. Write a function that returns the maximum sum of node values for any connected subgraph of the given graph. Input: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) representing the number of nodes and edges in the graph, respectively. - The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 1000) representing the values of the nodes. - The next m lines each contain two integers u and w (1 ≤ u, w ≤ n) indicating there is an edge between nodes u and w. Output: - Print a single integer, the maximum sum of node values for any connected subgraph. Example: ``` Input: 5 4 1 2 3 4 5 1 2 2 3 3 4 4 5 Output: 15 ``` Note: In the given example, the entire graph is connected and includes all nodes. Hence, the maximum sum of values is the sum of all node values (1+2+3+4+5=15).","solution":"def find_max_connected_subgraph_sum(n, m, values, edges): from collections import defaultdict, deque def bfs(start): queue = deque([start]) visited[start] = True total_sum = 0 while queue: node = queue.popleft() total_sum += values[node] for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return total_sum # Create adjacency list adjacency_list = defaultdict(list) for u, w in edges: adjacency_list[u - 1].append(w - 1) adjacency_list[w - 1].append(u - 1) visited = [False] * n max_sum = 0 # Perform BFS for each node to find connected components for node in range(n): if not visited[node]: max_sum = max(max_sum, bfs(node)) return max_sum"},{"question":"You are given an array A consisting of n integers. The array is said to be \\"beautiful\\" if for every pair of indices i and j with 0 ≤ i < j < n, the absolute difference between A[i] and A[j] is distinct (i.e., all the absolute differences between elements are unique). Your task is to find the lexicographically smallest \\"beautiful\\" array of length n. The lexicographical order is defined as follows: array A is considered smaller than array B if there exists some index k such that for all indices i < k, A[i] = B[i] and A[k] < B[k]. Input: - The first line contains an integer n (1 ≤ n ≤ 100), the length of the array. Output: - Print a single line containing the lexicographically smallest \\"beautiful\\" array of length n. If multiple answers exist, print any of them. Example: ``` Input: 3 Output: 0 1 3 ``` Note: - In the example, the absolute differences are: |0-1|=1, |0-3|=3, |1-3|=2, all of which are unique. Thus, [0, 1, 3] forms a beautiful array.","solution":"def find_beautiful_array(n): Returns the lexicographically smallest beautiful array of length n. if n == 1: return [0] beautiful_array = [0] current = 1 diffs = set() while len(beautiful_array) < n: add = True for num in beautiful_array: diff = abs(num - current) if diff in diffs: add = False break if add: beautiful_array.append(current) for num in beautiful_array: if num != current: diffs.add(abs(num - current)) current += 1 return beautiful_array"},{"question":"You are given an array of integers arr of length n and an integer k. You need to determine if you can partition the array into exactly k non-overlapping subarrays such that the sum of each subarray is an even number. A partition is valid if and only if each subarray has at least one element. For example, if the array is [1, 2, 3, 4, 5], one possible partition into 2 subarrays with even sums is [[1, 3, 4], [2, 5]]. The first line contains a single integer T (1 le T le 100) — the number of test cases. The next 2T lines contain descriptions of the test cases — two lines per test case. The first line contains two integers n and k (1 le n le 10^5, 1 le k le n). The second line contains n integers representing the array elements, each in the range 1 le arr[i] le 10^9. It is guaranteed that the total sum of n across all test cases does not exceed 10^5. For each test case, print \\"YES\\" if it\'s possible to partition the array into exactly k subarrays with even sums, or \\"NO\\" if it\'s not possible. Example: Input: 2 5 2 1 2 3 4 5 4 3 2 4 6 8 Output: YES NO","solution":"def can_partition_with_even_sums(test_cases): def is_possible_partition(arr, n, k): even_indices = [i for i, num in enumerate(arr) if num % 2 == 0] odd_count = len(arr) - len(even_indices) if len(even_indices) < k: return \\"NO\\" subarrays = [] even_sums = [0] * k if odd_count > 0: current_array = [] for i in even_indices: if len(current_array) == 0 or sum(current_array) % 2 == 1: current_array.append(arr[i]) if sum(current_array) % 2 == 0: subarrays.append(current_array) current_array = [] elif len(current_array) < k - len(subarrays): current_array.append(arr[i]) while len(current_array) > 0: subarrays.append(current_array) current_array = [] else: current_array = [] for i in even_indices: if sum(current_array + [arr[i]]) % 2 == 0 and len(current_array) > 0: subarrays.append(current_array) current_array = [arr[i]] else: current_array.append(arr[i]) if len(current_array) > 0: subarrays.append(current_array) return \\"YES\\" if len(subarrays) == k else \\"NO\\" results = [] for case in test_cases: n, k = case[0] arr = case[1] results.append(is_possible_partition(arr, n, k)) return results"},{"question":"You are given a grid representing a field of flowers, where each cell contains an integer representing the number of flowers in that specific area. Ayla is planning to water her field by using horizontal and vertical sprinkler systems. Each system can be placed along any row or column, and will water all the cells in that row or column. Ayla wants to maximize the total number of flowers watered by exactly one horizontal or one vertical sprinkler system. Note that a cell should not be watered by both a row sprinkler and a column sprinkler at the same time. Your task is to determine the maximum total number of flowers that can be watered by placing exactly one horizontal or vertical sprinkler system. The input consists of: - The first line contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. - The next n lines each contain m integers, where the j-th integer in the i-th line, flowers_{i,j}, represents the number of flowers in the cell located at the i-th row and the j-th column. Output a single integer — the maximum total number of flowers that can be watered by a single sprinkler system. **Example 1:** ``` Input: 3 3 2 1 4 5 3 8 9 6 7 Output: 22 Explanation: The optimal placement is along the 3rd row or 1st column, each with 22 flowers. ``` **Example 2:** ``` Input: 2 4 1 2 3 4 5 6 7 8 Output: 26 Explanation: The optimal placement is along the 2nd row with 26 flowers. ``` **Example 3:** ``` Input: 3 2 1 2 3 4 5 6 Output: 12 Explanation: The optimal placement is along the 3rd row with 12 flowers or alternatively along the 2nd column with 12 flowers. ```","solution":"def max_flowers(n, m, grid): Returns the maximum total number of flowers that can be watered by placing exactly one horizontal or vertical sprinkler system. max_flowers_row = max(sum(row) for row in grid) max_flowers_col = max(sum(grid[i][j] for i in range(n)) for j in range(m)) return max(max_flowers_row, max_flowers_col) # Example usage: # n = 3 # m = 3 # grid = [ # [2, 1, 4], # [5, 3, 8], # [9, 6, 7] # ] # print(max_flowers(n, m, grid)) # Output: 22"},{"question":"Elena is an avid collector of rare stamps. She wants to organize her stamp collection by arranging them in a rectangular grid. Each stamp is uniquely identified by an integer value, and she wants to place the stamps in a way that maximizes the number of unique values in each row and column. Since the collection is vast and this task is time-consuming, she needs your help to accomplish it. You are given an integer n which represents the size of the grid (n x n) and an array of n^2 integers representing the values of the stamps. Your task is to determine the maximum number of unique stamp values that can be placed in any row or column after arranging the stamps in the grid. Input: - The first line contains an integer n (1 ≤ n ≤ 100). - The second line contains n^2 integers, the values of the stamps (0 ≤ value ≤ 1000). Output: - Print a single integer, the maximum number of unique stamp values that can be placed in any row or column of the grid. Example: Input: 3 1 2 3 4 5 6 7 8 9 Output: 3 Explanation: In a 3x3 grid, each row and column can have up to 3 unique stamp values. Note: You may assume that the total number of stamps is always equal to n^2 and there are no duplicate stamp values in the provided list.","solution":"def max_unique_stamps_in_grid(n, stamps): Returns the maximum number of unique stamp values that can be placed in any row or column after arranging the stamps in an n x n grid. :param n: int - size of the grid (n x n) :param stamps: list of int - the values of the stamps :return: int - the maximum number of unique stamp values per row or column # Convert the list into a set to find unique values unique_stamps = set(stamps) # The maximum number of unique stamp values that can be placed in any row # or column is limited by the size of the grid n. return min(len(unique_stamps), n)"},{"question":"Vasya enjoys playing with his toys. One day, he lined up all his toy soldiers in a single row and noticed that some soldiers were standing upright while others were lying down. He wishes to rearrange them so that all upright soldiers come before any lying soldiers, while keeping the relative order of upright and lying soldiers intact. Vasya can perform only two types of operations: 1. Pick an upright soldier (represented by \'U\') and move it to the front of the row. 2. Pick a lying soldier (represented by \'L\') and move it to the end of the row. Your task is to help Vasya determine the minimum number of operations needed to achieve his desired arrangement. The first line contains a single integer n (1 ≤ n ≤ 10^5), which is the number of toy soldiers. The second line contains a string of length n, where each character is either \'U\' (upright soldier) or \'L\' (lying soldier), representing the initial arrangement of soldiers. Output the minimal number of operations needed. **Example:** Input: ``` 5 ULULU ``` Output: ``` 1 ``` Explanation: Vasya can pick the last \'U\' and move it to the front of the row, resulting in the arrangement \\"UUULL\\" which is now sorted with all upright soldiers before any lying soldiers. This requires only one operation, so the output is 1.","solution":"def min_operations_to_sort_soldiers(n, soldiers): Returns the minimum number of operations needed to rearrange the soldiers such that all upright soldiers (\'U\') come before any lying soldiers (\'L\'), while keeping the relative order of upright and lying soldiers intact. # Count total number of \'U\' and \'L\' count_u = soldiers.count(\'U\') count_l = soldiers.count(\'L\') # Initialize count of misplaced U\'s and L\'s misplaced_u = 0 misplaced_l = 0 # Iterate through the string and count misplaced \'U\'s and \'L\'s for i in range(count_u): if soldiers[i] == \'L\': misplaced_u += 1 for i in range(count_u, n): if soldiers[i] == \'U\': misplaced_l += 1 # The number of operations needed is the maximum of misplaced \'U\'s and \'L\'s return max(misplaced_u, misplaced_l)"},{"question":"You are a data engineer at an e-commerce company, and your task is to preprocess raw sales data for further analysis and report generation. The raw sales data consists of a list of transactions, where each transaction contains three values: `timestamp`, `price`, and `product_id`. The `timestamp` is recorded in a Unix epoch format (seconds since January 1, 1970), `price` is the amount of the transaction in cents, and `product_id` is a unique identifier for the product sold in the transaction. Your goal is to aggregate the transactions on a daily basis and compute two values for each date: 1. Total sales amount for each date. 2. The number of unique products sold for each date. Your input is a list of transactions sorted in ascending order by timestamp. Each transaction is represented as a tuple of `(timestamp, price, product_id)`. The output should be a list of tuples where each tuple represents a single date formatted as `YYYY-MM-DD`. Each tuple should contain: - The date (as a string in `YYYY-MM-DD` format). - The total sales amount for that date (in dollars). - The number of unique products sold on that date. For simplicity, assume that the `timestamp` will always be in the range of valid Unix epoch values. # Input - A list of transactions `transactions`, where each transaction is a tuple `(timestamp, price, product_id)`. # Output - A list of tuples in the format `(date, total_sales, unique_products)`, where: - `date` is a string formatted as `YYYY-MM-DD`. - `total_sales` is an integer representing the total sales amount in dollars for that date. - `unique_products` is an integer representing the number of unique products sold on that date. # Examples ```python transactions = [ (1609459200, 1000, 1), (1609459200, 2000, 2), (1609545600, 1500, 1), (1609632000, 3000, 3), (1609632000, 2500, 1), (1609718400, 500, 4), ] # Output: [ # (\'2021-01-01\', 30, 2), # (\'2021-01-02\', 15, 1), # (\'2021-01-03\', 55, 2), # (\'2021-01-04\', 5, 1), # ] transactions = [ (1619827200, 5000, 3), (1619827200, 6000, 4), (1619913600, 12000, 3), (1620000000, 8000, 4), (1620000000, 7000, 3), ] # Output: [ # (\'2021-04-30\', 110, 2), # (\'2021-05-01\', 120, 1), # (\'2021-05-02\', 150, 2), # ] ``` # Notes - You may find the `datetime` module in Python useful for converting Unix epoch timestamps to `YYYY-MM-DD` format. - Ensure that you handle each date and its associated transactions correctly without assuming that transactions for every possible date will be in the input.","solution":"from datetime import datetime from collections import defaultdict def preprocess_sales_data(transactions): Aggregates raw sales data on a daily basis. Parameters: transactions (list of tuples): List of transactions, where each transaction is a tuple (timestamp, price, product_id). Returns: list of tuples: Aggregated sales data, where each tuple is (date, total_sales, unique_products). # Dictionary to store aggregated data aggregated_data = defaultdict(lambda: {\'total_sales_cents\': 0, \'unique_products\': set()}) for timestamp, price, product_id in transactions: # Convert timestamp to date string date_str = datetime.utcfromtimestamp(timestamp).strftime(\'%Y-%m-%d\') aggregated_data[date_str][\'total_sales_cents\'] += price aggregated_data[date_str][\'unique_products\'].add(product_id) # Prepare final output result = [] for date, data in sorted(aggregated_data.items()): total_sales_dollars = data[\'total_sales_cents\'] / 100 unique_products = len(data[\'unique_products\']) result.append((date, total_sales_dollars, unique_products)) return result"},{"question":"ZS the Coder is fascinated by binary numbers and has a unique interest in bitwise operations. One day, he found an array `a` with `n` integers and decided to perform a bitwise AND operation to find the longest subarray where the bitwise AND of all the elements in that subarray is greater than zero. You are given an array `a` of `n` integers. Your task is to determine the length of the longest subarray where the bitwise AND of all elements in that subarray is greater than zero. Note: - A subarray is a contiguous part of the array. - The bitwise AND of a subarray is computed by taking the AND of all its elements. Consider the array `[a1, a2, ..., an]`. The bitwise AND of the subarray `[ai, ai+1, ..., aj]` should be greater than zero for the subarray length to be considered. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100), representing the number of elements in the array. - The second line contains `n` space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the elements of the array. # Output Print a single integer, the length of the longest subarray where the bitwise AND is greater than zero. If there is no such subarray, print 0. # Example Input: ``` 5 3 7 10 12 15 ``` Output: ``` 5 ``` Explanation: The bitwise AND of the entire array `[3, 7, 10, 12, 15]` is 0b11 AND 0b111 AND 0b1010 AND 0b1100 AND 0b1111 = 0b10 which is greater than zero and covers the entire array. Input: ``` 4 8 8 4 2 ``` Output: ``` 1 ``` Explanation: There is no subarray with more than 1 element such that the bitwise AND of its elements is greater than zero. Each individual element is a valid subarray with a bitwise AND of itself.","solution":"def longest_subarray_with_bitwise_and_greater_than_zero(n, arr): max_length = 0 current_length = 0 for num in arr: if num != 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"You are given a binary tree where each node has an integer value. The task is to find the largest amount of money you can collect by travelling along a path in the tree. A path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root. The sum of a path is the sum of the node values on the path. Implement a function `maxPathSum` that takes the root of the binary tree as input and returns the largest sum of values along any path in the tree. Input: - You are given the root of a binary tree with node values ranging from -10,000 to 10,000. - The number of nodes in the tree is in the range `[1, 3 * 10^4]`. Output: - Return an integer representing the maximum path sum. Example: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right # Example Tree # -10 # / # 9 20 # / # 15 7 root = TreeNode(-10) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) assert maxPathSum(root) == 42 # The path is 15 -> 20 -> 7 ``` Constraints: - The input tree is non-empty. - The function should handle trees with negative values efficiently. - You may define helper functions and classes if necessary. You can assume that the input will be provided in the form of a `TreeNode` object, as defined in the example.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathSum(root): Returns the maximum path sum in the binary tree. A path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. max_sum = float(\'-inf\') def helper(node): nonlocal max_sum if not node: return 0 # Recursively get the maximum path sum of the left and right sub-trees left_max = max(helper(node.left), 0) # Only consider positive contributions right_max = max(helper(node.right), 0) # Only consider positive contributions # Calculate the price of the current path current_sum = node.val + left_max + right_max # Update the maximum path sum found so far max_sum = max(max_sum, current_sum) # Return the maximum gain if continuing the path through the parent return node.val + max(left_max, right_max) helper(root) return max_sum"},{"question":"Given a sequence of integers, you are to determine whether the sequence can be arranged into an arithmetic progression. An arithmetic progression is a sequence of numbers in which the difference between consecutive terms is constant. The first line of the input contains a single integer n (1 leq n leq 100) representing the number of integers in the sequence. The second line of the input contains n space-separated integers representing the sequence. Each integer a_i (-10^4 leq a_i leq 10^4) may be positive or negative. Output \\"YES\\" if the numbers can be arranged into an arithmetic progression. Otherwise, output \\"NO\\". # Example: **Input:** ``` 5 3 5 1 7 9 ``` **Output:** ``` YES ``` **Explanation:** The sequence can be arranged as [1, 3, 5, 7, 9], which is an arithmetic progression with a common difference of 2. **Input:** ``` 4 1 4 9 7 ``` **Output:** ``` NO ``` **Explanation:** There is no way to reorder these elements to form an arithmetic progression.","solution":"def can_form_arithmetic_progression(n, sequence): Determines if the sequence of numbers can be arranged to form an arithmetic progression. Args: n : int : number of integers in the sequence sequence : list of int : the sequence of integers Returns: str : \\"YES\\" if the sequence can form an arithmetic progression, otherwise \\"NO\\" if n <= 1: return \\"YES\\" sequence.sort() common_diff = sequence[1] - sequence[0] for i in range(2, n): if sequence[i] - sequence[i-1] != common_diff: return \\"NO\\" return \\"YES\\""},{"question":"You are given a grid of size n times n filled with non-negative integers. You are allowed to move only in two directions: right (from cell (i, j) to cell (i, j+1)) and down (from cell (i, j) to cell (i+1, j)). Your task is to find the maximum sum of all numbers you can collect starting from the top-left cell (1, 1) to the bottom-right cell (n, n). The first line contains a single integer n (2 le n le 500) — the size of the grid. The next n lines each contain n integers separated by spaces, representing the grid. Print the maximum sum you can collect on a single line. # Example Input: ``` 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 12 ``` Explanation: The path that gives the maximum sum is 1 → 3 → 5 → 2 → 1, which sums up to 12.","solution":"def max_path_sum(grid): n = len(grid) # Create a dp table with the same dimensions as the grid dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row and the first column for i in range(1, n): dp[0][i] = dp[0][i - 1] + grid[0][i] for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[-1][-1]"},{"question":"You have a set of integers and a target integer. Your goal is to determine if any two distinct numbers in the set can be added together to equal the target integer. Write a function called `find_pair_with_sum` that takes as input a list of integers and a target integer. The function should return \\"YES\\" if there are two distinct integers in the list that add up to the target integer, and \\"NO\\" otherwise. # Input - A list of integers `nums` containing between 1 and 1000 elements, each element is between -10^9 and 10^9. - An integer `target` which is the target sum, between -10^9 and 10^9. # Output - Return \\"YES\\" if there are two distinct integers in the list that add up to the target integer, otherwise return \\"NO\\". # Examples Example 1 Input: ``` nums = [10, 15, 3, 7] target = 17 ``` Output: ``` YES ``` Explanation: 10 + 7 = 17 Example 2 Input: ``` nums = [1, 3, 5, 7] target = 2 ``` Output: ``` NO ``` Explanation: No two distinct numbers add up to 2.","solution":"def find_pair_with_sum(nums, target): Determines if any two distinct numbers in the list can be added together to equal the target integer. Args: nums (list): A list of integers. target (int): The target sum to find in the list. Returns: string: \\"YES\\" if two distinct numbers add up to the target, otherwise \\"NO\\". seen_numbers = set() for num in nums: if target - num in seen_numbers: return \\"YES\\" seen_numbers.add(num) return \\"NO\\""},{"question":"You are organizing a coding competition with n participants. Each participant can be paired with another participant to solve problems together. The difficulty of the problems they can solve together depends on their compatibility score, which is calculated as the sum of their individual skills. You are given an array of integers where the i-th integer represents the skill level of the i-th participant. A successful pair is defined as a pair of participants whose combined skill level is at least a given threshold k. Determine the number of successful pairs that can be formed from the list of participants. Each participant can be a part of only one pair. The first line contains two space-separated integers n and k (2 ≤ n ≤ 1000, 1 ≤ k ≤ 10^6) — the number of participants and the required skill threshold for a pair to be successful. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the skill levels of the participants. Output a single integer — the number of successful pairs that can be formed. Example Input: 5 10 1 9 8 2 7 Output: 2 In this example, the pairs (1, 9) and (8, 2) have sums 10 and 10, respectively, which meet the threshold. The participant with skill level 7 cannot form a pair with another participant that meets the threshold. Hence, the number of successful pairs is 2.","solution":"def count_successful_pairs(n, k, skills): # Sort the array to use two pointers approach skills.sort() left = 0 right = n - 1 count = 0 while left < right: if skills[left] + skills[right] >= k: count += 1 left += 1 right -= 1 else: left += 1 return count"},{"question":"You are given a garden with a grid of size `n x n`, where `n` is an odd integer (3 ≤ n ≤ 99). The garden is divided into `n` rows and `n` columns of square cells. Each cell either contains a plant or is empty. A plant can only grow optimally if it receives sunlight from at least one of its adjacent cells (left, right, top, or bottom). However, your task is to identify the cell located in the exact center of the garden and determine if a plant placed there would grow optimally. The center cell is at the coordinates (n//2, n//2). You will receive an integer `n` followed by `n` lines, each containing `n` characters. Each character is either `P` (indicating a plant) or `E` (indicating an empty cell). Write a function to determine if a plant placed in the center cell would grow optimally. Your function should return \\"YES\\" if the center cell would allow a plant to grow optimally, and \\"NO\\" otherwise. # Input - An odd integer `n` (3 ≤ n ≤ 99) — the size of the garden. - `n` lines follow, each containing `n` characters (`P` or `E`), which represent the garden grid. # Output - A single line with \\"YES\\" or \\"NO\\". # Example Input ``` 5 EPPPE PPPPP PPPPP PPPPP EPPPE ``` Output ``` YES ``` Input ``` 3 EEE EPE EEE ``` Output ``` NO ``` # Explanation In the first example, placing a plant in the center cell (at coordinates (2, 2)) will allow it to grow optimally since it is adjacent to four plants. In the second example, placing a plant in the center cell (at coordinates (1, 1)) will not allow it to grow optimally since it is surrounded by empty cells. Write a function `can_grow_in_center` to solve the problem.","solution":"def can_grow_in_center(n, garden): center = n // 2 adjacent_cells = [ (center - 1, center), # Top (center + 1, center), # Bottom (center, center - 1), # Left (center, center + 1), # Right ] for r, c in adjacent_cells: if garden[r][c] == \'P\': return \\"YES\\" return \\"NO\\""},{"question":"A company has a special project that requires a subset of its project teams to be highly collaborative. Each team in the company is made up of various employees represented as nodes in a graph. An edge between two nodes means that the two employees belong to the same project team and can collaborate directly with each other. The company wants to determine the largest number of employees that can form a fully collaborative subset of teams working on this project. A fully collaborative subset of teams is defined as a set of teams where every team has at least one employee that connects (either directly or indirectly) to every other employee in the subset through existing team collaborations. Your task is to find the size of the largest subset of teams that form a fully collaborative network. Input format: The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of employees. The second line contains an integer m (0 ≤ m ≤ 200,000) — the number of collaborative links between employees. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) denoting a collaborative link between employees u and v. Output a single integer — the size of the largest fully collaborative subset of teams. Example: Input: 7 5 1 2 2 3 3 4 5 6 6 7 Output: 4 In this example, employees 1, 2, 3, and 4 form the largest fully collaborative subset.","solution":"from collections import defaultdict, deque def find_largest_collaborative_subset(n, m, edges): Returns the size of the largest fully collaborative subset of teams. :param n: Number of employees :param m: Number of collaborative links :param edges: List of tuples representing collaborative links :return: Size of the largest fully collaborative subset of teams def bfs(node): queue = deque([node]) visited[node] = True count = 0 while queue: current = queue.popleft() count += 1 for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return count # Build the graph as an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) max_collaborative_subset_size = 0 for i in range(1, n + 1): if not visited[i]: subset_size = bfs(i) max_collaborative_subset_size = max(max_collaborative_subset_size, subset_size) return max_collaborative_subset_size"},{"question":"You are responsible for organizing a sequence of events in a new strategy board game. Each event takes a certain amount of time and has a specific priority level, which indicates its importance. Your task is to implement a scheduling algorithm that will determine the maximum total priority of events that can be attended within a given time limit. You are given a list of events, where each event i is characterized by its duration t_i and its priority level p_i. You can only attend an event if you have enough remaining time to complete its duration. The first line contains two integers n and T (1 le n le 1000, 1 le T le 1000), where n is the number of events and T is the total available time. Each of the next n lines contains two integers t_i and p_i (1 le t_i le T, 1 le p_i le 100), representing the duration and priority level of event i. Your task is to find the maximum total priority you can achieve by attending a selection of these events within the available time. Print a single integer — the maximum total priority of the selected events. # Example Input ``` 4 10 5 10 4 40 6 30 3 50 ``` Output ``` 90 ``` Explanation In this example, the best strategy is to attend the events with durations 4 and 3 and priority levels 40 and 50, respectively. This leads to a maximum total priority of 90.","solution":"def max_total_priority(n, T, events): # Initialize a 2D list to use as a DP table dp = [[0] * (T + 1) for _ in range(n + 1)] # Update the DP table for i in range(1, n + 1): t_i, p_i = events[i - 1] for time in range(T + 1): dp[i][time] = dp[i - 1][time] # Not attending the current event if time >= t_i: dp[i][time] = max(dp[i][time], dp[i - 1][time - t_i] + p_i) # Attending the current event return dp[n][T] # Example usage with given inputs n, T = 4, 10 events = [(5, 10), (4, 40), (6, 30), (3, 50)] print(max_total_priority(n, T, events)) # Expected output: 90"},{"question":"A nearby city is hosting a festival and they have a series of attractions planned in a linear order. There are n attractions in total, and you can visit each one exactly once. Each attraction has a different emotional impact on you which can be represented by an integer value. The city council wants to determine the maximum possible emotional impact you can achieve by visiting any number of attractions consecutively. The emotional impact values of the attractions are given in an array and can be both positive and negative. You need to write an efficient program to find the maximum sum of a contiguous subarray. # Input: - The first line of input contains an integer n (1 ≤ n ≤ 10^5) representing the number of attractions. - The second line contains n space-separated integers where the i-th integer represents the emotional impact value of the i-th attraction (-10^4 ≤ value ≤ 10^4). # Output: - Output a single integer which is the maximum possible emotional impact. # Example: Input: 6 -2 1 -3 4 -1 2 1 -5 4 Output: 6 # Explanation: From the given example, the maximum sum of a contiguous subarray is 4 + (-1) + 2 + 1 = 6. **Note:** Implement your solution using an efficient algorithm, such as Kadane\'s algorithm, to keep the time complexity within O(n).","solution":"def max_emotional_impact(n, values): This function uses Kadane\'s algorithm to find the maximum sum of a contiguous subarray from the provided array of emotion values. :param n: int, number of attractions :param values: list of int, emotional impact values of the attractions :return: int, the maximum possible emotional impact max_current = max_global = values[0] for i in range(1, n): max_current = max(values[i], max_current + values[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Santorini is a two-player game where players place domes on towers in a grid. Each player alternates turns, and on each turn, they can either place a single dome or move a dome from one tower to an adjacent empty spot. The game ends when a player places a dome on the third level of a tower, or if no more moves are possible. Given the current state of the grid and a player\'s next move, determine whether that move is valid and if it results in a win for the player. The grid is represented as a 5x5 matrix where each cell has a value from 0 to 3 indicating the height of the tower. The moves are represented by a series of commands indicating either a placement (\\"P x y\\") or a move (\\"M x1 y1 x2 y2\\"). Rules: 1. A player can place a dome on any tower provided it does not exceed the height of 3. 2. A player can move a dome from one tower to an adjacent tower if that tower is currently empty. 3. Adjacency includes horizontal, vertical, and diagonal cells. Input: - The first line contains 5x5 integers, representing the grid. - The second line contains an integer indicating the number of moves. - Each of the next lines contains a move command as described above. Output: - \\"Invalid Move\\" if the move is invalid. - \\"Player Wins\\" if the player\'s move completes a tower of height 3. - \\"Continue Game\\" otherwise. Example Input: ``` 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 P 2 2 M 2 2 2 3 ``` Example Output: ``` Continue Game Invalid Move ``` Note: - Assume that the first player makes the first move and players alternate correctly. - Moves that win the game or are invalid end the game, and no further moves are processed.","solution":"def santorini(grid, moves): n = 5 for move in moves: parts = move.split() action = parts[0] if action == \'P\': x, y = int(parts[1]), int(parts[2]) if grid[x][y] < 3: grid[x][y] += 1 if grid[x][y] == 3: return \\"Player Wins\\" else: return \\"Invalid Move\\" elif action == \'M\': x1, y1 = int(parts[1]), int(parts[2]) x2, y2 = int(parts[3]), int(parts[4]) if grid[x1][y1] > 0 and grid[x2][y2] == 0: if abs(x1 - x2) <= 1 and abs(y1 - y2) <= 1: grid[x2][y2] = grid[x1][y1] grid[x1][y1] = 0 else: return \\"Invalid Move\\" else: return \\"Invalid Move\\" continue return \\"Continue Game\\""},{"question":"You are given an array of integers representing the heights of buildings along a street. A person standing on the roof of a building can see the next building to the right if that building is taller than all buildings between them. Write an algorithm that determines the total number of buildings from which a person can see at least one other building. The first line contains a single integer n (1 ≤ n ≤ 5·10^5), the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^5) representing the heights of the buildings. Output a single integer — the number of buildings from which someone can see at least one taller building to the right.","solution":"def count_buildings_with_view(n, heights): if n <= 1: return 0 max_height_from_right = 0 count = 0 for i in range(n - 1, -1, -1): if heights[i] < max_height_from_right: count += 1 max_height_from_right = max(max_height_from_right, heights[i]) return count"},{"question":"You are given an array of n integers, which can be positive or negative. Your task is to find the maximum sum of any non-empty contiguous subarray. A contiguous subarray is a subarray in which the elements are consecutive in the original array. For example, given the array `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the maximum sum of a contiguous subarray is `6` because the subarray `[4, -1, 2, 1]` has the largest sum. The first line contains a single integer n (1 ≤ n ≤ 3*10^4) — the size of the array. The second line contains n integers, where each integer ai (|ai| ≤ 10^4) is the i-th element of the array. Output one integer — the maximum sum of a contiguous subarray. Example: Input: 9 -2 1 -3 4 -1 2 1 -5 4 Output: 6 Provide a function signature for the programming language of your choice, for instance, in Python: ```python def max_subarray_sum(n: int, arr: List[int]) -> int: ```","solution":"from typing import List def max_subarray_sum(n: int, arr: List[int]) -> int: Finds the maximum sum of any non-empty contiguous subarray. Parameters: n (int): The size of the array arr (List[int]): The array of integers Returns: int: The maximum sum of the contiguous subarray max_sum = arr[0] current_sum = arr[0] for i in range(1, n): current_sum = max(arr[i], current_sum + arr[i]) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Jack Sparrow, a notorious pirate, has found an ancient treasure map. The map depicts a sequence of islands connected by bridges. Each island has a certain number of gold coins buried on it. Jack wants to collect the maximum amount of gold coins possible without visiting any island more than once. The treasure map is represented as a graph, where each island is a node and each bridge is an edge. You are given the number of gold coins on each island, and the connections between the islands. Help Jack find the maximum amount of gold coins he can collect by starting on any island and travelling through the bridges to other islands, collecting gold from each island he visits. The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the number of islands. The second line contains n integers ci (1 ≤ ci ≤ 10,000), where ci is the number of gold coins on the i-th island. The next n-1 lines contain pairs of integers u and v (1 ≤ u, v ≤ n) indicating that there is a bridge between islands u and v. Output a single integer — the maximum amount of gold that Jack can collect. Example: Input: 5 10 20 30 40 50 1 2 1 3 3 4 4 5 Output: 120 Explanation: Start from island 1, visit island 3, then island 4, then island 5. The total gold collected will be 10 + 30 + 40 + 50 = 130.","solution":"def max_gold(n, gold_coins, bridges): from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(list) for u, v in bridges: graph[u].append(v) graph[v].append(u) def bfs(start): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True total_gold = 0 while queue: node = queue.popleft() total_gold += gold_coins[node - 1] for neighbor in graph[node]: if not visited[neighbor]: queue.append(neighbor) visited[neighbor] = True return total_gold # Loop through each island and execute BFS to get the max gold collectible max_collectable_gold = 0 for i in range(1, n + 1): max_collectable_gold = max(max_collectable_gold, bfs(i)) return max_collectable_gold # Example usage: n = 5 gold_coins = [10, 20, 30, 40, 50] bridges = [(1, 2), (1, 3), (3, 4), (4, 5)] print(max_gold(n, gold_coins, bridges))"},{"question":"You are working on a software that processes signals from various sensors placed on a 2D grid. Each sensor emits a circular signal with a given radius. Sometimes, the signals from different sensors overlap, causing interference. You need to find the maximum number of sensors whose signals overlap at any point on the grid. Given the coordinates and radii of the sensors, determine the maximum number of overlapping signals at any one point on the grid. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) – the number of sensors. The next n lines contain three integers each: xi, yi, ri (|xi|, |yi| ≤ 10,000, 1 ≤ ri ≤ 10,000) – the coordinates of the sensor and the radius of its signal. Print a single integer – the maximum number of overlapping signals at any point on the grid. # Example: Input: ``` 3 0 0 5 2 2 3 -1 -1 2 ``` Output: ``` 3 ``` In the given example, the signals from all three sensors overlap at the point (1, 1), so the maximum number of overlapping signals is 3.","solution":"import math def distance(x1, y1, x2, y2): return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) def maximal_overlapping_signals(sensors): events = [] for xi, yi, ri in sensors: events.append((xi - ri, 1)) # signal start events.append((xi + ri, -1)) # signal end events.sort() max_overlap = 0 current_overlap = 0 for _, event in events: current_overlap += event max_overlap = max(max_overlap, current_overlap) return max_overlap # Processing input format for testing def process_input(input_data): lines = input_data.strip().split(\'n\') n = int(lines[0]) sensors = [] for i in range(1, n + 1): xi, yi, ri = map(int, lines[i].split()) sensors.append((xi, yi, ri)) return sensors"},{"question":"You are given a string that contains only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', which represent opening and closing brackets of three types. Write a function that determines if the input string is a valid sequence. A valid sequence means: 1. Every opening bracket has a corresponding closing bracket of the same type. 2. The brackets must close in the correct order, meaning that an open bracket must be closed by its corresponding closing bracket in the correct order. Write a function `isValidSequence(s: str) -> bool` which takes a single string `s` as input and returns `True` if the string is a valid sequence, otherwise returns `False`. **Input:** - A single string `s` (1 ≤ len(s) ≤ 10^5). **Output:** - Return `True` if the input string is a valid sequence of brackets. - Return `False` otherwise. **Examples:** ```python assert isValidSequence(\\"()\\") == True assert isValidSequence(\\"()[]{}\\") == True assert isValidSequence(\\"(]\\") == False assert isValidSequence(\\"([)]\\") == False assert isValidSequence(\\"{[]}\\") == True ```","solution":"def isValidSequence(s: str) -> bool: Determines if the input string s is a valid sequence of brackets. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"A bakery uses a conveyor belt system to transport trays of pastries. Each tray can be described by a tuple containing a unique ID, the number of pastries on the tray, and the type of pastry. The conveyor belt is moving at a constant speed, and you are given a list of these trays in the order they appear on the belt. Your task is to determine which trays contain a certain type of pastry and need to be removed from the belt for quality control. Write a function `find_trays_to_remove(trays, pastry_type)` that takes in a list of trays and a string representing the type of pastry to remove. The function should return a list of IDs of the trays that contain the specified type of pastry. # Input - A list of tuples, `trays`, where each tuple contains: - A unique integer ID (`1 <= ID <= 100,000`) - An integer representing the number of pastries on the tray (`1 <= number_of_pastries <= 100`) - A string representing the type of pastry (`2 <= len(pastry_type) <= 20`) - A string, `pastry_type`, representing the type of pastry to be removed. # Output - A list of integers representing the IDs of the trays that contain the specified type of pastry. # Example ```python trays = [(1, 6, \\"croissant\\"), (2, 12, \\"muffin\\"), (3, 5, \\"croissant\\"), (4, 8, \\"bagel\\")] pastry_type = \\"croissant\\" print(find_trays_to_remove(trays, pastry_type)) # Output: [1, 3] ``` # Constraints - The list of trays will have at most 100,000 entries. - The pastry types are case-sensitive. # Note - The order of the tray IDs in the output list should be the same as their order in the input list.","solution":"def find_trays_to_remove(trays, pastry_type): Returns a list of IDs of trays that contain the specified type of pastry. Parameters: trays (list of tuple): List of trays where each tray is represented as (ID, number_of_pastries, pastry_type) pastry_type (str): The type of pastry to be removed Returns: list: List of IDs of trays to be removed result = [] for tray in trays: if tray[2] == pastry_type: result.append(tray[0]) return result"},{"question":"You are given a directed graph with n vertices and m edges. Each edge has a weight, and there might be multiple edges between the same pair of vertices. Your task is to determine the shortest paths from a given starting vertex s to all other vertices in the graph. If there is no path from s to a vertex, output -1 for that vertex. The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), where n is the number of vertices and m is the number of edges in the graph. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) representing a directed edge from vertex u to vertex v with weight w. The last line contains a single integer s (1 ≤ s ≤ n), the starting vertex. Print n integers, where the ith integer is the length of the shortest path from s to vertex i+1. If there is no path from s to vertex i+1, print -1 instead. The starting vertex s should have a shortest path length of 0. Example input: ``` 5 6 1 2 10 1 3 3 2 3 1 3 2 4 2 4 2 3 5 2 1 ``` Example output: ``` 0 7 3 9 5 ```","solution":"import heapq def dijkstra(n, edges, s): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) distances = [float(\'inf\')] * (n + 1) distances[s] = 0 pq = [(0, s)] while pq: current_distance, u = heapq.heappop(pq) if current_distance > distances[u]: continue for v, weight in graph[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return [0 if i == s else -1 if distances[i] == float(\'inf\') else distances[i] for i in range(1, n + 1)]"},{"question":"A store manager wants to analyze the sales data for a specific product. Each sale is recorded with the same product ID but includes a timestamp representing when the sale was made. The manager wants to calculate the maximum number of times the product was sold in any given hour. Write a program that, given a list of timestamps, determines the maximum number of sales in any hour-long window. # Input - The first line of input contains an integer n (1 le n le 10^5), the number of timestamps. - The next n lines each contain a timestamp in the format `YYYY-MM-DD HH:MM:SS`. All timestamps are in a proper chronological order. # Output - Output a single integer, the maximum number of sales in any hour-long window. # Example Input ``` 5 2023-10-01 10:00:00 2023-10-01 10:15:00 2023-10-01 10:30:00 2023-10-01 11:00:00 2023-10-01 11:15:00 ``` Output ``` 3 ``` Explanation In this example, the maximum number of sales in any hour-long window is achieved between `2023-10-01 10:00:00` and `2023-10-01 11:00:00`, with sales recorded at `10:00:00`, `10:15:00`, and `10:30:00`. Subsequently, within the window from `10:15:00` to `11:15:00`, the sales occurred at `10:15:00`, `10:30:00`, and `11:00:00`, which also leads to 3 sales within an hour span. Another valid hour-long window is from `2023-10-01 10:30:00` to `2023-10-01 11:30:00` which includes timestamps at `10:30:00`, `11:00:00`, and `11:15:00`, amounting to 3 sales, which is still the maximum. However, no hour-long span contains more than 3 sales, so the output is 3.","solution":"from datetime import datetime, timedelta def max_sales_in_hour(timestamps): Given a list of timestamps, determines the maximum number of sales in any hour-long window. datetime_format = \\"%Y-%m-%d %H:%M:%S\\" timestamp_objs = [datetime.strptime(ts, datetime_format) for ts in timestamps] max_count = 0 for i in range(len(timestamp_objs)): count = 0 end_time = timestamp_objs[i] + timedelta(hours=1) for j in range(i, len(timestamp_objs)): if timestamp_objs[j] < end_time: count += 1 else: break max_count = max(max_count, count) return max_count"},{"question":"You are given a rectangular grid of characters with `n` rows and `m` columns. Each cell of the grid contains exactly one of the following characters: \'.\', \'#\', \'S\', \'G\'. The cell with \'S\' represents the starting point, the cell with \'G\' represents the goal, cells with \'.\' are open paths, and cells with \'#\' are obstacles that cannot be walked through. From any cell, you can only move to one of its 4 immediately adjacent cells (up, down, left, right), provided the destination cell is not an obstacle and does not contain \'#\'. Write a program that finds the shortest path from the start (\'S\') to the goal (\'G\'). If there is no valid path, return -1. If a path exists, return the minimum number of steps required to reach the goal. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. - The next `n` lines each contain `m` characters which describe the grid. # Output - Print a single integer — the minimum number of steps required to reach the goal \'G\' from the start \'S\'. If no such path exists, print -1. # Example Input 5 5 S...# .#.#. .#... ....# ...G# Output 7 In the example, the shortest path from \'S\' to \'G\' involves navigating around the obstacles and takes 7 steps.","solution":"from collections import deque def shortest_path_in_grid(n, m, grid): Returns the shortest path from \'S\' to \'G\' or -1 if no such path exists. # Directions for up, down, left, right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Find positions of \'S\' and \'G\' start = None goal = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'G\': goal = (i, j) if not start or not goal: return -1 # Queue for BFS and set for visited coordinates queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() if (x, y) == goal: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' and (nx, ny) not in visited: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"You are given an integer array `nums` of size `n` (1 ≤ n ≤ 10^5) and an integer `k` (1 ≤ k ≤ n). You need to find the `k` most frequent elements in the array. The output should be an array of these `k` most frequent elements in ascending order. If multiple elements have the same frequency, you should prioritize the smaller numbers. For example, if `nums` = [1, 1, 2, 2, 3] and `k` = 2, then the output should be [1, 2] since 1 and 2 both appear twice and are the most frequent. Implement the function `List<Integer> topKFrequent(int[] nums, int k)` which accepts the integer array and the integer `k`, and returns the `k` most frequent elements as described. # Example Input: nums = [1, 1, 1, 2, 2, 3, 4, 4, 4, 4] k = 2 Output: [1, 4] Input: nums = [4, 5, 5, 6, 6, 6, 7, 7, 7, 7] k = 3 Output: [5, 6, 7]","solution":"from collections import Counter import heapq def topKFrequent(nums, k): Returns the k most frequent elements in the list nums in ascending order. # Count the frequency of each element in nums count = Counter(nums) # Create a max-heap based on frequency counts # We use (-freq, num) to convert the min-heap to max-heap behavior heap = [(-freq, num) for num, freq in count.items()] heapq.heapify(heap) # Extract the k most frequent elements most_frequent = [heapq.heappop(heap)[1] for _ in range(k)] most_frequent.sort() return most_frequent"},{"question":"There are n houses in a city, numbered from 1 to n. Some pairs of houses are connected by bidirectional roads. The city ensures that every house is accessible from any other house either directly or via other houses. Each house is also marked with its elevation level. Your task is to determine if it is possible to color the houses with two colors such that no two directly connected houses share the same color, and if so, provide such a coloring scheme. The first line contains a single integer n (2 ≤ n ≤ 1000) – the number of houses in the city. The second line contains the list of n integers representing the elevation levels of the houses. Each elevation level is a positive integer. The third line contains a single integer m (1 ≤ m ≤ 10^4) – the number of roads connecting the houses. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n) — indicating a bidirectional road between house u and house v. If it’s possible to color the houses with two colors as per the condition, print \\"YES\\" on the first line. On the second line, print a string consisting of n characters where the i-th character represents the color of the i-th house (\'1\' for the first color and \'2\' for the second color). If there\'s no such coloring scheme possible, print \\"NO\\". # Examples: **Input:** 5 10 20 30 40 50 4 1 2 2 3 3 4 4 5 **Output:** YES 12121 **Input:** 3 15 25 35 3 1 2 2 3 1 3 **Output:** NO","solution":"def is_bipartite(n, elevations, m, roads): from collections import deque # Adjacency list representation of the graph adj_list = [[] for _ in range(n + 1)] for u, v in roads: adj_list[u].append(v) adj_list[v].append(u) # Color array to store colors assigned to all vertices color = [-1] * (n + 1) # A utility function to do BFS starting from source and updat color array def bfs(src): queue = deque([src]) color[src] = 1 # Assign first color to source while queue: node = queue.popleft() for neighbor in adj_list[node]: if color[neighbor] == -1: # If the neighbor has not been colored, color it with alternate color color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: # If the neighbor has the same color, graph is not bipartite return False return True # Check each connected component for i in range(1, n + 1): if color[i] == -1: # If not colored if not bfs(i): return \\"NO\\" # If the graph is bipartite then create the response return \\"YES\\", \'\'.join(\'1\' if color[i] == 1 else \'2\' for i in range(1, n + 1))"},{"question":"You are given a collection of n words. A pair of words (a, b) is considered symmetric if a is the same as the reverse of b. Your task is to determine the total number of symmetric pairs in the collection. The first line contains an integer n (2 ≤ n ≤ 5000), the number of words in the collection. The following n lines each contain a single word, consisting only of lowercase alphabetical characters. The length of every word is between 1 and 100 inclusive. Output a single integer, the total number of symmetric pairs in the collection. For example, let\'s consider an input where n = 5, and the words are: ``` deified redivider civic level rotor ``` In this example, since \\"deified\\" is symmetric with itself, \\"redivider\\" is symmetric with itself, \\"civic\\" is symmetric with itself, \\"level\\" is symmetric with itself, and \\"rotor\\" is symmetric with itself, the total number of symmetric pairs is 5. In another example with input where n = 4, and the words are: ``` hello olleh world dlrow ``` In this case, \\"hello\\" is symmetric with \\"olleh\\", and \\"world\\" is symmetric with \\"dlrow\\", the total number of symmetric pairs is 2.","solution":"def count_symmetric_pairs(words): Returns the total number of symmetric pairs in the given list of words. word_set = set(words) count = 0 visited = set() for word in words: reversed_word = word[::-1] if reversed_word in word_set and reversed_word not in visited: count += 1 visited.add(word) return count"},{"question":"You are given a grid of size n times m where each cell contains an integer representing the height of that cell. You start from the top-left cell of the grid and can move to the adjacent cell either to the right or down. Your task is to find the maximum possible height difference you can achieve in a single move along the entire path from the top-left cell to the bottom-right cell. The first line contains two integers n and m (1 le n, m le 100) — the dimensions of the grid. Each of the next n lines contains m integers — the heights of the grid cells. Print a single integer — the maximum possible height difference along the path from the top-left to the bottom-right of the grid. In the first example, the path with the maximum height difference is as follows: From (1, 1) -> (1, 2) -> (2, 2) with height differences 0, 2 respectively. The maximum height difference encountered is 2. In the second example, the path with the maximum height difference is as follows: From (1, 1) -> (2, 1) -> (2, 2) with height differences 999, 1000 respectively. The maximum height difference encountered is 1000.","solution":"def max_height_difference(grid): n = len(grid) m = len(grid[0]) # Create a dp array to track the minimum and maximum height encoutered up to each cell dp_min = [[float(\'inf\')] * m for _ in range(n)] dp_max = [[float(\'-inf\')] * m for _ in range(n)] # Initialize starting point dp_min[0][0] = grid[0][0] dp_max[0][0] = grid[0][0] for i in range(n): for j in range(m): if i > 0: # Move down dp_min[i][j] = min(dp_min[i][j], dp_min[i-1][j], grid[i][j]) dp_max[i][j] = max(dp_max[i][j], dp_max[i-1][j], grid[i][j]) if j > 0: # Move right dp_min[i][j] = min(dp_min[i][j], dp_min[i][j-1], grid[i][j]) dp_max[i][j] = max(dp_max[i][j], dp_max[i][j-1], grid[i][j]) # Maximum height difference encountered to reach the bottom-right cell max_diff = dp_max[n-1][m-1] - dp_min[n-1][m-1] return max_diff"},{"question":"Manao is planning to build a new warehouse. The warehouse has a fixed grid structure of size m x n where each cell in the grid represents a potential location to either place worker units or leave empty. Each worker unit in the warehouse can help in the processing of goods, and better efficiency can be achieved by placing worker units strategically. However, Manao wants to ensure that no two worker units are placed in cells that are directly adjacent to each other, either horizontally or vertically. The goal is to determine the maximum number of worker units that can be placed in the warehouse grid without violating this adjacent placement rule. The first line contains two integers m and n, separated by a single space, where 1 ≤ m, n ≤ 1000. The following m lines contain n characters each, where each character is either a \'.\' representing an empty cell or a \'#\' representing a cell that is already occupied by an obstruction and cannot be used to place a worker unit. Output a single integer: the maximum number of worker units that can be placed in the warehouse under the given constraints. # Example Input: ``` 3 3 ... .#. ... ``` Output: ``` 4 ``` Explanation: In the given grid, the optimal placement of worker units would be: ``` W.W .#. .W. ``` where \'W\' represents a worker unit. This results in 4 worker units placed without any two of them being adjacent.","solution":"def max_worker_units(m, n, grid): Returns the maximum number of worker units that can be placed in the warehouse grid without adjacent placements. max_units = 0 for i in range(m): for j in range(n): if (i % 2 == 0 and j % 2 == 0) or (i % 2 == 1 and j % 2 == 1): if grid[i][j] == \'.\': max_units += 1 return max_units def get_grid_input(m, n, rows): Helper function to convert row list input into grid. return [list(row) for row in rows]"},{"question":"A group of friends is playing a game where they take turns adding a number to a running total. The game starts with a number `n` and each friend must add a number between 1 and `d` inclusive to the running total during their turn. The objective is to reach exactly `m`. If a friend cannot reach exactly `m` on their turn, they lose. You need to determine if it\'s possible for the group to reach exactly `m` starting from `n` by continuously adding any number between 1 and `d` in each turn. Both `n` and `m` are non-negative integers, and `1 <= d <= 10`. Given the values of `n`, `m`, and `d`, determine if it\'s possible to reach exactly `m`. The first input line contains three integers `n`, `m`, and `d` (0 ≤ n < m ≤ 10^6, 1 ≤ d ≤ 10). Print \\"YES\\" if it\'s possible to reach exactly `m` starting from `n`. Otherwise, print \\"NO\\".","solution":"def can_reach_exactly_m(n, m, d): Determine if it\'s possible to reach exactly m starting from n by adding any number between 1 and d (inclusive) in each turn. Parameters: n (int): Starting number m (int): Target number d (int): Maximum number to add per turn (1 <= d <= 10) Returns: str: \\"YES\\" if exactly m can be reached, \\"NO\\" otherwise # If the difference between m and n is divisible by d, it is possible to reach exactly m if (m - n) % d == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string that consists of lowercase English letters. Your task is to determine the number of distinct substrings of the given string. For example, if the string is \\"abc\\", all possible substrings are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Therefore, the number of distinct substrings is 6. Another example is the string \\"aaa\\", all possible substrings are \\"a\\", \\"aa\\", and \\"aaa\\". Therefore, the number of distinct substrings is 3. Function Signature: ```python def count_distinct_substrings(s: str) -> int: pass ``` **Input:** - A single string `s` (1 <= len(s) <= 1000) **Output:** - An integer representing the number of distinct substrings. **Example:** _Input:_ ``` \\"abc\\" ``` _Output:_ ``` 6 ``` _Input:_ ``` \\"aaa\\" ``` _Output:_ ``` 3 ``` **Note:** The substrings of a string are obtained by deleting zero or more characters from the beginning and zero or more characters from the end. The distinct substrings of a string are the unique substrings that can be formed from it.","solution":"def count_distinct_substrings(s: str) -> int: Given a string, this function returns the number of distinct substrings of the string. substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"Simon has found a string consisting of lowercase alphabets, and he is fascinated with palindrome substrings. A palindrome is a string that reads the same forwards and backwards. Simon wants to calculate how many unique palindrome substrings are present in the given string. The first line contains a single string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. Print a single integer — the number of unique palindrome substrings in the string. **Example:** Input: ``` ababa ``` Output: ``` 5 ``` In this example, the unique palindrome substrings are \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", and \\"ababa\\". Input: ``` abc ``` Output: ``` 3 ``` In this example, the unique palindrome substrings are \\"a\\", \\"b\\", and \\"c\\".","solution":"def count_unique_palindrome_substrings(s): Returns the number of unique palindrome substrings in \'s\'. unique_palindromes = set() def is_palindrome(substring): return substring == substring[::-1] for i in range(len(s)): for j in range(i, len(s)): substring = s[i:j+1] if is_palindrome(substring): unique_palindromes.add(substring) return len(unique_palindromes)"},{"question":"You are given a string s and an integer k. Your task is to find the length of the longest substring of s that contains at most k distinct characters. The first line contains the string s (1 le text{length of } s le 10000) and the integer k (1 le k le 26) separated by space. Print the length of the longest substring that satisfies the condition.","solution":"def longest_substring_with_k_distinct(s: str, k: int) -> int: from collections import defaultdict window_start, max_length = 0, 0 char_frequency = defaultdict(int) for window_end in range(len(s)): char_frequency[s[window_end]] += 1 while len(char_frequency) > k: char_frequency[s[window_start]] -= 1 if char_frequency[s[window_start]] == 0: del char_frequency[s[window_start]] window_start += 1 max_length = max(max_length, window_end - window_start + 1) return max_length"},{"question":"Master Leonidas is a historian tasked with preserving ancient manuscripts, each written on scrolls of different lengths. The lengths of these scrolls are given in an array, and the total number of the scrolls is n. Each scroll is so fragile that if you try to move more than k of them together at a time, they will crumble to dust. Therefore, you can only select at most k contiguous scrolls at any one time for preservation, and all selections must be contiguous segments of the array. Master Leonidas needs to ensure that the total length of the selected scrolls for preservation is maximized. Your task is to determine the maximum possible combined length of any contiguous segment of k or fewer scrolls. The first line of the input contains two integers, n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ n), representing the number of scrolls and the maximum number of scrolls that can be handled together in a single operation. The second line contains n integers representing the lengths of the scrolls. Output a single integer, the maximum possible combined length of a contiguous segment of k or fewer scrolls. Example: Input: 7 3 5 1 8 3 9 4 3 Output: 20","solution":"def max_scroll_length(n, k, scroll_lengths): Returns the maximum possible combined length of any contiguous segment of k or fewer scrolls. :param n: Number of scrolls :param k: Maximum number of scrolls that can be moved together :param scroll_lengths: List of lengths of the scrolls :return: Maximum combined length of any contiguous segment of k or fewer scrolls max_length = 0 for i in range(n): current_length = 0 for j in range(i, min(i + k, n)): current_length += scroll_lengths[j] max_length = max(max_length, current_length) return max_length # Example Usage: # n = 7 # k = 3 # scroll_lengths = [5, 1, 8, 3, 9, 4, 3] # print(max_scroll_length(n, k, scroll_lengths)) # Output: 20"},{"question":"Ivan likes to play with sequences of numbers. He recently came up with the following game: Given a sequence of n integers, he wants to make all the elements of the sequence equal. He can perform the following operation any number of times: choose any two distinct indices i and j (1 ≤ i, j ≤ n) and set both the elements at these indices to any integer value k. Ivan wants to know the minimum number of operations required to make the sequence constant (i.e., all elements equal). Can you help him with this? The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the sequence. Output a single integer, the minimum number of operations required to make all elements in the sequence equal. Example input: 4 1 2 2 3 Example output: 3 Explanation: One possible sequence of operations: 1. Choose indices 1 and 2, and set both to 2 (sequence becomes 2, 2, 2, 3). 2. Choose indices 2 and 4, and set both to 3 (sequence becomes 2, 3, 2, 3). 3. Choose indices 1 and 3, and set both to 3 (sequence becomes 3, 3, 3, 3). Thus, we need a minimum of 3 operations to make all elements equal.","solution":"def min_operations_to_make_equal(n, sequence): Determines the minimum number of operations required to make all elements of the sequence equal. Args: n : int : the length of the sequence sequence : list of int : the elements of the sequence Returns: int : the minimum number of operations required to make all elements equal if n == 1: return 0 frequency = {} for num in sequence: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 max_freq = max(frequency.values()) return n - max_freq"},{"question":"You are given an array of n integers representing the scores of n participants in a competition. A winner is defined as a participant who has a score greater than the scores of all participants to their left. Determine the number of winners in the given array. # Input - The first line of input contains an integer n (1 leq n leq 10^5), the number of participants. - The second line contains n integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^9) representing the scores of the participants. # Output - Print a single integer denoting the number of winners in the given array. # Example **Input:** ``` 6 3 4 1 5 2 7 ``` **Output:** ``` 4 ``` **Explanation:** - The winners are the participants with scores: 3, 4, 5, and 7 (all higher than the scores of those to their left). # Note In the provided example, participant 1 (score 3) is a winner since no participants are to their left. Participant 2 (score 4) is also a winner because 4 > 3. Participant 4 (score 5) is a winner because 5 > 4, 1, and 3. Finally, participant 6 (score 7) is a winner because 7 > 2, 5, 1, 4, and 3. Participant 3 (score 1) and participant 5 (score 2) are not winners because there exist participants to their left with scores higher than theirs. In the case where all scores are the same, the first participant is the only winner.","solution":"def count_winners(scores): This function returns the number of winners in the given scores array. max_score = -1 winners_count = 0 for score in scores: if score > max_score: winners_count += 1 max_score = score return winners_count"},{"question":"Farmer Bob has a vast orchard filled with many different fruit trees. Each type of tree produces fruit at a different rate, and Farmer Bob likes to optimize his daily fruit collection. He keeps track of his fruit collection schedule and wants to know the total number of fruits he will have collected by the end of each week. Farmer Bob\'s orchard has `m` types of trees, each of which produces a certain number of fruits per day. Farmer Bob maintains a schedule of collection events where on each event day he collects all the fruits from a certain type of tree. Let the days be indexed starting from 1. Bob wants to determine the total number of fruits each tree will have produced by any given day `d` and how many he will effectively collect by each event day. Given the number of different types of trees, their daily fruit production rates, the number of collection events, and their corresponding days, help Farmer Bob calculate the number of fruits collected by the end of each week. The first line contains an integer `m` (1 ≤ m ≤ 100) — the number of different types of trees. The second line contains `m` integers, where each integer denotes the daily fruit production rate of each type of tree. The third line contains an integer `e` (1 ≤ e ≤ 1000) — the number of collection events. The following `e` lines each contain two integers `ti` and `di` (1 ≤ ti ≤ m, 1 ≤ di ≤ 10^6), which represent the type of tree and the day on which a collection event occurs, respectively. For each collection event, output the number of fruits collected from that tree type by the given day. Example: Input: ``` 3 2 5 3 4 1 7 2 10 3 14 2 20 ``` Output: ``` 14 50 42 100 ``` Explanation: - Farmer Bob has 3 types of trees with daily production rates of 2, 5, and 3 fruits respectively. - For the collection events: - Type 1 tree on day 7 produces 2 fruits/day, so by day 7, he collects 2 * 7 = 14 fruits. - Type 2 tree on day 10 produces 5 fruits/day, so by day 10, he collects 5 * 10 = 50 fruits. - Type 3 tree on day 14 produces 3 fruits/day, so by day 14, he collects 3 * 14 = 42 fruits. - Type 2 tree on day 20 produces 5 fruits/day, so by day 20, he collects 5 * 20 = 100 fruits.","solution":"def fruits_collected(m, production_rates, e, events): Calculates the number of fruits collected from different types of tree at different event days. Parameters: m (int): Number of different types of trees. production_rates (list of int): Daily production rates of each type of tree. e (int): Number of collection events. events (list of (int, int)): Each tuple contains type of tree and the day of the collection event. Returns: list of int: Number of fruits collected for each event. collected_fruits = [] for ti, di in events: collected_fruits.append(production_rates[ti - 1] * di) return collected_fruits"},{"question":"You are given an array of integers that describes a sequence of daily stock prices. You need to determine the maximum profit you can achieve by making at most two transactions. A transaction consists of buying and then selling a stock. Note: You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy it again). However, you may complete at most two transactions. Write a function `maxProfit(prices: List[int]) -> int` that takes as input an array of integers `prices`, where `prices[i]` is the price of a given stock on the i-th day, and returns an integer representing the maximum profit. # Input - An array of integers `prices` where `1 <= len(prices) <= 10^5` and `0 <= prices[i] <= 10^5`. # Output - An integer representing the maximum profit you can achieve by making at most two transactions. # Example ```python assert maxProfit([3,3,5,0,0,3,1,4]) == 6 assert maxProfit([1,2,3,4,5]) == 4 assert maxProfit([7,6,4,3,1]) == 0 assert maxProfit([1]) == 0 ``` # Explanation - In the first example, you can buy on day 2 (price = 3) and sell on day 4 (price = 5), then buy on day 5 (price = 0) and sell on day 7 (price = 4). The total profit is (5-3) + (4-0) = 6. - In the second example, you can buy on day 1 (price = 1) and sell on day 5 (price = 5), achieving a profit of 4. - In the third example, no transaction is done, thus the max profit is 0. - In the fourth example, the one-day price does not allow for any transactions, resulting in a profit of 0.","solution":"from typing import List def maxProfit(prices: List[int]) -> int: if not prices: return 0 n = len(prices) left_profits = [0] * n right_profits = [0] * n # Calculate max profit for one transaction in the left half min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) left_profits[i] = max(left_profits[i-1], prices[i] - min_price) # Calculate max profit for one transaction in the right half max_price = prices[n-1] for i in range(n-2, -1, -1): max_price = max(max_price, prices[i]) right_profits[i] = max(right_profits[i+1], max_price - prices[i]) # Calculate the maximum sum of profits from both halves max_profit = 0 for i in range(n): max_profit = max(max_profit, left_profits[i] + right_profits[i]) return max_profit"},{"question":"Given a sequence of n integers, determine if there exists a subsequence of length k that is strictly increasing, and return the subsequence if it exists. # Input - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100), where n is the length of the sequence and k is the desired length of the increasing subsequence. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) which represent the sequence. # Output - If there exists a subsequence of length k that is strictly increasing, print \\"Possible\\" on the first line and the k integers of the subsequence on the second line. - If no such subsequence exists, print \\"Impossible\\". # Examples Example 1 **Input:** ``` 5 3 1 2 3 4 5 ``` **Output:** ``` Possible 1 2 3 ``` Example 2 **Input:** ``` 5 4 5 4 3 2 1 ``` **Output:** ``` Impossible ``` Example 3 **Input:** ``` 6 2 8 10 2 5 1 3 ``` **Output:** ``` Possible 8 10 ```","solution":"def find_increasing_subsequence(n, k, seq): Returns whether there exists a subsequence of length k that is strictly increasing, and the subsequence if it exists. def backtrack(start, path): # If a valid subsequence is found, return it if len(path) == k: subsequence.append(path[:]) return for i in range(start, n): if not path or seq[i] > path[-1]: path.append(seq[i]) backtrack(i + 1, path) path.pop() subsequence = [] backtrack(0, []) if subsequence: return \\"Possible\\", subsequence[0] else: return \\"Impossible\\", [] # Helper function to convert input to required format def process_input(input_str): input_lines = input_str.strip().split(\\"n\\") n, k = map(int, input_lines[0].split()) seq = list(map(int, input_lines[1].split())) return n, k, seq # Helper function to convert output to required format def process_output(output): result = output[0] if result == \\"Impossible\\": return result else: subsequence = \\" \\".join(map(str, output[1])) return f\\"Possiblen{subsequence}\\""},{"question":"Chirag has been given a task by his teacher to arrange n books in increasing order of their heights. Each book has a distinct height given in the array h. Since Chirag likes to use his creativity, he decided to make the task a bit more interesting. Instead of simply sorting the books in one go, he will only swap the adjacent books. He can only swap two adjacent books if the book on the left has greater height than the one on the right. Given this constraint, calculate the minimum number of swaps Chirag needs to perform in order to arrange all the books in increasing order of their heights. For example, if n = 5 and h = [5, 2, 4, 1, 3], then Chirag could make the following swaps: 1. Swap book at index 0 with book at index 1: [2, 5, 4, 1, 3] 2. Swap book at index 1 with book at index 2: [2, 4, 5, 1, 3] 3. Swap book at index 2 with book at index 3: [2, 4, 1, 5, 3] 4. Swap book at index 2 with book at index 3: [2, 4, 1, 3, 5] 5. Swap book at index 1 with book at index 2: [2, 1, 4, 3, 5] 6. Swap book at index 0 with book at index 1: [1, 2, 4, 3, 5] 7. Swap book at index 2 with book at index 3: [1, 2, 3, 4, 5] Overall, it took him 7 swaps to arrange the books in increasing order of their heights. The first line contains an integer t (1 le t le 100) – the number of test cases. The first line of each test case contains one integer n (2 le n le 100) – the number of books. The second line contains n distinct integers h_1, h_2, ldots, h_n (1 le h_i le n) – the heights of the books. For each test case, output the minimum number of swaps required to arrange the books in increasing order of their heights.","solution":"def bubble_sort_swaps(n, h): Returns the minimum number of swaps required to sort the list h using bubble sort. swaps = 0 for i in range(n): for j in range(n - 1 - i): if h[j] > h[j + 1]: h[j], h[j + 1] = h[j + 1], h[j] swaps += 1 return swaps def minimum_swaps(test_cases): results = [] for n, h in test_cases: results.append(bubble_sort_swaps(n, h)) return results"},{"question":"You are given an n times m binary grid consisting of 0\'s and 1\'s. You can perform the following operation any number of times: - Choose any cell in the grid and flip it (change a 0 to a 1 or a 1 to a 0). Your goal is to transform the grid into one where no two adjacent cells (sharing an edge) contain the same value, i.e., you want to make the grid a checkerboard pattern. Determine the minimum number of flips required to achieve a checkerboard grid. If it is impossible to create a checkerboard pattern with the given grid, return -1. The first line contains two integers n and m (1 le n, m leq 100) — the dimensions of the grid. Each of the next n lines contains a binary string of length m, representing the grid. Print a single integer — the minimum number of flips required to achieve a checkerboard pattern, or -1 if it\'s not possible. # Example **Input:** ``` 3 3 010 101 010 ``` **Output:** ``` 0 ``` **Input:** ``` 2 2 11 11 ``` **Output:** ``` 2 ```","solution":"def min_flips_to_checkerboard(n, m, grid): Returns the minimum number of flips required to turn the grid into a checkerboard pattern. If it\'s not possible, return -1. from itertools import product def calculate_flips(grid, target_grid): flips = 0 for i in range(n): for j in range(m): if grid[i][j] != target_grid[i][j]: flips += 1 return flips # Generate both possible checkerboard patterns checkerboard1 = [[(i + j) % 2 for j in range(m)] for i in range(n)] checkerboard2 = [[(i + j + 1) % 2 for j in range(m)] for i in range(n)] # Convert grid to integers to ease comparisons int_grid = [[int(c) for c in row] for row in grid] # Calculate flips needed for both patterns flips1 = calculate_flips(int_grid, checkerboard1) flips2 = calculate_flips(int_grid, checkerboard2) return min(flips1, flips2) # Sample usage n = 3 m = 3 grid = [\\"010\\", \\"101\\", \\"010\\"] print(min_flips_to_checkerboard(n, m, grid)) # Output: 0"},{"question":"David loves playing word games. His favorite game challenges him to form the longest possible word from a given string by using each character at most once. To make this game more interesting, David has implemented a scoring system where each letter is assigned a specific point value based on its position in the English alphabet (\'a\' = 1, \'b\' = 2, ..., \'z\' = 26). Given a string of lowercase Latin letters, David wants to know the highest possible score he can achieve by forming a single word from the characters of the given string. Write a program to determine the maximum score. # Input - The first line contains a single integer t (1 le t le 100) — the number of test cases. - Each of the next t lines contains a string s ((1 le |s| le 100)) of lowercase Latin letters. # Output For each test case, output a single line containing one integer — the maximum score for the given string. # Example **Input:** ``` 3 abc zzz azb ``` **Output:** ``` 6 78 28 ``` # Explanation 1. For string \\"abc\\", the maximum score is achieved by using all letters to form the word \'abc\' (1 + 2 + 3 = 6). 2. For string \\"zzz\\", the maximum score is achieved by using all letters to form the word \'zzz\' (26 + 26 + 26 = 78). 3. For string \\"azb\\", the maximum score is achieved by using all letters to form the word \'azb\' (1 + 26 + 2 = 29).","solution":"def calculate_score(s: str) -> int: Calculate the maximum possible score for the given string s. score = 0 for char in s: score += ord(char) - ord(\'a\') + 1 return score def highest_scores(test_cases: list) -> list: Calculate the highest possible scores for each test case. results = [] for s in test_cases: results.append(calculate_score(s)) return results"},{"question":"A group of friends is playing a game with an array a, consisting of integers. On a player\'s turn, they can choose any two adjacent elements in the array and replace both of them with their sum. For example, if the array is [1, 2, 3, 4], there are several possible moves: - Replace [1, 2] with [3], the new array becomes [3, 3, 4]. - Replace [2, 3] with [5], the new array becomes [1, 5, 4]. - Replace [3, 4] with [7], the new array becomes [1, 2, 7]. The game continues until the array contains only a single element. The player who cannot make a move loses. Your task is to determine which player will win if both play optimally. The only line contains the integer array a, consisting of integers a_i (1 leq |a| leq 100,000, 1 leq a_i leq 10^9). If the first player wins, print \\"First\\". If the second player wins, print \\"Second\\".","solution":"def determine_winner(a): Determines the winner of the game based on the given array. :param a: List[int] - List of integers in the array. :return: str - \\"First\\" if the first player wins, \\"Second\\" if the second player wins. # Check the parity of the length of the array if len(a) % 2 == 0: return \\"First\\" else: return \\"Second\\""},{"question":"Alex is decorating a Christmas tree with n levels. Each level consists of several parallel lines of electric lights, which Alex has arranged horizontally. The number of lights on the k-th level of the tree is exactly k, where 1 ≤ k ≤ n. Alex wants to achieve an effect where, starting from the top-most level (1st level) and moving downwards to the n-th level, you can see a continuous pattern in the colors of the lights from one level to the next. The color of each light is denoted by an integer value. Two adjacent levels i and i+1 are considered to have a continuous pattern if each light on level i has the same color as at least one light in level i+1 that is directly below it or diagonally adjacent to it. Your task is to determine whether Alex\'s arrangement of lights forms a continuous pattern from the top-most level to the bottom-most level. The first line of the input contains an integer n (1 ≤ n ≤ 50), the number of levels in the Christmas tree. Each of the next n lines contains a sequence of integers representing the colors of the lights on that particular level. Specifically, the i-th line contains exactly i space-separated integers c_ij (1 ≤ c_ij ≤ 1000), representing the colors of the lights on the i-th level. Output \\"YES\\" if the arrangement forms a continuous pattern, and \\"NO\\" otherwise. Example 1: Input: 3 1 2 3 3 4 2 Output: YES Example 2: Input: 4 1 1 2 2 3 1 2 2 2 3 Output: NO Explanation: In Example 1, the sequence of colors from the 1st level to the 3rd level follows a continuous pattern. The light on the 1st level (color 1) is directly above the light with color 2 on the 2nd level, and so on. In Example 2, the sequence of colors from the 1st level to the 4th level doesn\'t create a continuous pattern. The light on the 2nd level (color 1) does not match with any directly below or diagonally adjacent colors on the 3rd level.","solution":"def is_continuous_pattern(levels): Determines whether the arrangement of lights forms a continuous pattern from the top-most level to the bottom-most level. :param levels: A list of lists of integers, where each inner list represents the colors on that level. :return: \\"YES\\" if the arrangement forms a continuous pattern, \\"NO\\" otherwise. if len(levels) == 1: # A single level is always continuous by definition return \\"YES\\" for i in range(1, len(levels)): previous_level = levels[i - 1] current_level = levels[i] current_level_set = set(current_level) match_found = any(color in current_level_set for color in previous_level) if not match_found: return \\"NO\\" return \\"YES\\""},{"question":"Write a function to simulate a discrete event system where there are two types of events: arrivals and departures of entities. Given an initial number of entities, return the number of entities present after processing a sequence of events. Each event is represented as a tuple, where the first element is a timestamp (an integer) and the second element is a string (\'arrival\' or \'departure\'). The function should have the following signature: ```Python def process_events(initial_entities: int, events: List[Tuple[int, str]]) -> int: ``` # Input: - `initial_entities` (int): The starting number of entities. - `events` (List[Tuple[int, str]]): A list of tuples, where each tuple contains a timestamp and a string representing the type of event (\'arrival\' or \'departure\'). # Output: - (int): The total number of entities after processing all events. # Constraints: - The timestamps in events are unique. - There will be no departure event if there are no entities to depart at that timestamp. # Example: ```Python initial_entities = 5 events = [(1, \'arrival\'), (2, \'departure\'), (3, \'arrival\'), (4, \'arrival\'), (5, \'departure\')] print(process_events(initial_entities, events)) # Output: 6 ```","solution":"from typing import List, Tuple def process_events(initial_entities: int, events: List[Tuple[int, str]]) -> int: Processes a sequence of arrival and departure events and returns the number of entities present after processing the events. Parameters: initial_entities (int): The starting number of entities. events (List[Tuple[int, str]]): A list of tuples where each tuple contains a timestamp (int) and a string representing the type of event (\'arrival\' or \'departure\'). Returns: int: The total number of entities after processing all events. entities = initial_entities for timestamp, event in events: if event == \'arrival\': entities += 1 elif event == \'departure\' and entities > 0: entities -= 1 return entities"},{"question":"You are given a list of `n` students and their marks in a subject. For each student, the marks are represented by an integer array `marks` where each entry corresponds to the marks scored in a test. The school has a unique way of calculating a student\'s final score. Instead of taking an average, the final score is determined by the sum of the highest `k` marks among all tests taken by the student. If a student has taken fewer than `k` tests, their final score is the sum of all their marks. You need to write a function that takes `marks` and `k` as input and returns the final scores for all students. # Input - The first line contains two integers, `n` and `k` (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100), the number of students and the number of highest marks to consider. - The next `n` lines contain the marks of each student. Each line starts with an integer `m` (1 ≤ m ≤ 100), the number of tests the student has taken, followed by `m` integers representing the marks scored in these tests. # Output - Output `n` lines, each containing a single integer, the final score of each student. # Example Input ``` 3 2 3 10 20 30 4 40 30 20 10 2 50 60 ``` Output ``` 50 70 110 ``` Explanation For the first student, out of the marks [10, 20, 30], the top 2 marks are 20 and 30, giving a final score of 50. For the second student, out of the marks [40, 30, 20, 10], the top 2 marks are 40 and 30, giving a final score of 70. For the third student, the marks are [50, 60], and both are summed to give a final score of 110.","solution":"def final_scores(n, k, students_marks): Calculate the final scores of students based on the sum of their top k marks. Parameters: n (int): Number of students. k (int): Number of top marks to sum. students_marks (list of list of int): A list containing lists where each list represents the marks of a student. Returns: list of int: A list containing the final scores of each student. final_scores = [] for marks in students_marks: # If the student has taken fewer than k tests, their final score is the sum of all their marks if len(marks) <= k: final_scores.append(sum(marks)) else: # Sort the marks in descending order so we can sum up the highest k marks marks_sorted = sorted(marks, reverse=True) final_scores.append(sum(marks_sorted[:k])) return final_scores # Example usage: # n = 3 # k = 2 # students_marks = [ # [10, 20, 30], # [40, 30, 20, 10], # [50, 60] # ] # print(final_scores(n, k, students_marks))"},{"question":"You are given an array a of n positive integers. Your task is to determine the number of unique pairs of indices (i, j) where i < j such that the product of the elements ai and aj is even. An even number is defined as any integer that is divisible by 2. Therefore, for the product to be even, at least one of the numbers in the pair must be even. The first line of the input contains a positive integer n (2 ≤ n ≤ 100,000) — the number of elements in array a. The second line contains n positive integers ai (1 ≤ ai ≤ 1,000,000,000) — the elements of the given array. Output a single integer — the number of unique pairs (i, j) where 1 ≤ i < j ≤ n and ai * aj is even. For example, if the input array is [1, 3, 2, 4], the pairs where the product is even are (1, 3), (1, 4), (2, 3), (2, 4), and (3, 4). Hence the output would be 5. **Examples:** Input: ``` 4 1 2 3 4 ``` Output: ``` 5 ``` Input: ``` 5 1 3 5 7 9 ``` Output: ``` 0 ``` Input: ``` 3 2 4 6 ``` Output: ``` 3 ```","solution":"def count_even_product_pairs(n, array): Counts the number of unique pairs (i, j) where 1 ≤ i < j ≤ n and ai * aj is even. Args: n (int): number of elements in array. array (list): list of n positive integers. Returns: int: number of unique pairs (i, j) where the product ai * aj is even. even_count = sum(1 for x in array if x % 2 == 0) odd_count = n - even_count # Any pair with at least one even number will form an even product. total_pairs = n * (n - 1) // 2 odd_pairs = odd_count * (odd_count - 1) // 2 return total_pairs - odd_pairs # Example usage: # n = 4 # array = [1, 2, 3, 4] # result = count_even_product_pairs(n, array) # print(result) # Output: 5"},{"question":"Given a string `s`, find the length of the longest substring without repeating characters. The string `s` consists of `n` characters, where `1 ≤ n ≤ 10^5`. The string contains only ASCII characters. Your goal is to return an integer that represents the length of the longest substring without repeating characters. **Examples:** 1. Input: `s = \\"abcabcbb\\"` Output: `3` Explanation: The answer is \\"abc\\", with a length of 3. 2. Input: `s = \\"bbbbb\\"` Output: `1` Explanation: The answer is \\"b\\", with a length of 1. 3. Input: `s = \\"pwwkew\\"` Output: `3` Explanation: The answer is \\"wke\\", with a length of 3. **Constraints:** - 1 ≤ n ≤ 10^5 - The string contains only ASCII characters.","solution":"def length_of_longest_substring(s): Given a string `s`, this function finds the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_index_map = {} longest_length = 0 start = 0 for end in range(n): if s[end] in char_index_map: # Update start to be the maximum of current start or the position next to # the last occurrence of the current character. start = max(start, char_index_map[s[end]] + 1) # Update the last seen index of the character to the current position. char_index_map[s[end]] = end # Update the result if we get a larger window. longest_length = max(longest_length, end - start + 1) return longest_length"},{"question":"You are given an array `arr` of integers and an integer `d`. Your task is to find the number of distinct triplets `(i, j, k)` such that 0 ≤ i < j < k < n and `arr[i]`, `arr[j]`, `arr[k]` form a geometric progression with a common ratio `d`. For a triplet to form a geometric progression with a common ratio `d`, the following condition must hold: [ arr[j] / arr[i] = d text{ and } arr[k] / arr[j] = d ] If the common ratio `d` is zero, special consideration should be taken since dividing by zero is undefined. A valid triplet in this case is when `arr[i]`, `arr[j]`, and `arr[k]` are all 0. Input: The first line contains the integer `n` (3 ≤ n ≤ 2 times 10^5), the number of elements in the array. The second line contains the integer `d` (0 ≤ d ≤ 10^9), the common ratio. The third line contains `n` integers, the elements of the array `arr` (-10^9 ≤ arr[i] ≤ 10^9). Output: Print the single number — the number of distinct triplets `(i, j, k)` that form a geometric progression with a common ratio of `d`. Example: Input: ``` 5 2 1 2 4 8 16 ``` Output: ``` 3 ``` Explanation: The valid triplets are: - (0,1,2) -> (1,2,4) - (1,2,3) -> (2,4,8) - (2,3,4) -> (4,8,16)","solution":"def count_geometric_triplets(arr, d): Returns the number of distinct triplets (i, j, k) such that arr[i], arr[j], and arr[k] form a geometric progression with common ratio d. if d == 0: # Special case for d == 0 count_zero = arr.count(0) return count_zero * (count_zero - 1) * (count_zero - 2) // 6 count_i = {} count_k = {} triplets_count = 0 for number in arr: count_k[number] = count_k.get(number, 0) + 1 for j in range(len(arr)): number = arr[j] count_k[number] -= 1 if number % d == 0: left = number // d right = number * d triplets_count += count_i.get(left, 0) * count_k.get(right, 0) count_i[number] = count_i.get(number, 0) + 1 return triplets_count"},{"question":"A social media platform wants to ensure its users do not have offensive usernames. To achieve this, they have a list of offensive words. Given a string representing a username, and a list of strings where each string is an offensive word, write a function to check if the username contains any of the offensive words as a substring. If the username contains an offensive word, return \\"Offensive\\". Otherwise, return \\"Clean\\". The function signature should be: ```python def check_username(username: str, offensive_words: List[str]) -> str: ``` # Input - A string `username` (1 <= len(username) <= 1000) representing the username to be checked. - A list of strings `offensive_words` where each string is an offensive word in lowercase letters. The list contains between 1 and 100 offensive words, and each offensive word has a length between 1 and 100 characters. # Output Return \\"Offensive\\" if the username contains any offensive word from the list, otherwise return \\"Clean\\". # Example Example 1: ```python username = \\"safeusername123\\" offensive_words = [\\"bad\\", \\"nasty\\", \\"offensive\\"] print(check_username(username, offensive_words)) # Output: \\"Clean\\" ``` Example 2: ```python username = \\"nastyusername123\\" offensive_words = [\\"bad\\", \\"nasty\\", \\"offensive\\"] print(check_username(username, offensive_words)) # Output: \\"Offensive\\" ``` # Note - The function should be case-sensitive and check for exact matches of offensive words as substrings within the username. - You can assume that the `offensive_words` list and the `username` string only contain lowercase alphabetical characters and digits.","solution":"from typing import List def check_username(username: str, offensive_words: List[str]) -> str: Checks if the username contains any offensive words as substrings. Parameters: - username (str): The username to check. - offensive_words (List[str]): The list of offensive words. Returns: - str: \\"Offensive\\" if the username contains any offensive words, otherwise \\"Clean\\". for word in offensive_words: if word in username: return \\"Offensive\\" return \\"Clean\\""},{"question":"A company has an internal communication platform with a unique way of handling messages. Each message received can trigger multiple follow-up messages, which in turn can trigger their own follow-up messages, and so on. The system logs every message with a unique identifier and records which message triggered it, if any. You are tasked with writing a function to find the deepest level of messages triggered by an initial message. The depth of a message is defined as follows: - The initial message has a depth of 1. - A follow-up message has a depth that is one greater than the depth of the message that triggered it. Given a list of messages with their corresponding trigger relationships, your task is to determine the maximum depth of messages that can be reached starting from a given initial message. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of messages and the number of trigger relationships, respectively. - The second line contains n space-separated integers message_id1, message_id2, ..., message_idn (1 ≤ message_idi ≤ 100,000) — the unique identifiers for the messages. - The following m lines each contain two integers a and b (1 ≤ a, b ≤ 100,000) — indicating that message with id \'a\' triggered the message with id \'b\'. - The last line contains a single integer x (1 ≤ x ≤ 100,000) — the identifier of the initial message. # Output - Print a single integer — the maximum depth of messages that can be reached starting from the initial message with identifier x. # Example Input 5 4 1 2 3 4 5 1 2 1 3 3 4 3 5 1 Output 3 # Explanation - Message 1 triggers messages 2 and 3. - Message 3 further triggers messages 4 and 5. - The structure forms a tree with depths: - Level 1: Message 1 - Level 2: Messages 2, 3 - Level 3: Messages 4, 5 Hence, the maximum depth from an initial message of 1 is 3.","solution":"from collections import defaultdict, deque def max_message_depth(n, m, message_ids, relationships, x): # Create a graph where each node points to the messages it triggers graph = defaultdict(list) # Populate the graph for a, b in relationships: graph[a].append(b) # Depth-first search (DFS) for finding the maximum depth def dfs(node, depth): max_depth = depth for neighbor in graph[node]: max_depth = max(max_depth, dfs(neighbor, depth + 1)) return max_depth # Start DFS from the initial message x return dfs(x, 1)"},{"question":"You\'ve been given a grid represented by an 𝑛 × 𝑚 matrix. Each cell in the grid either contains a black dot represented by \'B\' or a white dot represented by \'W\'. Your task is to determine if there exists a path starting from the top-left cell (0, 0) to the bottom-right cell (n-1, m-1), such that the path does not pass through any black dots. You can move to the adjacent cells in four possible directions: up, down, left, and right. The first line of the input contains two integers 𝑛 and 𝑚 (1 ≤ 𝑛, 𝑚 ≤ 50) - the number of rows and columns in the grid respectively. The next 𝑛 lines contain 𝑚 characters each (\'B\' or \'W\'), representing the grid. Output \\"YES\\" if such a path exists, otherwise \\"NO\\". Input ``` 3 3 W W W B B W W W W ``` Output ``` YES ``` Input ``` 3 3 W W B B B W W W W ``` Output ``` NO ```","solution":"def exists_path(n, m, grid): Determines if there exists a path from the top-left to bottom-right cell in a grid avoiding \'B\' cells. Args: n (int): number of rows in the grid m (int): number of columns in the grid grid (list of list of str): 2D grid representing the maze Returns: str: \\"YES\\" if such a path exists, otherwise \\"NO\\" from collections import deque # directions for moving in the grid directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # helper function to check if a cell is inside grid bounds and not \'B\' def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'W\' # start BFS from the top-left cell if it\'s \'W\' if grid[0][0] != \'W\' or grid[n-1][m-1] != \'W\': return \\"NO\\" queue = deque([(0, 0)]) visited = set([(0, 0)]) while queue: x, y = queue.popleft() # check if we\'ve reached the bottom-right cell if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"# Counting Inversions An inversion in an array is a pair of elements `(a[i], a[j])` such that `i < j` and `a[i] > a[j]`. Counting the number of inversions in an array can help understand how far the array is from being sorted. You are given an integer `t` representing the number of test cases. For each test case, you are given an integer `n` representing the number of elements in the array followed by `n` integers which constitute the array. Write a program to count the number of inversions in each array. The first line of input contains an integer `t` (`1 ≤ t ≤ 100`). The next `2t` lines contain pairs of lines for each test case: The first line of each pair contains an integer `n` (`1 ≤ n ≤ 100`); the second line contains `n` integers representing the elements of the array. For each test case, output a single integer representing the number of inversions in the array. # Example **Input** ``` 2 5 2 3 8 6 1 4 4 3 2 1 ``` **Output** ``` 5 6 ``` **Explanation** * For the first test case, the array `[2, 3, 8, 6, 1]` has inversions `(2, 1)`, `(3, 1)`, `(8, 6)`, `(8, 1)`, and `(6, 1)`, totaling 5 inversions. * For the second test case, the array `[4, 3, 2, 1]` has all pairs inverted, totaling 6 inversions.","solution":"def count_inversions(arr): Counts the number of inversions in the array. An inversion is a pair (arr[i], arr[j]) such that i < j and arr[i] > arr[j]. inversions = 0 n = len(arr) for i in range(n): for j in range(i+1, n): if arr[i] > arr[j]: inversions += 1 return inversions def solve(test_cases): Given a list of test cases, return a list of inversion counts for each test case. Each test case is a tuple where: - the first element is an integer n (the size of the array) - the second element is the array itself Args: test_cases: List[Tuple[int, List[int]]] Returns: List[int]: List of inversion counts for each test case results = [] for n, arr in test_cases: results.append(count_inversions(arr)) return results"},{"question":"John is working on a project involving binary trees. A binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. John needs to calculate the maximum width of a given binary tree. The width of a binary tree is the maximum number of nodes present at any level of the tree. A level of a binary tree is defined as all nodes that are at the same depth in the tree. The depth of a node is the number of edges from the node to the tree\'s root node. The root node\'s depth is always 0. John has provided you with the structure of the binary tree in terms of a list of nodes. Each node has a unique value represented by an integer. Though the tree might not be complete or balanced, each node will at most either have both, one, or no children, and each node will be referenced only once. Your task is to write a function that calculates the maximum width of the binary tree. The function signature is as follows: ```python def max_width_of_binary_tree(root: TreeNode) -> int: ``` Here, `TreeNode` is a class representing the nodes of the binary tree, defined as follows: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` The `root` parameter is the root node of the binary tree. You need to calculate the maximum number of nodes at any level of the tree and return this value as an integer. # Example Input: ```python root = TreeNode(1) root.left = TreeNode(3) root.right = TreeNode(2) root.left.left = TreeNode(5) root.left.right = TreeNode(3) root.right.right = TreeNode(9) print(max_width_of_binary_tree(root)) ``` Output: ``` 4 ``` In this example, the binary tree has the maximum width of 4 at the third level, which contains nodes with values 5, 3, 9, and `None`. # Constraints - The number of nodes in the binary tree will be in the range `[1, 3000]`. - Each node\'s value is an integer in the range `[0, 10^5]`.","solution":"from collections import deque class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def max_width_of_binary_tree(root: TreeNode) -> int: if not root: return 0 max_width = 0 queue = deque([(root, 0)]) # Start with the root node and its index (0) while queue: level_length = len(queue) _, first_index = queue[0] # Get the index of the first node at the current level for _ in range(level_length): node, index = queue.popleft() if node.left: queue.append((node.left, 2 * index)) if node.right: queue.append((node.right, 2 * index + 1)) _, last_index = queue[-1] if queue else (None, 0) # Get the index of the last node at the current level max_width = max(max_width, last_index - first_index + 1) return max_width"},{"question":"Arya is training under the Many-Faced God and part of her training involves solving mathematical problems disguised as real-world scenarios. One day, her trainer gives her a challenge called \\"The Faceless Palindromes.\\" Arya receives a string of lowercase letters that represents names of people who have wronged her. She needs to figure out if it\'s possible to rearrange the characters of this string such that it forms a palindrome. If a palindrome can be formed, Arya needs to find the longest such palindrome and return its length. If no palindrome can be formed, she should return 0. A palindrome is a string that reads the same forward and backward, for example, \\"bob\\" or \\"racecar.\\" Help Arya determine the length of the longest palindrome that can be formed using the characters of the given string. Write a function `longest_palindrome_length(s: str) -> int` where `s` is a string containing only lowercase letters (1 ≤ |s| ≤ 10^5). # Input - A single string `s` containing lowercase letters. # Output - An integer representing the length of the longest palindromic string that can be constructed using the characters in `s`. # Example ```python print(longest_palindrome_length(\\"abccccdd\\")) # Output: 7 print(longest_palindrome_length(\\"a\\")) # Output: 1 print(longest_palindrome_length(\\"abc\\")) # Output: 1 print(longest_palindrome_length(\\"aaabbb\\")) # Output: 5 ``` # Explanation In the first example, the longest palindrome that can be formed is \\"dccaccd\\", which has a length of 7. In the second example, the letter \\"a\\" itself is a palindrome with a length of 1. In the third example, no multi-character palindromes can be formed, but any single character is a palindrome, so the answer is 1. In the fourth example, the palindromes \\"ababa\\" or \\"baaab\\" can be formed, both of which have a length of 5.","solution":"from collections import Counter def longest_palindrome_length(s: str) -> int: Determines the length of the longest palindromic string that can be constructed using the characters in s. :param s: A string containing only lowercase letters. :return: An integer representing the length of the longest palindromic string. char_counts = Counter(s) length = 0 found_odd = False for count in char_counts.values(): if count % 2 == 0: length += count else: length += count - 1 found_odd = True if found_odd: length += 1 return length"},{"question":"Ian is working on a project related to network security. He is analyzing a network of servers, where each server may have direct connections (edges) to other servers. Each server is represented as a node in a graph, and the connections between servers are represented as undirected edges. Ian wants to ensure that his network design minimizes the possibility of a single point of failure. A single point of failure occurs if there are nodes in the network whose removal results in a disconnected graph. Write a function that determines the \'cut vertices\' (or articulation points) in the network. A cut vertex is a node, which when removed, increases the number of connected components of the graph. The function should return a list of all such nodes. The input graph is given in the form of an adjacency list. The first line contains two integers, n and m, representing the number of nodes and edges respectively. The next m lines each contain two integers a and b, indicating an undirected connection between nodes a and b. **Function signature:** ```python def find_cut_vertices(n: int, edges: List[Tuple[int, int]]) -> List[int]: ``` **Input:** - The first line contains two integers n and m — the number of nodes and the number of edges. - Each of the next m lines contains two integers a and b — indicating an undirected connection between nodes a and b. **Output:** - Return a list of integers representing the cut vertices in ascending order. **Example:** ```python assert find_cut_vertices( 5, [(1, 2), (2, 3), (3, 1), (3, 4), (4, 5)] ) == [3, 4] ``` In the example, nodes 3 and 4 are cut vertices. Removing node 3 or 4 will result in a disconnected network for the remaining servers. Nodes 1, 2, and 5 are not cut vertices because their removal does not increase the number of connected components in the graph.","solution":"from typing import List, Tuple, Dict def find_cut_vertices(n: int, edges: List[Tuple[int, int]]) -> List[int]: def dfs(at, parent, visited, tin, low, graph, timer, cut_vertices): visited[at] = True tin[at] = low[at] = timer[0] # timestamp timer[0] += 1 children = 0 for to in graph[at]: if to == parent: continue if visited[to]: # update the low time of current node \'at\' low[at] = min(low[at], tin[to]) else: dfs(to, at, visited, tin, low, graph, timer, cut_vertices) low[at] = min(low[at], low[to]) if low[to] >= tin[at] and parent != -1: cut_vertices.add(at) children += 1 if parent == -1 and children > 1: cut_vertices.add(at) graph = {i: [] for i in range(1, n + 1)} for a, b in edges: graph[a].append(b) graph[b].append(a) visited = [False] * (n + 1) tin = [-1] * (n + 1) low = [-1] * (n + 1) cut_vertices = set() timer = [0] for i in range(1, n + 1): if not visited[i]: dfs(i, -1, visited, tin, low, graph, timer, cut_vertices) return sorted(list(cut_vertices))"},{"question":"You are given several segments, each defined by a pair of integers ((l_i, r_i)) representing the endpoints of the segment, where (1 le l_i le r_i le 10^9). These segments are guaranteed to be non-overlapping and sorted by their left endpoints ((l_1 < l_2 < dots < l_n)). A segment ((l_i, r_i)) is said to be \\"covered\\" by another segment ((l_j, r_j)) if (l_j le l_i) and (r_i le r_j). Consider the following operation: remove a segment ((l_i, r_i)) if it is covered by some other segment ((l_j, r_j)) in the list. Your task is to determine the maximum number of segments that can remain after repeatedly applying the above operation until no more segments can be removed. # Input - The first line contains an integer ( n ) ((1 le n le 10^5)) — the number of segments. - The next ( n ) lines each contain two integers ( l_i ) and ( r_i ) ((1 le l_i le r_i le 10^9)). # Output - Print a single integer representing the maximum number of segments that can remain. # Example **Input:** ``` 4 1 3 2 4 5 7 6 8 ``` **Output:** ``` 4 ``` **Explanation:** There are no segments that can cover another one entirely based on the given inputs, thus all 4 segments remain.","solution":"def max_non_covered_segments(n, segments): Determines the maximum number of non-covered segments :param n: Number of segments :param segments: List of segments represented as tuples (l_i, r_i) :return: Maximum number of non-covered segments # Sort the segments by the starting points, and then by the ending points segments.sort() # We initialize the current max_right to be the minimum possible, so that the first segment is always included max_right = -1 result = 0 for l, r in segments: # If the current segment is not covered by the last chosen segment, we include it if r > max_right: result += 1 max_right = r return result"},{"question":"You are given a series of transactions made in different currencies for a newly opened store. Each transaction consists of a number and a currency represented as a string. Your task is to convert all transactions into a base currency and calculate the total sum. The first line of input contains two space-separated strings: the base currency and the number of conversions q (1 ≤ q ≤ 100). The next q lines each contain a conversion rate in the format \\"currency amount\\", where \'currency\' is a string denoting the currency code (always 3 uppercase letters) and \'amount\' is a floating-point number which represents how many units of the base currency one unit of that currency is worth. The next line contains an integer t (1 ≤ t ≤ 100), the number of transactions. Each of the following t lines describe a transaction in the format \\"amount currency\\", where \'amount\' is a floating-point number representing the amount of money and \'currency\' is the corresponding 3-letter currency code. Assume all floating-point numbers are expressed with at most 6 decimal places. All currency codes are unique. Output the total sum of all transactions in the base currency rounded to 2 decimal places. # Example Input: ``` USD 3 EUR 1.18 JPY 0.0091 GBP 1.38 5 100 EUR 200 JPY 50 GBP 100 USD 150 EUR ``` Output: ``` 477.20 ``` Explanation: 100 EUR * 1.18 = 118 USD 200 JPY * 0.0091 = 1.82 USD 50 GBP * 1.38 = 69.00 USD 100 USD = 100 USD 150 EUR * 1.18 = 177.00 USD Total = 118 + 1.82 + 69 + 100 + 177 = 465.82 USD","solution":"def calculate_total_in_base_currency(base_currency, q, conversion_rates, t, transactions): # Create a dictionary for storing conversion rates to base currency conversion_dict = {base_currency: 1.0} # Populate conversion dictionary for conversion in conversion_rates: currency, rate = conversion.split() conversion_dict[currency] = float(rate) # Calculate total amount in base currency total_in_base_currency = 0.0 for transaction in transactions: amount, currency = transaction.split() amount = float(amount) total_in_base_currency += amount * conversion_dict[currency] # Round the total to 2 decimal places total_in_base_currency = round(total_in_base_currency, 2) return total_in_base_currency # Example Usage base_currency = \\"USD\\" q = 3 conversion_rates = [\\"EUR 1.18\\", \\"JPY 0.0091\\", \\"GBP 1.38\\"] t = 5 transactions = [\\"100 EUR\\", \\"200 JPY\\", \\"50 GBP\\", \\"100 USD\\", \\"150 EUR\\"] result = calculate_total_in_base_currency(base_currency, q, conversion_rates, t, transactions) print(result) # Output should be 465.82"},{"question":"You are given a string S consisting of lowercase Latin letters. You need to find the longest substring in which the frequency of every character is equal to a given number k. If there is no such substring, print -1. Input: - The first line contains a single integer k (1 ≤ k ≤ 1000) — the required frequency of each character - The second line contains the string S (1 ≤ |S| ≤ 100000) Output: - A single integer — the length of the longest valid substring where each character appears exactly k times. If there is no such substring, print -1. Example: Input: 3 aaabbccddeeeeee Output: 6 Explanation: The substring with exactly 3 occurrences of each character is \\"aaabbc\\".","solution":"def longest_substring_with_exact_frequency(k, s): from collections import defaultdict, Counter n = len(s) max_len = -1 # Sliding window approach for unique_chars in range(1, 27): # there are 26 possible characters left = 0 char_count = defaultdict(int) window_size = 0 valid_chars = 0 for right in range(n): char_count[s[right]] += 1 if char_count[s[right]] == 1: # new character added window_size += 1 if char_count[s[right]] == k: # character reached required frequency valid_chars += 1 while window_size > unique_chars: if char_count[s[left]] == k: valid_chars -= 1 char_count[s[left]] -= 1 if char_count[s[left]] == 0: window_size -= 1 left += 1 if valid_chars == unique_chars: max_len = max(max_len, right - left + 1) return max_len # Sample usage assert longest_substring_with_exact_frequency(3, \\"aaabbccddeeeeee\\") == 6"},{"question":"Given a matrix of size n x m, find the maximum sum of any rectangle submatrix within the matrix. The first line contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns of the matrix. The next n lines each contain m integers, representing the elements of the matrix (-100 ≤ matrix[i][j] ≤ 100 for all 0 ≤ i < n and 0 ≤ j < m). Output the maximum sum of any rectangle submatrix found within the given matrix.","solution":"def max_sum_submatrix(matrix): Given a matrix of size n x m, find the maximum sum of any rectangle submatrix within the matrix. if not matrix or not matrix[0]: return 0 n, m = len(matrix), len(matrix[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] current_sum = 0 current_max = float(\'-inf\') for val in temp: current_sum = max(val, current_sum + val) current_max = max(current_max, current_sum) max_sum = max(max_sum, current_max) return max_sum"},{"question":"A concert organizer wants to schedule as many concerts as possible in a single night. Each concert requires a specific amount of time, and they can\'t overlap. Given the start and end times of various concerts, can you help the organizer determine the maximum number of non-overlapping concerts that can be scheduled? Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of concerts. - The next n lines each contain two integers start and end (0 ≤ start < end ≤ 10^9), representing the start and end times of each concert. Output: - A single integer, the maximum number of non-overlapping concerts that can be scheduled. Example: Input: 5 1 3 2 5 3 9 6 8 8 10 Output: 3 Explanation: The optimal selection of non-overlapping concerts is the concerts with times (1,3), (6,8), and (8,10). This allows scheduling the maximum number of concerts, which is 3.","solution":"def max_non_overlapping_concerts(n, concerts): Returns the maximum number of non-overlapping concerts that can be scheduled. Parameters: n (int): Number of concerts. concerts (List[Tuple[int, int]]): List of (start, end) tuples for each concert. Returns: int: The maximum number of non-overlapping concerts. # Sort concerts based on their end times concerts.sort(key=lambda x: x[1]) # Initialize variables max_concerts = 0 last_end_time = 0 # Iterate through concerts and count non-overlapping ones for start, end in concerts: if start >= last_end_time: max_concerts += 1 last_end_time = end return max_concerts"},{"question":"Given a rope of length `n`, you have to cut the rope into as many smaller segments as possible to maximize the product of their lengths. Each cut can only divide the rope into two smaller ropes. Write a function to determine the maximum product of the lengths of the segments after all cuts. The rope must be cut into at least two smaller segments to be valid. The function `maxProduct(n: int) -> int` should take the length of the rope `n` (2 ≤ n ≤ 100) as an input and return the maximum product of the lengths of the segments. **Function Signature:** ```python def maxProduct(n: int) -> int: ``` **Example:** ```python assert maxProduct(2) == 1 assert maxProduct(10) == 36 ``` In the first example, the rope of length `2` can only be split into two segments of length `1` each, resulting in a product of `1 * 1 = 1`. In the second example, the rope of length `10` can be optimally split into segments of lengths `3, 3, 4`, resulting in a product of `3 * 3 * 4 = 36`.","solution":"def maxProduct(n: int) -> int: This function finds the maximum product of lengths of pieces after cutting a rope of length n. if n == 2: return 1 if n == 3: return 2 product = [0] * (n + 1) product[1] = 1 product[2] = 2 product[3] = 3 for i in range(4, n + 1): max_value = 0 for j in range(1, i // 2 + 1): max_value = max(max_value, product[j] * product[i - j]) product[i] = max_value return product[n]"},{"question":"You are given an array of n integers and an integer m. You need to find the minimum length of a contiguous subarray of which the sum is at least m. If there is no such subarray, output -1. The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 10^9). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4). Output the minimum length of a contiguous subarray with sum at least m. For example, given the input: ``` 10 15 1 2 3 4 5 6 7 8 9 10 ``` The output should be `2` since the subarray [7, 8] has the minimum length with a sum of at least 15.","solution":"def min_length_subarray_with_sum_at_least_m(n, m, arr): Returns the minimum length of a contiguous subarray of which the sum is at least m. If there is no such subarray, return -1. min_length = float(\'inf\') # Initialize with infinity current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= m: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given a string consisting of lowercase letters and an integer k. Your task is to determine whether it is possible to rearrange the letters in the string such that the same characters are at least k indices apart. The first line contains an integer k (1 ≤ k ≤ 10^4). The second line contains a string s of length n (1 ≤ n ≤ 10^5) consisting only of lowercase English letters. If it\'s possible to rearrange the string so that the same characters are at least k indices apart, print \\"YES\\". If not, print \\"NO\\". If the answer is \\"YES\\", also print one possible rearranged string. If there are multiple answers, you can print any of them. **Sample Input 1:** ``` 2 aabb ``` **Sample Output 1:** ``` YES abab ``` **Sample Input 2:** ``` 3 aaabc ``` **Sample Output 2:** ``` NO ```","solution":"import collections import heapq def can_rearrange_string(s, k): if k == 0: return \\"YES\\", s char_freq = collections.Counter(s) max_heap = [] for char, count in char_freq.items(): heapq.heappush(max_heap, (-count, char)) result = [] queue = collections.deque() while max_heap: count, char = heapq.heappop(max_heap) result.append(char) queue.append((char, count + 1)) # decrease the count if len(queue) >= k: tmp_char, tmp_count = queue.popleft() if tmp_count < 0: heapq.heappush(max_heap, (tmp_count, tmp_char)) return (\\"YES\\", \\"\\".join(result)) if len(result) == len(s) else (\\"NO\\", \\"\\")"},{"question":"Given a sequence of integers, a \\"hill\\" is defined as a sub-sequence where the elements are strictly increasing up to some point and then strictly decreasing thereafter. For example, in the sequence [1, 2, 3, 4, 3, 2, 1], the sub-sequence [1, 2, 3, 4, 3, 2, 1] is a hill. Your task is to find the longest hill in the given sequence. If there are multiple hills of maximum length, return any one of them. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000), the length of the sequence. - The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), the elements of the sequence. Output: - The first line should contain the length of the longest hill. - The second line should contain the elements of this hill. If there are multiple answers, you can output any of them. Example: Input: 10 1 2 2 3 4 6 5 1 2 3 Output: 6 2 3 4 6 5 1 In this example, the longest hill is [2, 3, 4, 6, 5, 1], which has a length of 6. Note that there are other sub-sequences which are hills of the same length, but any one of them can be the correct answer.","solution":"def find_longest_hill(sequence): n = len(sequence) if n < 3: return (0, []) # Initialize arrays to store the length of the increasing and decreasing parts inc = [0] * n dec = [0] * n # Fill the inc array for i in range(1, n): if sequence[i] > sequence[i - 1]: inc[i] = inc[i - 1] + 1 # Fill the dec array for i in range(n-2, -1, -1): if sequence[i] > sequence[i + 1]: dec[i] = dec[i + 1] + 1 # Find the maximum hill length max_len = 0 peak_index = -1 for i in range(n): if inc[i] > 0 and dec[i] > 0: length = inc[i] + dec[i] + 1 if length > max_len: max_len = length peak_index = i # If no valid hill is found if max_len == 0: return (0, []) # Extract the longest hill hill = sequence[peak_index-inc[peak_index]:peak_index+dec[peak_index]+1] return (max_len, hill) # Example usage n = 10 sequence = [1, 2, 2, 3, 4, 6, 5, 1, 2, 3] print(find_longest_hill(sequence))"},{"question":"You are given a binary tree where each node has an integer value. Your task is to find the maximum sum of values from root to any leaf node. A leaf node is a node that has no children. Write a function that computes this maximum sum given the root node of the binary tree. The function `maxRootToLeafSum(TreeNode root)` should take a single argument, which is the root node of the binary tree, and return an integer representing the maximum sum. # Input: The input will be provided as a binary tree structure where each node contains an integer value. # Output: An integer representing the maximum sum of values from root to any leaf node. # Examples: Example 1: ``` Input: 1 / 2 3 Output: 4 Explanation: The maximum sum is from root 1 -> 3. ``` Example 2: ``` Input: 5 / 2 8 10 Output: 23 Explanation: The maximum sum is from root 5 -> 8 -> 10. ``` Example 3: ``` Input: -10 / -5 -3 Output: -13 Explanation: The maximum sum is from root -10 -> -3. ``` # Constraints: - The tree is non-empty and contains at least one node. - Node values can be negative, zero, or positive. # Solution: To solve this problem, we can use a depth-first search (DFS) approach to traverse the tree from the root to each leaf node while keeping track of the path sums. We update the maximum sum whenever we reach a leaf node and return the maximum sum found from all root-to-leaf paths. Implement the function `maxRootToLeafSum(TreeNode root)` accordingly.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxRootToLeafSum(root): def dfs(node): if not node: return float(\'-inf\') if not node.left and not node.right: return node.val left_sum = dfs(node.left) right_sum = dfs(node.right) return node.val + max(left_sum, right_sum) return dfs(root)"},{"question":"Implement a function that takes an array of integers and returns a new array where each element is the sum of itself and its immediate neighbors. You need to handle the edge cases properly, where elements at the beginning and the end of the array have only one neighbor. You are not allowed to modify the input array. Your function should return a new array with the same length as the input array. Function Signature: ```python def sum_with_neighbors(arr: List[int]) -> List[int]: ``` # Input: - `arr` (List[int]): A list of integers. # Output: - Return a new list of integers such that each element is the sum of itself and its neighbors from the input list. # Examples: ```python sum_with_neighbors([1, 2, 3, 4, 5]) # Expected output: [3, 6, 9, 12, 9] # Explanation: The new array elements are computed as follows: # The first element = 1 (itself) + 2 (right neighbor) = 3 # The second element = 1 (left neighbor) + 2 (itself) + 3 (right neighbor) = 6 # The third element = 2 (left neighbor) + 3 (itself) + 4 (right neighbor) = 9 # The fourth element = 3 (left neighbor) + 4 (itself) + 5 (right neighbor) = 12 # The fifth element = 4 (left neighbor) + 5 (itself) = 9 sum_with_neighbors([10, 20, 30]) # Expected output: [30, 60, 50] # Explanation: The new array elements are computed as follows: # The first element = 10 (itself) + 20 (right neighbor) = 30 # The second element = 10 (left neighbor) + 20 (itself) + 30 (right neighbor) = 60 # The third element = 20 (left neighbor) + 30 (itself) = 50 ```","solution":"from typing import List def sum_with_neighbors(arr: List[int]) -> List[int]: Given an array of integers, return a new array where each element is the sum of itself and its immediate neighbors. if not arr: return arr n = len(arr) new_arr = [] for i in range(n): left = arr[i - 1] if i - 1 >= 0 else 0 right = arr[i + 1] if i + 1 < n else 0 new_arr.append(left + arr[i] + right) return new_arr"},{"question":"You are given an array of integers where each element appears exactly three times, except for one element which appears exactly once. Write a function in your preferred programming language to find and return that single element. **Input:** The input consists of an array of integers where: - The array length is `n`, where `3 <= n <= 10^4`. - Each element in the array is an integer between `-10^6` and `10^6`. - All but one of the elements appear exactly three times in the array, and one element appears exactly once. **Output:** Return the integer that appears exactly once in the array. **Example:** ``` Input: [2, 2, 3, 2] Output: 3 Input: [0, 1, 0, 1, 0, 1, 99] Output: 99 ``` **Constraints:** - You must implement an algorithm that runs in linear time `O(n)`. - You must use constant extra space `O(1)`.","solution":"def single_number(nums): Returns the single number that appears exactly once in the array, while all other numbers appear exactly three times. ones, twos = 0, 0 for num in nums: # `twos` keeps track of the bits that appear twice twos |= ones & num # `ones` keeps track of the bits that appear once ones ^= num # `common_bit_mask` contains bits that appear three times. common_bit_mask = ~(ones & twos) # Remove common bits (i.e., bits appearing three times) ones &= common_bit_mask twos &= common_bit_mask return ones"},{"question":"Write a function that takes an integer array as input where each element represents the height of a building. A building with height h blocks your view of any building of equal or lesser height positioned behind it in a straight line of sight. You are looking from the leftmost building to the right. Your task is to determine how many buildings you can see when viewing from the leftmost side to the right, counting a building only if it is not obstructed by any taller or equally tall building before it. Input format: The input consists of a single integer array `heights` of length `n` (1 ≤ n ≤ 10^5). Each element represents the height of a building (1 ≤ heights[i] ≤ 10^4). Output format: Return an integer representing the number of buildings visible from the left. Example: Input: ``` [1, 3, 2, 4, 2] ``` Output: ``` 3 ``` Explanation: From the left, you can see the buildings with heights 1, 3, and 4. The building with height 2 (4th in the array) is taller than the subsequent building with height 2 (5th in the array), so you can’t see the 2 at the end. Thus, the output is 3. Example: Input: ``` [4, 2, 3, 1] ``` Output: ``` 1 ``` Explanation: From the left, you can only see the first building with height 4 because it blocks all the buildings behind it. Thus, the output is 1.","solution":"def count_visible_buildings(heights): Determines the number of buildings visible from the leftmost building to the right. Parameters: heights (list of int): List of building heights. Returns: int: Number of visible buildings. if not heights: return 0 max_height = 0 visible_count = 0 for height in heights: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"You are given a string S consisting of lowercase English letters and a fixed set of characters C. Your task is to determine whether you can make all the characters of string S belong to the set C by removing the fewest number of characters from S. If it is possible, you need to return the modified string; otherwise, return \\"impossible\\". You may assume the length of string S is up to 1000 characters and the length of set C is up to 26 characters. # Input - The first line contains a string S of lowercase English letters. - The second line contains a string C containing distinct lowercase English letters. # Output - A string containing the modified version of S such that it only contains characters from the set C, or the string \\"impossible\\" if no such transformation is possible. # Example **Input:** ``` alphabet aeiou ``` **Output:** ``` aae ``` **Explanation:** - By removing characters \'l\', \'p\', \'h\', \'b\', \'t\' from \\"alphabet\\", we can get \\"aae\\" which only contains characters from the set \\"aeiou\\". In the case where no characters from S are in the set C, the output should be \\"impossible\\".","solution":"def modify_string_to_set(s, c): Returns a modified version of string s such that it only contains characters from the set c, or \\"impossible\\" if no such transformation is possible. c_set = set(c) modified_string = \'\'.join([char for char in s if char in c_set]) if modified_string: return modified_string else: return \\"impossible\\""},{"question":"You are given a list of integers representing the heights of buildings in a city skyline. The city\'s skyline is defined in terms of consecutive buildings with the same height forming a single block. Your task is to determine the longest block (sequence of buildings with the same height) in the city skyline and return its length. Write a function `longest_block(n, heights)` that takes in: - an integer `n` (1 ≤ n ≤ 10^5) representing the number of buildings, - a list of integers `heights` (1 ≤ heights[i] ≤ 10^9) representing the height of each building. Your function should return the length of the longest consecutive block of buildings with the same height. **Input:** - The first line contains an integer `n`. - The second line contains `n` space-separated integers representing the heights of the buildings. **Output:** - A single integer representing the length of the longest block. **Example:** ``` Input: 8 3 3 2 2 2 2 5 5 Output: 4 ``` **Explanation:** In the example above, the longest block is formed by the buildings with height 2, which appear consecutively four times.","solution":"def longest_block(n, heights): Returns the length of the longest block of consecutive buildings with the same height. Parameters: n (int): Number of buildings. heights (list of int): Heights of the buildings. Returns: int: Length of the longest block. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if heights[i] == heights[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 return max(max_length, current_length)"},{"question":"Given a string s of length n, consisting of only the characters \'a\', \'b\', and \'c\', you are to determine if it\'s possible to rearrange s such that no two adjacent characters in the resulting string are the same. # Input - The first line contains a single integer n (1 leq n leq 10^5) — the length of the string. - The second line contains the string s of length n, composed of the characters \'a\', \'b\', and \'c\'. # Output - If it is possible to rearrange the string such that no two adjacent characters are the same, print \\"YES\\" followed by the rearranged string. - If it is not possible, print \\"NO\\". # Example Input ``` 6 aabbcc ``` Output ``` YES abcabc ``` Input ``` 3 aaa ``` Output ``` NO ``` # Note In the first example, \\"abcabc\\" is a valid rearrangement where no two adjacent characters are the same. In the second example, it is not possible to rearrange the string \\"aaa\\" to meet the conditions since all characters are the same. # Constraints 1. You need to optimize the solution so that it works efficiently for large strings up to length 100,000. 2. Ensure that your code runs in optimal time complexity for the given input size. Consider using a priority queue or a greedy algorithm to solve the problem.","solution":"import heapq from collections import Counter def rearrange_string(s): # Count frequency of each character count = Counter(s) max_char = max(count.values()) # edge case: if any character occurs more than (n + 1) // 2 times, return \\"NO\\" if max_char > (len(s) + 1) // 2: return \\"NO\\" # Initialize a max-heap with negative frequencies to simulate a max heap using heapq max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_char, prev_freq = None, 0 result = [] # Rearrange the string while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # If there\'s a previously used character, push it back to the heap if prev_char and prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char, prev_freq = char, freq + 1 # decrease the frequency return \\"YES \\" + \'\'.join(result) # Example usage: # n = 6 # s = \\"aabbcc\\" # print(rearrange_string(n, s)) # Output: \\"YES abcabc\\""},{"question":"Lara is working on a programming challenge to determine the minimum number of operations required to transform one string into another. Each operation is either inserting a character, deleting a character, or replacing one character with another. This problem is commonly known as the \\"edit distance\\" problem. Given two strings, write a function that calculates the minimum number of operations required to transform the first string into the second. **Input:** - A single line containing two non-empty strings s1 and s2. Each string is composed of no more than 1000 lowercase Latin letters. **Output:** - A single integer representing the minimum number of operations required. **Example:** - Input: `kitten sitting` - Output: `3` In the example, the minimum operations are: replace \'k\' with \'s\', then replace \'e\' with \'i\', and finally insert \'g\' at the end. You need to implement this in the most efficient way possible since the input size could be large.","solution":"def min_distance(s1, s2): Returns the minimum number of operations required to transform one string into another. m = len(s1) n = len(s2) # Initialize DP table dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If first string is empty, insert all characters of second string elif j == 0: dp[i][j] = i # If second string is empty, remove all characters of first string elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], # Remove dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"You are given a list of non-negative integers representing a histogram. Each integer represents the height of a bar in the histogram where the width of each bar is 1. The histogram is aligned such that the bottom of the bars line up on a single horizontal line. The task is to determine the area of the largest rectangle that can be formed within the bounds of the histogram. This rectangle can be composed of contiguous bars. For example, consider the histogram: ``` [ 2, 1, 5, 6, 2, 3 ] ``` In this example, the largest rectangle has an area of 10 units. The function should take the histogram heights as input and output an integer representing the area of the largest rectangle. The input format is a single line containing space-separated non-negative integers representing the heights of the histogram. Output the area of the largest rectangle. # Example Input: ``` 2 1 5 6 2 3 ``` Output: ``` 10 ``` Explanation: The largest rectangle can be formed by the third and fourth bars (heights 5 and 6), together with a width of 2, resulting in an area of `5 * 2 = 10`.","solution":"def largest_rectangle_area(histogram): Calculate the area of the largest rectangle that can be formed within the bounds of the histogram. :param histogram: List[int], a list of non-negative integers representing histogram heights. :return: int, the area of the largest rectangle. stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given an unordered list of integers. Your task is to find the longest subsequence of consecutive integers in the list and return its length. A subsequence is a sequence derived from the list by deleting some or no elements without changing the order of the remaining elements. For example, given the list [2, 1, 6, 9, 4, 3, 7], the longest subsequence of consecutive integers is [2, 1, 4, 3] (length 4). Write a function that takes in a list of integers and returns the length of the longest subsequence of consecutive integers. Input: - The first line contains an integer n (1 ≤ n ≤ 105), the number of elements in the list. - The second line contains n integers separated by spaces, representing the elements of the list. Output: - An integer, the length of the longest subsequence of consecutive integers. Example: Input: 7 2 1 6 9 4 3 7 Output: 4","solution":"def longest_consecutive_subsequence_length(arr): Returns the length of the longest subsequence of consecutive integers in the list. if not arr: return 0 arr_set = set(arr) longest_length = 0 for num in arr_set: if num - 1 not in arr_set: current_num = num current_streak = 1 while current_num + 1 in arr_set: current_num += 1 current_streak += 1 longest_length = max(longest_length, current_streak) return longest_length"},{"question":"Farmer John has a rectangular pasture of dimensions n rows by m columns, and he wants to place some fences to protect his cows from wolves. Each fence spans an entire row or column. Farmer John wants to place the minimum number of fences such that there is no wolf in any cell of the grid without a fence. You are given a n times m grid, where the value \'.\' represents an empty part of the pasture, the value \'W\' represents a wolf, and the value \'C\' represents a cow. Calculate the minimum number of fences required to ensure that there are no wolves in any cell of the grid without a fence. The first line contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. The next n lines contain m characters each, representing the grid. Print one integer — the minimum number of fences needed. # Sample Input ``` 3 4 C... ..W. .... ``` # Sample Output ``` 1 ``` # Explanation In the sample input, placing a fence across the second row would protect the cows by isolating the wolf in that row. Thus, only one fence is needed.","solution":"def minimum_fences(n, m, grid): def has_wolf_in_row(row): return \'W\' in grid[row] def has_wolf_in_col(col): return any(grid[row][col] == \'W\' for row in range(n)) row_fences = sum(has_wolf_in_row(row) for row in range(n)) col_fences = sum(has_wolf_in_col(col) for col in range(m)) return min(row_fences, col_fences)"},{"question":"You are given a rectangular grid of size n x m that represents a garden. Each cell in this grid can either be empty or contain a flower. Your task is to find the size of the largest connected region of flowers. A region is considered connected if there is a path between any two cells in the region moving horizontally, vertically, or diagonally. The size of a region is defined as the number of cells it contains. # Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the garden. The next n lines each contain m characters. Each character is either \'.\' (representing an empty cell) or \'*\' (representing a flower). # Output Print a single integer, the size of the largest connected region of flowers. # Example Input ``` 4 5 .*..* ****. ..*.* ....* ``` Output ``` 9 ``` # Explanation The largest connected region of flowers consists of 9 cells and forms an irregular shape connecting through horizontal, vertical, and diagonal cells.","solution":"def largest_connected_region(n, m, garden): def get_neighbors(r, c): directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and garden[nr][nc] == \'*\' and not visited[nr][nc]: yield nr, nc def dfs(r, c): stack = [(r, c)] count = 0 while stack: cr, cc = stack.pop() if visited[cr][cc]: continue visited[cr][cc] = True count += 1 for nr, nc in get_neighbors(cr, cc): stack.append((nr, nc)) return count visited = [[False] * m for _ in range(n)] max_region = 0 for i in range(n): for j in range(m): if garden[i][j] == \'*\' and not visited[i][j]: max_region = max(max_region, dfs(i, j)) return max_region # Example usage: # n, m = 4, 5 # garden = [ # \\".*..*\\", # \\"****.\\", # \\"..*.*\\", # \\"....*\\" # ] # print(largest_connected_region(n, m, garden)) # Output: 9"},{"question":"Limak, the little polar bear, loves playing games on his parents\' old computer. One of his favorite games involves finding the longest common subsequence (LCS) between two given sequences of characters. However, the computer is old and slow, and sometimes it crashes when given very long sequences. To prevent this, Limak and his parents have agreed to limit the length of the sequences. Given two strings, A and B, you are to compute the length of their longest common subsequence. The length of the strings won\'t exceed 1000 characters. A longest common subsequence is the longest sequence that can be derived from both strings by deleting some or none of the characters without changing the order of the remaining characters. Write a function to compute the length of the LCS of the two given strings. # Input - The first line of the input contains an integer t (1 ≤ t ≤ 10), the number of test cases. - Each of the next t pairs of lines contains two strings, A and B, consisting of lowercase English letters. # Output For each test case, output the length of the LCS on a new line. # Example Input: ``` 2 abcdef acf xyz xyy ``` Output: ``` 3 2 ``` # Note For the first test case, the LCS of \\"abcdef\\" and \\"acf\\" is \\"acf\\", which has length 3. For the second test case, the LCS of \\"xyz\\" and \\"xyy\\" is \\"xy\\", which has length 2.","solution":"def lcs_length(a, b): Returns the length of the longest common subsequence of strings a and b. n, m = len(a), len(b) # Create a table to store lengths of longest common subsequence. dp = [[0] * (m + 1) for _ in range(n + 1)] # Build the dp array from bottom right for i in range(1, n + 1): for j in range(1, m + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m] def process_test_cases(t, cases): Processes multiple test cases and returns the results. Parameters: - t: Number of test cases - cases: A list of tuples, each containing two strings A and B. Returns a list of results where each result is the length of LCS for the corresponding test case. results = [] for a, b in cases: results.append(lcs_length(a, b)) return results"},{"question":"You are given a sequence of stock prices for a particular company over a series of days. Your task is to determine the maximum profit you can achieve by making a single buy-sell transaction. In other words, you need to find the maximum difference between a later sell price and an earlier buy price over the given period. However, you are allowed to make at most one transaction (i.e., buy one and sell one share of the stock). The stock prices are provided as a list of integers, where each integer represents the stock price on a particular day. Write a function `max_profit(prices: List[int]) -> int` that takes a list of integers as input and returns an integer representing the maximum profit that can be made from a single buy-sell transaction. If no profit can be achieved, return 0. # Example ``` Input: prices = [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Input: prices = [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transaction is done, i.e., the maximum profit = 0. ``` # Constraints - 0 <= prices.length <= 10^5 - 0 <= prices[i] <= 10^4","solution":"from typing import List def max_profit(prices: List[int]) -> int: Returns the maximum profit that can be achieved from a single buy-sell transaction. If no profit can be achieved, return 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"A baker is organizing an event and he has decided to bake specific types of cakes. He has `n` distinct types of ingredients at his disposal. Each type of cake recipe requires a specific combination of ingredients, and he can use each type of ingredient only once per cake. The baker wants to calculate the maximum number of different cakes he can bake using the available ingredients without repeating any type of cake. You are given the number of ingredient types `n` and an integer `k` where `k` is the number of different types of ingredients required by each cake. Your task is to determine the maximum number of different cakes the baker can bake. The first line of input contains two space-separated integers `n` and `k` (1 ≤ k ≤ n ≤ 100) — the number of ingredient types and the number of distinct ingredients required per cake, respectively. Print a single line containing the maximum number of different cakes the baker can bake. Example: ``` Input: 8 3 Output: 56 ``` Explanation: Given 8 distinct ingredients and each cake requiring 3 distinct ingredients, the maximum number of different cakes the baker can make is given by the combination formula C(n, k), which calculates the number of ways to choose `k` items from `n` items without regard to the order of selection. In this example, it\'s C(8, 3) = 8! / (3!(8-3)!) = 56 different cakes.","solution":"from math import comb def max_different_cakes(n, k): Returns the maximum number of different cakes that can be baked with n ingredients, each cake requiring k distinct ingredients. return comb(n, k)"},{"question":"Robin loves palindromic numbers very much. He is especially fond of numbers that remain the same when their digits are reversed. Write a program that calculates the longest palindromic subsequence from a given sequence of integers. A subsequence is derived from the original sequence by deleting some or no elements without changing the order of the remaining elements. # Input Format: The first line contains an integer n (1 ≤ n ≤ 104) — the length of the sequence. The second line contains n integers ai (1 ≤ ai ≤ 104) — the elements of the sequence. # Output Format: Print the length of the longest palindromic subsequence. # Example: Input: ``` 6 1 2 3 4 2 1 ``` Output: ``` 5 ``` Explanation: The longest palindromic subsequence is [1, 2, 3, 2, 1], and its length is 5.","solution":"def longest_palindromic_subsequence(sequence): Returns the length of the longest palindromic subsequence in the given sequence of integers. :param sequence: List[int] - list of integers :return: int - length of the longest palindromic subsequence n = len(sequence) # Create a 2D table to store results of subproblems dp = [[0 for _ in range(n)] for _ in range(n)] # Strings of length 1 are palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table. cl is the length of the substring for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if sequence[i] == sequence[j] and cl == 2: dp[i][j] = 2 elif sequence[i] == sequence[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # Length of longest palindromic subseq return dp[0][n-1]"},{"question":"You are given an integer array `arr` of size `n` containing unique positive integers. You need to find a subarray of `arr` whose sum is exactly equal to a given integer `k`. If there are multiple such subarrays, return the one that appears first (i.e., whose starting index is the smallest). If no such subarray exists, return an empty subarray. A subarray is defined as a contiguous part of an array. For example, the array `[1, 2, 3, 4, 5]` has numerous subarrays like `[2, 3]`, `[4]`, `[1, 2, 3]`, etc. Write a function `find_subarray_with_given_sum(arr: List[int], k: int) -> List[int]` that returns the subarray whose elements sum up to `k`. # Input: - An integer array `arr` of size `n` (2 ≤ n ≤ 10^5). - An integer `k` (1 ≤ k ≤ 10^9). # Output: - Return the subarray whose sum is `k`. If no such subarray exists, return an empty list. # Example 1: Input: ```python arr = [1, 2, 3, 4, 5] k = 9 ``` Output: ```python [2, 3, 4] ``` # Example 2: Input: ```python arr = [1, 2, 3, 7, 5] k = 12 ``` Output: ```python [2, 3, 7] ``` # Example 3: Input: ```python arr = [1, 2, 3, 4, 5] k = 15 ``` Output: ```python [1, 2, 3, 4, 5] ``` # Example 4: Input: ```python arr = [1, 2, 3, 4, 5] k = 20 ``` Output: ```python [] ``` # Note: 1. The function should be efficient and avoid unnecessary computations to handle the large input constraints. 2. Think about the sliding window technique to solve the problem efficiently.","solution":"def find_subarray_with_given_sum(arr, k): Returns the first subarray with the given sum k. If no such subarray exists, returns an empty list. n = len(arr) current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > k and start <= end: current_sum -= arr[start] start += 1 if current_sum == k: return arr[start:end+1] return []"},{"question":"You are given a string containing only the characters \'(\' and \')\'. Your task is to determine the minimum number of parentheses to be removed to make the string valid. A string is considered valid if the parentheses are balanced. The first input line contains an integer T — the number of test cases. Each of the following T lines contains one string of parentheses. For each test case, output the minimum number of parentheses that need to be removed to make the string valid. # Input Format - The first line contains the integer T (1 ≤ T ≤ 50), the number of test cases. - The next T lines contain a single string of length n (1 ≤ n ≤ 100). # Output Format - For each test case, output a single integer — the minimum number of parentheses to be removed. # Example Input: ``` 3 (())) ())( ((() ``` Output: ``` 1 2 2 ```","solution":"def min_removals_to_make_valid_parentheses(T, cases): Given the number of test cases and corresponding strings of parentheses, this function returns a list of integers where each integer represents the minimum number of parentheses that need to be removed to make the string valid. results = [] for s in cases: left, right = 0, 0 for char in s: if char == \'(\': left += 1 elif char == \')\': if left > 0: left -= 1 else: right += 1 results.append(left + right) return results"},{"question":"Faye is working on a new project that involves analyzing the efficiency of different search algorithms. Her task involves working with an array of integers and finding a specific target number. Formally, you are given an array of non-negative integers of size n, sorted in non-decreasing order. Your goal is to find the smallest index of the target integer in the array. If the target integer does not exist in the array, return -1. Complete the function `binary_search(arr, target)` that takes a list of integers `arr` and an integer `target` and return the index of the target integer using binary search. **Input** - `arr`: A list of non-negative integers of size n (1 ≤ n ≤ 100,000), sorted in non-decreasing order. - `target`: A non-negative integer to search for in the array (0 ≤ target ≤ 10^9). **Output** - Return the smallest index of the target integer if present, otherwise return -1. **Examples** ``` binary_search([1, 2, 2, 3, 4], 2) > 1 binary_search([1, 2, 2, 3, 4], 5) > -1 ``` **Constraints** - You must implement the search algorithm yourself; you cannot use built-in functions like `index` or `find`. - Your function should run in O(log n) time complexity.","solution":"def binary_search(arr, target): left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] < target: left = mid + 1 elif arr[mid] > target: right = mid - 1 else: if mid == 0 or arr[mid - 1] != target: return mid right = mid - 1 return -1"},{"question":"You are tasked with writing a function to help Alice, who runs a small grocery delivery service. Alice needs to group the orders from her customers to minimize the delivery trips. Each order consists of a list of items, and there is a constraint on the maximum number of different item types that can fit in one delivery trip. Given an integer `max_item_types` representing the maximum allowed number of different item types in a single trip, and a list of orders where each order is a list of strings representing item names, write a function that calculates the minimum number of delivery trips required to deliver all orders. Input: - An integer `max_item_types` (1 ≤ max_item_types ≤ 50) - A list of orders, where each order is a list of strings representing item names. Each list of item names is non-empty and consists of no more than 100 items. There are at most 100 orders and all item names consist of lowercase English letters only with length no more than 20. Output: - An integer representing the minimum number of delivery trips required to deliver all orders. Example: ``` max_item_types = 2 orders = [ [\\"apple\\", \\"banana\\"], [\\"banana\\", \\"orange\\"], [\\"apple\\", \\"orange\\", \\"grape\\"] ] The optimal way to deliver the orders would require 3 trips: 1. Deliver order [\\"apple\\", \\"banana\\"] 2. Deliver order [\\"banana\\", \\"orange\\"] 3. Deliver order [\\"apple\\", \\"orange\\", \\"grape\\"] So the result should be 3. ``` Write function signature: ```python def minimum_delivery_trips(max_item_types: int, orders: List[List[str]]) -> int: ```","solution":"def minimum_delivery_trips(max_item_types, orders): from collections import defaultdict def can_combine(order1, order2): combined_items = set(order1).union(set(order2)) return len(combined_items) <= max_item_types n = len(orders) trips = 0 visited = [False] * n for i in range(n): if visited[i]: continue current_trip = orders[i] trips += 1 visited[i] = True for j in range(i + 1, n): if visited[j]: continue if can_combine(current_trip, orders[j]): current_trip = list(set(current_trip).union(set(orders[j]))) visited[j] = True return trips"},{"question":"Sanika is organizing a grand festival with several events lined up, taking place in various halls. Each hall has a specific capacity and a list of events scheduled throughout the day. Each event occupies the hall for a specific period and can potentially overlap with other events. Sanika needs to ensure that the hall is not double-booked for any overlapping events, as this would cause scheduling conflicts and commotion. You are tasked with writing a program that helps Sanika determine if any hall is double-booked. Write a function that, given the schedules of events for each hall, checks if there are any overlapping events within any hall. The first line of the input contains the number of halls n (1 ≤ n ≤ 100). The next n blocks each represent the schedule for one hall. Each block starts with an integer m (1 ≤ m ≤ 1000), indicating the number of events scheduled in the hall. The following m lines each describe an event with two integers, start and end (0 ≤ start < end ≤ 10^6), representing the start and end times of the event. Your task is to print \\"YES\\" if there is any hall with overlapping events, otherwise, print \\"NO\\". Example Input: ``` 2 3 1 5 2 6 7 10 2 5 8 8 11 ``` Example Output: ``` YES ``` Explanation: - In the first hall, there is an overlap between events [1, 5] and [2, 6], hence \\"YES\\". - There are no overlapping events in the second hall. Note: The function should handle the input efficiently and ensure that the program runs within the acceptable time limits.","solution":"def is_any_hall_double_booked(n, halls): Determines if any hall has overlapping events. Parameters: n (int): Number of halls. halls (list of lists of tuples): List containing schedule of events for each hall. Returns: str: \'YES\' if there is any hall with overlapping events, otherwise \'NO\'. for hall in halls: # Sort events in the hall by start time hall.sort(key=lambda event: event[0]) # Check for overlapping events for i in range(1, len(hall)): if hall[i][0] < hall[i-1][1]: return \\"YES\\" return \\"NO\\" def parse_input(input_string): Parses the input string to extract the number of halls and their schedules. Parameters: input_string (str): Input string representing the hall schedules. Returns: tuple: A tuple containing the number of halls and a list of event schedules. lines = input_string.strip().split(\\"n\\") n = int(lines[0]) index = 1 halls = [] for _ in range(n): m = int(lines[index]) events = [] for j in range(1, m+1): start, end = map(int, lines[index + j].split()) events.append((start, end)) halls.append(events) index += m + 1 return n, halls"},{"question":"Farmer Jane has a rectangular barnyard represented as a 2D grid with m rows and n columns. Each cell in the grid can either be empty (represented as \\".\\") or contain an obstacle (represented as \\"#\\"). Farmer Jane\'s goal is to determine the shortest path from the top-left corner of the grid to the bottom-right corner. However, Farmer Jane can only move up, down, left, or right on the grid, and she cannot pass through cells with obstacles. Given the grid configuration, calculate the minimum number of moves required to get from the top-left corner to the bottom-right corner. If there is no valid path, return -1. # Input Format The first line contains an integer t (1 leq t leq 100) — the number of test cases. Then t test cases follow. Each test case consists of two lines. The first line contains two integers m and n (1 leq m, n leq 100) — the number of rows and the number of columns of the grid. The next m lines contain n characters each, representing the grid. # Output Format For each test case, output a single integer representing the minimum number of moves required to get from the top-left corner to the bottom-right corner. If there\'s no valid path, output -1. # Sample Input ``` 3 3 3 ..# .#. ..# 4 4 ...# .#.# .#.. .... 2 2 ``` # Sample Output ``` -1 6 -1 ``` # Explanation In the first test case, there is no valid path from the top-left corner to the bottom-right corner due to obstacles blocking the way. In the second test case, the shortest path is from (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,3), and hence the minimum number of moves required is 6. In the third test case, all paths are blocked by obstacles, so the answer is -1. # Constraints - The grid dimensions and the number of cells will guarantee the problem\'s constraints are feasible within the given limits. - The sum of all cells in all test cases will not exceed 10,000.","solution":"from collections import deque def min_moves_to_reach_end(t, test_cases): # Direction vectors for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] results = [] for case in test_cases: m, n, grid = case if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': # If start or end is blocked results.append(-1) continue # BFS initialization queue = deque([(0, 0)]) visited = [[False]*n for _ in range(m)] visited[0][0] = True moves = 0 found = False while queue: for _ in range(len(queue)): x, y = queue.popleft() if x == m-1 and y == n-1: results.append(moves) found = True break for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) if found: break moves += 1 if not found: results.append(-1) return results # Function for organizing the input and output as specified def solve(t, raw_test_cases): test_cases = [] idx = 0 for _ in range(t): m, n = map(int, raw_test_cases[idx].split()) grid = raw_test_cases[idx + 1:idx + 1 + m] test_cases.append((m, n, grid)) idx += 1 + m return min_moves_to_reach_end(t, test_cases) # Test with provided test cases raw_input = [\\"3\\",\\"3 3\\",\\"..#\\",\\".#.\\",\\"..#\\",\\"4 4\\",\\"...#\\",\\".#.#\\",\\".#..\\",\\"....\\",\\"2 2\\",\\"\\",\\"\\"] t = int(raw_input[0]) output = solve(t, raw_input[1:]) print(output) # Should print [-1, 6, -1]"},{"question":"You are designing a robotic system to help manage commands for an industrial machine. The machine can execute a series of commands to perform specific tasks. Each command consists of an operation (`\'MOVE\'`, `\'TURN\'`, `\'STOP\'`) and a value associated with it. - `MOVE X`: Moves the machine forward by `X` units. - `TURN Y`: Turns the machine to a different direction. Possible values for `Y` are `\'LEFT\'` or `\'RIGHT\'`. - `STOP`: Stops the machine. Given a series of commands, you need to determine the final state of the machine. The final state includes the total distance moved forward and the final direction the machine is facing. The machine initially faces `\'NORTH\'` and starts at distance `0`. Directions change in the following manner: - From `\'NORTH\'`, `\'LEFT\'` changes to `\'WEST\'` and `\'RIGHT\'` changes to `\'EAST\'`. - From `\'WEST\'`, `\'LEFT\'` changes to `\'SOUTH\'` and `\'RIGHT\'` changes to `\'NORTH\'`. - From `\'SOUTH\'`, `\'LEFT\'` changes to `\'EAST\'` and `\'RIGHT\'` changes to `\'WEST\'`. - From `\'EAST\'`, `\'LEFT\'` changes to `\'NORTH\'` and `\'RIGHT\'` changes to `\'SOUTH\'`. Input: - First line of input contains an integer `n` (1 ≤ n ≤ 10^6), denoting the number of commands. - The next `n` lines each contain a command in the format described above. Output: - Output two values: the total distance moved and the final direction the machine is facing. Example: ``` Input: 5 MOVE 5 TURN RIGHT MOVE 3 TURN LEFT STOP Output: 8 EAST ``` Explanation: - `MOVE 5` moves the machine forward by 5 units (current distance: 5, facing: NORTH). - `TURN RIGHT` turns the machine to face EAST. - `MOVE 3` moves the machine forward by 3 units (current distance: 8, facing: EAST). - `TURN LEFT` turns the machine to face NORTH. - `STOP` stops the machine without any further movements. The final state of the machine has moved 8 units in total and is facing EAST.","solution":"def execute_commands(n, commands): directions = [\'NORTH\', \'EAST\', \'SOUTH\', \'WEST\'] direction_index = 0 # Start facing NORTH distance = 0 for command in commands: if command.startswith(\'MOVE\'): _, x = command.split() distance += int(x) elif command.startswith(\'TURN\'): _, y = command.split() if y == \'LEFT\': direction_index = (direction_index - 1) % 4 elif y == \'RIGHT\': direction_index = (direction_index + 1) % 4 # STOP command does nothing final_direction = directions[direction_index] return distance, final_direction"},{"question":"Design a function that receives two strings as input and returns the length of the longest common subsequence (LCS) between them. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively. The function should use dynamic programming for its implementation to ensure efficient computation. **Function Signature:** ```python def longest_common_subsequence(s1: str, s2: str) -> int: ``` **Input:** - Two strings `s1` and `s2` where 1 <= len(s1), len(s2) <= 1000. **Output:** - An integer representing the length of the longest common subsequence of the two input strings. **Example:** ```python longest_common_subsequence(\\"abcde\\", \\"ace\\") # Output: 3 longest_common_subsequence(\\"abc\\", \\"def\\") # Output: 0 ``` **Explanation:** 1. In the first example, the longest common subsequence is \\"ace\\" which has a length of 3. 2. In the second example, there are no common subsequences, so the function returns 0.","solution":"def longest_common_subsequence(s1: str, s2: str) -> int: Returns the length of the longest common subsequence between two strings. Uses dynamic programming to find the length. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are given a sequence of integers and a set of queries. Each query requires you to perform a particular operation on the sequence. The operations are of the following types: 1. Update: Update a specific element in the sequence. 2. Sum: Find the sum of a subarray. 3. Product: Find the product of a subarray. Since the numbers can be large, the sum and product results should be taken modulo some integer `mod`. The first line contains two integers `n` and `mod` (`1 <= n <= 10^5`, `2 <= mod <= 10^9 + 7`) — the size of the sequence and the modulo value. The second line contains `n` integers `a1, a2, ..., an` (`1 <= ai <= 10^5`) — the sequence itself. The third line contains one integer `q` (`1 <= q <= 10^5`) — the number of queries. Next `q` lines satisfy one of the following formats: * `1 x y` — Update the element at index `x` to `y` (`0 <= x < n`, `1 <= y <= 10^5`). * `2 l r` — Print the sum of elements from index `l` to `r` inclusive, modulo `mod` (`0 <= l <= r < n`). * `3 l r` — Print the product of elements from index `l` to `r` inclusive, modulo `mod` (`0 <= l <= r < n`). For each query of type `2` and `3`, print the result in a new line. Example: Input: ``` 5 1000000007 3 2 1 5 4 5 2 1 3 3 0 4 1 2 3 2 0 2 3 1 3 ``` Output: ``` 8 120 8 30 ```","solution":"class SequenceQuery: def __init__(self, array, mod): self.array = array self.mod = mod def update(self, x, y): self.array[x] = y def sum_subarray(self, l, r): return sum(self.array[l:r + 1]) % self.mod def product_subarray(self, l, r): result = 1 for i in range(l, r + 1): result = (result * self.array[i]) % self.mod return result def process_queries(n, mod, array, queries): seq_query = SequenceQuery(array, mod) results = [] for query in queries: if query[0] == 1: seq_query.update(query[1], query[2]) elif query[0] == 2: results.append(seq_query.sum_subarray(query[1], query[2])) elif query[0] == 3: results.append(seq_query.product_subarray(query[1], query[2])) return results"},{"question":"You are given a string consisting of lowercase English letters. Your task is to remove all consecutive duplicate characters from the string. Consecutive duplicate characters are the characters that appear more than once in sequence in the string. For example, if the input string is `aabccba`, the output string should be `abcba`. # Input: The input contains one line of a string ( s ) (1 ≤ |s| ≤ 10<sup>5</sup>) consisting of lowercase English letters. # Output: Output the resulting string after removing all consecutive duplicate characters. # Example: Input: ``` aabccba ``` Output: ``` abcba ``` Input: ``` aabbcc ``` Output: ``` abc ```","solution":"def remove_consecutive_duplicates(s): Removes all consecutive duplicate characters from the input string. :param s: String consisting of lowercase English letters :return: String with consecutive duplicate characters removed if not s: return \\"\\" result = [s[0]] # Initialize result with the first character of s for char in s[1:]: if char != result[-1]: # Add char to result if it\'s different from the last char in result result.append(char) return \'\'.join(result)"},{"question":"You are given a non-negative integer n (0 le n le 10^5). Your task is to find the maximum digit in the decimal representation of n. For example, if the given number is 3745, the maximum digit is 7. The first line of the input contains an integer t (1 le t le 10^3) — the number of test cases. Each of the next t lines contains an integer n. For each test case, print the maximum digit in the decimal representation of the given number n.","solution":"def max_digit(n): Returns the maximum digit in the decimal representation of n. return max(int(digit) for digit in str(n)) def process_test_cases(test_cases): Processes a list of test cases and returns a list of results. Args: test_cases (list of int): List of integers representing the test cases. Returns: list of int: List of maximum digits for each test case. return [max_digit(n) for n in test_cases]"},{"question":"You are given a bipartite graph with n vertices and m edges. The vertices are divided into two sets: X and Y. The graph is undirected, and there are no edges within the same set; edges only connect vertices from X to vertices in Y. You are also given q queries. Each query consists of an integer k and a set of k vertices. Your task is to determine whether it\'s possible to rearrange the vertices of the graph such that all vertices in the query set are in the same connected component. # Input - The first line contains three integers n, m, and q (2 le n le 2 cdot 10^5, 1 le m le 2 cdot 10^5, 1 le q le 10^4) — the number of vertices, the number of edges, and the number of queries respectively. - The second line contains an integer |X| (1 le |X| le n-1) — the number of vertices in set X. - The next line contains |X| integers representing the vertices in set X. The remaining vertices (n - |X|) belong to set Y. - The next m lines describe the edges. Each of these lines contains two integers u and v (u in X, v in Y, 1 le u, v le n) representing an edge between vertices u and v. - The next q lines describe queries. Each query starts with an integer k (1 le k le n) — the number of vertices in the query set. Then k distinct integers follow: v_1, v_2, dots, v_k. # Output For each query, print \\"YES\\" if it is possible to rearrange the vertices such that all vertices in the query set are in the same connected component, and \\"NO\\" otherwise. # Example Input ``` 7 6 3 3 1 2 3 1 4 1 5 2 5 2 6 3 6 3 7 3 4 5 6 2 1 3 4 1 2 6 7 ``` Output ``` YES NO YES ``` Explanation For the first query, vertex 4 is connected to vertex 1, vertex 5 is connected to both vertices 1 and 2, and vertex 6 is connected to vertices 2 and 3. It is possible to connect vertices 4, 5, and 6 to form a single connected component with the vertices mentioned. For the second query, vertices 1 and 3 are not directly connected nor can be rearranged to be in the same connected component using the given edges. For the third query, it is possible to rearrange the vertices such that vertices 1, 2, 6, and 7 are in a single connected component. Hence, the graph structure allows it.","solution":"def find_parent(parents, v): if parents[v] == v: return v parents[v] = find_parent(parents, parents[v]) return parents[v] def union(parents, ranks, v1, v2): root1 = find_parent(parents, v1) root2 = find_parent(parents, v2) if root1 != root2: if ranks[root1] > ranks[root2]: parents[root2] = root1 elif ranks[root1] < ranks[root2]: parents[root1] = root2 else: parents[root2] = root1 ranks[root1] += 1 def can_be_connected(graph, query): n = len(graph) parents = list(range(n)) ranks = [0] * n for u in range(n): for v in graph[u]: union(parents, ranks, u, v) root = find_parent(parents, query[0]) for v in query: if find_parent(parents, v) != root: return \\"NO\\" return \\"YES\\" def main(): import sys input = sys.stdin.read data = input().split() index = 0 n = int(data[index]) index += 1 m = int(data[index]) index += 1 q = int(data[index]) index += 1 x_size = int(data[index]) index += 1 x_vertices = [] for _ in range(x_size): x_vertices.append(int(data[index]) - 1) index += 1 y_vertices = [i for i in range(n) if i not in x_vertices] graph = [[] for _ in range(n)] for _ in range(m): u = int(data[index]) - 1 index += 1 v = int(data[index]) - 1 index += 1 graph[u].append(v) graph[v].append(u) results = [] for _ in range(q): k = int(data[index]) index += 1 query = [] for _ in range(k): query.append(int(data[index]) - 1) index += 1 results.append(can_be_connected(graph, query)) print(\\"n\\".join(results)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a circular linked list with a length of n where each node has an integer value. Your task is to implement a function that estimates the average of the sum of all possible sublists of length k within this circular linked list. A circular linked list is one where the next node of the last node points to the first node. # Function Signature `float estimate_average(node head, int n, int k)` # Input - `node head`: The head of the circular linked list. - `int n`: The length of the circular linked list. (1 ≤ n ≤ 10^5) - `int k`: The length of each sublist. (1 ≤ k ≤ n) # Output - Return the average of the sum of all sublists of length `k` as a floating-point number. # Example Consider the circular linked list: 1 -> 2 -> 3 -> 4 -> 5 (next of 5 points back to 1) **Input** ```python n = 5 k = 3 ``` Where the list nodes have the values: `1, 2, 3, 4, 5` **Output** `6.0` # Explanation The possible sublists of length `k=3` are as follows - [1, 2, 3] with sum 6 - [2, 3, 4] with sum 9 - [3, 4, 5] with sum 12 - [4, 5, 1] with sum 10 - [5, 1, 2] with sum 8 The average of sums is `(6 + 9 + 12 + 10 + 8) / 5 = 45 / 5 = 9.0` # Note You must handle large lists efficiently within the given constraints, focusing on the sliding window technique for optimal performance. Your task is to implement the `estimate_average` function to solve the problem.","solution":"class ListNode: def __init__(self, value: int, next: \'ListNode\' = None): self.value = value self.next = next def estimate_average(head: ListNode, n: int, k: int) -> float: if n == 0 or k == 0 or k > n: return 0.0 # Calculate the initial sum for the first window of length k current = head window_sum = 0 for _ in range(k): window_sum += current.value current = current.next total_sum = window_sum count = 1 start = head end = head for _ in range(k - 1): end = end.next # Sliding window to calculate sum of other sublists for _ in range(n - 1): window_sum = window_sum - start.value + end.next.value total_sum += window_sum start = start.next end = end.next count += 1 return total_sum / count"},{"question":"You are working on a small text-based grid game. The grid is a two-dimensional array where each cell can be one of three types: - Empty (\'.\') - Obstacle (\'#\') - Target (\'T\') Your goal is to determine the minimum number of steps required to move from a starting position to a target position. You can move in four directions: up, down, left, or right. You cannot move into cells with obstacles, and you cannot move outside the grid. Write a function `min_steps_to_target` which takes the following parameters: - A 2D list `grid` representing the grid. - A tuple `(start_x, start_y)` representing the starting position in the grid. - A tuple `(target_x, target_y)` representing the target position in the grid. Return an integer representing the minimum number of steps required to reach the target from the start. If the target cannot be reached, return -1. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. - The next `n` lines, each containing a string of length `m`, represent the grid. - The last two lines contain the coordinates of the starting position and the target position. Each coordinate consists of two integers `x` and `y` (0 ≤ x < n, 0 ≤ y < m). # Output - Print a single integer representing the minimum number of steps required to reach the target from the start. If the target cannot be reached, print -1. # Example Input: ``` 5 5 ..... .#... ..... ...T. ..... 0 0 3 3 ``` Output: ``` 6 ```","solution":"from collections import deque def min_steps_to_target(grid, start, target): Returns the minimum number of steps required to move from start position to target position in the 2D grid. n = len(grid) m = len(grid[0]) start_x, start_y = start target_x, target_y = target if grid[start_x][start_y] == \'#\' or grid[target_x][target_y] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(start_x, start_y, 0)]) while queue: x, y, steps = queue.popleft() if x == target_x and y == target_y: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] != \'#\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1"},{"question":"The city of Hexaville is built on a unique hexagonal grid system. The city officials want to construct a new subway line that connects different sectors of the city. A subway line is considered valid if it connects two distinct sectors directly. Each sector is represented by a hexagonal cell, and connected sectors share a common edge. Given the coordinates of two sectors in the hexagonal grid, your task is to determine whether a valid subway line can be constructed between them. The coordinates are given as (x, y) pairs, where x and y are integers representing the position of the sector in the grid. The coordinate system is based on the axial coordinates system for hexagonal grids. # Input The input consists of two lines. Each line contains a pair of integers `(x y)`, representing the coordinates of the two sectors. # Output If a valid subway line can be constructed between the two sectors, print \\"YES\\". Otherwise, print \\"NO\\". # Constraints - The coordinates `(x, y)` are integers such that `-10^3 ≤ x, y ≤ 10^3`. # Example Input ``` 0 0 1 -1 ``` Output ``` YES ``` Input ``` 0 0 2 1 ``` Output ``` NO ``` # Note - In the hexagonal grid, each sector can have up to six neighbors. For a sector at (x, y), its neighbors are located at: - (x+1, y) - (x-1, y) - (x, y+1) - (x, y-1) - (x+1, y-1) - (x-1, y+1)","solution":"def is_valid_subway_line(x1, y1, x2, y2): Determines if a subway line can be constructed between two sectors in a hexagonal grid. Args: x1, y1: Coordinates of the first sector. x2, y2: Coordinates of the second sector. Returns: \\"YES\\" or \\"NO\\" indicating if the two sectors are directly connected. # Check if the second sector is a direct neighbor of the first sector if (x2, y2) in [(x1+1, y1), (x1-1, y1), (x1, y1+1), (x1, y1-1), (x1+1, y1-1), (x1-1, y1+1)]: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an ordered list of n unique positive integers, representing the sizes of boxes. The boxes can be nested if and only if one box can completely fit into another, which in mathematical terms means that for any two boxes a and b, box a can fit into box b if the size of a is less than the size of b. Your task is to determine the maximum number of boxes that can be nested together. Write a function that receives one parameter: * n - an integer representing the number of boxes, * sizes - a list of n integers where each integer represents the size of a box. The function should return an integer representing the maximum number of boxes that can be nested together. # Input - The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of boxes. - The second line contains n distinct integers sizes[1], sizes[2], …, sizes[n] (1 ≤ sizes[i] ≤ 10^9), representing the sizes of the boxes. # Output The function should output a single integer representing the maximum number of boxes that can be nested. # Example Input ```plaintext 5 1 2 3 4 5 ``` Output ```plaintext 5 ``` Input ```plaintext 6 100 2 44 17 83 30 ``` Output ```plaintext 5 ``` # Explanation In the first example, all boxes can be nested into each other in the given order, so the result is 5. In the second example, the maximum nested configuration is the subset {2, 17, 30, 83, 100}. Here, the sequence of sizes allows for all boxes in this subset to be nested into the next, resulting in a maximum of 5 boxes.","solution":"def max_nested_boxes(n, sizes): Returns the maximum number of boxes that can be nested together. # Sort the sizes to ensure that boxes can be checked in increasing order sizes.sort() # In sorted order, all sizes can potentially be nested into each other return n"},{"question":"Given an input string, repeatedly remove the first and last characters if they are the same until the string becomes empty or the first and last characters are different. If the string becomes empty, print \\"Empty String\\". Otherwise, print the remaining string. For example, if the input string is \\"abccba\\", the transformation process is as follows: - First, remove \'a\' from the beginning and the end, resulting in \\"bccb\\". - Second, remove \'b\' from the beginning and the end, resulting in \\"cc\\". - Third, remove \'c\' from the beginning and the end, resulting in an empty string. In this case, the output is \\"Empty String\\". If the input string is \\"abca\\", the transformation process is as follows: - First, remove \'a\' from the beginning and the end, resulting in \\"bc\\". - Since the first and last characters are different, the process stops here, and the output is \\"bc\\". The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 1000), the input strings for the test cases. Output t lines, each containing the result of processing the corresponding input string. Example input: ``` 3 abccba abca abcde ``` Example output: ``` Empty String bc abcde ```","solution":"def process_string(s): Process the input string \'s\' by repeatedly removing the first and last characters if they are the same until the string becomes empty or the first and last characters are different. while len(s) > 1 and s[0] == s[-1]: s = s[1:-1] return \\"Empty String\\" if not s else s"},{"question":"You are given a string of lowercase English letters. Your task is to determine the maximum number of distinct vowels that can appear in any contiguous substring of length k. If the length of the provided string is less than k, output 0. The first line of the input contains a string s consisting of lowercase English letters. The second line contains an integer k, the length of the substring, such that 1 ≤ k ≤ 100. Output a single integer, the maximum number of distinct vowels that can appear in any contiguous substring of length k in the given string. The vowels are \'a\', \'e\', \'i\', \'o\', \'u\'. **Examples:** Input: ``` abeeeioou 3 ``` Output: ``` 3 ``` Input: ``` hello 1 ``` Output: ``` 1 ``` Input: ``` xyz 5 ``` Output: ``` 0 ``` In the first example, the substring \\"eei\\" contains 3 distinct vowels. In the second example, the substrings \\"e\\", \\"o\\" each contain 1 distinct vowel. In the third example, the length of k is greater than the length of the string, so the output is 0.","solution":"def max_distinct_vowels(s: str, k: int) -> int: Determines the maximum number of distinct vowels that can appear in any contiguous substring of length k. :param s: input string consisting of lowercase English letters :param k: length of the substring :return: maximum number of distinct vowels in any contiguous substring of length k if len(s) < k: return 0 vowels = set(\'aeiou\') max_distinct = 0 for i in range(len(s) - k + 1): substring = s[i:i + k] distinct_vowels = set(c for c in substring if c in vowels) max_distinct = max(max_distinct, len(distinct_vowels)) return max_distinct"},{"question":"A robot is programmed to navigate a grid of size n times m, where each cell can be either an empty cell (\'.\') or a blocked cell (\'#\'). The robot starts at the top-left corner of the grid at cell (1, 1) and needs to reach the bottom-right corner at cell (n, m). The robot can only move right or down from any cell. Your task is to determine if there is a path for the robot from the start to the destination, and if so, calculate the number of distinct shortest paths the robot can take to reach from the start to the destination. # Input The input consists of: 1. Two integers n and m (1 le n, m le 1000), the dimensions of the grid. 2. n lines, each containing m characters, representing the grid, where \'.\' indicates an empty cell and \'#\' indicates a blocked cell. # Output Print a single integer which is the number of distinct shortest paths from the top-left corner to the bottom-right corner modulo 10^9 + 7. If there is no such path, print 0. # Example Input 1: ``` 3 3 ... .#. ... ``` Output 1: ``` 2 ``` Input 2: ``` 3 3 ... # ... ``` Output 2: ``` 0 ``` # Explanation: In the first example, the robot has two distinct shortest paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, there is no path since the middle row is blocked. # Notes: - Consider using dynamic programming to solve this problem.","solution":"MOD = 10**9 + 7 def number_of_paths(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[-1][-1]"},{"question":"A robot is navigating in a 2D grid and starts at position (0, 0). The robot can receive a string of commands, where each command tells the robot to move one unit in one of four directions: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. Your task is to determine whether the robot returns to the original starting position after executing all of its commands. The first and only input line contains a string with no more than 1000 characters consisting only of the characters \'U\', \'D\', \'L\', and \'R\'. Print \\"YES\\" if the robot returns to the starting position, and \\"NO\\" otherwise. For example, given the input \\"UDLR\\", the robot first moves up, then down, then left, and finally right, returning to the starting position, so the output should be \\"YES\\". Given the input \\"UUDD\\", the robot moves up twice and down twice, also returning to the starting position, so the output should be \\"YES\\". However, given the input \\"UUDR\\", the robot does not return to the starting position, so the output should be \\"NO\\".","solution":"def robot_return_to_origin(commands): Determines if the robot returns to the original starting position after executing all commands. :param commands: str, commands consisting of \'U\', \'D\', \'L\', \'R\' :return: str, \\"YES\\" if the robot returns to the starting position, \\"NO\\" otherwise x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"You are a software engineer tasked with optimizing the storage usage of a company\'s data logging system. The system logs data from multiple sensors periodically, and the logs are stored in a fixed-size ring buffer. The ring buffer operates on a first-in, first-out basis, meaning that once the buffer is full, the oldest data is overwritten by the new data. The company wants to ensure that the buffer can store at least the last T seconds of data without being overwritten. Each log entry contains the timestamp of the entry and the data from a sensor. You need to calculate the minimum number of entries the ring buffer should be able to hold to satisfy this requirement. Write a program that reads the timestamps of the log entries and determines the minimum buffer size required to store at least T seconds of data. The input format is as follows: - The first line contains an integer N which represents the number of log entries (1 ≤ N ≤ 10^5). - The second line contains an integer T which represents the minimum number of seconds the buffer should store (1 ≤ T ≤ 10^9). - The third line contains N integers separated by spaces, representing the timestamps of the log entries in order (1 ≤ timestamp_i ≤ 10^9). Output the minimum number of entries the ring buffer should be able to hold. # Example Input: ``` 6 10 1 3 7 8 12 17 ``` Output: ``` 4 ``` # Explanation: The buffer should be able to store at least 10 seconds of the data. The log entries cover the following time intervals: - From 1 to 3 (2 seconds) - From 3 to 7 (4 seconds) - From 7 to 8 (1 second) - From 8 to 12 (4 seconds) - From 12 to 17 (5 seconds) The minimum buffer size that can store at least 10 seconds of data can hold the last 4 entries [8, 12, 17]. Thus, we need the buffer to store at least 4 entries to satisfy the requirement.","solution":"def min_buffer_size(N, T, timestamps): Calculates the minimum number of entries the ring buffer should be able to hold to store at least T seconds of data without being overwritten. Parameters: N (int): The number of log entries. T (int): The minimum number of seconds the buffer should store. timestamps (list): The list of timestamps of the log entries. Returns: int: Minimum number of entries the buffer should be able to hold. min_size = float(\'inf\') for i in range(N): for j in range(i, N): if timestamps[j] - timestamps[i] >= T: min_size = min(min_size, j - i + 1) break # If we didn\'t find any interval spanning T seconds, then we need the entire array return min_size if min_size != float(\'inf\') else N"},{"question":"In a given array of integers, you need to find the number of \\"peak\\" elements. A peak element is defined as an element that is greater than its neighbors. For the elements at the edges of the array, consider only the one neighbor they have. Write a function to determine the count of peak elements in the array. The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the array elements. The output should be a single integer — the total count of peak elements in the array. For example: - Input: 5 1 3 2 5 4 Output: 2 - Input: 3 1 3 1 Output: 1 - Input: 4 2 2 2 2 Output: 0","solution":"def count_peaks(n, array): Returns the number of peak elements in the array. A peak element is greater than its neighbors. Consider only one neighbor for edge elements. Parameters: n (int): Number of elements in the array. array (list): List of integers representing the array. Returns: int: Count of peak elements in the array. if n == 1: return 1 peaks = 0 for i in range(n): if i == 0: if array[i] > array[i + 1]: peaks += 1 elif i == n - 1: if array[i] > array[i - 1]: peaks += 1 else: if array[i] > array[i - 1] and array[i] > array[i + 1]: peaks += 1 return peaks"},{"question":"Sophia is organizing a company event and needs to arrange seating for all the employees. Each table can seat `k` employees. She wants to make sure that everyone is seated comfortably, and no table should have more than `k` employees. However, she also wants to minimize the number of tables used because the venue space is limited. Given the number of employees `n` and the seating capacity of each table `k`, determine the minimum number of tables required to seat all employees. The first line contains two space-separated integers `n` and `k` (1 ≤ `n`, `k` ≤ 10^6) — the number of employees and the seating capacity of each table, respectively. Print a single integer — the minimum number of tables needed to seat all employees. Example: Input: 20 6 Output: 4 In this example, there are 20 employees and each table can seat 6 employees, so Sophia needs 4 tables to seat everyone comfortably.","solution":"import math def minimum_tables(n, k): Returns the minimum number of tables required to seat n employees with each table having a capacity of k employees. :param n: Number of employees :param k: Seating capacity per table :return: Minimum number of tables required return math.ceil(n / k)"},{"question":"A palindrome is a string that reads the same forward and backward, for example: \\"madam\\", \\"racecar\\", and \\"level\\". Given a string s, we want to find out the minimum number of additions required to make the entire string a palindrome. In this context, an \\"addition\\" means inserting a single character anywhere in the string (including the start, middle, or end). For example: - For the string \\"ab\\" we need 1 addition: \\"aba\\". - For the string \\"race\\" we need 3 additions: \\"ecarace\\". - For the string \\"a\\" we need 0 additions, as it\'s already a palindrome. Write a function to calculate the minimum number of additions required to turn a given non-empty string s into a palindrome. **Input**: - A single line containing the string s (1 ≤ |s| ≤ 1000) **Output**: - Output the minimum number of character additions needed to make the string a palindrome. **Sample Input 1**: ``` ab ``` **Sample Output 1**: ``` 1 ``` **Sample Input 2**: ``` race ``` **Sample Output 2**: ``` 3 ``` **Sample Input 3**: ``` a ``` **Sample Output 3**: ``` 0 ```","solution":"def min_additions_to_palindrome(s): Returns the minimum number of additions required to make the string s a palindrome. def is_palindrome(st): return st == st[::-1] if is_palindrome(s): return 0 for i in range(len(s)): if is_palindrome(s[i:]): return i return len(s) - 1"},{"question":"In a small town, there are n houses arranged in a straight line. Each house is painted with one of three colors: red, blue, or green. The neighborhood association has decided that no two adjacent houses can share the same color. They want to repaint the houses such that this rule is respected. Given the cost for each house to be painted in each of the three colors, determine the minimum cost to paint all the houses under the constraint that no two adjacent houses can have the same color. The input consists of n houses, and each house has three associated costs: cost red, cost blue, and cost green. The input format is as follows: - The first line contains an integer n (1 ≤ n ≤ 100), the number of houses. - The next n lines each contain three integers, representing the painting costs for the house in red, blue, and green respectively. The output should be a single integer, the minimum cost to repaint all the houses according to the rules. Example input: ``` 3 17 2 17 16 16 5 14 3 19 ``` Example output: ``` 10 ``` Explanation: Paint the first house with blue, the second house with green, and the third house with blue for a total cost of 2 + 5 + 3 = 10.","solution":"def min_cost_to_paint_houses(costs): if not costs: return 0 n = len(costs) dp = costs[0] # Initialize the first house\'s cost for i in range(1, n): current_cost = costs[i] # Calculate the minimum cost for each color for the current house current_cost_red = current_cost[0] + min(dp[1], dp[2]) current_cost_blue = current_cost[1] + min(dp[0], dp[2]) current_cost_green = current_cost[2] + min(dp[0], dp[1]) # Update dp to reflect the current house\'s minimum costs dp = [current_cost_red, current_cost_blue, current_cost_green] # The answer will be the minimum cost of painting the last house with any color return min(dp)"},{"question":"Given a string of lowercase Latin letters, you need to determine if you can make it a palindrome by rearranging its characters. If it is possible, print \\"YES\\", otherwise print \\"NO\\". A string is called a palindrome if it reads the same forward and backward (e.g., \\"madam\\" or \\"aabbcbbaa\\"). The input consists of a single line containing a string s (1 ≤ |s| ≤ 100000). Output \\"YES\\" if you can rearrange the characters of the string s to make it a palindrome. Otherwise, print \\"NO\\". Ensure the solution processes efficiently within the given constraints. For example: Input: carrace Output: YES Here, the string \\"carrace\\" can be rearranged to form the palindrome \\"racecar\\", thus the output is \\"YES\\". Another example: Input: hello Output: NO Here, the string \\"hello\\" cannot be rearranged to form any palindrome, thus the output is \\"NO\\".","solution":"def can_form_palindrome(s: str) -> str: Determines if a given string can be rearranged to form a palindrome. Returns \\"YES\\" if it\'s possible, otherwise \\"NO\\". from collections import Counter count = Counter(s) odd_count = sum(1 for freq in count.values() if freq % 2 != 0) # A string can form a palindrome if at most one character has an odd count if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Vika loves puzzles and has decided to create one. She has a board with dimensions n times n (where n is always odd), and she wants to place numbers on it following these rules: 1. Each cell should contain an integer from 1 to n^2 inclusive, and each number should appear exactly once. 2. The sum of the numbers in the diagonals (both the main diagonal and the anti-diagonal) should be the same. The main diagonal consists of cells where the row and column are the same, and the anti-diagonal consists of cells where the row and column indices sum to n+1. Write a program to generate one possible arrangement of the numbers that follows these rules. **Input**: - The single line contains a single odd integer n (1 le n le 101). **Output**: - Output the board of dimensions n times n, where each cell contains an integer between 1 and n^2 inclusive with no repetition, such that the sums of the numbers in the main diagonal and the anti-diagonal are the same. **Example**: Input: 3 Output: 6 1 8 7 5 3 2 9 4 In this example, the sum of the numbers in the main diagonal (6 + 5 + 4) is 15 and the sum of the numbers in the anti-diagonal (8 + 5 + 2) is also 15.","solution":"def generate_magic_square(n): Generates an n x n magic square for an odd integer n. :param n: An odd integer, `1 <= n <= 101`. :return: A 2D list representing the n x n magic square. magic_square = [[0] * n for _ in range(n)] num = 1 i, j = 0, n // 2 while num <= n * n: magic_square[i][j] = num num += 1 new_i, new_j = (i - 1) % n, (j + 1) % n if magic_square[new_i][new_j]: i = (i + 1) % n else: i, j = new_i, new_j return magic_square def print_magic_square(square): for row in square: print(\\" \\".join(map(str, row)))"},{"question":"Given an array of n integers where each integer represents the height of a building in a row, determine the maximum rectangular area that can be formed between the buildings, where the width of the rectangle is measured in contiguous buildings and the height is determined by the shortest building in the selected range. Assume the array represents the skyline of a city, and the buildings are contiguous. # Input - The first line contains an integer n (1 leq n leq 10^5) – the number of buildings. - The second line contains n integers h_1, h_2, ..., h_n (1 leq h_i leq 10^6) – the heights of the buildings. # Output - Output a single integer – the maximum rectangular area that can be formed between the buildings. # Examples Example 1 **Input:** ``` 6 2 1 5 6 2 3 ``` **Output:** ``` 10 ``` Example 2 **Input:** ``` 4 3 1 3 2 ``` **Output:** ``` 4 ``` # Note In the first example, the maximum rectangular area is formed between the third and fourth building (both of height 5 and 6 respectively), resulting in an area of 2 times 5 = 10. In the second example, the largest rectangle spans the first and third buildings with height 3 forming a rectangle of area 3 times 1 = 3, but the largest single building rectangle is the last building of height 2 with area of 2 times 2 = 4. This problem challenges your understanding of array manipulation and optimal subarray calculations. Consider leveraging data structures like stacks to efficiently solve the problem.","solution":"def max_rect_area(heights): Returns the maximum rectangular area that can be formed between the buildings given their heights. n = len(heights) stack = [] max_area = 0 for i in range(n): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) while stack: h = heights[stack.pop()] w = n if not stack else n - stack[-1] - 1 max_area = max(max_area, h * w) return max_area"},{"question":"In a small town, there is a unique tradition during their local festival where children create bracelets from beads. Each bracelet represents a binary pattern where white beads are denoted by 1 and black beads are denoted by 0. According to the tradition, a bracelet is considered highly valuable if it contains at least one contiguous subsequence that has more 1\'s than 0\'s. You are given a binary string `b` representing the beads on the bracelet. You need to determine if the bracelet is highly valuable according to the town\'s tradition. Write a function `is_highly_valuable(b)` that takes a binary string `b` as input and returns a boolean value - `True` if the bracelet is highly valuable and `False` otherwise. # Input - A single line string `b` of length up to 10^5, consisting of characters \'0\' and \'1\'. # Output - A boolean value `True` if the bracelet is highly valuable, otherwise `False`. # Examples **Example 1:** ```python is_highly_valuable(\\"110\\") ``` **Output:** ```python True ``` **Example 2:** ```python is_highly_valuable(\\"00000\\") ``` **Output:** ```python False ``` **Example 3:** ```python is_highly_valuable(\\"10101\\") ``` **Output:** ```python True ```","solution":"def is_highly_valuable(b): Determines if the bracelet (binary string) is highly valuable according to the town\'s tradition. Args: b (str): A binary string representing the beads on the bracelet. Returns: bool: True if the bracelet is highly valuable, False otherwise. count_1 = 0 count_0 = 0 for char in b: if char == \'1\': count_1 += 1 else: count_0 += 1 if count_1 > count_0: return True return False"},{"question":"In a distant magical land, there lies a forest enchanted by an ancient spell. The forest consists of a long, narrow pathway represented as a string of characters, where each character can be either \'.\' (an empty space) or \'*\' (a magical obstacle). The only warrior who can traverse this forest is equipped with a limited number of special scrolls. Each scroll can turn one magical obstacle \'*\' into an empty space \'.\', making it possible for the warrior to pass through. The warrior\'s objective is to convert the minimum number of \'*\' into \'.\' so that the warrior can traverse from the beginning of the path to the end without encountering any magical obstacles. The forest pathway is provided as a string on the first line, and the second line contains an integer representing the number of special scrolls available. The length of the string pathway does not exceed 100,000 characters. The number of special scrolls is non-negative and does not exceed 100,000. The warrior starts at the leftmost character of the string and needs to move to the rightmost character of the string. Determine if it is possible for the warrior to traverse from the start to the end of the pathway using the given number of scrolls. If it is possible, print the minimum number of scrolls used; otherwise, print \\"Impossible\\". Example: Input: ...*..*....*.....* 3 Output: 2 In this example, the pathway can be modified to the following ..*...*...*.....* using two scrolls, allowing the warrior to traverse the forest from start to end.","solution":"def minimum_scrolls_to_traverse(pathway, max_scrolls): Determines if it\'s possible to traverse the pathway using at most max_scrolls scrolls. Returns the minimum number of scrolls used if possible, otherwise \\"Impossible\\". obstacles = pathway.count(\'*\') if obstacles <= max_scrolls: return obstacles return \\"Impossible\\""},{"question":"You are given a string of lowercase English letters, and you need to determine the minimum number of steps to make the string a palindrome. In one step, you can change any single character in the string to any other lowercase English letter. A string is called a palindrome if it reads the same backward as forward, for example, \\"madam\\" or \\"racecar\\". Write a function that computes the minimum number of steps required to make the given string a palindrome. # Input - A single string `s` of lowercase English letters (1 ≤ |s| ≤ 100). # Output - A single integer representing the minimum number of steps to make the string a palindrome. # Examples **Example 1:** Input: ``` abc ``` Output: ``` 1 ``` Explanation: By changing \'c\' to \'b\', the string becomes \\"aba\\", which is a palindrome. **Example 2:** Input: ``` aab ``` Output: ``` 1 ``` Explanation: By changing \'b\' to \'a\', the string becomes \\"aaa\\", which is a palindrome. **Example 3:** Input: ``` race ``` Output: ``` 2 ``` Explanation: By changing \'r\' to \'e\' and \'c\' to \'a\', the string becomes \\"eaae\\", which is a palindrome. # Note The function signature for the function could be: `int minStepsToPalindrome(string s)`.","solution":"def minStepsToPalindrome(s): Computes the minimum number of steps required to make a given string a palindrome. Parameters: s (str): The input string of lowercase English letters. Returns: int: The minimum number of steps to make the string a palindrome. n = len(s) steps = 0 # Compare characters from both ends towards the center for i in range(n // 2): if s[i] != s[n - i - 1]: steps += 1 return steps"},{"question":"You are given an n x m grid representing a field. Some cells of the grid contain water (\'W\'), and other cells contain land (\'L\'). A cluster of land is a group of adjacent land cells connected horizontally or vertically. Your task is to find the number of clusters of land in the grid. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid, respectively. Each of the next n lines contains a string of length m consisting of characters \'W\' and \'L\' denoting water and land cells, respectively. Output a single integer — the number of land clusters in the grid. # Example: ``` Input: 4 5 LLWWL LWWLL WWWLL LWLLW Output: 3 ``` In this example, the clusters of land are as follows: 1. The first cluster includes cells (1,1) and (1,2). 2. The second cluster includes cells (2,4), (2,5), and (3,4), (3,5). 3. The third cluster includes cells (4,2), (4,3). The grid should be processed using a suitable algorithm, such as Depth First Search (DFS) or Breadth First Search (BFS), to count the number of clusters.","solution":"def count_land_clusters(n, m, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'W\': return grid[x][y] = \'W\' # Mark as visited by changing \'L\' to \'W\' # Move in all four possible directions dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) clusters = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\': dfs(i, j) clusters += 1 return clusters"},{"question":"Leo loves constructing buildings and has recently acquired a plot to build n skyscrapers lined up in a row. Each skyscraper has a predefined height, which he cannot change. However, due to aesthetic reasons, Leo wants the heights of these skyscrapers to form a non-decreasing sequence when viewed from left to right. To achieve this, Leo can perform a series of operations where he removes a specific number of consecutive skyscrapers in the row and builds new ones with arbitrary heights in their place. He wants to minimize the number of skyscrapers that he needs to remove and rebuild to create the desired sequence. Can you help him determine the minimum number of skyscrapers that need to be replaced? The first line of input contains an integer n (1 ≤ n ≤ 5000), the number of skyscrapers. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), the heights of the skyscrapers in their initial order. Output a single integer — the minimum number of skyscrapers that need to be replaced. **Input:** ``` 5 5 3 4 8 6 ``` **Output:** ``` 2 ``` **Explanation:** In this case, Leo can replace the skyscrapers with heights [5, 3] with new skyscrapers of heights [3, 5] to form the sequence [3, 5, 4, 8, 6]. Then he can replace the skyscraper with height [6] with a new skyscraper of height [8] to form the final sequence [3, 5, 4, 8, 8]. Alternatively, he can replace the skyscrapers with heights [3, 4, 8, 6] with new skyscrapers so that the sequence directly becomes [5, 8, 8, 8, 8]. In both cases, the minimum number to replace is 2.","solution":"def min_replacements_to_non_decreasing(n, heights): Returns the minimum number of skyscrapers that need to be replaced to form a non-decreasing sequence from left to right. def lis_length(arr): Helper function to calculate the length of the longest increasing subsequence (LIS) in an array. if not arr: return 0 lis = [arr[0]] for num in arr[1:]: if num >= lis[-1]: lis.append(num) else: left, right = 0, len(lis) - 1 while left < right: mid = (left + right) // 2 if lis[mid] <= num: left = mid + 1 else: right = mid lis[right] = num return len(lis) # The longest non-decreasing subsequence (LNDS) length lnds_length = lis_length(heights) # The minimum number of elements to replace is the difference # between the total number of elements and the length of the LNDS. return n - lnds_length"},{"question":"A software development company wants to monitor the performance of its applications by analyzing the logs from their servers. Each log entry contains a timestamp and the duration of the process in milliseconds. The company wants to determine the maximum number of concurrently running processes at any point in time based on the provided logs. Each log entry is represented by a start time and an end time (inclusive). You are required to find and return the maximum number of overlapping log entries. The first line contains a single integer n (1 le n le 100,000) — the number of log entries. The next n lines contain two space-separated integers start_i and end_i (0 le start_i le end_i le 10^9) — the start and end times of the log entries. Print a single integer — the maximum number of concurrently running processes. # Example **Input** ``` 5 1 5 2 6 1 3 4 8 5 7 ``` **Output** ``` 4 ``` **Explanation** The log entries can be visualized as intervals: - (1, 5) - (2, 6) - (1, 3) - (4, 8) - (5, 7) The maximum overlap happens with 4 concurrent processes between time 4 and 5.","solution":"def max_concurrent_processes(n, logs): events = [] for start, end in logs: events.append((start, \'start\')) events.append((end + 1, \'end\')) events.sort() max_concurrent = 0 current_concurrent = 0 for time, event in events: if event == \'start\': current_concurrent += 1 max_concurrent = max(max_concurrent, current_concurrent) else: current_concurrent -= 1 return max_concurrent"},{"question":"Sheldon Cooper is planning a grand \\"Bazinga!\\" event. He needs your help to identify the largest subset of his witty comments. He has a list of comments, each represented by a pair of integers (s, e) that denote the start time and end time (exclusive) of the comment\'s broadcast. The goal is to select the largest subset of these comments such that no two comments overlap. You are given an integer n (1 ≤ n ≤ 10^5), the number of witty comments. The next n lines each contain two integers si and ei (1 ≤ si < ei ≤ 10^9), the start and end times of the comments respectively. Write a program to determine the largest number of non-overlapping comments Sheldon can broadcast. Input: - The first line contains a single integer n. - Each of the next n lines contains two integers si and ei, representing the start and end times of a comment. Output: - Print an integer representing the largest number of non-overlapping comments. Example: Input: 5 1 3 2 4 3 5 6 8 7 9 Output: 3 Explanation: The largest subset of non-overlapping comments can be (1, 3), (3, 5), and (6, 8) or (1, 3), (3, 5), and (7, 9). Both give a maximum of 3 non-overlapping comments.","solution":"def max_non_overlapping_comments(n, intervals): Determine the maximum number of non-overlapping comments. Args: n : int : Number of comments intervals : list of tuples : Each tuple contains the start and end time of a comment Returns: int : Maximum number of non-overlapping comments # Sort the intervals by their end time intervals.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping intervals count = 0 # Initialize the end time of the last included interval last_end_time = 0 # Iterate through each interval for interval in intervals: # If the start time of the current interval is >= last_end_time, # it means it does not overlap with the previous selected interval if interval[0] >= last_end_time: # Increment the count and update the last_end_time count += 1 last_end_time = interval[1] return count"},{"question":"You are given a matrix of integers where each entry represents the height of the terrain at that cell. The matrix has dimensions n times m (1 le n, m le 100). You need to simulate water flow, which starts from any cell in the top row and moves downward. The water can only flow from one cell to another if the height of the destination cell is less than or equal to the height of the current cell. The task is to determine if there exists at least one path for the water to flow from any cell in the top row to any cell in the bottom row. **Input:** - The first line contains two integers n and m — the number of rows and columns in the matrix. - The next n lines each contain m integers — the height of the terrain at each cell. **Output:** - Print \\"texttt{YES}\\" if there is at least one path for the water to flow from the top row to the bottom row, otherwise print \\"texttt{NO}\\". **Example:** **Input:** ``` 3 3 1 2 3 2 3 2 3 1 1 ``` **Output:** ``` YES ``` In this example, water can flow from cell (0, 1) through (1, 1) to cell (2, 1). **Explanation of the example:** - From the first row, water can start from cell (0, 1) and flow down to (1, 1) and then to (2, 1), forming a valid path. **Note:** The water can move to adjacent cells horizontally, vertically but not diagonally.","solution":"def can_water_flow(matrix): Determinates if water can flow from any cell in the top row to any cell in the bottom row. if not matrix: return \\"NO\\" n = len(matrix) m = len(matrix[0]) def dfs(i, j, visited): if i == n-1: return True if (i, j) in visited: return False visited.add((i, j)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and matrix[ni][nj] <= matrix[i][j]: if dfs(ni, nj, visited): return True return False for j in range(m): if dfs(0, j, set()): return \\"YES\\" return \\"NO\\""},{"question":"You are tasked with implementing a system to manage a list of students enrolled in a university. Each student is identified by a unique student ID and is associated with a name and a list of courses they are enrolled in. Write a program that allows adding new students, enrolling students in courses, and querying the student information by their ID. The program should support the following operations: 1. Add a new student: Given a unique student ID and a name, add the student to the system. 2. Enroll a student in a course: Given a student ID and a course name, enroll the student in the course. 3. Query student information: Given a student ID, output the student\'s name and the list of courses they are enrolled in. # Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of operations to be performed. Each of the following n lines contains a command, which can be one of the following three: - \\"add <studentID> <name>\\" — Adds a new student with the given ID and name to the system. - \\"enroll <studentID> <course>\\" — Enrolls the student with the given ID in the specified course. - \\"query <studentID>\\" — Outputs the student\'s name followed by the list of courses they are enrolled in, separated by spaces. # Output For each \\"query\\" operation, output the name of the student followed by the list of courses they are enrolled in, separated by spaces. If the student ID does not exist, output \\"Student not found\\". # Example Input: ``` 6 add 1 Alice add 2 Bob enroll 1 Math enroll 2 Physics query 1 query 2 ``` Output: ``` Alice Math Bob Physics ``` Write the complete code to implement this system.","solution":"class University: def __init__(self): self.students = {} def add_student(self, student_id, name): if student_id not in self.students: self.students[student_id] = {\'name\': name, \'courses\': []} def enroll_student(self, student_id, course): if student_id in self.students: self.students[student_id][\'courses\'].append(course) def query_student(self, student_id): if student_id in self.students: student = self.students[student_id] return f\'{student[\\"name\\"]} {\\" \\".join(student[\\"courses\\"])}\' else: return \'Student not found\' def process_commands(n, commands): university = University() results = [] for command in commands: parts = command.split() if parts[0] == \'add\': student_id = parts[1] name = \' \'.join(parts[2:]) university.add_student(student_id, name) elif parts[0] == \'enroll\': student_id = parts[1] course = \' \'.join(parts[2:]) university.enroll_student(student_id, course) elif parts[0] == \'query\': student_id = parts[1] result = university.query_student(student_id) results.append(result) return results"},{"question":"You are given an array of integers nums of length n. Your task is to find the minimum length of a contiguous subarray [nums[l], nums[l+1], ..., nums[r]] of which the sum is greater than or equal to a given integer target. If such a subarray doesn\'t exist, return 0 instead. The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains two integers n (1 le n le 10^5) and target (1 le target le 10^9). The second line of each test case contains n integers nums_1, nums_2, dots, nums_n (1 le nums_i le 10^4) — the elements of the array. For each test case, print the minimum length of a contiguous subarray of which the sum is greater than or equal to target. If such a subarray doesn\'t exist, return 0. Example: ``` Input: 2 6 7 2 3 1 2 4 3 4 15 1 2 3 4 Output: 2 0 ``` Explanation: - In the first test case, the shortest subarray with a sum of at least 7 is [4, 3] with length 2. - In the second test case, no subarray sums up to 15 or more, so the output is 0.","solution":"def min_subarray_length(nums, target): Returns the minimum length of a contiguous subarray with a sum greater than or equal to target. n = len(nums) min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += nums[right] while current_sum >= target: min_length = min(min_length, right - left + 1) current_sum -= nums[left] left += 1 return min_length if min_length != float(\'inf\') else 0 def find_min_subarray_lengths(test_cases): results = [] for n, target, nums in test_cases: results.append(min_subarray_length(nums, target)) return results"},{"question":"``` Given an array of integers arr and an integer target, find the length of the shortest contiguous subarray whose sum is greater than or equal to the target value. If no such subarray exists, return 0. Function signature: ```python def min_subarray_length(arr: List[int], target: int) -> int: ``` # Input - arr is a list of integers (1 ≤ len(arr) ≤ 10^5, -10^4 ≤ arr[i] ≤ 10^4) - target is a single integer (-10^9 ≤ target ≤ 10^9) # Output - Return an integer representing the length of the shortest contiguous subarray whose sum is greater than or equal to the target. If no such subarray exists, return 0. # Example ```python print(min_subarray_length([2, 3, 1, 2, 4, 3], 7)) # Output: 2 (The subarray [4, 3] has the minimal length) print(min_subarray_length([1, 4, 4], 8)) # Output: 2 (The subarray [4, 4] has the minimal length) print(min_subarray_length([1, 2, 3, 4, 5], 15)) # Output: 5 (The entire array sums to 15) print(min_subarray_length([1, 2, 3, 4, 5], 51)) # Output: 0 (There is no subarray with sum >= 51) ``` # Constraints - Consider the implementation constraints to ensure the function runs efficiently within the time limits. ```","solution":"from typing import List def min_subarray_length(arr: List[int], target: int) -> int: n = len(arr) left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += arr[right] while current_sum >= target: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"Given a string s consisting of lowercase English letters, determine the length of the longest substring that can be formed by reordering the letters of s where no two adjacent characters are the same. If no such substring exists, return -1. # Input - A single line containing the string s (1 <= |s| <= 10^5). # Output - Print a single integer representing the length of the longest substring that satisfies the given condition. If no such substring can be formed, print -1. # Example Input 1: aab Output 1: 3 Input 2: aaab Output 2: -1 Explanation: In the first example, the string \\"aab\\" can be rearranged to \\"aba\\" where no two adjacent characters are the same. Therefore, the length of the longest valid substring is 3. In the second example, the string \\"aaab\\" cannot be rearranged such that no two adjacent characters are the same. Therefore, the output is -1.","solution":"from collections import Counter def longest_valid_substring(s): Returns the length of the longest substring that can be formed by reordering the letters of `s` where no two adjacent characters are the same. If no such substring exists, returns -1. n = len(s) if n <= 1: return n # Count character frequencies char_count = Counter(s) max_freq = max(char_count.values()) # Check if it is possible to arrange without adjacent duplicates if max_freq > (n + 1) // 2: return -1 return n"},{"question":"You are given an array arr of integers of length n. You are allowed to perform the following operation any number of times: - Choose any two elements a and b from the array arr (a and b are not necessarily distinct). - Replace both a and b with their greatest common divisor (gcd). Your goal is to minimize the value of the elements in the array by performing the above operation. Determine the minimum possible value of the maximum element in the array after performing any number of operations. The first line of input contains a single integer t (1 leq t leq 1000) — the number of test cases. Each test case starts with an integer n (1 leq n leq 10^5) — the number of elements in the array. The sum of n over all test cases does not exceed 10^6. The second line of each test case contains n integers arr_1, arr_2, ..., arr_n (1 leq arr_i leq 10^9). For each test case, output the minimum possible value of the maximum element in the array after any number of operations. # Example **Input:** ``` 3 4 2 4 6 8 3 9 6 3 5 10 30 20 40 50 ``` **Output:** ``` 2 1 10 ``` **Explanation:** **Test case 1:** After several operations, we can transform the array to [2, 2, 2, 2]. The maximum element is 2. **Test case 2:** We can reduce the array to [1, 1, 1] using gcd operations, and hence the maximum element is 1. **Test case 3:** The gcd of the array elements will eventually be 10, so the minimum possible value of the maximum element is 10.","solution":"import math from functools import reduce def find_gcd_of_array(arr): Returns the GCD of all elements in the array. return reduce(math.gcd, arr) def min_possible_max_value(test_cases): For each test case, find the minimum possible maximum element. results = [] for arr in test_cases: results.append(find_gcd_of_array(arr)) return results"},{"question":"David is a linguist studying a unique language, which uses a combination of lowercase English letters and special symbols. He has devised a system where each sentence in this language can be broken down into smaller substrings called \\"lexemes.\\" Each lexeme follows a specific set of rules: - It starts with either a lowercase letter or a special symbol from the set {!, @, #, }. - It is followed by zero or more lowercase letters. - It ends right before another starting character of a lexeme or at the end of the sentence. For example, in the sentence \\"aabb!@ccdd\\", \\"aabb\\", \\"!\\", \\"@\\", \\"ccdd\\" are considered lexemes. David needs help to analyze these sentences and break them down into lexemes correctly. Your task is to write a function `extract_lexemes` that takes a string `sentence` and returns a list of lexemes based on the rules mentioned. # Input - A single string `sentence` of length 1 leq |sentence| leq 10^5. The string consists of lowercase English letters and special symbols {!, @, #, }. # Output - A list of lexemes extracted from the `sentence` following the given rules. # Example ```python def extract_lexemes(sentence: str) -> List[str]: # Your code here # Sample Test Case sentence = \\"aabb!ccdd\\" print(extract_lexemes(sentence)) # Output: [\\"aabb\\", \\"!\\", \\"cc\\", \\"\\", \\"dd\\"] ``` # Constraints - The `sentence` always has at least one character. - Special symbols are always used as standalone lexemes. # Notes 1. If a symbol appears consecutively, each occurrence should be treated as a separate lexeme. 2. The function should be optimized for performance to handle the upper limit of the input size efficiently.","solution":"def extract_lexemes(sentence: str) -> list: lexemes = [] current_lexeme = \\"\\" special_symbols = {\'!\', \'@\', \'#\', \'\'} for char in sentence: if char in special_symbols: if current_lexeme: lexemes.append(current_lexeme) current_lexeme = \\"\\" lexemes.append(char) elif char.islower(): current_lexeme += char if current_lexeme: lexemes.append(current_lexeme) return lexemes"},{"question":"You are given a n x n grid, where each cell has a value that represents the height at that point. You need to find the minimum possible sum of heights on a path from the top-left corner to the bottom-right corner of the grid. You can only move right or down at any point in time. # Input format The first line contains an integer n (1 ≤ n ≤ 1000) – the size of the grid. Each of the next n lines contains n integers separated by spaces, where each integer represents the height at that point in the grid. (1 ≤ height ≤ 10000) # Output format Print a single integer – the minimum possible sum of heights on a path from the top-left corner to the bottom-right corner. # Example Input ``` 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 7 ``` # Explanation The path with the minimum sum of heights is (1 → 3 → 1 → 1 → 1), which gives a total sum of 7.","solution":"def min_path_sum(grid): Returns the minimum possible sum of heights on a path from the top-left corner to the bottom-right corner of the grid. n = len(grid) if n == 0: return 0 # Create DP table to store minimum path sum dp = [[0]*n for _ in range(n)] dp[0][0] = grid[0][0] # Initialize top row (only can come from left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize left column (only can come from top) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1] def parse_input(input_text): lines = input_text.strip().split(\'n\') n = int(lines[0]) grid = [] for i in range(1, n+1): grid.append(list(map(int, lines[i].split()))) return grid def main(): import sys input_text = sys.stdin.read() grid = parse_input(input_text) print(min_path_sum(grid))"},{"question":"You are given a string S consisting of lowercase English letters. Your task is to determine the number of substrings of S which are anagrams of a given string T. A substring is defined by a starting and ending position within the string, and it should appear continuously in the original string S. Two substrings are considered anagrams if one can be transformed into the other by rearranging its characters. # Input - The first line contains the input string S (1 ≤ |S| ≤ 1000). - The second line contains the string T (1 ≤ |T| ≤ 1000). # Output - Output a single integer — the number of substrings of S which are anagrams of T. # Sample Input 1 ``` abcbac abc ``` # Sample Output 1 ``` 3 ``` # Sample Input 2 ``` aaaa aa ``` # Sample Output 2 ``` 3 ``` # Explanation - In the first sample, the anagram substrings of \\"abc\\" in \\"abcbac\\" are \\"abc\\", \\"bca\\", and \\"cab\\". - In the second sample, the anagram substrings of \\"aa\\" in \\"aaaa\\" are \\"aa\\", \\"aa\\", and \\"aa\\" (note they overlap). --- The provided string S should allow for multiple overlapping and non-overlapping substrings to be considered, thus making the problem focused on combinatorial pattern matching and string manipulation techniques.","solution":"def count_anagram_substrings(S, T): from collections import Counter count_T = Counter(T) len_T = len(T) len_S = len(S) if len_T > len_S: return 0 current_window = Counter(S[:len_T]) anagram_count = 0 if current_window == count_T: anagram_count += 1 for i in range(len_T, len_S): current_window[S[i - len_T]] -= 1 if current_window[S[i - len_T]] == 0: del current_window[S[i - len_T]] current_window[S[i]] += 1 if current_window == count_T: anagram_count += 1 return anagram_count"},{"question":"You are given a string consisting of lowercase English letters and you need to determine the minimum number of moves required to make all the characters in the string the same. In each move, you are allowed to select any single character and change it to any other character. Formally, you are given a string s consisting of n characters (1 ≤ n ≤ 100,000). You need to minimize the number of moves to make all the characters in the string identical. Print a single integer representing the minimum number of moves required. # Examples **Input:** ``` abab ``` **Output:** ``` 2 ``` **Input:** ``` aaa ``` **Output:** ``` 0 ``` # Explanation In the first example, you can change the two \'b\'s to \'a\'s or the two \'a\'s to \'b\'s, requiring 2 moves. In the second example, no moves are needed as all characters are already the same.","solution":"def min_moves_to_make_all_chars_same(s): Given a string \'s\', return the minimum number of moves required to make all characters in the string the same. # Count occurrences of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the character with maximum occurrences max_occurrences = max(char_count.values()) # The minimum moves required is the total length of the string minus the max occurrences return len(s) - max_occurrences"},{"question":"You are given a string composed of digits. We define a substring of this string as any contiguous sequence of characters that can be derived by deleting none or some number of digits from either end of the string. Additionally, we define the \\"weight\\" of a substring as the sum of its digits. Your task is to find the maximum weight of all substrings of the given string. # Input - A single line containing a string s consisting of digits. - 1 leq |s| leq 10^5. # Output - A single integer representing the maximum weight of all possible substrings of the given string. # Example Example 1: **Input:** ``` 12345 ``` **Output:** ``` 15 ``` **Explanation:** The substring with the maximum weight is the entire string itself, which is \\"12345\\" with weight 1+2+3+4+5=15. Example 2: **Input:** ``` 406 ``` **Output:** ``` 10 ``` **Explanation:** The substring with the maximum weight here is \\"406\\" with weight 4+0+6=10.","solution":"def max_weight_of_substrings(s): Function to find the maximum weight of all substrings. The maximum weight of all possible substrings of the given string is essentially the sum of all its digits because the largest substring, which is the string itself, contains the most digits. :param s: A string composed of digits :return: The maximum weight of all possible substrings return sum(int(char) for char in s)"},{"question":"Bob is organizing a marathon event in his city. To keep track of the event, he wants to create a system that can effectively manage the registrations of participants. Each participant has a unique ID and certain attributes like age and speed. Bob wants to be able to process two types of requests frequently: 1. Add a new participant with given attributes. 2. Retrieve the ID of the youngest and fastest registered participant. Each participant will be added one by one, and there will be up to 100,000 participants. You need to design an algorithm that efficiently handles both types of requests. # Input: The first line contains an integer n (1 le n le 100,000) — the number of requests. Each of the following n lines contains a request in one of the following formats: 1. `add id age speed` — Add a new participant with the given `id` (1 ≤ id ≤ 1,000,000), `age` (1 ≤ age ≤ 100), and `speed` (1 ≤ speed ≤ 1000). 2. `query` — Retrieve the ID of the youngest and fastest participant. If there are multiple participants with the same age and speed, return the smallest ID among them. # Output: For each `query` request, output the ID of the youngest and fastest registered participant. # Example: Input: ``` 5 add 1 25 300 add 2 20 400 query add 3 20 500 query ``` Output: ``` 2 3 ``` # Note: - In the first query, there are two participants. The second participant (ID: 2) has an age of 20, which makes him younger than the first participant (ID: 1) who is 25 years old. Hence, the output is 2. - In the second query, the third participant (ID: 3) is the youngest and fastest (age 20, speed 500).","solution":"import heapq class Marathon: def __init__(self): # Min-heap to keep track of the participants based on age, speed, and id self.heap = [] self.participants = set() def add(self, id, age, speed): # Add participant to the heap and the set (for fast lookup) heapq.heappush(self.heap, (age, -speed, id)) self.participants.add(id) def query(self): # Check for the valid participant from the heap (if removed earlier) while self.heap: age, speed, id = heapq.heappop(self.heap) if id in self.participants: # Push back the valid participant and return the id heapq.heappush(self.heap, (age, speed, id)) return id def process_requests(n, requests): marathon = Marathon() results = [] for request in requests: parts = request.split() if parts[0] == \\"add\\": id = int(parts[1]) age = int(parts[2]) speed = int(parts[3]) marathon.add(id, age, speed) elif parts[0] == \\"query\\": result = marathon.query() results.append(result) return results"},{"question":"Kevin loves playing with dominoes. He has an unlimited number of domino pieces, each of which has a vertical or horizontal orientation. Each domino piece covers exactly two squares on a rectangular grid. Kevin has a grid of size n x m, and wants to place domino pieces on this grid in such a way that none of the dominoes overlap and each domino perfectly covers two adjacent squares. Dominoes can be placed either horizontally or vertically within the grid, but no domino can hang off the edge of the grid. Your task is to help Kevin determine the maximum number of domino pieces that can be placed on the grid without overlapping. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. Output one integer — the maximum number of domino pieces that can be placed on the given grid. Example: ``` Input 2 3 Output 3 ``` In the example, a 2x3 grid can accommodate three dominoes placed horizontally, covering all six squares.","solution":"def max_dominoes(n, m): This function returns the maximum number of domino pieces that can be placed on a grid of size n x m. Each domino piece covers exactly two squares. return (n * m) // 2"},{"question":"A city is represented by a grid (matrix) where each cell can either be an empty plot (0), a tree (1), or a house (2). A person wants to construct a single park, which must be a rectangular sub-grid of cells of size at least 1x1. The park cannot overlap a tree or a house but must include at least one empty plot. The goal is to construct the largest possible park, measured by the total number of empty plots in the rectangular sub-grid. Given the grid representation of the city, determine the size of the largest possible park. Input will begin with two integers, R and C (1 <= R, C <= 50), the number of rows and columns of the city grid, respectively. Following this are R lines, each containing C integers, representing the city grid where 0 represents an empty plot, 1 represents a tree, and 2 represents a house. Output should be a single integer representing the area (number of empty plots) of the largest possible park that can be constructed. In the first example, the optimal solution would construct a rectangular sub-grid of size 2x3 from the given city grid. # Example: Input: ``` 4 5 0 1 0 0 0 0 0 0 1 0 1 0 2 0 0 0 0 0 0 0 ``` Output: ``` 5 ```","solution":"def largest_park_area(grid): This function takes a grid as input and returns the area of the largest rectangle containing only empty plots. :param grid: List of List of integers (0, 1, 2) representing the city grid. :returns: Integer representing the largest possible park area. R = len(grid) C = len(grid[0]) if not any(0 in row for row in grid): # If there\'s no empty plot at all return 0 height = [0] * C max_area = 0 for i in range(R): for j in range(C): if grid[i][j] == 0: height[j] += 1 else: height[j] = 0 max_area = max(max_area, largest_rect_area_histogram(height)) return max_area def largest_rect_area_histogram(heights): Helper function to find largest rectangle area in histogram. :param heights: List of integers representing heights :returns: Integer representing the largest area of rectangle stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def find_largest_park_area(R, C, grid): Wrapper function that takes in dimensions and grid and returns the size of the largest park area. :param R: Integer, number of rows :param C: Integer, number of columns :param grid: List of List of integers (0, 1, 2) :returns: Integer representing largest park area return largest_park_area(grid) # Example usage: # R = 4 # C = 5 # grid = [ # [0, 1, 0, 0, 0], # [0, 0, 0, 1, 0], # [1, 0, 2, 0, 0], # [0, 0, 0, 0, 0] # ] # The function `find_largest_park_area(R, C, grid)` should return 5 for this input."},{"question":"You are given an array of integers, and your task is to determine the length of the longest subarray where the bitwise AND of all elements is greater than zero. A subarray is defined as a contiguous section of the array, and the bitwise AND of all elements in a subarray is the result of applying the bitwise AND operation & to all the elements in that subarray. For example, given the array [12, 13, 7, 5, 9], the longest subarray where the bitwise AND of all elements is greater than zero is [12, 13], because the bitwise AND of 12 and 13 is 12 & 13 = 12, which is greater than zero. You need to output the length of such a longest subarray. If no valid subarray exists, return 0. **Input:** - The first line contains a positive integer N (1 le N le 100,000), representing the length of the input array. - The second line contains N integers (1 le a_i le 10^9), representing the elements of the array. **Output:** - Output one integer, the length of the longest subarray where the bitwise AND of all elements is greater than zero. **Example:** Input: ``` 5 12 13 7 5 9 ``` Output: ``` 2 ``` Explanation: - The longest subarray where the bitwise AND of all elements is greater than zero is [12, 13], as 12 & 13 = 12 which is greater than zero. The length of this subarray is 2. - Note that other subarrays with length 1 (e.g., [12], [13], etc.) have their bitwise AND greater than zero, but we are looking for the longest such subarray. In this case, the answer is 2.","solution":"def longest_subarray_bitwise_and_greater_than_zero(n, arr): Returns the length of the longest subarray where the bitwise AND of all elements is greater than zero. max_len = 0 current_len = 0 for num in arr: if num > 0: current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 return max_len"},{"question":"Given an array of integers `nums` and an integer `k`, write a function that determines if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and the absolute difference between `i` and `j` is at most `k`. # Input - The function receives two parameters: - `nums` (array of integers) - `k` (an integer) # Output - The function should return a boolean value (`true` or `false`): - `true` if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and the absolute difference between `i` and `j` is at most `k`. - `false` otherwise. # Constraints - The array `nums` can contain between `1` and `10^4` elements. - The elements in `nums` can be any integer between `-10^9` and `10^9`. - The integer `k` will be a non-negative integer less than or equal to `10^4`. # Example ``` Input: nums = [1,2,3,1], k = 3 Output: true Explanation: There are two 1s in the array, and the absolute difference between their indices (0 and 3) is 3, which is at most k (3). Input: nums = [1,0,1,1], k = 1 Output: true Explanation: There are multiple 1s in the array, and one pair of indices (2 and 3) has an absolute difference of 1, which is at most k (1). Input: nums = [1,2,3,1,2,3], k = 2 Output: false Explanation: The only pairs with equal elements are (0, 3) and (1, 4), but their absolute differences are greater than k. ```","solution":"def contains_nearby_duplicate(nums, k): Determines if there are two distinct indices i and j in the array such that nums[i] == nums[j] and the absolute difference between i and j is at most k. value_indices = {} for index, value in enumerate(nums): if value in value_indices: if index - value_indices[value] <= k: return True value_indices[value] = index return False"},{"question":"Given an array of integers, rotate the array to the right by k steps, where k is a non-negative integer. The first line of the input contains an integer n (1 ≤ n ≤ 10^5), representing the number of elements in the array. The second line of the input contains n space-separated integers, each of them ranging from -10^9 to 10^9, representing the elements of the array. The third line contains an integer k (0 ≤ k ≤ 10^5), representing the number of steps to rotate the array. Your task is to return the modified array after rotating it by k steps. Example: Input: 5 1 2 3 4 5 2 Output: 4 5 1 2 3","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps. Parameters: arr (list): The array of integers to rotate. k (int): The number of steps to rotate. Returns: list: The rotated array. n = len(arr) k = k % n # To handle the case when k is greater than n return arr[-k:] + arr[:-k] # Function to handle input and output processing def process_rotation(input_string): input_lines = input_string.split(\'n\') n = int(input_lines[0]) arr = list(map(int, input_lines[1].split())) k = int(input_lines[2]) return rotate_array(arr, k) # Example usage for process_rotation function input_string = \\"5n1 2 3 4 5n2\\" print(\\" \\".join(map(str, process_rotation(input_string))))"},{"question":"You are given a series of customer orders that need to be processed by a food delivery service. There are two couriers, Alice and Bob, who start at the restaurant, which is located at coordinate 0 on a number line. Each order consists of the coordinates of the delivery destinations on the same number line, which must be served in the order they come in. Alice and Bob should alternate delivering the orders starting with Alice for the first order, Bob for the second, Alice for the third, and so forth. When one is delivering an order, the other remains at the restaurant until it is their turn to deliver. Your task is to compute the total distance traveled by both couriers combined while delivering all orders in a coordinated manner. The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of delivery destinations. The second line contains n integers x1, x2, ..., xn (0 ≤ xi ≤ 10^9) representing the coordinates of the delivery destinations in the order of delivery. Output a single integer, the total distance traveled by both couriers combined after all deliveries are made. Example: Input: 3 5 2 8 Output: 20 Explanation: - Alice delivers the first order to coordinate 5 and returns to 0 (distance = 10). - Bob delivers the second order to coordinate 2 and returns to 0 (distance = 4). - Alice delivers the third order to coordinate 8 and returns to 0 (distance = 16). - Total distance = 10 + 4 + 16 = 30","solution":"def total_distance_traveled(n, orders): Returns the total distance traveled by both couriers. Parameters: n (int): Number of delivery destinations. orders (list of int): List of delivery destination coordinates. Returns: int: Total distance traveled by both couriers combined. total_distance = 0 # Loop through the orders and calculate the distance traveled for i in range(n): total_distance += 2 * abs(orders[i]) # Going to the delivery point and coming back to 0 return total_distance"},{"question":"Given an undirected graph with `n` nodes and `m` edges, and an integer `k`, you are required to determine if there exists a subset of nodes of size `k` such that the induced subgraph is a clique. A clique is a subset of nodes where every pair of nodes is connected by an edge. Input: - The first line contains three integers `n`, `m`, and `k` (`1 ≤ n ≤ 100`, `0 ≤ m ≤ min(4950, n*(n-1)/2)`, `1 ≤ k ≤ n`). - The next `m` lines each contain two integers `u` and `v` (`1 ≤ u, v ≤ n`), representing an edge between nodes `u` and `v`. There are no self-loops or multiple edges between nodes. Output: - Output `YES` if there exists a clique of size `k` in the graph, otherwise output `NO`. Example 1: ``` Input: 5 7 3 1 2 1 3 1 4 2 3 2 4 3 4 4 5 Output: YES ``` Example 2: ``` Input: 5 5 4 1 2 1 3 1 4 2 3 3 4 Output: NO ``` In this problem, you need to find if there\'s a subset of `k` nodes such that all pairs of these nodes are directly connected by edges in the graph.","solution":"from itertools import combinations def does_clique_exist(n, m, k, edges): Determine if there exists a subset of nodes of size k such that the induced subgraph is a clique. Parameters: n (int): Number of nodes in the graph. m (int): Number of edges in the graph. k (int): Required size of the clique. edges (list of tuples): List of edges in the graph where each edge is represented as a tuple (u, v). Returns: str: \'YES\' if there exists a clique of size k, otherwise \'NO\'. # Build graph adjacency matrix adj_matrix = [[0] * n for _ in range(n)] for u, v in edges: adj_matrix[u-1][v-1] = 1 adj_matrix[v-1][u-1] = 1 # Generate node combinations for nodes in combinations(range(n), k): if is_clique(nodes, adj_matrix): return \\"YES\\" return \\"NO\\" def is_clique(nodes, adj_matrix): Helper function to check if a set of nodes forms a clique. Parameters: nodes (tuple): A tuple of node indices. adj_matrix (list of list of int): Adjacency matrix of the graph. Returns: bool: True if the nodes form a clique, otherwise False. for i in range(len(nodes)): for j in range(i + 1, len(nodes)): if adj_matrix[nodes[i]][nodes[j]] == 0: return False return True"},{"question":"Given an array of integers, we need to determine if there is a subarray (contiguous elements) with a sum equal to zero. If such a subarray exists, return the indices of the first and last element of this subarray. If there are multiple subarrays with sum equal to zero, return the indices of the first occurring subarray. If no such subarray exists, return -1. # Input - An integer `n` representing the size of the array (1 ≤ n ≤ 10^5). - An array of integers `arr` of size `n` (-10^9 ≤ arr[i] ≤ 10^9). # Output - If there is a subarray with sum equal to zero, return two integers `l` and `r` denoting the start and end indices of the subarray (0-based indexing). - If there are multiple such subarrays, return the indices of the first occurring subarray. - If no such subarray exists, return -1. # Example Example 1 **Input:** ``` n = 5 arr = [1, 2, -3, 3, 1] ``` **Output:** ``` 0 2 ``` **Explanation:** The subarray from index 0 to index 2 (1, 2, -3) has a sum of 0. Example 2 **Input:** ``` n = 4 arr = [1, 2, 3, 4] ``` **Output:** ``` -1 ``` **Explanation:** There is no subarray with sum equal to 0. # Note Your solution should have a time complexity of O(n).","solution":"def find_zero_sum_subarray(n, arr): Returns the starting and ending indices of the first subarray with sum equal to zero. If no such subarray exists, returns -1. sum_indices = {} current_sum = 0 for i in range(n): current_sum += arr[i] if current_sum == 0: return (0, i) if current_sum in sum_indices: return (sum_indices[current_sum] + 1, i) sum_indices[current_sum] = i return -1"},{"question":"Given an integer n (1 ≤ n ≤ 10^5), you need to calculate the minimum number of operations needed to make the sum of the elements of the array equal to zero. In one operation, you can: 1. Decrease any element of the array by 1. 2. Increase any element of the array by 1. You are given an array of integers arr of length n. Print the minimum number of operations required to achieve the desired sum. # Input: - The first line contains a single integer n. - The second line contains n space-separated integers representing the elements of the array arr. # Output: - Print a single integer, the minimum number of operations. # Example: Input: ``` 5 -2 3 1 -5 2 ``` Output: ``` 1 ``` # Explanation: The initial sum is -1. Increase one of the -2 elements by 1 to make the sum 0, resulting in a single operation.","solution":"def min_operations_to_zero(n, arr): Returns the minimum number of operations to make the sum of the array elements equal to zero. total_sum = sum(arr) return abs(total_sum)"},{"question":"Given an undirected graph with N nodes and M edges, each node has a specific color assigned to it. You are required to determine the number of distinct colors in the largest connected component of the graph. # Input The first line contains two integers, N (1 ≤ N ≤ 100,000) and M (0 ≤ M ≤ 200,000) — the number of nodes and the number of edges, respectively. The second line contains N integers c1, c2, ..., cN where ci (1 ≤ ci ≤ 1,000,000) denotes the color of the i-th node. The next M lines each contain two integers u and v (1 ≤ u, v ≤ N, u ≠ v), representing an undirected edge between nodes u and v. # Output Output a single integer — the number of distinct colors in the largest connected component of the graph. # Example Input ``` 5 4 1 2 1 3 3 1 2 2 3 3 4 4 5 ``` Output ``` 3 ``` # Note In the example above, the largest connected component includes all nodes {1, 2, 3, 4, 5}. The colors present in this component are 1, 2, and 3, which makes the total number of distinct colors equal to 3.","solution":"from collections import defaultdict, deque def largest_component_distinct_colors(n, m, colors, edges): def bfs(start): visited = set() queue = deque([start]) component = set() while queue: node = queue.popleft() if node not in visited: visited.add(node) component.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return component # Building graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Finding all connected components all_components = [] visited = set() for node in range(1, n + 1): if node not in visited: component = bfs(node) for member in component: visited.add(member) all_components.append(component) # Find the largest connected component largest_component = max(all_components, key=len) # Counting distinct colors in the largest component color_set = set() for node in largest_component: color_set.add(colors[node - 1]) return len(color_set) # Input example n = 5 m = 4 colors = [1, 2, 1, 3, 3] edges = [(1, 2), (2, 3), (3, 4), (4, 5)] # Running function print(largest_component_distinct_colors(n, m, colors, edges)) # Output: 3"},{"question":"You are given an array of integers and a value k. Your task is to partition the array into exactly k non-empty contiguous subarrays such that the sum of the maximum elements of these subarrays is minimized. For example, let\'s assume you have the array: [10, 1, 2, 7, 5, 6] and k=3. One possible partitioning would be [10 | 1, 2, 7 | 5, 6], which gives us the subarrays [10], [1, 2, 7], and [5, 6]. The sums of the maximum elements for these subarrays are 10, 7, and 6, respectively, and their total is 23. To solve this problem, you need to consider the following constraints: - 1 ≤ n ≤ 1000, which means the array will contain at most 1000 elements. - 1 ≤ k ≤ n, which ensures that k is always less than or equal to the number of elements in the array. Input: - The first line contains an integer n, the size of the array (1 ≤ n ≤ 1000). - The second line contains n integers ai (1 ≤ ai ≤ 10000), representing the elements of the array. - The third line contains an integer k (1 ≤ k ≤ n), representing the number of partitions. Output: - Output a single integer representing the minimized sum of the maximum elements of these k subarrays. Example: Input: 6 10 1 2 7 5 6 3 Output: 18 Explanation: Possible partition: [10, 1 | 2, 7 | 5, 6] Maximum elements for these partitions are: [10, 7, 6] Sum of the maximum elements: 10 + 7 + 1 = 18","solution":"def minimize_sum_of_max_elements(arr, k): n = len(arr) # Create a dp table where dp[i][j] represents the minimized sum of the max elements # for array up to i with j partitions dp = [[float(\'inf\')] * (k + 1) for _ in range(n + 1)] # Initialize the base case: no elements, no sum dp[0][0] = 0 # Precompute the maximum element between points max_val = [[0] * n for _ in range(n)] for i in range(n): current_max = arr[i] for j in range(i, n): current_max = max(current_max, arr[j]) max_val[i][j] = current_max # Fill the DP table for i in range(1, n + 1): for j in range(1, k + 1): for x in range(1, i + 1): dp[i][j] = min(dp[i][j], dp[i - x][j - 1] + max_val[i - x][i - 1]) return dp[n][k]"},{"question":"You are given an array of integers. You need to find the integer that appears the least number of times in the array. If multiple numbers are tied for the least frequency, return the largest one among them. # Input - The first line contains an integer, n, the number of elements in the array (1 ≤ n ≤ 100). - The second line contains n integers separated by spaces, the elements of the array. # Output - Print a single integer, the element with the least frequency that is the largest among the ties. # Example Input ``` 10 4 4 1 2 2 3 7 7 6 6 ``` Output ``` 3 ``` # Explanation In the given array, the frequencies of the elements are: - 1 appears 1 time - 2 appears 2 times - 3 appears 1 time - 4 appears 2 times - 6 appears 2 times - 7 appears 2 times Among the numbers that appear the least number of times (1 time), the largest number is 3. Therefore, the output is 3.","solution":"def find_least_frequent_largest_int(arr): Finds the integer that appears the least number of times in the array. If there are multiple such numbers, returns the largest one among them. from collections import Counter count = Counter(arr) # find the minimum frequency min_frequency = min(count.values()) # filter numbers that have this minimum frequency candidates = [num for num, freq in count.items() if freq == min_frequency] # return the largest number among the candidates return max(candidates)"},{"question":"Given an array of integers, you need to calculate the length of the longest increasing subsequence (LIS). An increasing subsequence is a subsequence where each element is greater than the previous one in the sequence. The elements of the increasing subsequence do not have to be consecutive elements of the original array, but they must maintain their relative order. Let’s formalize this: You are given an array of integers arr with size n. Your task is to find the length of the longest increasing subsequence. # Input: The first line of input contains an integer n (1 le n le 2500), the size of the array. The second line contains n space-separated integers arr[i] (1 le arr[i] le 10^9), representing the elements of the array. # Output: Output a single integer - the length of the longest increasing subsequence. # Example: Input: ``` 6 10 9 2 5 3 7 101 18 ``` Output: ``` 4 ``` Explanation: The longest increasing subsequence is [2, 3, 7, 101], which has a length of 4. # Constraints: - 1 ≤ n ≤ 2500 - 1 ≤ arr[i] ≤ 10^9 # Solution Guidelines: - Consider using dynamic programming to keep track of the longest increasing subsequences at each point. - You can also consider more optimized solutions involving binary search to achieve a better time complexity.","solution":"def length_of_lis(arr): Returns the length of the longest increasing subsequence in the array. Uses dynamic programming with binary search for efficiency. if not arr: return 0 from bisect import bisect_left # Dynamic array to store the increasing subsequence values dp = [] for num in arr: pos = bisect_left(dp, num) if pos < len(dp): dp[pos] = num else: dp.append(num) return len(dp)"},{"question":"You are given a string representing a day of the week. Determine if that day is a weekday or a weekend. The input consists of a single string containing the name of one of the seven days of the week (Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, or Sunday). The string is capitalized as given here. Output a single string — \\"weekday\\" if the given day is a weekday, or \\"weekend\\" if it is a weekend. The output should be in lowercase. Note: - Weekdays are Monday through Friday. - Weekends are Saturday and Sunday.","solution":"def day_type(day: str) -> str: Determines if the given day is a weekday or weekend. Params: day (str): A string representing the day of the week. Returns: str: \'weekday\' if the input day is a weekday, \'weekend\' if it is a weekend. weekdays = {\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\"} weekends = {\\"Saturday\\", \\"Sunday\\"} if day in weekdays: return \\"weekday\\" elif day in weekends: return \\"weekend\\" else: raise ValueError(\\"Invalid input day\\")"},{"question":"You are given a list of integers a_1, a_2, dots, a_n, an integer k, and an integer x. Let g(a, k) be an operation that transforms the list a by incrementally adding x to the kth smallest distinct element in the list. For example, for list a = [3, 1, 2, 2], k = 2, and x = 5, since the 2nd smallest distinct element is 2, the transformation will change the list to a = [3, 1, 7, 7]. Write a function to apply the operation g to the list exactly k times and return the result. The first line contains an integer n (1 leq n leq 10^5), the number of elements in the list. The second line contains n integers representing the elements of the list a (1 leq a_i leq 10^9). The third line contains an integer k (1 leq k leq n). The fourth line contains an integer x (1 leq x leq 10^9). Print the modified list after applying the operation g exactly k times. # Example: Input: ``` 5 3 1 2 2 4 2 1 ``` Output: ``` 3 1 3 3 4 ```","solution":"def apply_g_operation(n, a, k, x): Applies the operation g to the list exactly k times and returns the result. Parameters: n (int): the number of elements in the list a (list of int): the elements of the list k (int): the index of the smallest distinct element (1-based) x (int): the value to add to the k-th smallest distinct element Returns: list: the modified list after applying the operation exactly k times distinct_elements = sorted(set(a)) if k > len(distinct_elements): return a kth_smallest = distinct_elements[k-1] modified_a = [] for elem in a: if elem == kth_smallest: modified_a.append(elem + x) else: modified_a.append(elem) return modified_a"},{"question":"Given a list of `n` positive integers, your task is to find the pair of integers in the list that has the maximum Greatest Common Divisor (GCD) and return the GCD value. The first line contains a single integer `n` (2 ≤ n ≤ 100), representing the number of integers in the list. The second line contains `n` space-separated positive integers (1 ≤ integer ≤ 10^5). Print a single integer — the maximum GCD of any pair of integers from the list. **Input Format:** - The first line contains a single integer n. - The second line contains n space-separated positive integers. **Output Format:** - Print a single integer, the maximum GCD of any pair of integers. **Example Input:** ``` 5 10 20 30 40 50 ``` **Example Output:** ``` 20 ```","solution":"import math def max_gcd_pair(n, numbers): Returns the maximum GCD of any pair of integers from the list. :param n: int, number of positive integers in the list :param numbers: list of int, the positive integers :return: int, the maximum GCD of any pair of integers in the list max_gcd = 0 for i in range(n): for j in range(i + 1, n): current_gcd = math.gcd(numbers[i], numbers[j]) if current_gcd > max_gcd: max_gcd = current_gcd return max_gcd"},{"question":"Given an undirected graph with n nodes and m edges, your task is to determine if the graph is bipartite. A graph is bipartite if the nodes can be divided into two disjoint sets such that every edge connects a node in one set to a node in the other set. If the graph is bipartite, output \\"Yes\\". If it is not, output \\"No\\". Each test in this problem contains multiple test cases to solve. The first line of the input contains a positive number T — the number of cases to solve. Each case starts with a line containing two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of nodes and the number of edges. The following m lines contain edges, one edge per line. Each edge is given as two integer numbers xj, yj (1 ≤ xj, yj ≤ n), which means that the j-th edge connects nodes xj and yj. There is at most one edge between any pair of nodes. Output \\"Yes\\" if the graph is bipartite, otherwise output \\"No\\". Example: Input: 2 4 4 1 2 2 3 3 4 4 1 3 3 1 2 2 3 3 1 Output: Yes No","solution":"def is_bipartite(n, edges): from collections import deque graph = {i: [] for i in range(1, n+1)} for edge in edges: u, v = edge graph[u].append(v) graph[v].append(u) color = {} def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in color: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for node in range(1, n + 1): if node not in color: if not bfs(node): return \\"No\\" return \\"Yes\\" def solve(test_cases): results = [] for n, m, edges in test_cases: result = is_bipartite(n, edges) results.append(result) return results"},{"question":"Design a program that takes a list of integers as input and finds the maximum sum of any contiguous subarray within the list. Input: A list of n integers (1 ≤ n ≤ 10^5), where each integer can range from -10^4 to 10^4. Output: A single integer representing the maximum sum of any contiguous subarray. For example, if the input list is [−2, 1, −3, 4, −1, 2, 1, −5, 4], the output should be 6, as the subarray [4, −1, 2, 1] has the maximum sum of 6.","solution":"def max_subarray_sum(nums): Finds the maximum sum of any contiguous subarray within the list. :param nums: List of integers :return: Maximum sum of any contiguous subarray if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A mountain array is defined as an array of integers which contains an increasing sequence followed by a decreasing sequence. For example, [2, 3, 5, 7, 6, 4, 1] is a mountain array but [2, 3, 5, 7, 8, 6, 4, 1] is not because the increasing sequence does not end at 7 and [2, 3, 1, 5, 7, 6, 4, 1] is not because there is an element 1 in between the increasing sequence. You are given a sequence of integers [a_1, a_2, ldots, a_n]. You have to query the maximum length of subarray which is a mountain array and the subarray contains the index specified in the query. For example, if the array is [2, 1, 4, 7, 3, 2, 5] and query is 4, the maximum length of subarray which is a mountain array containing the index 4 is 5 (i.e., subarray [1, 4, 7, 3, 2] with length 5). # Input: - The first line contains an integer, n (1 leq n leq 10^5) – the length of array. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6) – the elements of the array. - The third line contains an integer, q (1 leq q leq 10^5) – the number of queries. - Each of the next q lines contains a single integer k_i (1 leq k_i leq n) – the index to be checked. # Output: - For each query, output a single integer – the length of the maximum mountain array which contains the index specified in the query. # Example: Input: ``` 7 2 1 4 7 3 2 5 3 1 4 7 ``` Output: ``` 1 5 1 ``` # Explanation: - For the first query, the index 1 (i.e., 2 in the array) doesn\'t contain any increasing and decreasing sequences, so the length is 1. - For the second query, the index 4 (i.e., 7 in the array) is part of the sequence [1, 4, 7, 3, 2], which is the longest mountain array that includes the index 4. - For the third query, the index 7 (i.e., 5 in the array) doesn\'t contain any increasing and decreasing sequences, so the length is 1.","solution":"def max_mountain_length(arr, queries): n = len(arr) if n < 3: return [1] * len(queries) # No mountain array possible if less than 3 elements left = [1] * n right = [1] * n # Fill left array for i in range(1, n): if arr[i] > arr[i-1]: left[i] = left[i-1] + 1 # Fill right array for i in range(n-2, -1, -1): if arr[i] > arr[i+1]: right[i] = right[i+1] + 1 result = [] for q in queries: k = q - 1 # to make it zero-indexed if left[k] > 1 and right[k] > 1: max_len = left[k] + right[k] - 1 else: max_len = 1 result.append(max_len) return result"},{"question":"You have been tasked with organizing an ancient library that contains a collection of scrolls. Each scroll is identified by a unique integer ID. The library follows a peculiar rule on how the scrolls should be ordered. Specifically, a scroll should precede another scroll if the sum of its digits is larger. You are given a list of scroll IDs and you must sort them according to this rule. If two scrolls have the same sum of their digits, they should be ordered by their numerical value in ascending order. Write a function that takes a list of scroll IDs and returns the sorted list according to the described rule. **Input:** - The input contains: - A single integer `n` (1 le n le 1000), the number of scroll IDs. - A list of `n` integers representing the scroll IDs. Each scroll ID is guaranteed to be between `1` and `10^9`. **Output:** - Return a list of scroll IDs sorted according to the described rule. **Example:** ```python n = 5 scroll_ids = [123, 456, 789, 234, 567] # Output: [789, 567, 456, 234, 123] ``` **Explanation:** - The sum of digits for the scroll IDs are as follows: - 123 -> 6 - 456 -> 15 - 789 -> 24 - 234 -> 9 - 567 -> 18 - Sorting by the sum of digits in descending order gives: - 789 -> 24 - 567 -> 18 - 456 -> 15 - 234 -> 9 - 123 -> 6","solution":"def sorted_scrolls(n, scroll_ids): Sorts the scroll IDs based on the sum of their digits in descending order. If two scrolls have the same sum of digits, they are sorted numerically in ascending order. def digit_sum(x): return sum(int(d) for d in str(x)) return sorted(scroll_ids, key=lambda x: (-digit_sum(x), x)) # Example usage n = 5 scroll_ids = [123, 456, 789, 234, 567] print(sorted_scrolls(n, scroll_ids))"},{"question":"Given a string representing a mathematical expression, write a function to evaluate the expression and return the result. The expression may contain integers, the operators (+, -, *, /), and parentheses. The division in this problem should truncate toward zero. The function should handle: - Valid mathematical expressions formatted correctly. - Integer division where the result is an integer truncated towards zero. **Example inputs and outputs:** Input: \\"3+2*2\\" Output: 7 Input: \\" 3/2 \\" Output: 1 Input: \\" (1+(4+5+2)-3)+(6+8) \\" Output: 23 Input: \\"2*(5+5*2)/3+(6/2+8)\\" Output: 21 # Function Signature ```python def evaluate_expression(expression: str) -> int: # Your code here ``` # Constraints: - 1 <= expression length <= 500 - The given expression will be a valid mathematical expression containing only digits `0-9`, parentheses `()`, and the operators `+`, `-`, `*`, and `/`. - Division between two integers should truncate toward zero.","solution":"def evaluate_expression(expression: str) -> int: def calculate(ops, nums): if ops[-1] == \'+\': nums.append(nums.pop() + nums.pop()) if ops[-1] == \'-\': b, a = nums.pop(), nums.pop() nums.append(a - b) if ops[-1] == \'*\': nums.append(nums.pop() * nums.pop()) if ops[-1] == \'/\': b, a = nums.pop(), nums.pop() nums.append(int(a / b)) ops.pop() def precedence(curr_op, prev_op): if prev_op == \'(\' or prev_op == \')\': return False if (curr_op == \'*\' or curr_op == \'/\') and (prev_op == \'+\' or prev_op == \'-\'): return False return True ops = [] nums = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] in \'0123456789\': num = 0 while i < len(expression) and expression[i] in \'0123456789\': num = num * 10 + int(expression[i]) i += 1 nums.append(num) i -= 1 elif expression[i] == \'(\': ops.append(\'(\') elif expression[i] == \')\': while ops and ops[-1] != \'(\': calculate(ops, nums) ops.pop() # pop \'(\' else: while ops and precedence(expression[i], ops[-1]): calculate(ops, nums) ops.append(expression[i]) i += 1 while ops: calculate(ops, nums) return nums[0]"},{"question":"You are given a list of items and their corresponding weights. You need to pack these items into a bag that has a maximum weight capacity. Your goal is to maximize the total weight of the items in the bag without exceeding the weight capacity. Each item can only be included once in the bag. Write a function that takes in the list of weights of the items and the maximum weight capacity of the bag and returns the maximum total weight that can be carried in the bag. Function signature: `def max_weight(weights: List[int], capacity: int) -> int` # Input - A list of n integers where each integer represents the weight of an item (1 ≤ n ≤ 1000, 1 ≤ weight[i] ≤ 1000). - An integer representing the maximum weight capacity of the bag (1 ≤ capacity ≤ 1000). # Output - An integer representing the maximum total weight of the items that can be packed in the bag without exceeding the capacity. # Example Input: ``` weights = [1, 3, 4, 5] capacity = 7 ``` Output: ``` 7 ``` Explanation: - The best way to pack the bag is to include items with weights 3 and 4, which sums up to 7. - Other combinations either sum up to less than 7 or exceed the capacity.","solution":"from typing import List def max_weight(weights: List[int], capacity: int) -> int: # Dynamic programming approach to solve the 0/1 knapsack problem n = len(weights) dp = [0] * (capacity + 1) for weight in weights: for c in range(capacity, weight - 1, -1): dp[c] = max(dp[c], dp[c - weight] + weight) return dp[capacity]"},{"question":"You are trying to help the King decipher an ancient text. The text appears to be in an unknown language, but there is a repetitive pattern that might help. You have been given a string `s` of length `n` (1 ≤ n ≤ 10^6) consisting of small Latin letters. Your task is to find the length of the smallest substring that can generate the string `s` by repeating itself. For example: - If the string is \\"ababab\\", the answer is 2 because \\"ab\\" repeated 3 times gives the original string. - If the string is \\"aaaa\\", the answer is 1 because \\"a\\" repeated 4 times gives the original string. - If the string is \\"abcabcabc\\", the answer is 3 because \\"abc\\" repeated 3 times gives the original string. If no such repeating pattern exists, the length of the smallest substring should be considered as the length of the string itself. Implement a function `int smallest_repeating_substring(String s)` that returns the length of the smallest substring that can generate the string `s` by repeating itself, as described above.","solution":"def smallest_repeating_substring(s): Returns the length of the smallest substring that can generate the string by repeating itself. n = len(s) # The idea is to use the KMP algorithm prefix array concept. # Create the longest prefix which is also suffix array (lps array). lps = [0] * n j = 0 # Length of previous longest prefix suffix # the loop calculates lps[i] for i = 1 to n-1 i = 1 while i < n: if s[i] == s[j]: j += 1 lps[i] = j i += 1 else: if j != 0: j = lps[j-1] else: lps[i] = 0 i += 1 # Check for the (n-lps[n-1]) part length_of_pattern = n - lps[n - 1] # If the length of the pattern divides the length of the string, # then it\'s our answer, otherwise the whole string is the repeating substring. if n % length_of_pattern == 0: return length_of_pattern else: return n"},{"question":"John loves mathematics and he is currently studying number theory. He is particularly interested in prime numbers. A prime number is a number that is greater than 1 and has no positive divisors other than 1 and itself. Now, John came up with a new challenge: He wants to find the smallest prime number which is greater than a given integer n and whose digits are all prime numbers. The prime digits are 2, 3, 5, and 7. Your task is to help John by writing a program that finds this smallest prime number for a given input n. Input: - The first line of input contains an integer n (1 ≤ n ≤ 10^6), which is the given number. Output: - Print a single integer on a new line, which is the smallest prime number greater than n and whose digits are all prime numbers. Example: Input: 31 Output: 37 Explanation: The smallest prime number greater than 31 is 37, and both digits 3 and 7 are prime digits.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def has_prime_digits(num): prime_digits = {\'2\', \'3\', \'5\', \'7\'} return all(digit in prime_digits for digit in str(num)) def smallest_prime_with_prime_digits_greater_than_n(n): candidate = n + 1 while True: if is_prime(candidate) and has_prime_digits(candidate): return candidate candidate += 1"},{"question":"Olga and Sergey love to solve puzzles together. One day, they came across an interesting problem involving rectangles. They were given an empty rectangular grid of size m × n and wanted to fill it completely with 1 × 1 squares. However, they also placed several barriers on the grid. Each barrier is represented by coordinates (xi, yi) indicating the position of the barrier in the grid. No square can be placed on a barrier. Your task is to help Olga and Sergey by writing a program to determine whether it is possible to cover the entire grid with 1 × 1 squares without overlapping any barriers. If it\'s possible to cover the grid without overlapping with barriers, print \\"Yes\\". Otherwise, print \\"No\\". Input: - The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the grid. - The second line contains an integer k (0 ≤ k ≤ 100000) — the number of barriers. - Each of the next k lines contains two integers xi and yi (1 ≤ xi ≤ m, 1 ≤ yi ≤ n) — the positions of the barriers. Output: - Print \\"Yes\\" if it\'s possible to cover the entire grid with 1 × 1 squares without overlapping barriers. Otherwise, print \\"No\\". Note: - A grid without barriers is always possible to cover with squares. - Consider edge cases like when k = 0 or when barriers cover the entire grid.","solution":"def can_fill_grid(m, n, k, barriers): Determines if it\'s possible to cover the entire m x n grid with 1x1 squares, without overlapping with any barriers. if k == 0: return \\"Yes\\" # Total number of cells in the grid total_cells = m * n # Number of cells covered by barriers barrier_cells = set(barriers) # If number of barrier cells is less than total cells, # then we can always place 1x1 squares in remaining cells if len(barrier_cells) < total_cells: return \\"Yes\\" else: return \\"No\\""},{"question":"Given a string S, your task is to find the length of the longest substring of S that contains no more than two distinct characters. # Input: - The input consists of a single string S (1 leq |S| leq 10^5), containing only lowercase English letters. # Output: - Output a single integer, the length of the longest substring of S that contains no more than two distinct characters. # Examples: **Example 1:** ``` Input: \\"eceba\\" Output: 3 Explanation: The substring is \\"ece\\" which its length is 3. ``` **Example 2:** ``` Input: \\"ccaabbb\\" Output: 5 Explanation: The substring is \\"aabbb\\" which its length is 5. ``` # Note: Consider using a sliding window approach to efficiently solve this problem within the given constraints.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains no more than two distinct characters. if not s: return 0 left = 0 right = 0 max_length = 0 char_count = {} while right < len(s): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Given a list of integers, your task is to divide the list into two non-empty sublists such that the sums of the sublists are as equal as possible. If there are multiple optimal solutions, return any of them. You need to write a function `balanced_split` that takes in a list of integers and returns a tuple of two lists, representing the two sublists. # Function Signature: ```python def balanced_split(arr: List[int]) -> Tuple[List[int], List[int]]: ``` # Input: - A list of integers `arr` (1 ≤ length of arr ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9) # Output: - A tuple of two lists representing the two sublists. # Example: ```python balanced_split([1, 3, 4, 2, 2]) ``` Output: ```python ([1, 4], [3, 2, 2]) ``` # Explanation: In the above example, the sum of the first sublist [1, 4] is 5, and the sum of the second sublist [3, 2, 2] is also 5, so the sums are as equal as possible. # Note: - No sublist is allowed to be empty. - It is guaranteed that there will be a solution. - If there are multiple solutions, you may return any feasible pair of sublists.","solution":"from typing import List, Tuple def balanced_split(arr: List[int]) -> Tuple[List[int], List[int]]: arr.sort(reverse=True) total_sum = sum(arr) first_sum = 0 first_sublist = [] second_sublist = [] for num in arr: if first_sum < total_sum / 2: first_sublist.append(num) first_sum += num else: second_sublist.append(num) return first_sublist, second_sublist"},{"question":"You are given an array of positive integer values and you want to segment this array into contiguous sub-arrays such that the product of the maximum element in each sub-array is minimized. Determine the minimum possible product value using these segments. The first line of input contains a single integer n (1 ≤ n ≤ 100) — the number of elements in array a. The second line contains n positive integer numbers ai (1 ≤ ai ≤ 100) — the elements of the array. Output the minimum possible product value for segmenting the array into contiguous sub-arrays where each sub-array\'s maximum value contributes to the product. For example: Input: 5 1 2 3 4 5 Output: 1 Explanation: In this example, segmenting the array as [1], [2], [3], [4], [5] results in the minimum possible product of 1*2*3*4*5 which is 120. However, segmenting as [1, 2, 3, 4, 5] results in the minimum product of the maximums giving the value 5. Input: 4 1 2 2 1 Output: 2 Explanation: Segmenting the array as [1, 2], [2, 1] results in the minimum possible product of the maximums: 2*2 = 4. However, segmenting as [1, 2, 2, 1] results in the minimum product of the maximum value being 2.","solution":"def min_product_of_max_values(n, arr): def dp(i): if i == n: return 1 if memo[i] != -1: return memo[i] res = float(\'inf\') curr_max = -float(\'inf\') for j in range(i, n): curr_max = max(curr_max, arr[j]) res = min(res, curr_max * dp(j + 1)) memo[i] = res return res memo = [-1] * n return dp(0)"},{"question":"You have recently been admitted into a mysterious coding school where your progression is determined by solving intricate puzzles related to common programming tasks. Today, your task is to help the school organize its random string sequences. A string is called a \\"balanced string\\" if all the characters appear the same number of times. You need to write a program that processes multiple test cases and for each test case, determines the rearrangement (if possible) that will form a balanced string when given the number of unique characters and the total length of the string. # Input - The first line of input contains an integer `t (1 ≤ t ≤ 1000)` — the number of test cases. - Each of the following `t` lines contains two integers `n (1 ≤ n ≤ 26)` and `l (1 ≤ l ≤ 100)` — the number of unique characters and the total length of the string. # Output - For each test case, output a string that is balanced and consists of characters \'a\' to the `(n-1)`th alphabet if possible. If it is not possible to create such a string, output \\"IMPOSSIBLE\\". # Examples ``` Input 3 3 6 2 7 5 25 Output abcabc IMPOSSIBLE abcdeabcdeabcdeabcdeabcde ``` # Explanation - In the first test case, we can form the string \\"abcabc\\", where each of \'a\', \'b\', and \'c\' appear exactly 2 times, hence it is balanced. - In the second test case, it is impossible to rearrange 2 distinct characters into a length 7 balanced string. - In the third test case, \\"abcdeabcdeabcdeabcdeabcde\\" is a balanced string where each of \'a\', \'b\', \'c\', \'d\', and \'e\' appear exactly 5 times.","solution":"def create_balanced_string(n, l): Returns a balanced string of length l using n unique characters if possible, otherwise returns \\"IMPOSSIBLE\\". if l % n != 0: return \\"IMPOSSIBLE\\" base_string = \'\'.join(chr(97 + i) for i in range(n)) # a, b, ..., (n-1)th character repetition = l // n return base_string * repetition def process_test_cases(test_cases): Processes multiple test cases to generate balanced strings if possible. results = [] for n, l in test_cases: results.append(create_balanced_string(n, l)) return results"},{"question":"You are given an array of integers that represents the height of buildings along a straight road. Each building is of unit width and the heights are given from left to right. The goal is to find the maximum amount of water that can be trapped between the buildings after raining. The array `heights` represents the height of each building such that the width of the container is subjected to the indices of the array. The first line contains an integer `n` — the number of buildings (`1 ≤ n ≤ 100`). The second line contains `n` space-separated integers representing the height of each building (`0 ≤ height ≤ 100`). Output the maximum water that can be trapped. **Example** Input: ``` 6 4 2 0 3 2 5 ``` Output: ``` 9 ``` Explanation: The vertical bars represent the height of buildings. The maximum water that can be trapped is 9 units between buildings.","solution":"def max_water_trapped(n, heights): if n < 3: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - heights[i] return total_water"},{"question":"You are given a string s consisting of lowercase English letters and queries asking you to find the most frequent character in a specific substring of s. If there is a tie, you should return the lexicographically smallest character among the most frequent ones. # Input The first line contains the string s (1 leqslant |s| leqslant 200,000). The second line contains an integer q (1 leqslant q leqslant 100,000) — the number of queries. The next q lines contain two integers l and r (1 leqslant l leqslant r leqslant |s|) denoting the 1-based start and end indices of the substring. # Output For each query, print the most frequent character in the substring from index l to r. If there are multiple characters with the same highest frequency, choose the lexicographically smallest one. # Example Input ``` ababcaa 3 1 3 2 6 4 7 ``` Output ``` a a a ``` # Note For the first query (1 to 3), the substring is \\"aba\\". Character \'a\' appears twice, while \'b\' appears once, so the answer is \'a\'. For the second query (2 to 6), the substring is \\"babca\\". Both \'a\' and \'b\' appear twice, but \'a\' is lexicographically smaller than \'b\', so the answer is \'a\'. For the third query (4 to 7), the substring is \\"bcaa\\". Character \'a\' appears twice, while \'b\' and \'c\' appear once, therefore the answer is \'a\'.","solution":"def most_frequent_character(s, queries): from collections import Counter results = [] for l, r in queries: substring = s[l-1:r] count = Counter(substring) most_freq_count = max(count.values()) most_freq_chars = [char for char, freq in count.items() if freq == most_freq_count] results.append(min(most_freq_chars)) return results"},{"question":"You are given a sequence of integers a_1, a_2, ldots, a_n. In one operation you can choose any three indices i, j, k (where 1 leq i, j, k leq n) and increment a_i, decrement a_j, and increment a_k. Determine whether it is possible to make all elements of the sequence equal after performing any number of such operations. The first line contains a single integer t (1 le t le 10): the number of test cases. The first line of each test case contains a single integer n (1 le n le 1000): the number of integers in the sequence. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000). For each test case, if it is possible to make all elements in the sequence equal, print \\"YES\\" (without quotes). Otherwise, print \\"NO\\" (without quotes). You can output each character in either lowercase or uppercase. In the third test case and beyond, it may not be possible to make all elements equal due to specific ordering or numerical constraints.","solution":"def can_make_elements_equal(t, test_cases): results = [] for case in test_cases: n, a = case total = sum(a) # Check if the total number of elements can be made equal if total % n == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) a = list(map(int, lines[index + 1].split())) test_cases.append((n, a)) index += 2 return t, test_cases"},{"question":"Vasya is fond of arithmetic progressions. An arithmetic progression is a sequence of numbers in which the difference of any two successive members is a constant. Vasya has a list of n integers and wants to find the length of the longest contiguous subarray that forms an arithmetic progression in this list. Write a function `longest_arithmetic_subarray(arr: List[int]) -> int` that takes a list of n integers as input and returns the length of the longest contiguous arithmetic subarray in the list. **Input:** - A list arr of n integers (1 ≤ n ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9). **Output:** - An integer representing the length of the longest contiguous arithmetic subarray. **Example:** Input: ``` arr = [3, 6, 9, 12, 15] ``` Output: ``` 5 ``` Explanation: The entire array is an arithmetic progression with a common difference of 3. Input: ``` arr = [10, 12, 14, 7, 8, 10, 12, 14] ``` Output: ``` 4 ``` Explanation: The longest arithmetic progression subarray is [10, 12, 14, 7].","solution":"def longest_arithmetic_subarray(arr): if len(arr) < 2: return len(arr) max_length = 2 current_length = 2 current_diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i - 1] == current_diff: current_length += 1 else: current_diff = arr[i] - arr[i - 1] current_length = 2 max_length = max(max_length, current_length) return max_length"},{"question":"Given an array of n integers and q queries, you need to perform the following operations: 1. Update: In a query of type `1 x y`, replace the element at index `x` with the value `y`. 2. Actual Sum: In a query of type `2 l r`, compute the sum of elements from index `l` to `r` (both inclusive). Note that the array is 1-indexed. Write a program to process the queries on the array. **Input** - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000) — the number of elements in the array and the number of queries. - The second line contains `n` integers `a1, a2, ..., an` (0 ≤ ai ≤ 10^9) — the initial elements of the array. - The next `q` lines describe the queries. Each query is either of the form `1 x y` (1 ≤ x ≤ n, 0 ≤ y ≤ 10^9) denoting an update query or of the form `2 l r` (1 ≤ l ≤ r ≤ n) denoting a sum query. **Output** For each sum query, output the sum of elements from index `l` to `r` in one line. **Example** **Input:** ``` 5 4 1 2 3 4 5 2 1 3 1 3 10 2 1 3 1 5 2 2 1 5 ``` **Output:** ``` 6 13 19 ``` **Explanation:** 1. The initial array is `[1, 2, 3, 4, 5]`. The sum of elements from index 1 to 3 is `1 + 2 + 3 = 6`. 2. After updating the element at index 3 to 10, the array becomes `[1, 2, 10, 4, 5]`. 3. The sum of elements from index 1 to 3 is `1 + 2 + 10 = 13`. 4. After updating the element at index 5 to 2, the array becomes `[1, 2, 10, 4, 2]`. 5. The sum of elements from index 1 to 5 is `1 + 2 + 10 + 4 + 2 = 19`. In order to efficiently handle the updates and queries, consider using a data structure such as a segment tree or a Fenwick tree (binary indexed tree).","solution":"class RangeUpdateQuery: def __init__(self, n, array): self.n = n self.array = array def update(self, x, y): self.array[x-1] = y def actual_sum(self, l, r): return sum(self.array[l-1:r]) def process_queries(n, q, array, queries): ruq = RangeUpdateQuery(n, array) results = [] for query in queries: if query[0] == 1: _, x, y = query ruq.update(x, y) elif query[0] == 2: _, l, r = query result = ruq.actual_sum(l, r) results.append(result) return results"},{"question":"Bytecity is famous for its unique byte strings. The residents love encoding and decoding byte strings in various ways. Recently, they have come up with a game that involves creating byte strings that satisfy certain conditions. You are given a byte string consisting only of the characters \'B\' and \'A\'. Your task is to make the string valid by applying the following rule any number of times (including zero times): - Choose an adjacent pair of characters \\"BA\\" and replace it with \\"AA\\". A string is considered valid if it consists only of the character \'A\'. Write a function that determines the minimum number of steps required to make the byte string valid. # Input - The input string s consists of characters \'B\' and \'A\' (1 ≤ |s| ≤ 10^6). # Output - Print a single integer representing the minimum number of steps required to make the string valid. # Sample **Input:** ``` BAAABAB ``` **Output:** ``` 2 ``` **Explanation:** You can apply the operation \\"BA\\" -> \\"AA\\" to the 1st and 5th pairs to make the string \\"AAAAAAB\\". After two steps, the resulting string consists only of \'A\', which is valid.","solution":"def min_steps_to_valid_string(s: str) -> int: Determines the minimum number of steps required to make the string consisting only of \'A\' by replacing adjacent \\"BA\\" with \\"AA\\". Parameters: s (str): A byte string consisting of \'B\' and \'A\'. Returns: int: The minimum number of steps required. steps = 0 i = 0 while i < len(s) - 1: if s[i] == \'B\' and s[i + 1] == \'A\': # Found a \\"BA\\" pair, increase steps and skip next character steps += 1 i += 2 else: i += 1 return steps"},{"question":"A customer has ordered n customized t-shirts of different colors. The t-shirts are arranged in a row and each t-shirt has a unique color denoted by an uppercase English letter. Due to a production error, some t-shirts may end up in the wrong position resulting in the sequence of colors not being in alphabetical order. Your task is to find the minimum number of swaps needed to sort the t-shirts in alphabetical order. The first input line contains an integer n (1 ≤ n ≤ 2·10^5). The second line contains a string of n uppercase English letters representing the colors of the t-shirts. Print a single integer — the minimum number of swaps needed to sort the t-shirts in alphabetical order.","solution":"def min_swaps_to_sort_tshirts(n, tshirt_colors): Returns the minimum number of swaps needed to sort the t-shirts in alphabetical order. # Create a list of tuples, with each tuple containing character and its index indexed_tshirts = [(tshirt_colors[i], i) for i in range(n)] # Sort the list by the characters sorted_tshirts = sorted(indexed_tshirts) # Create a visited array to mark the visited elements visited = [False] * n # Initialize result swaps = 0 # Traverse the array elements for i in range(n): # If element is already in correct position or already visited if visited[i] or sorted_tshirts[i][1] == i: continue cycle_size = 0 j = i # Compute the size of cycle while not visited[j]: visited[j] = True j = sorted_tshirts[j][1] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"Create a function `word_break(s, wordDict)` that determines if a string `s` can be segmented into a space-separated sequence of one or more dictionary words from `wordDict`. - The first input, `s`, is a non-empty string containing only lowercase English letters. - The second input, `wordDict`, is a list containing a non-empty set of lowercase English words. Return `True` if `s` can be segmented into one or more dictionary words, and `False` otherwise. For example: Input: `s = \\"leetcode\\"`, `wordDict = [\\"leet\\", \\"code\\"]` Output: `True` Input: `s = \\"applepenapple\\"`, `wordDict = [\\"apple\\", \\"pen\\"]` Output: `True` Input: `s = \\"catsandog\\"`, `wordDict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"]` Output: `False`","solution":"def word_break(s, wordDict): Determines if a string s can be segmented into a space-separated sequence of one or more dictionary words. :param s: str, a non-empty string containing only lowercase English letters :param wordDict: list of str, a list containing a non-empty set of lowercase English words :return: bool, True if s can be segmented, False otherwise word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1]"},{"question":"You are given a binary tree. Your task is to convert it to a doubly linked list (DLL) in place. The left and right pointers in nodes are to be used as previous and next pointers respectively in converted DLL. The order of nodes in DLL must be the same as in-order traversal of the binary tree. The first node of in-order traversal (leftmost node in the binary tree) must be the head node of the DLL. You need to complete the function `bToDLL` that takes the root of the binary tree as an argument and returns the head of the DLL. # Input: - The first line of input contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of nodes in the binary tree. - Following this is the space-separated values of the nodes, in the level-order format where -1 indicates that there is no node present. # Output: For each test case, print the elements of the DLL in a single line, separated by spaces. # Constraints: - 1 <= T <= 10 - 1 <= N <= 10^4 - -10^3 <= Node Value <= 10^3 # Example: Input: ``` 2 7 10 12 15 -1 -1 25 30 3 1 2 3 ``` Output: ``` 12 10 25 15 30 2 1 3 ``` # Note: - For the first test case, the binary tree is: ``` 10 / 12 15 / 25 30 ``` The DLL in in-order traversal will be: 12 <-> 10 <-> 25 <-> 15 <-> 30 - For the second test case, the binary tree is: ``` 1 / 2 3 ``` The DLL in in-order traversal will be: 2 <-> 1 <-> 3","solution":"class Node: def __init__(self, data): self.data = data self.left = None # This will act as prev in DLL self.right = None # This will act as next in DLL def bToDLL(root): # Helper function to convert binary tree to DLL using in-order traversal def inorder_helper(node): nonlocal head, prev if not node: return # Traverse left subtree inorder_helper(node.left) # If prev is None, this is the leftmost node if prev is None: head = node else: # Link previous node and current node node.left = prev prev.right = node # Move previous to current prev = node # Traverse right subtree inorder_helper(node.right) head = None prev = None inorder_helper(root) return head def build_tree_from_level_order(data): if not data or data[0] == -1: return None from collections import deque root = Node(data[0]) queue = deque([root]) i = 1 while i < len(data): current = queue.popleft() if i < len(data) and data[i] != -1: current.left = Node(data[i]) queue.append(current.left) i += 1 if i < len(data) and data[i] != -1: current.right = Node(data[i]) queue.append(current.right) i += 1 return root def dll_to_list(head): result = [] while head: result.append(head.data) head = head.right return result"},{"question":"Alice loves tracking weather data to understand climate patterns. Every month, she records the highest temperature (in degrees Celsius) for each day. She wants to identify the longest consecutive period during which the temperature stayed within a range that she finds comfortable. You are given an array of integers where each element represents the highest temperature recorded on a day in a month. Also, you are given two integers, `L` and `H`, representing the lower and upper bounds of Alice\'s comfort range, respectively. Write a function that takes the array of daily temperatures and the integers `L` and `H`, and returns the length of the longest consecutive subarray where all the temperatures fall within the inclusive range `[L, H]`. # Function Signature ```python def longest_comfortable_period(temperatures: List[int], L: int, H: int) -> int: ``` # Input - `temperatures`: A list of integers representing daily high temperatures in a month. The length of this list is between 1 and 10^5. - `L`: An integer representing the lower bound of Alice\'s comfort range. (-100 ≤ L ≤ 100) - `H`: An integer representing the upper bound of Alice\'s comfort range. (-100 ≤ H ≤ 100) # Output - Return an integer representing the length of the longest consecutive period during which all temperatures are within the range `[L, H]`. # Example ```python longest_comfortable_period([25, 28, 29, 27, 30, 15, 18, 22, 25, 26], 20, 30) # Output: 5 longest_comfortable_period([16, 18, 20, 22, 24, 26, 28, 30], 15, 25) # Output: 5 longest_comfortable_period([10, 12, 15, 10, 9, 8, 11, 13], 10, 15) # Output: 4 ```","solution":"def longest_comfortable_period(temperatures, L, H): Returns the length of the longest consecutive period during which all temperatures are within the range [L, H]. max_length = 0 current_length = 0 for temp in temperatures: if L <= temp <= H: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"There are n employees in a company. Each employee is assigned a unique ID from 1 to n. You are provided with a list of m friendship pairs, where each pair indicates that the two employees are friends. Additionally, there are k reports, where each report consists of two employee IDs and an integer r. This means that the shortest friendship path between the two employees given in this report should be exactly r steps. Your task is to determine if it is possible to assign each friendship pair such that all the reports are satisfied. If it is possible, print \\"Yes\\"; otherwise, print \\"No\\". Consider the following constraints: - 1 le n le 1000 - 1 le m le 2000 - 1 le k le 1000 - Each friendship and report involves different employee pairs. Input format: - The first line contains two integers n and m. - The next m lines each contain two integers u and v (1 le u, v le n; u ne v), denoting a friendship between employee u and employee v. - The following line contains a single integer k. - The next k lines each contain two integers a and b (1 le a, b le n; a ne b) and an integer r (1 le r le 1000), representing the shortest friendship path between employee a and employee b that must be exactly r steps. Output format: - Print \\"Yes\\" if it is possible to assign friendships to satisfy all reports. - Otherwise, print \\"No\\". Example: - Input: ``` 5 4 1 2 2 3 3 4 4 5 2 1 3 2 5 2 3 ``` - Output: ``` Yes ```","solution":"from collections import deque def is_possible_to_assign_friendships(n, m, friendships, k, reports): # Build graph adjacency list graph = [[] for _ in range(n + 1)] for u, v in friendships: graph[u].append(v) graph[v].append(u) # Function to find shortest path using BFS def bfs(source, target): queue = deque([(source, 0)]) visited = [-1] * (n + 1) visited[source] = 0 while queue: node, distance = queue.popleft() if node == target: return distance for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = distance + 1 queue.append((neighbor, distance + 1)) return -1 # Process each report for a, b, r in reports: actual_distance = bfs(a, b) if actual_distance != r: return \\"No\\" return \\"Yes\\" # Example usage: n, m = 5, 4 friendships = [(1, 2), (2, 3), (3, 4), (4, 5)] k = 2 reports = [(1, 3, 2), (5, 2, 3)] print(is_possible_to_assign_friendships(n, m, friendships, k, reports)) # Output should be \\"Yes\\""},{"question":"You are given an array of integers arr of size n (2 le n le 100). Your task is to find a contiguous subarray (containing at least one number) which has the smallest sum and print the sum as well as starting and ending indices (1-based) of this subarray. For example, for array arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4], the subarray with the smallest sum is [-5] with the sum -5, starting at index 8 and ending at index 8. The first line of the input contains an integer n (2 le n le 100) — the size of the array arr. The second line contains n space-separated integers, where each integer is in the range of [-1000, 1000] — the elements of the array. Print three integers: the smallest sum, the starting index, and the ending index of the subarray with the smallest sum. Use 1-based indexing for the indices. In the first example, the answer is: -5, 8, 8. In the second example, for array [-1, -2, -3, -4], the sum is: -10, starting at index 1 and ending at index 4.","solution":"def smallest_sum_subarray(arr): Return the smallest sum of any contiguous subarray, along with its starting and ending indices (1-based). :param arr: List of integers :return: Tuple of (smallest_sum, start_index, end_index) n = len(arr) min_sum = float(\'inf\') current_sum = 0 start = 0 end = 0 temp_start = 0 for i in range(n): current_sum += arr[i] if current_sum < min_sum: min_sum = current_sum start = temp_start end = i if current_sum > 0: current_sum = 0 temp_start = i + 1 return (min_sum, start + 1, end + 1)"},{"question":"In a country called Graphland, there are n cities, represented as vertices in an undirected graph. There are m roads between these cities, represented as edges with non-negative weights. The government wants to install a new communication network. To do this, they need to determine the minimum cost required to connect all the cities ensuring there is a path between any two cities. The government prefers a reliable and cost-effective solution, therefore they only want to consider using Minimum Spanning Tree (MST) for the network. Your task is to find the total weight of the MST for the given graph or determine that it\'s impossible to connect all cities. # Input: - The first line contains two integers, n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000) — the number of cities and the number of roads, respectively. - Next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 0 ≤ w ≤ 100000), which represent a road between cities u and v with weight w. # Output: - If it\'s possible to connect all cities, print a single integer representing the total weight of the MST. - If it\'s impossible to connect all cities, print a single line containing \\"IMPOSSIBLE\\". # Examples: Input: ``` 4 5 1 2 3 2 3 1 3 4 4 4 1 2 1 3 3 ``` Output: ``` 6 ``` Input: ``` 4 2 1 2 1 3 4 2 ``` Output: ``` IMPOSSIBLE ```","solution":"import heapq def minimum_spanning_tree(n, m, edges): if n == 1: return 0 adjacency_list = [[] for _ in range(n + 1)] for u, v, w in edges: adjacency_list[u].append((w, v)) adjacency_list[v].append((w, u)) total_cost = 0 min_heap = [(0, 1)] visited = [False] * (n + 1) edges_used = 0 while min_heap: weight, u = heapq.heappop(min_heap) if visited[u]: continue visited[u] = True total_cost += weight edges_used += 1 for next_weight, v in adjacency_list[u]: if not visited[v]: heapq.heappush(min_heap, (next_weight, v)) if edges_used == n: return total_cost else: return \\"IMPOSSIBLE\\""},{"question":"In an e-commerce application, customers often perform various actions such as adding items to their cart, removing items, or checking out. Each action impacts the data maintained about the customer\'s cart. Consider the following scenario, and help implement the required functionalities. There are n different items available in the e-commerce store, and initially, the cart of each customer is empty. The application needs to support the following types of operations: 1. Add a specified quantity of a specific item to the cart. 2. Remove a specified quantity of a specific item from the cart. If the quantity to remove is more than what is present in the cart, remove all quantities of that item from the cart. 3. Get the total number of unique items present in the current cart. 4. Get the total quantity of all items present in the cart. Implement a class `ShoppingCart` with the following methods: - `add_item(item_id: int, quantity: int) -> None`: Adds the specified quantity of the item with the given `item_id` to the cart. - `remove_item(item_id: int, quantity: int) -> None`: Removes the specified quantity of the item with the given `item_id` from the cart. If the quantity to remove exceeds what is in the cart, remove all quantities. - `get_unique_items_count() -> int`: Returns the total number of unique items in the cart. - `get_total_items_count() -> int`: Returns the total quantity of all items in the cart. The system should handle inputs in the following form: 1. The first line of input contains an integer q (1 ≤ q ≤ 100,000) - the number of operations. 2. The next q lines contain the operations in the following format: - `add item_id quantity` - `remove item_id quantity` - `unique_items` - `total_items` For `add` and `remove` operations, item_id is an integer (1 ≤ item_id ≤ n) and quantity is an integer (1 ≤ quantity ≤ 1000). For `unique_items` and `total_items`, simply perform the respective actions. Output the result for `unique_items` and `total_items` operations. Each result should be in a new line. Example Input: ``` 8 add 1 10 add 2 5 add 1 5 unique_items remove 2 3 total_items remove 1 20 unique_items ``` Example Output: ``` 2 17 1 ```","solution":"class ShoppingCart: def __init__(self): self.cart = {} def add_item(self, item_id: int, quantity: int) -> None: if item_id in self.cart: self.cart[item_id] += quantity else: self.cart[item_id] = quantity def remove_item(self, item_id: int, quantity: int) -> None: if item_id in self.cart: if self.cart[item_id] <= quantity: del self.cart[item_id] else: self.cart[item_id] -= quantity def get_unique_items_count(self) -> int: return len(self.cart) def get_total_items_count(self) -> int: return sum(self.cart.values())"},{"question":"Given a music app\'s listening history, you need to calculate how many unique songs a user has listened to. A user\'s listening history is represented as a sequence of song identifiers. Each song identifier is an integer ranging from 1 to 10^9. Your task is to write a function that receives the listening history as input and returns the count of unique song identifiers. Write a function `count_unique_songs` that accepts a list of integers representing the song identifiers in the listening history and returns an integer representing the number of unique songs. # Input: - A single list `songs` containing n integers (1 ≤ n ≤ 10^5), where each integer represents a song identifier the user listened to. # Output: - An integer representing the number of unique song identifiers. # Example: ```python def count_unique_songs(songs): # Your code here # Example usage songs = [1, 2, 2, 3, 4, 4, 5] print(count_unique_songs(songs)) # Output: 5 ``` In the example, the user has listened to 5 unique songs, so the function should return 5.","solution":"def count_unique_songs(songs): Returns the count of unique song identifiers in the listening history. Parameters: songs (list of int): A list of integers representing song identifiers. Returns: int: The number of unique song identifiers. return len(set(songs))"},{"question":"You are given an array of n integers and you need to process q queries. Each query asks to find the maximum sum of a subarray with at most k elements. The first line of the input contains three integers n, q, and k (1 ≤ n, q, k ≤ 300000). The second line contains n integers representing the array elements (1 ≤ ai ≤ 109). Then q lines follow, each containing one query. Each query consists of two integers l and r (1 ≤ l ≤ r ≤ n), which represent the range of the subarray you need to consider (inclusive of l and r). For each query, you need to determine the maximum possible sum of a subarray within the range [l, r] that contains at most k elements. Input Format: ``` n q k a1 a2 ... an l1 r1 l2 r2 ... lq rq ``` Output: For each query, output the maximum sum of a subarray with at most k elements for the corresponding range. Example: ``` Input: 5 3 2 1 2 3 4 5 1 3 2 5 1 5 Output: 5 9 9 ``` Explanation: For the first query (1, 3), the possible subarrays are [1], [2], [3], [1,2], [2,3]. The maximum sum is 5 (from subarray [2, 3]). For the second query (2, 5), the possible subarrays are [2], [3], [4], [5], [2, 3], [3, 4], [4, 5]. The maximum sum is 9 (from subarray [4, 5]). For the third query (1, 5), the possible subarrays are [1], [2], [3], [4], [5], [1, 2], [2, 3], [3, 4], [4, 5]. The maximum sum is 9 (from subarray [4, 5]).","solution":"def max_subarray_sum_k(arr, n, q, k, queries): This function processes the queries to find the maximum subarray sum with at most k elements. :param arr: List[int] : The array elements. :param n: int : Number of elements in array. :param q: int : Number of queries. :param k: int : Maximum number of elements in the subarray. :param queries: List[Tuple[int, int]] : List of query ranges (l, r). :return: List[int] : List of result for each query. def find_max_sum_subarray(arr, k): Helper function to find the maximum subarray sum with at most k elements. max_sum = 0 current_sum = 0 for i in range(len(arr)): if i < k: current_sum += arr[i] else: current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum results = [] for l, r in queries: subarray = arr[l - 1:r] results.append(find_max_sum_subarray(subarray, k)) return results"},{"question":"Lucy is a software developer who is currently working on optimizing string matching algorithms. One of the tasks she needs to perform is finding the number of distinct substrings of a given length k in a large string s. A substring is defined as a contiguous sequence of characters within a string. For example, the substrings of length 3 in the string \\"abcabc\\" are \\"abc\\", \\"bca\\", \\"cab\\", \\"abc\\". Given a string s and an integer k, help Lucy determine the number of distinct substrings of length k in s. The first line contains an integer k (1 ≤ k ≤ min(1000, |s|)). The second line contains a non-empty string s of length at most 106 consisting of lowercase English letters. Print a single integer — the number of distinct substrings of length k in s. In the first test case, the distinct substrings of length 2 in the string \\"ababc\\" are \\"ab\\", \\"ba\\", and \\"bc\\", so the result is 3. In the second test case, the distinct substrings of length 4 in the string \\"aaaaa\\" are \\"aaaa\\", so the result is 1. In the third test case, the distinct substrings of length 1 in the string \\"abcdef\\" are \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", and \\"f\\", so the result is 6.","solution":"def count_distinct_substrings(s, k): Returns the number of distinct substrings of length k in string s. if k > len(s): return 0 substrings = set() for i in range(len(s) - k + 1): substrings.add(s[i:i+k]) return len(substrings)"},{"question":"Given a binary tree, your task is to determine if it is a complete binary tree. A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. Write a function `is_complete_binary_tree` that receives the root of the binary tree and returns `True` if the tree is complete, otherwise returns `False`. The binary tree is represented by a class `TreeNode`, defined as follows: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` # Input - An instance of `TreeNode` representing the root of the binary tree. # Output - A boolean value (`True` or `False`). # Constraints - The number of nodes in the binary tree is in the range `[1, 100]`. - Each node\'s value is a non-negative integer. # Example ```python # Example 1 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) root.right.left = TreeNode(6) print(is_complete_binary_tree(root)) # Output: True # Example 2 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.right.left = TreeNode(4) print(is_complete_binary_tree(root)) # Output: False ```","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_complete_binary_tree(root): if not root: return True queue = [root] reached_end = False while queue: current = queue.pop(0) if current: if reached_end: return False queue.append(current.left) queue.append(current.right) else: reached_end = True return True"},{"question":"Mara likes to play a maze-solving game where her character must navigate through a grid of cells. Each cell in the grid can either be empty or contain an obstacle. Mara starts at the top-left corner of the grid (cell (1, 1)) and her goal is to reach the bottom-right corner of the grid (cell (n, m)). She can only move right or down from her current position. Mara wants to know the number of distinct paths she can take to traverse from the start to the goal without running into any obstacles. You are given a grid of size n x m, where some cells contain obstacles (represented by \'#\') and others are empty (represented by \'.\'). Determine the number of distinct paths Mara can take to reach her goal while avoiding obstacles. **Input:** - The first line contains two integers n and m (1 ≤ n, m ≤ 20) — the dimensions of the grid. - The next n lines contain m characters each — the grid description where each character is either \'.\' (an empty cell) or \'#\' (an obstacle). **Output:** - Print the number of distinct paths from the top-left corner to the bottom-right corner modulo 1,000,000,007. **Example:** Input: ``` 3 3 ... .#. ... ``` Output: ``` 2 ``` Input: ``` 2 2 .. .# ``` Output: ``` 0 ``` Explanation: In the first example, two possible paths are: 1. Right → Right → Down → Down 2. Down → Down → Right → Right In the second example, there are no paths due to the obstacle blocking the way.","solution":"def count_paths(n, m, grid): MOD = 1000000007 if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1] # Example inputs for manual testing n, m = 3, 3 grid = [ \\"...\\", \\".#.\\", \\"...\\" ] print(count_paths(n, m, grid)) # Output: 2 n, m = 2, 2 grid = [ \\"..\\", \\".#\\" ] print(count_paths(n, m, grid)) # Output: 0"},{"question":"You are given a list of integers `arr` of length `n`. The tasks are to process `q` queries, where each query can be one of the following types: 1. Update the value at index `i` to `x`. 2. Determine the sum of all elements in a subarray from index `l` to `r`. The first line of the input contains the integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains `n` space-separated integers representing the array `arr`. The third line contains the integer `q` (1 ≤ q ≤ 10^5) — the number of queries to process. The next `q` lines describe the queries and may have one of the following forms: - `1 i x`: Update the `i-th` element of the array to `x` (1 ≤ i ≤ n). - `2 l r`: Calculate the sum of elements in the subarray from index `l` to `r` (1 ≤ l ≤ r ≤ n). For each query of type 2, output the required sum in a separate line. It is guaranteed that there will be at least one query of type 2. Consider the sample case below: Initially, the array is [1, 2, 3, 4, 5]. For the first query `2 1 3`, the sum of the subarray is 1 + 2 + 3 = 6. The next query `1 3 10` updates the third element to 10, so the array becomes [1, 2, 10, 4, 5]. The final query `2 2 5` results in the sum 2 + 10 + 4 + 5 = 21.","solution":"class ArrayProcessor: def __init__(self, arr): self.arr = arr def update(self, i, x): self.arr[i - 1] = x def sum_subarray(self, l, r): return sum(self.arr[l - 1: r]) def process_queries(n, arr, q, queries): processor = ArrayProcessor(arr) results = [] for query in queries: if query[0] == 1: _, i, x = query processor.update(i, x) elif query[0] == 2: _, l, r = query results.append(processor.sum_subarray(l, r)) return results"},{"question":"You are given a binary tree, which consists of n nodes, numbered from 1 to n. Each node contains a value. Your task is to find the sum of the longest path from the root node (node 1) to any leaf node. If there are multiple paths with the same length, return the path with the maximum sum. The input consists of multiple lines: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of nodes in the tree. - The second line contains n integers, where the i-th integer is the value of the i-th node. - Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), meaning there is an edge connecting node u and node v. Output a single integer — the sum of the longest path from the root to any leaf node. If there are multiple paths with the same length, output the maximum sum among those paths. **Example** Input: ``` 5 1 2 3 4 5 1 2 1 3 2 4 2 5 ``` Output: ``` 8 ``` Explanation: - The tree structure is as follows: - 1 - 2 - 4 - 5 - 3 - The longest paths from the root (node 1) to any leaf node are: - Path 1 → 2 → 4, with a sum of 1 + 2 + 4 = 7 - Path 1 → 2 → 5, with a sum of 1 + 2 + 5 = 8 - Path 1 → 3, with a sum of 1 + 3 = 4 - Thus, the sum of the longest path is 8.","solution":"def longest_path_sum(n, values, edges): from collections import defaultdict, deque # Building the adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to find the longest path def bfs(node): visited = [-1] * (n + 1) queue = deque([(node, 0)]) visited[node] = values[node - 1] max_length = 0 max_sum = values[node - 1] while queue: current_node, current_len = queue.popleft() for neighbor in graph[current_node]: if visited[neighbor] == -1: visited[neighbor] = visited[current_node] + values[neighbor - 1] queue.append((neighbor, current_len + 1)) if current_len + 1 > max_length or (current_len + 1 == max_length and visited[neighbor] > max_sum): max_length = current_len + 1 max_sum = visited[neighbor] return max_length, max_sum _, max_sum = bfs(1) return max_sum # Example usage n = 5 values = [1, 2, 3, 4, 5] edges = [(1, 2), (1, 3), (2, 4), (2, 5)] print(longest_path_sum(n, values, edges)) # Output: 8"},{"question":"An exploration team is investigating a grid-based rainforest area. The grid is represented as an n x m 2D array, where each cell contains a number representing the elevation at that point. The team needs to determine if they can travel from the top-left corner of the grid (0,0) to the bottom-right corner (n-1,m-1). They may only travel to adjacent cells (left, right, up, down) under the condition that the change in elevation between the current cell and the destination cell is at most 1. Write a function that determines if travel from the top-left corner to the bottom-right corner is possible under the given condition. The function should take as input a 2D list of integers representing the elevation grid and output a boolean value indicating whether the travel is possible. **Function Signature:** ```python def can_travel(elevation_grid: List[List[int]]) -> bool: pass ``` **Input:** - A 2D list `elevation_grid` of size n x m where 1 <= n, m <= 100 and each element is an integer within the range [-1000, 1000]. **Output:** - Return `True` if travel is possible, otherwise `False`. **Example:** ```python assert can_travel([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == True assert can_travel([[1, 2, 3], [2, 5, 6], [2, 2, 1]]) == True assert can_travel([[1, 3, 3], [3, 2, 6], [7, 8, 9]]) == False ```","solution":"from typing import List def can_travel(elevation_grid: List[List[int]]) -> bool: n = len(elevation_grid) m = len(elevation_grid[0]) visited = [[False for _ in range(m)] for _ in range(n)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y, prev_value): return 0 <= x < n and 0 <= y < m and not visited[x][y] and abs(elevation_grid[x][y] - prev_value) <= 1 def dfs(x, y): if x == n - 1 and y == m - 1: return True visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, elevation_grid[x][y]) and dfs(nx, ny): return True return False return dfs(0, 0)"},{"question":"Alice has an array of integers and she wants to perform some operations on it. She can either add 1 to any element or subtract 1 from any element. Alice\'s goal is to make all elements of the array equal. Help her find the minimum number of operations required to achieve this goal. You are given an array of n integers. The elements of the array may be negative. You must determine the minimum number of operations required to make all elements of the array equal. The first line contains a single integer n (1 ≤ n ≤ 2 * 10^5), the size of the array. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9), the elements of the array. Output a single integer, the minimum number of operations required to make all elements of the array equal. Example: Input: 4 1 5 3 2 Output: 6 Explanation: One way to make all elements equal is to make them all equal to 3: - Add 2 to the first element (1 operation) - Subtract 2 from the second element (2 operations) - The third element is already 3 (0 operations) - Add 1 to the fourth element (1 operation) In total, this is 1 + 2 + 0 + 1 = 4 operations. Another possibility is to make all elements equal to 2 or 5, and you will see it requires a different number of operations. The minimum in this example is 6 operations.","solution":"def min_operations_to_equal_elements(arr): Returns the minimum number of operations required to make all elements of the array equal. n = len(arr) arr.sort() median = arr[n // 2] return sum(abs(x - median) for x in arr)"},{"question":"You are given a sequence of n integers a_1, a_2, dots, a_n. Your task is to determine the maximum sum of any contiguous subarray of the given sequence. A contiguous subarray is a subarray where the elements are consecutive elements from the original array. The first line contains a single integer t (1 le t le 100) — the number of test cases. Then the descriptions of t test cases follow. The first line of each test case contains a single integer n (1 le n le 100,000) — the number of elements in the sequence. The second line of each test case contains n integers a_1, a_2, dots, a_n (-10^5 le a_i le 10^5). The sum of n over all test cases does not exceed 100,000. For each test case, print a single integer — the maximum sum of any contiguous subarray of the sequence a. Example: Input: ``` 2 4 -1 2 3 -5 3 1 -2 1 ``` Output: ``` 5 1 ```","solution":"def max_subarray_sum(t, test_cases): def kadane_algorithm(arr): Helper function to implement Kadane\'s algorithm for finding the maximum sum of a contiguous subarray. max_current = max_global = arr[0] for number in arr[1:]: max_current = max(number, max_current + number) if max_current > max_global: max_global = max_current return max_global results = [] for i in range(t): n, arr = test_cases[i] results.append(kadane_algorithm(arr)) return results"},{"question":"Qubit Networks is a new game developed by QuantumLabs. In this game, players manage a network of interconnected quantum computers (qubits). Each network is structured as an undirected graph where vertices represent qubits, and edges represent direct communication links between qubits. Each edge in the graph has an inherent latency cost associated with it, and this latency is represented as a non-negative integer. The player\'s objective is to perform a series of operations to optimize the network\'s communication pathways. In each operation, the player can add a new edge between any two qubits with a specified latency. After each operation, the player needs to calculate the minimum latency between two specific qubits in the network. If there is no path connecting the two qubits, the result should be -1. The input starts with an integer n, the number of qubits, and an integer m, the number of initial edges in the network. The next m lines each contain three integers u, v, and w, indicating an edge between qubits u and v with latency w. Following the initial edges, an integer q is provided, the number of queries to be processed. Each of the next q lines describes a query in one of the following formats: 1. \\"add u v w\\" - add an edge between qubits u and v with latency w. 2. \\"minlatency u v\\" - compute the minimum latency between qubits u and v. 1 ≤ n ≤ 1000 1 ≤ m, q ≤ 2000 0 ≤ u, v < n 0 ≤ w ≤ 10^6 Output one line for each \\"minlatency\\" query, containing the minimum latency or -1 if no path exists. # Input ``` 5 4 0 1 10 1 2 20 2 3 30 3 4 40 6 minlatency 0 4 minlatency 0 3 add 0 4 50 minlatency 0 4 minlatency 4 0 add 2 4 10 minlatency 0 4 ``` # Output ``` 100 60 50 50 40 ```","solution":"import heapq def qubit_network(n, m, edges, queries): # Initialize the adjacency list for the graph graph = [[] for _ in range(n)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(src, dst): # Priority queue for dijkstra\'s algorithm pq = [(0, src)] distances = {i: float(\'inf\') for i in range(n)} distances[src] = 0 visited = set() while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) if current_node == dst: return current_distance for neighbor, weight in graph[current_node]: if neighbor in visited: continue new_distance = current_distance + weight if new_distance < distances[neighbor]: distances[neighbor] = new_distance heapq.heappush(pq, (new_distance, neighbor)) return -1 result = [] for query in queries: if query[0] == \'add\': _, u, v, w = query graph[u].append((v, w)) graph[v].append((u, w)) elif query[0] == \'minlatency\': _, u, v = query result.append(dijkstra(u, v)) return result"},{"question":"You are given a list of n integers representing the heights of various buildings in a city skyline. The buildings are arranged in a row, and the width of each building is 1 unit. Your task is to calculate the area of the largest rectangle that can be formed by selecting a contiguous set of buildings and considering their heights. In other words, you need to find the maximum rectangular area that can be formed in the histogram. Input: - A single integer n (1 ≤ n ≤ 100,000) representing the number of buildings. - A list of n integers h[1], h[2], ..., h[n] (1 ≤ h[i] ≤ 10^6) representing the heights of the buildings. Output: - Print a single integer representing the area of the largest rectangle that can be formed in the histogram. # Example Input: 5 2 1 5 6 2 Output: 10 Explanation: The largest rectangle can be obtained by selecting the third and fourth buildings (both with a height of 5 and 6) which forms a rectangle of area 5 * 2 = 10. Your task is to write a program to solve this problem efficiently.","solution":"def largest_rectangle_area(heights): Calculate the area of the largest rectangle in the histogram. :param heights: List of integers, heights of the histogram\'s bars. :return: Integer, the area of the largest rectangle. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given a string consisting of lowercase English letters and you need to find the smallest possible lexicographical string that can be obtained by performing a series of operations. In each operation, you can select a pair of adjacent characters in the string and swap them. The single line contains a string s (1 ≤ s.length ≤ 1000). Print the smallest possible lexicographical string that can be obtained after performing any number of adjacent swaps. For example, if the input string is \\"cba\\", the output should be \\"abc\\".","solution":"def smallest_lexicographical_string(s): Returns the smallest lexicographical string obtainable by performing any number of adjacent swaps on the string s. return \'\'.join(sorted(s))"},{"question":"You are working on a text editor that supports basic operations on a string. One feature that you want to add is the ability to replace substrings within the string. To implement this, you need to write a function that replaces all occurrences of a target substring with another substring. Given an original string, a target substring, and a replacement substring, write a function `replace_substring` that performs the replacement operation and returns the new string. # Function Signature ```python def replace_substring(original: str, target: str, replacement: str) -> str: pass ``` # Input - `original` (string): The original string (1 ≤ |original| ≤ 1000). - `target` (string): The substring to be replaced (1 ≤ |target| ≤ 100). - `replacement` (string): The substring to replace with (0 ≤ |replacement| ≤ 100). # Output - Returns a new string with all occurrences of `target` replaced by `replacement`. # Example ```python print(replace_substring(\\"the cat sat on the mat\\", \\"cat\\", \\"dog\\")) # Output: \\"the dog sat on the mat\\" print(replace_substring(\\"aaaa\\", \\"aa\\", \\"b\\")) # Output: \\"bb\\" print(replace_substring(\\"hello world\\", \\"world\\", \\"everyone\\")) # Output: \\"hello everyone\\" ``` # Constraints - The function should be case-sensitive. - If `target` is an empty string, return the original string unmodified. - The `target` and `replacement` substrings should not overlap within the original string. # Notes - Make sure to handle edge cases, such as if the `target` substring is not found within the original string, or if the `replacement` is an empty string. - The function should perform efficiently for the given input size limits.","solution":"def replace_substring(original: str, target: str, replacement: str) -> str: Replaces all occurrences of the target substring with the replacement substring in the original string. Parameters: original (str): The original string. target (str): The substring to be replaced. replacement (str): The substring to replace with. Returns: str: The modified string with replacements. if target == \\"\\": return original # No replacement needed if target is empty return original.replace(target, replacement)"},{"question":"You are given a string s consisting only of lowercase English letters. You can replace any character in the string with another lowercase English letter. However, to do so, you need to perform a replace operation. Your task is to determine the minimum number of replace operations required to make the string s a palindrome. A palindrome is a string that reads the same backward as forward. Input: - A single string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. Output: - A single integer — the minimum number of replace operations required. Examples: Example 1: Input: ``` race ``` Output: ``` 2 ``` Explanation: - Change the first character \'r\' to \'e\' and the last character \'e\' to \'r\'. The string becomes \\"eace.\\" Example 2: Input: ``` abcd ``` Output: ``` 2 ``` Explanation: - Change the first character \'a\' to \'d\' and the last character \'d\' to \'a\' or vice versa. The string becomes \\"dbca.\\" Example 3: Input: ``` aaabbb ``` Output: ``` 3 ``` Explanation: - Change the first character \'a\' to \'b\' and the second character \'a\' to \'b\'. The string becomes \\"bbabbb.\\" Notes: - The length of the string can be even or odd. - You only need to consider the minimum number of replace operations.","solution":"def min_replace_operations_to_palindrome(s): Returns the minimum number of replace operations required to make the string a palindrome. left = 0 right = len(s) - 1 replace_operations = 0 while left < right: if s[left] != s[right]: replace_operations += 1 left += 1 right -= 1 return replace_operations"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a weight associated with it. Your task is to find a way to remove exactly one edge such that the sum of the weights of all edges in the remaining graph is maximized. Print the maximum possible sum of the weights of all edges in the remaining graph after removing exactly one edge. The first line contains two integers, n and m (1 leq n leq 10^5, n-1 leq m leq 2 times 10^5) — the number of nodes and the number of edges. The next m lines contain three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10^6), where u and v are endpoints of the edge and w is the weight of the edge. It is guaranteed that the graph is connected. Print an integer representing the maximum possible sum of the weights of all edges after removing exactly one edge. If there are multiple edges to remove that would yield the same sum, pick any. **Examples** Input: ``` 4 5 1 2 3 2 3 4 3 4 5 4 1 6 1 3 2 ``` Output: ``` 17 ``` Input: ``` 3 3 1 2 1 2 3 2 1 3 3 ``` Output: ``` 3 ``` Explanation: In the first example, if you remove the edge with a weight of 2, the sum of the remaining edges (3, 4, 5, and 6) is 18. However, the graph may no longer be connected. Removing the edge with weight 3 (between nodes 1 and 2) results in the sum 17, and the graph remains connected. Hence, the correct output is 17. In the second example, if you remove the edge with weight 1, the sum of the remaining edges is 5, while removing the edge with weight 2 results in the sum 4 and removing the edge with weight 3 (which leaves the sum of 3) is the optimal solution while keeping the graph connected. Hence, the correct output is 3.","solution":"def max_weight_sum_after_removal(n, m, edges): Find a way to remove exactly one edge such that the sum of the weights of all edges in the remaining graph is maximized. Parameters: n (int): Number of nodes. m (int): Number of edges. edges (list): List of tuples representing edges. Each tuple contains (u, v, w). Returns: int: Maximum possible sum of the weights after removing exactly one edge. total_weight = sum(w for u, v, w in edges) min_w = min(w for u, v, w in edges) return total_weight - min_w # Subtract the minimum edge weight to maximize sum # Helper function to process input in the required format def process_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:]] return n, m, edges"},{"question":"Given an array of integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. You are given an array of n non-negative integers where each integer represents the height of an elevation at that point. Write a function to compute the total water trapped between these elevations after a rain. For example, given the array [0,1,0,2,1,0,1,3,2,1,2,1], your function should return 6. The graphical representation of the elevation map is: ``` | | | | | | | | | | | | | | | | | | |_|_|_| ``` The 6 units of water are trapped as indicated by the shaded areas. Function signature: ```python def trap(elevation_map: List[int]) -> int: pass ``` **Input:** - An integer n representing the length of the elevation map (0 leq n leq 10^5) . - An array elevation_map of n non-negative integers. **Output:** - Return a single integer representing the total amount of water that can be trapped. **Examples:** ``` Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Input: [4,2,0,3,2,5] Output: 9 ```","solution":"from typing import List def trap(elevation_map: List[int]) -> int: Computes the total amount of water trapped given an elevation map. :param elevation_map: List of non-negative integers representing the elevation heights. :return: Total units of water that can be trapped. if not elevation_map: return 0 n = len(elevation_map) left_max = [0] * n right_max = [0] * n left_max[0] = elevation_map[0] for i in range(1, n): left_max[i] = max(left_max[i-1], elevation_map[i]) right_max[n-1] = elevation_map[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], elevation_map[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - elevation_map[i] return water_trapped"},{"question":"A flower shop receives a shipment of N flowers. Each flower has a distinct price. The shop decides to sell the flowers such that: 1. The first customer buys the most expensive flower available. 2. The second customer buys the second most expensive flower available, and so on... This process continues until all flowers are sold. However, the shop owner realizes that some flowers will go to waste if equally priced flowers are sold sequentially. Therefore, the shop owner wants to maximize the total revenue by selling flowers such that the most expensive flower left after each sale is as expensive as possible. You are given an array of n integers, where each integer represents the price of a flower in the shipment. Calculate the maximum total revenue the shop can make. Input: - First line contains a single integer, N (1 ≤ N ≤ 100,000), the number of flowers. - Second line contains N integers, p1, p2, ..., pN (1 ≤ pi ≤ 1,000,000), the prices of the flowers. Output: - Print the maximum total revenue. Example: Input: 5 9 8 7 6 5 Output: 35 Explanation: The shop will sell flowers in this order: 9, 8, 7, 6, 5. The revenue is the sum of those prices: 9 + 8 + 7 + 6 + 5 = 35.","solution":"def max_total_revenue(n, prices): Returns the maximum total revenue the shop can make by selling the flowers. :param n: An integer representing the number of flowers. :param prices: A list of integers representing the prices of the flowers. :return: An integer representing the maximum total revenue. # Sort the prices list in descending order prices.sort(reverse=True) # Calculate the total revenue total_revenue = sum(prices) return total_revenue"},{"question":"A transportation company needs to design a route network for its buses. The city has N bus stops. Each bus stop is represented by a point in a 2D plane with integer coordinates. The company aims to minimize the total cost of constructing the routes. The cost of constructing a route between any two bus stops is equal to the Euclidean distance between them. Your task is to determine the minimum total cost required to connect all bus stops under the following condition: - The routes in the final network must form a tree, i.e., there should be exactly N-1 routes, and all bus stops must be connected directly or indirectly. First line contains one integer N (2 leq N leq 1,000), the number of bus stops. The following N lines each contain two integers X, Y (-10^3 leq X, Y leq 10^3) representing the coordinates of a bus stop on a 2D plane. Output the minimum total cost required to connect all bus stops with the given condition. Ensure to output the result as a floating point number with at most 6 decimal places. Example input: ``` 4 0 0 0 1 1 0 1 1 ``` Example output: ``` 3.000000 ``` Explanation: The minimum cost routes can be the edges: - (0,0) to (0,1) with cost 1 - (0,0) to (1,0) with cost 1 - (1,0) to (1,1) with cost 1 Total cost = 1 + 1 + 1 = 3.000000","solution":"import heapq import math def calculate_distance(p1, p2): Calculate Euclidean distance between two points in 2D plane. return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def minimum_cost_to_connect_bustops(N, coordinates): Calculate the minimum cost to connect all bus stops. # Create a list of edges with their distances edges = [] for i in range(N): for j in range(i + 1, N): dist = calculate_distance(coordinates[i], coordinates[j]) edges.append((dist, i, j)) # Sort edges based on the distance edges.sort() # Use union-find to detect cycles parent = list(range(N)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) # Path compression return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY # Kruskal\'s minimum spanning tree algorithm min_cost = 0 edge_count = 0 for dist, u, v in edges: if find(u) != find(v): union(u, v) min_cost += dist edge_count += 1 if edge_count == N - 1: break return min_cost # Reading inputs if needed if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) coordinates = [(int(data[i * 2 + 1]), int(data[i * 2 + 2])) for i in range(N)] result = minimum_cost_to_connect_bustops(N, coordinates) print(f\\"{result:.6f}\\")"},{"question":"Anna likes sequences that have alternation between odd and even elements. She defines an alternating sequence as a sequence where each pair of adjacent elements has one odd and one even element. She wrote down a sequence of integers and now she wants to know if she can rearrange those integers into an alternating sequence. You are given several test cases. For each test case, determine if it is possible to rearrange the sequence into an alternating sequence. The first line provides a single integer t (1 ≤ t ≤ 10000) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n space-separated integers ai (1 ≤ ai ≤ 100000). For each test case, output \\"YES\\" if it is possible to rearrange the sequence into an alternating sequence, otherwise output \\"NO\\".","solution":"def can_rearrange_to_alternating_sequence(t, test_cases): results = [] for case in test_cases: n, sequence = case evens = [num for num in sequence if num % 2 == 0] odds = [num for num in sequence if num % 2 != 0] if abs(len(evens) - len(odds)) <= 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In this problem, you are tasked with developing a program to predict the next number in a sequence of integers. The sequence is part of a known pattern, and your goal is to identify this pattern and accurately predict the next number in the series. # Input: Your program will receive a single integer t, indicating the number of test cases, 1 le t le 100. This is followed by t test cases. Each test case consists of a single line containing a sequence of integers separated by spaces. The length of each sequence is between 3 and 10 integers, inclusive. Each integer in the sequence is between -10^9 and 10^9. # Output: For each test case, output the next integer in the sequence following the identified pattern on a separate line. # Example: Input: ``` 3 1 2 3 4 2 4 8 16 5 10 15 20 ``` Output: ``` 5 32 25 ``` # Explanation: In the first test case, the sequence is increasing by 1, so the next number is 5. In the second test case, the sequence is doubling each time, so the next number is 32. In the third test case, the sequence is increasing by 5 each time, so the next number is 25. Your solution should handle different types of sequences, including but not limited to arithmetic sequences, geometric sequences, and other common patterns. Ensure that your program handles edge cases and large numbers efficiently.","solution":"def next_in_sequence(seq): Predicts the next number in a sequence of integers following an identifiable pattern. :param seq: A list of integers representing the sequence. :return: The predicted next integer in the sequence. # Check for arithmetic sequence if all(seq[i] - seq[i - 1] == seq[1] - seq[0] for i in range(2, len(seq))): diff = seq[1] - seq[0] return seq[-1] + diff # Check for geometric sequence if all(seq[i] / seq[i - 1] == seq[1] / seq[0] for i in range(2, len(seq))): ratio = seq[1] / seq[0] return seq[-1] * ratio # Add other patterns check here as necessary return None # In case no pattern is recognized def predict_sequence(t, test_cases): results = [] for seq in test_cases: results.append(next_in_sequence(seq)) return results"},{"question":"In a telecommunication network, there are n servers connected by m two-way channels. Each channel has a latency associated with it, representing the time it takes for a signal to travel from one server to another. The network needs to ensure that communication between the servers is efficient. Therefore, the task is to minimize the total latency across the network by selecting a subset of channels that connect all servers. You are asked to determine the minimum total latency required to connect all servers such that there remains a path between any two servers. The first line of the input contains two integers n and m (2 leq n leq 100,000, 1 leq m leq 200,000) representing the number of servers and the number of channels, respectively. The next m lines describe the channels. Each line contains three integers u, v, and w (1 le u, v le n, u ne v, 1 le w le 10^6) indicating a channel with a latency w between servers u and v. Output a single integer — the minimum total latency required to ensure that all servers are connected. # Example Input: ``` 4 5 1 2 3 1 3 1 2 3 2 3 4 4 2 4 5 ``` Output: ``` 7 ``` Explanation: One way to achieve the minimum total latency is to select channels between servers: [ (1, 3) ], [ (2, 3) ], and [ (3, 4) ], giving a total latency of (1 + 2 + 4 = 7).","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_y] < rank[root_x]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): edges = sorted(edges, key=lambda edge: edge[2]) parent = [i for i in range(n)] rank = [0] * n mst_weight = 0 mst_edges = 0 for edge in edges: u, v, w = edge if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_weight += w mst_edges += 1 if mst_edges == n - 1: break return mst_weight def minimum_latency(n, m, channels): edges = [(u-1, v-1, w) for u, v, w in channels] return kruskal(n, edges)"},{"question":"A robotics company is developing a system to control a fleet of drones that need to deliver packages to various destinations in a city. Each package has a unique weight, and each drone has a maximum carrying capacity. The system needs to ensure that the packages are distributed among the drones in such a way that the total weight carried by each drone does not exceed its capacity. Each drone can make multiple trips to complete all deliveries, but we want to minimize the maximum number of trips any single drone must make. Given the number of drones and their respective carrying capacities, and a list of package weights that need to be delivered, write a program to determine the minimum possible value of the maximum number of trips any drone makes to complete all deliveries. The first input line contains two space-separated integers n and m — the number of drones and the number of packages, respectively. The second input line contains n space-separated integers representing the carrying capacities of the drones. The third input line contains m space-separated integers representing the weights of the packages. The input limitations for getting 30 points are: - (1 leq n, m leq 10^3) - (1 leq text{capacity_i}, text{weight_j} leq 10^6) The input limitations for getting 100 points are: - (1 leq n, m leq 10^5) - (1 leq text{capacity_i}, text{weight_j} leq 10^9) Print a single integer representing the minimum possible value of the maximum number of trips any drone makes to complete all deliveries. # Example: Input: ``` 3 5 10 15 20 5 10 5 7 8 ``` Output: ``` 2 ``` In this example, one possible distribution of the packages could be: - Drone 1 with capacity 10: trips [5, 5], [5] => 2 trips - Drone 2 with capacity 15: trips [10], [10] => 2 trips - Drone 3 with capacity 20: trips [7, 8] => 1 trip So, the minimum possible value of the maximum number of trips any drone makes is 2.","solution":"def minimum_max_trips(n, m, capacities, weights): capacities.sort(reverse=True) weights.sort(reverse=True) def can_distribute(max_trips): trips = [0] * n index = 0 for weight in weights: placed = False for i in range(n): if trips[i] < max_trips and capacities[i] >= weight: trips[i] += 1 placed = True break if not placed: return False return True left, right = 1, m while left < right: mid = (left + right) // 2 if can_distribute(mid): right = mid else: left = mid + 1 return left # Example usage: # n, m = 3, 5 # capacities = [10, 15, 20] # weights = [5, 10, 5, 7, 8] # print(minimum_max_trips(n, m, capacities, weights)) # Output: 2"},{"question":"Given two strings, write a function to determine if the first string is a rotation of the second string using only one call to a string manipulation method. Input: - The input consists of two space-separated strings, s1 and s2 (1 ≤ |s1| = |s2| ≤ 100, where |s| denotes the length of the string and both strings consist of printable ASCII characters). Output: - Output \\"Yes\\" if s1 is a rotation of s2, otherwise output \\"No\\". Example: Input: waterbottle erbottlewat Output: Yes Input: hello lohel Output: Yes Input: rotation tationro Output: Yes Input: abc cba Output: No","solution":"def is_rotation(s1, s2): Determines if the first string s1 is a rotation of the second string s2. if len(s1) != len(s2): return \\"No\\" # Concatenate s2 with itself and check if s1 is a substring if s1 in (s2 + s2): return \\"Yes\\" return \\"No\\""},{"question":"You are given an array of integers. Your task is to find the length of the longest subarray which contains at most two different integers. A subarray is a contiguous part of an array. For example, in the array [1, 2, 1, 2, 3, 2, 2, 1], the longest subarray with at most two distinct integers is [1, 2, 1, 2], which has length 4. Write a function `longest_subarray(arr)` that takes a list of integers `arr` as input and returns the length of the longest subarray with at most two different integers. # Input - The first line contains an integer `n` (1 le n le 10^5), the number of elements in the array. - The second line contains `n` integers representing the elements of the array. # Output - Return a single integer representing the length of the longest subarray with at most two different integers. # Example Input: ``` 8 1 2 1 2 3 2 2 1 ``` Output: ``` 4 ``` # Note In the example, the subarray [1, 2, 1, 2] is the longest subarray with at most two different integers, having a length of 4.","solution":"def longest_subarray(arr): Returns the length of the longest subarray with at most two different integers. n = len(arr) if n == 0: return 0 left, right = 0, 0 max_len = 0 count = {} while right < n: if arr[right] in count: count[arr[right]] += 1 else: count[arr[right]] = 1 while len(count) > 2: count[arr[left]] -= 1 if count[arr[left]] == 0: del count[arr[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"You are given an array of integers representing the height of people standing in a line. The number of people in the line is n. They are asked to adjust their positions so that the absolute difference between the height of every two adjacent persons is minimized. Each person can swap places with any other person. Given the array of heights, determine the minimum possible value of the absolute difference between the heights of any two adjacent persons after any number of swaps. Input: - The first line contains a single integer n (2 le n le 10^5), the number of people in the line. - The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9), representing the heights of the people. Output: - Output a single integer, the minimum possible value of the maximum absolute difference between the heights of any two adjacent persons after the optimal arrangement. **Example 1:** ``` Input: 5 4 2 3 1 5 Output: 1 ``` **Example 2:** ``` Input: 3 10 20 30 Output: 10 ``` **Example 3:** ``` Input: 6 12 11 10 9 8 7 Output: 1 ``` **Explanation:** In Example 1, after arranging the heights in ascending order as [1, 2, 3, 4, 5], the maximum absolute difference between any two adjacent heights is minimized to 1. In Example 2, the heights are already in the best possible order; therefore, the maximum absolute difference is 10. In Example 3, arranging the heights as [7, 8, 9, 10, 11, 12] minimizes the maximum absolute difference to 1.","solution":"def min_max_absolute_difference(n, heights): Returns the minimum possible value of the maximum absolute difference between the heights of any two adjacent persons after arranging them optimally. # Sort the heights sorted_heights = sorted(heights) # Initialize the minimum maximum absolute difference min_max_diff = float(\'inf\') # Calculate the differences between adjacent persons after sorting for i in range(1, n): min_max_diff = min(min_max_diff, sorted_heights[i] - sorted_heights[i - 1]) return min_max_diff"},{"question":"In an enchanted forest, there is a magical tree with infinite branches, each branch can hold zero or more gnomes. The branches are labeled with consecutive integers from left to right, with branch 0 being the central branch. Initially, all branches are empty. The forest guardian, Fermat, is given a permutation g_1, g_2, ldots, g_n of integers from 1 to n that was chosen uniformly at random among all permutations of length n. At time step 1, gnome g_1 sits on branch 0. At each time step i from 2 to n, Fermat decides whether the gnome g_i should stay on the same branch as the previous gnome, move to the branch on the left, or move to the branch on the right. The gnome sits on the chosen branch. If the branch already contains a gnome, the new gnome will overwrite the previous gnome. After the placement of all gnomes, a sequence c is formed by collecting all gnomes on the branches from left to right, ignoring any empty branches. Fermat\'s task is to maximize the length of the longest decreasing subsequence of sequence c. You are to help Fermat determine the largest possible value of his task if he acts optimally. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 1000). Description of the test cases follows. Each test case is given in two lines. The first line of each test case contains a single integer n (2 le n le 15,000) — the length of the permutation given to Fermat. The second line contains n distinct integers g_1, g_2, ldots, g_n (1 le g_i le n) — the elements of the permutation. It is guaranteed that the permutation was chosen uniformly at random among all permutations of the corresponding length. The sum of n over all test cases does not exceed 15,000. For each test case, output a single integer — the largest possible value of Fermat\'s task. The longest decreasing subsequence of sequence c is the longest decreasing sequence that can be obtained from c by deletion of several (possibly, zero or all) elements. The subsequence must be strictly decreasing. In the first test case, Fermat can only take an action at time step 2. If Fermat keeps the gnome on branch 0, sequence c will be [2]. If Fermat moves to the left, to branch -1, sequence c will be [2, 1]. If Fermat moves to the right, to branch 1, sequence c will be [1, 2]. Only in the second case the length of the longest decreasing subsequence of c is 2, therefore, the answer is 2. In the second test case, one of the optimal sequences of actions looks as follows: move to the left at times 2 and 3, and move to the right at time step 4. Then sequence c will be equal to [3, 2, 1], and the longest decreasing subsequence is 3. In the third test case, one of the best strategies is to always move to the left. Then sequence c will be equal to [7, 4, 3, 2, 1], and the length of its longest decreasing subsequence is 5. In the fourth test case, one of the best actions is to move to the right four times, then move to the left once, and stay on the branch once. Sequence c will be equal to [6, 5, 4, 3, 2], and the length of the longest decreasing subsequence is 5.","solution":"def longest_decreasing_subsequence_length(n, g): Given n and a permutation g from 1 to n, computes the length of the longest decreasing subsequence. # To maximize the length of the longest decreasing subsequence, we should take gnomes in decreasing order. # Therefore, the length of longest decreasing subsequence is essentially the number of gnomes itself. return n def solve_the_task(t, test_cases): results = [] for n, g in test_cases: results.append(longest_decreasing_subsequence_length(n, g)) return results"},{"question":"You are given an array of integers representing people\'s waiting times in a queue. Your task is to determine the minimum possible total waiting time for all people if you can rearrange the order in which they are served. The waiting time of a person is defined as the total time they have to wait from the beginning until they receive service, not including their own service time. For example, if the array is [8, 1, 5], one optimal way to serve these people is to serve the person with a waiting time of 1 first, then the person with a waiting time of 5, and lastly the person with a waiting time of 8. The waiting times would then be: - The first person waits 0 minutes. - The second person waits 1 minute (the time taken to serve the first person). - The third person waits 1 + 5 = 6 minutes (the time taken to serve the first and the second person). The total waiting time of 0 + 1 + 6 = 7 minutes is minimized. Write a function that takes an array of integers representing the waiting times and returns the minimum possible total waiting time for all people. Input: - An integer n (1 ≤ n ≤ 1000) representing the number of people. - An array of n integers where each integer t (1 ≤ t ≤ 1000) represents the waiting time of one person. Output: - Print a single integer that is the minimum possible total waiting time. # Example Input: ``` 3 8 1 5 ``` Output: ``` 7 ``` # Explanation One optimal way to serve the people is in the order of their waiting times as [1, 5, 8]. The total waiting time is minimized to 7 minutes.","solution":"def minimum_total_waiting_time(n, waiting_times): Returns the minimum possible total waiting time for all people if they are served in an optimal order. waiting_times.sort() total_waiting_time = 0 current_wait_time = 0 for i in range(n - 1): current_wait_time += waiting_times[i] total_waiting_time += current_wait_time return total_waiting_time"},{"question":"You are given a directed acyclic graph with `n` vertices and `m` edges. Your task is to find the maximum sum of weights on any path in this graph starting from the first vertex (vertex 1). The first line of the input contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000), where `n` is the number of vertices and `m` is the number of edges. Each of the next `m` lines contains a triple `u`, `v`, `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000), where `u` and `v` are edge endpoints and `w` is the edge length. It is guaranteed that the graph is acyclic and there is a path from vertex 1 to every other vertex. Output the maximum sum of weights along any path starting from vertex 1.","solution":"def find_max_path_sum(n, m, edges): from collections import defaultdict, deque # Create a topological ordering of the vertices graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v, w in edges: graph[u].append((v, w)) in_degree[v] += 1 # Perform a topological sort using Kahn\'s Algorithm topo_order = [] zero_in_deg_queue = deque() for vertex in range(1, n + 1): if in_degree[vertex] == 0: zero_in_deg_queue.append(vertex) while zero_in_deg_queue: current = zero_in_deg_queue.popleft() topo_order.append(current) for neighbor, weight in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_deg_queue.append(neighbor) # Initialize distance array with negative infinity dist = [-float(\'inf\')] * (n + 1) dist[1] = 0 # Start from vertex 1 # Relax edges according to topological order for u in topo_order: for v, w in graph[u]: if dist[u] + w > dist[v]: dist[v] = dist[u] + w return max(dist) # Example usage: # n = 5 # m = 6 # edges = [ # (1, 2, 5), # (1, 3, 2), # (2, 3, 2), # (2, 4, 3), # (3, 4, 1), # (3, 5, 5), # ] # print(find_max_path_sum(n, m, edges)) # Output: 12"},{"question":"The city\'s transportation system consists of n bus stops connected by m direct roads. You need to help in designing the quickest way from the first bus stop to the last one. Each road has a travel time associated with it. Given the bus stops and roads, determine the shortest time needed to travel from the first bus stop to the last bus stop. If it\'s not possible to travel from the first to the last bus stop, output -1. The first line of input contains two space-separated integers n (1 ≤ n ≤ 10^5) and m (0 ≤ m ≤ 2 x 10^5), the number of bus stops and roads, respectively. Each of the next m lines contains three space-separated integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 10^9), which means there exists a direct road from bus stop u to bus stop v with a travel time of t. All roads are unidirectional. Print a single integer: the shortest time to travel from bus stop 1 to bus stop n. If it is not possible, print -1.","solution":"import heapq def shortest_travel_time(n, m, roads): Returns the shortest time to travel from bus stop 1 to bus stop n. If it is not possible, returns -1. # Create adjacency list graph = {i: [] for i in range(1, n+1)} for u, v, t in roads: graph[u].append((v, t)) # Use Dijkstra\'s algorithm pq = [(0, 1)] # (time, bus stop) times = {i: float(\'inf\') for i in range(1, n+1)} times[1] = 0 while pq: current_time, u = heapq.heappop(pq) if current_time > times[u]: continue for v, time in graph[u]: new_time = current_time + time if new_time < times[v]: times[v] = new_time heapq.heappush(pq, (new_time, v)) return times[n] if times[n] != float(\'inf\') else -1"},{"question":"You are tasked with creating a new chat application that allows users to join and leave a chat room at designated times throughout the day. Given an array representing the entry and exit times of users, determine the maximum number of users present in the chat room at any point in time. Each user is represented by two integers: - `entry` — the time when the user joins the chat room. - `exit` — the time when the user leaves the chat room. # Input: - The first line contains a single integer `t` (1 le t le 50) — the number of test cases. - Each test case starts with an integer `n` (1 le n le 1000) — the number of users. - The next `n` lines each contain two integers `entry_i` and `exit_i` (0 le entry_i < exit_i le 1440), representing the entry and exit times of the `i`-th user. # Output: - For each test case, output a single integer — the maximum number of users present in the chat room at any one time. # Example: Input: ``` 2 3 1 5 2 7 4 6 2 10 20 15 25 ``` Output: ``` 3 2 ``` # Explanation: - In the first test case, the users are in the room during the following times: - First user from 1 to 5 - Second user from 2 to 7 - Third user from 4 to 6 The peak number of users in the chat room is 3 (i.e., from time 4 to 5 when all three users are present). - In the second test case, the users are in the room during the following times: - First user from 10 to 20 - Second user from 15 to 25 The peak number of users in the chat room is 2 (i.e., from time 15 to 20 when both users are present). Your task is to compute the peak number of users present in the chat room for each test case.","solution":"def max_users_in_chat(t, test_cases): results = [] for test_case in test_cases: n = test_case[0] times = test_case[1] events = [] for entry, exit in times: events.append((entry, 1)) # user enters events.append((exit, -1)) # user exits events.sort() current_users = max_users = 0 for time, change in events: current_users += change if current_users > max_users: max_users = current_users results.append(max_users) return results"},{"question":"Given a list of integers, determine if the list is symmetric. A list is symmetric if it reads the same forwards and backwards. For example, [1, 2, 3, 2, 1] is symmetric. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the list. The second line contains n integers separated by spaces — the elements of the list. Output Output \\"YES\\" if the list is symmetric, otherwise output \\"NO\\".","solution":"def is_symmetric(lst): Returns \'YES\' if the input list is symmetric, otherwise returns \'NO\'. if lst == lst[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an integer array a of length n. Your task is to find the length of the longest subarray that contains only distinct values. The first line contains one integer n (1 le n le 100000). The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9). Print a single integer — the length of the longest subarray that contains only distinct values. In the first example, the longest subarray with all distinct values is [1, 2, 3, 4, 5] and its length is 5. In the second example, the longest subarray with all distinct values is [1, 2, 3, 4] and its length is 4.","solution":"def longest_distinct_subarray_length(n, a): This function returns the length of the longest subarray with all distinct values. Parameters: n (int): The length of the array a (List[int]): The array of integers Returns: int: The length of the longest subarray with distinct values last_occurrence = {} max_length = 0 start = 0 for i in range(n): if a[i] in last_occurrence and last_occurrence[a[i]] >= start: start = last_occurrence[a[i]] + 1 last_occurrence[a[i]] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"You\'ve just received your first paycheck and have decided to invest it in a mix of stocks available in the market. There are `n` stocks available, each with an initial price. To diversify your investments, you want to buy exactly `k` different stocks such that the total cost of the stocks you buy is minimized. The first line of the input contains two integers `n` and `k` (1 ≤ `k` ≤ `n` ≤ 10^5), where `n` is the number of available stocks, and `k` is the number of different stocks you need to buy. The second line contains `n` integers `p1, p2, ..., pn` (1 ≤ pi ≤ 10^9), where `pi` is the price of the i-th stock. Print a single integer, the minimum total cost to buy exactly `k` different stocks. # Example **Input:** ``` 5 3 3 5 2 8 6 ``` **Output:** ``` 10 ``` **Explanation:** To minimize the total cost, you should buy the cheapest three stocks, which are priced 2, 3, and 5, giving a total of 2 + 3 + 5 = 10.","solution":"def minimize_stock_cost(n, k, prices): Returns the minimum total cost to buy exactly k different stocks from the given prices. :param n: Total number of stocks. :param k: Number of stocks to buy. :param prices: List of prices of each stock. :return: Minimum total cost to buy k different stocks. # Sort the prices in ascending order prices.sort() # Sum the first k elements in the sorted list total_cost = sum(prices[:k]) return total_cost"},{"question":"The organizers of a marathon event want to manage the registration process. Each participant registers with their name and the time they took to finish the race. The event manager needs a program to track the finish times and determine the position of each participant. You are tasked with writing a program that takes the input of participant names and their corresponding finishing times, then outputs the list of participants sorted by their finishing times in ascending order. If two participants have the same finishing time, they should maintain their order of registration. The first line of input contains a positive integer n (1 ≤ n ≤ 100), the number of participants. The next n lines each contain a participant’s name (consisting of up to 100 lowercase and uppercase letters) and their finishing time in minutes (a positive integer). Output the list of participants in the same format, but sorted by their finishing times in ascending order. If two participants have the same finishing time, they should appear in the order they were originally input. # Example: Input: 6 Alice 125 Bob 130 Cathy 125 David 140 Eva 130 Frank 135 Output: Alice 125 Cathy 125 Bob 130 Eva 130 Frank 135 David 140","solution":"def sort_participants(input_list): Sorts a list of participants by their finishing time. If two participants have the same finishing time, they maintain their original order of registration. Args: input_list (list of tuples): A list where each tuple contains a participant\'s name and their finishing time. Returns: list of tuples: A list of participants sorted by their finishing time. n = int(input_list[0]) participants = [(input_list[i].split()[0], int(input_list[i].split()[1])) for i in range(1, n+1)] return sorted(participants, key=lambda participant: participant[1])"},{"question":"Polycarpus is managing a massive server farm consisting of two types of servers: type A and type B. Each type of server logs multiple events, and each event can either be a success or a failure. Given a record of all events for a single day, Polycarpus wants to determine the overall success rate for each server type and identify whether it meets the expected threshold. The goal for Polycarpus is to ensure that at least 60% of the events logged by each server type are successful to consider the server type operational. Write a program to help Polycarpus analyze the logs and determine for each server type whether it is \\"OPERATIONAL\\" or \\"NOT OPERATIONAL\\". # Input - The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of logged events for that day. - Each of the following n lines contains two integers ti and ei (1 ≤ ti ≤ 2; ei = 0 or 1). If ti = 1, it means the event was logged by a type A server, otherwise, the event was logged by a type B server. ei represents the event result where 1 means a success and 0 means a failure. # Output - In the first line, print the status of server type A: \\"OPERATIONAL\\" if at least 60% of the events are successful, otherwise \\"NOT OPERATIONAL\\". - In the second line, print the status of server type B: \\"OPERATIONAL\\" if at least 60% of the events are successful, otherwise \\"NOT OPERATIONAL\\". # Example Input ``` 5 1 1 1 0 2 1 2 1 2 0 ``` Output ``` NOT OPERATIONAL OPERATIONAL ``` In this example, server type A logged two events with one success (50%), which is less than 60%, so it is \\"NOT OPERATIONAL\\". Server type B logged three events with two successes (66.67%), which is greater than 60%, so it is \\"OPERATIONAL\\".","solution":"def server_status(n, logs): Determines the operational status of two types of servers based on their event logs. n: int - number of logged events logs: list of tuples - each tuple contains two integers (ti, ei) Returns a tuple containing two strings: the status of server type A and server type B. count_A = success_A = count_B = success_B = 0 for ti, ei in logs: if ti == 1: count_A += 1 if ei == 1: success_A += 1 elif ti == 2: count_B += 1 if ei == 1: success_B += 1 threshold = 0.60 status_A = \\"OPERATIONAL\\" if count_A > 0 and (success_A / count_A) >= threshold else \\"NOT OPERATIONAL\\" status_B = \\"OPERATIONAL\\" if count_B > 0 and (success_B / count_B) >= threshold else \\"NOT OPERATIONAL\\" return (status_A, status_B)"},{"question":"Polycarp is planning to buy some houseplants for his new apartment. He has a list of plant names along with their prices. Polycarp wants to minimize the cost he spends on houseplants, but he must follow these constraints: 1. Polycarp wants to buy exactly k different plants. 2. He does not want to spend more than a given budget b. Your task is to help Polycarp find the minimum possible cost to buy exactly k different plants while not exceeding the budget b. It might be the case that it is not possible to buy k different plants within the given budget b. The first line of the input contains three integers n, k, and b (1 ≤ k ≤ n ≤ 10^5, 1 ≤ b ≤ 10^9), where n is the number of different plants available, k is the exact number of different plants Polycarp wants to buy, and b is the budget. The second line contains n integers pi (1 ≤ pi ≤ 10^6) representing the price of the ith plant. If it is possible to buy exactly k different plants while staying within the budget, output the minimum cost. Otherwise, output -1. **Example:** ``` Input: 5 3 100 20 50 30 60 10 Output: 60 ```","solution":"def minimum_cost_to_buy_plants(n, k, b, prices): Returns the minimum cost to buy exactly k different plants without exceeding the budget b. Parameters: - n (int): Number of different plants available. - k (int): Exact number of different plants to buy. - b (int): Budget. - prices (list of int): List of prices of each plant. Returns: - int: Minimum cost to buy k different plants within budget, or -1 if not possible. # Sort the prices in ascending order. prices.sort() # Select the k cheapest plants and calculate their total cost. selected_cost = sum(prices[:k]) # Check if the selected cost is within the budget. if selected_cost <= b: return selected_cost else: return -1"},{"question":"You are given a list of friendships, where each friendship is represented by a pair of integers [x, y]. This means that person x and person y are friends. Each person has a unique integer ID. A community is a group of people who are all directly or indirectly friends with each other. Two people are considered in the same community if there is a sequence of friends that connects them. Write a function `count_communities(n, friendships)` that takes in two parameters: 1. `n` (an integer, 1 ≤ n ≤ 1000) - the total number of people. 2. `friendships` (a list of pairs, 0 ≤ len(friendships) ≤ 10000) - the list of friendships. The function should return the number of communities. Example: ``` n = 5 friendships = [[1, 2], [2, 3], [4, 5]] Output: 2 Explanation: There are two communities. One consisting of people {1, 2, 3} and the other consisting of people {4, 5}. ``` Example: ``` n = 3 friendships = [[1, 2], [2, 3], [3, 1]] Output: 1 Explanation: All three people {1, 2, 3} are in the same community. ``` The function should efficiently compute the number of communities using appropriate data structures for representing and manipulating the groups of friends.","solution":"def count_communities(n, friendships): Returns the number of communities based on the given number of people and friendships. :param n: int - Total number of people. :param friendships: List[List[int]] - List of pairs representing friendships. :return: int - Number of communities. parent = list(range(n+1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX for x, y in friendships: union(x, y) communities = set() for i in range(1, n+1): communities.add(find(i)) return len(communities)"},{"question":"A warehouse has a total of n items. Each item i has a weight w_i (1 leq w_i leq 100) and a value v_i (1 leq v_i leq 100). You want to maximize the total value of the selected items, but the total weight cannot exceed a given maximum weight W (1 leq W leq 1000). Given the weights and values of the items, determine the maximum total value of items you can select without exceeding the weight limit W. **Input:** - The first line contains two integers n (1 leq n leq 100) and W. - The following n lines each contain two integers w_i and v_i. **Output:** - Output a single integer, the maximum total value of selected items. **Example:** Input: ``` 4 50 10 60 20 100 30 120 40 50 ``` Output: ``` 220 ``` In this case, selecting items with weights 10, 20, and 30 results in a total weight of 60 and a total value of 280. However, to not exceed the weight limit, selecting items with weights 10 and 30 results in a total value of 220.","solution":"def knapsack_max_value(n, W, items): Returns the maximum total value of the selected items without exceeding the weight limit W. :param n: Number of items. :param W: Maximum weight limit. :param items: List of tuples, each containing (weight, value) of the items. :return: Maximum total value of items. # Initialize a DP table with zeros, (W+1) columns for weight 0 to W. dp = [0] * (W + 1) # Iterate over each item for weight, value in items: # Traverse the DP table from right to left for capacity in range(W, weight - 1, -1): dp[capacity] = max(dp[capacity], dp[capacity - weight] + value) return dp[W]"},{"question":"Write a function `find_most_common_word` that takes a string of text as input and returns the most common word in the text. If there is a tie, return the word that appears first in the text. Punctuation should be ignored and words should be compared in a case-insensitive manner. Assume that the input string contains at least one word. # Function Signature ```python def find_most_common_word(text: str) -> str: ``` # Input - `text` (string): A string of text which may include spaces and punctuation. # Output - (string): The most common word in the text. # Examples ```python assert find_most_common_word(\\"The sun is shining. The weather is great!\\") == \\"the\\" assert find_most_common_word(\\"Go big or go home. Go rob a bank. GO!\\") == \\"go\\" assert find_most_common_word(\\"Hello world! Hello, universe.\\") == \\"hello\\" ``` # Constraints - Words consist of alphabetic characters only. - The input string will contain non-alphabetic characters such as punctuation and spaces. - Words are case insensitive, meaning \\"Hello\\" and \\"hello\\" should be considered the same word. - If there are multiple words with the same frequency, the function should return the first occurring word in the text as the result.","solution":"import re from collections import Counter def find_most_common_word(text: str) -> str: # Convert the text to lower case text = text.lower() # Remove punctuation using regex, replacing them with spaces cleaned_text = re.sub(r\'[^ws]\', \' \', text) # Split the text into words words = cleaned_text.split() # Use Counter to count the frequencies of each word word_counts = Counter(words) # Most common words sorted by their appearance order in text most_common_word = max(words, key=word_counts.get) return most_common_word"},{"question":"You are given an undirected weighted graph with n nodes and m edges. Your task is to find the minimum sum of weights of edges that form a path from node 1 to node n. If there is no such path, return -1. The first line contains two integers n (2 le n le 100,000) — the number of nodes, and m (1 le m le 200,000) — the number of edges. Each of the next m lines contains three integers u, v, and w (1 le u, v le n, 1 le w le 10^9) describing an edge between nodes u and v with weight w. Print the minimum sum of weights of edges that form a path from node 1 to node n. If there is no such path, print -1. # Example Input: ``` 5 6 1 2 1 2 3 2 3 4 3 4 5 4 1 3 2 3 5 1 ``` Output: ``` 5 ``` Explanation: The minimum weight path from node 1 to node 5 is 1 -> 3 -> 5 with total weight: 2 + 1 = 3. Input: ``` 4 2 1 2 3 3 4 5 ``` Output: ``` -1 ``` Explanation: There is no path from node 1 to node 4.","solution":"import heapq import sys def dijkstra(n, edges, start, end): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) if u == end: return current_dist if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return -1 if dist[end] == float(\'inf\') else dist[end] def min_path_weight(n, m, edge_list): return dijkstra(n, edge_list, 1, n)"},{"question":"Jane is very fond of sequences. On her recent birthday, she received a sequence of integers as a gift. After some thought, she decided to play with it by finding subsequences and computing their properties. Given a sequence of integers, she particularly enjoys finding the longest increasing subsequence (LIS). An **increasing subsequence** is a subsequence in which every element is greater than the preceding one. Jane wants to find both the length of the LIS and one such subsequence. Write a program to help Jane with her task. The input to the program is an array of integers, and the output should be the length of the longest increasing subsequence as well as one such subsequence. # Input The first line contains an integer n (1 le n le 10^5), which is the length of the sequence. The second line contains n integers a_1, a_2, ldots, a_n, where a_i (1 le a_i le 10^9) is the i-th element of the sequence. # Output On the first line, output the length of the longest increasing subsequence. On the second line, output any one of the longest increasing subsequences. # Sample Input ``` 6 5 2 8 6 3 6 9 ``` # Sample Output ``` 4 2 3 6 9 ``` # Explanation In the sample input, the longest increasing subsequence has a length of 4 and one such subsequence is {2, 3, 6, 9}. Note that other subsequences like {5, 6, 9} or {2, 8, 9} also exist but are not the longest. Ensure to handle sequences efficiently to maintain performance.","solution":"def lis(sequence): Returns the length of the longest increasing subsequence (LIS) and one of the LIS. if not sequence: return 0, [] n = len(sequence) dp = [1] * n # dp[i] will hold the length of LIS ending at index i previous_index = [-1] * n # To help reconstruct the LIS # Compute the length of LIS ending at each index for i in range(1, n): for j in range(i): if sequence[i] > sequence[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 previous_index[i] = j # Find the index of the maximum length in dp max_length = max(dp) max_index = dp.index(max_length) # Reconstruct the LIS lis_sequence = [] while max_index != -1: lis_sequence.append(sequence[max_index]) max_index = previous_index[max_index] lis_sequence.reverse() return max_length, lis_sequence"},{"question":"You are given a list of n integers representing the weights of various items. You are tasked with writing a function that determines whether it is possible to partition these items into two subsets such that the sum of weights in both subsets is equal. If such a partitioning is possible, the function should return True, otherwise it should return False. The function should take a single input: - A list `weights` of n integers `w1, w2, ..., wn` (1 ≤ n ≤ 100, 1 ≤ wi ≤ 1000). The function should return a boolean value: - True if the list can be partitioned into two subsets with equal sum. - False otherwise. Example --------- Input: weights = [1, 5, 11, 5] Output: True Explanation: The list can be partitioned into [1, 5, 5] and [11], where the sum in both subsets is 11. Input: weights = [1, 2, 3, 5] Output: False Explanation: The list cannot be partitioned into two subsets with equal sum. Note: The function should be efficient and handle the given constraints optimally.","solution":"def can_partition(weights): Determines if it is possible to partition the list of weights into two subsets such that the sum of weights in both subsets is equal. :param weights: List of integers representing weights :return: Boolean value indicating whether the partition is possible total_sum = sum(weights) if total_sum % 2 != 0: return False target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for weight in weights: for j in range(target, weight - 1, -1): dp[j] = dp[j] or dp[j - weight] return dp[target]"},{"question":"You are working on a project that involves managing a list of users and their associated scores. Each user is uniquely identified by a string username, and these usernames are case-insensitive (e.g., \\"Alice\\" and \\"alice\\" should be treated as the same user). Your task is to implement an operation to update the score of a user and another operation to get the current score of a user. You will have to handle two types of operations: 1. `update username score`: Updates the user\'s score to the given score value. If the user does not exist, add the user with the specified score. 2. `get username`: Returns the current score of the user. If the user does not exist, return -1. The input will be provided as: - First line contains an integer q (1 ≤ q ≤ 100,000) - the number of operations. - Each of the following q lines contains an operation in one of the two formats described above. Output the result for each `get` operation in the order they are provided. Example Input: ``` 6 update Alice 50 get alice update bob 30 get Bob update alice 70 get ALICE ``` Example Output: ``` 50 30 70 ``` Implement the solution in a programming language of your choice.","solution":"class UserManager: def __init__(self): self.user_scores = {} def update(self, username, score): self.user_scores[username.lower()] = score def get(self, username): return self.user_scores.get(username.lower(), -1) def handle_operations(q, operations): manager = UserManager() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"update\\": manager.update(parts[1], int(parts[2])) elif parts[0] == \\"get\\": results.append(manager.get(parts[1])) return results"},{"question":"You are playing a game called \\"Digit Sum Transform.\\" The game involves transforming an integer by repeatedly replacing it with the sum of its digits until the resultant number is a single digit. For instance, starting with the number 12345, the sum of its digits is 1 + 2 + 3 + 4 + 5 = 15, and then replacing 15 with the sum of its digits 1 + 5 = 6, which is a single-digit result. Given a starting integer, your task is to find the resultant single-digit number after applying the described transformation. Each test case contains an integer, which represents the number of starting integer values. The first line contains an integer n (1 le n le 1000) — the number of starting integer values. The following n lines each contain a starting integer a_i (0 le a_i le 10^{18}). For each starting integer, output the resultant single-digit number after applying the \\"Digit Sum Transform.\\" For example: If the input contains starting integers: 12345 9876 The output should be: 6 3","solution":"def digit_sum_transform(num): Returns the resultant single-digit number after applying the \\"Digit Sum Transform\\". while num >= 10: num = sum(int(digit) for digit in str(num)) return num"},{"question":"You are given an array with n integers representing the heights of pillars in a row. A jumping frog can jump from one pillar to another if the height difference between the pillars is at most k. The frog starts at the first pillar and aims to reach the last pillar with the minimum number of jumps. When the frog is on a pillar, it can decide to skip some intermediate pillars as long as the difference between the current pillar and the target pillar doesn\'t exceed k. Write a function to compute the minimum number of jumps the frog needs to reach from the first pillar to the last pillar. If it\'s not possible for the frog to reach the last pillar, return -1. # Input Format: - The first line contains two space-separated integers, n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9). - The second line contains n space-separated integers representing the heights of the pillars (1 ≤ height_i ≤ 10^9). # Output Format: - Print a single integer: the minimum number of jumps needed to reach the last pillar. If it\'s impossible, print -1. # Example: Input: ``` 5 2 1 3 1 4 6 ``` Output: ``` 3 ``` In this example, the frog can jump from: - Pillar 1 to Pillar 2 (height 1 to 3, |3-1| = 2) - Pillar 2 to Pillar 3 (height 3 to 1, |3-1| = 2) - Pillar 3 to Pillar 5 (height 1 to 6, |6-1| = 5) Constraints: - The array has at least one pillar and at most 100,000 pillars. - The height of each pillar is at least 1 and at most 1,000,000,000. - The maximum allowed height difference k is at least 1 and at most 1,000,000,000.","solution":"from collections import deque def min_jumps(pillars, k): n = len(pillars) if n == 1: return 0 # Use a deque for BFS queue = deque([(0, 0)]) # (current position, number of jumps) visited = [False] * n visited[0] = True while queue: position, jumps = queue.popleft() # Check from the current position to the farthest jumpable position for next_position in range(position + 1, n): if abs(pillars[next_position] - pillars[position]) <= k: if next_position == n - 1: return jumps + 1 if not visited[next_position]: visited[next_position] = True queue.append((next_position, jumps + 1)) else: # We can break early since further pillars will also be un-jumpable break return -1 # Example usage; # You can uncomment these lines to test the function manually. # n, k = 5, 2 # pillars = [1, 3, 1, 4, 6] # print(min_jumps(pillars, k)) # Output: 3"},{"question":"You are given a string `expr` representing a mathematical expression containing two types of brackets: round brackets `()` and square brackets `[]`. The expression can also contain integers and the operators `+`, `-`, `*`, and `/`. Your task is to check if the brackets in the given expression are balanced. An expression is said to be balanced if each opening bracket has a corresponding closing bracket of the same type, and the pairs of brackets are properly nested. For example: - The expression \\"[(2+3)*5]\\" is balanced. - The expression \\"[2+3)*5]\\" is not balanced because the round bracket is closed before the square bracket is closed. - The expression \\"[(2+3]*5)\\" is not balanced because the square bracket is opened but not closed. Write a function `is_balanced_expression(expr: str) -> bool` that takes the expression as a string input and returns a boolean value `True` if the expression is balanced, and `False` otherwise. **Constraints:** - `expr` is a non-empty string containing only digits (0-9), operators (+, -, *, /), and brackets ((), []). - The length of `expr` does not exceed 1000 characters. **Example:** ```python assert is_balanced_expression(\\"(2+3)*[5/(7-1)]\\") == True assert is_balanced_expression(\\"[(2+3]*5)\\") == False assert is_balanced_expression(\\"[2+3)*5]\\") == False assert is_balanced_expression(\\"(2+[3*4]-5)/2\\") == True assert is_balanced_expression(\\"(()[[]])\\") == True ``` Implement the function `is_balanced_expression`.","solution":"def is_balanced_expression(expr: str) -> bool: Returns True if the brackets in the mathematical expression `expr` are balanced, otherwise False. stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\'} for char in expr: if char in \'([\': stack.append(char) elif char in \')]\': if not stack or stack[-1] != matching_bracket[char]: return False stack.pop() return not stack"},{"question":"Vasya is an avid collector of coins, and he has an extensive collection of coins with varying values. He is planning to organize his coins in such a way that he can easily find out the total value of coins in any given range of his collection. Vasya\'s collection consists of coins numbered from 1 to N, where N is the total number of coins. Each coin has a specific value associated with it. Vasya needs to frequently calculate the total value of coins in the range from coin L to coin R (both inclusive). He also occasionally updates the value of a specific coin. Your task is to help Vasya with these operations efficiently. You need to write a program that supports the following operations: 1. Update the value of a specific coin. 2. Calculate the total value of coins in a specified range. Input format: - The first line contains two integers N and Q (1 ≤ N, Q ≤ 100,000) — the number of coins and the number of operations, respectively. - The second line contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 1000), where ai is the initial value of the i-th coin. - The next Q lines contain queries, each of which can be one of the following: * \\"1 x y\\" — Update the value of the x-th coin to y (1 ≤ x ≤ N, 1 ≤ y ≤ 1000). * \\"2 x y\\" — Calculate the total value of coins from coin x to coin y (1 ≤ x ≤ y ≤ N). Output format: - For each query of the second type, output the total value of coins in the specified range in a new line. Example: ``` Input: 5 4 1 2 3 4 5 2 1 3 1 2 5 2 1 3 2 2 5 Output: 6 9 19 ```","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, idx, delta): while idx <= self.size: self.tree[idx] += delta idx += idx & -idx def sum(self, idx): total = 0 while idx > 0: total += self.tree[idx] idx -= idx & -idx return total def range_sum(self, left, right): return self.sum(right) - self.sum(left - 1) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) Q = int(data[1]) coins = list(map(int, data[2:2 + N])) queries = data[2 + N:] fenwick_tree = FenwickTree(N) for i in range(N): fenwick_tree.update(i + 1, coins[i]) result = [] idx = 0 while idx < len(queries): query_type = int(queries[idx]) if query_type == 1: x = int(queries[idx + 1]) y = int(queries[idx + 2]) current_value = coins[x - 1] delta = y - current_value coins[x - 1] = y fenwick_tree.update(x, delta) idx += 3 else: x = int(queries[idx + 1]) y = int(queries[idx + 2]) result.append(fenwick_tree.range_sum(x, y)) idx += 3 sys.stdout.write(\'n\'.join(map(str, result)) + \'n\') if __name__ == \\"__main__\\": main()"},{"question":"You are given a list of integers. Your task is to determine how many elements in the list are greater than the previous element. The first line contains an integer n (1 ≤ n ≤ 1000) denoting the number of elements in the list. The second line contains n space-separated integers denoting the elements of the list. Output a single integer - the number of elements in the list that are greater than the previous element. Example: Input: 6 2 5 1 2 3 4 Output: 4 Explanation: In the list [2, 5, 1, 2, 3, 4], the elements that are greater than the previous element are 5, 2, 3, and 4. Thus, the output is 4.","solution":"def count_elements_greater_than_previous(n, elements): Returns the count of elements greater than the previous element in the list. Args: n (int): number of elements in the list elements (list of int): list of integers Returns: int: count of elements greater than the previous element count = 0 for i in range(1, n): if elements[i] > elements[i - 1]: count += 1 return count"},{"question":"You are given a long strip of land with n plots in a row, numbered from 1 to n. Each plot has a certain amount of fertile soil, represented as an integer array `fertility` where fertility[i] denotes the amount of fertile soil on the i-th plot. To improve the farming conditions, you have been asked to perform m operations on this strip of land. The operations can be one of the following two types: Operation 1: 1 l r y This operation decreases the fertility of every plot in the range [l, r] by a value y. More precisely, for every i in range [l, r], fertility[i] becomes equal to fertility[i] - y. Operation 2: 2 l r y This operation asks you to count the number of plots in the range [l, r] where the fertility is exactly y. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100000). The second line contains n integers, the i-th of which is fertility[i] (1 ≤ fertility[i] ≤ 100000). The next m lines describe the operations, each of which begins with an integer t (1 or 2) indicating the type of operation, followed by three integers l, r, and y (1 ≤ l ≤ r ≤ n, 1 ≤ y ≤ 100000). For each operation of the second type, print the result on a new line. # Input ``` n m fertility[1] fertility[2] ... fertility[n] t l r y t l r y ... t l r y ``` # Output For each operation of type 2, print a single integer indicating the number of plots with exactly y fertility in the specified range. # Example Input ``` 5 3 3 8 5 6 7 1 2 4 3 2 1 5 5 2 3 5 4 ``` Output ``` 1 0 ``` # Explanation 1. The first operation decreases fertility of plots 2, 3, and 4 by 3: fertility becomes [3, 5, 2, 3, 7]. 2. The second operation counts plots with fertility 5 in range 1 to 5: the result is 1. 3. The third operation counts plots with fertility 4 in range 3 to 5: the result is 0.","solution":"def process_operations(n, m, fertility, operations): Process the list of operations on the fertility array. Parameters: n (int): Number of plots. m (int): Number of operations. fertility (list of int): Fertility values of the plots. operations (list of tuples): The operations to be performed on the plots. Returns: list of int: Results of type 2 operations. results = [] for op in operations: t, l, r, y = op if t == 1: for i in range(l-1, r): fertility[i] -= y elif t == 2: count = sum(1 for i in range(l-1, r) if fertility[i] == y) results.append(count) return results"},{"question":"You are given a robot arm that can perform a series of operations on a string consisting of lowercase English letters. The robot can do two types of operations: 1. Cut the string into two parts. 2. Rejoin two strings. Initially, you the string is whole and no operations have been performed. You have to determine if, after performing a sequence of operations, the final structure of the string segments can form a palindrome. The operations are described in an array of commands Q, where each command is either \\"CUT x\\" (cut the string from position x, creating two segments) or \\"JOIN\\" (join the last two segments that were cut or joined). A string is said to be a palindrome if it reads the same forward and backward. Write a function that, given the initial string S and a sequence of commands Q, returns \\"YES\\" if the segments can be arranged to form a palindrome after all operations or \\"NO\\" otherwise. The first input line contains a string S of length l (1 le l le 10^5) consisting only of lowercase English letters. The second input line contains an integer m (1 le m le 10^5), where m is the number of commands. The next m lines each contain a command \\"CUT x\\" (1 le x < l) or \\"JOIN\\". # Example **Input:** ``` abccba 3 CUT 2 CUT 4 JOIN ``` **Output:** ``` YES ``` In this example, operations are: - First cut at position 2: \\"ab\\" \\"ccba\\" - Second cut at position 4 (original string index): \\"ab\\" \\"cc\\" \\"ba\\" - Join the last two segments: \\"ab\\" \\"ccba\\", which is a palindrome. Write a solution to check if the segments can form a palindrome after the given operations.","solution":"def can_form_palindrome(S, Q): Determines if the final segments of string S after performing the commands in Q can form a palindrome. # We only need to check the final state of the segments segments = [S] for command in Q: if command.startswith(\\"CUT\\"): _, pos = command.split() pos = int(pos) last_segment = segments.pop() segments.append(last_segment[:pos]) segments.append(last_segment[pos:]) elif command == \\"JOIN\\": if len(segments) > 1: s1 = segments.pop() s2 = segments.pop() segments.append(s2 + s1) # Finally, check if the joined segments can form a palindrome final_string = \'\'.join(segments) return \\"YES\\" if final_string == final_string[::-1] else \\"NO\\""},{"question":"You are given an array of integers a_1, a_2, ldots, a_n. You need to perform q operations on this array where each operation could either be an update or a prefix sum query. **Task:** 1. An update operation is given by two integers: `1 i x`, which means setting the i^{th} element of the array to x. 2. A prefix sum query operation is given by a single integer: `2 k`, which means computing the sum of the first k elements of the array. The first line of input contains two integers n and q (1 le n, q le 2 cdot 10^5) — the number of elements in the array and the number of operations to be performed. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. The next q lines contain operations in the format described above. **Output:** For each prefix sum query operation, print the result on a new line. **Example:** **Input:** 5 5 1 2 3 4 5 2 3 1 2 10 2 3 1 4 7 2 4 **Output:** 6 14 21 **Explanation:** 1. The first query is `2 3`, the prefix sum of the first three elements (1+2+3) is 6. 2. The second query is `1 2 10`, it updates the element at index 2 to 10; the array becomes [1, 10, 3, 4, 5]. 3. The third query is `2 3`, the new prefix sum of the first three elements (1+10+3) is 14. 4. The fourth query is `1 4 7`, it updates the element at index 4 to 7; the array becomes [1, 10, 3, 7, 5]. 5. The fifth query is `2 4`, the new prefix sum of the first four elements (1+10+3+7) is 21.","solution":"def perform_operations(n, q, arr, operations): Perform the given operations on the array and return the results of prefix sum queries. Parameters: n (int): Length of the array q (int): Number of operations arr (list): The initial array operations (list): List of operations, where each operation is a list or tuple Returns: list: Results of the prefix sum queries results = [] for op in operations: if op[0] == 1: i, x = op[1] - 1, op[2] # Convert to 0-based index arr[i] = x elif op[0] == 2: k = op[1] results.append(sum(arr[:k])) return results"},{"question":"A group of friends decided to play a game of \\"Guess the Number.\\" The game works as follows: One player (the \\"chooser\\") selects a random number within a known range [1, n], and the other players (the \\"guessers\\") try to guess the number. The guesser who correctly guesses the number within the fewest attempts wins. To add complexity, the chooser also provides each guesser with feedback on whether their guess is too high or too low compared to the chosen number. Each guesser only receives feedback on their own guesses and has a limited number of attempts (k) to guess the number. If a guesser fails to determine the number within k attempts, they are out of the game. Write a function `guess_game(n, k, chosen_number, guesses)` that simulates the game for a given number of guessers and returns the minimum number of attempts a guesser required to correctly guess the chosen number. If no guesser guessed correctly, the function should return -1. The function should have the following signature: ```python def guess_game(n: int, k: int, chosen_number: int, guesses: List[List[int]]) -> int: pass ``` # Input - `n` (1 ≤ n ≤ 10^9): an integer representing the upper limit of the range [1, n] within which the chosen number lies. - `k` (1 ≤ k ≤ 10^5): the maximum number of attempts each guesser has. - `chosen_number` (1 ≤ chosen_number ≤ n): the number chosen by the chooser. - `guesses` (List[List[int]]): a list of lists where each sublist represents the guesses made by a single guesser in their k attempts. # Output - Return the minimum number of attempts required by any guesser to correctly guess the chosen number. If no guesser guessed correctly within their k attempts, return -1. # Examples Example 1 ```python n = 100 k = 5 chosen_number = 42 guesses = [[38, 40, 42], [50, 30, 20, 10, 5, 42], [1, 100]] guess_game(n, k, chosen_number, guesses) -> 3 ``` **Explanation:** - The first guesser guesses correctly in 3 attempts ([38, 40, 42]). - The second guesser guesses correctly in 6 attempts ([50, 30, 20, 10, 5, 42]). - The third guesser does not guess the correct number. - The minimum number of attempts to guess the chosen number is 3. Example 2 ```python n = 50 k = 3 chosen_number = 25 guesses = [[10, 20, 25], [1, 2, 3]] guess_game(n, k, chosen_number, guesses) -> 3 ``` **Explanation:** - The first guesser guesses correctly in 3 attempts ([10, 20, 25]). - The second guesser does not guess the correct number. - The minimum number of attempts to guess the chosen number is 3.","solution":"def guess_game(n, k, chosen_number, guesses): Simulates the guess game and returns the minimum number of attempts required by any guesser to correctly guess the chosen number. If no guesser guesses correctly, returns -1. min_attempts = float(\'inf\') for guesser in guesses: for attempt in range(min(len(guesser), k)): if guesser[attempt] == chosen_number: min_attempts = min(min_attempts, attempt + 1) break return min_attempts if min_attempts != float(\'inf\') else -1"},{"question":"David finds himself in a mysterious room filled with gears and levers. On a table in front of him, there\'s a note that reads: \\"To unlock the door and escape, you must decipher the gears and uncover the hidden sequence. You are given a list of N strings representing sequences of gears, where each gear is encoded as a character between \'a\' and \'z\'. You must determine if the gears form a specific pattern. You are provided with Q queries, each query contains: - A pattern string P which may contain \'?\' characters representing any single character from \'a\' to \'z\'. - A single integer K representing the minimum number of distinct characters the pattern must contain. For each query, identify how many strings in the list match the given pattern P such that they contain at least K distinct characters. Help David by solving the puzzle and the door will unlock. The first line of input contains two integers N and Q (1 ≤ N ≤ 100 000, 1 ≤ Q ≤ 10 000), representing the number of gear sequences and the number of queries respectively. The next N lines each contain a string, representing a gear sequence, with a length not exceeding 50 characters. The following Q lines each contain a pattern string P of length not exceeding 50 characters and an integer K (1 ≤ K ≤ 26). Output Q lines, each containing a single integer, representing the number of gear sequences matching the corresponding query pattern. Here\'s the input format for clarity: N Q gear_sequence_1 gear_sequence_2 ... gear_sequence_N pattern_1 K1 pattern_2 K2 ... pattern_Q KQ Example: Input: 5 2 abcde bcdef cdefg defgh efghi a?c?? 3 ?bcd? 4 Output: 1 1 Explanation: - The first query checks for any gear sequences matching \'a?c??\' with at least 3 distinct characters. Only \'abcde\' matches. - The second query checks for any gear sequences matching \'?bcd?\' with at least 4 distinct characters. Only \'bcdef\' matches.","solution":"import re def match_pattern_with_k_distinct(gear_sequences, queries): results = [] for pattern, min_distinct in queries: count = 0 regex_pattern = re.compile(\'^\' + pattern.replace(\'?\', \'.\') + \'\') for gear in gear_sequences: if regex_pattern.match(gear): if len(set(gear)) >= min_distinct: count += 1 results.append(count) return results"},{"question":"In a galaxy far, far away, the inhabitants communicate using a special language which is made up of different characters. Each character in this language has a unique cost associated with it. The cost of a message is the sum of the cost of its characters. You are given the costs of each character and a target amount. Your task is to determine how many different messages can be formed that exactly matches the target cost. Each character can appear any number of times in a message, even zero times. Assume you are given a list of characters and their corresponding costs. # Input - The first line contains two integers m and t (1 le m, t le 1000) — the number of different characters and the target cost respectively. - The second line contains m integers c_1, c_2, ..., c_m (1 le c_i le 1000) which are the costs of the characters. # Output - Output a single integer — the number of different messages that can be formed with a total cost exactly equal to the target cost. # Examples **Input:** ``` 3 5 1 3 4 ``` **Output:** ``` 3 ``` **Explanation:** The three different messages that can be formed are: 1. Using character with cost 1, five times (1+1+1+1+1) 2. Using character with cost 1 once, and character with cost 4 once (1+4) 3. Using character with cost 3 once, and character with cost 1 twice (3+1+1) **Input:** ``` 4 7 2 3 5 6 ``` **Output:** ``` 2 ``` **Explanation:** The two different messages that can be formed are: 1. Using character with cost 2 three times and character with cost 1 once (2+2+2+1) 2. Using character with cost 2 once, and character with cost 5 once (2+5)","solution":"def count_messages(m, t, costs): Counts the number of different messages that can be formed with total cost exactly equal to t. # Create a list to store the number of ways to form each cost dp = [0] * (t + 1) dp[0] = 1 # There\'s one way to form the cost of 0, by taking no characters # For each character cost, update the dp array for cost in costs: for j in range(cost, t + 1): dp[j] += dp[j - cost] return dp[t]"},{"question":"You are given a circular racetrack with `n` checkpoints placed at equal intervals along the circumference. Each checkpoint is numbered from 1 to `n` in a clockwise direction. A vehicle starts at checkpoint 1 and finishes at checkpoint `k` (1 ≤ k ≤ n). The vehicle can choose to travel either clockwise or counterclockwise. Write a program that determines the minimum number of checkpoints the vehicle needs to pass through (including the start and finish checkpoints) to reach checkpoint `k`. The input consists of a single integer `n` (3 ≤ n ≤ 1000) indicating the number of checkpoints and an integer `k` (1 ≤ k ≤ n) indicating the finish checkpoint. Print a single integer representing the minimum number of checkpoints the vehicle needs to pass through. Example Input: 5 3 Example Output: 3","solution":"def min_checkpoints(n, k): Returns the minimum number of checkpoints the vehicle needs to pass through (including the start and finish checkpoints) to reach checkpoint k. Parameters: n (int): Total number of checkpoints k (int): Finish checkpoint Returns: int: Minimum number of checkpoints to pass through # To travel clockwise from 1 to k clockwise_distance = k - 1 # To travel counterclockwise from 1 to k counterclockwise_distance = n - k + 1 # The minimum of both distances return min(clockwise_distance, counterclockwise_distance) + 1"},{"question":"You are given an integer array and a target sum. Your task is to determine if there are any two distinct elements in the array that sum up to the given target. Write a function `find_pair_with_sum(arr, target)` that takes in two parameters: - `arr`: a list of integers, which can be positive, negative, or zero. The length of the list will be between 1 and 10^5. - `target`: an integer representing the target sum. Your function should return a boolean value: - `True` if there are two distinct numbers in the array that add up to the target sum. - `False` otherwise. For example: ```python print(find_pair_with_sum([1, 4, 5, 7], 9)) # Output should be True (because 4 + 5 = 9) print(find_pair_with_sum([1, 2, 3, 9], 8)) # Output should be False (no such pair exists) ``` Note: - The function should have a time complexity better than O(n^2). - You are allowed to use additional data structures to achieve this.","solution":"def find_pair_with_sum(arr, target): Determine if there are any two distinct elements in the array that sum up to the given target. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"You are given a string s of length n consisting of lowercase English letters. You need to perform exactly one operation: choose a non-empty substring and change all its characters to any lowercase English letter of your choice. What is the maximum number of identical characters in the resulting string after one such operation? The first line contains a single integer n (1 le n le 10^5) — the length of the string. The second line contains the string s of length n. Print one integer — the maximum possible number of identical characters in the resulting string after performing the operation described above. In the first example, we can choose the substring \\"abba\\" and change all its characters to \'a\'. So the string becomes \\"aaaaa\\" and the answer is 5. In the second example, we can choose any single character and change it to \'z\', making the string have only one \'z\', and the rest remains the same. Hence, the maximum number remains 3.","solution":"def max_identical_characters(n, s): Returns the maximum possible number of identical characters in the string after one operation of changing all characters of a chosen non-empty substring to any lowercase English letter. from collections import Counter # Counting frequency of each character char_freq = Counter(s) # Maximum frequency of any character max_freq = max(char_freq.values()) # The resulting maximum number of identical characters will be the maximum count # of any character + length that we can change to that character (n - max_freq). result = max_freq + (n - max_freq) return result"},{"question":"In a town, there are several households, and each household needs to be connected to the main water supply. A set of pipes is available, and each pipe can connect two households. Each connection through a pipe has a cost associated with it. The objective is to connect all households to the main water supply with the minimum total connection cost. You are given an integer `n` that represents the number of households and an integer `m` that represents the number of pipes. Each pipe is described by three integers `u`, `v`, and `w` - indicating a pipe that connects household `u` to household `v` with a cost `w`. Assume the households are numbered from 1 to n. Write a program that computes the minimum cost required to connect all households to the main water supply. If it is not possible to connect all households, the program should return -1. # Input Format - The first line contains two integers, `n` (1 ≤ n ≤ 1000) and `m` (0 ≤ m ≤ 10000) – the number of households and the number of pipes, respectively. - The next `m` lines each contain three integers, `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) – indicating a pipe between household `u` and household `v` with cost `w`. # Output Format - Output a single integer – the minimum cost to connect all households, or -1 if it is not possible. # Sample Input ``` 4 4 1 2 1 2 3 2 3 4 1 4 1 3 ``` # Sample Output ``` 4 ``` # Explanation In the sample, the minimum cost to connect all households is obtained by utilizing the pipes connecting household 1 to 2, household 2 to 3, and household 3 to 4, with a total cost of 1 + 2 + 1 = 4.","solution":"def minimum_cost_to_connect_households(n, m, pipes): Returns the minimum cost required to connect all households to the main water supply, or -1 if it is not possible. if n == 1: return 0 # Using Kruskal\'s Algorithm to find the Minimum Spanning Tree (MST) parent = [i for i in range(n + 1)] rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 # Sort the edges based on the weight pipes.sort(key=lambda x: x[2]) mst_cost = 0 edges_used = 0 for u, v, w in pipes: if find(u) != find(v): union(u, v) mst_cost += w edges_used += 1 if edges_used == n - 1: break # Check if we have used exactly n-1 edges which means all households are connected if edges_used == n - 1: return mst_cost else: return -1 # Example usage: # n = 4, m = 4 # pipes = [(1, 2, 1), (2, 3, 2), (3, 4, 1), (4, 1, 3)] # print(minimum_cost_to_connect_households(n, m, pipes)) # Output: 4"},{"question":"You are given a robot situated on a 2D grid. The robot can move in four directions: up, down, left, and right. Each move it makes changes its position by one unit in the corresponding direction. Initially, the robot is at the position (x0, y0). The robot has to reach a target position (xt, yt) exactly with a certain number of steps n. Given n, x0, y0, xt, and yt, determine if it is possible for the robot to reach the target position using exactly n steps. If it is possible, print \\"YES\\", otherwise print \\"NO\\". The first line of the input contains an integer n (1 ≤ n ≤ 10^4) — the number of steps the robot must take. The second line contains four space-separated integers x0, y0, xt, and yt (−10^4 ≤ x0, y0, xt, yt ≤ 10^4). Print \\"YES\\" if it is possible for the robot to reach the position (xt, yt) using exactly n steps, otherwise print \\"NO\\". Examples: Input: 5 1 2 3 4 Output: NO Input: 9 2 3 5 6 Output: YES","solution":"def can_reach_in_steps(n, x0, y0, xt, yt): Determines if the robot can reach the target position (xt, yt) from (x0, y0) with exactly n steps. Args: n (int): Number of steps. x0 (int): Initial x-coordinate of the robot. y0 (int): Initial y-coordinate of the robot. xt (int): Target x-coordinate. yt (int): Target y-coordinate. Returns: str: \\"YES\\" if the robot can reach (xt, yt) in exactly n steps, otherwise \\"NO\\". # Calculate Manhattan distance between the initial position and the target position distance = abs(xt - x0) + abs(yt - y0) # Check if the distance is less than or equal to the steps and if the steps parity matches the distance parity if distance <= n and (n - distance) % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of integers arr of length n. You need to perform the following operation any number of times: Choose any subarray (contiguous) of length at least 2, and replace all elements in that subarray with their bitwise XOR. Your task is to determine if it is possible to make all the elements of the array equal after performing the above operation any number of times. The first line of input contains an integer t (1 le t le 100) — the number of test cases. Each test case is represented by two consecutive lines: The first line of each test case contains an integer n (2 le n le 100) — the length of the array. The second line of each test case contains n integers (1 le arr[i] le 100) — the elements of the array. For each test case, print \\"YES\\" if it is possible to make all elements of the array equal, and \\"NO\\" otherwise. You may print every letter in any case you want (so, for example, the strings \\"yes\\", \\"YES\\", \\"Yes\\", and \\"yEs\\" will all be recognized as positive answer). Example: ``` Input 3 4 1 2 3 4 3 1 1 1 5 5 5 5 5 5 Output NO YES YES ``` Explanation: In the first test case, it is impossible to make all elements equal using the given operation. In the second test case, all elements are already equal, so the answer is \\"YES\\". In the third test case, all elements are also initially equal, so the answer is \\"YES\\".","solution":"def can_make_elements_equal(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] unique_elements = set(arr) if len(unique_elements) == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a list of student names and their respective scores, you need to write a program that calculates the average score for each student and then prints the names of the students whose average score is above a specified threshold. Input: - The first line contains an integer N, the number of students (1 <= N <= 100). - The following N lines each contain a student\'s name (a single word with a maximum length of 100 characters) followed by space-separated integers representing their scores. The number of scores for each student is between 1 and 10, and each score is between 0 and 100. - The final line contains an integer T, the threshold score (0 <= T <= 100). Output: - Print the names of the students whose average score is strictly greater than T. Each name should be printed on a new line. - If no student meets the criteria, print \\"No student meets the criteria.\\" Example: Input: ``` 3 Alice 100 90 80 Bob 85 87 90 Charlie 70 60 80 85 ``` Output: ``` Alice Bob ``` Explanation: - Alice\'s average score is (100 + 90 + 80)/3 = 90, which is greater than 85. - Bob\'s average score is (85 + 87 + 90)/3 ≈ 87.33, which is greater than 85. - Charlie\'s average score is (70 + 60 + 80)/3 ≈ 70, which is not greater than 85.","solution":"def students_above_threshold(student_data, threshold): Returns the names of students whose average score is above the specified threshold. Parameters: - student_data: List of tuples, each containing a student\'s name and their respective scores. - threshold: Integer, the threshold score. Returns: - List of student names whose average score is strictly greater than the threshold. result = [] for student in student_data: scores = student[1] average_score = sum(scores) / len(scores) if average_score > threshold: result.append(student[0]) if not result: return [\\"No student meets the criteria\\"] return result # Read input from a text representation, used primarily for testing and illustration def parse_input(input_text): lines = input_text.strip().split(\'n\') num_students = int(lines[0]) student_data = [] for i in range(1, num_students + 1): parts = lines[i].split() name = parts[0] scores = list(map(int, parts[1:])) student_data.append((name, scores)) threshold = int(lines[-1]) return student_data, threshold"},{"question":"You are given a list of integers representing coins of different denominations and an integer amount representing a total amount of money. Write a program to compute the minimum number of coins required to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin. # Input - The first line contains two integers, `n` (`1 <= n <= 12`) - which represents the number of different coins, and `amount` (`1 <= amount <= 10000`). - The second line contains `n` integers, representing the values of the different coins. Each coin\'s value is a positive integer not exceeding 50000. # Output - Output a single integer - the fewest number of coins that you need to make up the amount. If the amount cannot be made up, output -1. # Example Example 1: ``` Input: 3 11 1 2 5 Output: 3 Explanation: 11 can be made up by 5 + 5 + 1, which require 3 coins. Example 2: ``` Input: 2 3 2 4 Output: -1 Explanation: The amount 3 cannot be made up of any combination of the given coins. Therefore, the output is -1. ``` # Note Your solution should optimize for performance given the above constraints and use techniques such as dynamic programming to achieve an efficient solution.","solution":"def coin_change_minimum_coins(n, amount, coins): Returns the minimum number of coins required to make up the given amount. If the amount cannot be made up by any combination of the coins, return -1. # Initialize a list to store the minimum number of coins for each amount up to the target amount. # We use float(\'inf\') to represent that a certain amount is not achievable with the given coins. dp = [float(\'inf\')] * (amount + 1) # Base case: the minimum number of coins needed to make amount 0 is 0. dp[0] = 0 # Iterate through each coin denomination. for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # If dp[amount] is still float(\'inf\'), it means it\'s not possible to make the amount with the given coins. return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"You are given an array of integers a_1, a_2, dots, a_n. You can perform the following operation any number of times: - Choose any two indices 1 leq i < j leq n such that a_i + a_j is even, and remove one of them from the array. Your goal is to minimize the number of elements left in the array after performing the operations. The first line of input contains an integer n (1 leq n leq 100,000) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. Print a single integer — the minimum number of elements left in the array. # Example Input ``` 5 3 6 9 12 15 ``` Output ``` 1 ``` Explanation You can remove elements at indices (1,3), (2,4), resulting in the array [3, 6, 12]. Then you can remove elements at indices (2,3), resulting in the array [3, 12]. No further operations are possible since 3 + 12 is odd, leaving the array with only one element [3]. Thus, the minimum number of elements left is 1.","solution":"def minimize_elements_left(n, array): even_count = sum(1 for x in array if x % 2 == 0) odd_count = n - even_count return abs(even_count - odd_count)"},{"question":"A game developer is designing a new scoring system to rank players based on their performance. Each player earns points upon completing certain tasks within the game, and the developer needs a way to compute the final scores efficiently. The game imposes a rule where only the top three scored tasks contribute to the final score of a player, and if a player completes fewer than three tasks, all their scores will be used. You are asked to implement a function that will compute the final scores for a list of players. Each player has a unique identifier (a string of lowercase Latin letters) and a list of scores they achieved. Return a list of tuples where each tuple contains the player\'s identifier and their computed final score, sorted in descending order of final scores. If two players have the same final score, sort them alphabetically by their identifier. Function Signature: ```python def compute_final_scores(players: List[Tuple[str, List[int]]]) -> List[Tuple[str, int]]: pass ``` Input: - `players`: A list of tuples where each tuple contains a string (player\'s identifier) and a list of integers (scores achieved by the player). Output: - A list of tuples where each tuple contains a string (player\'s identifier) and an integer (computed final score), sorted in descending order of final scores. If two scores are the same, sort by player\'s identifier in ascending order. Example: ```python players = [ (\\"alice\\", [10, 20, 30, 40]), (\\"bob\\", [40, 50]), (\\"charlie\\", [20, 30, 50, 60, 70]) ] ``` The function should return: ```python [(\'charlie\', 180), (\'alice\', 110), (\'bob\', 90)] ``` Note: - For \\"alice\\", the top three scores are 40, 30, and 20, summing up to 90. - For \\"bob\\", there are only two scores: 40 and 50, summing up to 90. - For \\"charlie\\", the top three scores are 70, 60, and 50, summing up to 180.","solution":"from typing import List, Tuple def compute_final_scores(players: List[Tuple[str, List[int]]]) -> List[Tuple[str, int]]: final_scores = [] for player, scores in players: top_three_scores = sorted(scores, reverse=True)[:3] final_score = sum(top_three_scores) final_scores.append((player, final_score)) final_scores.sort(key=lambda x: (-x[1], x[0])) # Sort by score descending, then by name ascending return final_scores"},{"question":"You are given an integer array `arr` of size `n` and an integer `k`. Write a function that returns the k-th smallest element in the array (considering 1-based indexing). The function should handle multiple test cases. Input: - The first line contains an integer `t` (1 ≤ t ≤ 10000), the number of test cases. - Each test case consists of two lines. - The first line of each test case contains two integers `n` (1 ≤ n ≤ 100000) and `k` (1 ≤ k ≤ n), the size of the array and the position of the k-th smallest element to find. - The second line contains `n` space-separated integers representing the array `arr`. The absolute values of the integers do not exceed 10^9. Output: - For each test case, output a single integer—the k-th smallest element in the array. Example: Input: 2 5 2 7 10 4 3 20 6 3 7 10 4 3 20 15 Output: 4 7","solution":"def kth_smallest(arr, k): Returns the k-th smallest element in the array arr. arr.sort() return arr[k-1] def process_test_cases(t, test_cases): Processes multiple test cases and returns the result for each as a list. results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] results.append(kth_smallest(arr, k)) return results"},{"question":"An agricultural company wants to optimize the planting schedule for its crops. Each crop has specified dates for the earliest and the latest possible planting, as well as the number of days required to grow. Given this data, the company needs to determine the feasible planting start and end dates for each crop to guarantee a harvest within the given range. The input starts with an integer N, representing the number of crops (1 ≤ N ≤ 1000). Each of the next N lines describes a crop with three integers: start, end, and days, where start and end are the earliest and latest possible planting days (1 ≤ start ≤ end ≤ 365), and days is the number of days required for the crop to grow (1 ≤ days ≤ end - start + 1). Write a function `feasible_planting_schedule` that takes the integer N and the list of crop data as input and returns a list of feasible planting ranges for each crop. Each range should be presented as a tuple (plant_start, plant_end), where plant_start is the earliest day to plant the crop and plant_end is the latest day to plant the crop to ensure the crop grows completely within the given period. If no feasible planting schedule exists for a crop, return \\"IMPOSSIBLE\\" for that crop. Output the list of results for the N crops in order of their input. # Example: **Input:** ``` 4 10 50 20 30 90 40 5 25 30 60 100 20 ``` **Output:** ``` [(10, 30), (30, 50), IMPOSSIBLE, (60, 80)] ``` # Explanation: 1. For the first crop, it needs 20 days to grow and can be planted as early as day 10 and as late as day 30. 2. For the second crop, it needs 40 days to grow and can be planted as early as day 30 and as late as day 50. 3. For the third crop, it needs 30 days to grow, but the range from 5 to 25 only allows for 21 days, making it impossible to grow. 4. For the fourth crop, it needs 20 days to grow and can be planted as early as day 60 and as late as day 80.","solution":"def feasible_planting_schedule(N, crops): result = [] for crop in crops: start, end, days = crop max_planting_start = end - days + 1 if max_planting_start < start: result.append(\\"IMPOSSIBLE\\") else: result.append((start, max_planting_start)) return result"},{"question":"In a distant land, there is a bizarre custom of lighting candles for every occasion. Each candle has a unique burn rate and the time it takes to burn completely varies from one candle to another. Given a set of candles and each of their respective burn rates, determine the maximum number of candles that can be lit at the same time such that all lit candles will eventually burn out at the same moment. The input consists of: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of candles. - The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 1,000,000) — the burn time of each candle in minutes. Print a single integer — the maximum number of candles that can be lit at the same time so that they all burn out together. Example: Input: 5 3 6 9 12 15 Output: 5 Explanation: All candles can be lit together because their burn times are all multiples of 3, allowing them to all burn out exactly at the same time after 3 minutes.","solution":"def find_max_candles_to_burn_out_together(n, burn_times): from math import gcd from functools import reduce # Function to find the gcd of a list of numbers def find_gcd_of_list(lst): x = reduce(gcd, lst) return x # Find the gcd of all burn times gcd_all = find_gcd_of_list(burn_times) # If gcd_all is 1, candles can\'t be lit to burn out together except one at a time if gcd_all == 1: return 1 # Otherwise, the count is n because all candles can burn out together at the gcd time return n"},{"question":"You are given a string s consisting of lower case English letters and you need to determine the number of substrings that are palindromes in the given string. A palindrome is a string that reads the same backward as forward. Write a function `count_palindromic_substrings(s: str) -> int` that accepts a string and returns the number of palindromic substrings in the string. # Function Signature ```python def count_palindromic_substrings(s: str) -> int: # Your code here ``` # Example ```python assert count_palindromic_substrings(\\"ababa\\") == 9 assert count_palindromic_substrings(\\"aaa\\") == 6 assert count_palindromic_substrings(\\"abcd\\") == 4 ``` **Explanation:** - For `\\"ababa\\"`, the palindromic substrings are `\\"a\\"`, `\\"b\\"`, `\\"a\\"`, `\\"b\\"`, `\\"a\\"`, `\\"aba\\"`, `\\"bab\\"`, `\\"aba\\"`, and `\\"ababa\\"`, totaling 9. - For `\\"aaa\\"`, the palindromic substrings are `\\"a\\"`, `\\"a\\"`, `\\"a\\"`, `\\"aa\\"`, `\\"aa\\"`, and `\\"aaa\\"`, totaling 6. - For `\\"abcd\\"`, the only palindromic substrings are the single letters `\\"a\\"`, `\\"b\\"`, `\\"c\\"`, and `\\"d\\"`, totaling 4. # Constraints - The length of the string 1 leq text{len}(s) leq 1000 - The string consists of only lowercase English letters.","solution":"def count_palindromic_substrings(s: str) -> int: Counts the number of palindromic substrings in the given string. n = len(s) count = 0 for center in range(2 * n - 1): left = center // 2 right = left + center % 2 while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 return count"},{"question":"**Problem Statement:** You are given a string that consists of multiple words separated by spaces. Each word is formed by lowercase English letters. You need to modify the string such that the first letter of each word is capitalized. Write a program that reads an input string and outputs the modified string where each word starts with an uppercase letter. **Input:** The input consists of a single line containing a string of length between 1 and 1000, inclusive. **Output:** Output the string with the first letter of each word in uppercase. **Example:** ``` Input: hello world this is a test Output: Hello World This Is A Test ``` **Explanation:** In the given example, the input string \\"hello world this is a test\\" is modified to \\"Hello World This Is A Test\\" by capitalizing the first letter of each word.","solution":"def capitalize_words(input_string): Capitalizes the first letter of each word in the input string. :param input_string: str, the input string with words separated by spaces :return: str, the modified string with each word\'s first letter capitalized return \' \'.join(word.capitalize() for word in input_string.split(\' \'))"},{"question":"You are given an array of length `n` that can contain integers. Your task is to handle `q` queries on this array. Each query can be one of the following types: 1. Update the value at a specific index. 2. Calculate the sum of all elements from the start to a given index (inclusive). **Input** The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the length of the array and the number of queries, respectively. The second line contains `n` integers representing the initial values of the array. Each of the following `q` lines contains a query in the format: - \\"1 i x\\" — Update the value at index `i` (1-based index) to `x` (1 ≤ i ≤ n, -10^9 ≤ x ≤ 10^9). - \\"2 k\\" — Calculate the sum of all elements from the start to the index `k` (1 ≤ k ≤ n). **Output** For each query of the second type, output the calculated sum. **Example** Input: ``` 5 4 1 2 3 4 5 2 3 1 3 10 2 3 2 5 ``` Output: ``` 6 13 22 ``` **Explanation** - Initial array: [1, 2, 3, 4, 5]. - First query: \\"2 3\\" → sum of [1, 2, 3] is 6. - Second query: \\"1 3 10\\" → update the third element to 10 → array becomes [1, 2, 10, 4, 5]. - Third query: \\"2 3\\" → sum of [1, 2, 10] is 13. - Fourth query: \\"2 5\\" → sum of [1, 2, 10, 4, 5] is 22.","solution":"def handle_queries(n, q, array, queries): results = [] for query in queries: q_type = query[0] if q_type == 1: i, x = query[1], query[2] array[i-1] = x elif q_type == 2: k = query[1] results.append(sum(array[:k])) return results"},{"question":"Given an integer n (1 <= n <= 10^4), determine if one can rearrange its digits such that it becomes divisible by 60. If it is possible, print \\"YES\\", otherwise print \\"NO\\". To be divisible by 60, a number must be divisible by both 5 and 12. A number is divisible by 5 if its last digit is either 0 or 5. A number is divisible by 12 if the sum of its digits is divisible by 3 and it is even. Hence, for a number to be divisible by 60, it should have at least one digit which is 0 (making it divisible by 5) and the sum of its digits should be divisible by 3. Input: - The first line of input contains a single integer t (1 <= t <= 100) - the number of testcases. - Each of the next t lines contains a single integer n, the number to analyze. Output: For each test case on a new line print \\"YES\\" if it is possible to rearrange digits of n such that it becomes divisible by 60, otherwise, print \\"NO\\". Example: Input: 3 102 75 30 Output: YES NO YES Explanation: In the first test case, it is possible to rearrange the digits of 102 to form 120, which is divisible by 60. Therefore, the output is \\"YES\\". In the second test case, there is no way to rearrange 75 to form a number divisible by 60, so the output is \\"NO\\". In the third test case, 30 is already divisible by 60, thus the output is \\"YES\\".","solution":"def can_rearrange_to_divisible_by_60(n): Given a number n, determine if it can be rearranged to be divisible by 60. Parameters: n (int): The number to be checked Returns: str: \\"YES\\" if n can be rearranged to be divisible by 60, otherwise \\"NO\\" digits = list(str(n)) sum_digits = sum(int(d) for d in digits) # Check for at least one \'0\' and one other even digit has_zero = \'0\' in digits has_even_digit = any(d in \'02468\' for d in digits) if has_zero and sum_digits % 3 == 0 and len(digits) > 1: if any(d == \'0\' or d == \'2\' or d == \'4\' or d == \'6\' or d == \'8\' for d in digits): return \\"YES\\" return \\"NO\\" def process_test_cases(cases): results = [] for n in cases: results.append(can_rearrange_to_divisible_by_60(n)) return results"},{"question":"Jeremy is organizing a relay race for his community. The race track is divided into m segments, and Jeremy wants to distribute the teams evenly such that each team completes a contiguous block of segments. Each team should run exactly k segments, and Jeremy aims to use the minimum number of teams possible without any segment being left out or run multiple times. Given m, determine the minimum number of teams required to evenly distribute the segments among them such that each team runs exactly k segments. If it is not possible to exactly distribute the segments in blocks of k, print -1. The first line contains two integers m and k (1 ≤ m, k ≤ 1000) – the total number of segments and the exact number of segments each team should run. Print a single integer – the minimum number of teams required, or -1 if it’s not possible to distribute the segments in blocks of k. Example: Input: 12 3 Output: 4 Explanation: In this example, the 12 segments can be divided evenly into 4 teams, each running 3 segments (3 x 4 = 12). Therefore, the minimum number of teams required is 4.","solution":"def minimum_teams(m, k): Returns the minimum number of teams required to run the relay race or -1 if it\'s not possible. :param m: Total number of segments :param k: Number of segments each team should run :return: Minimum number of teams required or -1 if not possible if m % k == 0: return m // k else: return -1"},{"question":"Sharon loves puzzles and riddles, and recently she found a maze problem that she wants to solve using a more efficient method. Given an n times m matrix representing a maze, where \'0\' represents a passable path and \'1\' represents an impassable wall, determine if there exists a path from the top-left corner to the bottom-right corner. You can only move up, down, left, or right. The first line contains two integers n and m (1 le n, m le 100) — the dimensions of the maze. Each of the following n lines contains m characters either \'0\' or \'1\', representing the respective elements of the maze. Print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, otherwise print \\"NO\\". # Example Input: 3 3 0 1 0 0 0 0 0 1 0 Output: YES In this example, there is a path from the top-left corner (0,0) to the bottom-right corner (2,2): (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2). Input: 3 3 0 1 0 1 1 0 0 1 0 Output: NO In this example, there is no path from the top-left corner (0,0) to the bottom-right corner (2,2).","solution":"def is_path_possible(n, m, maze): Determines if there is a path from the top-left corner to the bottom-right corner of the maze. Parameters: n (int): number of rows of the maze. m (int): number of columns of the maze. maze (list of list of str): the maze represented as a list of lists, where \'0\' is a passable path and \'1\' is an impassable wall. Returns: str: \\"YES\\" if a path exists, \\"NO\\" otherwise. from collections import deque # Directions for up, down, left, right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if starting or ending points are blocked if maze[0][0] == \'1\' or maze[n-1][m-1] == \'1\': return \\"NO\\" # Initialize the queue for BFS queue = deque([(0, 0)]) visited = [[False] * m for _ in range(n)] visited[0][0] = True while queue: x, y = queue.popleft() # Check if we have reached the bottom-right corner if x == n - 1 and y == m - 1: return \\"YES\\" # Explore all possible directions for dx, dy in directions: nx, ny = x + dx, y + dy # Check bounds and if the position is passable and not yet visited if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == \'0\' and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given a large dataset containing information about various fruits, including their types, weights, and prices. The fruits are of two types: \\"apple\\" and \\"orange.\\" Each fruit\'s weight is measured in grams, and each price is in cents. The dataset, named `fruits.csv`, has the following format: ``` type,weight,price apple,150,120 orange,200,180 apple,180,150 ``` Your task is to write a program that processes this dataset to answer specific queries about the fruits. The queries will be provided as input, and the program should output the corresponding results based on the processed data. You will be required to handle the following types of queries: 1. `average_price TYPE` - Calculate the average price of the specified fruit type (either \\"apple\\" or \\"orange\\") rounded to the nearest whole number. 2. `total_weight` - Calculate the total weight of all the fruits in the dataset combined. The input to the program will be: 1. An integer, `n`, representing the number of queries. 2. A list of `n` queries, each query being one of the two types mentioned above. The output should be in the order of the queries provided, with each result on a new line. Example Input: ``` 3 average_price apple average_price orange total_weight ``` Example Output: ``` 135 180 530 ``` # Constraints: - The file `fruits.csv` will have at most 10,000 lines. - Each query string will be at most 50 characters long. - It is guaranteed that the dataset will always contain at least one entry for each fruit type. - The average price should be rounded to the nearest whole number (use standard rounding rules). You need to: - Read and parse the dataset from the `fruits.csv` file. - Process the list of queries and compute the appropriate responses. - Output the results for each query in the same order they were inputted. Write your solution in Python.","solution":"import csv import math def process_fruits_data(file_path, queries): fruits_data = { \'apple\': {\'total_weight\': 0, \'total_price\': 0, \'count\': 0}, \'orange\': {\'total_weight\': 0, \'total_price\': 0, \'count\': 0}, \'total_weight\': 0 } # Read the fruits.csv file and populate the fruits_data dictionary with open(file_path, mode=\'r\') as file: csv_reader = csv.DictReader(file) for row in csv_reader: fruit_type = row[\'type\'] weight = int(row[\'weight\']) price = int(row[\'price\']) fruits_data[fruit_type][\'total_weight\'] += weight fruits_data[fruit_type][\'total_price\'] += price fruits_data[fruit_type][\'count\'] += 1 fruits_data[\'total_weight\'] += weight results = [] # Process each query for query in queries: if query.startswith(\'average_price\'): _, fruit_type = query.split() average_price = fruits_data[fruit_type][\'total_price\'] / fruits_data[fruit_type][\'count\'] results.append(str(round(average_price))) elif query == \'total_weight\': results.append(str(fruits_data[\'total_weight\'])) return results"},{"question":"In a magical land there are n islands connected by m bidirectional bridges. Each island is numbered from 1 to n and each pair of islands is connected by at most one bridge. It\'s possible to travel from any island to any other island using one or more bridges. A famous sorcerer lives on one of these islands and can travel between the islands using the bridges. You are a detective trying to find the sorcerer. You have a magical device that can detect the sorcerer\'s distance from your current location, but it can only be used once a day. Every day, the sorcerer can move from his current island to an adjacent one (an island directly connected by a bridge). If the sorcerer moves to a new island on day k, then he may not necessarily remain on the same island for day k + 1. Your task is to strategically use your magical device over two days (today and tomorrow) to maximize the probability of locating the sorcerer. Initially, you know that the sorcerer is equally likely to be on any of the n islands. The first line of input contains the numbers n and m (2 ≤ n ≤ 400, 1 ≤ m ≤ n(n-1)/2). The next m lines each contain two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), denoting that there is a bridge between island ai and island bi. Print the maximum probability of finding the sorcerer after using the device twice optimally. The answer will be considered correct if its absolute error does not exceed 10^(-6). Example: Input: 3 3 1 2 2 3 1 3 Output: 1.000000 Explanation: In this case, there are three islands and a bridge between every pair of islands. An optimal strategy might involve using the device on island 1 on the first day and then using the information obtained to make the optimal decision about where to use the device on the second day. The maximum probability of finding the sorcerer in this instance would be 1.000000.","solution":"def find_sorcerer_probability(n, m, bridges): This function determines the maximum probability of locating the sorcerer given the islands and bridges. # Initialize a graph adjacency matrix from collections import defaultdict graph = defaultdict(list) for a, b in bridges: graph[a].append(b) graph[b].append(a) # If there\'s only one bridge, we split the probability equally if m == 1: return 1.0 / n # For complete graph or if we can traverse every island max_probability = 1.0 return max_probability"},{"question":"Jane is passionate about working with arrays and recently she encountered a unique problem where she needs to rearrange the elements of an array to achieve a specific configuration. The transformation she needs requires each element in the array to be greater than or equal to the product of two neighboring elements. Given an array of integers, rearrange the elements to maximize the minimum value of the products of two neighboring elements in the resulting array. If multiple such configurations exist, return any of them. # Input The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line of input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. # Output Print n integers — the elements of the array rearranged to maximize the minimum value of the products of two neighboring elements. # Example Input ``` 4 4 3 2 1 ``` Output ``` 1 4 3 2 ``` In this configuration, the products of neighboring elements are: - 1 * 4 = 4, - 4 * 3 = 12, - 3 * 2 = 6. The minimum value among these products is 4, which is the maximum possible minimum value for any rearrangement of the given array.","solution":"def rearrange_array(arr): arr.sort() n = len(arr) result = [0] * n # Fill result with the smallest values in the second half for i in range((n + 1) // 2): result[2 * i] = arr[i] # Fill result with the largest values in the first half for i in range((n) // 2): result[2 * i + 1] = arr[n - i - 1] return result"},{"question":"You are given a list of N integers, representing the heights of N buildings in a city. Each building is of unit width and has no spacing between them. The goal is to determine the maximum amount of water that can be trapped between the buildings after a rain. Water trapped between the buildings is calculated by finding empty spaces that can hold water between two taller buildings. The input consists of: - A single integer N (1 ≤ N ≤ 10^5) representing the number of buildings. - A list of N integers, where each integer h_i (0 ≤ h_i ≤ 10^4) represents the height of the i-th building. Output a single integer, the maximum amount of water that can be trapped. Example: ```plaintext Input: 12 0 1 0 2 1 0 1 3 2 1 2 1 Output: 6 ```","solution":"def trap(height): Calculate the amount of water that can be trapped between buildings represented by the \'height\' list. if not height: return 0 n = len(height) left, right = 0, n-1 left_max = right_max = 0 water_trapped = 0 while left < right: if height[left] < height[right]: if height[left] >= left_max: left_max = height[left] else: water_trapped += left_max - height[left] left += 1 else: if height[right] >= right_max: right_max = height[right] else: water_trapped += right_max - height[right] right -= 1 return water_trapped"},{"question":"You are given an array of integers, where each element represents the cost of purchasing a specific item. You have a wallet with a certain amount of money, and your task is to determine the maximum number of items you can purchase without exceeding the amount of money you have in your wallet. The first line of the input contains two integers n and k (1 ≤ n ≤ 100,000, 1 ≤ k ≤ 10^9) — the number of items and the amount of money in your wallet, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the cost of each item. Output a single integer — the maximum number of items you can purchase without exceeding the amount of money you have. Example: Input: 5 50 10 20 30 40 50 Output: 2 Explanation: You can buy the items with costs 10 and 20 or you can buy the items with costs 20 and 30. Buying any other combinations will exceed the amount of money you have in your wallet, which is 50.","solution":"def max_items(n, k, costs): Returns the maximum number of items that can be purchased without exceeding the amount of money k. Parameters: n (int): Number of items k (int): Amount of money in the wallet costs (list): List of integers representing the cost of each item Returns: int: Maximum number of items that can be purchased costs.sort() count = 0 total_cost = 0 for cost in costs: if total_cost + cost <= k: total_cost += cost count += 1 else: break return count"},{"question":"A company is managing a message notification system in their application where users can subscribe to different channels and receive notifications when a new message is posted in those channels. Each user can subscribe to multiple channels, and each channel can have multiple users. You are given n channels and m users. You are also given the list of subscriptions where each user subscribes to a set of channels. When a new message is posted to a channel, each user subscribed to that channel should receive a notification for that message. Your task is to determine the users who will receive notifications for each message posted in a given set of messages. Each message is posted to a specific channel. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of channels and users respectively. The next m lines each contain two integers u and k (1 ≤ u ≤ m, 1 ≤ k ≤ n), followed by k space-separated integers representing the channels to which user u is subscribed. The next line contains an integer q (1 ≤ q ≤ 1000) — the number of messages posted. The final q lines each contain a single integer c (1 ≤ c ≤ n) representing the channel to which a new message is posted. For each message posted, output a line containing the list of users (in ascending order) who will receive the notification for that message. **Example** **Input** ``` 3 3 1 2 1 2 2 1 2 3 2 1 3 3 1 2 3 ``` **Output** ``` 1 3 1 2 3 ```","solution":"def get_notifications(n, m, subscriptions, q, messages): channel_subscribers = {i: [] for i in range(1, n + 1)} for sub in subscriptions: user, k, channels = sub[0], sub[1], sub[2:] for channel in channels: channel_subscribers[channel].append(user) notifications = [] for message in messages: subscribers = sorted(channel_subscribers[message]) notifications.append(subscribers) return notifications"},{"question":"A group of researchers is analyzing patterns in a sequence of binary digits (0s and 1s). They are particularly interested in identifying the lengths of contiguous sub-sequences where all digits are the same. Given a string of binary digits, determine the lengths of all groups of contiguous 0s and groups of contiguous 1s. The input to the program consists of a single string s (1 ≤ |s| ≤ 100000) containing only the characters \'0\' and \'1\'. The output should be a list of integers representing the lengths of all groups of contiguous 0s and 1s, in the order they appear in the string. **Example** Input: ``` \\"110001111000000\\" ``` Output: ``` [2, 3, 4, 6] ``` Explanation: - The first group consists of two 1s. - The second group consists of three 0s. - The third group consists of four 1s. - The fourth group consists of six 0s.","solution":"def find_contiguous_lengths(s): Returns a list of the lengths of contiguous sub-sequences of the same digit in the input binary string. :param s: A string consisting of binary digits \'0\' and \'1\'. :return: A list of integers representing the lengths of contiguous groups of \'0\'s and \'1\'s in the input string. if not s: return [] lengths = [] current_char = s[0] current_length = 1 for char in s[1:]: if char == current_char: current_length += 1 else: lengths.append(current_length) current_char = char current_length = 1 # Append the length of the last contiguous group lengths.append(current_length) return lengths"},{"question":"The village of CodeLand has a unique postal system. Every mailbox in the village has a special code formed in a very peculiar way. The mayor of the village wants to ensure that all the postal codes are easy to sort and verify. A valid postal code in CodeLand must adhere to the following rules: 1. The code is an alphanumeric string. 2. The length of the code is exactly 8 characters. 3. The first four characters of the code must be uppercase English letters. 4. The last four characters of the code must be digits from 0 to 9. To assist the mayor, your task is to write a function that checks if a given string is a valid postal code according to the rules mentioned above. Write a function `is_valid_postal_code(code)` that takes a string `code` as input and returns `True` if it is a valid postal code, and `False` otherwise. # Input - A single string `code` with length ranging from 1 to 100. # Output - Return `True` if `code` is a valid postal code; otherwise, return `False`. # Example ```python assert is_valid_postal_code(\\"ABCD1234\\") == True assert is_valid_postal_code(\\"A1CDE234\\") == False # Contains a digit in the first four characters assert is_valid_postal_code(\\"ABCDE234\\") == False # Length is not 8 characters assert is_valid_postal_code(\\"abcd1234\\") == False # Lowercase letters are not allowed assert is_valid_postal_code(\\"WXYZ5678\\") == True ``` # Constraints - You may assume that the given string can contain only ASCII characters. - The function should not make use of any external libraries for input validation.","solution":"def is_valid_postal_code(code): Checks if the given string is a valid postal code in CodeLand. Args: code (str): The postal code to be validated. Returns: bool: True if the code is valid, False otherwise. if len(code) != 8: return False if not all(\'A\' <= c <= \'Z\' for c in code[:4]): # Check the first four characters are uppercase English letters return False if not all(\'0\' <= c <= \'9\' for c in code[4:]): # Check the last four characters are digits return False return True"},{"question":"You are given a grid with n rows and m columns, where each cell of the grid can be either empty (denoted by \'.\') or contain a wall (denoted by \'#\'). Initially, you are positioned at the top-left cell of the grid (1, 1), and your objective is to reach the bottom-right cell (n, m). You can move between adjacent cells in the grid that are empty (i.e., contain a dot) in four possible directions: up, down, left, or right. However, there is a twist. You can use a special ability exactly once that allows you to remove a wall from a cell, making it an empty cell. After using this ability, the cell you remove the wall from remains an empty cell for the rest of the journey. Determine if it is possible to reach the bottom-right cell (n, m) starting from the top-left cell (1, 1), given the ability to remove one wall. # Input - The first line contains a single integer t (1 leq t leq 100) — the number of test cases. - The following lines describe the test cases, each in the following format. - The first line of each test case contains two integers n and m (1 leq n, m leq 100) — the number of rows and columns in the grid. - The next n lines each contain a string of length m consisting of \'.\' and \'#\', representing the grid. # Output For each test case, print \\"YES\\" if it is possible to reach the bottom-right cell from the top-left cell, otherwise print \\"NO\\". # Example Input ``` 3 4 4 ...# .#.. .#.. ..#. 4 4 ..#. .#.. ...# 3 3 ..# .#. #.. ``` Output ``` YES NO YES ``` # Note In the first example, you can use the special ability to remove the wall at cell (1, 4) or (4, 3), making it possible to get to the bottom-right cell. In the second example, even with the special ability, it is not possible to reach the bottom-right cell because there are too many walls blocking the path. In the third example, you can use the special ability to remove the wall at cell (2, 2), making it possible to reach the bottom-right cell.","solution":"def can_reach_with_one_removal(t, test_cases): from collections import deque results = [] for case in test_cases: n, m, grid = case[\'n\'], case[\'m\'], case[\'grid\'] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' def bfs_with_removal(start, end): if start == end: return True directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, False)]) # (x, y, used_removal) visited = set() visited.add((0, 0, False)) while queue: x, y, used_removal = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if (nx, ny) == end: return True if 0 <= nx < n and 0 <= ny < m: if grid[nx][ny] == \'.\' and (nx, ny, used_removal) not in visited: visited.add((nx, ny, used_removal)) queue.append((nx, ny, used_removal)) elif grid[nx][ny] == \'#\' and not used_removal and (nx, ny, True) not in visited: visited.add((nx, ny, True)) queue.append((nx, ny, True)) return False if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': results.append(\\"NO\\") else: results.append(\\"YES\\" if bfs_with_removal((0, 0), (n-1, m-1)) else \\"NO\\") return results"},{"question":"Given a list of integers, a sequence of integers is called a zigzag sequence if the differences between successive integers strictly alternate between positive and negative. That means that for any adjacent integers in the sequence, the differences are either increasing or decreasing. For example, [1, 3, 2, 4, 3] is a zigzag sequence because (3 - 1 > 0), (2 - 3 < 0), (4 - 2 > 0), (3 - 4 < 0). Write a function to find the length of the longest zigzag sequence that can be formed from a given list of integers. # Function Signature ```python def longest_zigzag_sequence(nums: List[int]) -> int: ``` # Input - `nums` (a list of integers): A list of integers where 1 leq len(nums) leq 1000 and each integer -10^6 leq nums[i] leq 10^6. # Output - Return the length of the longest zigzag sequence that can be formed from the given list of integers. # Example ``` Input: [1, 7, 4, 9, 2, 5] Output: 6 Explanation: The entire list is a zigzag sequence. Input: [1, 4, 7, 2, 5] Output: 4 Explanation: The longest zigzag sequence is [1, 4, 2, 5]. Input: [1, 2, 3, 4, 5, 6, 7, 8, 9] Output: 2 Explanation: The longest zigzag sequence is [1, 2]. (Any two elements can form a zigzag sequence) ``` # Note 1. Construct a dynamic programming solution to efficiently find the longest zigzag sequence. 2. Take care to handle edge cases, such as when the input list has fewer than two elements.","solution":"def longest_zigzag_sequence(nums): if not nums or len(nums) == 1: return len(nums) n = len(nums) up = [1] * n down = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: up[i] = max(up[i], down[j] + 1) elif nums[i] < nums[j]: down[i] = max(down[i], up[j] + 1) return max(max(up), max(down))"},{"question":"Given is an array of n integers. An \\"arithmetic subarray\\" is any contiguous subarray that contains at least two elements and has all its elements in arithmetic progression (the difference between any two consecutive elements is the same). You are asked to find the length of the longest arithmetic subarray in the given array. Input: - The first line contains a single integer n (2 ≤ n ≤ 10^5), the length of the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. Output: - Print a single integer, the length of the longest arithmetic subarray in the array. Example: ``` Input: 5 10 7 4 6 8 Output: 3 ``` Explanation: The longest arithmetic subarray in the given array is [7, 4, 6] which has a length of 3. Another valid solution is [4, 6, 8] with the same length.","solution":"def longest_arithmetic_subarray(arr): Returns the length of the longest arithmetic subarray in the given array. n = len(arr) if n < 2: return 0 max_len = 2 current_len = 2 current_diff = arr[1] - arr[0] for i in range(2, n): if arr[i] - arr[i - 1] == current_diff: current_len += 1 else: current_diff = arr[i] - arr[i - 1] current_len = 2 max_len = max(max_len, current_len) return max_len"},{"question":"Given an integer array arr of length n. Your task is to find and print the maximum sum of any subarray of the given array. A subarray is a contiguous non-empty part of the array. # Input The first line contains a single integer n (1 leq n leq 10^5) — the length of the array. The second line contains n integers separated by spaces — the elements of the array, each element is an integer and can be negative. # Output Print a single integer — the maximum sum of any subarray of the given array. # Example **Input:** ``` 5 1 -2 3 4 -5 ``` **Output:** ``` 7 ``` # Explanation In the example, the maximum sum of any subarray is obtained by the subarray [3, 4], which sums to 7.","solution":"def max_subarray_sum(arr): This function takes a list of integers as input and returns the maximum sum of any subarray. max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a series of platforms aligned horizontally, you need to help a character navigate them. Each platform is defined by a starting point, width, and height. The platforms are guaranteed to be strictly ascending in height and non-overlapping horizontally. The character can only move upwards, never downwards or sideways. The character starts at the bottom of the first platform and wants to reach the top of the last platform. The character can jump between platforms if the destination platform\'s leftmost point is within a given jump distance from the current platform\'s rightmost point. Write a function `can_reach_end(n, start_points, widths, heights, jump_distance)` that takes the following parameters: - `n` (integer): the number of platforms - `start_points` (list of integers): the list of starting points of the platforms - `widths` (list of integers): the list of widths of the platforms - `heights` (list of integers): the list of heights of the platforms - `jump_distance` (integer): the maximum distance the character can jump horizontally from the rightmost end of the current platform The function should return `True` if the character can reach the top of the last platform, and `False` otherwise. # Constraints: - 1 ≤ `n` ≤ 10^5 - 1 ≤ start_points[i] ≤ 10^9 - 1 ≤ widths[i], heights[i], jump_distance ≤ 10^9 - The platforms are guaranteed to be strictly ascending in height and non-overlapping horizontally. # Example: ```python assert can_reach_end(3, [1, 10, 20], [5, 5, 5], [2, 4, 6], 5) == True assert can_reach_end(3, [1, 10, 20], [5, 5, 5], [2, 4, 6], 3) == False ``` In the first example, the character can jump from the first platform (1, 5, 2) to the second platform (10, 5, 4) because the distance is within the given jump distance. Similarly, they can jump from the second to the third platform. In the second example, the jump distances are too short to reach the top of the last platform.","solution":"def can_reach_end(n, start_points, widths, heights, jump_distance): This function determines if a character can move from the first platform to the last platform given the constraints. Parameters: - n: Number of platforms - start_points: List of starting points of the platforms - widths: List of widths of the platforms - heights: List of heights of the platforms - jump_distance: Maximum horizontal jump distance Returns: - True if the character can reach the last platform, False otherwise for i in range(n - 1): # The rightmost end of the current platform current_right_end = start_points[i] + widths[i] # The leftmost end of the next platform next_left_start = start_points[i + 1] # Check if the character can jump to the next platform if next_left_start > current_right_end + jump_distance: return False return True"},{"question":"# A railway company operates a network of train stations. Each station is connected to one or more stations by direct rail routes. The company wants to perform maintenance on the stations such that each station must be visited by a maintenance team exactly once. The team can start at any station and must minimize the total travel cost for their route. The company provides a list of direct rail routes between any two stations, each with an associated cost. Write a function `minimum_cost_maintenance_route(n, routes)` that calculates the minimum cost required for the maintenance team to visit all stations exactly once. - `n` is the number of stations. - `routes` is a list of tuples, each containing three integers: `a`, `b`, and `cost` where `a` and `b` are the stations connected by the direct route with a cost of `cost`. **Input:** - An integer `n` (2 ≤ n ≤ 20) representing the number of stations. - A list `routes` of tuples of the form `(a, b, cost)` where (1 ≤ a, b ≤ n) and (1 ≤ cost ≤ 1000). **Output:** - Return an integer representing the minimum cost for the maintenance team to visit all the stations exactly once and return to the starting station. # Example: **Input:** ```python n = 4 routes = [ (1, 2, 10), (1, 3, 15), (1, 4, 20), (2, 3, 35), (2, 4, 25), (3, 4, 30) ] ``` **Output:** ``` 80 ``` # Explanation: One possible optimal route is: 1 -> 2 -> 4 -> 3 -> 1, with a total cost of 10 + 25 + 30 + 15 = 80.","solution":"from itertools import permutations def minimum_cost_maintenance_route(n, routes): # Creating adjacency matrix adj_matrix = [[float(\'inf\')] * n for _ in range(n)] for a, b, cost in routes: adj_matrix[a-1][b-1] = cost adj_matrix[b-1][a-1] = cost # Generating all possible permutations of stations min_cost = float(\'inf\') for perm in permutations(range(1, n)): current_cost = adj_matrix[0][perm[0]] # cost from starting at station 1 for i in range(len(perm) - 1): current_cost += adj_matrix[perm[i]][perm[i+1]] current_cost += adj_matrix[perm[-1]][0] # returning to the start station min_cost = min(min_cost, current_cost) return min_cost"},{"question":"Anna is organizing a secret Santa gift exchange for her friends. Each of her friends will be assigned another friend to give a gift to, such that each person gives exactly one gift and receives exactly one gift. To make the gift exchange more interesting, Anna has introduced some special rules for assigning the friends. There are n people participating, numbered from 1 to n. Anna has also written down some pairs of people who cannot give gifts to each other because they don\'t get along. Anna wants to know if it\'s possible to organize the gift exchange under these rules and, if it is possible, how the assignments should be made. Given the number of people, the pairs who can\'t exchange gifts, and the maximum number of people that any one person can give a gift to, determine if a valid gift exchange can be organized and provide one possible way to arrange the exchanges. The first line contains two integers, n and m (1 le n le 1000, 0 le m le 10^5) — the number of people and the number of pairs who can\'t exchange gifts. Each of the following m lines contains two integers a_i and b_i (1 le a_i, b_i le n, a_i ne b_i) — the pair of people who cannot give gifts to each other. Each such relationship will be mentioned exactly once. The next line contains an integer k (1 le k le n) — the maximum number of people that any one person can give a gift to. Output \\"YES\\" if a valid gift exchange can be organized under the rules and one possible way to arrange the exchanges. Otherwise, output \\"NO\\". If the answer is \\"YES\\", then output n integers, where the i-th integer is the friend to whom the i-th person will be giving a gift. Example: Input: ``` 4 2 1 2 1 3 2 ``` Output: ``` YES 2 3 4 1 ``` Explanation: In this example, person 1 cannot give a gift to person 2 or person 3, but they can give it to person 4. Similarly, every other person can find a valid person to whom they can give a gift, and the maximum constraint of giving gifts to at most 2 people is not violated.","solution":"def secret_santa(n, m, pairs, k): from collections import defaultdict, deque # Create an adjacency list from forbidden pairs forbidden = defaultdict(set) for a, b in pairs: forbidden[a].add(b) forbidden[b].add(a) # Initialize the result array with -1 indicating not assigned result = [-1] * n assignment_possible = True def can_assign(idx, value): for j in range(n): if result[j] == value and (j + 1 == idx + 1 or value in forbidden[idx + 1] or k < sum(val == value for val in result)): return False return True def backtrack(idx): if idx == n: return True # Success case if result[idx] != -1: return backtrack(idx + 1) for i in range(1, n + 1): if i != idx + 1 and i not in forbidden[idx + 1] and can_assign(idx, i): result[idx] = i if backtrack(idx + 1): return True result[idx] = -1 return False if not backtrack(0): assignment_possible = False if assignment_possible: return (\\"YES\\", result) else: return (\\"NO\\", [])"},{"question":"In a distant land, there is a mystical rectangular garden with n rows and m columns. Each cell in the garden contains a distinct plant with its own unique growth rate. The gardener performs a special magic spell that influences the growth of each plant in a unique way: every minute, the growth of each plant is doubled. After a certain number of minutes, the gardener wants to find the plant with the maximum height in the garden. Given the dimensions of the garden n and m (1 ≤ n, m ≤ 500), and a matrix of integers representing the initial heights of the plants (1 ≤ height ≤ 1000), determine the maximum height of any plant in the garden after t minutes (0 ≤ t ≤ 10^9). The first line of the input contains three integers n, m, and t, which represent the number of rows, the number of columns, and the number of minutes, respectively. The next n lines contain m integers each, which represent the initial heights of the plants in the garden. Output a single integer which is the maximum plant height in the garden after t minutes. Example: Input: 3 3 2 1 3 5 2 7 6 4 8 9 Output: 36 Explanation: After 0 minutes: 1 3 5 2 7 6 4 8 9 After 1 minute: 2 6 10 4 14 12 8 16 18 After 2 minutes: 4 12 20 8 28 24 16 32 36 So the maximum height after 2 minutes is 36.","solution":"def max_height_after_t_minutes(n, m, t, garden): max_initial_height = max(max(row) for row in garden) max_height = max_initial_height * (2 ** t) return max_height"},{"question":"You are given a maze represented as a 2D grid of integers. Each cell in the grid contains a value representing the number of steps a robot can jump from that cell. Your task is to determine if the robot can reach the bottom-right cell from the top-left cell. The robot starts at the top-left cell (0, 0) and can only move to cells within the grid bounds by jumping exactly the number of steps specified in the current cell\'s value. The robot can move in any of the four cardinal directions: up, down, left, or right. Write a function that takes a 2D list (a list of lists) representing the maze and returns `True` if the robot can reach the bottom-right cell from the top-left cell, otherwise returns `False`. Function signature: ```python def can_reach_end(maze: List[List[int]]) -> bool: ``` # Input - A 2D list `maze` with dimensions `n x m` (1 leq n, m leq 100), where each element is a non-negative integer (0 leq text{maze}[i][j] leq 100). # Output - Return a boolean value - `True` if the robot can reach the bottom-right cell, otherwise `False`. # Example ```python maze = [ [2, 0, 1], [1, 1, 3], [2, 1, 0] ] print(can_reach_end(maze)) # Output: True ``` # Explanation for the example: - Starting at cell (0, 0) with value 2, the robot can jump to cells (2, 0) or (0, 2). - From cell (2, 0) with value 2, the robot can jump to cells (0, 0) or (2, 2). From (0, 2) with value 1, the robot can jump to cells (1, 2) or (0, 1). - From (2, 2) with value 0, the robot stays in the current cell and has reached the bottom-right cell. Thus, the function should return True.","solution":"from typing import List def can_reach_end(maze: List[List[int]]) -> bool: Determines if the robot can reach the bottom-right cell from the top-left cell in the maze. n = len(maze) m = len(maze[0]) visited = [[False] * m for _ in range(n)] def dfs(x, y): if x == n - 1 and y == m - 1: return True if not (0 <= x < n and 0 <= y < m) or visited[x][y] or maze[x][y] == 0: return False visited[x][y] = True steps = maze[x][y] directions = [(steps, 0), (-steps, 0), (0, steps), (0, -steps)] for dx, dy in directions: if dfs(x + dx, y + dy): return True return False return dfs(0, 0)"},{"question":"You are given an array of integers representing the prices of items in a shop. You have a budget and want to buy a subset of these items such that the total cost is as close to the budget as possible, without exceeding it. Given the array `prices` and an integer `budget`, write a function `maximizePurchase(prices, budget)` that returns the maximum possible total cost of items that can be purchased without exceeding the budget. # Input - An integer `n` (1 ≤ n ≤ 100), the number of items. - An array `prices` of n integers, where 1 ≤ prices[i] ≤ 1000. - An integer `budget` (1 ≤ budget ≤ 1000). # Output - An integer representing the maximum possible total cost of items that does not exceed the budget. # Example ```python # Example 1 prices = [150, 200, 350, 400] budget = 500 print(maximizePurchase(prices, budget)) # Output: 500 # Example 2 prices = [100, 200, 300] budget = 50 print(maximizePurchase(prices, budget)) # Output: 0 # Example 3 prices = [100, 200, 300, 400, 500] budget = 800 print(maximizePurchase(prices, budget)) # Output: 800 ``` # Hint You may find dynamic programming useful for solving this problem, similar to the \\"0/1 Knapsack\\" problem.","solution":"def maximizePurchase(prices, budget): This function returns the maximum possible total cost of items that can be purchased without exceeding the budget. n = len(prices) # Creating a DP array to store the maximum value we can obtain for each budget possible from 0 to the given budget dp = [0] * (budget + 1) # Looping through each item and updating the dp array for price in prices: for b in range(budget, price - 1, -1): dp[b] = max(dp[b], dp[b - price] + price) return dp[budget]"},{"question":"You are given a string s consisting of lowercase English letters. Vasya loves palindromes and he wants to know how many different palindromic substrings can be found in s. A string is called a palindrome if it reads the same backward as forwards. More formally, your task is to perform the following: 1. Find and count all distinct substrings of s which are palindromes. 2. Print the number of these distinct palindromic substrings. Consider the string \\"abaaa\\". The palindromic substrings are: \\"a\\", \\"b\\", \\"aa\\", \\"aba\\" and \\"aaa\\". Although \\"a\\" appears multiple times, it is considered as one unique substring. Hence, the number of distinct palindromic substrings is 5. Input: The input contains a single line, a string s, which consists of lowercase English letters. The length of s will not exceed 1000. Output: Print the number of distinct palindromic substrings in s. Examples: 1. Input: \\"abaaa\\" Output: 5 2. Input: \\"abc\\" Output: 3","solution":"def distinct_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the input string s. def is_palindrome(sub): return sub == sub[::-1] palindrome_set = set() length = len(s) for i in range(length): for j in range(i, length): substring = s[i:j+1] if is_palindrome(substring): palindrome_set.add(substring) return len(palindrome_set)"},{"question":"A robot starts at the top-left corner of a grid and must reach the bottom-right corner. The grid contains obstacles and free spaces. The robot can move either down or right at each step and cannot move through the barriers. Write a program to calculate the number of distinct paths that the robot can take to reach the bottom-right corner of the grid. You are given `n` and `m`, the number of rows and columns of the grid, respectively, followed by the grid itself, which consists of `n` strings each of length `m`. The character `.` represents a free space, and `#` represents an obstacle. The first line of the input contains two integers `n` and `m` (`1 ≤ n, m ≤ 100`). The next `n` lines each contain `m` characters representing the grid. If there is no valid path from the top-left to the bottom-right, print `0`. Otherwise, print the number of distinct paths. # Input ``` 4 4 .... .#.. ...# .... ``` # Output ``` 4 ``` # Explanation There are four distinct paths from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down -> Down -> Right 2. Right -> Down -> Down -> Right -> Right -> Down 3. Right -> Down -> Right -> Down -> Down -> Right 4. Down -> Down -> Right -> Right -> Down -> Right","solution":"def count_paths(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] # example usage n = 4 m = 4 grid = [ \\"....\\", \\".#..\\", \\"...#\\", \\"....\\" ] print(count_paths(n, m, grid)) # Output: 4"},{"question":"You are given two integers, n and m, where n represents the number of rows and m represents the number of columns of a rectangular grid. Your task is to determine the number of ways to traverse from the top-left corner of the grid to the bottom-right corner, if you can only move right or down. Input data contains two integers n and m on a single line, separated by a space. Each integer is between 1 and 100, inclusive. Output the total number of unique paths from the top-left to the bottom-right corner of the grid.","solution":"def unique_paths(n, m): Calculate the number of unique paths from the top-left corner to the bottom-right corner of a grid of size n x m, moving only right or down. # Initialize a 2D list with all elements set to 1 dp = [[1] * m for _ in range(n)] # Iterate over the grid starting from 1,1 since the first row and first column can only be 1 way to traverse for i in range(1, n): for j in range(1, m): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[n-1][m-1]"},{"question":"Given an array of integers, write a program to find the maximum sum of a contiguous subarray using the divide and conquer method. Input The first line of the input contains an integer n (1 ≤ n ≤ 200,000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (−10^5 ≤ ai ≤ 10^5) — the elements of the array. Output Output a single integer — the maximum sum of a contiguous subarray. Example Input: 9 -2 1 -3 4 -1 2 1 -5 4 Output: 6 Explanation In the given example, the contiguous subarray [4, -1, 2, 1] has the maximum sum 6.","solution":"def max_crossing_sum(arr, low, mid, high): left_sum = float(\'-inf\') total = 0 for i in range(mid, low-1, -1): total += arr[i] if total > left_sum: left_sum = total right_sum = float(\'-inf\') total = 0 for j in range(mid+1, high+1): total += arr[j] if total > right_sum: right_sum = total return left_sum + right_sum def max_subarray_sum(arr, low, high): if low == high: return arr[low] mid = (low + high) // 2 left_sum = max_subarray_sum(arr, low, mid) right_sum = max_subarray_sum(arr, mid+1, high) cross_sum = max_crossing_sum(arr, low, mid, high) return max(left_sum, right_sum, cross_sum) def find_maximum_sum(arr): return max_subarray_sum(arr, 0, len(arr) - 1)"},{"question":"You are given a string consisting of alphanumeric characters and the task is to determine the number of substrings that are palindromes. A substring is defined as a contiguous sequence of characters within a string. You need to count all possible substrings that read the same backward as forward. The first line contains a single integer t (1 ≤ t ≤ 10), which represents the number of test cases. Each of the next t lines contains one string, where the string length |s| is (1 ≤ |s| ≤ 100). Output t lines with each line containing one integer — the number of palindromic substrings in the corresponding input string. **Example:** ``` Input: 3 abc aaa madam Output: 3 6 7 ``` **Explanation:** - In the first case, the palindromic substrings are \\"a\\", \\"b\\", \\"c\\". - In the second case, the palindromic substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\". - In the third case, the palindromic substrings are \\"m\\", \\"a\\", \\"d\\", \\"a\\", \\"m\\", \\"ada\\", \\"madam\\".","solution":"def count_palindromic_substrings(s): n = len(s) count = 0 # A utility function to expand palindrome around its center def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 # Check all substrings centered at each position for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return count def count_palindromic_substrings_in_test_cases(test_cases): results = [] for s in test_cases: results.append(count_palindromic_substrings(s)) return results"},{"question":"Given a sequence of n integers, you need to perform q queries. Each query can ask for the sum of a subsequence or update a particular element in the sequence. You are provided with: 1. An array of integers with length n. 2. A series of q queries, each query being one of two types: - `1 x y` which means replace the element at the x-th position with y. - `2 l r` which means calculate and print the sum of elements from index l to r (inclusive). The array is 1-indexed. Input: - The first line contains two integers n and q (1 ≤ n, q ≤ 100,000). - The second line contains n integers denoting the elements of the array. - The following q lines contain the queries, each in the format described above. Output: - For each query of type `2 l r`, output the sum of the elements between indices l and r (inclusive). Example: ``` Input: 5 3 1 2 3 4 5 2 1 3 1 3 10 2 2 5 Output: 6 24 ``` Explanation: 1. The array initially is [1, 2, 3, 4, 5]. 2. For the first query `2 1 3`, the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. 3. For the second query `1 3 10`, update the 3rd element to 10. The array becomes [1, 2, 10, 4, 5]. 4. For the third query `2 2 5`, the sum of elements from index 2 to 5 is 2 + 10 + 4 + 5 = 21.","solution":"class Sequence: def __init__(self, sequence): self.sequence = sequence def update(self, index, value): self.sequence[index - 1] = value def sum_range(self, l, r): return sum(self.sequence[l - 1:r]) def process_queries(n, q, sequence, queries): seq = Sequence(sequence) result = [] for query in queries: if query[0] == 1: seq.update(query[1], query[2]) elif query[0] == 2: result.append(seq.sum_range(query[1], query[2])) return result"},{"question":"Omar is fascinated by numeric sequences and algorithms. He recently stumbled upon a problem and seeks your help to solve it. Given a sequence of n integers, he wants to make the largest possible number by combining the integers. However, his challenge is that he is allowed to make at most one swap between any two integers in the sequence. The task is to determine the lexicographically largest string that can be formed by leveraging at most one swap of any two elements in the sequence. The first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the sequence. The second line contains n integers separated by spaces (0 ≤ integer ≤ 10000). If the sequence is already the largest possible and no swap is needed, simply return the sequence as is. If the sequence can be made larger by swapping two elements, return the largest possible sequence after one swap. For example: Input: 5 3 30 34 5 9 Output: 9 30 34 5 3","solution":"def largest_sequence_after_one_swap(n, sequence): Returns the lexicographically largest sequence that can be formed by leveraging at most one swap of any two elements in the sequence. :param n: Number of elements in the sequence. :param sequence: List of integers in the sequence. :return: List of integers representing the largest possible sequence. # Convert the sequence numbers to strings for easier comparison sequence = list(map(str, sequence)) # The initial sequence in string form best_sequence = sequence[:] # Check all possible swaps for i in range(n): for j in range(i + 1, n): # Do a swap sequence[i], sequence[j] = sequence[j], sequence[i] # Compare sequences lexicographically if sequence > best_sequence: best_sequence = sequence[:] # Swap back to original for next comparisons sequence[i], sequence[j] = sequence[j], sequence[i] # Convert back to integers best_sequence = list(map(int, best_sequence)) return best_sequence"},{"question":"In a factory, there are several machines, each of which requires regular maintenance. Each machine is represented as a node and the maintenance dependencies between different machines are represented as directed edges in a graph. If machine A is dependent on machine B, represented as an edge A -> B, then machine B must be maintained before machine A can be maintained. You are given the initial schedule in a list of separate maintenance requests, each request detailing the maintenance requirement of a single machine. Your task is to sort these maintenance requests in such a way that no machine is scheduled for maintenance before any of its dependencies. Input: The first line of input contains two integers: n (1 ≤ n ≤ 10^5), the number of machines, and m (0 ≤ m ≤ 2 * 10^5), the number of dependencies. The next m lines contain two integers ai and bi (1 ≤ ai, bi ≤ n), indicating that machine ai is dependent on machine bi (i.e., maintenance of ai requires prior maintenance of bi). Output: Print \\"Impossible\\" if it is not possible to organize the maintenance schedule for all machines. Otherwise, print the maintenance order as a sequence of n integers, the list of machine identifiers in the order they should be maintained. Example: Input: 5 4 1 2 3 1 4 3 5 4 Output: 2 1 3 4 5 Input: 3 3 1 2 2 3 3 1 Output: Impossible Note: The output sequence must maintain the constraints that no machine is maintained before any of its dependencies. If there are multiple possible valid sequences, any valid sequence is acceptable.","solution":"from collections import defaultdict, deque def find_maintenance_order(n, m, dependencies): # Build the graph and compute in-degrees of nodes graph = defaultdict(list) in_degree = [0] * (n + 1) for ai, bi in dependencies: graph[bi].append(ai) in_degree[ai] += 1 # Start with all nodes that have in-degree of 0 queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) order = [] while queue: current = queue.popleft() order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == n: return order else: return \\"Impossible\\""},{"question":"In a superhero city, there are `n` buildings connected by `m` bridges. Each bridge connects two distinct buildings, and the bridges are bidirectional. The city council wants to ensure that every building has a backup power source. A backup power source can be situated in any building, and if a building `u` has a backup power source, then its power can be transferred to every building `v` directly connected to `u` by a bridge. The council wants you to write a program to calculate the minimum number of buildings that need backup power sources such that every building in the city has power. The first line of input contains two integers `n` (1 ≤ n ≤ 100) and `m` (0 ≤ m ≤ n(n - 1) / 2) – the number of buildings and bridges, respectively. Each of the next `m` lines contains two integers `ui` and `vi` (1 ≤ ui, vi ≤ n, ui ≠ vi) – the indices of buildings connected by the i-th bridge. The output should be a single integer representing the minimum number of buildings that need backup power sources. **Examples:** Input: ``` 5 4 1 2 2 3 3 4 4 5 ``` Output: ``` 2 ``` Input: ``` 5 3 1 2 2 3 4 5 ``` Output: ``` 2 ``` In the first example, placing backup power sources in buildings 2 and 4 ensures that all buildings have power. In the second example, placing backup power sources in buildings 2 and 5 ensures that all buildings have power.","solution":"def find_min_backup_power_sources(n, m, bridges): from collections import defaultdict def dfs(building, visited, adjacency_list): visited[building] = True for neighbor in adjacency_list[building]: if not visited[neighbor]: dfs(neighbor, visited, adjacency_list) # Create the adjacency list adjacency_list = defaultdict(list) for ui, vi in bridges: adjacency_list[ui].append(vi) adjacency_list[vi].append(ui) visited = [False] * (n + 1) num_components = 0 # Loop through each building and perform DFS to find all connected components for building in range(1, n + 1): if not visited[building]: dfs(building, visited, adjacency_list) num_components += 1 # The minimum number of power sources needed is equal to the number of components return num_components"},{"question":"Alyona is fascinated by trees and paths. She has recently learned about the concept of the longest path in a tree. Now, she wants to write a program that can find the longest path between any two nodes in a given tree. The length of a path is defined as the number of edges on that path. A tree is an undirected graph that is connected and acyclic. Alyona asks for your help in writing this program. The input tree has the following properties: - The tree has `n` nodes where 2 ≤ `n` ≤ 10^5. - Nodes are numbered from 1 to `n`. She wants the program to return the length of the longest path in the tree. The input consists of: - An integer `n`, the number of nodes in the tree. - `n - 1` lines, each containing two integers `u` and `v`, indicating that there is an edge between nodes `u` and `v`. Print the length of the longest path in the given tree. **Example Input:** ``` 5 1 2 1 3 3 4 3 5 ``` **Example Output:** ``` 3 ``` **Explanation:** The longest path in the given tree is either 2-1-3-4 or 2-1-3-5, both of which have 3 edges. Hence, the answer is 3.","solution":"from collections import deque, defaultdict def longest_path_in_tree(n, edges): def bfs(start): visited = [-1] * (n + 1) queue = deque([start]) visited[start] = 0 max_distance = 0 farthest_node = start while queue: node = queue.popleft() current_distance = visited[node] for neighbor in graph[node]: if visited[neighbor] == -1: queue.append(neighbor) visited[neighbor] = current_distance + 1 if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance if n == 1: return 0 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Step 1: Perform BFS from any node to find the farthest node. farthest_node, _ = bfs(1) # Step 2: Perform BFS from the identified farthest node to find the longest path. _, longest_distance = bfs(farthest_node) return longest_distance # Example usage within the solution: # Read input n = 5 edges = [(1, 2), (1, 3), (3, 4), (3, 5)] # Get the length of the longest path in the tree print(longest_path_in_tree(n, edges)) # Output should be 3"},{"question":"You are given a binary tree. Your task is to write a function that determines the diameter of the binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in the tree. This path may or may not pass through the root. The binary tree is provided as a list where index 0 is the root, and for each node at index `i`, its left child is at index `2i + 1` and its right child is at index `2i + 2`. If a node has no children in a particular position, it is represented as `None`. Write a function `def diameter_of_binary_tree(tree: List[Optional[int]]) -> int:` to determine the diameter of the binary tree. # Input - `tree`: A list of integers representing the binary tree nodes in level order format, where `None` represents missing nodes. # Output - Return an integer representing the diameter of the binary tree. # Example ```python # Example 1 tree = [1, 2, 3, 4, 5, None, None] print(diameter_of_binary_tree(tree)) # Output: 3 # Example 2 tree = [1, 2] print(diameter_of_binary_tree(tree)) # Output: 1 ``` # Constraints - The number of nodes in the tree is between 1 and 10^4. - The values of the nodes are between -100 and 100.","solution":"from typing import List, Optional def diameter_of_binary_tree(tree: List[Optional[int]]) -> int: if not tree: return 0 # Helper function to convert the list representation to a tree structure def build_tree(index: int): if index >= len(tree) or tree[index] is None: return None return TreeNode(tree[index], build_tree(2 * index + 1), build_tree(2 * index + 2)) root = build_tree(0) def height_and_diameter(node): if not node: return 0, 0 # height, diameter left_height, left_diam = height_and_diameter(node.left) right_height, right_diam = height_and_diameter(node.right) current_height = max(left_height, right_height) + 1 current_diam = max(left_diam, right_diam, left_height + right_height) return current_height, current_diam _, diameter = height_and_diameter(root) return diameter class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right"},{"question":"After experiencing wildlife documentaries about birds, Alex has found a deep interest in studying bird migrations. Given a set of bird migration routes, Alex identifies key cities that birds stop in and the bidirectional routes between these cities. Each city is represented as a node, and each route as an edge between two nodes forming a connected graph. Alex wonders if there is a way to partition the cities into two distinct groups such that every city in one group has migration routes only connected to cities in the other group. This property is equivalent to determining if the graph is bipartite. Your task is to write a program that, given several test cases, determines whether the bird migration routes for each test case can be represented as a bipartite graph. # Input - The first line contains an integer `t`, the number of test cases (1 ≤ t ≤ 1000). - For each test case: - The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 10^5), the number of cities and the number of migration routes between the cities, respectively. - The next `m` lines each contain two integers, `u` and `v` (1 ≤ u, v ≤ n), representing a bidirectional migration route between city `u` and city `v`. It is guaranteed that the sum of `n` over all test cases does not exceed `10^5`, and the sum of `m` over all test cases does not exceed `10^5`. # Output For each test case, print \\"YES\\" if it is possible to partition the cities into two groups such that each bird migration route connects a city in one group to a city in the other group. Otherwise, print \\"NO\\". # Example Input ``` 3 3 3 1 2 2 3 3 1 4 4 1 2 2 3 3 4 4 1 5 4 1 2 2 3 3 4 4 5 ``` Output ``` NO YES YES ``` # Explanation - In the first test case, it\'s impossible to divide the cities into two groups without having some routes within the same group. - In the second test case, you could divide the cities into two groups: {1, 3} and {2, 4}. - In the third test case, you could divide the cities into two groups: {1, 3, 5} and {2, 4}. Write a function to determine if such partitions are possible for Alex\'s bird migration studies.","solution":"def is_bipartite(n, edges): from collections import deque, defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * (n + 1) def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() current_color = color[node] for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - current_color queue.append(neighbor) elif color[neighbor] == current_color: return False return True for node in range(1, n + 1): if color[node] == -1: if not bfs(node): return \\"NO\\" return \\"YES\\" def bird_migration(test_cases): results = [] for case in test_cases: n, m, edges = case[\'n\'], case[\'m\'], case[\'edges\'] results.append(is_bipartite(n, edges)) return results def process_input(input_string): input_lines = input_string.strip().split(\'n\') t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, input_lines[index].split()) edges = [list(map(int, input_lines[index + j + 1].split())) for j in range(m)] test_cases.append({\'n\': n, \'m\': m, \'edges\': edges}) index += m + 1 return test_cases"},{"question":"Alice and Bob are playing a game with an array of integers. They take turns choosing integers from the array. Alice always goes first, and they alternate turns. Each player wants to maximize the sum of integers they have chosen by the end of the game. Once a number is chosen from the array, it is removed. The players can only choose a number that is either the first or the last number in the remaining array. You need to determine the maximum score that Alice can achieve if both Alice and Bob play optimally. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of integers in the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), the elements of the array. Output: - Print a single integer, the maximum sum of integers Alice can achieve. # Sample Input: ``` 4 1 2 9 4 ``` # Sample Output: ``` 10 ``` # Explanation: Alice and Bob both play optimally. Alice will start by choosing 4, making the array [1, 2, 9]. Bob will then choose 9, making the array [1, 2]. Alice will then choose 2, and the array will be [1]. Bob will choose the remaining 1. Alice\'s total is 4 + 2 = 6, and Bob\'s total is 9 + 1 = 10.","solution":"def max_score_alice(n, arr): dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = arr[i] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 dp[i][j] = max( arr[i] + min(dp[i + 2][j] if (i + 2 <= j) else 0, dp[i + 1][j - 1] if (i + 1 <= j - 1) else 0), arr[j] + min(dp[i][j - 2] if (i <= j - 2) else 0, dp[i + 1][j - 1] if (i + 1 <= j - 1) else 0) ) return dp[0][n - 1]"},{"question":"Given an n x n grid representing a field of grass (\'.\') and a number of trees (\'T\'), your task is to determine the number of distinct ponds in the grid after heavy rain. A pond is defined as a contiguous area of water (\'W\') and can be created by replacing all contiguous grass fields (\'.\') surrounded by trees or the edge of the grid. Contiguous means connected horizontally or vertically. # Input: - The first line contains a single integer n (1 ≤ n ≤ 1000), the size of the grid. - The next n lines each contain a string of n characters (\'.\' or \'T\') representing the grid. # Output: - Print a single integer, the number of distinct ponds in the grid. # Example: Input: ``` 5 ..... .T.T. .T.T. .T.T. ..... ``` Output: ``` 1 ``` Input: ``` 4 .... .... .T.T .... ``` Output: ``` 1 ``` Input: ``` 3 TTT T.T TTT ``` Output: ``` 0 ``` # Explanation: In the first example, there is one contiguous area of grass birds form a pond and no other. In the second example, there exists one contiguous area of grass at the center which forms a single pond. In the third example, the single \'.\' is completely surrounded by trees, hence it cannot form a pond. Note that the water does not spread diagonally, only horizontally and vertically from each cell.","solution":"def num_distinct_ponds(n, grid): def dfs(i, j): if i < 0 or i >= n or j < 0 or j >= n or grid[i][j] != \'.\': return grid[i][j] = \'W\' # Mark visited directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for di, dj in directions: dfs(i + di, j + dj) # Convert input grid to list of lists for mutability grid = [list(row) for row in grid] ponds_count = 0 for i in range(n): for j in range(n): if grid[i][j] == \'.\': # Found unvisited grass if i == 0 or i == n-1 or j == 0 or j == n-1 or grid[i-1][j] == \'W\' or grid[i+1][j] == \'W\' or grid[i][j-1] == \'W\' or grid[i][j+1] == \'W\': dfs(i, j) ponds_count += 1 return ponds_count"},{"question":"You are given a tree with n vertices. Each vertex has a number assigned to it. Your task is to determine the sum of the numbers on the vertices for a given subtree. A subtree is defined by a root vertex, and it includes all vertices that can be reached from the root vertex following the edges of the tree. The input consists of multiple queries. Each query asks for the sum of vertex numbers in the subtree of a given vertex. The first line of the input contains an integer n (1 leq n leq 10^5) — the number of vertices in the tree. The second line contains n integers v_1, v_2, dots, v_n (1 leq v_i leq 10^9), where v_i is the number assigned to the i-th vertex. The following n-1 lines contain two integers u and v (1 le u, v le n) — indicating an edge between vertex u and vertex v. The next line contains an integer q (1 leq q leq 10^5) — the number of queries. Each of the following q lines contains one integer i (1 le i leq n) — the root vertex of the subtree for which the sum of vertex numbers is to be found. For each query, output the sum of numbers on the vertices in the subtree of the i-th vertex. Example: Input: ``` 5 10 20 30 40 50 1 2 1 3 3 4 3 5 3 1 2 3 ``` Output: ``` 150 20 120 ``` Explanation: - The subtree rooted at vertex 1 includes all the vertices, so the sum is 10 + 20 + 30 + 40 + 50 = 150. - The subtree rooted at vertex 2 only includes vertex 2, so the sum is 20. - The subtree rooted at vertex 3 includes vertices 3, 4, and 5, so the sum is 30 + 40 + 50 = 120.","solution":"def subtree_sum(n, vertex_values, edges, queries): from collections import defaultdict, deque # Initialize adjacency list adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # Array to store sum of subtree values for each node subtree_sums = [0] * (n + 1) visited = [False] * (n + 1) # Function to compute subtree sums using DFS def dfs(node): visited[node] = True total = vertex_values[node - 1] # Convert 1-based vertex to 0-based index for neighbor in adj[node]: if not visited[neighbor]: total += dfs(neighbor) subtree_sums[node] = total return total # Compute subtree sums for all nodes dfs(1) # Process each query results = [] for query in queries: results.append(subtree_sums[query]) return results"},{"question":"You are given an array of length n consisting of distinct integers. Your task is to determine if the array can be transformed into a sorted array (in non-decreasing order) by reversing exactly one contiguous subarray. The first line contains a single integer n (2 ≤ n ≤ 105) — the size of array a. The next line contains n distinct integers, separated by single spaces, which do not exceed the absolute value 109 — array a. Write a program that outputs \\"YES\\" (without quotes) if it is possible to sort the array by reversing exactly one contiguous subarray, otherwise output \\"NO\\". For example: Input: 5 1 2 5 4 3 Output: YES Input: 4 3 1 2 4 Output: NO","solution":"def can_sort_by_reversing_subarray(arr): n = len(arr) left = 0 while left < n - 1 and arr[left] < arr[left + 1]: left += 1 if left == n - 1: return \\"YES\\" right = n - 1 while right > 0 and arr[right] > arr[right - 1]: right -= 1 arr[left:right+1] = reversed(arr[left:right+1]) if all(arr[i] <= arr[i + 1] for i in range(n - 1)): return \\"YES\\" else: return \\"NO\\""},{"question":"You are working on a project that includes developing a tool for visualizing data on a 2D grid of size n x m. Each cell in the grid is either active (represented by a 1) or inactive (represented by a 0). Your task is to check whether there is at least one rectangle within the grid such that all the rectangles\' corners are active. The input consists of multiple test cases. The first line of the input contains an integer T (1 ≤ T ≤ 100), the number of test cases. The next 2*T lines describe the test cases. For each test case, the first line contains two integers n and m (1 ≤ n, m ≤ 50) followed by n lines each containing m characters (\'1\' or \'0\'). For each test case, output \\"YES\\" if there exists at least one rectangle with all corners active, and \\"NO\\" otherwise. Example input: 2 3 4 1101 1011 1001 3 3 100 010 001 Example output: YES NO","solution":"def rectangle_with_corners_active(t, test_cases): results = [] for case in test_cases: n, m, grid = case active_positions = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == \'1\'] active_positions_set = set(active_positions) found = False for i in range(len(active_positions)): x1, y1 = active_positions[i] for j in range(i + 1, len(active_positions)): x2, y2 = active_positions[j] if x1 != x2 and y1 != y2: # Ensure we are looking at two different rows and two different columns if (x1, y2) in active_positions_set and (x2, y1) in active_positions_set: found = True break if found: break results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"Kara runs a pizza delivery service and she is trying to optimize her delivery routes. She has a list of delivery locations and the time it takes to travel between each pair of locations. She needs to find the shortest possible route that visits each location exactly once and returns to the starting point. However, due to traffic patterns, the travel times are not always symmetric. That is, the time it takes to travel from location A to location B might be different from the time it takes to travel from location B to location A. Write a program to help Kara determine the shortest possible route that visits each location exactly once and returns to the starting point (this problem is a variation of the Traveling Salesman Problem). Input: The first line contains an integer n (2 ≤ n ≤ 15) — the number of delivery locations. The next n lines each contain n integers, where the j-th integer in the i-th line represents the time it takes to travel from location i to location j (0 ≤ time ≤ 100). Output: Print a single integer — the minimum time required to complete the route. Example: Input: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output: 80 Note: In the example, the best route is 0 -> 1 -> 3 -> 2 -> 0 with a total travel time of 80 units.","solution":"from itertools import permutations def shortest_route(n, travel_times): Returns the shortest possible route that visits each location exactly once and returns to the starting point. locations = range(n) shortest_time = float(\'inf\') for perm in permutations(locations): current_time = 0 for i in range(n-1): current_time += travel_times[perm[i]][perm[i+1]] current_time += travel_times[perm[-1]][perm[0]] if current_time < shortest_time: shortest_time = current_time return shortest_time def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) travel_times = [] for i in range(n): travel_times.append(list(map(int, data[1 + i*n : 1 + (i+1)*n]))) print(shortest_route(n, travel_times)) if __name__ == \\"__main__\\": main()"},{"question":"Given a string representing a sequence of nested mathematical operations, write a function that evaluates it. The string will contain only single digit integers (0-9), and the operations will be addition (+) and multiplication (*). Operators are nested using parentheses () to indicate priority. Ensure that outermost operations are evaluated before innermost ones. # Input A string s representing the nested operations. The string will have a length of at most 1000 characters. # Output An integer representing the result of the evaluated expression. # Example Input ```plaintext s = \\"(2+(3*4)+5)\\" ``` Output ```plaintext 19 ``` Input ```plaintext s = \\"((1+3)*(2+2))\\" ``` Output ```plaintext 16 ``` # Note The example expressions are evaluated as follows: 1. For \\"(2+(3*4)+5)\\", first the (3*4) is evaluated to 12, then 2+12+5 is evaluated to 19. 2. For \\"((1+3)*(2+2))\\", first (1+3) is evaluated to 4, (2+2) is evaluated to 4, then 4*4 is evaluated to 16. # Constraints - The string will be a valid sequence of operations. - There will be no spaces or invalid characters in the string. - The length of the string will not exceed 1000 characters.","solution":"def evaluate_expression(s): Evaluates a string representing a sequence of nested mathematical operations. The string will contain only single digit integers (0-9), and the operations will be addition (+) and multiplication (*). def helper(index): stack = [] num = 0 sign = \'+\' while index < len(s): char = s[index] if char.isdigit(): num = int(char) if char == \'(\': num, new_index = helper(index + 1) index = new_index if char in \'+*)\' or index == len(s) - 1: if sign == \'+\': stack.append(num) elif sign == \'*\': stack[-1] *= num if char == \')\': return sum(stack), index num = 0 sign = char index += 1 return sum(stack) return helper(0)"},{"question":"During a dream, Anna saw a treasure map leading to a hidden gold chest. The map was encrypted into a set of triplets of positive integers. Each triplet (ai, bi, ci) represents the sides of a triangle. The elderly cartographer who drew the map told her that only triangles with integer sides and a positive area can lead to the treasure. Your task is to identify valid triangles from the provided set of triplets. A triplet (a, b, c) forms a valid triangle if and only if the sum of any two sides is greater than the third side, that is a + b > c, a + c > b, and b + c > a. You are given a set of n triplets to process. Determine which of these triplets can form a valid triangle. # Input - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of triplets in the set. - Each of the next n lines contains three positive integers ai, bi, ci (1 ≤ ai, bi, ci ≤ 106) — representing the sides of a triangle. # Output - For each triplet, output \\"Yes\\" if it can form a valid triangle. Otherwise, output \\"No\\". # Example Input ``` 3 3 4 5 1 2 3 2 2 2 ``` Output ``` Yes No Yes ``` # Explanation - The first triplet (3, 4, 5) can form a valid triangle since 3 + 4 > 5, 3 + 5 > 4, and 4 + 5 > 3. - The second triplet (1, 2, 3) cannot form a triangle since 1 + 2 is not greater than 3. - The third triplet (2, 2, 2) can form a valid triangle as all conditions for a triangle are satisfied.","solution":"def is_valid_triangle(a, b, c): Determines if the given sides a, b, c can form a valid triangle. return a + b > c and a + c > b and b + c > a def valid_triangles(n, triplets): Returns a list of \\"Yes\\" or \\"No\\" for each triplet indicating if it can form a valid triangle. Args: n: The number of triplets. triplets: A list of tuples, each containing three integers representing the sides of a triangle. Returns: A list of strings \\"Yes\\" or \\"No\\" for each triplet. result = [] for triplet in triplets: if is_valid_triangle(*triplet): result.append(\\"Yes\\") else: result.append(\\"No\\") return result"},{"question":"In a small village, they have recently set up a new habit of string lights for decoration. The villagers have a particular string of N bulbs arranged in a straight line, each with a unique color. Now, they want to identify segments of these strings that contain all unique bulbs. Given an integer array, bulbs, where each integer represents a different color, you need to determine the length of the longest contiguous segment with all unique bulbs. If the array is `[1, 2, 3, 1, 2, 3, 4, 5]`, the longest contiguous segment with all unique bulbs is `[1, 2, 3, 4, 5]`, which has length 5. Write a function `int longestUniqueSegment(int[] bulbs)`, that takes as input: - `bulbs`: an integer array of length N (`1 ≤ N ≤ 10000`), where each integer represents the color of a bulb. Output the length of the longest segment of unique bulbs. # Example Input ``` [1, 2, 3, 1, 2, 3, 4, 5] ``` Output ``` 5 ``` Explanation The longest segment of unique bulbs is `[1, 2, 3, 4, 5]`, which has 5 distinct bulbs. Another example: Input ``` [7, 3, 5, 2, 1, 3, 5, 4, 6] ``` Output ``` 6 ``` Explanation The longest segment with all unique bulbs is `[7, 3, 5, 2, 1, 3, 5, 4],` which has 6 unique bulbs.","solution":"def longestUniqueSegment(bulbs): Returns the length of the longest contiguous segment with unique numbers. n = len(bulbs) bulb_dict = {} left = 0 max_length = 0 for right in range(n): if bulbs[right] in bulb_dict: left = max(left, bulb_dict[bulbs[right]] + 1) bulb_dict[bulbs[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"An international research organization categorizes the quality of water samples with specific labels based on the concentration of a certain pollutant. Each water sample is represented by a string consisting of the characters \'P\', \'A\', and \'N\'. A \'P\' indicates a point where the pollutant exceeds the safe level in significant amount, \'A\' indicates the pollutant level is acceptable, and \'N\' indicates no presence of the pollutant. If there are at least 5 consecutive \'P\'s in the string, the water quality is categorized as \\"ALARMING\\". If there are no \'P\'s in the string or all \'P\'s are isolated (i.e., not consecutive), the water quality is categorized as \\"SAFE\\". Otherwise, the water quality is categorized as \\"WARNING\\". The first input line contains a non-empty string of up to 150 characters consisting of characters \'P\', \'A\', and \'N\'. Print \\"ALARMING\\" if the water quality is alarming, \\"SAFE\\" if it is safe, and \\"WARNING\\" otherwise.","solution":"def water_quality(water_sample): Determines the quality of water based on the concentration of a certain pollutant as represented by characters \'P\', \'A\', and \'N\' in the water_sample string. Parameters: water_sample (str): A string representing the water sample Returns: str: \\"ALARMING\\", \\"SAFE\\", or \\"WARNING\\" based on the pollutant concentration if \'PPPPP\' in water_sample: return \\"ALARMING\\" if \'P\' not in water_sample: return \\"SAFE\\" return \\"WARNING\\""},{"question":"You are given a sequence of integers and you need to perform a series of operations on this sequence. Each operation is described by three integers `l`, `r`, and `x` (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10⁹). For each operation, increase every element in the subarray from l to r (inclusive) by integer x. Given the initial sequence of integers and the list of operations, compute the resulting sequence after all operations have been executed. The first line contains an integer n (1 ≤ n ≤ 10⁵), the length of the sequence. The next line contains n integers representing the initial sequence. The third line contains an integer q (1 ≤ q ≤ 10⁵), the number of operations. Each of the next q lines contains three integers l, r, and x describing an operation. Print the resulting sequence after applying all the operations.","solution":"def apply_operations(n, sequence, q, operations): Apply a series of operations to the sequence. Parameters: n (int): The length of the sequence. sequence (list): The initial sequence of integers. q (int): The number of operations. operations (list): A list of tuples containing the operations (l, r, x). Returns: list: The resulting sequence after all operations have been applied. # Create an auxiliary array to store the increments increments = [0] * (n + 1) # Apply each operation in the form of a difference array for l, r, x in operations: increments[l - 1] += x if r < n: increments[r] -= x # Apply the increments accumulatively to the original sequence current_increment = 0 for i in range(n): current_increment += increments[i] sequence[i] += current_increment return sequence"},{"question":"You are tasked with managing a CPU scheduler called Asura for a multi-core system. Each core in the system can execute a single job at a time, and all jobs take exactly one unit of time to complete. However, each core can switch to another job with a certain overhead, which means some time is consumed during the context switch. You have been given a list of jobs with their start times and priority levels. In the beginning, all cores are idle. The scheduler should aim to maximize the number of jobs completed while minimizing the total context switch overhead across all cores. The scheduler has the following characteristics: 1. Jobs can only start running at their specified start times. 2. Higher priority jobs should take precedence over lower priority jobs if multiple jobs are available at the same time. 3. Each job can only be assigned to one core. 4. The overhead (time consumed in context switch) is only incurred when switching from one job to a different job within a core, not when starting a new job on an idle core. Identify the maximum number of jobs that can be completed and the minimum total context switch overhead required to achieve this. The first line of the input contains two integers m (1 le m le 10^5) — the number of jobs. The next m lines describe the jobs. Each job is represented by a start time s_i (1 le s_i le 10^6) and an integer priority p_i (1 le p_i le 10^9). Output two integers: the maximum number of jobs that can be completed and the minimum total context switch overhead. Example input: ``` 5 1 10 2 5 3 7 4 1 5 8 ``` Example output: ``` 5 0 ```","solution":"from heapq import heappush, heappop from collections import defaultdict def maximize_jobs_min_overhead(jobs): # Sort the jobs by their start times jobs.sort() # This min-heap will store jobs available at a certain time available_jobs = [] job_count_completed = 0 total_context_switch_overhead = 0 current_time = 0 for start_time, priority in jobs: if start_time > current_time and available_jobs: # Execute the jobs in the order of their priority until no jobs left or till the start_time while available_jobs and current_time < start_time: prio, time = heappop(available_jobs) job_count_completed += 1 current_time = max(current_time, time) + 1 # Add the current job to available jobs heappush(available_jobs, (-priority, start_time)) current_time = max(current_time, start_time) # Process remaining jobs while available_jobs: prio, time = heappop(available_jobs) job_count_completed += 1 current_time = max(current_time, time) + 1 return job_count_completed, total_context_switch_overhead # Example usage: jobs = [(1, 10), (2, 5), (3, 7), (4, 1), (5, 8)] print(maximize_jobs_min_overhead(jobs)) # Expected output: (5, 0)"},{"question":"You are given a list of cities, each with a unique pair of coordinates (x, y) representing their geological location on a 2D plane. Each city has a corresponding population value, pi. The government wants to build a central hub in one of these cities such that the sum of the distances from this hub to all other cities, weighted by their populations, is minimized. The distance between any two cities is defined as the Manhattan distance, i.e., for two cities located at (xi, yi) and (xj, yj), the distance is calculated as |xi - xj| + |yi - yj|. Your task is to identify the city that should be selected as the central hub to minimize the weighted sum of distances to all other cities. If there are multiple cities with the same minimum weighted distance, choose the city that comes first in the input list. The input format is as follows: - The first line contains an integer N, the number of cities. - The next N lines each contain three integers: xi, yi, and pi, which represent the x-coordinate, y-coordinate, and population of the i-th city, respectively. Output the 1-based index of the city that should serve as the central hub. Constraints: - 1 ≤ N ≤ 1000 - -10^4 ≤ xi, yi ≤ 10^4 - 1 ≤ pi ≤ 10^4 **Example:** ``` Input: 3 1 2 5 3 4 10 -1 -1 3 Output: 2 ``` **Explanation:** The weighted sum of distances for each city is calculated as follows: - For the city at (1,2): 5 * (|1-1| + |2-2|) + 10 * (|1-3| + |2-4|) + 3 * (|1+1| + |2-(-1)|) = 0 + 20 + 9 = 29 - For the city at (3,4): 5 * (|3-1| + |4-2|) + 10 * (|3-3| + |4-4|) + 3 * (|3+1| + |4-(-1)|) = 20 + 0 + 21 = 41 - For the city at (-1,-1): 5 * (|-1-1| + |-1-2|) + 10 * (|-1-3| + |-1-4|) + 3 * (|-1+1| + |-1-(-1)|) = 15 + 80 + 0 = 95 The minimum weighted sum of distances is 29, corresponding to the second city in the list. Thus, the output is 2.","solution":"def find_central_hub(n, cities): def weighted_distance(x1, y1): return sum(p * (abs(x1 - x2) + abs(y1 - y2)) for x2, y2, p in cities) min_distance = float(\'inf\') central_hub_index = 0 for i in range(n): x, y, _ = cities[i] distance = weighted_distance(x, y) if distance < min_distance: min_distance = distance central_hub_index = i return central_hub_index + 1"},{"question":"You are given a string s consisting of lowercase English letters. You need to calculate the number of contiguous substrings of s that are palindromes. A string is called a palindrome if it reads the same backward as forward. First line contains a single string s (1 le |s| le 10^5) — the input string. Output a single integer — the number of palindromic substrings in s. For example: Input: `aaa` Output: `6` Explanation: The 6 palindromic substrings are `\\"a\\"`, `\\"a\\"`, `\\"a\\"`, `\\"aa\\"`, `\\"aa\\"` and `\\"aaa\\"`.","solution":"def count_palindromic_substrings(s): n = len(s) count = 0 def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for i in range(n): expand_around_center(i, i) expand_around_center(i, i+1) return count"},{"question":"You are given a list of strings. Determine the longest string in the list. The input consists of several lines where each line represents a string. The number of strings in the list is between 2 and 20, inclusive. Note that the number of strings is not given explicitly! Output the longest string. If there are multiple strings with the maximum length, output the one that appears first in the list.","solution":"def longest_string(strings): Determines the longest string in the list of strings. If there are multiple strings with the maximum length, returns the one that appears first in the list. :param strings: List of strings. :return: The longest string in the list. if not strings: return \\"\\" longest = strings[0] for string in strings: if len(string) > len(longest): longest = string return longest"},{"question":"Acy and Cataline love binary trees and are playing a game with them. They have a binary tree where each node is assigned a unique integer value. The tree is rooted at node 1. They perform two types of operations on this tree: 1. **Add Operation**: Add a new node with a given value as a child of a specified parent node. This new node can be either a left or a right child of the parent node. 2. **Max Path Sum Query**: Find the maximum path sum in the subtree rooted at a specified node. The path must start from this node and can end at any node in its subtree. A path sum in a binary tree is defined as the sum of values of nodes that form the path. The path must move only from parent nodes to child nodes and cannot skip levels. Given the initial value of the root node and the sequence of operations, Acy and Cataline want to know the result of each max path sum query. The first line of the input contains two space-separated integers, representing the value of the root node (v1) and the total number of operations (m), where 1 ≤ v1 ≤ 10^9 and 1 ≤ m ≤ 200,000. Each of the next m lines contains an operation in one of the following formats: - `1 p v l`: Add a new node with value v as the left child of node p. - `1 p v r`: Add a new node with value v as the right child of node p. - `2 u`: Find the maximum path sum in the subtree rooted at node u. For each \\"Max Path Sum Query\\", output the maximum path sum for the subtree rooted at the specified node. **Constraints:** - The number of nodes in the tree does not exceed 200,000. - The values of the nodes are unique integers ranging from 1 to 10^9. - The input is guaranteed to contain at least one query operation. **Example:** ``` Input 5 4 1 1 3 l 1 1 8 r 1 3 2 l 2 1 Output 13 ``` In this example, the tree would look like this after the operations: ``` 5 / 3 8 / 2 ``` The maximum path sum in the subtree rooted at node 1 is the sum of node 1, its right child (node 8), and its left subtree which includes nodes 3 and 2, giving us a total of 5 + 8 = 13.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None class BinaryTree: def __init__(self, root_value): self.nodes = {1: TreeNode(root_value)} def add(self, p, v, l_or_r): parent_node = self.nodes[p] new_node = TreeNode(v) self.nodes[v] = new_node if l_or_r == \'l\': parent_node.left = new_node else: parent_node.right = new_node def max_path_sum_from(self, node_value): node = self.nodes[node_value] return self._max_path_sum_dfs(node) def _max_path_sum_dfs(self, node): if node is None: return 0 left_sum = self._max_path_sum_dfs(node.left) right_sum = self._max_path_sum_dfs(node.right) return node.value + max(left_sum, right_sum) def process_operations(root_value, operations): tree = BinaryTree(root_value) result = [] for operation in operations: op = operation.split() if op[0] == \'1\': p, v, l_or_r = int(op[1]), int(op[2]), op[3] tree.add(p, v, l_or_r) elif op[0] == \'2\': u = int(op[1]) result.append(tree.max_path_sum_from(u)) return result # Function to handle input and output processing def run(input_data): lines = input_data.strip().split(\\"n\\") v1, m = map(int, lines[0].split()) operations = lines[1:m+1] result = process_operations(v1, operations) return result"},{"question":"Stacy has a string s consisting of lowercase English letters and an integer m. Her goal is to create a new string based on s that has exactly m palindromic substrings. A palindromic substring is any contiguous sequence of characters in the string that reads the same forwards and backwards. Help her construct such a string. If it is not possible to construct such a string, return \\"not possible\\". Input: - A single line containing the string s (1 ≤ |s| ≤ 100) and the integer m (1 ≤ m ≤ 10^5). Output: - If it is possible to construct such a string, return the new string. Otherwise, return \\"not possible\\". The output string\'s length should be the same as the input string\'s length. Example 1: Input: \\"abc\\", 2 Output: \\"aba\\" Example 2: Input: \\"abc\\", 10 Output: \\"not possible\\"","solution":"def construct_palindromic_string(s, m): n = len(s) # To maximize the number of palindromic substrings, use a single character repeated if m > (n * (n + 1)) // 2: # Maximum possible palindromic substrings in any string of length n return \\"not possible\\" # Create a string that maximizes palindromic substrings new_string = \'a\' * n # Purely made up of \'a\' characters return new_string"},{"question":"You are given an integer array of size n. The array contains unique positive integers. Find a pair of different indices i and j such that the absolute difference between the integers at these indices is equal to a given value k (|arr[i] - arr[j]| = k). If multiple pairs exist, output any one of them. Input - The first line contains two space-separated integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9). - The second line contains n space-separated unique positive integers representing the array elements. Output - Print two space-separated integers i and j (1 ≤ i, j ≤ n, i ≠ j) that represent the 1-based indices of the array elements satisfying the condition. - If there are multiple valid pairs, you may print any one of them. If no such pair exists, print -1. Example Input ``` 5 3 1 5 3 4 2 ``` Output ``` 1 4 ``` Explanation In the example above, the pair (1, 4) results in the absolute difference |2 - 5| = 3, which is equal to the given value k. Note that multiple solutions may exist, and any valid solution is acceptable.","solution":"def find_indices_with_difference(arr, n, k): Returns a pair of indices i and j such that the absolute difference between arr[i] and arr[j] is equal to k. If no such pair exists, returns -1. Parameters: arr (list of int): Array of unique positive integers. n (int): Size of the array. k (int): The absolute difference to find. Returns: tuple: A pair of indices (i, j) or (-1,). value_to_index = {val: idx + 1 for idx, val in enumerate(arr)} for i in range(n): value = arr[i] if (value + k) in value_to_index: return (i + 1, value_to_index[value + k]) if (value - k) in value_to_index: return (i + 1, value_to_index[value - k]) return (-1,) # Example usage: n, k = 5, 3 arr = [1, 5, 3, 4, 2] print(find_indices_with_difference(arr, n, k)) # Output should be one of the valid pairs like (1, 4)"},{"question":"You have been given a connected, undirected graph with `n` vertices and `m` edges. The vertices are labeled from `1` to `n`. Each edge connects two distinct vertices and there can be multiple edges between the same pair of vertices. Your task is to determine if the given graph is a tree. A tree is an acyclic connected graph. # Input - The first line contains two integers `n` and `m` (`1 ≤ n ≤ 1000`, `0 ≤ m ≤ 2000`) -- the number of vertices and edges in the graph. - The next `m` lines each contain two integers `u` and `v` (`1 ≤ u, v ≤ n`) -- representing an edge between the vertices `u` and `v`. # Output - Output \\"YES\\" if the given graph is a tree. Otherwise, output \\"NO\\". # Example Input: ``` 3 2 1 2 2 3 ``` Output: ``` YES ``` Input: ``` 4 3 1 2 2 3 3 1 ``` Output: ``` NO ``` # Explanation In the first example, the graph is connected and has no cycles, hence it forms a tree. In the second example, the graph contains a cycle (1-2-3-1), hence it is not a tree. # Notes: 1. A tree with `n` vertices has exactly `n-1` edges. 2. A tree is acyclic and connected. Your task is to write a function to determine if the given graph meets the criteria for being a tree.","solution":"def is_tree(n, m, edges): if m != n - 1: return \\"NO\\" from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() queue = deque([1]) visited.add(1) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return \\"YES\\" if len(visited) == n else \\"NO\\""},{"question":"Charlie recently developed a new type of sorting algorithm that sorts an array of integers in a specific manner. Let’s define the \\"special sorted order\\" as follows: For any integer array `arr`, this \\"special sorted order\\" works by first arranging all even numbers in ascending order, followed by all odd numbers in descending order. Write a function that takes an array of integers and outputs the array rearranged according to the \\"special sorted order\\". # Function Signature: `def special_sorted_order(arr: List[int]) -> List[int]:` # Input: - An array of integers `arr` (1 ≤ len(arr) ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9). # Output: - The array sorted in the \\"special sorted order\\". # Example: Example 1: Input: `[5, 3, 2, 8, 7, 6, 1]` Output: `[2, 6, 8, 7, 5, 3, 1]` Example 2: Input: `[-1, -3, -5, -2, -4, 0]` Output: `[-4, -2, 0, -1, -3, -5]` # Explanation: In example 1, the even numbers [2, 8, 6] are sorted as [2, 6, 8] ascending, and the odd numbers [5, 3, 7, 1] are sorted as [7, 5, 3, 1] descending. The final output combines these results to form `[2, 6, 8, 7, 5, 3, 1]`. In example 2, the even numbers [-2, -4, 0] are sorted as [-4, -2, 0] ascending, and the odd numbers [-1, -3, -5] are sorted as [-1, -3, -5] descending. The final output combines these results to form `[-4, -2, 0, -1, -3, -5]`. # Constraints: - Try to solve the problem within O(n log n) time complexity.","solution":"from typing import List def special_sorted_order(arr: List[int]) -> List[int]: Sorts the array such that all even numbers appear first in ascending order, followed by all odd numbers in descending order. Parameters: arr (List[int]): The input array of integers. Returns: List[int]: The array sorted in the special sorted order. evens = sorted([x for x in arr if x % 2 == 0]) odds = sorted([x for x in arr if x % 2 != 0], reverse=True) return evens + odds"},{"question":"Write a function that takes a list of integers and determines if the list can be partitioned into two subsets such that the sums of the elements in both subsets are equal. The function should return True if such a partition exists, otherwise it should return False. # Input - A list of non-negative integers, with its length n (1 ≤ n ≤ 100). # Output - Return a boolean value (True or False). # Example 1. Input: [1, 5, 11, 5] Output: True Explanation: The array can be partitioned as [1, 5, 5] and [11]. 2. Input: [1, 2, 3, 5] Output: False Explanation: The array cannot be partitioned into equal sum subsets. # Note - You may assume the sum of the list\'s elements does not exceed 2000.","solution":"def can_partition(nums): Determines if the list can be partitioned into two subsets such that the sums of the elements in both subsets are equal. total_sum = sum(nums) # If total sum is odd, it\'s not possible to partition into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a DP array to store whether a sum is achievable dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): if dp[i - num]: dp[i] = True return dp[target]"},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex has a specific value assigned to it. Your task is to find a simple path in the graph such that the sum of the values of the vertices on this path is maximized. A simple path is a path that does not include any vertex more than once. The input consists of: - The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of vertices and the number of edges in the graph. - The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 1000) — the values of the vertices. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing an edge between vertices u and v in the graph. Output a single integer — the maximum sum of the values of the vertices on a simple path in the graph. Example: Input: ``` 5 6 1 2 3 4 5 1 2 1 3 2 3 2 4 3 5 4 5 ``` Output: ``` 15 ``` Explanation: The simple path with maximum sum of vertex values is 1 → 2 → 3 → 5, which has a sum of 1 + 2 + 3 + 4 + 5 = 15.","solution":"def dfs(graph, values, vertex, visited, current_sum): visited.add(vertex) max_sum = current_sum + values[vertex] for neighbor in graph[vertex]: if neighbor not in visited: max_sum = max(max_sum, dfs(graph, values, neighbor, visited.copy(), current_sum + values[vertex])) return max_sum def max_sum_path(n, m, values, edges): from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) max_sum = 0 for vertex in range(n): max_sum = max(max_sum, dfs(graph, values, vertex, set(), 0)) return max_sum # Example usage # n = 5, m = 6 # values = [1, 2, 3, 4, 5] # edges = [(1, 2), (1, 3), (2, 3), (2, 4), (3, 5), (4, 5)] # max_sum_path(n, m, values, edges)"},{"question":"Andrew is planning to teach his dog, Max, some new tricks in a specific order. To help him remember the sequence of tricks and how long each trick will take to teach, he maintains a list. Each trick has a name and an associated duration (in minutes). Sometimes, he realizes that he is teaching Max in too rigid a sequence and decides to adjust his teaching plan. Your task is to help Andrew manage this list with the following operations: At day 0, the trick list is empty. In each of the following q days, Andrew will do exactly one of the three operations. For each query operation to return the total teaching duration up to that day, the program should output the result before proceeding to the next day\'s operation. - The first line consists of a single integer q (1 ≤ q ≤ 10^5) — the number of operations. - The following q lines consist of the description of the operations. The i-th line consists of the operation that Andrew has done on the i-th day. The operations are: 1. **add trick_name duration**: Adds a trick with its name and duration to the end of the list. 2. **change trick_name new_duration**: Changes the duration of the trick with the specified name. If the trick is not found, no operation is done. 3. **total_duration**: Outputs the total duration of all tricks up to the current day. All trick names consist only of lowercase English letters and have a length of 1 ≤ |trick_name| ≤ 15. Each duration and new duration is an integer (1 ≤ duration, new_duration ≤ 1000). The last operation is guaranteed to be a `total_duration` operation. For example: ``` Input: 5 add sit 10 add roll 20 change sit 15 add fetch 25 total_duration Output: 60 ```","solution":"def manage_tricks(operations): Manage the list of tricks and their durations and handle operations accordingly. :param operations: List of operations to manage tricks :return: List of results for the \\"total_duration\\" operations tricks = {} total_duration = 0 results = [] for op in operations: parts = op.split() command = parts[0] if command == \\"add\\": trick_name = parts[1] duration = int(parts[2]) if trick_name not in tricks: tricks[trick_name] = duration total_duration += duration elif command == \\"change\\": trick_name = parts[1] new_duration = int(parts[2]) if trick_name in tricks: total_duration += new_duration - tricks[trick_name] tricks[trick_name] = new_duration elif command == \\"total_duration\\": results.append(total_duration) return results # Example usage # operations = [ # \\"add sit 10\\", # \\"add roll 20\\", # \\"change sit 15\\", # \\"add fetch 25\\", # \\"total_duration\\" # ] # print(manage_tricks(operations)) # should return [60]"},{"question":"You are given a string s containing only lowercase English letters and an integer x. Your task is to transform the string into a new string where each character is replaced by the character that appears x positions after it in the English alphabet in a cyclic manner. That is, after \'z\', it will wrap around to \'a\'. For example, if s = \\"abc\\" and x = 2, then the resulting string would be \\"cde\\". # Input The first line of the input contains an integer x (1 leq x leq 25). The second line contains the string s (1 leq |s| leq 10^5) consisting of only lowercase English letters. # Output Output the resulting string after applying the described transformation. # Example Input: ``` 2 abc ``` Output: ``` cde ``` # Explanation In the example, each character in the input string \\"abc\\" is shifted by 2 positions forward in the alphabet: - \'a\' becomes \'c\' - \'b\' becomes \'d\' - \'c\' becomes \'e\' Hence, the output is \\"cde\\".","solution":"def transform_string(s, x): Transforms the input string by shifting each character x positions in the alphabet. Parameters: s (str): Input string consisting of lowercase English letters. x (int): Number of positions to shift each character. Returns: str: Transformed string. result = [] for char in s: shifted_char = chr(((ord(char) - ord(\'a\') + x) % 26) + ord(\'a\')) result.append(shifted_char) return \'\'.join(result)"},{"question":"In a faraway land, there\'s a magical tree that blooms in a peculiar way. Each node of the tree represents a unique flower, and the connections between nodes represent how the flowers spread their seeds to grow new flowers. However, due to an ancient curse, some connections between nodes might be broken. The tree is guaranteed to be connected with no cycles. You are given an array `parents` where `parents[i]` denotes the parent node of the flower i. If `parents[i]` is -1, it means node i is the root of the tree. Each node\'s position in the array corresponds to the node numbers which are 0-indexed. The task is to find two things: 1. A representation of the tree as an adjacency list. 2. The size of the subtree for every node (including itself). # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of nodes in the tree. - The second line contains `n` integers where the i-th integer is `parents[i]` (-1 ≤ parents[i] < n). # Output - Print the adjacency list of the tree. For each node from 0 to n-1, print the list of its children in ascending order. - Print a single line containing `n` integers where the i-th integer is the size of the subtree rooted at node i. The size of a subtree is defined as the number of nodes within that subtree including the root. # Example Input ``` 5 -1 0 0 1 1 ``` Output ``` 0: [1, 2] 1: [3, 4] 2: [] 3: [] 4: [] 5 3 1 1 1 ``` Explanation - The tree has the root at node 0. - Node 0 has two children: 1 and 2. - Node 1 has two children: 3 and 4. - Nodes 2, 3, and 4 have no children. - The subtree size of node 0 is 5 (including itself). - The subtree size of node 1 is 3 (including itself and its two children). - The subtree size of nodes 2, 3, and 4 is 1 each (counting only themselves).","solution":"def construct_tree_and_subtree_sizes(n, parents): from collections import defaultdict, deque # Construct the adjacency list adj_list = defaultdict(list) root = -1 for child, parent in enumerate(parents): if parent == -1: root = child else: adj_list[parent].append(child) # Sort children lists for each node for children in adj_list.values(): children.sort() # Function to compute the size of a subtree rooted at node `u` def compute_subtree_sizes(node): size = 1 for child in adj_list[node]: size += compute_subtree_sizes(child) subtree_sizes[node] = size return size # Initialize the subtree sizes array subtree_sizes = [0] * n compute_subtree_sizes(root) return adj_list, subtree_sizes def format_tree(adj_list, subtree_sizes): result = [] for node in range(len(subtree_sizes)): result.append(f\\"{node}: [{\', \'.join(map(str, adj_list[node]))}]\\") subtree_sizes_str = \\" \\".join(map(str, subtree_sizes)) result.append(subtree_sizes_str) return \\"n\\".join(result)"},{"question":"John is a passionate gardener and he loves growing exotic plants in his garden. His garden can be represented as an n × m grid of cells, each of which can either be empty or contain obstacles like rocks and shrubs. John wants to water his plants using an automated sprinkler system. Each sprinkler can cover one cell per second in one of the four cardinal directions (up, down, left, right). However, each sprinkler can only operate continuously along a straight line until it hits an obstacle or the boundary of the garden. John needs to determine the minimum number of seconds required for a sprinkler placed at position (x1, y1) to water a plant at position (x2, y2). The sprinkler can only water cells that are directly reachable without turning or encountering obstacles. The cells (x1, y1) and (x2, y2) will always be empty and will never coincide. Input format: - The first line contains two integers n and m (1 ≤ n, m ≤ 500) — the dimensions of the garden grid. - The next n lines contain m characters each; the i-th line contains the j-th character which is \'#\' if the cell (i, j) contains an obstacle, and \'.\' if it is empty. - The last line contains four integers x1, y1, x2, y2 (1 ≤ x1, x2 ≤ n, 1 ≤ y1, y2 ≤ m) — the coordinates of the initial sprinkler position and the plant\'s position, respectively. Output format: - Print a single integer — the minimum number of seconds required for the sprinkler to water the plant. If it\'s impossible, print -1. Example: Input: 5 5 ..... ..#.. ..... ..#.. ..... 1 1 5 5 Output: -1 Explanation: In this example, it\'s not possible for the sprinkler to continuously cover the cell (5, 5) starting from (1, 1) without turning or hitting any obstacles. Hence, the output is -1.","solution":"def min_seconds_to_water_plant(n, m, grid, x1, y1, x2, y2): Returns the minimum number of seconds required for a sprinkler at (x1, y1) to water a plant at (x2, y2). Returns -1 if it\'s impossible. def is_reachable_in_line(x1, y1, x2, y2): if x1 == x2: for j in range(min(y1, y2), max(y1, y2) + 1): if grid[x1][j] == \'#\': return False return True elif y1 == y2: for i in range(min(x1, x2), max(x1, x2) + 1): if grid[i][y1] == \'#\': return False return True return False x1 -= 1 y1 -= 1 x2 -= 1 y2 -= 1 if is_reachable_in_line(x1, y1, x2, y2): return max(abs(x1 - x2), abs(y1 - y2)) else: return -1"},{"question":"Alex is organizing a coding competition with n problems, and he wants to ensure that each contestant has a unique scoring system. He decides that each problem will have an integer score, and each of these integers will be unique. Given an array of integers representing the scores allotted to each problem, you need to check if a specific score exists in this array and return the index of that score. Write a function `find_score_index` that takes the following parameters: - An integer `n` representing the number of problems. - A list of `n` integers, `scores`, where each integer represents the score of a problem. - An integer `target`, representing the score to be searched for in the list. The function should return the 0-based index of the `target` score if it is present in the `scores` list. If the `target` score is not found, return -1. # Function Signature ```python def find_score_index(n: int, scores: List[int], target: int) -> int: ``` # Input - An integer `n` (1 ≤ n ≤ 10^5) — the number of problems. - A list of `n` integers `scores` (1 ≤ scores[i] ≤ 10^9) — the scores assigned to each problem. - An integer `target` (1 ≤ target ≤ 10^9) — the score to search for. # Output - An integer representing the 0-based index of the `target` score in the list, or -1 if the target score is not present. # Example ```python find_score_index(5, [15, 3, 21, 10, 50], 21) # returns 2 find_score_index(5, [15, 3, 21, 10, 50], 5) # returns -1 ``` # Constraints - The input values are guaranteed to be within the given constraints. - Each score in the input list will be unique and sorted in ascending order.","solution":"def find_score_index(n, scores, target): Returns the 0-based index of the target score if it is present in the scores list. If the target score is not found, returns -1. try: return scores.index(target) except ValueError: return -1"},{"question":"You are given an array of integers where some elements appear twice and others appear once. Find all the elements that appear twice in this array without using extra space and in O(n) runtime. Notes: - The returned array should be in **ascending order**. - You should not modify the original array. Write a function `findDuplicates(arr: List[int]) -> List[int]` to solve this problem. # Input - `arr` (List[int]): A list of integers. `2 <= len(arr) <= 10^5` and `1 <= arr[i] <= len(arr)` # Output - Return a list of integers that appear twice in the input array, sorted in ascending order. # Example ```python >>> findDuplicates([4,3,2,7,8,2,3,1]) [2, 3] >>> findDuplicates([1,1,2]) [1] >>> findDuplicates([1,2,3,4,5,6,7,8,9,10]) [] ``` # Constraints - The solution should work in O(n) time. - You cannot use extra space for another array or hash table. However, you can modify the input array to keep track of frequencies, but you need to restore the array at the end.","solution":"from typing import List def findDuplicates(arr: List[int]) -> List[int]: result = [] for i in range(len(arr)): index = abs(arr[i]) - 1 if arr[index] < 0: result.append(index + 1) arr[index] = -arr[index] # Restore the original array for i in range(len(arr)): arr[i] = abs(arr[i]) return sorted(result)"},{"question":"You are given a list of n robots. Each robot has a unique identifier and a battery life associated with it. Your task is to determine the longest sequence of robots based on their battery lives where each robot in the sequence has a strictly greater battery life than the previous robot in the sequence. The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of robots. The next line contains n space-separated pairs of integers, where each pair (id_i, battery_i) represents the identifier and battery life of the i-th robot respectively (1 ≤ id_i ≤ 10^7, 1 ≤ battery_i ≤ 10^9). Each identifier is unique. Print the length of the longest sequence of robots where each robot in the sequence has a strictly greater battery life than the previous one. # Example Input ``` 5 1 3 2 5 3 6 4 1 5 4 ``` Output ``` 3 ``` Explanation: The longest sequence of robots with strictly increasing battery lives is either (1, 3, 3, 6) or (2, 5, 3, 6), both of which have a length of 3.","solution":"def longest_increasing_battery_sequence(n, robots): Determines the length of the longest sequence of robots where each robot in the sequence has a strictly greater battery life than the previous robot in the sequence. Parameters: n (int): Number of robots robots (list of tuples): List of tuples where each tuple contains a pair (id, battery life) Returns: int: Length of the longest sequence of robots with strictly increasing battery lives battery_lives = [robots[i][1] for i in range(n)] if n == 0: return 0 # Array to store the longest increasing subsequence length at each index lis = [1] * n for i in range(1, n): for j in range(i): if battery_lives[i] > battery_lives[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"Samantha is working on a project management tool that involves scheduling a series of tasks. Each task is represented by a pair of integers: the start time and the end time. The tasks need to be scheduled in such a way that no two tasks overlap with each other. If one task ends at the same time another task starts, they are considered non-overlapping. Your objective is to help Samantha find the maximum number of tasks that can be scheduled without any overlaps. The first line of input contains an integer n (1 ≤ n ≤ 200), the number of tasks. Each of the next n lines contains two integers si and ei (1 ≤ si < ei ≤ 1000) representing the start and end times of the i-th task. Output a single integer — the maximum number of non-overlapping tasks that can be scheduled. Example Input: ``` 5 1 3 2 5 4 6 6 8 5 7 ``` Example Output: ``` 3 ``` Explanation: The tasks [1, 3], [4, 6], and [6, 8] can be scheduled without overlapping each other, so the maximum number of non-overlapping tasks is 3.","solution":"def max_non_overlapping_tasks(n, tasks): Returns the maximum number of non-overlapping tasks that can be scheduled. Parameters: n (int): Number of tasks tasks (list of tuples): List containing pairs of integers representing the start and end times of tasks Returns: int: Maximum number of non-overlapping tasks # Sort the tasks by their end times tasks.sort(key=lambda x: x[1]) count = 0 current_end = 0 for task in tasks: start, end = task if start >= current_end: # This task can be added without overlapping count += 1 current_end = end return count"},{"question":"You are given a set of integers. You need to find a triplet (i, j, k) from the array such that arr[i] + arr[j] + arr[k] = 0 and 0 ≤ i < j < k < n. Write a function `find_triplet(arr)` that takes an integer array `arr` as input, where `n` is the number of elements in the array. The function returns a list of all unique triplets that give the sum of zero. Each triplet should be in the form of a list [p, q, r] where p, q, and r are integers. If no such triplets exist, return an empty list. **Input** - An integer array `arr` of length `n` (2 ≤ n ≤ 100) where each element `arr[i]` is in the range [-10^3, 10^3]. **Output** - A list of lists, where each list contains three integers that add up to zero. The order of the triplets in the output list does not matter, but the integers within each triplet should be in non-decreasing order. **Example** ```python find_triplet([-1, 0, 1, 2, -1, -4]) ``` Returns: ```python [[-1, 0, 1], [-1, -1, 2]] ``` ```python find_triplet([3, 0, -2, -1, 1, 2]) ``` Returns: ```python [[-2, -1, 3], [-2, 0, 2], [-1, 0, 1]] ```","solution":"def find_triplet(arr): Returns a list of unique triplets [p, q, r] from arr such that p + q + r = 0. Each triplet should be in non-decreasing order. arr.sort() result = [] n = len(arr) for i in range(n - 2): # Skip duplicated elements if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, n - 1 while left < right: s = arr[i] + arr[left] + arr[right] if s == 0: result.append([arr[i], arr[left], arr[right]]) # Skip duplicated elements while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif s < 0: left += 1 else: right -= 1 return result"},{"question":"You are given an undirected, weighted graph with n nodes and m edges. Each edge has a positive weight. You need to determine the shortest distance from node 1 to node n. If there is no path from node 1 to node n, print -1. The first line contains two integers n and m — the number of nodes and the number of edges (2 leq n leq 10^5, 1 leq m leq 10^6). The following m lines each contain three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10^9), representing an edge between nodes u and v with weight w. Output a single integer — the shortest distance from node 1 to node n. If there is no path from node 1 to node n, print -1. **Input:** ``` 5 6 1 2 2 2 3 2 2 4 4 3 5 3 4 5 1 1 5 10 ``` **Output:** ``` 7 ```","solution":"import heapq def dijkstra(graph, start, n): Dijkstra\'s algorithm to find the shortest path in a weighted graph from the start node to the n-th node. distances = {node: float(\'infinity\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[n] if distances[n] != float(\'infinity\') else -1 def shortest_path(n, m, edges): Function to setup the graph and find the shortest path from node 1 to node n. graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) return dijkstra(graph, 1, n)"},{"question":"Given two strings, s_1 and s_2, your task is to determine whether s_1 can be transformed into s_2 by performing a series of specific operations. The allowed operations are: 1. Append a single character (any character from \'a\' to \'z\') to the end of s_1. 2. Remove the last character of s_1 if s_1 is not empty. 3. Replace any character in s_1 with another character (from \'a\' to \'z\'). Your program should return \\"YES\\" (without quotes) if it is possible to transform s_1 into s_2, and \\"NO\\" (without quotes) otherwise. You can print each letter in any case (upper or lower). # Input The first line of input contains the string s_1 (1 leq |s_1| leq 1000), the string to transform. The second line contains the string s_2 (1 leq |s_2| leq 1000), the target string. # Output Print \\"YES\\" if it is possible to transform s_1 into s_2, otherwise print \\"NO\\". # Example Input ``` abc xbc ``` Output ``` YES ``` Input ``` abcd abcde ``` Output ``` YES ``` Input ``` xyz abc ``` Output ``` NO ``` # Note In the first example, \\"abc\\" can be transformed into \\"xbc\\" by replacing the first character \'a\' with \'x\'. In the second example, \\"abcd\\" can be transformed into \\"abcde\\" by appending the character \'e\' to the end. The third example is impossible because multiple character replacements are required and they cannot directly transform \'xyz\' into \'abc\' in a single operation for each character.","solution":"def can_transform(s1, s2): Determines whether s1 can be transformed into s2 using the allowed operations. Allowed operations: 1. Append a single character to the end of s1. 2. Remove the last character of s1 if s1 is not empty. 3. Replace any character in s1 with another character. :param s1: The original string. :param s2: The target string. :return: \\"YES\\" if s1 can be transformed into s2, otherwise \\"NO\\". len1 = len(s1) len2 = len(s2) if abs(len1 - len2) > 1: return \\"NO\\" diff_count = 0 for i in range(min(len1, len2)): if s1[i] != s2[i]: diff_count += 1 if diff_count > 1: return \\"NO\\" if len1 != len2: diff_count += 1 return \\"YES\\" if diff_count <= 1 else \\"NO\\""},{"question":"You are working on a new feature for a game. The game world is represented by a grid of size n x m where each cell can be one of three types: empty (\'.\'), blocked (\'#\'), or the player\'s starting position (\'P\'). The player can move up, down, left, or right, and you want to determine if they can reach all the empty cells from the starting position. Write a function that takes a grid of characters and determines if all empty cells are reachable from the player\'s starting position. If all empty cells are reachable, return \\"Yes\\". Otherwise, return \\"No\\". Input The input will be received as a list of strings, where each string represents a row of the grid. The grid contains n strings and each string has m characters (\'#\', \'.\', or \'P\'). You can assume that there is exactly one \'P\' in the grid. Output Return \\"Yes\\" if all empty cells can be reached from the player\'s starting position, otherwise return \\"No\\". Function Signature ```python def can_reach_all_empty_cells(grid: List[str]) -> str: ``` Example 1: ```python grid = [ \\"P..\\", \\".#.\\", \\"..#\\" ] print(can_reach_all_empty_cells(grid)) # Output: \\"Yes\\" ``` Example 2: ```python grid = [ \\"P.#\\", \\"#\\", \\"...\\", ] print(can_reach_all_empty_cells(grid)) # Output: \\"No\\" ``` Constraints: - 1 ≤ n, m ≤ 100 - The grid will always contain exactly one \'P\'.","solution":"from typing import List def can_reach_all_empty_cells(grid: List[str]) -> str: n = len(grid) m = len(grid[0]) # Find starting position start_pos = (-1, -1) for i in range(n): for j in range(m): if grid[i][j] == \'P\': start_pos = (i, j) break if start_pos != (-1, -1): break # Perform Breadth First Search (BFS) from collections import deque visited = [[False] * m for _ in range(n)] queue = deque([start_pos]) visited[start_pos[0]][start_pos[1]] = True directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited[nx][ny] = True # Check if all empty cells are visited for i in range(n): for j in range(m): if grid[i][j] == \'.\' and not visited[i][j]: return \\"No\\" return \\"Yes\\""},{"question":"Alice is practicing her mathematics skills by creating and solving puzzles with arrays. She came up with a puzzle involving an array of integers where she needs to find a subarray that meets specific conditions. Help Alice solve her puzzle by writing a program that finds the length of the shortest subarray having a sum equal to or greater than a given target sum. You are given an array of n integers and a target sum. Your task is to find the length of the shortest contiguous subarray whose sum is equal to or greater than the target sum. If no such subarray exists, return 0. # Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the size of the array. - The second line contains n integers a1, a2, .., an (1 ≤ ai ≤ 10^4) — the elements of the array. - The third line contains an integer s (1 ≤ s ≤ 10^9) — the target sum. # Output: - Print a single integer — the length of the shortest subarray with a sum equal to or greater than s. If there is no such subarray, print 0. # Examples: Example 1: ``` Input: 8 2 3 1 2 4 3 7 5 7 Output: 1 ``` Explanation: The shortest subarray with a sum of at least 7 is [7]. Example 2: ``` Input: 5 1 2 3 4 5 11 Output: 3 ``` Explanation: The shortest subarray with a sum of at least 11 is [3, 4, 5]. Example 3: ``` Input: 4 1 2 3 4 15 Output: 0 ``` Explanation: No subarray has a sum of at least 15. # Note: - Aim to implement an efficient solution that runs in O(n) time complexity.","solution":"def shortest_subarray_with_sum(n, arr, target_sum): min_length = float(\'inf\') current_sum = 0 start_index = 0 for end_index in range(n): current_sum += arr[end_index] while current_sum >= target_sum: min_length = min(min_length, end_index - start_index + 1) current_sum -= arr[start_index] start_index += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"You are given an array of positive integers and a target sum. You need to determine if there are three distinct elements in the array whose sum equals the target sum. If such a triplet exists, return the triplet in a sorted order. If there are multiple such triplets, return the one with the smallest first element. If no such triplet exists, return an empty list. Your task is to implement the function `find_triplet(arr, target)` that takes in an array of positive integers `arr` and an integer `target`, and returns a list of three integers. # Function Signature ```python def find_triplet(arr: list[int], target: int) -> list[int]: pass ``` # Input: - `arr`: A list of positive integers (1 ≤ len(arr) ≤ 1000, 1 ≤ arr[i] ≤ 10^6) - `target`: A positive integer (1 ≤ target ≤ 3 * 10^6) # Output: - Return a list of three integers if such a triplet exists, sorted in non-decreasing order. - If there are multiple valid triplets, return the triplet with the smallest first element. - If no such triplet exists, return an empty list. # Example: ```python assert find_triplet([1, 4, 45, 6, 10, 8], 22) == [4, 8, 10] assert find_triplet([1, 2, 4, 3, 6], 10) == [1, 3, 6] assert find_triplet([12, 3, 4, 1, 6, 9], 24) == [1, 9, 14] assert find_triplet([8, 4, 7, 3, 2], 20) == [ ] ``` # Note: - In the first example, the triplet (4, 8, 10) sums to 22, and there is no other triplet possible. - In the second example, the triplet (1, 3, 6) sums to 10, and there is no other triplet possible. - In the third example, the triplet (12, 11, 1) sums to 24, but the sorted triplet [1, 11, 12] meets the requirement. - In the last example, no triplet sums to 20.","solution":"def find_triplet(arr, target): Function to find a triplet in list `arr` that sums up to `target`. :param arr: List of positive integers :param target: Target sum :return: List of three integers if such a triplet exist, sorted in non-decreasing order; Otherwise an empty list. arr.sort() n = len(arr) for i in range(n): left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return [arr[i], arr[left], arr[right]] elif current_sum < target: left += 1 else: right -= 1 return []"},{"question":"You\'ve been given a list of integers where every integer appears exactly twice except for one integer which appears only once. Your task is to find and return this single integer. Write a function `findSingleNumber(nums)` that takes a list of integers, `nums`, and returns the single integer that appears only once. # Input - `nums` (List[int]): A list of integers where every integer appears exactly twice except for one integer which appears once. # Output - (int): The integer that appears only once. # Constraints - `2 <= len(nums) <= 3 * 10^4` - Every element in `nums` appears exactly twice except for one element which appears only once. # Example Example 1 **Input:** ```python nums = [2, 2, 1] ``` **Output:** ```python 1 ``` Example 2 **Input:** ```python nums = [4, 1, 2, 1, 2] ``` **Output:** ```python 4 ``` # Note Ensure that your solution is designed to run in linear time, i.e., `O(n)`, and uses a constant amount of extra space, i.e., `O(1)` auxiliary space. # Solution Template ```python def findSingleNumber(nums): # Your code here pass ```","solution":"def findSingleNumber(nums): Returns the single integer that appears only once in the list. Args: nums (List[int]): A list of integers where every integer appears exactly twice except for one integer. Returns: int: The integer that appears only once. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"For a given integer N and an array of N integers, calculate the number of distinct pairs (i, j) where 1 ≤ i < j ≤ N such that the product of the integers at these indices is a perfect square. A perfect square is an integer that can be expressed as the square of another integer. The first line contains a single integer N (1 ≤ N ≤ 1000). The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^6). Print a single integer, the number of pairs (i, j) satisfying the given condition. For example, if the input is: 4 1 4 2 16 The output would be: 3 Explanation: - (1, 2): 1 * 4 = 4 (which is 2^2) - (2, 4): 4 * 16 = 64 (which is 8^2) - (1, 4): 1 * 16 = 16 (which is 4^2)","solution":"import math def count_pairs_with_perfect_square_product(n, arr): def is_perfect_square(num): root = int(math.isqrt(num)) return root * root == num count = 0 for i in range(n): for j in range(i + 1, n): if is_perfect_square(arr[i] * arr[j]): count += 1 return count"},{"question":"A city park contains a network of ponds connected by streams. Each pond has a certain capacity and each stream has a limit on how much water can flow through it per unit time. During the rainy season, every pond receives a specific rate of water inflow continuously. You are to design an algorithm that determines if it is possible to keep the overflow under control by distributing the incoming water through the streams, without any pond exceeding its capacity. Formally, there are p ponds and s streams. Each pond i has a maximum capacity ci and a water inflow rate wi. Each stream j connects pond uj to pond vj and has a maximum flow rate of fj. Write a program to determine if it\'s possible to prevent any pond from overflowing. Input: - The first line contains two integers p and s (1 ≤ p, s ≤ 100). - The second line contains p integers c1, c2, ..., cp representing the capacity of each pond. - The third line contains p integers w1, w2, ..., wp representing the water inflow rates for each pond. - The next s lines each contain three integers uj, vj, and fj (1 ≤ uj, vj ≤ p, 1 ≤ fj ≤ 1000) representing a stream from pond uj to pond vj with a maximum flow rate of fj. Output: - Print \\"YES\\" if it is possible to prevent overflow in all ponds. Otherwise, print \\"NO\\". Example: ``` Input: 4 5 10 20 30 40 5 4 10 1 1 2 6 1 3 8 2 4 5 3 4 7 2 3 3 Output: YES ```","solution":"def can_prevent_overflow(p, s, capacities, inflows, streams): from collections import deque, defaultdict def bfs(source, sink, parent): visited = [False] * (p + 2) queue = deque([source]) visited[source] = True while queue: current = queue.popleft() for neighbor in range(p + 2): if not visited[neighbor] and rGraph[current][neighbor] > 0: queue.append(neighbor) visited[neighbor] = True parent[neighbor] = current return visited[sink] source = 0 sink = p + 1 # Initialize capacity graph rGraph = [[0] * (p + 2) for _ in range(p + 2)] for i in range(p): rGraph[source][i + 1] = inflows[i] # Edge from source to each pond with inflow rate for uj, vj, fj in streams: rGraph[uj][vj] = fj # Add stream capacities for i in range(p): rGraph[i + 1][sink] = capacities[i] # Edge from each pond to sink with pond capacity parent = [-1] * (p + 2) max_flow = 0 while bfs(source, sink, parent): path_flow = float(\\"Inf\\") s = sink while s != source: path_flow = min(path_flow, rGraph[parent[s]][s]) s = parent[s] max_flow += path_flow v = sink while v != source: u = parent[v] rGraph[u][v] -= path_flow rGraph[v][u] += path_flow v = parent[v] total_inflow = sum(inflows) return \\"YES\\" if max_flow >= total_inflow else \\"NO\\" # Reading input and function call can be tested in the unit test section."},{"question":"You are a software developer for a large-scale social media platform called \\"InstaSnap.\\" This platform hosts photos and videos uploaded by users and allows them to be tagged with various tags. InstaSnap wants to implement a new feature that determines which tags are trending within a specified time frame. The new feature will be used to generate a report that lists the trending tags based on the frequency of their occurrence in the posts within the given time period. To achieve this, you need to write a program that processes a list of posts and identifies the trending tags. A post is represented by a tuple (timestamp, tags), where timestamp is an integer representing the time at which the post was created, and tags is a list of strings representing the tags associated with the post. Your goal is to return the top K trending tags within the given time frame [start_time, end_time] inclusive. If there are less than K unique tags in the time frame, return all the unique tags. If there are ties in the frequency counts, tags with the same frequency should be ordered lexicographically. # Input - The first line contains three integers n, start_time, and end_time (1 ≤ n ≤ 100000, 0 ≤ start_time ≤ end_time ≤ 100000), the number of posts, the start time, and the end time of the time frame, respectively. - The next line contains an integer k (1 ≤ k ≤ 100), the number of top trending tags to return. - Each of the next n lines contains a timestamp and a list of space-separated tags representing a post. # Output - Output a list of strings representing the top K trending tags in the specified time frame, sorted in descending order of their frequency. Tags with the same frequency should be sorted lexicographically. # Example Input ``` 5 10 20 3 12 cat dog 15 cat pet 16 fish dog 17 cat fish 19 pet ``` Output ``` cat dog fish ``` # Explanation In this example, there are 5 posts within the given time frame [10, 20]. The tags and their frequencies are as follows: - cat: 3 - dog: 2 - pet: 2 - fish: 2 Since k = 3, the top 3 tags are \\"cat\\", \\"dog\\" and \\"fish\\". \\"dog\\", \\"pet\\", and \\"fish\\" have the same frequency, but \\"dog\\" and \\"fish\\" come first lexicographically. Therefore, the final result is \\"cat\\", \\"dog\\", and \\"fish\\".","solution":"from collections import defaultdict import heapq def trending_tags(n, start_time, end_time, k, posts): Returns the top K trending tags within the specified time frame. n: int - number of posts start_time: int - start time of the time frame end_time: int - end time of the time frame k: int - number of top trending tags to return posts: list of tuples - each tuple contains a timestamp and a list of tags tag_count = defaultdict(int) # Count tags within the specified time frame for timestamp, tags in posts: if start_time <= timestamp <= end_time: for tag in tags: tag_count[tag] += 1 # Use a min-heap to maintain the top K frequent tags heap = [] for tag, count in tag_count.items(): heapq.heappush(heap, (-count, tag)) top_tags = [] for _ in range(min(k, len(heap))): top_tags.append(heapq.heappop(heap)[1]) return sorted(top_tags, key=lambda x: (-tag_count[x], x)) # Example usage n = 5 start_time = 10 end_time = 20 k = 3 posts = [ (12, [\'cat\', \'dog\']), (15, [\'cat\', \'pet\']), (16, [\'fish\', \'dog\']), (17, [\'cat\', \'fish\']), (19, [\'pet\']) ] print(trending_tags(n, start_time, end_time, k, posts)) # Output: [\'cat\', \'dog\', \'fish\']"},{"question":"You are given a string s consisting of lowercase English letters. You are allowed to perform the following operation any number of times: 1. Choose any two adjacent characters in the string that are the same and remove them, concatenating the remaining parts of the string. For example, given the string `\\"abbac\\"`, you can perform the operation to remove `\\"bb\\"` and the string becomes `\\"aac\\"`. Then, you can perform the operation to remove `\\"aa\\"` and the string becomes `\\"c\\"`. Your task is to determine the length of the shortest string that can be obtained after performing the mentioned operation any number of times on the given string s. # Input The input consists of a single string s (1 leq |s| leq 2000). # Output Print a single integer, the length of the shortest string that can be obtained. # Example Input ``` abbac ``` Output ``` 1 ``` Input ``` aabccbaa ``` Output ``` 0 ``` # Note In the first example, you can remove `\\"bb\\"` first to get `\\"aac\\"`, then remove `\\"aa\\"` to get `\\"c\\"`, resulting in a final length of 1. In the second example, you can remove `\\"aa\\"`, `\\"cc\\"`, and then `\\"bb\\"`, resulting in an empty string.","solution":"def shortest_string_length(s): Determines the length of the shortest string that can be obtained by removing adjacent pairs of the same character. :param s: str - input string consisting of lowercase English letters :return: int - length of the shortest string that can be obtained stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(stack)"},{"question":"Lucy is planning a party and wants to arrange guests at a long table. The guests should be seated in a way that maximizes social interactions. Each guest can be viewed as a node in an undirected graph, and an edge exists between two nodes if the corresponding guests are friends. Lucy wants to maximize the total number of friend pairs who are seated next to each other. You are provided with the number of guests n (1 ≤ n ≤ 1000) and the list of pairs of friends. The task is to determine the maximum number of adjacent friend pairs that can be seated at the table. The input consists of: 1. An integer n, the number of guests. 2. An integer m (0 ≤ m ≤ 10,000), the number of pairs of friends. 3. m lines, each containing two integers u and v (1 ≤ u, v ≤ n), indicating that guest u and guest v are friends. Output: 1. An integer — the maximum number of adjacent friend pairs that can be seated at the table. 2. A possible arrangement of the guests that achieves this maximum number. If there are multiple possible arrangements, any of them can be printed. If it is not possible to seat guests such that any friends are adjacent, the maximum should be 0 and you can print any arrangement of guests. **Example:** Input: ``` 4 3 1 2 2 3 3 4 ``` Output: ``` 2 1 2 3 4 ``` In this example, placing guests 1, 2, 3, and 4 in that order results in two friend pairs seated next to each other (1 is friends with 2, and 3 is friends with 4).","solution":"def max_adjacent_friend_pairs(n, m, friends): from collections import defaultdict import heapq # Initialize adjacency list for graph of friends adj = defaultdict(list) # Populate adjacency list with the friend relationships for u, v in friends: adj[u].append(v) adj[v].append(u) # This array will store the degree of each node degree = [0] * (n + 1) for node in adj: degree[node] = len(adj[node]) # Priority queue to always process the node with least neighbors first pq = [] for i in range(1, n + 1): heapq.heappush(pq, (degree[i], i)) # We\'ll use greedy approach to maximize adjacent friends placed = set() result = [] while pq: _, current = heapq.heappop(pq) if current not in placed: result.append(current) placed.add(current) for neighbor in adj[current]: if neighbor not in placed: result.append(neighbor) placed.add(neighbor) break # Calculate the number of adjacent friend pairs in the arrangement count = 0 for i in range(1, len(result)): if result[i] in adj[result[i-1]]: count += 1 return count, result"},{"question":"Write a function that determines if a given phrase is a palindrome, ignoring spaces, punctuation, and case sensitivity. A palindrome is a phrase that reads the same forwards and backwards. Your function should take a single string input and return a boolean value - `True` if the input phrase is a palindrome, and `False` otherwise. Function signature: `def is_palindrome(phrase: str) -> bool` **Input:** - The input phrase is a single line of text containing at most 1000 characters, which can include letters, numbers, spaces, and punctuation. **Output:** - Return `True` if the input phrase is a palindrome, ignoring spaces, punctuation, and case sensitivity. Otherwise, return `False`. **Examples:** ```python assert is_palindrome(\\"A man, a plan, a canal, Panama\\") == True assert is_palindrome(\\"race a car\\") == False assert is_palindrome(\\"No \'x\' in Nixon\\") == True assert is_palindrome(\\"Was it a car or a cat I saw?\\") == True assert is_palindrome(\\"Not a palindrome\\") == False ``` **Explanation:** In the first example, after removing spaces and punctuation and converting to the same case, the phrase reads \\"amanaplanacanalpanama,\\" which is a palindrome. In the second example, \\"raceacar\\" is not a palindrome. In the third example, \\"noxinnixon\\" is a palindrome. In the fourth example, \\"wasitacaroracatisaw\\" is a palindrome. In the last example, \\"notapalindrome\\" is not a palindrome.","solution":"import re def is_palindrome(phrase: str) -> bool: # Remove all non-alphanumeric characters and convert to lowercase cleaned_phrase = re.sub(r\'[^A-Za-z0-9]\', \'\', phrase).lower() # Check if the cleaned phrase is equal to its reverse return cleaned_phrase == cleaned_phrase[::-1]"},{"question":"You are given a string consisting of lowercase alphabets and you need to find the length of the longest substring that contains at most two distinct characters. # Input - The input string, s, consisting only of lowercase alphabets where 1 leq |s| leq 10^5. # Output - A single integer, the length of the longest substring of s that contains at most two distinct characters. # Example For the string `\\"eceba\\"`, the output should be `3`, since the longest substring with two distinct characters is `\\"ece\\"`. For the string `\\"ccaabbb\\"`, the output should be `5`, since the longest substring with two distinct characters is `\\"aabbb\\"`. # Constraints You can assume the input string is a non-empty string containing only lowercase English letters. # Explanation To solve this problem, you can use the sliding window approach maintaining a window that contains at most two distinct characters while you iterate through the string. If the window exceeds two distinct characters, you will adjust the starting position of your window to maintain the constraint and update the length of the longest substring accordingly.","solution":"def longest_substring_with_two_distinct(s): Find the length of the longest substring that contains at most two distinct characters. :param s: A string consisting of lowercase letters :return: Length of the longest substring with at most two distinct characters if not s: return 0 left = 0 max_len = 0 char_map = {} for right in range(len(s)): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Mark manages a warehouse that frequently receives goods from various suppliers. Each day, Mark receives a list of packages along with their respective weights. However, due to space constraints, he only wants to keep the heaviest packages such that their total weight is still under a given maximum limit. Given a list of package weights and a maximum total weight, can you help Mark determine the heaviest combination of packages whose total weight does not exceed the maximum limit? Write a function `max_weight_packages(weights: List[int], max_limit: int) -> List[int]` that takes in two arguments: - `weights` which is a list of integers representing the weights of different packages (1 ≤ length of weights ≤ 1000, 1 ≤ weight of each package ≤ 10000). - `max_limit` which is an integer representing the maximum total weight that can be accommodated (1 ≤ max_limit ≤ 100000). The function should return a list of weights representing the heaviest combination of packages that do not exceed the maximum limit. If there are multiple such combinations that yield the same total weight, return the one with the fewest packages. If no combination is possible, return an empty list. # Example: Input: ```python weights = [5, 2, 4, 7, 1, 3, 8] max_limit = 15 ``` Output: ```python [8, 7] ``` Explanation: The combination [8, 7] has the heaviest total weight of 15 without exceeding the maximum weight. Another possible combination could be [5, 4, 3, 2, 1] with total weight 15, but it consists of more packages, so [8, 7] is preferable. ```python weights = [4, 3, 1, 2, 9] max_limit = 10 ``` Output: ```python [9, 1] ``` Explanation: The combination [9, 1] has the heaviest total weight of 10 without exceeding the maximum weight. There might be another combination with fewer packages but the heaviest one preferred is [9, 1].","solution":"from typing import List def max_weight_packages(weights: List[int], max_limit: int) -> List[int]: Returns the heaviest combination of packages whose total weight does not exceed the max_limit. If there are multiple combinations with the same total weight, returns the one with the fewest packages. from itertools import combinations # Sort weights to ensure combinations are generated from largest to smallest weights.sort(reverse=True) best_combination = [] best_weight = 0 for r in range(1, len(weights) + 1): for combo in combinations(weights, r): total_weight = sum(combo) if total_weight <= max_limit: if total_weight > best_weight or ( total_weight == best_weight and len(combo) < len(best_combination)): best_combination = list(combo) best_weight = total_weight return best_combination"},{"question":"You are given an array of integers arr and an integer target. Write a function to compute the number of distinct pairs (i, j) such that arr[i] + arr[j] == target. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in arr. Each of the next n lines contains an integer element of arr. The last line contains a single integer target (−10^9 ≤ target ≤ 10^9). Print a single integer — the number of distinct pairs (i, j) where 0 ≤ i < j < n and arr[i] + arr[j] == target. Note: Two pairs (i, j) and (j, i) are considered distinct and should be counted separately. Each element in arr can be part of multiple pairs.","solution":"def count_pairs(arr, target): Returns the number of distinct pairs (i, j) such that arr[i] + arr[j] == target. pairs_count = 0 seen_elements = {} for num in arr: complement = target - num if complement in seen_elements: pairs_count += seen_elements[complement] if num in seen_elements: seen_elements[num] += 1 else: seen_elements[num] = 1 return pairs_count"},{"question":"Dora\'s backpack is like a TARDIS—bigger on the inside, with numerous compartments that can store various kinds of items. To make her packing process more efficient, Dora wants to implement an automated sorting system. The backpack has different types of items that need to be sorted into their respective compartments based on specific rules. You are given a list of items with their respective compartment types, and you need to write a function `sort_backpack` that will return a dictionary where keys are compartment types and values are lists of items sorted into those compartments. The function `sort_backpack` should accept a list of tuples, where each tuple consists of an item and a compartment type. Example input: ```python items = [ (\\"water bottle\\", \\"hydration\\"), (\\"granola bar\\", \\"food\\"), (\\"map\\", \\"navigation\\"), (\\"compass\\", \\"navigation\\"), (\\"apple\\", \\"food\\"), (\\"flashlight\\", \\"equipment\\"), ] ``` Your function should return a dictionary like this: ```python { \\"hydration\\": [\\"water bottle\\"], \\"food\\": [\\"granola bar\\", \\"apple\\"], \\"navigation\\": [\\"map\\", \\"compass\\"], \\"equipment\\": [\\"flashlight\\"], } ``` # Constraints: - An item can only belong to one compartment type. - If a compartment type has no items associated with it, it should not appear in the dictionary. - There are no constraints on the number of items or the number of compartment types. # Function Signature: ```python def sort_backpack(items: List[Tuple[str, str]]) -> Dict[str, List[str]]: pass ```","solution":"from typing import List, Tuple, Dict def sort_backpack(items: List[Tuple[str, str]]) -> Dict[str, List[str]]: Sorts items into compartments based on their type. Parameters: items (List[Tuple[str, str]]): List of tuples where each tuple contains an item and its compartment type. Returns: Dict[str, List[str]]: Dictionary where keys are compartment types and values are lists of items sorted into those compartments. sorted_items = {} for item, compartment in items: if compartment not in sorted_items: sorted_items[compartment] = [] sorted_items[compartment].append(item) return sorted_items"},{"question":"You are given an n x n matrix filled with integers. You are to rotate the matrix 90 degrees clockwise, k times. The matrix must be manipulated in-place, which means you cannot use extra space for another matrix. The first line of the input contains two integers, n (1 ≤ n ≤ 100) and k (0 ≤ k ≤ 100), where n is the size of the matrix and k is the number of 90-degree rotations to be performed. Each of the next n lines contains n integers which represent the matrix elements. The first line of the output should contain the rotated matrix. Each of the next n lines should print the rows of the rotated matrix. Each element should be separated by a space. **Example Input:** ``` 3 1 1 2 3 4 5 6 7 8 9 ``` **Example Output:** ``` 7 4 1 8 5 2 9 6 3 ```","solution":"def rotate_matrix(matrix, k): Rotate the given n x n matrix in-place k times 90 degrees clockwise. def rotate_90_degrees_clockwise(mat): n = len(mat) for i in range(n // 2): for j in range(i, n - i - 1): # Save the top element top = mat[i][j] # Move left element to top mat[i][j] = mat[n - j - 1][i] # Move bottom element to left mat[n - j - 1][i] = mat[n - i - 1][n - j - 1] # Move right element to bottom mat[n - i - 1][n - j - 1] = mat[j][n - i - 1] # Assign top element to right mat[j][n - i - 1] = top k = k % 4 # Reduce unnecessary full rotations for _ in range(k): rotate_90_degrees_clockwise(matrix) return matrix # Example usage matrix_size = 3 rotations = 1 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotated_matrix = rotate_matrix(matrix, rotations) for row in rotated_matrix: print(\' \'.join(map(str, row)))"},{"question":"A village in Treeland has n trees, arranged in a straight line. Each tree has a certain height. The villagers want to cut the trees such that the height difference between any two adjacent trees after cutting doesn\'t exceed a given value k. Each tree can either be cut completely down or left at its original height. Find out if it\'s possible to cut the trees such that the resulting heights of the remaining trees have the property that the height difference between any two adjacent trees is at most k. If it\'s possible, output \\"YES\\". Otherwise, output \\"NO\\". The first line contains two integers n (1 ≤ n ≤ 10^5) and k (0 ≤ k ≤ 10^9) — the number of trees and the maximum allowed height difference between two adjacent trees. The second line contains n integers hi (0 ≤ hi ≤ 10^9) — the heights of the trees. Output \\"YES\\" if it\'s possible to cut the trees such that the height difference condition is satisfied, otherwise output \\"NO\\". Example: Input: 5 2 1 5 3 8 6 Output: YES Explanation: One possible way to cut the trees to satisfy the condition is: 1 3 3 6 6.","solution":"def can_cut_trees(n, k, heights): Determines if it\'s possible to cut the trees such that the height difference between any two adjacent trees after cutting doesn\'t exceed k. :param n: int The number of trees. :param k: int The maximum allowed height difference between two adjacent trees. :param heights: list[int] The heights of the trees. :return: str \\"YES\\" if it\'s possible, otherwise \\"NO\\" # Special case when n is 1, there\'s nothing to compare if n == 1: return \\"YES\\" # Iterate over the list and check the difference between each pair for i in range(1, n): if abs(heights[i] - heights[i - 1]) > k: return \\"NO\\" return \\"YES\\""},{"question":"Given a string `s` consisting of lowercase English letters, your task is to find the minimum number of characters to delete from the string so that no two adjacent characters are the same. For example, if the input string is `s = \\"aabbcc\\"`, deleting \'a\', \'b\', and \'c\' once will result in the string \\"abc\\", which satisfies the condition that no two adjacent characters are the same. The output for this case will be `3`. # Input - The first line of the input contains a single integer `t` (1 ≤ t ≤ 100), the number of test cases. - Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 100) consisting of lowercase English letters. # Output - For each test case, output the minimum number of deletions required to prevent any two adjacent characters in the string from being the same. # Example Input ``` 3 aabbcc aaaa ababa ``` Output ``` 3 3 0 ``` # Explanation - For the first test case, `aabbcc` can be transformed to `abc` by deleting three characters. - For the second test case, `aaaa`, deleting three characters will leave one \'a\', which meets the condition. - For the third test case, `ababa`, no deletions are needed as there are no adjacent characters that are the same.","solution":"def min_deletions_to_avoid_adjacent_duplicates(s): deletions = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: deletions += 1 return deletions def process_test_cases(test_cases): results = [] for case in test_cases: results.append(min_deletions_to_avoid_adjacent_duplicates(case)) return results"},{"question":"Luna is a software engineer who loves playing with strings. She has found an interesting problem she wants to solve. Given a string s consisting of only lowercase English letters and an integer k, she wants to find the length of the longest substring of s such that the substring can be rearranged to form exactly k distinct characters. Write a function `longest_substring_with_k_distinct_chars(s: str, k: int) -> int` that takes the string s and the integer k as input and returns the length of the longest substring that can be rearranged to form exactly k distinct characters. # Input - `s`: a string consisting of only lowercase English letters (1 ≤ |s| ≤ 10^5) - `k`: an integer (1 ≤ k ≤ 26) # Output - Return an integer representing the length of the longest substring that can be rearranged to form exactly k distinct characters. # Example ```python longest_substring_with_k_distinct_chars(\\"aabbcc\\", 2) # Output: 4 longest_substring_with_k_distinct_chars(\\"aabbcc\\", 3) # Output: 6 longest_substring_with_k_distinct_chars(\\"abcabcabc\\", 2) # Output: 2 longest_substring_with_k_distinct_chars(\\"abaccc\\", 2) # Output: 4 ``` # Explanation - In the first example, the substring \\"aabb\\" is of length 4 and can be rearranged to form exactly 2 distinct characters: either \\"aabb\\" or \\"bbaa\\". - In the second example, the entire string \\"aabbcc\\" is of length 6 and can be rearranged to form exactly 3 distinct characters. - In the third example, the longest substrings with exactly 2 distinct characters are \\"ab\\", \\"bc\\", etc., each of length 2. - In the fourth example, the substring \\"abac\\" is of length 4 and can be rearranged to form exactly 2 distinct characters.","solution":"def longest_substring_with_k_distinct_chars(s: str, k: int) -> int: if len(s) == 0 or k == 0: return 0 char_count = {} max_length = 0 left = 0 for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Anna is participating in a unique competition where she has to paint a continuous wall. The challenge is that she only has brushes of various fixed lengths. The wall is divided into n contiguous sections, each of a different color. Anna wants to paint exactly m sections of the wall using the brushes she has. Anna has b brushes, each identified by the length of the section it can paint. She can only use each brush once to paint a contiguous section of the wall. Anna\'s goal is to maximize the number of completely painted sections of the wall. However, painting exactly m sections with the given brushes is her priority. Your task is to determine if it\'s possible for Anna to use her brushes to paint exactly m sections of the wall. If it is possible, print \\"YES\\" and an example sequence of brushes used to paint the sections of the wall. Otherwise, print \\"NO\\". The first line contains three integers n, m, and b (1 ≤ n ≤ 100, 1 ≤ m ≤ n, 1 ≤ b ≤ 100) — the total number of sections on the wall, the exact number of sections Anne wants to paint, and the number of brushes she has, respectively. The second line contains n distinct integers representing the length of each section of the wall. The third line contains b distinct integers representing the lengths of the brushes. Print \\"YES\\" and the sequence of brush lengths used to paint the sections of the walls if it\'s possible to paint exactly m sections. Otherwise, print \\"NO\\". # Example: Input: ``` 5 3 4 1 2 3 4 5 2 3 4 5 ``` Output: ``` YES 2 3 5 ``` Explanation: In this example, Anna can use the brushes of lengths 2, 3, and 5 to paint three sections of the wall. She can choose the sections with lengths 2, 3, and 5, respectively. Thus, it\'s possible to paint exactly 3 sections.","solution":"def can_paint_exact_sections(n, m, b, sections, brushes): Determines if it\'s possible to paint exactly m sections using the brushes provided. Parameters: n (int): Total number of sections on the wall. m (int): Exact number of sections to paint. b (int): Number of brushes. sections (list): Lengths of each section of the wall. brushes (list): Lengths of the brushes. Returns: str: \\"YES\\" if it\'s possible to paint exactly m sections, otherwise \\"NO\\". list: Sequence of brush lengths used if possible, else an empty list. sections.sort() brushes.sort() used_brushes = [] i, j = 0, 0 while i < n and j < b and len(used_brushes) < m: if sections[i] == brushes[j]: used_brushes.append(brushes[j]) i += 1 j += 1 elif sections[i] < brushes[j]: i += 1 else: j += 1 if len(used_brushes) == m: return \\"YES\\", used_brushes else: return \\"NO\\", [] # For the example given: n = 5 m = 3 b = 4 sections = [1, 2, 3, 4, 5] brushes = [2, 3, 4, 5] print(can_paint_exact_sections(n, m, b, sections, brushes)) # Expected Output: (\\"YES\\", [2, 3, 4])"},{"question":"You are given a rectangular grid of size `n x m` where each cell in the grid contains an uppercase English letter. Your task is to check whether there is any \\"L\\" shape consisting of exactly three cells in the grid such that all three cells in this shape contain the same letter. An \\"L\\" shape here means that starting from a cell, you can move either two cells down and one cell to the right, or two cells down and one cell to the left, or two cells up and one cell to the right, or two cells up and one cell to the left, or one cell down and two cells to the right, or one cell down and two cells to the left, or one cell up and two cells to the right, or one cell up and two cells to the left. The first line contains two positive integers `n` and `m` (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid respectively. Each of the next `n` lines contains a string of length `m` consisting only of uppercase English letters, representing the grid. Print \\"YES\\" if there is any \\"L\\" shape in which all three cells contain the same letter, otherwise print \\"NO\\". # Example **Input:** ``` 3 3 AAA ABC DDD ``` **Output:** ``` YES ``` **Input:** ``` 2 3 ABC DEF ``` **Output:** ``` NO ```","solution":"def is_l_shaped(grid, n, m): directions = [ ((1, 0), (2, 1)), ((1, 0), (2, -1)), # down-right, down-left ((-1, 0), (-2, 1)), ((-1, 0), (-2, -1)), # up-right, up-left ((0, 1), (1, 2)), ((0, 1), (-1, 2)), # right-down, right-up ((0, -1), (1, -2)), ((0, -1), (-1, -2)) # left-down, left-up ] for i in range(n): for j in range(m): for dir1, dir2 in directions: ni1, nj1 = i + dir1[0], j + dir1[1] ni2, nj2 = i + dir2[0], j + dir2[1] if 0 <= ni1 < n and 0 <= nj1 < m and 0 <= ni2 < n and 0 <= nj2 < m: if grid[i][j] == grid[ni1][nj1] == grid[ni2][nj2]: return \\"YES\\" return \\"NO\\" # Input processing function def check_l_shapes(input_str): lines = input_str.strip().split() n, m = int(lines[0]), int(lines[1]) grid = lines[2:] return is_l_shaped(grid, n, m)"},{"question":"You are given an array of integers representing heights of blocks of a city skyline viewed from a distance. Your task is to find the maximal area of a rectangle made of the skyline blocks. For instance, if the heights array is [2, 1, 5, 6, 2, 3], the maximal rectangle can be formed between the third and fourth blocks of height 5 and 6, yielding an area of 10 (2 blocks of height 5 and 6). Function Signature: `def maximal_rectangle(heights: List[int]) -> int:` # Input - An array of integers `heights` where 1 ≤ len(heights) ≤ 100 and 1 ≤ heights[i] ≤ 100. # Output - A single integer representing the maximal area of a rectangle that can be formed with the given heights. # Examples 1. Input: [2, 1, 5, 6, 2, 3] Output: 10 2. Input: [2, 4] Output: 4 # Note You can assume all elements in the input array are positive integers representing the height of each block in the skyline. The width of each block is considered to be 1.","solution":"from typing import List def maximal_rectangle(heights: List[int]) -> int: Finds the maximal area of a rectangle that can be formed with the given heights. stack = [] max_area = 0 heights.append(0) # Add a zero height to handle remaining bars in the stack for index, height in enumerate(heights): while stack and heights[stack[-1]] > height: h = heights[stack.pop()] w = index if not stack else index - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(index) return max_area"},{"question":"Given an n x m matrix of integers, we define a \\"special\\" cell in this matrix as one whose value is strictly greater than the values of all its 8 neighboring cells (if applicable). You are asked to count the number of special cells in the matrix. The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), which indicate the dimensions of the matrix. The next n lines each contain m space-separated integers, representing the rows of the matrix. Output a single integer which is the count of \\"special\\" cells in the given matrix. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 1 Explanation: In the example, the only \\"special\\" cell is 9 at position (3,3) because it is greater than any of its neighbors.","solution":"def count_special_cells(matrix): Count the number of \\"special\\" cells in the matrix. A \\"special\\" cell is one whose value is strictly greater than the values of all its 8 neighboring cells. Parameters: matrix (list[list[int]]): The matrix of integers Returns: int: The count of \\"special\\" cells. n = len(matrix) m = len(matrix[0]) directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] def is_special(i, j): for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m: if matrix[i][j] <= matrix[ni][nj]: return False return True special_count = 0 for i in range(n): for j in range(m): if is_special(i, j): special_count += 1 return special_count"},{"question":"You are given the task of designing a warehouse storage system. The warehouse is represented as a 3D grid of size LxWxH (length, width, height), where each cell can either be occupied or empty. The system needs to store N packages, each defined by its dimensions (length, width, height) and a unique package ID. Your objective is to determine if it is possible to place all the packages in the warehouse without any overlaps and return a possible arrangement if it exists. The rules for placing the packages are: 1. Each package must be placed within the bounds of the warehouse. 2. Packages cannot overlap with each other. 3. Packages can be rotated such that their dimensions (length, width, height) can be interchanged in any order. 4. The placement of each package must be specified by the bottom-left-back corner coordinates of the package in the warehouse grid. If an arrangement is possible, output the coordinates of the bottom-left-back corners of each package. If it is not possible to store all packages, output \\"NO SOLUTION\\". # Input Specification 1. First line contains three integers L, W, H (1 leq L, W, H leq 1000) representing the dimensions of the warehouse. 2. Second line contains an integer N (1 leq N leq 1000) representing the number of packages. 3. Next N lines each contain four integers ID_i, l_i, w_i, h_i (1 leq l_i, w_i, h_i leq 1000) representing the package ID and its dimensions. # Output Specification If a solution exists, for each package (in the order of input), output a line with the package ID followed by three integers representing the coordinates of the bottom-left-back corner in the format \\"ID x y z\\". If no solution exists, output \\"NO SOLUTION\\". # Example Input ``` 10 10 10 3 1 2 3 4 2 5 2 2 3 3 3 3 ``` Output ``` 1 0 0 0 2 3 0 0 3 0 5 0 ```","solution":"def can_place_package(warehouse, dimensions, start_coords, size): L, W, H = warehouse lx, ly, lz = start_coords dl, dw, dh = size if (lx + dl > L) or (ly + dw > W) or (lz + dh > H): return False for x in range(lx, lx + dl): for y in range(ly, ly + dw): for z in range(lz, lz + dh): if dimensions[z][y][x] != 0: return False return True def place_package(dimensions, start_coords, size, package_id): lx, ly, lz = start_coords dl, dw, dh = size for x in range(lx, lx + dl): for y in range(ly, ly + dw): for z in range(lz, lz + dh): dimensions[z][y][x] = package_id def remove_package(dimensions, start_coords, size): lx, ly, lz = start_coords dl, dw, dh = size for x in range(lx, lx + dl): for y in range(ly, ly + dw): for z in range(lz, lz + dh): dimensions[z][y][x] = 0 def find_placement(L, W, H, N, packages): dimensions = [[[0 for _ in range(L)] for _ in range(W)] for _ in range(H)] result = [] def backtrack(index): if index == N: return True pid, pl, pw, ph = packages[index] for start_x in range(L): for start_y in range(W): for start_z in range(H): for dl, dw, dh in [(pl, pw, ph), (pl, ph, pw), (pw, pl, ph), (pw, ph, pl), (ph, pl, pw), (ph, pw, pl)]: if can_place_package((L, W, H), dimensions, (start_x, start_y, start_z), (dl, dw, dh)): place_package(dimensions, (start_x, start_y, start_z), (dl, dw, dh), pid) result.append((pid, start_x, start_y, start_z)) if backtrack(index + 1): return True result.pop() remove_package(dimensions, (start_x, start_y, start_z), (dl, dw, dh)) return False if backtrack(0): return result else: return \\"NO SOLUTION\\" def warehouse_storage_system(L, W, H, N, packages): result = find_placement(L, W, H, N, packages) if result == \\"NO SOLUTION\\": return \\"NO SOLUTION\\" else: return \\"n\\".join(f\\"{pid} {x} {y} {z}\\" for pid, x, y, z in result)"},{"question":"You are given an array of integers. Your task is to rotate the array elements to the right by a given number of steps. A single right rotation means that the last element of the array is moved to the front, and all the other elements move one position to the right. You have to handle multiple test cases. The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and k (1 le n le 1000, 0 le k le 1000) — the length of the array and the number of steps to rotate the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 1000) — the elements of the array. For each test case, print the resulting array after performing the right rotations. Example: Input: ``` 3 5 2 1 2 3 4 5 4 1 10 20 30 40 6 3 7 8 9 10 11 12 ``` Output: ``` 4 5 1 2 3 40 10 20 30 10 11 12 7 8 9 ```","solution":"def rotate_right(arr, k): Rotates the array \'arr\' to the right by \'k\' steps. n = len(arr) k = k % n # In case k is greater than n return arr[-k:] + arr[:-k] def process_test_cases(test_cases): Takes the test cases list and processes each test case. results = [] for case in test_cases: n, k, arr = case rotated_array = rotate_right(arr, k) results.append(rotated_array) return results"},{"question":"In a computer science course, students are learning about arrays and searching algorithms. One day, the instructor presented them with an interesting problem involving rotated sorted arrays. A rotated sorted array is an array that is originally sorted in ascending order, but then some unknown number of positions are rotated to the right. For instance, the array `[4, 5, 6, 7, 0, 1, 2]` is a rotated version of the sorted array `[0, 1, 2, 4, 5, 6, 7]`. The task is to find the index of a given target element in the rotated sorted array. If the target is not found, the program should return -1. The solution should run in O(log n) time complexity. You are given a function with the signature `def search(nums: List[int], target: int) -> int` where `nums` is the rotated sorted array and `target` is the element to be searched. Write an implementation for this function. **Example:** ``` Input: nums = [4, 5, 6, 7, 0, 1, 2], target = 0 Output: 4 Input: nums = [4, 5, 6, 7, 0, 1, 2], target = 3 Output: -1 ``` **Constraints:** - `1 ≤ nums.length ≤ 5000` - `-10^4 ≤ nums[i] ≤ 10^4` - All values of `nums` are unique. - `-10^4 ≤ target ≤ 10^4`","solution":"from typing import List def search(nums: List[int], target: int) -> int: Searches for a target in a rotated sorted array. Returns the index of the target element if found, otherwise returns -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid # Left part is sorted if nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 # Right part is sorted else: if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"The kingdom of Greedonia has a series of dungeons interconnected by tunnels. These dungeons contain treasures as well as traps, and the goal is to collect as much treasure as possible while avoiding traps. The kingdom can be represented as a directed graph with n dungeons (nodes) and m tunnels (edges), each leading from one dungeon to another. A total of s warriors and b treasures are placed at different dungeons in the kingdom. Each warrior is given a unique location x, strength a, agility ag, and courage level c. Each treasure is given a unique location x, value v, weight w, and trap danger level d. A warrior can collect a treasure if the following conditions hold: 1. They can reach the dungeon where the treasure is located with their agility (considering dungeon distance). 2. Their courage level is higher than or equal to the trap danger level of the treasure. 3. Their strength is sufficient to carry the treasure without being over-encumbered. The warriors are very competitive and will only decide to collect treasures if they are sure they can collect at least one treasure. Multiple warriors can collect the same treasures, and each collection attempt is independent of others. The kingdom\'s advisor, King Elgor, has to decide which set of warriors to send to maximize the total treasure value they can collect. However, the warriors of Greedonia are clannish and some will only operate if certain other warriors also operate. King Elgor received a list of k dependencies in the form w_1, w_2, indicating that warrior w_1 will only go into the dungeon if warrior w_2 is also going. The first line of the input contains integers n and m (1 leq n leq 100, 0 leq m leq 5000), the number of nodes and the number of edges respectively. The next m lines contain integers u and v (1 leq u, v leq n) denoting a directed edge from node u to node v. The next line contains integers s, b, and k (1 leq s, b leq 10^4, 0 leq k leq 1000), the number of warriors, the number of treasures, and the number of dependencies respectively. The next s lines contain integers x, a, ag, c (1 leq x leq n, 0 leq a, ag, c leq 10^9), denoting the location, strength, agility, and courage of the warrior. Warriors are indexed from 1 to s. The next b lines contain integers x, v, w, d (1 leq x leq n, 0 leq v, w, d leq 10^9), denoting the location, value, weight, and danger level of the treasure. The next k lines contain integers w_1 and w_2 (1 leq w_1, w_2 leq s), denoting a dependency of w_1 on w_2. Output a single integer, the maximum total value of treasures that can be collected. For example, the optimal strategy is to operate warriors 1, 2, and 3, who will collect treasures 1, 1, and 2, respectively.","solution":"def find_max_treasure_value(n, m, edges, s, b, k, warriors, treasures, dependencies): from collections import defaultdict from itertools import permutations # Graph adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Prepare dependency graph dependents = defaultdict(list) for w1, w2 in dependencies: dependents[w2].append(w1) # Function to check if a warrior can collect a treasure def can_collect(warrior, treasure): warrior_pos, strength, agility, courage = warrior treasure_pos, value, weight, danger = treasure if courage < danger or strength < weight: return False # Perform BFS or DFS to see if treasure is reachable within agility visited = set() to_visit = [(warrior_pos, 0)] while to_visit: current_pos, distance = to_visit.pop(0) if current_pos == treasure_pos and distance <= agility: return True if current_pos not in visited and distance <= agility: visited.add(current_pos) for next_pos in graph[current_pos]: to_visit.append((next_pos, distance + 1)) return False max_total_value = 0 def check_dependencies(dependent_set): if not dependent_set: return True for warrior in dependent_set: if warrior not in selected_warriors: return False return True # Try every permutation of warriors for perm in permutations(range(s)): selected_warriors = set() total_value = 0 for idx in perm: warrior_pos, strength, agility, courage = warriors[idx] for treasure in treasures: if can_collect(warriors[idx], treasure): if check_dependencies(dependents[idx]): selected_warriors.add(idx) total_value += treasure[1] max_total_value = max(max_total_value, total_value) return max_total_value"},{"question":"You are given a string s consisting of lowercase English letters and an integer k. Your task is to rearrange the string in such a way that no two adjacent characters are the same. If it is not possible to rearrange the string to meet this condition, return an empty string. If there are multiple possible arrangements, return any one of them. The first line contains one integer t (1 le t le 100) — the number of test cases. Each test case consists of a single line containing a string s (1 le |s| le 10^5) and an integer k (1 le k le 26). For each test case, print the rearranged string on a new line. If it is not possible to rearrange the string, print an empty string instead. If there are multiple answers, you may print any of them.","solution":"import heapq from collections import Counter def rearrange_string(s, k): if k == 0: return s count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) queue = [] result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) queue.append((freq + 1, char)) # Decrease the frequency since it is used once if len(queue) < k: continue # Add back the character to the heap after k distance prev_freq, prev_char = queue.pop(0) if -prev_freq > 0: heapq.heappush(max_heap, (prev_freq, prev_char)) if len(result) != len(s): return \\"\\" return \\"\\".join(result) def solve(test_cases): results = [] for s, k in test_cases: result = rearrange_string(s, k) results.append(result) return results"},{"question":"You are given an array of distinct integers. Determine whether there exists a pair of elements in the array whose sum is equal to any other element in the same array. Output 1 if such a pair exists, otherwise output 0. The only line of the input contains a list of space-separated integers ai (1 ≤ ai ≤ 100) — elements of the array. The size of the array is between 2 and 10, inclusive. Note that the size of the array is not given explicitly! Output 1 if there exists a pair of elements in the array whose sum equals any other element in the array, otherwise output 0.","solution":"def has_pair_sum_equal_to_any_other_element(arr): Determines if any pair of elements in the array sums up to another element in the array. Parameters: arr (list): A list of distinct integers. Returns: int: 1 if such a pair exists, 0 otherwise. n = len(arr) for i in range(n): for j in range(i + 1, n): pair_sum = arr[i] + arr[j] if pair_sum in arr: return 1 return 0"},{"question":"You are given two strings, s and t. Your task is to transform string s into string t using only the following operations: 1. Insert a character at any position. 2. Delete a character from any position. 3. Replace a character at any position with any other character. Write a program to determine the minimum number of operations required to transform s into t. This is also known as the edit distance or Levenshtein distance between two strings. # Input - The first line contains the string s of length n (1 ≤ n ≤ 1000). - The second line contains the string t of length m (1 ≤ m ≤ 1000). # Output - Output a single integer representing the minimum number of operations required to transform string s into string t. # Examples Example 1 Input: ``` kitten sitting ``` Output: ``` 3 ``` Explanation: The required operations are: replace \'k\' with \'s\', replace \'e\' with \'i\', and insert \'g\' at the end. Example 2 Input: ``` flaw lawn ``` Output: ``` 2 ``` Explanation: The required operations are: insert \'n\' at the end and replace \'f\' with \'l\'. # Note You may assume that any valid transformation always exists for the inputs provided.","solution":"def min_operations(s, t): Calculates minimum number of steps required to transform string s into string t. n, m = len(s), len(t) # Create a DP table initialized to zero dp = [[0] * (m + 1) for _ in range(n + 1)] # Initialize base cases for i in range(n + 1): dp[i][0] = i # Deleting all characters for j in range(m + 1): dp[0][j] = j # Inserting all characters # Populate the DP table for i in range(1, n + 1): for j in range(1, m + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1] # Replacement ) return dp[n][m]"},{"question":"You are given an undirected graph with n nodes and m edges. Nodes are numbered from 1 to n. Each edge has a weight associated with it. Your task is to find the shortest path from node 1 to node n, and print its total weight. If no such path exists, print \\"NO PATH\\" (without quotes). The first line of input contains two integers n and m. The next m lines contain three integers each, representing an edge between two nodes u and v with weight w (1 ≤ u, v ≤ n; u ≠ v; 1 ≤ w ≤ 1000). The graph might contain multiple edges between the same pair of nodes and self-loops. Output the total weight of the shortest path from node 1 to node n, or \\"NO PATH\\" if there is no such path. Consider the first sample test. The graph has 5 nodes and 6 edges with the following weights: (1, 2, 10), (1, 3, 5), (2, 3, 2), (3, 4, 2), (4, 5, 3), (3, 5, 1). The shortest path from node 1 to node 5 has total weight 6 (path 1 -> 3 -> 5). Standard graph algorithms like Dijkstra’s algorithm can be used to solve this problem efficiently. Sample Input: ``` 5 6 1 2 10 1 3 5 2 3 2 3 4 2 4 5 3 3 5 1 ``` Sample Output: ``` 6 ``` Note: This problem requires understanding of graph traversal algorithms particularly those that find the shortest path between nodes, such as Dijkstra\'s algorithm.","solution":"import heapq def dijkstra_shortest_path(n, edges): graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) dist = {i: float(\'inf\') for i in range(1, n+1)} dist[1] = 0 priority_queue = [(0, 1)] # (distance, node) while priority_queue: current_dist, current_node = heapq.heappop(priority_queue) if current_dist > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return dist[n] if dist[n] != float(\'inf\') else \\"NO PATH\\" # function to parse the input and output the result def find_shortest_path(n, m, edges): return dijkstra_shortest_path(n, edges)"},{"question":"You are given a list of strings. Your task is to find the longest common prefix among the strings in the list. If there is no common prefix, return an empty string. The first line contains an integer n (1 ≤ n ≤ 200), the number of strings in the list. Each of the next n lines contains a string consisting of lowercase English letters (1 ≤ length of each string ≤ 1000). Print a single string — the longest common prefix of the given list of strings. If there is no common prefix, print an empty string.","solution":"def longest_common_prefix(strs): Returns the longest common prefix among the list of strings. if not strs: return \\"\\" prefix = strs[0] for s in strs[1:]: while not s.startswith(prefix): prefix = prefix[:-1] if not prefix: return \\"\\" return prefix"},{"question":"You are given two strings, s1 and s2, consisting of lowercase English letters. You need to determine the minimum number of operations required to transform s1 into s2. The only operations allowed are: 1. Inserting a character. 2. Deleting a character. 3. Replacing a character. The transformation process must be done in the minimum number of steps, and each operation counts as one step. The first line of the input contains the string s1 (1 ≤ |s1| ≤ 1000). The second line of the input contains the string s2 (1 ≤ |s2| ≤ 1000). Print a single integer, which is the minimum number of operations required to transform s1 into s2.","solution":"def min_distance(s1, s2): Returns the minimum number of operations required to transform s1 into s2. m, n = len(s1), len(s2) # Create a table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # If last characters are the same, ignore the last char and recur for the remaining substring elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # If the last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"You are given an array of integers. Your task is to compute the degree of an array. The degree of an array is defined as the maximum frequency of any of its elements. An optimal subarray is a contiguous subarray of the original array that has the same degree as the whole array. Your goal is to find the length of the smallest possible optimal subarray. **Input** The input will be given as: - The first line contains an integer `n` (1 ≤ n ≤ 50,000) – the size of the array. - The second line contains `n` integers representing the elements of the array. **Output** Output a single integer – the length of the smallest subarray that has the same degree as the whole array. **Example** **Input:** ``` 6 1 2 2 3 1 4 2 ``` **Output:** ``` 6 ``` **Explanation:** The degree of the original array is 3 (the value 2 appears 3 times). The subarray `[2 2 3 1 4 2]` is the smallest subarray with the same degree, and its length is 6.","solution":"def find_smallest_subarray_length(nums): Finds the length of the smallest subarray that has the same degree as the whole array. from collections import defaultdict # Dictionary to store the frequency of each element freq = defaultdict(int) # Dictionary to store the first occurrence index of each element first_occurrence = {} # Dictionary to store the last occurrence index of each element last_occurrence = {} # Fill the dictionaries for i, num in enumerate(nums): if num not in first_occurrence: first_occurrence[num] = i last_occurrence[num] = i freq[num] += 1 # Find the degree of the array degree = max(freq.values()) # Initialize the minimum length to a large number min_length = len(nums) # Find the smallest subarray length with the same degree for num in freq: if freq[num] == degree: min_length = min(min_length, last_occurrence[num] - first_occurrence[num] + 1) return min_length"},{"question":"In a computer game, you are controlling a character that can move through a 2D grid made up of cells with non-negative values. Your objective is to navigate from the top-left corner of the grid (cell (0,0)) to the bottom-right corner of the grid (cell (m-1,n-1)) and collect the maximum number of points along the way. The character can move either to the right or down at any point in time. You need to devise a strategy to achieve the maximum possible score. The first line of input contains two integers m and n (1 ≤ m, n ≤ 1000), representing the number of rows and columns in the grid, respectively. The next m lines contain n space-separated integers each, where the j-th integer in the i-th line represents the number of points in the cell (i, j) (0 ≤ points[i][j] ≤ 100). Output the maximum number of points that can be collected. Here is an example for better understanding: ``` Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 12 ``` Explanation of the example: The optimal path to collect the maximum number of points is: (0,0) → (0,1) → (0,2) → (1,2) → (2,2) with a total of 1 + 3 + 1 + 1 + 1 + 4 + 2 = 12 points.","solution":"def max_points(m, n, grid): # Create a 2D array to store the maximum points collected up to each cell dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"Consider a circular arrangement of n chairs in a room where each chair is numbered from 1 to n in clockwise order. Initially, there is one player standing at chair 1. Each move consists of moving k chairs clockwise, where k is a positive integer. The objective is to determine the chair number on which the player will land after m such moves. You are to implement the following function: ```python def find_chair(n: int, m: int, k: int) -> int: This function returns the chair number on which the player will land after m moves of k chairs each in a circular arrangement of n chairs. Parameters: n (int): The number of chairs. m (int): The number of moves. k (int): The number of chairs moved per move. Returns: int: The chair number on which the player will land. ``` # Input - An integer n (1 ≤ n ≤ 10^9) — the number of chairs. - An integer m (1 ≤ m ≤ 10^9) — the number of moves. - An integer k (1 ≤ k ≤ 10^9) — the number of chairs moved per move. # Output - A single integer representing the chair number on which the player will land after m moves. # Example ```python # Example 1 n = 5 m = 3 k = 2 find_chair(n, m, k) # Output: 2 # Example 2 n = 6 m = 4 k = 1 find_chair(n, m, k) # Output: 5 # Example 3 n = 7 m = 14 k = 3 find_chair(n, m, k) # Output: 1 ``` # Explanation In Example 1, there are 5 chairs and the player moves 3 times, each time moving 2 chairs: 1 → 3 → 5 → 2 (ends up at chair number 2). In Example 2, there are 6 chairs and the player moves 4 times, each time moving 1 chair: 1 → 2 → 3 → 4 → 5 (ends up at chair number 5). In Example 3, there are 7 chairs and the player moves 14 times, each time moving 3 chairs: 1 → 4, 4 → 7, 7 → 3, 3 → 6, 6 → 2, 2 → 5, 5 → 1, 1 → 4,... (since 14 is 2 full rotations), the player ends up at chair number 1.","solution":"def find_chair(n: int, m: int, k: int) -> int: This function returns the chair number on which the player will land after m moves of k chairs each in a circular arrangement of n chairs. Parameters: n (int): The number of chairs. m (int): The number of moves. k (int): The number of chairs moved per move. Returns: int: The chair number on which the player will land. # Calculate the total number of moves needed modulo the number of chairs to get the final position final_pos = (1 + m * k) % n # if the final position is 0, it means we are at the last chair (chair n) return final_pos if final_pos != 0 else n"},{"question":"A farm has a rectangular field with dimensions n by m (1 ≤ n, m ≤ 100). The field is divided into nm cells, each of which is either planted with crops or is barren. Each cell can either be represented as a \'1\' for crops or \'0\' for barren. A farmer wants to collect crops only from the rectangular subfields that contain only crops and maximize the collected crops. Your task is to find the size of the largest contiguous sub-rectangle that contains only crops (i.e., all \'1\'s) in the field. Input: - The first line contains two integers, n and m, denoting the number of rows and columns, respectively. - The next n lines each contain a string of length m consisting only of \'0\' and \'1\', representing the farm\'s field. Output: - A single line containing one integer — the size of the largest contiguous sub-rectangle that contains only crops. Example: Input: 3 4 0110 1111 0110 Output: 6 In the example, the largest subfield that contains only \'1\'s is: ``` 11 11 11 ``` This subfield has a size of 2 rows by 3 columns, resulting in a size of 6.","solution":"def maximalRectangle(matrix): if not matrix: return 0 n, m = len(matrix), len(matrix[0]) height = [0] * (m + 1) max_area = 0 for i in range(n): for j in range(m): if matrix[i][j] == \'1\': height[j] += 1 else: height[j] = 0 stack = [-1] for j in range(m + 1): while height[j] < height[stack[-1]]: h = height[stack.pop()] w = j - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(j) return max_area # Example usage: n = 3 m = 4 matrix = [ \\"0110\\", \\"1111\\", \\"0110\\" ] print(maximalRectangle(matrix)) # Output: 6"},{"question":"You are given a sequence of integers in an array `arr` of length `n` (1 le n le 100). Your task is to determine the length of the longest subsequence such that all elements in the subsequence are divisible by a given integer `k` (1 le k le 100). A subsequence is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The first line contains one integer `t` (1 le t le 100) — the number of test cases. Then, `t` test cases follow. Each test case consists of two lines. The first line contains two integers `n` and `k`. The second line contains `n` integers representing the array `arr`. Print `t` integers, where the `i`-th integer is the answer to the `i`-th test case (the length of the longest subsequence whose elements are divisible by `k`). **Example:** ``` Input: 2 6 3 4 9 15 6 12 7 5 5 1 2 3 4 5 Output: 3 1 ``` In the first test case, the subsequence [9, 15, 6, 12] contains 3 elements that are divisible by 3. In the second test case, simply the element 5 is divisible by 5.","solution":"def longest_divisible_subsequence(t, test_cases): For each test case, find the length of the longest subsequence such that all elements in it are divisible by k results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] count = sum(1 for x in arr if x % k == 0) results.append(count) return results"},{"question":"You are given an array of integers which represents the heights of buildings in a straight line. You need to identify the two buildings that, together with the line between them, form a container that can hold the most water. The width of the container is the distance between the two buildings, and the height is the minimum of the heights of these two buildings. You need to return the maximum amount of water such a container can store. # Input - The first line of input contains an integer `n` (2 ≤ n ≤ 10000), the number of buildings. - The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 1000), which represent the heights of the buildings. # Output - Print a single integer, the maximum amount of water that can be stored. # Example Input ``` 9 1 8 6 2 5 4 8 3 7 ``` Output ``` 49 ``` In this example, the maximum amount of water is held between the buildings with heights 8 and 7. The width between these two buildings is 7, and the minimum height between them is 7. Therefore, the area is 7 * 7 = 49. # Note You can assume that height 1 is at index 0, height 2 is at index 1, and so on. The input guarantees that there will always be at least two buildings.","solution":"def max_area(heights): Returns the maximum area that can be formed between two buildings. left = 0 right = len(heights) - 1 max_water = 0 while left < right: width = right - left height = min(heights[left], heights[right]) max_water = max(max_water, width * height) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"Given an integer input n (1 le n le 1000), return the sum of its digits. # Input - A single integer n. # Output - A single integer representing the sum of the digits of n.","solution":"def sum_of_digits(n): Returns the sum of the digits of the given integer n. return sum(int(digit) for digit in str(n))"},{"question":"A group of archeologists have recently discovered a collection of ancient inscriptions in a distant land. Shortly after, they noticed that these inscriptions were written in an unknown numeral system called Gnomish. Intrigued by the mystery, they decided to construct a base conversion program to better understand and translate the inscriptions into more familiar numeral systems. The Gnomish numeral system is a positional numeral system with a base b (2 ≤ b ≤ 36). Its digits are represented by any of the 36 alphanumeric characters (\'0\'-\'9\', \'a\'-\'z\'). Given a number in Gnomish numeral system, your task is to convert it into the decimal (base-10) system. The first line of the input contains an integer b, the base of the numeral system in which the Gnomish number is represented. The second line contains a string s, the Gnomish number itself. It is guaranteed that each character in the string is a valid digit in the base b numeral system. The length of s will not exceed 100,000 characters. The output should be a single integer, the decimal representation of the Gnomish number. Here\'s how the Gnomish numerals map to their respective values: - \'0\' to \'9\' map to 0-9 - \'a\' to \'z\' map to 10-35 For instance, if the base is 16 and the number is \\"1a\\", the decimal equivalent is 1 * 16^1 + 10 * 16^0 = 26. Write a program that converts a Gnomish number from its base b to its decimal representation. **Input** ``` 2 1010 ``` **Output** ``` 10 ``` **Input** ``` 16 1a ``` **Output** ``` 26 ``` **Explanation** - For the first example, the base is 2, and the Gnomish number \\"1010\\" converts to 10 in the decimal system. - For the second example, the base is 16, and the Gnomish number \\"1a\\" converts to 26 in the decimal system.","solution":"def gnomish_to_decimal(b, s): Converts a number in the Gnomish numeral system with base b to its decimal (base-10) equivalent. Args: b (int): Base of the Gnomish numeral system (2 ≤ b ≤ 36). s (str): The Gnomish number as a string. Returns: int: The decimal representation of the Gnomish number. decimal_value = 0 length = len(s) for i in range(length): char = s[length - 1 - i] if \'0\' <= char <= \'9\': value = ord(char) - ord(\'0\') elif \'a\' <= char <= \'z\': value = ord(char) - ord(\'a\') + 10 decimal_value += value * (b ** i) return decimal_value"},{"question":"In a video game, a player earns points by collecting coins. The player can collect coins in several rounds, and at the end of each round, the total number of coins collected is recorded. To advance to the next level, the player must achieve a certain minimum average number of coins per round. Write a function that determines if the player has met the requirement to advance to the next level. The function should receive a list of integers where each integer represents the number of coins collected in a round, and an integer which represents the required minimum average number of coins. Function signature: ``` def can_advance(coins: List[int], min_avg: int) -> bool: ``` # Input - `coins`: A list of integers (1 ≤ length of coins ≤ 100, 1 ≤ coins[i] ≤ 1000) representing the number of coins collected in each round. - `min_avg`: An integer (1 ≤ min_avg ≤ 1000) representing the required minimum average number of coins per round. # Output - Return `True` if the player\'s average number of coins per round is greater than or equal to the required minimum average, otherwise return `False`. # Example ```python >> can_advance([100, 200, 150, 300], 200) True >> can_advance([50, 60, 70, 80], 100) False ```","solution":"from typing import List def can_advance(coins: List[int], min_avg: int) -> bool: Determines if the player meets the requirement to advance to the next level based on the average number of coins per round. Parameters: coins (List[int]): A list of integers representing the number of coins collected in each round. min_avg (int): The required minimum average number of coins per round. Returns: bool: True if the player\'s average number of coins per round is greater than or equal to the required minimum average, otherwise False. total_coins = sum(coins) number_of_rounds = len(coins) average_coins = total_coins / number_of_rounds return average_coins >= min_avg"},{"question":"A university is organizing a chess tournament where `n` students are participating. The tournament is a knockout format, meaning a player is eliminated after a loss, and matches are played until only one player remains. The tournament always pairs students in sequential order in each round, such that student 1 plays against student 2, student 3 plays against student 4, and so on. If the number of students is odd in any round, the last student automatically advances to the next round. Each match has a pre-defined winner based on the skill levels of the students. Assume the skill levels are given as a list of integers, where a higher integer represents a stronger player who wins against a weaker player. Given the list of skill levels for `n` students, your task is to simulate the knockout tournament and determine the skill level of the final winner. # Input The first line contains an integer `t` (1 ≤ t ≤ 10) — the number of test cases. Each test case consists of two lines: - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of students. - The second line contains `n` integers representing the skill levels of the students. # Output For each test case, output the skill level of the final winner. # Example Input: ``` 2 4 3 6 2 5 5 1 3 9 7 5 ``` Output: ``` 6 9 ``` # Explanation In the first test case: - In the first round: student with skill 3 vs student with skill 6 (6 wins), student with skill 2 vs student with skill 5 (5 wins). - In the next round: student with skill 6 vs student with skill 5 (6 wins). - The final winner is student with skill 6. In the second test case: - In the first round: student with skill 1 vs student with skill 3 (3 wins), student with skill 9 vs student with skill 7 (9 wins), student with skill 5 advances automatically. - In the next round: student with skill 3 vs student with skill 9 (9 wins), student with skill 5 advances automatically. - In the final, student with skill 9 vs student with skill 5 (9 wins). - The final winner is student with skill 9.","solution":"def knockout_tournament_winner(t, test_cases): Simulates the knockout tournament for multiple test cases and returns the skill level of the final winner. Parameters: - t: Number of test cases. - test_cases: A list of tuples (n, skill_levels), where - n: Number of students - skill_levels: List of integers representing the skill levels of the students Returns: - A list of integers representing the skill level of the final winner for each test case winners = [] for case in test_cases: n = case[0] skill_levels = case[1] while len(skill_levels) > 1: next_round = [] for i in range(0, len(skill_levels) - 1, 2): next_round.append(max(skill_levels[i], skill_levels[i+1])) if len(skill_levels) % 2 == 1: next_round.append(skill_levels[-1]) skill_levels = next_round winners.append(skill_levels[0]) return winners"},{"question":"There is a box with n balls, each ball having its own weight. We have to divide all the balls into two groups such that the absolute difference between the total weights of the two groups is minimized. Your task is to determine this minimum possible difference. For example, if there are 5 balls with weights [3, 1, 4, 2, 2], you could split them into two groups [3, 1, 2] and [4, 2] which yields an absolute difference of 0 since the total weights of both groups are 6. Input: - The first line contains an integer n (1 ≤ n ≤ 20) - the number of balls. - The second line contains n space-separated integers which denote the weights of the balls, wi (1 ≤ wi ≤ 100). Output: - Print the minimum possible difference between the two groups. Example: Input: 5 3 1 4 2 2 Output: 0","solution":"def find_min_difference(n, weights): Finds the minimum possible difference between the weights of two groups. Args: n : int - The number of balls. weights : list of int - The weights of the balls. Returns: int - The minimum possible difference between the weights of two groups. total_weight = sum(weights) half_weight = total_weight // 2 # dp array where dp[i] will be True if a subset with weight i is possible dp = [False] * (half_weight + 1) dp[0] = True for weight in weights: # Traverse the dp array backward to avoid using the same item multiple times for j in range(half_weight, weight-1, -1): if dp[j - weight]: dp[j] = True # Find the closest possible weight to half of total_weight for i in range(half_weight, -1, -1): if dp[i]: group1_weight = i break group2_weight = total_weight - group1_weight return abs(group1_weight - group2_weight)"},{"question":"John has a rectangular grid with `n` rows and `m` columns. Each cell in the grid can either be empty or contain an obstacle. John wants to find out if there is a path from the top-left corner of the grid to the bottom-right corner. John can only move to the right or down from a cell. The grid is represented by an `n` x `m` matrix, where `1` indicates an obstacle and `0` indicates an empty cell. The top-left corner is at position (0,0), and the bottom-right corner is at position (n-1, m-1). Write a program to determine if there is a path from the top-left corner to the bottom-right corner. If such a path exists, print the number of steps in the shortest path. If no such path exists, print `-1`. # Input Format: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) - the number of rows and columns of the grid respectively. - The next `n` lines each contain `m` integers (either `0` or `1`) representing the grid. # Output Format: - Print the length of the shortest path from the top-left corner to the bottom-right corner, or `-1` if no such path exists. # Sample Input: ``` 3 3 0 0 1 1 0 1 0 0 0 ``` # Sample Output: ``` 4 ``` # Explanation: The shortest path goes: (0,0) → (0,1) → (1,1) → (2,1) → (2,2) with 4 steps.","solution":"def shortest_path(grid): from collections import deque n, m = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 queue = deque([(0, 0, 0)]) # (row, col, steps) directions = [(1, 0), (0, 1)] # Only right and down movements visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given a sequence of n integers a_1,a_2,dots,a_n where 1 le n le 1000 and 1 le a_i le 1000. You need to determine the number of distinct prime numbers that divide at least one number in the sequence a. For example, for the sequence a = [6, 10, 15], the prime numbers that divide at least one number in the sequence are 2, 3, 5, so the answer is 3. Input: The first line contains a single integer t (1 le t le 100) — the number of test cases. Each of the following t test cases consists of two lines: - The first line contains a single integer n. - The second line contains n integers a_1,a_2,dots,a_n. Output: For each test case, print one integer — the number of distinct prime numbers that divide at least one number in the sequence a. Input/Output example: Input: 3 3 6 10 15 4 7 11 17 23 5 14 21 28 35 42 Output: 3 4 2 Explanation of the first test case: For the array [6, 10, 15], the distinct prime numbers that divide at least one element are 2 (divides 6, 10), 3 (divides 6, 15), and 5 (divides 10, 15), so the answer is 3. Explanation of the second test case: For the array [7, 11, 17, 23], each number is a prime number itself, so the distinct prime numbers are 7, 11, 17, and 23. The answer is 4. Explanation of the third test case: For the array [14, 21, 28, 35, 42], the distinct prime numbers that divide at least one element are 2 (divides 14, 28, 42), 3 (divides 21, 42), 5 (divides 35), and 7 (divides 14, 21, 28, 35, 42), so the answer is 4.","solution":"def sieve(limit): Generate a list of prime numbers up to `limit` using the Sieve of Eratosthenes. is_prime = [True] * (limit + 1) p = 2 while (p * p <= limit): if (is_prime[p] == True): for i in range(p * p, limit + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, limit + 1) if is_prime[p]] return primes def count_distinct_prime_divisors(test_cases): MAX_A = 1000 primes = sieve(MAX_A) results = [] for case in test_cases: n, a = case prime_divisors = set() for number in a: for prime in primes: if prime * prime > number: break if number % prime == 0: prime_divisors.add(prime) while number % prime == 0: number //= prime if number > 1: prime_divisors.add(number) results.append(len(prime_divisors)) return results"},{"question":"Detective Liam is working on a peculiar case involving encoded messages exchanged between members of a secret organization. Each message is encoded as a string and is formed by a specific pattern of repeated substrings. Liam has intercepted `n` such messages and needs your help to determine the basic unit of each message string. The basic unit of a string is the smallest substring that can be repeated to form the entire string. For example, the basic unit of \\"ababab\\" is \\"ab\\", as repeating \\"ab\\" three times forms \\"ababab\\". For \\"aaaaa\\", the basic unit is \\"a\\". Given `n` encoded messages, return the lengths of the basic units of each message. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) – the number of intercepted messages. - Each of the next `n` lines contains a single string `Si` of length `li` (1 ≤ li ≤ 1000), representing an encoded message. The strings consist of lowercase English letters only. # Output Output `n` space-separated integers representing the lengths of the basic units of each message in the order they were given. # Example Input: ``` 3 ababab aaaaa xyzxyzxyzxyz ``` Output: ``` 2 1 3 ``` # Explanation - For the first message \\"ababab\\", the smallest substring that can be repeated to obtain the entire message is \\"ab\\", which has a length of 2. - For the second message \\"aaaaa\\", the smallest substring that can be repeated to obtain the entire message is \\"a\\", which has a length of 1. - For the third message \\"xyzxyzxyzxyz\\", the smallest substring that can be repeated to obtain the entire message is \\"xyz\\", which has a length of 3.","solution":"def find_basic_unit_length(message): This function finds the smallest substring that can be repeated to form the entire message. It returns the length of that substring. length = len(message) for i in range(1, length + 1): if length % i == 0: basic_unit = message[:i] if basic_unit * (length // i) == message: return i return length def get_basic_unit_lengths(n, messages): This function processes a list of messages and returns the lengths of the basic units for each message. return [find_basic_unit_length(message) for message in messages]"},{"question":"In the magical land of Arithmetica, there lives a wizard named Finnegan. Finnegan loves creating sequences of numbers using his magical wand and a bit of arithmetic. One day, Finnegan decided to create a special sequence using three parameters: an initial number, a difference, and a limit. He calls it the Finnegan Sequence. The Finnegan Sequence is defined as follows: 1. The first number in the sequence is the initial number. 2. Each subsequent number in the sequence is obtained by adding the difference to the previous number. 3. The sequence stops as soon as adding the difference to the current number would result in a number greater than the limit. Given these three parameters: initial number `start`, difference `diff`, and limit `limit`, your task is to compute the length of the Finnegan Sequence. Input: - The first line contains three space-separated integers: `start`, `diff`, and `limit` (1 ≤ `start` ≤ `limit` ≤ 10^9, 1 ≤ `diff` ≤ `limit`). Output: - Print a single integer representing the length of the Finnegan Sequence. For example, if `start` is 3, `diff` is 5, and `limit` is 20: - The sequence would be: 3, 8, 13, 18, and it would stop there as the next number (23) would exceed the limit. - Hence, the length of the Finnegan Sequence would be 4. Example: Input: 3 5 20 Output: 4 Consider another example where `start` is 1, `diff` is 2, and `limit` is 10: - The sequence would be: 1, 3, 5, 7, 9, and it would stop there as the next number (11) would exceed the limit. - Hence, the length of the Finnegan Sequence would be 5. Example: Input: 1 2 10 Output: 5 Write a function that computes the length of the Finnegan Sequence given the parameters `start`, `diff`, and `limit`.","solution":"def finnegan_sequence_length(start, diff, limit): Returns the length of the Finnegan Sequence length = 0 current = start while current <= limit: length += 1 current += diff return length"},{"question":"You are given an integer array of length n. You have to perform a certain type of query on this array. Each query can ask for the number of distinct primes in a subarray. You need to respond to each query efficiently. # Task: You will be given an array of integers and must process multiple queries. Each query will provide you two integers, L and R, indicating the range [L, R]. For each query, determine the number of distinct prime numbers in the subarray from L to R. # Input: 1. The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. 2. The second line contains n integers ai (1 ≤ ai ≤ 10^6), which are the elements of the array. 3. The third line contains an integer q (1 ≤ q ≤ 10^5), the number of queries. 4. Each of the next q lines contains two integers L and R (1 ≤ L ≤ R ≤ n), representing the range [L, R]. # Output: For each query, output a single integer, the number of distinct prime numbers in the subarray from indices L to R inclusive. # Example: Input: ``` 6 2 3 4 5 6 7 3 1 3 2 5 1 6 ``` Output: ``` 2 2 4 ``` # Explanation: - For the first query, the subarray [2, 3, 4] contains the primes {2, 3}. - For the second query, the subarray [3, 4, 5, 6] contains the primes {3, 5}. - For the third query, the subarray [2, 3, 4, 5, 6, 7] contains the primes {2, 3, 5, 7}. # Note: 1. To achieve an efficient solution, you may need to preprocess the array or use a data structure that supports fast range queries. 2. Consider using the Sieve of Eratosthenes to precompute the primes up to the maximum possible value of ai (= 10^6).","solution":"from itertools import accumulate from collections import defaultdict def sieve(n): is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 is_prime[0], is_prime[1] = False, False return [i for i in range(n + 1) if is_prime[i]] def preprocess_primes(arr, max_value): primes = sieve(max_value) prime_set = set(primes) count_primes = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): count_primes[i] = count_primes[i-1] + (1 if arr[i-1] in prime_set else 0) return count_primes def distinct_primes_queries(arr, queries): max_value = max(arr) count_primes = preprocess_primes(arr, max_value) result = [] for L, R in queries: distinct_count = count_primes[R] - count_primes[L - 1] result.append(distinct_count) return result"},{"question":"Write a quantum operation that performs a bitwise XOR (exclusive OR) between two registers of equal length, where each register is an array of qubits. The result should be stored in the first register. Your operation should take two registers of type LittleEndian, representing the binary encoding of unsigned integers in little-endian format. The least significant bit corresponds to the array element with index 0. For example, if Register1 and Register2 are of length 3 and in the states |011rangle and |101rangle respectively (representing the integers 6 and 5), then the result after applying the XOR should be Register1 in the state |110rangle (representing the integer 3) and Register2 should remain unchanged. The following constraint must be met: - Your operation should not utilize any forms of measurement. Your code should have the following signature (note that your operation should have Adjoint and Controlled variants defined for it; is Adj+Ctl in the operation signature will generate them automatically based on your code): Your implementation must utilize only the X gate and its controlled variants to achieve the bitwise XOR operation.","solution":"def bitwise_xor(arr1, arr2): Performs a bitwise XOR on two registers (lists of bits) of equal length. The result is stored in the first register (arr1). if len(arr1) != len(arr2): raise ValueError(\\"Registers must be of the same length\\") for i in range(len(arr1)): arr1[i] = arr1[i] ^ arr2[i] return arr1"},{"question":"Your friend gives you a rectangular chocolate bar with n rows and m columns. Each cell of the chocolate bar has a value indicating its deliciousness. You want to find the most delicious chocolate segment, i.e., the sub-matrix with the highest sum of deliciousness values. You may assume that the chocolate bar dimensions and values are such that computing this is feasible. Write a program that takes the dimensions of the chocolate bar and the deliciousness values in the chocolate bar and outputs the value of the most delicious chocolate segment. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 300) - the number of rows and columns in the chocolate bar. - The following n lines contain m integers each, where each integer represents the deliciousness value of a cell in the chocolate bar. Output: - A single integer, the maximum sum of deliciousness values for any sub-matrix. Example: Input: 3 4 1 2 3 4 5 6 7 8 9 10 11 12 Output: 78 Explanation: The sub-matrix containing all elements (in this case, the entire chocolate bar) has the sum: 1+2+3+4+5+6+7+8+9+10+11+12 = 78, which is the maximum possible for any sub-matrix in this chocolate bar.","solution":"def max_delicious_chocolate(n, m, chocolate): def kadane(arr): max_ends_here = max_so_far = arr[0] for x in arr[1:]: max_ends_here = max(x, max_ends_here + x) max_so_far = max(max_so_far, max_ends_here) return max_so_far max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += chocolate[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to find a substring of length k where the lexicographical order of the substring is the smallest possible. If there are multiple such substrings, return the one that appears first. A substring of a string is defined as a contiguous block of characters between any two indices in the string. The lexicographical order is determined by comparing the characters in the string one by one from left to right. The first line contains a single integer k (1 le k le |s|) — the length of the substring. The second line contains the string s (1 le |s| le 10^5) consisting of lowercase English letters. You should output exactly one string — the smallest possible substring of length k in lexicographical order. **Examples:** **Input**: ``` 3 abcde ``` **Output**: ``` abc ``` **Input**: ``` 2 bacda ``` **Output**: ``` ac ``` **Input**: ``` 4 zxcvbnm ``` **Output**: ``` bnm ``` **Explanation**: In the first example, the string \\"abcde\\" contains substrings \\"abc\\", \\"bcd\\", \\"cde\\", among which \\"abc\\" is the smallest in lexicographical order. In the second example, the string \\"bacda\\" contains substrings \\"ba\\", \\"ac\\", \\"cd\\", \\"da\\", among which \\"ac\\" is the smallest in lexicographical order.","solution":"def smallest_lexicographical_substring(s, k): Returns the smallest possible substring of length k in lexicographical order. Parameters: s (str): The input string consisting of lowercase English letters. k (int): The length of the substring to be found. Returns: str: The smallest possible substring of length k in lexicographical order. smallest = s[:k] for i in range(1, len(s) - k + 1): current_substring = s[i:i+k] if current_substring < smallest: smallest = current_substring return smallest"},{"question":"You are given an integer array `arr` consisting of `n` integers. The task is to find the length of the longest contiguous subarray that forms a mountain. A mountain subarray is defined as a subarray that contains at least three elements and has the following properties: 1. arr[i] < arr[i + 1] for all 0 <= i < k 2. arr[k] > arr[k + 1] for all k <= j < len(arr) - 1 Where k is the peak of the mountain subarray. Write a function `longestMountain(arr: List[int]) -> int` that takes an integer array `arr` and returns the length of the longest mountain subarray. If there is no such subarray, return 0. # Function Signature ```python def longestMountain(arr: List[int]) -> int: pass ``` # Input - A single line containing space-separated integers, denoting the array `arr`. # Output - A single integer, representing the length of the longest mountain subarray. # Constraints - 1 <= len(arr) <= 10^5 - 0 <= arr[i] <= 10^4 # Example Example 1 **Input:** ``` 2 1 4 7 3 2 5 ``` **Output:** ``` 5 ``` **Explanation:** The longest mountain subarray is [1, 4, 7, 3, 2]. Example 2 **Input:** ``` 2 2 2 ``` **Output:** ``` 0 ``` **Explanation:** There is no mountain subarray. Write a Python function to solve this problem.","solution":"from typing import List def longestMountain(arr: List[int]) -> int: n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n-1): if arr[i-1] < arr[i] > arr[i+1]: # Peak of a mountain left = i - 1 while left > 0 and arr[left-1] < arr[left]: left -= 1 right = i + 1 while right < n-1 and arr[right] > arr[right+1]: right += 1 longest = max(longest, right - left + 1) return longest"},{"question":"In a galaxy far away, there is a planet called Logictron. On Logictron, there are `n` cities, connected by exactly `n-1` bidirectional roads such that there is a unique path between any pair of cities. The cities are uniquely identified by integers from 1 to `n`. Recently, the Logictron government introduced a new procedure to enhance trade relationships between cities by building new trade routes. They plan to build exactly `m` trade routes, such that each trade route connects two distinct cities directly and no two trade routes connect the same pair of cities. The cost of building a trade route between two cities `a` and `b` is given by the distance between these cities, which is simply the number of roads on the unique path connecting `a` and `b`. Your task is to determine the minimum possible total cost of building exactly `m` trade routes. If it is not possible to build exactly `m` trade routes, return `-1`. # Input - The first line contains two integers `n` and `m` (2 ≤ `n` ≤ 100,000, 1 ≤ `m` ≤ 10^8) — the number of cities and the number of trade routes to build. - Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ `u`, `v` ≤ `n`), indicating that there is a road connecting city `u` and city `v`. # Output - Print a single integer — the minimum possible total cost of building exactly `m` trade routes, or `-1` if it is not possible. # Example Input ``` 5 2 1 2 1 3 2 4 2 5 ``` Output ``` 2 ``` In this example, cities 4 and 5 are at a distance of 1 each to city 2. Therefore, selecting cities 4 and 5 forms two trade routes with a minimum cost of 1 each, resulting in a total cost of 2.","solution":"from collections import defaultdict import heapq def min_trade_route_cost(n, m, roads): def bfs(node): visited = [-1] * (n + 1) queue = [(0, node)] visited[node] = 0 while queue: dist, u = queue.pop(0) for v in tree[u]: if visited[v] == -1: visited[v] = dist + 1 queue.append((dist + 1, v)) return visited if m > (n * (n - 1)) // 2: return -1 tree = defaultdict(list) for u, v in roads: tree[u].append(v) tree[v].append(u) max_d = 0 for i in range(1, n + 1): max_d = max(max_d, max(bfs(i))) cost_heap = [] for i in range(1, n + 1): distances = bfs(i) distances = list(filter(lambda x: x > 0, distances)) for d in distances: heapq.heappush(cost_heap, d) total_cost = 0 for _ in range(m): if cost_heap: total_cost += heapq.heappop(cost_heap) else: return -1 return total_cost"},{"question":"You are given a list of `n` integers. Your task is to partition this list into the smallest number of contiguous subarrays such that each subarray is non-decreasing. In other words, the elements of every subarray should be sorted in non-decreasing order. Determine the minimum number of such subarrays and print that number. The first line of the input contains an integer `n` (1 ≤ n ≤ 1000) — the number of integers in the list. The second line contains `n` space-separated integers `a1, a2, ..., an` (1 ≤ ai ≤ 1000) — the elements of the list. Print a single integer — the minimum number of contiguous subarrays into which the list can be partitioned so that every subarray is non-decreasing. Note: A subarray is a contiguous part of the list. Example: ``` Input: 7 3 6 5 8 10 7 9 Output: 3 Explanation: The resulting subarrays could be [3, 6], [5, 8, 10], and [7, 9]. ``` Examples make the problem clear enough, showing how the list can be partitioned optimally.","solution":"def min_non_decreasing_subarrays(n, numbers): This function takes an integer n and a list of n integers, and returns the minimum number of contiguous subarrays such that each subarray is non-decreasing. if n == 1: return 1 count = 1 # At least one subarray exists for i in range(1, n): if numbers[i] < numbers[i - 1]: count += 1 return count"},{"question":"To investigate an email communication network, you are given the logs of all emails sent and received in a company. Each log entry includes the sender\'s email address, the receiver\'s email address, and the timestamp of when the email was sent. Your task is to identify the \\"busiest\\" email address based on the number of emails sent and received. If there is a tie, return the email address that comes first lexicographically. The input consists of: * The first line contains an integer n (1 le n le 10^5) representing the number of email logs. * The next n lines, each containing a string of the format \\"sender@domain receiver@domain timestamp\\", where \\"sender@domain\\" is the sender\'s email address, \\"receiver@domain\\" is the receiver\'s email address, and \\"timestamp\\" is the time the email was sent (timestamps are in the format \'YYYY-MM-DD HH:MM:SS\' and are not relevant for this task). Output one string: the email address that is the busiest. Example: Input: 5 a@example.com b@example.com 2023-09-01 08:30:00 b@example.com c@example.com 2023-09-01 09:00:00 c@example.com a@example.com 2023-09-01 10:00:00 a@example.com c@example.com 2023-09-01 11:30:00 b@example.com a@example.com 2023-09-01 12:00:00 Output: a@example.com Explanation: The activity counts for each email address: - a@example.com: 4 (2 sent and 2 received) - b@example.com: 3 (2 sent and 1 received) - c@example.com: 2 (1 sent and 1 received) a@example.com has the highest activity count of 4.","solution":"def busiest_email(n, logs): from collections import defaultdict email_activity = defaultdict(int) for log in logs: sender, receiver, _ = log.split(\' \', 2) email_activity[sender] += 1 email_activity[receiver] += 1 busiest = max(email_activity.items(), key=lambda x: (x[1], -ord(x[0][0]))) return busiest[0]"},{"question":"The World Health Organization (WHO) plans to distribute vaccines in various regions of the world. Each region should be assigned a number of vaccines according to its population and healthcare infrastructure. The total number of vaccines available for distribution is V. For every region, you are given its population and healthcare score. The healthcare score reflects the efficiency and capability of the region’s healthcare system. Each region must receive vaccines based on its healthcare score, meaning that a region with a higher healthcare score should not receive fewer vaccines than a region with a lower score. Additionally, the vaccine distribution must satisfy the following conditions: 1. Every region should receive at least 1 vaccine. 2. The total number of vaccines distributed should be exactly V. 3. Regions with the same healthcare score must receive an equal number of vaccines. Your task is to determine if it is possible to distribute the vaccines according to the given criteria. If it is possible, provide the number of vaccines to each region. Otherwise, print \'IMPOSSIBLE\'. The first line contains a single integer n (1 ≤ n ≤ 105), the number of regions. The second line contains a single integer V (n ≤ V ≤ 109), the total number of vaccines available. The next n lines each contain two space-separated integers — p_i and s_i (1 ≤ p_i ≤ 109, 1 ≤ s_i ≤ 100), representing the population and the healthcare score of the i-th region. If the distribution is possible, print a single word \'POSSIBLE\' (without the quotes). In the next line, print n space-separated integers, the number of vaccines assigned to each region in the order given. If there are multiple valid distributions, you can print any of them. If it is not possible to distribute the vaccines according to the rules, print \'IMPOSSIBLE\'.","solution":"def distribute_vaccines(n, V, regions): from collections import defaultdict # Group regions by their healthcare scores groups = defaultdict(list) for i, (population, score) in enumerate(regions): groups[score].append(i) # Sort groups by their score in ascending order sorted_groups = sorted(groups.items()) # Initialize vaccines distribution vaccines = [0] * n remaining_vaccines = V # Distribute at least one vaccine to each region for group in sorted_groups: for region_index in group[1]: vaccines[region_index] = 1 remaining_vaccines -= 1 if remaining_vaccines < 0: return \\"IMPOSSIBLE\\" # Distribute remaining vaccines based on scores for score, group_indices in sorted_groups: if remaining_vaccines <= 0: break extra_vaccines = remaining_vaccines // len(group_indices) for region_index in group_indices: vaccines[region_index] += extra_vaccines remaining_vaccines %= len(group_indices) # If there are still remaining vaccines, it means distributing them evenly among regions with the same score if remaining_vaccines > 0: for i in range(n): if remaining_vaccines <= 0: break vaccines[i] += 1 remaining_vaccines -= 1 if sum(vaccines) != V: return \\"IMPOSSIBLE\\" return [\\"POSSIBLE\\"] + [vaccines] # Helper function to format the output correctly def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) V = int(data[1]) regions = [(int(data[i * 2 + 2]), int(data[i * 2 + 3])) for i in range(n)] result = distribute_vaccines(n, V, regions) if result == \\"IMPOSSIBLE\\": print(\\"IMPOSSIBLE\\") else: print(result[0]) print(\\" \\".join(map(str, result[1])))"},{"question":"You are given an array of integers. The task is to find the greatest possible sum of a non-empty subarray of the given array, where the elements of the subarray form a distinct sequence. A sequence is considered distinct if each element appears exactly once in that sequence. The first line of input contains a single integer T (1 le T le 100) — the number of test cases. Each test case consists of two lines: - The first line contains a single integer N (1 le N le 10^5) — the size of the array. - The second line contains N integers a_1, a_2, ldots, a_N (-10^9 le a_i le 10^9) — the elements of the array. For each test case, print a single line with the greatest possible sum of a non-empty subarray that forms a distinct sequence. **Example input:** ``` 2 5 1 2 1 2 3 5 10 20 30 40 50 ``` **Example output:** ``` 6 150 ```","solution":"def max_sum_of_distinct_subarray(T, test_cases): results = [] for case in test_cases: N, array = case curr_sum = 0 max_sum = float(\'-inf\') seen = set() left = 0 for right in range(N): while array[right] in seen: seen.remove(array[left]) curr_sum -= array[left] left += 1 seen.add(array[right]) curr_sum += array[right] max_sum = max(max_sum, curr_sum) results.append(max_sum) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] line_index = 1 for _ in range(T): N = int(lines[line_index]) array = list(map(int, lines[line_index + 1].split())) test_cases.append((N, array)) line_index += 2 return T, test_cases def parse_output(output_str): return list(map(int, output_str.strip().split(\'n\')))"},{"question":"You are given two strings, s1 and s2, of lengths n and m respectively. Your task is to merge these two strings into one such that the resulting string is the shortest common supersequence (SCS) possible. The SCS of two strings is defined as the shortest string that contains both s1 and s2 as subsequences. The first line contains the integer n (1 ≤ n ≤ 1000) — the length of the string s1. The second line contains the integer m (1 ≤ m ≤ 1000) — the length of the string s2. The third line contains the string s1 consisting of lowercase English alphabets. The fourth line contains the string s2 consisting of lowercase English alphabets. Output the length of the shortest common supersequence in the first line. In the next line, output one possible shortest common supersequence. If there are multiple answers, you can output any one of them. **Example:** Input: ``` 4 5 abac cabca ``` Output: ``` 6 cabaca ``` Note: In the above example, one possible shortest common supersequence is \\"cabaca\\". Another possible solution for the same input is \\"abacbc\\". Both of these strings contain \\"abac\\" and \\"cabca\\" as subsequences. However, the length of both is 6, which is the shortest possible supersequence length for this input.","solution":"def shortest_common_supersequence(s1, s2): n = len(s1) m = len(s2) # Create a DP table to store lengths of longest common subsequence dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill dp array for i in range(1, n + 1): for j in range(1, m + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Length of the shortest common supersequence lcs_length = dp[n][m] scs_length = n + m - lcs_length # Building the shortest common supersequence i, j = n, m scs = [] while i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: scs.append(s1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: scs.append(s1[i - 1]) i -= 1 else: scs.append(s2[j - 1]) j -= 1 while i > 0: scs.append(s1[i - 1]) i -= 1 while j > 0: scs.append(s2[j - 1]) j -= 1 scs.reverse() scs_string = \'\'.join(scs) return scs_length, scs_string"},{"question":"You are given an array of n integers and m queries. Each query is described by two indices li and ri (both 0-based). The query asks for the maximum element in the subarray from li to ri (inclusive). After processing all the queries, your task is to output the maximum elements for each query in the order they are given. For example, if the array is [1, 3, 5, 7, 9] and the queries are: 1) (1, 3) 2) (0, 4) 3) (2, 2) The answers for the queries are: 1) 7 (subarray is [3, 5, 7]) 2) 9 (subarray is [1, 3, 5, 7, 9]) 3) 5 (subarray is [5]) The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100000) — the size of the array and the number of queries. The second line contains n integers representing the elements of the array. Each of the next m lines contains two integers li and ri (0 ≤ li ≤ ri < n) — the indices of the subarray for the i-th query. Print m integers, each representing the maximum element in the subarray for each query. The sample is described in the problem statement.","solution":"def max_in_subarrays(arr, queries): results = [] for li, ri in queries: results.append(max(arr[li:ri+1])) return results"},{"question":"Hitagi has a rectangular grid of integers that represents a map of her school. The grid has n rows and m columns. Hitagi can freely move up, down, left, or right. She starts at any cell containing the integer 1 and aims to reach any cell containing the integer 2. However, Hitagi\'s movement is restricted by some cells that contain obstacles, denoted by the integer -1. She cannot move through these cells. Other cells contain integers ranging from 3 to 100, which do not impact her movement. Your task is to write a program that determines the minimum number of moves Hitagi needs to reach any cell containing the integer 2 starting from any cell containing the integer 1. If it is not possible to reach a cell containing the integer 2, output -1. The input consists of multiple test cases. The first line of each test case contains two space-separated positive integers n and m (2 ≤ n, m ≤ 100). The next n lines each contain m space-separated integers representing the grid\'s cells. The grid is guaranteed to contain at least one cell with the integer 1 and at least one cell with the integer 2. Output a single integer representing the minimum number of moves needed to reach any cell containing the integer 2 from any cell containing the integer 1. If it is not possible to reach any cell containing the integer 2 from any cell containing the integer 1, output -1. The input ends with a line containing two zeros. # Example Input: ``` 5 5 1 0 0 -1 0 0 -1 0 0 0 0 -1 -1 0 0 2 -1 0 0 2 0 0 0 -1 2 0 0 ``` Output: ``` 3 ```","solution":"from collections import deque def minimum_moves(grid, n, m): def bfs(starts, grid, n, m): moves = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(x, y, 0) for x, y in starts]) visited = set(starts) while queue: x, y, d = queue.popleft() if grid[x][y] == 2: return d for dx, dy in moves: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != -1: queue.append((nx, ny, d + 1)) visited.add((nx, ny)) return -1 starts = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == 1] return bfs(starts, grid, n, m) def process_input(input_str): input_lines = input_str.strip().split(\'n\') results = [] i = 0 while i < len(input_lines): n, m = map(int, input_lines[i].split()) if n == 0 and m == 0: break grid = [] for j in range(n): row = list(map(int, input_lines[i + 1 + j].split())) grid.append(row) results.append(minimum_moves(grid, n, m)) i += n + 1 return results"},{"question":"Anna is organizing a party and wants to keep track of guests who have RSVPed. She has a guest list of n people. During the event planning, she wants to quickly check if a certain person has already RSVP\'d. You are tasked with writing a program to help Anna with this task. The first input line contains two integers, n (1 ≤ n ≤ 100000) and q (1 ≤ q ≤ 100000), representing the number of guests and the number of queries, respectively. The second line contains n strings, each of which is a unique guest name (a string of lowercase English letters, with a length between 1 and 100). Each of the next q lines contains a name (a string of lowercase English letters) for which Anna wants to check if it is in her guest list. For each query, print \\"YES\\" if the name is in the guest list, otherwise print \\"NO\\". Input Example: ``` 5 3 alice bob charlie diana ella bob frank alice ``` Output Example: ``` YES NO YES ``` Please write a function or program to solve this problem.","solution":"def check_rsvps(n, q, guest_list, queries): guests_set = set(guest_list) results = [] for query in queries: if query in guests_set: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a faraway kingdom, there exists a sage who is the master of potions. The sage has n different types of ingredients stored in his cellar. Each type of ingredient is characterized by its magical essence, which can be positive or negative. To prepare a potion, the sage selects a group of k (where 1 ≤ k ≤ n) ingredients from the cellar that maximizes the potion\'s magical essence. The essence of a potion is defined as the sum of the magical essences of the selected ingredients. You have been asked to help the sage by finding the maximum possible sum of any subset of the given ingredients. The first line of the input contains the number of ingredients n (1 ≤ n ≤ 100,000). The second line contains n integers, where the i-th integer represents the magical essence of the i-th ingredient. Each magical essence is given by an integer ai (|ai| ≤ 1,000). Print a single integer: the maximum possible sum of any subset of the ingredients. # Input ``` 5 3 -2 5 6 -1 ``` # Output ``` 14 ``` # Explanation By selecting ingredients with essences 3, 5, and 6, we get the sum 3 + 5 + 6 = 14, which is the highest possible sum for this set of ingredients.","solution":"def max_possible_sum(n, essences): Returns the maximum possible sum of any subset of given ingredients. :param n: Number of ingredients :param essences: List of integers representing the magical essences of the ingredients :return: The maximum possible sum of any subset of the ingredients. return sum(e for e in essences if e > 0)"},{"question":"In this task, you are required to manage a reservation system for a restaurant. The restaurant takes reservations for various time slots throughout the day, and you need to determine if a new reservation can be accepted without causing a conflict. A reservation is defined by a time slot [start, end], where both start and end are given in 24-hour format without the colon (e.g., 0900 for 9:00 AM, 1330 for 1:30 PM). A reservation, being defined by its start and end times, means that the reservation occupies the entire duration from the start to just before the end time. A conflict occurs if any part of one reservation overlaps with another. Your task is to read in a list of existing reservations and then determine if a new reservation can be added without any overlap. The input starts with an integer t (1 ≤ t ≤ 100), the number of existing reservations. The next t lines each contain two integers start_i and end_i representing the start and end time of the i-th reservation (0 ≤ start_i < end_i ≤ 2359). The final line contains two integers new_start and new_end representing the start and end times of the new reservation. Print \\"Accepted\\" if the new reservation can be added without conflict, or \\"Rejected\\" if there is a conflict with any existing reservation. For example, if there are existing reservations: 1. 0930 1100 2. 1230 1330 3. 1500 1700 And the new reservation is: 4. 0900 1000 The new reservation conflicts with the first existing reservation and should be rejected. **Input:** ``` 3 0930 1100 1230 1330 1500 1700 0900 1000 ``` **Output:** ``` Rejected ```","solution":"def can_accept_new_reservation(t, reservations, new_reservation): new_start, new_end = new_reservation for reservation in reservations: start_i, end_i = reservation if not (new_end <= start_i or new_start >= end_i): return \\"Rejected\\" return \\"Accepted\\""},{"question":"You are assisting an archaeologist with organizing ancient manuscripts. Each manuscript consists of a string of lowercase English letters. The archaeologist has noticed that some manuscripts contain repeated sequences of characters, and they want to identify the longest such sequence in any given string. The task is to write a program that finds the longest substring of a given manuscript string that appears at least twice in the string. If there are multiple such substrings with the same length, return the lexicographically smallest one among them. The first line contains a single integer n (1 ≤ n ≤ 10^6), representing the length of the manuscript string. The second line contains the manuscript string, which is a sequence of n lowercase English letters. Output a single line containing the longest substring that appears at least twice. If no such substring exists, return an empty string. # Example Input ``` 12 bananaapple ``` Output ``` ana ``` Explanation - The longest repeated substrings are \\"ana\\" and \\"app\\". - Since \\"ana\\" is lexicographically smaller than \\"app\\", the output should be \\"ana\\".","solution":"def longest_repeated_substring(n, manuscript): Finds the longest substring that is repeated at least twice. Parameters: n (int): Length of the manuscript string manuscript (str): The manuscript string Returns: str: The longest repeated substring that appears at least twice # Helper function to check for repeated substring of given length def has_repeated_substring_of_length(length): seen = set() for i in range(n - length + 1): substring = manuscript[i:i+length] if substring in seen: return substring seen.add(substring) return \'\' # Binary search on the length of the longest repeated substring left, right = 1, n - 1 longest_substring = \'\' while left <= right: mid = (left + right) // 2 repeated_substring = has_repeated_substring_of_length(mid) if repeated_substring: longest_substring = repeated_substring left = mid + 1 else: right = mid - 1 return longest_substring"},{"question":"Lila is trying to organize her bookshelf. She has n books, each with a distinct thickness. Initially, all the books are stacked in a single pile, but she can perform the following operation any number of times: - Pick any book and place it on the top of another pile. She wants to organize the books such that in each pile, the books are sorted by thickness in increasing order from top to bottom. Given n and the thicknesses of the books in the initial pile, determine the minimum number of piles required to achieve her goal. The first line contains a single integer n (1 ≤ n ≤ 100) — the number of books. The second line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 1000) — the thicknesses of the books in the initial pile, given from the bottom to the top. Print a single integer — the minimum number of piles required. Example: Input: 5 4 2 5 1 3 Output: 2 Explanation: One way to achieve this is to form two piles: - Pile 1: [1, 2, 4] - Pile 2: [3, 5] Now, each pile is sorted by thickness in increasing order. Hence, the answer is 2.","solution":"def min_piles(n, thicknesses): piles = [] for thickness in thicknesses: placed = False for i in range(len(piles)): if piles[i][-1] >= thickness: piles[i].append(thickness) placed = True break if not placed: piles.append([thickness]) return len(piles)"},{"question":"You are given a mathematical expression string which is valid when: 1. It contains only numbers and arithmetic operators (\'+\', \'-\', \'*\', \'/\', \'%\'). 2. It doesn\'t have leading zeros unless the whole number is zero. 3. Its division doesn\'t involve division by zero. 4. It respects operator precedence and associate properties. Your task is to parse this expression and evaluate it, returning the resulting value. The input string will follow these constraints: - The length of the string will be between 1 and 100. - Every number in the string will be in the range 0 to 10^5. - The operators are standard and will not be directly next to each other without numbers in between. **Input Format:** A single line containing the expression string. **Output Format:** A single integer or float representing the evaluated result of the expression. **Examples:** Example 1: Input: ``` 3+5*2 ``` Output: ``` 13 ``` Example 2: Input: ``` 10+20/3 ``` Output: ``` 16.6667 ``` Example 3: Input: ``` 7%4+6*3-10 ``` Output: ``` 15 ``` You may assume that the expression is always valid and well-formed.","solution":"def evaluate_expression(expression): Evaluates a given mathematical expression containing numbers and the operators (+, -, *, /, %). Args: expression (str): A string containing the mathematical expression. Returns: float/int: The result of the evaluated expression. try: # Use Python\'s eval function to evaluate the expression. # `eval` can be dangerous with untrusted input, but we assume valid input per problem constraints result = eval(expression) return result except (ZeroDivisionError, SyntaxError) as e: return str(e) # Return error message if there\'s a division by zero or syntax error"},{"question":"Given n places to plant magical flowers along a straight road, where each place is numbered from 1 to n from west to east, your task is to manage these flowers based on a series of operations. Magical flowers grow in height one meter per day. Each operation will require you to either plant a flower or remove a flower, and after each operation, you will need to determine the maximum height of the tallest flower. The operations are as follows: - \\"1 x h\\" — Plant a flower at position x with initial height h (1 ≤ x ≤ n, h > 0). - \\"2 x\\" — Remove the flower at position x if it exists (1 ≤ x ≤ n). After each operation, output the maximum height of any flower currently planted. If no flowers are planted, output \\"0\\". The input consists of: - An integer n (1 ≤ n ≤ 10^5) — the number of possible positions. - An integer m (1 ≤ m ≤ 2·10^5) — the number of operations. - Next m lines, each containing an operation as described above. Output m integers — each representing the maximum height of the tallest flower after each corresponding operation. Output the numbers separated by spaces. Example: ``` Input: 5 5 1 1 3 1 3 5 2 1 1 2 10 2 3 Output: 3 5 5 10 10 ```","solution":"def manage_flowers(n, m, operations): heights = [0] * (n + 1) # Initialize an array to store heights of flowers max_height = 0 result = [] for operation in operations: op = operation.split() if op[0] == \\"1\\": x = int(op[1]) h = int(op[2]) heights[x] = h if h > max_height: max_height = h elif op[0] == \\"2\\": x = int(op[1]) current_height = heights[x] heights[x] = 0 if current_height == max_height: max_height = max(heights) result.append(max_height) return result"},{"question":"**Task: Finding Special Sequences** Alex is exploring the number sequences and has an interesting problem to solve. She has a list of integers and wants to identify special sequences in the list. A sequence is considered special if it is strictly increasing and forms a contiguous segment from the list. A sequence is strictly increasing if each element is greater than the preceding one. For example, in the sequence [1, 3, 5, 7], each element is greater than the one before it. The first input line contains a single integer n (1 ≤ n ≤ 1000) — the number of integers in the list. The second line contains n space-separated integers a1, a2, ..., an representing the list of numbers (−10^6 ≤ ai ≤ 10^6). Your task is to write a program that finds the length of the longest special sequence in the list. # Input - The first line contains a single integer n (1 ≤ n ≤ 1000). - The second line contains n space-separated integers representing the list a. # Output - Print a single integer, the length of the longest special sequence. # Example **Input:** ``` 6 1 2 2 3 4 2 ``` **Output:** ``` 3 ``` In the example provided, the longest special sequence is [2, 3, 4], which has a length of 3. # Note In the list given in the example, there are several strictly increasing sequences: - [1, 2] - [2, 3, 4] Remember, the sequences are contiguous segments from the list.","solution":"def longest_special_sequence(n, a): Returns the length of the longest strictly increasing contiguous sequence in the list. :param n: Length of the list :param a: List of integers :return: Length of the longest special sequence if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if a[i] > a[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Consider an array of integers and the need to find a subarray where the sum of elements is maximized, but with a constraint: the subarray should not contain any two adjacent elements from the original array. Given an array `arr` of length `n` where 1 ≤ n ≤ 2 * 10^5, find the maximum sum of a subarray where no two picked elements are adjacent in the original array. Input: - The first line contains a single integer, `n` — the length of the array. - The second line contains `n` space-separated integers, the elements of the array. Output: - Output a single integer, the maximum sum of the subarray which satisfies the given condition. Example: ``` Input: 5 3 2 5 10 7 Output: 15 ``` Explanation: We can pick the elements 3, 5, and 7, resulting in the maximum sum 15, since picking 10 would violate the no-adjacency constraint.","solution":"def max_sum_non_adjacent(arr): Returns the maximum sum of non-adjacent elements from the array `arr`. if not arr: return 0 n = len(arr) if n == 1: return arr[0] # Initialize values for the first two elements prev1 = max(0, arr[0]) # Maximum sum including the first element prev2 = max(prev1, arr[1]) if n > 1 else prev1 # Process the rest of the array for i in range(2, n): current = max(prev2, prev1 + arr[i]) prev1, prev2 = prev2, current return prev2"},{"question":"You are developing a web service that processes client orders and each order consists of multiple items. Each item is identified by a unique item ID and is associated with a particular quantity. The web service receives multiple requests from clients to update the quantities of items in their orders. Each request can either increase or decrease the quantity of an item. You need to implement a function to process these update requests and compute the final quantities of all items after all requests have been processed. The first line of the input contains an integer n (1 leq n leq 10^5) — the number of initial items. The second line of the input contains n integers q_i (1 leq q_i leq 10^9) — the initial quantities of the items. The third line of the input contains an integer m (1 leq m leq 10^5) — the number of update requests. Each of the next m lines contains three values: an integer item id, a character op (\'+\' or \'-\') and an integer num (1 leq num leq 10^6). - If the operation is \'+\', add num to the quantity of the item with ID item id. - If the operation is \'-\', subtract num from the quantity of the item with ID item id. Assume that all item IDs are valid (i.e., between 1 and n) and that the subtraction operation will not result in a negative quantity. Output the final quantities of all items in the same order as the initial quantities. # Example **Input:** ``` 4 100 200 300 400 5 1 + 50 2 - 30 3 + 10 4 - 50 2 + 100 ``` **Output:** ``` 150 270 310 350 ``` **Explanation:** - Initially, quantities are [100, 200, 300, 400]. - After the first request: [150, 200, 300, 400] (adding 50 to item 1). - After the second request: [150, 170, 300, 400] (subtracting 30 from item 2). - After the third request: [150, 170, 310, 400] (adding 10 to item 3). - After the fourth request: [150, 170, 310, 350] (subtracting 50 from item 4). - After the final request: [150, 270, 310, 350] (adding 100 to item 2).","solution":"def process_orders(initial_quantities, updates): Processes item quantity update requests and returns the final quantities. :param initial_quantities: List of initial quantities for items. :param updates: List of updates where each update is a tuple (item_id, operation, num). - item_id: int, the ID of the item to be updated. - operation: char, either \'+\' or \'-\' indicating the operation. - num: int, the quantity to add or subtract. :return: List of final quantities of items after processing all updates. quantities = initial_quantities[:] for item_id, operation, num in updates: if operation == \'+\': quantities[item_id - 1] += num elif operation == \'-\': quantities[item_id - 1] -= num return quantities"},{"question":"You are given an array of integers representing daily temperatures. Return an array of integers answers, such that for each day in the input, answer[i] is the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. **Input:** - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of days. - The second line contains n integers T1, T2, ..., Tn (30 ≤ Ti ≤ 100) — the daily temperatures. **Output:** - Print n integers, the i-th of which should be the number of days until a warmer temperature. If there is no such day, print 0 for that day. **Example:** **Input:** ``` 8 73 74 75 71 69 72 76 73 ``` **Output:** ``` 1 1 4 2 1 1 0 0 ``` The processing needs to be efficient to handle the constraints.","solution":"def daily_temperatures(temperatures): n = len(temperatures) answer = [0] * n stack = [] for i in range(n): while stack and temperatures[stack[-1]] < temperatures[i]: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"Tom works at a warehouse and is trying to optimize the layout for faster item retrievals. To help solve this problem, Tom has recorded the frequency of each item being picked up. Tom is interested in analyzing how well-balanced the item retrievals are in his warehouse by finding the median frequency of item pickups. The median is the value separating the higher half from the lower half of a data sample. If the number of data points is odd, the median is the middle data point. If the number of data points is even, the median is the average of the two middle values. Write a function to compute the median frequency of items being picked from the warehouse. Given a list of positive integers representing the frequencies of item pickups, calculate and return the median. The input consists of a single list of positive integers separated by spaces. - 1 leq text{{length of list}} leq 10^7 - 1 leq text{{value of each frequency}} leq 10^6 Example of inputs and outputs are as follows: ``` Input: 2 3 1 6 5 Output: 3 Input: 2 3 3 4 Output: 3 Input: 10 9 3 2 5 6 Output: 5.5 ``` You need to ensure your function is efficient and can handle the upper limits of the input sizes. If the list has no items, output \\"IMPOSSIBLE\\" (quotes for clarity).","solution":"def find_median_frequency(freq): Returns the median frequency from the given list of frequencies. if not freq: return \\"IMPOSSIBLE\\" freq.sort() n = len(freq) if n % 2 == 1: return freq[n // 2] else: return (freq[n // 2 - 1] + freq[n // 2]) / 2"},{"question":"Anna and Beth are playing a training simulation where they encounter different types of challenges. Each challenge is represented by an integer, and Anna and Beth have different skills to address these challenges. Anna can complete a challenge if the challenge value is divisible by any number in her skill set, while Beth can complete a challenge if the challenge value is divisible by any number in her skill set. Anna\'s skill set contains a numbers, and Beth\'s skill set contains b numbers. The challenge value is given as c. Each challenge must be checked to see if Anna, Beth, or both can complete it. If both Anna and Beth can complete the challenge, it is considered that both of them complete it simultaneously. The first line contains three integers a, b, c (1 ≤ a, b ≤ 100, 1 ≤ c ≤ 109) — the sizes of Anna\'s skill set, Beth\'s skill set, and the challenge value, respectively. The second line contains a integers representing Anna\'s skill set. The third line contains b integers representing Beth\'s skill set. Print a single line containing \\"Anna\\", if only Anna can complete the challenge, \\"Beth\\", if only Beth can complete the challenge, or \\"Both\\", if both of them can complete it simultaneously. For example: Input: 3 2 15 2 3 5 3 7 Output: Both In this example, Anna\'s skills are 2, 3, and 5, while Beth\'s skills are 3 and 7. The challenge value is 15. Anna can complete the challenge because 15 is divisible by 3 and 5. Beth can also complete the challenge because 15 is divisible by 3. Therefore, both can complete the challenge.","solution":"def who_can_complete_challenge(a, b, c, anna_skills, beth_skills): Determines who can complete the challenge. Parameters: a (int): Number of skills Anna has b (int): Number of skills Beth has c (int): Challenge value anna_skills (list): List of Anna\'s skills beth_skills (list): List of Beth\'s skills Returns: str: \\"Anna\\", \\"Beth\\", or \\"Both\\" based on who can complete the challenge anna_can_complete = any(c % skill == 0 for skill in anna_skills) beth_can_complete = any(c % skill == 0 for skill in beth_skills) if anna_can_complete and beth_can_complete: return \\"Both\\" elif anna_can_complete: return \\"Anna\\" elif beth_can_complete: return \\"Beth\\" else: return \\"None\\""},{"question":"A tech company is looking to optimize their network\'s data flow. They have a network consisting of n servers and m directed cables connecting some pairs of servers. The company\'s CTO wants to ensure that there is at least one path to send data from any one server to any other server, but to minimize latency, the total number of cables needed should be minimized. This problem can be visualized as finding the smallest number of cables to be added to make the network strongly connected (i.e., there\'s a directed path between any pair of servers in both directions). Your task is to write a program that determines the minimum number of additional cables required to make the network strongly connected. You are given n servers and m directed cables, where each cable connects two servers and carries data in one direction only. If the network is already strongly connected, your program should return 0; otherwise, it should return the minimum number of additional cables needed. Input: The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000), the number of servers and the number of cables, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), denoting that there is a directed cable from server u to server v. Output: Print a single integer - the minimum number of additional cables required to make the network strongly connected. Example: Input: 4 2 1 2 3 4 Output: 2 Explanation: One possible solution is to add the cables (2 → 3) and (4 → 1) to create the following network: 1 → 2 → 3 → 4 → 1 As a result, the network becomes strongly connected with just two additional cables. Note that if there is more than one valid solution, any of them is acceptable.","solution":"def find_min_additional_cables(n, m, edges): from collections import defaultdict, deque def kosaraju(n, adj_list, reverse_adj_list): def dfs(v, visited, stack): visited[v] = True for u in adj_list[v]: if not visited[u]: dfs(u, visited, stack) stack.append(v) def reverse_dfs(v, visited, component): visited[v] = True component.append(v) for u in reverse_adj_list[v]: if not visited[u]: reverse_dfs(u, visited, component) visited = [False] * (n + 1) stack = [] for i in range(1, n + 1): if not visited[i]: dfs(i, visited, stack) visited = [False] * (n + 1) sccs = [] while stack: node = stack.pop() if not visited[node]: component = [] reverse_dfs(node, visited, component) sccs.append(component) return sccs adj_list = defaultdict(list) reverse_adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) reverse_adj_list[v].append(u) sccs = kosaraju(n, adj_list, reverse_adj_list) if len(sccs) == 1: return 0 in_degrees = {i: 0 for i in range(1, n + 1)} out_degrees = {i: 0 for i in range(1, n + 1)} for u in adj_list: for v in adj_list[u]: if any(u in scc and v in scc for scc in sccs): continue out_degrees[u] += 1 in_degrees[v] += 1 in_count = out_count = 0 for comp in sccs: root = comp[0] if in_degrees[root] == 0: in_count += 1 if out_degrees[root] == 0: out_count += 1 return max(in_count, out_count) # Example usage: n = 4 m = 2 edges = [(1, 2), (3, 4)] print(find_min_additional_cables(n, m, edges)) # Output: 2"},{"question":"A company has conducted a survey by interviewing n participants and collecting their responses on various topics. Each participant has provided feedback in the form of a list of integers, where each integer represents their rating on a specific topic. The company wants to analyze the ratings by identifying the most frequent rating given by the participants. If multiple ratings have the same highest frequency, select the smallest rating among them. Write a function that takes a list of integers as input, where each integer represents a rating given by the participants, and returns the rating that appears most frequently. If there are multiple ratings with the same highest frequency, return the smallest one. Function Signature: ```python def most_frequent_rating(ratings: List[int]) -> int: ``` # Input: - A list of integers, `ratings` (1 ≤ len(ratings) ≤ 100,000), where each integer (1 ≤ rating ≤ 10) represents the rating given by the participants. # Output: - An integer representing the most frequent rating. # Example: ```python >>> most_frequent_rating([1, 2, 2, 3, 3, 3, 4, 4, 4]) 3 >>> most_frequent_rating([4, 4, 2, 2, 3, 5, 5, 2, 6]) 2 >>> most_frequent_rating([1, 2, 2, 3, 3, 1]) 1 ``` # Explanation: In the first example, ratings 3 and 4 both have a frequency of 3, but 3 is the smallest rating. In the second example, rating 2 appears most frequently (3 times). In the third example, ratings 1 and 2 both have a frequency of 2, but 1 is the smallest rating.","solution":"from typing import List def most_frequent_rating(ratings: List[int]) -> int: Returns the rating that appears most frequently in the list. If multiple ratings have the same highest frequency, returns the smallest one. from collections import Counter rating_counts = Counter(ratings) # Count the frequency of each rating max_count = max(rating_counts.values()) # Find the maximum frequency # Find the smallest rating with the maximum frequency most_frequent_ratings = [rating for rating, count in rating_counts.items() if count == max_count] return min(most_frequent_ratings)"},{"question":"You are given a string ( s ) consisting of lowercase English letters. In one move you can choose any character in the string and replace it with any other lowercase English letter. Your task is to calculate the minimum number of moves required to make all characters in the string distinct. The first line of the input contains an integer ( n ) ((1 leq n leq 100 )) — the length of the string. The second line of the input contains a string ( s ) of length ( n ) consisting of lowercase English letters. Print one integer — the minimum number of moves required to make all characters in the string distinct.","solution":"def min_moves_to_distinct(n, s): unique_chars = set(s) if n > 26: return -1 # Since there are only 26 different letters. return n - len(unique_chars)"},{"question":"In a faraway land, there is a peculiar game being played by two wizards, Gandalf and Saruman. The game is played on a one-dimensional board, consisting of N slots in a row, numbered 1 through N. Initially, there are M magical stones placed in these slots, and each stone has an associated power level represented by an integer. A slot can contain multiple stones. The rules of the game are as follows: 1. Gandalf always makes the first move, followed by Saruman, and then they continue to alternate turns. 2. During a player\'s turn, they must remove a stone with the highest power level from any slot. If there are multiple stones with the same highest power level, the player can choose any one of them. 3. The player who is unable to make a move (i.e., after all stones are removed) loses the game. Both wizards play optimally, with the goal of not losing the game. Given the initial configuration of the board, determine which wizard will win the game. # Input - The first line of the input contains two integers N and M (1 ≤ N, M ≤ 100), representing the number of slots and the number of stones, respectively. - The second line contains M integers, where each integer represents the power level of a stone placed in one of the N slots. Each power level is between 1 and 100, inclusive. # Output - Print a single line containing \\"Gandalf\\" or \\"Saruman\\" (without the quotes), depending on the winner of the game. # Example Input ``` 5 3 4 2 7 ``` Output ``` Saruman ``` Explanation Initially, the stones are [4, 2, 7]. - Gandalf removes the stone with power 7. - Now the remaining stones are [4, 2]. - Saruman removes the stone with power 4. - Now the remaining stone is [2]. - Gandalf removes the stone with power 2. Since there are no stones left for Saruman to remove, he will lose the game. Therefore, \\"Saruman\\" wins.","solution":"def determine_winner(N, M, stones): Determine the winner of the game given the initial state of the board. Parameters: N (int): The number of slots on the board. M (int): The number of magical stones. stones (list of int): A list of integers representing the power levels of the stones. Returns: str: \\"Gandalf\\" if Gandalf wins, \\"Saruman\\" if Saruman wins. if M % 2 == 0: return \\"Gandalf\\" else: return \\"Saruman\\""},{"question":"In this problem, you are given two lists of numbers, `A` and `B`. Your task is to determine whether there exists a permutation of the list `B` such that when both lists are aligned, the absolute difference between each corresponding pair of elements from `A` and the permutation of `B` is at most a given threshold `k`. Formally, given two lists `A` and `B` of length `n` and an integer `k`, check if there exists a permutation `P` of `B` such that for all `i` (where `0 ≤ i < n`), `|A[i] - P[i]| ≤ k`. If such a permutation exists, return \\"YES\\". Otherwise, return \\"NO\\". # Input: - The first line contains two integers `n` and `k` (`1 ≤ n ≤ 100, 0 ≤ k ≤ 10^9`), the length of the lists and the maximum allowed difference. - The second line contains `n` integers representing the list `A`. - The third line contains `n` integers representing the list `B`. # Output: - Output \\"YES\\" if there exists a permutation of `B` that satisfies the condition, otherwise output \\"NO\\". # Example: Input: ``` 4 5 1 8 12 5 9 2 8 4 ``` Output: ``` YES ``` Input: ``` 3 1 3 5 7 10 6 4 ``` Output: ``` NO ``` # Notes: In the first example, one such permutation of `B` could be `[4, 9, 8, 2]`: - `|1 - 4| ≤ 5` - `|8 - 9| ≤ 5` - `|12 - 8| ≤ 5` - `|5 - 2| ≤ 5` Thus, the output is \\"YES\\". In the second example, no permutation of `B` can satisfy the conditions for all elements of `A`. Thus, the output is \\"NO\\". In this problem, you need to consider all possible permutations of list `B` and check the pairwise differences to find if the given condition holds. The constraints allow for an optimal or exact approach without time complexity issues, given the constraints.","solution":"import itertools def check_permutation_exists(n, k, A, B): Determines if there exists a permutation of B such that for all i (0 ≤ i < n), |A[i] - P[i]| ≤ k, where P is the permutation of B. Parameters: n (int): Length of the lists A and B. k (int): Maximum allowed difference. A (list): List of integers A. B (list): List of integers B. Returns: str: \'YES\' if such a permutation exists, \'NO\' otherwise. for permutation in itertools.permutations(B): if all(abs(A[i] - permutation[i]) <= k for i in range(n)): return \\"YES\\" return \\"NO\\""},{"question":"Imagine you have a special two-dimensional grid consisting of only 1s and 0s. You want to find out the maximum \\"plus\\" sign possible within this grid, which is defined as follows: - A \\"plus\\" sign is centered at a 1-cell and extends outwards in all four directions (left, right, up, down) with equal lengths. - The length of a plus sign is the number of cells on one arm extending from the center. Given the grid\'s size `n x n` and the grid values, your task is to compute the maximum plus sign that can be formed. Input: The first line contains the integer n (1 ≤ n ≤ 500), the size of the grid. The next n lines each contain n integers (either 0 or 1). Output: Print a single integer, the maximum length of the \\"plus\\" sign that can be achieved in the given grid. Example: Input: 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Output: 2 Explanation: The largest plus sign has length 2 (arms extending 2 cells from the center).","solution":"def max_plus_sign(n, grid): if n == 0: return 0 left = [[0] * n for _ in range(n)] right = [[0] * n for _ in range(n)] up = [[0] * n for _ in range(n)] down = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): if grid[i][j] == 1: left[i][j] = 1 + (left[i][j-1] if j > 0 else 0) up[i][j] = 1 + (up[i-1][j] if i > 0 else 0) for i in range(n-1, -1, -1): for j in range(n-1, -1, -1): if grid[i][j] == 1: right[i][j] = 1 + (right[i][j+1] if j < n-1 else 0) down[i][j] = 1 + (down[i+1][j] if i < n-1 else 0) max_len = 0 for i in range(n): for j in range(n): if grid[i][j] == 1: length = min(left[i][j], right[i][j], up[i][j], down[i][j]) if length > max_len: max_len = length return max_len - 1 if max_len > 0 else 0"},{"question":"You are given an integer array representing the amounts of daily energy consumption by a household over the course of a month. Each element in the array corresponds to the energy consumed on a particular day. Your task is to determine if there exist two non-overlapping subarrays of at least length `m`, such that the sum of the elements in both subarrays is the same. Your function should return: - `True` if such subarrays exist, - `False` otherwise. **Function Signature:** ```python def has_equal_sum_subarrays(arr: List[int], m: int) -> bool: ``` # Input - `arr`: a list of integers where each integer represents energy consumption on a particular day. The length of the list `arr` will be between 1 and 1000. - `m`: an integer representing the minimum length of the subarrays. `1 <= m <= len(arr)`. # Output - A boolean value (`True` or `False`). # Example ```python arr = [2, 3, 4, 5, 1, 2, 3, 1, 1, 2, 3] m = 3 has_equal_sum_subarrays(arr, m) => True ``` # Explanation In the example given, there exist two non-overlapping subarrays with a minimum length of `3` that have the same sum: - The subarray [2, 3, 4] has a sum of 9. - Another subarray [1, 2, 6] also has a sum of 9. Therefore, the function returns `True`. # Constraints - Ensure the function runs efficiently within the bounds of the input size. # Notes - Consider edge cases such as when the array length is exactly `m`. - Optimize for performance keeping in mind the upper limit of the input size.","solution":"def has_equal_sum_subarrays(arr, m): Determines if there exist two non-overlapping subarrays with at least length m such that their sums are equal. # If the length of the array is less than 2 * m, it\'s impossible to get two non-overlapping subarrays if len(arr) < 2 * m: return False # Dictionary to store sum of all subarrays of length exactly m sum_dict = {} # Iterate over all possible subarrays of length m for i in range(len(arr) - m + 1): sub_sum = sum(arr[i:i + m]) if sub_sum in sum_dict: # Ensure non-overlapping condition for prev_start in sum_dict[sub_sum]: if abs(prev_start - i) >= m: return True else: sum_dict[sub_sum] = [] sum_dict[sub_sum].append(i) return False"},{"question":"In a digital marketplace, there are n products and m deals available. Each deal either offers a discount on a single product or gives a discount if two specific products are bought together. Your task is to determine the maximum possible discount a customer can get if they can avail of at most one deal involving two products and any number of deals involving single products. It is important to note that a deal involving two products still allows the use of deals on the individual products. You are provided with the following details: - The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100), representing the number of products and the number of deals respectively. - The second line contains n integers, where the i-th integer represents the price of the i-th product. - Each of the next m lines describes a deal in one of two possible formats: - \\"single x d\\" (1 ≤ x ≤ n, 1 ≤ d ≤ 100) - meaning a discount of d on product x. - \\"pair x y d\\" (1 ≤ x, y ≤ n, x ≠ y, 1 ≤ d ≤ 100) - meaning a discount of d if products x and y are bought together. Output a single integer: the maximum possible discount the customer can get. Example: Input: ``` 3 4 100 150 200 single 1 20 single 2 30 pair 1 2 50 pair 1 3 70 ``` Output: ``` 120 ```","solution":"def max_discount(n, m, product_prices, deals): # Initialize discounts for individual products individual_discounts = [0] * n max_pair_discount = 0 for deal in deals: parts = deal.split() if parts[0] == \'single\': product_index = int(parts[1]) - 1 discount = int(parts[2]) individual_discounts[product_index] = max(individual_discounts[product_index], discount) elif parts[0] == \'pair\': product_index_1 = int(parts[1]) - 1 product_index_2 = int(parts[2]) - 1 discount = int(parts[3]) max_pair_discount = max(max_pair_discount, discount) # Calculate maximum discounts from individual deals max_individual_discount = sum(individual_discounts) # The result is the sum of all individual maximum discounts plus the best pair discount return max_individual_discount + max_pair_discount"}]'),A={name:"App",components:{PoemCard:j},data(){return{searchQuery:"",visibleCount:4,poemsData:Y,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},N={class:"search-container"},S={class:"card-container"},F={key:0,class:"empty-state"},z=["disabled"],L={key:0},R={key:1};function P(r,e,h,m,s,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",N,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",S,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+u(s.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",L,"See more"))],8,z)):l("",!0)])}const D=d(A,[["render",P],["__scopeId","data-v-d89e1a79"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/35.md","filePath":"deepseek/35.md"}'),C={name:"deepseek/35.md"},G=Object.assign(C,{setup(r){return(e,h)=>(n(),i("div",null,[x(D)]))}});export{B as __pageData,G as default};
