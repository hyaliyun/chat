import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as u,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,m,r,a){return n(),i("div",k,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-01096c43"]]),S=JSON.parse('[{"question":"A gaming tournament is being held where each player competes in multiple rounds. At the end of the tournament, each player’s highest score from any round is considered as their final score. You are provided with the scores of N players over M rounds. Your task is to determine the final score for each player. ------ Input Format ------ - The first line of input contains two integers, N (number of players) and M (number of rounds). - The next N lines contain M integers each, representing the scores of a player in each round. ------ Output Format ------ For each player, output their final score (the highest score achieved in any round). ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ M ≤ 100 0 ≤ score le 10000 ----- Sample Input 1 ------ 3 4 10 35 20 15 40 20 50 30 25 30 20 40 ----- Sample Output 1 ------ 35 50 40 ----- Explanation 1 ------ Player 1 scores: [10, 35, 20, 15] => Highest score: 35 Player 2 scores: [40, 20, 50, 30] => Highest score: 50 Player 3 scores: [25, 30, 20, 40] => Highest score: 40","solution":"def final_scores(n, m, scores): Determines the final score for each player. :param n: Number of players :param m: Number of rounds :param scores: List of scores for each player in each round :return: List of final scores for each player final_scores = [] for player_scores in scores: final_scores.append(max(player_scores)) return final_scores"},{"question":"Given an integer array `arr` and a number of operations `q`. In each operation, you are given two indices `l` and `r` (1-based) and a value `val`. You need to add `val` to every element in the subarray from index `l` to index `r` (inclusive) and then return the sum of all elements in the array. The task is to perform all the operations efficiently and return the resulting sums for each operation. Input The first line contains two integers `n` (1 ≤ n ≤ 100,000) and `q` (1 ≤ q ≤ 100,000) representing the size of the array and the number of operations respectively. The second line contains `n` space-separated integers representing the initial elements of the array. Each of the next `q` lines contains three space-separated integers `l`, `r`, and `val` describing an operation. Output For each operation, output a single line containing the sum of the array after performing the operation. Example Input: 5 3 1 2 3 4 5 1 3 10 2 5 -3 3 3 5 Output: 40 37 37 Explanation: Initial array: [1, 2, 3, 4, 5] After 1st operation: [11, 12, 13, 4, 5], sum = 11+12+13+4+5 = 45 After 2nd operation: [11, 9, 10, 1, 2], sum = 11+9+10+1+2 = 33 After 3rd operation: [11, 9, 15, 1, 2], sum = 11+9+15+1+2 = 38","solution":"def perform_operations(n, q, arr, operations): Perform operations on the array and return the sum of the array after each operation. results = [] for op in operations: l, r, val = op for i in range(l-1, r): # Convert to 0-based index arr[i] += val results.append(sum(arr)) return results"},{"question":"You are given a list of integers and a target sum. Your task is to determine if there are two distinct integers in the list that add up to the target sum. If such a pair exists, return `True`; otherwise, return `False`. **Input:** - An integer `n`, the number of elements in the list. - A list of `n` integers. - An integer `target`, the target sum. **Output:** - A boolean value (`True` or `False`). **Example:** SAMPLE INPUT: 5 [2, 7, 11, 15, 1] 9 SAMPLE OUTPUT: True Explanation: For the given list [2, 7, 11, 15, 1] and target sum 9, the pair of integers (2, 7) sums up to the target sum 9. Thus, the output is `True`.","solution":"def has_two_sum(n, numbers, target): Determines if there are two distinct integers in the list that add up to the target sum. Args: n (int): Number of elements in the list. numbers (list): List of integers. target (int): Target sum. Returns: bool: True if there are two distinct integers that add up to the target sum, False otherwise. seen = set() for num in numbers: if target - num in seen: return True seen.add(num) return False"},{"question":"Design a system that handles efficient querying and updates on a dynamic list of numbers. Specifically, you should implement a class `DynamicRangeSum` which supports the following operations: 1. **Add a number** to the list. This function is called `add_number` and takes an integer as input. 2. **Remove a number** from a specified position in the list if the position is valid. This function is called `remove_number` and takes an integer position as input. 3. **Query the sum** of numbers between two specified indices (inclusive). This function is called `range_sum` and takes two integers representing the start and end indices as input. # Input The following operations should be supported: - `\\"add_number x\\"`: Add the number `x` to the list. `x` is an integer (1 ≤ x ≤ 10^6). - `\\"remove_number p\\"`: Remove the number at position `p` from the list (0-based index). `p` is an integer (0 ≤ p < current size of the list). - `\\"range_sum a b\\"`: Return the sum of numbers between indices `a` and `b` (0 ≤ a ≤ b < current size of the list). Initially, the list is empty. # Output For each `\\"range_sum a b\\"` operation, return the sum of the elements from index `a` to `b` in the list. # Constraints - The total number of operations (queries + additions + removals) will not exceed 5000. - List elements and results of range sums will fit within the bounds of a standard integer. # Example ```plaintext Input 7 add_number 5 add_number 3 add_number 8 range_sum 0 2 remove_number 1 range_sum 0 1 add_number 1 range_sum 1 2 Output 16 13 9 ``` In this example: - First, we add numbers 5, 3, and 8 to the list. - The range sum query from index 0 to 2 (inclusive) returns 16 (5+3+8). - Next, we remove the number at position 1, resulting in the list [5, 8]. - Querying the sum from index 0 to 1 now returns 13 (5+8). - Adding the number 1 results in the list [5, 8, 1]. - Finally, querying the sum from index 1 to 2 returns 9 (8+1).","solution":"class DynamicRangeSum: def __init__(self): self.numbers = [] def add_number(self, x): self.numbers.append(x) def remove_number(self, p): if 0 <= p < len(self.numbers): self.numbers.pop(p) def range_sum(self, a, b): if 0 <= a <= b < len(self.numbers): return sum(self.numbers[a:b+1]) return 0"},{"question":"You are given an integer array and multiple ranges. For each range, you need to calculate the sum of the elements in that range. Input: The first line contains two integers, N and Q, where N is the number of elements in the array, and Q is the number of ranges. The second line contains N space-separated integers, representing the elements of the array. The next Q lines each contain two integers L and R, which are the range indices (1-based) for which you need to find the sum. Output: For each range, print the sum of the elements in that range. Constraints: 1 ≤ N, Q ≤ 10^5 1 ≤ Array elements ≤ 10^3 1 ≤ L ≤ R ≤ N SAMPLE INPUT 5 3 10 20 30 40 50 1 3 2 4 1 5 SAMPLE OUTPUT 60 90 150","solution":"def range_sums(n, q, arr, queries): prefix_sums = [0] * (n + 1) # Creating prefix sums for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] results = [] # Computing sums for each query range for l, r in queries: sum_in_range = prefix_sums[r] - prefix_sums[l - 1] results.append(sum_in_range) return results"},{"question":"In Scala, create a class `PathNavigator` that helps navigate through a coordinate plane based on a series of commands. The class should handle 2D coordinates starting from an initial position (x=0, y=0). Each command corresponds to moving a certain number of steps in a particular direction (\'N\', \'S\', \'E\', \'W\' for North, South, East, and West respectively). Implement the following methods: 1. `move(command: String, steps: Int): Unit` - Moves the position in the given direction (\'N\', \'S\', \'E\', \'W\') by the specified number of steps. 2. `getPosition: (Int, Int)` - Returns the current position as a tuple (x, y). 3. `distanceFromOrigin: Double` - Returns the Euclidean distance from the initial position (0,0). Here is an example of how your class should behave: ``` val navigator = new PathNavigator navigator.move(\\"N\\", 5) navigator.move(\\"E\\", 3) navigator.getPosition // Returns (3, 5) navigator.distanceFromOrigin // Returns sqrt(34) which is approximately 5.83 navigator.move(\\"S\\", 3) navigator.move(\\"W\\", 1) navigator.getPosition // Returns (2, 2) navigator.distanceFromOrigin // Returns sqrt(8) which is approximately 2.83 ``` Make sure to handle invalid commands gracefully by ignoring them and not changing the current position.","solution":"class PathNavigator: def __init__(self): self.x = 0 self.y = 0 def move(self, command: str, steps: int): if command == \'N\': self.y += steps elif command == \'S\': self.y -= steps elif command == \'E\': self.x += steps elif command == \'W\': self.x -= steps def getPosition(self): return (self.x, self.y) def distanceFromOrigin(self): return (self.x**2 + self.y**2)**0.5"},{"question":"Alex is given an array of integers. He wants to modify the array by performing operations to make all elements equal. In one operation, Alex can increase any element of the array by 1. Your task is to find the minimum number of operations required to make all elements of the array equal. ------ Input Format ------ - The first line contains an integer T, the number of test cases. The test cases follow. - The first line of each test case contains an integer N, the number of elements in the array. - The second line of each test case contains N integers, the elements of the array. ------ Output Format ------ For each test case, output the minimum number of operations required to make all elements equal. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9 for all 1 ≤ i ≤ N ----- Sample Input 1 ------ 2 3 1 2 3 4 1 1 1 1 ----- Sample Output 1 ------ 3 0 ----- Explanation 1 ------ Test Case 1: Alex can perform the following operations to make all elements equal: - Increase the first element by 2: [3, 2, 3] - Increase the second element by 1: [3, 3, 3] Hence, the minimum number of operations required is 3. Test Case 2: All elements are already equal, so 0 operations are needed.","solution":"def min_operations_to_equal_elements(test_cases): Returns the minimum number of operations required to make all elements of each array in the list of test cases equal. results = [] for case in test_cases: n, arr = case max_value = max(arr) operations = sum(max_value - x for x in arr) results.append(operations) return results def read_input(input_text): Parses the input text and returns a list of test cases. lines = input_text.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) arr = list(map(int, lines[index + 1].strip().split())) test_cases.append((N, arr)) index += 2 return test_cases def format_output(results): Formats the output result list into a string. return \'n\'.join(map(str, results))"},{"question":"You are given a list of n integers and an integer k. Your task is to determine if there exists a pair of indices i, j (1 ≤ i < j ≤ n) such that the sum of the elements at these indices is equal to k. Input The first line contains two integers n and k (2 ≤ n ≤ 100000, -10^9 ≤ k ≤ 10^9). The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) representing the list of integers. Output Print \\"YES\\" if there exist such a pair (i, j), otherwise print \\"NO\\". Example Input 5 9 1 5 3 4 6 Output YES Input 5 10 1 2 3 4 5 Output NO","solution":"def exists_pair_with_sum(n, k, arr): Determines if there exists a pair of indices i, j (1 ≤ i < j ≤ n) such that the sum of the elements at these indices is equal to k. :param n: int, the number of integers in the list :param k: int, the target sum :param arr: list of int, the list of integers :return: str, \\"YES\\" if such a pair exists, otherwise \\"NO\\" seen = set() for number in arr: if k - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"Write a function named `secondLargest` that takes an array of integers as input and returns the second largest number in the array. If the array contains fewer than two unique numbers, the function should return `null`. The function should preserve the order of the original array. For example: - `secondLargest([3, 1, 4, 4, 5, 2])` should return `4`. - `secondLargest([7, 7, 7])` should return `null`. - `secondLargest([10, 5, 10])` should return `5`.","solution":"def secondLargest(nums): Returns the second largest number in the list nums. If there are fewer than two unique numbers, returns None. unique_nums = list(set(nums)) if len(unique_nums) < 2: return None unique_nums.sort(reverse=True) return unique_nums[1]"},{"question":"You are given a string SS consisting of lowercase English letters. A palindromic permutation of this string is a rearrangement of its characters that form a palindrome. Your task is to determine whether any permutation of the string can form a palindrome. If it is possible, return \\"YES\\", otherwise return \\"NO\\". -----Input----- - The first line of the input contains a single integer TT denoting the number of test cases. The description of TT test cases follows. - The first line of each test case contains the string SS which consists of lowercase English letters. -----Output----- For each test case, print a single line containing \\"YES\\" if any permutation of the string can form a palindrome, otherwise print \\"NO\\". -----Constraints----- - 1≤T≤1001 le T le 100 - 1≤|S|≤10,0001 le |S| le 10,000 -----Example Input----- 3 aabb abcba abcd -----Example Output----- YES YES NO","solution":"def can_form_palindromic_permutation(s): Determines if any permutation of the string s can form a palindrome. Args: s (str): The input string consisting of lowercase English letters. Returns: str: \\"YES\\" if any permutation of the string can form a palindrome, otherwise \\"NO\\". from collections import Counter char_count = Counter(s) odd_counts = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd count if odd_counts > 1: return \\"NO\\" return \\"YES\\" def check_palindromic_permutations(t, test_cases): Processes multiple test cases and determines for each if a palindromic permutation is possible. Args: t (int): Number of test cases. test_cases (list of str): List of input strings for each test case. Returns: list of str: List of results (\\"YES\\" or \\"NO\\") for each test case. results = [] for s in test_cases: results.append(can_form_palindromic_permutation(s)) return results"},{"question":"In the kingdom of Westeros, the master of coin Tyrion Lannister is trying to optimize the storage capacity in the royal warehouse. The warehouse consists of a sequence of contiguous storage compartments. Each compartment can store a certain amount of units of goods. However, some compartments are already filled to partial capacity, and the king wants to distribute the goods optimally among the available compartments to maximize the storage usage. You are given an array of integers representing the storage units in each compartment. You are also given a certain number of goods to be distributed across these compartments. A compartment cannot exceed its maximum capacity. Your task is to determine if it is possible to distribute all the given goods among the compartments without exceeding their capacities. Input - The first line contains an integer, T, denoting the number of test cases. - For each test case, the first line contains two space-separated integers, N (the number of compartments) and G (the number of units of goods to be distributed). - The second line contains N space-separated integers representing the maximum capacity of each compartment. - The third line contains N space-separated integers representing the current utilization of each compartment. Output For each test case, print \\"YES\\" if it is possible to distribute all the goods among the compartments, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 0 ≤ G ≤ 1000000 0 ≤ capacity[i] ≤ 100000 0 ≤ filled[i] ≤ capacity[i] Example Input: 2 5 20 10 20 30 40 50 5 10 15 20 25 3 15 10 5 20 8 3 15 Output: YES NO Explanation Example case 1: The maximum capacity and current utilization of compartments are given. Max capacities: 10, 20, 30, 40, 50 Current usage: 5, 10, 15, 20, 25 Remaining capacities: 5, 10, 15, 20, 25 Total remaining capacity = 5+10+15+20+25 = 75 Since we need to distribute only 20 units and total remaining capacity is 75 units, the answer is \\"YES\\". Example case 2: Max capacities: 10, 5, 20 Current usage: 8, 3, 15 Remaining capacities: 2, 2, 5 Total remaining capacity = 2 + 2 + 5 = 9 Since we need to distribute 15 units and total remaining capacity is only 9 units, the answer is \\"NO\\".","solution":"def can_distribute_goods(T, test_cases): results = [] for i in range(T): N, G = test_cases[i][0] max_capacities = test_cases[i][1] current_utilizations = test_cases[i][2] remaining_capacity = sum(max_cap - filled for max_cap, filled in zip(max_capacities, current_utilizations)) if G <= remaining_capacity: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example Input T = 2 test_cases = [ [(5, 20), [10, 20, 30, 40, 50], [5, 10, 15, 20, 25]], [(3, 15), [10, 5, 20], [8, 3, 15]] ] # Function call for provided example print(can_distribute_goods(T, test_cases)) # Output should be [\'YES\', \'NO\']"},{"question":"# Problem Statement Alice is fascinated with binary numbers and has recently started experimenting with them. She has devised a game where given an integer `n`, she converts it to its binary form and calculates the number of `1`s in the binary representation. Alice\'s friend Bob wants to challenge Alice by giving her a list of integers. For each integer in the list, he wants Alice to determine the number of unique counts of `1`s in their binary representations. Two counts are considered unique if they are different. Alice needs your help to write a program to determine the number of unique counts of `1`s in the binary representations for a list of integers. # Input - The first line contains an integer `T`, the number of test cases. Each test case consists of two lines. - The first line contains a single integer `M`, the number of integers in the list. - The second line contains `M` space-separated integers. # Output For each test case, output a single integer – the number of unique counts of `1`s in the binary representations of the given list of integers. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ M ≤ 1000 - 0 ≤ integer values in the list ≤ 10^6 # Example Input ``` 2 5 1 2 3 4 5 6 10 20 30 40 50 60 ``` Output ``` 3 2 ``` # Explanation In the first test case: - The binary representations are: `1 -> 1`, `2 -> 10`, `3 -> 11`, `4 -> 100`, `5 -> 101` - The counts of `1`s are: `1, 1, 2, 1, 2` - The unique counts are `1` and `2` - Number of unique counts is `2` In the second test case: - The binary representations are: `10 -> 1010`, `20 -> 10100`, `30 -> 11110`, `40 -> 101000`, `50 -> 110010`, `60 -> 111100` - The counts of `1`s are: `2, 2, 4, 2, 3, 4` - The unique counts are `2`, `3` and `4` - Number of unique counts is `3` # Note Pay attention to the complexity and ensure your solution is efficient given the constraints.","solution":"def unique_binary_ones_count(test_cases): results = [] for test_case in test_cases: # Extract the list of integers for each test case M, numbers = test_case # Compute the count of 1s in the binary representation of each number ones_counts = [bin(num).count(\'1\') for num in numbers] # Determine the number of unique counts unique_counts = len(set(ones_counts)) # Add the result for this test case results.append(unique_counts) return results # Function to parse input and return results def process_input_and_get_results(input_data): # Split the input string into lines lines = input_data.strip().split(\'n\') # Number of test cases T = int(lines[0]) # Parse each test case test_cases = [] index = 1 for _ in range(T): M = int(lines[index]) numbers = list(map(int, lines[index + 1].split())) test_cases.append((M, numbers)) index += 2 # Compute results for all test cases results = unique_binary_ones_count(test_cases) return results"},{"question":"Alice is organizing a community event and has decided to invite n friends. She wants to form k teams such that the skills within each team are well balanced. Every friend has a skill level represented by an integer, and Alice wants each team to have a similar skill level sum. Determine whether it is possible to divide the n friends into exactly k non-empty teams where the sum of the skill levels of each team does not differ by more than one. If it\'s possible, print \\"YES\\", otherwise print \\"NO.\\" Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) — the number of friends and the number of teams. The second line contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^6), where s_i denotes the skill level of the ith friend. Output Print \\"YES\\" if it\'s possible to form k teams with the described properties, otherwise print \\"NO\\". Examples Input 5 2 1 2 3 4 5 Output YES Input 5 3 1 1 1 1 6 Output NO Input 8 4 10 10 10 10 10 10 10 10 Output YES Input 3 4 1 2 3 Output NO Note In the first example, the teams can be divided as follows: (1, 2, 3) and (4, 5) with skill sums of 6 and 9 respectively, with a difference of 3 between the sums. In the second example, it\'s impossible to balance the teams because one skill level exceeds the desired sum balance. In the third example, the teams can be exactly divided into four teams with equal skill sums of 20. In the fourth example, it\'s not possible to form more teams than friends.","solution":"def can_form_k_teams(n, k, skills): total_skill = sum(skills) min_team_sum = total_skill // k max_team_sum = min_team_sum + 1 num_teams_with_max_sum = total_skill % k return all(skill <= max_team_sum for skill in skills) and num_teams_with_max_sum <= k def is_possible_to_form_teams(n, k, skills): if k > n: return \\"NO\\" if can_form_k_teams(n, k, skills): return \\"YES\\" else: return \\"NO\\""},{"question":"You are developing a management system for a library, and your task is to track the inventory of books. Write a program that helps determine whether a particular book is available in the library inventory or not. The program should read a list of data where each item includes the unique book ID b and the number of copies c of that book. Then, the program should read another list of book IDs that users want to check for availability. Finally, the program should print \\"Available\\" if the book is in stock (i.e., the number of copies c is greater than zero) or \\"Not Available\\" if the book is out of stock or does not exist in the inventory. The input consists of two parts: the inventory list and the list of query book IDs. The input ends with a line including a single 0. Each inventory list dataset consists of: n (the number of books in the inventory) b c b c : : b c Each query list dataset consists of: m (the number of books to check) b b : : b For each dataset, determine the availability status for each book in the query list in the order of input. Input 5 1001 3 1002 0 1003 5 1004 1 1005 2 4 1001 1002 1006 1005 3 1010 7 1011 0 1012 2 2 1012 1011 0 Output Available Not Available Not Available Available Available Not Available Example Input 5 1001 3 1002 0 1003 5 1004 1 1005 2 4 1001 1002 1006 1005 0 Output Available Not Available Not Available Available","solution":"def check_availability(): import sys input = sys.stdin.read data = input().splitlines() inventory = {} i = 0 while i < len(data): if data[i] == \'0\': break n = int(data[i]) i += 1 for _ in range(n): book_id, copies = map(int, data[i].split()) inventory[book_id] = copies i += 1 m = int(data[i]) i += 1 for _ in range(m): query_id = int(data[i]) if query_id in inventory and inventory[query_id] > 0: print(\'Available\') else: print(\'Not Available\') i += 1 # This function would read from standard input so to test it with pytest, we may need to redirect the standard input"},{"question":"A new hospital wing is being organized and you are in charge of assigning rooms to patients and doctors. You need to ensure that each patient is assigned a room and each room can either have a patient or be designated as a doctor\'s office. The hospital wing consists of r rooms, numbered from 1 to r, and there are r + d requests, where d is the number of doctors. Each request will either be a patient that needs to be assigned to a room or a doctor that needs a designated office. The requests will be processed one by one in order. Once a room is assigned to either a patient or a doctor, it cannot be changed. You need to write a program that will read these requests and output the room number assigned to each patient request. If a room is already assigned to a patient or a doctor, you should assign the patient to the next available room with a higher number, or output `-1` if no room is available. # Input The first line of the input contains two integers, r and d (1 ≤ r ≤ 1,000, 1 ≤ d ≤ 1,000) — the number of rooms and the number of doctors. The next r + d lines each contain a request in one of the following formats: - \\"patient\\": indicating a patient that needs to be assigned a room. - \\"doctor\\": indicating a doctor that needs a designated office. # Output For each patient request, output a single line containing the room number assigned to the patient, or `-1` if no room is available. # Example Input ``` 5 2 doctor patient patient doctor patient patient patient ``` Output ``` 2 3 -1 -1 ``` # Note In the example, there are 5 rooms and 2 doctors. The requests are processed as follows: 1. The first request is for a doctor. Room 1 is assigned to the doctor. 2. The second request is for a patient. Room 2 is assigned to the patient. 3. The third request is for a patient. Room 3 is assigned to the patient. 4. The fourth request is for a doctor. Room 4 is assigned to the doctor. 5. The fifth request is for a patient. Room 5 is assigned to the patient. 6. The sixth request is for a patient. No rooms are available, so the output is -1. 7. The seventh request is for a patient. No rooms are available, so the output is -1.","solution":"def assign_rooms(r, d, requests): rooms = [False] * r patient_results = [] current_room = 0 for req in requests: if req == \\"doctor\\": while current_room < r and rooms[current_room]: current_room += 1 if current_room < r: rooms[current_room] = True elif req == \\"patient\\": while current_room < r and rooms[current_room]: current_room += 1 if current_room < r: patient_results.append(current_room + 1) rooms[current_room] = True else: patient_results.append(-1) return patient_results"},{"question":"Chef is trying to manage his time efficiently while cooking multiple dishes. Each dish takes a certain amount of time to prepare, and Chef can only work on one dish at a time. However, Chef can choose the order in which he prepares the dishes. Chef wants to minimize the total completion time of all dishes, where the completion time is the time at which a dish is finished. More formally, you are given an array T of length N where T[i] represents the time required to prepare the i-th dish. Find the minimum possible value of the sum of the completion times of all dishes when finished optimally. ------ Input Format ------ - The first line contains an integer N, the number of dishes. - The second line contains N integers T[1], T[2], ..., T[N] indicating the time required to prepare each dish. ------ Output Format ------ Output the minimum possible total completion time of all dishes. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ T[i] ≤ 1000 ----- Sample Input 1 ----- 4 3 1 4 2 ----- Sample Output 1 ----- 20 ----- Explanation 1 ----- One optimal order to prepare the dishes is: [1, 2, 3, 4]. Completion times for this order are: - First dish: 1 (total time so far: 1) - Second dish: 1 + 2 = 3 (total time so far: 4) - Third dish: 1 + 2 + 3 = 6 (total time so far: 10) - Fourth dish: 1 + 2 + 3 + 4 = 10 (total time so far: 20) So, the minimum total completion time is 20.","solution":"def minimum_total_completion_time(N, T): Returns the minimum possible total completion time of all dishes when finished optimally. Parameters: N (int): the number of dishes T (list of int): the time required to prepare each dish Returns: int: the minimum possible total completion time # Sort the list T in ascending order T.sort() # Calculate the total completion time total_time = 0 current_time = 0 for time in T: current_time += time total_time += current_time return total_time"},{"question":"In a kingdom of N cities, the ruler plans to build a series of directed roads to connect the cities. Each road has a positive integer cost associated with it. However, due to budget constraints, the ruler wants to ensure that it\'s possible to travel between certain pairs of cities with minimal travel costs. Your task is to calculate the minimum travel cost between the given pairs of cities. -----Input:----- - The first line of the input contains two integers, N and M, denoting the number of cities and the number of directed roads respectively. - The next M lines contain three integers each, u, v, w, denoting a road from city u to city v with a cost w. - Next contains a single integer K, which denotes the number of queries. - The next K lines contain two integers each, Q_u and Q_v, denoting a query for the minimum travel cost from city Q_u to city Q_v. -----Output:----- - For each query, print the minimum travel cost between cities Q_u and Q_v. If there is no path, print -1. -----Constraints:----- - 1 leq N leq 200 - 1 leq M leq 5000 - 1 leq u, v, Q_u, Q_v leq N - 1 leq w leq 10^6 - 1 leq K leq 1000 -----Sample Input:----- 4 4 1 2 100 2 3 200 3 4 300 1 4 1000 2 1 4 2 4 -----Sample Output:----- 600 500 -----Explanation:----- - In the first query, the minimum cost to travel from city 1 to city 4 is via the path 1 -> 2 -> 3 -> 4 with a total cost of 100 + 200 + 300 = 600. - In the second query, the minimum cost to travel from city 2 to city 4 is via the path 2 -> 3 -> 4 with a total cost of 200 + 300 = 500.","solution":"import sys def floyd_warshall(n, roads): # Initialize distances dist = [[sys.maxsize] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 # Add the given edges for u, v, w in roads: dist[u-1][v-1] = w # Floyd Warshall Algorithm to find all pairs shortest paths for k in range(n): for i in range(n): for j in range(n): if dist[i][k] != sys.maxsize and dist[k][j] != sys.maxsize: dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) return dist def minimum_travel_cost(N, M, roads, K, queries): # Compute distances using Floyd-Warshall algorithm dist = floyd_warshall(N, roads) result = [] for q_u, q_v in queries: cost = dist[q_u-1][q_v-1] if cost == sys.maxsize: result.append(-1) else: result.append(cost) return result"},{"question":"Given a linked list of integers, remove all the nodes that have duplicate numbers, leaving only distinct numbers from the original list. Example 1: Input: 1 -> 2 -> 3 -> 2 -> 1 Output: 3 Explanation: The repeated numbers 1 and 2 were removed, leaving only 3 in the list. Example 2: Input: 4 -> 5 -> 6 -> 7 -> 5 -> 7 -> 8 Output: 4 -> 6 -> 8 Explanation: The repeated numbers 5 and 7 were removed, leaving 4, 6, and 8. Your Task: You need to complete the function `removeDuplicates()` that takes the head of the linked list as a parameter and returns the head of the modified list. The printing is done by the driver code only. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ Length of the linked list ≤ 10^5 1 ≤ Node values ≤ 10^5","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def removeDuplicates(head): Removes all the nodes that have duplicate numbers, leaving only distinct numbers from the original list. if not head: return None # Count the frequency of each element in the list freq = {} current = head while current: if current.val in freq: freq[current.val] += 1 else: freq[current.val] = 1 current = current.next # Create a dummy node to manage the new list dummy = ListNode(0) current = dummy # Iterate through the original list again to create the new list while head: if freq[head.val] == 1: current.next = ListNode(head.val) current = current.next head = head.next return dummy.next # Helper function to convert a list to a linked list def list_to_linkedlist(arr): if not arr: return None head = ListNode(arr[0]) current = head for num in arr[1:]: current.next = ListNode(num) current = current.next return head # Helper function to convert a linked list to a list def linkedlist_to_list(head): result = [] current = head while current: result.append(current.val) current = current.next return result"},{"question":"You are given N integers in an array representing scores, and you have a task to form the largest possible number by rearranging these integers. As the input size can be large, the approach needs to consider efficiency in terms of both time and space complexity. Write a program to solve this problem. ------ Input ------ - The first line contains an integer T - the number of test cases. - For each test case: - The first line contains an integer N - the number of integers in the array. - The second line contains N space-separated integers. ------ Output ------ For each test case, output a single line containing the largest number that can be formed by arranging the array elements. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1,000 0 ≤ a_i ≤ 10^9 for each valid i ------ Example ------ **Input** 2 3 10 2 9 4 3 30 34 5 9 **Output** 9210 9534330 ------ Explanation ------ In the first example, the largest number that can be formed by rearranging [10, 2, 9] is 9210. In the second example, the largest number that can be formed by rearranging [3, 30, 34, 5, 9] is 9534330.","solution":"from functools import cmp_to_key def custom_compare(x, y): # Convert numbers to string and compare combinations if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 def largest_number(arr): # Convert integers to strings for custom comparison arr = list(map(str, arr)) # Sort the list based on the custom comparison arr = sorted(arr, key=cmp_to_key(custom_compare)) # Join the numbers to form the largest possible number largest_num = \'\'.join(arr) # Handle the case where the array contains only zeros if largest_num[0] == \'0\': return \'0\' return largest_num def solve(test_cases): results = [] for case in test_cases: results.append(largest_number(case)) return results # Function to handle input and output def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) arr = list(map(int, data[index + 1: index + 1 + N])) test_cases.append(arr) index += 1 + N results = solve(test_cases) for result in results: print(result)"},{"question":"Given an integer N, determine if it can be expressed as a product of two distinct prime numbers. ------ Input Format ------ - The first line of input contains a single integer T — the number of test cases. Then the T test cases follow. - Each of the next T lines contains a single integer N. ------ Output Format ------ For each test case, output YES if N can be expressed as a product of two distinct prime numbers. Otherwise, output NO. ------ Constraints ------ 1 ≤ T ≤ 25 1 ≤ N ≤ 10^5 ------ Sample Input 1 ------ 4 10 15 21 49 ------ Sample Output 1 ------ YES YES YES NO ------ Explanation 1 ------ Test Case 1: 10 = 2 * 5 where 2 and 5 are distinct prime numbers. Test Case 2: 15 = 3 * 5 where 3 and 5 are distinct prime numbers. Test Case 3: 21 = 3 * 7 where 3 and 7 are distinct prime numbers. Test Case 4: 49 = 7 * 7, but both prime numbers are the same, hence NO.","solution":"def sieve_of_eratosthenes(limit): is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(limit**0.5) + 1): if is_prime[i]: for j in range(i * i, limit + 1, i): is_prime[j] = False return [i for i in range(2, limit + 1) if is_prime[i]] def can_be_product_of_two_distinct_primes(n, primes): for prime in primes: if prime * prime >= n: break if n % prime == 0 and (n // prime) in primes: return True return False def can_be_expressed_as_product_of_two_distinct_primes(T, cases): limit = max(cases) primes = sieve_of_eratosthenes(limit) results = [] for N in cases: if can_be_product_of_two_distinct_primes(N, primes): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You work at a factory where you need to manage inventory and shipping schedules. One day, you are given the task to pack items into boxes for shipping. Each box has a weight limit, and you want to fit as many items into one box as possible without exceeding the weight limit. The items are given in an array where each element represents the weight of an item. Write a function to determine the maximum number of items that can be packed into a single box without exceeding the weight limit. Input The first line of input contains two integers n (1 ≤ n ≤ 100) — the number of items and W (1 ≤ W ≤ 10^5) — the weight limit of the box. The second line contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^5) — the weight of each item. Output Output a single integer representing the maximum number of items that can be packed into the box without exceeding the weight limit. Example Input 5 50 10 20 30 15 25 Output 3 Explanation You can pack items with weights 10, 15, and 20 into the box which gives a total weight of 45, which is less than the weight limit of 50. Thus, the maximum number of items that can be packed into the box is 3.","solution":"def max_items_in_box(n, W, weights): weights.sort() total_weight = 0 item_count = 0 for weight in weights: if total_weight + weight <= W: total_weight += weight item_count += 1 else: break return item_count"},{"question":"John loves palindromes. A palindrome is a string that reads the same forward and backward. He has a list of strings and wants to check if each string in the list is a valid palindrome or not. To make this more challenging, John considers only alphanumeric characters and ignores cases while checking palindromes. Given a list of strings, write a function to determine whether each string is a valid palindrome. # Input Format The first line contains an integer `N`, the number of strings in the input list. Each of the next `N` lines contains a string. # Output Format For each string in the input list, output `\\"YES\\"` if the string is a valid palindrome and `\\"NO\\"` otherwise. # Constraints - 1 ≤ N ≤ 1000 - 1 ≤ Length of each string ≤ 1000 # Sample Input 3 \\"A man, a plan, a canal: Panama\\" \\"race a car\\" \\"Was it a car or a cat I saw?\\" # Sample Output YES NO YES # Explanation 1. The string `\\"A man, a plan, a canal: Panama\\"` is a palindrome when considering only alphanumeric characters and ignoring case. 2. The string `\\"race a car\\"` is not a palindrome. 3. The string `\\"Was it a car or a cat I saw?\\"` is also a palindrome when considering only alphanumeric characters and ignoring case.","solution":"import re def is_valid_palindrome(s): Checks if the given string is a valid palindrome considering only alphanumeric characters and ignoring case. :param s: The input string :return: \\"YES\\" if the string is a valid palindrome, \\"NO\\" otherwise # Remove non-alphanumeric characters and convert to lower case s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return \\"YES\\" if s == s[::-1] else \\"NO\\" def palindrome_checker(strings): Given a list of strings, check if each one is a valid palindrome. :param strings: list of input strings :return: list of results (\\"YES\\" or \\"NO\\") for each input string return [is_valid_palindrome(s) for s in strings]"},{"question":"You are given a series of arithmetic operations defined by a certain number of unique rules. Each rule specifies how two integers can be combined to form another integer. Your task is to determine whether a given target number can be obtained starting from an initial number and applying a sequence of these rules. Each rule is described as follows: - `A op B = C` indicates that when integers A and B are combined using the operation `op`, the result is C. - Valid operations (op) are \'+\', \'-\', \'*\', and \'/\'. Division by zero is not allowed and results should be considered only if they yield integers during division. Given an initial number, a target number, and a set of rules, you need to write a program to determine if it’s possible to reach the target number from the initial number using the specified rules any number of times. Input The input consists of multiple datasets. Each dataset is formatted as follows: ``` I T N A1 op1 B1 = C1 A2 op2 B2 = C2 ... AN opN BN = CN ``` Here: - `I` is the initial number. - `T` is the target number. - `N` is the number of rules. - Each of the following `N` lines describes a rule in the format `Ai opi Bi = Ci`. The input is terminated by a line with three zeros. Output For each dataset, print a line that contains \\"Possible\\" if the target number can be reached from the initial number using the specified rules. Otherwise, print \\"Impossible\\". Example Input ``` 5 17 3 5 + 6 = 11 11 * 1 = 11 11 + 6 = 17 2 9 2 2 * 2 = 4 4 * 2 = 8 1 10 0 0 0 0 ``` Output ``` Possible Impossible Impossible ```","solution":"def can_reach_target(initial, target, rules): from collections import deque def apply_rule(a, op, b): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': if b != 0 and a % b == 0: return a // b return None queue = deque([initial]) visited = set([initial]) while queue: current = queue.popleft() if current == target: return \\"Possible\\" for (a, op, b, c) in rules: result = apply_rule(current, op, b) if result == c and result not in visited: visited.add(result) queue.append(result) return \\"Impossible\\" def process_input(input_data): lines = input_data.strip().split(\'n\') results = [] idx = 0 while idx < len(lines): initial, target, num_rules = map(int, lines[idx].split()) if initial == 0 and target == 0 and num_rules == 0: break idx += 1 rules = [] for _ in range(num_rules): rule_parts = lines[idx].split() a = int(rule_parts[0]) op = rule_parts[1] b = int(rule_parts[2]) c = int(rule_parts[4]) rules.append((a, op, b, c)) idx += 1 results.append(can_reach_target(initial, target, rules)) return results"},{"question":"Given an integer n, return the nth Triangular number. The nth Triangular number T_{n} is the sum of the first n natural numbers. For example, the first three triangular numbers are 1, 3, and 6, representing the sum of the first 1, 2, and 3 natural numbers respectively. Triangular Number Example 1: Input: n = 1 Output: 1 Explanation: The first triangular number is the sum of the first natural number: 1 = 1. Example 2: Input: n = 4 Output: 10 Explanation: The fourth triangular number is the sum of the first four natural numbers: 1 + 2 + 3 + 4 = 10. Example 3: Input: n = 7 Output: 28 Explanation: The seventh triangular number is the sum of the first seven natural numbers: 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. Your Task: You don\'t need to read input or print anything. Your task is to complete the function getNthTriangularNum() which takes an Integer n as input and returns the nth triangular number. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^{5}","solution":"def getNthTriangularNum(n): Returns the nth triangular number. The nth triangular number is the sum of the first n natural numbers, which can be calculated using the formula n * (n + 1) // 2. Parameters: n (int): The position of the triangular number. Returns: int: The nth triangular number. return n * (n + 1) // 2"},{"question":"The space station is hosting a grand tournament of a game called \\"XorSum\\". In this game, each participant is given an array of non-negative integers. The goal is to find the maximum value of a parameter called \\"XorSum\\" for any subarray of the given array. The XorSum of a subarray is defined as the bitwise XOR of all the elements of that subarray. A subarray is any contiguous part of the array. Your task is to help the participants by writing a program that computes the maximum XorSum for the given array. -----Input----- The first line of the input consists of an integer n (1 le n le 100,000), which is the number of elements in the array. The second line contains n non-negative integers a_1, a_2, dots, a_n (0 le a_i < 2^{31}), where a_i denotes the i-th element of the array. -----Output----- Output one line with the maximum XorSum for any subarray of the given array. -----Examples----- Sample Input: 5 3 8 2 6 4 Sample Output: 15 Sample Input: 8 4 6 7 8 1 2 9 3 Sample Output: 15","solution":"def find_max_xor_sum(arr): Returns the maximum XorSum for any subarray of the given array. max_xor = 0 current_xor = 0 prefix_trie = Trie() # initialize the trie with the base case (zero prefix xor) prefix_trie.insert(0) for num in arr: current_xor ^= num max_xor = max(max_xor, prefix_trie.find_max_xor(current_xor)) prefix_trie.insert(current_xor) return max_xor class TrieNode: def __init__(self): self.left = None self.right = None class Trie: def __init__(self): self.root = TrieNode() def insert(self, num): node = self.root for i in range(30, -1, -1): bit = (num >> i) & 1 if bit == 0: if not node.left: node.left = TrieNode() node = node.left else: if not node.right: node.right = TrieNode() node = node.right def find_max_xor(self, num): node = self.root max_xor = 0 for i in range(30, -1, -1): bit = (num >> i) & 1 if bit == 0: if node.right: max_xor = (max_xor << 1) | 1 node = node.right else: max_xor = max_xor << 1 node = node.left else: if node.left: max_xor = (max_xor << 1) | 1 node = node.left else: max_xor = max_xor << 1 node = node.right return max_xor"},{"question":"A tree is an undirected graph in which any two vertices are connected by exactly one path. Given an integer n and an edge list representing a tree with n nodes, you are required to determine the length of the longest path in the tree (also known as the diameter of the tree). Input Format The first line contains an integer n representing the number of nodes in the tree. The next n-1 lines each contain two space-separated integers u and v describing an edge between nodes u and v. Note that the nodes are numbered from 1 to n. Constraints 2 leq n leq 10^5 Output Format Print an integer representing the length of the longest path in the tree. Sample Input 5 1 2 1 3 3 4 3 5 Sample Output 3 Explanation The tree described by the input has the following structure: ``` 1 / 2 3 / 4 5 ``` The longest path in this tree is from node 2 to node 4 (or node 5), passing through node 1 and node 3. Thus, the length of the longest path is 3. Hence, we print 3 as the answer.","solution":"from collections import deque, defaultdict def longest_path_in_tree(n, edges): if n == 1: return 0 # Create adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Utility function to perform BFS and return the farthest node and the distance def bfs(start_node): queue = deque([(start_node, 0)]) visited = set() farthest_node = start_node max_distance = 0 while queue: node, distance = queue.popleft() if node not in visited: visited.add(node) if distance > max_distance: farthest_node = node max_distance = distance for neighbor in tree[node]: if neighbor not in visited: queue.append((neighbor, distance + 1)) return farthest_node, max_distance # Start BFS from an arbitrary node (e.g., node 1) farthest_node_from_start, _ = bfs(1) # Start another BFS from the farthest node found _, max_distance = bfs(farthest_node_from_start) return max_distance"},{"question":"Haruto has a number-guessing game. He thinks of a number between a given range and tries to guess it. Unfortunately, Haruto\'s guesses aren\'t always perfect, and sometimes he doesn\'t guess the exact number but a number close to it. Can you help Haruto\'s friend, Kaito, write a program to determine how close Haruto\'s guess was to the actual number? -----Input----- The input contains three integers X, Y, and G. - X: The smaller number in the range (inclusive). - Y: The larger number in the range (inclusive). - G: Haruto\'s guess. -----Output----- Print the difference between Haruto\'s guess and the actual number if Haruto\'s guess is within the range [X, Y]. If Haruto\'s guess isn\'t within the range, print \\"Out of range.\\" -----Constraints----- 1 ≤ X < Y ≤ 10000 1 ≤ G ≤ 10000 -----Sample Input----- 100 200 150 -----Sample Output----- 50 -----Output details----- Haruto\'s actual number is 200 (the large number in the provided range). The difference between the actual number and Haruto\'s guess is abs(200 - 150) = 50. -----Sample Input----- 300 400 450 -----Sample Output----- Out of range -----Output details----- Haruto\'s guess of 450 is not within the provided range [300, 400], so the output is \\"Out of range.\\"","solution":"def guess_difference(X, Y, G): Determines the difference between the actual number and Haruto\'s guess, or if the guess is out of the range. Args: X (int): The smaller number in the range (inclusive). Y (int): The larger number in the range (inclusive). G (int): Haruto\'s guess. Returns: int or str: The difference between the actual number and the guess, or \\"Out of range\\" if the guess is not within the range. if X <= G <= Y: return abs(Y - G) else: return \\"Out of range\\""},{"question":"Implement a function that takes an array of integers and a target sum, and returns all unique combinations in the array where the numbers sum up to the target. Each number in the array may only be used once in each combination. The input array will not contain duplicate numbers, and the combinations should be returned in lexicographical order. # Input - An array of integers `arr` and an integer `target`. # Output - A list of lists, where each list contains a unique combination of numbers from `arr` that sum up to `target`. # Constraints - The length of `arr` will be between 1 and 20. - Each integer in `arr` will be between -100 and 100. # Example Example 1 **Input:** ```python arr = [10, 1, 2, 7, 6, 5] target = 8 ``` **Output:** ```python [ [1, 2, 5], [1, 7], [2, 6] ] ``` Example 2 **Input:** ```python arr = [2, 3, 6, 7] target = 7 ``` **Output:** ```python [ [7] ] ``` Example 3 **Input:** ```python arr = [5, 4, 3, 2, 1] target = 5 ``` **Output:** ```python [ [1, 4], [2, 3], [5] ] ``` # Note - In each combination, the order of numbers does not matter, so `[1, 2, 5]` and `[5, 1, 2]` are considered the same combination. - You may return the combinations in any order, but within each combination, the numbers should be in non-decreasing order.","solution":"from typing import List def combination_sum(arr: List[int], target: int) -> List[List[int]]: def backtrack(start, path, target): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(arr)): backtrack(i + 1, path + [arr[i]], target - arr[i]) arr.sort() result = [] backtrack(0, [], target) return result"},{"question":"Task You are given an array of non-negative integers representing the amount of money of each house, arranged in a circular manner. Determine the maximum amount of money you can rob tonight without alerting the police. Since the houses are arranged in a circle, the first and the last house are adjacent to each other, and you cannot rob them both. Example For `nums = [2, 3, 2]`, the output should be `3`. For `nums = [1, 2, 3, 1]`, the output should be `4`. Input/Output - `[input]` integer array `nums` Constraints: `1 ≤ nums.length ≤ 100` `0 ≤ nums[i] ≤ 1000` - `[output]` an integer The maximum amount of money you can rob without alerting the police.","solution":"def rob(nums): Returns the maximum amount of money you can rob without alerting the police. if len(nums) == 1: return nums[0] def rob_linear(houses): prev2, prev1 = 0, 0 for amount in houses: current = max(prev1, prev2 + amount) prev2 = prev1 prev1 = current return prev1 return max(rob_linear(nums[1:]), rob_linear(nums[:-1]))"},{"question":"Jane and Mike are best friends and they live in different cities. They want to send messages to each other during a festival. Jane has prepared a greeting message for Mike and wants to send it multiple times as specified by the festival theme. Help Jane determine the concatenated message she will be sending to Mike. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, a string S (the greeting message) and an integer N - the number of times the message should be sent. ------ Output Format ------ For each test case, output the concatenated message that Jane will send to Mike. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 1 ≤ N ≤ 100 ----- Sample Input 1 ----- 3 Hello 3 HappyFestive 2 Greetings 4 ----- Sample Output 1 ----- HelloHelloHello HappyFestiveHappyFestive GreetingsGreetingsGreetingsGreetings ----- Explanation ----- Test case 1: Jane wants to send the greeting message \\"Hello\\" 3 times. The concatenated message is \\"HelloHelloHello\\". Test case 2: Jane wants to send the greeting message \\"HappyFestive\\" 2 times. The concatenated message is \\"HappyFestiveHappyFestive\\". Test case 3: Jane wants to send the greeting message \\"Greetings\\" 4 times. The concatenated message is \\"GreetingsGreetingsGreetingsGreetings\\".","solution":"def concatenate_messages(T, cases): Given T test cases, each with a pair consisting of a string S and an integer N, returns a list of concatenated messages. Parameters: T (int): The number of test cases. cases (list): A list of tuples, where each tuple contains a string S and an integer N. Returns: list: A list of concatenated messages for each test case. result = [] for case in cases: S, N = case result.append(S * N) return result def extract_test_cases(input_string): Given an input string, extracts the number of test cases T, and a list of tuples where each tuple contains a string S and an integer N. Parameters: input_string (str): Input string in the specified format Returns: tuple: A tuple containing T (int) and a list of test cases. lines = input_string.strip().split(\'n\') T = int(lines[0]) cases = [] for line in lines[1:]: S, N = line.rsplit(\' \', 1) cases.append((S, int(N))) return T, cases"},{"question":"You are given a sorted linked list of distinct integers. Your task is to convert this sorted linked list into a balanced binary search tree (BST). A balanced binary search tree is a binary tree where the depth of the left and right subtrees of every node differs by 1 or less. Example: Input: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 Output: 4 / 2 6 / / 1 3 5 7 Explanation: The input sorted linked list [1, 2, 3, 4, 5, 6, 7] can be converted to a balanced BST where 4 is the root, 2 and 6 are the left and right children of 4, and so on. Your Task: You do not need to read input or print anything. Your task is to complete the function `sortedListToBST()` which takes the head of the sorted linked list as the only argument and returns the root of the balanced binary search tree. Constraints: - 1 ≤ Number of nodes in the linked list ≤ 100 - -10^4 ≤ Node value ≤ 10^4","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sortedListToBST(head): Converts a sorted linked list to a balanced BST. def find_middle(start, end): slow = fast = start while fast != end and fast.next != end: slow = slow.next fast = fast.next.next return slow def convert_list_to_bst(start, end): if start == end: return None mid = find_middle(start, end) root = TreeNode(mid.val) root.left = convert_list_to_bst(start, mid) root.right = convert_list_to_bst(mid.next, end) return root return convert_list_to_bst(head, None)"},{"question":"You are given a string consisting of digits and you need to determine the maximum possible even number that can be formed using all the digits of the string exactly once. -----Input----- The only line of input contains a non-empty string s consisting of digits (\'0\'-\'9\'). The length of the string is at most 10^5. -----Output----- Print the maximum possible even number that can be formed using all digits of the given string exactly once. If it is not possible to form an even number, print `-1`. -----Examples----- Input 4321 Output 4312 Input 1234 Output 4312 Input 13579 Output -1 -----Note----- To form the maximum possible even number, we should try to have the highest digits at the most significant positions while ensuring the last digit is even. This might require swapping the last digit with an appropriate even digit from earlier in the sequence if necessary.","solution":"def max_even_number(s): Returns the maximum possible even number that can be formed using all digits of the string exactly once. If it is not possible to form an even number, returns -1. digits = sorted(s, reverse=True) # Try to find an even digit to place at the end for i in range(len(digits) - 1, -1, -1): if int(digits[i]) % 2 == 0: # Swap the found even digit to the end digits.append(digits.pop(i)) return \'\'.join(digits) return \'-1\'"},{"question":"In a software company, there is a scheduling system that assigns tasks to its employees. The complexity of a task is measured in its difficulty level and the proficiency required from employees. The scheduler needs to ensure that once an employee completes a task, the next task assigned should either maintain the difficulty level or increase it, to keep employees constantly challenged. Given a list of n tasks\' difficulty levels, reorder them into a new sequence such that for all 1 leq i leq n-1, it holds that: [ difficulty_{i} leq difficulty_{i+1} ] and each difficulty level appears at least once in the sequence. -----Input----- The input consists of: - One line with an integer n (2 le n le 10^5), the number of tasks. - One line with n integers d_1, d_2, dots , d_n (1 leq d_i leq 10^5 for each i), the difficulty levels of the tasks. -----Output----- Output a reordered sequence of difficulty levels satisfying the given requirement. If no solution exists, output “impossible”. If there are multiple valid solutions, you may output any one of them. -----Examples----- Sample Input: 5 3 1 4 5 2 Sample Output: 1 2 3 4 5","solution":"def reorder_tasks(n, difficulties): Reorders the tasks\' difficulty levels such that they are sorted in non-decreasing order. Parameters: n (int): The number of tasks difficulties (list of int): The list of difficulty levels Returns: list of int: The reordered list of difficulty levels or \'impossible\' if no solution exists. if n < 2: return \\"impossible\\" return sorted(difficulties)"},{"question":"Write a Python function that determines if a given string follows the same character pattern as a given pattern string. Each input string consists of lowercase letters, and the pattern string consists of lowercase letters too. Each pattern character should map to exactly one word (a subsequence of the input string) in a one-to-one relationship. Function Signature: ```python def word_pattern(pattern: str, s: str) -> bool ``` # Input: - The first line contains a string, `pattern`, denoting the pattern to follow. - The second line contains a string, `s`, denoting the input string with words separated by spaces. # Constraints: - Patterns and input strings contain only lowercase English letters. - Both `pattern` and `s` must be non-empty strings. # Output: - Return `True` if the input string `s` follows the pattern, otherwise return `False`. # Example: Example 1 ```python pattern = \\"abba\\" s = \\"dog cat cat dog\\" print(word_pattern(pattern, s)) # True ``` **Explanation:** - `pattern[0]` -> \\"a\\" -> maps to \\"dog\\" - `pattern[1]` -> \\"b\\" -> maps to \\"cat\\" - `pattern[2]` -> \\"b\\" -> still maps to \\"cat\\" - `pattern[3]` -> \\"a\\" -> still maps to \\"dog\\" Example 2 ```python pattern = \\"abba\\" s = \\"dog cat cat fish\\" print(word_pattern(pattern, s)) # False ``` **Explanation:** - `pattern[0]` -> \\"a\\" -> maps to \\"dog\\" - `pattern[1]` -> \\"b\\" -> maps to \\"cat\\" - `pattern[2]` -> \\"b\\" -> still maps to \\"cat\\" - `pattern[3]` -> \\"a\\" -> should map to \\"dog\\" but found \\"fish\\" Example 3 ```python pattern = \\"aaaa\\" s = \\"dog dog dog dog\\" print(word_pattern(pattern, s)) # True ``` **Explanation:** - `pattern[0], pattern[1], pattern[2], pattern[3]` all map to the same word \\"dog\\". Example 4 ```python pattern = \\"abba\\" s = \\"dog dog dog dog\\" print(word_pattern(pattern, s)) # False ``` **Explanation:** - `pattern[0]` -> \\"a\\" -> maps to \\"dog\\" - `pattern[1]` -> \\"b\\" -> should map to a different word but found \\"dog\\" again Implement the function to solve the problem in an optimal manner considering the given constraints.","solution":"def word_pattern(pattern: str, s: str) -> bool: words = s.split() # Early return if lengths don\'t match if len(pattern) != len(words): return False char_to_word = {} word_to_char = {} for p, w in zip(pattern, words): if p in char_to_word: if char_to_word[p] != w: return False if w in word_to_char: if word_to_char[w] != p: return False char_to_word[p] = w word_to_char[w] = p return True"},{"question":"Write a function that takes a string representation of a mathematical expression involving addition and subtraction of integers and evaluates it. The string will contain only digits, \'+\', \'-\' and spaces. No parentheses or other operators will be included. # Examples ```python evaluate(\\"3 + 5 - 2\\") -> 6 evaluate(\\"10 - 4 + 2\\") -> 8 evaluate(\\"1 + 2 - 3 + 4\\") -> 4 evaluate(\\"-1 + 2\\") -> 1 ``` # Notes - Input string will always be a valid expression. - The function should be able to handle leading, trailing, and multiple spaces between numbers and operators.","solution":"def evaluate(expression): Evaluates a string representation of a mathematical expression involving addition and subtraction of integers. # Remove all spaces from the expression expression = expression.replace(\\" \\", \\"\\") # Initialize current number and result num = 0 result = 0 sign = 1 # 1 for positive, -1 for negative i = 0 while i < len(expression): char = expression[i] if char.isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 result += sign * num i -= 1 # step back to offset the next i += 1 in the loop elif char == \'+\': sign = 1 elif char == \'-\': sign = -1 i += 1 return result"},{"question":"Given an array of integers and an integer K, return the maximum length of a subarray that contains at most K distinct integers. Example 1: Input: arr = [1, 2, 1, 2, 3], K = 2 Output: 4 Explanation: The longest subarray with at most 2 distinct integers is [1, 2, 1, 2]. Example 2: Input: arr = [1, 2, 1, 3, 4], K = 2 Output: 2 Explanation: The longest subarray with at most 2 distinct integers is either [1, 2] or [1, 3] or [3, 4]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxLengthSubarray() which takes an array of integers arr and an integer K as input and returns the length of the longest subarray containing at most K distinct integers. Expected Time Complexity: O(N) Expected Auxiliary Space: O(K) Constraints: 1 <= arr.length <= 10^5 1 <= arr[i] <= 10^4 1 <= K <= arr.length","solution":"def maxLengthSubarray(arr, K): from collections import defaultdict n = len(arr) if K == 0: return 0 left = 0 max_len = 0 count = defaultdict(int) distinct_count = 0 for right in range(n): if count[arr[right]] == 0: distinct_count += 1 count[arr[right]] += 1 while distinct_count > K: count[arr[left]] -= 1 if count[arr[left]] == 0: distinct_count -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Jane is learning how to arrange dominoes for a school project. She has a collection of domino pieces and wants to align them in a straight line. Each domino can only be placed if it matches the adjacent piece either in number or in color. She decided to create a program to help her identify the maximum length of a valid sequence she can create from her given dominoes. Each domino piece has two halves marked with a number (0-9) and a color (R for Red, G for Green, B for Blue). The alignment rules are: - Two domino pieces can be placed adjacent to each other if either both halves share the same number or the same color. Given a collection of n dominoes, write a program to find the maximum length of a sequence that meets the above rules. Input: - The first line of the input contains an integer n (1 ≤ n ≤ 100), denoting the number of domino pieces. - The next n lines each contain two strings separated by a space. The first string denotes the number and color of the left half (e.g., \\"3R\\" for 3 Red), and the second string denotes the number and color of the right half. Output: - A single integer representing the maximum length of a valid domino sequence. Example: Input: 5 2R 3B 3B 4G 4G 5R 1R 2R 2R 3B Output: 4 Explanation: One possible sequence of maximum length is: 1. 2R 3B 2. 3B 4G 3. 4G 5R 4. 2R 3B","solution":"def max_domino_sequence(n, dominoes): Given the number of dominoes and their descriptions, return the maximum length of a valid sequence. from collections import defaultdict def can_be_matched(d1, d2): Checks if two domino pieces can be adjacent. left1, right1 = d1 left2, right2 = d2 return right1 == left2 # Domino graph representation domino_graph = defaultdict(list) for i in range(n): left, right = dominoes[i] domino_graph[left].append((right, i)) domino_graph[right].append((left, i)) max_length = 0 def dfs(current, visited): nonlocal max_length max_length = max(max_length, len(visited)) for neighbor, idx in domino_graph[current]: if idx not in visited: visited.add(idx) dfs(neighbor, visited) visited.remove(idx) for i in range(n): visited = set([i]) left, right = dominoes[i] dfs(left, visited) dfs(right, visited) return max_length"},{"question":"#BACKGROUND: A group of college students has rented an apartment together and decided to split the rent based on the number of days each person stays in the apartment during a given month. Each student keeps track of the days they were present in the apartment, and at the end of the month, they want to calculate the rent each person owes. The rent for the apartment is fixed every month, and there\'s no partial day rent, meaning if a student stays even a part of a day, they are considered to have stayed for one full day. #TECHNICAL DETAILS: The rent for the apartment is split proportionally based on the number of days each student stays in the apartment. For example, if there are three students who stayed for 10, 20, and 30 days respectively in a month where the rent is 300, the student with 10 days pays 50, the student with 20 days pays 100, and the student with 30 days pays 150. #TASK: Write a function that takes as input: ``` - The total monthly rent (a positive decimal number); - A list of tuples, where each tuple contains the name of a student (string) and the number of days they stayed in the apartment (integer). ``` and returns a dictionary where each key is the student\'s name and the value is the rent they owe. #NOTES: - The number of days each student stays in the apartment will be a non-negative integer. - You can assume at least one student stays in the apartment for at least one day. - Round all rent amounts to two decimal places. #EXAMPLES: Example 1: Input: ``` total_rent = 300.0 students_days = [(\\"Alice\\", 10), (\\"Bob\\", 20), (\\"Charlie\\", 30)] ``` Output: ``` { \\"Alice\\": 50.00, \\"Bob\\": 100.00, \\"Charlie\\": 150.00 } ``` Example 2: Input: ``` total_rent = 500.0 students_days = [(\\"John\\", 15), (\\"Doe\\", 10)] ``` Output: ``` { \\"John\\": 300.00, \\"Doe\\": 200.00 } ```","solution":"def split_rent(total_rent, students_days): Splits the total rent among students based on the number of days they stayed. Parameters: - total_rent (float): The total rent for the month. - students_days (list of tuples): Each tuple contains a student\'s name (str) and the number of days they stayed (int). Returns: - dict: A dictionary where each key is a student\'s name and the value is the rent they owe. total_days = sum(days for _, days in students_days) rent_distribution = {} for name, days in students_days: rent_owed = (days / total_days) * total_rent rent_distribution[name] = round(rent_owed, 2) return rent_distribution"},{"question":"Ramesh is an avid marathon runner and known for his rigorous training schedules. However, he also enjoys solving coding problems during his rest days. One day, after a long run, he came across an interesting challenge. Given an array of integers, he wants to find the maximum sum of a contiguous subarray. Could you help him solve this problem? Example 1: Input: arr = [1, -3, 2, 1, -1] Output: 3 Explanation: The subarray with the maximum sum is [2, 1], which has a sum of 3. Example 2: Input: arr = [-1, -2, -3, -4] Output: -1 Explanation: The subarray with the maximum sum is [-1], which has a sum of -1. Your Task: You don\'t need to read input or print anything. Complete the function `maxSubArraySum()` which takes arr as input parameter and returns the maximum sum. Constraints: 1 ≤ |arr| ≤ 10^5 -10^4 ≤ arr[i] ≤ 10^4","solution":"def maxSubArraySum(arr): Returns the maximum sum of a contiguous subarray. :param arr: List[int] - input array of integers :return: int - maximum sum of a contiguous subarray max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"A software company wants to create a new compression algorithm. The company decides to compress any given string by replacing each substring of consecutive identical characters with the character followed by the count of characters in this substring. If the length of the compressed string is not smaller than the length of the original string, the original string should be returned instead. For example, the string \\"aabcccccaaa\\" would become \\"a2b1c5a3\\". If the compressed string is not smaller, the original string \\"aabcccccaaa\\" is returned instead. Write a function to achieve this compression. Input The input contains a single string s (1 ≤ |s| ≤ 1000) — the string to be compressed. The string consists of lowercase English letters only. Output Output a single string — the compressed string or the original string if the compressed string\'s length is not smaller. Examples Input aabcccccaaa Output a2b1c5a3 Input abcdef Output abcdef","solution":"def compress_string(s): Compresses the given string by replacing each substring of consecutive identical characters with the character followed by the count of characters in this substring. If the length of the compressed string is not smaller than the length of the original string, the original string is returned. :param s: Input string consisting of lowercase English letters only :return: Compressed string or the original string if the compressed string\'s length is not smaller if len(s) == 0: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) if len(compressed_string) >= len(s): return s else: return compressed_string"},{"question":"Alex has been offered a job at a fruit sorting facility and needs your help to make sure he keeps his job. Fruits are sorted into crates, each with a specific grade. Alex needs to inspect each fruit crate to ensure it has the right grade of fruit inside before they get shipped out. A fruit crate is represented as a list of integers, each integer representing the grade of a fruit in the crate. The grade of a crate is determined by the most frequent grade (the mode) of the fruits inside. If there is a tie between two or more grades, the crate is considered of mixed grade. Write a function, `crateGrade`, that takes a list of integers representing the grades of fruits in a crate and returns a string indicating the grade of the crate. If the crate has a single determined grade, return it as a string. If the crate is mixed grade, return the string \\"mixed\\". Example: ```python crateGrade([1, 2, 2, 3, 3]) # should return \\"mixed\\" because 2 and 3 both occur twice crateGrade([1, 1, 1, 2, 2]) # should return \\"1\\" because 1 occurs more frequently than 2 crateGrade([3, 3, 3, 3, 3]) # should return \\"3\\" because 3 is the only grade and most frequent ```","solution":"from collections import Counter def crateGrade(grades): Determines the grade of a fruit crate based on the most frequent grade of fruits inside. Args: grades (list): List of integers representing grades of fruits in the crate. Returns: str: The grade of the crate as a string, or \\"mixed\\" if there is no single most frequent grade. if not grades: return \\"mixed\\" # Assuming an empty crate is considered mixed grade grade_count = Counter(grades) most_common = grade_count.most_common() if len(most_common) == 1 or most_common[0][1] > most_common[1][1]: return str(most_common[0][0]) else: return \\"mixed\\""},{"question":"Detective Conan needs to decipher a secret message. The message is a sequence of N integers and follows a specific encoding technique. Each integer in the sequence can be split into its digits. These digits can then be reordered to form the largest possible integer. Given the sequence of integers, determine the sum of these largest possible integers for each test case. ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N. - The second line of each test case contains N integers representing the sequence. ------ Output Format ------ For each test case, print a single line, a single integer denoting the sum of the largest possible integers formed from the given sequence. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Each integer in the sequence ≤ 10^9 - Sum of N over all test cases does not exceed 10^5. ------ Sample Input 1 ------ 2 3 132 45 87 2 970 3241 ------ Sample Output 1 ------ 979 9961 ------ Explanation 1 ------ Test Case 1: - The largest possible integer from 132 is 321. - The largest possible integer from 45 is 54. - The largest possible integer from 87 is 87. The sum is 321 + 54 + 87 = 462. But the output given is 979. The sample output might not match the question. Test Case 2: - The largest possible integer from 970 is 970. - The largest possible integer from 3241 is 4321. The sum is 970 + 4321 = 5291, but the output provided is 9961. The sample output might not match the question.","solution":"def largest_possible_integer(n): Given an integer n, return the largest integer possible by reordering its digits. return int(\\"\\".join(sorted(str(n), reverse=True))) def sum_largest_integers(test_cases): Given a list of test cases where each test case is a tuple (N, sequence), return a list of sums of the largest possible integers for each test case. results = [] for N, sequence in test_cases: total_sum = sum(largest_possible_integer(num) for num in sequence) results.append(total_sum) return results"},{"question":"Given an array of integers, you are required to find the subarray with the maximum sum and the length of this subarray. A subarray is defined as a contiguous part of an array. If there are multiple subarrays with the same maximum sum, return the one with the smallest start index. **Input Format:** - The first line contains an integer `n`, which denotes the number of elements in the array. - The next line contains `n` space-separated integers which denote the elements of the array. **Output Format:** - Print two space-separated integers `S L`, where `S` is the maximum sum and `L` is the length of the subarray with the maximum sum. **Constraints:** - 1 ≤ n ≤ 10^5 - -10^4 ≤ array[i] ≤ 10^4 **Sample Input:** ``` 8 -2 1 -3 4 -1 2 1 -5 4 ``` **Sample Output:** ``` 6 4 ``` **Explanation:** The subarray `[4, -1, 2, 1]` has the maximum sum of `6` and its length is `4`.","solution":"def max_subarray_sum_and_length(arr): Returns the maximum sum of a subarray and its length. :param arr: List of integers :return: Tuple containing the maximum sum and the length of the subarray max_sum = -float(\'inf\') current_sum = 0 best_start_index = 0 current_start_index = 0 best_length = 0 for i in range(len(arr)): if current_sum <= 0: current_start_index = i current_sum = arr[i] else: current_sum += arr[i] if current_sum > max_sum or (current_sum == max_sum and (i - current_start_index + 1) < best_length): max_sum = current_sum best_start_index = current_start_index best_length = i - current_start_index + 1 return max_sum, best_length"},{"question":"You are given an array of integers. The task is to find the minimum positive integer that does not occur in the array. Write a function minimumMissingPositive that takes an array of integers as an input and returns the minimum positive integer that is missing from the array. # Input - An array of integers ( nums ) with length ( n ) (1 ≤ ( n ) ≤ 100,000). - Each integer in the array can be between -1,000,000 and 1,000,000 inclusive. # Output - An integer representing the smallest positive integer that is missing from the array. # Examples Example 1 **Input:** [3, 4, -1, 1] **Output:** 2 **Explanation:** The smallest positive integer that is missing is 2. Example 2 **Input:** [1, 2, 0] **Output:** 3 **Explanation:** The smallest positive integer that is missing is 3. Example 3 **Input:** [-1, -2, -3, -4] **Output:** 1 **Explanation:** All integers are negative, so the smallest positive integer that is missing is 1. # Note You should aim for a solution with O(n) time complexity and O(1) additional space complexity. # Constraints - You are expected to handle large arrays efficiently. - Try to avoid using extra space that scales with the input size. # Hints - Think about how to use the given array itself to keep track of which numbers have been seen. - Could you use the indices of the array to track the smallest missing positive integer?","solution":"def minimumMissingPositive(nums): n = len(nums) # Step 1: Mark numbers which are out of range or negative to be ignored for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Step 2: Use the indices to mark presence of numbers for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Step 3: Find the first positive index for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"A company is planning to develop a new feature to recommend products to their users based on their purchase history. For this purpose, they want to calculate the similarity between two users\' purchase history using the Jaccard similarity coefficient. The Jaccard similarity coefficient between two sets A and B is defined as the size of the intersection of the sets divided by the size of the union of the sets, mathematically given as: [ J(A, B) = frac{|A cap B|}{|A cup B|} ] Given the list of products purchased by two users, calculate their Jaccard similarity coefficient. Constraints * 1 ≤ |A|, |B| ≤ 1000 * Each product is represented by an integer (1 ≤ product ≤ 10000) * No duplicate products in each user\'s purchase history Input First line contains a single integer n, the number of products purchased by the first user. Second line contains n space-separated integers denoting the products purchased by the first user. Third line contains a single integer m, the number of products purchased by the second user. Fourth line contains m space-separated integers denoting the products purchased by the second user. Output Output the Jaccard similarity coefficient as a decimal value rounded to 6 decimal places. Examples Input 5 1 2 3 4 5 4 4 5 6 7 Output 0.285714 Input 3 1 2 3 3 4 5 6 Output 0.000000","solution":"def jaccard_similarity(n, list1, m, list2): Calculates the Jaccard similarity coefficient between two users\' purchase history. Parameters: n (int): Number of products purchased by the first user. list1 (list of int): List of products purchased by the first user. m (int): Number of products purchased by the second user. list2 (list of int): List of products purchased by the second user. Returns: float: Jaccard similarity coefficient rounded to 6 decimal places. set1 = set(list1) set2 = set(list2) intersection = set1.intersection(set2) union = set1.union(set2) similarity = len(intersection) / len(union) if len(union) != 0 else 0.0 return round(similarity, 6)"},{"question":"A music streaming service has a feature where users can create their playlists. Each playlist can contain an arbitrary number of songs, and each song is associated with a specific genre. To improve their user recommendations, the service needs to analyze users\' preferences based on their playlists. Your task is to help the service by writing a program that identifies the most popular genre for each user. Given the preferences for multiple users, calculate the most popular genre for each of them. If there is a tie for the most popular genre, return the lexicographically smallest genre among them. Input The first line of input contains an integer N (1 ≤ N ≤ 1000) — the number of users. Then 2*N lines follow: for each user, the first line contains an integer M (1 ≤ M ≤ 100) — the number of songs in their playlist, followed by a line containing M strings — the genres of the songs in their playlist (each string\'s length will be between 1 and 20, and all genres consist of lowercase letters). Output Print N lines, each containing one string — the most popular genre for each user, in the order of users as provided in the input. Examples Input 3 4 rock pop rock jazz 3 jazz jazz classical 5 pop rock pop rock pop Output rock jazz pop Note For the first user, \\"rock\\" appears twice which is more than any other genre. For the second user, \\"jazz\\" appears twice which is more than any other genre. For the third user, \\"pop\\" appears three times which is more than any other genre.","solution":"def most_popular_genre(N, user_data): Determines the most popular genre for each user. Parameters: N (int): Number of users. user_data (list of tuples): Each tuple contains the number of songs and a list of genres in the user\'s playlist. Returns: list of str: The most popular genre for each user. result = [] for user in user_data: _, genres = user genre_count = {} for genre in genres: if genre in genre_count: genre_count[genre] += 1 else: genre_count[genre] = 1 max_count = max(genre_count.values()) popular_genres = [genre for genre, count in genre_count.items() if count == max_count] result.append(min(popular_genres)) return result"},{"question":"Kiana loves collecting old books and has a collection of N books, each indexed from 1 to N. Each book has a \'coolness\' score associated with it, given in an array coolness[] where coolness[i] represents the coolness score of the i-th book. Kiana wants to find a subset of M books from her collection such that the difference between the maximum and minimum coolness scores in this subset is minimized. Your task is to determine the minimum possible difference between the maximum and minimum coolness scores for the best possible subset of M books. Example 1: Input: coolness = [10, 3, 20, 7, 15] N = 5, M = 3 Output: 7 Explanation: By selecting the books with coolness scores [3, 10, 7], we get the subset [3, 7, 10] which gives us a difference of 10 - 3 = 7. This is the best possible subset with the minimum difference. Example 2: Input: coolness = [8, 2, 5, 9, 1, 7] N = 6, M = 4 Output: 4 Explanation: By selecting the books with coolness scores [2, 5, 7, 8], we get the subset [2, 5, 7, 8] which gives us a difference of 8 - 4 = 4. This is the best possible subset with the minimum difference. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function minDifference() that takes the size of an array (N), the array of coolness scores and the integer M and returns an integer representing the minimum possible coolness difference between the selected subset of M books. The driver code takes care of the printing. Expected Time Complexity: O(N log N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^5 1 ≤ M ≤ N 1 ≤ coolness[i] ≤ 10^9","solution":"def minDifference(N, coolness, M): Returns the minimum possible difference between the maximum and minimum coolness scores for the best possible subset of M books. # Sort the coolness score array coolness.sort() # Initialize minimum difference to a large number min_diff = float(\'inf\') # Iterate through the coolness score array and find the minimum difference for i in range(N - M + 1): current_diff = coolness[i + M - 1] - coolness[i] if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"Julia loves playing with strings. She came up with a new game where she needs to find the lexicographically smallest string that can be obtained by reversing exactly one contiguous substring of a given string. ------ Input Format ------ - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains a single string S. ------ Output Format ------ For each test case, print the lexicographically smallest string obtained after reversing exactly one contiguous substring of S. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ |S| ≤ 1000 S consists of lowercase English letters. ------ subtasks ------ Subtask #1 (100 points): Original constraints ------ Sample Input 1 ------ 2 abdc aabb ------ Sample Output 1 ------ abcd aabb ------ explanation 1 ------ Test Case 1: By reversing the substring \\"bd\\" in the original string \\"abdc\\", we get \\"abcd\\", which is the lexicographically smallest string obtainable. Test Case 2: The string \\"aabb\\" is already the lexicographically smallest string, so reversing any of its contiguous substrings will not yield a smaller string.","solution":"def lexicographically_smallest_string(T, test_cases): result = [] for s in test_cases: n = len(s) min_string = s for i in range(n): for j in range(i + 1, n + 1): reversed_substring = s[:i] + s[i:j][::-1] + s[j:] if reversed_substring < min_string: min_string = reversed_substring result.append(min_string) return result"},{"question":"Given a list of integers, write a function to determine if the list is a palindrome, i.e., it reads the same forwards and backwards. Example 1: Input: arr = [1, 2, 3, 2, 1] Output: The list is a palindrome. Explanation: The list reads the same forwards and backwards. Example 2: Input: arr = [1, 2, 3, 4, 5] Output: The list is not a palindrome. Explanation: The list does not read the same forwards and backwards. Your Task: You don\'t need to read inputs. Your task is to complete the function `isPalindrome()` which takes a list of integers `arr` and prints: - \\"The list is a palindrome.\\" without quotes if the list reads the same forwards and backwards. - \\"The list is not a palindrome.\\" without quotes if the list does not read the same forwards and backwards. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(arr) <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"def isPalindrome(arr): Determines if the given list of integers is a palindrome. Parameters: arr (list): The list of integers to check. Returns: str: \\"The list is a palindrome.\\" if the list reads the same forwards and backwards, otherwise \\"The list is not a palindrome.\\" if arr == arr[::-1]: return \\"The list is a palindrome.\\" else: return \\"The list is not a palindrome.\\""},{"question":"Two vehicles, A and B, are on a straight road starting from positions 0 and x respectively. Vehicle A moves at a constant speed va, and vehicle B moves at a constant speed vb. Your task is to determine at what position the two vehicles will become parallel if they are moving in the same direction and vehicle A travels faster and catches up to vehicle B. If they never meet, output \\"NEVER\\". Input The first line contains three integers x, va, and vb (1 ≤ x ≤ 1000, 1 ≤ va, vb ≤ 1000, va ≠ vb) separated by spaces. Output In the first line, print either the position at which the two vehicles will meet or \\"NEVER\\" (without the quotes) if they do not meet. Examples Input 10 2 1 Output 20 Input 5 1 2 Output NEVER","solution":"def position_to_meet(x, va, vb): Determines the position at which two vehicles moving in the same direction will meet. Parameters: x (int): The starting position of vehicle B. va (int): The speed of vehicle A. vb (int): The speed of vehicle B. Returns: int/str: The position where they meet or \'NEVER\' if they do not meet. if va <= vb: return \\"NEVER\\" else: t = x / (va - vb) return int(t * va)"},{"question":"Julia loves music and has a vast collection of songs stored on her computer. She wants to organize her songs into playlists based on their lengths. She has a marathon planned and wants the playlist duration to match as closely as possible to the given target length of time. Given an array of integers representing the lengths of songs in seconds and an integer representing the target length in seconds, help Julia find two songs whose total length is closest to the target length. If there are multiple pairs with the same closest total length, return any one of them. Write a function: ```python def closest_pair(songs: List[int], target: int) -> Tuple[int, int]: ``` # Input Format: The function will receive an array of integers and an integer as input: - A list of integers (1 ≤ |songs| ≤ 10^4) where each integer represents the length of a song in seconds (1 ≤ length ≤ 10^4). - An integer representing the target length in seconds (1 ≤ target ≤ 2 * 10^4). # Output Format: The function should return a tuple of two integers representing the lengths of the two songs whose total length is closest to the target length. # Constraints: - Each song length will be unique in the input list. - If there are multiple pairs with the same closest total length, return any of them. # Sample Input: ```python songs = [250, 300, 150, 600, 1200, 800] target = 900 ``` # Sample Output: ```python (300, 600) ``` # Explanation: The total length of the songs `300` and `600` is `900`, which is exactly the target length. If there were no exact match, the pair closest to the target should be returned.","solution":"from typing import List, Tuple def closest_pair(songs: List[int], target: int) -> Tuple[int, int]: songs.sort() closest_sum = float(\'inf\') closest_pair = (0, 0) left, right = 0, len(songs) - 1 while left < right: current_sum = songs[left] + songs[right] if abs(target - current_sum) < abs(target - closest_sum): closest_sum = current_sum closest_pair = (songs[left], songs[right]) if current_sum == target: return closest_pair elif current_sum < target: left += 1 else: right -= 1 return closest_pair"},{"question":"You are given a list of integers. Find the maximum product of any three integers from the list. -----Constraints----- - The length of the list is between 3 and 1000. - The value of each integer in the list is between -1000 and 1000. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n - n: the number of integers in the list - a_1, a_2, ..., a_n: the integers in the list. -----Output----- Print the maximum product of any three integers from the list. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 60 The maximum product is 3 times 4 times 5 = 60.","solution":"def maximum_product_of_three(lst): Returns the maximum product of any three integers from the list. if len(lst) < 3: raise ValueError(\\"List must contain at least three numbers.\\") lst.sort() # Maximum product of three numbers can be from the highest three numbers # or from two smallest (negative) numbers and the highest positive number. max_product = max(lst[-1] * lst[-2] * lst[-3], lst[0] * lst[1] * lst[-1]) return max_product def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) lst = list(map(int, data[1:])) print(maximum_product_of_three(lst)) if __name__ == \\"__main__\\": main()"},{"question":"Sophie is participating in a programming contest. One of the challenges involves manipulating strings in a specific way. She has to transform an original string into a target string using the minimum number of operations. An operation consists of inserting, deleting, or replacing a single character. Your task is to help Sophie by writing a program that determines the minimum number of operations required to transform the given original string into the target string. -----Input----- The first line of the input contains a string ( s1 ) (1 ≤ |s1| ≤ 1000) — the original string. The second line of the input contains a string ( s2 ) (1 ≤ |s2| ≤ 1000) — the target string. The strings consist only of lowercase English letters. -----Output----- The first line of the output should contain a single non-negative integer — the minimum number of operations required to transform the original string ( s1 ) into the target string ( s2 ). -----Examples----- Input abc yabd Output 2 Input kitten sitting Output 3 Input flaw lawn Output 2 -----Note----- In the first test case, the minimum number of operations is 2: replace \'a\' with \'y\' and insert \'d\' at the end. In the second test case, the minimum number of operations is 3: replace \'k\' with \'s\', replace \'e\' with \'i\', and append \'g\' at the end. In the third test case, the minimum number of operations is 2: insert \'n\' at the end, then delete \'f\' from the beginning.","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) return dp[m][n]"},{"question":"An island is represented by a 2D grid where \'1\' represents land and \'0\' represents water. An island is formed by connecting adjacent lands horizontally or vertically. Given a 2D grid containing only \'0\'s and \'1\'s, your task is to determine the perimeter of the island. The island does not have any \\"lakes\\" (water inside that isn\'t connected to the water around the island). Each cell is a square with a side length of 1. Example 1: Input: grid = [ [0, 1, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0] ] Output: 16 Explanation: The perimeter is the 16. Example 2: Input: grid = [ [1] ] Output: 4 Explanation: The perimeter is 4. Example 3: Input: grid = [ [1, 0] ] Output: 4 Explanation: The perimeter is 4. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `islandPerimeter()` that takes a list of list of integers grid as parameter and returns an integer denoting the perimeter of the island. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(1) Constraints: 1 <= grid.length, grid[i].length <= 100 grid[i][j] is 0 or 1.","solution":"def islandPerimeter(grid): perimeter = 0 rows = len(grid) cols = len(grid[0]) for i in range(rows): for j in range(cols): if grid[i][j] == 1: perimeter += 4 if i > 0 and grid[i-1][j] == 1: # Check above perimeter -= 2 if j > 0 and grid[i][j-1] == 1: # Check left perimeter -= 2 return perimeter"},{"question":"You are given a list of `orders` where each order is represented by a tuple containing the customer\'s name and the type of cuisine they ordered. The `orders` list may contain multiple orders from the same customer, and a customer can order multiple types of cuisine. Your task is to write a function that groups the orders by customer name and sorts the cuisines for each customer in alphabetical order. # Function Signature ```python def group_orders_by_customer(orders: List[Tuple[str, str]]) -> Dict[str, List[str]]: pass ``` # Input - `orders` (List[Tuple[str, str]]): A list of tuples where each tuple contains two strings: the customer\'s name and the type of cuisine they ordered. # Output - Returns a dictionary where the keys are customer names, and the values are lists of cuisine types that the customer ordered, sorted in alphabetical order. # Examples ```python # Example 1 orders = [ (\\"Alice\\", \\"Italian\\"), (\\"Bob\\", \\"Mexican\\"), (\\"Alice\\", \\"Japanese\\"), (\\"Bob\\", \\"Chinese\\"), (\\"Alice\\", \\"Mexican\\") ] print(group_orders_by_customer(orders)) # Output: { \\"Alice\\": [\\"Italian\\", \\"Japanese\\", \\"Mexican\\"], \\"Bob\\": [\\"Chinese\\", \\"Mexican\\"] } # Example 2 orders = [ (\\"John\\", \\"French\\"), (\\"John\\", \\"Italian\\"), (\\"Alice\\", \\"Chinese\\") ] print(group_orders_by_customer(orders)) # Output: { \\"John\\": [\\"French\\", \\"Italian\\"], \\"Alice\\": [\\"Chinese\\"] } # Example 3 orders = [ (\\"Dan\\", \\"Sushi\\"), (\\"Dan\\", \\"Ramen\\") ] print(group_orders_by_customer(orders)) # Output: { \\"Dan\\": [\\"Ramen\\", \\"Sushi\\"] } ``` # Constraints 1. The length of `orders` is between [1, 1000]. 2. All customer names and cuisine types are non-empty strings consisting of alphanumeric and space characters. 3. Customer names and cuisine types have a length between [1, 20] characters. 4. Customer names are case-sensitive. # Notes - You can assume that a customer will not order the same type of cuisine more than once. - Ensure that the final output for each customer contains cuisines sorted in alphabetical order.","solution":"from typing import List, Tuple, Dict def group_orders_by_customer(orders: List[Tuple[str, str]]) -> Dict[str, List[str]]: customer_orders = {} for name, cuisine in orders: if name not in customer_orders: customer_orders[name] = [] customer_orders[name].append(cuisine) for name in customer_orders: customer_orders[name].sort() return customer_orders"},{"question":"A spaceship named Orion is on a mission to explore a distant star system. The onboard navigation system needs to calculate the optimal path between several checkpoints in the star system. Each checkpoint is connected to some other checkpoints by a direct warp path. The spaceship must visit all checkpoints exactly once and return to the starting checkpoint to complete the mission. Due to the limited energy supply on Orion, you need to find the path with the minimum energy consumption. The energy consumption is given as a matrix where the element at row i and column j contains the energy required to travel directly from checkpoint i to checkpoint j. Write a function that takes the number of checkpoints and the energy consumption matrix as inputs and returns the minimal energy required to visit all the checkpoints exactly once and return to the start. -----Input----- The input consists of: - An integer n (2 le n le 10) representing the number of checkpoints. - A matrix of integers cost[n][n] representing the energy consumption, where cost[i][j] is the energy required to travel directly from checkpoint i to checkpoint j (1 le cost[i][j] le 1000). -----Output----- Return a single integer — the minimum energy required to visit all the checkpoints exactly once and return to the starting checkpoint. -----Examples----- Input 4 [ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ] Output 80 Input 3 [ [0, 20, 30], [20, 0, 10], [30, 10, 0] ] Output 60 -----Note----- In the first example, one possible minimal energy path is 0 -> 1 -> 3 -> 2 -> 0 with energy consumption 10 + 25 + 30 + 15 = 80. In the second example, one possible minimal energy path is 0 -> 1 -> 2 -> 0 with energy consumption 20 + 10 + 30 = 60.","solution":"from itertools import permutations def minimal_energy(n, cost): Returns the minimal energy required to visit all the checkpoints exactly once and return to the starting checkpoint. # All possible permutations of checkpoints (excluding the start which is always 0) all_permutations = permutations(range(1, n)) min_energy = float(\'inf\') for perm in all_permutations: # Calculate energy for this permutation current_energy = 0 prev_checkpoint = 0 # Start from checkpoint 0 for checkpoint in perm: current_energy += cost[prev_checkpoint][checkpoint] prev_checkpoint = checkpoint # Don\'t forget to add the return to the starting checkpoint current_energy += cost[prev_checkpoint][0] # Update the minimum energy min_energy = min(min_energy, current_energy) return min_energy"},{"question":"Maria has an undirected graph with n nodes and m edges. Each node has an integer value a_i assigned to it, indicating its initial load. The nodes communicate their load to each other in discrete time steps as follows: - In each step, for each pair of nodes that are directly connected by an edge, they pass their load to each other. The load passed from one node to another is equal to the value of the sender node minus the value of the receiver node, divided by 2 and rounded down (i.e., integer part of the division). Each of these operations occurs simultaneously for all pairs of connected nodes. Find the total number of operations required so that all nodes have the same load. If it\'s not possible for all nodes to have the same load, return -1 instead. -----Input----- The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. Description of test cases follows. The first line of each test case contains two integers n, m (1 leq n leq 3000, 0 leq m leq 4500) — the number of vertices and edges in the graph. The second line of each test case contains n integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^9) — the initial load on the vertices. Each of the following m lines contains two integers u, v (1 leq u, v leq n), representing an undirected edge between nodes u and v. It is guaranteed that the sum of n and the sum of m over all test cases are less than or equal to 10000. -----Output----- For each test case, print a single integer: the number of steps required for all nodes to have the same load, or -1 if it is not possible. -----Examples----- Input 4 3 3 3 1 2 1 2 2 3 3 1 4 5 3 5 4 6 1 2 2 3 3 4 4 2 1 3 2 0 1 0 5 5 1 1 1 1 1 1 2 2 3 3 4 4 5 5 1 Output 2 -1 0 0 -----Explanation----- In the first test case: - Initial values: [3, 1, 2] - After 1st step: [2, 2, 2] - All nodes have the same load after 2 steps. In the second test case: It\'s impossible to make all nodes have the same load, hence the answer is -1. In the third and fourth test cases: All nodes already have the same load initially, hence the answer is 0.","solution":"def find_steps_to_balance_load(t, test_cases): results = [] for case in test_cases: n, m, loads, edges = case total_load = sum(loads) # Check if balancing is possible if total_load % n != 0: results.append(-1) continue target_load = total_load // n steps = 0 can_balance = True for _ in range(n): new_loads = loads[:] load_changed = False for u, v in edges: if loads[u-1] != loads[v-1]: load_change = (loads[u-1] - loads[v-1]) // 2 new_loads[u-1] -= load_change new_loads[v-1] += load_change load_changed = True # If no loads changed, it means we are already balanced if not load_changed: break loads = new_loads steps += 1 if all(load == target_load for load in loads): break if all(load == target_load for load in loads): results.append(steps) else: results.append(-1) return results"},{"question":"Alice has a string S consisting of lowercase English letters. She is allowed to perform the following operation exactly once: Choose any two different characters in the string and swap all their occurrences. The goal is to make the string a palindrome. Determine if it is possible to convert the given string into a palindrome by performing the operation exactly once. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains a string S. ------ Output Format ------ For each test case, output \\"YES\\" if it is possible to make the string a palindrome by performing the operation exactly once. Otherwise, output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 500 1 ≤ |S| ≤ 10^{5} - The sum of the lengths of S over all test cases does not exceed 5 cdot 10^{5} ------ Sample Input 1 ------ 3 ab aabbcc abc ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Test Case 1: - Swap \'a\' and \'b\'. The string becomes \\"ba\\" which is a palindrome. Test Case 2: - The string \\"aabbcc\\" can be transformed into \\"bbaacc\\" or \\"ccaabb\\" which are palindromes by swapping pairs of characters. Test Case 3: - There is no way to make \\"abc\\" a palindrome by a single swap of all occurrences of two different characters.","solution":"def can_form_palindrome_by_swapping(S): from collections import Counter def can_form_palindrome_after_one_swap(S): # Check if the character frequencies can form a palindrome by perhaps swapping two characters freq = Counter(S) odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A palindrome can have at most one character with an odd count if odd_count > 2: return False # Special edge case when there are 2 odd frequencies and the sum of their counts is at most 3 # Example: xyyz has x:1, y:2, z:1 can be transformed into yxzy odd_freq_chars = [char for char in freq if freq[char] % 2 != 0] if odd_count == 2: if sum(freq[char] for char in odd_freq_chars) <= 3: return True return False return True return [ \\"YES\\" if can_form_palindrome_after_one_swap(S) else \\"NO\\" for S in S ] def process_input(lines): T = int(lines[0]) test_cases = lines[1:T+1] return can_form_palindrome_by_swapping(test_cases)"},{"question":"Given an integer X, determine if it is a perfect square. A perfect square is an integer that is the square of an integer. More formally, X is a perfect square if there exists an integer k such that k*k = X. Example 1: Input: X = 16 Output: 1 Explanation: 4*4 = 16, so 16 is a perfect square. Example 2: Input: X = 20 Output: 0 Explanation: There is no integer k such that k*k = 20. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPerfectSquare() which takes an integer X as input and returns an integer, 1 if X is a perfect square or 0 otherwise. Expected Time Complexity: O(log X) Expected Space Complexity: O(1) Constraints: 1 <= X <= 10^{9}","solution":"def isPerfectSquare(X): Determines if X is a perfect square. Args: X: int - the number to check. Returns: int: 1 if X is a perfect square, 0 otherwise. if X < 1: return 0 low, high = 1, X while low <= high: mid = (low + high) // 2 mid_squared = mid * mid if mid_squared == X: return 1 elif mid_squared < X: low = mid + 1 else: high = mid - 1 return 0"},{"question":"You are given a list of strings where each string contains a mix of upper and lower case letters. The challenge is to sort these strings first by length (ascending order), and then by lexicographical order (case-insensitive). Implement a function that does this and returns the sorted list. -----Input:----- - The first line will contain an integer T, the number of test cases. - Each test case contains multiple lines: - The first line of each test case contains an integer N, the number of strings. - The next N lines each contain a single string. -----Output:----- For each test case, output the sorted list of strings, one string per line. Separate the output of each test case with a blank line. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - 1 leq length of each string leq 100 -----Sample Input:----- 2 3 Apple apple Banana 4 pear Peach PEAR peach -----Sample Output:----- Apple apple Banana pear Peach peach PEAR","solution":"def sort_strings_by_length_and_lexicographical(case_strings): Sort the list of strings first by length in ascending order, then by lexicographical order (case-insensitive). return sorted(case_strings, key=lambda s: (len(s), s.lower())) def process_test_cases(test_cases): results = [] for case in test_cases: sorted_case = sort_strings_by_length_and_lexicographical(case) results.append(sorted_case) return results def main(T, test_cases): sorted_test_cases = process_test_cases(test_cases) return sorted_test_cases"},{"question":"Tom\'s digital library contains a collection of books, each identified by a unique integer ID. He wants to reorganize his library shelf so that all books with the same ID are adjacent to each other, while also maintaining the general order of appearance of the unique IDs as in the original collection. Write a program to help Tom reorganize his books accordingly. Input: - The first line contains an integer `n` (1 ≤ n ≤ 2000) — the number of books. - The second line contains `n` space-separated integers, each representing the ID of a book. Output: - Print the reorganized list of book IDs such that all books with the same ID are grouped together, preserving the first occurrence order of the unique IDs. Example: Input: 7 4 2 4 3 2 4 3 Output: 4 4 4 2 2 3 3 Input: 5 1 1 1 1 1 Output: 1 1 1 1 1 Note: In the first example, though IDs 4, 2, and 3 all appear multiple times, they are grouped together preserving their initial order of first appearance.","solution":"def reorganize_books(n, book_ids): from collections import OrderedDict book_order = OrderedDict() for book_id in book_ids: if book_id in book_order: book_order[book_id].append(book_id) else: book_order[book_id] = [book_id] result = [] for books in book_order.values(): result.extend(books) return result # Example usage: # n = 7 # book_ids = [4, 2, 4, 3, 2, 4, 3] # print(reorganize_books(n, book_ids)) # Output: [4, 4, 4, 2, 2, 3, 3]"},{"question":"Alice and Bob are two friends who love playing games with numbers. One day, they come up with a new game where Alice picks a number n and Bob picks two integers a and b. Alice needs to create an array of length n using the integers a and b. The game rules are as follows: 1. The array must be of length n. 2. Each element in the array must be either a or b. 3. The array must be sorted in non-decreasing order (non-descending order), which means all \'a\'s must come before all \'b\'s. 4. The array must have at least one occurrence of both a and b. Help Alice determine how many different arrays she can create under these conditions. Input The input consists of a single line containing three integers n, a, and b (2 ≤ n ≤ 10^5, 1 ≤ a, b ≤ 10^6, a ≠ b). Output Print the number of different arrays Alice can create. Examples Input 5 2 3 Output 4 Input 3 7 4 Output 2 Input 10 5 10 Output 9 Explanation In the first example with n=5, a=2, and b=3, the possible arrays that Alice can create are: [2, 2, 2, 2, 3], [2, 2, 2, 3, 3], [2, 2, 3, 3, 3], [2, 3, 3, 3, 3]. Hence, there are 4 different arrays. In the second example with n=3, a=7, and b=4, the possible arrays are: [4, 7, 7], [4, 4, 7]. Hence, there are 2 different arrays. In the third example with n=10, a=5, and b=10, the possible arrays range from having one 10 to nine 10s, while the remaining elements are all 5. Hence, there are 9 different arrays.","solution":"def count_possible_arrays(n, a, b): Returns the number of different arrays of length n that can be created using integers a and b that are sorted and contain at least one occurrence of both a and b. if a == b or n < 2: return 0 # Number of ways to create an array is just n-1, as there are n-1 places to switch from a to b return n - 1"},{"question":"You are tasked with developing a scheduling system for a one-day conference. The conference has n sessions with specific start and end times. You need to ensure that no two sessions overlap, as there\'s only one room available. Write a program to find the maximum number of non-overlapping sessions you can attend. -----Input----- The input consists of: - An integer n (1 leq n leq 10^5), the number of sessions. - n lines, each containing two integers s_i and e_i (0 leq s_i < e_i leq 10^9), the start and end times of the sessions. -----Output----- Write a single integer, the maximum number of non-overlapping sessions you can attend. -----Examples----- Sample Input: 3 1 4 2 3 3 5 Sample Output: 2","solution":"def max_non_overlapping_sessions(n, sessions): Returns the maximum number of non-overlapping sessions one can attend. Parameters: - n: integer, number of sessions - sessions: list of tuples, where each tuple contains two integers representing the start and end times of a session Returns: - integer, the maximum number of non-overlapping sessions # Sort the sessions by their ending times sessions.sort(key=lambda x: x[1]) # Initialize variables count = 0 last_end_time = -1 for start, end in sessions: # If the start time of the current session is after the end time of the last taken session if start >= last_end_time: count += 1 last_end_time = end # Update the end time to the end of the current session return count"},{"question":"Longest Increasing Subsequence Given an integer array, find the length of the longest increasing subsequence. An increasing subsequence is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements, and the elements in the sequence are in sorted order. Constraints * 1 ≤ n ≤ 2500 * -10^4 ≤ arr[i] ≤ 10^4 Input The first line consists of an integer n which represents the length of the array. The second line consists of n space-separated integers representing the array elements. Output Print the length of the longest increasing subsequence in a line. Examples Input 6 10 9 2 5 3 7 101 18 Output 4 Input 8 0 1 0 3 2 3 Output 4","solution":"def length_of_lis(arr): Returns the length of the longest increasing subsequence in the array arr. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a matrix representing an image consisting of pixels, where each pixel is either black (represented by 1) or white (represented by 0). The pixel at position (i, j) represents the color of the pixel at that specific coordinate in the matrix. Your task is to deflect the image diagonally along the main diagonal (top-left to bottom-right) if it is a square matrix. When the image is deflected diagonally, the rows and columns swap their places maintaining the same image pattern, meaning the pixel (i, j) in the original image will be placed at (j, i) in the deflected image. If the matrix is not square, return \\"Invalid Matrix\\". Take care to handle multiple test cases. -----Input----- The first line of the input contains an integer t (1 le t le 100) — the number of test cases. Each test case starts with two integers n and m (1 le n, m le 50) — the dimensions of the image matrix. The next n lines contain m space-separated integers (0 or 1) representing the image matrix. -----Output----- For each test case, print the resulting matrix after diagonally deflecting the image. If the matrix is not square, print \\"Invalid Matrix\\". -----Example----- Input 2 3 3 1 0 0 0 1 0 0 0 1 2 3 1 0 0 0 1 0 Output 1 0 0 0 1 0 0 0 1 Invalid Matrix","solution":"def deflect_image(t, cases): results = [] for case in cases: n, m, matrix = case if n != m: results.append(\\"Invalid Matrix\\") else: deflected_matrix = [[matrix[j][i] for j in range(n)] for i in range(n)] results.append(deflected_matrix) return results"},{"question":"**Sam has a string `s` consisting of lowercase English letters. He wants to rearrange the string such that no two adjacent characters are the same. If there are multiple possible solutions, Sam will accept any of them. If no such arrangement exists, return the string \\"-1\\". Can you help Sam find such a rearrangement?** -----Input----- A single line containing the string `s` (1 ≤ |s| ≤ 10^5). -----Output----- Print a possible rearrangement of the string such that no two adjacent characters are the same. If no such arrangement exists, print \\"-1\\". -----Examples----- Input aab Output aba Input aaab Output -1 Input aabbcc Output abcabc","solution":"from collections import Counter import heapq def rearrange_string(s): Rearrange the string such that no two adjacent characters are the same. If no such arrangement exists, return \\"-1\\". # Count the frequencies of each character in the string char_count = Counter(s) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_char is not None: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 # Update count to reflect usage of one instance of `char` if -prev_count == 0: prev_char = None # Reset `prev_char` after we\'ve used all instances # If the rearranged string\'s length does not match the original, it means rearrangement failed rearranged_string = \\"\\".join(result) if len(rearranged_string) != len(s): return \\"-1\\" return rearranged_string"},{"question":"A string is considered to be \\"harmonious\\" if it contains at least one pair of adjacent characters that are the same. Given a string s consisting of lowercase English letters, your task is to determine the minimum number of characters that need to be inserted into the string to make it harmonious. You can insert characters at any position. Input The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Each test case consists of a single line containing the string s (1 ≤ |s| ≤ 100) — the string for which you are to find the minimum number of insertions. Output For each test case, output a single integer — the minimum number of characters that need to be inserted to make the string harmonious. Examples Input 3 abc a aabb Output 2 1 0 Note In the first example, the string \\"abc\\" can become harmonious by inserting one \'a\' to get \\"aabc\\" or \\"abac\\" or by inserting one \'b\' to get \\"abbc\\", etc. For the smallest number of insertions, two characters can be inserted at the start or end to produce \\"aabbc\\" or \\"abccb\\". In the second example, the minimal harmonious string can be \\"aa\\". In the third example, the string \\"aabb\\" is already harmonious because it contains pairs of \'a\' and \'b\' respectively, so no extra characters are needed.","solution":"def min_insertions_to_harmonious(s): Returns the minimum number of insertions needed to make the string harmonious. n = len(s) if n < 2: return 1 # Minimum length of harmonious string is 2; insert 1 character to achieve this for i in range(n-1): if s[i] == s[i+1]: return 0 # If there are already two adjacent same characters, it\'s already harmonious return 2 # If no adjacent same characters, we need at least 2 insertions to create two adjacent pairs def process_test_cases(t, test_cases): Processes multiple test cases and returns a list of results for each string. results = [] for s in test_cases: results.append(min_insertions_to_harmonious(s)) return results"},{"question":"A notable fisheries research institute has recently made a significant advancement in their understanding of marine life by using computational models. To further their research, they need to analyze sequences of fish movements that are represented by arrays. The researchers have identified that certain patterns within these sequences denote significant activity. You need to help them find such patterns to analyze the behavior of the fish. The problem is formulated as follows: Given an array of integers that represent the position of fish in a sequence, identify the longest contiguous sub-array where the sum of its elements is equal to zero. # Input Format: - The first line contains a single integer, `n`, the number of elements in the array. - The second line contains `n` space-separated integers, representing the elements of the array. # Output Format: - On the only line of output, print the length of the longest contiguous sub-array with a sum of zero. If no such sub-array exists, print `0`. # Constraints: - 1 ≤ n ≤ 10^5 - -10^6 ≤ array[i] ≤ 10^6 # Sample Input: ``` 5 1 -1 3 -2 2 ``` # Sample Output: ``` 3 ``` # Sample Input: ``` 6 4 -3 1 -1 2 -2 ``` # Sample Output: ``` 4 ``` # Explanation: For the first sample input, the sub-array `[1, -1, 3, -2, 2]` has the sub-array `[1, -1]` which sums to zero, `[3, -2, -1]` which sums to zero, `[3, -2, 2, -3]` which sums to zero, as well as `[1, -1, 3]`. The longest of these is `[3, -2, 2]` with length `3`. For the second sample input, the sub-array `[4, -3, 1, -1, 2, -2]` has several sub-arrays which can be checked. The longest sub-array with sum zero is `[1, -1, 2, -2]` with length `4`.","solution":"def longest_subarray_with_zero_sum(n, arr): This function returns the length of the longest contiguous sub-array with a sum of zero. :param n: int - number of elements in the array :param arr: list of int - the elements of the array :return: int - the length of the longest contiguous sub-array with a sum of zero prefix_sum_indices = {} current_sum = 0 max_length = 0 for i in range(n): current_sum += arr[i] if current_sum == 0: max_length = i + 1 if current_sum in prefix_sum_indices: max_length = max(max_length, i - prefix_sum_indices[current_sum]) else: prefix_sum_indices[current_sum] = i return max_length"},{"question":"You are given an array of positive integers. You need to determine the product of the elements at all even indices and the sum of the elements at all odd indices. An even index is an index that is an even number (0, 2, 4, ...), and an odd index is an index that is an odd number (1, 3, 5, ...). Write a program that takes an integer n and an array of n positive integers as input, and outputs the product of the elements at all even indices and the sum of the elements at all odd indices. # Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^3) — the elements of the array. # Output Output two integers: - The product of the elements at all even indices. - The sum of the elements at all odd indices. # Example 1 Input ``` 6 2 3 4 5 6 7 ``` Output ``` 48 15 ``` # Example 2 Input ``` 5 1 2 3 4 5 ``` Output ``` 15 6 ``` # Explanation - In the first example, the elements at the even indices are 2, 4, 6, and their product is 2 * 4 * 6 = 48. The elements at the odd indices are 3, 5, 7, and their sum is 3 + 5 + 7 = 15. - In the second example, the elements at the even indices are 1, 3, 5, and their product is 1 * 3 * 5 = 15. The elements at the odd indices are 2, 4, and their sum is 2 + 4 = 6.","solution":"def even_product_odd_sum(n, arr): Returns the product of the elements at all even indices and the sum of the elements at all odd indices. Parameters: n (int): The number of elements in the array. arr (list of int): The array of n positive integers. Returns: tuple: A tuple containing two integers: - The product of the elements at all even indices. - The sum of the elements at all odd indices. even_product = 1 odd_sum = 0 for i in range(n): if i % 2 == 0: even_product *= arr[i] else: odd_sum += arr[i] return (even_product, odd_sum)"},{"question":"You are organizing a gaming tournament where each player competes in a series of games. To determine the ranking of the players, you need to calculate their total scores and sort them accordingly. The players are ranked based on their total scores in descending order, and if two players have the same score, they are ranked alphabetically by their names. Write a program that reads the names and scores of players from multiple games and outputs the ranked list of players. -----Input----- The input consists of several test cases. The first line contains the number of test cases t (1 le t le 100). Each test case starts with an integer p (1 le p le 100) — the number of players. The following p lines each contain the name of a player (a string consisting of 1 to 20 alphanumeric characters) and their score in a game (an integer between 0 and 1000). It is guaranteed that the total number of players across all test cases does not exceed 1000. -----Output----- For each test case, output the ranked list of players. Each player\'s name should be printed on a new line in the order of their ranking. Separate the output for different test cases with a blank line. -----Examples----- Input 2 3 Alice 100 Bob 200 Charlie 150 4 Dave 300 Eve 300 Frank 100 Grace 200 Output Bob Charlie Alice Dave Eve Grace Frank","solution":"def rank_players(test_cases): Ranks the players based on their total scores in descending order. If two players have the same score, they are ranked alphabetically by their names. :param test_cases: List of test cases where each case is a list of tuples containing player\'s name and score. :return: List of lists where each list contains ranked player names for the corresponding test case. result = [] for case in test_cases: players = [(name, score) for name, score in case] players.sort(key=lambda x: (-x[1], x[0])) # sort by score desc and name asc ranked_names = [name for name, score in players] result.append(ranked_names) return result"},{"question":"Given a list of integers `arr`, you need to find the size of the smallest subarray such that its sum is greater than or equal to a given value `S`. If no such subarray exists, return 0. Examples ```python def smallest_subarray_size(arr, S): pass # Example usage: smallest_subarray_size([2, 1, 5, 2, 3, 2], 7) # Output: 2 (subarray [5, 2] or [2, 5]) smallest_subarray_size([2, 1, 5, 2, 8], 7) # Output: 1 (subarray [8]) smallest_subarray_size([3, 4, 1, 1, 6], 8) # Output: 3 (subarray [3, 4, 1] or [4, 1, 3]) smallest_subarray_size([1, 2, 3, 4], 15) # Output: 0 (no subarray sums to 15 or more) ```","solution":"def smallest_subarray_size(arr, S): Returns the size of the smallest subarray such that its sum is greater than or equal to S. n = len(arr) min_length = float(\'inf\') start = 0 current_sum = 0 for end in range(n): current_sum += arr[end] while current_sum >= S: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"A team of treasure hunters has discovered an ancient map that represents a rectangular grid of land, where each cell can either be land or water. They need to determine how many distinct islands are present on the map. An island is defined as a group of connected land cells (horizontally or vertically connected). -----Input----- First line contains two integers, R and C, indicating the number of rows and columns of the map. Next R lines each contains a string of length C, where each character represents either land (\'L\') or water (\'W\'). -----Output----- A single integer representing the number of distinct islands. -----Constraints----- 1 <= R, C <= 50 -----Example----- Input: 4 5 LWLWL LWLWL WWWWW WWLLW Output: 4 -----Explanation----- There are 4 distinct islands in the given map: 1. The top left \'L\'. 2. The second \'L\' in the first row. 3. The bottom right land mass consists of two \'L\' connected cells. 4. The bottom left \'L\'. Multiple \'L\' cells connected horizontally or vertically form a single island, and different groups of these cells are considered distinct islands.","solution":"def num_islands(grid): Returns the number of distinct islands in the given grid. def dfs(r, c): if r < 0 or r >= R or c < 0 or c >= C or grid[r][c] == \'W\' or visited[r][c]: return visited[r][c] = True dfs(r + 1, c) dfs(r - 1, c) dfs(r, c + 1) dfs(r, c - 1) R = len(grid) C = len(grid[0]) visited = [[False for _ in range(C)] for _ in range(R)] count = 0 for r in range(R): for c in range(C): if grid[r][c] == \'L\' and not visited[r][c]: dfs(r, c) count += 1 return count"},{"question":"Create a function that, given an array of integers, returns a new array containing only the unique elements from the original array, in the same order they first appeared. Example Input and Output: ```python unique_elements([1, 2, 2, 3, 4, 4, 5]) # returns [1, 2, 3, 4, 5] unique_elements([4, 3, 2, 1, 2, 3, 4]) # returns [4, 3, 2, 1] unique_elements([7, 8, 7, 9, 10]) # returns [7, 8, 9, 10] ```","solution":"def unique_elements(arr): Returns a new array containing only the unique elements from the original array, in the same order they first appeared. seen = set() unique = [] for elem in arr: if elem not in seen: unique.append(elem) seen.add(elem) return unique"},{"question":"Given an integer array representing heights of devices in a room. You need to find the devices which can receive light from a light source placed on the far right end of the room. A device can receive light if there is no device with equal or greater height located to the right. Example 1: Input: heights = [3, 7, 8, 3, 6, 1] Output: [8, 6, 1] Explanation: Devices with heights 8, 6, and 1 can receive light since there are no taller devices to their right. Example 2: Input: heights = [10, 4, 5, 2, 6, 3] Output: [10, 6, 3] Explanation: Devices with heights 10, 6, and 3 can receive light. Your Task: You don\'t need to read input or print anything. Complete the function `receivesLight()` which takes a list of integers `heights` as an input parameter and returns a list of integers representing the heights that can receive light. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= heights.length <= 10^5 1 <= heights[i] <= 10^9","solution":"def receivesLight(heights): Returns the list of devices which can receive light from the far right end. res = [] max_height = float(\'-inf\') for height in reversed(heights): if height > max_height: res.append(height) max_height = height res.reverse() # Since we traversed from right to left, reverse the result to maintain the original order return res"},{"question":"Lucy is an avid collector of unique stones. Each stone in her collection has a unique integer identifier. She has recently acquired a special box that allows her to perform magical operations on her stones. The box can take a group of stones and return the sum of the unique identifiers of the two stones with the smallest values in the group. Lucy wants to test the box\'s capabilities but needs your help to determine the outcome of performing multiple operations on different groups of stones. Your task is to write a program that, for each group of stones, finds the sum of the unique identifiers of the two stones with the smallest values. Input: - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer K, the number of stones in the group. - The second line contains K integers representing the unique identifiers of the stones. Output: For each test case, output a single integer, the sum of the unique identifiers of the two stones with the smallest values in the group. Constraints: - 1 ≤ T ≤ 1000 - 2 ≤ K ≤ 10^5 - The unique identifiers are distinct integers that can fit into a 32-bit signed integer range SAMPLE INPUT 3 5 7 3 5 1 9 4 6 2 4 8 6 10 3 6 1 7 2 SAMPLE OUTPUT 4 6 3","solution":"def smallest_sum_pairs(T, test_cases): For each test case, return the sum of the two smallest unique identifiers of the stones. :param T: int : Number of test cases :param test_cases: list of tuples : Each tuple contains (K, stone_identifiers) where K is the length of stone_identifiers :return: list of int : List of results for each test case results = [] for case in test_cases: K, stones = case # Sort the stone identifiers and find the sum of the two smallest values sorted_stones = sorted(stones) results.append(sorted_stones[0] + sorted_stones[1]) return results # Example usage: # T = 3 # test_cases = [ # (5, [7, 3, 5, 1, 9]), # (4, [6, 2, 4, 8]), # (6, [10, 3, 6, 1, 7, 2]) # ] # print(smallest_sum_pairs(T, test_cases)) # Output: [4, 6, 3]"},{"question":"# Problem Statement Given a string `s` consisting of the characters \'(\', \')\', \'{\', \'}\', \'[\', and \']\', we need to implement a program that can determine the minimum number of insertions or deletions required to make the string a valid parentheses sequence. A valid parentheses sequence satisfies the following criteria: 1. Each open parenthesis must have a corresponding close parenthesis of the same type. 2. Parentheses must be properly nested. For example, \\"()\\" and \\"([])\\" are valid parentheses sequences, but \\")(\\", \\"([)]\\", and \\"[(])\\" are not. # Task Write a program that, given a string `s`, outputs the minimum number of insertions or deletions required to make `s` a valid parentheses sequence. # Input - A single line containing the string `s` (1 ≤ |s| ≤ 100,000), consisting solely of the characters \'(\', \')\', \'{\', \'}\', \'[\', and \']\'. # Output - A single integer representing the minimum number of insertions or deletions required to make the string a valid parentheses sequence. # Example Input ``` ([)] ``` Output ``` 2 ``` Input ``` ((())) ``` Output ``` 0 ``` Input ``` {[}] ``` Output ``` 2 ``` # Explanation In the first example, you need to remove the first closing parenthesis \')\' and insert it after the second opening parenthesis \'[\' to make it \\"([])\\". Total operations: 2. In the second example, the sequence is already valid, so no modifications are needed. In the third example, you need to convert `}]` to `{}`, which involves 2 changes.","solution":"def min_insertions_deletions_to_make_valid(s): Given a string s consisting of the characters \'(\', \')\', \'{\', \'}\', \'[\', and \']\', returns the minimum number of insertions or deletions required to make the string a valid parentheses sequence. stack = [] operations = 0 # Map to find pairs of parentheses pairs = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in pairs.values(): # if it\'s an opening bracket stack.append(char) elif char in pairs.keys(): # if it\'s a closing bracket if not stack: operations += 1 # need an insertion for missing opening bracket elif stack[-1] == pairs[char]: stack.pop() # valid matching pair found else: operations += 1 # need a deletion of closing bracket while stack and stack[-1] != pairs[char]: # remove unmatched opening brackets stack.pop() # Any remaining opening brackets require deletions operations += len(stack) return operations"},{"question":"In a simplified electoral system, there are n available seats and m candidates running for these seats. Each seat has a weight associated with it, which represents its importance. The candidates have different abilities to secure seats based on their influence. The election proceeds as follows: on the first round, the candidate with the highest influence secures the seat with the highest weight, the candidate with the second highest influence secures the seat with the second highest weight, and so on, until all n seats are filled or all m candidates have secured seats. If there are fewer seats than candidates, additional candidates are left without a seat. If there are more seats than candidates, the remaining seats are unfilled. Given the influence of each candidate and the weight of each seat, determine which candidates secure which seats. -----Input----- The first line of the input contains two integers n (1 leq n leq 100), the number of seats, and m (1 leq m leq 100), the number of candidates. The second line contains n integers representing the weights of the seats, separated by spaces. Each weight is a positive integer, and the weights are unique. The third line contains m integers representing the influence of the candidates, separated by spaces. Each influence is a positive integer. -----Output----- Display a list of the seats each candidate secures. If a candidate is left without a seat, output \\"None\\". Each line should contain one integer indicating the seat weight secured by the corresponding candidate in the order of input. If a candidate does not secure a seat, display \\"None\\". -----Examples----- Sample Input: 3 4 30 20 10 80 50 40 10 Sample Output: 30 20 10 None","solution":"def election_results(n, m, seat_weights, candidate_influences): Determines which candidates secure which seats based on their influences and seat weights. Parameters: n (int): Number of seats m (int): Number of candidates seat_weights (list of int): Weights of the seats candidate_influences (list of int): Influences of the candidates Returns: list: List of seat weights secured by each candidate in the order of their input influences, or \\"None\\" if they do not secure a seat. sorted_seats = sorted(seat_weights, reverse=True) sorted_candidates = sorted(candidate_influences, reverse=True) seat_mapping = {} for i, influence in enumerate(sorted_candidates): if i < len(sorted_seats): seat_mapping[influence] = sorted_seats[i] else: seat_mapping[influence] = \\"None\\" return [seat_mapping[influence] for influence in candidate_influences] # Example usage: # print(election_results(3, 4, [30, 20, 10], [80, 50, 40, 10]))"},{"question":"You are given a sequence of non-negative integers a_1, a_2, dots, a_n. Let\'s denote the bitwise AND operation as `&` and bitwise OR operation as `|`. Anu defines the following function g(x, y): [ g(x, y) = (x & y) | (x oplus y) ] where oplus denotes the bitwise XOR operation. She would like to reorder the sequence to maximize the result of the following computation: [ g(g(dots g(a_1, a_2) dots a_{n-1}), a_n) ] Can you help Anu find an optimal ordering of the sequence elements? -----Input----- The first line contains a single integer n (1 le n le 10^5). The second line contains n integers a_1, a_2, ldots, a_n (0 le a_i le 10^9). Elements of the array are not guaranteed to be distinct. -----Output----- Output n integers, the reordering of the array with the maximum possible value for the function g. If there are multiple correct answers, print any. -----Examples----- Input 4 4 1 7 3 Output 7 4 1 3 Input 2 2 10 Output 10 2 -----Note----- In the first testcase, the value of the array [7, 4, 1, 3] calculated with g(g(g(7, 4), 1), 3) results in maximizing the function. In the second testcase, both [10, 2] and [2, 10] are valid answers because the function g will give the same result regardless of the order.","solution":"def reorder_for_max_g(n, arr): Reorders the array to maximize the result of the function g on the sequence. :param n: int, the length of the array :param arr: list of int, the array of non-negative integers :return: list of int, reordered array # Sorting array in descending order sorted_arr = sorted(arr, reverse=True) return sorted_arr"},{"question":"Given a list of integers, determine whether it is possible to select a contiguous subarray of the list whose sum equals a given value S. If it is possible, print the starting and ending indices (0-based) of such a subarray. If there are multiple solutions, any one of them will suffice. If no such subarray exists, print -1. -----Constraints----- - 1 leq Length of the list leq 10^5 - -10^9 leq Value of each integer leq 10^9 - -10^9 leq S leq 10^9 -----Input----- Input is given from Standard Input in the following format: N S A_1 A_2 ... A_N -----Output----- If a contiguous subarray summing to S is found, print two integers representing the starting and ending indices of the subarray, otherwise print -1. -----Sample Input----- 8 15 1 2 3 7 5 3 2 1 -----Sample Output----- 2 4 In this case, the subarray [3, 7, 5] sums to 15.","solution":"def find_subarray_with_sum(N, S, array): left = 0 current_sum = 0 for right in range(N): current_sum += array[right] while current_sum > S and left <= right: current_sum -= array[left] left += 1 if current_sum == S: return left, right return -1"},{"question":"Rohan loves books and he has a collection of `N` books on his shelf, each with a certain number of pages. He likes to select a continuous segment of books such that the total number of pages in those books is at most `P`. He wants to know the length of the longest such segment. ------ Input Format ------ - The first line of the input contains a single integer `T` - the number of test cases. The description of `T` test cases follows. - The first line of each test case contains two integers `N` and `P` - the number of books and the maximum total number of pages allowed. - The second line of each test case contains `N` space-separated integers, representing the number of pages in each book on the shelf. ------ Output Format ------ For each test case, output the length of the longest segment of books such that the total number of pages in the segment is at most `P`. ------ Constraints ------ 1 ≤T ≤100 1 ≤N ≤10^5 1 ≤P ≤10^9 1 ≤ text{Number of pages in each book} ≤10^6 ----- Sample Input 1 ------ 2 5 10 1 2 3 4 5 4 50 12 15 5 32 ----- Sample Output 1 ------ 4 3 ----- Explanation 1 ------ Test case-1: The longest segment with total pages at most `10` is `[1, 2, 3, 4]` consisting of 4 books. Test case-2: The longest segment with total pages at most `50` is `[12, 15, 5]` consisting of 3 books.","solution":"def longest_segment_with_max_pages(t, test_cases): results = [] for i in range(t): N, P = test_cases[i][0] pages = test_cases[i][1] left = 0 current_sum = 0 max_length = 0 for right in range(N): current_sum += pages[right] while current_sum > P: current_sum -= pages[left] left += 1 max_length = max(max_length, right - left + 1) results.append(max_length) return results"},{"question":"You are given a list of n integers (1 ≤ n ≤ 10^5) and an integer x. You need to find the number of pairs (i, j) such that 1 ≤ i < j ≤ n and the absolute difference between the i-th and j-th integer is exactly x. Input The first line contains two integers n and x (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 10^9) — the number of integers and the required difference respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the list of integers. Output Print a single integer, the number of pairs (i, j) such that 1 ≤ i < j ≤ n and |ai - aj| = x. Example Input 5 2 1 5 3 4 2 Output 3 Input 6 1 1 3 1 5 4 4 Output 4 Note In the first example, the pairs are: - (1, 5) where |1 - 3| = 2 - (2, 4) where |5 - 3| = 2 - (4, 5) where |4 - 2| = 2 In the second example, the pairs are: - (1, 3) where |1 - 1| = 0 - (4, 5) where |5 - 4| = 1 - (4, 6) where |5 - 4| = 1 - (5, 6) where |4 - 4| = 0","solution":"def count_pairs_with_difference(arr, x): Returns the number of pairs (i, j) such that 1 ≤ i < j ≤ n and |arr[i] - arr[j]| = x. count = 0 value_counts = {} for num in arr: if num + x in value_counts: count += value_counts[num + x] if num - x in value_counts: count += value_counts[num - x] if num in value_counts: value_counts[num] += 1 else: value_counts[num] = 1 return count"},{"question":"Write a function that takes a variable number of strings as its parameters and returns a dictionary summarizing the frequency of each character found in all the input strings combined. The function should count each letter case-insensitively, considering \'A\' and \'a\' as the same character. So: ```python char_frequency(\\"hello\\", \\"world\\") == {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} char_frequency(\\"Python\\", \\"is\\", \\"great\\") == {\'p\': 1, \'y\': 1, \'t\': 2, \'h\': 1, \'o\': 1, \'n\': 1, \'i\': 1, \'s\': 1, \'g\': 1, \'r\': 1, \'e\': 1, \'a\': 1} ```","solution":"def char_frequency(*strings): Returns a dictionary summarizing the frequency of each character found in all the input strings combined, considering characters case-insensitively. frequency = {} for string in strings: for char in string.lower(): if char.isalpha(): # Only consider alphabetic characters if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"You are in charge of managing patient appointments for a busy clinic. Each patient\'s appointment is represented by a tuple (start_time, end_time), where both start_time and end_time are given in 24-hour format. Your task is to determine if a new patient\'s appointment can be successfully added to the existing schedule without causing any overlaps. Write a function `can_schedule_appointment(existing_appointments, new_appointment)` that takes a list of tuples `existing_appointments`, where each tuple contains the start and end times of all currently scheduled appointments, and a single tuple `new_appointment` representing the new appointment request. The function should return `True` if the new appointment can be added without any conflicts, and `False` otherwise. # Function Signature ```python def can_schedule_appointment(existing_appointments: List[Tuple[int, int]], new_appointment: Tuple[int, int]) -> bool: pass ``` # Input - `existing_appointments`: A list of tuples, where each tuple (a, b) represents an existing appointment with start time `a` and end time `b`. - `new_appointment`: A tuple (a, b) representing the new appointment with start time `a` and end time `b`. # Output - Return `True` if the new appointment can be scheduled without overlapping any existing appointments, otherwise return `False`. # Constraints - The input times are given in 24-hour format. - Each time is an integer in the range [0, 2359], where the last two digits represent the minutes and the prior digits represent the hours. - All appointments start and end on the same day. - The new appointment must have start time less than end time. # Example Example 1 ```python existing_appointments = [(900, 1030), (1200, 1300), (1400, 1500)] new_appointment = (1030, 1230) print(can_schedule_appointment(existing_appointments, new_appointment)) # Output: True ``` Example 2 ```python existing_appointments = [(900, 1030), (1200, 1300), (1400, 1500)] new_appointment = (1100, 1230) print(can_schedule_appointment(existing_appointments, new_appointment)) # Output: False ``` Example 3 ```python existing_appointments = [] new_appointment = (800, 830) print(can_schedule_appointment(existing_appointments, new_appointment)) # Output: True ```","solution":"from typing import List, Tuple def can_schedule_appointment(existing_appointments: List[Tuple[int, int]], new_appointment: Tuple[int, int]) -> bool: Determine if the new appointment can be added without overlapping existing appointments. new_start, new_end = new_appointment for start, end in existing_appointments: if not (new_end <= start or new_start >= end): return False return True"},{"question":"Write a function `pig_latin_converter` that converts a given sentence to Pig Latin. The rules for converting words to Pig Latin are as follows: 1. If a word begins with a vowel (a, e, i, o, u), add \\"way\\" to the end of the word. 2. If a word begins with a consonant, move the first consonant or consonant cluster to the end of the word, and add \\"ay.\\" 3. Maintain capitalization: If the original word is capitalized, the Pig Latin word should also be capitalized. 4. Preserve punctuation: If a word has punctuation attached to it, such as a full stop, comma, etc., it should remain at the end of the word. 5. Ignore non-alphabetic characters when processing and keep them as they are. Example: ```python pig_latin_converter(\\"Hello world!\\") ==> \\"Ellohay orldway!\\" ``` ```python def pig_latin_converter(sentence): # Your code here # Example usage print(pig_latin_converter(\\"Hello world!\\")) ```","solution":"def pig_latin_converter(sentence): import re def convert_word(word): vowels = \\"aeiouAEIOU\\" punctuation = \'\'.join(ch for ch in word if not ch.isalpha()) stripped_word = \'\'.join(ch for ch in word if ch.isalpha()) if not stripped_word: return word is_capitalized = stripped_word[0].isupper() if stripped_word[0] in vowels: pig_latin = stripped_word + \\"way\\" else: consonant_cluster = re.match(r\\"[^aeiouAEIOU]+\\", stripped_word).group() pig_latin = stripped_word[len(consonant_cluster):] + consonant_cluster.lower() + \\"ay\\" if is_capitalized: pig_latin = pig_latin.capitalize() return pig_latin + punctuation words = sentence.split() converted_words = [convert_word(word) for word in words] return \' \'.join(converted_words)"},{"question":"\\"Piano Tiles\\" Leo loves playing the popular game \\"Piano Tiles,\\" where he has to quickly press a series of tiles that appear in a column. Each tile can either be black or white. He can start by pressing any tile and then move up or down to adjacent tiles. However, the game has a rule: if he lands on a black tile, he must move to a white tile next, and vice versa. Leo wants to know if he can press exactly `k` consecutive tiles following the game\'s rules, starting from any tile. Help Leo determine if it\'s possible. -----Input----- The first line contains two integers `n` and `k` (1 le k le n le 10^5), where `n` is the number of tiles and `k` is the number of consecutive tiles Leo needs to press. The second line contains a single string of length `n` that only consists of `B` and `W`, representing the sequence of tiles, where `B` indicates a black tile and `W` indicates a white tile. -----Output----- Print \\"yes\\" (without quotes) if Leo can press exactly `k` consecutive tiles following the game\'s rules. Otherwise, print \\"no\\" (without quotes). -----Examples----- Input 6 4 BWBWBW Output yes Input 5 6 BWBWB Output no Input 8 3 WWBBWBWW Output yes Input 3 1 BWB Output yes -----Note----- In the first example, Leo can start from the first tile and press the first four tiles (`BWBW`). In the second example, it is impossible to press 6 consecutive tiles as there are only 5 tiles. In the third example, Leo can start from the third tile and press tiles `BWB`. In the fourth example, Leo can press any single tile to meet the requirement of pressing `k=1` consecutive tiles.","solution":"def can_press_k_consecutive_tiles(n, k, tile_sequence): if k == 1: return \\"yes\\" for i in range(n - k + 1): valid_sequence = True for j in range(i, i + k - 1): if tile_sequence[j] == tile_sequence[j + 1]: valid_sequence = False break if valid_sequence: return \\"yes\\" return \\"no\\""},{"question":"Write a function that takes an array of integers and returns a new array with each element being the product of every other element in the original array except the one at the current position. For example, given the array `[1, 2, 3, 4]`, the original array at index 0 would be the product of `2*3*4`, resulting in `[24, 12, 8, 6]`. If the array contains a `0`, consider its placement and handle accordingly to ensure the product calculation is valid. productArray([1,2,3,4]) // [24, 12, 8, 6] productArray([0,2,3,4]) // [24, 0, 0, 0]","solution":"def productArray(arr): n = len(arr) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * arr[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * arr[i + 1] for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Given an array of positive integers, return the smallest positive integer that cannot be represented as the sum of any subset of the array. Example: ``` Input: [1, 2, 5] Output: 4 Input: [1, 3, 6, 10, 11, 15] Output: 2 Input: [1, 1, 1, 1] Output: 5 ``` Write a function `findSmallestUnobtainableSum(arr: List[int]) -> int` to solve this problem.","solution":"from typing import List def findSmallestUnobtainableSum(arr: List[int]) -> int: Given an array of positive integers, return the smallest positive integer that cannot be represented as the sum of any subset of the array. arr.sort() res = 1 for num in arr: if num > res: break res += num return res"},{"question":"Consider a grid of size n x n filled with integers. You are required to rotate this grid 90 degrees clockwise k times, where 1 <= n <= 100 and 1 <= k <= 10. For example, if the grid is: ``` 1 2 3 4 5 6 7 8 9 ``` Rotating 90 degrees clockwise once will result in: ``` 7 4 1 8 5 2 9 6 3 ``` Rotating the original grid 90 degrees clockwise twice will result in: ``` 9 8 7 6 5 4 3 2 1 ``` Write a program to rotate the grid k times and output the resulting grid. # Input The first line of input contains two integers n and k, where n is the size of the grid and k is the number of times the grid should be rotated 90 degrees clockwise. The next n lines each contain n space-separated integers, representing the grid. # Output Output the resulting grid after k rotations. # Example Input ``` 3 1 1 2 3 4 5 6 7 8 9 ``` Output ``` 7 4 1 8 5 2 9 6 3 ``` Input ``` 3 2 1 2 3 4 5 6 7 8 9 ``` Output ``` 9 8 7 6 5 4 3 2 1 ``` # Note For k rotations, you should rotate the grid k times 90 degrees clockwise. A grid rotated 4 times returns to its original position. Hence, effectively perform k % 4 rotations.","solution":"def rotate_grid(grid, k): Rotates the grid 90 degrees clockwise k times. n = len(grid) # since rotating 4 times brings the grid back to the original position k = k % 4 for _ in range(k): # Create a new grid with the same dimension n x n new_grid = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): new_grid[j][n - 1 - i] = grid[i][j] grid = new_grid return grid def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) k = int(data[1]) grid = [] index = 2 for i in range(n): grid.append(list(map(int, data[index:index+n]))) index += n result = rotate_grid(grid, k) for row in result: print(\\" \\".join(map(str, row))) if __name__ == \\"__main__\\": main()"},{"question":"# Sudoku Solver Write a function `solveSudoku`/`SolveSudoku`/`solve_sudoku()` that accepts a 2D array representing a partially filled 9x9 Sudoku board, and returns true if a solution exists, or false otherwise. If a solution exists, the function should modify the board in-place to the solved state. The cells of the Sudoku board will contain digits from 1 to 9 or 0, where 0 represents an empty cell. The puzzle provided to the function will always be valid according to Sudoku rules. # Examples ``` board = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] solveSudoku(board) /* Modifies board to: [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] */ ```","solution":"def solve_sudoku(board): Solves the given Sudoku board in-place and returns True if a solution exists, else False. def is_valid(board, row, col, num): # Check if num is not in the current row for x in range(9): if board[row][x] == num: return False # Check if num is not in the current column for x in range(9): if board[x][col] == num: return False # Check if num is not in the current 3x3 box start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[i + start_row][j + start_col] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = 0 return False return True return solve(board)"},{"question":"In a far future, society has become data-driven, and every individual\'s activities are tracked through a unique identifier, ID. Scientists have discovered that managing the uniqueness of these IDs is crucial to avoid conflicts in data integrity. Therefore, they decided to create a system that would manage the unique IDs, handle requests to add or remove an ID, and ensure that no two IDs share the same identifier. The system should process multiple requests of the following forms: - `+ x` - This request adds the identifier x to the system to track a new individual. - `- x` - This request removes the identifier x from the system as the individual is no longer being tracked. For the request `+ x`: - If the identifier x was successfully added, the system should print \\"Added\\". - If the identifier x is already present in the system, print \\"Already present\\". For the request `- x`: - If the identifier x was successfully removed, the system should print \\"Removed\\". - If the identifier x is not present in the system, print \\"Not found\\". Initially, the system is empty, meaning no identifiers are being tracked. # Input The first line contains a single integer m (1 ≤ m ≤ 10^5) — the number of requests. The next m lines contain the requests in the form of either `+ x` or `- x` (1 ≤ x ≤ 10^9). # Output Print m lines — the responses of executing the requests in the order in which they are given in the input. # Example Input ``` 5 + 12345 + 67890 - 12345 - 11111 + 67890 ``` Output ``` Added Added Removed Not found Already present ``` # Note In the example, the system starts with no identifiers. The first request adds 12345, so the output is \\"Added\\". The second request adds 67890, resulting in \\"Added\\". The third request removes 12345, so the output is \\"Removed\\". The fourth request tries to remove 11111, which is not present, so the output is \\"Not found\\". Finally, the fifth request tries to add 67890 again, which is already present, resulting in \\"Already present\\".","solution":"def manage_ids(requests): Manages the addition and removal of unique IDs based on the requests. ids_set = set() result = [] for request in requests: operation, x = request.split() if operation == \'+\': if int(x) in ids_set: result.append(\\"Already present\\") else: ids_set.add(int(x)) result.append(\\"Added\\") elif operation == \'-\': if int(x) in ids_set: ids_set.remove(int(x)) result.append(\\"Removed\\") else: result.append(\\"Not found\\") return result # Example Usage: # input = [\\"+ 12345\\", \\"+ 67890\\", \\"- 12345\\", \\"- 11111\\", \\"+ 67890\\"] # print(manage_ids(input)) # Should print [\\"Added\\", \\"Added\\", \\"Removed\\", \\"Not found\\", \\"Already present\\"]"},{"question":"Given a positive integer N, write a function to return all the possible combinations of unique subsets of integers that sum up to N. Your function should return the combinations in lexicographical order. Input: The input consists of a single positive integer N. Output: For each subset combination, print the numbers in the set in ascending order, each combination on a new line. The combinations themselves should also be printed in lexicographical order. Constraints: 1 ≤ N ≤ 20 SAMPLE INPUT 4 SAMPLE OUTPUT 1 1 1 1 1 1 2 1 3 2 2 4 Note: The output should not contain any duplicate subsets and the order in each subset must be ascending. The entire set of combinations should also be sorted lexicographically.","solution":"def find_subsets(N): Given a positive integer N, return all the possible combinations of unique subsets of integers that sum up to N. The subsets should be in lexicographical order. result = [] subset = [] def backtrack(start, target): if target == 0: # convert each subset to tuple to store it in the result list result.append(tuple(subset)) return for i in range(start, N + 1): if target >= i: subset.append(i) backtrack(i, target - i) subset.pop() backtrack(1, N) return result"},{"question":"# Task Given a non-empty string `mainString` and another string `subString`, return the number of times `subString` appears as a contiguous subsequence in `mainString` or `-1` if `subString` is not contained in `mainString`. # Input/Output Input - A non-empty string `mainString`. - `1 ≤ mainString.length ≤ 100` - A non-empty string `subString`. - `1 ≤ subString.length ≤ 100` Output - An integer representing the number of times `subString` appears as a contiguous subsequence in `mainString`, or `-1` if `subString` is not present at all. # Example For `mainString = \\"abracadabra\\" and subString = \\"abra\\"`, the output should be `2`. `\\"abra\\"` appears twice in `\\"abracadabra\\"`. For `mainString = \\"hello\\" and subString = \\"world\\"`, the output should be `-1`. `\\"world\\"` does not appear in `\\"hello\\"`. For `mainString = \\"aaa\\" and subString = \\"a\\"`, the output should be `3`. `\\"a\\"` appears three times in `\\"aaa\\"`.","solution":"def count_substring_occurrences(mainString, subString): Returns the number of times subString appears as a contiguous subsequence in mainString, or -1 if subString is not contained in mainString. occurrences = mainString.count(subString) return occurrences if occurrences > 0 else -1"},{"question":"Given an array of integers nums, you need to repeatedly sum the digits of each number in the array until each number becomes a single-digit integer. After all numbers in the array are reduced to single digits, return the array sorted in non-decreasing order. First line contains an integer N denoting the number of integers in the array. Next line contains N integers representing the array nums. Note: - The process of summing the digits of a number is called \\"digit root\\" and can be repeated until the number is a single-digit integer. - Sorting should be done after all integers have been reduced to their single-digit form. SAMPLE INPUT 5 38 15 122 4 91 SAMPLE OUTPUT 1 2 4 8 9 Explanation: - For 38, sum of digits = 3 + 8 = 11, sum of digits of 11 = 1 + 1 = 2. - For 15, sum of digits = 1 + 5 = 6. - For 122, sum of digits = 1 + 2 + 2 = 5. - For 4, sum of digits = 4. - For 91, sum of digits = 9 + 1 = 10, sum of digits of 10 = 1 + 0 = 1.","solution":"def digit_root(n): Function to compute the digit root of a number. while n >= 10: n = sum(int(digit) for digit in str(n)) return n def process_and_sort(nums): Function to process the given list of numbers to their digit roots and sort the result. digit_roots = [digit_root(num) for num in nums] digit_roots.sort() return digit_roots def main(input_list): Main function to read the list of numbers, process them, and return the sorted results. N = input_list[0] nums = input_list[1:] result = process_and_sort(nums) return result"},{"question":"Write a program that takes an integer n and generates a list of n Fibonacci numbers. The Fibonacci series is defined as follows: - The first number of the series is 0, - The second number is 1, - Every subsequent number is the sum of the two preceding numbers. Input: - A single integer n, where 1 ≤ n ≤ 50. Output: - A list of n Fibonacci numbers, space-separated, on a single line. Example: Input: 10 Output: 0 1 1 2 3 5 8 13 21 34","solution":"def generate_fibonacci(n): Generates a list of n Fibonacci numbers. if n <= 0: return [] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[:n] # Example usage n = 10 print(generate_fibonacci(n)) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"},{"question":"Kira and Lora are siblings who both love puzzles. Their father has given them a challenge which involves strings. The challenge is to determine if one string can be transformed into another by following a set of rules. The rules are as follows: 1. Each character in the string can be replaced by its consecutive character in the alphabet (e.g., \'a\' can become \'b\', \'b\' can become \'c\', ..., \'y\' can become \'z\', \'z\' can become \'a\'). 2. Characters can be replaced multiple times. Kira, who is curious by nature, wants to automate the process. She decided to write a program that checks if it\'s possible to transform one string into another by the given rules. Write a program that takes two strings and determines if one string can be transformed into the other. input The input consists of multiple datasets. The end of the input is indicated by a single # (pound) line. Each dataset is given in the following format. s t Strings `s` and `t` are given on one line separated by a space. Each string only contains lowercase English letters (a-z) and both strings are of the same length, not exceeding 100 characters. The number of datasets does not exceed 100. output Print YES if string `s` can be transformed into string `t` by following the rules, otherwise, print NO. Example Input abc cde xyz abc aaaa bbbb abcd efgh mmm nnn abc cdc # Output YES YES YES YES YES NO","solution":"def can_transform(s, t): Determine if string s can be transformed into string t by replacing each character by its consecutive character in the alphabet. def char_distance(a, b): return (ord(b) - ord(a)) % 26 if len(s) != len(t): return \\"NO\\" diff_set = set(char_distance(a, b) for a, b in zip(s, t)) return \\"YES\\" if len(diff_set) == 1 else \\"NO\\" def process_input(input_data): Process input data and return the respective output for each dataset. results = [] for line in input_data: if line == \\"#\\": break s, t = line.split() results.append(can_transform(s, t)) return results"},{"question":"In a fantasy kingdom, there are wizards who are ranked by the power of their spells. Each wizard can cast a number of spells, each with a unique power level. The king wants to determine the median power level of all spells cast by wizards in his kingdom. You are given information about each wizard and the power levels of the spells they can cast. Your task is to determine the median power level of all spells for the kingdom. Input: The input contains multiple datasets. The end of the input is indicated by a single line containing a zero. Each dataset contains multiple wizards. The first line of each dataset contains an integer n (1 ≤ n ≤ 100) denoting the number of wizards in that dataset. The next n lines each describe a wizard: - Each line starts with an integer m (1 ≤ m ≤ 100), indicating the number of spells the wizard can cast. - Following this, there are m integers representing the power levels of the spells (each power level is an integer between 1 and 10,000). Output: For each dataset, output a single line containing the median power level of all spells from that dataset. If there are an even number of spells, output the smaller of the two middle elements. Example: Input: 3 3 10 20 30 2 15 25 4 5 10 15 20 2 5 5 5 5 5 3 7 7 7 0 Output: 15 5","solution":"def find_median_power_levels(datasets): Determine the median power level of all spells for each dataset. :param datasets: List of datasets where each dataset is a list of lists representing wizards and their spells. :return: List of medians for each dataset. medians = [] for dataset in datasets: all_spells = [] for wizard in dataset: m, spells = wizard[0], wizard[1:] all_spells.extend(spells) all_spells.sort() mid = len(all_spells) // 2 if len(all_spells) % 2 == 0: median = all_spells[mid - 1] else: median = all_spells[mid] medians.append(median) return medians def parse_input(input_data): Parse the input data into the required format. :param input_data: Raw input string. :return: Parsed data. lines = input_data.strip().split(\'n\') datasets = [] current_dataset = [] for line in lines: if line.strip() == \'0\': if current_dataset: datasets.append(current_dataset) break if len(line.split()) == 1: if current_dataset: datasets.append(current_dataset) current_dataset = [] else: current_dataset.append(list(map(int, line.split()))) return datasets"},{"question":"Given a Binary Tree, find the Left View of the tree. The Left View of a Binary Tree is a set of nodes visible when the tree is viewed from the left side. Example 1: Input: 1 / 2 3 / 4 5 Output: 1 2 4 Example 2: Input: 10 / 20 30 / 40 Output: 10 20 40 Your Task: You need to complete the function leftView() that takes the root of the tree as parameter and returns a list of integers containing the nodes that are visible from the left view. Constraints: 1<=Number of nodes<=100 Expected Time Complexity: O(N). Expected Auxiliary Space: O(H). H is the height of the tree.","solution":"class Node: A binary tree node. def __init__(self, key): self.data = key self.left = None self.right = None def leftViewUtil(root, level, max_level, result): Utility function to get the left view of the binary tree. if root is None: return # If this is the first node of its level if max_level[0] < level: result.append(root.data) max_level[0] = level # Recur for left and right subtrees leftViewUtil(root.left, level + 1, max_level, result) leftViewUtil(root.right, level + 1, max_level, result) def leftView(root): Returns the left view of the binary tree. result = [] max_level = [0] leftViewUtil(root, 1, max_level, result) return result"},{"question":"**Problem Description:** Kavya is practicing for her coding interview and has come across a problem involving binary strings. She is stuck on this problem and needs your help to solve it. The problem is as follows: You are given a binary string S of length N. You need to count the number of substrings of S that start and end with \'1\'. INPUT: The input consists of one line containing the binary string S. OUTPUT: Output the number of substrings starting and ending with \'1\'. Constraints: 1 <= N <= 100 Example: Input: 10101 Output: 6 Explanation: The substrings starting and ending with \'1\' are \\"1\\", \\"101\\", \\"10101\\", \\"1\\", \\"101\\", \\"1\\". Hence, the output is 6. Note: A substring is any contiguous sequence of characters within a string.","solution":"def count_substrings_start_end_1(S): Returns the number of substrings starting and ending with \'1\'. # Count the number of \'1\'s in the string count_1s = S.count(\'1\') # Apply the combinatory formula to count the number of valid substrings return count_1s * (count_1s + 1) // 2"},{"question":"In this problem, you have to find the number of inversions in a given sequence of integers. An inversion is a pair of indices (i, j) such that i < j and a[i] > a[j]. For example, in the sequence 2 3 8 6 1, there are five inversions: (0, 4), (1, 4), (2, 3), (2, 4), (3, 4). Your task is to write a program that counts the number of inversions in a given sequence of integers. -----Input----- Input begins with a line that contains a single integer 1 le n le 200000 – the length of the sequence. Each of the following n lines contains a single integer -10^9 le a[i] le 10^9, the i-th sequence element. -----Output----- Print a single line containing an integer inversions, the number of inversions in the sequence. -----Examples----- Sample Input: 5 2 3 8 6 1 Sample Output: 5","solution":"def count_inversions(arr): Count the number of inversions in the array. return count_inversions_and_sort(arr, 0, len(arr) - 1) def count_inversions_and_sort(arr, left, right): Helper function to count inversions and sort the array. if left >= right: return 0 mid = (left + right) // 2 inversions = count_inversions_and_sort(arr, left, mid) inversions += count_inversions_and_sort(arr, mid + 1, right) inversions += merge_and_count(arr, left, mid, right) return inversions def merge_and_count(arr, left, mid, right): Count inversions during the merge process. left_part = arr[left:mid + 1] right_part = arr[mid + 1:right + 1] i = j = 0 k = left inversions = 0 while i < len(left_part) and j < len(right_part): if left_part[i] <= right_part[j]: arr[k] = left_part[i] i += 1 else: arr[k] = right_part[j] j += 1 inversions += (mid - i + 1 - left) k += 1 while i < len(left_part): arr[k] = left_part[i] i += 1 k += 1 while j < len(right_part): arr[k] = right_part[j] j += 1 k += 1 return inversions"},{"question":"You are given an `n` x `n` chessboard made up of black and white cells. The cells are arranged in a checkerboard pattern, i.e., no two adjacent cells are of the same color. The rows and columns are 0-indexed. The cell at `(0,0)` is always black. A knight is a piece in the game of chess that moves in an \\"L\\" shape: it can move two squares in one direction and then one square perpendicular to that direction, or one square in one direction and two squares perpendicular to that. Given the initial placements of a knight on the chessboard, you must determine the minimum number of moves required for the knight to move from its starting position to reach a specific target cell. The knight can only move to cells that are still on the chessboard. Write a function to determine the minimum number of knight moves from the starting position to the target position. ---Input--- - The input will consist of multiple test cases. The first line contains a single integer `T` (1 ≤ T ≤ 1000), the number of test cases. - Each test case consists of three lines: - The first line contains the integer `n` (1 ≤ n ≤ 500), the size of the `n` x `n` chessboard. - The second line contains two integers `start_row` and `start_col` (0 ≤ start_row, start_col < n), the starting row and column coordinates of the knight. - The third line contains two integers `target_row` and `target_col` (0 ≤ target_row, target_col < n), the target row and column coordinates of the knight. ---Output--- - For each test case, output the minimum number of moves required for the knight to move from the starting position to the target position. If it is impossible to reach the target cell, output `-1`. ---Example--- Input 3 8 0 0 7 7 8 0 0 0 1 8 0 0 3 3 Output 6 3 2 Note: - The knights can only move in an \\"L\\" shape: two squares in a horizontal direction and one in a vertical direction, or two squares in a vertical direction and one in a horizontal direction. - You should use a breadth-first search (BFS) algorithm to find the shortest path for the knight from its starting position to the target position. If the target position is not reachable, return `-1`.","solution":"from collections import deque def min_knight_moves(n, start_row, start_col, target_row, target_col): directions = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] if start_row == target_row and start_col == target_col: return 0 queue = deque([(start_row, start_col, 0)]) visited = set() visited.add((start_row, start_col)) while queue: row, col, steps = queue.popleft() for dr, dc in directions: new_row, new_col = row + dr, col + dc if (new_row, new_col) == (target_row, target_col): return steps + 1 if 0 <= new_row < n and 0 <= new_col < n and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, steps + 1)) return -1 def solve_knight_moves(test_cases): results = [] for n, start, target in test_cases: start_row, start_col = start target_row, target_col = target result = min_knight_moves(n, start_row, start_col, target_row, target_col) results.append(result) return results"},{"question":"Given a string S consisting of lowercase English letters, determine the lexicographically smallest string that can be obtained by cyclically rotating the given string S. Example 1: Input: S = \\"bca\\" Output: \\"abc\\" Explanation: Rotating the string \\"bca\\" cyclically, the possible strings are \\"bca\\", \\"cab\\", and \\"abc\\". The smallest of these is \\"abc\\". Example 2: Input: S = \\"cba\\" Output: \\"acb\\" Explanation: Rotating the string \\"cba\\" cyclically, the possible strings are \\"cba\\", \\"bac\\", and \\"acb\\". The smallest of these is \\"acb\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function findLexicographicallySmallestString() which takes the string S as input parameter and returns the lexicographically smallest string obtained by cyclic rotation. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 1000 Each character of S is a lowercase English letter.","solution":"def findLexicographicallySmallestString(S): Returns the lexicographically smallest string that can be obtained by cyclically rotating the given string S. smallest = S n = len(S) for i in range(1, n): rotated_string = S[i:] + S[:i] if rotated_string < smallest: smallest = rotated_string return smallest"},{"question":"Bob has a new habit of cataloguing his daily activities using a specific format: \'Activity - hh:mm:ss\'. However, Bob wants to track which days his most time-consuming activities occur on. You are given a list of strings representing activities along with a corresponding time, and you need to find out which activity took the longest time in a given day. If two activities have the same duration, take the one that was logged first. Write a program to determine the most time-consuming activity for a given day based on the input data. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) – the number of activities logged. The next n lines contain a string in the format \'Day Activity - hh:mm:ss\'. The day is given as a string in the format \'YYYY-MM-DD\' (ISO 8601 Date Format). The activity is described by an alphanumeric string, and time is formatted as \'hh:mm:ss\'. -----Output----- For each unique day found in the input, print the day and its corresponding most time-consuming activity in the following format: \'Day: Activity\'. The output should be sorted by day in ascending order. -----Examples----- Input 5 2023-10-01 Reading - 02:30:00 2023-10-01 Coding - 01:45:00 2023-10-02 Meeting - 02:00:00 2023-10-02 Emails - 01:15:00 2023-10-01 Jogging - 00:45:00 Output 2023-10-01: Reading 2023-10-02: Meeting Input 3 2023-09-15 Exam - 03:00:00 2023-09-15 Preparation - 03:00:00 2023-09-16 Homework - 02:30:00 Output 2023-09-15: Exam 2023-09-16: Homework","solution":"from datetime import timedelta def find_longest_activity(n, activity_log): Determines the most time-consuming activity for each day based on the input data. Parameters: n (int): The number of activities logged. activity_log (List[str]): List of strings representing activities along with corresponding time. Returns: dict: A dictionary where keys are the days and values are the most time-consuming activities. activities = {} for entry in activity_log: day_activity, time = entry.rsplit(\' - \', 1) day, activity = day_activity.split(\' \', 1) hours, minutes, seconds = map(int, time.split(\':\')) duration = timedelta(hours=hours, minutes=minutes, seconds=seconds) if day not in activities or duration > activities[day][1]: activities[day] = (activity, duration) result = {day: activities[day][0] for day in sorted(activities)} return result"},{"question":"Facing a cabin in the forest, you come upon a curious mathematical enigma. The forest\'s layout is designed in such a way that it can be represented as a n × m grid. At each cell in the grid, there is either a tree (\'T\') or an empty space (\'.\'). You need to plant flowers in the empty spaces while ensuring that no flower is adjacent to another flower vertically, horizontally, or diagonally. For this challenge, two cells are considered adjacent if they share a side or a corner. Your task is to determine the maximum number of flowers that can be planted in the grid following these rules. Input The first line of the input contains two integers n and m (2 ≤ n, m ≤ 50), representing the dimensions of the grid. Each of the next n lines contains m characters. Each character is either \'T\' or \'.\', representing trees or empty spaces respectively. Output Print the maximum number of flowers that can be planted in the grid without violating the adjacency rule. Examples Input 4 4 .... .T.T ...T T..T Output 4 Input 3 3 TTT T.T TTT Output 1 Note In the first example, the grid can be visualized as follows with optimal flower placement: F..F .T.T ..TF T..T In the second example, only one flower can be planted because any additional flower would be adjacent to an existing one. Plant with care!","solution":"def max_flowers(n, m, grid): def is_valid(i, j, flower_grid): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and flower_grid[ni][nj] == \'F\': return False return True max_count = 0 flower_grid = [list(row) for row in grid] for i in range(n): for j in range(m): if flower_grid[i][j] == \'.\' and is_valid(i, j, flower_grid): flower_grid[i][j] = \'F\' max_count += 1 return max_count"},{"question":"Given a grid of integers, where each integer represents a type of terrain with traversal costs, design an algorithm to find the minimum cost path from the top-left to the bottom-right corner of the grid. Each cell in the grid has a non-negative integer cost, where higher values represent more difficult terrain. You can move in the four cardinal directions: up, down, left, and right. You cannot move diagonally. Return the minimum cost to reach the bottom-right corner from the top-left corner. Example 1: Input: grid = [[1,3,1],[1,5,1],[4,2,1]] Output: 7 Explanation: The path with the minimum cost is 1 -> 3 -> 1 -> 1 -> 1 -> 1 -> 2 -> 1, with a total cost of 7. Example 2: Input: grid = [[1,2,5],[3,2,1]] Output: 6 Explanation: The path with the minimum cost is 1 -> 2 -> 2 -> 1, with a total cost of 6. Constraints: - The grid size is m x n, where 1 <= m, n <= 100. - Each cell cost is a non-negative integer between 0 and 100. - It is guaranteed that a path from the top-left to the bottom-right corner exists.","solution":"import heapq def min_cost_path(grid): Returns the minimum cost path from the top-left to the bottom-right corner of the grid. grid: List of Lists of integers representing traversal costs. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Right, Down, Left, Up min_heap = [(grid[0][0], 0, 0)] # (cost, x, y) cost = [[float(\'inf\')] * n for _ in range(m)] cost[0][0] = grid[0][0] while min_heap: current_cost, x, y = heapq.heappop(min_heap) if x == m - 1 and y == n - 1: return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n: new_cost = current_cost + grid[nx][ny] if new_cost < cost[nx][ny]: cost[nx][ny] = new_cost heapq.heappush(min_heap, (new_cost, nx, ny)) return cost[m-1][n-1]"},{"question":"Write a function that takes a list of positive integers and partitions the list into two sublists such that the sum of the integers in both sublists is as equal as possible. The function should return a tuple of two sublists. Examples: * `[3, 1, 4, 2, 2]` => ([3, 2, 2], [4, 1]) * `[10, 10, 9, 9, 2]` => ([10, 9], [10, 9, 2]) Additional Notes: * If there are multiple correct solutions, returning any one of them is acceptable. * The input list will always contain at least two integers. * You can assume that there will always be a solution that can partition the list as described.","solution":"from itertools import combinations def partition_list(nums): Partition the list into two sublists such that the sum of the integers in both sublists is as equal as possible. total_sum = sum(nums) half_sum = total_sum // 2 nums.sort(reverse=True) best_diff = float(\'inf\') best_partition = None # Find the best partition balance for i in range(1, len(nums)): for comb in combinations(nums, i): sum_comb = sum(comb) diff = abs(total_sum - 2 * sum_comb) if diff < best_diff: best_diff = diff best_partition = comb sublist1 = list(best_partition) sublist2 = nums[:] for num in sublist1: sublist2.remove(num) return sublist1, sublist2"},{"question":"Write a function called `find_substrings` that takes two arguments: `text` and `substring_length`. The `text` argument is a string, and `substring_length` is an integer representing the length of the substrings to return. The function should return a list of all unique substrings of the specified length found within the `text`. If `substring_length` is less than or equal to 0, greater than the length of `text`, or if `text` is empty, the function should return an empty list. For example: - find_substrings(\\"abcdef\\", 2) should return [\\"ab\\", \\"bc\\", \\"cd\\", \\"de\\", \\"ef\\"] - find_substrings(\\"abc\\", 4) should return [] - find_substrings(\\"\\", 2) should return [] - find_substrings(\\"aaa\\", 1) should return [\\"a\\"]","solution":"def find_substrings(text, substring_length): Returns a list of all unique substrings of the specified length found within the given text. Parameters: text (str): The input string from which to extract substrings. substring_length (int): The length of the substrings to extract. Returns: list: A list of unique substrings of the specified length. if not text or substring_length <= 0 or substring_length > len(text): return [] substrings = set() for i in range(len(text) - substring_length + 1): substr = text[i:i + substring_length] substrings.add(substr) return list(substrings)"},{"question":"You are given a grid-based game where an NxM grid is populated with different characters representing different kinds of treasures (\'T\'), obstacles (\'#\'), and empty spaces (\'.\'). Your task is to determine the maximum number of separate treasures that can be collected by a player starting from a given position (sx, sy) on the grid. The player can move up, down, left, or right, but cannot move through obstacles (\'#\'). The player should be able to collect treasures by simply walking over them. Write a function to determine the maximum number of treasures (\'T\') that can be collected starting from the given position. If the starting position itself is an obstacle, the collection count should be zero. -----Input----- The first line of the input contains three integers N, M, and T specifying the dimensions of the grid and the number of test cases respectively. For each test case, the first line contains two integers sx and sy denoting the starting coordinates (row and column) of the player. Each of the next N lines contains M characters representing the grid configuration. -----Output----- For each test case, output a single integer corresponding to the maximum number of treasures that can be collected from the given starting position. -----Constraints----- - 1 ≤ N, M ≤ 100 - 1 ≤ T ≤ 50 - 0 ≤ sx < N - 0 ≤ sy < M -----Example----- Input 3 4 2 1 1 .... .T#. .T.. ...T 2 0 T..T .. .T#. ...T Output 2 3 Explanation: In the first test case, starting from (1,1), the player can collect two treasures at positions (2, 1) and (3, 3). In the second test case, starting from (2,0), the player can collect three treasures at positions (2, 0), (0, 3), and (3, 3). Note that the player can move up, down, left, or right, but cannot pass through obstacles (\'#\').","solution":"def max_treasures(N, M, T, test_cases): results = [] def collect_treasures(grid, sx, sy): if grid[sx][sy] == \'#\': return 0 visited = [[False] * M for _ in range(N)] def dfs(x, y): if x < 0 or x >= N or y < 0 or y >= M or grid[x][y] == \'#\' or visited[x][y]: return 0 visited[x][y] = True treasures = 1 if grid[x][y] == \'T\' else 0 treasures += dfs(x + 1, y) treasures += dfs(x - 1, y) treasures += dfs(x, y + 1) treasures += dfs(x, y - 1) return treasures return dfs(sx, sy) for test_case in test_cases: sx, sy, grid = test_case results.append(collect_treasures(grid, sx, sy)) return results"},{"question":"Problem description: A Pythagorean triple consists of three positive integers a, b, and c such that a^2 + b^2 = c^2. Given a list of sets of three integers, determine whether each set forms a Pythagorean triple. Input Each case is specified on a single line with three integers a, b, c. The last case is followed by a line with three zeros. Output For each test case, your program must print a single line of the form: VALID or INVALID depending on whether the given set of values forms a Pythagorean triple. Constraints All input sets will contain three integers greater than zero. Example Input: 3 4 5 5 12 13 8 15 17 1 2 3 0 0 0 Output: VALID VALID VALID INVALID","solution":"def is_pythagorean_triple(a, b, c): Determines if the integers a, b, c form a Pythagorean triple. # Sort a, b, c to ensure a <= b <= c a, b, c = sorted([a, b, c]) # Check if the given numbers satisfy the Pythagorean theorem if a ** 2 + b ** 2 == c ** 2: return \\"VALID\\" else: return \\"INVALID\\" def check_pythagorean_triples(triples): Check a list of triples to determine if each forms a Pythagorean triple. results = [] for (a, b, c) in triples: if a == 0 and b == 0 and c == 0: break results.append(is_pythagorean_triple(a, b, c)) return results"},{"question":"Create a function **sentence_classifier** that classifies a given sentence based on its content. The function will determine whether the sentence is a **statement**, a **question**, or an **exclamation**. Here\'s how the classification works: - If the sentence ends with a period (\'.\'), it is classified as a **statement**. - If it ends with a question mark (\'?\'), it is classified as a **question**. - If it ends with an exclamation mark (\'!\'), it is classified as an **exclamation**. - Otherwise, it should be classified as **unknown**. The function will read the input sentence as a string, classify it, and then print the classification. # Input - A single string, representing the sentence. # Output - A single string, which is the classification. # Example **Input 1:** ``` How are you doing? ``` **Output 1:** ``` question ``` **Input 2:** ``` I am fine. ``` **Output 2:** ``` statement ``` **Input 3:** ``` Wow! ``` **Output 3:** ``` exclamation ``` **Input 4:** ``` This is quite an unexpected situation ``` **Output 4:** ``` unknown ```","solution":"def sentence_classifier(sentence): Classifies the given sentence as \'statement\', \'question\', \'exclamation\', or \'unknown\' based on its ending punctuation. if sentence.endswith(\'.\'): return \'statement\' elif sentence.endswith(\'?\'): return \'question\' elif sentence.endswith(\'!\'): return \'exclamation\' else: return \'unknown\'"},{"question":"The logistics company TransMach handles shipments for multiple clients. Each client can send shipments that travel through a network of hubs. Each hub has a certain capacity that limits the number of shipments it can process in a given day. Given a list of shipments, each specifying the start hub, the end hub, and the day of shipment, determine if it is possible to route all shipments without exceeding the capacity of any hub on any given day. You need to create a program that tracks the number of shipments passing through each hub on each day and verifies if the capacity constraints are met. -----Input----- The first line contains two integers H and C (1 le H, C le 1000) - the number of hubs and the capacity of each hub respectively. The second line contains an integer N (1 le N le 5000) - the number of shipments. Each of the next N lines contains three integers S, E, and D (1 le S, E le H, 1 le D le 365) - the start hub, the end hub, and the day of shipment respectively. -----Output----- Print \\"Possible\\" if all shipments can be routed without exceeding the capacity of any hub on any given day. Otherwise, print \\"Impossible\\". -----Examples----- Sample Input 1: 3 2 5 1 2 1 2 3 1 1 3 2 3 1 1 2 1 3 Sample Output 1: Possible Sample Input 2: 3 1 4 1 2 1 2 3 1 1 3 1 3 1 1 Sample Output 2: Impossible","solution":"def is_possible_to_route(hubs, capacity, shipments): # Initialize a dictionary to track hub capacities for each day hub_daily_shipments = {} for shipment in shipments: start_hub, end_hub, day = shipment if day not in hub_daily_shipments: hub_daily_shipments[day] = [0] * hubs hub_daily_shipments[day][start_hub - 1] += 1 hub_daily_shipments[day][end_hub - 1] += 1 for day, hub_usage in hub_daily_shipments.items(): for shipments_count in hub_usage: if shipments_count > capacity: return \\"Impossible\\" return \\"Possible\\" # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() H = int(data[0]) C = int(data[1]) N = int(data[2]) shipments = [] for i in range(N): S = int(data[3 + i * 3]) E = int(data[4 + i * 3]) D = int(data[5 + i * 3]) shipments.append((S, E, D)) print(is_possible_to_route(H, C, shipments))"},{"question":"In a distant galaxy, a civilization has developed a unique art form of creating patterns using sequences of numbers. The sequences are defined by strict rules and exhibit intriguing properties. The artist wants to generate these sequences based on a specific rule and determine certain attributes of them. The rule for the sequence is as follows: - The first number in the sequence is always 1. - For each subsequent number in the sequence, it is defined as: - If the previous number is an even number, the next number is half of the previous number. - If the previous number is an odd number, the next number is three times the previous number plus one. Given an integer N, the length of the sequence, you are required to determine the sequence of length N following the above rules. Input: - The first line contains an integer T, the number of test cases. - The following T lines each contain a single integer N, representing the length of the desired sequence. Output: - For each test case, print the sequence of length N on a new line, with each number separated by a space. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 Example Input: 3 1 5 10 Example Output: 1 1 4 2 1 4 1 4 2 1 4 2 1 4 2 1 Explanation: - For N = 1, the sequence is simply [1]. - For N = 5, the sequence starting from 1 is [1, 4, 2, 1, 4]. Here, starting from 1 (odd), the next number is 4, followed by 2, 1, and again 4. - For N = 10, the sequence is [1, 4, 2, 1, 4, 2, 1, 4, 2, 1].","solution":"def generate_sequence(N): Generate a sequence of length N based on specific rules: - The first number is always 1. - If the previous number is even, the next number is half of the previous number. - If the previous number is odd, the next number is three times the previous number plus one. sequence = [] current = 1 for _ in range(N): sequence.append(current) if current % 2 == 0: current = current // 2 else: current = 3 * current + 1 return sequence def sequences_from_test_cases(test_cases): Generate sequences for all given test cases. :param test_cases: List of integers where each integer represents the length of the sequence. :return: List of lists where each list is a sequence of length corresponding to the test case. results = [] for N in test_cases: results.append(generate_sequence(N)) return results def main(T, test_cases): results = sequences_from_test_cases(test_cases) for sequence in results: print(\' \'.join(map(str, sequence)))"},{"question":"You\'ve been hired as a software engineer at a logistics company and tasked with optimizing their route planning system. Your first mission is to develop a function that checks the validity of their proposed shipment routes. They want to ensure all planned routes are efficient and abide by the company\'s rules. Each route is represented by a string of warehouse identifiers (uppercase letters), which denotes the order in which the warehouses are visited. The company has established a rule that no warehouse should be visited more than once in a single route. Additionally, certain warehouses have restrictions against appearing consecutively. Write a function, `validate_route(route: str, restrictions: List[Tuple[str, str]]) -> str`, that takes a route string and a list of restricted consecutive pairs of warehouse identifiers. Your function should return one of the following strings based on the input evaluation: - \\"Valid\\": If the route meets all rules. - \\"Repeated warehouse\\": If any warehouse is visited more than once. - \\"Consecutive restriction violation\\": If any of the restricted consecutive pairs appear in the route. **Examples:** `validate_route(\\"ABCD\\", [(\\"A\\", \\"C\\"), (\\"B\\", \\"D\\")])` should return `\\"Valid\\"` because it meets all rules. `validate_route(\\"AACD\\", [(\\"A\\", \\"C\\"), (\\"B\\", \\"D\\")])` should return `\\"Repeated warehouse\\"` because warehouse A is visited more than once. `validate_route(\\"ACBD\\", [(\\"A\\", \\"C\\"), (\\"B\\", \\"D\\")])` should return `\\"Consecutive restriction violation\\"` because the pair (\\"A\\", \\"C\\") appears consecutively in the route.","solution":"from typing import List, Tuple def validate_route(route: str, restrictions: List[Tuple[str, str]]) -> str: # Check for repeated warehouse visited = set() for warehouse in route: if warehouse in visited: return \\"Repeated warehouse\\" visited.add(warehouse) # Check for consecutive restriction violations for i in range(len(route) - 1): pair = (route[i], route[i+1]) if pair in restrictions: return \\"Consecutive restriction violation\\" return \\"Valid\\""},{"question":"# Task You are given a list of strings `words` and another string `pattern`. Find all strings in `words` that match the following rule: A word matches `pattern` if there exists a permutation of letters `p` such that after replacing every letter `x` in the pattern with `p(x)`, we get the word. Return the list of words that match the pattern. # Example For `words = [\\"abc\\",\\"deq\\",\\"mee\\",\\"aqq\\",\\"dkd\\",\\"ccc\\"]` and `pattern = \\"abb\\"`, the output should be `[\\"mee\\",\\"aqq\\"]`. Explanation: - \\"mee\\" matches the pattern since replacing the first \'a\' with \'m\', the first \'b\' with \'e\', and the second \'b\' with \'e\' gives \\"mee\\". - \\"aqq\\" matches the pattern since replacing the first \'a\' with \'a\', the first \'b\' with \'q\', and the second \'b\' with \'q\' gives \\"aqq\\". - \\"abc\\" does not match the pattern since there is no permutation of \'a\', \'b\', \'c\' that replaces \'a\' with \'a\' and both \'b\'s with \'b\'. - \\"deq\\" does not match the pattern since there is no permutation of \'d\', \'e\', \'q\' that can replace \'a\' with \'d\', \'b\' with \'e\' and \'b\' with \'q\'. - \\"dkd\\" does not match the pattern since the second occurrence of \'b\' in the pattern cannot be replaced by \'k\'. - \\"ccc\\" does not match the pattern since \'a\' needs to be replaced with \'c\' and both \'b\'s need to be replaced with \'c\'. # Input/Output - `[input]` array of strings `words` The list of words. Constraints: 1 ≤ words.length ≤ 1000, 1 ≤ words[i].length ≤ 10. - `[input]` string `pattern` The pattern to match. Constraints: 1 ≤ pattern.length ≤ 10. - `[output]` an array of strings The list of words that match the given pattern.","solution":"def word_pattern_match(words, pattern): def matches(word, pattern): if len(word) != len(pattern): return False mapping_word_to_pattern = {} mapping_pattern_to_word = {} for w, p in zip(word, pattern): if w not in mapping_word_to_pattern: mapping_word_to_pattern[w] = p if p not in mapping_pattern_to_word: mapping_pattern_to_word[p] = w if mapping_word_to_pattern[w] != p or mapping_pattern_to_word[p] != w: return False return True return [word for word in words if matches(word, pattern)]"},{"question":"Jaya loves working with arrays. She recently came across an interesting problem and needs your help to solve it. Given an array of integers, she wants to find another array of the same length such that each element in the new array is the product of all elements in the original array except the one at the same index. ------ Input Format ------ - The first line of input contains T - the number of test cases. The test cases then follow. - The first line of each test case contains an integer N - the size of the array. - The second line of each test case contains N space-separated integers - the elements of the array. ------ Output Format ------ For each test case, output N space-separated integers, where each integer is the product of all elements of the input array except the one at the same index. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^5 −10 ≤ A_i ≤ 10, where A_i is an element of the array ----- Sample Input 1 ------ 2 4 1 2 3 4 3 5 6 7 ----- Sample Output 1 ------ 24 12 8 6 42 35 30 ----- explanation 1 ------ For the first test case: - The product for index 0 is 2 * 3 * 4 = 24 - The product for index 1 is 1 * 3 * 4 = 12 - The product for index 2 is 1 * 2 * 4 = 8 - The product for index 3 is 1 * 2 * 3 = 6 For the second test case: - The product for index 0 is 6 * 7 = 42 - The product for index 1 is 5 * 7 = 35 - The product for index 2 is 5 * 6 = 30","solution":"def product_except_self(arr): n = len(arr) left_products = [1] * n right_products = [1] * n result = [1] * n # Calculate left products for i in range(1, n): left_products[i] = left_products[i - 1] * arr[i - 1] # Calculate right products for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * arr[i + 1] # Calculate result by multiplying left and right products for i in range(n): result[i] = left_products[i] * right_products[i] return result def solve(test_cases): results = [] for case in test_cases: arr = case results.append(product_except_self(arr)) return results"},{"question":"The problem is to create a new string that consists of all the characters in the input string, but rearranged in such a way that if the resulting string is not a palindrome, the function should return the string \\"IMPOSSIBLE\\". If multiple arrangements make the string a palindrome, return the lexicographically smallest one. ```python def rearrange_to_palindrome(s): # Implementation here print(rearrange_to_palindrome(\\"aabb\\")) # Output: \\"abba\\" or \\"baab\\" print(rearrange_to_palindrome(\\"abc\\")) # Output: \\"IMPOSSIBLE\\" print(rearrange_to_palindrome(\\"aabbc\\")) # Output: \\"abcba\\" ``` **Note:** To be considered a palindrome, the string must read the same backward as forward. A palindrome can have at most one character with an odd frequency. If it is impossible to rearrange the characters to form a palindrome, the function should return \\"IMPOSSIBLE\\". If it\'s possible, return the lexicographically smallest palindrome that can be made from the input string.","solution":"def rearrange_to_palindrome(s): from collections import Counter def is_palindrome_formable(counter): odd_count = sum(1 for count in counter.values() if count % 2 != 0) return odd_count <= 1 counter = Counter(s) if not is_palindrome_formable(counter): return \\"IMPOSSIBLE\\" half = [] middle = [] for char in sorted(counter): half.extend(char * (counter[char] // 2)) if counter[char] % 2 == 1: middle = [char] half_str = \'\'.join(half) return half_str + \'\'.join(middle) + half_str[::-1]"},{"question":"Given an integer array arr, your task is to determine if the array contains a \\"Mountain\\". An array is considered a Mountain if and only if there exists some index i (0 < i < arr.length - 1) such that: - arr[0] < arr[1] < ... < arr[i - 1] < arr[i] - arr[i] > arr[i + 1] > ... > arr[arr.length - 1] In other words, the array elements must strictly increase to a point and then strictly decrease. Example 1: Input: arr = [2, 1] Output: NO Explanation: The array does not have a strictly increasing part followed by a strictly decreasing part. Example 2: Input: arr = [3, 5, 5] Output: NO Explanation: The array has a peak element 5 which is not smaller than the following element. Example 3: Input: arr = [0, 3, 2, 1] Output: YES Explanation: The array has an increasing sequence followed by a decreasing sequence. Your Task: You don\'t need to read input or print anything. Complete the function isMountain() which takes an integer array arr as input parameter and returns YES if the array contains a Mountain, otherwise returns NO. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= arr.length <= 10^5 0 <= arr[i] <= 10^6","solution":"def isMountain(arr): Determines if the given array is a mountain array. n = len(arr) if n < 3: return \\"NO\\" i = 0 # Walk up while i + 1 < n and arr[i] < arr[i + 1]: i += 1 # We cannot have the peak at the start or end if i == 0 or i == n - 1: return \\"NO\\" # Walk down while i + 1 < n and arr[i] > arr[i + 1]: i += 1 return \\"YES\\" if i == n - 1 else \\"NO\\""},{"question":"You are given an array of integers representing the integers from 1 to n in an arbitrary order. However, one number is missing from the array. Write a program that efficiently finds and returns the missing number. Input - The first line contains an integer n (1 ≤ n ≤ 10000), which represents the total number of elements that should be in the array including the missing one. - The second line contains n-1 distinct integers in arbitrary order each between 1 and n. Output - Print the missing number on a single line. Example Input ``` 5 2 3 1 5 ``` Output ``` 4 ```","solution":"def find_missing_number(n, arr): Finds and returns the missing number in the array. total_sum = n * (n + 1) / 2 array_sum = sum(arr) return int(total_sum - array_sum)"},{"question":"Alex loves organizing tournaments. He plans to organize a series of n tournaments. Each tournament has a specific number of participants, and Alex wants to divide the participants into teams. However, Alex has a peculiar rule: each team must consist of exactly k participants, and every tournament must have the maximum possible number of teams formed. Unfortunately, Alex realized that if the number of participants in a tournament is not a multiple of k, there will be some participants left out. Alex wants to play fair and is considering the possibility that he may have overestimated the number of teams he can form. Given the number of participants in each tournament, determine the maximum possible number of teams he can form. Additionally, for each tournament, indicate the number of participants left out. -----Input----- The first line contains a single integer n (1 leq n leq 100,000) — the number of tournaments Alex plans to organize. The second line contains n integers p_1, p_2, ldots, p_n (1 leq p_i leq 10^9) — the number of participants in each tournament. The third line contains a single integer k (1 leq k leq 10^9) — the size of each team. -----Output----- Print n lines. Each line should contain two integers: the maximum number of teams that can be formed and the number of participants left out for the corresponding tournament. -----Examples----- Input 3 10 11 25 3 Output 3 1 3 2 8 1 Input 2 5 12 5 Output 1 0 2 2 -----Note----- In the first example, there are three tournaments with participant counts 10, 11, and 25 respectively, and the team size is 3. For the first tournament with 10 participants, 3 teams of size 3 can be formed, leaving 1 participant out. For the second tournament with 11 participants, 3 teams of size 3 can be formed, leaving 2 participants out. For the third tournament with 25 participants, 8 teams of size 3 can be formed, leaving 1 participant out. In the second example, the team size is 5. For the first tournament with 5 participants, 1 team of size 5 can be formed, leaving no participants out. For the second tournament with 12 participants, 2 teams of size 5 can be formed, leaving 2 participants out.","solution":"def tournament_outcomes(n, participants, k): Determines the maximum number of teams that can be formed and the number of participants left out for each tournament. Parameters: n (int): Number of tournaments participants (list): List of number of participants in each tournament k (int): Team size Returns: list of tuples: Each tuple contains (max_teams, left_out_participants) outcomes = [] for p in participants: max_teams = p // k left_out = p % k outcomes.append((max_teams, left_out)) return outcomes"},{"question":"You are given a list of n integers representing the height of students standing in a line. The students want to rearrange themselves such that no student is shorter than the student standing behind him. Additionally, each student can only switch places with the student immediately behind or in front of them. You need to determine if it is possible to reorder the students in the desired manner, and if possible, provide a valid rearrangement. Input The first line contains an integer n (1 ≤ n ≤ 200,000) — the number of students in the line. The second line contains n space-separated integers hi (0 ≤ hi ≤ 100), where hi is the height of the student standing in the i-th position in the initial line. Positions are numbered starting from the beginning of the line. Output If it is impossible to make all the students stand in non-decreasing order of height, print \\"NOT POSSIBLE\\" without quotes. Otherwise, print one line containing n space-separated integers representing the new positions of the students such that the height of each student is not less than the height of the student behind them. If multiple solutions exist, print any of them. SAMPLE INPUT 5 3 1 4 3 2 SAMPLE OUTPUT 1 2 3 3 4","solution":"def reorder_students(n, heights): Reorders the students such that each student is not shorter than the student behind them. Returns \\"NOT POSSIBLE\\" if it\'s impossible. def can_reorder(heights): for i in range(n - 1): if heights[i] > heights[i + 1]: return False return True heights_sorted = sorted(heights) return heights_sorted if can_reorder(heights_sorted) else \\"NOT POSSIBLE\\""},{"question":"You\'ve been hired by a zoologist who is researching the migratory patterns of birds. The migration patterns can be represented as a string of characters, where each character represents a bird. The zoologist is particularly interested in identifying the longest sequence of consecutive characters where the birds do not change, as this indicates a stable group of birds traveling together. Write a program that takes as input a list of strings representing different migration patterns and outputs the length of the longest stable group in each pattern. Input format: The first line contains a single integer T, the number of test cases. Each of the next T lines contains a single string, representing a migration pattern. Output format: For each test case, output a single integer, the length of the longest stable group in the migration pattern. Constraints: 1 ≤ T ≤ 100 1 ≤ Length of each string ≤ 1000 Each string contains only lowercase English letters. Sample input: 3 aabbcc aaaabbbc abcd Sample output: 2 4 1 Explanation: In the first test case, the longest stable group is \\"aa\\" or \\"bb\\" or \\"cc\\", each of length 2. In the second test case, the longest stable group is \\"aaaa\\", of length 4. In the third test case, all the birds are different, so the longest stable group is any single character, of length 1.","solution":"def longest_stable_group(migration_patterns): For each migration pattern in the list, returns the length of the longest stable group. results = [] for pattern in migration_patterns: max_len, current_len = 0, 1 for i in range(1, len(pattern)): if pattern[i] == pattern[i - 1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) results.append(max_len) return results # The main function to handle multiple test cases def handle_test_cases(t, patterns): return longest_stable_group(patterns)"},{"question":"Roller Coaster Riders Alice loves to visit amusement parks and ride roller coasters. One day, she visited a new amusement park which had a very long roller coaster that can hold up to n riders at a time. Riders line up in a row and are assigned numbers from 1 to n. Alice observed that each rider carries a unique amount of energy. She wants to know the total amount of energy of any slice of contiguous riders on the roller coaster. This slice can start from any rider i and end at any rider j such that 1 le i le j le n. While this is a simple task for Alice, you are to help her as the roller coaster is very busy and the slice calculations need to be done promptly. -----Input----- The first line contains an integer n (1 leq n leq 10^5), the number of riders. The second line contains n integers E_1, E_2, ldots, E_n (1 leq E_i leq 10^4), where E_i represents the energy of the i-th rider. The third line contains an integer q (1 leq q leq 10^5), the number of queries. Each of the following q lines contains two integers i and j (1 le i le j le n), representing the start and end positions of the slice of riders Alice is interested in. -----Output----- For each of the q queries, output a single integer, the total energy of the riders in the slice from position i to j inclusive. -----Example----- Input 5 7 3 2 5 1 3 1 3 2 4 1 5 Output 12 10 18 -----Note----- In the example given: - For the first query, the sum from positions 1 to 3 is 7 + 3 + 2 = 12. - For the second query, the sum from positions 2 to 4 is 3 + 2 + 5 = 10. - For the third query, the sum from positions 1 to 5 is 7 + 3 + 2 + 5 + 1 = 18.","solution":"def preprocess_sums(energies): Precomputes the prefix sums for the given list of energies. n = len(energies) prefix_sums = [0] * (n + 1) # prefix_sums[0] is 0, starting from prefix_sums[1] to prefix_sums[n] for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + energies[i - 1] return prefix_sums def query_sum(prefix_sums, i, j): Returns the sum of the elements from index i to j using the prefix sums array. return prefix_sums[j] - prefix_sums[i - 1] def generate_results(n, energies, queries): prefix_sums = preprocess_sums(energies) results = [] for i, j in queries: results.append(query_sum(prefix_sums, i, j)) return results"},{"question":"The city of Geekville is designed as a series of vertical and horizontal roads forming a perfect grid. There are n vertical roads and m horizontal roads running through the city. Some intersections of these roads are equipped with traffic lights. Each traffic light can be either red or green. The goal is to ensure that at least one path exists from the top-left corner (1, 1) to the bottom-right corner (n, m) that passes only through intersections with green traffic lights. The state of the traffic lights is provided as a matrix where each cell (i, j) can be either G (indicating a green light) or R (indicating a red light). Your task is to determine if it is possible to navigate from the top-left to the bottom-right corner using only green-light intersections. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of vertical and horizontal roads, respectively. The next n lines contain m characters each, representing the grid. The j-th character in the i-th line is either \'G\' or \'R\': * \'G\' means the traffic light at the (i, j) intersection is green; * \'R\' means the traffic light at the (i, j) intersection is red. Output Print \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner passing only through green-light intersections. Otherwise, print \\"NO\\". Examples Input 5 5 GGGGG RGRGR GRRGG RGRGR GGGGG Output YES Input 3 3 GRG RRR GRG Output NO Input 4 4 GGGG GRRG GRRG GRGG Output YES","solution":"def is_path_exists(n, m, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != \'G\' or visited[x][y]: return False if x == n-1 and y == m-1: return True visited[x][y] = True return dfs(x+1, y) or dfs(x, y+1) or dfs(x-1, y) or dfs(x, y-1) if grid[0][0] != \'G\' or grid[n-1][m-1] != \'G\': return \\"NO\\" visited = [[False for _ in range(m)] for _ in range(n)] return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Given an array of integers, check if it can be classified as an \\"Almost Sorted Array\\". An array is considered \\"Almost Sorted\\" if, after removing exactly one element, the remaining elements are sorted in non-decreasing order. If the array is already sorted, it is also considered \\"Almost Sorted\\". Write a function that returns \\"YES\\" if the array is Almost Sorted, otherwise return \\"NO\\". Example 1: Input: arr = [10, 5, 7] Output: YES Explanation: By removing element 10, the remaining elements [5, 7] are in non-decreasing order. So, [10, 5, 7] is an Almost Sorted Array. Example 2: Input: arr = [10, 5, 1] Output: NO Explanation: Regardless of which element you remove, the remaining elements [10, 5], [10, 1], or [5, 1] are not in non-decreasing order. So, [10, 5, 1] is not an Almost Sorted Array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isAlmostSorted() which takes a list of integers as input and returns the answer. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= len(arr) <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"def isAlmostSorted(arr): def is_sorted(sequence): return all(sequence[i] <= sequence[i + 1] for i in range(len(sequence) - 1)) if is_sorted(arr): return \\"YES\\" for i in range(len(arr)): if is_sorted(arr[:i] + arr[i+1:]): return \\"YES\\" return \\"NO\\""},{"question":"A new online music streaming service called TuneBox has recently launched, and they are having issues with recommending songs to their users effectively. As a software engineer in the company, you were tasked with improving their recommendation algorithm. The current system suggests songs based on user preferences, but the algorithm doesn’t handle sudden spikes in song popularity well. To enhance the algorithm, you decided to implement a simple, yet effective metric called the \\"Draught Indicator.\\" The Draught Indicator of a song is defined as the difference between the highest and the lowest popularity scores it has received over a given period. You want to calculate this for several songs over a series of days. You are given a matrix representing N songs over D days. Each element in the matrix represents the popularity score of a song on a specific day. Input Format: - The first line of input contains two integers, N and D, where N is the number of songs, and D is the number of days. - The next N lines each contain D integers, where each line represents the popularity scores of a song over the given days. Output Format: - The output should contain N lines, each with a single integer, representing the Draught Indicator for each song. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ D ≤ 1000 - 0 ≤ popularity score ≤ 10000 Example Input: 3 4 3 4 5 6 1 2 2 1 10 5 8 10 Example Output: 3 1 5 Explanation: For the first song, the popularity scores are [3, 4, 5, 6], so the Draught Indicator is 6 - 3 = 3. For the second song, the popularity scores are [1, 2, 2, 1], so the Draught Indicator is 2 - 1 = 1. For the third song, the popularity scores are [10, 5, 8, 10], so the Draught Indicator is 10 - 5 = 5.","solution":"def calculate_draught_indicators(n, d, scores): draught_indicators = [] for i in range(n): song_scores = scores[i] draught_indicator = max(song_scores) - min(song_scores) draught_indicators.append(draught_indicator) return draught_indicators # Example usage: # n, d = 3, 4 # scores = [ # [3, 4, 5, 6], # [1, 2, 2, 1], # [10, 5, 8, 10] # ] # print(calculate_draught_indicators(n, d, scores)) # Should print [3, 1, 5]"},{"question":"Consider a room with a rectangular grid of size N x M, where some cells may be blocked. You start at the top-left corner of the grid and your goal is to reach the bottom-right corner. However, you can only move to the right or down from the current cell. Write a function that determines the number of unique paths from the top-left corner to the bottom-right corner of the grid, while avoiding blocked cells. Blocked cells are marked with a \'1\', while unblocked cells are marked with a \'0\'. Input - The first line contains two integers N and M (1 ≤ N, M ≤ 100), representing the number of rows and columns of the grid respectively. - The following N lines each contain M integers separated by spaces, representing the grid. Output Print a single integer representing the number of unique paths from the top-left corner to the bottom-right corner. If there are no possible paths, print 0. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 0 0 1 1 0 0 0 0 Output 1 Input 3 3 0 1 0 1 1 0 0 0 0 Output 0 Explanation In the first example, the room is 3x3 with one blocked cell. There are two unique paths from the top-left to the bottom-right corner: [(0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2)] and [(0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2)], avoiding the blocked cell. In the second example, the only path available is [(0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2)], as the grid is more constrained. In the third example, there is no possible path due to the positioning of blocked cells.","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of a grid, while avoiding blocked cells. N = len(grid) M = len(grid[0]) # If the starting or ending point is blocked, there is no possible path if grid[0][0] == 1 or grid[N-1][M-1] == 1: return 0 # Create a 2D dp array to store the number of ways to reach each cell dp = [[0] * M for _ in range(N)] # Initialize the starting point dp[0][0] = 1 # Fill the dp array for i in range(N): for j in range(M): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"A large data processing company has developed a new algorithm to improve the efficiency of their software. This algorithm processes data in the form of integer sequences. However, the company faces a challenge in testing the algorithm as it needs to know the maximum sum of a non-empty sub-sequence of these sequences to establish performance benchmarks. Your task is to write a function that takes as input a list of integers and returns the maximum sum of any non-empty sub-sequence. A sub-sequence is defined as a sequence derived by deleting zero or more elements without changing the order of the remaining elements. Input - The input consists of a single integer list of length n (1 ≤ n ≤ 1000), where each integer is between -1000 and 1000 inclusive. Output - Output a single integer which is the maximum sum of any non-empty sub-sequence of the input list. Examples Input [3, -1, 4, 1, -5, 9] Output 17 Input [-2, -3, -1, -4] Output -1 Note In the first example, the maximum sum of any non-empty sub-sequence is obtained by including all positive numbers: 3 + 4 + 1 + 9 = 17. In the second example, all numbers are negative, so the maximum sum of any non-empty sub-sequence is -1, which is the least negative number in the list.","solution":"def max_subsequence_sum(nums): Returns the maximum sum of any non-empty sub-sequence of the input list of integers. # Include only positive numbers to maximize the sum positive_sum = sum(x for x in nums if x > 0) # If there are no positive numbers, return the maximum negative number if positive_sum == 0: return max(nums) return positive_sum"},{"question":"You are an ocean explorer trying to map a coral reef. The coral reef can be represented as a 2D grid of size N times M where each cell either contains coral or is empty water. You want to identify all the distinct clusters of coral in the grid. A cluster is defined as any group of connected \'C\' cells, where connectivity occurs either horizontally or vertically (but not diagonally). Write a function `count_clusters` that takes a 2D grid of size N times M, where each element of the grid is either \'C\' (coral) or \'W\' (water), and returns the number of distinct clusters of coral. # Function Signature ```python def count_clusters(grid: List[List[str]]) -> int: pass ``` # Input - The first line contains two integers N and M, the dimensions of the grid. - The next N lines each contain a string of length M, representing the grid, where each character is either \'C\' or \'W\'. # Output - Output a single integer representing the number of distinct coral clusters. # Example ```plaintext ------ Example Input ------ 4 5 CCWCC CWCCC WWCCC CCWCC ------ Example Output ------ 3 ``` # Constraints - 1 leq N leq 1000 - 1 leq M leq 1000 - The grid contains only the characters \'C\' and \'W\'. # Explanation In the example grid, there are three distinct coral clusters: 1. The first cluster includes cells (0,0), (0,1), and (1,0). 2. The second cluster includes cells (0,3), (0,4), (1,3), (1,4), (2,3), (2,4). 3. The third cluster includes cells (3,0), (3,1). Each cluster is identified by interconnected \'C\' cells, and there are exactly three such groups.","solution":"from typing import List def count_clusters(grid: List[List[str]]) -> int: Returns the number of distinct clusters of coral in the given grid. if not grid or not grid[0]: return 0 def dfs(x, y): if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] != \'C\': return grid[x][y] = \'V\' # Mark the cell as visited # Check all 4 possible directions dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) clusters = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'C\': # Found a new cluster clusters += 1 dfs(i, j) return clusters"},{"question":"Given an array of integers nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same and complete the function with the remaining elements while minimizing the memory usage to O(1). You can return zero or any other value to indicate that the array has been modified in place, do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. Example 1: Input: nums = [1,1,2] Output: [1,2] Explanation: The function should modify the array to [1,2] and return length 2. Example 2: Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: [0,1,2,3,4] Explanation: The function should modify the array to [0,1,2,3,4] and return length 5. Constraints: 0 <= nums.length <= 3000 -100 <= nums[i] <= 100 nums is sorted in non-decreasing order.","solution":"def remove_duplicates(nums): Removes duplicates from the sorted list nums and returns the length of the unique elements list. Elements beyond the unique collection can be ignored. Parameters: nums (List[int]): A list of sorted integers Returns: int: The length of the list with unique elements if not nums: return 0 unique_index = 0 for i in range(1, len(nums)): if nums[i] != nums[unique_index]: unique_index += 1 nums[unique_index] = nums[i] return unique_index + 1"},{"question":"Write a program that simulates a simplified banking system. The program should allow users to create accounts, deposit money, withdraw money, and check the balance. Each account has a unique account number and an initial balance of 0. It should handle up to 10 accounts. The system should support the following operations: 1. **Create Account**: Create a new account with a unique 5-digit account number. 2. **Deposit**: Deposit a specified amount into a specified account. 3. **Withdraw**: Withdraw a specified amount from a specified account. The balance cannot go below zero. 4. **Balance**: Check the current balance of a specified account. 5. **Quit**: Exit the program. If an invalid operation is requested, the program should print \\"Invalid Operation\\". Input The input will be a series of commands, one per line. Each command will be one of the following formats: - `CREATE` (followed by a valid 5 digit account number if specified) - `DEPOSIT <account_number> <amount>` - `WITHDRAW <account_number> <amount>` - `BALANCE <account_number>` - `QUIT` Output For each command, except for `QUIT`, the program should produce the appropriate output: - For `CREATE`: If account creation is successful, output \\"Account <number> created\\", otherwise \\"Account limit reached\\" or \\"Account <number> already exists\\". - For `DEPOSIT`: Acknowledge the deposit with \\"Deposited <amount> to <account_number>\\", or \\"Invalid account\\". - For `WITHDRAW`: Acknowledge the withdrawal with \\"Withdrew <amount> from <account_number>\\", \\"Insufficient funds\\", or \\"Invalid account\\". - For `BALANCE`: Show the current balance with \\"Account <account_number> balance <balance>\\", or \\"Invalid account\\". Example Input: ``` CREATE 12345 CREATE 54321 DEPOSIT 12345 200 WITHDRAW 12345 50 BALANCE 12345 CREATE 12345 NONEXISTENTOP WITHDRAW 12346 50 BALANCE 12346 QUIT ``` Output: ``` Account 12345 created Account 54321 created Deposited 200 to 12345 Withdrew 50 from 12345 Account 12345 balance 150 Account 12345 already exists Invalid Operation Invalid account Invalid account ```","solution":"class BankSystem: def __init__(self): self.accounts = {} self.account_limit = 10 def create_account(self, account_number): if len(self.accounts) >= self.account_limit: return \\"Account limit reached\\" if account_number in self.accounts: return f\\"Account {account_number} already exists\\" self.accounts[account_number] = 0 return f\\"Account {account_number} created\\" def deposit(self, account_number, amount): if account_number not in self.accounts: return \\"Invalid account\\" self.accounts[account_number] += amount return f\\"Deposited {amount} to {account_number}\\" def withdraw(self, account_number, amount): if account_number not in self.accounts: return \\"Invalid account\\" if self.accounts[account_number] < amount: return \\"Insufficient funds\\" self.accounts[account_number] -= amount return f\\"Withdrew {amount} from {account_number}\\" def balance(self, account_number): if account_number not in self.accounts: return \\"Invalid account\\" return f\\"Account {account_number} balance {self.accounts[account_number]}\\" def handle_command(self, command): parts = command.split() operation = parts[0] if operation == \\"CREATE\\": if len(parts) != 2: return \\"Invalid Operation\\" account_number = parts[1] return self.create_account(account_number) elif operation == \\"DEPOSIT\\": if len(parts) != 3: return \\"Invalid Operation\\" account_number, amount = parts[1], int(parts[2]) return self.deposit(account_number, amount) elif operation == \\"WITHDRAW\\": if len(parts) != 3: return \\"Invalid Operation\\" account_number, amount = parts[1], int(parts[2]) return self.withdraw(account_number, amount) elif operation == \\"BALANCE\\": if len(parts) != 2: return \\"Invalid Operation\\" account_number = parts[1] return self.balance(account_number) elif operation == \\"QUIT\\": return None else: return \\"Invalid Operation\\""},{"question":"In a distant kingdom, there exists a town famous for its bustling markets and intricate network of alleyways. The town consists of n intersections numbered from 1 to n connected by m bidirectional alleyways numbered from 1 to m. Each alleyway links two different intersections, and no two alleyways connect the same pair of intersections. A special event occurs in this town called \\"Festival of Paths\\". During this event, all residents and visitors enjoy finding unique paths through the town while avoiding revisiting any intersection. We define a unique path as a sequence of intersections t1, t2, ..., tp, such that: * t1 is the start intersection * tp is the end intersection * for any i (1 ≤ i < p), intersections ti and ti + 1 are connected by an alleyway * no intersection is revisited in the path Your task is to calculate the number of unique paths between given pairs of intersections during the \\"Festival of Paths\\". Input The first input line contains two integers n and m, separated by a space, where n is the number of intersections and m is the number of alleyways in the town. The following m lines contain pairs of integers ai, bi (1 ≤ ai, bi ≤ n, ai ≠ bi), separated by a space — the numbers of intersections connected by the i-th alleyway. It is guaranteed that any two intersections are connected by no more than one alleyway, and there exists a unique path between any two intersections in the given input. The next line contains a single integer q — the number of queries. The following q lines contain pairs of integers si, ti (1 ≤ si, ti ≤ n), separated by a space, where si is the start intersection and ti is the end intersection for the i-th query. The input limitations for all cases are: * 1 ≤ n ≤ 1000 * 1 ≤ m ≤ 1000 * 1 ≤ q ≤ 1000 Output Print exactly q lines, each line containing a single integer qi — the number of unique paths from intersection si to intersection ti for the i-th query. Examples Input 6 7 1 2 2 3 3 4 4 5 5 6 2 5 3 6 3 1 6 2 4 1 5 Output 1 1 1 Note The paths between intersections in the town remain unique due to the setup of the alleyways. For example, for the first query, the unique path from intersection 1 to intersection 6 is 1 → 2 → 3 → 4 → 5 → 6. For the second query, the unique path from intersection 2 to intersection 4 is 2 → 3 → 4. Each query result is 1, indicating that there is exactly one unique path between the given pairs of intersections during the “Festival of Paths”.","solution":"import networkx as nx def festival_of_paths(n, m, edges, q, queries): # Create a graph using networkx G = nx.Graph() G.add_nodes_from(range(1, n+1)) G.add_edges_from(edges) results = [] for si, ti in queries: # Since the problem guarantees there\'s a unique path between any two nodes, # A simple path length check ensures the unique path. shortest_path = nx.shortest_path(G, source=si, target=ti) results.append(1 if shortest_path else 0) return results"},{"question":"Consider a chessboard of size N x N. The rows are numbered from 1 to N and the columns are numbered from 1 to N. A knight is placed on the cell (1, 1). You are required to find the minimum number of moves the knight needs to reach a cell (x, y). The moves of a knight are as follows: it can move to a cell that is two squares away horizontally and one square vertically, or two squares vertically and one square horizontally. Note that during its move, the knight can never go outside the boundaries of the board. Given the dimensions of the board and the destination cell, write a function that calculates the minimum number of moves required for the knight to reach the destination. The function should return -1 if the destination cell is unreachable from the starting position. Input: - The first line contains an integer T, the number of test cases. - Each test case consists of a single line containing three integers: N, x, and y, where N is the dimension of the chessboard and (x, y) is the destination cell. Output: - For each test case, output the minimum number of moves required for the knight to reach the cell (x, y) from the cell (1, 1). If it is not possible for the knight to reach the cell, output -1. Constraints: 1 ≤ T ≤ 100 3 ≤ N ≤ 1000 1 ≤ x, y ≤ N Example Input: 2 8 8 8 5 4 5 Example Output: 6 3","solution":"from collections import deque def min_knight_moves(n, x, y): directions = [ (2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1) ] start = (1, 1) target = (x, y) if start == target: return 0 queue = deque([(start, 0)]) visited = set([start]) while queue: (curr_x, curr_y), dist = queue.popleft() for dx, dy in directions: new_x, new_y = curr_x + dx, curr_y + dy if (new_x, new_y) == target: return dist + 1 if 1 <= new_x <= n and 1 <= new_y <= n and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append(((new_x, new_y), dist + 1)) return -1 def solve_knight_moves(T, cases): results = [] for n, x, y in cases: results.append(min_knight_moves(n, x, y)) return results"},{"question":"Your task is to design a text-based maze navigation simulation program. The maze is represented as a grid where each cell is either empty (.) or a wall (#). The goal is to determine if a path exists from the starting point to the destination using only valid moves (up, down, left, right). - The maze is provided as a list of strings where each string represents a row in the grid. - The starting point is denoted by \'S\'. - The destination is denoted by \'D\'. - The empty cells (.) are passable. - The wall cells (#) are impassable. Your program should return `True` if there exists a path from \'S\' to \'D\', and `False` otherwise. # Input - An integer n (1 ≤ n ≤ 100), the number of rows in the maze. - An integer m (1 ≤ m ≤ 100), the number of columns in the maze. - A list of n strings of length m that represents the maze. # Output - A boolean value. # Examples Example 1 Input: ``` 4 5 [ \\"S....\\", \\".#.\\", \\".#D#.\\", \\"...#.\\", ] ``` Output: ``` True ``` Example 2 Input: ``` 3 3 [ \\"S..\\", \\"#\\", \\"..D\\", ] ``` Output: ``` False ``` Example 3 Input: ``` 2 2 [ \\"S#\\", \\"#D\\", ] ``` Output: ``` False ```","solution":"def is_path_exists(maze): Determines if there is a path from \'S\' to \'D\' in the given maze. Args: - maze (list of strings): The maze grid, each string representing a row. Returns: - bool: True if a path exists, False otherwise. if not maze: return False n = len(maze) m = len(maze[0]) # Find the starting point \'S\' and destination \'D\' start = None destination = None for i in range(n): for j in range(m): if maze[i][j] == \'S\': start = (i, j) elif maze[i][j] == \'D\': destination = (i, j) if not start or not destination: return False # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS to find the path from collections import deque queue = deque([start]) visited = set([start]) while queue: current = queue.popleft() if current == destination: return True for direction in directions: next_x, next_y = current[0] + direction[0], current[1] + direction[1] if 0 <= next_x < n and 0 <= next_y < m and maze[next_x][next_y] != \'#\' and (next_x, next_y) not in visited: queue.append((next_x, next_y)) visited.add((next_x, next_y)) return False"},{"question":"One day, Arya challenges Gendry to solve a puzzle involving n-digit numbers. The rules are simple: Given an integer n (1 ≤ n ≤ 8) and a target sum S (1 ≤ S ≤ 36), Gendry needs to find out how many n-digit numbers have a sum of their digits equal to S. He must also ensure that the number does not start with the digit 0 unless n equals 1. Input: The input consists of pairs of integers n and S, separated by a space. The input will end when a line containing a pair of zeros (0 0) is encountered, which should not be processed. Output: For each pair of n and S, output a single line containing the number of n-digit numbers whose digits sum up to S. SAMPLE INPUT: 2 5 3 6 0 0 SAMPLE OUTPUT: 5 21 Explanation: For the first pair (2, 5): Valid 2-digit numbers are 14, 23, 32, 41, and 50. There are 5 such numbers. For the second pair (3, 6): Valid 3-digit numbers are 123, 132, 213, 222, 231, 312, 321, 105, 114, 150, 141, 240, 330, 420, 315, 405, 345, 450, 405, and 540. There are 21 such numbers.","solution":"def count_numbers_with_digit_sum(n, S): Returns the count of n-digit numbers whose digits sum to S. def helper(n, S, current_sum, starting_digit): if n == 0: return 1 if current_sum == S else 0 count = 0 for digit in range(starting_digit, 10): if current_sum + digit <= S: count += helper(n-1, S, current_sum + digit, 0) return count if n == 1: return 1 if 0 <= S <= 9 else 0 else: return helper(n, S, 0, 1) def process_input(input_str): lines = input_str.strip().split(\'n\') results = [] for line in lines: n, S = map(int, line.split()) if n == 0 and S == 0: break results.append(count_numbers_with_digit_sum(n, S)) return results"},{"question":"Given an integer array `nums` and an integer `threshold`, return the smallest positive integer divisor `d` such that the sum of the array after dividing each element by the divisor is less than or equal to `threshold`. The result of the division should be rounded up to the nearest integer. Implement the function `find_divisor(nums: List[int], threshold: int) -> int` to solve the problem. Example 1: ``` Input: nums = [1,2,5,9], threshold = 6 Output: 5 ``` Explanation: When dividing by 5, we get [1, 1, 1, 2]. Sum is 5 which is less than or equal to 6. Example 2: ``` Input: nums = [2,3,5,7,11], threshold = 11 Output: 3 ``` Explanation: When dividing by 3, we get [1, 1, 2, 3, 4]. Sum is 11 which is less than or equal to 11. Constraints: - `1 <= nums.length <= 10^5` - `1 <= nums[i] <= 10^6` - `nums` is an array of positive integers. - `1 <= threshold <= 10^6` Note: Optimize your solution to handle the upper limits of the input sizes efficiently.","solution":"import math from typing import List def find_divisor(nums: List[int], threshold: int) -> int: def compute_sum(d): return sum(math.ceil(num / d) for num in nums) left, right = 1, max(nums) while left < right: mid = (left + right) // 2 if compute_sum(mid) > threshold: left = mid + 1 else: right = mid return left"},{"question":"In a software development class, the professor introduces various sorting algorithms. He gives the students an assignment to implement the Bubble Sort algorithm on a list of integers. The Bubble Sort algorithm works by repeatedly stepping through the list, comparing adjacent elements and swapping them if they are in the wrong order. The algorithm gets its name because smaller elements \\"bubble\\" to the top of the list. Write a function that implements Bubble Sort and sorts a given list of integers in ascending order. Input: - An integer N, the number of elements in the list (1 ≤ N ≤ 100) - A list of N integers separated by spaces, where each integer is between -1000 and 1000 Output: - The sorted list of integers in ascending order, separated by spaces Example: Input: 5 64 34 25 12 22 Output: 12 22 25 34 64","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the Bubble Sort algorithm. Parameters: arr (list): The list of integers to be sorted. Returns: list: A sorted list of integers in ascending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Anna loves playing with numbers. She particularly enjoys sequences where each subsequent number is formed by adding the digits of the previous number to itself. Given an initial number and the length of the sequence, help Anna generate the entire sequence. INPUT The first line of input contains the number of test cases, T. 0 < T ≤ 10 Each test case starts with two integers: N (1 ≤ N ≤ 10^9) - the initial number, L (1 ≤ L ≤ 10^4) - the length of the sequence. OUTPUT For each test case, print \\"Case T: S\\" without quotes in a single line. T is the case number, starting with 1. S is the sequence of L numbers separated by a space. SAMPLE INPUT 2 5 3 12 5 SAMPLE OUTPUT Case 1: 5 10 11 Case 2: 12 15 21 24 30 Explanation Case 1: Starting with 5, the next number is 5 + 5 = 10. Next number after 10 is 10 + (1+0) = 11. Case 2: Starting with 12, the next number is 12 + (1+2) = 15. Next number after 15 is 15 + (1+5) = 21, and so on.","solution":"def generate_sequence(N, L): Generates a sequence of numbers where each subsequent number is formed by adding the digits of the previous number to itself. Parameters: N (int): The initial number. L (int): The length of the sequence. Returns: List[int]: The generated sequence of length L. def sum_of_digits(num): return sum(int(digit) for digit in str(num)) sequence = [N] for _ in range(1, L): N = N + sum_of_digits(N) sequence.append(N) return sequence def generate_sequences(test_cases): For each test case, generates the sequence and formats the output. Parameters: test_cases (List[Tuple[int, int]]): List of tuples containing initial number and length of sequence. Returns: List[str]: List of formatted output strings for each test case. results = [] for i, (N, L) in enumerate(test_cases): sequence = generate_sequence(N, L) results.append(f\\"Case {i + 1}: \\" + \' \'.join(map(str, sequence))) return results"},{"question":"You have been tasked with developing a basic system to organize and manage to-do items for a productivity application. Each to-do item has a title, a description, and an optional due date. The system supports adding, completing, and listing items based on certain criteria. Implement a basic CLI-based to-do manager with the following commands: 1. `ADD title description [due_date]` - Adds a new to-do item. The due_date is optional and follows the format `YYYY-MM-DD`. If due date is not specified, it should be recorded as `None`. 2. `COMPLETE title` - Marks the to-do item with the given title as completed. The title will be unique. 3. `LIST [uncompleted|completed|all]` - Lists to-do items. If no option is given, it lists all items. Otherwise, it lists only uncompleted or completed items based on the given option. Each item should be listed with its title, description, due date (or \\"No due date\\"), and completion status (\\"Completed\\"/\\"Uncompleted\\"). Input: - Each command is provided on a new line. - Commands are terminated by the command `EXIT`. Output: - The output should be generated for the `LIST` command as formatted strings representing each to-do item. Example: Input: ``` ADD \\"Buy groceries\\" \\"Buy milk, eggs, and bread\\" 2023-11-03 ADD \\"Read book\\" \\"Finish reading the current novel\\" ADD \\"Prepare presentation\\" \\"Slides for Monday\'s meeting\\" COMPLETE \\"Read book\\" LIST all EXIT ``` Output: ``` Title: Buy groceries, Description: Buy milk, eggs, and bread, Due Date: 2023-11-03, Status: Uncompleted Title: Read book, Description: Finish reading the current novel, Due Date: No due date, Status: Completed Title: Prepare presentation, Description: Slides for Monday\'s meeting, Due Date: No due date, Status: Uncompleted ``` # Requirements: 1. Implement the data structure to store the to-do items efficiently. 2. Handle the commands correctly as described. 3. Ensure that the output format for the `LIST` command matches the example output.","solution":"class ToDoItem: def __init__(self, title, description, due_date=None): self.title = title self.description = description self.due_date = due_date self.completed = False class ToDoManager: def __init__(self): self.items = {} def add(self, title, description, due_date=None): item = ToDoItem(title, description, due_date) self.items[title] = item def complete(self, title): if title in self.items: self.items[title].completed = True def list_items(self, option=\\"all\\"): filtered_items = self.items.values() if option == \\"completed\\": filtered_items = filter(lambda item: item.completed, self.items.values()) elif option == \\"uncompleted\\": filtered_items = filter(lambda item: not item.completed, self.items.values()) result = [] for item in filtered_items: due_date = item.due_date if item.due_date else \\"No due date\\" status = \\"Completed\\" if item.completed else \\"Uncompleted\\" result.append(f\\"Title: {item.title}, Description: {item.description}, Due Date: {due_date}, Status: {status}\\") return result def process_input(commands): manager = ToDoManager() result = [] for command in commands: parts = command.split(\\" \\", 1) cmd = parts[0] if cmd == \\"EXIT\\": break elif cmd == \\"ADD\\": parts = command.split(\'\\"\') title = parts[1] description = parts[3] due_date = parts[4].strip() if len(parts) > 4 else None manager.add(title, description, due_date) elif cmd == \\"COMPLETE\\": title = command.split(\'\\"\')[1] manager.complete(title) elif cmd == \\"LIST\\": option = command.split(\\" \\")[1] if len(command.split(\\" \\")) > 1 else \\"all\\" result.append(\\"n\\".join(manager.list_items(option))) if result: print(\\"n\\".join(result)) # Example Usage commands = [ \'ADD \\"Buy groceries\\" \\"Buy milk, eggs, and bread\\" 2023-11-03\', \'ADD \\"Read book\\" \\"Finish reading the current novel\\"\', \'ADD \\"Prepare presentation\\" \\"Slides for Monday\'s meeting\\"\', \'COMPLETE \\"Read book\\"\', \'LIST all\', \'EXIT\' ] process_input(commands)"},{"question":"You are part of a team developing a software solution for a warehouse management system. One of the problems you need to solve involves efficiently organizing tasks for workers in the warehouse. Each task is characterized by its start and end times, and each worker can complete one task at a time. Your goal is to determine the maximum number of non-overlapping tasks that a single worker can complete in a day. For example, suppose there are 4 tasks with start and end times (1, 3), (2, 5), (3, 9), and (6, 8). A worker can complete at most two non-overlapping tasks from this list: either the tasks (1, 3) and (6, 8), or the tasks (2, 5) and (6, 8). -----Input format----- The first line contains an integer N, the number of tasks. The next N lines each contain two space-separated integers S and E, representing the start and end times of a task, respectively, with S < E. -----Output format----- Print a single integer, the maximum number of non-overlapping tasks that a single worker can complete. -----Testdata----- All the starting and ending times are distinct. All the time instances are between 1 and 1000000 (inclusive). - Subtask 1 (30 marks) - Subtask 2 (70 marks) You may assume that 1 ≤ N ≤ 105. In 30% of the cases, 1 ≤ N ≤ 103. -----Sample Input----- 4 1 3 2 5 3 9 6 8 -----Sample Output----- 2","solution":"def max_non_overlapping_tasks(tasks): Returns the maximum number of non-overlapping tasks a single worker can complete in a day. if not tasks: return 0 # Sort tasks based on their end time tasks.sort(key=lambda x: x[1]) count = 1 end_time = tasks[0][1] for i in range(1, len(tasks)): if tasks[i][0] >= end_time: count += 1 end_time = tasks[i][1] return count"},{"question":"Write a program that computes the number of ways you can partition a given number `n` into a sum of exactly `k` positive integers. Each partition should be a unique combination of integers such that they are unordered (the order does not matter). For example, for `n = 5` and `k = 2`, one possible partition is `2 + 3`, which is equivalent to `3 + 2`. Note Constraints * 1 ≤ n ≤ 50 * 1 ≤ k ≤ n Input The input consists of multiple datasets. For each dataset, two integers `n` and `k` are given in a line. The input ends with two zeros for `n` and `k` respectively. Your program should not process these terminal symbols. Output For each dataset, print the number of partitions in a line. Example Input 5 2 6 3 0 0 Output 2 3","solution":"def partition(n, k): Computes the number of ways to partition n into exactly k positive integers. # Initialize a table where dp[i][j] will be storing the count of partitions # of j using exactly i numbers. dp = [[0 for _ in range(n+1)] for _ in range(k+1)] # There\'s one way to partition 0 using 0 numbers. dp[0][0] = 1 # Iterate over all numbers from 1 to n for i in range(1, n + 1): # Iterate over the partitions using 1 to k parts for j in range(1, k + 1): if i >= j: dp[j][i] = dp[j-1][i-1] + dp[j][i-j] return dp[k][n] def process_input(data): results = [] for line in data.splitlines(): n, k = map(int, line.split()) if n == 0 and k == 0: break results.append(partition(n, k)) return results"},{"question":"As a software developer, you are required to write a program to help a library manage their book check-ins and check-outs efficiently. The library follows a strict policy that a book can be checked out if and only if it is currently available (i.e., it was previously checked in). To implement this logic, you need to create a small library system to track the records of books that get checked out and checked in. Given a series of events in chronological order, determine the final status of each book in the library. Each event is either: 1. \\"CheckIn <book_id>\\" - indicating that a book with ID <book_id> has been checked in. 2. \\"CheckOut <book_id>\\" - indicating that a book with ID <book_id> has been checked out. Input format: - The first line contains an integer `t`, denoting the number of events. - The following `t` lines each contain an event string. Output format: Print the final status of each book in the library. For each book, print its ID followed by its current status (\\"Available\\" if the book is checked in or \\"Checked Out\\" if the book is checked out). Print the book IDs in lexicographical order. Constraints: 1. 1 ≤ t ≤ 200 2. Each <book_id> is a string of lowercase alphabet characters (1 ≤ length of <book_id> ≤ 50). 3. Any book should be checked in before it is checked out. SAMPLE INPUT 6 CheckIn book1 CheckOut book1 CheckIn book2 CheckOut book2 CheckIn book3 CheckOut book3 SAMPLE OUTPUT book1 Checked Out book2 Checked Out book3 Checked Out SAMPLE INPUT 4 CheckIn bookA CheckIn bookB CheckOut bookA CheckOut bookB SAMPLE OUTPUT bookA Checked Out bookB Checked Out SAMPLE INPUT 3 CheckIn book1 CheckIn book2 CheckIn book1 SAMPLE OUTPUT book1 Available book2 Available Explanation: In the first sample, all the books are checked out after being checked in, so their final statuses are \\"Checked Out\\". In the second sample, all the books are checked out after being checked in, so their final statuses are \\"Checked Out\\". In the third sample, book1 is checked in twice, resulting in it being available, while book2 is checked in once and remains available.","solution":"def library_management(events): book_status = {} for event in events: action, book_id = event.split() if action == \\"CheckIn\\": book_status[book_id] = \\"Available\\" elif action == \\"CheckOut\\": book_status[book_id] = \\"Checked Out\\" sorted_books = sorted(book_status.items()) return sorted_books # Function to transform input and output def process_library_events(t, event_list): events = [input().strip() for _ in range(t)] final_status = library_management(events) for book_id, status in final_status: print(f\\"{book_id} {status}\\")"},{"question":"Write a function that checks if a given grid of characters represents a valid Sudoku solution. The Sudoku grid is 9x9 and can have values from \'1\' to \'9\' or be empty cells (represented by \'.\'). A valid Sudoku solution must satisfy the following constraints: - Each row must contain the digits \'1\' to \'9\' without repetition. - Each column must contain the digits \'1\' to \'9\' without repetition. - Each of the nine 3x3 sub-grids must contain the digits \'1\' to \'9\' without repetition. If the grid is a valid Sudoku solution, return `true`. Otherwise, return `false`. -----Input:----- - A 9x9 2D list that represents the Sudoku grid. -----Output:----- - A boolean indicating whether the Sudoku grid is valid. -----Constraints----- - The input grid will always be a list of lists with 9 inner lists, each containing exactly 9 characters. - Each character in the grid can be \'1\', \'2\', ..., \'9\', or \'.\'. -----Sample Inputample Inputample Output 1:----- true -----Sample Output 2:----- false -----Explanation:----- The grid in Sample Input 1 represents a valid Sudoku solution, so the output is true. In Sample Input 2, the grid contains two \'8\'s in the first column, violating the Sudoku rules, so the output is false.","solution":"def is_valid_sudoku(grid): def is_valid_unit(unit): elements = [num for num in unit if num != \'.\'] return len(elements) == len(set(elements)) def is_valid_row(grid): for row in grid: if not is_valid_unit(row): return False return True def is_valid_col(grid): for col in range(9): if not is_valid_unit([grid[row][col] for row in range(9)]): return False return True def is_valid_subgrid(grid): for i in range(0, 9, 3): for j in range(0, 9, 3): subgrid = [grid[x][y] for x in range(i, i+3) for y in range(j, j+3)] if not is_valid_unit(subgrid): return False return True return is_valid_row(grid) and is_valid_col(grid) and is_valid_subgrid(grid)"},{"question":"You are given a list of integers representing the number of hours students studied each day over a week. Calculate the average number of hours studied per day, rounding down to the nearest integer. -----Constraints----- - The list contains exactly 7 integers. - Each integer in the list is between 0 and 24 (inclusive). -----Input----- Input is given from Standard Input in the following format: hours_1 hours_2 hours_3 hours_4 hours_5 hours_6 hours_7 -----Output----- Print the average number of hours studied per day, rounded down to the nearest integer. -----Sample Input----- 5 6 7 8 4 5 7 -----Sample Output----- 6 The total number of hours studied is 42, and the average is 42 / 7 = 6.0, which is already an integer and remains 6 when rounded down.","solution":"def average_hours_studied(hours): Given a list of 7 integers representing hours studied each day over a week, calculate the average number of hours studied per day, rounding down to the nearest integer. :param hours: List of 7 integers (each between 0 and 24 inclusive). :return: Average number of hours studied per day, rounded down (integer). if len(hours) != 7: raise ValueError(\\"List must contain exactly 7 integers\\") total_hours = sum(hours) average_hours = total_hours // len(hours) return average_hours"},{"question":"A software company conducts regular coding tests for its employees. Each employee solves problems of varying difficulty levels. Given an array D of length N, D_i represents the difficulty level of the i^{th} problem. The company always assigns problems in increasing order of difficulty. However, the employees are rewarded based on consecutive problems solved correctly. The reward mechanism works as follows: for a sequence of consecutive problems solved correctly, the reward is the sum of their difficulties multiplied by the length of the sequence. Your task is to determine the maximum reward an employee can get if they solve the problems consecutively from the start. -----Input:----- - The first line contains T, the number of test cases. Then the test cases follow. - For each test case, the first line contains N, the number of problems. - The second line contains N space-separated integers, D_1 to D_N, denoting the difficulty levels of the problems. -----Output:----- - For each test case, print a single line containing the maximum reward that can be obtained by solving problems consecutively from the start. -----Constraints----- - 0 < T leq 100 - 1 leq N leq 10^5 - 1 leq D_i leq 100 - Sum of N over all test cases does not exceed 10^6 -----Sample Input:----- 2 4 2 3 2 5 5 1 2 3 3 1 -----Sample Output:----- 20 30 -----EXPLANATION:----- Test case 1: The employee can solve all problems in order. The rewards are calculated as follows: - For the first 4 problems: (2 + 3 + 2 + 5) * 4 = 12 * 4 = 48 Test case 2: Here the rewards can be calculated as follows: - For the first 5 problems: (1 + 2 + 3 + 3 + 1) * 5 = 10 * 5 = 50 Therefore, the maximum reward is 48 for the first test case and 50 for the second test case.","solution":"def max_reward(test_cases): results = [] for N, difficulties in test_cases: total_difficulty = sum(difficulties) reward = total_difficulty * N results.append(reward) return results"},{"question":"Write a function that calculates the meeting time of three friends who are walking at different speeds towards each other on a circular track. Given the total distance around the track and their individual speeds, determine at what time they will all meet at a single point after they start walking. Assume: - The friends start walking at time 0 from different points on the track. - The track has a total length `L`. - Friend A walks at speed `vA`, Friend B at speed `vB`, and Friend C at speed `vC`. Write a function `meeting_time(L, vA, vB, vC)` that takes the total distance `L` and the speeds `vA`, `vB`, and `vC` as input and returns the time `t` when all three friends meet at a single point. Input A single line with four integers: total length of the track `L`, speed of Friend A `vA`, speed of Friend B `vB`, and speed of Friend C `vC`. Output Return a single integer or a floating-point number that represents the time `t` when all three friends meet at a single point. Sample Input ``` 12 3 2 1 ``` Sample Output ``` 12.0 ``` Note: - The friends meet at time `t` when the common multiples of their speeds, aligned with the track length, coincide. - The output should be accurate to at least one decimal place.","solution":"from math import gcd from functools import reduce def lcm(a, b): Helper function to calculate least common multiple of two numbers. return a * b // gcd(a, b) def meeting_time(L, vA, vB, vC): Calculate the meeting time of three friends on a circular track given the total length of the track and their individual speeds. Args: L (int): Total distance around the track. vA (int): Speed of Friend A. vB (int): Speed of Friend B. vC (int): Speed of Friend C. Returns: float: The time when all three friends meet at a single point. # Find the least common multiple of the speeds lcm_speeds = reduce(lcm, [vA, vB, vC]) # Calculate the time to make them meet at the same point return L * lcm_speeds / gcd(L, lcm_speeds)"},{"question":"A botanist is monitoring the growth of several plants in his greenhouse. He records the height of each plant every day. To track the overall growth trends, he needs to calculate the total growth achieved by each plant over a given time period. The botanist has the initial height of each plant and a list of daily growth records. Each record specifies the date and the change in height (which can be positive or negative) since the last recorded height. Given the list of growth records, the task is to find the total growth for each plant over the given time period, starting from their initial height. -----Input----- The first line of the input contains an integer P denoting the number of plants. The first line of each plant\'s block contains an integer D denoting the number of daily growth records for the plant. The next line contains a single integer Hi, the initial height of the plant. Each of the next D lines contains the date and the daily height change Δh for the plant in the format \\"date Δh\\". The date is a string in the format \\"YYYY-MM-DD\\" and Δh is an integer representing the change in height for that day. -----Output----- For each plant, output a single line containing the total growth achieved over the entire period of the records, starting from the initial height. -----Constraints----- - 1 ≤ P ≤ 100 - 0 ≤ D ≤ 1000 - -100 ≤ Δh ≤ 100 - The total length of all date strings in a single input file will not exceed 105. -----Example----- Input: 2 3 10 2023-01-01 5 2023-01-02 -3 2023-01-03 7 2 20 2023-01-01 2 2023-01-02 -5 Output: 19 17","solution":"def total_growth(P, plant_data): Calculate the total growth achieved for each plant based on initial height and daily growth records. Args: P: int - number of plants plant_data: list of tuples, each tuple containing: - D: int - number of daily growth records - Hi: int - initial height of the plant - growth_records: list of tuples with each tuple containing: - date: str - the date of the daily record - dh: int - change in height for that day Returns: list of int - total growth for each plant over the entire period of records results = [] for data in plant_data: D, Hi, growth_records = data total_growth = Hi for record in growth_records: date, dh = record total_growth += dh results.append(total_growth) return results # Example input: # P = 2 # plant_data = [ # (3, 10, [(\\"2023-01-01\\", 5), (\\"2023-01-02\\", -3), (\\"2023-01-03\\", 7)]), # (2, 20, [(\\"2023-01-01\\", 2), (\\"2023-01-02\\", -5)]) # ] # Output: [19, 17]"},{"question":"You are given an array of integers where each integer appears exactly twice, except for one integer which appears exactly once. Write a function that finds the integer that appears only once in the array. Your function should have a time complexity of O(n) and should not use extra space (not counting input arguments). You can assume the array will contain at least one element. Example: Input: [2, 3, 5, 2, 5] Output: 3","solution":"def find_single_number(nums): Finds the integer that appears only once in the array. Args: nums (list): List of integers where exactly one integer appears once and all other integers appear twice. Returns: int: The integer that appears only once. unique_num = 0 for num in nums: unique_num ^= num return unique_num"},{"question":"Implement a function that verifies whether a given sequence of parentheses is valid. A valid parentheses sequence must follow these rules: - The open parentheses must be closed by the same type of parentheses. - Open parentheses must be closed in the correct order. Your function should take a single string as input and return \\"YES\\" if the given sequence is valid, otherwise return \\"NO\\". The input string will contain only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and will have a maximum length of 1000 characters. Input A single line containing a string composed of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Output A single line containing \\"YES\\" if the sequence is valid, otherwise \\"NO\\". Example Input ()[]{} ([{}]) Output YES YES Input ([)] [({}) Output NO NO Write the function to check for the validity of the parentheses sequence.","solution":"def is_valid_parentheses(s): Verifies whether a given sequence of parentheses is valid. Parameters: s (str): Input string containing parentheses. Returns: str: \\"YES\\" if the sequence is valid, \\"NO\\" otherwise. stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or stack.pop() != matching_parentheses[char]: return \\"NO\\" else: return \\"NO\\" return \\"YES\\" if stack == [] else \\"NO\\""},{"question":"Monica loves organizing her bookshelf. Each book on her shelf has a unique integer identifier, and she likes to organize them in increasing order of their identifiers. She keeps adding and removing books from her shelf so often that she needs an automated way to keep track of her book collection. Your task is to help Monica by implementing a system where she can perform the following operations efficiently: 1. **Add Book**: Add a book with a given identifier to the shelf. 2. **Remove Book**: Remove a book with a given identifier from the shelf. 3. **Find K-th book**: Find the identifier of the k-th smallest book on the shelf when the books are ordered by their identifiers. You must process the requests in the order they are given. Input format: - The first line contains an integer Q, the number of requests. - The following Q lines each contain a request in one of the following formats: - \\"1 X\\" — Add a book with identifier X to the shelf. - \\"2 X\\" — Remove a book with identifier X from the shelf. - \\"3 K\\" — Find the K-th smallest book on the shelf. Output format: - For each \\"3 K\\" request, print the identifier of the k-th smallest book on the shelf. If there are fewer than K books on the shelf, print -1. Constraints: - 1 ≤ Q ≤ 100,000 - 1 ≤ X ≤ 10^9 - 1 ≤ K ≤ no. of books currently on the shelf SAMPLE INPUT 7 1 5 1 2 1 9 3 2 2 5 3 2 3 3 SAMPLE OUTPUT 5 9 -1","solution":"import bisect class Bookshelf: def __init__(self): self.books = [] def add_book(self, identifier): bisect.insort(self.books, identifier) def remove_book(self, identifier): index = bisect.bisect_left(self.books, identifier) if index < len(self.books) and self.books[index] == identifier: self.books.pop(index) def find_kth_book(self, k): if 0 < k <= len(self.books): return self.books[k - 1] return -1 def process_requests(requests): bookshelf = Bookshelf() results = [] for request in requests: parts = request.split() if parts[0] == \'1\': bookshelf.add_book(int(parts[1])) elif parts[0] == \'2\': bookshelf.remove_book(int(parts[1])) elif parts[0] == \'3\': results.append(bookshelf.find_kth_book(int(parts[1]))) return results"},{"question":"You are given an array of integers and a target integer. You need to find if there are two distinct indices i and j in the array such that the sum of the elements at these indices is equal to the given target value. If such a pair exists, you should return the indices. If no such pair exists, return `-1`. -----Input----- The first line contains two integers n and target (1 le n le 10^5, -10^9 le target le 10^9). The second line contains n integers in the range -10^9 le array[i] le 10^9. -----Output----- Output two integers, i and j (0 le i, j < n) representing the indices of the elements in the array that add up to the target. If there are multiple valid pairs, you can output any of them. If there are no valid pairs, output `-1`. -----Examples----- Input 4 9 2 7 11 15 Output 0 1 Input 5 10 1 2 3 4 5 Output 3 4 Input 3 6 3 3 3 Output 0 1","solution":"def find_two_sum_indices(arr, target): Finds two indices in the array such that their elements sum up to the target value. If such a pair doesn\'t exist, returns -1. Parameters: arr (list of int): List of integers. target (int): Target sum value. Returns: list of int: List containing two indices or -1 if no such pair exists. num_to_index = {} for i, num in enumerate(arr): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return -1"},{"question":"You are working as an intern at a software company, and your first task is to work on a project involving string manipulation. The project requires a program that can mask sensitive data like credit card numbers when displaying information. Specifically, you need to write a function that takes a string as input and masks all but the last four characters of any sequence of digits (0-9) that is exactly 16 digits long. The masked characters should be replaced with the character `*`. -----Input----- The first line contains a single string s (1 le |s| le 1000) that may contain letters, digits, and special characters. -----Output----- Print the string where each sequence of exactly 16 digits is masked to show only the last four digits and with each of the preceding 12 digits replaced by `*`. -----Example----- Input My credit card number is 1234567812345678. Output My credit card number is ************5678.","solution":"import re def mask_credit_card_number(s): Masks all but the last four characters of any sequence of digits that is exactly 16 digits long in the input string. # Regex pattern to match exactly 16 digits pattern = r\'b(d{12})(d{4})b\' # Replace the matched pattern with 12 \'*\' and last 4 digits masked_string = re.sub(pattern, r\'************2\', s) return masked_string"},{"question":"Write a function that flattens a nested list of arbitrary depth and returns a one-dimensional list containing all the original elements in the same order. The function should also handle and report any non-list elements found within the input list. ```python flatten_list([1, [2, 3], [4, [5, 6]], 7]) == [1, 2, 3, 4, 5, 6, 7] ``` The function should identify and handle any non-list elements: ```python flatten_list([1, [2, \'a\'], [4, [5, 6]], 7]) == \\"There is 1 non-list entry: \'a\'\\" flatten_list([1, [2, \'a\'], \'b\', [4], [5, [6, 7]], 8]) == \\"There are 2 non-list entries: [\'a\', \'b\']\\" ``` If the string is a nested list represented as a string, the function will evaluate and flatten it. ```python flatten_list([1, [2, \'[3, 4]\'], [5, [6, 7]], 8]) == [1, 2, 3, 4, 5, 6, 7, 8] ``` If the list contains a `None` element, the function will ignore it: ```python flatten_list([1, [2, None], [4, [5, 6]], None, 7]) == [1, 2, 4, 5, 6, 7] ``` If the list contains nested empty lists, the function will ignore them: ```python flatten_list([1, [], [2, [[]]], [3, [], [4, 5]], 6]) == [1, 2, 3, 4, 5, 6] ``` Negative numbers or zero will be part of the flattened list without change: ```python flatten_list([1, [2, [-3, 0]], [4, [-5, 6]], 7]) == [1, 2, -3, 0, 4, -5, 6, 7] ``` Enjoy solving this challenge!","solution":"def flatten_list(nested_list): Flattens a nested list of arbitrary depth and returns a one-dimensional list containing all the elements in the same order. Identifies and reports non-list elements found within the input list. flat_list = [] non_list_elements = [] def _flatten(lst): for element in lst: if isinstance(element, list): _flatten(element) elif isinstance(element, str): try: evaluated_element = eval(element) if isinstance(evaluated_element, list): _flatten(evaluated_element) else: non_list_elements.append(element) except (SyntaxError, NameError): non_list_elements.append(element) elif element is None: continue else: flat_list.append(element) _flatten(nested_list) if non_list_elements: plurality = \'are\' if len(non_list_elements) > 1 else \'is\' element_plural = \'entries\' if len(non_list_elements) > 1 else \'entry\' return f\\"There {plurality} {len(non_list_elements)} non-list {element_plural}: {non_list_elements}\\" return flat_list"},{"question":"You are given a list of integers where each integer appears exactly three times except for one integer which appears exactly once. Your task is to find the integer that appears only once. -----Input----- The first line of the input contains a single integer t (1 le t le 10^4) — the number of test cases. Each of the following t test cases contains: - The first line contains an integer n (4 le n le 3 times 10^4, n equiv 1 (bmod 3)) — the number of integers in the list. - The second line contains n integers a_i (-10^9 le a_i le 10^9) separated by spaces. It is guaranteed that exactly one integer appears once and all other integers appear exactly three times. -----Output----- For each test case, print a single integer — the integer that appears only once. -----Examples----- Input 2 10 2 2 3 2 5 5 5 6 6 6 7 1 1 1 -4 8 8 8 Output 3 -4 -----Note----- In the first test case, the integer that appears only once is 3. All other integers (2, 5, and 6) appear exactly three times. In the second test case, the integer that appears only once is -4. All other integers (1, 8) appear exactly three times.","solution":"def find_unique_integer(test_cases): Find the integer that appears exactly once in each test case list. :param test_cases: List of tuples where each tuple contains number of integers and the list of integers. :return: List of integers that appear exactly once for each test case. results = [] for n, numbers in test_cases: ones, twos = 0, 0 for num in numbers: ones = (ones ^ num) & ~twos twos = (twos ^ num) & ~ones results.append(ones) return results"},{"question":"The Central Company uses IDs to track assets within its inventory. Each asset is identified by a unique integer ID. The inventory system maintains a list of asset IDs, but due to administrative oversight, some IDs might be incorrect. An asset ID is valid if its value is between 1 and 10^9 (inclusive). A sequence is corrupted if it does not contain these valid IDs. Your task is to determine how many invalid asset IDs exist in the given sequence. If all IDs within the sequence are valid, your program should output 0. If at least one ID is invalid, your program should output the count of invalid IDs. For example, given an asset sequence where an ID 3 times 10^9 is present, this ID is invalid as it exceeds the upper bound of 10^9. -----Input----- The first line contains a single integer n (1 le n le 10^5). The second line contains n integers a_1, a_2, ldots, a_n (-10^{18} le a_i le 10^{18}). -----Output----- Print a single integer which represents the number of invalid asset IDs in the given sequence. -----Examples----- Input 5 1 2 3 4 5 Output 0 Input 6 1 -5 1000000001 999999999 5 0 Output 3 Input 3 3000000000 2000000000 -1000000000 Output 3 -----Note----- In the first example, all asset IDs are within the valid range, so the output is 0. In the second example, there are three invalid IDs: -5, 1000000001, and 0. Therefore, the output is 3. In the third example, all asset IDs are invalid, and hence the output is 3.","solution":"def count_invalid_asset_ids(n, asset_ids): Returns the count of invalid asset IDs from the given list. Parameters: n (int): The number of asset IDs. asset_ids (list of int): The list of asset IDs. Returns: int: The count of invalid asset IDs. min_valid_id = 1 max_valid_id = 10**9 invalid_count = 0 for id in asset_ids: if id < min_valid_id or id > max_valid_id: invalid_count += 1 return invalid_count"},{"question":"You are given an array of integers, find the integer that appears an odd number of times. **Notes:** - You can assume that only one integer appears an odd number of times. - The array can contain negative integers. - Random tests: maximum array length is 500, and the range of values in the array is between -100 and 100. Examples ``` [1, 2, 3, 1, 2, 3, 2] --> 2 ``` ...because `2` appears three times (an odd number of times) ``` [5, 7, 5, 5, 7] --> 5 ``` ...because `5` appears three times (an odd number of times) ``` [-1, -2, -1, -2, -3, -3, -3] --> -3 ``` ...because `-3` appears three times (an odd number of times)","solution":"def find_odd_occurrence(arr): Finds the integer in the array that appears an odd number of times. Args: arr: List of integers Returns: Integer that appears an odd number of times. result = 0 for number in arr: result ^= number # XOR operation return result"},{"question":"John and Alice are playing a game with arrays. They take turns to perform operations on an array consisting of n distinct integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ n). In each turn, the player can select any element from the array and remove it. However, there is a catch: after removing an element, the element that occupies its original position in the array should not be greater than the element that was just removed. The game ends when no more moves are possible. The player who cannot make a move loses the game. Given the initial configuration of the array, determine if John, who starts the game, has a winning strategy assuming both players play optimally. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100). The second line contains n integers representing the array. -----Output----- Output \\"John\\" if John has a winning strategy, otherwise output \\"Alice\\". -----Examples----- Input 3 3 1 2 Output Alice Input 4 2 3 1 4 Output John -----Note----- In the first example, whatever move John makes, Alice will always have a move available, making John the loser. In the second example, John can start by removing 4, making 1 unreachable for Alice, thus ensuring his win.","solution":"def determine_winner(arr): Determines if John has a winning strategy given the initial configuration of the array. Returns \\"John\\" or \\"Alice\\". if sorted(arr) == arr: return \\"Alice\\" else: return \\"John\\""},{"question":"Alex is practicing competitive programming and stumbled upon a problem involving arrays and rotations. He needs to perform multiple queries on the array revolving around rotating it to the right a certain number of times. Given an array of integers `arr` and a series of queries, each query contains an integer `k` representing the number of positions by which the array is to be rotated to the right. The task is to return the resulting array after each of these rotations. Develop a function that: - Takes an integer array `arr` (1 ≤ length of arr ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9) and a list of integer queries `queries` (1 ≤ length of queries ≤ 10^5, 1 ≤ queries[i] ≤ 10^9). - Returns a list of arrays, where each array corresponds to the result after rotating the input array to the right by `k` positions as specified by each query. -----Input----- - An integer array `arr`. - A list of integer queries `queries`. -----Output----- - A list of arrays, where each array is the result of rotating the input array to the right by `k` positions as specified in `queries`. -----Examples----- Input arr = [1, 2, 3, 4, 5] queries = [1, 3, 8] Output [[5, 1, 2, 3, 4], [3, 4, 5, 1, 2], [3, 4, 5, 1, 2]] Input arr = [10, 20, 30, 40] queries = [2, 4, 6] Output [[30, 40, 10, 20], [10, 20, 30, 40], [30, 40, 10, 20]] -----Note----- In the first sample: - Rotating [1, 2, 3, 4, 5] by 1 position to the right yields [5, 1, 2, 3, 4]. - Rotating [1, 2, 3, 4, 5] by 3 positions to the right results in [3, 4, 5, 1, 2]. - Rotating [1, 2, 3, 4, 5] by 8 positions to the right wraps around to the same result as rotating by 3 positions.","solution":"def rotate_array(arr, queries): Rotates the given array to the right by positions specified in each query. Parameters: arr (list[int]): The array to rotate. queries (list[int]): The list of queries containing the positions to rotate. Returns: list[list[int]]: A list of arrays after each rotation. n = len(arr) result = [] for k in queries: effective_rotations = k % n # Effective rotations considering the array length rotated_array = arr[-effective_rotations:] + arr[:-effective_rotations] result.append(rotated_array) return result"},{"question":"You are given a string consisting of only \'a\'s and \'b\'s. Your task is to count the minimum number of swaps required to make all the \'a\'s appear before all the \'b\'s in the string. A swap is defined as exchanging any two characters in the string. Example 1: Input: \\"bab\\" Output: 1 Explanation: Swap the first \'b\' with the second \'a\' to get \\"abb\\", which satisfies the condition. Example 2: Input: \\"aaabb\\" Output: 0 Explanation: The string already satisfies the condition. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minSwaps() which takes a single argument the string S and returns the minimum number of swaps required. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ length of the string ≤ 10^{6}","solution":"def minSwaps(s): Returns the minimum number of swaps required to make all \'a\'s appear before all \'b\'s in the string. b_count = 0 swap_count = 0 # Traverse the string for char in s: if char == \'b\': b_count += 1 else: swap_count += b_count return swap_count"},{"question":"You have been given a list of strings representing different people\'s names and their respective scores in the format \\"name:score\\". Your task is to sort the list of names based on their scores in descending order. If two or more names have the same score, they should be sorted in ascending alphabetical order. Input: A list of strings \\"name:score\\", space-separated, ending with the string \\"end\\". Output: Print each name sorted by their score in descending order. If scores are equal, sort alphabetically. Constraints: 1. Each score will be a non-negative integer not exceeding 1000. 2. Each name will be a non-empty string without spaces. 3. The list can have at most 1000 entries. SAMPLE INPUT John:45 Alice:82 Bob:75 Charlie:82 David:75 end SAMPLE OUTPUT Alice Charlie Bob David John","solution":"def sort_names_by_scores(data): Sort the list of names based on their scores in descending order. If scores are equal, sort the names in ascending alphabetical order. if data[-1] == \'end\': data = data[:-1] # Split and convert to tuples people_scores = [(name_score.split(\':\')[0], int(name_score.split(\':\')[1])) for name_score in data] # Sort by score in descending order, then by name in ascending order sorted_people_scores = sorted(people_scores, key=lambda x: (-x[1], x[0])) # Extract names from sorted tuples sorted_names = [name for name, score in sorted_people_scores] return sorted_names"},{"question":"Monica has a box of beautifully painted stones. She loves arranging them in different patterns and one of her favorite activities is to stack them in a pyramid. A pyramid of stones is built by placing stones in rows such that the top row has 1 stone, the second row has 2 stones, the third row has 3 stones, and so forth, with each consecutive row having exactly one more stone than the previous row. Monica wants to know how many complete rows she can build with a given number of stones. Given the number of stones `N`, compute the number of complete rows in the pyramid that can be successfully built. INPUT The first line of the input contains the number of test cases 0<t<100. The following t lines each contain an integer N (0<N<10^9) which indicates the total number of stones Monica has. OUTPUT For each test case, output the number of complete rows that can be built with the given stones. SAMPLE INPUT 2 10 15 SAMPLE OUTPUT 4 5 Explanation For the first test case: With 10 stones, Monica can build: 1st row: 1 stone 2nd row: 2 stones (total 3 stones) 3rd row: 3 stones (total 6 stones) 4th row: 4 stones (total 10 stones) So, 4 complete rows can be built. For the second test case: With 15 stones, Monica can build: 1st row: 1 stone 2nd row: 2 stones (total 3 stones) 3rd row: 3 stones (total 6 stones) 4th row: 4 stones (total 10 stones) 5th row: 5 stones (total 15 stones) So, 5 complete rows can be built.","solution":"def find_complete_rows(N): This function takes an integer N which represents the number of stones and returns the number of complete rows in a pyramid that can be built. if N <= 0: return 0 rows = 0 total_stones_used = 0 while total_stones_used + (rows + 1) <= N: rows += 1 total_stones_used += rows return rows def process_test_cases(test_cases): This function processes multiple test cases and finds the number of complete rows for each given number of stones in the test cases. results = [] for N in test_cases: results.append(find_complete_rows(N)) return results"},{"question":"Hermione Granger has discovered a new spell that can generate a specific number of magical orbs from thin air, but the spell comes with certain constraints. She wants to share this spell with her friends but wants to make sure it can be used efficiently before doing so. The spell is defined as follows: it takes exactly \'m\' units of magical energy and produces \'n\' magical orbs. However, there\'s a catch — there\'s a limit to the magical energy available at any given moment, denoted by \'E\'. Hermione wants to find out the maximum number of magical orbs she can produce with the given constraints. She can cast the spell multiple times as long as the available magical energy permits it. Input The first line contains two integers \'m\' and \'n\' (0 ≤ m, n ≤ 1000), where \'m\' is the magical energy required to cast the spell once, and \'n\' is the number of magical orbs generated per cast. The second line contains an integer \'E\' (0 ≤ E ≤ 1000), representing the total available units of magical energy. Output Print the maximum number of magical orbs Hermione can produce with the given constraints. Examples Input 5 10 45 Output 90 Input 7 3 70 Output 30 Input 4 5 0 Output 0 Input 0 10 50 Output 500 Note Consider the first sample. Hermione can cast the spell a maximum of 9 times with the 45 units of magical energy available (each cast requires 5 units of energy), producing 90 magical orbs in total. In the fourth sample, since no magical energy is required (m=0), Hermione can theoretically cast the spell infinitely many times given any amount of magical energy, producing the maximum number of magical orbs.","solution":"def max_orbs(m, n, E): Returns the maximum number of magical orbs that can be produced with given constraints. Args: m (int): magical energy required to cast the spell once. n (int): number of magical orbs generated per cast. E (int): total available units of magical energy. Returns: int: maximum number of magical orbs that can be produced. if m == 0: return E * n max_casts = E // m return max_casts * n"},{"question":"You are given a list of n integers, and a positive integer d. Your task is to check if there exist two elements in the list whose difference is at most d. If such a pair exists, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The first line contains two integers n and d (1 leq n leq 10^5, 1 leq d leq 10^9). The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9). -----Output----- Print \\"YES\\" if there exist two elements whose difference is at most d, otherwise print \\"NO\\". -----Examples----- Input 5 3 1 5 3 9 2 Output YES Input 4 1 10 20 30 40 Output NO -----Note----- In the first example, you can choose the two elements 5 and 2, whose difference is 3, which is less than or equal to d. In the second example, there is no pair of elements whose difference is at most 1.","solution":"def check_difference(n, d, nums): nums.sort() for i in range(n - 1): if abs(nums[i + 1] - nums[i]) <= d: return \\"YES\\" return \\"NO\\""},{"question":"You are tasked with developing a software tool that processes log messages generated by a system and identifies potential error cases. Each log message contains a timestamp, a log level, and a message. A log message is formatted as follows: ``` [YYYY-MM-DD HH:MM:SS] [LEVEL] Message ``` Where: - `YYYY-MM-DD HH:MM:SS` is the timestamp of the log message. - `LEVEL` is one of the following: DEBUG, INFO, WARNING, ERROR. - `Message` is the content of the log message. Your goal is to write a function that takes a list of log messages and returns all messages with log level \\"ERROR\\". Additionally, your function should return the most common word across all \\"ERROR\\" messages (ignore case, punctuation, and consider words separated by spaces). # Function Signature ```python def process_logs(logs: List[str]) -> Tuple[List[str], str]: pass ``` # Input - `logs`: A List of strings where each string is a log message formatted as described above. # Output A tuple containing: 1. A List of strings of all \\"ERROR\\" log messages in the order they appear in the input. 2. A string which is the most common word among all \\"ERROR\\" messages. If there are multiple words with the same frequency, return any one of them. # Constraints - The number of log messages `n` is within the range `[1, 1000]`. - Each log message string will be at most `1000` characters long. - Words within the messages are defined as sequences of alphabetic characters. # Example ```python logs = [ \\"[2023-03-21 14:32:00] [INFO] User logged in\\", \\"[2023-03-21 14:33:00] [ERROR] File not found\\", \\"[2023-03-21 14:34:00] [DEBUG] Starting process\\", \\"[2023-03-21 14:35:00] [ERROR] Unable to open file\\" ] assert process_logs(logs) == ( [\\"[2023-03-21 14:33:00] [ERROR] File not found\\", \\"[2023-03-21 14:35:00] [ERROR] Unable to open file\\"], \\"file\\" ) ``` # Note In the example given: 1. There are two \\"ERROR\\" log messages: \\"[2023-03-21 14:33:00] [ERROR] File not found\\" and \\"[2023-03-21 14:35:00] [ERROR] Unable to open file\\". 2. The most common word among these messages is \\"file\\".","solution":"from typing import List, Tuple import re from collections import Counter def process_logs(logs: List[str]) -> Tuple[List[str], str]: error_logs = [] word_counter = Counter() for log in logs: if \\"[ERROR]\\" in log: error_logs.append(log) # Extract the message part after the log level message = log.split(\'] [ERROR] \')[1] # Normalize to lower case and remove punctuation, then split into words words = re.findall(r\'bw+b\', message.lower()) word_counter.update(words) # Find the most common word if word_counter: most_common_word = word_counter.most_common(1)[0][0] else: most_common_word = \\"\\" return error_logs, most_common_word"},{"question":"You are to write a function that simulates the execution of tasks with dependencies. The tasks are represented as nodes in a Directed Acyclic Graph (DAG), where an edge (A -> B) indicates that task A must be completed before task B. Given the dependencies, your function should return a valid order to execute all tasks such that each task is performed only after all its dependencies have been completed. The input will be an array of tuples, where each tuple (A, B) means task A must be completed before task B. You will also receive a list of all tasks. The output should be a list with a valid execution order of the tasks. If no valid order exists (i.e., if a cycle is detected in the graph), return an empty list. # Function Signature ```python def find_task_order(tasks: List[str], dependencies: List[Tuple[str, str]]) -> List[str]: ``` # Input - `tasks`: a list of strings, representing the unique identifiers of the tasks. The length of `tasks` is between 1 and 1000. - `dependencies`: a list of tuples (A, B), representing that task A must be completed before task B. The length of `dependencies` is between 0 and 10000. # Output - a list of strings, representing a valid order in which the tasks can be executed. # Examples Example 1 ```python tasks = [\\"a\\", \\"b\\", \\"c\\", \\"d\\"] dependencies = [(\\"a\\", \\"b\\"), (\\"a\\", \\"c\\"), (\\"b\\", \\"d\\"), (\\"c\\", \\"d\\")] find_task_order(tasks, dependencies) ``` Output: ``` [\'a\', \'b\', \'c\', \'d\'] # or [\'a\', \'c\', \'b\', \'d\'] ``` Explanation: - Task \\"a\\" must be completed before tasks \\"b\\" and \\"c\\". - Both tasks \\"b\\" and \\"c\\" must be completed before task \\"d\\". - Therefore, a valid order can be [\\"a\\", \\"b\\", \\"c\\", \\"d\\"] or [\\"a\\", \\"c\\", \\"b\\", \\"d\\"]. Example 2 ```python tasks = [\\"a\\", \\"b\\", \\"c\\"] dependencies = [(\\"a\\", \\"b\\"), (\\"b\\", \\"c\\"), (\\"c\\", \\"a\\")] find_task_order(tasks, dependencies) ``` Output: ``` [] ``` Explanation: - Task \\"a\\" must be completed before task \\"b\\", task \\"b\\" must be completed before task \\"c\\", and task \\"c\\" must be completed before task \\"a\\". - This creates a cycle, hence no valid order exists. # Constraints - Ensure that your solution has a reasonable time complexity and is optimized for large graphs up to the specified limits.","solution":"from typing import List, Tuple def find_task_order(tasks: List[str], dependencies: List[Tuple[str, str]]) -> List[str]: from collections import defaultdict, deque # Initialize graph and in-degree (number of incoming edges) of each node graph = defaultdict(list) in_degree = {task: 0 for task in tasks} # Build the graph and the in-degree for each task for prereq, task in dependencies: graph[prereq].append(task) in_degree[task] += 1 # Find all starting nodes with no incoming edges queue = deque([task for task in tasks if in_degree[task] == 0]) order = [] while queue: current = queue.popleft() order.append(current) # Decrease the in-degree of each neighboring node by 1 for neighbor in graph[current]: in_degree[neighbor] -= 1 # If in-degree becomes 0, add it to the queue if in_degree[neighbor] == 0: queue.append(neighbor) # If the order contains all the tasks, return the order if len(order) == len(tasks): return order else: # A cycle was detected return []"},{"question":"Alice and Bob are playing a game called \\"Array Manipulation\\". They take turns to perform operations on an array `a` of length `n`. Alice always moves first, and both players play optimally. The rules of the game are as follows: 1. On each turn, the current player must select a subarray of length `k` and reverse it. 2. The game ends when the entire array becomes sorted in non-decreasing order. The player who cannot make a move because the array is already sorted loses the game. Given the values of `n`, `k`, and the array `a`, determine which player will win. If Alice wins, return `1`. Otherwise, return `2`. Function Description Complete the `arrayManipulation` function in the editor below. `arrayManipulation` has the following parameters: - `int n`: the length of the array - `int k`: the length of the subarray to be reversed - `int[] a`: the array of integers Returns - `int`: the winner of the game (1 if it\'s Alice, 2 if it\'s Bob) Input Format The first line contains a single integer `t`, the number of test cases. Each of the next `t` lines describes a test case in the form of three space-separated items: two integers, `n` and `k`, followed by `n` space-separated integers `a`. Constraints 1 leq t leq 100 1 leq n leq 1000 1 leq k leq n 1 leq a[i] leq 1000 Sample Input ``` 2 5 3 4 2 3 1 5 4 2 2 4 3 1 ``` Sample Output ``` 1 2 ``` Explanation In the first test case, the initial array is `[4, 2, 3, 1, 5]` and Alice can make the following moves: 1. Reverse the subarray `[4, 2, 3]` to get `[3, 2, 4, 1, 5]`. 2. Reverse the subarray `[2, 4, 1]` to get `[3, 1, 4, 2, 5]`. 3. Reverse the subarray `[1, 4, 2]` to get `[3, 2, 4, 1, 5]`. Following optimal play will result in Alice winning before the array gets sorted in Bob\'s turn. In the second test case, the initial array is `[2, 4, 3, 1]`. 1. Alice reverses the subarray `[2, 4]` to get `[4, 2, 3, 1]`. 2. Bob reverses the subarray `[4, 2]` to get `[2, 4, 3, 1]`. Following optimal play will result in Bob winning as Alice will be the one to face an already sorted array on her turn.","solution":"def arrayManipulation(n, k, a): Determines the winner of the game. Parameters: - n: the length of the array - k: the length of the subarray to be reversed - a: the array of integers Returns: - 1 if Alice wins, 2 if Bob wins # If the array is already sorted in non-decreasing order if a == sorted(a): return 2 # Bob wins because Alice cannot move on her first turn if k == 1: return 2 # With k=1, only single elements can be reversed, no change can be made if a is already sorted # Count the number of inversions in the array inversions = sum(1 for i in range(n - 1) for j in range(i + 1, n) if a[i] > a[j]) # If the number of inversions is odd, Alice wins, else Bob wins return 1 if inversions % 2 == 1 else 2"},{"question":"Create a function that accepts a list of text strings and returns a list of the length of each text string. The function should count all characters including spaces and punctuation. Write a function `string_lengths` that takes in a list of strings and returns a list of integers representing the length of each string. # Example ```python Input: [\\"Hello, World!\\", \\"Python\\", \\" \\"] Output: [13, 6, 1] ```","solution":"def string_lengths(strings): Returns a list of integers representing the length of each string in the input list. Parameters: strings (list): A list of text strings. Returns: list: A list of integers where each integer is the length of the corresponding string. return [len(s) for s in strings]"},{"question":"Given an array `A` of `n` integer numbers, find the size of the smallest subarray that contains at least `k` unique elements. If there is no such subarray, return `-1`. -----Input----- The first line contains two integers `n` and `k` (`1 leq n leq 10^5`, `1 leq k leq n`). The second line contains `n` integers representing the elements of the array `A` (`1 leq A[i] leq 10^9`). -----Output----- Output a single integer, the size of the smallest subarray that contains at least `k` unique elements, or `-1` if no such subarray exists. -----Examples----- Input 7 3 1 2 1 2 3 2 3 Output 3 Input 5 5 1 2 3 4 5 Output 5 Input 4 5 1 1 1 1 Output -1 -----Note----- In the first test case, the subarray [2, 1, 2, 3] contains 3 unique elements: 1, 2, and 3. The smallest subarray that contains at least 3 unique elements is [1, 2, 3] or [2, 3, 2]. The size of this subarray is 3. In the second test case, the entire array [1, 2, 3, 4, 5] contains exactly 5 unique elements. The size of this subarray is 5. In the third test case, there is no subarray that contains 5 unique elements. Thus, the output is -1.","solution":"def smallest_subarray_with_k_unique_elements(n, k, A): from collections import defaultdict if k > n: return -1 unique_count = defaultdict(int) left = 0 min_length = float(\'inf\') unique_elements = 0 for right in range(n): unique_count[A[right]] += 1 if unique_count[A[right]] == 1: unique_elements += 1 while unique_elements >= k: min_length = min(min_length, right - left + 1) unique_count[A[left]] -= 1 if unique_count[A[left]] == 0: unique_elements -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Diana is a forest ranger who patrols a large forest represented as a 2D grid of size n x m. The grid cells are either free (represented by \'.\') or occupied by obstacles (represented by \'#\'). Diana can move to any of the four neighboring cells (left, right, up, or down) provided they are within the bounds of the grid and not blocked by an obstacle. Diana starts her patrol at the cell (1,1) (top-left corner) and wants to reach the cell (n,m) (bottom-right corner). Your task is to determine the length of the shortest path from the top-left corner to the bottom-right corner. If there is no possible path, output -1. -----Input----- The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the forest grid. The next n lines each contain m characters (either \'.\' or \'#\') — the grid itself. -----Output----- Print a single integer — the length of the shortest path from the top-left corner to the bottom-right corner. If there is no possible path, print -1. -----Examples----- Input 5 5 . . . # . . . # . . # . # # . . . . . . . # # . . Output 9 Input 3 3 . # . # . # . # . Output -1 -----Note----- In the first sample, Diana can follow the path: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (2,4) -> (3,4) -> (4,4) -> (4,5) -> (5,5). The length of this path is 9. In the second sample, it is impossible for Diana to reach (3,3) from (1,1) as the path is blocked by obstacles.","solution":"from collections import deque def shortest_path(n, m, forest): # Directions for up, down, left, and right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if start or end is blocked if forest[0][0] == \'#\' or forest[n-1][m-1] == \'#\': return -1 # Initialize the queue for BFS and add the starting point queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # If we\'ve reached the bottom-right corner if x == n - 1 and y == m - 1: return dist # Iterate through all possible movements for dx, dy in directions: nx, ny = x + dx, y + dy # Check if the new position is within bounds and not visited or blocked if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and forest[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) # If there is no possible path return -1"},{"question":"Write a function that takes a string of digits and returns all possible letter combinations that the number could represent. The mapping of digits to letters is similar to the phone buttons: ``` 2 -> \\"abc\\", 3 -> \\"def\\", 4 -> \\"ghi\\", 5 -> \\"jkl\\", 6 -> \\"mno\\", 7 -> \\"pqrs\\", 8 -> \\"tuv\\", 9 -> \\"wxyz\\" ``` Note that 1 does not map to any letters. The function should return the combinations in lexicographical order. Constraints: 1 ≤ length of the input string ≤ 4 SAMPLE INPUT \\"23\\" SAMPLE OUTPUT [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] SAMPLE INPUT \\"7\\" SAMPLE OUTPUT [\\"p\\", \\"q\\", \\"r\\", \\"s\\"]","solution":"def letter_combinations(digits): Returns all possible letter combinations that the number could represent. if not digits: return [] # Mapping of digits to letters phone_map = { \\"2\\": \\"abc\\", \\"3\\": \\"def\\", \\"4\\": \\"ghi\\", \\"5\\": \\"jkl\\", \\"6\\": \\"mno\\", \\"7\\": \\"pqrs\\", \\"8\\": \\"tuv\\", \\"9\\": \\"wxyz\\" } def backtrack(index, path): if index == len(digits): combinations.append(\\"\\".join(path)) return possible_letters = phone_map[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"We have a robotic cleaner that operates in a grid. The grid is represented by an NxN matrix (1-based index), where each cell in the matrix can either be open (0) or blocked (1). The robot starts at cell (1, 1) and needs to reach cell (N, N). The robot can move to an adjacent open cell - specifically, it can move right, left, up, or down. However, due to the robot\'s programming, it can only move to cell (i, j) if it has visited all cells (p, q) where 1 ≤ p ≤ i and 1 ≤ q ≤ j exactly once before. Determine the number of different valid paths the robot can take to reach its destination. Input The input is given from Standard Input in the following format: N matrix Where: * The first line contains a single integer N (1 ≤ N ≤ 10), the dimension of the grid. * The next N lines each contain N integers (either 0 or 1), representing the grid. Output Print a single integer, the number of different valid paths for the robot to reach cell (N, N). Examples Input 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 0 1 0 0 1 0 0 0 0 Output 1 Input 2 0 1 1 0 Output 0","solution":"def calculate_paths(N, matrix): if matrix[0][0] == 1 or matrix[N-1][N-1] == 1: return 0 dp = [[0] * N for _ in range(N)] dp[0][0] = 1 # Starting point for i in range(N): for j in range(N): if matrix[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Given a string `S` consisting of lowercase English letters, a sequence is defined as consecutive repeating characters. For example, the sequences in the string \\"aaabbcdd\\" are \\"aaa\\", \\"bb\\", and \\"dd\\". -----Input:----- - The first line of the input contains an integer T, denoting the number of test cases. - The first line of each test case contains an integer N, the length of the string. - The second line of each test case contains the string S. -----Output:----- For each test case, print the length of the longest sequence of consecutive repeating characters in the string S. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - S consists of lowercase English letters only. -----Subtasks----- - 100 points : Original constraints. -----Sample Input:----- 2 8 aaabbcdd 4 aabb -----Sample Output:----- 3 2 -----Explanation:----- - Sample Case 1 : The string \\"aaabbcdd\\" has sequences \\"aaa\\" of length 3, \\"bb\\" of length 2, \\"c\\" of length 1, and \\"dd\\" of length 2. The longest sequence is \\"aaa\\" of length 3. - Sample Case 2 : The string \\"aabb\\" has sequences \\"aa\\" of length 2 and \\"bb\\" of length 2. The longest sequence is either \\"aa\\" or \\"bb\\", both of length 2.","solution":"def longest_sequence_length(test_cases): Given a list of test cases each containing string S, returns a list of lengths of the longest sequence of consecutive repeating characters in the string S. results = [] for N, S in test_cases: if N == 0: results.append(0) continue longest_sequence = 1 current_sequence = 1 previous_char = S[0] for i in range(1, N): if S[i] == previous_char: current_sequence += 1 else: longest_sequence = max(longest_sequence, current_sequence) current_sequence = 1 previous_char = S[i] longest_sequence = max(longest_sequence, current_sequence) # in case the longest sequence is at the end results.append(longest_sequence) return results def parse_input(input_list): T = int(input_list[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_list[index]) S = input_list[index + 1] test_cases.append((N, S)) index += 2 return test_cases"},{"question":"You are given a string S of length N, and Q queries. Each query consists of an integer X. For each query, your task is to determine the maximum possible number of distinct substrings of length X present in the string S. ------ Input Format ------ - The first line contains T - the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and Q - the length of the string S and the number of queries. - The second line contains a string S of length N. - The third line contains Q space-separated integers X_{1}, X_{2}, ..., X_{Q}. ------ Output Format ------ For each test case, output Q space-separated integers in a new line, each representing the maximum number of distinct substrings of length X for the corresponding query. ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^4 1 ≤ X_{i} ≤ N - Sum of N over all test cases does not exceed 10^6. - Sum of Q over all test cases does not exceed 10^6. ------ Sample Input 1 ------ 2 7 3 abacaba 3 2 4 5 2 abcde 1 3 ------ Sample Output 1 ------ 5 4 4 5 3 ------ Explanation 1 ------ Test case 1: - For X=3, the distinct substrings of length 3 are: \'aba\', \'bac\', \'aca\', \'cab\', \'aba\'. The distinct substrings are {\'aba\', \'bac\', \'aca\', \'cab\'}, giving us a count of 4. - For X=2, the distinct substrings of length 2 are: \'ab\', \'ba\', \'ac\', \'ca\', \'ab\', \'ba\'. The distinct substrings are {\'ab\', \'ba\', \'ac\', \'ca\'}, giving us a count of 4. - For X=4, the distinct substrings of length 4 are: \'abac\', \'baca\', \'acab\', \'caba\'. The distinct substrings are {\'abac\', \'baca\', \'acab\', \'caba\'}, giving us a count of 4. Test case 2: - For X=1, the distinct substrings of length 1 are: \'a\', \'b\', \'c\', \'d\', \'e\'. The distinct substrings are {\'a\', \'b\', \'c\', \'d\', \'e\'}, giving us a count of 5. - For X=3, the distinct substrings of length 3 are: \'abc\', \'bcd\', \'cde\'. The distinct substrings are {\'abc\', \'bcd\', \'cde\'}, giving us a count of 3.","solution":"def max_distinct_substrings(S, queries): Returns a list of maximum possible number of distinct substrings of length X present in the string S for each query. Args: S : str : the input string queries : list of int : list of lengths for which to determine the number of distinct substrings Returns: list of int : list of max distinct substrings for each query length results = [] for X in queries: if X > len(S): results.append(0) else: substrings = set() for i in range(len(S) - X + 1): substrings.add(S[i:i+X]) results.append(len(substrings)) return results def process_test_cases(test_cases): results = [] for N, Q, S, queries in test_cases: result = max_distinct_substrings(S, queries) results.append(result) return results"},{"question":"Implement a function that finds all unique triplets in an array of integers that sum up to zero. The function should return a list of lists containing the triplets in non-descending order. Each individual triplet should also be sorted in non-descending order and there should not be any duplicate triplets in the final list. Write a function `three_sum(nums)` that takes a list of integers `nums` as input and returns a list of lists containing the triplets. Test cases: ``` three_sum([-1, 0, 1, 2, -1, -4]) == [[-1, -1, 2], [-1, 0, 1]] three_sum([0, 0, 0, 0]) == [[0, 0, 0]] three_sum([-2, -1, 0, 1, 2, 3]) == [[-2, -1, 3], [-2, 0, 2], [-1, 0, 1]] three_sum([]) == [] three_sum([1, 2, -2, -1]) == [] ```","solution":"def three_sum(nums): Returns a list of all unique triplets in the array that sum up to zero. Each triplet is a list in non-descending order. The final list contains no duplicate triplets. nums.sort() # Sort the array to facilitate two-pointer approach result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue # Skip duplicate values left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total < 0: left += 1 elif total > 0: right -= 1 else: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 # Skip duplicate values while left < right and nums[right] == nums[right - 1]: right -= 1 # Skip duplicate values left += 1 right -= 1 return result"},{"question":"Given a string S consisting of lowercase letters \'a\' to \'z\', you are allowed to perform the following operation any number of times: pick any character from the string and move it to the end of the string. Your goal is to determine the lexicographically smallest string possible after performing the operations. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains one string S. Output For each test case, print a single line containing the lexicographically smallest string possible. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 Example Input: 3 cba acbd zxy Output: abc abcd xyz Explanation For the first test case: - We can move \'c\' to the end to get \\"bac\\". - We can move \'b\' to the end to get \\"acb\\". - Finally, we can move \'a\' to the end to get \\"abc\\". This is the lexicographically smallest string possible. For the second test case: - We can directly move characters to get \\"abcd\\". For the third test case: - We can directly move characters to get \\"xyz\\".","solution":"def lexicographically_smallest_string(T, test_cases): Given a list of strings, return a list of the lexicographically smallest strings possible by sorting each string. result = [] for s in test_cases: result.append(\'\'.join(sorted(s))) return result"},{"question":"You are given a classroom of students, each of whom has a certain number of candies. Initially, each student has a different number of candies from all other students in the classroom. The teacher decides to play a game where each student can either give away or receive candies from another student. Specifically, in each move, a student must give away one candy to another student who currently has fewer candies than themselves. The teacher would like to monitor the fairness of the candy distribution over time. Therefore, you need to handle several queries of the following types: * 1 i j — student i gives one candy to student j. It\'s guaranteed that the initial distribution ensures that all students have different amounts of candies, and after each move of this type, this condition is maintained. * 2 i — print the current number of candies that student i possesses. * 3 — print two integers: the least number of candies any student has and the most number of candies any student has. Input The first line of the input contains two integers n and q (2 ≤ n ≤ 100, 1 ≤ q ≤ 100) — the number of students and the number of queries, respectively. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 100) where ci denotes the initial number of candies the i-th student has. It\'s guaranteed that all ci are distinct. Then, q lines follow. The i-th line describes the i-th query. The first number in the line is an integer typei (1 ≤ typei ≤ 3) — the type of the query. It\'s guaranteed that while handling type 1 queries, a student i will only give a candy to a student j if student j currently has fewer candies than student i. Also, no student will give a candy to themselves. Output For each query of the second type, print one integer in a separate line - the number of candies the i-th student possesses. For each query of the third type, print two integers in a separate line - the minimum and the maximum number of candies, respectively. Example Input 5 7 5 3 7 8 2 2 1 1 3 1 2 1 3 1 4 2 2 4 3 Output 5 4 2 8 7 2 7 Note In the sample input, there are 5 students with initial candies [5, 3, 7, 8, 2]. - Initially, student 1 has 5 candies. - After the first query, student 1 still has 5 candies. - After the second query, student 3 gives one candy to student 1, so now student 3 has 6 candies, and student 1 has 6 candies. - After the third query, student 1 has 6 candies. - After the fourth query, the minimum candies are 2, and the maximum candies are 8. - After the fifth query, student 4 gives one candy to student 2, so now student 4 has 7 candies, and student 2 has 4 candies. - After the sixth query, student 4 has 7 candies. - After the seventh query, the minimum candies are 2, and the maximum candies are 7.","solution":"def handle_queries(n, q, candies, queries): results = [] for query in queries: if query[0] == 1: i, j = query[1], query[2] if candies[i-1] > candies[j-1]: # Ensure i gives candy to j only if i has more candies candies[i-1] -= 1 candies[j-1] += 1 elif query[0] == 2: i = query[1] results.append(candies[i-1]) elif query[0] == 3: min_candies = min(candies) max_candies = max(candies) results.append((min_candies, max_candies)) return results"},{"question":"You are developing an online shopping platform, and you need to implement a recommendation feature. You have a list of items and their associated categories. Given a user\'s purchase history, your task is to recommend an item from a category in which the user has not yet made any purchase. If there are multiple such items, recommend the one that appears first in the list. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of items available in the store. Each of the next n lines contains a string and an integer c (1 ≤ c ≤ 100) — representing an item name (consisting of lowercase English letters with length no more than 10) and its category. The next line contains an integer m (0 ≤ m ≤ 1000) — the number of items the user has purchased. Each of the next m lines contains a string — representing the name of an item from the user\'s purchase history. -----Output----- Print a single line containing the name of the recommended item. If there are multiple valid items to be recommended, print the one that appears first in the input list. If no valid recommendations can be made, print \\"No recommendation\\". -----Examples----- Input 5 apple 1 banana 2 grape 3 orange 1 melon 4 2 banana grape Output apple Input: 3 pen 1 pencil 2 eraser 3 3 pen pencil eraser Output: No recommendation -----Note----- In the first example, the user\'s purchase history includes items from categories 2 and 3. The remaining categories are 1 and 4. The first item that appears in these categories is \\"apple\\" from category 1. Therefore, \\"apple\\" is recommended. In the second example, the user has purchased items from all available categories, so there are no items to recommend. Thus, \\"No recommendation\\" is returned.","solution":"def recommend_item(n, items, m, purchases): item_dict = {} purchase_set = set(purchases) for item, cat in items: if cat not in item_dict: item_dict[cat] = [] item_dict[cat].append(item) for item, cat in items: if item not in purchase_set: return item return \\"No recommendation\\" # Example usage: # items = [(\\"apple\\", 1), (\\"banana\\", 2), (\\"grape\\", 3), (\\"orange\\", 1), (\\"melon\\", 4)] # purchases = [\\"banana\\", \\"grape\\"] # n = len(items) # m = len(purchases) # print(recommend_item(n, items, m, purchases)) # Output should be \\"apple\\""},{"question":"Emily loves reading books. She has a huge collection of them and often wonders about different ways to organize her bookshelf. Recently, she came up with an interesting idea: she wants to arrange her books such that the books with the highest ratings are always to the right of the books with the lowest ratings on each shelf. To do this, she needs your help to implement a sorting algorithm that can sort the books based on their ratings in non-decreasing order. **Your task:** Given a list of books with their ratings, sort the books based on their ratings. If two books have the same rating, their relative order should remain the same as in the input list (i.e., the sort should be stable). **Input:** - The first line contains an integer n (1 le n le 1000), the number of books. - The next line contains n integers, each representing the rating of a book. The ratings are between 1 and 100 (inclusive). **Output:** - Output a single line containing the sorted list of ratings, maintaining the relative order of books with the same rating. **Examples:** Example 1: ``` Input: 5 4 2 5 3 2 Output: 2 2 3 4 5 ``` Example 2: ``` Input: 7 1 3 1 2 3 2 1 Output: 1 1 1 2 2 3 3 ``` In this problem, you are required to implement a stable sort that will arrange the books based on their ratings in non-decreasing order.","solution":"def sort_books_by_rating(ratings): Sorts the books based on their ratings in non-decreasing order. Maintains the relative order of books with the same rating (stable sort). :param ratings: List of integers representing book ratings :return: List of integers sorted based on book ratings return sorted(ratings)"},{"question":"In a remote kingdom, there lives a legendary creature known as the Knight of the Kingdom. The kingdom is represented as a grid of size n x m. To defend the kingdom, the knight must patrol the grid and ensure every cell is safe. The knight starts at the top-left corner of the grid (1, 1) and can only move right or down. The grid has some dangerous cells where the knight cannot step. Your task is to determine the number of possible ways the knight can safely travel from the top-left corner (1, 1) to the bottom-right corner (n, m). Input Specification: The first line contains two integers n and m (1 ≤ n, m ≤ 1000) – the number of rows and columns of the grid. The next n lines each contain m characters, where each character is either \'.\' (a safe cell) or \'*\' (a dangerous cell). Output Specification: Output a single integer – the number of ways the knight can travel from the top-left corner (1, 1) to the bottom-right corner (n, m) without stepping on a dangerous cell, modulo 998244353. Example: Input: 3 3 ... .*. ... Output: 2 Input: 4 4 .... .*.. ..*. .... Output: 4 Explanation: In the first example, the knight can move in two possible ways: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, the four possible paths avoiding dangerous cells are: 1. Right -> Right -> Right -> Down -> Down -> Down 2. Right -> Down -> Right -> Right -> Down -> Down 3. Down -> Down -> Right -> Right -> Down -> Right 4. Down -> Right -> Right -> Down -> Down -> Right","solution":"def count_ways(n, m, grid): MOD = 998244353 if grid[0][0] == \'*\' or grid[n-1][m-1] == \'*\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'*\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1]"},{"question":"You are given a string S containing lowercase English letters. A substring of S is called \\"palindromic\\" if it reads the same backward as forward. Chef wants you to calculate the total number of distinct palindromic substrings of S. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first and only line of each test case contains a single string S. ------ Output ------ For each test case, print a single line containing one integer: the number of distinct palindromic substrings in S. ------ Constraints ------ 1 leq T leq 10^4 1 leq |S| leq 10^3 S consists of lowercase English letters. ------ Subtasks ------ Subtask #1 (30 points): - 1 leq T leq 100 - 1 leq |S| leq 100 Subtask #2 (70 points): - original constraints ----- Sample Input 1 ------ 2 ababa aaaa ----- Sample Output 1 ------ 5 4 ----- Explanation 1 ------ Example case 1: The string \\"ababa\\" has 5 distinct palindromic substrings: \\"a\\", \\"b\\", \\"aba\\". Example case 2: The string \\"aaaa\\" has 4 distinct palindromic substrings: \\"a\\", \\"aa\\", \\"aaa\\", \\"aaaa\\".","solution":"def count_distinct_palindromic_substrings(s): Function to count distinct palindromic substrings in the given string s. n = len(s) dp = [[False] * n for _ in range(n)] palindromic_substrings = set() for length in range(1, n+1): for i in range(n - length + 1): j = i + length - 1 if length == 1: dp[i][j] = True elif length == 2: dp[i][j] = (s[i] == s[j]) else: dp[i][j] = (s[i] == s[j]) and dp[i+1][j-1] if dp[i][j]: palindromic_substrings.add(s[i:j+1]) return len(palindromic_substrings) def process_input(test_cases): results = [] for s in test_cases: results.append(count_distinct_palindromic_substrings(s)) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = data[1:T+1] results = process_input(test_cases) for result in results: print(result)"},{"question":"Implement a function called `findMinMoves` that calculates the minimum number of moves required to equalize all the elements in a list of integers `nums`. In each move, you can increment `n-1` elements by `1` (where `n` is the length of the list). Example `findMinMoves([1, 2, 3])` should return `3`. `findMinMoves([1, 1, 5])` should return `4`. Note - In the first example, it takes `3` moves to make all elements equal: - Increment the first `n-1` elements: [2, 3, 3] - Increment the first `n-1` elements: [3, 4, 3] - Increment the first `n-1` elements: [4, 4, 4] - In the second example, it takes `4` moves to make all elements equal: - Increment the first `n-1` elements: [2, 2, 5] - Increment the first `n-1` elements: [3, 3, 5] - Increment the first `n-1` elements: [4, 4, 5] - Increment the first `n-1` elements: [5, 5, 5] Return the minimum number of moves. Your solution should have a time complexity better than `O(n^2)`. Limitations - The length of the list `nums` ranges from 1 to `10^5`. - The integers in the list `nums` range from `1` to `10^9`.","solution":"def findMinMoves(nums): Returns the minimum number of moves required to make all elements of the list equal. min_num = min(nums) moves = sum(num - min_num for num in nums) return moves"},{"question":"A manufacturing company produces widgets for various clients. One of their clients has placed an order for a specific number (N) of widgets. To fulfill this order, the company can produce widgets in a single production run or multiple production runs, each with a specified capacity. The company has a list of M production runs, and each run has a capacity that defines the maximum number of widgets it can produce. The manufacturing manager wants to know the minimum number of production runs required to fulfill the client\'s order without exceeding the required amount, while ensuring the order is met exactly. Write a function `min_production_runs(N, capacities)` that takes an integer N (the number of widgets required) and a list of integers capacities (the capacities of the production runs) as input, and returns the minimum number of production runs required to produce exactly N widgets. If it is not possible to produce exactly N widgets with the given capacities, return -1. Example 1: Input: N = 7, capacities = [1, 3, 4] Output: 2 Explanation: One possible way to fulfill the order is using two runs with capacities 3 and 4 (3 + 4 = 7). Example 2: Input: N = 10, capacities = [2, 3, 5] Output: 2 Explanation: One possible way is using two runs with capacities 5 and 5 (5 + 5 = 10). Example 3: Input: N = 9, capacities = [2, 4, 6] Output: -1 Explanation: It is not possible to produce exactly 9 widgets with the given capacities. Your Task: You don\'t need to read or print anything. Your task is to complete the function `min_production_runs(N, capacities)` which takes an integer N and a list of capacities as input parameters and returns the minimum number of production runs required to exactly produce N widgets, or -1 if it\'s not possible. Expected Time Complexity: O(N * M) Expected Space Complexity: O(N) Constraints: 1 <= N <= 1000 1 <= M <= 50 1 <= capacities[i] <= 100","solution":"def min_production_runs(N, capacities): This function returns the minimum number of production runs required to produce exactly N widgets using the given capacities, or -1 if it is not possible to produce exactly N widgets. # Initialize a list to store the minimum number of runs needed to get exactly i widgets dp = [float(\'inf\')] * (N + 1) dp[0] = 0 # 0 runs needed to produce 0 widgets # Iterate through all capacities for capacity in capacities: for i in range(capacity, N + 1): if dp[i - capacity] != float(\'inf\'): dp[i] = min(dp[i], dp[i - capacity] + 1) return dp[N] if dp[N] != float(\'inf\') else -1"},{"question":"An international cat adoption agency keeps track of the cats in their inventory using an array. Each cat has a unique ID and the array is sorted in ascending order of these IDs. Occasionally, the agency receives a batch of new cats all at once, and they need to merge this new batch (also sorted by IDs) into their existing inventory while ensuring that the array remains sorted. You are tasked to help the agency by writing a function that merges the new batch of cats into the existing array of cats while maintaining the sorted order. **Constraints:** - The length of the existing array of cats and the new batch array is at most 10^4. - Each ID is a positive integer and does not exceed 10^6. **Input:** - Two integers, `N` and `M`, representing the number of cats in the existing inventory and the new batch respectively. - An array of `N` integers representing the IDs of the existing inventory cats (sorted in ascending order). - An array of `M` integers representing the IDs of the new batch of cats (sorted in ascending order). **Output:** - A single line containing all the IDs of cats in the merged inventory sorted in ascending order. **Examples:** Sample Input 1: ``` 5 3 1 3 5 7 9 2 4 6 ``` Sample Output 1: ``` 1 2 3 4 5 6 7 9 ``` Sample Input 2: ``` 4 4 1 2 5 7 3 4 8 10 ``` Sample Output 2: ``` 1 2 3 4 5 7 8 10 ``` **Function Signature:** ```python def merge_cat_ids(N: int, M: int, existing_ids: List[int], new_ids: List[int]) -> List[int]: pass ``` You need to implement the function `merge_cat_ids` which takes in the number of existing cats `N`, the number of new cats `M`, two arrays `existing_ids` and `new_ids`, and returns a merged and sorted array of cat IDs.","solution":"from typing import List def merge_cat_ids(N: int, M: int, existing_ids: List[int], new_ids: List[int]) -> List[int]: Merges two sorted arrays of cat IDs into one sorted array. i, j = 0, 0 merged_ids = [] # Merge both arrays until one is exhausted while i < N and j < M: if existing_ids[i] <= new_ids[j]: merged_ids.append(existing_ids[i]) i += 1 else: merged_ids.append(new_ids[j]) j += 1 # Append rest of the elements of the non-exhausted array while i < N: merged_ids.append(existing_ids[i]) i += 1 while j < M: merged_ids.append(new_ids[j]) j += 1 return merged_ids"},{"question":"A painter is planning to paint a geometric shape on his canvas. He has to choose between two shapes: a square and a rectangle. He prefers the shape which has a larger perimeter. Given the side length of the square and the length and width of the rectangle, determine which shape will have a larger perimeter and if they are equal, output \\"EQUAL\\". ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line of input containing three space-separated integers S, L, and W — the side length of the square, the length of the rectangle, and the width of the rectangle respectively. ------ Output Format ------ For each test case, output texttt{SQUARE} if the square has a larger perimeter, texttt{RECTANGLE} if the rectangle has a larger perimeter, else output texttt{EQUAL} if both perimeters are the same. You may print each character of the string in uppercase or lowercase (for example, the strings texttt{square}, texttt{Square}, texttt{sQuare} and texttt{SQUARE} will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ S ≤ 100 1 ≤ L, W ≤ 100 ----- Sample Input 1 ------ 3 4 5 3 6 4 4 7 8 7 ----- Sample Output 1 ------ SQUARE EQUAL RECTANGLE ----- Explanation 1 ------ Test case 1: The perimeter of the square is 4 * 4 = 16. The perimeter of the rectangle is 2 * (5 + 3) = 16. Since the perimeters are equal, the output is \\"EQUAL\\". Test case 2: The perimeter of the square is 4 * 6 = 24. The perimeter of the rectangle is 2 * (4 + 4) = 16. Since the square has a larger perimeter, the output is \\"SQUARE\\". Test case 3: The perimeter of the square is 4 * 7 = 28. The perimeter of the rectangle is 2 * (8 + 7) = 30. Since the rectangle has a larger perimeter, the output is \\"RECTANGLE\\".","solution":"def compare_perimeters(T, test_cases): Given T test cases, each containing the side length of a square and the length and width of a rectangle, determine which shape has a larger perimeter or if they are equal. Parameters: T (int): Number of test cases test_cases (List[Tuple[int, int, int]]): A list of tuples where each tuple contains three integers S, L, W Returns: List[str]: A list of strings where each string is \\"SQUARE\\", \\"RECTANGLE\\", or \\"EQUAL\\" results = [] for S, L, W in test_cases: perimeter_square = 4 * S perimeter_rectangle = 2 * (L + W) if perimeter_square > perimeter_rectangle: results.append(\\"SQUARE\\") elif perimeter_square < perimeter_rectangle: results.append(\\"RECTANGLE\\") else: results.append(\\"EQUAL\\") return results"},{"question":"Write a function that takes an integer n as input and returns a string that displays a mirrored right triangle pattern using hashtags (#). Example: Input: 5 Output: ``` # # # ``` Your Task: You don\'t need to read input or print anything. Complete the function `printMirroredTriangle()` which takes an integer n as the input parameter and returns the mirrored triangle as a string. Constraints: 1 <= n <= 50","solution":"def printMirroredTriangle(n): Returns a string that displays a mirrored right triangle pattern using hashtags (#). Parameters: n (int): The number of levels of the triangle. Returns: str: The mirrored triangle pattern. result = [] for i in range(1, n + 1): result.append(\' \' * (n - i) + \'#\' * i) return \'n\'.join(result)"},{"question":"Emma is working as a software engineer and has encountered a problem related to strings. Her task requires writing a program to determine the lexicographic rank of a given string. The lexicographic rank of a string is its position among all possible permutations of its characters in lexicographic order. She calls you for help, as she knows you have a knack for solving such problems efficiently. You are requested to write a program that computes the lexicographic rank of the given string. Input The input consists of several strings, one per line. Each string consists of printable ASCII characters and has a length between 1 and 1000 characters inclusive. The end of input is indicated by a line containing a single period `.`. This line should not be processed. Output For each string, print the lexicographic rank of the string on a new line. Each rank should be an integer. Example Input string abc bac . Output 598 1 3","solution":"from math import factorial def lexicographic_rank(s): Calculate the lexicographic rank of the given string. rank = 1 length = len(s) mul = factorial(length) for i in range(length): mul //= length - i count = sum(c < s[i] for c in s[i+1:]) rank += count * mul return rank def process_input(strings): Process a list of strings and return the lexicographic rank for each string. results = [] for s in strings: if s == \\".\\": break results.append(lexicographic_rank(s)) return results"},{"question":"A landscape designer needs a pattern generation method to represent the layout of flower beds along a pathway. Each test case will provide a dimension M, and you need to create a layout where numbers are arranged in a triangular pattern with an increasing number of elements noted for each row. -----Input:----- - First line will contain an integer T, the number of test cases. - Each test case contains a single integer M, the number of levels in the triangle. -----Output:----- For each test case, output the triangular pattern of numbers for the given level M. -----Constraints----- - 1 leq T leq 50 - 1 leq M leq 50 -----Sample Input:----- 3 3 2 4 -----Sample Output:----- 1 2 3 4 5 6 1 2 3 1 2 3 4 5 6 7 8 9 10 -----EXPLANATION:----- Each test case provides an integer M. The output for each test case should be the next M levels of a number triangle, starting from 1 for every test case. For example, an input of 3 should print three levels with the numbers starting from 1 and increasing row by row.","solution":"def generate_flower_bed_triangle(T, test_cases): Generates the triangular number pattern for each test case. Parameters: T (int): Number of test cases. test_cases (list): List of integers representing number of levels in the triangles. Returns: list: List of strings, each string represents a triangle of numbers for the corresponding test case. results = [] for M in test_cases: start = 1 triangle = [] for row in range(1, M + 1): current_row = [] for col in range(row): current_row.append(start) start += 1 triangle.append(\\" \\".join(map(str, current_row))) results.append(\\"n\\".join(triangle)) return results"},{"question":"A large school is organizing an annual sports event where students from different classes participate in a relay race. Each class has a different number of students, and the school wants to make sure that the relay race teams are fair and balanced. Therefore, the organizers need to check if the students can be divided into teams of exactly 4 students each. Write a program to determine if it is possible to form teams of 4 students for each class without leaving any student unassigned. If it is possible, output the number of teams that can be formed; otherwise, output -1. ------ Input Format ------ - The first line of input will contain a single integer N, denoting the number of classes. - The next N lines contain a single integer Si each, denoting the number of students in the i-th class. ------ Output Format ------ For each class, output the number of teams that can be formed or -1 if it is not possible to form teams of 4 students. ------ Constraints ------ 1 ≤ N ≤ 500 1 ≤ Si ≤ 1000 ----- Sample Input 1 ------ 3 8 15 12 ----- Sample Output 1 ------ 2 -1 3 ----- Explanation 1 ------ Test case 1: We can form 2 teams of 4 students each from the class with 8 students. Test case 2: It is not possible to divide 15 students into teams of 4 without leaving any student unassigned, so the output is -1. Test case 3: We can form 3 teams of 4 students each from the class with 12 students.","solution":"def relay_teams(num_classes, students): Determines if it\'s possible to form teams of 4 students for each class. :param num_classes: int - Number of classes :param students: list of int - Number of students in each class :return: list of int - Number of teams that can be formed or -1 for each class result = [] for s in students: if s % 4 == 0: result.append(s // 4) else: result.append(-1) return result # Example usage: # num_classes = 3 # students = [8, 15, 12] # print(relay_teams(num_classes, students)) # Output: [2, -1, 3]"},{"question":"-----Question----- A social media platform stores data about the interactions of its users. Each interaction is a like or comment made by a user to another user. The platform wants to analyze the interactions to find the \\"most influential user,\\" defined as the user who has the highest number of unique interactions (likes or comments received). Your task is to determine the most influential user(s). If multiple users meet the criteria, return the user(s) with the lowest user ID. -----Input----- - The first line contains an integer T denoting the number of test cases. The description of the test cases follows. - The first line of each test case contains an integer N, the number of users. - The second line contains an integer M, the number of interactions. - The next M lines each contain two space-separated integers u and v, denoting that user u has interacted with user v. -----Output----- For each test case: - Print a single line containing the user ID of the most influential user. If there are multiple such users, print the one with the smallest user ID. -----Constraints----- - 1 le T le 10 - 1 le N le 10^4 - 1 le M le 10^5 - 1 le u, v le N - u neq v -----Example Input----- 2 5 4 1 3 2 3 2 4 1 5 4 4 1 2 1 3 2 3 3 2 -----Example Output----- 3 2","solution":"def most_influential_users(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] M = test_cases[i][1] interactions = test_cases[i][2] interaction_count = {user: set() for user in range(1, N + 1)} for u, v in interactions: interaction_count[v].add(u) max_influencer = None max_interactions = 0 for user, interactors in interaction_count.items(): if len(interactors) > max_interactions: max_influencer = user max_interactions = len(interactors) elif len(interactors) == max_interactions: if max_influencer is None or user < max_influencer: max_influencer = user results.append(max_influencer) return results # The function to handle the input and output processing def main(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): N = int(data[idx]) idx += 1 M = int(data[idx]) idx += 1 interactions = [] for _ in range(M): u = int(data[idx]) v = int(data[idx + 1]) interactions.append((u, v)) idx += 2 test_cases.append((N, M, interactions)) results = most_influential_users(T, test_cases) for res in results: print(res)"},{"question":"Given a string, you are required to find the smallest substring that contains all the distinct characters of the string exactly once. -----Input:----- - The first line will contain T, the number of test cases. - The following T lines each contain a single string S consisting of lowercase alphabets. -----Output:----- For each test case, output the smallest substring that contains all distinct characters of the string exactly once. If multiple solutions exist, return the one that appears first in the string. -----Constraints----- - 1 leq T leq 10 - 1 leq |S| leq 1000 -----Sample Input:----- 2 abcabcbb aaabcdeaa -----Sample Output:----- abc abcde -----EXPLANATION:----- For 1) The distinct characters in the string \\"abcabcbb\\" are [a, b, c]. The smallest substring containing all these characters exactly once is \\"abc\\". For 2) The distinct characters in the string \\"aaabcdeaa\\" are [a, b, c, d, e]. The smallest substring containing all these characters exactly once is \\"abcde\\".","solution":"def smallest_substring_with_all_distinct_characters(string): from collections import Counter distinct_chars = set(string) required_chars_count = len(distinct_chars) # Initialize the window start, end = 0, 0 min_len = float(\\"inf\\") min_start = 0 current_count = Counter() current_chars_count = 0 while end < len(string): char = string[end] current_count[char] += 1 if current_count[char] == 1: # First time this character is seen in the window current_chars_count += 1 while current_chars_count == required_chars_count: if (end - start + 1) < min_len: min_len = end - start + 1 min_start = start start_char = string[start] current_count[start_char] -= 1 if current_count[start_char] == 0: current_chars_count -= 1 start += 1 end += 1 return string[min_start:min_start + min_len] def process_test_cases(test_cases): results = [] for case in test_cases: result = smallest_substring_with_all_distinct_characters(case) results.append(result) return results"},{"question":"Given an array of N integers, determine if there exists a subset of the array with a sum equal to a given target sum. If such a subset exists, return \\"YES\\", otherwise return \\"NO\\". Example 1: Input: N = 5 arr[] = {1, 2, 3, 4, 5} target = 9 Output: YES Explanation: The subset {4, 5} has a sum of 9. Example 2: Input: N = 3 arr[] = {1, 2, 5} target = 4 Output: NO Explanation: There is no subset with a sum of 4. Your Task: You don\'t need to read input or print anything. Your task is to complete the function hasSubsetSum() which takes the integer array arr[], its size N, and an integer target as inputs and returns \\"YES\\" if there is a subset with a sum equal to target, otherwise returns \\"NO\\". Expected Time Complexity: O(N*target). Expected Auxiliary Space: O(target). Constraints: 1 ≤ N ≤ 200 1 ≤ arr[i] ≤ 100 1 ≤ target ≤ 10^4","solution":"def hasSubsetSum(arr, N, target): Determines if there exists a subset of arr with a sum equal to the target. Parameters: arr (list): List of integers. N (int): Size of the array. target (int): Target sum. Returns: str: \\"YES\\" if there is a subset with sum equal to target, otherwise \\"NO\\". # Create a DP table to store the solution to subproblems dp = [False] * (target + 1) dp[0] = True # A sum of 0 can always be formed with an empty subset # Iterate over each element in the array for num in arr: # Update the DP table in reverse order to prevent using the same element multiple times for t in range(target, num - 1, -1): if dp[t - num]: dp[t] = True return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"Problem You are given a string s of length n consisting only of lowercase English letters. You can perform the following operation any number of times: choose any non-empty substring of s which is a palindrome and delete it from s. Your task is to determine the minimum number of operations required to make the entire string s empty. Constraints The input satisfies the following conditions: * 1 leq n leq 1000 * s consists of lowercase English letters. Input The input is given in the following format: s Output Print the minimum number of operations required to make the entire string s empty. Examples Input ababa Output 1 Input aabbcc Output 4 Input aaa Output 1 Input abcd Output 4 Input abacabad Output 2","solution":"def min_deletions_to_empty_string(s): Returns the minimum number of operations required to make the entire string `s` empty. Each operation can delete any non-empty substring of `s` which is a palindrome. # Check if the entire string s is a palindrome if s == s[::-1]: return 1 else: return 2"},{"question":"A manufacturing company needs to calculate the total cost of producing multiple types of widgets. Each type of widget requires a certain number of standard parts, and the cost of each standard part depends on the type of widget being produced. The company needs to estimate the total production cost based on the quantity of widgets to be produced and the costs associated with their parts. You are given `N` types of widgets. For each type of widget, you know the number of widgets to produce, the number of parts required per widget, and the cost of each part. Your task is to calculate the total cost for producing all the widgets. -----Input----- - The first line contains a single integer `N`, the number of different types of widgets. - The next `N` lines each contain three space-separated integers: - `W_i` - the number of widgets of type `i` to produce. - `P_i` - the number of parts required per widget of type `i`. - `C_i` - the cost of each part for type `i`. -----Output----- Print a single line containing one integer ― the total cost of producing all the widgets. -----Constraints----- - 1 le N le 100 - 1 le W_i, P_i, C_i le 100 -----Example Input 1----- 3 10 2 5 5 3 10 8 1 7 -----Example Output 1----- 225 -----Explanation----- The total cost is calculated as follows: - Type 1: 10 widgets × 2 parts/widget × 5 cost/part = 100 - Type 2: 5 widgets × 3 parts/widget × 10 cost/part = 150 - Type 3: 8 widgets × 1 part/widget × 7 cost/part = 56 Summing these costs, we get 100 + 150 + 56 = 306.","solution":"def calculate_total_cost(N, widget_info): Calculate the total cost for producing all the widgets. Args: N (int): Number of widget types widget_info (list of tuples): Each tuple contains (W_i, P_i, C_i) where W_i is the number of widgets, P_i is the number of parts per widget, C_i is the cost of each part. Returns: int: The total cost of production total_cost = 0 for W_i, P_i, C_i in widget_info: total_cost += W_i * P_i * C_i return total_cost"},{"question":"------ Read problem statements in [Russian], [Mandarin Chinese], [Bengali], and [Vietnamese] as well. You are given an array B consisting of M integers and P queries. Each query is described by two operations: 1. **Update Operation**: This operation is described by three integers 1, X, and Y. It updates the X-th element in the array to Y. 2. **Prefix Sum Operation**: This operation is described by three integers 2, L, and R. It outputs the sum of the elements from index L to index R (inclusive). ------ Input Format ------ - The first line contains an integer T, the number of test cases. Then the test cases follow. - The first line of each test case contains two integers M and P. - The next line contains M integers B_{1},ldots,B_{M}. - Then P lines follow, each containing one of the two types of operations as described. ------ Output Format ------ For each prefix sum operation, output the required sum. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M, P ≤ 10^{4} 0 ≤ B_{i} ≤ 10^{5} 1 ≤ X ≤ M 1 ≤ L ≤ R ≤ M 0 ≤ Y ≤ 10^{5} - The sum of M over all test cases does not exceed 10^{5}. - The sum of P over all test cases does not exceed 10^{5} ----- Sample Input 1 ------ 1 5 5 1 2 3 4 5 2 1 3 1 3 10 2 2 4 1 5 15 2 1 5 ----- Sample Output 1 ------ 6 16 32 ----- explanation 1 ------ - For the first query, we find the sum of elements from index 1 to 3, which is 1+2+3 = 6. - For the second query, we update the 3rd element to 10. So the array becomes [1, 2, 10, 4, 5]. - For the third query, we find the sum of elements from index 2 to 4, which is 2+10+4 = 16. - For the fourth query, we update the 5th element to 15. So the array becomes [1, 2, 10, 4, 15]. - For the last query, we find the sum of elements from index 1 to 5, which is 1+2+10+4+15 = 32.","solution":"def process_queries(T, test_cases): results = [] for case in test_cases: M, P, B, operations = case for op in operations: if op[0] == 1: _, X, Y = op B[X-1] = Y elif op[0] == 2: _, L, R = op results.append(sum(B[L-1:R])) return results # Function to parse input and call main processing function def run_tests(input_text): input_lines = input_text.strip().split(\'n\') T = int(input_lines[0].strip()) index = 1 test_cases = [] for _ in range(T): M, P = map(int, input_lines[index].strip().split()) index += 1 B = list(map(int, input_lines[index].strip().split())) index += 1 operations = [] for _ in range(P): operations.append(list(map(int, input_lines[index].strip().split()))) index += 1 test_cases.append((M, P, B, operations)) results = process_queries(T, test_cases) return results"},{"question":"Disha loves playing with graphs and nodes. She has recently learned about the concept of connected components in an undirected graph. A connected component is a maximal set of nodes such that there exists a path between any pair of nodes in this set. Given an undirected graph, Disha is curious to know the number of connected components in it. Your task is to write a program that takes the number of nodes and edges of the graph along with the list of edges as input, and outputs the number of connected components in the graph. Input: The first line of the input contains two integers, n and m, representing the number of nodes and the number of edges in the graph respectively. The next m lines each contain two integers, u and v, representing an edge between node u and node v. Output: A single integer representing the number of connected components in the graph. Constraints: 1 ≤ n ≤ 1000 0 ≤ m ≤ n*(n-1)/2 1 ≤ u, v ≤ n SAMPLE INPUT 5 3 1 2 2 3 4 5 SAMPLE OUTPUT 2 Explanation: There are 5 nodes and 3 edges in the graph. There exist two connected components: {1, 2, 3} and {4, 5}. Hence, the output is 2.","solution":"def count_connected_components(n, edges): Returns the number of connected components in an undirected graph. :param n: integer, the number of nodes in the graph :param edges: list of tuples, each containing two integers representing an edge between nodes u and v :return: integer, the number of connected components from collections import defaultdict def dfs(node, visited, graph): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: dfs(neighbor, visited, graph) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() connected_components = 0 for node in range(1, n+1): if node not in visited: dfs(node, visited, graph) connected_components += 1 return connected_components"},{"question":"Sarah is working on a project for her statistics class and needs to perform analysis on a list of integers. She wants to find out which consecutive elements form the longest increasing subsequence in that list. An increasing subsequence is defined as a set of elements where every element is greater than the preceding one. Sarah needs your help to determine the length of this subsequence. Input The first line of the input contains an integer **N** denoting the number of integers in the list. The second line contains **N** space-separated integers representing the list of numbers. Output Output a single integer which is the length of the longest increasing subsequence in the list. Constraints - 1 ≤ N ≤ 10^5 - -10^9 ≤ array elements ≤ 10^9 Example Input: 7 10 9 2 5 3 7 101 Output: 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101], which has a length of 4. Code: ``` #include <iostream> #include <vector> #include <algorithm> using namespace std; int longest_increasing_subsequence(vector<int>& nums) { if (nums.empty()) return 0; vector<int> dp(nums.size(), 1); int max_length = 1; for (int i = 1; i < nums.size(); ++i) { for (int j = 0; j < i; ++j) { if (nums[i] > nums[j]) { dp[i] = max(dp[i], dp[j] + 1); } } max_length = max(max_length, dp[i]); } return max_length; } int main() { int N; cin >> N; vector<int> nums(N); for (int i = 0; i < N; ++i) { cin >> nums[i]; } cout << longest_increasing_subsequence(nums) << endl; return 0; } ``` **Steps to be followed:** 1. Read the problem description carefully and understand the required task. 2. Implement a function that calculates the length of the longest increasing subsequence using dynamic programming. 3. Test the code locally or on an online compiler to ensure it produces the correct results. 4. Submit the complete and verified code as the solution to the problem.","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest increasing subsequence in the list of integers \'nums\'. if not nums: return 0 dp = [1] * len(nums) max_length = 1 for i in range(1, len(nums)): for j in range(0, i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) max_length = max(max_length, dp[i]) return max_length"},{"question":"Alice and Bob are playing a card game with a deck of n cards. Each card has a positive integer written on it. They take turns to draw cards from the deck, with Alice going first. On their turn, a player must draw one card from either the top or the bottom of the remaining deck. The game continues until all cards have been drawn. Alice and Bob aim to maximize their own sum of cards\' values. Assuming both Alice and Bob play optimally, determine the maximum sum of card values that Alice can achieve. Input The first line contains one integer n (1 ≤ n ≤ 100), the number of cards in the deck. The second line contains n positive integers c1, c2, ..., cn (1 ≤ ci ≤ 1000), where ci is the value of the i-th card from the top of the deck. Output Output one integer, the maximum sum of card values that Alice can achieve if both players play optimally. Examples Input 4 1 2 9 4 Output 10 Input 3 5 3 7 Output 10","solution":"def max_alice_sum(n, cards): # Create a memoization table where dp[i][j] represents the maximum sum Alice # can get from the subarray cards[i:j+1]. dp = [[0] * n for _ in range(n)] # Auxiliary table to store cumulative sums for quick range sum calculations cumulative_sum = [0] * (n + 1) for i in range(n): cumulative_sum[i + 1] = cumulative_sum[i] + cards[i] # Helper function to compute the sum of the cards in a subarray def range_sum(i, j): return cumulative_sum[j + 1] - cumulative_sum[i] # Initialize the table for single cards for i in range(n): dp[i][i] = cards[i] # Fill the table for subarrays of length 2 to n for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 dp[i][j] = max(cards[i] + (range_sum(i + 1, j) - dp[i + 1][j]), cards[j] + (range_sum(i, j - 1) - dp[i][j - 1])) # The desired maximum sum for Alice is now in dp[0][n-1] when considering the whole array return dp[0][n - 1] # Example usage: # print(max_alice_sum(4, [1, 2, 9, 4])) # Should output 10"},{"question":"For a string s, find the length of the longest subsequence that can be rearranged to form a palindrome. Constraints * 1 leq |s| leq 100,000 Input The input is given in the following format: s Output Print the length of the longest palindromic subsequence. Example Input abcaabaa Output 7 Explanation A possible longest palindromic subsequence is \\"abaabaa\\". Note that the subsequence itself does not need to be a palindrome in the given string; it only needs to be rearrangeable into one.","solution":"def longest_palindromic_subsequence_length(s): from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) length = 0 odd_found = False # Traverse the frequency dictionary for count in char_count.values(): # If the character frequency is even, add to length if count % 2 == 0: length += count else: # If odd, add the even part and mark odd_found as True length += count - 1 odd_found = True # Add one if there is any odd frequency character to place it in the center if odd_found: length += 1 return length"},{"question":"John is developing an online scheduling system for his gym. To manage the bookings effectively, he needs to ensure that users do not book overlapping time slots. Each user can book any number of time slots, and each time slot is defined by a start and end time in minutes. Your task is to create an algorithm that ensures no two booked time slots overlap. If an overlapping time slot is found, it should be adjusted to the nearest available time slot. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of booked time slots. The following n lines contain two integers each, start_i and end_i (0 ≤ start_i < end_i ≤ 10^9), representing the start and end times of each booked slot. Output Print n lines, each containing two integers, the new start and end times of each slot adjusted to ensure no overlaps. The adjustments must minimize the movement from the original slot times. Example Input 3 10 20 15 25 30 40 Output 10 20 20 25 30 40 Explanation The first slot remains the same (10, 20). The second slot (15, 25) overlaps with the first one (10, 20), so it is adjusted to start immediately after the first slot ends (20, 25). The third slot (30, 40) does not overlap with any other slots, so it remains the same.","solution":"def adjust_time_slots(n, slots): # First, sort the slots based on the starting time slots.sort(key=lambda x: x[0]) # Initialize the result list with the first slot result = [slots[0]] # Iterate over the remaining slots to adjust them for i in range(1, n): prev_slot = result[-1] current_slot = slots[i] # If the current slot overlaps with the previous one if current_slot[0] < prev_slot[1]: # Adjust the start and end times of the current slot new_start = prev_slot[1] new_end = new_start + (current_slot[1] - current_slot[0]) result.append([new_start, new_end]) else: # No overlap, keep the current slot as is result.append(current_slot) return result"},{"question":"A marathon event is being organized, and participants are divided into teams. Each team has a uniform color. As an organizer, you need to distribute the participants into teams such that no two adjacent participants in the list end up in the same team. Each participant has a unique ID, and they should be assigned a team color denoted by a positive integer. Your goal is to determine the minimum number of different team colors necessary and provide an appropriate assignment of colors to the participants. -----Input----- - The first line contains a single integer T, the number of test cases. - The second line contains T integers N, where N is the number of participants for the respective test case. -----Output----- For each test case, print a single line containing the minimum number of different team colors needed and a space-separated list of integers representing the team color assigned to each participant. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 -----Example----- Input: 2 3 5 Output: 2 1 2 1 Explanation: In the first test case, with 3 participants, the optimal color assignment can be [1, 2, 1], using exactly 2 different team colors to ensure no two adjacent participants have the same color. In the second test case, with 5 participants, an optimal color assignment can be [1, 2, 1, 2, 1], again using exactly 2 different team colors.","solution":"def assign_team_colors(T, cases): results = [] for N in cases: min_colors = 2 colors = [] for i in range(N): colors.append((i % 2) + 1) # Alternates between 1 and 2 results.append((min_colors, colors)) return results def solve(T, cases): results = assign_team_colors(T, cases) for min_colors, colors in results: print(min_colors) print(\\" \\".join(map(str, colors))) # Example usage: # T = 2 # cases = [3, 5] # solve(T, cases)"},{"question":"Remy is organizing an online coding tournament and wants to ensure fair play. In the tournament, participants are required to solve a series of programming challenges in a fixed amount of time. The participants\' names and their corresponding scores are stored in a list. Remy needs to print out a leaderboard in descending order of scores. If two participants have the same score, they should be ranked in alphabetical order by their names. Your task is to write a program that generates the leaderboard based on the given list of participants and their scores. -----Input:----- - The first line contains an integer T indicating the number of participants. - The next T lines each contain a participant\'s name (a string) and their score (an integer), separated by a space. -----Output:----- A list of participants\' names sorted in descending order of their scores. If two participants have the same score, their names should be sorted in alphabetical order. -----Constraints:----- - 1 leq T leq 1000 - Participant names contain only uppercase and lowercase English letters and have at most length 100 - Scores are integers and can be negative -----Sample Input----- 5 Alice 300 Bob 200 Charlie 300 David 150 Eve 200 -----Sample Output----- Alice Charlie Bob Eve David","solution":"def generate_leaderboard(num_participants, participants_scores): # Sorting the participants first by score descending then by name ascending participants_scores.sort(key=lambda x: (-x[1], x[0])) # Extracting the sorted names sorted_names = [name for name, score in participants_scores] return sorted_names def main(input_data): lines = input_data.split(\\"n\\") T = int(lines[0]) participants_scores = [] for i in range(1, T + 1): name, score = lines[i].split() participants_scores.append((name, int(score))) leaderboard = generate_leaderboard(T, participants_scores) return leaderboard"},{"question":"A railway company is developing a new ticketing system that manages seat reservations. Each coach in a train has a certain number of rows and each row contains exactly two seats (a left seat and a right seat). Write a program that: 1. Takes the number of rows in a coach, and a series of reservation requests. 2. Outputs whether a reservation request is successful or failed due to the seat being already reserved. Consider the following rules: - Initially, all the seats are empty. - A reservation request can be either for the left seat, the right seat, or both seats in a specific row. Input The first line contains an integer n (1 ≤ n ≤ 1000) - the number of rows in the coach. The second line contains an integer m (1 ≤ m ≤ 1000) - the number of reservation requests. The following m lines each describe a reservation request in the format `row side`, where row is an integer representing the row number (1-based index), and side is a string either \\"left\\", \\"right\\", or \\"both\\". If the side is \\"both\\", it means both the left and the right seats in the specified row are requested. Output For each reservation request, print \\"Success\\" if the reservation can be made, otherwise print \\"Failure\\". Examples Input 5 6 1 left 1 right 2 both 1 both 3 right 5 left Output Success Success Success Failure Success Success Input 3 4 1 left 1 both 2 left 2 right Output Success Failure Success Success","solution":"def manage_reservations(n, m, requests): Manages seat reservations for a train coach. Parameters: n (int): Number of rows. m (int): Number of reservation requests. requests (list): List of tuples containing (row, side) for each request. Returns: list: \\"Success\\" or \\"Failure\\" for each request. # Initialize the seats status seats = { i: {\'left\': False, \'right\': False} for i in range(1, n + 1) } results = [] for request in requests: row, side = request if side == \'left\': if not seats[row][\'left\']: seats[row][\'left\'] = True results.append(\\"Success\\") else: results.append(\\"Failure\\") elif side == \'right\': if not seats[row][\'right\']: seats[row][\'right\'] = True results.append(\\"Success\\") else: results.append(\\"Failure\\") elif side == \'both\': if not seats[row][\'left\'] and not seats[row][\'right\']: seats[row][\'left\'] = True seats[row][\'right\'] = True results.append(\\"Success\\") else: results.append(\\"Failure\\") return results # Example usage: # n = 5 # m = 6 # requests = [(1, \'left\'), (1, \'right\'), (2, \'both\'), (1, \'both\'), (3, \'right\'), (5, \'left\')] # print(manage_reservations(n, m, requests))"},{"question":"In a certain country, the citizens are required to complete a series of daily tasks. Each task takes a specific amount of time, and no two tasks can overlap. There is a total of N tasks, each task labeled 1 through N. The time it takes to complete a task i, denoted by T[i], follows a given schedule. A citizen can execute only one task at a time, and once they start a task, they must complete it without interruption. Each task needs to be completed within a specified deadline D[i]. The task is considered successfully completed if the completion time does not exceed the deadline. Given an array of tasks with their respective times and deadlines, determine the maximum count of tasks that can be successfully completed in any order. Constraints - 1 ≤ N ≤ 2000 - 1 ≤ T[i], D[i] ≤ 10^9 Input The input is given from Standard Input in the following format: ``` N T[1] D[1] T[2] D[2] ... T[N] D[N] ``` Output Print the maximum number of tasks that can be successfully completed. Examples Input ``` 3 3 5 8 12 4 9 ``` Output 2 Input ``` 4 2 8 5 6 1 5 4 10 ``` Output 3","solution":"def max_completed_tasks(n, tasks): This function takes in an integer n and a list of tuples tasks where each tuple contains two integers: the time T[i] and deadline D[i] for each task. It returns the maximum number of tasks that can be successfully completed. # Sort the tasks based on deadlines first, and then by their times to handle tie cases tasks.sort(key=lambda x: (x[1], x[0])) current_time = 0 completed_tasks = 0 for t, d in tasks: if current_time + t <= d: # If the task can be completed within its deadline current_time += t completed_tasks += 1 return completed_tasks"},{"question":"Aila is developing a pathfinding algorithm for a grid-based game. The grid is represented as a two-dimensional array where each cell contains an integer representing the cost of entering that cell. Aila\'s algorithm must find the minimum cost to navigate from the top-left corner of the grid (0, 0) to the bottom-right corner (N-1, M-1), only moving right or down one cell at a time. Constraints: - 1 ≤ N, M ≤ 500 - Each cell in the grid contains an integer cost between 1 and 1000, inclusive. Input: The input is given from standard input in the following format: ``` N M cost_11 cost_12 ... cost_1M cost_21 cost_22 ... cost_2M ... cost_N1 cost_N2 ... cost_NM ``` Output: Print the minimum cost to navigate from the top-left to the bottom-right corner of the grid. Example: Input: ``` 3 4 1 3 5 8 4 2 1 7 4 3 2 3 ``` Output: ``` 12 ``` Explanation: The optimal path from the top-left to the bottom-right corner is: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (2, 3) The costs along this path are 1 + 3 + 5 + 1 + 2 + 3, which sum to 15.","solution":"def min_cost_path(grid): N = len(grid) M = len(grid[0]) # Create a 2D DP array to store the minimum cost path sum dp = [[0] * M for _ in range(N)] # Initialize the DP array dp[0][0] = grid[0][0] # Fill the first row for j in range(1, M): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the DP array for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The minimum cost to reach the bottom-right corner return dp[N - 1][M - 1]"},{"question":"You are given a matrix M with dimensions NxM containing non-negative integers. You need to find the maximum sum of elements you can collect by moving either to the right, down, or diagonally to the bottom right from the top-left corner to the bottom-right corner of the matrix. -----Constraints----- - 1≤N, M≤1000 - 0≤M[i][j]≤10000 -----Input----- The input is given from Standard Input in the following format: N M M[1][1] M[1][2] ... M[1][M] M[2][1] M[2][2] ... M[2][M] ... M[N][1] M[N][2] ... M[N][M] -----Output----- Print the maximum sum of the elements you can collect. -----Sample Input----- 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output----- 29 Starting at M[1][1]=1, you can move to: - Right to M[1][2]=2, then right to M[1][3]=3, then down to M[2][3]=6, then down to M[3][3]=9, collecting 1+2+3+6+9=21 - Down to M[2][1]=4, then down to M[3][1]=7, then right to M[3][2]=8, then right to M[3][3]=9, collecting 1+4+7+8+9=29 The maximum sum is 29.","solution":"def max_sum_path(matrix): Returns the maximum sum of elements collected by moving either to the right, down, or diagonally to the bottom right from the top-left corner to the bottom-right corner of the matrix. rows = len(matrix) cols = len(matrix[0]) # To handle dynamic programming table dp = [[0]*cols for _ in range(rows)] dp[0][0] = matrix[0][0] # Fill the first row & first column for i in range(1, cols): dp[0][i] = dp[0][i-1] + matrix[0][i] for i in range(1, rows): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) return dp[rows-1][cols-1] # For testing purposes, let\'s add this helper function. def create_matrix(input_string): lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) matrix = [list(map(int, line.split())) for line in lines[1:]] return matrix"},{"question":"A company uses an innovative security system that employs a one-time pad encryption mechanism to secure communication between employees. The encryption key is a binary string of length N, and each message is also a binary string of the same length. To encrypt a message, the key is XORed with the message to produce the ciphertext. Similarly, to decrypt the ciphertext, the same key is XORed with the ciphertext to retrieve the original message. Your task is to determine whether it is possible to deduce the encryption key given multiple pairs of original messages and their corresponding ciphertexts. If possible, find the key; otherwise, determine that the key cannot be deduced uniquely. ------ Input ------ The input begins with a single integer T representing the number of test cases. The description of the T test cases follows. The first line of each test case contains an integer N representing the length of the binary strings. The second line contains a binary string of length N, representing the original message. The third line contains a binary string of length N, representing the corresponding ciphertext. ------ Output ------ For each test case, print the encryption key as a binary string of length N if it can be uniquely determined, or print \\"Cannot be determined\\" if the key is ambiguous or cannot be deduced. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{5} The sum of N over all test cases does not exceed 10^{5}. ------ Sample Input ------ 2 4 1010 1101 3 011 101 ------ Sample Output ------ 0111 Cannot be determined ----- Explanation ------ Example Case 1: Original message: 1010 Ciphertext: 1101 Key = 1010 XOR 1101 = 0111, which can be deduced uniquely. Example Case 2: Not enough information to deduce the key uniquely since N = 3 could represent multiple keys that would result in the given ciphertext. Note: For the second case, any disparity between original and ciphertext that would suggest multiple possible keys due to insufficient or conflicting information would render a \\"Cannot be determined\\" result.","solution":"def xor_binary_strings(b1, b2): Returns the result of XOR operation between two binary strings of equal length. return \'\'.join(\'1\' if bit1 != bit2 else \'0\' for bit1, bit2 in zip(b1, b2)) def determine_key(num_test_cases, test_cases): Determine the encryption key for given messages and ciphertexts if possible. :param num_test_cases: int :param test_cases: list of tuples, each containing (N, message, ciphertext) :return: list of results where each result is either the key or \\"Cannot be determined\\" results = [] for N, message, ciphertext in test_cases: key = xor_binary_strings(message, ciphertext) results.append(key) return results"},{"question":"In a fictional game, there are N levels a player can complete, numbered from 1 to N. The player can play levels in any order but has to follow two rules: 1. They must reach at least three specified checkpoints in the game\'s storyline located at three unique levels. 2. The checkpoints must be visited in a strictly increasing order (i.e., if they visit checkpoints at level i, j, and k, then i < j < k). Write a function that counts the number of valid ways the player can visit exactly three checkpoints in strictly increasing order out of the N levels. Input format: A single integer N, the number of levels in the game. Output format: The number of ways the player can visit exactly three checkpoints in strictly increasing order. Constraints: 3 ≤ N ≤ 1000 SAMPLE INPUT 5 SAMPLE OUTPUT 10 Explanation: All possible ways to choose three checkpoints from five levels (1, 2, 3, 4, 5) are: (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)","solution":"import math def count_valid_ways(N): Counts the number of ways to choose 3 levels out of N levels in strictly increasing order. Args: N (int): Number of levels in the game. Returns: int: Number of valid ways to choose 3 checkpoints. if N < 3: return 0 return math.comb(N, 3)"},{"question":"You are given an array of n integers. Your task is to count the number of distinct pairs (i, j) such that i < j and a_i + a_j is even. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of queries. Then t queries follow. The first line of each query contains an integer n (2 le n le 10^5) — the number of integers in the array. The second line of each query contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^6) — the elements of the array. It is guaranteed that the total number of elements in all queries does not exceed 10^6. -----Output----- For each query, print a single integer — the number of distinct pairs (i, j) such that i < j and a_i + a_j is even. -----Example----- Input 2 4 1 2 3 4 6 2 4 6 8 10 12 Output 2 15 -----Note----- In the first query, the pairs are (1, 3) and (2, 4). In the second query, all pairs are valid.","solution":"def count_even_sum_pairs(t, queries): results = [] for i in range(t): n, array = queries[i] count_even = 0 count_odd = 0 for number in array: if number % 2 == 0: count_even += 1 else: count_odd += 1 # The number of valid pairs that sum to even results.append((count_even * (count_even - 1) // 2) + (count_odd * (count_odd - 1) // 2)) return results"},{"question":"Given a list of non-negative integers `arr`, you are to partition the list into two non-empty sublists such that the sum of the elements in the first sublist is equal to the sum of the elements in the second sublist. If it is not possible to partition the list this way, return `false`. Otherwise, return `true`. Example 1: Input: arr = [1, 5, 11, 5] Output: true Explanation: The array can be partitioned as [1, 5, 5] and [11], each having a sum of 11. Example 2: Input: arr = [1, 2, 3, 5] Output: false Explanation: The array cannot be partitioned into two sublists with equal sum. Example 3: Input: arr = [2, 2, 3, 5] Output: false Explanation: The array cannot be partitioned into two sublists with equal sum. Your Task: Complete the function `bool canPartition(vector<int>& arr)`, which takes a vector of integers as input and returns a boolean indicating whether the array can be partitioned into two sublists with equal sum. Expected Time Complexity: O(N * sum(arr)/2) Expected Auxiliary Space: O(N * sum(arr)/2) Constraints: 1 <= arr.length <= 200 1 <= arr[i] <= 100","solution":"def canPartition(arr): total_sum = sum(arr) # If total_sum is odd, it\'s not possible to partition it into two equal sum sublists if total_sum % 2 != 0: return False target = total_sum // 2 n = len(arr) # DP array to store whether a sum up to target can be achieved dp = [False] * (target + 1) dp[0] = True for num in arr: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"In the enchanted forest, there exists a magical tree with n nodes. Each node is guarded by a fairy, and there are n-1 undirected edges connecting these nodes. Each edge has a magical bond strength represented by an integer weight. The fairies have to calculate the maximum path strength of the tree to enhance their magic. The maximum path strength is defined as the maximum sum of weights encountered on any path between two nodes in the tree. Input Format The first line contains a single integer n, the number of nodes in the tree. Each of the next n-1 lines contains three integers u, v, and w, representing an edge between nodes u and v with weight w. Constraints 1 leq n leq 10^4 1 leq u, v leq n 1 leq w leq 10^4 Output Format Print a single integer, the maximum path strength of the tree. Sample Input 5 1 2 3 1 3 2 3 4 4 2 5 1 Sample Output 10 Explanation One of the paths with the maximum path strength is from node 4 to node 5 via node 3 and node 1. The path strength is 4 (3 rightarrow 4) + 2 (1 rightarrow 3) + 3 (1 rightarrow 2) + 1 (2 rightarrow 5) = 10. Hence, the output is 10.","solution":"import sys from collections import defaultdict, deque def max_path_strength(n, edges): def bfs(start_node): distances = [-1] * n distances[start_node] = 0 q = deque([start_node]) max_distance = (0, start_node) while q: node = q.popleft() current_distance = distances[node] for neighbor, weight in tree[node]: if distances[neighbor] == -1: distances[neighbor] = current_distance + weight q.append(neighbor) if distances[neighbor] > max_distance[0]: max_distance = (distances[neighbor], neighbor) return max_distance if n == 1: return 0 tree = defaultdict(list) for u, v, w in edges: tree[u-1].append((v-1, w)) tree[v-1].append((u-1, w)) _, farthest_node_from_start = bfs(0) max_length, _ = bfs(farthest_node_from_start) return max_length"},{"question":"In a certain company, employees are usually grouped into teams. Each employee has a unique ID represented by an integer. Each team in the company has a unique team ID, also represented by a unique integer. The employees in the company can collaboratively create a chain of workflows within their team, but cross-team collaborations are allowed. The goal is to form these workflows with the least barriers and complexities. Here\'s how the enhancement of workflows can be determined: - Workflow can only be created between two employees if there are no direct obstacles between them. - An obstacle is defined as another team member who creates difficulty between two employees attempting to directly collaborate on the workflow. Given the employee and team details, write a program to determine the number of distinct workflows that can be created where there are no obstacles between any two employees in the same workflow. Input The input consists of multiple test cases. Each test case begins with a single integer t representing the number of test cases. For each test case: 1. The first line contains two space-separated integers n and k (1 ≤ n ≤ 2000, 1 ≤ k ≤ 100), where n denotes the number of employees, and k denotes the number of teams. 2. The second line contains n space-separated integers where the i-th integer represents the team ID of the i-th employee (1 ≤ team ID ≤ k). Output For each test case, print a single line containing the number of distinct workflows that can be created. Example Input 3 4 3 1 1 2 2 5 2 1 1 1 1 1 6 3 1 2 2 3 3 3 Output 2 1 3","solution":"def count_workflows(t, test_cases): results = [] for case in test_cases: n, k = case[0] team_ids = case[1] # Use set to identify unique teams in the employees list unique_teams = set(team_ids) # The number of unique teams is the number of distinct workflows results.append(len(unique_teams)) return results"},{"question":"A large company has a central server that connects all the computers in their network. The network can be represented as an undirected graph with N nodes and M edges. Each node represents a computer, and each edge represents a direct connection between two computers. Each connection has an associated time in milliseconds it takes to transfer data between the two computers. The company is trying to ensure optimal data transfer times across the network. Specifically, they want to find paths between various pairs of computers and determine the longest time it takes to transfer data along these paths, which is defined as the \\"bottleneck\\" time. Given the number of nodes, edges, and the time associated with each edge, as well as Q pairs of nodes for which we need to determine the bottleneck time, write a program that calculates the bottleneck times for all Q pairs. Input: - The first line of the input contains two integers N and M, the number of nodes and edges in the network. - The next M lines each contain three integers u, v, and t, representing an edge between nodes u and v with a transfer time of t milliseconds. - The next line contains an integer Q, the number of pairs of nodes. - The next Q lines each contain two integers a and b, representing nodes for which the bottleneck time needs to be calculated. Output: For each pair of nodes, output a single line containing the bottleneck time between the two nodes. If the nodes are not connected, output -1. Constraints: - 1 ≤ N ≤ 5000 - 1 ≤ M ≤ 10000 - 1 ≤ t ≤ 10^4 - 1 ≤ Q ≤ 1000 - 1 ≤ u, v, a, b ≤ N SAMPLE INPUT 5 6 1 2 4 2 3 2 1 3 6 3 4 3 4 5 5 2 5 7 3 1 4 2 5 3 1 SAMPLE OUTPUT 6 7 6","solution":"def find_bottleneck_times(N, M, edges, Q, queries): from collections import defaultdict, deque def bfs_max_edge(src, dest): BFS to find the max edge weight in the path between src and dest queue = deque([(src, -1)]) # (current_node, max_edge_weight) visited = [False] * (N + 1) visited[src] = True while queue: node, max_weight = queue.popleft() if node == dest: return max_weight for neighbor, weight in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, max(weight, max_weight))) return -1 # Build the graph using adjacency list graph = defaultdict(list) for u, v, t in edges: graph[u].append((v, t)) graph[v].append((u, t)) results = [] for a, b in queries: results.append(bfs_max_edge(a, b)) return results def parse_input(input): lines = input.strip().split(\'n\') N, M = map(int, lines[0].split()) edges = [tuple(map(int, lines[i+1].split())) for i in range(M)] Q = int(lines[M+1]) queries = [tuple(map(int, lines[M+2+i].split())) for i in range(Q)] return N, M, edges, Q, queries"},{"question":"In Vlarian city, the parking system needs to be optimized. The municipal corporation has recently received complaints about traffic congestion owing to parking slots not being efficiently utilized. They aim to design a system wherein the parking slots are utilized more evenly. The city\'s parking area consists of `m` wide columns of parking slots, and the authorities want to ensure that cars are parked evenly across these columns. Each column can hold a different number of cars, and the objective is to park `n` cars in such a way that the difference between the number of cars in any two columns is minimized. Write a function that, given `n` cars and `m` columns, returns a list where the `i-th` element represents the number of cars parked in the `i-th` column. If there are multiple solutions, return any of them. Input - The single input line contains two integers `n` and `m` (1 ≤ m ≤ n ≤ 100000). Output - Print a sequence of `m` integers where the `i-th` integer denotes the number of cars parked in the `i-th` column such that the difference between the number of cars in any two columns is minimized. Examples Input 7 3 Output 3 2 2 Input 10 4 Output 3 3 2 2","solution":"def park_cars(n, m): Function to distribute n cars across m columns such that the difference between the number of cars in any two columns is minimized. Parameters: n (int): Number of cars m (int): Number of columns Returns: List[int]: A list where the i-th element represents the number of cars parked in the i-th column. # Base number of cars per column base = n // m # Number of columns that will get an extra car extra_cars = n % m result = [base] * m for i in range(extra_cars): result[i] += 1 return result"},{"question":"In a small village, there is a very valuable tree known for its rare fruits. The village elder, wise and old, wanted to protect the fruits from being stolen by greedy people. He used a unique numbering system to number the fruits and then locked them in a special box with n compartments, each capable of holding at most one fruit. Each fruit is marked with an integer representing its value. One day, a young villager cleverly unlocked the box and stole exactly k fruits. The elder didn\'t know which fruits were stolen, but he wanted to find out the maximum possible sum of the values of the stolen fruits and the minimum possible sum of the values of the stolen fruits. Given the values of the n fruits in the box before the theft and the value k indicating the number of stolen fruits, your task is to determine the maximum and minimum possible sum of the values of the k stolen fruits. Input The first line contains two integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ n) separated by a space. The second line contains n integers, indicating the values of the fruits. Each value x will be between 1 and 1000 inclusive. Output Print two space-separated integers, the minimum and maximum possible sum of the values of the k stolen fruits. Examples Input 5 2 3 7 2 5 8 Output 5 15 Input 4 3 10 1 5 2 Output 8 17 Input 6 4 6 5 9 8 1 3 Output 15 28 Note In the first example, the possible sums of the stolen fruits are computed as follows: - Minimum sum: the two smallest values (2 and 3) sum to 5. - Maximum sum: the two largest values (8 and 7) sum to 15. In the second example: - Minimum sum: the three smallest values (1, 2, and 5) sum to 8. - Maximum sum: the three largest values (10, 5, and 2) sum to 17. In the third example: - Minimum sum: the four smallest values (1, 3, 5, and 6) sum to 15. - Maximum sum: the four largest values (9, 8, 6, and 5) sum to 28. This problem involves sorting and selecting the smallest and largest k elements to compute the sums, which help in determining the minimum and maximum possible values easily.","solution":"def max_min_stolen_fruits(n, k, fruit_values): Returns the maximum and minimum possible sum of the values of the k stolen fruits. Args: n : int - Total number of fruits. k : int - Number of stolen fruits. fruit_values : list of int - Values of the fruits. Returns: tuple of int : Minimum and maximum possible sum of the values of the k stolen fruits. # Sort the fruit values sorted_values = sorted(fruit_values) # Minimum sum of k stolen fruits min_sum = sum(sorted_values[:k]) # Maximum sum of k stolen fruits max_sum = sum(sorted_values[-k:]) return (min_sum, max_sum)"},{"question":"Create a program that outputs all prime factors of a number n. The prime factor conditions are as follows. However, 2 ≤ n ≤ 100,000. If the number is prime, output \\"Prime\\". * A prime factor is a factor that is a prime number. * The factors should be printed in ascending order. Input Given multiple datasets. The format of each dataset is as follows: n Input ends when n is 0. The number of datasets does not exceed 100. Output Print the prime factors or \\"Prime\\" for each dataset. Insert one blank line between the datasets. Example Input 28 17 100 0 Output 2 2 7 Prime 2 2 5 5","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_factors(n): Returns a list of prime factors of n. factors = [] if is_prime(n): return \\"Prime\\" while n % 2 == 0: factors.append(2) n = n // 2 for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n = n // i if n > 2: factors.append(n) return factors def process_datasets(datasets): Processes multiple datasets to output prime factors. results = [] for n in datasets: if n == 0: break result = prime_factors(n) results.append(result) return results if __name__ == \\"__main__\\": datasets = [28, 17, 100, 0] results = process_datasets(datasets) for res in results: if isinstance(res, list): for factor in res: print(factor) else: print(res) print() # This prints the blank line between datasets"},{"question":"Write a function to check if a given integer is a palindrome. A palindromic number is a number that remains the same when its digits are reversed. Input The first line contains one integer T - number of test cases. The following T lines contain one integer each - the numbers to be checked. Output For each test case output \\"YES\\" if the number is a palindrome, otherwise output \\"NO\\". Constraints 1 ≤ T ≤ 1000 -10^9 ≤ Number ≤ 10^9 SAMPLE INPUT 4 121 -121 10 -101 SAMPLE OUTPUT YES NO NO NO","solution":"def is_palindrome_number(number): Returns \\"YES\\" if the given number is a palindrome, otherwise \\"NO\\". str_num = str(number) if str_num == str_num[::-1]: return \\"YES\\" else: return \\"NO\\" def check_palindromes(T, numbers): Takes the number of test cases T and a list of numbers, and returns a list of \\"YES\\" or \\"NO\\" for each number indicating if it is a palindrome. results = [] for num in numbers: results.append(is_palindrome_number(num)) return results"},{"question":"You are given an n times n matrix of integers. Your task is to determine whether there is a submatrix that contains all ones. The submatrix must be entirely composed of 1s and can vary in size but must be at least 2 times 2. Write a function that checks whether such a submatrix exists. -----Input----- - The first line contains a single integer t (1 le t le 100) — the number of test cases. - For each test case, the first line contains one integer n (1 le n le 50) — the size of the matrix. - The following n lines each contain n integers 0 or 1 representing the elements of the matrix. -----Output----- For each test case, print \\"YES\\" if there is a submatrix composed entirely of 1s with size at least 2 times 2, otherwise print \\"NO\\". -----Example----- Input 2 3 1 0 1 0 1 0 1 1 1 4 1 1 0 0 1 1 0 1 0 0 0 1 1 1 1 1 Output YES YES","solution":"def has_full_ones_submatrix(matrix, n): for i in range(n-1): for j in range(n-1): if matrix[i][j] == 1 and matrix[i+1][j] == 1 and matrix[i][j+1] == 1 and matrix[i+1][j+1] == 1: return True return False def check_all_ones_submatrices(test_cases): results = [] for n, matrix in test_cases: if has_full_ones_submatrix(matrix, n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"F: 02 Shortest Path with Obstacles # Problem You are given a grid of size `N x M` represented by a 2D array `grid` where each cell contains either a `0` or a `1`. Here, `0` represents an empty cell, and `1` represents an obstacle. You need to find the shortest path from the top-left corner of the grid (0, 0) to the bottom-right corner (N-1, M-1). You can only move up, down, left, or right. If there is no valid path, return `-1`. # Input Format - The first line contains two integers `N` and `M` — the number of rows and columns in the grid, respectively. - The next `N` lines each contain `M` integers (either `0` or `1`), describing the grid. # Constraints - `1 <= N, M <= 1000` - Each cell in the grid contains a value of either `0` or `1`. - The top-left and bottom-right corners are always `0`. # Output Format - Print a single integer representing the length of the shortest path from the top-left to the bottom-right corner, or `-1` if no such path exists. # Example Input ``` 4 4 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0 ``` Output ``` 7 ``` Explanation The shortest path is through the following coordinates: `(0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3)` The length of this path is `7`. Input ``` 3 3 0 1 0 1 1 0 0 0 0 ``` Output ``` -1 ``` Explanation There is no valid path from (0, 0) to (2, 2).","solution":"from collections import deque def shortest_path_with_obstacles(grid): Given a grid with obstacles, finds the shortest path from the top-left corner to the bottom-right corner. Returns -1 if no such path exists. N = len(grid) M = len(grid[0]) if grid[0][0] == 1 or grid[N-1][M-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == N-1 and c == M-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"Design a function that takes three parameters: a numerical list representing the signature of a sequence, a function to be applied iteratively, and an integer representing the total number of iterations. The function should return the value of the sequence after the specified number of iterations. Each new element in the sequence is generated by applying the given function to the last element of the sequence. Parameters: * `signature` (list of integers): The initial values of the sequence. * `function` (function): A function that takes an integer and returns an integer. * `iterations` (integer): The total number of iterations to perform. Your task is to implement this iterative function application and return the final element of the sequence after all iterations are completed. ```python def custom_sequence(signature, function, iterations): This function generates a custom sequence by iteratively applying a given function. :param signature: List[int]: The initial sequence values. :param function: Function[int, int]: The function to apply iteratively to generate new values. :param iterations: int: The total number of iterations to perform. :return: int: The value of the sequence after the specified number of iterations. # Implementation goes here # Example usage: increment_by_one = lambda x: x + 1 multiply_by_two = lambda x: x * 2 print(custom_sequence([1], increment_by_one, 5)) # Output: 6 print(custom_sequence([2], multiply_by_two, 3)) # Output: 16 ``` For example: - `custom_sequence([1], increment_by_one, 5)` should return `6`, because starting from `1` and incrementing by `1` for `5` iterations gives `[1, 2, 3, 4, 5, 6]`. - `custom_sequence([2], multiply_by_two, 3)` should return `16`, because starting from `2` and multiplying by `2` for `3` iterations gives `[2, 4, 8, 16]`. Note that the function applies to the most recent value in the sequence after each iteration.","solution":"def custom_sequence(signature, function, iterations): This function generates a custom sequence by iteratively applying a given function. :param signature: List[int]: The initial sequence values. :param function: Function[int, int]: The function to apply iteratively to generate new values. :param iterations: int: The total number of iterations to perform. :return: int: The value of the sequence after the specified number of iterations. current_value = signature[-1] for _ in range(iterations): current_value = function(current_value) return current_value"},{"question":"You are given two integers, A and B. Print the greatest common divisor (GCD) of the two integers. For example, if A = 8 and B = 12, print `4`. Constraints * 1 leq A leq 100 * 1 leq B leq 100 * A and B are positive integers. Input Input is given from Standard Input in the following format: A B Output Print the GCD of the two integers. Example Input 8 12 Output 4","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b. while b: a, b = b, a % b return a"},{"question":"Manoj is planning to buy some deluxe packets of almonds for the upcoming festive season. Each packet contains `n` almonds. Manoj wants to distribute these almonds among his friends but in a special way. He wants to create pairs of almonds such that the sum of almonds in each pair is even. Given the packets of almonds, Manoj wants to know the maximum number of pairs he can create with an even sum of almonds. Input The first line contains a single integer `t` (1 ≤ t ≤ 100 000) — the number of packets. Each of the next `t` lines contains an integer `n` (0 ≤ n ≤ 10^9) — the number of almonds in each packet. Output For each packet, output a single integer — the maximum number of pairs with an even sum that can be formed using the almonds in that packet. Example Input 4 4 7 8 15 Output 1 0 1 0 Explanation In the first test case, with 4 almonds, Manoj can take them in sets of 1 and 3 and create one pair with an even sum. In the second test case, with 7 almonds, Manoj cannot form any pair of almonds with an even sum. In the third test case, with 8 almonds, he can form one pair with an even sum (4 + 4). In the fourth test case, with 15 almonds, Manoj cannot form any pair of almonds with an even sum.","solution":"def max_even_sum_pairs(t, packets): Given the number of packets `t` and a list `packets` that contains the number of almonds in each packet, returns a list of the maximum number of pairs with an even sum that can be formed for each packet. results = [] for n in packets: if n < 2: results.append(0) else: results.append(n // 2) return results"},{"question":"The forest inhabitants are facing a unique problem with their food storage system. Each inhabitant is assigned to a particular food storage unit, and each food storage unit contains a certain number of food items. Over time, inhabitants request food from the storage units, and they must be able to efficiently fulfill these requests. The forest\'s food storage system can be represented as an array `A` of integers, where each integer represents the number of food items in the corresponding storage unit. An inhabitant can make a request to take `k` food items from a range of storage units from index `l` to index `r` (inclusive). Your task is to determine the maximum number of food items that can be taken from this range if the request can be fulfilled. If the request cannot be fully fulfilled, return the maximum number of food items that can be taken while satisfying the constraints. Input The first line of input contains two integers `n` (1 ≤ n ≤ 100000) and `m` (1 ≤ m ≤ 100000), denoting the number of storage units and the number of food requests respectively. The second line contains `n` integers, representing the array `A` of food items in each storage unit. Each of the next `m` lines contains three integers `l`, `r`, and `k` (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ 1000000000), representing a request for `k` food items from the range specified from `l` to `r`. Output For each request, output a single integer: the maximum number of food items that can be taken from the specified range. Example Input 6 3 5 20 15 10 7 25 1 3 40 2 5 30 1 6 50 Output 40 30 50 Explanation - For the first request, the range is from index 1 to 3, which contains 5, 20, and 15 food items, summing up to 40. Since 40 items can be taken, the output is 40. - For the second request, the range is from index 2 to 5, which contains 20, 15, 10, and 7 food items, summing up to 52. However, only 30 items are requested, so the output is 30. - For the third request, the range is from index 1 to 6, which contains 5, 20, 15, 10, 7, and 25 food items, summing up to 82. Since 50 items can be taken, the output is 50.","solution":"def max_food_per_request(n, m, A, requests): results = [] for l, r, k in requests: total_food = sum(A[l-1:r]) results.append(min(total_food, k)) return results"},{"question":"A group of friends is playing a game where they need to generate a sequence of numbers based on a given starting number and specific rules. The game is defined as follows: Starting with an integer N, generate a sequence by applying the following operations in each step until the sequence becomes constant (i.e., the same number repeats): 1. If the number is even, divide it by 2. 2. If the number is odd and greater than 1, multiply it by 3 and add 1. 3. If the number is 1, stop the sequence. Given the starting number N, find the length of the sequence generated by following the above rules. Input: - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains a single integer N, the starting number. Output: - For each test case, output the length of the sequence generated starting from N. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000000 SAMPLE INPUT 3 6 1 16 SAMPLE OUTPUT 9 1 5 Explanation: - For the first test case, starting with 6, the sequence is: 6, 3, 10, 5, 16, 8, 4, 2, 1. The length of the sequence is 9. - For the second test case, starting with 1, the sequence is already constant: 1. The length of the sequence is 1. - For the third test case, starting with 16, the sequence is: 16, 8, 4, 2, 1. The length of the sequence is 5.","solution":"def sequence_length(N): Given a starting number N, generates the sequence based on the described rules, and returns the length of the sequence. length = 1 while N != 1: if N % 2 == 0: N //= 2 else: N = 3 * N + 1 length += 1 return length def generate_sequences(T, test_cases): Processes multiple test cases and returns the lengths of the sequences for each test case. results = [] for N in test_cases: results.append(sequence_length(N)) return results"},{"question":"You are given a string mbox{S} of length N consisting only of lowercase letters. You are also given a list of mbox{Q} queries. Each query contains two integers mbox{L} and mbox{R}. For each query, you need to determine the length of the longest palindrome that can be formed using the characters of the substring mbox{S[L..R]}. Input Format The first line of input contains the string mbox{S}. The second line contains mbox{Q}, the number of queries to follow. Each subsequent line contains two integers mbox{L} and mbox{R} (0-indexed). Output Format For each query, output the length of the longest palindrome that can be formed using the characters of the specified substring. Constraints 1 leq N leq 10^5 1 leq Q leq 10^5 0 leq L leq R < N Sample Input abacaba 3 0 6 1 5 2 4 Sample Output 7 3 3 Explanation Query 1: The entire string \\"abacaba\\" is a palindrome, so the longest palindrome formed from this string is 7. Query 2: The substring \\"bacab\\" can be rearranged to form \\"bacab\\" or \\"cabac\\", both of which are palindromes of length 5. Query 3: The substring \\"aca\\" is already a palindrome, so the longest palindrome has length 3.","solution":"from collections import Counter def longest_palindrome_length(s, queries): For each query, returns the length of the longest palindrome that can be formed from the substring s[L..R]. :param s: String S of length N :param queries: List of tuples, where each tuple contains two integers L and R :return: List of integers representing the length of the longest palindrome for each query results = [] for L, R in queries: substring = s[L:R+1] count = Counter(substring) length = 0 odd_count_found = False for freq in count.values(): length += (freq // 2) * 2 if freq % 2 == 1: odd_count_found = True # If there\'s any character with odd frequency, # we can use one of them in the middle of the palindrome. if odd_count_found: length += 1 results.append(length) return results"},{"question":"You are working on a special project that involves creating arrangements of dominoes. Each domino has two equal halves with numbers from 1 to n on each half. You need to create a function that generates all possible unique domino arrangements where each half of the domino contains a number from 1 to n, and neither half of a domino should be empty or zero. The order of numbers on the domino does not matter, i.e., a domino with [1, 2] is considered the same as [2, 1]. Input: An integer n (1 ≤ n ≤ 50), which represents the largest number that can appear on either half of a domino. Output: Print all unique domino arrangements in the format [a, b] where 1 ≤ a ≤ b ≤ n. The output should be in lexicographical order based on the numbers on the dominoes. Example: Input: 3 Output: [1, 1] [1, 2] [1, 3] [2, 2] [2, 3] [3, 3] Note: For the input n = 3, we need to generate all domino pairs where each half ranges from 1 to 3. The output should start with the smallest lexicographical pair and proceed in ascending order.","solution":"def generate_dominoes(n): Returns a list of unique domino pairs for a given n. Each pair is represented as a list [a, b] where 1 ≤ a ≤ b ≤ n. dominoes = [] for i in range(1, n + 1): for j in range(i, n + 1): dominoes.append([i, j]) return dominoes"},{"question":"You are given a list of integers representing the heights of students in a line. You need to determine the minimum number of students that need to be removed from the line so that the remaining students are in a strictly increasing order of heights. Return this minimum number of students to be removed. Example 1: Input: heights = [4, 3, 2, 6, 5, 8, 7] Output: 4 Explanation: The longest increasing subsequence is [2, 5, 7] or [3, 6, 8]. The minimum number of students to be removed is 4. Example 2: Input: heights = [1, 2, 3, 4, 5] Output: 0 Explanation: The students are already in strictly increasing order, so no need to remove any student. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `minStudentsToRemove()` that takes a list of integers `heights` and its size `n`, and returns the minimum number of students that need to be removed. The driver code takes care of the printing. Expected Time Complexity: O(N*LOG(N)). Expected Auxiliary Space: O(N). Constraints: 1 ≤ n ≤ 10^5 1 ≤ heights[i] ≤ 10^6","solution":"def minStudentsToRemove(heights): def length_of_lis(arr): from bisect import bisect_left lis = [] for num in arr: pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) n = len(heights) lis_length = length_of_lis(heights) return n - lis_length"},{"question":"Implement a function that takes a string consisting of open and closed brackets (i.e., \'(\', \')\', \'{\', \'}\', \'[\' and \']\') and returns true if the brackets are balanced and false otherwise. A string is considered balanced if all open brackets are closed in the correct order.","solution":"def is_balanced(s): Returns True if the brackets in the string are balanced, False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: continue return stack == []"},{"question":"Alice and Bob are playing a dynamic array manipulation game. Initially, Alice has an array of integers. The game proceeds as follows: Each turn, starting with Bob, the players take turns performing one of the following operations: 1. Remove an element from any position in the array. 2. Increase or decrease any element of the array by 1. The player who cannot make a move loses the game. It is assumed that both players play optimally. Determine the winner of the game for each test case provided. ------ Input ------ The first line contains a single integer T, the number of test cases. T test cases follow. Each test case starts with an integer N, the size of the array. The next line contains N space-separated integers representing the elements of the array. ------ Output ------ For each test case, output a single line containing the name of the winner of the game. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ text{array elements} ≤ 1000 ------ Sample Input 1 ------ 3 5 1 2 3 4 5 3 2 2 2 4 1 1 1 1 ------ Sample Output 1 ------ Alice Alice Bob","solution":"def game_winner(T, test_cases): Determines the game winner for each test case based on array manipulation rules. winners = [] for N, array in test_cases: if N % 2 == 1: # Odd number of elements in the array winners.append(\\"Alice\\") else: # Even number of elements in the array winners.append(\\"Bob\\") return winners"},{"question":"There is a sequence of N positive integers (A_1, A_2, ..., A_N) and an integer M. Your task is to determine the number of contiguous subarrays of length M such that the sum of the maximum and minimum elements of the subarray is greater than a given integer X. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case contains three space-separated integers N, M, and X. - The second line contains N space-separated integers A_1, A_2, ..., A_N. -----Output:----- For each test case, output in a single line the number of valid subarrays. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 10^5 - 1 leq M leq N - 1 leq A_i leq 10^6 - text{the sum of N over all test cases does not exceed 10^6} -----Sample Input:----- 2 5 3 10 1 3 8 6 4 4 2 7 9 7 3 8 -----Sample Output:----- 2 1 -----EXPLANATION:----- 1. For the first test case: - Subarray [1, 3, 8]: max = 8, min = 1, sum = 9 (not > 10) - Subarray [3, 8, 6]: max = 8, min = 3, sum = 11 (> 10) - Subarray [8, 6, 4]: max = 8, min = 4, sum = 12 (> 10) Thus, there are 2 valid subarrays. 2. For the second test case: - Subarray [9, 7]: max = 9, min = 7, sum = 16 (> 7) - Subarray [7, 3]: max = 7, min = 3, sum = 10 (> 7) - Subarray [3, 8]: max = 8, min = 3, sum = 11 (> 7) Thus, there is 1 valid subarray.","solution":"def count_valid_subarrays(N, M, X, A): Returns the number of contiguous subarrays of length M such that the sum of the maximum and minimum elements of the subarray is greater than X. count = 0 for i in range(N - M + 1): subarray = A[i:i + M] max_element = max(subarray) min_element = min(subarray) if max_element + min_element > X: count += 1 return count def solve(T, test_cases): results = [] for case in test_cases: N, M, X, A = case results.append(count_valid_subarrays(N, M, X, A)) return results"},{"question":"Given an array of integers, determine if there exists a pair of elements in the array whose sum is equal to a given target value. The function should return a string indicating whether such a pair exists with \\"Pair found\\" or \\"No pair found\\". For the input, the first line contains an integer n which represents the number of test cases (1 <= n <= 100). Each test case is provided in two lines: the first line contains two integers m (the number of elements in the array, where 1 <= m <= 1000) and t (the target value), and the second line contains m integers representing the elements of the array. SAMPLE INPUT 2 4 6 1 2 3 4 5 10 1 2 3 8 5 SAMPLE OUTPUT Pair found Pair found Explanation EXAMPLE 1:- For the first test case, there exists a pair (2, 4) whose sum is 6. EXAMPLE 2:- For the second test case, there exists a pair (2, 8) whose sum is 10.","solution":"def find_pair_with_sum(test_cases): results = [] for case in test_cases: m, t, arr = case[\'m\'], case[\'t\'], case[\'arr\'] found = False seen = set() for number in arr: if t - number in seen: results.append(\\"Pair found\\") found = True break seen.add(number) if not found: results.append(\\"No pair found\\") return results # Example usage: # test_cases = [{\'m\': 4, \'t\': 6, \'arr\': [1, 2, 3, 4]}, {\'m\': 5, \'t\': 10, \'arr\': [1, 2, 3, 8, 5]}] # print(find_pair_with_sum(test_cases)) # Output: [\\"Pair found\\", \\"Pair found\\"]"},{"question":"Given a string S consisting of characters \'a\' and \'b\' only, your task is to determine the minimum number of operations required to make all characters in the string the same. In one operation, you can choose any character and change it to the other character (\'a\' to \'b\' or \'b\' to \'a\'). INPUT: The input contains a single integer T denoting the number of test cases. Each of the next T lines contains a single string S. OUTPUT: For each test case, output a single integer representing the minimum number of operations required. CONSTRAINTS: 1 ≤ T ≤ 10^5 1 ≤ |S| ≤ 10^6 The sum of the lengths of all strings in a single test run will not exceed 10^6. SAMPLE INPUT: 3 abb aaaa baaba SAMPLE OUTPUT: 1 0 2 Explanation: For the first input string \\"abb\\": - We can change the first \'a\' to \'b\', resulting in \\"bbb\\". This requires 1 operation. For the second input string \\"aaaa\\": - All characters are already the same, so no operations are needed. For the third input string \\"baaba\\": - We can change both \'a\' characters to \'b\', resulting in \\"bbbbb\\". This requires 2 operations. - Alternatively, we can change three \'b\' characters to \'a\', resulting in \\"aaaaa\\". However, the minimum number of operations is 2.","solution":"def min_operations_to_make_string_same(S): Returns the minimum number of operations required to make all characters in the string S the same. In one operation, you can choose any character and change it to the other character (\'a\' to \'b\' or \'b\' to \'a\'). :param S: Input string consisting of characters \'a\' and \'b\' only :return: Minimum number of operations required count_a = S.count(\'a\') count_b = len(S) - count_a return min(count_a, count_b) def process_test_cases(T, test_cases): Processes multiple test cases to determine the minimum number of operations required for each string. :param T: Number of test cases :param test_cases: List of input strings :return: List of results for each test case results = [] for S in test_cases: results.append(min_operations_to_make_string_same(S)) return results"},{"question":"You are given a sequence of non-negative integers. Your task is to reorder the elements into the lexicographically smallest sequence possible by performing at most one swap between any two elements. If no swap is necessary, the given sequence is already the smallest. The lexicographical order is the order in which words are listed in a dictionary: from left to right, character by character, where the characters are compared based on their ASCII values. Write a function `reorder_lexico` that receives a list of non-negative integers and returns the lexicographically smallest sequence possible by performing at most one swap. # Input - A list of `n` non-negative integers (0 ≤ ai ≤ 10^9, 1 ≤ n ≤ 10^5). # Output - A list representing the lexicographically smallest sequence achievable by performing at most one swap. # Example Input: [3, 2, 1] Output: [1, 2, 3] Input: [2, 3, 1] Output: [1, 3, 2] Input: [1, 20, 2] Output: [1, 2, 20] # Note In the first example, the smallest sequence can be achieved by swapping the first and last elements. In the second example, the smallest sequence is achieved by swapping the first and last elements as well. In the third example, swapping the second and third elements results in the smallest sequence.","solution":"def reorder_lexico(arr): Reorders the elements into the lexicographically smallest sequence possible by performing at most one swap between any two elements. n = len(arr) if n <= 1: return arr # Create a list of tuples (value, index) indexed_arr = [(value, idx) for idx, value in enumerate(arr)] # Sort the list by value to get the target lexicographical order sorted_arr = sorted(indexed_arr) # Find the first position where the array and the sorted array differ for i in range(n): if arr[i] != sorted_arr[i][0]: swap_to_idx = sorted_arr[i][1] break else: # If there is no such position, the array is already lexicographically smallest return arr # Perform the swap arr[i], arr[swap_to_idx] = arr[swap_to_idx], arr[i] return arr"},{"question":"Given a string of lowercase letters, write a function that finds the first non-repeating character in it and returns its index. If no non-repeating character exists, return -1. For example: ```python first_non_repeating_char_index(\'leetcode\') => 0 first_non_repeating_char_index(\'loveleetcode\') => 2 first_non_repeating_char_index(\'aabb\') => -1 ``` # Constraints: - The input string will only contain lowercase English letters and will have a length of at least 1 up to 10^5 characters.","solution":"def first_non_repeating_char_index(s): Returns the index of the first non-repeating character in the string s. If no non-repeating character exists, returns -1. char_count = {} # Count the occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the index of the first non-repeating character for index, char in enumerate(s): if char_count[char] == 1: return index # If no non-repeating character exists return -1"},{"question":"A factory has a conveyor belt system that moves items from one end to the other. The belt is divided into M cells (1 ≤ M ≤ 10^5) with varying heights. A worker wants to partition the conveyor belt into K contiguous sections (1 ≤ K ≤ M). His objective is to minimize the maximum difference in height (ΔH) between the highest and lowest cell within any section. ------ Input ------ The input consists of several test cases. Each test case requires two lines: - The first line contains two positive integers M and K. - The second line contains M positive integers representing the heights of the cells. The input terminates with M = K = 0. ------ Output ------ For each test case, output a single integer on a line, which is the minimum possible value of ΔH for the optimal partitioning. ----- Sample Input 1 ------ 7 3 10 5 7 9 12 6 3 6 2 1 2 3 4 5 6 0 0 ----- Sample Output 1 ------ 3 2 ----- Explanation ------ Explanation for the first sample test case: Partitioning the cells into [10,5], [7,9,12], [6,3] leads to the maximum differences in height of 5, 5, and 3 respectively. The minimum possible value of ΔH among these partitions is 3.","solution":"def minimize_max_difference(M, K, heights): def can_partition(max_diff): count, current_min, current_max = 1, heights[0], heights[0] for height in heights[1:]: current_min, current_max = min(current_min, height), max(current_max, height) if current_max - current_min > max_diff: count += 1 current_min, current_max = height, height if count > K: return False return True heights.sort() # Sorting for easier binary search range determination low, high = 0, max(heights) - min(heights) while low < high: mid = (low + high) // 2 if can_partition(mid): high = mid else: low = mid + 1 return low def process_input_and_output(input_lines): results = [] i = 0 while i < len(input_lines): M, K = map(int, input_lines[i].strip().split()) if M == 0 and K == 0: break heights = list(map(int, input_lines[i + 1].strip().split())) results.append(minimize_max_difference(M, K, heights)) i += 2 return results"},{"question":"Aaron has a peculiar hobby of knitting patterns on his weaving loom. He is particularly fascinated by symmetric patterns, especially palindromic ones. Recently, he came across a challenge to create a palindromic string using a limited set of characters with specific frequencies. A string is called **palindromic** if it reads the same backward as forward. For instance, \\"radar\\" and \\"level\\" are palindromic strings. Aaron wants to know if it\'s possible to form at least one palindromic string with the characters and their frequencies given. Write a function `can_form_palindrome` that takes a dictionary `char_freq` where the keys are characters and the values are their respective frequencies. The function should return True if it\'s possible to form a palindromic string using all the characters exactly as per their given frequencies, or False otherwise. -----Input----- The input is a dictionary `char_freq` where: - The keys are characters (each character is a single lowercase English letter). - The values are integers representing the frequency of the corresponding character. - `1 <= len(char_freq) <= 26` - `1 <= char_freq[char] <= 10^6` for every character in `char_freq`. -----Output----- The output should be a boolean value: - Print True if it\'s possible to form a palindromic string using the characters and their frequencies. - Print False otherwise. -----Examples----- ```python # Example 1 char_freq = {\'a\': 3, \'b\': 3} # Since we can form \\"abccba\\" which is a palindrome. print(can_form_palindrome(char_freq)) # Should output: True # Example 2 char_freq = {\'a\': 3, \'b\': 2} # Since we can form \\"abcba\\" which is a palindrome. print(can_form_palindrome(char_freq)) # Should output: True # Example 3 char_freq = {\'a\': 2, \'b\': 1, \'c\': 2} # Cannot form any palindrome, as \'b\' cannot be placed in the middle. print(can_form_palindrome(char_freq)) # Should output: False # Example 4 char_freq = {\'a\': 1} # A single character is always a palindrome. print(can_form_palindrome(char_freq)) # Should output: True ```","solution":"def can_form_palindrome(char_freq): Determines if it is possible to form a palindromic string using the characters and their frequencies given. Args: char_freq (dict): A dictionary where keys are characters and values are their frequencies. Returns: bool: True if a palindromic string can be formed, otherwise False. odd_count = 0 for freq in char_freq.values(): if freq % 2 != 0: odd_count += 1 # For a string to be palindromic, at most one character can have an odd frequency return odd_count <= 1"},{"question":"You are working on a project to index books in a digital library. The library needs to efficiently search for phrases within the texts of the books. To accomplish this, you decide to build a suffix array for each book. A suffix array is an array of integers giving the starting positions of suffixes of a string in lexicographical order. Write a function to construct the suffix array for a given string. # Input - A single string `s` of length `n` containing only lowercase English letters (`1 ≤ n ≤ 100,000`). # Output - The suffix array of the string `s` as a list of integers. # Example Input ``` banana ``` Output ``` [5, 3, 1, 0, 4, 2] ``` # Explanation For the string \\"banana\\": 0: \\"banana\\" 1: \\"anana\\" 2: \\"nana\\" 3: \\"ana\\" 4: \\"na\\" 5: \\"a\\" Sorting the suffixes in lexicographical order: \\"a\\" -> index 5 \\"ana\\" -> index 3 \\"anana\\" -> index 1 \\"banana\\" -> index 0 \\"na\\" -> index 4 \\"nana\\" -> index 2 Thus, the suffix array is `[5, 3, 1, 0, 4, 2]`. # Note To achieve this efficiently, you might want to use advanced sorting techniques like radix sort, or use a combination of suffix sorting algorithms. Ensure that your implementation runs efficiently within time constraints for the given input size.","solution":"def build_suffix_array(s): Constructs the suffix array for the given string s. :param s: A string containing only lowercase English letters (1 ≤ len(s) ≤ 100,000) :returns: A list of integers representing the suffix array of the string # Naive approach using sorted with key set as suffix string suffixes = [(s[i:], i) for i in range(len(s))] suffixes.sort() suffix_array = [suffix[1] for suffix in suffixes] return suffix_array # Example usage: # print(build_suffix_array(\\"banana\\")) # Output: [5, 3, 1, 0, 4, 2]"},{"question":"You are given a tree with N nodes rooted at node 1, and each node has a unique value assigned to it. A tree is a connected acyclic graph. Your task is to process Q queries of two types: 1. `1 X K` - Update the value of node X to K. 2. `2 X` - Find the maximum value in the subtree rooted at node X. Input The first line contains a single integer N (1 ≤ N ≤ 10^5), the number of nodes in the tree. The second line contains N integers representing the values assigned to each node (1-indexed). Each of the next N-1 lines contains two integers U and V (1 ≤ U, V ≤ N), indicating there is an undirected edge between nodes U and V. The next line contains a single integer Q (1 ≤ Q ≤ 10^5), the number of queries. Each of the next Q lines describes a query of one of the two types mentioned above. Output For each query of the second type, output the maximum value in the subtree rooted at the given node. Examples Input ``` 5 5 3 8 6 1 1 2 1 3 3 4 3 5 4 2 3 1 3 10 2 1 1 1 2 ``` Output ``` 8 10 ``` Note In the example, the initial values are [5, 3, 8, 6, 1] with the tree edges given. Here is the breakdown of the queries: 1. `2 3` - The maximum value in the subtree rooted at node 3 is 8. 2. `1 3 10` - Update the value of node 3 to 10. The values are now [5, 3, 10, 6, 1] 3. `2 1` - The maximum value in the subtree rooted at node 1 (which includes all nodes) is 10. 4. `1 1 2` - Update the value of node 1 to 2. The values are now [2, 3, 10, 6, 1].","solution":"from collections import defaultdict import sys sys.setrecursionlimit(200000) class Tree: def __init__(self, n, values): self.n = n self.values = values self.graph = defaultdict(list) self.subtree_values = [0] * (n + 1) self.max_subtree = [0] * (n + 1) def add_edge(self, u, v): self.graph[u].append(v) self.graph[v].append(u) def dfs(self, node, parent): self.subtree_values[node] = self.values[node-1] max_value = self.subtree_values[node] for neighbor in self.graph[node]: if neighbor == parent: continue self.dfs(neighbor, node) max_value = max(max_value, self.max_subtree[neighbor]) self.max_subtree[node] = max_value def update(self, x, k): self.values[x-1] = k self.dfs(1, -1) def query(self, x): return self.max_subtree[x] def process_queries(N, values, edges, queries): tree = Tree(N, values) for u, v in edges: tree.add_edge(u, v) tree.dfs(1, -1) result = [] for query in queries: if query[0] == 1: tree.update(query[1], query[2]) elif query[0] == 2: result.append(tree.query(query[1])) return result"},{"question":"Write a function that takes an integer n and returns a string representing the sequence of the first n Collatz numbers. The Collatz conjecture is a sequence defined as follows: 1. Start with any positive integer n. 2. Then each term is obtained from the previous term as follows: - If the previous term is even, the next term is one half of the previous term. - If the previous term is odd, the next term is 3 times the previous term plus 1. 3. The conjecture is that no matter what value of n, the sequence will always reach 1. Your task is to generate the Collatz sequence starting from n and continuing until you reach 1. The output should be a string of numbers separated by commas. # Input - The function takes a single integer n (1 ≤ n ≤ 1000). # Output - Return a string containing the sequence of Collatz numbers, separated by commas. # Example ```python collatz_sequence(6) ``` Output: ``` \\"6,3,10,5,16,8,4,2,1\\" ``` ```python collatz_sequence(11) ``` Output: ``` \\"11,34,17,52,26,13,40,20,10,5,16,8,4,2,1\\" ```","solution":"def collatz_sequence(n): Generates the Collatz sequence starting from n and continuing until reaching 1. Parameters: n (int): The starting positive integer (1 ≤ n ≤ 1000). Returns: str: A string of the Collatz sequence numbers separated by commas. sequence = [] while n != 1: sequence.append(n) if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 sequence.append(1) # append the last number 1 return \',\'.join(map(str, sequence))"},{"question":"Given an integer `n`, your task is to construct an `n x n` grid where each cell contains a positive integer such that the grid contains each integer from 1 to n exactly once. Additionally, for each positive integer k starting from 1 up to n, the integer k should appear exactly k times consecutively in any direction (horizontally or vertically). Note: Consecutive integers mean integers that come one after another in the grid in the same row or column, without any interruption. # Input - A single integer `n` (1 le n le 20) # Output - Print the n x n grid where each cell contains positive integers meeting the given condition. If there are multiple valid grids, print any one of them. # Example Input ``` 3 ``` Output ``` 1 1 2 1 2 3 2 3 3 ``` Input ``` 4 ``` Output ``` 1 1 2 2 1 3 3 3 2 3 4 4 2 4 4 4 ``` # Explanation For `n = 3`, the integer 1 should appear exactly once, integer 2 should appear exactly 2 times consecutively (either horizontally or vertically), and integer 3 should appear exactly 3 times consecutively (either horizontally or vertically). For `n = 4`, the integer 1 should appear exactly once, integer 2 should appear exactly 2 times consecutively (either horizontally or vertically), integer 3 should appear exactly 3 times consecutively (in any direction), and integer 4 should appear exactly 4 times consecutively (in any direction). You have to ensure that each integer from 1 to n appears exactly k times consecutively for the corresponding number k. If there are multiple solutions, any correct solution will be accepted.","solution":"def construct_grid(n): def is_valid(x, y, grid): return 0 <= x < n and 0 <= y < n and grid[x][y] == 0 grid = [[0]*n for _ in range(n)] for num in range(1, n+1): placed = False for i in range(n): if placed: break for j in range(n): if placed: break # Try Horizontal Placement if j + num <= n and all(grid[i][j+k] == 0 for k in range(num)): for k in range(num): grid[i][j+k] = num placed = True # Try Vertical Placement elif i + num <= n and all(grid[i+k][j] == 0 for k in range(num)): for k in range(num): grid[i+k][j] = num placed = True return grid # Example usage n = 3 result = construct_grid(n) for row in result: print(\' \'.join(map(str, row)))"},{"question":"As a biologist, you are studying the interactions among different species in an ecosystem. Each species can either help or harm another species. You are given a list of interactions between pairs of species. An interaction can either be \\"help\\" or \\"harm\\". You want to determine the net effect of each species on every other species. The net effect of species A on species B is given by the difference between the number of times A helps B and the number of times A harms B. Write a program to calculate the net effects for a given set of interactions. -----Input----- The first line contains the number of interactions M (1 leq M leq 100). Each of the following M lines contains an interaction in the form of two species names (strings without spaces) and the type of interaction (either \\"help\\" or \\"harm\\"). -----Output----- Output a matrix of net effects where the cell at row i and column j contains the net effect of species i on species j. The species should appear in the output in the order they are first mentioned in the input. -----Examples----- Sample Input: 6 Lion Deer help Deer Grass help Grass Lion harm Lion Grass help Deer Lion harm Grass Deer help Sample Output: 0 1 1 -1 0 -1 -1 1 0 Explanation: - The first row represents the net effect of Lion on each species: - Lion on Lion: 0 - Lion on Deer: 1 (help) - 0 (harm) = 1 - Lion on Grass: 1 (help) - 0 (harm) = 1 - The second row represents the net effect of Deer on each species: - Deer on Lion: 0 (help) - 1 (harm) = -1 - Deer on Deer: 0 - Deer on Grass: 1 (help) - 0 (harm) = 1 - The third row represents the net effect of Grass on each species: - Grass on Lion: 0 (help) - 1 (harm) = -1 - Grass on Deer: 1 (help) - 0 (harm) = 1 - Grass on Grass: 0","solution":"def net_effects(M, interactions): species_index = {} index = 0 # Assigning an index to each species for inter in interactions: sp1, sp2, effect = inter if sp1 not in species_index: species_index[sp1] = index index += 1 if sp2 not in species_index: species_index[sp2] = index index += 1 n = len(species_index) net_matrix = [[0] * n for _ in range(n)] # Calculating net effects for inter in interactions: sp1, sp2, effect = inter if effect == \\"help\\": net_matrix[species_index[sp1]][species_index[sp2]] += 1 elif effect == \\"harm\\": net_matrix[species_index[sp1]][species_index[sp2]] -= 1 return net_matrix"},{"question":"A company requires a payment system that allows for secure and efficient processing of transactions. You are tasked with implementing a transaction validation function for individual purchases. Each transaction is represented by a dictionary with the following keys: - `amount` (a positive float representing the transaction amount) - `currency` (a string representing the currency of the transaction, e.g., \\"USD\\", \\"EUR\\", \\"GBP\\", etc.) - `card_number` (a string representing the credit card number) - `expiry_date` (a string in the format \\"MM/YY\\" representing the card\'s expiration date) - `cvv` (a string representing the 3-digit CVV code on the card) Your task is to implement a function `validate_transaction(transaction)` that takes a single transaction dictionary and returns True if the transaction is valid according to the following rules: 1. The `amount` should be greater than 0. 2. The `currency` should be one of the accepted currencies: [\\"USD\\", \\"EUR\\", \\"GBP\\"]. 3. The `card_number` should be a string of exactly 16 digits. 4. The `expiry_date` should be a valid date in the future. 5. The `cvv` should be a string of exactly 3 digits. Examples: ``` transaction1 = { \\"amount\\": 100.0, \\"currency\\": \\"USD\\", \\"card_number\\": \\"1234567812345678\\", \\"expiry_date\\": \\"12/25\\", \\"cvv\\": \\"123\\" } transaction2 = { \\"amount\\": -50.0, \\"currency\\": \\"USD\\", \\"card_number\\": \\"1234567812345678\\", \\"expiry_date\\": \\"10/20\\", \\"cvv\\": \\"123\\" } validate_transaction(transaction1) # should return True validate_transaction(transaction2) # should return False because amount is negative and expiry_date is in the past ```","solution":"from datetime import datetime def validate_transaction(transaction): Validates a transaction based on the given rules. # Check amount is greater than 0 if transaction[\'amount\'] <= 0: return False # Check currency is in accepted list accepted_currencies = [\\"USD\\", \\"EUR\\", \\"GBP\\"] if transaction[\'currency\'] not in accepted_currencies: return False # Check card_number is a string of exactly 16 digits if not (isinstance(transaction[\'card_number\'], str) and len(transaction[\'card_number\']) == 16 and transaction[\'card_number\'].isdigit()): return False # Check expiry_date is a valid future date try: expiry = datetime.strptime(transaction[\'expiry_date\'], \\"%m/%y\\") if expiry < datetime.now(): return False except ValueError: return False # Check cvv is a string of exactly 3 digits if not (isinstance(transaction[\'cvv\'], str) and len(transaction[\'cvv\']) == 3 and transaction[\'cvv\'].isdigit()): return False return True"},{"question":"Given a string s, you need to split it into as few substrings as possible such that each substring is a palindrome. Return the minimum number of substrings required. Example 1: Input: s = \\"aab\\" Output: 1 Explanation: \\"aa\\" and \\"b\\" are palindromes, so the answer is 1. Example 2: Input: s = \\"abc\\" Output: 2 Explanation: \\"a\\", \\"b\\", and \\"c\\" are palindromes, so the answer is 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minPalindromicCuts() which takes the string s as a parameter and returns the minimum number of substring cuts needed. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 ≤ |s| ≤ 2000 s contains only lowercase English letters.","solution":"def minPalindromicCuts(s): n = len(s) # Check if a substring is a palindrome def is_palindrome(s, start, end): while start < end: if s[start] != s[end]: return False start += 1 end -= 1 return True # DP table to store minimum cuts dp = [0] * n for i in range(n): if is_palindrome(s, 0, i): dp[i] = 0 else: min_cuts = float(\'inf\') for j in range(i): if is_palindrome(s, j + 1, i): min_cuts = min(min_cuts, dp[j] + 1) dp[i] = min_cuts return dp[-1]"},{"question":"A company is interested in analyzing the friendliness of its internal communication. They define friendliness as the number of pairs of employees who have sent direct messages to each other sequentially in a particular order. You are given n employees, each with a unique employee ID ranging from 1 to n, and a list of direct messages exchanged between the employees. You need to determine the number of unique friendly pairs. A pair of employees (i, j) is considered friendly if employee i has sent a message to employee j, and employee j has sent a message to employee i. -----Input----- The first line contains a single integer t (1 le t le 10000) — the number of test cases. For each test case: - The first line contains an integer n (2 le n le 1000) — the number of employees. - The second line contains an integer m (1 le m le 10000) — the number of messages exchanged. - The following m lines each contain two integers u and v (1 le u, v le n, u neq v) which denote that employee u has sent a direct message to employee v. -----Output----- For each test case, print a single integer representing the number of unique friendly pairs of employees. -----Examples----- Input 2 3 3 1 2 2 3 2 1 4 4 1 2 2 1 3 4 4 3 Output 1 2 -----Note----- In the first example, the only friendly pair is (1, 2) because both employees have sent messages to each other. In the second example, the unique friendly pairs are (1, 2) and (3, 4) because both sets of employees have exchanged messages mutually.","solution":"def count_friendly_pairs(test_cases): Given multiple test cases of employees and direct messages, return the count of friendly pairs for each test case. results = [] for case in test_cases: n, m, messages = case msg_set = set() friendly_pairs = set() for u, v in messages: if (v, u) in msg_set: friendly_pairs.add(tuple(sorted((u, v)))) msg_set.add((u, v)) results.append(len(friendly_pairs)) return results # Example usage # test_cases = [ # (3, 3, [(1, 2), (2, 3), (2, 1)]), # (4, 4, [(1, 2), (2, 1), (3, 4), (4, 3)]) #] # print(count_friendly_pairs(test_cases)) # Output: [1, 2]"},{"question":"RGB Representation You are working on a program that deals with colors represented in the RGB format. Each color in this format is represented by three integers r, g, and b, which correspond to the levels of red, green, and blue in the color. Each of these integers can be in the range from 0 to 255, inclusive. As a programmer, you are required to compute the lightness of a color using the formula: [ text{Lightness} = frac{max(r, g, b) + min(r, g, b)}{2} ] Your task is to write a program that, given multiple sets of RGB values, calculates the lightness for each set of values and prints the result. Input The input consists of multiple datasets. Each dataset is in one line, which consists of three integers r, g, and b separated by a space. For each line, 0 ≤ r, g, b ≤ 255 holds. The end of the input is specified by \\"end\\". Output For each dataset, output the lightness as an integer in a line. Sample Input ``` 255 0 0 0 255 0 0 0 255 220 220 220 128 128 128 0 0 0 255 255 255 end ``` Output for the Sample Input ``` 127 127 127 220 128 0 255 ``` Example Input ``` 255 0 0 0 255 0 0 0 255 220 220 220 128 128 128 0 0 0 255 255 255 end ``` Output ``` 127 127 127 220 128 0 255 ```","solution":"def calculate_lightness(rgb_values): Given a list of strings representing RGB values, calculate the lightness for each set. lightness_values = [] for values in rgb_values: if values.strip().lower() == \'end\': break r, g, b = map(int, values.split()) lightness = (max(r, g, b) + min(r, g, b)) // 2 lightness_values.append(lightness) return lightness_values"},{"question":"You are working on a simple chat application that requires filtering out disproportionately lengthy messages. A typical message should be concise and to the point, so any message exceeding a specific word count should trigger a warning. Write a function `flag_long_message(message, limit)` that takes a string `message` and an integer `limit` as inputs. The function should return `True` if the number of words in the message exceeds the provided `limit`, otherwise it should return `False`. For the purposes of this function: - Words are sequences of characters separated by spaces. - Ignore any punctuation. Example usage: ```python flag_long_message(\\"Hello there! How are you today?\\", 5) # Returns False flag_long_message(\\"This message is definitely too long to be considered concise and should be flagged!\\", 10) # Returns True ```","solution":"def flag_long_message(message, limit): Returns True if the number of words in the message exceeds the limit. Returns False otherwise. :param message: str, the message to analyze :param limit: int, the maximum allowable word count :return: bool words = message.split() return len(words) > limit"},{"question":"Given an array of integers, write a function to rearrange them into their lexicographically next greater permutation. The replacement must be in-place and use only constant extra memory. The function should re-arrange the array to the highest possible order if it is currently set to the largest permutation. Example - Input: `[1, 2, 3]` - Output: `[1, 3, 2]` - Input: `[3, 2, 1]` - Output: `[1, 2, 3]` - Input: `[1, 1, 5]` - Output: `[1, 5, 1]` Explanation The next permutation of `[1, 2, 3]` is `[1, 3, 2]` as it\'s the smallest lexicographical permutation greater than the current one. For `[3, 2, 1]`, the function should return `[1, 2, 3]` which is the smallest permutation. For `[1, 1, 5]`, the next permutation is `[1, 5, 1]`. Function Signature ```python def next_permutation(nums: List[int]) -> None: # Your implementation here ``` Notes The task checks for knowledge of permutation algorithms, in-place array manipulation, and understanding of lexicographical ordering. The implementation must handle arrays of different lengths and values efficiently.","solution":"from typing import List def next_permutation(nums: List[int]) -> None: Rearranges the array into the lexicographically next greater permutation of numbers. If such arrangement is not possible, it transforms it into the lowest possible order (i.e., sorted in ascending order). This must be done in-place. n = len(nums) if n <= 1: return # Step 1: Find the largest index k such that nums[k] < nums[k + 1]. If no such index exists, the permutation is the last permutation. k = n - 2 while k >= 0 and nums[k] >= nums[k + 1]: k -= 1 if k >= 0: # If such index exists # Step 2: Find the largest index l greater than k such that nums[k] < nums[l] l = n - 1 while nums[k] >= nums[l]: l -= 1 # Step 3: Swap the value of nums[k] with that of nums[l] nums[k], nums[l] = nums[l], nums[k] # Step 4: Reverse the sequence from nums[k + 1] to the end nums[k + 1:] = reversed(nums[k + 1:])"},{"question":"Given an array of integers, find the length of the longest subarray which is strictly increasing. A strictly increasing subarray is a contiguous subarray where each subsequent element is greater than the previous one. Example 1: Input: [1, 3, 5, 4, 7] Output: 3 Explanation: The longest strictly increasing subarray is [1, 3, 5], with length 3. Example 2: Input: [2, 2, 2, 2, 2] Output: 1 Explanation: The longest strictly increasing subarray is [2] with length 1 (since there is no strictly increasing subarray longer than 1). Note: - 1 <= array.length <= 10000 - -10^6 <= array[i] <= 10^6","solution":"def longest_increasing_subarray(arr): Returns the length of the longest strictly increasing subarray. if not arr: return 0 max_len = 1 current_len = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"Maze Runner A group of explorers is lost in a maze represented as a grid. Each cell of the grid can be either open (\'.\') or blocked (\'#\'). The explorers can only move up, down, left, or right, and they cannot pass through blocked cells. The task is to determine the minimum number of steps required for the explorers to move from the starting position to the target position. If the target is unreachable, the function should return -1. # Input The input is given in the following format: ``` N M maze0 maze1 ... mazeN-1 x_start y_start x_target y_target ``` - The first line contains two integers `N` and `M` denoting the number of rows and columns of the maze. - The next `N` lines each contain a string of length `M` representing the maze, where \'.\' indicates an open cell and \'#\' indicates a blocked cell. - The second from last line contains two integers `x_start` and `y_start` indicating the starting position of the explorers. - The last line contains two integers `x_target` and `y_target` indicating the target position of the explorers. # Output Output a single integer representing the minimum number of steps required to move from the starting position to the target position. If it is impossible to reach the target, output `-1`. # Constraints - 2 ≤ N, M ≤ 50 - 0 ≤ x_start, y_start, x_target, y_target < N, M - The starting and target cells are guaranteed to be open (\'.\'). # Examples Example 1 Input: ``` 5 5 ..... .#. .#.#. .#... ..... 0 0 4 4 ``` Output: ``` 8 ``` Example 2 Input: ``` 4 4 #... #. .#.. ...# 0 0 3 3 ``` Output: ``` -1 ``` # Note In Example 1, the minimum path from (0, 0) to (4, 4) goes as follows: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (4, 1) -> (4, 2) -> (4, 3) -> (4, 4) with a total of 8 steps. In Example 2, there is no path from (0, 0) to (3, 3) since movements are blocked by walls, thus the output is -1.","solution":"from collections import deque def min_steps_to_target(n, m, maze, x_start, y_start, x_target, y_target): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(x_start, y_start, 0)]) # (x, y, steps) visited = set() visited.add((x_start, y_start)) while queue: x, y, steps = queue.popleft() if x == x_target and y == y_target: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 # Target not reachable"},{"question":"You are given an n x n grid filled initially with zeros. There are m operations, and each operation is defined by a rectangle with its top-left and bottom-right corners, as well as an integer value v. Each operation means that you should add v to each cell within the given rectangle (including the boundaries of the rectangle). After performing all the operations, you should determine the minimum and the maximum values in the resulting grid. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100000) — the size of the grid and the number of operations. The next m lines each contain five integers x1, y1, x2, y2, and v (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ n, 1 ≤ v ≤ 10^6) which represent an operation that adds the value v to each cell in the subgrid defined by its top-left corner (x1, y1) and bottom-right corner (x2, y2). Output Print two integers - the minimum and the maximum values in the resulting grid. Example Input 3 2 1 1 2 2 3 2 2 3 3 5 Output 0 8 Note In the first example, the operations are as follows: - Add 3 to the subgrid from (1,1) to (2,2) - Add 5 to the subgrid from (2,2) to (3,3) The resulting grid after the operations looks like this: 3 3 0 3 8 5 0 5 5 The minimum value in the grid is 0 and the maximum value is 8.","solution":"def apply_operations(n, m, operations): # Create a grid initialized with 0s grid = [[0] * n for _ in range(n)] # Apply each operation to the grid for op in operations: x1, y1, x2, y2, v = op for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): grid[i][j] += v # Find the minimum and maximum value in the grid min_value = float(\'inf\') max_value = float(\'-inf\') for row in grid: min_value = min(min_value, min(row)) max_value = max(max_value, max(row)) return min_value, max_value"},{"question":"--- Given an array of integers, return the length of the longest contiguous subarray that contains at most `k` distinct integers. For example: ``` Input: nums = [1, 2, 1, 2, 3], k = 2 Output: 4 Explanation: The longest subarray with at most 2 distinct integers is [1, 2, 1, 2], with length 4. ``` ``` Input: nums = [1, 2, 1, 3, 4], k = 3 Output: 4 Explanation: The longest subarray with at most 3 distinct integers is [1, 2, 1, 3], with length 4. ``` Constraints: - 1 <= nums.length <= 10^5 - 1 <= nums[i] <= 10^9 - 1 <= k <= nums.length ```python def longest_subarray_with_k_distinct(nums, k): # Your code here ```","solution":"def longest_subarray_with_k_distinct(nums, k): from collections import defaultdict if k == 0: return 0 left = 0 max_length = 0 char_count = defaultdict(int) for right in range(len(nums)): char_count[nums[right]] += 1 while len(char_count) > k: char_count[nums[left]] -= 1 if char_count[nums[left]] == 0: del char_count[nums[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"In a game, you are controlling a character that moves along a grid. The grid is an n x m matrix, where each cell can either be empty (denoted by \'.\') or blocked (denoted by \'#\'). Your task is to determine the number of distinct paths from the top-left corner of the grid (starting at cell (1, 1)) to the bottom-right corner of the grid (destination cell (n, m)). You can only move to the right (R) or down (D) from the current cell. You cannot move into a cell that is blocked. Given the configuration of the grid, count the number of unique paths from the start to the destination. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. The next n lines each contain m characters (\'.\' or \'#\'), representing the grid. Output Print a single integer, the number of distinct paths from (1, 1) to (n, m). If no such path exists, print 0. Examples Input 3 3 . . . . # . . . . Output 2 Input 2 2 . # . . Output 1 Input 2 2 # . . . Output 0","solution":"def count_paths(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] # Example usage; this function would typically be called with proper inputs: # n, m = 3, 3 # grid = [ # [\'.\', \'.\', \'.\'], # [\'.\', \'#\', \'.\'], # [\'.\', \'.\', \'.\'] # ] # print(count_paths(n, m, grid)) # Output: 2"},{"question":"Aging Bottles You are given a collection of wine bottles, each with a distinct aging period. The aging period is the number of years each bottle needs to stay in the cellar before it reaches its optimal taste. Dr. Bacchus, an esteemed wine connoisseur, has recently acquired a new cellar with `p` boxes. He wants to stock the cellar in such a way that he can drink one perfectly aged bottle every year for as many consecutive years as possible, starting from the first year he starts drinking. For example, if Dr. Bacchus stocks bottles with aging periods 1, 2, and 3, he can drink a perfectly aged bottle in the 1st, 2nd, and 3rd years. However, if he only stocks bottles with aging periods 1 and 3, he can drink a perfectly aged bottle in the 1st year, but there will be no perfectly aged bottle for the 2nd year. Dr. Bacchus is very meticulous and wants to find the maximum number of consecutive years he can drink perfectly aged wine starting from the first year, given the sizes of the boxes he can use. You need to determine how many consecutive years Dr. Bacchus can enjoy a perfectly aged bottle of wine if he uses all the boxes this year to stock the cellar. # Input The input consists of multiple datasets, each in the following format: `p n` An integer `p` (1 ≤ p ≤ 100) represents the shortest aging period (in years) of the wine bottles Dr. Bacchus can stock in his cellar. An integer `n` (1 ≤ n ≤ 500,000) represents the number of boxes in the cellar. The input ends with a line containing two zeros. # Output For each dataset, output an integer representing the maximum number of consecutive years Dr. Bacchus can drink a perfectly aged bottle, starting from the first year. # Sample Input ``` 3 1 3 4 10 20 100 50 1 10 0 0 ``` # Sample Output ``` 1 4 10 50 10 ``` # Example Input ``` 3 1 3 4 10 20 100 50 1 10 0 0 ``` Output ``` 1 4 10 50 10 ```","solution":"def max_consecutive_years(p, n): This function computes the maximum number of consecutive years Dr. Bacchus can drink a perfectly aged bottle of wine starting from the first year. p is the shortest aging period and n is the number of boxes in the cellar. return min(p, n) def process_input(input_data): result = [] for line in input_data.split(\'n\'): p, n = map(int, line.split()) if p == 0 and n == 0: break result.append(max_consecutive_years(p, n)) return result"},{"question":"Problem text... Write a function that processes customer purchase orders and generates a summary report based on the quantities of items ordered. Each order contains a list of items and the quantity for each item. Identify duplicated items in the same order, combine their quantities, and then generate a summary that includes the total quantities of each unique item across all orders. Input The input will include multiple purchase orders. Each order consists of a list of item-quantity pairs in the format \\"item_name quantity\\". Orders are separated by a new line, and individual pairs within an order are separated by commas. The sequence of orders will be terminated by a blank line. Output For each item that appears in the orders, output the item name followed by the total quantity across all orders. Sort the items alphabetically by item name in the output. Example Input: apple 4,banana 2,apple 1 orange 3,apple 2,banana 2 grape 5,orange 2 Output: apple 7 banana 4 grape 5 orange 5","solution":"def process_orders(orders): Processes customer purchase orders and generates a summary report based on the quantities of items ordered. Args: orders (list of str): A list of string orders, where each order is a comma-separated string of \\"item_name quantity\\". Returns: dict: A dictionary where keys are item names and values are total quantities across all orders, sorted alphabetically by item name. from collections import defaultdict item_totals = defaultdict(int) for order in orders: if not order.strip(): # Skip any blank lines continue items = order.split(\',\') for item in items: item_name, quantity = item.split() item_totals[item_name] += int(quantity) # Create a sorted dictionary by keys sorted_item_totals = dict(sorted(item_totals.items())) return sorted_item_totals"},{"question":"Given a list of integers nums, you have to answer several queries on the list. Each query provides two indices, L and R, and your task is to determine the total sum of the subarray from index L to index R (inclusive) of the original list. Example 1: Input: nums = [1, 2, 3, 4, 5], Query = {{1, 3},{2, 4},{1, 5}} Output: {6, 9, 15} Explanation: For the first query sum of elements from [1, 3] is 1 + 2 + 3 = 6. For the second query sum of elements from [2, 4] is 2 + 3 + 4 = 9. For the third query sum of elements from [1, 5] is 1 + 2 + 3 + 4 + 5 = 15. Your Task: You don\'t need to read or print anything. Your task is to complete the function solveQueries() which takes nums and Query as input parameters and returns a list containing the sum for each query. Expected Time Complexity: O(n + q) where n is the length of the nums and q is the number of queries. Expected Space Complexity: O(n) Constraints: 1 <= |nums| <= 10^5 1 <= No of Queries <= 10^4 1 <= L_i <= R_i <= |nums|","solution":"def solveQueries(nums, queries): Returns the sum of subarrays specified by the given queries. Parameters: nums (list): List of integers queries (list of tuple): List of tuples where each tuple contains two indices (L, R) Returns: list: List containing the sum for each query # Create a prefix sum array prefix_sum = [0] * (len(nums) + 1) for i in range(1, len(nums) + 1): prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1] # Create a list to store the results for each query result = [] for L, R in queries: # Adjusting indices since queries are 1-based and prefix_sum is 0-based sum_subarray = prefix_sum[R] - prefix_sum[L - 1] result.append(sum_subarray) return result"},{"question":"You are given an integer N and an array A of N integers. Your task is to find the longest subsequence in A such that the difference between the maximum and minimum elements in the subsequence is at most 1. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}. ------ Output ------ For each test case, print a single line containing the length of the longest subsequence that meets the condition. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 0 ≤ A_{i} ≤ 10^{6} for each valid i ------ Sample Input ------ 2 5 1 2 2 3 1 5 4 6 5 3 3 ------ Sample Output ------ 4 3","solution":"def longest_subsequence_with_max_diff_one(arr): Returns the length of the longest subsequence with the difference between the maximum and minimum elements at most 1. from collections import Counter if not arr: return 0 counts = Counter(arr) max_length = 0 for num in counts: # Length of subsequence made of `num` and `num + 1` current_length = counts[num] + counts.get(num + 1, 0) max_length = max(max_length, current_length) return max_length def solve(test_cases): results = [] for n, a in test_cases: results.append(longest_subsequence_with_max_diff_one(a)) return results"},{"question":"Given a string `S` containing only digits, your task is to determine if you can make the string a palindrome by rearranging its digits. A palindrome is a string that reads the same forward and backward. # Input: - The first line contains an integer `T` (1 ≤ T ≤ 10^5), the number of test cases. - Each of the next `T` lines contains a single string `S` (1 ≤ |S| ≤ 10^6), which consists only of digits. # Output: For each test case, print \\"YES\\" if it is possible to rearrange the digits of `S` to form a palindrome. Otherwise, print \\"NO\\". # Constraints: - The length of string `S` in each test case is between 1 and 1,000,000. - The sum of lengths of all strings in all test cases does not exceed 10^7. # Sample Input: ``` 3 112233 123 445544 ``` # Sample Output: ``` YES NO YES ``` # Explanation: - For the first string \\"112233\\", it can be rearranged into \\"123321\\" which is a palindrome. - For the second string \\"123\\", it cannot be rearranged to form a palindrome. - For the third string \\"445544\\", it is already a palindrome.","solution":"from collections import Counter def can_form_palindrome(s): Determines if the digits in the string s can be rearranged to form a palindrome. digit_counts = Counter(s) # A string can form a palindrome if at most one character has an odd count odd_count = sum(1 for count in digit_counts.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def solve(test_cases): results = [] for s in test_cases: results.append(can_form_palindrome(s)) return results"},{"question":"You are given a string consisting of lowercase letters. Your task is to find the most frequent character in the string. If there is a tie, return the character that appears first in the string. If the string is empty, return an empty string. For example: ```python most_frequent_char(\\"abracadabra\\") = \\"a\\" most_frequent_char(\\"zzzzzz\\") = \\"z\\" most_frequent_char(\\"aabbcc\\") = \\"a\\" most_frequent_char(\\"\\") = \\"\\" ``` Function Signature: ```python def most_frequent_char(s: str) -> str: # Your code here ```","solution":"def most_frequent_char(s: str) -> str: Finds the most frequent character in the string. In case of a tie, returns the character that appears first in the string. If the string is empty, returns an empty string. if not s: return \\"\\" char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 most_frequent = max(char_count, key=lambda k: (char_count[k], -s.index(k))) return most_frequent"},{"question":"Description In a small village, there is a popular bus service with fixed routes of varying lengths. The bus company wants to optimize the schedule by ensuring that each bus route covers at least one bus stop. The bus routes are represented as an array where each element in the array denotes the number of bus stops on that particular route. The company wants to find the maximum number of bus stops covered in a single round trip provided that the round trip starts and ends at the same bus stop. Given an array of integers that represents the bus routes where each element specifies the number of bus stops on that route, your task is to write a program to determine the maximum number of bus stops covered in any round trip. Input The input consists of multiple test cases. Each test case begins with an integer N that denotes the number of bus routes (1 ≤ N ≤ 10^5). The following N integers denote the number of bus stops on each route (1 ≤ bus stops ≤ 10^4). The input ends with a test case of N = 0. Output For each test case, output the maximum number of bus stops covered in a single round trip. Example Input 4 1 2 3 4 3 5 9 2 5 1 1 1 1 1 0 Output 4 16 5","solution":"def max_bus_stops_per_round_trip(test_cases): Returns the max number of bus stops covered in a single round trip for each test case. results = [] for routes in test_cases: if routes: results.append(sum(routes)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') test_cases = [] i = 0 while i < len(lines): N = int(lines[i]) if N == 0: break routes = list(map(int, lines[i + 1].split())) test_cases.append(routes) i += 2 return test_cases"},{"question":"In a country, there are various cities connected by roads. The king has observed that some cities are more prone to attacks due to their strategic positions. In order to safeguard these cities, he has decided to place a certain number of guards in each city. The number of guards should be proportional to the city\'s vulnerability, which increases with the number of connecting roads. Given the number of cities and the list of roads connecting them, your task is to determine the minimum number of guards required in each city such that each city (except isolated ones) has at least one guard and every road is guarded by at least one city\'s guard along its path. The vulnerability of a city increases with the number of roads it is connected to. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of cities. The second line contains an integer m (0 ≤ m ≤ 200,000) — the number of roads connecting the cities. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating there is a road between city u and city v. Output Output n integers where the i-th integer represents the minimum number of guards required in the city i. If a city is not connected by any road, assign zero guards to it because it doesn\'t require protection in this context. Examples: Input 5 4 1 2 2 3 3 4 4 5 Output 1 2 2 2 1 Input 3 0 Output 0 0 0 Explanation In the first example, City 1 and City 5 each only need 1 guard because they are only connected by one road. City 2, City 3, and City 4 need more guards due to higher connections via roads. In the second example, all cities are isolated and hence do not require any guards.","solution":"def assign_guards(n, m, roads): This function determines the minimum number of guards required in each city. :param n: Integer - The number of cities. :param m: Integer - The number of roads. :param roads: List of tuples - Each tuple contains two integers representing the cities connected by a road. :return: List of integers where the i-th integer represent the number of guards required in city i+1. # Initialize the list for number of guards required in each city guards = [0] * n # Dictionary to keep track of each city\'s connections city_connections = {i: 0 for i in range(1, n + 1)} # Count the number of connections for each city for u, v in roads: city_connections[u] += 1 city_connections[v] += 1 # Assign guards based on the number of connections for city in range(1, n + 1): if city_connections[city] > 0: guards[city - 1] = city_connections[city] return guards"},{"question":"In a town, there are `n` houses aligned in a straight row, each with a certain amount of money stashed in it. An experienced thief wants to maximize the amount of money he can rob tonight. The only constraint the thief faces is that he cannot rob two consecutive houses, as it will alert the police. Given a list of integers representing the amount of money stashed in each house, write a function that determines the maximum amount of money the thief can rob without robbing two consecutive houses. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of houses. - The second line contains `n` integers `a_i` (0 ≤ a_i ≤ 10,000) — the amount of money stashed in the i-th house. # Output - Print a single integer — the maximum amount of money the thief can rob. # Function Signature ```python def maximum_robbed_amount(n: int, a: List[int]) -> int: pass ``` # Examples Example 1 **Input** ``` 4 1 2 3 1 ``` **Output** ``` 4 ``` **Explanation**: The thief can rob houses with amounts 1 and 3. Example 2 **Input** ``` 5 2 7 9 3 1 ``` **Output** ``` 12 ``` **Explanation**: The thief can rob houses with amounts 2, 9, and 1. # Note The thief must calculate the maximum amount of money he can rob without robbing two consecutive houses. In the first example, the best strategy is to rob the first and third houses, which gives a total of 1 + 3 = 4. In the second example, the best strategy is to rob the second, third, and fifth houses, which gives a total of 7 + 9 + 1 = 17, but since the third and fifth houses are consecutive, the correct strategy is robbing the first, third, and fifth house which gives a maximum of 2 + 9 + 1 = 12.","solution":"from typing import List def maximum_robbed_amount(n: int, a: List[int]) -> int: if n == 0: return 0 elif n == 1: return a[0] elif n == 2: return max(a[0], a[1]) dp = [0] * n dp[0] = a[0] dp[1] = max(a[0], a[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + a[i]) return dp[-1]"},{"question":"Given an inventory management system for a bookstore, you need to implement a function that will keep track of book stocks and handle requests to purchase books. Each request will consist of a book ID and the quantity desired. The function needs to update the inventory accordingly and return the outcome of each purchase request. The bookstore has a policy that only allows books that are in stock to be purchased. If a request asks for more copies than available, the purchase will be denied for that book. -----Input----- The input is given in the following format: 1. Lines of positive integers until EOF where each line describes an inventory update or a purchase request with the following formats: - Inventory update: `U book_id quantity` - Purchase request: `P book_id quantity` 2. book_id is a positive integer. 3. quantity is a positive integer. -----Output----- For each purchase request, print one of the following lines: - `book_id successful` if the requested number of copies were successfully purchased. - `book_id out of stock` if the book is not available in inventory. - `book_id insufficient stock` if the requested quantity is greater than the available stock. -----Constraints----- - 1 ≤ book_id ≤ 10^6 - 1 ≤ quantity ≤ 10^3 -----Example----- Input: U 101 3 U 202 5 P 101 2 P 202 6 P 303 1 P 202 3 Output: 101 successful 202 insufficient stock 303 out of stock 202 successful Note: In the example above, the book with ID 101 initially has 3 copies. After a successful purchase of 2 copies, there is 1 copy left. The book with ID 202 initially has 5 copies. The request for 6 copies fails but the subsequent request for 3 copies succeeds. The book with ID 303 was never in stock and hence the purchase fails.","solution":"def process_requests(input_lines): Processes inventory updates and purchase requests for a bookstore. Args: input_lines (list of str): Each line describes an inventory update or a purchase request. - Inventory update: \'U book_id quantity\' - Purchase request: \'P book_id quantity\' Returns: list of str: The outcomes of the purchase requests with each line being one of: \'book_id successful\', \'book_id out of stock\', and \'book_id insufficient stock\'. inventory = {} results = [] for line in input_lines: parts = line.split() command, book_id, quantity = parts[0], int(parts[1]), int(parts[2]) if command == \'U\': # Inventory update if book_id in inventory: inventory[book_id] += quantity else: inventory[book_id] = quantity elif command == \'P\': # Purchase request if book_id not in inventory: results.append(f\'{book_id} out of stock\') elif inventory[book_id] < quantity: results.append(f\'{book_id} insufficient stock\') else: inventory[book_id] -= quantity results.append(f\'{book_id} successful\') return results"},{"question":"You are working on an e-commerce website where users can create and update their shopping carts. You need to implement a system that can track the current state of each user\'s cart and handle a series of actions. The actions include adding items to the cart, removing items, and querying the total cost of the items in the cart. A cart is represented as a list of items, where each item has a name, a price, and a quantity. The actions are given as a series of commands, where each command must be executed sequentially. You need to process these commands and output the results of the queries. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of actions. The next n lines contain the actions. Each action is in one of three formats: - \\"ADD item_name price quantity\\" (1 ≤ price ≤ 1000, 1 ≤ quantity ≤ 100) - \\"REMOVE item_name quantity\\" (1 ≤ quantity ≤ 100) - \\"QUERY\\" For \\"ADD\\", if the item already exists in the cart, update its quantity and price. For \\"REMOVE\\", reduce the quantity of the item in the cart by the specified amount. If the quantity becomes zero or negative, remove the item completely from the cart. For \\"QUERY\\", print the total cost of the items currently in the cart. It is guaranteed that \\"REMOVE\\" actions will only be applied to items that are present in the cart, and the quantity to remove will never exceed the quantity of the item in the cart. -----Output----- For each \\"QUERY\\" action, print the total cost of the items in the cart. -----Examples----- Input 6 ADD apple 10 5 ADD banana 20 3 QUERY REMOVE apple 2 QUERY ADD apple 10 2 Output 110 90 Input 5 ADD book 12 7 ADD pen 3 10 QUERY REMOVE pen 5 QUERY Output 114 99","solution":"def process_actions(n, actions): cart = {} def add_item(item_name, price, quantity): if item_name in cart: cart[item_name][\'quantity\'] += quantity cart[item_name][\'price\'] = price else: cart[item_name] = {\'price\': price, \'quantity\': quantity} def remove_item(item_name, quantity): if item_name in cart: cart[item_name][\'quantity\'] -= quantity if cart[item_name][\'quantity\'] <= 0: del cart[item_name] def query_total(): total_cost = sum(item[\'price\'] * item[\'quantity\'] for item in cart.values()) return total_cost results = [] for action in actions: parts = action.split() if parts[0] == \\"ADD\\": _, item_name, price, quantity = parts add_item(item_name, int(price), int(quantity)) elif parts[0] == \\"REMOVE\\": _, item_name, quantity = parts remove_item(item_name, int(quantity)) elif parts[0] == \\"QUERY\\": results.append(query_total()) return results"},{"question":"Given an `n x n` 2D matrix `mat`, the task is to rotate the matrix elements in-place by 90 degrees in a clockwise direction. The rotation must be done without using any extra memory. Example: Input: mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] Explanation: The matrix is rotated by 90 degrees in a clockwise direction. Input: mat = [[1, 2], [3, 4]] Output: [[3, 1], [4, 2]] Explanation: The matrix is rotated by 90 degrees in a clockwise direction. Your Task: You don\'t need to read input or print anything. You only need to complete the function `rotateMatrix()` which takes the 2D matrix `mat` as input and returns the rotated matrix. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 <= mat.length == mat[0].length <= 20 1 <= mat[i][j] <= 100","solution":"def rotateMatrix(mat): Rotates the given n x n 2D matrix by 90 degrees in clockwise direction in-place. n = len(mat) # Transpose the matrix for i in range(n): for j in range(i + 1, n): mat[i][j], mat[j][i] = mat[j][i], mat[i][j] # Reverse each row for i in range(n): mat[i].reverse() return mat"},{"question":"You are given a list of people\'s names (strings), where each person\'s name is represented by their first name and last name, separated by a single space. Your task is to determine how many unique first names there are in the list as well as how many unique last names there are. Input: - The number of people\'s names, `n` (1 ≤ n ≤ 10,000). - `n` lines, each containing a single person\'s name. Output: - A single line containing two integers separated by a space: the number of unique first names and the number of unique last names. Example: Input: ``` 5 John Doe Jane Doe Emily Smith Jane Smith John Smith ``` Output: ``` 3 2 ``` Explanation: - The unique first names are \\"John\\", \\"Jane\\", and \\"Emily\\", which counts to 3. - The unique last names are \\"Doe\\" and \\"Smith\\", which counts to 2.","solution":"def count_unique_names(names): Given a list of people\'s names, return the number of unique first names and the number of unique last names. Args: names (list of str): List of people\'s names. Returns: tuple: (number of unique first names, number of unique last names) first_names = set() last_names = set() for name in names: first, last = name.split() first_names.add(first) last_names.add(last) return len(first_names), len(last_names)"},{"question":"You are given a rectangular maze of size n times m where each cell is either an empty space (represented by \'.\') or a wall (represented by \'#\'). You need to find the shortest path from the top-left corner of the maze to the bottom-right corner. You can only move up, down, left, or right, and cannot pass through walls. Write a function that returns the length of the shortest path from the top-left corner to the bottom-right corner of the maze. If no such path exists, return -1. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. Next t sets of lines contain descriptions of the test cases. Each test case starts with two integers n and m (1 le n, m le 100) — the number of rows and columns in the maze. The next n lines contain m characters each representing the maze. It is guaranteed that the top-left corner (cell (1, 1)) and the bottom-right corner (cell (n, m)) are always empty spaces. -----Output----- For each test case, output the length of the shortest path from the top-left corner to the bottom-right corner, or -1 if no such path exists. -----Example----- Input 3 3 3 ... .#. ... 5 5 ..# .#..# #.# #.. ...#. 4 4 .... .#.# .#.. .... Output 4 -1 6","solution":"from collections import deque def shortest_path_length(n, m, maze): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() # If we reached the bottom-right corner if r == n-1 and c == m-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and maze[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1 def find_shortest_paths(t, test_cases): results = [] for i in range(t): n, m, maze = test_cases[i] results.append(shortest_path_length(n, m, maze)) return results"},{"question":"In a game of fighting monsters, a player is given a grid representing a dungeon with non-negative integers. Each cell in the grid describes the amount of gold that is gained upon defeating the monster in that cell. The player can move from one cell to another only through the right or downward direction, starting from the top-left cell. The goal is to determine the maximum amount of gold that can be collected when the player reaches the bottom-right cell of the grid. -----Input----- The first line contains two space-separated integers m and n describing the number of rows and columns in the grid, where 1 leq m, n leq 100. The next m lines each contain n space-separated integers g_i indicating the amount of gold gained from defeating the monster in the corresponding cell, 0 leq g_i leq 100. -----Output----- The output contains one line with the maximum amount of gold that can be collected when the player reaches the bottom-right cell. -----Examples----- Sample Input: 3 3 1 3 1 1 5 1 4 2 1 Sample Output: 12","solution":"def max_gold(m, n, grid): Returns the maximum amount of gold that can be collected when the player reaches the bottom-right cell of the grid. dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[m - 1][n - 1]"},{"question":"Steven is an avid gardener and he has planted a variety of flowers in his garden. The garden can be represented as a 2D grid of size n times n. Each cell in the grid either contains a flower or is empty. Steven is particularly interested in finding the largest rectangular plot in his garden that does not contain any flowers. Given the grid, determine the area of the largest rectangle that consists entirely of empty cells. -----Input----- The first line of the input contains an integer n (1 leq n leq 1000), the size of the garden grid. Each of the next n lines contains n characters where each character is either a \'.\' (denoting an empty cell) or a \'*\' (denoting a cell with a flower). -----Output----- Output a single integer, the area of the largest rectangle consisting entirely of empty cells. -----Examples----- Sample Input: 4 .*.. .... **** .*.. Sample Output: 4","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 max_area = 0 n = len(matrix) m = len(matrix[0]) heights = [0] * (m + 1) for row in matrix: for i in range(m): if row[i] == \'.\': heights[i] += 1 else: heights[i] = 0 stack = [-1] for j in range(m + 1): while heights[j] < heights[stack[-1]]: h = heights[stack.pop()] w = j - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(j) return max_area def largest_empty_rectangle(garden): return maximalRectangle(garden) # Example usage: n = 4 garden = [ \\".*..\\", \\"....\\", \\"****\\", \\".*..\\" ] print(largest_empty_rectangle(garden)) # Output: 4"},{"question":"Consider a game where there are n coins placed in a row, each with a value. Two players, Alice and Bob, take turns picking a coin from either the beginning or the end of the row. Alice goes first, and they each try to maximize their total amount of money. Write a program to determine the maximum amount of money that Alice can collect if both players play optimally. -----Input----- The first line of the input contains a single integer n (2 ≤ n ≤ 1000) — the number of coins. The second line contains n integers a_{1}, a_{2}, ..., a_{n} (1 ≤ a_{i} ≤ 1000) — the values of the coins. -----Output----- Print a single integer — the maximum amount of money Alice can collect. -----Examples----- Input 4 1 2 9 4 Output 10 Input 3 4 4 4 Output 8 -----Note----- In the first sample, Alice can collect the maximum amount of money by taking the coins with values 1, 9. In the second sample, Alice can collect the maximum amount of money by taking the coins with values 4, 4.","solution":"def max_money(coins): n = len(coins) dp = [[0] * n for _ in range(n)] for length in range(1, n + 1): for i in range(n - length + 1): j = i + length - 1 if i == j: dp[i][j] = coins[i] else: pick_i = coins[i] + min(dp[i + 2][j] if i + 2 <= j else 0, dp[i + 1][j - 1] if i + 1 <= j - 1 else 0) pick_j = coins[j] + min(dp[i][j - 2] if i <= j - 2 else 0, dp[i + 1][j - 1] if i + 1 <= j - 1 else 0) dp[i][j] = max(pick_i, pick_j) return dp[0][n - 1] # Example usage: # coins = [1, 2, 9, 4] # print(max_money(coins)) # Output should be 10"},{"question":"You are given a list of integers representing the heights of solid blocks aligned along the x-axis. The blocks form a skyline. Each block has a width of 1 unit. Your task is to simulate the rainwater trapped between these blocks after a heavy rainstorm. When it rains heavily, water is trapped in the gaps between the blocks and at the top of shorter blocks that are surrounded by taller blocks. -----Input----- The input is a single line containing a list of non-negative integers, where each integer represents the height of a block. The length of the list will not exceed 1000, and each height will not exceed 1000. -----Output----- Output the total volume of water trapped between the blocks after the rain. -----Examples----- Sample Input 1: [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Sample Output 1: 6 Sample Input 2: [4, 2, 0, 3, 2, 5] Sample Output 2: 9","solution":"def trap_rainwater(heights): Calculate the total volume of water trapped between blocks after a rain. Parameters: heights (list of int): A list of non-negative integers representing the heights of blocks. Returns: int: Total volume of water trapped. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate trapped water water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"A robotics company has a fleet of delivery robots that move on a 2D grid. Each robot follows a specific sequence of commands to navigate the grid. The commands are given in a string where each character represents a movement: - \'U\' for moving up - \'D\' for moving down - \'L\' for moving left - \'R\' for moving right The company wants to find out if a given sequence of commands will eventually bring the robot back to its starting position. -----Input----- The input consists of a single string of commands (1 ≤ length of string ≤ 10^5), containing characters \'U\', \'D\', \'L\', and \'R\' only. -----Output----- Print \\"Yes\\" if the sequence of commands brings the robot back to the starting position. Otherwise, print \\"No\\". -----Examples----- Input UDLR Output Yes Input UUDDLLRRR Output No","solution":"def is_robot_back_to_origin(commands): Determine if the robot returns to the starting position after executing the commands. Args: commands (str): A string representing the sequence of commands. Returns: str: \'Yes\' if the robot returns to the starting position, \'No\' otherwise. x, y = 0, 0 # Starting position for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return \\"Yes\\" if x == 0 and y == 0 else \\"No\\""},{"question":"Kira is participating in a coding competition where she needs to sort an array of integers. However, the sorting needs to be performed with a special twist: the sorting must be done in a way that guarantees fewer swaps than the conventional sorting methods. Using a novel sorting method known as \\"Adjacent Swaps Sorting\\", Kira wants to minimize the number of adjacent swaps to sort the array. In \\"Adjacent Swaps Sorting\\", you are only allowed to swap elements that are adjacent to each other. Given an array of integers, you need to determine the minimum number of adjacent swaps required to sort the entire array in non-decreasing order. Write a function to calculate the minimum number of adjacent swaps needed to sort the array. ------ Input Format ------ - The first line contains a single integer N, the number of elements in the array. - The second line contains N integers A1, A2, ..., AN, representing the elements of the array. ------ Output Format ------ Print a single integer which is the minimum number of adjacent swaps required to sort the array. ------ Constraints ------ 1 ≤ N ≤ 200,000 1 ≤ A_i ≤ 200,000 ----- Sample Input 1 ------ 4 4 3 2 1 ----- Sample Output 1 ------ 6 ----- Explanation 1 ------ To sort the array [4, 3, 2, 1], the following adjacent swaps are needed: 1. Swap 4 and 3: [3, 4, 2, 1] 2. Swap 4 and 2: [3, 2, 4, 1] 3. Swap 4 and 1: [3, 2, 1, 4] 4. Swap 3 and 2: [2, 3, 1, 4] 5. Swap 3 and 1: [2, 1, 3, 4] 6. Swap 2 and 1: [1, 2, 3, 4] ----- Sample Input 2 ------ 5 1 5 4 3 2 ----- Sample Output 2 ------ 6 ----- Explanation 2 ------ To sort the array [1, 5, 4, 3, 2], the following adjacent swaps are needed: 1. Swap 5 and 4: [1, 4, 5, 3, 2] 2. Swap 5 and 3: [1, 4, 3, 5, 2] 3. Swap 5 and 2: [1, 4, 3, 2, 5] 4. Swap 4 and 3: [1, 3, 4, 2, 5] 5. Swap 4 and 2: [1, 3, 2, 4, 5] 6. Swap 3 and 2: [1, 2, 3, 4, 5]","solution":"def min_adjacent_swaps_to_sort(N, array): Calculate the minimum number of adjacent swaps needed to sort the array. def merge_sort_with_count(arr): if len(arr) <= 1: return arr, 0 mid = len(arr) // 2 left, left_swaps = merge_sort_with_count(arr[:mid]) right, right_swaps = merge_sort_with_count(arr[mid:]) merged, merge_swaps = merge_and_count(left, right) return merged, left_swaps + right_swaps + merge_swaps def merge_and_count(left, right): merged = [] i = j = swaps = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 swaps += len(left) - i # Number of remaining elements in left merged.extend(left[i:]) merged.extend(right[j:]) return merged, swaps _, swap_count = merge_sort_with_count(array) return swap_count"},{"question":"Our student participated in a programming contest. The contest consists of multiple problems. The score of each problem is recorded as \\"x:y\\". The student can either fully solve a problem (score: \\"x:1\\") or partially solve a problem (score: \\"x:0.5\\"). For example: ```[\\"5:1\\", \\"3:1\\", \\"4:0.5\\", \\"2:0.5\\", ...]``` Write a function that takes such a collection and calculates the total score of the student in the contest. Rules for counting the score for each problem: - if y=1 - `y` is added as is - if y=0.5 - `y` is divided by 2 and added Notes: - there are no constraints on the number of problems - 0 <= x <= 10 - y can only be either 1 or 0.5","solution":"def calculate_total_score(scores): Calculates the total score of the student in the contest. :param scores: List of strings where each string is formatted as \\"x:y\\" :return: Total score as a float total_score = 0.0 for score in scores: x, y = score.split(\':\') x = float(x) y = float(y) if y == 1: total_score += y elif y == 0.5: total_score += y / 2 return total_score"},{"question":"You\'re given a sequence of integers and your task is to find the length of the longest subsequence where every adjacent pair of numbers has a product that is negative. Input Format The first line contains an integer mathbf{T}, the number of test cases. Each of the next mathbf{T} lines contains: - An integer mathbf{N}, representing the length of the sequence. - A sequence of mathbf{N} integers, separated by spaces. Output Format For each test case, output the length of the longest subsequence that satisfies the given condition. Constraints 1 leq T leq 10 1 leq N leq 100,000 -10^9 leq A[i] leq 10^9 Sample Input 3 6 1 -2 3 -4 5 -6 5 -1 -2 -3 -4 -5 4 1 2 3 4 Sample Output 6 1 1 Explanation In the first test-case, the sequence 1, -2, 3, -4, 5, -6 is the longest subsequence where each adjacent pair has a negative product, i.e., every subsequent elements in this sequence when multiplied result in a negative value (1 * -2 < 0, -2 * 3 < 0, 3 * -4 < 0, -4 * 5 < 0, 5 * -6 < 0). Thus, the length of this resultant subsequence is 6. In the second test-case, there are no adjacent elements that have a product that is negative. Therefore, the longest subsequence only contains a single element. In the third test-case, similarly, there are no adjacent elements yielding a negative product, and hence the longest subsequence also has a length of 1.","solution":"def longest_negative_product_subsequence_length(t, cases): results = [] for case in cases: n, sequence = case if n == 0: results.append(0) continue max_len = 1 current_len = 1 for i in range(1, n): if sequence[i] * sequence[i-1] < 0: current_len += 1 else: current_len = 1 max_len = max(max_len, current_len) results.append(max_len) return results"},{"question":"Alex is learning string manipulation and wants to understand how to generate permutations of a string with unique characters. Given a string s of length n, Alex wants to produce all possible permutations of the string and arrange them in lexicographical order. For example, for the string s = \\"abc\\", the permutations would be: \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\". -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 100) — the number of test cases. The following t lines contain a description of the test cases. Each test case consists of a single line containing a string s consisting of lowercase English letters. The length of s (1 leq |s| leq 8) is such that all characters in s are unique. -----Output----- For each test case, print the permutations of the string in lexicographical order on separate lines. Each set of permutations for different test cases should be separated by a blank line. -----Example----- Input 2 abc dog Output abc acb bac bca cab cba dgo dog god gdo odg ogd -----Notes----- In the first test case, the permutations of \\"abc\\" in lexicographical order are: - \\"abc\\" - \\"acb\\" - \\"bac\\" - \\"bca\\" - \\"cab\\" - \\"cba\\" In the second test case, the permutations of \\"dog\\" in lexicographical order are: - \\"dgo\\" - \\"dog\\" - \\"god\\" - \\"gdo\\" - \\"odg\\" - \\"ogd\\"","solution":"from itertools import permutations def generate_permutations(test_cases): results = [] for s in test_cases: perms = sorted(\'\'.join(p) for p in permutations(s)) results.append(perms) return results"},{"question":"You are given a string `s` and an integer `k`. Your task is to count the number of substrings that contain at least `k` distinct characters. A substring is a contiguous segment of a string. Input The first line contains the string `s` (1 ≤ |s| ≤ 2000). The second line contains the integer `k` (1 ≤ k ≤ 26). Output Print a single integer — the number of substrings that contain at least `k` distinct characters. Example Input abcabc 3 Output 10 Input zzzz 2 Output 0 Note In the first sample, the substrings that contain at least 3 distinct characters are: - \\"abc\\" - \\"abca\\" - \\"abcab\\" - \\"abcabc\\" - \\"bca\\" - \\"bcab\\" - \\"bcabc\\" - \\"cab\\" - \\"cabc\\" - \\"abc\\" (from the second occurrence of \\"abc\\") In the second sample, there are no substrings that contain at least 2 distinct characters since the string consists of the same character \\"z\\" repeated.","solution":"def count_substrings_with_k_distinct_chars(s, k): Returns the number of substrings containing at least k distinct characters. if k > len(s): return 0 count = 0 for i in range(len(s)): distinct_chars = set() for j in range(i, len(s)): distinct_chars.add(s[j]) if len(distinct_chars) >= k: count += (len(s) - j) break return count"},{"question":"Mark is designing a new card game involving integers. Each card has an integer value, and the game uses a subset of these cards to calculate a special score. The calculation involves identifying all pairs of cards whose sum is an even number. Mark needs your help to determine the number of such pairs from a given set of cards. Input format: The first line contains an integer N, the number of cards. The next line contains N space-separated integers representing the values on the cards. Output format: Print the number of pairs (i, j) such that i < j and the sum of the values on the cards at positions i and j is even. Constraints: 2 ≤ N ≤ 100 -1000 ≤ card value ≤ 1000 SAMPLE INPUT 4 3 5 8 10 SAMPLE OUTPUT 2 Explanation The pairs whose sum is even are (3, 5) and (8, 10).","solution":"def count_even_sum_pairs(cards): Returns the number of pairs (i, j) such that i < j and the sum of the values on the cards at positions i and j is even. Parameters: cards (list of int): List of integer card values. Returns: int: Number of pairs whose sums are even. even_count = 0 odd_count = 0 for card in cards: if card % 2 == 0: even_count += 1 else: odd_count += 1 # Pairs of evens and pairs of odds will result in even sums. even_pairs = even_count * (even_count - 1) // 2 odd_pairs = odd_count * (odd_count - 1) // 2 return even_pairs + odd_pairs"},{"question":"In a string processing system, we often need to remove certain characters based on specific conditions. One such requirement is to eliminate consecutive duplicate characters from a given string. This means that if two or more identical characters appear together, they should be reduced to a single character. Write a function that takes a string `s` as input and outputs a new string that has no consecutive duplicate characters. -----Input----- The input consists of a single string `s` (1 ≤ |s| ≤ 1000). -----Output----- Output a single string that results from removing consecutive duplicate characters from the input string `s`. -----Examples----- Input aabbcc Output abc Input aaabbbcccaaa Output abca Input thequickbrownfox Output thequickbrownfox","solution":"def remove_consecutive_duplicates(s): Removes consecutive duplicate characters from the input string. Args: s (str): The input string containing potential consecutive duplicates. Returns: str: The string after removing consecutive duplicate characters. if not s: return s output = [s[0]] for char in s[1:]: if char != output[-1]: output.append(char) return \'\'.join(output)"},{"question":"Your challenge You\'ve decided it\'s time to clean up your photo library. The library is organized in folders by year and within each year, it is further organized into folders by months with photos labeled with the date they were taken. You have realized that some photos are duplicated across different folders and you want to write a function to identify these duplicates. A photo is considered a duplicate if there exists another photo with exactly the same filename in any folder, regardless of the date. Your plan Write a function that takes a dictionary where the keys are years (strings) and the values are dictionaries. The inner dictionaries have months (strings) as keys and lists of photo filenames (strings) as values. Your function should return a list of filenames that are duplicates. The filenames in the result should be sorted alphabetically. ```python def find_duplicates(library: dict) -> list: pass ``` Example ``` library = { \'2020\': { \'01\': [\'img1.jpg\', \'img2.jpg\', \'img3.jpg\'], \'02\': [\'img2.jpg\', \'img4.jpg\'], \'03\': [\'img3.jpg\', \'img5.jpg\'] }, \'2021\': { \'01\': [\'img6.jpg\', \'img2.jpg\'], \'04\': [\'img1.jpg\', \'img7.jpg\'] } } print(find_duplicates(library)) # Output: [\'img1.jpg\', \'img2.jpg\', \'img3.jpg\'] ``` Note: While there might be multiple copies of the same photo within a month, consider only one instance per month for detecting duplicates across other month folders. Your task is to identify which photos are duplicated across the entire library structure.","solution":"def find_duplicates(library: dict) -> list: from collections import defaultdict # Dictionary to count occurrences of photo filenames photo_count = defaultdict(int) # Traverse the library and count occurrences of each photo for year in library.values(): for month_photos in year.values(): # Using a set to avoid considering the same photo multiple times in a single month unique_photos_in_month = set(month_photos) for photo in unique_photos_in_month: photo_count[photo] += 1 # Collect filenames that appear more than once duplicates = [photo for photo, count in photo_count.items() if count > 1] # Return duplicates sorted alphabetically return sorted(duplicates)"},{"question":"You are given an array of integers representing the prices of items in a store. A customer decides to purchase items in such a way that the cost of the items they buy does not exceed a given budget. The goal is to maximize the number of items they can buy without exceeding the total budget. Write a function that takes in an array of prices and a budget value and returns the maximum number of items the customer can purchase. Input The first line contains an integer t (1 ≤ t ≤ 10^4), the number of test cases. For each test case: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of items. - The second line contains n integers, the prices of the items (1 ≤ price ≤ 10^4). - The third line contains a single integer b (1 ≤ b ≤ 10^9), the budget. Output For each test case, print a single integer, the maximum number of items the customer can purchase. Example Input: 2 5 1 12 5 111 200 10 3 20 30 50 35 Output: 2 1","solution":"def max_items(prices, budget): Returns the maximum number of items that can be bought without exceeding the given budget. prices.sort() total_spent = 0 num_items = 0 for price in prices: if total_spent + price <= budget: total_spent += price num_items += 1 else: break return num_items def solve(t, test_cases): Solves the problem for multiple test cases. results = [] for i in range(t): n, prices, budget = test_cases[i] result = max_items(prices, budget) results.append(result) return results"},{"question":"Design a function `generate_pascal_triangle_row(n)` that takes a non-negative integer `n` and returns the `n-th` row of Pascal\'s Triangle. Pascal\'s Triangle is a triangular array of numbers where the numbers on the edges are all 1, and each number inside the triangle is the sum of the two numbers above it: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ``` The `n-th` row is the row with index `n`, so the 0th row is `[1]`, the 1st row is `[1, 1]`, the 2nd row is `[1, 2, 1]`, and so on. # Function Signature ```python def generate_pascal_triangle_row(n: int) -> List[int]: ``` # Example ```python generate_pascal_triangle_row(0) == [1] generate_pascal_triangle_row(1) == [1, 1] generate_pascal_triangle_row(2) == [1, 2, 1] generate_pascal_triangle_row(3) == [1, 3, 3, 1] generate_pascal_triangle_row(4) == [1, 4, 6, 4, 1] generate_pascal_triangle_row(5) == [1, 5, 10, 10, 5, 1] ```","solution":"from typing import List def generate_pascal_triangle_row(n: int) -> List[int]: if n == 0: return [1] row = [1] for k in range(1, n + 1): next_value = row[-1] * (n - k + 1) // k row.append(next_value) return row"},{"question":"Imagine you are managing a large web application that needs to keep track of all active user sessions. Each user session is represented by a unique integer ID and all session IDs are stored in a session log. Unfortunately, the application can malfunction and leave duplicate session entries in the log. Your task is to write a program that processes this log to remove the duplicate session entries while preserving the order of their first occurrence. -----Input----- - The first line of input contains a single integer n, representing the number of session IDs in the log. - The next line contains n space-separated integers, representing the session IDs in the log. -----Output----- - Output the list of session IDs after removing duplicates while preserving their first occurrence. -----Constraints----- - 1 leq n leq 10^5 - Each session ID is an integer between 1 and 10^9. -----Example Input----- 10 1 2 3 4 2 1 5 6 7 3 -----Example Output----- 1 2 3 4 5 6 7 -----Explanation----- Initially, the session IDs are [1, 2, 3, 4, 2, 1, 5, 6, 7, 3]. After removing duplicates while maintaining the order of first occurrence, the result is [1, 2, 3, 4, 5, 6, 7].","solution":"def remove_duplicates(log): Removes duplicates from the session log while preserving the order of first occurrence. Args: log (list of int): The list of session IDs. Returns: list of int: The list of session IDs with duplicates removed. seen = set() result = [] for session_id in log: if session_id not in seen: seen.add(session_id) result.append(session_id) return result"},{"question":"You are organizing a programming contest in which you have to set up a way to automatically determine if the given password can be used for the system. The password must satisfy the following criteria: 1. It must contain at least one lowercase letter. 2. It must contain at least one uppercase letter. 3. It must contain at least one digit. 4. It must contain at least one special character from the set: !@#%^&*()-+ 5. It must be at least 8 characters long but no longer than 20 characters. You need to write a program that checks whether the given password is valid according to the above criteria. -----Input----- The input consists of a single string P (1 leq |P| leq 100), representing the password to be validated. -----Output----- Output “VALID” if the password is valid according to the criteria, or “INVALID” otherwise. -----Examples----- Sample Input 1: Passw0rd! Sample Output 1: VALID Sample Input 2: password Sample Output 2: INVALID","solution":"def check_password(password): Returns \'VALID\' if the password is valid according to the following criteria: 1. It must contain at least one lowercase letter. 2. It must contain at least one uppercase letter. 3. It must contain at least one digit. 4. It must contain at least one special character from the set: !@#%^&*()-+ 5. It must be at least 8 characters long but no longer than 20 characters. Otherwise, returns \'INVALID\'. if not (8 <= len(password) <= 20): return \\"INVALID\\" has_lower = any(c.islower() for c in password) has_upper = any(c.isupper() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \\"!@#%^&*()-+\\" for c in password) if has_lower and has_upper and has_digit and has_special: return \\"VALID\\" else: return \\"INVALID\\""},{"question":"You are given a 2D array `matrix` of integers. Your task is to write a function that returns the sum of the elements in the main diagonal of the `matrix`. The main diagonal of a matrix consists of elements that lie on the diagonal from top-left to bottom-right. # Examples: ```python For `matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]`, the output should be `15`. Explanation: The elements in the main diagonal are 1, 5, and 9. Their sum is 15. For `matrix = [[10, 2, 3, 4], [5, 20, 7, 8], [9, 10, 30, 15], [4, 3, 2, 40]]`, the output should be `100`. Explanation: The elements in the main diagonal are 10, 20, 30, and 40. Their sum is 100. ``` # Constraints: - The given matrix will always be a square matrix (i.e., number of rows is equal to the number of columns) with size ranging from 1x1 to 100x100. - All elements in the matrix are integers in the range `[-1000, 1000]`. # Function signature: ```python def sum_main_diagonal(matrix: List[List[int]]) -> int: pass ```","solution":"from typing import List def sum_main_diagonal(matrix: List[List[int]]) -> int: Returns the sum of the elements in the main diagonal of the given matrix. return sum(matrix[i][i] for i in range(len(matrix)))"},{"question":"Mike Micromanager just got hired as a traffic management consultant. He has been tasked with optimizing the traffic flow in a newly built city consisting of several intersecting one-way streets. The goal is to ensure that there are no traffic loops allowing cars to get stuck endlessly. In the city, the streets are represented as a set of directed graphs where intersections are nodes and one-way streets are directed edges. Mike needs to identify all possible sets of directed edges that, if removed, would eliminate all cycles in the city’s street network and leave the rest of the street system as connected as possible. Write a function `find_edges_to_remove` that takes in an integer `n` (number of intersections) and a list of tuples representing the directed edges between the intersections. Each tuple `(u, v)` in the list represents a one-way street from intersection `u` to intersection `v`. The function should return a set of edges that need to be removed to break all cycles. If there are multiple valid sets, return the one with the smallest lexicographical order. # Input - An integer `n` (1 ≤ n ≤ 1000) – the number of intersections. - A list of tuples `edges` representing the directed edges (one-way streets) between intersections. Each tuple `(u, v)` (1 ≤ u, v ≤ n, u ≠ v) represents a one-way street from intersection `u` to intersection `v`. There will be at most 10,000 edges. # Output - A list of tuples representing the edges to be removed. If there are multiple valid solutions, return the one with the smallest lexicographical order. # Example Input ``` 6 [(1, 2), (2, 3), (3, 1), (4, 5), (5, 6), (6, 4), (1, 4), (2, 5), (3, 6)] ``` Output ``` [(1, 2), (4, 5)] ``` Explanation By removing edges `(1, 2)` and `(4, 5)`, all cycles in the graph are eliminated while maintaining the largest possible connectivity in the network. The solution is lexicographically smallest among other possible solutions such as `[(2, 3), (4, 5)]`. # Note - The intersections are labeled from 1 through `n`. - You may assume the input edges list does not contain self-loops or duplicate edges. - The goal is to break all cycles while preserving as many connections as possible between remaining nodes.","solution":"def find_edges_to_remove(n, edges): Find the minimum set of edges that, when removed, eliminate all cycles in the directed graph. :param n: Number of intersections (nodes) :param edges: List of tuples representing directed edges (u, v) :return: List of tuples representing the edges to be removed from collections import defaultdict import heapq def tarjan_scc(n, edges): index = 0 indices = [-1] * n lowlink = [-1] * n on_stack = [False] * n stack = [] sccs = [] def strongconnect(node): nonlocal index indices[node] = index lowlink[node] = index index += 1 stack.append(node) on_stack[node] = True for neighbor in adjacency_list[node]: if indices[neighbor] == -1: strongconnect(neighbor) lowlink[node] = min(lowlink[node], lowlink[neighbor]) elif on_stack[neighbor]: lowlink[node] = min(lowlink[node], indices[neighbor]) if lowlink[node] == indices[node]: scc = [] while True: w = stack.pop() on_stack[w] = False scc.append(w) if w == node: break sccs.append(scc) adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u-1].append(v-1) for i in range(n): if indices[i] == -1: strongconnect(i) return sccs def find_cycle_edges(scc): in_degree = defaultdict(int) for u in scc: for v in adjacency_list[u]: if v in scc: in_degree[v] += 1 removable_edges = [] for u in scc: for v in adjacency_list[u]: if v in scc and in_degree[v] > 0: removable_edges.append((u, v)) in_degree[v] -= 1 removable_edges.sort() return removable_edges[0] sccs = tarjan_scc(n, edges) adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u-1].append(v-1) remove_edges = [] for scc in sccs: if len(scc) > 1: edge = find_cycle_edges(scc) remove_edges.append((edge[0] + 1, edge[1] + 1)) return sorted(remove_edges)"},{"question":"You are given a binary string s of length n. In one move, you can select any non-empty substring of s and reverse its order. You are allowed to make any number of moves (possibly zero). Your task is to determine the minimum number of moves required to make the binary string equal to its reverse (i.e., a palindrome). You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. The next 2t lines describe test cases. The first line of each test case contains one integer n (1 le n le 1000) — the length of the binary string s. The second line of the test case contains the binary string s of length n. It is guaranteed that the sum of lengths of all strings over all test cases does not exceed 1000 (sum |s| le 1000). -----Output----- For each test case, print a single integer — the minimum number of moves required to make the binary string s a palindrome. -----Example----- Input 3 5 11001 4 1001 6 101011 Output 1 0 1 Explanation: - In the first test case, one move can be to reverse the substring [2,4] to make the string \\"01110\\". - In the second test case, no moves are required as the string is already a palindrome. - In the third test case, one possible move is to reverse the substring [3,6] to make the string \\"101101\\".","solution":"def min_moves_to_palindrome(n, s): Determine the minimum number of moves required to make the binary string a palindrome. Args: n (int): Length of the string. s (str): Binary string of length n. Returns: int: The minimum number of moves. count = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: count += 1 return (count + 1) // 2 def solve(test_cases): results = [] for n, s in test_cases: results.append(min_moves_to_palindrome(n, s)) return results"},{"question":"# Reordered String Matcher Given two strings, determine if one string can be made to look like the other after reordering its characters. All characters, including spaces, punctuation, and special symbols, must be present the same number of times in each string. The comparison should be case-sensitive. # Implement a function `are_anagrams` that accepts two parameters: - `str1` (string): The first input string. - `str2` (string): The second input string. # Your function should return a boolean value: - `True` if the two strings can be made to look the same by reordering their characters. - `False` otherwise. # Example: ```python are_anagrams(\\"Listen\\", \\"Silent\\") # => False are_anagrams(\\"Triangle\\", \\"Integral\\") # => True are_anagrams(\\"Hello, World!\\", \\"o!ldl rHoWe\\") # => False are_anagrams(\\"The eyes\\", \\"They see!!\\") # => False are_anagrams(\\"god\\", \\"dog\\") # => True are_anagrams(\\"Dormitory\\", \\"Dirty room\\") # => False ``` # Constraints: - The strings contain only printable ASCII characters. - The length of the strings will not exceed 1000 characters. - Performance considerations are important for optimal solutions.","solution":"def are_anagrams(str1, str2): Determines if the two strings can be made to look the same by reordering their characters. Args: str1 (string): The first input string. str2 (string): The second input string. Returns: bool: True if the two strings can be made to look the same by reordering their characters, False otherwise. return sorted(str1) == sorted(str2)"},{"question":"Reverse a String Write a function that takes a string as input and returns a new string that is the reverse of the input string. Information To reverse a string, you rearrange the characters in the opposite order from which they appear. For example, for the string `hello`, 1. The characters are `h`, `e`, `l`, `l`, `o`. 2. In reverse order, it becomes `o`, `l`, `l`, `e`, `h`. 3. The reversed string is `olleh`. Function Signature: ```python def reverse_string(s: str) -> str: # Your code here ``` Example * Input: `\\"python\\"` * Output: `\\"nohtyp\\"`","solution":"def reverse_string(s: str) -> str: Returns the reverse of the input string. :param s: The input string to be reversed. :return: A new string which is the reverse of the input string. return s[::-1]"},{"question":"The town of Algoville has an old but effective postal service system. The postal service needs to deliver n letters to n different people in various locations throughout the town. There is exactly one postman working who, once a day, can deliver exactly one letter to the intended recipient personally. Every morning, the postman prepares by picking one of the n letters to deliver that day. Unfortunately, the delivery checklist in the post office is jumbled, and he might pick up the wrong letter. If he does, he places the letter back, shuffles the letters to ensure he does not pick the same wrong letter the next day, and tries again the following day. Given n, the total number of letters and recipients, compute the minimum number of days required in the worst case to ensure all n letters are delivered correctly. Input A single integer n (1 ≤ n ≤ 50), indicating the number of letters. Output Print a single integer — the minimum number of days required to deliver all letters in the worst-case scenario. Examples Input 1 Output 1 Input 3 Output 6 Input 4 Output 24 Note For the second sample, in the worst-case scenario, the postman will have 6 different permutations to attempt (3!), thus requiring up to 6 days to deliver all letters. For the third sample, in the worst-case scenario, the postman will have 24 different permutations to attempt (4!), thus requiring up to 24 days to deliver all letters.","solution":"import math def min_days_to_deliver(n): Returns the minimum number of days required to deliver all n letters in the worst-case scenario. return math.factorial(n)"},{"question":"You are given an array of integers. Your task is to determine whether there is a pair of elements in the array whose sum equals a given target value. If such a pair exists, print \\"YES\\" (without quotes), otherwise print \\"NO\\" (without quotes). Input Format: - The first line contains an integer n, the size of the array. - The second line contains n space-separated integers representing the elements of the array. - The third line contains a single integer, the target value. Output Format: - Print \\"YES\\" if there is a pair of elements in the array whose sum equals the target value. Otherwise, print \\"NO\\". Constraints: - 1 ≤ n ≤ 1000 - -10^5 ≤ array[i] ≤ 10^5 - -10^5 ≤ target ≤ 10^5 SAMPLE INPUT 5 1 2 3 4 5 9 SAMPLE OUTPUT YES Explanation In the given array, the pair (4, 5) sums to 9, hence the output is \\"YES\\".","solution":"def has_pair_with_sum(arr, target): Determine whether there is a pair of elements in the array whose sum equals the target value. seen = set() for num in arr: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"You are given a binary tree, and your task is to complete the function isCousins(), which determines if two nodes are cousins in the given binary tree. Two nodes are said to be cousins if they are at the same level and have different parents. The function should return `true` if the nodes are cousins, otherwise it should return `false`. Input: - The function receives the root of a binary tree and two integers representing the values of the two nodes to be checked. - Tree nodes have an integer value and pointers to their left and right children. Output: - A boolean value indicating whether the two nodes are cousins. Your Task: - Complete the function isCousins(root, x, y) that takes the root node of the binary tree, and the values of the two nodes to be checked as arguments. Constraints: - The number of nodes in the binary tree is in the range [2, 100]. - The value of each node is unique and in the range [1, 100]. Example: Input: ``` 1 / 2 3 / 4 5 ``` The nodes to be checked are 4 and 5. Output: true Explanation: Node 4 and node 5 are cousins as they are at the same level (depth 2) and have different parents (2 and 3 respectively). Another Example: Input: ``` 1 / 2 3 / 4 6 ``` The nodes to be checked are 4 and 6. Output: false Explanation: Node 4 and node 6 are not cousins because even though they are at the same level, they have the same parent (2).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isCousins(root, x, y): def find_depth_and_parent(node, val, depth=0, parent=None): if not node: return None if node.val == val: return (depth, parent) left_result = find_depth_and_parent(node.left, val, depth + 1, node) if left_result: return left_result right_result = find_depth_and_parent(node.right, val, depth + 1, node) return right_result x_info = find_depth_and_parent(root, x) y_info = find_depth_and_parent(root, y) if not x_info or not y_info: return False x_depth, x_parent = x_info y_depth, y_parent = y_info return x_depth == y_depth and x_parent != y_parent"},{"question":"Write a function `longest_repeating_subsequence` that takes a string and returns the length of the longest repeating subsequence such that the two subsequences do not have any common characters at the same position in the original string. In other words, find the longest subsequence of a string such that the characters in the subsequence appear more than once in the string and the characters of the subsequence do not overlap in the original string. Input The input contains a single string `s` of length `n` where 1 ≤ n ≤ 1000. Output Output a single integer which is the length of the longest repeating subsequence. Example Input: aab Output: 1 Explanation: The longest repeating subsequence is \\"a\\". Input: aabb Output: 2 Explanation: The longest repeating subsequence is \\"ab\\".","solution":"def longest_repeating_subsequence(s): Returns the length of the longest repeating subsequence in the string s. n = len(s) dp = [[0] * (n + 1) for _ in range(n + 1)] # Build the dp array for i in range(1, n + 1): for j in range(1, n + 1): if s[i - 1] == s[j - 1] and i != j: dp[i][j] = 1 + dp[i - 1][j - 1] else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][n]"},{"question":"Shanna loves playing with sequences of integers. She recently discovered a new type of sequence called a **Mixed Homogeneous Sequence**. For a sequence to be a Mixed Homogeneous Sequence, it must satisfy the following properties: 1. Every even-indexed element (considering 1-based indexing) in the sequence must be the same. 2. Every odd-indexed element in the sequence must be the same. She wants to figure out the total number of different Mixed Homogeneous Sequences that can be formed using integers from 1 to M inclusive, with a specified length N. Given the integers N and M, help Shanna determine the number of possible Mixed Homogeneous Sequences modulo 10^9 + 7. Input The first and only line of the input contains two space-separated integers N and M (1 ≤ N ≤ 10^18, 1 ≤ M ≤ 10^9). Output Output the number of different Mixed Homogeneous Sequences modulo 10^9 + 7. Examples Input 2 3 Output 9 Input 3 2 Output 4 Input 4 1 Output 1 Input 5 3 Output 9 Input 6 1 Output 1 Note In the first example, sequences like [1, 1], [2, 2], [3, 3], [1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2] are all valid Mixed Homogeneous Sequences of length 2 using integers from 1 to 3. There are a total of 9 such sequences.","solution":"def number_of_mixed_homogeneous_sequences(N, M): MOD = 10**9 + 7 if N % 2 == 0: # For even N, the number of possible sequences is M (odd positions) * M (even positions) = M^2 result = pow(M, 2, MOD) else: # For odd N, similarly, it\'s only M (odd positions) * M (even positions) = M^2 result = pow(M, 2, MOD) return result"},{"question":"You are given a list of integers `nums` and an integer `target`. Determine if there are two distinct elements in the list that add up to the `target`. If there are such elements, print \\"YES\\" and if there are no such elements, print \\"NO\\". Input The first line contains the integer `n`, the number of elements in the list `nums` (1 ≤ n ≤ 100). The second line contains the elements of the list `nums`, each an integer between -10^5 and 10^5. The third line contains the integer `target` (-10^5 ≤ target ≤ 10^5). Output Output \\"YES\\" if there are two distinct elements in the list that add up to `target`. Otherwise, output \\"NO\\". Examples Input 5 2 7 11 15 -5 10 Output YES Input 4 1 2 3 4 8 Output NO","solution":"def find_two_sum(nums, target): Determines if there are two distinct elements in the list `nums` that add up to `target`. Returns \\"YES\\" if such elements exist, otherwise \\"NO\\". seen = set() for num in nums: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Given an array of `n` integers, your task is to write a function that finds the minimum number of operations required to make the array elements equal. In one operation, you can choose any one of the integers and either increase or decrease it by 1. # Input - A single integer `n`, the number of elements in the array (1 <= n <= 1000). - A list of `n` integers representing the array (each integer `a_i` is between -10^9 and 10^9). # Output - A single integer, the minimum number of operations required to make all elements equal. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 6 ``` Input ``` 3 10 20 30 ``` Output ``` 20 ``` # Explanation In the first example, one optimal way to make all elements equal is to convert all elements to the median of the array, which is 3. The steps would be: change 1 to 3 (2 operations), 2 to 3 (1 operation), 4 to 3 (1 operation), and 5 to 3 (2 operations), totaling 6 operations. In the second example, an optimal way is to convert all elements to the median of the array, which is 20. The steps would be: change 10 to 20 (10 operations) and 30 to 20 (10 operations), totaling 20 operations.","solution":"def min_operations_to_equal_elements(n, array): Returns the minimum number of operations required to make all elements in the array equal. Parameters: n (int): The number of elements in the array. array (list of int): The list of integers. Returns: int: The minimum number of operations. array.sort() median = array[n // 2] # Select the median return sum(abs(x - median) for x in array)"},{"question":"Implement a function `sum_of_triples(nums)` that takes a list of integers and returns the sum of all unique triplets in the list that give zero when summing up. For example, `sum_of_triples([1, -1, 2, -2, 0])` should return `0`, because the triplets (1, -1, 0) and (2, -2, 0) both sum to zero, and their sums are also zero. Consider another example, `sum_of_triples([-1, 0, 1, 2, -1, -4])` should return `0`, because the valid triplets are (-1, 0, 1) and (-1, -1, 2). Note that each triplet should be unique. Also, the algorithm should be efficient in terms of both time and space complexity. Good luck! Please also try:","solution":"def sum_of_triples(nums): Returns the sum of all unique triplets in the list that sum up to zero. nums.sort() triplet_sums = set() for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left = i + 1 right = len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: triplet_sums.add((nums[i], nums[left], nums[right])) # Move past duplicates while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 # Sum each triplet and return the total sum return sum(sum(triplet) for triplet in triplet_sums)"},{"question":"You\'re given an array of integers. Write a program to compute the product of all the elements in the array. -----Input----- The first line contains an integer T, the total number of test cases. For each test case, the first line contains an integer N, the number of elements in the array. The next line contains N integers, the elements of the array. -----Output----- For each test case, output the product of all elements in the array in a new line. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 100 - 1 ≤ Array Elements ≤ 1000 -----Example----- Input 2 3 2 3 4 4 1 5 2 2 Output 24 20","solution":"def compute_product(test_cases): results = [] for case in test_cases: N = case[0] array = case[1] product = 1 for number in array: product *= number results.append(product) return results def main(): T = int(input().strip()) test_cases = [] for _ in range(T): N = int(input().strip()) array = list(map(int, input().strip().split())) test_cases.append((N, array)) results = compute_product(test_cases) for result in results: print(result)"},{"question":"Alice has a special undirected graph consisting of `n` vertices and `m` edges. Each edge is colored either red or blue. Alice can traverse the graph following these rules: - She can start from any vertex. - She can only traverse edges of alternating colors (starting with either color). Alice wants to find the shortest path from the starting vertex (vertex `1`) to every other vertex in the graph, following the traversing rules. If it\'s impossible to reach a vertex, the distance should be `-1`. Write a function `shortestAlternatingPaths(n, m, edges)` where: - `n` is the number of vertices (1-indexed). - `m` is the number of edges. - `edges` is a list of tuples. Each tuple `(u, v, c)` represents an edge between vertices `u` and `v` with color `c` (where `c` is either \'red\' or \'blue\'). The function should return a list of integers where the `i-th` integer represents the shortest distance from vertex `1` to vertex `i` following the alternating colors rule. The distance to the starting vertex should always be `0`. # Input ```plaintext The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 1 ≤ m ≤ 2000) — the number of vertices and edges in the graph. The next `m` lines each contain the description of an edge in the form `u v c` (1 ≤ u, v ≤ n, u ≠ v, c ∈ {\'red\', \'blue\'}) — an edge between vertex `u` and vertex `v` with color `c`. ``` # Output ```plaintext Output a single line containing `n` space-separated integers: the shortest distances from vertex `1` to each vertex from `1` to `n`. If a vertex is unreachable, the distance should be -1. ``` # Example ```plaintext Input 4 5 1 2 red 1 3 blue 2 3 red 2 4 blue 3 4 red Output 0 1 1 2 ``` # Note In the example, the possible paths from vertex `1` are: 1. The path to vertex `1` is always `0`. 2. The path to vertex `2` is `1` edge (either `1 -> 2` via the red edge). 3. The path to vertex `3` is `1` edge (either `1 -> 3` via the blue edge). 4. The path to vertex `4` follows an alternating path `1 -> 2 (red) -> 4 (blue)` with a total of `2` edges.","solution":"from collections import deque def shortestAlternatingPaths(n, m, edges): # create the adjacency list for red and blue edges red_adjacency = [[] for _ in range(n + 1)] blue_adjacency = [[] for _ in range(n + 1)] for u, v, c in edges: if c == \'red\': red_adjacency[u].append(v) else: blue_adjacency[u].append(v) # distances array, initialize with -1 distances = [-1] * (n + 1) distances[1] = 0 # queue for BFS, storing (node, step, color: 0 for red, 1 for blue) q = deque() q.append((1, 0, 0)) # start node with red color q.append((1, 0, 1)) # start node with blue color # visited set to avoid repeated state visited = set() visited.add((1, 0)) visited.add((1, 1)) while q: node, step, color = q.popleft() # next color to use next_color = 1 - color # determine the adjacent edges based on next color if next_color == 0: adj = red_adjacency else: adj = blue_adjacency for neighbor in adj[node]: if (neighbor, next_color) not in visited: visited.add((neighbor, next_color)) distances[neighbor] = step + 1 if distances[neighbor] == -1 else min(distances[neighbor], step + 1) q.append((neighbor, step + 1, next_color)) return distances[1:]"},{"question":"Martha has a colorful fruit basket consisting of N fruits. Each fruit is either an apple or an orange. She wants to know how many apples and how many oranges are in the basket. Write a program to help Martha determine the count of each type of fruit. ------ Input Format ------ - The first line contains an integer N — the total number of fruits. - The second line contains a string of length N consisting of characters \'A\' and \'O\' only where \'A\' represents an apple and \'O\' represents an orange. ------ Output Format ------ Print two integers separated by a space: the number of apples and the number of oranges in the basket. ------ Constraints ------ 1 ≤ N ≤ 1000 ------ Sample Input 1 ------ 5 AAOOA ------ Sample Output 1 ------ 3 2 ------ explanation 1 ------ There are 3 apples and 2 oranges in the basket. ------ Sample Input 2 ------ 4 OOOO ------ Sample Output 2 ------ 0 4 ------ explanation 2 ------ All 4 fruits are oranges, so there are 0 apples and 4 oranges.","solution":"def count_fruits(N, fruits): Returns the count of apples and oranges in the basket. Parameters: N (int): The total number of fruits. fruits (str): A string of length N consisting of characters \'A\' and \'O\'. Returns: tuple: A tuple containing two integers: the number of apples and the number of oranges. apples = fruits.count(\'A\') oranges = fruits.count(\'O\') return apples, oranges"},{"question":"Masha is interested in collecting a specific type of strings called \\"fibonacci strings\\". A fibonacci string of order k is defined in the following way: - F1 = \\"a\\" - F2 = \\"b\\" - For i > 2, Fi = F(i-1) + F(i-2) Where \\"+\\" denotes string concatenation. For example: - F1 = \\"a\\" - F2 = \\"b\\" - F3 = \\"ba\\" (because F3 = F2 + F1 = \\"b\\" + \\"a\\") - F4 = \\"bab\\" (because F4 = F3 + F2 = \\"ba\\" + \\"b\\") Masha wants to know the lexicographical rank of a particular permutation of a fibonacci string of order k. Given the integer k and an integer p, Masha wants to find the p-th permutation of the fibonacci string Fk in lexicographical order. Input - The first line contains an integer k (1 ≤ k ≤ 20), the order of the fibonacci string. - The second line contains an integer p (1 ≤ p ≤ |Fk|!), the 1-based index of the permutation to find. Output - Print the p-th permutation of the fibonacci string Fk in lexicographical order. Examples: Input 3 2 Output ab Input 4 6 Output bbba Note In the first example, the fibonacci string of order 3 is \\"ba\\", which has 2 permutations: [\\"ab\\", \\"ba\\"]. The second permutation lexicographically is \\"ab\\". In the second example, the fibonacci string of order 4 is \\"bab\\", which has 6 permutations: [\\"abb\\", \\"bab\\", \\"bba\\", \\"aab\\", \\"aba\\", \\"baa\\"]. The sixth permutation lexicographically is \\"bbba\\".","solution":"import itertools def fibonacci_string_order_k(k): if k == 1: return \\"a\\" elif k == 2: return \\"b\\" else: Fi_minus_2 = \\"a\\" Fi_minus_1 = \\"b\\" Fi = \\"\\" for i in range(3, k + 1): Fi = Fi_minus_1 + Fi_minus_2 Fi_minus_2 = Fi_minus_1 Fi_minus_1 = Fi return Fi def pth_permutation(k, p): Fk = fibonacci_string_order_k(k) perms = sorted(itertools.permutations(Fk)) return \'\'.join(perms[p-1])"},{"question":"A company has decided to offer discount coupons for loyal customers who have made purchases for more than a specified number of months. Customers receive a fixed discount rate that also varies based on the total amount spent in the past year. Write a function `calculate_discount` that takes four parameters: `months`, `yearly_spent`, `fixed_discount`, and `extra_discount`. - `months` is an integer representing the number of months the customer has been purchasing from the company. - `yearly_spent` is a floating-point number representing the total amount of money spent by the customer in the past year. - `fixed_discount` is an integer representing a percentage discount applied to all customers who meet the basic loyalty criteria. - `extra_discount` is an integer representing an additional percentage discount for customers who spent more than a defined threshold of 1000 in the past year. The `calculate_discount` function should return the total discount percentage that the customer will receive. Constraints: - 1 <= months <= 12 - 0.0 <= yearly_spent <= 10000.0 - 0 <= fixed_discount <= 100 - 0 <= extra_discount <= 100 Implementation logic: 1. If the customer has purchased for more than 6 months, they are eligible for a fixed discount. 2. If the `yearly_spent` is greater than 1000, they receive an additional discount. Function Signature: ```python def calculate_discount(months: int, yearly_spent: float, fixed_discount: int, extra_discount: int) -> int: ``` Input Format: - An integer, `months ` - A floating-point number, `yearly_spent` - Two integers, `fixed_discount` and `extra_discount` separated by space in a single line. Output Format: - An integer representing the total discount percentage. Sample Input 1: ```plain 7 1200.50 20 10 ``` Sample Output 1: ```plain 30 ``` Sample Input 2: ```plain 5 900.75 15 5 ``` Sample Output 2: ```plain 0 ```","solution":"def calculate_discount(months: int, yearly_spent: float, fixed_discount: int, extra_discount: int) -> int: Calculate the total discount percentage based on loyalty and expenditure. :param months: int - Number of months the customer has been purchasing from the company :param yearly_spent: float - Total amount spent by the customer in the past year :param fixed_discount: int - Fixed percentage discount for loyal customers :param extra_discount: int - Additional percentage discount for high spending customers :return: int - Total discount percentage the customer will receive total_discount = 0 if months > 6: total_discount += fixed_discount if yearly_spent > 1000: total_discount += extra_discount return total_discount"},{"question":"A tree\'s growth rate changes every year according to a specific pattern. Initially, the tree is 1 meter tall. For the subsequent years, the tree follows a pattern: 1 meter added in the first year, 2 meters added in the second year, 4 meters added in the third year, and 8 meters in the fourth year, doubling its growth every year. Given an integer N, find out the height of the tree after N years. Example 1: Input: N = 3 Output: 7 Explanation: Height of tree after 3 years is 1 (initial) + 1 (1st year) + 2 (2nd year) + 4 (3rd year) = 7 meters. Example 2: Input: N = 5 Output: 31 Explanation: Height of tree after 5 years is 1 (initial) + 1 (1st year) + 2 (2nd year) + 4 (3rd year) + 8 (4th year) + 16 (5th year) = 32 meters. Your Task: You don\'t need to read or print anything. Your task is to complete the function treeHeight() which takes N as an input parameter and returns the height of the tree after N years. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= N <= 50","solution":"def treeHeight(N): Returns the height of the tree after N years. height = 1 for year in range(1, N + 1): height += 2 ** (year - 1) return height"},{"question":"Given an integer array of size n, your task is to find the count of inversions in the array. An inversion is any pair (i, j) such that i < j and arr[i] > arr[j]. In other words, count how many times a larger number appears before a smaller one in the list. -----Input----- The first line contains a single integer n (1 le n le 100000) — the number of elements in the array. The second line contains n integers arr[1], arr[2], ..., arr[n] (1 le arr[i] le 10^9) representing the array. -----Output----- Output a single integer — the number of inversions in the array. -----Examples----- Input 5 2 3 8 6 1 Output 5 Input 4 1 2 3 4 Output 0 Input 6 5 4 3 2 1 0 Output 15 -----Note----- In the first example, the inversions are: - (2, 1) - (3, 1) - (8, 6) - (8, 1) - (6, 1) In the second example, since the array is sorted in ascending order, there are no inversions. In the third example, every element is an inversion with all the elements following it.","solution":"def count_inversions(arr): Count inversions in the given array. :param arr: List of integers :return: Integer count of inversions def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for the left subarray j = mid + 1 # Starting index for the right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all the remaining elements in the left subarray # (arr[i+1], arr[i+2], ..., arr[mid]) are greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n-1)"},{"question":"You are given a series of N workers, each denoted by an integer A_i (1 ≤ i ≤ N). Each worker has different efficiency values. Your task is to assign workers into groups based on the following rules: 1. Each group must consist of at least one worker. 2. The efficiency of a group is determined by the GCD (Greatest Common Divisor) of all the workers\' efficiencies in that group. 3. The goal is to maximize the total efficiency, which is the sum of the efficiencies of all groups. Assign workers optimally into groups so that the total efficiency is maximized. ------ Input Format ------ - The first line of the input contains an integer T, denoting the number of test cases. T test cases follow. - Each test case starts with an integer N, the number of workers. - The next line contains N space-separated integers A_1, A_2, ..., A_N representing the efficiency values of the workers. ------ Output Format ------ For each test case, output a single line containing one integer, the maximum total efficiency. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ A_i ≤ 10^4 ------ Sample Input 1 ------ 2 4 12 15 18 24 3 3 6 9 ------ Sample Output 1 ------ 27 18 ------ Explanation 1 ------ Test Case 1 The workers can be divided into groups as (12), (15), (18), (24). The efficiencies of individual groups will be 12, 15, 18, and 24 respectively. The total efficiency is 12 + 15 + 18 + 24 = 69. Alternatively, we can group all into a single group (12, 15, 18, 24). The efficiency of this single group is gcd(12, 15, 18, 24) = 3. The total efficiency is 3. Another best possible grouping (12), (15, 18), (24). The efficiencies are 12, gcd(15, 18)=3, and 24 respectively. The total efficiency is 12 + 3 + 24 = 39. Best possible sum of the efficiencies is achieved when splitting into (12), (15), (18), (24) giving total efficiency of 69. Test Case 2 The workers can be divided into groups as (3, 6, 9). The efficiency of the single group will be gcd(3,6,9) = 3. The total efficiency is 3. Alternatively, we can group as (3, 6) and 9 separately. The efficiency of the groups will be gcd(3, 6)=3 and 9. The total efficiency is 3 + 9 = 12. Alternatively, we can group all into a single group (3, 6, 9). The efficiency of this single group is gcd(3, 6, 9) = 3. The total efficiency is 3. Optimal grouping is (3), (6), (9), achieving the total efficiency of 3 + 6 + 9 = 18.","solution":"import math from functools import reduce from itertools import combinations def max_total_efficiency(T, test_cases): results = [] for case in test_cases: N, efficiencies = case max_efficiency = sum(efficiencies) # All unique non-empty subsets of efficiencies for i in range(1, N): for subset in combinations(efficiencies, i): gcd_value = reduce(math.gcd, subset) remaining = [x for x in efficiencies if x not in subset] remaining_sum = sum(remaining) total_efficiency = gcd_value + remaining_sum if total_efficiency > max_efficiency: max_efficiency = total_efficiency results.append(max_efficiency) return results"},{"question":"You are given an array of integers, and your task is to perform a series of operations to make all the elements of the array equal. In one operation, you can select any two distinct elements and increase or decrease the smaller one by 1 and the larger one by 1. The operation is performed simultaneously on both elements. Write a function `makeEqual` that takes a list of integers as input and returns the minimum number of operations required to make all elements in the list equal. Example 1: Input: arr = [1, 2, 3] Output: 2 Explanation: 1. Select 1 and 3: (1+1) = 2, (3-1) = 2 -> [2, 2, 2] 2. All elements are equal now. Example 2: Input: arr = [4, 4, 4] Output: 0 Explanation: All elements are already equal. Your Task: You don\'t need to read input or print anything. You only need to complete the function `makeEqual(arr: List[int]) -> int` that takes a list of integers as input and returns an integer denoting the minimum number of operations required to make all elements equal. Expected Time Complexity: O(n log(max(arr))) Expected Auxiliary Space: O(1). Constraints: 1 <= len(arr) <= 10^5 1 <= arr[i] <= 10^9","solution":"def makeEqual(arr): Returns the minimum number of operations required to make all elements in \'arr\' equal. # Find the maximum and minimum values in the array max_val = max(arr) min_val = min(arr) # The number of operations to make all elements equal will be the difference between max and min divided by 2 return (max_val - min_val) // 2"},{"question":"A student wants to buy a gaming console but realizes that the prices of consoles fluctuate every month. He decides to monitor the prices of two different consoles over a series of months and wants to know after how many months will the difference in the prices of the two consoles be the smallest. Here are the parameters: - Each month both console prices either increase or decrease in the same percentage. - At the end of each month the percentage change randomly varies between -5% and +5%. - The initial prices for both consoles are given. Write a function that simulates this scenario over a given number of months and returns the month number at which the price difference between the two consoles is the smallest and the corresponding smallest price difference. **Parameters and return of function:** ``` parameter (positive int or float, guaranteed) startPriceConsoleA (Console A price) parameter (positive int or float, guaranteed) startPriceConsoleB (Console B price) parameter (positive int, guaranteed) numMonths (Number of months to simulate) simulatePrices(500, 700, 12) should return [5, 14.28] or (5, 14.28) ``` **Explanation of the example:** ``` Starting prices are: Console A: 500 Console B: 700 Assume the price fluctuations over the months as follows: month 1: Console A: 515, Console B: 728 month 2: Console A: 530, Console B: 705 month 3: Console A: 521, Console B: 697 ... month 5: Console A: 590, Console B: 604 (Price difference = 604 - 590 = 14.28 -> smallest so far) ... Note: The function `simulatePrices` will simulate the prices over the given `numMonths`, calculate the percentage change each month, and keep track of the month with the smallest absolute price difference between the two consoles. ```","solution":"import random def simulatePrices(startPriceConsoleA, startPriceConsoleB, numMonths): min_difference = float(\'inf\') min_diff_month = -1 consoleA = startPriceConsoleA consoleB = startPriceConsoleB for month in range(1, numMonths + 1): percentage_change = random.uniform(-0.05, 0.05) consoleA += consoleA * percentage_change consoleB += consoleB * percentage_change price_difference = abs(consoleA - consoleB) if price_difference < min_difference: min_difference = price_difference min_diff_month = month return (min_diff_month, round(min_difference, 2))"},{"question":"A highway spanning a long distance has exactly N milestones marking its length at various points. These milestones are not equally placed but are positioned based on significant landmarks along the route. The milestone at position i has a coordinate xi. A driver wishes to travel from the first milestone to the last one with a restriction: the driver can only proceed further if the total distance spanned by all the milestones in the trip forms a prime number. If there are multiple ways to achieve this, the driver will choose the path which travels through the least number of milestones. If it\'s not possible to satisfy the prime distance condition, the driver won\'t make the trip. Your task is to write a program to determine the minimum number of milestones (including the first and last) the driver can travel through to make such a trip, or output -1 if the trip is impossible. Input: The input begins with a single integer T denoting the number of test cases. The following lines describe T test cases. For each test case: - The first line contains an integer N, the number of milestones. - The second line contains N space-separated integers representing the coordinates of the milestones in a sorted ascending order. Output: For each test case, output a single integer on a new line corresponding to the minimum number of milestones required to ensure the total distance is a prime number, or -1 if it is impossible. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 1 ≤ Coordinates of milestones ≤ 10^6 Note: - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. SAMPLE INPUT 2 5 2 3 5 7 11 4 10 20 30 40 SAMPLE OUTPUT 2 -1 Explanation Case #1: A valid path is from the milestone at position 2 to the milestone at position 3. The total distance spanned is 3 - 2 = 1 (which is not prime), hence 2 milestones can\'t directly work. From 2 to 11 spans 9 (not prime), but 2 to 11 spanning 9 takes 7 distances. Correctly checking, the sum or proper check will show 2 and 11. Case #2: It is impossible to achieve a total distance that is a prime number regardless of the milestones chosen. Hence, the output is -1.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if (num % i == 0) or (num % (i + 2) == 0): return False i += 6 return True def min_milestones_for_prime_distance(test_cases): results = [] for case in test_cases: N, milestones = case found = False min_milestones = float(\'inf\') for i in range(N): for j in range(i+1, N): distance = milestones[j] - milestones[i] if is_prime(distance): num_milestones = j - i + 1 min_milestones = min(min_milestones, num_milestones) found = True if found: results.append(min_milestones) else: results.append(-1) return results # Example usage: if __name__ == \\"__main__\\": T = int(input()) test_cases = [] for _ in range(T): N = int(input()) milestones = list(map(int, input().split())) test_cases.append((N, milestones)) results = min_milestones_for_prime_distance(test_cases) for result in results: print(result)"},{"question":"The city of Codeland has a unique transportation system consisting of n bidirectional roads connecting different intersections. Each road has a certain travel time associated with it, and the roads form a connected graph. The mayor of Codeland has decided to select some roads and place toll booths on them to collect revenue. However, there are certain constraints to ensure that the transportation system remains efficient: no two toll roads can be directly connected. Your task is to find the maximum number of toll booths that can be placed in the city without any two toll roads being directly connected. Two roads are directly connected if they share a common intersection. -----Input----- The first line contains integers n and m (1 le n le 1000, 0 le m le 2000) — the number of intersections and the number of roads in the city. Each of the next m lines contains three integers u, v and t (1 le u, v le n, u ne v, 1 le t le 10^6), representing a road between intersections u and v with travel time t. The graph is guaranteed to be connected. -----Output----- Print one integer — the maximum number of toll booths that can be placed. -----Examples----- Input 4 4 1 2 5 2 3 10 3 4 3 4 1 2 Output 2 Input 5 4 1 2 1 2 3 2 3 4 3 4 5 4 Output 2 -----Note----- In the first example, you can place toll booths on roads (1, 2) and (3, 4). Since these roads do not share any common intersections, this satisfies the problem constraints. In the second example, one possible configuration is placing toll booths on roads (1, 2) and (3, 4).","solution":"def maximum_toll_booths(n, m, roads): from collections import defaultdict def bpm(u, matchR, seen): for v in bipartite[u]: if not seen[v]: seen[v] = True if matchR[v] == -1 or bpm(matchR[v], matchR, seen): matchR[v] = u return True return False bipartite = defaultdict(list) intervals = [] for u, v, t in roads: intervals.append((u, v)) bipartite[u].append(v) bipartite[v].append(u) matchR = [-1] * (n + 1) result = 0 for i in range(1, n + 1): seen = [False] * (n + 1) if bpm(i, matchR, seen): result += 1 return result // 2"},{"question":"Write a function that takes a string as input and returns the longest substring that does not contain any repeating characters. If there are multiple such substrings of the same length, return the one that appears first. ```python longest_non_repeating_substring(\\"abcabcbb\\") == \\"abc\\" longest_non_repeating_substring(\\"bbbbb\\") == \\"b\\" longest_non_repeating_substring(\\"pwwkew\\") == \\"wke\\" ``` ```C longest_non_repeating_substring(\\"abcabcbb\\") == \\"abc\\"; longest_non_repeating_substring(\\"bbbbb\\") == \\"b\\"; longest_non_repeating_substring(\\"pwwkew\\") == \\"wke\\"; ```","solution":"def longest_non_repeating_substring(s): Returns the longest substring without repeating characters. If there are multiple substrings of the same length, the first one is returned. char_index = {} longest_substr = \\"\\" start = 0 for end, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = end if end - start + 1 > len(longest_substr): longest_substr = s[start:end+1] return longest_substr"},{"question":"You are given a list of `n` (2 ≤ n ≤ 100000) integers, and you need to process several queries. Each query asks you to compute the greatest common divisor (GCD) of all the integers in a specified subarray of the list. Input: The first line contains two integers, `n` (the number of elements in the list) and `q` (the number of queries). The second line contains `n` space-separated integers, representing the elements of the list. Each of the next `q` lines contains two integers, `l` and `r` (1 ≤ l ≤ r ≤ n), representing the range of the subarray for which the GCD is to be calculated. Output: For each query, output the GCD of the subarray elements on a new line. Constraints: 2 ≤ n, q ≤ 100000 Example Input: 6 3 12 15 18 21 24 27 2 4 1 6 3 5 Example Output: 3 3 3","solution":"import math from typing import List def gcd_subarray(n: int, q: int, array: List[int], queries: List[List[int]]) -> List[int]: result = [] for l, r in queries: subarray_gcd = array[l-1] for i in range(l, r): subarray_gcd = math.gcd(subarray_gcd, array[i]) result.append(subarray_gcd) return result"},{"question":"You are helping a fledgling tech company develop an inventory management system. The system needs a function to analyze product sales data and generate a list of top-selling products by category. Given a list of products, where each product is represented by a dictionary with the keys: \'name\', \'category\', and \'sales\', write a function to determine the top-selling product in each category. The product list will be a list of dictionaries, where each dictionary represents a product with the following structure: ```python { \'name\': str, \'category\': str, \'sales\': int } ``` Your function should return a dictionary where the keys are the category names and the values are the names of the top-selling products in that category. -----Input----- A list of dictionaries where each dictionary contains: - \'name\': a string representing the product name. - \'category\': a string representing the product category. - \'sales\': an integer representing the number of sales. -----Output----- A dictionary where each key is the category name and the value is the name of the top-selling product in that category. -----Examples----- Example Input: ``` [ {\'name\': \'Product A\', \'category\': \'Electronics\', \'sales\': 150}, {\'name\': \'Product B\', \'category\': \'Electronics\', \'sales\': 200}, {\'name\': \'Product C\', \'category\': \'Books\', \'sales\': 120}, {\'name\': \'Product D\', \'category\': \'Books\', \'sales\': 85}, {\'name\': \'Product E\', \'category\': \'Clothing\', \'sales\': 250}, {\'name\': \'Product F\', \'category\': \'Clothing\', \'sales\': 300} ] ``` Example Output: ``` { \'Electronics\': \'Product B\', \'Books\': \'Product C\', \'Clothing\': \'Product F\' } ``` Constraints - The input list will contain at least one product. - Each product will have a unique name within the same category. - Sales numbers will be non-negative integers.","solution":"def top_selling_products_by_category(products): Returns a dictionary with the top-selling product for each category from the input list of products. Parameters: products (list): A list of dictionaries, where each dictionary contains \'name\', \'category\', and \'sales\' keys. Returns: dict: A dictionary where each key is a category name and the value is the name of the top-selling product in that category. category_top_sellers = {} for product in products: category = product[\'category\'] name = product[\'name\'] sales = product[\'sales\'] if category not in category_top_sellers or category_top_sellers[category][\'sales\'] < sales: category_top_sellers[category] = {\'name\': name, \'sales\': sales} return {category: top[\'name\'] for category, top in category_top_sellers.items()}"},{"question":"Given a 2D grid of size m x n representing a map of \'1\'s (land) and \'0\'s (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You can assume all four edges of the grid are all surrounded by water. Example: Input: 11110 11010 11000 00000 Output: 1 Input: 11000 11000 00100 00011 Output: 3 Note: You must implement a solution using depth-first search (DFS) or breadth-first search (BFS) to traverse the grid.","solution":"def num_islands(grid): Returns the number of islands in the given grid. if not grid: return 0 m, n = len(grid), len(grid[0]) num_islands = 0 def dfs(i, j): if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == \'0\': return grid[i][j] = \'0\' # Mark as visited dfs(i+1, j) # Explore down dfs(i-1, j) # Explore up dfs(i, j+1) # Explore right dfs(i, j-1) # Explore left for i in range(m): for j in range(n): if grid[i][j] == \'1\': dfs(i, j) num_islands += 1 return num_islands"},{"question":"A city is planning to construct a new public transportation system with `N` subway stations. The stations are connected with `M` bidirectional subway lines, each having a specific travel time. To ensure efficiency, the city wants to optimize the travel time between all pairs of stations. You are given `Q` queries. Each query specifies two stations, and you are to determine the minimum travel time between these stations. If it\'s impossible to reach from one station to another using the subway lines, return `-1`. ------ Input ------ The first line of input contains two integers, `N` (1 ≤ N ≤ 1000) and `M` (0 ≤ M ≤ 5000) — the number of stations and the number of subway lines, respectively. The next `M` lines each contain three integers `u`, `v` and `w` (1 ≤ u, v ≤ N, `u` ≠ `v`, 1 ≤ w ≤ 1000) — representing a bidirectional subway line between stations `u` and `v` with a travel time of `w`. The next line contains an integer `Q` (1 ≤ Q ≤ 10000) — the number of queries. The next `Q` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ N) — representing a query for the minimum travel time between stations `a` and `b`. ------ Output ------ For each query, output the minimum travel time between stations `a` and `b`. If it is not possible to travel between the stations, output `-1`. ------ Constraints ------ 1 ≤ N ≤ 1000 0 ≤ M ≤ 5000 1 ≤ w ≤ 1000 1 ≤ Q ≤ 10000 ----- Sample Input ----- 4 3 1 2 4 2 3 1 3 4 2 3 1 4 1 3 2 1 ----- Sample Output ----- 7 5 4 ----- Explanation ----- Test 1: The minimum travel time from station 1 to station 4 is 7 (travel through the path 1 → 2 → 3 → 4 with times 4 + 1 + 2). Test 2: The minimum travel time from station 1 to station 3 is 5 (travel through the path 1 → 2 → 3 with times 4 + 1). Test 3: The minimum travel time from station 2 to station 1 is 4 (travel directly back through the subway from station 2 to station 1 with time 4).","solution":"def floyd_warshall(n, distances): # Initialize the distance matrix with infinity inf = float(\'inf\') dist = [[inf] * (n + 1) for _ in range(n + 1)] # Distance from a node to itself is 0 for i in range(1, n + 1): dist[i][i] = 0 # Fill initial distances based on input for u, v, w in distances: dist[u][v] = w dist[v][u] = w # Floyd-Warshall algorithm for k in range(1, n + 1): for i in range(1, n + 1): for j in range(1, n + 1): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def min_travel_time(n, m, edges, q, queries): # Compute all pairs shortest path dist = floyd_warshall(n, edges) results = [] for a, b in queries: if dist[a][b] == float(\'inf\'): results.append(-1) else: results.append(dist[a][b]) return results"},{"question":"You are given a list of integers. Your task is to find three distinct integers in the list that add up to a given target sum. If no such triplet exists, return an empty list. If multiple such triplets are possible, return the lexicographically smallest triplet. Input: The first line consists of T, the number of test cases. Each test case consists of two lines: The first line contains an integer target, the desired sum. The second line contains a space-separated list of integers. Output: Print the answer to each test case on a new line. Each answer should be a space-separated triplet of integers, or an empty list if no such triplet exists. Constraints: 1 ≤ T ≤ 10 1 ≤ |list of integers| ≤ 1000 -10^6 ≤ integer value ≤ 10^6 Example input: 2 10 1 2 3 4 5 6 7 8 9 15 2 2 2 2 2 Example output: 1 2 7 []","solution":"from typing import List, Tuple def find_three_sum(target: int, numbers: List[int]) -> List[int]: numbers.sort() # Sorting the list to ease the process of finding the lexicographically smallest triplet n = len(numbers) for i in range(n - 2): if i > 0 and numbers[i] == numbers[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = numbers[i] + numbers[left] + numbers[right] if current_sum == target: return [numbers[i], numbers[left], numbers[right]] elif current_sum < target: left += 1 else: right -= 1 return [] def solve(T: int, test_cases: List[Tuple[int, List[int]]]) -> List[List[int]]: results = [] for target, numbers in test_cases: result = find_three_sum(target, numbers) results.append(result) return results"},{"question":"Chef has an array A of N integers. In one operation, Chef can: Select two different elements A[i] and A[j] (1 ≤ i, j ≤ N) and replace both with their average value, provided their average is an integer. For example, if A = [2, 4, 6] and Chef applies the operation on i = 1 and j = 2, then: A = [3, 3, 6]. Find whether it is possible to make all elements of the array equal using any (possibly zero) number of these operations. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N — the size of the array A. - The second line of each test case contains N integers A[1], A[2], ..., A[N]. ------ Output Format ------ For each test case, output YES if it is possible to make all elements equal using the given operations. Otherwise, output NO. You can print each character of the string in uppercase or lowercase. For example, the strings YES, yes, Yes, and yEs are all considered the same. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9 - Sum of N over all test cases does not exceed 2 cdot 10^5. ----- Sample Input 1 ------ 3 4 2 8 4 6 3 4 5 6 2 7 7 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test case 1: We can perform the following operations: - Select elements 2 and 8. Their average is 5. Array becomes [5, 5, 4, 6]. - Select elements 4 and 6. Their average is 5. Array becomes [5, 5, 5, 5]. Test case 2: It can be proven that it is impossible to make all elements equal using the given operations. Test case 3: All elements are already equal.","solution":"def can_make_equal(arr): Returns \'YES\' if all elements in the array can be made equal by using the given operations, otherwise returns \'NO\'. # Checking if all numbers have the same parity first_parity = arr[0] % 2 for num in arr: if num % 2 != first_parity: return \'NO\' return \'YES\' def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] result = can_make_equal(A) results.append(result) return results"},{"question":"You are given a string of lowercase English letters. You want to rearrange the letters of the string to form the lexicographically smallest string possible. Additionally, the rearranged string should not contain any two adjacent letters that are the same. If it is not possible to create such a string, return an empty string. Constraints * 1 ≤ length of input string ≤ 10^5 Input The input is given from Standard Input in the following format: s Output Print the lexicographically smallest string possible that meets the condition, or an empty string if it\'s not possible. Examples Input aabbc Output abcab Input aaab Output","solution":"from collections import Counter import heapq def reorganize_string(s: str) -> str: if not s: return \\"\\" # Get the frequency of each character counter = Counter(s) # Max heap for storing the characters by frequency max_heap = [(-freq, ch) for ch, freq in counter.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap or prev_freq < 0: if not max_heap: return \\"\\" freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char, prev_freq = char, freq + 1 return \\"\\".join(result)"},{"question":"Given a string of words separated by spaces, your solution should return the length of the shortest word. For example: - Given `\\"The quick brown fox\\"` your solution will return `3` (the length of \\"The\\") - Given `\\"Jumped over the lazy dog\\"` your solution will return `3` (the length of \\"the\\") You can assume, for the purpose of this kata, that the input string will not be empty.","solution":"def find_shortest_word_length(s): Returns the length of the shortest word in the given string s. words = s.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"Given a matrix of size MxN, the task is to find the maximum sum of any hourglass shape in the matrix. An hourglass shape is defined as a subset of values with indices falling in this pattern in an MxN array: ``` a b c d e f g ``` Example 1: Input: M = 3, N = 3, matrix = [ [1, 1, 1], [0, 1, 0], [1, 1, 1] ] Output: 7 Explanation: The only hourglass in the matrix is the entire matrix itself with sum 1 + 1 + 1 + 1 + 1 + 1 + 1 = 7. Example 2: Input: M = 4, N = 4, matrix = [ [1, 2, 3, 0], [0, 1, 0, 0], [1, 1, 1, 0], [0, 0, 2, 4] ] Output: 10 Explanation: The hourglass with the maximum sum is: 1 2 3 1 1 1 1 with sum 1 + 2 + 3 + 1 + 1 + 1 + 1 = 10. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function maxHourglassSum() that takes a 2D array matrix and integers M and N as parameters and returns the desired output. Expected Time Complexity: O(M*N). Expected Auxiliary Space: O(1). Constraints: - 3 ≤ M, N ≤ 100 - -10^6 ≤ matrix[i][j] ≤ 10^6","solution":"def maxHourglassSum(matrix, M, N): max_sum = float(\'-inf\') for i in range(M - 2): for j in range(N - 2): top = matrix[i][j] + matrix[i][j + 1] + matrix[i][j + 2] middle = matrix[i + 1][j + 1] bottom = matrix[i + 2][j] + matrix[i + 2][j + 1] + matrix[i + 2][j + 2] hourglass_sum = top + middle + bottom max_sum = max(max_sum, hourglass_sum) return max_sum"},{"question":"A robot is moving in a 2D grid. It starts at the origin point (0, 0) and follows a series of instructions. Each instruction is a string composed of words \'UP\', \'DOWN\', \'LEFT\', and \'RIGHT\', followed by an integer representing the number of steps in that direction. The robot’s movements are subjected to the following constraints: - \'UP\' increases the y-coordinate. - \'DOWN\' decreases the y-coordinate. - \'LEFT\' decreases the x-coordinate. - \'RIGHT\' increases the x-coordinate. You are required to calculate the robot’s final position after executing all the instructions. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case starts with a single integer N, denoting the number of instruction strings. - The next N lines contain an instruction string combining direction and steps, separated by a space. ------ Output Format ------ For each test case, output in a single line two space-separated integers, denoting the final x and y coordinates of the robot after executing all the instructions. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^4 1 ≤ steps ≤ 10^6 ------ Sample Input 1 ------ 2 3 UP 5 LEFT 3 DOWN 2 4 RIGHT 10 UP 2 LEFT 5 DOWN 3 ------ Sample Output 1 ------ -3 3 5 -1 ------ Explanation 1 ------ Test Case 1: - Initial position: (0, 0) - Move UP by 5 units: (0, 5) - Move LEFT by 3 units: (-3, 5) - Move DOWN by 2 units: (-3, 3) Test Case 2: - Initial position: (0, 0) - Move RIGHT by 10 units: (10, 0) - Move UP by 2 units: (10, 2) - Move LEFT by 5 units: (5, 2) - Move DOWN by 3 units: (5, -1)","solution":"def calculate_final_position(instructions_list): Calculates the final coordinates of the robot after executing the given instructions. Parameters: instructions_list (list): A list of tuples where each tuple contains a direction string and a step integer. Returns: tuple: The final (x, y) coordinates of the robot. x, y = 0, 0 for direction, steps in instructions_list: if direction == \'UP\': y += steps elif direction == \'DOWN\': y -= steps elif direction == \'LEFT\': x -= steps elif direction == \'RIGHT\': x += steps return x, y def process_test_cases(T, test_cases): Processes multiple test cases to find the final coordinates of the robot for each test case. Parameters: T (int): Number of test cases. test_cases (list): A list of test cases, each containing a list of instructions. Returns: list: A list of tuples, where each tuple contains the final (x, y) coordinates for each test case. results = [] for instructions in test_cases: results.append(calculate_final_position(instructions)) return results"},{"question":"In a college football tournament, a set of n matches will be held between two randomly chosen teams. Each team can be uniquely identified with an integer from 1 to N, where N is the total number of teams participating in the tournament. Each of the matches has a specific outcome in which one of the teams wins and the other team loses. Your task is to simulate the outcome of these n matches and determine: - The team with the highest number of wins. - In case of a tie (two or more teams having the highest number of wins), output all the teams in numerical order. Input: 1. The first line consists of two integers N (2 ≤ N ≤ 100) and n (1 ≤ n ≤ 1000) where N is the number of teams and n is the number of matches. 2. The following n lines each describe one match result using two integers a and b, where 1 ≤ a, b ≤ N and a ≠ b. The integer a represents the winner of the match, and b represents the loser. Output: - Output all the teams with the highest number of wins in numerical order, separated by a space. Example Input: 5 7 2 1 3 2 4 5 3 4 2 3 3 1 5 4 Example Output: 3 Explanation: - Team 2 beats Team 1 - Team 3 beats Team 2 - Team 4 beats Team 5 - Team 3 beats Team 4 - Team 2 beats Team 3 - Team 3 beats Team 1 - Team 5 beats Team 4 The number of wins for each team: 1 => 0, 2 => 2, 3 => 3, 4 => 1, 5 => 1 Team 3 has the highest number of wins, which is 3. Hence, the output is 3. Example Input: 3 4 1 2 2 3 3 1 1 3 Example Output: 1 2 3 Explanation: - Team 1 beats Team 2 - Team 2 beats Team 3 - Team 3 beats Team 1 - Team 1 beats Team 3 The number of wins for each team: 1 => 2, 2 => 1, 3 => 1 Teams 1 has the highest number of wins, which is 2. Since there is no tie, the output is 1.","solution":"def football_tournament(N, matches): Determines the team(s) with the highest number of wins. Parameters: N (int): The number of teams. matches (List[Tuple[int, int]]): A list of match results where each tuple represents (winner, loser). Returns: List[int]: List of teams with the highest number of wins in numerical order. from collections import Counter wins = Counter() for winner, loser in matches: wins[winner] += 1 max_wins = max(wins.values(), default=0) top_teams = [team for team, win_count in wins.items() if win_count == max_wins] return sorted(top_teams)"},{"question":"You are given a 5 times 5 grid where some cells are blocked, and you cannot pass through them. You need to find the shortest path from the top-left corner of the grid (0, 0) to the bottom-right corner (4, 4). In this problem, the grid is represented by 0s and 1s, where 0s represent open cells, and 1s represent blocked cells. You can move horizontally or vertically through the open cells. Write a program to read the grid and print the fewest steps required to reach the bottom-right corner from the top-left corner. If there is no path, print -1. Constraints * The grid will always be a 5 times 5 matrix. * There will always be a starting (0, 0) and ending point (4, 4) that are open (0s). Input The 5 times 5 grid of integers 0 or 1. Output Print the fewest steps in a line, or -1 if there is no path. Example Input 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 1 0 Output 8","solution":"from collections import deque def shortest_path(grid): Finds the shortest path in a 5x5 grid from the top-left corner to the bottom-right corner. Returns the length of the shortest path or -1 if no path exists. rows, cols = 5, 5 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right # Check if the start or end positions are blocked if grid[0][0] == 1 or grid[4][4] == 1: return -1 # Queue for BFS queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # Check if we\'ve reached the end if (x, y) == (4, 4): return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If we exit the loop without finding a path return -1 # Example usage grid = [ [0, 0, 1, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 1], [1, 0, 1, 0, 0], [0, 0, 0, 1, 0] ] print(shortest_path(grid)) # Output: 8"},{"question":"Given an input list of integers, return the list sorted in ascending order but with all prime numbers at the beginning of the list, followed by non-prime numbers. Preserve the original relative order of all prime and non-prime numbers within their respective sections. Input Input list of integers. Output Output list of integers, primes first followed by non-primes. Example Input: [11, 4, 7, 10, 3, 8, 14] Output: [11, 7, 3, 4, 10, 8, 14]","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sort_primes_first(lst): Sort the list with prime numbers first while preserving the relative order of the primes and non-primes. primes = [x for x in lst if is_prime(x)] non_primes = [x for x in lst if not is_prime(x)] return primes + non_primes"},{"question":"One day, program enthusiast Hana encountered an array of integers (a_1, ..., a_N), and she became intrigued by an interesting property of subarrays. She defined the \\"difference value\\" of a subarray as the difference between its maximum and minimum elements. Given an array of integers, Hana wants to know the maximum difference value among all possible subarrays. Can you help Hana find this maximum difference value? Constraints * 2 leq N leq 1000 * 1 leq a_i leq 10^9 Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print the maximum difference value among all possible subarrays. Examples Input 5 1 3 2 7 9 Output 8 Input 6 4 4 4 4 4 4 Output 0","solution":"def max_difference_value(N, array): Returns the maximum difference value among all subarrays of the given array. max_diff = 0 for i in range(N): for j in range(i, N): subarray = array[i:j+1] current_diff = max(subarray) - min(subarray) if current_diff > max_diff: max_diff = current_diff return max_diff"},{"question":"A spaceship travels along a line in the 2D plane from point (0, 0) to point (x, y). However, the spaceship can only move according to a specific rule: it can only move to points where the sum of the coordinates is the same. Specifically, it can move from (a, b) to (a + k, b - k) for any positive integer k such that both coordinates remain non-negative. Given the coordinates of the destination (x, y), determine if it is possible for the spaceship to reach the point (x, y) from the origin (0, 0) following the given rule. Input The only input is a string containing two space-separated integers x and y (0 ≤ x, y ≤ 100), representing the coordinates of the destination point. Output If it is possible for the spaceship to reach the point (x, y) from (0, 0) print \\"YES\\" (without the quotes). Otherwise, print \\"NO\\" (without the quotes). Examples Input 3 4 Output YES Input 2 2 Output NO Note In the first example, the spaceship can move as follows: * Move from (0, 0) to (3, 0) and then to (3, 4), since the sum of the coordinates remains constant (0). In the second example, the sum of the coordinates remains invariant and cannot change to reach the point (2, 2) starting from (0, 0).","solution":"def can_reach_destination(input_str): x, y = map(int, input_str.split()) # The sum of the coordinates must remain invariant. # Since we start at (0,0) where the sum is 0, # the sum of x and y should be zero based on movement rule. return \\"YES\\" if x == y else \\"NO\\""},{"question":"Given a list of integers, write a function that groups them into sublists of consecutive numbers. The sublists should maintain the original order of numbers and should be as large as possible while the numbers are consecutive. If there are no consecutive numbers, each number should be its own sublist. Input The input will be a single list of integers. Each integer will be between -1000 and 1000. The list will contain between 1 and 100 integers. Output The output should be a list of sublists. Each sublist should contain consecutive numbers in the order they appear in the input list. Example Input: [1, 2, 3, 7, 8, 10, 11, 12, 14] Output: [[1, 2, 3], [7, 8], [10, 11, 12], [14]] Input: [4, 5, 1, 2, 3, 10] Output: [[4, 5], [1, 2, 3], [10]]","solution":"def group_consecutive(numbers): Groups a list of integers into sublists of consecutive numbers. Parameters: numbers (list): A list of integers. Returns: list: A list of sublists where each sublist contains consecutive numbers. if not numbers: return [] grouped = [] temp_group = [numbers[0]] for i in range(1, len(numbers)): if numbers[i] == numbers[i-1] + 1: temp_group.append(numbers[i]) else: grouped.append(temp_group) temp_group = [numbers[i]] grouped.append(temp_group) return grouped"},{"question":"Problem Statement You are given an input which is a list of integers. Write a function that calculates the Longest Arithmetic Subsequence (LAS) length. An arithmetic sequence is a sequence of numbers such that the difference between consecutive terms is constant. An arithmetic subsequence is a subsequence of the given list that forms an arithmetic sequence. Implement the function `longest_arithmetic_subsequence(arr: List[int]) -> int` that: - Inputs: - `arr`: A list of integers (from -10^3 to 10^3 ) of length n ( 1 leq n leq 1000 ) - Output: - Returns an integer representing the length of the longest arithmetic subsequence in `arr`. # Examples Example 1: **Input:** ```python arr = [3, 6, 9, 12] ``` **Output:** ```python 4 ``` **Explanation:** The entire array forms an arithmetic sequence with a common difference of 3. Example 2: **Input:** ```python arr = [9, 4, 7, 2, 10] ``` **Output:** ```python 3 ``` **Explanation:** The longest arithmetic subsequence is either `[4, 7, 10]` with a common difference of 3, or `[9, 7, 4]` with a common difference of -3. Example 3: **Input:** ```python arr = [20, 1, 15, 3, 10, 5, 8] ``` **Output:** ```python 4 ``` **Explanation:** The longest arithmetic subsequence is `[20, 15, 10, 5]` with a common difference of -5. # Note - Subsequences can be derived from the original list by deleting some or no elements without changing the order of the remaining elements. - The solution should be optimized to handle the upper input constraints efficiently.","solution":"from typing import List def longest_arithmetic_subsequence(arr: List[int]) -> int: if not arr: return 0 n = len(arr) if n == 1: return 1 dp = [{} for _ in range(n)] max_length = 2 # Minimal length of arithmetic sequence is 2 for i in range(1, n): for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"Problem Statement John is training for a mountain climbing competition. He needs to climb a certain total height, H meters, over N days, but due to varying weather conditions, the height he can climb each day is uncertain. Given an array P of length N where P[i] represents the maximum possible height John can climb on the i-th day under perfect conditions, determine the minimum number of days required for John to climb at least H meters if the height climbed on any given day cannot exceed P[i]. Example 1: Input: N = 5, H = 100 P = {10, 20, 50, 30, 70} Output: 3 Explanation: John can choose the 3rd and 5th days to climb the maximum possible heights (50 + 70 = 120), which exceeds the required height of 100 meters in 3 days. Example 2: Input: N = 4, H = 90 P = {20, 20, 20, 20} Output: 5 Explanation: Even though N is 4 and each day John can climb 20 meters at most, the total height climbed in 4 days will be 80 meters, which is less than required height H (90). John needs at least 5 days to climb 100 meters if he can extend his training period. Your Task: You do not need to read input or print anything. Your task is to complete the function minDaysToClimb() which takes the values N, H, and the array P as input parameters and returns the minimum number of days required for John to climb at least H meters. Expected Time Complexity: O(N*log(H)) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ P[i], H ≤ 10^{9} ```python def minDaysToClimb(N, H, P): # Your implementation here ```","solution":"def minDaysToClimb(N, H, P): P.sort(reverse=True) total_height = 0 days = 0 for height in P: total_height += height days += 1 if total_height >= H: return days # If we exhausted all climbing days but still didn\'t meet the height if total_height >= H: return days else: # Calculate how many extra days needed if not enough remaining_height = H - total_height extra_days = (remaining_height + max(P) - 1) // max(P) return days + extra_days"},{"question":"In a remote village, there is a unique tree named the Fibonacci Tree. The Fibonacci Tree is structured in such a way that each of its branches follows the Fibonacci sequence: the thickness of any branch is the sum of the thicknesses of the two preceding branches. The village elder has tasked you with calculating the thickness of a particular branch in the tree. Initially, the first two branches of the tree have specific and unique thickness values. Your task is to find the thickness of the branch at a specific position within this sequence defined by the Fibonacci logic. -----Input----- The input consists of three space-separated integers: - The first integer, T_1 (1 leq T_1 leq 10^9), represents the thickness of the first branch. - The second integer, T_2 (1 leq T_2 leq 10^9), represents the thickness of the second branch. - The third integer, N (1 leq N leq 10^7), represents the position of the branch whose thickness needs to be determined. -----Output----- Print a single integer denoting the thickness of the branch at the Nth position. -----Examples----- Sample Input 1: 1 1 5 Sample Output 1: 5 Sample Input 2: 2 3 6 Sample Output 2: 21 Explanation: - In the first example, the sequence is: 1, 1, 2, 3, 5. - In the second example, the sequence is: 2, 3, 5, 8, 13, 21.","solution":"def fibonacci_thickness(T1, T2, N): Calculates the thickness of the branch at the Nth position in the Fibonacci Tree sequence. Parameters: T1 (int): Thickness of the first branch. T2 (int): Thickness of the second branch. N (int): Position of the branch whose thickness is to be found. Returns: int: Thickness of the branch at the Nth position. if N == 1: return T1 elif N == 2: return T2 a, b = T1, T2 for _ in range(N - 2): a, b = b, a + b return b"},{"question":"To organize a group project, students are given unique 7-character alphanumeric codes representing their assigned groups. The project organizer wants to validate these codes to ensure they all follow the format: three uppercase letters followed by four digits (e.g., \\"ABC1234\\"). Write a function `validate_group_code` that takes a list of strings (group codes) and returns a list of booleans. Each boolean should be `True` if the corresponding code follows the format and `False` otherwise. **Input:** - A list of strings, where each string represents a group code. **Output:** - A list of booleans, where each boolean indicates whether the corresponding group code is valid. **Example:** ```python validate_group_code([\\"ABC1234\\", \\"AB12345\\", \\"XYZ6789\\"]) ``` **Output:** ```python [True, False, True] ```","solution":"import re def validate_group_code(codes): Validates a list of group codes to check if each one follows the format of three uppercase letters followed by four digits (e.g., \\"ABC1234\\"). Args: codes (list of str): The list of group codes to validate. Returns: list of bool: A list of booleans indicating whether each group code is valid. pattern = re.compile(r\'^[A-Z]{3}d{4}\') return [bool(pattern.match(code)) for code in codes]"},{"question":"You are given a list containing mixed types of numbers and strings, where the strings represent numbers in their word form. Your task is to return a new list sorted in ascending order, where the strings are converted to their numerical forms for comparison. The valid words in the strings are \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\", and \\"ten\\". For example, ```python arr = [3, \\"one\\", 2, \\"five\\", 7, \\"three\\"] sort_mixed_numbers(arr) => [\\"one\\", 2, 3, \\"three\\", \\"five\\", 7] ``` Explanation: After converting the strings to numbers, the sorted sequence is [1, 2, 3, 3, 5, 7], which corresponds to [\\"one\\", 2, 3, \\"three\\", \\"five\\", 7] in the original mixed-type format.","solution":"def sort_mixed_numbers(arr): Returns a new list sorted in ascending order, where the strings are converted to their numerical forms for comparison. word_to_num = { \\"one\\": 1, \\"two\\": 2, \\"three\\": 3, \\"four\\": 4, \\"five\\": 5, \\"six\\": 6, \\"seven\\": 7, \\"eight\\": 8, \\"nine\\": 9, \\"ten\\": 10 } # Convert all elements to numbers for sorting comparison converted = [(word_to_num[x] if isinstance(x, str) else x) for x in arr] # Create a paired list of (converted value, original value) for sorting paired = list(zip(converted, arr)) # Sort paired list by converted value paired_sorted = sorted(paired, key=lambda x: x[0]) # Extract the original values from the sorted paired list result = [x[1] for x in paired_sorted] return result"},{"question":"A company is offering a discount to all its subscription plans. The discount percentage is applied based on the number of months subscribed in a block. For example, a 6-month subscription might have a 5% discount, and a 12-month subscription might have a 10% discount. Each subscription plan has its base monthly cost, and you are given the discounted prices for various subscription blocks. Your task is to determine which subscription plan offers the lowest effective monthly cost after discounts are applied. -----Input----- The first line contains an integer T (1 le T le 10), the number of subscription plans. Each subscription plan starts with a line containing an integer C (1 le C le 1000), the base monthly cost in dollars. The next line contains an integer B (1 le B le 10), the number of subscription blocks. The following B lines each contain two integers M (1 le M le 24) and D (0 le D le 100) — the number of months in the block and the percentage discount for that block. -----Output----- Print a single integer which is the lowest effective monthly cost among all the available subscription plans, rounded down to the nearest integer. -----Explanation of Sample Inputs----- In the first example, the base monthly cost is 100 dollars. For a 6-month subscription block with a 5% discount, the total cost would be 6 times 100 times 0.95 = 570, hence 570/6 = 95 dollars monthly. For a 12-month block with a 10% discount, the total cost would be 12 times 100 times 0.90 = 1080, hence 1080/12 = 90 dollars monthly. Thus, the lowest effective monthly cost is 90 dollars. -----Examples----- Sample Input: 2 100 2 6 5 12 10 200 1 3 20 Sample Output: 90","solution":"def lowest_effective_monthly_cost(subscriptions): Determines the lowest effective monthly cost among all available subscription plans. Args: subscriptions (list of dict): Each dict represents a subscription plan with base cost and blocks. Returns: int: The lowest effective monthly cost among all plans rounded down to the nearest integer. min_cost = float(\'inf\') for plan in subscriptions: base_cost = plan[\'base_cost\'] for block in plan[\'blocks\']: months, discount = block effective_cost = base_cost * (1 - discount / 100) monthly_cost = (effective_cost * months) / months min_cost = min(min_cost, monthly_cost) return int(min_cost) def parse_input(input_str): Parses the input string into a more structured format for processing. Args: input_str (str): Raw input string containing the subscription plans data. Returns: list of dict: Structured list of subscription plans. lines = input_str.split(\'n\') T = int(lines[0]) index = 1 subscriptions = [] for _ in range(T): base_cost = int(lines[index]) index += 1 B = int(lines[index]) index += 1 blocks = [] for _ in range(B): M, D = map(int, lines[index].split()) blocks.append((M, D)) index += 1 subscriptions.append({\'base_cost\': base_cost, \'blocks\': blocks}) return subscriptions def main(input_str): subscriptions = parse_input(input_str) return lowest_effective_monthly_cost(subscriptions) # Example usage: # input_str = \\"2n100n2n6 5n12 10n200n1n3 20\\" # print(main(input_str)) # Output: 90"},{"question":"Alex is fond of solving puzzles. One day, he came across an interesting problem involving a sequence of numbers and subsegments. Given an array of n integers a1, a2, ..., an, Alex wants to perform q queries on this array. Each query can be of two types: 1. Given a range [l, r], determine the minimum number in the subsegment from index l to index r (inclusive). 2. Given an index i and a value x, update the array at index i to be equal to x. Help Alex by solving these queries optimally. Input The first line contains two integers n and q (1 ≤ n, q ≤ 105) — the length of the array and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. The following q lines describe the queries. Each query is given in one of the following formats: - \\"1 l r\\" (1 ≤ l ≤ r ≤ n) — a minimum query, asking for the minimum number in the subsegment from index l to index r. - \\"2 i x\\" (1 ≤ i ≤ n, 1 ≤ x ≤ 109) — an update query, which sets the element at index i equal to x. Output For each minimum query, print a single integer — the minimum number in the specified subsegment. Examples Input 5 3 5 3 8 6 2 1 2 4 2 3 1 1 1 5 Output 3 1","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) self.build(array) def build(self, array): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = array[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, idx, value): idx += self.n self.tree[idx] = value while idx > 1: idx //= 2 self.tree[idx] = min(self.tree[2 * idx], self.tree[2 * idx + 1]) def query(self, l, r): l += self.n r += self.n + 1 res = float(\'inf\') while l < r: if l % 2: res = min(res, self.tree[l]) l += 1 if r % 2: r -= 1 res = min(res, self.tree[r]) l //= 2 r //= 2 return res def solve(n, q, array, queries): segment_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: l, r = query[1] - 1, query[2] - 1 results.append(segment_tree.query(l, r)) elif query[0] == 2: i, x = query[1] - 1, query[2] segment_tree.update(i, x) return results"},{"question":"When an underground train system is built, it\'s crucial to monitor the network for any possible disruptions. A disruption in the train network can occur if a segment of the track is damaged, causing the affected stations to be cut off from the rest of the network. Given a list of stations and a list of direct connections between them, you should write a program that determines if removing any single connection (i.e., direct train segment) results in any pair of stations becoming disconnected. To simplify, you can assume that the network forms a connected undirected graph and that each station can be uniquely identified by an integer. Your task is to determine whether removing any one connection (i.e., edge) would split the network into two or more disconnected parts. -----Input----- The first line of the input contains two integers n (2 leq n leq 1000) and m (1 leq m leq 5000), the number of stations and the number of direct connections between stations, respectively. Then follow m lines, each containing two integers u and v (1 leq u, v leq n), indicating that there is a direct connection between stations u and v. It is guaranteed that the network forms a connected graph. -----Output----- The output should be a single string: \\"YES\\" if there is at least one connection whose removal would result in two or more disconnected sections of the network, or \\"NO\\" if no such connection exists. -----Examples----- Sample Input: 5 5 1 2 1 3 2 4 3 4 4 5 Sample Output: YES Sample Input: 4 5 1 2 1 3 2 3 2 4 3 4 Sample Output: NO","solution":"def is_critical_connection(n, m, connections): from collections import defaultdict def dfs(node, parent=None): nonlocal time discovery[node] = low[node] = time time += 1 for neighbor in graph[node]: if discovery[neighbor] == -1: # If neighbor is not visited children[node].append(neighbor) if dfs(neighbor, node): return True low[node] = min(low[node], low[neighbor]) if low[neighbor] > discovery[node]: # Found a critical connection return True elif neighbor != parent: # If neighbor is visited and not the parent of node low[node] = min(low[node], discovery[neighbor]) return False graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) discovery = [-1] * (n + 1) low = [-1] * (n + 1) children = defaultdict(list) time = 0 for station in range(1, n + 1): if discovery[station] == -1: # If station is not visited if dfs(station): return \\"YES\\" return \\"NO\\""},{"question":"Anna is an avid gardener and loves to plant trees in her garden. She has a special interest in decorative trees that are arranged in rows. One day, she noticed that some of her trees are not getting enough sunlight due to the shadow cast by taller trees in the row on sunny days. To remedy the situation, Anna decides to rearrange the trees in such a way that smaller trees are not blocked by taller ones. Anna decides to rearrange her trees by selecting trees to form a subsequence of her initial arrangement such that each tree in the subsequence gets enough sunlight. This means each tree in the selected subsequence must be shorter than the tree after it. You are given the heights of the trees in the initial arrangement. Write a program that reads these heights and outputs the length of the longest subsequence of trees such that each tree in the subsequence is shorter than the tree after it. # Input - The first line contains an integer, n (1 ≤ n ≤ 1000), representing the number of trees. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10000), which denote the heights of the trees in the initial arrangement. # Output - Print a single integer representing the length of the longest increasing subsequence of tree heights. # Example Input ```plaintext 6 5 3 4 8 6 7 ``` Output ```plaintext 4 ``` Explanation A longest increasing subsequence of heights is [3, 4, 6, 7], and its length is 4.","solution":"def longest_increasing_subsequence(heights): Returns the length of the longest increasing subsequence. if not heights: return 0 n = len(heights) lis = [1] * n for i in range(1, n): for j in range(i): if heights[i] > heights[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis) # Example usage # n = 6 # heights = [5, 3, 4, 8, 6, 7] # print(longest_increasing_subsequence(heights)) # Output: 4"},{"question":"Given a list of integers, write a function to determine the maximum difference between any two elements in the list. The catch is that the larger element must come after the smaller one in the original list. In other words, for the pair (i, j) where i < j, you need to find the maximum difference arr[j] - arr[i]. If no such pair exists (i.e., the list is sorted in descending order), return 0. Examples: ``` max_difference([2, 3, 10, 6, 4, 8, 1]) -> 8 max_difference([7, 9, 5, 6, 3, 2]) -> 2 max_difference([7, 6, 4, 3, 1]) -> 0 max_difference([1, 2, 3, 4, 5]) -> 4 max_difference([5]) -> 0 ``` You can assume: - The list will have at least one element. - Elements in the list are integers. Function Signature: ```python def max_difference(arr: List[int]) -> int: pass ``` Notes: - Ensure your solution runs efficiently even for larger inputs. - You may use additional helper functions if needed.","solution":"def max_difference(arr): Determines the maximum difference between any two elements in the list such that the larger element comes after the smaller one in the original list. if not arr or len(arr) < 2: return 0 min_element = arr[0] max_diff = 0 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"Sum of Adjacent Differences You are given a list of integers. Your task is to compute the sum of differences between each adjacent pair of elements in the list. The difference between each pair should be taken as the absolute value of the difference to ensure it is non-negative. For example: If the input list is [1, 3, 6, 2], the sum of absolute differences would be: |1-3| + |3-6| + |6-2| = 2 + 3 + 4 = 9 Write a function that takes a list of integers and returns the sum of absolute differences between each adjacent pair in the list. If the list contains fewer than 2 elements, the function should return 0. Function Signature: ```python def sum_of_adjacent_differences(arr: list) -> int: # your code here ``` Input: - A single line containing a space-separated list of integers. Output: - A single integer representing the sum of absolute differences between each adjacent pair in the list. Example: Input: 1 3 6 2 Output: 9 Input: 7 2 5 Output: 8 Input: 10 Output: 0","solution":"def sum_of_adjacent_differences(arr: list) -> int: Returns the sum of absolute differences between each adjacent pair of elements in the list. If the list has fewer than 2 elements, returns 0. if len(arr) < 2: return 0 total_diff = 0 for i in range(len(arr) - 1): total_diff += abs(arr[i] - arr[i + 1]) return total_diff"},{"question":"A botanist is studying a forest and wants to identify the most common tree species present in a specific section. The section of the forest is represented by a grid with R rows and C columns. Each cell in the grid contains the species of a tree. The botanist needs to determine the species that appears most frequently and count how many times it appears. If there is a tie, return the species that appears first in lexicographical order. Input Format The first line contains two integers, R and C, representing the number of rows and columns in the grid. Each of the next R lines contains C space-separated strings, representing the species of trees in that row. Output Format There will be two lines of output. The first line contains the most common tree species. The second line contains the frequency of that species. Constraints 1 ≤ R, C ≤ 1000 Each species string comprises only lowercase letters and has a length between 1 and 10. SAMPLE INPUT 3 3 oak pine birch oak birch pine pine oak oak SAMPLE OUTPUT oak 4","solution":"def most_common_tree_species(R, C, grid): Returns the most common tree species from the grid and its frequency. Args: - R: int, number of rows in the grid. - C: int, number of columns in the grid. - grid: list of list of strings, representing the tree species in the grid. Returns: - tuple: (most_common_species, frequency) where most_common_species is the most frequently occurring species in the grid and frequency is its count. from collections import Counter # Flatten the grid to a single list of species species_list = [tree for row in grid for tree in row] # Count the occurrences of each species species_count = Counter(species_list) # Find the species with the highest frequency, breaking ties by lexicographical order most_common_species = min(species_count.items(), key=lambda x: (-x[1], x[0])) return most_common_species[0], most_common_species[1] # Example usage: # grid = [ # [\\"oak\\", \\"pine\\", \\"birch\\"], # [\\"oak\\", \\"birch\\", \\"pine\\"], # [\\"pine\\", \\"oak\\", \\"oak\\"] # ] # R, C = 3, 3 # most_common_tree_species(R, C, grid) should return (\\"oak\\", 4)"},{"question":"Given a list of n integers representing the duration of n tasks, you need to schedule these tasks into two processors such that the difference in the total time taken by each processor is minimized. Each processor can handle only one task at a time. Write a function that will take in the list of task durations and return the minimum possible difference in the total times taken by each processor. Input: - A single integer n representing the number of tasks. - A list of n integers where each integer represents the duration of a task. Output: - A single integer representing the minimum difference in total time taken by each processor. Constraints: - 1 ≤ n ≤ 30 - 1 ≤ duration ≤ 1000 for each task Example Input: 5 2 3 7 1 4 Example Output: 1 Explanation: The tasks can be divided into the following way to minimize the difference: - Assign tasks with durations [2, 3, 4] to Processor 1 (Total time = 9) - Assign tasks with durations [7, 1] to Processor 2 (Total time = 8) - The difference is |9 - 8| = 1, which is the minimum possible.","solution":"def min_task_time_difference(n, tasks): Returns the minimum possible difference in total times taken by each processor. :param n: Integer, number of tasks :param tasks: List of integers, each representing the duration of a task :return: Integer, minimum difference in total time taken by each processor # Calculate the total sum of all tasks total_sum = sum(tasks) # Initialize a DP table dp = [False] * (total_sum + 1) dp[0] = True # Update the DP table for each task for task in tasks: for j in range(total_sum, task - 1, -1): if dp[j - task]: dp[j] = True # Find the closest sum to half of the total sum half_sum = total_sum // 2 for i in range(half_sum, -1, -1): if dp[i]: return total_sum - 2 * i"},{"question":"Yuki has a sequence of positive integers of length N, b = (b_1, b_2, ..., b_N). He wants to form a new sequence c by selecting exactly M elements from b (without rearranging the order of selected elements) such that their product is maximized. Given the values of N, M, and the sequence b, help Yuki find the maximum product possible. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ M ≤ N - 1 ≤ b_i ≤ 1000 -----Input----- Input is given from Standard Input in the following format: N M b_1 b_2 ... b_N -----Output----- Print the maximum possible product of the selected M elements. -----Sample Input----- 5 3 1 2 3 4 5 -----Sample Output----- 60 To produce the maximum product, select b_3, b_4, and b_5. The product is 3 * 4 * 5 = 60.","solution":"from itertools import combinations def max_product_of_selected_elements(N, M, b): Function to calculate the maximum product of M selected elements from sequence b while keeping their order. Args: N: int : Length of the sequence b M: int : Number of elements to select to form sequence c b: list : List of integers representing the sequence b Returns: int: Maximum possible product of the selected M elements max_product = -1 # Generate all combinations of M elements from the list b for combo in combinations(b, M): # Calculate the product of current combination product = 1 for num in combo: product *= num # Update max_product if current combination\'s product is greater if product > max_product: max_product = product return max_product"},{"question":"You are given two strings, **str1** and **str2**, and an integer **k**. You need to determine if you can make the strings equal by performing exactly **k** operations on **str1**. In each operation, you can: 1. Delete the last character of **str1**. 2. Append any character to the end of **str1**. Write a function that returns whether it is possible to transform **str1** into **str2** using exactly **k** operations. # Input - Two strings **str1** and **str2**. - An integer **k**. # Output - Return \\"Yes\\" if it is possible to transform **str1** into **str2** using exactly **k** operations. Otherwise, return \\"No\\". # Constraints - 1 <= |str1|, |str2| <= 100 - 1 <= k <= 100 # Examples Example 1: **Input:** str1 = \\"abc\\" str2 = \\"def\\" k = 6 **Output:** Yes **Explanation:** - Delete last 3 characters of \\"abc\\" to get an empty string: **abc** -> ** ** (3 operations) - Append characters \\"d\\", \\"e\\", and \\"f\\" to the empty string to get \\"def\\": ** ** -> **def** (3 operations) Example 2: **Input:** str1 = \\"abc\\" str2 = \\"def\\" k = 4 **Output:** No **Explanation:** - Deleting all 3 characters of \\"abc\\" needs 3 operations, but transforming an empty string to \\"def\\" with 3 append operations requires a total of 6 operations.","solution":"def can_transform(str1, str2, k): Determines if it is possible to transform str1 into str2 using exactly k operations. Each operation can be either deleting the last character of str1 or appending any character to the end of str1. # Calculate the common length of the prefix of both strings common_length = 0 for c1, c2 in zip(str1, str2): if c1 == c2: common_length += 1 else: break # Calculate the number of operations needed total_ops = (len(str1) - common_length) + (len(str2) - common_length) # Check if the operations needed are less than or equal to k and the difference # between k and required operations should be even to allow for \'noop\' operations return \\"Yes\\" if total_ops <= k and (k - total_ops) % 2 == 0 else \\"No\\""},{"question":"Given a string `s` and an integer `k`, determine whether it is possible to rearrange the characters in `s` to form a palindrome string such that each palindrome string has exactly `k` distinct characters. A palindrome is a string that reads the same forward and backward. __Example__ * For `s = \\"aabbcc\\"`, `k = 3`, the output should be `isKPalindromePossible(s, k) = true`. It is possible to rearrange \\"aabbcc\\" to \\"abccba\\", which has exactly 3 distinct characters. * For `s = \\"aabbccc\\"`, `k = 2`, the output should be `isKPalindromePossible(s, k) = false`. It is impossible to rearrange \\"aabbccc\\" to any palindrome string with exactly 2 distinct characters. * For `s = \\"aabb\\"`, `k = 2`, the output should be `isKPalindromePossible(s, k) = true`. It is possible to rearrange \\"aabb\\" to \\"abba\\", which has exactly 2 distinct characters. __Input/Output__ * [input] string s A string of lowercase English letters. Constraints: `1 ≤ s.length ≤ 1000`. * [input] integer k An integer representing the exact number of distinct characters needed in the palindrome. Constraints: `1 ≤ k ≤ 26`. * [output] boolean `true`, if it\'s possible to rearrange the characters in `s` to form a palindrome string with exactly `k` distinct characters. `false`, if it\'s not possible.","solution":"def isKPalindromePossible(s, k): from collections import Counter # Count the frequency of each character freq = Counter(s) # Count characters with odd frequency odd_count = sum(1 for count in freq.values() if count % 2 == 1) # Check if we can form a palindrome if odd_count > 1: return False # Check if the number of distinct characters in string matches k distinct_chars = len(freq) return distinct_chars == k"},{"question":"Problem Statement You are given an array of integers A of size N and an integer K. The array is considered to be well-ordered if all subarrays of size K have the same sum. You need to process Q queries of the following types: - Query 1: Update an element in the array. ```plaintext 1 i x ``` Update the i^{th} element of the array A with value x. - Query 2: Check and return if the array is well-ordered. ```plaintext 2 ``` Return `1` if the array is well-ordered; otherwise, return `0`. # Input - An integer N (1 leq N leq 10^5), the size of the array. - An array A of N integers (1 leq A[i] leq 10^9). - An integer K (1 leq K leq N ), the size of the subarray. - An integer Q (1 leq Q leq 10^5), the number of queries. - Q queries, each of which is either Query 1 or Query 2: - `1 i x`: An update query where 1 leq i leq N and 1 leq x leq 10^9. - `2`: A check query. # Output For each Query 2, output `1` if the array is well-ordered, otherwise output `0`. # Example Input ```plaintext 5 3 1 4 1 5 3 6 1 2 6 2 1 5 9 2 1 3 2 2 ``` Output ```plaintext 0 1 0 ``` # Explanation: In the example above: - Initial array: [3, 1, 4, 1, 5], K = 3 - Query 1: Update index 2 to 6, array becomes [3, 6, 4, 1, 5] - Query 2: Check if the array is well-ordered for subarrays of size K=3: - Subarray sums: [3+6+4=13, 6+4+1=11, 4+1+5=10] → Not well-ordered → Output `0` - Query 1: Update index 5 to 9, array becomes [3, 6, 4, 1, 9] - Query 2: Check if the array is well-ordered for subarrays of size K=3: - Subarray sums: [3+6+4=13, 6+4+1=11, 4+1+9=14] → Not well-ordered → Output `0` - Query 1: Update index 3 to 2, array becomes [3, 6, 2, 1, 9] - Query 2: Check if the array is well-ordered for subarrays of size K=3: - Subarray sums: [3+6+2=11, 6+2+1=9, 2+1+9=12] → Not well-ordered → Output `0`","solution":"def process_queries(N, A, K, Q, queries): from itertools import islice result = [] def is_well_ordered(): if K > N: return 1 subarray_sum = sum(A[:K]) for i in range(1, N - K + 1): new_sum = subarray_sum - A[i - 1] + A[i + K - 1] if new_sum != subarray_sum: return 0 return 1 for query in queries: if query[0] == 2: result.append(is_well_ordered()) else: _, i, x = query A[i - 1] = x return result"},{"question":"Given a positive integer N, determine the minimum number of steps required to reduce it to 1. In each step, you may choose one of the following operations: 1. Subtract 1 from the number. 2. If the number is divisible by 2, divide the number by 2. 3. If the number is divisible by 3, divide the number by 3. Example 1: Input: N = 10 Output: 3 Explanation: Step 1: Divide by 2, resulting in 5. Step 2: Subtract 1, resulting in 4. Step 3: Divide by 2, resulting in 2. Step 4: Divide by 2, resulting in 1. Example 2: Input: N = 6 Output: 2 Explanation: Step 1: Divide by 3, resulting in 2. Step 2: Divide by 2, resulting in 1. Your Task: You do not need to read input or print anything. Your task is to complete the function minReduceToOne() which takes the value N as an input parameter and returns the minimum number of steps to reduce the number to 1. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^6","solution":"def minReduceToOne(N): if N == 1: return 0 dp = [float(\'inf\')] * (N + 1) dp[1] = 0 for i in range(2, N + 1): dp[i] = dp[i - 1] + 1 if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) return dp[N]"},{"question":"You are given two positive integers M and N. Each of these integers represents the number of rows and columns in an M x N grid. Starting from the top-left corner of the grid (0, 0), you can move right or down to reach the bottom-right corner of the grid (M-1, N-1). The task is to calculate the total number of unique paths from the top-left to the bottom-right corner. Input Format:- The input consists of two integers, M and N, separated by a space. Output Format:- Print the total number of unique paths from the top-left to the bottom-right corner of the grid. Constraints:- 1 ≤ M, N ≤ 100 SAMPLE INPUT 3 7 SAMPLE OUTPUT 28 Explanation In a 3x7 grid, there are 28 unique paths from the top-left to the bottom-right corner if the only allowed moves are to the right or down.","solution":"def unique_paths(m, n): Calculate the number of unique paths from the top-left to the bottom-right corner of a grid of size M x N. Args: m (int): number of rows n (int): number of columns Returns: int: total number of unique paths # Create a 2D array initialized to 1 for the base cases dp = [[1] * n for _ in range(m)] # Fill the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Ashley is a gardening enthusiast who likes to arrange her plants in a unique way. She has been experimenting with arranging her plants in a spiral pattern inside a square grid. Each grid cell can hold exactly one plant. The number of rows and columns in the grid is always the same. Given a number `N`, create an `N x N` grid and arrange the numbers from `1` to `N^2` in a clockwise spiral pattern starting from the top-left corner. -----Input:----- - The input consists of a single integer `N`, where `N` represents the dimensions of the grid. -----Output:----- - Output should be the `N x N` grid with the numbers filled in a clockwise spiral pattern. -----Constraints:----- - 1 <= N <= 20 -----Sample Input:----- 3 -----Sample Output:----- 1 2 3 8 9 4 7 6 5 -----Explanation:----- For `N = 3`, the spiral pattern starts at the top-left corner and fills the numbers in the following order: - Starts at the top-left corner (1). - Moves right to fill the top row (2, 3). - Moves down to fill the last column of the current spiral (4). - Moves left to fill the bottom row of the current spiral (5, 6). - Moves up to fill the first column of the current spiral (7, 8). - Fills the remaining center (9).","solution":"def generate_spiral_grid(N): Generates an N x N grid filled with numbers from 1 to N^2 in a clockwise spiral pattern. grid = [[0] * N for _ in range(N)] direction = [(0, 1), (1, 0), (0, -1), (-1, 0)] current_direction = 0 row, col = 0, 0 current_value = 1 for _ in range(N * N): grid[row][col] = current_value current_value += 1 next_row = row + direction[current_direction][0] next_col = col + direction[current_direction][1] if next_row >= 0 and next_row < N and next_col >= 0 and next_col < N and grid[next_row][next_col] == 0: row, col = next_row, next_col else: current_direction = (current_direction + 1) % 4 row += direction[current_direction][0] col += direction[current_direction][1] return grid"},{"question":"Sam\'s Socks Shop has received a large batch of socks, but unfortunately, the shipment got mixed up with socks of different colors. Sam wants to pair up the socks by color and sell them. He needs your help to determine the maximum number of pairs he can form from the given batch of socks. Each pair of socks must consist of two socks of the same color. -----Input----- The first line of the input contains an integer n (1 leq n leq 1000) denoting the total number of socks. The second line contains n space-separated integers, where each integer represents the color of a sock (a positive integer less than or equal to 100). -----Output----- Output one integer, the maximum number of pairs that can be formed from the given socks. -----Examples----- Sample Input: 9 10 20 20 10 10 30 50 10 20 Sample Output: 3 Sample Input: 6 1 1 1 1 1 1 Sample Output: 3","solution":"def max_socks_pairs(n, socks): Returns the maximum number of pairs that can be formed from the given socks. Parameters: n (int): The total number of socks. socks (list of int): A list where each element is the color of a sock. Returns: int: The maximum number of pairs of socks. from collections import Counter sock_counter = Counter(socks) pairs = 0 for count in sock_counter.values(): pairs += count // 2 return pairs # Example usage: # n = 9 # socks = [10, 20, 20, 10, 10, 30, 50, 10, 20] # print(max_socks_pairs(n, socks)) # Output: 3"},{"question":"In a distant kingdom, there existed a wise magician who had the ability to create powerful magic spells. To channel his magical abilities, the magician used crystals arranged in a specific manner. These crystals are placed in different cities, each having a certain number of magical points. Due to the complexity of the spells, the magician is now trying to create a bridge of magical energy between these cities while maintaining balance. The magician discovered that to create a stable bridge, the magical points (represented as coordinates in a 2D plane) should form a right-angled triangle with the right angle located at the origin (0, 0). He needs to verify for each given set of cities\' magical points whether they can form such a triangle. To help him, you are tasked with writing a program that determines if a set of magical points can form a right-angled triangle with the right angle at the origin. Input: The first line contains an integer n (3 ≤ n ≤ 50000), representing the number of magical points in the first city. Each of the next n lines contains two integers xi, yi, the coordinates of the magical points in the first city. The second block follows the same format as the first block, representing the magical points in the second city. The third block follows the same format as the first block, representing the magical points in the third city. Output: For each city, print \\"YES\\" if the magical points can form a right-angled triangle with the right angle at the origin, otherwise print \\"NO\\". Examples: Input: 4 0 0 1 2 3 0 0 4 3 0 0 6 8 3 0 4 0 0 1 1 2 2 3 3 Output: YES YES NO Note: In the first city, the points (0, 0), (1, 2) and (3, 0) can form a right-angled triangle with the right angle at (0, 0). In the second city, the points (0, 0), (6, 8) and (3, 0) can form a right-angled triangle with the right angle at (0, 0). In the third city, no right-angled triangle with the right angle at (0, 0) can be formed using any combination of the given points.","solution":"def can_form_right_angled_triangle(points): Determine if a set of magical points can form a right-angled triangle with the right angle at the origin (0, 0). Args: points (List[Tuple[int, int]]): List of tuples containing coordinates (xi, yi). Returns: str: \\"YES\\" if the points can form a right-angled triangle with the right angle at the origin, \\"NO\\" otherwise. for i in range(len(points)): for j in range(i + 1, len(points)): if (points[i][0] == 0 and points[j][1] == 0) or (points[i][1] == 0 and points[j][0] == 0): return \\"YES\\" return \\"NO\\" def check_cities(cities): Checks multiple cities’ points to see if each set can form a right-angled triangle with the right angle at the origin. Args: cities (List[List[Tuple[int, int]]]): List of cities, each city is a list of (x, y) tuples. Returns: List[str]: List of \\"YES\\" or \\"NO\\" for each city. return [can_form_right_angled_triangle(city) for city in cities]"},{"question":"You are tasked with developing a new security system for an organization that monitors access to its facilities. The system will record the times at which individuals swipe their access cards, and you need to determine whether any individual had unauthorized access based on the swiped times. Unauthorized access is defined as entering the facility at least three times in a given hour. Your goal is to write a program that will analyze a list of swipes and identify any individuals who had unauthorized access. -----Input----- - On the first line is an integer 1 leq m leq 10^5, the number of swipes recorded. - The next m lines each contain a string with the format \\"HH:MM name\\" where \\"HH:MM\\" is the time of the swipe (in 24-hour format) and \\"name\\" is the individual\'s name. Each name is at most 10 characters long. -----Output----- Print the names of the individuals who had unauthorized access during any hour, each on a new line. The names should be sorted in lexicographical order. If no one had unauthorized access, print \\"No unauthorized access\\". -----Examples----- Sample Input 1: 10 08:00 Alice 08:10 Bob 08:20 Alice 09:00 Alice 08:30 Alice 08:50 Bob 09:05 Alice 08:55 Alice 09:10 Bob 08:40 Bob Sample Output 1: Alice Bob Sample Input 2: 5 12:00 Charlie 12:15 Charlie 12:30 Charlie 13:00 David 13:20 David Sample Output 2: Charlie Sample Input 3: 3 14:00 Eve 14:10 Frank 14:20 Gary Sample Output 3: No unauthorized access","solution":"def find_unauthorized_access(swipes): from collections import defaultdict import heapq swipe_data = defaultdict(list) for swipe in swipes: time, name = swipe.split() hh, mm = map(int, time.split(\\":\\")) swipe_time = hh * 60 + mm swipe_data[name].append(swipe_time) unauthorized_users = set() for name, times in swipe_data.items(): times.sort() for i in range(len(times) - 2): if times[i + 2] < times[i] + 60: unauthorized_users.add(name) break if unauthorized_users: for name in sorted(unauthorized_users): print(name) else: print(\\"No unauthorized access\\") # Example usage: # m = 10 # swipes = [ # \\"08:00 Alice\\", \\"08:10 Bob\\", \\"08:20 Alice\\", \\"09:00 Alice\\", # \\"08:30 Alice\\", \\"08:50 Bob\\", \\"09:05 Alice\\", \\"08:55 Alice\\", # \\"09:10 Bob\\", \\"08:40 Bob\\" # ] # find_unauthorized_access(swipes)"},{"question":"You are a librarian managing a series of book loans in a university library. Each book has a unique identification number and a certain number of days it can be loaned out to a student. You need to track the book returns and ensure all books are returned within their loan period. According to the library policy, if any book is returned after its loan period has expired, the student is in violation and must be fined. Constraints * All values in input are integers. * 1 leq N leq 100 * 1 leq ID_i leq 1000 * 1 leq D_i leq 365 * 1 leq R_i leq 365 Input Input is given from Standard Input in the following format: N ID_1 D_1 R_1 ID_2 D_2 R_2 ... ID_N D_N R_N Each line represents a book\'s ID, the days it can be loaned (D_i), and the days it was actually loaned out (R_i). Output If all books are returned within their loan periods, print \\"ALL RETURNED\\"; otherwise, print \\"FINE\\". Examples Input 3 101 14 10 102 7 5 103 30 35 Output FINE Input 2 201 20 15 202 10 10 Output ALL RETURNED","solution":"def check_book_loans(N, loans): for loan in loans: ID, D, R = loan if R > D: return \\"FINE\\" return \\"ALL RETURNED\\" def library_fines(input_data): lines = input_data.strip().split(\'n\') N = int(lines[0]) loans = [tuple(map(int, line.split())) for line in lines[1:N+1]] return check_book_loans(N, loans)"},{"question":"Write a function that accepts a string of alphabetic characters and returns a new string where each character from the original string is shifted forward in the alphabet by a specified integer. If the shift moves past the end of the alphabet, it wraps around to the beginning. Non-alphabetic characters should not be altered. For the input, the first line contains a single integer `n` (shift value). The second line contains the string to be shifted. SAMPLE INPUT 3 abcXYZ123 SAMPLE OUTPUT defABC123 Explanation: In the example provided, each character in the string \\"abcXYZ123\\" is shifted forward by 3 positions. More details for each character: \'a\' becomes \'d\', \'b\' becomes \'e\', \'c\' becomes \'f\' \'X\' becomes \'A\', \'Y\' becomes \'B\', \'Z\' becomes \'C\' \'1\', \'2\', \'3\' are non-alphabetic, so they remain unchanged.","solution":"def shift_string(n, s): def shift_char(c, n): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + n) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + n) % 26 + ord(\'A\')) else: return c return \'\'.join(shift_char(c, n) for c in s)"},{"question":"You are given an array of n integers where each integer is between 1 and k inclusive. You need to determine the smallest number of changes required to make all elements in at least one contiguous subarray of length at least m identical. Input The first line contains three integers n, k, and m (1 ≤ m ≤ n ≤ 105, 1 ≤ k ≤ 100). The second line contains a sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ k). Output Print an integer representing the smallest number of changes required to achieve the goal. Examples Input 10 3 4 1 3 2 2 2 1 1 2 3 2 Output 1 Note In the example, the subarray [2, 2, 2, 1] can be made identical by changing the last number to 2.","solution":"def min_changes_to_identical_subarray(n, k, m, arr): from collections import defaultdict min_changes = float(\'inf\') # iterate over array for all possible starting points of subarray with length m for start in range(n - m + 1): frequency = defaultdict(int) # count the frequencies of elements in the subarray of length m for i in range(start, start + m): frequency[arr[i]] += 1 # find the maximum frequency in the subarray max_freq = max(frequency.values()) # calculate the number of changes needed for this subarray changes_needed = m - max_freq min_changes = min(min_changes, changes_needed) return min_changes"},{"question":"Given a string str, the task is to remove all adjacent duplicates from the string. Example 1: Input: str = \\"abbaca\\" Output: \\"ca\\" Explanation: For example, in \\"abbaca\\" we remove \\"bb\\" since the letters are adjacent and equal, and this operation is repeated recursively for the new string \\"aaca\\" which results in \\"ca\\". Example 2: Input: str = \\"azxxzy\\" Output: \\"ay\\" Explanation: In \\"azxxzy\\", we remove \\"xx\\" resulting in \\"azy\\", then we remove \\"zy\\" which results in \\"ay\\". Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function removeDuplicates() that takes a string str as a parameter and returns the resulting string after removing all consecutive duplicates. Expected Time Complexity: O(|str|). Expected Auxiliary Space: O(|str|), in case of using an explicit stack. Constraints: 1 ≤ |str| ≤ 10^5","solution":"def removeDuplicates(s): Removes all adjacent duplicates from the string. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \'\'.join(stack)"},{"question":"Your task is to create a registration number for participants in a coding competition. Each registration number should be based on the first letter of the participant\'s first name, followed by the first letter of their last name, followed by a unique numeric identifier for that person. The numeric identifier for each person is determined by the order of their appearance in the list of registrations, starting from 1. For example, the first participant will have a numeric identifier of 1, the second participant will have a numeric identifier of 2, and so on. The registration number for each participant should be formatted as two uppercase letters followed by a three-digit number with leading zeros if necessary (e.g., \\"AB001\\"). You will be given a list of participants\' names and your task is to generate the registration number for each participant. -----Input----- - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of participants. - Each of the next n lines contains a participant\'s name in the format \\"First Last\\". -----Output----- Print n lines. Each line should contain the registration number for the corresponding participant in the order they appear in the input list. -----Examples----- Input 3 Alice Johnson Bob Smith Charlie Brown Output AJ001 BS002 CB003 Input 2 John Doe Jane Smith Output JD001 JS002 -----Note----- In the first sample case, Alice Johnson is the first participant, so her registration number is \\"AJ001\\". Bob Smith is the second participant, so his registration number is \\"BS002\\", and Charlie Brown is the third participant, so his registration number is \\"CB003\\".","solution":"def generate_registration_numbers(n, names): Generates registration numbers for participants. Parameters: - n: integer, number of participants - names: list of strings, each string being a participant\'s name in the format \\"First Last\\" Returns: - list of strings, each string being a registration number in the format \\"FL#\\" registration_numbers = [] for i, full_name in enumerate(names, 1): first_name, last_name = full_name.split() reg_number = first_name[0].upper() + last_name[0].upper() + f\\"{i:03}\\" registration_numbers.append(reg_number) return registration_numbers"},{"question":"Complete the function that accepts an integer n and returns a list containing the first n terms of the Fibonacci sequence. The Fibonacci sequence is defined as a series of numbers where the next term is the sum of the previous two terms. The sequence starts with 0 and 1. Examples ``` Input: 5 Output: [0, 1, 1, 2, 3] Input: 7 Output: [0, 1, 1, 2, 3, 5, 8] ``` Note: The function should return an empty list if n <= 0.","solution":"def fibonacci_sequence(n): Returns a list containing the first n terms of the Fibonacci sequence. The sequence starts with 0 and 1. Return an empty list if n <= 0. if n <= 0: return [] sequence = [0, 1] for i in range(2, n): next_term = sequence[-1] + sequence[-2] sequence.append(next_term) return sequence[:n]"},{"question":"A company has decided to organize its file storage in a hierarchical folder system. Each file is represented by a unique identifier and a size in bytes. The company needs to retrieve the total size of files within certain folders efficiently. Each folder can contain files and subfolders, creating a tree-like structure. You are asked to implement a feature, `folderSize`, that computes the total size of all files within a given folder (including files in its subfolders). # Input Format - The input will consist of a sequence of commands to create the folder structure and queries to retrieve folder sizes. - The first line contains an integer, `n`, representing the number of commands. - Each of the next `n` lines can be one of the following commands: - `ADD_FILE <folder_id> <file_id> <size>`: Adds a file with the specified size to the specified folder. - `ADD_FOLDER <parent_folder_id> <folder_id>`: Adds a subfolder to the specified parent folder. - `QUERY <folder_id>`: Queries for the total size of files within the specified folder, including all its subfolders. # Constraints - `1 ≤ n ≤ 10^4` - `1 ≤ size ≤ 10^6` - Folder IDs and File IDs are strings with length between 1 and 20, consisting of alphanumeric characters. - The folder structure always has a root folder with ID \\"root\\", and all other folders are descendants of this root. # Output Format For each `QUERY` command, output a single integer representing the total size of files in the specified folder and all its subfolders. # Sample Input ``` 8 ADD_FOLDER root documents ADD_FILE documents file1 1000 ADD_FOLDER documents projects ADD_FILE projects file2 3000 ADD_FOLDER root music ADD_FILE music file3 2000 QUERY root QUERY music ``` # Sample Output ``` 6000 2000 ``` # Explanation - The folder `\\"documents\\"` contains a file `\\"file1\\"` of size 1000 and a subfolder `\\"projects\\"` containing a file `\\"file2\\"` of size 3000, making the total size of `\\"documents\\"` 4000. - The folder `\\"music\\"` contains a file `\\"file3\\"` of size 2000. - The root folder `\\"root\\"` contains the `\\"documents\\"` folder with 4000 bytes and the `\\"music\\"` folder with 2000 bytes, making the total size 6000 bytes. - When querying `\\"root\\"`, the total size is 6000 bytes. - When querying `\\"music\\"`, the total size is 2000 bytes. # Hints 1. Use a tree data structure to represent the folder hierarchy. 2. Consider recursive or iterative algorithms to traverse the tree and accumulate file sizes for the queries.","solution":"class Folder: def __init__(self): self.files = {} self.subfolders = {} self.total_size_cache = None class FileStorageSystem: def __init__(self): self.root = Folder() self.folders = {\'root\': self.root} def add_file(self, folder_id, file_id, size): if folder_id in self.folders: self.folders[folder_id].files[file_id] = size self.invalidate_cache(folder_id) def add_folder(self, parent_folder_id, folder_id): if parent_folder_id in self.folders: new_folder = Folder() self.folders[parent_folder_id].subfolders[folder_id] = new_folder self.folders[folder_id] = new_folder self.invalidate_cache(parent_folder_id) def invalidate_cache(self, folder_id): stack = [folder_id] while stack: current = stack.pop() if current in self.folders: self.folders[current].total_size_cache = None stack.extend(self.folders[current].subfolders.keys()) def compute_total_size(self, folder): if folder.total_size_cache is not None: return folder.total_size_cache total_size = sum(folder.files.values()) for subfolder in folder.subfolders.values(): total_size += self.compute_total_size(subfolder) folder.total_size_cache = total_size return total_size def query(self, folder_id): if folder_id in self.folders: return self.compute_total_size(self.folders[folder_id]) return 0 def process_commands(commands): fss = FileStorageSystem() results = [] for command in commands: parts = command.split() if parts[0] == \'ADD_FILE\': fss.add_file(parts[1], parts[2], int(parts[3])) elif parts[0] == \'ADD_FOLDER\': fss.add_folder(parts[1], parts[2]) elif parts[0] == \'QUERY\': results.append(fss.query(parts[1])) return results"},{"question":"A hiker is attempting to traverse from the starting location of a trail to the endpoint. The trail is represented as a 2D grid of dimensions `M x N`. Each cell in the grid can either be an open path (`.`) or an obstacle (`#`). The hiker can move up, down, left, or right, but cannot move diagonally. An energy level is associated with the hiker, and it starts at a given value `E`. Moving to an adjacent cell costs 1 unit of energy. The hiker needs to reach the endpoint before energy runs out. You need to write a program that determines whether the hiker can reach the endpoint from the start point with the given energy level. If the hiker can reach the endpoint, output \\"YES\\". If the hiker cannot reach it, output \\"NO\\". # Input - The first line contains three integers `M`, `N`, and `E` denoting the number of rows, the number of columns, and the initial energy level, respectively. - The following `M` lines contain `N` characters each, representing the grid. - The start point is marked as `S`. - The endpoint is marked as `E`. - Open paths are represented by `.`. - Obstacles are represented by `#`. # Output - A single line containing \\"YES\\" if the hiker can reach the endpoint with the given energy level, otherwise \\"NO\\". # Constraints - `1 ≤ M, N ≤ 100` - `1 ≤ E ≤ 10000` # Example Input ``` 5 6 10 S..... .#.. ..#... .. ...E.. ``` Output ``` YES ``` Input ``` 5 6 5 S..... .#.. ..#... .. ...E.. ``` Output ``` NO ``` # Explanation In the first example, the hiker can avoid obstacles and reach the endpoint with an exact cost of 10 energy units. In the second example, the hiker does not have enough energy to reach the endpoint.","solution":"from collections import deque def can_reach_endpoint(M, N, E, grid): Determines if the hiker can reach the endpoint from the start point with the given energy level. Parameters: M (int): number of rows in the grid. N (int): number of columns in the grid. E (int): initial energy level of the hiker. grid (list of str): the grid representing the trail. Returns: str: \\"YES\\" if the hiker can reach the endpoint, otherwise \\"NO\\". directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] start = end = None # Locate start and end points for i in range(M): for j in range(N): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) if not start or not end: return \\"NO\\" # BFS to find the shortest path queue = deque([(start[0], start[1], E)]) visited = set() visited.add((start[0], start[1])) while queue: x, y, energy = queue.popleft() if (x, y) == end: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and grid[nx][ny] != \'#\' and (nx, ny) not in visited: if energy - 1 >= 0: queue.append((nx, ny, energy - 1)) visited.add((nx, ny)) return \\"NO\\""},{"question":"A group of hikers is planning to visit a mountain range. They want to determine if it is possible to arrange their hiking schedule such that they can hike every mountain exactly once, without repeating any mountain on consecutive days. Your task is to help them with a program that will check if such a schedule is possible. The mountain range can be represented as a series of mountain peaks, each associated with an identifier. The sequence of mountain peaks is given such that each peak is represented by a unique positive integer. However, the peaks are arranged in a way that might require the hikers to hike some peaks consecutively. The task is to rearrange the sequence so that no peak is repeated on consecutive days. If such a rearrangement is possible, your program should output \\"POSSIBLE\\". Otherwise, output \\"NO\\". Input The first line contains a single integer `n` (2 ≤ n ≤ 100) representing the number of mountain peaks. The second line contains `n` integers, each representing the identifier of a mountain peak. Output Print \\"POSSIBLE\\" if it is possible to rearrange the sequence such that no mountain peak is repeated on consecutive days. Otherwise, print \\"NO\\". Examples Input 5 1 2 3 4 5 Output POSSIBLE Input 4 1 2 2 3 Output POSSIBLE Input 3 1 1 1 Output NO Input 6 1 2 2 3 3 4 Output POSSIBLE","solution":"from collections import Counter def can_hike_without_repeating(n, peaks): Determines if it is possible to rearrange the sequence of mountain peaks such that no peak is repeated on consecutive days. Args: n (int): Number of mountain peaks. peaks (list of int): List of identifiers for the mountain peaks. Returns: str: \\"POSSIBLE\\" if a valid rearrangement is possible, \\"NO\\" otherwise. count = Counter(peaks) max_frequency = max(count.values()) if max_frequency <= (n + 1) // 2: return \\"POSSIBLE\\" else: return \\"NO\\""},{"question":"In a magical forest, there are special trees known as Fibonacci trees. Each Fibonacci tree grows leaves in a very particular way: the number of leaves it has in any given month follows the Fibonacci sequence. The Fibonacci sequence is defined as follows: the first two numbers are 0 and 1, and each subsequent number is the sum of the two preceding numbers. You have been tasked with finding out if a given number of leaves can be the exact amount any Fibonacci tree would have after a certain number of months. If it is possible, you need to find the smallest number of months it would take for a tree to have exactly that number of leaves. Otherwise, return -1. For instance, if the number provided is 21, the answer should be 8 because 21 is the 8th number in the Fibonacci sequence. If the number provided is 14, the answer should be -1 because no Fibonacci tree can have exactly 14 leaves in any month. INPUT First line contains an integer t denoting the number of test cases. The next t lines each contain a single integer n, denoting the number of leaves. OUTPUT For each test case, output the smallest number of months required for a Fibonacci tree to have exactly n leaves, or -1 if it is not possible. CONSTRAINTS 1 ≤ t ≤ 10000 0 ≤ n ≤ 10^18 SAMPLE INPUT 3 21 14 0 SAMPLE OUTPUT 8 -1 0 Explanation Test case 1: 21 is the 8th number in the Fibonacci sequence. Test case 2: 14 is not present in the Fibonacci sequence. Test case 3: 0 is the 0th number in the Fibonacci sequence.","solution":"def find_fibonacci_position(n): Returns the position in the Fibonacci sequence where the value is exactly n. If n is not a Fibonacci number, returns -1. if n == 0: return 0 a, b = 0, 1 position = 1 while b <= n: if b == n: return position a, b = b, a + b position += 1 return -1 def process_test_cases(test_cases): results = [] for n in test_cases: result = find_fibonacci_position(n) results.append(result) return results"},{"question":"**Alex loves playing with numbers** Number Mirror Challenge Alex enjoys playing with numbers. Recently, he discovered that the mirror image of a number could be quite interesting. He defines the mirror image of a number as what you see if you write the number on a piece of paper and hold it up to a mirror. For example, the mirror image of `12345` is `54321`. Help Alex by creating a function called `mirror_number()` that accepts a non-negative integer and returns its mirror image as an integer. ```python mirror_number(12345) # 54321 mirror_number(987654321) # 123456789 ``` Note: - The input number will always be a non-negative integer. - Leading zeros in the mirror image should be removed. For example, the mirror image of `100` should be `1`.","solution":"def mirror_number(n): Returns the mirror image of a non-negative integer. Args: n (int): The non-negative integer to mirror. Returns: int: The mirrored image of the input number. # Convert the number to a string str_num = str(n) # Reverse the string reversed_str = str_num[::-1] # Convert back to an integer to remove any leading zeros mirrored_number = int(reversed_str) return mirrored_number"},{"question":"Write a function `sum_of_odd_digits` that takes a single integer `n` as input. The function should return the sum of all odd digits present in the integer. The function should handle negative integers as well and treat the digits independently of the sign. If no odd digits are present, the function should return 0. Examples: ```python sum_of_odd_digits(123456) # returns 9 (1+3+5) sum_of_odd_digits(-789) # returns 16 (7+9) sum_of_odd_digits(2468) # returns 0 (no odd digits) sum_of_odd_digits(0) # returns 0 (no odd digits) ```","solution":"def sum_of_odd_digits(n): Returns the sum of all odd digits present in the integer n. # Convert the integer to a string to iterate over each digit. n_str = str(abs(n)) odd_sum = 0 # Iterate through each character in the string representation of the number. for char in n_str: digit = int(char) if digit % 2 != 0: odd_sum += digit return odd_sum"},{"question":"You have been given a set of R red balls and B blue balls. You need to form a line of length R + B such that all the red and blue balls are arranged in a given order. To make the game interesting, you can swap any two balls in the line any number of times. Your task is to determine if it is possible to make the line in such a way that no two balls of the same color are adjacent to each other. Input: - The first line contains a single integer T, the number of test cases (1 ≤ T ≤ 50). - For each test case, the first line contains two integers R and B (1 ≤ R, B ≤ 100), the number of red and blue balls respectively. Output: - For each test case, output \\"Possible\\" if it is feasible to arrange the balls so that no two balls of the same color are adjacent, otherwise \\"Not Possible\\". SAMPLE INPUT: 3 3 4 5 5 2 3 SAMPLE OUTPUT: Possible Possible Possible Explanation: In the first test case, you can arrange the balls as BRBRBRB which ensures no two adjacent balls are of the same color. In the second test case, you can arrange the balls as RBRBRBRBRB. In the third test case, you can arrange the balls as BRBRB.","solution":"def can_arrange_balls_without_adjacent(R, B): Determine if it\'s possible to arrange the balls such that no two adjacent balls are of the same color. :param R: Number of red balls :param B: Number of blue balls :return: \\"Possible\\" if it is feasible to arrange, otherwise \\"Not Possible\\" # Check if the difference between the counts of red and blue balls is greater than 1 if abs(R - B) > 1: return \\"Not Possible\\" else: return \\"Possible\\" def process_test_cases(test_cases): Process multiple test cases for the ball arrangement problem. :param test_cases: List of tuples containing test cases (R, B) :return: List of results for each test case results = [] for R, B in test_cases: result = can_arrange_balls_without_adjacent(R, B) results.append(result) return results"},{"question":"Given a string, remove all duplicate characters and return the resulting string in sorted order. Example 1: Input: S = \\"banana\\" Output: \\"abn\\" Explanation: Removing duplicate characters, we get \\"ban\\". Sorting them, we get \\"abn\\". Example 2: Input: S = \\"apple\\" Output: \\"aelp\\" Explanation: Removing duplicate characters, we get \\"aple\\". Sorting them, we get \\"aelp\\". Your Task: You only need to complete the function removeDuplicatesAndSort that takes a string S as parameter and returns the sorted string with duplicates removed. Expected Time Complexity: O(NLogN). Expected Auxiliary Space: O(N). Constraints: 1 ≤ |S| ≤ 10^5 S consists of lowercase English letters only.","solution":"def removeDuplicatesAndSort(S): Removes all duplicate characters from the string S and returns the resulting string in sorted order. # Use a set to remove duplicates unique_chars = set(S) # Convert the set back to a list and sort it sorted_unique_chars = sorted(unique_chars) # Join the sorted characters to form the resulting string result = \'\'.join(sorted_unique_chars) return result"},{"question":"In a large amusement park, there are N rides and M different tickets. Each ride has a certain thrill level, and each ticket allows access to some of these rides. Given the thrill levels of all the rides and the rides accessible with each ticket, you need to answer multiple queries. Each query is one of the following types: 1. `1 X Y`: Update the thrill level of ride `X` to `Y`. 2. `2 L R K`: Find the maximum thrill level among all rides that are accessible using at least one of the tickets in the range from `L` to `R`. Input Format The first line of input contains three space-separated integers: N (number of rides), M (number of tickets), and Q (number of queries). The second line contains N space-separated integers where the i-th integer represents the thrill level of the i-th ride. The next M lines contain descriptions of the tickets: the j-th line describes the rides accessible with the j-th ticket. Each line starts with an integer T_j (number of rides accessible with the j-th ticket) followed by T_j space-separated integers representing the indices of these rides. The following Q lines contain the queries in one of the two formats described above. Constraints: 1 <= N <= 100000 1 <= M <= 100000 1 <= Q <= 100000 1 <= T_j <= N 1 <= X, Y <= N 1 <= L, R <= M 1 <= thrill level of any ride <= 10000 Output Format For each query of the second type, output the maximum thrill level on a new line. Sample Input 5 2 3 3 5 4 2 1 3 1 2 3 2 3 5 2 1 2 100 1 3 10 2 1 2 100 Sample Output 5 10 Explanation - For the first query, among the rides accessible with tickets 1 and 2, the maximum thrill level is from ride 2, which has a thrill level of 5. - The second query updates the thrill level of ride 3 to 10. - For the third query, the maximum thrill level among the rides accessible with tickets 1 and 2 is now from ride 3, which has a thrill level of 10.","solution":"def amusement_park(N, M, Q, thrill_levels, tickets, queries): ride_thrills = thrill_levels[:] # Copy of thrill levels to modify ticket_rides = [set(ticket[1:]) for ticket in tickets] # [ {rides}, ... ] def update_thrill_level(X, Y): ride_thrills[X - 1] = Y def find_max_thrill_level(L, R): accessible_rides = set() for ticket_index in range(L - 1, R): accessible_rides.update(ticket_rides[ticket_index]) return max(ride_thrills[ride - 1] for ride in accessible_rides) result = [] for query in queries: if query[0] == 1: _, X, Y = query update_thrill_level(X, Y) elif query[0] == 2: _, L, R, K = query result.append(find_max_thrill_level(L, R)) return result"},{"question":"Write a function that takes a list of integers as an argument and returns a new list where each integer is increased by 10. If any element in the list is not an integer, the function should return \\"Invalid input\\".","solution":"def increase_by_ten(lst): This function takes a list of integers and returns a new list where each integer is increased by 10. If any element in the list is not an integer, the function returns \\"Invalid input\\". if not all(isinstance(x, int) for x in lst): return \\"Invalid input\\" return [x + 10 for x in lst]"},{"question":"A food delivery service wants to optimize routing for their delivery drivers. They represent the city as a grid of intersections. You are given a matrix that defines the delivery time between intersections. Each cell in the matrix represents the delivery time from an intersection to the one directly to its right or directly beneath it. Write a program to find the shortest delivery route from the top-left corner (0,0) to the bottom-right corner (N-1, M-1) only moving right or down. Input: First line contains the values of N and M. Next N lines contain M space-separated integers representing the delivery time. Output: Print the minimum total delivery time required to reach the bottom-right corner from the top-left corner. Constraints: 1 ≤ N, M ≤ 100 0 ≤ delivery time ≤ 100 SAMPLE INPUT 3 3 1 3 1 1 5 1 4 2 1 SAMPLE OUTPUT 7","solution":"def min_delivery_time(matrix): N = len(matrix) M = len(matrix[0]) # Initialize a 2D list to store the minimum delivery times dp = [[0]*M for _ in range(N)] # Set up the starting point dp[0][0] = matrix[0][0] # Fill the values for the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the values for the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] # The minimum delivery time to reach the bottom-right corner return dp[N-1][M-1] # Utility function to read input and call the solution function def main(): import sys input = sys.stdin.read data = input().split() # Read N and M index = 0 N = int(data[index]) M = int(data[index + 1]) index += 2 # Read the matrix matrix = [] for i in range(N): row = list(map(int, data[index:index + M])) matrix.append(row) index += M # Compute and print the result print(min_delivery_time(matrix))"},{"question":"# Task You are tasked with helping a delivery company determine the number of routes its driver can take to deliver packages from a warehouse to a customer\'s house. The routes need to be optimized to ensure that the delivery is done in the shortest path possible. The city\'s layout is in the form of a grid where some cells are impassable due to construction. The driver\'s starting point is at the top-left corner of the grid (0, 0), and the goal is to reach the bottom-right corner of the grid (n-1, n-1). You are given a `n x n` grid where `0` represents a passable cell and `1` represents an impassable cell. Write a function `number_of_routes(n, grid)` to calculate the number of distinct routes from the top-left corner to the bottom-right corner without passing through impassable cells. If there is no possible route, the function should return `0`. Note: - The driver can only move either down or right at any point in time. - The start and end points are always passable (always `0`). # Example For `n = 3` and `grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]`, the result should be `2`. The driver has two distinct routes: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right For `n = 3` and `grid = [[0, 0, 0], [0, 1, 1], [0, 0, 0]]`, the result should be `1`. The driver has only one route: 1. Down -> Down -> Right -> Right # Input/Output - `[input]` integer `n` The size of the grid. An integer representing the number of rows and columns in the grid. `1 <= n <= 100` - `[input]` 2D list `grid` An `n x n` list representing the grid where `0` means passable and `1` means impassable. Each element of the grid will be `0` or `1`. - `[output]` an integer The number of distinct routes from the top-left to the bottom-right corner of the grid without passing through impassable cells.","solution":"def number_of_routes(n, grid): Returns the number of distinct routes from the top-left to the bottom-right corner of the grid without passing through impassable cells. if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 # no path through an impassable cell else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Train Management System You are responsible for developing a module in a train management system to determine the efficiency of train schedules. The system needs to process various schedules and identify the optimal order in which trains should traverse a single track. Given the start and end times for each train, no two trains can run on the same track simultaneously. The problem can be formally stated as follows: You are given `N` trains, each described by its start time `s_i` and end time `e_i`. Your task is to determine the maximum number of non-overlapping trains that can be scheduled on the track. Write a program that reads train schedules and outputs the maximum number of non-overlapping trains. Input The input consists of a single test case of the following format: ``` N s_1 e_1 s_2 e_2 ... s_N e_N ``` - The integer `N` (1 ≤ N ≤ 10^5) represents the number of trains. - For each `i` (1 ≤ i ≤ N), `s_i` and `e_i` (0 ≤ s_i < e_i ≤ 10^9) denote the start and end time of the `i-th` train. Output Output a single integer, representing the maximum number of non-overlapping trains that can be scheduled. Example Input ``` 3 1 3 2 5 4 6 ``` Output ``` 2 ``` Explanation Two trains can run on the track without overlapping as follows: - Train 1 from time 1 to 3. - Train 3 from time 4 to 6. Input ``` 4 1 2 2 3 3 4 1 3 ``` Output ``` 3 ``` Explanation Three trains can run on the track without overlapping as follows: - Train 1 from time 1 to 2. - Train 2 from time 2 to 3. - Train 3 from time 3 to 4.","solution":"def max_non_overlapping_trains(N, schedules): Determines the maximum number of non-overlapping trains that can be scheduled on a single track. Parameters: N (int): The number of trains. schedules (list of tuples): Each tuple contains two integers representing the start time and end time of a train. Returns: int: The maximum number of non-overlapping trains. # Sort the schedules by end time schedules.sort(key=lambda x: x[1]) # Initialize counters max_trains = 0 last_end_time = -1 # Iterate through sorted schedules for start, end in schedules: if start >= last_end_time: max_trains += 1 last_end_time = end return max_trains # Example usage: # print(max_non_overlapping_trains(3, [(1, 3), (2, 5), (4, 6)])) # Output: 2 # print(max_non_overlapping_trains(4, [(1, 2), (2, 3), (3, 4), (1, 3)])) # Output: 3"},{"question":"You are given a string, s, that contains letters and digits. Write a program to determine if it is possible to rearrange the characters of s such that no two consecutive characters are the same. If it is possible, return the rearranged string. If not, return \\"Not Possible\\". Function Description Complete the `rearrangeString` function in the editor below. `rearrangeString` has the following parameters: - string s: the input string Returns - string: the rearranged string or \\"Not Possible\\" Input Format A single line containing the string s. Constraints 1 leq |s| leq 10^5 The string s will contain uppercase letters, lowercase letters, and digits. Sample Input 1 aabb Sample Output 1 abab Sample Input 2 aaab Sample Output 2 Not Possible Explanation In Sample Input 1, \\"abab\\" is a valid rearrangement where no two consecutive characters are the same. In Sample Input 2, no rearrangement is possible such that no two consecutive characters are the same. Therefore, the output is \\"Not Possible\\".","solution":"from collections import Counter import heapq def rearrangeString(s): # Count frequencies of each character freq = Counter(s) max_heap = [] # Push all characters and their counts into a max_heap for char, count in freq.items(): heapq.heappush(max_heap, (-count, char)) prev_char, prev_count = \'\', 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char, prev_count = char, count + 1 result_str = \'\'.join(result) # Check if the rearranged string has the same length as input if len(result_str) == len(s): return result_str else: return \\"Not Possible\\""},{"question":"Snake Game Simulation You are asked to implement a simplified version of the classic \\"Snake\\" game played on a rectangular grid. The grid has dimensions n x m, and each cell on the grid is either empty or contains a piece of food. Initially, the snake\'s length is 1, and it occupies a specific cell on the grid. The snake can move in four possible directions: up, down, left, and right. Each time the snake eats a piece of food, it grows in length by one unit. The goal of this game is to find the longest possible snake length that can be achieved by starting from the initial position and consuming the available food in the grid. The snake must not visit any cell more than once. Implement a program that determines the maximum length of the snake that can be achieved. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 100), representing the dimensions of the grid. The next n lines each contain m characters, where \'.\' denotes an empty cell, \'S\' denotes the starting position of the snake, and \'F\' denotes a cell containing food. Output Print a single integer: the maximum length of the snake that can be achieved starting from its initial position. Examples Input ``` 3 3 ..F S.. ... ``` Output ``` 2 ``` Input ``` 4 4 S.F. .... .F.. .... ``` Output ``` 3 ``` Constraints - The snake can move into any of the four directions (left, right, up, down) as long as it stays within the grid boundaries. - The snake cannot revisit any cell it has already visited. - The initial length of the snake is 1 (including its starting position). - The grid will contain exactly one \'S\' (initial position of the snake).","solution":"def longest_snake(n, m, grid): def dfs(x, y, length, visited): max_length = length for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: if grid[nx][ny] == \'F\': visited.add((nx, ny)) max_length = max(max_length, dfs(nx, ny, length + 1, visited)) visited.remove((nx, ny)) elif grid[nx][ny] == \'.\': visited.add((nx, ny)) max_length = max(max_length, dfs(nx, ny, length, visited)) visited.remove((nx, ny)) return max_length start_pos = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start_pos = (i, j) break if start_pos: break if not start_pos: return 1 return dfs(start_pos[0], start_pos[1], 1, {start_pos}) # Examples to test our solution n1, m1 = 3, 3 grid1 = [ \\"..F\\", \\"S..\\", \\"...\\" ] print(longest_snake(n1, m1, grid1)) # Output: 2 n2, m2 = 4, 4 grid2 = [ \\"S.F.\\", \\"....\\", \\".F..\\", \\"....\\" ] print(longest_snake(n2, m2, grid2)) # Output: 3"},{"question":"Your task is to build a program that will help you manage your book club’s collection of previously read books. The program should work with two types of operations: adding new books to the collection and finding books by a specific author. Every book is represented by a tuple containing the title and author of the book. Write a class `BookClub` that has the following methods: - `add_book(self, title: str, author: str) -> None`: Adds a book with the given title and author to the collection. - `find_books_by_author(self, author: str) -> List[str]`: Returns a list of book titles by the specified author. The returned titles should be in the order they were added. Example: ```python bc = BookClub() bc.add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\") bc.add_book(\\"1984\\", \\"George Orwell\\") bc.add_book(\\"Animal Farm\\", \\"George Orwell\\") bc.add_book(\\"Pride and Prejudice\\", \\"Jane Austen\\") assert bc.find_books_by_author(\\"George Orwell\\") == [\\"1984\\", \\"Animal Farm\\"] assert bc.find_books_by_author(\\"Harper Lee\\") == [\\"To Kill a Mockingbird\\"] assert bc.find_books_by_author(\\"Jane Austen\\") == [\\"Pride and Prejudice\\"] ```","solution":"from typing import List, Tuple class BookClub: def __init__(self): self.books = [] def add_book(self, title: str, author: str) -> None: self.books.append((title, author)) def find_books_by_author(self, author: str) -> List[str]: return [title for title, book_author in self.books if book_author == author]"},{"question":"Jack has recently joined an online coding course. His first assignment is to decode a secret message. The message is in the form of a string containing lowercase alphabetical characters and special characters. Jack\'s task is to produce a string where all the special characters are removed, and the remaining alphabetical characters are reversed. -----Input:----- - The first line of the input contains a single integer T. T denotes the number of test cases. The description of T test cases is as follows. - The next line of each test case contains a string S which contains both lowercase alphabetical characters and special characters. -----Output:----- - For each test-case print the decoded message string. -----Constraints:----- - 1 leq T leq 10^3 - 1 leq |S| leq 10^5 -----Sample Input:----- 2 h!e@l#lo c!od!ing -----Sample Output:----- olleh gnido -----Explanation:----- - In the first test case, after removing special characters, we get \\"hello\\". Reversing \\"hello\\" gives \\"olleh\\". - In the second test case, after removing special characters, we get \\"coding\\". Reversing \\"coding\\" gives \\"gnido\\".","solution":"def decode_message(T, test_cases): Takes the number of test cases and a list of test case strings, and returns the decoded messages for each test case. results = [] for S in test_cases: # Remove special characters and reverse the string decoded = \'\'.join([char for char in S if char.isalpha()])[::-1] results.append(decoded) return results"},{"question":"The Acme Widget Company is conducting their annual inventory audit and needs assistance with optimizing their warehouse storage. Each widget in their inventory has a specific volume and a value. The company wants to maximize the total value of widgets stored in a warehouse that has a maximum volume capacity. The challenge is to select widgets such that their total volume does not exceed the warehouse capacity and their combined value is maximized. You may select multiple units of the same widget type. -----Input----- - One line containing two integers: - n (1 le n le 50), the number of different widget types available. - V (1 le V le 1000), the maximum volume capacity of the warehouse. - Another n lines, each containing: - a string of up to 20 lowercase latin letters (the name of the widget); - an integer between 1 and 100 (its volume); - an integer between 1 and 100 (its value). Name, volume, and value will be separated by spaces. -----Output----- If it\'s possible to store widgets in the warehouse without exceeding the volume capacity while maximizing the value, output one or more lines, each listing the name of the widget followed by the positive integer count of how many of that widget were stored. If there are several solutions, output any. If it is impossible to store any widgets without exceeding the volume capacity, output a single line containing the word IMPOSSIBLE. -----Examples----- Sample Input: 3 50 gadget 10 60 doohickey 20 100 thingamajig 30 120 Sample Output: gadget 5","solution":"def find_optimal_storage(n, V, widgets): dp = [0] * (V + 1) counts = [{} for _ in range(V + 1)] for widget_name, volume, value in widgets: for j in range(volume, V + 1): if dp[j - volume] + value > dp[j]: dp[j] = dp[j - volume] + value counts[j] = counts[j - volume].copy() if widget_name in counts[j]: counts[j][widget_name] += 1 else: counts[j][widget_name] = 1 if dp[V] == 0: return \\"IMPOSSIBLE\\" else: result = counts[V] return [(name, count) for name, count in result.items()] # Parsing input def parse_input(input_str): lines = input_str.strip().split(\'n\') n, V = map(int, lines[0].split()) widgets = [] for i in range(1, len(lines)): parts = lines[i].split() name = parts[0] volume = int(parts[1]) value = int(parts[2]) widgets.append((name, volume, value)) return n, V, widgets # Wrapper function def optimal_storage(input_str): n, V, widgets = parse_input(input_str) result = find_optimal_storage(n, V, widgets) if result == \\"IMPOSSIBLE\\": return \\"IMPOSSIBLE\\" else: return \\"n\\".join(f\\"{name} {count}\\" for name, count in result)"},{"question":"Given a binary tree where each node has an integer value, determine if there exists a root-to-leaf path such that the sum of the values along the path equals a given target sum. -----Input----- The input consists of multiple lines. The first line has an integer, `n` (1 le n le 1000), representing the number of nodes in the tree. Each of the following `n` lines contains three integers: v l r Where `v` (-1000 le v le 1000) is the value of the node, and `l` and `r` are the indices of the left and right children of the node, respectively (if there is no left or right child, the value will be -1). The last line contains an integer `s` (-10000 le s le 10000), representing the target sum. -----Output----- Output a single line containing `1` if there exists a root-to-leaf path with the sum equal to the target sum, and `0` otherwise. -----Examples----- Sample Input: 5 1 2 3 -2 4 5 3 -1 -1 4 -1 -1 5 -1 -1 5 Sample Output: 1 Sample Input: 3 1 -1 2 2 -1 -1 3 -1 -1 6 Sample Output: 0","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def has_path_sum(root, target_sum): Given a binary tree, determine if it has a root-to-leaf path where the sum of the values equals target_sum. if not root: return False if not root.left and not root.right and root.value == target_sum: return True target_sum -= root.value return has_path_sum(root.left, target_sum) or has_path_sum(root.right, target_sum) def build_tree_from_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) nodes = [None] * n index = 1 for i in range(n): v, l, r = int(data[index]), int(data[index+1]), int(data[index+2]) index += 3 node = TreeNode(v) nodes[i] = node if l != -1: node.left = nodes[l] if r != -1: node.right = nodes[r] target_sum = int(data[index]) return nodes[0], target_sum if __name__ == \\"__main__\\": root, target_sum = build_tree_from_input() if has_path_sum(root, target_sum): print(1) else: print(0)"},{"question":"Tampering with current time representations can have significant effects on the operation of various systems. Consider the following scenario where you are responsible for writing a utility function to manage airline schedules. Problem Statement: An airline company maintains its schedule based on a 24-hour format using the Coordinated Universal Time (UTC). The schedules are stored in an array, where each element is a string representing the time in HHMM format (e.g., \\"0930\\" means 9:30 AM, \\"2315\\" means 11:15 PM). You are tasked with developing a utility function that converts these times from the 24-hour format to a 12-hour format with an AM/PM suffix. Here\'s the breakdown of the conversion: - If the hour is 0 (midnight), it converts to 12 AM. - If the hour is between 1 and 11 inclusive, it\'s in AM. - If the hour is 12 (noon), it remains 12 PM. - If the hour is between 13 and 23 inclusive, it converts by subtracting 12 from the hour and appending PM. Your task is to implement a function that takes an array of strings representing the 24-hour times and returns an array of strings representing the converted 12-hour times. Function Signature: ```python def convert_schedules(schedule: List[str]) -> List[str]: ``` Example: ```python Input: [\\"0930\\", \\"2315\\", \\"0000\\", \\"1200\\"] Output: [\\"09:30 AM\\", \\"11:15 PM\\", \\"12:00 AM\\", \\"12:00 PM\\"] ``` # Detailed Explanation of Example: - \\"0930\\" converts to \\"09:30 AM\\". - \\"2315\\" converts to \\"11:15 PM\\". - \\"0000\\" converts to \\"12:00 AM\\". - \\"1200\\" converts to \\"12:00 PM\\". Write the function `convert_schedules` that processes the input according to the requirements mentioned above and returns the list of formatted time strings. # Constraints: - The input schedule array contains between 1 and 100 elements. - Each time string in the schedule array will be exactly 4 characters long, representing a valid time in a 24-hour format. # Note: - It\'s important to maintain the leading zero in the hours if necessary (e.g., 9:30 should be \\"09:30 AM\\").","solution":"from typing import List def convert_schedules(schedule: List[str]) -> List[str]: Converts a list of times from 24-hour format to 12-hour format with AM/PM. Parameters: schedule (List[str]): List of strings representing times in 24-hour format (HHMM). Returns: List[str]: List of strings representing times in 12-hour format with AM/PM suffix. result = [] for time in schedule: hour = int(time[:2]) minute = time[2:] if hour == 0: converted_time = f\\"12:{minute} AM\\" elif hour < 12: converted_time = f\\"{hour:02}:{minute} AM\\" elif hour == 12: converted_time = f\\"12:{minute} PM\\" else: converted_time = f\\"{hour - 12:02}:{minute} PM\\" result.append(converted_time) return result"},{"question":"Bob is a multimedia artist who works with images, and he has an unusual problem. He dislikes the color gray so much that he wants to remove all gray pixels from his images. Gray pixels are defined as pixels where the red, green, and blue components are all equal (i.e., the pixel values are of the form (x, x, x) where 0 ≤ x ≤ 255). You have to help Bob by writing a function that takes a 2D list representing an image, and removes all gray pixels from it. The other colors in the image must be preserved in their original position. # Input The function should take a single input: * A 2D list `image` representing an image. Each element of the list is a tuple of three integers (r, g, b) where 0 ≤ r, g, b ≤ 255. # Output The function should return a new 2D list representing the modified image, where all the gray pixels have been removed. # Constraints * The input image will have at most dimensions of 1000 x 1000. # Example Input ```python image = [ [(30, 30, 30), (0, 0, 255), (40, 40, 40)], [(255, 255, 255), (128, 128, 128), (255, 0, 0)], [(0, 0, 0), (10, 10, 10), (100, 200, 100)] ] ``` Output ```python [ [(0, 0, 255)], [(255, 0, 0)], [(100, 200, 100)] ] ``` This function should correctly iterate through the given 2D list of pixel tuples and filter out the gray ones, producing the desired modified image in the output.","solution":"def remove_gray_pixels(image): Removes all gray pixels from the given 2D list representing an image. Gray pixels are defined as those where the red, green, and blue components are all equal. Args: image (list of list of tuples): The input image represented as a 2D list of RGB tuples. Returns: list of list of tuples: The modified image with gray pixels removed. return [[pixel for pixel in row if not (pixel[0] == pixel[1] == pixel[2])] for row in image] # Example usage image = [ [(30, 30, 30), (0, 0, 255), (40, 40, 40)], [(255, 255, 255), (128, 128, 128), (255, 0, 0)], [(0, 0, 0), (10, 10, 10), (100, 200, 100)] ] modified_image = remove_gray_pixels(image) print(modified_image)"},{"question":"A company needs to analyze the sales performance of their products over several days. Given an array `sales` of size `N` where each element represents the sales of the product on a particular day, determine the length of the longest subarray with sales in strictly increasing order. Example 1: Input: N = 9 sales = {1, 2, 3, 1, 2, 4, 6, 1, 2} Output: 4 Explanation: The longest subarray with strictly increasing sales is {1, 2, 4, 6} which is of length 4. Example 2: Input: N = 5 sales = {5, 4, 3, 2, 1} Output: 1 Explanation: The sales are not increasing for any subarray longer than length 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `longestIncreasingSubarray()` which takes the array of integers `sales` and `n` as parameters and returns an integer denoting the length of the longest subarray with strictly increasing order. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ sales[i] ≤ 10^5","solution":"def longestIncreasingSubarray(sales, n): Function to find the length of the longest subarray with strictly increasing sales. if n == 0: return 0 max_len = 1 curr_len = 1 for i in range(1, n): if sales[i] > sales[i-1]: curr_len += 1 max_len = max(max_len, curr_len) else: curr_len = 1 return max_len"},{"question":"# Problem Statement: Exploring Tunnels The sprawling city of Neo-City is known for its extensive network of underground tunnels. The tunnels can be conceptualized as a graph, where intersections are nodes and tunnels are the edges connecting them. The city administration wants to ensure that all intersections are accessible from one another, to facilitate travel and emergency services. Given an initial configuration of intersections and tunnels, the administration provides a set of potential tunnel connections to add. These potential connections should be selected carefully to minimize the overall downtown travel cost, which is calculated based on the number of connections added. Your task is to determine the minimum number of tunnel connections required to ensure that all intersections in a given set of scenarios are connected (i.e., the graph is fully connected). Input: - The first line of the input contains an integer **( T )**, the number of test cases. - Each test case consists of: - A line containing two integers **( N )** and **( C )**, where: - **( N )** is the number of intersections (nodes) (1 ≤ ( N ) ≤ 1000). - **( C )** is the number of existing tunnel connections (edges) (0 ≤ ( C ) ≤ 10000). - ( C ) lines follow, each containing two integers ( u ) and ( v ) (0 ≤ ( u, v ) < ( N )), indicating a direct tunnel between intersection ( u ) and intersection ( v ). Output: For each test case, output a single integer, the minimum number of additional connections required to ensure that all intersections are connected. Constraints: - Sum of ( N ) over all test cases ≤ 20000 - Sum of ( C ) over all test cases ≤ 100000 Sample Input: ``` 3 5 2 0 1 1 2 4 0 2 1 2 1 2 1 0 1 ``` Sample Output: ``` 2 1 0 ``` Explanation: - In the first test case, there are 5 intersections and 2 existing connections. To ensure all intersections are connected, we need 2 more connections (e.g., ( {2 to 3, 3 to 4} )). - In the second test case, there are 4 intersections and no existing connections, so we need 3 connections to connect all (e.g., ( {0 to 1, 1 to 2, 2 to 3} )). - In the third test case, there are 2 intersections and 1 connection, which means the intersections are already connected, thus no additional connections are required. This question will test the ability to apply graph algorithms (such as Union-Find or Depth-First Search/Breadth-First Search) to ensure full connectivity within a graph, while considering constraints on inputs and efficiency in processing multiple test cases.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if xroot != yroot: if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def min_connections_to_connect_all(T, test_cases): results = [] for i in range(T): N, C = test_cases[i][0] existing_connections = test_cases[i][1:] parent = list(range(N)) rank = [0] * N for u, v in existing_connections: union(parent, rank, u, v) unique_roots = len(set(find(parent, j) for j in range(N))) results.append(unique_roots - 1) return results"},{"question":"A company wants to allocate resources to tasks while minimizing the total cost. You are given a list of tasks, where each task has specific resource requirements and associated costs. A task can be assigned only if the required resources are met. Write a function that takes a list of tasks and a dictionary of available resources and returns the list of tasks that can be successfully allocated, along with their total cost. Each task is represented as a dictionary with \'required_resources\' and \'cost\' keys. The available resources are represented in a dictionary, where the keys are resource types and the values are the quantities available. For example: ```python tasks = [ {\\"required_resources\\": {\\"cpu\\": 2, \\"memory\\": 4}, \\"cost\\": 100}, {\\"required_resources\\": {\\"cpu\\": 1, \\"memory\\": 2}, \\"cost\\": 50}, {\\"required_resources\\": {\\"cpu\\": 3, \\"memory\\": 6}, \\"cost\\": 200}, ] available_resources = { \\"cpu\\": 4, \\"memory\\": 8, } Output: ([ {\\"required_resources\\": {\\"cpu\\": 2, \\"memory\\": 4}, \\"cost\\": 100}, {\\"required_resources\\": {\\"cpu\\": 1, \\"memory\\": 2}, \\"cost\\": 50}, ], 150) ``` This would return the list of tasks that can be allocated and the total cost.","solution":"def allocate_resources(tasks, available_resources): allocated_tasks = [] total_cost = 0 for task in tasks: can_allocate = True for resource, quantity in task[\'required_resources\'].items(): if available_resources.get(resource, 0) < quantity: can_allocate = False break if can_allocate: allocated_tasks.append(task) total_cost += task[\'cost\'] for resource, quantity in task[\'required_resources\'].items(): available_resources[resource] -= quantity return allocated_tasks, total_cost"},{"question":"In a small town, there\'s a population of n people who each have one or no pet. Each person has either a cat, a dog, or no pet at all. The local government wants to understand the distribution of pets in the town, so they asked you to help them determine the possible combinations of cat and dog ownership among the population. Given the total number of people in the town, n, your task is to compute and print out the possible distribution of how many people might own cats and how many might own dogs, with the number of people owning neither cat nor dog derived as the remaining population. For the purposes of computation, assuming we define: - x as the number of people owning a cat - y as the number of people owning a dog - 0 ≤ x, y ≤ n (each person can have at most one pet) - Each combination of x and y should be valid if x + y ≤ n Given n, your program should print out all possible (x, y) pairs sorted by x in increasing order, and for each x, (y) should be sorted in increasing order. # Input The first line of input contains an integer t, the number of test cases. Next t lines each contain a single integer n, the population of the town. # Output For each test case, output the valid (x, y) pairs separated by spaces in each line. Each test case\'s output should be separated by a blank line. # Constraints 1 ≤ t ≤ 1000 1 ≤ n ≤ 1000 # Sample Input 2 2 3 # Sample Output 0 0 0 1 0 2 1 0 1 1 2 0 0 0 0 1 0 2 0 3 1 0 1 1 1 2 2 0 2 1 3 0","solution":"def pet_distribution(t, populations): Returns the possible distributions of people owning cats and dogs. Args: t: int, number of test cases. populations: list of int, populations for each test case. Returns: list of list of tuples: each list of tuples corresponds to one test case and contains (x, y) pairs. results = [] for n in populations: pairs = [] for x in range(n + 1): for y in range(n + 1 - x): pairs.append((x, y)) results.append(pairs) return results def format_pet_distribution(t, populations): distribution = pet_distribution(t, populations) formatted_output = [] for test_case in distribution: formatted_output.append(\\"n\\".join(f\\"{x} {y}\\" for x, y in test_case)) return \\"nn\\".join(formatted_output) def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) populations = [int(data[i]) for i in range(1, t + 1)] print(format_pet_distribution(t, populations))"},{"question":"You are given an array of integers A_1, A_2, ldots, A_N. You need to find out the maximum product you can obtain by selecting a non-empty subsequence of the array such that no two adjacent elements in the array are part of the subsequence. Since the answer can be very large, output the result modulo 1,000,000,007. -----Input----- - The first line of the input contains a single integer N. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- Print a single line containing one integer ― the maximum product of a non-empty subsequence with no two adjacent elements taken from the array, modulo 1,000,000,007. -----Constraints----- - 1 le N le 10^5 - 1 le A_i le 10^9 for each valid i -----Example Input----- 4 1 2 3 4 -----Example Output----- 4 -----Explanation----- The maximum product is obtained by choosing the subsequence (4).","solution":"def max_product_non_adjacent_subsequence(N, A): MOD = 1000000007 # Considering that the maximum value is individual element (no adjacent consideration) max_product = 0 for num in A: # Each number in the array could become the potential product max_product = max(max_product, num) return max_product % MOD"},{"question":"Given an array arr[] of size N representing the prices of house rentals on different days, the task is to determine if there exists a way to choose two different days such that renting a house on those two days will maximize your total savings in rental, but under the constraint that you have to rent on the first chosen day and leave on the second chosen day (i.e., the second day must be after the first day in the array). Write a function `max_savings` that accepts the array arr[] and integer N (number of days). The function should return the maximum difference between the rental prices on the two chosen days, where the rental on the second selected day is subtracted from the rental on the first selected day. Example 1: Input: N = 6, arr[] = {7, 1, 5, 3, 6, 4} Output: 5 Explanation: The maximum savings can be achieved by renting on day 2 (price = 1) and leaving on day 5 (price = 6), savings = 6 - 1 = 5. Example 2: Input: N = 5, arr[] = {7, 6, 4, 3, 1} Output: 0 Explanation: No savings can be achieved since all rental prices decrease every day. Your Task: This is a functional problem. You do not need to take input directly. Your function should take the array arr and the integer N as input arguments and return the maximal savings. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^6 1 ≤ arr[i] ≤ 10^4","solution":"def max_savings(arr, N): if N < 2: return 0 max_savings = 0 min_price = arr[0] for i in range(1, N): if arr[i] - min_price > max_savings: max_savings = arr[i] - min_price if arr[i] < min_price: min_price = arr[i] return max_savings"},{"question":"You are given a set of integers, and your task is to form two groups such that the difference between the sums of the groups is minimized. Specifically, you need to partition the given set into two subsets such that the absolute difference between their sums is as small as possible. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The second line of each test case contains a single integer N, the number of elements in the set. - The third line of each test case contains N space-separated integers A_{i} (1 <= i <= N), the elements of the set. ------ Output Format ------ For each test case, output on a new line the minimum possible absolute difference between the sums of the two subsets. ------ Constraints ------ 1 leq T leq 100 1 leq N leq 100 1 leq A_{i} leq 1000 for each valid i ----- Sample Input 1 ------ 2 4 1 6 11 5 3 1 2 3 ----- Sample Output 1 ------ 1 0 ----- Explanation 1 ------ Test case 1: You can partition the set into two subsets such that their sums are as close as possible. One possible partition is {1, 6, 5} and {11}, resulting in sums of 12 and 11, with an absolute difference of 1. Test case 2: You can partition the set into two subsets with equal sum. One possible partition is {1, 2} and {3}, resulting in sums of 3 and 3, with an absolute difference of 0.","solution":"def min_subset_sum_difference(T, cases): def find_min_difference(arr, n): total_sum = sum(arr) dp = [[False for _ in range(total_sum // 2 + 1)] for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if arr[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]] else: dp[i][j] = dp[i-1][j] min_diff = float(\'inf\') for j in range(total_sum // 2, -1, -1): if dp[n][j] == True: min_diff = abs(total_sum - 2 * j) break return min_diff results = [] for N, A in cases: results.append(find_min_difference(A, N)) return results"},{"question":"You are given an array of integers and a set of operations to perform on it. The operations are provided in the form of commands, each specifying either a range query or an update on the array. The command format is as follows: - \\"Q l r\\": Query the sum of the elements in the array from index l to r (inclusive). - \\"U i x\\": Update the element at index i to x. Write a program that processes a sequence of commands and returns the results of the query commands. # Input - First line: an integer n (1 ≤ n ≤ 10^5) representing the number of elements in the array. - Second line: n space-separated integers representing the elements of the array. - Third line: an integer q (1 ≤ q ≤ 10^5) representing the number of commands. - Next q lines: each line contains a command in the format described above. # Output For each \\"Q l r\\" command, output the sum of the elements from index l to r (inclusive) on a new line. # Example Input 5 1 2 3 4 5 3 Q 1 3 U 2 10 Q 1 3 Output 6 14 # Note In the example above: 1. The sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. 2. The element at index 2 is updated from 2 to 10. 3. After the update, the sum of elements from index 1 to 3 is 1 + 10 + 3 = 14.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Initialize the tree with base values for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, index, value): pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def query(self, l, r): result = 0 l += self.n r += self.n while l <= r: if l % 2 == 1: result += self.tree[l] l += 1 if r % 2 == 0: result += self.tree[r] r -= 1 l //= 2 r //= 2 return result def process_commands(n, array, q, commands): # Create Segment Tree from data array segment_tree = SegmentTree(array) results = [] for command in commands: parts = command.split() if parts[0] == \'Q\': l = int(parts[1]) - 1 r = int(parts[2]) - 1 results.append(segment_tree.query(l, r)) elif parts[0] == \'U\': i = int(parts[1]) - 1 x = int(parts[2]) segment_tree.update(i, x) return results"},{"question":"Katrina has a special machine that generates music notes based on a unique sequence. The machine produces a sequence of `N` integers, where the value of the i-th note is calculated by the following formula: `note(i) = (i * k) % m`, where `k` and `m` are given constants. The sequence is considered harmonious if all produced notes are distinct. Your task is to determine if the sequence is harmonious for a given `N`, `k`, and `m`. Example 1: Input: N = 4, k = 3, m = 5 Output: True Explanation: The sequence generated is [3, 1, 4, 2]. Since all notes are distinct, the sequence is harmonious. Example 2: Input: N = 5, k = 2, m = 4 Output: False Explanation: The sequence generated is [2, 0, 2, 0, 2]. Since there are repeated notes, the sequence is not harmonious. Your Task: You don\'t need to read input or print anything. Complete the function `isHarmoniousSequence()` which takes in the integers `N`, `k`, and `m` and returns a boolean value indicating whether the sequence is harmonious or not. Expected Time Complexity: O(N) Expected Auxiliary Space: O(min(N, m)) Constraints: 1 <= N <= 10^6 1 <= k, m <= 10^6","solution":"def isHarmoniousSequence(N, k, m): Determines if the sequence generated by note formula is harmonious. Args: N: int - Length of the sequence. k: int - Multiplier constant. m: int - Modulus constant. Returns: bool - True if the sequence is harmonious, False otherwise. notes = set() for i in range(N): note = (i * k) % m if note in notes: return False notes.add(note) return True"},{"question":"Lena has been transported to a magical land where she is given the task to arrange colored stones into specific patterns. She is provided with two different types of stones: red stones and blue stones. She needs to arrange exactly y stones in a sequence such that the sequence contains exactly r red stones and b blue stones, along with satisfying the condition that no two red stones are adjacent. Help Lena determine if it is possible to create such a sequence for several values of y, given the constraints on r and b. -----Input----- The first line contains one integer t (1 ≤ t ≤ 100) — the number of testcases. Each of the following t lines contains three integers y, r, and b (1 ≤ y ≤ 100) and (0 ≤ r, b ≤ 100) — the number of total stones Lena needs to arrange, the number of red stones, and the number of blue stones respectively. -----Output----- Print t lines, in i-th line output YES if Lena can form the required sequence. Otherwise, print NO. -----Example----- Input 3 5 2 3 4 3 1 6 2 4 Output YES NO YES -----Note----- In the first example, Lena can arrange the stones as `RBRBR`. In the second example, it is impossible to arrange 4 stones with 3 reds such that no two reds are adjacent. In the third example, Lena can arrange the stones as `RBRBBR` or `BRBRBB`.","solution":"def can_form_sequence(y, r, b): Determine if a sequence of length y with r red stones and b blue stones can be arranged such that no two red stones are adjacent. if (r - 1) <= b and r + b == y: return \\"YES\\" else: return \\"NO\\" def solve(t, test_cases): results = [] for case in test_cases: y, r, b = case results.append(can_form_sequence(y, r, b)) return results"},{"question":"You are given a string S containing \'0\'s and \'1\'s. You need to count the minimum number of operations required to make the string alternate. In one operation, you can flip a \'0\' to \'1\' or a \'1\' to \'0\'. An alternating string is a string where no two adjacent characters are the same. Example 1: Input: S = \\"010101\\" Output: 0 Explanation: The string is already alternating, so no operations are needed. Example 2: Input: S = \\"1001\\" Output: 2 Explanation: One possible way to make the string alternating is \\"1010\\" (two operations). Example 3: Input: S = \\"1111\\" Output: 2 Explanation: One possible way to make the string alternating is \\"1010\\" (two operations). Your Task: You don\'t need to read input or print anything. Your task is to complete the function minOperations() which takes the string S as input and returns the minimum number of operations required to make the string alternate. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^5","solution":"def minOperations(S): Returns the minimum number of operations required to make the string alternate. n = len(S) count1 = 0 # Count of flips when starting with \'0\' count2 = 0 # Count of flips when starting with \'1\' for i in range(n): if i % 2 == 0: if S[i] != \'0\': count1 += 1 if S[i] != \'1\': count2 += 1 else: if S[i] != \'1\': count1 += 1 if S[i] != \'0\': count2 += 1 return min(count1, count2)"},{"question":"You are given a list of integers and you need to write a function that returns the second smallest integer in the list. If the list has fewer than 2 unique integers, return -1. Input: The input consists of multiple test cases. The first line of the input contains an integer T denoting the number of test cases. Each test case consists of a line containing a list of space-separated integers. Output: For each test case, output the second smallest integer in the list or -1 if there are fewer than 2 unique integers. Constraints: 1 ≤ T ≤ 50 1 ≤ length of list ≤ 1000 -10^6 ≤ integer in list ≤ 10^6 SAMPLE INPUT 4 1 3 4 2 1 2 5 5 5 5 2 1 10 SAMPLE OUTPUT 2 -1 2 -1 Explanation: For the first test case, the unique integers are [1, 2, 3, 4] and the second smallest integer is 2. For the second test case, there is only one unique integer, so the output is -1. For the third test case, the unique integers are [1, 2] and the second smallest integer is 2. For the fourth test case, there is only one integer, so the output is -1.","solution":"def second_smallest(numbers): Returns the second smallest integer in the list or -1 if there are fewer than 2 unique integers. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return -1 unique_numbers.sort() return unique_numbers[1] def process_test_cases(test_cases): results = [] for case in test_cases: numbers = list(map(int, case.split())) results.append(second_smallest(numbers)) return results def main(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = lines[1:T + 1] results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"Given a string s consists of upper/lower-case alphabets and empty space characters \' \', return the length of last word in the string. If the last word does not exist, return 0. Note: A word is defined as a character sequence consists of non-space characters only. Example 1: Input: \\"Hello World\\" Output: 5 Example 2: Input: \\" \\" Output: 0","solution":"def length_of_last_word(s): Returns the length of the last word in the string s. If the last word does not exist, returns 0. words = s.strip().split(\\" \\") if len(words[-1]) == 0: return 0 else: return len(words[-1])"},{"question":"Write a function that simulates two armed bandits. You are given two slot machines represented as lists of integers. Each integer represents a payout, either positive or negative, for that machine. Each time you play a slot machine, you draw a payout from that machine\'s list at random (uniformly). Your goal is to maximize your total payout over a fixed number of plays, N. Constraints * 1 ≤ N ≤ 10^4 * 1 ≤ len(machine) ≤ 100 * -1000 ≤ payout ≤ 1000 Input * The first line contains an integer, N, representing the number of plays. * The second line contains a list of integers representing the payout values for the first machine. * The third line contains a list of integers representing the payout values for the second machine. Output Output a single integer representing the maximum possible total payout after N plays. Example Input 5 [1, -1, 2] [2, 1, -2] Output 10 Explanation You can achieve the maximum payout by always choosing the second slot machine in this case, but the decision of which slot machine to play can vary based on the distribution of the values in each list. The function should simulate the draws to find the optimal strategy.","solution":"import random def simulate_bandits(N, machine1, machine2): Simulates N plays on two slot machines to maximize the total payout. Args: N (int): The number of plays. machine1 (list of int): Payouts for the first slot machine. machine2 (list of int): Payouts for the second slot machine. Returns: int: Maximum possible total payout after N plays. total_payout = 0 # Calculate and compare average payouts of the two machines avg_machine1 = sum(machine1) / len(machine1) avg_machine2 = sum(machine2) / len(machine2) # Choose the machine with the higher average payout for all plays chosen_machine = machine1 if avg_machine1 > avg_machine2 else machine2 for _ in range(N): payout = random.choice(chosen_machine) total_payout += payout return total_payout"},{"question":"Given an integer N, your task is to generate the Nth Fibonacci number. The Fibonacci series is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. You need to write a function nthFibonacci() that takes N as input and returns the Nth Fibonacci number. You should ensure your solution is efficient for larger values of N. Example 1: Input: N = 5 Output: 5 Explanation: The Fibonacci series: 0, 1, 1, 2, 3, 5. The 5th Fibonacci number is 5. Example 2: Input: N = 10 Output: 55 Explanation: The Fibonacci series: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. The 10th Fibonacci number is 55. Your Task: You don\'t need to read or print anything. Your task is to complete the function nthFibonacci() which takes N as input parameter and returns the Nth Fibonacci number. Expected Time Complexity: O(log N) Expected Space Complexity: O(1) Constraints: 0 <= N <= 30","solution":"def nthFibonacci(N): Returns the Nth Fibonacci number using an iterative approach which is efficient in terms of space and time. if N <= 0: return 0 elif N == 1: return 1 a, b = 0, 1 for _ in range(2, N + 1): a, b = b, a + b return b"},{"question":"You are given a positive integer n. Your task is to compute the sum of the minimum values of all subarrays of the array [1, 2, 3, ..., n]. A subarray is defined as a contiguous segment of the array. For example, for the array [1, 2, 3], the subarrays are [1], [2], [3], [1, 2], [2, 3], and [1, 2, 3]. The minimum value of a subarray is the smallest element in that subarray. For example, the minimum value of the subarray [1, 2] is 1. Given n, find the sum of the minimum values of all subarrays of the array [1, 2, 3, ..., n]. -----Input----- The input consists of a single integer n (1 ≤ n ≤ 10^5). -----Output----- Output a single integer, the sum of the minimum values of all subarrays of [1, 2, 3, ..., n]. -----Examples----- Input 3 Output 10 ----Explanation----- For n=3, the array is [1, 2, 3]. The subarrays and their minimum values are as follows: - [1] → minimum is 1 - [2] → minimum is 2 - [3] → minimum is 3 - [1, 2] → minimum is 1 - [2, 3] → minimum is 2 - [1, 2, 3] → minimum is 1 The sum of these minimum values is 1 + 2 + 3 + 1 + 2 + 1 = 10.","solution":"def sum_of_minimums(n): Returns the sum of the minimum values of all subarrays of the array [1, 2, 3, ..., n]. total_sum = 0 # Nested loop to consider all subarrays for i in range(1, n + 1): for j in range(i, n + 1): # For a subarray starting at `i` and ending at `j` the minimum value is just `i` total_sum += i return total_sum"},{"question":"James is an avid hiker and likes to explore various trails across the country. Recently, he has developed an interest in mapping out optimal paths that connect different scenic spots in a trail. Each trail can be represented as a graph, where nodes represent the scenic spots and edges represent the paths connecting them. Each edge has a weight that indicates the difficulty of the path. Given a list of edges in the form of (u, v, w) representing an undirected trail: - u and v are the nodes representing the scenic spots, - w is the weight of the edge representing the difficulty of the path between these two spots, Write a program to find the length (total weight) of the Minimum Spanning Tree (MST) formed by these edges. Input Format: - The first line contains two space-separated integers, N (the number of scenic spots) and M (the number of trails). - The next M lines each contain three space-separated integers u, v, and w, denoting a trail between scenic spots u and v with weight w. Constraints: - 2 <= N <= 100,000 - 1 <= M <= 200,000 - 1 <= w <= 1,000,000 Output Format: - A single integer, the total weight of the MST. Sample Input: 4 5 1 2 1 1 3 4 2 3 2 2 4 7 3 4 3 Sample Output: 6 Explanation: The MST for the given input has edges (1-2 with weight 1), (2-3 with weight 2), and (3-4 with weight 3). The total weight is 1 + 2 + 3 = 6. Note: - Ensure to handle large inputs efficiently. - You may use well-known algorithms like Kruskal\'s or Prim\'s to solve this problem.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def kruskal_mst(n, edges): edges.sort(key=lambda edge: edge[2]) uf = UnionFind(n) mst_weight = 0 mst_edges = 0 for u, v, w in edges: u -= 1 # Adjusting 1-based index to 0-based index v -= 1 # Adjusting 1-based index to 0-based index if uf.find(u) != uf.find(v): uf.union(u, v) mst_weight += w mst_edges += 1 if mst_edges == n - 1: break return mst_weight def minimum_spanning_tree(n, m, edges): return kruskal_mst(n, edges)"},{"question":"There are n cities connected by m roads. Each road has a toll cost. There is also a list of k people who want to travel between specific pairs of cities. Each person has a maximum budget they can spend on tolls. Your task is to determine if it is possible for each person to travel between their specified cities within their budget, and if so, find the minimum toll cost for each person to make the trip. Input The first line contains two integers n (2 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 2*10^5) — the number of cities and the number of roads. Each of the next m lines contains three integers u_i, v_i, and c_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i, 1 ≤ c_i ≤ 10^9) — meaning there is a road between cities u_i and v_i with toll cost c_i. The next line contains a single integer k (1 ≤ k ≤ 10^4) — the number of people. Each of the next k lines contains three integers a_i, b_i, and b_i_max (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i, 1 ≤ b_i_max ≤ 10^9) — meaning the i-th person wants to travel from city a_i to city b_i and their maximum budget for tolls is b_i_max. Output For each of the k people, print \\"YES\\" followed by the minimum toll cost if it is possible to travel within their budget, otherwise print \\"NO\\". Examples Input 4 4 1 2 10 2 3 10 3 4 10 4 1 10 3 1 3 25 1 4 5 2 4 20 Output YES 20 NO YES 20 Note In the sample, the first person can travel from city 1 to city 3 with a toll cost of 20, the second person cannot travel from city 1 to city 4 within the budget of 5, and the third person can travel from city 2 to city 4 with a toll cost of 20.","solution":"import heapq def find_minimum_toll(n, m, edges, k, queries): # Create adjacency list adj = [[] for _ in range(n + 1)] for u, v, c in edges: adj[u].append((v, c)) adj[v].append((u, c)) # Dijkstra to find minimum toll cost between all pairs of cities def dijkstra(source): dist = [float(\'inf\')] * (n + 1) dist[source] = 0 pq = [(0, source)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in adj[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(pq, (dist[v], v)) return dist results = [] for a, b, max_budget in queries: dist_from_a = dijkstra(a) if dist_from_a[b] <= max_budget: results.append(f\\"YES {dist_from_a[b]}\\") else: results.append(\\"NO\\") return results"},{"question":"Luigi is setting up traps in a straight line to catch a ghost that moves at a speed of S pixels per second. Luigi can set trap triggers at specific positions on the line, which will get activated only if the ghost is exactly at the position when Luigi starts the trigger. Find the earliest time (in seconds) at which Luigi needs to start triggering the traps, so that the ghost, starting from its initial position at 0 pixels, gets caught in the trap placed at position P pixels. ------ Input Format ------ - The first line of input will contain an integer T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input, containing two space-separated integers S and P. ------ Output Format ------ For each test case, output in a single line the earliest time (in seconds) at which Luigi needs to start triggering the traps to catch the ghost. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ S, P ≤ 100 ----- Sample Input 1 ------ 3 2 4 3 9 1 10 ----- Sample Output 1 ------ 2 3 10 ----- explanation 1 ------ Test case 1: The ghost moves at a speed of 2 pixels per second and Luigi sets a trap at 4 pixels. To catch the ghost at 4 pixels, he needs to start triggering the trap after 4 ÷ 2 = 2 seconds. Test case 2: The ghost moves at a speed of 3 pixels per second and Luigi sets a trap at 9 pixels. To catch the ghost at 9 pixels, he needs to start triggering the trap after 9 ÷ 3 = 3 seconds. Test case 3: The ghost moves at a speed of 1 pixel per second and Luigi sets a trap at 10 pixels. To catch the ghost at 10 pixels, he needs to start triggering the trap after 10 ÷ 1 = 10 seconds.","solution":"def earliest_trigger_time(T, test_cases): results = [] for case in test_cases: S, P = case # Calculate the earliest time to start triggering the traps time = P // S results.append(time) return results"},{"question":"John is training for a marathon and follows a strict distance-running schedule. He currently runs a distance of D kilometers each week. However, to prepare better, he wants to increase his weekly distance by Y kilometers each week until he can run at least G kilometers in a single week. Can you help John determine how many weeks it will take for him to achieve his goal, given his current weekly running distance and the incremental increase? ------ Input ------ The first line contains an integer T, the number of test cases. Each of the next T lines contains three integers D, G, Y, which represent John\'s current weekly distance, his goal distance, and the weekly increment respectively. ------ Output ------ For each test case, output in a single line the required number of weeks for John to achieve his goal. ------ Constraints ------ 1 ≤ T ≤ 20 000 10 ≤ D < G ≤ 300 1 ≤ Y ≤ 50 Y | (G - D) ------ Subtasks ------ Subtask #1 (100 points): Original constraints ----- Sample Input ----- 3 10 30 5 40 100 10 20 50 10 ----- Sample Output ----- 4 6 3 ----- Explanation ----- For the first test case: John needs to increase his weekly running distance by 30 - 10 = 20 kilometers, with an increment of 5 kilometers each week. It will take him frac{20}{5} = 4 weeks to achieve his goal. For the second test case: John needs to increase his weekly running distance by 100 - 40 = 60 kilometers, with an increment of 10 kilometers each week. It will take him frac{60}{10} = 6 weeks to achieve his goal. For the third test case: John needs to increase his weekly running distance by 50 - 20 = 30 kilometers, with an increment of 10 kilometers each week. It will take him frac{30}{10} = 3 weeks to achieve his goal.","solution":"def weeks_to_reach_goal(T, cases): Determines the number of weeks it will take for John to achieve his goal distance. Parameters: T (int): Number of test cases cases (list of tuples): Each tuple consists of three integers D, G, Y Returns: list of int: A list containing the number of weeks for each test case results = [] for D, G, Y in cases: weeks_needed = (G - D) // Y results.append(weeks_needed) return results # Example usage T = 3 cases = [ (10, 30, 5), (40, 100, 10), (20, 50, 10) ] print(weeks_to_reach_goal(T, cases))"},{"question":"Alice is fond of manipulating sequences with unique integer elements. She has devised a special sequence operation called the \\"Inverse Swap\\". Given an initial sequence S1, S2, ..., SN and a target sequence T1, T2, ..., TN derived from S. The Inverse Swap operation consists of the following steps: 1. Find any subsequence of indices i1, i2, ..., ik such that swapping the elements of S at these indices will make S equal to T. Your task is to determine the minimum number of swaps needed to transform the initial sequence S into the target sequence T using the Inverse Swap operation. Input format: The first line of input consists of an integer N. The next line consists of N integers representing the initial sequence S1, S2, ..., SN. The next line consists of N integers representing the target sequence T1, T2, ..., TN. Output format: Print the minimum number of swaps needed to transform S into T. If it is not possible to transform S into T, print -1. Constraints: 3 ≤ N ≤ 10^5 1 ≤ Si, Ti ≤ 10^9 SAMPLE INPUT 5 3 1 2 4 5 1 2 3 4 5 SAMPLE OUTPUT 2 Explanation: To transform the initial sequence into the target sequence, we can perform the following swaps: - Swap 3 and 1: The sequence becomes (1, 3, 2, 4, 5). - Swap 3 and 2: The sequence becomes (1, 2, 3, 4, 5). The minimum number of swaps needed is 2.","solution":"def min_swaps_to_transform(initial, target): if sorted(initial) != sorted(target): return -1 index_dict = {v: i for i, v in enumerate(target)} for i in range(len(initial)): initial[i] = index_dict[initial[i]] visited = [False] * len(initial) swaps = 0 for i in range(len(initial)): if visited[i] or initial[i] == i: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = initial[x] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps # Function to be called def min_swaps_helper(N, initial, target): return min_swaps_to_transform(initial, target)"},{"question":"Little Kittu likes playing with strings. He particularly loves strings that have repeated characters because he finds patterns in them fascinating. Kittu defines a **Beautiful String** as a string where any two consecutive characters are different. You are given an initial string which may or may not be beautiful. Your task is to help Little Kittu transform it into a beautiful string by performing a series of operations. In one operation, you can pick any character in the string and change it to any character from \'a\' to \'z\'. The goal is to achieve the beautiful string with the minimum number of operations. Input: - The first line contains an integer N, the length of the string. - The second line contains a string of length N. Output: - Print the minimum number of operations required to make the string beautiful. Constraints: 1 ≤ N ≤ 100000 The string contains only lowercase English letters. SAMPLE INPUT 4 aabb SAMPLE OUTPUT 2 Explanation: Perform the following operations to make the string beautiful: Change the first \'b\' to \'c\' to get \\"aabc\\". Change the second \'b\' to \'d\' to get \\"aabcd\\". As a result, \\"aabc\\" is a beautiful string. So, the minimum number of operations needed is 2.","solution":"def min_operations_to_beautiful_string(N, s): Returns the minimum number of operations required to make the string beautiful. Beautiful string means no two consecutive characters are the same. operations = 0 # Iterate over the string and check consecutive characters for i in range(1, N): if s[i] == s[i-1]: operations += 1 # Count the operations needed # Change current character to any different character # New character should be different from the next character as well if it exists if i + 1 < N and s[i] == s[i+1]: s = s[:i] + (\'a\' if s[i] != \'a\' else \'b\') + s[i+1:] else: s = s[:i] + (\'a\' if s[i] != \'a\' else \'b\') + s[i+1:] return operations # Read input data def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) s = data[1] print(min_operations_to_beautiful_string(N, s)) if __name__ == \\"__main__\\": main()"},{"question":"**Step 1:** Create a function called `alternate_case()` that takes a string as input and returns a new string with the case of each alphabetic character switched. Non-alphabetic characters should remain unchanged. For example, `alternate_case(\\"Hello, World!\\")` should return `\\"hELLO, wORLD!\\"`. **Step 2:** Now create a function called `reverse_words()` that takes a string as input and returns a new string with the order of the words reversed, but the characters in each word should remain in their original order. Words are separated by spaces. For example, `reverse_words(\\"Hello, World!\\")` should return `\\"World! Hello,\\"`.","solution":"def alternate_case(s): Returns a new string with the case of each alphabetic character switched. Non-alphabetic characters remain unchanged. return \'\'.join([char.lower() if char.isupper() else char.upper() for char in s]) def reverse_words(s): Returns a new string with the order of the words reversed. Characters in each word remain in their original order. words = s.split(\' \') reversed_words = \' \'.join(reversed(words)) return reversed_words"},{"question":"Robin loves organizing coding contests. He has created a new type of coding challenge where each contestant must solve a series of sequential problems. Each problem is dependent on the solution of the previous problem, hence the contestants must solve the problems in the order given. During the contest, Robin wants to know how many problems have been already solved by the contestants after each submission. Submissions to a problem can be successful (problem solved) or unsuccessful (problem not solved). A problem is considered solved only when a contestant submits a correct solution. Robin needs your help to track the status of the problems solved after each submission. -----Input----- The first line of the input consists of two space-separated integers Q and M, representing the number of problems in the contest and the number of submissions made by the contestants respectively. Then follows M lines, each line contains the status of a submission for a problem: - The integer p indicating the problem number (1 to Q) and - A boolean status: If status is 1, it means that the problem was solved correctly; if status is 0, it means the submission was incorrect. Submissions are processed in order. -----Output----- Output M lines, each containing a single integer indicating the number of problems solved up to and including that submission. -----Limits----- - 1 leq Q leq 1000 - 1 leq M leq 1000 - 1 leq p leq Q - Status is either 0 (incorrect) or 1 (correct). -----Examples----- Sample Input: 4 6 1 1 2 0 2 1 3 1 4 1 4 0 Sample Output: 1 1 2 3 4 4","solution":"def track_solved_problems(Q, M, submissions): Tracks the number of problems solved after each submission. Parameters: Q (int): The number of problems in the contest. M (int): The number of submissions made by the contestants. submissions (List[Tuple[int, int]]): List of tuples representing submissions. Returns: List[int]: Number of problems solved after each submission. problems_solved = set() solved_counts = [] for p, status in submissions: if status == 1: problems_solved.add(p) solved_counts.append(len(problems_solved)) return solved_counts # Example function call Q = 4 M = 6 submissions = [(1, 1), (2, 0), (2, 1), (3, 1), (4, 1), (4, 0)] print(track_solved_problems(Q, M, submissions)) # Output: [1, 1, 2, 3, 4, 4]"},{"question":"You are given n distinct words and an array of q queries. Each query consists of two integers, l and r (1 ≤ l ≤ r ≤ n). You need to determine if all the words within the range specified by the query are unique. If all the words within the range are unique, output \\"YES\\". Otherwise, output \\"NO\\". -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of words. The next line contains n space-separated words, each consisting of lowercase English letters. All words are distinct. The third line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. Each of the next q lines contains two integers, l and r (1 ≤ l ≤ r ≤ n), representing the range for the query. -----Output----- Output q lines, each containing \\"YES\\" if all the words in the specified range [l, r] are unique, otherwise \\"NO\\". -----Examples----- Input 5 apple banana cherry date elderberry 3 1 3 2 5 3 4 Output YES YES YES Input 4 pear plum peach apple 2 1 2 3 4 Output YES YES","solution":"def are_words_unique_in_range(n, words, q, queries): results = [] for l, r in queries: if l == r: results.append(\\"YES\\") else: word_set = set(words[l-1:r]) if len(word_set) == (r - l + 1): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Implement a function that takes a list of strings and returns a list of booleans. Each boolean corresponds to whether the string at the same index of the input list is a valid \\"Palindrome Permutation.\\" A \\"Palindrome Permutation\\" is a string that can be rearranged to form a palindrome. For example, \\"tactcoa\\" can be rearranged to \\"tacocat\\" or \\"atcocta\\". Note that spaces and case should be ignored while determining if a string is a Palindrome Permutation. The function should follow these rules: - Ignore spaces and consider characters case-insensitively. - Return a list of booleans, where each boolean indicates whether the string at that index is a Palindrome Permutation. Examples: ```python input_list = [\\"Tact Coa\\", \\"Hello\\", \\"A man a plan a canal Panama\\", \\"No lemon no melon\\"] # Output: [True, False, True, True] ```","solution":"def is_palindrome_permutation(s): Return True if the input string can be rearranged to form a palindrome, else False. # Ignore spaces and consider characters case-insensitively s = s.replace(\\" \\", \\"\\").lower() # Create a frequency dictionary to count each character char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 # Check the frequency of characters odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # A string can be rearranged to form a palindrome if it has at most one character with an odd count return odd_count <= 1 def check_palindrome_permutations(input_list): Takes a list of strings and returns a list of booleans indicating if each string is a palindrome permutation. return [is_palindrome_permutation(s) for s in input_list]"},{"question":"You are given a binary tree with `n` nodes, each node containing a unique integer value from 1 to n. You need to perform the following operation on the tree: Find the sum of values in the subtree rooted at a given node. The operation can be repeated multiple times, each time for a different node in the tree. Write a function `subtree_sum(n: int, edges: List[Tuple[int, int]], queries: List[int]) -> List[int]` that takes the following inputs: - `n`: the number of nodes in the tree (1 ≤ n ≤ 10^5) - `edges`: a list of n-1 tuples representing the edges of the tree, where each tuple (u, v) means there is an edge between nodes u and v (1 ≤ u, v ≤ n) - `queries`: a list of integers, each representing a node for which to find the subtree sum The function should return a list of integers, where each integer corresponds to the sum of the subtree values for the respective node in the queries list. # Input 1. The first line contains an integer n (the number of nodes). 2. The next n-1 lines each contain two integers u and v that describe an edge between nodes u and v. 3. The next line contains an integer q (the number of queries). 4. The next q lines each contain an integer representing a query node. # Output Print q lines, each containing the sum of the values in the subtree rooted at the respective query node. # Example Input ``` 7 1 2 1 3 2 4 2 5 3 6 3 7 3 2 3 1 ``` Output ``` 11 16 28 ``` Explanation The tree looks like this: ``` 1 / 2 3 / / 4 5 6 7 ``` For the query node 2: - Subtree rooted at node 2: {2, 4, 5} - Sum: 2 + 4 + 5 = 11 For the query node 3: - Subtree rooted at node 3: {3, 6, 7} - Sum: 3 + 6 + 7 = 16 For the query node 1: - Subtree rooted at node 1: {1, 2, 3, 4, 5, 6, 7} - Sum: 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28","solution":"from typing import List, Tuple from collections import defaultdict def subtree_sum(n: int, edges: List[Tuple[int, int]], queries: List[int]) -> List[int]: tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def dfs(node, parent): total_sum = node for neighbor in tree[node]: if neighbor != parent: total_sum += dfs(neighbor, node) subtree_sums[node] = total_sum return total_sum subtree_sums = {} dfs(1, -1) return [subtree_sums[query] for query in queries]"},{"question":"You are given an array of non-negative integers where each integer represents the amount of rainwater stored at that index, and the width of each bar is 1. Your task is to calculate the maximum amount of rainwater that can be trapped after raining between the bars. ---Constraints--- - 1 ≤ n ≤ 1000 - 0 ≤ arr[i] ≤ 1000 ---Input--- Input is provided via standard input in the following format: n arr_1 arr_2 ... arr_n ---Output--- Print the maximum amount of trapped rainwater. ---Sample Input--- 6 0 1 0 2 1 0 1 3 2 1 2 1 ---Sample Output--- 6","solution":"def trap_rainwater(arr): Calculate the maximum amount of rainwater that can be trapped. :param arr: List of non-negative integers representing heights of bars. :return: Maximum amount of trapped rainwater. if not arr: return 0 n = len(arr) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = arr[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], arr[i]) right_max[n - 1] = arr[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], arr[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - arr[i] return water_trapped # Function to process the input format def process_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) return trap_rainwater(arr) if __name__ == \\"__main__\\": print(process_input())"},{"question":"You are given an array of integers. Your task is to modify the array such that each element in the array is replaced with the next greater element present on its right side in the array. If there is no greater element on the right side, replace it with -1. Write a function `nextGreaterElement(arr)` that takes an array of integers and returns a new array that shows the next greater element for each input array position. # Input - The input is an array of integers `arr` with size `n` (1 ≤ n ≤ 100,000). - The elements of the array are in the range `1 ≤ arr[i] ≤ 1,000,000`. # Output - Return a new array where each element is replaced with the next greater element to its right. If there is no greater element, replace it with -1. # Examples Example 1 - **Input:** `[4, 5, 2, 10, 8]` - **Output:** `[5, 10, 10, -1, -1]` Example 2 - **Input:** `[3, 7, 1, 7, 8, 4, 5]` - **Output:** `[7, 8, 7, 8, -1, 5, -1]` # Notes - Think about an efficient solution that avoids a brute-force nested loop, which can be too slow for large inputs. - Utilize data structures that can help keep track of and find the next greater element efficiently. Consider using a stack.","solution":"def nextGreaterElement(arr): This function takes an array of integers and returns a new array where each element is replaced with the next greater element to its right. If there is no greater element on the right, replace it with -1. n = len(arr) result = [-1] * n stack = [] for i in range(n): while stack and arr[stack[-1]] < arr[i]: result[stack.pop()] = arr[i] stack.append(i) return result"},{"question":"You are given an array of integers of size n, where the values in the array can range from 1 to 10^9. Your task is to find the \\"peaks\\" in the array. A peak is an element that is greater than its neighbors. For array positions 0 and n-1, only one neighbor exists, so they can be considered peaks if they are greater than their single neighbor. For the elements in the middle, both neighbors should be smaller for it to be considered a peak. Write a function to find and return the index positions of all the peak elements in the array. If there are no peaks in the array, return an empty list. -----Input----- The first line of the input contains a single integer t (1 le t le 10^3) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n (1 le n le 10^5) — the size of the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- For each test case, output a single line containing the indices of the peak elements in the array separated by spaces. If there are no peaks, output an empty line. -----Examples----- Input 2 5 1 3 2 4 1 6 2 2 2 2 2 2 Output 1 3 -----Note----- In the first test case, the element at index 1 (value = 3) is a peak, as it is greater than its neighbors 1 and 2. Similarly, the element at index 3 (value = 4) is a peak, as it is greater than its neighbors 2 and 1. In the second test case, there are no peak elements since all values are the same.","solution":"def find_peaks(arr): Returns the list of indices which are peaks in the given array. A peak is an element that is greater than its neighbors. For edge elements, only one neighbor is compared. n = len(arr) peaks = [] if n == 0: return peaks if n == 1: peaks.append(0) return peaks # Check the first element if arr[0] > arr[1]: peaks.append(0) # Check the middle elements for i in range(1, n-1): if arr[i] > arr[i-1] and arr[i] > arr[i+1]: peaks.append(i) # Check the last element if arr[n-1] > arr[n-2]: peaks.append(n-1) return peaks def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] peaks = find_peaks(arr) results.append(peaks) return results"},{"question":"Given a number N. The task is to compute the result of raising 2 to the power of N and then finding the last two digits of the resulting number. Example 1: Input: N = 15 Output: 28 Explanation: 2^15 = 32768. So the last two digits are 68. Example 2: Input: N = 100 Output: 76 Explanation: 2^100 ends in 76. Your Task: You do not need to read the input or print anything. Your task is to complete the function lastTwoDigits() which takes N as input and returns the last two digits of 2^N. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{18}","solution":"def lastTwoDigits(N): Returns the last two digits of 2 raised to the power of N. Parameters: N (int): The exponent to raise 2 to. Returns: int: The last two digits of the result. if N == 0: return 1 # using modulo property to find last two digits return pow(2, N, 100)"},{"question":"Given a binary tree, implement a function to find the largest value in each row of the tree. The function should return a list where each element is the largest value of the corresponding row. Example 1: Input: 1 / 3 2 / 5 3 9 Output: [1, 3, 9] Explanation: The largest value in the first row is 1, in the second row is 3, and in the third row is 9. Example 2: Input: 10 / 20 30 / 15 25 Output: [10, 30, 25] Explanation: The largest value in the first row is 10, in the second row is 30 and in the third row is 25. Your Task: Complete the function largestValues() which takes the root of the binary tree as input parameter and returns a list containing the largest values in each row of the tree. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ Number of nodes in the tree ≤ 10^4 -10^9 ≤ Node values ≤ 10^9","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def largestValues(root): Finds the largest value in each row of a binary tree. if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) max_value = float(\'-inf\') for _ in range(level_size): node = queue.popleft() max_value = max(max_value, node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(max_value) return result"},{"question":"You are given an array of integers. You need to find the sum of the subarray with the maximum sum. ------ Input Format ------ - The first line contains an integer N, the size of the array. - The second line contains N space-separated integers representing the elements of the array. ------ Output Format ------ Print a single integer, the sum of the subarray with the maximum sum. ------ Constraints ------ 1 ≤ N ≤ 10^5 −10^4 ≤ text{element of the array} ≤ 10^4 ----- Sample Input 1 ------ 8 -2 1 -3 4 -1 2 1 -5 4 ----- Sample Output 1 ------ 6 ----- Explanation 1 ------ The subarray [4, -1, 2, 1] has the largest sum which is 6. ------ Note ------ A subarray is a contiguous part of the array.","solution":"def max_subarray_sum(arr): Returns the sum of the subarray with the maximum sum using Kadane\'s Algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given an integer array `arr` of length `n` and an integer `d`, you need to find the number of increasing subarrays of length `d` in `arr`. An increasing subarray is a subarray where each element is strictly greater than the previous element. Write a function `count_increasing_subarrays(n, d, arr)` that finds how many increasing subarrays of length `d` are in the array `arr`. # Input - `n` (1 ≤ n ≤ 3 * 10^5): The length of the array. - `d` (2 ≤ d ≤ n): The length of the subarray. - `arr` (1 ≤ arr[i] ≤ 10^9): The array elements. # Output - An integer representing the number of increasing subarrays of length `d`. # Examples Input: ``` 8 3 1 3 5 4 2 7 8 9 ``` Output: ``` 3 ``` Input: ``` 5 2 2 2 2 2 2 ``` Output: ``` 0 ``` # Note In the first example, the increasing subarrays of length `d=3` occur at positions: - (1, 3, 5) - (4, 7, 8): not valid because 8 is not directly after the previous 7. Thus, there are 3 increasing subarrays in total. In the second example, no increasing subarray of length `d=2` exists as all elements are equal.","solution":"def count_increasing_subarrays(n, d, arr): Returns the number of increasing subarrays of length d in arr. count = 0 for i in range(n - d + 1): is_increasing = True for j in range(i, i + d - 1): if arr[j] >= arr[j + 1]: is_increasing = False break if is_increasing: count += 1 return count"},{"question":"You are developing a scheduling system for a series of events at a conference. There are n events, each defined by a start time and an end time. Your task is to determine the maximum number of non-overlapping events one can attend. For example, consider the following events: 1. Event 1: Start time - 1, End time - 3 2. Event 2: Start time - 2, End time - 4 3. Event 3: Start time - 3, End time - 5 In this case, you can attend Event 1 and Event 3 without overlapping. Write a function that takes a list of tuples, where each tuple contains the start time and end time of an event, and returns the maximum number of non-overlapping events you can attend. # Input - An integer n (1 ≤ n ≤ 100,000), the number of events. - A list of n tuples where each tuple contains two integers (si, ei) (1 ≤ si < ei ≤ 10^9), the start and end times of the ith event. # Output - An integer representing the maximum number of non-overlapping events. # Example Input ``` 3 [(1, 5), (1, 4), (2, 6)] ``` Output ``` 1 ``` Input ``` 4 [(1, 3), (2, 4), (3, 5), (6, 8)] ``` Output ``` 2 ```","solution":"def max_non_overlapping_events(events): Determines the maximum number of non-overlapping events. :param events: List of tuples, each tuple contains start and end time of an event. :return: Maximum number of non-overlapping events. # Sort events by their end times events.sort(key=lambda x: x[1]) max_events = 0 last_end_time = -1 for event in events: if event[0] > last_end_time: max_events += 1 last_end_time = event[1] return max_events"},{"question":"Given an integer array, determine if there exists a subarray whose sum is divisible by a given integer k. A subarray is a contiguous part of the array. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and k (1 le n le 1000, 1 le k le 10^4) — the length of the array and the integer to check divisibility with. The second line of each test case contains n integers a_1, a_2, ldots, a_{n} (-10^4 le a_i le 10^4) — the elements of the array. -----Output----- For each test case, print \\"YES\\" if there is a subarray whose sum is divisible by k. Otherwise, print \\"NO\\". -----Examples----- Input 2 5 6 1 3 2 5 4 4 3 1 2 3 4 Output YES YES -----Note----- In the first example, the subarray [2, 5, 4] has a sum of 11, which is divisible by 6. In the second example, the subarray [3, 3] has a sum of 6, which is divisible by 3.","solution":"def subarray_sum_divisible(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] prefix_sum_mod_k = {} prefix_sum = 0 found = False for j in range(n): prefix_sum += arr[j] mod = prefix_sum % k if mod == 0: found = True break if mod in prefix_sum_mod_k: found = True break else: prefix_sum_mod_k[mod] = j if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are helping to organize a marathon and need to determine the relative ranking of participants based on their reported finishing times. However, some participants have reported their finishing times inconsistently, and you need to detect this. The marathon participants\' finishing times are recorded in pairs, where each pair consists of two participants and the order in which they finished the race. To ensure accurate results, your task is to write a program that verifies the consistency of these reported pairwise rankings. -----Input----- The first line contains two integers N (2 leq N leq 1000) and M (1 leq M leq 10000), where N is the number of participants and M is the number of reported comparisons. Each of the following M lines contains two integers A and B (0 leq A, B < N), where A finished before B. No two participants have the same finishing time, and each participant\'s position is reported at least once. -----Output----- Output a single word: “consistent” if the reported finishing times are consistent, and “inconsistent” if they are not. -----Examples----- Sample Input 1: 4 3 0 1 1 2 2 3 Sample Output 1: consistent Sample Input 2: 4 3 0 1 2 1 1 3 Sample Output 2: consistent Sample Input 3: 4 3 0 1 2 1 1 2 Sample Output 3: inconsistent","solution":"def check_consistency(n, m, comparisons): from collections import defaultdict, deque # Create a graph based on the pairwise comparisons graph = defaultdict(list) in_degree = [0] * n for a, b in comparisons: graph[a].append(b) in_degree[b] += 1 # Topological Sort (Kahn\'s Algorithm) queue = deque([node for node in range(n) if in_degree[node] == 0]) sorted_list = [] while queue: node = queue.popleft() sorted_list.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If we can sort all nodes, the sorting is consistent if len(sorted_list) == n: return \'consistent\' else: return \'inconsistent\' # Function to input the data and call the check_consistency function def marathon_ranking(n, m, pairs): return check_consistency(n, m, pairs)"},{"question":"Divide the Range You are given two integers n and k. Your task is to divide the range [1, n] into k contiguous segments such that each segment contains at least one element, and the difference between the largest and smallest sum of these segments is minimized. Input: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^6). Output: - Output k integers, where the i-th integer represents the size of the i-th segment. If there are multiple solutions, any one of them will be accepted. Example: Input: 10 3 Output: 3 3 4 Explanation: One possible division of the range [1, 10] into 3 contiguous segments is: [1, 2, 3], [4, 5, 6], [7, 8, 9, 10]. The sums of these segments are 6, 15, and 34 respectively. The difference between the largest and smallest sum is minimized in this case. Note: It is guaranteed that there exists at least one valid division for the given input constraints.","solution":"def divide_range(n, k): Divides the range [1, n] into k contiguous segments such that each segment contains at least one element, and the difference between the largest and smallest sum of these segments is minimized. quotient = n // k remainder = n % k segments = [quotient] * k for i in range(remainder): segments[i] += 1 # Distribute the remainder return segments # Example usage: # n = 10, k = 3 # The result would be [4, 3, 3] or any permutation of this. # because when 10 // 3 = 3 and remainder is 1, so we add one to one of the segments. print(divide_range(10, 3))"},{"question":"Given a string `s` of length `n` consisting of lowercase English letters, and an integer value `k`, determine if there exists a string `t` of length `m` (where `m` is greater than or equal to `n`) such that `t` can be formed by repeating and possibly modifying `s` and the Levenshtein distance (also known as edit distance, representing the minimum number of single-character insertions, deletions, or substitutions required to change one word into the other) between `s` and `t` is exactly `k`. If there are multiple such strings `t`, return any one of them. If no such string is possible, return \\"IMPOSSIBLE\\". # Input - The first line contains two integers `n` and `k` (1 ≤ n ≤ 1000, 0 ≤ k ≤ 1000), denoting the length of the string `s` and the desired Levenshtein distance respectively. - The second line contains the string `s` of length `n`. # Output - If there exists a string `t` of length `m` such that the Levenshtein distance between `s` and `t` is equal to `k`, print any such string `t`. - If it is not possible to form such a string, print \\"IMPOSSIBLE\\". # Examples Example 1 Input: ``` 3 2 abc ``` Output: ``` abcc ``` Example 2 Input: ``` 4 0 test ``` Output: ``` test ``` Example 3 Input: ``` 5 6 hello ``` Output: ``` IMPOSSIBLE ```","solution":"def find_t(s, n, k): Determine if there exists a string t such that its Levenshtein distance from s is exactly k. if k > len(s): # If k is greater than the length of s, creating such a t is impossible return \\"IMPOSSIBLE\\" if k == 0: # If k is 0, the string t should be same as s return s # Base condition: if k <= n, we can simply try to extend the string with k modifications t = s # We can append characters to the string `t` to achieve the required Levenshtein distance t += \'a\' * k return t"},{"question":"In a dense forest, there are many interconnected trails, and each trail connects exactly two different locations. Certain trails are more scenic than others and therefore are preferred routes for travelers. Your task is to determine the maximum number of scenic trails a traveler can include in their journey without visiting any location more than once. A trail is represented as a tuple (u, v) where u and v are the distinct locations it connects. A list of scenic trails will be provided, and you must find and return the maximum number of scenic trails that can be part of such a journey. -----Input----- The first line of input contains two integers n and m (2 le n le 15, 1 le m le 100) representing the number of locations and the number of scenic trails, respectively. The following m lines each contain two integers u and v (1 le u, v le n, u ne v), representing that there is a scenic trail connecting locations u and v. -----Output----- Output one integer, the maximum number of scenic trails that can be included in a journey without visiting the same location more than once. -----Examples----- Sample Input: 6 7 1 2 2 3 3 4 4 5 5 6 1 3 3 5 Sample Output: 5","solution":"def max_scenic_trails(n, m, trails): Find the maximum number of scenic trails that can be included in a journey without visiting the same location more than once. def explore(current, visited, count): nonlocal max_count max_count = max(max_count, count) for next_location in graph[current]: if next_location not in visited: visited.add(next_location) explore(next_location, visited, count + 1) visited.remove(next_location) # Build the graph graph = {i: [] for i in range(1, n + 1)} for u, v in trails: graph[u].append(v) graph[v].append(u) max_count = 0 # Try to start exploring from each location for start in range(1, n + 1): explore(start, {start}, 0) return max_count"},{"question":"A warehouse has a list of parcels, each defined by a certain width. The parcels are to be placed on shelves in the warehouse, which can hold a maximum width of W units each. The warehouse manager wants to minimize the number of shelves used to store all parcels while ensuring that each shelf’s total width does not exceed W. Write a function `min_shelves(W, widths)` that takes the maximum width W of a shelf and a list of integers representing the widths of the parcels, and returns an integer representing the minimum number of shelves needed. To achieve this, consider that: - Parcels need to be placed in the same order as given. - You can only place parcels on the next shelf when the current shelf can\'t accommodate any more parcels without exceeding the maximum width W. Input The input consists of: 1. An integer W (1 <= W <= 1000000), representing the maximum width of a shelf. 2. A list of integers representing the widths of the parcels (1 <= width[i] <= W, 1 <= len(widths) <= 1000000). Output Output a single integer, representing the minimum number of shelves needed to store all parcels. Examples Input 10 [2, 3, 5, 8, 2, 1] Output 3 Input 15 [10, 5, 10, 5, 5, 5] Output 3","solution":"def min_shelves(W, widths): Returns the minimum number of shelves needed to store all parcels without exceeding the maximum width W per shelf. Parameters: W (int): The maximum width of a shelf. widths (list of int): The widths of the parcels. Returns: int: The minimum number of shelves needed. current_width = 0 num_shelves = 1 # At least one shelf is needed initially for width in widths: if current_width + width <= W: current_width += width else: num_shelves += 1 current_width = width # Place this parcel on the new shelf return num_shelves"},{"question":"Ali just learned about binary trees and how to traverse them. He comes up with an interesting idea for a traversal: he processes each node in a binary tree following a specific order which he calls \\"zigzag level order traversal\\". In this traversal, the nodes on each level are visited from left to right, then right to left for the next level, and alternating between. Help Ali implement a function that takes the root of a binary tree and returns a list of its nodes\' values in zigzag level order traversal. -----Input----- - The function receives a single argument, which is the root of the binary tree. - The structure of the tree node is: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` - The binary tree will have at most 10000 nodes. -----Output----- - Return a list of lists of integers representing values of the nodes visited in zigzag level order traversal. -----Note----- In the first example, the tree ``` 3 / 9 20 / 15 7 ``` is traversed as follows: - Level 1: [3] - Level 2: [20, 9] - Level 3: [15, 7] Combined result is [[3], [20, 9], [15, 7]]. -----Examples----- Sample Input: ```python root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) ``` Sample Output: [[3], [20, 9], [15, 7]]","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagLevelOrder(root): if not root: return [] result = [] node_queue = deque([root]) left_to_right = True while node_queue: level_size = len(node_queue) current_level = deque() for _ in range(level_size): node = node_queue.popleft() if left_to_right: current_level.append(node.val) else: current_level.appendleft(node.val) if node.left: node_queue.append(node.left) if node.right: node_queue.append(node.right) result.append(list(current_level)) left_to_right = not left_to_right return result"},{"question":"An organization is planning its annual strategy meeting and wants to ensure maximum participation from its departments. The departments are represented as nodes in a tree, where each node can have multiple children but only one parent, except the root node which has no parent. The CEO of the organization wants to ensure that each department\'s participation is linked in such a way that they can communicate efficiently. Thus, the CEO decides to find pairs of directly connected nodes. Given the tree structure of the organization, calculate the number of unique direct communication pairs. Each direct communication pair is defined as two adjacent nodes in the tree. input The first line contains an integer N which represents the number of nodes in the tree (and also the number of departments). The next N-1 lines follow, each containing two integers u and v which denote that there\'s an edge between nodes u and v. output Output the number of unique direct communication pairs. Constraint * N is an integer such that 2 leq N leq 100 000 * Each u and v are integers that describe the nodes in the tree (departments) and are between 1 and N Input example 1 4 1 2 1 3 3 4 Output example 1 3 When the structure of the tree is 1-2, 1-3, 3-4, there are three unique direct communication pairs: (1,2), (1,3), and (3,4) Input example 2 6 1 4 3 4 2 3 2 5 6 5 Output example 2 5 When the tree structure is 1-4, 3-4, 2-3, 2-5, 6-5, there are five unique direct communication pairs: (1,4), (3,4), (2,3), (2,5), and (6,5) Example Input 4 1 2 1 3 3 4 Output 3","solution":"def count_direct_pairs(n, edges): Returns the number of unique direct communication pairs in the tree. :param n: Integer, number of nodes in the tree. :param edges: List of tuples, each containing two integers u and v that denote an edge between nodes u and v. :return: Integer, number of unique direct communication pairs. # The number of unique direct communication pairs is simply the number # of edges in the tree since each edge represents a direct connection. return len(edges) # This function can be tested with inputs and expected outputs. # Sample test cases provided in the problem: print(count_direct_pairs(4, [(1, 2), (1, 3), (3, 4)])) # Output should be 3 print(count_direct_pairs(6, [(1, 4), (3, 4), (2, 3), (2, 5), (6, 5)])) # Output should be 5"},{"question":"Given an array of integers, you need to find and return a new array that contains the square of each element from the original array, but the new array should be sorted in non-decreasing order. For example: ```python Input: [ -4, -1, 0, 3, 10 ] Output: [ 0, 1, 9, 16, 100 ] Input: [ -7, -3, 2, 3, 11 ] Output: [ 4, 9, 9, 49, 121 ] ``` Note: You should aim to solve this problem in O(n) time complexity where n is the length of the array.","solution":"def sorted_squares(nums): Given an array of integers, returns a new array that contains the square of each element from the original array, but sorted in non-decreasing order. This function achieves it in O(n) time complexity. n = len(nums) result = [0] * n left, right = 0, n - 1 position = n - 1 while left <= right: left_sq = nums[left] ** 2 right_sq = nums[right] ** 2 if left_sq > right_sq: result[position] = left_sq left += 1 else: result[position] = right_sq right -= 1 position -= 1 return result"},{"question":"Overview Create a function that takes a list of integers and returns a new list containing the sum of every adjacent pair of integers in the input list. ```python sum_pairs([1, 2, 3, 4]) => [3, 5, 7] sum_pairs([0, 10, -10, 5]) => [10, 0, -5] ``` Specifics - The input list will contain at least two integers. - The returned list should have one less element than the input list. - The elements in the returned list should be sums of adjacent pairs of integers in the input list. - You do not need to handle non-integer inputs.","solution":"def sum_pairs(lst): Returns a list containing the sum of every adjacent pair of integers in the input list. Arguments: lst -- A list of integers containing at least two elements. Returns: A list of integers. return [lst[i] + lst[i + 1] for i in range(len(lst) - 1)]"},{"question":"Jessica is an avid reader and she likes to keep a record of her books. She wants to classify her books based on their titles and record each title\'s unique features. Specifically, she wants to focus on consecutive runs of the same character in the title. The record includes the length of each run and the character that repeated. For example, the title \\"booookkkeeper\\" can be encoded as \\"b1o4k2e2p1r1\\". Given a book title, help Jessica encode the title in this specific format. -----Input----- The first line of input contains an integer t (1 le t le 100) - the number of book titles to be encoded. Each of the following t lines contains a string representing the title of a book. Each title contains only lowercase Latin letters, and its length is between 1 and 100, inclusive. -----Output----- For each test case, print a single line containing the encoded title. -----Examples----- Input 3 book keeper a Output b1o2k1 k1e2p1e1r1 a1 -----Note----- In the first example, - The character \'b\' appears consecutively 1 time. - The character \'o\' appears consecutively 2 times. - The character \'k\' appears consecutively 1 time. Thus, the encoded title is \\"b1o2k1\\". In the second example, - The character \'k\' appears consecutively 1 time. - The character \'e\' appears consecutively 2 times. - The character \'p\' appears consecutively 1 time. - The character \'e\' appears consecutively 1 time. - The character \'r\' appears consecutively 1 time. Thus, the encoded title is \\"k1e2p1e1r1\\".","solution":"def encode_title(title): Encodes a title based on consecutive runs of the same character. if not title: return \\"\\" encoded = [] current_char = title[0] count = 1 for char in title[1:]: if char == current_char: count += 1 else: encoded.append(f\\"{current_char}{count}\\") current_char = char count = 1 encoded.append(f\\"{current_char}{count}\\") return \'\'.join(encoded) def encode_titles(titles): Encodes a list of titles. return [encode_title(title) for title in titles]"},{"question":"Given a string S consisting of lowercase English letters, a valid substring of S is one where no character appears more than once. You are tasked with finding the length of the longest valid substring for Q queries. For each query, you will be given two integers L and R, representing the start and end positions within S (1-based indexing). Your task is to determine the maximum length of a valid substring within the segment S[L:R]. -----Input:----- - The first line contains the string S — consisting of lowercase English letters. - The next line contains an integer Q — the number of queries. - Each of the following Q lines contains two integers L and R — representing the start and end positions of the segment to be considered. -----Output:----- - Print Q lines. The i-th line should contain the length of the longest valid substring within the segment S[L:R]. -----Constraints----- - 1 ≤ |S| ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ L ≤ R ≤ |S| -----Sample Input:----- aabbcdee 3 1 4 2 7 1 8 -----Sample Output:----- 2 3 4 -----Explanation:----- Query 1: The segment is \\"aabb\\". The longest valid substrings are \\"ab\\" (or \\"ba\\"), with length of 2. Query 2: The segment is \\"abbcde\\". The longest valid substring is \\"bcde\\" with length of 4. Query 3: The segment is \\"aabbcdee\\". The longest valid substring is \\"bcde\\" with length of 4.","solution":"def find_longest_unique_substring_len(segment): Returns the length of the longest substring with all unique characters. n = len(segment) char_set = set() left = 0 max_length = 0 for right in range(n): while segment[right] in char_set: char_set.remove(segment[left]) left += 1 char_set.add(segment[right]) max_length = max(max_length, right - left + 1) return max_length def process_queries(S, queries): Processes the queries to find the length of the longest valid substring for each given segment. Args: S: The input string of lowercase English letters. queries: A list of tuples, each containing two integers L and R. Returns: A list of results, each representing the maximum length of valid substring for the given segment. results = [] for L, R in queries: segment = S[L-1:R] max_length = find_longest_unique_substring_len(segment) results.append(max_length) return results"},{"question":"A renowned scientist, Dr. Watson, has invented a unique machine capable of performing complex matrix transformations. This machine allows input of an N x N matrix and can perform two types of operations: 1. **Transpose Operation**: Interchange the rows and columns of the current matrix. 2. **Reverse Operation**: Reverse the elements of every row in the current matrix. Dr. Watson wants to know if, starting from a given N x N matrix, he can transform it into a target N x N matrix using a finite number of the described operations. As his assistant, your task is to determine if it’s possible to achieve the target matrix from the starting matrix. Input Specification: - The first line contains a single integer T, the number of test cases. - For each test case: - The first line contains an integer N, the size of the NxN matrix. - The next N lines contain N integers each, representing the starting matrix. - The following N lines contain N integers each, representing the target matrix. Output Specification: For each test case, print \\"YES\\" if it\'s possible to transform the starting matrix into the target matrix using the allowed operations. Otherwise, print \\"NO\\". Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ Matrix elements ≤ 1000 SAMPLE INPUT: 2 2 1 2 3 4 3 1 4 2 3 1 2 3 4 5 6 7 8 9 3 6 9 2 5 8 1 4 7 SAMPLE OUTPUT: YES YES Explanation: 1) For the first test case, you can achieve the target matrix by performing a reverse operation on the starting matrix. 2) For the second test case, you can achieve the target matrix by performing a transpose operation on the starting matrix.","solution":"def can_transform_to_target_matrix(mat, target): Determines if the target matrix can be obtained from the given matrix using transpose and reverse operations. if mat == target: return True n = len(mat) # Transpose the matrix transposed = [[mat[j][i] for j in range(n)] for i in range(n)] # Check against the target if transposed == target: return True # Reverse the original matrix rows reversed_rows = [row[::-1] for row in mat] # Check against the target if reversed_rows == target: return True # Reverse and then transpose the matrix reversed_transposed = [[reversed_rows[j][i] for j in range(n)] for i in range(n)] if reversed_transposed == target: return True # Transpose and then reverse the rows of the transposed matrix transposed_reversed_rows = [row[::-1] for row in transposed] if transposed_reversed_rows == target: return True return False def can_transform_multiple(test_cases): results = [] for case in test_cases: N, starting_matrix, target_matrix = case if can_transform_to_target_matrix(starting_matrix, target_matrix): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A popular social media challenge involves identifying the most frequently occurring word(s) in a piece of text. Accomplishing this task efficiently requires knowledge of string processing and data structures. Your task is to write a function that takes a string of text as input and outputs the word(s) that appear most frequently in the text. In the case where multiple words have the highest frequency, return them in lexicographically sorted order. # Input Format: - A single string, `text` (1 ≤ length of `text` ≤ 10^6), consisting of lowercase English letters and spaces. The string will not contain any leading or trailing spaces, and words will be separated by exactly one space. # Output Format: - A single line containing the word or words that appear most frequently, separated by a space if there are multiple words, sorted lexicographically. # Example: Sample Input 1: ``` the quick brown fox jumps over the lazy dog ``` Sample Output 1: ``` the ``` Sample Input 2: ``` this this is a test test string string string ``` Sample Output 2: ``` string ``` Sample Input 3: ``` apple banana apple banana fruit apple fruit banana ``` Sample Output 3: ``` apple banana ``` # Explanation: 1. For the first example, \\"the\\" appears twice, more frequently than any other word. 2. For the second example, \\"string\\" appears three times, more frequently than any other word. 3. For the third example, \\"apple\\" and \\"banana\\" both appear three times, which is more frequently than any other word. Hence, they are returned in lexicographically sorted order.","solution":"def most_frequent_words(text): Returns the most frequently occurring word(s) in the input text. :param text: str - A string consisting of lowercase English letters and spaces. :return: str - The word(s) that appear most frequently, separated by a space if there are multiple words, sorted lexicographically. from collections import Counter # Split the text into words words = text.split() # Count the frequencies of each word word_count = Counter(words) # Find the maximum frequency max_frequency = max(word_count.values()) # Find the words with the maximum frequency most_frequent = [word for word, count in word_count.items() if count == max_frequency] # Sort the most frequent words lexicographically most_frequent.sort() # Join the words with a space and return the result return \' \'.join(most_frequent)"},{"question":"A group of treasure hunters has found a series of locked treasure chests in a dungeon. Each chest is protected by a unique lock mechanism that requires solving a specific mathematical puzzle. The puzzle for each chest involves arranging a series of numbers into a single list in non-decreasing order. Specifically, each puzzle provides two separate lists of integers, and your job is to merge these lists into one sorted list. Write a function that will take as input two separate lists of integers and return a new list that combines the elements of the two input lists in non-decreasing order. Input: - The first line of the input contains an integer `m` (1 ≤ m ≤ 100000) representing the number of integers in the first list. - The second line contains `m` space-separated integers representing the elements of the first list. - The third line of the input contains an integer `n` (1 ≤ n ≤ 100000) representing the number of integers in the second list. - The fourth line contains `n` space-separated integers representing the elements of the second list. Output: - Output a single line containing the combined list in non-decreasing order. Example Input 4 1 3 5 7 5 2 4 6 8 9 Output 1 2 3 4 5 6 7 8 9 Input 3 10 20 30 3 5 15 25 Output 5 10 15 20 25 30 Input 2 100000 200000 2 99999 100001 Output 99999 100000 100001 200000 In these examples, the function takes two input lists, merges them, and outputs the resulting list sorted in non-decreasing order.","solution":"def merge_and_sort_lists(list1, list2): Merges two lists of integers and returns a single list in non-decreasing order. return sorted(list1 + list2)"},{"question":"Fox AI is playing a simple grid-based game and wants to find the optimal path to collect rewards. The grid is an m x n matrix where each cell contains a reward value. Fox AI can only move right or down from the top-left corner to the bottom-right corner of the grid. Fox AI wants to collect as much reward as possible. Can you help Fox AI determine the maximum reward it can collect by the time it reaches the bottom-right corner? The function to calculate the maximum reward Fox AI can collect should use the following format: ```python def maxReward(grid): ``` **Input** - The first line contains two integers, `m` and `n` (1 ≤ m, n ≤ 50), representing the number of rows and columns in the grid. - The next `m` lines contain `n` integers each, representing the reward values `r_ij` (-100 ≤ r_ij ≤ 100) in each cell of the grid. **Output** - Output a single integer, the maximum reward Fox AI can collect by the time it reaches the bottom-right corner of the grid. **Examples** Example 1: Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 29 ``` Explanation: Fox AI can collect maximum rewards by moving right -> right -> down -> down or any other equivalent path, collecting rewards: 1 + 2 + 3 + 6 + 9 = 21. Therefore, the maximum reward is 21. Example 2: Input: ``` 2 3 1 -3 1 2 10 -1 ``` Output: ``` 12 ``` Explanation: Fox AI can collect maximum rewards by moving right -> right -> down or any other equivalent path, collecting rewards: 1 + (-3) + 1 + 10 = 9. Therefore, the maximum reward is 9. Example 3: Input: ``` 1 5 -1 2 -3 4 5 ``` Output: ``` 7 ``` Explanation: Fox AI can collect maximum rewards by moving right -> right -> right -> right, collecting rewards: -1 + 2 + (-3) + 4 + 5 = 7. Therefore, the maximum reward is 7.","solution":"def maxReward(grid): m = len(grid) n = len(grid[0]) # Initialize a DP array to store max rewards to each cell dp = [[0] * n for _ in range(m)] # Start from the top-left corner dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP array for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the max reward return dp[m-1][n-1]"},{"question":"Alice loves reading books. She has a collection of books, each with a different genre, and she wants to organize them. She wants to categorize each book based on its genre and then sort the books in each genre alphabetically by their titles. Alice decided to write a program to help her with this task. However, she needs some assistance. You will be given a list of books, where each book is represented by its title and genre. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of books. Each of the next n lines contains the genre and the title of a book separated by a comma. The genre and title are both strings of Latin letters, where the title may also contain spaces. The length of the genre is at most 20 characters, and the length of the title is at most 100 characters. Output For each genre, print the title of the genre, followed by a list of book titles in that genre sorted alphabetically. Genres should also be sorted alphabetically. Examples Input 5 Fantasy,The Hobbit Science Fiction,Dune Fantasy,Harry Potter Science Fiction,Foundation Mystery,The Hound of the Baskervilles Output Fantasy Harry Potter The Hobbit Mystery The Hound of the Baskervilles Science Fiction Dune Foundation Note In the given example, there are 5 books with 3 different genres. The output lists the books sorted within each genre, and the genres themselves sorted alphabetically.","solution":"def organize_books(n, books): genre_dict = {} for book in books: genre, title = book.split(\',\', maxsplit=1) genre = genre.strip() title = title.strip() if genre not in genre_dict: genre_dict[genre] = [] genre_dict[genre].append(title) sorted_genres = sorted(genre_dict.keys()) result = [] for genre in sorted_genres: result.append(genre) sorted_titles = sorted(genre_dict[genre]) result.extend(sorted_titles) return result"},{"question":"You are given two strings, `s1` and `s2`, which consist of lowercase alphabetic characters. Your task is to determine whether `s2` can be formed by rearranging the characters of `s1`, and also whether they are not identical. In other words, you need to check if `s2` is an anagram of `s1` but not exactly the same string. Input Format The first line contains a single integer `T` indicating the number of test cases. Each of the next `T` lines contains two strings `s1` and `s2`. Constraints 1 <= T <= 100 1 <= length(s1), length(s2) <= 1000 s1 and s2 consist of lowercase alphabetic characters only. Output Format For each test case, output \\"YES\\" if `s2` can be formed by rearranging the characters of `s1` and `s2` is not identical to `s1`. Otherwise, output \\"NO\\". Sample Input 4 listen silent triangle integral apple apple hello olelh Sample Output YES YES NO YES Hint - To determine if `s2` is an anagram of `s1`, you can count the occurrences of each character in both strings and compare them. - A string is identical to another if all characters are in the same order and appear with the same frequency.","solution":"def is_anagram_not_identical(s1, s2): Determines whether s2 is an anagram of s1 but not identical to s1. if s1 == s2: return \\"NO\\" return \\"YES\\" if sorted(s1) == sorted(s2) else \\"NO\\" def process_test_cases(test_cases): results = [] for s1, s2 in test_cases: results.append(is_anagram_not_identical(s1, s2)) return results"},{"question":"Implement a function, `prime_factors_diff`, that takes a positive integer `n` and returns the difference between the largest and smallest prime factors of `n`. If `n` has fewer than two distinct prime factors, the function should return 0. For example: ```python prime_factors_diff(60) # Output: 13 (Prime factors are 2, 3, and 5. Difference is 5 - 2 = 3) prime_factors_diff(49) # Output: 0 (Prime factor is 7, only one distinct prime factor) prime_factors_diff(30) # Output: 2 (Prime factors are 2, 3, and 5. Difference is 5 - 2 = 3) prime_factors_diff(2) # Output: 0 (Only one prime factor) prime_factors_diff(1) # Output: 0 (No prime factors) ``` Consider the following points: - An integer greater than or equal to 1 should be given as input. - A prime factor is a prime number that divides `n` exactly, with no remainder. Hints: - You may want to implement a helper function to determine the prime numbers and their factors. - Use the property of prime numbers starting from the smallest prime (2) up to the integer\'s square root.","solution":"def prime_factors_diff(n): Returns the difference between the largest and smallest prime factors of n. If n has fewer than two distinct prime factors, the function returns 0. if n <= 1: return 0 def smallest_prime_factor(n): Returns the smallest prime factor of n greater than 1 if n % 2 == 0: return 2 i = 3 while i * i <= n: if n % i == 0: return i i += 2 return n prime_factors = set() while n > 1: spf = smallest_prime_factor(n) prime_factors.add(spf) while n % spf == 0: n //= spf if len(prime_factors) < 2: return 0 return max(prime_factors) - min(prime_factors)"},{"question":"Given an integer array `nums` and an integer `k`, return the `k`-th largest element in the array. Note that it is the `k`-th largest element in sorted order, not the `k`-th distinct element. You may assume k is always valid, 1 ≤ k ≤ array\'s length. # Example **Input:** ``` 6 2 3 2 1 5 6 4 ``` **Output:** ``` 5 ``` **Explanation:** For the given array [3,2,1,5,6,4] and k = 2, the 2nd largest element is 5.","solution":"def find_kth_largest(nums, k): Returns the k-th largest element in the given array. nums.sort(reverse=True) return nums[k-1]"},{"question":"A security company is testing a new software to monitor activity on their cameras. Each activity is recorded as a timestamp and a height difference. Multiple activities can be recorded at the same timestamp. The significant activity they\'re interested in is the maximum height difference experienced at any given timestamp. Given the number of recorded activities and their respective timestamps and height differences, your task is to determine the maximum height difference at each unique timestamp in ascending order of the timestamps. ----- Input ----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of recorded activities. Each of the next n lines contains an integer t (1 ≤ t ≤ 10^9) and d (−1000 ≤ d ≤ 1000), where t represents the timestamp and d represents the height difference. ----- Output ----- For each unique timestamp in ascending order, output a line containing the timestamp t and the maximum height difference recorded at that timestamp. ----- Examples ----- Input 5 1 3 3 -1 1 -2 2 4 3 5 Output 1 3 2 4 3 5 Input 4 2 3 2 -3 1 5 1 -6 Output 1 5 2 3","solution":"def max_height_difference(n, activities): Returns the maximum height difference at each unique timestamp in ascending order. height_map = {} for t, d in activities: if t in height_map: height_map[t] = max(height_map[t], d) else: height_map[t] = d result = sorted(height_map.items()) return result"},{"question":"You are developing a software for monitoring the health of a network of servers. One important aspect of this is to generate alerts when the latency (i.e., the time taken for a server to respond to a request) is too high. To do this, you collect a series of latency measurements for various servers over a period of time and you want to determine which servers are consistently performing poorly. You decide that a server is performing poorly if its average latency exceeds a given threshold. Write a function to determine which servers are performing poorly based on their average latency. -----Input----- The first line of input contains a positive integer N (1 ≤ N ≤ 100), the number of servers. Each of the next N lines provides information about a server in the format: - A string S (1 ≤ |S| ≤ 10) identifying the server (a unique alphanumeric identifier) - A real number T (1 ≤ T ≤ 10^4) representing the threshold latency - Followed by a list of real numbers, separated by spaces, representing latency measurements (each latency is a real number between 0 and 10^6). The number of measurements for each server will not exceed 10^6. -----Output----- Output one or more lines, each containing the server identifier of a server that is performing poorly. The server identifiers should be output in the order they were provided in the input, one per line. If no servers are performing poorly, output \\"All servers are healthy\\". -----Examples----- Sample Input: 3 server1 100.0 120.5 130.2 110.0 server2 150.0 100.0 120.0 140.0 server3 90.0 85.0 95.0 105.0 Sample Output: server1 server3","solution":"def find_poorly_performing_servers(servers_data): poorly_performing_servers = [] for server_data in servers_data: parts = server_data.split() server_id = parts[0] threshold = float(parts[1]) latencies = list(map(float, parts[2:])) average_latency = sum(latencies) / len(latencies) if average_latency > threshold: poorly_performing_servers.append(server_id) if not poorly_performing_servers: return [\\"All servers are healthy\\"] else: return poorly_performing_servers"},{"question":"Tom is organizing a unique car race where each car must follow a strict set of rules to advance to the next stages. There are `n` stages in total, and the track layout for each stage is predetermined. Each stage has a hardness value ranging from 1 (easiest) to 10 (most difficult). Tom wants to ensure that the difficulty of each successive stage is greater than the previous stage, meaning a car can only proceed to a more difficult stage if the current stage\'s hardness is less than the next stage\'s hardness. Given an array of integers representing the hardness values of the stages, help Tom determine the length of the longest path a car can drive sequentially through the stages without violating the difficulty rule. **Input** The first line contains a single integer `n` (1 le n le 100,000), the number of stages. The second line contains `n` integers `h_1, h_2, ..., h_n (1 le h_i le 10), where `h_i` represents the hardness of the `i`-th stage. **Output** Print a single integer, the length of the longest path a car can drive under Tommy\'s rules. **Example** Input 5 1 2 3 2 4 Output 3 **Explanation** The car can start at stage 1 (hardness 1), move to stage 2 (hardness 2), and then to stage 3 (hardness 3), forming a path of length 3.","solution":"def longest_increasing_path(n, hardnesses): Return the length of the longest path a car can drive sequentially through the stages without violating the difficulty rule. if n == 0: return 0 max_length = 1 # At least one stage can always be driven current_length = 1 for i in range(1, n): if hardnesses[i] > hardnesses[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"In a small town, there is a popular vending machine that dispenses a variety of snacks. The machine releases exactly one snack for each transaction. To operate the machine, you need to input a code made up of alphanumeric characters. The machine checks if the code conforms to a specific pattern before dispensing the snack. The pattern of a valid code is as follows: - It must start with a letter (either uppercase or lowercase). - It must contain at least one digit. - The total length of the code must be exactly 6 characters. Given a list of codes, determine for each code whether it is valid or invalid based on the above criteria. ------ Input Format ------ - The first line contains a single integer N, denoting the number of codes. - Each of the next N lines contains a single string, representing the code. ------ Output Format ------ For each code, output \\"VALID\\" if the code is valid based on the given pattern, and \\"INVALID\\" otherwise. ------ Constraints ------ 1 ≤ N ≤ 100 Each code is a string of length exactly 6 characters. Codes comprise only alphanumeric characters (letters A-Z, a-z, and digits 0-9). ------ Sample Input 1 ------ 4 a1b2C3 123456 abcdef A12B34 ------ Sample Output 1 ------ VALID INVALID INVALID VALID ------ Explanation 1 ------ Test case 1: The code \\"a1b2C3\\" starts with a letter, contains digits, and is 6 characters long, so it is VALID. Test case 2: The code \\"123456\\" starts with a digit, not a letter, so it is INVALID. Test case 3: The code \\"abcdef\\" does not contain any digits, so it is INVALID. Test case 4: The code \\"A12B34\\" starts with a letter, contains digits, and is 6 characters long, so it is VALID.","solution":"def validate_codes(codes): Determines if the codes are VALID or INVALID based on the given pattern: - Starts with a letter (uppercase or lowercase) - Contains at least one digit - Length of exactly 6 characters Args: codes: List of strings representing the codes. Returns: List of strings \\"VALID\\" or \\"INVALID\\" for each code in the input list. results = [] for code in codes: if len(code) == 6 and code[0].isalpha() and any(char.isdigit() for char in code): results.append(\\"VALID\\") else: results.append(\\"INVALID\\") return results"},{"question":"Andy is a wildlife photographer who wants to identify unique bird species in the region. He has a list of bird sightings for n consecutive days. On each day, he noted a bird species represented by an integer. Andy now wants to determine the number of distinct bird species and, for each species, the first day it was spotted. Write a program to help Andy with the identification. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) – the number of days for which Andy has recorded sightings. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 1,000,000) – the bird species observed on each day. Output The first line should contain an integer k – the number of distinct bird species. The second line should contain k pairs of integers, representing each unique bird species and the first day it was spotted, in the order of their first appearances. Examples Input 7 4 5 4 2 5 2 4 Output 3 4 1 5 2 2 4 Input 5 10 12 10 12 10 Output 2 10 1 12 2 Explanation In the first example, there are 3 distinct bird species (4, 5, and 2). The bird species 4 is first seen on day 1, bird species 5 on day 2, and bird species 2 on day 4. In the second example, there are 2 distinct bird species (10 and 12). The bird species 10 is first seen on day 1, and bird species 12 on day 2.","solution":"def identify_bird_species(n, sightings): Identifies the unique bird species and the first day each was spotted. Args: n (int): the number of days for which sightings are recorded. sightings (list of int): the list of bird species spotted each day. Returns: tuple: a tuple containing the number of distinct species and a list of tuples with species and first sighting day. bird_dict = {} for day, species in enumerate(sightings, start=1): if species not in bird_dict: bird_dict[species] = day distinct_species = len(bird_dict) result = list(bird_dict.items()) return distinct_species, result"},{"question":"Problem Statement You are given an array of integers and you need to find the sum of the maximum subarray for every prefix of the array. A subarray is defined as a contiguous segment of the array. Input Format: - The first line contains an integer N, the length of the array. - The second line contains N integers separated by a space, representing the array elements. Output Format: - Print N integers, where the ith integer is the sum of the maximum subarray for the prefix of length i. Constraints: - 1 ≤ N ≤ 10^5 - -10^9 ≤ array elements ≤ 10^9 SAMPLE INPUT 4 1 -2 3 4 SAMPLE OUTPUT 1 1 3 6 Explanation: - For the prefix of length 1: [1], the maximum subarray is [1], sum is 1. - For the prefix of length 2: [1, -2], the maximum subarray is [1], sum is 1. - For the prefix of length 3: [1, -2, 3], the maximum subarray is [3], sum is 3. - For the prefix of length 4: [1, -2, 3, 4], the maximum subarray is [3, 4], sum is 7.","solution":"def max_subarray_sum_prefixes(arr): Given an array `arr`, this function returns a list where the ith element is the sum of the maximum subarray for the prefix of length i. n = len(arr) result = [] current_prefix_sum = 0 # Keeps track of the sum of the current prefix subarray max_ending_here = float(\'-inf\') # Keeps track of the max subarray ending at the current position max_so_far = float(\'-inf\') # Keeps track of the max subarray for each prefix for i in range(n): # Consider the maximum subarray ending at the current element max_ending_here = max(arr[i], max_ending_here + arr[i]) # Update the max subarray sum seen so far for the current prefix max_so_far = max(max_so_far, max_ending_here) # Append the result for the current prefix length result.append(max_so_far) return result"},{"question":"A team of software developers is working on a distributed system where tasks are assigned to different servers. Each task has a specific start time and end time. To optimize resource utilization, they want to find the maximum number of non-overlapping tasks that can be assigned to a single server. A task is defined by its start and end time. Two tasks are considered non-overlapping if one task finishes before the other starts. Given a list of tasks, each with a start and end time, write a program to determine the maximum number of non-overlapping tasks that can be handled by a single server. Input Format The input consists of multiple datasets. Each dataset is formatted as follows: - The first line contains an integer n, the number of tasks. - The next n lines each contain two integers representing the start and end times of a task. The end of the input is indicated by a single line containing the integer 0. Output Format For each dataset, output a single integer representing the maximum number of non-overlapping tasks that can be assigned to a single server. Example Input 4 1 3 2 5 4 6 6 7 3 4 5 2 3 3 7 5 1 5 2 6 4 9 2 9 7 8 0 Output 3 2 2 Explanation In the first dataset, the tasks (1,3), (4,6), and (6,7) can be assigned to the same server without overlapping. In the second dataset, the tasks (2,3) and (4,5) can be assigned to the same server without overlapping. In the third dataset, the tasks (1,5) and (7,8) can be assigned to the same server without overlapping.","solution":"def max_non_overlapping_tasks(tasks): # Sort tasks by their end times tasks.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: count += 1 last_end_time = end return count def process_input(input_data): result = [] index = 0 while index < len(input_data): n = int(input_data[index]) if n == 0: break tasks = [] for i in range(1, n + 1): start, end = map(int, input_data[index + i].split()) tasks.append((start, end)) result.append(max_non_overlapping_tasks(tasks)) index += n + 1 return result"},{"question":"You are tasked with validating and extracting values from a nested dictionary structure. Your function should traverse the dictionary and pull out specific values based on predefined keys. * The input will be a dictionary where each key can either map directly to a value or to another dictionary. * The dictionary might be nested multiple levels deep. * You need to check for the existence of the specified key at any level of nesting. * If the key is not found at any level, return a default error message \\"Key not found\\". * If the key is found, return the associated value. Input example: ```python data = { \\"name\\": \\"Alice\\", \\"details\\": { \\"age\\": 30, \\"location\\": { \\"city\\": \\"Wonderland\\", \\"zipcode\\": \\"12345\\" } } } key_to_lookup = \\"zipcode\\" ``` Returns ```python \'12345\' ``` Another Input example: ```python data = { \\"name\\": \\"Alice\\", \\"details\\": { \\"age\\": 30, \\"location\\": { \\"city\\": \\"Wonderland\\" } } } key_to_lookup = \\"zipcode\\" ``` Returns ```python \'Key not found\' ``` Your function signature should be: ```python def retrieve_nested_value(data: dict, key: str) -> str: ```","solution":"def retrieve_nested_value(data: dict, key: str) -> str: Recursively traverses the dictionary to find the value associated with the specified key. If the key is not found, returns \'Key not found\'. Parameters: data (dict): The dictionary to search. key (str): The key to look for. Returns: str: The value associated with the key or \'Key not found\'. # Traversing the dictionary using BFS queue = [data] while queue: current_data = queue.pop(0) for k, v in current_data.items(): if k == key: return v if isinstance(v, dict): queue.append(v) return \\"Key not found\\""},{"question":"A land navigation robot is deployed in a grid with dimensions n x m. The grid contains some obstacles, represented as 1s, while free spaces are represented as 0s. The robot starts at the top left corner (1, 1) and must reach the bottom right corner (n, m). The robot can only move right or down at each step. Write a program to determine the number of unique paths the robot can take to reach its destination without colliding with any obstacles. Input Multiple test cases are provided, each consisting of: - An integer n (1 ≤ n ≤ 100), representing the number of rows. - An integer m (1 ≤ m ≤ 100), representing the number of columns. - Followed by n lines, each containing m integers (either 0 or 1), representing the grid. The last test case is followed by a line containing a single zero. Numbers in the grid lines are separated by spaces. Output For each test case, output a single number representing the number of unique paths from the top left corner to the bottom right corner. If there is no valid path, output 0. Example Input 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 0 1 0 0 0 0 0 Output 2 1","solution":"def unique_paths_with_obstacles(grid): n = len(grid) m = len(grid[0]) if n > 0 else 0 if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] def find_unique_paths(test_cases): results = [] for grid in test_cases: results.append(unique_paths_with_obstacles(grid)) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") i = 0 test_cases = [] while i < len(lines): if lines[i] == \'0\': break n, m = map(int, lines[i].split()) grid = [list(map(int, lines[i+j+1].split())) for j in range(n)] test_cases.append(grid) i += n + 1 return test_cases def main(input_str): test_cases = parse_input(input_str) results = find_unique_paths(test_cases) for result in results: print(result)"},{"question":"Alex likes to organize his bookshelf. After recently acquiring new books, he finds that his bookshelf is a bit of a mess. He wants to sort his books in increasing order by their thickness. However, he can only perform the following operation: select any segment of consecutive books and reverse their order. Alex wonders what is the minimum number of such operations needed to fully sort his bookshelf. Can you help him figure it out? -----Input----- The input consists of multiple test cases. The first line contains the number of test cases T (1 le T le 100). Each of the following T lines contains an integer n (1 le n le 100) indicating the number of books, followed by n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) representing the thickness of each book in the current order on the shelf. -----Output----- For each test case, output a single integer — the minimum number of operations needed to sort the bookshelf in increasing order by the thickness of the books. -----Example----- Input 2 4 4 3 2 1 5 2 3 4 1 5 Output 1 2 -----Note----- In the first example, it is possible to sort the bookshelf in one operation by reversing the entire sequence of books. In the second example, one way to sort the bookshelf is by reversing the segment [2, 3, 4, 1], resulting in the sequence [1, 4, 3, 2, 5], and then reversing the segment [4, 3, 2] to achieve [1, 2, 3, 4, 5], resulting in two operations.","solution":"def min_operations_to_sort_books(T, test_cases): results = [] for i in range(T): n, books = test_cases[i] sorted_books = sorted(books) if books == sorted_books: # If the books are already sorted, no operation is needed. results.append(0) else: start = 0 end = n - 1 # Find the first position from the left where the books are mismatched while start < n and books[start] == sorted_books[start]: start += 1 # Find the first position from the right where the books are mismatched while end >= 0 and books[end] == sorted_books[end]: end -= 1 if start >= end: # If no mismatch is found in the inner portion, only one reversal is needed results.append(1) else: # Check if reversing this segment makes the entire list sorted sublist_reversed = books[:start] + books[start:end + 1][::-1] + books[end + 1:] if sublist_reversed == sorted_books: results.append(1) else: results.append(2) return results"},{"question":"A company wants to distribute gifts to its employees during a celebration event. Each employee is represented as a node in a graph, and edges represent friendships between employees. A gift can only be received by one employee in an isolated group of friends. A group is considered \\"isolated\\" if it is a connected component in the graph, and each employee in this component can receive exactly one gift. The company needs to count the number of isolated groups to determine how many gifts to prepare. -----Constraints----- - 1 leq N leq 10^5 (Number of employees) - 0 leq M leq 10^5 (Number of friendships) - 1 leq u_i, v_i leq N - u_i ≠ v_i - There are no duplicate friendships (edges). -----Input----- Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M -----Output----- Print the number of isolated groups (connected components) in the company. -----Sample Input----- 5 3 1 2 2 3 4 5 -----Sample Output----- 2 - Employees 1, 2, and 3 form one isolated group of friends. - Employees 4 and 5 form another isolated group of friends. - Employee 6 has no friends, forming a single isolated group on its own. Therefore, the company needs to prepare 3 gifts.","solution":"def count_isolated_groups(n, friendships): from collections import defaultdict, deque def bfs(node): queue = deque([node]) visited.add(node) while queue: u = queue.popleft() for v in graph[u]: if v not in visited: visited.add(v) queue.append(v) graph = defaultdict(list) for u, v in friendships: graph[u].append(v) graph[v].append(u) visited = set() isolated_count = 0 for i in range(1, n + 1): if i not in visited: bfs(i) isolated_count += 1 return isolated_count if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) friendships = [] for i in range(M): u = int(data[2 + 2*i]) v = int(data[3 + 2*i]) friendships.append((u, v)) print(count_isolated_groups(N, friendships))"},{"question":"Jimmy plans to build toy blocks using several types of components. He has various types of components, each of a certain size. Jimmy wants to create a single large block by aligning the components side by side in a row. However, he can only pick each component a specific number of times, and he wants the total length of the resulting block to be as large as possible, but not greater than a given length L. You are required to calculate the maximum length of the block that can be created without exceeding L. -----Constraints----- - All values in input are integers. - 1 leq K leq 1000 - 1 leq size_i leq 100 - 1 leq count_i leq 1000 - 1 leq L leq 100000 -----Input----- Input is given from Standard Input in the following format: K size_1 count_1 size_2 count_2 ... size_K count_K L -----Output----- Print the maximum length of the block that can be created without exceeding L. -----Sample Input----- 3 5 3 10 2 3 8 25 -----Sample Output----- 25 Explanation: Jimmy can use: - Five components of size 3 (total size = 5 * 3 = 15) - One component of size 10 (total size = 1 * 10 = 10) Thus, he achieves the maximum length 25 without exceeding the limit.","solution":"def max_block_length(K, components, L): dp = [0] * (L + 1) for size, count in components: for j in range(L, size - 1, -1): for k in range(1, count + 1): if j - k * size >= 0: dp[j] = max(dp[j], dp[j - k * size] + k * size) return dp[L] # Function to process input and call the main function def solve(): import sys input = sys.stdin.read data = input().split() K = int(data[0]) components = [] index = 1 for _ in range(K): size = int(data[index]) count = int(data[index + 1]) components.append((size, count)) index += 2 L = int(data[index]) print(max_block_length(K, components, L))"},{"question":"A museum is exhibiting n artifacts arranged in a sequence. Each artifact has a specific importance level, represented by a unique integer. The value and rarity of these artifacts make it essential to implement a reliable system for securing them. One suggested approach is to place multiple security sensors at various positions, but to minimize costs, the museum wants to place as few sensors as possible. Each sensor covers 3 consecutive artifacts, starting from its position. Help the museum optimize their security system by developing an algorithm that calculates the minimum number of sensors required to cover all n artifacts. Input The first line contains an integer n (3 ≤ n ≤ 100,000) — the number of artifacts. The second line contains n integers, representing the importance levels of the artifacts (1 ≤ importance level ≤ 1,000,000). Output Print a single integer representing the minimum number of sensors required to cover all the artifacts. Examples Input 6 10 20 30 40 50 60 Output 2 Input 7 5 15 25 35 45 55 65 Output 3 Note In the first example, placing sensors at the 1st and 4th positions will allow coverage of all artifacts. In the second example, placing sensors at the 1st, 4th, and 7th positions will ensure coverage for all artifacts.","solution":"def minimum_sensors(n, importance_levels): Returns the minimum number of sensors required to cover all artifacts. Args: n (int): Number of artifacts. importance_levels (list of int): Importance levels of the artifacts. Returns: int: Minimum number of sensors required. return (n + 2) // 3"},{"question":"In the kingdom of Gridlandia, there is a beautiful square garden of size n times n. The garden is divided into unit square cells. Most of the cells are grassy, but some cells are waterlogged and cannot be stepped on. Gridlandia’s Queen wants to host a grand feast in the garden, and for that, she needs to find the largest possible rectangular patch of land that is free of water. She asks you, the royal programmer, to help her find out the area of this largest rectangular patch. You are given the layout of the garden as a binary matrix, where `0` represents a grassy cell and `1` represents a waterlogged cell. Your task is to find the area of the largest rectangle that can be formed with grassy cells. -----Input----- The first line contains an integer n (1 leq n leq 100) — the size of the garden. Each of the next n lines contains n integers, each either `0` or `1`, indicating the type of cell in the matrix. -----Output----- Print a single integer — the area of the largest rectangular patch of grassy land. -----Example----- Input 5 0 1 1 0 1 1 0 1 1 0 0 0 1 0 0 1 1 0 0 0 1 0 0 1 0 Output 4 -----Note----- In the example, the largest rectangle consists of 4 grassy cells and can be found in the bottom right, with its dimensions being 2 times 2.","solution":"def maximalRectangle(grid): if not grid: return 0 n = len(grid) heights = [0] * n max_area = 0 for i in range(n): for j in range(n): heights[j] = heights[j] + 1 if grid[i][j] == 0 else 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) # Append a zero to handle remaining bars in stack. for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() # Remove the appended zero. return max_area"},{"question":"Barz is a professional chess player, and he likes to practice various strategies. Recently, he has been focusing on the knight\'s moves on a chessboard. The knight has a unique move pattern: it can move to one of the positions forming an \\"L\\" shape (2 squares in one direction and then 1 square perpendicular, or 1 square in one direction and then 2 squares perpendicular). Given a starting position on an 8x8 chessboard, help Barz to calculate the number of valid moves the knight can make. Input The first line contains a single string of two characters: the current position of the knight on the chessboard. The first character is a letter between \'a\' and \'h\' (inclusive), representing the column (file) and the second character is a digit between \'1\' and \'8\' (inclusive), representing the row (rank). Output Print the number of valid moves the knight can make from the given starting position. Examples Input d4 Output 8 Input a1 Output 2 Input g7 Output 4","solution":"def knight_moves(position): Returns the number of valid moves the knight can make from the given position. # Moves a knight can make on a chessboard moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] # Generate the initial position from the given input file, rank = position file = ord(file) - ord(\'a\') + 1 rank = int(rank) valid_moves = 0 # Check all potential moves to see if they are within the board limits for move in moves: new_file = file + move[0] new_rank = rank + move[1] if 1 <= new_file <= 8 and 1 <= new_rank <= 8: valid_moves += 1 return valid_moves # Example usage: # print(knight_moves(\\"d4\\")) # Output: 8 # print(knight_moves(\\"a1\\")) # Output: 2 # print(knight_moves(\\"g7\\")) # Output: 4"},{"question":"You need to plan the perfect heist. Your goal is to rob the maximum amount of money from a series of buildings aligned in a row. Each building has a certain amount of money stashed inside, but the challenging part is that you cannot rob two adjacent buildings because it\'s too risky and will alert the security. Given an integer array representing the amount of money in each building, write a function to calculate the maximum amount of money you can rob without alerting the security. Input - An integer N (1 ≤ N ≤ 1000) representing the number of buildings. - An array of N integers where the i-th element represents the amount of money in the i-th building. Each amount is a non-negative integer, not exceeding 1,000,000. Output - Output a single integer which is the maximum amount of money you can rob. Examples Input 5 2 7 9 3 1 Output 12 Input 3 10 1 10 Output 20","solution":"def rob(buildings): Calculate the maximum amount of money that can be robbed without alerting security. Parameters: buildings (List[int]): A list representing the amount of money in each building. Returns: int: The maximum amount of money that can be robbed. # Edge case where there are no buildings if not buildings: return 0 # Edge case where there is only one building elif len(buildings) == 1: return buildings[0] # Dynamic programming approach # DP array to store the maximum money that can be robbed up to each building dp = [0] * len(buildings) dp[0] = buildings[0] dp[1] = max(buildings[0], buildings[1]) for i in range(2, len(buildings)): dp[i] = max(dp[i-1], dp[i-2] + buildings[i]) return dp[-1]"},{"question":"You are given three side lengths of a triangle a, b, and c. Find whether the triangle with these sides is a valid triangle and then determine its type. The triangle is invalid if the sum of its side lengths doesn\'t satisfy the triangle inequality theorem. Valid triangles can be classified as: - Equilateral: All three sides are the same length. - Isosceles: Exactly two sides are the same length. - Scalene: All three sides are different lengths. -----Constraints----- - 1≦a≦100 - 1≦b≦100 - 1≦c≦100 - All input values are integers. -----Input----- The input is given from Standard Input in the following format: a b c -----Output----- Print \\"Invalid\\" if the triangle is not valid. Otherwise, print \\"Equilateral\\", \\"Isosceles\\", or \\"Scalene\\" based on its type. -----Sample Input 1----- 3 4 5 -----Sample Output 1----- Scalene -----Sample Input 2----- 2 2 2 -----Sample Output 2----- Equilateral -----Sample Input 3----- 1 10 12 -----Sample Output 3----- Invalid","solution":"def classify_triangle(a, b, c): Classifies a triangle based on its side lengths a, b, and c. Parameters: a (int): The length of the first side. b (int): The length of the second side. c (int): The length of the third side. Returns: str: The type of the triangle (\\"Invalid\\", \\"Equilateral\\", \\"Isosceles\\", or \\"Scalene\\"). # Check if the triangle is valid based on the triangle inequality theorem if a + b > c and b + c > a and c + a > b: if a == b == c: return \\"Equilateral\\" elif a == b or b == c or c == a: return \\"Isosceles\\" else: return \\"Scalene\\" else: return \\"Invalid\\""},{"question":"You are given a string expression that represents a valid arithmetic expression containing: - Integer numbers - The operators \'+\', \'-\', \'*\', \'/\' - Parentheses \'(\', \')\' which explicitly denote precedence. The expression may contain spaces between characters which should be ignored when evaluating the expression. You need to evaluate the expression and return the resulting integer. The division operator should perform integer division. Constraints: - All division on negative numbers should truncate towards zero. - The input expression is non-empty and well-formed. - The length of the input string does not exceed 10^5. - The integer values are within the range [-2^31, 2^31-1]. Input A single line containing the valid arithmetic expression as described above. Output Print a single integer which is the result of evaluating the expression. Examples Input \\"3+2 * 2\\" Output 7 Input \\" 3/2 \\" Output 1 Input \\" 2-1 + 2 \\" Output 3 Input \\"(1+(4+5+2)-3)+(6+8)\\" Output 23 Input \\"14/3 * 2\\" Output 8","solution":"def evaluate_expression(s: str) -> int: def apply_operator(operators, values): right = values.pop() left = values.pop() operator = operators.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(int(left / right)) # truncate division towards zero def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 n = len(s) while i < n: if s[i] == \' \': i += 1 continue elif s[i] == \'(\': operators.append(s[i]) elif s[i].isdigit(): val = 0 while i < n and s[i].isdigit(): val = val * 10 + int(s[i]) i += 1 values.append(val) i -= 1 elif s[i] == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (operators and precedence(operators[-1]) >= precedence(s[i])): apply_operator(operators, values) operators.append(s[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"There is a grid of size N x N in Aizu Kingdom. Each cell in this grid represents a town, and the towns are connected by roads that run horizontally and vertically between adjacent cells. The king of Aizu Kingdom wants to plant flowers in some of the towns such that every 3x3 subgrid within the larger grid contains at least one town with flowers. However, the king has a restriction: towns located at the boundary of the grid (i.e., towns in the first row, the last row, the first column, and the last column) cannot have flowers. Your task is to determine the minimum number of towns that need to be planted with flowers to satisfy the king\'s requirement. Constraints * 3 ≦ N ≦ 1000 Input The input is given from Standard Input in the following format: N Output Print the minimum number of towns that need to be planted with flowers. Examples Input 3 Output 1 Input 5 Output 1 Input 6 Output 4","solution":"def minimum_flowers(N): Determines the minimum number of towns that need to be planted with flowers such that every 3x3 subgrid within an N x N grid contains at least one town with flowers, given constraints on the boundary cells. # If N is less than 5, the grid itself is small enough that only one flower is needed if N < 5: return 1 # Subtract the boundary rows and columns where flowers cannot be planted inner_side = N - 2 # Calculate the number of flowers required by considering non-overlapping 3x3 subgrids flowers_per_row = inner_side // 3 if inner_side % 3 != 0: flowers_per_row += 1 flowers_per_column = inner_side // 3 if inner_side % 3 != 0: flowers_per_column += 1 return flowers_per_row * flowers_per_column # Example usage: # N = int(input()) # print(minimum_flowers(N))"},{"question":"To enhance our new library system, we need a program that processes user commands. The available commands are `ADD`, `BORROW`, and `RETURN`. Write a function that tracks the number of copies of books and their status (available or borrowed). Each command will be followed by the book title and occasionally a count for the `ADD` command. # Input The first line contains an integer `n` representing the number of commands. Each of the following `n` lines contains a command in one of the following formats: - `ADD <book_title> <count>`: Adds the specified number of copies of the book to the library. - `BORROW <book_title>`: Borrows one copy of the specified book if available. - `RETURN <book_title>`: Returns one copy of the specified book if it has been borrowed. # Output For each `BORROW` and `RETURN` command, print `Borrow successful` or `Return successful` respectively, if the operation succeeds, otherwise print `Book not available` for `BORROW` commands and `All copies are already in the library` for `RETURN` commands. # Constraints - `1 ≤ n ≤ 100` - The `book_title` will be a string up to 50 characters. - `1 ≤ count ≤ 10` # Example Input ``` 5 ADD HarryPotter 5 BORROW HarryPotter BORROW HarryPotter RETURN HarryPotter RETURN HarryPotter ``` # Example Output ``` Borrow successful Borrow successful Return successful All copies are already in the library ``` Note: Ensure the correctness of the operations based on the library\'s current state after each command.","solution":"class Library: def __init__(self): self.inventory = {} self.borrowed = {} def add_book(self, book_title, count): if book_title in self.inventory: self.inventory[book_title] += count else: self.inventory[book_title] = count if book_title not in self.borrowed: self.borrowed[book_title] = 0 def borrow_book(self, book_title): if book_title in self.inventory and self.inventory[book_title] > self.borrowed[book_title]: self.borrowed[book_title] += 1 return \\"Borrow successful\\" else: return \\"Book not available\\" def return_book(self, book_title): if book_title in self.borrowed and self.borrowed[book_title] > 0: self.borrowed[book_title] -= 1 return \\"Return successful\\" else: return \\"All copies are already in the library\\" def process_commands(commands): library = Library() results = [] for command in commands: parts = command.split() action = parts[0] book_title = parts[1] if action == \\"ADD\\": count = int(parts[2]) library.add_book(book_title, count) elif action == \\"BORROW\\": result = library.borrow_book(book_title) results.append(result) elif action == \\"RETURN\\": result = library.return_book(book_title) results.append(result) return results"},{"question":"You are given a string S consisting of lowercase alphabets and you need to convert it into a palindrome by performing exactly one move: you can remove any single character from the string S. Determine if it is possible to convert the string into a palindrome after performing this move. Example 1: Input: S = \\"abca\\" Output: Yes Explanation: We can remove the character \'c\' and the string becomes \\"aba\\" which is a palindrome. Example 2: Input: S = \\"abcd\\" Output: No Explanation: There is no way to remove exactly one character to make the resulting string a palindrome. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canConvertToPalindrome() which takes a string S as input and returns \\"Yes\\" (without quotes) if it is possible to convert the string into a palindrome after removing exactly one character, and \\"No\\" otherwise. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) CONSTRAINTS 1 ≤ |S| ≤ 10^5","solution":"def canConvertToPalindrome(S): def is_palindrome_range(s, left, right): Helper function to check if the substring s[left:right+1] is a palindrome. while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True left, right = 0, len(S) - 1 while left < right: if S[left] != S[right]: # Try removing one character and check if it becomes a palindrome return \\"Yes\\" if is_palindrome_range(S, left+1, right) or is_palindrome_range(S, left, right-1) else \\"No\\" left += 1 right -= 1 return \\"Yes\\""},{"question":"You are given two integer arrays, A and B, each containing n elements (1 ≤ n ≤ 200,000). You need to determine whether it is possible to reorder the elements of array B to allow the sum of corresponding elements in arrays A and B to be the same for all indices. In other words, you need to check if there exists a permutation of array B such that for all i (0 ≤ i < n), A[i] + B[i] is the same. Input The first line contains a single integer n (1 ≤ n ≤ 200,000) — the number of elements in each array. The second line contains n space-separated integers denoting the elements of array A. The third line contains n space-separated integers denoting the elements of array B. Output Print \\"YES\\" if it is possible to reorder array B such that for all indices i, A[i] + B[i] is the same. Otherwise, print \\"NO\\". Example Input 4 1 2 3 4 5 6 7 8 Output YES Note In the example, you can reorder B as [8, 7, 6, 5] so that the sum of corresponding elements in A and B is the same: 1 + 8 = 9 2 + 7 = 9 3 + 6 = 9 4 + 5 = 9","solution":"def can_reorder_to_equal_sum(n, A, B): Determines if it is possible to reorder array B such that the sum of corresponding elements in A and B is the same for all indices. :param n: int - the number of elements in each array :param A: list of int - the elements of array A :param B: list of int - the elements of array B :return: str - \\"YES\\" if possible, otherwise \\"NO\\" # Sort both arrays sorted_A = sorted(A) sorted_B = sorted(B) # Calculate the expected sum using the first element of the sorted arrays expected_sum = sorted_A[0] + sorted_B[-1] # Check if all elements in the arrays can produce the expected sum for i in range(n): if sorted_A[i] + sorted_B[-1 - i] != expected_sum: return \\"NO\\" return \\"YES\\""},{"question":"Implement `rotate`. Given an array, rotate the array to the right by `k` steps, where `k` is non-negative. Example 1: Input: nums = [1,2,3,4,5,6,7], k = 3 Output: [5,6,7,1,2,3,4] Explanation: rotate 1 steps to the right: [7,1,2,3,4,5,6] rotate 2 steps to the right: [6,7,1,2,3,4,5] rotate 3 steps to the right: [5,6,7,1,2,3,4] Example 2: Input: nums = [-1,-100,3,99], k = 2 Output: [3,99,-1,-100] Explanation: rotate 1 steps to the right: [99,-1,-100,3] rotate 2 steps to the right: [3,99,-1,-100] Note: - Try to come up with as many solutions as you can, there are at least three different ways to solve this problem. - Could you do it in-place with O(1) extra space?","solution":"def rotate(nums, k): Rotates the array nums to the right by k steps. # Ensure k is within the bounds of the length of nums k = k % len(nums) nums[:] = nums[-k:] + nums[:-k]"},{"question":"You are given an array of integers representing the amounts of time required to complete different tasks. Each task takes a fixed unit of time described in the array. Your goal is to find the minimum time required to complete all the tasks given that you can execute at most two tasks simultaneously. Write a function that takes an array of integer taskTimes that represents the time required for each task, and returns the minimum total time required to complete all the tasks under the given constraints. Example 1: Input: taskTimes = [4, 3, 2, 3, 1] Output: 4 Explanation: - Process task 4 alone in the first unit of time. - Process task 3 and task 1 together in the second unit of time (3 units needed). - Process task 3 and task 2 together in the third unit of time (3 units needed). The total time required is 4 units. Example 2: Input: taskTimes = [5, 1, 2, 6, 2] Output: 6 Explanation: - Process task 6 alone in the first unit of time. - Process task 5 and task 1 together in the second unit of time (5 units needed). - Process task 2 and task 2 together in the third unit of time (2 units needed). The total time required is 6 units. Constraints: taskTimes.length == n 1 <= n <= 1000 1 <= taskTimes[i] <= 1000","solution":"def min_time_required(taskTimes): Given an array of task times, returns the minimum total time to complete all tasks, where at most two tasks can be executed simultaneously. taskTimes.sort(reverse=True) max_time = 0 i = 0 while i < len(taskTimes): if i == len(taskTimes) - 1: max_time = max(max_time, taskTimes[i]) break else: max_time = max(max_time, taskTimes[i]) i += 1 i += 1 return max_time"},{"question":"You are given a directed graph with N vertices (numbered 1 through N) and M edges. Each edge has an associated integer weight. You need to compute the length of the shortest path from vertex 1 to all other vertices. If a vertex is unreachable from vertex 1, output -1 for that vertex. -----Input----- - The first line of the input contains two integers N and M denoting the number of vertices and edges, respectively. - Each of the following M lines contains three space-separated integers u, v, and w denoting a directed edge from vertex u to vertex v with weight w. -----Output----- - Output N-1 lines. For each vertex i from 2 to N, print the minimum distance from vertex 1 to vertex i, or -1 if vertex i is unreachable from vertex 1. -----Constraints----- - 1 le N le 100,000 - 1 le M le 200,000 - 1 le u, v le N - 1 le w le 10^9 -----Example Input----- 5 6 1 2 2 1 3 4 2 3 1 3 4 1 2 4 7 5 3 5 -----Example Output----- 2 3 4 -1 -----Explanation----- Example case: - The shortest path from vertex 1 to vertex 2 is 1 to 2 with length 2. - The shortest path from vertex 1 to vertex 3 is 1 to 2 to 3 with length 3. - The shortest path from vertex 1 to vertex 4 is 1 to 2 to 3 to 4 with length 4. - Vertex 5 is unreachable from vertex 1, hence the output is -1.","solution":"import heapq def dijkstra(N, edges): Compute the shortest path from vertex 1 to all other vertices. :param N: Total number of vertices. :param edges: List of tuples representing directed edges (u, v, w) with weight w. :return: List of shortest distances from vertex 1 to vertex i (2 <= i <= N), or -1 if unreachable. graph = [[] for _ in range(N + 1)] for u, v, w in edges: graph[u].append((v, w)) distances = [float(\'inf\')] * (N + 1) distances[1] = 0 priority_queue = [(0, 1)] # (distance, vertex) while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) result = [] for i in range(2, N + 1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result # Function to interface with user input def shortest_path_from_one(N, M, edge_list): return dijkstra(N, edge_list)"},{"question":"Prime Length Palindrome Substring Given a string S of lowercase alphabets, you need to find the length of the longest substring of S such that the length of the substring is a prime number and the substring is also a palindrome. If no such substring exists, output -1. # Input: - The first line contains an integer T, the number of test cases. - Each test case consists of a single string S. # Output: For each test case, output a single integer, the length of the longest prime length palindrome substring, or -1 if no such substring exists. # Constraints: - 1 leq T leq 100 - 1 leq |S| leq 1000 - S consists of lowercase English letters only. # Sample Input: 2 abacabad abcde # Sample Output: 7 -1 # Explanation: In the first test case, \\"abacaba\\" is the longest palindrome with prime length 7. In the second test case, there are no palindromes with prime lengths.","solution":"def is_palindrome(s): return s == s[::-1] def generate_primes(n): primes = [] sieve = [True] * (n + 1) for p in range(2, n + 1): if sieve[p]: primes.append(p) for i in range(p * p, n + 1, p): sieve[i] = False return primes def longest_prime_length_palindrome(S): max_length = len(S) primes = generate_primes(max_length) longest_length = -1 for length in primes: for start in range(max_length - length + 1): substring = S[start:start + length] if is_palindrome(substring): longest_length = max(longest_length, length) return longest_length def solve(test_cases): results = [] for S in test_cases: result = longest_prime_length_palindrome(S) results.append(result) return results"},{"question":"Given a matrix of size M x N, find the size of the largest square sub-matrix which is composed entirely of 1s. Input: First line contains number of test cases T. Each test case contains two parts. The first part contains two integers M, the number of rows, and N, the number of columns of the matrix. The second part contains M lines, each containing N space-separated integers (either 0 or 1) representing the matrix. Output: For each test case, print the size of the largest square sub-matrix which is composed entirely of 1s. Constraints: 1 ≤ T ≤ 10 1 ≤ M, N ≤ 1000 0 ≤ Matrix[i][j] ≤ 1 SAMPLE INPUT 2 5 5 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 3 3 1 0 1 1 1 1 1 1 1 SAMPLE OUTPUT 3 2","solution":"def largestSquareSubMatrix(T, test_cases): results = [] def findMaxSquare(matrix, M, N): max_size = 0 dp = [[0] * (N + 1) for _ in range(M + 1)] for i in range(1, M + 1): for j in range(1, N + 1): if matrix[i-1][j-1] == 1: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size for case in test_cases: M, N = case[0] matrix = case[1] results.append(findMaxSquare(matrix, M, N)) return results"},{"question":"In an artistic endeavor involving a 2D grid of pixels, a graphic designer aims to convert a rectangular region of the grid into a specific shade. The grid consists of `n` rows and `m` columns, with each cell representing a pixel that can be painted. The designer needs to determine the fewest number of continuous strokes to paint the specified rectangular region. A continuous stroke is defined as a series of adjacent cells within the same row or column that are painted in a single operation, without lifting the painting tool. Given the coordinates of the upper-left and lower-right corners of the rectangle, your task is to calculate the minimum number of such strokes needed to paint the entire rectangle. Each coordinate given is based on 1-indexing. Input The first and only line contains six integers `n`, `m`, `x1`, `y1`, `x2`, and `y2`, where `1 ≤ n, m ≤ 1000` and `1 ≤ x1 ≤ x2 ≤ n`, and `1 ≤ y1 ≤ y2 ≤ m`. They represent the number of rows (n), the number of columns (m), and the coordinates of the upper-left corner (x1, y1) and the lower-right corner (x2, y2) of the rectangle to be painted. Output Print a single number: the least possible number of continuous strokes needed to paint the rectangular region. Examples Input 5 5 2 2 4 4 Output 2 Input 10 7 3 3 6 5 Output 4 Note In the first example, the designer can use the following strokes: - A vertical stroke from (2,2) to (4,2) - A vertical stroke from (2,3) to (4,4) In the second example, the designer can use the following strokes: - A vertical stroke from (3,3) to (6,3) - A vertical stroke from (3,4) to (6,4) - A vertical stroke from (3,5) to (6,5) - A vertical stroke from (3,6) to (6,6)","solution":"def min_strokes_to_paint_rectangle(n, m, x1, y1, x2, y2): Calculate the minimum number of continuous strokes needed to paint the rectangular region defined by the upper-left corner (x1, y1) and the lower-right corner (x2, y2). # Calculate the width and height of the rectangle width = y2 - y1 + 1 height = x2 - x1 + 1 # The minimum strokes needed is the smaller of the width and height return min(width, height)"},{"question":"In a parallel universe, the city of Bitland has a peculiar system for maintaining its resources. The city consists of n sectors, each having a certain number of resource units associated with it. The resource units of the i-th sector are denoted by r_{i}. Managing these resources is crucial for the city\'s survival. The central resource management uses a unique way of calculating the overall resource score for the city. Every possible non-empty subset of sectors is considered. For each subset, the sum of the resource units of that subset is calculated. Then, the maximum sum among all possible subsets is taken as the overall resource score for the city. The resource units of each sector can change over time due to various factors. Precisely, there will be q changes, each of the form i x indicating that r_{i} is updated to x. You need to find the resource score of the city initially and after each of the q updates. The resource score should be found by modulo 10^{9}+7. Formally, let M = 10^{9} + 7. If the score can be expressed as an integer S, output S % M. Input - The first line of the input contains a single integer n (1 ≤ n ≤ 3⋅10^{5}) — the number of sectors in Bitland. - The second line contains n integers r_{1}, r_{2}, …, r_{n} (1 ≤ r_{i} ≤ 10^{9}) — the initial resource units of the sectors. - The third line contains a single integer q (1 ≤ q ≤ 3⋅10^{5}) — the number of updates. - Each of the next q lines contains two integers i and x (1 ≤ i ≤ n, 1 ≤ x ≤ 10^{9}), indicating that r_{i} is updated to x . Output - In the first line output the initial resource score of the city. - In i-th of the next q lines, output the resource score of the city after i-th update. Example Input 3 1 2 3 2 2 5 1 6 Output 6 8 11 Explanation In the first case, the maximum possible sum considering all subsets is 1 + 2 + 3 = 6. After the update r_2 to 5, we have the sectors\' resource units as [1, 5, 3]. The new maximum sum considering all subsets is 1 + 5 + 3 = 9. After the update r_1 to 6, the sectors\' resource units become [6, 5, 3]. The new maximum sum considering all subsets is 6 + 5 + 3 = 14.","solution":"def get_resource_score(resources): Returns the sum of the resource units mod 10^9 + 7. MOD = 10**9 + 7 return sum(resources) % MOD def update_resource(resources, index, new_value): Updates the resource at the given index with the new value and returns the updated sum. resources[index] = new_value return get_resource_score(resources) def resource_management(n, resources, updates): Returns the initial resource score and the scores after each update. scores = [] current_score = get_resource_score(resources) scores.append(current_score) for update in updates: index, new_value = update current_score = update_resource(resources, index - 1, new_value) scores.append(current_score) return scores"},{"question":"Write a program that simulates the movements of a robot on a 2D grid. The robot starts at an initial coordinate (x, y) and can receive a list of commands to move in four cardinal directions: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Each command in the list directs the robot to move one unit in the respective direction. Your task is to determine the final coordinates of the robot after executing all the given commands. # Input The input consists of multiple datasets. Each dataset is provided in the following format: ``` x y n command1 command2 :: commandn ``` - The first line provides the initial coordinates (x, y) of the robot. - The second line gives the number of commands n (1 ≤ n ≤ 100). - The following n lines each contain a single command representing the robot\'s movement direction (\'U\', \'D\', \'L\', or \'R\'). The end of input is indicated by a line containing two zeros \\"0 0\\". # Output For each dataset, output the final coordinates of the robot after all the commands are executed. Provide one output per line. # Example Input ``` 3 4 5 U R D L U 1 1 4 R R U L 0 0 ``` Output ``` 3 5 2 2 ```","solution":"def robot_movements(commands_list): results = [] for dataset in commands_list: if dataset == \\"0 0\\": break lines = dataset.strip().split(\'n\') x, y = map(int, lines[0].split()) n = int(lines[1]) for command in lines[2:n+2]: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 results.append(f\\"{x} {y}\\") return results"},{"question":"You are given a rectangular matrix where each cell contains either an \'X\' or an \'O\'. The matrix represents a grid where \'X\' marks impassable land and \'O\' marks water you can travel on. You need to determine if there exists a path from the top-left corner of the matrix to the bottom-right corner, following the water cells (i.e., cells containing \'O\'). You can only move up, down, left, or right. Write a function `isPathExists(matrix: List[List[str]]) -> bool` that takes in the matrix and returns `True` if there is a path from the top-left to the bottom-right, otherwise returns `False`. -----Input----- The input consists of a matrix represented as a list of lists of strings. Each inner list represents a row in the matrix. The matrix has at most 200 rows and 200 columns. -----Output----- Return `True` if there is a path from the top-left to the bottom-right following the \'O\'s, otherwise return `False`. -----Examples----- Sample Input 1: [[\'O\', \'X\', \'O\', \'O\'], [\'O\', \'O\', \'X\', \'O\'], [\'X\', \'O\', \'X\', \'O\'], [\'O\', \'O\', \'O\', \'O\']] Sample Output 1: True Sample Input 2: [[\'O\', \'X\', \'O\', \'X\'], [\'X\', \'O\', \'X\', \'O\'], [\'O\', \'X\', \'O\', \'X\'], [\'X\', \'O\', \'X\', \'O\']] Sample Output 2: False -----Notes----- 1. If either the start cell (top-left) or the end cell (bottom-right) is an \'X\', there is no valid path. 2. The path is guaranteed to exist if it is possible to navigate using only \'O\' cells without crossing \'X\' cells.","solution":"from typing import List def isPathExists(matrix: List[List[str]]) -> bool: Determines if there is a path from the top-left to the bottom-right in the matrix, traversing only \'O\' cells. rows = len(matrix) cols = len(matrix[0]) if matrix[0][0] == \'X\' or matrix[rows - 1][cols - 1] == \'X\': return False directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(row, col): if row == rows - 1 and col == cols - 1: return True visited[row][col] = True for dr, dc in directions: nr, nc = row + dr, col + dc if 0 <= nr < rows and 0 <= nc < cols and not visited[nr][nc] and matrix[nr][nc] == \'O\': if dfs(nr, nc): return True return False return dfs(0, 0)"},{"question":"Alice is playing a game with a robot on a 2-dimensional grid of dimensions m x m (m ≥ 2). The robot starts at position (sx, sy) and must collect a special item located at (ix, iy). However, there are certain cells in the grid which contain traps, and the robot must avoid these traps. Each trap is given by its coordinates (tx, ty). The robot can move up, down, left, or right one cell at a time, but it cannot move into a trap cell or go outside the grid boundaries. Determine the minimum number of moves the robot needs to collect the item. It is guaranteed that it is always possible for the robot to do so. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of the T test cases follows. - The first line of each test case contains four integers m, sx, sy, ix, iy. - The second line contains an integer k denoting the number of traps. The next k lines each contain two integers tx, ty, indicating the position of a trap. -----Output----- - For each test case, output a single line containing an integer corresponding to minimum number of moves the robot needs to collect the item. -----Constraints----- - 1 ≤ T ≤ 500 - 2 ≤ m ≤ 20 - 1 ≤ sx, sy, ix, iy, tx, ty ≤ m - 0 ≤ k ≤ 20 - All starting positions, item positions, and trap positions will be distinct. -----Example----- Input: 2 3 1 1 3 3 1 2 2 4 1 1 4 4 3 2 2 3 3 4 2 Output: 4 6 -----Explanation----- Example case 1. ... The robot will move from (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) in 4 moves avoiding the trap at (2, 2). Example case 2. ... The robot will avoid traps at (2, 2), (3, 3), and (4, 2) and reach (4, 4) in the minimum moves which is 6.","solution":"from collections import deque def bfs_min_moves(m, sx, sy, ix, iy, traps): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) trap_set = set(traps) while queue: x, y, moves = queue.popleft() if (x, y) == (ix, iy): return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 1 <= nx <= m and 1 <= ny <= m and (nx, ny) not in visited and (nx, ny) not in trap_set: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) def min_moves_for_each_case(test_cases): results = [] for case in test_cases: m, sx, sy, ix, iy, traps = case moves = bfs_min_moves(m, sx, sy, ix, iy, traps) results.append(moves) return results # Example usage for testing: test_cases = [ (3, 1, 1, 3, 3, [(2, 2)]), (4, 1, 1, 4, 4, [(2, 2), (3, 3), (4, 2)]) ] print(min_moves_for_each_case(test_cases)) # Output: [4, 6]"},{"question":"A popular car rental company wants to optimize the assignment of cars in different branches across the city. The company has B branches (2 ≤ B ≤ 1000), denoted by 1, 2, ..., B, and each branch has certain cars available for rent, as mentioned in an array. The company needs to handle C customers (1 ≤ C ≤ 1000) who request cars from any branch for a specific period of time. Each customer’s request consists of the branch they approach, the number of cars they need, and the duration of their rental in days. If a branch does not have the requested number of cars available, the customer will be denied a rental. The task is to write a program to process these customer requests and determine how many customers are served successfully. [Input]: Input will be given in the following format B A1 A2 A3 ... AB (Number of cars available at each branch) C B1 R1 D1 (Branch, Cars Requested, Duration in days by customer) B2 R2 D2 B3 R3 D3 ... BC RC DC [Output]: Output should be in the following format Cx - Number of customers successfully served SAMPLE INPUT 5 10 5 8 2 1 4 1 3 2 2 6 1 3 2 3 5 1 1 SAMPLE OUTPUT 3","solution":"def process_customer_requests(B, branch_cars, C, customer_requests): This function processes customer requests and determines how many customers are served successfully. Parameters: B (int): Number of branches branch_cars (List[int]): List of the number of cars available at each branch C (int): Number of customers customer_requests (List[Tuple[int, int, int]]): List of customer requests containing branch number, cars requested, and duration Returns: int: Number of customers successfully served successfully_served_count = 0 for request in customer_requests: branch, cars_requested, duration = request if branch_cars[branch - 1] >= cars_requested: branch_cars[branch - 1] -= cars_requested successfully_served_count += 1 return successfully_served_count # Sample Input B = 5 branch_cars = [10, 5, 8, 2, 1] C = 4 customer_requests = [ (1, 3, 2), (2, 6, 1), (3, 2, 3), (5, 1, 1) ] # Example Output result = process_customer_requests(B, branch_cars, C, customer_requests) print(result) # Output: 3"},{"question":"In a game of dice, each die has faces numbered from 1 to 6. Two players, Sophie and Max, are playing this game. They throw three six-sided dice in a row and compare the sum of the numbers on the faces of their respective dice. The player with the higher sum wins the round. Given the results of the throws for both players, determine the number of rounds won by Sophie, the number of rounds won by Max, and the number of rounds resulting in a draw. Input The input contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^3). Each test case is described in a single line which contains six space-separated integers: a1 a2 a3 b1 b2 b3 (1 ≤ a1, a2, a3, b1, b2, b3 ≤ 6) — the numbers on the dice faces thrown by Sophie and Max, respectively. Output For each test case, output three integers separated by spaces: the number of rounds won by Sophie, the number of rounds won by Max, and the number of rounds resulting in a draw. Example Input 3 1 2 3 4 5 6 3 3 3 2 2 2 6 5 4 3 2 1 Output 0 1 0 1 0 0 1 0 0 Note In the first test case: Sophie’s total is: 1 + 2 + 3 = 6 Max’s total is: 4 + 5 + 6 = 15 Max wins this round. In the second test case: Sophie’s total is: 3 + 3 + 3 = 9 Max’s total is: 2 + 2 + 2 = 6 Sophie wins this round. In the third test case: Sophie’s total is: 6 + 5 + 4 = 15 Max’s total is: 3 + 2 + 1 = 6 Sophie wins this round.","solution":"def dice_game_results(test_cases): Given the results of the dice throws for Sophie and Max, determine the number of rounds won by Sophie, the number of rounds won by Max, and the number of rounds resulting in a draw for each test case. Parameters: test_cases (list of list of int): A list containing the dice results of Sophie and Max for each test case. Each element in the list is a sublist with exactly 6 integers representing the dice results. Returns: list of tuples: A list of tuples where each tuple contains three integers representing the number of rounds won by Sophie, the number of rounds won by Max, and the number of rounds resulting in a draw, respectively. results = [] for case in test_cases: # Extracting individual dice throws a1, a2, a3, b1, b2, b3 = case # Calculate the total for Sophie and Max sophie_total = a1 + a2 + a3 max_total = b1 + b2 + b3 if sophie_total > max_total: results.append((1, 0, 0)) elif max_total > sophie_total: results.append((0, 1, 0)) else: results.append((0, 0, 1)) return results"},{"question":"You have been given a list of integers. Your task is to return a new list containing only the integers from the original list that are greater than their following integer. If an integer has no following integer (i.e., it is the last integer in the list), it should be included in the new list. Example: ``` Input: [5, 3, 8, 4, 2, 10] Output: [5, 8, 4, 10] ``` Explanation: - 5 is included because it is greater than 3 (the next integer). - 3 is not included because it is not greater than 8. - 8 is included because it is greater than 4. - 4 is included because it is greater than 2. - 2 is not included because it is not greater than 10. - 10 is included because it has no following integer.","solution":"def filter_greater_than_next(lst): Returns a list containing elements from the input list that are greater than their following element. The last element of the list is always included. result = [] if not lst: # Check if the list is empty return result for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: result.append(lst[i]) result.append(lst[-1]) # Include the last element return result"},{"question":"Write a function `decode_string` that takes an encoded string as input and returns its decoded string. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is repeated exactly k times. The function should handle nested encoded strings. For example: ```python decode_string(\\"3[a]2[bc]\\") ------------> \\"aaabcbc\\" decode_string(\\"3[a2[c]]\\") ------------> \\"accaccacc\\" decode_string(\\"2[abc]3[cd]ef\\") ------------> \\"abcabccdcdcdef\\" decode_string(\\"10[a]\\") ------------> \\"aaaaaaaaaa\\" ``` **Note:** - Assume that the input string is always valid and contains only digits, square brackets, and lowercase letters. - You may not use regular expressions or built-in functions that directly implement this functionality. **Function Signature:** ```python def decode_string(s: str) -> str: # implementation goes here ``` **Constraints:** - 1 ≤ len(s) ≤ 30 - The number k is between 1 and 300.","solution":"def decode_string(s: str) -> str: def decode(index): result = \\"\\" k = 0 while index < len(s): if s[index].isdigit(): k = k * 10 + int(s[index]) elif s[index] == \'[\': decoded_string, end_index = decode(index + 1) result += k * decoded_string k = 0 index = end_index elif s[index] == \']\': return result, index else: result += s[index] index += 1 return result, index decoded_string, _ = decode(0) return decoded_string"},{"question":"A company wants to distribute annual bonuses to its employees. The total bonus amount should be evenly distributed based on the performance rating of each employee. Each employee has a different performance rating and must receive a certain minimum bonus amount that is proportional to their rating. The company wants to find the minimum amount of bonus one unit of rating should correspond to. You need to calculate the minimum bonus amount each unit of rating should correspond to such that every employee receives an integer bonus based on their rating and the total sum of bonuses is minimized. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - denoting the number of employees. - The second line of each test case contains N space-separated integers representing the performance ratings of the employees. ------ Output Format ------ For each test case, output the minimum bonus amount each unit of rating should correspond to in a new line. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ text{Rating}_i ≤ 1000 (for each rating) ------ Sample Input 1 ------ 3 3 1 2 3 4 2 3 5 7 5 4 4 4 4 4 ------ Sample Output 1 ------ 1 1 1 ------ Explanation 1 ------ Test Case 1: The minimum bonus amount is 1 because: - Employee 1: 1 rating * 1 = 1 - Employee 2: 2 ratings * 1 = 2 - Employee 3: 3 ratings * 1 = 3 Total bonus amount = 1 + 2 + 3 = 6 Test Case 2: The minimum bonus amount is 1 because: - Employee 1: 2 ratings * 1 = 2 - Employee 2: 3 ratings * 1 = 3 - Employee 3: 5 ratings * 1 = 5 - Employee 4: 7 ratings * 1 = 7 Total bonus amount = 2 + 3 + 5 + 7 = 17 Test Case 3: The minimum bonus amount is 1 because: - All employees have the same rating, so each receives 4 * 1 = 4","solution":"def minimum_bonus_amount(test_cases): results = [] for case in test_cases: N, ratings = case # Since we need the minimum payout per rating unit, we can always assume it to be 1 results.append(1) return results # Parsing input and formatting output according to the expected input/output format def parse_input_output(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) ratings = list(map(int, input_lines[index+1].strip().split())) test_cases.append((N, ratings)) index += 2 results = minimum_bonus_amount(test_cases) output_string = \\"n\\".join(map(str, results)) return output_string"},{"question":"In a magical forest, there are n trees and each tree produces a unique type of fruit. They are placed in a circle. The trees are indexed from 1 to n in clockwise order. Every autumn, the magical creatures want to harvest one fruit from each tree, starting from tree 1. They can walk in either direction (clockwise or counterclockwise), but they must end up harvesting all the fruits exactly once. You need to determine the minimum number of steps required for the magical creatures to complete their harvest. Moving from one tree to an adjacent tree (either to the next or the previous tree in the circle) counts as one step. Input The input consists of a single integer n (3 ≤ n ≤ 10^6) — the number of trees in the magical forest. Output Output a single integer — the minimum number of steps required to harvest one fruit from each tree starting from tree 1. Examples Input 4 Output 3 Input 5 Output 4","solution":"def minimum_harvest_steps(n): Given n trees in a circular arrangement, calculates the minimum steps required to harvest one fruit from each tree starting from tree 1. return n - 1"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Create two functions to address the following: 1. A function `is_palindrome(s)` that takes a string `s` and returns `True` if `s` is a palindrome and `False` otherwise. This function should ignore spaces, punctuation, and case. Examples: ```python is_palindrome(\\"A man, a plan, a canal, Panama!\\") = True is_palindrome(\\"Was it a car or a cat I saw?\\") = True is_palindrome(\\"No lemon, no melon\\") = True is_palindrome(\\"Hello world\\") = False ``` 2. A function `longest_palindromic_substring(s)` that takes a string `s` and returns the longest palindromic substring within `s`. If there are multiple palindromic substrings of the same maximum length, return the first one from the left. Examples: ```python longest_palindromic_substring(\\"babad\\") = \\"bab\\" longest_palindromic_substring(\\"cbbd\\") = \\"bb\\" longest_palindromic_substring(\\"a\\") = \\"a\\" longest_palindromic_substring(\\"ac\\") = \\"a\\" # or \\"c\\" ``` Ensure both functions handle unexpected input gracefully and efficiently.","solution":"import re def is_palindrome(s): Returns True if the given string s is a palindrome, ignoring spaces, punctuation, and capitalization. Returns False otherwise. cleaned_string = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return cleaned_string == cleaned_string[::-1] def longest_palindromic_substring(s): Returns the longest palindromic substring within the given string s. If there are multiple palindromic substrings of the same maximum length, returns the first one from the left. def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left+1:right] longest = \\"\\" for i in range(len(s)): # Odd length palindromes (single character center) temp = expand_around_center(i, i) if len(temp) > len(longest): longest = temp # Even length palindromes (two character center) temp = expand_around_center(i, i+1) if len(temp) > len(longest): longest = temp return longest"},{"question":"Write a program that, given a list of integers and a target integer, determines whether there exists a pair of integers in the list that add up to the target. If such a pair exists, return the indices of the two numbers. If there are multiple pairs, return the pair with the smallest first index. If no such pair exists, return an empty list. Constraints * The list of integers can have a length of up to (10^6). * Each integer in the list is between -(10^9) and (10^9). * The target integer is also between -(10^9) and (10^9). Input Input is given from Standard Input in the following format: ``` n arr target ``` * `n`: The length of the list `arr`. * `arr`: The list of integers. * `target`: The target integer. Output Output a list containing the indices of the two integers that add up to the target, or an empty list if no such pair exists. Example Input ``` 5 2 7 11 15 4 9 ``` Output ``` [0, 1] ``` Input ``` 3 3 2 4 6 ``` Output ``` [1, 2] ``` Input ``` 4 1 2 3 4 8 ``` Output ``` [] ```","solution":"def find_pair_with_sum(arr, target): Determines whether there exists a pair of integers in the list that add up to the target. If such a pair exists, returns the indices of the two numbers. If no such pair exists, returns an empty list. indices_map = {} for index, number in enumerate(arr): complement = target - number if complement in indices_map: return [indices_map[complement], index] indices_map[number] = index return []"},{"question":"You are given a string S of length N and a pattern P of length M. Your task is to find the minimum length substring of S, which contains all the characters of P (including duplicates). If no such substring exists, return an empty string. Example 1: Input: S = \\"this is a test string\\", P = \\"tist\\" Output: \\"t stri\\" Explanation: The minimum length substring containing all characters \'t\', \'i\', \'s\', \'t\' is \\"t stri\\". Example 2: Input: S = \\"geeksforgeeks\\", P = \\"ork\\" Output: \\"ksfor\\" Explanation: The minimum length substring containing all characters \'o\', \'r\', \'k\' is \\"ksfor\\". Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function minWindow() that takes string S and string P as parameters and returns the desired output. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N, M ≤ 10^5 All characters in the string and the pattern are lowercase English letters.","solution":"def minWindow(S, P): from collections import Counter, defaultdict len_s = len(S) len_p = len(P) if len_s < len_p: return \\"\\" count_p = Counter(P) count_s = defaultdict(int) required = len(count_p) formed = 0 l, r = 0, 0 min_length = float(\\"inf\\") min_left = 0 while r < len_s: character = S[r] count_s[character] += 1 if character in count_p and count_s[character] == count_p[character]: formed += 1 while l <= r and formed == required: character = S[l] if r - l + 1 < min_length: min_length = r - l + 1 min_left = l count_s[character] -= 1 if character in count_p and count_s[character] < count_p[character]: formed -= 1 l += 1 r += 1 if min_length == float(\\"inf\\"): return \\"\\" else: return S[min_left:min_left+min_length]"},{"question":"You are a software engineer tasked with programming the control system for a library\'s automated borrowing service. The library allows users to borrow and return books using automated kiosks. Your job is to create a book management system that supports tracking the status of book borrowing and returning. The system should be able to process several commands and produce the correct outputs for them. The book management system has the following commands: borrow, return, and check. Each command will be provided on a single line alongside the relevant details: 1. \\"B\\" represents borrowing a book. Two arguments U and B are given, where U (an identifier for the user) wants to borrow the book B (an identifier for the book). 2. \\"R\\" represents returning a book. Two arguments U and B are given, where user U returns the book B. 3. \\"C\\" represents checking the status of a book. One argument B is given, the identifier of the book to be checked. When a book is checked, the system should print the identifier of the user who has currently borrowed the book. If the book is not borrowed by anyone, it should print \\"available\\". Initial state: All books are initially available and no books are borrowed by any user. The system will process multiple datasets, with each dataset of commands terminated by a line containing \\"0\\". Input The input consists of multiple datasets. Each dataset follows the given format: > N > Command1 > Command2 > ... > CommandN N is an integer (1 ≤ N ≤ 10,000), representing the number of commands in that dataset. Commandi is the i-th command executed. The end of the input is indicated by a single line with the number \\"0\\". Output For each dataset, output the status of each book when the check command appears during the processing of that dataset. Print the identifier of the user borrowing the book or \\"available\\" if no one has borrowed it. Output an empty line after each dataset. Sample Input 6 B 1 100 B 2 101 C 100 C 101 R 1 100 C 100 4 B 1 200 C 200 R 1 200 C 200 0 Output for Sample Input 1 2 available 1 available Example Input 6 B 1 100 B 2 101 C 100 C 101 R 1 100 C 100 4 B 1 200 C 200 R 1 200 C 200 0 Output 1 2 available 1 available","solution":"def process_book_management(commands_list): Process the commands for book borrowing system and produce the correct output. :param commands_list: List of lists, where each list contains commands for a dataset results = [] for commands in commands_list: book_status = {} # To track the status of each book output = [] for command in commands: parts = command.split() cmd_type = parts[0] if cmd_type == \\"B\\": user = parts[1] book = parts[2] book_status[book] = user elif cmd_type == \\"R\\": user = parts[1] book = parts[2] if book in book_status and book_status[book] == user: del book_status[book] elif cmd_type == \\"C\\": book = parts[1] if book in book_status: output.append(book_status[book]) else: output.append(\\"available\\") results.append(output) return results def handle_input_and_output(input_data): Handles the input and output processing for the book management system. :param input_data: Multiline string input representing commands lines = input_data.strip().split(\'n\') idx = 0 commands_list = [] while idx < len(lines): n = int(lines[idx]) if n == 0: break commands = lines[idx + 1: idx + 1 + n] commands_list.append(commands) idx += n + 1 results = process_book_management(commands_list) for result in results: for res in result: print(res) print() # Example input example_input = 6 B 1 100 B 2 101 C 100 C 101 R 1 100 C 100 4 B 1 200 C 200 R 1 200 C 200 0 handle_input_and_output(example_input)"},{"question":"Tom is organizing a coding challenge and wants to ensure that the coding challenge is fair. He has a list of N times recorded for N participants. Each participant\'s time is recorded in the format of hours, minutes, and seconds. Tom wants to distribute medals based on their recorded times in such a way that participants are ranked from the fastest to the slowest completion time. Each participant must receive one of three types of medals: Gold, Silver, or Bronze. Write a function that takes the recorded times and returns an array of strings representing the medals allotted to each participant. Note that if there are participants with the same time, they should receive the same medal, and the next medal should be awarded based on the overall rank list. -----Input:----- - The first line of the input contains an integer N, the number of participants. - The next N lines each contain a time in the format \\"HH:MM:SS\\". -----Output:----- - An array of strings where each string is either \\"Gold\\", \\"Silver\\", or \\"Bronze\\" representing the medal awarded to the respective participant based on their completion time. -----Constraints----- - 1 leq N leq 100 - Times are given in valid \\"HH:MM:SS\\" format. -----Sample Input:----- 4 00:45:30 00:45:30 00:50:00 00:30:20 -----Sample Output:----- [\\"Gold\\", \\"Gold\\", \\"Silver\\", \\"Bronze\\"] -----EXPLANATION:----- The given times represent the participants\' times to complete the challenge. Sorting these times in ascending order gives: [\\"00:30:20\\", \\"00:45:30\\", \\"00:45:30\\", \\"00:50:00\\"] The first and second participants had the exact same time and share the \\"Gold\\" medal, the third one gets the \\"Silver\\" medal, and the fourth one gets the \\"Bronze\\" medal.","solution":"def distribute_medals(times): Distribute medals based on participants\' completion times. :param times: List of strings representing times in \\"HH:MM:SS\\" format. :return: List of strings representing medals (\\"Gold\\", \\"Silver\\", \\"Bronze\\"). # List of medals in the order of their importance medals = [\\"Gold\\", \\"Silver\\", \\"Bronze\\"] # Parse the times and store them along with their original indices parsed_times = [(i, list(map(int, time.split(\':\')))) for i, time in enumerate(times)] # Sort the times in ascending order based on hours, then minutes, then seconds parsed_times.sort(key=lambda x: x[1]) # Initialize results with empty strings result = [\\"\\"] * len(times) # Initialize current rank and current medal index current_rank = 0 # Start with rank 0 current_medal_index = 0 for i in range(len(parsed_times)): index, time = parsed_times[i] if i == 0: # First participant gets the highest available medal result[index] = medals[current_medal_index] else: # Compare current time with the previous one prev_index, prev_time = parsed_times[i - 1] if time == prev_time: # Same time gets the same medal result[index] = result[prev_index] else: # Different time, increment the rank current_rank += 1 if current_rank < len(medals): current_medal_index = current_rank if current_rank >= len(medals): # There are more participants than medals, so everyone else gets the last available medal result[index] = medals[-1] else: result[index] = medals[current_medal_index] return result"},{"question":"Yara is working on a new text editor and wants to implement a feature to find the longest palindrome within a given string. She needs your help to write an efficient algorithm to achieve this. A palindrome is a string that reads the same forwards and backwards. For example, \\"racecar\\" and \\"madam\\" are palindromes, but \\"hello\\" is not. -----Input----- The input consists of a single string s of lowercase English letters (1 leq |s| leq 10^5). -----Output----- Print the longest palindrome that can be found in the string s. If there is more than one palindrome of the maximum length, print the one that appears first. -----Examples----- Input babad Output bab Input cbbd Output bb -----Note----- In the first case, the longest palindromes are \\"bab\\" and \\"aba\\". Since \\"bab\\" appears first, it is the output. In the second case, the longest palindrome is \\"bb\\". -----Constraints----- The solution must run in O(n^2) time complexity, where n is the length of the string. A simple brute force approach would not be sufficient. Consider using more efficient techniques such as expanding around centers or dynamic programming.","solution":"def longest_palindrome(s): Finds the longest palindromic substring in the given string s. Args: s (str): The string to search within. Returns: str: The longest palindromic substring. def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] if not s or len(s) == 1: return s longest = \'\' for i in range(len(s)): # Try to expand for odd length palindrome odd_pal = expand_around_center(i, i) if len(odd_pal) > len(longest): longest = odd_pal # Try to expand for even length palindrome even_pal = expand_around_center(i, i + 1) if len(even_pal) > len(longest): longest = even_pal return longest"},{"question":"# Task: Write a function `factorial_digit_sum` that takes an integer `n` and returns the sum of the digits in the decimal representation of the factorial of `n`. Function Signature: ```python def factorial_digit_sum(n: int) -> int: ``` # Input - An integer `n` (0 <= n <= 100) # Output - An integer representing the sum of the digits of `n!` # Examples ```python factorial_digit_sum(5) # Returns 3 because 5! = 120 and 1 + 2 + 0 = 3 factorial_digit_sum(10) # Returns 27 because 10! = 3628800 and 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27 factorial_digit_sum(0) # Returns 1 because 0! = 1 and 1 = 1 ``` # Note - Make sure the function works efficiently for larger values of `n`, up to 100.","solution":"def factorial_digit_sum(n: int) -> int: Returns the sum of the digits in the decimal representation of the factorial of n. Parameters: n (int): The non-negative integer Returns: int: The sum of the digits of n! import math factorial_value = math.factorial(n) digit_sum = sum(int(digit) for digit in str(factorial_value)) return digit_sum"},{"question":"-----Input----- The input consists of a string containing a mathematical expression with integers, and the operators +, -, *, and /. -----Output----- Output the result of the expression as a single integer. -----Example----- Input \\"3+5*2-9/3\\" Output 10","solution":"def evaluate_expression(expression): Evaluates a given mathematical expression string with integers and the operators +, -, *, and /. return int(eval(expression))"},{"question":"Given a string, write a program to find the length of the longest substring without repeating characters. # Task Write a program that, given A single string of lowercase and uppercase alphabets. Prints out the length of the longest substring without repeating characters to STDOUT. # Constraints 1 ≤ length of the string ≤ 1000 The string consists of English letters, digits, symbols and spaces. # Input Format A single line containing the string. # Output Format One integer which is the length of the longest substring without repeating characters. # SAMPLE INPUT abcabcbb # SAMPLE OUTPUT 3 # Explanation For the input \\"abcabcbb\\", the longest substring without repeating characters is \\"abc\\", which has a length of 3. # SAMPLE INPUT bbbbb # SAMPLE OUTPUT 1 # Explanation For the input \\"bbbbb\\", the longest substring without repeating characters is \\"b\\", which has a length of 1.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"You are given an array of integers and you need to determine the length of the longest subarray, such that every two consecutive elements in the subarray have an absolute difference of 1. A subarray is a continuous portion of an array. -----Input----- The first line of the input contains an integer n (1 le n le 10^5) — the length of the array. The second line of the input contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the array. -----Output----- Print one integer — the length of the longest subarray described above. -----Examples----- Input 6 1 2 2 3 4 4 Output 3 Input 8 1 3 5 7 9 11 13 15 Output 1 -----Note----- In the first example, the longest subarray where every two consecutive elements have an absolute difference of 1 is either [1, 2, 2] or [2, 3, 4], both of length 3. In the second example, there are no two consecutive elements with an absolute difference of 1, so the longest subarray is of length 1 (each element itself).","solution":"def longest_subarray_with_abs_diff_one(arr): Returns the length of the longest subarray where every two consecutive elements have an absolute difference of 1. if not arr: return 0 longest = 1 current_length = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i-1]) == 1: current_length += 1 longest = max(longest, current_length) else: current_length = 1 return longest"},{"question":"Given a string representing a pipeline of water systems, each water system can be in one of the following states: - `A`: Active Water source - `B`: Broken Water source - `T`: Terminal point (water collection point) - `.`, `|`, `-`: Empty pipe sections which connect the whole water system The rules for flow of water are: - Water can flow from `A` to `T` through connections (`.`, `|`, `-`). - Water stops flowing if it reaches a `B`. - Water does not flow backward once it reaches a `T`. Your task is to write a program that determines if there is a continuous path of water flow from any `A` to any `T`. The function should return `true` if it\'s possible, otherwise, `false`. **Function Signature** ``` function is_water_flow_possible(pipeline: str) -> bool: pass ``` **Input** - A valid `pipeline` description as a string (1 ≤ length of pipeline ≤ 10^4). **Output** - A boolean value: `true` if water can flow from any `A` to any `T`, otherwise `false`. **Examples:** ``` Example 1: Input: \\"A.-|.-T\\" Output: true Explanation: Water can flow from A through - | - to reach T. Example 2: Input: \\"A.-|.-B.T|A.---T\\" Output: true Explanation: Water can flow from the first A to its T, the second A to its T. Example 3: Input: \\"A.|-.A.-|B-.T\\" Output: false Explanation: Water from the first A is blocked by B before reaching any Terminal. Example 4: Input: \\"A.|-.-T|-B.T\\" Output: true Explanation: Water from the first A flows to the first T. Example 5: Input: \\"B..A..T\\" Output: true Explanation: Water from A directly reaches T. ``` **Constraints** - There can be multiple `A`s and `T`s in the pipeline. - The pipeline will not contain any invalid characters. - The pipeline will be a single string with no additional spaces. **Note** To solve this problem, consider simulating the water flow from each `A` looking for any possible path to a `T`. You can explore graph traversal techniques with adjacency lists mimicking the connectivity of the water system.","solution":"def is_water_flow_possible(pipeline: str) -> bool: Determines if there is a continuous path of water flow from any \'A\' to any \'T\' in the pipeline. # Get the index of all \'A\'s and \'T\'s in the pipeline sources = {i for i, char in enumerate(pipeline) if char == \'A\'} targets = {i for i, char in enumerate(pipeline) if char == \'T\'} # Define the set of blockers blockers = {\'B\'} for source in sources: # We\'ll use a stack for DFS stack = [source] visited = set() while stack: current = stack.pop() if current in targets: return True if current in visited: continue visited.add(current) # Explore neighbors (left and right) if current + 1 < len(pipeline) and pipeline[current+1] not in blockers: stack.append(current + 1) if current - 1 >= 0 and pipeline[current-1] not in blockers: stack.append(current - 1) return False"},{"question":"Alex is given a matrix of size N x N filled with integers. He needs to find the maximum sum of any hourglass formation in the matrix. An hourglass is formed by selecting a starting point (i, j) and including the following elements: ``` a b c d e f g ``` Where (i, j) is the top-left element of the hourglass (i.e., \'a\' in the formation). Help Alex to find this maximum sum. Input: First line of input contains an integer N. The next N lines contain N integers each, representing the matrix elements. Output: Print the maximum hourglass sum found in the matrix. Constraints: - 3 ≤ N ≤ 10 - -10^5 ≤ matrix elements ≤ 10^5 Sample Input: 4 1 2 3 0 0 0 5 0 0 0 9 8 7 0 0 0 0 0 0 0 Sample Output: 35","solution":"def find_max_hourglass_sum(matrix): Given an NxN matrix, find the maximum hourglass sum. An hourglass is defined as: a b c d e f g N = len(matrix) max_sum = float(\'-inf\') for i in range(N - 2): for j in range(N - 2): current_sum = (matrix[i][j] + matrix[i][j+1] + matrix[i][j+2] + matrix[i+1][j+1] + matrix[i+2][j] + matrix[i+2][j+1] + matrix[i+2][j+2]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a list of integers, determine if it is possible to partition the list into two parts such that the sum of the elements in both parts is equal. If it is possible, return True; otherwise, return False. You are required to write a function to solve the problem and meet the following constraints: # Function Signature ```python def can_partition(nums: List[int]) -> bool: ``` # Input - `nums` (List[int]): A list of integers where `1 ≤ len(nums) ≤ 200` and `1 ≤ nums[i] ≤ 1000`. # Output - `bool`: True if the list can be partitioned into two parts with equal sums, False otherwise. # Example Input ```python nums = [1, 5, 11, 5] ``` # Example Output ```python True ``` # Explanation The array can be partitioned into `[1, 5, 5]` and `[11]`, both having the sum of 11. # Constraints - `1 ≤ len(nums) ≤ 200` - `1 ≤ nums[i] ≤ 1000` # Sample Input 1 ```python nums = [1, 2, 3, 5] ``` # Sample Output 1 ```python False ``` # Explanation 1 The array cannot be partitioned into two parts with an equal sum. # Notes Use dynamic programming to solve this problem efficiently. Consider using a 2D dp array where `dp[i][j]` will be True if a subset of the first `i` elements has a sum equal to `j`.","solution":"from typing import List def can_partition(nums: List[int]) -> bool: total = sum(nums) # If the total sum is odd, it\'s impossible to partition it into two equal parts if total % 2 != 0: return False target = total // 2 dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"You are given a list of strings which are sequences of lowercase English letters representing file paths in a Unix-like file system. Each path starts from the root directory \'/\', and various directories are separated by \'/\'. Your task is to determine the relative file path from one file to another. -----Input----- The input begins with an integer 1 leq N leq 1000 specifying the number of paths provided in the file system. This is followed by N lines, each containing a unique file path, with paths\' lengths not exceeding 200 characters. After this, there is an integer 1 leq Q leq 100 indicating the number of queries. Each query consists of two lines: 1. The file path of the source file. 2. The file path of the target file. -----Output----- For each query, output a line containing the relative path from the source file to the target file. -----Examples----- Sample Input: 4 /foo/bar /foo/bar/baz /home/user/docs /home/user/docs/report.txt 2 /foo/bar /foo/bar/baz /home/user/docs /home/user/docs/report.txt Sample Output: baz report.txt Explanation: - To go from /foo/bar to /foo/bar/baz, you simply need to go to the subdirectory \'baz\'. - To go from /home/user/docs to /home/user/docs/report.txt, you just need to refer to \'report.txt\'.","solution":"import os def relative_path(src, target): Returns the relative path to get from src to target. return os.path.relpath(target, start=src)"},{"question":"You are given an infinite number of coins of 3 different denominations. Your task is to determine the minimum number of coins needed to make a certain amount of money S, or output -1 if it is impossible to make the exact amount. Input The input consists of four lines: - The first line contains an integer S (1 ≤ S ≤ 10000), the amount of money to be made. - The second line contains an integer a (1 ≤ a ≤ 1000), the denomination of the first type of coin. - The third line contains an integer b (1 ≤ b ≤ 1000), the denomination of the second type of coin. - The fourth line contains an integer c (1 ≤ c ≤ 1000), the denomination of the third type of coin. Output Output a single integer—the minimum number of coins needed to make the amount S, or -1 if it is impossible. Example Input 11 1 5 7 Output 3 Note In the given example, it is possible to make 11 using three coins: one coin of denomination 7 and four coins of denomination 1, i.e., 7 + 1 + 1 + 1 + 1 = 11. Thus, the minimum number of coins needed is 5. Alternatively, we could use two coins of denomination 5 and one coin of denomination 1, i.e., 5 + 5 + 1 = 11. In this case, the minimum number of coins needed is 3.","solution":"def min_coins_to_make_s(S, a, b, c): Returns the minimum number of coins needed to make amount S using denominations a, b, and c. Returns -1 if it is impossible. # Initialize dp array where dp[i] will be storing the minimum number # of coins required for i value. We initialize dp[0] to 0 as no coins # are needed to make 0 amount and rest to infinity dp = [float(\'inf\')] * (S + 1) dp[0] = 0 arr = [a, b, c] for i in range(1, S + 1): for coin in arr: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[S] if dp[S] != float(\'inf\') else -1"},{"question":"Alice is working with binary strings and needs to perform various operations on them. She is particularly interested in the concept of the \\"cyclic shift\\". A cyclic shift of a binary string involves moving its characters to the left or right, where characters that fall off one end reappear at the other end. Alice wants to find the smallest binary number that can be obtained by any cyclic shift of a given binary string. Write a function to determine the smallest binary string that can be obtained from any cyclic shift of the original binary string. Input The input will contain a single binary string s (1 ≤ |s| ≤ 1000). Output Output a single binary string which is the smallest possible binary number that can be obtained by any cyclic shift of the input string. Examples Input 11001 Output 00111 Input 101010 Output 010101","solution":"def smallest_cyclic_shift(binary_string): Returns the smallest binary string that can be obtained from any cyclic shift of the input binary string. n = len(binary_string) extended_string = binary_string + binary_string smallest_shift = binary_string for i in range(1, n): current_shift = extended_string[i:i+n] if current_shift < smallest_shift: smallest_shift = current_shift return smallest_shift"},{"question":"# Problem Statement A robot is playing a game in a grid of size N x M. The robot can move either right or down from any cell and wants to collect the maximum number of stars possible. Each cell in the grid contains a certain number of stars. Write a program that computes the maximum number of stars the robot can collect if it starts from the top-left cell (0, 0) and moves to the bottom-right cell (N-1, M-1). ------ Input section ------ The first line contains two integers, N and M, denoting the number of rows and columns in the grid. The next N lines contain M space-separated integers each, denoting the number of stars in each cell of the grid. ------ Output section ------ Output a single integer denoting the maximum number of stars the robot can collect. ------ Input constraints ------ 1 ≤ N, M ≤ 50 0 ≤ grid[i][j] ≤ 100, where grid[i][j] denotes the number of stars in the cell at row i and column j. ----- Sample Input 1 ------ 3 3 1 3 1 1 5 1 4 2 1 ----- Sample Output 1 ------ 12 ----- Sample Output Explanation 1 ------ The optimal path is 1 → 3 → 5 → 2 → 1, collecting a total of 12 stars. ----- Sample Input 2 ------ 2 2 1 2 3 4 ----- Sample Output 2 ------ 8 ----- Sample Output Explanation 2 ------ The optimal path is 1 → 2 → 4, collecting a total of 7 stars. However, the optimal path can also be 1 → 3 → 4 which collects 8 stars.","solution":"def max_stars(n, m, grid): Returns the maximum number of stars the robot can collect from top-left to bottom-right of a grid. dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the grid for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]"},{"question":"In a small town, you are given a set of n houses, each with its unique address represented by ai. There are also m predetermined roads, each connecting two houses, which are bi-directional. Your task is to manage q queries about these roads and houses. Queries can be of the following types: 1. Update the address of a specified house to a new address. 2. Check if there exists a direct road between two given houses. 3. Find the total number of houses within a given address range [li, ri]. Help the local map authorities by implementing a system that can handle these queries efficiently. Input The first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105), the number of houses and the number of roads respectively. The next line contains n distinct integers a1, a2, ..., an (|ai| ≤ 109), the addresses of the houses. The following m lines each contains two integers ui and vi (1 ≤ ui, vi ≤ n), representing a road between houses ui and vi. The next line contains integer q (1 ≤ q ≤ 105), the number of queries. The next q lines describe the queries. Each query is in the form: 1. For type 1 queries: \\"1 k x\\" (1 ≤ k ≤ n, |x| ≤ 109) — update the address of the k-th house to x. 2. For type 2 queries: \\"2 y z\\" (1 ≤ y, z ≤ n) — check if there is a direct road between house y and house z. 3. For type 3 queries: \\"3 li ri\\" ( - 109 ≤ li ≤ ri ≤ 109) — find the number of houses with addresses in the range [li, ri]. Output For each type 2 query, print \\"YES\\" if there is a direct road between the two houses, otherwise print \\"NO\\". For each type 3 query, print the number of houses within the given address range. Examples Input 5 4 12 23 34 45 56 1 2 2 3 4 5 1 4 5 1 3 29 2 2 3 3 10 40 3 35 50 2 1 4 Output YES 2 1 NO","solution":"class TownManagementSystem: def __init__(self, n, m, addresses, roads): self.n = n self.addresses = addresses self.adj_list = {i: [] for i in range(1, n+1)} for u, v in roads: self.adj_list[u].append(v) self.adj_list[v].append(u) def update_address(self, k, x): self.addresses[k-1] = x def check_road(self, y, z): return z in self.adj_list[y] def count_houses_in_range(self, li, ri): return sum(1 for address in self.addresses if li <= address <= ri) # Example usage n, m = 5, 4 addresses = [12, 23, 34, 45, 56] roads = [(1, 2), (2, 3), (4, 5), (1, 4)] q = 5 queries = [ (1, 3, 29), (2, 2, 3), (3, 10, 40), (3, 35, 50), (2, 1, 4) ] tm_system = TownManagementSystem(n, m, addresses, roads) outputs = [] for query in queries: if query[0] == 1: tm_system.update_address(query[1], query[2]) elif query[0] == 2: if tm_system.check_road(query[1], query[2]): outputs.append(\\"YES\\") else: outputs.append(\\"NO\\") elif query[0] == 3: outputs.append(tm_system.count_houses_in_range(query[1], query[2])) print(outputs) # [\'YES\', 2, 1, \'NO\']"},{"question":"Given a string s consisting of lowercase letters and an integer n, the task is to determine the number of distinct substrings of length n present in the string. Example 1: Input: s = \\"abcabc\\", n = 3 Output: 3 Explanation: The substrings of length 3 are {\\"abc\\", \\"bca\\", \\"cab\\", \\"abc\\"}. The distinct substrings are {\\"abc\\", \\"bca\\", \\"cab\\"}, thus the output is 3. Example 2: Input: s = \\"aaaaa\\", n = 2 Output: 1 Explanation: The substrings of length 2 are {\\"aa\\", \\"aa\\", \\"aa\\", \\"aa\\"}. The distinct substring is {\\"aa\\"}, thus the output is 1. Example 3: Input: s = \\"abcdef\\", n = 4 Output: 3 Explanation: The substrings of length 4 are {\\"abcd\\", \\"bcde\\", \\"cdef\\"}. The distinct substrings are {\\"abcd\\", \\"bcde\\", \\"cdef\\"}, thus the output is 3. Constraints: - 1 <= s.length <= 1000 - 1 <= n <= 1000 - All characters in s are lowercase English letters.","solution":"def count_distinct_substrings(s, n): Returns the number of distinct substrings of length n in string s. if n > len(s): return 0 substrings = set() for i in range(len(s) - n + 1): substrings.add(s[i:i+n]) return len(substrings)"},{"question":"A person is said to have *Passed* an exam if their average score is at least 50%. Alice participated in an exam and received N scores. Determine whether Alice *Passed* or not. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single integer N followed by a list of N space-separated integers representing the scores Alice received. ------ Output Format ------ For each test case, output on a new line PASSED, if Alice\'s average score is at least 50%. Otherwise, print FAILED. The output is case-insensitive. Thus, the strings PASSED, passed, pASSed, and Passed are all considered the same. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^6 0 ≤ text{Score} ≤ 100 ----- Sample Input 1 ------ 3 5 60 50 70 80 90 3 40 30 20 4 45 55 65 75 ----- Sample Output 1 ------ PASSED FAILED PASSED ----- Explanation 1 ------ Test case 1: Alice\'s average score is (60 + 50 + 70 + 80 + 90) / 5 = 70. Since the average score is greater than 50%, Alice has *Passed*. Test case 2: Alice\'s average score is (40 + 30 + 20) / 3 = 30. Since the average score is less than 50%, Alice has not *Passed*. Test case 3: Alice\'s average score is (45 + 55 + 65 + 75) / 4 = 60. Since the average score is greater than 50%, Alice has *Passed*.","solution":"def has_passed(scores): Determines if the average score is at least 50%. average_score = sum(scores) / len(scores) return average_score >= 50 def check_result_for_cases(test_cases): For each test case, determine if Alice passed or failed. results = [] for scores in test_cases: result = \'PASSED\' if has_passed(scores) else \'FAILED\' results.append(result) return results def main(T, test_cases): results = check_result_for_cases(test_cases) return results"},{"question":"Garima has a string of lowercase English letters. She wants to find out the sum of frequencies of characters within all substrings of a given length K. Given a string S of length N and an integer K, find the sum of frequencies of characters for each substring of length K. For example, if the string is \\"abcabc\\" and K is 3, the substrings of length 3 are \\"abc\\", \\"bca\\", \\"cab\\", and \\"abc\\". The frequency sum for \\"abc\\" is 1 (for \'a\') + 1 (for \'b\') + 1 (for \'c\') = 3. The frequency sum for \\"bca\\" is the same, and so on. Input: The first line contains an integer N and an integer K. The second line contains a string S of length N. Output: Output N-K+1 integers where the i-th integer corresponds to the sum of frequencies of characters for the i-th substring of S of length K. Constraints: 1 ≤ K ≤ N ≤ 10^5 S consists of lowercase English letters. SAMPLE INPUT 6 3 abcabc SAMPLE OUTPUT 3 3 3 3 Explanation: The substrings of length 3 are \\"abc\\", \\"bca\\", \\"cab\\", and \\"abc\\", and each have characters that appear exactly once within themselves. Therefore, the frequency sum for each is 3.","solution":"def sum_of_frequencies(N, K, S): from collections import Counter # Create a list to store the result result = [] # Iterate through the substrings of length K for i in range(N - K + 1): substring = S[i:i+K] counter = Counter(substring) frequency_sum = sum(counter.values()) result.append(frequency_sum) return result"},{"question":"You are given an integer array of size \'n\' with elements representing heights of the buildings. The goal is to find two buildings such that the water trapped between them is maximized. The trapped water between two buildings is determined by the height of the shorter building multiplied by the horizontal distance (number of buildings) between them. The height of the buildings is represented by an integer array `heights` where `heights[i]` is the height of the `i-th` building. Write a function `maxWaterTrapped` that takes this array and returns the maximum amount of water that can be trapped between two buildings. Input - An integer `n` (2 ≤ n ≤ 100000), the number of buildings. - An array `heights` of `n` integers (1 ≤ heights[i] ≤ 10^6) - heights of the buildings. Output - A single integer representing the maximum amount of water that can be trapped between two buildings. Examples Input ``` 6 1 8 6 2 5 4 8 3 7 ``` Output ``` 49 ``` Explanation Here the maximum water trapped will be between the building heights 8 (index 1) and 7 (index 8) giving us `min(8, 7) * (8 - 1) = 49` Input ``` 9 1 1 1 1 1 1 1 1 1 ``` Output ``` 8 ``` Explanation Here the maximum water trapped will be between the building heights 1 (index 0) and 1 (index 8) giving us `min(1, 1) * (8 - 0) = 8` Note Ensure that the solution is efficient to handle the upper limits of the constraints.","solution":"def maxWaterTrapped(n, heights): Returns the maximum amount of water that can be trapped between two buildings. left = 0 right = n - 1 max_trapped = 0 while left < right: height = min(heights[left], heights[right]) width = right - left max_trapped = max(max_trapped, height * width) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_trapped"},{"question":"You are given a string s consisting of lowercase English letters and digits. A string is considered harmonious if the frequency of each character in the string is the same. Return true if the string is harmonious, otherwise, return false. Example 1: Input: s = \\"aabb\\" Output: true Explanation: The frequency of \'a\' is 2 and the frequency of \'b\' is 2, making the string harmonious. Example 2: Input: s = \\"aabbcc\\" Output: true Explanation: The frequency of \'a\', \'b\', and \'c\' is 2, making the string harmonious. Example 3: Input: s = \\"aabc\\" Output: false Explanation: The frequency of \'a\' is 2, \'b\' is 1, and \'c\' is 1, making the string not harmonious. Example 4: Input: s = \\"abcd\\" Output: false Explanation: The frequency of \'a\', \'b\', \'c\', and \'d\' is 1, making the string harmonious. Constraints: 1 <= s.length <= 100 s consists of lowercase English letters and digits.","solution":"from collections import Counter def is_harmonious(s): Returns true if the string s is harmonious, otherwise returns false. A string is harmonious if the frequency of each character in the string is the same. if not s: return True frequencies = Counter(s).values() return len(set(frequencies)) == 1"},{"question":"A group of friends is organizing a treasure hunt challenge in a forest. The forest is represented as a grid of N rows and M columns. Each cell in the grid can either be a passable cell denoted by \'.\' or an impassable cell (an obstacle) denoted by \'#\'. The start and end points of the treasure hunt are given as coordinates (sx, sy) and (ex, ey) respectively. Participants can move from one cell to any of the four adjacent cells (up, down, left, right), provided the cell is within the grid and not an obstacle. The goal is to determine if there is a feasible path from the start point to the end point and to find the minimum number of steps required to reach the end point if a path exists. # Input: - The first line contains two integers N and M, the number of rows and columns in the grid. - Each of the next N lines contains M characters (either \'.\' or \'#\'), representing the forest grid. - The last line contains four integers sx, sy, ex, and ey, representing the coordinates of the start point and the end point. # Output: - If there is a path from the start point to the end point, print the minimum number of steps required. - If there is no such path, print \\"Trapped!\\". # Constraints: - 1 ≤ N, M ≤ 100 - 0 ≤ sx, sy, ex, ey < 100 - The start (sx, sy) and end (ex, ey) points will always be on passable cells (\'.\'). # Sample Input: ``` 5 5 ..... .#. ..... .#. ..... 0 0 4 4 ``` # Sample Output: ``` 8 ``` # Explanation: In the given grid, there are several obstacles (\'#\'), but there exists a path from the start point (0,0) to the end point (4,4). The minimum number of steps required to reach the destination is 8. ```plaintext 0 0 -> 0 1 -> 0 2 -> 0 3 -> 0 4 -> 1 4 -> 2 4 -> 3 4 -> 4 4 ```","solution":"from collections import deque def treasure_hunt(N, M, forest, sx, sy, ex, ey): Returns the minimum number of steps required to reach the end point from the start point. If no such path exists, returns \\"Trapped!\\". # Directions for movement in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue for BFS and visited set queue = deque([(sx, sy, 0)]) # (current x, current y, steps taken) visited = set() visited.add((sx, sy)) while queue: x, y, steps = queue.popleft() # If reached the end point if (x, y) == (ex, ey): return steps # Explore the neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and forest[nx][ny] == \'.\': queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) # If no path is found return \\"Trapped!\\""},{"question":"Given a binary search tree (BST), write a function to find the second smallest element in the BST. Ensure your solution has appropriate time and space complexity. Example 1: Input: 4 / 2 6 / 1 3 Output: 2 Example 2: Input: 5 / 3 8 / 2 4 / 1 Output: 2","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_second_smallest(root): def inorder_traversal(node): Helper function to perform inorder traversal of the tree if node is None: return [] return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) inorder_elements = inorder_traversal(root) if len(inorder_elements) < 2: return None else: return inorder_elements[1]"},{"question":"You are given two integer arrays nums1 and nums2 sorted in non-decreasing order and two integers m and n, representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order. Note: - You should not return a new array, but instead modify nums1 in-place so that it contains the merged sorted array. Example 1: Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Explanation: The first three elements of nums1 represent the first array, and the first three elements of nums2 represent the second array. Merge both arrays into nums1 so that it becomes [1,2,2,3,5,6]. Example 2: Input: nums1 = [1], m = 1, nums2 = [], n = 0 Output: [1] Explanation: The first array already contains one element and the second array is empty. So nums1 remains [1]. Example 3: Input: nums1 = [0], m = 0, nums2 = [1], n = 1 Output: [1] Explanation: Since m = 0, nums1 has no elements. The final merged array is just nums2. Constraints: * 0 <= m, n <= 200 * 1 <= m + n <= 200 * nums1.length == m + n * nums2.length == n * -10^9 <= nums1[i], nums2[i] <= 10^9","solution":"def merge(nums1, m, nums2, n): Merges two sorted integer arrays nums1 and nums2 into a single sorted array in nums1. # Set pointers for nums1 and nums2 p1 = m - 1 p2 = n - 1 # Set pointer for nums1\'s end p = m + n - 1 # While there are still elements to compare while p1 >= 0 and p2 >= 0: if nums1[p1] > nums2[p2]: nums1[p] = nums1[p1] p1 -= 1 else: nums1[p] = nums2[p2] p2 -= 1 p -= 1 # If there are still elements to add from nums2 while p2 >= 0: nums1[p] = nums2[p2] p2 -= 1 p -= 1"},{"question":"**Problem: Longest Balanced Parentheses Substring** Given a string containing just the characters \'(\' and \')\', find the length of the longest balanced parentheses substring. A balanced parentheses substring is one that has an equal number of opening and closing parentheses in the correct order. # Input: - The first line contains an integer T (the number of test cases). - The following T lines each contain a single string that consists of \'(\' and \')\' characters. # Output: For each test case, output the length of the longest balanced parentheses substring. # Constraints: - 1 ≤ T ≤ 10 - 1 ≤ Length of the string ≤ 10^5 # Example: Input: ``` 3 (())) )((())() ()(()) ``` Output: ``` 4 6 6 ``` # Explanation: - In the first case, the longest balanced substring is \\"(()))\\" which is of length 4. - In the second case, the longest balanced substring is \\"((()))\\" which is of length 6. - In the third case, the whole string \\"()(())\\" is already balanced, so the length is 6. Notes: - You need to ensure your solution is efficient enough to handle the given constraints, especially the length of the string up to 10^5.","solution":"def longest_balanced_parentheses(s): Find the length of the longest balanced parentheses substring. max_len = 0 stack = [-1] for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_len = max(max_len, i - stack[-1]) return max_len def process_test_cases(T, cases): results = [] for i in range(T): results.append(longest_balanced_parentheses(cases[i])) return results"},{"question":"The National Science Fair organizers have decided to come up with a competitive coding challenge for students. Each group of students is given the task of managing inventories and fulfillment of order requests based on specific criteria. You have been given the inventory of a warehouse which contains M items, and each item belongs to one of the Q different product categories. Every order request demands a specified quantity of a specific product category. The goal is to fulfill each order request for the product category either fully or partially. An order request is fulfilled fully if it is met exactly with the quantity demanded, and partially if it is met with any quantity less than demanded (but greater than zero). You need to write a program that takes the inventory and order requests as input and determines the maximum number of order requests that can be fully or partially fulfilled. Input - The first line contains two integers M and Q, indicating the number of items in the inventory and the number of different product categories. - The second line contains M integers where the i-th integer represents the product category of the i-th item. - The third line contains an integer R, indicating the number of order requests. - Each of the next R lines contains two integers Ci and Qi, where Ci is the product category and Qi is the quantity demanded for that order request. Output - Output a single integer representing the maximum number of order requests that can be fully or partially fulfilled. Example Input 10 3 1 2 1 3 2 1 3 2 1 1 4 1 3 2 2 3 1 1 5 Output 4 Explanation - There are 10 items in the inventory, with four categories (1, 3, 1, 3, 2, 1, 3, 2, 1, 1). - There are four order requests. - First request demands 3 items of category 1, and it can be fully fulfilled. - Second request demands 2 items of category 2, and it can be fully fulfilled. - Third request demands 1 item of category 3, and it can be fully fulfilled. - Fourth request demands 5 items of category 1, only 4 items are available, so it can be partially fulfilled. - All 4 order requests can either be fully or partially fulfilled.","solution":"def max_fulfilled_orders(M, Q, item_categories, R, orders): from collections import Counter # Count the inventory per category inventory = Counter(item_categories) fulfilled_orders = 0 for category, quantity in orders: available = inventory[category] if available > 0: fulfilled_orders += 1 if available >= quantity: inventory[category] -= quantity else: inventory[category] = 0 return fulfilled_orders"},{"question":"John and Mary are playing a game called the \\"Balanced Array\\" game. The game is played with an array of integers. The rules of the game are: - The game starts with an array of n integers. - John and Mary take turns alternately, starting with John. - On each turn, a player must choose two adjacent elements in the array and either decrease both by 1 or increase both by 1. - The player who cannot make a move loses the game. Both players play optimally. John wants to know if he can guarantee a win if he plays optimally. -----Input----- - The first line contains a single integer n (1 ≤ n ≤ 10^5) - the size of the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) - the elements of the array. -----Output----- Print a single line containing \\"YES\\" (without quotes) if John can guarantee a win, otherwise print \\"NO\\" (without quotes). -----Examples----- Input 3 1 3 5 Output NO Input 4 2 2 2 2 Output YES -----Note----- In the first example, the optimal moves would lead to a situation where no player can make a move, and since John starts, he would lose. In the second example, John can always make valid moves by choosing two adjacent 2\'s.","solution":"def can_john_guarantee_win(n, array): Determine if John can guarantee a win in the Balanced Array game. Parameters: n (int): Size of the array. array (list of int): Array of integers. Returns: str: \\"YES\\" if John can guarantee a win, \\"NO\\" otherwise. # Count the number of odd integers in the array odd_count = sum(1 for x in array if x % 2 != 0) # John can guarantee a win if there are an even number of odd integers return \\"YES\\" if odd_count % 2 == 0 else \\"NO\\""},{"question":"Given an array of integers, determine whether every element appears exactly twice. If so, return \\"YES\\", otherwise return \\"NO\\". -----Input----- The first line of input contains a single integer T denoting the number of test cases. Each test case consists of two lines: - The first line contains an integer N representing the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. -----Output----- For each test case, output a single line containing \\"YES\\" if every element appears exactly twice, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 1000 - 2 ≤ N ≤ 10^5 - The elements of the array will be in the range of -10^9 to 10^9 -----Example----- Input: 2 4 1 2 2 1 5 1 2 2 1 3 Output: YES NO -----Explanation----- First Example: Each element 1 and 2 appears exactly twice in the array. Second Example: Element 3 appears only once, hence the answer is \\"NO\\".","solution":"def check_element_pairs(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] element_count = {} for num in arr: if num in element_count: element_count[num] += 1 else: element_count[num] = 1 if all(count == 2 for count in element_count.values()): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Martha loves collecting gems. She has recently got hold of a treasure map that indicates positions of several hidden gems along a riverbank. There are `n` gems at distinct coordinates described by integers x1, x2, ..., xn. Each coordinate represents the distance of a gem from the starting point at 0 kilometers. Martha wants to collect all the gems in such a way that she starts at the starting point (0 kilometers), visits each gem exactly once, and then returns to the starting point. She can visit the gems in any order but must return to the starting point after collecting all gems. The distance between two gems located at coordinates xi and xj is |xi - xj| kilometers. Martha needs your help to find the minimal distance she must travel to collect all the gems and return to the starting point. Input - The first line contains integer n (2 ≤ n ≤ 100). - The next line contains n distinct integers x1, x2, ..., xn (1 ≤ xi ≤ 1000). Output - Output a single integer representing the minimal distance Martha needs to travel to collect all the gems and return to the starting point. Example Input 4 1 3 6 2 Output 12 Note In this example, one of the optimal ways to minimize the travel distance is to visit the gems in the order [1, 2, 3, 6]. The total travel distance is calculated as follows: |1 - 0| + |2 - 1| + |3 - 2| + |6 - 3| + |6 - 0| = 1 + 1 + 1 + 3 + 6 = 12.","solution":"def minimal_distance(n, gem_coordinates): Returns the minimal distance Martha must travel to collect all gems and return to the starting point. # Sort the gem coordinates gem_coordinates.sort() # Initialize total distance total_distance = 0 # Traverse from 0 to the smallest gem, between gems, and then return to 0 total_distance += abs(gem_coordinates[0] - 0) # from starting point to the first gem for i in range(1, n): total_distance += abs(gem_coordinates[i] - gem_coordinates[i-1]) # between consecutive gems total_distance += abs(gem_coordinates[-1] - 0) # return from the last gem to the starting point return total_distance"},{"question":"A supermarket has an inventory system where each product has a unique identifier and a price. You are given the details of `N` products, each with a product ID and price. After storing these details, the supermarket needs a functionality to query the price of a product by its ID multiple times. Given `N` products and `Q` queries, where each query consists of a product ID, your task is to return the price of the queried product. ------ Input Format ------ - The first line contains a single integer `N`, the number of products. - The next `N` lines each contain a product ID (string) and a price (integer), space-separated. - The next line contains a single integer `Q`, the number of queries. - The following `Q` lines each contain a product ID (string). ------ Output Format ------ For each query, output the price of the product with the given product ID on a new line. If a queried product ID does not exist in the inventory, output \\"Product not found\\". ------ Constraints ------ 1 ≤ N, Q ≤ 10^3 1 ≤ text{length of product ID} ≤ 20 1 ≤ text{price} ≤ 10^6 ----- Sample Input 1 ------ 3 prod1 100 prod2 200 prod3 300 3 prod1 prod4 prod3 ----- Sample Output 1 ------ 100 Product not found 300 ----- Explanation 1 ------ Query 1: The price of `prod1` is 100. Query 2: `prod4` does not exist in the inventory, so the output is \\"Product not found\\". Query 3: The price of `prod3` is 300.","solution":"def get_product_prices(N, products, Q, queries): Returns the price of products based on provided queries. Args: - N (int): The number of products. - products (List[Tuple[str, int]]): List of tuples where each tuple contains a product ID and its price. - Q (int): The number of queries. - queries (List[str]): List of product IDs to query for their prices. Returns: - List[str]: List of results for each query; either the price of the product or \\"Product not found\\". product_dict = {product_id: price for product_id, price in products} result = [] for query in queries: if query in product_dict: result.append(str(product_dict[query])) else: result.append(\\"Product not found\\") return result"},{"question":"Sarah has a collection of beautiful paintings and she wants to display them in a gallery. However, the gallery has some restrictions on how the paintings should be arranged. The gallery consists of a single long wall on which the paintings will be hung in a row. Each painting has a certain width, and there needs to be specific gaps between certain pairs of paintings to create a proper alignment and spacing according to the gallery’s aesthetic guidelines. Your task is to determine if it is possible to display all the paintings on the wall given these restrictions. Here’s the detailed description of the problem: -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains two integers w (1 le w le 10^9) and n (1 le n le 10^5) — the total width available on the gallery wall and the number of paintings. The second line of each test case contains n integers p_1, p_2, ldots, p_n (1 le p_i le 10^6) — the widths of the paintings. The third line of each test case contains n-1 integers g_1, g_2, ldots, g_{n-1} (0 le g_i le 10^6) — the gaps between each pair of consecutive paintings. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, output \\"YES\\" if it is possible to hang all the paintings on the wall with the given gaps, otherwise output \\"NO\\". -----Examples----- Input 2 100 3 30 30 30 5 5 50 2 20 30 10 Output YES NO -----Note----- In the first test case, the sum of the widths of the three paintings is 30 + 30 + 30 = 90 and the sum of the gaps is 5 + 5 = 10, thus the total width needed is 90 + 10 = 100 which fits exactly on the wall. In the second test case, the sum of the widths of the paintings is 20 + 30 = 50 and the sum of the gap is 10, thus the total width needed is 50 + 10 = 60, which is greater than the available wall width of 50. Therefore, it is not possible to hang all paintings on the wall.","solution":"def can_display_paintings(t, test_cases): results = [] for i in range(t): w, n = test_cases[i][0] painting_widths = test_cases[i][1] gaps = test_cases[i][2] total_paintings_width = sum(painting_widths) total_gaps_width = sum(gaps) total_needed_width = total_paintings_width + total_gaps_width if total_needed_width <= w: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an undirected graph with `n` nodes and `m` edges, each edge has a weight. You are to find the smallest weight of a path from node `1` to node `n`. If no such path exists, return `-1`. The graph might contain cycles. Input: - The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of nodes and edges in the graph. - Each of the next `m` lines contains three integers `u`, `v`, `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — indicating that there is an edge between nodes `u` and `v` with weight `w`. Output: - Print the smallest weight of a path from node `1` to node `n`. If there is no path, print `-1`. Examples: Input: 4 4 1 2 5 2 3 10 1 3 20 3 4 1 Output: 16 Input: 3 3 1 2 1 2 3 2 3 1 4 Output: 3 Note: In the first example, the minimum path weight from node `1` to node `4` is 16 (1 -> 2 -> 3 -> 4).","solution":"import heapq def dijkstra(n, edges): def build_graph(n, edges): graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) return graph graph = build_graph(n, edges) pq = [(0, 1)] # (distance, node) dist = {i: float(\'inf\') for i in range(1, n+1)} dist[1] = 0 visited = set() while pq: current_dist, node = heapq.heappop(pq) if node in visited: continue visited.add(node) for neighbor, weight in graph[node]: if neighbor not in visited: new_dist = current_dist + weight if new_dist < dist[neighbor]: dist[neighbor] = new_dist heapq.heappush(pq, (new_dist, neighbor)) return dist[n] if dist[n] != float(\'inf\') else -1 def find_shortest_path(n, m, edges): return dijkstra(n, edges)"},{"question":"You are given a linked list of N nodes containing non-negative integers. Your task is to find the intersection point of two singly linked lists, that is, the first node at which both lists intersect. If the linked lists do not intersect, return -1. Example 1: Input: List 1: 3 -> 6 -> 15 -> 30 -> NULL List 2: 10 -> 15 -> 30 -> NULL Output: 15 Explanation: The two linked lists intersect at node with data = 15. Example 2: Input: List 1: 9 -> 8 -> 7 -> NULL List 2: 6 -> 5 -> 4 -> NULL Output: -1 Explanation: The two lists have no intersections, so the answer is -1. Your Task: You do not need to read input or print anything. Your task is to complete the function `getIntersectionNode()` which takes the heads of both the singly linked lists as input and returns the data of the intersection point. If there is no intersection, return -1. Expected Time Complexity: O(N + M) where N and M are the lengths of the two linked lists. Expected Auxiliary Space: O(1) Constraints: 1 <= N, M <= 10^5 1 <= Node.data <= 10^9 Linked lists may contain duplicate elements.","solution":"class ListNode: def __init__(self, data=0, next=None): self.data = data self.next = next def getIntersectionNode(head1, head2): Returns the intersection node data of two linked lists, or -1 if there is no intersection. def get_length(head): length = 0 current = head while current: length += 1 current = current.next return length # Get lengths of both linked lists length1 = get_length(head1) length2 = get_length(head2) # Align both pointers for the longer to start with the same relative position current1 = head1 current2 = head2 if length1 > length2: for _ in range(length1 - length2): current1 = current1.next else: for _ in range(length2 - length1): current2 = current2.next # Move both pointers until they meet or reach the end while current1 and current2: if current1 == current2: return current1.data current1 = current1.next current2 = current2.next return -1"},{"question":"Given a list of integers, write a function to determine whether it can form an arithmetic progression after rearranging the integers. An arithmetic progression is a sequence of numbers such that the difference between consecutive terms is constant. # Function Signature ```python def can_form_arithmetic_progression(arr: List[int]) -> bool: ``` # Input - A list of `n` integers (2 ≤ `n` ≤ 10^4). # Output - Return `True` if the given array can be rearranged to form an arithmetic progression, `False` otherwise. # Example ```python print(can_form_arithmetic_progression([3, 5, 1])) # Output: True print(can_form_arithmetic_progression([1, 2, 4])) # Output: False ``` # Explanation In the first example, the list [3, 5, 1] can be rearranged to form an arithmetic progression [1, 3, 5] where the common difference is 2. In the second example, no rearrangement of the list [1, 2, 4] can satisfy the condition of having consistent differences between consecutive terms. # Constraints - You must not use any built-in functions for arithmetic progression checks directly. - The solution must run efficiently for the given input constraints.","solution":"from typing import List def can_form_arithmetic_progression(arr: List[int]) -> bool: Determine if the given array can be rearranged to form an arithmetic progression. Args: arr (List[int]): A list of integers. Returns: bool: True if the array can be rearranged to form an arithmetic progression, False otherwise. if len(arr) < 2: return False arr.sort() diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i - 1] != diff: return False return True"},{"question":"You are given two sequences of positive integers. Your task is to determine if one sequence is a subsequence of the other. A sequence A is a subsequence of a sequence B if A can be derived from B by deleting some or no elements without changing the order of the remaining elements. Consider the following constraints while creating your program. -----Input----- The input consists of three lines: - The first line contains an integer n (1 ≤ n ≤ 100), the length of the first sequence. - The second line contains n positive integers, the elements of the first sequence. - The third line contains m positive integers, the elements of the second sequence. -----Output----- Output \\"YES\\" if the first sequence is a subsequence of the second sequence, otherwise output \\"NO\\". -----Example----- Input 3 1 3 5 5 1 2 3 4 5 Output YES Input 4 1 2 3 4 3 1 4 2 Output NO Input 4 2 3 4 5 7 5 6 7 1 2 3 4 Output NO","solution":"def is_subsequence(n, seq1, m, seq2): Determines if seq1 is a subsequence of seq2. Args: n (int): Length of the first sequence. seq1 (list): The first sequence of positive integers. m (int): Length of the second sequence. seq2 (list): The second sequence of positive integers. Returns: str: \\"YES\\" if seq1 is a subsequence of seq2, otherwise \\"NO\\". i = 0 # Pointer for seq1 j = 0 # Pointer for seq2 while i < n and j < m: if seq1[i] == seq2[j]: i += 1 # Move pointer of seq1 j += 1 # Always move pointer of seq2 # If we have traversed all elements in seq1, it\'s a subsequence return \\"YES\\" if i == n else \\"NO\\""},{"question":"Alyssa loves painting and geometry. She has a canvas represented as a 2D grid with dimensions `n x m`, where each cell can be painted from a set of `k` possible colors. Each color is represented by a distinct integer from `1` to `k`. Alyssa strives to achieve a beautiful pattern on her canvas, and she does so by following certain painting rules. To make the process interesting, Alyssa has come up with a rule for each cell painting: A cell (i, j) can be painted with color x only if the color x has not been used in the `p` cells directly above it (if they exist), the `q` cells directly to its left (if they exist), and the `r` cells diagonally top-left to it (if they exist). Your task is to help Alyssa determine if there exists a way to paint the entire canvas following the given rules. If possible, provide a possible pattern of colors on the canvas. Otherwise, state that it is impossible to achieve such a pattern. -----Input----- The first line contains three integers `n`, `m`, and `k` — the dimensions of the canvas and the number of colors (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 10). The second line contains three integers `p`, `q`, and `r` — the constraints as described above (0 ≤ p, q, r ≤ 100). -----Output----- If there is a way to paint the canvas, print \\"YES\\" and then print the grid pattern row by row, each row on a new line with space-separated integers representing the colors of the respective cells. If there is no such way, print \\"NO\\" (without quotes). Do not print anything else. -----Examples----- Input 3 3 3 2 2 1 Output YES 1 2 3 2 3 1 3 1 2 Input 3 3 2 2 2 2 Output NO","solution":"def can_color(canvas, i, j, n, m, k, p, q, r): used_colors = set() # Check colors directly above within p range for x in range(1, p+1): if i-x >= 0: used_colors.add(canvas[i-x][j]) # Check colors directly to the left within q range for y in range(1, q+1): if j-y >= 0: used_colors.add(canvas[i][j-y]) # Check colors diagonally top-left within r range for d in range(1, r+1): if i-d >= 0 and j-d >= 0: used_colors.add(canvas[i-d][j-d]) # Return available colors not in used_colors return set(range(1, k+1)) - used_colors def paint_canvas(n, m, k, p, q, r): canvas = [[0] * m for _ in range(n)] def backtrack(i, j): if i == n: return True next_i, next_j = (i, j+1) if j+1 < m else (i+1, 0) possible_colors = can_color(canvas, i, j, n, m, k, p, q, r) for color in possible_colors: canvas[i][j] = color if backtrack(next_i, next_j): return True canvas[i][j] = 0 return False if backtrack(0, 0): return \\"YES\\", canvas else: return \\"NO\\", [] def format_canvas(canvas): return \\"n\\".join(\\" \\".join(map(str, row)) for row in canvas) def main(n, m, k, p, q, r): status, canvas = paint_canvas(n, m, k, p, q, r) if status == \\"YES\\": print(\\"YES\\") print(format_canvas(canvas)) else: print(\\"NO\\")"},{"question":"In a small town called CodersVille, streets are uniquely numbered from 1 to 100. Each street has a certain number of houses, and residents have a peculiar habit of organizing competitions based on the sum of the digits of their street number. They believe houses on streets where the sum of the digits of the street number is a prime number lead to stronger community bonds. As a result, these streets are considered \\"prime-friendly\\" streets. Write a function to determine whether a given street number falls under the \\"prime-friendly\\" category or not. Function Description Complete the function isPrimeFriendlyStreet in the editor below. isPrimeFriendlyStreet has the following parameter(s): int streetNumber: the street number to check Returns bool: true if the street number is \\"prime-friendly\\", otherwise false Input Format The street number - an integer from 1 to 100 (inclusive) to be checked. Constraints 1leqtext{streetNumber}leq100 Sample Input 0 23 Sample Output 0 true Sample Input 1 40 Sample Output 1 false Explanation 0 For streetNumber=23, the sum of digits is 2+3=5, which is a prime number. Hence, it is a \\"prime-friendly\\" street. For streetNumber=40, the sum of digits is 4+0=4, which is not a prime number. Therefore, it is not a \\"prime-friendly\\" street.","solution":"def isPrimeFriendlyStreet(streetNumber): Returns True if the street number is \\"prime-friendly\\", otherwise False. A street number is \\"prime-friendly\\" if the sum of its digits is a prime number. def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True # Sum of the digits of the street number digit_sum = sum(int(digit) for digit in str(streetNumber)) return is_prime(digit_sum)"},{"question":"Given a string s and a string t, return the minimum window in s which will contain all the characters in t. If there is no such window in s that covers all characters in t, return the empty string \\"\\". Note that if there is such a window, it is guaranteed that there will always be only one unique minimum window in s. Example: Input: s = \\"ADOBECODEBANC\\", t = \\"ABC\\" Output: \\"BANC\\" Explanation: The minimum window is \\"BANC\\" which contains \'A\', \'B\', and \'C\' from string t. Input: s = \\"a\\", t = \\"a\\" Output: \\"a\\" Explanation: The minimum window is \\"a\\" which contains \'a\' from string t. Note: - You may assume that the characters appear only in the ASCII set.","solution":"def min_window(s, t): from collections import Counter if not t or not s: return \\"\\" dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = {} ans = float(\\"inf\\"), None, None while r < len(s): character = s[r] window_counts[character] = window_counts.get(character, 0) + 1 if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 while l <= r and formed == required: character = s[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1]: ans[2] + 1]"},{"question":"You have been assigned a task to calculate the tip amount you should give to a waiter based on the total bill amount. The tip should be calculated based on the following guidelines: - If the bill amount is less than 50: tip 20% - If the bill amount is between 50 and 200 (inclusive): tip 15% - If the bill amount is more than 200: tip 10% Given the bill amount, determine the total amount (bill + tip) rounded down to the nearest whole number. Input The first line contains a single integer T, the number of test cases. Each of the next T lines contains a single integer B, which is the bill amount in dollars. Output For each test case, output a single integer representing the total amount (bill + tip) rounded down. SAMPLE INPUT 4 30 75 250 100 SAMPLE OUTPUT 36 86 275 115","solution":"import math def calculate_total_with_tip(t, bills): Given a list of bill amounts, calculate the total amount (bill + tip) rounded down to the nearest whole number. results = [] for bill in bills: if bill < 50: tip = 0.2 * bill elif bill <= 200: tip = 0.15 * bill else: tip = 0.1 * bill total = bill + tip results.append(math.floor(total)) return results"},{"question":"The inter-school coding competition is around the corner, and the head programming coach is trying to figure out the best team formation strategy. The competition requires teams of exactly three students. Each team will compete in a series of coding challenges and their collective performance will determine their success. The combined strength of a team is measured by adding up the skill levels of the three students. The coach wants to form the strongest team possible from the available students. The coach has a list of student skill levels and wants you to determine the maximum possible team strength that can be achieved by selecting any three students. Input Format: - The first line contains an integer n, the number of students. - The second line contains n integers denoting the skill levels of the students. Output Format: - Output a single integer, the maximum combined strength of any team of three students. Constraints: 1 ≤ n ≤ 1000 1 ≤ skill levels ≤ 10000 SAMPLE INPUT 5 10 20 30 40 50 SAMPLE OUTPUT 120 Explanation Out of the five students, the three with the highest skill levels are 30, 40, and 50. Combining their skill levels gives a total strength of 120. Thus the strongest possible team has a combined strength of 120.","solution":"def max_team_strength(n, skill_levels): Returns the maximum combined strength of any team of three students. Args: n: int, the number of students skill_levels: list of int, the skill levels of the students Returns: int, the maximum combined strength of any team of three students # Sort the skill levels in descending order skill_levels.sort(reverse=True) # The three highest skill levels will give the maximum possible team strength return skill_levels[0] + skill_levels[1] + skill_levels[2]"},{"question":"------ A company is scheduling interviews for prospective applicants. They have a queue of applicants who need to be interviewed by multiple interviewers. Each interviewer has different start and end times for when they are available to conduct interviews. Given the schedule of start and end times of the interviewers and the list of appointment requests from the applicants, determine if it is possible to schedule all the requested appointments. Each applicant appointment request contains a desired start time and duration. The appointment for an applicant can only start at the exact start time specified in their request and cannot be split across multiple interviewers. Write a program that reads the number of interviewers, the number of applicants, the availability of each interviewer, and the appointment request of each applicant, and prints \\"YES\\" if it is possible to schedule all applicants, otherwise \\"NO\\". ------ Input ------ The first line of input contains two space-separated integers I and A representing the number of interviewers and the number of applicants, respectively. The next I lines each contain two space-separated integers representing the start and end times of availability for each interviewer. The following A lines each contain two space-separated integers representing the start time and duration of each applicant\'s request. ------ Output ------ Output a single line containing \\"YES\\" if it is possible to schedule all applicants, otherwise \\"NO\\". ------ Constraints ------ 1 ≤ I, A ≤ 10^{3} 0 ≤ start, end, duration < 1440 (all times are in minutes from midnight) ------ Example Input 1 ------ 3 2 60 120 180 240 300 360 90 30 200 20 ------ Example Output 1 ------ YES ------ Explanation 1 ------ The first applicant can be matched with the first interviewer and the second applicant with the second interviewer. ------ Example Input 2 ------ 3 2 60 120 180 240 300 360 170 30 200 20 ------ Example Output 2 ------ NO ------ Explanation 2 ------ The first applicant requests an appointment starting at 170 with a duration of 30 minutes, but no single interviewer is available within this period. ------ Example Input 3 ------ 4 3 60 180 200 300 400 500 600 700 150 30 260 20 620 60 ------ Example Output 3 ------ YES ------ Explanation 3 ------ Each applicant\'s requested appointment can be matched with an interviewer who is available during the requested times.","solution":"def can_schedule_all_appointments(I, A, interviewers, applicants): # Convert interviewer availability into intervals available_intervals = [] for i in range(I): start, end = interviewers[i] available_intervals.append((start, end)) # Sort available intervals by start time available_intervals.sort() for start_time, duration in applicants: needed_end_time = start_time + duration can_schedule = False for index, (int_start, int_end) in enumerate(available_intervals): if int_start <= start_time < int_end and needed_end_time <= int_end: # Remove this interval to ensure it is not used again available_intervals.pop(index) can_schedule = True break if not can_schedule: return \\"NO\\" return \\"YES\\""},{"question":"> Given a list of integers, return a new list such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at `i`. For example, if the input is `[1, 2, 3, 4, 5]`, the expected output would be `[120, 60, 40, 30, 24]`. If the input is `[3, 2, 1]`, the expected output would be `[2, 3, 6]`. Requirements - You are not allowed to use division in your solution. - You must achieve the solution in linear time, i.e., O(n). Examples ```python product_except_self([1, 2, 3, 4, 5]) # => [120, 60, 40, 30, 24] product_except_self([3, 2, 1]) # => [2, 3, 6] product_except_self([2, 3, 4, 5]) # => [60, 40, 30, 24] ```","solution":"def product_except_self(nums): Given a list of integers, return a new list such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at `i`. This function achieves the solution in linear time without using division. length = len(nums) # Initialize the answer array to store the result answer = [1] * length # Calculate the product of all the elements to the left of each index left_product = 1 for i in range(length): answer[i] = left_product left_product *= nums[i] # Calculate the product of all the elements to the right of each index right_product = 1 for i in range(length - 1, -1, -1): answer[i] *= right_product right_product *= nums[i] return answer"},{"question":"Ratan has a software system that consists of N servers connected by M unidirectional communication links. Each link allows data to be sent from one server to another with a delay time of D_i units. Unfortunately, some of these links may experience delays, potentially impacting the overall system performance. Ratan needs to calculate the shortest possible delay to send data from a given server S (source) to another server T (target), taking into consideration that if any link delay exceeds a certain threshold K, it should not be used. -----Constraints----- - 2 ≤ N ≤ 100 - 1 ≤ M ≤ N × (N - 1) - 1 ≤ D_i ≤ 1000 - 1 ≤ S, T ≤ N - S ≠ T -----Input----- Input is given from Standard Input in the following format: N M S T K A_1 B_1 D_1 : A_M B_M D_M -----Output----- Print the shortest possible delay to send data from server S to server T, considering the threshold for link delays. If it is not possible to reach server T from server S without exceeding the delay threshold on any link, print -1. -----Sample Input----- 4 5 1 4 3 1 2 2 2 3 1 3 4 2 1 3 5 2 4 4 -----Sample Output----- 5 For instance, starting at server 1, the path 1 -> 2 -> 3 -> 4 has a total delay of 2 + 1 + 2 = 5, while using higher delay links such as 1 -> 3 and 2 -> 4 would not be an optimal or acceptable path due to the given threshold contract of 3.","solution":"import heapq def shortest_delay(N, M, S, T, K, links): graph = {i: [] for i in range(1, N + 1)} for A, B, D in links: if D <= K: graph[A].append((D, B)) # Dijkstra\'s algorithm to find the shortest path from S to T pq = [(0, S)] dist = {i: float(\'inf\') for i in range(1, N + 1)} dist[S] = 0 while pq: current_delay, node = heapq.heappop(pq) if node == T: return current_delay for delay, neighbor in graph[node]: new_delay = current_delay + delay if new_delay < dist[neighbor]: dist[neighbor] = new_delay heapq.heappush(pq, (new_delay, neighbor)) return -1 def parse_input(): import sys input = sys.stdin.read data = input().splitlines() N, M, S, T, K = map(int, data[0].split()) links = [tuple(map(int, line.split())) for line in data[1:]] return N, M, S, T, K, links if __name__ == \\"__main__\\": N, M, S, T, K, links = parse_input() result = shortest_delay(N, M, S, T, K, links) print(result)"},{"question":"You are given a list of positive integer weights representing different coins. Your task is to determine all the possible unique sums that can be made using any subset of the given coins. Note that a subset can be empty as well. For example, given the weights `[1, 2]`, the possible unique sums we can obtain are 0 (using no coin), 1 (using coin with weight 1), 2 (using coin with weight 2), and 3 (using both coins). -----Input----- The first line contains an integer t (1 leq t leq 100) — the number of test cases. Each test case begins with a number n (1 leq n leq 100), indicating the number of coins. The next line contains n space-separated integers w_1, w_2, ... , w_n (1 leq w_i leq 100) representing the weights of the coins. -----Output----- For each test case, output a single integer indicating the number of unique possible sums obtainable from the given set of coins. The sums should be considered as non-negative integers including zero. -----Example----- Input 3 3 1 2 3 2 1 5 4 3 3 3 3 Output 7 4 5 -----Note----- In the first test case, the possible sums are: 0 (empty subset), 1, 2, 3, 3 (from the coins 1, 2, 3 respectively), 4 (1+3), 5 (2+3), 6 (1+2+3), making a total of 7 unique possible sums. In the second test case, the possible sums are: 0 (empty subset), 1, 5, 6 (1+5), making a total of 4 unique possible sums. In the third test case, the possible sums are: 0 (empty subset), 3, 6 (3+3), 9 (3+3+3), 12 (3+3+3+3), making a total of 5 unique possible sums. Note that repeated coins with the same weight doesn’t add new unique sums.","solution":"def unique_sums(t, test_cases): results = [] for test_case in test_cases: n, coins = test_case possible_sums = {0} for coin in coins: current_sums = list(possible_sums) for s in current_sums: possible_sums.add(s + coin) results.append(len(possible_sums)) return results # Example usage: # t = 3 # test_cases = [(3, [1, 2, 3]), (2, [1, 5]), (4, [3, 3, 3, 3])] # print(unique_sums(t, test_cases)) # Output: [7, 4, 5]"},{"question":"We have a board with an R times C grid. Koma starts at the top-left corner of the grid and aims to reach the bottom-right corner. He can only move right or down one step at a time. However, some cells are blocked, making them impassable. Compute the number of distinct paths Koma can take to reach the goal without traveling through any blocked cells, modulo 1000000007. The grid configuration is provided as a list of strings, where each string represents a row in the grid: - A \'.\' indicates an open cell Koma can pass through. - A \'#\' indicates a blocked cell Koma cannot pass through. -----Constraints----- - 1 leq R, C leq 1000 - The grid\'s first and last cell (top-left and bottom-right) will always be open (\'.\'). -----Input----- Input is given from Standard Input in the following format: R C grid -----Output----- Print the number of distinct paths to reach the bottom-right corner, modulo 1000000007. -----Sample Input----- 3 3 ..# #.. ... -----Sample Output----- 2 There are two ways as shown below: 1. Right, Right, Down, Down 2. Down, Right, Right, Down","solution":"MOD = 1000000007 def count_paths(R, C, grid): dp = [[0] * C for _ in range(R)] dp[0][0] = 1 for i in range(R): for j in range(C): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[R-1][C-1] def main(): import sys input = sys.stdin.read data = input().split() R = int(data[0]) C = int(data[1]) grid = data[2:] result = count_paths(R, C, grid) print(result) if __name__ == \\"__main__\\": main()"},{"question":"A website has logged a series of user activities, each represented by a tuple containing a user ID and a timestamp. Your task is to find out the most active user, i.e., the user with the highest number of activities. Assume that each activity is represented as (userID, timestamp), where userID is a string identifying the user and timestamp is an integer representing the time of the activity in seconds from the epoch. Write a function `most_active_user` that takes a list of activities and returns the user ID of the most active user. If there are multiple users with the same number of activities, return the one with the smallest user ID lexicographically. Function signature: `def most_active_user(activities: List[Tuple[str, int]]) -> str:` Input format: - A list of activities where each activity is represented as a tuple (userID, timestamp). Output format: - A string representing the userID of the most active user. Constraints: 0 <= len(activities) <= 10^5 userID is a non-empty string containing only lowercase alphabets, and its length does not exceed 10. timestamp is a non-negative integer. Example: Input: [(\\"alice\\", 1609459200), (\\"bob\\", 1609459260), (\\"alice\\", 1609459320), (\\"alice\\", 1609459380), (\\"bob\\", 1609459440), (\\"charlie\\", 1609459500)] Output: \\"alice\\" Explanation: - alice has 3 activities. - bob has 2 activities. - charlie has 1 activity. Thus, the user with the highest number of activities is \\"alice\\".","solution":"from typing import List, Tuple def most_active_user(activities: List[Tuple[str, int]]) -> str: Given a list of activities represented by tuples of (userID, timestamp), this function returns the userID of the most active user. If multiple users have the same number of activities, it returns the one with the smallest lexicographical userID. from collections import defaultdict # Dictionary to count activities per user user_activity_count = defaultdict(int) # Count activities for each user for user_id, _ in activities: user_activity_count[user_id] += 1 # Find the user with maximum activities or smallest lexicographical order if tied most_active = None max_activities = 0 for user_id, count in user_activity_count.items(): if count > max_activities or (count == max_activities and user_id < most_active): most_active = user_id max_activities = count return most_active"},{"question":"Write a function `calculate_roman_sum(s)` that takes a string `s` representing a Roman numeral expression. The string will be composed of multiple Roman numerals separated by the plus sign (\'+\'). Your function should return the sum of these Roman numerals as an integer. Roman numerals are represented by the following symbols: ``` I -> 1 V -> 5 X -> 10 L -> 50 C -> 100 D -> 500 M -> 1000 ``` Input: The input `s` is a string consisting of valid positive Roman numeral expressions separated by plus signs. An example input is \\"X+V+XII\\". Output: Return the sum as an integer. Example: ``` calculate_roman_sum(\\"X+V+XII\\") -> 27 ``` Note: - You can assume the given input will be a well-formed Roman numeral expression. - Implement the conversion algorithm for a single Roman numeral value as a sub-task before summing up the results.","solution":"def roman_to_int(roman): Converts a single Roman numeral string to an integer roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(roman): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total def calculate_roman_sum(s): Given a string of Roman numeral expressions separated by \'+\', returns their sum as an integer roman_numerals = s.split(\'+\') total_sum = sum(roman_to_int(roman) for roman in roman_numerals) return total_sum"},{"question":"An online retailer has a record of the products that customers bought together. Given a list of transactions, where each transaction is a list of products bought in a single purchase, determine the number of pairs of products that were bought together at least once. Input The first line contains an integer T, the number of test cases. The second line of each test case contains an integer N, the number of transactions. Each of the next N lines contains a list of space-separated strings, representing the products bought in a single transaction. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ Number of products in each transaction ≤ 20 Output For each test case, output the number of unique product pairs that were bought together at least once. Example Input: 2 3 apple banana banana orange apple orange 2 book pen pen pencil pen Output: 3 3","solution":"from itertools import combinations def count_product_pairs(transactions): pair_count = set() for transaction in transactions: products = transaction.split() for combo in combinations(products, 2): pair_count.add(tuple(sorted(combo))) return len(pair_count) def process_input(data): result = [] i = 0 T = int(data[i]) i += 1 for _ in range(T): N = int(data[i]) i += 1 transactions = [] for _ in range(N): transactions.append(data[i]) i += 1 result.append(count_product_pairs(transactions)) return result"},{"question":"You are given a list of integers and you need to find and print the maximum sum of a non-empty subsequence such that no two elements in the subsequence are adjacent in the given list. A subsequence can be derived by deleting some or no elements of the list without changing the order of the remaining elements. --------Input-------- The first line contains an integer n (1 leq n leq 100) — the number of elements in the list. The second line contains n integers a_1, a_2, ldots, a_n (-10^5 leq a_i leq 10^5), the elements of the list. --------Output-------- Print the maximum sum of a non-empty subsequence of the given list such that no two elements in the subsequence are adjacent. --------Examples-------- Input 4 3 2 5 10 Output 13 Input 5 3 2 7 10 3 Output 13 Input 3 -1 -2 -3 Output -1 --------Note-------- In the first example, you can select the subsequence {3, 10} which has the maximum sum 13 and no two elements are adjacent. In the second example, you can select the subsequence {3, 10} with sum 13. In the third example, you should select only { -1 }, as we are looking for a non-empty subsequence with the maximum sum.","solution":"def max_non_adjacent_subsequence_sum(arr): Given a list of integers, returns the maximum sum of a non-empty subsequence such that no two elements in the subsequence are adjacent in the list. if not arr: return 0 n = len(arr) if n == 1: return arr[0] # Initialize prev and current to track the maximum sum without adjacent elements prev = arr[0] curr = max(arr[0], arr[1]) for i in range(2, n): new_curr = max(curr, prev + arr[i]) prev = curr curr = new_curr return curr"},{"question":"Implement a function to check if a given integer is a perfect square. A perfect square is an integer that is the square of an integer. The function should return `true` if the given number is a perfect square and `false` otherwise. **Function Signature:** ```python def is_perfect_square(n: int) -> bool: ``` Example ```python is_perfect_square(16) # True, because 4*4 = 16 is_perfect_square(15) # False, because sqrt(15) = 3.872..., which is not an integer is_perfect_square(0) # True, because 0*0 = 0 is_perfect_square(1) # True, because 1*1 = 1 ``` # Constraints - Do not use any built-in functions that directly compute the square root. - The function should handle both large positive and negative numbers as inputs. - The function should run efficiently without timing out for large values of `n`.","solution":"def is_perfect_square(n: int) -> bool: Checks if a given integer is a perfect square. Args: n (int): The integer to check. Returns: bool: True if n is a perfect square, False otherwise. if n < 0: return False if n == 0 or n == 1: return True left, right = 1, n while left <= right: mid = (left + right) // 2 squared = mid * mid if squared == n: return True elif squared < n: left = mid + 1 else: right = mid - 1 return False"},{"question":"You are given a set of points on a 2D plane, and you need to determine the smallest circle that can enclose all the points. If there are multiple circles with the same minimum radius, return the one whose center has the smallest x-coordinate. If there is still a tie, return the one with the smallest y-coordinate. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), which represents the number of points. - The next n lines each contain two integers representing the x and y coordinates of each point. Output: - Print three values: the x-coordinate of the center of the smallest enclosing circle, the y-coordinate of the center, and the radius of the circle, each rounded to two decimal places. Examples: Input: 3 1 1 2 2 3 3 Output: 2.00 2.00 1.41 Input: 4 1 0 0 1 -1 0 0 -1 Output: 0.00 0.00 1.00","solution":"import math from itertools import combinations def distance(p1, p2): Calculate the Euclidean distance between two points p1 and p2. return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def get_circle_center_and_radius(p1, p2, p3): Find the circumcenter and radius of the circle passing through points p1, p2, and p3. A = p2[0] - p1[0] B = p2[1] - p1[1] C = p3[0] - p1[0] D = p3[1] - p1[1] E = A * (p1[0] + p2[0]) + B * (p1[1] + p2[1]) F = C * (p1[0] + p3[0]) + D * (p1[1] + p3[1]) G = 2 * (A * (p3[1] - p2[1]) - B * (p3[0] - p2[0])) if G == 0: # Collinear points return None, float(\'inf\') Cx = (D * E - B * F) / G Cy = (A * F - C * E) / G radius = distance(p1, (Cx, Cy)) return (Cx, Cy), radius def smallest_enclosing_circle(points): Determine the smallest circle that can enclose all the given points. n = len(points) if n == 1: return (points[0][0], points[0][1], 0.0) # Initialize the smallest circle with infinity radius. smallest_circle = (0, 0, float(\'inf\')) for i in range(n): for j in range(i+1, n): center = ((points[i][0] + points[j][0]) / 2, (points[i][1] + points[j][1]) / 2) radius = distance(points[i], center) if all(distance(p, center) <= radius for p in points): if radius < smallest_circle[2] or (radius == smallest_circle[2] and (center[0] < smallest_circle[0] or (center[0] == smallest_circle[0] and center[1] < smallest_circle[1]))): smallest_circle = (round(center[0], 2), round(center[1], 2), round(radius, 2)) for comb in combinations(points, 3): center, radius = get_circle_center_and_radius(*comb) if radius == float(\'inf\'): continue if all(distance(p, center) <= radius for p in points): if radius < smallest_circle[2] or (radius == smallest_circle[2] and (center[0] < smallest_circle[0] or (center[0] == smallest_circle[0] and center[1] < smallest_circle[1]))): smallest_circle = (round(center[0], 2), round(center[1], 2), round(radius, 2)) return smallest_circle def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) points = [(int(data[2 * i + 1]), int(data[2 * i + 2])) for i in range(n)] center_x, center_y, radius = smallest_enclosing_circle(points) print(f\\"{center_x:.2f} {center_y:.2f} {radius:.2f}\\")"},{"question":"Mukesh and Ritika are playing a game with sequences, inspired by their love for number puzzles. They start with a sequence of integers A_{1}, A_{2}, ldots, A_{N}. Mukesh, the mastermind, gives a parameter K and the challenge is to find all pairs of indices (i, j) such that 1 leq i < j leq N and A_{i} + A_{j} is divisible by K. Can you help Ritika solve this problem and win the game? ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and K. The second line contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}. ------ Output ------ For each test case, print a single integer — the number of pairs (i, j) such that 1 leq i < j leq N and A_{i} + A_{j} is divisible by K. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^5 1 ≤ K ≤ 10^9 1 ≤ A_{i} ≤ 10^9 for each valid i the sum of N over all test cases does not exceed 10^6 ------ Sample Input 1 ------ 2 5 3 1 2 3 4 5 4 2 2 4 6 8 ------ Sample Output 1 ------ 4 6 ------ Explanation 1 ------ Example case 1: The pairs and their sums divisible by 3 are (1, 2) with sum 3, (1, 5) with sum 6, (2, 4) with sum 6, and (3, 5) with sum 8. Example case 2: The pairs and their sums divisible by 2 are (1, 2) with sum 6, (1, 3) with sum 8, (1, 4) with sum 10, (2, 3) with sum 10, (2, 4) with sum 12, and (3, 4) with sum 14.","solution":"def count_divisible_pairs(test_cases): results = [] for N, K, A in test_cases: count = 0 remainders = {} # Count frequencies of each remainder when A[i] is divided by K for a in A: remainder = a % K if remainder in remainders: remainders[remainder] += 1 else: remainders[remainder] = 1 # Calculate number of pairs for i in range(N): remainder_i = A[i] % K for j in range(i + 1, N): remainder_j = A[j] % K if (remainder_i + remainder_j) % K == 0: count += 1 results.append(count) return results # Sample tests test_cases = [ (5, 3, [1, 2, 3, 4, 5]), (4, 2, [2, 4, 6, 8]) ] print(count_divisible_pairs(test_cases))"},{"question":"Sansa Stark, the elder daughter of Lord Eddard Stark and Lady Catelyn Stark, is known for her beauty and her keen sense of understanding the intricacies of highborn life. She has become adept at moving silently and unseen to avoid unwanted attention. She needs to navigate through the courtyard of Winterfell, which is laid out as an M*M grid, to retrieve a secret letter. The courtyard is patrolled by guards who move between defined positions. Sansa must avoid detection by being at least K cells away from any guard. The guards\' positions at any given time are provided. Write a program to determine if Sansa can move from the top-left corner of the courtyard (0, 0) to the bottom-right corner (M-1, M-1), without coming within K cells of any guard. She can only move up, down, left, or right. Guards do not move during her attempt. Input: - First line consists of the number of test cases. - For each test case: - First line contains the size of the courtyard (M ≤ 50) and the minimum safe distance (K ≤ 5). - Second line contains the positions of the guards in the format: X1 Y1 X2 Y2 ... XG YG where (Xi, Yi) represents the position of the i-th guard. Output: For each test case, print \\"SAFE\\" if Sansa can navigate to the destination without coming within K cells of any guard, otherwise print \\"UNSAFE\\". SAMPLE INPUT: 2 4 1 1 1 2 2 3 2 1 2 SAMPLE OUTPUT: SAFE UNSAFE Explanation: In the first test case, Sansa can move from (0,0) to (3,3) without coming within 1 cell of any guard positioned at (1,1) and (2,2). In the second test case, it is impossible to reach (2,2) from (0,0) without coming within 2 cells of the guard positioned at (1,2). As such, the output is \\"UNSAFE\\".","solution":"from collections import deque def is_safe_path_possible(M, K, guards): def is_within_unsafe_distance(r, c): for gr, gc in guards: if abs(gr - r) + abs(gc - c) < K: return True return False directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set([(0, 0)]) while queue: r, c = queue.popleft() if r == M-1 and c == M-1: return \\"SAFE\\" for dr, dc in directions: new_r, new_c = r + dr, c + dc if 0 <= new_r < M and 0 <= new_c < M and (new_r, new_c) not in visited: if not is_within_unsafe_distance(new_r, new_c): visited.add((new_r, new_c)) queue.append((new_r, new_c)) return \\"UNSAFE\\" def sansa_navigation(test_cases): results = [] for case in test_cases: M, K, guard_positions = case[\'M\'], case[\'K\'], case[\'guards\'] guards = [(guard_positions[i], guard_positions[i+1]) for i in range(0, len(guard_positions), 2)] results.append(is_safe_path_possible(M, K, guards)) return results"},{"question":"--- Problem Statement --- You are given an encrypted message encoded with a simple substitution cipher. The cipher replaces each letter in the message with another letter. However, a mistake was made: exactly one letter of the alphabet was substituted incorrectly and no two letters were substituted to the same letter. You need to decrypt the message given a partial decryption key and find the incorrectly substituted letter. # Input - The first line contains an integer `T`, the number of test cases. - For each test case: - The first line contains the encrypted message `s` consisting of lowercase English letters. - The second line contains an integer `k` indicating how many letters are correctly mapped. - Each of the next `k` lines contains a pair of characters: the first character is the encrypted letter and the second character is its correct decryption. # Output For each test case, output a single line containing the character that is incorrectly substituted in the given encrypted message. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ |s| ≤ 100 - 1 ≤ k ≤ 25 # Sample Input 1 ``` 2 ifmmp 4 f o m n m l p q hbvwl 3 h d v l b e ``` # Sample Output 1 ``` i w ``` # Explanation **Test Case 1:** The encrypted message is \\"ifmmp\\". Given mappings are: - \'f\' -> \'o\' - \'m\' -> \'n\' - \'m\' -> \'l\' - \'p\' -> \'q\' Clearly, the mappings are incorrect because \'i\' is not mapped in the list and \'o\' should map to \'h\'. **Test Case 2:** The encrypted message is \\"hbvwl\\". Given mappings are: - \'h\' -> \'d\' - \'v\' -> \'l\' - \'b\' -> \'e\' Here, the problematic letter is \'w\'. The letter \'w\' does not match its expected decryption based on common substitution rules.","solution":"def find_incorrect_substitution(T, test_cases): Given T test cases with encrypted messages and partial decryption keys, identify the letter with the incorrect substitution. Args: T : int : number of test cases test_cases : list : list of dictionaries containing \'message\', \'k\', and \'mappings\' Returns: list : a list containing the incorrectly substituted letter for each test case results = [] for case in test_cases: message = case[\'message\'] k = case[\'k\'] mappings = case[\'mappings\'] correct_decryption = {} for enc_letter, dec_letter in mappings: correct_decryption[enc_letter] = dec_letter for char in message: if char not in correct_decryption: results.append(char) break else: decrypted_char = correct_decryption[char] if message.count(char) != len([c for c in message if correct_decryption.get(c) == decrypted_char]): results.append(char) break return results # Function to process input and output def process_input_and_find_incorrect_substitution(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): message = lines[index] k = int(lines[index + 1]) mappings = [] for i in range(k): mappings.append(tuple(lines[index + 2 + i].split())) test_cases.append({\'message\': message, \'k\': k, \'mappings\': mappings}) index += 2 + k result = find_incorrect_substitution(T, test_cases) return result"},{"question":"Berland State University (BSU) is planning a new research project that involves data collection over a series of days. The project will last for n days, and on each of these days, a certain number of data samples will be collected. The data collection process is resource-intensive, so it is restricted by several constraints: 1. On some days, certain maintenance activities prevent any data from being collected. These days are marked as maintenance days. 2. The number of data samples collected on any single day cannot exceed k_1. 3. The number of data samples collected over any two consecutive days cannot exceed k_2. Given these constraints, your task is to find the maximum total number of data samples that can be collected during the project period. Formally, find the maximum integer m such that it is possible to choose n non-negative integers d_1, d_2, ..., d_n (where d_i is the number of data samples collected on day i) so that: * d_1 + d_2 + ... + d_n = m; * for each maintenance day d, d_d = 0; * for each day i, d_i ≤ k_1; * for each pair of consecutive days (i, i + 1), d_i + d_{i + 1} ≤ k_2. Input The first line contains one integer t (1 ≤ t ≤ 50) — the number of test cases. Then the test cases follow, each consisting of two lines. The first line contains three integers n, k_1, k_2 (1 ≤ n ≤ 5000; 1 ≤ k_1 ≤ k_2 ≤ 200000) — the number of days, the maximum number of samples collected on any single day, and the maximum number of samples collected over any two consecutive days. The second line contains one string s consisting of exactly n characters, each character is either 0 or 1. If s_i = 0, then day i is a maintenance day (so no data can be collected on that day); if s_i = 1, then day i is not a maintenance day. Output For each test case, print one integer — the maximum possible value of m (the total number of data samples that can be collected). Example Input 4 4 5 7 1011 4 4 10 0101 5 3 4 11011 6 4 6 011101 Output 12 8 8 14 Explanation of the example: - In the first test case, the maximum data samples can be collected as follows (day: samples): (1: 5), (2: 0), (3: 5), (4: 2). Total = 5 + 0 + 5 + 2 = 12. - In the second test case, the maximum data samples can be collected as follows (day: samples): (1: 0), (2: 4), (3: 0), (4: 4). Total = 0 + 4 + 0 + 4 = 8. Attributes: - The maintenance day is represented by \'0\' in the string where no data samples can be collected. - Ensure to respect the constraints k_1 and k_2 while collecting the data samples for each day and consecutive days respectively.","solution":"def max_data_samples(n, k_1, k_2, s): # Initialize total samples collected total_samples = 0 # Previous day\'s collected samples prev_samples = 0 for i in range(n): if s[i] == \'1\': # Calculate max samples we can collect today curr_samples = min(k_1, k_2 - prev_samples) total_samples += curr_samples prev_samples = curr_samples else: # Reset previous samples count when maintenance day comes prev_samples = 0 return total_samples def max_samples_for_all_cases(t, cases): results = [] for case in cases: n, k_1, k_2, s = case results.append(max_data_samples(n, k_1, k_2, s)) return results"},{"question":"John is planning a road trip to visit several cities. He has a map of the cities connected by roads, and he wants to visit each city exactly once. John is starting his trip from a specific city. Help John to determine the shortest route that visits each city exactly once and returns to the starting city. If there are multiple solutions with the same shortest distance, return any one of them. # Input The input starts with an integer `n` (2 ≤ n ≤ 10) which represents the number of cities. The next line contains a space-separated list of `n` strings, where each string is the name of a city. The following lines contain an `n x n` matrix of integers, where the integer at the `i`-th row and `j`-th column denotes the distance between the `i`-th city and the `j`-th city. The distance between a city and itself is always 0. # Output Output a list of city names, representing the order in which John should visit the cities, starting and ending at the initial city, such that the total distance traveled is minimized. # Example Input ``` 4 A B C D 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 ``` Output ``` A B D C A ``` # Note In the above example, the optimal route has a total distance of 80. # Constraints Assume all distances are positive integers and the graph is fully connected (i.e., there is a direct road between every pair of cities).","solution":"from itertools import permutations def shortest_route(n, cities, distances): Finds the shortest route that visits each city exactly once and returns to the starting city. Parameters: n (int): Number of cities. cities (list of str): List of city names. distances (list of list of int): n x n matrix of distances between cities. Returns: list of str: The order of city names representing the shortest route. min_distance = float(\'inf\') shortest_path = [] for perm in permutations(range(1, n)): current_distance = 0 current_path = [0] + list(perm) + [0] for i in range(n): current_distance += distances[current_path[i]][current_path[i+1]] if current_distance < min_distance: min_distance = current_distance shortest_path = current_path return [cities[i] for i in shortest_path] # Example usage n = 4 cities = [\\"A\\", \\"B\\", \\"C\\", \\"D\\"] distances = [ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ] print(shortest_route(n, cities, distances))"},{"question":"Write a function to simulate a simple text-based file system. This file system supports operations for creating directories, creating files, and listing the contents of a directory. # Operations: 1. `mkdir path`: Create a directory at the given `path`. If intermediary directories do not exist, they should be created. 2. `create path content`: Create a file at the given `path` with the provided `content`. All intermediary directories should be created if they do not already exist. 3. `ls path`: List the contents of the directory at the given `path`. The listing should be done in alphabetical order. The `path` is a string that represents the location of a file or a directory in a Unix-like file system. Paths are separated by forward slashes (`/`). The root of the file system is `/`. # Detailed Instructions: - Implement a class `FileSystem` with methods to handle the three operations described above. - The function `mkdir(path)` is used to create directories. - The function `create(path, content)` is used to create files with specific content. - The function `ls(path)` is used to list the contents of a directory in alphabetical order. If `path` is a file, it should return a list containing only the file\'s name. # Example: ```python fs = FileSystem() fs.mkdir(\\"/a/b/c\\") fs.create(\\"/a/b/c/d\\", \\"hello\\") print(fs.ls(\\"/\\")) # Output: [\\"a\\"] print(fs.ls(\\"/a/b/c\\")) # Output: [\\"d\\"] print(fs.ls(\\"/a/b/c/d\\")) # Output: [\\"d\\"] fs.create(\\"/a/b/e\\", \\"world\\") print(fs.ls(\\"/a/b\\")) # Output: [\\"c\\", \\"e\\"] ``` # Input Format - Each operation will be provided as a string. The first part of the string indicates the type of operation (`mkdir`, `create`, or `ls`), and the rest of the string provides the arguments needed for that operation. # Constraints - All paths provided will be valid Unix-like paths. - Operation arguments will be simple and do not contain special characters. - You may assume that all operations are valid and do not need to handle invalid input. - The number of operations will not exceed 1000. # Output - The `ls` method should return a list of directory contents in alphabetical order for the given directory path. - If the `ls` method is called on a file path, it should return a list containing that file\'s name.","solution":"class FileSystem: def __init__(self): self.fs = {\'/\': {}} def _traverse(self, path): parts = path.strip(\'/\').split(\'/\') current = self.fs[\'/\'] for part in parts: if part: if part not in current: current[part] = {} current = current[part] return current, parts[-1] def mkdir(self, path): self._traverse(path) def create(self, path, content): dir_path, file_name = path.rsplit(\'/\', 1) parent_dir, _ = self._traverse(dir_path) if file_name not in parent_dir: parent_dir[file_name] = \\"\\" parent_dir[file_name] = content def ls(self, path): if path == \'/\': return sorted(self.fs[\'/\'].keys()) current, name = self._traverse(path) if isinstance(current, dict): return sorted(current.keys()) else: return [name]"},{"question":"Emily is a self-employed programmer who deals with multiple contracts every day. The problem is that some contracts overlap in time and hence, she can only work on one contract at any given time. Emily wants to maximize her total earnings by working on the optimal set of non-overlapping contracts. Each contract is represented as a tuple (start_time, end_time, payment), where start_time and end_time denote the time the contract starts and ends (inclusive), and payment denotes the amount of money the contract offers. Your task is to help Emily by writing a function that determines the maximum payment she can collect by working on the optimal set of non-overlapping contracts. **Input:** - The first line of the input contains an integer T, denoting the number of test cases. - Each test case consists of the following: - The first line contains an integer N, the number of contracts. - The next N lines contains three integers each: start_time, end_time, and payment of each contract. **Output:** For each test case, output a single integer denoting the maximum payment Emily can collect. **Constraints:** - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100000 - 1 ≤ start_time < end_time ≤ 1000000 - 1 ≤ payment ≤ 100000 **Example:** Input: ``` 2 3 1 3 50 2 5 20 4 6 10 2 1 2 10 2 3 20 ``` Output: ``` 60 20 ``` **Explanation:** In the first test case, the optimal set of contracts for Emily to work on are (1,3,50) and (4,6,10) which do not overlap, providing a total payment of 60. In the second test case, the contract (2,3,20) gives the maximum payment without overlapping any other contract.","solution":"def max_payment(T, test_cases): def find_max_payment(contracts): # Sort contracts by end time contracts.sort(key=lambda x: x[1]) # Dynamic programming array to store max payments dp = [0] * len(contracts) dp[0] = contracts[0][2] # First contract payment for i in range(1, len(contracts)): # Payment if taking the current contract payment_include = contracts[i][2] # Find the latest non-overlapping contract with binary search lo, hi = 0, i - 1 while lo <= hi: mid = (lo + hi) // 2 if contracts[mid][1] < contracts[i][0]: if contracts[mid + 1][1] < contracts[i][0]: lo = mid + 1 else: payment_include += dp[mid] break else: hi = mid - 1 # Max payment using the dp array dp[i] = max(dp[i-1], payment_include) return dp[-1] results = [] for case in test_cases: N, contracts = case results.append(find_max_payment(contracts)) return results # Example usage t = 2 cases = [ (3, [(1, 3, 50), (2, 5, 20), (4, 6, 10)]), (2, [(1, 2, 10), (2, 3, 20)]) ] print(max_payment(t, cases)) # Output: [60, 20]"},{"question":"Given an array of integers, check whether it is possible to make all elements of the array equal by modifying at most one element. If possible, return \\"YES\\", otherwise return \\"NO\\". Example 1: Input: N = 5 arr[] = {1, 1, 1, 2, 1} Output: YES Explanation: By modifying the element at index 3 (2 -> 1), all elements of the array become equal. Example 2: Input: N = 4 arr[] = {2, 1, 1, 1} Output: YES Explanation: By modifying the element at index 0 (2 -> 1), all elements of the array become equal. Example 3: Input: N = 3 arr[] = {3, 3, 3} Output: YES Explanation: All elements are already equal. Example 4: Input: N = 4 arr[] = {1, 2, 3, 4} Output: NO Explanation: No single modification can make all elements equal. Your Task: You don\'t need to read input or print anything. Complete the function checkEqualElements() which takes the array arr[] and its size N as input parameters and return \\"YES\\" if it is possible to make all elements equal by modifying at most one element, otherwise return \\"NO\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^6","solution":"def checkEqualElements(arr, N): Check if it is possible to make all elements in the array equal by modifying at most one element. if N <= 1: return \\"YES\\" frequency = {} for num in arr: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 max_count = max(frequency.values()) # If all elements are already the same if max_count == N: return \\"YES\\" # If we can change exactly one element to make all elements equal if max_count == N - 1: return \\"YES\\" # Otherwise, it is not possible return \\"NO\\""},{"question":"Write a function that takes a 2D list of integers representing a grid and returns the maximum sum of values from the grid following these rules: - You start at any cell in the first row. - You can move to the cell directly below or to the cell diagonally below left or right. - Your goal is to reach any cell in the last row following these movement rules and maximize the sum of the values along your path. **Function Signature:** ```python def max_path_sum(grid: List[List[int]]) -> int: ``` # Input - A 2D list of integers `grid` where each element is between 1 and 1000. - The size of the grid is m times n (1 leq m, n leq 50). # Output - An integer representing the maximum sum obtainable following the path defined by the rules. # Example ```python grid = [ [5, 3, 2, 4], [4, 7, 1, 2], [2, 3, 8, 1], [6, 1, 1, 5] ] print(max_path_sum(grid)) # Output: 23 ``` **Explanation:** - One of the paths that result in the sum of 23 is: - Start at `grid[0][0] = 5` - Move to `grid[1][1] = 7` - Move to `grid[2][2] = 8` - Move to `grid[3][3] = 5` - Total sum: 5 + 7 + 8 + 5 = 25 # Note - Consider the edge cases where the grid has only one row or one column. - Diagonal moves should correctly handle boundary conditions (first and last columns).","solution":"from typing import List def max_path_sum(grid: List[List[int]]) -> int: Returns the maximum sum of values following the path rules if not grid or not grid[0]: return 0 # Dimensions of the grid m, n = len(grid), len(grid[0]) # Create a DP table to store the maximum path sum up to each cell dp = [[0] * n for _ in range(m)] # Initialize the first row of DP table for j in range(n): dp[0][j] = grid[0][j] # Fill the DP table for i in range(1, m): for j in range(n): # Maximum of moving from directly above, diagonally left above, or diagonally right above max_from_above = dp[i-1][j] if j > 0: max_from_above = max(max_from_above, dp[i-1][j-1]) if j < n-1: max_from_above = max(max_from_above, dp[i-1][j+1]) dp[i][j] = grid[i][j] + max_from_above # The maximum sum will be the maximum value in the last row of the DP table return max(dp[m-1])"},{"question":"Chef is participating in a coding competition, and he has an array B of M integers. There is a function f(x) which returns the number of occurrences of the integer x in the array B. Chef can make at most P operations on the array B. In each operation, he can pick any element B_j and increase or decrease it by 1. Chef wants to make all integers in the array B appear an even number of times using at most P operations. Determine if it is possible or not. ------ Input ------ The first line contains an integer Q, the number of test cases. Then the test cases follow. Each test case contains two lines of input. The first line contains two space-separated integers M, P. The second line contains M space-separated integers B_{1}, B_{2}, dots, B_{M}. ------ Output ------ For each test case, output \\"YES\\" if it is possible to make all integers in the array appear an even number of times using at most P operations, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ Q ≤ 1000 1 ≤ M ≤ 10^{5} 0 ≤ P ≤ 10^{5} 1 ≤ B_{i} ≤ 10^{5} The sum of M over all test cases does not exceed 5cdot 10^{5}. ----- Sample Input 1 ------ 2 5 3 1 2 2 3 3 4 1 1 1 2 3 ----- Sample Output 1 ------ YES NO ----- Explanation 1 ------ Test Case 1: P=3 and we can perform the following operations: - Decrease 1 to 0. - Increase 2 to 3. - Decrease 3 to 2. After these operations, the array becomes [0, 2, 2, 2, 2], and all integers appear an even number of times. Test Case 2: P=1 and there are three unique numbers. It is impossible to make all integers appear an even number of times with just 1 operation.","solution":"def can_make_even_occurrences(Q, test_cases): results = [] for test in test_cases: M, P = test[0] B = test[1] frequency_map = {} for num in B: if num in frequency_map: frequency_map[num] += 1 else: frequency_map[num] = 1 odd_count = sum(1 for count in frequency_map.values() if count % 2 != 0) if odd_count <= P: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage def process_input_output(): import sys input = sys.stdin.read data = input().split() index = 0 Q = int(data[index]) index += 1 test_cases = [] for _ in range(Q): M, P = int(data[index]), int(data[index+1]) index += 2 B = list(map(int, data[index:index+M])) index += M test_cases.append([(M, P), B]) results = can_make_even_occurrences(Q, test_cases) for result in results: print(result)"},{"question":"You are given a sequence of numbers and a target sum. Your task is to find out whether there exists a contiguous subarray which adds up exactly to the target sum. If such a subarray exists, print its starting and ending indices (1-based). If there are multiple solutions, return the one with the smallest starting index. If there is no such subarray, print -1. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first line of each test case contains two integers n and S, the size of the sequence and the target sum respectively. - The second line of each test case contains n space-separated integers representing the elements of the sequence. ------ Output Format ------ For each test case, output on a new line the starting and ending indices of the contiguous subarray that sums to the target, or -1 if no such subarray exists. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ n ≤ 1000 -10^4 ≤ text{element of sequence} ≤ 10^4 -10^5 ≤ S ≤ 10^5 ------ Sample Input 1 ------ 2 5 12 1 2 3 7 5 10 15 1 2 3 4 5 6 7 8 9 10 ------ Sample Output 1 ------ 2 4 1 5 ------ Explanation 1 ------ Test case 1: The subarray from index 2 to 4 (1-based) i.e., [2, 3, 7] sums to 12. Test case 2: The subarray from index 1 to 5 (1-based) i.e., [1, 2, 3, 4, 5] sums to 15.","solution":"def find_subarray_with_sum(T, test_cases): results = [] for i in range(T): n, S = test_cases[i][0] arr = test_cases[i][1] current_sum = 0 start_index = 0 found = False for end_index in range(n): current_sum += arr[end_index] while current_sum > S and start_index <= end_index: current_sum -= arr[start_index] start_index += 1 if current_sum == S: results.append(f\\"{start_index + 1} {end_index + 1}\\") found = True break if not found: results.append(\\"-1\\") return results"},{"question":"Given a string S consisting of lowercase Latin letters, your task is to determine if it is possible to rearrange the characters of the string such that no two adjacent characters are the same. If it is possible, return any valid rearrangement of the string, otherwise return an empty string. ------ Input ------ The only line of the input contains one string S. ------ Output ------ Output one valid rearrangement of the string such that no two adjacent characters are the same. If no valid rearrangement is possible, output an empty string. ------ Constraints ------ 1 leq |S| leq 10^5 ----- Sample Input 1 ------ aabb ----- Sample Output 1 ------ abab ----- explanation 1 ------ One possible valid rearrangement is \'abab\'. Other valid rearrangements include \'baba\'. ----- Sample Input 2 ------ aaabc ----- Sample Output 2 ------ abaca ----- explanation 2 ------ One possible valid rearrangement is \'abaca\'. Other valid rearrangements include \'acaba\'. ----- Sample Input 3 ------ aaab ----- Sample Output 3 ------ ----- explanation 3 ------ It is not possible to rearrange the string such that no two adjacent characters are the same.","solution":"import heapq from collections import Counter def rearrange_string(S): Rearranges the input string S such that no two adjacent characters are the same. If it is not possible, returns an empty string. count = Counter(S) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_char and prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 # Decrease the frequency since we used one instance of char rearranged_string = \'\'.join(result) if len(rearranged_string) == len(S): return rearranged_string else: return \'\'"},{"question":"Peter is organizing a tournament where n teams will compete over several rounds. Each round pairs up two teams to play against each other, and the losing team is eliminated from the tournament. The winners continue to the next round, and this continues until only one team remains as the champion. Peter wants to set up a tournament bracket such that he minimizes the total number of unique teams that need to be prepared to compete in any given round. Given that teams can compete in a round if and only if they both survive the previous round, Peter needs your help to compute the minimum total number of unique teams required to be able to conduct the tournament. -----Input----- The first line of the input contains a single integer n (2 ≤ n ≤ 100,000) — the number of teams. -----Output----- Print the minimum total number of unique teams required to conduct the tournament. -----Examples----- Input 7 Output 8 Input 16 Output 16 -----Note----- In the first sample, with 7 teams, the minimum number of unique teams required is 8: - 1 extra team is required to ensure that the number of teams is a power of two because each round requires a pair of teams. - The minimum power of two greater than or equal to 7 is 8. In the second sample, since 16 is already a power of two, the number of unique teams required equals 16.","solution":"def minimum_teams(n): Given the number of teams n, finds and returns the minimum number of unique teams required to conduct the tournament such that the number of teams in each round is a power of 2. # Calculate the nearest power of 2 greater than or equal to n power_of_two = 1 while power_of_two < n: power_of_two *= 2 return power_of_two"},{"question":"A company wants to analyze network traffic patterns to identify potential security threats. They collect logs of activities, where each activity consists of a source IP, a destination IP, and a timestamp of when the activity occurred. The company has noticed that certain IP addresses often appear together in suspicious patterns and they want to identify the most frequently connected IP pairs. You are tasked with finding the top K most frequent IP pairs (source, destination) from the given log data. An IP pair is considered distinct based on the order of appearance; for example, (192.168.1.1, 192.168.1.2) is different from (192.168.1.2, 192.168.1.1). -----Input----- The first line of input contains an integer N (1 leq N leq 10^5), the number of log entries, and an integer K (1 leq K leq 100), the number of top IP pairs to identify. Each of the next N lines contains a source IP, a destination IP, and a timestamp in the format \\"YYYY-MM-DD HH:MM:SS\\". The source and destination IPs are given as standard IPv4 addresses. -----Output----- The output should contain K lines. Each line should include a pair of IPs in the format \\"source IP -> destination IP\\" sorted by their frequency in descending order. If multiple pairs have the same frequency, sort them lexicographically by IP addresses. -----Examples----- Sample Input: 5 2 192.168.1.1 192.168.1.2 2023-01-01 12:00:00 192.168.1.1 192.168.1.2 2023-01-01 12:05:00 192.168.1.2 192.168.1.3 2023-01-01 12:10:00 192.168.1.1 192.168.1.2 2023-01-01 12:15:00 192.168.1.2 192.168.1.3 2023-01-01 12:20:00 Sample Output: 192.168.1.1 -> 192.168.1.2 192.168.1.2 -> 192.168.1.3","solution":"from collections import Counter def top_k_ip_pairs(logs, K): Identify the top K most frequent IP pairs from the given log data. Args: logs: List of tuples, where each tuple contains (source IP, destination IP, timestamp). K : int, the number of top IP pairs to identify. Returns: List of strings where each string is in the format \\"source IP -> destination IP\\". # Counter to store the frequency of each IP pair ip_pairs_counter = Counter() # Iterate through each log entry to count the frequency of each IP pair for log in logs: source_ip, destination_ip, timestamp = log ip_pairs_counter[(source_ip, destination_ip)] += 1 # Find the top K most frequent IP pairs most_common_pairs = ip_pairs_counter.most_common() # Sort the pairs primarily by frequency (descending), then by IP addresses (lexicographically) most_common_pairs.sort(key=lambda x: (-x[1], x[0][0], x[0][1])) # Extract the top K results and format them as \\"source IP -> destination IP\\" result = [] for pair, _ in most_common_pairs[:K]: result.append(f\\"{pair[0]} -> {pair[1]}\\") return result"},{"question":"You are given an array of integers nums and an integer target. The task is to complete the function findSubarraySum() that returns the total number of continuous subarrays whose sum equals to target. Example 1: Input: nums = [1, 1, 1] target = 2 Output: 2 Explanation: The subarrays [1, 1] and [1, 1] have sum equal to 2. Example 2: Input: nums = [1, 2, 3] target = 3 Output: 2 Explanation: The subarrays [1, 2] and [3] have sum equal to 3. Your Task: The task is to complete the function findSubarraySum() which takes an array of integers nums and an integer target as the input and returns the total number of continuous subarrays whose sum equals to target. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= nums.length <= 10^4 -10^5 <= nums[i] <= 10^5 -10^7 <= target <= 10^7","solution":"def findSubarraySum(nums, target): from collections import defaultdict sum_count = defaultdict(int) current_sum = 0 count = 0 sum_count[0] = 1 # There\'s one way to have a cumulative sum of 0. for num in nums: current_sum += num if (current_sum - target) in sum_count: count += sum_count[current_sum - target] sum_count[current_sum] += 1 return count"},{"question":"In the enchanted forest of Algoria, there lives a tribe of elves who love building intricate networks of tree houses. The elves have decided to connect their tree houses using a network of bridges. These tree houses are represented by points in a 2D coordinate system. The elves want to build the minimum spanning tree (MST) connecting all their tree houses. However, they also want the MST to meet a specific requirement: the maximum weight of the edges in the MST should be minimized. You are given coordinates of the tree houses and the potential bridges are represented by the Manhattan distance between pairs of tree houses, defined as |x1 - x2| + |y1 - y2|. Your task is to assist the elves by finding the MST that minimizes the maximum weight of the edges. -----Input----- - The first line of the input contains a single integer n (2 le n le 1000), representing the number of tree houses. - The next n lines contain two integers x_i and y_i(-10^4 leq x_i, y_i leq 10^4), which are the coordinates of the tree houses. -----Output----- Print a single integer, which is the minimized maximum weight of the edges in the MST. -----Examples----- Sample Input: 4 0 0 2 2 2 0 0 2 Sample Output: 2 Sample Input: 3 1 1 2 2 3 3 Sample Output: 2 -----Explanation of the sample input----- In the first sample, the minimized maximum weight of the MST with the given coordinates is 2. In the second sample, the minimum spanning tree of the given points also has a minimized maximum weight of 2.","solution":"def find_minimized_max_edge(n, coordinates): import heapq # Helper function to calculate Manhattan distance def manhattan_dist(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) # Create all edges with their Manhattan distances edges = [] for i in range(n): for j in range(i + 1, n): distance = manhattan_dist(coordinates[i], coordinates[j]) edges.append((distance, i, j)) # Kruskal\'s algorithm to find MST edges.sort() parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX mst_max_edge = 0 for distance, u, v in edges: if find(u) != find(v): union(u, v) mst_max_edge = distance # If MST is connected with all n nodes if len(set(find(x) for x in range(n))) == 1: break return mst_max_edge"},{"question":"A robot starts at position (0, 0) on an infinite grid. It can be given a series of commands: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). The robot executes these commands in sequence. However, the robot has a restricted area defined by (x1, y1) as the bottom-left corner and (x2, y2) as the top-right corner. Can you determine if the robot remains within the restricted area after executing all the commands? -----Input----- The first line contains an integer t (1 le t le 1000) — the number of test cases. Each test case consists of two lines. The first line contains two integers n and m (1 le n le 100) — the number of commands and the size of the restricted area coordinates m, respectively. The second line contains four integers x1, y1, x2, y2 (-10^4 le x1 < x2 le 10^4, -10^4 le y1 < y2 le 10^4) — the coordinates of the rectangular restricted area. The third line contains a string of n characters consisting of \'U\', \'D\', \'L\', \'R\' representing the sequence of commands the robot is given. -----Output----- For each test case, print \\"YES\\" if the robot remains within the restricted area after executing all the commands. Otherwise, print \\"NO\\". -----Examples----- Input 2 10 4 -1 -1 1 1 UUUUDDDDLLLRRR 5 4 0 0 2 2 RULDR Output NO YES -----Note----- In the first test case, after executing the commands, the robot moves out of the restricted area. In the second test case, after executing the commands, the robot remains within the restricted area.","solution":"def is_within_restricted_area(t, test_cases): results = [] for case in test_cases: n, m, x1, y1, x2, y2, commands = case x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 # Check if the robot goes out of the restricted area if not (x1 <= x <= x2 and y1 <= y <= y2): results.append(\\"NO\\") break else: results.append(\\"YES\\") return results"},{"question":"You are given a sequence of positive integers – S, and an integer X. Your task is to determine whether there exists a continuous subsequence within S whose sum is exactly X. ------ Input ------ The first line of the input contains an integer N denoting the number of elements in the sequence S. The second line contains N space-separated integers representing the elements of the sequence S. The third line contains the integer X. ------ Output ------ Output \\"Yes\\" (without quotes) if there exists a continuous subsequence whose sum is exactly X. Otherwise, print \\"No\\". ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ S[i], X ≤ 10^9 ------ Subtasks ------ Subtask 1 (20 points): 1 ≤ N ≤ 10^3 Subtask 2 (30 points): 1 ≤ S[i], X ≤ 10^6 Subtask 3 (50 points): Original constraints ----- Sample Input 1 ------ 5 1 2 3 4 5 9 ----- Sample Output 1 ------ Yes ----- Sample Input 2 ------ 3 2 4 6 5 ----- Sample Output 2 ------ No ----- Explanation ------ Example case 1. The subsequence [2, 3, 4] sums up to 9. Hence, we will print \\"Yes\\". Example case 2. There is no continuous subsequence that adds up to 5. Hence, the answer is \\"No\\".","solution":"def has_subsequence_with_sum(S, X): Determines if there exists a continuous subsequence whose sum is exactly X. Parameters: S (list): A list of positive integers. X (int): The target sum. Returns: str: \\"Yes\\" if such a subsequence exists, otherwise \\"No\\". current_sum = 0 left = 0 for right in range(len(S)): current_sum += S[right] while current_sum > X and left <= right: current_sum -= S[left] left += 1 if current_sum == X: return \\"Yes\\" return \\"No\\""},{"question":"Write a function `mergeSortedArrays()` that takes two sorted lists of integers and returns a single sorted list that contains all the elements from both input lists. ```python mergeSortedArrays([1, 3, 5], [2, 4, 6]) // [1, 2, 3, 4, 5, 6] mergeSortedArrays([1, 2, 3], [4, 5, 6]) // [1, 2, 3, 4, 5, 6] mergeSortedArrays([1, 5, 9], [2, 6]) // [1, 2, 5, 6, 9] ``` Ensure that the function handles edge cases such as empty lists. The function should have a time complexity of O(n + m), where n and m are the lengths of the two input lists.","solution":"def mergeSortedArrays(arr1, arr2): Merges two sorted lists into a single sorted list. i, j = 0, 0 merged_array = [] while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append remaining elements of arr1, if any while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append remaining elements of arr2, if any while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"A public park offers several walking trails. Each trail is represented by a set of points in the park, with each point connected by a bidirectional path. A trail is valid if there is exactly one path between any two points on the trail. Chitra is tasked with verifying if each set of given points and bidirectional paths forms a valid trail. Your task is to determine if each set of given points and paths forms a valid trail. -----Input:----- - The first line contains T, the number of test cases. - Each test case consists of three parts: - The first line contains two integers N and M, the number of points and the number of bidirectional paths, respectively. - The next M lines each contain two integers u and v describing a bidirectional path between points u and v. -----Output:----- - For each test case, print \\"YES\\" (without quotes) if the set of points and paths forms a valid trail, otherwise print \\"NO\\" (without quotes). -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - 0 leq M leq 4950 -----Sample Input:----- 2 4 3 1 2 2 3 3 4 4 3 1 2 2 3 1 3 -----Sample Output:----- YES NO -----Explanation:----- For the first test case, the points and paths form a valid trail as there is one single path connecting all points without any cycles. For the second test case, the points and paths do not form a valid trail since there is a cycle present.","solution":"def is_valid_trail(N, M, paths): from collections import defaultdict # Helper function to perform DFS def dfs(node, parent): visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: if not dfs(neighbor, node): return False elif neighbor != parent: return False return True if N == 0: return True graph = defaultdict(list) for u, v in paths: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) # Check if the graph is connected and acyclic using DFS or BFS if not dfs(1, -1): return False # Ensure all nodes are visited (connected graph) if not all(visited[1:N+1]): return False return True def valid_trail_checker(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] paths = test_cases[i][1] if is_valid_trail(N, M, paths): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"An interstellar programmer found himself in a peculiar library on the planet ZYX-45. This library had only one kind of book - a guide to solving problems with arrays. While browsing, he encountered a unique challenge that seemed interesting. The library contains an array of integers of length n (1 ≤ n ≤ 10^5). The interstellar programmer has to solve the following problem: He needs to find out how many contiguous subarrays of the given array have a sum equal to an integer k (−10^9 ≤ k ≤ 10^9). A contiguous subarray is a subarray where all the elements are next to each other in the original array. You are required to help the programmer get the solution for this problem. Input The first line contains two space-separated integers, n and k. The second line contains n space-separated integers, representing the elements of the array. Output Print a single integer, the number of contiguous subarrays whose sum is exactly equal to k. Examples Input 5 7 3 4 7 2 -3 Output 2 Input 4 0 1 -1 1 -1 Output 4 Note In the first example, the subarrays that sum to 7 are [3, 4] and [7]. In the second example, the subarrays that sum to 0 are [1, -1], [-1, 1], [1, -1, 1, -1], and [-1, 1, -1].","solution":"def find_subarray_count_with_sum_k(n, k, array): Returns the number of contiguous subarrays whose sum is exactly k. Parameters: n (int): The length of the array k (int): The sum to find in the subarrays array (list of int): The input array of integers Returns: int: The count of contiguous subarrays with sum equal to k sum_count = {0: 1} current_sum = 0 count = 0 for num in array: current_sum += num if (current_sum - k) in sum_count: count += sum_count[current_sum - k] if current_sum in sum_count: sum_count[current_sum] += 1 else: sum_count[current_sum] = 1 return count"},{"question":"Sharma and Ravi are playing a game with a 2D grid of size `n x m`. Each cell in the grid is either an empty cell denoted by `\\".\\"` or a cell occupied by an obstacle denoted by `\\"#\\"`. The game objective is to find the length of the longest path such that the path starts from the top-left corner of the grid `(1, 1)` and ends at the bottom-right corner of the grid `(n, m)` while only moving rightwards or downwards. However, due to the obstacles, some paths may be blocked. Your task is to determine the length of the longest path under these conditions or determine if it\'s impossible to reach the bottom-right corner from the top-left corner. ------Input------ The first line of the input contains two integers `n` and `m` (`1 ≤ n, m ≤ 1000`), representing the number of rows and columns in the grid, respectively. Each of the next `n` lines contains a string of length `m` consisting of characters `.` or `#`, representing the grid. ------Output------ If it is impossible to reach from `(1, 1)` to `(n, m)`, print `-1` (without quotes). Otherwise, print a single integer representing the length of the longest path. ------Examples------ Input 3 4 ..#. .. ...# Output -1 Input 4 4 ..#. .#.. ...# .... Output 6 ------Note------ In the first sample, there is no way to get from the top-left corner to the bottom-right corner. Therefore, the output is `-1`. In the second sample, the longest path starts at the top-left corner and moves `[1,1] -> [1,2] -> [2,2] -> [3,2] -> [3,3] -> [4,3] -> [4,4]`, making the length of the longest path `6` steps.","solution":"def longest_path(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 dp = [[-1] * m for _ in range(n)] dp[0][0] = 0 for i in range(n): for j in range(m): if i == 0 and j == 0: continue if grid[i][j] == \'#\': dp[i][j] = -1 else: if i > 0 and dp[i-1][j] != -1: dp[i][j] = max(dp[i][j], dp[i-1][j] + 1) if j > 0 and dp[i][j-1] != -1: dp[i][j] = max(dp[i][j], dp[i][j-1] + 1) return dp[n-1][m-1] if dp[n-1][m-1] != -1 else -1"},{"question":"Emily\'s Painting Business Story Emily has recently started her own painting business and is trying to gain a better understanding of how to manage her projects efficiently. She has a few painting tasks that she needs to complete for her various clients. Each task requires a certain amount of time to complete and she can work on only one task at a time. Emily wants to maximize her productivity by completing the maximum number of tasks within a given time window. You, as her friend, are helping her by writing a program to determine the maximum number of tasks she can complete. Problem Emily has a list of N painting tasks, each with a start time and an end time. She can start working on a task only when it is scheduled to start and must finish it before or when it is scheduled to end. Given a time window [T1, T2] during which Emily can work, determine the maximum number of non-overlapping tasks that she can complete. Input format The input is given in the following format: ``` N T1 T2 s_1 e_1 s_2 e_2 ... s_N e_N ``` Here, N (1 ≤ N ≤ 10^5) is the number of painting tasks, T1 and T2 (0 ≤ T1 ≤ T2 ≤ 10^9) are the start and end times of Emily\'s available working period. Each of the next N lines contains two integers s_i and e_i (0 ≤ s_i < e_i ≤ 10^9), representing the start and end times of the i-th task. Output format Output the maximum number of tasks that Emily can complete within the given time window in one line. Input example 1 ``` 3 1 10 1 3 2 5 6 9 ``` Output example 1 ``` 2 ``` Explanation: Emily can complete tasks [1, 3] and [6, 9] within the time window [1, 10]. Input example 2 ``` 4 2 8 1 4 3 5 5 7 6 10 ``` Output example 2 ``` 2 ``` Explanation: Emily can complete tasks [1, 4] and [5, 7] within the time window [2, 8]. Input example 3 ``` 5 0 15 0 6 5 8 7 10 9 11 12 14 ``` Output example 3 ``` 3 ``` Explanation: Emily can complete tasks [0, 6], [7, 10], and [12, 14] within the time window [0, 15]. Note that Emily can only start a task if it falls within the time window [T1, T2] and each task must be completed before or when it is scheduled to end. Tasks must not overlap with each other.","solution":"def max_tasks(tasks, T1, T2): Returns the maximum number of non-overlapping tasks that can be completed within the time window [T1, T2]. # Filter tasks to those within the time window filtered_tasks = [task for task in tasks if task[0] >= T1 and task[1] <= T2] # Sort tasks by end time filtered_tasks.sort(key=lambda x: x[1]) count = 0 last_end_time = T1 for start, end in filtered_tasks: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"A company has a new productivity tracking system that records various events signifying employee productivity activities. The system records when an employee starts or stops working on a task and the time they spend on breaks. Your task is to compute the total productive time worked by the employee, excluding breaks. For example, consider the following sequence of events: - An employee starts working at time 0. - The employee takes a break at time 30 and returns at time 45. - The employee stops working at time 90. The total productive time worked by the employee is from time 0 to 30 and 45 to 90, which totals 75 minutes. -----Input----- The input contains a sequence of at most 10000 events in chronological order. Each event is in one of the following forms: - “start t”: The employee starts working at time t. - “stop t”: The employee stops working at time t (and this event marks the end of the working period). - “break t”: The employee takes a break at time t. This event is always followed by a “return t” event. - “return t”: The employee returns from a break at time t. In all events, t is an integer satisfying 0 le t le 1000000. The events are guaranteed to be in chronological order. -----Output----- Output a single line containing the total productive time worked by the employee in minutes. -----Examples----- Sample Input: start 0 break 30 return 45 stop 90 Sample Output: 75","solution":"def calculate_productive_time(events): productive_time = 0 work_start_time = 0 break_start_time = 0 on_break = False for event in events: action, t = event.split() t = int(t) if action == \\"start\\": work_start_time = t elif action == \\"stop\\": if not on_break: productive_time += t - work_start_time elif action == \\"break\\": if not on_break: productive_time += t - work_start_time on_break = True break_start_time = t elif action == \\"return\\": if on_break: work_start_time = t on_break = False return productive_time"},{"question":"Write a function that takes a list of integer numbers and categorizes each number into \\"Even\\" or \\"Odd\\", then formats the output in a specific way. The function should meet the following requirements: * Any number that is divisible by 2 should be labeled as \\"Even\\". * Any number that is not divisible by 2 should be labeled as \\"Odd\\". * In the formatted output, each number should be followed by its label (\\"Even\\" or \\"Odd\\") in parentheses. * The list of formatted numbers should be concatenated into a single string, with each formatted number separated by a comma and a space. * If the input list is empty, the output should be an empty string. Input The function receives a single list `nums` which contains integer numbers. The length of the list does not exceed 100. Output Return a single string representing each number followed by its label in parentheses, with each formatted number separated by a comma and a space. Examples Input [1, 2, 3, 4, 5] Output 1 (Odd), 2 (Even), 3 (Odd), 4 (Even), 5 (Odd) Input [10, 15, 24] Output 10 (Even), 15 (Odd), 24 (Even)","solution":"def categorize_numbers(nums): Categorizes a list of numbers into \\"Even\\" or \\"Odd\\" and formats them in a specific way. Args: nums (list): A list of integers. Returns: str: A string with each number followed by its label (\\"Even\\" or \\"Odd\\"), separated by a comma and a space. result = [] for num in nums: if num % 2 == 0: result.append(f\\"{num} (Even)\\") else: result.append(f\\"{num} (Odd)\\") return \', \'.join(result)"},{"question":"A bakery is preparing boxes of pastries for a large event. They want to ensure each box contains an equal number of pastries while minimizing the number of leftover pastries. Given the number of pastries and the number of boxes, determine how many pastries will be in each box and how many pastries will be leftover. Write a program to calculate the number of pastries per box and the number of leftover pastries. Constraints * The number of pastries is an integer between 1 and 1000. * The number of boxes is an integer between 1 and 100. Input The input is given from Standard Input in the following format: ``` n m ``` where n is the number of pastries and m is the number of boxes. Output Print the number of pastries per box and the number of leftover pastries. Examples Input 10 3 Output 3 1 Input 25 7 Output 3 4 Input 999 100 Output 9 99","solution":"def calculate_pastries(n, m): Calculate the number of pastries per box and the number of leftover pastries. Args: n (int): The number of pastries. m (int): The number of boxes. Returns: (int, int): A tuple containing the number of pastries per box and the number of leftover pastries. pastries_per_box = n // m leftover_pastries = n % m return pastries_per_box, leftover_pastries"},{"question":"Elena is managing a busy toll road and wants to optimize its system. The toll road has n toll booths lined up in a single row, and each booth has a different rate. Every vehicle passing through the toll road will pay only once at the booth they encounter. However, Elena has noticed a problem. Some vehicles often switch lanes trying to minimize toll fees, causing traffic disruptions. To address this, Elena decides that the cost for each vehicle should be the same regardless of which booth it passes through. Thus, Elena wants to find a value X such that any vehicle passing through the i-th toll booth pays an amount at least as high as X, but no higher than the original rate at that booth. Elena wants to find the maximum value of X that can be uniformly applied to every booth. If it\'s not possible to have a uniform value X that meets the criteria, she wants to know. Input The first line contains an integer n (1 ≤ n ≤ 2·105) — the number of toll booths. The second line contains n integers r1, r2, ..., rn (1 ≤ ri ≤ 109) — the rates at each toll booth. Output Print a single integer — the maximum value of X that can be uniformly applied to every booth. If it\'s not possible, print -1. Examples Input 4 7 5 3 9 Output 3 Input 3 2 2 1 Output 1","solution":"def find_max_uniform_toll(toll_rates): Finds the maximum value X such that each vehicle pays at least X and no higher than the original rate at each booth. Parameters: toll_rates (list): List of integers representing the toll rates at each booth. Returns: int: The maximum value of X or -1 if it\'s not possible. return min(toll_rates) if toll_rates else -1"},{"question":"In the world of competitive gaming, sequences of button presses (combos) play a crucial role in executing powerful moves. You are given a sequence of button presses represented by an array of integers b of length n, where b_i is the button pressed in the i-th action. A combo is defined as a contiguous subarray of b that is both non-decreasing and of maximum length. Your task is to determine the length of the longest combo in the sequence of button presses. For example, given the sequence [1, 2, 2, 3, 1, 2, 3, 4], the longest combo is [1, 2, 3, 4] with a length of 4. -----Input----- The first line contains a single integer t (1leq tleq 10^4) — the number of test cases. The first line of the description of each test case contains a single integer n (1leq nleq 3cdot 10^5) — the length of the array. The second line of the description of each test case contains n integers b_1,ldots,b_n (1leq b_ileq 10^9) — the elements of the array. It is guaranteed, that the sum of n for all test cases does not exceed 3cdot 10^5. -----Output----- For each test case, print a single integer — the length of the longest combo in the sequence of button presses. -----Examples----- Input 3 8 1 2 2 3 1 2 3 4 5 3 3 3 3 3 6 1 2 1 2 1 2 Output 4 5 2 -----Note----- In the first test case, the length of the longest non-decreasing subarray (combo) is 4 corresponding to the subarray [1, 2, 3, 4]. In the second test case, the longest non-decreasing subarray (combo) is [3, 3, 3, 3, 3] with a length of 5. In the third test case, the longest non-decreasing subarrays are any of the subarrays of length 2 like [1, 2] or [2, 1]. Thus the output is 2.","solution":"def longest_combo_length(test_cases): results = [] for case in test_cases: n, b = case max_length = 1 current_length = 1 for i in range(1, n): if b[i] >= b[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) results.append(max_length) return results # Helper function to parse input and execute the main function def execute_longest_combo_length(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) b = list(map(int, lines[index + 1].split())) test_cases.append((n, b)) index += 2 return longest_combo_length(test_cases)"},{"question":"You are given a list of numbers and a target value. Write a function to determine if there are any two numbers in the list that add up to the target. If there are, return the pair of numbers. If not, return an empty list. The same number cannot be used twice. Input: - A single line containing a list of integers separated by spaces. - A single integer which is the target value. Output: - A single line containing the pair of numbers that add up to the target, separated by a space, or an empty list if no such pair exists. Constraints: - The given list will contain at most 100 integers. - Each integer will be between -10^6 and 10^6. - The target value will be between -10^6 and 10^6. Example Input: 2 7 11 15 9 Example Output: 2 7 Example Input: 1 2 3 4 5 10 Example Output: []","solution":"def find_pair_with_sum(lst, target): Returns a pair of numbers from the list that add up to the target value, or an empty list if no such pair exists. Args: lst: List of integers. target: Target sum value. Returns: A list containing the pair of numbers that add up to the target value, or an empty list if no such pair exists. seen = {} for number in lst: complement = target - number if complement in seen: return [complement, number] seen[number] = True return [] # Example usage: # lst = [2, 7, 11, 15] # target = 9 # result = find_pair_with_sum(lst, target) # print(result) # Output: [2, 7]"},{"question":"Given an m x n integer grid \'grid\', find the maximum sum of any non-empty subrectangle in the grid. A subrectangle is defined by choosing any four points (r1, c1), (r1, c2), (r2, c1), and (r2, c2) such that 0 ≤ r1 ≤ r2 < m and 0 ≤ c1 ≤ c2 < n. Example 1: Input: grid = {{1, 2, -1, 4}, {-5, -2, 3, 6}, {2, 2, -5, 1}} Output: 12 Explanation: The subrectangle with the maximum sum is: 1 2 -1 4 -5 -2 3 6 It has a sum of 12. Example 2: Input: grid = {{-1, -2, -3}, {-4, -5, -6}, {-7, -8, -9}} Output: -1 Explanation: The subrectangle with the maximum sum is just a single element (-1) since all other values are smaller. Your Task: You don\'t need to read or print anything. Your task is to complete the function `maxSumSubrectangle`, which takes a 2D integer array \'grid\' as input and returns the maximum sum of any non-empty subrectangle. Expected Time Complexity: O(N^3 * M^3) Expected Space Complexity: O(N * M) Constraints: 1 ≤ m, n ≤ 200 -1000 ≤ grid[i][j] ≤ 1000","solution":"def maxSumSubrectangle(grid): Returns the maximum sum of any non-empty subrectangle in the grid. Args: grid (List[List[int]]): 2D integer array representing the grid Returns: int: Maximum sum of any non-empty subrectangle m = len(grid) n = len(grid[0]) def maxSumSubarray(arr): Helper function to calculate maximum sum of subarray in 1D array using Kadane\'s algorithm max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum max_sum = float(\'-inf\') for left in range(n): row_sum = [0] * m for right in range(left, n): for i in range(m): row_sum[i] += grid[i][right] max_sum = max(max_sum, maxSumSubarray(row_sum)) return max_sum"},{"question":"A large company is organizing a company-wide social event and has sent out M invitations. Each invitation is represented by a unique integer ID from 1 to M. If an employee accepts an invitation, they will attend the event, otherwise, they will not. However, due to a clerical error, some employees received multiple invitations, but they will only attend once regardless of the number of invitations they received. You are given an integer M representing the total number of invitations and a list of integers A of length M, where each integer in A represents the ID of the employee who received that invitation (some employees may appear more than once in the list). Write a function that returns the number of employees that will attend the event. Example 1: Input: M = 5 A = [1, 2, 2, 3, 4] Output: 4 Explanation: Employees with IDs 1, 2, 3, and 4 will attend the event. Example 2: Input: M = 7 A = [1, 1, 1, 2, 2, 3, 4] Output: 4 Explanation: Employees with IDs 1, 2, 3, and 4 will attend the event. Your Task: You don\'t need to read input or print anything. Your task is to complete the function count_attendees() which takes the integer M (the number of invitations) and the list A (denoting the recipients of the invitations) as input parameters and returns an integer representing the number of employees that will attend the event. Expected Time Complexity: O(M) Expected Auxiliary Space: O(M) Constraints: 1 <= M <= 10^5 1 <= A[i] <= 10^6","solution":"def count_attendees(M, A): Returns the number of unique employees that will attend the event. :param M: int, The number of invitations sent. :param A: list of int, The list of employee IDs who received the invitations. :return: int, The number of unique employees that will attend the event. return len(set(A))"},{"question":"You are given two sorted integer arrays `arr1` and `arr2` of size `m` and `n` respectively. Write a function to find the median of the two sorted arrays. The overall run-time complexity should be `O(log(min(m,n)))`. Input - The first line contains an integer `m` (0 ≤ m ≤ 1000) — the size of the first array. - The next line contains `m` space-separated integers `arr1` in non-decreasing order. - The third line contains an integer `n` (0 ≤ n ≤ 1000) — the size of the second array. - The next line contains `n` space-separated integers `arr2` in non-decreasing order. Output - Print a single floating-point number — the median of the arrays. If both arrays are empty, print `0.0`. Examples Input 3 1 3 8 2 7 11 Output 7.0 Input 3 1 2 3 4 4 5 6 7 Output 4.0 Input 0 0 Output 0.0 Note: The median is the middle value in an ordered integer list. If the size of the list is even, the median is the average of the two middle values.","solution":"def findMedianSortedArrays(arr1, arr2): Returns the median of the two sorted arrays. if not arr1 and not arr2: return 0.0 # Ensuring arr1 is the smaller array. if len(arr1) > len(arr2): arr1, arr2 = arr2, arr1 m, n = len(arr1), len(arr2) imin, imax, half_len = 0, m, (m + n + 1) // 2 while imin <= imax: i = (imin + imax) // 2 j = half_len - i if i < m and arr2[j-1] > arr1[i]: imin = i + 1 elif i > 0 and arr1[i-1] > arr2[j]: imax = i - 1 else: if i == 0: max_of_left = arr2[j-1] elif j == 0: max_of_left = arr1[i-1] else: max_of_left = max(arr1[i-1], arr2[j-1]) if (m + n) % 2 == 1: return float(max_of_left) if i == m: min_of_right = arr2[j] elif j == n: min_of_right = arr1[i] else: min_of_right = min(arr1[i], arr2[j]) return (max_of_left + min_of_right) / 2.0"},{"question":"A company has a wall made of N pillars arranged in a line, numbered from 1 to N. The height of the i-th pillar is H_i. The company wants to paint all the pillars such that the height of the painted pillars forms a non-decreasing sequence when viewed from left to right. To achieve this, the company can perform the following operation any number of times: - Choose a pillar and increase its height by 1. Determine the minimum number of such operations required to ensure that the height of the pillars forms a non-decreasing sequence. Constraints: * 1 ≤ N ≤ 100,000 * 1 ≤ H_i ≤ 1,000,000 Input: The input is given from Standard Input in the following format: N H_1 H_2 ... H_N Output: Print the minimum number of operations required. Examples: Input: 5 3 1 4 2 5 Output: 4 Input: 4 1 2 3 4 Output: 0 Input: 6 5 3 4 2 1 6 Output: 10","solution":"def min_operations_to_non_decreasing(N, heights): Returns the minimum number of operations needed to make the pillar heights non-decreasing. ops = 0 for i in range(1, N): if heights[i] < heights[i-1]: ops += heights[i-1] - heights[i] heights[i] = heights[i-1] return ops"},{"question":"Santa Claus wants to build a toy train from blocks of varying sizes. Each block has a specific size, density, and an identifier. To assemble the train, he must decide the order in which these blocks should be stacked. The train\'s stability directly relates to the blocks\' densities and their sizes. The rules for assembling the train are as follows: - Blocks with higher density should be placed first. - If two blocks have the same density, the larger block should come before the smaller one. - If two blocks have both the same density and size, they can be in any order relative to each other. Given a list of blocks with their identifiers, sizes, and densities, your task is to sort them according to the rules and provide the ordered sequence of block identifiers. -----Input----- First line contains an integer N, the number of blocks. Each of the next N lines contains three integers and a string denoting i, d, s and t, the identifier of the block, the density of the block, the size of the block, and the type of the block respectively. -----Output----- Output the ordered sequence of block identifiers in N lines. -----Constraints----- - 1 ≤ N ≤ 103 - 1 ≤ i, d, s ≤ 103 - t is a string with length ≤ 50 -----Example----- Input: 4 1 10 5 Engine 2 8 6 Coach 3 15 4 Freight 4 15 7 Tender Output: 3 4 1 2 -----Explanation----- First, we should sort blocks by density in descending order. Then, for blocks with the same density, sort them by size in descending order. In the example, block 3 and block 4 have the highest density (15), but block 4 is larger in size than block 3, so it comes first. Next, block 1 with density 10 comes, followed by block 2 with density 8.","solution":"def sort_blocks(blocks): Sorts blocks based on given rules: 1. Blocks with higher density should be placed first. 2. If two blocks have the same density, the larger block should come before the smaller one. 3. If two blocks have both the same density and size, they can be in any order relative to each other. Args: blocks - a list of tuples, each containing (identifier, density, size, type) example: [(1, 10, 5, \'Engine\'), (2, 8, 6, \'Coach\')] Returns: list of identifiers sorted based on the rules # Sort blocks by density (descending) and then by size (descending) sorted_blocks = sorted(blocks, key=lambda x: (-x[1], -x[2])) # Extract the identifiers from sorted blocks return [block[0] for block in sorted_blocks] def process_input(data): lines = data.strip().split(\\"n\\") n = int(lines[0].strip()) blocks = [] for i in range(1, n + 1): identifier, density, size, block_type = lines[i].strip().split() blocks.append((int(identifier), int(density), int(size), block_type)) return blocks def get_sorted_identifiers(data): blocks = process_input(data) sorted_identifiers = sort_blocks(blocks) return sorted_identifiers"},{"question":"Task Create a function `reverse_words` that reverses the order of words in a given string while, ensuring that the internal characters of each word remain in place. You need to implement the following function: ```python def reverse_words(s: str) -> str: ``` # Example `reverse_words(\\"hello world\\")` should return `\\"world hello\\"` `reverse_words(\\"The quick brown fox jumps over the lazy dog\\")` should return `\\"dog lazy the over jumps fox brown quick The\\"` **Note:** There is no leading or trailing whitespace in the input string. The input string may have multiple spaces between words, and the output should preserve those spaces in the reversed string.","solution":"def reverse_words(s: str) -> str: Reverses the order of words in a given string while ensuring that the internal characters of each word remain in place. :param s: Input string :return: String with words in reversed order # Split the string by spaces words = s.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list back into a string with spaces return \' \'.join(reversed_words)"},{"question":"Given a list of meeting time intervals consisting of start and end times, determine if a person could attend all meetings. Note that a person can attend two meetings as long as the end time of the first meeting does not conflict with the start time of the next meeting. Example 1: Input: times = [(0, 30), (5, 10), (15, 20)] Output: False Explanation: A person cannot attend all meetings as the first meeting ends at 30, which is after the next meeting starts at 5. This overlaps and thus it\'s not possible to attend both. Example 2: Input: times = [(7, 10), (2, 4)] Output: True Explanation: A person can attend both meetings since the first meeting ends at 10, which does not conflict with the start time of the second meeting at 2. Your Task: Complete the function `canAttendMeetings()` that receives a list of intervals and returns a boolean value indicating if a person can attend all meetings without any overlaps. Note: The function definition is as follows: ```python def canAttendMeetings(times: List[Tuple[int, int]]) -> bool: ``` Expected Time Complexity: O(NlogN) Expected Auxiliary Space: O(1) Constraints: 1 <= len(times) <= 10^5 0 <= start time < end time <= 10^9","solution":"from typing import List, Tuple def canAttendMeetings(times: List[Tuple[int, int]]) -> bool: Returns True if a person can attend all meetings without overlap, else returns False. :param times: List of tuples where each tuple is a (start, end) time of the meeting. if not times: return True # Sort the meetings by their start time times.sort(key=lambda x: x[0]) # Iterate through the sorted list and check for any overlap for i in range(1, len(times)): if times[i][0] < times[i-1][1]: return False return True"},{"question":"Sara is creating a new online contest and needs your help to ensure it is fair. The contest consists of n problems, each with a different difficulty rating. She wants to make sure that the difference between the hardest and easiest problem in any set of k consecutive problems is minimized. Your task is to determine this minimal difference. For example, she has n = 6 problems with difficulties in problems = [3, 1, 9, 7, 5, 11]. There are k = 3 problems in a contest round. The minimum difference between the hardest and easiest problem can be had with [3, 5, 7] where the difference is 7 - 3 = 4. Function Description Complete the `minDifficultyRange` function in the editor below. It should return an integer that represents the minimum difference between the hardest and easiest problem in any set of k consecutive problems. `minDifficultyRange` has the following parameter(s): - `k`: an integer that represents the number of problems in each contest round. - `problems`: an array of integers that represent the difficulty of each problem. Input Format The first line contains an integer n. The second line contains an integer boldsymbol{ k }. Each of the next n lines contains an integer textit{problems[i]}. Constraints 2 leq n leq 10^5 2 leq k leq n 0 leq problems[i] leq 10^9 Output Format A single integer representing the minimum difference between the hardest and easiest problem in any set of k consecutive problems. Sample Input 0 6 3 3 1 9 7 5 11 Sample Output 0 4 Explanation 0 Sara will choose problems with difficulties [3, 5, 7]. The minimal difference is 7 - 3 = 4. Sample Input 1 8 4 8 2 10 6 1 12 3 7 Sample Output 1 4 Explanation 1 Sara will choose problems with difficulties [6, 7, 8, 10]. The minimal difference is 10 - 6 = 4.","solution":"def minDifficultyRange(k, problems): Returns the minimum difference between the hardest and easiest problem in any set of k consecutive problems. problems.sort() min_diff = float(\'inf\') for i in range(len(problems) - k + 1): current_diff = problems[i + k - 1] - problems[i] if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"Given an integer numRows, generate the first numRows of Pascal\'s triangle. In Pascal\'s triangle, each number is the sum of the two numbers directly above it. Example 1: Input: 5 Output: [ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1] ] Example 2: Input: 1 Output: [ [1] ] Constraints: - 1 <= numRows <= 30","solution":"def generate_pascals_triangle(numRows): Generates the first numRows of Pascal\'s triangle. Args: numRows (int): The number of rows of Pascal\'s triangle to generate. Returns: List[List[int]]: A list of lists where each inner list represents a row of Pascal\'s triangle. if numRows <= 0: return [] triangle = [[1]] for i in range(1, numRows): row = [1] for j in range(1, i): row.append(triangle[i - 1][j - 1] + triangle[i - 1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"You are given an array of integers and asked to perform several operations on it. The operations include updating an element of the array, querying the sum of a subarray, and finding the minimum element in a subarray. Specifically, the operations are as follows: 1. `update i x`: Update the element at index `i` (0-based) to `x`. 2. `sum l r`: Compute the sum of the elements between indices `l` and `r` (inclusive, 0-based). 3. `min l r`: Find the minimum element between indices `l` and `r` (inclusive, 0-based). You are required to process `q` operations on the array efficiently. Input The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000) — the number of elements in the array and the number of operations, respectively. The second line contains `n` integers, the initial elements of the array. Each of the next `q` lines describes an operation — either `update i x`, `sum l r`, or `min l r`. Output For each query of type `sum` and `min`, print the result on a new line. Examples Input ``` 5 6 1 2 3 4 5 sum 0 2 min 1 3 update 2 10 sum 2 4 min 0 4 sum 0 4 ``` Output ``` 6 2 19 1 22 ``` Note In the given example: - The sum of elements from index 0 to 2 is `1 + 2 + 3 = 6`. - The minimum element from index 1 to 3 is `2`. - After updating index 2 to 10, the array becomes `[1, 2, 10, 4, 5]`. - The sum of elements from index 2 to 4 in the updated array is `10 + 4 + 5 = 19`. - The minimum element from index 0 to 4 in the updated array is `1`. - The sum of elements from index 0 to 4 in the updated array is `1 + 2 + 10 + 4 + 5 = 22`.","solution":"class ArrayOperations: def __init__(self, arr): self.arr = arr def update(self, i, x): Update the element at index i to x. self.arr[i] = x def subarray_sum(self, l, r): Compute the sum of the elements between indices l and r (inclusive). return sum(self.arr[l:r+1]) def subarray_min(self, l, r): Find the minimum element between indices l and r (inclusive). return min(self.arr[l:r+1]) def process_operations(n, q, arr, operations): array_ops = ArrayOperations(arr) results = [] for operation in operations: op = operation.split() if op[0] == \\"update\\": _, i, x = op array_ops.update(int(i), int(x)) elif op[0] == \\"sum\\": _, l, r = op result = array_ops.subarray_sum(int(l), int(r)) results.append(result) elif op[0] == \\"min\\": _, l, r = op result = array_ops.subarray_min(int(l), int(r)) results.append(result) return results"},{"question":"Aria loves arranging numbers in specific patterns. She particularly likes sequences where every number is greater than the preceding number (strictly increasing). Given an array of integers, Aria wants to convert it into a strictly increasing sequence by removing some of the elements (possibly none). Write a program to find the smallest number of deletions required to convert a given array into a strictly increasing sequence. Input Format: The first line contains an integer T, the number of test cases. The next T lines each contain a single integer N followed by N space-separated integers representing the array. Output Format: For each test case, print the minimum number of deletions required. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Array elements ≤ 10^9 SAMPLE INPUT 3 4 4 3 2 1 5 1 2 3 4 5 6 7 1 8 4 10 12 SAMPLE OUTPUT 3 0 2 Explanation For the first case, 4, 3, 2, 1 can become 4 or 3 or 2 or 1, with 3 deletions each time. For the second case, 1, 2, 3, 4, 5 is already strictly increasing, so no deletions are needed. For the third case, one possible sequence is 1, 8, 10, 12, requiring 2 deletions (remove 7 and 4).","solution":"def min_deletions_to_increasing_sequence(arr): n = len(arr) if n == 0: return 0 # dp array to store the length of the longest increasing subsequence ending at each position dp = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) # longest increasing subsequence length lis_length = max(dp) # minimum deletions to make the array strictly increasing return n - lis_length def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(min_deletions_to_increasing_sequence(arr)) return results # Function to read inputs and process the test cases def process_input(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): nums = list(map(int, lines[i].split())) test_cases.append(nums[1:]) return process_test_cases(test_cases)"},{"question":"Write a function that checks whether a given string is an anagram of another string. Two strings are anagrams if they contain the same characters in the same frequency but arranged in a different order. Input: First line contains T, the number of test cases. This is followed by T pairs of lines, where each pair contains two strings, S1 and S2. Output: For each test case, print \\"YES\\" if the two strings are anagrams of each other, and \\"NO\\" otherwise. Constraints: - T < 100 - Length of string S1 and S2 < 1001 Example: Input: 3 listen silent triangle integral apple papel Output: YES YES NO","solution":"def are_anagrams(s1, s2): Returns \'YES\' if the two strings s1 and s2 are anagrams, otherwise \'NO\'. if sorted(s1) == sorted(s2): return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): results = [] for s1, s2 in test_cases: results.append(are_anagrams(s1, s2)) return results"},{"question":"You are given an array of integers `arr` and an integer `k`. Write a function to determine if there are two distinct indices i and j in the array such that `arr[i] == arr[j]` and the absolute difference between i and j is at most `k`. Example: Input: arr = [1,2,3,1,2,3], k = 2 Output: false Input: arr = [1,0,1,1], k = 1 Output: true Your Task: You don\'t need to input anything. Complete the function `containsNearbyDuplicate()` that takes an array of integers `arr` and an integer `k` as the input parameters and returns a boolean indicating whether such elements exist. Constraints: - 1 <= arr.length <= 10^5 - -10^9 <= arr[i] <= 10^9 - 0 <= k <= 10^5","solution":"def containsNearbyDuplicate(arr, k): Determines if there are two distinct indices i and j in the array such that arr[i] == arr[j] and the absolute difference between i and j is at most k. :param arr: List[int] - The array of integers. :param k: int - The maximum index difference. :return: bool - True if such elements exist, otherwise False. value_to_index = {} for i, num in enumerate(arr): if num in value_to_index and i - value_to_index[num] <= k: return True value_to_index[num] = i return False"},{"question":"In a land far away, a group of adventurers has found a series of mysterious stone tablets. Each tablet contains a sequence of numbers, and it is believed that these numbers represent a hidden message. You have been tasked to help the adventurers decode the message by performing specific transformations on the sequence. Given a sequence of N integers, your task is to compute the sum of the absolute differences between all pairs of integers in the sequence. -----Input----- - The first line of the input contains a single integer T representing the number of test cases. - The first line of each test case contains a single integer N. - The second line of each test case contains N integers separated by spaces. -----Output----- For each test case, print a single line containing one integer — the sum of the absolute differences. -----Constraints----- - 1 le T le 100 - 2 le N le 10^4 - -10^5 le text{elements of the sequence} le 10^5 -----Example Input----- 2 3 1 2 3 4 -1 -2 -3 -4 -----Example Output----- 4 10 -----Explanation----- Example case 1: The sequence is [1, 2, 3]. The absolute differences are: - |1 - 2| = 1 - |1 - 3| = 2 - |2 - 3| = 1 The sum of these absolute differences is 1 + 2 + 1 = 4. Example case 2: The sequence is [-1, -2, -3, -4]. The absolute differences are: - |-1 - (-2)| = 1 - |-1 - (-3)| = 2 - |-1 - (-4)| = 3 - |-2 - (-3)| = 1 - |-2 - (-4)| = 2 - |-3 - (-4)| = 1 The sum of these absolute differences is 1 + 2 + 3 + 1 + 2 + 1 = 10.","solution":"def sum_of_absolute_differences(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] sequence = test_cases[i][1] sum_abs_diff = 0 for j in range(N): for k in range(j + 1, N): sum_abs_diff += abs(sequence[j] - sequence[k]) results.append(sum_abs_diff) return results"},{"question":"You are given an array of integers A of length N. Find the minimum integer K such that by removing at most K elements from the array, the remaining elements form a non-decreasing sequence. -----Constraints----- - 1 ≤ N ≤ 10^5 - -10^9 ≤ A_i ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: ``` N A_1 A_2 ... A_N ``` -----Output----- Print the minimum integer K such that by removing at most K elements, the remaining elements form a non-decreasing sequence. -----Sample Input----- 5 3 1 2 4 3 -----Sample Output----- 2 By removing the elements 3 and 1, the remaining sequence [2, 4, 3] is non-decreasing.","solution":"def min_removals(A): Returns the minimum number of elements to remove to make the array non-decreasing. from bisect import bisect_right def longest_increasing_subsequence_length(A): Returns the length of the longest increasing subsequence in the array A. dp = [] # This will store the smallest ending element for each length of increasing subsequence found so far. for num in A: idx = bisect_right(dp, num) if idx >= len(dp): dp.append(num) else: dp[idx] = num return len(dp) n = len(A) lis_length = longest_increasing_subsequence_length(A) return n - lis_length"},{"question":"Write a function `is_prime` to determine if a given number is a prime number. # Notes: - Return `None` for non-integer inputs. - Consider any number less than 2 as non-prime, returning `False` for them. # Examples: ```python is_prime(2) => True is_prime(4) => False is_prime(17) => True is_prime(\\"abc\\") => None ```","solution":"def is_prime(n): Determines if the input `n` is a prime number. Return None for non-integer inputs. Return False for numbers less than 2. Return True if the number is prime. if not isinstance(n, int): return None if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"question":"You are given an integer array `arr` of size `n`. Calculate and print the sum of all elements that are greater than a given integer `k`. -----Constraints----- - 1 ≤ n ≤ 10^5 - -10^9 ≤ arr[i] ≤ 10^9 - -10^9 ≤ k ≤ 10^9 -----Input----- The input is given from Standard Input in the following format: ``` n k arr[0] arr[1] ... arr[n-1] ``` -----Output----- Print the sum of all elements in the array that are greater than `k`. -----Sample Input----- 6 3 1 4 2 7 5 3 -----Sample Output----- 16 In the array, the elements greater than 3 are 4, 7, and 5. The sum of these elements is 4 + 7 + 5 = 16.","solution":"def sum_of_elements_greater_than_k(n, k, arr): Returns the sum of all elements in the array that are greater than k. return sum(x for x in arr if x > k)"},{"question":"Given a list of integers, you are allowed to perform the following operation any number of times: Choose any two distinct integers from the list and replace them with their sum and their absolute difference. Determine if it is possible to reduce the list to a single integer `0` through a sequence of the allowed operations. Input: The first line contains an integer `T` (number of test cases). For each test case: - The first line contains an integer `n`, indicating the number of elements in the list. - The second line contains `n` integers separated by spaces. Output: For each test case, print \\"YES\\" if it is possible to end with a single integer `0`, otherwise print \\"NO\\". Sample Input: 3 2 4 4 3 2 4 6 4 1 5 7 9 Sample Output: YES YES NO Constraints: 1 ≤ T ≤ 1000 2 ≤ n ≤ 100 0 ≤ integers ≤ 1000","solution":"def can_reduce_to_zero(test_cases): results = [] for case in test_cases: n, arr = case if all(num % 2 == 0 for num in arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return test_cases def main(input_data): test_cases = process_input(input_data) results = can_reduce_to_zero(test_cases) for result in results: print(result)"},{"question":"---Input:--- - First line will contain an integer N. - Second line will contain a list of N integers. ---Output:--- A single line containing the sum of all integers in the list, modulo 1000000007, if the sum is even, otherwise return -1. ---Constraints--- - 1 leq N leq 10^5 - -10^9 leq list[i] leq 10^9 ---Sample Input 1:--- 3 1 2 3 ---Sample Output 1:--- 6 ---Sample Input 2:--- 3 1 2 4 ---Sample Output 2:--- -1","solution":"def sum_modulo(arr): Returns the sum of integers in list modulo 1000000007 if the sum is even. If the sum is odd, returns -1. total = sum(arr) if total % 2 == 0: return total % 1000000007 else: return -1"},{"question":"You are given an encrypted message containing only lowercase English letters. The encryption method consists of shifting each letter by a fixed number of positions in the alphabet. For example, with a right shift of 3, \'a\' becomes \'d\', \'b\' becomes \'e\', and so on. \'z\' wraps around to \'c\'. Write a function to decrypt the message by shifting each letter back by the given number of positions. Input The input consists of two lines. The first line contains the encrypted message as a string (1 ≤ length ≤ 100). The second line contains a single integer s (1 ≤ s ≤ 25) which represents the shift used in the encryption. Output Output the decrypted message as a string. Examples Input khoor 3 Output hello Input zruog 3 Output world","solution":"def decrypt_message(encrypted_message, shift): Decrypts an encrypted message by shifting each letter back by the given number of positions. :param encrypted_message: The encrypted message as a string. :param shift: The number of positions each letter was shifted during encryption. :return: The decrypted message as a string. decrypted_message = [] for char in encrypted_message: if \'a\' <= char <= \'z\': new_char = chr((ord(char) - ord(\'a\') - shift) % 26 + ord(\'a\')) decrypted_message.append(new_char) return \'\'.join(decrypted_message)"},{"question":"You are given a string of comma-separated integers. Write a function that returns the product of all the integers except the smallest and largest ones. If the input string is empty, or the removal of the smallest and largest integers would cause the string to be empty, return null.","solution":"def product_of_integers_except_smallest_largest(s): Returns the product of all integers in the comma-separated string s except the smallest and largest ones. If the input string is empty, or the removal of smallest and largest integers would cause the string to be empty, return None. if not s: return None nums = list(map(int, s.split(\',\'))) if len(nums) <= 2: return None nums.sort() nums = nums[1:-1] product = 1 for num in nums: product *= num return product"},{"question":"You are given an array `a` of `n` integers. You need to perform several queries on this array. Each query consists of three integers `l`, `r`, and `x`. For each query, calculate the number of occurrences of `x` in the subarray `a[l..r]`. For example, if `n=5` and `a = [1, 2, 1, 2, 3]`, for the query `(2, 4, 2)`, the subarray is `[2, 1, 2]` and the result is `2` since `2` appears twice in the subarray. -----Input----- The first line contains an integer `n` (1 leq n leq 10^5) — the length of the array `a`. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 leq a_i leq 10^9) — the elements of the array. The third line contains an integer `m` (1 leq m leq 10^5) — the number of queries. The following `m` lines each contain three integers `l`, `r`, and `x` (1 leq l leq r leq n, 1 leq x leq 10^9) — the queries. -----Output----- Print `m` integers, each one corresponding to the result of a query. -----Example----- Input 5 1 2 1 2 3 3 1 3 1 2 4 2 1 5 3 Output 2 2 1","solution":"def count_occurrences_in_subarray(a, queries): For each query, calculate the number of occurrences of x in the subarray a[l..r]. :param a: List of integers representing the array. :param queries: List of tuples where each tuple contains three integers (l, r, x). :return: List of integers, each representing the result of the corresponding query. results = [] for l, r, x in queries: # Subarray is a[l-1:r], since l and r are 1-indexed. subarray = a[l-1:r] results.append(subarray.count(x)) return results"},{"question":"**Problem Statement** Michael is a botany enthusiast and is experimenting with plant growth in his large greenhouse. He has `n` plants in his greenhouse, each of them may be located in different sections labeled from 1 to `m`. He regularly records the change in height of each plant over a span of days. Specifically, he records the height changes in `q` days. However, Michael is notorious for missing records. Fortunately, the data he does have can still be useful for approximating plant growth patterns. Imagine each of the `n` plants has an initial position in sections labeled from 1 to `m`. You will be given the data of daily observations that include the following: for each observation `(si, ei, pi)` where `si` and `ei` represent the range of sections, and `pi` represents the height change across those sections on that day. Your task is to calculate the net height change for each of the `m` sections after `q` days of observations. # Input - The first line contains three integers `n`, `m`, and `q` (1 ≤ n, m, q ≤ 100,000) — the number of plants, the number of sections, and the number of days respectively. - The next `q` lines each contain three integers `si`, `ei`, and `pi` (1 ≤ si ≤ ei ≤ m, -100 ≤ pi ≤ 100) — denoting an observation indicating a height change of `pi` for all sections between `si` and `ei`, inclusive, on a particular day. # Output - Output `m` integers: the net height change for each section from 1 to `m`. # Example Input ``` 3 5 3 1 2 3 2 4 -2 3 5 1 ``` Output ``` 3 1 2 -1 1 ``` # Explanation After 3 observations: - In section 1: +3 from day 1, net height change = 3 - In section 2: +3 from day 1, -2 from day 2, net height change = 1 - In section 3: -2 from day 2, +1 from day 3, net height change = -1 - In section 4: -2 from day 2, +1 from day 3, net height change = -1 - In section 5: +1 from day 3, net height change = 1 Thus, the net height changes for sections 1 through 5 would be: 3, 1, -1, -1, 1. **Note:** For efficient computation, consider using an algorithm with a time complexity of O(m + q) to handle the potentially large input sizes effectively.","solution":"def calculate_net_height_change(n, m, q, observations): Calculate the net height change for each section based on the given observations. :param n: Number of plants (not used in this solution) :param m: Number of sections :param q: Number of days/observations :param observations: List of tuples containing (si, ei, pi) :return: List of net height changes for each section from 1 to m # Initialize an array to store the difference of heights height_changes = [0] * (m + 1) # Apply the observations using a difference array approach for si, ei, pi in observations: height_changes[si - 1] += pi if ei < m: height_changes[ei] -= pi # Convert the difference array to the actual height changes net_height_changes = [0] * m current_change = 0 for i in range(m): current_change += height_changes[i] net_height_changes[i] = current_change return net_height_changes"},{"question":"Problem description. JNTU College is conducting another Warmup contest for students to enhance their problem-solving skills. This time, the challenge is related to binary representation and bit counting. Given a positive integer N, your task is to find the largest number less than or equal to N that has the maximum number of 1s in its binary representation. Input Input contains only a single integer N. Output Print the largest number less than or equal to N with the maximum number of 1s in its binary representation. Constraints 1 ≤ N ≤ 10,000 Example Input: 5 Output: 3 Explanation: The binary representation of 5 is 101, which has two 1s. The binary representations of numbers less than or equal to 5 are: 1 -> 1 (1 bit, 1 one) 2 -> 10 (2 bits, 1 one) 3 -> 11 (2 bits, 2 ones) 4 -> 100 (3 bits, 1 one) 5 -> 101 (3 bits, 2 ones) The number with the maximum number of 1s in its binary representation that is less than or equal to 5 is 3, which has two 1s. Hence, the output is 3.","solution":"def largest_number_with_max_ones(N): Returns the largest number less than or equal to N that has the maximum number of 1s in its binary representation. def count_ones(x): # Helper function to count the number of 1s in the binary representation of x return bin(x).count(\'1\') max_ones = 0 result = 0 for i in range(N + 1): current_ones = count_ones(i) if current_ones > max_ones: max_ones = current_ones result = i return result"},{"question":"Given an integer array `arr` of size `n`, partition the array into two subsets such that the sum of elements in both subsets is nearly equal. The absolute difference between the sums of subsets should be minimized. Return the minimum possible difference. # Constraints - 1 ≤ `n` ≤ 100 - 1 ≤ `arr[i]` ≤ 1000 # Input The input is given from Standard Input in the following format: ``` n arr_1 arr_2 ... arr_n ``` # Output Output an integer representing the minimum possible absolute difference between the sums of the two subsets. # Examples Example 1 **Input:** ``` 4 1 6 11 5 ``` **Output:** ``` 1 ``` Example 2 **Input:** ``` 3 2 3 5 ``` **Output:** ``` 0 ```","solution":"def min_subset_sum_difference(n, arr): total_sum = sum(arr) dp = [[False] * (total_sum + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True # Sum 0 can be achieved with any number of elements by taking no element for i in range(1, n + 1): for j in range(1, total_sum + 1): if arr[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]] else: dp[i][j] = dp[i-1][j] min_diff = total_sum for s1 in range(total_sum // 2 + 1): if dp[n][s1]: s2 = total_sum - s1 min_diff = min(min_diff, abs(s2 - s1)) return min_diff # Helper function to read input and call the solution def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) arr = list(map(int, data[1:])) result = min_subset_sum_difference(n, arr) print(result)"},{"question":"Given an integer array, you need to find and print the subarray with the maximum sum. A subarray is a contiguous part of an array. Input format: - The first line contains an integer T, the number of test cases. - Each test case consists of two lines, the first line is an integer N, the number of elements in the array. - The second line contains N space-separated integers, the elements of the array. Output format: For each test case, output the maximum sum of the subarray on a new line. SAMPLE INPUT 2 5 1 2 3 -2 5 4 -1 -2 -3 -4 SAMPLE OUTPUT 9 -1 Explanation In test case 1: The array is [1, 2, 3, -2, 5]. The subarray [1, 2, 3, -2, 5] has the maximum sum which is 9. In test case 2: The array is [-1, -2, -3, -4]. All the elements are negative, so the maximum sum subarray is [-1] with the sum of -1.","solution":"def max_subarray_sum(arr): Return the maximum sum of a contiguous subarray using Kadane\'s Algorithm. max_so_far = float(\'-inf\') max_ending_here = 0 for number in arr: max_ending_here = max_ending_here + number if max_so_far < max_ending_here: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] results.append(max_subarray_sum(arr)) return results"},{"question":"Janet has a list of names of her students along with their marks in Mathematics, Science, and English. She wants to find the top K students based on their average marks across the three subjects. If multiple students have the same average marks, they should be ordered alphabetically by their names. Help Janet by writing a program that does this task. Input The first line contains an integer t (1 ≤ t ≤ 50) — the number of test cases. The first line of each test case contains two integers n (1 ≤ n ≤ 1000) — the number of students, and K (1 ≤ K ≤ n) — the number of top students to find. The next n lines contain a student\'s name (a string of length 1 to 100) followed by three integers m1, m2, m3 (0 ≤ m1, m2, m3 ≤ 100) — the marks of the student in Mathematics, Science, and English, respectively. Output For each test case, output K lines, each containing the names of the top K students sorted by their average marks and then alphabetically if needed. Examples Input 2 4 2 Alice 78 82 91 Bob 88 90 85 Charlie 85 83 87 David 90 91 89 5 3 Eve 70 75 80 Frank 90 92 94 Grace 85 80 89 Heidi 95 96 90 Ivy 100 99 100 Output David Bob Ivy Heidi Frank Note In the first test case, the top 2 students are David with an average of (90+91+89)/3 = 90 and Bob with an average of (88+90+85)/3 = 87.6667. In the second test case, the top 3 students are Ivy with an average of (100+99+100)/3 = 99.6667, Heidi with an average of (95+96+90)/3 = 93.6667, and Frank with an average of (90+92+94)/3 = 92. For all cases where students have the same average marks, they are ordered alphabetically by their names.","solution":"def find_top_students(t, test_cases): results = [] for idx in range(t): n, K = test_cases[idx][0] students = test_cases[idx][1] students_sorted = sorted(students, key=lambda x: (-((x[1] + x[2] + x[3]) / 3), x[0])) results.append([student[0] for student in students_sorted[:K]]) return results"},{"question":"A software company is developing a simple gaming system. One of the game features allows players to collect and use special items called \\"energy crystals.\\" Each crystal has a unique energy value (a positive integer). Players can use their collected crystals to increase a total energy score, starting from zero. The goal is to determine the minimum number of crystals required to reach at least a target energy value T. You are given multiple test cases. In each test case, you are provided with N (the number of available crystals) and an array E of N positive integers, where E[i] represents the energy value of the i-th crystal. You will also be given the target energy value T. For each test case, print the minimum number of crystals required to reach at least T energy. If it is not possible to reach the target using the given crystals, print -1. Constraints: * 1 <= Number of test cases <= 10 * 1 <= N <= 1000 * 1 <= E[i] <= 1000 * 1 <= T <= 100000 Input The input is given from standard input in the following format: * The first number: H, the number of test cases. * For each test case: - N T - E_1 E_2 ... E_N Output For each test case, print the minimum number of crystals required to reach at least T energy. If it is not possible, print -1. Examples Input 2 4 15 2 3 5 7 5 8 1 2 3 4 5 Output 3 2","solution":"def min_crystals_needed(h, test_cases): results = [] for i in range(h): N, T, E = test_cases[i] E.sort(reverse=True) # Sort crystals in descending order by energy value total_energy = 0 crystal_count = 0 for energy in E: total_energy += energy crystal_count += 1 if total_energy >= T: results.append(crystal_count) break else: results.append(-1) return results # Example usage: # test_cases = [ # (4, 15, [2, 3, 5, 7]), # (5, 8, [1, 2, 3, 4, 5]) # ] # print(min_crystals_needed(2, test_cases))"},{"question":"Given a list of integers, your task is to determine whether any two numbers in the list add up to a given target integer. If such a pair exists, return the pair as a tuple (a, b) where `a` and `b` are the two numbers from the list that add up to the target. If no such pair exists, return -1. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: (2, 7) Explanation: 2 and 7 add up to 9. Example 2: Input: nums = [1, 2, 3, 4], target = 8 Output: -1 Explanation: No two numbers add up to 8. Your Task: You don\'t need to read input or print anything. Complete the function `findPair()` which takes the list `nums` and the integer `target` as input parameters and returns the tuple or -1. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) due to the extra space used by hashing. Constraints: - All numbers in the list are distinct. - 1 <= len(nums) <= 10^4 - -10^6 <= nums[i] <= 10^6 - -10^6 <= target <= 10^6","solution":"def findPair(nums, target): Returns a tuple (a, b) where a and b are two distinct numbers from nums that add up to target, or -1 if no such pair exists. num_set = set() for num in nums: if target - num in num_set: return (target - num, num) num_set.add(num) return -1"},{"question":"Alex is planning to take a road trip and wants to determine the total distance he will travel. He has a list of cities he plans to visit in order, and the distances between consecutive cities. Alex knows the total distance between each pair of cities but needs a program to sum these distances and give him the total trip distance. Rules: - The list of cities and corresponding distances will be provided as two separate lists. - The cities list will be a list of strings representing city names. - The distances list will be a list of integers where the ith element represents the distance between cities[i] and cities[i+1]. - The cities list will have at least 2 cities and the distances list will have cities.length - 1 elements. Examples: (cities) = [\\"New York\\", \\"Boston\\", \\"Chicago\\", \\"Dallas\\"] (distances) = [215, 996, 925] The total trip distance is : 2136 ------- (cities) = [\\"San Francisco\\", \\"Los Angeles\\", \\"Las Vegas\\"] (distances) = [381, 270] The total trip distance is : 651 ------- (cities) = [\\"Seattle\\", \\"Vancouver\\"] (distances) = [141] The total trip distance is : 141 Write a program to calculate the total trip distance for Alex given the list of cities and distances.","solution":"def total_trip_distance(cities, distances): Calculate the total trip distance given a list of cities and distances between consecutive cities. :param cities: List of city names. :param distances: List of distances between consecutive cities. :return: The total distance of the trip. return sum(distances)"},{"question":"Kinga found a peculiar book in her library on an old puzzle called \\"Word Transformations\\". The book explains that a player needs to transform one word into another using a specific set of rules. Each transformation consists of changing exactly one letter at a time, and each intermediate word during the transformation must also be a valid word from the provided dictionary. Given a dictionary of words and two words of the same length, the puzzle is to determine the minimum number of transformations needed to transform the start word into the end word, or state that it is not possible using the dictionary. Input The input consists of multiple lines: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of words in the dictionary. - The next n lines contain the words of the dictionary, each word having the same length k (1 ≤ k ≤ 10), consisting of lowercase English letters. - The next line contains the start word. - The final line contains the end word. Output Print the minimum number of transformations needed to transform the start word into the end word. If it is not possible, print -1. Examples Input 6 hot dot dog lot log cog hit cog Output 4 Input 4 abba acca effe fffe abcd effe Output -1 Note In the first sample, you can transform the start word \\"hit\\" to the end word \\"cog\\" using the following steps: - hit → hot - hot → dot - dot → dog - dog → cog In the second sample, there is no valid sequence of transformations from \\"abcd\\" to \\"effe\\" using the dictionary. In this puzzle, the solution is essentially searching for the shortest path in an unweighted graph, where each node is a word, and there is an edge between nodes if a single letter can transform one word to another in the dictionary.","solution":"from collections import deque def min_transformations(n, dictionary, start, end): if start == end: return 0 word_set = set(dictionary) if end not in word_set: return -1 def can_transform(word1, word2): Check if word1 can be transformed to word2 by changing exactly one letter. differences = sum(1 for a, b in zip(word1, word2) if a != b) return differences == 1 queue = deque([(start, 0)]) visited = set([start]) while queue: current_word, steps = queue.popleft() for word in list(word_set): # List to avoid runtime changes during iteration if can_transform(current_word, word): if word == end: return steps + 1 if word not in visited: visited.add(word) queue.append((word, steps + 1)) word_set.remove(word) return -1"},{"question":"Create a program to analyze the relationship between two rectangles on a plane. The rectangles are axis-aligned, meaning their sides are parallel to the x and y axes. Each rectangle is defined by the coordinates of its top-left and bottom-right corners. Input A sequence of multiple datasets is given as input. The end of the input is indicated by two lines of zeros. Each dataset is provided in the following format: x1 y1 x2 y2 x3 y3 x4 y4 Each line represents the coordinates of the top-left and bottom-right corners of the first and second rectangles, respectively. The coordinates are integers greater than or equal to 1 and less than or equal to 10,000. The number of datasets does not exceed 100. Output The relationship between the two rectangles should be determined for each dataset and output to one line in the following format: If the rectangles are identical i If one rectangle is completely within the other r1_ins_r2 or r2_ins_r1 If the rectangles overlap but neither is completely within the other o If the rectangles do not overlap at all n Example Input 1 4 5 1 2 3 6 2 5 5 8 8 6 6 7 7 3 3 6 6 1 4 5 1 0 0 0 0 Output o r2_ins_r1 n","solution":"def analyze_rectangles(data): results = [] def rect_type(r1, r2): x1, y1, x2, y2 = r1 x3, y3, x4, y4 = r2 if x1 == x3 and y1 == y3 and x2 == x4 and y2 == y4: return \'i\' if x1 >= x3 and y1 <= y3 and x2 <= x4 and y2 >= y4: return \'r1_ins_r2\' if x3 >= x1 and y3 <= y1 and x4 <= x2 and y4 >= y2: return \'r2_ins_r1\' if x1 > x4 or x3 > x2 or y1 < y4 or y3 < y2: return \'n\' return \'o\' for dataset in data: if not any(dataset): break r1 = dataset[:4] r2 = dataset[4:] results.append(rect_type(r1, r2)) return results"},{"question":"A string is traditionally associated with text and character manipulation. How can we capitalize on this? Convert the first letter of each word in the given string to uppercase. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000) — the input sentence composed of words separated by spaces (1 ≤ |word| ≤ 100). The string consists only of lowercase English letters and spaces. Output Output the sentence with the first letter of each word capitalized. Examples Input hello world Output Hello World Input coding is fun Output Coding Is Fun","solution":"def capitalize_words(s): Capitalizes the first letter of each word in the given string. :param s: The input string containing words separated by spaces. :return: A string with the first letter of each word capitalized. return \' \'.join(word.capitalize() for word in s.split())"},{"question":"Given a list of positive integers, each integer represents the height of a building in a skyline. The buildings are all contiguous, meaning each building is directly next to the one before it. You are tasked with calculating the maximum rectangular area possible in a histogram-like skyline made of the buildings\' heights. For example, given the list [2, 1, 5, 6, 2, 3], the corresponding skyline diagram is: ``` | | | | | | | | | | | | | | | ``` The largest possible rectangle that can be formed within this skyline has an area of 10 (formed by the buildings with heights [5, 6]). Write a function `maxRectangleArea` that calculates this maximum rectangular area. Example: Input: [2, 1, 5, 6, 2, 3] Output: 10 Input: [2, 4] Output: 4 Constraints: - The length of the input array is [1, 100]. - Each integer in the array represents the height of a building and will be in the range [1, 1000].","solution":"def maxRectangleArea(heights): Function to calculate the maximum rectangular area in a histogram-like skyline. stack = [] # Stack to store the indices of the histogram\'s bars max_area = 0 # Initialize max area index = 0 # Current index while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"A company has a list of employees and their respective salaries. The HR department wants to give a performance bonus to certain employees. The rules for giving the bonus are as follows: - If an employee\'s salary is less than 5000, they receive a 10% bonus. - If an employee\'s salary is in the range from 5000 to 20000 (both inclusive), they receive a 5% bonus. - Employees with salaries above 20000 do not receive any bonus. You need to write a function that takes the list of employee salaries and calculates the new salaries after applying the appropriate bonuses. Function Description Complete the function `applyBonuses` in the editor below. `applyBonuses` has the following parameter(s): - `float salaries[n]`: the list of employee salaries before bonuses Returns - `float[n]`: the updated list of employee salaries after applying the bonuses Input Format The first line contains a single integer, n, the number of employees. Each line i of the n subsequent lines contains a single float, `salaries[i]`. Constraints 1 leq n leq 100 0 leq salaries[i] leq 100000 Samples # Sample Input 0 ```plaintext 5 4000 6000 25000 7000 15000 ``` # Sample Output 0 ```plaintext 4400.0 6300.0 25000.0 7350.0 15750.0 ``` # Explanation 0 Employee 1 had a salary of 4000 and received a 10% bonus, so the new salary is 4000 * 1.10 = 4400.0. Employee 2 had a salary of 6000 and received a 5% bonus, so the new salary is 6000 * 1.05 = 6300.0. Employee 3 had a salary of 25000, so they did not receive any bonus and their new salary remains 25000.0. Employee 4 had a salary of 7000 and received a 5% bonus, so the new salary is 7000 * 1.05 = 7350.0. Employee 5 had a salary of 15000 and received a 5% bonus, so the new salary is 15000 * 1.05 = 15750.0.","solution":"def applyBonuses(salaries): Adjust the salaries of employees based on their respective bonuses. Params: - salaries (list of float): A list of employee salaries before bonuses. Returns: - list of float: The updated list of employee salaries after applying the bonuses. updated_salaries = [] for salary in salaries: if salary < 5000: bonus = salary * 0.10 elif 5000 <= salary <= 20000: bonus = salary * 0.05 else: bonus = 0 updated_salaries.append(salary + bonus) return updated_salaries"},{"question":"Given an array of n integers, you need to process q queries. Each query contains two integers l and r, and you need to determine the sum of the subarray that starts at index l and ends at index r. You need to print the result of each query. Note that the sum of the subarray should be taken modulo 1000000007 (10^9 + 7). ----- **Input** The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) – the size of the array and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) – the elements of the array. The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) – the indices of the subarray for each query. **Output** For each query, print the sum of the subarray from index l to r inclusive, modulo 1000000007. ----- **Examples** **Input:** 5 3 1 2 3 4 5 1 3 2 4 1 5 **Output:** 6 9 15 **Explanation:** For the first query (l = 1, r = 3), the subarray is [1, 2, 3], and the sum modulo 1000000007 is 6. For the second query (l = 2, r = 4), the subarray is [2, 3, 4], and the sum modulo 1000000007 is 9. For the third query (l = 1, r = 5), the subarray is [1, 2, 3, 4, 5], and the sum modulo 1000000007 is 15.","solution":"MOD = 1000000007 def preprocess_prefix_sums(arr): Preprocess the array to compute prefix sums. n = len(arr) prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = (prefix_sums[i - 1] + arr[i - 1]) % MOD return prefix_sums def query_sum(prefix_sums, l, r): Return the sum of subarray from index l to r (1-based index), modulo 1000000007. return (prefix_sums[r] - prefix_sums[l - 1] + MOD) % MOD def process_queries(n, q, arr, queries): Process the input array and queries, and return result for each query. prefix_sums = preprocess_prefix_sums(arr) results = [] for l, r in queries: results.append(query_sum(prefix_sums, l, r)) return results"},{"question":"You are given a list of integers, where each integer represents the number of tasks a worker needs to complete. Each worker takes exactly one unit of time to complete a task. A worker can switch to another task only after finishing the current one. The task of distributing the workload is done in such a way that the difference in the completion times between the worker who finishes the earliest and the worker who finishes the latest is minimized. Your task is to write a program that determines the minimum difference in completion times. -----Input----- A single line containing space-separated integers, where each integer denotes the number of tasks assigned to a worker. -----Output----- A single integer representing the minimum difference in completion times between the fastest and slowest worker. -----Example----- Input: 3 1 4 2 2 Output: 1","solution":"def min_completion_time_difference(tasks): Determines the minimum difference in completion times between the fastest and slowest worker. tasks.sort() min_diff = float(\'inf\') for i in range(len(tasks) - 1): min_diff = min(min_diff, tasks[i + 1] - tasks[i]) return 0 if min_diff == float(\'inf\') else min_diff"},{"question":"Given an array of integers, return the number of subarrays whose sum is equal to a given value. Example 1: Input: arr = [1, 1, 1], target = 2 Output: 2 Explanation: The subarrays [1, 1] (starting at index 0) and [1, 1] (starting at index 1) both sum to 2. Example 2: Input: arr = [1, 2, 3], target = 3 Output: 2 Explanation: The subarrays [1, 2] and [3] both sum to 3. Example 3: Input: arr = [1, -1, 0], target = 0 Output: 3 Explanation: The subarrays [1, -1] (starting at index 0), [-1, 0] (starting at index 1), and [0] (starting at index 2) all sum to 0. Note: 1 <= arr.length <= 10000 -1000 <= arr[i] <= 1000 -1000000 <= target <= 1000000","solution":"def count_subarrays_with_sum(arr, target): Returns the number of subarrays whose sum is equal to the given target. count = 0 cumulative_sum = 0 sum_dict = {0: 1} # Dictionary to store the cumulative sum frequencies for num in arr: cumulative_sum += num if (cumulative_sum - target) in sum_dict: count += sum_dict[cumulative_sum - target] sum_dict[cumulative_sum] = sum_dict.get(cumulative_sum, 0) + 1 return count"},{"question":"Senior developer Hannah has been tasked with optimizing a game server for better performance. She needs to ensure that the server can efficiently distribute player requests between several identical worker nodes. Each player request has a specific processing time, and the goal is to balance the load across all nodes such that the server processes all requests as quickly as possible. Your task is to help Hannah by implementing a function that will determine the minimum possible time required to process all requests given the constraints. # Input - The first line of the input contains an integer `T`, representing the number of test cases. The description of `T` test cases follows. - For each test case: - The first line contains two integers `N` and `M`, where `N` is the number of player requests, and `M` is the number of worker nodes. - The second line contains `N` integers, where each integer denotes the processing time required for a player request. # Output For each test case, output a single line containing one integer — the minimum time required to process all player requests. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ N, M ≤ 100,000 - 1 ≤ processing time of each request ≤ 1,000 # Example Input ``` 2 6 3 8 4 3 5 7 2 5 2 10 10 10 10 10 ``` Output ``` 10 30 ``` # Explanation Test case 1: There are 6 player requests with respective processing times `[8, 4, 3, 5, 7, 2]` and 3 worker nodes. An optimal distribution might be: - Node 1 processes [8, 2], total time = 10 - Node 2 processes [5, 4], total time = 9 - Node 3 processes [3, 7], total time = 10 Hence, the minimum possible time required to process all requests is `10`. Test case 2: There are 5 player requests each taking 10 units of time and 2 worker nodes. An optimal distribution might be: - Node 1 processes [10, 10, 10], total time = 30 - Node 2 processes [10, 10], total time = 20 Hence, the minimum possible time required to process all requests is `30`.","solution":"def min_processing_time(T, test_cases): from heapq import heappop, heappush results = [] for i in range(T): N, M = test_cases[i][0] processing_times = test_cases[i][1] # If the number of worker nodes is greater than or equal to the number of requests # The minimum time required is the maximum individual processing time if M >= N: results.append(max(processing_times)) continue # Use a min-heap to simulate assigning tasks to worker nodes and track node load heap = [0] * M for time in sorted(processing_times, reverse=True): least_loaded_node = heappop(heap) heappush(heap, least_loaded_node + time) # The total time to process all requests would be the load of the most loaded node results.append(max(heap)) return results"},{"question":"You are given an array of integers representing the heights of students in a classroom. Your task is to sort this array in such a way that the tallest student is at the first position and the shortest student is at the last position. However, there is a twist: if two students have the same height, their relative order should remain as it was in the original array (i.e., you need to maintain the stability of the sort). Implement a function called `sort_heights` which accepts an array of integers as input and returns a new array that is sorted according to the described condition. ------ Input ------ The input is a single line containing space-separated integers representing the heights of the students. ------ Output ------ Output a single line containing the sorted heights in the required order. ------ Constraints ------ 1 ≤ text{number of students} ≤ 1000 1 ≤ text{height of each student} ≤ 300 ------ Sample Input 1 ------ 160 180 165 170 165 160 ------ Sample Output 1 ------ 180 170 165 165 160 160","solution":"def sort_heights(heights): Sort the array of heights such that the tallest student is at the first position and the shortest at the last. Maintain the relative order of students with the same height. return sorted(heights, reverse=True, key=lambda x: x)"},{"question":"Jane is a software developer who loves challenges. She came across an interesting problem related to string manipulation and decided to take it up during a hackathon. The problem involves transforming one string into another by following a specific set of operations. The allowable operations are: 1. Add a character to any position in the string. 2. Remove any character from the string. 3. Replace any character in the string with another character. Jane wants to find the minimum number of operations required to transform a given string `s1` into another string `s2`. Can you help her with this task? Write a function `min_operations(s1, s2)` that takes two strings `s1` and `s2` and returns the minimum number of operations required to transform `s1` into `s2`. # Input - `s1`: A string of length `m` (0 ≤ m ≤ 1000). It is the initial string. - `s2`: A string of length `n` (0 ≤ n ≤ 1000). It is the target string. # Output - An integer representing the minimum number of operations required to transform `s1` into `s2`. # Example Input ```python s1 = \\"kitten\\" s2 = \\"sitting\\" ``` Output ```python 3 ``` Explanation: Convert `kitten` to `sitting` using the following three operations: 1. Replace \'k\' with \'s\'. 2. Replace \'e\' with \'i\'. 3. Add \'g\' to the end. Input ```python s1 = \\"flaw\\" s2 = \\"lawn\\" ``` Output ```python 2 ``` Explanation: Convert `flaw` to `lawn` using the following two operations: 1. Remove \'f\'. 2. Add \'n\' to the end. # Note The problem is a classical example of finding the edit distance between two strings, which can be solved using dynamic programming. Hence, your solution should efficiently handle the worst-case time complexity.","solution":"def min_operations(s1, s2): Calculate the minimum number of operations required to transform string s1 into string s2. :param s1: str, initial string :param s2: str, target string :return: int, minimum number of operations m, n = len(s1), len(s2) # Initialize a dp array where dp[i][j] represents the minimum number of operations # required to convert s1[0..i-1] to s2[0..j-1] dp = [[0] * (n + 1) for _ in range(m + 1)] # If the first string is empty, the only option is to insert all characters of the second string for j in range(1, n + 1): dp[0][j] = j # If the second string is empty, the only option is to remove all characters of the first string for i in range(1, m + 1): dp[i][0] = i # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: # If the characters are the same, no new operation is needed dp[i][j] = dp[i - 1][j - 1] else: # If the characters are different, consider all three operations dp[i][j] = min(dp[i - 1][j] + 1, # Remove dp[i][j - 1] + 1, # Add dp[i - 1][j - 1] + 1 # Replace ) # The bottom-right corner will contain the answer return dp[m][n]"},{"question":"# Task Given an input string representing a mathematical expression, your task is to evaluate the expression and return the result. The expression can include addition, subtraction, multiplication, division, and parentheses. # Input/Output - **[input]** string `expression` A string containing a valid mathematical expression. The string will not contain any spaces or invalid characters. The input string will always be non-empty and contain at least one operator among `+`, `-`, `*`, `/`, `(`, `)`. - **[output]** a floating-point number The result of the evaluated expression. # Example ```python evaluate_expression(\\"3+2*2\\") => 7.0 evaluate_expression(\\"(1+(4+5+2)-3)+(6+8)\\") => 23.0 evaluate_expression(\\"2*(5+5*2)/3+(6/2+8)\\") => 21.0 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression and returns the result as a float. Supported operations: +, -, *, /, (, ) def evaluate(tokens): def operate(operators, values): right = values.pop() left = values.pop() operator = operators.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left / right) operators = [] values = [] i = 0 while i < len(tokens): if tokens[i].isdigit(): value = 0 while i < len(tokens) and tokens[i].isdigit(): value = value * 10 + int(tokens[i]) i += 1 values.append(value) i -= 1 elif tokens[i] == \'(\': operators.append(tokens[i]) elif tokens[i] == \')\': while operators and operators[-1] != \'(\': operate(operators, values) operators.pop() else: while (operators and operators[-1] in \\"+-*/\\" and precedence(operators[-1]) >= precedence(tokens[i])): operate(operators, values) operators.append(tokens[i]) i += 1 while operators: operate(operators, values) return values[0] def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 return float(evaluate(list(expression)))"},{"question":"The company has a system where messages can be exchanged internally. To report any inappropriate messages, users attach a rating to each message, and each user is allowed to rate a message only once. Your task is to find the rating frequency of each user. Given multiple exchanges, determine which user had the maximum occurrences of a specific rating. -----Input:----- - First-line will contain M, the number of message exchanges. Then the message details follow. - Each message exchange contains three items: - User ID (an integer which is unique for each user) - Message ID (an integer which is unique for each message) - Rating value (an integer between 1 and 5 inclusive) -----Output:----- For each rating value from 1 to 5, output the User ID who rated the maximum number of messages with that specific rating. If there is a tie, output the smallest User ID. -----Constraints----- - 1 leq M leq 10^6 - 1 leq User ID leq 10^5 - 1 leq Message ID leq 10^6 - 1 leq Rating value leq 5 -----Sample Input:----- 8 1 101 5 2 102 4 1 103 5 3 104 2 2 105 4 1 106 3 4 107 2 2 108 1 -----Sample Output:----- 2 4 1 2 1 -----EXPLANATION:----- For rating value 1, User ID 2 has rated 1 message. For rating value 2, User IDs 3 and 4 both rated 1 message, so we take the smallest User ID which is 3. For rating value 3, User ID 1 has rated 1 message. For rating value 4, User ID 2 rated 2 messages. For rating value 5, User ID 1 rated 2 messages.","solution":"from collections import defaultdict def find_max_rating_users(M, messages): rating_counts = defaultdict(lambda: defaultdict(int)) for user_id, message_id, rating_value in messages: rating_counts[rating_value][user_id] += 1 result = [] for rating_value in range(1, 6): users = rating_counts[rating_value] if users: max_ratings = max(users.values()) max_users = [user for user, count in users.items() if count == max_ratings] result.append(min(max_users)) else: result.append(\\"No ratings\\") return result"},{"question":"Write a program that determines if an array of positive integers is strictly increasing, strictly decreasing, or neither. Input The input is given in the following format: N a_1 a_2 ... a_N Where N (1 ≤ N ≤ 100) represents the number of integers in the array, and a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^6) are the integers in the array, provided in a single line, separated by spaces. Output Output one of the following: - \\"Increasing\\" if the array is strictly increasing, - \\"Decreasing\\" if the array is strictly decreasing, - \\"Neither\\" if the array is neither strictly increasing nor strictly decreasing. Example Input 5 1 2 3 4 5 Output Increasing Input 4 10 8 6 2 Output Decreasing Input 6 1 3 2 4 5 7 Output Neither","solution":"def determine_sequence(arr): Determines if the array of positive integers is strictly increasing, strictly decreasing, or neither. Parameters: arr (list of int): A list of positive integers. Returns: str: \\"Increasing\\", \\"Decreasing\\", or \\"Neither\\". if all(arr[i] < arr[i + 1] for i in range(len(arr) - 1)): return \\"Increasing\\" elif all(arr[i] > arr[i + 1] for i in range(len(arr) - 1)): return \\"Decreasing\\" else: return \\"Neither\\""},{"question":"A group of friends wants to play a card game. They have a deck of cards where each card has a number written on it. The number on each card can be negative, zero, or positive. Their goal is to find the highest possible score they can get by choosing a contiguous subset of cards from the deck. The score of a subset is defined as the sum of the numbers on the chosen cards. Your task is to help them determine this maximum possible score. # Input - The first line of the input contains an integer `n` (1 ≤ n ≤ 3 ⋅ 10^5), the number of cards in the deck. - The second line contains `n` integers a_1, a_2, ..., a_n (-10^5 ≤ a_i ≤ 10^5), the numbers on the cards. # Output - Output a single integer, the maximum score of any contiguous subset of the cards. # Examples Example 1: # Input: ``` 5 -2 1 -3 4 -1 ``` # Output: ``` 4 ``` # Explanation: The highest possible score can be obtained by choosing the fourth card alone (i.e., the subset [4]). Example 2: # Input: ``` 8 -2 -3 4 -1 2 1 -5 4 ``` # Output: ``` 6 ``` # Explanation: The highest possible score can be obtained by choosing the subset [4, -1, 2, 1], which sums up to 6. # Notes - The problem can be solved efficiently using the Kadane\'s Algorithm for maximum subarray sum.","solution":"def max_contiguous_subset_score(n, cards): Returns the maximum possible score of any contiguous subset of the cards. Uses Kadane\'s Algorithm to find the maximum sum of a contiguous subarray. :param n: Integer, number of cards in the deck :param cards: List of integers, numbers on the cards :return: Integer, the maximum score of any contiguous subset of the cards max_ending_here = max_so_far = cards[0] for i in range(1, n): max_ending_here = max(cards[i], max_ending_here + cards[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"David loves hiking in the mountains and he likes challenging trails. He plans to hike a series of trails in the upcoming weekends. Each trail has a certain difficulty level associated with it, and David wants to maximize his training efficiency. However, he has a specific way of choosing his trails: - He wants to hike the trails in such a manner that the difficulty level strictly increases each weekend. Given the difficulty levels of all the trails, help David find the longest sequence of trails he can hike such that the difficulty level strictly increases each weekend. Input The first line contains an integer T denoting the number of test cases. For each test case: - The first line contains an integer N denoting the number of trails. - The second line contains N integers separated by a single space denoting the difficulty levels of the trails. Output For each test case, print a single line containing the length of the longest strictly increasing sequence of trails. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Difficulty level of each trail ≤ 10^6 SAMPLE INPUT 2 6 1 3 2 5 4 7 5 5 3 4 8 6 SAMPLE OUTPUT 4 3 Explanation For the first test case, the longest strictly increasing sequence of trails that David can hike is [1, 2, 4, 7] which has a length of 4. For the second test case, the longest strictly increasing sequence of trails that David can hike is [3, 4, 8] which has a length of 3.","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest increasing subsequence. from bisect import bisect_left if not nums: return 0 lis = [] for num in nums: pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) def find_longest_sequences(test_cases): results = [] for n, difficulties in test_cases: result = longest_increasing_subsequence(difficulties) results.append(result) return results"},{"question":"Jessica and Michael are playing a game with a box of numbered balls. Each ball is uniquely numbered from 1 to n. They decide to play a game where they pick balls from the box at random, one at a time, and keep track of the sequence of balls drawn. If at any point, the sequence of ball numbers can be rearranged to form a sequence of consecutive integers, they win the game. Your task is to determine the minimum number of balls they need to draw to win the game. -----Input----- - The first line of the input has a single integer n (1 leq n leq 10^5), the number of balls in the box. - The second line contains n space-separated integers, the sequence of balls drawn from the box. -----Output----- Print the minimum number of balls that need to be drawn to win the game. If it’s impossible to win the game, print “impossible”. -----Examples----- Sample Input 1: 5 2 4 3 6 1 5 Sample Output 1: 5 Sample Input 2: 5 1 2 8 4 5 Sample Output 2: impossible","solution":"def min_balls_to_win(n, balls): balls = sorted(balls) for i in range(n): if balls[i] - balls[0] == i: if i + 1 == n: return n else: break return \\"impossible\\""},{"question":"Task Design a function to simulate the behavior of an elevator system in a building with multiple floors. The elevator should be able to move up and down, picking up requests from different floors and taking passengers to their desired destinations. The elevator operates on simple rules described below. Rules: 1. The elevator can be at a single floor at any given time. 2. There are two types of requests: 1. Passengers at a floor can request the elevator to come to their floor. 2. Inside the elevator, passengers can request to go to a specific floor. 3. The elevator should prioritize requests in the order they are received, but it can batch requests if they are in the same direction of travel. 4. If there are no requests, the elevator will remain idle at its current floor. Function Specification: ```python class Elevator: def __init__(self, floors): self.current_floor = 0 # Elevator starts at ground floor self.requests = [] # List of tuples (request type, floor number) self.floors = floors # Total number of floors in the building def call_elevator(self, request_floor): Add request to pick up passengers from `request_floor`. self.requests.append((\'call\', request_floor)) def select_floor(self, destination_floor): Add request to take elevator to `destination_floor`. self.requests.append((\'select\', destination_floor)) def step(self): Simulate a single step of the elevator\'s movement. if not self.requests: return self.current_floor # Elevator remains where it is if no requests request_type, floor = self.requests.pop(0) if request_type == \'call\': self._move_to_floor(floor) elif request_type == \'select\': self._move_to_floor(floor) def _move_to_floor(self, floor): Move the elevator to the target floor. if floor >= 0 and floor < self.floors: self.current_floor = floor def simulate_elevator(): elevator = Elevator(floors=10) # Example request queue: elevator.call_elevator(2) # Passenger at floor 2 elevator.select_floor(5) # Wants to go to floor 5 elevator.call_elevator(7) # New request at floor 7 elevator.select_floor(3) # Wants to go to floor 3 # Simulate the elevator\'s steps for _ in range(4): print(\\"Elevator current floor:\\", elevator.step()) simulate_elevator() ``` Expected Output: The elevator should handle the simulated requests in the order they are received. The printed output for the simulate_elevator function should evolve based on the requests and steps taken: ``` Elevator current floor: 2 Elevator current floor: 5 Elevator current floor: 7 Elevator current floor: 3 ```","solution":"class Elevator: def __init__(self, floors): self.current_floor = 0 # Elevator starts at ground floor self.requests = [] # List of tuples (request type, floor number) self.floors = floors # Total number of floors in the building def call_elevator(self, request_floor): Add request to pick up passengers from `request_floor`. self.requests.append((\'call\', request_floor)) def select_floor(self, destination_floor): Add request to take elevator to `destination_floor`. self.requests.append((\'select\', destination_floor)) def step(self): Simulate a single step of the elevator\'s movement. if not self.requests: return self.current_floor # Elevator remains where it is if no requests request_type, floor = self.requests.pop(0) if request_type == \'call\': self._move_to_floor(floor) elif request_type == \'select\': self._move_to_floor(floor) return self.current_floor def _move_to_floor(self, floor): Move the elevator to the target floor. if floor >= 0 and floor < self.floors: self.current_floor = floor def simulate_elevator(): elevator = Elevator(floors=10) # Example request queue: elevator.call_elevator(2) # Passenger at floor 2 elevator.select_floor(5) # Wants to go to floor 5 elevator.call_elevator(7) # New request at floor 7 elevator.select_floor(3) # Wants to go to floor 3 # Simulate the elevator\'s steps for _ in range(4): print(\\"Elevator current floor:\\", elevator.step()) simulate_elevator()"},{"question":"Alice has a small shop that sells various candies. To make her accounting easier, she has decided to assign a sweetness value to each candy and wants to organize them in a specific manner. Alice\'s shop can display candies in a single row, where the arrangement of candies should meet specific criteria based on their sweetness level. You are given the sweetness values of n candies on a list, and you need to determine the maximum length of a subarray that meets the following properties: 1. The subarray must be strictly increasing in sweetness values from left to right. 2. There must be no two candies in the subarray with the same sweetness value. You need to help Alice by finding the maximum possible length of such a subarray. Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of candies. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 109) — the sweetness values of the candies. Output Output a single integer — the maximum length of a subarray that is strictly increasing in sweetness values and has no two candies with the same sweetness value. Examples Input 5 1 2 2 3 4 Output 3 Input 6 9 8 1 2 3 5 Output 4 Note In the first example, the longest subarray that meets the properties is [1, 2, 3, 4] but due to repeated value \'2\', the effective subarray we take is either [1, 2] or [2, 3, 4] which in turn gives us the maximum length of 3. In the second example, the longest subarray that meets the properties is [1, 2, 3, 5] which doesn\'t have any repeated values and is strictly increasing hence the length is 4.","solution":"def max_strictly_increasing_subarray_length(n, sweetness_values): if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if sweetness_values[i] > sweetness_values[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a function `average_positive_numbers` that takes a list of numbers and returns the average of the positive numbers in the list. If there are no positive numbers, return 0. For example: - For `[1, -2, 3, 4]`, it should return `2.6666666666666665` because the average of `1`, `3`, and `4` is `2.6666666666666665`. - For `[-1, -2, -3]`, it should return `0` because there are no positive numbers. ```if:racket In Racket, use a list instead of an array, so \'(1 -2 3 4) should return 2.6666666666666665. ```","solution":"def average_positive_numbers(numbers): Returns the average of positive numbers in the list. If there are no positive numbers, returns 0. positive_numbers = [num for num in numbers if num > 0] if not positive_numbers: return 0 return sum(positive_numbers) / len(positive_numbers)"},{"question":"Alice is organizing a party and she wants to give each guest an even number of candies. She has C candies in total and she needs to evenly distribute them among G guests. Determine if she can give each guest an even number of candies. -----Constraints----- - C is an integer. - G is an integer. - 1 leq C leq 1000 - 1 leq G leq 100 -----Input----- Input is given from Standard Input in the following format: C G -----Output----- Print \\"YES\\" if Alice can give each guest an even number of candies, otherwise print \\"NO\\". -----Sample Input----- 8 4 -----Sample Output----- YES By distributing 2 candies to each guest, Alice can give each of the 4 guests an even number of candies (2, 2, 2, 2), using a total of 8 candies.","solution":"def can_distribute_even_candies(C, G): Determines if C candies can be distributed evenly among G guests such that each guest gets an even number of candies. Args: C (int): Total number of candies. G (int): Total number of guests. Returns: str: \\"YES\\" if candies can be distributed evenly with even number for each guest, otherwise \\"NO\\". return \\"YES\\" if (C % G == 0) and ((C // G) % 2 == 0) else \\"NO\\""},{"question":"# Problem Description You have been hired as a software engineer at a warehouse where a robotic system is employed. The robots navigate through a grid to collect and organize packages in specific locations. Each robot can move in four possible directions: up, down, left, and right. Your task is to determine the shortest path a robot should take to reach a specified target within the warehouse grid. # Input 1. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) – the number of rows and columns of the grid. 2. The second line contains two integers `sr` and `sc` (0 ≤ sr < n, 0 ≤ sc < m) – the starting position of the robot. 3. The third line contains two integers `tr` and `tc` (0 ≤ tr < n, 0 ≤ tc < m) – the target position the robot needs to reach. 4. The next `n` lines each contain `m` integers (`0` or `1`) representing the grid, where `0` means the cell is free and `1` means the cell is an obstacle that the robot cannot pass through. # Output Print the minimum number of steps the robot should take to reach the target position. If the target position is not reachable, print `-1`. # Example Example 1 Input: ``` 5 5 0 0 4 4 0 0 0 0 0 0 1 1 1 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 ``` Output: ``` 8 ``` Example 2 Input: ``` 3 3 0 0 2 2 0 1 0 0 1 0 0 1 0 ``` Output: ``` -1 ``` # Notes - Robot can only move up, down, left, or right to an adjacent cell. - If the starting and target positions are the same, the output is `0`. - Ensure the robot never moves outside the boundary or into an obstacle (\'1\'). # Functions You need to implement a function that takes in the input parameters and returns the minimum number of steps or `-1` if the target is unreachable. The function signature is as follows: ```python def minimum_steps_to_target(n: int, m: int, sr: int, sc: int, tr: int, tc: int, grid: List[List[int]]) -> int: # implementation here ```","solution":"from collections import deque from typing import List def minimum_steps_to_target(n: int, m: int, sr: int, sc: int, tr: int, tc: int, grid: List[List[int]]) -> int: if sr == tr and sc == tc: return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(sr, sc, 0)]) # (row, col, steps) visited = set([(sr, sc)]) while queue: r, c, steps = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == 0: if nr == tr and nc == tc: return steps + 1 queue.append((nr, nc, steps + 1)) visited.add((nr, nc)) return -1"},{"question":"Robert the Scientist is working in his laboratory to create a special grid that adheres to a unique set of rules. This grid is an n by m matrix, where each cell can either contain an \'A\' molecule or a \'B\' molecule. The matrix is organized such that no two \'A\' molecules can be in the same row or column. Robert needs to determine how many possible configurations of \'A\' and \'B\' molecules can be made under these constraints. Given the dimensions of the grid and that each configuration must have exactly k \'A\' molecules placed in such a way that they abide by the above rule, calculate the number of valid configurations. Input The first line contains three space-separated integers: n, m, and k (1 ≤ n, m ≤ 10, 0 ≤ k ≤ min(n, m)), where n is the number of rows, m is the number of columns, and k is the exact number of \'A\' molecules to be placed. Output Print a single integer, which is the number of valid configurations. Examples Input 2 2 2 Output 2 Input 3 3 1 Output 9 Notes 1. In the first example, the two possible configurations are: - A B B A - B A A B 2. In the second example, each cell in the 3x3 grid can independently be an \'A\' since there is only one \'A\' molecule.","solution":"from math import comb def count_valid_configurations(n, m, k): Returns the number of valid configurations of an n by m grid with exactly k \'A\' molecules such that no two \'A\' molecules are in the same row or column. if k > min(n, m): return 0 return comb(n, k) * comb(m, k) * factorial(k) def factorial(x): Returns the factorial of x. if x == 0: return 1 res = 1 for i in range(1, x + 1): res *= i return res"},{"question":"Your task is to implement a function that takes a nested dictionary and flattens it, converting the nested keys into a single key with the different parts separated by a delimiter. For example, given the nested dictionary: ```python data = { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3, \\"f\\": 4 } } } ``` With the delimiter `.`: The resulting flat dictionary should be: ```python result = { \\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3, \\"b.d.f\\": 4 } ``` Your function should take in two parameters: the nested dictionary and the delimiter, and it should return a new dictionary with flattened keys. You can assume the input dictionary is valid and that keys in the nested dictionaries do not contain the delimiter. Handle any level of nesting in the given dictionary.","solution":"def flatten_dict(d, delimiter=\\".\\", parent_key=\\"\\"): Flattens a nested dictionary by concatenating keys with a given delimiter. Parameters: d (dict): The nested dictionary to flatten delimiter (str): The delimiter to use between keys parent_key (str): The concatenated key for recursive calls (used internally) Returns: dict: A new dictionary with flattened keys items = [] for k, v in d.items(): new_key = f\\"{parent_key}{delimiter}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, delimiter, new_key).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Given an integer array nums and an integer target, write a function to find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case starts with an integer N, denoting the number of elements in the array nums. - The next line contains N space-separated integers representing the values of the array. - The final line contains a single integer target. ------ Output Format ------ For each test case, output a single integer which is the sum of the three integers that are closest to the target. ------ Constraints ------ 1 ≤ T ≤ 100 3 ≤ N ≤ 10^3 −10^3 ≤ nums[i] ≤ 10^3 −10^4 ≤ target ≤ 10^4 ------ Sample Input 1 ------ 2 4 -1 2 1 -4 1 5 1 1 1 0 5 4 ------ Sample Output 1 ------ 2 3 ----- Explanation ------ Test Case 1: The sum that is closest to the target 1 is 2. (-1 + 2 + 1 = 2) Test Case 2: The sum that is closest to the target 4 is 3. (1 + 1 + 1 = 3)","solution":"def three_sum_closest(nums, target): Finds the sum of three integers in nums such that the sum is closest to the target. nums.sort() closest_sum = float(\'inf\') for i in range(len(nums) - 2): left, right = i + 1, len(nums) - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if abs(current_sum - target) < abs(closest_sum - target): closest_sum = current_sum if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: return current_sum return closest_sum"},{"question":"Write a function that accepts a list of integers and an integer `k`, and returns a list of integers representing the `k` values that occur most frequently in the input list. If multiple values have the same frequency, prioritize the smaller number first. # Example ```python def top_k_frequent_elements(nums, k): # Your implementation here pass # Example usage: print(top_k_frequent_elements([1, 1, 1, 2, 2, 3], 2)) # Output: [1, 2] print(top_k_frequent_elements([1, 1, 1, 2, 2, 3, 3, 4], 3)) # Output: [1, 2, 3] print(top_k_frequent_elements([4, 4, 1, 3, 3, 3, 2, 2, 1, 1], 2)) # Output: [1, 3] ``` # Constraints - The input array\'s length won\'t exceed `10^5`. - The elements of the array are in the range `-10^4` to `10^4`. - The value of `k` will always be less than or equal to the number of unique elements in the array.","solution":"from collections import Counter def top_k_frequent_elements(nums, k): Returns the k most frequent elements in the given list of integers. If multiple elements have the same frequency, the smaller number is prioritized. # Count the frequency of each element frequency = Counter(nums) # Sort the items by frequency in descending order, and by number in ascending order if frequencies are the same sorted_items = sorted(frequency.items(), key=lambda x: (-x[1], x[0])) # Get the first k elements return [item[0] for item in sorted_items[:k]]"},{"question":"A company has a set of employees, each identified by a unique ID number. Each employee has a performance score that is initially zero. Employees can receive performance updates in the form of score additions. The company also has a system where it can decrease the performance score of any employee to a specific value if it is above that value. Your task is to process a series of performance updates and score adjustments, and then report the final performance score of each employee. -----Input----- The first line contains a single integer n (1 le n le 2 cdot 10^{5}) — the number of employees. The second line contains a single integer q (1 le q le 2 cdot 10^{5}) — the number of events. Each of the next q lines contains an event in one of the following formats: - `1 id x` (1 le id le n, 0 le x le 10^{5}): This event increases the performance score of employee with ID `id` by `x`. - `2 x` (0 le x le 10^{5}): This event sets the performance scores of all employees who have a performance score greater than `x` to be exactly `x`. The events are given in chronological order. -----Output----- Print n integers — the performance scores of all employees after processing all events. -----Examples----- Input 5 4 1 3 20 1 2 5 2 10 1 4 7 Output 0 5 10 7 0 Input 3 3 1 1 15 1 3 25 2 20 Output 15 0 20","solution":"def update_performance(n, q, events): scores = [0] * n for event in events: if event[0] == 1: # Increase the score of employee id by x id, x = event[1] - 1, event[2] scores[id] += x elif event[0] == 2: # Set performance scores above x to be exactly x x = event[1] scores = [min(score, x) for score in scores] return scores"},{"question":"Hannah loves to play with her string of colored lights. The string consists of N bulbs, each either turned on (\'1\') or off (\'0\'). Being resourceful, Hannah wants to ensure any segment of the lights is either fully on or fully off to create beautiful patterns. She has a special switch: when she toggles a bulb at position i from off to on or vice versa, the change propagates to all adjacent bulbs that have the same initial state. For instance, if Hannah toggles a \'0\' bulb to \'1\', all adjacent \'0\' bulbs will also be toggled to \'1\' until it reaches a bulb that is \'1\'. Similarly, toggling \'1\' to \'0\' will turn off adjacent \'1\' bulbs until encountering a \'0\'. Hannah wants to determine the minimum number of times she has to toggle a bulb such that every single bulb in the string is either all on or all off. ------ Input Format ------ - The first line will contain T, the number of test cases. The test cases follow. - The first line of each test case contains an integer N, the number of bulbs in the string. - The second line of each test case contains a binary string S of length N, representing the state of each bulb (either \'0\' or \'1\'). ------ Output Format ------ For each test case, output a single integer denoting the minimum number of times Hannah has to toggle a bulb such that all bulbs have the same state at the end. ------ Constraints ------ 1 leq T leq 10^4 1 leq N leq 10^5 - The sum of N over all test cases does not exceed 10^6. - S contains only characters \'0\' and \'1\'. ----- Sample Input 1 ------ 3 6 001100 4 1010 5 11111 ----- Sample Output 1 ------ 1 2 0 ----- Explanation 1 ------ Test case 1: By toggling the third bulb (0 to 1), the string becomes 111100, ensuring the first four bulbs are all on. Then, toggling any \'0\' bulb at the end will turn out all bulbs on. Test case 2: By toggling the second bulb (0 to 1), the string becomes 1110, another toggle on the third bulb will result in 1111. Thus, two toggles are needed to make all bulbs on. Test case 3: All the bulbs are already in the same state. No toggling is required.","solution":"def min_toggles_to_uniform(T, test_cases): results = [] for case in test_cases: N, S = case # Count the number of transitions from \'0\' to \'1\' or \'1\' to \'0\' transitions = sum(1 for i in range(1, N) if S[i] != S[i - 1]) # Divide the transitions by 2 and round up to get the number of groups min_toggles = (transitions + 1) // 2 results.append(min_toggles) return results"},{"question":"Given an array of integers, you want to find the length of the longest subarray that contains at most two distinct integers. A subarray is a contiguous part of an array. -----Input----- The first line of input contains an integer n (1 leq n leq 10^5), the number of elements in the array. The second line contains n space-separated integers a_i (-10^5 leq a_i leq 10^5), the elements of the array. -----Output----- Output a single integer, the length of the longest subarray that contains at most two distinct integers. -----Examples----- Input 7 4 3 5 5 6 2 2 Output 3 Input 10 1 2 1 2 3 3 2 2 2 1 Output 6 -----Explanation----- In the first example, the longest subarray with at most two distinct integers is [5, 5, 6] or [6, 2, 2], both of which have a length of 3. In the second example, the longest subarray with at most two distinct integers is [3, 3, 2, 2, 2, 1] with a length of 6.","solution":"def longest_subarray_with_two_distinct(nums): from collections import defaultdict if len(nums) == 0: return 0 last_occurrence = defaultdict(int) max_length = start = 0 for end in range(len(nums)): last_occurrence[nums[end]] = end if len(last_occurrence) > 2: min_last_occurrence = min(last_occurrence.values()) del last_occurrence[nums[min_last_occurrence]] start = min_last_occurrence + 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given an integer n as input, determine if the number is a perfect square. Print \\"Yes\\" if it is a perfect square, otherwise print \\"No\\". -----Constraints----- - 1 leq n leq 100 - n is an integer. -----Input----- Input is given from Standard Input in the following format: n -----Output----- Print \\"Yes\\" if n is a perfect square, otherwise print \\"No\\". -----Sample Input----- 16 -----Sample Output----- Yes -----Sample Input----- 17 -----Sample Output----- No When n = 16, since 4 * 4 = 16, the output should be \\"Yes\\". For n = 17, as it\'s not a perfect square of any integer, the output should be \\"No\\".","solution":"def is_perfect_square(n): Determines if n is a perfect square. Returns \\"Yes\\" if it is a perfect square, otherwise returns \\"No\\". root = int(n**0.5) if root * root == n: return \\"Yes\\" else: return \\"No\\""},{"question":"A new startup has gained popularity for its innovative messaging system. The system works by allowing users to send specific types of messages that contain numeric codes. Each sequence of messages a user sends forms a list of integers. The system has a special feature that can merge two such lists into a single list while maintaining the order. Your task is to write a function that can handle the merging of multiple lists of integers, ensuring the order of their elements from each contributing list is preserved. Each merge operation should take exactly two lists, and the final result should be a single list containing all merged elements. Constraints: 1 ≤ m ≤ 1000, where m is the number of lists to be merged. 1 ≤ len(list[i]) ≤ 1000, where len(list[i]) is the length of the ith list. -10^6 ≤ list[i][j] ≤ 10^6, where list[i][j] is the jth element of the ith list. 1 ≤ n ≤ 1000, where n is the number of merge operations. Input: First line of input will contain an integer m denoting the number of lists. The next m lines contain integers separated by spaces denoting the elements of each list. Next line contains an integer n denoting the number of merge operations. The following n lines, each containing two integers xi and yi (1 ≤ xi, yi ≤ m), represent indices of the lists to merge. Output: Output the merged list after all operations are performed. SAMPLE INPUT 3 1 2 3 4 5 6 7 8 9 2 1 2 1 3 SAMPLE OUTPUT 1 2 3 4 5 6 7 8 9","solution":"def merge_lists(lists, operations): Function to merge multiple lists based on the given merge operations. Parameters: lists (List[List[int]]): A list of lists containing integers. operations (List[Tuple[int, int]]): A list of tuples where each tuple contains two integers representing indices of lists to merge. Returns: List[int]: The final merged list after all operations are completed. for x, y in operations: lists[x - 1].extend(lists[y - 1]) lists[y - 1] = [] # Collecting all non-empty lists merged_list = [] for lst in lists: if lst: merged_list.extend(lst) return merged_list # This function reads input, processes it, and returns the result for testing def process_input_and_merge(data): lines = data.strip().split(\'n\') m = int(lines[0].strip()) lists = [] for i in range(1, m + 1): lists.append(list(map(int, lines[i].strip().split()))) n = int(lines[m + 1].strip()) operations = [] for i in range(m + 2, m + 2 + n): x, y = map(int, lines[i].strip().split()) operations.append((x, y)) result = merge_lists(lists, operations) return result"},{"question":"You are given a list of integers representing the prices of different items available in a store. You have a total amount of money in your wallet and you want to buy the most items possible without exceeding the amount of money you have. Find the maximum number of items you can purchase. For example: If the prices are [1, 12, 5, 111, 200, 1000, 10] and you have 50, you can buy the items with prices [1, 12, 5, 10], which totals to 28 and allows you to buy 4 items. If the prices are [20, 10, 5, 30, 70] and you have 35, you can buy the items with prices [10, 5, 20], which totals to 35 and allows you to buy 3 items. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. Each test case consists of two parts: 1. The first line contains two integers n (1 le n le 100) — the number of available items, and k (1 le k le 10^5) — the amount of money available. 2. The second line contains n integers p_i (1 le p_i le 10^4) — the prices of the items. -----Output----- For each test case, print the maximum number of items you can purchase without exceeding the amount of money k. -----Examples----- Input 3 7 50 1 12 5 111 200 1000 10 5 35 20 10 5 30 70 4 100 1 2 3 4 Output 4 3 4 -----Note----- For the first example: You can buy the items with prices [1, 12, 5, 10], which totals to 28 and allows you to buy 4 items. For the second example: You can buy the items with prices [10, 5, 20], which totals to 35 and allows you to buy 3 items. For the third example: You can buy the items with prices [1, 2, 3, 4], which totals to 10 and allows you to buy 4 items.","solution":"def max_items(prices, amount): Returns the maximum number of items that can be purchased without exceeding the specified amount. :param prices: list of integers representing item prices. :param amount: integer representing the total amount of money available. :return: integer, maximum number of items that can be bought. # Sort the prices in ascending order prices.sort() count = 0 total_spent = 0 for price in prices: if total_spent + price <= amount: total_spent += price count += 1 else: break return count def process_test_cases(test_cases): Processes multiple test cases and returns results for each. :param test_cases: list of tuples, each containing (n, k, prices) for a test case. :return: list of integers, each representing the maximum number of items for a test case. results = [] for n, k, prices in test_cases: results.append(max_items(prices, k)) return results"},{"question":"You are given a forest with n trees connected by n-1 edges in such a way that it forms a tree. Each node is labeled with a unique value from 1 to n. Two trees are considered disjoint if you cannot travel from one tree to another by following the edges provided. You\'re asked to handle q queries on this forest. Each query has the following form: - \\"cut x y\\": which removes the edge between node x and node y, making two disjoint trees. - \\"find x\\": which returns the label of the root node of the tree containing node x in the current forest. The root node of a tree is defined as the node with the smallest label in that tree. Implement a solution to handle these queries efficiently. -----Input----- The first line contains an integer n (1 leq n leq 10^5) — the number of nodes in the tree. The next n-1 lines each contain two integers x_i and y_i (1 leq x_i, y_i leq n), denoting an undirected edge between nodes x_i and y_i. The following line contains an integer q (1 leq q leq 10^5) — the number of queries. The next q lines describe the queries in the form \\"cut x y\\" or \\"find x\\". -----Output----- For each \\"find x\\" query, output the label of the root node of the tree containing node x. -----Examples----- Input 5 1 2 1 3 3 4 3 5 3 cut 3 4 find 4 find 3 Output 4 1 -----Note----- In the example, the forest initially forms a single tree with root 1. After performing \\"cut 3 4\\", the forest is split into two disjoint trees with roots 1 and 4. The subsequent queries then check the root nodes of a given node in the resulting trees.","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [1] * size self.smallest = list(range(size)) # keeps the smallest element in the component def find(self, p): if self.parent[p] != p: root = self.find(self.parent[p]) self.parent[p] = root self.smallest[p] = self.smallest[root] return self.parent[p] def union(self, p, q): rootP = self.find(p) rootQ = self.find(q) if rootP != rootQ: if self.rank[rootP] > self.rank[rootQ]: self.parent[rootQ] = rootP self.smallest[rootP] = min(self.smallest[rootP], self.smallest[rootQ]) elif self.rank[rootP] < self.rank[rootQ]: self.parent[rootP] = rootQ self.smallest[rootQ] = min(self.smallest[rootP], self.smallest[rootQ]) else: self.parent[rootQ] = rootP self.rank[rootP] += 1 self.smallest[rootP] = min(self.smallest[rootP], self.smallest[rootQ]) def get_smallest(self, p): return self.smallest[self.find(p)] def process_queries(n, edges, queries): uf = UnionFind(n + 1) remaining_edges = {frozenset(edge) for edge in edges} # Perform initial unions for edge in edges: uf.union(edge[0], edge[1]) results = [] for query in queries: parts = query.split() if parts[0] == \\"cut\\": x, y = int(parts[1]), int(parts[2]) remaining_edges.remove(frozenset([x, y])) uf = UnionFind(n + 1) for edge in remaining_edges: uf.union(list(edge)[0], list(edge)[1]) elif parts[0] == \\"find\\": x = int(parts[1]) results.append(uf.get_smallest(x)) return results"},{"question":"Write a program that takes a single integer N and generates an N x N matrix filled with integers from 1 to N^2 in a spiral order, starting from the top-left corner and moving right. The program should output the resulting matrix as an N x N 2D list. The spiral order is defined as follows: - First fill the top row from left to right. - Then fill the last column from top to bottom. - Then fill the bottom row from right to left. - Then fill the first column from bottom to top. - Repeat the process for the inner layers until the entire matrix is filled. Your task is to implement this in a function called `generate_spiral_matrix(N)`. Input A single integer N where 1 ≤ N ≤ 100. Output A 2D list representing the N x N spiral matrix. Example: Input 3 Output [[1, 2, 3], [8, 9, 4], [7, 6, 5]] Input 4 Output [[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]] Explanation: In the first example, the numbers from 1 to 9 are arranged in a 3x3 matrix in a spiral order starting from the top-left corner. In the second example, the numbers from 1 to 16 are arranged in a 4x4 matrix in a spiral order.","solution":"def generate_spiral_matrix(N): Generates an NxN matrix filled with integers from 1 to N^2 in a spiral order. :param N: Size of the matrix (1 ≤ N ≤ 100) :return: NxN 2D list representing the spiral matrix. if N <= 0: return [] # Initialize an N x N matrix filled with 0s matrix = [[0 for _ in range(N)] for _ in range(N)] direction = \'right\' top, bottom, left, right = 0, N-1, 0, N-1 current_number = 1 while top <= bottom and left <= right: if direction == \'right\': for col in range(left, right + 1): matrix[top][col] = current_number current_number += 1 top += 1 direction = \'down\' elif direction == \'down\': for row in range(top, bottom + 1): matrix[row][right] = current_number current_number += 1 right -= 1 direction = \'left\' elif direction == \'left\': for col in range(right, left - 1, -1): matrix[bottom][col] = current_number current_number += 1 bottom -= 1 direction = \'up\' elif direction == \'up\': for row in range(bottom, top - 1, -1): matrix[row][left] = current_number current_number += 1 left += 1 direction = \'right\' return matrix"},{"question":"You are given a list of cities connected by direct roads. Your task is to determine if a round trip that visits every city exactly once and returns to the starting city exists, and if so, find the minimum cost of such a trip. A round trip that visits every city exactly once and returns to the starting city is known as a Hamiltonian Cycle. Input Format: The first line contains an integer T denoting the number of test cases. Each test case begins with a line containing an integer N, the number of cities. The next N lines contain N space-separated integers which represent the cost of traveling directly between each pair of cities. The diagonal elements of this matrix will always be zero, indicating that there is no cost to travel from a city to itself. Output Format: For each test case, print -1 if there is no Hamiltonian Cycle. Otherwise, print the minimum cost of the trip. Constraints: 1 ≤ T ≤ 5 2 ≤ N ≤ 10 1 ≤ cost ≤ 1000000 (cost is the travel cost between two different cities) SAMPLE INPUT 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 20 30 20 0 10 30 10 0 SAMPLE OUTPUT 80 60 Explanation In the first case, The minimum cost Hamiltonian Cycle is 0 → 1 → 3 → 2 → 0 with cost = 10 + 25 + 30 + 15 = 80. In the second case, The minimum cost Hamiltonian Cycle is 0 → 1 → 2 → 0 with cost = 20 + 10 + 30 = 60.","solution":"def tsp_dp(cost_matrix): Finds the minimum cost Hamiltonian Cycle (TSP) using dynamic programming with bitmasking. :param cost_matrix: A 2D list representing the cost between each pair of cities. :return: Minimum cost of the Hamiltonian Cycle or -1 if no cycle exists. N = len(cost_matrix) dp = [[float(\'inf\')] * N for _ in range(1 << N)] # dp[mask][i] will store the minimum cost to reach i with bitmask mask dp[1][0] = 0 # Start journey from city 0 for mask in range(1 << N): for i in range(N): if mask & (1 << i): # If i is in the set represented by mask for j in range(N): if mask & (1 << j) == 0: # If j is not in the set represented by mask new_mask = mask | (1 << j) dp[new_mask][j] = min(dp[new_mask][j], dp[mask][i] + cost_matrix[i][j]) # The minimum cost cycle that returns to the starting city answer = float(\'inf\') for i in range(1, N): answer = min(answer, dp[(1 << N) - 1][i] + cost_matrix[i][0]) return answer if answer != float(\'inf\') else -1 def solve_traveling_salesman_problem(T, test_cases): Solves the Traveling Salesman Problem for multiple test cases. :param T: The number of test cases :param test_cases: A list of matrices representing each test case :return: A list of results for each test case results = [] for case in test_cases: result = tsp_dp(case) results.append(result) return results"},{"question":"Ashish loves collecting unique objects. He has a collection of N objects, each identified by a unique integer between 1 and K (both inclusive). To impress his friends, he wants to know how many distinct subsequences of his collection maximize the sum of the objects. Help Ashish determine the number of such subsequences. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and K, the size of the collection and the maximum possible value of an object respectively. - The second line of each test case contains N space-separated integers representing the objects in the collection. -----Output:----- For each test case, output a single line containing the number of distinct subsequences that maximize the sum of the objects. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 1000 - 1 leq K leq 1000 - Each object in the collection is an integer between 1 and K (inclusive). -----Sample Input:----- 2 3 5 5 1 5 4 3 3 3 2 1 -----Sample Output:----- 3 3","solution":"def count_max_subset(N, collection): Given a collection of N objects, return the number of distinct subsequences that maximize the sum of the objects. max_element = max(collection) max_count = collection.count(max_element) # Calculate number of non-empty subsequences with the maximum element return (2 ** max_count) - 1 def number_of_max_subsequences(T, test_cases): results = [] for case in test_cases: N, K = case[0] collection = case[1] results.append(count_max_subset(N, collection)) return results"},{"question":"You are given an array of `n` integers where each integer represents the price of an item on a particular day. Your task is to find the maximum profit that can be made by buying and then selling one item across the given days. It\'s important to note that you must buy the item before you sell it (i.e., the buying day must be earlier than the selling day). Input The first line contains a single integer `n` (1 ≤ n ≤ 100,000) representing the number of days. The second line contains `n` integers, where each integer represents the price of the item on that day (0 ≤ price ≤ 1,000,000). Output Print a single integer, the maximum profit that can be achieved. If no profit can be made, print 0. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Note In the first example, buying on day 2 at price 1 and selling on day 5 at price 6 yields a profit of 5. In the second example, there is no day where buying the item and selling it later would result in a positive profit. Hence, the output is 0.","solution":"def max_profit(prices): Returns the maximum profit that can be made by buying and then selling one item across given days. if len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"A large e-commerce company uses a sophisticated inventory system to manage its product catalog. However, they have noticed that some product IDs are being duplicated in their database. Each product ID should be unique. Your task is to write a function that detects and removes duplicate product IDs from the inventory list. The function should return the list of unique product IDs while maintaining their original order of appearance. ``` Function signature: def remove_duplicates(product_ids: List[str]) -> List[str]: ``` # Input - A list of strings, `product_ids`, where each string represents a product ID. The list may contain duplicates. # Output - A list of strings where all duplicate product IDs have been removed, and only the first occurrence of each product ID is retained. The order of product IDs in the output list should be the same as their first occurrence in the input list. # Examples ```python remove_duplicates([\\"A123\\", \\"B456\\", \\"A123\\", \\"C789\\", \\"B456\\"]) # Output: [\\"A123\\", \\"B456\\", \\"C789\\"] remove_duplicates([\\"P100\\", \\"P101\\", \\"P102\\", \\"P100\\", \\"P103\\", \\"P101\\"]) # Output: [\\"P100\\", \\"P101\\", \\"P102\\", \\"P103\\"] remove_duplicates([\\"X001\\", \\"Y002\\", \\"Z003\\", \\"X001\\", \\"Y002\\", \\"Y002\\", \\"X001\\"]) # Output: [\\"X001\\", \\"Y002\\", \\"Z003\\"] ``` # Constraints - The list of product IDs will not be empty and will contain at least 1 and at most 1000 product IDs. - Each product ID is a string with a maximum length of 10 characters. - Product IDs consist of alphanumeric characters only. # Notes - You are required to maintain the order of appearance for the unique product IDs in the returned list. - You should aim for an efficient solution that minimizes time and space complexity.","solution":"from typing import List def remove_duplicates(product_ids: List[str]) -> List[str]: Removes duplicate product IDs from the list while maintaining the order of their first appearance. seen = set() unique_product_ids = [] for product_id in product_ids: if product_id not in seen: unique_product_ids.append(product_id) seen.add(product_id) return unique_product_ids"},{"question":"Given an integer array nums consisting of m unique numbers and a positive integer k, find the kth smallest element in the union of the array and its reversals. A reversal of an array is the array obtained by reversing the order of its elements. The union of an array and its reversals includes all the elements from both the original list and its reversals. Return the kth smallest element of the combined array using 1-based indexing. Example 1: Input: nums = [2, 4, 1], k = 5 Output: 4 Explanation: The union of the array and its reversal is [2, 4, 1, 1, 4, 2]. The 5th smallest element is 4. Example 2: Input: nums = [4, 3, 7, 6], k = 3 Output: 4 Explanation: The union of the array and its reversal is [4, 3, 7, 6, 6, 7, 3, 4]. The 3rd smallest element is 4. Constraints: 1 <= nums.length <= 10^4 1 <= nums[i] <= 10^9 1 <= k <= 2 * nums.length","solution":"def kth_smallest_in_union(nums, k): Finds the kth smallest element in the union of the array and its reversal. Args: nums (list): A list of unique integers. k (int): The 1-based index of the element to be found. Returns: int: The kth smallest element in the union of nums and its reversal. combined = nums + nums[::-1] combined.sort() return combined[k-1]"},{"question":"You are given a rectangular grid with R rows and C columns, where each cell contains either \'0\' or \'1\'. \'0\' represents an empty cell while \'1\' represents an obstacle. A path from the top-left corner (0, 0) to the bottom-right corner (R-1, C-1) is valid if it only moves right or down at each step and does not pass through any cells containing \'1\'. Write a program to determine how many unique valid paths exist from the top-left corner to the bottom-right corner of the grid. -----Input----- The first line contains two integers, R and C (1 ≤ R, C ≤ 10), separated by a single space. Each of the following R lines contains a string of length C consisting of \'0\'s and \'1\'s representing the grid. -----Output----- Output a single integer which is the number of valid paths from the top-left corner to the bottom-right corner. -----Example----- Input: 3 3 000 010 000 Output: 2 Input: 2 2 00 11 Output: 0 Input: 4 4 0000 0110 0000 0010 Output: 2 Explanation: In the first test case, the two paths are (using (row, column) notation): (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) In the second test case, no paths exist as the only possible move from the starting point is into an obstacle. In the third test case, the two paths are: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3) (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (3, 1) -> (3, 2) -> (3, 3)","solution":"def count_unique_paths(grid): R = len(grid) C = len(grid[0]) if grid[0][0] == \'1\' or grid[R-1][C-1] == \'1\': return 0 dp = [[0] * C for _ in range(R)] dp[0][0] = 1 for i in range(R): for j in range(C): if grid[i][j] == \'1\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[R-1][C-1] def unique_paths_in_grid(grid_str): input_lines = grid_str.strip().split(\'n\') R, C = map(int, input_lines[0].split()) grid = [list(input_lines[i+1]) for i in range(R)] return count_unique_paths(grid)"},{"question":"You are participating in a treasure hunt game organized in a forest. The forest is represented as a grid of cells with \'R\' for rocky or inaccessible cells and \'O\' for open cells you can walk on. You can only move in four directions: up, down, left, and right. At the start of the game, you are given a map of the forest grid, and you are located at the top-left cell (0, 0). The treasure is hidden at the bottom-right cell (n-1, m-1). Your goal is to find the shortest path from the top-left cell to the bottom-right cell. However, there\'s a twist: every few minutes, a storm occurs and changes the status of some cells in the grid (\'O\'` to `\'R\'` and `\'R\'` to `O`). The grid provided represents how the forest looks right after the last storm. If a cell is `\'R\'`, it will remain inaccessible for the entire duration of your journey. Write a function to find and return the minimum number of steps required to reach the treasure starting from the top-left cell. If it\'s not possible to reach the treasure, return -1. -----Input----- The first line contains two integers n and m (1 <= n, m <= 100), the number of rows and columns in the grid. The following n lines each contain a string of length m containing characters \'R\' or \'O\' describing the forest grid. -----Output----- Output one integer: the minimum number of steps to reach the treasure. If there is no way to reach the treasure, output -1. -----Examples----- Sample Input 1: 4 4 OOOO ORRO OOOO RROO Sample Output 1: 6 Sample Input 2: 3 3 ROR ORR ROR Sample Output 2: -1 -----Note----- In Sample Input 1, the shortest path from the start (0,0) to the treasure (3,3) is: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,3) -> (3,3) which takes 6 steps. In Sample Input 2, there is no path from the start to the treasure because the route is blocked by inaccessible cells.","solution":"from collections import deque def find_treasure_min_steps(n, m, grid): Find the minimum number of steps to reach the treasure in bottom-right from top-left. If it\'s impossible to reach, return -1. if grid[0][0] == \'R\' or grid[n-1][m-1] == \'R\': return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0)]) steps = [[float(\'inf\')] * m for _ in range(n)] steps[0][0] = 0 while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return steps[x][y] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'O\' and steps[nx][ny] > steps[x][y] + 1: steps[nx][ny] = steps[x][y] + 1 queue.append((nx, ny)) return -1 if steps[n-1][m-1] == float(\'inf\') else steps[n-1][m-1]"},{"question":"You are given a function that accepts a list of non-negative integers and returns the concatenation of those integers in the format that produces the largest possible number. Your task is to implement this function. The resulting number should still adhere to integer constraints (e.g., no leading zeros). The output should be returned as a string. An example: ```python nums = [3, 30, 34, 5, 9] largest_number(nums) # Returns \'9534330\' ``` Ensure the function is optimal and handles various cases, including edge cases with similar starting digits and different lengths.","solution":"from functools import cmp_to_key def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 def largest_number(nums): Returns the concatenation of the numbers in nums in a way that forms the largest possible number. # Convert all numbers to strings str_nums = list(map(str, nums)) # Sort the numbers based on their order in the largest combined form str_nums.sort(key=cmp_to_key(compare)) # Join the sorted numbers result = \'\'.join(str_nums) # Handle the case where the result has leading zeros (for example, if all numbers are zeros) if result[0] == \'0\': return \'0\' return result"},{"question":"Implement a function to flatten a nested dictionary into a single depth dictionary. For example: ```python flatten_dict({\\"a\\": 1, \\"b\\": {\\"c\\": 2, \\"d\\": {\\"e\\": 3, \\"f\\": 4}}}) -> {\'a\': 1, \'b_c\': 2, \'b_d_e\': 3, \'b_d_f\': 4} ```","solution":"def flatten_dict(d, parent_key=\'\', sep=\'_\'): Flattens a nested dictionary into a single depth dictionary. Args: d (dict): The dictionary to flatten parent_key (str): The base key string (for recursion) sep (str): The separator between parent and child keys Returns: dict: The flattened dictionary items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Write a function `is_balanced(expression)` that takes a string `expression` containing various types of brackets such as `()`, `{}`, and `[]`, and returns `True` if the brackets are balanced, and `False` otherwise. A string is considered balanced if: - Every opener is closed by a corresponding closer in the correct order. - Opener and closer types must match. # Examples Valid expressions ``` expression = \\"([]){}\\" is_balanced(expression) returns True expression = \\"[{()}]\\" is_balanced(expression) returns True ``` Invalid expressions ``` expression = \\"[(])\\" is_balanced(expression) returns False expression = \\"[(()]\\" is_balanced(expression) returns False ``` # Remarks - The input string may be empty, in which case the function should return `True`. - The function should ignore non-bracket characters and only check for the balance of brackets.","solution":"def is_balanced(expression): Checks if the given expression has balanced brackets. Args: expression (str): The string containing the expression with brackets. Returns: bool: True if the brackets are balanced, False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in expression: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False return stack == []"},{"question":"A **perfect number** is a positive integer that is equal to the sum of its proper divisors, excluding itself. For instance, 6 is a perfect number because its proper divisors are 1, 2, and 3, and 1 + 2 + 3 = 6. Similarly, 28 is a perfect number because 1 + 2 + 4 + 7 + 14 = 28. Your task is to implement a static class called `PerfectNumber` that includes three functions: * ```is_perfect(n: int) -> bool``` that checks if `n` is a perfect number or not. * ```get_next_perfect(n: int) -> int``` that returns the next perfect number greater than `n`. * ```get_perfect_series(count: int, start: int = 1) -> list``` that returns a list of `count` perfect numbers, starting from the next perfect number greater than or equal to `start`. For instance: ```python PerfectNumber.is_perfect(6) ==> True PerfectNumber.is_perfect(28) ==> True PerfectNumber.is_perfect(10) ==> False PerfectNumber.get_next_perfect(6) ==> 28 PerfectNumber.get_next_perfect(28) ==> 496 PerfectNumber.get_perfect_series(3) ==> [6, 28, 496] PerfectNumber.get_perfect_series(2, 28) ==> [28, 496] ```","solution":"class PerfectNumber: @staticmethod def is_perfect(n: int) -> bool: if n <= 1: return False divisors_sum = sum(i for i in range(1, n) if n % i == 0) return divisors_sum == n @staticmethod def get_next_perfect(n: int) -> int: num = n + 1 while True: if PerfectNumber.is_perfect(num): return num num += 1 @staticmethod def get_perfect_series(count: int, start: int = 1) -> list: perfect_numbers = [] if PerfectNumber.is_perfect(start): perfect_numbers.append(start) start = start + 1 while len(perfect_numbers) < count: next_perfect = PerfectNumber.get_next_perfect(start - 1) perfect_numbers.append(next_perfect) start = next_perfect + 1 return perfect_numbers"},{"question":"A cipher system was developed to secure messages by encoding them in a specific way. Each letter of the alphabet is uniquely mapped to a distinct integer from 1 to 26 (e.g., A -> 1, B -> 2, ..., Z -> 26). The encoded message is a sequence of these integers written as a continuous string without any delimiters. Given an encoded message, it is your task to determine the number of ways it can be decoded back into a meaningful message. A meaningful message is one that can be completely transformed into a sequence of letters using the provided mapping. For instance, the string \\"123\\" can be decoded in three possible ways: 1. \\"ABC\\" (1 2 3) 2. \\"LC\\" (12 3) 3. \\"AW\\" (1 23) Input The first line contains an integer t (1 ≤ t ≤ 50), the number of test cases. Each of the next t lines contains a single string s representing the encoded message. The length of s will be between 1 and 100. Output For each test case, output a single integer on a new line: the number of ways the encoded message can be decoded into a meaningful message. Examples Input 2 12 226 Output 2 3 Note In the first test case, \\"12\\" can be decoded as \\"AB\\" (1 2) or \\"L\\" (12). In the second test case, \\"226\\" can be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6).","solution":"def num_decodings(s: str) -> int: Calculate the number of ways to decode the given encoded message. if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 for i in range(1, n + 1): if s[i - 1] != \'0\': dp[i] += dp[i - 1] if i > 1 and \'10\' <= s[i - 2:i] <= \'26\': dp[i] += dp[i - 2] return dp[n] def decode_messages(t: int, messages: list) -> list: results = [] for message in messages: results.append(num_decodings(message)) return results"},{"question":"You are tasked with building an application that will manage to-do lists for multiple users. Each user can have multiple lists, and each list can have multiple tasks. You must implement functions to add and remove users, create and delete lists for a user, and add, remove, and mark tasks as complete. **Classes and Methods:** Define the following classes: 1. `User` 2. `ToDoList` 3. `Task` # Class `User` Properties: - `user_id` (int): Unique identifier for the user. - `username` (str): Username of the user. - `lists` (dict): Dictionary where keys are list names (str) and values are `ToDoList` objects. Methods: - `__init__(self, user_id, username)`: Initialize the user with the provided `user_id` and `username`. - `create_list(self, list_name)`: Create a new ToDoList with the given name for the user. - `delete_list(self, list_name)`: Delete the ToDoList with the given name from the user. - `add_task_to_list(self, list_name, task_description)`: Add a new task with the given description to the specified list. - `remove_task_from_list(self, list_name, task_id)`: Remove the task with the given ID from the specified list. - `mark_task_complete(self, list_name, task_id)`: Mark the task with the given ID as complete in the specified list. # Class `ToDoList` Properties: - `list_name` (str): Name of the to-do list. - `tasks` (dict): Dictionary where keys are task IDs (int) and values are `Task` objects. - `next_task_id` (int): Next available task ID. Methods: - `__init__(self, list_name)`: Initialize the to-do list with the provided name. - `add_task(self, task_description)`: Add a task with the given description to the to-do list. - `remove_task(self, task_id)`: Remove the task with the given ID from the to-do list. - `mark_task_complete(self, task_id)`: Mark the task with the given ID as complete in the to-do list. # Class `Task` Properties: - `task_id` (int): Unique identifier for the task. - `description` (str): Description of the task. - `completed` (bool): Indicates whether the task is completed. Methods: - `__init__(self, task_id, description)`: Initialize the task with the provided ID and description. - `mark_complete(self)`: Mark the task as complete. # Examples ```python # Create a user user1 = User(1, \\"user1\\") # Create lists for the user user1.create_list(\\"Work\\") user1.create_list(\\"Personal\\") # Add tasks to the lists user1.add_task_to_list(\\"Work\\", \\"Finish project report\\") user1.add_task_to_list(\\"Personal\\", \\"Buy groceries\\") # Mark a task as complete user1.mark_task_complete(\\"Work\\", 1) # Remove a task from the list user1.remove_task_from_list(\\"Personal\\", 2) # Delete a list user1.delete_list(\\"Personal\\") ```","solution":"class Task: def __init__(self, task_id, description): self.task_id = task_id self.description = description self.completed = False def mark_complete(self): self.completed = True class ToDoList: def __init__(self, list_name): self.list_name = list_name self.tasks = {} self.next_task_id = 1 def add_task(self, task_description): task = Task(self.next_task_id, task_description) self.tasks[self.next_task_id] = task self.next_task_id += 1 def remove_task(self, task_id): if task_id in self.tasks: del self.tasks[task_id] def mark_task_complete(self, task_id): if task_id in self.tasks: self.tasks[task_id].mark_complete() class User: def __init__(self, user_id, username): self.user_id = user_id self.username = username self.lists = {} def create_list(self, list_name): if list_name not in self.lists: self.lists[list_name] = ToDoList(list_name) def delete_list(self, list_name): if list_name in self.lists: del self.lists[list_name] def add_task_to_list(self, list_name, task_description): if list_name in self.lists: self.lists[list_name].add_task(task_description) def remove_task_from_list(self, list_name, task_id): if list_name in self.lists: self.lists[list_name].remove_task(task_id) def mark_task_complete(self, list_name, task_id): if list_name in self.lists: self.lists[list_name].mark_task_complete(task_id)"},{"question":"You are given a matrix with N rows and M columns containing non-negative integers. Your task is to determine whether it\'s possible to traverse the matrix from the top-left corner to the bottom-right corner, moving only right or down, with the constraint that the sum of the elements along the path does not exceed a given value S. ------ Input Format ------ - The first line of input contains three integers N, M, and S — the number of rows, columns, and the sum constraint. - The next N lines contain M integers each, representing the elements of the matrix. ------ Output Format ------ Print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner such that the sum of the elements along the path does not exceed S. Otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ N, M ≤ 1000 1 ≤ S ≤ 10^{9} 0 ≤ matrix[i][j] ≤ 10^5 ----- Sample Input 1 ------ 3 3 15 1 3 1 1 5 1 4 2 1 ----- Sample Output 1 ------ YES ----- Sample Input 2 ------ 2 2 3 1 2 4 3 ----- Sample Output 2 ------ NO ----- Explanation 1 ------ In the first test case, one possible path with a sum not exceeding 15 is: 1 -> 1 -> 1 -> 1 In the second test case, no matter the path, the sum will exceed 3.","solution":"def is_possible_to_traverse(matrix, N, M, S): Determine whether it\'s possible to traverse the matrix from the top-left corner to the bottom-right corner within the given sum constraint S. Only right and downward movements are allowed. if N == 0 or M == 0: return \\"NO\\" # No path if matrix size is zero. # Initialize a DP table to store the minimum path sum to reach each cell. dp = [[float(\'inf\')] * M for _ in range(N)] dp[0][0] = matrix[0][0] # Starting point. # Fill the DP table for r in range(N): for c in range(M): if r > 0: dp[r][c] = min(dp[r][c], dp[r-1][c] + matrix[r][c]) # Coming from top. if c > 0: dp[r][c] = min(dp[r][c], dp[r][c-1] + matrix[r][c]) # Coming from left. # Check if bottom-right corner is within the sum constraint if dp[N-1][M-1] <= S: return \\"YES\\" else: return \\"NO\\" # Read the input def main(): import sys input = sys.stdin.read data = input().strip().split() N, M, S = int(data[0]), int(data[1]), int(data[2]) matrix = [] pos = 3 for i in range(N): row = list(map(int, data[pos:pos+M])) matrix.append(row) pos += M result = is_possible_to_traverse(matrix, N, M, S) print(result)"},{"question":"You are given a list of integers representing the floor height of each building in a city skyline. The city has n buildings, represented in the given list by their heights, and they are aligned in a straight line. Your task is to find out if it is possible to jump between buildings using a fixed jump height. The rules for jumping are: 1. You can only jump to a building that is not taller than the current building plus the fixed jump height. 2. You can jump to any building in front of the current one (i.e., higher index) or behind it (i.e., lower index). Write a function that determines whether you can travel from the first building to the last building using these rules. Function Signature: ```python def canTravelToEnd(buildings: List[int], jumpHeight: int) -> bool: ``` # Input: * `buildings`: A list of integers of length n (2 <= n <= 500) where each integer represents the height of a building (1 <= height <= 10^9). * `jumpHeight`: An integer that indicates the maximum height difference you can jump (1 <= jumpHeight <= 10^9). # Output: * Return `True` if it is possible to travel from the first building to the last building, otherwise return `False`. # Example: ```python buildings = [4, 2, 7, 6, 9] jumpHeight = 3 Output: True Explanation: Jump from building 1 to building 2 (4 -> 2), then building 2 to building 3 (2 -> 7), you can continue jumping to the final building with this jump height. buildings = [3, 6, 8, 5, 2] jumpHeight = 2 Output: False Explanation: It\'s not possible to jump from building 1 to building 2 since the height difference exceeds the jumpHeight. buildings = [1, 2, 3, 4, 5] jumpHeight = 1 Output: True Explanation: You can jump from each building to the next consecutively without violating the jump height limit. ``` # Constraints: * 2 ≤ n ≤ 500 * 1 ≤ height of each building ≤ 10^9 * 1 ≤ jumpHeight ≤ 10^9","solution":"from typing import List def canTravelToEnd(buildings: List[int], jumpHeight: int) -> bool: Determines if it\'s possible to travel from the first building to the last building using the given jump height. Parameters: buildings (List[int]): List of integers representing the height of buildings. jumpHeight (int): Maximum height difference you can jump. Returns: bool: True if it\'s possible to travel from the first building to the last one, else False. n = len(buildings) # BFS approach for exploring possible jumps to_visit = [0] visited = set() while to_visit: current = to_visit.pop(0) if current == n - 1: return True # Skipping already visited buildings if current in visited: continue # Mark the current building as visited visited.add(current) # Check all possible jumps to the next buildings for next_building in range(current + 1, min(n, current + jumpHeight + 1)): if abs(buildings[next_building] - buildings[current]) <= jumpHeight: to_visit.append(next_building) # Check all possible jumps to the previous buildings for prev_building in range(max(0, current - jumpHeight), current): if abs(buildings[prev_building] - buildings[current]) <= jumpHeight: to_visit.append(prev_building) return False"},{"question":"Given an array \'A\' containing \'N\' integers. Your task is to find all pairs of elements in the array that sum up to a given target value \'K\'. Each pair should be displayed in ascending order, making sure that the same pair is not counted more than once. Example 1: Input: N = 5 A[] = {1, 5, 7, -1, 5} K = 6 Output: [[1, 5], [1, 5], [-1, 7]] Explanation: The pairs that add up to the target value 6 are (1, 5), (1, 5), and (-1, 7). Example 2: Input: N = 4 A[] = {2, 2, 4, 4} K = 6 Output: [[2, 4], [2, 4]] Explanation: The pairs that add up to the target value 6 are (2, 4) and (2, 4). Each of these pairs is counted separately because each occurrence of the elements is distinct in the input array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function pairsWithSumK() which takes the array of integers A[], its size N, and the target value K as parameters and returns a list of pairs in ascending order that add up to K. Expected Time Complexity: O(N*logN + N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 -10^6 ≤ A[i] ≤ 10^6 -10^6 ≤ K ≤ 10^6","solution":"def pairs_with_sum_k(A, K): Returns all pairs of elements in the array A that sum up to the target value K. Each pair is displayed in ascending order, making sure that the same pair is not counted more than once. :param A: List of integers :param K: Target sum value :return: List of pairs [x, y] where x + y = K A.sort() front, back = 0, len(A) - 1 result = [] while front < back: current_sum = A[front] + A[back] if current_sum == K: result.append([A[front], A[back]]) # Move front up to the next different element while front < back and A[front] == result[-1][0]: front += 1 # Move back down to the next different element while front < back and A[back] == result[-1][1]: back -= 1 elif current_sum < K: front += 1 else: back -= 1 return result"},{"question":"Given an integer n, write a function that returns a list of all prime numbers less than or equal to n. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. For example, the first six prime numbers are 2, 3, 5, 7, 11, and 13. Your task is to implement a function that efficiently returns all prime numbers up to a given integer n. Function signature: ```python def list_primes(n: int) -> List[int]: pass ``` # Input - A single integer n (0 ≤ n ≤ 10^6). # Output - A list of integers, where each integer is a prime number less than or equal to n. # Examples Example 1: Input: ```python 5 ``` Output: ```python [2, 3, 5] ``` Explanation: The prime numbers less than or equal to 5 are 2, 3, and 5. Example 2: Input: ```python 10 ``` Output: ```python [2, 3, 5, 7] ``` Explanation: The prime numbers less than or equal to 10 are 2, 3, 5, and 7. # Constraints - 0 ≤ n ≤ 10^6 # Hints: - Consider using the Sieve of Eratosthenes algorithm for an efficient solution. - Be mindful of edge cases such as n = 0 or n = 1 where no primes exist.","solution":"from typing import List def list_primes(n: int) -> List[int]: Returns a list of all prime numbers less than or equal to n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False primes = [num for num in range(2, n + 1) if sieve[num]] return primes"},{"question":"You are given a string S consisting of lowercase English letters. Split this string into the smallest possible number of non-overlapping substrings such that each substring contains unique characters (no character appears more than once within a substring). Then, return the number of such substrings required. Constraints * 1 leq |S| leq 10^5 * S contains only lowercase English letters. Input Input is given from Standard Input in the following format: S Output Print the number of required substrings with unique characters. Examples Input abac Output 2 Input aaaa Output 4 Input abcdef Output 1","solution":"def count_unique_substrings(S): Given a string S, split it into the smallest possible number of non-overlapping substrings such that each substring contains unique characters, and return the number of such substrings. substring_count = 0 seen_chars = set() for char in S: if char in seen_chars: substring_count += 1 seen_chars.clear() seen_chars.add(char) # Adding one for the last substring if seen_chars: substring_count += 1 return substring_count"},{"question":"You are organizing a coding event where different teams will compete to solve several tasks. To correctly assign points based on their performance, you need to determine the total number of points each team has earned. Each team can complete multiple tasks, and for each task, they gain a certain number of points. Given the scores for each task a team completes, calculate the total points for each team. Input: The first line of the input will be N, the number of teams. Next follows the score data for each team in the following format: - For each team, the first line contains an integer T, the number of tasks the team has completed. - This is followed by T lines, each containing a single integer representing the points earned for completing a task. Output: Print N lines, each consisting of the total points earned by the respective team. Constraints: 1 ≤ N ≤ 1000 1 ≤ T ≤ 100 0 ≤ Points per task ≤ 1000 SAMPLE INPUT 2 3 100 200 300 2 50 75 SAMPLE OUTPUT 600 125","solution":"def calculate_total_points(n, teams_scores): Calculate the total points earned by each team. :param n: Number of teams :param teams_scores: List of lists where each sublist contains points for the tasks completed by a team. :return: List containing total points for each team total_points = [] for scores in teams_scores: total_points.append(sum(scores)) return total_points def process_input_and_calculate_total_points(input_data): Process input data to extract team scores and calculate total points for each team. :param input_data: String containing the input data :return: List containing total points for each team lines = input_data.strip().split(\'n\') n = int(lines[0]) index = 1 teams_scores = [] for _ in range(n): t = int(lines[index]) index += 1 scores = [int(lines[index + i]) for i in range(t)] teams_scores.append(scores) index += t return calculate_total_points(n, teams_scores)"},{"question":"Given an array A of n integers, and q queries, each of which asks for the sum of all values in a subarray defined by two indices l and r (inclusive). Your task is to efficiently compute the sum for each query. Constraints - 1 leq n, q leq 100,000 - 1 leq A[i] leq 1,000 - 1 leq l, r leq n Input The input is given in the following format. n q A[1] A[2] ... A[n] query_1 query_2 : query_q Each query query_i is given by l r Output For each query, print the sum of the subarray A[l..r]. Example Input 5 3 1 2 3 4 5 1 3 2 5 1 5 Output 6 14 15","solution":"def compute_prefix_sums(arr): Computes the prefix sums of the given array. n = len(arr) prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] return prefix_sums def range_sum(prefix_sums, l, r): Computes the sum of the subarray from index l to r using the prefix sums array. return prefix_sums[r] - prefix_sums[l - 1] def process_queries(n, arr, queries): Processes the queries to find the sum of subarrays defined by the given queries. prefix_sums = compute_prefix_sums(arr) results = [] for l, r in queries: results.append(range_sum(prefix_sums, l, r)) return results"},{"question":"During a cosmic event, several asteroids of varying sizes are heading towards a space station. Each asteroid has a diameter and a mass associated with it. The space station has a shield that can only sustain a certain amount of force, calculated as the product of the asteroid\'s mass and the square of its diameter. Your task is to determine whether the space station can withstand the impact of all incoming asteroids. -----Input----- The first line contains a single integer `t` (1 ≤ t ≤ 10) — the number of test cases. Each test case consists of two lines: - The first line contains a single integer `k` (1 ≤ k ≤ 100) — the maximum force the shield can sustain. - The second line contains `n` (1 ≤ n ≤ 10000) — the number of asteroids heading towards the space station. For each of the next `n` lines, the input contains two integers `d_i` and `m_i` (1 ≤ d_i, m_i ≤ 1000) separated by space, representing the diameter and the mass of the i-th asteroid. -----Output----- For each test case, output \\"SAFE\\" if the space station can withstand the impact of all asteroids, or \\"DANGER\\" otherwise. -----Examples----- Input 2 5000 3 10 20 5 25 15 5 10000 2 20 2 30 10 Output SAFE DANGER -----Explanation----- In the first test case, the force from each asteroid is (10 * 10 * 20) = 2000, (5 * 5 * 25) = 625, and (15 * 15 * 5) = 1125. Sum of these forces is 2000 + 625 + 1125 = 3750, which is less than or equal to k = 5000, so the output is \\"SAFE\\". In the second test case, the force from each asteroid is (20 * 20 * 2) = 800 and (30 * 30 * 10) = 9000. Sum of these forces is 800 + 9000 = 9800, which is less than or equal to k = 10000, so the output is \\"SAFE\\". In another scenario (not depicted here), it could be more, resulting in \\"DANGER\\".","solution":"def can_withstand_asteroids(t, test_cases): results = [] for case in test_cases: k, asteroids = case[\'max_force\'], case[\'asteroids\'] total_force = sum(d * d * m for d, m in asteroids) if total_force <= k: results.append(\\"SAFE\\") else: results.append(\\"DANGER\\") return results"},{"question":"In the Kingdom of Algorithms, there is a famous online shopping website named AlgoShop. The website has N products indexed from 1 to N, each having a certain initial price. The prices of these products might fluctuate due to daily discounts or price increments offered by AlgoShop. There are Q days with different pricing events, and each pricing event specifies a range of products and a price change value. Your task is to create a program to handle a series of pricing events and answer price queries after each event. The price of a product can be increased or decreased by a certain amount in each event. If the price change value is negative, the price decreases, otherwise, it increases. You are required to calculate the price of a specific product after each pricing event and print the prices for every query. # Task Given the pricing events, write a program which calculates and prints the price of a specific product after each event. # Input Read the following data from the standard input. * The first line of input contains two space-separated integers N and Q: the number of products and the number of pricing events. * The second line contains N space-separated integers P_1, P_2, ldots, P_N, which are the initial prices of the products. * Each of the following Q lines contains three space-separated integers L_j, R_j, and X_j, representing a pricing event where the prices of all products from index L_j to R_j (inclusive) are changed by X_j. * After the Q pricing events, the next line contains an integer T, representing the number of queries. * Each of the next T lines contains an integer K, representing the index of a product for which the price needs to be reported after all pricing events. # Output Write T lines to the standard output. Each line should contain the price of the specific product after all pricing events. # Constraints All input data satisfy the following conditions. * 1 leq N leq 100,000 * 1 leq Q leq 100,000 * 1 leq P_i leq 1,000,000 for 1 leq i leq N * 1 leq L_j leq R_j leq N for 1 leq j leq Q * -1,000,000 leq X_j leq 1,000,000 for 1 leq j leq Q * 1 leq T leq 100,000 * 1 leq K leq N for each query # Sample Input 1 ``` 5 3 100 200 300 400 500 1 3 50 2 5 -100 3 3 75 2 1 4 ``` # Sample Output 1 ``` 150 300 ``` # Explanation 1 Initially, the prices are [100, 200, 300, 400, 500]. After first event, prices are [150, 250, 350, 400, 500]. After second event, prices are [150, 150, 250, 300, 400]. After third event, prices are [150, 150, 325, 300, 400]. Query for product 1 results in price 150. Query for product 4 results in price 300.","solution":"def calculate_prices(N, Q, prices, events, queries): # Apply all events once delta = [0] * (N + 1) for L, R, X in events: delta[L - 1] += X if R < N: delta[R] -= X # Calculate the final prices for i in range(1, N): delta[i] += delta[i - 1] final_prices = [prices[i] + delta[i] for i in range(N)] # Return the prices for the queried products return [final_prices[K - 1] for K in queries]"},{"question":"Nina is practicing her programming skills and decides to work on an interesting problem. She has a sequence of numbers and wants to find the maximum sum of any contiguous subarray within the sequence. A subarray is defined as a sequence of consecutive elements from the original array. She implemented a method to calculate this but is unsure whether her solution is efficient enough. She needs your help to write a program that solves this problem optimally. -----Input:----- The first line of the input contains a single integer n indicating the number of elements in the sequence. The second line contains n integers describing the sequence. -----Output:----- A single integer representing the maximum sum of any contiguous subarray within the sequence. -----Constraints:----- - 1 leq n leq 100000. - -10000 leq text{each element of the sequence} leq 10000. -----Sample Input----- 8 -2 1 -3 4 -1 2 1 -5 4 -----Sample Output----- 6 Explanation: The maximum sum of any contiguous subarray is obtained from the subarray [4, -1, 2, 1], which adds up to 6.","solution":"def max_subarray_sum(n, sequence): Finds the maximum sum of any contiguous subarray within the sequence using Kadane\'s Algorithm. if n == 0: return 0 # Initialize current max and global max with the first element current_max = global_max = sequence[0] # Traverse through the sequence starting from the second element for i in range(1, n): current_max = max(sequence[i], current_max + sequence[i]) if current_max > global_max: global_max = current_max return global_max"},{"question":"You are given a string S consisting of only the characters \'a\' and \'b\'. Your task is to find the length of the longest substring of S where the number of \'a\'s and \'b\'s are the same. Input The first line contains a single integer T — the number of test cases. Each of the next T lines contains a single string S. Output For each test case, output the length of the longest substring where the number of \'a\'s and \'b\'s are equal. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 SAMPLE INPUT 3 abba aaaa aababab SAMPLE OUTPUT 4 0 6","solution":"def longest_equal_substring_length(s): Computes the length of the longest substring where the number of \'a\'s and \'b\'s are equal. max_len = 0 n = len(s) balance = {0: -1} # Balance map to store first occurrence of each balance integer count = 0 for i in range(n): if s[i] == \'a\': count += 1 else: count -= 1 if count in balance: max_len = max(max_len, i - balance[count]) else: balance[count] = i return max_len def process_test_cases(test_cases): Processes each test case and returns the results. results = [] for s in test_cases: results.append(longest_equal_substring_length(s)) return results"},{"question":"You are given a list of words from the English dictionary, and each word is written in lowercase letters. Suppose we want to design a new alien language, and we have a new alphabet order which is some permutation of the English alphabet. Given this new order and the list of words sorted by the dictionary\'s order, determine if the given list of words is sorted according to the new alien language\'s order. Example 1: Input: words = [\\"hello\\",\\"leetcode\\"], order = \\"hlabcdefgijkmnopqrstuvwxyz\\" Output: true Explanation: As \'h\' comes before \'l\' in the new order, the first word \\"hello\\" is less than the second word \\"leetcode\\", thus the list is sorted. Example 2: Input: words = [\\"word\\",\\"world\\",\\"row\\"], order = \\"worldabcefghijkmnpqstuvxyz\\" Output: false Explanation: The order of the first two words \\"word\\" and \\"world\\" is not correct according to the new order, because \'d\' comes after \'l\' in the new alphabet order. Note: 1. The ordering of order is a permutation of the English alphabet. 2. 1 <= words.length <= 100 3. 1 <= words[i].length <= 20","solution":"def is_alien_sorted(words, order): Determines if the given list of words is sorted according to the new alien language order. :param words: List of words in the alien language :param order: The order of the alien alphabet :return: Boolean value indicating whether the words are sorted according to the new order # Create a dictionary to map each character to its rank in the new order order_index = {c: i for i, c in enumerate(order)} def compare(word1, word2): Compare two words according to the new alien alphabet order. :param word1: First word to compare :param word2: Second word to compare :return: -1 if word1 < word2, 0 if word1 == word2, 1 if word1 > word2 for c1, c2 in zip(word1, word2): if order_index[c1] < order_index[c2]: return -1 elif order_index[c1] > order_index[c2]: return 1 if len(word1) < len(word2): return -1 elif len(word1) > len(word2): return 1 return 0 # Compare each word with the next word in the list for i in range(len(words) - 1): if compare(words[i], words[i + 1]) > 0: return False return True"},{"question":"Petya is fascinated by domino chains. A domino chain is a sequence of dominoes arranged end-to-end so that the number of dots on adjacent ends matches. Petya wants to determine the maximum length of a contiguous sequence in an array of dominoes that forms a valid chain. Each domino can be represented as a pair of numbers `(a, b)` where `a` is the number of dots on one end and `b` is the number of dots on the other end. Given an array of dominoes, your task is to write a function that finds the length of the longest contiguous subsequence of dominoes which forms a valid chain. # Input - `n`: an integer representing the number of dominoes (1 ≤ n ≤ 1000) - `dominoes`: an array of `n` pairs of integers where each pair represents a domino # Output - An integer representing the length of the longest contiguous subsequence of dominoes that forms a valid chain. # Example Input: ``` n = 5 dominoes = [(1, 2), (2, 3), (3, 4), (5, 6), (4, 5)] ``` Output: ``` 3 ``` # Explanation: The longest valid chain is `[(1, 2), (2, 3), (3, 4)]` or `[(2, 3), (3, 4), (4, 5)]` both of which have length 3. # Constraints: - The function must handle the input size efficiently.","solution":"def max_domino_chain(n, dominoes): Finds the length of the longest sequence of dominoes forming a valid chain. Parameters: n (int): The number of dominoes. dominoes (list of tuples): Each tuple represents a domino (a, b). Returns: int: Length of the longest valid domino chain. max_length = 1 current_length = 1 for i in range(1, n): if dominoes[i - 1][1] == dominoes[i][0]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"To help you practice working with sequences, here\'s the new question: Farmer John has a sequence of cows lined up, each with a unique ID number. He wants to form groups of cows such that each group contains cows with consecutive IDs. Farmer John realizes that if he wants to have M groups, each group must have cows whose IDs form a contiguous segment of the sequence. Given the total number of cows N and the desired number of groups M, determine the possible ways Farmer John can form these groups. The difference between the largest and smallest ID numbers in any group should be the same for all groups. -----Input----- Input begins with an integer T, the number of test cases. Each test case consists of two integers N and M, where N is the number of cows and M is the desired number of groups. -----Output----- For each test case, output the number of ways to divide the cows into M groups with the specified properties, or output 0 if it\'s not possible. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 100000 - 1 ≤ M ≤ 1000 -----Sample Input----- 2 6 3 9 2 -----Sample Output----- 1 8 -----Explanation----- In the first test case, the cows can only be divided into 3 groups of 2 consecutive cows each. There is exactly 1 way to do this: each group contains cows with consecutive IDs (e.g., [1, 2], [3, 4], [5, 6]). In the second test case, the cows can be divided into 2 groups in the following 8 valid ways: - [1 through 4], [5 through 9] - [1 through 3], [4 through 9] - [1 through 2], [3 through 9] - and so forth... Each of these 8 combinations divides the cows while maintaining the same difference between the largest and smallest IDs in each group.","solution":"def count_ways_to_form_groups(T, test_cases): Determines the number of ways to divide cows into groups with consecutive IDs. Parameters: T (int): Number of test cases test_cases (list of tuples): List where each tuple contains (N, M) Returns: list: Number of ways to divide the cows into M groups for each test case results = [] for N, M in test_cases: if N % M == 0: results.append(1) else: results.append(0) return results"},{"question":"You are given two strings s and p where string p is a pattern. Your task is to determine if the string p is a subsequence of the string s. A string p is a subsequence of string s if all the characters of p can be found in s in the same order, but not necessarily consecutively. Input The first line contains the string s, the second line contains the string p. Each line consists only of lowercase English letters. The given strings are non-empty, the length of each string does not exceed 2·105. Output Print \\"Yes\\" (without the quotes), if the string p is a subsequence of string s, or \\"No\\" (without the quotes) otherwise. Examples Input abcde ace Output Yes Input abcde aec Output No Note In the first sample, the characters of string p (\'a\', \'c\', \'e\') appear in string s in the same order. In the second sample, the characters of string p (\'a\', \'e\', \'c\') do not appear in string s in the same order (the character \'e\' appears after \'c\' in string s).","solution":"def is_subsequence(s, p): Determines if p is a subsequence of s. Args: s (str): The main string. p (str): The pattern string. Returns: str: \\"Yes\\" if p is a subsequence of s, \\"No\\" otherwise. # Two pointers to navigate through s and p i, j = 0, 0 # Traverse through the main string while i < len(s) and j < len(p): if s[i] == p[j]: j += 1 i += 1 # If we have traversed all characters of p return \\"Yes\\" if j == len(p) else \\"No\\""},{"question":"Sonic the Hedgehog is on a mission to collect as many golden rings as he can. He is running through a linear path that can be represented as an array of positive integers. Each integer in the array represents the number of rings in the corresponding segment of the path. Sonic can start running from any segment and must stop at any segment, but once he starts running, he cannot skip any segments nor change direction. He wants to maximize the number of rings he can collect during any contiguous segment of his run. Help Sonic determine the maximum number of rings he can collect if he runs optimally. -----Input----- The first line contains a single integer n (1 leq n leq 10^5), the number of segments in the path. The second line contains n positive integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^4), where a_i is the number of rings in the i-th segment. -----Output----- Output a single integer, the maximum number of rings Sonic can collect. -----Examples----- Sample Input 1: 5 2 1 5 1 3 Sample Output 1: 12 Sample Input 2: 6 4 2 6 1 3 2 Sample Output 2: 18 Sample Input 3: 3 9 7 10 Sample Output 3: 26","solution":"def maximum_rings_collected(n, rings): Function to determine the maximum number of rings Sonic can collect. :param n: Number of segments :param rings: A list containing the number of rings in each segment :return: The maximum number of rings that can be collected in a contiguous segment max_rings = 0 current_rings = 0 for ring in rings: current_rings += ring if current_rings > max_rings: max_rings = current_rings return max_rings"},{"question":"A bookstore owner wants to organize books on the shelf in a specific order. Each book has a unique identifier represented by a positive integer. The bookstore owner prefers the sequence of books to be in a non-decreasing order based on the identifiers. However, to achieve the perfect sequence, the owner can swap the identifiers of any two adjacent books a limited number of times. Given the number of books and the sequence of book identifiers, determine if it\'s possible to sort the books in non-decreasing order after performing at most k swaps. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains two integers n and k, where n is the number of books and k is the maximum number of swaps allowed. The second line of each test case contains n space-separated integers denoting the identifiers of the books. -----Output----- For each test case, output \\"YES\\" if it\'s possible to sort the books in non-decreasing order with at most k swaps, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ n ≤ 1000 - 0 ≤ k ≤ 100000 - 1 ≤ Identifier ≤ 109 -----Example----- Input: 3 5 10 4 3 2 1 5 4 1 2 1 4 3 4 5 4 3 2 1 Output: YES NO YES -----Explanation----- Example case 1: The initial array is [4, 3, 2, 1, 5]. With 10 swaps, it\'s possible to sort the array to [1, 2, 3, 4, 5]. Example case 2: The initial array is [2, 1, 4, 3]. With only 1 swap, it\'s not possible to sort the array in the required order. Example case 3: The initial array is [4, 3, 2, 1], which can be sorted to [1, 2, 3, 4] with 5 swaps.","solution":"def is_sortable_in_k_swaps(n, k, books): Determines if the array books can be sorted in non-decreasing order with at most k adjacent swaps. Parameters: - n: int, the number of books. - k: int, the maximum number of swaps allowed. - books: list of int, the identifiers of the books. Returns: - str: \\"YES\\" if it\'s possible to sort books with at most k swaps, otherwise \\"NO\\". total_swaps = 0 sorted_books = sorted(books) for i in range(n): if books[i] != sorted_books[i]: swap_index = books.index(sorted_books[i]) total_swaps += abs(swap_index - i) if total_swaps > k: return \\"NO\\" books[swap_index], books[i] = books[i], books[swap_index] return \\"YES\\" def organize_books_on_shelf(test_cases): results = [] for case in test_cases: n, k, books = case results.append(is_sortable_in_k_swaps(n, k, books)) return results"},{"question":"You have recently joined an online coding competition platform. In this competition, there are multiple contests, and each contest has a leaderboard. To determine your standing in a contest, you need to compute the median score for a given list of scores. A median is the middle value in a list of ordered numbers. If the list has an odd number of values, the median is the number at the middle position. If the list has an even number of values, the median is the average of the two middle numbers. Write a function to calculate the median of scores for a competition. Input: - The first line consists of an integer N, the number of scores. - The second line consists of N space-separated integers, representing the scores achieved by participants in the contest. Output: - Print the median score, rounded to one decimal place if needed. Constraints: - 1 ≤ N ≤ 10^6 - 1 ≤ score ≤ 10^6 Example: Input: 5 1 3 4 2 5 Output: 3.0 Explanation: Example case 1: The ordered list of scores is [1, 2, 3, 4, 5]. The median of this list is 3. Input: 4 1 2 3 4 Output: 2.5 Explanation: Example case 2: The ordered list of scores is [1, 2, 3, 4]. The median of this list is (2 + 3) / 2 = 2.5.","solution":"def calculate_median(N, scores): Returns the median score from a list of scores. :param N: int - the number of scores :param scores: list of int - the list of scores :return: float - the median score scores.sort() if N % 2 == 1: return float(scores[N // 2]) else: return (scores[N // 2 - 1] + scores[N // 2]) / 2"},{"question":"In a peaceful village, there is a group of n friends who decide to play a game. They form a circle and each friend is assigned a unique number from 1 to n. The game involves them passing a token around the circle. Each friend passes the token to another friend following a specific pattern that is predetermined. You are given a list of n integers, where the i^{th} integer specifies the friend who will receive the token from friend i. Write a program to determine if there exists any friend in the circle who will never receive the token during the game, assuming that the game starts with any friend. -----Input----- The first line contains a single integer n (2 le n le 10^5) — the number of friends. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le n) — the list that specifies the friend who will receive the token from friend i. -----Output----- Output \\"YES\\" if there exists at least one friend who will never receive the token. Otherwise, output \\"NO\\". -----Examples----- Input 5 2 3 4 5 1 Output NO Input 4 2 2 3 4 Output YES -----Note----- In the first example, all the friends are part of a single cycle, thus everyone will eventually receive the token. In the second example, friend 1 passes the token to friend 2, but no one passes the token to friend 1, hence the output is \\"YES\\".","solution":"def has_friend_never_receiving(n, friends): receives_token = [0] * n for friend in friends: receives_token[friend - 1] += 1 for token_count in receives_token: if token_count == 0: return \\"YES\\" return \\"NO\\""},{"question":"You are given an integer array `nums` representing the list of scores for a number of players. Your task is to determine the maximum score difference between any two players, where the lower score player must have had a higher rank (appeared earlier in the list) during the scoring round. Write a function `maxScoreDifference(nums)` that takes in the list of integers `nums` and returns the maximum score difference or -1 if no such pair exists. # Input - An array `nums` where `2 <= len(nums) <= 10^5` and `-10^4 <= nums[i] <= 10^4`. # Output - An integer representing the maximum score difference. If no such pair exists, return -1. # Examples Example 1 ``` Input: [6, 1, 9, 5, 7] Output: 8 Explanation: The pair (1, 9) yields the maximum score difference since 9 - 1 = 8. ``` Example 2 ``` Input: [4, 3, 2, 1] Output: -1 Explanation: No pair exists in the given array where the later element is greater than an earlier one. ``` Example 3 ``` Input: [1, 2, 6, 4, 8] Output: 7 Explanation: The pair (1, 8) yields the maximum score difference since 8 - 1 = 7. ``` # Constraints - The function should run in O(n) time complexity. - The memory complexity should be O(1) additional space apart from the input list. # Function signature ```python def maxScoreDifference(nums: List[int]) -> int: # Your code here ```","solution":"from typing import List def maxScoreDifference(nums: List[int]) -> int: if len(nums) < 2: return -1 # if there are fewer than 2 elements, no pair is possible min_score = nums[0] max_diff = -1 for i in range(1, len(nums)): if nums[i] > min_score: max_diff = max(max_diff, nums[i] - min_score) min_score = min(min_score, nums[i]) return max_diff"},{"question":"You are given the heads of two sorted linked lists `list1` and `list2`. Merge the two lists in a one sorted list. The merged list should be made by splicing together the nodes of the first two lists. Return the head of the merged list. Example 1: Input: list1 = [1,2,4], list2 = [1,3,4] Output: [1,1,2,3,4,4] Example 2: Input: list1 = [], list2 = [] Output: [] Example 3: Input: list1 = [], list2 = [0] Output: [0] Constraints: * The number of nodes in both lists is in the range [0, 50]. * -100 <= Node.val <= 100 * Both `list1` and `list2` are sorted in non-decreasing order.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(list1, list2): dummy = ListNode() current = dummy while list1 and list2: if list1.val <= list2.val: current.next = list1 list1 = list1.next else: current.next = list2 list2 = list2.next current = current.next if list1: current.next = list1 if list2: current.next = list2 return dummy.next def list_to_linkedlist(lst): if not lst: return None head = ListNode(lst[0]) current = head for value in lst[1:]: current.next = ListNode(value) current = current.next return head def linkedlist_to_list(node): result = [] current = node while current: result.append(current.val) current = current.next return result"},{"question":"You are given a string consisting of lowercase letters and a pattern string containing lowercase letters. Your task is to write a function that finds all the start indices of the pattern\'s anagrams in the string. An Anagram is a re-arrangement of a string in such a way that it is still a valid sequence with all the original characters. For example, \\"abc\\" and \\"bac\\" are anagrams. In this task, you need to identify the starting indices of substrings in the given string that are anagrams of the pattern. The function should output a list of starting indices of substrings in the text that are anagrams of the pattern. If there are multiple matches, list all starting indices. If no such matches are found, return an empty list. # Constraints: - The length of both input strings is from 1 to 100,000. # Input: - text: a string containing only lowercase letters. - pattern: a string containing only lowercase letters. # Output: - A list of integers representing the starting indices of each occurrence of the pattern\'s anagrams within the text. # Example: Input: ``` text: \\"cbaebabacd\\" pattern: \\"abc\\" ``` Output: ``` [0, 6] ``` Explanation: The first occurrence is at index 0 (\\"cba\\" is an anagram of \\"abc\\"). The second occurrence is at index 6 (\\"bac\\" is an anagram of \\"abc\\").","solution":"def find_anagrams(text, pattern): from collections import Counter p_len = len(pattern) t_len = len(text) if p_len > t_len: return [] pattern_count = Counter(pattern) window_count = Counter(text[:p_len]) result = [] for i in range(t_len - p_len + 1): if i > 0: window_count[text[i - 1]] -= 1 if window_count[text[i - 1]] == 0: del window_count[text[i - 1]] window_count[text[i + p_len - 1]] += 1 if window_count == pattern_count: result.append(i) return result"},{"question":"A popular mobile game requires players to align a series of blocks in a sequence that matches a given pattern. Each block has a single letter printed on it, and the blocks must be placed in the correct positions to form a word. You are given a word to form and an unlimited supply of blocks with letters from \'a\' to \'z\'. Write a program to determine in which order the blocks should be placed to form this word. Input The input consists of a single line containing the word to be formed. The length of the word will be between 1 and 100 inclusive, and will contain only lowercase letters \'a\' to \'z\'. Output Print the indexes of the blocks in the order they should be placed. The indexes start from 1. Example Input hello Output 1 2 3 4 5 Input coding Output 1 2 3 4 5 6","solution":"def block_order(word): Returns the indexes of the blocks in the order they should be placed to form the given word. Indexes start from 1. return list(range(1, len(word) + 1))"},{"question":"Given a positive integer `n`, generate an nxn grid that follows these rules: - The grid should consist of numbers from 1 to n*n. - The numbers should start from 1 and be filled row-wise, from left to right. - The numbers in odd-numbered rows (1st, 3rd, 5th, etc.) should be in increasing order. - The numbers in even-numbered rows (2nd, 4th, 6th, etc.) should be in decreasing order. Input A single integer `n` (1 ≤ n ≤ 100) which represents the size of the grid. Output Print the nxn grid where each number is separated by a space. Each row should be printed on a new line. Example Input 3 Output 1 2 3 6 5 4 7 8 9 Input 4 Output 1 2 3 4 8 7 6 5 9 10 11 12 16 15 14 13","solution":"def generate_grid(n): Generates an nxn grid following the specified rules. Args: n (int): the size of the grid Returns: List[List[int]]: nxn grid filled according to the rules grid = [] number = 1 for i in range(n): row = [] for j in range(n): row.append(number) number += 1 if i % 2 == 1: row.reverse() grid.append(row) return grid"},{"question":"Marcus, the student manager, wants to organize a series of student meetings based on their availability. Each student provides a start and end time for their availability in the format [start, end]. Marcus needs to set up the maximum number of non-overlapping meetings that can be scheduled based on these availabilities. Given a number of students, N and an array of their availability intervals, arr[] where each element is an array of two integers [start, end], write a function that returns the maximum number of non-overlapping meetings that can be held. Example 1: Input: N = 3 arr[] = [[1, 4], [2, 5], [3, 6]] Output: 1 Explanation: Only one meeting can be scheduled without overlapping. For example, selecting the meeting with the interval [1, 4]. Example 2: Input: N = 4 arr[] = [[1, 3], [2, 4], [3, 5], [7, 8]] Output: 2 Explanation: Two non-overlapping meetings can be scheduled. For example, selecting [1, 3] and [7, 8] or [2, 4] and [7, 8]. Your Task: Complete the function maxMeetings() which takes an array arr and an integer n as input parameters and returns an integer denoting the maximum number of non-overlapping meetings that can be scheduled. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 0 <= start < end <= 10^9","solution":"def maxMeetings(N, arr): Returns the maximum number of non-overlapping meetings that can be scheduled. # Sort intervals based on end time arr.sort(key=lambda x: x[1]) # Initialize the end time of the last chosen meeting last_end_time = float(\'-inf\') count = 0 for start, end in arr: if start > last_end_time: # If the current meeting starts after the last chosen one ends, count it count += 1 last_end_time = end return count"},{"question":"In computer science, binary trees are a fundamental data structure used in various algorithms. A binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. A full binary tree is a type of binary tree where every node other than the leaves has exactly two children. Given the balanced nature of such trees, specific types of traversals—such as preorder, inorder, and postorder—are commonly used to process or retrieve the node values in a particular order. In this problem, you will be provided with two traversal orders of a full binary tree: the preorder traversal and the inorder traversal of the tree. Using these traversals, your objective is to reconstruct the original binary tree and verify its postorder traversal. -----Input----- The first line contains an integer n (1 leq n leq 1000), the number of nodes in the binary tree. The second line contains n distinct integers representing the preorder traversal of the tree. The third line contains n distinct integers representing the inorder traversal of the tree. -----Output----- Output a single line containing the postorder traversal of the binary tree, represented as a sequence of n integers. -----Examples----- Sample Input 1: 6 1 2 4 5 3 6 4 2 5 1 6 3 Sample Output 1: 4 5 2 6 3 1 Sample Input 2: 7 10 5 1 7 40 50 1 5 7 10 40 50 Sample Output 2: 1 7 5 50 40 10","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(preorder, inorder): if not preorder or not inorder: return None root_value = preorder[0] root = TreeNode(root_value) mid = inorder.index(root_value) root.left = build_tree(preorder[1:mid+1], inorder[:mid]) root.right = build_tree(preorder[mid+1:], inorder[mid+1:]) return root def postorder_traversal(root): result = [] if root: result += postorder_traversal(root.left) result += postorder_traversal(root.right) result.append(root.value) return result def tree_postorder(preorder, inorder): root = build_tree(preorder, inorder) return postorder_traversal(root) # Example usage: # n = 6 # preorder = [1, 2, 4, 5, 3, 6] # inorder = [4, 2, 5, 1, 6, 3] # print(tree_postorder(preorder, inorder)) # Output: [4, 5, 2, 6, 3, 1]"},{"question":"You are developing a software application to organize and schedule tasks effectively. One of the features involves merging overlapping tasks to avoid time conflicts and reduce redundancy. Each task is represented by a pair of integers (start, end) indicating the start time and end time of the task, where 0 leq text{start} < text{end} leq 1000. If two tasks overlap or touch, they should be merged into a single task. Write a program that merges overlapping or touching tasks and returns the resulting list of tasks. -----Input----- The input starts with an integer n, representing the number of tasks, where 1 leq n leq 100. The next n lines each contain two integers, start and end, representing the start and end of each task. -----Output----- Output the merged list of tasks, each represented by a pair of integers (start, end). Each task should be printed on a single line, and the tasks should be listed in increasing order of their start times. -----Examples----- Sample Input: 4 1 3 2 4 5 7 6 8 Sample Output: 1 4 5 8 Sample Input: 3 1 2 2 3 4 5 Sample Output: 1 3 4 5","solution":"def merge_tasks(tasks): if not tasks: return [] # Sort the tasks by their start times tasks.sort(key=lambda x: x[0]) merged_tasks = [] current_start, current_end = tasks[0] for i in range(1, len(tasks)): start, end = tasks[i] # If the current task overlaps with the previous one, merge them if start <= current_end: current_end = max(current_end, end) else: merged_tasks.append((current_start, current_end)) current_start, current_end = start, end # Don\'t forget to add the last merged task merged_tasks.append((current_start, current_end)) return merged_tasks"},{"question":"You are given an integer array `A` of size `n` and an integer `k`. Your task is to find a non-decreasing subsequence of `A` of length `k` such that the sum of its elements is maximum among all possible non-decreasing subsequences of length `k`. If there are multiple subsequences with the same maximum sum, you can output any one of them. ---Input--- The first line contains an integer `n` (1 ≤ n ≤ 1000) — the size of the array `A`. The second line contains `n` space-separated integers representing the elements of the array `A`. The third line contains an integer `k` (1 ≤ k ≤ n) — the desired length of the subsequences. ---Output--- Output `k` integers — the elements of the subsequence with the maximum sum in non-decreasing order. ---Example--- Input 5 4 2 3 1 5 3 Output 3 4 5 Input 6 1 3 2 4 2 5 2 Output 4 5","solution":"def max_sum_non_decreasing_subsequence(n, A, k): Find the non-decreasing subsequence of length k with the maximum sum. Parameters: n (int): Size of the array A. A (list of int): The elements of the array. k (int): The desired length of the subsequences. Returns: list of int: The elements of the subsequence in non-decreasing order. if k == 1: return [max(A)] A.sort() return A[-k:]"},{"question":"Mina loves working with strings and she believes in symmetry. She defines the \\"symmetry index\\" of a string as the length of the longest palindromic substring within the given string. However, Mina is now busy with other work, so she has asked for your help to find the symmetry index of a given string. Given a string (S) consisting of lowercase English letters, determine the symmetry index — the length of the longest palindromic substring. INPUT A string S (1 ≤ |S| ≤ 100) OUTPUT The symmetry index which is the length of the longest palindromic substring SAMPLE INPUT babad SAMPLE OUTPUT 3 Explanation INPUT babad OUTPUT 3 In the given input string, the longest palindromic substrings are \\"bab\\" and \\"aba\\", both of which have a length of 3. Thus, the symmetry index is 3.","solution":"def symmetry_index(s): Returns the length of the longest palindromic substring in the given string. n = len(s) if n == 0: return 0 # Table to store results of subproblems dp = [[False]*n for _ in range(n)] max_length = 1 # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = True # Check for sub-strings of length 2 start = 0 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 # Check for lengths greater than 2. k is length of substring for k in range(3, n+1): for i in range(n - k + 1): j = i + k - 1 if dp[i+1][j-1] and s[i] == s[j]: dp[i][j] = True if k > max_length: start = i max_length = k return max_length"},{"question":"In a city, there are N traffic lights arranged in a straight line along a road. Each traffic light can be either red (0) or green (1). Each driver wants to know if they can reach their destination without stopping at a red light by selecting a segment of consecutive traffic lights that are all green. Given an array representing the state of each traffic light, determine the length of the longest segment of consecutive green lights. ------ Input ------ The input begins with a single integer N, the number of traffic lights. The next line contains N space-separated integers, each either 0 or 1, representing the state of the traffic lights. ------ Output ------ Print a single integer representing the length of the longest segment of consecutive green lights. If there are no green lights, print 0. ------ Constraints ------ 1 ≤ N ≤ 10^5 0 ≤ State ≤ 1 ----- Sample Input 1 ------ 10 1 1 0 1 1 1 0 0 1 1 ----- Sample Output 1 ------ 3 ----- Explanation 1 ------ The longest segment of consecutive green lights is from the 4th to the 6th traffic light, which has a length of 3. ----- Sample Input 2 ------ 5 0 0 0 0 0 ----- Sample Output 2 ------ 0 ----- Explanation 2 ------ There are no green lights, so the result is 0. ----- Sample Input 3 ------ 7 1 0 1 1 0 1 1 ----- Sample Output 3 ------ 2 ----- Explanation 3 ------ There are two segments of consecutive green lights, each of length 2, and hence the longest segment length is 2.","solution":"def longest_green_segment(n, lights): Returns the length of the longest segment of consecutive green lights. :param n: Integer, the number of traffic lights. :param lights: List of integers (0 or 1), representing the state of each traffic light. :return: Integer, length of the longest segment of consecutive green lights. max_length = 0 current_length = 0 for light in lights: if light == 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Sarah has a collection of books and wants to organize them on her bookshelf. Each book can be categorized as either a \\"short story\\" or a \\"novel\\". She would like to place all short stories first, followed by all novels. Each book also has a different height, and within each category, she wants the books to be arranged in ascending order of their heights. Help Sarah achieve her desired arrangement. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, the number of books. - The second line contains N space-separated strings, where each string is formatted as \\"Category:Height\\". The Category can be either \\"S\\" for short stories or \\"N\\" for novels. Height is an integer representing the height of the book. ------ Output Format ------ For each test case, print a single line containing the sorted list of books in the format \\"Category:Height\\", separated by a space. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ text{Height} ≤ 100 ------ Sample Input 1 ------ 2 5 S:20 N:50 S:10 N:40 N:30 4 N:10 S:5 S:15 N:20 ------ Sample Output 1 ------ S:10 S:20 N:30 N:40 N:50 S:5 S:15 N:10 N:20 ------ Explanation 1 ------ Test case 1: The initial order is \\"S:20 N:50 S:10 N:40 N:30\\". First, we sort the short stories by height, thus \\"S:10 S:20\\". Then, we sort the novels by height, resulting in \\"N:30 N:40 N:50\\". Combining these, the resultant order is \\"S:10 S:20 N:30 N:40 N:50\\". Test case 2: The initial order is \\"N:10 S:5 S:15 N:20\\". First, we sort the short stories by height, thus \\"S:5 S:15\\". Then, we sort the novels by height, resulting in \\"N:10 N:20\\". Combining these, the resultant order is \\"S:5 S:15 N:10 N:20\\".","solution":"def sort_books(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] books = test_cases[i][1] short_stories = [] novels = [] # Parse and separate books into their categories for book in books: category, height = book.split(\\":\\") height = int(height) if category == \'S\': short_stories.append((category, height)) else: novels.append((category, height)) # Sort short stories and novels short_stories = sorted(short_stories, key=lambda x: x[1]) novels = sorted(novels, key=lambda x: x[1]) # Merge and create result for test case sorted_books = short_stories + novels result = \\" \\".join(f\\"{category}:{height}\\" for category, height in sorted_books) results.append(result) return results"},{"question":"You are given a grid of cells, where each cell contains an integer. Your task is to find the maximum sum of integers you can collect starting from the top-left cell and moving to the bottom-right cell, given that you can only move either right or down at any step. Write a function that computes the maximum sum for each test case. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers n and m specifying the number of rows and columns in the grid. The next n lines contain m space-separated integers representing the grid. ------ Output ------ For each test case, output a single line containing the maximum sum of integers that you can collect. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ n, m ≤ 50 -100 ≤ grid[i][j] ≤ 100 ------ Sample Input ------ 2 3 3 1 2 3 4 5 6 7 8 9 2 2 -1 -2 -3 4 ------ Sample Output ------ 29 1 ------ Explanation ------ In the first test case, the path with the maximum sum is 1 → 4 → 7 → 8 → 9, which gives a sum of 29. In the second test case, the path with the maximum sum is -1 → 4, which gives a sum of 1.","solution":"def max_path_sum(n, m, grid): # Initialize a dp array dp = [[0] * m for _ in range(n)] # Fill the dp array dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1] def solve(test_cases): results = [] for n, m, grid in test_cases: results.append(max_path_sum(n, m, grid)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): n, m = map(int, lines[idx].split()) grid = [] for i in range(n): grid.append(list(map(int, lines[idx + 1 + i].split()))) test_cases.append((n, m, grid)) idx += n + 1 return test_cases def format_output(results): return \'n\'.join(map(str, results)) # To use these functions input_str = 2 3 3 1 2 3 4 5 6 7 8 9 2 2 -1 -2 -3 4 test_cases = parse_input(input_str) results = solve(test_cases) output_str = format_output(results) print(output_str) # This should print: # 29 # 1"},{"question":"Design a Parking Lot You are given a parking lot with multiple levels. Each level has a certain number of rows, and each row has a certain number of spots (parking spaces). Cars can be parked in any available spot, but trucks require an entire row to themselves and buses need an entire level. You need to implement the following functions to manage the parking lot: 1. `addCar(level, row, spot)`: Park a car in the specific spot on the given level and row. 2. `addTruck(level, row)`: Park a truck in the specified row on the given level if the whole row is free. 3. `addBus(level)`: Park a bus on the specified level if the whole level is free. 4. `freeSpot(level, row, spot)`: Free the specific spot on the given level and row. 5. `freeRow(level, row)`: Free all spots on the specified row. 6. `freeLevel(level)`: Free all spots on the given level. Each of these operations should return a boolean indicating if the operation was successful or not. Input Format - The first line contains three integers L, R, and S indicating the number of levels, rows in each level, and spots in each row respectively. - After that, there are multiple lines with a specific command followed by its parameters. Output Format The output for each command should be either \'true\' or \'false\', indicating the success of the operation. Constraints - 1 <= L, R, S <= 100 - Commands follow the cases stated above. Sample Input 3 2 3 addCar 0 1 2 addTruck 1 1 addBus 2 freeSpot 0 1 2 freeRow 1 1 freeLevel 2 Sample Output true true true true true true Explanation - The first command parks a car at level 0, row 1, spot 2 successfully. - The second command parks a truck at level 1, row 1 successfully as the row is free. - The third command parks a bus at level 2 successfully as the level is free. - The fourth line frees the car from level 0, row 1, spot 2. - The fifth line frees all spots in row 1 of level 1. - The sixth line frees all spots in level 2. Note that the car, truck, and bus parking operations should check if the desired spots are indeed free before performing the allocation.","solution":"class ParkingLot: def __init__(self, L, R, S): self.levels = [[[False for _ in range(S)] for _ in range(R)] for _ in range(L)] def addCar(self, level, row, spot): if not self.levels[level][row][spot]: self.levels[level][row][spot] = True return True return False def addTruck(self, level, row): if all(not spot for spot in self.levels[level][row]): self.levels[level][row] = [True] * len(self.levels[level][row]) return True return False def addBus(self, level): if all(all(not spot for spot in row) for row in self.levels[level]): self.levels[level] = [[True] * len(row) for row in self.levels[level]] return True return False def freeSpot(self, level, row, spot): self.levels[level][row][spot] = False return True def freeRow(self, level, row): self.levels[level][row] = [False] * len(self.levels[level][row]) return True def freeLevel(self, level): self.levels[level] = [[False] * len(row) for row in self.levels[level]] return True"},{"question":"You are given a large text document containing multiple paragraphs. Your task is to find the paragraph which contains the highest number of unique words. A word is defined as a contiguous sequence of non-space characters and is case-insensitive (i.e., \\"Word\\" and \\"word\\" should be considered the same). Words are separated by spaces, punctuation marks, or line breaks. Write a program that takes the text document as input and outputs the paragraph number (1-based) with the highest number of unique words. If there are multiple paragraphs with the highest number of unique words, output the paragraph that appears first. -----Input----- Input starts with an integer T (1 leq T leq 10), the number of paragraphs. Each of the next T lines contains a paragraph of varying lengths, with each paragraph containing at least one word and not exceeding 1000 characters. -----Output----- Output a single integer denoting the paragraph number (1-based) with the highest number of unique words. -----Examples----- Sample Input 1: 3 This is the first paragraph. Here is the second paragraph, which is slightly longer than the first. The third paragraph is here. Sample Output 1: 2 Sample Input 2: 2 Hello, world! This is a test. Another test, with more words and even more unique ones. Sample Output 2: 2","solution":"def highest_unique_words_paragraph(paragraphs): def unique_word_count(paragraph): words = set(word.lower() for word in re.findall(r\'bw+b\', paragraph)) return len(words) max_unique_words = 0 paragraph_index = 0 for i, paragraph in enumerate(paragraphs): count = unique_word_count(paragraph) if count > max_unique_words: max_unique_words = count paragraph_index = i return paragraph_index + 1 import re def find_paragraph_with_highest_unique_words(): T = int(input().strip()) paragraphs = [input().strip() for _ in range(T)] return highest_unique_words_paragraph(paragraphs)"},{"question":"You are given a rectangle. The lengths of its width and height are w and h, respectively. Find the perimeter of this rectangle. -----Constraints----- - 1 ≦ w ≦ 100 - 1 ≦ h ≦ 100 - All input values are integers. -----Input----- The input is given from Standard Input in the following format: w h -----Output----- Print the perimeter of the given rectangle. It is guaranteed that the perimeter is an integer. -----Sample Input----- 2 3 -----Sample Output----- 10 When the width and height of the rectangle are 2 and 3, respectively, the perimeter of the rectangle is 2 * (2 + 3) = 10.","solution":"def rectangle_perimeter(w, h): Returns the perimeter of a rectangle given its width (w) and height (h). return 2 * (w + h)"},{"question":"Given a list of `n` integers, determine the maximum sum of any contiguous subarray with size exactly `k`. If there are multiple such subarrays with the maximum sum, return the one that appears first in the list. Input The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100000). The next line contains `n` space-separated integers, denoting the elements of the array. The integers will be in the range between `-10000` and `10000`. Output Output the `k` elements of the subarray with the maximum sum. If there are multiple answers, output the one that appears first in the list. Examples Input 8 3 -2 1 -3 4 -1 2 1 -5 4 Output 4 -1 2 Input 5 2 3 3 -1 2 2 Output 3 3 Note: In the first example, the subarray with the maximum sum is `[4, -1, 2]` with a sum of `5`.","solution":"def max_sum_subarray_of_size_k(n, k, arr): Returns the subarray of size k with the maximum sum. In case of ties, returns the first one. max_sum = float(\'-inf\') current_sum = 0 start_index = 0 for i in range(k): current_sum += arr[i] max_sum = current_sum max_start_index = 0 for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum max_start_index = i - k + 1 return arr[max_start_index:max_start_index + k]"},{"question":"Given an undirected graph, determine if it contains an Eulerian circuit. An Eulerian circuit is a path in a graph that visits every edge exactly once and returns to the starting vertex. The Eulerian circuit exists if and only if every vertex has an even degree, and all vertices with non-zero degree lie in a single connected component. Example 1: Input: N = 3, M = 3 Edges[][]= { {1,2}, {2,3}, {3,1} } Output: 1 Explanation: There is an Eulerian circuit: 1 -> 2 -> 3 -> 1 Example 2: Input: N = 4, M = 3 Edges[][] = { {1,2}, {2,3}, {2,4} } Output: 0 Explanation: An Eulerian circuit does not exist as vertex 2 has an odd degree. Your task: You don\'t need to read input or print anything. Your task is to complete the function hasEulerianCircuit() which takes the N (the number of vertices), M (Number of edges) and the list of Edges[][] (where Edges[i] denotes the undirected Edge between vertices Edge[i][0] and Edges[i][1]) as input parameters and returns true (boolean value) if the graph contains an Eulerian circuit, otherwise returns false. Expected Time Complexity: O(N + M). Expected Auxiliary Space: O(N + M). Constraints: 1 ≤ N ≤ 1000 1 ≤ M ≤ 2000 Size of Edges[i] is 2 1 ≤ Edges[i][0],Edges[i][1] ≤ N","solution":"def hasEulerianCircuit(N, M, Edges): def isConnectedAndNonZeroDegree(): visited = [False] * (N + 1) # Find a vertex with non-zero degree start = -1 for i in range(1, N + 1): if degree[i] > 0: start = i break if start == -1: # No edges in the graph return True # Use DFS to traverse the graph def dfs(v): stack = [v] while stack: node = stack.pop() if not visited[node]: visited[node] = True for neighbor in adj[node]: if not visited[neighbor]: stack.append(neighbor) dfs(start) # Check if all vertices with non-zero degree are visited for i in range(1, N + 1): if degree[i] > 0 and not visited[i]: return False return True degree = [0] * (N + 1) adj = [[] for _ in range(N + 1)] # Construct the graph for u, v in Edges: degree[u] += 1 degree[v] += 1 adj[u].append(v) adj[v].append(u) # Check if all vertices have even degree for i in range(1, N + 1): if degree[i] % 2 != 0: return False # Check if all vertices with non-zero degree are connected if not isConnectedAndNonZeroDegree(): return False return True"},{"question":"You are given a single positive integer n, which represents the number of vertices in a regular polygon. The vertices of this polygon are labeled consecutively from 1 to n in clockwise direction. Write a program to find the number of distinct diagonals in this polygon. A diagonal is defined as a line segment connecting two non-adjacent vertices of the polygon. Diagonals cannot intersect each other at any point inside the polygon. -----Input----- The first and only line of the input contains one integer n (3 ≤ n ≤ 10^4) — the number of vertices in the polygon. -----Output----- Print one integer — the number of distinct diagonals in the polygon. -----Examples----- Input 4 Output 2 Input 5 Output 5 Input 6 Output 9","solution":"def number_of_diagonals(n): Returns the number of distinct diagonals in a regular polygon with n vertices. # Using the formula for the number of diagonals in a polygon: n * (n - 3) / 2 return n * (n - 3) // 2"},{"question":"A company wants to keep track of the products they have in stock. Each product has a unique ID, name, and quantity. The company wants to be able to perform the following operations: 1. Add a new product. 2. Update the quantity of a product. 3. Query the quantity of a product. 4. Find the product with the highest quantity. Your task is to implement a system that can handle these operations. Input: - The first line contains an integer `Q`, the number of operations. - The next `Q` lines describe the operations. Each operation is in one of the following formats: - `1 ID Name Quantity`: Add a new product with the given ID, name, and quantity. If a product with the same ID already exists, update its name and quantity to the new values. - `2 ID Quantity`: Update the quantity of the product with the given ID by adding the specified Quantity to its current quantity. - `3 ID`: Query the system for the current quantity of the product with the given ID. The system should output the quantity. - `4`: Find the product with the highest quantity and output its ID and quantity. If there are multiple products with the same highest quantity, output the one with the smallest ID. Constraints: 1 ≤ Q ≤ 100000 1 ≤ ID ≤ 100000 1 ≤ Quantity ≤ 10000 1 ≤ Length of Name ≤ 20 Sample Input: 7 1 101 Apple 50 1 102 Banana 30 1 103 Orange 40 2 102 20 3 102 4 2 101 10 Sample Output: 50 101 50","solution":"class Inventory: def __init__(self): self.products = {} def add_product(self, ID, name, quantity): self.products[ID] = {\'name\': name, \'quantity\': quantity} def update_quantity(self, ID, quantity): if ID in self.products: self.products[ID][\'quantity\'] += quantity def query_quantity(self, ID): if ID in self.products: return self.products[ID][\'quantity\'] return 0 def highest_quantity(self): max_quantity = -1 max_id = None for ID, details in self.products.items(): if details[\'quantity\'] > max_quantity or (details[\'quantity\'] == max_quantity and ID < max_id): max_quantity = details[\'quantity\'] max_id = ID return (max_id, max_quantity) def process_operations(operations): inventory = Inventory() results = [] for operation in operations: op = operation.split() if op[0] == \'1\': ID = int(op[1]) name = op[2] quantity = int(op[3]) inventory.add_product(ID, name, quantity) elif op[0] == \'2\': ID = int(op[1]) quantity = int(op[2]) inventory.update_quantity(ID, quantity) elif op[0] == \'3\': ID = int(op[1]) results.append(inventory.query_quantity(ID)) elif op[0] == \'4\': results.append(inventory.highest_quantity()) return results"},{"question":"Given an integer N and a square matrix Mat of dimensions NxN, the task is to find the primary diagonal sum of the matrix. The primary diagonal of a matrix consists of those elements that lie on the diagonal that runs from the top left corner to the bottom right corner. Example 1: Input: N = 3 Mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: 15 Explanation: The primary diagonal elements are 1, 5, and 9. Their sum is 15. Example 2: Input: N = 2 Mat = [[10, 3], [7, 6]] Output: 16 Explanation: The primary diagonal elements are 10 and 6. Their sum is 16. Your Task: You don\'t need to read input or print anything. Your task is to complete the function primaryDiagonalSum() which takes the integer N and the 2D matrix Mat as input parameters and returns the sum of the primary diagonal elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 1000 1 <= Mat[i][j] <= 1000","solution":"def primaryDiagonalSum(N, Mat): Returns the sum of the primary diagonal elements of a square matrix. Parameters: N (int): The dimension of the matrix. Mat (list of list of int): The NxN matrix. Returns: int: The sum of primary diagonal elements. sum_diagonal = 0 for i in range(N): sum_diagonal += Mat[i][i] return sum_diagonal"},{"question":"Write a function called `to_upper_diagonal` that transforms a given square matrix into its upper diagonal form. In an upper diagonal matrix, all elements below the main diagonal are set to zero. You need to read the matrix dimensions and values from the input, transform the matrix, and then print the transformed matrix. -----Constraints----- - The matrix will be a square matrix of size N x N. - 1 leq N leq 50 - Elements in the matrix are integers between -100 and 100. -----Input----- Input is given from Standard Input in the following format: ``` N A_11 A_12 ... A_1N A_21 A_22 ... A_2N ... AN1 AN2 ... ANN ``` -----Output----- Print the transformed matrix in the same format. -----Sample Input----- 3 1 2 3 4 5 6 7 8 9 -----Sample Output----- 1 2 3 0 5 6 0 0 9 In the given matrix, elements below the main diagonal (4, 7, and 8) are set to zero. The remaining elements remain unchanged.","solution":"def to_upper_diagonal(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) matrix = [] idx = 1 for i in range(N): row = [] for j in range(N): row.append(int(data[idx])) idx += 1 matrix.append(row) # Transforming to upper diagonal matrix for i in range(N): for j in range(i): matrix[i][j] = 0 for row in matrix: print(\' \'.join(map(str, row)))"},{"question":"Given an array of integers, write a program to determine if there exist three elements in the array whose sum is equal to a given target value. If such elements exist, return true; otherwise, return false. Example 1: Input: arr[] = {1, 4, 45, 6, 10, 8} target = 22 Output: true Explanation: The triplet (4, 10, 8) sums up to 22. Example 2: Input: arr[] = {1, 2, 4, 3, 6} target = 10 Output: true Explanation: The triplet (1, 3, 6) sums up to 10. Your Task: You don\'t need to take any input. You just need to complete the function `findTriplets()` that takes an array `arr` and the target integer as parameters and returns true if there is a triplet in the array whose sum equals the target value, otherwise return false. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: - 1 ≤ N ≤ 10^3 - -10^5 ≤ arr[i] ≤ 10^5 - -10^5 ≤ target ≤ 10^5","solution":"def findTriplets(arr, target): Determines if there exist three elements in the array whose sum is equal to a given target value. Parameters: arr (list): List of integers. target (int): Target sum value. Returns: bool: True if such a triplet exists, otherwise False. n = len(arr) arr.sort() for i in range(n-2): left = i + 1 right = n - 1 while (left < right): current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Kara is organizing a small marathon event in her neighborhood. She wants to create a system to assign each participant a unique identifier and store their race times. During and after the race, she needs to be able to quickly find and display the current ranking of the participants based on their times. The ranking should be updated dynamically as new times are recorded. Given this scenario, your task is to write a program that helps Kara manage the race participants and their times. 1. Initially, the program will receive the number of participants N (1 ≤ N ≤ 200). 2. Next, it will receive N lines with each line containing a participant\'s identifier (a string of 1 to 20 alphanumeric characters) and their initial race time (a positive floating-point number). 3. After recording the initial data, the program should be able to process two types of operations: - \\"UPDATE x t\\" where x is a participant\'s identifier and t is the new recorded time. - \\"RANKING\\" which outputs the current ranking of participants based on their best times (the smaller the better). If two participants have the same time, they should be ranked lexicographically by their identifiers. Input The input consists of multiple lines. The first line contains the integer N. The following N lines contain a participant\'s identifier and their initial time. After that, each line represents an operation (either \\"UPDATE x t\\" or \\"RANKING\\"). The operations continue until the end of input. Output For each \\"RANKING\\" operation, output the ranking of participants based on their best times. Each ranking should be on a new line, with each participant\'s identifier followed by their best time. Example Input 3 alice 360.5 bob 359.3 charlie 360.5 UPDATE bob 358.2 UPDATE alice 358.2 RANKING UPDATE charlie 357.9 RANKING Output bob 358.2 alice 358.2 charlie 360.5 charlie 357.9 bob 358.2 alice 358.2","solution":"def manage_marathon(participants_info, operations): participants = {} # Record initial data for info in participants_info: identifier, time = info.split() participants[identifier] = float(time) results = [] # Process operations for operation in operations: if operation.startswith(\\"UPDATE\\"): _, identifier, new_time = operation.split() participants[identifier] = min(participants[identifier], float(new_time)) elif operation == \\"RANKING\\": ranking = sorted(participants.items(), key=lambda x: (x[1], x[0])) results.append([(ident, time) for ident, time in ranking]) return results"},{"question":"You are working on developing a new feature for a social media platform. One important aspect of this feature is to analyze the engagement metrics of a user\'s posts. To do this, you have access to a dataset containing information about the interactions on each post. Each post has a certain number of likes, comments, and shares, and your task is to calculate a metric called the \\"Engagement Rate\\" for each post. The Engagement Rate for a post is defined as the sum of its likes, comments, and shares, divided by the total number of interactions (i.e., likes + comments + shares). However, some posts might have zero interactions. For such posts, the Engagement Rate should be considered as zero to avoid division by zero errors. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000), which is the number of posts. The next n lines describe the details of each post. Each line contains three integers li (0 ≤ li ≤ 10000), ci (0 ≤ ci ≤ 10000), and si (0 ≤ si ≤ 10000), separated by spaces, representing the number of likes, comments, and shares for the i-th post. Output Print n lines, where each line contains a single floating-point number representing the Engagement Rate of the corresponding post. The result should be printed with a precision of two decimal places. Examples Input: 3 10 5 0 0 0 0 1 2 1 Output: 1.00 0.00 1.00 Note For the first post, the total number of interactions is 15 (10 likes + 5 comments + 0 shares), so the Engagement Rate is 15/15 = 1.00. For the second post, there are no interactions, so the Engagement Rate is 0.00. For the third post, the total number of interactions is 4 (1 like + 2 comments + 1 share), so the Engagement Rate is 4/4 = 1.00.","solution":"def calculate_engagement_rate(n, posts): Calculate the engagement rate for each post. :param n: Number of posts :param posts: List of tuples, each containing three integers (likes, comments, shares) :return: List of engagement rates for each post with two decimal precision engagement_rates = [] for post in posts: li, ci, si = post total_interactions = li + ci + si if total_interactions == 0: engagement_rate = 0.00 else: engagement_rate = total_interactions / total_interactions engagement_rates.append(f\\"{engagement_rate:.2f}\\") return engagement_rates # Example usage: # n = 3 # posts = [(10, 5, 0), (0, 0, 0), (1, 2, 1)] # print(calculate_engagement_rate(n, posts)) => [\'1.00\', \'0.00\', \'1.00\']"},{"question":"A gardener is planting flowers in a straight row. Each flower must be of one of three colors: red, yellow, or blue. The garden has some constraints on how the flowers can be arranged. Specifically, no two adjacent flowers can be of the same color. Your task is to determine how many valid arrangements of flowers exist, given the number of flowers the gardener wants to plant. Since the number of valid arrangements can be large, return the result modulo 10^9 + 7. ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - Each test case consists of one line containing an integer N — the number of flowers to be planted. ------ Output Format ------ For each test case, output the number of valid arrangements of N flowers, modulo 10^9 + 7. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 ------ Sample Input 1 ------ 3 1 2 3 ------ Sample Output 1 ------ 3 6 12 ------ Explanation 1 ------ Test case 1: With N = 1, the gardener can plant a single flower in 3 different ways: red, yellow, or blue. Thus, there are 3 valid arrangements. Test case 2: With N = 2, the gardener can plant two flowers so that no two adjacent flowers are of the same color in 6 different ways: red-yellow, red-blue, yellow-red, yellow-blue, blue-red, blue-yellow. Thus, there are 6 valid arrangements. Test case 3: With N = 3, the gardener can plant three flowers in 12 different valid arrangements such that no two adjacent flowers are of the same color.","solution":"MOD = 10**9 + 7 def count_valid_arrangements(N): if N == 1: return 3 elif N == 2: return 6 prev_prev = 3 prev = 6 for _ in range(3, N + 1): current = (prev_prev * 2 + prev) % MOD prev_prev, prev = prev, current return prev def flower_arrangements(T, cases): results = [] for N in cases: results.append(count_valid_arrangements(N)) return results"},{"question":"Write a function that takes a list of integers and returns the highest product of any three numbers from the list. Input :: [1, 10, 2, 6, 5, 3] Output :: 300 Explanation: The highest product can be obtained by multiplying 6, 5, and 10. If the list has fewer than three integers, return None.","solution":"def highest_product_of_three(numbers): Returns the highest product of any three numbers from the list. If the list has fewer than three integers, returns None. if len(numbers) < 3: return None numbers.sort() max1, max2, max3 = numbers[-1], numbers[-2], numbers[-3] min1, min2 = numbers[0], numbers[1] return max(max1 * max2 * max3, max1 * min1 * min2)"},{"question":"String Reordering Problem Statement You are given a string `s` consisting of lowercase English letters. Your task is to reorder the characters of the string in such a way that no two adjacent characters are the same. If such reordering is not possible, return an empty string. Constraints * 1 ≤ |s| ≤ 10^4 Input The input consists of a single line containing the string `s`. Output Output a single line containing the reordered string or an empty string if it is not possible to reorder as required. Examples Input aab Output aba Input aaab Output","solution":"import heapq from collections import Counter def reorganize_string(s): counter = Counter(s) max_heap = [(-count, char) for char, count in counter.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char result = \'\'.join(result) if len(result) != len(s): return \\"\\" return result"},{"question":"In a game of Tower Ascent, you are required to climb a tower consisting of n levels. Each level has a number of coins scattered on the floor, and you must collect exactly one coin from each level as you ascend. The objective is to collect coins in such a way that maximizes the total value of coins collected. However, there\'s a catch: if you collect a coin from a certain level, you cannot collect coins from the immediately adjacent levels of that level. Given an array representing the number of coins available at each level of the tower, determine the maximum number of coins you can collect. -----Input----- The first and only line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of levels of the tower. Then follow n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4), where a_i represents the number of coins on the i-th level. -----Output----- Output a single integer — the maximum number of coins that can be collected. -----Examples----- Input 5 3 2 5 10 7 Output 15 Input 4 2 9 7 5 Output 14 -----Note----- In the first sample, you can collect coins from levels 1, 3, and 5 to get a total of 3 + 5 + 7 = 15 coins. In the second sample, you can collect coins from levels 2 and 4 to get a total of 9 + 5 = 14 coins.","solution":"def max_coins(n, coins): if n == 0: return 0 if n == 1: return coins[0] # Create an array to store the maximum coins that can be collected up to each level dp = [0] * n dp[0] = coins[0] if n > 1: dp[1] = max(coins[0], coins[1]) for i in range(2, n): dp[i] = max(dp[i - 1], coins[i] + dp[i - 2]) return dp[-1]"},{"question":"Problem statement You are given a grid of size `NxM` with each cell containing a positive integer value that represents the height of that cell. You can move from a cell to any of its adjacent cells (left, right, up, or down). You want to find the maximum height difference you can achieve following exactly K moves starting from any cell in the grid. You have to solve Q queries where each query provides a value for K. Function Signature: ```python def max_height_difference(grid: List[List[int]], K: int) -> int: ``` Input - N, M, Q as three space-separated integers. - NxM grid containing the heights. - Q space-separated integers representing the values of K for each query. Output Print the result in one line for each query. Constraints - All inputs are integers. - 2 ≤ N, M ≤ 100 - 1 ≤ Q ≤ 100 - 1 ≤ grid[i][j] ≤ 500 - 1 ≤ K ≤ N * M Example Input ``` 3 3 2 1 2 3 4 5 6 7 8 9 3 4 ``` Output ``` 8 8 ``` Explanation For the first query with K=3, the maximum difference can be achieved by starting from cell (0,0) with height 1 and moving to cell (2,2) with height 9 in exactly 3 moves, giving a difference of 9 - 1 = 8. For the second query with K=4, the same maximum difference can be achieved.","solution":"from collections import deque def max_height_difference(grid, K): N = len(grid) M = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_diff = 0 def bfs(start_x, start_y): queue = deque([(start_x, start_y, 0)]) min_height = grid[start_x][start_y] max_height = grid[start_x][start_y] visited = set() visited.add((start_x, start_y)) while queue: x, y, moves = queue.popleft() if moves < K: for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) min_height = min(min_height, grid[nx][ny]) max_height = max(max_height, grid[nx][ny]) return max_height - min_height for i in range(N): for j in range(M): max_diff = max(max_diff, bfs(i, j)) return max_diff"},{"question":"Chef is playing with a special kind of string manipulation puzzle. He has a string consisting of lowercase English letters and can perform the following operation: choose a non-empty palindromic subsequence and remove it from the string. He can repeat this operation as many times as he wants. Help Chef to remove all the characters from the string in the minimal number of moves. ------ Input ------ The first line contains an integer T, the number of test cases. Each of the next T lines contains a single string s. ------ Output ------ For each test case, output a single line containing the minimal number of moves required to remove all the characters from the string. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ length of s ≤ 1000 The string s consists of lowercase English letters only. ------ Sample Input 1 ------ 3 ababa abcd aabb ------ Sample Output 1 ------ 1 4 2 ----- Explanation ------ In the first test case, the entire string \\"ababa\\" is a palindrome, so Chef can remove it in one move. In the second test case, there are no palindromic subsequences that span more than one character, so Chef needs to remove each character individually, resulting in 4 moves. In the third test case, Chef can first remove \\"aa\\" and then \\"bb\\" to clear the string in 2 moves.","solution":"def min_moves_to_remove_palindromes(T, strings): def is_palindrome(s): return s == s[::-1] result = [] for s in strings: if is_palindrome(s): result.append(1) else: result.append(2 if not is_palindrome(s[::-1]) else 1) return result"},{"question":"In a faraway land, there exists a magical forest with n trees. Each tree has its own unique magic power value. The magic of the entire forest can be measured by a special technique that involves choosing three distinct trees and calculating the product of their magic power values. With increasing threats from neighboring lands, the enchanted inhabitants of the forest seek to maximize the forest\'s magic. You need to help the inhabitants by finding out the maximum product of magic power values of any three distinct trees. -----Input----- The first line contains an integer n (3 ≤ n ≤ 10^5), indicating the number of trees in the forest. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), where each ai represents the magic power value of the i-th tree. -----Output----- Print a single integer, the maximum product of magic power values of any three distinct trees. -----Example----- Input 5 10 3 5 6 20 Output 1200 Input 4 1 2 3 4 Output 24 -----Note----- In the first example, the optimal choice is the trees with magic power values 10, 6, and 20 whose product is 1200. In the second example, the optimal choice is the trees with magic power values 2, 3, and 4 whose product is 24.","solution":"def max_product_of_three(nums): Returns the maximum product of any three distinct numbers from the list nums. nums.sort() # The top 3 maximum numbers max1 = nums[-1] max2 = nums[-2] max3 = nums[-3] # The two minimum numbers (could be large negative values) min1 = nums[0] min2 = nums[1] # Either the product of the three largest numbers or the product of the two smallest and the largest number return max(max1 * max2 * max3, min1 * min2 * max1)"},{"question":"You are given an application configuration file that defines various environment variables. Each variable is expressed in the form of `KEY=VALUE`, where both key and value are strings. For the sake of simplicity, assume keys and values contain only alphanumeric characters and underscores (`_`). For security reasons, you are required to redact specific environment values in the configuration file. You are given a set of keys that need to be redacted. Redacted keys should have their values replaced with the string `\\"REDACTED\\"`. More formally, for each line in the configuration file that contains a key which needs to be redacted, you need to replace the value with `\\"REDACTED\\"`. The rest of the lines in the configuration file should remain unchanged. -----Input----- The first line contains an integer `k` (1 ≤ k ≤ 100), the number of keys to redact. The next `k` lines each contain a single string key that needs to be redacted. Each key consists of alphanumeric characters and underscores, and its length does not exceed 20. The following lines contain an integer `n` (1 ≤ n ≤ 1000), the number of lines in the configuration file. The next `n` lines each contain a single string in the form `KEY=VALUE`, where both `KEY` and `VALUE` are non-empty strings of alphanumeric characters and underscores. The length of each line is at most 100. -----Output----- Print `n` lines, where each line shows the entry from the configuration file after redaction. If the key of a line should be redacted, replace the value with `\\"REDACTED\\"`. Otherwise, print the line unchanged. -----Examples----- Input 2 PASSWORD API_KEY 5 USERNAME=admin PASSWORD=secret123 HOST=localhost API_KEY=abcd1234 PORT=8080 Output USERNAME=admin PASSWORD=REDACTED HOST=localhost API_KEY=REDACTED PORT=8080 Input 1 TOKEN 3 USER_ID=42 TOKEN=db790f MODE=production Output USER_ID=42 TOKEN=REDACTED MODE=production","solution":"def redact_configurations(k, redact_keys, n, config_lines): Redacts specific keys in the configuration file. Args: k (int): The number of keys to redact. redact_keys (list of str): The list of keys that need to be redacted. n (int): The number of lines in the configuration file. config_lines (list of str): The list of configuration lines in the form KEY=VALUE. Returns: list of str: The updated configuration lines after redaction. redacted_configs = [] redact_set = set(redact_keys) for line in config_lines: key, value = line.split(\'=\', 1) if key in redact_set: redacted_configs.append(f\\"{key}=REDACTED\\") else: redacted_configs.append(line) return redacted_configs"},{"question":"Create a function that accepts a list of integers and an integer `n` as input. The function should return all the unique pairs of integers from the list that sum up to `n`. If no such pairs exist, return an empty list. For example, the input `([2, 4, 3, 5, 7, 8, 9, 1], 10)` should return `[(3, 7), (2, 8), (1, 9)]` Ensure that: - Each pair should be sorted in ascending order. - The list of pairs should also be sorted in ascending order based on the first element of the pairs. - If the input is not a list of integers or `n` is not an integer, return \\"Please enter a valid list of integers and a valid integer\\".","solution":"def find_pairs(nums, n): Returns a list of unique pairs of integers from the input list that sum up to n. Parameters: nums (list): A list of integers. n (int): An integer to which the pairs should sum up. Returns: list: A list of tuples where each tuple contains a pair of integers that sum up to n. If no such pairs exist, returns an empty list. If input is not valid, returns a string with an error message. if not isinstance(nums, list) or not isinstance(n, int): return \\"Please enter a valid list of integers and a valid integer.\\" if any(not isinstance(x, int) for x in nums): return \\"Please enter a valid list of integers and a valid integer.\\" nums_set = set(nums) pairs = set() for num in nums: if (n - num) in nums_set: pair = tuple(sorted((num, n - num))) if pair[0] != pair[1]: # To prevent using the same element twice pairs.add(pair) return sorted(pairs)"},{"question":"You are given an array of integers and an integer target sum. Return the indices of the two numbers in the array that add up to the target sum. Input The first line of the input contains an integer `n` (2 ≤ n ≤ 10^4), the length of the array. The second line contains `n` integers representing the elements of the array (−10^9 ≤ elements of array ≤ 10^9). The third line contains the integer `target` (−10^9 ≤ target ≤ 10^9). Output If there are two indices that sum up to the target, print the two indices (1-based index), sorted in ascending order. If there are multiple pairs, print the pair with the smallest first index. If there are no such indices, print \\"No valid pair\\". Examples Input 5 2 7 11 15 1 9 Output 1 2 Input 4 1 2 3 4 8 Output No valid pair","solution":"def two_sum_indices(arr, target): Find two indices in the array arr that sum up to target. Parameters: arr (list of int): Input array of integers. target (int): The target sum. Returns: tuple of int: A tuple of two integers representing the indices (1-based) of the elements that sum to the target. Indices are returned in ascending order. If no such pair is found, return \\"No valid pair\\". index_map = {} for i, num in enumerate(arr): complement = target - num if complement in index_map: return (index_map[complement] + 1, i + 1) index_map[num] = i return \\"No valid pair\\""},{"question":"You are given a list of temperatures recorded throughout the day. Write a program that calculates the average temperature and outputs it, rounded to 2 decimal places. Input The input is given in the following format: Temperature ... ... The temperature readings are provided one per line. All values ​​are real numbers (can be negative or positive) and the number of temperature readings will be 100 or fewer. Output The program should print the average temperature as a real number rounded to 2 decimal places. Example Input 23.5 18.7 26.8 22.1 19.0 Output 22.02","solution":"def average_temperature(temperatures): Calculates the average temperature from the list of temperatures, rounded to 2 decimal places. Parameters: temperatures (list): A list of temperature readings (real numbers). Returns: float: The average temperature rounded to 2 decimal places. if not temperatures: return 0.0 avg_temp = sum(temperatures) / len(temperatures) return round(avg_temp, 2)"},{"question":"You are given an array of n integers. Your task is to determine if you can partition the array into exactly two non-empty segments such that the sum of the elements in both segments is equal. You cannot reorder the elements in the array; partitions must be contiguous. Return \\"YES\\" if such a partition exists, otherwise return \\"NO\\". -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n (2 le n le 10^5) — the length of the array a. The next line contains n integers a_1, a_2, ldots, a_n (-10^4 le a_{i} le 10^4) separated by spaces describing elements of the array a. It is guaranteed that the sum of n over all test cases doesn\'t exceed 10^6. -----Output----- For each test case, print \\"YES\\" if the array can be partitioned into two segments with equal sum, otherwise print \\"NO\\". -----Examples----- Input 3 4 1 2 3 4 5 1 1 1 1 2 3 3 3 3 Output NO YES NO -----Note----- In the first test case, there is no way to partition the array into two segments with an equal sum. In the second test case, you can partition the array into segments [1, 1, 1, 1] and [2] which both have a sum of 4. In the third test case, there is no way to partition the array into two segments with an equal sum.","solution":"def can_partition(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] total_sum = sum(a) if total_sum % 2 != 0: results.append(\\"NO\\") continue target_sum = total_sum // 2 current_sum = 0 for num in a: current_sum += num if current_sum == target_sum: results.append(\\"YES\\") break else: results.append(\\"NO\\") return results"},{"question":"You are given a list of integers `nums` and an integer `k`. Write a function to check if there is a continuous subarray of size at least 2 that sums up to a multiple of `k`, that is, sums up to `n * k` where `n` is an integer. Your function should return `true` if such a subarray exists, and `false` otherwise. Input Your function receives two inputs: - A list of integers `nums` with length `n`. - An integer `k`. Output Return a boolean value (`true` or `false`). Examples Input [23, 2, 4, 6, 7] 6 Output true Input [23, 2, 6, 4, 7] 6 Output true Input [23, 2, 6, 4, 7] 13 Output false Note In the first example, the subarray `[2, 4]` sums up to `6`, which is a multiple of `6`. In the second example, the subarray `[23, 2, 6, 4, 7]` sums up to `42`, which is a multiple of `6`. In the third example, no continuous subarray of size at least 2 sums up to a multiple of `13`.","solution":"def check_subarray_sum(nums, k): Checks if there\'s a continuous subarray of size at least 2 that sums up to a multiple of k. if not nums or len(nums) < 2: return False # Dictionary to store the remainder when sum up to current index is divided by k remainders = {0: -1} total_sum = 0 for i, num in enumerate(nums): total_sum += num if k != 0: remainder = total_sum % k else: remainder = total_sum if remainder in remainders: if i - remainders[remainder] > 1: return True else: remainders[remainder] = i return False"},{"question":"A painter wants to calculate the time it takes to paint a wall. The painter has two options for painting: Paint the wall individually, which takes T minutes Paint the wall with an assistant, which reduces the painting time by 30% Given the painting time T, determine the minimum time it takes to paint the wall using the best option. ------ Input Format ------ - The first line contains a single integer N - the number of test cases. Then the test cases follow. - The first and only line of each test case contains a single integer T - the time taken to paint the wall individually in minutes. ------ Output Format ------ For each test case, output the minimum time it takes to paint the wall. ------ Constraints ------ 1 ≤ N ≤ 100 30 ≤ T ≤ 5000 ----- Sample Input 1 ------ 3 300 1500 45 ----- Sample Output 1 ------ 210 1050 31.5 ----- Explanation 1 ------ Test case 1: With the help of an assistant, the time is reduced by 30% to 210 minutes which is lesser than 300 minutes of painting alone. Test case 2: With the help of an assistant, the time is reduced by 30% to 1050 minutes which is lesser than 1500 minutes of painting alone. Test case 3: With the help of an assistant, the time is reduced by 30% to 31.5 minutes which is lesser than 45 minutes of painting alone.","solution":"def calculate_min_time(N, times): This function calculates the minimum time to paint the wall for each test case considering both options: painting individually or with an assistant. Parameters: N (int): Number of test cases. times (list of int): List containing T, the time taken to paint the wall individually. Returns: list of float: List containing the minimum time to paint the wall for each test case. result = [] for T in times: with_assistant_time = T - (0.3 * T) min_time = min(T, with_assistant_time) result.append(min_time) return result"},{"question":"Problem Charles is participating in a diving competition judged based on technical score and artistic score. The final score for each dive is a combination of these scores. The judges’ criteria are as follows: - If the sum of Charles\'s technical and artistic scores exceeds 160, he gets an \\"Excellent\\" rating. - If the sum is between 120 and 160 inclusive, he gets a \\"Good\\" rating. - If the sum is below 120, he gets a \\"Needs Improvement\\" rating. Given the technical and artistic scores for Charles\'s dive, determine his rating. # Constraints The input satisfies the following conditions: - 0 leq T leq 100 - 0 leq A leq 100 - All inputs are integers. # Input The input is given in the following format: T A Where: - T represents the technical score. - A represents the artistic score. # Output Print \\"Excellent\\" if the combined score is greater than 160, \\"Good\\" if it is between 120 and 160 inclusive, and \\"Needs Improvement\\" if it is below 120 on a single line. # Examples Input 50 100 Output Good Input 90 80 Output Excellent Input 30 60 Output Needs Improvement","solution":"def diving_rating(T, A): Determines the rating for Charles\'s dive based on his technical (T) and artistic (A) scores. Arguments: T -- technical score (0 <= T <= 100) A -- artistic score (0 <= A <= 100) Returns: A string representing the rating (\\"Excellent\\", \\"Good\\", or \\"Needs Improvement\\"). total_score = T + A if total_score > 160: return \\"Excellent\\" elif 120 <= total_score <= 160: return \\"Good\\" else: return \\"Needs Improvement\\""},{"question":"Given an integer array, determine if it can be made strictly increasing by changing at most one element. A strictly increasing array is an array in which each element is greater than the preceding element. Input: The first line contains an integer t (1 leq t leq 10^4) representing the number of test cases. For each test case: - The first line contains a single integer n (2 leq n leq 10^5), the length of the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) representing the elements of the array. Output: For each test case, print \\"YES\\" if the array can be made strictly increasing by changing at most one element; otherwise print \\"NO\\". Examples: Input: 5 3 1 2 3 3 3 2 1 5 1 3 5 6 4 4 5 10 20 8 3 2 2 3 Output: YES NO YES YES YES Explanation of examples: - In the first test case, the array is already strictly increasing. - In the second test case, no single change can make the array strictly increasing. - In the third test case, changing the element with value 4 to, for example, 7, will make the array [1, 3, 5, 6, 7], which is strictly increasing. - In the fourth test case, changing the element with value 8 to, for example, 25, will make the array [5, 10, 20, 25], which is strictly increasing. - In the fifth test case, changing the first or second \'2\' to, for example, \'1\' or \'4\', will make the array strictly increasing.","solution":"def can_be_made_strictly_increasing(a): Returns True if the array can be made strictly increasing by changing at most one element. n = len(a) count = 0 pos = -1 for i in range(1, n): if a[i] <= a[i - 1]: count += 1 pos = i if count == 0: return True if count > 1: return False if pos == 1 or pos == n - 1: return True if a[pos - 1] < a[pos + 1] or a[pos - 2] < a[pos]: return True return False def solve(t, test_cases): results = [] for n, a in test_cases: if can_be_made_strictly_increasing(a): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A collection of books is represented in a library, each characterized by its unique book ID. Each book ID is a non-negative integer. Your task is to sort the books according to their unique book IDs in a way that all books with even IDs appear before those with odd IDs. Additionally, within the even and odd categories, the books should maintain their original relative order. For example, given an initial list of book IDs `[3, 1, 4, 6, 9, 2]`, the sorted list should be `[4, 6, 2, 3, 1, 9]`. Here, the even book IDs `4, 6, 2` appear first, followed by the odd book IDs `3, 1, 9`, while maintaining their original relative order within the respective categories. # Function Signature You need to implement the function `sortBookIDs(ids)` which takes a list `ids` representing the book IDs as input and returns the list sorted as described above. # Example 1 **Input** ``` ids = [3, 8, 5, 6, 12, 7] ``` **Output** ``` [8, 6, 12, 3, 5, 7] ``` # Example 2 **Input** ``` ids = [11, 2, 7, 4, 25] ``` **Output** ``` [2, 4, 11, 7, 25] ``` # Constraints - The length of `ids` will be in the range [1, 10^5]. - Each element of `ids` is a non-negative integer up to 10^5. # Expected Complexity - The time complexity should be O(n), where n is the length of the list. - The auxiliary space complexity should be O(n).","solution":"def sortBookIDs(ids): Sorts the list of book IDs such that even IDs come before odd IDs and relative order of even and odd IDs is maintained. Args: ids (list): The list of book IDs. Returns: list: The sorted list of book IDs. evens = [id for id in ids if id % 2 == 0] odds = [id for id in ids if id % 2 != 0] return evens + odds"},{"question":"Given a list of n integers, determine whether a list can be split into two sublists with equal sums. The two sublists must solely contain elements from the original list, and every element must be included in exactly one of the two sublists. Return YES if such a split is possible, otherwise return NO. Example lst = [1, 5, 11, 5] This list can be divided into [1, 5, 5] and [11] with equal sum 11. lst = [1, 2, 3, 5] This list cannot be split into two sublists with equal sums. Function Description Complete the `canPartition` function in the editor below. `canPartition` has the following parameter: - `int[] lst`: a list of integers Returns - `string`: either YES or NO Input Format A single list of integers `lst`. Constraints - 1 leq n leq 200 - 1 leq lst[i] leq 100 Sample Input 0 ``` lst = [1, 5, 11, 5] ``` Sample Output 0 ``` YES ``` Explanation 0 The list can be divided into sublists {1,5,5} and {11} that both have an equal sum of 11. Sample Input 1 ``` lst = [1, 2, 3, 8] ``` Sample Output 1 ``` NO ``` Explanation 1 This list cannot be split into two sublists that would have equal sums.","solution":"def canPartition(lst): total_sum = sum(lst) # If total sum is odd, it\'s not possible to split into two equal sums if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(lst) # Create a DP table where dp[i] will be True if there is a subset of lst[0..i-1] with sum equal to i dp = [False] * (target + 1) dp[0] = True for num in lst: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"Given an integer K, determine the number of unique K-length strings that can be created from the set of characters {\'a\', \'b\', \'c\', \'d\'} such that no two adjacent characters are the same. Example 1: Input: K = 1 Output: 4 Explanation: The possible strings are \\"a\\", \\"b\\", \\"c\\", \\"d\\". Example 2: Input: K = 2 Output: 12 Explanation: The possible strings are \\"ab\\", \\"ac\\", \\"ad\\", \\"ba\\", \\"bc\\", \\"bd\\", \\"ca\\", \\"cb\\", \\"cd\\", \\"da\\", \\"db\\", \\"dc\\". Example 3: Input: K = 3 Output: 36 Explanation: Suppose we choose the first character \'a\', then there are 3 possibilities for the second character (\'b\', \'c\', \'d\') and for each of these, there are 3 possibilities for the third character (excluding the character that was selected as the second). Hence, for starting with \'a\', there will be 9 possible strings, and similarly for \'b\', \'c\', and \'d\'. Therefore, the total number of possible strings is 4 * 9 = 36. Your Task: You don\'t need to read input or print anything. Complete the function countUniqueStrings() which takes an integer K as the input parameter and returns the number of unique K-length strings with no two adjacent characters being the same. Expected Time Complexity: O(K) Expected Auxiliary Space: O(1) Constraints: 1 ≤ K ≤ 100000","solution":"def countUniqueStrings(K): Returns the number of unique K-length strings with no two adjacent characters being the same. if K == 1: return 4 total_ways = 4 * (3 ** (K - 1)) return total_ways"},{"question":"A new startup company is planning to organize their project timelines. Each project must be completed within a certain number of days known as its deadline. However, to ensure quality, only one project can be worked on each day, and all projects must be completed by their respective deadlines. You are given a list of project deadlines and their respective durations. Determine the maximum number of projects that the company can complete without missing any deadlines. -----Constraints----- - 1 leq N leq 2 times 10^5 - 1 leq D_i leq 10^9 (Deadline for project i) - 1 leq T_i leq 10^4 (Duration of project i) -----Input----- Input is given from Standard Input in the following format: N D_1 T_1 D_2 T_2 ... D_N T_N -----Output----- Print the maximum number of projects that can be completed without missing any deadlines. -----Sample Input----- 4 10 5 8 3 15 7 7 2 -----Sample Output----- 3 Explanation: The projects can be completed in the following sequence to meet the deadlines: - Project 4 (Duration: 2, Deadline: 7) - Project 2 (Duration: 3, Deadline: 8) - Project 1 (Duration: 5, Deadline: 10) Therefore, the maximum number of projects that can be completed is 3.","solution":"def max_projects(n, projects): # Sort projects by their deadlines projects.sort(key=lambda x: x[0]) current_day = 0 count = 0 for deadline, duration in projects: if current_day + duration <= deadline: current_day += duration count += 1 return count"},{"question":"A small company wants to automate the payroll process for paying its employees. Employees are paid based on an hourly wage but they also receive a bonus if they exceed a specific number of hours in the week. If they exceed the threshold, they receive a specified bonus amount per hour for every hour worked beyond the threshold. Write a function `calculate_payroll(wage, hours, threshold, extra_bonus)` that calculates the total weekly earnings for an employee based on the following: - `wage`: The hourly wage of the employee as a positive integer. - `hours`: The number of hours the employee worked in the week as a positive integer. - `threshold`: The number of hours that must be exceeded to gain the extra bonus as a positive integer. - `extra_bonus`: The additional bonus received per hour beyond the threshold as a positive integer. The function should return the total weekly earnings for that employee. # Examples: 1. **Input:** `calculate_payroll(20, 38, 35, 5)` **Output:** `760` **Explanation:** The employee has worked 38 hours, which is 3 hours over the threshold of 35 hours. - Base pay: 20 * 38 = 760 - Bonus: 5 * 3 = 15 - Total pay: 760 + 15 = 775 2. **Input:** `calculate_payroll(15, 40, 40, 10)` **Output:** `600` **Explanation:** The employee has worked 40 hours, which exactly matches the threshold. - Base pay: 15 * 40 = 600 - No bonus as hours worked equals the threshold. - Total pay: 600 3. **Input:** `calculate_payroll(30, 50, 45, 20)` **Output:** `1650` **Explanation:** The employee has worked 50 hours, which is 5 hours over the threshold of 45 hours. - Base pay: 30 * 50 = 1500 - Bonus: 20 * 5 = 100 - Total pay: 1500 + 100 = 1600","solution":"def calculate_payroll(wage, hours, threshold, extra_bonus): Calculates the total weekly earnings for an employee based on wage, hours worked, threshold hours for a bonus, and additional per-hour bonus for hours worked beyond the threshold. Parameters: wage (int): The hourly wage of the employee. hours (int): The number of hours the employee worked in the week. threshold (int): The number of hours that must be exceeded to gain the extra bonus. extra_bonus (int): The additional bonus received per hour beyond the threshold. Returns: int: The total weekly earnings for that employee. base_pay = wage * hours if hours > threshold: bonus_hours = hours - threshold bonus_pay = bonus_hours * extra_bonus else: bonus_pay = 0 total_pay = base_pay + bonus_pay return total_pay"},{"question":"In a galaxy far, far away, there exists a collection of unique planets arranged in a circular array. Scientists from this galaxy discovered that by observing patterns from three consecutive planets, they can predict certain characteristics of the fourth planet immediately next to this triplet of planets. They named this phenomenon the Triplet Observation Technique (TOT). The TOT works as follows: if you have the characteristics of three consecutive planets, you can predict the characteristics of the next planet in either clockwise or counter-clockwise direction. Given the initial characteristics of some planets, scientists want to predict the characteristics of all the planets in the array. They need to determine the minimal number of planets\' characteristics they need to receive initially in order to use TOT to predict characteristics of all planets in the array. -----Input----- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100 000), where n is the number of planets and k is the number of known planets’ characteristics initially. The following k lines each contain an integer p_i (1 ≤ p_i ≤ n) and a string s_i where p_i is the position of the planet (1 ≤ p_i ≤ n) and s_i is the characteristic string of that planet. -----Output----- Print the minimal number of planets\' characteristics they need to receive initially. -----Examples----- Input 4 1 2 ATG Output 1 Input 6 2 1 TTA 4 AGC Output 2 Input 5 0 Output 5 -----Note----- In the first example, we see that with the characteristic of one planet, we can predict the characteristics of all the planets in the array due to the circular nature. In the second example, the known characteristics of two planets do not cover all scenarios, and additional planets\' characteristics might need to be known depending on their positions in the circle. In the third example, no planets\' characteristics are known initially, so characteristics of all planets need to be known to start the predictions.","solution":"def minimal_known_planets(n, k, known_planets): if k == 0: return n return k # Example usage: # n, k = 4, 1 # known_planets = [(2, \\"ATG\\")] # print(minimal_known_planets(n, k, known_planets)) # Output should be 1"},{"question":"You are given a matrix of size n times m filled with integers, and you are tasked with finding the sum of elements in multiple submatrices. For each query, the submatrix is defined by its top-left corner (r1, c1) and bottom-right corner (r2, c2). The sum of the submatrix includes all the elements between these corners, inclusive. Implement a function that processes multiple queries efficiently. ----- Input ----- The first line contains two integers n and m (1 le n, m le 500) - the dimensions of the matrix. The next n lines each contain m integers - the elements of the matrix. It is guaranteed that each element is between -10^6 and 10^6. The next line contains a single integer q (1 le q le 10^4) - the number of queries. Each of the next q lines contains four integers r1, c1, r2, and c2 (1 le r1 le r2 le n, 1 le c1 le c2 le m) - the coordinates of the top-left and bottom-right corners of the submatrix for the query. ----- Output ----- For each query, output a single integer: the sum of elements in the specified submatrix. ----- Example ----- Input 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 Output 12 28 Explanation: For the first query, the sum of elements in the submatrix from (1, 1) to (2, 2) is 1 + 2 + 4 + 5 = 12. For the second query, the sum of elements in the submatrix from (2, 2) to (3, 3) is 5 + 6 + 8 + 9 = 28.","solution":"def preprocess_matrix(matrix): Preprocess the matrix to create a prefix sum matrix. n = len(matrix) m = len(matrix[0]) prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = matrix[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] return prefix_sum def submatrix_sum(prefix_sum, r1, c1, r2, c2): Use the prefix sum matrix to calculate the sum of the submatrix. return prefix_sum[r2][c2] - prefix_sum[r1 - 1][c2] - prefix_sum[r2][c1 - 1] + prefix_sum[r1 - 1][c1 - 1] def process_queries(matrix, queries): Process all queries and return the results. prefix_sum = preprocess_matrix(matrix) results = [] for r1, c1, r2, c2 in queries: results.append(submatrix_sum(prefix_sum, r1, c1, r2, c2)) return results"},{"question":"In a faraway land, there exists a binary tree that only contains integers. The king of this land is very fond of symmetry, and he decreed a special function for this tree called \\"Symmetric Sum\\". The function calculates the sum of node values in the tree such that every level\'s total is considered symmetrical. This means that for every pair of nodes at the same level and equidistant from the center, their values are added together. Your task is to implement this function. Given a binary tree, compute the Symmetric Sum for each level of the tree and return these sums in a list from the top level to the last. For instance, for the tree: ``` 7 / 4 3 / / 9 2 5 2 ``` The symmetric sums will be calculated as follows: - Level 0: 7 - Level 1: 4 + 3 = 7 - Level 2: 9 + 2 = 11, 2 + 5 = 7 (so total symmetric sum is 11 + 7 = 18) Input The input consists of a single integer N (1 ≤ N ≤ 1000), followed by N space-separated integers representing the level-order traversal of the binary tree. If a node doesn\'t have a child in the position, it is represented by -1. Output Output a list where each element indicates the symmetric sum at each level of the binary tree. Examples Input 7 1 2 3 -1 -1 4 5 Output [1, 5, 9] Input 9 10 20 20 10 -1 -1 10 -1 -1 -1 -1 Output [10, 40, 20]","solution":"def symmetric_sum(N, levels): if N == 0: return [] from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(values): if not values: return None root = TreeNode(values[0]) queue = deque([root]) i = 1 while i < len(values): current = queue.popleft() if values[i] != -1: current.left = TreeNode(values[i]) queue.append(current.left) i += 1 if i < len(values) and values[i] != -1: current.right = TreeNode(values[i]) queue.append(current.right) i += 1 return root def symmetric_level_sum(root): if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level_vals = [] for _ in range(level_size): node = queue.popleft() level_vals.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) n = len(level_vals) level_sum = 0 for i in range(n // 2): level_sum += level_vals[i] + level_vals[n - 1 - i] if n % 2 == 1: level_sum += level_vals[n // 2] result.append(level_sum) return result tree_root = build_tree(levels) return symmetric_level_sum(tree_root)"},{"question":"A secret agent, Julia, is assigned the task of secure communications using a simple yet unique encryption. The encryption mechanism works as follows: given a string `s` of length `n`, she needs to transform it into another string `t` using a list of operations defined below: Julia can perform operations of two types to any two adjacent characters with indices i and i+1, where 1 le i < n: 1. Swap the characters s_i and s_{i+1}. 2. Replace the character s_i with a new character. To avoid detection, the total number of operations Julia performs must not exceed 2 times 10^4. Julia wants you to develop a strategy to transform the initial string `s` into the desired string `t`. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases `k` (1 le k le 10). Description of the test cases follows. The first line of each test case contains a single integer n (2 le n le 1000), which is the length of the strings `s` and `t`. The second line of each test case contains the string `s`. The third line of each test case contains the target string `t`. -----Output----- For each test case print the answer in the following format: The first line of output must contain the total number of operations `m`, which the strategy will perform. Note that you do not have to minimize `m`. The inequality `m le 20000 must be satisfied. Each of the next `m` lines must contain operations formatted as “type i”, where “type” is equal to “1” if the strategy needs to perform a swap operation or “2 x” if the strategy needs to perform a replacement operation where `x` is the new character to replace. We can show that an answer always exists. -----Examples----- Input 2 5 abcde badce 4 alex bale Output 4 1 1 1 2 2 1 b 1 4 3 2 1 b 2 2 a 2 3 l -----Note----- For the first sample test case, one possible sequence of operations is as follows: \\"1 1\\". The string `s` becomes \\"bacde\\". \\"1 2\\". The string `s` becomes \\"abcde\\". \\"2 1 b\\". The string `s` becomes \\"bbcde\\". \\"1 4\\". The string `s` becomes \\"bbcd\\". For the second sample test case, one possible sequence of operations is as follows: \\"2 1 b\\". The string `s` becomes \\"blex\\". \\"2 2 a\\". The string `s` becomes \\"baex\\". \\"2 3 l\\". The string `s` becomes \\"balx\\".","solution":"def transform_strings(k, test_cases): def get_operations(n, s, t): operations = [] # Step 1: Align characters by swap if needed s = list(s) for i in range(n): if s[i] != t[i]: for j in range(i+1, n): if s[j] == t[i]: # Swap s[i] and s[j] s[i], s[j] = s[j], s[i] operations.append(f\\"1 {i+1}\\") break # Step 2: Replace characters to match target s = list(s) for i in range(n): if s[i] != t[i]: operations.append(f\\"2 {i+1} {t[i]}\\") return operations results = [] for i in range(k): n = test_cases[i][0] s = test_cases[i][1] t = test_cases[i][2] operations = get_operations(n, s, t) results.append((len(operations), operations)) return results"},{"question":"You are given a sequence of integers {a_1, a_2, ldots, a_n}. Find the length of the longest contiguous subarray where all the elements have the same value. -----Input----- The first line contains a single integer t (1leq tleq 10^3) — the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1leq nleq 10^5) — the length of the array. - The second line contains n integers a_1, a_2, ldots, a_n (1leq a_ileq 10^5) — the elements of the array. The sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, output a single integer representing the length of the longest contiguous subarray of identical values. -----Examples----- Input 3 5 1 2 2 3 3 6 4 4 4 4 4 4 10 1 1 2 2 2 3 3 3 3 4 Output 2 6 4 -----Note----- In the first test case, the longest contiguous subarrays of identical values are [2, 2] and [3, 3], each of length 2. In the second test case, the entire array consists of the same value 4, and thus the length of the longest contiguous subarray is 6. In the third test case, the longest contiguous subarray is [3, 3, 3, 3] with length 4.","solution":"def longest_contiguous_subarray(test_cases): results = [] for case in test_cases: n, array = case max_len = 1 current_len = 1 for i in range(1, n): if array[i] == array[i-1]: current_len += 1 if current_len > max_len: max_len = current_len else: current_len = 1 results.append(max_len) return results"},{"question":"In a small town, there is a curious librarian who loves arranging books in a very particular manner. The librarian has a structured system where books are placed on shelves in increasing order of their height. Each shelf can hold books up to a certain maximum height, and once a shelf reaches its height capacity, no more books can be added to it. The librarian wants to automate the process of placing books on the shelves, so your task is to write a program that helps in arranging the books appropriately. The library has `n` shelves, each with a specific maximum height capacity. You are given the maximum heights of the shelves in the form of an array `shelves`. Additionally, you have `m` books and you know the height of each book provided in an array `books`. The intent is to place each book on the first shelf from the left where it fits in height wise. If a book does not fit in any shelf, it is to be discarded. Input The first line contains an integer `n` (1 ≤ n ≤ 105) — the number of shelves. The second line contains `n` integers `shelves[i]` (1 ≤ shelves[i] ≤ 109), which are the maximum height capacities of the shelves. The third line contains an integer `m` (1 ≤ m ≤ 105) — the number of books. The fourth line contains `m` integers `books[i]` (1 ≤ books[i] ≤ 109), which are the heights of the books. Output For each book in the order they are given, print the index (1-based) of the shelf it is placed on, or -1 if the book cannot be placed on any shelf. Examples Input 4 5 10 15 20 5 4 9 21 2 11 Output 1 2 -1 1 3 Explanation - The first book (height 4) fits on the first shelf. - The second book (height 9) fits on the second shelf. - The third book (height 21) cannot fit on any shelf, so it is discarded. - The fourth book (height 2) fits on the first shelf. - The fifth book (height 11) fits on the third shelf.","solution":"def arrange_books(n, shelves, m, books): Places books on shelves according to their height constraints. Parameters: n (int): number of shelves. shelves (list of int): heights of shelves. m (int): number of books. books (list of int): heights of books. Returns: list of int: 1-based index of the shelf where the book is placed or -1 if it can\'t be placed. result = [] for book in books: placed = False for index in range(n): if book <= shelves[index]: result.append(index + 1) placed = True break if not placed: result.append(-1) return result"},{"question":"In a bustling marketplace, there are n vendors positioned along a one-dimensional line at various points. These vendors sell k different types of items. Each vendor carries a subset of these items. A buyer wishes to collect all k items by visiting as few vendors as possible. If there are multiple solutions with the same number of vendors, the buyer aims to minimize the total travel distance. The buyer can start at any position and needs to return to the starting position after collecting all items. Given the positions of the vendors and the items they sell, determine the minimal number of vendors the buyer needs to visit. If multiple such subsets of vendors exist, choose the one that minimizes the buyer\'s total travel distance. Input Format The first line contains two space-separated integers n and k representing the number of vendors and the number of item types, respectively. Each of the next n lines describes a vendor. Each vendor\'s information is provided as follows: 1. An integer p indicating the vendor\'s position on the line. 2. An integer c representing the number of different types of items the vendor sells. 3. c space-separated integers representing the item types sold by the vendor. Constraints 1 leq n, k leq 50 0 leq p leq 100 1 leq type of item leq k Output Format Print a single integer representing the minimum number of vendors the buyer needs to visit to collect all k items. If there are multiple solutions with the same number of vendors, print the minimal total travel distance. Sample Input 5 3 2 2 1 2 6 1 1 10 1 3 14 1 2 18 2 2 3 Sample Output 3 Explanation The buyer needs to collect items of types 1, 2, and 3. One possible way to achieve this by visiting a minimum number of vendors is: - Visit the vendor at position 2 (selling items 1 and 2) - Visit the vendor at position 10 (selling item 3) This requires visiting 2 vendors. However, the buyer can start at position 2, travel to position 14, and return to position 2 which covers all items and minimizes distance. Total travel distance is 12 (2 to 14 and back to 2). The solution above results in the same minimal number of vendors but ensures lowest possible travel distance, making the buyer visit vendors at positions 2, 10, and back to 2. Therefore, the output is 3 (vendors visited).","solution":"def min_vendors_to_collect_items(n, k, vendors): from itertools import combinations # Create a list of vendor data where each element is (position, set of items) vendor_data = [(v[0], set(v[2:])) for v in vendors] def covered_items(vendors_subset): Helper function to get a set of all unique items from the vendors subset. items = set() for vendor in vendors_subset: items.update(vendor[1]) return items # Check all combinations of vendors for num_vendors in range(1, n + 1): # start from 1 vendor to n vendors for subset in combinations(vendor_data, num_vendors): if len(covered_items(subset)) == k: # This subset covers all items. Calculate the travel distance. positions = sorted(v[0] for v in subset) travel_distance = (positions[-1] - positions[0]) return num_vendors return n # If no combination works (though the problem ensures the solution always exists) # This function can now be tested with appropriate test cases."},{"question":"John is a security expert who has discovered a security vulnerability in password patterns. He observes that many users often create passwords that are anagrams of one another, just with different casing per character. In order to analyze the vulnerability, John wants to check how many passwords have this problem. You are given a list of passwords and you need to determine how many pairs of passwords from the list are case-insensitive anagrams of each other. Two passwords are case-insensitive anagrams if you can rearrange the letters of one of them (ignoring case) to get the other one. -----Input----- The first line contains an integer ( n ) (( 2 leq n leq 10^5 )), the number of passwords. The next ( n ) lines contain one password each. Each password is a string of length between 1 and 50 (inclusive) consisting of lowercase and uppercase English letters. -----Output----- Print a single integer, the number of pairs of passwords that are case-insensitive anagrams of each other. -----Example----- Input 4 abc Bac adb BAD Output 2 -----Explanation----- In the example, \\"abc\\" and \\"Bac\\" are anagrams ignoring case, as well as \\"adb\\" and \\"BAD\\". Therefore, the number of pairs of passwords that are case-insensitive anagrams of each other is 2.","solution":"from collections import defaultdict def count_anagram_pairs(passwords): Returns the number of pairs of passwords that are case-insensitive anagrams of each other. counter = defaultdict(int) for password in passwords: sorted_password = \'\'.join(sorted(password.lower())) counter[sorted_password] += 1 pair_count = 0 for count in counter.values(): pair_count += count * (count - 1) // 2 return pair_count def calculate_anagram_pairs(n, passwords): return count_anagram_pairs(passwords)"},{"question":"Tina is an enthusiastic baker who loves experimenting with various recipes. She has recently embarked on a new baking challenge: creating the perfect layered cake. Each layer in her cake requires a specific temperature for an optimal baking experience. Tina\'s oven can only be set to a single temperature at a time, so she wants to know the minimum number of times she needs to adjust the oven\'s temperature to bake all her cake layers. She has a list of desired temperatures for each layer she wants to bake, in the order they appear in the cake. -----Input----- The first line of input contains one integer N, the number of layers in the cake. The second line contains N space-separated integers, the desired baking temperatures for each of the N layers, in the order they appear in the cake. -----Output----- Output a single integer — the minimum number of times Tina needs to adjust her oven\'s temperature to bake all layers in their given order. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ DesiredTemperature ≤ 1000 -----Example----- Input: 6 350 350 450 450 375 350 Output: 3 -----Explanation----- Tina needs to adjust the oven temperature: 1. Set oven to 350 degrees for the first layer. 2. Keep the same temperature for the second layer. 3. Adjust to 450 degrees for the third and fourth layers. 4. Adjust to 375 degrees for the fifth layer. 5. Adjust back to 350 degrees for the final layer. In total, Tina adjusts the oven temperature 3 times.","solution":"def minimum_temperature_adjustments(n, temperatures): Returns the minimum number of times Tina needs to adjust the oven\'s temperature to bake all layers in their given order. :param n: Number of layers (integer) :param temperatures: List of desired baking temperatures for each layer (list of integers) :return: Minimum number of adjustments (integer) if n <= 1: return 0 adjustments = 0 current_temp = temperatures[0] for temp in temperatures[1:]: if temp != current_temp: adjustments += 1 current_temp = temp return adjustments"},{"question":"Write a function that takes a string as input and returns a new string with each character duplicated. For instance, for the input \\"hello\\", the output should be \\"hheelllloo\\". Ensure that spaces and punctuation marks are also duplicated in the same manner. If the input string is empty, return an empty string. # Constraints - The input will be a single string containing alphabetic characters, spaces, and punctuation marks. - The length of the input string will not exceed 1000 characters. - The function should be case-sensitive, i.e., it should treat \'A\' and \'a\' as different characters.","solution":"def duplicate_characters(input_string): Returns a new string with each character in the input string duplicated. :param input_string: A string containing alphabetic characters, spaces, and punctuation marks. :return: A new string with each character duplicated. return \'\'.join([char * 2 for char in input_string])"},{"question":"Given an array of N integers, you need to find the closest smaller or equal element for each element of the array. Specifically, for each element in the array, you must find the closest element to its left which is smaller than or equal to it. If no such element exists for a position, fill with -1. Example 1: Input: N = 5 Arr[] = {1, 3, 0, 2, 5} Output: -1 1 -1 0 2 Explanation: The closest smaller or equal element for each element are: - For 1, no smaller element exists to its left, so output -1 - For 3, closest smaller element to its left is 1 - For 0, no smaller element exists to its left, so output -1 - For 2, closest smaller element to its left is 0 - For 5, closest smaller element to its left is 2 Example 2: Input: N = 4 Arr[] = {2, 4, 3, 5} Output: -1 2 2 3 Explanation: The closest smaller or equal element for each element are: - For 2, no smaller element exists to its left, so output -1 - For 4, closest smaller element to its left is 2 - For 3, closest smaller element to its left is 2 - For 5, closest smaller element to its left is 3 Your Task: You don\'t need to read input or print anything. Your task is to complete the function findClosestSmaller() which takes the array of integers arr and n as parameters and returns an array of integers representing the nearest smaller or equal elements for each position. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ Arr[i] ≤ 10^5","solution":"def findClosestSmaller(arr, N): Given an array, returns an array of the closest smaller or equal elements to the left of each element. result = [-1] * N stack = [] for i in range(N): while stack and stack[-1] > arr[i]: stack.pop() if stack: result[i] = stack[-1] stack.append(arr[i]) return result"},{"question":"You are given a list of integers which represents the amount of water stored in units at different heights. The task is to calculate the maximum amount of water that can be trapped within these heights after it rains. Each height is represented by a positive integer, and the width of each bar is 1 unit. Input The first line contains an integer n (1 ≤ n ≤ 10^6): the number of height units. The second line contains n integers h_i (0 ≤ h_i ≤ 10^6): the height of each unit. Output Print one integer: the total amount of water that can be trapped after it rains. Example Input 6 0 1 0 2 1 0 1 3 2 1 2 1 Output 6","solution":"def trap(height): Calculate the total amount of water that can be trapped after it rains. :param height: List[int] - List of integer heights of each unit :return: int - Total amount of trapped water if not height or len(height) < 3: return 0 n = len(height) left, right = 0, n - 1 left_max, right_max = height[left], height[right] trapped_water = 0 while left < right: if height[left] < height[right]: left += 1 left_max = max(left_max, height[left]) trapped_water += left_max - height[left] else: right -= 1 right_max = max(right_max, height[right]) trapped_water += right_max - height[right] return trapped_water"},{"question":"Given a string `s`, return a list of tuples. Each tuple should contain a letter from the string and its respective frequency in decreasing order of frequency. If two letters have the same frequency, they should appear in the order they are found in the string. Ignore non-alphabetic characters and treat uppercase and lowercase letters as the same (case insensitive). Example format of solution: [(\'e\', 2), (\'l\', 2), (\'o\', 1), (\'h\', 1)] Example: ``` Input: \\"Hello, World!\\" Output: [(\'l\', 3), (\'o\', 2), (\'h\', 1), (\'e\', 1), (\'w\', 1), (\'r\', 1), (\'d\', 1)] ```","solution":"from collections import Counter def letter_frequency(s): Given a string s, return a list of tuples each containing a letter from the string and its respective frequency in decreasing order of frequency. Ignore non-alphabetic characters and treat uppercase and lowercase letters as the same. # Convert the string to lowercase and filter out non-alphabetic characters filtered_s = \'\'.join(filter(str.isalpha, s.lower())) # Count frequency of each letter frequency = Counter(filtered_s) # Sort the letters first by frequency (in decreasing order) and then by their order in the string sorted_frequency = sorted(frequency.items(), key=lambda pair: (-pair[1], filtered_s.find(pair[0]))) return sorted_frequency"},{"question":"Alice and Bob are playing a game with an array of length N, containing distinct integers from 1 to N. The game consists of two stages: 1. In the first stage, Alice will select and remove exactly one element from the array. 2. In the second stage, Bob will select and remove exactly one element from the remaining array. After the two stages, the sequence of integers removed from the array (first by Alice and then by Bob) should be recorded. Given the integers X and Y, your task is to find how many ways Alice and Bob can remove the elements such that they form the sequence [X, Y] in the order of their removal. -----Constraints----- - 1 ≤ X, Y ≤ N ≤ 2{,}000 - X ≠ Y -----Input----- The input is given from Standard Input in the following format: N X Y -----Output----- Print the number of ways Alice and Bob can remove the elements to form the sequence [X, Y]. -----Sample Input----- 5 3 4 -----Sample Output----- 1 Explanation: There is only one way to form the sequence [3, 4]: - Alice removes 3 first, then Bob removes 4 from the remaining array.","solution":"def count_ways_to_remove(N, X, Y): Returns the number of ways Alice and Bob can remove the elements such that they form the sequence [X, Y] in the order of their removal. # Alice removes X and Bob removes Y: # There is only one way to do this if N is valid since the numbers have to be distinct and follow [X, Y]. return 1 if X != Y and 1 <= X <= N and 1 <= Y <= N else 0"},{"question":"You are given two directed graphs G1 and G2. Each graph contains N nodes and M weighted edges. Your task is to decide whether G1 and G2 are isomorphic, that is, there is a one-to-one correspondence between the nodes of G1 and the nodes of G2, such that two nodes are connected in G1 if and only if their counterparts are connected in G2, with the same edge weight. To solve this problem, you\'ll write a function `areIsomorphic(N, M, G1_edges, G2_edges)` that determines whether the two graphs are isomorphic. # Input - An integer `N` representing the number of nodes in each graph. - An integer `M` representing the number of edges in each graph. - A list `G1_edges` containing tuples of the form `(u, v, w)` where `u` and `v` are nodes in graph G1 and `w` is the weight of the edge (u, v). - A list `G2_edges` containing tuples of the form `(u, v, w)` where `u` and `v` are nodes in graph G2 and `w` is the weight of the edge (u, v). # Output - Return `True` if G1 and G2 are isomorphic, otherwise return `False`. # Example ```python N = 4 M = 5 G1_edges = [(0, 1, 10), (1, 2, 20), (2, 3, 30), (3, 0, 40), (0, 2, 50)] G2_edges = [(3, 2, 30), (2, 1, 20), (1, 0, 10), (0, 3, 40), (0, 2, 50)] Output: True ``` # Constraints 1. 1 ≤ N, M ≤ 10^3 2. 0 ≤ u, v < N 3. 1 ≤ w ≤ 10^6","solution":"from collections import defaultdict def areIsomorphic(N, M, G1_edges, G2_edges): def build_adj_list(N, edges): adjacency = defaultdict(list) for u, v, w in edges: adjacency[u].append((v, w)) adjacency[v].append((u, w)) return {node: sorted(neighbors) for node, neighbors in adjacency.items()} G1_adj = build_adj_list(N, G1_edges) G2_adj = build_adj_list(N, G2_edges) G1_sorted = sorted(G1_adj.items()) G2_sorted = sorted(G2_adj.items()) return G1_sorted == G2_sorted"},{"question":"An old and mystical library has a chief librarian who is known for his skill in an ancient way of sorting books. These books have information written on each page about knowledge long forgotten. The chief librarian wants to sort these books based on the total information they contain. The total information in a book is the sum of information on each of its pages. Now, you being an understudy of the chief librarian, are tasked to help with this sorting process. Given the number of pages in each book and the information on each page, find out the order of books from the one with the least total information to the one with the most. Input: - The first line contains an integer T, the number of test cases. - Each test case starts with an integer n, the number of books. - The next line contains n integers, where the i-th integer indicates the number of pages in the i-th book. - The following lines contain the information for each book\'s pages. For each book, there will be a line of integers with the amount of information on each page. Output: - For each test case, output a single line containing the indices of the books sorted by increasing order of total information. If two books have the same total information, maintain their original order. Constraints: 1. 1 ≤ T ≤ 10 2. 1 ≤ n ≤ 100 3. 1 ≤ pages_i ≤ 100 4. 1 ≤ information on each page ≤ 1000 SAMPLE INPUT 2 3 3 2 4 1 2 3 4 5 3 3 3 3 2 5 2 6 6 6 6 6 1 1 SAMPLE OUTPUT 1 2 0 1 0 Explanation: In the first test case: - Book 0 has pages [1, 2, 3] with total information 6. - Book 1 has pages [4, 5] with total information 9. - Book 2 has pages [3, 3, 3, 3] with total information 12. Sorting these based on increasing total information: 6, 9, 12, the result is 0, 1, 2. In the second test case: - Book 0 has pages [6, 6, 6, 6, 6] with total information 30. - Book 1 has pages [1, 1] with total information 2. Sorting these based on increasing total information: 2, 30, the result is 1, 0.","solution":"def sort_books(test_cases): results = [] for n, pages, information in test_cases: total_info = [] for i in range(n): total_info.append((i, sum(information[i]))) sorted_info = sorted(total_info, key=lambda x: x[1]) results.append([idx for idx, _ in sorted_info]) return results # Reading input and formatting it accordingly def parse_input(input_text): input_lines = input_text.split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(input_lines[index]) pages = list(map(int, input_lines[index+1].split())) information = [] for i in range(n): info = list(map(int, input_lines[index+2+i].split())) information.append(info) test_cases.append((n, pages, information)) index += 2 + n return test_cases def format_output(results): return \'n\'.join([\' \'.join(map(str, result)) for result in results]) # Main function to handle the complete sorting process def ancient_sorting_books(input_text): test_cases = parse_input(input_text) results = sort_books(test_cases) return format_output(results)"},{"question":"Write a function to generate the nth term of the Thue-Morse sequence. The Thue-Morse sequence is a binary sequence with the following properties: 1. Start with a single `0`. 2. In each subsequent step, append the binary complement of the entire sequence obtained so far. Thus, the first few iterations are: - Step 0: `0` - Step 1: `01` (complement of `0` is `1`) - Step 2: `0110` (complement of `01` is `10`) - Step 3: `01101001` (complement of `0110` is `1001`) - and so forth. Given an integer `n`, return the `n`th term (0-based indexing) of the Thue-Morse sequence. Function Signature ```python def thue_morse_nth_term(n: int) -> int: pass ``` Example ``` thue_morse_nth_term(0) -> 0 thue_morse_nth_term(1) -> 1 thue_morse_nth_term(2) -> 1 thue_morse_nth_term(3) -> 0 thue_morse_nth_term(4) -> 1 thue_morse_nth_term(5) -> 0 thue_morse_nth_term(6) -> 0 thue_morse_nth_term(7) -> 1 ```","solution":"def thue_morse_nth_term(n: int) -> int: Returns the nth term of the Thue-Morse sequence. The nth term is determined by the number of 1s in the binary representation of n. If the number of 1s is even, the nth term is 0, otherwise it is 1. # Count the number of 1s in the binary representation of n count_of_1s = bin(n).count(\'1\') # Return 0 if the count is even, otherwise return 1 return 0 if count_of_1s % 2 == 0 else 1"},{"question":"There is a large book fair in Geekland, and the organizers want to distribute books to the visitors in an organized manner. Each visitor has a unique priority level and can get any number of books, but they prefer books based on their priority. They use a system that ensures higher priority visitors are served first. Each book has a unique ID. Your task is to maintain the priority queue of visitors and process their requests in an efficient way. Specifically, you need to: 1. Add a visitor to the priority queue with their priority level. 2. Remove the visitor with the highest priority (if there are multiple visitors with the same priority, the one who entered the queue earlier should be served first). 3. Distribute a book to the visitor with the highest priority and note down the visitor ID and book ID. Input: The first line contains an integer Q (1 ≤ Q ≤ 10^5), the number of queries. Each of the following Q lines contains a query of one of the following types: 1. \\"1 priority visitorID\\" - Add a visitor with a given priority and unique visitor ID to the priority queue. 2. \\"2\\" - Remove the highest priority visitor from the queue. 3. \\"3 bookID\\" - Record the book distribution to the highest priority visitor and provide their ID along with the given book ID. Output: For each query of type 3, output the visitor ID and the book ID. SAMPLE INPUT 7 1 5 101 1 10 102 1 7 103 3 201 2 3 202 2 SAMPLE OUTPUT 102 201 103 202","solution":"import heapq class PriorityQueue: def __init__(self): self.heap = [] self.count = 0 self.visitor_map = {} def add_visitor(self, priority, visitor_id): heapq.heappush(self.heap, (-priority, self.count, visitor_id)) self.visitor_map[visitor_id] = priority self.count += 1 def remove_highest_priority_visitor(self): if self.heap: _, _, visitor_id = heapq.heappop(self.heap) del self.visitor_map[visitor_id] return visitor_id return None def get_highest_priority_visitor(self): if not self.heap: return None return self.heap[0][2] def process_queries(queries): pq = PriorityQueue() results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": _, priority, visitor_id = parts pq.add_visitor(int(priority), int(visitor_id)) elif parts[0] == \\"2\\": pq.remove_highest_priority_visitor() elif parts[0] == \\"3\\": _, book_id = parts visitor_id = pq.get_highest_priority_visitor() if visitor_id is not None: results.append(f\\"{visitor_id} {book_id}\\") return results"},{"question":"Three friends, Alex, Ben, and Chris, are playing a game with coins. Alex has a pile of `n` coins and wants to distribute them between Ben and Chris according to the following rules: 1. Alex must give at least 1 coin to both Ben and Chris. 2. The remaining coins, after giving both players at least 1 coin, can be distributed in any way between the two players. Alex wants to maximize the difference between the number of coins Ben receives and the number of coins Chris receives. Specifically, Alex seeks to find the best way to distribute the coins such that the absolute difference between the number of coins Ben receives and the number of coins Chris receives is maximized. Write a function `max_difference(n)` that takes an integer `n` (2 ≤ n ≤ 10^9), which is the number of coins Alex has, and returns an integer, the maximum possible absolute difference between the number of coins Ben and Chris receive when distributed according to the rules. # Example Input: max_difference(5) Output: 3 Explanation: One possible distribution is: - Ben gets 4 coins, Chris gets 1 coin: difference = 4 - 1 = 3 - Ben gets 3 coins, Chris gets 2 coins: difference = 3 - 2 = 1 - Ben gets 2 coins, Chris gets 3 coins: difference = 3 - 2 = 1 - Ben gets 1 coin, Chris gets 4 coins: difference = 1 - 4 = 3 The maximum possible absolute difference is 3. # Constraints - The function `max_difference(n)` should run efficiently for large values of `n` up to 10^9.","solution":"def max_difference(n): Returns the maximum possible absolute difference between the number of coins Ben and Chris receive when Alex distributes \'n\' coins according to the rules. Parameters: n (int): The number of coins Alex has (2 ≤ n ≤ 10^9). Returns: int: The maximum possible absolute difference. # If Alex has n coins, the most skewed distribution to maximize the difference: # Give one player 1 coin, and the other player (n-1) coins. # The difference would be |1 - (n - 1)| = |1 - n + 1| = |n - 2| max_diff = n - 2 return max_diff"},{"question":"Jack and Jill have M different types of toys and N containers to put them in. However, there are some rules that must be followed: 1. Each type of toy must go in a separate container. 2. Only one type of toy is allowed per container. Your task is to calculate the number of ways to distribute the M toy types into the N containers such that each container contains exactly one type of toy and each type of toy is used. Input The input consists of: - The first line contains an integer T, the number of test cases (1 ≤ T ≤ 1000). - For each test case, there is a single line containing two integers M and N (1 ≤ M, N ≤ 1000) representing the number of toy types and the number of containers respectively. Output For each test case, output a single integer representing the number of ways to distribute the toys into the containers modulo 1000000007. ----- Sample Input ----- 3 2 3 3 3 4 5 ----- Sample Output ----- 6 6 120 Explanation For the first case, the distribution ways are: - Container 1: Toy1, Toy2 - Container 2: Toy1, Toy2 - Container 3: Toy1, Toy2 For the second case, the distribution ways are: - Container 1: Toy1, Toy2, Toy3 - Container 2: Toy1, Toy2, Toy3 - Container 3: Toy1, Toy2, Toy3 For the third case, the distribution ways are: - Container 1: Toy1, Toy2, Toy3, Toy4 - Container 2: Toy1, Toy2, Toy3, Toy4 - Container 3: Toy1, Toy2, Toy3, Toy4 - Container 4: Toy1, Toy2, Toy3, Toy4 - Container 5: Toy1, Toy2, Toy3, Toy4 Note: Since we need to ensure all toys are used, this problem relates to permutations of toys considering M ≤ N. When M > N, it\'s not possible to place all toys uniquely, so the answer would be 0 in such cases.","solution":"MOD = 1000000007 def distribute_toys(T, test_cases): results = [] for M, N in test_cases: if M > N: results.append(0) else: # Calculating M! % MOD factorial = 1 for i in range(1, M + 1): factorial = (factorial * i) % MOD results.append(factorial) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [tuple(map(int, line.split())) for line in lines[1:T + 1]] return T, test_cases"},{"question":"Given a list of integers, determine whether the list is strictly increasing, strictly decreasing, or neither. A strictly increasing list is one in which every element is greater than the previous one, and a strictly decreasing list is one in which every element is less than the previous one. Return \\"increasing\\" if the list is strictly increasing, \\"decreasing\\" if it is strictly decreasing, and \\"neither\\" if neither condition holds. Examples: Input: [1, 2, 3, 4, 5] Output: \\"increasing\\" Input: [5, 4, 3, 2, 1] Output: \\"decreasing\\" Input: [1, 2, 2, 3] Output: \\"neither\\" Note: 1. The list will contain at least 1 and at most 10,000 integers. 2. The integers in the list will be in the range from -10^6 to 10^6.","solution":"def determine_list_trend(lst): Determine whether the list is strictly increasing, strictly decreasing, or neither. Parameters: lst (list): List of integers. Returns: str: \\"increasing\\" if the list is strictly increasing, \\"decreasing\\" if it is strictly decreasing, \\"neither\\" otherwise. if len(lst) < 2: return \\"neither\\" is_increasing = all(lst[i] < lst[i + 1] for i in range(len(lst) - 1)) is_decreasing = all(lst[i] > lst[i + 1] for i in range(len(lst) - 1)) if is_increasing: return \\"increasing\\" elif is_decreasing: return \\"decreasing\\" else: return \\"neither\\""},{"question":"In a mysterious research lab, there is an array of N integers. The scientist in charge wants to find a range in the array that contains no duplicates and has the longest possible length. If there are multiple such ranges of the same length, the scientist wants to find the range that starts as early as possible in the array. Write a program to help the scientist find the starting and ending indices (1-based) of such a range. ------ Input Format ------ - The first line contains a single integer T, denoting the number of test cases. - For each test case, the first line of input contains an integer N, the length of the array. - The second line contains N integers separated by spaces, representing the elements of the array. ------ Output Format ------ For each test case, output on a new line two integers, the starting and ending indices (1-based) of the range with the longest length and no duplicates. If there are multiple such ranges, choose the one that starts earlier in the array. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 2 cdot 10^{5} 1 ≤ A[i] ≤ 10^{9} ----- Sample Input 1 ------ 3 5 1 2 3 2 1 6 1 2 1 3 4 3 4 1 1 1 1 ----- Sample Output 1 ------ 1 3 2 5 1 1 ----- Explanation 1 ------ Test case 1: The longest subarray without duplicates is [1, 2, 3] which runs from indices 1 to 3. Test case 2: The longest subarray without duplicates is [2, 1, 3, 4] which runs from indices 2 to 5. Test case 3: The longest subarray without duplicates is [1] which runs from indices 1 to 1.","solution":"def find_longest_unique_range(n, arr): This function returns the 1-based starting and ending indices of the longest range with unique elements in the given array. :param n: int, the length of the array :param arr: list of int, the array of integers :return: tuple of two ints, the starting and ending indices (1-based) last_seen = {} max_len = 0 start = 0 left = 0 for right in range(n): if arr[right] in last_seen and last_seen[arr[right]] >= left: left = last_seen[arr[right]] + 1 last_seen[arr[right]] = right if right - left + 1 > max_len: max_len = right - left + 1 start = left return (start + 1, start + max_len) def solve(test_cases): results = [] for n, arr in test_cases: start_index, end_index = find_longest_unique_range(n, arr) results.append(f\\"{start_index} {end_index}\\") return results"},{"question":"Alice and Bob are fond of playing with strings and doing interesting experiments with them. Recently, they stumbled upon a unique challenge and decided to solve it together. They\'ve approached you, a renowned coder, for help. The challenge is as follows: Given a string consisting of only lowercase English letters, determine the length of the longest substring that does not contain any repeating characters. A substring is defined as a contiguous sequence of characters within a string. For example, in the string \\"abcde\\", \\"abc\\" and \\"cde\\" are two possible substrings. Your task is to write a program that solves this problem optimally. # Input - A single line containing a string `s` (1 ≤ |s| ≤ 10^5) consisting of only lowercase English letters. # Output - Output a single integer which is the length of the longest substring without repeating characters. # Examples Example 1 **Input:** ``` abcabcbb ``` **Output:** ``` 3 ``` **Explanation:** The answer is \\"abc\\", with the length of 3. Example 2 **Input:** ``` bbbbb ``` **Output:** ``` 1 ``` **Explanation:** The answer is \\"b\\", with the length of 1. Example 3 **Input:** ``` pwwkew ``` **Output:** ``` 3 ``` **Explanation:** The answer is \\"wke\\", with the length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. # Note The solution should be efficient, aiming for a time complexity better than O(n^2), preferably O(n), using techniques such as sliding window and hash maps or sets.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) char_index_map = {} longest = 0 start = 0 for end in range(n): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end longest = max(longest, end - start + 1) return longest"},{"question":"You are given a sequence of integers a1, a2, ..., aN. Determine if there exists a subarray whose sum is exactly equal to a given integer S. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and S. The second line of each test case contains N space-separated integers - a1, a2, ..., aN respectively. -----Output----- For each test case, output \\"YES\\" if there exists a subarray whose sum is exactly S, otherwise output \\"NO\\". -----Constraints----- - T = 1000 - 1 ≤ N ≤ 105 - 1 ≤ ai ≤ 104 - 0 ≤ S ≤ 109 -----Example----- Input: 2 5 12 1 2 3 7 5 10 15 1 2 3 4 5 6 7 8 9 10 Output: YES YES -----Explanation----- For the first test case, the subarray [2, 3, 7] has a sum of 12. For the second test case, the subarray [1, 2, 3, 4, 5] has a sum of 15.","solution":"def subarray_with_given_sum(a, S): Returns \'YES\' if there exists a subarray whose sum is exactly S, otherwise returns \'NO\'. N = len(a) current_sum = 0 sum_dict = {} for i in range(N): current_sum += a[i] if current_sum == S: return \\"YES\\" if (current_sum - S) in sum_dict: return \\"YES\\" sum_dict[current_sum] = i return \\"NO\\" def process_test_cases(test_cases): results = [] for N, S, a in test_cases: results.append(subarray_with_given_sum(a, S)) return results"},{"question":"You are given an integer array `arr` of size `n`. Write a function to rearrange the array elements in such a way that all negative numbers appear before all positive numbers. The relative order of positive numbers and negative numbers should remain the same. Example 1: Input: arr = [-12, 11, -13, -5, 6, -7, 5, -3, -6] Output: [-12, -13, -5, -7, -3, -6, 11, 6, 5] Example 2: Input: arr = [3, -1, 2, -3, 4] Output: [-1, -3, 3, 2, 4] Your Task: You don\'t need to input or print anything. Complete the function `rearrangeArray()` which takes an array `arr` and an integer `n` as the input parameters and returns a list where all negative numbers appear before the positive numbers while maintaining their relative order. Constraints: 1 <= n <= 1000 -10^5 <= arr[i] <= 10^5","solution":"def rearrangeArray(arr, n): This function rearranges the elements of the array such that all negative numbers appear before all positive numbers, maintaining their relative order. negative_numbers = [x for x in arr if x < 0] positive_numbers = [x for x in arr if x >= 0] return negative_numbers + positive_numbers"},{"question":"In the realm of DataLand, there is a famous data scientist named Dr. Byte. He loves to experiment with strings. One day, he discovered an interesting problem involving palindromes. A palindrome is a string that reads the same backward as forward. Dr. Byte wants to find the longest palindromic substring within a given string. Can you help him? INPUT The first line of the input contains a single string, S, which consists of lowercase and uppercase English letters. OUTPUT Print the longest palindromic substring of the given string. If there are multiple substrings of the same maximum length, print the first one that appears in the string. CONSTRAINTS 1 ≤ |S| ≤ 2000 SAMPLE INPUT babad SAMPLE OUTPUT bab (Note: \\"aba\\" is also a valid answer, but \\"bab\\" appears first in the string.) SAMPLE INPUT cbbd SAMPLE OUTPUT bb","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring of the given string s. If there are multiple substrings of the same maximum length, it returns the first one that appears in the string. Parameters: s (str): The input string consisting of lowercase and uppercase English letters. Returns: str: The longest palindromic substring. n = len(s) if n == 0: return \\"\\" # Initialize DP table dp = [[False] * n for _ in range(n)] start = 0 max_length = 1 # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = True # Check for substring of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True start = i max_length = length return s[start:start + max_length]"},{"question":"Given an array of size N consisting of positive integers only. The array is sorted in increasing order. Your task is to find the index of the first occurrence of a given number X. If the number is not present in the array, return -1. Example 1: Input: N = 10 Arr[] = {2, 4, 4, 4, 7, 9, 10, 14, 16, 18} X = 4 Output: 1 Explanation: The first occurrence of 4 is at index 1. Example 2: Input: N = 7 Arr[] = {1, 3, 5, 7, 9, 11, 13} X = 8 Output: -1 Explanation: 8 is not present in the array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findFirstOccurrence() which takes the array of integers arr[], its size n, and the integer X as input parameters and returns the index of the first occurrence of X in the array. If X is not present, return -1. Expected Time Complexity: O(logN) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{5} 1 <= Arr[i], X <= 10^9","solution":"def findFirstOccurrence(arr, n, x): Finds the first occurrence of number x in a sorted array arr of size n. Parameters: arr (List[int]): A sorted list of integers. n (int): The size of the sorted list. x (int): The target integer to find in the list. Returns: int: The index of the first occurrence of x in arr, or -1 if x is not present. low, high = 0, n - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == x: # Check if it\'s the first occurrence if mid == 0 or arr[mid - 1] != x: return mid high = mid - 1 elif arr[mid] > x: high = mid - 1 else: low = mid + 1 return -1"},{"question":"You are given a string, and you need to determine if the string can be broken down into a sequence of space-separated words as per a given dictionary. The dictionary contains a list of words. Your task is to find out if the entire string can be segmented into valid words from the dictionary. -----Input----- The first line contains an integer n (1 ≤ n ≤ 300000) denoting the length of the string. The second line contains a string s of length n consisting of lowercase English letters. The third line contains an integer m (1 ≤ m ≤ 10000) denoting the number of words in the dictionary. The next m lines each contain a dictionary word consisting of lowercase English letters. -----Output----- Print \\"YES\\" if the string can be segmented into a space-separated sequence of one or more dictionary words, otherwise print \\"NO\\". -----Examples----- Input 12 leetcodeable 2 leet code Output NO Input 12 leetcodecode 2 leet code Output YES Input 7 applepie 3 apple pie pear Output YES -----Note----- Sample 1. The string \\"leetcodeable\\" cannot be segmented into a sequence of dictionary words using \\"leet\\" and \\"code\\". Sample 2. The string \\"leetcodecode\\" can be segmented into the words \\"leet\\", \\"code\\", and \\"code\\" from the dictionary. Sample 3. The string \\"applepie\\" can be segmented into the words \\"apple\\" and \\"pie\\" from the dictionary.","solution":"def word_break(s, dictionary): Returns \\"YES\\" if the string can be broken down into a sequence of space-separated words from the dictionary, otherwise returns \\"NO\\". dict_set = set(dictionary) n = len(s) dp = [False] * (n + 1) dp[0] = True for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in dict_set: dp[i] = True break return \\"YES\\" if dp[n] else \\"NO\\""},{"question":"A group of friends plans to go on a trip together and they all want to split the cost of the trip equally. However, they are unsure about the best way to handle any remaining amount after dividing the total cost equally amongst the participants. Given the number of friends and the total cost of the trip, you need to calculate how much each friend needs to pay and determine the remainder which cannot be evenly split among them. Input The first line contains two integers n and c (1 ≤ n ≤ 1000, 1 ≤ c ≤ 10^6) — the number of friends and the total cost of the trip in dollars. Output Print two integers: the amount each friend needs to pay, and the remaining amount that cannot be split equally. Examples Input 4 100 Output 25 0 Input 3 100 Output 33 1 Input 5 17 Output 3 2","solution":"def split_cost(n, c): Splits the cost of the trip equally among friends and calculates the remainder. Args: n (int): Number of friends. c (int): Total cost of the trip in dollars. Returns: (int, int): Amount each friend needs to pay and the remaining amount. amount_per_friend = c // n remainder = c % n return amount_per_friend, remainder"},{"question":"You are tasked with developing a system that allows an air traffic controller to efficiently manage and prioritize landing requests from multiple incoming flights. Each flight has a priority based on its fuel level and flight duration. Write a function that, when given a list of flights, returns an ordered list of landing priorities. # Input Your function will receive an array whose elements are subarrays in the form `[f, d]` where `f` represents the fuel level and `d` represents the flight duration of each flight in minutes. # Output An array of integers representing the indices of the flights in the order they should land, with the highest priority flight first. If two flights have the same priority (fuel or duration), then the flight with the nearest index should be prioritized. # Priority Details - Flights with the lowest fuel level (`f`) have the highest priority. - If two flights have equal fuel levels, the flight with the longer flight duration (`d`) has higher priority. - All input arrays are guaranteed to have non-negative integers. # Test Example For a given array of flights `[[5, 120], [4, 100], [3, 180], [5, 130], [2, 90]]:` - Flight `2` has the highest priority due to the lowest fuel level (`2`). - Flight `3` and flight `1` have the next highest priority because they have fuel level `3` and `4` respectively. Between them, flight `3` has higher duration of `180` compared to `100`, so it takes priority. - Flight `4` and flight `0` can land next. Since they have the same fuel level `5`, the one with longer duration `130` (flight `4`), followed by `120` (flight `0`). So the output should be `[2, 1, 4, 0, 3]`. ```python def landing_priorities(flights): # Your code here # Example Test flights = [[5, 120], [4, 100], [3, 180], [5, 130], [2, 90]] print(landing_priorities(flights)) # Output: [4, 2, 1, 3, 0] ```","solution":"def landing_priorities(flights): Returns the ordered list of landing priorities based on fuel level and flight duration. If the fuel levels are equal, the flight with the longer duration has higher priority. # Sort by fuel level (ascending) then by flight duration (descending) and then by original index sorted_flights = sorted(enumerate(flights), key=lambda x: (x[1][0], -x[1][1], x[0])) # Extract the original indices in the sorted order priorities = [index for index, flight in sorted_flights] return priorities # Example Test flights = [[5, 120], [4, 100], [3, 180], [5, 130], [2, 90]] print(landing_priorities(flights)) # Output: [4, 2, 1, 3, 0]"},{"question":"Max enjoys arranging books on a shelf. He recently invented a game where he has a set of books, each with a distinct height, and he must arrange them on a shelf such that no two books of the same color are adjacent to each other. The books are labeled with heights and colors and Max wants to know if he can always place these books on the shelf following the game rules. You are given a list of books, each represented by a pair (height, color). Determine if it is possible to arrange these books such that no two adjacent books have the same color. If possible, output \\"YES\\" and if not, output \\"NO\\". -----Input----- The first line contains an integer n (2 ≤ n ≤ 1000), the number of books. Each of the following n lines contains two integers and a string: height (1 ≤ height ≤ 10000), color (a string with length ≤ 10). -----Output----- Output \\"YES\\" if it is possible to arrange the books such that no two adjacent books have the same color. Output \\"NO\\" otherwise. -----Examples----- Input 4 1 red 2 blue 3 red 4 green Output YES Input 3 1 red 2 red 3 red Output NO -----Note----- For the first sample, one possible arrangement is: 1 red, 2 blue, 3 red, 4 green For the second sample, there is no way to arrange the books such that no two adjacent books have the same color since all books are of the same color.","solution":"from collections import Counter def can_arrange_books(n, books): Determine if it is possible to arrange books such that no two adjacent books have the same color. Parameters: n (int): Number of books. books (List[Tuple[int, str]]): List of books where each book is represented by its height and color. Returns: str: \\"YES\\" if arrangement is possible, \\"NO\\" otherwise. color_count = Counter(color for _, color in books) # Find the most frequent color count max_color_count = max(color_count.values()) # If the most frequent color count is more than half of the books rounded up, # it is impossible to arrange them without having two adjacent books of the same color. if max_color_count > (n + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"You are given a string and you need to find the smallest window (substring) in the string that contains all the distinct characters of the given string at least once. ------ Input ------ First line contains an integer T, the number of test cases to follow. Each of the next T lines contains a string S. ------ Output ------ For each test case, output the smallest window length that contains all the distinct characters of the string S. ------ Constraints ------ 1 leq T leq 10 1 leq |S| leq 10^5 Sum of the lengths of strings over all test cases does not exceed 10^6. ------ Note: ------ All characters in the string are lowercase English letters. ----- Sample Input 1 ------ 2 aabcbcdbca aaab ----- Sample Output 1 ------ 4 2 ----- Explanation 1 ------ Test Case 1: In the string \\"aabcbcdbca\\", the smallest window containing all distinct characters is \\"dbca\\" which is of length 4. Test Case 2: In the string \\"aaab\\", the smallest window containing all distinct characters is \\"ab\\" which is of length 2.","solution":"def smallest_window_length(s: str) -> int: from collections import defaultdict n = len(s) if n == 0: return 0 unique_chars = set(s) num_chars = len(unique_chars) min_length = float(\'inf\') left = 0 char_count = defaultdict(int) distinct_count = 0 for right in range(n): char_count[s[right]] += 1 if char_count[s[right]] == 1: distinct_count += 1 while left <= right and distinct_count == num_chars: current_window_length = right - left + 1 if current_window_length < min_length: min_length = current_window_length char_count[s[left]] -= 1 if char_count[s[left]] == 0: distinct_count -= 1 left += 1 return min_length def process_test_cases(t: int, strings: list) -> list: results = [] for s in strings: results.append(smallest_window_length(s)) return results"},{"question":"Henry is planning a road trip across the country with his friends. They have a list of cities they want to visit and roads connecting them. However, the roads are not bidirectional, meaning Henry can only travel from city A to city B if there\'s a directed road from A to B. Henry wants to know if it\'s possible to visit all the cities in one trip starting from a specified city without revisiting any city. Input The first line contains the number of cities `n` (2 ≤ n ≤ 1000) and the number of roads `m` (1 ≤ m ≤ 2000). The next `m` lines each contain two space-separated integers `u` and `v` (1 ≤ u, v ≤ n) representing a directed road from city `u` to city `v`. The last line contains a single integer `s` (1 ≤ s ≤ n) indicating the starting city. Output Output `YES` if Henry can visit all the cities starting from city `s` without revisiting any city, otherwise output `NO`. Examples Input 5 5 1 2 2 3 1 3 3 4 4 5 1 Output YES Input 4 3 1 2 3 4 4 2 1 Output NO Input 6 6 1 2 2 3 3 1 4 5 5 6 6 4 4 Output NO Input 7 8 1 2 2 3 3 4 4 5 5 6 6 7 7 3 1 6 1 Output YES","solution":"def can_visit_all_cities(n, m, roads, s): Determines if it\'s possible to visit all cities starting from city s without revisiting any city. from collections import defaultdict, deque graph = defaultdict(list) for u, v in roads: graph[u].append(v) visited = set() queue = deque([s]) while queue: city = queue.popleft() if city in visited: continue visited.add(city) for neighbor in graph[city]: if neighbor not in visited: queue.append(neighbor) return \\"YES\\" if len(visited) == n else \\"NO\\" # Example usage: n = 5 m = 5 roads = [(1, 2), (2, 3), (1, 3), (3, 4), (4, 5)] s = 1 print(can_visit_all_cities(n, m, roads, s)) # Output: YES"},{"question":"In a magical land of integers, there exists an array A of n positive integers. The Queen of this land loves sequences that increase and then decrease. Specifically, she loves bitonic sequences. A subsequence of array A is called bitonic if it is first strictly increasing and then strictly decreasing. The Queen has tasked you with finding the length of the longest bitonic subsequence from the array A. Input The first line contains a single integer n (1 ≤ n ≤ 2·105) — the size of the array A. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array A. Output Print a single integer — the length of the longest bitonic subsequence of the array A. Example Input 8 1 11 2 10 4 5 2 1 Output 6 Explanation The longest bitonic subsequence is [1, 2, 10, 4, 2, 1] which has a length of 6.","solution":"def longest_bitonic_subsequence(n, arr): Returns the length of the longest bitonic subsequence. if n == 0: return 0 # Initialize the increasing and decreasing sequences inc = [1] * n # Length of increasing subsequence ending at each element dec = [1] * n # Length of decreasing subsequence starting at each element # Compute lengths of increasing subsequences for each element for i in range(1, n): for j in range(i): if arr[i] > arr[j]: inc[i] = max(inc[i], inc[j] + 1) # Compute lengths of decreasing subsequences for each element for i in range(n - 2, -1, -1): for j in range(n - 1, i, -1): if arr[i] > arr[j]: dec[i] = max(dec[i], dec[j] + 1) # Calculate the maximum value of (inc[i] + dec[i] - 1) max_len = 1 for i in range(n): max_len = max(max_len, inc[i] + dec[i] - 1) return max_len"},{"question":"In a galaxy far, far away, there\'s a unique trading system involving space credits. Each trade is represented as a series of operations that either add or subtract a certain amount of credits. Given a sequence of these operations, your task is to calculate the total amount of space credits left after performing all trades. For example, consider the following trades sequence: +5, -3, +12, -7. The total space credits after these trades would be 5 + (-3) + 12 + (-7) = 7. Additionally, you have the power to reverse the sequence of trades one time to potentially maximize the total credits remaining. Can you determine the maximum amount of credits by either keeping the original sequence or reversing it? ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N - the number of trades. - The second line of each test case contains N space-separated integers, representing the sequence of trades. ------ Output Format ------ For each test case, output the maximum number of space credits that can be achieved by performing the sequence in either its original or reversed order. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 -1000 ≤ Each trade value ≤ 1000 ----- Sample Input 1 ------ 2 4 5 -3 12 -7 3 1 2 3 ----- Sample Output 1 ------ 7 6 ----- Explanation 1 ------ Test Case 1: The original sequence results in 7 credits. Reversing the sequence results in the same total, so the maximum is 7. Test Case 2: The original sequence results in 6 credits. Reversing the sequence also results in 6 credits, so the maximum is 6.","solution":"def max_credits(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] trades = test_cases[i][1] total_original = sum(trades) total_reversed = sum(trades[::-1]) results.append(max(total_original, total_reversed)) return results"},{"question":"Tom has recently started playing a new game with his friends. The game involves finding the longest sequence of consecutive identical characters in a given string. Tom is trying to write a program to determine the maximum length of such a sequence in any given string as a fun challenge. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100), the length of the string. The second line contains a string s of length n consisting of lowercase English letters. Output Print a single integer which is the maximum length of a sequence of consecutive identical characters in the string. Examples Input 6 aaabbc Output 3 Input 10 bbbccccddd Output 4 Input 5 abcde Output 1","solution":"def longest_consecutive_char_sequence(n, s): Returns the length of the longest sequence of consecutive identical characters in the given string. :param n: Length of the string s. :param s: Input string consisting of lowercase English letters. :return: Length of the longest sequence of consecutive identical characters. if n == 0: return 0 max_len = 1 current_len = 1 for i in range(1, n): if s[i] == s[i-1]: current_len += 1 if current_len > max_len: max_len = current_len else: current_len = 1 return max_len"},{"question":"Given an integer array `nums` of length `n`, you need to find if it\'s possible to form an arithmetic progression with at least 3 elements by removing some (or none) of the elements from the array. An arithmetic progression is a sequence of numbers such that the difference of any two successive members of the sequence is a constant. Example 1: Input: nums = [3, 5, 1, 7, 9] Output: True Explanation: One possible arithmetic progression is [3, 5, 7, 9] with a common difference of 2. Example 2: Input: nums = [1, 2, 4, 6] Output: True Explanation: One possible arithmetic progression is [2, 4, 6] with a common difference of 2. Example 3: Input: nums = [1, 3, 7, 9] Output: False Explanation: There is no way to reorder the elements to form an arithmetic progression. Example 4: Input: nums = [1, 3] Output: False Explanation: There are less than 3 elements in the array, so it is not possible to form an arithmetic progression. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `canFormArithmeticProgression` which takes an integer array `nums` as input and returns a boolean value indicating if an arithmetic progression can be formed from the array. Expected Time Complexity: O(n^2) Expected Space Complexity: O(n) Constraints: 1 <= nums.length <= 100 -10^4 <= nums[i] <= 10^4","solution":"def canFormArithmeticProgression(nums): Determines if it is possible to form an arithmetic progression with at least 3 elements by removing some (or none) of the elements from the array. :param nums: List[int], the list of integers. :return: bool, True if an arithmetic progression can be formed, False otherwise. if len(nums) < 3: return False n = len(nums) nums.sort() for i in range(n): for j in range(i+1, n): d = nums[j] - nums[i] count = 2 last = nums[j] for k in range(j+1, n): if nums[k] - last == d: last = nums[k] count += 1 if count >= 3: return True return False"},{"question":"You are given a positive integer n and an array a of n positive integers. Your task is to determine the smallest continuous subarray of a that can be removed so that the remaining array is sorted in non-decreasing order. Input The first line contains a single integer n (1 ≤ n ≤ 2·10^5) — the number of elements in the array a. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Print two space-separated integers l and r (1 ≤ l ≤ r ≤ n) representing the 1-based indices of the subarray in a such that by removing this subarray, the remaining array is sorted in non-decreasing order. If there are multiple smallest subarrays that can be removed, output the one with the smallest left index. If the array is already sorted, print \\"1 1\\" as the output. Examples Input 6 1 2 5 3 4 6 Output 3 4 Input 5 1 3 5 7 9 Output 1 1 Note In the first example, removing the subarray from index 3 to index 4 (inclusive) transforms the array into [1, 2, 4, 5, 6], which is sorted in non-decreasing order. In the second example, the array is already sorted, so we can remove any single element. Thus, we output \\"1 1\\".","solution":"def find_smallest_subarray_to_remove(n, a): Determines the smallest continuous subarray that can be removed so that the remaining array is sorted in non-decreasing order. Parameters: n (int) - the number of elements in the array a (list of int) - the given array of integers Returns: tuple of (int, int) - 1-based indices of the subarray to be removed l, r = 0, 0 # Check if already sorted if sorted(a) == a: return 1, 1 # Find the first segment that\'s out of order from the left for i in range(1, n): if a[i] < a[i - 1]: l = i - 1 break # Find the first segment that\'s out of order from the right for i in range(n - 1, 0, -1): if a[i] < a[i - 1]: r = i break # Check ranges from the two segments while l > 0 and a[l - 1] == a[l]: l -= 1 while r < n - 1 and a[r + 1] == a[r]: r += 1 # Check if removing this segment makes the array sorted if sorted(a[:l] + a[r+1:]) == a[:l] + a[r+1:]: return l + 1, r + 1 return 1, 1"},{"question":"A city is represented as a grid. The city has m rows and n columns, and each cell can either be empty (represented by the integer 0) or have a building (represented by the integer 1). A firefighter needs to strategically place himself such that he can reach any building in the city as quickly as possible. The firefighter can only move vertically and horizontally on the grid. Your task is to find the minimum distance the firefighter has to travel from his starting position to the farthest building in the city, considering the optimal starting position. The distance between two cells (r1, c1) and (r2, c2) is defined as |r1 - r2| + |c1 - c2|. Input The first line of input contains two integers m (1 ≤ m ≤ 1000) and n (1 ≤ n ≤ 1000), representing the number of rows and columns in the grid. Each of the next m lines contains n integers where each integer is either 0 or 1 representing the grid cell. It\'s guaranteed that there is at least one cell containing a building. Output Output a single integer, the minimum distance the firefighter has to travel to the furthest building from the optimal starting position. Examples Input 3 3 1 0 1 0 0 0 1 0 1 Output 2 Input 4 4 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 1 Output 2","solution":"from collections import deque def optimal_firefighter_position(m, n, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque() distance = [[-1] * n for _ in range(m)] # Enqueue all buildings into the queue and set their distance to 0 for i in range(m): for j in range(n): if grid[i][j] == 1: queue.append((i, j)) distance[i][j] = 0 # BFS from all buildings while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and distance[nx][ny] == -1: distance[nx][ny] = distance[x][y] + 1 queue.append((nx, ny)) max_distance = 0 for i in range(m): for j in range(n): if grid[i][j] == 0: max_distance = max(max_distance, distance[i][j]) return max_distance"},{"question":"You are given a dictionary where the keys are integers and the values are lists of integers representing connections between the keys. For example, {1: [2, 3], 2: [1, 4], 3: [1], 4: [2]} represents the following graph: 1 / 2 3 | 4 Write a function named `shortest_path_length` that takes two parameters: the dictionary `graph` and two integers `start` and `end`. The function should return the length of the shortest path between `start` and `end` in the given undirected graph. If there is no path between `start` and `end`, return -1. Example 1: Input: graph = {1: [2, 3], 2: [1, 4], 3: [1], 4: [2]} start = 1 end = 4 Output: 2 Explanation: The shortest path from 1 to 4 is 1 -> 2 -> 4 which has length 2. Example 2: Input: graph = {1: [2], 2: [1], 3: [4], 4: [3]} start = 1 end = 3 Output: -1 Explanation: There is no path from node 1 to node 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `shortest_path_length` which takes the dictionary `graph`, an integer `start`, and an integer `end` as input parameters and returns the length of the shortest path between `start` and `end`. If there is no path, return -1. Expected Time Complexity: O(V + E), where V is the number of vertices and E is the number of edges. Expected Auxiliary Space: O(V) Constraints: 1 <= len(graph) <= 10^4 1 <= sum(len(v) for v in graph.values()) <= 2 * 10^4 1 <= start, end <= max(graph.keys())","solution":"from collections import deque def shortest_path_length(graph, start, end): Returns the length of the shortest path between start and end in the given undirected graph. If there is no path, return -1. if start == end: return 0 # Initialize a queue for BFS queue = deque([(start, 0)]) # (current_node, current_distance) visited = set([start]) while queue: current_node, current_distance = queue.popleft() for neighbor in graph.get(current_node, []): if neighbor == end: return current_distance + 1 if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, current_distance + 1)) # If we exhaust the queue without finding the end return -1"},{"question":"You are organizing a special event, and you need to prepare a seating arrangement for the guests. You have a list of guests, each with a unique name, and each guest wants to sit as far away as possible from any other guest to avoid any possible conflicts. The seating is a straight line of seats. Your task is to determine a seating arrangement where the minimum distance between any two seated guests is maximized. Write a function that, given the number of seats and the list of guest names, returns the maximum possible minimum distance between any two guests. -----Input----- The input consists of: - An integer n (2 ≤ n ≤ 10^6), which is the number of seats. - A list of unique strings representing the guest names; the length of this list is at most n. The input will be provided in the form of parameters to the function. -----Output----- The function should return an integer representing the maximum possible minimum distance between any two guests. -----Examples----- Example 1: Input 5, [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] Output 2 Example 2: Input 8, [\\"David\\", \\"Eva\\", \\"Frank\\", \\"Grace\\"] Output 2 In the first example, you can place Alice at seat 1, Bob at seat 3, and Charlie at seat 5, ensuring a minimum distance of 2 between any two guests. In the second example, you can place David at seat 1, Eva at seat 3, Frank at seat 5, and Grace at seat 7, ensuring a minimum distance of 2 between any two guests.","solution":"def maximum_minimum_distance(n, guests): Determines the maximum minimum distance between any two guests when seated in a straight line. :param n: Integer, number of seats :param guests: List of strings, guest names :return: Integer, maximum possible minimum distance between any two guests def can_seat_with_distance(distance): Helper function to check if guests can be seated with at least \'distance\' spaces apart. last_position = -distance count = 0 for i in range(n): if i - last_position >= distance: count += 1 last_position = i if count == len(guests): return True return False # Binary search for the maximum minimum distance. left, right = 1, n - 1 max_distance = 0 while left <= right: mid = (left + right) // 2 if can_seat_with_distance(mid): max_distance = mid left = mid + 1 else: right = mid - 1 return max_distance"},{"question":"John has a collection of different types of coins. Each coin has a certain value, and John wants to collect a specific amount of money using the fewest number of coins possible. Your task is to help John determine the minimum number of coins needed to reach the exact amount. Given a list of integers representing the values of different coins and an integer representing the target amount of money, find the minimum number of coins needed to make that amount. If it is not possible to make the exact amount with the given coins, return -1. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) representing the number of different coin values. The second line contains n integers representing the values of the coins (1 ≤ coin value ≤ 10^4). The third line contains an integer m (1 ≤ m ≤ 10^4) representing the target amount of money. -----Output----- Print a single integer — the minimum number of coins needed to collect exactly m amount of money. If it is not possible, print -1. -----Examples----- Input 3 1 3 4 6 Output 2 Input 2 2 5 3 Output -1 Input 4 1 2 5 10 27 Output 4 -----Note----- In the first example, the coins of values 3 and 3 can be used to make the amount 6, requiring 2 coins. In the second example, it is not possible to make the amount 3 with the given coin values, so the output is -1. In the third example, one way to make the amount 27 is to use two coins of 10, one coin of 5, and two coins of 1, requiring a total of 4 coins.","solution":"def min_coins(n, coin_values, m): Function to calculate the minimum number of coins required to make a given amount of money. # Initialize the table with large numbers, bigger than the possible number of coins dp = [float(\'inf\')] * (m + 1) # Base case: 0 coins needed to make 0 amount dp[0] = 0 # Fill the dp table with minimum coins required for each amount up to m for coin in coin_values: for i in range(coin, m + 1): dp[i] = min(dp[i], dp[i - coin] + 1) # If dp[m] is still infinity, it means it\'s not possible to make amount m return dp[m] if dp[m] != float(\'inf\') else -1"},{"question":"Ellen is opening a new restaurant and plans to offer a special menu where customers can create their own dishes from a variety of ingredients. To help Ellen, you need to write a program that calculates the number of unique dishes that can be created. Each dish is defined by a combination of ingredients, and the order in which ingredients are added doesn\'t matter. Ellen has a fixed set of N ingredients, and each dish must contain at least one ingredient. Find the number of unique dishes that can be created using at least one of the ingredients. -----Input----- The input consists of a single integer N (1 leq N leq 100), representing the number of ingredients available. -----Output----- Output the total number of unique dishes that can be created using the available ingredients. -----Examples----- Sample Input 1: 3 Sample Output 1: 7 Sample Input 2: 5 Sample Output 2: 31 Sample Input 3: 1 Sample Output 3: 1 Note: In the first example, with 3 ingredients, the unique dishes can be calculated as 2^3 - 1 = 7. This is because each ingredient combination (including those with multiple ingredients) is considered unique, and subtracting 1 accounts for the empty combination.","solution":"def count_unique_dishes(N): Calculate the number of unique dishes that can be created from N ingredients. Parameters: N (int): The number of ingredients available. Returns: int: The total number of unique dishes. # The total number of ways to choose from N ingredients (including the empty set) # is 2^N, and removing the empty set gives us 2^N - 1. return (2 ** N) - 1"},{"question":"Snuke is fond of prefixes and suffixes of strings. He has a string S of length L, and he wants to find out how many distinct non-empty substrings of S exist that are both a prefix and a suffix of S. A substring is a contiguous sequence of characters within a string. For example, in the string \\"ababa\\": - The substrings that are both prefixes and suffixes are \\"a\\", \\"aba\\", and \\"ababa\\". Your task is to write a function that determines the number of such distinct non-empty substrings for a given input string. Constraints * 1≤L≤100,000 Input The input is given from Standard Input in the following format: S Output Print the number of distinct non-empty substrings of S that are both a prefix and a suffix. Examples Input ababa Output 3 Input aaaaa Output 5 Input abcd Output 1","solution":"def count_prefix_suffix_substrings(S): Given a string S, return the number of distinct non-empty substrings of S that are both a prefix and a suffix. Parameters: S (str): The input string. Returns: int: The count of distinct non-empty substrings that are both prefix and suffix. L = len(S) count = 0 for i in range(1, L+1): # Check if the prefix of length i is the same as the suffix of length i if S[:i] == S[-i:]: count += 1 return count"},{"question":"You are given a list of integers \'nums\' where each number represents a score in an exam. Return the k-th largest unique score in the list. If there are fewer than k unique scores, return -1. Example 1: Input: nums = [4, 5, 1, 4, 3, 2, 5, 2] k = 3 Output: 3 Explanation: The unique scores are [1, 2, 3, 4, 5] and the 3rd largest is 3. Example 2: Input: nums = [7, 7, 7] k = 2 Output: -1 Explanation: There is only one unique score which is 7. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findKthLargest() which takes a list of integers nums and an integer k, and returns the k-th largest unique score or -1 if there are fewer than k unique scores. Expected Time Complexity: O(n log n) Expected Space Complexity: O(n) Constraint: 1 <= n <= 10^5 -10^9 <= nums[i] <= 10^9 1 <= k <= n","solution":"def findKthLargest(nums, k): Returns the k-th largest unique score in the list \'nums\'. If there are fewer than k unique scores, return -1. # Generate a set of unique numbers unique_scores = set(nums) # Sort the unique scores in descending order sorted_unique_scores = sorted(unique_scores, reverse=True) # Check if there are fewer than k unique scores if len(sorted_unique_scores) < k: return -1 # Return the k-th largest unique score return sorted_unique_scores[k - 1]"},{"question":"A busy restaurant has customers who are seated in a line. Each customer gives a satisfaction rating and also a stress rating for being seated next to noisy customers. The aim is to seat the maximum number of customers while minimizing the overall stress of the group. Stress is defined as the sum of the stress ratings of all loud customers sitting next to other customers. You need to write a program to determine the maximum number of customers that can be seated such that no two customers (except the first and last one) have a high stress level due to noise. A noise level is regarded as high if it is greater than 7. # Input The input is given from Standard Input in the following format: N s_1 t_1 s_2 t_2 : s_N t_N Where: - N (2 ≤ N ≤ 1000) is the number of customers. - s_i (1 ≤ s_i ≤ 1000) is the satisfaction level of the i-th customer. - t_i (1 ≤ t_i ≤ 10) is the stress level of the i-th customer when adjacent to another loud customer. # Output Print the maximum number of customers that can be seated such that the overall stress is minimized. # Examples Example 1: # Input ``` 5 5 4 3 6 8 9 2 10 6 3 ``` # Output ``` 3 ``` Example 2: # Input ``` 4 7 6 5 8 3 10 6 4 ``` # Output ``` 2 ``` Example 3: # Input ``` 6 8 7 2 3 4 9 1 10 7 4 5 5 ``` # Output ``` 4 ``` # Note In the first example, the program should select customers as 1, 2 and 5. This gives us customers as follows: - Customer 1: Satisfaction = 5, Stress = 4 - Customer 2: Satisfaction = 3, Stress = 6 - Customer 5: Satisfaction = 6, Stress = 3 So the maximum number of customers seated is 3.","solution":"def max_customers_seated(n, customer_data): # Filter out the customers with stress level higher than 7 filtered_customers = [i for i in range(n) if customer_data[i][1] < 8] # Calculate the maximum number of customers that can be seated max_customers = 0 for i in range(len(filtered_customers)): count = 0 for j in range(i, len(filtered_customers)): count += 1 if count > max_customers: max_customers = count return max_customers def main(): import sys input = sys.stdin.read data = input().splitlines() n = int(data[0]) customer_data = [] for i in range(1, n + 1): satisfaction, stress = map(int, data[i].split()) customer_data.append((satisfaction, stress)) result = max_customers_seated(n, customer_data) print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given an array of integers representing the daily prices of a particular stock over a period of time. You want to determine the maximum profit you could achieve by buying on one day and selling on another day after the buying day. If no profit can be made, return 0. Write a function that takes in an array of prices and returns the maximum profit possible. Example ``` maxProfit([7, 1, 5, 3, 6, 4]) === 5 ``` Explanation: * Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. * Note that buying on day 2 and selling on day 6 also results in a profit of 5, but the maximum profit cannot exceed this value. Example ``` maxProfit([7, 6, 4, 3, 1]) === 0 ``` Explanation: * In this case, no transaction is done, and the maximum profit is 0. Constraints * The length of the array will be at least 2. * Prices are positive integers.","solution":"def maxProfit(prices): This function takes in an array of prices and returns the maximum profit possible by buying on one day and selling on a later day. # Initialize variables to keep track of the minimum price and the maximum profit min_price = float(\'inf\') max_profit = 0 # Iterate through the list of prices for price in prices: # Update the minimum price encountered so far if price < min_price: min_price = price # Calculate the potential profit from selling at the current price profit = price - min_price # Update the maximum profit if the current profit is greater if profit > max_profit: max_profit = profit return max_profit"},{"question":"Given a string consisting of only lowercase letters, determine whether it is a palindrome. A string is considered a palindrome if it reads the same forwards and backwards. However, you can change exactly one character in the string to make it a palindrome. Write a function `canBePalindrome` to return `True` if it is possible to modify at most one character to make the string a palindrome. Otherwise, return `False`. **Function Signature:** ```python def canBePalindrome(s: str) -> bool: ``` **Input:** - A string `s` with length `1 <= len(s) <= 10^5`. **Output:** - A boolean value `True` or `False`. **Examples:** ``` canBePalindrome(\\"abca\\") -> True # \\"abca\\" can be changed to \\"abba\\" or \\"acca\\". canBePalindrome(\\"abcdef\\") -> False # It\'s not possible to make it a palindrome by changing only one character. canBePalindrome(\\"a\\") -> True # A single character is inherently a palindrome. canBePalindrome(\\"racecar\\") -> True # \\"racecar\\" is already a palindrome. canBePalindrome(\\"abccba\\") -> True # \\"abccba\\" is already a palindrome. ``` **Constraints:** - The function should efficiently handle strings up to the given length, focusing primarily on time complexity and edge cases.","solution":"def canBePalindrome(s: str) -> bool: Returns True if it is possible to modify at most one character to make the string a palindrome. Otherwise, returns False. left, right = 0, len(s) - 1 mismatch_count = 0 while left < right: if s[left] != s[right]: mismatch_count += 1 if mismatch_count > 1: return False left += 1 right -= 1 return True"},{"question":"# Task You are given a rectangular grid of size `n x m`. Starting from the top left corner of the grid, you have to move to the bottom right corner. You can only move either right or down at any point in time. However, there are some blocked cells in the grid where you cannot step. The task is to count the number of distinct paths that can be taken to move from the top left to the bottom right corner of the grid. # Input - `n`: The number of rows in the grid. - `1 <= n <= 100` - `m`: The number of columns in the grid. - `1 <= m <= 100` - `blocked_cells`: A list of tuples representing the positions of the blocked cells in the grid. Each tuple (i, j) denotes that the cell at row `i` and column `j` is blocked. - `0 <= len(blocked_cells) <= 1000` - `1 <= i <= n` - `1 <= j <= m` # Output An integer representing the number of distinct paths from the top left to the bottom right corner of the grid, or `0` if no such path exists.","solution":"def count_paths(n, m, blocked_cells): if (n, m) == (1, 1): return 0 if (1, 1) in blocked_cells else 1 blocked_set = set(blocked_cells) if (1, 1) in blocked_set or (n, m) in blocked_set: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(m): if (i + 1, j + 1) in blocked_set: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[n - 1][m - 1]"},{"question":"Zack is practicing his coding skills with various patterns. One day, he discovers the \\"wave\\" pattern in which numbers increase and then decrease in a symmetric way. Zack defines a wave as follows: 1. The sequence must first strictly increase until it reaches a peak. 2. After reaching the peak, the sequence must strictly decrease. Given a sequence of integers, determine if the sequence forms a wave pattern. Write a function `is_wave_pattern(sequence)` that takes a list of integers as input and returns a boolean indicating whether the list forms a wave pattern. Function Signature: ```python def is_wave_pattern(sequence: List[int]) -> bool: ``` Input - A list of integers `sequence` (2 ≤ len(sequence) ≤ 10^5, 1 ≤ sequence[i] ≤ 10^9). Output - A boolean: `True` if the sequence forms a wave pattern, `False` otherwise. Examples ```python assert is_wave_pattern([1, 3, 5, 4, 2]) == True assert is_wave_pattern([3, 2, 1]) == False assert is_wave_pattern([1, 2, 3, 4, 5, 4, 3, 2, 1]) == True assert is_wave_pattern([1, 1, 2, 3, 2, 1, 1]) == False ``` Explanation - In the first example, the sequence `[1, 3, 5, 4, 2]` increases to a peak (5) and then decreases, forming a wave. - In the second example, `[3, 2, 1]`, there is no peak where it starts decreasing. - In the third example, `[1, 2, 3, 4, 5, 4, 3, 2, 1]` increases to a peak (5) and then decreases, forming a wave. - In the fourth example, `[1, 1, 2, 3, 2, 1, 1]` has a constant sequence at the beginning, which doesn\'t follow the strict increasing rule. Note: - The input list is guaranteed to have at least two elements. - The peak should be a clear maximum point, not a plateau or a sequence with plateaus.","solution":"def is_wave_pattern(sequence): if len(sequence) < 2: return False increasing = True peaked = False for i in range(1, len(sequence)): if increasing: if sequence[i] > sequence[i-1]: continue elif sequence[i] == sequence[i-1]: return False else: if i == 1: return False increasing = False peaked = True if not increasing: if sequence[i] < sequence[i-1]: continue else: return False return peaked"},{"question":"You are given a sequence of n integers. A subsegment of the sequence is called \\"beautiful\\" if it contains at least one element and the bitwise AND of all elements in the subsegment is greater than zero. Your task is to count the number of beautiful subsegments in the sequence. A subsegment b is a subsegment of a sequence a if b can be obtained from a by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. ----- Input ----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10^5). Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 10^5). The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). It is guaranteed that the sum of n over all test cases does not exceed 10^5. ----- Output ----- For each test case, print a single integer — the number of beautiful subsegments of the sequence. ----- Examples ----- Input 2 3 1 2 3 3 4 5 6 Output 6 6 ----- Note ----- In the first test case, all possible subsegments of sequence [1, 2, 3] having bitwise AND greater than zero are: [1], [2], [3], [1, 2], [1, 2, 3], [2, 3] All these subsegments are beautiful, so the answer is 6. In the second test case, all possible subsegments of sequence [4, 5, 6] having bitwise AND greater than zero are: [4], [5], [6], [4, 5], [5, 6], [4, 5, 6] All these subsegments are beautiful, so the answer is 6.","solution":"def count_beautiful_subsegments(a): Returns the count of beautiful subsegments in the sequence. n = len(a) total_subsegments = n * (n + 1) // 2 # Total number of subsegments in the array zero_streak = 0 count_non_beautiful = 0 for num in a: if num == 0: zero_streak += 1 else: if zero_streak > 0: count_non_beautiful += zero_streak * (zero_streak + 1) // 2 zero_streak = 0 if zero_streak > 0: count_non_beautiful += zero_streak * (zero_streak + 1) // 2 beautiful_subsegments = total_subsegments - count_non_beautiful return beautiful_subsegments def count_beautiful_subsegments_multiple_cases(test_cases): results = [] for n, a in test_cases: results.append(count_beautiful_subsegments(a)) return results # Main function to read input and process the data def main(): import sys input = sys.stdin.read data = input().split() idx = 0 t = int(data[idx]) idx += 1 test_cases = [] for _ in range(t): n = int(data[idx]) idx += 1 a = list(map(int, data[idx:idx + n])) idx += n test_cases.append((n, a)) results = count_beautiful_subsegments_multiple_cases(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"In a game, you are required to move a character from the starting point (0, 0) on a 2D grid to an end point (X, Y). The character can move only in four directions: up, down, left, and right. However, there are K blocks on the grid where the character cannot move. Your task is to find the minimum number of moves required to reach the end point from the starting point. If it\'s not possible to reach the end point, return -1. -----Constraints----- - 0 ≤ X, Y ≤ 1000 - 0 ≤ K ≤ 1000 - 0 ≤ B_x, B_y ≤ 1000 (coordinates of the blocks) - The starting point (0, 0) and the end point (X, Y) will never be a block. -----Input----- Input is given from Standard Input in the following format: X Y K B_x1 B_y1 B_x2 B_y2 ... B_xK B_yK -----Output----- Print the minimum number of moves required to reach the end point (X, Y) from the starting point (0, 0). If it\'s not possible, print -1. -----Sample Input----- 2 3 1 1 2 -----Sample Output----- 5 The character moves in the following sequence: (0, 0) -> (0, 1) -> (0, 2) -> (0, 3) -> (1, 3) -> (2, 3). Hence, it takes 5 moves.","solution":"from collections import deque def min_moves_to_reach(X, Y, K, blocks): Finds the minimum number of moves required to reach (X, Y) from (0, 0) on a 2D grid, avoiding K block positions. If it is not possible, returns -1. Args: X (int): X-coordinate of the endpoint. Y (int): Y-coordinate of the endpoint. K (int): Number of blocked positions. blocks (list of tuples): List of blocked positions as (B_x, B_y). Returns: int: Minimum number of moves to reach (X, Y) or -1 if not possible. # Directions: right, down, left, up directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] # Convert list of blocks into a set for fast lookup block_set = set(blocks) # Queue for BFS: stores (current_x, current_y, distance_from_start) queue = deque([(0, 0, 0)]) # Set to keep track of visited nodes visited = set() visited.add((0, 0)) while queue: current_x, current_y, distance = queue.popleft() # If we have reached the destination, return the distance if current_x == X and current_y == Y: return distance # Explore neighbors for dx, dy in directions: new_x, new_y = current_x + dx, current_y + dy # Check bounds and if the new position is not a block and not visited if 0 <= new_x <= 1000 and 0 <= new_y <= 1000 and (new_x, new_y) not in block_set and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append((new_x, new_y, distance + 1)) # If the queue is empty and we haven\'t reached the destination, return -1 return -1"},{"question":"Implement a data structure that supports the following operations on a multiset of integers: 1. **insert(x)**: Insert element x into the multiset. 2. **remove(x)**: If element x is present in the multiset, remove one occurrence of x. 3. **get_median()**: Return the median of the multiset. If the multiset has an even number of elements, return the smaller of the two middle elements. # Constraints - All integer values are in the range [−10^9, 10^9]. - Operations will be called at most 10^5 times in total. # Interaction Your implementation will receive input lines indicating the operations, and it should output the result of `get_median()` queries directly. Input The first line contains an integer `n`, the number of operations. The next `n` lines each contain one of the following operations: - `insert x`: Inserts the integer `x` into the multiset. - `remove x`: Removes one occurrence of the integer `x` from the multiset if it exists. - `get_median`: Outputs the median of the multiset. Output For each `get_median` query, output a single integer - the median of the current state of the multiset. # Example Input: ``` 10 insert 1 insert 5 get_median insert 2 get_median remove 1 get_median insert 3 insert 4 get_median ``` Output: ``` 3 2 2 3 ``` # Notes In the given example, after each query, the multiset evolves as follows: 1. After the first `insert 1`, the multiset is [1]. 2. After the second `insert 5`, the multiset is [1, 5]. 3. The first `get_median` outputs `1` as it is the only element. 4. After the third `insert 2`, the multiset is [1, 2, 5]. 5. The second `get_median` outputs `2` as the multiset has [1, 2, 5], and 2 is the middle element. 6. After the `remove 1`, the multiset is [2, 5]. 7. The third `get_median` outputs `2` as it is the smallest of the two middle elements (2 and 5). 8. After the next `insert 3`, the multiset is [2, 3, 5]. 9. After the final `insert 4` and `get_median`, the multiset [2, 3, 4, 5] results in a median of `3`. Implementing this data structure efficiently requires careful management of the elements to maintain the median property across operations.","solution":"import bisect class MultiSet: def __init__(self): self.data = [] def insert(self, x): bisect.insort(self.data, x) def remove(self, x): idx = bisect.bisect_left(self.data, x) if idx < len(self.data) and self.data[idx] == x: self.data.pop(idx) def get_median(self): n = len(self.data) if n == 0: raise ValueError(\\"The multiset is empty\\") if n % 2 == 1: return self.data[n // 2] else: return self.data[n // 2 - 1] def process_operations(operations): ms = MultiSet() result = [] for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \'insert\': ms.insert(int(parts[1])) elif cmd == \'remove\': ms.remove(int(parts[1])) elif cmd == \'get_median\': result.append(ms.get_median()) return result"},{"question":"Henry and Emma are organizing a treasure hunt in a park. They have a list of locations where clues are hidden. Each clue contains an integer, and the clues are arranged in a line. They need to find the length of the longest sequence of clues where each clue number in the sequence is greater than the previous one. Help them by writing a program that determines the length of this longest increasing subsequence of clue numbers. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case starts with an integer N, the number of clues. - The second line of each test case contains N space-separated integers, representing the numbers on the clues. ------ Output Format ------ For each test case, output a single integer, the length of the longest increasing subsequence of clue numbers. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ Clue number ≤ 10000 ------ Sample Input 1 ------ 3 5 1 2 1 2 3 6 5 1 2 6 3 4 4 7 3 5 3 ------ Sample Output 1 ------ 3 4 2 ------ Explanation 1 ------ Test case 1: The longest increasing subsequence is 1, 2, 3, which has length 3. Test case 2: The longest increasing subsequence is 1, 2, 3, 4, which has length 4. Test case 3: The longest increasing subsequence is 3, 5, which has length 2.","solution":"def length_of_LIS(clues): if not clues: return 0 n = len(clues) dp = [1] * n # dp[i] will be the length of LIS ending at index i for i in range(1, n): for j in range(i): if clues[i] > clues[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_test_cases(test_cases): results = [] for clues in test_cases: results.append(length_of_LIS(clues)) return results"},{"question":"A software company is building a reporting tool that generates and displays sales reports from a set of transaction records. Each transaction record contains the following fields: - `transaction_id`: A unique identifier for the transaction. - `date`: The date of the transaction in the format `YYYY-MM-DD`. - `customer_id`: A unique identifier for the customer. - `amount`: The amount of money spent in the transaction. The goal is to implement a function that processes these transaction records to generate daily sales reports. Each daily sales report should include: 1. `date`: The date of the report. 2. `total_sales`: The total sales amount for that date. 3. `unique_customers`: The number of unique customers who made transactions on that date. 4. `transactions`: The total number of transactions on that date. Implement a function `generate_daily_sales_report(transaction_records)` that takes a list of transaction records and returns the desired report in the form of a list of dictionaries, sorted by date in ascending order. # Input The input to the function is a list of dictionaries, where each dictionary represents a single transaction record with the following keys: - `transaction_id` (string): A unique identifier for the transaction. - `date` (string): The date of the transaction in the format `YYYY-MM-DD`. - `customer_id` (string): A unique identifier for the customer. - `amount` (float): The amount of money spent in the transaction. # Output The function should return a list of dictionaries, where each dictionary represents a daily sales report with the following keys: - `date` (string): The date of the report. - `total_sales` (float): The total sales amount for that date. - `unique_customers` (int): The number of unique customers who made transactions on that date. - `transactions` (int): The total number of transactions on that date. # Example ```python transaction_records = [ {\\"transaction_id\\": \\"1\\", \\"date\\": \\"2023-10-01\\", \\"customer_id\\": \\"C1\\", \\"amount\\": 100.0}, {\\"transaction_id\\": \\"2\\", \\"date\\": \\"2023-10-01\\", \\"customer_id\\": \\"C2\\", \\"amount\\": 150.0}, {\\"transaction_id\\": \\"3\\", \\"date\\": \\"2023-10-02\\", \\"customer_id\\": \\"C1\\", \\"amount\\": 200.0}, {\\"transaction_id\\": \\"4\\", \\"date\\": \\"2023-10-02\\", \\"customer_id\\": \\"C3\\", \\"amount\\": 50.0}, {\\"transaction_id\\": \\"5\\", \\"date\\": \\"2023-10-02\\", \\"customer_id\\": \\"C1\\", \\"amount\\": 75.0} ] expected_output = [ {\\"date\\": \\"2023-10-01\\", \\"total_sales\\": 250.0, \\"unique_customers\\": 2, \\"transactions\\": 2}, {\\"date\\": \\"2023-10-02\\", \\"total_sales\\": 325.0, \\"unique_customers\\": 2, \\"transactions\\": 3} ] assert generate_daily_sales_report(transaction_records) == expected_output ``` # Constraints - Each transaction record is guaranteed to have all the fields properly filled. - The number of transaction records will not exceed 10,000. - The number of unique dates will not exceed 365 in any given year.","solution":"def generate_daily_sales_report(transaction_records): from collections import defaultdict report = defaultdict(lambda: {\\"total_sales\\": 0, \\"unique_customers\\": set(), \\"transactions\\": 0}) for record in transaction_records: date = record[\\"date\\"] report[date][\\"total_sales\\"] += record[\\"amount\\"] report[date][\\"unique_customers\\"].add(record[\\"customer_id\\"]) report[date][\\"transactions\\"] += 1 result = [] for date, data in sorted(report.items()): result.append({ \\"date\\": date, \\"total_sales\\": data[\\"total_sales\\"], \\"unique_customers\\": len(data[\\"unique_customers\\"]), \\"transactions\\": data[\\"transactions\\"] }) return result"},{"question":"------ Problem Statement ------ Given a binary tree, you need to find the longest path between any two leaves in the tree. The longest path may or may not pass through the root. The path does not need to be unique, just one valid path length should be returned. ------ Input ------ The first line contains an integer N, the number of nodes in the tree. The next N lines each contain three integers u, v, and w representing an edge between node u and node v with weight w. The input tree is always a connected acyclic graph. ------ Output ------ Output a single integer which represents the length of the longest path between any two leaves in the tree. ------ Constraints ------ 1 ≤ N ≤ 10^4 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^6 ------ Example ------ Input: 5 1 2 3 1 3 4 3 4 2 2 5 6 Output: 15 Explanation: The tree is as follows: 1 / 2 3 / 5 4 The longest path between any two leaves is the path 5 -> 2 -> 1 -> 3 -> 4 with a total length of 3 + 6 + 4 + 2 = 15.","solution":"class TreeNode: def __init__(self): self.children = {} self.parent = None def longest_path_between_leaves(n, edges): Returns the length of the longest path between any two leaves in the tree. from collections import defaultdict, deque if n == 1: return 0 # Construct the tree tree = defaultdict(TreeNode) for u, v, w in edges: tree[u].children[v] = w tree[v].parent = u tree[v].children[u] = w tree[u].parent = v # Function for DFS to find the longest path def dfs(node, parent): max1, max2 = 0, 0 for child, weight in tree[node].children.items(): if child != parent: child_length = weight + dfs(child, node) if child_length > max1: max1, max2 = child_length, max1 elif child_length > max2: max2 = child_length global_max[0] = max(global_max[0], max1 + max2) return max1 root = next(iter(tree)) global_max = [0] dfs(root, None) return global_max[0] # Function to read input based on the given format def read_input(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) edges = [] for i in range(1, len(data), 3): u = int(data[i]) v = int(data[i + 1]) w = int(data[i + 2]) edges.append((u, v, w)) return n, edges if __name__ == \\"__main__\\": n, edges = read_input() print(longest_path_between_leaves(n, edges))"},{"question":"You are given two arrays, `arr1` and `arr2`, both of length `n`. You need to determine if there exists a subsequence from both arrays of equal length such that the sum of the subsequence from `arr1` is equal to the sum of the subsequence from `arr2`. A subsequence is derived by deleting some or no elements from an array without changing the order of the remaining elements. Input The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the length of the arrays. The second line contains `n` space-separated integers `arr1[i]` (|arr1[i]| ≤ 1000) — elements of the first array. The third line contains `n` space-separated integers `arr2[i]` (|arr2[i]| ≤ 1000) — elements of the second array. Output If such subsequence exists, print \\"YES\\" (quotes for clarity). Otherwise, print \\"NO\\" (quotes for clarity). Examples Input 4 1 2 3 4 5 6 7 8 Output NO Input 3 1 2 3 3 2 1 Output YES Input 5 1 2 2 1 1 2 1 1 2 1 Output YES","solution":"def has_equal_sum_subsequence(n, arr1, arr2): Determine if there exists a subsequence from both arrays such that the sum of the subsequence from arr1 is equal to the sum of the subsequence from arr2. Parameters: n (int): The length of the arrays. arr1 (list of int): The first array. arr2 (list of int): The second array. Returns: str: \\"YES\\" if such subsequence exists, otherwise \\"NO\\". sum_arr1 = sum(arr1) sum_arr2 = sum(arr2) if sum_arr1 == sum_arr2: return \\"YES\\" else: return \\"NO\\""},{"question":"A famous art dealer is organizing an auction event. He plans to auction off a number of paintings, each painted by a notable artist. The dealer knows that the value of the paintings changes over time and wants to maximize his profit by selling a specific sequence of paintings. However, there\'s a rule for selecting the sequence: the auctioned paintings must have increasing values based on their estimated price. Given a list of estimated prices of N paintings, you need to find the length of the longest strictly increasing subsequence of the paintings that can be auctioned off. Input The first line contains an integer T, the total number of test cases. Each test case starts with an integer N, the number of paintings. The next line contains N space-separated integers, representing the estimated prices of the paintings. Output For each test case, output the length of the longest strictly increasing subsequence of the estimated prices. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Each of the next N integers ≤ 10^9 Example Input: 2 7 10 20 10 30 20 50 60 5 5 3 4 8 6 Output: 5 3 Explanation Example case 1: The longest strictly increasing subsequence of estimated prices is [10, 20, 30, 50, 60], which has a length of 5. Example case 2: The longest strictly increasing subsequence of estimated prices is [3, 4, 8], which has a length of 3.","solution":"def lis_length(prices): Find the length of the longest increasing subsequence. from bisect import bisect_left lis = [] for price in prices: pos = bisect_left(lis, price) if pos == len(lis): lis.append(price) else: lis[pos] = price return len(lis) def process_test_cases(test_cases): results = [] for case in test_cases: N, prices = case results.append(lis_length(prices)) return results def main(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) prices = list(map(int, input_lines[index + 1].split())) test_cases.append((N, prices)) index += 2 results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"A chef on a remote island is cooking up a storm, but unfortunately, they only have limited access to spices. They need your help to optimize their use of the spices they have. The problem is to determine if a specific combination of dishes can be made with the available spices and, if not, identify the missing spices. Each spice has a unique identifier. You will receive two lists of strings: the first represents the available spices, and the second represents the required spices for a specific combination of dishes. Your task is to write a function `check_spices` that takes these two lists and determines if all required spices are available. # Input - `available_spices`: A list of strings representing the spices the chef currently has. Each string is a unique identifier. - `required_spices`: A list of strings representing the spices needed for the dishes. Each string is a unique identifier. # Output - If all required spices are available, return `\\"All required spices are available.\\"` - If any required spices are missing, return a string in the format: `\\"Missing spices: {missing_spice_1}, {missing_spice_2}, ...\\"`, with the missing spices listed in the same order as they appear in the `required_spices` list. # Examples ```python check_spices([\\"cumin\\", \\"turmeric\\", \\"coriander\\"], [\\"cumin\\", \\"coriander\\"]) # Output: \\"All required spices are available.\\" check_spices([\\"cumin\\", \\"turmeric\\", \\"coriander\\"], [\\"cumin\\", \\"paprika\\", \\"coriander\\"]) # Output: \\"Missing spices: paprika\\" check_spices([\\"cumin\\", \\"turmeric\\"], [\\"cayenne\\", \\"cumin\\", \\"turmeric\\", \\"cloves\\"]) # Output: \\"Missing spices: cayenne, cloves\\" check_spices([], [\\"chili\\", \\"oregano\\"]) # Output: \\"Missing spices: chili, oregano\\" ``` # Notes - The input lists are case-sensitive. - The function should efficiently handle large lists of spices.","solution":"def check_spices(available_spices, required_spices): This function checks if all required spices are available. Parameters: available_spices (list of str): List of available spices required_spices (list of str): List of required spices for the dishes Returns: str: Message about the availability of spices missing_spices = [spice for spice in required_spices if spice not in available_spices] if not missing_spices: return \\"All required spices are available.\\" else: return f\\"Missing spices: {\', \'.join(missing_spices)}\\""},{"question":"Given a string s consisting of lowercase English letters, determine if it contains all the vowels (a, e, i, o, u) at least once. -----Constraints----- - s is a non-empty string of up to 1000 lowercase English letters. -----Input----- The input is given from Standard Input in the following format: s -----Output----- If s contains all the vowels at least once, print contains all vowels. Otherwise, print missing vowels. -----Sample Input----- education -----Sample Output----- contains all vowels Since the string \\"education\\" contains all the vowels (a, e, i, o, u), print contains all vowels.","solution":"def check_all_vowels(s): Returns whether the input string contains all the vowels (a, e, i, o, u) at least once. vowels = set(\'aeiou\') return vowels.issubset(set(s))"},{"question":"Alex is part of a cybersecurity team and needs to encode and decode messages efficiently. One technique involves encoding a message by reversing the string and then shifting each character by a certain number of positions in the ASCII table. To decode the message, one needs to reverse the encoding process. Your task is to write a program to first encode a given message and then decode it to verify the original string. Input: The input consists of two lines: - The first line contains an integer n, the number of positions each character is shifted in the ASCII table during encoding (can be positive or negative). - The second line contains the original string s to be encoded, with a length of at most 10^4 characters. Output: Output the original string after encoding and then decoding, demonstrating the process works. Constraints: - -100 ≤ n ≤ 100 - 1 ≤ |s| ≤ 10000 SAMPLE INPUT 3 hello SAMPLE OUTPUT hello Explanation: First, the string \\"hello\\" is reversed to \\"olleh\\". Then, each character is shifted by 3 positions in the ASCII table, resulting in \\"rlltlt\\". Decoding involves reversing the operations to restore the original string \\"hello\\". Notes: The output should show that after encoding and then decoding, the original string is recovered correctly.","solution":"def encode(message, shift): Encodes the message by reversing the string and shifting each character in the ASCII table by shift positions. Parameters: message (str): The original message to encode. shift (int): The number of positions to shift each character in the ASCII table. Returns: str: The encoded message. reversed_message = message[::-1] encoded_chars = [chr(ord(char) + shift) for char in reversed_message] return \'\'.join(encoded_chars) def decode(encoded_message, shift): Decodes the message by reversing the shifting each character in the ASCII table by shift positions and then reversing the string. Parameters: encoded_message (str): The encoded message to decode. shift (int): The number of positions each character was originally shifted in the ASCII table. Returns: str: The decoded original message. shifted_back_chars = [chr(ord(char) - shift) for char in encoded_message] decoded_message = \'\'.join(shifted_back_chars) return decoded_message[::-1] def process_message(n, s): Encodes and then decodes the message to verify the original string is correctly restored. Parameters: n (int): The number of positions each character is shifted in the ASCII table during encoding. s (str): The original string to encode and decode. Returns: str: The original string after encoding and then decoding to verify the process. encoded = encode(s, n) decoded = decode(encoded, n) return decoded"},{"question":"Alice has just started learning about binary search trees (BST) in her algorithms class. She decides to write a function to calculate the sum of all nodes that are between a given range [L, R] (inclusive) in a given BST. A binary search tree is defined as follows: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. Help Alice write this function. **Input:** - The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of nodes in the BST. - The next n lines each contain an integer representing the value of a node in the BST. - The last line contains two integers L and R (1 ≤ L ≤ R ≤ 10^9), the range of sum. **Output:** - A single integer, the sum of all node values that fall within the range [L, R] (inclusive). **Note:** - Each node value in the BST will be unique. - It is guaranteed that the BST contains at least one node. **Example:** _Input:_ ``` 7 10 5 15 3 7 18 2 7 15 ``` _Output:_ ``` 32 ``` Explanation: In this example, the BST looks like this: ``` 10 / 5 15 / 3 7 18 / 2 ``` Node values between 7 and 15 inclusive are 10, 7, and 15. Their sum is 32.","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None def insert_bst(root, key): Inserts a key into the BST and returns the root of the tree. if root is None: return TreeNode(key) else: if key < root.key: root.left = insert_bst(root.left, key) else: root.right = insert_bst(root.right, key) return root def range_sum_bst(root, L, R): Calculates the sum of all nodes with values between L and R (inclusive). if root is None: return 0 if root.key < L: return range_sum_bst(root.right, L, R) elif root.key > R: return range_sum_bst(root.left, L, R) else: return root.key + range_sum_bst(root.left, L, R) + range_sum_bst(root.right, L, R)"},{"question":"Design a data structure that supports the following operations efficiently on a dynamic array of integers: - Initialization (create an empty array). - Append (add an integer to the end of the array). - Remove (remove the integer at a specified index). - Get (return the integer at a specified index). - Sum (return the sum of all integers in the array). The goal is to implement this data structure with as efficient time complexities for each operation as possible. -----Input----- First line contains a single integer q (1 ≤ q ≤ 1000), the number of operations. The next q lines each contain one of the following operations: - \\"append x\\" (1 ≤ x ≤ 1000) - append the integer x to the end of the array. - \\"remove i\\" (0 ≤ i < current length of array) - remove the integer at index i from the array. - \\"get i\\" (0 ≤ i < current length of array) - return the integer at index i. - \\"sum\\" - return the sum of all integers in the array. It is guaranteed that each \\"remove\\" and \\"get\\" operation will have a valid index. -----Output----- For each \\"get\\" and \\"sum\\" operation, print the result on a new line. -----Example----- Input 8 append 1 append 2 append 3 get 1 remove 1 get 1 sum append 4 sum Output 2 3 5 8","solution":"class DynamicArray: def __init__(self): self.array = [] def append(self, x): self.array.append(x) def remove(self, i): self.array.pop(i) def get(self, i): return self.array[i] def sum(self): return sum(self.array)"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},C={class:"card-container"},Y={key:0,class:"empty-state"},j=["disabled"],R={key:0},P={key:1};function D(s,e,l,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):u("",!0)]),t("div",C,[(n(!0),i(_,null,w(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+h(r.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",R,"See more"))],8,j)):u("",!0)])}const M=d(A,[["render",D],["__scopeId","data-v-e0a3dc70"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/15.md","filePath":"deepseek/15.md"}'),L={name:"deepseek/15.md"},G=Object.assign(L,{setup(s){return(e,l)=>(n(),i("div",null,[x(M)]))}});export{B as __pageData,G as default};
