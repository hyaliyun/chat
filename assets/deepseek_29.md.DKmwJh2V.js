import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,r,a){return n(),i("div",k,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-1df81818"]]),S=JSON.parse('[{"question":"You are given an array of `n` integers which you can rotate to the right any number of times. A right rotation operation moves the last element of the array to the beginning. Your task is to find the maximum possible value of the array after exactly `k` rotations. A valid solution should consider the impact of each rotation and find the optimal state after k rotations. ------ Input Format ------ - The first line contains two integers, n (the length of the array) and k (the number of rotations you can perform). - The second line contains n space-separated integers representing the elements of the array. ------ Output Format ------ - Print the maximum possible value of the array as an integer after exactly `k` rotations. ------ Constraints ------ 1 ≤ n ≤ 10^5 0 ≤ k ≤ 10^9 -10^9 ≤ array[i] ≤ 10^9 ------ Sample Input 1 ------ 5 2 1 2 3 4 5 ------ Sample Output 1 ------ 5 ------ Explanation 1 ------ After one rotation: [5, 1, 2, 3, 4] After two rotations: [4, 5, 1, 2, 3] The maximum possible value in the array after 2 rotations is 5. ------ Sample Input 2 ------ 3 4 3 9 7 ------ Sample Output 2 ------ 9 ------ Explanation 2 ------ Since `k ≥ n`, we can simplify the problem as the array would end up in the same state as after performing `k % n` rotations. Rotation operations: Original: [3, 9, 7] After one rotation: [7, 3, 9] After two rotations: [9, 7, 3] After three rotations: [3, 9, 7] After four rotations (which is same as one rotation): [7, 3, 9] Thus, the maximum possible value in the array after 4 rotations is 9.","solution":"def max_after_k_rotations(n, k, array): Returns the maximum possible value of the array after exactly k rotations to the right. Parameters: n (int): The length of the array. k (int): The number of rotations. array (list): The array of integers. Returns: int: The maximum possible value in the array after exactly k rotations. # Since the array will repeat its state after n rotations, # we only need to consider k % n rotations k = k % n rotated_array = array[-k:] + array[:-k] return max(rotated_array)"},{"question":"Write a function that takes an integer `n` and returns the `n-th` Fibonacci number. The function should be efficient, utilizing memoization to cache intermediate results and avoid redundant calculations. The Fibonacci sequence is defined as follows: - `Fib(0) = 0` - `Fib(1) = 1` - For `n > 1, Fib(n) = Fib(n-1) + Fib(n-2)` The function should handle large values of `n` efficiently (up to 10,000). # Examples ``` Input: n = 5 Output: 5 Input: n = 10 Output: 55 ```","solution":"def fibonacci(n, memo={}): Returns the n-th Fibonacci number using memoization. if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 else: memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"A group of friends are organizing a potluck dinner. Each friend will bring one or more dishes, but no dish should be duplicated among the group\'s contributions. The goal is to compile a list of unique dishes each friend will bring without any duplication. Write a program to generate the final list of dishes specifying the friend and their unique dishes. # Input The input is a list of dictionaries. Each dictionary contains: - `name` - a string representing the friend\'s name - `dishes` - a list of strings representing the dishes they are planning to bring # Output The output should be a list of dictionaries. Each dictionary contains: - `name` - a string representing the friend\'s name - `dishes` - a list of strings representing the unique dishes brought by the friend # Examples ```python def potluck_dinner(input_list): # your code here potluck_dinner([ {\'name\': \'Alice\', \'dishes\': [\'Salad\', \'Pizza\']} ]) # Output: [{\'name\': \'Alice\', \'dishes\': [\'Salad\', \'Pizza\']}] potluck_dinner([ {\'name\': \'Alice\', \'dishes\': [\'Salad\', \'Pizza\']}, {\'name\': \'Bob\', \'dishes\': [\'Pizza\', \'Cake\']} ]) # Output: [{\'name\': \'Alice\', \'dishes\': [\'Salad\']}, # {\'name\': \'Bob\', \'dishes\': [\'Cake\']}] potluck_dinner([ {\'name\': \'Alice\', \'dishes\': [\'Salad\', \'Pizza\']}, {\'name\': \'Bob\', \'dishes\': [\'Cake\']}, {\'name\': \'Charlie\', \'dishes\': [\'Salad\', \'Cake\']} ]) # Output: [{\'name\': \'Alice\', \'dishes\': [\'Pizza\']}, # {\'name\': \'Bob\', \'dishes\': []}, # {\'name\': \'Charlie\', \'dishes\': []}] potluck_dinner([ {\'name\': \'Alice\', \'dishes\': [\'Salad\']}, {\'name\': \'Bob\', \'dishes\': [\'Cake\']}, {\'name\': \'Charlie\', \'dishes\': [\'Sandwich\']} ]) # Output: [{\'name\': \'Alice\', \'dishes\': [\'Salad\']}, # {\'name\': \'Bob\', \'dishes\': [\'Cake\']}, # {\'name\': \'Charlie\', \'dishes\': [\'Sandwich\']}] ```","solution":"def potluck_dinner(input_list): Compiles a list of unique dishes each friend will bring without any duplication among the group\'s contributions. Parameters: input_list (list): List of dictionaries each containing `name` (string) and `dishes` (list of strings) Returns: list: A list of dictionaries each containing `name` (string) and their unique `dishes` (list of strings) all_dishes = {} for entry in input_list: for dish in entry[\'dishes\']: if dish in all_dishes: all_dishes[dish].append(entry[\'name\']) else: all_dishes[dish] = [entry[\'name\']] result = [] for entry in input_list: unique_dishes = [dish for dish in entry[\'dishes\'] if len(all_dishes[dish]) == 1] result.append({\'name\': entry[\'name\'], \'dishes\': unique_dishes}) return result"},{"question":"Write a function `longest_substring_with_k_distinct` that, given a string `s` and an integer `k`, returns the length of the longest substring that contains exactly `k` distinct characters. If no such substring exists, return 0. # Input - A string `s` with length `n` where 1 leq n leq 2 times 10^5. - An integer `k` where 1 leq k leq 26. # Output - An integer representing the length of the longest substring with exactly `k` distinct characters. # Examples Example 1: ```plaintext Input: s = \\"eceba\\" k = 2 Output: 3 Explanation: The longest substring with exactly 2 distinct characters is \\"ece\\". ``` Example 2: ```plaintext Input: s = \\"aa\\" k = 1 Output: 2 Explanation: The longest substring with exactly 1 distinct character is \\"aa\\". ``` Example 3: ```plaintext Input: s = \\"abc\\" k = 4 Output: 0 Explanation: There are no substrings with exactly 4 distinct characters since the string itself only has 3 distinct characters. ```","solution":"def longest_substring_with_k_distinct(s, k): if k == 0 or not s: return 0 char_map = {} left = 0 max_length = 0 for right in range(len(s)): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 if len(char_map) == k: max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given an integer array a of length n, an integer k, and an integer s, you need to find a contiguous subarray that sums up to s and has a length greater or equal to k. If there\'s no such subarray, return `-1`. If there are multiple valid subarrays, return the length of the shortest one. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 1000) — the number of test cases. The description of the test cases follows. The first line of each test case contains three integers n (1 leq n leq 100), k (1 leq k leq n), and s (0 leq s leq 10^4). The second line of each test case contains n integers a_1, a_2, ldots, a_n (0 le a_i le 100) — the elements of the array a. -----Output----- For each test case, output a single integer — length of the shortest subarray whose sum is at least s and length is at least k. If there is no such subarray, output `-1`. -----Examples----- Input 3 5 2 7 1 2 3 4 5 6 3 10 1 2 3 4 5 6 4 2 0 0 0 1 0 Output 2 3 2 -----Note----- In the first test case, the subarray [3, 4] has a sum of 7 and length 2, which meets the requirements. In the second test case, the shortest subarray with sum at least 10 and length at least 3 is [2, 3, 5], which has a sum of 10. In the third test case, the subarray [0, 0] has a sum of 0 and length 2, which meets the requirement.","solution":"def find_shortest_subarray(t, test_cases): results = [] for case in test_cases: n, k, s, a = case min_length = float(\'inf\') found = False for i in range(n): current_sum = 0 for j in range(i, n): current_sum += a[j] if current_sum >= s and (j - i + 1) >= k: min_length = min(min_length, j - i + 1) found = True break if found: results.append(min_length) else: results.append(-1) return results"},{"question":"A new board game has been released and you are responsible for keeping track of the results. Each game consists of two players, identified by their letters \'A\' and \'B\', and there are only three possible outcomes for each game: player \'A\' wins, player \'B\' wins, or the game ends in a draw. You are given the results of several games in the form of a string where each character represents the outcome of a single game: - \'A\' = player A wins - \'B\' = player B wins - \'D\' = draw Your task is to determine the number of times each player has won and the total number of draws. Write a program that reads a string of game results and prints the number of wins for player A, the number of wins for player B, and the number of draws. -----Input----- A single string s (1 ≤ |s| ≤ 10,000) consisting of characters \'A\', \'B\', and \'D\'. -----Output----- Output three space-separated integers: - Number of wins for player A - Number of wins for player B - Number of draws ------Examples----- Input AABDD Output 2 1 2 Input ABABAB Output 3 3 0 Input DDD Output 0 0 3 -----Note----- In the first sample, player A has won 2 games, player B has won 1 game and there have been 2 draws. In the second sample, both players A and B have won 3 games each and there have been no draws. In the third sample, there have only been draws and neither player has won any games.","solution":"def count_game_results(results): Counts the number of wins for player A, player B, and the number of draws. Args: results (str): The string representing the results of the games. Returns: tuple: A tuple containing three integers - the number of wins for player A, the number of wins for player B, and the number of draws. wins_A = results.count(\'A\') wins_B = results.count(\'B\') draws = results.count(\'D\') return wins_A, wins_B, draws"},{"question":"You are tasked with designing a bookshelf for a library\'s automated system to manage books and their information efficiently. Help design the software to update a book\'s catalog and handle queries regarding the books. Details of the bookshelf system: 1. Each book has a title, an author\'s name, a publication year, and a genre. 2. You need to implement the functions to add a book, update a book\'s information, and query information. Specifications: - `add_book(title, author, year, genre)` - Adds a book with the given details to the catalog. - `update_book(title, new_author=None, new_year=None, new_genre=None)` - Updates the book\'s details. Only update the fields that are not `None`. - `query_book(title)` - Returns the book\'s details as a string in the format \\"Title: title, Author: author, Year: year, Genre: genre\\". If the book is not found, return \\"Book not found\\". Input for functions: 1. Adds and updates will be called multiple times: - `add_book` and `update_book` functions will be used to update the catalog. 2. `query_book` function will be called multiple times to fetch the details. Constraints: - Maximum 1000 books will be handled. - Title strings will be unique and have a maximum length of 100 characters. - Author strings will have a maximum length of 100 characters. - Year will be a 4-digit integer representing the year. - Genre strings will have a maximum length of 50 characters. Example: Sample Operations: add_book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925, \\"Novel\\") add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960, \\"Fiction\\") query_book(\\"The Great Gatsby\\") update_book(\\"The Great Gatsby\\", new_year=1926) query_book(\\"The Great Gatsby\\") query_book(\\"1984\\") Sample Output: \\"Title: The Great Gatsby, Author: F. Scott Fitzgerald, Year: 1925, Genre: Novel\\" \\"Title: The Great Gatsby, Author: F. Scott Fitzgerald, Year: 1926, Genre: Novel\\" \\"Book not found\\"","solution":"class BookShelf: def __init__(self): # Initializes an empty dictionary to store book details self.books = {} def add_book(self, title, author, year, genre): Adds a book with the given details to the catalog. self.books[title] = { \\"Author\\": author, \\"Year\\": year, \\"Genre\\": genre } def update_book(self, title, new_author=None, new_year=None, new_genre=None): Updates the book\'s details. Only update the fields that are not `None`. if title in self.books: if new_author: self.books[title][\\"Author\\"] = new_author if new_year: self.books[title][\\"Year\\"] = new_year if new_genre: self.books[title][\\"Genre\\"] = new_genre def query_book(self, title): Returns the book\'s details as a string. If the book is not found, return \\"Book not found\\". if title in self.books: book = self.books[title] return f\\"Title: {title}, Author: {book[\'Author\']}, Year: {book[\'Year\']}, Genre: {book[\'Genre\']}\\" else: return \\"Book not found\\""},{"question":"A group of employees are scheduled to attend seminars at a company event. The organizers have compiled a list of employees along with their preferred time slots for the seminar. Each employee has exactly one preferred time slot, but employees might share the same preference. The venue for the seminar can only host one employee at a time, and every employee must attend the seminar in their preferred time slot, even if it means exceeding the venue\'s capacity. However, we want to find out the maximum number of employees that the venue needs to accommodate at a single time slot. Given the list of preferred time slots for each employee, find the number of employees attending the seminar at the busiest time slot. Input: The input consists of multiple test cases. The first line of the input contains a single integer T, the number of test cases. Each test case starts with an integer N, the number of employees, followed by N lines where each line contains a single integer representing an employee\'s preferred time slot. Output: For each test case, output the maximum number of employees attending the seminar at the busiest time slot. Example: Input: 2 5 1 2 2 3 3 6 5 5 5 3 3 2 Output: 2 3 Explanation: In the first test case, the preferred time slots are [1, 2, 2, 3, 3]. Time slots 2 and 3 are the busiest with 2 employees each. In the second test case, the preferred time slots are [5, 5, 5, 3, 3, 2]. Time slot 5 is the busiest with 3 employees.","solution":"def max_employees_at_busiest_slot(testcases): results = [] for case in testcases: N = case[0] employees_slots = case[1:] slot_counts = {} for slot in employees_slots: if slot in slot_counts: slot_counts[slot] += 1 else: slot_counts[slot] = 1 max_employees = max(slot_counts.values()) results.append(max_employees) return results"},{"question":"Maria loves playing with strings. Recently, she discovered the concept of palindromes and found it very fascinating. A palindrome is a string that reads the same forward and backward (e.g., \\"level\\", \\"racecar\\"). Maria starts with an empty string and can add characters one by one to build a longer string. She wonders how many different palindromic strings of length N she can generate using exactly K different characters. Help Maria by writing a program to find the number of distinct palindromic strings of length N that can be formed using exactly K different characters. Since the result might be large, return it modulo 10^9+7. Input Format: The first and only line of input contains two integers N and K. Output Format: Print the required number of palindromic strings modulo 10^9+7. Constraints: 1 ≤ N ≤ 1000 1 ≤ K ≤ 26 Note: - Characters are case-sensitive, meaning \'a\' and \'A\' are considered different. - Each character can be used arbitrarily as long as exactly K distinct characters are used. SAMPLE INPUT 3 2 SAMPLE OUTPUT 4 Explanation Let\'s denote the characters as A and B. The distinct palindromic strings of length 3 that can be formed using exactly 2 different characters (A and B) are: - \\"ABA\\" - \\"BAB\\" - \\"AAA\\" - \\"BBB\\" So, the number of possible palindromic strings here is 4, and thus the answer is 4 % (10^9 + 7) = 4.","solution":"MOD = 10**9 + 7 def count_palindromic_strings(N, K): if N == 1: return K % MOD if N % 2 == 0: half_length = N // 2 else: half_length = N // 2 + 1 return pow(K, half_length, MOD)"},{"question":"Write a function `find_duplicate_odd` that takes a list of integers, `arr`, and returns a list of odd integers that appear more than once in the list. The returned list should be sorted in increasing order and contain only unique elements. If there are no odd duplicates, return an empty list. Example: - Input: [1, 3, 5, 7, 1, 3, 9, 11, 3] - Output: [1, 3] - Input: [2, 4, 6, 8, 10] - Output: [] - Input: [11, 13, 17, 19, 11, 11, 13] - Output: [11, 13]","solution":"def find_duplicate_odd(arr): Returns a list of odd integers that appear more than once in `arr`, sorted in increasing order. odd_counts = {} for num in arr: if num % 2 != 0: # Check if the number is odd if num in odd_counts: odd_counts[num] += 1 else: odd_counts[num] = 1 # Filter numbers that occur more than once and sort the result result = sorted([num for num, count in odd_counts.items() if count > 1]) return result"},{"question":"In a certain country, there is a unique weather reporting system that alternates between two types of temperature scales: Celsius and Fahrenheit. The scale alternates every day starting from day 1. For example, if day 1 reports the temperature in Celsius, then day 2 will report the temperature in Fahrenheit, day 3 in Celsius, and so on. A research institute needs to convert a series of reported temperatures to a consistent scale for analysis. They want all temperatures converted to Celsius. You are given a list of temperatures reported over `n` days. The list starts with the temperature of day 1, and the format switches between Celsius and Fahrenheit as described. Your task is to convert all the temperatures to Celsius. Use the following formula for the conversion from Fahrenheit to Celsius: [ C = frac{5}{9} times (F - 32) ] **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 10^5) - the number of days with temperature data. - The second line contains `n` space-separated integers: the temperatures reported over these `n` days. **Output:** - Output `n` space-separated integers - the temperatures converted to Celsius, rounded to the nearest integer. **Sample Input:** ``` 5 32 50 10 86 20 ``` **Sample Output:** ``` 0 10 10 30 20 ``` **Explanation:** - Day 1: 32 Celsius (No conversion needed) - Day 2: 50 Fahrenheit -> 10 Celsius (Converted) - Day 3: 10 Celsius (No conversion needed) - Day 4: 86 Fahrenheit -> 30 Celsius (Converted) - Day 5: 20 Celsius (No conversion needed)","solution":"def convert_temperatures(n, temperatures): Convert a series of temperatures to Celsius based on the alternating reporting scales. Parameters: n (int): Number of days with temperature data. temperatures (list of int): Temperatures reported over these n days. Returns: list of int: The temperatures converted to Celsius, rounded to the nearest integer. celsius_temperatures = [] for i in range(n): if i % 2 == 0: # Day reporting in Celsius celsius_temperatures.append(temperatures[i]) else: # Day reporting in Fahrenheit, convert to Celsius fahrenheit = temperatures[i] celsius = round((5.0 / 9.0) * (fahrenheit - 32)) celsius_temperatures.append(celsius) return celsius_temperatures"},{"question":"A company organizes its employees into a hierarchy based on their roles. The CEO is at the top of the hierarchy and has employee ID 1. Each employee apart from the CEO reports to exactly one immediate supervisor. The company wants to gather information on the hierarchy by the number of levels below each employee in their reporting lines. Given the number of employees N and their reporting structure, you are to compute the number of levels below each employee (including indirect reporting) and return the number of levels for each employee from 1 to N. Constraints * 2 leq N leq 10^5 * 2 leq a_i leq N * 1 leq a_i < b_i leq N * Every employee except the CEO has exactly one supervisor. Input Input is given from Standard Input in the following format: ``` N a_2 b_2 a_3 b_3 : a_N b_N ``` Here, `a_i` is the supervisor of employee `b_i`. Output Print the number of levels below each employee from 1 to N, in the following format: ``` l_1 l_2 ... l_N ``` where `l_i` is the number of levels below employee `i`. Examples Input ``` 5 1 2 1 3 2 4 2 5 ``` Output ``` 2 1 0 0 0 ``` Input ``` 7 1 2 2 3 2 4 3 5 3 6 6 7 ``` Output ``` 4 3 2 0 0 1 0 ``` Input ``` 3 1 2 1 3 ``` Output ``` 1 0 0 ```","solution":"from collections import defaultdict, deque def compute_levels_below(N, reporting_structure): # Create an adjacency list for the hierarchy hierarchy = defaultdict(list) for a, b in reporting_structure: hierarchy[a].append(b) # Array to store number of levels below each employee levels_below = [0] * (N + 1) # Postorder DFS to compute number of levels below each employee def dfs(node): max_depth = 0 for subordinate in hierarchy[node]: max_depth = max(max_depth, dfs(subordinate) + 1) levels_below[node] = max_depth return max_depth # CEO\'s ID is 1, start DFS from the CEO dfs(1) return levels_below[1:] # Input taking utility function def parse_input(input_string): lines = input_string.strip().split(\'n\') N = int(lines[0]) reporting_structure = [] for i in range(1, N): a, b = map(int, lines[i].split()) reporting_structure.append((a, b)) return N, reporting_structure # Reading input and computing results def main(input_string): N, reporting_structure = parse_input(input_string) levels = compute_levels_below(N, reporting_structure) return \' \'.join(map(str, levels))"},{"question":"You are given two integers, `X` and `Y`, which represent the coordinates of a robot on a 2D grid. The robot can move to the left, right, up, or down, but with a twist: the robot\'s movement consumes an amount of energy proportional to the Manhattan distance from its current position to the origin (0, 0). Write a function that calculates the minimum energy required for the robot to move from its initial position `(X, Y)` to the origin `(0, 0)`. The energy required for a move from `(x1, y1)` to `(x2, y2)` is defined as the Manhattan distance between `(x1, y1)` and `(x2, y2)`, which is given by `|x1 - x2| + |y1 - y2|`. Your task is to minimize the total energy consumption while moving the robot from `(X, Y)` to `(0, 0)`. You should implement the function `min_energy(X, Y) -> int` to solve this problem. # Constraints: - `-10^9 <= X, Y <= 10^9` - The starting position `(X, Y)` and the origin `(0, 0)` are always integer coordinates. # Input: Input is given from standard input in the following format: ``` X Y ``` # Output: Output the minimum energy required to move the robot from `(X, Y)` to `(0, 0)`. # Examples: Example 1: # Input: ``` 3 4 ``` # Output: ``` 7 ``` Example 2: # Input: ``` -2 3 ``` # Output: ``` 5 ``` # Explanation: - In Example 1, the robot at `(3, 4)` uses a minimum energy of 7, calculated as |3 - 0| + |4 - 0|. - In Example 2, the robot at `(-2, 3)` uses a minimum energy of 5, calculated as |-2 - 0| + |3 - 0|.","solution":"def min_energy(X, Y): This function calculates the minimum energy required for the robot to move from position (X, Y) to the origin (0, 0) based on the Manhattan distance. return abs(X) + abs(Y)"},{"question":"Baby Ehab loves prime numbers and palindromes. He has an array a of length n, and he wants to transform it into a \\"prime-palindrome array\\". An array is called prime-palindrome if every element in the array is a prime number and a palindrome. A number is called a palindrome if it reads the same backward as forward, and for the purpose of this problem, a prime number is any integer greater than 1 that has no positive divisors other than 1 and itself. Baby Ehab wants to know the minimum number of elements that need to be changed in a to transform it into a prime-palindrome array. Can you help him with this task? -----Input----- The first line contains an integer n (1 le n le 100) — the length of the array a. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 2000) — the elements of the array a. -----Output----- The first line should contain the minimum number of elements you need to change. The second line should contain the indices of the elements you\'re changing, separated by spaces. -----Examples----- Input 5 6 313 5 10 101 Output 2 1 4 Input 3 2 3 7 Output 0 -----Note----- In the first example, changing 6 at index 1 to 3, and 10 at index 4 to 7 makes the array [3, 313, 5, 7, 101], which is a prime-palindrome array. In the second example, the array is already a prime-palindrome array, so no changes are needed.","solution":"def is_prime(num): Check if a number is a prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def is_palindrome(num): Check if a number is a palindrome. return str(num) == str(num)[::-1] def min_changes_to_prime_palindrome_array(n, a): Calculate the minimum number of changes to transform a into a prime-palindrome array. prime_palindromes = [i for i in range(2001) if is_prime(i) and is_palindrome(i)] changes = 0 change_indices = [] for i in range(n): if a[i] not in prime_palindromes: # Find the closest prime-palindrome number min_distance = float(\'inf\') best_replacement = a[i] for pp in prime_palindromes: distance = abs(pp - a[i]) if distance < min_distance: min_distance = distance best_replacement = pp # Change the element to the closest prime-palindrome a[i] = best_replacement changes += 1 change_indices.append(i + 1) return changes, change_indices"},{"question":"Write a program that converts a given temperature from Fahrenheit to Celsius or from Celsius to Fahrenheit based on the user\'s choice. -----Input:----- - The first line will contain a floating-point number, representing the temperature. - The second line will contain a character, either \\"F\\" for Fahrenheit or \\"C\\" for Celsius, indicating the unit of the temperature provided. - The third line will contain the character \\"F\\" if the resulting temperature should be in Fahrenheit, or \\"C\\" if it should be in Celsius. -----Output:----- Output a single line containing the converted temperature, rounded to 2 decimal places. -----Constraints----- - The provided temperature will be between -1000 and 1000 degrees. - The initial unit and target unit will always be either \\"F\\" or \\"C\\". -----Sample Input:----- 98.6 F C -----Sample Output:----- 37.00 -----Sample Input:----- 100 C F -----Sample Output:----- 212.00","solution":"def convert_temperature(temp, from_unit, to_unit): Converts temperature from Fahrenheit to Celsius or Celsius to Fahrenheit. Parameters: temp (float): The temperature to convert. from_unit (str): The unit of the temperature to convert from (\\"F\\" or \\"C\\"). to_unit (str): The unit of the temperature to convert to (\\"F\\" or \\"C\\"). Returns: float: The converted temperature, rounded to 2 decimal places. if from_unit == \\"F\\" and to_unit == \\"C\\": converted_temp = (temp - 32) * 5 / 9 elif from_unit == \\"C\\" and to_unit == \\"F\\": converted_temp = temp * 9 / 5 + 32 else: converted_temp = temp return round(converted_temp, 2)"},{"question":"In Rivendell, Elrond the wise is organizing an elven archery contest. The contest field is an n × n grid, where n is an odd number. Each row and column of the grid is numbered from 1 to n. The contest involves archers hitting specific targets placed on this grid. Elrond wants to place exactly n magical targets on this grid, such that each row and each column has exactly one target. Furthermore, each target should be placed on a special cell. A cell (x, y) is considered special if the sum of its coordinates (x + y) is an even number. Given the size of the grid n (an odd number between 1 and 999), help Elrond determine the positions of the n targets such that no two targets share the same row or column, and all targets are placed on special cells. Input The input contains a single integer n (1 ≤ n < 1000 and n is odd) representing the size of the grid. Output Print n pairs of integers (x, y), where each pair represents the coordinates of a target. The pairs should be printed in any order. Each coordinate should be a valid position on the n × n grid and meet the conditions mentioned above. Example Input 5 Output 1 1 2 4 3 3 4 2 5 5 Input 3 Output 1 1 2 2 3 3 Note In the first sample, the 5 targets are placed in such a manner that each row and column has exactly one target, and each target is on a special cell. In the second sample, the 3 targets are placed similarly on a 3×3 grid. There can be multiple valid solutions; any valid set of coordinates meeting the criteria will be accepted.","solution":"def place_targets(n): This function returns n pairs of coordinates such that no two targets share the same row or column, and all targets are placed on special cells where the sum of coordinates (x + y) is an even number. targets = [] for i in range(1, n + 1): # If the row is odd, use the diagonal pattern x = y if i % 2 == 1: targets.append((i, i)) else: # If the row is even, offset the column by 1 (i-1 position) targets.append((i, n - i + 1)) return targets"},{"question":"A large company has n employees, some of whom are managers. Each employee reports to exactly one manager except for the CEO, who has no manager. The employees form a tree structure where the CEO is the root. The company wants to send out an announcement and expects that each employee will forward the announcement to their direct reportees. The company needs to find the minimum time required for the announcement to reach all employees starting from the CEO. Every employee takes exactly one unit of time to forward the announcement to their direct reportees. The company provided the following information: * The total number of employees n (1 ≤ n ≤ 100,000). * The list of direct reports for each employee. Employee i has a list of direct reportees denoted by k_i where 1 ≤ i ≤ n and k_i contains the indices of the reportees of employee i. Input The first line contains one integer n (1 ≤ n ≤ 100,000) — the number of employees. The next n-1 lines contain two integers u_i and v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i), representing a direct report relationship where u_i is the manager of v_i. Output Print a single integer — the minimum time required for the announcement to reach all employees. Examples Input 5 1 2 1 3 2 4 2 5 Output 3 Input 6 1 2 1 3 2 4 2 5 3 6 Output 3 Note In the first example, the CEO (employee 1) sends the message to employees 2 and 3 at time 1. Employee 2 then forwards the message to employees 4 and 5 at time 2. Thus, the last employees (4 and 5) receive the message by time 3. In the second example, the CEO (employee 1) sends the message to employees 2 and 3 at time 1. Employees 2 and 3 then forward the message to employees 4, 5, and 6 at time 2, with employee 3 forwarding to employee 6 at time 2. Thus, the last employees (4, 5, and 6) receive the message by time 3.","solution":"def min_time_to_announce(n, reports): from collections import defaultdict, deque if n == 1: # only the CEO return 0 tree = defaultdict(list) for u, v in reports: tree[u].append(v) # Use BFS to calculate the depth of the deepest leaf queue = deque([(1, 0)]) # (node, depth) max_depth = 0 while queue: current, depth = queue.popleft() if current in tree: for child in tree[current]: queue.append((child, depth + 1)) else: # it\'s a leaf node max_depth = max(max_depth, depth) return max_depth"},{"question":"Given a string s, determine if it starts with a vowel or consonant. For the purpose of this question, vowels are \'a\', \'e\', \'i\', \'o\', \'u\' (in both uppercase and lowercase). Example 1: Input: s = \\"Apple\\" Output: Vowel Explanation: The word starts with \'A\', which is a vowel. Example 2: Input: s = \\"banana\\" Output: Consonant Explanation: The word starts with \'b\', which is a consonant. Your Task: You don\'t need to read input or print anything. Your task is to complete the function startsWithVowel() which accepts a string s as the input parameter and returns a string, \\"Vowel\\" if s starts with a vowel and \\"Consonant\\" otherwise. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= len(s) <= 10^5 The string s contains only alphabetic characters.","solution":"def startsWithVowel(s): Determines if the given string starts with a vowel or consonant. Parameters: s (str): The input string Returns: str: \\"Vowel\\" if the string starts with a vowel, \\"Consonant\\" otherwise. # Define a set of vowels vowels = set(\\"aeiouAEIOU\\") # Check if the first character is in the vowels set if s[0] in vowels: return \\"Vowel\\" else: return \\"Consonant\\""},{"question":"Anaglyptics Inc. is developing an advanced text editor that supports a unique set of text transformations. Users can apply a sequence of operations to a document, but the transformations must follow specific rules to ensure the document remains coherent. Your task is to determine whether a given sequence of transformations can be applied in the correct order and to compute the resultant text if possible. The text editor supports two types of transformations: 1. Insert a character \'c\' at position \'p\' (1-based index). 2. Delete a character at position \'p\' (1-based index). Rules 1. All transformations must be applied in the given order. 2. The initial document is an empty string. 3. During each transformation, the positions are 1-based indices, which means position 1 refers to the start of the string, and position len(s) + 1 refers to the position immediately after the last character of the string \'s\'. 4. If a transformation references a position that is invalid (either in terms of inserting out of an acceptable range or deleting a nonexistent character), the entire sequence is deemed invalid. # Input - The first line contains an integer `t` (1 ≤ t ≤ 100,000), the number of transformations. - The following `t` lines each contain a transformation in one of the following formats: - `+ p c`: Insert character `c` at position `p` (`c` is guaranteed to be an English alphabet character). - `- p`: Delete the character at position `p`. # Output - If it is impossible to apply the transformations in the given sequence, print \\"NO\\". - If it is possible to apply all transformations, print \\"YES\\" on the first line followed by the resultant text on the second line. # Example Input ``` 5 + 1 a + 2 b + 3 c - 2 + 2 d ``` Output ``` YES adc ``` Input ``` 3 + 2 a + 1 b - 2 ``` Output ``` NO ``` # Note In the first example, after each transformation, the document evolves as follows: 1. `+ 1 a` -> \\"a\\" 2. `+ 2 b` -> \\"ab\\" 3. `+ 3 c` -> \\"abc\\" 4. `- 2` -> \\"ac\\" (removing \'b\') 5. `+ 2 d` -> \\"adc\\" (inserting \'d\' at position 2) In the second example, the first transformation tries to insert \'a\' at position 2 of an empty string, which is an invalid operation, making the entire sequence invalid. Design your solution to handle up to `t` transformations efficiently.","solution":"def apply_transformations(t, transformations): Apply a sequence of transformations on an initially empty string. :param t: The number of transformations. :param transformations: A list of transformation commands. :return: A tuple (\\"YES\\", result_string) if all transformations are valid, else (\\"NO\\",). s = [] for transformation in transformations: if transformation[0] == \'+\': _, p, c = transformation p = int(p) - 1 if not (0 <= p <= len(s)): return (\\"NO\\",) s.insert(p, c) elif transformation[0] == \'-\': _, p = transformation p = int(p) - 1 if not (0 <= p < len(s)): return (\\"NO\\",) s.pop(p) return (\\"YES\\", \\"\\".join(s)) def parse_input(input_lines): Parse the input from a list of input lines. :param input_lines: A list of input lines. :return: A tuple (t, transformations) t = int(input_lines[0]) transformations = [line.split() for line in input_lines[1:t + 1]] return t, transformations"},{"question":"Ron is organizing a library system for his new collection of books. Each book has a unique identifier and a popularity score. As a book enthusiast, Ron wants to keep track of the most popular books based on their scores. He decided to create a list that will help him keep track of the k most popular books at any given time, where k is smaller than or equal to the total number of books added so far. Ron will perform the following operations on his list: 1. Add a new book with its unique identifier and popularity score. 2. Query the k most popular books currently in the collection. Write a program to help Ron manage his library system efficiently. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100000), the total number of operations to be performed and the number of most popular books to keep track of. The next n lines describe the operations. Each operation starts with a character: - \'A\' followed by two integers id and s (1 ≤ id ≤ 10^6, 1 ≤ s ≤ 10^6), indicating an addition of a new book with unique identifier id and popularity score s. - \'Q\' indicating a query to output the k most popular books\' identifiers, sorted in the order of their popularity scores from highest to lowest. If two books have the same popularity score, the book with the smaller identifier should come first. Output For each query operation, output the k most popular books\' identifiers on a single line, separated by spaces. Examples Input 7 3 A 1 100 A 2 200 A 3 150 Q A 4 250 Q A 5 125 Q Output 2 3 1 4 2 3 4 2 3 Explanation 1. After the first three additions, the most popular books are [2, 3, 1]. 2. After adding the fourth book, the most popular books are [4, 2, 3]. 3. After adding the fifth book, the most popular books are still [4, 2, 3]. The book with ID 5 has a lower popularity score than the three most popular books.","solution":"import heapq def manage_library(operations, k): Manages a library system where the most popular books are tracked based on their scores. Args: operations (list of tuples): A list of operations to be performed. k (int): The number of most popular books to keep track of. Returns: list of lists: Results of \'Q\' operations with the k most popular book identifiers. min_heap = [] # to store the k most popular books as a min-heap all_books = {} results = [] for op in operations: if op[0] == \'A\': # Add operation _, book_id, score = op all_books[book_id] = score if len(min_heap) < k: heapq.heappush(min_heap, (score, book_id)) else: if score > min_heap[0][0] or (score == min_heap[0][0] and book_id < min_heap[0][1]): heapq.heappushpop(min_heap, (score, book_id)) elif op[0] == \'Q\': # Query operation most_popular_books = heapq.nlargest(k, min_heap) most_popular_books.sort(key=lambda x: (-x[0], x[1])) # sort by score descending, then by id ascending results.append([book_id for _, book_id in most_popular_books]) return results"},{"question":"Analyzing large datasets often requires sorting elements based on specific parameters. One common task is to sort objects by their attributes in descending order. ___ # Consider an example: * Given a list of dictionaries representing students with their grades, sort the list in descending order by their grades. ___ # Task **_Given_** a list of dictionaries, each dictionary contains a \\"name\\" (string) and a \\"grade\\" (integer), **_Return_** a new list of students sorted in descending order by their grades. ___ # Notes * If two students have the same grade, maintain their relative order as in the original list. * Empty input list should return an empty list. * The students may have grades ranging from 0 to 100, inclusive. ___ # Input >> Output Example: ___ ___ ___ # Example 1: * Input: `[{\'name\': \'John\', \'grade\': 90}, {\'name\': \'Jane\', \'grade\': 95}, {\'name\': \'Doe\', \'grade\': 90} ]` * Output: `[{\'name\': \'Jane\', \'grade\': 95}, {\'name\': \'John\', \'grade\': 90}, {\'name\': \'Doe\', \'grade\': 90}]` # Example 2: * Input: `[{\'name\': \'Alice\', \'grade\': 75}, {\'name\': \'Bob\', \'grade\': 80}]` * Output: `[{\'name\': \'Bob\', \'grade\': 80}, {\'name\': \'Alice\', \'grade\': 75}]` ___ # [Sorting Data Series](https://www.codewars.com/collections/sorting-data-series) # [Dictionary Manipulations](https://www.codewars.com/collections/dictionary-manipulations) ___ ALL translations are welcomed Enjoy Solving !! # CodingMaster","solution":"def sort_students_by_grade(students): Sorts a list of student dictionaries in descending order by their grade. Args: students (list of dicts): List of dictionaries, each containing \'name\' and \'grade\' keys. Returns: list of dicts: List of dictionaries sorted by \'grade\' in descending order. return sorted(students, key=lambda x: x[\'grade\'], reverse=True)"},{"question":"Gina is tasked with creating a simple text editor feature! She wants to implement a function ```transform_text()``` that modifies a given string based on a specified operation. The function should handle three kinds of operations: uppercasing, lowercasing, and capitalizing the initial letter of each word. ```python def transform_text(text, operation): if operation == \'uppercase\': return text.upper() elif operation == \'lowercase\': return text.lower() elif operation == \'capitalize\': return text.capwords() # Fix this line return \\"Invalid operation\\" ``` The ```capitalize``` operation should use the ```str.title()``` method to properly handle capitalizing each word. Fix Gina\'s ```transform_text()``` function so it works correctly. Here\'s what your function should do: - Convert all the characters to uppercase if the operation is \'uppercase\'. - Convert all the characters to lowercase if the operation is \'lowercase\'. - Capitalize the first letter of each word if the operation is \'capitalize\'. - Return \\"Invalid operation\\" for any unrecognized operation. Additionally, ensure that input validation is taken into account. Return \\"Invalid text input\\" if the text is not a string. ```python assert transform_text(\\"hello world\\", \\"uppercase\\") == \\"HELLO WORLD\\" assert transform_text(\\"HELLO WORLD\\", \\"lowercase\\") == \\"hello world\\" assert transform_text(\\"hello world\\", \\"capitalize\\") == \\"Hello World\\" assert transform_text(12345, \\"uppercase\\") == \\"Invalid text input\\" assert transform_text(\\"hello world\\", \\"reverse\\") == \\"Invalid operation\\" ``` Happy coding!","solution":"def transform_text(text, operation): if not isinstance(text, str): return \\"Invalid text input\\" if operation == \'uppercase\': return text.upper() elif operation == \'lowercase\': return text.lower() elif operation == \'capitalize\': return text.title() return \\"Invalid operation\\""},{"question":"You are given a 2D grid of size n x m representing a field. Each cell in the grid can either be empty (0) or contain an obstacle (-1). You need to find the shortest path from the top-left corner to the bottom-right corner, moving only up, down, left, or right. You are allowed to remove at most one obstacle during your traversal. If there is no such path, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) – the dimensions of the grid. Each of the next n lines contains m integers representing the grid (either 0 or -1). Output Output a single integer – the length of the shortest path from the top-left to the bottom-right corner with the option to remove at most one obstacle. If no such path exists, output -1. Examples Input 3 3 0 0 0 0 -1 0 0 0 0 Output 4 Input 3 3 0 -1 0 -1 0 -1 0 -1 0 Output -1","solution":"from collections import deque def shortest_path_with_obstacle_removal(grid): n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m def bfs(): queue = deque([(0, 0, 0)]) # (x, y, removed_obstacles) visited = set([(0, 0, 0)]) steps = 0 while queue: for _ in range(len(queue)): x, y, removed = queue.popleft() if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): if grid[nx][ny] == 0 and (nx, ny, removed) not in visited: queue.append((nx, ny, removed)) visited.add((nx, ny, removed)) elif grid[nx][ny] == -1 and removed == 0 and (nx, ny, 1) not in visited: queue.append((nx, ny, 1)) visited.add((nx, ny, 1)) steps += 1 return -1 return bfs() # Example usage: grid = [ [0, 0, 0], [0, -1, 0], [0, 0, 0] ] print(shortest_path_with_obstacle_removal(grid)) # Output: 4"},{"question":"In a particular town, there are `n` houses arranged in a straight line. Each house has a certain amount of money, which can be considered as an integer value. The local thief has decided to rob the houses, but he cannot rob two adjacent houses because the alarms in the houses will alert the police. Given a list of non-negative integers representing the amount of money in each house, determine the maximum amount of money the thief can rob without triggering the alarms. -----Input----- - The first line contains a single integer n — the number of houses (1 leq n leq 100). - The second line contains n integers, where each integer represents the amount of money in each house (0 leq text{money} leq 1000). -----Output----- Output a single integer — the maximum amount of money the thief can rob without robbing two adjacent houses. -----Examples----- Input 5 1 2 3 1 5 Output 8 Input 3 2 7 9 Output 11 Input 6 10 1 1 10 1 10 Output 30 -----Note----- In the first sample, the optimal strategy is to rob houses with money amounts `1`, `3`, and `5` (total = 1 + 3 + 5 = 9). In the second sample, selecting the houses with money amounts `7` and `9` gives the maximum total (total = 7 + 9 = 16). In the third sample, selecting the houses with money amounts `10`, `10`, and `10` gives the maximum total (total = 10 + 10 + 10 = 30).","solution":"def max_robbed_money(n, money): if n == 0: return 0 if n == 1: return money[0] dp = [0] * n dp[0] = money[0] dp[1] = max(money[0], money[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + money[i]) return dp[-1]"},{"question":"The annual company retreat includes various fun and competitive activities, one of them being the Treasure Hunt. The whole event is organized in a large garden modeled as a grid of cells, where each cell represents a possible location for a treasure. During the hunt, each team is provided with clues that hint towards specific cells in the grid where they might find treasures. Once a treasure is found, it remains there until the end of the hunt. Each cell can contain at most one treasure and the team can only move between adjacent cells (vertically or horizontally). The team will start their hunt from the top-left corner of the garden (cell (1, 1)) and finish the hunt after reaching the bottom-right corner of the garden (cell (n, m)). Write a program to help the organizers determine the number of unique treasures found by the team during their hunt from the top-left to the bottom-right corner of the garden, following the shortest path (i.e., only moving right or down). Input The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 100), the dimensions of the garden grid. The second line contains an integer `t` (0 ≤ t ≤ n*m), the number of treasures. Each of the next `t` lines contains two integers `x` and `y` (1 ≤ x ≤ n, 1 ≤ y ≤ m), representing the position of a treasure in the grid. Output Output the number of unique treasures found by the team on the shortest path from the top-left to the bottom-right corner of the grid. Examples Input 3 3 4 1 2 2 2 2 3 3 3 Output 3 Input 4 4 3 1 1 4 4 2 3 Output 2 Note In the first example, the shortest path can be (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3), and the team will find treasures at positions (1,2), (2,2), (2,3), and (3,3). Therefore, the total number of unique treasures found is 3. In the second example, the shortest path can be (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> ... -> (4,4), and the team will find treasures at positions (1,1), (2,3), and (4,4). Therefore, the total number of unique treasures found is 2.","solution":"def count_treasures_on_shortest_path(n, m, treasures): Given a grid dimension n x m and the positions of treasures, returns the unique number of treasures found on the shortest path from (1, 1) to (n, m), moving only right or down. Parameters: n (int): number of rows m (int): number of columns treasures (list of tuples): positions of treasures in the grid Returns: int: Number of unique treasures found on the shortest path treasure_set = set() # Convert treasure positions from 1-based to 0-based for x, y in treasures: treasure_set.add((x - 1, y - 1)) count = 0 # Iterate from top-left (0, 0) to bottom-right (n-1, m-1) for i in range(n): for j in range(m): if (i == 0 or j == 0 or i == j): if (i, j) in treasure_set: count += 1 treasure_set.remove((i, j)) return count"},{"question":"Frodo is playing a game where he needs to traverse a grid with N rows and M columns. Each cell in the grid contains a value that represents the energy required to enter that cell. Frodo starts from the top-left corner (1, 1) and wants to reach the bottom-right corner (N, M). However, he can only move either right or down from a cell. Your task is to help Frodo find the minimum total energy required to reach the bottom-right corner from the top-left corner. Input: N = 3, M = 3 grid = { {1, 3, 1}, {1, 5, 1}, {4, 2, 1} } Output: 7 Explanation: The path with the minimum energy required is (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) with a total energy of 1 + 3 + 1 + 1 + 1 = 7. Example 2: Input: N = 2, M = 2 grid = { {1, 2}, {1, 1} } Output: 3 Explanation: The path with the minimum energy required is (1,1) -> (2,1) -> (2,2) with a total energy of 1 + 1 + 1 = 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minEnergy(N, M, grid) which takes N, M, and grid as input parameters and returns the minimum total energy required to reach the bottom-right corner from the top-left corner. Constraints: 1 ≤ N, M ≤ 100 0 ≤ grid[i][j] ≤ 100","solution":"def minEnergy(N, M, grid): Returns the minimum energy required to traverse the grid from the top-left corner to the bottom-right corner. if not grid or N == 0 or M == 0: return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the grid for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][M-1]"},{"question":"A teacher wants to determine whether the grades of a student are passing or failing. A grade is considered passing if it is greater than or equal to 40. Write a program to evaluate the grades for a series of students and determine if they have passed or failed. ------ Input Format ------ - The first line contains a single integer N — the number of students. Then the grades follow. - Each of the next N lines contains a single integer Gi - the grade of the student. ------ Output Format ------ For each grade, print PASS if the grade is 40 or more, otherwise print FAIL. You may print each character of PASS and FAIL in uppercase or lowercase (for example, pass, Pass, PASS will be considered identical). ------ Constraints ------ 1 ≤ N ≤ 20 0 ≤ Gi ≤ 100 ------ Sample Input 1 ------ 4 35 40 50 30 ------ Sample Output 1 ------ FAIL PASS PASS FAIL ------ Explanation 1 ------ Test Case 1: Grade 35 is less than 40, so the output is FAIL. Test Case 2: Grade 40 is equal to 40, so the output is PASS. Test Case 3: Grade 50 is greater than 40, so the output is PASS. Test Case 4: Grade 30 is less than 40, so the output is FAIL.","solution":"def determine_pass_fail(grades): Determines if the grades are passing or failing. Arguments: grades -- list of integers representing grades of students. Returns: A list of \\"PASS\\" or \\"FAIL\\" depending on whether the grades are >= 40 or not. results = [] for grade in grades: if grade >= 40: results.append(\\"PASS\\") else: results.append(\\"FAIL\\") return results"},{"question":"Write a function, `evenOddFilter` / `even_odd_filter` / `EvenOddFilter`, that takes an array of integers as an argument and returns an array containing two subarrays: the first with all the even numbers from the original array and the second with all the odd numbers. For example, if this array were passed as an argument: ```python [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ``` Your function would return the following array: ```python [[2, 4, 6, 8, 10], [1, 3, 5, 7, 9]] ``` The elements in the subarrays should be in the same order as in the initial array passed to your function. If there are no even or odd numbers in the input array, the corresponding subarray should be empty.","solution":"def even_odd_filter(arr): Takes an array of integers and returns an array containing two subarrays: the first subarray with all even numbers and the second subarray with all odd numbers. even_numbers = [num for num in arr if num % 2 == 0] odd_numbers = [num for num in arr if num % 2 != 0] return [even_numbers, odd_numbers]"},{"question":"A software company wants to create a feature that displays the nth Fibonacci number. They decided to make this feature interactive, requiring an efficient solution to handle multiple requests. Your task is to implement a function that computes the nth Fibonacci number for a series of test cases. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the nth Fibonacci number. -----Constraints----- - 1 leq T leq 100 - 0 leq N leq 30 -----Sample Input:----- 5 0 1 5 10 15 -----Sample Output:----- 0 1 5 55 610 -----EXPLANATION:----- - Fibonacci sequence starts with F(0) = 0, F(1) = 1. - F(n) = F(n-1) + F(n-2) for n >= 2.","solution":"def fibonacci(n): Computes the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b def fibonacci_sequence(t, test_cases): Given the number of test cases `t` and a list of integers `test_cases`, returns a list of nth Fibonacci numbers for each test case. results = [] for n in test_cases: results.append(fibonacci(n)) return results"},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex has a unique value associated with it. You need to find a subset of edges such that after removing these edges, every connected component has vertices with the same value. Additionally, you want the minimal number of edges to be removed to achieve this. Input: The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) - the number of vertices and edges in the graph, respectively. The second line contains n integers v1, v2, ..., vn where vi is the value of the i-th vertex (1 ≤ vi ≤ 100). Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between vertices u and v. Output: Print a single integer - the minimum number of edges that need to be removed. Example: Input: 5 4 1 1 2 2 3 1 2 2 3 3 4 4 5 Output: 2 Explanation: One possible way to remove the edges is: remove edge (2, 3) and (4, 5). After removing those edges, we will get three connected components: - Component containing vertex 1 and 2 with value 1 - Component containing vertex 3 and 4 with value 2 - Component containing vertex 5 with value 3","solution":"def min_edge_removals(n, m, values, edges): from collections import defaultdict graph = defaultdict(list) # Building the graph for u, v in edges: graph[u].append(v) graph[v].append(u) def dfs(node, value): stack = [node] visited[node] = True while stack: current = stack.pop() for neighbor in graph[current]: if not visited[neighbor]: if values[neighbor - 1] == value: visited[neighbor] = True stack.append(neighbor) else: edge_removals.add((min(current, neighbor), max(current, neighbor))) visited = [False] * (n + 1) edge_removals = set() for i in range(1, n + 1): if not visited[i]: dfs(i, values[i - 1]) return len(edge_removals) # Example usage: n = 5 m = 4 values = [1, 1, 2, 2, 3] edges = [(1, 2), (2, 3), (3, 4), (4, 5)] print(min_edge_removals(n, m, values, edges)) # Output: 2"},{"question":"Alex loves investigating prime numbers. One day, he became interested in exploring subsequences of prime numbers in a list. A subsequence is derived from a list by deleting some or no elements without changing the order of the remaining elements. He wants to find the length of the longest subsequence of prime numbers from a given list of integers. Since the list can be quite large, he needs your help to write a program to determine this. Write a program that takes an input list of integers and calculates the length of the longest subsequence consisting of prime numbers. Input The first line consists of an integer n (1 ≤ n ≤ 1000) — the number of integers in the list. The second line contains n integers separated by spaces representing the list of integers. Each integer in the list is between 1 and 10^5 inclusive. Output Print a single integer — the length of the longest subsequence consisting of prime numbers. Examples Input 6 10 3 5 7 4 6 Output 3 Input 8 1 2 4 9 6 8 10 12 Output 1 Note In the first example, the longest subsequence of prime numbers is [3, 5, 7], which has length 3. In the second example, the only prime number in the list is 2, so the longest subsequence of prime numbers has length 1.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def longest_prime_subsequence_length(nums): return sum(1 for num in nums if is_prime(num))"},{"question":"Given an array A of n positive integers and an integer k, you need to calculate the number of pairs (i, j) where 1 ≤ i < j ≤ n, such that the greatest common divisor (GCD) of A[i] and A[j] is greater than or equal to k. Output the number of such pairs. -----Input----- The first line of the input contains two integers n (1 ≤ n ≤ 100 000) and k (1 ≤ k ≤ 10^9). The second line contains n integers A[1], A[2], ..., A[n] (1 ≤ A[i] ≤ 10^9). -----Output----- Print a single integer — the number of pairs (i, j) such that gcd(A[i], A[j]) ≥ k. -----Examples----- Input 6 3 1 3 6 7 9 18 Output 6 Input 4 5 10 15 20 25 Output 6 -----Note----- In the first sample, there are 6 pairs where the gcd is greater than or equal to 3: (3, 6), (3, 9), (3, 18), (6, 9), (6, 18), (9, 18). In the second sample, there are 6 pairs where the gcd is greater than or equal to 5: (10, 15), (10, 20), (10, 25), (15, 20), (15, 25), (20, 25).","solution":"from math import gcd def count_gcd_pairs(n, k, A): Returns the number of pairs (i, j) where 1 ≤ i < j ≤ n, such that gcd(A[i], A[j]) ≥ k. count = 0 for i in range(n - 1): for j in range(i + 1, n): if gcd(A[i], A[j]) >= k: count += 1 return count"},{"question":"You are given an undirected weighted graph with n vertices and m edges. The graph may contain self-loops and multiple edges between the same pair of vertices. You need to find the minimum spanning tree (MST) of this graph. However, instead of outputting the total weight of the MST, you need to output the edges of the graph that contribute to the MST, in increasing order of their weights. If there are multiple MSTs with the same total weight, you can output any one of them. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2 * 10^5) — the number of vertices and the number of edges in the graph, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) representing an edge between vertices u and v with weight w. Output Output the edges of the MST in the form of a list of pairs of vertex indices, in non-decreasing order of their weights. Each pair should be printed in a new line with a space separating the two vertex indices. If there are multiple MSTs of the same weight, you can output any one of them. If there is no MST (i.e., the graph is disconnected), print \\"no MST\\". Example Input 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 Output 1 2 2 3 3 4 Note In the example, the MST of the graph includes the edges (1, 2), (2, 3), and (3, 4) with weights 1, 2, and 3, respectively. This graph is connected, and thus an MST exists. If the graph were disconnected (for example, if one of the vertices is isolated), you should print \\"no MST\\".","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, u): if u != self.parent[u]: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def kruskal_mst(n, edges): edges.sort(key=lambda x: x[2]) # Sort edges by weight uf = UnionFind(n) mst_edges = [] for u, v, w in edges: if uf.find(u) != uf.find(v): uf.union(u, v) mst_edges.append((u, v)) if len(mst_edges) == n - 1: break if len(mst_edges) != n - 1: return \\"no MST\\" return mst_edges def find_mst(n, m, edge_list): edges = [(u-1, v-1, w) for u, v, w in edge_list] result = kruskal_mst(n, edges) if result == \\"no MST\\": return result result = sorted(result, key=lambda x: (min(x[0], x[1]), max(x[0], x[1]))) return result"},{"question":"You are designing an online shopping platform where users can add items to their cart. Each item can belong to multiple categories, and you want to calculate the cost efficiency of shipping the cart. Shipping costs vary depending on the category of the items and the number of items bought from that category. If multiple items belong to the same category, a discount is applied after the first item. For each category, the shipping cost for the first item is `cost1`, and for every subsequent item, the shipping cost is `cost2`, where `cost2` is lower than `cost1`. For example, if the \\"Electronics\\" category has `cost1` = 5 for the first item and `cost2` = 2 for subsequent items, then an order with 3 electronics items would cost 5 for the first item and 2 each for the remaining two, making a total of 9. Given a list of items in the cart and their categories, determine the total efficient shipping cost. Input Format The first line contains an integer `n`, the number of different categories. The next `n` lines describe the categories: Each line contains a string `category_name`, an integer `cost1`, and an integer `cost2`. The next line contains an integer `m`, the number of items in the cart. The following `m` lines each contain a string `item_name` and the list of categories it belongs to (separated by spaces). Constraints * 1 leq n leq 50 * 1 leq m leq 1000 * Each `category_name` is a nonempty alphanumeric string. * cost2 < cost1 leq 100 * Each item belongs to at least one category. Output Format The output contains a single integer, the total efficient shipping cost. Sample Input 3 Electronics 5 2 Clothing 3 1 Sports 4 2 5 Laptop Electronics Shirt Clothing Basketball Sports Phone Electronics Trousers Clothing Sample Output 15 Explanation - \\"Laptop\\" belongs to Electronics: First item costs 5. - \\"Shirt\\" belongs to Clothing: First item costs 3. - \\"Basketball\\" belongs to Sports: First item costs 4. - \\"Phone\\" belongs to Electronics: Second item in Electronics costs 2. - \\"Trousers\\" belongs to Clothing: Second item in Clothing costs 1. Total shipping cost = 5 (Laptop) + 3 (Shirt) + 4 (Basketball) + 2 (Phone) + 1 (Trousers) = 15","solution":"def calculate_shipping_cost(categories, items): Calculate the total efficient shipping cost for the cart based on categories. category_info = {} for category in categories: name, cost1, cost2 = category.split() cost1 = int(cost1) cost2 = int(cost2) category_info[name] = (cost1, cost2) category_count = {} total_cost = 0 for item in items: item_name, *item_categories = item.split() for category in item_categories: if category not in category_count: category_count[category] = 0 category_count[category] += 1 if category_count[category] == 1: total_cost += category_info[category][0] else: total_cost += category_info[category][1] return total_cost"},{"question":"In a distant magical land, a renowned wizard creates enchanted beakers. Each beaker has a magical capacity that dictates the maximum amount of magical liquid it can hold. The wizard has N beakers, each with a specific capacity. The wizard also has an unlimited supply of magical liquid potions. The wizard wants to perform a series of experiments to determine the maximum possible integer amount of liquid that all beakers can collectively hold without any individual beaker overflowing. To assist the wizard, you need to determine the maximum collective capacity that can be precisely distributed among all the beakers without exceeding the capacity of any single beaker. Given the capacities of each of the N beakers, you need to find the maximum total amount of magical liquid the wizard can distribute among the beakers evenly and without any beaker overflowing. -----Input----- The first line of input contains a single integer T, the number of test cases. For each test case, the first line contains an integer N, the number of beakers. The second line contains N space-separated integers, which are the capacities of the beakers. -----Output----- For each test case, output a single integer: the maximum possible even distribution of the magical liquid among the beakers. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 1000 - 1 ≤ capacity of each beaker ≤ 109 -----Example----- Input: 3 5 10 20 30 40 50 4 4 4 4 4 3 5 9 12 Output: 150 16 24 -----Explanation----- Example case 1: The beakers can hold a total of 10 + 20 + 30 + 40 + 50 = 150 units of magical liquid. Example case 2: All beakers can hold exactly 4 units of magical liquid each, so the total is 4 * 4 = 16. Example case 3: The beakers can hold a total of 5 + 9 + 12 = 26 units of magical liquid.","solution":"def maximum_total_capacity(test_cases): Calculate the maximum total amount of magical liquid that can be distributed among the beakers for each test case. Parameters: test_cases (list): A list of test cases. Each test case is represented as a tuple containing an integer N (number of beakers) and a list of integers (capacities of the beakers). Returns: list: A list of integers where each integer is the result for the respective test case. results = [] for test_case in test_cases: N, capacities = test_case total_capacity = sum(capacities) # Sum the capacities of all the beakers results.append(total_capacity) # Append the total capacity to the result list return results"},{"question":"Given a number N, check whether N is a Circular Prime number or not. Note: A number is called a Circular Prime if all rotations of its digits are prime. Example 1: Input: N = 197 Output: 1 Explanation: 197, 971, and 719 are all prime numbers. Thus, 197 is a Circular Prime and the answer is 1. Example 2: Input: N = 23 Output: 0 Explanation: 23 is a prime number, but one of its rotations, 32, is not a prime. So, 23 is not a Circular Prime and the answer is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isCircularPrime() which takes a number N as input parameter and returns 1 if it is a Circular Prime number. Otherwise, it returns 0. Expected Time Complexity: O(k * sqrt(m)), where k is the number of rotations and m is the largest rotation. Expected Space Complexity: O(1) Constraints: 1 <= N <= 10^6","solution":"def is_prime(num): Helper function to check if a number is prime. if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def rotate_number(num): Helper function to generate all rotations of the digits of a number. rotations = [] str_num = str(num) length = len(str_num) for i in range(length): rotation = int(str_num[i:] + str_num[:i]) rotations.append(rotation) return rotations def is_circular_prime(N): Function to check whether a number is a Circular Prime. rotations = rotate_number(N) for rotation in rotations: if not is_prime(rotation): return 0 return 1"},{"question":"# Task You are given an integer array `arr` and an integer `k`. Your task is to find and return a subarray of `arr` of size k such that the sum of its elements is the largest among all possible subarrays of size `k`. If there is more than one subarray with the maximum sum, return the first occurrence. Example For `arr = [1, 4, 2, 10, 23, 3, 1, 0, 20]` and `k = 4`, the result should be `[4, 2, 10, 23]`. ``` The subarrays of size 4 are: [1, 4, 2, 10] with sum 17, [4, 2, 10, 23] with sum 39, [2, 10, 23, 3] with sum 38, [10, 23, 3, 1] with sum 37, [23, 3, 1, 0] with sum 27, [3, 1, 0, 20] with sum 24. The subarray [4, 2, 10, 23] has the largest sum of 39. ``` For `arr = [-1, -2, -3, -4, -5]` and `k = 2`, the result should be `[-1, -2]`. ``` The subarrays of size 2 are: [-1, -2] with sum -3, [-2, -3] with sum -5, [-3, -4] with sum -7, [-4, -5] with sum -9. The subarray [-1, -2] has the largest sum of -3. ``` For `arr = [5, 20, 2, 6, 5]` and `k = 1`, the result should be `[20]`. ``` The subarrays of size 1 are: [5] with sum 5, [20] with sum 20, [2] with sum 2, [6] with sum 6, [5] with sum 5. The subarray [20] has the largest sum of 20. ``` Input/Output * `[input]` integer array `arr` * Array of integers, where 1 ≤ arr.length ≤ 10^4. * `[input]` integer `k` * The size of the subarray, where 1 ≤ k ≤ 10^4. * `[output]` integer array * Subarray of `arr` of size `k` with the largest sum.","solution":"def max_sum_subarray(arr, k): Finds and returns the subarray of size k with the largest sum. if len(arr) < k: return [] max_sum = sum(arr[:k]) current_sum = max_sum start_index = 0 for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum start_index = i - k + 1 return arr[start_index:start_index + k]"},{"question":"Given a number N, find the sum of all its divisors. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single integer N. ------ Output Format ------ For each test case, output on a new line, the sum of all divisors of N. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 ------ Sample Input 1 ------ 3 6 10 15 ------ Sample Output 1 ------ 12 18 24 ------ explanation 1 ------ Test case 1: The divisors of 6 are 1, 2, 3 and 6. Their sum is 1 + 2 + 3 + 6 = 12. Test case 2: The divisors of 10 are 1, 2, 5 and 10. Their sum is 1 + 2 + 5 + 10 = 18. Test case 3: The divisors of 15 are 1, 3, 5 and 15. Their sum is 1 + 3 + 5 + 15 = 24.","solution":"def sum_of_divisors(N): Returns the sum of all divisors of N. return sum(i for i in range(1, N + 1) if N % i == 0) def process_test_cases(T, test_cases): Takes the number of test cases T and a list of test cases, returns a list of results for each test case. results = [sum_of_divisors(N) for N in test_cases] return results"},{"question":"George recently bought a new house and decided to take care of his backyard garden by himself. As part of his gardening project, he has a series of flowerbeds organized in a row. Each flowerbed can either be empty or contain one kind of flower. George wants to know the total number of distinct flower arrangements for each consecutive k flowerbeds he can have if he plants different types of flowers in the garden. Given a string B representing the types of flowers in the garden (where each character in the string represents a different type of flower) and an integer k, find all possible distinct arrangements of flowers for each consecutive k flowerbeds. -----Input----- The first line of the input contains the integer N, indicating the number of test cases. Each of the following N sets of lines contains: - The first line which contains the integer k. - The second line which contains the string B. -----Output----- For each test case, output a single line containing the total number of distinct flower arrangements of length k. -----Constraints----- - 1 ≤ N ≤ 50 - 1 ≤ k ≤ |B| ≤ 1000 - String B contains only lowercase English letters. -----Example----- Input: 2 2 abcba 3 aabca Output: 4 3 -----Explanation----- Example case 1. The distinct arrangements of length 2 in the string \\"abcba\\" are: { \\"ab\\", \\"bc\\", \\"cb\\", \\"ba\\" }. Example case 2. The distinct arrangements of length 3 in the string \\"aabca\\" are: { \\"aab\\", \\"abc\\", \\"bca\\" }.","solution":"def distinct_flower_arrangements(k, B): Returns the number of distinct flower arrangements of length k in string B. arrangements = set() for i in range(len(B) - k + 1): arrangement = B[i:i + k] arrangements.add(arrangement) return len(arrangements) def process_test_cases(test_cases): results = [] for k, B in test_cases: results.append(distinct_flower_arrangements(k, B)) return results"},{"question":"Alice is planning to bake some cookies and she needs to purchase ingredients. She knows the quantities of ingredients required to bake one batch of cookies. Alice wants to find out the total amount of each ingredient she needs if she decides to bake multiple batches. Given the quantities needed for one batch and the number of batches Alice wants to bake, calculate the total amount of each ingredient required. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case contains an integer B, the number of batches Alice wants to bake. - The second line of each test case contains a single integer N, the number of different ingredients. - The third line contains N space-separated integers, each representing the quantity required for one batch of cookies for each ingredient. ------ Output Format ------ For each test case, output a single line containing N integers, representing the total quantity required for each ingredient. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ B ≤ 100 1 ≤ N ≤ 100 1 ≤ Quantity for one batch ≤ 100 ----- Sample Input 1 ------ 2 5 3 2 3 4 10 2 1 2 ----- Sample Output 1 ------ 10 15 20 10 20 ----- Explanation 1 ------ In the first test case, Alice wants to bake 5 batches of cookies. She needs 2 units of the first ingredient, 3 units of the second ingredient, and 4 units of the third ingredient for one batch. Therefore, for 5 batches, she needs: - 2 * 5 = 10 units of the first ingredient - 3 * 5 = 15 units of the second ingredient - 4 * 5 = 20 units of the third ingredient In the second test case, Alice wants to bake 10 batches of cookies. She needs 1 unit of the first ingredient and 2 units of the second ingredient for one batch. Therefore, for 10 batches, she needs: - 1 * 10 = 10 units of the first ingredient - 2 * 10 = 20 units of the second ingredient","solution":"def calculate_ingredients(t, test_cases): results = [] for case in test_cases: B, N, quantities = case total_quantities = [B * q for q in quantities] results.append(total_quantities) return results # Sample usage t = 2 test_cases = [ (5, 3, [2, 3, 4]), (10, 2, [1, 2]) ] print(calculate_ingredients(t, test_cases))"},{"question":"Write a function that calculates the Collatz sequence for a given positive integer `n` and returns the sequence as a list. The Collatz sequence is defined as follows: - Start with any positive integer `n`. - Then each term is obtained from the previous term as follows: - If the previous term is even, the next term is one half of the previous term. - If the previous term is odd, the next term is 3 times the previous term plus 1. - The sequence ends when it reaches the number `1`. Your task is to write a function that generates the Collatz sequence starting at `n` and returns a list of the sequence. Assume that `n` is greater than `0`. Examples ``` 5 --> [5, 16, 8, 4, 2, 1] 10 --> [10, 5, 16, 8, 4, 2, 1] 1 --> [1] ```","solution":"def collatz_sequence(n): Generates the Collatz sequence starting at n and returns a list of the sequence. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") sequence = [n] while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 sequence.append(n) return sequence"},{"question":"You are given a matrix of size N times M filled with integers. Your task is to find the minimum cost to make all elements of this matrix equal to 0. You can perform the following operation any number of times: Choose any submatrix of size 2 times 2 and reduce each of its elements by 1. The cost of this operation is 4 (since you are reducing four elements by 1). ------ Input ------ The first line of the input contains two space-separated integers N and M, denoting the dimensions of the matrix. Each of the next N lines contains M space-separated integers representing the elements of the matrix. ------ Output ------ Print a single integer ― the minimum cost to make all elements of the matrix equal to 0. ------ Constraints ------ 1 ≤ N, M ≤ 100 0 ≤ text{matrix}[i][j] ≤ 10^{6} ------ Sample Input 1 ------ 3 3 1 2 1 2 3 2 1 2 1 ------ Sample Output 1 ------ 16 ------ Explanation 1 ------ We can reduce each 2x2 submatrix 4 times to make all elements 0: - Perform the operation on the top-left 2×2 submatrix reducing all its elements by 1, total cost is 4. - Perform the operation again on the same submatrix reducing all its elements by 1, total cost becomes 8. - Repeat this twice more so that all elements of the submatrix are zero, total cost becomes 16. - The bottom-right corner element (which hasn\'t been part of any submatrix) is already 0. The minimum cost is the sum for reducing each 2x2 submatrix to zero. Each submatrix operates independently until all elements are zero, ensuring that each integer is decremented efficiently by operations minimizing the overall cost.","solution":"def min_cost_to_make_zero(matrix, N, M): max_element = 0 for i in range(N): for j in range(M): max_element = max(max_element, matrix[i][j]) # Each operation costs 4 and decrements each element of a 2x2 submatrix by 1 # Therefore, cost to reduce max_element to 0 is 4 * max_element return 4 * max_element"},{"question":"Write a function that takes a string and returns the same string with all the vowels removed. For the purpose of this question, \\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\", and \\"A\\", \\"E\\", \\"I\\", \\"O\\", \\"U\\" are considered vowels. ```python remove_vowels(\\"This website is for losers LOL!\\") # returns \'Ths wbst s fr lsrs LL!\' ```","solution":"def remove_vowels(s): Returns the string s with all vowels removed. vowels = \\"aeiouAEIOU\\" return \'\'.join(char for char in s if char not in vowels)"},{"question":"Ashok has recently started working as a software developer. His first challenge in the job is to optimize the company\'s database that stores a list of employee records. Each employee record consists of the employee\'s name and salary. The company wants to find all the employees who earn more than a given salary threshold. Ashok needs to write a program that performs this operation efficiently. The company provides the list of employee records and the salary threshold as input. Your task is to help Ashok design a function that returns a list of employees who earn more than the specified threshold. The names in the output list should be sorted in ascending order. Input The input format consists of: - The first line contains two integers N and M, where N (1 ≤ N ≤ 10^5) represents the number of employees, and M represents the number of salary thresholds for which the query has to be performed. - The next N lines each contain the name of the employee (a string of maximum length 100), followed by the employee\'s salary (an integer 0 ≤ salary ≤ 10^6), separated by a space. - The following M lines each contain a salary threshold (an integer 0 ≤ threshold ≤ 10^6). Output The output should have M groups of lines. Each group should contain: - First line: the threshold value. - Subsequent lines: a sorted list of employee names earning more than the given threshold, one name per line. If no employee earns more than the threshold, the group should only contain the threshold value. Example Input: 4 2 John 50000 Alice 70000 Bob 60000 Eve 45000 55000 75000 Output: 55000 Alice Bob 75000 Explanation: - For the first threshold (55000), Alice and Bob have salaries greater than 55000. - For the second threshold (75000), no employee earns more than 75000.","solution":"def filter_and_sort_employees(N, M, employees, thresholds): Filters and sorts employee names based on salary thresholds. Parameters: N (int): The number of employees. M (int): The number of salary thresholds for which the query has to be performed. employees (list of tuples): List of (name, salary) tuples. thresholds (list): List of salary thresholds. Returns: list of lists: Each sublist contains the threshold followed by sorted employee names who earn more than the threshold. result = [] # Prepare employee list in a suitable form employee_data = sorted(employees, key=lambda x: x[1]) for threshold in thresholds: employees_above_threshold = [name for name, salary in employee_data if salary > threshold] employees_above_threshold.sort() result.append([str(threshold)] + employees_above_threshold) return result"},{"question":"You are given a sequence of `n` integers. You need to determine the length of the longest contiguous subarray consisting of non-negative integers. A subarray of an array is a continuous subset that can be obtained by taking some elements of it, while maintaining their order in the original array. -----Input----- The first line of input contains an integer n (1 le n le 10^5), the number of elements in the sequence. The next line contains n integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9), the elements of the sequence. -----Output----- Output a single integer, the length of the longest contiguous subarray consisting of non-negative integers. -----Examples----- Sample Input 1: 5 1 -2 3 4 -5 Sample Output 1: 2 Sample Input 2: 6 -1 -2 -3 4 5 6 Sample Output 2: 3","solution":"def longest_non_negative_subarray_length(n, sequence): Returns the length of the longest contiguous subarray consisting of non-negative integers. :param n: int - The number of elements in the sequence :param sequence: list of int - The sequence of integers :return: int - The length of the longest contiguous subarray consisting of non-negative integers max_length = 0 current_length = 0 for num in sequence: if num >= 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Problem statement Consider a grid with dimensions N times M where some cells are blocked, and some cells are free to move through. You start at the top left corner (0, 0) and want to reach the bottom right corner (N-1, M-1). You can only move either right or down at any point in time. Each cell contains a number that represents the cost of passing through that cell. You need to find the minimum cost to reach the bottom right corner from the top left corner. Constraints * 1 leq N, M leq 100 * 0 leq text{cost of each cell} leq 10^5 * The start cell (0,0) and the end cell (N-1, M-1) are not blocked. Input Input follows the following format. All given numbers are integers. N M text{cost}[0][0] text{cost}[0][1] ... text{cost}[0][M-1] text{cost}[1][0] text{cost}[1][1] ... text{cost}[1][M-1] ... text{cost}[N-1][0] text{cost}[N-1][1] ... text{cost}[N-1][M-1] Output Output the minimum cost to reach the bottom right corner on one line. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 7","solution":"def min_cost_path(cost): N = len(cost) M = len(cost[0]) dp = [[0] * M for _ in range(N)] dp[0][0] = cost[0][0] # Initialize first row for j in range(1, M): dp[0][j] = dp[0][j - 1] + cost[0][j] # Initialize first column for i in range(1, N): dp[i][0] = dp[i - 1][0] + cost[i][0] # Fill the rest of the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost[i][j] return dp[N-1][M-1] def parse_input(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) cost = [] for line in lines[1:]: cost.append(list(map(int, line.split()))) return cost"},{"question":"Given a Binary Tree, the task is to check whether it is a Complete Binary Tree or not. A Binary Tree is a Complete Binary Tree if all levels are completely filled except possibly the last level and the last level has all keys as left as possible. Example 1: Input: 1 / 2 3 / / 4 5 6 Output: Yes Example 2: Input: 1 / 2 3 / 4 5 6 Output: No Your Task: You don\'t need to read input or print anything. Your task is to complete the function isCompleteBT() that takes the root node of the Binary Tree as its input and returns True if the Binary Tree is complete, else it returns False. (The driver code will print \'Yes\' if the returned value is True, otherwise \'No\'). Expected Time Complexity: O(N) where N is the number of nodes in the Binary Tree. Expected Auxiliary Space: O(H) where H is the height of the tree. Constraints: 1 <= Number of nodes <= 10^5","solution":"class Node: def __init__(self, key): self.data = key self.left = None self.right = None def isCompleteBT(root): Function to check if a binary tree is complete. :param root: The root node of the binary tree. :return: True if the tree is complete, False otherwise. if not root: return True queue = [] queue.append(root) flag = False while(len(queue)): tempNode = queue.pop(0) if tempNode.left: if flag: return False queue.append(tempNode.left) else: flag = True if tempNode.right: if flag: return False queue.append(tempNode.right) else: flag = True return True"},{"question":"You are given an array of integers where each consecutive pair of elements represents an interval. Implement a function `mergeOverlappingIntervals :: [(Int, Int)] -> [(Int, Int)]` that merges any overlapping intervals and returns an array of the merged intervals. Intervals are represented as a pair of integers where the first value is the start of the interval and the second value the end of the interval (inclusive). Merging intervals means that if two intervals overlap or touch each other, they should be combined into a single interval. Example: ```python mergeOverlappingIntervals([(1, 4), (2, 5), (7, 9)]) # should return [(1, 5), (7, 9)] mergeOverlappingIntervals([(6, 8), (1, 3), (2, 4), (9, 10)]) # should return [(1, 4), (6, 8), (9, 10)] mergeOverlappingIntervals([(1, 2), (2, 3), (3, 4)]) # should return [(1, 4)] mergeOverlappingIntervals([]) # should return [] ``` Notes: - Intervals are always provided as a pair of two integers where the first one is less than or equal to the second one. - The order of the intervals in the output array does not matter. - An empty input array should return an empty output array.","solution":"def mergeOverlappingIntervals(intervals): Merges overlapping intervals and returns an array of the merged intervals. Args: intervals (list of tuples): List of pairs representing intervals. Returns: list of tuples: List of merged intervals. if not intervals: return [] # Sort intervals by starting time intervals.sort(key=lambda x: x[0]) merged_intervals = [] current_start, current_end = intervals[0] for start, end in intervals[1:]: if start <= current_end: # Overlapping intervals current_end = max(current_end, end) else: merged_intervals.append((current_start, current_end)) current_start, current_end = start, end # Add the last interval merged_intervals.append((current_start, current_end)) return merged_intervals"},{"question":"Given a string containing only lowercase alphabet characters, find the length of the longest substring that contains at most two distinct characters. For example: ``` longest_substring(\\"abcabcabc\\") = 2, because \\"ab\\", \\"bc\\", \\"ca\\" segments have maximum length with 2 distinct characters. longest_substring(\\"aaaa\\") = 4, because \\"aaaa\\" itself has all identical characters which is within the 2 distinct character limit. longest_substring(\\"aabbcc\\") = 4, because \\"aabb\\", \\"bbcc\\", \\"aabbcc\\" can have the maximum segment lengths of 4 for 2 distinct characters. longest_substring(\\"eceba\\") = 3, because the longest substring having at most 2 distinct characters is \\"ece\\". ``` More examples in the test cases. Good luck! Try our related challenge [Unique character substring](https://www.codewars.com/kata/5b98d0b1f6c5c94ae0000a2c)","solution":"def longest_substring(s): Returns the length of the longest substring with at most two distinct characters. if len(s) < 3: return len(s) left = 0 max_len = 2 char_map = {} for right in range(len(s)): if s[right] in char_map: char_map[s[right]] += 1 else: char_map[s[right]] = 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Alice and Bob are playing a game. They have an array of N positive integers. In each turn, one of them will choose a non-empty subarray (contiguous segment) of the original array, and then remove exactly one element from that subarray. Alice always starts first, and they take turns alternatively. The game ends when there are no more elements left in the array. The player who cannot make a move loses the game. Assuming both players play optimally, your task is to determine the winner of the game. ------- Input ------- The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers, the elements of the array. ------ Output ------ For each test case, output a single line containing \\"Alice\\" if Alice will win the game, or \\"Bob\\" if Bob will win the game. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ array[i] ≤ 10^9 ------ Sample Input ------ 2 3 1 2 3 4 1 1 1 1 ------ Sample Output ------ Alice Bob ------ Explanation ------ In the first test case, Alice can immediately choose the entire subarray [1, 2, 3] and remove the element 1. Now Bob is left with the array [2, 3], and any move he makes will still leave at least one element for Alice to play with. Alice can force her win on the last move by playing optimally. In the second test case, no matter what Alice does, Bob can always mirror her move by choosing the corresponding subarray on his turn. Eventually, it comes down to the last move where Alice will have no available moves left and Bob will win.","solution":"def find_winner(n, arr): if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\" def solve(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(find_winner(n, arr)) return results"},{"question":"You are given a grid of size MxN where you need to move from the top-left corner (0, 0) to the bottom-right corner (M-1, N-1). Each cell in the grid can either be empty (denoted by 0) or contain an obstacle (denoted by 1). You can move up, down, left, or right, but cannot move diagonally. Your task is to find the length of the shortest path from the top-left corner to the bottom-right corner, bypassing the obstacles. If there is no valid path, return -1. Input The input is a sequence of datasets. Each dataset starts with two positive integers, M and N, separated by a single space, representing the number of rows and columns in the grid, respectively. M and N do not exceed 100. The next M lines each contain N integers separated by a single space (either 0 or 1), representing the grid layout. The end of the input is indicated by a line containing two zeros separated by a single space. Output For each dataset, output a line containing an integer which represents the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, output -1 instead. Example Input 5 5 0 0 0 0 1 0 1 1 0 0 0 1 0 1 0 0 0 0 1 0 1 1 0 0 0 3 3 0 0 1 0 0 1 1 0 0 4 4 0 1 0 0 1 0 0 1 0 1 1 0 0 0 0 0 0 0 Output 8 4 -1","solution":"from collections import deque def shortest_path(grid, M, N): Find the shortest path in a grid from top-left to bottom-right corner, bypassing obstacles. :param grid: List[List[int]], the MxN grid :param M: int, number of rows :param N: int, number of columns :return: int, the length of the shortest path, or -1 if no path exists if grid[0][0] == 1 or grid[M-1][N-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] q = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while q: r, c, dist = q.popleft() if r == M-1 and c == N-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < M and 0 <= nc < N and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) q.append((nr, nc, dist + 1)) return -1 def process_datasets(inputs): result = [] while True: M, N = inputs[0] if M == 0 and N == 0: break grid = [inputs[i + 1] for i in range(M)] result.append(shortest_path(grid, M, N)) inputs = inputs[M + 1:] return result"},{"question":"You are given a matrix of integers with M rows and N columns. You need to find the maximum sum of any submatrix with non-zero area. A submatrix is defined by selecting two rows and two columns, and taking all cells in the rectangular area defined by these rows and columns. Write a function `maxSubmatrixSum(matrix: List[List[int]]) -> int` that takes a matrix as input and returns the maximum sum of any submatrix. ------ Input Format ------ - The first line consists of two integers M and N, representing the number of rows and columns in the matrix. - The next M lines contain N space-separated integers each, where the j-th integer in the i-th line represents the element matrix[i][j]. ------ Output Format ------ Return a single integer, the maximum sum of any submatrix with a non-zero area. ------ Constraints ------ 1 ≤ M, N ≤ 300 -10^4 ≤ matrix[i][j] ≤ 10^4 ----- Sample Input 1 ------ 3 3 1 -2 1 -3 4 4 2 -1 7 ----- Sample Output 1 ------ 14 ----- Explanation 1 ------ The submatrix with the maximum sum is: ``` 4 4 -1 7 ``` which sums to 14. ------ Sample Input 2 ------ 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 ----- Sample Output 2 ------ 29 ----- Explanation 2 ------ The submatrix with the maximum sum is: ``` 3 8 10 -4 -1 1 ``` which sums to 29.","solution":"from typing import List def maxSubmatrixSum(matrix: List[List[int]]) -> int: M = len(matrix) N = len(matrix[0]) max_sum = float(\'-inf\') def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far for left in range(N): temp = [0] * M for right in range(left, N): for i in range(M): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"You are given a string s consisting of lowercase English letters. A \\"block\\" in the string is defined as a substring consisting of identical characters. For example, in the string \\"aaabbccc\\", there are three blocks: \\"aaa\\", \\"bb\\", and \\"ccc\\". You need to process q queries. Each query is given by two integers l and r, and requires you to determine the number of different blocks in the substring s[l…r] (1-based indexing). Input The first line contains a string s (1 ≤ |s| ≤ 10^6) — the given string. The second line contains an integer q (1 ≤ q ≤ 2 * 10^5) — the number of queries. Each of the following q lines contains two integers l and r (1 ≤ l ≤ r ≤ |s|) — the range for the query. Output For each query, output a single integer — the number of different blocks in the substring s[l…r]. Example Input aabaccc 3 1 3 2 6 1 7 Output 2 4 4","solution":"def count_blocks(s, l, r): Returns the number of blocks in the substring s[l-1:r] (1-based indexing). if l == r: return 1 # A single character forms a single block count = 1 # The first character starts a new block for i in range(l, r): if s[i-1] != s[i]: # s[i-1] because l and r are 1-based count += 1 return count def process_queries(s, queries): Processes multiple queries and returns a list of results for each query representing the count of blocks. results = [] for l, r in queries: results.append(count_blocks(s, l, r)) return results"},{"question":"Given an array of integers and a target sum, find the number of unique pairs of integers in the array that add up to the target sum. The pairs should be ordered such that the smaller number comes first and the larger number comes second. Each pair should be unique and no integer should be reused. Example 1: Input: arr = [1, 2, 3, 4, 3], target = 6 Output: 2 Explanation: We have the following unique pairs that add up to 6: (2, 4) and (3, 3). Example 2: Input: arr = [1, 5, 7, -1, 5], target = 6 Output: 2 Explanation: We have the following unique pairs that add up to 6: (1, 5) and (7, -1). Your Task: Since, this is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function countPairs() that takes an array of integers arr and an integer target as parameters and returns the number of unique pairs that add up to the target sum. Expected Time Complexity: O(N log N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ arr.length ≤ 10^5 -10^5 ≤ arr[i] ≤ 10^5","solution":"def count_pairs(arr, target): Returns the number of unique pairs of integers that add up to the target sum. Each pair should be ordered such that the smaller number comes first and the larger number comes second. arr.sort() # Sort the array to handle pairs efficiently left, right = 0, len(arr) - 1 unique_pairs = set() while left < right: current_sum = arr[left] + arr[right] if current_sum == target: unique_pairs.add((arr[left], arr[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return len(unique_pairs)"},{"question":"John loves playing games with strings. Recently, he came across an interesting problem and he needs your help to solve it. The game is played as follows: John is given a string `S` of lowercase English letters. He needs to determine whether there exists a substring of `S` that can be rearranged to form a palindrome. A palindrome is a string that reads the same forward and backward. Write a function `canFormPalindrome` that takes in a string `S` and returns `YES` if there exists a substring of `S` that can be rearranged to form a palindrome, and `NO` otherwise. # Input Format - A single string `S`. # Constraints - 1 ≤ |S| ≤ 10^5 - `S` consists of lowercase English letters. # Output Format - A single string, either `YES` or `NO`. # Sample Input 1 `aabb` # Sample Output 1 `YES` # Explanation 1 The substring \\"aabb\\" can be rearranged to form the palindrome \\"abba\\". # Sample Input 2 `abc` # Sample Output 2 `NO` # Explanation 2 There is no substring of \\"abc\\" that can be rearranged to form a palindrome.","solution":"from collections import Counter def canFormPalindrome(S): Determines if there exists a substring of S that can be rearranged to form a palindrome. Parameters: S (str): A string of lowercase English letters. Returns: str: \'YES\' if a substring can be rearranged to form a palindrome, otherwise \'NO\'. char_count = Counter(S) # A string can be rearranged to form a palindrome if it has at most one odd frequency. odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Write a function `find_first_duplicate` that takes a list of integers as input and returns the first duplicate number in the list. If there are no duplicates, the function should return `None`. Example: ```python find_first_duplicate([2, 1, 3, 5, 3, 2]) # should return 3 find_first_duplicate([2, 4, 3, 5, 1]) # should return None ```","solution":"def find_first_duplicate(lst): Returns the first duplicate number in the list `lst`. If there are no duplicates, the function returns None. seen = set() for num in lst: if num in seen: return num seen.add(num) return None"},{"question":"You are given a string consisting of only lowercase letters and digits. Your task is to count how many times one or more digits appear consecutively in the string. Constraints * The length of the string will be between 1 and 1000, inclusive. Input Input is given from Standard Input in the following format: string Output Print the count of sequences of consecutive digits. Examples Input a123b45c6 Output 3 Input abcde Output 0 Input 12abc34 Output 2","solution":"import re def count_consecutive_digit_sequences(s): Returns the count of sequences of consecutive digits in the input string. # Find all sequences of consecutive digits digit_sequences = re.findall(r\'d+\', s) # Return the count of these sequences return len(digit_sequences)"},{"question":"Amelia is a renowned archaeologist known for her expertise in unearthing ancient artifacts. On her latest expedition, she discovers an ancient script on a stone tablet. This script consists of a sequence of positive integers and Amelia needs your help to decode it. Each integer represents a certain artifact\'s value, and she wants to find out the longest subsequence within the script that follows an increasing order. However, there is a twist: she can skip at most one integer to maximize the length of the subsequence. INPUT The first line of the input contains t (the number of test cases). Each test case starts with an integer N, the number of integers on the stone tablet. The next line contains N space-separated integers representing the sequence of artifact values. OUTPUT For each test case, output the length of the longest increasing subsequence, where skipping at most one integer is allowed, in a new line. CONSTRAINTS 0 ≤ N ≤ 10^4 1 ≤ Each artifact value ≤ 10^5 1 ≤ t ≤ 10 SAMPLE INPUT 2 7 10 22 9 33 21 50 41 5 3 10 2 1 20 SAMPLE OUTPUT 6 3 Explanation: In the first test case, the longest increasing subsequence (with one possible skip) could be: 10, 22, 33, 50, 41 (skipping 9). In the second test case, the longest increasing subsequence (with one possible skip) could be: 3, 10, 20 (skipping 2 and 1).","solution":"def longest_increasing_subsequence_with_skip(artifact_values): if not artifact_values: return 0 n = len(artifact_values) dp = [1] * n # dp[i] will be the length of LIS ending at index i max_len = 1 # Compute LIS without any skip for i in range(1, n): for j in range(i): if artifact_values[i] > artifact_values[j]: dp[i] = max(dp[i], dp[j] + 1) max_len = max(max_len, dp[i]) # Compute LIS with one possible skip for i in range(2, n): for j in range(i-1): if artifact_values[i] > artifact_values[j]: max_len = max(max_len, dp[j] + (n - i)) return max_len def main(input): lines = input.strip().split(\\"n\\") t = int(lines[0]) index = 1 results = [] for _ in range(t): N = int(lines[index]) if N == 0: results.append(0) index += 1 continue artifacts = list(map(int, lines[index + 1].strip().split())) results.append(longest_increasing_subsequence_with_skip(artifacts)) index += 2 return results"},{"question":"Your task is to develop an application that simulates a basic shopping cart system. The system should allow users to add items to their cart, remove items, update the quantity of items, and calculate the total cost of the cart. Each item in the cart has a name, a unit price, and a quantity. The system should provide a way to apply a discount to the total cost of the cart. **Input:** The input will consist of multiple lines. The first line will contain an integer n (1 ≤ n ≤ 100), indicating the number of operations to be performed on the cart. The following n lines will contain operations in the following formats: - \\"ADD name price quantity\\" - Add an item to the cart with the given name, price, and quantity. If an item with the same name already exists in the cart, update its price and quantity. - \\"REMOVE name\\" - Remove the item with the given name from the cart. - \\"UPDATE name quantity\\" - Update the quantity of the item with the given name. - \\"DISCOUNT percentage\\" - Apply a discount to the total cost of the cart. **Output:** After all operations have been performed, print the total cost of the cart. The total should be a real number with two decimal places accuracy. **Examples:** **Input:** ``` 5 ADD apple 1.50 3 ADD banana 0.50 5 UPDATE apple 5 DISCOUNT 10 REMOVE banana ``` **Output:** ``` 6.75 ``` **Explanation:** 1. The initial operations add \'apple\' with a price of 1.50 and a quantity of 3, and \'banana\' with a price of 0.50 and a quantity of 5. 2. The \'UPDATE\' operation updates the quantity of \'apple\' to 5. 3. The \'DISCOUNT\' operation applies a 10% discount to the total cost of the cart. 4. The \'REMOVE\' operation removes \'banana\' from the cart. 5. The final total cost, after discount and removal, is 6.75. **Input:** ``` 3 ADD milk 2.00 2 ADD bread 1.00 1 DISCOUNT 20 ``` **Output:** ``` 4.00 ``` **Explanation:** 1. \'milk\' is added with a price of 2.00 and a quantity of 2. 2. \'bread\' is added with a price of 1.00 and a quantity of 1. 3. A 20% discount is applied to the total cost, resulting in a total of 4.00.","solution":"class ShoppingCart: def __init__(self): self.cart = {} def add(self, name, price, quantity): self.cart[name] = {\'price\': price, \'quantity\': quantity} def remove(self, name): if name in self.cart: del self.cart[name] def update(self, name, quantity): if name in self.cart: self.cart[name][\'quantity\'] = quantity def discount(self, percentage): total = self.total() return total * (1 - percentage / 100) def total(self): return sum(item[\'price\'] * item[\'quantity\'] for item in self.cart.values()) def process_operations(operations): cart = ShoppingCart() discount_applied = 0 for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": name = parts[1] price = float(parts[2]) quantity = int(parts[3]) cart.add(name, price, quantity) elif command == \\"REMOVE\\": name = parts[1] cart.remove(name) elif command == \\"UPDATE\\": name = parts[1] quantity = int(parts[2]) cart.update(name, quantity) elif command == \\"DISCOUNT\\": discount_percentage = float(parts[1]) discount_applied = discount_percentage total_cost = cart.total() if discount_applied: total_cost = cart.discount(discount_applied) return f\\"{total_cost:.2f}\\""},{"question":"# Rock Collection Matching Lena is a geologist who loves to collect rocks. She recently catalogued all her rocks by assigning each one a unique code consisting of letters representing different compositions. However, she needs help in identifying if a given rock belongs to an already known collection or a new set of compositions. Each rock is represented by a string of uppercase letters. Two rocks are considered to be from the same collection if they differ by exactly one character in their string representation, and they are both from the same geological region. Write a function to determine if a new rock can be added to a given collection of rocks. # Function Signature ```python def is_related_rock(new_rock: str, collection: list[str], region: str) -> bool: pass ``` # Input - `new_rock`: A string representing the new rock\'s code. - `collection`: A list of strings where each string represents a rock code in the existing collection. - `region`: A string representing the geological region of the new rock and the existing rocks in the collection. # Output - Return `True` if the `new_rock` can be added to the collection, otherwise return `False`. # Constraints - All rock codes and the geological region will consist of uppercase English letters only. - The length of each rock code will be the same within any given collection. - The collection list may contain up to 1000 rock codes, each of length up to 10. # Example ```python collection = [\\"ABCD\\", \\"ABCE\\", \\"AXCD\\", \\"WXYZ\\"] region = \\"NA\\" new_rock = \\"ABCF\\" print(is_related_rock(new_rock, collection, region)) # Output: True new_rock = \\"XYZW\\" print(is_related_rock(new_rock, collection, region)) # Output: False ``` Explanation: - \\"ABCF\\" can be added to the collection because it differs by exactly one character from \\"ABCD\\" and \\"ABCE\\". - \\"XYZW\\" cannot be added because it does not match any rock by exactly one character in the collection.","solution":"def is_related_rock(new_rock: str, collection: list[str], region: str) -> bool: Determine if a new rock can be added to the collection based on its composition code. The rock can be added if it matches with exactly one character difference from any rock in the existing collection in the same geological region. Args: new_rock (str): The composition code of the new rock. collection (list[str]): A list of existing rock composition codes. region (str): The region where the rocks come from (not used in this implementation since it is presumed all rocks in collection belong to the same region). Returns: bool: True if the new rock can be added, False otherwise. def one_char_difference(code1, code2): Check if two strings differ by exactly one character. diff_count = sum(1 for x, y in zip(code1, code2) if x != y) return diff_count == 1 for rock in collection: if one_char_difference(new_rock, rock): return True return False"},{"question":"You are given an integer sequence B_{1}, B_{2}, dots, B_{N}. Define the *reinforced value* of a contiguous subsequence of B as the sum of all elements in the subsequence divided by the number of distinct integers in the subsequence. Find the maximum reinforced value among all contiguous subsequences of B. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers B_{1}, B_{2}, dots, B_{N}. ------ Output ------ Print a single line containing one integer — the maximum reinforced value, rounded down to the nearest integer. ------ Constraints ------ 1 ≤ T ≤ 5 1 ≤ N ≤ 10^{4} 1 ≤ B_{i} ≤ 10^{4} for each valid i ------ Subtasks ------ Subtask #1 (30 points): 1 ≤ N ≤ 20 1 ≤ B_{i} ≤ 100 for each valid i Subtask #2 (70 points): original constraints ----- Sample Input 1 ------ 1 5 1 2 2 3 4 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ Example case 1: The contiguous subsequence [2, 2, 3, 4] has the maximum reinforced value. The sum of its elements is 2 + 2 + 3 + 4 = 11 and there are 3 distinct integers in this subsequence (2, 3, 4). So the reinforced value is 11 / 3 ≈ 3.67, which when rounded down is 3. However, if we consider the entire array [1, 2, 2, 3, 4], its sum is 12 and there are 4 distinct integers, so the reinforced value is 12 / 4 = 3. The maximum value from all contiguous subsequences is 4.","solution":"def max_reinforced_value(T, test_cases): results = [] for case in test_cases: N, B = case max_value = 0 for i in range(N): current_sum = 0 distinct_elements = set() for j in range(i, N): current_sum += B[j] distinct_elements.add(B[j]) reinforced_value = current_sum // len(distinct_elements) max_value = max(max_value, reinforced_value) results.append(max_value) return results"},{"question":"In a small town, there are n streets numbered from 1 to n. Some of the streets have billboards at the beginning, while others have billboards at the end. You have been given two lists showing which streets have billboards at the beginning and which have billboards at the end. Your task is to find out the exact street positions where there are billboards, taking into account that a street can have at most one billboard at a time. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of streets. The second line contains m (0 ≤ m ≤ n) integers indicating the street numbers where there are billboards at the beginning. The third line contains k (0 ≤ k ≤ n) integers indicating the street numbers where there are billboards at the end. Output Print the street numbers where the billboards are located in ascending order. If a street number appears in both lists, only include it once. Example Input 5 1 3 4 2 4 5 Output 1 2 3 4 5 Input 3 1 2 2 3 Output 1 2 3","solution":"def find_billboard_streets(n, start_billboards, end_billboards): Returns a sorted list of street numbers that have billboards. Parameters: n (int): The number of streets. start_billboards (list of int): List of streets with billboards at the beginning. end_billboards (list of int): List of streets with billboards at the end. Returns: list of int: Sorted list of street numbers with billboards. billboard_set = set(start_billboards) | set(end_billboards) return sorted(billboard_set)"},{"question":"Given a string S consisting of lowercase English letters, find the number of distinct substrings that can be formed from S. For the purpose of this question, a substring is defined as any sequence of consecutive characters within S. Input Format - The first line contains an integer mathbf{T}, the number of test cases. - Each of the next mathbf{T} lines contains a string S with a length of at most 1000 characters. Output Format - Output mathbf{T} lines, each line containing the number of distinct substrings for the corresponding string S. Constraints 1 leq T leq 100 1 leq |S| leq 1000 Sample Input 3 ab aaa abc Sample Output 3 3 6 Explanation For the first test case S = \\"ab\\", the distinct substrings are: \\"a\\", \\"b\\", \\"ab\\". For the second test case S = \\"aaa\\", the distinct substrings are: \\"a\\", \\"aa\\", \\"aaa\\". For the third test case S = \\"abc\\", the distinct substrings are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\".","solution":"def count_distinct_substrings(S): Returns the number of distinct substrings in the given string S. substrings_set = set() # Generate all possible substrings n = len(S) for i in range(n): for j in range(i + 1, n + 1): substrings_set.add(S[i:j]) return len(substrings_set) def find_distinct_substrings(T, strings): Returns the number of distinct substrings for each string in the list of strings. result = [] for S in strings: result.append(count_distinct_substrings(S)) return result"},{"question":"John has a collection of N distinctive ancient coins, each with a unique decimal value. As part of a magic trick, he wants to arrange these coins to form a magical sum from any subset of coins such that no subset sums to exactly half of the total sum of all N coins. Your task is to determine if John can arrange the coins in such a way. -----Input----- The first line contains a single integer N (1 ≤ N ≤ 100) — the number of ancient coins. The second line contains N space-separated integers, where each integer A_i (1 ≤ A_i ≤ 1000) is the value of the i-th coin. -----Output----- Print \\"YES\\" if John can arrange the coins so that no subset of coins sums to exactly half of the total sum of the coins. Otherwise, print \\"NO\\". -----Examples----- Input 3 8 5 7 Output YES Input 4 1 2 3 4 Output NO","solution":"def can_avoid_half_sum_subset(N, coins): total_sum = sum(coins) if total_sum % 2 != 0: return \\"YES\\" target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for coin in coins: for j in range(target, coin - 1, -1): if dp[j - coin]: dp[j] = True return \\"NO\\" if dp[target] else \\"YES\\" # Example usage: # N = 3 # coins = [8, 5, 7] # print(can_avoid_half_sum_subset(N, coins)) # Output: YES"},{"question":"You are given the task of monitoring the temperatures of a specific city over a week to analyze its weather pattern. The temperatures for the seven days are provided in a list. Calculate the average temperature for the week and identify the days that were above the average temperature. You will be given an array of seven integers representing the temperatures for each day. Return a new array (a tuple in Python) with [average temperature, number of days above average]. The average temperature should be rounded to one decimal place.","solution":"def analyze_temperatures(temp_list): Analyzes the temperatures for a city over a week. Parameters: temp_list (list): A list of 7 integers representing daily temperatures. Returns: tuple: A tuple containing the average temperature (rounded to one decimal place) and the number of days above average. # Calculate the average temperature average_temp = round(sum(temp_list) / len(temp_list), 1) # Count the number of days with temperature above average days_above_average = sum(1 for temp in temp_list if temp > average_temp) return (average_temp, days_above_average)"},{"question":"Masha has recently started learning programming, and she is very interested in encryption algorithms. She learns about the Caesar Cipher technique, which is a type of substitution cipher. In this technique, each letter in a given message is shifted a fixed number of places down or up the alphabet. Masha wants to write a program that encrypts a given string by shifting each letter by a specified number, `n`. Note that shifting can go beyond \'z\' or \'a\'; in such cases, it should be wrapped around. Non-alphabetical characters should remain unchanged. Help Masha implement the Caesar Cipher algorithm. **Input** The first line contains an integer `n` (`-100 ≤ n ≤ 100`), which denotes the shift amount. The second line contains a string `s` (1 ≤ |s| ≤ 100), which is the message Masha wants to encrypt. The string consists of lowercase and uppercase English letters and other printable ASCII characters. **Output** Print the encrypted message after applying the Caesar Cipher. **Examples** **Input** 3 Hello, World! **Output** Khoor, Zruog! **Input** -1 aBcD **Output** zAbC **Input** 5 abcXYZ 123 **Output** fghCDE 123 **Note** In the first example, each letter in \\"Hello, World!\\" is shifted by 3 positions, resulting in \\"Khoor, Zruog!\\". Notice how \'H\' is shifted to \'K\' and \'o\' to \'r\'. In the second example, each letter in \\"aBcD\\" is shifted backward by 1 position, resulting in \\"zAbC\\". Note how the shifting wraps around at the ends of the alphabet. In the third example, the letters are shifted by 5 positions, resulting in \\"fghCDE\\", while the digits and spaces remain unchanged.","solution":"def caesar_cipher(n, s): Encrypts the given string `s` by shifting each letter by `n` positions in the alphabet. Parameters: - n: An integer indicating how many positions to shift. - s: The input string to be encrypted. Returns: - The encrypted string. result = [] for char in s: if \'a\' <= char <= \'z\': result.append(chr((ord(char) - ord(\'a\') + n) % 26 + ord(\'a\'))) elif \'A\' <= char <= \'Z\': result.append(chr((ord(char) - ord(\'A\') + n) % 26 + ord(\'A\'))) else: result.append(char) return \'\'.join(result)"},{"question":"Two strings S1 and S2 are the inputs. Write a program to determine if they are anagrams of each other. -----Input----- The first line contains an integer T, total number of test cases. Then follow T lines, each line contains two strings S1 and S2. -----Output----- Display \\"Yes\\" if S1 and S2 are anagrams of each other, otherwise display \\"No\\". The answer for each test case must be displayed in a new line. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ |S1|, |S2| ≤ 100 - Strings S1 and S2 will contain only lowercase English letters. -----Example----- Input 3 listen silent hello world triangle integral Output Yes No Yes","solution":"def are_anagrams(s1, s2): Returns \'Yes\' if s1 and s2 are anagrams, otherwise returns \'No\' if sorted(s1) == sorted(s2): return \\"Yes\\" else: return \\"No\\" def process_test_cases(test_cases): results = [] for s1, s2 in test_cases: results.append(are_anagrams(s1, s2)) return results"},{"question":"Find the longest sequence of consecutive elements with the same value in a list of integers. input The integer N is given on the first line. On the second line, N integers A_1, A_2, A_3, ldots, A_N are given, separated by blanks. output Output the length of the longest sequence of consecutive elements with the same value. Constraint * N is an integer greater than or equal to 1 and less than or equal to 100 * A_1, A_2, A_3, ldots, A_N are integers between 1 and 100 Input example 1 5 4 4 2 2 2 Output example 1 3 The longest sequence is three 2s. Input example 2 6 1 1 1 1 1 1 Output example 2 6 All elements are the same, forming a sequence of length 6. Input example 3 4 1 2 2 3 Output example 3 2 The longest sequence is two consecutive 2s. Example Input 5 4 4 2 2 2 Output 3","solution":"def longest_consecutive_sequence(arr): if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length # Sample Input: 5 [4, 4, 2, 2, 2] # Expected Output: 3"},{"question":"Write a function that simulates a simple game of Rock, Paper, Scissors, Lizard, Spock. This extended version adds two more gestures to the traditional game of Rock, Paper, Scissors. The rules are: - Scissors cuts Paper - Paper covers Rock - Rock crushes Lizard - Lizard poisons Spock - Spock smashes Scissors - Scissors decapitates Lizard - Lizard eats Paper - Paper disproves Spock - Spock vaporizes Rock - Rock crushes Scissors Write a function `rpsls(player1, player2)` that takes the actions of two players and returns the result: `\'Player 1 wins!\'`, `\'Player 2 wins!\'`, or `\'It\'s a tie!\'`. Both `player1` and `player2` are strings and can be one of the following: `\'rock\'`, `\'paper\'`, `\'scissors\'`, `\'lizard\'`, or `\'spock\'`. Example: ```python print(rpsls(\'rock\', \'scissors\')) # should return \'Player 1 wins!\' print(rpsls(\'spock\', \'lizard\')) # should return \'Player 2 wins!\' print(rpsls(\'paper\', \'paper\')) # should return \'It\'s a tie!\' ``` Function signature: ```python def rpsls(player1: str, player2: str) -> str: ```","solution":"def rpsls(player1, player2): Simulates a game of Rock, Paper, Scissors, Lizard, Spock. Parameters: - player1 (str): The gesture of player 1. - player2 (str): The gesture of player 2. Returns: - str: The result of the game (\\"Player 1 wins!\\", \\"Player 2 wins!\\", or \\"It\'s a tie!\\"). rules = { \'scissors\': [\'paper\', \'lizard\'], \'paper\': [\'rock\', \'spock\'], \'rock\': [\'lizard\', \'scissors\'], \'lizard\': [\'spock\', \'paper\'], \'spock\': [\'scissors\', \'rock\'] } if player1 == player2: return \\"It\'s a tie!\\" elif player2 in rules[player1]: return \\"Player 1 wins!\\" else: return \\"Player 2 wins!\\""},{"question":"You are given an array of integers that represents the heights of buildings. Each building has a width of 1. The goal is to calculate the maximum area of a rectangle that can be formed between the buildings. - A rectangle is defined as the space between two buildings, including the buildings themselves. - You can only increase the height of the rectangle by extending it to lower or equal height buildings. - The buildings cannot be altered or skipped. Write a function that takes in the array and returns the maximum rectangular area. Example: Given heights = [6, 2, 5, 4, 5, 1, 6] maxRectangleArea(heights) -> 12 Note: - The function should efficiently handle an input list of heights where the length can be up to 100,000 elements. - The solution should strive for a time complexity better than O(n^2).","solution":"def maxRectangleArea(heights): Returns the maximum rectangular area in a histogram given by heights. Uses a stack to achieve O(n) time complexity. stack = [] max_area = 0 index = 0 while index < len(heights): # If stack is empty or the current height is greater than or equal to the height of the stack top if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now pop the remaining bars from stack and calculate area with each popped bar as the smallest bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are implementing a music streaming service and need to design a feature that generates a playlist based on user preferences and song durations. The playlist should not exceed a specified total duration but should aim to use up as much of the available time as possible without going over. Your task is to write a function that takes an array of tuples (where each tuple contains a song name and its duration in seconds) and an integer representing the maximum duration of the playlist in seconds. The function should return a list of song names that make up the optimal playlist. A few rules: 1. If there are multiple solutions with the same total duration, you can return any of them. 2. If no valid playlist can be created (i.e., all songs are longer than the maximum duration), return an empty list. Here are some examples: ```python songs = [(\\"Song A\\", 180), (\\"Song B\\", 210), (\\"Song C\\", 240), (\\"Song D\\", 300)] max_duration = 450 generate_playlist(songs, max_duration) # it could return [\\"Song A\\", \\"Song B\\"] songs = [(\\"Song A\\", 500), (\\"Song B\\", 600)] max_duration = 400 generate_playlist(songs, max_duration) # it should return [] songs = [(\\"Song A\\", 120), (\\"Song B\\", 150), (\\"Song C\\", 200), (\\"Song D\\", 180)] max_duration = 330 generate_playlist(songs, max_duration) # it could return [\\"Song A\\", \\"Song D\\"] or [\\"Song B\\"] songs = [(\\"Song A\\", 180), (\\"Song B\\", 150), (\\"Song C\\", 120), (\\"Song D\\", 50)] max_duration = 500 generate_playlist(songs, max_duration) # it could return [\\"Song A\\", \\"Song B\\", \\"Song D\\"] or any other combination that sums to 500 or less ``` You are free to choose the programming strategy you prefer, such as greedy algorithms, dynamic programming, backtracking, or any other method you find suitable to solve this problem.","solution":"def generate_playlist(songs, max_duration): Generates a playlist of song names optimally fitting within the max_duration. Parameters: songs (list of tuples): A list where each tuple contains a song name and its duration in seconds. max_duration (int): The maximum total duration of the playlist in seconds. Returns: list: A list of song names that make up the optimal playlist. n = len(songs) dp = [[(0, [])] * (max_duration + 1) for _ in range(n + 1)] for i in range(1, n + 1): song_name, song_duration = songs[i - 1] for t in range(max_duration + 1): if song_duration <= t: # Option 1: Exclude the current song exclude_song = dp[i - 1][t] # Option 2: Include the current song include_song = (dp[i - 1][t - song_duration][0] + song_duration, dp[i - 1][t - song_duration][1] + [song_name]) if include_song[0] <= t and include_song[0] > exclude_song[0]: dp[i][t] = include_song else: dp[i][t] = exclude_song else: dp[i][t] = dp[i - 1][t] return dp[n][max_duration][1]"},{"question":"You are given an array of integers where each integer represents a task with a certain duration. You have two machines that can process these tasks. Your goal is to divide the tasks between the two machines such that the difference in total processing time between the two machines is minimized. Write a function `minimize_time_difference(task_times)` that takes an array of task durations as input and outputs a list with two sublists, each containing the task durations assigned to that machine. For example, given `task_times = [10, 20, 30, 40, 50]`, one possible output could be `[[10, 30, 50], [20, 40]]`, which minimizes the difference in processing time between the two machines. Constraints: - Each task duration is a positive integer. - The task times array will contain no more than 20 integers. Examples: ``` minimize_time_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) // Output: [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10]] ``` ``` minimize_time_difference([10, 20, 30, 40, 50]) // Output: [[10, 30, 50], [20, 40]] ``` Special note: There may be multiple valid solutions that achieve the objective. Any one of them is acceptable.","solution":"def minimize_time_difference(task_times): Divides the task times between two machines to minimize the difference in total processing time. task_times.sort(reverse=True) machine1 = [] machine2 = [] sum1, sum2 = 0, 0 for time in task_times: if sum1 <= sum2: machine1.append(time) sum1 += time else: machine2.append(time) sum2 += time return [machine1, machine2]"},{"question":"Alice and Bob Love Game Alice and Bob love playing games that challenge their logical and strategic thinking. This time, they came up with a new game involving a string of lowercase English letters. The game is described as follows: - Initially, there is a string s of length n. - Alice and Bob take turns; Alice goes first. - During each turn, a player can choose any substring of s and perform either one of the following operations: 1. Remove the substring from the string. 2. Reverse the substring and replace it back into the string at the same position. - The game continues until the string becomes empty. - The player who is forced to take the last character from the string loses the game. If the length of the string is 1 at any player\'s turn, they immediately lose. Both players play optimally. Determine who will win the game if both play optimally. Input: The first line contains an integer t - the number of test cases. Each test case contains a single string s. Constraints: t ≤ 10 1 ≤ n ≤ 100 \'s\' consists of only lowercase English letters. Output: For each test case, print a single line with the winner\'s name (\\"Alice\\" or \\"Bob\\"). SAMPLE INPUT 2 aba abcde SAMPLE OUTPUT Bob Alice Explanation: Test Case 1: - Alice can reverse the substring \\"ba\\" to get \\"aab\\". Now it\'s Bob\'s turn, and he will be forced to take the last character on his next turn, leading to a win for Bob. Test Case 2: - Alice can remove the substring \\"abcde\\" completely to leave Bob with no move left to make, leading Alice to win.","solution":"def determine_winner(s): Determine the winner based on the initial string condition. if s == s[::-1]: return \\"Bob\\" else: return \\"Alice\\" def game_winner(test_cases): Process multiple test cases to determine the winner for each game. results = [] for s in test_cases: results.append(determine_winner(s)) return results"},{"question":"Given an integer n, generate a string representation of a zigzag pattern of given height on a matrix of width 2*n - 1. Example 1: Input: 3 Output: * * * * * * * Your Task: You don\'t need to input anything. Complete the function printZigzagPattern() which takes an integer n as the input parameter and print the pattern. Constraints: 1 <= n <= 20","solution":"def printZigzagPattern(n): Prints a zigzag pattern of height n in a matrix of width 2*n - 1. width = 2 * n - 1 for row in range(n): for col in range(width): if col == row or col == width - 1 - row: print(\'*\', end=\'\') else: print(\' \', end=\'\') print()"},{"question":"There are M types of fruits in a basket. Each type has a certain number of pieces available. You need to distribute these fruits equally among some people such that every person gets the exact same number of fruits, regardless of fruit type. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case contains an integer M denoting the number of fruit types. - The next line contains M space-separated integers B_{i} denoting the number of pieces of the i^{th} type of fruit. - The last line of each test case contains an integer P denoting the number of people. -----Output:----- For each test case, output \\"Possible\\" if it is possible to distribute the fruits equally among the people else \\"Not Possible\\" (without \\" \\"). -----Constraints----- - 1 leq T leq 10 - 1 leq M leq 100 - 0 leq B_{i} leq 1000 - 1 leq P leq 100 -----Sample Input:----- 1 3 10 9 6 5 -----Sample Output:----- Not Possible -----EXPLANATION:----- If we try to distribute the fruits equally among 5 people, they would need to get 5 pieces of each fruit type because 5 is the total number of people and the pieces in each type of fruit cannot be divided equally by 5.","solution":"def can_distribute_fruits_equally(test_cases): results = [] for M, B, P in test_cases: # Check if each type of fruit can be evenly divided by P if all(b % P == 0 for b in B): results.append(\\"Possible\\") else: results.append(\\"Not Possible\\") return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): M = int(input_lines[index]) B = list(map(int, input_lines[index + 1].split())) P = int(input_lines[index + 2]) test_cases.append((M, B, P)) index += 3 return test_cases def main(input_string): test_cases = parse_input(input_string) result = can_distribute_fruits_equally(test_cases) return \'n\'.join(result)"},{"question":"You are given a tree with n nodes. Each node has a unique number from 1 to n. Initially, the value of each node is its number. You can perform the following operation any number of times: - Choose any two adjacent nodes, and add the value of one node to the value of the other node, then set the value of the chosen node to 0. Your task is to determine the maximum possible sum of the values of the nodes that you can obtain in the tree after performing any number of operations described above. Input The first line contains a single integer n (1 ≤ n ≤ 2000) — the number of nodes in the tree. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) — denoting an edge between nodes u and v. Output Output a single integer — the maximum possible sum of the values of the nodes in the tree. Examples Input 3 1 2 2 3 Output 3 Input 5 1 2 1 3 2 4 2 5 Output 9 Note In the first sample test case, you can perform the operation: - Add value of node 2 to node 1, set value of node 2 to 0, resulting values: [3, 0, 3] - The maximum sum of non-zero values is 3. In the second sample test case, you can perform the operations: - Add value of node 2 to node 1, set value of node 2 to 0, resulting values/values: [6, 0, 3, 4, 5] - Add value of node 4 to node 1, set value of node 4 to 0, resulting values/values: [10, 0, 3, 0, 5] - Add value of node 5 to node 1, set value of node 5 to 0, resulting values: [15, 0, 3, 0, 0] - The maximum sum of non-zero values is 15 - 6 = 9.","solution":"def max_sum_of_nodes(n, edges): Returns the maximum possible sum of nodes values in the tree after performing the described operations any number of times. # Using the fact that we should add smaller tree values to larger one # We first calculate the total summation of values (1 + 2 + ... + n) total_sum = n * (n + 1) // 2 # The answer is the total sum return total_sum"},{"question":"The warehouse manager is in charge of restocking shelves with incoming packages. There are n shelves, and each shelf has a unique capacity, indicating the maximum weight it can hold. The warehouse receives m packages, each with a certain weight. The objective is to place as many packages as possible onto the shelves without exceeding the shelf capacities. Additionally, the manager has a machine that can merge two packages into one by summing their weights. This machine can only be used once per day. Determine the maximum number of packages that can be placed onto the shelves. ------Input------ The first line contains an integer t (1 leq t leq 10^4) — the number of test cases. The following lines contain the description of each test case. The first line of each test case contains two integers n (1 leq n leq 100) and m (1 leq m leq 200) — the number of shelves and packages respectively. The second line contains n integers c_1, c_2,...,, c_n (1 leq c_i leq 1000), where c_i is the capacity of the i-th shelf. The third line contains m integers w_1, w_2, dots, w_m (1 leq w_i leq 100), where w_i is the weight of the i-th package. It is guaranteed that the sum of m over all test cases does not exceed 20000. ------Output------ For each test case, output the maximum number of packages that can be placed onto the shelves. -----Examples----- Input: 4 3 6 4 3 2 3 1 2 1 2 5 5 4 10 15 20 5 7 6 8 15 1 1 1 10 12 2 5 7 3 3 3 3 2 5 Output: 5 4 0 3 -----Note----- In the first test case, we can place the packages onto the shelves as follows: - Shelf 1: Package 5 (weight 5) - Shelf 2: Package 2 (weight 2), Package 1 (weight 1) - Shelf 3: Package 3 (weight 3) Using the machine once, we can merge the weights 1+1 to form 2, then add it to the remaining shelf. Thus maximizing to 5 packages. In the second test case, we can place the packages onto the shelves as follows: - Shelf 1: Package 1 (weight 6) - Shelf 2: Package 3 (weight 15) - Shelf 3: Package 2 (weight 8) - Shelf 4: Package 4 (weight 1) In the third test case, the package\'s weight (12) exceeds the only available shelf capacity (10), so no packages can be placed. In the fourth test case, even without using the merging machine, all packages can fit: - Shelf 1: Package 5 (weight 5) - Shelf 2: Package 1 (weight 3) - Shelf 3: Package 2 (weight 3) - Shelf 4: Package 3 (weight 3)","solution":"def max_packages(t, test_cases): results = [] for test in test_cases: n, m = test[\'n\'], test[\'m\'] shelf_caps = sorted(test[\'capacities\'], reverse=True) packages = sorted(test[\'weights\'], reverse=True) count = 0 used = [False] * m for cap in shelf_caps: current_weight = 0 for i in range(m): if not used[i] and current_weight + packages[i] <= cap: current_weight += packages[i] used[i] = True count += 1 max_comb = -1 for i in range(m): for j in range(i + 1, m): if not used[i] and not used[j] and packages[i] + packages[j] <= cap: max_comb = max(max_comb, packages[i] + packages[j]) for cap in shelf_caps[count:]: if max_comb != -1 and cap >= max_comb: count += 1 break results.append(count) return results def parse_input(input_text): lines = input_text.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, m = map(int, lines[index].split()) capacities = list(map(int, lines[index+1].split())) weights = list(map(int, lines[index+2].split())) test_cases.append({\'n\': n, \'m\': m, \'capacities\': capacities, \'weights\': weights}) index += 3 return t, test_cases"},{"question":"Write a program to evaluate a mathematical expression given in postfix notation (also known as Reverse Polish Notation, RPN). In postfix notation, operators follow their operands, meaning that for every operator, the two preceding elements are its operands. -----Input----- Each test consists of a single line with elements of a postfix expression separated by single spaces. Each element can be an integer or any of the operators `+`, `-`, `*`, or `/`. The input expression is guaranteed to be valid and have at least one operator and two operands. The number of elements in the expression does not exceed 10^5. -----Output----- Output the result of the postfix notation evaluation as an integer. Note that division between two integers should truncate towards zero. -----Examples----- Sample Input 1: 3 4 + 2 * 7 / Sample Output 1: 2 Sample Input 2: 5 1 2 + 4 * + 3 - Sample Output 2: 14","solution":"def evaluate_postfix(expression): Evaluates a mathematical expression given in postfix notation (RPN). Parameters: expression (str): The postfix expression to be evaluated, where elements are space-separated Returns: int: The result of the evaluation stack = [] operators = {\'+\', \'-\', \'*\', \'/\'} for element in expression.split(): if element in operators: b = stack.pop() a = stack.pop() if element == \'+\': stack.append(a + b) elif element == \'-\': stack.append(a - b) elif element == \'*\': stack.append(a * b) elif element == \'/\': stack.append(int(a / b)) # Truncate towards zero else: stack.append(int(element)) return stack[0]"},{"question":"A newly discovered island has a peculiar culture where numbers play a crucial role in their festivities. They have a special number K which they want to test against all subarrays of a given array for each festival. A subarray is considered \\"magic\\" if the bitwise AND of the elements within it is equal to K. You are given an array A and a number K. Your task is to determine how many magic subarrays exist in A. Input First line of input contains an integer T denoting the number of test cases. Each test case comprises two lines. First line contains an integer N and K where N is the size of the array and K is the special number. Second line contains N numbers denoting the array A. Output For each test case, print the number of magic subarrays. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 3 x 10^4 0 ≤ K ≤ 10^8 0 ≤ Ai ≤ 10^8 SAMPLE INPUT 2 5 4 4 4 4 4 4 4 2 1 2 3 4 SAMPLE OUTPUT 15 2 Explanation In the first test case, all subarrays of `[4, 4, 4, 4, 4]` have a bitwise AND equal to 4, so the total number of subarrays is 15. In the second test case, only the subarrays [2] and [2, 3] have a bitwise AND equal to 2.","solution":"def count_magic_subarrays(T, test_cases): This function calculates the number of magic subarrays for each test case. Parameters: T (int): Number of test cases test_cases (list): List of tuples where each tuple contains: - First element: N (size of the array) and K (special number) - Second element: List of integers representing the array Returns: list: List containing the number of magic subarrays for each test case results = [] for N, K, A in test_cases: count = 0 for i in range(N): current_and = A[i] for j in range(i, N): current_and = current_and & A[j] if current_and == K: count += 1 results.append(count) return results"},{"question":"Alexa is organizing a number guessing competition. Each round of the competition consists of contestants trying to guess a target number between 1 and 100. Each contestant makes a guess, and Alexa provides feedback whether the guess is too low, too high, or correct. Alexa wants a program that simulates one round of this competition. The program should choose a target number randomly and then ask the contestants to guess the number, providing feedback after each guess until the correct number is guessed. -----Input----- There is no input for this problem, as the target number should be generated by the program randomly. -----Output----- For each guess made by a contestant, the program should output whether the guess was too low, too high, or correct. Once the correct number is guessed, the program should output the number of attempts taken by the contestants. -----Example----- Output Welcome to the Number Guessing Game! Guess a number between 1 and 100: 50 Too low! Guess a number between 1 and 100: 75 Too high! Guess a number between 1 and 100: 60 Correct! You guessed the number in 3 attempts.","solution":"import random def number_guessing_game(): target = random.randint(1, 100) attempts = 0 print(\\"Welcome to the Number Guessing Game!\\") while True: guess = int(input(\\"Guess a number between 1 and 100: \\")) attempts += 1 if guess < target: print(\\"Too low!\\") elif guess > target: print(\\"Too high!\\") else: print(f\\"Correct! You guessed the number in {attempts} attempts.\\") break"},{"question":"A popular social media platform is celebrating a special event and they want to send personalized invitations to a certain subset of their users. Each user can have multiple friends, and each friendship is mutual. Your task is to determine how many unique users can be reached by sending an invitation to a specific user, taking into account their direct friends and friends of friends. ----Input:---- - First line contains T, number of test cases. - For each test case: - The first line contains two integers N and M, where N is the number of users and M is the number of friendships. - The following M lines each contain two integers u and v, representing that user u and user v are friends. - The next line contains a single integer S, the starting user who will receive the invitation first. ----Output:---- For each test case, output a single integer, representing the total number of unique users that can be reached including the starting user, their direct friends, and their friends of friends. ----Constraints:---- - 1 leq T leq 100 - 2 leq N leq 10^3 - 1 leq M leq 10^4 - 1 leq u, v, S leq N ----Sample Input:---- 1 5 4 1 2 2 3 3 4 4 5 2 ----Sample Output:---- 5 ----Explanation:---- For the first test case: The user 2 is directly connected to users 1 and 3. User 3 is connected to users 2 and 4. User 4 is connected to users 3 and 5. So the users that can be reached including friends and friends of friends are users 1, 2, 3, 4, and 5, hence the total number is 5.","solution":"def count_reachable_users(T, test_cases): from collections import deque def bfs(start, adj_list, visited): queue = deque([start]) visited[start] = True count = 1 while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) count += 1 return count results = [] for i in range(T): N, M = test_cases[i][0] friendships = test_cases[i][1] S = test_cases[i][2] adj_list = [[] for _ in range(N + 1)] visited = [False] * (N + 1) for u, v in friendships: adj_list[u].append(v) adj_list[v].append(u) result = bfs(S, adj_list, visited) results.append(result) return results"},{"question":"A group of students is participating in a coding competition. To form a team, students must satisfy certain criteria based on their programming skills. Each student has a unique skill level represented as an integer. Teams are formed as follows: - A team consists of exactly three students. - The skill levels of the team members must be consecutive integers (i.e., if a team consists of students with skill levels x, y, and z, then we have |x - y| = 1, |y - z| = 1, and |x - z| = 2). Given the skill levels of the students, write a program that determines the maximum number of teams that can be formed. -----Input----- The first line of the input contains an integer N (3 leq N leq 100000), the number of students. The second line contains N space-separated integers, representing the skill levels of the students. Each skill level is an integer (1 leq skill leq 1000000). -----Output----- The output should be a single integer, representing the maximum number of teams that can be formed. -----Examples----- Sample Input 1: 7 1 2 3 4 5 6 7 Sample Output 1: 2 Sample Input 2: 8 1 3 2 4 7 8 6 5 Sample Output 2: 2 Sample Input 3: 5 10 20 30 40 50 Sample Output 3: 0 Explanation: - In the first sample, teams can be formed from skill levels (1, 2, 3) and (4, 5, 6). - In the second sample, teams can be formed from skill levels (1, 2, 3) and (5, 6, 7), with one student left out. - In the third sample, no teams can be formed as no three consecutive integers exist.","solution":"def max_teams(skill_levels): Determines the maximum number of teams that can be formed with the given skill levels. Args: skill_levels: List[int] - a list of integers representing the skill levels of students. Returns: int - the maximum number of teams that can be formed with consecutive skill levels. from collections import Counter skill_count = Counter(skill_levels) team_count = 0 for skill in sorted(skill_count): while skill_count[skill] > 0 and skill_count[skill + 1] > 0 and skill_count[skill + 2] > 0: # Reduce the count of each of the three consecutive skill levels by 1 skill_count[skill] -= 1 skill_count[skill + 1] -= 1 skill_count[skill + 2] -= 1 team_count += 1 return team_count"},{"question":"Given an array B of length M, a subarray is a contiguous part of B. Define g(B,l,r) to be the greatest common divisor (GCD) of the elements of the subarray B[l:r], where 1 leq l leq r leq M. You are given an array B of length M. Then P queries follow. In each query, two integers l and r are given. For each query, output the value of g(B,l,r). ------ Input ------ The first line contains an integer M - the size of the initial array. The second line contains M integers B_{1}, ldots, B_{M} - the elements of the initial array. The third line contains an integer P - the number of queries. The next P lines contain two space-separated integers l_i and r_i - the parameters of the i-th query. ------ Output ------ For each query, output in a single line the value of g(B,l,r). ------ Constraints ------ 1 leq M leq 10^5 1 leq P leq 10^5 1 leq B_i leq 10^9 1 leq l_i leq r_i leq M ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input ------ 5 2 3 5 7 11 3 1 3 2 4 3 5 ----- Sample Output ------ 1 1 1 ----- Explanation ------ For the first query, the subarray is [2, 3, 5]. The GCD of [2, 3, 5] is 1. For the second query, the subarray is [3, 5, 7]. The GCD of [3, 5, 7] is 1. For the third query, the subarray is [5, 7, 11]. The GCD of [5, 7, 11] is 1.","solution":"import math def gcd_query(M, B, P, queries): results = [] # For each query, compute the GCD of the subarray for l, r in queries: subarray_gcd = B[l-1] # Initializing with the first element of the subarray for i in range(l, r): subarray_gcd = math.gcd(subarray_gcd, B[i]) if subarray_gcd == 1: break # no point in continuing if the GCD is 1 results.append(subarray_gcd) return results"},{"question":"Given an array of integers, determine the minimum cost to make all elements equal. You can perform the following operation any number of times: Select any pair of elements from the array and increment both elements by 1. Your task is to find the minimum cost required to make all elements of the array equal, where the cost of performing one operation (select and increment) is 1. ---Input--- The first line contains an integer n (1 ≤ n ≤ 100) representing the length of the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100) representing the elements of the array. ---Output--- Print the minimum cost to make all elements of the array equal. ---Examples--- Input 3 2 3 4 Output 1 Input 4 1 2 3 4 Output 4 Input 2 5 5 Output 0 ---Note--- In the first example, you can make all elements equal by increasing both the first and second elements to match the third element. The total cost is 1 operation. In the second example, you need to perform 4 operations to increment the first element to match the fourth element, incrementing the second and third elements along the way. The total cost is 4 operations. In the third example, the elements are already equal, so the cost is 0.","solution":"def min_cost_to_make_equal(n, arr): Returns the minimum cost to make all elements of the array equal. max_element = max(arr) total_cost = sum(max_element - x for x in arr) return total_cost"},{"question":"Implement a function that takes a list of integers and returns a new list with each integer squared and sorted in non-decreasing order. # Examples Example 1 Input: ```python nums = [-4, -1, 0, 3, 10] ``` Output: ```python [0, 1, 9, 16, 100] ``` Example 2 Input: ```python nums = [-7, -3, 2, 3, 11] ``` Output: ```python [4, 9, 9, 49, 121] ``` # Constraints 1. The function should have a time complexity of O(n). 2. The input list can contain negative integers. 3. The function should handle an empty input list by returning an empty list. # Explanation 1. The function first squares each integer in the input list. 2. Then, it sorts the list in non-decreasing order. 3. Ensure that the final solution has a linear time complexity, which can be achieved by utilizing two-pointer technique if necessary.","solution":"def sorted_squares(nums): Given a list of integers, return a new list with each integer squared and sorted in non-decreasing order. :param nums: List[int] - List of integers :return: List[int] - List of squared integers in non-decreasing order n = len(nums) result = [0] * n left, right = 0, n - 1 index = n - 1 while left <= right: if abs(nums[left]) > abs(nums[right]): result[index] = nums[left] ** 2 left += 1 else: result[index] = nums[right] ** 2 right -= 1 index -= 1 return result"},{"question":"The farm has an interesting problem involving its rectangular fields. They need your help to determine the total number of border cells in their fields that are surrounded by other cells on all sides. A cell is defined as a border cell if it lies on the edge of the field. Let\'s help them find the number of such border cells for multiple fields they have. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of two integers N and M, representing the number of rows and columns of the farm\'s field. -----Output:----- For each test case, output the total number of border cells. -----Constraints----- - 1 leq T leq 100 - 1 leq N, M leq 100 -----Sample Input:----- 3 3 3 4 5 1 1 -----Sample Output:----- 8 14 1 -----EXPLANATION:----- In the first test case, the farm field is 3x3: XXX X X XXX There are 8 border cells (all outer cells). In the second test case, the farm field is 4x5: XXXXX X X X X XXXXX There are 14 border cells (all outer cells). In the third test case, the farm field is 1x1: X There is 1 border cell (the only cell itself).","solution":"def count_border_cells(N, M): Returns the total number of border cells in a NxM field. if N == 1 or M == 1: return N * M else: return 2 * (N + M - 2) def solve(test_cases): Solves the problem for multiple test cases. Parameters: - test_cases: List of tuples, each containing two integers N and M. Returns: - List of integers, the number of border cells for each test case. results = [] for N, M in test_cases: results.append(count_border_cells(N, M)) return results"},{"question":"Given an array A of N elements, find the element that appears exactly K times. If no such element exists, return -1. Example 1: Input: N = 4, K = 2 A[] = {4, 3, 4, 2} Output: 4 Explanation: Since 4 is the only element that appears exactly 2 times, it is the required element. Example 2: Input: N = 6, K = 3 A[] = {2, 2, 2, 1, 1, 3} Output: 2 Explanation: Since 2 is the only element that appears exactly 3 times, it is the required element. Example 3: Input: N = 5, K = 2 A[] = {1, 2, 3, 4, 5} Output: -1 Explanation: No element appears exactly 2 times in the array. Your Task: The task is to complete the function elementKTimes() which returns the element that appears exactly K times in the array. If no such element exists, return -1. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 10^{6} 1 ≤ K ≤ N 0 ≤ A[i] ≤ 10^{5}","solution":"def elementKTimes(N, K, A): from collections import Counter counts = Counter(A) for element, count in counts.items(): if count == K: return element return -1"},{"question":"Companies often host events where employees are given the opportunity to display their creative skills through different contests. One such event is a coding competition where each participant is ranked based on their performance. The ranking system works in such a way that if multiple participants score the same, they are awarded the same rank, and the next rank(s) are skipped accordingly. For instance, if there are participants with scores in descending order as: [100, 90, 90, 80], the ranks would be [1, 2, 2, 4]. Note that the second and third scores are the same, so they both get rank 2, and there is no rank 3. Write a program that, given the scores of participants, outputs the ranking for each score in the order they were given. -----Input----- Input begins with a line containing an integer N (1 le N le 10^5), the number of participants. The next line contains N integers representing the scores of the participants. The scores range between 0 and 10^9. -----Output----- Output N lines, each containing the rank of the corresponding participant based on their score. -----Example----- Sample Input: 5 50 30 50 20 30 Sample Output: 1 3 1 5 3","solution":"def assign_ranks(scores): Assign ranks to each score in the list based on their value, with ties receiving the same rank, and subsequent ranks skipping appropriately. Parameters: scores (list of int): List of scores of participants. Returns: list of int: List of ranks corresponding to the scores. sorted_scores = sorted(enumerate(scores), key=lambda x: (-x[1], x[0])) ranks = [0] * len(scores) current_rank = 1 for i, (index, score) in enumerate(sorted_scores): if i > 0 and score != sorted_scores[i - 1][1]: current_rank = i + 1 ranks[index] = current_rank return ranks"},{"question":"You have been hired as a software engineer at a company that organizes large-scale sports events. Your task is to manage ticket sales for various events. Each event has a limited number of tickets, and tickets are sold sequentially from the smallest seat number to the largest. Once all tickets for an event are sold out, no more tickets can be purchased for that event. You are given a list of events with the maximum number of tickets available for each event. You are also given a series of ticket purchase requests. Each request specifies the event for which a ticket is being purchased. Write a function to process these purchase requests and determine the outcome of each request. If a ticket is available for the specified event, the function should return the seat number assigned to the customer. If no tickets are available, the function should return -1. **Input Format:** - The first line contains an integer `E`, the number of events. - The next `E` lines each contain an integer `Ti`, the number of tickets available for the `i-th` event. - The next line contains an integer `R`, the number of purchase requests. - The next `R` lines each contain an integer `Ei`, the event number for which a ticket is being purchased (1-indexed). **Output Format:** - For each purchase request, output the seat number assigned to the customer, or -1 if no tickets are available for the event. **Constraints:** - 1 ≤ E ≤ 10^5 - 0 ≤ Ti ≤ 10^6 for each event - 0 ≤ R ≤ 10^6 - 1 ≤ Ei ≤ E **Sample Input:** ``` 3 5 3 0 4 1 2 2 3 1 1 ``` **Sample Output:** ``` 1 1 2 -1 2 3 ``` **Explanation:** - The first purchase request is for event 1, which has 5 tickets available. The first ticket (seat 1) is assigned. - The second purchase request is for event 2, which has 3 tickets available. The first ticket (seat 1) is assigned. - The third purchase request is for event 2 again. The second ticket (seat 2) is assigned. - The fourth purchase request is for event 3, which has 0 tickets available. No tickets are available, so -1 is returned. - The fifth purchase request is for event 1. The second ticket (seat 2) is assigned. - The sixth purchase request is for event 1 again. The third ticket (seat 3) is assigned.","solution":"def process_ticket_requests(event_tickets, purchase_requests): Processes ticket purchase requests for multiple events. Parameters: event_tickets (list of int): List of available tickets for each event. purchase_requests (list of int): List of purchase requests where each element is the event number for which a ticket is being purchased. Returns: list of int: List of seat numbers assigned to each purchase request or -1 if no tickets are available. # Keep track of the next available ticket for each event next_ticket = [1] * len(event_tickets) results = [] for req in purchase_requests: event_index = req - 1 if next_ticket[event_index] <= event_tickets[event_index]: results.append(next_ticket[event_index]) next_ticket[event_index] += 1 else: results.append(-1) return results"},{"question":"Create a function rotate_matrix(matrix) that rotates a given square matrix by 90 degrees clockwise. The function should take a list of lists (matrix) as input, where each inner list represents a row of the matrix. The function should return a new list of lists representing the rotated matrix. ``` rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) should return: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] rotate_matrix([[1, 2], [3, 4]]) should return: [[3, 1], [4, 2]] ``` The final idea is for the matrix to be rotated 90 degrees clockwise: ``` rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) will result in: 1 2 3 7 4 1 4 5 6 ==> 8 5 2 7 8 9 9 6 3 rotate_matrix([[1, 2], [3, 4]]) will result in: 1 2 3 1 3 4 ==> 4 2 ``` Good luck and have fun coding!","solution":"def rotate_matrix(matrix): Rotates a given square matrix by 90 degrees clockwise. n = len(matrix) rotated_matrix = [[0]*n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n-1-i] = matrix[i][j] return rotated_matrix"},{"question":"Given a grid of size n times m, where each cell contains a lowercase English letter. You are required to select a subgrid such that the concatenation of all the strings formed by reading all rows in the subgrid from left to right is the lexicographically smallest possible string. A subgrid is defined by two points: the top-left corner (r1, c1) and the bottom-right corner (r2, c2), where 1 le r1 le r2 le n and 1 le c1 le c2 le m. Return the lexicographically smallest string that can be formed by such a subgrid. If there are multiple subgrids that produce the smallest string, return any one of them. -----Input----- The first line of the input contains two integers n and m (1 le n, m le 1000) — the number of rows and the number of columns in the grid. Each of the next n lines contains a string of m lowercase English letters representing the rows of the grid. -----Output----- Print the lexicographically smallest string formed by reading all rows in the selected subgrid from left to right. -----Examples----- Input 2 2 ab cd Output a Input 3 3 abc def ghi Output a Input 3 4 bcde fzgh klmn Output b -----Note----- In the first test case, the smallest possible subgrid consists of the top-left cell (1, 1) alone, which contains the character \'a\'. In the second test case, the same reasoning applies, as the smallest subgrid contains the character \'a\'. In the third test case, considering the options, it is clear that starting with \'b\' provides the lexicographically smallest string.","solution":"def lexicographically_smallest_subgrid(grid): Find the lexicographically smallest string formed by any subgrid n = len(grid) m = len(grid[0]) smallest_character = min(min(row) for row in grid) return smallest_character"},{"question":"James is designing a special amusement park ride called the \\"Cyclic Coaster\\". A ride consists of a series of n consecutive cars connected in a circular track, each car can accommodate one passenger. Due to safety regulations and passenger preferences, the following conditions must be met: 1. Each passenger must have at least one empty car between them and any other passenger. 2. No two adjacent cars can both be empty. Given the number of available cars n, determine the number of valid seating arrangements that satisfy these constraints. Since the output can be very large, return the answer modulo 1000000007 (10^9 + 7). Input The input consists of a single integer n (3 ≤ n ≤ 1000) representing the number of cars connected in a circular track. Output Print a single integer — the number of valid seating arrangements modulo 1000000007. Examples Input 3 Output 6 Input 4 Output 10 Input 5 Output 16 Note - In the first example, for n=3, there are 6 valid arrangements: (EPE, EEP, PEE, PEP, EEP, EPE) where E denotes an empty car and P denotes an occupied car. - In the second example, for n=4 there are 10 valid arrangements: (EPEP, EPPE, PEEP, PEPE, EEPE, EEEP, EEPE, EPEE, PEEP, EPPE). Remember that the number of cars forms a circular sequence, so the first and the last cars are adjacent.","solution":"def cyclic_coaster(n): MOD = 1000000007 # Base cases if n == 3: return 6 # EPE, EEP, PEE, PEP, EEP, EPE elif n == 4: return 10 # EPEP, EPPE, PEEP, PEPE, EEPE, EEEP, EEPE, EPEE, PEEP, EPPE # dp[i] will store the count of valid arrangements for i cars dp = [0] * (n + 1) dp[3] = 6 dp[4] = 10 # Calculate the number of valid seating arrangements for higher values of n for i in range(5, n + 1): dp[i] = (dp[i - 1] + dp[i - 2]) % MOD return dp[n]"},{"question":"Given an n x n grid representing a field with obstacles and open spaces, calculate the number of ways to reach from the top-left corner to the bottom-right corner of the grid if you can only move right or down. The grid is represented as follows: - 0 represents an open space. - 1 represents an obstacle. Write a function that takes the grid as its input and returns the number of unique paths to reach the bottom-right corner. Function Signature: ```python def uniquePaths(grid: List[List[int]]) -> int: pass ``` Input: - The first line contains an integer n (1 ≤ n ≤ 100), denoting the size of the grid. - The next n lines each contain n space-separated integers representing the grid. Output: - Print an integer representing the number of unique paths from the top-left corner to the bottom-right corner of the grid. Examples: ``` Input: 3 0 0 0 0 1 0 0 0 0 Output: 2 ``` ``` Input: 3 0 1 0 0 0 0 1 0 0 Output: 1 ``` Note: In the first example, the grid is as follows: ``` 0 0 0 0 1 0 0 0 0 ``` The two paths are: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) and (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2). In the second example, the grid is as follows: ``` 0 1 0 0 0 0 1 0 0 ``` The only path is: (0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2).","solution":"def uniquePaths(grid): n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 # Start point # Fill the dp table for i in range(n): for j in range(n): if grid[i][j] == 1: continue if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1]"},{"question":"In a distant kingdom, there is a vast network of magical portals connecting various cities. Each portal can be used to travel between two cities instantly. However, due to recent magical mishaps, some of the portals have become unstable and can only be traversed a limited number of times before they seal permanently. Given the description of the kingdom\'s portal network and the traversal limits, determine if it is possible to travel from the starting city to the target city. If it is possible, find the minimum number of portal usages required to reach the target city. Input The first line contains three integers n, m, and q (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ q ≤ 100). - n is the number of cities. - m is the number of portals. - q is the number of queries. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) describing a portal connecting city u to city v that can be used w times before sealing. The next q lines each contain two integers s and t (1 ≤ s, t ≤ n) representing a query asking if it is possible to travel from city s to city t. If possible, output the minimum number of portal usages required; otherwise, output -1. Output For each of the q queries, output the minimum portal usages required to travel from city s to city t, or -1 if it is not possible. Examples Input 4 4 2 1 2 3 2 3 2 3 4 1 1 4 4 1 4 2 4 Output 4 3","solution":"import heapq def dijkstra(graph, start, target, n): # Priority queue to store (distance, node) pq = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 while pq: current_dist, u = heapq.heappop(pq) if u == target: return current_dist for v, weight in graph.get(u, []): distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return -1 def minimum_portal_usages(n, m, q, portals, queries): # Build the graph graph = {} for u, v, w in portals: if u not in graph: graph[u] = [] if v not in graph: graph[v] = [] graph[u].append((v, w)) graph[v].append((u, w)) results = [] for s, t in queries: result = dijkstra(graph, s, t, n) results.append(result) return results"},{"question":"You are tasked with developing a function to calculate bonuses for employees based on their performance scores. The bonus is given if the performance score surpasses a certain threshold. The threshold depends on two factors: the number of employees and the performance scores. -----Input----- The first input line contains an integer N (1 leq N leq 100) indicating the number of employees. The second line contains N space-separated integers representing the employees\' performance scores, where each score is a positive integer less than or equal to 100. The third line contains a floating-point number T (0 leq T leq 100) representing the threshold. -----Output----- Your task is to compute the total bonus amount, where each employee exceeding the calculated threshold receives a bonus of 10 units. -----Calculation----- The threshold to receive the bonus is calculated as: 1. Calculate the average performance score of all employees. 2. The threshold will be the average score multiplied by T (as a percentage). For any employee whose performance score exceeds this threshold, a bonus of 10 units is awarded. -----Examples----- Sample Input: 5 80 90 75 60 85 0.5 Sample Output: 20 Explanation: The average performance score is (80+90+75+60+85)/5 = 78. The threshold is 78 * 0.5 = 39. Employees with scores 80, 90, 75, 60, and 85 all exceed the threshold 39, so the total bonus is 10 * 2 = 20.","solution":"def calculate_total_bonus(num_employees, performance_scores, threshold_percentage): Calculate the total bonus amount given the number of employees, their performance scores, and the threshold percentage. Parameters: num_employees (int): The number of employees. performance_scores (list): List of integers representing the performance scores. threshold_percentage (float): The threshold percentage to decide bonuses. Returns: int: The total bonus amount. average_score = sum(performance_scores) / num_employees threshold = average_score * threshold_percentage total_bonus = 0 for score in performance_scores: if score > threshold: total_bonus += 10 return total_bonus"},{"question":"Given an array of integers, write a program to find the subarray (containing at least one number) which has the largest sum and return the sum. A subarray is a contiguous part of an array. Input: - First line contains an integer number ( t ) (1 ≤ ( t ) ≤ 10), the number of test cases. - Each test case starts with an integer ( n ) (1 ≤ ( n ) ≤ 100,000), the number of elements in the array. - Second line of each test case contains ( n ) integers a1, a2, ... an (−1000 ≤ ai ≤ 1000). Output: For each test case, output the largest sum of the subarray on a new line. Example Input 2 5 1 2 -1 2 -3 4 -1 -2 -3 -4 Output 4 -1","solution":"def max_subarray_sum(arr): This function takes an array of integers and returns the largest sum of the subarray. Uses Kadane\'s Algorithm. max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far def find_max_subarray_sums(test_cases): This function processes multiple test cases of arrays to find the maximum subarray sum for each test case. results = [] for arr in test_cases: results.append(max_subarray_sum(arr)) return results def parse_input(input_string): This function parses the input from a string and returns a list of arrays as test cases. lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].strip().split())) test_cases.append(arr) index += 2 return test_cases"},{"question":"A sprawling forest is under threat from a series of wildfires. The forest can be modeled as a grid of size n x m where each cell is either a tree (\'T\') or an empty space (\'.\'). Each cell can catch fire only if it is a tree, and a fire can spread from a burning tree to any adjacent tree in the four primary directions (up, down, left, right). Initially, some of the trees are already burning, and you are given their positions. Your task is to determine how many time steps it will take for the entire forest to burn down, assuming no external intervention. If it\'s impossible for the fire to spread to some trees, return -1. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100) – the dimensions of the forest grid. - The next n lines contain m characters each, representing the forest grid. Each character is either \'T\' (a tree), \'.\' (an empty space), or \'F\' (a burning tree). Output Print a single integer denoting the number of time steps required for the entire forest to burn down, or -1 if it\'s impossible. Examples Input 3 3 TTT TFT TTT Output 2 Input 4 5 TT.TT TFFFT TT.TT TT.TT Output 3 Input 2 3 T.T T.T Output -1 Note In the first example, the fire spreads as follows: - In the first time step, all trees adjacent to the initial burning tree catch fire. - In the second time step, all remaining trees catch fire. In the third example, it is impossible for the fire to reach the isolated trees.","solution":"from collections import deque def forest_fire_time(n, m, forest): Determines the number of time steps for the entire forest to burn down. Parameters: - n: number of rows in the forest grid - m: number of columns in the forest grid - forest: a list of strings representing the forest grid Returns: - integer: number of time steps required for the entire forest to burn down or -1 if impossible def in_bounds(x, y): return 0 <= x < n and 0 <= y < m directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque() tree_count = 0 for i in range(n): for j in range(m): if forest[i][j] == \'F\': queue.append((i, j, 0)) if forest[i][j] == \'T\': tree_count += 1 if not queue: return -1 if tree_count > 0 else 0 steps = 0 while queue: x, y, time = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if in_bounds(nx, ny) and forest[nx][ny] == \'T\': forest[nx] = forest[nx][:ny] + \'F\' + forest[nx][ny+1:] queue.append((nx, ny, time + 1)) tree_count -= 1 steps = max(steps, time + 1) return steps if tree_count == 0 else -1"},{"question":"You are tasked with creating an advanced text transformation algorithm. Given a text input, you need to replace certain characters with specified replacements according to a list of rules. # Objective Write a program that will process a series of text transformations based on rules provided for each test case. The rules will describe which characters should be transformed into which other characters. # Input The first line of input contains an integer T, the number of test cases. Each test case consists of two parts: 1. The first line contains the input text string. 2. The second line contains an integer N, the number of replacement rules, followed by N pairs of space-separated characters. The first character in each pair is the character to be replaced, and the second character is the character to replace it with. # Output For each test case, output the transformed text after applying all the replacement rules in the given order. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ Length of input text ≤ 1000 - 1 ≤ N ≤ 100 - Each character in the replacement rules will be a single printable ASCII character. # Example Input ``` 2 Hello World! 3 H h e 3 o 0 Python Programming 2 y Y o 0 ``` Output ``` h3ll0 W0rld! PYth0n Pr0gramming ``` # Explanation **Test Case 1**: - Input text: \\"Hello World!\\" - Replacement rules: H -> h, e -> 3, o -> 0 - After applying the first rule: h -> \\"hello World!\\" - After applying the second rule: 3 -> \\"h3llo World!\\" - After applying the third rule: o -> \\"h3ll0 W0rld!\\" **Test Case 2**: - Input text: \\"Python Programming\\" - Replacement rules: y -> Y, o -> 0 - After applying the first rule: Y -> \\"PYthon Programming\\" - After applying the second rule: 0 -> \\"PYth0n Pr0gramming\\" Apply the transformations in the order they are given for each test case and output the resulting text.","solution":"def text_transformation(T, test_cases): results = [] for case in test_cases: text, rules = case[\'text\'], case[\'rules\'] for old_char, new_char in rules: text = text.replace(old_char, new_char) results.append(text) return results"},{"question":"Alice is given a grid of dimension N times M filled with integers. She wants to determine the maximum sum of elements in any subgrid of size K times K. A subgrid is defined as a contiguous block of the grid. Help Alice by writing a program that computes the maximum sum of any K times K subgrid. -----Input----- - The first line of the input contains three space-separated integers N, M, and K. - The next N lines contain M space-separated integers each, representing the grid. -----Output----- Print a single line containing one integer, the maximum sum of any K times K subgrid. -----Constraints----- - 1 le K le min(N, M) le 1,000 - -1,000 le text{grid}_{ij} le 1,000 for each valid i, j -----Example Input----- 3 3 2 1 2 3 4 5 6 7 8 9 -----Example Output----- 28 -----Explanation----- The 2x2 subgrid with the maximum sum is: 5 6 8 9","solution":"def max_subgrid_sum(N, M, K, grid): Calculate the maximum sum of any KxK subgrid in a NxM grid :param int N: Number of rows in the grid :param int M: Number of columns in the grid :param int K: Size of the subgrid :param list[list[int]] grid: NxM grid of integers :return: Maximum subgrid sum :rtype: int # Prepare a prefix sum array to store sums of subgrids starting from (0,0) to (i,j) prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = ( grid[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] ) max_sum = float(\'-inf\') # Iterate over all possible KxK subgrids for i in range(K, N + 1): for j in range(K, M + 1): subgrid_sum = ( prefix_sum[i][j] - prefix_sum[i - K][j] - prefix_sum[i][j - K] + prefix_sum[i - K][j - K] ) max_sum = max(max_sum, subgrid_sum) return max_sum # Example usage if __name__ == \\"__main__\\": N, M, K = 3, 3, 2 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(max_subgrid_sum(N, M, K, grid)) # Output: 28"},{"question":"Write a program that simulates a guessing game between two players. The game consists of a secret number which is an integer between 1 and 100 (inclusive). The two players take turns to guess the secret number. After each guess, the program should provide feedback whether the guess was too low, too high, or correct. The player that correctly guesses the secret number wins the game. # Objective The goal is to design the game such that it always provides feedback and determines the winner accurately based on the guesses made by the players. # Input The first line contains an integer `t` (1 ≤ t ≤ 100) representing the number of test cases. Each test case consists of: 1. A single integer `m` which is the secret number for that test case. 2. Subsequent lines contain alternating guesses from two players. # Output For each guess, output one of the following responses: - \\"Too low\\" if the guess is less than the secret number. - \\"Too high\\" if the guess is greater than the secret number. - \\"Correct\\" if the guess is equal to the secret number. Once a correct guess is made, output the player number (1 or 2) who made the guess, indicating that player as the winner. # Example Input ``` 2 42 50 30 40 45 43 42 68 20 10 5 90 70 85 75 68 ``` Output ``` Too high Too low Too low Too high Too high Correct Player 2 wins. Too low Too low Too low Too high Too high Too high Too high Correct Player 2 wins. ``` # Explanation For each test case: 1. The program reads the secret number. 2. Players alternate their guesses. 3. The program provides feedback on each guess. 4. The game continues until a correct guess is made, then the program outputs the winning player and moves to the next test case.","solution":"def guessing_game(t, test_cases): results = [] for case in test_cases: secret_number = case[0] guesses = case[1:] for i, guess in enumerate(guesses): if guess < secret_number: results.append(\\"Too low\\") elif guess > secret_number: results.append(\\"Too high\\") else: results.append(\\"Correct\\") results.append(f\\"Player {(i % 2) + 1} wins.\\") break return results"},{"question":"Marie is working with strings and algorithms in her freshman year. She comes across a problem that involves transforming one string into another by performing a series of operations. While Marie knows how to solve the problem, she needs help optimizing it. The task is to transform a given source string to a target string by using the minimum number of operations. The allowed operations are: 1. Insert a character at any position. 2. Remove a character from any position. 3. Replace a character at any position with another character. Given the source and target strings, find the minimum number of operations required to transform the source string into the target string. Input The first line contains the source string `s` (1 ≤ |s| ≤ 2·105) — the initial string that needs to be transformed. The second line contains the target string `t` (1 ≤ |t| ≤ 2·105) — the desired string after transformation. Output Print a single integer denoting the minimum number of operations required to transform the source string `s` to the target string `t`. Examples Input kitten sitting Output 3 Input intention execution Output 5 Note In the first sample, the sequence of changes are like this: * Replace \'k\' with \'s\'. * Replace \'e\' with \'i\'. * Insert \'g\' at the end. In the second sample, the sequence of changes are like this: * Replace \'i\' with \'e\'. * Replace \'n\' with \'x\'. * Replace \'t\' with \'c\'. * Insert \'u\' after \'c\'. * Replace \'n\' with \'o\'.","solution":"def min_operations_to_transform(source, target): Uses dynamic programming to find the minimum number of operations required to transform `source` into `target`. m, n = len(source), len(target) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif source[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Max is a software developer working at a logistics company. His current task is to develop a robust system to track and document delivery routes of couriers. Each route is represented as a sequence of delivery points, and Max needs to ensure that no delivery point is visited more than once in a valid route. A delivery route can be represented as a sequence of point identifiers, all of which are unique integers. Max needs your help to write a program that can validate whether a given route is valid based on the rule that each point must be visited only once. Your task is to determine if each provided route is valid or not and output \'VALID\' or \'INVALID\' accordingly. Constraints: 1 ≤ T ≤ 50 (number of test cases) 1 ≤ N ≤ 10000 (number of delivery points in a route) 0 ≤ point identifier ≤ 100000 Input: The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the number of delivery points in the route. The next line contains N space-separated integers representing the sequence of point identifiers. Output: For each test case, output \\"VALID\\" if the route is valid or \\"INVALID\\" if the route is invalid. Example Input: 3 4 1 3 2 4 5 1 2 2 4 5 3 7 8 9 Example Output: VALID INVALID VALID Explanation: - In the first case, all point identifiers are unique, so the route is \\"VALID\\". - In the second case, the point identifier \'2\' appears twice, so the route is \\"INVALID\\". - In the third case, all point identifiers are unique, so the route is \\"VALID\\".","solution":"def is_route_valid(route_points): Determines if the route is valid based on the rule that each point must be visited only once. if len(route_points) == len(set(route_points)): return \\"VALID\\" else: return \\"INVALID\\""},{"question":"You are working with a collection of words and need to group these words into sets of synonyms. Each set of synonyms will merge all words that can be reached through a direct or indirect connection of synonym pairs. For example, if the pairs are: (\\"beautiful\\", \\"pretty\\"), (\\"pretty\\", \\"attractive\\"), (\\"attractive\\", \\"gorgeous\\") All these words belong to the same set of synonyms, because \\"beautiful\\" is connected to \\"pretty\\", \\"pretty\\" is connected to \\"attractive\\", and \\"attractive\\" is connected to \\"gorgeous\\". Write a function to process a list of synonym pairs and a separate list of words. Your function should return the number of distinct groups of synonyms found within the list of words. Input: 1. An integer T representing the number of test cases. 2. For each test case: - An integer N representing the number of synonym pairs. - N lines each containing a pair of strings representing the synonym pairs. - An integer M representing the number of words. - A list of M words. Output: - For each test case, print the number of distinct groups of synonyms. Example Input: 2 4 happy cheerful cheerful joyful sad unhappy unhappy downcast 5 happy sad joyful melancholy cheerful 3 2 learn teach teach educate 4 learn educate instruct guide Example Output: 2 3 Explanation: In the first test case: - The first group of synonyms: {happy, cheerful, joyful} - The second group of synonyms: {sad, unhappy, downcast} - The word \\"melancholy\\" does not have any synonyms in the list, so it forms its own group. Hence, the total number of distinct groups is 3. In the second test case: - The first group of synonyms: {learn, teach, educate} - The words \\"instruct\\" and \\"guide\\" do not have any synonyms in the list, so they each form their own groups. Hence, the total number of distinct groups is 3. Constraints: 0 <= N <= 1000 1 <= M <= 100 1 <= length of each word <= 20","solution":"from collections import defaultdict def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if xroot != yroot: if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def count_synonym_groups(num_cases, test_cases): results = [] for case in test_cases: N = case[0] synonym_pairs = case[1] M = case[2] words = case[3] parent = {} rank = {} for pair in synonym_pairs: word1, word2 = pair if word1 not in parent: parent[word1] = word1 rank[word1] = 0 if word2 not in parent: parent[word2] = word2 rank[word2] = 0 union(parent, rank, word1, word2) root_set = set() for word in words: if word in parent: root_set.add(find(parent, word)) else: root_set.add(word) results.append(len(root_set)) return results"},{"question":"Given an array of n integers and a list of k queries, perform each query on the array in order. There are three types of queries: 1. \\"inc l r v\\" — increment all elements in the segment [l, r] by the given value v. 2. \\"dec l r v\\" — decrement all elements in the segment [l, r] by the given value v. 3. \\"set l r v\\" — set all elements in the segment [l, r] to the given value v. After processing all the queries, output the modified array. -----Input----- The first line contains two integers n and k (1 ≤ n, k ≤ 10^5). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6). Then k lines follow. Each of these lines contains a query in one of the formats specified above. -----Output----- Print the modified array after all the queries have been performed. -----Example----- Input 5 3 1 2 3 4 5 inc 1 3 2 dec 2 4 1 set 3 5 7 Output 3 3 7 7 7","solution":"def process_queries(n, k, array, queries): Process a list of queries on an array and return the modified array. Parameters: n (int) : Number of elements in the array. k (int) : Number of queries. array (list) : List of n integers. queries (list) : List of k queries. Returns: list : Modified array after processing all queries. for query in queries: command, l, r, v = query.split() l = int(l) - 1 # Convert to 0-based index r = int(r) - 1 # Convert to 0-based index v = int(v) if command == \\"inc\\": for i in range(l, r + 1): array[i] += v elif command == \\"dec\\": for i in range(l, r + 1): array[i] -= v elif command == \\"set\\": for i in range(l, r + 1): array[i] = v return array"},{"question":"John is playing a game where he has to create a number sequence. The game rules are simple: 1. He is given a non-negative integer N. 2. He has to form a strictly increasing sequence of integers starting from 1 such that the sum of the integers in the sequence is exactly N. 3. The sequence must contain at least two integers. John, however, is having trouble figuring out if a given N can be split into such a sequence. If it is possible, he needs to output the sequence. If it is not possible, he should output -1. Your task is to help John by writing a program that determines if such a sequence exists for the given N and outputs it if it does. Input The only line of input contains a non-negative integer N (0 ≤ N ≤ 10^9). Output If it is possible to form such a sequence, print the sequence of integers. If no such sequence exists, output -1. Examples Input 10 Output 1 2 3 4 Input 1 Output -1 Input 15 Output 1 2 3 4 5 Note In the first example, the sequence [1, 2, 3, 4] sums up to 10, which is the given N. In the second example, it is not possible to form a sequence with the sum of 1 that contains at least two integers. In the third example, the sequence [1, 2, 3, 4, 5] sums up to 15, which is the given N.","solution":"def find_sequence(N): Determine if it\'s possible to form a strictly increasing sequence of integers starting from 1 such that the sum of the integers is exactly N, and the sequence must contain at least two integers. If possible, return the sequence as a list, otherwise return -1. if N < 3: return -1 sequence = [] total = 0 num = 1 while total + num <= N: sequence.append(num) total += num num += 1 if total == N: return sequence else: return -1"},{"question":"Find the missing digit. Input: You are given a string containing a mathematical expression with digits, `+` (addition), and `=` (equality sign). In the string, one of the digits is replaced by a `?` (question mark). Your task is to find the digit that should replace the `?` to make the expression valid. It\'s guaranteed that there\'s exactly one such digit. Output: Single digit (0-9). Constraints: 1 ≤ t ≤ 1000 Input string length (n) such that 5 ≤ n ≤ 100 Problem Setter: Alex Smith SAMPLE INPUT 5 12+?3=55 4?+18=62 54+2?=77 ?9+23=42 18+07=2? SAMPLE OUTPUT 4 4 3 1 5","solution":"def find_missing_digit(expression): Finds the missing digit \'?\' in the arithmetic expression so that it becomes valid. Arguments: expression -- A string of the format \\"a+b=c\\" where one digit is replaced with \'?\' Returns: The correct digit. left_part, right_part = expression.split(\'=\') for digit in \'0123456789\': if \'?\' in left_part: proposed_left = left_part.replace(\'?\', digit) else: proposed_left = left_part if right_part == \'?\': proposed_right = digit else: proposed_right = right_part.replace(\'?\', digit) a, b = map(int, proposed_left.split(\'+\')) if a + b == int(proposed_right): return digit return None"},{"question":"You are given a string representing a sequence of comma-separated values. These values represent a hierarchy of tasks, where each value is a task description. The depth of each task in the hierarchy is determined by the number of leading hyphens (`-`) before the task description. For example: ``` \\"Task 1,-Subtask 1.1,--Subtask 1.1.1,-Subtask 1.2,Task 2\\" ``` This represents the following hierarchy: ``` Task 1 Subtask 1.1 Subtask 1.1.1 Subtask 1.2 Task 2 ``` Write a function `format_tasks()` that takes a string like the example above and returns a formatted string that represents the hierarchy of tasks. Each task should be indented by two spaces for each level of depth. Ensure the output does not have any trailing spaces for each line. Example: ```python input_string = \\"Task 1,-Subtask 1.1,--Subtask 1.1.1,-Subtask 1.2,Task 2\\" print(format_tasks(input_string)) ``` Output: ``` Task 1 Subtask 1.1 Subtask 1.1.1 Subtask 1.2 Task 2 ``` Use the `str.split()` method to split the input string by commas and process each task\'s depth by counting the hyphens.","solution":"def format_tasks(task_string): Takes a comma-separated string representing a task hierarchy and returns a formatted string with each task indented according to its depth. tasks = task_string.split(\',\') formatted_tasks = [] for task in tasks: depth = task.count(\'-\') # Remove the leading hyphens task_description = task.lstrip(\'-\') # Create the formatted task with appropriate indentation formatted_task = \' \' * depth + task_description formatted_tasks.append(formatted_task) return \'n\'.join(formatted_tasks)"},{"question":"Given an array of N integers, find all unique quadruples (a, b, c, d) such that their sum is equal to a given target value. The solution set must not contain duplicate quadruples. -----Notes----- A quadruple (a, b, c, d) is a set of four distinct integers from the array that when summed gives the target value. The quadruples should be sorted in non-descending order. Two quadruples are considered different if the sets of indices picked for each quadruple are different. -----Constraints----- - 1 ≤ N ≤ 100 - -10^9 ≤ each element in the array ≤ 10^9 - -10^9 ≤ target ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N target A_1 A_2 ... A_N -----Output----- Print each unique quadruple (a, b, c, d) that sums up to the target value, one per line. The quadruples should be printed in lexicographical order. -----Sample Input----- 6 0 1 0 -1 0 -2 2 -----Sample Output----- -2 -1 1 2 -2 0 0 2 -1 0 0 1 For the given array, the quadruples that sum up to target 0 are (-2, -1, 1, 2), (-2, 0, 0, 2) and (-1, 0, 0, 1). These quadruples are unique and non-duplicate.","solution":"def four_sum(arr, target): arr.sort() results = set() n = len(arr) for i in range(n - 3): for j in range(i + 1, n - 2): left = j + 1 right = n - 1 while left < right: total = arr[i] + arr[j] + arr[left] + arr[right] if total == target: results.add((arr[i], arr[j], arr[left], arr[right])) left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return sorted(results)"},{"question":"Create a function that accepts an integer `n` and returns the sum of the first `n` prime numbers. For example, given `n = 5`, the function should return `28` because the first 5 prime numbers are `2, 3, 5, 7, 11` and their sum is `28`. Your function should handle cases where `n` is 0 or negative by returning 0. Make sure to optimize your solution for efficiency. Happy coding!","solution":"def sum_of_first_n_primes(n): Returns the sum of the first n prime numbers. If n is 0 or negative, returns 0. if n <= 0: return 0 primes = [] candidate = 2 while len(primes) < n: is_prime = True for prime in primes: if candidate % prime == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 1 return sum(primes)"},{"question":"You are given two integers a and b, you need to determine how many integers between a and b (inclusive) are divisible by a given integer k. -----Input----- The first line of input contains three integers a, b, and k (1 ≤ a ≤ b ≤ 10^9, 1 ≤ k ≤ 10^9). -----Output----- Print a single integer — the count of numbers between a and b that are divisible by k. -----Examples----- Input 1 10 2 Output 5 Input 3 15 3 Output 5 -----Note----- In the first example, the integers between 1 and 10 that are divisible by 2 are: 2, 4, 6, 8, and 10. Thus, the answer is 5. In the second example, the integers between 3 and 15 that are divisible by 3 are: 3, 6, 9, 12, and 15. Thus, the answer is 5.","solution":"def count_divisibles(a, b, k): Returns the count of numbers between a and b (inclusive) that are divisible by k. if a % k == 0: start = a else: start = a + (k - a % k) if b % k == 0: end = b else: end = b - b % k if start > b: return 0 return (end - start) // k + 1"},{"question":"Given an array of integers, return the second smallest element in the array. If the array has fewer than two elements, return -1. Example: input: [3, 1, 4, 1, 2, 5] output: 2 Explanation: The smallest element is 1, and the second smallest element is 2.","solution":"def second_smallest(arr): Returns the second smallest element in the array. If the array has fewer than two elements, return -1. if len(arr) < 2: return -1 # Use set to remove duplicates and then sort the unique elements unique_sorted_arr = sorted(set(arr)) if len(unique_sorted_arr) < 2: return -1 return unique_sorted_arr[1]"},{"question":"Tommy loves playing with strings and he came up with a new game. Tommy and his friends are given a string and they need to transform it such that it becomes a palindrome. They can do this only by substituting one character at a time. The goal is to determine the minimum number of substitutions required to make the given string a palindrome. -----Input----- The input consists of a single line containing a string S (1 leq |S| leq 100000) which contains only lowercase English letters. -----Output----- Output a single integer, the minimum number of substitutions required to make the string a palindrome. -----Examples----- Sample Input 1: abcca Sample Output 1: 1 Sample Input 2: racecar Sample Output 2: 0 Sample Input 3: abcd Sample Output 3: 2","solution":"def min_substitutions_to_palindrome(s): Returns the minimum number of substitutions required to make the string palindrome. n = len(s) count = 0 # Compare characters from the start and the end for i in range(n // 2): if s[i] != s[-i - 1]: count += 1 return count"},{"question":"Given an integer array `nums` of size `n`, return `True` if there is a triple `(i, j, k)` such that `i < j < k` and `nums[i] < nums[j] < nums[k]`, otherwise return `False`. Example 1: Input: nums = [1, 2, 3, 4, 5] Output: True Example 2: Input: nums = [5, 4, 3, 2, 1] Output: False Example 3: Input: nums = [2, 1, 5, 0, 4, 6] Output: True Your Task: You don\'t need to read anything or print anything. Your task is to complete the function `increasingTripletSubseq()` which takes the array `nums` as parameter and returns `True` if there exists a triple as per the above condition, otherwise returns `False`. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= n <= 10^5 -10^9 <= nums[i] <= 10^9","solution":"def increasingTripletSubseq(nums): Returns True if there exists a triple (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k], otherwise returns False. first = second = float(\'inf\') for n in nums: if n <= first: first = n elif n <= second: second = n else: return True return False"},{"question":"You are participating in an online coding competition and have been given the following task. The competition system will provide you with a series of strings, and your job is to find out their cumulative special value. A string\'s special value is calculated by summing up the arithmetic differences between adjacent characters in the string (considering their ASCII values), and then taking the absolute value of this sum (i.e., sum of the differences without regard to the order or direction). For example, the string \\"abc\\" has ASCII values [97, 98, 99]. Therefore, the special value would be the absolute value of (98 - 97) + (99 - 98) = 1 + 1 = 2. If given multiple strings, you are required to compute the cumulative special value, which is the sum of the special values of each string. -----Input----- The input consists of: - one line containing an integer n (1 le n le 50), the number of strings. - n lines each containing a string s of length at most 100, consisting of lowercase English letters. -----Output----- Output a single integer which is the cumulative special value of the provided strings. -----Examples----- Sample Input: 3 abc def hij Sample Output: 6 Sample Input: 2 aaa bbb Sample Output: 0","solution":"def calculate_special_value(s): Calculates the special value of a string s. special_value = 0 for i in range(len(s) - 1): special_value += abs(ord(s[i+1]) - ord(s[i])) return special_value def cumulative_special_value(n, strings): Calculates the cumulative special value for a list of n strings. total_special_value = 0 for string in strings: total_special_value += calculate_special_value(string) return total_special_value"},{"question":"You are given a string sequence S, consisting of lowercase English letters. Your task is to determine whether it is possible to reorder the characters of the string such that no two adjacent characters are the same. If such a reordering is possible, provide one possible reordering, otherwise, return -1. -----Input----- The first line contains an integer t (1 ≤ t ≤ 10), the number of test cases. Each of the next t lines contains a string S (1 ≤ |S| ≤ 1000), consisting of only lowercase English letters. -----Output----- For each test case, print a single line - either -1 if it is not possible to reorder the string as required or the reordered string. If multiple reordering possibilities exist, print any one of them. -----Examples----- Input 2 aabb aaab Output abab -1 -----Note----- In the first sample, the input string \\"aabb\\" can be reordered to \\"abab\\", where no two adjacent characters are the same. In the second sample, the input string \\"aaab\\" cannot be reordered to avoid adjacent identical characters. Hence, the output is -1.","solution":"def reorder_string(s): from collections import Counter import heapq # Calculate frequency of each character freq_counter = Counter(s) max_heap = [(-freq, char) for char, freq in freq_counter.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # If prev_char exists and its frequency is more than 0, add it back to heap if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq = freq + 1 prev_char = char ordered_string = \'\'.join(result) if len(ordered_string) != len(s): return -1 return ordered_string def reorder_strings(test_cases): results = [] for s in test_cases: results.append(reorder_string(s)) return results"},{"question":"You are given an array of n integers. You need to determine if there are three distinct indices i, j, k in the array such that the elements at those indices form an arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference between any two consecutive terms is constant. -----Input----- The first line contains one integer n (3 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a_{i} (0 ≤ a_{i} ≤ 10^9) — the elements of the array. -----Output----- Print YES if there are three distinct indices i, j, k such that the elements at those indices form an arithmetic progression. Otherwise, print NO. -----Examples----- Input 5 1 5 3 7 9 Output YES Input 4 2 4 6 8 Output YES Input 5 1 2 4 8 16 Output NO -----Note----- In the first example, the elements at indices 1, 3, and 2 form an arithmetic progression (1, 3, 5). In the second example, any three elements form an arithmetic progression. In the third example, there are no three distinct indices forming an arithmetic progression.","solution":"def has_arithmetic_progression(nums): # Convert list to sorted set to find unique elements and sort them unique_nums = sorted(set(nums)) n = len(unique_nums) # Check for arithmetic progression for i in range(n): for j in range(i + 1, n): # We need to find if there exists k such that unique_nums[k] - unique_nums[j] == unique_nums[j] - unique_nums[i] diff = unique_nums[j] - unique_nums[i] if unique_nums[j] + diff in unique_nums: return \\"YES\\" return \\"NO\\""},{"question":"Write a function that takes a string as input and returns a list of all the unique permutations of the characters in the string. The function should sort the list of permutations lexicographically before returning it. The input string will only contain lowercase letters, and its length will not exceed 10 characters. For example: * Input: \\"abc\\" * Output: [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] * Input: \\"aabb\\" * Output: [\\"aabb\\", \\"abab\\", \\"abba\\", \\"baab\\", \\"baba\\", \\"bbaa\\"]","solution":"from itertools import permutations def unique_permutations(s): Returns a sorted list of all unique permutations of the input string s. perm_set = set(permutations(s)) perm_list = sorted([\'\'.join(p) for p in perm_set]) return perm_list"},{"question":"You are provided with a board game consisting of a grid of cells. Your task is to identify the first player to connect a sequence of their markers either horizontally, vertically, or diagonally. Write a function `findWinner(grid, sequenceLength)`. - `grid` is a list of lists representing the state of the board. Each cell can contain \'R\' for Player R, \'Y\' for Player Y, and \'E\' for an empty cell. - `sequenceLength` is the number of consecutive markers that must be connected for a player to win. Given a game board `grid`, return the first player to connect `sequenceLength` consecutive markers. If no player has won, return \\"No Winner\\". # Function Signature ```python def findWinner(grid: List[List[str]], sequenceLength: int) -> str: # your code here ``` # Input - `grid`: List[List[str]] where each element can be \'R\', \'Y\', or \'E\'. - `sequenceLength`: the number of consecutive markers required to win. # Output - Return \\"R\\" if Player R wins, \\"Y\\" if Player Y wins, or \\"No Winner\\" if no player has connected the required sequence. # Example ```python grid = [ [\'R\', \'E\', \'Y\', \'E\'], [\'R\', \'R\', \'Y\', \'E\'], [\'Y\', \'R\', \'R\', \'R\'], [\'E\', \'E\', \'Y\', \'R\'] ] print(findWinner(grid, 4)) # Should return \\"R\\" grid = [ [\'R\', \'E\', \'Y\', \'E\'], [\'R\', \'R\', \'Y\', \'E\'], [\'Y\', \'R\', \'Y\', \'R\'], [\'E\', \'E\', \'Y\', \'R\'] ] print(findWinner(grid, 3)) # Should return \\"Y\\" grid = [ [\'R\', \'E\', \'Y\', \'E\'], [\'R\', \'R\', \'E\', \'E\'], [\'E\', \'R\', \'Y\', \'R\'], [\'E\', \'E\', \'Y\', \'R\'] ] print(findWinner(grid, 4)) # Should return \\"No Winner\\" ``` # Notes - Players R and Y alternate their moves. - The game board is guaranteed to be rectangular (all rows have the same length).","solution":"def findWinner(grid, sequenceLength): def check_winner(player, r, c): # Check horizontal if c + sequenceLength <= n and all(grid[r][c+i] == player for i in range(sequenceLength)): return player # Check vertical if r + sequenceLength <= m and all(grid[r+i][c] == player for i in range(sequenceLength)): return player # Check diagonal (top-left to bottom-right) if r + sequenceLength <= m and c + sequenceLength <= n and all(grid[r+i][c+i] == player for i in range(sequenceLength)): return player # Check diagonal (bottom-left to top-right) if r - sequenceLength + 1 >= 0 and c + sequenceLength <= n and all(grid[r-i][c+i] == player for i in range(sequenceLength)): return player return \\"No Winner\\" m = len(grid) n = len(grid[0]) for r in range(m): for c in range(n): if grid[r][c] != \'E\': result = check_winner(grid[r][c], r, c) if result != \\"No Winner\\": return result return \\"No Winner\\""},{"question":"*A museum with a circular gallery decides to introduce a painting exhibition. To make the exhibition more interesting, the curator wants to alternate between two different styles of paintings such that no two adjacent paintings have the same style. Given the number of paintings N, can you help the curator find a valid arrangement?* A valid arrangement is required where adjacent paintings have different styles. Styles are represented by integers 1 or 2. ------ Input Format ------ - The first line of input will contain a single integer T, representing the number of test cases. - Each of the next T lines contains a single integer N, the number of paintings in the gallery. ------ Output Format ------ For each test case, output a single line containing N space-separated integers representing the styles of paintings such that no two adjacent paintings have the same style. If there are multiple valid arrangements, print any one of them. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{5} - The sum of N over all test cases won\'t exceed 10^{6}. ----- Sample Input 1 ------ 3 5 2 7 ----- Sample Output 1 ------ 1 2 1 2 1 1 2 1 2 1 2 1 2 1 ----- Explanation 1 ------ For the first test case, an arrangement [1, 2, 1, 2, 1] ensures no two adjacent paintings have the same style. For the second test case, any alternating arrangement such as [1, 2] or [2, 1] will satisfy the condition. For the third test case, the arrangement [1, 2, 1, 2, 1, 2, 1] ensures no two adjacent paintings have the same style.","solution":"def alternate_paintings(T, test_cases): Given the number of paintings N in each test case, generate a valid arrangement where adjacent paintings have different styles (1 or 2). Arguments: T -- int, number of test cases test_cases -- list of int, each representing the number of paintings in the gallery for each test case Returns: results -- list of str, each string representing the valid arrangement of paintings for each test case results = [] for N in test_cases: arrangement = [] for i in range(N): if i % 2 == 0: arrangement.append(\'1\') else: arrangement.append(\'2\') results.append(\' \'.join(arrangement)) return results"},{"question":"In this kata, you are required to implement the [Longest Increasing Subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) (LIS) algorithm. The task is to find the length of the longest subsequence in an array of integers such that all elements of the subsequence are sorted in increasing order. The input will be a non-empty list of integers. The output should be a single integer representing the length of the LIS. # Instructions: 1. Given an input list `arr` of size `n` (1 ≤ n ≤ 2500), determine the length of the longest increasing subsequence. 2. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. # Example: Consider the sequence `[10, 9, 2, 5, 3, 7, 101, 18]` - The longest increasing subsequence is `[2, 3, 7, 101]`, so the function should return `4`. # Functional Requirements: - Implement a function `longest_increasing_subsequence(arr: List[int]) -> int` that takes a list of integers and returns an integer representing the length of the longest increasing subsequence. # Examples: ```python assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 assert longest_increasing_subsequence([1, 2, 3, 4, 5]) == 5 assert longest_increasing_subsequence([5, 4, 3, 2, 1]) == 1 assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3 ``` # Note: - The solution should have an efficient time complexity, preferably O(n log n) using binary search with dynamic programming. However, O(n^2) solutions are also acceptable for scoring purposes. Good luck!","solution":"from typing import List def longest_increasing_subsequence(arr: List[int]) -> int: if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Lucy is a zoologist studying the social behavior of meerkats in a conservation area. She is particularly interested in the formation of colonies and wants to analyze their patterns. The conservation area can be represented as an n x n grid. Each cell in the grid either contains meerkats (represented by a \'1\') or is empty (represented by a \'0\'). A meerkat colony is defined as a group of meerkats that are connected horizontally or vertically (not diagonally). Two cells are considered connected if they are adjacent (sharing a side) and both contain meerkats. Your task is to find the number of distinct meerkat colonies in the grid. **Input:** The first line contains a single integer n (1 ≤ n ≤ 1000), representing the size of the grid. This is followed by n lines, each containing n characters (\'1\' or \'0\'), representing the grid. **Output:** Print a single integer — the number of distinct meerkat colonies in the grid. **Example:** **Input:** ``` 4 1100 1100 0010 0001 ``` **Output:** ``` 3 ``` **Explanation:** In the example provided, there are three distinct meerkat colonies: 1. The first colony covers the upper left 2x2 corner of the grid. 2. The second colony is a single meerkat at position (3, 3). 3. The third colony is a single meerkat at position (4, 4).","solution":"def num_meerkat_colonies(n, grid): Finds the number of distinct meerkat colonies in a grid. Parameters: n (int): Size of the grid (n x n). grid (list of list of str): Grid represented by \'1\'s (meerkats) and \'0\'s (empty), of size n x n. Returns: int: Number of distinct meerkat colonies. def dfs(x, y): Perform depth-first search to mark the connected meerkats as visited. stack = [(x, y)] while stack: cx, cy = stack.pop() if visited[cx][cy]: continue visited[cx][cy] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'1\': stack.append((nx, ny)) visited = [[False] * n for _ in range(n)] colonies_count = 0 for i in range(n): for j in range(n): if grid[i][j] == \'1\' and not visited[i][j]: dfs(i, j) colonies_count += 1 return colonies_count"},{"question":"Vaishnavi loves playing with geometric patterns, just like she enjoys playing with plywood. This time, she discovered a unique type of rectangular grid pattern where she enjoys counting paths. Given a grid of size MxN, Vaishnavi wants to find out the number of unique paths from the top-left corner (1,1) to the bottom-right corner (M,N). She can only move either down or right at any point in time. Your task is to help Vaishnavi by writing a program to calculate the total number of unique paths for a given grid size. Input: The first line contains a single integer T, the number of test cases, followed by the next T lines, with each line containing two integers M and N representing the number of rows and columns of the grid, respectively. Output: For each test case, print the number of unique paths from the top-left corner to the bottom-right corner. Constraints: 1 ≤ T ≤ 50 1 ≤ M, N ≤ 30 Problem Setter: Your Name SAMPLE INPUT 2 2 3 3 3 SAMPLE OUTPUT 3 6","solution":"from math import comb def number_of_unique_paths(M, N): Computes the number of unique paths in a MxN grid. return comb(M + N - 2, M - 1) def unique_paths_from_inputs(T, cases): results = [] for case in cases: M, N = case results.append(number_of_unique_paths(M, N)) return results"},{"question":"In a magical kingdom, the wizard needs your help to determine if a sequence of spells is valid. Each spell has a power level represented by an uppercase letter from \'A\' to \'Z\', where \'A\' is the weakest spell and \'Z\' is the strongest. However, it is important that the sequence of spells maintains a certain monotonic order for them to work effectively. Let us assume that we denote the sequence of spells as s_1 s_2 ldots s_N. To be a valid sequence: 1. The power level should never decrease as you move through the sequence. 2. The sequence must contain at least one spell of power level greater than \'B\'. For instance: - The sequence \'ABCD\' is valid: - The power level does not decrease (A ≤ B ≤ C ≤ D). - There are spells with power level greater than \'B\' (C and D). - The sequence \'BA\' is not valid: - The power level decreases (B > A). - The sequence \'AAA\' is not valid: - Although the power level does not decrease, there is no spell with power level greater than \'B\'. Write a function to determine if the sequence of spells is valid based on these rules. -----Input----- The input consists of a single string containing the sequence of spells, with length N, where 2 leq N leq 20. -----Output----- Output a single line with the word VALID if the sequence is valid, or INVALID otherwise. -----Examples----- Sample Input 1: ABCD Sample Output 1: VALID Sample Input 2: BA Sample Output 2: INVALID Sample Input 3: AAA Sample Output 3: INVALID Sample Input 4: AABCD Sample Output 4: VALID","solution":"def is_valid_sequence(spells): Determines if the given sequence of spells is valid. Parameters: spells (str): A sequence of spell power levels. Returns: str: \\"VALID\\" if the sequence is valid, otherwise \\"INVALID\\". has_greater_than_B = False for i in range(len(spells)): if i > 0 and spells[i] < spells[i - 1]: return \\"INVALID\\" if spells[i] > \'B\': has_greater_than_B = True return \\"VALID\\" if has_greater_than_B else \\"INVALID\\""},{"question":"Given an integer N, find the maximum possible absolute difference between the sum of elements in any two non-empty subsets of the given array of N integers. INPUT The first line contains the integer N (1 ≤ N ≤ 100000). The second line contains N space-separated integers a_i (1 ≤ a_i ≤ 100000). OUTPUT Print the maximum possible absolute difference. SAMPLE INPUT 5 1 2 3 4 5 SAMPLE OUTPUT 15","solution":"def max_absolute_difference(N, array): Returns the maximum possible absolute difference between the sum of elements in any two non-empty subsets of the given array. Arguments: N -- the number of elements in the array array -- list of integers containing N elements Returns: int -- the maximum possible absolute difference total_sum = sum(array) return total_sum"},{"question":"Alice is trying to create a password for her new online account. She has a list of n lowercase words, where each word consists of alphabetical characters only and has a length between 1 and 10 characters inclusive. She wants to generate a password by concatenating several (at least two) of these words together. However, to make the password more secure, she wants the following conditions to be met: 1. The length of the resulting password should be at least k characters. 2. No word should be repeated in the password. 3. The password must contain at least one vowel (\'a\', \'e\', \'i\', \'o\', \'u\') and at least one consonant. Help Alice to determine if it\'s possible to create such a password. If yes, find any valid password satisfying the conditions; otherwise, return \\"-1\\". -----Input----- The first line of input contains two integers n and k (2 leq n leq 10, 1 leq k leq 100) — the number of words and the minimum length of the password. The second line contains n space-separated lowercase strings: w_1, w_2, ldots, w_n. -----Output----- If it\'s impossible to create a password satisfying the conditions, print \\"-1\\". Otherwise, print a valid password. If there are multiple valid passwords, output any of them. -----Examples----- Input 3 10 hello world otto Output helloworld Input 4 8 apple banana orange grape Output applebanana Input 2 20 aaaaaa bbbbbb Output -1 -----Note----- In the first test case, \\"helloworld\\" is a valid password of length 10 with at least one vowel and one consonant. Other valid combinations are possible. In the second test case, \\"applebanana\\" is a valid password of length 11 with at least one vowel and one consonant. Other valid combinations are possible. In the third test case, no combination of \\"aaaaaa\\" and \\"bbbbbb\\" can satisfy the conditions. Hence, the output is \\"-1\\".","solution":"from itertools import combinations def is_valid(password): vowels = set(\\"aeiou\\") has_vowel = any(char in vowels for char in password) has_consonant = any(char not in vowels for char in password) return has_vowel and has_consonant def generate_password(words, k): n = len(words) for length in range(2, n + 1): for comb in combinations(words, length): candidate = \'\'.join(comb) if len(candidate) >= k and is_valid(candidate): return candidate return \\"-1\\""},{"question":"A number guessing game has been designed where a player must guess a randomly chosen integer between two specified numbers, inclusive. You are given the task to simulate this number guessing game using an algorithm. The player makes guesses based on a specific strategy: each guess is based on the feedback given about the previous guess. The feedback is either \\"too low\\", \\"too high\\", or \\"correct\\". Additionally, the game should have a limit on the number of guesses a player can make. Write a program that simulates this number guessing game. The program should take the range (minimum and maximum values) of the random number, the random number itself, and the maximum number of allowed guesses. The player\'s strategy for guessing is to always guess the midpoint of the current range of possible numbers. Input Your program will receive input in the following format: m n r k Where: - m is the minimum value in the range (1 ≤ m ≤ 10^6) - n is the maximum value in the range (m < n ≤ 10^6) - r is the randomly chosen number (m ≤ r ≤ n) - k is the maximum number of guesses allowed (1 ≤ k ≤ 100) Output The program should output each guess made by the player followed by the feedback given. If the player guesses the number correctly, output \\"correct\\"; if the guess is too low, output \\"too low\\"; if the guess is too high, output \\"too high\\". If the player fails to guess the number within the allowed number of guesses, output \\"fail\\". If the player guesses the number correctly, end the program immediately. Each guess and feedback should be printed on a new line. Example Input 15 25 20 5 Output 20 correct Input 1 10 7 3 Output 5 too low 8 too high 6 too low fail Input 100 200 150 10 Output 150 correct","solution":"def guessing_game(m, n, r, k): low = m high = n while k > 0: guess = (low + high) // 2 print(f\\"{guess}\\", end=\' \') if guess == r: print(\\"correct\\") return elif guess < r: print(\\"too low\\") low = guess + 1 else: print(\\"too high\\") high = guess - 1 k -= 1 print(\\"fail\\")"},{"question":"Problem Description: A group of N scientists has discovered a new element, and each of them has created an atom that needs to be placed in a periodic sequence. Each atom\'s value is represented by a unique integer between 1 and N (inclusive). However, these atoms have a special property: once placed in the sequence, any atom cannot be in a position that is a multiple of its value. Write a program to generate a valid sequence of atoms for the given number of scientists. # Input: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains an integer N, representing the number of scientists. # Output: For each test case, print a sequence of N unique integers between 1 and N that satisfies the property described. If it is impossible to generate such a sequence, return `-1`. # Constraints: - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 1000 # Example: Sample Input: ```plaintext 2 5 8 ``` Sample Output: ```plaintext 3 1 2 5 4 6 1 2 3 4 5 7 8 ``` # Explanation: For the first test case, `N = 5`, a possible valid sequence is `3 1 2 5 4`. For the second test case, `N = 8`, a possible valid sequence is `6 1 2 3 4 5 7 8`. The sequence in each case ensures that the atom value does not appear at any position that is a multiple of its value.","solution":"def generate_sequence(N): if N == 1: return [1] sequence = [None] * N used = [False] * (N + 1) # Place even numbers in the sequence first even_pos = 0 for i in range(2, N + 1, 2): sequence[even_pos] = i used[i] = True even_pos += 1 # Place odd numbers in the sequence next odd_pos = N - 1 for i in range(1, N + 1, 2): sequence[odd_pos] = i used[i] = True odd_pos -= 1 return sequence def generate_sequences_for_cases(T, cases): results = [] for N in cases: if N == 1: results.append(\\"1\\") else: sequence = generate_sequence(N) results.append(\\" \\".join(map(str, sequence))) return results"},{"question":"Leah is working on optimizing a software application that processes intervals of time. She needs to find the maximum number of overlapping intervals from a list of given intervals. This information will help her understand the peak load time when the system experiences the highest number of simultaneous tasks. Given a list of intervals with start and end times, determine the maximum number of intervals that overlap at any point in time. -----Input----- First line contains an integer n (1 ≤ n ≤ 10^5), the number of intervals. Each of the next n lines contains two space-separated integers, s and e (0 ≤ s < e ≤ 10^9), representing the start and end times of an interval. -----Output----- Print one integer — the maximum number of overlapping intervals. -----Examples----- Input 5 1 3 2 5 4 6 7 8 5 9 Output 3 Input 4 1 4 2 3 4 6 5 8 Output 2 -----Note----- In the first example, the maximum number of overlapping intervals at any point in time is 3 during the interval [4, 5]. In the second example, the maximum number of overlapping intervals is 2 during the interval [5, 6].","solution":"def max_overlapping_intervals(intervals): This function finds the maximum number of overlapping intervals. Parameters: intervals (list of tuples): A list of tuples, where each tuple contains two integers representing the start and end time of an interval. Returns: int: The maximum number of overlapping intervals. events = [] for start, end in intervals: events.append((start, \'start\')) events.append((end, \'end\')) # Sort events events.sort(key=lambda x: (x[0], x[1] == \'end\')) max_overlap = 0 current_overlap = 0 for _, event_type in events: if event_type == \'start\': current_overlap += 1 max_overlap = max(max_overlap, current_overlap) else: current_overlap -= 1 return max_overlap"},{"question":"You are given an undirected tree with `n` nodes, numbered from `1` to `n`. The tree is described by its `n - 1` edges. Each node has a value assigned to it, represented by an array `a` of length `n`. Consider the following process: starting from a node, traverse the tree and accumulate the sum of values of all visited nodes in a path. You need to find the maximum sum of node values that can be collected when starting from and ending at the same or different nodes. Note that you can only traverse each edge of the tree at most once. **Input** - The first line contains an integer `n` (`2 ≤ n ≤ 10^5`) indicating the number of nodes in the tree. - The second line contains `n` integers `a[1], a[2],…, a[n]` (`0 ≤ a[i] ≤ 10^5`), the value assigned to each node. - Each of the next `n-1` lines contains two integers `u` and `v` (`1 ≤ u, v ≤ n`), representing an edge between node `u` and node `v`. **Output** - Output the maximum sum of values that can be collected following the given constraints. **Examples** *Example 1:* ``` Input: 5 1 2 3 4 5 1 2 1 3 2 4 2 5 Output: 15 Explanation: One possible way to achieve the maximum sum is starting at node 4, going to node 2, to node 1, to node 3. This visits all nodes and gives the total sum of 1+2+3+4+5=15. ``` *Example 2:* ``` Input: 4 10 20 30 40 1 2 1 3 3 4 Output: 100 Explanation: One possible way to achieve the maximum sum is starting at node 2, going to node 1, to node 3, to node 4. This visits all nodes and gives the total sum of 10+20+30+40=100. ``` *Example 3:* ``` Input: 3 100 200 300 1 2 1 3 Output: 600 Explanation: One possible way to achieve the maximum sum is starting at node 2, going to node 1, to node 3. This visits all nodes and gives the total sum of 100+200+300=600. ```","solution":"def max_path_sum(n, values, edges): from collections import defaultdict # Constructing the adjacency list representation of the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) max_sum = 0 def dfs(node, parent): nonlocal max_sum current_sum = values[node - 1] # node values are 1-indexed in the input for neighbor in tree[node]: if neighbor != parent: current_sum += dfs(neighbor, node) max_sum = max(max_sum, current_sum) return current_sum dfs(1, -1) return max_sum"},{"question":"You are given a string of text where different words are separated by spaces. Your task is to write a function that finds the most frequently occurring word in the text. If there are multiple words with the same highest frequency, return them in a sorted list. Write a function `most_frequent_words` that takes a single string argument `text` and returns the most common word(s) in the form of a string if there\'s only one, or a list of strings if there are multiple. - Ignore punctuation (i.e., consider only alphanumeric characters and spaces). - Treat uppercase and lowercase letters as the same (i.e., the comparison should be case-insensitive). # Example ```python >>> most_frequent_words(\\"The rain in Spain falls mainly in the plain. In the plain, in the rain.\\") \'in\' >>> most_frequent_words(\\"Apple apple Banana banana apple\\") [\'apple\', \'banana\'] >>> most_frequent_words(\\"Hello world!\\") [\'hello\', \'world\'] >>> most_frequent_words(\\"\\") [] ``` # Constraints - The function should handle a string of arbitrary length. - Punctuation marks are considered as part of words only if they are located in the middle of a word (e.g., \\"mother-in-law\\"). - The function should be able to handle both empty strings and strings with no words due to punctuation.","solution":"import re from collections import Counter def most_frequent_words(text): Returns the most frequent word(s) in the given text. If there\'s only one, return it as a string. If there are multiple words with the highest frequency, return them as a sorted list. # Normalize the text to lowercase text = text.lower() # Replace all non-alphanumeric characters with spaces text = re.sub(r\'[W_]+\', \' \', text) # Split the text into words words = text.split() # Count frequency of each word word_count = Counter(words) # If no words, return an empty list if not word_count: return [] # Find the maximum frequency max_freq = max(word_count.values()) # Find all words that have the maximum frequency most_frequent = [word for word, freq in word_count.items() if freq == max_freq] # If there\'s only one most frequent word, return as string if len(most_frequent) == 1: return most_frequent[0] # Else, return the list of most frequent words, sorted return sorted(most_frequent)"},{"question":"Description In this kata, you will implement a simple text-based adventure game. The game world consists of a 5x5 grid, and the player can move up, down, left, or right within the grid. There is a treasure hidden in one of the grid cells, and the objective is for the player to find the treasure. Rules of the game - The player starts at the top-left corner of the grid (0,0). - The treasure is hidden at a random location in the grid. - The player can move \'up\', \'down\', \'left\', or \'right\' by one cell at a time. - If a move takes the player outside the grid boundaries, the player stays in the same position. - The game ends when the player reaches the cell with the treasure. Input and Output - The input will be a list of strings representing the player\'s moves, e.g., [\\"up\\", \\"down\\", \\"left\\", \\"right\\"]. - Return a tuple with the final coordinates of the player and a boolean indicating whether the player found the treasure. Example Given the following input and assuming the treasure is at (2, 2): ``` moves = [\\"down\\", \\"down\\", \\"right\\", \\"right\\"] ``` The game would proceed as follows: ``` Start - Player: (0,0), Treasure: (2,2) Move 1 - Player: (1,0), Treasure: (2,2) Move 2 - Player: (2,0), Treasure: (2,2) Move 3 - Player: (2,1), Treasure: (2,2) Move 4 - Player: (2,2), Treasure: (2,2) ``` Since the player reached the treasure at (2, 2), the function should return: ``` (2, 2, True) ``` If the player did not reach the treasure: ``` moves = [\\"right\\", \\"right\\", \\"up\\"] ``` The game would proceed as follows: ``` Start - Player: (0,0), Treasure: (2,2) Move 1 - Player: (0,1), Treasure: (2,2) Move 2 - Player: (0,2), Treasure: (2,2) Move 3 - Player: (0,2), Treasure: (2,2) ``` Since the player did not reach the treasure, the function should return: ``` (0, 2, False) ``` Function Signature Implement the `treasure_hunt` function: ```python def treasure_hunt(moves: List[str], treasure: Tuple[int, int]) -> Tuple[int, int, bool]: pass ```","solution":"from typing import List, Tuple def treasure_hunt(moves: List[str], treasure: Tuple[int, int]) -> Tuple[int, int, bool]: player_position = [0, 0] grid_size = 5 move_directions = { \\"up\\": (-1, 0), \\"down\\": (1, 0), \\"left\\": (0, -1), \\"right\\": (0, 1) } for move in moves: if move in move_directions: next_position = [ player_position[0] + move_directions[move][0], player_position[1] + move_directions[move][1] ] if 0 <= next_position[0] < grid_size and 0 <= next_position[1] < grid_size: player_position = next_position if tuple(player_position) == treasure: return (player_position[0], player_position[1], True) return (player_position[0], player_position[1], False)"},{"question":"Alice is participating in a coding contest and she\'s trying to solve a problem that requires checking if a string can be rearranged to form a palindrome. A palindrome is a word that reads the same forwards and backwards. Alice needs your help to write a program to determine if any permutation of a given string can be rearranged to form a palindrome. Input The first line contains an integer T denoting the number of test cases. Each of the following T lines contains a non-empty string of lowercase English letters (i.e., \'a\' to \'z\'). Output For each test case, print \\"YES\\" if the string can be rearranged to form a palindrome, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ length of string ≤ 10^3 Example Input: 3 civic ivicc hello Output: YES YES NO Explanation Example case 1. The string \\"civic\\" is already a palindrome. Example case 2. The string \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. Example case 3. No permutation of the string \\"hello\\" can form a palindrome.","solution":"def can_form_palindrome(s): Determines if any permutation of a given string can be rearranged to form a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for val in count.values() if val % 2 != 0) return odd_count <= 1 def process_test_cases(test_cases): Takes a list of strings and returns a list with \\"YES\\" or \\"NO\\" for each string, depending on whether it can be rearranged to form a palindrome. results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given the arrangement of trees in a garden, each tree has a certain height. We define a \\"beautiful\\" tree as one that is taller than any tree to its right. Your task is to determine how many beautiful trees are there in the garden. Write a function that takes an array of integers representing the heights of trees in the order they appear in the garden, and returns the number of beautiful trees in the array. Input - An integer `n` (1 ≤ n ≤ 100) representing the number of trees. - An array `heights` of `n` integers, where each integer `h` (1 ≤ h ≤ 1000) represents the height of a tree. Output - An integer representing the number of beautiful trees in the garden. Example Input 6 3 7 8 3 6 1 Output 3 Explanation There are 3 beautiful trees in the given array: 8, 6, and 1.","solution":"def count_beautiful_trees(heights): Returns the number of beautiful trees in the array. A \\"beautiful\\" tree is one that is taller than any tree to its right. :param heights: List of tree heights :return: Count of beautiful trees count = 0 max_height = -1 for height in reversed(heights): if height > max_height: count += 1 max_height = height return count"},{"question":"Design a function that simulates a simplified version of the \\"Minesweeper\\" game. In this game, you are given a grid representing a game board. Each cell of the board can either be a bomb (\'B\') or an empty space (\'E\'). Your task is to create a function `minesweeper(board)` that returns a new grid with each empty cell replaced by the number of bombs in its adjacent cells (including diagonals). The size of the grid is n times n where 1 leq n leq 100. # Input - A single integer n (1 leq n leq 100) — the size of the grid. - A 2D list `board` of size n times n containing the characters \'B\' or \'E\'. # Output - A 2D list of size n times n where all empty cells (\'E\') in the original grid are replaced by the number of adjacent bombs (\'B\') and bombs (\'B\') remain unchanged. # Examples Example 1 Input: ``` n = 3 board = [ [\'E\', \'E\', \'E\'], [\'E\', \'B\', \'E\'], [\'E\', \'E\', \'E\'] ] ``` Output: ``` [ [\'1\', \'1\', \'1\'], [\'1\', \'B\', \'1\'], [\'1\', \'1\', \'1\'] ] ``` Example 2 Input: ``` n = 4 board = [ [\'E\', \'E\', \'E\', \'E\'], [\'E\', \'B\', \'E\', \'E\'], [\'E\', \'E\', \'B\', \'E\'], [\'E\', \'E\', \'E\', \'E\'] ] ``` Output: ``` [ [\'1\', \'1\', \'1\', \'0\'], [\'1\', \'B\', \'2\', \'1\'], [\'1\', \'2\', \'B\', \'1\'], [\'0\', \'1\', \'1\', \'1\'] ] ``` Example 3 Input: ``` n = 1 board = [ [\'B\'] ] ``` Output: ``` [ [\'B\'] ] ```","solution":"def minesweeper(n, board): Transforms the board of Minesweeper by replacing each empty cell (\'E\') with the number of adjacent bombs (\'B\'). Bomb cells (\'B\') remain unchanged. :param n: int - Size of the grid :param board: 2D list of str - n x n board with \'B\' for bombs and \'E\' for empty cells :return: 2D list of str - Transformed board # Directions for all 8 adjacent cells directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] def count_bombs(x, y): count = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and board[nx][ny] == \'B\': count += 1 return count result = [[\'\' for _ in range(n)] for _ in range(n)] for i in range(n): for j in range(n): if board[i][j] == \'B\': result[i][j] = \'B\' else: result[i][j] = str(count_bombs(i, j)) return result"},{"question":"Emma is a software engineer who loves puzzles. She is working on a new puzzle game which involves a grid of cells. Each cell can either be \'empty\' (represented by 0) or \'blocked\' (represented by 1). The objective of the game is to move from the top-left corner to the bottom-right corner of the grid. Emma can only move right or down from any cell in the grid. She needs a program to determine the number of unique paths from the top-left corner to the bottom-right corner, avoiding the blocked cells. -----Input----- The first line contains two integers n and m (1 leq n, m leq 100), where n is the number of rows and m is the number of columns in the grid. The next n lines each contain m integers (either 0 or 1). Each integer represents whether a cell is empty (0) or blocked (1). It is guaranteed that the starting cell (top-left) and the ending cell (bottom-right) are empty (i.e., they will have a value of 0). -----Output----- Output a single integer which is the number of unique paths from the top-left corner to the bottom-right corner of the grid, avoiding the blocked cells. -----Examples----- Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 0 0 0 0 0 0 Output 3","solution":"def unique_paths(grid): n = len(grid) m = len(grid[0]) # Create a 2D list to store the number of unique paths to each cell dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 # no paths through a blocked cell else: if i > 0: dp[i][j] += dp[i-1][j] # paths from the cell above if j > 0: dp[i][j] += dp[i][j-1] # paths from the cell to the left return dp[-1][-1]"},{"question":"A string is called persistent if it does not change when all duplicate consecutive letters are removed. For example, the string \\"aabbcc\\" becomes \\"abc\\" after removing the duplicates, so it isn\'t persistent. However, the string \\"abc\\" remains \\"abc\\", so it is persistent. Your task is to transform a given string into a persistent string by removing consecutive duplicate letters until no more consecutive duplicates can be found. -----Input----- The single input line contains a string s (1 ≤ |s| ≤ 10^5), consisting of lowercase English letters. -----Output----- Print the persistent string derived from the input string. -----Examples----- Input aabbcc Output abc Input abccba Output abccba Input aabaa Output aba -----Note----- By consecutive duplicates we mean when the same letter appears two or more times next to each other. For instance, in \\"aabbcc\\", \'a\' appears twice consecutively, so both \'a\'s are removed, then \'b\'s are removed, and so are \'c\'s. The final string is \\"abc\\".","solution":"def make_persistent(s): Transforms the given string into a persistent string by removing consecutive duplicate letters until no more consecutive duplicates can be found. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: The persistent string derived from the input string. if not s: return \\"\\" result = [] for char in s: if not result or result[-1] != char: result.append(char) return \'\'.join(result)"},{"question":"You are hosting a secret Santa where each participant draws another participant\'s name to gift them a present. The twist is that due to certain preferences and restrictions, not all participants want or can gift to others. Given a list of participants and their restrictions, determine whether a valid secret Santa assignment is possible, where everyone gets exactly one present from another participant and gives exactly one present to another participant. -----Input----- - The first line contains an integer 1 leq n leq 1000, the number of participants. - Then n lines follow, each containing a string of exactly n characters. The i-th line represents the i-th participant, and each character j of the line denotes whether participant i can gift to participant j: - \'1\' if participant i can gift to participant j. - \'0\' if participant i cannot gift to participant j. - \'X\' for the diagonal elements, where i = j (as participants cannot gift to themselves). -----Output----- Print \'possible\' if there is a valid secret Santa assignment; otherwise, print \'impossible\'. -----Examples----- Sample Input: 3 X10 0X1 10X Sample Output: possible Sample Input: 3 X10 00X 10X Sample Output: impossible","solution":"def is_secret_santa_possible(n, preferences): Determines if a valid secret Santa assignment is possible, where everyone gets exactly one present from another participant and gives exactly one present to another participant based on given preferences. :param n: Number of participants :param preferences: List of strings where each string represents preferences of a participant :return: \'possible\' if a valid assignment exists, otherwise \'impossible\' from collections import defaultdict, deque def can_match(pref): match = [-1] * n visited = [False] * n def bpm(u): for v in range(n): if pref[u][v] == \'1\' and not visited[v]: visited[v] = True if match[v] == -1 or bpm(match[v]): match[v] = u return True return False for i in range(n): visited = [False] * n if not bpm(i): return False return True # Check if a perfect bipartite matching is possible if can_match(preferences): return \'possible\' else: return \'impossible\'"},{"question":"You are given a sequence of n sound frequencies, each an integer between 20 and 20000, representing the frequency components of a sound wave. The human ear perceives frequencies that are harmonic (integer multiples of a base frequency) as musically related. For this problem, you need to determine the largest set of frequencies where each frequency is harmonic to at least one other frequency in the set. A frequency f_1 is considered harmonic to a frequency f_2 if there exists an integer k geq 1 such that f_1 = k cdot f_2 or f_2 = k cdot f_1. -----Input----- The first line contains an integer t (1 le t le 10), the number of test cases. Each test case starts with an integer n (1 le n le 100), the number of frequencies in the sequence. The next line contains n space-separated integers representing the frequencies. -----Output----- For each test case, output a single line containing the size of the largest set of harmonic frequencies. -----Example----- Input 2 5 100 200 300 400 500 4 50 75 100 150 Output 5 3 -----Explanation----- In the first test case, all frequencies (100, 200, 300, 400, and 500) are harmonic to each other because: - 200 is 2 times 100. - 300 is 3 times 100. - 400 is 4 times 100. - 500 is 5 times 100. In the second test case, 50, 100, and 150 are harmonic to each other: - 100 is 2 times 50. - 150 is 3 times 50. But 75 is not harmonic to any other frequency. Hence the size of the largest set is 3.","solution":"def largest_harmonic_set(frequencies): Returns the size of the largest set of harmonic frequencies. def is_harmonic(f1, f2): if f1 % f2 == 0 or f2 % f1 == 0: return True return False n = len(frequencies) if n == 1: return 1 max_set_size = 1 for i in range(n): current_set = {frequencies[i]} for j in range(n): if i != j and is_harmonic(frequencies[i], frequencies[j]): current_set.add(frequencies[j]) max_set_size = max(max_set_size, len(current_set)) return max_set_size def process_test_cases(t, test_cases): results = [] for frequencies in test_cases: results.append(largest_harmonic_set(frequencies)) return results"},{"question":"Polycarpus is preparing a hierarchy of folders and files for a new project. He needs to structure the folders in a way that each folder can contain zero or more files and subfolders, but no file can contain further files or folders. Each folder or file is represented by a unique positive integer ID. Polycarpus has a list of relationships defining the parent-child connection between folders and files. He wants to determine the longest path from the root folder (the root folder is always represented by ID 1) to any file in this structure. The path length is defined by the number of edges traversed. Help Polycarpus to find the maximum depth of this hierarchy, starting from the root folder to the deepest file. Input The first line contains an integer n (1 ≤ n ≤ 1000000) — the total number of nodes (folders + files). The following n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) — representing an edge between nodes u and v where u is the parent and v is the child. It is guaranteed that the given structure is a valid hierarchy without cycles. Output Print a single number — the maximum depth from the root folder to any file. Examples Input 7 1 2 1 3 2 4 2 5 3 6 3 7 7 8 Output 3 Input 5 1 2 1 3 2 4 3 5 5 6 Output 3 Note In the first example, the maximum path length from the root folder (1) to any file is 3. The paths are 1 -> 3 -> 7 -> 8 or 1 -> 2 -> 4 (maximum length being 3). In the second example, the maximum path length from the root folder (1) to any file is 3. The paths are 1 -> 3 -> 5 -> 6 (maximum length being 3).","solution":"from collections import defaultdict, deque def find_max_depth(n, edges): if n == 1: return 0 tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def bfs(start): visited = set() queue = deque([(start, 0)]) visited.add(start) max_depth = 0 while queue: node, depth = queue.popleft() max_depth = max(max_depth, depth) for neighbor in tree[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, depth + 1)) return max_depth return bfs(1)"},{"question":"You are given a list of students and their grades for a particular course. Each student\'s information is stored as a string in the format `\\"student_name: grade\\"`, where `student_name` consists of letters and/or numbers and optionally spaces, and `grade` is an integer from 0 to 100. Your task is to create a program that processes this list and outputs the names of students who are at risk of failing the course. A student is considered at risk if their grade is less than 40. - The input starts with an integer `n` (1 ≤ n ≤ 1000), which represents the number of students. - The next `n` lines contain information about each student in the specified format. The length of each line will not exceed 100 characters. Output the names of students who are at risk, each on a new line, in the same order as they appear in the input. If no students are at risk, output \\"No students at risk\\". Input The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of students. The next `n` lines each contain a student\'s information in the format `\\"student_name: grade\\"`. Output Print the names of the students who are at risk, each on a new line, in the same order as they appear in the input. If no students are at risk, print \\"No students at risk\\". Examples Input 5 Alice: 35 Bob: 80 Charlie: 70 David: 39 Eve: 50 Output Alice David Input 3 John: 50 Jane: 45 Doe: 60 Output No students at risk","solution":"def students_at_risk(n, student_info): Returns the names of students who are at risk of failing the course. Parameters: n (int): Number of students. student_info (list): List of strings where each string contains a student\'s name and grade in the format \\"student_name: grade\\". Returns: list: List of names of students who are at risk. at_risk_students = [] for info in student_info: name, grade = info.split(\': \') if int(grade) < 40: at_risk_students.append(name) if not at_risk_students: return [\\"No students at risk\\"] return at_risk_students"},{"question":"Alice has an array of integers, initially consisting of the first N natural numbers in order. She repeatedly performs exactly one operation: removing either the first or last element of the array. Each time she performs the operation, she appends it to a log. Your task is to determine if Alice can empty the array by performing a sequence of operations such that no two consecutive log entries are the same and the log has exactly 2N-1 entries. Each operation is represented as follows: - \\"F\\": removing the first element. - \\"L\\": removing the last element. Implement the function `alice_operations(N: int) -> bool` that returns `True` if Alice can achieve this, otherwise `False`. # Constraints - 1 leq N leq 10^5 # Input - `N`: an integer representing the size of the array. # Output - Return `True` or `False`. # Example: **Input:** ```python alice_operations(1) ``` **Output:** ```python True ``` **Explanation:** By removing the first element, Alice empties the array and the log has exactly 1 value which is \\"F\\". There are no consecutive entries since log has only one entry. **Input:** ```python alice_operations(2) ``` **Output:** ```python True ``` **Explanation:** One potential log: [\\"F\\", \\"L\\", \\"F\\"] **Input:** ```python alice_operations(3) ``` **Output:** ```python False ``` **Explanation:** Any sequence of 2N-1 (=5) operations must have consecutive \\"F\\" or consecutive \\"L\\". **Input:** ```python alice_operations(4) ``` **Output:** ```python True ``` **Explanation:** One potential log: [\\"F\\", \\"L\\", \\"F\\", \\"L\\", \\"F\\", \\"L\\", \\"F\\"]","solution":"def alice_operations(N: int) -> bool: Determine if Alice can empty the array with operations such that no two consecutive log entries are the same and the log has exactly 2N-1 entries. # If N is a multiple of 2 or is 1, she can empty the array # 2N-1 == odd: hence it is always possible when (N is odd and greater than 2) return N == 1 or N % 2 == 0"},{"question":"Given a string (`str`) containing a mathematical expression in infix notation that includes the operators \'+\', \'-\', \'*\', \'/\' and parentheses, convert the expression to its equivalent postfix notation (also known as Reverse Polish Notation or RPN). The expression may contain single-digit integers (0-9). Return the resultant postfix expression as a string. Examples: 1. For the expression `\\"3+(4*5)-7\\"`, the equivalent postfix expression would be `\\"345*+7-\\"`. 2. For the expression `\\"(1+2)*3\\"`, the equivalent postfix expression would be `\\"12+3*\\"`. One way to follow through the conversion steps is: ``` convert_to_postfix(\\"2*(3+4)\\") 1: \\"2*(3+4)\\" 2: \\"2*34+\\" 3: \\"234+*\\" convert_to_postfix(\\"2*(3+4)\\") => \\"234+*\\" ``` Good luck with your implementation!","solution":"def convert_to_postfix(expression): Converts an infix mathematical expression to postfix notation (Reverse Polish Notation). :param expression: A string containing an infix expression with digits, \'+\', \'-\', \'*\', \'/\', and parentheses :return: A string with the equivalent postfix expression def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def infix_to_postfix(expression): stack = [] result = [] for char in expression: if char.isnumeric(): result.append(char) elif char == \'(\': stack.append(char) elif char == \')\': while stack and stack[-1] != \'(\': result.append(stack.pop()) stack.pop() else: # operator while (stack and precedence(stack[-1]) >= precedence(char)): result.append(stack.pop()) stack.append(char) while stack: result.append(stack.pop()) return \\"\\".join(result) return infix_to_postfix(expression)"},{"question":"std The std tool computes the standard deviation along the specified axis. import numpy my_array = numpy.array([[1, 2], [3, 4]]) print numpy.std(my_array, axis=0) #Output : [1. 1.] print numpy.std(my_array, axis=1) #Output : [0.5 0.5] print numpy.std(my_array, axis=None) #Output : 1.118033988749895 print numpy.std(my_array) #Output : 1.118033988749895 By default, the axis value is None. Therefore, it computes the standard deviation over all the dimensions of the input array. mean The mean tool computes the arithmetic mean along the specified axis. import numpy my_array = numpy.array([[1, 2], [3, 4]]) print numpy.mean(my_array, axis=0) #Output : [2. 3.] print numpy.mean(my_array, axis=1) #Output : [1.5 3.5] print numpy.mean(my_array, axis=None) #Output : 2.5 print numpy.mean(my_array) #Output : 2.5 By default, the axis value is None. Therefore, it computes the mean over all the dimensions of the input array. Task You are given a 2-D array with dimensions NxM. Your task is to compute the arithmetic mean along axis 1 and then find the standard deviation of those means. Input Format The first line of input contains space separated values of N and M. The next N lines contain M space separated integers. Output Format Compute the mean along axis 1. Then, print the standard deviation of those means. Sample Input 2 2 1 2 3 4 Sample Output 1.0 Explanation The mean along axis 1 = [1.5, 3.5] The standard deviation of these means = 1.0","solution":"import numpy as np def compute_std_of_means(array): Compute the mean along axis 1 and then find the standard deviation of those means. :param array: 2D array to compute statistics on :return: standard deviation of the means along axis 1 means = np.mean(array, axis=1) std_dev = np.std(means) return std_dev if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) M = int(data[1]) array = np.array(list(map(int, data[2:]))).reshape(N, M) result = compute_std_of_means(array) print(result)"},{"question":"Rupert is trying to organize his bookshelf. He has N books arranged in a single row, labeled from 1 to N from left to right, each with a unique height. Rupert likes a tidy shelf, so he wants to rearrange the books so that their heights are in non-decreasing order from left to right. Rupert can perform the following operation any number of times: he can choose any book and move it to the beginning or the end of the row. Determine the minimum number of operations required to get the books in non-decreasing order. Constraints: * All values in input are integers. * 1 leq N leq 1000 * 1 leq height_i leq 10^9 Input: Input is given from Standard Input in the following format: N height_1 height_2 ... height_N Output: Print the minimum number of operations required to sort the books in non-decreasing order. Examples: Input: 5 4 3 2 1 5 Output: 3 Explanation: - Move book with height 5 to the end: [4, 3, 2, 1] - Move book with height 4 to the end: [3, 2, 1] - Move book with height 3 to the end: [2,1] In three operations, the remaining books are in non-decreasing order. Input: 6 1 3 5 2 4 6 Output: 2 Explanation: - Move book with height 2 to the end: [1, 3, 5, 4, 6] - Move book with height 4 to the end: [1, 3, 5, 6] Two operations are needed to achieve the sorted order.","solution":"def min_operations_to_sort_books(N, heights): Returns the minimum number of operations required to sort the bookshelf in non-decreasing order. longest_increasing_subseq_end = [0] * N length = 1 # Initialize the first element of the increasing subsequence longest_increasing_subseq_end[0] = heights[0] for i in range(1, N): if heights[i] >= longest_increasing_subseq_end[length - 1]: longest_increasing_subseq_end[length] = heights[i] length += 1 else: left, right = 0, length - 1 while left < right: mid = (left + right) // 2 if longest_increasing_subseq_end[mid] <= heights[i]: left = mid + 1 else: right = mid longest_increasing_subseq_end[left] = heights[i] # The minimum operations required is the total number of books minus the length of the longest increasing subsequence return N - length"},{"question":"You are given an array of integers. Your task is to check whether the sum of elements of the array is odd or even and print the corresponding result. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 1 000) — the elements of the array. -----Output----- Print \\"ODD\\" if the sum of the elements in the array is odd. Otherwise, print \\"EVEN\\". You can output each letter in any case (upper or lower). -----Examples----- Input 5 1 2 3 4 5 Output ODD Input 4 2 4 6 8 Output EVEN","solution":"def odd_or_even_sum(n, arr): Determines if the sum of elements in the array is odd or even. Args: n (int): Number of elements in the array. arr (list): List of integers. Returns: str: \\"ODD\\" if the sum is odd, \\"EVEN\\" if the sum is even. total_sum = sum(arr) if total_sum % 2 == 0: return \\"EVEN\\" else: return \\"ODD\\""},{"question":"You’ve been appointed as the manager of a gold mine. You\'re given the layout of the mine in the form of an n times m grid, where each cell either contains some amount of gold or is an empty space. Each cell can be represented by a non-negative integer value, which states the amount of gold present in that cell. Your goal is to maximize the total amount of gold you can collect, starting from any cell in the first column and moving to any cell in the last column. You can move either: 1. To the cell directly to the right. 2. To the cell diagonally up to the right. 3. To the cell diagonally down to the right. You need to determine the maximum amount of gold you can collect. -----Input----- The first line of input contains an integer t (1 leq t leq 100) — the number of test cases. Then for each test case: - The first line contains two integers n and m (1 leq n, m leq 100). - The next n lines contain m integers each, where each integer g_{i,j} (0 leq g_{i,j} leq 100) represents the amount of gold in that cell. -----Output----- For each test case, output a single integer — the maximum amount of gold you can collect. -----Example----- Input 2 3 3 1 3 3 2 1 4 0 6 4 4 4 1 3 1 5 2 2 4 1 5 0 2 3 0 6 1 2 Output 12 16 -----Explanation----- In the first test case: By starting at cell (2,1) with gold = 2, we move right to cell (2,2) collecting 1 gold, then diagonally down to right to cell (3,3) collecting 4 gold, resulting in a total of 2 + 1 + 4 + 4 = 12. In the second test case: By starting at cell (4,1) with gold = 0, moving right to cell (4,2) collecting 6 gold, straight to cell (4,3) collecting 1 gold, and finally moving up diagonally to collect 3 gold in cell (3,4), resulting in a total of 0 + 6 + 1 + 2 = 16.","solution":"def max_gold_collected(test_cases): results = [] for case in test_cases: n, m, mine = case[\'n\'], case[\'m\'], case[\'mine\'] dp = [[0] * m for _ in range(n)] for col in range(m - 1, -1, -1): for row in range(n): right = dp[row][col + 1] if col < m - 1 else 0 right_up = dp[row - 1][col + 1] if row > 0 and col < m - 1 else 0 right_down = dp[row + 1][col + 1] if row < n - 1 and col < m - 1 else 0 dp[row][col] = mine[row][col] + max(right, right_up, right_down) max_gold = 0 for row in range(n): max_gold = max(max_gold, dp[row][0]) results.append(max_gold) return results"},{"question":"You are organizing a tournament with n participants. Each participant plays against every other participant exactly once. After all the matches are played, you want to rank the participants based on their performance. Each match result provides two pieces of information: a winner and a loser. Based on these match results, you want to determine if there is a unique ranking possible, such that if participant A is ranked higher than participant B, it means A has either defeated B directly or has a transitive path of victories leading to B. If there is more than one possible ranking, print \\"NO\\". Otherwise, print \\"YES\\" and the unique ranking. -----Input----- The first line contains an integer t (1 le t le 10) — the number of test cases. For each test case: - The first line contains an integer n (2 le n le 1000) — the number of participants. - The following n cdot (n - 1) / 2 lines each contain two integers a and b (1 le a, b le n, a neq b), indicating that participant a defeated participant b. -----Output----- For each test case, print \\"YES\\" and the unique ranking if there\'s only one possible unique ranking. Otherwise, print \\"NO\\". -----Example----- Input 2 4 1 2 1 3 1 4 2 3 2 4 3 4 3 1 2 2 3 3 1 Output YES 1 2 3 4 NO","solution":"def find_unique_ranking(t, match_results): def topological_sort(graph, n): in_degree = [0] * n for u in range(n): for v in graph[u]: in_degree[v] += 1 queue = [u for u in range(n) if in_degree[u] == 0] topo_order = [] while queue: if len(queue) > 1: return None u = queue.pop(0) topo_order.append(u) for v in graph[u]: in_degree[v] -= 1 if in_degree[v] == 0: queue.append(v) if len(topo_order) == n: return topo_order return None results = [] for case in match_results: n = case[\'n\'] matches = case[\'matches\'] graph = [[] for _ in range(n)] for a, b in matches: graph[a-1].append(b-1) topo_order = topological_sort(graph, n) if topo_order is not None: results.append((\'YES\', [x+1 for x in topo_order])) else: results.append((\'NO\', [])) return results # Example usage: def main(): t = 2 match_results = [ {\'n\': 4, \'matches\': [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]}, {\'n\': 3, \'matches\': [(1, 2), (2, 3), (3, 1)]} ] results = find_unique_ranking(t, match_results) for result in results: if result[0] == \'YES\': print(result[0]) print(\' \'.join(map(str, result[1]))) else: print(result[0]) main()"},{"question":"A popular problem in software development is calculating the optimal way to exchange currency given a set of exchange rates between currencies. You are given a list of currencies and possible exchange rates between them. Your task is to write a program that determines the maximum amount of target currency that can be obtained from a given amount of source currency. You will be given a set of exchange rates, source currency, target currency, and the initial amount of the source currency. Each exchange rate is a directed conversion rate from one currency to another, and there may be more than one way to convert currencies. * The first line contains an integer \'t\', the number of test cases. * Each test case starts with a line containing three pieces of information: - n: the number of currencies. - m: the number of exchange rates. - s: the index of the source currency. - t: the index of the target currency. * The second line contains an integer a, the initial amount of the source currency. * The next m lines each contain three pieces of information representing an exchange rate: - u: the index of the source currency for the exchange rate. - v: the index of the target currency for the exchange rate. - r: the exchange rate which is a float number representing the amount of currency v you get for one unit of currency u. You need to print the maximum amount of target currency that can be obtained from the given amount of source currency. 1 ≤ n ≤ 1000 1 ≤ m ≤ 100000 1 ≤ s, t ≤ n 0 ≤ a ≤ 10^12 Author: Your Name SAMPLE INPUT 1 3 3 1 3 100 1 2 1.5 2 3 1.2 1 3 1.3 SAMPLE OUTPUT 130.0 Explanation: Here, the initial amount of source currency 1 is 100. Using the direct exchange rate from 1 to 3, you get 100 * 1.3 = 130. Alternatively, you could convert 1 to 2 and then 2 to 3: 100 * 1.5 = 150 (in currency 2) 150 * 1.2 = 180 (in currency 3) The maximum amount of target currency 3 obtainable is therefore 180.0.","solution":"from collections import defaultdict, deque import sys def max_exchange_rate(num_currencies, num_rates, source, target, amount, rates): # Build graph with adjacency list graph = defaultdict(list) for u, v, r in rates: graph[u].append((v, r)) # Bellman-Ford algorithm dist = [-sys.maxsize] * (num_currencies + 1) dist[source] = amount for _ in range(num_currencies - 1): for u in range(1, num_currencies + 1): if dist[u] != -sys.maxsize: for v, r in graph[u]: if dist[u] * r > dist[v]: dist[v] = dist[u] * r return dist[target] def process_input(input_data): data = input_data.split(\'n\') idx = 0 t = int(data[idx]) idx += 1 results = [] for _ in range(t): n, m, s, t = map(int, data[idx].split()) idx += 1 a = float(data[idx]) idx += 1 rates = [] for _ in range(m): u, v, r = data[idx].split() rates.append((int(u), int(v), float(r))) idx += 1 result = max_exchange_rate(n, m, s, t, a, rates) results.append(result) return results"},{"question":"A company has a warehouse with a set of unique items, each identified by a unique serial number. The warehouse needs a system to manage these items efficiently. They want to implement a `Warehouse` class with methods to add items, remove items, and find items efficiently. Here are the details of the methods required: 1. `add_item(serial_number)`: Adds an item with the given serial number to the warehouse. If an item with the same serial number already exists, raise a `ValueError` with the message \\"Item already exists!\\". 2. `remove_item(serial_number)`: Removes an item with the given serial number from the warehouse. If no such item exists, raise a `ValueError` with the message \\"Item does not exist!\\". 3. `find_item(serial_number)`: Checks if an item with the given serial number exists in the warehouse. Return `True` if the item exists, otherwise return `False`. Write the implementation of the `Warehouse` class in Python. The class should be designed to handle a large number of items efficiently. Example Usage: ```python warehouse = Warehouse() warehouse.add_item(\\"A123\\") warehouse.add_item(\\"B456\\") print(warehouse.find_item(\\"A123\\")) # Output: True print(warehouse.find_item(\\"C789\\")) # Output: False warehouse.remove_item(\\"A123\\") print(warehouse.find_item(\\"A123\\")) # Output: False warehouse.remove_item(\\"X999\\") # Raises ValueError: Item does not exist! ``` Constraints: * All serial numbers are strings consisting of alphanumeric characters. * At most 100,000 operations will be performed on the warehouse. * An operation is defined as adding, removing, or finding an item. Create the `Warehouse` class that satisfies the requirements described above.","solution":"class Warehouse: def __init__(self): self.items = set() def add_item(self, serial_number): if serial_number in self.items: raise ValueError(\\"Item already exists!\\") self.items.add(serial_number) def remove_item(self, serial_number): if serial_number not in self.items: raise ValueError(\\"Item does not exist!\\") self.items.remove(serial_number) def find_item(self, serial_number): return serial_number in self.items # Example usage: # warehouse = Warehouse() # warehouse.add_item(\\"A123\\") # warehouse.add_item(\\"B456\\") # print(warehouse.find_item(\\"A123\\")) # Output: True # print(warehouse.find_item(\\"C789\\")) # Output: False # warehouse.remove_item(\\"A123\\") # print(warehouse.find_item(\\"A123\\")) # Output: False # warehouse.remove_item(\\"X999\\") # Raises ValueError: Item does not exist!"},{"question":"You are given a list of points in a 2D plane. Each point is represented as an (x, y) coordinate. Your task is to find a pair of points such that the distance between them is maximized. The distance between two points (x1, y1) and (x2, y2) is defined as sqrt((x2 - x1)^2 + (y2 - y1)^2), which is the Euclidean distance. **Input** The first line contains an integer n (2 ≤ n ≤ 10000), the number of points. The next n lines each contain two integers x and y (|x|, |y| ≤ 10^9), representing the coordinates of the points. **Output** Output two integers: the coordinates of the two points such that the distance between them is the maximum. If there are multiple pairs with the same maximum distance, print any one of them. **Examples** **Input** 5 1 1 -1 -1 2 2 -2 -3 0 0 **Output** 1 1 -2 -3 **Input** 3 1000000000 1000000000 -1000000000 -1000000000 0 0 **Output** 1000000000 1000000000 -1000000000 -1000000000","solution":"import math def max_distance_points(points): Given a list of points, returns the pair of points that maximize the Euclidean distance. Parameters: points (list of tuples): A list of tuples where each tuple represents a point (x, y) Returns: tuple of tuples: Two points (x1, y1) and (x2, y2) with the maximum distance between them max_dist = 0 point1 = point2 = (0, 0) for i in range(len(points)): for j in range(i + 1, len(points)): x1, y1 = points[i] x2, y2 = points[j] dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) if dist > max_dist: max_dist = dist point1 = points[i] point2 = points[j] return point1, point2 def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) points = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(n)] return points if __name__ == \\"__main__\\": points = read_input() p1, p2 = max_distance_points(points) print(f\\"({p1[0]} {p1[1]}) ({p2[0]} {p2[1]})\\")"},{"question":"Given an array of integers, you are allowed to perform the following operations any number of times: a. Shift the array left, meaning the first element of the array moves to the last position, and all other elements shift one position to the left. For example, if the array is [1,2,3,4], shifting it left results in [2,3,4,1]. b. Reverse the array, meaning the order of all elements in the array is reversed. For example, if the array is [1,2,3,4], reversing it results in [4,3,2,1]. Your task is to determine the lexicographically smallest array possible after performing any number of the described operations. Input Format A single line containing integers separated by spaces, which represents the initial array. Output Format A single line containing integers separated by spaces, which represents the lexicographically smallest array possible. Constraints 1 ≤ number of integers in the array ≤ 1000 Each integer in the array is between 0 and 1000. SAMPLE INPUT 3 2 1 SAMPLE OUTPUT 1 2 3 Explanation One possible sequence of operations to achieve the lexicographically smallest array [1, 2, 3] is to first reverse the array to get [1, 2, 3], which is already in the smallest lexicographical order.","solution":"def lexicographically_smallest_array(arr): Returns the lexicographically smallest array possible after performing any number of allowed operations (shifting the array left, and reversing the array). :param arr: List[int] - the initial array of integers :return: List[int] - the lexicographically smallest array possible # Get a sorted version of the given array sorted_arr = sorted(arr) return sorted_arr"},{"question":"In a faraway kingdom, the wise King Arthur tasked his knights with solving difficult programming challenges to test their worthiness. One such challenge involved strings and their transformations. The problem posed was as follows: Given a string, determine the lexicographically smallest string that can be constructed by rearranging its characters such that no two adjacent characters are the same. If no such arrangement is possible, return the string \\"Not Possible\\". Input: A single line containing a string consisting of lowercase English letters. Output: A single line representing the lexicographically smallest reorganized string or \\"Not Possible\\" if the condition cannot be met. Constraints: - The length of the string will be between 1 and 100000. Example Input: aaabbc Output: ababac Input: aaab Output: Not Possible Explanation: In the first example, the string \\"aaabbc\\" can be rearranged to \\"ababac\\", which is the lexicographically smallest arrangement with no two adjacent characters being the same. In the second example, the string \\"aaab\\" cannot be rearranged to meet the condition, so the output is \\"Not Possible\\".","solution":"from heapq import heappush, heappop from collections import Counter def reorganize_string(s): Returns the lexicographically smallest string that can be constructed by rearranging its characters such that no two adjacent characters are the same. Returns \\"Not Possible\\" if no such arrangement is possible. frequency = Counter(s) max_heap = [] for char, freq in frequency.items(): if freq > (len(s) + 1) // 2: return \\"Not Possible\\" heappush(max_heap, (-freq, char)) result = [] prev_char = None prev_freq = 0 while max_heap: freq, char = heappop(max_heap) result.append(char) if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 return \'\'.join(result)"},{"question":"You are provided a series of water tank levels, each representing the water level in the tank at the end of a day. You need to determine for each day whether the water level in the tank on that day is strictly higher than the water level on the previous day. If the level hasn\'t changed or has decreased, it doesn\'t count. Constraints * 2 leq n leq 10^5 * 0 leq W_i leq 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: ``` n W_1 W_2 W_3 ldots W_n ``` The first line contains a single integer `n` (number of days). The second line contains `n` integers `W_1, W_2, ..., W_n` (water level on each day). Output Print `n-1` lines. The i-th line should contain `Yes` if the water level on the (i+1)-th day is strictly higher than the level on the i-th day, and `No` otherwise. Examples Input ``` 5 99 102 101 104 107 ``` Output ``` Yes No Yes Yes ``` Input ``` 4 500 500 500 501 ``` Output ``` No No Yes ``` Input ``` 3 0 1 0 ``` Output ``` Yes No ```","solution":"def check_water_levels(n, levels): Checks if the water level on the (i+1)-th day is strictly higher than the level on the i-th day. result = [] for i in range(1, n): if levels[i] > levels[i - 1]: result.append(\\"Yes\\") else: result.append(\\"No\\") return result # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) levels = list(map(int, data[1:])) results = check_water_levels(n, levels) for res in results: print(res)"},{"question":"Tina is arranging a line of toy blocks. Each block is either a cube, a sphere, or a cylinder. Tina is only interested in whether there are any two adjacent blocks of the same shape. Can you help her determine if her arrangement meets this condition? -----Input----- The input consists of multiple test cases. The first line holds an integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 leq n leq 100) — the number of blocks in the line. The second line of each test case contains a string of length n, where each character is either C, S, or Y, representing a cube, sphere, or cylinder, respectively. -----Output----- For each test case, output \\"YES\\" if there are two adjacent blocks of the same type, and \\"NO\\" otherwise. You can output the answer in any case (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will be recognized as a positive answer). -----Examples----- Input: 5 4 CSCY 3 YYY 5 CCSYY 6 CYSYCS 2 SS Output: NO YES YES NO YES -----Note----- In the first test case, there are no two adjacent blocks of the same type. In the second test case, all three blocks are of the same type (Y), so there are adjacent blocks of the same type. In the third test case, there is a pair of adjacent blocks of the same type (C). In the fourth test case, there are no two adjacent blocks of the same type. In the fifth test case, both blocks are of the same type (S).","solution":"def has_adjacent_same_blocks(test_cases): results = [] for blocks in test_cases: found = False for i in range(1, len(blocks)): if blocks[i] == blocks[i - 1]: found = True break results.append(\\"YES\\" if found else \\"NO\\") return results def process_input(input_string): data = input_string.strip().split() t = int(data[0]) test_cases = [] index = 1 for _ in range(t): n = int(data[index]) blocks = data[index + 1] index += 2 test_cases.append(blocks) return test_cases"},{"question":"Given a string s, you need to find the minimum number of operations required to convert s into a string where no two adjacent characters are the same. In each operation, you can replace a character with any lowercase English letter \'a\' to \'z\'. Return the minimum number of operations needed to achieve the desired string. Example 1: Input: s = \\"aaab\\" Output: 2 Explanation: Replace the second \'a\' with \'b\' and the third \'a\' with \'c\' to get \\"abac\\". Example 2: Input: s = \\"aaaa\\" Output: 3 Explanation: Replace the second, third, and fourth \'a\' with \'b\', \'c\', and \'d\' respectively to get \\"abcd\\". Example 3: Input: s = \\"abab\\" Output: 0 Explanation: The string already has no two adjacent characters that are the same. Constraints: - 1 <= s.length <= 10^5 - s contains only lowercase English letters.","solution":"def min_operations_to_alternate(s: str) -> int: Returns the minimum number of operations required to convert the string so that no two adjacent characters are the same. :param s: A string s consisting of lowercase English letters. :return: Minimum number of operations needed. n = len(s) if n == 1: return 0 operations = 0 for i in range(1, n): if s[i] == s[i - 1]: operations += 1 return operations"},{"question":"You are given a series of operations to be performed on a queue as follows: - \\"enqueue(x)\\" to add element x to the end of the queue. - \\"dequeue()\\" to remove and return the element from the front of the queue. - \\"getMax()\\" to return the maximum element present in the queue at any given point. Your task is to implement these operations such that all the functions run in O(1) time. Example 1: Input: enqueue(2) enqueue(5) dequeue() getMax() enqueue(3) getMax() Output: 5 3 Explanation: In the first test case: enqueue(2) Insert 2 into the queue. The queue will be {2} enqueue(5) Insert 5 into the queue. The queue will be {2, 5} dequeue() Remove front element from the queue. The removed element will be 2, the queue will be {5} getMax() Return the maximum element, which is 5. enqueue(3) Insert 3 into the queue. The queue will be {5, 3} getMax() Return the maximum element, which is 5. Your Task: You are required to complete the three methods enqueue() which takes one argument an integer \'x\' to be added to the queue, dequeue() which returns the integer removed from the front of the queue, and getMax() which returns the max element from the queue. (-1 will be returned if the queue is empty for dequeue() and getMax()). Expected Time Complexity: O(1) for all the 3 methods. Expected Auxiliary Space: O(n) where n is the number of elements in the queue. Constraints: 1 <= Number of queries <= 100 1 <= values of the queue <= 100","solution":"from collections import deque class MaxQueue: def __init__(self): Initialize your data structure here. self.queue = deque() self.max_queue = deque() def enqueue(self, x: int) -> None: Add element x to the end of the queue. self.queue.append(x) while self.max_queue and self.max_queue[-1] < x: self.max_queue.pop() self.max_queue.append(x) def dequeue(self) -> int: Remove and return the element from the front of the queue. if not self.queue: return -1 removed = self.queue.popleft() if removed == self.max_queue[0]: self.max_queue.popleft() return removed def getMax(self) -> int: Return the maximum element present in the queue at any given point. if not self.max_queue: return -1 return self.max_queue[0]"},{"question":"Alice is a programmer who likes to create interesting patterns using ASCII characters. She wants to generate a pattern based on a given dimension and a specified character. The pattern should be a square grid of size n × n, where n is an odd integer. The character should form a plus sign (\'+\') in the center of the grid, and the rest of the cells should be filled with dots (\'.\'). The plus sign should extend from the center row and column, spanning the full length of the grid. For example, if n is 5 and the character is \'#\', the pattern should look like this: ``` ..#.. ..#.. # ..#.. ..#.. ``` Write a program to generate and print this pattern based on the given inputs. Input The first line of input contains an odd integer n (1 ≤ n ≤ 99) — the size of the grid. The second line of input contains a single character c — the character to be used for the plus sign. Output Print the n × n grid with the specified pattern. Examples Input 5 # Output ..#.. ..#.. # ..#.. ..#.. Input 3 * Output .*. *** .*. Input 1 @ Output @","solution":"def generate_pattern(n, c): Generates an n x n pattern with character c forming a plus sign in the center of the grid. Args: n (int): size of the grid (must be an odd integer) c (str): character used to form the plus sign Returns: List[str]: the resulting pattern as a list of strings # Initialize the grid with dots grid = [[\'.\' for _ in range(n)] for _ in range(n)] # Find the middle index mid = n // 2 # Create the plus sign for i in range(n): grid[mid][i] = c # horizontal line grid[i][mid] = c # vertical line # Convert each row to a string return [\'\'.join(row) for row in grid]"},{"question":"Write a function that takes a list of dictionaries and merges them into a single dictionary. In case of key conflicts, the values should be summed if they are integers. If any value is not an integer, the value from the latter dictionary in the list should be taken. For example: ``` [{\\"a\\": 1, \\"b\\": 2}, {\\"b\\": 3, \\"c\\": 4}] --> {\\"a\\": 1, \\"b\\": 5, \\"c\\": 4} [{\\"x\\": 10, \\"y\\": \\"hello\\"}, {\\"y\\": \\"world\\", \\"z\\": 100}] --> {\\"x\\": 10, \\"y\\": \\"world\\", \\"z\\": 100} ```","solution":"def merge_dicts(dict_list): Merges a list of dictionaries into a single dictionary. In case of key conflicts: - If the values are integers, the values are summed. - If any value is not an integer, the value from the latter dictionary in the list is taken. Args: dict_list (list): List of dictionaries. Returns: dict: A single merged dictionary. merged_dict = {} for d in dict_list: for key, value in d.items(): if key in merged_dict: if isinstance(merged_dict[key], int) and isinstance(value, int): merged_dict[key] += value else: merged_dict[key] = value else: merged_dict[key] = value return merged_dict"},{"question":"Given an array of integers and an integer K, return all possible permutations of the array elements of length K. Note: 1. All elements in the array are unique. 2. Each permutation must contain K elements. 3. The order of permutations in the output does not matter. Example 1: Input: N = 3 arr[] = {1, 2, 3} K = 2 Output: [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] Example 2: Input: N = 4 arr[] = {4, 5, 6, 7} K = 3 Output: [[4, 5, 6], [4, 5, 7], [4, 6, 5], [4, 6, 7], [4, 7, 5], [4, 7, 6], [5, 4, 6], [5, 4, 7], [5, 6, 4], [5, 6, 7], [5, 7, 4], [5, 7, 6], [6, 4, 5], [6, 4, 7], [6, 5, 4], [6, 5, 7], [6, 7, 4], [6, 7, 5], [7, 4, 5], [7, 4, 6], [7, 5, 4], [7, 5, 6], [7, 6, 4], [7, 6, 5]] Your Task: Your task is to complete the function `permuteLengthK()` which takes the array A, its length N, and the integer K as inputs and returns a list of lists denoting the required permutations. Expected Time Complexity: O(N! / (N - K)!) Expected Auxiliary Space: O(K) Constraints: 1 <= N <= 10 1 <= A[i] <= 100 1 <= K <= N","solution":"from itertools import permutations def permuteLengthK(arr, N, K): Returns all possible permutations of length K from the given array. Parameters: arr (list): The input array N (int): The length of the input array K (int): The length of each permutation Returns: list: A list of lists containing all permutations of length K return [list(perm) for perm in permutations(arr, K)]"},{"question":"You are given the task of helping a small online-shop manage its inventory. The shop has a list of items, each with a unique item code. When an order comes in, the shop needs to quickly determine whether or not all the items in the order are available in the inventory. If even one item is missing, the entire order cannot be fulfilled. Your task is to write a function that takes two lists: the first list contains the item codes currently in the inventory, and the second list contains the item codes of an order. The function should return True if the order can be fully fulfilled with the available inventory and False otherwise. Input The input consists of two lines: 1. The first line contains a space-separated list of strings representing the item codes in the inventory. 2. The second line contains a space-separated list of strings representing the item codes in the order. Output Output a single line containing \\"True\\" if the order can be fulfilled or \\"False\\" otherwise. Example Input ```plaintext abc123 xyz456 lmn789 xyz456 abc123 ``` Output ```plaintext True ``` Input ```plaintext abc123 xyz456 lmn789 xyz456 abc123 pqr678 ``` Output ```plaintext False ``` Notes * The inventory and order lists can each contain between 1 to 1000 item codes. * Each item code is a string of alphanumeric characters with a maximum length of 10 characters.","solution":"def can_fulfill_order(inventory, order): Determine if an order can be fulfilled based on the available inventory. Args: inventory (list of str): List of item codes currently in the inventory. order (list of str): List of item codes in the order. Returns: bool: True if the order can be fulfilled, False otherwise. inventory_set = set(inventory) for item in order: if item not in inventory_set: return False return True"},{"question":"Lara loves collecting toys and has a complex organization system for her extensive collection. She has n shelves arranged linearly, each of which can hold a certain maximum number of toys. Lara has t different toys and she knows how much space each toy type takes up on the shelf. Lara wants to place each type of toy on the shelves in such a way that the total space occupied by the toys does not exceed the capacity of any shelf, and since she loves an orderly arrangement, each type of toy can only be placed on one shelf completely (i.e., she cannot split a single type of toy across multiple shelves). Help Lara to determine whether she can organize all her toys on the shelves under these constraints. **Input** The first line contains two integers n and t (1 le n, t le 1000) — the number of shelves and the number of different toys Lara has. The second line contains n integers c_1, c_2, ldots, c_n (1 le c_i le 10^9) — the maximum number of units of space on each shelf. The third line contains t integers s_1, s_2, ldots, s_t (1 le s_i le 10^9) — the amount of space each type of toy occupies. **Output** If it is possible for Lara to arrange all her toys on the shelves according to the given rules, print \\"POSSIBLE\\". Otherwise, print \\"IMPOSSIBLE\\". **Examples** Input 3 3 10 10 10 5 8 6 Output POSSIBLE Input 3 2 7 5 8 9 4 Output IMPOSSIBLE Input 4 5 15 10 8 13 8 5 5 10 12 Output IMPOSSIBLE *Note* In the first example, Lara can place the toys of space 5 on the first shelf, toys of space 8 on the second shelf, and toys of space 6 on the third shelf. In the second example, it is impossible to place the toy of space 9 on any shelf and still satisfy the conditions.","solution":"def can_organize_toys_on_shelves(n, t, shelf_capacities, toy_sizes): shelf_capacities.sort(reverse=True) toy_sizes.sort(reverse=True) for toy_size in toy_sizes: placed = False for i in range(n): if shelf_capacities[i] >= toy_size: shelf_capacities[i] -= toy_size placed = True break if not placed: return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\""},{"question":"Alice is planning to buy some items during a sale event. She has a list of items with their prices and wants to spend as much of her budget as possible without exceeding it. Given a list of item prices and her budget, help Alice determine the maximum number of items she can buy. Input: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains her budget, B. - The second line contains N, the number of items. - The third line contains N space-separated integers representing the prices of the items. Output: For each test case, output a single integer, the maximum number of items Alice can buy without exceeding her budget. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ B ≤ 10^5 - 1 ≤ N ≤ 100 - 1 ≤ Price of each item ≤ 10^4 SAMPLE INPUT: 2 50 5 10 20 30 40 50 100 7 10 20 30 40 10 20 30 SAMPLE OUTPUT: 2 5 Explanation: In the first test case, Alice can buy items priced at 10 and 20, totaling 30, which is within her budget of 50. In the second test case, Alice can buy items priced at 10, 20, 30, 10, and 20, totaling 90, which is within her budget of 100.","solution":"def max_items_within_budget(budget, prices): prices.sort() count = 0 total_spent = 0 for price in prices: if total_spent + price > budget: break total_spent += price count += 1 return count def process_test_cases(test_cases): results = [] for case in test_cases: budget, prices = case result = max_items_within_budget(budget, prices) results.append(result) return results def main(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): budget = int(lines[index]) N = int(lines[index + 1]) prices = list(map(int, lines[index + 2].split())) test_cases.append((budget, prices)) index += 3 results = process_test_cases(test_cases) return results"},{"question":"You are given an array of integers and you need to determine if you can split this array into exactly two non-empty parts such that the sum of the elements in the first part is equal to the sum of the elements in the second part. Write a function `can_split(arr)` that takes a list of integers `arr` and returns a boolean indicating whether such a split is possible. # Input - A list of integers `arr` where 1 leq text{len(arr)} leq 10^5 and -10^9 leq text{arr[i]} leq 10^9. # Output - Return `True` if the array can be split into two non-empty parts with equal sum, otherwise return `False`. # Examples Example 1 ```python arr = [1, 2, 3, 4, 5, 5] print(can_split(arr)) # Output: True ``` - Explanation: The array can be split into [1, 2, 3, 4] and [5, 5], both parts have the sum 10. Example 2 ```python arr = [1, 1, 1, 1, 6] print(can_split(arr)) # Output: False ``` - Explanation: There is no way to split the array into two parts with equal sum. # Note - The split must result in two non-empty parts. - The sum of the parts does not include the same index twice; i.e., each value from the original array belongs to only one of the two resulting parts. # Function Signature ```python def can_split(arr: List[int]) -> bool: pass ```","solution":"def can_split(arr): Determines whether an array can be split into two non-empty parts with equal sum. Parameters: arr (list): The list of integers to be split. Returns: bool: True if such a split is possible, False otherwise. total_sum = sum(arr) # If the total sum is odd, it is not possible to split it into two equal parts. if total_sum % 2 != 0: return False target_sum = total_sum // 2 current_sum = 0 # Traverse the array to find the point where the sum of the first part equals target_sum for i in range(len(arr) - 1): current_sum += arr[i] if current_sum == target_sum: return True return False"},{"question":"You are working on a video game that involves navigating through a rectangular grid map. The map is represented as an n times m grid of cells, where each cell is either passable or contains an obstacle. Your goal is to move from the top-left cell (1, 1) to the bottom-right cell (n, m). You can move from one cell to another one if they share an edge (i.e., move up, down, left, or right). Each move to a passable cell costs 1 unit of energy. If the cell is an obstacle, you cannot traverse that cell. You need to find out the minimum units of energy required to reach the bottom-right cell from the top-left cell. If it is not possible to reach the bottom-right cell, return -1. -----Input----- The first line contains two integers, n and m (1 leq n, m leq 1000)— the size of the grid. Each of the next n lines contains m characters each. The character is either \'.\' which denotes a passable cell, or \'#\' which denotes an obstacle. -----Output----- Print the minimum units of energy required to move from the top-left cell (1, 1) to the bottom-right cell (n, m). If it is not possible to reach the bottom-right cell, print -1. -----Example----- Input 4 5 ..... ..#.. ..... ...#. Output 7 Input 3 3 .#. # .#. Output -1 -----Note----- In the first example, one possible path with minimum energy is (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,4) -> (4,4) -> (4,5), which requires 7 units of energy. In the second example, it is not possible to reach the bottom-right cell because there is no viable path avoiding obstacles. So, the output is -1.","solution":"from collections import deque def min_energy_to_reach_bottom_right(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (x, y, energy) visited[0][0] = True while queue: x, y, energy = queue.popleft() if x == n-1 and y == m-1: return energy for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, energy + 1)) return -1"},{"question":"You are given a series of workshop sessions over W days and N queries to update the session\'s topics. Each session on a day has a specific topic identifier (an integer between 1 and 50). For the i-th query, you will be given two integers d_i and t_i, indicating that the topic of the session on day d_i should be updated to t_i. After each query, calculate and output the total popularity score of all the completed sessions (days 1 through W). Assume that each topic has an associated popularity score, provided in the input. Changes from previous queries should be preserved in subsequent queries. Input The input is given in the following format: ``` W t_1 t_2 ... t_W p_1 p_2 ... p_50 N d_1 t_1 d_2 t_2 ... d_N t_N ``` - W: Number of days - t_i: Topic identifier for the session on day i - p_i: Popularity score of the topic i - N: Number of queries - d_i: Day integer for the i-th query (1 ≤ d_i ≤ W) - t_i: Topic identifier for the session after the i-th query (1 ≤ t_i ≤ 50) Output Output N integers, each representing the total popularity score of all completed sessions after each query. Example Input ``` 4 3 2 3 4 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390 400 410 420 430 440 450 460 470 480 490 500 3 1 4 4 2 2 1 ``` Output ``` 120 110 140 ``` Explanation For the given example: 1. Initially, the topics are [3, 2, 3, 4] with assigned popularity scores. 2. After the first query (1, 4): topics become [4, 2, 3, 4], the popularity score is 40 + 20 + 30 + 40 = 130. 3. After the second query (4, 2): topics become [4, 2, 3, 2], the popularity score is 40 + 20 + 30 + 20 = 110. 4. After the third query (2, 1): topics become [4, 1, 3, 2], the popularity score is 40 + 10 + 30 + 20 = 100.","solution":"def update_session_topics(W, topics, popularity_scores, queries): Updates session topics based on queries and calculates the total popularity score after each query. Args: W (int): Number of days topics (list of ints): Initial topics for each day popularity_scores (list of ints): Popularity scores for topics 1 to 50 queries (list of tuples): Each tuple contains (d_i, t_i) indicating the day and topic update Returns: list of ints: Total popularity scores after each query # Initialize the result list result = [] # Process each query for d_i, t_i in queries: # Update the topic for the given day topics[d_i - 1] = t_i # Calculate the total popularity score total_score = sum(popularity_scores[topic - 1] for topic in topics) # Append the result result.append(total_score) return result"},{"question":"There is a warehouse with a storage capacity of W items. The warehouse receives a sequence of S events detailing the inflow and outflow of items. Each event is one of two types: - `add x` : This denotes that x items are added to the warehouse. - `remove y` : This denotes that y items are removed from the warehouse. It is guaranteed that the events are processed sequentially. Your task is to determine if the sequence of events is valid, i.e., at no point in time does the number of items in the warehouse exceed the storage capacity W or go below zero. ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each test case begins with two space-separated integers W and S. - The next S lines describe the events. Each event is represented by a string `ev` (either \\"add\\" or \\"remove\\") followed by an integer x (the quantity being added or removed). ------ Output Format ------ For each test case, print a single line containing one string - \\"Valid\\" (without quotes) if the sequence of events is valid, \\"Invalid\\" (without quotes) otherwise. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ W ≤ 10^{6} 1 ≤ S ≤ 10^4 1 ≤ x ≤ 10^5 ------ Sample Input 1 ------ 2 100 3 add 50 add 30 remove 20 50 4 add 30 remove 40 add 50 remove 10 ------ Sample Output 1 ------ Valid Invalid ------ Explanation ------ - Test case 1: The warehouse handles the events without exceeding the storage capacity or going below zero items. - Test case 2: The warehouse has insufficient items to remove 40 after adding 30, making the sequence invalid.","solution":"def validate_warehouse_events(T, test_cases): results = [] for case in test_cases: W, S, events = case current_storage = 0 valid = True for event in events: ev, x = event.split() x = int(x) if ev == \\"add\\": current_storage += x if current_storage > W: valid = False break elif ev == \\"remove\\": if current_storage < x: valid = False break current_storage -= x results.append(\\"Valid\\" if valid else \\"Invalid\\") return results"},{"question":"Problem statement Alice has a string `S` of length `N` consisting of lowercase English letters. Bob wants to perform a series of `Q` operations on the string. In each operation, Bob can either: 1. Replace a character at a specified position with a new character. 2. Check if the substring from index `L` to `R` (inclusive) is a palindrome. A string is called a palindrome if it reads the same forwards and backwards. Your task is to implement the required functionalities to support Bob\'s operations. Constraints: * All inputs are integers except where specified. * `1 ≤ N ≤ 100000` * `1 ≤ Q ≤ 100000` * `1 ≤ L ≤ R ≤ N` * `S` will only consist of lowercase English letters. * Changes and queries will be 1-indexed. Input The first line contains the string `S`. The second line contains an integer `Q` representing the number of operations. The next `Q` lines each contain an operation in one of the following formats: 1. `1 P C` where `P` is the position (1-based index) on which character will be replaced with `C`. 2. `2 L R` where `L` is the starting index and `R` is the ending index of the substring to check if it is a palindrome. Output For each operation of type `2 L R`, output \\"YES\\" if the substring `S[L:R]` is a palindrome, otherwise output \\"NO\\". Input example 1 `abccba` `5` `2 1 6` `1 3 a` `2 1 6` `2 2 5` `1 6 c` Output example 1 ` YES NO YES NO` Explanation * The initial string is \\"abccba\\". The substring from 1 to 6 is \\"abccba\\", which is a palindrome. * After the first replacement, the string becomes \\"abacba\\". * The substring from 1 to 6 in the new string \\"abacba\\" is no longer a palindrome. * The substring from 2 to 5 is \\"bcca\\", which is not a palindrome. * After the second replacement, the string becomes \\"abacca\\". * The substring from 1 to 6 \\"abacca\\" is not a palindrome.","solution":"class StringOperations: def __init__(self, S): Initialize with string S. self.S = list(S) # Store S as a list for mutability def replace_character(self, P, C): Replace the character at position P (1-based index) with character C. self.S[P - 1] = C def is_palindrome(self, L, R): Check if the substring from L to R (inclusive, 1-based index) is a palindrome. substring = self.S[L - 1:R] return substring == substring[::-1] # Check if the substring reads the same forwards and backwards def process_operations(S, operations): string_ops = StringOperations(S) results = [] for operation in operations: op = operation.split() op_type = int(op[0]) if op_type == 1: # Replace operation: 1 P C P = int(op[1]) C = op[2] string_ops.replace_character(P, C) elif op_type == 2: # Palindrome check operation: 2 L R L = int(op[1]) R = int(op[2]) if string_ops.is_palindrome(L, R): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array B of N positive integers. You can perform a series of operations on the array - each operation consists of choosing an adjacent pair of elements and reducing the larger number in the pair by the smaller number. This operation is repeated until one of the elements in the pair becomes zero. The remaining non-zero element replaces the pair in the array. Your task is to determine the minimum possible final array sum after performing any number of such operations on all pairs until no more operations can be performed. For example, applying the operation on a pair (x, y) with x >= y results in reducing x by y or vice versa until one becomes zero. Example 1: Input: [6, 10, 15] Output: 5 Explanation: We can perform the following operations: Step 1: Reduce pair [6, 10] to [4] -> array becomes [4, 15]. Step 2: Reduce pair [4, 15] to [1] -> array becomes [1]. Example 2: Input: [12, 24, 36] Output: 24 Explanation: We can perform the following operations: Step 1: Reduce pair [12, 24] to [12] -> array becomes [12, 36]. Step 2: Reduce pair [12, 36] to [12] -> array becomes [12]. Example 3: Input: [7, 14, 28] Output: 7 Explanation: Pair reductions always fall back to the smallest non-zero element as other elements reduce to zero. Note: 1 <= B.length <= 100 1 <= B[i] <= 10^6","solution":"import math from functools import reduce def gcd(a, b): Returns the greatest common divisor of a and b. while b: a, b = b, a % b return a def gcd_of_array(arr): Returns the greatest common divisor of an array of numbers. return reduce(gcd, arr) def min_possible_final_array_sum(B): Returns the minimum possible final array sum after performing the operations. return gcd_of_array(B)"},{"question":"A group of friends decided to compete in a series of games. After each game, the winner\'s name is recorded. At the end of the series, they want to determine which friend won the most games. Write a program to compute the name of the overall winner. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of games played. Then follow n lines — for each game, the name of the friend who won it. The names are non-empty lines consisting of uppercase Latin letters with lengths not exceeding 10 symbols. It is guaranteed that there is a single overall winner (i.e., no ties). Output Print the name of the overall winner. Examples Input 3 ALICE BOB ALICE Output ALICE Input 4 JANE JANE TOM JANE Output JANE","solution":"def find_overall_winner(n, winners_list): This function takes in the number of games played (n) and a list of winners for each game, and returns the name of the friend who won the most games. from collections import Counter winner_count = Counter(winners_list) overall_winner = winner_count.most_common(1)[0][0] # [(winner_name, count)] format, we need name only return overall_winner"},{"question":"Given a string representing the forecast for the next N days. Each character in the string is either \'S\' (Sunny), \'C\' (Cloudy), or \'R\' (Rainy). You need to determine the longest consecutive sequence of sunny days. Example 1: Input: forecast = \\"SRSSC\\" Output: 2 Explanation: The longest sequence of sunny days is \\"SS\\". Example 2: Input: forecast = \\"CCRRRCSSS\\" Output: 3 Explanation: The longest sequence of sunny days is \\"SSS\\". Example 3: Input: forecast = \\"CCCCCCC\\" Output: 0 Explanation: There are no sunny days. Your task: You don\'t need to read input or print anything. Your task is to complete the function `longestSunnyStreak()` which accepts a string as input parameter and returns the length of the longest consecutive sequence of sunny days. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 forecast[i] = \'S\' or \'C\' or \'R\'","solution":"def longestSunnyStreak(forecast): Given a string representing the forecast for the next N days, determine the longest consecutive sequence of sunny days. Args: forecast (str): A string representing forecast with \'S\' for sunny, \'C\' for cloudy and \'R\' for rainy. Returns: int: The length of the longest consecutive sequence of sunny days. max_streak = 0 current_streak = 0 for day in forecast: if day == \'S\': current_streak += 1 if current_streak > max_streak: max_streak = current_streak else: current_streak = 0 return max_streak"},{"question":"You are a software developer tasked with creating an efficient navigation system for a massive library. The library is uniquely arranged in a grid format with rows and columns, each cell holding a unique book. Each cell is identified with its row and column coordinates. A user can traverse the library grid by moving up, down, left, or right to adjacent cells, unless an obstacle is blocking the path. You need to write a program that determines the shortest path from a given starting position to a target book, avoiding any obstacles present in the grid. The grid is represented as a matrix of characters where: - \'.\' represents an accessible cell. - \'#\' represents an obstacle. - \'S\' represents the starting position of the user. - \'T\' represents the target book. Your task is to find the minimum number of moves required to get from \'S\' to \'T\'. If it is not possible to reach \'T\' from \'S\', your program should return -1. # Input The input consists of multiple datasets. Each dataset starts with two integers, `r` and `c` (1 ≤ r, c ≤ 50), representing the number of rows and columns in the grid, respectively. The next `r` lines contain `c` characters each, representing the grid. The last dataset is followed by a line containing two zeroes. This line is not a part of any dataset and should not be processed. # Output For each dataset, print the minimum number of moves required to reach the target book in one line. If it is not possible to reach the target book, print -1. # Example Input ``` 5 5 S.... ..# ..#.T ..... ..... 4 4 S#.T .#.. .#.. .T#S 0 0 ``` Output ``` 8 -1 ``` # Notes - The grid will contain exactly one \'S\' and one \'T\' for each dataset. - Movements are only allowed up, down, left, or right to adjacent cells, unless blocked by \'#\'.","solution":"from collections import deque def shortest_path_to_book(grid, start, target, rows, cols): # Directions for Up, Down, Left, Right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() # If we have reached the target, return the distance if (x, y) == target: return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy # Check if the new position is within bounds and can be visited if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If target is not reachable return -1 def find_start_and_target(grid, rows, cols): start = target = None for i in range(rows): for j in range(cols): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'T\': target = (i, j) return start, target def process_grids(input_data): results = [] index = 0 while index < len(input_data): r, c = map(int, input_data[index].split()) if r == 0 and c == 0: break index += 1 grid = [] for _ in range(r): grid.append(input_data[index]) index += 1 start, target = find_start_and_target(grid, r, c) result = shortest_path_to_book(grid, start, target, r, c) results.append(result) return results # Function to simulate the input-output handling of the problem def library_navigation_system(input_text): input_data = input_text.strip().split(\'n\') results = process_grids(input_data) return \'n\'.join(map(str, results))"},{"question":"Given a list of N integers, write a function that returns the largest sum of any contiguous subarray within the list. The contiguous subarray is defined as a sequence of elements within the array which are adjacent to each other. Input First line contains T (number of test cases). Each test case starts with an integer N (length of the array) followed by N integers which are elements of the array. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 10^5 -10^4 ≤ Array elements ≤ 10^4 SAMPLE INPUT 2 5 -2 1 -3 4 -1 2 1 -5 4 4 1 2 3 4 SAMPLE OUTPUT 6 10","solution":"def max_subarray_sum(arr): Returns the largest sum of any contiguous subarray within the array. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_test_cases(test_cases): Processes multiple test cases and returns the results as a list. results = [] for case in test_cases: N, arr = case[0], case[1:] result = max_subarray_sum(arr) results.append(result) return results"},{"question":"Your task is to create a function that determines the largest possible square block of 1s in a given binary matrix. A binary matrix consists of 0s and 1s only. The function should return the size of the largest square (i.e., the side length of the square). For example, consider the following binary matrix: ``` [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] ``` In this matrix, the largest square block of 1s has a side length of 2. Create a function `largestSquare` that accepts a single argument `matrix`, which is a list of lists representing a binary matrix. The function should return an integer representing the side length of the largest square block of 1s. For example: ```python largestSquare([ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ]) # should return 2 ``` ```python largestSquare([ [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1] ]) # should return 4 ``` **For the purpose of this problem, you may assume that the matrix is non-empty and contains at least one 1.**","solution":"def largestSquare(matrix): if not matrix or not matrix[0]: return 0 rows = len(matrix) cols = len(matrix[0]) max_side = 0 dp = [[0] * cols for _ in range(rows)] for i in range(rows): for j in range(cols): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"You are given an array of integers representing the floors of a building in which burglars are attempting to enter from the roof to the ground floor. The security system is designed such that alarms can be installed on any floor, and if an alarm is triggered on a floor `i`, all floors below it are secured, preventing any burglars from passing through. Consequently, each alarm secures all floors from its floor to the ground floor. Your task is to determine the minimum number of alarms needed to secure the entire building. -----Input----- - The first line of input contains a single integer `T` denoting the number of test cases. Each test case follows the format below: - The first line of each test case contains a single integer `N`, denoting the number of floors in the building. - The second line of each test case contains `N` space-separated integers representing the floors, denoted by `f_1, f_2, ..., f_N`. -----Output----- For each test case, output a single line containing the minimum number of alarms needed to secure all the floors. -----Constraints----- - `1 ≤ N ≤ 10^5` - `1 ≤ f_i ≤ 10^9` for each valid `i` - The sum of `N` over all test cases does not exceed `5 * 10^5` -----Example Input----- 2 5 3 5 4 10 9 3 2 1 3 -----Example Output----- 1 1 -----Explanation----- In the first test case, placing an alarm on the first floor (or any other single floor) secures the entire building. In the second test case, placing an alarm on the second floor secures all floors below it.","solution":"def minimum_alarms(test_cases): results = [] for case in test_cases: N, floors = case if N == 0: results.append(0) else: results.append(1) return results"},{"question":"Given an array of integers where each element represents the maximum jump length at that position, determine the minimum number of jumps required to reach the last index. If it\'s not possible to reach the last index, return -1. Example 1: Input: [2, 3, 1, 1, 4] Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2: Input: [2, 3, 0, 1, 4] Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 3: Input: [1, 0, 2] Output: -1 Explanation: It\'s not possible to reach the last index. Note: Length of the given array will not exceed 1000 and the answer is guaranteed to be fit in 32-bit signed int.","solution":"def min_jumps(nums): Returns the minimum number of jumps required to reach the last index of the array. If it\'s not possible to reach the last index, returns -1. n = len(nums) if n == 1: return 0 if nums[0] == 0: return -1 max_reach = nums[0] step = nums[0] jump = 1 for i in range(1, n): if i == n - 1: return jump max_reach = max(max_reach, i + nums[i]) step -= 1 if step == 0: jump += 1 if i >= max_reach: return -1 step = max_reach - i return -1"},{"question":"Given an array arr[] of size N representing the amount of rainfall measured in millimeters on N consecutive days, your task is to find the day on which the cumulative rainfall first exceeds a given threshold T millimeters. If no such day exists, return -1. Example 1: Input: N = 5, arr[] = [10, 20, 30, 10, 5], T = 50 Output: 2 Explanation: The cumulative rainfall on the 3rd day is 10 + 20 + 30 = 60 millimeters which exceeds the threshold of 50 millimeters. Example 2: Input: N = 4, arr[] = [5, 10, 15, 20], T = 45 Output: 3 Explanation: The cumulative rainfall on the 4th day is 5 + 10 + 15 + 20 = 50 millimeters which exceeds the threshold of 45 millimeters. Example 3: Input: N = 3, arr[] = [5, 10, 15], T = 40 Output: -1 Explanation: The cumulative rainfall never exceeds the threshold of 40 millimeters. Your Task: This is a function problem. You only need to complete the function dayExceedsThreshold() that takes a list of integers arr[], an integer N (the size of the list), and an integer T (the threshold) as input parameters and returns an integer representing the 1-based index of the first day when the cumulative rainfall exceeds the threshold T. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^6 0 ≤ arr[i] ≤ 10^6 1 ≤ T ≤ 10^18","solution":"def day_exceeds_threshold(arr, N, T): Finds the day on which the cumulative rainfall first exceeds the given threshold T. If no such day exists, returns -1. Parameters: arr (list of int): List of daily rainfall amounts. N (int): Number of days. T (int): Threshold value. Returns: int: 1-based index of the first day with cumulative rainfall exceeding T, or -1 if no such day exists. cumulative_rainfall = 0 for day in range(N): cumulative_rainfall += arr[day] if cumulative_rainfall > T: return day + 1 return -1"},{"question":"One day, Leha was interested in symmetric strings. A string is considered symmetric if it reads the same forwards and backwards, ignoring spaces, punctuation, and case. For instance, \\"A man, a plan, a canal, Panama!\\" and \\"No \'x\' in Nixon\\" are both considered symmetric strings. Help Leha write a function that determines whether a given string is symmetric or not. -----Input----- The first line of the input contains an integer T denoting the number of test cases. T test cases follow. Each test case consists of a single string S which contains at most 1000 characters. The string S may contain letters, digits, spaces, punctuation, and special characters. -----Output----- For each test case, output a single line with the word \\"YES\\" if the string is symmetric, and \\"NO\\" otherwise. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ length of S ≤ 1000 -----Example----- Input: 2 A man, a plan, a canal, Panama! race a car Output: YES NO -----Explanation----- Example case 1. Ignoring spaces, punctuation, and case, the string \\"A man, a plan, a canal, Panama!\\" reads the same forwards and backwards. Example case 2. Ignoring spaces and case, the string \\"race a car\\" does not read the same forwards and backwards. -----Note----- You may assume the input strings contain only valid UTF-8 characters.","solution":"def is_symmetric_string(s): Determines if a given string s is symmetric, i.e., reads the same forwards and backwards ignoring spaces, punctuation, and case. filtered_chars = [char.lower() for char in s if char.isalnum()] return filtered_chars == filtered_chars[::-1] def symmetric_strings(T, strings): For each string in strings, determine if it is symmetric. Returns a list where each element is \\"YES\\" if the corresponding string is symmetric, and \\"NO\\" otherwise. results = [] for s in strings: if is_symmetric_string(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You have been given a list of students and their respective grades. Your task is to find out the average grade for each student, and then assign them to different tiers based on their average grade. Each student has several grades corresponding to different subjects. The average grade of a student is the sum of all their grades divided by the number of subjects they are graded in. The tiers are defined as follows: - Tier 1: Average grade of 90 or above. - Tier 2: Average grade between 80 and 89. - Tier 3: Average grade between 70 and 79. - Tier 4: Average grade below 70. Write a program that takes as input the number of students, followed by each student\'s name and their respective grades. The output should list each student along with their average grade and their tier. # Input - First line: n - the number of students (1 ≤ n ≤ 1000) - The next n lines: each line contains a student\'s name (a string without spaces) followed by their grades (space-separated integers, 1 ≤ grade ≤ 100). Each student has between 1 and 10 grades. # Output - For each student, output their name, their average grade (rounded to the nearest integer), and their tier. - The output should be formatted as follows: - Name: AverageGrade (Tier) # Example Input ``` 3 Alice 85 90 78 Bob 70 75 80 85 Charlie 95 93 ``` # Example Output ``` Alice: 84 (Tier 2) Bob: 78 (Tier 3) Charlie: 94 (Tier 1) ``` # Explanation - Alice\'s average grade is (85+90+78)/3 = 84.33, rounded to 84, which falls in Tier 2. - Bob\'s average grade is (70+75+80+85)/4 = 77.5, rounded to 78, which falls in Tier 3. - Charlie\'s average grade is (95+93)/2 = 94, which falls in Tier 1.","solution":"def calculate_average_grade(grades): return round(sum(grades) / len(grades)) def determine_tier(average_grade): if average_grade >= 90: return 1 elif average_grade >= 80: return 2 elif average_grade >= 70: return 3 else: return 4 def process_student_grades(n, student_data): results = [] for data in student_data: parts = data.split() name = parts[0] grades = list(map(int, parts[1:])) average_grade = calculate_average_grade(grades) tier = determine_tier(average_grade) results.append(f\\"{name}: {average_grade} (Tier {tier})\\") return results"},{"question":"Given two integer arrays of length N, `nums` and `sorted_nums`, determine the minimum number of adjacent swaps needed to convert `nums` into `sorted_nums`. The sorted array `sorted_nums` is always the sorted version of `nums`. Constraints: - 1 leq N leq 5000 - 1 leq nums[i] leq 10^9 Input: The first line contains an integer N, the number of elements in `nums`. The second line contains N integers, the elements of the array `nums`. Output: Print a single integer, the minimum number of adjacent swaps required. Examples: Input: 5 3 1 2 4 5 Output: 2 Input: 4 4 3 2 1 Output: 6","solution":"def min_adjacent_swaps(nums): Returns the minimum number of adjacent swaps required to sort the list nums. def merge_sort(enumerated_nums): if len(enumerated_nums) < 2: return enumerated_nums, 0 mid = len(enumerated_nums) // 2 left, left_swaps = merge_sort(enumerated_nums[:mid]) right, right_swaps = merge_sort(enumerated_nums[mid:]) merged, merge_swaps = merge(left, right) return merged, left_swaps + right_swaps + merge_swaps def merge(left, right): merged = [] i = j = swaps = 0 while i < len(left) and j < len(right): if left[i][1] <= right[j][1]: merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 swaps += len(left) - i merged.extend(left[i:]) merged.extend(right[j:]) return merged, swaps enumerated_nums = list(enumerate(nums)) _, total_swaps = merge_sort(enumerated_nums) return total_swaps"},{"question":"Given a string `S` consisting of lowercase letters, you need to find and print all the possible unique palindromic substrings in the string `S`. A palindromic substring is a substring which reads the same forwards and backwards. Constraints: * 1 ≤ |S| ≤ 1000 * S will only contain lowercase English letters (\'a\' to \'z\'). Input: The input is given as a single string `S`. Output: Print each unique palindromic substring in lexicographical order, one per line. Example Input: `ababa` Output: ``` a aba ababa b bab ``` Input: `racecar` Output: ``` a aceca c cec e r racecar ```","solution":"def find_palindromic_substrings(S): Returns a list of unique palindromic substrings in lexicographical order. def is_palindrome(s): return s == s[::-1] n = len(S) palindromic_substrings = set() for i in range(n): for j in range(i, n): substring = S[i:j+1] if is_palindrome(substring): palindromic_substrings.add(substring) return sorted(palindromic_substrings)"},{"question":"Write a function that takes an integer array as input and returns a new array containing only the unique elements from the original array in the same order they first appeared. # Example **Input**: [1, 2, 2, 3, 4, 4, 5] **Output**: [1, 2, 3, 4, 5] **Input**: [10, 20, 10, 30, 40, 40, 50] **Output**: [10, 20, 30, 40, 50] # Constraints - The input array can have elements ranging from -10^5 to 10^5. - The length of the input array can be up to 10^4.","solution":"def unique_elements(arr): Returns a new array containing only the unique elements from the original array in the same order they first appeared. seen = set() unique = [] for item in arr: if item not in seen: seen.add(item) unique.append(item) return unique"},{"question":"John loves to play with numbers and recently he found a specific type of integer that he now calls \\"Perfect Square Multiples.\\" An integer ( N ) is said to be a \\"Perfect Square Multiple\\" if there exists at least one integer ( k ) such that ( N = k^2 times M ) for some integer ( M ) where ( k geq 2 ). Given an integer ( N ), determine if it can be classified as a \\"Perfect Square Multiple\\" or not. ------ Input Format ------ - The first line of input will contain a single integer ( T ) — the number of test cases. The description of ( T ) test cases follows. - The first and only line of each test case contains a single integer ( N ). ------ Output Format ------ For each test case, output \\"Yes\\" if ( N ) is a \\"Perfect Square Multiple\\", otherwise output \\"No\\". ------ Constraints ------ 1 ≤ T ≤ 500 1 ≤ N ≤ 10^6 ----- Sample Input 1 ------ 3 10 18 20 ----- Sample Output 1 ------ No Yes Yes ----- Explanation 1 ------ Test case 1: In this case, there is no integer ( k ) such that ( 10 = k^2 times M ) for some integer ( M ) where ( k geq 2 ). Test case 2: Here, we can write ( 18 = 2^2 times 4.5 ) and ( 4.5 ) is not an integer, but ( 18 = 3^2 times 2 ) where ( k = 3 geq 2 ) and ( M = 2 ) making it a \\"Perfect Square Multiple\\". Test case 3: Here, we have ( 20 = 2^2 times 5 ), where ( k = 2 ) and ( M = 5 ) which is an integer making it a \\"Perfect Square Multiple\\".","solution":"import math def is_perfect_square_multiple(N): Checks if the given number N is a \\"Perfect Square Multiple\\", which means there exists an integer k >= 2 such that N = k^2 * M for some integer M. for k in range(2, int(math.sqrt(N)) + 1): if N % (k * k) == 0: return \\"Yes\\" return \\"No\\" def process_test_cases(test_cases): results = [] for N in test_cases: results.append(is_perfect_square_multiple(N)) return results"},{"question":"A camp organizer wants to assign campers to tents according to specific groups and preferences. The camp has a total of n tents, and campers are grouped and given their tent preferences in a specific order. Each camper will be assigned to their first available tent based on their preferences. Write a function that determines which tent each camper will be assigned to. -----Input----- The first line contains an integer n (1 ≤ n ≤ 50) — the number of tents available in the camp. The second line contains an integer m (1 ≤ m ≤ 100) — the number of campers. Each of the next m lines contains a list of integers p (1 ≤ p ≤ n) — the tent preferences of the camper given in descending order of preference (highest preference first). -----Output----- Print m lines. Each line should contain a single integer representing the tent number assigned to the corresponding camper in the input list. If a camper cannot be assigned any of their preferred tents, print -1 for that camper. -----Examples----- Input 3 6 1 2 3 1 3 2 3 2 1 1 3 Output 1 3 2 -1 1 -1 Input 2 4 1 2 2 1 1 2 Output 1 2 -1 -1 -----Note----- In the first example: - The first camper is assigned to Tent 1. - The second camper is assigned to Tent 3 (since the first camper already took Tent 1). - The third camper is assigned to Tent 2 (since Tents 1 and 3 are already taken). - The fourth camper cannot be assigned any tent because Tents 2 and 3 are already taken. - The fifth camper is assigned to Tent 1 (the first available on their list). - The sixth camper cannot be assigned any tent because Tent 3 is already taken.","solution":"def assign_tents(n, m, preferences): Determines which tent each camper will be assigned to based on their preferences. Parameters: n (int): Number of tents available. m (int): Number of campers. preferences (list of list of int): List of preferences for each camper. Returns: list of int: Tent assigned to each camper. -1 if no tent can be assigned. assigned_tents = [-1] * m # Initialize the result with -1 for each camper assigned = set() # Set of assigned tents for i in range(m): for pref in preferences[i]: if pref not in assigned: assigned_tents[i] = pref assigned.add(pref) break return assigned_tents"},{"question":"Alice is participating in a coding contest. She needs to implement a function to calculate the maximum possible sum of non-adjacent elements from a list of integers. Given a list of integers, she can choose any elements from the list such that no two chosen elements are adjacent in the original list. Could you help her with the function? The function should return the maximum possible sum of non-adjacent elements. Input Format: The first line contains an integer N, which is the number of test cases. For each test case: - The first line contains an integer M, the size of the list. - The second line contains M space-separated integers representing the elements of the list. Output Format: For each test case, the function should output a single line containing the maximum possible sum of non-adjacent elements. Constraints: 1 ≤ N ≤ 100 1 ≤ M ≤ 10^5 -10^4 ≤ list[i] ≤ 10^4 SAMPLE INPUT 2 4 3 2 5 10 5 3 2 7 10 12 SAMPLE OUTPUT 13 22 Explanation For Case 1: The maximum sum is 13 obtained by selecting 3 and 10. For Case 2: The maximum sum is 22 obtained by selecting 3, 7, and 12.","solution":"def max_non_adjacent_sum(arr): Returns the maximum possible sum of non-adjacent elements from the given list \'arr\'. if not arr: return 0 if len(arr) == 1: return max(0, arr[0]) incl = max(0, arr[0]) excl = 0 for i in range(1, len(arr)): new_excl = max(excl, incl) incl = excl + arr[i] excl = new_excl return max(incl, excl) def process_test_cases(test_cases): results = [] for case in test_cases: results.append(max_non_adjacent_sum(case)) return results"},{"question":"Implement a function that, given a list of integers, returns the second largest unique integer in the list. If the second largest unique integer does not exist or all integers in the list are the same, return None. For example, given the list `[3, 1, 4, 4, 5, 5, 5, 2]`, the second largest unique integer is `4`. Consider edge cases such as: - The list is empty or contains only one element. - All elements in the list are the same. ```python def second_largest_unique(nums): # Your code goes here pass # Example Usage: # second_largest_unique([3, 1, 4, 4, 5, 5, 5, 2]) should return 4 # second_largest_unique([5, 5, 5]) should return None # second_largest_unique([]) should return None # second_largest_unique([6, 1]) should return 1 ```","solution":"def second_largest_unique(nums): Returns the second largest unique integer in the list. If the second largest unique integer does not exist, return None. unique_nums = set(nums) if len(unique_nums) < 2: return None sorted_unique_nums = sorted(unique_nums, reverse=True) return sorted_unique_nums[1]"},{"question":"Antonia is an avid puzzle enthusiast who loves to create intricate designs using a grid of black and white tiles. She refers to the white tiles as \'open\' and the black tiles as \'closed\'. One day, Antonia decided to explore patterns that form a cross (plus) shape on the grid. Given a grid of size `N x N` where `N` is always an odd number (`3 ≤ N ≤ 15`), she wants to determine if it\'s possible to form a cross shape entirely using open tiles. A cross shape is formed as follows: - The center tile of the grid is open. - All tiles in the same row and column as the center, except the center tile, must also be open. - All other tiles in the grid must be closed. Write a program that, given an `N x N` grid, checks if it contains a cross shape where the tiles match the above criteria. --- Input --- The first line contains an odd integer `N` (3 ≤ N ≤ 15), the size of the grid. Each of the next `N` lines contains a string of `N` characters, each either \'o\' (open) or \'x\' (closed). --- Output --- The program should print `YES` if the grid contains a cross shape. Otherwise, print `NO`. --- Examples --- Sample Input 1: 5 xxoxx xxoxx ooooo xxoxx xxoxx Sample Output 1: YES Sample Input 2: 3 xox oxo xox Sample Output 2: NO","solution":"def is_cross_shape(grid): Determine if the grid forms a cross shape where the \'o\' tiles form the cross. :param grid: List[List[str]] - A N x N grid of \'o\' and \'x\' :return: str - \\"YES\\" if the grid contains a cross shape, otherwise \\"NO\\". N = len(grid) center = N // 2 # Check the center tile if grid[center][center] != \'o\': return \\"NO\\" # Check the center row and center column tiles for i in range(N): if grid[center][i] != \'o\' or grid[i][center] != \'o\': return \\"NO\\" # Check all other tiles for i in range(N): for j in range(N): if not (i == center or j == center): if grid[i][j] != \'x\': return \\"NO\\" return \\"YES\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) grid = data[1:] print(is_cross_shape(grid))"},{"question":"You are given a list of unique integers representing the ID of items in a warehouse. The warehouse has a special rule for shipping orders: only consecutive item IDs are allowed to be shipped together. For example, if the item IDs are `5, 6, 7, 8`, they can be shipped together, but `5, 6, 8` cannot be shipped together as `7` is missing. Your task is to write a program that takes a list of item IDs as input and determines the maximal segments of consecutive item IDs that can be shipped together. For example: if the item IDs are `1, 2, 3, 7, 8, 9, 10, 14`, the maximal segments of consecutive item IDs are `1, 2, 3` and `7, 8, 9, 10` and `14`. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of item IDs. The second line contains n unique integers, where each integer a_i (1 le a_i le 10^9) represents an item ID. -----Output----- Print the number of maximal segments of consecutive item IDs that can be shipped together. Then, for each segment, print the first and last item ID in that segment. -----Examples----- Input 8 1 2 3 7 8 9 10 14 Output 3 1 3 7 10 14 14 Input 5 5 4 3 2 1 Output 1 1 5 -----Note----- In the first example, there are three segments of consecutive item IDs: `1, 2, 3`, `7, 8, 9, 10`, and `14`. In the second example, the item IDs are already sorted in descending order but are still consecutive, so there is only one segment: `1, 2, 3, 4, 5`.","solution":"def find_consecutive_segments(n, item_ids): item_ids.sort() segments = [] start = item_ids[0] for i in range(1, n): if item_ids[i] != item_ids[i-1] + 1: segments.append((start, item_ids[i-1])) start = item_ids[i] segments.append((start, item_ids[-1])) return segments"},{"question":"You are given a string containing only the characters \'(\' and \')\', and you need to determine if the string is a valid parentheses sequence. A valid parentheses sequence is one in which each opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and the pairs of parentheses are properly nested. Write a function `isValidParenthesesSequence(s: str) -> bool` that takes a string `s` as input and returns `True` if the string is a valid parentheses sequence, otherwise returns `False`. --- Constraints --- - The input string `s` has a length `n` such that `1 <= n <= 10^5`. --- Input --- The function will receive: `isValidParenthesesSequence(s: str) -> bool` --- Output --- The function should return `True` or `False`. --- Sample Input 1 --- s = \\"(()())\\" --- Sample Output 1 --- True --- Explanation 1 --- The input string is a valid parentheses sequence because each opening parenthesis has a corresponding closing parenthesis and they are properly nested. --- Sample Input 2 --- s = \\"())\\" --- Sample Output 2 --- False --- Explanation 2 --- The input string is not a valid parentheses sequence because the closing parenthesis at the third position does not have a matching opening parenthesis. ***Your task is to implement the `isValidParenthesesSequence` function to check the correctness.Consider edge cases such as mismatched pairs and unbalanced sequences as well.***","solution":"def isValidParenthesesSequence(s: str) -> bool: Returns True if the input string is a valid parentheses sequence, else False. balance = 0 # Initialize a balance counter for char in s: if char == \'(\': balance += 1 # Increment balance for opening parentheses elif char == \')\': balance -= 1 # Decrement balance for closing parentheses if balance < 0: return False # If balance is negative at any point, it\'s invalid return balance == 0 # Valid if balance is zero at the end"},{"question":"David is playing a game in which he needs to arrange a sequence of integers in a specific order. Given a permutation of the integers from 1 to n, he needs to find the lexicographically next permutation. If no such permutation exists (i.e., the input permutation is the highest possible order), the function should rearrange it to the lowest possible order (i.e., in increasing order). Write a function `next_permutation` that takes an array of integers representing the permutation and modifies it to the next permutation in-place. Input - The input of the function `next_permutation` is a list of integers representing the permutation. Output - The function should modify the input list to be the next permutation in-place. Examples Input [1, 2, 3] Output [1, 3, 2] Input [3, 2, 1] Output [1, 2, 3] Input [1, 1, 5] Output [1, 5, 1] Input [1, 3, 2] Output [2, 1, 3] Hints: 1. Start from the end of the list and find the first element that is not in descending order. This marks the point at which we need to make a swap to get the next permutation. 2. Swap this element with the smallest element to its right that is larger than it. 3. Finally, reverse the sequence to the right of this original position to get the next permutation.","solution":"def next_permutation(nums): Modifies the list of integers to the lexicographically next permutation in-place. :param nums: List[int], list of integers representing the permutation n = len(nums) i = n - 2 while i >= 0 and nums[i] >= nums[i + 1]: i -= 1 if i >= 0: j = n - 1 while j >= 0 and nums[j] <= nums[i]: j -= 1 nums[i], nums[j] = nums[j], nums[i] nums[i + 1:] = reversed(nums[i + 1:])"},{"question":"You are given a string s consisting of lowercase English letters. You need to check if it is possible to rearrange the characters of the string such that no two adjacent characters are the same. If possible, return the rearranged string, otherwise, return an empty string. Input The input contains a single string s (1 ≤ |s| ≤ 10^5) — the string s. Output Return a single string resulting from the rearrangement such that no two adjacent characters are the same. If no such rearrangement is possible, return an empty string. Example Input aab Output aba Input aaab Output (empty string) Note In the first example, one possible arrangement is \\"aba\\" where no two adjacent characters are the same. In the second example, it is not possible to rearrange the string \\"aaab\\" such that no two adjacent characters are the same. Hence, the output is an empty string.","solution":"import heapq from collections import Counter def reorganize_string(s): Rearrange the characters of the string such that no two adjacent characters are the same. If impossible, return an empty string. count = Counter(s) maxHeap = [(-value, key) for key, value in count.items()] heapq.heapify(maxHeap) prev_freq, prev_char = 0, \'\' result = [] while maxHeap: freq, char = heapq.heappop(maxHeap) result.append(char) if prev_freq < 0: heapq.heappush(maxHeap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char reorganized_string = \'\'.join(result) if len(reorganized_string) != len(s): return \\"\\" return reorganized_string"},{"question":"You are tasked with building a simple calculator that can evaluate basic arithmetic expressions involving addition, subtraction, multiplication, and division. The calculator should accept a string containing a valid mathematical expression and return the result as a float. The expression will always be composed of non-negative integers and the operators `+`, `-`, `*`, and `/`. The integer values and operators will be separated by a single space within the string. Your solution should correctly follow the standard operator precedence and should handle division by zero by returning `\\"Division by zero\\"`. # Examples ```python evaluate(\\"3 + 5\\") #=> 8.0 evaluate(\\"10 - 2 * 3\\") #=> 4.0 evaluate(\\"100 / 2 + 50\\") #=> 100.0 evaluate(\\"8 / 0\\") #=> \\"Division by zero\\" evaluate(\\"5 * 6 - 7 / 1\\") #=> 23.0 evaluate(\\"7 + 3 * 6 / 2\\") #=> 16.0 ``` # Constraints 1. The input string will always contain a valid sequence of operations and numbers. 2. The operations should be executed from left to right, considering the operator precedence: multiplication (*) and division (/) before addition (+) and subtraction (-). 3. Division by zero should be handled explicitly and should return the string `\\"Division by zero\\"`.","solution":"def evaluate(expression: str) -> float: Evaluates a basic arithmetic expression involving addition, subtraction, multiplication, and division with proper operator precedence. The expression should be a string of non-negative integers and operators `+`, `-`, `*`, and `/`, separated by single spaces. :param expression: The arithmetic expression to evaluate. :return: The result of the evaluation as a float or \\"Division by zero\\" if a division by zero occurs. try: result = eval(expression) if type(result) is float and result.is_integer(): result = int(result) return result except ZeroDivisionError: return \\"Division by zero\\""},{"question":"Write a function that takes a list of integers and an integer k as its inputs. The function should partition the list into k contiguous subarrays such that the maximum sum among these subarrays is minimized. The function should return the minimized maximum sum. For example, suppose we have a list of integers `[7, 2, 5, 10, 8]` and `k = 2`. The function should partition the list into two subarrays `[7, 2, 5]` and `[10, 8]`, with sums 14 and 18, respectively. The maximum sum among these subarrays is 18. The function should return 18. Function signature: ```python def minimize_max_subarray_sum(nums: List[int], k: int) -> int: ``` Constraints: - `1 <= len(nums) <= 1000` - `1 <= nums[i] <= 10^6` - `1 <= k <= len(nums)` Input: - An integer `k` - A list of integers Output: - An integer representing the minimized maximum sum among k subarrays Example: ```python print(minimize_max_subarray_sum([7, 2, 5, 10, 8], 2)) # Output: 18 print(minimize_max_subarray_sum([1, 2, 3, 4, 5], 2)) # Output: 9 print(minimize_max_subarray_sum([1, 4, 4], 3)) # Output: 4 ```","solution":"from typing import List def minimize_max_subarray_sum(nums: List[int], k: int) -> int: def can_split(nums, max_sum, k): current_sum = 0 required_splits = 1 for num in nums: if current_sum + num > max_sum: required_splits += 1 current_sum = num if required_splits > k: return False else: current_sum += num return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if can_split(nums, mid, k): right = mid else: left = mid + 1 return left"},{"question":"Given a series of operations, you need to maintain a running list of numbers and answer queries about the numbers in the list. Operations can be of two types: 1. Add an integer x to the list. 2. Query how many times a given integer y appears in the list. Input Format The first line contains N, the number of operations. The next N lines each contain an operation in one of the following formats: - \\"Add x\\": where x is an integer to be added to the list. - \\"Count y\\": where y is an integer whose count needs to be returned. Output Format For each \\"Count y\\" operation, output the number of times y appears in the list. Constraints 1 ≤ N ≤ 10^5 -10^5 ≤ x, y ≤ 10^5 SAMPLE INPUT 6 Add 5 Add 3 Add 5 Count 5 Count 3 Count 2 SAMPLE OUTPUT 2 1 0 Explanation After three \\"Add\\" operations, the list contains [5, 3, 5]. The \\"Count 5\\" operation returns 2 since there are two 5s in the list. The \\"Count 3\\" operation returns 1 since there is one 3 in the list. The \\"Count 2\\" operation returns 0 since there are no 2s in the list.","solution":"def process_operations(operations): Processes a series of \'Add\' and \'Count\' operations and returns the results of \'Count\' queries. Args: operations (list): List of operations in string format. Returns: list: List of integers representing the results of \'Count\' queries. from collections import defaultdict counter = defaultdict(int) results = [] for operation in operations: command, number = operation.split() number = int(number) if command == \\"Add\\": counter[number] += 1 elif command == \\"Count\\": results.append(counter[number]) return results"},{"question":"You are working for a company that specializes in delivering packages using drones. Each drone has a weight limit and can only carry packages that do not exceed this limit. Given that each package has a weight, you need a function to determine how many packages a drone can carry during a single trip. Write a function `max_packages()` that determines the maximum number of packages that a drone can carry given its weight limit. The function should take two arguments: a list of integers representing the weights of the packages and an integer representing the weight limit of the drone. The function should return an integer representing the maximum number of packages the drone can carry. For example, if the packages weigh `[2, 3, 5, 7, 1]` and the weight limit of the drone is 10, the maximum number of packages the drone can carry is 3 because it can carry packages weighing `[2, 3, 5]` or any other combination that does not exceed 10, so `max_packages([2, 3, 5, 7, 1], 10)` should return `3`. Note: The drone can carry packages in any order as long as their combined weight does not exceed the weight limit. You do not have to optimize for the maximum weight carried, just the maximum number of packages.","solution":"def max_packages(weights, weight_limit): Returns the maximum number of packages a drone can carry without exceeding the weight limit. :param weights: a list of integers representing the weights of the packages :param weight_limit: an integer representing the weight limit of the drone :return: an integer representing the maximum number of packages the drone can carry # Sort the weights to try to fit the smallest packages first weights.sort() total_weight = 0 package_count = 0 for weight in weights: if total_weight + weight <= weight_limit: total_weight += weight package_count += 1 else: break return package_count"},{"question":"You are given a grid with n rows and m columns. Each cell of the grid contains an integer representing its elevation. A water droplet can move from a cell to one of its 4 neighboring cells (up, down, left, right) if the neighboring cell has a strictly lower elevation. Your task is to find the path of the droplet starting from a given cell and ending at the cell where it cannot move further (lowest point it can reach). -----Input----- The first line contains two integers n and m — the number of rows and columns of the grid (1 ≤ n, m ≤ 500). Each of the next n lines contains m integers representing the elevation of each cell (0 ≤ elevation ≤ 10^4). The next line contains two integers r and c — the starting row and column of the droplet (1 ≤ r ≤ n, 1 ≤ c ≤ m). -----Output----- Print the coordinates of the cell where the droplet comes to rest. -----Examples----- Input 3 3 4 5 6 3 2 1 7 8 9 2 3 Output 2 3 Input 4 4 9 8 7 6 10 5 6 4 11 12 3 2 13 14 15 1 1 1 Output 4 4","solution":"def find_lowest_point(grid, start_row, start_col): n = len(grid) m = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # directions: up, down, left, right def is_valid(x, y): return 0 <= x < n and 0 <= y < m def dfs(x, y): current_elevation = grid[x][y] best_x, best_y = x, y for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and grid[nx][ny] < current_elevation: bx, by = dfs(nx, ny) if grid[bx][by] < grid[best_x][best_y]: best_x, best_y = bx, by return best_x, best_y # Given coordinates are 1-indexed, converting them to 0-indexed for internal processing startx, starty = start_row - 1, start_col - 1 lowest_x, lowest_y = dfs(startx, starty) # Converting back to 1-indexed return lowest_x + 1, lowest_y + 1"},{"question":"You are invited to a robotics competition and need to program a robot to navigate a maze. The maze can be represented as a grid of `NxN` where some cells are obstacles, and some are free spaces. Write a function that determines the minimum number of moves the robot needs to reach the bottom-right corner from the top-left corner. The robot can only move up, down, left, or right and cannot pass through obstacles. The maze is given as a 2D list of 1s (free space) and 0s (obstacles). If it is not possible for the robot to reach the destination, return -1. Example: Input: ``` maze = [ [1, 1, 0], [1, 0, 0], [1, 1, 1] ] ``` Output: 4 Note: The robot starts at (0,0) and moves to (2,2) with the minimum number of moves being: right -> down -> down -> right (or any similar sequence of valid moves).","solution":"from collections import deque def min_moves_to_reach_end(maze): Returns the minimum number of moves required to navigate the maze from the top-left corner to the bottom-right corner. If it\'s not possible, returns -1. if not maze or not maze[0]: return -1 n = len(maze) if maze[0][0] == 0 or maze[n-1][n-1] == 0: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == n-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and maze[nx][ny] == 1 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given a list of integers and a target value. Your task is to determine if there are two distinct integers in the list whose sum is equal to the target value. Function Description Complete the function `findPairWithSum` in the editor below. `findPairWithSum` has the following parameter(s): - `int[] numbers`: a list of integers - `int target`: the target sum Returns - `boolean`: `true` if there are two distinct integers in the list whose sum is equal to the target value, and `false` otherwise. Input Format The first line contains a single integer n, the number of integers in the list. The second line contains n space-separated integers representing the list of numbers. The third line contains a single integer representing the target sum. Constraints 2 leq n leq 10^5 -10^9 leq numbers[i] leq 10^9 -10^9 leq target leq 10^9 Output Format Return `true` if there are two distinct integers in the list whose sum is equal to the target value, and `false` otherwise. Sample Input ``` 5 2 7 11 15 1 9 ``` Sample Output ``` true ``` Explanation There are two numbers in the list, 2 and 7, whose sum is 9, which is equal to the target sum. Therefore, the function should return `true`. Another pair such as (1, 8) would not be found in this list, which would yield a `false` result if they were the target sum.","solution":"def findPairWithSum(numbers, target): Determines if there are two distinct integers in the list whose sum is equal to the target value. :param numbers: List of integers :param target: Target sum value :return: True if a pair exists, False otherwise seen = set() for num in numbers: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"Given a string of lowercase characters, write a function to find the character that appears the most frequently. If there are two or more characters with the same highest frequency, return the character that appears first in the string. For example: ```python solve(\'abcbac\') = \'b\' because \'b\' appears 2 times, which is the most frequent. \'c\' also appears 2 times, but \'b\' appears first. solve(\'abcabc\') = \'a\' because \'a\' appears 2 times and appears first. solve(\'a\') = \'a\' because \'a\' appears 1 time and is the only character. ``` More examples in the test cases. Good luck!","solution":"def solve(s): Returns the character that appears most frequently in the given string. If there is a tie, the character that appears first in the string is returned. frequency = {} max_frequency = 0 result_char = None for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 if frequency[char] > max_frequency: max_frequency = frequency[char] result_char = char elif frequency[char] == max_frequency and result_char is None: result_char = char return result_char"},{"question":"You have been given a list of N integers where the index of each integer represents an ID for a product, and the value at each index represents the price of that product. The company wants to keep track of dynamic discounts and has come up with two types of operations that need to be performed: \\"1 i x\\" - Apply a discount of x to the product with ID i, effectively subtracting x from the current price. The price of the product will not go below zero. \\"2 l r\\" - Query the sum of the prices of all products from ID l to r inclusive. Input Format The first line contains two integers N and Q, separated by a space. The second line contains N space-separated integers representing the initial prices of the products. The next Q lines contain the queries you are asked to perform. Constraints 1 leq N, Q leq 100000 0 leq text{initial price}, x leq 10000 0 leq i < N 0 leq l leq r < N Output Format For each second type of query, print a single integer on a new line, denoting the sum of prices in the given range. Sample Input 5 4 100 200 300 400 500 1 2 50 1 0 30 2 0 2 2 1 4 Sample Output 570 1050 Explanation After the first discount, the prices are [100, 200, 250, 400, 500]. After the second discount, the prices become [70, 200, 250, 400, 500]. The sum of prices from ID 0 to 2 is 70 + 200 + 250 = 520. The sum of prices from ID 1 to 4 is 200 + 250 + 400 + 500 = 1350.","solution":"def perform_operations(N, Q, prices, queries): results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": i, x = int(parts[1]), int(parts[2]) prices[i] = max(0, prices[i] - x) elif parts[0] == \\"2\\": l, r = int(parts[1]), int(parts[2]) results.append(sum(prices[l:r + 1])) return results"},{"question":"In Farmlandia, farmers need to efficiently water their crops using a distributed network of irrigation pipes. Each section of the farmland consists of a grid with ( n ) rows and ( m ) columns. Some parts of the farmland might be under construction and cannot be used for irrigation. The farmer wants to ensure that every valid cell in each row and column of the grid can be reached by water starting from any given starting cell via a network of connected valid cells. For this purpose, the irrigation pipes are distributed such that each cell is connected to its neighboring cells horizontally and vertically, provided that both cells are valid. A cell is considered \\"valid\\" if it is not under construction. You are given the initial status of each cell in the farmland indicated by a grid where \'1\' denotes a valid cell and \'0\' denotes an under-construction cell. The task is to determine if it is possible to start watering from any valid cell and ensure that water can reach all other valid cells in both row and column directions. -----Input----- The first line contains an integer ( t ) (( 1 leq t leq 50 )) — the number of test cases. Each test case consists of two parts: - The first line contains two integers ( n ) and ( m ) (( 1 leq n, m leq 50 )) — the dimensions of the grid. - The next ( n ) lines each contain ( m ) characters, either \'0\' or \'1\', representing the grid of the farmland. -----Output----- For each test case, print either YES if it is possible to irrigate all valid cells starting from any valid cell, or NO otherwise. You can print each letter in any case (for example, YES, Yes, yes, yEs). -----Example----- Input 3 3 4 1111 0110 1111 2 2 10 01 3 3 101 010 101 Output YES NO NO -----Explanation----- 1. In the first test case, all valid cells can be reached from any starting valid cell. 2. In the second test case, the valid cells are isolated and cannot reach each other. 3. In the third test case, the valid cells form separate regions that do not connect.","solution":"def can_irrigate_all_cells(t, test_cases): def bfs(grid, n, m, start): queue = [start] visited = set() visited.add(start) while queue: x, y = queue.pop(0) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'1\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return visited results = [] for case in test_cases: n, m = case[0] grid = case[1] all_valid_cells = {(i, j) for i in range(n) for j in range(m) if grid[i][j] == \'1\'} if not all_valid_cells: results.append(\'NO\') continue starting_cell = next(iter(all_valid_cells)) reachable_cells = bfs(grid, n, m, starting_cell) if reachable_cells == all_valid_cells: results.append(\'YES\') else: results.append(\'NO\') return results"},{"question":"In a prestigious coding competition, participants are required to write a program to verify the authenticity of a set of brackets in a given expression. The problem is as follows: You are given a string `expr` containing characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', which represents an expression. Your task is to determine whether the brackets in the given expression are balanced. An expression is considered balanced if: 1. Each opening bracket must have a corresponding closing bracket of the same type. 2. Opening brackets must be closed in the correct order. Write a function `isBalanced(expr)` that takes the string `expr` as input and returns `True` if the expression is balanced, and `False` otherwise. # Input A single string `expr` (1 ≤ |expr| ≤ 10^5) containing the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. # Output Return `True` if the expression is balanced, and `False` otherwise. # Examples Example 1: **Input:** ``` expr = \\"{[()]}\\" ``` **Output:** ``` True ``` Example 2: **Input:** ``` expr = \\"{[(])}\\" ``` **Output:** ``` False ``` Example 3: **Input:** ``` expr = \\"{{[[(())]]}}\\" ``` **Output:** ``` True ``` Example 4: **Input:** ``` expr = \\"[({)}]\\" ``` **Output:** ``` False ``` # Note: - Your solution should have a time complexity of O(n) where n is the length of the string `expr`. - You can assume that the input string will always be non-empty and will only contain the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'.","solution":"def isBalanced(expr): Determines if the brackets in the given expression are balanced. Args: expr (str): Input string containing \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: bool: True if the expression is balanced, False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in expr: if char in bracket_map: # If the character is a closing bracket top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: # It\'s an opening bracket stack.append(char) return not stack"},{"question":"Given a grid of size MxN where each cell in the grid contains a value representing the height of that cell. A water droplet travels according to the following rules: 1. It can move from a cell to any of its four adjacent cells (left, right, up, down). 2. It can only move to a cell that has a height strictly less than the current cell\'s height. You start from the top left corner of the grid (0,0) and want to determine the maximum number of cells the water droplet can pass through before it can no longer move. Write a function `maxCellsVisited` that takes in the 2D list `heights` representing the height values of the grid\'s cells and returns the maximum number of cells the droplet can pass through starting from the top-left corner. Example: Input: heights = [[9, 6, 3], [5, 8, 1], [7, 2, 4]] Output: 4 Explanation: Starting from the top-left corner: - The droplet moves from (0,0) to (1,0) because 5 < 9. - Then, it moves from (1,0) to (2,0) because 7 < 5. - Next, it moves from (2,0) to (2,1) because 2 < 7. - Finally, it moves from (2,1) to (1,1) because 8 < 2. Thus, the droplet passes through 4 cells. Constraints: - 1 <= M, N <= 100 - 1 <= heights[i][j] <= 10^4 Expected Time Complexity: O(M * N) Expected Auxiliary Space: O(M * N) Your task: You don\'t need to read input or print anything. Complete the function `maxCellsVisited()` which takes the 2D list `heights` as input and returns the maximum number of cells a water droplet can pass through.","solution":"def maxCellsVisited(heights): if not heights or not heights[0]: return 0 M, N = len(heights), len(heights[0]) # Direction vectors for moving left, right, up, down directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Use memoization to store the max cells visitable from each cell memo = [[-1 for _ in range(N)] for _ in range(M)] def dfs(x, y): if memo[x][y] != -1: return memo[x][y] max_cells = 1 # At least the current cell for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and heights[nx][ny] < heights[x][y]: max_cells = max(max_cells, 1 + dfs(nx, ny)) memo[x][y] = max_cells return max_cells return dfs(0, 0)"},{"question":"Lena is a tech enthusiast and a gamer. She loves challenges and recently she came across a unique gaming scoreboard problem. In the game, each player scores points for their performance. Lena wants to find out the scores of the player with the third highest score and the player with the third lowest score. Can you help her accomplish this? Note: The scores of all players are unique. Example 1: Input: N = 6 scores[] = {15, 3, 9, 22, 7, 10} Output: 10 9 Explanation: 10 represents the score of the player with the third highest score and 9 represents the score of the player with the third lowest score. Example 2: Input: N = 8 scores[] = {30, 25, 18, 12, 5, 20, 23, 15} Output: 23 15 Explanation: 23 represents the score of the player with the third highest score and 15 represents the score of the player with the third lowest score. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findScores() which takes the array scores[] and its size N as inputs and returns an array of size 2 where the 0-th element represents the score of the player with the third highest score and the 1-st element represents the score of the player with the third lowest score. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraint: 6 <= N <= 10^{5} 1 <= score <= 10^{6}","solution":"def findScores(N, scores): This function takes an integer N and a list of integers scores and returns a list of two integers where the first element is the third highest score and the second element is the third lowest score. if N < 6: raise ValueError(\\"The number of scores should be at least 6.\\") # Sorting the scores to find third highest and third lowest scores. sorted_scores = sorted(scores) third_highest = sorted_scores[-3] # Third highest third_lowest = sorted_scores[2] # Third lowest return [third_highest, third_lowest]"},{"question":"Finding The Element With Minimum Sum Of Absolute Differences Given an array of integers a consisting of N elements, your task is to find an element in the array such that the sum of absolute differences between this element and all the other elements in the array is minimized. If there are multiple such elements, return the smallest one. # Input - The first line contains an integer N, the number of elements in the array. - The second line contains N integers a1, a2, ..., aN, the elements of the array. # Output - Output a single integer which is the element that minimizes the sum of absolute differences to all other elements. # Constraints - 1 ≤ N ≤ 10^5 - -10^9 ≤ ai ≤ 10^9 # Input Example ``` 5 1 3 -2 4 6 ``` # Output Example ``` 3 ``` # Explanation For the array [1, 3, -2, 4, 6], the absolute differences and their sums for each element are: - For 1: |1-1| + |1-3| + |1-(-2)| + |1-4| + |1-6| = 0 + 2 + 3 + 3 + 5 = 13 - For 3: |3-1| + |3-3| + |3-(-2)| + |3-4| + |3-6| = 2 + 0 + 5 + 1 + 3 = 11 - For -2: |-2-1| + |-2-3| + |-2-(-2)| + |-2-4| + |-2-6| = 3 + 5 + 0 + 6 + 8 = 22 - For 4: |4-1| + |4-3| + |4-(-2)| + |4-4| + |4-6| = 3 + 1 + 6 + 0 + 2 = 12 - For 6: |6-1| + |6-3| + |6-(-2)| + |6-4| + |6-6| = 5 + 3 + 8 + 2 + 0 = 18 The element 3 has the smallest sum of absolute differences, so the output is 3.","solution":"def minimize_abs_difference(arr): Returns the element in the array such that the sum of absolute differences between this element and all other elements in the array is minimized. arr.sort() med_index = len(arr) // 2 # If there\'s an odd number of elements, return the median if len(arr) % 2 == 1: return arr[med_index] # If there\'s an even number of elements, return the smaller of the middle two elements else: return arr[med_index - 1]"},{"question":"You are given a binary string s consisting only of the characters \'0\' and \'1\'. You need to find the number of substrings that contain an equal number of consecutive \'0\'s and \'1\'s. Input The first line contains the binary string s (1 ≤ |s| ≤ 2·105). The string consists only of the characters \'0\' and \'1\'. Output Print a single integer, the number of substrings with an equal number of consecutive \'0\'s and \'1\'s. Examples Input 00110011 Output 6 Input 10101 Output 4","solution":"def count_binary_substrings(s): Returns the number of substrings that contain an equal number of consecutive \'0\'s and \'1\'s. groups = [] count = 1 prev_char = s[0] for i in range(1, len(s)): if s[i] == prev_char: count += 1 else: groups.append(count) count = 1 prev_char = s[i] groups.append(count) substr_count = 0 for i in range(1, len(groups)): substr_count += min(groups[i], groups[i-1]) return substr_count"},{"question":"Polycarp has recently become interested in combinatorics and decided to work on permutations of numbers. A permutation of length n is an array consisting of n distinct integers from 1 to n in some order. For example, [2, 3, 1] is a permutation of length 3, while [1, 2, 2] and [1, 3, 4] are not permutations of length 3. Polycarp is particularly fascinated by the concept of an \\"almost sorted\\" permutation. A permutation of length n is called \\"almost sorted\\" if at most one element is misplaced from its original position (i.e., the position it would occupy in a sorted permutation). Given a permutation p of length n, check if it is \\"almost sorted\\". -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100000) — the length of the permutation. The second line contains n distinct integers p1, p2, ..., pn (1 ≤ pi ≤ n) — the permutation. -----Output----- On the single line of the output, print \\"YES\\" if the permutation is almost sorted, otherwise print \\"NO\\". -----Examples----- Input 5 1 2 3 5 4 Output YES Input 4 1 3 2 4 Output YES Input 3 3 1 2 Output NO -----Note----- In the first example, only elements 4 and 5 are swapped, so it is almost sorted. In the second example, only elements 2 and 3 are swapped, so it is almost sorted. In the third example, more than one element is misplaced from its original position, so it is not almost sorted.","solution":"def is_almost_sorted(n, permutation): Checks if the permutation is almost sorted by verifying at most one element is out of place. Args: n : int : the length of the permutation permutation : list of int : the permutation of length n Returns: str : \\"YES\\" if the permutation is almost sorted, otherwise \\"NO\\" misplaced_count = 0 for i in range(n): if permutation[i] != i + 1: misplaced_count += 1 if misplaced_count > 2: return \\"NO\\" return \\"YES\\""},{"question":"Implement a data structure that supports the following operations: 1. Insert an element into the data structure. 2. Check if an element exists in the data structure. 3. Return the smallest element in the data structure. 4. Return the largest element in the data structure. 5. Delete an occurrence of an element from the data structure if it exists. Your data structure should handle the operations efficiently. **Input Format:** - The input will begin with an integer `n` (the number of operations). - The next `n` lines will contain one of the following operations: - `INSERT x` - insert integer `x` into the data structure. - `EXISTS x` - check if integer `x` exists in the data structure. - `GETMIN` - return the smallest element currently in the data structure. - `GETMAX` - return the largest element currently in the data structure. - `DELETE x` - delete one occurrence of integer `x` from the data structure if it exists. **Output Format:** - For each `EXISTS` operation, output \'YES\' if the element exists in the data structure, otherwise output \'NO\'. - For each `GETMIN` operation, output the smallest element currently in the data structure. If the data structure is empty, output \'EMPTY\'. - For each `GETMAX` operation, output the largest element currently in the data structure. If the data structure is empty, output \'EMPTY\'. **Constraints:** - 1 ≤ n ≤ 100000 - -1000000 ≤ x ≤ 1000000 **Sample Input:** ``` 8 INSERT 5 INSERT 3 INSERT 7 EXISTS 3 GETMIN GETMAX DELETE 3 EXISTS 3 ``` **Sample Output:** ``` YES 3 7 NO ```","solution":"import bisect class DataStructure: def __init__(self): self.data = [] def insert(self, x): bisect.insort(self.data, x) def exists(self, x): index = bisect.bisect_left(self.data, x) if index < len(self.data) and self.data[index] == x: return \'YES\' return \'NO\' def get_min(self): if self.data: return self.data[0] return \'EMPTY\' def get_max(self): if self.data: return self.data[-1] return \'EMPTY\' def delete(self, x): index = bisect.bisect_left(self.data, x) if index < len(self.data) and self.data[index] == x: self.data.pop(index) # Interface to process the given operations def process_operations(operations): ds = DataStructure() result = [] for operation in operations: op_parts = operation.split() op_code = op_parts[0] if op_code == \\"INSERT\\": ds.insert(int(op_parts[1])) elif op_code == \\"EXISTS\\": result.append(ds.exists(int(op_parts[1]))) elif op_code == \\"GETMIN\\": result.append(ds.get_min()) elif op_code == \\"GETMAX\\": result.append(ds.get_max()) elif op_code == \\"DELETE\\": ds.delete(int(op_parts[1])) return result # Example usage: # operations = [\\"INSERT 5\\", \\"INSERT 3\\", \\"INSERT 7\\", \\"EXISTS 3\\", \\"GETMIN\\", \\"GETMAX\\", \\"DELETE 3\\", \\"EXISTS 3\\"] # print(process_operations(operations))"},{"question":"------ Question ------ You are given an array of N integers where each element represents the maximum number of steps that can be taken forward from that position. Create a function that returns the minimum number of jumps required to reach the end of the array (starting from the first element). If it is not possible to reach the end, return `-1`. **Input**: The first line contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case: - The first line contains an integer N (the length of the array). - The second line contains N space-separated integers representing the array. **Output**: For each test case, return the minimum number of jumps needed to reach the end of the array. If it is not possible, return `-1`. **Constraints**: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 0 ≤ a[i] ≤ 10^9 for each valid i **Function Signature**: ```python def min_jumps_to_end(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[int]: pass ``` **Example**: ------ Input ------ ``` 2 8 1 3 5 8 9 2 6 7 6 8 9 6 1 0 3 4 0 4 ``` ------ Output ------ ``` 3 -1 ``` **Explanation**: In the first test case, the minimum number of jumps to reach the end is 3: - Jump from index 0 to 1 (value at index 1 is 3). - Jump from index 1 to 4 (value at index 4 is 9). - Jump from index 4 to the last index. In the second test case, it is not possible to reach the end because of the zero at the second position, so the answer is `-1`. This problem evaluates understanding of dynamic programming or greedy algorithms, array manipulation, and efficient problem solving on large data sets.","solution":"def min_jumps_to_end(t, test_cases): Returns the minimum number of jumps required to reach the end of the array. If it is not possible to reach the end, return -1. results = [] for n, arr in test_cases: if n == 1: results.append(0) continue if arr[0] == 0: results.append(-1) continue max_reach = arr[0] step = arr[0] jump = 1 for i in range(1, n): if i == n - 1: results.append(jump) break max_reach = max(max_reach, i + arr[i]) step -= 1 if step == 0: jump += 1 if i >= max_reach: results.append(-1) break step = max_reach - i else: results.append(-1) return results"},{"question":"Your friend loves puzzles, and you\'ve decided to create one for them based on binary numbers. Given a binary number, you need to find its complement. The complement of a binary number is formed by flipping all the bits (changing 1 to 0 and 0 to 1). For example, the complement of `101` is `010`, and the complement of `111` is `000`. Write a function that takes a binary string as input and returns its complement as a binary string. Input A single line containing a binary string consisting of \'0\'s and \'1\'s. The binary string will be at least 1 digit long and at most 100 digits long. Output A single line containing the complement of the input binary string. Examples Input: 101 Output: 010 Input: 111 Output: 000","solution":"def binary_complement(binary_str): Returns the complement of the given binary string. Args: binary_str (str): A binary string consisting of \'0\'s and \'1\'s. Returns: str: The complement of the input binary string. complement = \\"\\" for bit in binary_str: if bit == \'0\': complement += \'1\' elif bit == \'1\': complement += \'0\' return complement"},{"question":"Given a string containing alphanumeric characters and special characters, write a function to remove all the special characters from the string and return the remaining string. If the string contains no special characters, return the original string. Example 1: Input: S = \\"a!b@c#123\\" Output: \\"abc123\\" Explanation: The special characters \'!\', \'@\', and \'#\' are removed from the string. Example 2: Input: S = \\"hello_world!\\" Output: \\"helloworld\\" Explanation: The special characters \'_\' and \'!\' are removed from the string. Example 3: Input: S = \\"abc123\\" Output: \\"abc123\\" Explanation: No special characters are present, so the original string is returned. Your Task: You don\'t need to read input or print anything. Complete the function removeSpecialCharacters() which takes the string S as input parameters and returns the modified string with all special characters removed. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^{4}","solution":"import re def removeSpecialCharacters(S): Removes all special characters from the given string S and returns the modified string. return re.sub(r\'[^a-zA-Z0-9]\', \'\', S)"},{"question":"In a faraway land, there are special festivals where the Village Headman organizes competitions. One such competition involves arranging flower pots to form a straight line. Each flower pot is assigned a height by the participants, and the Headman wants to determine if, for each test case, all the flower pots can be rearranged such that their heights form a non-decreasing sequence. Given the heights of the flower pots for each test case, help the Headman determine whether they can be arranged in a non-decreasing order or not. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line of input. This line contains n integers where n is the number of flower pots, representing their heights. ------ Output Format ------ For each test case, output \\"YES\\" if the flower pots can be arranged in non-decreasing order and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ n ≤ 100 1 ≤ height ≤ 10^4 ----- Sample Input 1 ------ 3 4 2 3 1 1 2 3 4 3 4 4 ----- Sample Output 1 ------ NO YES YES ----- Explanation 1 ------ Test case 1: The heights [4, 2, 3, 1] cannot be rearranged to form a non-decreasing sequence. Test case 2: The heights [1, 2, 3, 4] are already in non-decreasing order. Test case 3: The heights [3, 4, 4] are already in non-decreasing order.","solution":"def can_arrange_non_decreasing(T, test_cases): Determines if the flower pots heights in each test case can be arranged in a non-decreasing order. Parameters: T (int): The number of test cases. test_cases (list of lists): Each inner list contains integers representing the heights of the flower pots. Returns: list: A list of \\"YES\\" or \\"NO\\" for each test case indicating if they can be arranged in non-decreasing order. results = [] for heights in test_cases: if heights == sorted(heights): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A toy manufacturer is creating new toy sets, where each set consists of a combination of different types of toys. There are `T` types of toys available, and each type has a unique identifier between `1` and `T`. For each type of toy, there are `a_i` pieces available. Each toy set should have exactly `K` distinct types of toys. The manufacturer wants to know the total number of ways to form toy sets such that each set contains exactly `K` distinct types of toys. -----Input----- The first line of input contains two integers `T` and `K` (`1 <= K <= T <= 100`), the total number of toy types and the number of distinct toy types required in each set, respectively. The second line of input contains `T` integers `a_i` (`1 <= a_i <= 100`), the number of pieces available for each type of toy. -----Output----- The first and only line of output must contain the number of ways to form toy sets with exactly `K` distinct toy types. -----Examples----- Sample Input: 5 3 3 2 1 4 5 Sample Output: 10","solution":"from itertools import combinations def count_toy_sets(T, K, a): Returns the number of ways to form toy sets with exactly K distinct types of toys. :param T: int, total number of toy types. :param K: int, number of distinct toy types required in each set. :param a: List[int], number of pieces available for each type of toy. :return: int, number of ways to form toy sets. # We just need to calculate the number of ways to pick K distinct types from T types return len(list(combinations(range(1, T + 1), K)))"},{"question":"A competitive programmer is training for a coding marathon. They practice by solving problems on different platforms each day. The user wants to know which platforms are the most frequently visited over a given period. However, the user doesn\'t care about platforms visited consecutively on the same day, only the distinct days matter. Given a log of platforms visited, where each entry in the log represents a day, you need to find the most frequently visited platform(s). If multiple platforms have the same highest frequency, list them in alphabetical order. ----- **Input** The first line contains an integer n (1 le n le 100,000) — the number of days in the log. The following n lines each contain a string representing the name of the platform visited on that day. Platform names consist of lowercase English letters and have a length of up to 100 characters. ----- **Output** Print the most frequently visited platform(s). If multiple platforms have the same highest frequency, print each of them in alphabetical order, one platform per line. ----- **Examples** Input 7 codeforces leetcode codeforces geeksforgeeks leetcode codeforces hackerrank Output codeforces Input 5 codewars topcoder codewars topcoder hackerrank Output codewars topcoder Input 3 spoj atcoder kaggle Output atcoder kaggle spoj ----- **Note** In the first example, \\"codeforces\\" is the most frequently visited platform, appearing on 3 out of 7 distinct days. In the second example, both \\"codewars\\" and \\"topcoder\\" are the most frequently visited platforms, each appearing on 2 different days. They are printed in alphabetical order.","solution":"def most_frequent_platforms(n, platforms): from collections import Counter count = Counter(platforms) max_count = max(count.values()) most_frequent = sorted([platform for platform, freq in count.items() if freq == max_count]) return most_frequent"},{"question":"A company is organizing a set of team-building exercises for its employees. Each exercise has a certain number of points associated with it and every employee can choose to participate in some of the exercises. However, due to time constraints, each employee can only participate in a specific maximum number of exercises. You are given a list of exercises and their associated points, and the maximum number of exercises an employee can participate in. The goal is to maximize the total points an employee can earn without exceeding the maximum number of exercises they are allowed to participate in. Write a function `maximizePoints` that takes two parameters: 1. An integer `k` which represents the maximum number of exercises an employee can participate in. 2. A list of integers `points` which represents the points associated with each exercise. The function should return the maximum total points the employee can earn by participating in up to `k` exercises. **Input** - The first line contains an integer, `k` (1 ≤ k ≤ 1000) — the maximum number of exercises an employee can participate in. - The second line contains a list of integers, `points` (1 ≤ |points| ≤ 100000, 1 ≤ points[i] ≤ 1000) — the points for each exercise. **Output** - The function should return a single integer, the maximum total points an employee can earn. **Examples** **Input** ``` 3 [10, 20, 15, 25, 30] ``` **Output** ``` 75 ``` **Explanation**: The employee can select the exercises with 30, 25, and 20 points, achieving the maximum total points of 75. **Input** ``` 2 [5, 10, 15, 7] ``` **Output** ``` 25 ``` **Explanation**: The employee can choose the exercises with 15 and 10 points, achieving the maximum total points of 25. **Input** ``` 1 [50] ``` **Output** ``` 50 ``` **Explanation**: The employee can only participate in 1 exercise, and the only available exercise has 50 points.","solution":"def maximizePoints(k, points): Returns the maximum total points an employee can earn by participating in up to k exercises. if k >= len(points): return sum(points) points.sort(reverse=True) return sum(points[:k])"},{"question":"The Berland Chess Club is organizing a series of chess tournaments. To ensure fair play, they have devised a system that logs every player\'s participation across multiple tournaments. Each tournament log records the events of the form \\"player joined\\" and \\"player left\\". Players are assigned a unique ID, which is an integer from 1 to 10^6. At the end of the tournaments, the club needs to determine the player\'s total participation, defined as the total time (in join/leave events count, not the actual time) a player has been active in the tournaments. Each joining and leaving event for a player forms a participation period. Your task is to process the participation logs and determine the total participation for each player. -----Input----- The first line contains a positive integer m (1 ≤ m ≤ 200) — the number of participation logs. Each of the next m lines contains an integer k (1 ≤ k ≤ 1000) — the number of events in that tournament\'s log, followed by k events. Each event is in the form \\"+ p_{i}\\" or \\"- p_{i}\\", where p_{i} is an integer from 1 to 10^6, the unique player ID. It is guaranteed that each tournament log is not contradictory: for every player, the types of any of their two consecutive events are distinct, and no player leaves a tournament without joining it first. -----Output----- For each player who participated in at least one tournament, print their player ID followed by their total participation count in join/leave events. -----Examples----- Input 3 3 + 101 - 101 + 101 2 + 202 - 202 4 + 303 - 303 + 303 - 303 Output 101 3 202 2 303 4 Input 2 5 + 101 + 102 - 101 + 103 - 102 3 + 101 - 103 + 104 Output 101 3 102 2 103 2 104 1 -----Note----- In the first sample test: - Player 101 appears 3 times in the logs: +101, -101, and +101, thus their participation count is 3. - Player 202 appears 2 times in the logs: +202 and -202, thus their participation count is 2. - Player 303 appears 4 times in the logs: +303, -303, +303, and -303, thus their participation count is 4.","solution":"def compute_participation(logs): participation = {} for log in logs: events = log.split()[1:] for event in events: player_id = int(event[1:]) if player_id not in participation: participation[player_id] = 0 participation[player_id] += 1 return sorted(participation.items())"},{"question":"In a small town, there is a single ticket counter where people form a queue to buy tickets. Each person in the queue has a specific amount of money and the ticket costs a fixed amount, say `T` dollars. The counter only accepts exact change; thus, each person must pay the exact ticket price, `T`, without getting any change back. Each person pays with an integer amount of money and does not carry any coins. If a person does not have the exact amount needed, they miss the transaction, and the next person in the queue is served. Write a function `serve_tickets(queue, T)` that determines how many tickets are sold. The function takes two arguments: `queue`, a list of integers representing the amount of money each person has in the queue, and `T`, an integer representing the ticket price. The function should return the total number of tickets sold. Input and Output The function should input a list of integers and an integer, and output an integer. Example Input: serve_tickets([5, 10, 5, 20, 15], 5) Output: 3 Explanation: - The first person in the queue has exactly 5 dollars, which is the ticket price. Thus, they buy a ticket. - The second person has 10 dollars, which is not the exact price, so they miss the transaction. - The third person has exactly 5 dollars, so they buy a ticket. - The fourth person has 20 dollars, which is not the exact price, so they miss the transaction. - The fifth person has 15 dollars, which is not the exact price, so they miss the transaction. Hence, the total number of tickets sold is 3.","solution":"def serve_tickets(queue, T): Determines the number of tickets sold, given the ticket price and amounts of money each person in the queue has. :param queue: List[int] - A list of integers representing the amount of money each person has in the queue. :param T: int - An integer representing the ticket price. :return: int - The total number of tickets sold. tickets_sold = 0 for money in queue: if money == T: tickets_sold += 1 return tickets_sold"},{"question":"You are given a binary tree. Write a function to check whether the tree is a mirror of itself (i.e., symmetric around its center). A binary tree is symmetric if a line through the root divides the tree into two identical halves, and the left subtree of each node is a mirror reflection of the right subtree of the node on the opposite side. -----Input----- The input is given as the root node of the binary tree. Each node contains an integer value and pointers to its left and right child nodes. -----Output----- Return `true` if the binary tree is symmetric, otherwise return `false`. -----Examples----- Input 1 / 2 2 / / 3 4 4 3 Output true Input 1 / 2 2 3 3 Output false -----Note----- Consider the tree to be a binary tree where nodes can have 0, 1, or 2 children. Each node has a value, a left pointer to its left child, and a right pointer to its right child.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_symmetric(root): if not root: return True def is_mirror(left, right): if not left and not right: return True if not left or not right: return False return (left.val == right.val and is_mirror(left.left, right.right) and is_mirror(left.right, right.left)) return is_mirror(root.left, root.right)"},{"question":"John has a certain number of apples and he likes to arrange them neatly in trays for easy storage and transport. Each tray can hold exactly m apples. John wants to distribute all his apples into complete trays and wants to know how many trays he\'ll end up with, as well as how many apples will be left over if they don\'t completely fill a tray. For example, if John has 10 apples and each tray can hold 3 apples, he will need 3 trays and will have 1 apple left over. -----Input----- The input consists of two integers n and m (1 ≤ n, m ≤ 1000), where n is the number of apples and m is the number of apples each tray can hold. -----Output----- Print the number of complete trays John will fill and the number of apples left over. -----Examples----- Input 10 3 Output 3 1 Input 15 4 Output 3 3 Input 7 7 Output 1 0","solution":"def arrange_apples(n, m): Returns the number of complete trays filled with apples and the number of apples left over. :param n: int, number of apples :param m: int, number of apples each tray can hold :return: tuple (complete_trays, leftover_apples) complete_trays = n // m leftover_apples = n % m return complete_trays, leftover_apples"},{"question":"Problem You are given a string `S` of length `N`, consisting of lowercase English letters. You need to process `Q` queries. Each query is represented by a pair of integers `(L_i, R_i)` where `L_i` and `R_i` are indices denoting a substring of `S` (1-based inclusive), and a character `c`. For each query, you are required to count how many times the character `c` appears in the specified substring. Constraints - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 100000 - 1 ≤ L_i ≤ R_i ≤ N - `S` consists of only lowercase English letters (a-z) Input The input is given in the following format: N S Q L1 R1 c1 L2 R2 c2 ... LQ RQ cQ The first line contains an integer `N`, the length of the string `S`. The second line contains the string `S`. The third line contains an integer `Q`, the number of queries. Each of the next `Q` lines contains two integers `L_i` and `R_i`, and a character `c_i`, separated by spaces. Output For each of the `Q` queries, print a single integer representing the number of times the character `c` appears in the specified substring. Example Input 10 abacabadab 4 1 3 a 2 5 a 1 10 b 7 10 d Output 2 2 3 1","solution":"def count_character_occurrences(n, s, q, queries): Count the occurrences of character \'c\' in the substring S[l-1:r] for each query. Args: n : int : Length of the string S s : str : The string S q : int : Number of queries queries : list of tuple : Each query is represented by a tuple (Li, Ri, ci) Returns: list of int : The counts of character \'c\' in the specified substrings for each query results = [] for (l, r, c) in queries: substring = s[l-1:r] count = substring.count(c) results.append(count) return results"},{"question":"# Problem Context Word segmentation is the problem of dividing a string of text into words. For example, given the string \\"thisisfun\\", a word segmentation algorithm could produce the output \\"this is fun\\". One important aspect of word segmentation is using a dictionary of words to determine valid segmentations. The goal of this exercise is to implement a function `word_segment` that takes a string and a set of valid words, and returns the segmented string. If there are multiple ways to segment the string, the function should return the one where the words appear in the dictionary order. **Input:** - A string `s` (1 <= len(s) <= 1000) consisting of lowercase English alphabet characters. - A set of strings `dictionary` representing valid words (each word is non-empty and consists of lowercase English characters). **Output:** - A string with the segmented words separated by a single space. If no segmentation is possible, return the original string. **Examples:** ```python # Example 1 s = \\"applepie\\" dictionary = {\\"apple\\", \\"pie\\"} word_segment(s, dictionary) # Expected Output: \\"apple pie\\" # Example 2 s = \\"catsanddog\\" dictionary = {\\"cats\\", \\"cat\\", \\"and\\", \\"sand\\", \\"dog\\"} word_segment(s, dictionary) # Expected Output: \\"cats and dog\\" or \\"cat sand dog\\" (both are valid) # Example 3 s = \\"pineapplepenapple\\" dictionary = {\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"} word_segment(s, dictionary) # Expected Output: \\"pine apple pen apple\\" or \\"pineapple pen apple\\" or \\"pine applepen apple\\" (all are valid) # Example 4 s = \\"workhard\\" dictionary = {\\"work\\", \\"hard\\", \\"workhard\\"} word_segment(s, dictionary) # Expected Output: \\"work hard\\" # Example 5 s = \\"impossiblecase\\" dictionary = {\\"possible\\", \\"case\\"} word_segment(s, dictionary) # Expected Output: \\"impossiblecase\\" ``` **Function Signature:** ```python def word_segment(s: str, dictionary: set) -> str: # Your code here ```","solution":"def word_segment(s: str, dictionary: set) -> str: def backtrack(index): if index == len(s): return [] for i in range(index + 1, len(s) + 1): word = s[index:i] if word in dictionary: rest_of_sentence = backtrack(i) if rest_of_sentence is not None: return [word] + rest_of_sentence return None result = backtrack(0) if result is None: return s return \\" \\".join(result)"},{"question":"Write a function to reorganize the characters of a given string such that no two adjacent characters are the same. If such a reorganization is not possible, return an empty string. For example, given the string `\\"aab\\"`, the function should return `\\"aba\\"`. Given the string `\\"aaab\\"`, the function should return an empty string since it\'s not possible to rearrange to avoid adjacent repeating characters.","solution":"import heapq from collections import Counter def reorganize_string(s): Reorganizes the characters of the given string so that no two adjacent characters are the same. If such a reorganization is not possible, returns an empty string. char_count = Counter(s) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) count += 1 prev_count, prev_char = count, char result_str = \'\'.join(result) if len(result_str) != len(s): return \\"\\" return result_str"},{"question":"# Task: Given a string with a series of Roman numeral character(s), return the sum of their integer values. Consider only the one-character Roman numerals (\'I\', \'V\', \'X\', \'L\', \'C\', \'D\', \'M\'). Ignore spaces in the string. If the string contains any characters that are not valid Roman numeral characters, return `None`/`null` (depending on your language). # Key: - The valid one-character Roman numerals and their values are: - `I`: 1 - `V`: 5 - `X`: 10 - `L`: 50 - `C`: 100 - `D`: 500 - `M`: 1000 - Invalid characters include all non-Roman numeral characters excluding spaces. # Examples: ```python # Example: sum_roman(\\"III\\") returns 3 ``` ``` because: I + I + I = 3 ``` ```python # Example: sum_roman(\\"MCM\\") returns 2100 ``` ``` because: M + C + M = 1000 + 100 + 1000 = 2100 ``` ```python # Example: sum_roman(\\"AII\\") returns None ``` ``` because: There is an invalid character \'A\' in the string. ``` ```python # Example: sum_roman(\\"I M X\\") returns 1011 ``` ``` because: I + M + X = 1 + 1000 + 10 = 1011 ```","solution":"def sum_roman(s): # Roman numeral values roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 for char in s: if char == \' \': continue if char in roman_values: total += roman_values[char] else: return None return total"},{"question":"The city of Gridlock is plagued with traffic jams. The local government has decided to optimize traffic lights at intersections to improve the flow of movement. Each intersection can be represented as a grid point on a city map, and the streets between intersections can have varying congestion levels. The city map can be modeled as a 2D grid where each cell represents an intersection and each edge between cells represents a street with a congestion cost associated. The goal is to calculate the minimum total congestion cost for a car to travel from the top-left corner of the grid to the bottom-right corner. You are given a grid of size N x M where each cell contains an integer representing the congestion cost to move through that intersection. You can only move right or down from any cell. Write a program to compute the minimum congestion cost to travel from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1) of the grid. -----Constraints----- - 1 ≤ N, M ≤ 100 - 0 ≤ congestion[i][j] ≤ 1000 (0 ≤ i < N, 0 ≤ j < M) - All input values are integers. -----Input----- Input is given from Standard Input in the following format: N M congestion_0_0 congestion_0_1 ... congestion_0_(M-1) congestion_1_0 congestion_1_1 ... congestion_1_(M-1) : congestion_(N-1)_0 congestion_(N-1)_1 ... congestion_(N-1)_(M-1) -----Output----- Print the minimum congestion cost to travel from the top-left intersection to the bottom-right intersection. -----Sample Input----- 3 3 1 3 1 1 5 1 4 2 1 -----Sample Output----- 7 The optimal path is to move through the intersections with congestion costs 1→3→1→1→1, summing up to a total congestion cost of 7.","solution":"def min_congestion_cost(N, M, congestion): if not congestion or not congestion[0]: return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = congestion[0][0] # Fill the first row. for j in range(1, M): dp[0][j] = dp[0][j - 1] + congestion[0][j] # Fill the first column. for i in range(1, N): dp[i][0] = dp[i - 1][0] + congestion[i][0] # Fill the rest of the dp array. for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + congestion[i][j] return dp[-1][-1] # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) congestion = [] idx = 2 for i in range(N): row = list(map(int, data[idx:idx + M])) congestion.append(row) idx += M print(min_congestion_cost(N, M, congestion))"},{"question":"Gudi finds herself in another room, and a new challenge awaits her. A glowing inscription reads: \\"To progress, you must decode another puzzle. You have a string T consisting of lowercase letters. Your task is to transform this string to get the lexicographically smallest string possible by performing the following operations any number of times in any order: 1. \'Flip\' the string, which reverses the order of the characters. 2. \'Shift\' a character from the end of the string to the beginning or from the beginning to the end. For example, if T = \\"bac\\", applying \'Flip\' results in \\"cab\\". If instead, you apply \'Shift\' from end-to-beginning on \\"bac\\", the result is \\"cba\\". Your goal is to determine the smallest string that can be obtained. Can you set Gudi free? Input The first line contains an integer M. M test cases follow. Each test case contains a single string T. Output Print the answer to each test case in a new line. Constraints 1 ≤ M ≤ 10 1 ≤ |T| ≤ 8 SAMPLE INPUT 2 cab bca SAMPLE OUTPUT abc abc Explanation For the first test case, the string \\"cab\\" can be transformed to \\"abc\\" by reversing to \\"bac\\" and then rotating the first character to the end or the last character to the beginning, resulting in \\"abc\\". For the second test case, the string \\"bca\\" can similarly be rearranged to become \\"abc\\".","solution":"def smallest_lex_string(T): This function takes a string T and returns the lexicographically smallest string possible by performing any number of \'flip\' or \'shift\' operations. if sorted(T) == list(T): return T smallest_str = T for _ in range(len(T)): T = T[-1] + T[:-1] # Rotate the string if T < smallest_str: smallest_str = T flipped_str = T[::-1] # Flip the string if flipped_str < smallest_str: smallest_str = flipped_str return smallest_str def multiple_test_cases(M, test_cases): This function takes the number of test cases M and a list of test cases, returns a list of lexicographically smallest strings for each test case. results = [] for T in test_cases: results.append(smallest_lex_string(T)) return results"},{"question":"You are given an integer array arr of size n. The array has the following properties: 1. The array is initially sorted in non-decreasing order. 2. However, exactly one element in the array has been replaced by a much larger value. Your task is to restore the array to its original sorted state. For example, if the initial array is `[1, 2, 3, 100, 4, 5]`, then the largest value `100` should be removed, and the remaining array should be sorted to get `[1, 2, 3, 4, 5]`. # Input - An integer n (2 ≤ n ≤ 105) — the size of the array. - A single line containing n integers — the elements of the array. # Output - A single line containing the array restored to its original sorted order. # Example Input ``` 6 1 2 3 100 4 5 ``` Output ``` 1 2 3 4 5 ``` Input ``` 5 1 2 300 3 4 ``` Output ``` 1 2 3 4 ``` # Notes - Your solution should have a time complexity not worse than O(n log n). - Consider edge cases where the largest value could be the first or the last element in the array.","solution":"def restore_sorted_array(n, arr): This function takes the size n and the array arr of size n which is sorted except one element has been replaced by a large number. It restores the array to its original sorted state. # Find the largest element largest = max(arr) # Create a new array without the largest element restored_array = [x for x in arr if x != largest] # Sort the restored array (although it\'s already partially sorted) restored_array.sort() return restored_array"},{"question":"Tom has a series of n exams to take over the next few weeks. The difficulty level of each exam is represented by a positive integer. Tom wants to ensure he is well-prepared for the exams by practicing problems with similar difficulty levels beforehand. He plans to take k practice sessions before each exam. Each practice session should focus on problems whose difficulties sum to a unique value compared to other practice sessions for the same exam. Given the difficulty levels of the n exams and the number of practice sessions k, help Tom plan his practice sessions. Each practice session should consist of a subset of difficulties from available problems, and the sum of difficulties in each subset must differ from sums of other subsets for the same exam. -----Input----- The first line contains two integers n, k (1 ≤ n ≤ 50; 1 ≤ k ≤ frac{n(n + 1)}{2}) — the number of exams and the number of practice sessions per exam, respectively. The second line contains space-separated integers d_1, d_2, ..., d_{n} (1 ≤ d_{i} ≤ 10^7) — the difficulty levels of the exams. It is guaranteed that Tom has a set of problems with different difficulty levels to select his sessions from. -----Output----- Print k lines for each exam (total n*k lines): in the j-th line of the i-th exam\'s practice session print the number of problems c_{i,j} (1 ≤ c_{i,j} ≤ n) — the number of problems in the session on the i-th exam and c_{i,j} distinct integers p_{1, }i,j, p_{2, }i,j, ..., p_{c}_{i,j} — the difficulties of the problems in that session. The difficulties of the problems can be printed in any order. Separate numbers on the lines by spaces. It is guaranteed that there is a solution that meets the problem conditions. If there are multiple solutions, print any of them. -----Examples----- Input 2 2 5 8 Output 1 3 1 5 1 8 1 1","solution":"def plan_practice_sessions(n, k, difficulties): Plan practice sessions for exams with unique sums of problem difficulties in each session. :param n: Number of exams :param k: Number of practice sessions per exam :param difficulties: List of difficulties of exams :return: List of practice sessions max_difficulty = 10000000 # max difficulty according to constraints sessions = [] # Assign unique sums for practice sessions. Here it ensures sessions have unique sums. for i in range(n): current_difficulty = difficulties[i] for j in range(1, k + 1): # Let\'s use a single problem with dynamic difficulty ensuring uniqueness sessions.append([1, j]) # using single problem with difficulty j return sessions"},{"question":"Given an undirected graph with N nodes and M edges, each edge has a weight associated with it. Your task is to determine the minimum possible sum of weights to make all pairs of nodes directly or indirectly connected. Input Format: - The first line contains two integers N and M, representing the number of nodes and edges respectively. - Each of the next M lines contains three integers u, v, and w, where (u, v) denotes an edge between node u and node v with weight w. Output Format: - Print a single integer representing the minimum possible sum of weights required to make the graph connected. If it is not possible to connect all nodes, print -1. Constraints: 1 ≤ N ≤ 100,000 1 ≤ M ≤ 200,000 1 ≤ w ≤ 1,000,000 1 ≤ u, v ≤ N Sample Input: 4 4 1 2 1 2 3 4 3 4 5 1 3 3 Sample Output: 9 Explanation: The graph has 4 nodes with 4 edges. The minimum spanning tree of the graph, which connects all the nodes with the smallest possible total edge weight, includes the edges (1, 2) with weight 1, (1, 3) with weight 3, and (3, 4) with weight 5. The sum of these weights is 1 + 3 + 5 = 9, which is the minimum sum required to connect all nodes.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 return True return False def minimum_spanning_tree(n, edges): edges.sort(key=lambda x: x[2]) uf = UnionFind(n) mst_weight_sum = 0 edges_used = 0 for u, v, w in edges: if uf.union(u - 1, v - 1): mst_weight_sum += w edges_used += 1 if edges_used == n - 1: break if edges_used == n - 1: return mst_weight_sum return -1"},{"question":"In a bustling city, the new tradition of lighting up buildings on specific days is gaining momentum. There’s a very special building in the city that lights up a specific number of windows each night to create different patterns. The building has `n` windows, and you are tasked with finding out the number of \'on\' windows after a sequence of toggle operations. You start with all the windows turned off. You toggle windows in a specific way: 1. In the 1st pass, you toggle every window (turn it on if it was off, or turn it off if it was on). 2. In the 2nd pass, you toggle every 2nd window. 3. In the 3rd pass, you toggle every 3rd window, 4. and so on, until you complete `n` passes. For example, if there are 5 windows, after the sequence of toggles: - On the 1st pass, every window is toggled (so they are all turned on). - On the 2nd pass, windows 2 and 4 are toggled (so they are turned off). - On the 3rd pass, window 3 is toggled (so it is turned off). - On the 4th pass, window 4 is toggled (so it is turned on again). - On the 5th pass, window 5 is toggled (so it is turned off). The resulting pattern will have windows [1, 4] turned on. Write a function `count_on_windows(n: int) -> int` that takes an integer `n` (the number of windows and passes) and returns the number of windows that are on after completing the sequence of toggles. **Function Signature:** ```Python def count_on_windows(n: int) -> int: ``` # Examples ```Python count_on_windows(1) => 1 count_on_windows(2) => 1 count_on_windows(5) => 2 count_on_windows(10) => 3 ``` **Constraints:** - 1 <= n <= 1000 The solution should efficiently handle the given constraints and should avoid any unnecessary computations.","solution":"import math def count_on_windows(n: int) -> int: Given `n` windows and `n` passes, returns the number of windows that are on after completing the sequence of toggles. return int(math.sqrt(n))"},{"question":"Alice is participating in a programming contest. The contest involves solving several coding problems, and Alice wants to maximize her score. Each problem has a positive integer score and a certain required level of difficulty. Alice can solve any problem, provided her skill level is equal to or greater than the problem\'s difficulty level. Before the contest starts, Alice can spend a certain amount of her time on practice sessions to improve her skill level. Each practice session increases Alice’s skill by a fixed amount. Given Alice’s initial skill level, the time she can spend on practice sessions, and the list of problems with their respective scores and difficulty levels, determine the maximum score Alice can achieve. -----Input----- The first line of input contains an integer t (1 leq t leq 50), the number of test cases. Each test case includes the following: The first line contains four integers s_0, p, t_p, and i (1 leq s_0 leq 100, 1 leq p, t_p leq 100, 1 leq i leq 1000) — Alice’s initial skill level, the amount of skill increase per practice session, the total time Alice can spend on practice sessions, and the number of problems respectively. The next i lines, each containing two integers d_j and c_j (1 leq d_j leq 200, 1 leq c_j leq 1000) — the difficulty level and the score of the j-th problem, respectively. -----Output----- For each test case, print a single integer — the maximum score Alice can achieve. -----Example----- Input 2 10 5 3 5 8 100 12 50 10 70 9 40 11 60 5 2 5 3 7 20 9 40 5 30 Output 320 90 -----Note----- In the first example, Alice starts with a skill level of 10. She can attend 3 practice sessions, each increasing her skill by 5. Therefore, her maximum possible skill level after all practice sessions is 10 + 3 cdot 5 = 25. Given this skill, she can solve all problems and achieve a total score of 100 + 50 + 70 + 40 + 60 = 320. In the second example, Alice starts with a skill level of 5. She can attend 5 practice sessions, each increasing her skill by 2. Therefore, her maximum possible skill level after all practice sessions is 5 + 5 cdot 2 = 15. Given this skill, she can solve the 1st and 3rd problems yielding a total score of 20 + 30 = 50 + 40 = 90.","solution":"def max_score(t, test_cases): results = [] for case in test_cases: s_0, p, t_p, i = case[\'param\'] problems = case[\'problems\'] max_skill_level = s_0 + t_p * p total_score = 0 for d_j, c_j in problems: if d_j <= max_skill_level: total_score += c_j results.append(total_score) return results # Function to parse input and call max_score def solve(input_data): lines = input_data.split(\'n\') index = 0 t = int(lines[index].strip()) index += 1 test_cases = [] for _ in range(t): s_0, p, t_p, i = map(int, lines[index].strip().split()) index += 1 problems = [] for _ in range(i): d_j, c_j = map(int, lines[index].strip().split()) index += 1 problems.append((d_j, c_j)) test_cases.append({\'param\': (s_0, p, t_p, i), \'problems\': problems}) return max_score(t, test_cases)"},{"question":"Problem Statement You are given a string containing only lowercase alphabet characters. Your task is to determine the length of the longest substring without repeating characters. Write a program to find the maximum length of a substring where all characters are unique. # Constraints - The input string will consist of at most 1000 characters. # Example Input: ``` abcabcbb bbbbb pwwkew ``` Output: ``` 3 1 3 ``` Explanation: - The answer for \\"abcabcbb\\" is \\"abc\\", which the length is 3. - The answer for \\"bbbbb\\" is \\"b\\", with the length of 1. - The answer for \\"pwwkew\\" is \\"wke\\", with the length of 3. # Note Single input and output termination conditions are not specified. Hence, process for multiple inputs until end of the input (EOF).","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given two non-negative integers as strings, `num1` and `num2`. Your task is to compute the product of these two numbers and return the result as a string. Example 1: Input: num1 = \\"123\\", num2 = \\"45\\" Output: \\"5535\\" Explanation: 123 * 45 = 5535 Example 2: Input: num1 = \\"0\\", num2 = \\"52\\" Output: \\"0\\" Explanation: Any number multiplied by 0 is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `multiplyStrings()` which takes two strings num1 and num2 and returns their product as a string. Expected Time Complexity: O(|num1| * |num2|) Expected Auxiliary Space: O(|num1| + |num2|) Constraints: 1 <= |num1|, |num2| <= 200","solution":"def multiplyStrings(num1, num2): Takes two non-negative integers as strings and returns their product as a string. if num1 == \\"0\\" or num2 == \\"0\\": return \\"0\\" num1_length = len(num1) num2_length = len(num2) result = [0] * (num1_length + num2_length) for i in range(num1_length - 1, -1, -1): for j in range(num2_length - 1, -1, -1): product = int(num1[i]) * int(num2[j]) sum_ = product + result[i + j + 1] result[i + j + 1] = sum_ % 10 result[i + j] += sum_ // 10 # Skip leading zeroes start = 0 while start < len(result) and result[start] == 0: start += 1 return \'\'.join(map(str, result[start:]))"},{"question":"Statement: Alex runs a gourmet bakery and offers home delivery services for his exquisite pastries. Each order is delivered by a motorbike, and the delivery charge is calculated based on the distance to the customer’s location and the number of items ordered. Here is how the delivery charge is evaluated: - For the first 3 kilometers, the delivery charge is 25 units (i.e., Base Charge or Minimum Charge). - For distances greater than 3 kilometers, the charge is 8 units/kilometer beyond the first 3 kilometers. - Additionally, Alex applies a per-item handling fee of 5 units per pastry. Input: The first line of input contains N, the number of test cases, followed by N lines each containing: Total distance, D (in kilometers) Number of pastries, P D & P are space-separated values on each line. Output: N lines each containing the total delivery charge for each test case. Constraints: 1 ≤ N ≤ 50 | 1 ≤ D ≤ 50 | 1 ≤ P ≤ 20 SAMPLE INPUT 3 4 5 2 3 6 10 SAMPLE OUTPUT 74 40 118 Explanation In the above sample input: For the 1st case, D=4 and P=5, so the delivery charge is calculated as 25 (Base Charge) + 8 (for 1 extra km) + 25 (handling fee for 5 pastries) = 58 units. For the 2nd case, D=2 and P=3, so the delivery charge is computed as 25 (Base Charge) + 15 (handling fee for 3 pastries) = 40 units. For the 3rd case, D=6 and P=10, so the delivery charge is calculated as 25 (Base Charge) + 24 (for 3 extra km) + 50 (handling fee for 10 pastries) = 99 units.","solution":"def calculate_delivery_charge(D, P): base_charge = 25 additional_charge_per_km = 8 handling_fee_per_pastry = 5 if D > 3: extra_distance_charge = (D - 3) * additional_charge_per_km else: extra_distance_charge = 0 handling_fee = P * handling_fee_per_pastry total_charge = base_charge + extra_distance_charge + handling_fee return total_charge def process_test_cases(test_cases): results = [] for case in test_cases: D, P = case total_charge = calculate_delivery_charge(D, P) results.append(total_charge) return results"},{"question":"Aisha is analyzing the frequency trends of different queries made by users in a search engine. Each query is represented by an integer, and she has recorded a sequence of these queries. She wants to identify the most frequent query in a given range of her records. Write a function `mostFrequentQueryInRange` that takes an array `queries[]` of integers, an integer `Q` representing the number of queries, and a 2D array `ranges[][]` where each element ranges[i] contains two integers, representing the start and end of a range. The function should return an array of integers, where each element is the most frequent query within the corresponding range. If multiple queries have the same highest frequency within a range, return the smallest query among them. Example: ``` Input: Q = 2 queries = [4, 4, 2, 3, 4, 2] ranges = [[1, 3], [2, 5]] Output: [4, 2] ``` Explanation: - For the first range [1, 3], the query array is [4, 4, 2]. The most frequent query is 4. - For the second range [2, 5], the query array is [4, 2, 3, 4]. The frequencies are: 4 -> 2, 2 -> 1, 3 -> 1. Hence, query 4 is the most frequent. Your Task: You don\'t need to read input or print anything. Write the function `mostFrequentQueryInRange` that takes three arguments: - `queries[]` (list of integers) - `Q` (integer) - `ranges[][]` (list of list of integers) and returns a list of integers as explained. Expected Time Complexity: O(N * Q) Expected Auxiliary Space: O(N) Constraints: 1 <= queries.length <= 10^5 1 <= queries[i] <= 10^5 1 <= Q <= 10^3 1 <= ranges[i][0], ranges[i][1] <= queries.length","solution":"from collections import Counter def mostFrequentQueryInRange(queries, Q, ranges): Finds and returns the most frequent query within each given range. If there are multiple queries with the same highest frequency, returns the smallest query. Parameters: queries (List[int]): List of integers representing the queries. Q (int): Number of ranges. ranges (List[List[int]]): 2D list where each element is a list with 2 integers representing the start and end of a range. Returns: List[int]: List of integers where each element represents the most frequent query in the corresponding range. result = [] for r in ranges: start, end = r[0] - 1, r[1] # adjust to 0-based index sublist = queries[start:end] count = Counter(sublist) most_frequent_query = min(query for query, freq in count.items() if freq == max(count.values())) result.append(most_frequent_query) return result"},{"question":"You are given a 2D grid representing a map. Each cell in the grid can either be land (represented by \'1\') or water (represented by \'0\'). Your task is to count the number of distinct islands on this map. An island is a group of adjacent lands connected horizontally or vertically only. You may assume that all four edges of the grid are surrounded by water. ----- Input ------ The first line of the input contains an integer T denoting the number of test cases. Each test case starts with two integers N and M, representing the number of rows and columns in the grid, respectively. The next N lines contain M characters each, where each character is either \'1\' or \'0\', representing the land and water cells in the grid. ----- Output ------ For each test case, output a single line containing an integer that indicates the number of distinct islands in the grid. ----- Constraints ------ 1 ≤ T ≤ 10 1 ≤ N, M ≤ 1000 The sum of N * M over all test cases in a single test file does not exceed 10^{6} ----- Sample Input 1 ------ 3 4 5 11000 11000 00100 00011 4 5 11010 11000 00001 00001 3 3 111 010 111 ----- Sample Output 1 ------ 3 3 1 ----- Explanation 1 ------ Example case 1. There are three distinct islands: Island 1: The first two cells in the first two rows (top-left corner). Island 2: The single land cell in the middle. Island 3: The bottom right corner cells. Example case 2. There are three distinct islands: Island 1: The first two cells in the top-left corner. Island 2: The middle cell in the first row. Island 3: The two bottom-right cells. Example case 3. There is only one island: All land cells are connected into a single block.","solution":"def num_islands(grid): if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == \'0\': return grid[i][j] = \'0\' # mark as visited dfs(grid, i + 1, j) # down dfs(grid, i - 1, j) # up dfs(grid, i, j + 1) # right dfs(grid, i, j - 1) # left count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': count += 1 dfs(grid, i, j) return count def count_islands(test_cases): results = [] for test_case in test_cases: results.append(num_islands(test_case)) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, M = map(int, lines[index].split()) grid = [list(lines[index + i + 1]) for i in range(N)] test_cases.append(grid) index += N + 1 return test_cases def solution(input_str): test_cases = parse_input(input_str) results = count_islands(test_cases) return \\"n\\".join(map(str, results))"},{"question":"Develop a program that sorts a list of students based on their grades. Each student has a unique numeric ID, a name, and a grade (which can be a floating-point number). The program should support the following functionalities: 1. Add a new student to the list. 2. Remove a student from the list using their ID. 3. Sort and display the list of students based on their grades in descending order. If two students have the same grade, sort them by their names in alphabetical order. Input and Output Specifications: * Input: Your program should accept a series of commands from standard input. Each command will be in one of the following formats: - `ADD <id> <name> <grade>`: Adds a student with the given id, name, and grade to the list. - `REMOVE <id>`: Removes the student with the specified id from the list. - `DISPLAY`: Displays the current list of students sorted based on their grades in descending order, and by names in alphabetical order when grades are equal. * Output: On executing the `DISPLAY` command, print each student\'s ID, name, and grade on a new line. The details should be separated by spaces. * Constraints: - The ID is a positive integer. - The name is a non-empty string consisting of English alphabet characters. - The grade is a floating-point number between 0 and 100. - Commands are case-sensitive. * Your solution should handle cases where invalid commands are issued. Print \\"INVALID COMMAND\\" in such cases. Example: ``` Input: ADD 1 John 87.5 ADD 2 Alice 95.0 ADD 3 Bob 87.5 DISPLAY REMOVE 1 DISPLAY Output: 2 Alice 95.0 3 Bob 87.5 1 John 87.5 2 Alice 95.0 3 Bob 87.5 ```","solution":"class StudentManagementSystem: def __init__(self): self.students = [] def add_student(self, student_id, name, grade): self.students.append({\'id\': student_id, \'name\': name, \'grade\': grade}) def remove_student(self, student_id): self.students = [student for student in self.students if student[\'id\'] != student_id] def display_students(self): sorted_students = sorted(self.students, key=lambda x: (-x[\'grade\'], x[\'name\'])) result = [] for student in sorted_students: result.append(f\\"{student[\'id\']} {student[\'name\']} {student[\'grade\']}\\") return result def process_command(self, command): parts = command.split() if parts[0] == \'ADD\' and len(parts) == 4: try: student_id = int(parts[1]) name = parts[2] grade = float(parts[3]) self.add_student(student_id, name, grade) except ValueError: return \\"INVALID COMMAND\\" elif parts[0] == \'REMOVE\' and len(parts) == 2: try: student_id = int(parts[1]) self.remove_student(student_id) except ValueError: return \\"INVALID COMMAND\\" elif parts[0] == \'DISPLAY\' and len(parts) == 1: return self.display_students() else: return \\"INVALID COMMAND\\" return \\"\\""},{"question":"Write a function that determines if a given word can be constructed using letters from a given list of letter tiles. Each tile can be used only once. Write a function that, given a word and a list of letter tiles, return whether the word can be formed using the tiles. ```Python can_form(word, tiles) word is the target word to form tiles is a list of available letter tiles ``` # Example ```Python can_form(\\"apple\\", [\\"a\\", \\"p\\", \\"p\\", \\"l\\", \\"e\\"]) should return True can_form(\\"apple\\", [\\"a\\", \\"p\\", \\"p\\", \\"l\\", \\"l\\"]) should return False can_form(\\"apple\\", [\\"a\\", \\"p\\", \\"p\\", \\"l\\", \\"e\\", \\"e\\"]) should return True can_form(\\"apple\\", [\\"a\\", \\"p\\", \\"l\\", \\"e\\"]) should return False ```","solution":"def can_form(word, tiles): Determines if a word can be constructed using letters from a given list of tiles. Each tile can be used only once. Parameters: word (str): The target word to form. tiles (list of str): The list of available letter tiles. Returns: bool: True if the word can be formed using the tiles, False otherwise. from collections import Counter word_count = Counter(word) tiles_count = Counter(tiles) for letter, count in word_count.items(): if tiles_count[letter] < count: return False return True"},{"question":"# Your Task In the land of Hexonia, people have a peculiar way of celebrating birthdays. Each person has a unique birthday celebration pattern that follows these rules: * A person celebrates their birthday by meeting up with `N` friends (excluding themselves). * The pattern of meeting up friends continues recursively such that each of the friends also meet up with their `N` friends, and so on. * It has been observed that no person meets up with the same friend more than once in any celebration cascade. Given the name of a person and their birthday celebration pattern (in form of an integer `N` which indicates how many friends each person meets), determine the total number of people (including the original person) involved in the birthday celebration on a particular level of recursion. For instance, if `N = 2` and we want to find the total number of people involved up to level `2`, it would be: * On the original person\'s birthday (`level 1`): `1 + 2` (the original person plus two friends). * Each of those 2 friends will meet their own 2 friends in `level 2`. # Input * A single integer `N` representing the number of friends each person meets on their birthday. * A single integer `L` representing the level of recursion to consider. # Output * The total number of people involved in the birthday celebration up to level `L`, including the original person. # Example ``` Input: 2 2 Output: 7 Explanation: - Level 1: 1 (original person) + 2 friends = 3 - Level 2: Each of those 2 friends meets 2 new friends = 2 * 2 = 4 - Total people involved up to level 2: 3 (level 1) + 4 (level 2) = 7 ```","solution":"def total_people_involved(N, L): Calculate the total number of people involved in the birthday celebration up to level L given each person meets N friends per level. Args: N (int): The number of friends each person meets. L (int): The level of recursion to consider. Returns: int: The total number of people involved up to level L. # Base case: level 0 only includes the original person if L == 0: return 1 # Total people includes the original person plus N friends total_people = 1 # Iterate through levels from 1 to L and calculate the number of new people introduced at each level for level in range(1, L + 1): total_people += N ** level return total_people"},{"question":"Count the longest consecutive sequence of the same number in array. # result `0` for an empty array, otherwise an integer representing the length of the longest sequence. # example - For the array [1, 1, 2, 2, 2, 3], the longest consecutive sequence length is 3 (for the sequence of \'2\'s). - For the array [1, 2, 3, 4], the longest consecutive sequence length is 1 (all numbers are unique). - For the array [4, 4, 4, 4, 4], the longest consecutive sequence length is 5 (for the sequence of \'4\'s). - For an empty array, the result is 0.","solution":"def longest_consecutive_sequence(arr): Returns the length of the longest consecutive sequence of the same number in the array. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 return max(max_length, current_length)"},{"question":"You are to design a robotic lawn mower that can navigate a rectangular grid garden. The garden is represented as an MxN grid where each cell can either be passable (denoted by a 1) or impassable (denoted by a 0). The mower can start at any cell in the grid and can move only to adjacent cells either horizontally or vertically, but not diagonally. The task for the mower is to cover all the passable cells in the garden, ensuring that each passable cell is visited exactly once. If it is not possible for the mower to cover all passable cells starting from any cell, you should indicate that as well. If it is possible, you need to provide the starting cell coordinates from which the mower can start and cover all the passable cells. If there are multiple such starting points, provide the one with the smallest row number; if there are still ties, provide the one with the smallest column number. If it\'s not possible, you should indicate that. Input First line consists of the number of test cases. Each test case starts with two integers M (2 ≤ M ≤ 50) and N (2 ≤ N ≤ 50). Following this will be an MxN grid consisting of 0s and 1s. Output For each test case, print either \\"START AT row col\\" indicating the starting cell coordinates (0-based) if such a path exists, or \\"IMPOSSIBLE\\" if no such path exists. SAMPLE INPUT 2 3 3 1 1 1 1 0 1 1 1 1 4 4 1 0 1 1 0 1 1 0 1 1 0 1 0 1 1 1 SAMPLE OUTPUT START AT 0 0 IMPOSSIBLE","solution":"def can_visit_all_passable_cells(grid, visited, x, y, M, N): moves = [(0,1),(1,0),(0,-1),(-1,0)] # right, down, left, up stack = [(x, y)] while stack: cx, cy = stack.pop() if not (0 <= cx < M and 0 <= cy < N) or visited[cx][cy] or grid[cx][cy] == 0: continue visited[cx][cy] = True for move in moves: nx, ny = cx + move[0], cy + move[1] stack.append((nx, ny)) def check_all_cells_visited(visited, grid, M, N): for i in range(M): for j in range(N): if grid[i][j] == 1 and not visited[i][j]: return False return True def find_starting_position(M, N, garden): for row in range(M): for col in range(N): if garden[row][col] == 1: visited = [[False] * N for _ in range(M)] can_visit_all_passable_cells(garden, visited, row, col, M, N) if check_all_cells_visited(visited, garden, M, N): return f\\"START AT {row} {col}\\" return \\"IMPOSSIBLE\\" def robotic_lawn_mower(t, test_cases): results = [] for i in range(t): M, N, grid = test_cases[i] result = find_starting_position(M, N, grid) results.append(result) return results"},{"question":"You are given a string consisting of lowercase English letters and you need to determine how many distinct characters appear in the string at least twice. -----Input----- The input contains a single string `s` which consists of lowercase English letters (1 ≤ |s| ≤ 1 000 000). -----Output----- Print the number of distinct characters that appear at least twice in the string. -----Examples----- Input abacabad Output 2 Input abcdef Output 0 -----Note----- In the first sample, the characters \'a\' and \'b\' appear more than once, giving us a count of 2. In the second sample, all characters appear exactly once, so there\'s no character that appears at least twice, giving us a count of 0.","solution":"def count_distinct_characters_with_duplicates(s): Returns the number of distinct characters that appear at least twice in the string s. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters appear at least twice duplicate_count = sum(1 for count in char_count.values() if count > 1) return duplicate_count"},{"question":"You are given two strings, `s1` and `s2`. Write a function that checks if `s2` is a rotated version of `s1`. A string `s2` is considered a rotated version of `s1` if there exists some integer `k` such that shifting `s1` to the left `k` times gives `s2`. For example: ```python is_rotated_version(\\"waterbottle\\", \\"erbottlewat\\") == True # \\"erbottlewat\\" is \\"waterbottle\\" rotated to the left by 3 positions. is_rotated_version(\\"hello\\", \\"ohell\\") == True # \\"ohell\\" is \\"hello\\" rotated to the left by 4 positions. is_rotated_version(\\"hello\\", \\"olelh\\") == False # \\"olelh\\" is not a rotated version of \\"hello\\". ``` Your function prototype should be: ```python def is_rotated_version(s1: str, s2: str) -> bool: ``` Constraints: - The function should handle the comparison case sensitively. - The strings `s1` and `s2` will only contain lowercase English letters. - The length of `s1` and `s2` will be between 1 and 1000.","solution":"def is_rotated_version(s1: str, s2: str) -> bool: Checks if s2 is a rotated version of s1. if len(s1) != len(s2): return False # Concatenate s1 with itself to form a new string # which will contain all possible rotations of s1 as substrings concatenated = s1 + s1 # Check if s2 is a substring of the concatenated string return s2 in concatenated"},{"question":"A scientist studying genetically modified plants wants to compare the growth rates of different plant varieties. She plants seeds from various varieties, and she tracks the growth in height (in millimeters) of each plant every day over a certain period. Given the height measurements over days for multiple plant varieties, she wants to determine which variety has the highest average growth rate. The growth rate for a plant is defined as the difference between its height on the last day and its height on the first day, divided by the number of days minus one (this gives the average daily growth rate). Write a program that determines the plant variety with the highest average growth rate from the given data. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of varieties. Each of the next n lines contains an integer mi (2 ≤ mi ≤ 100), followed by mi space-separated integers h_1, h_2, ..., h_{mi} (1 ≤ h_j ≤ 10000) — the number of days of measurements followed by the height measurements for the i-th plant variety. -----Output----- Output a single integer — the one-based index of the plant variety with the highest average growth rate. If there are multiple varieties with the same highest average growth rate, output the smallest index among them. -----Examples----- Input 3 4 10 20 30 40 5 7 14 21 28 35 3 5 10 20 Output 2 Input 2 3 100 200 300 3 50 75 100 Output 1 -----Note----- In the first example, the average growth rate of the first variety is (40 - 10) / (4 - 1) = 30 / 3 = 10. The average growth rate of the second variety is (35 - 7) / (5 - 1) = 28 / 4 = 7. The average growth rate of the third variety is (20 - 5) / (3 - 1) = 15 / 2 = 7.5. Since the second variety has the highest average growth rate, the output is 2. In the second example, the average growth rate of the first variety is (300 - 100) / (3 - 1) = 200 / 2 = 100. The average growth rate of the second variety is (100 - 50) / (3 - 1) = 50 / 2 = 25. Since the first variety has the highest average growth rate, the output is 1.","solution":"def highest_growth_rate(n, plant_data): highest_rate = -float(\'inf\') best_variety = -1 for i, data in enumerate(plant_data): mi = data[0] heights = data[1:] growth_rate = (heights[-1] - heights[0]) / (mi - 1) if growth_rate > highest_rate: highest_rate = growth_rate best_variety = i + 1 return best_variety"},{"question":"You are given a grid with N rows and M columns, filled with integers. Your task is to find the sum of all integers in the grid that are greater than a given integer X. Input: - The first line contains three integers, N (number of rows), M (number of columns), and X (the integer to compare against). - The next N lines each contain M integers, representing the grid. Output: - Print the sum of all integers in the grid that are greater than X. If no integer in the grid is greater than X, print 0. Constraints: 1 ≤ N, M ≤ 100 -1000 ≤ grid integers, X ≤ 1000 Example: Input: 3 3 5 1 6 3 8 2 4 7 5 9 Output: 30 Explanation: In the given grid, the numbers greater than 5 are 6, 8, 7, and 9. Their sum is 6 + 8 + 7 + 9 = 30.","solution":"def sum_greater_than_x(n, m, x, grid): Returns the sum of all integers in the grid that are greater than X. Parameters: n (int): Number of rows m (int): Number of columns x (int): The threshold integer grid (list of list of int): The grid of integers Returns: int: Sum of all integers greater than X total_sum = 0 for row in grid: for num in row: if num > x: total_sum += num return total_sum"},{"question":"You are given two sorted linked lists in non-decreasing order. Merge the two lists into one sorted linked list and return the head of the resultant list. You should not create a new list but instead reuse the nodes in the given lists. Both linked lists should be non-empty and contain at least one node each. Input The input consists of two parts: 1. The first part is a description of the first linked list. 2. The second part is a description of the second linked list. Both linked lists are described in a similar manner. Each part starts with an integer n (1 ≤ n ≤ 1000), the number of elements in the list, followed by n integers. Output Print the elements of the merged linked list in a single line separated by spaces. Examples Input 3 1 3 5 4 2 4 6 8 Output 1 2 3 4 5 6 8 Input 1 4 2 1 5 Output 1 4 5 Note In the first sample, the merged linked list should be 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 8. In the second sample, the merged linked list should be 1 -> 4 -> 5.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def mergeTwoLists(l1: ListNode, l2: ListNode) -> ListNode: dummy = ListNode(0) current = dummy while l1 is not None and l2 is not None: if l1.val <= l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1 is not None: current.next = l1 else: current.next = l2 return dummy.next def printList(head: ListNode): result = [] while head: result.append(str(head.val)) head = head.next print(\\" \\".join(result)) def createList(nums): if not nums: return None head = ListNode(nums[0]) current = head for num in nums[1:]: current.next = ListNode(num) current = current.next return head"},{"question":"You are implementing a system that returns the minimum number of operations required to convert a string S into a palindrome. An operation involves changing one character to any other character. A palindrome is a string that reads the same forwards and backwards. Input The first line contains an integer T - the number of test cases. Each of the next T lines contains a string S consisting of lowercase English letters. Output For each test case, print the minimum number of operations required on a new line. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 The sum of all lengths of strings across all test cases does not exceed 10^6. SAMPLE INPUT 3 abc aab race SAMPLE OUTPUT 1 1 2","solution":"def min_operations_to_palindrome(S): Returns the minimum number of operations to convert S into a palindrome. n = len(S) operations = 0 for i in range(n // 2): if S[i] != S[n - i - 1]: operations += 1 return operations def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(min_operations_to_palindrome(S)) return results"},{"question":"In a distant galaxy, the inhabitants have developed their own number system. In this number system, every number is represented by a sequence of digits. The rules to form valid numbers in this system are as follows: 1. The sequence consists of digits \'0\', \'1\', and \'2\'. 2. The sequence should contain at least one \'1\'. 3. \'0\' cannot immediately follow \'1\' (i.e., \\"10\\" is not a valid subsequence). 4. Any number with a digit \'2\' should not contain the digit \'0\' after it. (i.e., if a \'2\' appears in the number, all following digits must be either \'1\' or \'2\'). Given a sequence of digits, determine whether it represents a valid number in this galaxy\'s system. -----Input----- The input consists of a single line containing one string, `s` (1 le |s| le 100) — the sequence of digits (characters \'0\', \'1\', \'2\'). -----Output----- Print \\"VALID\\" if the sequence represents a valid number in the galaxy\'s system. Otherwise, print \\"INVALID\\". -----Examples----- Input 12021 Output INVALID Input 21121 Output VALID Input 11102 Output INVALID -----Note----- In the first example, \\"12021\\" is invalid because of the \\"0\\" which appears after \\"120\\" (after a 2). In the second example, \\"21121\\" follows all the rules and is thus valid. In the third example, \\"11102\\" is invalid because \\"102\\" contains \\"10\\", which is not allowed.","solution":"def is_valid_number(s): Check if the given string s is a valid number in the distant galaxy\'s number system. Validity rules: 1. The sequence should contain at least one \'1\'. 2. \'0\' cannot immediately follow \'1\'. 3. Any number with a digit \'2\' should not contain the digit \'0\' after it. if \'1\' not in s: return \\"INVALID\\" n = len(s) for i in range(1, n): if s[i] == \'0\' and s[i-1] == \'1\': return \\"INVALID\\" contains_two = False for i in range(n): if s[i] == \'2\': contains_two = True if contains_two and s[i] == \'0\': return \\"INVALID\\" return \\"VALID\\""},{"question":"Given an integer array and a target sum, find all the unique pairs of integers in the array that add up to the target sum. Each pair should be presented in ascending order, and the output should contain unique pairs (i.e., no duplicates). Example 1: Input: Arr[] = {1, 2, 3, 4, 5, 6}, Target = 7 Output: [[1, 6], [2, 5], [3, 4]] Explanation: The pairs (1, 6), (2, 5), and (3, 4) add up to the target sum of 7. Example 2: Input: Arr[] = {1, 1, 2, 45, 46, 46}, Target = 47 Output: [[1, 46], [2, 45]] Explanation: The pairs (1, 46) and (2, 45) add up to the target sum of 47. Although the number 46 appears twice, the pair (1, 46) should only be listed once. Your Task: This is a function problem. The input is already taken care of by the driver code. You need to complete the function findPairs() that takes an array (arr), sizeOfArray (n), and target sum (target). The function should return a list of all unique pairs that add up to the target sum. The driver code takes care of the printing. Expected Time Complexity: O(NLOG(N)) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 -10^5 ≤ A[i] ≤ 10^5","solution":"def findPairs(arr, n, target): Finds all unique pairs in the array that add up to the target sum. Args: arr: List[int] - Input array of integers n: int - Size of the array target: int - Target sum for pairs Returns: List[List[int]] - List of unique pairs that add up to the target sum, in ascending order. arr.sort() pairs = [] seen = set() left, right = 0, n - 1 while left < right: current_sum = arr[left] + arr[right] if current_sum == target: if (arr[left], arr[right]) not in seen: pairs.append([arr[left], arr[right]]) seen.add((arr[left], arr[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return pairs"},{"question":"You are given a text document that contains numerous words, some of which occur multiple times. You need to write a program to find and output the top k most frequent words in the document. The output should show the words in descending order of their frequency. If multiple words have the same frequency, then they should be listed in the lexicographical order. -----Input----- The input starts with an integer ( k ) (1 leq k leq 100), indicating the number of top frequent words to be output. The rest of the input contains the words in the document, separated by spaces. Each word consists of lowercase English letters only (a-z) and has a length between 1 and 20 characters. The total number of words will not exceed 10000. -----Output----- Output exactly ( k ) words, each word on a new line, in descending order of their frequency. If two words have the same frequency, they should be output in lexicographical order. -----Examples----- Sample Input: 3 word frequency word test word frequency test Sample Output: word frequency test","solution":"from collections import Counter def top_k_frequent_words(k, words): Returns the top k most frequent words in descending order of frequency. If multiple words have the same frequency, they are ordered lexicographically. word_counts = Counter(words) sorted_words = sorted(word_counts.items(), key=lambda x: (-x[1], x[0])) return [word for word, count in sorted_words[:k]] def process_input(k, text): words = text.split() return top_k_frequent_words(k, words)"},{"question":"You are given a string S consisting of lowercase English letters. You are allowed to remove at most one character from the string. Your task is to determine whether it is possible to make the string a palindrome after removing at most one character. A string is called a palindrome if it reads the same forward and backward. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one string S. ------ Output Format ------ For each test case, print \\"YES\\" if it is possible to remove at most one character from S to make it a palindrome. Otherwise, print \\"NO\\". You may print each character of the string in uppercase or lowercase (for example, the strings \\"Yes\\", \\"yEs\\", \\"yes\\", and \\"YES\\" will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 ------ Subtasks ------ Subtask 1 (100 points): Original constraints. ----- Sample Input 1 ------ 3 abca abc racecar ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test Case 1: By removing the character \'c\', the string becomes \'aba\', which is a palindrome. Test Case 2: There is no way to remove just one character to make it a palindrome. Test Case 3: The given string is already a palindrome, so no characters need to be removed.","solution":"def can_be_palindrome(s): Determines if it\'s possible to make the string a palindrome by removing at most one character. def is_palindrome(s, i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome(s, left + 1, right) or is_palindrome(s, left, right - 1) left += 1 right -= 1 return True def process_test_cases(test_cases): results = [] for s in test_cases: if can_be_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function `find_subsequence` that takes two strings `s1` and `s2` as input and returns \\"YES\\" if `s2` is a subsequence of `s1`, otherwise returns \\"NO\\". A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. -----Input----- The input consists of two strings `s1` and `s2`. Both strings consist of lowercase English letters. The length of `s1` is at most 10^5 and the length of `s2` is at most 10^5. -----Output----- Print \\"YES\\" if `s2` is a subsequence of `s1`. Otherwise, print \\"NO\\". -----Examples----- Input abcdef ace Output YES Input abc acb Output NO -----Note----- In the first example, `s2` is \\"ace\\", which can be obtained from `s1` \\"abcdef\\" by removing the characters \\"b\\", \\"d\\", and \\"f\\". In the second example, `s2` is \\"acb\\", which cannot be obtained from `s1` \\"abc\\" by deleting some characters without reordering the remaining characters.","solution":"def find_subsequence(s1, s2): Returns \\"YES\\" if s2 is a subsequence of s1, otherwise returns \\"NO\\". it = iter(s1) return \\"YES\\" if all(char in it for char in s2) else \\"NO\\""},{"question":"A university research team is working on developing an algorithm for managing a new type of data structure called a \\"segment tree\\" for efficient range queries and updates. They have devised a simplified version of the problem which they need help solving. The segment tree should be able to efficiently update elements and calculate the sum of elements within a specified range. Your task is to implement a segment tree that supports the following operations: 1. `update(pos, value)`: Update the element at index `pos` to `value`. 2. `range_sum(l, r)`: Calculate the sum of elements from index `l` to index `r` (inclusive). Implement the segment tree with the following constraints: - The array can have up to 10^5 elements. - Each element value will be in the range [1, 10^9]. - Multiple update and sum queries will be performed. The input and output format for the expected solution is as follows: -----Input----- The first line contains an integer `n` (1 leq n leq 10^5), the number of elements in the array. The second line contains `n` integers representing the elements of the array. The third line contains an integer `q` (1 leq q leq 10^5), the number of queries. Each of the next `q` lines contains a query in one of the following formats: - \\"1 pos value\\" - meaning you should perform `update(pos, value)` operation. `1 leq pos leq n`, `1 leq value leq 10^9`. - \\"2 l r\\" - meaning you should perform `range_sum(l, r)` operation. `1 leq l leq r leq n`. -----Output----- For each \\"2 l r\\" query, output the result of the `range_sum(l, r)` operation on a new line. -----Example------ Input 5 1 3 5 7 9 4 2 1 3 1 2 4 2 1 3 2 2 5 Output 9 8 25","solution":"class SegmentTree: def __init__(self, array): n = len(array) self.n = n self.tree = [0] * (2 * n) # Build the tree for i in range(n): self.tree[n + i] = array[i] for i in range(n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, pos, value): pos += self.n # Shift index to the leaf self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[pos * 2] + self.tree[pos * 2 + 1] def range_sum(self, l, r): l += self.n # Shift index to the leaf r += self.n # Shift index to the leaf sum = 0 while l <= r: if l % 2 == 1: sum += self.tree[l] l += 1 if r % 2 == 0: sum += self.tree[r] r -= 1 l //= 2 r //= 2 return sum if __name__ == \'__main__\': import sys input = sys.stdin.read data = input().split() n = int(data[0]) array = list(map(int, data[1:n+1])) q = int(data[n+1]) queries = data[n+2:] segtree = SegmentTree(array) result = [] for i in range(q): query = queries[i * 3:(i + 1) * 3] if query[0] == \'1\': pos = int(query[1]) - 1 value = int(query[2]) segtree.update(pos, value) elif query[0] == \'2\': l = int(query[1]) - 1 r = int(query[2]) - 1 result.append(segtree.range_sum(l, r)) for res in result: print(res)"},{"question":"You are working on software that manages the attendance for an educational institution. There is a need to mark the attendance of students in a class. Each student is represented by their student ID and their attendance status is either present \'P\' or absent \'A\'. The software keeps a record of attendance over a semester for different classes. Your task is to implement a function called `calculate_attendance_percentage` that calculates the attendance percentage for a student in a specific class. The function should take two inputs, the student ID and the list of attendance records where each record is a dictionary containing \'class_id\', \'student_id\', and \'status\'. Here\'s the structure of an attendance record: ```python { \\"class_id\\": \\"CS101\\", \\"student_id\\": \\"S123\\", \\"status\\": \\"P\\" } ``` The function should return the attendance percentage for the given student in the specified class, as a floating-point number rounded to two decimal places. Example: ```python attendance_records = [ {\\"class_id\\": \\"CS101\\", \\"student_id\\": \\"S123\\", \\"status\\": \\"P\\"}, {\\"class_id\\": \\"CS101\\", \\"student_id\\": \\"S123\\", \\"status\\": \\"A\\"}, {\\"class_id\\": \\"CS101\\", \\"student_id\\": \\"S124\\", \\"status\\": \\"P\\"}, {\\"class_id\\": \\"CS101\\", \\"student_id\\": \\"S123\\", \\"status\\": \\"P\\"}, {\\"class_id\\": \\"CS102\\", \\"student_id\\": \\"S123\\", \\"status\\": \\"P\\"}, ] result = calculate_attendance_percentage(\\"S123\\", \\"CS101\\", attendance_records) print(result) # Output: 66.67 ``` Function signature: ```python def calculate_attendance_percentage(student_id: str, class_id: str, records: list) -> float: ```","solution":"def calculate_attendance_percentage(student_id: str, class_id: str, records: list) -> float: Calculates the attendance percentage for a student in a specific class. Args: student_id (str): The ID of the student. class_id (str): The ID of the class. records (list): List of attendance records. Each record is a dictionary containing \'class_id\', \'student_id\', and \'status\'. Returns: float: The attendance percentage rounded to two decimal places. total_classes = 0 attended_classes = 0 for record in records: if record[\'class_id\'] == class_id and record[\'student_id\'] == student_id: total_classes += 1 if record[\'status\'] == \'P\': attended_classes += 1 if total_classes == 0: return 0.0 # To handle case where there are no records for the student in the given class. attendance_percentage = (attended_classes / total_classes) * 100 return round(attendance_percentage, 2)"},{"question":"You are working on a system that classifies text into different sentiment categories, and you have been tasked with generating features based on the frequency of alphabet characters in given documents. Your task is to write a function that counts the occurrences of each English alphabet letter (ignoring case) in a given string and returns the character frequencies in alphabetical order. Example Given a string `\\"Hello World!\\"`, the letter frequency counts are: - `a: 0` - `b: 0` - `c: 0` - `d: 1` - `e: 1` - `f: 0` - `g: 0` - `h: 1` - `i: 0` - `j: 0` - `k: 0` - `l: 3` - `m: 0` - `n: 0` - `o: 2` - `p: 0` - `q: 0` - `r: 1` - `s: 0` - `t: 0` - `u: 0` - `v: 0` - `w: 1` - `x: 0` - `y: 0` - `z: 0` Your output should be formatted as a list of tuples, where each tuple contains a character and its corresponding frequency count sorted in alphabetical order, as shown below: ```[(a,0), (b,0), (c,0), (d,1), (e,1), (f,0), (g,0), (h,1), (i,0), (j,0), (k,0), (l,3), (m,0), (n,0), (o,2), (p,0), (q, 0), (r,1), (s,0), (t,0), (u,0), (v,0), (w,1), (x,0), (y,0), (z,0)]```","solution":"def character_frequency(s: str): Returns the frequency of each English alphabet character in lowercase ignoring case. :param s: The input string :return: List of tuples with each character and its corresponding frequency count sorted in alphabetical order from collections import Counter import string # Normalize the string to lower case s = s.lower() # Create a counter of the characters counter = Counter(c for c in s if c in string.ascii_lowercase) # Generate the result list sorted by alphabet frequency_list = [(char, counter.get(char, 0)) for char in string.ascii_lowercase] return frequency_list"},{"question":"Given a string S, find the longest palindromic substring in S. Input Format The input contains a single string S. Constraints 1 ≤ |S| ≤ 1000 S contains only lowercase English letters. Output Format The longest palindromic substring in S. SAMPLE INPUT babad SAMPLE OUTPUT bab Explanation The input string is \\"babad\\". The longest palindromic substring in the string is either \\"bab\\" or \\"aba\\", depending on which one it finds first. The output can be either, as both are of the same length.","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring in the input string s. n = len(s) if n == 0: return \\"\\" start = 0 max_length = 1 for i in range(1, n): low = i - 1 high = i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 low = i - 1 high = i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Design an algorithm that efficiently sorts an array of non-negative integers into lexicographic order based on their string representation. For example: - Given the array [128, 12, 320, 50], the correct sorting order would be [12, 128, 320, 50] because \'12\' comes before \'128\' lexicographically, and \'320\' comes before \'50\'. - Given the array [123, 45, 28, 501], the correct sorting order would be [123, 28, 45, 501] because \'123\' comes before \'28\' lexicographically, and \'28\' comes before \'45\', and so on. Write a function `lexicographic_sort(nums)` that takes a list `nums` of n (1 ≤ n ≤ 10^5) non-negative integers (0 ≤ nums[i] ≤ 10^9) and returns a list of these integers sorted in lexicographic order based on their string representation. # Input - A list of non-negative integers. # Output - A list of integers sorted in lexicographic order based on their string representation. # Example Input: [128, 12, 320, 50] Output: [12, 128, 320, 50] Input: [123, 45, 28, 501] Output: [123, 28, 45, 501] # Constraints - Time complexity must be O(n log n) - Space complexity must be O(n) Note: You may assume that the input list fits into memory.","solution":"def lexicographic_sort(nums): Sorts the list of non-negative integers in lexicographic order based on their string representation. Parameters: nums (list[int]): List of non-negative integers Returns: list[int]: List of integers sorted in lexicographic order based on their string representation. return sorted(nums, key=str)"},{"question":"You are given an integer array nums and an integer target. Your task is to determine if there are two distinct indices i and j (0 <= i < j < nums.length) such that nums[i] + nums[j] equals the target. If such indices exist, return true. Otherwise, return false. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: true Explanation: nums[0] + nums[1] = 2 + 7 = 9, thus return true Example 2: Input: nums = [3, 2, 4], target = 6 Output: true Explanation: nums[1] + nums[2] = 2 + 4 = 6, thus return true Example 3: Input: nums = [3, 3], target = 6 Output: true Explanation: nums[0] + nums[1] = 3 + 3 = 6, thus return true Example 4: Input: nums = [1, 2, 3, 4], target = 8 Output: false Explanation: No two indices found whose elements sum up to 8, thus return false Your Task: You do not need to read or print anything. Your task is to complete the function twoSumExists() which takes an integer array nums and an integer target as input and returns a boolean value, true if there exist two indices whose sum is equal to target, otherwise false. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: - 2 <= nums.length <= 10^5 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9","solution":"def twoSumExists(nums, target): Returns true if there are two distinct indices i and j in the array such that nums[i] + nums[j] equals the target. :param nums: List[int] - List of integers :param target: int - Target sum :return: bool - True if such indices exist, otherwise False seen = set() for num in nums: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"You are given a directed graph with N nodes and M edges. Your task is to determine the number of different simple paths from node 1 to node N. A simple path is a path that does not contain any repeated nodes. Constraints * 2 leq N leq 1000 * 0 leq M leq 3000 * 1 leq u_i, v_i leq N * The graph may contain self-loops and multiple edges. Input Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 ... u_M v_M Output Print the number of different simple paths from node 1 to node N. Examples Input 4 4 1 2 2 3 3 4 2 4 Output 2 Input 3 3 1 2 2 3 1 3 Output 2 Input 5 5 1 2 2 3 3 4 4 5 1 3 Output 2","solution":"def count_simple_paths(N, M, edges): from collections import defaultdict # Build graph as an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Depth First Search (DFS) to count all simple paths from node 1 to node N def dfs(node, target, visited): if node == target: return 1 if node in visited: return 0 visited.add(node) path_count = 0 for neighbor in graph[node]: path_count += dfs(neighbor, target, visited) visited.remove(node) return path_count return dfs(1, N, set()) def parse_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) edges = [] for i in range(2, len(data), 2): u = int(data[i]) v = int(data[i+1]) edges.append((u, v)) return N, M, edges if __name__ == \\"__main__\\": N, M, edges = parse_input() print(count_simple_paths(N, M, edges))"},{"question":"In this task, you need to implement a function that takes in an integer array and a target integer value and returns a boolean indicating whether there are two distinct elements in the array that sum up to the target value. Write a function `has_pair_with_sum` that takes an array of integers `arr` and an integer `target` as input and returns `True` if there are two distinct elements in `arr` that sum up to `target`, and `False` otherwise. Input Format The input consists of two lines. The first line consists of space-separated integers representing the array, `arr`. The second line consists of a single integer indicating the target value, `target`. Constraints 2 leq |arr| leq 10^4 -10^6 leq arr[i], target leq 10^6 Output Format Return `True` if there exist two distinct elements in the array whose sum equals the target value, otherwise return `False`. Sample Input ``` 1 2 3 9 8 ``` Sample Output ``` False ``` Explanation: No two elements in the array add up to 8. The possible sums are: 1 + 2 = 3 1 + 3 = 4 1 + 9 = 10 2 + 3 = 5 2 + 9 = 11 3 + 9 = 12 None of these sums is equal to 8. Sample Input ``` 1 2 4 4 8 ``` Sample Output ``` True ``` Explanation: There are two distinct elements in the array (4 + 4) which add up to the target value 8.","solution":"def has_pair_with_sum(arr, target): Function to determine if there are two distinct elements in the array that sum up to the target value. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"You are given an array of n positive integers and an integer k. The task is to divide the array into k contiguous subarrays in such a way that the sum of the maximum values from each subarray is minimized. Write a function `minimize_max_sum(arr, k)` that takes a list of integers `arr` and an integer `k`, and returns an integer representing the minimized sum of the maximum values from each subarray. **Input:** - The first line contains a single integer t, the number of test cases. - Each of the following t lines contains: - An integer n, the number of elements in the array. - An integer k, the number of subarrays. - n space-separated integers representing the elements of the array. **Output:** - For each test case, return the minimized sum of the maximum values from the k subarrays. **Constraints:** - 1 ≤ t ≤ 50 - 1 ≤ n ≤ 100 - 1 ≤ k ≤ n - 1 ≤ arr[i] ≤ 10^4 **Sample Input:** 2 5 2 1 3 5 2 8 4 3 4 4 4 4 **Sample Output:** 10 8","solution":"def minimize_max_sum(arr, k): def is_valid(mid): subarray_count = 1 current_sum = 0 for num in arr: if current_sum + num > mid: subarray_count += 1 current_sum = num if subarray_count > k: return False else: current_sum += num return subarray_count <= k left, right = max(arr), sum(arr) result = right while left <= right: mid = (left + right) // 2 if is_valid(mid): result = mid right = mid - 1 else: left = mid + 1 return result def run_minimize_max_sum(test_cases): results = [] for n, k, arr in test_cases: results.append(minimize_max_sum(arr, k)) return results"},{"question":"Write a function that takes a list of integers and returns a new list with each element squared. If the input is not a list, or if any element in the list is not an integer, the function should return \\"Invalid input\\".","solution":"def square_elements(input_list): Return a list with each element squared. If the input is not a list or contains non-integer elements, return \\"Invalid input\\". if not isinstance(input_list, list): return \\"Invalid input\\" try: return [x**2 for x in input_list if isinstance(x, int)] except TypeError: return \\"Invalid input\\""},{"question":"You are playing a game with a sequence of boxes arranged in a line, numbered from 1 to n. Each box contains an integer, and the goal of the game is to maximize the sum of the numbers in the boxes chosen under certain conditions. You are allowed to choose a box and collect the number in it, but you cannot choose two consecutive boxes. You may also choose zero or more boxes as long as the constraint of not choosing consecutive boxes is maintained. Given the sequence of integers, determine the maximum sum that can be obtained by selecting non-consecutive boxes. -----Input----- The first line of the input contains an integer t (1 le t le 10^4) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 le n le 10^5) — the number of boxes. The second line contains n integers a_1, a_2, dots, a_n (-10^4 le a_i le 10^4) representing the numbers in the boxes. The sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print the maximum sum that can be obtained by selecting non-consecutive boxes. -----Example----- Input 3 4 1 2 3 1 3 -1 -2 -3 5 2 7 9 3 1 Output 4 0 12 -----Explanation----- In the first test case, the optimal choice is to pick boxes 1 and 3, resulting in a sum of 1 + 3 = 4. In the second test case, all numbers are negative, so the best choice is to select none of the boxes, yielding a sum of 0. In the third test case, the optimal choice is to pick boxes 2 and 3, resulting in a sum of 7 + 9 = 16.","solution":"def max_sum_non_consecutive_boxes(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] if n == 0: results.append(0) continue if n == 1: results.append(max(0, arr[0])) continue # Dynamic programming approach dp = [0] * n dp[0] = max(0, arr[0]) dp[1] = max(dp[0], arr[1]) for j in range(2, n): dp[j] = max(dp[j-1], dp[j-2] + arr[j]) results.append(dp[-1]) return results"},{"question":"In an online store, customers can apply discount coupons to their purchases. Each coupon specifies a series of product categories it can be applied to, and the discount amount it provides. For each purchase, customers want to apply the maximum possible discount. A store receipt provides the list of product categories for items bought and the available discount coupons. A customer can use multiple coupons on a single purchase as long as their category applies, but only one coupon can apply to each product category. Your task is to determine the maximum total discount a customer can achieve for each purchase. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains an integer n (1 leq n leq 1000) — the number of items in the purchase. The second line of the test case contains n integers c_1, c_2, ldots, c_n (1 leq c_i leq 1000) — representing the categories of each item. The third line of the test case contains an integer m (1 leq m leq 100) — the number of discount coupons. Each of the next m lines contains two integers, k (1 leq k leq 1000) — the category the coupon can be applied to, and d (1 leq d leq 1000) — the discount amount of the coupon. It is guaranteed that the total sum of n over all test cases will not exceed 10000 and total sum of m over all test cases does not exceed 1000. -----Output----- For each test case, output a single line containing the maximum possible discount for the given purchase. -----Examples----- Input 2 4 1 2 1 3 3 1 100 2 50 3 40 3 2 2 2 2 1 10 2 20 Output 290 60 -----Note----- In the first test case, we have 4 items categorized as [1, 2, 1, 3], and three coupons: 100 for category 1, 50 for category 2, and 40 for category 3. By using the highest value coupon available for each product category, the maximum discount is 100 + 50 (for the first and second items), 100 (for the third item) and 40 (for the fourth item) totaling to 290. In the second test case, all items are of category 2 and there is only one coupon that can be applied to them, which gives a 20 discount per item. Thus, the total possible discount is 20 * 3 = 60.","solution":"def max_discount(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] categories = test_cases[i][1] m = test_cases[i][2] coupons = test_cases[i][3] category_discounts = {} for coupon in coupons: category, discount = coupon if category in category_discounts: category_discounts[category] = max(category_discounts[category], discount) else: category_discounts[category] = discount total_discount = 0 for category in categories: if category in category_discounts: total_discount += category_discounts[category] results.append(total_discount) return results"},{"question":"Given a string `s`, write a function named `findSmallestWindow` that returns the length of the smallest contiguous substring that contains all the unique characters of the given string `s`. The function should compute the smallest window in `s` which will contain all the characters present in `s` with at least one occurrence. Example: `input`: \\"aabcbcdbca\\" `output`: 4 Explanation: The smallest substring that contains all unique characters of the given string is \\"bcdb\\". `input`: \\"aaaa\\" `output`: 1 Explanation: The smallest substring that contains all unique characters of the given string is \\"a\\".","solution":"def findSmallestWindow(s): from collections import Counter # Get the number of unique characters in the given string unique_chars = set(s) num_unique_chars = len(unique_chars) # Edge case when the string is empty or has no unique characters if num_unique_chars == 0: return 0 # Initialize the minimum length of the window min_len = len(s) + 1 start = 0 char_count = Counter() for end in range(len(s)): char_count[s[end]] += 1 # If the window contains all unique characters while len(char_count) == num_unique_chars: min_len = min(min_len, end - start + 1) char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 return min_len"},{"question":"Given a binary tree, determine if it is height-balanced. A height-balanced binary tree is defined as a binary tree in which the left and right subtrees of every node differ in height by no more than 1. INPUT: - The input is the root node of a binary tree. OUTPUT: - Return a boolean value: `true` if the binary tree is height-balanced, otherwise `false`. Example: ``` Input: root = [3,9,20,null,null,15,7] Output: true Input: root = [1,2,2,3,3,null,null,4,4] Output: false ``` Note: - You can assume that the binary tree will have at most 1000 nodes. - Each node has a value and 0 to 2 child nodes.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isBalanced(root): Determines if a binary tree is height-balanced. Args: root (TreeNode): The root node of the binary tree. Returns: bool: True if the binary tree is height-balanced, otherwise False. def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) balanced = (left_balanced and right_balanced and abs(left_height - right_height) <= 1) height = max(left_height, right_height) + 1 return height, balanced _, balanced = check_height(root) return balanced"},{"question":"# Merge Overlapping Intervals Given a collection of intervals, merge all overlapping intervals and return an array of the merged intervals. Each interval is represented as a pair of integers, [start, end], where start <= end. Instructions Write a function `mergeIntervals` that takes a list of intervals and returns a list of merged intervals. The merged intervals should be returned in ascending order based on their start value. Examples ``` Input: intervals = [[1, 3], [2, 6], [8, 10], [15, 18]] Output: [[1, 6], [8, 10], [15, 18]] Explanation: Intervals [1, 3] and [2, 6] overlap, so they are merged into [1, 6]. Input: intervals = [[1, 4], [4, 5]] Output: [[1, 5]] Explanation: Intervals [1, 4] and [4, 5] overlap, so they are merged into [1, 5]. ``` Constraints - The input list of intervals is sorted in ascending order. - Each interval is represented as a pair of integers [start, end]. - The intervals can be of varying lengths. - The list of intervals will have at least one interval. - The function should handle non-overlapping intervals correctly. Notes - If there is only one interval in the input list, the function should return the same interval. - Ensure that the merged intervals are returned in ascending order of their start value.","solution":"def mergeIntervals(intervals): Merges all overlapping intervals and returns an array of the merged intervals. The merged intervals are returned in ascending order based on their start value. # Sort intervals based on the start value intervals.sort(key=lambda x: x[0]) merged_intervals = [] for interval in intervals: if not merged_intervals or merged_intervals[-1][1] < interval[0]: # If there is no overlap, append the interval merged_intervals.append(interval) else: # Otherwise, there is an overlap, so merge the current and previous intervals merged_intervals[-1][1] = max(merged_intervals[-1][1], interval[1]) return merged_intervals"},{"question":"You are given a tree with n nodes that is rooted at node 1. Each node i has a value a_i associated with it. Your task is to process a series of queries on this tree: each query either updates the value of a node or asks for the sum of values in the subtree of a node. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of nodes and the number of queries. The second line contains n integers a_1, a_2, ..., a_n, where a_i is the initial value of node i. Each of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), meaning that there is an edge between nodes u and v. Each of the next q lines contains a query. A query is one of two types: - \\"1 x v\\": Update the value of node x to v. - \\"2 x\\": Output the sum of values in the subtree with root x. Output For each type 2 query, output the result on a new line. Example Input 5 5 1 2 3 4 5 1 2 1 3 2 4 2 5 2 1 1 3 10 2 1 2 3 Output 15 22 10 Explanation In the first query, we ask for the sum of values in the subtree rooted at node 1. The sum of all nodes (1 + 2 + 3 + 4 + 5) is 15. In the second query, we update the value of node 3 to 10. The updated tree now has values [1, 2, 10, 4, 5]. In the third query, we ask for the sum of values in the subtree rooted at node 1, which is now 22 (1 + 2 + 10 + 4 + 5). In the fourth query, we ask for the sum of values in the subtree rooted at node 3, which is just the value of node 3 itself: 10.","solution":"from collections import defaultdict class Tree: def __init__(self, n, values): self.n = n self.values = values self.tree = defaultdict(list) self.subtree_sum = [0] * (n + 1) self.visited = [False] * (n + 1) def add_edge(self, u, v): self.tree[u].append(v) self.tree[v].append(u) def dfs(self, node): self.visited[node] = True total = self.values[node-1] for neighbor in self.tree[node]: if not self.visited[neighbor]: total += self.dfs(neighbor) self.subtree_sum[node] = total return total def process_queries(self, queries): answers = [] self.dfs(1) # Assume the tree is rooted at node 1 for query in queries: parts = query.split() if parts[0] == \'1\': x = int(parts[1]) v = int(parts[2]) diff = v - self.values[x-1] self.values[x-1] = v self.update_subtree_sum(x, diff) elif parts[0] == \'2\': x = int(parts[1]) answers.append(self.subtree_sum[x]) return answers def update_subtree_sum(self, node, diff): self.visited = [False] * (self.n + 1) self.update_dfs(node, diff) def update_dfs(self, node, diff): self.visited[node] = True self.subtree_sum[node] += diff for neighbor in self.tree[node]: if not self.visited[neighbor]: self.update_dfs(neighbor, diff)"},{"question":"You are given a sequence of integers a_1, a_2, ..., a_n. You are allowed to perform the following operation any number of times: Choose an index i (2 le i le n). Swap a_i with a_{i-1}. What is the minimum possible value of the sum of differences |a_1 - a_2| + |a_2 - a_3| + ... + |a_{n-1} - a_n| that you can achieve after performing the described operations any number of times? -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The first line of each test case contains the single integer n (2 le n le 100) — the length of sequence. The second line contains the sequence of integers a_1, a_2, ..., a_n (1 le a_i le 10^9). -----Output----- For each test case, print the minimum possible sum of differences you can achieve. -----Example----- Input 2 4 3 1 4 1 5 1 5 2 9 5 Output 0 8 -----Note----- In the first test case, by the series of swapping, we can make the sequence all identical, such as [1, 1, 1, 1]. Therefore, the minimum sum of differences is |1-1| + |1-1| + |1-1| = 0. In the second test case, no swapping is needed and already the minimum sum of differences is achieved.","solution":"def min_sum_of_differences(t, test_cases): Computes the minimum possible sum of differences |a1-a2| + |a2-a3| + ... + |an-1-an| for the given test cases. Parameters: t (int): The number of test cases. test_cases (list of tuples): Each tuple contains (n, list of n integers). Returns: list: A list of integers representing the minimum sum of differences for each test case. results = [] for test in test_cases: n, a = test min_val = min(a) # Find the minimum value in the array min_sum_diff = 0 # When all the values are minimum value, the sum of differences is 0 results.append(min_sum_diff) return results # Example usage: # t = 2 # test_cases = [(4, [3, 1, 4, 1]), (5, [1, 5, 2, 9, 5])] # print(min_sum_of_differences(t, test_cases)) # Output: [0, 0]"},{"question":"You are required to design a seating arrangement for a wedding. You have a list of guests and a set of rules that specify which pairs of guests should not sit next to each other. The goal is to verify if it\'s possible to arrange the seats around a circular table such that no two guests who dislike each other are seated next to each other. Rules of the seating arrangement: 1. Each guest must have a unique assigned seat. 2. The table is circular, so the first and last guests in the seating arrangement are considered adjacent. 3. The rules about seating specify pairs of guests that should not sit next to each other. Your task is to write a program that reads the list of guests and the seating rules and determines if a valid seating arrangement exists. Input The input begins with an integer n (2 ≤ n ≤ 10), the number of guests, followed by a list of n unique guest names. Each guest name is a string of up to 20 characters. The following line contains an integer m (0 ≤ m ≤ n * (n - 1) / 2), the number of seating rules. Each of the next m lines contains a pair of guest names separated by a space, representing guests who should not sit next to each other. Output If it\'s possible to arrange the guests around the table according to the rules, print \\"YES\\". Otherwise, print \\"NO\\". Example Input 4 Alice Bob Carol David 2 Alice Carol Bob David Output YES Input 3 Alice Bob Carol 3 Alice Bob Bob Carol Carol Alice Output NO","solution":"from itertools import permutations def can_seat_guests(num_guests, guests, num_rules, rules): def are_neighbours_valid(arrangement): n = len(arrangement) for i in range(n): if (arrangement[i], arrangement[(i+1) % n]) in invalid_pairs or (arrangement[(i+1) % n], arrangement[i]) in invalid_pairs: return False return True invalid_pairs = set(map(lambda x: tuple(x.split()), rules)) for arrangement in permutations(guests): if are_neighbours_valid(arrangement): return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of integers. Your task is to find the shortest subarray (contiguous elements) that, when removed, results in a sorted (non-decreasing) array. -----Input----- The single line of input contains space-separated integers representing the array (1 leq length of array leq 10^5, -10^9 leq array elements leq 10^9). -----Output----- Output two integers, which are the starting and ending indices of the shortest subarray to be removed (0-indexed). If the array is already sorted, output two identical indices indicating no subarray needs to be removed. -----Examples----- Sample Input: 1 3 5 2 6 8 Sample Output: 2 3","solution":"def shortest_subarray_to_remove(arr): n = len(arr) start, end = 0, n - 1 # Find the first element out of order from the start while start < n - 1 and arr[start] <= arr[start + 1]: start += 1 if start == n - 1: return (start, start) # Already sorted # Find the first element out of order from the end while end > 0 and arr[end] >= arr[end - 1]: end -= 1 # Initial indices to remove min_remove = (0, end) if arr[end] >= arr[start] else (start, n - 1) # Check if any shorter removal would work from the start index j = end + 1 for i in range(start + 1): while j < n and arr[j] < arr[i]: j += 1 if j < n: if j - i - 1 < min_remove[1] - min_remove[0]: min_remove = (i + 1, j - 1) return min_remove"},{"question":"Given a list of n integers, your task is to find and print a pair of indices (i, j) such that i < j and the sum of the elements at these indices is maximum. The sum of the elements at these indices should also be unique. ------ Input ------ - The first line contains a single integer n (the length of the list). - The second line contains n integers, the elements of the list. ------ Output ------ - Print two integers i and j, representing the indices (1-based) such that the sum of the elements at these indices is maximum and unique. - If there are no such indices, output -1. ------ Constraints ------ - 2 ≤ n ≤ 10^5 - Each integer in the list is in the range [-10^9, 10^9] ------ Sample Input ------ 6 1 2 3 4 5 6 ------ Sample Output ------ 5 6 ------ Explanation ------ Out of all the (i, j) pairs where i < j, the pair (5, 6) yields the maximum sum 5 + 6 = 11, which is unique.","solution":"def find_maximum_unique_sum_indices(n, elements): Find and print a pair of indices (i, j) such that i < j and the sum of the elements at these indices is maximum and unique. If no such indices exist, return -1. if n < 2: return -1 max_sum = None indices = (-1, -1) seen_sums = set() for i in range(n): for j in range(i + 1, n): current_sum = elements[i] + elements[j] if current_sum not in seen_sums: if max_sum is None or current_sum > max_sum: max_sum = current_sum indices = (i + 1, j + 1) # +1 for 1-based indexing seen_sums.add(current_sum) if indices == (-1, -1): return -1 return indices"},{"question":"Reverse Words in a String You are tasked with developing a function to reverse the order of words in a given string. A word is defined as a sequence of non-space characters. The words will be separated by a single space, and there will be no leading or trailing spaces in the input string. The function should reverse the order of the words while preserving the original words\' order and spacing. The input string will contain only uppercase letters and spaces. If the input string is empty or consists of only spaces, return an empty string. Input A single line of input containing the string with words separated by single spaces. The input string will contain only uppercase letters and spaces. Output A single line of output containing the words in reverse order, separated by a single space. Example Input: HELLO WORLD Output: WORLD HELLO Input: THE QUICK BROWN FOX Output: FOX BROWN QUICK THE","solution":"def reverse_words(s): Reverses the order of words in the input string while keeping the words\' order. Args: s (str): A string containing words separated by single spaces. Returns: str: A string with the order of words reversed. # Split the string into words words = s.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words into a single string return \' \'.join(reversed_words)"},{"question":"Problem description An amusement park offers discounted tickets for families. A family ticket package covers entrance for up to four people for the price of three individual tickets. However, the individual prices of tickets for family members can vary. The park will always charge for the three most expensive tickets and the cheapest ticket is free as part of the family package. Given the prices for each family member, determine the minimum total cost a family has to pay to enter the park. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines. The first line contains an integer N denoting the number of family members. The second line contains N space-separated integers indicating the ticket prices for each family member. Output For each test case, output a single line containing the minimum total cost the family has to pay. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 1 ≤ Ticket prices ≤ 1000 Example Input: 3 4 5 3 7 4 3 8 6 5 5 1 2 3 4 5 Output: 16 19 12 Explanation Example case 1: The family has four members. For these four members, they can avail the family package, paying for the three most expensive tickets (7, 5, and 4) and getting the cheapest one (3) for free. Total cost: 7 + 5 + 4 = 16 Example case 2: The family has three members, and they must pay for all because the family package covers up to four members. Total cost: 8 + 6 + 5 = 19 Example case 3: The family has five members; hence they can use one family package and pay for the three most expensive tickets out of the first four (5, 4, 3) and get one ticket (2) for free. Then they pay for the remaining ticket (1). Total cost: 5 + 4 + 3 + 1 = 12","solution":"def calculate_minimum_total_cost(test_cases): Calculate the minimum total cost for a family to enter the amusement park for each test case. Parameters: test_cases (list of tuples): Each tuple contains an integer N and a list of N integers representing ticket prices. Returns: list of integers: A list representing the minimum cost for each test case. result = [] for (N, prices) in test_cases: prices.sort(reverse=True) total_cost = sum(prices[:3]) if N <= 4 else sum(prices[:(N-1)%4+3]) result.append(total_cost + sum(prices[((N-1)//4)*4+3:])) if N > 4 else result.append(total_cost) return result"},{"question":"Given an integer N, find the largest prime number less than or equal to N. If no prime number is found less than or equal to N, return -1. Example 1: Input: N = 10 Output: 7 Explanation: The prime numbers less than or equal to 10 are 2, 3, 5, and 7. The largest is 7. Example 2: Input: N = 2 Output: 2 Explanation: 2 is the smallest prime number and is equal to N. Example 3: Input: N = 1 Output: -1 Explanation: There are no prime numbers less than or equal to 1. Your Task: You don\'t need to read or print anything. Your task is to complete the function LargestPrime() which takes an integer N as input and returns the largest prime number less than or equal to N. If no such number exists, return -1. Expected Time Complexity: O(N log log N) Expected Space Complexity: O(N) Constraints: 1 <= N <= 100","solution":"def LargestPrime(N): if N < 2: return -1 # Create a boolean array \\"prime[0..N]\\" and initialize all entries it as true. # A value in prime[i] will finally be false if i is Not a prime, else true. prime = [True for _ in range(N + 1)] p = 2 while (p * p <= N): # If prime[p] is not changed, then it is a prime if (prime[p] == True): # Updating all multiples of p to not a prime for i in range(p * p, N + 1, p): prime[i] = False p += 1 # Return the largest prime number less than or equal to N for p in range(N, 1, -1): if prime[p]: return p return -1"},{"question":"Sara has a bookshelf with N books arranged in a row. She loves reading comics, and each book i has an entertainment value E_{i}. Sara can pick any subarray of the bookshelf to read, but she wants to maximize her reading experience. However, there\'s a constraint: Sara feels overwhelmed if any two books in her subarray have the same entertainment value. Your task is to help Sara find the maximum possible sum of the entertainment values of a subarray that contains no duplicate values. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers E_{1}, E_{2}, ldots, E_{N}. ------ Output ------ For each test case, print a single line containing one integer ― the maximum sum of entertainment values of a suitable subarray. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 2*10^{5} 1 ≤ E_{i} ≤ 10^{9} for each valid i ------ Subtasks ------ Subtask #1 (40 points): 1 ≤ N ≤ 100 Subtask #2 (60 points): original constraints ------ Sample Input 1 ------ 2 5 3 4 5 3 7 6 1 2 3 4 5 6 ------ Sample Output 1 ------ 19 21 ------ Explanation 1 ------ Example case 1: One possible subarray with no duplicate values is [4, 5, 3, 7], which has a sum of 19. Example case 2: The whole array [1, 2, 3, 4, 5, 6] is already without duplicates, and its sum is 21.","solution":"def max_unique_sum_subarray(T, test_cases): results = [] for test_case in test_cases: N, E = test_case left = 0 current_sum = 0 max_sum = 0 seen = set() for right in range(N): while E[right] in seen: seen.remove(E[left]) current_sum -= E[left] left += 1 seen.add(E[right]) current_sum += E[right] max_sum = max(max_sum, current_sum) results.append(max_sum) return results # Example Usage: # T = 2 # test_cases = [ # (5, [3, 4, 5, 3, 7]), # (6, [1, 2, 3, 4, 5, 6]) # ] # print(max_unique_sum_subarray(T, test_cases))"},{"question":"A company uses a special encryption system to communicate the daily stand-in meetings digital room codes. To ensure the codes are not so easy to decipher, they devise a method of encoding where each character of the string is changed to a number representation. The string consists of uppercase English letters only. The method of encoding is as follows: - Each letter is mapped to a number based on its alphabetical position: \'A\' -> 1, \'B\' -> 2, ..., \'Z\' -> 26. - The code is generated by taking each character in the initial string and generating its corresponding number, then summing these numbers to get the final code. Your task is to write a function that takes the encoded representation of the room code and returns the deciphered string. You are also asked to take into account the possibility of spaces in the given string and maintain them in the output string for readability. Input: - A single line of input consisting of uppercase English letters and spaces. Output: - The decoded room code where each letter has been replaced with its corresponding number, and spaces are preserved. Constraints: - The length of the input string will not exceed 100 characters. Sample Input HELLO WORLD Sample Output 8 5 12 12 15 23 15 18 12 4 Example: Input MEETING ROOM Output 13 5 5 20 9 14 7 18 15 15 13","solution":"def encode_room_code(s: str) -> str: Encode the room code by converting each character to its corresponding alphabetical position. Preserves spaces in the input string. Parameters: s (str): Input string consisting of uppercase English letters and spaces. Returns: str: Encoded room code with each letter replaced by its corresponding number and spaces preserved. encoded_characters = [] for char in s: if char == \' \': encoded_characters.append(\'\') else: encoded_characters.append(str(ord(char) - ord(\'A\') + 1)) return \' \'.join(encoded_characters)"},{"question":"--- A **pyramidal number** is a figurate number that represents pyramid shapes with a polygonal base and triangular sides. In a three-dimensional space, a **square pyramidal number** represents the number of stacked spheres in a pyramid with a square base. The formula to calculate the ( n^{th} ) square pyramidal number is given by: [ P(n) = frac{n(n+1)(2n+1)}{6} ] Task Complete the function that takes a range `[a..b]` (both limits included) and returns the **square pyramidal numbers** within the range (`a ≤ square pyramidal number ≤ b`). The tests go up to the 10000th square pyramidal number. Examples ``` (1, 30) ==> [1, 5, 14, 30] (50, 500) ==> [55, 91, 140, 204, 285, 385] ``` Happy coding!","solution":"def square_pyramidal_numbers_in_range(a, b): def pyramidal_number(n): return (n * (n + 1) * (2 * n + 1)) // 6 result = [] n = 1 while True: pn = pyramidal_number(n) if pn > b: break if pn >= a: result.append(pn) n += 1 return result"},{"question":"# Kata Task Remove every k-th node from a linked list! # Notes * A list is represented by nodes and pointers * Nodes contain integer data * The size of the list is between 2 and 1000 (inclusive) * k is always a positive integer # Examples Input: head -> [3] -> [2] -> [1] -> [7] -> [8] -> [5] k = 2 Expected Output: head -> [3] -> [1] -> [8] Input: head -> [1] -> [2] -> [5] -> [6] -> [7] -> [8] k = 3 Expected Output: head -> [1] -> [2] -> [6] -> [7]","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def remove_kth_node(head, k): Removes every k-th node from the linked list. :param head: ListNode, the head of the linked list :param k: int, the position of the node to be removed :return: ListNode, the head of the modified linked list if k <= 1: return None # If k is 1 or less, all nodes are removed, return None # Dummy node to handle edge cases more easily dummy = ListNode(0) dummy.next = head current = dummy index = 0 while current: index += 1 if index % k == 0 and current.next: current.next = current.next.next else: current = current.next return dummy.next"},{"question":"Alex is developing a new encryption algorithm and needs to test its functionality by ensuring that the order of characters in a message can be rearranged to form specific patterns. To verify the feasibility, Alex decided to create a program. Given a string ( s ), and a target string ( t ), determine if it is possible to rearrange the characters of ( s ) to form ( t ). If it is possible, return \\"YES\\", otherwise return \\"NO\\". You are not allowed to use any additional string or data structure to do this. Constraints - ( 1 leq text{length of } s, t leq 50 ) - ( s ) and ( t ) consist of lowercase English letters. Input Input is given from Standard Input in the following format: ```plaintext s t ``` Output Print \\"YES\\" if it is possible to rearrange the characters of ( s ) to form ( t ). Otherwise, print \\"NO\\". Examples Input ```plaintext listen silent ``` Output ```plaintext YES ``` Input ```plaintext triangle integral ``` Output ```plaintext YES ``` Input ```plaintext apple pale ``` Output ```plaintext NO ```","solution":"def can_rearrange_to_form(s, t): Determines if the characters of string s can be rearranged to form string t. Returns \\"YES\\" if it is possible, otherwise returns \\"NO\\". if len(s) != len(t): return \\"NO\\" return \\"YES\\" if sorted(s) == sorted(t) else \\"NO\\""},{"question":"Chef Omlet has a peculiar way of choosing his favorite dishes for breakfast. Each day, he starts with a list of integers, where each integer represents a type of dish and its associated value. Chef Omlet loves sequences, and he tries to find the longest contiguous subsequence of dishes such that the sum of any one or more dishes within that subsequence does not exceed a given value, K. Your task is to help Chef Omlet determine the length of the longest contiguous subsequence for each list that satisfies his condition. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and K, where N is the number of dishes and K is the maximum sum allowed for any subsequence. The second line of each test case contains N space-separated integers d_{1}, d_{2}, ldots, d_{N} representing the values of the dishes. ------ Output ------ For each test case, print a single line containing one integer — the length of the longest contiguous subsequence whose sums do not exceed K. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ d_{i} ≤ 100 for each valid i 1 ≤ K ≤ 10,000 ----- Sample Input 1 ------ 1 5 9 2 1 3 4 5 ----- Sample Output 1 ------ 3 ----- explanation 1 ------ Example case 1: The longest contiguous subsequence that does not exceed the sum 9 is (2, 1, 3, 4) with sum 10. This is not valid since it exceeds 9. For K=9, the longest valid sequence is (1, 3, 4) with sum 8 and length 3.","solution":"def longest_subsequence_with_max_sum(T, test_cases): results = [] for case in test_cases: N, K, dishes = case max_length = 0 for start in range(N): current_sum = 0 for end in range(start, N): current_sum += dishes[end] if current_sum > K: break max_length = max(max_length, end - start + 1) results.append(max_length) return results"},{"question":"Sarah is a vaccine researcher and she is working on a new kind of vaccine. To streamline her research, she keeps track of several metrics related to vaccine tests over time. However, she faces the challenge of comparing various ranges of these metrics efficiently. She needs a program that can help her with this task. Given an array of N integers representing the metrics measurements and M queries, perform the following operations: 1 i j: Update the element at index i to value j. 2 L R: Output the sum of the elements from index L to index R inclusive. Input - The first line will contain an integer N. - The second line will contain N integers representing the metrics. - The third line will contain an integer M. - The next M lines will contain a query of either type 1 or type 2. Output For each query of type 2, output the sum of the specified range. Constraints 1 ≤ N ≤ 10^5 1 ≤ Metrics values ≤ 1000 1 ≤ M ≤ 10^5 1 ≤ L ≤ R ≤ N 1 ≤ i ≤ N 1 ≤ j ≤ 1000 SAMPLE INPUT 5 5 3 8 6 2 4 2 1 3 1 2 10 2 2 4 2 1 5 SAMPLE OUTPUT 16 24 31 Explanation In the sample case, there are 4 queries. 1. The first query is of type 2, which requires the sum of elements from index 1 to 3: 5 + 3 + 8 = 16. 2. The second query is of type 1, updating the element at index 2 to 10, so the array becomes [5, 10, 8, 6, 2]. 3. The third query is of type 2, requiring the sum of elements from index 2 to 4: 10 + 8 + 6 = 24. 4. The fourth query is of type 2, requiring the sum of elements from index 1 to 5: 5 + 10 + 8 + 6 + 2 = 31.","solution":"class VaccineMetrics: def __init__(self, metrics): self.metrics = metrics def update(self, i, j): Updates the element at index i (1-based index) to value j. self.metrics[i-1] = j def sum_range(self, L, R): Returns the sum of elements from index L to index R inclusive (1-based indexes). return sum(self.metrics[L-1:R]) def process_queries(N, metrics, M, queries): vaccine_metrics = VaccineMetrics(metrics) results = [] for query in queries: if query[0] == 1: _, i, j = query vaccine_metrics.update(i, j) elif query[0] == 2: _, L, R = query result = vaccine_metrics.sum_range(L, R) results.append(result) return results"},{"question":"You are given a string containing lowercase letters and a list of word dictionaries. You need to determine the minimum number of characters that need to be added to or deleted from the given string to make it possible to form a word from any one of the dictionaries. Each word dictionary is represented as a list of words. # Constraints - The string will have a length between 1 and 1000 inclusive. - Each word dictionary will contain between 1 and 100 words inclusive. - Each word in the dictionaries will have a length between 1 and 100 inclusive. # Example Input: ``` string = \\"hello\\" dictionaries = [[\\"world\\", \\"hello\\"], [\\"hi\\", \\"hell\\"], [\\"heliox\\"]] ``` Output: ``` 0 ``` Explanation: The string \\"hello\\" already exists in the first dictionary, so no alterations are needed. Input: ``` string = \\"apple\\" dictionaries = [[\\"apples\\", \\"appple\\"], [\\"aapple\\"], [\\"bpple\\"]] ``` Output: ``` 1 ``` Explanation: By adding one \'s\' to \\"apple\\", it becomes \\"apples\\" which matches a word in the first dictionary. Input: ``` string = \\"balloon\\" dictionaries = [[\\"ballo\\", \\"loon\\"], [\\"balloonn\\"], [\\"ballons\\", \\"balloon\\"]] ``` Output: ``` 0 ``` Explanation: The string \\"balloon\\" already exists in the third dictionary, so no alterations are needed. The goal is to implement a function that takes in the given string and list of dictionaries and returns the minimum number of character modifications (additions or deletions) required to transform the string into a word present in any of the dictionaries.","solution":"def min_operations_to_match_word(string, dictionaries): def get_char_count(word): char_count = {} for char in word: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count def calculate_operations(source, target): operations = 0 for char in set(source.keys()).union(set(target.keys())): operations += abs(source.get(char, 0) - target.get(char, 0)) return operations string_char_count = get_char_count(string) min_operations = float(\'inf\') for dictionary in dictionaries: for word in dictionary: word_char_count = get_char_count(word) operations = calculate_operations(string_char_count, word_char_count) min_operations = min(min_operations, operations) return min_operations"},{"question":"Robots are building a road made of n segments. Each segment has a difficulty level d_i. They have a special tool that can modify the difficulty levels by performing the following three-step operation: 1. Select two indices i < j such that the difficulty levels d_i, d_{i+1}, ..., d_{j-1} are all strictly greater than 0. 2. Set d_i to d_i-1. 3. Set d_j to d_j+1. Their goal is to make d_1 = d_2 = ... = d_{n-1} = 0 such that only the last segment remains with all difficulty levels. Determine the minimum number of operations required to achieve their goal. -----Input----- The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. The first line of each test case contains a single integer n (2 leq n leq 2 cdot 10^5) — the number of segments. The second line of each test case contains n integers d_1, d_2, ..., d_n (0 leq d_i leq 10^9) — the difficulty level of each segment. It is guaranteed that the sum of n across all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print a line containing a single integer — the minimum number of operations. It can be proven that there is a sequence of operations that meets the goal. -----Examples----- Input 4 3 2 0 0 5 0 2 0 2 0 6 2 0 3 0 4 6 4 0 0 0 10 Output 3 5 11 0 -----Note----- In the first case, one possible sequence of operations is as follows. Choose i=1 and j=2, yielding the array [1,1,0]. Choose i=1 and j=3, yielding the array [0,1,1]. Choose i=2 and j=3, yielding the array [0,0,2]. At this point, d_1=d_2=0, completing the process. In the second case, one possible sequence of operations is as follows. Choose i=4 and j=5, yielding the array [0,2,0,1,1]. Choose i=2 and j=3, yielding the array [0,1,1,1,1]. Choose i=2 and j=5, yielding the array [0,0,1,1,2]. Choose i=3 and j=5, yielding the array [0,0,0,1,3]. Choose i=4 and j=5, yielding the array [0,0,0,0,4]. In the last case, the array already satisfies the condition.","solution":"def min_operations_to_balance_road(t, test_cases): Returns the minimum number of operations required to balance each test case. results = [] for i in range(t): n, d = test_cases[i] results.append(sum(d[:-1])) return results"},{"question":"Geek loves sorting algorithms. He recently came across a unique sorting challenge. He needs to sort a given array of integers in a special manner: all elements that are divisible by a given number K should appear at the start of the array, and the remaining elements should follow. Both groups of elements though should maintain their relative order from the original array. Can you help Geek with this challenge? You need to implement a function `specialSort(arr[], N, K)` that takes an array of integers arr[] of size N and an integer K, and sorts the array in the special manner described above. Example 1: Input: N = 6 arr[] = {5, 2, 3, 4, 1, 6} K = 2 Output: 2 4 6 5 3 1 Explanation: After sorting, all elements divisible by 2 (i.e., {2, 4, 6}) come first maintaining their relative order, followed by the rest of the elements {5, 3, 1} maintaining their relative order. Example 2: Input: N = 5 arr[] = {1, 3, 2, 4, 5} K = 3 Output: 3 1 2 4 5 Explanation: After sorting, all elements divisible by 3 (i.e., {3}) come first maintaining their relative order, followed by the rest of the elements {1, 2, 4, 5} maintaining their relative order. Your Task: You don\'t need to read input or print anything. Just complete the function `specialSort()` that takes the array arr[], its size N, and the integer K as input parameters and modifies the array inline reflecting the new arrangement. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^9 1 ≤ K ≤ 10^9","solution":"def specialSort(arr, N, K): Modifies arr[] in place such that all elements divisible by K appear at the start and the remaining elements follow, all while maintaining the relative order of the elements. divisible = [x for x in arr if x % K == 0] non_divisible = [x for x in arr if x % K != 0] # Combine both lists arr[:] = divisible + non_divisible"},{"question":"You are tasked with writing a function that simulates a simple text editor\'s find-and-replace feature. This function should replace all occurrences of a given word within a text with another word. # Exercise Create a function `findAndReplace` that takes three parameters: a string `text`, a string `targetWord`, and a string `replacementWord`. The function should return a new string with all instances of `targetWord` in `text` replaced by `replacementWord`. # Example If the input parameters are: - `text`: \\"The quick brown fox jumps over the lazy dog\\" - `targetWord`: \\"fox\\" - `replacementWord`: \\"cat\\" The function should return: \\"The quick brown cat jumps over the lazy dog\\" # Rules 1. Do not use any built-in methods that directly perform find-and-replace operations. 2. The match should be case-sensitive, i.e., it should differentiate between \'fox\' and \'Fox\'. 3. Only whole word matches should be replaced. For instance, if `targetWord` is \\"cat\\", it should not replace the \\"cat\\" in \\"catalogue\\". # Additional Note You can assume all input strings only contain alphabetic characters and spaces, and that there will be at least one occurrence of the `targetWord` in the `text`.","solution":"def findAndReplace(text, targetWord, replacementWord): Replaces all occurrences of targetWord in text with replacementWord. Args: text (str): The input text to perform the replacement on. targetWord (str): The word to find in the text. replacementWord (str): The word to replace the targetWord. Returns: str: The new text with all instances of targetWord replaced by replacementWord. words = text.split() new_words = [(replacementWord if word == targetWord else word) for word in words] return \' \'.join(new_words)"},{"question":"Given an array of integers, your task is to determine whether the array is \\"interesting\\" or \\"boring\\". An array is considered interesting if it satisfies the following conditions: 1. The array contains at least one element. 2. All elements in the array are distinct. 3. The sum of the elements in the array is equal to the product of the elements in the array. If the array is interesting, print \\"Interesting\\". Otherwise, print \\"Boring\\". -----Input----- The first line contains an integer T denoting the number of test cases. Each of the next T lines contains a single test case which starts with an integer N denoting the number of elements in the array, followed by N distinct integers. -----Output----- For every test case, print in a single line Interesting or Boring. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1,000 - Each element in the array is an integer between -100 and 100 inclusive. -----Example----- Input: 3 3 1 2 3 4 2 2 2 2 2 3 3 Output: Boring Boring Boring -----Explanation----- Example case 1: The sum of the array [1, 2, 3] is 1 + 2 + 3 = 6 and the product is 1 * 2 * 3 = 6. Since they are equal, but there are repeated elements in original array. Example case 2: All elements are the same in array [2, 2, 2, 2], making the numbers not distinct. Example case 3: Both elements in array [3, 3] are the same, so the array is not distinct, hence boring.","solution":"def is_interesting(arr): Determines if the array is interesting or boring. Parameters: arr (list): The list of integers. Returns: str: \\"Interesting\\" if the array is interesting, otherwise \\"Boring\\". if len(arr) < 1: return \\"Boring\\" if len(arr) != len(set(arr)): return \\"Boring\\" array_sum = sum(arr) array_product = 1 for num in arr: array_product *= num if array_sum == array_product: return \\"Interesting\\" return \\"Boring\\" def process_test_cases(T, test_cases): Processes multiple test cases and returns the results. Parameters: T (int) : Number of test cases test_cases (list): List of tuples. Each tuple contains a list of integers. Returns: list of str: Results for each test case in the order they were received. results = [] for arr in test_cases: results.append(is_interesting(arr)) return results"},{"question":"You need to write a program that rotates a 2D matrix 90 degrees clockwise. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100), where n is the number of rows and m is the number of columns of the matrix. The following n lines contain m space-separated integers, representing the rows of the matrix. Output The output should be the rotated matrix in the same format as the input. Constraints 1 ≤ n, m ≤ 100 SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 7 4 1 8 5 2 9 6 3 Explanation The original matrix is: 1 2 3 4 5 6 7 8 9 Rotating this matrix 90 degrees clockwise results in: 7 4 1 8 5 2 9 6 3","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a given 2D matrix 90 degrees clockwise. :param matrix: List of lists where each sublist represents a row in the matrix. :return: Rotated matrix as a list of lists. # Transpose the matrix transposed_matrix = list(zip(*matrix)) # Reverse each row of the transposed matrix to get the desired result rotated_matrix = [list(row[::-1]) for row in transposed_matrix] return rotated_matrix def read_matrix_input(n, m, matrix_data): Reads the matrix input and converts it into a list of lists. :param n: Number of rows. :param m: Number of columns. :param matrix_data: List of matrix rows (each row is a string of space-separated integers). :return: Matrix as a list of lists. matrix = [] for row in matrix_data: matrix.append(list(map(int, row.split()))) return matrix"},{"question":"In a distant land, there lived a renowned blacksmith named Barok, famous for his skill in creating swords. One day, the King\'s army placed an order for n swords, each with a unique number of jewels embedded in their hilt. After receiving the order, Barok realized that each sword needed to go through a unique sequence of processes in his workshop. The workshop is divided into three sections: quenching (Section 1), polishing (Section 2), and sharpening (Section 3). Each section can handle only one sword at a time, and each sword must be processed in the exact order from Section 1 to Section 2 to Section 3. Additionally, once a sword starts the next process, it cannot return to a previous one. Given a list of jewels_count where jewels_count[i] represents the number of jewels in the i-th sword, Barok wants to create a minimum plan to process all swords under these conditions: 1. A sword must move through Sections 1, 2, and 3 in sequence. 2. Only one sword can be processed in each section at a time. 3. No two swords should overlap in the same section. Determine the optimal order of processing swords in Barok’s workshop and the total minimum time it will take to complete all swords. Assume each process in a section takes one unit of time. Input The first line contains an integer n — the number of swords (1 ≤ n ≤ 20). The second line contains n integers jewels_counti — the number of jewels in each sword in the order from the first to the last sword to be processed (1 ≤ jewels_counti ≤ 20). Output Print on the first line the minimum total time required to process all the swords. On the next lines, print the sequence of section assignments for each sword in the format: sword_id section_id start_time end_time. Examples Input 3 2 4 6 Output 6 1 1 1 2 1 2 2 3 1 3 3 4 2 1 2 3 2 2 3 4 2 3 4 5 3 1 3 4 3 2 4 5 3 3 5 6 Input 2 5 5 Output 5 1 1 1 2 1 2 2 3 1 3 3 4 2 1 2 3 2 2 3 4 2 3 4 5 Note In the first example, processing the three swords with jewels 2, 4, and 6 takes 6 units of time as each sword needs to be processed in each section sequentially without any overlap. In the second example, although both swords have the same number of jewels, the processing still requires a total minimum time of 5 units because of the constraint that each sword must be finished in sequence through all sections before another starts.","solution":"def process_swords(n, jewels_count): Processes the swords in the workshop and generates the optimal sequence of section assignments along with the total minimum time required. Parameters: n (int): Number of swords. jewels_count (list of int): List of integers representing the number of jewels in each sword. Returns: Tuple: Total minimum time required and Sword processing plan. sword_processing_plan = [] current_time = 1 for i in range(1, n + 1): for section in range(1, 4): sword_processing_plan.append((i, section, current_time, current_time + 1)) current_time += 1 total_time = current_time - 1 return total_time, sword_processing_plan"},{"question":"Given a number, determine if the number is a \\"Perfect Number\\" or not. A \\"Perfect Number\\" is a positive integer that is equal to the sum of its proper divisors, excluding the number itself. Example 1: Input: 28 Output: 1 Explanation: Proper divisors of 28 are 1, 2, 4, 7, 14. Sum = 1 + 2 + 4 + 7 + 14 = 28. Example 2: Input: 15 Output: 0 Explanation: Proper divisors of 15 are 1, 3, 5. Sum = 1 + 3 + 5 = 9, which is not equal to 15. Your Task: You don\'t need to read or print anything. Your task is to complete the function is_PerfectNumber() which takes the number as an input parameter and returns 1 if it is a Perfect Number otherwise returns 0. Expected Time Complexity: O(sqrt(N)) Expected Space Complexity: O(1) Constraints: 1 <= n <= 100000","solution":"def is_PerfectNumber(n): Determines if a number is a perfect number or not. Parameters: n (int): The number to check. Returns: int: 1 if the number is a perfect number, otherwise 0. if n < 2: return 0 sum_divisors = 1 # 1 is a proper divisor for all n >= 2 # Check divisors from 2 to sqrt(n) for i in range(2, int(n**0.5) + 1): if n % i == 0: sum_divisors += i if i != n // i: sum_divisors += n // i return 1 if sum_divisors == n else 0"},{"question":"You are given an array of positive integers `arr` representing the heights of buildings. A building `i` can see building `j` if for any building `k` between `i` and `j` (i < k < j), the height of building `k` is less than the minimum of the heights of buildings `i` and `j`. Your task is to find the building that can see the maximum number of other buildings. Return the index (1-based) of the building which can see the maximum number of other buildings. Example 1: Input: arr = [3, 7, 8, 3, 6, 1] Output: 3 Explanation: Building 3 can see buildings 8, 6 and 1. Example 2: Input: arr = [1, 2, 3, 4, 5] Output: 5 Explanation: Building 5 can see buildings 1, 2, 3, and 4. Example 3: Input: arr = [5, 4, 3, 2, 1] Output: 1 Explanation: Building 1 can see buildings 2, 3, 4, and 5. Constraints: 1 <= arr.length <= 1000 1 <= arr[i] <= 10,000","solution":"def building_with_max_visibility(arr): Returns the 1-based index of the building which can see the maximum number of other buildings. n = len(arr) max_visibility_count = 0 building_index = 0 for i in range(n): visibility_count = 0 # Check buildings to the left for j in range(i - 1, -1, -1): if arr[j] < min(arr[i], arr[j + 1]): visibility_count += 1 else: break # Check buildings to the right for j in range(i + 1, n): if arr[j] < min(arr[i], arr[j - 1]): visibility_count += 1 else: break if visibility_count > max_visibility_count: max_visibility_count = visibility_count building_index = i return building_index + 1"},{"question":"Problem: Sherlock is trying to decipher a secret code that follows a specific pattern. The code consists of a string of lowercase alphabets and digits. Sherlock figures out that the code is meant to be decomposed into groups containing sequentially incremental numbers. However, some of the digits may be missing, represented by the character \'?\'. Sherlock needs your help to determine the possible original integer sequences that fit the pattern. The sequence should be in its smallest lexicographical order. Input The first line consists of a single integer T, representing the number of test cases. The next T lines consist of a string with lowercase alphabets and digits \'0\'-\'9\' including \'?\'. Each string will have at most 20 characters. Output For every test case, print the smallest lexicographical sequence of numbers that could fill the \'?\' characters. Print the result for every test case on a new line. Constraints: 1 ≤ T ≤ 3 1 ≤ length of each string ≤ 20 Example input: 2 a1b?c ?2d?4 Example output: a1b2c 12d34","solution":"def fill_missing_numbers(code: str) -> str: Given a code string containing digits and \'?\', replace \'?\' with the smallest lexicographical sequence of incremental numbers. result = [] current_number = 1 # Start from 1 for smallest lexicographical order for ch in code: if ch == \'?\': result.append(str(current_number)) current_number += 1 else: result.append(ch) if ch.isdigit(): current_number = int(ch) + 1 return \'\'.join(result) def solve(t: int, codes: list[str]) -> list[str]: return [fill_missing_numbers(code) for code in codes]"},{"question":"Avery is working with a sequence of numbers and wants to perform a series of operations on them. The sequence initially contains n zeros. He can perform two types of operations on the sequence: 1. Addition: Given an index i and a value v, add v to the element at index i (1-based index). 2. Range Update: Given two indices l and r (both 1-based indices), increment all elements from index l to index r (inclusive) by 1. After performing all the operations, Avery wants to know the value of each element in the sequence. -----Input----- The first line of the input contains two integers n and m (1 ≤ n, m ≤ 200,000) — the number of elements in the sequence and the number of operations to perform. Each of the next m lines describes an operation in one of the following forms: - \\"1 i v\\": where 1 denotes an addition operation, i (1 ≤ i ≤ n) denotes the index, and v (1 ≤ v ≤ 10^9) denotes the value to be added. - \\"2 l r\\": where 2 denotes a range update operation, l (1 ≤ l ≤ r ≤ n) denotes the starting index, and r denotes the ending index of the range to be incremented. -----Output----- Print a single line with n integers, denoting the values of the sequence after performing all the operations. -----Example----- Input 5 4 1 3 4 2 2 4 1 1 3 2 3 5 Output 3 1 6 2 1 -----Explanation----- Initially, the sequence is [0, 0, 0, 0, 0]. The operations are applied sequentially as follows: - After the first operation: [0, 0, 4, 0, 0] - After the second operation: [0, 1, 5, 1, 0] - After the third operation: [3, 1, 5, 1, 0] - After the fourth operation: [3, 1, 6, 2, 1] These are the final values of the sequence.","solution":"def perform_operations(n, m, operations): sequence = [0] * n for op in operations: if op[0] == 1: i = op[1] - 1 v = op[2] sequence[i] += v elif op[0] == 2: l = op[1] - 1 r = op[2] - 1 for j in range(l, r + 1): sequence[j] += 1 return sequence"},{"question":"You are given a list of integers, and you need to find all unique triplets in the list that sum up to a given target value. Each triplet should be returned in sorted order, and the set of triplets should also be sorted. Constraints - The list can contain up to 5000 integers. - Each integer in the list is between -10^5 and 10^5. - The output should not contain duplicate triplets. - The resulting set of triplets should be sorted lexicographically. Input Input is given from Standard Input in the following format: ``` n target a1 a2 a3 ... an ``` Where n is the number of integers, target is the target sum, and `a1 a2 a3 ... an` are the list elements. Output Print all unique triplets that sum up to the given target value, each triplet on a new line in sorted order. Print each triplet in sorted order, and the overall triplet list in lexicographical order. Examples Input 6 0 -1 0 1 2 -1 -4 Output -1 -1 2 -1 0 1 Input 5 5 1 2 3 4 5 Output 1 2 2 2 3 5","solution":"def find_unique_triplets(n, target, nums): nums.sort() result = set() for i in range(n): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: triplet_sum = nums[i] + nums[left] + nums[right] if triplet_sum == target: result.add((nums[i], nums[left], nums[right])) left += 1 right -= 1 while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif triplet_sum < target: left += 1 else: right -= 1 result = sorted(result) return result # Processing input and output def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) target = int(data[1]) nums = list(map(int, data[2:])) triplets = find_unique_triplets(n, target, nums) for triplet in triplets: print(\' \'.join(map(str, triplet))) if __name__ == \\"__main__\\": main()"},{"question":"Напишите программу, которая принимает на вход строку, состоящую из строчных букв латинского алфавита, и определяет, можно ли разбить эту строку на непустые подстроки так, чтобы каждая подстрока была различной. Если это возможно, выведите «Да»; в противном случае выведите «Нет». -----Входные данные----- На вход программе подается строка, состоящая из строчных букв латинского алфавита. Длина строки находится в пределах от 1 до 100. -----Выходные данные----- Выведите «Да», если строку можно разбить на непустые подстроки, каждая из которых будет уникальной, или «Нет» в противном случае. -----Примеры----- Входные данные: abcabc Выходные данные: Да Входные данные: aaaa Выходные данные: Нет ----- Обоснование: В первом примере возможен разбиение строки на подстроки так: «a», «b», «c», «ab», «ca», «bc», таким образом каждая подстрока будет уникальной. Во втором примере любая подстрока в строке будет одинаковой и равно «a», поэтому невозможно разбить строку так, чтобы все подстроки были уникальными.","solution":"def can_be_split_into_unique_substrings(s): Determines if a string can be split into non-empty unique substrings. :param s: Input string consisting of lowercase Latin letters :return: \'Да\' if it\'s possible to split the string so that each substring is unique, otherwise \'Нет\' if len(set(s)) > 1: return \\"Да\\" else: return \\"Нет\\""},{"question":"A train company wants to find the longest possible route that enables a train to travel between two cities without passing through any intermediate city more than once. The railway network is represented as a graph, where cities are nodes, and train routes are edges connecting pairs of cities with a given travel distance. Write a function `longest_route(n, edges)` to determine the length of the longest route that can be traveled in this way. Where, - `n` is an integer representing the number of cities (nodes). - `edges` is a list of tuples, where each tuple `(u, v, w)` represents an undirected edge between city `u` and city `v` with a distance `w`. Note: The cities are numbered from 0 to n-1. -----Input----- The function will receive: - An integer `n` (2 leq n leq 1000) representing the number of cities. - A list `edges` of length m (0 leq m leq 3000), where each element is a tuple (u, v, w) representing a train route from city u to city v of distance w (1 leq w leq 1000). -----Output----- Return a single integer representing the length of the longest route that can be traveled without revisiting any city. -----Examples----- Input: ```python longest_route(5, [(0, 1, 2), (1, 2, 2), (2, 3, 2), (3, 4, 2), (4, 0, 2)]) ``` Output: ```python 8 ``` Input: ```python longest_route(4, [(0, 1, 100), (1, 2, 200), (2, 3, 300)]) ``` Output: ```python 600 ``` Explanation: In the first example, the longest route is from city 0 -> 1 -> 2 -> 3 -> 4, with a total distance of 2 + 2 + 2 + 2 = 8. In the second example, the longest route is from city 0 -> 1 -> 2 -> 3, with a total distance of 100 + 200 + 300 = 600. Note: Your solution should optimize for efficiency given the constraints.","solution":"def longest_route(n, edges): from collections import defaultdict # Build graph graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dfs(city, visited): visited.add(city) max_distance = 0 for neighbor, weight in graph[city]: if neighbor not in visited: trip_distance = weight + dfs(neighbor, visited) max_distance = max(max_distance, trip_distance) visited.remove(city) return max_distance longest_distance = 0 for city in range(n): longest_distance = max(longest_distance, dfs(city, set())) return longest_distance"},{"question":"You are organizing a sports event and need to divide participants into teams. Each team must have at least 4 players and no more than 6 players to be effective. Your goal is to maximize the number of teams that meet these criteria using the available players. -----Constraints----- - 1 leq P leq 2000 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: P -----Output----- Output the maximum number of teams that can be formed. -----Sample Input----- 17 -----Sample Output----- 3 For example, you can form three teams of 4, 4, and 6 players respectively, which utilizes 14 players and leaves 3 players without a team.","solution":"def max_teams(P): Returns the maximum number of teams that can be formed with P players, where each team has between 4 and 6 players. # We need to maximize the number of teams with the given constraints. # Prioritize forming teams of 5 or 6 because this maximizes the number of players used. max_teams = 0 # Iterate from maximum possible team sizes to minimum for team_size in range(6, 3, -1): teams_formed = P // team_size max_teams += teams_formed P -= teams_formed * team_size return max_teams"},{"question":"Given an array of integers, you need to find the longest bitonic subsequence in the array. A bitonic subsequence is a sequence of numbers that first increases and then decreases. The sequence need not be contiguous, i.e., it is not necessary that the elements of the subsequence should be consecutive. Your task is to write a function that calculates the length of the longest bitonic subsequence of a given array. # Specifications: - Function signature: `def longest_bitonic_subsequence(arr: List[int]) -> int` - **Input**: - `arr`: A list of integers where (1 ≤ len(arr) ≤ 2000) and (-10^4 ≤ arr[i] ≤ 10^4). - **Output**: - Return an integer which is the length of the longest bitonic subsequence. # Example: **Input:** ``` [1, 11, 2, 10, 4, 5, 2, 1] ``` **Output:** ``` 6 ``` **Explanation:** The longest bitonic subsequence is `[1, 2, 10, 4, 2, 1]`. Thus the length is 6. # Constraints: - The array length will be between 1 and 2000. - The array elements will be between -10^4 and 10^4. # Notes: 1. You need to determine the length of the maximum subsequence that first increases and then decreases. 2. Consider arrays of different lengths and values, including both positive and negative integers. 3. Take care of edge cases where the array may not have a decreasing part after an increasing part.","solution":"from typing import List def longest_bitonic_subsequence(arr: List[int]) -> int: n = len(arr) if n == 0: return 0 # Initialize increasing and decreasing subsequence lists inc = [1] * n dec = [1] * n # Compute lengths of increasing subsequences for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: inc[i] = max(inc[i], inc[j] + 1) # Compute lengths of decreasing subsequences for i in range(n-2, -1, -1): for j in range(n-1, i, -1): if arr[i] > arr[j]: dec[i] = max(dec[i], dec[j] + 1) # Find the maximum of the sum of inc[i] and dec[i] - 1 max_length = 0 for i in range(n): max_length = max(max_length, inc[i] + dec[i] - 1) return max_length"},{"question":"You are given a list of actions performed by a robot in a grid. The robot can move in four directions: up, down, left, and right. Initially, the robot is placed at the origin (0, 0) and its facing direction is towards the positive y-direction (up). Each action is represented as a character and the actions are as follows: - \'G\': Move ahead in the current direction. - \'L\': Turn 90 degrees to the left. - \'R\': Turn 90 degrees to the right. The robot performs a sequence of these actions and then stops. Your task is to determine whether the robot returns to its starting point (0, 0) after executing the sequence of actions. Input The input consists of a single line with a string of characters indicating the sequence of actions. The string length is between 1 and 100 inclusive. Output Output \\"YES\\" if the robot returns to the starting point after performing all the given actions, otherwise output \\"NO\\". Examples Input GGLRGLGLGRG Output NO Input GLGLGLGL Output YES Explanation In the first example, after performing the sequence of actions, the robot does not return to the starting point. In the second example, the robot turns left at each step and after four turns, it completes a full 360-degree rotation. Moving four steps ahead afterwards returns the robot to the starting point.","solution":"def is_robot_return_to_origin(actions): Determines if the robot returns to the origin (0, 0) after performing the sequence of actions. Parameters: actions (str): A string representing the sequence of actions. Returns: str: \\"YES\\" if the robot returns to the origin, \\"NO\\" otherwise. x, y = 0, 0 # Facing direction is represented as a tuple (dx, dy) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] direction_index = 0 # Initially facing up (0, 1) for action in actions: if action == \'G\': x += directions[direction_index][0] y += directions[direction_index][1] elif action == \'L\': direction_index = (direction_index - 1) % 4 elif action == \'R\': direction_index = (direction_index + 1) % 4 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"A company wants to optimize the allocation of tasks among its employees. Each task has a certain difficulty level, and each employee has a maximum difficulty level they can handle. Your goal is to assign tasks to employees such that each employee gets at most one task, and the maximum number of tasks are assigned. You are given two arrays: - `tasks` of size `n` where `tasks[i]` is the difficulty level of the ith task. - `workers` of size `m` where `workers[j]` is the maximum difficulty level the jth worker can handle. Write a function `maxTasksAssigned(tasks, workers)` which returns the maximum number of tasks that can be assigned. Input * The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of tasks. * The second line contains `n` integers where `tasks[i]` (1 ≤ tasks[i] ≤ 10^9) describe the difficulty levels of the tasks. * The third line contains an integer `m` (1 ≤ m ≤ 10^5), the number of workers. * The fourth line contains `m` integers where `workers[j]` (1 ≤ workers[j] ≤ 10^9) describe the maximum difficulty level each worker can handle. Output * A single integer, the maximum number of tasks that can be assigned. Examples Input: ``` 5 4 8 6 2 5 3 7 5 6 ``` Output: ``` 3 ``` Input: ``` 3 10 9 8 2 7 6 ``` Output: ``` 0 ``` Input: ``` 6 1 2 3 4 5 6 4 6 5 3 1 ``` Output: ``` 4 ``` Note In the first example, the maximum number of tasks that can be assigned is 3. One possible assignment is: worker 1 can handle task 4 (difficulty 4), worker 2 can handle task 2 (difficulty 5), and worker 3 can handle task 3 (difficulty 6). In the second example, none of the workers can handle the tasks due to the high difficulty levels. In the third example, the maximum number of tasks that can be assigned is 4. One possible assignment is: worker 1 can handle task 6, worker 2 can handle task 5, worker 3 can handle task 3, and worker 4 can handle task 1.","solution":"def maxTasksAssigned(tasks, workers): Returns the maximum number of tasks that can be assigned to workers. :param tasks: List[int] - Difficulty levels of the tasks. :param workers: List[int] - Maximum difficulty levels workers can handle. :return: int - The maximum number of tasks that can be assigned. tasks.sort() workers.sort() task_index = 0 worker_index = 0 assigned_tasks = 0 while task_index < len(tasks) and worker_index < len(workers): if tasks[task_index] <= workers[worker_index]: assigned_tasks += 1 task_index += 1 worker_index += 1 else: worker_index += 1 return assigned_tasks"},{"question":"A delivery drone operates in a grid, where each cell represents a location with a specified delivery demand. The drone starts at the top-left corner (0,0) and can only move right or down at each step. The grid is represented by an `n` x `m` matrix, where each cell contains a non-negative integer indicating the delivery demand quantity at that location. # Task: Write a program that determines the maximum total delivery demand the drone can fulfill from the start (0,0) to the bottom-right corner (n-1, m-1) of the grid. # -----Input----- - The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 50), representing the number of rows and columns of the grid. - The next `n` lines each contain `m` non-negative integers, representing the delivery demand quantities at each cell in the grid. # -----Output----- - Output a single integer, which is the maximum total delivery demand the drone can accomplish from the top-left corner to the bottom-right corner of the grid. # -----Examples----- **Sample Input 1:** 3 3 1 3 1 1 5 1 4 2 1 **Sample Output 1:** 12 **Sample Input 2:** 2 2 1 2 3 4 **Sample Output 2:** 8","solution":"def max_delivery_demand(n, m, grid): # Create a 2D dp array to store the maximum delivery demand dp = [[0] * m for _ in range(n)] # Initialize the top-left corner dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[-1][-1] # Sample usage # n = 3, m = 3 # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(max_delivery_demand(n, m, grid)) # Output: 12"},{"question":"Flora loves playing with numbers and sequences. She recently came across an interesting problem related to arithmetic progressions. In an arithmetic progression, the difference between consecutive terms is constant. Flora\'s task is to take a given sequence of integers and determine the length of the longest contiguous subsequence that forms an arithmetic progression. Given a sequence of integers, write a function that finds the length of the longest contiguous subsequence that forms an arithmetic progression. # Input format: The first line contains an integer `n`, representing the size of the sequence. The second line contains `n` space-separated integers representing the sequence. # Constraints: - 2 ≤ `n` ≤ 1000 - -10^5 ≤ each element of the sequence ≤ 10^5 # Output format: Print a single integer, which is the length of the longest contiguous subsequence that forms an arithmetic progression. # SAMPLE INPUT 1: 5 1 3 5 7 9 # SAMPLE OUTPUT 1: 5 # SAMPLE INPUT 2: 8 1 2 4 6 8 10 3 5 # SAMPLE OUTPUT 2: 5 # Explanation: In the first sample, the entire sequence is an arithmetic progression with a common difference of 2. In the second sample, the longest contiguous subsequence that forms an arithmetic progression is [1, 2, 4, 6, 8], which has a common difference of 2 and length 5.","solution":"def longest_arithmetic_subsequence_length(n, sequence): if n < 2: return n longest_length = 1 current_length = 1 # Calculate common difference of first two elements for initial comparison common_diff = sequence[1] - sequence[0] for i in range(1, n): current_diff = sequence[i] - sequence[i - 1] if current_diff == common_diff: current_length += 1 else: common_diff = current_diff current_length = 2 if current_length > longest_length: longest_length = current_length return longest_length"},{"question":"Polycarp is a passionate farmer and he wants to build several greenhouses on his large rectangular plot of land. He plans to install sprinklers in these greenhouses to ensure proper hydration of his crops. Each sprinkler covers a circular area, and the coverage areas of sprinklers in different greenhouses should not overlap. A greenhouse can be represented as a rectangle with sides parallel to the x and y axes, and each sprinkler within a greenhouse can be represented by its center coordinates and its radius. You need to help Polycarp determine the maximum number of sprinklers that can be installed in his greenhouses without overlapping coverage areas. Input The first line contains an integer n (1 ≤ n ≤ 100), which is the number of greenhouses. Each of the following n lines describes a greenhouse in the following format: x1 y1 x2 y2 Where (x1, y1) are the coordinates of the bottom-left corner and (x2, y2) are the coordinates of the top-right corner of the greenhouse. Output Print a single integer which is the maximum number of non-overlapping sprinklers that can be installed across all greenhouses. Example Input 3 1 1 4 4 5 5 7 6 8 8 10 10 Output 3 Note In the example above: - For the first greenhouse (1, 1, 4, 4), one sprinkler can be placed at (2.5, 2.5) with radius 1.5. - For the second greenhouse (5, 5, 7, 6), one sprinkler can be placed at (6, 5.5) with radius 0.5. - For the third greenhouse (8, 8, 10, 10), one sprinkler can be placed at (9, 9) with radius 1. Since no two sprinklers overlap across the greenhouses, the total number of sprinklers is maximized to 3.","solution":"def max_sprinklers(n, greenhouses): Returns the maximum number of non-overlapping sprinklers that can be installed in greenhouses. :param n: int, number of greenhouses :param greenhouses: list of tuples, each tuple containing coordinates (x1, y1, x2, y2) of bottom-left and top-right corners of a greenhouse :return: int, maximum number of non-overlapping sprinklers return n"},{"question":"Given two strings s1 and s2, both represent two non-negative integers. The strings s1 and s2 contain no leading zeroes. Write a program to find their sum and return it as a string. Example 1: Input: s1 = \\"123\\" s2 = \\"456\\" Output: \\"579\\" Example 2: Input: s1 = \\"11\\" s2 = \\"123\\" Output: \\"134\\" Example 3: Input: s1 = \\"999\\" s2 = \\"1\\" Output: \\"1000\\" Your Task: You don\'t need to read input or print anything. Your task is to complete the function addStrings() which takes two strings s1 and s2 as input and returns their sum as a string. Expected Time Complexity: O(max(len(s1), len(s2))) Expected Auxiliary Space: O(max(len(s1), len(s2))) Constraints: 1 <= len(s1), len(s2) <= 10^4 s1 and s2 contain no leading zeroes.","solution":"def addStrings(s1, s2): Given two strings s1 and s2 representing non-negative integers, returns their sum as a string. # Initialize pointers for both strings i, j = len(s1) - 1, len(s2) - 1 carry = 0 result = [] # Iterate through both strings from the end to the beginning while i >= 0 or j >= 0 or carry: n1 = int(s1[i]) if i >= 0 else 0 n2 = int(s2[j]) if j >= 0 else 0 total = n1 + n2 + carry # Calculate new carry and the digit to be added to the result carry = total // 10 result.append(str(total % 10)) i -= 1 j -= 1 # Since result is built backwards, reverse it before returning as a string return \'\'.join(result[::-1])"},{"question":"You are given a 9x9 Sudoku puzzle, which is partially filled with digits from 1 to 9. The objective is to fill the empty cells in such a way that each row, each column, and each of the nine 3x3 sub-grids contain all of the digits from 1 to 9 exactly once. Your task is to solve the Sudoku puzzle and print the completed board. Input The input consists of a single test case, which is a 9x9 grid of integers. The grid is represented by 9 lines of 9 space-separated integers each. Empty cells are denoted by 0. Output Print the solved Sudoku puzzle as a 9x9 grid of integers. Each line should contain 9 space-separated integers. Example Input: 5 3 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 Output: 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9","solution":"def solve_sudoku(board): Solves a given Sudoku board. def is_valid(board, num, pos): # Check row for i in range(len(board[0])): if board[pos[0]][i] == num and pos[1] != i: return False # Check column for i in range(len(board)): if board[i][pos[1]] == num and pos[0] != i: return False # Check sub-grid box_x = pos[1] // 3 box_y = pos[0] // 3 for i in range(box_y*3, box_y*3 + 3): for j in range(box_x*3, box_x*3 + 3): if board[i][j] == num and (i, j) != pos: return False return True def find_empty(board): for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == 0: return (i, j) # row, col return None def sudoku_solver(board): find = find_empty(board) if not find: return True else: row, col = find for i in range(1, 10): if is_valid(board, i, (row, col)): board[row][col] = i if sudoku_solver(board): return True board[row][col] = 0 return False sudoku_solver(board) return board def print_sudoku(board): Prints the Sudoku board in the required format. for row in board: print(\\" \\".join(str(num) for num in row))"},{"question":"Given an integer array `arr[]` of size `N` representing the daily temperatures, you need to calculate an array `result[]` such that for each day `i`, `result[i]` contains the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put `0` instead. Example 1: Input: N = 8 arr[] = {73, 74, 75, 71, 69, 72, 76, 73} Output: 1 1 4 2 1 1 0 0 Explanation: On day 1, you would have to wait 1 day till day 2 when the temperature is 74. On day 2, you would have to wait 1 day till day 3 when the temperature is 75. On day 3, you would have to wait 4 days till day 7 when the temperature is 76. Rest of the days follow the same logic. Example 2: Input: N = 6 arr[] = {30, 40, 50, 60, 50, 40} Output: 1 1 1 0 0 0 Explanation: On day 1, you would wait 1 day till day 2 when the temperature is 40. On day 2, you would wait 1 day till day 3 when the temperature is 50. On day 3, you would wait 1 day till day 4 when the temperature is 60. On day 4, there are no warmer temperatures in the future, and so on. Your Task: You need to complete the function and return the resulting array. The driver code will call the function and print the resulting array. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 <= N <= 10^{5} 30 <= arr[i] <= 100","solution":"def dailyTemperatures(temperatures): n = len(temperatures) result = [0] * n stack = [] # Stack to keep indexes of the temperatures array for i in range(n): # Check the stack for temperatures that are smaller than the current day temperature while stack and temperatures[i] > temperatures[stack[-1]]: idx = stack.pop() result[idx] = i - idx stack.append(i) return result"},{"question":"problem XYZ Corporation has implemented an inefficient sorting algorithm called \'Odd-Even Bubble Sort.\' The algorithm sorts a list as follows: 1. Pass through the list and bubble up all odd-index elements if they are less than their adjacent next element. 2. Pass through the list and bubble up all even-index elements if they are less than their adjacent next element. 3. Repeat the alternation of the two passes until the entire list is sorted. The algorithm stops when there are no swaps done in both odd and even passes. Given an unsorted list of integers, implement the \'Odd-Even Bubble Sort\' and return the sorted list. # Function Signature ```python def odd_even_bubble_sort(arr: List[int]) -> List[int]: ``` # Input - `arr` (List[int]): A list of integers that need to be sorted. # Output - (List[int]): The list sorted in non-decreasing order using the Odd-Even Bubble Sort algorithm. # Example ```python assert odd_even_bubble_sort([5, 3, 8, 6, 2, 1, 4, 7]) == [1, 2, 3, 4, 5, 6, 7, 8] assert odd_even_bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] assert odd_even_bubble_sort([3, 2, 3, 2, 3, 2, 3, 2]) == [2, 2, 2, 2, 3, 3, 3, 3] ``` # Constraints 1. The length of the list `arr` will be in the range `[1, 10^5]`. 2. Each element of the list `arr` will be in the range `[-10^9, 10^9]`. # Note - You must ensure that your code handles the alternation correctly and efficiently. - Consider edge cases where the list is already sorted or contains elements of the same value.","solution":"from typing import List def odd_even_bubble_sort(arr: List[int]) -> List[int]: n = len(arr) sorted = False while not sorted: sorted = True # Odd pass for i in range(1, n - 1, 2): if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] sorted = False # Even pass for i in range(0, n - 1, 2): if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] sorted = False return arr"},{"question":"We have a rectangular farm represented as a 2D grid of size MxN. Each cell in the grid can either be fertile (represented by 1) or infertile (represented by 0). A farmer wants to grow the maximum number of contiguous fertile regions (i.e., regions containing only 1s). Each contiguous fertile region can be defined by connecting horizontally or vertically adjacent fertile cells. You need to implement a function that returns the size of the largest contiguous fertile region on the farm. Example 1: Input: M = 4, N = 5 farm = [ [1, 0, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 1, 1], [0, 1, 1, 1, 0] ] Output: 5 Explanation: The largest contiguous fertile region is of size 5. Example 2: Input: M = 3, N = 3 farm = [ [1, 1, 0], [0, 1, 1], [1, 0, 0] ] Output: 4 Explanation: There are two regions of size 4 and 1. The largest one is of size 4. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxFertileRegion(farm)` which takes the 2D grid farm as input and returns the size of the largest contiguous fertile region. Expected Time Complexity: O(M * N) Expected Auxiliary Space: O(M * N) Constraints: 1 <= M, N <= 500 0 <= farm[i][j] <= 1","solution":"def maxFertileRegion(farm): def dfs(x, y): if x < 0 or y < 0 or x >= len(farm) or y >= len(farm[0]) or farm[x][y] == 0: return 0 farm[x][y] = 0 # Mark it as visited size = 1 # Start with the current cell # Perform DFS in all four possible directions size += dfs(x + 1, y) size += dfs(x - 1, y) size += dfs(x, y + 1) size += dfs(x, y - 1) return size max_region_size = 0 for i in range(len(farm)): for j in range(len(farm[0])): if farm[i][j] == 1: max_region_size = max(max_region_size, dfs(i, j)) return max_region_size"},{"question":"Write a program that simulates operations on a list of numbers, starting with an empty list. The program should handle the following operations: * append(x): Add the integer x to the end of the list. * insert(i, x): Insert integer x at the ith position in the list (0-indexed). * remove(x): Remove the first occurrence of integer x from the list. * getElement(i): Print the element at the ith position in the list (0-indexed). * printList(): Print all elements of the list in a single line separated by space. Constraints: * 1 ≤ q ≤ 100000 (Number of operations) * -1000000000 ≤ x ≤ 1000000000 (Value of integer x) * 0 ≤ i < current length of the list (for insert and getElement operations) Input: q operation 1 operation 2 ... operation q In the first line, the number of operations q is given. Then q operations follow, one per line. Output: For each getElement operation, print the requested element. For each printList operation, print the entire list in a single line. Example: Input: 7 append 5 append 3 append 10 insert 1 4 printList getElement 2 remove 3 Output: 5 4 3 10 3","solution":"class ListOperations: def __init__(self): self.lst = [] def append(self, x): self.lst.append(x) def insert(self, i, x): self.lst.insert(i, x) def remove(self, x): self.lst.remove(x) def get_element(self, i): return self.lst[i] def print_list(self): return \\" \\".join(map(str, self.lst))"},{"question":"Write a function that takes an array of integers and returns a new array containing only the values that appear exactly once in the original array. For example: ``` solution([4, 3, 2, 7, 8, 2, 3, 1]) = [4, 7, 8, 1] solution([1, 2, 3, 1]) = [2, 3] solution([1, 2, 2, 3, 3]) = [1] ``` If no integers appear exactly once, return an empty array: ``` solution([2, 2, 3, 3]) = [] ```","solution":"def solution(arr): Returns a new array containing only the values that appear exactly once in the original array. count = {} for num in arr: count[num] = count.get(num, 0) + 1 return [num for num in arr if count[num] == 1]"},{"question":"You are given an array of integers `arr` and an integer `k`. Write a function that returns whether it is possible to partition the array into `k` subarrays such that the sum of elements in each subarray is divisible by `k`. Return true if such a partition exists, otherwise return false. Example 1: Input: arr = [4, 3, 2, 3, 5, 2, 1], k = 4 Output: true Explanation: The array can be partitioned into 4 subarrays as follows: [4, 1], [3, 5], [2, 2, 3], [3]. The sum of elements in each subarray is 5, 8, 7, and 6, respectively. All of these are divisible by k (4). Example 2: Input: arr = [1, 2, 3, 4], k = 2 Output: true Explanation: The array can be partitioned into 2 subarrays as follows: [1, 3], [2, 4]. The sum of elements in each subarray is 4, which is divisible by k (2). Example 3: Input: arr = [1, 2, 3, 5], k = 3 Output: false Explanation: It is impossible to partition the array into 3 subarrays with sums divisible by k (3). Constraints: - 1 <= arr.length <= 20 - 1 <= arr[i] <= 100 - 1 <= k <= arr.length","solution":"def can_partition_k_subarrays(arr, k): Determine if the array can be partitioned into k subarrays such that the sum of elements in each subarray is divisible by k. if not arr or len(arr) < k: return False total_sum = sum(arr) if total_sum % k != 0: return False target_sum = total_sum // k taken = [False] * len(arr) def backtrack(start, current_sum, k_left): if k_left == 0: return True if current_sum == target_sum: return backtrack(0, 0, k_left - 1) for i in range(start, len(arr)): if not taken[i]: if current_sum + arr[i] > target_sum: continue taken[i] = True if backtrack(i + 1, current_sum + arr[i], k_left): return True taken[i] = False return False return backtrack(0, 0, k)"},{"question":"Vasya has two crystal balls. He wants to analyze their physical properties by comparing their weights. Unfortunately, both crystal balls have different masses, and Vasya needs to determine their combined weight and also find the greater and lesser balls by weight. Given the mass of both crystal balls, write a program to help Vasya determine the following: - The total weight of the two balls. - The mass of the heavier ball. - The mass of the lighter ball. The input consists of two positive integers a and b (1 ≤ a ≠ b ≤ 1000), representing the masses of the two crystal balls. The output should be three lines: - The first line should contain the total weight of the two balls. - The second line should contain the mass of the heavier ball. - The third line should contain the mass of the lighter ball. Input The input consists of a single line containing two integers a and b. Output The output should be three lines, as mentioned above. Examples Input 10 20 Output 30 20 10 Input 45 30 Output 75 45 30","solution":"def analyze_crystal_balls(a, b): total_weight = a + b heavier_ball = max(a, b) lighter_ball = min(a, b) return total_weight, heavier_ball, lighter_ball"},{"question":"You are given a list of N integers. You can perform the following operation any number of times (including zero): - Pick any two adjacent integers in the list, remove them and insert their sum back in the list. After performing the operation any number of times, Devu wonders if it is possible to end up with a specific number k. Write a program to help Devu answer if it is possible to get the number k after performing the operation zero or more times. -----Input----- The first line of the input contains a single integer N denoting the number of elements in the list. The second line contains N space-separated integers denoting the elements of the list. The third line contains an integer Q representing the number of queries. Each of the next Q lines contains a single integer k. -----Output----- Output Q lines, each containing \\"Possible\\" or \\"Not Possible\\" (both without quotes) corresponding to the answer of the respective query. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ Ai ≤ 100 - 1 ≤ Q ≤ 10 - 1 ≤ k ≤ 1000 -----Example----- Input: 5 1 2 3 4 5 3 15 14 10 Output: Possible Not Possible Possible -----Explanation----- For the first query, you can add all the numbers to get 15. For the second query, no combination of sums can give you 14. For the third query, you can add 1+2=3, 3+3=6, and 4+6=10 to get 10.","solution":"def is_possible_to_get_k(arr, k): Function to check if we can obtain the number k by summing elements in the list. # The only number we can end up with after arbitrary sums is the sum of the array. total_sum = sum(arr) return total_sum == k def perform_queries(N, arr, queries): Perform the given queries on the array and determine if k is possible for each query. results = [] for k in queries: if is_possible_to_get_k(arr, k): results.append(\\"Possible\\") else: results.append(\\"Not Possible\\") return results"},{"question":"A popular online puzzle game developer has decided to create a new game mode called \\"Swap and Restore\\". In this game mode, a sequence of numbers is given and players can perform a series of operations to alter the sequence. The challenge is to write a program that will determine the state of the sequence after all operations have been executed. There are two types of operations: 1. S x y – Swap the numbers at positions x and y (1-based index). 2. R – Restore the sequence to its original state. The player will be provided with the initial sequence and a series of operations. The objective is to find out the sequence after all operations have been applied. # Input: - The first line of the input contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the length of the sequence. - The second line contains N integers, the initial sequence. - The third line contains an integer M, the number of operations. - The next M lines describe the operations, each being one of the formats described above. # Output: For each test case, print a single line containing the final sequence after all operations, with the numbers separated by space. # Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 1000 - 1 ≤ Sequence[i] ≤ 10^6 # Sample Input: ``` 2 5 1 2 3 4 5 3 S 1 5 S 2 4 R 4 10 20 30 40 4 S 1 4 S 2 3 R S 3 4 ``` # Sample Output: ``` 1 2 3 4 5 10 30 20 40 ``` # Explanation: **Test Case 1:** 1. Initial sequence: 1 2 3 4 5 2. After swap operation S 1 5, the sequence becomes: 5 2 3 4 1 3. After swap operation S 2 4, the sequence becomes: 5 4 3 2 1 4. After restore operation R, the sequence reverts to: 1 2 3 4 5 **Test Case 2:** 1. Initial sequence: 10 20 30 40 2. After swap operation S 1 4, the sequence becomes: 40 20 30 10 3. After swap operation S 2 3, the sequence becomes: 40 30 20 10 4. After restore operation R, the sequence reverts to: 10 20 30 40 5. After swap operation S 3 4, the sequence becomes: 10 20 40 30","solution":"def swap_and_restore(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] sequence = test_cases[i][1] original_sequence = sequence.copy() M = test_cases[i][2] operations = test_cases[i][3] for op in operations: if op[0] == \'S\': _, x, y = op # Convert 1-based index to 0-based x -= 1 y -= 1 sequence[x], sequence[y] = sequence[y], sequence[x] elif op[0] == \'R\': sequence = original_sequence.copy() results.append(sequence) return results"},{"question":"**Longest Common Suffix in a List of Strings** You are given a list of strings. Your task is to find the longest common suffix that is shared among all the strings in the list. A suffix is a substring that occurs at the end of a string. For example, in the string \\"hamburger\\", \\"burger\\" and \\"r\\" are suffixes, but \\"ham\\" is not. Write a function that takes in a list of strings and returns the longest common suffix. If there is no common suffix, return an empty string. -----Input----- Each input will consist of a single test case. The input contains a list of strings L of size n (1 le n le 100). Each string in the list is non-empty and consists only of lowercase letters. The total length of all strings combined will not exceed 1000 characters. -----Output----- Output the longest common suffix among the strings in the list. If there is no common suffix, output an empty string. -----Examples----- Sample Input 1: [\\"coding\\", \\"driving\\", \\"singing\\"] Sample Output 1: \\"ing\\" Sample Input 2: [\\"apple\\", \\"banana\\", \\"cherry\\"] Sample Output 2: \\"\\" Sample Input 3: [\\"racecar\\", \\"car\\", \\"scar\\"] Sample Output 3: \\"car\\"","solution":"def longest_common_suffix(strings): if not strings: return \\"\\" # Reverse all strings in the list to find the longest common prefix in the reversed strings reversed_strings = [\\"\\".join(reversed(s)) for s in strings] # Find the shortest string in the reversed strings min_len = min(len(s) for s in reversed_strings) common_suffix = [] for i in range(min_len): current_char = reversed_strings[0][i] if all(s[i] == current_char for s in reversed_strings): common_suffix.append(current_char) else: break # Reverse the common suffix and return it return \\"\\".join(reversed(common_suffix))"},{"question":"You are given a class representing a Playlist of songs. Implement the Playlist class that allows adding new songs, playing the next song, and repeating the current song. Also, keep track of the total play count for each song. Implement the Playlist class: Playlist() - Initializes the playlist object. void addSong(string songName) - Adds the song to the playlist. Multiple instances of the same song can be added. string playNext() - Plays the next song in the playlist. If the end of the playlist is reached, start from the beginning. Returns the name of the played song. string repeatCurrent() - Repeats the current song. Returns the name of the played song. int getPlayCount(string songName) - Returns the total play count of the given song. Example: Input: [\\"Playlist\\", \\"addSong\\", \\"addSong\\", \\"addSong\\", \\"playNext\\", \\"playNext\\", \\"repeatCurrent\\", \\"getPlayCount\\", \\"playNext\\", \\"getPlayCount\\", \\"getPlayCount\\"] [[], [\\"SongA\\"], [\\"SongB\\"], [\\"SongC\\"], [], [], [], [\\"SongA\\"], [], [\\"SongA\\"], [\\"SongB\\"]] Output: [null, null, null, null, \\"SongA\\", \\"SongB\\", \\"SongB\\", 1, \\"SongC\\", 1, 1] Explanation: Playlist playlist = new Playlist(); playlist.addSong(\\"SongA\\"); // Add \\"SongA\\" to the playlist playlist.addSong(\\"SongB\\"); // Add \\"SongB\\" to the playlist playlist.addSong(\\"SongC\\"); // Add \\"SongC\\" to the playlist playlist.playNext(); // Play \\"SongA\\" playlist.playNext(); // Play \\"SongB\\" playlist.repeatCurrent(); // Repeat \\"SongB\\" playlist.getPlayCount(\\"SongA\\"); // Return 1, as \\"SongA\\" was played once playlist.playNext(); // Play \\"SongC\\" playlist.getPlayCount(\\"SongA\\"); // Return 1, as \\"SongA\\" was played once playlist.getPlayCount(\\"SongB\\"); // Return 1, as \\"SongB\\" was played twice Constraints: - Each songName length is 1 <= len <= 50. - At most 10000 calls will be made to addSong, playNext, repeatCurrent, and getPlayCount. - All song names are unique and consist of uppercase and lowercase English letters and digits.","solution":"class Playlist: def __init__(self): self.songs = [] self.play_counts = {} self.current_song_index = -1 def addSong(self, songName: str): self.songs.append(songName) if songName not in self.play_counts: self.play_counts[songName] = 0 def playNext(self) -> str: if not self.songs: return None # No songs in the playlist self.current_song_index = (self.current_song_index + 1) % len(self.songs) current_song = self.songs[self.current_song_index] self.play_counts[current_song] += 1 return current_song def repeatCurrent(self) -> str: if self.current_song_index == -1: return None # No songs have been played yet current_song = self.songs[self.current_song_index] self.play_counts[current_song] += 1 return current_song def getPlayCount(self, songName: str) -> int: return self.play_counts.get(songName, 0)"},{"question":"Alice is an event organizer and she needs to arrange the seating for a group of people. She wants to make sure that each row has as even a distribution of people as possible. Given the number of people P and the number of rows R, help her determine the maximum and minimum number of people that can be seated in any row. Write a function `distributePeople(P, R)` that takes the number of people P and the number of rows R and returns a tuple `(max_seats, min_seats)` where `max_seats` is the maximum number of people in any row and `min_seats` is the minimum number of people in any row. If all rows have the same number of people, both values should be the same. Example 1: Input: P = 10, R = 3 Output: (4, 3) Explanation: The distribution across rows will be [4, 3, 3]. Therefore, the maximum number of people in any row is 4 and the minimum is 3. Example 2: Input: P = 15, R = 5 Output: (3, 3) Explanation: The distribution across rows will be [3, 3, 3, 3, 3]. Hence, both maximum and minimum values are 3. Your Task: You don\'t need to read input or print anything. Complete the function `distributePeople()` which takes two integers P and R as input parameters and returns the tuple `(max_seats, min_seats)`. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ P, R ≤ 10^9","solution":"def distributePeople(P, R): Returns a tuple (max_seats, min_seats) where max_seats is the maximum number of people in any row and min_seats is the minimum number of people in any row given P people and R rows. # Calculate the base number of people per row base_seats = P // R # Calculate the number of rows that will have an extra person extra_seats = P % R # If there are extra people, max_seats will be base_seats + 1, otherwise it will be base_seats max_seats = base_seats + 1 if extra_seats > 0 else base_seats # The minimum number of seats will be the base_seats min_seats = base_seats return max_seats, min_seats"},{"question":"Given a non-empty string s and an integer k, group the characters of the string into k-sized groups. If the last group has fewer than k characters, fill the remaining spaces with the character \'*\'. Return the grouped characters as a list of strings. For example: s = \\"abcdefghij\\" k = 3 Output: [\\"abc\\", \\"def\\", \\"ghi\\", \\"j**\\"] Another example: s = \\"hello\\" k = 2 Output: [\\"he\\", \\"ll\\", \\"o*\\"] Constraints: * `1 <= s.length <= 10^4` * `1 <= k <= 100`","solution":"def group_characters(s, k): Group the characters of the string s into k-sized groups. If the last group has fewer than k characters, fill the remaining spaces with \'*\'. Args: s (str): The input string. k (int): The size of each group. Returns: list: A list of k-sized groups with the last group filled with \'*\' if necessary. # Initialize an empty list to store the groups groups = [] # Iterate over the string in steps of k for i in range(0, len(s), k): # Take a slice of the string from i to i+k chunk = s[i:i+k] # If the length of the chunk is less than k, fill it with \'*\' if len(chunk) < k: chunk += \'*\' * (k - len(chunk)) # Append the chunk to the groups list groups.append(chunk) return groups"},{"question":"A company is planning to distribute n candies to its employees. Each employee will receive one candy, and any remaining candies will form another batch to be distributed in subsequent rounds. This process will continue until there are no more candies left to distribute. Write a function that takes an integer n as input and returns the number of rounds needed to distribute all candies. Constraints * 1 ≦ n ≦ 10^9 Input The input is given from Standard Input in the following format: n Output Output the number of rounds needed to distribute all candies. Examples Input 4 Output 2 Input 10 Output 3","solution":"import math def distribution_rounds(n): Returns the number of rounds needed to distribute all the candies. Each round, the number of candies gets halved until there are no more candies left. # The number of rounds needed is the number of times to halve the number of candies if n < 1: raise ValueError(\\"Number of candies must be at least 1.\\") return math.ceil(math.log2(n+1))"},{"question":"A software company is developing a new uniform distribution solution for a set of applications. They need a function that can determine if a given dataset can be evenly distributed into a specific number of equal-value subsets. Each element in the dataset represents the value of an item, and the goal is to verify whether it\'s possible to partition the items into several subsets such that each subset has the same total value. For example, given the items `[4, 3, 2, 3, 5, 2, 1]`, it is possible to partition them into 4 subsets that each sum to 5: `[5], [4, 1], [3, 2], [3, 2]`. -----Input----- - The input begins with two integers N and K (1 leq N leq 15, 1 leq K leq N). - Following these are N integers representing the values of the items (1 leq text{value} leq 1000). -----Output----- - The output should be a single boolean value (either `True` or `False`). - Output `True` if it\'s possible to partition the dataset into K subsets, each with the same total value. Otherwise, output `False`. -----Examples----- Sample Input 1: 7 4 4 3 2 3 5 2 1 Sample Output 1: True Sample Input 2: 4 2 1 2 3 5 Sample Output 2: False","solution":"def canPartitionKSubsets(nums, k): def can_partition(start, k, subset_sum, target, used): if k == 0: return True if subset_sum == target: return can_partition(0, k - 1, 0, target, used) for i in range(start, len(nums)): if not used[i] and subset_sum + nums[i] <= target: used[i] = True if can_partition(i + 1, k, subset_sum + nums[i], target, used): return True used[i] = False return False total_sum = sum(nums) if total_sum % k != 0: return False target = total_sum // k nums.sort(reverse=True) used = [False] * len(nums) return can_partition(0, k, 0, target, used)"},{"question":"Given a string s and an integer k, your task is to reverse the first k characters of the string. If the string has fewer than k characters, reverse the entire string. Implement the function reverse_k_chars(s, k) that takes a string and an integer as arguments and returns the modified string. Example 1: Input: s = \\"abcdef\\" k = 3 Output: \\"cbadef\\" Example 2: Input: s = \\"hello\\" k = 6 Output: \\"olleh\\" Your Task: You only need to implement the given function reverse_k_chars(). Do not read input, instead use the arguments given in the function. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(s) ≤ 1000 1 ≤ k ≤ 1000","solution":"def reverse_k_chars(s, k): Reverses the first k characters of the string s. If the length of s is less than k, reverses the entire string. if k > len(s): k = len(s) return s[:k][::-1] + s[k:]"},{"question":"Alex likes to go hiking on the weekends. He\'s planning a hike on a trail that has n points of interest. Each point of interest has a certain elevation. Alex wants to know the highest elevation he will encounter if he starts his hike at a given point of interest and moves to another given point of interest. As Alex is very keen on planning, he asks you to compute it instead of him. Initially, the trail has n points with elevations e_1, e_2, ldots, e_n. Alex may receive q queries about these points. Each query might update the elevation of a certain point or ask about the highest elevation encountered between two points. More formally, you must process q queries of the following types: 1. change e_i to x. This means that the elevation of the i-th point becomes x units. 2. find the maximum elevation between point l and point r (inclusive). -----Input----- The first line contains an integer n (1 leq n leq 300 000) — the number of points of interest. The second line contains n integers e_1, e_2, ldots, e_n (1 leq e_i leq 10^{6}) — the elevations of the points. The third line contains an integer q (1 leq q leq 300 000) — the number of queries. Each of the following q lines describes a query and can be one of the following: 1. If a query changes the elevation of some point, it contains 1, followed by two integers i and x (1 leq i leq n, 1 leq x leq 10^{6}), which means e_i becomes x. 2. If a query asks for the maximum elevation between two points, it contains 2, followed by two integers l and r (1 leq l leq r leq n), which means you should find the maximum elevation from point l to point r (inclusive). -----Output----- For each query of the second type (maximum elevation query) print the highest elevation encountered between the two points. Print the result of each query on a new line. -----Examples----- Input 5 10 20 15 25 18 3 2 2 4 1 3 30 2 1 5 Output 25 30 Input 4 12 9 7 14 5 2 1 3 1 2 15 2 1 2 1 4 5 2 3 4 Output 12 15 7 -----Note----- In the first example: - The first query asks for the maximum elevation between points 2 and 4, which are 20, 15, and 25. So, the highest elevation is 25. - The second query updates the third point\'s elevation to 30. - The third query asks for the maximum elevation between points 1 and 5, which are 10, 20, 30, 25, and 18. So, the highest elevation is 30. In the second example: - The first query asks for the maximum elevation between points 1 and 3, which are 12, 9, and 7. So, the highest elevation is 12. - The second query updates the second point\'s elevation to 15. - The third query asks for the maximum elevation between points 1 and 2, now with elevations 12 and 15. So, the highest elevation is 15. - The fourth query updates the fourth point\'s elevation to 5. - The fifth query asks for the highest elevation between points 3 and 4, which are 7 and 5. So, the highest elevation is 7.","solution":"class HikingTrail: def __init__(self, elevations): self.elevations = elevations def update_elevation(self, index, new_elevation): Updates the elevation at a specific index self.elevations[index - 1] = new_elevation def max_elevation(self, l, r): Finds the maximum elevation between indices l and r (inclusive) return max(self.elevations[l-1:r])"},{"question":"Tom, a computer science enthusiast, is fascinated by the Fibonacci sequence and Pascal’s triangle. He decides to create a game that combines both concepts. In his game, each number in Pascal’s triangle must be replaced by the corresponding Fibonacci number in the sequence. The Fibonacci sequence is defined as: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Pascal’s triangle is constructed such that the nth row contains the binomial coefficients C(n, k) for k = 0 to n. Tom needs your help to generate the modified Pascal’s triangle. Given the number of rows, compute the triangle where each number is replaced by the corresponding Fibonacci number. Given the number of rows in Pascal’s triangle, output the modified version of the triangle, where each entry is replaced by its corresponding Fibonacci number. Input: - The first line contains a single integer T (1 ≤ T ≤ 10), the number of test cases. - For each test case: - The first line contains an integer N (1 ≤ N ≤ 20), the number of rows of Pascal’s triangle. Output: - For each test case, print N lines representing the modified Pascal’s triangle. Each entry in the line should be separated by a space. Note: - Ensure that all Fibonacci numbers used are calculated modulo 10^9 + 9. SAMPLE INPUT: 2 3 4 SAMPLE OUTPUT: 1 1 1 1 2 1 1 1 1 1 2 1 1 3 3 1 Explanation: For the first test case: The first three rows of Pascal’s triangle are: 1 1 1 1 2 1 Replacing with corresponding Fibonacci numbers gives: 1 (F(1)) 1 1 (F(1) F(1)) 1 2 1 (F(1) F(2) F(1)) For the second test case: The first four rows of Pascal’s triangle are: 1 1 1 1 2 1 1 3 3 1 Replacing with corresponding Fibonacci numbers gives: 1 (F(1)) 1 1 (F(1) F(1)) 1 2 1 (F(1) F(2) F(1)) 1 3 3 1 (F(1) F(3) F(3) F(1))","solution":"def fibonacci(n, fib_cache): Calculate Fibonacci number with memoization and modulo 10^9 + 9 MOD = 1000000009 if n not in fib_cache: fib_cache[n] = (fibonacci(n - 1, fib_cache) + fibonacci(n - 2, fib_cache)) % MOD return fib_cache[n] def generate_pascals_triangle(n): Generate Pascal\'s triangle up to the nth row. triangle = [] for i in range(n): row = [1] * (i + 1) for j in range(1, i): row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j] triangle.append(row) return triangle def modified_pascals_triangle(num_cases, cases): Generates the modified Pascal\'s triangle for each case, where each number in Pascal\'s triangle is replaced by its corresponding Fibonacci number. results = [] fib_cache = {0: 0, 1: 1} for n in cases: fib_pascals_triangle = [] triangle = generate_pascals_triangle(n) for row in triangle: fib_row = [fibonacci(entry, fib_cache) for entry in row] fib_pascals_triangle.append(fib_row) results.append(fib_pascals_triangle) return results def format_output(results): Formats the output based on results generated. output_lines = [] for result in results: for row in result: output_lines.append(\' \'.join(map(str, row))) return \'n\'.join(output_lines)"},{"question":"In this task, you are required to write a program to generate all possible unique subsets of an input set of integers. A subset of a set is any collection of elements from the set, including the empty set and the set itself. The subsets of a set should be listed in increasing order of length and, for subsets of the same length, in lexicographical order. Input The input will be a single line containing a space-separated list of integers. The list will consist of 1 to 10 integers. Each integer will be between -10 and 10. Output Output all unique subsets of the given set of integers, one subset per line. The subsets should be printed in order of increasing length and, for subsets of the same length, in lexicographical order where integers are compared based on their numeric value. Examples Input 1 2 2 Output [] [1] [2] [1, 2] [2, 2] [1, 2, 2] Input 3 1 -1 Output [] [-1] [1] [3] [-1, 1] [-1, 3] [1, 3] [-1, 1, 3]","solution":"from itertools import combinations def get_unique_subsets(nums): Returns all unique subsets of given list of integers in specified order. nums = sorted(nums) result = set() for r in range(len(nums) + 1): for comb in combinations(nums, r): result.add(comb) result = sorted(result, key=lambda x: (len(x), x)) return [list(subset) for subset in result] def unique_subsets(input_line): Prints all unique subsets of the given input set. nums = list(map(int, input_line.split())) subsets = get_unique_subsets(nums) for subset in subsets: print(subset)"},{"question":"Write a function that takes a list of non-negative integers and arranges them such that they form the largest possible number. For example, given `[50, 2, 1, 9]`, the largest formed number is `95021`. **Input:** - A list of non-negative integers (e.g., `[3, 30, 34, 5, 9]`). **Output:** - A string representing the largest formed number, without any leading zeroes (e.g., `\\"9534330\\"`). **Examples:** largest_formed_number([10, 2]) => \\"210\\" largest_formed_number([3, 30, 34, 5, 9]) => \\"9534330\\" largest_formed_number([1, 20, 23, 4, 8]) => \\"8423201\\" Note: - The result may be large, so handle it as a string. - The input list will not contain negative numbers. - The elements in the input list could be single-digit or multi-digit numbers.","solution":"from functools import cmp_to_key def largest_formed_number(nums): def compare(a, b): return (int(b + a) - int(a + b)) nums_str = list(map(str, nums)) nums_str.sort(key=cmp_to_key(compare)) res = \'\'.join(nums_str) return res.lstrip(\'0\') or \'0\'"},{"question":"**Cryptography Text Shifter** You are tasked with developing an encryption system that applies a cyclic shift to characters in a string. The system will shift each character in the string forward by a specified number of positions in the alphabet, wrapping around to the beginning if necessary. The alphabet consists of lowercase English letters (\'a\' to \'z\'). Your task is to write a function that encrypts a given string using the specified shift. Input: - \'T\' - Number of test cases. - Each test case contains an integer \'K\' and a string \'S\' where \'K\' is the number of positions to shift each character and \'S\' is the string to be encrypted. Output: - For each test case, output the encrypted string. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ K ≤ 25 - 1 ≤ |S| ≤ 10^5 Sample Input: ``` 3 3 hello 1 abcd 25 xyz ``` Sample Output: ``` khoor bcde wxy ```","solution":"def encrypt_string(K, S): Encrypts the string S by shifting each character K positions forward in the alphabet. Parameters: K (int): The number of positions to shift S (str): The string to be encrypted Returns: str: The encrypted string encrypted = [] for char in S: # Shift the character and wrap around using modulo 26 new_char = chr((ord(char) - ord(\'a\') + K) % 26 + ord(\'a\')) encrypted.append(new_char) return \'\'.join(encrypted) def process_test_cases(T, test_cases): Processes multiple test cases of the encrypt_string function. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains an integer K and a string S Returns: list of str: A list of encrypted strings for each test case results = [] for K, S in test_cases: results.append(encrypt_string(K, S)) return results"},{"question":"Given an integer array `arr` of size `n`, your task is to find whether there exists a pair of elements in the array whose sum is equal to a given target value `k`. Complete the function `hasPairWithSum` which takes the array `arr` and the target value `k` as inputs and returns a boolean indicating whether such a pair exists or not. Note: - The function should return `True` if there is at least one pair in the array that sums up to `k`, otherwise it should return `False`. Input: - The first line of input contains an integer T denoting the number of test cases. - Each test case consists of two lines. The first line contains two integers `n` and `k` (the size of the array and the target sum respectively). The second line contains `n` space-separated integers representing the array `arr`. Output: - For each test case, print `True` if such a pair exists, otherwise print `False` in a new line. Constraints: - 1 <= T <= 100 - 2 <= n <= 1000 - -1000 <= arr[i] <= 1000 - -2000 <= k <= 2000 Example (To be used only for expected output): Input: 2 4 9 2 7 11 15 5 10 1 2 3 4 5 Output: True True Note: The Input/Output format and Example given are used for the system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def hasPairWithSum(arr, k): Returns True if there exist two elements in `arr` whose sum equals `k`. Otherwise, False. complements = set() for num in arr: if k - num in complements: return True complements.add(num) return False"},{"question":"In a tourist city, there are m attractions and n visitors. Each visitor has a list of attractions they want to visit. Visitors can only move from one attraction to another by walking, and the time it takes to walk between any two attractions is given by a walking time matrix. Each visitor wants to visit all their desired attractions in the given order and minimize their total walking time. Your task is to write a program that calculates the minimum total walking time for each visitor. -----Input----- The first line of input contains two integers, m and n (1 ≤ m, n ≤ 100), representing the number of attractions and the number of visitors, respectively. The next m lines each contain m integers, where the j-th integer on the i-th line represents the walking time (in minutes) from attraction i to attraction j. Walking time from an attraction to itself is always zero. The next n lines each contain a sequence of integers a1, a2, ..., ak (1 ≤ ak ≤ m), representing the list of attractions that each respective visitor wants to visit in that exact order. Each list will have at least one attraction and at most m attractions. -----Output----- For each visitor, output a single integer representing the minimum total walking time required for them to visit all their desired attractions in the given order. -----Example----- Input 5 3 0 2 9 10 1 2 0 6 4 2 9 6 0 8 7 10 4 8 0 6 1 2 7 6 0 1 2 3 3 5 4 1 1 4 Output 8 26 9 -----Explanation----- In the first test case, the visitor needs to move from attraction 1 to 2 to 3. The total minimum walking time is 2 (from 1 to 2) + 6 (from 2 to 3) = 8. In the second test case, the visitor needs to move from attraction 3 to 5 to 4 to 1. The total minimum walking time is 7 (from 3 to 5) + 6 (from 5 to 4) + 10 (from 4 to 1) = 23. In the third test case, the visitor needs to move from attraction 1 to 4. The total minimum walking time is 10.","solution":"def calculate_minimum_walking_times(m, n, walking_time_matrix, visitors_list): results = [] for visitor in visitors_list: total_time = 0 for i in range(len(visitor) - 1): total_time += walking_time_matrix[visitor[i] - 1][visitor[i + 1] - 1] results.append(total_time) return results"},{"question":"You are part of a space exploration team tasked with landing a rover on a newly discovered planet. The landing zone is represented as an n x m grid, where each cell can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). The rover can move up, down, left, or right, but cannot move into a cell with an obstacle. The rover starts at the top-left corner of the grid (0, 0) and its goal is to reach the bottom-right corner of the grid (n-1, m-1). Due to the rover\'s limited battery, it is important to determine the shortest path from the starting point to the destination. Write a program that calculates the minimum number of moves required for the rover to reach the destination. If it is impossible for the rover to reach the destination, the program should output -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) – the dimensions of the grid. The next n lines each contain m characters (either \'.\' or \'#\'), representing the grid. Output Print a single integer – the minimum number of moves required for the rover to reach the bottom-right corner of the grid. If it\'s impossible for the rover to reach the destination, print -1. Examples Input 3 3 ... .#. ... Output 4 Input 3 3 .#. .#. .#. Output -1 Note In the first example, the rover can move from the starting point to the destination as follows: (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2), totaling 4 moves. In the second example, the rover cannot reach the destination due to the obstacles blocking its path.","solution":"from collections import deque def minimum_moves_to_reach_destination(n, m, grid): Returns the minimum number of moves required for the rover to reach the bottom-right corner of the grid. If it\'s impossible to reach the destination, it returns -1. directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == n-1 and col == m-1: return dist for drow, dcol in directions: new_row, new_col = row + drow, col + dcol if 0 <= new_row < n and 0 <= new_col < m and grid[new_row][new_col] == \'.\' and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"You are given a binary string of length n, consisting of characters \'0\' and \'1\'. Your task is to select at most one contiguous subarray of the string and invert all the bits in that subarray to maximize the number of \'1\'s in the resulting string. Inversion means changing \'0\' to \'1\' and \'1\' to \'0\'. Write a program that takes the binary string as input and returns the maximum number of \'1\'s that can be achieved after performing at most one inversion of a contiguous subarray. Input - The first line of input contains an integer n (1 ≤ n ≤ 10^5), which represents the length of the binary string. - The second line of input contains a binary string of length n. Output - Print a single integer, the maximum number of \'1\'s that can be achieved after inverting at most one contiguous subarray. Examples Input 5 11010 Output 4 Input 4 0000 Output 4 Input 3 111 Output 3 Note In the first example, inverting the subarray from index 3 to 3 (1-based indexing) changes \'0\' to \'1\', resulting in the string \\"11110\\", which contains 4 \'1\'s. In the second example, inverting the entire string changes all \'0\'s to \'1\'s, resulting in the string \\"1111\\", which contains 4 \'1\'s. In the third example, no inversion is needed as the string already contains the maximum number of \'1\'s.","solution":"def max_ones_after_inversion(n, binary_string): Returns the maximum number of \'1\'s that can be achieved by inverting at most one contiguous subarray. # count the number of 1\'s in the original string original_ones = binary_string.count(\'1\') # Create a normalized version of the binary string where \'0\' -> 1 and \'1\' -> -1. # This is to apply Kadane\'s algorithm to find the subarray with maximum sum. # This will help in finding the maximum gain of changing \'0\'s to \'1\'s and \'1\'s to \'0\'s. delta = [1 if char == \'0\' else -1 for char in binary_string] # Apply Kadane\'s algorithm to find the maximum sum subarray in delta max_gain = -float(\'inf\') current_gain = 0 for value in delta: current_gain += value if current_gain > max_gain: max_gain = current_gain if current_gain < 0: current_gain = 0 # If max_gain is less than 0, it means no beneficial subarray inversion can be done max_gain = max(max_gain, 0) # The maximum achievable number of 1\'s is original_ones + max_gain return original_ones + max_gain"},{"question":"Alice has an important meeting early in the morning and wants to get ready on time. Her schedule is jam-packed, so she needs to plan her morning routine carefully. Alice has n tasks to complete before leaving the house, and each task takes a certain amount of time. Additionally, she has some dependencies among these tasks, meaning some tasks need to be completed before others can start. Alice wants to know if she can complete all her tasks in at most L minutes. Can you help her determine this? Input The first line contains two integers n and L (1 ≤ n ≤ 500, 1 ≤ L ≤ 10^6) — the number of tasks and the maximum time available. The next n lines each describe a task. Each line contains three integers ti, di, and ki (1 ≤ ti, di ≤ 1000, 0 ≤ ki ≤ n) — the time required to complete the task, the task\'s dependency identifier, and the number of tasks this task depends on. If a task has dependencies, the following ki integers indicate the task numbers it depends on. Output Print \\"YES\\" (without quotes) if Alice can complete all tasks in at most L minutes. Otherwise, print \\"NO\\". Example Input 4 10 3 0 0 2 1 0 4 1 1 3 1 2 2 1 3 Output YES Input 3 4 1 0 0 2 1 1 1 3 2 1 2 Output NO Note In the first sample case, Alice can complete all tasks within 10 minutes. Tasks can be completed in the order: Task 3 → Task 1 → Task 2 → Task 4. In the second sample case, there isn\'t enough time to complete all tasks, making the answer \\"NO\\".","solution":"import collections def can_complete_tasks(n, L, tasks): Determines if all tasks can be completed within L minutes considering dependencies. :param n: Number of tasks :param L: Maximum time available :param tasks: List of task details, where each task is a tuple (ti, di, ki, dependencies) :return: \'YES\' if tasks can be completed within L minutes, otherwise \'NO\' graph = collections.defaultdict(list) in_degree = [0] * (n + 1) task_time = [0] * (n + 1) for index, task in enumerate(tasks): ti, di, ki = task[0:3] dependencies = task[3:] task_time[di] = ti for dependency in dependencies: graph[dependency].append(di) in_degree[di] += 1 # Topological Sort queue = collections.deque() total_time = 0 topo_order = [] for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) while queue: current = queue.popleft() topo_order.append(current) total_time += task_time[current] if total_time > L: return \\"NO\\" for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(topo_order) != n: return \\"NO\\" return \\"YES\\""},{"question":"A company has a policy for giving employees bonuses based on their years of service. The bonus policy works as follows: - If an employee has worked for 0 to 2 years, they receive a bonus of 100. - If an employee has worked for more than 2 years but up to 5 years, they receive a bonus of 200 plus an extra 50 for each year of service over 2 years. - If an employee has worked for more than 5 years, they receive a bonus of 400 plus an extra 100 for each year of service over 5 years. Write a function that calculates the bonus given the number of years an employee has worked. Examples: ```python calculate_bonus(1) # 100 calculate_bonus(3) # 250 calculate_bonus(6) # 500 calculate_bonus(10) # 900 ``` Notes: - The input will be a non-negative integer representing the number of years an employee has worked.","solution":"def calculate_bonus(years_of_service): Calculate the bonus based on the years of service. Parameters: years_of_service (int): The number of years an employee has worked. Returns: int: The calculated bonus. if years_of_service <= 2: return 100 elif 2 < years_of_service <= 5: return 200 + 50 * (years_of_service - 2) else: return 400 + 100 * (years_of_service - 5)"},{"question":"You are invited to a coding competition where one of the challenges involves finding lucky numbers in a given range. A lucky number is defined as a number that is a multiple of 3 or contains the digit \'3\' at least once. Write a code that takes two integers, `start` and `end`, and returns a list of all lucky numbers between `start` and `end` (inclusive). Note: - `start` and `end` are integers such that `start` <= `end`. - Your code must handle the range efficiently for larger inputs within reasonable limits.","solution":"def is_lucky_number(num): Check if a number is a lucky number. A lucky number is either a multiple of 3 or contains the digit \'3\'. return num % 3 == 0 or \'3\' in str(num) def lucky_numbers_in_range(start, end): Returns a list of all lucky numbers between `start` and `end` (inclusive). A lucky number is defined as a number that is a multiple of 3 or contains the digit \'3\'. return [num for num in range(start, end + 1) if is_lucky_number(num)]"},{"question":"Create a function that simulates the spinning of a slot machine and determine if the user has won. A slot machine has three reels and each reel can land on any of the following symbols: \'cherry\', \'lemon\', \'orange\', \'plum\', \'bell\', \'bar\'. The user wins based on the following rules: - Three \'cherry\' symbols: 50 points - Three \'bell\' symbols: 30 points - Three \'plum\' symbols: 20 points - Three \'orange\' symbols: 10 points - Three \'lemon\' symbols: 5 points - Any other combination: 0 points Write a function `slot_machine_result(reel1, reel2, reel3)` that takes three parameters representing the symbols that landed on each of the three reels. The function should return the point value according to the rules above. Example: ```python slot_machine_result(\'cherry\', \'cherry\', \'cherry\') -> 50 slot_machine_result(\'bell\', \'bell\', \'bell\') -> 30 slot_machine_result(\'cherry\', \'bell\', \'cherry\') -> 0 slot_machine_result(\'plum\', \'plum\', \'plum\') -> 20 ```","solution":"def slot_machine_result(reel1, reel2, reel3): Determines the result of a slot machine spin. Parameters: reel1 (str): The symbol on reel 1. reel2 (str): The symbol on reel 2. reel3 (str): The symbol on reel 3. Returns: int: The point value according to the rules. if reel1 == reel2 == reel3: if reel1 == \'cherry\': return 50 elif reel1 == \'bell\': return 30 elif reel1 == \'plum\': return 20 elif reel1 == \'orange\': return 10 elif reel1 == \'lemon\': return 5 return 0"},{"question":"Vanya is participating in a programming contest. He has just completed solving a set of problems and recorded the time taken to solve each problem in minutes. He wants to analyze his performance by determining how many problems he solved faster than the average time. Input: The first line contains an integer n (1 ≤ n ≤ 100) — the number of problems Vanya solved. The second line contains n integers separated by spaces, where each integer ti (1 ≤ ti ≤ 1000) represents the time in minutes Vanya took to solve the i-th problem. Output: Output a single integer — the number of problems Vanya solved faster than the average time. Examples Input: 5 10 20 30 40 50 Output: 2 Input: 4 15 22 5 10 Output: 2","solution":"def count_problems_faster_than_average(n, times): Given the number of problems and the list of times taken to solve each problem, returns the number of problems solved faster than the average time. average_time = sum(times) / n return sum(1 for time in times if time < average_time) # Example usage: # n = 5 # times = [10, 20, 30, 40, 50] # result = count_problems_faster_than_average(n, times) # print(result) # Output: 2"},{"question":"A company organizes a marathon race for its employees. Each employee completes the marathon with a different recorded time. The organization wants to identify the employee who finishes first, second, and third, to award them with gold, silver, and bronze medals respectively. You are tasked with finding out the names of these top three finishers based on their recorded times. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of employees. - The following N lines each contain a string E_i and an integer T_i separated by a space, denoting the name of the employee and their recorded time in seconds, respectively. -----Output----- For each test case, print three lines. The first line contains the name of the employee who finished first (Gold), the second line contains the name of the employee who finished second (Silver), and the third line contains the name of the employee who finished third (Bronze). -----Constraints----- - 1 leq T leq 100 - 3 leq N leq 10^5 - 1 leq |E_i| leq 20 for each valid i (( |E_i| is the length of the string E_i) - 1 leq T_i leq 10^9 for each valid i - For each valid i, E_i contains only uppercase and lowercase English alphabets - Sum of N over all the test cases is leq 10^6 -----Sample Input----- 2 4 Alice 320 Bob 300 Charlie 310 David 330 3 Megan 245 Jon 250 Samantha 240 -----Sample Output----- Bob Charlie Alice Samantha Megan Jon","solution":"def find_top_three_finishers(test_cases): results = [] for test_case in test_cases: employees = sorted(test_case, key=lambda x: x[1]) results.extend([employee[0] for employee in employees[:3]]) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') number_of_tests = int(lines[0]) index = 1 test_cases = [] for _ in range(number_of_tests): N = int(lines[index]) index += 1 test_case = [] for _ in range(N): name, time = lines[index].split() test_case.append((name, int(time))) index += 1 test_cases.append(test_case) return test_cases def prepare_output(results): return \\"n\\".join(results) # To use the functions: # input_str = \\"2n4nAlice 320nBob 300nCharlie 310nDavid 330n3nMegan 245nJon 250nSamantha 240\\" # test_cases = parse_input(input_str) # results = find_top_three_finishers(test_cases) # output_str = prepare_output(results) # print(output_str)"},{"question":"Given a string of parentheses, your task is to determine the minimum number of parentheses needed to be added to the string in order for it to be balanced. A balanced string of parentheses is one in which every opening parenthesis has a corresponding closing parenthesis. Input Format - The first line contains an integer t, the number of test cases. - Each of the next t lines contains a string s consisting of only \'(\' and \')\'. Output Format For each test case, print a single integer representing the minimum number of parentheses needed to make the string balanced. Constraints - 1 leq t leq 100 - 1 leq |s| leq 10^5 Sample Input 4 () ( ) (()))(( Sample Output 0 1 1 3 Explanation - In the first case, the string \\"()\\" is already balanced, so no additional parentheses are needed. - In the second case, the string \\"(\\" requires one closing parenthesis to be balanced. - In the third case, the string \\")\\" requires one opening parenthesis to be balanced. - In the fourth case, the string \\"(()))((\\" requires three additional parentheses to be balanced. Two opening and one closing parenthesis need to be added.","solution":"def min_add_to_make_valid_parentheses(t, strings): Returns the minimum number of parentheses needed to make each string balanced. Parameters: t : int : Number of test cases strings : list : List of strings containing parentheses Returns: list : List of integers representing the minimum number of parentheses needed to balance each string result = [] for s in strings: left_open = 0 unbalanced_close = 0 for char in s: if char == \'(\': left_open += 1 elif char == \')\': if left_open > 0: left_open -= 1 else: unbalanced_close += 1 result.append(left_open + unbalanced_close) return result"},{"question":"Write a function that counts the number of vowels in a given string. Input The input will be a single line containing a string of 1 to 100 characters. Each character of the string has an ASCII code between 32 (space) and 126 (tilde), inclusive. Output Output the number of vowels in the given string. Vowels are \'a\', \'e\', \'i\', \'o\', \'u\' (both lowercase and uppercase). Examples Input Hello, World! Output 3 Input Python Programming Output 4","solution":"def count_vowels(s): Counts the number of vowels in the given string. Vowels are \'a\', \'e\', \'i\', \'o\', \'u\' (both lowercase and uppercase). Parameters: s (str): The input string Returns: int: The number of vowels in the string vowels = set(\'aeiouAEIOU\') return sum(1 for char in s if char in vowels)"},{"question":"A city’s rectangular grid is represented by an MxN matrix where each cell is either land (denoted by 1) or water (denoted by 0). You need to determine the perimeter of the largest island in this grid. An island is defined as a group of adjacent land cells connected vertically or horizontally. Write a function `largest_island_perimeter` that takes the grid as input and returns the perimeter of the largest island. Note: - The input will be a 2D list of integers representing the grid. - There will be at least one cell of land in the grid. Function Signature: ```python def largest_island_perimeter(grid: List[List[int]]) -> int: ``` Input - A 2D list grid of size MxN (1 ≤ M, N ≤ 100), where each element is either 0 (water) or 1 (land). Output - Return a single integer representing the perimeter of the largest island. Example ```python input_grid = [ [0, 1, 0, 0, 0], [1, 1, 1, 0, 0], [0, 0, 1, 0, 1], [0, 1, 0, 1, 1], ] print(largest_island_perimeter(input_grid)) # Output: 12 ``` Explanation - The largest island is composed of the land cells in positions `(0, 1), (1, 0), (1, 1), (1, 2), (2, 2)`. - The perimeter of this island is 12 (each water cell or grid boundary adjacent to a land cell adds to the perimeter). Note: You may assume all cells outside the grid boundary are water (0).","solution":"from typing import List def largest_island_perimeter(grid: List[List[int]]) -> int: def calculate_perimeter(x: int, y: int) -> int: perimeter = 0 if x == 0 or grid[x-1][y] == 0: perimeter += 1 if y == 0 or grid[x][y-1] == 0: perimeter += 1 if x == len(grid) - 1 or grid[x+1][y] == 0: perimeter += 1 if y == len(grid[0]) - 1 or grid[x][y+1] == 0: perimeter += 1 return perimeter def dfs(x: int, y: int) -> int: if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0 or visited[x][y]: return 0 visited[x][y] = True return ( calculate_perimeter(x, y) + dfs(x-1, y) + dfs(x+1, y) + dfs(x, y-1) + dfs(x, y+1) ) max_perimeter = 0 visited = [[False] * len(grid[0]) for _ in range(len(grid))] for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1 and not visited[i][j]: max_perimeter = max(max_perimeter, dfs(i, j)) return max_perimeter"},{"question":"An orchardist has an orchard of apple trees arranged in an n x m grid. Each cell in the grid represents an apple tree, with a certain number of apples on it. Due to certain conditions, the apple trees lose apples over time, but some apple trees may receive a boost, recovering some apples. Given the current state of the orchard, you need to answer multiple queries. Each query provides a sub-grid within the orchard and asks for the maximum number of apples present on any single tree in that sub-grid. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 500), representing the dimensions of the orchard grid. The following n lines contain m integers each, representing the initial number of apples on each apple tree in the orchard. The next line contains a single integer q (1 ≤ q ≤ 10^5), representing the number of queries. Each of the following q lines contains four integers r1, c1, r2, and c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m), representing the boundaries of a sub-grid within the orchard. Output For each query, print a single integer — the maximum number of apples present on any single tree in the specified sub-grid. Example Input 4 5 3 1 2 5 4 0 3 1 8 9 6 7 2 1 0 4 3 9 0 2 3 1 1 3 3 2 2 4 5 1 2 4 4 Output 8 9 9 Note In the first query, the sub-grid from (1, 1) to (3, 3) has the following trees: 1 2 5 3 1 8 7 2 1 The maximum number of apples on any tree in this sub-grid is 8. In the second query, the sub-grid from (2, 2) to (4, 5) has the following trees: 3 1 8 6 7 2 4 3 9 2 0 2 The maximum number of apples on any tree in this sub-grid is 9. In the third query, the sub-grid from (1, 2) to (4, 4) has the following trees: 1 2 5 4 3 1 8 9 6 7 2 1 4 3 9 0 The maximum number of apples on any tree in this sub-grid is 9.","solution":"def find_max_apples(n, m, grid, queries): results = [] for r1, c1, r2, c2 in queries: max_apples = -1 for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): max_apples = max(max_apples, grid[i][j]) results.append(max_apples) return results"},{"question":"A delivery drone is tasked with delivering packages to a series of houses. The houses are arranged in a line, and the positions of the houses are given in a list of integers, where each integer represents the position of a house along the line. The drone starts at position 0 and can carry only one package at a time. The drone must return to position 0 before picking up the next package. Write a program to determine the minimum total distance the drone must travel to deliver packages to all the houses and return to position 0 after each delivery. Input The input is a single line containing a list of integers, where each integer represents the position of a house (1 ≤ position of a house ≤ 10000). The list contains at least one and at most 1000 positions. Output Print on one line the minimum total distance the drone must travel. Examples Input [2, 6, 8] Output 32 Input [1, 3, 5, 7] Output 32","solution":"def minimum_total_distance(house_positions): Returns the minimum total distance the drone must travel to deliver packages to all the houses and return to position 0 after each delivery. Parameters: house_positions (list): a list of integers representing the positions of houses along a line. Returns: int: the minimum total distance the drone must travel. total_distance = 0 for position in house_positions: # Travel to the house and back to position 0 total_distance += 2 * position return total_distance"},{"question":"You are given an array of integers `arr` of length `n`. Rearrange the elements of the array so that all even numbers appear before all odd numbers. The order of the even and odd numbers within their respective groups does not matter. -----Constraints----- - Each element in the array is an integer. - 1 ≤ n ≤ 10^5 - The array can include positive and negative integers as well as zero. -----Input----- The input is given from Standard Input in the following format: ``` n arr[1] arr[2] ... arr[n] ``` -----Output----- Print the array after rearranging the elements so that all even numbers appear before all odd numbers. -----Sample Input----- 8 5 12 -4 7 0 11 -2 8 -----Sample Output----- 12 -4 0 -2 8 5 7 11 In this sample, one possible output is `12 -4 0 -2 8` for the even numbers and `5 7 11` for the odd numbers; any order within these groups is correct.","solution":"def rearrange_even_before_odd(n, arr): Rearranges the array so that all even numbers appear before all odd numbers. Parameters: n (int): The number of elements in the array. arr (List[int]): The array of integers. Returns: List[int]: The rearranged array. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"The local chess club holds a yearly round-robin tournament where each participant plays one game with every other participant. However, due to certain scheduling constraints, there are specific pairings that cannot be scheduled. Given a list of these restricted pairings, determine how many games will actually be played. Example n = 4, restricted = [(1, 2), (2, 3)] There are 4 participants, {p1}, p2, p3, and p4. Typically, there would be 6 games (one for each unique pairing from the 4 participants). However, games between {p1} & {p2} and {p2} & {p3} are restricted, and thus cannot be played. Therefore, there will be 4 games actually played. Function Description Complete the actual_games function in the editor below. actual_games has the following parameters: int n: the number of participants list of tuples restricted: a list of restricted pairings Returns int: the number of games that will actually be played Input Format The first line contains the number of test cases t. Each of the following t sets of lines contains: - an integer n - an integer m (the number of restricted pairings) - m lines with two integers each indicating a restricted pairing Constraints 1 leq t leq 100 2 leq n leq 100 0 leq m leq frac{n(n-1)}{2} Sample Input 2 4 2 1 2 2 3 3 1 1 2 Sample Output 4 2 Explanation Case 1: There are 4 participants with 2 restricted games. Normally, there would be 6 games (4 choose 2). Removing the 2 restricted leaves 4 playable games. *(p1 vs p3, p1 vs p4, p2 vs p4, p3 vs p4)* Case 2: There are 3 participants with 1 restricted game. Normally, there would be 3 games. Removing the 1 restricted game leaves 2 playable games. *(p1 vs p3, p2 vs p3)*","solution":"def actual_games(n, restricted): Returns the number of games that will actually be played in the tournament. Parameters: n (int): Number of participants restricted (list of tuples): List of restricted pairings Returns: int: Number of games that will actually be played # Total possible games in a round robin tournament with n participants total_games = n * (n - 1) // 2 # Number of restricted games restricted_games = len(restricted) # Actual games that will be played actual_games_played = total_games - restricted_games return actual_games_played"},{"question":"Adam and Bella are working on organizing shipments for a supply chain. They have a list of N items that need to be packed into boxes, and each box has a weight limit. Adam and Bella want to distribute the items into the minimum number of boxes required without exceeding the weight limit in any box. Each item must be placed in one box, and they cannot split items. Given the weight limit of each box and the weights of the items, determine the minimum number of boxes needed. -----Input----- The first line of input contains the integer N, the number of items, and the integer W, the weight limit of each box. The following line contains N space separated integers, where the i’th integer denotes the weight of the i’th item. All numbers in the input belong to the interval [1, 1000]. -----Output----- The first and only line of output must contain the minimum number of boxes required to pack all items without exceeding the weight limit. Clarification of the first example: One optimal way to distribute the items is to place the first two items in one box and the third item in another box. Clarification of the second example: One optimal way to distribute the items is to place each item in its own box, as each item individually exceeds half of the weight limit. -----Examples----- Sample Input 1: 3 5 2 3 4 Sample Output 1: 2 Sample Input 2: 4 4 1 3 2 2 Sample Output 2: 2","solution":"def min_boxes_required(N, W, weights): weights.sort(reverse=True) boxes = [] for weight in weights: placed = False for box in boxes: if sum(box) + weight <= W: box.append(weight) placed = True break if not placed: boxes.append([weight]) return len(boxes)"},{"question":"A cargo company needs to optimize the loading of containers onto their cargo ship. Each container has a specific weight, and the ship has a weight capacity limit that cannot be exceeded. The company\'s goal is to maximize the total weight of the containers on board without exceeding the weight capacity of the ship. You are to write a program to select the optimal combination of containers. Input The first line of the input contains two integers n and W, separated by a single space. n is the number of containers, and W is the maximum weight capacity of the ship. The second line contains n integers w1, w2, ..., wn separated by single spaces, where wi is the weight of the i-th container. The input limitations are: * 1 ≤ n ≤ 1000 * 1 ≤ W ≤ 10000 * 1 ≤ wi ≤ 1000 Output Print one integer — the maximum total weight of the containers that can be loaded onto the ship without exceeding its weight capacity. Example Input 4 10 3 5 7 2 Output 10 Note In the given example, the optimal combination of containers is the 4th and the 2nd container which sums up to a total weight of 2 + 5 = 7 (less than the maximum capacity of 10). However, a better combination is the 3rd and the 1st container which sums up to 7 + 3 = 10 (equal to the maximum capacity). Thus, the maximum total weight is 10.","solution":"def cargo_optimization(n, W, weights): This function receives the number of containers, the weight capacity of the ship, and a list containing the weights of the containers. It returns the maximum total weight of the containers that can be loaded onto the ship without exceeding its capacity. dp = [0] * (W + 1) for weight in weights: for j in range(W, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) return dp[W]"},{"question":"You are given a text sequence consisting of lowercase alphabetic characters representing a paragraph written without any spaces. Your task is to break the text into the original words by inserting spaces in appropriate positions. To aid you in this task, you are provided with a dictionary containing all the valid words. Your objective is to write a program that determines the minimum number of spaces needed to segment the input text sequence into valid words from the dictionary. If it is not possible to segment the text sequence into valid words, return -1. You can assume that all words in the dictionary are of lowercase letters and the text sequence is non-empty. ----- Input ----- The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the text sequence. The second line contains a text sequence of length n composed of lowercase alphabetic characters. The third line contains an integer m (1 ≤ m ≤ 10000) — the number of words in the dictionary. The next m lines each contain a word of the dictionary. ----- Output ----- Output the minimum number of spaces required to segment the text sequence into valid words from the dictionary. If it is not possible, print -1. ----- Examples ----- Input 12 applepenapple 4 apple pen penapple applepen Output 1 Input 7 leetcode 3 leet code pie Output 1","solution":"def min_spaces(text, dictionary): Determines the minimum number of spaces needed to segment the input text into valid words from the dictionary. Returns -1 if it is not possible. n = len(text) word_set = set(dictionary) dp = [float(\'inf\')] * (n + 1) dp[0] = 0 # base case: no space needed for an empty string for i in range(1, n + 1): for j in range(i): if text[j:i] in word_set: dp[i] = min(dp[i], dp[j] + 1) return dp[n] - 1 if dp[n] != float(\'inf\') else -1 def main(): n = int(input().strip()) text = input().strip() m = int(input().strip()) dictionary = [input().strip() for _ in range(m)] result = min_spaces(text, dictionary) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Given a rectangular grid of integers, count the number of local maximums in the grid. A cell (i, j) in the grid is considered a local maximum if its value is strictly greater than the values of all its horizontally and vertically adjacent cells. Diagonally adjacent cells are not considered. -----Input----- Each input will consist of a single test case formatted as follows: - The first line contains two integers m and n (1 le m, n le 1000), representing the number of rows and columns in the grid. - The next m lines each contain n integers, separated by spaces, representing the values in the grid. -----Output----- Output a single integer which is the number of local maximums in the grid. -----Examples----- Sample Input 1: 3 3 1 2 1 2 3 2 1 2 1 Sample Output 1: 1 Sample Input 2: 3 2 4 5 2 3 6 1 Sample Output 2: 2","solution":"def count_local_maximums(grid): rows = len(grid) cols = len(grid[0]) count = 0 for i in range(rows): for j in range(cols): is_local_max = True if i > 0 and grid[i][j] <= grid[i-1][j]: is_local_max = False if i < rows - 1 and grid[i][j] <= grid[i+1][j]: is_local_max = False if j > 0 and grid[i][j] <= grid[i][j-1]: is_local_max = False if j < cols - 1 and grid[i][j] <= grid[i][j+1]: is_local_max = False if is_local_max: count += 1 return count"},{"question":"Valid Parentheses Sequence Task Write a function that determines if the parentheses in a given string are properly balanced. A string containing just the characters \'(\', \')\', \'[\', \']\', \'{\', and \'}\' is passed as input. The function should return `true` if the input string is valid, and `false` if it is not. The format A function taking a single string and returning a boolean indicating validity. ``function isValidParentheses(s){ return true || false }`` Examples isValidParentheses(\\"()\\") --> true A single pair of parentheses is balanced. ---------------------------------------------------------- isValidParentheses(\\"()[]{}\\") --> true Multiple pairs of different types of parentheses are balanced. ---------------------------------------------------------- isValidParentheses(\\"(]\\") --> false Parentheses of different types are incorrectly nested. ---------------------------------------------------------- isValidParentheses(\\"([)]\\") --> false Parentheses are incorrectly nested. ---------------------------------------------------------- isValidParentheses(\\"{[]}\\") --> true Parentheses are correctly nested and balanced. Note: Every opening parenthesis must have a corresponding closing parenthesis in the correct order.","solution":"def isValidParentheses(s): Determines if the parentheses in the input string are properly balanced. Args: s (str): The input string containing only \'(\', \')\', \'[\', \']\', \'{\', \'}\'. Returns: bool: True if the parentheses are balanced, False otherwise. stack = [] pairing = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in pairing.values(): stack.append(char) elif char in pairing.keys(): if not stack or stack.pop() != pairing[char]: return False return not stack"},{"question":"Given a string, replace each character by the next character in the English alphabet. Replace \'z\' by \'a\' and \'Z\' by \'A\'. Non-alphabet characters should remain unchanged. Example 1: Input: S = \\"hello world\\" Output: ifmmp xpsme Explanation: \'h\' becomes \'i\', \'e\' becomes \'f\', \'l\' becomes \'m\', \'o\' becomes \'p\', \'w\' becomes \'x\', \'r\' becomes \'s\', \'d\' becomes \'e\'. Spaces remain unchanged. Example 2: Input: S = \\"Zebra-485\\" Output: Afcsb-485 Explanation: \'Z\' becomes \'A\', \'e\' becomes \'f\', \'b\' becomes \'c\', \'r\' becomes \'s\', \'a\' becomes \'b\'. Non-alphabetic characters remain unchanged. Your Task: You don\'t need to read input or print anything. Your task is to complete the function shiftAlphabet() which takes a string S as input and returns the modified string. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^5","solution":"def shiftAlphabet(S): Given a string, replace each character by the next character in the English alphabet. Replace \'z\' by \'a\' and \'Z\' by \'A\'. Non-alphabet characters should remain unchanged. result = [] for ch in S: if \'a\' <= ch <= \'z\': if ch == \'z\': result.append(\'a\') else: result.append(chr(ord(ch) + 1)) elif \'A\' <= ch <= \'Z\': if ch == \'Z\': result.append(\'A\') else: result.append(chr(ord(ch) + 1)) else: result.append(ch) return \'\'.join(result)"},{"question":"You are given a grid with `m` rows and `n` columns. Each cell of this grid can either be `0` or `1`. A cell is considered \'connected\' to another cell if it is directly above, below, left, or right of it (no diagonal connections). A group of connected cells that are all `1` forms an island. Write a function to count the number of distinct islands in the given grid. The grid cells can either be `0` or `1`. If the grid is entirely empty (all cells are `0`), there are no islands. -----Input----- The function should take an argument: ```python def count_islands(grid: List[List[int]]) -> int: ``` - `grid`: a list of lists of integers representing the grid (where each integer is either `0` or `1`). The dimensions of the grid (m rows and n columns) will be such that (1 ≤ m, n ≤ 1000). -----Output----- The function should return a single integer which is the number of distinct islands. -----Example----- Input ``` grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 0, 0, 0] ] ``` Output ``` 3 ``` Input ``` grid = [ [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0] ] ``` Output ``` 0 ``` -----Note----- In the first example, there are three islands: 1. The group of `1`s at the top-left corner. 2. The group of `1`s at the middle-right. 3. The group of `1`s at the bottom-left corner.","solution":"from typing import List def count_islands(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) visited = [[False] * n for _ in range(m)] def dfs(x: int, y: int): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == 0 or visited[x][y]: return visited[x][y] = True dfs(x - 1, y) dfs(x + 1, y) dfs(x, y - 1) dfs(x, y + 1) island_count = 0 for i in range(m): for j in range(n): if grid[i][j] == 1 and not visited[i][j]: dfs(i, j) island_count += 1 return island_count"},{"question":"You are working at a logistics company that works with a fleet of drones to deliver packages. The delivery area is modeled as a grid of cells. Each cell in the grid can either be empty or contain an obstacle that the drone cannot fly through. The drone starts at a given cell and needs to deliver the package to a specified target cell. The drone can move up, down, left, or right, and it takes exactly 1 second to move to an adjacent cell. The drone cannot move diagonally or fly over obstacles. Write a function to calculate the shortest time (in seconds) it will take for the drone to reach the target from the starting cell. If it\'s impossible for the drone to reach the target, return -1. -----Input----- The first line contains two integers N and M, the number of rows and columns in the grid, respectively (1 leq N, M leq 1000). The second line contains four integers, X_ S, Y_ S, X_ T, and Y_ T, representing the coordinates of the starting cell (X_ S, Y_ S) and the target cell (X_ T, Y_ T) (0 leq X_ S, Y_ S, X_ T, Y_ T < N, M). The following N lines each contain M characters, representing the grid. An empty cell is represented by \\".\\", and an obstacle is represented by \\"#\\". -----Output----- Write one line with an integer, the minimum time (in seconds) needed for the drone to reach the target cell. If it is impossible to reach the target cell, output -1. -----Examples----- Sample Input 1: 5 5 0 0 4 4 ..... ..#.. ..#.. ..#.. ..... Sample Output 1: 8 Sample Input 2: 3 3 0 0 2 2 .#. .#. .#. Sample Output 2: -1 Sample Input 3: 2 2 0 0 1 1 .. .. Sample Output 3: 2","solution":"from collections import deque def shortest_delivery_time(N, M, XS, YS, XT, YT, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(XS, YS, 0)]) # (x, y, time) visited = set([(XS, YS)]) while queue: x, y, time = queue.popleft() if (x, y) == (XT, YT): return time for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, time + 1)) return -1"},{"question":"Given an array of n integers, find the maximum absolute difference between the sum of the elements at even indices and the sum of the elements at odd indices. For example, for an array [a0, a1, a2, a3,..., an-1] find the absolute difference between (a0 + a2 + a4 + ... + a{n-1}) and (a1 + a3 + a5 + ... + a{n-2}). Input Format The first line of the input contains t, the number of test cases. Each of the next t lines contains an integer n, the size of the array, followed by n space-separated integers representing the array. Output Format For each testcase, output the maximum absolute difference in a separate line. Constraints 1 ≤ t ≤ 10^3 1 ≤ n ≤ 10^5 -10^9 ≤ array elements ≤ 10^9 SAMPLE INPUT 2 5 1 2 3 4 5 4 -1 -2 -3 -4 SAMPLE OUTPUT 3 2 Explanation Test case 1: Sum of elements at even indices: 1 + 3 + 5 = 9 Sum of elements at odd indices: 2 + 4 = 6 Absolute difference = |9 - 6| = 3 Test case 2: Sum of elements at even indices: -1 + -3 = -4 Sum of elements at odd indices: -2 + -4 = -6 Absolute difference = |-4 - (-6)| = 2","solution":"def max_absolute_difference(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] even_sum = sum(arr[j] for j in range(0, n, 2)) odd_sum = sum(arr[j] for j in range(1, n, 2)) results.append(abs(even_sum - odd_sum)) return results"},{"question":"Given a grid of size M x N, where each cell has a value representing the elevation at that point, you are standing in a cell at coordinates (x, y) and want to visit every cell in the grid exactly once, either moving up, down, left or right to a neighboring cell. The difference in elevation between adjacent cells you visit must not exceed E. Your task is to determine if it is possible to visit all cells on the grid under these conditions. -----Constraints----- - 1 ≤ M, N ≤ 10 - 0 ≤ x < M - 0 ≤ y < N - 0 ≤ elevation in each cell ≤ 1000 - 0 ≤ E ≤ 1000 -----Input----- Input is given from Standard Input in the following format: M N E x y elevation_1_1 elevation_1_2 ... elevation_1_N : elevation_M_1 elevation_M_2 ... elevation_M_N -----Output----- Print \\"YES\\" if it is possible to visit all cells on the grid exactly once under the given conditions, otherwise print \\"NO\\". -----Sample Input----- 3 3 2 1 1 1 2 3 4 5 6 7 8 9 -----Sample Output----- NO Explanation: In this case, it is not possible to visit every cell starting from (1, 1) and moving to adjacent cells where the elevation difference does not exceed 2.","solution":"def can_visit_all_cells(M, N, E, x, y, elevations): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(nx, ny, curr_x, curr_y): if 0 <= nx < M and 0 <= ny < N: if abs(elevations[nx][ny] - elevations[curr_x][curr_y]) <= E: return True return False def dfs(cx, cy, count, visited): if count == M * N: return True for dx, dy in directions: nx, ny = cx + dx, cy + dy if is_valid(nx, ny, cx, cy) and not visited[nx][ny]: visited[nx][ny] = True if dfs(nx, ny, count + 1, visited): return True visited[nx][ny] = False return False visited = [[False for _ in range(N)] for _ in range(M)] visited[x][y] = True return \\"YES\\" if dfs(x, y, 1, visited) else \\"NO\\" # Input processing function def process_input(input_str): input_lines = input_str.strip().split(\'n\') M, N, E = map(int, input_lines[0].split()) x, y = map(int, input_lines[1].split()) elevations = [list(map(int, line.split())) for line in input_lines[2:]] return M, N, E, x, y, elevations"},{"question":"A wealthy businessman is fascinated by a special set of numbers called \\"Happy Numbers.\\" A happy number is defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number either equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. Those numbers for which this process ends in 1 are happy numbers. The businessman decides to challenge you to write a program that can determine if certain numbers are happy or not. He provides different sets of numbers for evaluation. ------ Input ------ The first line contains an integer Q, the number of queries. Each of the next Q lines contains a single integer N, which needs to be checked if it is a happy number. 1 ≤ Q ≤ 1000 1 ≤ N ≤ 10^9 ------ Output ------ For each query of the Q queries, output \\"Happy\\" if the number is a happy number, otherwise output \\"Sad\\". ------ Example ------ Input: 4 19 2 7 20 Output: Happy Sad Happy Sad Explanation: 1. For 19, the sequence is: 1^2 + 9^2 = 1 + 81 = 82, 8^2 + 2^2 = 64 + 4 = 68, 6^2 + 8^2 = 36 + 64 = 100, 1^2 + 0^2 + 0^2 = 1, thus happy. 2. For 2, the sequence is: 2^2 = 4, 4^2 = 16, 1^2 + 6^2 = 1 + 36 = 37, 3^2 + 7^2 = 9 + 49 = 58, 5^2 + 8^2 = 25 + 64 = 89, 8^2 + 9^2 = 64 + 81 = 145, and this eventually cycles without reaching 1. 3. For 7, the sequence is: 7^2 = 49, 4^2 + 9^2 = 16 + 81 = 97, 9^2 + 7^2 = 81 + 49 = 130, 1^2 + 3^2 + 0^2 = 1 + 9 + 0 = 10, 1^2 + 0^2 = 1, thus happy. 4. For 20, the sequence is: 2^2 + 0^2 = 4, and this will continue to cycle without reaching 1.","solution":"def is_happy_number(n): Determine if n is a happy number. def sum_of_squares(x): return sum(int(digit) ** 2 for digit in str(x)) visited = set() while n != 1 and n not in visited: visited.add(n) n = sum_of_squares(n) return n == 1 def process_queries(Q, queries): Process each query to determine if the number is happy or sad. results = [] for n in queries: if is_happy_number(n): results.append(\\"Happy\\") else: results.append(\\"Sad\\") return results"},{"question":"You are given a string `s` consisting of lowercase alphabets and you need to perform several operations on it. Each operation is of one of the following types: 1. `1 x` - Append the character `x` to the end of the string. 2. `2 l r c` - Count the occurrence of the character `c` in the substring from the `l`-th to the `r`-th position (1-based inclusive). Your task is to process the given operations and output the results of all operations of type 2. Input The first line of the input contains a single integer `q` (1 ≤ q ≤ 2·10^5) - the number of operations. The next `q` lines describe the operations, each operation being one of the following types: - `1 x` - Appending character `x` (\'a\'-\'z\'). - `2 l r c` - Counting character occurrences with 1 ≤ l ≤ r ≤ current length of string and `c` being a lowercase alphabet. Output For each operation of type `2 l r c`, output the occurrence count of character `c` in the specified substring. Examples Input 7 1 a 1 b 1 a 2 1 3 a 1 c 2 1 4 b 1 a Output 2 1 Input 5 1 x 1 y 2 1 2 x 1 z 2 1 3 y Output 1 1","solution":"def perform_operations(q, operations): s = [] results = [] for operation in operations: op = operation.split() if op[0] == \'1\': # Appending the character x to the end of the string s.append(op[1]) elif op[0] == \'2\': # Counting occurrences l = int(op[1]) - 1 r = int(op[2]) c = op[3] count = s[l:r].count(c) results.append(count) return results"},{"question":"Emma is given a sequence of n positive integers a_1, a_2, ..., a_n. She wants to split this sequence into k subsequences so that each subsequence is strictly increasing. Help Emma find the smallest k for any given sequence. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Then the descriptions of the test cases follow. The first line of each test case contains a single integer n (1 ≤ n ≤ 1000) — the number of integers in the sequence. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the sequence of integers. Output For each test case print a single integer k — the smallest number of strictly increasing subsequences into which the sequence can be split. Example Input 3 5 1 2 3 4 5 4 4 3 2 1 6 1 3 2 4 5 6 Output 1 4 2 Note In the first test case, the sequence is already strictly increasing, so it can be split into 1 subsequence. In the second test case, each number is decreasing, so each must be in its own subsequence. In the third test case, the sequence can be split into two strictly increasing subsequences: [1, 2, 4, 5, 6] and [3].","solution":"def smallest_k_for_sequences(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] sequence = test_cases[i][1] k = 1 for j in range(1, n): if sequence[j] <= sequence[j - 1]: k += 1 results.append(k) return results # Function to format the test_cases from raw input def parse_input(raw_input): lines = raw_input.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) sequence = list(map(int, lines[index + 1].split())) test_cases.append((n, sequence)) index += 2 return t, test_cases"},{"question":"In a small village, people celebrate both weekdays and weekends with different activities. The activities of each person are recorded, and there are two main types of events that are of interest: * 1 wk - record that a person starts celebrating a weekday with a specific activity, where wk is a string representing the activity. * 2 we - record that a person starts celebrating a weekend with a specific activity, where we is a string representing the activity. * 3 idx - check the number of unique activities recorded up to that point for the person whose identifier is idx (1 ≤ idx ≤ 100000). Given a sequence of such events, determine the number of unique activities for a specified person each time a type \'3\' event occurs. Each person might celebrate multiple activities on both weekdays and weekends. Input The first line contains an integer q (1 ≤ q ≤ 100000) — the number of events. Each of the following q lines contains a description of one event: * 1 wk idx (1 ≤ len(wk) ≤ 10) — record a weekday activity wk for the person with identifier idx. * 2 we idx (1 ≤ len(we) ≤ 10) — record a weekend activity we for the person with identifier idx. * 3 idx — number of unique activities for the person with identifier idx. Output For each event of the third type print one integer — the number of unique activities of the person with identifier idx. Example Input 7 1 jogging 1 2 swimming 1 1 reading 2 3 1 2 football 2 3 2 3 1 Output 2 2 2 Note In the example, the first 3 events record two activities for person 1 (jogging and swimming) and one activity for person 2 (reading). Therefore, the result for the fourth event querying person 1 is 2. After that person 2 records another activity (football), so the result for the next query for person 2 is 2. Finally, the last query confirming the unique activities for person 1 yields 2 since the activities haven\'t changed.","solution":"def record_activities(events): Given the sequence of events, determine the number of unique activities for specified persons. Args: events: List of tuples where each tuple represents an event. The event can be of the form: (\'1\', \'activity\', idx) for recording a weekday activity, (\'2\', \'activity\', idx) for recording a weekend activity, (\'3\', idx) for querying the number of unique activities of a given person. Returns: List of integers corresponding to the results of the queries. from collections import defaultdict activities = defaultdict(set) results = [] for event in events: type_event = event[0] if type_event == \'1\': _, activity, idx = event activities[idx].add(activity) elif type_event == \'2\': _, activity, idx = event activities[idx].add(activity) elif type_event == \'3\': _, idx = event results.append(len(activities[idx])) return results"},{"question":"# Task You are given a string `s` consisting of lowercase English letters. You can perform the following operation as many times as you want: choose any two adjacent distinct characters and replace them with the lexicographically greatest character among the two. Your task is to determine the lexicographically largest string that can be obtained after applying the operation any number of times. # Example For `s = \\"abac\\"`, the output should be `\\"cccc\\"`. Explanation: 1. Choose \'a\' and \'b\', replace with \'b\' => \\"bbac\\" 2. Choose \'b\' and \'a\', replace with \'b\' => \\"bbbc\\" 3. Choose \'b\' and \'c\', replace with \'c\' => \\"cccc\\" For `s = \\"zyx\\"`, the output should be `\\"zzz\\"`. Explanation: 1. Choose \'y\' and \'x\', replace with \'y\' => \\"zyy\\" 2. Choose \'z\' and \'y\', replace with \'z\' => \\"zzz\\" # Input/Output - `[input]` a string `s` A string of lowercase English letters. Constraints: `1 ≤ s.length ≤ 10000.` - `[output]` a string Lexicographically largest string that can be obtained.","solution":"def largest_lexicographical_string(s): Returns the lexicographically largest string that can be obtained after performing the operation any number of times. Parameters: s (str): Input string consisting of lowercase English letters. Returns: str: Lexicographically largest string. if not s: return s max_char = max(s) return max_char * len(s)"},{"question":"Given an integer array `arr` of size `n`, you need to perform a series of operations until the array becomes empty. In each operation, you should remove the largest element from the array. If there are multiple largest elements, remove only the first occurrence. After removing the element, append it to the result list. You need to find the final result list after all operations. Example 1: Input: arr = [4, 5, 3, 2, 5, 1] Output: [5, 5, 4, 3, 2, 1] Explanation: In 1st operation: The largest element is 5. Removed 5 from the array and appended to result list, arr = [4, 3, 2, 5, 1], result = [5]. In 2nd operation: The largest element is 5. Removed 5 from the array and appended to result list, arr = [4, 3, 2, 1], result = [5, 5]. In 3rd operation: The largest element is 4. Removed 4 from the array and appended to result list, arr = [3, 2, 1], result = [5, 5, 4]. In 4th operation: The largest element is 3. Removed 3 from the array and appended to result list, arr = [2, 1], result = [5, 5, 4, 3]. In 5th operation: The largest element is 2. Removed 2 from the array and appended to result list, arr = [1], result = [5, 5, 4, 3, 2]. In 6th operation: The largest element is 1. Removed 1 from the array and appended to result list, arr = [], result = [5, 5, 4, 3, 2, 1]. The array is now empty. Example 2: Input: arr = [10, 10, 9, 8, 8] Output: [10, 10, 9, 8, 8] Explanation: In 1st operation: The largest element is 10. Removed 10 from the array and appended to result list, arr = [10, 9, 8, 8], result = [10]. In 2nd operation: The largest element is 10. Removed 10 from the array and appended to result list, arr = [9, 8, 8], result = [10, 10]. In 3rd operation: The largest element is 9. Removed 9 from the array and appended to result list, arr = [8, 8], result = [10, 10, 9]. In 4th operation: The largest element is 8. Removed 8 from the array and appended to result list, arr = [8], result = [10, 10, 9, 8]. In 5th operation: The largest element is 8. Removed 8 from the array and appended to result list, arr = [], result = [10, 10, 9, 8, 8]. The array is now empty. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `removeLargest` which accepts an integer array `arr` and returns the result list. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n) Constraints: - 1 <= n <= 10^4 - 1 <= arr[i] <= 10^4","solution":"def removeLargest(arr): This function takes an integer array and performs a series of operations until the array becomes empty. In each operation, it removes the largest element from the array and appends it to the result list. Parameters: arr (list): The input array of integers. Returns: list: The result list after all operations. result = [] while arr: max_val = max(arr) arr.remove(max_val) result.append(max_val) return result"},{"question":"You are given a string S consisting of lowercase alphabets with length N. A substring is defined as a contiguous sequence of characters within a string. Consider the task of finding the longest substring where each character appears an even number of times. Write a function that returns the length of this substring. ------ Input Format ------ - The first line of the input contains an integer T - the number of test cases. The test cases then follow. - Each test case consists of a single line containing the string S. ------ Output Format ------ For each test case, output the length of the longest substring where each character appears an even number of times. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 ----- Sample Input 1 ------ 2 abba abcabc ----- Sample Output 1 ------ 4 6 ----- Explanation 1 ------ - Test case 1: - The entire string \\"abba\\" is the longest substring with all characters appearing an even number of times. Hence, the output is 4. - Test case 2: - The entire string \\"abcabc\\" has all characters \'a,\' \'b,\' and \'c\' each appearing twice. Hence, the output is 6.","solution":"def longest_even_occurrences_substring(S): Returns the length of the longest substring where each character appears an even number of times. from collections import defaultdict # Mapping from bitmask to the earliest index seen = {0: -1} bitmask = 0 max_len = 0 for i, char in enumerate(S): bitmask ^= 1 << (ord(char) - ord(\'a\')) if bitmask in seen: max_len = max(max_len, i - seen[bitmask]) else: seen[bitmask] = i return max_len"},{"question":"Many people in a distant land celebrate the \'Festival of Colors\' by performing a unique ritual with colored stones. Each stone has two properties - color and weight. They believe creating balance in color proportions while keeping the weight constrained will bring them good luck. The people have a set of `n` stones each identified by a color and weight. Their aim is to find two subsets of these stones such that: 1. Both subsets have the same total weight. 2. The two subsets have an identical color proportion, which means for every color, the number of stones of that color in one subset should be equal to the number of stones of the same color in the other subset. Write a program that determines if such two subsets can be found. Input The input consists of a single integer `n` (1 ≤ `n`≤ 20) representing the number of stones. Then, `n` lines follow, each containing: - A string `color` representing the color of the stone (1 ≤ |`color`| ≤ 10, only lowercase English letters). - An integer `weight` (1 ≤ `weight` ≤ 100), representing the weight of the stone. Output Output \\"YES\\" if two such subsets can be found; otherwise, output \\"NO\\". Example Input 4 red 10 blue 20 red 10 blue 20 Output YES Example Input 3 red 10 blue 20 green 30 Output NO","solution":"from collections import defaultdict from itertools import combinations def can_form_balanced_subsets(n, stones): total_weight = sum(weight for color, weight in stones) # If sum of weights is odd, we can never split it into two equal parts if total_weight % 2 != 0: return \\"NO\\" target_weight = total_weight // 2 def subset_sums(subset): color_count = defaultdict(int) total_weight = 0 for color, weight in subset: color_count[color] += 1 total_weight += weight return total_weight, color_count all_subsets = [] for r in range(1, n + 1): all_subsets.extend(combinations(stones, r)) subset_map = defaultdict(list) for subset in all_subsets: weight, color_count = subset_sums(subset) if weight == target_weight: subset_map[frozenset(color_count.items())].append(subset) for color_count, subsets in subset_map.items(): if len(subsets) > 1: return \\"YES\\" return \\"NO\\""},{"question":"Blake wants to optimize the company\'s budget. He receives a list of planned expenses over the next n days. Since Blake has limited funds, he wants to find the maximum number of consecutive days during which the total expenses do not exceed a specified amount k. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 200 000, 1 ≤ k ≤ 10^9) — the number of days and the maximum allowable expense. The second line contains n integers e_i (1 ≤ e_i ≤ 10^9) — the planned expense for each day. -----Output----- Print a single integer — the maximum number of consecutive days during which the total expenses do not exceed k. -----Examples----- Input 5 10 1 2 3 4 5 Output 4 Input 6 15 5 1 2 3 4 5 Output 5 -----Note----- In the first sample, the maximum number of consecutive days with expenses not exceeding 10 is 4, happening from day 1 to day 4 with expenses [1, 2, 3, 4]. In the second sample, the maximum number of consecutive days with expenses not exceeding 15 is 5, happening from day 2 to day 6 with expenses [1, 2, 3, 4, 5].","solution":"def max_consecutive_days(n, k, expenses): max_days = 0 current_sum = 0 start = 0 for end in range(n): current_sum += expenses[end] while current_sum > k: current_sum -= expenses[start] start += 1 max_days = max(max_days, end - start + 1) return max_days"},{"question":"E-commerce Shipping Cost Minimizer You are working for an e-commerce company and your current task is to minimize shipping costs. The company\'s shipping cost is based on the weight of the packages being shipped. The total shipping cost can be calculated by summing up the individual shipping costs of each package. However, the company offers to combine certain packages to reduce the overall shipping cost. Each package has a weight and an individual shipping cost associated with it. Additionally, if you combine two packages, the shipping cost depends on the total weight of the combined package. For simplicity, assume that the combined weight is the sum of the weights of the two packages, and the combined shipping cost is given by a provided formula based on the combined weight. Your task is to determine the minimum total shipping cost to ship all packages by potentially combining them optimally. # Input The input consists of multiple datasets. The number of datasets is at most 50. Each dataset is provided in the following format: - n - w1 c1 - w2 c2 - ... - wn cn Where: - n is the number of packages. n is an integer between 1 and 100 inclusive. - wi (1 ≤ i ≤ n) is the weight of the i-th package. - ci (1 ≤ i ≤ n) is the shipping cost of the i-th package. The end of the input is indicated by a line containing a zero. # Output For each dataset, output in a line the minimum total shipping cost to ship all packages. # Sample Input ``` 3 10 20 20 30 10 10 4 5 5 10 8 15 12 20 18 0 ``` # Sample Output ``` 50 31 ``` # Explanation For the first dataset, it\'s optimal to combine the first and third packages (weight 10+10=20, cost 20+10=30), and then the resulting package with the second one (weight 20+20=40, cost 30+30=50). Thus, the minimum total shipping cost is 50. For the second dataset, it\'s optimal to combine the first two packages (weight 5+10=15, cost 5+8=13), then the resulting package with the third one (weight 15+15=30, cost 13+12=25), and finally with the fourth one (weight 30+20=50, cost 25+18=43). But only keeping the initial shipping cost results in lower cost total (5+8+12+18=31). Thus, the minimum total shipping cost is 31.","solution":"def minimized_shipping_cost(datasets): results = [] for dataset in datasets: total_cost = sum([c for w, c in dataset]) results.append(total_cost) return results def parse_input(input_string): datasets = [] lines = input_string.strip().split(\'n\') i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break dataset = [] for j in range(1, n + 1): weight, cost = map(int, lines[i + j].split()) dataset.append((weight, cost)) datasets.append(dataset) i += n + 1 return datasets"},{"question":"Task Given a square grid of characters representing a maze and two specified points, determine if there is a path from the start point to the end point. You can only move up, down, left, or right through cells that contain `\'S\'` (for safe). The start and end points will be represented with `\'S\'` in the grid. Implement a function has_path(maze, start, end) that checks if there is a path from `start` to `end`. # Input/Output - `[input]` 2D list of strings `maze` A grid of characters, where each character is either `\'S\'` (safe) or `\'*\'` (blocked). The grid size will be `n x n`. - `[input]` tuple `start` Coordinates of the start point in the format (row, column). - `[input]` tuple `end` Coordinates of the end point in the format (row, column). - `[output]` boolean Return `True` if there is a path from start to end, otherwise return `False`. # Example ```python maze = [ [\'S\', \'S\', \'S\', \'*\'], [\'*\', \'*\', \'S\', \'S\'], [\'S\', \'S\', \'*\', \'S\'], [\'S\', \'*\', \'S\', \'S\'] ] start = (0, 0) end = (3, 3) print(has_path(maze, start, end)) # Output: True ``` ```python maze = [ [\'S\', \'*\', \'S\', \'*\'], [\'*\', \'*\', \'S\', \'S\'], [\'S\', \'S\', \'*\', \'*\'], [\'S\', \'*\', \'S\', \'S\'] ] start = (0, 0) end = (3, 3) print(has_path(maze, start, end)) # Output: False ```","solution":"def has_path(maze, start, end): Determines if there is a path from the start to the end point in the maze. n = len(maze) visited = [[False for _ in range(n)] for _ in range(n)] def is_valid(x, y): return 0 <= x < n and 0 <= y < n and maze[x][y] == \'S\' and not visited[x][y] def dfs(x, y): if not is_valid(x, y): return False if (x, y) == end: return True visited[x][y] = True # Move in all four possible directions directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for dx, dy in directions: if dfs(x + dx, y + dy): return True return False return dfs(start[0], start[1])"},{"question":"The city of Graphopolis is known for its intricate network of roads that connect various junctions in the city. Every year, the citizens of Graphopolis organize a marathon that traverses through several of these junctions. The city’s roads and junctions form an undirected graph with n junctions and m roads. You are given the task of designing the marathon route. The route must start and end at the same junction (i.e., it must be a cycle), and it should include exactly k junctions. Additionally, the route must be a simple cycle, meaning no junction other than the starting/ending junction should be visited more than once. Given the graph and the integer k, determine if such a marathon route exists. If it exists, output any such route. If it does not exist, output -1. Input: The first line contains three integers n, m, and k (3 ≤ n ≤ 100, 1 ≤ m ≤ 200, 3 ≤ k ≤ n) — the number of junctions, the number of roads, and the number of junctions that must be included in the cycle. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting an undirected edge between the junctions u and v. There is at most one road between any pair of junctions. Output: If a valid cycle of length k exists, output k space-separated integers representing the junctions in the order they are visited in the cycle. If multiple cycles exist, any valid one will be accepted. If no such cycle exists, output -1. Examples Input 5 6 4 1 2 1 3 2 3 2 4 3 5 4 5 Output 1 2 3 1 Input 3 3 3 1 2 1 3 2 3 Output 1 2 3 1 Input 4 4 3 1 2 2 3 3 4 4 1 Output -1 Note In the first sample, the route 1 -> 2 -> 3 -> 1 forms a simple cycle with exactly 3 junctions. In the second sample, the entire triangle can be used as the cycle. In the third sample, no simple cycle of length 3 exists in the given graph.","solution":"from collections import defaultdict, deque from itertools import combinations def find_cycle(n, m, k, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Helper function: to perform DFS and find a simple cycle of length k def dfs(v, visited, parent, depth): visited.add(v) stack.append(v) if depth == k: if stack[-1] in graph[stack[0]]: return True, stack[:] + [stack[0]] visited.remove(v) stack.pop() return False, [] for neighbor in graph[v]: if neighbor not in visited: found, cycle = dfs(neighbor, visited, v, depth + 1) if found: return found, cycle visited.remove(v) stack.pop() return False, [] # Trying to find a simple cycle involving exactly k junctions for start in range(1, n + 1): visited = set() stack = [] found, cycle = dfs(start, visited, -1, 1) if found: return cycle return -1"},{"question":"Given an integer array nums, find the maximum difference between any two elements such that the larger element appears after the smaller element. Example: Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: The maximum difference is obtained by buying the stock at price 1 and selling at price 6. Hence, the maximum difference is 6 - 1 = 5.","solution":"def max_difference(nums): Returns the maximum difference between any two elements such that the larger element appears after the smaller element. if len(nums) < 2: return 0 min_price = nums[0] max_diff = 0 for price in nums[1:]: if price < min_price: min_price = price elif price - min_price > max_diff: max_diff = price - min_price return max_diff"},{"question":"A logistics company is in charge of delivering packages to M houses arranged in a straight line. Each truck driver is tasked with delivering packages to a continuous segment of houses. To optimize the delivery process, we need to figure out the minimum number of truck drivers required so that every house receives their packages, given the constraints that each driver can handle up to C consecutive houses. -----Constraints----- - All values in input are integers. - 1 leq M leq 100 - 1 leq C leq 100 -----Input----- Input is given from Standard Input in the following format: M C -----Output----- Print the minimum number of truck drivers required to ensure all houses from 1 to M receive their packages. -----Sample Input----- 10 3 -----Sample Output----- 4 We can achieve this by, for example, assigning drivers to the following segments: houses 1-3, houses 4-6, houses 7-9, and house 10.","solution":"def minimum_truck_drivers(M, C): Returns the minimum number of truck drivers required to deliver packages to M houses where each driver can handle up to C consecutive houses. # If we divide M houses into segments of at most C houses # The number of segments needed is the division of M by C rounded up # This can be calculated as (M + C - 1) // C using integer division return (M + C - 1) // C"},{"question":"Given a list of non-negative integers representing the heights of vertical lines drawn such that each pair of adjacent lines forms a container, the task is to find the maximum amount of water a container can store. Example 1: Input: heights = [1, 8, 6, 2, 5, 4, 8, 3, 7] Output: 49 Explanation: The container using heights[1] = 8 and heights[8] = 7 can store the most water, which is 7 * (8 - 1) = 49. Example 2: Input: heights = [1, 1] Output: 1 Explanation: The container using heights[0] = 1 and heights[1] = 1 can store 1 * (1 - 0) = 1. User Task: Complete the function maxArea() which takes a list of integers as input parameters, and returns the maximum amount of water the container can store. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 2 <= len(heights) <= 10^5 0 <= heights[i] <= 10^4","solution":"def maxArea(heights): Returns the maximum amount of water a container can store. :param heights: List[int] :return: int max_water = 0 left, right = 0, len(heights) - 1 while left < right: width = right - left height = min(heights[left], heights[right]) max_water = max(max_water, width * height) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"Alex loves tinkering with number sequences. He recently came across a sequence where each term depends on the previous one, defined by the following rules: For a given positive integer a_1 (starting term), the sequence is defined as: * a_{i+1} = a_i + text{sum of digits of } a_i, where i is the index of the term in the sequence. Alex wonders what the k-th term of this sequence would be, given the starting term a_1 and the index k. Help Alex by writing a program that calculates the k-th term of the sequence. -----Input----- The first line of the input contains two integers a_1 and k (1 le a_1 le 10^6 and 1 le k le 10^6) — the starting term of the sequence and the index of the term to find. -----Output----- Print the k-th term of the sequence. -----Examples----- Input 10 5 Output 25 Input 123 3 Output 141 -----Note----- In the first example, the sequence starts at 10. The terms are as follows: 1) 10 2) 10 + (1+0) = 11 3) 11 + (1+1) = 13 4) 13 + (1+3) = 17 5) 17 + (1+7) = 25 So the 5th term is 25. In the second example, the sequence starts at 123. The terms are as follows: 1) 123 2) 123 + (1+2+3) = 129 3) 129 + (1+2+9) = 141 So the 3rd term is 141.","solution":"def sum_of_digits(n): Returns the sum of the digits of the number n. return sum(int(digit) for digit in str(n)) def kth_term_of_sequence(a1, k): Returns the k-th term of the sequence where each term depends on the previous one as follows: a_{i+1} = a_i + sum of digits of a_i. Parameters: a1 (int): Starting term of the sequence (1 <= a1 <= 10^6) k (int): Index of the term to find (1 <= k <= 10^6) Returns: int: The k-th term of the sequence. term = a1 for _ in range(k - 1): term += sum_of_digits(term) return term"},{"question":"Write a function that simulates the following process: you have an infinite number of stacks, and you need to insert rem values (strings) on them while ensuring that no two adjacent stacks (either to the left or right) contain the same values. Each rem value can only be inserted into an existing stack, or if necessary, can create a new stack to facilitate the insertion. The goal is to minimize the number of stacks used. Implement the function `min_stacks(rem_values: List[str]) -> int` that takes a list of rem values and returns the minimum number of stacks needed. Example: ```python print(min_stacks([\\"a\\", \\"b\\", \\"a\\"])) # Output: 2 (one stack with \'a\', another with \'b\') print(min_stacks([\\"a\\", \\"a\\", \\"a\\", \\"b\\"])) # Output: 2 (stacks can be \'a\', \'a\', \'a\' and \'b\') print(min_stacks([\\"a\\", \\"b\\", \\"a\\", \\"c\\", \\"a\\", \\"b\\"])) # Output: 3 (possible stacks: \'a\', \'b\', \'c\') ``` Constraints: - The input list will have between 1 and 100 elements. - Each element in the list will be a non-empty string, consisting only of lowercase alphabets. The function should be optimized to handle lists with the maximum length in a reasonable time.","solution":"from typing import List from collections import defaultdict def min_stacks(rem_values: List[str]) -> int: if not rem_values: return 0 # Dictionary to keep track of the latest index we have seen each stack last_index = {} # Counter for the number of stacks needed stacks = [] for i, val in enumerate(rem_values): # Check and update the use of existing stacks to minimize the total count if val in last_index: prev_stack = last_index[val] stacks[prev_stack] += 1 else: # Create a new stack for the value `val` if needed stacks.append(1) last_index[val] = len(stacks) - 1 return len(stacks)"},{"question":"You\'ve been assigned to create the scoring function for a Coding Marathon Challenge! Scoring specifications: * 0 points - any incorrect answer * 5 points - correct answer that took more than 20 minutes * 10 points - correct answer that took between 10 and 20 minutes * 15 points - correct answer that took less than 10 minutes **If all answers are correct and each took less than 10 minutes, award 50 BONUS POINTS!** Write a function that accepts an array of tuples, where each tuple contains a boolean indicating the correctness of the answer (True for correct, False for incorrect) and an integer indicating the minutes taken to answer. The function should return a total score based on the above specifications. An empty array should return 0. Examples:","solution":"def calculate_score(results): Calculate the total score based on the given results. Parameters: results (list of tuples): A list where each tuple contains a boolean indicating the correctness of the answer (True for correct, False for incorrect) and an integer indicating the minutes taken to answer. Returns: int: The total score. total_score = 0 all_correct_under_10 = True for correct, minutes in results: if not correct: total_score += 0 all_correct_under_10 = False elif minutes < 10: total_score += 15 elif 10 <= minutes < 20: total_score += 10 else: total_score += 5 if correct and minutes >= 10: all_correct_under_10 = False if all_correct_under_10 and results: total_score += 50 return total_score"},{"question":"You are tasked with implementing a simplified version of a markdown parser. The parser should take a single line of markdown text and convert it to HTML. Your parser needs to recognize the following markdown elements: 1. Headers: - A line starting with one hash (`#`) converts to an `<h1>` tag. - A line starting with two hashes (``) converts to an `<h2>` tag. 2. Emphasis: - Text wrapped in a pair of asterisks (`**`) should be converted to `<strong>`. - Text wrapped in a pair of underscores (`__`) should also be converted to `<strong>`. Your task is to write a function that parses a given markdown string and converts it to HTML. Input The input will be a single line of text `markdown` containing between 1 and 100 characters, inclusive. The characters will be from printable ASCII characters (ASCII code 33 to 126). Output Output the corresponding HTML string. Examples Input # Hello World Output <h1>Hello World</h1> Input Markdown Parser Output <h2>Markdown Parser</h2> Input This is **bold** text and this is __also bold__ text. Output This is <strong>bold</strong> text and this is <strong>also bold</strong> text. Note - In the first example, the input markdown string is a header with one hash symbol, so it converts to an `<h1>` tag. - In the second example, the input markdown string is a header with two hash symbols, so it converts to an `<h2>` tag. - In the third example, parts of the input markdown string are wrapped in asterisks or underscores, converting them to `<strong>` tags.","solution":"def markdown_to_html(markdown): Converts a single line of markdown text to HTML. if markdown.startswith(\' \'): return f\\"<h2>{markdown[3:]}</h2>\\" elif markdown.startswith(\'# \'): return f\\"<h1>{markdown[2:]}</h1>\\" else: # Replace emphasis symbols markdown = markdown.replace(\'**\', \'<strong>\', 1).replace(\'**\', \'</strong>\', 1) markdown = markdown.replace(\'__\', \'<strong>\', 1).replace(\'__\', \'</strong>\', 1) return markdown"},{"question":"You are given a list of integers. Your task is to find all the unique quadruplets (a, b, c, d) in the list that satisfy a + b + c + d = target. -----Input----- - The first line of input will be a string of space-separated integers representing the list (2 leq text{length of list} leq 200). - The second line of input will be an integer target. -----Output----- Output a list of all unique quadruplets in ascending order (with respect to nested tuples) with array a[i] + a[j] + a[k] + a[l] = target such that 0 leq i < j < k < l leq length of list - 1. List each quadruplet as a comma-separated tuple. -----Examples----- Sample Input 1: 1 0 -1 0 -2 2 0 Sample Output 1: [(-1, 0, 0, 1), (-2, -1, 1, 2), (-2, 0, 0, 2)] Sample Input 2: 1 2 3 4 5 6 7 10 Sample Output 2: [(1, 2, 3, 4)]","solution":"def four_sum(nums, target): Returns a list of all unique quadruplets (a, b, c, d) such that a + b + c + d = target. nums.sort() result = [] length = len(nums) for i in range(length - 3): # Skip duplicate quadruplets if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, length - 2): # Skip duplicate quadruplets if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, length - 1 while left < right: current_sum = nums[i] + nums[j] + nums[left] + nums[right] if current_sum == target: result.append((nums[i], nums[j], nums[left], nums[right])) # Move past duplicates while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return result"},{"question":"Given a binary string, determine the minimum number of contiguous subsegments needed to flip such that the entire binary string contains only \'0\'s. Input format The input is given in the following format: ``` S ``` The first and only line contains a binary string `S` of length n (1 ≤ n ≤ 100,000). Output format Output a single integer representing the minimum number of contiguous subsegments required to flip to convert the entire binary string to \'0\'s. Input example 1 ``` 1101 ``` Output example 1 ``` 2 ``` Input example 2 ``` 000 ``` Output example 2 ``` 0 ``` Input example 3 ``` 101010 ``` Output example 3 ``` 3 ```","solution":"def min_flips_to_zero(binary_string): Given a binary string, determine the minimum number of contiguous subsegments needed to flip such that the entire binary string contains only \'0\'s. :param binary_string: A string consisting of \'0\'s and \'1\'s :return: An integer representing the minimum number of flips required count = 0 n = len(binary_string) # We count the number of contiguous blocks of \'1\'s i = 0 while i < n: if binary_string[i] == \'1\': count += 1 while i < n and binary_string[i] == \'1\': i += 1 i += 1 return count"},{"question":"A factory assembles products using several conveyor belts. Each conveyor belt consists of a sequence of connected units, and each unit can either be functioning (active) or malfunctioning (inactive). The factory manager wants to ensure that every two consecutive units on a single conveyor belt are in the following state: if one of them is malfunctioning, the other should be functioning. Given multiple configurations of conveyor belts, determine the minimum number of unit replacements required for each configuration so that the mentioned condition is satisfied for all units in each conveyor belt. -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N — the length of the conveyor belt. - The second line contains a string of N characters. Each character is either \'F\' (functioning) or \'M\' (malfunctioning). -----Output----- For each test case, print a single line containing one integer — the minimum number of replacements required. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - The sum of N over all test cases does not exceed 10^6 -----Example Input----- 3 4 FMFM 5 FFFFF 3 MFM -----Example Output----- 0 2 0 -----Explanation----- Example case 1: The sequence already satisfies the condition, hence no replacements are needed. Example case 2: To satisfy the condition, two replacements are needed. One possible way is to change the 2nd and 4th \'F\' to \'M\', resulting in the sequence \\"FMFMF\\". Example case 3: The sequence already satisfies the condition, hence no replacements are needed.","solution":"def min_replacements_required(T, test_cases): Determines the minimum number of replacements required for each test case. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains (N, conveyor_string) Returns: list: Minimum number of replacements required for each test case results = [] for case in test_cases: N, conveyor = case replacements = 0 for i in range(1, N): # Check for consecutive units with the same state if conveyor[i] == conveyor[i-1]: # Replace the current unit to ensure alternate state replacements += 1 # Toggle the current unit for further checking if conveyor[i] == \'F\': conveyor = conveyor[:i] + \'M\' + conveyor[i+1:] else: conveyor = conveyor[:i] + \'F\' + conveyor[i+1:] results.append(replacements) return results"},{"question":"You are given a grid with R rows and C columns. Each cell in the grid is either empty or contains a river. The frog starts at the top-left corner of the grid and wants to reach the bottom-right corner. The frog can only move right or down, and it can only move to empty cells. Determine the number of distinct paths the frog can take to reach the destination without stepping into any rivers. Constraints * All values in input are integers. * 2 leq R, C leq 1000 * The grid will only contain the characters \'.\' and \'*\' where \'.\' represents an empty cell and \'*\' represents a river. Input Input is given from Standard Input in the following format: R C grid Here, `grid` consists of R lines, each line containing C characters which represent the cells of the grid. Output Print the number of distinct paths from the top-left corner to the bottom-right corner. If there are no possible paths, print 0. Examples Input 3 3 ... .*. ... Output 2 Input 3 3 ... .*. *.* Output 0","solution":"def num_paths(R, C, grid): Returns the number of distinct paths from the top-left corner to the bottom-right corner of the grid, avoiding cells with rivers. if grid[0][0] == \'*\' or grid[R-1][C-1] == \'*\': return 0 dp = [[0] * C for _ in range(R)] dp[0][0] = 1 for r in range(R): for c in range(C): if grid[r][c] == \'*\': dp[r][c] = 0 else: if r > 0: dp[r][c] += dp[r-1][c] if c > 0: dp[r][c] += dp[r][c-1] return dp[R-1][C-1]"},{"question":"An online store allows customers to create wish lists of products they intend to buy in the future. Each customer can add up to m products to their wish list. Each product has a unique identifier and a price. The store offers a feature where customers can share their wish lists with friends who can potentially surprise them by buying certain items from the list. You are tasked with writing a function to determine the maximum total price of products that a friend can buy from the wish list, given that there\'s a limit to the number of products they can purchase. Given an integer m representing the maximum number of products a customer can add to the wish list, an array prices of size m where prices[i] represents the price of the i-th product in the wish list, and an integer p denoting the maximum number of products a friend can buy, write a function find_max_total(prices, m, p) that returns the maximum total price of products that can be bought under these constraints. # Example 1: Input: m = 5 prices = [15, 30, 10, 50, 45] p = 2 Output: 95 Explanation: The friend can buy the products with prices 50 and 45, giving a total of 95. # Example 2: Input: m = 3 prices = [20, 10, 5] p = 1 Output: 20 Explanation: The friend can buy only one product, so they will choose the one with price 20. # Example 3: Input: m = 4 prices = [12, 5, 8, 20] p = 3 Output: 40 Explanation: The friend can buy at most 3 products with the highest prices 20, 12, and 8. # Example 4: Input: m = 6 prices = [7, 1, 4, 3, 8, 2] p = 6 Output: 25 Explanation: The friend can buy all the products. Your Task: You do not need to read input or print anything. Complete the function find_max_total(prices, m, p) which takes the array prices, the size of the array m, and the integer p as input parameters and returns the maximum total price the friend can buy. # Expected Time Complexity: O(m log m) # Expected Auxiliary Space: O(1) # Constraints: - 1 ≤ m ≤ 10^5 - 1 ≤ prices[i] ≤ 10^4 - 1 ≤ p ≤ m","solution":"def find_max_total(prices, m, p): Returns the maximum total price of products that can be bought under the constraints. # Sort prices in descending order sorted_prices = sorted(prices, reverse=True) # Select the top \'p\' prices and sum them max_total = sum(sorted_prices[:p]) return max_total"},{"question":"Alice is participating in a series of games where she competes against Bob. The results of each game are recorded, and the result of the i-th game is represented by a pair (x_i, y_i), where x_i is the number of points Alice scored, and y_i is the number of points Bob scored in that game. Alice wants to know if there exists a sequence of games where she consistently scored more points than Bob in a particular pattern. Specifically, she wants to verify if there exists a contiguous subsequence of games where, in each game, her score was strictly greater than Bob\'s score. Determine whether such a subsequence exists for Alice. If it does, output \\"YES\\". Otherwise, output \\"NO\\". -----Constraints----- - 1 ≤ N ≤ 1000 - 0 ≤ x_i, y_i ≤ 1000 (1 ≤ i ≤ N) -----Input----- The input is given from Standard Input in the following format: N x_1 y_1 x_2 y_2 : x_N y_N -----Output----- Print \\"YES\\" if there exists a contiguous subsequence of games where Alice\'s score was strictly greater than Bob\'s score in each game, otherwise print \\"NO\\". -----Sample Input----- 5 10 8 15 20 25 24 30 29 50 50 -----Sample Output----- YES -----Explanation----- In the sample input, the contiguous subsequence (25 24, 30 29) is a sequence where Alice\'s score was strictly greater than Bob\'s score in each game. Hence, the output is \\"YES\\".","solution":"def check_subsequence(n, scores): Determine if there exists any contiguous subsequence where Alice\'s score is strictly greater than Bob\'s in each game. :param n: Number of games (int) :param scores: List of tuples, each containing the scores of Alice and Bob in each game (list of tuples) :return: \\"YES\\" if such a subsequence exists, otherwise \\"NO\\" (str) for i in range(n): if scores[i][0] > scores[i][1]: # if Alice\'s score is greater than Bob\'s in this game return \\"YES\\" return \\"NO\\""},{"question":"You are given two strings S and T of the same length N, containing only the characters \'A\', \'G\', \'C\', and \'T\'. You can perform the following operation any number of times: choose a character from S and a character from T that are the same, and remove them together. At most how many characters can be removed? -----Constraints----- - 1 leq N leq 10^5 - |S| = N - |T| = N - S and T only contain characters \'A\', \'G\', \'C\', \'T\'. -----Input----- Input is given from Standard Input in the following format: S T -----Output----- Print the maximum number of characters that can be removed. -----Sample Input----- ACGT TGCA -----Sample Output----- 4 By performing the operation as follows, all characters can be removed: - Remove \'A\' from S and T, both strings become \\"CGT\\" and \\"GCA\\". - Remove \'C\' from S and T, both strings become \\"GT\\" and \\"GA\\". - Remove \'G\' from S and T, both strings become \\"T\\" and \\"A\\". - Remove \'T\' from S and T, both strings become empty.","solution":"def max_removal(S, T): Given two strings S and T, calculate the maximum number of characters that can be removed if we can remove characters from both strings when they match. from collections import Counter count_S = Counter(S) count_T = Counter(T) removal_count = 0 for char in \'AGCT\': removal_count += min(count_S[char], count_T[char]) return removal_count"},{"question":"Evaluate the following set of structures that can be nested within one another, with the goal of fitting the most structures within each other. Each structure has a length (Li), width (Wi), and height (Hi). For a structure \'a\' to be nested inside another structure \'b\', structure \'a\' must be strictly smaller in all three dimensions than structure \'b\'. You may use each structure only once. Input: - The first line contains an integer N, the number of structures. - The following N lines each contain three integers, Li, Wi, and Hi, representing the length, width, and height of each structure. Output: - Output a single integer representing the maximum number of structures that can be nested within each other. # Constraints: - 1 ≤ N ≤ 1,000 - 1 ≤ Li, Wi, Hi ≤ 1,000,000 # Example Input: 4 5 4 3 6 5 4 5 1 2 4 3 2 Output: 3 Input: 3 1 2 3 2 3 4 3 4 5 Output: 3","solution":"def max_nested_structures(structures): Returns the maximum number of structures that can be nested within each other. # First, sort the structures by their dimensions structures.sort(key=lambda x: (x[0], x[1], x[2])) # Initialize LIS for dimensions comparison dp = [1] * len(structures) # Do a nested loop to check nesting possibilities for i in range(1, len(structures)): for j in range(0, i): if structures[j][0] < structures[i][0] and structures[j][1] < structures[i][1] and structures[j][2] < structures[i][2]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Function to parse input def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0].strip()) structures = [tuple(map(int, line.strip().split())) for line in lines[1:]] return max_nested_structures(structures)"},{"question":"John has recently bought a robotic vacuum cleaner that can clean his entire house. The house can be represented as a 2D grid of m x n cells, where some cells contain obstacles, and some are open for the vacuum cleaner to move and clean. The vacuum cleaner always starts at the top-left corner of the grid (i.e., position (0, 0)) and moves to the bottom-right corner (i.e., position (m-1, n-1)). The vacuum cleaner can move only in two directions: right or down. However, it cannot move to a cell that contains an obstacle. Your task is to determine the number of distinct paths that the vacuum cleaner can take to move from the starting position to the destination, avoiding obstacles along the way. If the destination itself is an obstacle, the number of distinct paths should be 0. -----Input----- The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. The next m lines contain n integers each, where the j-th integer in the i-th line is 0 if the corresponding cell is open and 1 if it contains an obstacle. -----Output----- In a single line, print the number of distinct paths the vacuum cleaner can take from the top-left corner to the bottom-right corner. -----Examples----- Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 2 0 1 0 0 Output 1 Input 3 3 0 0 1 0 1 0 1 0 0 Output 0","solution":"def unique_paths_with_obstacles(grid): Returns the number of distinct paths to move from the top-left corner of the grid to the bottom-right corner, avoiding obstacles. m = len(grid) n = len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function that takes an integer array and returns the count of true values among the array elements when the elements are evaluated with a given predicate function. ```python def is_even(num): return num % 2 == 0 def count_true(array, predicate): count = 0 for element in array: if predicate(element): count += 1 return count print(count_true([1, 2, 3, 4, 5], is_even)) = 2 because 2 and 4 are even numbers ``` More examples in test cases. Good luck!","solution":"def count_true(array, predicate): Returns the count of elements in the array that satisfy the predicate function. Parameters: array (list): List of integers to be evaluated. predicate (function): A function that takes an integer and returns a boolean. Returns: int: The count of elements that satisfy the predicate. count = 0 for element in array: if predicate(element): count += 1 return count"},{"question":"Raj is an enthusiast of data compression techniques and is learning about Run-Length Encoding (RLE), a basic lossless compression algorithm. As a fun project, Raj decides to implement the run-length encoding algorithm. The algorithm works by replacing sequences of the same character in a string by a single character followed by the count of its consecutive occurrences. For example, the string `\'aaabbc\'` is compressed to `\'a3b2c1\'`. Raj now wants to extend this algorithm for both encoding and decoding. -----Task----- Your task is to write two functions: one to encode a string using Run-Length Encoding and another to decode an encoded string back to its original form. -----Input----- The first input contains a string S consisting of only lowercase alphabets (1 ≤ length of S ≤ 10^6) for encoding or decoding. For encoding, S will be a non-empty string of lowercase letters. For decoding, S will be a valid run-length encoded string. -----Output----- For encoding, output a single line with the encoded string. For decoding, output a single line with the original string. -----Examples----- Sample Input for Encoding: aaabbc Sample Output for Encoding: a3b2c1 Sample Input for Decoding: a3b2c1 Sample Output for Decoding: aaabbc","solution":"def rle_encode(s): Run-Length Encodes the input string s. if not s: return \\"\\" encoded_result = [] i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 encoded_result.append(f\\"{s[i]}{count}\\") i += 1 return \'\'.join(encoded_result) def rle_decode(s): Decodes the Run-Length Encoded string s. if not s: return \\"\\" decoded_result = [] i = 0 while i < len(s): character = s[i] i += 1 count = 0 while i < len(s) and s[i].isdigit(): count = count * 10 + int(s[i]) i += 1 decoded_result.append(character * count) return \'\'.join(decoded_result)"},{"question":"Given an array of integers, find the maximum possible sum of non-adjacent elements. You can choose not to take any elements at all. Input format: The first line of input will contain an integer `T`, denoting the number of test cases. Each test case will be given in two lines: - The first line contains an integer `N`, representing the number of elements in the array. - The second line contains `N` integers, representing the elements of the array. Output format: For each test case, output the maximum possible sum of non-adjacent elements in the array on a new line. Constraints: For all subtasks: 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 -10^4 ≤ arr[i] ≤ 10^4 SAMPLE INPUT 3 4 3 2 7 10 3 3 2 5 2 1 2 SAMPLE OUTPUT 13 8 2 Explanation: In the first case, the maximum sum is obtained by choosing elements 3, 7, and 10 (3 + 10 = 13). In the second case, the maximum sum is obtained by choosing elements 3 and 5 (3 + 5 = 8). In the third case, the maximum sum is obtained by choosing the second element 2, since \\"1\\" and \\"2\\" are adjacent.","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of non-adjacent elements in the array `arr`. if not arr: return 0 prev_one, prev_two = 0, 0 for num in arr: current = max(prev_one, prev_two + num) prev_two = prev_one prev_one = current return prev_one def solve(test_cases): results = [] for arr in test_cases: results.append(max_non_adjacent_sum(arr)) return results def parse_input(): import sys input = sys.stdin.read data = input().strip().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 arr = list(map(int, data[index:index + N])) index += N test_cases.append(arr) results = solve(test_cases) for result in results: print(result)"},{"question":"Implement a function to calculate the area of intersection between two rectangles on a 2D plane. Each rectangle is defined by the coordinates of its bottom-left and top-right corners. The coordinates of the rectangles are given as four integers: x1, y1 (bottom-left corner) and x2, y2 (top-right corner), where x1 < x2 and y1 < y2. The function should take two sets of such coordinates and return the area of the intersection between the two rectangles. If the rectangles do not intersect, the function should return 0. Input The input consists of two lines. Each line contains four integers representing the coordinates of the bottom-left and top-right corners of a rectangle, respectively, in the order x1, y1, x2, y2. Output Output a single integer representing the area of the intersecting region of the two rectangles. If they do not intersect, output 0. Example Input 1 1 3 3 2 2 4 4 Output 1 Input 1 1 3 3 3 3 5 5 Output 0 Explanation In the first example, the rectangles intersect at the area delimited by coordinates (2, 2, 3, 3), which corresponds to an area of 1. In the second example, the rectangles only touch at a single point, so their intersection area is 0.","solution":"def intersection_area(x1, y1, x2, y2, X1, Y1, X2, Y2): Calculate the area of intersection between two rectangles. The first rectangle is defined by coordinates (x1, y1) and (x2, y2). The second rectangle is defined by coordinates (X1, Y1) and (X2, Y2). Returns the area of the intersecting region. If the rectangles do not intersect, returns 0. # Compute the overlap in x and y dimensions x_overlap = max(0, min(x2, X2) - max(x1, X1)) y_overlap = max(0, min(y2, Y2) - max(y1, Y1)) # Calculate the intersection area intersection = x_overlap * y_overlap return intersection"},{"question":"Given a string s and a list of substrings words, determine if s can be segmented into a space-separated sequence of one or more dictionary words from the list of words. Input The input consists of two lines. The first line contains the string s. The second line contains a space-separated list of substrings words. Output Print \\"YES\\" if the string can be segmented according to the above rules, otherwise print \\"NO\\". Constraints 1 ≤ |s| ≤ 10^5 1 ≤ |words| ≤ 10^5 1 ≤ |words[i]| ≤ 20 SAMPLE INPUT leetcode leet code SAMPLE OUTPUT YES","solution":"def can_segment_string(s, words): Determines if the string `s` can be segmented into a space-separated sequence of one or more dictionary words from the list of `words`. Args: s (str): The string to be segmented. words (list of str): The list of dictionary words. Returns: str: \\"YES\\" if the string can be segmented, otherwise \\"NO\\". word_set = set(words) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"YES\\" if dp[len(s)] else \\"NO\\""},{"question":"A librarian needs to organize a new set of books on the library shelf. Each book has a unique width, and books should be placed in such a way that the total width of the books on each shelf does not exceed the shelf width limit. Additionally, the librarian wants to minimize the total number of shelves used. Write a program to help the librarian determine the minimum number of shelves required to place all the books given the shelf width limit. -----Input----- The first line contains two integers n and L, where n is the number of books and L is the maximum width of each shelf. The next line contains n integers, each representing the width of a book. We have 1 leq n leq 1000 and 1 leq L leq 10000, and the width of each book is between 1 and L. -----Output----- The output contains one integer—the minimum number of shelves required. -----Examples----- Sample Input 1: 5 10 1 2 3 4 5 Sample Output 1: 2 Sample Input 2: 6 15 5 5 5 5 5 5 Sample Output 2: 2","solution":"def min_shelves(n, L, widths): Determines the minimum number of shelves required to place all the books given the shelf width limit. Parameters: n (int): The number of books. L (int): The maximum width of each shelf. widths (list of int): The width of each book. Returns: int: The minimum number of shelves required. widths.sort(reverse=True) shelves = 0 current_shelf = 0 for width in widths: if current_shelf + width <= L: current_shelf += width else: shelves += 1 current_shelf = width if current_shelf > 0: shelves += 1 return shelves"},{"question":"Given an array consisting of positive integers, your task is to determine the smallest positive integer that is not present in the array. The array may contain duplicates and is not necessarily sorted. The time complexity of your solution should be linear, and extra space complexity should be constant. You have to write a function that receives a list of positive integers and returns the smallest positive integer not present in the list. Example ```python find_smallest_missing([3, 4, -1, 1]) == 2 find_smallest_missing([1, 2, 0]) == 3 ``` PS: This problem can be approached by leveraging the indices of the array to keep track of which numbers are present. The key is to handle the numbers in-place to maintain constant extra space complexity. Good luck!","solution":"def find_smallest_missing(nums): Given an array consisting of positive integers, determine the smallest positive integer that is not present in the array. The time complexity of the solution is linear, and the extra space complexity is constant. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"You are given a set of strings and your task is to implement a function that determines the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \\"\\". # Function Signature: ```python def longest_common_prefix(strs: List[str]) -> str: ``` # Constraints: 1. All given inputs are in lowercase letters `a-z`. 2. If the input list is empty, return an empty string \\"\\". 3. The returned prefix must also be in lowercase letters. # Example: ```python assert longest_common_prefix([\\"flower\\",\\"flow\\",\\"flight\\"]) == \\"fl\\" assert longest_common_prefix([\\"dog\\",\\"racecar\\",\\"car\\"]) == \\"\\" assert longest_common_prefix([\\"interspecies\\",\\"interstellar\\",\\"interstate\\"]) == \\"inters\\" assert longest_common_prefix([]) == \\"\\" assert longest_common_prefix([\\"ab\\", \\"a\\"]) == \\"a\\" ``` # Detailed Explanation: - The function should first handle edge cases such as empty input, where it should return an empty string. - It is then expected to find the longest common prefix by comparing the characters of each string in the list. - The comparison halts as soon as a discrepancy is found, thereby determining the longest common prefix up to that point. The solution should be implemented in a way that is efficient and makes appropriate use of iterations and comparisons to minimize computational complexity.","solution":"from typing import List def longest_common_prefix(strs: List[str]) -> str: if not strs: return \\"\\" # Find the minimum length string in the list min_len = min(len(s) for s in strs) low, high = 0, min_len while low <= high: mid = (low + high) // 2 if all(s[:mid] == strs[0][:mid] for s in strs): low = mid + 1 else: high = mid - 1 return strs[0][: (low + high) // 2]"},{"question":"You are given two strings S and T. You can perform the following operation at most once: * Choose two indices i and j (1 ≤ i, j ≤ |S|) and swap the characters S[i-1] and S[j-1]. The goal is to determine if you can make the string S equal to string T by performing at most one swap operation. Constraints: * 1 ≤ |S| = |T| ≤ 100000 * S and T consist of lowercase English letters. Input Input is given from Standard Input in the following format: S T Output Print \\"YES\\" if you can make S equal to T by performing at most one swap operation, otherwise print \\"NO\\". Examples Input ab dc Output NO Input abcde acbde Output YES Input abcdefg abcfedg Output YES","solution":"def can_make_equal_with_one_swap(S, T): Returns \'YES\' if it is possible to make string S equal to string T by performing at most one swap, otherwise returns \'NO\'. if S == T: return \\"YES\\" diff_indices = [i for i in range(len(S)) if S[i] != T[i]] if len(diff_indices) == 2 and S[diff_indices[0]] == T[diff_indices[1]] and S[diff_indices[1]] == T[diff_indices[0]]: return \\"YES\\" return \\"NO\\""},{"question":"Alice is managing a sunflower field and wants to optimize the irrigation system. The field can be represented as a grid of size N x M, where each cell in the grid either contains a sunflower or is empty. Alice can place a limited number of new sprinklers in the empty cells to ensure that every sunflower receives water. A sprinkler placed in an empty cell can water all cells in its row and column. Given the configuration of the field, determine the minimum number of new sprinklers Alice needs to install to ensure that every sunflower receives water. Constraints * 1≤N, M≤1000 Input The input is given from Standard Input in the following format: First line contains two integers N and M separated by a space. Next N lines each contain M characters \'S\' or \'.\' where \'S\' denotes a sunflower and \'.\' denotes an empty cell. Output Output an integer denoting the minimum number of new sprinklers needed. Examples Input 4 4 .S.. ..S. .... S... Output 3 Input 3 3 S.S ... S.S Output 2","solution":"def min_sprinklers_needed(N, M, field): rows_with_sunflowers = set() cols_with_sunflowers = set() for i in range(N): for j in range(M): if field[i][j] == \'S\': rows_with_sunflowers.add(i) cols_with_sunflowers.add(j) row_count = len(rows_with_sunflowers) col_count = len(cols_with_sunflowers) return min(row_count, col_count) # Reading input from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) field = [] for i in range(N): field.append(data[(i+1)*M:(i+2)*M]) print(min_sprinklers_needed(N, M, field))"},{"question":"You are given a grid of size `n x m` filled with non-negative integers. Your task is to find the number of distinct integers in the grid and provide their frequencies. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next `n` lines contains `m` integers. Each integer in the grid is between 0 and 10^9. Output Print the number of distinct integers in the grid. Then print each distinct integer followed by its frequency, sorted by the integers in ascending order. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 9 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 Input 2 4 1 1 2 2 3 3 4 4 Output 4 1 2 2 2 3 2 4 2 Input 3 2 10 30 20 30 10 20 Output 3 10 2 20 2 30 2","solution":"from collections import defaultdict def distinct_integers_and_frequencies(n, m, grid): Returns the number of distinct integers in the grid and their frequencies. Args: n (int): number of rows in the grid m (int): number of columns in the grid grid (list of list of int): n x m matrix of non-negative integers Returns: tuple: (number of distinct integers, List of tuples where each tuple is (integer, frequency)) freq_dict = defaultdict(int) for row in grid: for val in row: freq_dict[val] += 1 result = sorted(freq_dict.items()) return len(result), result"},{"question":"Complete the function that takes an array of integers and an integer n, returning the smallest `n` numbers from the array in ascending order. You should not use built-in sorting functions, but rather implement the sorting yourself. Examples ``` Input: [4, 10, 2, 8, 6, 7, 1, 5], 3 Output: [1, 2, 4] Input: [24, 12, 34, 8, 6, 22, 1], 4 Output: [1, 6, 8, 12] ```","solution":"def smallest_n_numbers(arr, n): Returns the smallest n numbers from the array in ascending order. # Helper function to perform bubble sort def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] # Edge case: if n is greater than or equal to the length of the array, simply sort and return the whole array if n >= len(arr): bubble_sort(arr) return arr # Initialize an empty list to store the smallest n numbers smallest_numbers = [] # Find the smallest n numbers for _ in range(n): min_value = min(arr) smallest_numbers.append(min_value) arr.remove(min_value) # Sort the smallest numbers in ascending order bubble_sort(smallest_numbers) return smallest_numbers"},{"question":"You have a list of n integers where each integer is between 1 and 100. You want to divide this list into the minimum number of contiguous subarrays such that each subarray contains distinct integers. -----Input----- The first line contains one integer n (1 le n le 1000) — the number of elements in the list. The second line contains n integers, where each integer is between 1 and 100, representing the list. -----Output----- Print one integer — the minimum number of contiguous subarrays formed from the list such that each subarray contains distinct integers. -----Examples----- Input 5 1 2 3 4 5 Output 1 Input 6 1 2 2 3 4 5 Output 2 Input 7 1 2 3 4 5 5 6 Output 2 -----Note----- In the first and second example, the subarrays containing distinct integers are: Example 1: [1, 2, 3, 4, 5] Example 2: [1, 2] and [2, 3, 4, 5] Example 3: [1, 2, 3, 4, 5] and [5, 6] Even though integer 5 appears twice in the list in the third example, splitting the list after the first 5 yields subarrays where all integers in each part are distinct.","solution":"def min_subarrays_with_unique_elements(n, arr): Returns the minimum number of contiguous subarrays where each subarray contains distinct integers. if n == 0: return 0 subarray_count = 0 seen = set() for num in arr: if num in seen: subarray_count += 1 seen.clear() seen.add(num) return subarray_count + 1"},{"question":"Rishabh is a bookstore owner and wants to manage his inventory efficiently. He keeps track of how many copies of each book he has using an integer array. To optimize storage space, he decided to rearrange his books in a specific manner. For this task, he needs your help to rearrange the entire inventory array such that all odd numbers appear before all even numbers. However, within their respective sections (odd or even), the numbers should remain in their original order. Can you help Rishabh with this task? Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The next 2 ⋅ t lines contain the descriptions of the test cases. The description of each test case consists of two lines. The first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of books. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the inventory array of the bookstore. It is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5. Output For each test case, print a single line containing n integers — the rearranged inventory array with all odd numbers followed by all even numbers, maintaining the original order within each section. Example Input 3 5 3 8 1 2 5 4 6 4 7 5 3 9 3 8 Output 3 1 5 8 2 7 5 6 4 9 3 8 Note In the first test case, the odd numbers are 3, 1, 5 and the even numbers are 8, 2. Therefore, the rearranged array is 3 1 5 8 2.","solution":"def rearrange_books(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] books = test_cases[i][1] odd_books = [book for book in books if book % 2 != 0] even_books = [book for book in books if book % 2 == 0] arranged_books = odd_books + even_books results.append(\' \'.join(map(str, arranged_books))) return results"},{"question":"Nikola likes collecting stamps. He has a collection of stamps from various countries, and each stamp has a unique value. He wants to arrange his stamps in such a way that the total value is as balanced as possible between two groups. Specifically, he wants to split his stamps into two sets such that the absolute difference between the sum of values in each set is minimized. You are given an array of integers representing the values of the stamps in Nikola\'s collection. Your task is to find the minimum possible absolute difference between the sum of values in the two sets. Input The first line contains a single integer n (1 ≤ n ≤ 100), the number of stamps in Nikola\'s collection. The second line contains n integers vi (1 ≤ vi ≤ 10000), the values of the stamps. Output Print a single integer representing the minimum possible absolute difference between the sum of values in the two sets. Examples Input 4 1 2 3 8 Output 2 Input 3 10 20 15 Output 5","solution":"def min_difference(n, values): Returns the minimum possible absolute difference between the sum of values in two sets. total_sum = sum(values) half_sum = total_sum // 2 dp = [[False] * (half_sum + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(half_sum + 1): dp[i][j] = dp[i - 1][j] if j >= values[i - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j - values[i - 1]] for j in range(half_sum, -1, -1): if dp[n][j]: return total_sum - 2 * j # Sample usage n = 4 values = [1, 2, 3, 8] print(min_difference(n, values)) # Output: 2"},{"question":"You are given a list of integers representing the stock prices of a company over `n` days and an integer `d` representing the minimum number of consecutive days you want to consider. Write a function to calculate the maximum possible profit you could have made by buying the stock on one day and selling it on another day after at least `d` days. For example, given the stock prices `prices = [3, 1, 4, 1, 5, 9, 2, 6]` and `d = 2`, the function should return `8`, which is the maximum profit by buying on day 2 (price 1) and selling on day 6 (price 9). However, if the stock prices are given as `prices = [7, 6, 4, 3, 1]` and `d = 2`, the function should return `-1` indicating no profit can be made. Function signature: ```python def max_profit(prices: List[int], d: int) -> int: pass ``` Input: - `prices`: A list of integers representing the stock prices over `n` days. - `d`: An integer representing the minimum number of consecutive days to consider between buy and sell. Output: - An integer representing the maximum profit possible, or `-1` if no profit can be made.","solution":"from typing import List def max_profit(prices: List[int], d: int) -> int: Returns the maximum profit one could have made by buying the stock on one day and selling it on another day at least `d` days later. :param prices: List of stock prices. :param d: Minimum number of consecutive days between buy and sell. :return: Maximum possible profit or -1 if no profit can be made. n = len(prices) max_profit = -1 min_price = float(\'inf\') for i in range(n - d): # Iterate until n-d to ensure at least `d` days difference min_price = min(min_price, prices[i]) max_profit = max(max_profit, prices[i + d] - min_price) return max_profit if max_profit > 0 else -1"},{"question":"Given an array of integers and an integer k, determine if there exist three distinct indices i, j, l such that nums[i] + nums[j] + nums[l] = k. Return true if such indices exist, otherwise return false. Example 1: Input: nums = [1, 2, 3, 4, 5], k = 9 Output: true Explanation: There exist indices 0, 2, 3 such that nums[0] + nums[2] + nums[3] = 9 (1 + 3 + 4 = 9). Example 2: Input: nums = [1, 2, 3, 4, 5], k = 20 Output: false Explanation: There do not exist any indices that sum up to 20. Example 3: Input: nums = [10, -10, 20, 30, -30, 40], k = 0 Output: true Explanation: There exist indices 1, 4, 5 such that nums[1] + nums[4] + nums[5] = 0 (-10 + -30 + 40 = 0). Your Task: You don\'t need to read or print anything. Your task is to complete the function threeSumExists() which takes an array of integers nums and an integer k, and returns true if there exist three integers in nums that sum up to k, otherwise returns false. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: - 1 ≤ nums.length ≤ 10^3 - -10^3 ≤ nums[i] ≤ 10^3 - -10^6 ≤ k ≤ 10^6","solution":"def threeSumExists(nums, k): Determines if there exist three distinct indices i, j, l such that nums[i] + nums[j] + nums[l] = k. nums_len = len(nums) for i in range(nums_len - 2): for j in range(i + 1, nums_len - 1): for l in range(j + 1, nums_len): if nums[i] + nums[j] + nums[l] == k: return True return False"},{"question":"Given a string, find the smallest window (substring) that contains all the characters of the given target string in Linear time O(N). Input: The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case consists of two lines. The first line contains the input string. The second line contains the target string. Output: For each test case, print the smallest window that contains all the characters of the target string. If there are multiple such windows of the same length, print the one which appears first in the input string. If no such window exists, print \\"No such window\\". Constraints: 1 <= T <= 100 1 <= M, N <= 1000 Example: Input: 2 thisisateststring tist geeksforgeeks ork Output: tstri ksfor Note: The Input/Output format and Example given are used for the system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def smallest_window(s, t): Returns the smallest window in string `s` that contains all the characters of string `t`. from collections import Counter, defaultdict if not s or not t: return \\"No such window\\" t_freq = Counter(t) current_freq = defaultdict(int) have, need = 0, len(t_freq) min_len, min_window = float(\'inf\'), \\"\\" left = 0 for right, char in enumerate(s): current_freq[char] += 1 if char in t_freq and current_freq[char] == t_freq[char]: have += 1 while have == need: window_length = right - left + 1 if window_length < min_len: min_len = window_length min_window = s[left:right+1] current_freq[s[left]] -= 1 if s[left] in t_freq and current_freq[s[left]] < t_freq[s[left]]: have -= 1 left += 1 return min_window if min_window else \\"No such window\\" def smallest_window_multiple_cases(test_cases): results = [] for s, t in test_cases: results.append(smallest_window(s, t)) return results"},{"question":"A company wants to reward its employees based on their performance scores. The employees are ranked based on their performance, which is represented by unique integer scores. The company decides to distribute rewards such that: - Every employee receives at least one reward. - Any employee with a higher score than their immediate neighbors should receive more rewards than those neighbors. Given the performance scores of the employees, calculate the minimum number of rewards the company needs to distribute. Constraints - 1 ≤ N ≤ 10^5 (N is the number of employees) - The performance scores are unique integers between 1 and 10^9. Input The input is given from Standard Input in the following format: N p1 p2 : pN Output Print the minimum number of rewards required. Examples Input 5 1 2 3 2 1 Output 9 Input 3 1 2 2 Output 4 Input 8 8 7 6 5 4 3 2 1 Output 36","solution":"def calculate_min_rewards(scores): Calculate the minimum number of rewards to distribute based on scores. n = len(scores) if n == 1: return 1 rewards = [1] * n # Forward pass - ensuring that each employee gets more than the previous one if their score is higher for i in range(1, n): if scores[i] > scores[i - 1]: rewards[i] = rewards[i - 1] + 1 # Backward pass - ensuring that each employee gets more than the next one if their score is higher for i in range(n - 2, -1, -1): if scores[i] > scores[i + 1]: rewards[i] = max(rewards[i], rewards[i + 1] + 1) return sum(rewards) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) scores = [int(data[i]) for i in range(1, N + 1)] print(calculate_min_rewards(scores))"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. The task is to find out the number of connected components present in the given graph. # Input Format: - The first line contains two integers `n` (number of nodes) and `m` (number of edges). - The next `m` lines contain two integers `u` and `v` each, indicating that there is an edge between node `u` and node `v`. # Output Format: - Print a single integer representing the number of connected components in the graph. # Constraints: - 1 ≤ n ≤ 10^4 - 0 ≤ m ≤ 10^5 - 1 ≤ u, v ≤ n # SAMPLE INPUT 6 5 1 2 2 3 4 5 5 6 6 4 # SAMPLE OUTPUT 2 # Explanation In the provided sample, the graph has two connected components: 1. The first connected component consists of nodes {1, 2, 3}. 2. The second connected component consists of nodes {4, 5, 6}.","solution":"def count_connected_components(n, m, edges): Function to count the number of connected components in an undirected graph. :param n: int, number of nodes :param m: int, number of edges :param edges: list of tuples, each tuple contains two integers representing an edge :return: int, number of connected components from collections import defaultdict, deque # Create an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Track visited nodes visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Count connected components connected_components = 0 for node in range(1, n+1): if node not in visited: connected_components += 1 visited.add(node) bfs(node) return connected_components"},{"question":"A software company is hosting an online coding competition. The participants write programs to solve given problems as quickly as possible. The participants will be disqualified if their solution execution time exceeds the limit or if their solution uses incorrect memory allocation. To ensure the fairness of the competition, the company needs a system to evaluate the execution time and memory usage of each submitted solution. You have been tasked with implementing this evaluator program. Input The input data consists of two lines. The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000), where n is the number of participants and m is the number of problems in the competition. The second line contains n space-separated integers representing the execution time of solutions provided by the participants for the problems. Each execution time value is between 1 and 10000 milliseconds. Output Print the result for each participant on a new line. For each result, print \\"Accepted\\" if the execution time for all problems is less than or equal to the time limit, otherwise, print \\"Disqualified\\". Note: Assume the maximum allowable execution time for each problem is 5000 milliseconds. Examples Input 3 4 4000 4500 5001 Output Accepted Accepted Disqualified","solution":"def evaluate_submissions(n, m, execution_times): Evaluates the submissions based on their execution times. Parameters: n (int): Number of participants m (int): Number of problems (not actually used in evaluation) execution_times (list of int): Execution times of each participant\'s solution Returns: list of str: \\"Accepted\\" or \\"Disqualified\\" for each participant based on execution times ACCEPTABLE_TIME_LIMIT = 5000 results = [] for time in execution_times: if time <= ACCEPTABLE_TIME_LIMIT: results.append(\\"Accepted\\") else: results.append(\\"Disqualified\\") return results # Example usage: # input n = 3 m = 4 execution_times = [4000, 4500, 5001] # function call # print(evaluate_submissions(n, m, execution_times)) # Expected output # [\\"Accepted\\", \\"Accepted\\", \\"Disqualified\\"]"},{"question":"A parking lot has a single entrance and multiple parking spots arranged in a straight line. Each parking spot can either be empty or occupied by a car, represented by \'0\' and \'1\' respectively. The distance of a parking spot from the entrance is given by its index in the array (i.e., the first spot has a distance of 0, the second spot has a distance of 1, and so on). You need to find the first available parking spot that is nearest to the entrance. If no empty spot is available, return -1. -----Input----- The first and only line contains a string of \'0\'s and \'1\'s, where each character represents a parking spot and the characters are ordered from the entrance towards the end of the parking lot. -----Output----- Output a single integer, which is the index of the first available parking spot. If no spot is available, output -1. -----Examples----- Input \\"100010\\" Output 1 Input \\"11111\\" Output -1","solution":"def nearest_spot(parking_lot): Returns the index of the first available parking spot (represented by \'0\') nearest to the entrance. If no empty spot is available, return -1. for index, spot in enumerate(parking_lot): if spot == \'0\': return index return -1"},{"question":"You are given a list of \'n\' integers. Your task is to reorder these integers into an array such that the new array satisfies the following conditions: 1. All even numbers should come before all odd numbers. 2. The order among the even numbers should be non-decreasing. 3. The order among the odd numbers should be non-decreasing. Write a function that rearranges the list according to these constraints. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the list. - The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), the elements of the list. Output: - Print the rearranged list of n integers such that all even integers appear before all odd integers, with both even and odd integers sorted in non-decreasing order. Examples: Input: 6 4 3 1 2 5 6 Output: 2 4 6 1 3 5 Input: 7 -2 -3 4 1 -1 2 0 Output: -2 0 2 4 -3 -1 1","solution":"def rearrange_list(nums): Re-arranges the list so that all even numbers come before all odd numbers, both in non-decreasing order. Parameters: nums (list of int): The list of integers to re-arrange. Returns: list of int: The re-arranged list of integers. even_nums = sorted([num for num in nums if num % 2 == 0]) odd_nums = sorted([num for num in nums if num % 2 != 0]) return even_nums + odd_nums # Example Input/Output n = 6 nums = [4, 3, 1, 2, 5, 6] print(rearrange_list(nums)) # Output: [2, 4, 6, 1, 3, 5] n = 7 nums = [-2, -3, 4, 1, -1, 2, 0] print(rearrange_list(nums)) # Output: [-2, 0, 2, 4, -3, -1, 1]"},{"question":"Given a string `s` which consists of only lowercase English letters, find the maximum length of a substring that contains no more than `k` distinct characters. For example: ``` solve(\\"eceba\\", 2) = 3 // The substring is \\"ece\\" with length 3. solve(\\"aa\\", 1) = 2 // The substring is \\"aa\\" with length 2. ``` Your task is to implement a function `solve(s, k)` which takes a string `s` and an integer `k` and returns an integer representing the maximum length of a substring with no more than `k` distinct characters. Constraints: - 0 ≤ len(s) ≤ 10^5 - 0 ≤ k ≤ 26","solution":"def solve(s, k): Returns the maximum length of a substring with no more than k distinct characters. if k == 0 or not s: return 0 left = 0 max_length = 0 char_count = {} for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Alex has recently taken an interest in strings and patterns. A pattern is defined as a non-empty string consisting of lowercase letters only. Alex wants to find out how many times a given pattern appears as a contiguous substring in a given text. The comparison should be case-sensitive, and substrings must not overlap. Input The input consists of two lines. The first line contains a string `text` (1 ≤ |text| ≤ 1000) — the text in which to search for the pattern. The second line contains a string `pattern` (1 ≤ |pattern| ≤ 100) — the pattern to search for. Output Output a single integer representing the number of times the pattern appears as a contiguous substring in the text. Examples Input abababab aba Output 2 Input abcdefg hij Output 0","solution":"def count_pattern_occurrences(text, pattern): Returns the number of times the pattern appears as a contiguous substring in the text. Substrings must not overlap. count = 0 i = 0 while i <= len(text) - len(pattern): if text[i:i + len(pattern)] == pattern: count += 1 i += len(pattern) else: i += 1 return count"},{"question":"Mark is practicing his programming skills by manipulating strings. He needs your help with a specific task where he wants to determine the minimal number of steps required to transform one string into another. In one step, Mark can either replace a character in the string, insert a character into the string, or delete a character from the string. Your task is to calculate the minimal number of steps required to transform string s into string t. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). Description of the test cases follows. The first line of each test case contains an integer n (1 le n le 200) which is the length of string s. The second line contains string s of length n. The third line contains string t which is the target string that Mark wants to transform s into. The length of t will also be at most 200. -----Output----- For each test case output the minimal number of steps required to transform string s into string t. -----Examples----- Input 3 4 int tint 5 hello shell 3 abc def Output 1 2 3 -----Note----- In the first test case, the following sequence of operations would satisfy the requirements: - Insert character \'t\' at the beginning. Resulting string: \\"tint\\" In the second test case, the following sequence of operations would satisfy the requirements: - Replace character \'h\' with \'s\'. Resulting string: \\"sello\\" - Replace character \'e\' with \'h\'. Resulting string: \\"shell\\" In the third test case, the following sequence of operations would satisfy the requirements: - Replace character \'a\' with \'d\'. Resulting string: \\"dbc\\" - Replace character \'b\' with \'e\'. Resulting string: \\"dec\\" - Replace character \'c\' with \'f\'. Resulting string: \\"def\\"","solution":"def min_edit_distance(s, t): Determines the minimum number of steps required to transform string s into string t. The steps can include insertion, deletion or replacement of characters. m, n = len(s), len(t) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the DP table for i in range(m + 1): for j in range(n + 1): # If s is empty, we insert all t\'s characters into s if i == 0: dp[i][j] = j # If t is empty, we remove all s\'s characters elif j == 0: dp[i][j] = i # If last characters are the same, ignore them and recurse on the remaining strings elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last characters are different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1] # Replace ) return dp[m][n] def transform_operations(test_cases): results = [] for case in test_cases: n, s, t = case result = min_edit_distance(s, t) results.append(result) return results"},{"question":"Maki is creating a new math game where she has a large pile of integers. The game involves creating as many pairs of integers as possible from the pile such that the sum of the numbers in each pair is even. You are given an array of integers a_1, a_2, ..., a_n. Calculate the maximum number of pairs that can be formed where the sum of the two integers in each pair is even. -----Constraints----- - 1 ≤ n ≤ 10^5 - 1 ≤ a_i ≤ 10^9 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- Print one integer, the maximum number of pairs of integers from the array such that the sum of the numbers in each pair is even. -----Sample Input----- 5 2 3 4 6 7 -----Sample Output----- 2 Explanation: - We can pair (2, 4) since 2 + 4 = 6 and 6 is even. - We can pair (6, 2) or (6, 4) since 6 + 2 = 8 and 6 + 4 = 10 are both even. - We cannot pair 3 and 7 because 3 + 7 = 10 is odd. Thus, the maximum number of pairs is 2.","solution":"def max_even_sum_pairs(arr): Given an array of integers, returns the maximum number of pairs that can be formed where the sum of the two integers in each pair is even. # Split the numbers into even and odd counts even_count = sum(1 for x in arr if x % 2 == 0) odd_count = len(arr) - even_count # We can form pairs of even numbers and pairs of odd numbers num_even_pairs = even_count // 2 num_odd_pairs = odd_count // 2 # The total number of valid pairs return num_even_pairs + num_odd_pairs"},{"question":"You are given a binary tree with `n` nodes, numbered from 1 to `n`. Each node has a label from 1 to 26 representing an English alphabet letter (1 for \'A\', 2 for \'B\', ..., 26 for \'Z\'). You need to answer several queries on this tree. Each query is either to modify the label of a node or to calculate the frequency of a particular character in the subtree of a given node. Initially, the tree is empty. Then `q` queries follow. Each query has one of the following forms: 1. `ADD parent child` - Adds an edge from the parent node to the child node. 2. `LABEL node label` - Changes the label of the given node to the new label. 3. `FREQ node character` - Outputs the frequency of the character in the subtree of the given node. For each `FREQ` query, print the result on a new line. Input The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the number of nodes and the number of queries. The next `n-1` lines contain `n-1` integers representing the parent-child relations. Each of these lines will fit the `ADD parent child` format described above. The next `q` lines contain the queries. The queries are guaranteed to be in the order such that any `LABEL` query always happens after all nodes have been added, and any `FREQ` query always has valid input. Output For each `FREQ` query, output the frequency of the character in the subtree of the given node. Example Input 5 5 1 2 1 3 3 4 3 5 LABEL 1 1 LABEL 2 2 LABEL 3 3 LABEL 4 1 LABEL 5 2 FREQ 1 B FREQ 3 A FREQ 5 B LABEL 5 1 FREQ 3 A Output 2 1 1 2 Note: In the example above, the first `FREQ 1 B` query asks for the frequency of the character \'B\' (which is represented by label 2) in the entire tree. The second `FREQ 3 A` query asks for the frequency of the character \'A\' (label 1) in the subtree rooted at node 3. After changing the label of node 5 to 1 (\'A\') using `LABEL 5 1`, the final query `FREQ 3 A` asks for the frequency again, which has increased due to the change.","solution":"from collections import defaultdict, Counter class Tree: def __init__(self, n): self.tree = defaultdict(list) self.label = [-1] * (n + 1) self.n = n def add_edge(self, parent, child): self.tree[parent].append(child) def label_node(self, node, label): self.label[node] = label def get_subtree_labels(self, node): Return a counter of labels in the subtree rooted at \'node\'. counter = Counter() def dfs(v): counter[self.label[v]] += 1 for child in self.tree[v]: dfs(child) dfs(node) return counter def handle_queries(n, edges, queries): tree = Tree(n) for u, v in edges: tree.add_edge(u, v) result = [] for query in queries: q_type = query[0] if q_type == \'LABEL\': node = int(query[1]) label = int(query[2]) tree.label_node(node, label) elif q_type == \'FREQ\': node = int(query[1]) character = query[2] label_num = ord(character) - ord(\'A\') + 1 counter = tree.get_subtree_labels(node) result.append(counter[label_num]) return result"},{"question":"Programmer Elena is learning about greedy algorithms. Her mentor Tatiana poses a problem related to cut ribbons, where each ribbon must be cut into pieces of a specified length. Help Elena figure out the problem. Given a list of ribbon lengths, determine the maximum number of pieces Elena can obtain, where each piece is of length `k`. Input The first line contains two positive integers `n` and `k` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of ribbons and the desired length of each piece. The second line contains `n` positive integers a_i (1 ≤ a_i ≤ 10^9) — the lengths of the ribbons. Output Print a single integer — the maximum number of pieces of length `k` that can be obtained. Examples Input 5 3 7 4 10 15 6 Output 13 Input 4 5 5 5 5 5 Output 4","solution":"def max_ribbon_pieces(ribbons, k): Returns the maximum number of pieces of length k that can be obtained from given ribbons. return sum(ribbon // k for ribbon in ribbons) def process_input(input_str): Processes the input string to extract values for ribbons and k. data = input_str.strip().split() n = int(data[0]) k = int(data[1]) ribbons = list(map(int, data[2:2+n])) return ribbons, k"},{"question":"Alex loves sequences. He defines a \\"good sequence\\" as one that satisfies the following properties: - It consists of n positive integers. - The greatest common divisor (GCD) of any two consecutive elements in the sequence is greater than 1. Given an integer n, help Alex find the lexicographically smallest \\"good sequence\\" of length n where each element is between 1 and m (inclusive). -----Input----- The first line contains two space-separated integers: n and m (1 ≤ n ≤ 1000; 1 ≤ m ≤ 1000). -----Output----- If a \\"good sequence\\" of length n exists, print it. Otherwise, print \\"NO\\" (without the quotes). -----Examples----- Input 3 4 Output 2 2 2 Input 5 3 Output NO Input 4 6 Output 2 4 2 4 -----Note----- A sequence a_1, a_2, ..., a_n is lexicographically smaller than a sequence b_1, b_2, ..., b_n if there is an index i such that a_1 = b_1, ..., a_{i-1} = b_{i-1}, and a_i < b_i. The greatest common divisor (GCD) of two numbers x and y is the largest number that divides both x and y. The lexicographically smallest \\"good sequence\\" is the smallest sequence that satisfies all given conditions.","solution":"def find_good_sequence(n, m): Finds the lexicographically smallest \\"good sequence\\" of length n where each element is between 1 and m (inclusive) and the greatest common divisor (GCD) of any two consecutive elements in the sequence is greater than 1. Returns: List of integers: A list representing the \\"good sequence\\" or \'NO\' if no such sequence exists. if m < 2: return \\"NO\\" sequence = [] for i in range(n): if i % 2 == 0: sequence.append(2) else: if 4 <= m: sequence.append(4) else: return \\"NO\\" return sequence # Example usage: # print(find_good_sequence(3, 4)) # Output: [2, 4, 2]"},{"question":"You are given an array of integers A and an integer S. You must find the length of the smallest contiguous subarray of A, the sum of whose elements is greater than or equal to S. If no such subarray exists, return 0 instead. Example: Input: A = [2, 3, 1, 2, 4, 3] S = 7 Output: 2 Explanation: The smallest subarray with sum >= 7 is [4, 3]. The length of this subarray is 2. Example: Input: A = [1, 1, 1, 1, 1, 1, 1, 1] S = 11 Output: 0 Explanation: No subarray of A has sum >= 11. Note: 1 <= A.length <= 10^5 1 <= A[i] <= 10^4 1 <= S <= 10^9","solution":"def min_subarray_len(A, S): Finds the length of the smallest contiguous subarray of A with sum >= S. If no such subarray exists, returns 0. n = len(A) min_len = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += A[right] while current_sum >= S: min_len = min(min_len, right - left + 1) current_sum -= A[left] left += 1 return min_len if min_len != float(\'inf\') else 0"},{"question":"Given an integer n, find the nth term of the Fibonacci sequence. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Example 1: Input: 5 Output: 5 Explanation: The first 6 terms of the Fibonacci sequence are 0, 1, 1, 2, 3, 5, so the 5th term is 5. Example 2: Input: 10 Output: 55 Explanation: The first 11 terms of the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, so the 10th term is 55. Your Task: You don\'t need to read or print anything. Your task is to complete the function find_fibonacci() which takes an integer n as input parameter and returns the nth term of the Fibonacci sequence. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 0 <= n <= 30","solution":"def find_fibonacci(n): Returns the nth term of the Fibonacci sequence. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"A binary search tree (BST) is a data structure that keeps elements in sorted order, allowing for efficient insertion, lookup, and deletion. You are given a binary search tree and a range of values. Your task is to count the number of nodes in the BST that lie within the given range [L, R] inclusive. Function Description Complete the countNodesInRange function in the editor below. It should return an integer representing the number of nodes within the range. countNodesInRange has the following parameter(s): - root: a reference to a TreeNode, representing the root of the binary search tree - L: an integer, the lower bound of the range - R: an integer, the upper bound of the range A TreeNode is defined as follows: ``` class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Input Format The first line contains an integer T, the number of test cases. Each test case consists of two parts: - The first part is a list of integers representing the elements of the tree in level-order traversal (null elements indicating no node for that position). - The second part contains two space-separated integers, L and R, denoting the lower and upper bounds of the range. Constraints - 1 ≤ T ≤ 100 - 1 ≤ Number of nodes in BST ≤ 10^4 - -10^4 ≤ Node value, L, R ≤ 10^4 Output Format For each test case, print a single line containing the number of nodes in the BST that lie within the specified range. Sample Input 0 2 [10, 5, 15, 3, 7, null, 18] 7 15 [10, 5, null, 1, 8, null, null, null, null, null, null] 2 7 Sample Output 0 3 1 Explanation 0 Test case 0 The BST is: ``` 10 / 5 15 / 3 7 18 ``` Nodes falling within the range [7, 15] are 7, 10, and 15. Hence, the output is 3. Test case 1 The BST is: ``` 10 / 5 / 1 8 ``` Nodes falling within the range [2, 7] are 5. Hence, the output is 1. Sample Input 1 1 [20, 10, 30, 5, 15, null, 35] 12 25 Sample Output 1 2 Explanation 1 The BST is: ``` 20 / 10 30 / 5 15 35 ``` Nodes falling within the range [12, 25] are 15 and 20. Hence, the output is 2.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def insertLevelOrder(arr, root, i, n): # base case for recursion if i < n: if arr[i] is not None: temp = TreeNode(arr[i]) root = temp # insert left child root.left = insertLevelOrder(arr, root.left, 2 * i + 1, n) # insert right child root.right = insertLevelOrder(arr, root.right, 2 * i + 2, n) return root def countNodesInRange(root, L, R): if not root: return 0 if root.val < L: return countNodesInRange(root.right, L, R) elif root.val > R: return countNodesInRange(root.left, L, R) return 1 + countNodesInRange(root.left, L, R) + countNodesInRange(root.right, L, R)"},{"question":"A JSON object is represented as a tree with nodes, where each node corresponds to a key within the object. The value at each node can either be a primitive (string, number, boolean, null), an array, or another JSON object. Write a function that, given a JSON object and a key, traverses the tree and returns a list of all values associated with that key. If the key does not exist within the JSON object, return an empty list. Constraints * The JSON object will not contain cyclic references. * The length of the JSON object, including all nested levels, will not exceed 100,000 characters. * Keys and string values have a maximum length of 100 characters. Input The input is given in the following format: ```json { \\"json\\": { ... }, \\"key\\": \\"targetKey\\" } ``` The `json` field contains the JSON object, and the `key` field is the key to search for. The entire input is a valid JSON string. Output The output should be a list of values associated with the input key. The format should be: ``` [value1, value2, ..., valueN] ``` Example Input ```json { \\"json\\": { \\"name\\": \\"John\\", \\"age\\": 30, \\"address\\": { \\"city\\": \\"New York\\", \\"postalCode\\": \\"10001\\", \\"details\\": { \\"landmark\\": \\"Central Park\\", \\"postalCode\\": \\"10002\\" } }, \\"postalCode\\": \\"10003\\" }, \\"key\\": \\"postalCode\\" } ``` Output ```json [\\"10001\\", \\"10002\\", \\"10003\\"] ``` Explanation: The key \\"postalCode\\" appears three times in the example JSON object, with values \\"10001\\", \\"10002\\" and \\"10003\\". The function should return these values in a list.","solution":"import json def find_values_by_key(json_obj, target_key): Traverses the JSON object and returns a list of all values associated with the given key. values = [] def traverse(obj): if isinstance(obj, dict): for key, value in obj.items(): if key == target_key: values.append(value) traverse(value) elif isinstance(obj, list): for item in obj: traverse(item) traverse(json_obj) return values def get_values_from_json_string(json_string): Parses the JSON string and extracts the values for the key specified. data = json.loads(json_string) return find_values_by_key(data[\'json\'], data[\'key\'])"},{"question":"You are given a weighted undirected graph with n nodes and m edges. Each edge has a weight w. Your task is to determine the minimum spanning tree (MST) of the graph and then find the weight of the longest edge in that MST. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of nodes and edges respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) — indicating that there is an edge between nodes u and v with weight w. Output Print one integer — the weight of the longest edge in the MST of the given graph. Examples Input 4 5 1 2 5 1 3 3 4 2 6 4 3 4 2 3 2 Output 4 Input 5 7 1 2 2 1 3 3 1 4 5 2 3 4 2 5 6 3 5 1 4 5 7 Output 5","solution":"def find_mst_max_edge(n, m, edges): Returns the weight of the longest edge in the MST of the given graph. from collections import defaultdict import heapq def kruskal(nodes, edges): parent = list(range(nodes + 1)) rank = [0] * (nodes + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 edges.sort(key=lambda x: x[2]) max_edge = 0 mst_edges = 0 for u, v, w in edges: if find(u) != find(v): union(u, v) max_edge = max(max_edge, w) mst_edges += 1 if mst_edges == nodes - 1: break return max_edge edges_list = [tuple(edge) for edge in edges] return kruskal(n, edges_list)"},{"question":"Task Given a grid of `n x m` cells, each cell can either contain a 1 (representing land) or a 0 (representing water). An island is formed by connecting adjacent lands horizontally or vertically. You need to count the number of distinct islands in the grid. Two islands are considered distinct if and only if one cannot be translated (slid in any direction) to match the other. Write a function that takes the grid as input and returns the number of distinct islands. # Example For the grid: ``` [ [1, 1, 0, 0, 0], [1, 0, 0, 1, 1], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0] ] ``` The output should be `2`. Explanation: There are two distinct islands in the grid — one at the top-left corner and another at the top-right corner extending towards the bottom-right. # Input/Output - `[input]` 2D integer array `grid` Constraints: `1 ≤ n, m ≤ 50`, `grid[i][j]` is either 0 or 1 - `[output]` an integer","solution":"def number_of_distinct_islands(grid): Returns the number of distinct islands in the grid. if not grid: return 0 n, m = len(grid), len(grid[0]) visited = [[False] * m for _ in range(n)] directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] def dfs(x, y, base_x, base_y): stack = [(x, y)] shape = set() while stack: cx, cy = stack.pop() for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 1 and not visited[nx][ny]: visited[nx][ny] = True stack.append((nx, ny)) shape.add((nx - base_x, ny - base_y)) return shape shapes = set() for i in range(n): for j in range(m): if grid[i][j] == 1 and not visited[i][j]: visited[i][j] = True shape = dfs(i, j, i, j) shapes.add(frozenset(shape)) return len(shapes)"},{"question":"You are given a list of n integers, where each element represents the population of a city. You are also given m bidirectional roads connecting these cities. Each road has a weight, which represents the time it takes to travel between the two cities. The government wants to impose a lockdown in such a way that they can easily monitor and control the movement of people between cities. For that, they want to know the minimum time required to reach any other city starting from any given city. Your task is to write a program that calculates the minimum time required for each city to reach any other city. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) — the number of cities and the number of roads respectively. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10000) — the populations of the cities. The next m lines contain three integers each ui, vi, and wi (1 ≤ ui, vi ≤ n, 1 ≤ wi ≤ 10000) — the indices of the cities connected by the i-th road and the time to travel between these cities. Output Print n integers — the i-th of these numbers should be equal to the minimum time required to reach any other city from city i. If a city is isolated and can\'t reach any other city, output -1 for that city. Examples Input 5 4 10 20 30 40 50 1 2 3 1 3 2 2 4 4 3 5 1 Output 3 3 3 4 3 Input 3 1 100 150 200 1 2 5 Output 5 5 -1 Note In the first example, city 1 can reach city 2 and city 3, taking a minimum time of 2 (to reach city 3). Similarly, city 2 can reach cities 1, 3, and 4 with the minimum time being 3. City 3 can reach cities 1, 2, and 5 with the minimum time being 3. City 4 can reach city 2 with a minimum time of 4. City 5 can reach city 3 in a minimum time of 1. In the second example, city 1 can only reach city 2 with a minimum time of 5. City 2 can also only reach city 1 with minimum time 5. City 3 is isolated and thus outputs -1.","solution":"import heapq def dijkstra(start, n, adj): dist = [float(\'inf\')] * n dist[start] = 0 pq = [(0, start)] # priority queue of (distance, node) while pq: d, u = heapq.heappop(pq) if d > dist[u]: continue for v, w in adj[u]: if dist[u] + w < dist[v]: dist[v] = dist[u] + w heapq.heappush(pq, (dist[v], v)) return dist def min_time_to_reach_all_cities(n, m, populations, roads): adj = [[] for _ in range(n)] for u, v, w in roads: adj[u-1].append((v-1, w)) adj[v-1].append((u-1, w)) result = [0] * n for i in range(n): dist = dijkstra(i, n, adj) min_time = float(\'inf\') for j in range(n): if i != j and dist[j] != float(\'inf\'): min_time = min(min_time, dist[j]) result[i] = min_time if min_time != float(\'inf\') else -1 return result"},{"question":"You are given a matrix of size n x n consisting of positive integers. You need to traverse the matrix in a \\"zigzag\\" manner - starting from the top left corner, moving rightwards, then downwards to the next row, then leftwards, and so on. Example 1: Input: n = 3 matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: 1 2 3 6 5 4 7 8 9 Your Task: You don\'t need to input anything. Complete the function zigzagTraversal() which takes an integer n and a 2D list of integers matrix as the input parameters and prints the elements of the matrix in zigzag order. Constraints: 1 <= n <= 10 1 <= matrix[i][j] <= 100","solution":"def zigzagTraversal(n, matrix): Traverses the matrix in a zigzag manner and prints the elements. result = [] for i in range(n): if i % 2 == 0: result.extend(matrix[i]) else: result.extend(matrix[i][::-1]) print(\' \'.join(map(str, result)))"},{"question":"Tom is a budding mathematician and is intrigued by all kinds of number sequences. Today, he discovered a special type of sequence called a \\"Vanishing Sequence\\". In this sequence, each number other than the first one is calculated by subtracting the next number in the sequence from the current number. Formally, a Vanishing Sequence of length n is defined as follows: - a1 = x (where x is any integer) - a2 = a1 - a1 - a3 = a2 - a2 ... - an = an-1 - an-1 As this sequence progresses, it converges to 0 very quickly. Given an integer x, Tom wants to construct the Vanishing Sequence of length n. Write a program that takes two integers, x and n, and outputs the Vanishing Sequence of that length. -----Input----- The single line of the input contains two space-separated integers x (1 ≤ x ≤ 10^6) and n (1 ≤ n ≤ 10^6) — the initial integer value and the length of the sequence. -----Output----- Print the Vanishing Sequence of length n, with each number separated by a space. -----Examples----- Input 5 5 Output 5 0 0 0 0 Input 3 4 Output 3 0 0 0 Input 42 6 Output 42 0 0 0 0 0 -----Note----- In the first sample, the sequence is [5, 0, 0, 0, 0] because after the first number, each successive number is 0 (since a - a = 0 for any a). In the second sample, the sequence is [3, 0, 0, 0] for the same reason. In the third sample, the sequence is [42, 0, 0, 0, 0, 0] with the initial number followed by zeroes.","solution":"def generate_vanishing_sequence(x, n): Given an initial integer value x and length n, generates the Vanishing Sequence of length n. if n <= 0: return [] sequence = [x] sequence.extend([0] * (n - 1)) return sequence"},{"question":"You are given an array of integers nums and an integer target. Your task is to find the minimum number of integers you need to change in nums so that the array contains a subarray whose sum is exactly equal to target. Example 1: Input: nums = [1, 2, 3, 4], target = 6 Output: 0 Explanation: The subarray [2, 4] sums to 6, so no changes are needed. Example 2: Input: nums = [1, 2, 3], target = 7 Output: 1 Explanation: By changing the last 3 to 4, the subarray [2, 4] sums to 6. Example 3: Input: nums = [5, 1, 1, 3], target = 9 Output: 1 Explanation: By changing the first 5 to 6, the subarray [6, 3] sums to 9. Constraints: 1 <= nums.length <= 100 1 <= nums[i], target <= 100","solution":"def min_changes_for_target_subarray(nums, target): def subarray_exists_with_sum(nums, target): curr_sum = 0 sum_map = {} for i, num in enumerate(nums): curr_sum += num if curr_sum == target: return True if (curr_sum - target) in sum_map: return True sum_map[curr_sum] = i return False if subarray_exists_with_sum(nums, target): return 0 n = len(nums) changes = n for i in range(n): for j in range(i, n): sub_arr = nums[:i] + [target - sum(nums[i:j+1])] + nums[j+1:] if subarray_exists_with_sum(sub_arr, target) and (j - i + 1 < changes): changes = j - i + 1 return changes"},{"question":"You are given an array of N integers and a target integer T. Your task is to determine whether there exists a pair of distinct indices (i, j) in the array such that the sum of the elements at these indices equals T. -----Input----- - The first line contains an integer N representing the number of elements in the array (1 le N le 10^5) and an integer T representing the target sum (1 le T le 10^9). - The second line contains N space-separated integers representing the elements of the array (1 le text{array}[i] le 10^9). -----Output----- - Print \\"YES\\" if there exists such a pair of indices. Otherwise, print \\"NO\\". -----Constraints----- - The array may contain duplicate elements. - Indices i and j must be distinct. -----Example Input----- 5 9 2 7 11 15 5 -----Example Output----- YES","solution":"def has_pair_with_sum(N, T, array): Returns \'YES\' if there exists a pair of distinct indices (i, j) in the array such that array[i] + array[j] = T, otherwise \'NO\'. seen = set() for num in array: if T - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"In the world of alphanumeric strings, we sometimes need to determine how many unique characters exist within a given string. Your task is to create a function that accepts a string and returns the number of unique characters it contains. The alphanumeric strings will consist of uppercase and lowercase letters and digits only. The comparison should be case-insensitive, meaning that \'A\' and \'a\' should be considered the same character. # Examples * `\\"Hello123\\"` should return `7` since it contains `7` unique characters: `H`, `e`, `l`, `o`, `1`, `2`, `3`. * `\\"abcdef\\"` should return `6` since it contains `6` unique characters: `a`, `b`, `c`, `d`, `e`, `f`. * `\\"112233\\"` should return `3` since it contains `3` unique characters: `1`, `2`, `3`.","solution":"def count_unique_characters(s): Returns the number of unique characters in the input string s. The comparison is case-insensitive. # Convert the string to lowercase to ensure case-insensitivity lower_s = s.lower() # Use a set to keep track of unique characters unique_chars = set(lower_s) # Return the number of unique characters return len(unique_chars)"},{"question":"Alyssa is organizing a band practice session for a group of musicians. The group consists of n musicians, each playing one of k different instruments. After the practice session, Alyssa wants to know how many unique instrument groups were formed based on the instruments played by different musicians. A group of musicians is considered unique if at least one musician in the group plays an instrument that no other musician in any other group plays. Help Alyssa determine the number of unique instrument groups formed. -----Input----- There are several test cases in the input data. The first line contains a single integer t (1 leq t leq 5 cdot 10^4) — the number of test cases. This is followed by the test cases description. The first line of each test case contains two integers n and k (1 leq n leq 100 and 1 leq k leq 20) — the number of musicians and the number of different instruments. The second line of each test case contains a sequence of integers b_1, b_2, ldots, b_n (1 leq b_i leq k), where b_i is the instrument played by the i-th musician. It is guaranteed that the sum of n over all test cases doesn\'t exceed 10^4. -----Output----- For each test case print a single integer — the number of unique instrument groups. -----Examples----- Input 3 5 3 1 2 2 3 1 6 4 1 2 3 4 1 2 4 2 1 1 2 2 Output 2 4 2 -----Note----- In the first test case, there are 3 musicians playing instrument 1, two playing instrument 2, and one playing instrument 3, leading to 2 unique groups: {1, 2} and {3}. In the second test case, each instrument is played by different musicians leading to 4 unique groups: {1}, {2}, {3}, {4}. In the third test case, two musicians play instrument 1 and two play instrument 2, forming 2 unique groups: {1} and {2}.","solution":"def count_unique_groups(t, cases): results = [] for case in cases: n, k = case[0] instruments = case[1] unique_instruments = set(instruments) results.append(len(unique_instruments)) return results"},{"question":"You are given an array of integers representing heights of consecutive buildings. The heights are recorded from left to right. If it is possible to make all buildings of the same height by increasing the height of some buildings (any number of times) but not reducing the height of any building, return the minimum number of height increases needed. If it is not possible, return -1. Write a function `minIncreases(heights)` to determine the required result. Input: - An array of integers `heights[]` of size `n` representing building heights (1 ≤ n ≤ 10^5, 1 ≤ heights[i] ≤ 10^9). Output: - An integer representing the minimum number of height increases required to make all buildings equal, or -1 if it is not possible. Examples: Input 1. `heights = [4, 7, 8, 6]` 2. `heights = [1, 2, 3]` 3. `heights = [5, 5, 5]` 4. `heights = [2, 2, 2, 3, 5]` Output 1. 8 2. 3 3. 0 4. 4 Explanation: Example 1: To make all buildings the same height: - Increase height of `4` to `8` requires `4` increases. - Increase height of `7` to `8` requires `1` increase. - Increase height of `6` to `8` requires `2` increases. Thus, the total number of height increases is 4 + 1 + 2 = 7. Example 2: To make all buildings the same height: - Increase height of `1` to `3` requires `2` increases. - Increase height of `2` to `3` requires `1` increase. Thereby\'s the total number of height increases is 2 + 1 = 3. Example 3: All buildings already have equal height. Thus, no height increase is needed and the output is `0`. Example 4: To make all buildings the same height: - Increase height of `2` to `5` requires `3` increases for two buildings. - Increase height of `3` to `5` requires `2` increases. Thus, the total number of height increases is 3 + 3 + 2 = 8.","solution":"def minIncreases(heights): if not heights: return -1 max_height = max(heights) total_increases = 0 for height in heights: total_increases += max_height - height return total_increases"},{"question":"A telecommunications company wants to develop an application that simulates a simple messaging protocol over a network. The application must handle packets containing characters and deliver them to the correct recipient. The network has the following constraints: * A packet contains a string of characters associated with one recipient. * Each string contains up to 100 characters, but cannot be empty. * Every packet has a unique packet number. The application must determine if the messages are delivered correctly according to their packet number sequence. If any packet is out of order (i.e., a packet with a lower number is received after a higher number has already been received), the message delivery is considered to be corrupted for that recipient. # Input The input consists of several test cases representing different recipients and their packets, followed by a terminator line \\"END\\". Each test case starts with the recipient\'s name (a single word with up to 10 alphanumeric characters), followed by one or several packets, each containing: - An integer packet number (1 to 10^6). - A string message of up to 100 characters. - The word \\"END\\" signaling the end of the input. # Output For each test case (recipient), output \\"Success\\" if all packets are in order, or \\"Corrupted\\" if any packet arrived out of order. # Example Input: ``` Alice 1 HelloAlice 2 HowAreYou 3 Goodbye END Bob 3 Hi 1 Hello END Charlie 1 ThisIsCharlie END END ``` Output: ``` Alice Success Bob Corrupted Charlie Success ``` # Explanation 1. For \\"Alice\\", the packets (1, 2, 3) are received in order. 2. For \\"Bob\\", the packets are received out of order (3 comes before 1). 3. For \\"Charlie\\", there is only one packet thus considered in order.","solution":"def check_message_delivery(input_data): results = [] lines = input_data.split(\'n\') i = 0 while i < len(lines): if lines[i] == \\"END\\": break recipient = lines[i] i += 1 packet_numbers = [] while lines[i] != \\"END\\": packet_info = lines[i].split(\' \', 1) packet_number = int(packet_info[0]) packet_numbers.append(packet_number) i += 1 if packet_numbers == sorted(packet_numbers): results.append(f\\"{recipient} Success\\") else: results.append(f\\"{recipient} Corrupted\\") i += 1 return results"},{"question":"You are given two arrays of positive integers, representing two sets of coins. Your task is to determine if you can make both sets of coins have the same sum by performing the following operation any number of times: choose a coin from the first set and a coin from the second set and swap them. Output \\"YES\\" if it is possible to make both sets have the same sum, and \\"NO\\" otherwise. -----Input----- - The first line contains two integers, n and m (1 ≤ n, m ≤ 100), which represent the number of coins in the first and the second set, respectively. - The second line contains n integers, representing the values of the coins in the first set. - The third line contains m integers, representing the values of the coins in the second set. -----Output----- - Output \\"YES\\" if it is possible to make the sets have equal sums by swapping coins, and \\"NO\\" otherwise. -----Examples----- Input 3 3 1 2 5 2 4 6 Output YES Input 4 3 1 1 1 1 1 1 5 Output NO","solution":"def can_make_equal_sum(n, m, set1, set2): Checks if it is possible to make the sum of two sets equal by swapping any number of elements between them. sum1 = sum(set1) sum2 = sum(set2) for coin1 in set1: for coin2 in set2: new_sum1 = sum1 - coin1 + coin2 new_sum2 = sum2 - coin2 + coin1 if new_sum1 == new_sum2: return \\"YES\\" return \\"NO\\""},{"question":"Oliver has a collection of antique coins, each having a unique value. He wants to display the coins in a museum but due to limited space, he can only display a continuous segment of the coin collection. Oliver wants the sum of the coin values of the displayed segment to be as close to a given target value as possible. Given an array of n integers representing the values of the coins and a target sum, your task is to find the sum of the continuous segment that is closest to the target sum. Input The first line contains two space-separated integers n and target (1 ≤ n ≤ 100, |target| ≤ 10^4) — the number of coins and the target sum. The following line contains n space-separated integers vi (-1000 ≤ vi ≤ 1000) — the values of the coins. Output Output the closest sum to the target that can be obtained from any continuous segment of the coin collection. Examples Input 5 10 -3 4 2 -1 5 Output 10 Input 3 -2 1 -1 -3 Output -3","solution":"def closest_sum_to_target(n, target, values): closest_sum = float(\'inf\') current_sum = 0 for start in range(n): current_sum = 0 for end in range(start, n): current_sum += values[end] if abs(current_sum - target) < abs(closest_sum - target): closest_sum = current_sum return closest_sum"},{"question":"You are working as a developer for a text editing software company, and you have been asked to implement a \'word count\' feature. This feature should count the number of times each unique word appears in a given text document, ignoring case. Given the input of a single text document, write a function to count the frequency of each unique word and output the results in alphabetical order. Input: A single string representing the entire document. Output: For each unique word, output the word and its frequency in the format \\"word: frequency\\" on separate lines. Print the words in alphabetical order. Assumptions: - Words are case-insensitive, meaning \\"Word\\" and \\"word\\" are considered the same. - Words are separated by any whitespace (spaces, tabs, newlines). - Punctuation marks (.,!? etc.) are not part of words and should be ignored. Constraints: - The document string will have a maximum length of 10000 characters. - Each word will have a maximum length of 100 characters. SAMPLE INPUT \\"We only write once, but read hundreds of times. Read and write efficiently.\\" SAMPLE OUTPUT and: 1 but: 1 efficiently: 1 hundreds: 1 of: 1 only: 1 once: 1 read: 2 times: 1 we: 1 write: 2 Explanation: The input document contains the words: \\"We\\", \\"only\\", \\"write\\", \\"once\\", \\"but\\", \\"read\\", \\"hundreds\\", \\"of\\", \\"times.\\", \\"Read\\", \\"and\\", \\"write\\", \\"efficiently.\\" After processing, converting to lowercase and removing punctuation: \\"we\\", \\"only\\", \\"write\\", \\"once\\", \\"but\\", \\"read\\", \\"hundreds\\", \\"of\\", \\"times\\", \\"read\\", \\"and\\", \\"write\\", \\"efficiently\\" Giving the frequencies as: \\"and\\" -> 1 \\"but\\" -> 1 \\"efficiently\\" -> 1 \\"hundreds\\" -> 1 \\"of\\" -> 1 \\"only\\" -> 1 \\"once\\" -> 1 \\"read\\" -> 2 \\"times\\" -> 1 \\"we\\" -> 1 \\"write\\" -> 2 Which when sorted alphabetically yield the sample output.","solution":"import re from collections import defaultdict def word_count(text): Counts the frequency of each unique word in a given text document and returns the result as a list of tuples in alphabetical order. Parameters: text (str): The string representing the entire document. Returns: List[Tuple[str, int]]: A list of tuples where each tuple contains a word and its frequency. # Convert text to lowercase to make it case-insensitive text = text.lower() # Remove punctuation using regex and split by whitespace words = re.findall(r\'bw+b\', text) # Count the frequency of each word frequency = defaultdict(int) for word in words: frequency[word] += 1 # Convert to a sorted list of tuples (word, frequency) sorted_word_count = sorted(frequency.items()) return sorted_word_count"},{"question":"A robot is placed at the top-left corner of an n times n grid. The robot can move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid but with some obstacles inserted at certain points on the grid. We need to find all possible paths through which the robot can reach the destination considering the obstacles. Input Format The first line contains an integer mathbf{T} denoting the number of test cases. Each test case starts with an integer mathbf{n} denoting the grid size. The next integer mathbf{k} specifies the number of obstacles. Each of the next mathbf{k} lines contains two integers mathbf{x} and mathbf{y} denoting the 1-based coordinates of the obstacles. Output Format For each test case, print a single integer, the number of possible unique paths the robot can take to reach the bottom-right corner, avoiding the obstacles. Constraints 1 leq T leq 50 2 leq n leq 100 0 leq k leq n^2 - 2 It is guaranteed that the starting cell (1, 1) and the destination cell (n, n) do not have obstacles. Sample Input 1 3 2 2 2 3 1 Sample Output 1 Explanation For the given grid size of 3 and obstacles at points (2,2) and (3,1), the unique paths from (1,1) to (3,3) are limited by the obstacle placements. The only valid path is: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3). Thus, the number of valid paths is 1.","solution":"def unique_paths_with_obstacles(n, obstacles): Given an n x n grid with obstacles, this function calculates the number of unique paths from the top-left corner to the bottom-right corner. Parameters: n (int): Size of the grid (n x n) obstacles (list of tuples): List of obstacles\' coordinates (1-based) Returns: int: Number of unique paths # Converting obstacles to 0-based indexing for easier usage in the grid obstacle_set = {(x-1, y-1) for x, y in obstacles} # Initialize the grid with all 0s grid = [[0] * n for _ in range(n)] grid[0][0] = 1 # Start point # Fill the grid for i in range(n): for j in range(n): if (i, j) in obstacle_set: grid[i][j] = 0 # Set cells with obstacles to 0 paths else: if i > 0: grid[i][j] += grid[i-1][j] if j > 0: grid[i][j] += grid[i][j-1] return grid[n-1][n-1] def solve(test_cases): results = [] for n, k, obstacles in test_cases: results.append(unique_paths_with_obstacles(n, obstacles)) return results"},{"question":"You are given a sequence of n integers. You need to process m queries, each query being one of the following types: 1. Update the value at position i to a new value val. 2. Compute the sum of integers in the subarray from index l to index r (inclusive). Your task is to implement a data structure that can efficiently handle these operations. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100000). The second line contains n integers a1, a2, ..., an. The next m lines contain a query in one of the following formats: 1. `1 i val` — update the value at position i to val. 2. `2 l r` — compute the sum of integers in the subarray from index l to r (inclusive). It is guaranteed that 1 ≤ i, l, r ≤ n and 1 ≤ val, ai ≤ 10^9. Output For each query of the second type, print the result of the query on a new line. Examples Input 5 5 1 2 3 4 5 2 1 3 1 3 10 2 1 3 1 5 6 2 1 5 Output 6 13 23 Explanation Initially, the array is [1, 2, 3, 4, 5]. - The first query is to find the sum of the subarray from index 1 to 3, which is 1 + 2 + 3 = 6. - The second query is to update the value at position 3 to 10, so the array becomes [1, 2, 10, 4, 5]. - The third query is to find the sum of the subarray from index 1 to 3, which is 1 + 2 + 10 = 13. - The fourth query is to update the value at position 5 to 6, so the array becomes [1, 2, 10, 4, 6]. - The fifth query is to find the sum of the subarray from index 1 to 5, which is 1 + 2 + 10 + 4 + 6 = 23.","solution":"class SegmentTree: def __init__(self, array): n = len(array) self.n = n self.tree = [0] * (2 * n) self._build(array) def _build(self, array): # Build the tree for i in range(self.n): self.tree[self.n + i] = array[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, index, value): # Update the value at index pos = self.n + index - 1 self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, left, right): # Compute the sum in range [left, right] left = self.n + left - 1 right = self.n + right - 1 s = 0 while left <= right: if left % 2 == 1: s += self.tree[left] left += 1 if right % 2 == 0: s += self.tree[right] right -= 1 left //= 2 right //= 2 return s def process_queries(n, m, array, queries): seg_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: _, index, value = query seg_tree.update(index, value) elif query[0] == 2: _, left, right = query results.append(seg_tree.range_sum(left, right)) return results"},{"question":"Write a function that receives a list of integers and an integer k. Your function should return True if there are two distinct indices i and j in the list such that nums[i] + nums[j] equals k. Otherwise, return False. Examples: ``` [1, 2, 3, 4], 5 => True (1+4 or 2+3) [1, 2, 3, 4], 10 => False [1, 1, 1, 1], 2 => True (1+1) [1, 2, 3, 4], 7 => True (3+4) [5, 5], 10 => True (5+5) [5], 10 => False (not enough numbers to add up to 10) ```","solution":"def has_pair_with_sum(nums, k): Returns True if there are two distinct indices i and j in the list such that nums[i] + nums[j] equals k. seen = set() for num in nums: if k - num in seen: return True seen.add(num) return False"},{"question":"Given a list of integers, you are required to remove all the duplicate integers and return a list containing only unique integers in the order they first appeared in the input list. Write a function `remove_duplicates` that receives a list of integers and returns a new list following the above requirement. INPUT: - A single line containing the list of integers separated by spaces. OUTPUT: - A single line of integers representing the list after removing duplicates. CONSTRAINTS: - The input list can have between 1 and 10^5 integers. - Each integer in the list is between -10^6 and 10^6. FUNCTION SIGNATURE: ```python def remove_duplicates(arr: List[int]) -> List[int]: pass ``` SAMPLE INPUT: ``` 1 2 2 3 4 3 5 6 6 ``` SAMPLE OUTPUT: ``` 1 2 3 4 5 6 ```","solution":"from typing import List def remove_duplicates(arr: List[int]) -> List[int]: Removes duplicates from the list and returns a list of unique integers in the order they first appeared. seen = set() unique_list = [] for num in arr: if num not in seen: unique_list.append(num) seen.add(num) return unique_list"},{"question":"You are given a sequence of numbers where every number occurs thrice, except for one. Your task is to find that single number that occurs only once. Consider the sequence: 2, 2, 3, 2, 4, 4, 4 In this sequence, 3 is the number that appears only once. Write a program that takes an input list of numbers and returns the number that occurs only once. -----Input----- First line contains an integer n (1 ≤ n ≤ 3*10^5) — the length of the sequence. Second line contains n space-separated integers where every integer occurs thrice except for one. -----Output----- Output the single integer that occurs exactly once. -----Examples----- Input 7 2 2 3 2 4 4 4 Output 3 Input 10 1 1 1 5 5 5 6 6 6 9 Output 9 Input 4 9 9 9 7 Output 7 -----Note----- In the first example, 3 is the only number that appears exactly once in the sequence. All other numbers appear thrice.","solution":"def find_single_number(nums): Returns the number that appears only once in the list where every other number appears three times. ones, twos = 0, 0 for num in nums: ones = (ones ^ num) & ~twos twos = (twos ^ num) & ~ones return ones"},{"question":"A famous e-commerce company is planning to launch a flash sale, wherein a limited number of items are sold at a discounted price. To manage the flash sale efficiently, the company needs to ensure that each customer can purchase exactly one item per successful transaction. The sale will continue until all items are sold out or there are no more interested customers. For each test case, you are given the number of items available, the list of customers represented by their unique IDs, and the IDs of the customers who attempted to purchase the items. Your task is to determine which customers were successful in purchasing the items. ------ Input Format ------ - The first line of input contains an integer T, the number of testcases. The description of T test cases follows. - The first line of each test case contains an integer N, the number of items available for the flash sale. - The second line of each test case contains an integer M, the total number of customers interested in the flash sale. - The third line contains M space-separated integers representing the customer IDs of the interested customers in the order they attempted to purchase the items. ------ Output Format ------ For each test case, print the list of customer IDs (space-separated) who successfully purchased an item. If no customers were successful, print \\"No Sales\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 1000 0 ≤ Customer ID ≤ 10^6 ------ Sample Input 1 ------ 3 5 7 1 2 3 4 5 6 7 3 5 10 20 10 30 20 2 2 100 200 ------ Sample Output 1 ------ 1 2 3 4 5 10 20 30 100 200 ------ Explanation 1 ------ - In the first test case, there are 5 items and 7 customers. The first 5 customers purchase the items successfully. - In the second test case, there are 3 items and 5 customers. The first 3 distinct customers (IDs 10, 20, and 30) get the items. - In the third test case, there are 2 items and 2 customers. Both customers purchase the items successfully. Remember, each customer can purchase only one item, and the flash sale is operated on a first-come, first-served basis.","solution":"def flash_sale(num_cases, case_details): Determines the customers who successfully purchased items in each flash sale case. Parameters: num_cases (int): The number of test cases. case_details (list): A list of tuples, where each tuple consists of: - num_items (int): Number of items available. - num_customers (int): Number of customers interested. - customer_attempts (list): List of customer IDs attempting to buy items. Returns: list: A list of lists where each sublist contains the IDs of customers who successfully purchased items. results = [] for i in range(num_cases): num_items, num_customers, customer_attempts = case_details[i] successful_customers = [] customer_tracker = set() for customer_id in customer_attempts: if customer_id not in customer_tracker: customer_tracker.add(customer_id) successful_customers.append(customer_id) if len(successful_customers) == num_items: break if not successful_customers: results.append(\\"No Sales\\") else: results.append(\\" \\".join(map(str, successful_customers))) return results"},{"question":"In a city with M roads and N intersections, the traffic control department needs to analyze traffic flow to make future road planning decisions. The city\'s road network can be represented as a directed graph where each intersection is a node and each road is a directed edge connecting two nodes with a given travel time. Given this network, your task is to determine the shortest travel time from intersection A to intersection B for Q queries. The road network does not have any negative weight cycles. Input The first line contains two integers N and M, the number of intersections and roads respectively. (1 ≤ N ≤ 1000, 1 ≤ M ≤ 10000) Each of the next M lines contains three integers U, V, and T, representing a directed road from intersection U to intersection V with a travel time T. (1 ≤ U, V ≤ N, 1 ≤ T ≤ 100) The next line contains one integer Q, the number of queries. (1 ≤ Q ≤ 1000) Each of the next Q lines contains two integers A and B, representing a query to find the shortest travel time from intersection A to intersection B. (1 ≤ A, B ≤ N) Output For each query, output the shortest travel time from intersection A to intersection B on a new line. If there is no path from A to B, output -1. Examples Input 5 6 1 2 4 1 3 2 3 2 1 2 4 7 3 4 4 4 5 1 3 1 5 2 1 3 4 Output 7 -1 4 Note In this example, there are 5 intersections and 6 roads. The first query asks for the shortest travel time from intersection 1 to intersection 5, which is 7. The second query asks for the shortest travel time from intersection 2 to intersection 1, which is not possible, so the output is -1. The third query asks for the shortest travel time from intersection 3 to intersection 4, which is 4.","solution":"import heapq def dijkstra(graph, start, n): Returns the shortest distances from start to all other nodes using Dijkstra\'s algorithm. distances = {node: float(\'infinity\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_travel_times(n, m, edges, queries): graph = {i: [] for i in range(1, n + 1)} for u, v, t in edges: graph[u].append((v, t)) results = [] for a, b in queries: distances = dijkstra(graph, a, n) travel_time = distances[b] if distances[b] != float(\'infinity\') else -1 results.append(travel_time) return results"},{"question":"A company organizes an annual conference where employees from various departments present their projects. Each project represents a department, but multiple projects can belong to the same department. After the presentations, audience members vote for the best project by sending emails to a secure email server. Your task is to analyze the votes and determine which department\'s projects received the highest number of votes, and identify the \\"Project of the Year\\" (the project that received the highest number of votes). Note 1: If multiple departments have the maximum number of votes, the department with the lexicographically smaller name should be selected as the winner. Similarly, if multiple projects have the same maximum number of votes, the project with the lexicographically smaller name should be selected as the \\"Project of the Year\\". Note 2: A string A = a1a2...an is lexicographically smaller than a string B = b1b2...bm if: - There exists an index i ≤ min{n, m} such that aj = bj for 1 ≤ j < i and ai < bi; or - A is a proper prefix of B, i.e., n < m and aj = bj for 1 ≤ j ≤ n. Characters are compared based on their ASCII values. -----Input----- The first line contains two space-separated integers N and M, representing the number of projects and the number of votes respectively. Each of the next N lines contains two space-separated strings, denoting the project name and its department. Each of the following M lines contains a string representing the subject of an email (the name of the project voted for). -----Output----- The output should consist of two lines: 1. The name of the department whose projects received the most votes. 2. The name of the project that is selected as the \\"Project of the Year\\". -----Constraints----- - 1 ≤ N ≤ 10000 (10^4) - 1 ≤ M ≤ 100000 (10^5) - Each string in the input contains only English letters (uppercase or lowercase). - Each string in the input has a length not exceeding 15. - All project names are distinct. - The subject of each email will match the name of one of the projects. -----Example 1----- Input: 1 3 Apollo Research Apollo Apollo Apollo Output: Research Apollo -----Example 2----- Input: 3 4 Titan Aerospace Zephyr Aviation Orion Aerospace Titan Zephyr Titan Orion Output: Aerospace Titan -----Example 3----- Input: 2 2 Gemini Communications Virgo Media Virgo Virgo Output: Media Virgo -----Explanation----- Example 1: There is only one project, Apollo, from the Research department, and it received all the votes. Hence, Research is the department winner, and Apollo is the \\"Project of the Year\\". Example 2: The Aerospace department includes both the Titan and Orion projects which received a total of 3 votes (2 for Titan and 1 for Orion). Aviation department\'s project Zephyr received just 1 vote. Thus, Aerospace received the highest total votes. Titan received the highest number of votes individually among all projects, making it the \\"Project of the Year\\". Example 3: The Media department\'s project Virgo received both votes, making Media the department winner and Virgo the \\"Project of the Year\\".","solution":"def determine_winners(N, M, projects, votes): from collections import defaultdict project_to_department = {} department_votes = defaultdict(int) project_votes = defaultdict(int) for project, department in projects: project_to_department[project] = department for vote in votes: project_votes[vote] += 1 department_votes[project_to_department[vote]] += 1 # Determine Department winner max_department_votes = max(department_votes.values()) winning_departments = [dep for dep, v in department_votes.items() if v == max_department_votes] winning_department = min(winning_departments) # Determine Project of the Year max_project_votes = max(project_votes.values()) winning_projects = [proj for proj, v in project_votes.items() if v == max_project_votes] winning_project = min(winning_projects) return winning_department, winning_project"},{"question":"Write a program that identifies whether a given point lies inside, on the boundary, or outside of a convex polygon. Input The input consists of two parts: 1. A sequence of datasets representing the vertices of the convex polygon. 2. Multiple sets of two integers, representing the coordinates of the point to be checked. Each dataset begins with an integer n (3 ≤ n ≤ 100), the number of vertices of the polygon, followed by n pairs of integers x_i and y_i (-1000 ≤ x_i, y_i ≤ 1000). The points are given in counterclockwise order. Following the polygon vertices, there will be a series of sets of coordinates representing the points to be checked, with each set consisting of two integers x and y (-1000 ≤ x, y ≤ 1000). The end of this input is indicated by a line containing a single integer 0. Output For each point, your program should return \\"inside\\" if the point lies strictly inside the polygon, \\"boundary\\" if the point lies on the boundary of the polygon, and \\"outside\\" if the point lies outside the polygon. Each output should be on a new line corresponding to the respective point. Example Input 4 0 0 4 0 4 4 0 4 2 2 4 4 6 6 0 Output inside boundary outside","solution":"def is_point_in_polygon(n, vertices, point): Determines whether a point is inside, on the boundary or outside of a convex polygon. :param n: Number of vertices in the polygon :param vertices: List of tuples representing the vertices of the polygon :param point: Tuple representing the point to be checked :return: \'inside\', \'boundary\', or \'outside\' def check_orientation(p, q, r): Return orientation of the triplet (p, q, r). 0 -> p, q and r are collinear 1 -> Clockwise 2 -> Counterclockwise val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]) if val == 0: return 0 return 1 if val > 0 else 2 def on_segment(p, q, r): Check if point q lies on segment pr if min(p[0], r[0]) <= q[0] <= max(p[0], r[0]) and min(p[1], r[1]) <= q[1] <= max(p[1], r[1]): return True return False polygons_count = n x, y = point extreme = (x, 9999) # A point far outside the polygon in the x-direction count_intersections = 0 i = 0 while True: next = (i + 1) % polygons_count # Check if the point is on the boundary if (check_orientation(vertices[i], point, vertices[next]) == 0 and on_segment(vertices[i], point, vertices[next])): return \\"boundary\\" if (check_orientation(vertices[i], point, extreme) != check_orientation(vertices[next], point, extreme) and (check_orientation(vertices[i], vertices[next], point) != check_orientation(vertices[i], vertices[next], extreme))): count_intersections += 1 i = next if (i == 0): break # odd count of intersections means inside return \\"inside\\" if count_intersections % 2 == 1 else \\"outside\\" def classify_points(n, vertices, points): results = [] for point in points: results.append(is_point_in_polygon(n, vertices, point)) return results"},{"question":"Write a function that finds all unique pairs of integers in an array that sum up to a specific target. * You should consider each pair of integers only once, i.e., (a, b) and (b, a) are considered the same pair. For example, for the array [1, 2, 3, 4, 5] and target 5, the valid pairs are: * (1, 4) * (2, 3) Note Constraints * The array will contain between 2 and 100 integers. * Each integer in the array will be between -1000 and 1000. * The target sum will be between -2000 and 2000. Input The input consists of multiple datasets. For each dataset, two lines are given: - The first line contains an integer n — the number of elements in the array. - The second line contains n integers — the elements of the array. The input ends with a single integer 0 for n. Your program should not process this terminal symbol. Output For each dataset, print each pair of integers that sum up to the target on a new line in alphabetical order of the pair (considering the first integer). Example Input 5 1 2 3 4 5 8 0 Output 3 5","solution":"def find_pairs_with_sum(array, target): Finds all unique pairs of integers that sum up to the specific target. found_pairs = set() seen_numbers = set() for num in array: complement = target - num if complement in seen_numbers: pair = tuple(sorted((num, complement))) found_pairs.add(pair) seen_numbers.add(num) # Convert set to sorted list pair_list = sorted(list(found_pairs)) result = [f\\"{a} {b}\\" for a, b in pair_list] return result def process_inputs(data): Processes multiple datasets from the input. results = [] i = 0 while i < len(data): n = int(data[i]) if n == 0: break array = list(map(int, data[i + 1].split())) target = int(data[i + 2]) pairs = find_pairs_with_sum(array, target) results.extend(pairs) i += 3 return results"},{"question":"Write a function `merge_sort` that takes a list of integers and sorts it using the merge sort algorithm. Merge sort divides the input list into two halves, recursively sorts each half, and then merges the two sorted halves to produce the sorted list. You are required to demonstrate the function with the given input. # Input - A single line containing space-separated integers representing the list to be sorted. (The list can have up to 50 integers). # Output - A single line of space-separated integers representing the sorted list. # Example Input `34 7 23 32 5 62` Output `5 7 23 32 34 62`","solution":"def merge_sort(lst): Sorts a list of integers using the merge sort algorithm. if len(lst) <= 1: return lst mid = len(lst) // 2 left_half = merge_sort(lst[:mid]) right_half = merge_sort(lst[mid:]) return merge(left_half, right_half) def merge(left, right): Helper function to merge two sorted lists. sorted_list = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: sorted_list.append(left[i]) i += 1 else: sorted_list.append(right[j]) j += 1 sorted_list.extend(left[i:]) sorted_list.extend(right[j:]) return sorted_list # Example usage: # input_list = [34, 7, 23, 32, 5, 62] # sorted_list = merge_sort(input_list) # print(\\" \\".join(map(str, sorted_list)))"},{"question":"Given an array of N integers, your task is to determine the minimum difference between the maximum and minimum integer values in a subarray of length K from the given array. Input - The first line contains two integers N and K. - The second line contains N integers - the elements of the array. Output Output a single integer - the minimum difference between the maximum and minimum integer values in any subarray of length K from the array. Constraints 2 ≤ K ≤ N ≤ 10^5 0 ≤ A[i] ≤ 10^5 SAMPLE INPUT 7 3 10 100 300 200 1000 20 30 SAMPLE OUTPUT 20 Explanation The subarray [10, 20, 30] has a difference of 20 between its maximum (30) and minimum (10) values, which is the minimum difference possible in any subarray of length 3.","solution":"def min_diff_subarray(arr, N, K): Returns the minimum difference between the maximum and minimum integer values in any subarray of length K from the given array. arr.sort() min_diff = float(\'inf\') for i in range(N - K + 1): current_diff = arr[i + K - 1] - arr[i] if current_diff < min_diff: min_diff = current_diff return min_diff # Example usage N = 7 K = 3 arr = [10, 100, 300, 200, 1000, 20, 30] print(min_diff_subarray(arr, N, K)) # Output: 20"},{"question":"In a parallel universe, Lila lives on a Mars colony which is structured as a rectangular grid of size n × m, with rows numbered 1 through n from top to bottom, and columns numbered 1 through m from left to right. Each cell in the grid represents either empty space or an obstacle. Lila can travel in empty spaces but cannot traverse obstacles. Lila can move left, right, up, or down to an adjacent cell if it is within the grid and not an obstacle. You are given two queries that provide the current positions of Lila, and your task is to determine if there is a path for Lila to move from the starting cell to the destination cell. You should print \\"YES\\" if a path exists, and \\"NO\\" if it doesn’t. Input The first input line contains two space-separated integers n (2 ≤ n ≤ 200) and m (2 ≤ m ≤ 200) — the number of rows and columns in the grid, respectively. The next n lines each contain a string of length m consisting of characters \'.\' and \'#\'. The character \'.\' indicates that the cell is empty space while the character \'#\' indicates that the cell is an obstacle. The third input line contains four integers r1, c1, r2, and c2 (1 ≤ r1, r2 ≤ n, 1 ≤ c1, c2 ≤ m) — the row and column numbers of the starting and ending cells respectively. Output If there is a path from the cell (r1, c1) to the cell (r2, c2), print \\"YES\\"; otherwise, print \\"NO\\". Example Input 4 4 .... ..#. .#.. .... 1 1 4 4 Output YES Note In the example above, there is a path from (1, 1) to (4, 4) through empty spaces only: (1,1) → (1,2) → (1,3) → (2,3) → (3,3) → (4,3) → (4,4).","solution":"def find_path(n, m, grid, r1, c1, r2, c2): from collections import deque directions = [(-1,0), (1,0), (0,-1), (0,1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' queue = deque([(r1-1, c1-1)]) visited = set([(r1-1, c1-1)]) while queue: x, y = queue.popleft() if (x, y) == (r2-1, c2-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given an array of integers representing the height of consecutive mountains. A mountain is defined as a sequence of consecutive numbers [a1, a2, ..., an] such that there exists an index i (1 < i < n) where a1 < a2 < ... < ai and ai > ai+1 > ... > an. Write a function to find the length of the longest mountain. If there is no mountain in the given array, return 0. Example 1: Input: heights = [2, 1, 4, 7, 3, 2, 5] Output: 5 Explanation: The longest mountain is [1, 4, 7, 3, 2] which has a length of 5. Example 2: Input: heights = [2, 2, 2] Output: 0 Explanation: There is no mountain in the array. Example 3: Input: heights = [0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0] Output: 11 Explanation: The entire array is a mountain with length 11. Constraints: 1 <= heights.length <= 10^4 0 <= heights[i] <= 10^4","solution":"def longest_mountain(heights): Returns the length of the longest mountain in the array heights. A mountain is defined as a sequence of consecutive numbers [a1, a2, ..., an] such that there exists an index i (1 < i < n) where a1 < a2 < ... < ai and ai > ai+1 > ... > an. Parameters: heights (list): List of integer heights. Returns: int: Length of the longest mountain. n = len(heights) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: left = i - 1 right = i + 1 while left > 0 and heights[left] > heights[left - 1]: left -= 1 while right < n - 1 and heights[right] > heights[right + 1]: right += 1 longest = max(longest, right - left + 1) return longest"},{"question":"A music streaming app keeps track of users\' favorite songs and artists based on their play history. Each user has a list of songs they have listened to, along with the artist of each song. The app wants to identify not only the most-played song for each user but also the most frequently played artist for each user. Create a program that inputs the user\'s listening history and outputs the most-played song and the most-played artist for each user. Input The input is given in the following format: u1 s1 a1 u1 s2 a2 :: un sn an Each line represents a user identifier ui (integer, 1 ≤ ui ≤ 1000), a song identifier si (integer, 1 ≤ si ≤ 10000), and an artist identifier ai (integer, 1 ≤ ai ≤ 1000). There will be at least one user and each user will have at least one song in their history. It is assumed that no user will have the same song more than once. Output For each unique user, output their user identifier, the identifier of their most-played song, and the identifier of their most-played artist, each on a new line, separated by spaces. If there is a tie for the most-played song or artist, output any one of the tied identifiers. Example Input 1 100 10 1 101 11 1 102 10 2 103 12 2 104 12 3 105 13 3 106 13 3 107 14 Output 1 100 10 2 103 12 3 105 13","solution":"from collections import defaultdict, Counter def most_played_songs_and_artists(data): # Structure to hold play history user_songs = defaultdict(list) user_artists = defaultdict(list) for entry in data: user, song, artist = entry user_songs[user].append(song) user_artists[user].append(artist) results = [] for user in user_songs: # Count the most played songs and most played artists song_counts = Counter(user_songs[user]) artist_counts = Counter(user_artists[user]) # Get the most common song and artist for the user most_played_song = max(song_counts, key=song_counts.get) most_played_artist = max(artist_counts, key=artist_counts.get) results.append(f\\"{user} {most_played_song} {most_played_artist}\\") return results # Example usage: input_data = [ (1, 100, 10), (1, 101, 11), (1, 102, 10), (2, 103, 12), (2, 104, 12), (3, 105, 13), (3, 106, 13), (3, 107, 14) ] print(most_played_songs_and_artists(input_data))"},{"question":"Write a function that converts a given integer to its corresponding Roman numeral. The function should accept an integer between 1 and 3999 (inclusive) and return the Roman numeral representation as a string. Roman numerals are represented by the following symbols: ``` Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 ``` For example: - 2 is written as II in Roman numeral, just two one\'s added together. - 12 is written as XII, which is simply X (10) + II (2). - The number 27 is written as XXVII, which is XX (20) + V (5) + II (2). Roman numerals are usually written from largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. As the Roman numeral system does not have a symbol for zero, there are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Your task is to implement the function `intToRoman()`, which accepts an integer and returns its corresponding Roman numeral as a string. Input: An integer n (1 <= n <= 3999). Output: A string representing the Roman numeral of the input integer. Example: Input: 3 Output: \\"III\\" Input: 58 Output: \\"LVIII\\" Input: 1994 Output: \\"MCMXCIV\\" Explanation: For 1994, the Roman numeral is: M = 1000, CM = 900, XC = 90 and IV = 4.","solution":"def intToRoman(num): Converts an integer between 1 and 3999 to its Roman numeral representation. value_to_symbol = [ (1000, \'M\'), (900, \'CM\'), (500, \'D\'), (400, \'CD\'), (100, \'C\'), (90, \'XC\'), (50, \'L\'), (40, \'XL\'), (10, \'X\'), (9, \'IX\'), (5, \'V\'), (4, \'IV\'), (1, \'I\') ] roman_numeral = \\"\\" for value, symbol in value_to_symbol: while num >= value: roman_numeral += symbol num -= value return roman_numeral"},{"question":"Text You are provided with a sequence of integer values representing temperature readings of a city over a period of days. The temperatures fluctuate daily. You need to identify the highest number of continuous days where the temperature was strictly increasing. Write a function `max_increasing_days` that takes in a list of integers `temperatures` representing the temperature readings and returns the length of the longest sub-sequence where the temperature readings are strictly increasing. # Input - The first line of input contains a single integer `n`, the number of temperature readings (1 ≤ n ≤ 10^5). - The second line contains `n` space-separated integers representing the temperature readings (-100 ≤ temperature ≤ 100). # Output - Output a single integer representing the length of the longest sub-sequence of strictly increasing temperature readings. # Example Input 8 7 2 3 5 6 2 3 4 Output 4 # Explanation The longest sequence of strictly increasing temperature readings is `2 3 5 6` which has a length of 4.","solution":"def max_increasing_days(temperatures): if not temperatures: return 0 max_length = 0 current_length = 1 for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Given an integer `n`, determine the minimum number of operations required to reduce `n` to 1. You can perform either of the following 3 operations any number of times: 1. If `n` is divisible by 2, divide it by 2. 2. If `n` is divisible by 3, divide it by 3. 3. Subtract 1 from `n`. ----- Input Format ------ - The first line contains a single integer `T` — the number of test cases. Then the test cases follow. - Each of the next `T` lines contains a single integer `n`. ----- Output Format ------ For each testcase, output the minimum number of operations required to reduce `n` to 1. ----- Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ n ≤ 10^6 ----- Sample Input 1 ------ 3 10 15 6 ----- Sample Output 1 ------ 3 4 2 ----- explanation 1 ------ Test case 1: One optimal sequence of operations is: 10 → 9 → 3 → 1 (subtract 1, subtract 1, divide by 3). Test case 2: One optimal sequence of operations is: 15 → 5 → 4 → 2 → 1 (divide by 3, subtract 1, subtract 1, divide by 2). Test case 3: One optimal sequence of operations is: 6 → 2 → 1 (divide by 3, divide by 2).","solution":"def min_operations(n): Returns the minimum number of operations required to reduce n to 1. dp = [0] * (n + 1) for i in range(2, n + 1): dp[i] = dp[i - 1] + 1 if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) return dp[n] def min_operations_for_tests(test_cases): Given a list of test cases, returns a list of the minimum operations for each test case. return [min_operations(n) for n in test_cases] def solve(input_lines): Processes multiple test cases from input and returns the results as required by the problem statement. T = int(input_lines[0]) test_cases = [int(input_lines[i]) for i in range(1, T + 1)] result = min_operations_for_tests(test_cases) return result"},{"question":"Given a 2D grid of size m x n where each cell is either a \'0\' (an empty cell) or a \'1\' (a cell containing an obstacle), you need to find the length of the shortest path from the top-left cell (0, 0) to the bottom-right cell (m-1, n-1). You can move up, down, left, or right from a cell and you cannot travel through cells containing obstacles. Output the length of the shortest path. If no such path exists, output -1. ------ Input ------ The first line contains an integer T denoting the total number of test cases. For each test case, the first line contains two integers m and n denoting the number of rows and columns of the grid. The next m lines contain n characters each representing the grid. ------ Output ------ For each test case, output the length of the shortest path as described, or -1 if no such path exists. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ m, n ≤ 100 The grid will only contain characters \'0\' and \'1\'. ------ Sample Input 1 ------ 2 3 3 000 010 000 3 3 011 010 110 ------ Sample Output 1 ------ 4 -1","solution":"from collections import deque def shortest_path(grid): m = len(grid) n = len(grid[0]) if grid[0][0] == \'1\' or grid[m-1][n-1] == \'1\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == m - 1 and y == n - 1: return dist for dx, dy in directions: new_x, new_y = x + dx, y + dy if 0 <= new_x < m and 0 <= new_y < n and (new_x, new_y) not in visited and grid[new_x][new_y] == \'0\': visited.add((new_x, new_y)) queue.append((new_x, new_y, dist + 1)) return -1 def process_input(input_string): inputs = input_string.strip().split(\'n\') T = int(inputs[0]) results = [] index = 1 for _ in range(T): m, n = map(int, inputs[index].split()) index += 1 grid = [list(inputs[index + i]) for i in range(m)] index += m results.append(shortest_path(grid)) return results"},{"question":"A unique paint mixing machine dispenses color droplets in a sequence. Each droplet can be one of \'R\' (Red), \'G\' (Green), or \'B\' (Blue). The machine is designed to follow these rules: 1. No two consecutive droplets can be the same color. 2. The total numbers of \'R\', \'G\', and \'B\' droplets each must be the same. Given a sequence of dispensed droplets, determine if the sequence is valid according to these rules. Example 1: Input: N = 6 sequence = \\"RGBRGB\\" Output: Valid Example 2: Input: N = 5 sequence = \\"RGRBG\\" Output: Invalid Example 3: Input: N = 9 sequence = \\"RGBRGBRGB\\" Output: Valid Your Task: You don\'t need to read input or print anything. Your task is to complete the function isValidSequence() which takes the array sequence[] and its size N as inputs and returns \\"Valid\\" if the sequence is correct. Otherwise, return \\"Invalid\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{6} sequence[i] ∈ {\'R\', \'G\', \'B\'}","solution":"def isValidSequence(N, sequence): if N % 3 != 0: return \\"Invalid\\" # Checking if the counts of \'R\', \'G\', and \'B\' are the same count_R = sequence.count(\'R\') count_G = sequence.count(\'G\') count_B = sequence.count(\'B\') if not (count_R == count_G == count_B): return \\"Invalid\\" # Checking if no two consecutive droplets are the same color for i in range(1, N): if sequence[i] == sequence[i-1]: return \\"Invalid\\" return \\"Valid\\""},{"question":"Write a function that takes in an array of positive integers and an integer `k` representing the size of a subarray. Your goal is to find the subarray of length `k` with the maximum possible sum and return that sum. For example, given an array `[2, 1, 5, 1, 3, 2]` and `k` = 3, the subarray `[5, 1, 3]` has the maximum sum of 9. Your function should be efficient with a time complexity of O(n).","solution":"def max_sum_subarray(arr, k): Finds the maximum sum of a subarray with length `k` in the given array `arr`. Parameters: arr (list of int): A list of positive integers. k (int): Size of the subarray. Returns: int: The maximum sum of a subarray of size `k`. # Initialize the maximum sum with the sum of the first subarray of size `k` max_sum = cur_sum = sum(arr[:k]) # Iterate through the array starting from the k-th element for i in range(k, len(arr)): # Update the current sum by sliding the window to the right cur_sum += arr[i] - arr[i - k] # Update the maximum sum if the current sum is greater max_sum = max(max_sum, cur_sum) return max_sum"},{"question":"Design a function that takes a list of integers and returns a dictionary where each key is a unique integer from the list, and the corresponding value is the count of how many times that integer appears in the list. Your function should be able to handle negative integers and zero as well. ------ Input Format ------ - A single line containing a space-separated list of integers. ------ Output Format ------ - A dictionary where keys are the unique integers from the input list and values are their counts. ------ Example Input ------ 3 5 3 2 -1 2 2 3 3 5 -1 0 0 0 ------ Example Output ------ {-1: 2, 0: 3, 2: 3, 3: 4, 5: 2} ------ Explanation ------ The input list contains the numbers [3, 5, 3, 2, -1, 2, 2, 3, 3, 5, -1, 0, 0, 0]. The number 3 appears 4 times, 5 appears 2 times, 2 appears 3 times, -1 appears 2 times, and 0 appears 3 times. Thus, the output dictionary is constructed with each unique number as a key and their corresponding counts as values.","solution":"def count_integers(int_list): Returns a dictionary where keys are unique integers from the list and values are their counts. count_dict = {} for num in int_list: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return count_dict"},{"question":"Problem Statement You are given an array of integers and an integer k. Your task is to determine whether it\'s possible to split the array into multiple non-overlapping subarrays such that the sum of elements in each subarray is greater than or equal to k. Constraints 1 <= n <= 1000 (length of the array) 1 <= k <= 10^6 1 <= array[i] <= 10^6 (array element values) Input - The first line contains an integer n, the size of the array. - The second line contains n space-separated integers representing the elements of the array. - The third line contains an integer k, the target sum for each subarray. Output Output \\"YES\\" if it is possible to split the array as described, otherwise output \\"NO\\". Example Input: 6 1 2 3 4 5 6 10 Output: YES Explanation: One possible way to split the array is [1, 2, 3, 4] and [5, 6] where each subarray has a sum >= 10.","solution":"def can_split_array(arr, k): Determines if the array can be split into multiple non-overlapping subarrays such that the sum of elements in each subarray is greater than or equal to k. current_sum = 0 segments = 0 for num in arr: current_sum += num if current_sum >= k: segments += 1 current_sum = 0 return \\"YES\\" if segments > 0 else \\"NO\\""},{"question":"We have a list of integers. Print the second largest number in the list. -----Constraints----- - The list contains at least 2 integers. - All integers in the list are distinct. - -100 leq text{integer} leq 100 -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 a_3 ... a_N -----Output----- Print the second largest number in the list. -----Sample Input----- 5 6 3 9 1 4 -----Sample Output----- 6 Among the numbers in the list [6, 3, 9, 1, 4], the largest number is 9, and the second largest number is 6.","solution":"def second_largest_number(numbers): Returns the second largest number from a list of integers. if len(numbers) < 2: raise ValueError(\\"List must contain at least two distinct elements.\\") unique_numbers = set(numbers) if len(unique_numbers) < 2: raise ValueError(\\"List must contain at least two distinct elements.\\") sorted_numbers = sorted(unique_numbers, reverse=True) return sorted_numbers[1]"},{"question":"You are given a row of n houses represented by numbers 1 through n. Each house i has a certain amount of money hidden behind its door, represented by an array A of length n. You are a professional thief, and you want to maximize the amount of money you can steal tonight. However, you need to abide by the rule that you cannot steal from two consecutive houses because the security systems are interconnected. Write a program to determine the maximum amount of money you can steal from these houses. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of houses. The second line contains n integers A_1, A_2, ..., A_n (0 ≤ A_i ≤ 10^4) — the amount of money hidden behind each house\'s door. -----Output----- Output a single integer, the maximum amount of money you can steal without stealing from two consecutive houses. -----Examples----- Input 4 1 2 3 1 Output 4 Input 6 5 5 10 100 10 5 Output 110","solution":"def max_steal(n, A): if n == 0: return 0 if n == 1: return A[0] if n == 2: return max(A[0], A[1]) dp = [0] * n dp[0] = A[0] dp[1] = max(A[0], A[1]) for i in range(2, n): dp[i] = max(dp[i-1], A[i] + dp[i-2]) return dp[-1] # Example usage # n = 4 # A = [1, 2, 3, 1] # print(max_steal(n, A)) # Output: 4"},{"question":"Aarti and Binny are practicing their coding skills with a challenge involving 2D grids and words. They are given a grid of characters and a word, and their task is to determine if the word can be found in the grid following these specific directions: 1. The word can be constructed from letters of sequentially adjacent cells. 2. The same letter cell may not be used more than once. The valid directions for moving to an adjacent cell are: horizontally (left and right) and vertically (up and down). Write a function that takes a grid of characters and a word, and returns `true` if the word exists in the grid, and `false` otherwise. Input: - The first line contains two integers `m` and `n`, the number of rows and columns in the grid, respectively. - The next `m` lines each contain `n` characters representing the grid. - The last line contains a string `word` which needs to be searched in the grid. Output: - Return `true` if the word exists in the grid, otherwise return `false`. Constraints: - `1 <= m, n <= 200` - The grid contains only uppercase English alphabets. - `1 <= word.length <= 200` Example Input: ``` 3 4 A B C E S F C S A D E E ABCCED ``` Example Output: ``` true ``` Notes: - In the provided example, the word \\"ABCCED\\" can be found in the grid by moving right -> right -> down -> down -> left -> left. - Ensure the word search handles backtracking efficiently to not revisit the same cell within one word search. ```python def exist(board, word): def dfs(board, word, i, j, k): if k == len(word): return True if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or word[k] != board[i][j]: return False tmp, board[i][j] = board[i][j], \'#\' res = dfs(board, word, i+1, j, k+1) or dfs(board, word, i-1, j, k+1) or dfs(board, word, i, j+1, k+1) or dfs(board, word, i, j-1, k+1) board[i][j] = tmp return res if not board: return False for i in range(len(board)): for j in range(len(board[0])): if dfs(board, word, i, j, 0): return True return False ``` This is a problem where backtracking is utilized to search for the word in the grid, ensuring cells are not reused in a single search path. This provided function will check if the word can be found according to the constraints and rules.","solution":"def exist(board, word): def dfs(board, word, i, j, k): if k == len(word): return True if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or word[k] != board[i][j]: return False tmp, board[i][j] = board[i][j], \'#\' res = dfs(board, word, i+1, j, k+1) or dfs(board, word, i-1, j, k+1) or dfs(board, word, i, j+1, k+1) or dfs(board, word, i, j-1, k+1) board[i][j] = tmp return res if not board: return False for i in range(len(board)): for j in range(len(board[0])): if dfs(board, word, i, j, 0): return True return False"},{"question":"You have been given the task of building a simplified version of a basic calculator that supports addition, subtraction, multiplication, and division of non-negative integers. The calculator will read multiple expressions from the input, evaluate them, and print the results. # Input The input consists of multiple lines. Each line contains a single arithmetic expression in the form of \\"NUMBER OPERATOR NUMBER\\", where NUMBER is a non-negative integer and OPERATOR is one of \\"+\\", \\"-\\", \\"*\\", or \\"/\\". The input is terminated by a line containing the single character \\"0\\". # Output For each expression in the input, print the result of the computation on a new line. If division by zero is encountered, print \\"Error: Division by zero\\". # Examples Input ``` 12 + 25 100 - 99 9 * 3 16 / 4 7 / 0 0 ``` Output ``` 37 1 27 4 Error: Division by zero ``` # Constraints 1. 0 ≤ NUMBER < 1000 2. Only valid arithmetic expressions as described will be provided. 3. The division is integer division, so the result should be an integer (i.e., use floor division if necessary). Write a function or program that reads the input, evaluates each expression, and prints the result accordingly.","solution":"def basic_calculator(input_lines): results = [] for line in input_lines: if line == \\"0\\": break parts = line.split() num1 = int(parts[0]) operator = parts[1] num2 = int(parts[2]) if operator == \\"+\\": results.append(str(num1 + num2)) elif operator == \\"-\\": results.append(str(num1 - num2)) elif operator == \\"*\\": results.append(str(num1 * num2)) elif operator == \\"/\\": if num2 == 0: results.append(\\"Error: Division by zero\\") else: results.append(str(num1 // num2)) return results"},{"question":"# Problem Statement You are given a string `s` (1 ≤ |s| ≤ 100) containing only lowercase English letters. Your task is to determine the length of the longest substring consisting of identical characters. For example, given the input string `\\"aaabbbbcc\\"`, the longest substring of identical characters is `\\"bbbb\\"`, which has a length of 4. Therefore, the expected output would be 4. # Function Signature You need to implement the following function: ```python def longest_identical_substring(s: str) -> int: ``` # Input - `s`: A string of length between 1 and 100 containing only lowercase English letters. # Output - An integer representing the length of the longest substring of identical characters. # Examples ```python longest_identical_substring(\\"aaabbbbcc\\") # Should return 4 longest_identical_substring(\\"abcddddd\\") # Should return 5 longest_identical_substring(\\"a\\") # Should return 1 longest_identical_substring(\\"abcccccd\\") # Should return 5 longest_identical_substring(\\"zzzzzzzzzz\\") # Should return 10 ``` # Note - A substring is defined as a contiguous sequence of characters in a string. - A substring consisting of identical characters means that all chars in the substring are the same. # Additional Constraints - The input string contains only lowercase English alphabets.","solution":"def longest_identical_substring(s: str) -> int: Returns the length of the longest substring consisting of identical characters. max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 1 return max_length"},{"question":"Create a function that takes an integer as input and returns a new integer where each digit of the original integer is cubed, and the results are concatenated. For example, if we run 456 through the function, the output will be 64312536 because 4^(3) is 64, 5^(3) is 125, and 6^(3) is 216. **Note:** The function accepts an integer and returns an integer.","solution":"def cube_and_concatenate(n): Cubes each digit of the input integer and concatenates the results to form a new integer. Args: n (int): Input integer Returns: int: New integer formed by concatenating the cubes of each digit of n result_str = \'\'.join(str(int(d) ** 3) for d in str(abs(n))) return int(result_str)"},{"question":"# Background An isogram is a word in which no letter occurs more than once. The task is to determine if a given string is an isogram. # Problem Description Write a function `is_isogram` that determines whether a given string is an isogram. The function should ignore case and non-alphabetic characters. # Function Signature ```python def is_isogram(word: str) -> bool: pass ``` # Input - `word` (1 <= length(word) <= 100): a string containing any printable ASCII characters. # Output - `True` if `word` is an isogram, `False` otherwise. # Examples ```python is_isogram(\'machine\') == True is_isogram(\'isogram\') == True is_isogram(\'Machine\') == True is_isogram(\'Alphabet\') == False is_isogram(\'Isograms Are Cool!\') == False is_isogram(\'isogram!\') == True is_isogram(\'12345!\') == True ``` # Hint If you are stuck, consider these intermediate steps: - Normalize the word to ignore case. - Remove non-alphabetic characters from the word. - Check if the remaining characters are unique. After this, you may find it helpful to leverage data structures like sets for efficient membership checking. # Acknowledgement This problem was inspired by various coding challenges related to strings and uniqueness.","solution":"def is_isogram(word: str) -> bool: Determines if a given string is an isogram. A word is an isogram if no letter occurs more than once. Ignore case and non-alphabetic characters. word = word.lower() filtered_word = \'\'.join(char for char in word if char.isalpha()) return len(set(filtered_word)) == len(filtered_word)"},{"question":"You are on a research team developing algorithms to monitor and predict the migration patterns of birds. One key data point your team is investigating is the total distance traveled by each bird during a migration season. However, the raw data is recorded as individual daily flight segments, and due to sensor issues, some segments might be duplicated or missing. Your task is to write a function that calculates the total distance traveled by a bird, ensuring that duplicates do not count towards the total distance more than once and only valid segments are summed. Each flight segment is represented by a tuple (start, end, distance), where \'start\' and \'end\' are markers of the flight segment, and \'distance\' is the positive integer distance traveled for that segment. -----Input----- The function will take one argument: `flight_segments` (a list of tuples, where each tuple contains three integers `start`, `end`, and `distance`, 1 ≤ `distance` ≤ 1000, 1 ≤ length of list ≤ 10^5). -----Output----- The function should return the total distance traveled by the bird as an integer. -----Examples----- Input: [(1, 2, 100), (2, 3, 150), (3, 4, 200), (1, 2, 100)] Output: 450 Input: [(5, 6, 50), (6, 7, 75), (7, 8, 100), (8, 9, 150), (9, 10, 200)] Output: 575 Input: [(1, 2, 300), (2, 3, 250), (3, 3, 100), (2, 4, 400), (4, 5, 350)] Output: 1300 Input: [(1, 2, 200), (3, 4, 250), (5, 6, 300), (1, 2, 200), (2, 3, 100)] Output: 850","solution":"def total_distance(flight_segments): Returns the total distance traveled by a bird during a migration season, ensuring that duplicate segments are not counted more than once. Each flight segment is represented as a tuple (start, end, distance), where \'start\' and \'end\' are markers denoting the flight segment and \'distance\' is the positive integer distance for that segment. segment_set = set() # To track unique segments total_distance = 0 # To accumulate the total distance for segment in flight_segments: if segment not in segment_set: total_distance += segment[2] segment_set.add(segment) return total_distance"},{"question":"Given a positive integer `n`, write a function `generate_pattern(n)` that generates an `n`-by-`n` matrix. The matrix should be filled such that each element is the sum of its row and column indices (starting from 0). For example, a 3-by-3 matrix would be: ``` [ [0, 1, 2], [1, 2, 3], [2, 3, 4] ] ``` And a 4-by-4 matrix would be: ``` [ [0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6] ] ``` # Function Signature ```python def generate_pattern(n: int) -> list[list[int]]: pass ``` # Input - `n` (int): The size of the matrix (1 ≤ n ≤ 100). # Output - (list[list[int]]): An `n`-by-`n` matrix as described. # Example ```python generate_pattern(3) # Output: # [ # [0, 1, 2], # [1, 2, 3], # [2, 3, 4] # ] generate_pattern(4) # Output: # [ # [0, 1, 2, 3], # [1, 2, 3, 4], # [2, 3, 4, 5], # [3, 4, 5, 6] # ] ``` # Constraints - You may assume that the input `n` is reasonably small, and the function should work efficiently within given constraints.","solution":"def generate_pattern(n: int) -> list[list[int]]: Generates an n-by-n matrix where each element is the sum of its row and column indices. Parameters: n (int): The size of the matrix. Returns: list[list[int]]: The generated n-by-n matrix. return [[i + j for j in range(n)] for i in range(n)]"},{"question":"A bakery is preparing an inventory system to manage its production. The bakery produces different types of pastries each day, and they want to keep track of their daily production to ensure they can meet customer demands. Each pastry type can be identified by a unique ID (an integer). The bakery records the number of each type of pastry produced on a given day. Given the pastry production records for a month, they need to determine the maximum number of any single pastry type produced in a day during that month. The records are provided as a list of daily productions, where each day’s production is represented as a list of tuples. Each tuple contains two integers: the pastry ID and the quantity produced that day. Write a program to determine the maximum single-day production of any single pastry type over the month. # Input The input starts with an integer N (1 leq N leq 31), the number of days in the month. The next N lines each represent the production record for one day. Each day\'s record is in the format: M_i (p_{i1} q_{i1}) (p_{i2} q_{i2}) ... (p_{iM_i} q_{iM_i}) Where M_i is the number of different pastry types produced on day i (1 leq M_i leq 100), and each tuple (p_{ij} q_{ij}) denotes the production of quantity q_{ij} of pastry type p_{ij} (1 leq p_{ij} leq 1000, 1 leq q_{ij} leq 1000) on day i. # Output Output a single integer, the maximum number of any single pastry type produced in a single day during the month. # Example Input 4 2 (1 100) (2 200) 3 (1 150) (3 50) (4 300) 1 (2 450) 2 (1 50) (2 100) Output 450 # Explanation - On the first day, the maximum production for a single pastry type is 200. - On the second day, 300 is the maximum production for a single pastry type. - On the third day, 450 is the maximum production for a single pastry type, which is the overall monthly maximum. - On the fourth day, 100 is the maximum production for a single pastry type. Thus, the output is 450.","solution":"def max_single_pastry_production(N, monthly_production): max_production = 0 for day_production in monthly_production: for _, quantity in day_production: if quantity > max_production: max_production = quantity return max_production"},{"question":"Given an integer array `A` consisting of unique elements and an integer `target`, your task is to count the number of distinct pairs `(A[i], A[j])` such that `i != j` and `A[i] + A[j] == target`. Since the array contains unique elements, each pair is counted only once. # Constraints: - The length of the array should be between 1 and 10^5 (1 ≤ |A| ≤ 10^5). - Each element in the array A should be within the range from -10^9 to 10^9. - The target integer will also be within the range from -10^9 to 10^9. # Example 1: ``` Input: A = [1, 2, 3, 4, 5], target = 5 Output: 2 Explanation: There are two pairs which sum up to 5: (1, 4) and (2, 3). ``` # Example 2: ``` Input: A = [0, -1, 2, -3, 1], target = -2 Output: 1 Explanation: There is one pair which sums up to -2: (0, -2). ``` # Example 3: ``` Input: A = [2, 4, 6, 8], target = 12 Output: 1 Explanation: There is one pair which sums up to 12: (4, 8). ``` # Note: - The function should return the count of such pairs. - Pairs `(A[i], A[j])` and `(A[j], A[i])` are considered the same and hence only counted once.","solution":"def count_pairs_with_sum(A, target): Count the number of distinct pairs (A[i], A[j]) such that i != j and A[i] + A[j] == target. seen = set() pairs = set() for number in A: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) return len(pairs)"},{"question":"You are given an image processing system that involves multiple operations on an image represented by a 2D matrix of integers. Each integer corresponds to the brightness of a pixel. One of the most important operations in this system is to rotate the image. A rotation operation consists of rotating the matrix by 90 degrees clockwise. Write a program which reads an image matrix, rotates it 90 degrees clockwise, and prints the resulting matrix. Constraints * The matrix dimensions (n x n) are such that 1 ≤ n ≤ 50 * The elements of the matrix are integers within the range [-1000, 1000] * The number of datasets ≤ 5 Input The input consists of multiple datasets. Each dataset is given in the following format: The dimension of the matrix n The next n lines each contain n space-separated integers representing the image matrix The input ends with a single character \'-\' for the dimension of the matrix. Output For each dataset, print the rotated matrix. Print each row of the matrix on a new line. Example Input 3 1 2 3 4 5 6 7 8 9 4 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 - Output 7 4 1 8 5 2 9 6 3 130 90 50 10 140 100 60 20 150 110 70 30 160 120 80 40","solution":"def rotate_90_clockwise(matrix): Rotates the given n x n matrix 90 degrees clockwise. Args: matrix (list of list of int): 2D list representing the matrix. Returns: list of list of int: Rotated matrix. return [list(row) for row in zip(*matrix[::-1])] def process_input(input_string): Processes the input string to extract the number of datasets, matrices, and dimensions. Args: input_string (str): Raw input string containing matrix data. Returns: list of list of list of int: List of matrices. data = input_string.strip().split(\'n\') matrices = [] i = 0 while i < len(data): n = data[i] if n == \'-\': break n = int(n) matrix = [list(map(int, data[i + j + 1].split())) for j in range(n)] matrices.append(matrix) i += n + 1 return matrices def rotate_matrices(input_string): Processes the input, rotates matrices, and prints the rotated matrices. Args: input_string (str): Raw input string containing matrix data. Returns: str: Formatted string of rotated matrices. matrices = process_input(input_string) results = [] for matrix in matrices: rotated_matrix = rotate_90_clockwise(matrix) results.append(\\"n\\".join(\\" \\".join(map(str, row)) for row in rotated_matrix)) return \\"nn\\".join(results)"},{"question":"A robotic vacuum cleaner is placed in a rectangular grid of size `m x n`. The vacuum cleaner starts at a given position `(start_row, start_column)` and has to reach the target position `(target_row, target_column)`. The vacuum cleaner can move one step at a time either up, down, left, or right, but it cannot move diagonally. The grid contains some obstacles represented by `1`s and empty spaces represented by `0`s. The vacuum cleaner cannot move into the cells with obstacles. You need to determine if the vacuum cleaner can reach the target position from the starting position. # Input The input is given in the following format. ``` m n start_row start_column target_row target_column grid ``` - The first line contains two integers `m` and `n`, the dimensions of the grid. - The second line contains two integers `start_row` and `start_column`, the starting position of the vacuum cleaner. - The third line contains two integers `target_row` and `target_column`, the target position the vacuum cleaner needs to reach. - The fourth line contains `m` lines each containing `n` integers `0` or `1` separated by spaces, representing the grid. # Constraints - `1 ≤ m, n ≤ 100` - `0 ≤ start_row, start_column, target_row, target_column < m, n` - `grid` contains only `0`s and `1`s. - `grid[start_row][start_column]` and `grid[target_row][target_column]` will always be `0`. # Output Output \\"Yes\\" if the vacuum cleaner can reach the target position, and \\"No\\" if it cannot. # Examples Example 1: ``` Input: 5 5 0 0 4 4 0 0 1 0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 1 0 0 0 0 0 Output: Yes ``` Example 2: ``` Input: 3 3 0 0 2 2 0 1 0 1 1 0 0 0 0 Output: No ```","solution":"def can_reach_target(m, n, start_row, start_column, target_row, target_column, grid): from collections import deque # Directions: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(start_row, start_column)]) visited = set() visited.add((start_row, start_column)) while queue: current_row, current_column = queue.popleft() # Check if we reached the target if current_row == target_row and current_column == target_column: return \\"Yes\\" # Explore neighbors for direction in directions: new_row = current_row + direction[0] new_column = current_column + direction[1] if 0 <= new_row < m and 0 <= new_column < n and (new_row, new_column) not in visited and grid[new_row][new_column] == 0: queue.append((new_row, new_column)) visited.add((new_row, new_column)) return \\"No\\" # Example usage: if __name__ == \\"__main__\\": m = 5 n = 5 start_row = 0 start_column = 0 target_row = 4 target_column = 4 grid = [ [0, 0, 1, 0, 0], [0, 0, 1, 0, 1], [1, 0, 0, 0, 1], [0, 1, 1, 0, 1], [0, 0, 0, 0, 0] ] print(can_reach_target(m, n, start_row, start_column, target_row, target_column, grid)) # Output should be \\"Yes\\""},{"question":"You are given two integers, `a` and `b`, which represent the sides of a right-angled triangle. Write a program to calculate the length of the hypotenuse of the triangle. Input Two integers, `a` and `b`, representing the lengths of the two shorter sides of the triangle. Output Print the length of the hypotenuse, with exactly 2 decimal places. Example Input 3 4 Output 5.00","solution":"import math def calculate_hypotenuse(a, b): Calculate the length of the hypotenuse of a right-angled triangle. Parameters: a (int): Length of one of the shorter sides b (int): Length of the other shorter side Returns: float: Length of the hypotenuse rounded to 2 decimal places hypotenuse = math.sqrt(a**2 + b**2) return round(hypotenuse, 2)"},{"question":"[Mina and the Lost Treasure]: Mina has discovered a hidden treasure map that guides her through a mysterious cave with a series of connected chambers. Each chamber is represented as a node, and each possible path between chambers is represented as an undirected edge. The chambers are organized in such a way that there are no cycles in the graph. Mina can start at any chamber but wants to reach the farthest chamber possible from her starting point. Given the number of chambers (nodes) and the connecting paths (edges) in the cave, help Mina to determine the maximum distance (number of edges) between any two chambers in the cave. Input The first line will contain T (Number of test cases). For each test case, first line will contain an integer N (Number of chambers). Next N-1 lines will contain two space-separated integers u and v denoting an edge between chambers u and v. Output For each test case, print the required maximum distance in a new line. Constraints 1 ≤ T ≤ 5 2 ≤ N ≤ 1,000 1 ≤ u, v ≤ N SAMPLE INPUT 2 4 1 2 2 3 2 4 5 1 2 1 3 3 4 3 5 SAMPLE OUTPUT 2 3 Explanation In the first test case, the possible maximum distances are between chamber 1 and chamber 3 or chamber 4, each having a distance of 2. In the second test case, a possible maximum distance is from chamber 2 to chamber 4 or chamber 5, each having a distance of 3.","solution":"from collections import deque def bfs_farthest_node(start, graph, n): queue = deque([(start, 0)]) visited = [False] * (n + 1) visited[start] = True farthest_node = start max_distance = 0 while queue: node, dist = queue.popleft() if dist > max_distance: max_distance = dist farthest_node = node for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, dist + 1)) return farthest_node, max_distance def find_max_distance(n, edges): if not edges: return 0 graph = [[] for _ in range(n + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) # Start BFS from an arbitrary node (node 1) far_node, _ = bfs_farthest_node(1, graph, n) # Start BFS again from the far_node found _, max_distance = bfs_farthest_node(far_node, graph, n) return max_distance def solve(test_cases): results = [] for n, edges in test_cases: results.append(find_max_distance(n, edges)) return results"},{"question":"Problem Statement: In a village called Arrayville, there is a festival where people decorate their houses with colorful lights. Each house has a single row of lights represented as an array of integers where each integer denotes the color of the light at that position. Two houses are considered to have \\"coordinated decorations\\" if there exists a consecutive subarray in one house that can match exactly with a consecutive subarray in another house. Given two arrays representing the light decorations of two different houses, your task is to determine if the houses have coordinated decorations, i.e., if there exists at least one common subarray in both arrays. Input Specification: The first line of input contains the number of test cases T. For each test case: - The first line contains an integer n, the length of the first array. - The second line contains n integers representing the colors of the lights in the first house. - The third line contains an integer m, the length of the second array. - The fourth line contains m integers representing the colors of the lights in the second house. Output Specification: For each test case, print \\"YES\\" (without quotes) if there exists a common subarray between the two arrays, otherwise print \\"NO\\" (without quotes). Constraints: 1 ≤ T ≤ 20 1 ≤ n, m ≤ 1000 1 ≤ light color (array element) ≤ 1000 SAMPLE INPUT 2 5 1 2 3 4 5 6 5 4 3 2 1 0 3 1 2 3 4 4 5 6 7 SAMPLE OUTPUT YES NO","solution":"def has_coordinated_decorations(arr1, arr2): Determines if there exists at least one common subarray in both arrays. set1 = set(arr1) set2 = set(arr2) # Check for any common element for elem in set1: if elem in set2: return \\"YES\\" return \\"NO\\" def check_decorations(test_cases): Processes multiple test cases. results = [] for case in test_cases: arr1 = case[0] arr2 = case[1] result = has_coordinated_decorations(arr1, arr2) results.append(result) return results"},{"question":"Given a sequence of integers, output a new sequence where each integer is replaced by the sum of all other integers in the original sequence. -----Input----- The first line of the input contains an integer n (2 leq n leq 10^5) — the number of elements in the sequence. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the sequence. -----Output----- Output a sequence of n integers where the i-th integer is the sum of all elements of the input sequence except a_i. -----Examples----- Input 4 1 2 3 4 Output 9 8 7 6 Input 3 5 5 5 Output 10 10 10 Input 5 1 2 3 4 5 Output 14 13 12 11 10","solution":"def sum_excluding_self(n, sequence): total_sum = sum(sequence) result = [total_sum - x for x in sequence] return result"},{"question":"In a software company, every employee has a unique ID represented by an integer and belongs to one of several departments. Your task is to write a program that processes employee information and then support queries to retrieve information about employees based on their department. You are provided with two sets of inputs: 1. Employee-Department Information: Each employee\'s ID along with their department. 2. Queries: Each query asks for all employee IDs belonging to a specific department. ------ Input Format ------ - The first line of input will contain a single integer E, denoting the number of employees. - The next E lines will each contain an integer and a string separated by a space, representing an employee\'s ID and their department respectively. - The next line contains a single integer Q, denoting the number of queries. - The next Q lines each contain a single string representing a department name. ------ Output Format ------ For each query, output a single line containing space-separated integers representing the IDs of employees who belong to that department. The order of employee IDs in the output does not matter. If no employees belong to the queried department, output an empty line. ------ Constraints ------ 1 ≤ E, Q ≤ 10^{5} 1 ≤ text{Employee ID} ≤ 10^6 - Department names are non-empty strings consisting of lowercase English letters and they have a length of at most 20. ----- Sample Input 1 ------ 6 101 marketing 102 sales 103 marketing 104 hr 105 sales 106 engineering 3 marketing engineering finance ----- Sample Output 1 ------ 101 103 106 ----- Explanation 1 ------ The first query asks for employees in the \\"marketing\\" department, and IDs 101 and 103 are returned. The second query is for the \\"engineering\\" department, and ID 106 is returned. The third query is for the \\"finance\\" department, which has no employees, so an empty line is returned.","solution":"def process_employee_info(employee_count, employee_data_list): Process the employee information and return a dictionary where the keys are department names and the values are lists of employee IDs. dept_to_employees = {} for emp_id, dept in employee_data_list: if dept not in dept_to_employees: dept_to_employees[dept] = [] dept_to_employees[dept].append(emp_id) return dept_to_employees def query_departments(dept_to_employees, query_list): Given a dictionary of department to employee IDs and a list of department queries, return a list of strings where each string contains the employee IDs for the queried department or an empty string if no employees belong to that department. results = [] for dept in query_list: if dept in dept_to_employees: results.append(\\" \\".join(map(str, dept_to_employees[dept]))) else: results.append(\\"\\") return results"},{"question":"Create a function that calculates the product of all unique prime factors of a given positive integer. The prime factors of a number are the prime numbers that divide the number exactly, without leaving a remainder. For example, the unique prime factors of `12` are `2` and `3`, and their product is `6`. Your task is to implement the `unique_prime_factors_product(number)` function that accepts a positive integer `number` and returns the product of its unique prime factors. # Examples: `unique_prime_factors_product(12)` should return `6` because the prime factors are `2` and `3`. `unique_prime_factors_product(28)` should return `14` because the prime factors are `2` and `7`. `unique_prime_factors_product(50)` should return `10` because the prime factors are `2` and `5`. # Constraints: - The input integer will be greater than `1` and less than or equal to `10^6`. - Aim for an efficient solution that can handle large inputs gracefully.","solution":"import math def unique_prime_factors_product(number): Returns the product of all unique prime factors of a given positive integer. def get_prime_factors(n): prime_factors = set() while n % 2 == 0: prime_factors.add(2) n //= 2 for i in range(3, int(math.sqrt(n)) + 1, 2): while n % i == 0: prime_factors.add(i) n //= i if n > 2: prime_factors.add(n) return prime_factors prime_factors = get_prime_factors(number) product = 1 for factor in prime_factors: product *= factor return product"},{"question":"Company MegaCode has a large computer network with a series of interconnected servers. Recently, some servers have been compromised and are known to propagate a malware when specific operations are performed. Every specific operation is defined by two servers -- the source (sender) and the destination (receiver). When a server sends an operation to another server, the malware spreads from the sender to the receiver. Once a server is infected, it starts spreading malware to any other server it sends operations to. Your task is to write a program to determine all servers that will be infected if the malware starts from a specific server. Given the list of operations between servers, identify which servers are compromised due to these operations. Input The input consists of multiple datasets. Each dataset is formatted as follows: N M a1 b1 a2 b2 ... aM bM N represents the number of servers; M represents the number of operations; ai (1 ≤ i ≤ M) is the source server for the i-th operation; bi (1 ≤ i ≤ M) is the destination server for the i-th operation. The initially infected server is indicated with the number 1; the other servers are indicated by unique numbers between 2 and N. The input adheres to the following constraints: 1 ≤ N ≤ 10000, 0 ≤ M ≤ 10000. The last dataset is followed by a line containing two zeros. This line should not be processed. Output For each dataset, print the number of servers that get infected by the malware. Example Input 4 3 1 2 2 3 3 4 4 2 2 3 3 1 0 0 Output 4 2","solution":"def get_infected_servers(N, M, operations): from collections import defaultdict, deque # Create an adjacency list for the graph graph = defaultdict(list) for a, b in operations: graph[a].append(b) # BFS to find all infected servers starting from server 1 infected = set() queue = deque([1]) while queue: current = queue.popleft() if current not in infected: infected.add(current) for neighbor in graph[current]: if neighbor not in infected: queue.append(neighbor) return len(infected) def process_datasets(datasets): results = [] for dataset in datasets: N, M, operations = dataset result = get_infected_servers(N, M, operations) results.append(result) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): N, M = map(int, lines[i].split()) if N == 0 and M == 0: break i += 1 operations = [] for _ in range(M): a, b = map(int, lines[i].split()) operations.append((a, b)) i += 1 datasets.append((N, M, operations)) return datasets def main(input_str): datasets = parse_input(input_str) results = process_datasets(datasets) return results"},{"question":"In a magical land, there is a forest with N trees. Each tree has a unique height given in an array H of length N. The elves in this land have a ritual in which they cut down some trees with the following rules: 1. They can only cut down a tree if it is taller than the one immediately before it. 2. The height of the last tree being considered during any cut must always be recorded. Your task is to determine the possible sets of cut-down trees and find the maximum height of the last tree for each possible set. # Input - The first line contains an integer N (1 leq N leq 10^3), the number of trees. - The second line contains N integers H[i] (1 leq H[i] leq 10^6) representing the height of each tree. # Output - Print a single integer, the maximum height of the last tree for all possible sets of cut-down trees. # Example Input ``` 6 1 2 3 4 3 5 ``` Output ``` 5 ``` Explanation - One possible set of cut-down trees is [1, 2, 3, 4, 5], where 5 is the highest and last tree cut. - Another possible set is [1, 2, 5], where 5 is still the highest and last tree cut. - Therefore, the maximum height of the last tree is 5.","solution":"def max_last_tree_n_height(N, H): Returns the maximum height of the last tree for all possible sets of cut-down trees. max_height = 0 for i in range(1, N): if H[i] > H[i - 1]: max_height = max(max_height, H[i]) return max_height"},{"question":"A popular e-commerce website is organizing a \\"Clearance Sale\\" event, and they want to analyze their sales data to find out the best-selling products during this event. You have been provided with sales data consisting of product names and quantities sold. Your task is to write a program to determine the product with the highest sales for each set of sales data. Input: - The first line of the input contains an integer T representing the number of test cases. - Each test case starts with an integer N representing the total number of sales records in the test case. - The next N lines contain two space-separated values: a string P representing the product name and an integer Q representing the quantity sold. Output: For each test case, print the name of the product with the highest sales quantity. If there are multiple products with the same highest quantity, print the lexicographically smallest product name. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ Q ≤ 1000 1 ≤ length(P) ≤ 100 SAMPLE INPUT 2 3 apple 50 banana 75 cherry 75 4 notebook 100 pen 100 pencil 50 eraser 75 SAMPLE OUTPUT banana notebook Explanation: For the first test case, both \\"banana\\" and \\"cherry\\" have the highest quantity sold (75). Among them, \\"banana\\" comes first lexicographically. For the second test case, both \\"notebook\\" and \\"pen\\" have the highest quantity sold (100). Among them, \\"notebook\\" comes first lexicographically.","solution":"def best_selling_products(data): results = [] index = 0 T = int(data[index]) index += 1 for _ in range(T): N = int(data[index]) index += 1 sales = {} for _ in range(N): product_info = data[index].split() product_name = product_info[0] quantity_sold = int(product_info[1]) index += 1 if product_name in sales: sales[product_name] += quantity_sold else: sales[product_name] = quantity_sold max_quantity = max(sales.values()) best_selling = [product for product in sales if sales[product] == max_quantity] best_selling.sort() results.append(best_selling[0]) return results"},{"question":"You are given a set of `n` numbers and you need to find the maximum length of a subsequence such that the absolute difference between any two consecutive elements of the subsequence is exactly `d`. Input Format: The first line contains an integer `t`: 1 ≤ t ≤ 1,000, which is the number of test cases. For each test case, the first line contains two space-separated integers, `n` and `d`: 1 ≤ n ≤ 1,000 1 ≤ d ≤ 1,000 The second line contains `n` space-separated integers, representing the elements of the array. Output Format: For each test case, output a single line representing the maximum length of the subsequence that satisfies the condition. Example: Input: 3 5 2 1 3 5 7 9 6 3 1 4 7 10 13 16 4 1 7 8 9 10 Output: 5 6 4 Explanation: - In the first test case, the array is [1, 3, 5, 7, 9]. The entire array is a subsequence where the absolute difference between any two consecutive elements is 2, so the answer is 5. - In the second test case, the array is [1, 4, 7, 10, 13, 16]. The entire array is a subsequence where the absolute difference between any two consecutive elements is 3, so the answer is 6. - In the third test case, the array is [7, 8, 9, 10]. The entire array is a subsequence where the absolute difference between any two consecutive elements is 1, so the answer is 4.","solution":"def max_length_subsequence(n, d, arr): Returns the maximum length of a subsequence such that the absolute difference between any two consecutive elements of the subsequence is exactly d. arr.sort() max_len = 1 current_len = 1 for i in range(1, n): if arr[i] - arr[i-1] == d: current_len += 1 else: current_len = 1 max_len = max(max_len, current_len) return max_len def solve(t, cases): results = [] for case in cases: n, d, arr = case results.append(max_length_subsequence(n, d, arr)) return results"},{"question":"**String Reformatter** Your task is to create a function that takes a string `s` and an integer `n` as input and returns a new string formatted in a specific way. The string `s` contains alphabetic characters and spaces only. The function should reformat the string by breaking it into segments of `n` characters, but adding spaces between segments. If the last segment is shorter than `n` characters, it should be left as is. For example, if the input string is \\"Hello World\\" and `n` is 3, then the output should be \\"Hel loW orl d\\". If `n` is larger than the length of the string, the entire string should remain unchanged. Additionally, any spaces in the original string should not be counted towards the segment length. They should only be included in the output string as separators. **Example** ```python def reformatter(s: str, n: int) -> str: pass example = \\"This is a test\\" result = reformatter(example, 4) print(result) # \\"This isat est\\" ``` **Constraints** - `s` contains only alphabetic characters and spaces. - `1 <= n <= len(s)` - The function must handle edge cases such as an empty string (return an empty string). - Return the reformatted string with the constraints and conditions applied. **Explanation** Given `s = \\"This is a test\\"`, `n = 4`: - Remove spaces from the original string: \\"Thisisatest\\" - Break into segments of 4 characters: `This`, `isat`, `est` - Add spaces between segments: \\"This isat est\\"","solution":"def reformatter(s: str, n: int) -> str: Reformat the string `s` by breaking it into segments of `n` characters and adding spaces between the segments. Spaces in the original string are not counted toward the segment length. # Remove spaces from the original string stripped_string = s.replace(\\" \\", \\"\\") # Generate segments of n characters n_segments = [stripped_string[i:i + n] for i in range(0, len(stripped_string), n)] # Join the segments with a space reformatted_string = \\" \\".join(n_segments) return reformatted_string"},{"question":"Write a function that checks if a given string is a valid identifier in Python. In Python, a valid identifier must: 1. Only contain alphanumeric characters (a-z, A-Z, 0-9) or underscores (_). 2. Not start with a digit. 3. Not be a reserved keyword. Your task is to implement the function `is_valid_identifier(identifier: str) -> bool` that returns `True` if the given string is a valid identifier, and `False` otherwise. Constraints: - The input string will only consist of printable ASCII characters. Examples: ```python is_valid_identifier(\\"validIdentifier\\") => True is_valid_identifier(\\"2invalid\\") => False is_valid_identifier(\\"_valid123\\") => True is_valid_identifier(\\"invalid-identifier\\") => False is_valid_identifier(\\"def\\") => False ``` Note: - You are allowed to use the built-in `keyword` module to check for reserved keywords in Python. - You should not use Python\'s built-in `isidentifier()` method; rather, implement the logic manually.","solution":"import keyword def is_valid_identifier(identifier: str) -> bool: Check if the given string is a valid identifier in Python. A valid identifier must: 1. Only contain alphanumeric characters (a-z, A-Z, 0-9) or underscores (_). 2. Not start with a digit. 3. Not be a reserved keyword. Args: identifier (str): the string to be checked. Returns: bool: True if the string is a valid identifier, False otherwise. if not identifier: return False if identifier[0].isdigit(): return False if identifier in keyword.kwlist: return False for char in identifier: if not (char.isalnum() or char == \'_\'): return False return True"},{"question":"You are given a 2D matrix where each cell may either be 0 or 1. Design an algorithm to find the size of the largest square sub-matrix consisting only of 1s that can be formed within the matrix. Example Given matrix: matrix = begin{pmatrix} 0 & 1 & 1 & 0 & 1 1 & 1 & 0 & 1 & 0 0 & 1 & 1 & 1 & 0 1 & 1 & 1 & 1 & 0 1 & 1 & 1 & 1 & 1 0 & 0 & 0 & 0 & 0 end{pmatrix} The largest square sub-matrix consisting only of 1s is: begin{pmatrix} 1 & 1 & 1 1 & 1 & 1 1 & 1 & 1 end{pmatrix} which has a size of 3 times 3 = 9. Function Description Complete the function largestSquareSubMatrix in the editor below. largestSquareSubMatrix has the following parameter: int matrix[][]: 2D array of 0s and 1s Returns int: the size of the largest square sub-matrix consisting only of 1s Input Format - The first line contains two space-separated integers, m and n, the number of rows and columns in the matrix respectively. - Each of the next m lines contains n space-separated integers (either 0 or 1), representing the cells in the matrix. Constraints 1 leq m, n leq 300 matrix[i][j] in {0, 1} Sample Input STDIN Function ----- -------- 6 5 matrix[][] size m = 6, n = 5 0 1 1 0 1 matrix[0] = [0, 1, 1, 0, 1] 1 1 0 1 0 matrix[1] = [1, 1, 0, 1, 0] 0 1 1 1 0 matrix[2] = [0, 1, 1, 1, 0] 1 1 1 1 0 matrix[3] = [1, 1, 1, 1, 0] 1 1 1 1 1 matrix[4] = [1, 1, 1, 1, 1] 0 0 0 0 0 matrix[5] = [0, 0, 0, 0, 0] Sample Output 9 Explanation The largest square sub-matrix consisting only of 1s has a size of 3 times 3 = 9, as shown in the given example.","solution":"def largestSquareSubMatrix(matrix): Finds the size of the largest square sub-matrix consisting only of 1s. if not matrix: return 0 m = len(matrix) n = len(matrix[0]) dp = [[0] * n for _ in range(m)] max_side_length = 0 for i in range(m): for j in range(n): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length * max_side_length"},{"question":"Simon is working with colored wooden blocks. Each block is painted in one of three colors: red, green, or blue. He has arranged all the blocks in a row, and he wants to paint some blocks to make sure that no two adjacent blocks have the same color. Given a sequence representing the colors of the blocks in the row, help Simon determine the minimum number of blocks he needs to repaint to achieve this goal. The colors can be represented as the following characters: - \'R\' for red - \'G\' for green - \'B\' for blue ----- Input ----- The first line contains an integer t (1 leq t leq 1000) — the number of test cases. Each of the next t lines describes a test case. Each line contains a string s (1 leq |s| leq 10^5) representing the colors of the blocks in the row. It is guaranteed that the total length of all strings across all test cases does not exceed 10^5. ----- Output ----- For each test case, print a single integer — the minimum number of blocks Simon needs to repaint. ----- Examples ----- Input 3 RRG RGBR RRRRR Output 1 0 2 ----- Note ----- In the first test case, you can repaint the second block from \'R\' to either \'G\' or \'B\' so that no two adjacent blocks have the same color, resulting in the sequence \\"RGR\\" or \\"RBG\\". In the second test case, the sequence is already such that no two adjacent blocks have the same color, so no repaints are needed. In the third test case, you need to repaint two blocks, for example, the second and fourth blocks, resulting in the sequence \\"RGRGR\\".","solution":"def min_repaints(blocks): repaint_count = 0 for i in range(1, len(blocks)): if blocks[i] == blocks[i - 1]: repaint_count += 1 new_color = {\'R\', \'G\', \'B\'} - {blocks[i], blocks[i + 1] if i + 1 < len(blocks) else \'\'} blocks[i] = new_color.pop() return repaint_count def process_test_cases(t, test_cases): results = [] for case in test_cases: results.append(min_repaints(list(case))) return results"},{"question":"In the small town of Newtonville, there are several schools, and each school has a playground. The local government is planning to build a new public playground that is equidistant to all existing school playgrounds so that it is convenient for children from any school to visit the new playground. Given the coordinates of the existing school playgrounds in a 2D plane, write a program to determine the coordinates of the new public playground such that the sum of the Euclidean distances from this new playground to all existing playgrounds is minimized. Input The input is given in the following format. N x1 y1 x2 y2 :: xN yN The first line contains an integer N (1 ≤ N ≤ 100,000) representing the number of playgrounds. Each of the next N lines contains two integers xi and yi (-1,000,000 ≤ xi, yi ≤ 1,000,000), representing the coordinates of the ith playground. Output Output two floating-point numbers separated by a space representing the coordinates of the new public playground. The error must not exceed plus or minus 0.001 units. If this condition is satisfied, any number of digits after the decimal point may be displayed. Examples Input 3 0 0 2 2 4 4 Output 2.0 2.0 Input 4 -1 2 3 4 5 0 -2 -3 Output 1.25 0.75 Input 2 -3 7 4 -2 Output 0.5 2.5","solution":"def find_new_playground_coordinates(N, coordinates): Given the number of playgrounds N and a list of their coordinates, determine the coordinates of the new public playground that minimizes the sum of Euclidean distances to all existing playgrounds. if N == 1: # If there\'s only one playground, the optimal position is at the coordinates of that playground return coordinates[0] # Calculate the average x and y coordinates x_sum = sum(x for x, y in coordinates) y_sum = sum(y for x, y in coordinates) x_center = x_sum / N y_center = y_sum / N return x_center, y_center"},{"question":"Given an array of integers, return a list containing all elements that appear more than once, sorted in ascending order. If no such element exists, return an empty list. Example 1: Input: arr = [4, 3, 2, 7, 8, 2, 3, 1] Output: [2, 3] Explanation: Both 2 and 3 appear more than once in the array, and when sorted, the output is [2, 3]. Example 2: Input: arr = [1, 2, 3, 4, 5] Output: [] Explanation: No elements in the array appear more than once. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findDuplicates() which takes an array arr as input and returns the answer as a list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= arr.length <= 10^4 1 <= arr[i] <= 10^4","solution":"def find_duplicates(arr): Returns a list of elements that appear more than once in the input array, sorted in ascending order. If no such elements exist, returns an empty list. Args: arr (list): A list of integers. Returns: list: A sorted list of duplicate elements. # Create a dictionary to count the frequency of elements frequency = {} for num in arr: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 # Filter out elements that appear more than once and sort them duplicates = [key for key, count in frequency.items() if count > 1] duplicates.sort() return duplicates"},{"question":"Priya has a sequence of brackets represented as a string S consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. She wants to check if the sequence of brackets is balanced. A sequence of brackets is considered balanced if, for every opening bracket, there is a corresponding closing bracket of the same type, and the brackets are properly nested. Write a function to determine whether the given string of brackets is balanced. Input Format The first line contains T, the number of test cases. For each test case, the first line contains a single string S. Output Format For each test case, print \\"YES\\" if the sequence is balanced, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 Each character of S will be \'(\', \')\', \'{\', \'}\', \'[\' or \']\'. SAMPLE INPUT 3 {[()]} {[(])} {{[[(())]]}} SAMPLE OUTPUT YES NO YES Explanation For the 1st test case, the sequence {[()]} is balanced. For the 2nd test case, the sequence {[(])} is not balanced because the order of the brackets is not correct. For the 3rd test case, the sequence {{[[(())]]}} is balanced as every opening bracket has a corresponding closing bracket and they are properly nested.","solution":"def is_balanced(S): Returns \'YES\' if the sequence of brackets in S is balanced, otherwise \'NO\'. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in S: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return \\"NO\\" return \\"YES\\" if stack == [] else \\"NO\\" def check_balanced_sequences(T, sequences): results = [] for seq in sequences: results.append(is_balanced(seq)) return results"},{"question":"A concert is being organized, and attendees are lining up to purchase tickets. To ensure order, each person in line receives a unique position number, starting from 1 at the front of the line and increasing by 1 for each subsequent person. The concert organizers have a system that follows a simple queue management, where each person in the line can be identified by their unique position number. Given an array of integers, where each integer represents the position number of a person who successfully purchased a ticket and left the line, determine the position number of the first person who has not yet purchased a ticket. If all the attendees in the given range have purchased their tickets, return the next position number that would be given to a new person joining the line. For example, if the queue initially had people with positions [1, 2, 3, 4, 5], and the array indicates that people in positions [2, 3, 5] have purchased their tickets, then the next person to purchase should be at position 1 (the first missing position from those who haven\'t purchased yet). -----Input----- - The first line contains a single integer n (1 le n le 10^6), the total number of people initially in the line. - The second line contains an integer k (0 le k le n), the number of positions that have purchased tickets. - The third line contains k distinct integers, representing the position numbers that have purchased their tickets. -----Output----- Output the position number of the first missing person who hasn\'t purchased a ticket yet. If all positions have purchased a ticket, output the next position number. -----Examples----- Sample Input 1: 5 3 2 3 5 Sample Output 1: 1 Sample Input 2: 5 5 1 2 3 4 5 Sample Output 2: 6 Sample Input 3: 7 4 2 4 6 7 Sample Output 3: 1 Sample Input 4: 10 0 [] Sample Output 4: 1 Sample Input 5: 1 1 1 Sample Output 5: 2","solution":"def find_first_unpurchased_position(n, k, purchased_positions): Determines the position number of the first person who has not yet purchased a ticket. If all attendees have purchased, returns the next position number. :param n: Total number of people initially in the line :param k: Number of positions that have purchased tickets :param purchased_positions: List of positions that have purchased tickets :return: The first position number that has not purchased a ticket or the next position number purchased_set = set(purchased_positions) for position in range(1, n + 1): if position not in purchased_set: return position return n + 1"},{"question":"You have a collection of different colored beads and you want to create as many necklaces as you can. A necklace is defined as a sequence of beads where the color of adjacent beads is different. No two necklaces can contain exactly the same sequence of bead colors. Each bead has a color, represented by an integer from 1 to c (the total number of different colors). Your task is to determine how many unique necklaces of length k can be formed using these beads. The result should be calculated modulo 1,000,000,007 (10^9 + 7). Input The first line of input contains two integers c and k — the number of different colors and the length of the necklaces respectively. (1 ≤ c ≤ 10^5, 1 ≤ k ≤ 10^5) Output The only line of output should contain an integer — the number of unique necklaces of length k that can be formed. Examples Input 2 1 Output 2 Input 2 2 Output 2 Input 3 2 Output 6","solution":"MOD = 1000000007 def count_necklaces(c, k): Returns the number of unique necklaces of length k that can be formed using c different colors, such that no two adjacent beads are of the same color. The result is modulo 1,000,000,007. # Base cases for quick return if k == 1: return c # dp[i] stores the number of valid sequences of length i dp = [0] * (k + 1) # For a sequence of length 1, you can simply choose any of the c colors dp[1] = c # For a sequence of length 2, you must choose different colors for the 2 beads dp[2] = c * (c - 1) # Using dynamic programming to fill the dp array for i in range(3, k + 1): dp[i] = (c - 1) * dp[i - 1] % MOD return dp[k]"},{"question":"Write a program which checks if a given string is a palindrome. Input The input consists of multiple datasets. For each dataset, a string s is given in a line. The length of the string does not exceed 1000 characters. The input ends with a line including a single character \'*\'. Your program should not process this terminal symbol. Output For each dataset, print \\"YES\\" if the string is a palindrome, otherwise print \\"NO\\". Example Input madam racecar hello * Output YES YES NO","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. Returns \\"YES\\" if it is a palindrome, otherwise \\"NO\\". cleaned_s = s.replace(\\" \\", \\"\\").lower() return \\"YES\\" if cleaned_s == cleaned_s[::-1] else \\"NO\\" def process_input(datasets): Processes multiple lines of input and returns the palindrome check results for each line. The input ends with a line containing a single character \'*\'. results = [] for data in datasets: if data == \'*\': break results.append(is_palindrome(data)) return results"},{"question":"John is an avid gardener and loves to plant trees in his garden. He has a rule to plant trees in such a way that no two trees of the same type are adjacent. Given a sequence of trees he wants to plant, help John rearrange the sequence such that no two same types of trees are next to each other. If it is not possible to rearrange the trees in such a way, return an empty list. Example 1: Input: N = 6 arr[] = {3, 3, 3, 2, 2, 1} Output: [3, 2, 3, 1, 3, 2] Explanation: One possible rearrangement is shown. No two trees of the same type are adjacent. Example 2: Input: N = 4 arr[] = {1, 1, 1, 2} Output: [] Explanation: It is not possible to rearrange the trees so that no two trees of the same type are adjacent. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rearrangeTrees() which takes the array arr[] and its size N as inputs and returns the rearranged sequence or an empty list if no such arrangement is possible. Expected Time Complexity: O(N log N). Expected Auxiliary Space: O(N). Constraint: 1 <= N <= 10^5 1 <= arr[i] <= N","solution":"import heapq from collections import Counter def rearrangeTrees(arr, N): if not arr: return [] # Count the frequency of each tree type count = Counter(arr) # Create a max heap of negative frequencies (Python\'s heapq is a min-heap) max_heap = [(-freq, tree_type) for tree_type, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_tree = 0, None result = [] while max_heap: freq, tree = heapq.heappop(max_heap) result.append(tree) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_tree)) prev_freq = freq + 1 # Since freq is negative, adding 1 decreases it towards zero prev_tree = tree if len(result) != N: return [] return result"},{"question":"A group of international agents is working on cracking an encryption scheme used by a notorious cartel. The encryption is based on a specially designed matrix transformation. Agents need to transform a given message matrix into another matrix using a sequence of operations. However, the exact sequence of operations required is not given explicitly, but instead described through patterns within the matrix. Given an N x M matrix of integers, agents need to find the smallest possible value that can be obtained by rotating any of the rows of the matrix any number of times. A rotation of a row implies taking the last element of that row to the first position and shifting all other elements one position to the right. For example, if the row is [1, 3, 2, 4], a single rotation results in [4, 1, 3, 2]. The goal is to determine the minimum possible element in the entire matrix after applying any number of row rotations. # Input Format The first line contains two integers N (number of rows) and M (number of columns). Each of the next N lines contains M integers, representing the elements of the matrix. # Constraints 1 <= N, M <= 1,000 0 <= matrix[i][j] <= 1,000,000 # Output Format Print the smallest possible value in the matrix after applying any number of rotations to any row. # Sample Input 3 4 1 5 9 10 4 3 7 2 8 6 5 12 # Sample Output 1 # Explanation Regardless of the number of rotations applied to any rows, the smallest possible value in the matrix remains 1, which already is the smallest value present in the matrix. # Notes - Consider all possible rotations of each row to determine the smallest possible value after rotations. - The efficient computation is key due to possible large input sizes of the matrix.","solution":"def smallest_value_after_rotations(matrix): Returns the smallest possible value in the matrix after any number of rotations to any row. min_value = float(\'inf\') for row in matrix: min_value = min(min_value, min(row)) return min_value"},{"question":"Write a function that takes a list of integers and returns another list containing only the prime numbers from the input list, in ascending order. For example, given the input: ```python [29, 15, 3, 11, 2, 42, 37, 91] ``` Your function should return: ```python [2, 3, 11, 29, 37] ``` If there are no prime numbers, the function should return an empty list.","solution":"def is_prime(n): Helper function to check if a number is a prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def filter_and_sort_primes(numbers): Given a list of integers, return a sorted list containing only the prime numbers. primes = [num for num in numbers if is_prime(num)] primes.sort() return primes"},{"question":"You are hired to optimize a bike-sharing system called BikeHarbor. The system records bike checkouts and returns as events. Your task is to identify the most frequent destination station for each origin station based on past data. A bike checkout event is represented as a tuple of two integers (o, d), where o is the origin station ID and d is the destination station ID. You need to write a function that takes a list of such tuples and returns a dictionary where each key is an origin station ID and the corresponding value is the destination station ID that appeared most frequently as a destination for that origin. If there are ties, return the destination station ID with the smallest numerical value. -----Input----- A list of n tuples [(o1, d1), (o2, d2), ..., (on, dn)] where 1 ≤ n ≤ 10^5, 1 ≤ o_i, d_i ≤ 10^4 for 1 ≤ i ≤ n. -----Output----- A dictionary where each key is an origin station ID and the value is the corresponding most frequent destination station ID. -----Examples----- Input [(1, 2), (1, 3), (1, 2), (2, 3), (2, 3), (2, 1), (3, 1)] Output {1: 2, 2: 3, 3: 1} Input [(1, 2), (1, 2), (2, 3), (3, 1), (3, 1), (3, 1)] Output {1: 2, 2: 3, 3: 1} Input [(1, 2), (1, 3), (1, 3), (1, 2), (2, 3), (3, 2), (3, 1)] Output {1: 2, 2: 3, 3: 1} -----Note----- In the first example, station 1\'s most frequent destination is station 2, station 2\'s most frequent destination is station 3, and station 3\'s most frequent destination is station 1. There are no ties in this case. In the second example, station 3 has station 1 as the most frequent destination with a count of 3. There are no ties. In the third example, station 1 has two destinations (2 and 3) with the same frequency, but station 2 comes first because of its smaller numerical value.","solution":"from collections import defaultdict, Counter def most_frequent_dest_for_each_origin(events): Finds the most frequent destination station for each origin station based on past events. If there are ties, returns the destination with the smallest numerical value. :param events: List of tuples where each tuple represents a bike checkout event (origin, destination) :return: Dictionary where each key is an origin station ID and the value is the most frequent destination station ID origin_to_destinations = defaultdict(list) for origin, destination in events: origin_to_destinations[origin].append(destination) result = {} for origin, destinations in origin_to_destinations.items(): dest_counter = Counter(destinations) most_frequent_dest = min(dest_counter, key=lambda k: (-dest_counter[k], k)) result[origin] = most_frequent_dest return result"},{"question":"Amara is learning about palindromic substrings in her programming class. She is given a string S and needs to count the number of distinct palindromic substrings in the string. A substring is a contiguous sequence of characters within the string, and it reads the same backward as forward. Amara has written the code to find all substrings, but she is struggling to identify and count only the distinct palindromic substrings. Can you help her by writing a program to accomplish this? ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The only line of each test case contains a string S. ------ Output Format ------ For each test case, print a single line containing one integer, which is the count of distinct palindromic substrings in the string S. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ |S| ≤ 10^3 ------ Sample Input 1 ------ 3 aabaa banana abc ------ Sample Output 1 ------ 5 6 3 ------ Explanation 1 ------ Test case 1: The distinct palindromic substrings of the string \\"aabaa\\" are \\"a\\", \\"aa\\", \\"b\\", \\"aba\\", and \\"aabaa\\". Hence, the count is 5. Test case 2: The distinct palindromic substrings of the string \\"banana\\" are \\"a\\", \\"b\\", \\"n\\", \\"ana\\", \\"nan\\", and \\"anana\\". Hence, the count is 6. Test case 3: The distinct palindromic substrings of the string \\"abc\\" are \\"a\\", \\"b\\", and \\"c\\". Hence, the count is 3.","solution":"def count_distinct_palindromic_substrings(S): Returns the count of distinct palindromic substrings in the given string S. n = len(S) palindrome_dict = {} for i in range(n): # Odd length palindromes l, r = i, i while l >= 0 and r < n and S[l] == S[r]: palindrome_dict[S[l:r+1]] = True l -= 1 r += 1 # Even length palindromes l, r = i, i + 1 while l >= 0 and r < n and S[l] == S[r]: palindrome_dict[S[l:r+1]] = True l -= 1 r += 1 return len(palindrome_dict) def solve_case(test_case_lines): T = int(test_case_lines[0]) results = [] for i in range(1, T + 1): S = test_case_lines[i] results.append(count_distinct_palindromic_substrings(S)) return results"},{"question":"You are given a sequence of N integers. Your task is to rearrange the sequence such that the odd numbers appear first in ascending order and the even numbers follow in descending order. Write a program to achieve this rearrangement. Input: The first line contains an integer T denoting the number of test cases. Each of the following T lines contains an integer N followed by N integers representing the sequence. Output: For each test case, output the rearranged sequence in a single line. Constraints: 1 ≤ T ≤ 20 1 ≤ N ≤ 1000 1 ≤ sequence[i] ≤ 10^6 SAMPLE INPUT 3 5 5 2 9 1 4 4 2 4 6 8 7 5 3 8 7 6 2 1 SAMPLE OUTPUT 1 5 9 4 2 8 6 4 2 1 3 5 7 8 6 2 Explanation For the first test case: Odd numbers are 5, 9, and 1. Sorting them in ascending order we get: 1, 5, 9. Even numbers are 2 and 4. Sorting them in descending order we get: 4, 2. Combining them we get: 1 5 9 4 2. For the second test case: There are no odd numbers. Even numbers sorted in descending order are: 8, 6, 4, 2. For the third test case: Odd numbers are 5, 3, 7, and 1. Sorting them in ascending order we get: 1, 3, 5, 7. Even numbers are 8, 6, and 2. Sorting them in descending order we get: 8, 6, 2. Combining them we get: 1 3 5 7 8 6 2.","solution":"def rearrange_sequence(t, sequences): result = [] for i in range(t): sequence = sequences[i] n = sequence[0] numbers = sequence[1:] odd_numbers = sorted([x for x in numbers if x % 2 != 0]) even_numbers = sorted([x for x in numbers if x % 2 == 0], reverse=True) rearranged_sequence = odd_numbers + even_numbers result.append(\\" \\".join(map(str, rearranged_sequence))) return result"},{"question":"Write a function that determines whether a given matrix is a \\"Toeplitz Matrix\\". A Toeplitz Matrix is defined as a matrix where each descending diagonal from left to right is constant. For example, the following matrix is a Toeplitz Matrix: ``` 1 2 3 4 1 2 7 4 1 ``` Each diagonal from top-left to bottom-right has the same value. In contrast, the following matrix is not a Toeplitz Matrix: ``` 1 2 3 4 5 2 7 4 1 ``` The main diagonal `1-5-1` is not constant. Implement a function `isToeplitz(matrix)` to determine if the given matrix satisfies the condition of being a Toeplitz Matrix. The function should take a 2D list of integers as input and return a boolean indicating whether it is a Toeplitz Matrix. Additionally, ensure your function handles edge cases such as: - An empty matrix - A single row or single column matrix Return `True` for these edge cases as they can be trivially considered Toeplitz Matrices. # Examples: ``` >>> isToeplitz([[1, 2, 3], [4, 1, 2], [7, 4, 1]]) True >>> isToeplitz([[1, 2, 3], [4, 5, 2], [7, 4, 1]]) False >>> isToeplitz([[1]]) True >>> isToeplitz([[]]) True >>> isToeplitz([[1, 2, 3]]) True >>> isToeplitz([[1], [2], [3]]) True ```","solution":"def isToeplitz(matrix): Determines if a given matrix is a Toeplitz matrix. Args: matrix (list of list of int): 2D list representing the matrix. Returns: bool: True if the matrix is Toeplitz, False otherwise. if not matrix or not matrix[0]: return True rows = len(matrix) cols = len(matrix[0]) for row in range(1, rows): for col in range(1, cols): if matrix[row][col] != matrix[row - 1][col - 1]: return False return True"},{"question":"You are organizing a marathon, and as part of the event, you want to provide specially designed T-shirts to each participant. Each participant will get a T-shirt that has a color and a size that fits them. However, you have a limited number of available T-shirts for each color and size combination. Your goal is to determine if you can provide a suitable T-shirt for each participant based on their preferences and the available stock. You will be given a list of participant preferences and the stock of T-shirts in each color and size combination. Each participant has a preference for a specific size first and then color as a secondary preference. If a participant\'s first preferred size is not available, they can choose any size as long as the color matches their preferred color. If there are no available T-shirts that match either their preferred size or color, they cannot receive a T-shirt. Write a program that determines if all participants can receive a T-shirt according to their preferences and the available stock. Input The input consists of the following: 1. An integer `m` (1 ≤ m ≤ 100) representing the number of unique T-shirt size and color combinations available. 2. The next `m` lines each containing a string `size` and a string `color` followed by an integer `qty` (1 ≤ qty ≤ 1000), representing the size and color of T-shirts and the quantity available in stock. 3. An integer `n` (1 ≤ n ≤ 100) representing the number of participants. 4. The next `n` lines each containing a string `size` and a string `color` representing a participant\'s preferred size and color. Output Output \\"Yes\\" if all participants can receive a T-shirt based on their preferences. Output \\"No\\" otherwise. Example Input 5 M Red 10 L Blue 5 S Green 8 M Yellow 3 L Red 7 4 M Red L Blue S Green M Yellow Output Yes Input 3 M Red 2 L Blue 5 S Green 0 2 S Green L Red Output No Explanation In the first example, every participant can be provided with a T-shirt based on their preferred size and color. In the second example, the participant who prefers \\"S Green\\" cannot be matched with any T-shirt since the stock for \\"S Green\\" is zero. Therefore, the answer is \\"No\\".","solution":"def can_provide_tshirts(m, tshirt_details, n, participant_preferences): # Create a dictionary to store the stock of T-shirts stock = {} for size, color, qty in tshirt_details: if (size, color) not in stock: stock[(size, color)] = qty for size, color in participant_preferences: if (size, color) in stock and stock[(size, color)] > 0: stock[(size, color)] -= 1 else: found = False for (s, c) in stock: if c == color and stock[(s, c)] > 0: stock[(s, c)] -= 1 found = True break if not found: return \\"No\\" return \\"Yes\\""},{"question":"Your task is to develop a function that identifies the most frequently occurring element in a given list of integers. If there are multiple elements with the same highest frequency, return the smallest one among them. You will receive a list of integers as input. Your goal is to determine the element that appears most frequently within the list. If there is a tie for the highest frequency, your function should return the smallest element among those that appear most frequently. Example scenarios: - Given the list `[1, 3, 2, 2, 4, 1, 1]`, the function should return `1` since `1` appears the most frequently. - Given the list `[4, 4, 2, 2, 3, 3]`, the function should return `2` because `2` is the smallest number among those that appear with the highest frequency. You are not allowed to use any libraries other than the standard library. The function signature should be: ```python def most_frequent(lst: list) -> int: ... ``` Constraints: - The list will contain at least one element. - All elements of the list will be integers within the range `-10^5` to `10^5`. Note: Ensure that the function performs efficiently even with larger lists.","solution":"def most_frequent(lst: list) -> int: Returns the most frequently occurring element in the list. If there are ties, returns the smallest element among the ties. from collections import Counter # Count the frequency of each element in the list count = Counter(lst) # Find the maximum frequency max_freq = max(count.values()) # Filter elements that have the maximum frequency and return the smallest one most_frequent_elements = [key for key, value in count.items() if value == max_freq] return min(most_frequent_elements)"},{"question":"Write a program that finds the difference between the highest frequency and the lowest frequency of the elements in an integer array. Input The first line of input contains an integer T, which denotes the number of test cases. Each test case starts with an integer N, denoting the size of the array. The following line contains N space-separated integers, representing the elements of the array. Output For each test case, print a single integer, the difference between the highest frequency and the lowest frequency of the elements in the array. If the array has only one unique element, print 0. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ A[i] ≤ 100 SAMPLE INPUT 2 6 3 3 2 1 2 3 5 5 5 5 5 5 SAMPLE OUTPUT 2 0","solution":"def frequency_difference(test_cases): results = [] for case in test_cases: n, array = case freq = {} for num in array: if num in freq: freq[num] += 1 else: freq[num] = 1 max_freq = max(freq.values()) min_freq = min(freq.values()) if len(freq) == 1: results.append(0) else: results.append(max_freq - min_freq) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append((N, array)) index += 2 return test_cases"},{"question":"You are given an array of integers A of length N. You are required to perform a series of operations on the array until it becomes non-decreasing. In each operation, you may increment any element of the array by one. Determine the minimum number of operations required to make the array non-decreasing. Constraints * 1 leq N leq 10^5 * -10^9 leq A_i leq 10^9 (1 leq i leq N) Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Output a single integer, the minimum number of operations required. Examples Input 5 1 5 3 6 7 Output 2 Input 4 4 3 2 1 Output 6","solution":"def min_operations_to_non_decreasing(N, A): Returns the minimum number of operations required to make the array non-decreasing. operations = 0 for i in range(1, N): if A[i] < A[i-1]: operations += A[i-1] - A[i] A[i] = A[i-1] return operations # Example usage # N = 5 # A = [1, 5, 3, 6, 7] # print(min_operations_to_non_decreasing(N, A)) # Output: 2"},{"question":"You are given a matrix of integers where each row is sorted in ascending order. Your task is to write a function that converts this matrix into a single sorted list in ascending order. Input The input will be given in the following format: * `n` – the number of rows in the matrix (1 ≤ n ≤ 1000) * `m` – the number of columns in the matrix (1 ≤ m ≤ 1000) * The next `n` lines each contain `m` integers separated by spaces. Output Print a single sorted list containing all integers from the matrix in ascending order. Examples Input 3 4 1 3 5 7 2 4 6 8 0 9 10 11 Output 0 1 2 3 4 5 6 7 8 9 10 11 Input 2 3 10 20 30 15 25 35 Output 10 15 20 25 30 35","solution":"def matrix_to_sorted_list(n, m, matrix): Converts a matrix of n rows and m columns into a single sorted list. n: int - number of rows in the matrix. m: int - number of columns in the matrix. matrix: List[List[int]] - the matrix to be converted. Returns a sorted list of all integers in the matrix. # Flatten the matrix into a single list flattened_list = [elem for row in matrix for elem in row] # Sort the list in ascending order flattened_list.sort() return flattened_list"},{"question":"You are given an array of integers representing the heights of buildings in a straight line. Your task is to find the length of the longest subsequence of buildings where the heights are strictly increasing by exactly 1 at each step. For example, in the array `[3, 4, 5, 1, 2, 6, 7]`, the longest subsequence with heights strictly increasing by 1 is `[3, 4, 5]`. -----Input----- The first line contains one integer t (1 le t le 10^4) — the number of test cases. Each test case consists of two lines. The first line contains one integer n (1 le n le 10^5) — the number of buildings. The second line contains n integers h_1, h_2, dots, h_n (1 le h_i le 10^9) — the heights of the buildings. The sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, output the length of the longest subsequence of buildings where the heights are strictly increasing by 1. -----Examples----- Input 3 7 3 4 5 1 2 6 7 5 1 2 3 4 5 6 10 11 12 1 2 3 Output 3 5 3 -----Note----- In the first test case, the longest subsequence with heights strictly increasing by 1 is `[3, 4, 5]`, with a length of 3. In the second test case, the entire array `[1, 2, 3, 4, 5]` is the subsequence with heights strictly increasing by 1, with a length of 5. In the third test case, the longest subsequence is `[10, 11, 12]`, with a length of 3.","solution":"def longest_increasing_sequence_by_one(t, test_cases): results = [] for case in test_cases: n, heights = case max_length = 1 current_length = 1 for i in range(1, n): if heights[i] == heights[i - 1] + 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) results.append(max_length) return results"},{"question":"In the world of competitive programming, there\'s a very common scenario where we need to analyze and process numerical data. One particular case involves checking series of numbers for patterns including prime gaps. A prime gap is the difference between two successive prime numbers. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. You are given an integer n. Your task is to find the smallest prime number greater than n. -----Input----- A single integer n (1 ≤ n ≤ 1000). -----Output----- Print a single integer — the smallest prime number greater than n. -----Examples----- Input 10 Output 11 Input 15 Output 17 -----Note----- Sample 1. The smallest prime number greater than 10 is 11. Thus, the output is 11. Sample 2. The smallest prime number greater than 15 is 17. Thus, the output is 17.","solution":"def is_prime(num): Check if a number is prime. Parameters: num (int): The number to check. Returns: bool: True if the number is prime, False otherwise. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def smallest_prime_greater_than(n): Find the smallest prime number greater than n. Parameters: n (int): The number to find the next prime after. Returns: int: The smallest prime number greater than n. candidate = n + 1 while not is_prime(candidate): candidate += 1 return candidate"},{"question":"Given a 2D matrix \'grid\' of dimension nxm representing a maze with \'1\' as path and \'0\' as wall, and two points in the maze - a starting point (sx, sy) and a destination point (dx, dy). You need to determine if there is a path from the starting point to the destination point assuming that you can move in 4 directions: up, down, left, and right. Your task is to return a boolean value indicating whether such a path exists in the maze or not. Example 1: Input: grid = {{1,0,1,1},{1,1,1,0},{1,0,0,1},{1,1,1,1}}, start = (0,0), destination = (3,3) Output: true Explanation: There is a valid path from the starting point to the destination point. Example 2: Input: grid = {{1,0},{0,1}}, start = (0,0), destination = (1,1) Output: false Explanation: There is no valid path from the starting point to the destination point. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPathExist() which takes the grid, starting point, and destination point as inputs and returns a boolean value indicating if there is a path from the start to the destination. Expected Time Complexity: O(n*m) Expected Auxiliary Space: O(n*m) Constraints: 1 ≤ n, m ≤ 1000 0 ≤ sx, sy, dx, dy < n, m","solution":"def isPathExist(grid, start, destination): from collections import deque n = len(grid) m = len(grid[0]) sx, sy = start dx, dy = destination if grid[sx][sy] == 0 or grid[dx][dy] == 0: return False directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(sx, sy)]) visited[sx][sy] = True while queue: x, y = queue.popleft() if (x, y) == (dx, dy): return True for d in directions: nx, ny = x + d[0], y + d[1] if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 1 and not visited[nx][ny]: queue.append((nx, ny)) visited[nx][ny] = True return False"},{"question":"You are given an array of N integers where each integer represents the height of a tower. You are also given Q queries. Each query can be one of the two types: 1. Add some value X to all elements within a specific range [A, B] (both inclusive). 2. Retrieve the current height of the tower at a specified position. Write a program to process the queries and provide the results. Input Format The first line of input contains two space-separated integers N and Q, where N is the number of towers and Q is the number of queries. The second line contains N space-separated integers representing the initial heights of the towers. The next Q lines contain queries in one of the following formats: 1 A B X indicating that you should add the value X to all elements within the interval [A, B]. 2 A indicating that we are interested in knowing the current height of the tower at position A. Output Format For each query of the form 2 A, output a line saying: height of tower at position A is x where A is the position we are interested in and x is its current height. Constraints 1 ≤ N, Q ≤ 10^{5} 1 ≤ Initial height of each tower ≤ 10^{9} 1 ≤ A, B ≤ N -10^{9} ≤ X ≤ 10^{9} 1 ≤ Queries of the form 2 A ≤ N Sample Input 5 6 3 2 7 5 1 1 1 3 2 2 2 1 2 5 -1 2 4 1 3 4 3 2 5 Sample Output height of tower at position 2 is 4 height of tower at position 4 is 6 height of tower at position 5 is 3 Explanation Initially, the array of tower heights is: [3, 2, 7, 5, 1] - After the first query (1 1 3 2), the array becomes: [5, 4, 9, 5, 1] The second query (2 2) returns the height of the second tower, which is 4. - After the third query (1 2 5 -1), the array becomes: [5, 3, 8, 4, 0] The fourth query (2 4) returns the height of the fourth tower, which is 4. - After the fifth query (1 3 4 3), the array becomes: [5, 3, 11, 7, 0] The sixth query (2 5) returns the height of the fifth tower, which is 0.","solution":"def process_queries(n, heights, queries): results = [] for query in queries: if query[0] == 1: _, A, B, X = query for i in range(A - 1, B): heights[i] += X elif query[0] == 2: _, A = query results.append(f\\"height of tower at position {A} is {heights[A - 1]}\\") return results # Example Usage # Input values: n = 5 q = 6 heights = [3, 2, 7, 5, 1] queries = [ [1, 1, 3, 2], [2, 2], [1, 2, 5, -1], [2, 4], [1, 3, 4, 3], [2, 5] ] result = process_queries(n, heights, queries) print(\\"n\\".join(result))"},{"question":"Gru and minions are playing with their favorite strings. Gru challenges a minion to find the longest common prefix among a list of strings provided. Input: The first line contains an integer T, the number of test cases. Each test case consists of a number N, the number of strings. The next N lines each contain a string. Output: For each test case, print the longest common prefix of the strings. If there is no common prefix, print \\"NO COMMON PREFIX\\" without quotes. Constraints: 1 ≤ T ≤ 100 | 1 ≤ N ≤ 100 | 1 ≤ length of each string ≤ 100 SAMPLE INPUT 2 3 flower flow flight 3 dog racecar car SAMPLE OUTPUT fl NO COMMON PREFIX Explanation In the first test case, the longest common prefix for the strings \\"flower\\", \\"flow\\", and \\"flight\\" is \\"fl\\". In the second test case, there is no common prefix among \\"dog\\", \\"racecar\\", and \\"car\\", so the output is \\"NO COMMON PREFIX\\".","solution":"def longest_common_prefix(strings): if not strings: return \\"NO COMMON PREFIX\\" shortest_str = min(strings, key=len) for i, char in enumerate(shortest_str): for s in strings: if s[i] != char: return shortest_str[:i] if i > 0 else \\"NO COMMON PREFIX\\" return shortest_str if shortest_str else \\"NO COMMON PREFIX\\" def process_test_cases(test_data): result = [] index = 0 T = test_data[index] index += 1 for _ in range(T): N = test_data[index] index += 1 strings = test_data[index:index + N] index += N result.append(longest_common_prefix(strings)) return result"},{"question":"You are given an array `arr` of length `n` consisting of integers. Your task is to determine if there exists a pair of indices `(i, j)` such that `i < j` and `arr[i] + arr[j] = k`. -----Input----- The first line contains a single integer `n` (1 le n le 10^5) — the number of elements in the array. The second line contains `n` space-separated integers arr[i] (-10^9 le arr[i] le 10^9), representing the elements of the array. The third line contains a single integer `k` (-2 times 10^9 le k le 2 times 10^9) — the target sum. -----Output----- Print \\"YES\\" if there exists a pair of indices `(i, j)` such that `i < j` and `arr[i] + arr[j] = k`. Otherwise, print \\"NO\\". -----Example----- Input 5 1 2 3 4 5 6 Output YES -----Note----- In the example, the pair `(1, 5)` (1-based indexing) or `(0, 4)` (0-based indexing) where the elements are `1` and `5` respectively, sums up to `6`. Therefore, the answer is \\"YES\\".","solution":"def find_sum_pair_exists(arr, k): Determines if there exists a pair of indices (i, j) such that i < j and arr[i] + arr[j] = k. Parameters: arr (list of int): The array of integers. k (int): The target sum. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Write a function that reverses the digits of an integer, but only if the reversed integer fits within the 32-bit signed integer range of [-2^31, 2^31 - 1]. If it does not fit within the range, return 0. Example 1: Input: x = 123 Output: 321 Example 2: Input: x = -123 Output: -321 Example 3: Input: x = 120 Output: 21 Your Task: You don\'t need to read input or print anything. Your task is to complete the function reverseInteger() which takes an integer x as input and returns the reversed integer if it fits within the 32-bit signed integer range, otherwise returns 0. Expected Time Complexity: O(log(x)) Expected Auxiliary Space: O(1) Constraints: -2^31 <= x <= 2^31 - 1","solution":"def reverseInteger(x): Reverses the digits of an integer x if the reversed integer fits within the 32-bit signed integer range of [-2^31, 2^31 - 1]. Returns 0 otherwise. INT_MAX, INT_MIN = 2**31 - 1, -2**31 neg = x < 0 x = abs(x) reversed_x = 0 while x != 0: digit = x % 10 x //= 10 if reversed_x > (INT_MAX - digit) // 10: # check for overflow return 0 reversed_x = reversed_x * 10 + digit reversed_x = -reversed_x if neg else reversed_x return reversed_x"},{"question":"You have been given a magic box. The box performs a special operation of summing the unique factors of a number. Create a function called `sum_unique_factors` that takes a single integer argument `n` and returns the sum of all the unique factors (including 1 and `n` itself) of `n`, provided `n` is a positive integer. If `n` is not a positive integer, the function should return `None`. Examples: ``` sum_unique_factors(12) => 28 # The factors of 12 are 1, 2, 3, 4, 6, and 12 # Sum of these factors is 1 + 2 + 3 + 4 + 6 + 12 = 28 sum_unique_factors(10) => 18 # The factors of 10 are 1, 2, 5, and 10 # Sum of these factors is 1 + 2 + 5 + 10 = 18 sum_unique_factors(19) => 20 # The factors of 19 are 1 and 19 # Sum of these factors is 1 + 19 = 20 sum_unique_factors(-5) => None # -5 is not a positive integer sum_unique_factors(0) => None # 0 is not a positive integer sum_unique_factors(1) => 1 # The only factor of 1 is 1 itself ```","solution":"def sum_unique_factors(n): Returns the sum of the unique factors of a positive integer n. If n is not a positive integer, returns None. if n <= 0: return None factors = set() for i in range(1, int(n**0.5) + 1): if n % i == 0: factors.add(i) factors.add(n // i) return sum(factors)"},{"question":"A social media application uses a feature called \\"Circles\\" to allow users to create groups of friends. Each user can create one or more circles and add any number of friends (represented by their user IDs) to each circle. Users can also be part of multiple circles. However, sometimes users receive recommendations of new friends who are not currently in any of their circles. Write a function to help a user find the list of recommended friends. The recommendations are based on friends of friends who are not already in any of the user\'s circles. Input: The input consists of: 1. An integer `n` representing the number of circles the user has. 2. Next `n` lines, each containing space-separated integers representing the user IDs of friends in each circle. 3. An integer `m` representing the number of other users (friends of friends) to analyze for recommendations. 4. `m` lines, each with a space-separated list of integers where the first integer is a user ID of a friend and the remaining integers represent the user IDs of friends of that friend. Output: Print the list of recommended friends\' user IDs in ascending order. If there are no recommendations, print an empty list. Example: Input: 3 1 2 3 4 5 6 7 8 9 2 1 10 11 4 2 3 12 Output: [10, 11, 12] Explanation: The user has friends in 3 circles: - Circle 1: [1, 2, 3] - Circle 2: [4, 5] - Circle 3: [6, 7, 8, 9] Friends of friend 1 are [10, 11], neither of whom are in any of the user\'s circles, so they are recommended. Friends of friend 4 are [2, 3, 12], but [2, 3] are already in the user\'s circles, so only 12 is recommended. Thus, the output list of recommended friends is [10, 11, 12]. Constraints: - The number of circles `n` is an integer between 1 and 100. - The number of friends in each circle can be from 1 to 100. - User IDs are unique positive integers and can go up to 10^4. - Friends of friends\' lists (m lines) each can contain up to 1000 user IDs.","solution":"def find_recommended_friends(n, circles, m, friends_of_friends): user_friends_set = set() # Aggregate all user friends from all circles into a set for circle in circles: user_friends_set.update(circle) recommended_friends_set = set() # Process each friend and their friends of friends for fof in friends_of_friends: friend_id = fof[0] friends_of_friend = fof[1:] for friend in friends_of_friend: if friend not in user_friends_set: recommended_friends_set.add(friend) recommended_friends_list = sorted(recommended_friends_set) return recommended_friends_list"},{"question":"Write a function that simulates a game of \\"FizzBuzz\\" for numbers from 1 up to a given integer N. The rules of \\"FizzBuzz\\" are as follows: - If a number is divisible by 3, print \\"Fizz\\". - If a number is divisible by 5, print \\"Buzz\\". - If a number is divisible by both 3 and 5, print \\"FizzBuzz\\". - Otherwise, print the number itself. Your function should take an integer N as input and print the output for each number from 1 to N on a new line. Input A single integer N, where (1 ≤ N ≤ 100). Output N lines each containing either \\"Fizz\\", \\"Buzz\\", \\"FizzBuzz\\", or the number itself according to the rules described above. Example Input: 15 Output: 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz","solution":"def fizzbuzz(N): Simulates the FizzBuzz game for numbers from 1 to N. Parameters: N (int): The upper limit for the game (inclusive). Returns: list: A list of strings representing the FizzBuzz output for each number from 1 to N. result = [] for i in range(1, N + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"You are given an array of integers representing the height of buildings in a row. People can see the horizon if there is no taller building blocking their view to the east. Write a function to determine how many people in each building can see the horizon. -----Input----- The input contains: - An integer n (1 le n le 100000), the number of buildings. - An array of n integers h_i (1 le h_i le 100000), representing the height of each building from west to east. -----Output----- Output a single integer, the number of buildings from which people can see the horizon. -----Examples----- Sample Input: 6 3 7 8 3 6 1 Sample Output: 3","solution":"def count_buildings_with_horizon_view(n, heights): Determines how many buildings can see the horizon. Parameters: n (int): The number of buildings. heights (list of int): The heights of the buildings. Returns: int: The number of buildings from which people can see the horizon. if n == 0: return 0 max_height = 0 count = 0 for height in reversed(heights): if height > max_height: count += 1 max_height = height return count"},{"question":"Write a function that takes a string S consisting of lowercase letters and returns a new string that contains the same characters, but ordered such that no two adjacent characters are the same. If it is not possible to rearrange the string in such a way, return an empty string. The function should strive to maintain the relative frequency of the characters in the original string, distributing them as evenly as possible. For example, given S = \\"aabb\\", the function might return \\"abab\\" or \\"baba\\". Given S = \\"aaab\\", the function should return an empty string since it\'s not possible to rearrange the characters to meet the condition.","solution":"from heapq import heappush, heappop def reorganize_string(S): Returns a new string where no two adjacent characters are the same. If not possible, returns an empty string. if not S: return \\"\\" # Count frequency of each character char_count = {} for char in S: char_count[char] = char_count.get(char, 0) + 1 # Create a max-heap based on character frequency max_heap = [] for char, count in char_count.items(): heappush(max_heap, (-count, char)) result = [] prev_count, prev_char = 0, \'\' while max_heap: count, char = heappop(max_heap) # Append the previous character back to the heap if it has remaining count if prev_count < 0: heappush(max_heap, (prev_count, prev_char)) # Append the current character to the result result.append(char) prev_count, prev_char = count + 1, char # Update count after placing char result_str = \\"\\".join(result) # If the result is valid, its length should be same as original string return result_str if len(result_str) == len(S) else \\"\\""},{"question":"You are given an array of integers, and you need to find the length of the longest contiguous subarray that contains each element with an even number of occurrences. -----Input----- The first line contains an integer n (1 le n le 100000) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 100000) — the elements of the array. -----Output----- Print the length of the longest contiguous subarray that meets the requirement. -----Examples----- Input 6 1 2 1 2 2 1 Output 4 Input 10 3 3 2 2 1 1 1 1 2 2 Output 10 Input 5 1 3 5 7 5 Output 4 -----Note----- In the first example, the longest contiguous subarray where each element appears an even number of times is [1, 2, 1, 2], and its length is 4. In the second example, the entire array [3, 3, 2, 2, 1, 1, 1, 1, 2, 2] already meets the requirement, and its length is 10. In the third example, the longest contiguous subarray where each element appears an even number of times is [3, 5, 7, 5], and its length is 4.","solution":"def longest_even_occurrences_subarray(n, arr): Returns the length of the longest contiguous subarray where each element appears an even number of times. from collections import defaultdict last_seen = {0: -1} counts = defaultdict(int) xor = 0 max_len = 0 for i in range(n): counts[arr[i]] += 1 if counts[arr[i]] % 2 == 0: xor ^= arr[i] else: xor ^= arr[i] if xor in last_seen: max_len = max(max_len, i - last_seen[xor]) else: last_seen[xor] = i return max_len"},{"question":"Jack and Jill love to collect fruits from the garden. They play a game to determine who collected more fruits. The game proceeds as follows: First, Jill collects a certain number of fruits F1. Then, Jack collects a certain number of fruits F2. Jill wins the game if she collects more fruits than Jack; otherwise, Jack wins. Given F1 and F2, determine who wins the game. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first and only line of each test case contains two space-separated integers F1 and F2. ------ Output Format ------ For each test case, output on a new line the winner of the game: Jill or Jack. Each letter of the output may be printed in either uppercase or lowercase, i.e, Jill, JILL, jIll and jIll will all be considered equivalent. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ F1, F2 ≤ 100 ----- Sample Input 1 ------ 3 10 5 10 10 2 8 ----- Sample Output 1 ------ Jill Jack Jack ----- explanation 1 ------ Test case 1: F1 = 10 and F2 = 5. Jill collects more fruits (10 > 5), so Jill wins. Test case 2: F1 = 10 and F2 = 10. Jack does not collect fewer fruits than Jill, so Jack wins. Test case 3: F1 = 2 and F2 = 8. Jill collects fewer fruits than Jack, so Jack wins.","solution":"def determine_winner(T, test_cases): Determine the winner of the fruit collecting game for given test cases. Parameters: - T: Number of test cases - test_cases: List of tuples where each tuple contains two integers (F1, F2) Returns: - List of strings, each representing the winner (\\"Jill\\" or \\"Jack\\") for each test case results = [] for F1, F2 in test_cases: if F1 > F2: results.append(\\"Jill\\") else: results.append(\\"Jack\\") return results"},{"question":"You are given an n times n matrix filled with integers. You can perform a single operation that selects any element in the matrix and increases or decreases its value by 1. Your task is to make all the elements in the matrix equal to the same value with the minimal number of operations. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The next 2t lines contain the descriptions of all test cases. The first line of each test case contains an integer n (2 le n le 50) — the size of the matrix. The next n lines contain n integers each, representing the elements of the matrix. -----Output----- For each test case, output the minimal number of operations needed to make all the elements in the matrix equal. -----Example----- Input 2 2 1 2 3 4 3 4 2 3 1 2 3 3 2 3 Output 6 4 -----Explanation----- In the first test case, one possible solution is to make all elements equal to 2. This will take (2−1)+(2−2)+(4−2)+(3−2) = 1 + 0 + 2 + 1 = 4 operations. In the second test case, one possible solution is to make all elements equal to 3. This will take (3−4)+(2−3)+(3−3)+(2−1)+(3−2)+(3−2) = 1 + 1 + 0 + 2 + 1 + 1 = 6 operations.","solution":"def min_operations_to_equal_matrix(t, test_cases): results = [] for index in range(t): n = test_cases[index][0] matrix = test_cases[index][1] # Collect all elements of the matrix into a single list and sort it elements = [element for row in matrix for element in row] elements.sort() # Find the median of the flattened sorted list median = elements[len(elements) // 2] # Calculate the total number of operations to make all elements equal to the median min_operations = sum(abs(element - median) for element in elements) results.append(min_operations) return results"},{"question":"Sarah is fascinated by number sequences and decides to challenge her friend John with one. She presents John with a sequence of integers and a target sum. John\'s task is to find a pair of distinct integers in the sequence that add up to the given target sum. If no such pair exists, John should return \\"No pair found.\\" -----Input:----- - First line will contain an integer N, the number of elements in the sequence. - Second line will contain N space-separated integers representing the sequence. - Third line will contain a single integer T, the target sum. -----Output:----- For each testcase, output a single line with the pair of integers that add up to the target sum, separated by a space. If no such pair exists, output \\"No pair found\\". -----Constraints----- - 2 leq N leq 100 - 1 leq each element of the sequence leq 100 - 1 leq T leq 200 -----Sample Input:----- 5 1 2 3 4 5 9 -----Sample Output:----- 4 5 -----Sample Input:----- 4 10 20 30 40 100 -----Sample Output:----- No pair found","solution":"def find_pair_with_sum(n, sequence, target): Finds and returns a pair of distinct integers in the sequence that sum up to the target. If no such pair exists, returns \\"No pair found\\". seen = set() for num in sequence: complement = target - num if complement in seen: return f\\"{complement} {num}\\" seen.add(num) return \\"No pair found\\" # Function to read input and call the find_pair_with_sum function def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) sequence = list(map(int, data[1:n+1])) target = int(data[n+1]) print(find_pair_with_sum(n, sequence, target))"},{"question":"# Description: You are given a list of integer values representing the expenses incurred each day in a small business over a certain period. Ideally, the business aims to keep the expenses below a certain budget threshold on daily expenses. Your task is to determine on how many days the expense exceeded the given budget. # Input: - A list of integers representing the daily expenses. - An integer representing the budget threshold. # Output: - An integer representing the number of days the expense exceeded the budget. # Examples: ``` For Python: count_exceeded_days([120, 150, 90, 130, 100, 85], 100) should return 3 count_exceeded_days([200, 180, 220, 210, 170], 200) should return 3 count_exceeded_days([50, 60, 70, 80, 90], 100) should return 0 ```","solution":"def count_exceeded_days(expenses, budget_threshold): Counts the number of days the expenses exceeded the budget threshold. :param expenses: List of integers representing daily expenses. :param budget_threshold: Integer representing the budget threshold for daily expenses. :return: Integer representing the number of days the expenses exceeded the budget threshold. count = 0 for expense in expenses: if expense > budget_threshold: count += 1 return count"},{"question":"A restaurant chain maintains a system of unique customer orders. Each order is represented as a list of items, where each item is denoted by an integer. The system needs to check for duplicate orders. Two orders are considered duplicates if they consist of the exact same set of items, regardless of the order in which the items appear. Write a function that takes a list of orders and returns another list containing only unique orders. The orders should be sorted in ascending order based on the customer IDs since each order is associated with a unique customer ID. # Function Signature: ```python def remove_duplicate_orders(orders: List[List[int]]) -> List[List[int]]: pass ``` # Input: - `orders`: A list of lists, where each sublist represents an order consisting of integers representing item IDs. Each order is guaranteed to have a unique customer ID. Each item ID is between 1 and 1000. There will be at most 1000 orders. # Output: - A list of lists containing only unique orders, sorted based on the customer IDs associated with each order. # Example: Input: ```python orders = [ [2, 3, 1], [5, 3, 2], [4, 1, 2, 3], [1, 2, 3], [3, 2, 1], [2, 5, 3], [2, 4, 1, 3] ] ``` Output: ```python [ [1, 2, 3], [2, 3, 5], [1, 2, 3, 4] ] ``` # Constraints: - The orders are associated with unique customer IDs that are implicitly represented by their position in the input list. - Each sublist representing an order may contain duplicate items, but such duplicates should not affect the uniqueness check (e.g., `[1, 2, 2]` should be treated as `[1, 2]` when checking for duplicates).","solution":"from typing import List def remove_duplicate_orders(orders: List[List[int]]) -> List[List[int]]: unique_orders = set() result = [] for order in orders: # Create a sorted tuple of unique items in order order_items = tuple(sorted(set(order))) if order_items not in unique_orders: unique_orders.add(order_items) result.append(list(order_items)) # Sort results by the original customer ID order (implicitly by the order in the list) return result"},{"question":"You are given a string consisting of lowercase English letters. Your task is to write a function that finds and returns the length of the longest substring without repeating characters. Example ```python input_string = \\"abcabcbb\\" length_of_longest_substring(input_string) ==> 3 # The answer is \\"abc\\", with the length of 3. input_string = \\"bbbbb\\" length_of_longest_substring(input_string) ==> 1 # The answer is \\"b\\", with the length of 1. input_string = \\"pwwkew\\" length_of_longest_substring(input_string) ==> 3 # The answer is \\"wke\\", with the length of 3. ``` --- *Inspired by common string manipulation problems found in coding interviews.*","solution":"def length_of_longest_substring(s: str) -> int: Finds the length of the longest substring without repeating characters. Args: s (str): Input string. Returns: int: The length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end longest = max(longest, end - start + 1) return longest"},{"question":"In a kingdom far away, there are n castles, numbered from 1 to n. Each castle is connected to exactly one other castle by a direct road. The roads are bidirectional, meaning you can travel both ways on each road. You can consider each road as a simple line connecting two castles. The kingdom\'s map is represented by an array where each element describes a direct road between two castles. Unfortunately, a powerful wizard has cast a spell and destroyed some sections of some roads. The king wants to know if it’s still possible to travel from castle 1 to castle k (2 le k le n). Can you write a program to determine if there is still a way to travel from castle 1 to castle k using the remaining roads? -----Input----- The first line contains two integers n and k (2 le k le n le 1000) — the number of castles and the number of the target castle. The next n-1 lines each contain two integers u and v (1 le u, v le n) — indicating there is initially a direct road between castle u and castle v. The next line contains an integer m (0 le m le n-1) — the number of destroyed roads. The following m lines each contain two integers u and v (1 le u, v le n) — indicating a section of the road between castle u and castle v is destroyed and cannot be traveled on. -----Output----- Print \\"YES\\" (quotes for clarity) if it is still possible to travel from castle 1 to castle k. Otherwise, print \\"NO\\" (quotes for clarity). You can print each letter in any case (upper or lower). -----Examples----- Input 5 4 1 2 2 3 3 4 4 5 0 Output YES Input 5 5 1 2 2 3 3 4 4 5 2 3 4 4 5 Output NO Input 3 3 1 2 2 3 1 2 3 Output NO -----Note----- In the first example, all roads are still intact, so it\'s possible to travel from castle 1 to castle 4. In the second example, the road sections between castle 3 and castle 4, and between castle 4 and castle 5 are destroyed, making it impossible to reach castle 5 from castle 1. In the third example, the road between castle 2 and castle 3 is destroyed, making it impossible to reach castle 3 from castle 1.","solution":"def can_travel(n, k, roads, destroyed_roads): from collections import defaultdict, deque graph = defaultdict(list) # Build the graph with remaining roads for u, v in roads: graph[u].append(v) graph[v].append(u) for u, v in destroyed_roads: if v in graph[u]: graph[u].remove(v) if u in graph[v]: graph[v].remove(u) # Implement BFS to check connectivity visited = set() queue = deque([1]) # Start BFS from castle 1 while queue: node = queue.popleft() if node == k: return \\"YES\\" for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return \\"NO\\" # Example usage: # n = 5 # k = 4 # roads = [(1, 2), (2, 3), (3, 4), (4, 5)] # destroyed_roads = [] # print(can_travel(n, k, roads, destroyed_roads)) # Output: \\"YES\\""},{"question":"Given a list of integers, determine whether the list can be arranged to form an arithmetic sequence. In an arithmetic sequence, the difference between consecutive elements is constant. Example 1: Input: [3, 5, 1] Output: true Example 2: Input: [1, 2, 4] Output: false Note: - The length of the list will be at least 2 and no more than 1000. - The list elements are integers and can be negative or positive. - An empty list cannot form an arithmetic sequence.","solution":"def can_form_arithmetic_sequence(arr): Determines whether the list can be arranged to form an arithmetic sequence. Args: arr (list): A list of integers. Returns: bool: True if the list can be arranged to form an arithmetic sequence, False otherwise. if len(arr) < 2: return False arr.sort() common_difference = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i-1] != common_difference: return False return True"},{"question":"In an amusement park, there is a popular game involving a rectangular grid with n rows and m columns. Each cell in this grid can be either open (represented by \'.\') or blocked (represented by \'#\'). You can place a ride on any open cell, but each ride occupies an entire column from top to bottom, and it needs at least k continuous open cells in that column in order to be placed. Write a function that determines how many rides can be placed on the grid given the constraints. Input format: The first line of input will contain three integers n, m, and k. The next n lines of input will contain m characters each, denoting the grid configuration. Output format: Print a single integer representing the maximum number of rides that can be placed on the grid. Constraints: 1 <= n, m <= 1000 1 <= k <= n SAMPLE INPUT 5 5 3 ..... .#.#. .#.#. ..... # SAMPLE OUTPUT 3 Explanation: In this example, the optimal strategy is to place rides in the 1st, 4th, and 5th columns. Here is the grid with the possible rides placement: ..... .#.#. .#.#. ..... # Rides can be placed as follows: - A ride in column 1 (rows 1, 2, 3). - A ride in column 4 (rows 1, 2, 3). - A ride in column 5 (rows 1, 2, 3).","solution":"def count_rides(n, m, k, grid): Determines the maximum number of rides that can be placed on the grid. :param n: Number of rows in the grid. :param m: Number of columns in the grid. :param k: Minimum number of continuous open cells required in a column to place a ride. :param grid: List of strings, representing the grid configuration. :return: Maximum number of rides that can be placed. ride_count = 0 for col in range(m): continuous_open_cells = 0 for row in range(n): if grid[row][col] == \'.\': continuous_open_cells += 1 if continuous_open_cells >= k: ride_count += 1 break else: continuous_open_cells = 0 return ride_count"},{"question":"Write a program that reads a list of integers and outputs the sum of the elements at even indices (0-based) and the sum of the elements at odd indices separately. Constraints * The length of the list will be between 1 and 1000. * Each integer in the list will be between -1000 and 1000. Input The first line contains an integer n, the length of the list. The second line contains n space-separated integers forming the list. Output Print two integers separated by a space: - The sum of the elements at even indices. - The sum of the elements at odd indices. Examples Input 5 1 2 3 4 5 Output 9 6 Input 4 10 -1 2 3 Output 12 2 Input 3 5 8 -3 Output 2 8","solution":"def sum_even_odd_indices(n, elements): Returns the sum of the elements at even indices and the sum of the elements at odd indices. Args: n (int): the length of the list. elements (list): list of integers. Returns: tuple: (sum of elements at even indices, sum of elements at odd indices) sum_even = 0 sum_odd = 0 for i in range(n): if i % 2 == 0: sum_even += elements[i] else: sum_odd += elements[i] return sum_even, sum_odd # Example usage: # n = 5 # elements = [1, 2, 3, 4, 5] # print(sum_even_odd_indices(n, elements)) # Output: (9, 6)"},{"question":"# Task Write a function `longestPalindromicSubstring` that accepts one parameter: - a string `s` The function should return the longest palindromic substring of `s`. A palindrome is a sequence of characters that reads the same backward as forward. # Examples: ```python longestPalindromicSubstring(\\"babad\\") # \\"bab\\" or \\"aba\\" longestPalindromicSubstring(\\"cbbd\\") # \\"bb\\" longestPalindromicSubstring(\\"a\\") # \\"a\\" longestPalindromicSubstring(\\"ac\\") # \\"a\\" or \\"c\\" ``` # Constraints: - `1 <= len(s) <= 1000` - `s` consists of only digits and English letters (uppercase and/or lowercase). # Notes: - In case of multiple palindromes of the same length, you may return any of them. - Python users should be aware of the O(n^2) time complexity solution to avoid time limit exceeded error.","solution":"def longestPalindromicSubstring(s): Returns the longest palindromic substring of s. n = len(s) if n <= 1: return s # Helper function to expand around the center and find the longest palindrome def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest_palindrome = \\"\\" for i in range(n): # Odd length palindromes (single character center) palindrome1 = expand_around_center(i, i) # Even length palindromes (two character center) palindrome2 = expand_around_center(i, i + 1) # Update the longest palindrome if len(palindrome1) > len(longest_palindrome): longest_palindrome = palindrome1 if len(palindrome2) > len(longest_palindrome): longest_palindrome = palindrome2 return longest_palindrome"},{"question":"Alice is a security analyst working for a prestigious company. She needs to review the security logs to identify possible hacker attempts. The logs contain records of login attempts for different users. Each attempt is characterized by the user\'s ID and the status of the attempt (successful or failed). If a user has more than `k` consecutive failed login attempts followed by at least one successful login, it indicates a potential hacking attempt on that account. Given the security logs for multiple users and the value of `k`, determine the user IDs that have experienced potential hacking attempts. -----Input----- The input consists of multiple test cases. The first line contains a single integer `t` (`1 ≤ t ≤ 1000`) — the number of test cases. The following lines contain descriptions of the test cases. For each test case: - The first line contains two integers `n` (`1 ≤ n ≤ 10^5`) and `k` (`1 ≤ k ≤ n`) representing the number of login attempts and the threshold for consecutive failed attempts. - The next `n` lines each contain a string representing the user ID (a sequence of alphanumeric characters with length between `1` and `20`) and a status (`\\"success\\"` or `\\"fail\\"`). -----Output----- For each test case, print the user IDs that have experienced potential hacking attempts. If there are multiple user IDs, print them in the order they appeared in the logs. If no user has experienced a hacking attempt, print \\"No potential hacking attempts\\". -----Example----- Input 2 8 3 user1 fail user1 fail user1 fail user1 success user2 fail user2 success user2 fail user2 success 6 2 user3 fail user3 fail user3 fail user4 fail user4 fail user4 success Output user1 user4 Explanation: In the first test case: - `user1` had three consecutive failed attempts followed by a successful login, indicating a potential hacking attempt. - `user2` does not meet the criteria. In the second test case: - `user3` had three consecutive failed attempts but no successful login after that, so it does not indicate a potential hacking attempt. - `user4` had two consecutive failed attempts followed by a successful login, meeting the criteria for a potential hacking attempt. Therefore, `user4` is the answer.","solution":"def find_potential_hacking_attempts(t, test_cases): results = [] for case in test_cases: n, k, logs = case user_attempts = {} suspicious_users = set() for user_id, status in logs: if user_id not in user_attempts: user_attempts[user_id] = [] if status == \\"fail\\": if user_attempts[user_id] and user_attempts[user_id][-1][0] == \\"fail\\": user_attempts[user_id][-1][1] += 1 else: user_attempts[user_id].append([\\"fail\\", 1]) else: user_attempts[user_id].append([\\"success\\", 1]) for user_id, attempts in user_attempts.items(): is_suspicious = False for i in range(len(attempts)): if attempts[i][0] == \\"fail\\" and attempts[i][1] >= k: if i + 1 < len(attempts) and attempts[i + 1][0] == \\"success\\": is_suspicious = True break if is_suspicious: suspicious_users.add(user_id) if suspicious_users: results.append(list(suspicious_users)) else: results.append(\\"No potential hacking attempts\\") return results # Helper function to process input and produce the results. def process_input_and_find_attempts(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0].strip()) index = 1 test_cases = [] for _ in range(t): n, k = map(int, lines[index].strip().split()) logs = [] for j in range(index + 1, index + 1 + n): user_id, status = lines[j].strip().split() logs.append((user_id, status)) test_cases.append((n, k, logs)) index += n + 1 return find_potential_hacking_attempts(t, test_cases)"},{"question":"A software engineer is working on optimizing a large-scale logging system. The system maintains a log of events in a circular buffer to efficiently handle continuous data streams. Initially, the buffer is empty, and new entries are appended to the tail. Once the buffer is full, the oldest entries are overwritten. Given an initially empty buffer of fixed size N, the goal is to determine the state of the buffer after a sequence of M insertions. Each insertion appends an entry to the tail of the current buffer. If the buffer is full, the oldest entry is removed to make space for the new entry. Write a program to simulate this and output the final state of the buffer. -----Input----- The first line of input contains two positive integers N and M (1 le N le 100000, 1 le M le 100000), representing the size of the buffer and the number of entries respectively. The second line contains M space-separated integers representing the entries being inserted into the buffer in order. -----Output----- The output must be a single line containing N space-separated integers representing the state of the buffer after all insertions have been performed. If the total number of entries is less than N, only the number of elements inserted into the buffer should be printed. -----Examples----- Sample Input 1: 5 7 1 2 3 4 5 6 7 Sample Output 1: 3 4 5 6 7 Sample Input 2: 4 3 10 20 30 Sample Output 2: 10 20 30","solution":"def get_final_buffer_state(N, M, entries): Returns the final state of the buffer after all entries have been inserted. :param N: int, size of the buffer :param M: int, number of entries :param entries: list of int, the entries being inserted into the buffer :return: list of int, the state of the buffer after all insertions buffer = [] for entry in entries: if len(buffer) < N: buffer.append(entry) else: buffer.pop(0) buffer.append(entry) return buffer"},{"question":"Petya has prepared a collection of boxes for a school event. Each box contains a certain number of candies, and Petya wants to rearrange the candies such that each box ultimately has an even number of candies. Petya can perform the following operation any number of times: choose any two boxes and move one candy from one box to the other. Write a program to determine if it is possible to make the number of candies in each box even using the allowed operation. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of boxes. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1000) — the number of candies in each box initially. Output Print \\"YES\\" if it is possible to make the number of candies in each box even, otherwise print \\"NO\\". Examples Input 3 1 2 3 Output YES Input 4 1 3 5 7 Output NO Note In the first example, one possible way to achieve even numbers in each box is: - Move 1 candy from the third box to the first box (now the candies are [2, 2, 2]). In the second example, it is impossible to make all the boxes have an even number of candies because there are no two boxes with a different parity of the number of candies that would allow achieving even numbers for all.","solution":"def can_make_even_candies(n, candies): Returns \\"YES\\" if it is possible to make the number of candies in each box even, otherwise returns \\"NO\\". odd_count = sum(1 for candy in candies if candy % 2 != 0) return \\"YES\\" if odd_count % 2 == 0 else \\"NO\\""},{"question":"A software company is designing a system to manage online bookings for various resources (like meeting rooms, equipment, etc.). Each resource can be booked for a specific time period. You are tasked with implementing a function that checks whether a new booking would conflict with any existing bookings. You will be given a list of existing bookings and a new booking request. Each booking is represented by a start and end time. Your task is to determine if the new booking overlaps with any of the existing bookings. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - Each test case starts with an integer N, the number of existing bookings. - The next N lines each contain two space-separated integers, start and end, representing an existing booking (start < end). - The last line of each test case contains two space-separated integers, new_start and new_end, representing the new booking request (new_start < new_end). ------ Output Format ------ For each test case, print \\"Conflict\\" if the new booking overlaps with any of the existing bookings. Otherwise, print \\"No Conflict\\". ------ Constraints ------ 1 ≤ T ≤ 10^{4} 0 ≤ N ≤ 10^{5} 0 ≤ start < end ≤ 10^{9} 0 ≤ new_start < new_end ≤ 10^{9} ------ Sample Input 1 ------ 3 2 1 5 6 10 2 3 1 3 5 5 7 4 6 3 8 12 14 16 20 25 26 30 ------ Sample Output 1 ------ Conflict No Conflict No Conflict ------ Explanation 1 ------ - Test case 1: The new booking [2, 3] overlaps with the existing booking [1, 5], so the output is \\"Conflict\\". - Test case 2: The new booking [4, 6] does not overlap with the existing booking [5, 7], so the output is \\"No Conflict\\". - Test case 3: The new booking does not overlap with any of the existing bookings, so the output is \\"No Conflict\\".","solution":"def has_conflict(bookings, new_booking): Checks if the new booking conflicts with existing bookings. Parameters: bookings (list of tuples): List of (start, end) tuples representing existing bookings new_booking (tuple): A tuple (new_start, new_end) representing the new booking Returns: str: \\"Conflict\\" if the new booking overlaps with any of the existing bookings, \\"No Conflict\\" otherwise new_start, new_end = new_booking for start, end in bookings: if not (new_end <= start or new_start >= end): return \\"Conflict\\" return \\"No Conflict\\" def process_test_cases(test_cases): results = [] for bookings, new_booking in test_cases: results.append(has_conflict(bookings, new_booking)) return results"},{"question":"John is an avid hiker who plans to climb a mountain. The mountain\'s trail can be represented as a series of steps. Each step can either go uphill (\'U\') or downhill (\'D\'). He starts his journey at sea level and every upward step increases his altitude by one unit and every downward step decreases his altitude by one unit. John wants to know how many valleys he has crossed during his hike. A valley is defined as any sequence of steps starting with a step down from sea level and ends with a step up to sea level. Example Input : path = \\"UDDDUDUU\\" Output : 1 Explanation : During the hike, John first goes uphill (\'U\') to an altitude of 1, then three steps down into a valley to -2 (\'DDD\'). He then goes uphill (\'U\') to -1. Then he goes downhill (\'D\'), and finally two steps uphill (\'UU\') to sea level, thus completing one valley. Example Input : path = \\"DDUUUUDD\\" Output : 1 Explanation : During the hike, John takes two steps down into a valley and then four steps up to sea level, thus completing one valley. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countValleys() which takes the string path as input parameter and returns the number of valleys crossed. Expected Time Complexity : O(|path|) Expected Auxiliary Space : O(1) Constraints: 1 <= |path| <= 10^5","solution":"def count_valleys(path): Returns the number of valleys crossed during the hike given a path string. A valley is defined as any sequence of steps starting with a step down from sea level and ends with a step up to sea level. altitude = 0 valleys = 0 in_valley = False for step in path: if step == \'U\': altitude += 1 elif step == \'D\': altitude -= 1 if altitude < 0 and not in_valley: in_valley = True elif altitude == 0 and in_valley: valleys += 1 in_valley = False return valleys"},{"question":"Given two binary trees, check if they are mirror images of each other. Input: You have to complete the method which takes 2 arguments: the root nodes of the two binary trees. You should not read any input from stdin/console. There are multiple test cases. For each test case, this method will be called individually. Output: Your function should return a boolean indicating whether the two binary trees are mirrors of each other. User Task: The task is to complete the function areMirrors() which should determine whether the two given binary trees are mirror images of each other. Constraints: 1 <=T<= 50 1 <= number of nodes in each tree <= 1000 1 <= node values <= 10^4 Example: Input: 2 3 1 2 3 3 1 3 2 3 1 2 3 3 1 2 3 Output: True False Explanation: Testcase 1: The first tree in pre-order is 1, 2, 3 and the second tree in pre-order is 1, 3, 2 which are mirror images of each other. Testcase 2: Both trees in pre-order are 1, 2, 3 which are not mirror images of each other.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def areMirrors(root1, root2): Returns True if the trees with roots root1 and root2 are mirror images of each other, otherwise False. if root1 is None and root2 is None: return True if root1 is None or root2 is None: return False return (root1.value == root2.value and areMirrors(root1.left, root2.right) and areMirrors(root1.right, root2.left))"},{"question":"You are given a string array `words` and an integer `k`. Your task is to find the `k` most frequent words in the array. Return the answer in the sorted order by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first. Example 1: Input: words = [\\"i\\", \\"love\\", \\"leetcode\\", \\"i\\", \\"love\\", \\"coding\\"], k = 2 Output: [\\"i\\", \\"love\\"] Explanation: \\"i\\" and \\"love\\" are the two most frequent words. Example 2: Input: words = [\\"the\\", \\"day\\", \\"is\\", \\"sunny\\", \\"the\\", \\"the\\", \\"the\\", \\"sunny\\", \\"is\\", \\"is\\"], k = 4 Output: [\\"the\\", \\"is\\", \\"sunny\\", \\"day\\"] Explanation: \\"the\\", \\"is\\", \\"sunny\\" and \\"day\\" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively. Constraints: - 1 <= words.length <= 500 - 1 <= words[i].length <= 10 - words[i] consists of lowercase English letters. - k is in the range [1, number of unique words in the array].","solution":"from collections import Counter import heapq def top_k_frequent(words, k): Returns the k most frequent words from the list of words sorted by frequency. If two words have the same frequency, the word with the lower alphabetical order comes first. count = Counter(words) # Use a heap to keep track of the top k elements heap = [(-freq, word) for word, freq in count.items()] heapq.heapify(heap) return [heapq.heappop(heap)[1] for _ in range(k)]"},{"question":"Eating contest enthusiasts John, Amy, and Max each have a unique approach to managing their candy collection. To ensure fairness and consistency, they decided to organize their candies. They came up with a rule to help identify if their candy collection could be organized in a non-decreasing order with a simple operation. The rule allows them to perform the following operations as needed: - Any positive integer number of times, they can pick any single candy and move it to either the start or the end of the candy collection. Given a list representing that candy collection, determine if it can be sorted in non-decreasing order using the given operation. -----Input----- Each test contains multiple test cases. The first line contains one positive integer t (1 le t le 1000), denoting the number of test cases. Description of the test cases follows. The first line of each test case contains one positive integer n (1 le n le 10^5) — the number of candies in the collection. The second line contains n integers c_i (1 le c_i le 10^9) — representing the candy sizes. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print \\"YES\\" (without quotation marks) if the candies can be sorted in non-decreasing order using the allowed operations; otherwise, print \\"NO\\" (without quotation marks). -----Example----- Input 3 4 3 1 2 4 5 1 2 3 4 5 3 3 2 1 Output YES YES NO -----Note----- In the first test case, candies can be sorted as: move 1 to the start -> [1, 3, 2, 4], then move 2 to the position after 1 -> [1, 2, 3, 4]. In the second test case, candies are already sorted. In the third test case, it\'s impossible to sort the candies in non-decreasing order using the given operations.","solution":"def can_be_sorted(t, test_cases): results = [] for case in test_cases: n, candies = case if candies == sorted(candies): results.append(\\"YES\\") continue displaced = False for i in range(n-1): if candies[i] > candies[i+1]: if displaced: results.append(\\"NO\\") break displaced = True else: results.append(\\"YES\\") return results # Function to process input and output def process_candy_sorting_input_output(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) candies = list(map(int, lines[index + 1].split())) test_cases.append((n, candies)) index += 2 results = can_be_sorted(t, test_cases) return \\"n\\".join(results)"},{"question":"You are given a directed graph represented as an adjacency list, where each node represents a course and each directed edge between nodes represents a prerequisite relationship (i.e., to take course B, you must first take course A). There are a total of `numCourses` courses you have to take, labeled from 0 to numCourses-1. Write a function to find the order in which you can finish all the courses. If there is no way to finish all the courses, return an empty list. Example 1: Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]] Output: [0,1,2,3] or [0,2,1,3] Explanation: There are a total of 4 courses to take. To take course 3, you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct order is [0,1,2,3]. Another correct order is [0,2,1,3]. Example 2: Input: numCourses = 2, prerequisites = [[1,0],[0,1]] Output: [] Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should have finished course 1. No way to finish all courses. Your Task: You don\'t need to read or print anything. Your task is to complete the function findOrder() which takes numCourses and prerequisites as input parameters and returns the order in which you can finish all the courses. If not possible, return an empty list. Expected Time Complexity: O(V + E) where V is the number of courses and E is the number of prerequisites. Expected Space Complexity: O(V + E) Constraints: 1 <= numCourses <= 2000 0 <= prerequisites.length <= numCourses * (numCourses - 1) prerequisites[i].length == 2 0 <= prerequisites[i][0], prerequisites[i][1] < numCourses","solution":"from collections import deque, defaultdict def findOrder(numCourses, prerequisites): Returns the order in which to complete courses given the prerequisites. If there is no way to complete all courses, returns an empty list. # Create a graph (adjacency list) and in-degree count graph = defaultdict(list) in_degrees = [0] * numCourses # Build the graph and populate in-degrees for dest, src in prerequisites: graph[src].append(dest) in_degrees[dest] += 1 # Find all the nodes with in-degree of 0 queue = deque([i for i in range(numCourses) if in_degrees[i] == 0]) order = [] while queue: course = queue.popleft() order.append(course) for neighbor in graph[course]: in_degrees[neighbor] -= 1 if in_degrees[neighbor] == 0: queue.append(neighbor) # If we have been able to add exactly numCourses courses to order, we are fine if len(order) == numCourses: return order else: return []"},{"question":"ChefLand has another restaurant that specializes in exotic desserts. They have recently received a shipment of a new type of ingredient, which is a peculiar type of nut with interesting properties. Each nut has a specific sweetness value associated with it. The chef wants to create a certain number of dessert recipes, where each recipe consists of exactly 3 nuts. However, there are rules regarding the selection of these nuts to ensure unique and delicious recipes. The rules are as follows: - All three nuts in a recipe must have different sweetness values. - The recipe is considered unique if the set of sweetness values is different from all other recipes. The chef needs your help to determine the total number of unique dessert recipes that can be created from the given nuts. ------ Input ------ The first line of input contains a single integer n, the number of nuts. The second line of input contains n integers, each representing the sweetness value of a nut. ------ Output ------ Output the total number of unique dessert recipes that can be created. ------ Constraints ------ 1 ≤ n ≤ 1000; 1 ≤ sweetness value ≤ 10000; ------ Example ------ Input: 5 4 8 2 6 3 Output: 10 Explanation: The possible unique recipes are (4, 8, 2), (4, 8, 6), (4, 8, 3), (4, 2, 6), (4, 2, 3), (4, 6, 3), (8, 2, 6), (8, 2, 3), (8, 6, 3), (2, 6, 3).","solution":"from itertools import combinations def unique_dessert_recipes(n, sweetness_values): Returns the total number of unique dessert recipes that can be created with the given sweetness values. Parameters: n (int): Number of nuts. sweetness_values (list): A list containing the sweetness values of the nuts. Returns: int: Total number of unique dessert recipes. unique_recipes = set() for combo in combinations(sweetness_values, 3): if len(set(combo)) == 3: unique_recipes.add(tuple(sorted(combo))) return len(unique_recipes)"},{"question":"Alice and Bob are playing a game on an infinite grid. Initially, Alice places a token at the origin (0,0). Alice will make a series of moves on the grid according to a string of commands, where each character in the string could be \'U\' (move up), \'D\' (move down), \'L\' (move left), or \'R\' (move right). Bob wants to know the final Manhattan distance between the initial position and the final position of the token after all the moves are completed. The Manhattan distance between two points (x1, y1) and (x2, y2) is calculated as |x1 - x2| + |y1 - y2|. Write a program to calculate and print the Manhattan distance for a given set of moves. ----Input---- - The first line of the input contains a single integer T denoting the number of test cases. - The first line of each test case contains a single string S consisting of the commands \'U\', \'D\', \'L\' and \'R\'. ----Output---- For each test case, print a single line containing one integer — the Manhattan distance between the initial and the final position of the token. ----Constraints---- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 10^5 ----Sample Input---- 2 UDLR UUUUDDDD ----Sample Output---- 0 0 ----Explanation---- Example case 1: The moves cause the token to return to the initial position (0,0) after each U-D and L-R pair. Example case 2: The moves cause the token to move up 4 steps and then down 4 steps, returning again to the initial position.","solution":"def calculate_manhattan_distance(T, test_cases): results = [] for S in test_cases: x, y = 0, 0 for move in S: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 manhattan_distance = abs(x) + abs(y) results.append(manhattan_distance) return results"},{"question":"You are given a list of integers representing the scores of students in a test. Each student has a unique ID corresponding to their position in the list. You are also given a series of queries, each asking for the k-th highest score among a sublist of students. Write a program to find the answers to all the queries. -----Input----- The first line contains two integers n and q (1 leq n, q leq 10^5) — the number of students and the number of queries. The second line contains n integers s_1, s_2, dots, s_n (0 leq s_i leq 10^9) — the scores of the students. The following q lines each contain three integers l, r, and k (1 leq l leq r leq n, 1 leq k leq (r - l + 1)) — representing a query to find the k-th highest score in the sublist from s_l to s_r. -----Output----- For each query, print one integer: the k-th highest score in the sublist specified by the query. -----Examples----- Input 5 3 90 85 77 92 88 1 3 2 2 5 1 1 5 4 Output 85 92 85 Input 5 2 100 50 75 90 65 1 5 3 3 5 1 Output 75 90 -----Note----- In the first example: - For the first query, the sublist is [90, 85, 77] and the 2nd highest score is 85. - For the second query, the sublist is [85, 77, 92, 88] and the highest score is 92. - For the third query, the sublist is [90, 85, 77, 92, 88] and the 4th highest score is 85.","solution":"def k_th_highest_score(n, q, scores, queries): results = [] for l, r, k in queries: sublist = sorted(scores[l-1:r], reverse=True) results.append(sublist[k-1]) return results"},{"question":"In a town called Techville, there is a unique system of water distribution. The town\'s reservoirs supply water to the inhabitants through a series of connected pipes. Each pipe has a maximum capacity indicating the highest amount of water it can transport. To ensure efficient water management, the town\'s authorities want to determine the maximum possible water flow from the main reservoir to a specific household. The town can be represented as a directed graph, where nodes represent reservoirs or households, and edges represent pipes with their respective capacities. Given that the main reservoir is located at node 1 and the target household is located at node n, your task is to calculate the maximum flow of water from node 1 to node n. -----Input----- - The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000), denoting the number of nodes and the number of edges, respectively. - The next m lines each contain three integers u, v, c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 10^6), where u denotes the starting node of the pipe, v denotes the ending node of the pipe, and c denotes the capacity of the pipe. It is guaranteed that each edge (u, v) is unique, and that the graph is connected. -----Output----- Output a single integer indicating the maximum water flow from the main reservoir (node 1) to the target household (node n). -----Examples----- Input 4 5 1 2 100 2 3 50 1 3 50 3 4 100 2 4 100 Output 150 Input 3 3 1 2 20 1 3 10 2 3 5 Output 15 -----Note----- For the first sample, the maximum flow from node 1 to node 4 can be achieved through the paths 1-2-4 and 1-3-4 with capacities of 100 and 50, respectively, giving a total flow of 150. For the second sample, the maximum flow from node 1 to node 3 can be achieved through the paths 1-3 with capacity 10 and 1-2-3 with capacity 5, giving a total of 15. The problem can be solved by implementing the Ford-Fulkerson algorithm or the Edmonds-Karp algorithm for finding the maximum flow in a flow network.","solution":"from collections import deque, defaultdict def bfs(capacity, source, sink, parent): visited = set() queue = deque() queue.append(source) visited.add(source) while queue: node = queue.popleft() for adj in capacity[node]: if adj not in visited and capacity[node][adj] > 0: queue.append(adj) visited.add(adj) parent[adj] = node if adj == sink: return True return False def edmonds_karp(n, graph, source, sink): # Create a residual capacity graph capacity = defaultdict(lambda: defaultdict(int)) for u, v, c in graph: capacity[u][v] += c # in case of multiple edges parent = {} max_flow = 0 # Augment the flow while there is a path from source to sink while bfs(capacity, source, sink, parent): # Find the maximum flow through the path found by BFS path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[parent[s]][s]) s = parent[s] # update residual capacities of the edges and reverse edges along the path v = sink while v != source: u = parent[v] capacity[u][v] -= path_flow capacity[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow def max_water_flow(n, m, edges): return edmonds_karp(n, edges, 1, n)"},{"question":"You are tasked with implementing a string manipulation system that supports a specific set of operations on strings. The system should be able to handle the following commands: * add s — Append the string `s` to the current string. * remove n — Remove the first `n` characters from the current string. * reverse — Reverse the current string in-place. * query i j — Return the substring of the current string starting from index `i` to index `j`. The initial string is empty. The operation `add s` takes a string `s` and appends it to the current string. The operation `remove n` removes the first `n` characters from the current string. If `n` is larger than the length of the current string, the entire string is removed. The operation `reverse` reverses the current string in-place. The operation `query i j` returns the substring from index `i` to index `j` (both inclusive). If `i` or `j` exceed the boundaries of the current string, adjust them to be within the valid range. You need to process a sequence of these operations and output the results for `query` operations. Input The first line of the input contains an integer `q` (1 ≤ q ≤ 100), representing the number of operations. The next `q` lines each describe an operation. Output For each `query` operation, output the resulting substring on a new line. Examples Input 6 add hello query 0 4 add world query 0 9 remove 5 query 0 4 Output hello helloworld world Explanation The initial string is empty. After `add hello`: The string becomes \\"hello\\". After `query 0 4`: The output is \\"hello\\". After `add world`: The string becomes \\"helloworld\\". After `query 0 9`: The output is \\"helloworld\\". After `remove 5`: The string becomes \\"world\\". After `query 0 4`: The output is \\"world\\".","solution":"class StringManipulationSystem: def __init__(self): self.current_string = \\"\\" def add(self, s): self.current_string += s def remove(self, n): self.current_string = self.current_string[n:] if n < len(self.current_string) else \\"\\" def reverse(self): self.current_string = self.current_string[::-1] def query(self, i, j): i = max(0, min(i, len(self.current_string)-1)) j = max(0, min(j, len(self.current_string)-1)) return self.current_string[i:j+1] def process_operations(operations): sms = StringManipulationSystem() results = [] for operation in operations: command = operation.split() if command[0] == \'add\': sms.add(command[1]) elif command[0] == \'remove\': sms.remove(int(command[1])) elif command[0] == \'reverse\': sms.reverse() elif command[0] == \'query\': results.append(sms.query(int(command[1]), int(command[2]))) return results"},{"question":"In a city, there are multiple intersections and roads connecting these intersections. Each road has a certain amount of traffic going through it. You are given the task to analyze the traffic on these roads to identify the bottlenecks, which are the roads that bear the maximum traffic in the entire network. Write a function to find the maximum traffic load on any single road in the given network of intersections and roads. You will be provided with the number of intersections, the number of roads, and the list of roads with their respective traffic loads. -----Input----- The first line contains two integers n and m (2 leq n leq 1000, 1 leq m leq 5000) — the number of intersections and the number of roads. Each of the next m lines contains three integers a_i, b_i, and t_i (1 leq a_i, b_i leq n and 1 leq t_i leq 10^6), representing a road from intersection a_i to intersection b_i with a traffic load of t_i. It is guaranteed that the given edges form a connected graph. -----Output----- Print a single integer — the maximum traffic load on any single road in the network. -----Examples----- Input 4 4 1 2 30 2 3 40 3 4 20 4 1 50 Output 50 Input 3 2 1 2 10 2 3 15 Output 15 Input 5 7 1 2 5 2 3 10 3 4 15 4 5 20 1 3 25 2 4 30 3 5 35 Output 35","solution":"def max_traffic_load(n, m, roads): Find the maximum traffic load on any single road in the network. Parameters: n (int): Number of intersections m (int): Number of roads roads (list of tuples): List containing (a_i, b_i, t_i) where a_i is the start intersection, b_i is the end intersection, t_i is the traffic load of the road Returns: int: The maximum traffic load on any single road max_load = 0 for road in roads: _, _, load = road if load > max_load: max_load = load return max_load"},{"question":"Write a function to find a cycle in a directed graph. You are given a directed graph represented as an adjacency list in the form of a dictionary. Write a function that will determine if the graph contains any cycles, and if so, return one of the cycles found. If the graph has no cycles, the function should return an empty list. **Function Signature:** ```python def find_cycle(graph: Dict[int, List[int]]) -> List[int]: pass ``` **Input:** - `graph` (Dict[int, List[int]]): A dictionary representing the adjacency list of a directed graph, where keys are node identifiers and the values are lists of nodes that the key node has directed edges to. The nodes are represented by integers. **Output:** - A list of integers representing one of the cycles found in the graph. If there are no cycles, return an empty list. **Example:** Given the following graph: ```python graph = { 1: [2], 2: [3], 3: [4, 5], 4: [1], 5: [] } ``` **Output:** ```python [1, 2, 3, 4, 1] # This indicates there is a cycle 1 -> 2 -> 3 -> 4 -> 1 ``` **Example without a cycle:** Given the following graph: ```python graph = { 1: [2], 2: [3], 3: [4], 4: [5], 5: [] } ``` **Output:** ```python [] # This indicates there is no cycle ``` **Constraints:** - The number of nodes in the graph is at most 100.","solution":"def find_cycle(graph): Detects a cycle in a directed graph and returns one of the cycles found. If no cycle is found, returns an empty list. def dfs(node, stack, visited, rec_stack): visited[node] = True rec_stack[node] = True stack.append(node) if node in graph: for neighbour in graph[node]: if not visited[neighbour]: if dfs(neighbour, stack, visited, rec_stack): return True elif rec_stack[neighbour]: stack.append(neighbour) return True stack.pop() rec_stack[node] = False return False visited = {node: False for node in graph} rec_stack = {node: False for node in graph} stack = [] for node in graph: if not visited[node]: if dfs(node, stack, visited, rec_stack): # Extract the cycle from the stack cycle_start = stack[-1] cycle = [] while stack: current = stack.pop() cycle.append(current) if current == cycle_start and len(cycle) > 1: cycle.reverse() return cycle return []"},{"question":"Alice and Bob have found a new way to communicate through cells in a grid. The grid has `n` rows and `m` columns, initially filled with zeros. Alice can update any cell to 1, and Bob can update any cell to 2, but both of them have certain movement patterns. Alice can move to a cell if it shares a side with the current cell she is on, starting from any cell containing 1. Similarly, Bob can move to a cell if it shares a side with the current cell he is on, starting from any cell containing 2. Both of them begin from an empty grid, and they take turns in their updation, starting with Alice. Each turn, they can place as many cells as possible according to their movement pattern. The goal is to cover the whole grid with 1s and 2s such that no empty cells remain. Determine the minimum number of turns Alice and Bob need to cover the grid. -----Input----- The first line contains two integers n and m (1 le n, m le 1000): the number of rows and columns in the grid. -----Output----- Print a single integer - the minimum number of turns needed to cover the entire grid. -----Example----- Input 3 3 Output 2 -----Note----- For a 3 times 3 grid, Alice can place all the 1s in the first turn, and then Bob can place all the 2s in the second turn, covering the entire grid within 2 turns. For a grid of any size n times m, since Alice and Bob can adapt their placements accordingly to fill the grid incrementally using their movement patterns, it can be done in similar alternating steps.","solution":"def min_turns_to_cover_grid(n, m): Returns the minimum number of turns needed to cover the entire grid. :param n: Number of rows in the grid :param m: Number of columns in the grid :return: Minimum number of turns needed return (n * m + 1) // 2"},{"question":"Two space explorers are communicating back and forth using a special binary language. They send messages as binary strings consisting of only \'0\'s and \'1\'s. As they communicate rapidly, they often want to know if you can find the longest segment in their message\'s binary string that contains an equal number of \'0\'s and \'1\'s. You are given a binary string S of length N. Your task is to find the length of the longest contiguous segment of S where the number of \'0\'s is equal to the number of \'1\'s. If no such segment exists, return 0. -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of the T test cases follows. - The first line of each test case contains a single integer N. - The second line contains a binary string S of length N. -----Output----- For each test case, print a single integer representing the length of the longest contiguous segment where the number of \'0\'s is equal to the number of \'1\'s. If no such segment exists, print 0. -----Constraints----- - 1 le T le 100 - 1 le N le 10^4 -----Example Input----- 3 4 1100 5 11001 3 111 -----Example Output----- 4 4 0 -----Explanation----- For the first test case, the entire string \\"1100\\" is valid since it has 2 \'0\'s and 2 \'1\'s. For the second test case, the longest contiguous segment with equal \'0\'s and \'1\'s is either \\"1100\\" or \\"1001\\", both of length 4. For the third test case, there is no segment where the number of \'0\'s is equal to the number of \'1\'s, therefore the output is 0.","solution":"def longest_equal_binary_segment(T, test_cases): Returns the length of the longest contiguous segment of a string where the number of \'0\'s is equal to the number of \'1\'s. results = [] for N, S in test_cases: max_len = 0 pre_sum = {0: -1} count = 0 for i, char in enumerate(S): count += 1 if char == \'1\' else -1 if count in pre_sum: max_len = max(max_len, i - pre_sum[count]) else: pre_sum[count] = i results.append(max_len) return results"},{"question":"Palindrome Partitioning A palindrome is a string that reads the same forwards and backwards. Write a function, `minPalindromePartitions`, that takes a string `s` and returns the minimum number of cuts required to partition the string such that each segment is a palindrome. For example, given the input string: ``` \\"noonabbad\\" ``` The minimum cuts required to partition the string into palindromes are `2`, resulting in: `[\\"noon\\", \\"a\\", \\"b\\", \\"bad\\"]` or `[\\"noon\\", \\"abba\\", \\"d\\"]`. Function signature: ```python def minPalindromePartitions(s: str) -> int: # Your code here ``` # Input - The input will be a single string `s` with `1 <= len(s) <= 1000`. The string will contain only lowercase English letters. # Output - The function should return an integer representing the minimum number of cuts required. # Example ```python print(minPalindromePartitions(\\"aab\\")) # Output: 1 ``` The function should cut `\\"aab\\"` into `[\\"aa\\", \\"b\\"]` which requires 1 cut. Make sure your solution is efficient and takes into account the possibility of strings up to 1000 characters long.","solution":"def minPalindromePartitions(s: str) -> int: # Check if a string is palindrome def is_palindrome(s, l, r): while l < r: if s[l] != s[r]: return False l += 1 r -= 1 return True # Length of string n = len(s) # A dp array that stores the minimum cuts needed for substring s[0:i+1] dp = [0] * n for i in range(n): # Check if the whole substring s[0:i+1] is a palindrome if is_palindrome(s, 0, i): dp[i] = 0 else: # Start with the maximum possible cuts which is i (worst case) dp[i] = i for j in range(i): if is_palindrome(s, j + 1, i): dp[i] = min(dp[i], dp[j] + 1) return dp[n-1]"},{"question":"Chef Miles loves baking cookies and recently came up with a new recipe. For this recipe, he needs exactly `Z` grams of sugar. Chef Miles has `X` containers, each containing `A_i` grams of sugar (1 ≤ `i` ≤ `X`). He can use some or all of these containers, but he cannot split the sugar in any container. Chef Miles wants to know if he can select some of these containers such that their total weight of sugar is exactly `Z` grams. Write a program to help Chef Miles determine if it\'s possible to get exactly `Z` grams of sugar using the given containers. -----Input----- The first line contains two integer numbers `X` and `Z` (1 ≤ `X` ≤ 100, 1 ≤ `Z` ≤ 10^4) — the number of containers and the exact needed grams of sugar respectively. The second line contains `X` integer numbers `A_1`, `A_2`, ..., `A_X` (1 ≤ `A_i` ≤ 10^4) — the amount of sugar in each container. -----Output----- Print \\"YES\\" if it\'s possible to get exactly `Z` grams of sugar using some or all of the containers, otherwise print \\"NO\\" (without quotes). -----Examples----- Input 4 5 1 2 3 4 Output YES Input 3 10 7 5 8 Output NO -----Note----- In the first example, Chef Miles can combine the sugar from container 1 and container 3 (1 + 4 = 5), or from container 2 and container 3 (2 + 3 = 5). In the second example, there is no combination of containers that sum up to exactly 10 grams.","solution":"def can_get_exact_sugar(X, Z, A): Determine if it\'s possible to get exactly Z grams of sugar using some or all of the containers. X: int - Number of containers. Z: int - Exact needed grams of sugar. A: list of int - Amount of sugar in each container. returns: str - \\"YES\\" if possible, otherwise \\"NO\\". # Use dynamic programming to solve the subset sum problem dp = [False] * (Z+1) dp[0] = True for sugar in A: for i in range(Z, sugar-1, -1): if dp[i - sugar]: dp[i] = True return \\"YES\\" if dp[Z] else \\"NO\\" # Example usage X, Z = 4, 5 A = [1, 2, 3, 4] print(can_get_exact_sugar(X, Z, A)) # Output: \\"YES\\""},{"question":"Write a program that helps calculate the sum of digits for a series of numbers. For each input number, you have to output the sum of its digits. Input: - First line of the input contains the number of test cases (T). - Each of the next T lines contains an integer number. Output: - For each test case, output the sum of the digits of the given number. Constraints: 1 ≤ T ≤ 50 1 ≤ number ≤ 10^18 SAMPLE INPUT 3 123 4567 89 SAMPLE OUTPUT 6 22 17","solution":"def sum_of_digits(n): Returns the sum of the digits of the given number n. return sum(int(digit) for digit in str(n)) def process_input(input_list): Processes a list of integers and returns their respective sum of digits. The first element of the list is the number of test cases T. T = input_list[0] # the number of test cases results = [] for i in range(1, T + 1): number = input_list[i] results.append(sum_of_digits(number)) return results"},{"question":"A company uses a list of all its products along with their stock levels in a warehouse. Each product is identified by a unique name, and the stock level is the quantity in stock. The warehouse implements a first-in, first-out method for managing stock. The task is to create a function that helps to restock the warehouse. The function should allow adding a new supply of an existing product or adding a completely new product to the list. When resupplying an existing product, the new stock should be appended to the end of the list for that product. Your function should also be able to generate a report with a summary of all products and their remaining stock quantities sorted alphabetically by product name. Input:- First line contains the number of operations to be performed. Each of the next lines contains an operation in one of the following formats: 1. \\"ADD <product_name> <quantity>\\": Adds <quantity> amount to <product_name>. If the product does not exist, it creates a new entry. 2. \\"REPORT\\": Generates a report of all products and their respective stock levels. Output:- Print the stock report as a list of \\"product_name: total_stock\\" sorted alphabetically by product name each time a \\"REPORT\\" operation is encountered. SAMPLE INPUT 5 ADD apple 10 ADD banana 5 ADD apple 5 REPORT ADD orange 7 REPORT SAMPLE OUTPUT apple: 15 banana: 5 apple: 15 banana: 5 orange: 7","solution":"def warehouse_management(operations): Manage warehouse stock and generate stock reports. Args: operations (list): A list of operations in the form of strings. Returns: list: A list of stock reports generated during the operations. warehouse = {} reports = [] for operation in operations: parts = operation.split() action = parts[0] if action == \\"ADD\\": product_name = parts[1] quantity = int(parts[2]) if product_name in warehouse: warehouse[product_name] += quantity else: warehouse[product_name] = quantity elif action == \\"REPORT\\": report = [] for product, qty in sorted(warehouse.items()): report.append(f\\"{product}: {qty}\\") reports.append(report) return reports # Example usage: # operations = [ # \\"ADD apple 10\\", # \\"ADD banana 5\\", # \\"ADD apple 5\\", # \\"REPORT\\", # \\"ADD orange 7\\", # \\"REPORT\\" # ] # print(warehouse_management(operations)) # Output: # [[\'apple: 15\', \'banana: 5\'], [\'apple: 15\', \'banana: 5\', \'orange: 7\']]"},{"question":"Given a non-negative integer N, find the largest integer X such that X^2 ≤ N. Example 1: Input: N = 17 Output: 4 Explanation: The square of 4 is 16 which is less than 17. The square of 5 is 25 which is greater than 17. Hence, 4 is the largest integer whose square is less than or equal to 17. Example 2: Input: N = 26 Output: 5 Explanation: The square of 5 is 25 which is less than 26. The square of 6 is 36 which is greater than 26. Hence, 5 is the largest integer whose square is less than or equal to 26. Your Task: You don\'t need to read input or print anything. Your task is to complete the function largestSquareRoot() which takes an integer N as input parameter and returns the largest integer X such that X^2 ≤ N. Expected Time Complexity: O(log N) Expected Auxiliary Space: O(1) Constraints: 0 <= N <= 10^{9}","solution":"def largestSquareRoot(N): Returns the largest integer X such that X^2 ≤ N. if N == 0: return 0 low, high = 1, N while low <= high: mid = (low + high) // 2 if mid * mid == N: return mid elif mid * mid < N: low = mid + 1 else: high = mid - 1 return high"},{"question":"The city of Byteville has an elaborate system of roads connecting various intersections. Each intersection is represented as a node, and each road between intersections is represented as an edge with an associated travel time. The city\'s administration wants to optimize emergency response times by ensuring that the total travel time between any two intersections in the city is minimal. Your task is to determine the shortest travel times between all pairs of intersections. ------ Input Format ------ - The first line contains two integers, (N) and (M), where (N) is the number of intersections (nodes), and (M) is the number of roads (edges). - The next (M) lines each contain three integers (U), (V), and (T), where (U) and (V) are the intersections connected by a road, and (T) is the travel time between these intersections. ------ Output Format ------ - For each pair of intersections, output the shortest travel time. If there is no path between a pair of intersections, the travel time should be represented as -1. ------ Constraints ------ 2 ≤ N ≤ 300 1 ≤ M ≤ 10,000 1 ≤ T ≤ 1,000 1 ≤ U, V ≤ N ----- Sample Input ------ 4 4 1 2 5 2 3 10 1 3 15 3 4 20 ----- Sample Output ------ 0 5 15 35 5 0 10 30 15 10 0 20 35 30 20 0 ----- Explanation ------ The output matrix represents the minimum travel time between each pair of intersections. The diagonal elements are zero because the travel time from an intersection to itself is zero. The other elements represent the minimum travel times between distinct pairs of intersections. To solve this problem, you could use the Floyd-Warshall algorithm, which efficiently computes the shortest paths between all pairs of nodes in a graph.","solution":"def floyd_warshall(N, M, roads): Returns the shortest travel time between every pair of intersections. Parameters: N (int): Number of intersections (nodes) M (int): Number of roads (edges) roads (list of tuples): Each tuple contains three integers U, V, T representing a road from U to V with travel time T Returns: list of list: A 2D list where the element at row i and column j represents the shortest travel time between intersection i+1 and intersection j+1 # Initialize the distance matrix inf = float(\'inf\') dist = [[inf] * N for _ in range(N)] # The distance from a node to itself is zero for i in range(N): dist[i][i] = 0 # Set the provided distances for u, v, t in roads: dist[u-1][v-1] = t dist[v-1][u-1] = t # Assuming undirected roads # Floyd-Warshall Algorithm for k in range(N): for i in range(N): for j in range(N): if dist[i][k] < inf and dist[k][j] < inf: dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) # Replace `inf` with -1 for the output format for i in range(N): for j in range(N): if dist[i][j] == inf: dist[i][j] = -1 return dist"},{"question":"Sasha has a collection of n different coins. Each coin has a specific value, defined in an array a. Sasha wants to divide the coins into two groups such that the difference between the sum of the values of the coins in the first group and the sum of the values of the coins in the second group is minimized. Help Sasha to find this minimal possible difference. -----Input----- The first line of the input contains an integer n, (1 ≤ n ≤ 100). The second line contains n integers denoting the values of the coins, a_{i}, (1 ≤ a_{i} ≤ 100). -----Output----- On the only line of the output print the minimal possible difference of the sums of the two groups. -----Examples----- Input 5 1 2 3 4 5 Output 1 Input 4 8 7 6 5 Output 0","solution":"def find_minimum_difference(n, coins): total_sum = sum(coins) dp = [[0 for _ in range(total_sum // 2 + 1)] for _ in range(n + 1)] for i in range(n + 1): for j in range(total_sum // 2 + 1): if i == 0 or j == 0: dp[i][j] = 0 elif coins[i-1] <= j: dp[i][j] = max(dp[i-1][j], dp[i-1][j-coins[i-1]] + coins[i-1]) else: dp[i][j] = dp[i-1][j] sum1 = dp[n][total_sum // 2] sum2 = total_sum - sum1 return abs(sum2 - sum1) # Example usage: # n = 5 # coins = [1, 2, 3, 4, 5] # print(find_minimum_difference(n, coins)) # Output: 1"},{"question":"In a hypothetical game world, there are N warriors participating in a tournament. Each warrior has a certain strength level. The warriors are initially given unique identification numbers from 1 to N. During the tournament, warriors can either lose or gain strength based on their performance in battles. The tournament organizer wants to keep track of the current strength of each warrior dynamically as battles occur and often queries about the current highest strength among all warriors. You are asked to help with this. Write a program that supports the following operations: 1. Update the strength of a warrior. 2. Query the current highest strength among all warriors. The input format is as follows: ------ Input ------ The first line of the input consists of a single integer T, the number of operations to follow. The next T lines contain one operation each on a single line. An operation can be of 3 types: - \\"1 W S\\": Update the strength of warrior W to S (W is the ID of the warrior, S is the new strength, both are integers). - \\"2\\": Report the current highest strength among all warriors. - \\"3\\": Add a new warrior with a given strength (S is the strength of the new warrior). ------ Output ------ For each operation of type 2, output a single integer representing the highest strength among all warriors. If no warrior is present yet, print \\"No warriors\\". ------ Constraints ------ 1 ≤ T ≤ 250000 1 ≤ W ≤ N (where N refers to the ID of the last warrior at any point in time) 1 ≤ S ≤ 1000000000 ------ Sample Input 1 ------ 6 1 3 50 1 1 60 2 3 40 2 1 2 70 ------ Sample Output 1 ------ 60 60 ------ Explanation 1 ------ - After the first two operations, the warriors\' strengths are: {1: 60, 3: 50} - The first query (operation of type 2) asks for the highest strength, which is 60. - A new warrior (warrior 4) with strength 40 is added. - The second query asks again for the highest strength, which is still 60. - Finally, warrior 2\'s strength updates to 70, making him the strongest warrior currently.","solution":"class Tournament: def __init__(self): self.warriors = {} def update_strength(self, w, s): self.warriors[w] = s def get_highest_strength(self): if not self.warriors: return \\"No warriors\\" return max(self.warriors.values()) def add_warrior(self, s): new_warrior_id = len(self.warriors) + 1 self.warriors[new_warrior_id] = s def tournament_operations(operations): tournament = Tournament() result = [] for operation in operations: op = operation.split() if op[0] == \\"1\\": w, s = int(op[1]), int(op[2]) tournament.update_strength(w, s) elif op[0] == \\"2\\": result.append(tournament.get_highest_strength()) elif op[0] == \\"3\\": s = int(op[1]) tournament.add_warrior(s) return result"},{"question":"You are given a sequence of n integers and a series of m operations. Each operation changes the value of an element in the sequence or asks for the sum of a subsegment of the sequence. Your task is to handle all the operations efficiently. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of elements in the sequence and the number of operations. - The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) — the elements of the sequence. - The next m lines contain operations. Each operation is given in one of the following formats: 1. **\\"1 x y\\"**: Set the value of the x-th element to y (1 ≤ x ≤ n, |y| ≤ 10^9). 2. **\\"2 l r\\"**: Calculate and output the sum of the elements from l-th to r-th (1 ≤ l ≤ r ≤ n). # Output For each operation of type 2, output the sum of the elements in the specified range. # Example Input ``` 5 5 1 2 3 4 5 2 1 5 2 2 4 1 3 6 2 2 4 2 1 5 ``` Output ``` 15 9 12 18 ``` # Note In the example, the sequence initially is [1, 2, 3, 4, 5]. The operations are processed as follows: 1. Sum of elements from 1 to 5: 1+2+3+4+5 = 15 2. Sum of elements from 2 to 4: 2+3+4 = 9 3. Set the value of the 3rd element to 6. The sequence now is [1, 2, 6, 4, 5] 4. Sum of elements from 2 to 4: 2+6+4 = 12 5. Sum of elements from 1 to 5: 1+2+6+4+5 = 18 # Constraints Consider using efficient data structures such as Fenwick Trees (Binary Indexed Trees) or Segment Trees to handle the operations within the problem\'s time constraints.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): total = 0 while index > 0: total += self.tree[index] index -= index & -index return total def range_sum(self, left, right): return self.query(right) - self.query(left - 1) def handle_operations(n, m, sequence, operations): fenwick_tree = FenwickTree(n) results = [] # Initialize Fenwick Tree with the initial sequence for i, value in enumerate(sequence): fenwick_tree.update(i + 1, value) for operation in operations: if operation[0] == \'1\': x, y = int(operation[1]), int(operation[2]) current_value = fenwick_tree.range_sum(x, x) fenwick_tree.update(x, y - current_value) elif operation[0] == \'2\': l, r = int(operation[1]), int(operation[2]) results.append(fenwick_tree.range_sum(l, r)) return results"},{"question":"In a faraway land, there is a kingdom with N cities. Each city is connected to every other city by a bidirectional road. The king wants to ensure the safety of travelers, and thus he plans to install security cameras at some cities. A security camera installed in a city can monitor all the cities directly connected to it, including itself. You are tasked with determining if it\'s possible to choose a subset of cities where the cameras are placed such that every city in the kingdom is monitored by at least one camera. If it is possible, output the minimum number of cameras required, otherwise print -1. -----Input----- The first line contains an integer T, the number of test cases. The description of the T test cases follows. Each test case starts with an integer N denoting the number of cities. -----Output----- For each test case, output a single line containing either the minimum number of cameras required or -1 if it\'s not possible. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 -----Example----- Input: 3 1 2 3 Output: 1 1 1 -----Explanation----- Test case 1. There is only one city, so placing a camera in it will monitor everything. Test case 2. With two cities, placing a camera in any of the cities will monitor both cities. Test case 3. With three cities, placing a camera in any of the cities will monitor all three cities. In all three test cases, the minimum number of cameras needed is 1.","solution":"def min_cameras_required(T, test_cases): results = [] for N in test_cases: # With the given conditions, every city is connected to every other city. # Therefore, placing a camera in just one city suffices. results.append(1) return results"},{"question":"You are given a special kind of Sudoku problem on an N×N grid, where N is a perfect square. Each entry in the grid is either a number from 1 to N or an empty cell represented by 0. The objective is to complete the grid such that: 1. Each row contains all numbers from 1 to N exactly once. 2. Each column contains all numbers from 1 to N exactly once. 3. Each √N×√N subgrid contains all numbers from 1 to N exactly once. We refer to these as \\"Sudoku rules.\\" Write a function that takes as input an incomplete Sudoku grid and outputs a possible complete grid that satisfies all Sudoku rules. If there is more than one correct solution, you may output any of them. If there is no possible solution, return the incomplete grid. Input: - The first line contains one integer N (N is a perfect square, 1 ≤ N ≤ 16). - The next N lines each contain N integers representing the initial Sudoku grid. Output: - Print N lines each containing N integers representing a valid complete Sudoku grid. Example: Input: ``` 4 1 0 3 4 4 3 2 1 2 1 4 3 3 4 1 0 ``` Output: ``` 1 2 3 4 4 3 2 1 2 1 4 3 3 4 1 2 ``` Note: - In the example above, a possible correct solution is provided. Other solutions may also be correct as long as they satisfy all Sudoku rules.","solution":"def is_valid(board, num, pos): n = len(board) sqrt_n = int(n**0.5) row, col = pos # Check row for j in range(n): if board[row][j] == num and col != j: return False # Check column for i in range(n): if board[i][col] == num and row != i: return False # Check subgrid box_row_start = (row // sqrt_n) * sqrt_n box_col_start = (col // sqrt_n) * sqrt_n for i in range(box_row_start, box_row_start + sqrt_n): for j in range(box_col_start, box_col_start + sqrt_n): if board[i][j] == num and (i, j) != pos: return False return True def find_empty(board): n = len(board) for i in range(n): for j in range(n): if board[i][j] == 0: return (i, j) return None def solve_sudoku(board): empty_pos = find_empty(board) if not empty_pos: return True row, col = empty_pos for num in range(1, len(board) + 1): if is_valid(board, num, (row, col)): board[row][col] = num if solve_sudoku(board): return True board[row][col] = 0 return False def complete_sudoku(grid): solve_sudoku(grid) return grid # Example usage: # N = 4 # grid = [ # [1, 0, 3, 4], # [4, 3, 2, 1], # [2, 1, 4, 3], # [3, 4, 1, 0] # ] # result = complete_sudoku(grid) # for row in result: # print(\\" \\".join(map(str, row)))"},{"question":"--- Given two positive integers `a` and `b`, find the maximum product of two distinct positive integers less than or equal to `a` and `b` respectively, such that their product is divisible by both `a` and `b`. Write a function `max_divisible_product(a, b)` that takes two integers `a` and `b` and returns their maximum divisible product. **Example:** ```python def max_divisible_product(a, b): # Your code here ``` **Example Test Cases:** 1. `max_divisible_product(6, 9)` **Output:** ``` 54 ``` **Explanation:** Possible products: - (5, 7) -> 35 - (6, 8) -> 48 - (5, 8) -> 40 Maximum divisible product is 54 (6 x 9). 2. `max_divisible_product(10, 12)` **Output:** ``` 120 ``` **Explanation:** Possible products: - (9, 10) -> 90 - (10, 11) -> 110 Maximum divisible product is 120 (10 x 12). 3. `max_divisible_product(8, 15)` **Output:** ``` 120 ``` **Explanation:** Possible products: - (7, 15) -> 105 - (8, 14) -> 112 Maximum divisible product is 120 (8 x 15). **Constraints:** - The inputs `a` and `b` will each be an integer in the range `[1, 10^6]`. - Your solution should be efficient to handle large inputs.","solution":"def max_divisible_product(a, b): max_product = 0 for x in range(a, 0, -1): for y in range(b, 0, -1): product = x * y if product % a == 0 and product % b == 0: max_product = max(max_product, product) # Since we\'re iterating from max values, we can break early break return max_product"},{"question":"You are given a list of integers representing the scores of players in a game. Determine the score of the second highest scoring player. If there are multiple players with the same second highest score, only one of their scores should be printed. -----Constraints----- - 2 leq n leq 10^5 - 0 leq a_i leq 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- Print the score of the second highest scoring player. -----Sample Input----- 5 40 75 40 20 100 -----Sample Output----- 75 Explanation: The highest score is 100 and the second highest score is 75. Therefore, the output is 75.","solution":"def second_highest_score(n, scores): Returns the second highest score from the list of scores. Parameters: n (int): The number of scores. scores (list of int): The list of scores. Returns: int: The second highest score. unique_scores = set(scores) # Remove duplicates if len(unique_scores) < 2: return None # Less than 2 unique scores sorted_scores = sorted(unique_scores, reverse=True) # Sort scores in descending order return sorted_scores[1] # Return the second highest score"},{"question":"Given a binary string s, count the number of substrings that start and end with a 1. Example 1: Input: s = \\"00100101\\" Output: 6 Explanation: The substrings starting and ending with 1 are: \\"1\\", \\"1001\\", \\"1001\\", \\"101\\", \\"1\\", \\"1\\". Example 2: Input: s = \\"1111\\" Output: 10 Explanation: The substrings starting and ending with 1 are: \\"1\\", \\"1\\", \\"1\\", \\"1\\", \\"11\\", \\"11\\", \\"11\\", \\"111\\", \\"111\\", \\"1111\\". Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function countSubstr() that takes a string (s) and returns the number of substrings that start and end with a 1. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ |s| ≤ 10^{5} s consists only of \'0\' and \'1\'.","solution":"def countSubstr(s): Counts the number of substrings in the binary string s that start and end with a \'1\'. # Count the number of \'1\'s in the string count_ones = s.count(\'1\') # The number of such substrings can be determined by the combinatorial formula: n * (n + 1) / 2 return count_ones * (count_ones + 1) // 2"},{"question":"Alice and Bob are playing a game with an array of integers. They take turns, starting with Alice, to select an element from the array and remove it. The game continues until the array is empty. The player who cannot make a move loses the game. The twist in the game is that they can only select numbers with an even sum with the previously selected number. Given an array of integers, determine the winner of the game if both play optimally. -----Input----- - The first line contains an integer N — the number of integers in the array. - The second line contains N space-separated integers A_1, A_2, ldots, A_N — the elements of the array. -----Output----- Print \\"Alice\\" if Alice wins the game, or \\"Bob\\" if Bob wins the game. -----Constraints----- - 1 le N le 1000 - 1 le A_i le 1000 Example Input: 4 3 1 4 2 Example Output: Alice","solution":"def determine_winner(N, A): if N % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Alice and Bob are playing a card game with a deck of N unique cards, each with a distinct integer value from 1 to N. Alice and Bob alternate turns, with Alice going first, and on each turn, a player picks either the highest or the lowest value card remaining from the deck. The score of each player is determined by the sum of the values of the cards they picked. Assume both Alice and Bob play optimally to maximize their own scores. Write a program that calculates the final scores of Alice and Bob after all the cards have been picked. Input The input consists of a single integer N, where 1 leq N leq 10^5, representing the number of cards in the deck. Output Output two integers separated by a space: the final scores of Alice and Bob, respectively. Example # Input ``` 4 ``` # Output ``` 6 4 ``` # Explanation Given the deck of cards [1, 2, 3, 4]: - Alice picks 4 (Alice\'s score: 4, Bob\'s score: 0) - Bob picks 1 (Alice\'s score: 4, Bob\'s score: 1) - Alice picks 3 (Alice\'s score: 7, Bob\'s score: 1) - Bob picks 2 (Alice\'s score: 7, Bob\'s score: 3) Thus, the final scores are 7 for Alice and 3 for Bob.","solution":"def card_game_scores(n): Returns the final scores of Alice and Bob after picking cards optimally from a deck of N unique cards numbered from 1 to N. # Alice starts first alice_score = 0 bob_score = 0 # Create a list of card values cards = list(range(1, n+1)) # indices to keep track of the remaining cards left, right = 0, n - 1 turn = 0 # to know whose turn it is, 0 for Alice, 1 for Bob while left <= right: if turn == 0: # Alice\'s turn if cards[right] > cards[left]: alice_score += cards[right] right -= 1 else: alice_score += cards[left] left += 1 turn = 1 else: # Bob\'s turn if cards[right] > cards[left]: bob_score += cards[right] right -= 1 else: bob_score += cards[left] left += 1 turn = 0 return alice_score, bob_score"},{"question":"The Botanica Institute is conducting research on the growth patterns of a rare species of plants. These plants are organized in a grid within a large greenhouse. The grid is rectangular, and each cell contains a single plant. The scientists have a list of the heights (in centimeters) for each plant in the grid. Your task is to write a program that calculates the average height of the plants in particular rectangular sub-grids within the main grid. For this analysis, you will be given multiple rectangular sub-grids, each defined by the coordinates of its top-left and bottom-right corners. A sub-grid is described by two diagonal corners, (r_1, c_1) and (r_2, c_2), where 1 leq r_1 leq r_2 leq R and 1 leq c_1 leq c_2 leq C. For each sub-grid, you are required to calculate the average height of all plants inside that sub-grid, rounded to two decimal points. -----Input:----- - The first line of the input contains two integers R and C indicating the number of rows and columns in the greenhouse. - The next R lines each contain C integers representing the heights (in centimeters) of the plants in the greenhouse grid. The j^{th} integer on line i+1 denotes the height of the plant at row i and column j. - The following line contains a single integer Q indicating the number of rectangular sub-grids for which the average height is to be computed. - Each of the following Q lines contains four integers r_1, c_1, r_2 and c_2 (with 1 leq r_1 leq r_2 leq R and 1 leq c_1 leq c_2 leq C), describing a rectangular sub-grid. -----Output:----- Your output should contain Q lines with one floating-point number on each line. Line i should contain the average height of the plants in the rectangular sub-grid described on line R+2+i in the input, rounded to two decimal points. -----Constraints----- - In 30 % of inputs, 1 leq Q leq 100. - In all inputs, 2 leq R, C leq 1000 and 1 leq Q leq 1000000 - 0 leq height of each plant leq 300 - 1 leq r_1 leq r_2 leq R - 1 leq c_1 leq c_2 leq C -----Sample Input----- 3 4 5 7 9 4 2 3 6 8 1 4 5 7 2 1 1 2 2 2 2 3 4 -----Sample Output----- 4.25 5.50","solution":"def compute_average_heights(R, C, grid, queries): Compute the average height of plants in specified sub-grids. Arguments: R -- Number of rows in the grid C -- Number of columns in the grid grid -- 2D list representing the plant heights queries -- List of tuples representing the sub-grid coordinates Returns: List of average heights for each query, rounded to two decimal points # Prepare sums matrix for fast sub-grid sum computation sums = [[0] * (C + 1) for _ in range(R + 1)] for r in range(1, R + 1): for c in range(1, C + 1): sums[r][c] = grid[r-1][c-1] + sums[r-1][c] + sums[r][c-1] - sums[r-1][c-1] results = [] for r1, c1, r2, c2 in queries: total = (sums[r2][c2] - sums[r1-1][c2] - sums[r2][c1-1] + sums[r1-1][c1-1]) count = (r2 - r1 + 1) * (c2 - c1 + 1) average = total / count results.append(round(average, 2)) return results # Example usage: R = 3 C = 4 grid = [ [5, 7, 9, 4], [2, 3, 6, 8], [1, 4, 5, 7] ] queries = [ (1, 1, 2, 2), (2, 2, 3, 4) ] print(compute_average_heights(R, C, grid, queries)) # Output: [4.25, 5.50]"},{"question":"In a land far away, the wizards of the realm have devised a unique way to encode secret messages. Each message is represented by a string containing only lowercase letters from \'a\' to \'z\'. To decode the message, one must find the longest substring that contains no repeating characters. -----Input----- The input contains a single line with a string s (1 leq |s| leq 10^5), the encoded message. -----Output----- Output a single integer, the length of the longest substring of s that contains no repeating characters. -----Examples----- Sample Input 1: abcabcbb Sample Output 1: 3 Sample Input 2: bbbbb Sample Output 2: 1","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. Parameters: s (str): The input string. Returns: int: The length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 last_seen = {} start = 0 max_length = 0 for i, char in enumerate(s): if char in last_seen and last_seen[char] >= start: start = last_seen[char] + 1 last_seen[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Due to increasing pollution and climate change, rain patterns have become quite unpredictable. You have been assigned to analyze rainfall data over a period of N consecutive days. The aim is to determine the longest sub-period (continuous set of days) of non-decreasing rainfall. Given an array of integers representing the rainfall amount on each day, a sub-period is considered non-decreasing if for every day in that sub-period, the rain amount does not decrease compared to the previous day. Write a function `longestNonDecreasingSubPeriod` which will take an integer t (the number of test cases), followed by t test cases. For each test case, the first line will contain an integer n (the number of days), and the second line will contain an array of n integers denoting the rainfall amount on each day. The function should return t lines, each containing the length of the longest non-decreasing sub-period for the corresponding test case. # Input Format: - The first line of input contains an integer t (1 ≤ t ≤ 100), denoting the number of test cases. - Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of days. - The second line contains n space-separated integers denoting the rainfall amounts, where each integer `a_i` (0 ≤ a_i ≤ 10^4). # Output Format: - For each test case, print a single integer denoting the length of the longest sub-period of non-decreasing rainfall. # Sample Input: 3 5 1 2 2 3 1 4 4 4 4 4 6 5 1 2 3 2 3 # Sample Output: 4 4 3 # Explanation: - For the first test case, the longest non-decreasing sub-period is [1, 2, 2, 3] which is of length 4. - For the second test case, the entire array is non-decreasing, so the longest sub-period is of length 4. - For the third test case, the longest non-decreasing sub-period is [1, 2, 3] which is of length 3.","solution":"def longestNonDecreasingSubPeriod(t, test_cases): Computes the length of the longest non-decreasing sub-period of rainfall for each test case. Parameters: t (int): the number of test cases. test_cases (list): a list containing tuples, where each tuple contains: - n (int): the number of days. - rainfalls (list): a list of integers representing the rainfall amounts on each day. Returns: list: a list of integers where each integer represents the length of the longest non-decreasing sub-period for the corresponding test case. result = [] for n, rainfalls in test_cases: max_length = 1 current_length = 1 for i in range(1, n): if rainfalls[i] >= rainfalls[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) result.append(max_length) return result"},{"question":"Two friends, Alice and Bob, are playing a game where they place a set of unique numbers into an array and determine the median value. The median is the number that is in the middle of the array when it is sorted in non-decreasing order. If the array has an odd number of elements, the median is the middle element. If the array has an even number of elements, the median is the average of the two middle elements. Bob sometimes removes a number and Alice has to find the new median. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), the initial number of elements in the array. The second line contains n integers a_i (-1000 ≤ a_i ≤ 1000), representing the elements of the array. The third line contains an integer m (1 ≤ m ≤ n), the number of elements Bob removes from the array. The fourth line contains m integers r_j (-1000 ≤ r_j ≤ 1000), representing the numbers Bob removes from the array. It is guaranteed that the numbers on the fourth line are present in the initial array. -----Output----- Output the new median after removing the specified elements. If the new array is empty, output \\"Empty\\". -----Examples----- Sample Input: 5 3 1 4 2 5 2 1 4 Sample Output: 3 Sample Input: 3 7 8 9 3 7 8 9 Sample Output: Empty","solution":"def find_median_after_removal(n, numbers, m, removals): Finds the median after removing the specified elements from the array. :param n: Initial number of elements :param numbers: List of integers, the elements of the array :param m: Number of elements to remove :param removals: List of integers, the elements to be removed :return: The median of the remaining elements or \\"Empty\\" if the array is empty # Remove the specified elements from the array for removal in removals: numbers.remove(removal) # Check if the array is empty if not numbers: return \\"Empty\\" # Sort the remaining elements numbers.sort() # Calculate and return the median length = len(numbers) middle = length // 2 if length % 2 == 1: return numbers[middle] else: return (numbers[middle - 1] + numbers[middle]) / 2"},{"question":"You are given a number of logs with varying lengths. The forest department wants to arrange these logs in a particular method to achieve a certain aesthetic in the park. The method to arrange the logs is as follows: every log should be placed such that no two adjacent logs differ in length by more than one unit. You have to determine if it\'s possible to arrange the given logs in this way. -----Input----- The first line contains a single integer n (2 leq n leq 100,000) — the number of logs. The second line contains n integers l_1, l_2, ldots, l_n (1 leq l_i leq 1,000,000) — the lengths of the logs. -----Output----- Print \\"YES\\" if it is possible to arrange the logs according to the given method, otherwise print \\"NO\\". -----Examples----- Input 4 1 3 2 2 Output YES Input 4 1 4 2 2 Output NO -----Note----- In the first example, you can arrange the logs as [1, 2, 2, 3], which satisfies the condition. In the second example, there\'s no possible way to arrange the logs without having two adjacent logs differ by more than one unit. -----Explanation----- To determine the validity of the arrangement, you might need to sort the logs first, and check the differences between consecutive logs.","solution":"def can_arrange_logs(logs): Determine if it\'s possible to arrange logs such that no two adjacent logs differ in length by more than one unit. Parameters: logs (list): List of integers representing lengths of logs. Returns: str: \\"YES\\" if arrangement is possible, otherwise \\"NO\\". logs.sort() for i in range(len(logs) - 1): if logs[i + 1] - logs[i] > 1: return \\"NO\\" return \\"YES\\""},{"question":"A developer is working on a feature for a shopping website where users can place an order containing multiple items. Each item has a price and a quantity. The website applies a discount system such that if the total price of the items in the order exceeds a certain threshold, a discount is applied. The discount system works as follows: - If the total price is greater than or equal to 100 and less than 200, a discount of 10% is applied. - If the total price is greater than or equal to 200 and less than 500, a discount of 20% is applied. - If the total price is greater than or equal to 500, a discount of 30% is applied. Write a program that calculates the final price the user needs to pay after the applicable discount. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of items in the order. Each of the following n lines contains two integers: pi (1 ≤ pi ≤ 1000) — the price of the i-th item, and qi (1 ≤ qi ≤ 100) — the quantity of the i-th item. Output Output a single integer — the final price the user needs to pay after applying the discount. Examples Input 3 50 2 30 1 20 3 Output 144 Input 2 300 1 250 1 Output 385 Note In the first example, the total price before the discount is (50 * 2) + (30 * 1) + (20 * 3) = 190. Since 190 is between 100 and 200, a 10% discount is applied, so the final price is 190 - 19 = 171. In the second example, the total price before the discount is (300 * 1) + (250 * 1) = 550. Since 550 is greater than 500, a 30% discount is applied, so the final price is 550 - 165 = 385.","solution":"def calculate_final_price(n, items): Calculates the final price after applying applicable discounts. Parameters: n (int): The number of items. items (list of tuples): Each tuple contains the price and quantity of an item. Returns: int: The final price after discount. total_price = sum(pi * qi for pi, qi in items) if 100 <= total_price < 200: discount = 0.10 elif 200 <= total_price < 500: discount = 0.20 elif total_price >= 500: discount = 0.30 else: discount = 0.0 final_price = total_price * (1 - discount) return int(final_price)"},{"question":"Given a string s and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, reverse the first k characters and leave the others as original. Example 1: Input: s = \\"abcdefg\\", k = 2 Output: \\"bacdfeg\\" Explanation: The first 2 characters \\"ab\\" are reversed to \\"ba\\". The next 2k characters \\"cd\\" are not reversed. Finally, the last 2 characters \\"fg\\" are reversed to \\"gf\\". Example 2: Input: s = \\"abcdefgh\\", k = 3 Output: \\"cbadefhg\\" Explanation: The first 3 characters \\"abc\\" are reversed to \\"cba\\". The next 3 characters \\"def\\" are reversed to \\"fed\\". And the remaining 2 characters \\"gh\\" are reversed to \\"hg\\". Constraints: 1. 1 <= s.length <= 100000 2. s consists of printable ASCII characters. 3. 1 <= k <= s.length","solution":"def reverseStr(s, k): Reverse the first k characters for every 2k characters counting from the start of the string. s_list = list(s) for i in range(0, len(s_list), 2 * k): s_list[i:i + k] = reversed(s_list[i:i + k]) return \'\'.join(s_list)"},{"question":"In a small village, there is a peculiar game that the villagers love to play during the harvest festival. The game involves a special type of garden, which is essentially a square grid of size NxN. Each cell in the grid either contains a plant (denoted by 1) or is empty (denoted by 0). The objective of the game is to identify the largest rectangular area composed entirely of plants in the garden. Help the villagers determine the size of this largest rectangular area. Input: The first line of input contains a single integer N (1 ≤ N ≤ 100), the size of the garden. The next N lines each contain N integers (either 0 or 1) separated by spaces, representing the garden grid. Output: A single integer representing the size of the largest rectangular area filled with plants in the garden. Constraints: 1 ≤ N ≤ 100 Note: The rectangular area must be of size 1x1 or larger. SAMPLE INPUT 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 1 1 1 0 0 SAMPLE OUTPUT 6","solution":"def largest_rectangle_in_histogram(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def largest_rectangle_area(matrix): if not matrix: return 0 max_area = 0 heights = [0] * len(matrix[0]) for row in matrix: for index in range(len(row)): if row[index] == 0: heights[index] = 0 else: heights[index] += row[index] max_area = max(max_area, largest_rectangle_in_histogram(heights)) return max_area def find_largest_rectangular_area(n, grid): return largest_rectangle_area(grid)"},{"question":"Analyze Maximum Profit You have been hired as a software developer for a stock trading company. Your goal is to write a program that helps traders determine the maximum profit they can achieve. You are given the prices of a stock for `n` consecutive days. On each day, traders can decide to buy, sell, or do nothing. However, they can hold only one stock at a time and must sell before they buy again. Write a program that calculates the maximum profit a trader can earn. Input: - The first line contains a single integer `n` (1 ≤ n ≤ 500), the number of days. - The second line contains `n` space-separated integers, where the `i-th` integer represents the price of the stock on the `i-th` day (1 ≤ price ≤ 104). Output: - A single integer representing the maximum profit a trader can achieve from these trades. Example: ``` Input: 6 7 1 5 3 6 4 Output: 5 ``` Explanation: - The trader can buy on day 2 (price = 1) and sell on day 5 (price = 6), resulting in a profit of 6 - 1 = 5.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from buying and selling stock on given days. if len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are responsible for avoiding floods in a city. The city has several lakes, and each lake has a network of connections to other lakes through a series of rivers. At each moment, only one lake can be drained, and you need to come up with a strategy to minimize the risk of flooding. Each lake has a maximum capacity. If the water in a lake exceeds its capacity, it results in flooding. Given the initial water levels and the capacities of the lakes, you must determine the minimum number of operations required to prevent any lake from exceeding its capacity. Each operation consists of choosing a lake and draining exactly one unit of water from it. You can drain a lake regardless of its current water level but cannot let any lake\'s water level exceed its capacity at any point. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of lakes. The second line contains n integers wi (0 ≤ wi ≤ 100) — the initial water level of each lake. The third line contains n integers ci (1 ≤ ci ≤ 100) — the capacity of each lake. Output Print a single line containing the minimum number of operations required to prevent any lake from flooding. If it\'s impossible to prevent flooding, output -1. Example Input 3 2 1 3 3 2 4 Output 1 Input 2 5 4 3 3 Output -1","solution":"def minimum_drains(n, water_levels, capacities): Determines the minimum number of water-draining operations required to prevent flooding. :param n: Number of lakes :param water_levels: List of initial water levels in each lake :param capacities: List of capacities of each lake :return: Minimum number of operations required to prevent flooding or -1 if impossible drains_required = 0 for water, capacity in zip(water_levels, capacities): if water > capacity: return -1 if water < capacity: drains_required += capacity - water return drains_required # Example usage: # print(minimum_drains(3, [2, 1, 3], [3, 2, 4]))"},{"question":"In a competitive coding environment, developers often encounter scenarios where they need to efficiently manage and manipulate data structures. One such common task is related to managing intervals. Consider the following problem where intervals need to be dynamically merged based on the given operations. # Problem Statement You are given a list of intervals, where each interval is represented as a pair of integers `[start, end]` indicating the start and end points (inclusive). Your task is to perform a series of operations to merge overlapping intervals and return the resulting list of merged intervals. Each operation will add a new interval to the list, and you must merge it with the existing intervals if they overlap. Two intervals `[a, b]` and `[c, d]` are said to overlap if their intersection is non-empty, i.e., if `a <= d` and `c <= b`. # Input - The first line of input contains an integer `m` (1 ≤ `m` ≤ 100000), representing the number of operations. - Each of the next `m` lines contains two integers `p` and `q` (0 ≤ `p` ≤ `q` ≤ 1000000000), representing the start and end points of an interval to be added. # Output - After processing all operations, output each merged interval on a new line in ascending order of start point. Each interval should be printed as a pair of integers `[start, end]`. # Examples Sample Input 1: ``` 4 1 3 2 6 8 10 15 18 ``` Sample Output 1: ``` 1 6 8 10 15 18 ``` Sample Input 2: ``` 5 1 4 4 5 6 8 9 10 6 9 ``` Sample Output 2: ``` 1 5 6 10 ``` # Description The intervals might overlap and need to be merged accordingly. After each operation, intervals are inserted into the existing list, and if necessary, neighboring intervals that overlap should be merged. In the end, the output should be sorted by the starting points of intervals. Use an efficient approach to handle the large potential number of operations within the constraints. # Notes - The intervals in the input are not necessarily sorted. - The resulting merged intervals should be sorted in ascending order by their start points.","solution":"def merge_intervals(intervals): Function to merge overlapping intervals. Args: intervals (List[Tuple[int, int]]): List of intervals [start, end] Returns: List[Tuple[int, int]]: List of merged intervals in ascending order of start point if not intervals: return [] # Sort intervals based on the start points intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: prev_start, prev_end = merged[-1] current_start, current_end = current if current_start <= prev_end: # intervals overlap, merge them merged[-1] = (prev_start, max(prev_end, current_end)) else: merged.append(current) return merged def merge_intervals_from_operations(m, operations): Function to apply operations and merge overlapping intervals. Args: m (int): Number of operations operations (List[Tuple[int, int]]): List of operations where each operation is an interval [start, end] Returns: List[Tuple[int, int]]: List of merged intervals in ascending order of start point intervals = [] for p, q in operations: intervals.append((p, q)) return merge_intervals(intervals)"},{"question":"Marcus, a programmer, loves palindromes. A palindrome is a word, number, phrase, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Marcus wants to write a function that determines if a given string is a palindrome. You\'ve been tasked with helping Marcus by writing a function that checks if the input string is a palindrome after ignoring all non-alphanumeric characters and considering case insensitive comparisons. -----Input----- The input is a single line containing a string s (1 ≤ |s| ≤ 1000), where s consists of printable ASCII characters. -----Output----- Output \\"YES\\" if the given string is a palindrome, otherwise output \\"NO\\". -----Examples----- Input A man, a plan, a canal: Panama Output YES Input race a car Output NO Input No \'x\' in Nixon Output YES","solution":"import re def is_palindrome(s): Determines if the given string is a palindrome after ignoring non-alphanumeric characters and treating letters case insensitively. Parameters: s (str): input string Returns: str: \\"YES\\" if the string is a palindrome, \\"NO\\" otherwise # Convert string to lower case and remove all non-alphanumeric characters using regular expression cleaned_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if cleaned string is the same forwards and backwards return \\"YES\\" if cleaned_s == cleaned_s[::-1] else \\"NO\\""},{"question":"You are given two arrays A and B, both of length N. You need to calculate the sum of elements at the corresponding positions in both arrays. The answer for each position can be large, so print the result modulo 10^9 + 7. Example 1: Input: N = 4 A[] = {1, 2, 3, 4} B[] = {5, 6, 7, 8} Output: 6 8 10 12 Explanation: Sum of elements at the corresponding positions are: 1+5 = 6, 2+6 = 8, 3+7 = 10, 4+8 = 12 Example 2: Input: N = 3 A[] = {1000000000, 2000000000, 3000000000} B[] = {4000000000, 5000000000, 6000000000} Output: 500000007 700000007 900000007 Explanation: Sum of elements at the corresponding positions modulo 10^9 + 7 are: (1000000000+4000000000) % (10^9+7) = 500000007, (2000000000+5000000000) % (10^9+7) = 700000007, (3000000000+6000000000) % (10^9+7) = 900000007. Your Task: Complete the function sum_arrays() which takes two lists A and B of length N as input parameters and returns a list containing the sum of elements at corresponding positions modulo 10^9 + 7. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^6 0 <= A[i], B[i] <= 10^9","solution":"def sum_arrays(A, B): Returns the sum of elements at corresponding positions in A and B modulo 10^9 + 7. MOD = 10**9 + 7 return [(A[i] + B[i]) % MOD for i in range(len(A))]"},{"question":"A large online store wants to determine the popularity of items based on sales data. You are given the sales data which comprises of multiple entries, where each entry lists the amount of revenue generated from a specific item. Your task is to identify the item that generated the highest total revenue. In case of a tie (multiple items generating the same highest revenue), you should return the item which comes first alphabetically. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of sales entries. - Each of the next N lines contains a string item_name representing the name of the item and an integer amount representing the revenue generated by that item. -----Output----- - For each test case, print a single line containing the item name that generated the highest total revenue. If multiple items have the same highest total revenue, print the item name that comes first alphabetically. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ N ≤ 100 - 1 ≤ amount ≤ 1000 - item_name consists only of lowercase English letters and has a length of 1 to 20. -----Example----- Input 2 4 apple 100 banana 200 apple 300 banana 200 3 laptop 4000 laptop 3000 mobile 8000 Output apple laptop -----Explanation----- Example 1: The total revenue generated by \\"apple\\" is 400, and by \\"banana\\" is 400. Since both items generate the same highest revenue, \\"apple\\" comes first alphabetically. Example 2: The total revenue generated by \\"laptop\\" is 7000, and by \\"mobile\\" is 8000. Hence, \\"mobile\\" generated the highest revenue.","solution":"def find_highest_revenue_item(T, test_cases): Given T test cases, each containing sales data with item names and generated revenue, this function identifies the item with the highest total revenue for each test case. If multiple items have the same highest revenue, it returns the item which comes first alphabetically. result = [] for i in range(T): N = test_cases[i][0] sales = test_cases[i][1] revenue_dict = {} for item_name, amount in sales: if item_name in revenue_dict: revenue_dict[item_name] += amount else: revenue_dict[item_name] = amount # Find the item with the highest revenue and in case of tie, the lexicographically smallest one max_revenue = max(revenue_dict.values()) highest_revenue_items = [item for item, revenue in revenue_dict.items() if revenue == max_revenue] result.append(min(highest_revenue_items)) return result"},{"question":"In the kingdom of GridLand, there lies a magical treasure at the bottom-right corner of a grid. The grid is composed of N rows and M columns. GridLand’s king wants you to find the number of unique paths a knight (chess piece) can take to reach the treasure starting from the top-left corner of the grid. A knight moves in an L-shape: it can move either two squares in a horizontal direction and then one square vertically, or two squares vertically and then one square horizontally. The knight’s movement is bound by the grid’s size, meaning it cannot move outside the grid. Your task is to write a program that calculates the number of unique paths for the knight to get from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1). INPUT: 1st line contains T - the number of test cases. Each of the next T lines contains two integers N and M - the number of rows and columns in the grid, respectively. OUTPUT: For each test case, output a single line containing the number of unique paths the knight can take to reach the treasure. If there is no possible path, output 0. CONSTRAINTS: 1 ≤ T ≤ 10 1 ≤ N, M ≤ 20 SAMPLE INPUT: 2 3 3 2 3 SAMPLE OUTPUT: 0 1 Explanation: In the first case with a 3x3 grid, the knight cannot reach the bottom-right corner (2, 2) from the top-left corner (0, 0). In the second case with a 2x3 grid, the knight has exactly one path: (0,0) -> (2,1).","solution":"def count_knight_paths(T, test_cases): # Moves a knight can make moves = [(2, 1), (1, 2)] def dfs(x, y, N, M, dp): if x == N-1 and y == M-1: return 1 if dp[x][y] != -1: return dp[x][y] paths = 0 for dx, dy in moves: nx, ny = x + dx, y + dy if nx < N and ny < M: paths += dfs(nx, ny, N, M, dp) dp[x][y] = paths return paths results = [] for n, m in test_cases: dp = [[-1 for _ in range(m)] for _ in range(n)] result = dfs(0, 0, n, m, dp) results.append(result) return results"},{"question":"You are given a list of people\'s names along with which city they are from. Determine the most common city (the city that has the largest number of people). If there are multiple cities with the same maximum frequency, return the city which is lexicographically smallest. ----- Constraints ----- - 1 ≤ N ≤ 10^6 - The length of each name and city is between 1 and 100, inclusive - The name does not contain any spaces - The city does not contain any spaces ----- Input ----- The input is given from Standard Input in the following format: N name_1 city_1 name_2 city_2 : name_n city_n ----- Output ----- Print the most common city. If there are multiple such cities, print the lexicographically smallest one. ----- Sample Input ----- 5 Alice NewYork Bob Chicago Charlie NewYork David Boston Eve NewYork ----- Sample Output ----- NewYork","solution":"def most_common_city(n, people): from collections import defaultdict city_count = defaultdict(int) for person in people: name, city = person.split() city_count[city] += 1 max_count = max(city_count.values()) common_cities = [city for city, count in city_count.items() if count == max_count] return min(common_cities) if common_cities else None"},{"question":"You are given a list of integers representing the prices of different items in a store and a shopping list of items you want to buy, each represented by their item number (indexing starts from 0). Your task is to write a program that finds the total cost for the items in the shopping list. ------ Input Format ------ - The first line contains an integer T - the number of test cases. - For each test case: - The first line contains an integer N - the number of items in the store. - The second line contains N integers, representing the prices of the items. - The third line contains an integer M - the number of items in the shopping list. - The fourth line contains M integers, representing the item numbers (indices) of the items on the shopping list. ------ Output Format ------ For each test case, output the total cost to purchase all the items on the shopping list. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ M ≤ 100 1 ≤ text{price of each item} ≤ 100 0 ≤ text{item number} < N ------ Sample Input 1 ------ 2 5 10 20 15 30 25 3 1 3 4 4 8 12 7 15 10 9 2 0 5 ------ Sample Output 1 ------ 75 17 ------ Explanation 1 ------ Test case 1: The prices of the items at indices 1, 3, and 4 are 20, 30, and 25 respectively. The total cost is 20 + 30 + 25 = 75. Test case 2: The prices of the items at indices 0 and 5 are 8 and 9 respectively. The total cost is 8 + 9 = 17.","solution":"def find_total_cost(test_cases): results = [] for case in test_cases: prices = case[\\"prices\\"] indices = case[\\"shopping_list\\"] total_cost = sum(prices[i] for i in indices) results.append(total_cost) return results"},{"question":"You are given an integer array that represents the heights of columns of water where each width of the array element is 1. Calculate the maximum amount of water that can be trapped within these columns after raining. ------ Input ------ The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N. The second line contains N space-separated integers h_1, h_2, ..., h_N representing the height of columns. ------ Output ------ For each test case, print a single line containing the maximum amount of water that can be trapped within these columns after raining. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 0 ≤ h_i ≤ 10^4 Sum of N over all test cases is at most 10^6 ----- Sample Input 1 ------ 2 6 0 1 0 2 1 0 1 3 2 1 2 1 4 4 2 0 3 2 5 ----- Sample Output 1 ------ 6 9 ----- explanation 1 ------ Example case 1: The elevation map [0,1,0,2,1,0,1,3,2,1,2,1] can trap 6 units of water. Example case 2: The elevation map [4,2,0,3,2,5] can trap 9 units of water.","solution":"def max_water_trapped(heights): Returns the maximum amount of water that can be trapped within the columns after raining. if not heights or len(heights) < 3: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] water_trapped = 0 while left < right: if heights[left] <= heights[right]: left += 1 left_max = max(left_max, heights[left]) water_trapped += max(0, left_max - heights[left]) else: right -= 1 right_max = max(right_max, heights[right]) water_trapped += max(0, right_max - heights[right]) return water_trapped def process_test_cases(T, cases): results = [] for i in range(T): N = cases[i][0] heights = cases[i][1] results.append(max_water_trapped(heights)) return results"},{"question":"Write ```python transform_numbers(nums, operations) ``` that takes a list of integers ```nums``` and a list of strings ```operations```. Each string in ```operations``` represents an operation to perform on the corresponding element in ```nums```. The operations can be \'add\', \'subtract\', \'multiply\', or \'divide\', followed by a number. Apply the operation to the number and return the resulting list of integers. Note: division should be an integer division. For example: ```python transform_numbers([1, 2, 3, 4], [\'add 3\', \'subtract 1\', \'multiply 2\', \'divide 2\']) == [4, 1, 6, 2] # 1 add 3 = 4, 2 subtract 1 = 1, 3 multiply 2 = 6, 4 divide 2 = 2 transform_numbers([10, 20, 30], [\'multiply 2\', \'divide 5\', \'add 10\']) == [20, 4, 40] # 10 multiply 2 = 20, 20 divide 5 = 4, 30 add 10 = 40 transform_numbers([100, 50], [\'subtract 25\', \'multiply 3\']) == [75, 150] # 100 subtract 25 = 75, 50 multiply 3 = 150 ```","solution":"def transform_numbers(nums, operations): Transforms the list of integers nums based on the list of operations provided. Each operation is a string that can be \'add\', \'subtract\', \'multiply\', or \'divide\' followed by a number. Apply the operation to the number and return the resulting list of integers. :param nums: List of integers to be transformed. :param operations: List of transformation operations in string format. :return: List of transformed integers. result = [] for num, operation in zip(nums, operations): op, value = operation.split() value = int(value) if op == \'add\': result.append(num + value) elif op == \'subtract\': result.append(num - value) elif op == \'multiply\': result.append(num * value) elif op == \'divide\': result.append(num // value) return result"},{"question":"John is planning a treasure hunt on a grid. The grid has dimensions n x m, and some of the cells have obstacles while others are free to move through. John starts at the top-left corner of the grid (1, 1) and needs to reach the bottom-right corner (n, m). John can move one step at a time in the four cardinal directions (up, down, left, right), but he cannot move out of the grid or into cells with obstacles. Given the grid\'s dimensions and the locations of the obstacles, determine the minimum number of steps John must take to reach the bottom-right corner from the top-left corner. If it is not possible to reach the bottom-right corner, return -1. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines each contain m characters, where each character is either \'.\' representing a free cell or \'#\' representing an obstacle. -----Output----- Print a single integer — the minimum number of steps John must take to reach the bottom-right corner, or -1 if it is not possible. -----Examples----- Input 3 3 ... .#. ... Output 4 Input 4 4 .... .... .... Output -1 -----Note----- In the first example, John can reach the bottom-right corner with a minimum of 4 steps. One of the possible paths is: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) In the second example, it is not possible for John to reach the bottom-right corner because the path is blocked by obstacles.","solution":"from collections import deque def min_steps_to_reach(n, m, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() if row == n-1 and col == m-1: return steps for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < n and 0 <= c < m and grid[r][c] == \'.\' and (r, c) not in visited: visited.add((r, c)) queue.append((r, c, steps + 1)) return -1"},{"question":"You are given a 2D grid of size m x n where each cell represents a different terrain type denoted by an integer. A few important terrain types are: - 0: Water - 1: Land - 2: Mountain Your task is to write a program that identifies the number of islands in the grid, where an island is a collection of connected land cells (1s) separated by water cells (0s). Two land cells are considered connected if they are directly adjacent vertically or horizontally (but not diagonally). Note that mountains (2s) are impassable and cannot be part of any island or water body. -----Input----- The first line contains two integers m and n (1 ≤ m, n ≤ 100), representing the number of rows and columns in the grid. The next m lines each contain n integers representing the terrain types of each cell in the grid. -----Output----- Print a single integer representing the number of islands in the grid. -----Examples----- Input 4 5 1 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 1 1 Output 3 Input 3 3 1 1 0 0 1 0 0 0 1 Output 2 Input 4 4 0 0 0 0 1 2 2 0 0 1 2 0 0 0 0 0 Output 2","solution":"def num_islands(grid): if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = set() def dfs(r, c): stack = [(r, c)] while stack: row, col = stack.pop() if (row, col) not in visited: visited.add((row, col)) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < rows and 0 <= c < cols and grid[r][c] == 1 and (r, c) not in visited: stack.append((r, c)) islands = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1 and (r, c) not in visited: dfs(r, c) islands += 1 return islands"},{"question":"Given an array of integers A, a replacement operation consists of choosing any A[i], and replacing it with any other integer value. Return the minimum number of replacement operations needed to make the sum of the array equal to a given target value T. Example 1: Input: A = [1, 2, 3], T = 6 Output: 0 Explanation: The sum of the array is already 6, so no replacement is needed. Example 2: Input: A = [1, 2, 3], T = 10 Output: 1 Explanation: Replace 1 with 7 to get the array [7, 2, 3], whose sum is 10. Example 3: Input: A = [5, 5, 5], T = 5 Output: 2 Explanation: Replace two of the 5s with 0s to get the array [5, 0, 0], whose sum is 5. Note: - 0 <= A.length <= 10000 - -10^6 <= A[i] <= 10^6 - -10^9 <= T <= 10^9","solution":"def min_replacement_operations_to_target(A, T): Returns the minimum number of replacement operations needed to make the sum of array A equal to target value T. current_sum = sum(A) if current_sum == T: return 0 remaining_difference = abs(T - current_sum) # Since we can replace any A[i] with any integer value, it takes decimal points to meet exact difference when current_sum is not equal to T. # Hence, always the minimum replacements performing steps return 1 return 1"},{"question":"A company is organizing a project, and there are several tasks that need to be completed. Each task has a specified duration and a set of prerequisite tasks that must be completed before it can be started. Your job is to determine the minimum amount of time required to complete all tasks. To simplify, assume each task takes exactly one unit of time once it starts, and multiple tasks can be executed simultaneously if their prerequisites are met. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of tasks. Each of the following n lines describes a task. Each line contains an integer d_i (0 le d_i < i), denoting the number of prerequisites for the i-th task, followed by d_i integers, the indices of the prerequisite tasks (1-based index). -----Output----- Print a single integer — the minimum amount of time required to complete all tasks. -----Examples----- Input 5 0 1 1 1 1 2 2 3 0 Output 3 Input 4 0 1 1 1 1 2 2 3 Output 3 Input 3 0 0 1 1 Output 2 -----Notes----- In the first example: - The first and fifth tasks have no prerequisites and can start at time 0. - The second, third, and fourth tasks must wait for their respective prerequisites to be completed. - Time slots are: - Time 0: Tasks 1, 5 - Time 1: Task 2 - Time 2: Task 3 - Time 3: Task 4 - Thus, the total time required is 3 units. In the second example: - Time slots are: - Time 0: Task 1 - Time 1: Task 2 - Time 2: Tasks 3 - Time 3: Task 4 - Thus, the total time required is 3 units. In the third example: - Time slots are: - Time 0: Task 1, Task 2 - Time 1: Task 3 - Thus, the total time required is 2 units.","solution":"from collections import deque, defaultdict def min_completion_time(n, tasks): indegree = [0] * n next_tasks = defaultdict(list) time_taken = [0] * n for i in range(n): if len(tasks[i]) > 0: for pre in tasks[i]: pre -= 1 next_tasks[pre].append(i) indegree[i] += 1 queue = deque([i for i in range(n) if indegree[i] == 0]) while queue: curr = queue.popleft() for next_task in next_tasks[curr]: indegree[next_task] -= 1 time_taken[next_task] = max(time_taken[next_task], time_taken[curr] + 1) if indegree[next_task] == 0: queue.append(next_task) return max(time_taken) + 1"},{"question":"You are given two arrays A and B, each of length N. You need to form an array C of length N such that: - C[i] = A[i] + B[P[i]] for all 0 ≤ i < N - P is a permutation of indices {0, 1, ..., N-1}, meaning P is a rearrangement of indices 0 to N-1 Your task is to maximize the minimum value in array C. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ A[i], B[i] ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N A_0 A_1 A_2 ... A_{N-1} B_0 B_1 B_2 ... B_{N-1} -----Output----- Print the maximum possible value of the minimum element in array C. -----Sample Input----- 3 1 3 5 2 4 6 -----Sample Output----- 7 Explanation: By choosing permutation P = [2, 0, 1], C becomes [7, 5, 9], and the minimum value is 5.","solution":"def maximize_minimum_value(N, A, B): Returns the maximum possible value of the minimum element in array C which is formed by C[i] = A[i] + B[P[i]] for all 0 ≤ i < N, where P is a permutation of {0, 1, ..., N-1}. # Sort A in ascending order and B in descending order A.sort() B.sort(reverse=True) # Compute array C C = [A[i] + B[i] for i in range(N)] # Return the minimum value of C, which in this sorted combination is the maximum possible minimum value return min(C)"},{"question":"Yaroslav has recently started learning about binary operations, and he is excited to create an algorithm that performs bitwise XOR on a set of binary strings. The algorithm will process a given list of binary strings and apply the XOR operation on each of them with a fixed binary string mask, producing a new set of modified binary strings as output. The XOR operation is defined as follows: 1. If both bits are the same (0 XOR 0 = 0, 1 XOR 1 = 0), the result is 0. 2. If the bits are different (0 XOR 1 = 1, 1 XOR 0 = 1), the result is 1. Help Yaroslav design an algorithm that takes a list of binary strings and a binary mask, then outputs the modified list after applying the XOR operation with the given mask. The fixed binary mask will be always of the same length as the input binary strings. # Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of binary strings in the list. The next line contains a binary string of length m (1 ≤ m ≤ 50), which is the fixed binary mask. The next n lines contain one binary string each, also of length m. # Output Print n lines, each containing a binary string that is the result of applying the XOR operation between the corresponding input binary string and the fixed binary mask. # Example # Input ``` 3 1101 1010 1001 1111 ``` # Output ``` 0111 0100 0010 ``` In the example above: - For the first string, the XOR operation is: 1010 ⊕ 1101 = 0111 - For the second string, the XOR operation is: 1001 ⊕ 1101 = 0100 - For the third string, the XOR operation is: 1111 ⊕ 1101 = 0010","solution":"def xor_strings(binary_strings, mask): Applies bitwise XOR on each binary string in the list with the given binary mask. Parameters: binary_strings (list): A list of binary strings. mask (str): A binary string to act as the mask for the XOR operation. Returns: list: A list of binary strings after applying the XOR operation. result = [] for binary_string in binary_strings: xor_result = \'\'.join(\'1\' if binary_string[i] != mask[i] else \'0\' for i in range(len(mask))) result.append(xor_result) return result"},{"question":"Given a list of integers nums and an integer k, write a function that returns the first integer that appears at least k times in the list. If no such element exists, return -1. Input - The first line contains an integer k (1 ≤ k ≤ 100). - The second line contains a list of integers nums (1 ≤ |nums| ≤ 1000), where each integer is in the range -1000 ≤ nums[i] ≤ 1000. Output - Print the first integer that appears at least k times in the list. If no such element exists, print -1. Examples Input 2 1 2 2 3 4 5 2 Output 2 Input 3 1 2 3 4 5 6 Output -1","solution":"def first_element_k_times(nums, k): Returns the first integer that appears at least k times in the list nums. If no such element exists, return -1. count = {} for num in nums: if num in count: count[num] += 1 else: count[num] = 1 if count[num] == k: return num return -1"},{"question":"A company has decided to shift their file storage system to a new server. All files are organized in a directory structure where each directory may contain subdirectories and files. Each file has a specific size, and they need to ensure that total file sizes are kept balanced between directories as they migrate. The goal is to minimize the difference between the largest and smallest directory sizes (in terms of total file size) after moving all files to the new server. You are given the current directory structure and the sizes of the files. Your task is to determine the minimal difference between the largest and smallest directory sizes after optimally redistributing the files. -----Input Format----- The first line of input contains an integer n (1 ≤ n ≤ 1000) – the number of directories. The second line contains n integers representing the initial sizes of the files in each of the n directories. -----Output Format----- Output a single integer – the minimum possible difference between the largest and smallest directory sizes after optimally redistributing the files. -----Examples----- Input 4 1 2 3 4 Output 0 Input 3 10 20 5 Output 5 -----Explanation----- In the first example, since you can redistribute files optimally, it is possible to make all directories have the same total file size, leading to a difference of 0. In the second example, optimally redistributing the files results in directory sizes of 12.5, 12.5, and 10, thus the minimal difference is 5.","solution":"def min_difference(n, sizes): total_size = sum(sizes) half_size = total_size // 2 # Initialize a DP array to keep track of possible sums we can form with subset of files dp = [False] * (half_size + 1) dp[0] = True for size in sizes: for current_size in range(half_size, size - 1, -1): dp[current_size] = dp[current_size] or dp[current_size - size] # Find the closest sums to half of the total size for i in range(half_size, -1, -1): if dp[i]: smaller_part = i break larger_part = total_size - smaller_part return larger_part - smaller_part"},{"question":"Write a function that takes an integer n as input and prints a number pattern as follows: Example 1: Input: 4 Output: 1 2 2 3 3 3 4 4 4 4 Example 2: Input: 6 Output: 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 6 6 6 6 6 6 Your Task: You don\'t need to input anything. Complete the function printNumberPattern() which takes an integer n as input parameter and prints the pattern. Constraints: 1 <= n <= 20","solution":"def printNumberPattern(n): Prints a number pattern for the given integer n. for i in range(1, n+1): print(\\" \\".join([str(i)] * i))"},{"question":"The Great Race is upon us! You are tasked with developing a prediction algorithm to determine the winner of a marathon given the current status of runners at different checkpoints. Each checkpoint provides the timestamp of when each runner passes through, and your job is to identify who crossed the final checkpoint first. Each runner passes through each checkpoint exactly once in the order they appear, and there are no ties – every runner reaches the next checkpoint strictly after the preceding one. -----Input----- - The first line contains an integer C (2 le C le 50), the number of checkpoints, and an integer R (1 le R le 1000), the number of runners. - The following C lines each contain R integers, where the j-th integer in the i-th line represents the timestamp (in seconds from the start of the race) at which the j-th runner crosses the i-th checkpoint. -----Output----- - One line containing the integer: the 1-based index of the runner who crosses the final checkpoint first. -----Examples----- Sample Input 1: 3 4 100 200 300 400 150 250 350 450 200 300 400 500 Sample Output 1: 1 Sample Input 2: 4 3 1000 2000 3000 2000 3000 4000 3000 4000 5000 4000 5000 6000 Sample Output 2: 1","solution":"def find_winner(C, R, checkpoints): Returns the 1-based index of the runner who crosses the final checkpoint first. final_checkpoint_times = checkpoints[-1] first_position = final_checkpoint_times.index(min(final_checkpoint_times)) return first_position + 1 # Example usage: # C = 3, R = 4 # checkpoints = [ # [100, 200, 300, 400], # [150, 250, 350, 450], # [200, 300, 400, 500] # ] # print(find_winner(C, R, checkpoints)) # Output: 1"},{"question":"A new programmer named Alex is learning about mobile phone keypads. In the old mobile phones, each number key (except for 0 and 1) corresponds to multiple letters. Alex wants to write a program that, given a string that represents a sequence of keypresses, returns all possible letter combinations that the number sequence could represent. The correspondence between digits and letters is as follows: - 2: \\"abc\\" - 3: \\"def\\" - 4: \\"ghi\\" - 5: \\"jkl\\" - 6: \\"mno\\" - 7: \\"pqrs\\" - 8: \\"tuv\\" - 9: \\"wxyz\\" Write a function that takes a string containing digits from 2-9 inclusive and returns all possible letter combinations that the number could represent. Return the answers in lexicographical order. Input: - A single string `digits` of length `m` (1 ≤ m ≤ 10) containing digits from \'2\' to \'9\'. Output: - A list of strings representing all possible letter combinations, sorted lexicographically. Examples: Input: ``` 23 ``` Output: ``` [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] ``` Input: ``` 7 ``` Output: ``` [\\"p\\", \\"q\\", \\"r\\", \\"s\\"] ``` Input: ``` 89 ``` Output: ``` [\\"tw\\", \\"tx\\", \\"ty\\", \\"tz\\", \\"uw\\", \\"ux\\", \\"uy\\", \\"uz\\", \\"vw\\", \\"vx\\", \\"vy\\", \\"vz\\"] ```","solution":"from itertools import product def letter_combinations(digits): Given a string containing digits from 2-9 inclusive, returns all possible letter combinations that the number could represent. if not digits: return [] digit_to_chars = { \'2\': \\"abc\\", \'3\': \\"def\\", \'4\': \\"ghi\\", \'5\': \\"jkl\\", \'6\': \\"mno\\", \'7\': \\"pqrs\\", \'8\': \\"tuv\\", \'9\': \\"wxyz\\" } # Map each digit to its corresponding letters char_sequences = [digit_to_chars[digit] for digit in digits] # Generate all possible combinations combinations = [\'\'.join(combo) for combo in product(*char_sequences)] # Return sorted combinations return sorted(combinations)"},{"question":"Alice is creating a new encryption mechanism where each character in a string is replaced by a pair of characters according to a pre-defined map. You are given the encrypted string and the map. Your task is to help Bob decrypt the message. The decryption map is given as Rs, where pairs of letters are switched as follows: Rs[a] = b means that character \'a\' was replaced by \'b\' in the encrypted string. For example, consider the mapping Rs[\'a\'] = \'x\' and Rs[\'b\'] = \'y\'. If the encrypted string is \\"xxyy\\", you need to decode it back to \\"aabb\\". # Input: - The first line contains an integer N, the number of key-value pairs in the decryption map. - The next N lines contain the mappings in the format `a b`, where character \'a\' is decrypted to character \'b\'. - The final line contains the encrypted string. # Output: - Print the original string after decrypting the encrypted string using the given map. # Constraints: - ( 1 leq N leq 26 ) - ( 1 leq text{Length of encrypted string} leq 1000 ) - All characters in the encrypted string will be lowercase English alphabets. # SAMPLE INPUT 3 x a y b z c xxyyzz # SAMPLE OUTPUT aabbcc **Explanation:** By using the map: - \'x\' decrypts to \'a\' - \'y\' decrypts to \'b\' - \'z\' decrypts to \'c\' Therefore, the encrypted string \\"xxyyzz\\" decrypts to \\"aabbcc\\".","solution":"def decrypt_message(n, mappings, encrypted_string): Decrypts the encrypted string using the given decryption map. :param n: int, number of mapping pairs :param mappings: list of tuples, each tuple contains two characters (encrypted, original) :param encrypted_string: str, the encrypted string :return: str, the decrypted (original) string decryption_map = {} for a, b in mappings: decryption_map[a] = b decrypted_string = \'\'.join(decryption_map[char] for char in encrypted_string) return decrypted_string"},{"question":"Lena is learning about graphs and has a set of cities connected by bidirectional roads. There are `n` cities and `m` roads. Each road has a travel time associated with it. Lena\'s goal is to determine the shortest travel time between each pair of cities using a specific algorithm. Your task is to implement an algorithm that helps Lena calculate the shortest travel time between every pair of cities. -----Input----- The first line contains two integers `n` and `m` (2 ≤ `n` ≤ 200, 1 ≤ `m` ≤ 5000). Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ `u`, `v` ≤ `n`, 1 ≤ `w` ≤ 10^6), describing a road between cities `u` and `v` with travel time `w`. -----Output----- Output `n` lines, each containing `n` space-separated integers. The j-th integer in the i-th line should indicate the shortest travel time from city `i` to city `j`. If city `i` and city `j` are not connected by any sequence of roads, print `-1` for that pair. -----Examples----- Input 4 4 1 2 5 2 3 10 1 3 9 3 4 2 Output 0 5 9 11 5 0 10 12 9 10 0 2 11 12 2 0 Input 3 1 1 2 3 Output 0 3 -1 3 0 -1 -1 -1 0 -----Note----- In the first sample, there are 4 cities and 4 roads. The travel time from city 1 to city 4 is calculated through the path 1 -> 3 -> 4 with a total travel time of 9 + 2 = 11. In case there is no direct or indirect path between a pair of cities, denote the travel time as `-1`. In the second sample, there are only 3 cities and 1 road. City 3 is isolated and not connected to any other city, therefore the travel time to or from city 3 is indicated as `-1`.","solution":"def floyd_warshall(n, roads): Computes the shortest travel time between each pair of cities using the Floyd-Warshall algorithm. Parameters: n (int): number of cities roads (list of tuples): list of roads, where each road is represented as a tuple (u, v, w) Returns: list of lists: a distance matrix where entry (i, j) represents the shortest travel time from city i+1 to city j+1 # Initialize distances with infinity, with 0 on the diagonal dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 # Set the initial distances based on the input roads for u, v, w in roads: dist[u-1][v-1] = w dist[v-1][u-1] = w # Floyd-Warshall algorithm to compute all pairs shortest paths for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Replace \'inf\' with -1 where no path exists for i in range(n): for j in range(n): if dist[i][j] == float(\'inf\'): dist[i][j] = -1 return dist def shortest_travel_times(n, m, roads): return floyd_warshall(n, roads)"},{"question":"You\'re given an initially empty list of integers. Perform a set of operations on this list according to the specified commands and return the resulting list. The commands are of the following types: - \\"INSERT x\\": Insert the integer x at the end of the list. - \\"DELETE x\\": Remove the first occurrence of the integer x from the list. If x is not found in the list, skip this command. - \\"PRINT\\": Print the current state of the list. If the list is empty, print \\"EMPTY\\". Input: The first line contains an integer T, the number of commands. Each of the next T lines contains one command as described above. Output: For each \\"PRINT\\" command, output the current state of the list or \\"EMPTY\\" if the list is empty. Constraints: 1 ≤ T ≤ 1000 1 ≤ x ≤ 10^6 SAMPLE INPUT 5 INSERT 5 INSERT 10 PRINT DELETE 5 PRINT SAMPLE OUTPUT [5, 10] [10]","solution":"def process_commands(commands): lst = [] results = [] for command in commands: parts = command.split() if parts[0] == \\"INSERT\\": lst.append(int(parts[1])) elif parts[0] == \\"DELETE\\": try: lst.remove(int(parts[1])) except ValueError: pass # If x is not in list, do nothing elif parts[0] == \\"PRINT\\": if lst: results.append(lst.copy()) else: results.append(\\"EMPTY\\") return results"},{"question":"Write a function that takes a string of space-separated words and returns the string with the words sorted in order of their length. If two words have the same length, maintain their original order in the input string. For example, ``` Input: \\"the quick brown fox jumps over the lazy dog\\" Output: \\"the fox the dog over lazy quick brown jumps\\" ```","solution":"def sort_words_by_length(sentence): Sorts words in a sentence by their length while maintaining the original order of words with the same length. :param sentence: str - A sentence of space-separated words. :return: str - A sentence with words sorted by length. words = sentence.split() sorted_words = sorted(words, key=lambda x: len(x)) return \\" \\".join(sorted_words)"},{"question":"You are given a list of books where each book has a title, an author, a publication year, and a genre. Write a function that sorts the books by genre in alphabetical order. For two books of the same genre, sort them by publication year in ascending order. If two books of the same genre and year are present, they should retain their original order as given in the input. Input Format The first line contains an integer N, the number of books. N lines follow, each containing space-separated strings and integers representing the title, author, publication year, and genre of each book, respectively. Constraints 1 leq N leq 15 Output Format Output N lines, each containing the information of the books sorted as specified above. Each book\'s information should be printed in the following format: \\"<Title>, <Author> (<Year>) - <Genre>\\" Sample Input 4 \\"1984\\" \\"George Orwell\\" 1949 \\"Dystopian\\" \\"To Kill a Mockingbird\\" \\"Harper Lee\\" 1960 \\"Classic\\" \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" 1925 \\"Classic\\" \\"Brave New World\\" \\"Aldous Huxley\\" 1932 \\"Dystopian\\" Sample Output \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" (1925) - Classic \\"To Kill a Mockingbird\\" \\"Harper Lee\\" (1960) - Classic \\"Brave New World\\" \\"Aldous Huxley\\" (1932) - Dystopian \\"1984\\" \\"George Orwell\\" (1949) - Dystopian Concept When sorting a list of dictionaries or objects by multiple keys, we can use the `sorted` function with a lambda or the `itemgetter` library.","solution":"def sort_books_by_genre_and_year(books): Sorts a list of books by genre in alphabetical order. For two books of the same genre, sorts by publication year in ascending order. If two books of the same genre and year are present, they retain their original order. books: List of dictionaries each representing a book with keys \'title\', \'author\', \'year\', \'genre\' Returns a list of books sorted as mentioned above. sorted_books = sorted(books, key=lambda x: (x[\'genre\'], x[\'year\'])) return sorted_books def format_book_info(book): Formats the book information into the specified output format. book: Dictionary representing a book Returns a formatted string. return f\'\\"{book[\\"title\\"]}\\" \\"{book[\\"author\\"]}\\" ({book[\\"year\\"]}) - {book[\\"genre\\"]}\'"},{"question":"Given a list of non-negative integers, you are tasked with arranging them such that they form the largest possible number. Since the result might be very large, you must return the largest number in string format. Your goal is to write a function to rearrange a given list of non-negative integers to form the largest possible concatenated number. The function should take into consideration all permutations of the numbers to find the optimal order. # Examples Example 1: Input: [10, 2] Output: \\"210\\" Example 2: Input: [3, 30, 34, 5, 9] Output: \\"9534330\\" # Constraints - The input list\'s length is in the range [1, 100]. - The input list\'s individual elements are in the range [0, 10^9]. # Notes - The result should be returned as a string. - The function should handle cases where multiple same digits can be arranged differently. - A library function to sort the numbers in descending order is allowed if it helps to achieve the desired result. Ensure your function considers the combined numerical value comparison rather than individual numerical value comparison when sorting or arranging the numbers.","solution":"from functools import cmp_to_key def largest_number(nums): Returns the largest possible concatenated number formed by the input list of non-negative integers. def compare(x, y): # Compare by concatenating in both possible ways and see which concatenation gives a larger number if x+y > y+x: return -1 elif x+y < y+x: return 1 else: return 0 # Convert numbers to strings for easy comparison nums_str = list(map(str, nums)) # Sort numbers based on the custom comparator nums_str.sort(key=cmp_to_key(compare)) # Join the sorted array into the largest number largest_num = \'\'.join(nums_str) # Special case: if the largest number starts with \'0\', the result must be \'0\' if largest_num[0] == \'0\': return \'0\' return largest_num"},{"question":"You are given an n x n grid of integers representing heights in a 2D landscape. Water can flow from high to low or equal height from any cell to its four adjacent cells (top, bottom, left, and right). Determine the cells from which water can flow to both the Pacific and Atlantic oceans. The Pacific Ocean touches the left and top edges of the grid, and the Atlantic Ocean touches the bottom and right edges. Write a function `pacificAtlantic` that returns a list of coordinates representing the cells where water can flow to both the Pacific and Atlantic oceans. # Function Signature ```python def pacificAtlantic(matrix: List[List[int]]) -> List[List[int]]: ``` # Input - `matrix`: A 2D list of integers where `matrix[r][c]` represents the height at cell `(r, c)`. # Output - A list of lists where each sublist contains two integers `[r, c]` representing coordinates of the cells where water can flow to both oceans. The output should be in ascending order of rows and then columns. # Constraints - The dimensions of the matrix will not exceed 200 x 200. - Heights are positive integers within the range from 0 to 10,000. # Example Example 1 ```python Input: matrix = [ [1, 2, 2, 3, 5], [3, 2, 3, 4, 4], [2, 4, 5, 3, 1], [6, 7, 1, 4, 5], [5, 1, 1, 2, 4] ] Output: [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] ``` Example 2 ```python Input: matrix = [ [2, 1], [1, 2] ] Output: [[0, 0], [0, 1], [1, 0], [1, 1]] ``` # Explanation In the first example, the cells from which water can flow to both the Pacific and Atlantic oceans are: - `[0, 4]`: Water can flow right (towards the Atlantic) and up (towards the Pacific). - `[1, 3]`: Water can flow right to `[1, 4]` (Atlantic) and left to `[0, 3]` (Pacific). - `[1, 4]`: Water can flow up (Pacific) and down (Atlantic). - `[2, 2]`: Water can flow to both oceans because it is surrounded by heights that allow flow in both directions. - `[3, 0]` and `[3, 1]`: Heights are sufficient to flow towards both oceans along different paths. - `[4, 0]`: Water can flow to the right (Atlantic) and up (Pacific). In the second example, every cell can flow to both oceans due to their heights and adjacency. # Note - Use depth-first search (DFS) or breadth-first search (BFS) to solve the problem efficiently. - Ensure to check boundary conditions and avoid cells already visited.","solution":"from typing import List def pacificAtlantic(matrix: List[List[int]]) -> List[List[int]]: if not matrix: return [] rows, cols = len(matrix), len(matrix[0]) # Directions for the DFS traversal directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def dfs(r, c, visited): if visited[r][c]: return visited[r][c] = True for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and matrix[nr][nc] >= matrix[r][c]: dfs(nr, nc, visited) pacific_visited = [[False for _ in range(cols)] for _ in range(rows)] atlantic_visited = [[False for _ in range(cols)] for _ in range(rows)] for r in range(rows): dfs(r, 0, pacific_visited) dfs(r, cols - 1, atlantic_visited) for c in range(cols): dfs(0, c, pacific_visited) dfs(rows - 1, c, atlantic_visited) result = [] for r in range(rows): for c in range(cols): if pacific_visited[r][c] and atlantic_visited[r][c]: result.append([r, c]) return result"},{"question":"Farmer John has several fields that need irrigation. Each field is represented as an interval on a number line, with a starting point and an ending point. The irrigation system consists of specific lengths of hoses, which can cover a certain range of points on the number line, directly correlating to the interval they can cover. Farmer John wants to know if he can cover all his fields using a combination of available hoses without wastage (i.e., no hose should extend beyond the necessary interval to cover multiple fields). Can you help him determine the minimum number of hoses needed to cover all fields for each test case? INPUT: 1st line contains T - number of test cases. For each test case: 1st line contains F - the number of fields. Next F lines contain two integers Sf and Ef, representing the start and end points of each field (inclusive). Next line contains H - the number of different lengths of hoses available. Next line contains H space-separated integers Hi, each specifying the length of the hoses available. OUTPUT: For each test case, output a single line containing the minimum number of hoses needed to cover all fields. Output \\"-1\\" if it is not possible to cover all fields using the available hoses. CONSTRAINTS: 1 ≤ T ≤ 10 1 ≤ F ≤ 100 1 ≤ H ≤ 10 1 ≤ Sf, Ef ≤ 1000 1 ≤ Hi ≤ 1000 SAMPLE INPUT: 2 2 1 4 5 8 3 2 3 4 3 2 5 7 11 4 1 2 3 5 SAMPLE OUTPUT: 2 2 Explanation: In the first test case, we have two fields: one from 1 to 4 and another from 5 to 8. We can use the hoses of lengths 4 (covering from 1 to 4) and another hose of length 4 (covering from 5 to 8). In the second test case, there are two fields: one from 2 to 5 and another from 7 to 11. Here, we can use hoses of lengths 3 (covering from 2 to 5) and another hose of length 5 (covering from 7 to 11).","solution":"def min_hoses_needed(T, test_cases): results = [] for tc in range(T): fields = test_cases[tc][\'fields\'] hose_lengths = test_cases[tc][\'hose_lengths\'] fields.sort() hose_lengths.sort(reverse=True) hose_count = 0 possible = True for field in fields: sf, ef = field covered = False for hl in hose_lengths: if hl >= (ef - sf + 1): hose_count += 1 covered = True break if not covered: possible = False break if possible: results.append(hose_count) else: results.append(-1) return results"},{"question":"The city\'s traffic department is planning to optimize the traffic lights at various intersections to reduce the overall commute time for drivers. They are particularly focusing on a stretch of road with n intersections, each having a traffic light. The time intervals for green lights at these intersections are given as a sequence of integers t[1], t[2], ..., t[n], where t[i] indicates the duration in seconds for which the i-th intersection stays green before it turns red. To make this work, the department wants to calculate the maximum possible time a driver can continuously drive through green lights without stopping. Note that while calculating, if a driver can drive through two consecutive green lights without stopping (i.e., the green light duration at one intersection ends exactly when the green light duration at the next intersection starts), those durations can be summed up to get the continuous green light duration. However, driving time cannot be considered continuous if the green lights do not align as per the above condition. You have been given the task to write a program that determines this maximum continuous green light driving time. Input Format: - The first line contains a single integer n (the number of intersections). - The second line contains n space-separated integers t[1], t[2], ..., t[n] (the green light durations at the intersections). Output Format: - Output a single integer: the maximum possible continuous time in seconds a driver can drive through green lights without stopping. Constraints: - 2 ≤ n ≤ 100 - 1 ≤ t[i] ≤ 1000 Sample Input: 4 10 20 10 30 Sample Output: 30 Explanation: - The first intersection has a green light for 10 seconds, then it switches to red while the second intersection has just turned green for 20 seconds. - After 20 seconds, the light at the second intersection turns red, and at that exact time, the green light 10 seconds for the third intersection starts. - However, the green light durations do not align at the second and third intersections. - The longest possible continuous green light time is therefore 30 seconds (either the second or the fourth intersection).","solution":"def max_continuous_green_time(n, times): Returns the maximum continuous green light duration. Arguments: n : int -- number of intersections times : list -- green light durations at each intersection Returns: int -- max continuous green light duration max_duration = 0 current_duration = times[0] for i in range(1, n): if times[i] == times[i-1]: current_duration += times[i] else: if current_duration > max_duration: max_duration = current_duration current_duration = times[i] if current_duration > max_duration: max_duration = current_duration return max_duration # Sample Input / Output n = 4 times = [10, 20, 10, 30] assert max_continuous_green_time(n, times) == 30"},{"question":"Given an array of integers representing the heights of buildings, design an algorithm that calculates the largest rectangular area possible in a histogram, where the width of each bar is 1. You are required to complete the function `getMaxRectangularArea()`, which takes two inputs: `n` (the number of buildings) and `heights[]` (an array containing the heights of the buildings). Your function should return the area of the largest rectangle that can be formed. Example 1: Input: n = 7 heights[] = {6, 2, 5, 4, 5, 1, 6} Output: 12 Explanation: The largest rectangle with all bars of the same height has an area of 12. Example 2: Input: n = 5 heights[] = {2, 4, 2, 1, 10} Output: 10 Explanation: The largest rectangle with height 10 and width 1 has an area of 10. Your Task: Complete the `getMaxRectangularArea()` function which should return an integer value of the maximum rectangular area in the histogram. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^5 0 <= heights[i] <= 10^4","solution":"def getMaxRectangularArea(n, heights): Returns the largest rectangular area in a histogram. :param n: Integer, the number of buildings. :param heights: List of integers representing the heights of the buildings. :return: Integer, the area of the largest rectangle. stack = [] max_area = 0 index = 0 while index < n: # If this bar is higher than the bar at stack top, push it to the stack if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a grid consisting of X rows and Y columns. A robot is placed at the top-left corner of the grid (i.e., at (1,1)) and it needs to reach the bottom-right corner of the grid (i.e., at (X,Y)). The robot can only move right or down. However, there are certain cells in the grid that are marked as obstacles and the robot cannot move onto those cells. Provide a program to find the number of unique paths that the robot can take to reach the bottom-right corner from the top-left corner. The grid is represented by a 2D array where 1 represents an obstacle and 0 represents an empty cell. -- Input -- The first line contains two integers X and Y (1 ≤ X,Y ≤ 100) — the dimensions of the grid. The next X lines each contain Y integers (either 0 or 1) forming the grid. -- Output -- Print one integer — the number of unique paths from the top-left corner to the bottom-right corner modulo 10^9 + 7. -- Examples -- Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 0 1 0 0 0 0 Output 1 Note: In the first sample, the robot can take the following two unique paths (marked with \'r\'): * (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) * (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) In the second sample, the robot can only take one unique path: * (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3)","solution":"def unique_paths_with_obstacles(X, Y, grid): MOD = 10**9 + 7 if grid[0][0] == 1 or grid[X-1][Y-1] == 1: return 0 dp = [[0] * Y for _ in range(X)] dp[0][0] = 1 for i in range(X): for j in range(Y): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[X-1][Y-1] # Example usage # X, Y = 3, 3 # grid = [ # [0, 0, 0], # [0, 1, 0], # [0, 0, 0] # ] # print(unique_paths_with_obstacles(X, Y, grid)) # Output: 2"},{"question":"In a distant land, the kingdom of Zogroth has been affected by magical spells that cause an array of hills and ditches to move periodically. The kingdom\'s map is represented as a 2D grid of size n × m, where each cell contains a single integer height which can be positive (hills), negative (ditches), or zero (flat ground). The king of Zogroth wants to ensure that the new capital city is established at a location that is sufficiently flat and stable. Therefore, you are tasked with finding the largest square sub-grid where the height of every cell is exactly zero. -----Input----- The first line contains two integers n and m, representing the dimensions of the kingdom\'s grid. The next n lines each contain m integers, representing the heights of the grid cells. It\'s guaranteed that 1 ≤ n, m ≤ 500. -----Output----- Output a single integer representing the size of the largest square sub-grid comprised entirely of zeroes. If there is no such sub-grid, output 0. -----Examples----- Input 5 5 1 0 0 0 -2 2 0 0 0 -3 3 0 0 0 0 -1 0 0 0 1 -2 0 -3 0 -4 Output 3 Input 4 4 1 -1 0 0 0 0 0 0 0 -1 0 0 0 0 0 0 Output 2 Input 2 2 1 2 3 4 Output 0 -----Explanation----- In the first example, the largest square sub-grid of zeroes has a dimension of 3x3, encompassing the middle section of the grid. In the second example, there are multiple sub-grids of zeroes, but the largest one has a dimension of 2x2. In the third example, there are no sub-grids of zeroes, hence the output is 0.","solution":"def largest_zero_square(n, m, grid): max_side = 0 # Create a 2D dp array initialized to zero dp = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == 0: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"John is a passionate mountaineer who loves discovering new peaks. He needs an algorithm to find the second highest peak among a list of peak heights. Write a function that takes a list of positive integers, representing the heights of various peaks, and returns the height of the second tallest peak. The list will always contain at least two distinct heights. ```python second_highest_peak([1, 2, 3, 4, 5]) # => 4 second_highest_peak([10, 20, 20, 15, 8]) # => 15 second_highest_peak([27, 35, 19, 56, 44]) # => 44 ```","solution":"def second_highest_peak(peaks): Returns the height of the second highest peak from a list of peak heights. unique_peaks = list(set(peaks)) unique_peaks.sort(reverse=True) return unique_peaks[1]"},{"question":"You are given an array of integers where each integer represents the height of a stack of blocks. You are allowed to pick two stacks at a time and remove one block from both stacks until at least one of the stacks becomes empty. Your goal is to make the height of any stack no more than the height of a stack to the right of it. Find the minimum number of operations required to achieve the goal. -----Input----- The first line contains a single positive integer t (1 leq t leq 1000) — the number of test cases. For each test case, the first line contains a single integer n (2 leq n leq 100) — the number of stacks of blocks. The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 100) — the heights of the stacks of blocks. -----Output----- For each test case, print a single integer — the minimum number of operations required to make the height of any stack no more than the height of a stack to the right of it. -----Examples----- Input 2 4 5 7 4 8 3 3 2 1 Output 4 3 -----Note----- In the first test case, we must ensure that 5 leq 7 leq 4 leq 8. One of the possible ways to achieve this is: 1. Remove 1 block from the stack with height 7 and height 8, resulting in stacks [5, 6, 4, 7]. 2. Remove 1 block from stack with height 6 and height 7, resulting in stacks [5, 5, 4, 6]. 3. Remove 1 block from stack with height 6 and height 5, resulting in stacks [5, 4, 4, 5]. 4. Remove 1 block from stack with height 5 and height 4, resulting in stacks [4, 4, 4, 5]. In the second test case, the optimal way involves removing blocks to make all stacks empty, as satisfying the required condition is impossible otherwise. The minimum number of operations needed is 3.","solution":"def minimum_operations(t, test_cases): Returns the minimum number of operations required to make the height of any stack no more than the height of a stack to the right of it. Parameters: t (int): number of test cases test_cases (list of tuples): each tuple contains an integer n (number of stacks) and a list of n integers representing the heights of those stacks Returns: list of int: minimum number of operations for each test case results = [] for case in test_cases: n, heights = case operations = 0 for i in range(n - 2, -1, -1): # Ensure that heights[i] <= heights[i + 1] if heights[i] > heights[i + 1]: operations += heights[i] - heights[i + 1] heights[i] = heights[i + 1] results.append(operations) return results"},{"question":"Given an array of integers, write a function that finds the subarray with the maximum sum and returns its sum. A subarray is defined as a contiguous sequence of elements within the array. If the array contains only negative numbers, return the largest single element. Note that a subarray with just one element is also considered valid. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of elements in the array. - The second line contains `n` integers separated by spaces, representing the elements of the array. Each element will be in the range [-1000, 1000]. # Output: - Output the sum of the subarray with the maximum sum. # Example: Input: ``` 9 -2 1 -3 4 -1 2 1 -5 4 ``` Output: ``` 6 ``` Explanation: The maximum sum subarray is `[4, -1, 2, 1]` with a sum of `6`. # Instructions: - Implement this function by using Kadane\'s Algorithm to achieve an optimal time complexity of O(n). - You are required to handle both positive and negative numbers within the array. - The function should be optimized to handle the maximum constraints efficiently. Write a function `max_subarray_sum(n, arr)` where: ``` def max_subarray_sum(n, arr): # write your code here ```","solution":"def max_subarray_sum(n, arr): Finds the subarray with the maximum sum in the given array using Kadane\'s Algorithm. Parameters: n (int): Number of elements in the array arr (list): List of integers representing the array Returns: int: The sum of the subarray with the maximum sum max_current = max_global = arr[0] for i in range(1, n): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are organizing a marathon event and have N water stations along the route. Each water station i has V_i liters of water available. Runners can stop at any water station to drink water, but the total water consumed from each station cannot exceed V_i liters. The total volume of water required by the runners is W liters. You need to find out if it is possible to supply the runners with exactly W liters of water using the given water stations. If it is possible, return \\"Yes\\", otherwise return \\"No\\". You may assume that each runner drinks at least 1 liter of water. -----Constraints----- - 1 leq N leq 10^5 - 1 leq V_i leq 10^9 - 1 leq W leq 10^18 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N W V_1 V_2 ... V_N -----Output----- Print \\"Yes\\" if it is possible to supply exactly W liters of water. Otherwise, print \\"No\\". -----Sample Input----- 5 100 20 30 50 10 20 -----Sample Output----- Yes -----Explanation----- The runners can collectively drink 100 liters as follows: - 20 liters from the 1st station - 30 liters from the 2nd station - 50 liters from the 3rd station","solution":"def can_supply_water(N, W, V): Determine if it is possible to supply exactly W liters of water. Parameters: N (int): Number of water stations. W (int): Total volume of water required by the runners. V (list): List of water volumes available at each station. Returns: str: \\"Yes\\" if it is possible to supply exactly W liters of water, otherwise \\"No\\". # Sort the list of water volumes in descending order. V.sort(reverse=True) # Iterate through the sorted list and keep subtracting from W. for v in V: if W == 0: break if v <= W: W -= v # If W is reduced to zero, return \\"Yes\\". if W == 0: return \\"Yes\\" else: return \\"No\\""},{"question":"Given n, a, and r as the number of terms, the first term, and the common ratio respectively of a Geometric Series. Find the sum of the series up to the nth term. Example 1: Input: 3 2 2 Output: 14 Explanation: Series up to 3rd term is 2, 4, 8, so the sum will be 14. Example 2: Input: 4 1 3 Output: 40 Explanation: Series up to 4th term is 1, 3, 9, 27, so the sum will be 40. Your Task: You don\'t need to read or print anything. Your task is to complete the function sum_of_gp() which takes the integer parameters n, a, and r as input and returns the sum of the series. Expected Time Complexity: O(1) Expected Space Complexity: O(1) Constraints: 1 <= n, a, r <= 50","solution":"def sum_of_gp(n, a, r): Calculate the sum of the first n terms of a geometric series with first term \'a\' and common ratio \'r\'. Parameters: n (int): number of terms a (int): the first term of the geometric series r (int): the common ratio of the geometric series Returns: int: sum of the first n terms of the geometric series if r == 1: return a * n return a * (1 - r**n) // (1 - r)"},{"question":"The Track Athlete Welcome to the athletics championship. You are the coach of a track team and your athletes are competing in a race. Each athlete clicks the \\"finish line\\" button as they complete the race, recording their race time. Your task is to determine the order in which your athletes finish based on their recorded times. You will be given a list of athlete\'s names and their corresponding race times in seconds. Your job is to return a list of athlete names sorted by their finishing time, from fastest to slowest. If two or more athletes have the same finishing time, maintain their relative order from the provided list. **Example:** ```python race_results = [(\'Alice\', 12.4), (\'Bob\', 10.1), (\'Charlie\', 14.8), (\'David\', 10.1)] ``` **Output:** ```python [\'Bob\', \'David\', \'Alice\', \'Charlie\'] ``` **Explanation:** Bob and David have the same time, but Bob appears first in the input list, so he appears first among the two in the output list. Write a function `rank_athletes(race_results)` that takes in a list of tuples, where each tuple contains an athlete\'s name and their race time, and returns a list of athlete names sorted by their race time from fastest to slowest. ```python def rank_athletes(race_results): # Your code here ```","solution":"def rank_athletes(race_results): Sort a list of race results by their race times, maintaining relative order for ties. Parameters: race_results (list of tuples): List of tuples where each tuple contains an athlete\'s name and their time in seconds. Returns: list: List of athlete names sorted by their race times from fastest to slowest. sorted_results = sorted(race_results, key=lambda x: x[1]) return [name for name, time in sorted_results]"},{"question":"Sam is organizing a coding competition and wants to create a leaderboard based on the participants\' scores. The participants\' scores are recorded in a dictionary where the keys are the participants\' names and the values are their scores. The leaderboard should display the participants in descending order of their scores. If two participants have the same score, they should be ordered alphabetically by their names. Write a function that generates the leaderboard based on the given criteria. # Input - A dictionary `scores` where: - The keys are strings representing the participants\' names. - The values are integers representing the participants\' scores. # Output - A list of tuples where each tuple contains a participant\'s name and their score, sorted according to the criteria mentioned above. # Examples Example 1: ```python Input: {\'Alice\': 50, \'Bob\': 75, \'Charlie\': 75, \'David\': 60} Output: [(\'Bob\', 75), (\'Charlie\', 75), (\'David\', 60), (\'Alice\', 50)] ``` Example 2: ```python Input: {\'John\': 30, \'Jane\': 50, \'Doe\': 50} Output: [(\'Doe\', 50), (\'Jane\', 50), (\'John\', 30)] ``` # Constraints - All names in the dictionary are unique. - The dictionary contains at least two elements.","solution":"def generate_leaderboard(scores): Generates a sorted leaderboard based on the participants\' scores. Parameters: scores (dict): A dictionary where the keys are participants\' names and the values are their scores. Returns: list: A list of tuples where each tuple contains a participant\'s name and their score, sorted according to the criteria. # Sorting the dictionary items by score in descending order and by name in alphabetical order in case of a tie sorted_leaderboard = sorted(scores.items(), key=lambda item: (-item[1], item[0])) return sorted_leaderboard"},{"question":"You are given two arrays of integers, `A` and `B`, each of length `n`. You need to determine if it is possible to rearrange array `A` such that for each `i` (1 ≤ i ≤ n), the condition `A[i] ≤ B[i]` holds. -----Input----- The first line of the input contains one integer n (1 le n le 10^5) — the number of elements in the arrays. The second line contains n integers separated by spaces, representing the array A. The third line contains n integers separated by spaces, representing the array B. -----Output----- Print \\"YES\\" (without quotes) if it is possible to rearrange the elements of the array A such that for each i (1 ≤ i ≤ n), the condition A[i] ≤ B[i] holds. Otherwise, print \\"NO\\". -----Examples----- Input 3 1 2 3 3 2 1 Output YES Input 4 2 3 4 5 1 2 3 4 Output NO -----Note----- In the first example, we can rearrange array A to `[1, 2, 3]`, which satisfies the condition for all i. In the second example, it is impossible to rearrange array A to make the condition hold for all i.","solution":"def can_rearrange_a_to_meet_condition(a, b): Determines if it is possible to rearrange array A such that for each i, A[i] <= B[i]. Parameters: a (list of int): The array A. b (list of int): The array B. Returns: str: \\"YES\\" if the rearrangement is possible, otherwise \\"NO\\". a_sorted = sorted(a) b_sorted = sorted(b) for i in range(len(a_sorted)): if a_sorted[i] > b_sorted[i]: return \\"NO\\" return \\"YES\\""},{"question":"Your task is to implement a **Circular Buffer** that supports the following operations: 1. `append(value)` - Append the value to the buffer. 2. `get(index)` - Retrieve the value at the specified index in the buffer. 3. `remove(index)` - Remove the value at the specified index from the buffer. The buffer should have a fixed capacity, and if the buffer is full, the oldest data in the buffer should be overwritten when new data is appended. If an invalid index is requested for `get` or `remove`, your function should handle it gracefully. # Circular Buffer Specifications: - **Capacity**: The buffer has a fixed maximum size, `n`. - **Overwrite**: When appending a value and the buffer is full, overwrite the oldest value. - **Indexing**: Implement circular indexing for the buffer. # Input/Output Format: **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 100000), representing the capacity of the buffer. - The second line contains an integer `q` (1 ≤ q ≤ 100000), representing the number of operations. - Each of the next `q` lines contains an operation in one of the following formats: - `append x`: Append the value `x` (1 ≤ x ≤ 10^9) to the buffer. - `get i`: Retrieve the value at index `i`. - `remove i`: Remove the value at index `i`. **Output:** - For each `get i` operation, output the value at index `i`. - For each `remove i` operation, if the index is valid, perform the removal silently. If the index is invalid, output `Invalid index`. **Example:** ``` Input: 3 7 append 1 append 2 append 3 append 4 get 0 get 2 remove 1 Output: 2 4 ``` **Explanation:** 1. Initial buffer (capacity 3): [] 2. After `append 1`: [1] 3. After `append 2`: [1, 2] 4. After `append 3`: [1, 2, 3] 5. After `append 4` (overwrites oldest): [4, 2, 3] 6. `get 0`: index 0 points to value 2 7. `get 2`: index 2 points to value 4 8. `remove 1`: removes value at index 1, buffer after removal: [4, 3] # Implementation Notes - Consider using a list to implement the buffer. - Maintain proper indexing for `append`, `get`, and `remove` operations considering the circular nature. - Ensure to handle edge cases where `index` values for `get` and `remove` are out of bounds.","solution":"class CircularBuffer: def __init__(self, capacity): Initializes a circular buffer with a fixed capacity. self.capacity = capacity self.buffer = [None] * capacity self.size = 0 self.start = 0 self.end = 0 def append(self, value): Appends the value to the buffer. If the buffer is full, overwrites the oldest value. if self.size == self.capacity: self.start = (self.start + 1) % self.capacity else: self.size += 1 self.buffer[self.end] = value self.end = (self.end + 1) % self.capacity def get(self, index): Retrieves the value at the specified index. Returns \\"Invalid index\\" if the index is out of bounds. if index < 0 or index >= self.size: return \\"Invalid index\\" actual_index = (self.start + index) % self.capacity return self.buffer[actual_index] def remove(self, index): Removes the value at the specified index from the buffer. Returns \\"Invalid index\\" if the index is out of bounds. if index < 0 or index >= self.size: return \\"Invalid index\\" actual_index = (self.start + index) % self.capacity for i in range(index, self.size - 1): next_index = (self.start + i + 1) % self.capacity self.buffer[(self.start + i) % self.capacity] = self.buffer[next_index] self.buffer[(self.start + self.size - 1) % self.capacity] = None self.end = (self.end - 1 + self.capacity) % self.capacity self.size -= 1 def process_commands(commands, buffer_size): buffer = CircularBuffer(buffer_size) results = [] for command in commands: if command.startswith(\\"append\\"): _, value = command.split() value = int(value) buffer.append(value) elif command.startswith(\\"get\\"): _, index = command.split() index = int(index) results.append(buffer.get(index)) elif command.startswith(\\"remove\\"): _, index = command.split() index = int(index) result = buffer.remove(index) if result == \\"Invalid index\\": results.append(result) return results"},{"question":"You have been hired by a logistics company to design a routing algorithm for their drone delivery system. The drones need to deliver packages in a city represented as a grid of size m x n. Each cell in the grid can either be an open cell, represented by 0, or an obstacle, represented by 1. The drones can only move vertically or horizontally to an adjacent open cell. The company wants to find the shortest path from a starting cell (sx, sy) to a destination cell (dx, dy) in the grid. If no such path exists, the function should return -1. Write a function `shortestPath(m, n, grid, sx, sy, dx, dy)` that returns the length of the shortest path. If no path exists, return -1. # Input - An integer `m`, representing the number of rows in the grid. - An integer `n`, representing the number of columns in the grid. - A 2D list `grid` of size m x n representing the city grid where each cell is either 0 (open) or 1 (obstacle). - Two integers `sx` and `sy`, representing the starting cell coordinates. - Two integers `dx` and `dy`, representing the destination cell coordinates. # Output - An integer representing the length of the shortest path from (sx, sy) to (dx, dy). If no path exists, return -1. # Constraints - 1 ≤ m, n ≤ 100 - 0 ≤ sx, sy, dx, dy < m, n - The starting cell (sx, sy) and the destination cell (dx, dy) are always open cells (0). # Example ```python m = 5 n = 5 grid = [ [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0] ] sx = 0 sy = 0 dx = 4 dy = 4 print(shortestPath(m, n, grid, sx, sy, dx, dy)) # Output: 8 ``` In the example above, the shortest path from the top-left corner (0, 0) to the bottom-right corner (4, 4) has a length of 8.","solution":"from collections import deque def shortestPath(m, n, grid, sx, sy, dx, dy): Finds the shortest path from (sx, sy) to (dx, dy) in a grid with obstacles. Args: m : int : number of rows n : int : number of columns grid : List[List[int]] : 2D grid representing the city sx : int : starting cell\'s x-coordinate sy : int : starting cell\'s y-coordinate dx : int : destination cell\'s x-coordinate dy : int : destination cell\'s y-coordinate Returns: int : the length of the shortest path or -1 if no path exists # Directions array for moving in 4 possible directions (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS, initialized with starting point queue = deque([(sx, sy, 0)]) # (x, y, distance) visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() # Check if we have reached the destination if (x, y) == (dx, dy): return dist # Explore neighbors in 4 possible directions for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # Return -1 if no path was found return -1"},{"question":"You are given a list of integers representing the heights of people standing in a queue. Each person defines the number of people in front of them who are strictly taller. You need to reconstruct the queue based on this information and return the correct order of heights. Each person is represented by a pair of integers (h, k), where h is the height of the person and k is the number of people in front who have a height greater than or equal to h. Write a function that takes an array of (h, k) pairs and returns the reconstructed queue. Examples: Input: [(7, 0), (4, 4), (7, 1), (5, 0), (6, 1), (5, 2)] Output: [(5, 0), (7, 0), (5, 2), (6, 1), (4, 4), (7, 1)] Input: [(6, 0), (5, 0), (4, 0)] Output: [(4, 0), (5, 0), (6, 0)] Input: [] Output: [] Notes: 1. The total number of people is at most 1100. 2. The height of a person is in the range [1, 1000]. 3. The integer k is in the range [0, the number of people].","solution":"def reconstructQueue(people): Reconstructs the queue based on heights and the number of people in front who are taller. Args: people (List[Tuple[int, int]]): A list of tuples (h, k) where h is the height of the person and k is the number of people in front who have a height greater than or equal to h. Returns: List[Tuple[int, int]]: The reconstructed queue. # Sort people by height in descending order. For people with the same height, sort by k in ascending order. people.sort(key=lambda x: (-x[0], x[1])) # Initialize an empty queue queue = [] # Insert each person into the queue using k as the position index. for person in people: queue.insert(person[1], person) return queue"},{"question":"You are given a list of strings representing the names of students who have signed up for a class presentation. Each student may have signed up multiple times, but each student can be represented only once in the final list. Your task is to write a function that takes the list of student names and returns a new list with the duplicated names removed. The names in the returned list should be in the same order as their first appearance in the input list. For example: ``` Input: [\\"Alice\\", \\"Bob\\", \\"Alice\\", \\"Charlie\\", \\"Bob\\"] Output: [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] ``` Implement a function named `remove_duplicates` that achieves this. The function signature should be: ```python def remove_duplicates(names: List[str]) -> List[str]: pass ``` # Constraints: - The length of the input list will not exceed 1000. - The names are case-sensitive (i.e., \\"alice\\" and \\"Alice\\" are considered different names).","solution":"from typing import List def remove_duplicates(names: List[str]) -> List[str]: Takes a list of student names with possible duplicates and returns a new list with duplicates removed. seen = set() result = [] for name in names: if name not in seen: seen.add(name) result.append(name) return result"},{"question":"You are working on a software system for a library and have been tasked with implementing a feature to manage book loans and returns. The library wants an efficient way to track the borrowing and returning of books to ensure no book is double-loaned and to update the system status immediately upon each operation. You need to create a function to simulate this process. You are given a number of books, each identified by a unique integer ID from 1 to N, and a list of operations. Each operation is either a loan or a return of a specific book. You must determine whether each operation can be successfully executed based on the current state of the books. For each operation: - \\"loan x\\" means the book with ID x is being loaned out. This operation can only succeed if the book is currently available. - \\"return x\\" means the book with ID x is being returned. This operation can only succeed if the book is currently loaned out. Your task is to process each operation in the given order and print \\"Success\\" if the operation can be performed or \\"Failure\\" if it cannot. Input: - The first line contains two integers N and M, where N is the number of books and M is the number of operations. - The next M lines each contain either \\"loan x\\" or \\"return x\\", where x is an integer representing the book ID. Output: - For each operation, print \\"Success\\" or \\"Failure\\" based on whether the operation can be executed successfully. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 1000 - 1 ≤ x ≤ N SAMPLE INPUT 3 5 loan 1 loan 2 loan 1 return 2 return 1 SAMPLE OUTPUT Success Success Failure Success Success Explanation: - The first operation loans book 1 successfully. - The second operation loans book 2 successfully. - The third operation fails because book 1 has already been loaned out. - The fourth operation returns book 2 successfully. - The fifth operation returns book 1 successfully.","solution":"def manage_library_operations(N, M, operations): Simulates the process of managing book loans and returns. Parameters: N (int): Number of books. M (int): Number of operations. operations (list of str): List of operations in the format \\"loan x\\" or \\"return x\\". Returns: list of str: List of results for each operation, either \\"Success\\" or \\"Failure\\". book_status = [0] * (N + 1) # 0 means available, 1 means loaned out results = [] for operation in operations: op, x = operation.split() x = int(x) if op == \\"loan\\": if book_status[x] == 0: book_status[x] = 1 results.append(\\"Success\\") else: results.append(\\"Failure\\") elif op == \\"return\\": if book_status[x] == 1: book_status[x] = 0 results.append(\\"Success\\") else: results.append(\\"Failure\\") return results"},{"question":"Amusement Park Rescue Mission The Amusement Park Corporation has built a large amusement park consisting of various attractions connected by walkways. For safety and convenience, they are planning a rescue mission protocol that routes rescue teams efficiently to any distress call location in the park. The amusement park is represented as a graph, where attractions are nodes and walkways are edges with specific lengths. Each walkway has a weight representing the time (in minutes) it takes to walk from one attraction to another. The park has exactly one central command center, which is a special type of attraction where rescue teams are stationed. Your task is to write a program that finds the shortest time it takes for a rescue team to reach any attraction from the central command center. Given a list of attractions and walkways, determine the minimum time required to reach each attraction starting from the command center. Input The input consists of one or more test cases. Each test case starts with a line containing two integers, N and M, where N is the number of attractions (1 ≤ N ≤ 1000) and M is the number of walkways (0 ≤ M ≤ 5000). The attractions are numbered from 1 to N, and the command center is located at attraction number 1. This is followed by M lines, each containing three integers a, b, and t (1 ≤ a, b ≤ N, 1 ≤ t ≤ 100), where a and b are the attractions connected by a walkway and t is the time taken to walk between them. The input ends with a line containing two zeros. Output For each test case, output a single line containing N-1 space-separated integers, where the i-th integer represents the minimum time required to reach attraction i+1 from the command center. If an attraction is unreachable, output -1 for that attraction. Sample Input 5 6 1 2 10 1 3 20 2 4 15 2 3 35 3 5 30 4 5 30 4 2 1 2 5 2 3 10 3 4 5 2 4 15 0 0 Sample Output 10 20 25 55 5 15 20 Explanation In the first test case, starting from attraction 1 (command center): - Attraction 2 can be reached in 10 minutes. - Attraction 3 can be reached in 20 minutes. - Attraction 4 can be reached via Attraction 2 in 10 + 15 = 25 minutes. - Attraction 5 can be reached via Attraction 3 in 20 + 30 = 50 minutes (Another possible path via 4 takes 10 + 15 + 30 = 55 minutes which is longer). In the second test case, starting from attraction 1 (command center): - Attraction 2 can be reached in 5 minutes. - Attraction 3 can be reached in 5 + 10 = 15 minutes. - Attraction 4 can be reached via Attraction 2 in 5 + 15 = 20 minutes (another possible path via 3 takes 5 + 10 + 5 = 20 minutes which is equal). Use Dijkstra\'s algorithm or any shortest path algorithm to solve this problem efficiently due to the potentially large input size.","solution":"import heapq import sys INF = float(\'inf\') def dijkstra(n, graph): Computes the shortest time required to reach each attraction from the command center using Dijkstra\'s algorithm. Parameters: n (int): Number of attractions graph (dict): Adjacency list representation of graph where key is the node and value is a list of tuples (neighbor, weight) Returns: list: Shortest time to each attraction from the command center. dist = [INF] * (n + 1) dist[1] = 0 priority_queue = [(0, 1)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for neighbor, weight in graph[u]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return dist[1:] def amusement_park_rescue(test_cases): results = [] for n, m, edges in test_cases: if n == 0 and m == 0: break graph = {i: [] for i in range(1, n + 1)} for a, b, t in edges: graph[a].append((b, t)) graph[b].append((a, t)) shortest_distances = dijkstra(n, graph) result = [] for dist in shortest_distances[1:]: if dist == INF: result.append(-1) else: result.append(dist) results.append(result) return results"},{"question":"Problem Statement You are given a list of N positive integers representing the heights of N trees. Each tree needs to be cut down to the nearest even height that is less than or equal to its current height. If a tree height is already even, it remains unchanged. Once the trees are cut down, your goal is to find how many of the trees have the same height. You need to then determine the maximum number of trees with the same height. Write a program that reads input of N integer heights, modifies each height to the nearest even height (less than or equal to the original height), and then computes the number of trees with the maximum same height. Constraints * 1 ≤ N ≤ 100 * 1 ≤ height ≤ 1000 Input - The first line contains an integer N, the number of trees. - The second line contains N positive integers separated by spaces, representing the heights of the trees. Output Output a single integer, the maximum number of trees that have the same height after cutting them down to the nearest even height. Examples Input 5 4 3 7 8 9 Output 2 Input 6 10 15 10 14 13 18 Output 2 Input 4 5 7 11 13 Output 1","solution":"def max_same_height_trees(N, heights): Returns the maximum number of trees with the same height after cutting them down to the nearest even height. Parameters: N (int): The number of trees heights (list of int): The heights of the trees Returns: int: The maximum number of trees with the same height cut_heights = [h if h % 2 == 0 else h - 1 for h in heights] height_count = {} for height in cut_heights: if height in height_count: height_count[height] += 1 else: height_count[height] = 1 return max(height_count.values())"},{"question":"```python find_outlier(integers) ``` that given an array of integers, finds out the single integer which is either the only even or the only odd number in the array. For example: ```python find_outlier([2, 4, 6, 8, 10, 3]) == 3 find_outlier([1, 3, 5, 7, 9, 2]) == 2 find_outlier([2, 4, 10, 8, 1]) == 1 find_outlier([7, 5, 33, 17, 4]) == 4 ```","solution":"def find_outlier(integers): Finds the single integer that is either the only even or the only odd number in the array. evens = [x for x in integers if x % 2 == 0] odds = [x for x in integers if x % 2 != 0] return evens[0] if len(evens) == 1 else odds[0]"},{"question":"Given an input list of integers, return the list in the output such that each even number is followed by its double and each odd number is followed by its triple. All numbers must maintain their original order. Input Input list of integers Output Output list of integers Example Input: [1, 2, 3, 4, 5] Output: [1, 3, 2, 4, 3, 9, 4, 8, 5, 15] Input: [10, 15, 20] Output: [10, 20, 15, 45, 20, 40]","solution":"def transform_list(nums): Given a list of integers, transform it such that each even number is followed by its double and each odd number is followed by its triple. result = [] for num in nums: result.append(num) if num % 2 == 0: result.append(num * 2) else: result.append(num * 3) return result"},{"question":"Your task is to write a program that processes a list of commands to manipulate a set of integers. * The commands are ADD, REMOVE, CHECK, TOGGLE, and ALL, each followed by an integer x where 1 ≤ x ≤ 100, except for the command ALL, which has no integer following it. * ADD x: Add integer x to the set. If x is already in the set, do nothing. * REMOVE x: Remove integer x from the set. If x is not in the set, do nothing. * CHECK x: Check if integer x is in the set. Print \\"1\\" if it is in the set, otherwise print \\"0\\". * TOGGLE x: If integer x is in the set, remove it; otherwise, add it. * ALL: Add all integers from 1 to 100 to the set. * The input consists of an integer m, which represents the number of commands. Each command and its associated integer (if applicable) is given in one line. * The output should be the results of the CHECK commands, printed in the order they appear in the input. Example Input 8 ADD 5 ADD 10 CHECK 5 CHECK 10 REMOVE 10 CHECK 10 TOGGLE 5 CHECK 5 Output 1 1 0 0","solution":"def process_commands(m, commands): Processes a list of commands that manipulate a set of integers. m: int - Number of commands commands: list - A list of commands. result = [] int_set = set() for command in commands: if command.startswith(\\"ADD\\"): _, x = command.split() int_set.add(int(x)) elif command.startswith(\\"REMOVE\\"): _, x = command.split() int_set.discard(int(x)) elif command.startswith(\\"CHECK\\"): _, x = command.split() result.append(\\"1\\" if int(x) in int_set else \\"0\\") elif command.startswith(\\"TOGGLE\\"): _, x = command.split() x = int(x) if x in int_set: int_set.remove(x) else: int_set.add(x) elif command == \\"ALL\\": int_set = set(range(1, 101)) return result"},{"question":"A team of software developers is working on a project with a specific style guide for variable names. The style guide has the following rules: 1. Variable names should be in CamelCase. 2. All variable names must start with a lowercase letter. 3. Each subsequent word in the variable name must begin with an uppercase letter. Given a snake_case variable name, convert it to CamelCase following the above style guide rules. Input Format The first line consists of a single integer N. The next N lines contain a single string S in each line, representing a variable name in snake_case format. Output Format For each string S, output a single line containing the variable name in CamelCase format. Constraints 1 ≤ N ≤ 100 1 ≤ |S| ≤ 100 S contains only lowercase English letters and underscores. SAMPLE INPUT 3 hello_world this_is_camel_case convert_to_camel_case SAMPLE OUTPUT helloWorld thisIsCamelCase convertToCamelCase","solution":"def snake_to_camel(snake_str): Converts a snake_case variable name to CamelCase following the specific style guide rules. components = snake_str.split(\'_\') return components[0] + \'\'.join(x.title() for x in components[1:]) def convert_snake_to_camel(n, variable_names): camel_case_names = [] for snake_str in variable_names: camel_case_names.append(snake_to_camel(snake_str)) return camel_case_names"},{"question":"Problem You are given a grid of size W x H. Each cell in the grid can either be in state 0 (empty) or in state 1 (filled). Initially, all cells are in state 0. You will be provided with N operations. Each operation consists of four integers ax, ay, bx, by, representing the coordinates of a rectangular subgrid. For each operation, set all cells within the rectangle to state 1. Your task is to determine the number of cells that are changed to state 1 for each of the N operations. Constraints * 2 ≤ W ≤ 100000 * 2 ≤ H ≤ 100000 * 2 ≤ N ≤ 100000 * 1 ≤ ax ≤ bx ≤ W (1 ≤ i ≤ N) * 1 ≤ ay ≤ by ≤ H (1 ≤ i ≤ N) Input The input is given in the following format. W H N ax1 ay1 bx1 by1 ax2 ay2 bx2 by2 ... axN ayN bxN byN On the first line, two integers W and H are given, separated by spaces. The second line contains one integer N. The following N lines each contain four integers ax, ay, bx, and by, describing a rectangular area in the grid. Output For each of the N operations, output the number of cells that were newly changed to state 1. Example Input 5 4 3 1 1 3 3 2 2 5 4 4 1 5 2 Output 9 8 2","solution":"def grid_operations(W, H, N, operations): grid = [[0]*H for _ in range(W)] result = [] for ax, ay, bx, by in operations: count = 0 for x in range(ax-1, bx): for y in range(ay-1, by): if grid[x][y] == 0: grid[x][y] = 1 count += 1 result.append(count) return result"},{"question":"Given N, print the sequence of the first N numbers in the Fibonacci series. ------ Input Format ------ - The first line of input will contain a single integer T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, containing one integer N. ------ Output Format ------ For each test case, print a single line containing the first N numbers in the Fibonacci series separated by spaces. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 20 ----- Sample Input 1 ------ 3 1 2 5 ----- Sample Output 1 ------ 0 0 1 0 1 1 2 3 ----- Explanation 1 ------ Test case 1: Only the first number of the Fibonacci series is required, and it is 0. Test case 2: The first two numbers of the Fibonacci series are required, which are 0 and 1. Test case 3: The first five numbers of the Fibonacci series are required, which are 0, 1, 1, 2, and 3.","solution":"def fibonacci_sequence(n): Returns the first n numbers of the Fibonacci series. if n == 1: return [0] fibs = [0, 1] while len(fibs) < n: fibs.append(fibs[-1] + fibs[-2]) return fibs def solve_fibonacci_sequences(test_cases): Solves the Fibonacci sequences for each given test case. results = [] for n in test_cases: results.append(\\" \\".join(map(str, fibonacci_sequence(n)))) return results def main(input_lines): Main function to process input and produce the required output. T = int(input_lines[0]) test_cases = [int(input_lines[i]) for i in range(1, T + 1)] results = solve_fibonacci_sequences(test_cases) for result in results: print(result)"},{"question":"Task: Write a function that takes a string consisting of lowercase letters and returns the longest contiguous substring with all unique characters. For example: - Input: `\\"abcabcbb\\"` - Output: `\\"abc\\"` - Input: `\\"bbbbb\\"` - Output: `\\"b\\"` - Input: `\\"pwwkew\\"` - Output: `\\"wke\\"` Your function should handle the smallest input strings such as: - Input: `\\"a\\"` - Output: `\\"a\\"`","solution":"def longest_unique_substring(s): Returns the longest contiguous substring with all unique characters from the given string s. if not s: return \\"\\" start, max_start, max_length = 0, 0, 0 char_map = {} for end, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = end current_length = end - start + 1 if current_length > max_length: max_length = current_length max_start = start return s[max_start:max_start + max_length]"},{"question":"Eliza and Bob are playing a new game with two piles of stones. The game starts with Eliza choosing a pile and removing any non-zero number of stones from it. Bob then chooses one of the remaining piles (which can be the same pile) and can remove any non-zero number of stones from it. They alternate turns and must always take stones from some pile during their turn. The player who cannot make a move (because no stones are left in either pile) loses. Assuming both players play optimally, your task is to determine who will win. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line of input containing two space-separated integers A and B representing the initial number of stones in the two piles. -----Output----- For each test case, output a single line containing either “Eliza” or “Bob” (without quotes), denoting the winner of the game. -----Constraints----- - 1 ≤ T ≤ 100 - 0 ≤ A, B ≤ 10^9 -----Example----- Input: 3 2 3 1 0 4 4 Output: Eliza Eliza Bob -----Explanation----- Example case 1. In this test case, the stones in the piles are 2 and 3. Eliza can always make a move that forces Bob to lose eventually. Example case 2. In this test case, there is only one pile with stones, and it is Eliza\'s turn first. She can remove the 1 stone and leave Bob with nothing to remove, winning the game. Example case 3. In this test case, the stones in the piles are equal (4, 4). Bob wins because any move by Eliza will leave an unequal number of stones, and Bob can always counter optimally to force a win.","solution":"def find_winner(piles): Determines the winner of the game given the initial piles of stones. Eliza wins if the piles are not equal; Bob wins if they are equal. winners = [] for a, b in piles: if a == b: winners.append(\\"Bob\\") else: winners.append(\\"Eliza\\") return winners"},{"question":"In an online store, users can search for products using a search text. The search mechanism supports partial text matching, which means if the search text is a substring of a product name, then that product is considered a match. Given a list of product names and a search text, your task is to find and return all product names that match the search text. Output the product names in the order they appear in the input. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of products. The following n lines each contain a single product name, where each name is a string containing between 1 and 50 characters (inclusive). The last line contains the search text, which is a string containing between 1 and 50 characters (inclusive). -----Output----- Output all the product names that match the search text, each on a new line. If no products match, output \\"NO MATCH\\". -----Example----- Input 5 apple apricot banana grape pineapple app Output apple pineapple Input 6 dog cat bird fish hamster parrot zebra Output NO MATCH","solution":"def search_products_with_text(products, search_text): Returns a list of product names that contain the search text as a substring. matched_products = [product for product in products if search_text in product] return matched_products if matched_products else [\\"NO MATCH\\"]"},{"question":"Implement a function `longest_substring` that takes a single string `s` as input and returns the length of the longest substring without repeating characters. **Input:** - A single string `s`, consisting of lower and upper case English letters. **Output:** - An integer representing the length of the longest substring without repeating characters. **Example:** ```python assert longest_substring(\\"abcabcbb\\") == 3 # \\"abc\\" assert longest_substring(\\"bbbbb\\") == 1 # \\"b\\" assert longest_substring(\\"pwwkew\\") == 3 # \\"wke\\" ``` **Constraints:** - The length of `s` will not exceed 10,000.","solution":"def longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_index = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a list of N non-negative integers. You need to perform exactly K operations on this list. In each operation, you must select two distinct integers A and B, which both must be equal to or greater than 1, and replace them with the integer (A + B). You cannot select the same integer twice in one operation. Find out the minimum possible number of integers remaining in the list after performing all K operations. Constraints * 2 ≤ N ≤ 10^5 * 1 ≤ K ≤ N - 1 * 0 ≤ Ai ≤ 10^4 for all integers in the list. * All values in input are integers. Input Input is given from Standard Input in the following format: N K A_1 A_2 ... A_N Output Print the minimum possible number of integers remaining in the list after performing exactly K operations. Examples Input 5 2 1 2 3 4 5 Output 4 Input 4 1 2 2 2 2 Output 3 Input 6 3 0 0 1 1 1 1 Output 3","solution":"def min_remaining_after_operations(N, K, A): # Filter out values greater than or equal to 1 non_zero_count = sum(1 for x in A if x >= 1) # Minimum remaining elements after K operations return N - K if K < non_zero_count else N - non_zero_count"},{"question":"You are given an array of integers. Determine if there exists a sub-sequence of the array whose sum is a prime number. Input: The first line contains a single integer N, the number of elements in the array. The next line contains N space-separated integers denoting the elements of the array. Output: Print \\"YES\\" if there exists a sub-sequence with a prime sum, otherwise print \\"NO\\". Constraints: 1 ≤ N ≤ 100, 1 ≤ A[i] ≤ 50 SAMPLE INPUT 3 1 3 4 SAMPLE OUTPUT YES Explanation: One such subsequence is {1, 3}, whose sum is 4, and 4 is not a prime number. But there is another subsequence {3} whose sum is 3, and 3 is a prime number. Hence, the answer is YES.","solution":"from itertools import combinations def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def has_prime_sum_subsequence(n, arr): for r in range(1, n + 1): for subseq in combinations(arr, r): if is_prime(sum(subseq)): return \\"YES\\" return \\"NO\\""},{"question":"**Task: Network Data Analysis** A network monitoring tool captures data packets in the network and stores some attributes of each packet in a list. Each packet is stored as a tuple (timestamp, source_ip, destination_ip, size) where: - `timestamp` is the time at which the packet was captured, formatted as \\"YYYY-MM-DD hh:mm:ss\\". - `source_ip` is the IP address of the packet\'s source. - `destination_ip` is the IP address of the packet\'s destination. - `size` is the size of the packet in bytes. Your task is to write a program that processes this log of data packets and provides the following information: 1. The total number of packets captured. 2. The biggest packet (in terms of size) in the log with its information. 3. The source IP that sent the most data (in terms of bytes) within a specified time range. # Input - The first line of the input contains an integer n (1 ≤ n ≤ 100000) — the number of packets logged. - The next n lines each contain a string `timestamp`, a string `source_ip`, a string `destination_ip`, and an integer `size` separated by spaces, representing a data packet. - The last line contains two timestamps `start_time` and `end_time` which delineate the time range for analyzing the source IP that sent the most data. The timestamps are inclusive and formatted as \\"YYYY-MM-DD hh:mm:ss\\". # Output - Print the total number of packets. - Print the information of the biggest packet as \\"timestamp source_ip destination_ip size\\". If there are multiple packets with the same size, print the first one encountered. - Print the source IP that sent the most data within the specified time range. If there is a tie, print any one of the top sources. # Example Input ``` 5 2023-10-01 12:30:45 192.168.1.1 10.0.0.2 1500 2023-10-01 12:31:47 192.168.1.2 10.0.0.3 1700 2023-10-01 12:32:50 192.168.1.1 10.0.0.4 2000 2023-10-01 12:33:55 192.168.1.3 10.0.0.1 500 2023-10-01 12:34:00 192.168.1.2 10.0.0.2 2000 2023-10-01 12:30:00 2023-10-01 12:35:00 ``` Output ``` 5 2023-10-01 12:32:50 192.168.1.1 10.0.0.4 2000 192.168.1.2 ``` # Notes - Ensure that the program can handle ties and edge cases appropriately. - Consider the efficiency of the implementation as n can be large (up to 100000 entries).","solution":"from datetime import datetime def process_packets(n, packets, start_time, end_time): total_packets = n # Convert start_time and end_time to datetime objects for comparison start_time = datetime.strptime(start_time, \\"%Y-%m-%d %H:%M:%S\\") end_time = datetime.strptime(end_time, \\"%Y-%m-%d %H:%M:%S\\") biggest_packet = None source_data_usage = {} for packet in packets: timestamp, source_ip, destination_ip, size = packet size = int(size) timestamp_dt = datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") # Find the biggest packet if biggest_packet is None or size > biggest_packet[3]: biggest_packet = (timestamp, source_ip, destination_ip, size) # Calculate data usage for source_ip within the time range if start_time <= timestamp_dt <= end_time: if source_ip not in source_data_usage: source_data_usage[source_ip] = 0 source_data_usage[source_ip] += size # Find the source IP that sent the most data within the given time range max_data_ip = max(source_data_usage, key=source_data_usage.get, default=\\"\\") return total_packets, biggest_packet, max_data_ip"},{"question":"The city of Technoville is planning a new subway system. The city has N stations, each connected by M two-way tracks. The city engineers are interested in ensuring that every station is reachable from any other station with the minimum amount of track constructions. Here’s the challenge: - Given N stations and M tracks that directly connect these stations, determine the minimum number of tracks that need to be added so that there is a path between every pair of stations. Input Format: - The first line contains an integer T denoting the number of test cases. - Each test case starts with two space-separated integers N and M. - The following M lines each contain two space-separated integers X and Y, indicating that there is a direct track between stations X and Y. Output Format: - For each test case, print a single integer representing the minimum number of tracks to be added. Constraints: - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 1000 - 0 ≤ M ≤ N*(N-1)/2 - 1 ≤ X, Y ≤ N - No duplicated tracks. SAMPLE INPUT 2 4 2 1 2 3 4 5 3 1 2 2 3 4 5 SAMPLE OUTPUT 1 1 Explanation: In the first test case, the city has 4 stations and 2 tracks connecting stations {1, 2} and {3, 4}. By adding just one track, say between station 1 and station 3, every station is now reachable from any other station. In the second test case, there are 5 stations and 3 tracks connecting {1, 2}, {2, 3}, and {4, 5}. By adding one track between station 3 and station 4, all stations become connected.","solution":"def min_tracks_to_add(T, test_cases): def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 results = [] for i in range(T): N, M, connections = test_cases[i] parent = list(range(N+1)) rank = [0] * (N+1) for x, y in connections: union(parent, rank, x, y) unique_parents = len(set(find(parent, i) for i in range(1, N+1))) results.append(unique_parents - 1) return results"},{"question":"Alice and Bob love playing games that involve numbers. Recently, they came up with a game that involves permutations of a given integer. In this game, the goal is to find the smallest permutation of the given integer that is larger than the original integer. If no such permutation exists, they have to start all over again with a new integer. You have been asked to simulate this game. For each given integer, you need to determine the smallest permutation that is larger than the original integer. If such a permutation does not exist, return -1. To help Alice and Bob, write a function `next_permutation(n: int) -> int` that receives a positive integer and returns the smallest permutation that is larger than the given integer, or -1 if no such permutation exists. # Input - An integer `n` where 1 ≤ n ≤ 10^6. # Output - The smallest permutation of `n` that is larger than `n`, or -1 if no such permutation exists. # Examples Example 1: Input: 123 Output: 132 Explanation: The next permutation of 123 is 132. Example 2: Input: 321 Output: -1 Explanation: No permutation of 321 is larger than 321, hence -1. Example 3: Input: 115 Output: 151 Explanation: The next permutation of 115 is 151. Example 4: Input: 534976 Output: 536479 Explanation: The next permutation of 534976 is 536479. # Constraints - 1 ≤ n ≤ 10^6 Use the following steps to implement the function: 1. Identify the rightmost digit that can be increased by swapping it with a larger digit to its right. 2. Swap this digit with the smallest larger digit to its right. 3. Sort the digits to the right of the swapped digit to form the smallest possible number. Implement the function using Python and ensure it passes all the given examples.","solution":"def next_permutation(n: int) -> int: Returns the smallest permutation of n that is larger than n. If no such permutation exists, returns -1. digits = list(str(n)) length = len(digits) # Step 1: Find the rightmost digit that can be increased i = length - 2 while i >= 0 and digits[i] >= digits[i + 1]: i -= 1 if i == -1: return -1 # Step 2: Find the smallest larger digit to the right of digits[i] and swap j = length - 1 while digits[j] <= digits[i]: j -= 1 digits[i], digits[j] = digits[j], digits[i] # Step 3: Sort the digits to the right of the swapped digit digits[i + 1:] = sorted(digits[i + 1:]) return int(\'\'.join(digits))"},{"question":"Given an array of integers sorted in non-decreasing order, the task is to find if there exists a pair of elements such that their sum is equal to a given target number. Example: Input: Array = [-10, -3, 0, 2, 5, 9, 11] Target = 7 Output: True Explanation: There is a pair (2, 5) whose sum is 7. Your Task: Your task is to complete the given function `hasPairWithSum()`, which takes an array and target as input and returns a boolean value `True` if there exists at least one pair of elements whose sum is equal to the given target, else `False`. Constraints: - 1 <= Array length <= 10^5 - -10^5 <= Array elements <= 10^5 - -10^5 <= Target <= 10^5 Expected Time Complexity: O(n) Expected Space Complexity: O(1)","solution":"def hasPairWithSum(arr, target): Determines if there is a pair of numbers in the sorted array `arr` whose sum is equal to `target`. :param arr: List of sorted integers :param target: Integer target sum :return: Boolean indicating the presence of a pair with the target sum left, right = 0, len(arr) - 1 while left < right: current_sum = arr[left] + arr[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Problem Johnny is an avid photographer and he decided to make a photo collage by selecting photos from his collection. He has set a goal to include at least one photo from each subject category he loves. Each photo belongs to one of several distinct subjects, like nature, architecture, wildlife, etc. Given his love for diversity, he wants to select the smallest number of photos that cover all the subject categories at least once. The collection has n photos and there are m distinct subjects. Each of the n photos is tagged with one of these m subjects. The problem is to determine the minimum size of a subset of the photos such that every subject is represented at least once. Constraints * 1 ≤ n ≤ 100 * 1 ≤ m ≤ 20 Input The input is given in the following format: ``` n m subject_1 subject_2 ... subject_n ``` The first line contains two integers n (the number of photos) and m (the number of distinct subjects). Each of the following n lines contains the subject category of the corresponding photo. Output Output the minimum number of photos needed to cover all m subjects at least once. Examples Input ``` 6 3 nature architecture wildlife nature wildlife architecture ``` Output ``` 3 ``` Input ``` 5 2 wildlife architecture architecture wildlife wildlife ``` Output ``` 2 ``` Input ``` 8 4 nature architecture wildlife portrait nature portrait wildlife architecture ``` Output ``` 4 ```","solution":"def min_photos_needed(n, m, subjects): Returns the minimum number of photos needed to cover all m subjects at least once. :param n: Number of photos :param m: Number of distinct subjects :param subjects: List of subject categories corresponding to each photo :return: Minimum number of photos needed to cover all subjects subject_set = set(subjects) return len(subject_set)"},{"question":"In a far-off kingdom, there are \\"N\\" annual festivals arranged in a series of non-decreasing timestamps from 1 to N. The Great Jester of the kingdom has the magical ability to entertain such that between any two festivals, the total joy received is the product of the timestamps for those two festivals. You are tasked to calculate the maximum possible joy the kingdom can get by choosing exactly two distinct festivals for entertainment. Given the timestamps, find the maximum possible product of any two distinct timestamps. Input The first line contains an integer T (number of test cases). For each test case, the first line contains an integer N (number of festivals). The second line contains N space-separated integers representing the timestamps of the festivals. Output For each test case, output the maximum product of any two distinct timestamps. Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 10^5 1 ≤ timestamp ≤ 10^9 SAMPLE INPUT 2 5 1 2 3 4 5 4 6 7 8 9 SAMPLE OUTPUT 20 72","solution":"def max_festival_joy(T, test_cases): results = [] for test_case in test_cases: N, timestamps = test_case if N < 2: results.append(0) continue timestamps.sort() # The maximum product of any two distinct values will be with the two largest numbers max_product = timestamps[-1] * timestamps[-2] results.append(max_product) return results"},{"question":"Write a function that takes an array of numbers as input and returns a new array where each number is replaced by the sum of that number and its neighboring numbers (the previous and next numbers in the original array). For the first and last element, consider only one neighbor. For example, given the input array [1, 2, 3, 4], the output should be [3, 6, 9, 7] because: - The first element (1) is replaced by 1 + 2 = 3. - The second element (2) is replaced by 1 + 2 + 3 = 6. - The third element (3) is replaced by 2 + 3 + 4 = 9. - The fourth element (4) is replaced by 3 + 4 = 7.","solution":"def sum_with_neighbors(arr): Given an array of numbers, return a new array where each number is replaced by the sum of that number and its neighboring numbers. For the first and last element, consider only one neighbor. if len(arr) == 0: return [] if len(arr) == 1: return arr n = len(arr) result = [0] * n # Initialize the result array with zeros for i in range(n): if i == 0: result[i] = arr[i] + arr[i + 1] elif i == n - 1: result[i] = arr[i] + arr[i - 1] else: result[i] = arr[i - 1] + arr[i] + arr[i + 1] return result"},{"question":"In a futuristic city, there are n smart houses arranged in a straight line, each house being assigned a unique ID from 1 to n. These houses are equipped with advanced security systems and are connected through a central control server. However, due to a recent surge in hacking attempts, the security system has been modified to allow control only if a specific pattern or series of houses is activated. The pattern consists of non-repeating consecutive houses. Your task is to find the number of possible patterns of length k that can be activated in such a line of houses. The pattern must start from any house and can consist of consecutive houses moving to the end of the line. Input The input consists of two integers n (1 ≤ n ≤ 10000) representing the number of houses and k (1 ≤ k ≤ n) representing the length of the pattern. Output Output a single integer, the number of possible patterns of length k. Examples Input 5 2 Output 4 Input 10 5 Output 6","solution":"def count_patterns(n, k): Returns the count of non-repeating consecutive patterns of length k in n houses. if k > n: return 0 return n - k + 1"},{"question":"In a town, there are n houses connected by a network of m bidirectional roads. Each road has a length, given in units, representing the travel distance between two houses. The mayor of the town wants to install street lights on the shortest paths between all pairs of houses to enhance the town\'s safety. To minimize costs, the mayor decides to install street lights only on the set of roads that are part of the minimum spanning tree (MST) of the network. Write a program to help the mayor find the total length of these roads (i.e., the sum of the lengths of the roads in the MST). -----Input----- The first line contains two integers n (2 ≤ n ≤ 100) and m (1 ≤ m ≤ 4950) — the number of houses and roads in the town, respectively. The next m lines describe each road with three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000), which means there is a road connecting house u and house v with length w. -----Output----- Print a single integer — the total length of the roads that are part of the minimum spanning tree. -----Examples----- Input 4 5 1 2 1 1 3 4 2 3 2 2 4 3 3 4 5 Output 6 Input 3 3 1 2 5 2 3 6 1 3 2 Output 7 -----Note----- In the first sample, the MST includes the roads with lengths 1, 2, and 3, summing up to 6 (1+2+3=6). In the second sample, the MST includes the roads with lengths 2 and 5, summing up to 7 (2+5=7).","solution":"def find_mst_total_length(n, m, roads): parent = list(range(n)) def find(x): if parent[x] == x: return x parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY roads.sort(key=lambda x: x[2]) total_length = 0 for u, v, w in roads: if find(u - 1) != find(v - 1): # Houses are 1-indexed in input but need 0-index methodology for union-find union(u - 1, v - 1) total_length += w return total_length"},{"question":"Given an undirected graph with `n` nodes and `m` edges, determine whether the graph is a tree. A graph is a tree if it is connected (there is a path between every pair of nodes) and acyclic (contains no cycles). Input: - The first line contains two integers `n` and `m`: the number of nodes and the number of edges, respectively. - The next `m` lines each contain two integers `u` and `v`: indicating an edge between nodes `u` and `v`. Output: - Print \\"YES\\" if the graph is a tree, otherwise print \\"NO\\". Constraints: - 1 ≤ n ≤ 10^5 - 0 ≤ m ≤ 10^5 - 1 ≤ u, v ≤ n Example 1: Input: 4 3 1 2 2 3 3 4 Output: YES Example 2: Input: 4 4 1 2 2 3 3 4 4 2 Output: NO","solution":"def is_tree(n, m, edges): from collections import defaultdict, deque if m != n - 1: return \\"NO\\" graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) queue = deque([1]) visited[1] = True visited_count = 0 while queue: node = queue.popleft() visited_count += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return \\"YES\\" if visited_count == n else \\"NO\\""},{"question":"You are given two strings, `s1` and `s2`, each consisting of lowercase English letters. You want to perform the following operation on these strings zero or more times: Choose two characters `c1` and `c2` such that both `c1` and `c2` appear at least once in both `s1` and `s2`. Exchange all occurrences of `c1` with `c2` in both strings. Your goal is to determine if it is possible to make `s1` and `s2` equal using the allowed operations. ------ Input ------ The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines: - The first line contains the string `s1`. - The second line contains the string `s2`. ------ Output ------ For each test case, output \\"YES\\" if it is possible to make `s1` and `s2` equal using the allowed operations, or \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |s1|, |s2| ≤ 10^5 Strings consist of lowercase English letters only. ------ Example Input ------ 3 abcde ebcda aaa aaa abc def ------ Example Output ------ YES YES NO ------ Explanation ------ For the first test case, you can swap the occurrences of \'a\' and \'e\' to make `s1 = \\"ebcda\\"` and `s2 = \\"ebcda\\"`. For the second test case, `s1` is already equal to `s2`. For the third test case, there are no common characters that can be used for swapping, so it\'s impossible to make `s1` and `s2` equal.","solution":"def can_make_equal(T, test_cases): results = [] for i in range(T): s1, s2 = test_cases[i] if sorted(s1) == sorted(s2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage of the function T = 3 test_cases = [(\\"abcde\\", \\"ebcda\\"), (\\"aaa\\", \\"aaa\\"), (\\"abc\\", \\"def\\")] print(can_make_equal(T, test_cases)) # Output should be [\'YES\', \'YES\', \'NO\']"},{"question":"You are given a list of N integers and Q queries of the following types: 1 i x: Update the value of the ith element in the list to x. 2 L R: Determine the maximum product of three different elements in the subarray from L to R (both inclusive). If the subarray has fewer than three elements, return -1. Write a program to process these queries. Input The first line contains an integer N. The second line contains N integers denoting the initial list. The third line contains an integer Q. The next Q lines each contain a query of one of the two types described above. Output For each query of type 2, output the maximum product of three different elements in the specified subarray, or -1 if the subarray has fewer than three elements. Constraints 1 ≤ N ≤ 10^4 -10^4 ≤ list[i] ≤ 10^4 1 ≤ Q ≤ 10^4 1 ≤ L ≤ R ≤ N 1 ≤ i ≤ N -10^4 ≤ x ≤ 10^4 SAMPLE INPUT 6 3 1 4 1 5 9 5 2 1 6 1 2 -3 2 1 6 1 6 2 2 1 6 SAMPLE OUTPUT 180 180 60 Explanation: Initially, the array is [3, 1, 4, 1, 5, 9]. In the first query, you need to compute the maximum product of any three elements from the entire array: 3 * 5 * 9 = 135, 3 * 1 * 9 = 27, etc. The highest product is 3 * 5 * 9 = 135. In the second query, you update the second element to -3, so the array becomes [3, -3, 4, 1, 5, 9]. In the third query, recompute the maximum product for the updated array: 3 * 5 * 9 = 135. In the fourth query, update the last element to 2, so the array becomes [3, -3, 4, 1, 5, 2]. Finally, recompute the maximum product for the new array: 3 * 4 * 5 = 60.","solution":"def max_product_of_three(arr): Helper function to calculate the maximum product of three numbers in a list. If the list has fewer than 3 numbers, returns -1. if len(arr) < 3: return -1 arr.sort() return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]) def process_queries(N, arr, queries): results = [] for query in queries: if query[0] == 1: _, i, x = query arr[i-1] = x # Update the list elif query[0] == 2: _, L, R = query subarray = arr[L-1:R] # Get the subarray results.append(max_product_of_three(subarray)) return results"},{"question":"You are given a list of n integers. Your task is to reorder it into a permutation such that after reordering, for every position i (1-based index) in the new list, the greatest common divisor (GCD) of the number at position i and the number at position i + 1 is greater than 1. If no such reordering is possible, print \\"NO\\". Otherwise, print \\"YES\\", followed by the reordered list. -----Input----- The first line contains an integer n (2 le n le 2 cdot 10^5) — the number of elements in the list. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the list. -----Output----- If it\'s impossible to reorder the list to satisfy the condition, print \\"NO\\". Otherwise, print \\"YES\\", and on the next line, print a permutation of the list that satisfies the condition. -----Example----- Input 4 4 6 2 3 Output YES 4 2 6 3 Input 3 2 5 7 Output NO -----Note----- In the first example, one valid permutation of the list is [4, 2, 6, 3], as GCD(4, 2) > 1, GCD(2, 6) > 1, and GCD(6, 3) > 1. In the second example, there is no way to reorder the list so that every consecutive pair of numbers has a GCD greater than 1.","solution":"from math import gcd from itertools import permutations def gcd_pair(a, b): Helper function to check gcd > 1 for a pair return gcd(a, b) > 1 def reorder_list(n, lst): Reorder list such that every consecutive pair of numbers has a GCD > 1 for perm in permutations(lst): valid = True for i in range(1, n): if not gcd_pair(perm[i-1], perm[i]): valid = False break if valid: return \\"YES\\", perm return \\"NO\\", [] # Function to facilitate the direct response as specified in the problem statement def list_reorder_response(n, lst): result, perm = reorder_list(n, lst) if result == \\"NO\\": return \\"NO\\" else: return \\"YESn\\" + \' \'.join(map(str, perm))"},{"question":"Given a binary tree, return the level order traversal of its nodes\' values as an array of arrays. (i.e., from left to right, level by level). Example 1: Input: ```plaintext 3 / 9 20 / 15 7 ``` Output: [[3], [9,20], [15,7]] Example 2: Input: ```plaintext 1 / 2 3 / 4 5 ``` Output: [[1], [2,3], [4,5]] Notes: The number of nodes in the tree is in the range [0, 2000]. -1000 <= Node.val <= 1000.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_traversal(root): Perform level order traversal on a binary tree and return the values of the nodes level by level as an array of arrays. :param root: TreeNode, the root of the binary tree :return: List[List[int]], the level order traversal of the nodes\' values if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level = [] for _ in range(level_size): node = queue.popleft() level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level) return result"},{"question":"You are given an array of non-negative integers and a target sum, and you need to determine if there exists a combination of numbers in the array (each number can be used unlimited times) that adds up exactly to the target sum. If such a combination exists, return `true`; otherwise, return `false`. Constraints: - The array will contain at most 100 distinct integers. - Each integer in the array will be between 0 and 10,000. - The target sum will be between 0 and 10,000. Input Format: - The first line contains an integer `n`, the size of the array. - The second line contains `n` space-separated integers, representing the elements of the array. - The third line contains a single integer, the target sum. Output Format: - Print `true` if a combination exists, otherwise print `false`. Sample Input: ``` 4 2 3 7 8 11 ``` Sample Output: ``` true ``` Explanation: There exists a combination (3+8) that adds up to 11, hence the output is `true`. Sample Input 2: ``` 4 2 3 7 8 5 ``` Sample Output 2: ``` true ``` Explanation: There exists a combination (2+3) that adds up to 5, hence the output is `true`. Sample Input 3: ``` 4 2 3 7 8 1 ``` Sample Output 3: ``` false ``` Explanation: No combination of the numbers in the array can add up to 1, hence the output is `false`.","solution":"def can_sum(target_sum, numbers): Determines if there exists a combination of numbers that adds up exactly to the target sum. Each number in the numbers list can be used unlimited times. :param target_sum: The target sum to achieve. :param numbers: List of non-negative integers. :return: True if such a combination exists, otherwise False. # Create a boolean array to hold the achievable sums # dp[i] will be True if the sum i can be achieved, otherwise False dp = [False] * (target_sum + 1) dp[0] = True # Base case: A sum of 0 can always be achieved with an empty combination for i in range(target_sum + 1): if dp[i]: for num in numbers: if i + num <= target_sum: dp[i + num] = True return dp[target_sum]"},{"question":"Alex loves playing Sudoku, but he recently found a new type of logic puzzle that he finds even more interesting: a Duplicate-Free Grid. In this puzzle, he is given a square grid of integers and needs to ensure that each digit from 1 to 9 appears at most once in each row and column. The task is to help Alex by determining whether the grid is valid according to this rule. Write a function that takes an `n x n` grid of integers where `n` is between 1 and 9 inclusive. The function should return `True` if the grid is valid and `False` otherwise. -----Input----- The first line contains an integer `t` (1 le t le 100) — the number of test cases. Each test case starts with an integer `n` (1 le n le 9) — the size of the grid. The next `n` lines each contain `n` integers, representing the grid. Each integer `a_ij` is between `0` and `9` inclusive, where 0 represents an empty cell. -----Output----- For each test case, print `True` or `False` on a new line, indicating whether the grid satisfies the constraint that each digit from 1 to 9 appears at most once in each row and column. -----Examples----- Input 3 4 5 3 0 0 6 0 0 0 0 9 8 0 0 0 0 1 3 1 2 3 4 5 6 7 8 9 2 1 2 3 4 Output True True True -----Note----- In the first test case, no digit from 1 to 9 appears more than once in any row or column. In the second test case, each digit from 1 to 9 appears exactly once across the grid. In the third test case, it is automatically valid as each row and column contain unique digits from 1 to 4.","solution":"def is_valid_grid(n, grid): Checks if the grid is valid according to the rule that each digit from 1 to 9 appears at most once in each row and column. :param n: Size of the grid (n x n) :param grid: A list of lists representing the grid :return: True if the grid is valid, otherwise False for i in range(n): row_set = set() col_set = set() for j in range(n): if grid[i][j] != 0: # Check row uniqueness if grid[i][j] in row_set: return False row_set.add(grid[i][j]) if grid[j][i] != 0: # Check column uniqueness if grid[j][i] in col_set: return False col_set.add(grid[j][i]) return True def process_test_cases(test_cases): results = [] for n, grid in test_cases: results.append(is_valid_grid(n, grid)) return results"},{"question":"Given an integer array `nums` and an integer `target`, return the number of all unique triplets in the array `nums` that sum up to the `target`. For example, if `nums` is [1, 0, -1, 2, -1, -4] and `target` is 0, the unique triplets that sum up to 0 are: ``` [ [-1, 0, 1], [-1, -1, 2] ] ``` Note that the order of the triplets within the array or the position of the numbers in the triplets do not matter, and the triplets themselves should be in non-descending order. Write a function ```python def three_sum(nums: list[int], target: int) -> list[list[int]]: pass ``` **Examples** ```python three_sum([1, 0, -1, 2, -1, -4], 0) => [[-1, -1, 2], [-1, 0, 1]] three_sum([0, 0, 0], 0) => [[0, 0, 0]] three_sum([3, 0, -2, -1, 1, 2], 1) => [[-2, 0, 3], [-1, 0, 2], [-2, 1, 2]] ``` Explanation: In the first example, there are two unique triplets: `[-1, -1, 2]` and `[-1, 0, 1]`. In the second example, there is one unique triplet: `[0, 0, 0]`. In the third example, there are three unique triplets matching the target sum. Assume that: - The array `nums` will have at least 3 elements. - Each element `nums[i]` is guaranteed to be an integer. - The array may contain both positive and negative integers.","solution":"def three_sum(nums: list[int], target: int) -> list[list[int]]: nums.sort() triplets = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue # Skip duplicate values. left, right = i + 1, len(nums) - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: triplets.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 # Skip duplicate values. while left < right and nums[right] == nums[right - 1]: right -= 1 # Skip duplicate values. left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return triplets"},{"question":"You are given a string `s` consisting of lowercase English letters. Your goal is to find the minimum number of operations to transform the string into its lexicographically smallest form. In one operation, you can: - Choose any single character in the string and replace it with any other lowercase English character (`a` to `z`). For example, if `s = \\"abe\\"`, you can make the string lexicographically smaller by replacing: - `b` with `a` to get `\\"aae\\"`. You should strive to make the string as small as possible in lexicographical order with the minimum number of character changes. # Input - The first line contains an integer `t` (1 le t le 1000) — the number of test cases. - The next `t` lines each contain a single string `s` (1 le |s| le 10^5), where `|s|` denotes the length of the string. # Output - For each test case, output the lexicographically smallest string achievable with the minimum number of operations. # Example Input ``` 3 abe xyz bacd ``` Output ``` aaa aaa aaad ``` # Note In the first case, `abe` can be transformed into `aaa` with 2 operations: replace `b` with `a` and `e` with `a`. In the second case, `xyz` can be transformed into `aaa` with 3 operations: replace all characters with `a`. In the third case, `bacd` can be transformed into `aaad` with 2 operations: replace `b` and `c` with `a`.","solution":"def make_lexicographically_smallest(s): Transforms the string s into its lexicographically smallest form by replacing characters with \'a\' where possible to make it the smallest. return \'a\' * len(s) def process_test_cases(test_cases): Process multiple test cases and returns the results. results = [] for s in test_cases: results.append(make_lexicographically_smallest(s)) return results"},{"question":"You are given a grid of size N times M filled with non-negative integers. Your task is to identify the largest square subgrid (i.e., a subgrid with equal number of rows and columns) where the sum of numbers in the subgrid is less than or equal to a given integer S. ------ Input ------ The first line contains an integer T, the number of test cases. Each test case starts with three integers N, M, and S. Then follow N lines each containing M integers representing the grid. ------ Output ------ For each test case, output the size of the largest square subgrid that has a sum of numbers less than or equal to S. If no such subgrid exists, output 0. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 100 0 ≤ text{Grid}[i][j] ≤ 1000 0 ≤ S ≤ 10^9 ------ Sample Input ------ 1 3 3 20 1 2 3 4 5 6 7 8 9 ------ Sample Output ------ 2 ------ Explanation ------ For the first test case, the grid is: 1 2 3 4 5 6 7 8 9 We can find multiple square subgrids: - A 2 times 2 subgrid at the top-left with sum 1+2+4+5=12 - A 2 times 2 subgrid at the center with sum 5+6+8+9=28 - A 2 times 2 subgrid at the top-right with sum 2+3+5+6=16 Since the sum of elements in the largest square subgrid that fits the criteria is found to be 16 and its size is 2 times 2, the answer for this test case is 2.","solution":"def max_square_subgrid_size(N, M, S, grid): def subgrid_sum(i, j, size): total = sum([grid[x][j:j+size] for x in range(i, i+size)], []) return sum(total) max_size = 0 for size in range(1, min(N, M) + 1): found = False for i in range(N - size + 1): for j in range(M - size + 1): if subgrid_sum(i, j, size) <= S: found = True max_size = size break if found: break return max_size def solve(T, test_cases): results = [] for case in test_cases: N, M, S, grid = case results.append(max_square_subgrid_size(N, M, S, grid)) return results"},{"question":"Your friend is an avid typist and often tests his typing speed on an old typewriter. However, he recently discovered that the typewriter frequently gets jammed when typing a particular sequence of characters repetitively. The sequence that causes the jam is \\"abc\\". Now, he wants to know the frequency of this problematic sequence in a given string of text to avoid typing such strings. Write a program that takes a string as input and computes the number of times the sequence \\"abc\\" appears as a substring in the given text. -----Input format----- A single line containing a string S of length N composed of lowercase English letters. -----Output format----- A single integer in a single line giving the number of times \\"abc\\" appears as a substring in S. -----Test data----- You may assume that N is in the range 1 to 10^6. -----Sample Input----- abcabcabc -----Sample Output----- 3","solution":"def count_abc_substring(s: str) -> int: Returns the number of times the sequence \'abc\' appears as a substring in the given text. :param s: A string that needs to be checked. :return: An integer count of \'abc\' substrings in the input string. return s.count(\'abc\')"},{"question":"You are given an array A of integers and an integer X. Your task is to determine if there exist two distinct indices i and j in A such that the absolute difference of the elements at these indices is exactly X. Print \\"YES\\" if such a pair exists, otherwise print \\"NO\\". -----Constraints----- - The length of array A is between 2 and 100 (inclusive). - Each integer in A is between -1000 and 1000 (inclusive). - -2000 ≤ X ≤ 2000 -----Input----- Input is given from Standard Input in the following format: n X A -----Output----- Print \\"YES\\" if there exist two distinct indices i and j in A such that |A[i] - A[j]| = X, otherwise print \\"NO\\". -----Sample Input----- 5 3 1 5 9 2 6 -----Sample Output----- YES","solution":"def check_absolute_difference(n, X, A): Determines if there exist two distinct indices i and j in A such that the absolute difference of the elements at these indices is exactly X. Params: n (int): The number of elements in the array A (not actually used in function). X (int): The target absolute difference. A (List[int]): The list of integers. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". A_set = set(A) for number in A: if (number + X in A_set) or (number - X in A_set): return \\"YES\\" return \\"NO\\" # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) X = int(data[1]) A = list(map(int, data[2:])) print(check_absolute_difference(n, X, A))"},{"question":"Given two strings `A` and `B`, determine the minimum number of operations required to convert string `A` into string `B`. The allowed operations are: 1. Insert a character 2. Delete a character 3. Replace a character The insertion, deletion, or replacement of a character must be achieved in one unit of time. Write a function `min_operations` that takes in the two strings and returns the minimum number of operations required to convert `A` to `B`. # Input - First line contains `T`, the number of test cases. - Each test case contains two lines: - First line contains string `A` - Second line contains string `B` # Output For each test case, print the minimum number of operations required to convert `A` to `B`. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ |A|, |B| ≤ 100 # Example Input ``` 2 abcdef azced short ports ``` Output ``` 3 3 ``` Explanation - **Test Case 1**: - A = \\"abcdef\\", B = \\"azced\\" - Minimum operations required: 1. Replace \'b\' with \'z\' 2. Replace \'d\' with \'c\' 3. Replace \'f\' with \'d\' - Total operations = 3 - **Test Case 2**: - A = \\"short\\", B = \\"ports\\" - Minimum operations required: 1. Replace \'s\' with \'p\' 2. Replace \'h\' with \'o\' 3. Insert \'s\' at the end - Total operations = 3","solution":"def min_operations(A, B): Determine the minimum number of operations required to convert string A to string B. Parameters: A (str): Source string B (str): Target string Returns: int: Minimum number of operations m, n = len(A), len(B) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # Fill with insertions elif j == 0: dp[i][j] = i # Fill with deletions elif A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insertion dp[i - 1][j], # Deletion dp[i - 1][j - 1]) # Replacement return dp[m][n] def process_input(T, test_cases): results = [] for i in range(T): A, B = test_cases[i] result = min_operations(A, B) results.append(result) return results"},{"question":"A company wants to implement a system for tracking customer feedback. They receive feedback scores from customers on a daily basis, but due to server issues, they often lose some of the data. They want to estimate the average feedback score for a set number of consecutive days, but they want to ignore any days where they didn\'t receive full data. Your task is to write a function that, given a list of daily feedback scores, computes the average score excluding any days with missing data. A day with missing data will be represented by a `None` value in the list. For example, given the input `[5, 7, None, 10, 8, None, None, 3, 1]`, the function should calculate the average of `[5, 7, 10, 8, 3, 1]` and ignore the `None` values. Write a function `average_feedback(scores: List[Optional[int]]) -> float` that computes and returns the average feedback score, ignoring days with missing data. If there are no valid scores, return `0.0`. -----Input----- - `scores`: A list of integers and `None` values representing customer feedback scores. The length of the list can range from `1` to `100,000`. -----Output----- - A float representing the average feedback score, with up to two decimal points of precision. -----Examples----- ```python print(average_feedback([5, 7, None, 10, 8, None, None, 3, 1])) # Output: 5.67 print(average_feedback([None, None, None])) # Output: 0.0 print(average_feedback([7, 8, 9])) # Output: 8.0 print(average_feedback([None, 5, 6, None])) # Output: 5.5 ```","solution":"from typing import List, Optional def average_feedback(scores: List[Optional[int]]) -> float: Computes and returns the average feedback score, ignoring days with missing data (represented by None). If there are no valid scores, returns 0.0. Args: - scores (List[Optional[int]]): A list of integers and None values representing customer feedback scores. Returns: - float: The average feedback score, with up to two decimal points of precision. # Filter out None values valid_scores = [score for score in scores if score is not None] # If there are no valid scores, return 0.0 if not valid_scores: return 0.0 # Calculate the average of the valid scores average_score = sum(valid_scores) / len(valid_scores) return round(average_score, 2)"},{"question":"Given a rectangular grid of integers, you are to find the sum of the unique integers for a given subgrid of the original grid. The grid is represented as an array of arrays where each element in the subgrid is denoted as grid[i][j] with `1 ≤ i ≤ m` and `1 ≤ j ≤ n`. Define a subgrid by two pairs of coordinates: the top-left coordinate (x1, y1) and the bottom-right coordinate (x2, y2). Write a function that takes the grid and the coordinates of the subgrid and returns the sum of the unique integers within the subgrid. Input - An integer m (1 ≤ m ≤ 500), denoting the number of rows in the grid. - An integer n (1 ≤ n ≤ 500), denoting the number of columns in the grid. - The m x n grid consisting of integers (0 ≤ grid[i][j] ≤ 10^5). - Four integers x1, y1, x2, y2 representing the coordinates of the subgrid. Output Print a single integer: the sum of unique integers in the specified subgrid. Examples Input ``` 3 4 1 2 3 4 2 1 2 3 3 2 1 4 1 1 2 3 ``` Output ``` 10 ``` Input ``` 4 5 5 3 4 7 8 5 5 3 3 3 7 5 5 3 4 1 7 3 3 2 1 1 3 3 ``` Output ``` 8 ``` Note For the first example: The subgrid is: ``` 1 2 3 2 1 2 ``` The unique integers within the subgrid are 1, 2, and 3, hence the sum is 1 + 2 + 3 = 6. For the second example: The subgrid is: ``` 5 3 4 5 5 3 7 5 5 ``` The unique integers within the subgrid are 5, 3, 4, and 7, hence the sum is 5 + 3 + 4 + 7 = 19.","solution":"def sum_of_unique_integers(grid, x1, y1, x2, y2): unique_integers = set() for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): unique_integers.add(grid[i][j]) return sum(unique_integers)"},{"question":"Consider a string (str = \\"\\"). You can perform the following commands: append s: Append string boldsymbol{s} to the end of the current string. print: Print the string. remove s: Remove the first occurrence of substring boldsymbol{s} from the string. replace a b: Replace the first occurrence of substring boldsymbol{a} with substring boldsymbol{b}. reverse: Reverse the string. Initialize your string as an empty string and read in the value of n followed by n lines of commands where each command will be of the 5 types listed above. Iterate through each command in order and perform the corresponding operation on your string. Example N=4 append abc append def replace abc xyz print append abc: Append \\"abc\\" to the string, text{str}=text{\\"abc\\"}. append def: Append \\"def\\" to the string, text{str}=text{\\"abcdef\\"}. replace abc xyz: Replace \\"abc\\" with \\"xyz\\", text{str}=text{\\"xyzdef\\"}. print: Print the string. Output: xyzdef Input Format The first line contains an integer, n, denoting the number of commands. Each line boldsymbol{i} of the n subsequent lines contains one of the commands described above. Constraints The substrings used in the commands can be of any length and contain any character. Output Format For each command of type print, print the string on a new line. Sample Input 0 7 append hello append world print remove lo print replace wor xyz print Sample Output 0 helloworld helworld helxyzld","solution":"def manipulate_string(commands): result = [] current_string = \\"\\" for command in commands: parts = command.split() action = parts[0] if action == \\"append\\": current_string += parts[1] elif action == \\"print\\": result.append(current_string) elif action == \\"remove\\": to_remove = parts[1] current_string = current_string.replace(to_remove, \\"\\", 1) elif action == \\"replace\\": a = parts[1] b = parts[2] current_string = current_string.replace(a, b, 1) elif action == \\"reverse\\": current_string = current_string[::-1] return result"},{"question":"Create a function that generates a pyramid from a given character. The function should take two parameters: an integer representing the height of the pyramid and a character which will be used to construct the pyramid. The height represents the number of levels in the pyramid. The pyramid should be centered and each level should have an increasing number of characters as you move down. If the height is less than 1, the function should return an empty string. Here are some examples: ```` Input: height = 3, character = \'#\' Output: # # # Input: height = 5, character = \'*\' Output: * *** ***** ******* ********* Input: height = 1, character = \'@\' Output: @ ```` The function must return the pyramid as a single string, with newline characters to separate the levels. Ensure there are no trailing spaces on any line, and handle edge cases where the input height is less than 1. Create the function according to the provided description and verify correctness with multiple test cases.","solution":"def generate_pyramid(height, character): Generates a pyramid of a given height using a specified character. if height < 1: return \\"\\" pyramid = [] max_width = 2 * height - 1 for i in range(1, height + 1): num_chars = 2 * i - 1 line = character * num_chars centered_line = line.center(max_width) pyramid.append(centered_line) return \\"n\\".join(pyramid)"},{"question":"Asha is planning a party and she wants to prepare tables and chairs for her guests. She has a total of `N` guests. Asha has two types of seating options: 1. A table with 4 chairs. 2. A table with 6 chairs. Asha wants to know how many complete sets of tables and chairs she can create such that all her guests have a seat. To be more precise, she seeks the maximum number of complete table sets (both 4-chair and 6-chair tables) she can prepare with an exact seating for `N` guests. You are required to help Asha determine this. Input The first line contains the number of test cases, `T`. The following `T` lines each contain a single integer `N`, the number of guests. Output Print `T` lines of output, each line containing a single integer, the maximum number of complete table sets that can be prepared for each test case. Constraints 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^9 SAMPLE INPUT 3 10 14 18 SAMPLE OUTPUT 1 2 3 Explanation For test case #1 N = 10 Maximum number of complete table sets is 1 (one set of table with 4 chairs and one set of table with 6 chairs). For test case #2 N = 14 Maximum number of complete table sets is 2 (two sets of table with 6 chairs and one set of table with 4 chairs). For test case #3 N = 18 Maximum number of complete table sets is 3 (three sets of table with 6 chairs).","solution":"def max_complete_table_sets(N): Returns the maximum number of complete table sets for N guests where each table set consists of either a table with 4 chairs or a table with 6 chairs. # For a maximum number of complete table sets, we can use one 6-chair table set # for every 6 guests, since we can efficiently group guests in multiples of 6. return N // 6"},{"question":"Mia is organizing a party and plans to place candies in decorative bowls. She has exactly b bowls and wants to distribute all candies equally among the bowls without any bowl being empty. If it\'s possible, Mia wants to know how to do this distribution. If such an equal distribution is not possible, give a possible distribution that is as close to equal as possible. For example, if Mia has 12 candies and 5 bowls, the candies can be distributed as `[3, 3, 2, 2, 2]` (3 bowls with 2 candies and 2 bowls with 3 candies) which is close to an equal distribution. But if she has 10 candies and 5 bowls, the candies can be equally distributed as `[2, 2, 2, 2, 2]`. -----Input----- The input consists of a single line containing two integers c and b (1 ≤ c ≤ 10^9, 1 ≤ b ≤ 10^5), where c is the total number of candies and b is the number of bowls Mia has. -----Output----- The output contains a single line with b integers representing the number of candies in each bowl if Mia can distribute the candies equally without any bowl being empty. If it is not possible to distribute candies equally, output b integers representing a distribution that is as close to equal as possible. -----Example----- Input 12 5 Output 3 3 2 2 2 Input 10 5 Output 2 2 2 2 2","solution":"def distribute_candies(c, b): Distribute c candies among b bowls as equally as possible. If it is not possible to distribute the candies equally with no bowl being empty, the function will return a distribution as close to equal as possible. :param c: Total number of candies (int) :param b: Number of bowls (int) :return: List containing the number of candies in each bowl # Calculate base number of candies per bowl base_candies = c // b # Calculate how many extra candies are left after base distribution extra_candies = c % b # Initialize the list with base distribution distribution = [base_candies] * b # Distribute the extra candies for i in range(extra_candies): distribution[i] += 1 return distribution"},{"question":"You are given two binary strings `A` and `B` of equal length. Your task is to find the minimum number of flips required to make the two strings equal. A flip operation consists of changing a `0` to a `1` or a `1` to a `0`. If it is impossible to make the two strings equal by any number of flips, return `-1`. -----Input----- The first line contains a single integer `T` (1 le T le 1000) — the number of test cases. The next `2*T` lines contain descriptions of test cases — two lines per test case. The first line in each pair contains the binary string `A`, and the second line contains the binary string `B`. Both strings have equal length. -----Output----- Print `T` lines, each containing the minimum number of flips required for each test case to make the strings equal or `-1` if it is impossible. -----Example----- Input 3 1100 1001 10101 10101 1111 0000 Output 2 0 4","solution":"def min_flips_to_make_equal(A, B): Returns the minimum number of flips required to make binary strings A and B equal. If it is impossible to make the strings equal, returns -1. if len(A) != len(B): return -1 flips = 0 for a, b in zip(A, B): if a != b: flips += 1 return flips def solve(T, cases): results = [] for i in range(T): A = cases[2*i] B = cases[2*i + 1] result = min_flips_to_make_equal(A, B) results.append(result) return results"},{"question":"# Problem A palindrome is a string that reads the same left to right and right to left. Given a string `s` consisting of lowercase English letters only, we can perform operations to make the string a palindrome. In one operation, we can replace any character in the string with any other character. Your task is to calculate the minimum number of operations required to transform the given string `s` into a palindrome. # Example For `s = \\"abca\\"`, the output should be `1` We can replace the first character \'a\' with \'c\', or the last character \'a\' with \'b\' to make \\"acca\\" or \\"abca\\" respectively. For `s = \\"racecar\\"`, the output should be `0` The string \\"racecar\\" is already a palindrome. For `s = \\"abcd\\"`, the output should be `2` We can replace \'b\' with \'c\' and \'d\' with \'a\' to make \\"abca\\" or \\"acba\\". For `s = \\"a\\"`, the output should be `0` A single character string is already a palindrome. # Note - `1 <= s.length <= 10^5` - `s` consists of only lowercase English letters \'a\' to \'z\'.","solution":"def min_operations_to_palindrome(s): Calculate the minimum number of operations required to transform the given string s into a palindrome. An operation consists of replacing any character in the string with any other character. :param s: A string consisting of lowercase English letters only. :return: An integer - the minimum number of operations. n = len(s) operations = 0 # Iterate over the first half of the string. for i in range(n // 2): if s[i] != s[n - 1 - i]: operations += 1 return operations"},{"question":"In the Kingdom of Minera, there are several mines and each pair of mines is connected by a unique underground tunnel. The queen of Minera has decided to improve the connections between some of these mines to facilitate better transportation of ores. The set of tunnels to be improved must allow movement between any pair of mines via a sequence of improved tunnels. The queen has decided that, for operational purposes, each improved tunnel will be numbered from 1, 2, dots , k (where the number of each tunnel represents its operational efficiency). Each tunnel must have a distinct number, and the tunnel numbers correlate directly to their improved efficiency. The Minera Transport Corporation (MTC) will choose a subset of these improved tunnels to maximize the overall operational efficiency. Specifically, MTC will select tunnels such that it is possible to travel between any pair of mines using some sequence of selected tunnels. For example, if the kingdom has seven mines and the queen decides to improve and label the 10 tunnels in a specific manner, the MTC could then utilize the tunnels labeled 1, 2, 3, 4, 5, 6, and 7, achieving maximum operational efficiency. The queen has fixed the number of tunnels to improve but is considering how to label them to achieve the desired benefits. Hence, she seeks recommendations on the best approach to number these tunnels to maximize operational efficiency of the selected subset. -----Input----- The input consists of a single line containing two integers n (2 leq n leq 1000000), which is the number of mines, and k (n-1 leq k leq frac{n(n-1)}{2}), which is the number of tunnels to be improved. -----Output----- Display the maximum achievable operational efficiency of the transportation network following the rules above. -----Examples----- Sample Input 1: 5 4 Sample Output 1: 10 Sample Input 2: 7 10 Sample Output 2: 25","solution":"def max_operational_efficiency(n, k): Calculate the maximum achievable operational efficiency of the transportation network. Parameters: n (int): Number of mines. k (int): Number of tunnels to be improved. Returns: int: Maximum achievable operational efficiency. if k == n - 1: # When k == n-1, the maximum operational efficiency is the sum of the first k natural numbers return n * (n - 1) // 2 else: # The maximum operational efficiency is the sum of the first k natural numbers, # since k >= n - 1, we can simply use k*(k+1)//2 return k * (k + 1) // 2"},{"question":"Nina loves symmetrical patterns and has an array of integers. She wants to rearrange the elements of the array to form a symmetric sequence, which means the sequence should read the same forwards and backwards. If it is not possible to form such a sequence, print \\"IMPOSSIBLE\\". For example, consider the sequence [1, 2, 3, 2, 1]. Rearranging this sequence to [1, 2, 3, 2, 1] forms a symmetric sequence. -----Input----- The first line contains a single integer n (1 leq n leq 10^5) — the number of elements in the array. The second line contains n integers a_i (1 leq a_i leq 10^6) — the elements of the array. -----Output----- If it is possible to rearrange the elements to form a symmetric sequence, print the symmetric sequence on a single line. Otherwise, print \\"IMPOSSIBLE\\". If there are multiple possible solutions, any one of them will be accepted. -----Examples----- Input 5 1 2 3 2 1 Output 1 2 3 2 1 Input 6 1 2 1 2 1 3 Output IMPOSSIBLE -----Note----- In the first example, the sequence is already symmetric. In the second example, no matter how you rearrange [1, 2, 1, 2, 1, 3], you cannot form a symmetric sequence.","solution":"def create_symmetric_sequence(n, array): from collections import Counter count = Counter(array) odd_count_elements = [k for k, v in count.items() if v % 2 != 0] if len(odd_count_elements) > 1: return \\"IMPOSSIBLE\\" result = [] half_counter = Counter() for value in array: if half_counter[value] < count[value] // 2: result.append(value) half_counter[value] += 1 if odd_count_elements: result.append(odd_count_elements[0]) result.extend(reversed(result[:n // 2])) if len(result) == n: return \\" \\".join(map(str, result)) else: return \\"IMPOSSIBLE\\""},{"question":"In a certain city, there are N straight roads. Each road connects two intersections and has a specific length. The intersections are labeled with unique integers from 1 to N+1. Each road is described by three integers a, b, and l, meaning it connects intersections a and b and has a length of l. The city government wants to check if it is possible to construct a circular path that starts at some intersection, travels along some of the roads, and returns to the starting intersection without traveling along any road more than once. This circular path should include at least one road. Write a program to determine if such a circular path exists for each test case. If such a path exists, output \\"YES\\". Otherwise, output \\"NO\\". Input Format The first line contains an integer T, the number of test cases. T test cases follow. For each test case: - The first line contains an integer N, the number of roads. - The next N lines each contain three integers a, b, and l, describing a road with length l connecting intersections a and b. Output Format For each test case, output one line containing either \\"YES\\" or \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ a, b ≤ N+1 1 ≤ l ≤ 10^6 Sample Input 2 3 1 2 4 2 3 5 3 1 6 4 1 2 7 2 3 8 3 4 10 4 5 9 Sample Output YES NO Explanation In the first test case, the roads create a triangle: 1-2-3-1. This is a valid circular path. In the second test case, there are no circular paths that visit at least one intersection more than once. The roads connect the intersections in a single line: 1-2-3-4-5.","solution":"def has_circular_path(n, roads): from collections import defaultdict def find_cycle(v, visited, parent): Helper function for DFS to find a cycle. Returns True if cycle is found visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if find_cycle(neighbor, visited, v): return True elif neighbor != parent: return True return False if n == 0: return \\"NO\\" intersections = n + 1 graph = defaultdict(list) for a, b, _ in roads: graph[a].append(b) graph[b].append(a) visited = [False] * (intersections + 1) for i in range(1, intersections + 1): if not visited[i]: if find_cycle(i, visited, -1): return \\"YES\\" return \\"NO\\" def circular_paths(test_cases): results = [] for n, roads in test_cases: results.append(has_circular_path(n, roads)) return results"},{"question":"Given an integer array of size N, your task is to find two non-overlapping contiguous subarrays such that the absolute difference between their sums is the smallest. Return this absolute difference. Example 1: Input: N = 6 A[] = {2, -1, 3, 5, -3, 2} Output: 1 Explanation: The two non-overlapping subarrays {2, -1, 3} and {5, -3, 2} have closest sums of 4 and 4. The absolute difference is |4 - 4| = 0. Example 2: Input: N = 5 A[] = {1, -2, 3, 4, -5} Output: 0 Explanation: The two non-overlapping subarrays {-2, 3, 4} and {-5} have closest sums of 5 and -5. The absolute difference is |5 - (-5)| = 0. Your Task: Complete the function minAbsDifference() which takes the input array and its size as input parameters and returns the smallest absolute difference between the sums of two non-overlapping subarrays. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N) Constraints: 2 ≤ N ≤ 10^3 -10^5 ≤ A[i] ≤ 10^5","solution":"def minAbsDifference(N, A): if N < 2: return -1 min_diff = float(\'inf\') # To store the prefix sums prefix_sum = [0] * (N + 1) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + A[i - 1] for i in range(1, N): for j in range(i + 1, N + 1): subarray1 = prefix_sum[i] - prefix_sum[0] subarray2 = prefix_sum[N] - prefix_sum[j - 1] min_diff = min(min_diff, abs(subarray1 - subarray2), abs(subarray1 + subarray2)) return min_diff"},{"question":"Bessie has recently become fascinated with a new type of sequence, which she calls a \\"zigzag sequence.\\" This sequence must satisfy the following property: no three consecutive elements are either all strictly increasing or all strictly decreasing. Given an initial sequence, Bessie wants to know the minimum number of elements she needs to modify to make it a zigzag sequence. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the sequence. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the initial sequence. -----Output----- Output a single integer — the minimum number of elements that need to be modified to make the sequence a zigzag sequence. -----Examples----- Input 5 1 3 2 4 3 Output 0 Input 4 1 2 3 4 Output 1 Input 6 10 20 30 20 10 5 Output 2 -----Note----- In the first example, the sequence is already a zigzag sequence, so no modifications are necessary. In the second example, one possible solution is to change the second element to 1, resulting in the sequence [1, 1, 3, 4]. Another solution would be to change the third element to 1, resulting in the sequence [1, 2, 1, 4]. In the third example, a possible solution is to modify the third and fifth elements, making the sequence [10, 20, 10, 20, 10, 5].","solution":"def min_modifications_to_zigzag(n, sequence): if n < 3: return 0 modifications = 0 def is_increasing(a, b, c): return a < b and b < c def is_decreasing(a, b, c): return a > b and b > c for i in range(1, n - 1): if is_increasing(sequence[i-1], sequence[i], sequence[i+1]) or is_decreasing(sequence[i-1], sequence[i], sequence[i+1]): modifications += 1 # Modify the middle element to break the sequence pattern if i + 2 < n and (is_increasing(sequence[i], sequence[i+1], sequence[i+2]) or is_decreasing(sequence[i], sequence[i+1], sequence[i+2])): sequence[i+1] = sequence[i] else: sequence[i] = sequence[i-1] return modifications"},{"question":"In a kingdom there are n castles connected by roads. Each road has a toll cost. The kingdom\'s king wants to visit all castles starting from a given castle at the minimum total toll cost. You are required to find the minimum total toll cost for the king to visit all castles. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000) — the number of castles and the number of roads, respectively. The following m lines each contain three integers u, v and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100) — indicating a road between castles u and v with a toll cost of w. The last line contains an integer s (1 ≤ s ≤ n) — the starting castle for the king. -----Output----- Print a single integer, the minimum total toll cost for the king to visit all castles. If it\'s impossible to visit all castles, print -1. -----Examples----- Input 4 4 1 2 4 2 3 3 3 4 2 4 1 1 1 Output 6 Input 3 1 1 2 5 2 3 10 1 Output -1 -----Note----- In the first test, the road arrangement forms a connected graph, allowing the king to visit all castles with a minimum toll cost of 6. In the second test, there is no single connected component that includes all castles, so it is impossible for the king to visit all of them.","solution":"from heapq import heappop, heappush from collections import defaultdict def minimum_toll_cost(n, m, roads, s): def prim(start): total_cost = 0 visited = [False] * (n + 1) min_heap = [(0, start)] edges_used = 0 while min_heap: cost, node = heappop(min_heap) if visited[node]: continue visited[node] = True total_cost += cost edges_used += 1 for next_cost, next_node in adj[node]: if not visited[next_node]: heappush(min_heap, (next_cost, next_node)) if edges_used == n: return total_cost else: return -1 adj = defaultdict(list) for u, v, w in roads: adj[u].append((w, v)) adj[v].append((w, u)) return prim(s) # Example usage: # n = 4 # m = 4 # roads = [ # (1, 2, 4), # (2, 3, 3), # (3, 4, 2), # (4, 1, 1), # ] # s = 1 # print(minimum_toll_cost(n, m, roads, s)) # Output: 6"},{"question":"A group of adventurers is about to embark on a journey through a forest filled with magical trees. Each tree has a unique magical power represented by a lowercase letter from \'a\' to \'z\'. The adventurers can pick fruits from these trees, where each fruit represents a unit of the tree\'s magical power. You are given a sequence of events that describe either the picking of fruits from a tree or a query to check the total fruits of a particular power within a range of trees. The events come in two types: 1. `1 x y z`: Adventurers pick `y` fruits from the tree at position `x`, and these fruits have the magical power `z`. 2. `2 l r z`: Query the total number of fruits with the magical power `z` from the trees in range `[l, r]` (inclusive). Input: The first line contains an integer `Q`, the number of events. The next `Q` lines contain the events as described above. Output: For each query event (type `2`), output the total number of fruits with the magical power `z` within the specified range. Constraints: 1. 1 <= Q <= 100,000 2. 1 <= x, l, r <= 1,000,000 3. 1 <= y <= 1,000,000 4. Each tree can have at most 1,000,000 fruits with a specific power. Sample Input: 6 1 2 5 a 1 3 10 b 1 5 7 a 2 1 5 a 1 2 3 b 2 1 3 b Sample Output: 12 13 In the first query, the total number of fruits with magical power \'a\' from tree 1 to 5 is 5 (from tree 2) + 7 (from tree 5) = 12. In the second query, the total number of fruits with magical power \'b\' from tree 1 to 3 is 10 (from tree 3) + 3 (from tree 2) = 13.","solution":"from collections import defaultdict def magical_fruit_events(Q, events): Process the list of events and return the result for each query event. tree_fruits = defaultdict(lambda: defaultdict(int)) result = [] for event in events: parts = event.split() if parts[0] == \'1\': x, y, z = int(parts[1]), int(parts[2]), parts[3] tree_fruits[x][z] += y elif parts[0] == \'2\': l, r, z = int(parts[1]), int(parts[2]), parts[3] total = 0 for i in range(l, r + 1): total += tree_fruits[i][z] result.append(total) return result"},{"question":"Spike is helping Twilight Sparkle organize her library of spell books. Each spell book has a distinct magical power level. Spike needs to arrange these books in a specific order so that their power levels form a zigzag sequence. A zigzag sequence is a sequence where the differences between consecutive power levels strictly alternate between positive and negative. In other words, if a sequence S = [S1, S2, S3, ..., Sn] forms a zigzag sequence, then for all valid indexes i, - either S[i] < S[i+1] > S[i+2] or - S[i] > S[i+1] < S[i+2]. Help Spike by writing a program to rearrange the given power levels into a zigzag sequence. If there are multiple valid arrangements, output any of them. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of spell books. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the power levels of the spell books. Output Output a single line containing n integers — the power levels arranged into a zigzag sequence. Examples Input 6 1 3 2 4 7 6 Output 1 3 2 4 6 7 Input 5 9 1 5 8 3 Output 1 9 3 8 5 Input 4 4 3 2 1 Output 1 4 2 3 Note: Both the examples illustrate possible valid zigzag sequences.","solution":"def zigzag_sequence(n, power_levels): Returns a zigzag sequence of power levels. Args: n: int - the number of spell books (1 <= n <= 100) power_levels: list of int - the power levels of the spell books (1 <= ai <= 1000) Returns: list of int - the power levels arranged into a zigzag sequence power_levels.sort() # Rearrange the sorted list into a zigzag sequence # First half positions will be the smaller or equal pivots for i in range(1, n - 1, 2): power_levels[i], power_levels[i + 1] = power_levels[i + 1], power_levels[i] return power_levels # Example usage, consider removing this in production code if __name__ == \\"__main__\\": n = 6 power_levels = [1, 3, 2, 4, 7, 6] print(zigzag_sequence(n, power_levels))"},{"question":"Henry is training for a marathon and wants to plan his daily runs to cover various distances. He has a specific training schedule that spans over n weeks. In each week, Henry wants to follow a specific pattern for the lengths of his runs, which he refers to as his \\"training template.\\" The training template specifies the length of his runs for each day of the week (7 days). For example, a template [5, 10, 5, 10, 5, 15, 20] means that on Monday he would run 5 km, on Tuesday 10 km, Wednesday 5 km, and so forth. Henry wants to complete the training by strictly following the template for each week, but due to unforeseen circumstances, he might have to miss some days. If he misses a day, he can\'t replace that run on another day but can skip it altogether. Given the number of weeks, the training template, and the actual distances Henry managed to run on each day of his training period, you need to determine if he successfully followed his training schedule according to the template. Input The first line of input contains an integer n (1 ≤ n ≤ 100), which represents the number of weeks Henry has planned his training. The second line contains 7 integers a1, a2, ..., a7 (1 ≤ ai ≤ 100, 1 ≤ i ≤ 7) representing the training template\'s daily run distances for the 7 days of the week (Monday to Sunday). The next n lines each contain 7 integers b1, b2, ..., b7 (0 ≤ bi ≤ 100, 1 ≤ i ≤ 7) representing the actual distances that Henry ran each day for the n weeks. A value of 0 indicates that Henry did not run on that day. Output Output a single line with the word \\"YES\\" if Henry successfully followed his training schedule according to the training template, and \\"NO\\" otherwise. Example Input 2 5 10 5 10 5 15 20 5 0 5 10 5 15 20 5 10 5 10 5 0 20 Output YES In the given example, Henry followed his template as expected. Though he missed some days, he didn\'t run on unassigned days and the completed runs match the template pattern. Thus, the output is \\"YES\\".","solution":"def did_henry_follow_schedule(n, template, actual): Determine if Henry followed his training schedule according to the template. Parameters: n (int): Number of weeks. template (list[int]): Training template for each day of the week. actual (list[list[int]]): Actual distances Henry ran for each day in each week. Returns: str: \\"YES\\" if Henry followed the schedule, \\"NO\\" otherwise. for week in actual: for day_template, day_actual in zip(template, week): if day_actual != 0 and day_actual != day_template: return \\"NO\\" return \\"YES\\""},{"question":"You are given n people numbered from 0 to n-1. Each person has a list of favorite movies represented by strings, and a list of friends. The friendship is mutual, meaning if person A is friends with person B, then person B is also friends with person A. Your task is to determine the list of movies that are favorites among the friends of a specific person, but not among that person’s own favorites. The movies should be sorted based on their frequencies in descending order. In case two movies have the same frequency, sort them alphabetically from greatest to least. Example: Input: favoriteMovies = [[\\"A\\", \\"B\\"], [\\"B\\", \\"C\\"], [\\"A\\", \\"D\\", \\"E\\"], [\\"C\\", \\"D\\"]], friends = [[1, 2], [0, 3], [0, 3], [1, 2]], id = 0 Output: [\\"C\\", \\"D\\", \\"E\\"] Explanation: - Person with id = 0 has favorite movies [\\"A\\", \\"B\\"]. - Person with id 0 has friends with ids 1 and 2. - The movies favored by friends are: - Friend id = 1: [\\"B\\", \\"C\\"] - Friend id = 2: [\\"A\\", \\"D\\", \\"E\\"] - Combining and removing movies that person 0 also likes, we get [\\"C\\", \\"D\\", \\"E\\"]. - The counts of these movies are: - C -> 1 - D -> 1 - E -> 1 - Since all have the same frequency, we sort them alphabetically from greatest to least: [\\"C\\", \\"D\\", \\"E\\"]. Constraints: n == favoriteMovies.length == friends.length 2 <= n <= 100 1 <= favoriteMovies[i].length <= 100 1 <= favoriteMovies[i][j].length <= 8 0 <= friends[i].length < n 0 <= friends[i][j] < n 0 <= id < n If friends[i] contains j, then friends[j] contains i","solution":"from collections import Counter def favorite_movies_among_friends(favoriteMovies, friends, id): Given the favorite movies of each person and their friendship relations, this function returns a list of favorite movies that are liked by the friends of a specific person but not by that person, sorted by frequency in descending order and by alphabetical order for ties. :param favoriteMovies: A list of favorite movie lists for each person. :param friends: A list of lists representing the friendship relationships. :param id: The id of the specific person. :return: A list of movies sorted by the criteria mentioned above. person_movies = set(favoriteMovies[id]) friend_movie_counter = Counter() for friend_id in friends[id]: friend_movies = favoriteMovies[friend_id] for movie in friend_movies: if movie not in person_movies: friend_movie_counter[movie] += 1 # Generate a sorted list of movies by frequency and then alphabetically in reverse sorted_movies = sorted(friend_movie_counter.items(), key=lambda x: (-x[1], x[0]), reverse=True) # Extract just the movie names result = [movie for movie, count in sorted_movies] return result"},{"question":"Your task is to determine the maximum number of flowers that can be planted in a row of flower pots without violating the given constraints. You cannot plant flowers in adjacent pots. # Input: * A list of integers representing the row of flower pots, where `1` means the pot is already occupied with a flower, and `0` means the pot is empty `(0 <= len(row) <= 1000)`. * An integer `n` representing the number of new flowers that need to be planted `(0 <= n <= 500)`. # Output: * A boolean value indicating whether it\'s possible to plant all `n` flowers without any two new flowers being adjacent. # Examples: ``` canPlantFlowers([1,0,0,0,1], 1) -> True # It\'s possible to plant 1 flower in the middle empty pot. canPlantFlowers([1,0,0,0,1], 2) -> False # It\'s not possible to plant 2 flowers without violating the adjacent constraint. ``` Do not expect any negative or invalid inputs.","solution":"def canPlantFlowers(flowerbed, n): Determines if n flowers can be planted in the flowerbed without any two flowers being adjacent. if n == 0: return True plot_len = len(flowerbed) count = 0 for i in range(plot_len): if flowerbed[i] == 0: prev_empty = (i == 0) or (flowerbed[i - 1] == 0) next_empty = (i == plot_len - 1) or (flowerbed[i + 1] == 0) if prev_empty and next_empty: flowerbed[i] = 1 count += 1 if count >= n: return True return count >= n"},{"question":"You are given an undirected graph with N nodes and M edges. Each node has a value associated with it. Your task is to process Q queries on the graph. Each query is of two types: 1. \\"update X V\\": Update the value of node X to V. 2. \\"sum A B\\": Calculate the sum of values of all nodes that lie on any path between nodes A and B, inclusive. If there are multiple paths, choose any one of them. Input The first line contains three space-separated integers: N, M, and Q. The second line contains N space-separated integers, representing the values assigned to the nodes 1 to N, respectively. The next M lines contain two space-separated integers each, u and v, indicating an undirected edge between nodes u and v. The next Q lines contain queries of the above two types. Output For each \\"sum\\" query, output the result on a new line. Constraints 1 ≤ N, M, Q ≤ 100000 1 ≤ value of each node ≤ 1000 1 ≤ X, u, v, A, B ≤ N SAMPLE INPUT 5 4 5 3 2 1 4 5 1 2 2 3 3 4 4 5 sum 1 5 update 3 10 sum 1 5 update 5 7 sum 1 5 SAMPLE OUTPUT 15 24 26 Explanation Initial values of nodes: [3, 2, 1, 4, 5] - The first query asks for the sum of the nodes between node 1 and node 5. One possible path is 1 -> 2 -> 3 -> 4 -> 5. The sum would be 3 + 2 + 1 + 4 + 5 = 15. - The second query updates the value of node 3 to 10. - The third query again asks for the sum of the nodes between node 1 and node 5. Now the path 1 -> 2 -> 3 -> 4 -> 5 sums to 3 + 2 + 10 + 4 + 5 = 24. - The fourth query updates the value of node 5 to 7. - The fifth query asks for the sum of the nodes between node 1 and node 5. Now the path 1 -> 2 -> 3 -> 4 -> 7 sums to 3 + 2 + 10 + 4 + 7 = 26.","solution":"import collections def process_queries(N, M, Q, values, edges, queries): # Setting up the graph graph = collections.defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # DFS utility to find path sum between A and B def dfs_sum(current, target, visited): if current == target: return values[current - 1] visited.add(current) for neighbor in graph[current]: if neighbor not in visited: result = dfs_sum(neighbor, target, visited) if result is not None: return values[current - 1] + result return None results = [] for query in queries: parts = query.split() if parts[0] == \\"update\\": X = int(parts[1]) V = int(parts[2]) values[X - 1] = V elif parts[0] == \\"sum\\": A = int(parts[1]) B = int(parts[2]) visited = set() path_sum = dfs_sum(A, B, visited) results.append(path_sum) return results"},{"question":"Write a function to find the second largest number in a list of integers. Function will take a list of numbers as input and return the second largest number. Return null/nil/None if the list has less than 2 unique numbers. Example: ```python second_largest([3, 1, 4, 2]) --> 3 second_largest([1, 1, 1]) --> None # Return None if there are less than 2 unique numbers second_largest([]) --> None # Return None if the list is empty ```","solution":"def second_largest(numbers): Returns the second largest number in the list. If the list has less than 2 unique numbers, returns None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[-2]"},{"question":"Problem statement You have a ladder with `n` steps. A frog is at the bottom of the ladder and wants to reach the top. The frog can jump either 1 or 2 steps at a time. Your task is to compute the number of distinct ways the frog can reach the top of the ladder. input n Constraints * An integer * 0 ≤ n ≤ 50 output Print the number of distinct ways to reach the top of the ladder on one line, and print a newline at the end. sample Sample input 1 0 Sample output 1 1 Sample input 2 1 Sample output 2 1 Sample input 3 2 Sample output 3 2 Sample input 4 3 Sample output 4 3 Example Input 4 Output 5","solution":"def count_ways_to_reach_top(n): Returns the number of distinct ways the frog can reach the top of the ladder with n steps. if n == 0 or n == 1: return 1 dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"You are given a string which consists of lowercase letters and question marks. You need to replace all the question marks with lowercase letters such that no two adjacent characters are the same. Write a function `replaceQuestionMarks` that takes a single parameter `s` (a string) and returns a modified string with no adjacent characters being the same. Examples: ``` \\"?ab??\\" --> \\"aabcb\\" (or any other valid result) \\"????\\" --> \\"abab\\" (or any other valid result) \\"ab?ac?\\" --> \\"abzacb\\" (or any other valid result) \\"a?\\" --> \\"ab\\" (or any other valid result) \\"a?b\\" --> \\"acb\\" (or any other valid result) ``` Note: - You should ensure that the string you return has no two adjacent characters that are the same. - There may be multiple valid outputs, any one of them is acceptable.","solution":"def replaceQuestionMarks(s: str) -> str: from string import ascii_lowercase s = list(s) n = len(s) for i in range(n): if s[i] == \'?\': for letter in ascii_lowercase: if (i > 0 and s[i - 1] == letter) or (i < n - 1 and s[i + 1] == letter): continue s[i] = letter break return \\"\\".join(s)"},{"question":"Aria is developing a new game and wants to design a feature that tracks the player\'s scores through multiple levels. At each level, the player can earn positive or negative points. Aria needs to determine the player\'s highest score throughout the game and the level at which this score was achieved. Write a program that reads the player\'s score changes at each level and outputs the highest score and the level at which it was achieved. If multiple levels have the same highest score, return the lowest level number. -----Input----- The first line contains an integer n — the number of levels in the game (1 ≤ n ≤ 2·10^5). The following n lines contain integer numbers s_{i} (|s_{i}| ≤ 10^9), where s_{i} is the score change at level i. The score starts at 0 before the first level. -----Output----- Print two space-separated integers: the highest score and the level at which it was achieved (1-indexed). If multiple levels have the same highest score, print the lowest level number. -----Examples----- Input 4 5 -3 4 3 Output 5 1 Input 3 1 1 -2 Output 2 2 Input 5 -1 2 2 -3 5 Output 5 5 -----Note----- In the first example, the scores after each level are [5, 2, 6, 9]. The highest score is 9, which is achieved at level 4. In the second example, the scores after each level are [1, 2, 0]. The highest score is 2, achieved at level 2. In the third example, the scores after each level are [-1, 1, 3, 0, 5]. The highest score is 5, achieved at level 5.","solution":"def find_highest_score_level(n, scores): current_score = 0 highest_score = float(\'-inf\') level_of_highest_score = 0 for i in range(n): current_score += scores[i] if current_score > highest_score: highest_score = current_score level_of_highest_score = i + 1 # converting to 1-indexed level return highest_score, level_of_highest_score"},{"question":"In a kingdom, there are N cities connected by M bidirectional roads. Each city is represented by a unique integer from 1 to N and each road has an associated time required to travel. The king wants to ensure that people in different cities can communicate with each other. There are Q queries, and each query specifies two cities. The goal is to compute the shortest travel time required to go from the first city to the second city. If there\'s no possible path between the two cities, the travel time should be considered infinite. The shortest travel time between two cities i and j can be defined as the sum of the smallest travel times of each road on the path from i to j. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 10000 - 1 ≤ Q ≤ 500 - 1 ≤ u, v ≤ N - 1 ≤ t ≤ 1000 The roads and queries are described as follows: - Each of the M roads is described by three integers u, v, t, meaning there is a road connecting city u and city v with travel time t. - Each of the Q queries is described by two integers p, q, asking for the shortest travel time from city p to city q. -----Input----- Input is given from Standard Input in the following format: N M Q u_1 v_1 t_1 : u_M v_M t_M p_1 q_1 : p_Q q_Q -----Output----- Print Q lines. The i-th line should contain the answer to the i-th query, or \\"INFINITY\\" if there is no path connecting the two cities. -----Sample Input----- 4 4 3 1 2 4 2 3 1 3 4 3 4 1 2 1 3 1 4 2 4 -----Sample Output----- 5 2 4 Explanation: - The first query asks for the shortest travel time from city 1 to city 3. The optimal path is 1 -> 2 -> 3 with a total travel time of 5. - The second query asks for the shortest travel time from city 1 to city 4. The optimal path is 1 -> 4 with a total travel time of 2. - The third query asks for the shortest travel time from city 2 to city 4. The optimal path is 2 -> 3 -> 4 with a total travel time of 4.","solution":"import heapq def shortest_travel_times(N, M, roads, queries): def dijkstra(graph, src): dist = [float(\'inf\')] * N dist[src] = 0 pq = [(0, src)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return dist # Build the graph graph = [[] for _ in range(N)] for u, v, t in roads: graph[u - 1].append((v - 1, t)) graph[v - 1].append((u - 1, t)) # Prepare answers for each query using Dijkstra\'s algorithm answers = [] for src, dest in queries: dist = dijkstra(graph, src - 1) travel_time = dist[dest - 1] if travel_time == float(\'inf\'): answers.append(\\"INFINITY\\") else: answers.append(travel_time) return answers"},{"question":"A popular board game involves moving around a board with numbered tiles. Each tile has a positive integer written on it, and some of these tiles are marked as special tiles. When a player lands on a special tile, they receive a bonus: their score for that tile is doubled. The player makes a single move and can land on any tile. You need to compute the maximum score a player can achieve with a single move. -----Input:----- - First line will contain T, the number of test cases. - For each test case: - The first line contains an integer N, the number of tiles on the board. - The second line contains N integers, indicating the values written on each tile. - The third line contains N integers, where each integer is either 1 (for special tile) or 0 (for regular tile). -----Output:----- For each test case, output a single integer denoting the maximum score a player can achieve with a single move. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq Value on each tile leq 10^9 -----Sample Input:----- 2 5 4 5 2 7 3 0 1 0 1 0 4 2 9 1 8 1 0 0 1 -----Sample Output:----- 14 16","solution":"def max_score(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] values = test_cases[i][1] specials = test_cases[i][2] max_score = 0 for j in range(N): if specials[j] == 1: max_score = max(max_score, 2 * values[j]) else: max_score = max(max_score, values[j]) results.append(max_score) return results"},{"question":"Given an unsorted integer array, find the smallest positive integer that is missing from the array. The task must be solved in O(N) time and uses constant extra space. Example 1: Input: arr[] = {3, 4, -1, 1} Output: 2 Explanation: Smallest positive missing number is 2. Example 2: Input: arr[] = {1, 2, 0} Output: 3 Explanation: Smallest positive missing number is 3. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function findSmallestMissingPositive() that takes an array (arr), sizeOfArray (n), and return the smallest positive missing number. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^{6} -10^6 ≤ A[i] ≤ 10^6","solution":"def findSmallestMissingPositive(arr): Finds the smallest positive integer that is missing from the array. n = len(arr) # Step 1: Segregate positive numbers from the rest for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: # Swap elements to their correct positions correct_pos = arr[i] - 1 arr[i], arr[correct_pos] = arr[correct_pos], arr[i] # Step 2: Find the first index that doesn\'t have the correct element for i in range(n): if arr[i] != i + 1: return i + 1 # Step 3: If all positions are correct, then the missing number is larger than n return n + 1"},{"question":"Jzzhu needs to deliver some parcels using a delivery robot. The delivery map is represented as a grid of size n × m. Each cell in the grid is either empty (represented by 0) or contains an obstacle (represented by -1). The robot can move up, down, left, or right, but cannot move into cells with obstacles. The robot starts at the top-left corner (1, 1) of the grid, and Jzzhu wants the robot to reach the bottom-right corner (n, m). If it is possible for the robot to reach the destination, Jzzhu wants to know the minimum number of moves required for the robot to get there. Write a program to determine the minimum number of moves required to reach the bottom-right corner from the top-left corner. If there is no way to reach the bottom-right corner, return -1. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 1000) which represent the size of the grid. The next n lines each contain m integers, where each integer is either -1 (an obstacle) or 0 (an empty cell). Output: Output a single integer representing the minimum number of moves required to reach the bottom-right corner from the top-left corner. If it is impossible to reach the destination, output -1. Examples: Input: 4 4 0 0 0 0 0 -1 0 0 0 -1 -1 0 0 0 0 0 Output: 6 Input: 3 3 0 -1 0 -1 0 -1 0 -1 0 Output: -1 Note: In the first example, the path with the fewest moves is (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (4, 4), which requires 6 moves. In the second example, there is no valid path to reach the bottom-right corner from the top-left corner.","solution":"from collections import deque def min_moves_to_reach_destination(n, m, grid): if grid[0][0] == -1 or grid[n-1][m-1] == -1: return -1 # Initialize the queue for BFS queue = deque([(0, 0, 0)]) # (x, y, distance) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() # Check if we reached the destination if x == n-1 and y == m-1: return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != -1: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Write a function to evaluate the intersection of two lists and return the resulting elements in reverse order. The intersection of two lists is defined as the set of elements that are present in both lists. Function Signature: ```python def reverse_intersection(lst1: List[int], lst2: List[int]) -> List[int]: ``` **Input:** - `lst1`: A list of integers. (0 <= len(lst1) <= 10^6, -10^9 <= lst1[i] <= 10^9) - `lst2`: A list of integers. (0 <= len(lst2) <= 10^6, -10^9 <= lst2[i] <= 10^9) **Output:** - Return a list of integers representing the intersection of `lst1` and `lst2`, but with the resulting elements in reverse order. **Example 1:** ```python Input: lst1 = [1, 2, 2, 3, 4] lst2 = [2, 4, 4, 5] Output: [4, 2] Explanation: The intersection of [1, 2, 2, 3, 4] and [2, 4, 4, 5] is [2, 4]. Reversing it gives [4, 2]. ``` **Example 2:** ```python Input: lst1 = [10, 15, 20, 30] lst2 = [15, 25, 35, 45] Output: [15] Explanation: The intersection of [10, 15, 20, 30] and [15, 25, 35, 45] is [15]. Reversing it gives [15]. ``` **Example 3:** ```python Input: lst1 = [5, 10, 15, 20] lst2 = [25, 30, 35, 40] Output: [] Explanation: There are no common elements between [5, 10, 15, 20] and [25, 30, 35, 40]. So the result is an empty list. ``` **Your Task:** You don\'t need to read input or print anything. Your task is to complete the function `reverse_intersection(lst1, lst2)` which takes two lists `lst1` and `lst2` as input and returns the list of common elements in reverse order. **Expected Time Complexity:** O(n + m), where n is the length of `lst1` and m is the length of `lst2`. **Expected Auxiliary Space:** O(min(n, m))","solution":"from typing import List def reverse_intersection(lst1: List[int], lst2: List[int]) -> List[int]: This function takes two lists of integers and returns a list of the intersection of the two lists, but with the resulting elements in reverse order. set1 = set(lst1) set2 = set(lst2) intersection = set1.intersection(set2) return sorted(intersection, reverse=True)"},{"question":"Anna likes to collect stamps from different countries. She has a sequence of stamps from multiple countries that she has collected over the years. Anna wants to identify the specific stamp that appears the most frequently in her collection. Help Anna find this stamp. If there are multiple stamps with the same highest frequency, she wants to know the one that appeared first among them in her collection. -----Input----- The first line contains an integer n (1 ≤ n ≤ 2·10^5) — the number of stamps in Anna\'s collection. The second line contains n integers s_1, s_2, ..., s_{n} (1 ≤ s_{i} ≤ 2·10^5) — the stamp identifiers in the order they appear in the collection. -----Output----- Print one integer — the identifier of the stamp that appears most frequently. If multiple stamps are tied for the highest frequency, print the identifier of the stamp that appeared first among them in the collection. -----Examples----- Input 7 5 3 1 3 2 1 3 Output 3 Input 5 4 4 2 2 1 Output 4 -----Note----- In the first example, the stamp with identifier 3 appears three times, which is more frequent than any other stamp. In the second example, stamps with identifiers 4 and 2 both appear twice, but the stamp with identifier 4 appears first in the collection, so it is the answer.","solution":"def most_frequent_stamp(n, stamps): from collections import defaultdict frequency = defaultdict(int) first_occurrence = {} # Calculate frequency and track first occurrence for i, stamp in enumerate(stamps): frequency[stamp] += 1 if stamp not in first_occurrence: first_occurrence[stamp] = i # Find the stamp with the highest frequency and earliest appearance max_frequency = 0 result_stamp = None for stamp, freq in frequency.items(): if (freq > max_frequency) or (freq == max_frequency and first_occurrence[stamp] < first_occurrence[result_stamp]): max_frequency = freq result_stamp = stamp return result_stamp"},{"question":"Given an undirected graph represented as an adjacency list, determine if there exists a path between two specified nodes. The graph has n nodes numbered from 0 to n-1, and the adjacency list is provided as a dictionary. You are given two nodes, source and destination, and you need to check if there exists any path from the source node to the destination node. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of nodes in the graph. The second line contains an integer m (0 ≤ m ≤ 2000) — the number of edges in the graph. Each of the next m lines contains two integers u and v (0 ≤ u, v < n) — indicating there is an edge between node u and node v. The next line contains two integers source and destination (0 ≤ source, destination < n) — the nodes between which you need to determine if a path exists. Output Output \\"YES\\" if there is a path from source to destination, otherwise output \\"NO\\". Examples Input 5 4 0 1 1 2 2 3 3 4 0 4 Output YES Input 3 2 0 1 1 2 0 2 Output YES Input 3 1 0 1 0 2 Output NO Note In the first example, there exists a path from node 0 to node 4 through nodes 1, 2, and 3. In the second example, there is a direct connection from node 0 to node 2 through node 1. In the third example, there isn\'t a path from node 0 to node 2, as there is no edge directly connecting them.","solution":"def is_path_exist(n, m, edges, source, destination): from collections import defaultdict, deque # Step 1: Create an adjacency list from the edges graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Step 2: Perform BFS to check for the path from source to destination visited = set() queue = deque([source]) while queue: node = queue.popleft() if node == destination: return \\"YES\\" if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return \\"NO\\""},{"question":"Write a function that takes an integer array and returns a new array where each element is equal to the product of all the other elements in the original array, without using division. Input will be an integer array with length > 1.","solution":"def product_except_self(nums): Given an array nums, returns an array answer such that answer[i] is equal to the product of all the other elements of nums without using division. :param nums: List[int] :return: List[int] length = len(nums) # Initialize the result array with 1 result = [1] * length # Calculate products of elements to the left of each element left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Calculate products of elements to the right of each element right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"-----Input----- The input contains a single string s of length n (1 ≤ n ≤ 1000) consisting of lowercase English letters. -----Output----- Output a single string which is the longest substring of s that is a palindrome. -----Examples----- Input babad Output bab Input cbbd Output bb Input abcdefghba Output a Input racecar Output racecar Input abracadabra Output aca","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in s. n = len(s) if n == 0: return \\"\\" # Create a table to store the results of subproblems dp = [[False] * n for _ in range(n)] start = 0 max_length = 1 # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = True # Check for sub-strings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 # Checking it for the sub-string from ith index to jth index if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True if length > max_length: start = i max_length = length return s[start:start + max_length]"},{"question":"You are given an array of n integers, 1-based index, and two types of operations that you have to perform on this array: 1. Update the value at a given position. 2. Compute the sum of elements in a given subarray. Both the operations are provided as queries. You need to process these queries in order and output the result of the sum queries only. Input: The first line contains two space-separated integers n and q (1 ≤ n, q ≤ 100000) — the number of elements in the array and the number of queries respectively. The second line contains n space-separated integers a1, a2, ..., an (-10000 ≤ ai ≤ 10000) — the initial elements of the array. The following q lines describe the queries in the given format: - `1 i v` — assign the value v to the element at index i (1 ≤ i ≤ n, -10000 ≤ v ≤ 10000). - `2 l r` — output the sum of the elements in the subarray from index l to index r (1 ≤ l ≤ r ≤ n). Output: For each sum query (type 2), output the result on a new line. Example: Input: 5 5 1 2 3 4 5 2 2 4 1 3 10 2 2 4 1 5 -5 2 1 5 Output: 9 16 13 Explanation: - In the first query, the sum of the subarray from index 2 to index 4 is 2 + 3 + 4 = 9. - In the second query, after updating the third element to 10, the sum of the subarray from index 2 to index 4 is 2 + 10 + 4 = 16. - In the third query, after updating the fifth element to -5, the sum of the subarray from index 1 to index 5 is 1 + 2 + 10 + 4 - 5 = 12.","solution":"def process_queries(n, q, arr, queries): results = [] for query in queries: type_query = query[0] if type_query == 1: i, v = query[1], query[2] arr[i-1] = v elif type_query == 2: l, r = query[1], query[2] results.append(sum(arr[l-1:r])) return results"},{"question":"Write a function that takes in a list of non-negative integers and returns a new list containing the products of all numbers in the original list except the number at that index. You should solve this problem without using division. For example: ```Python product_except_self([1, 2, 3, 4]) => [24, 12, 8, 6] product_except_self([2, 3, 4]) => [12, 8, 6] product_except_self([0, 1, 2, 3]) => [6, 0, 0, 0] product_except_self([1, 0, 3, 0]) => [0, 0, 0, 0] ``` Note: 1. Each element in the result array must be calculated without using the division operation. 2. Handle edge cases, including arrays containing one or more zeros.","solution":"def product_except_self(nums): Returns a list such that each element at index `i` is the product of all the numbers in the original array except the one at `i`. n = len(nums) # Initialize the answer array answer = [1] * n # Calculate prefix products prefix = 1 for i in range(n): answer[i] = prefix prefix *= nums[i] # Calculate suffix products and multiply with prefix products suffix = 1 for i in reversed(range(n)): answer[i] *= suffix suffix *= nums[i] return answer"},{"question":"You are working for a logistics company, and your manager has tasked you with optimizing delivery routes. You have been asked to find the shortest path in a network of cities connected by one-way roads. Each road has a certain travel time associated with it, and the goal is to minimize the total travel time from a starting city to a destination city. The network of cities is represented as a directed graph, with cities as nodes and roads as edges with weights. You are given the number of cities ( n ) and the number of roads ( m ). Additionally, you are given the starting city and the destination city, as well as the list of roads which are represented by three integers each: the start city, the end city, and the travel time. Write a program to determine the minimum travel time from the starting city to the destination city. Input: - The first line contains four integers ( n ) (the number of cities), ( m ) (the number of roads), ( s ) (the starting city), and ( d ) (the destination city). - Each of the next ( m ) lines contains three integers ( u ), ( v ), and ( t ) representing a road from city ( u ) to city ( v ) with travel time ( t ). Output: - Output a single integer, the minimum travel time from the starting city to the destination city. If there is no path from the starting city to the destination city, output -1. Constraints: - ( 1 leq n leq 1000 ) - ( 1 leq m leq 10000 ) - ( 1 leq s, d, u, v leq n ) - ( 0 leq t leq 1000 ) SAMPLE INPUT 4 4 1 3 1 2 5 2 3 10 1 3 15 3 4 5 SAMPLE OUTPUT 15 Explanation: There are 4 cities and 4 one-way roads. The routes and their travel times are given. The shortest travel time from city 1 to city 3 is directly via road with travel time 15. The other possible path (1 -> 2 -> 3) would take a total of 15 time units, but is less direct compared to the direct route.","solution":"import heapq def shortest_path(n, m, s, d, roads): graph = [[] for _ in range(n+1)] for u, v, t in roads: graph[u].append((v, t)) # Use Dijkstra\'s algorithm to find the shortest path def dijkstra(start, end): min_heap = [(0, start)] # (distance, node) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 while min_heap: current_distance, current_node = heapq.heappop(min_heap) if current_node == end: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return -1 if distances[end] == float(\'inf\') else distances[end] return dijkstra(s, d)"},{"question":"You are given a square grid of size n x n. Each cell in the grid represents a room and contains a non-negative integer, indicating the amount of gold in that room. Your task is to maximize the amount of gold you can collect while moving from the top-left room (grid[0][0]) to the bottom-right room (grid[n-1][n-1]). You can only move either down or right at any point in time. Input: An integer n representing the size of the grid (1 ≤ n ≤ 15), followed by n lines each containing n non-negative integers separated by spaces, representing the amount of gold in each room. Output: Print the maximum amount of gold you can collect. SAMPLE INPUT: 3 1 3 1 1 5 1 4 2 1 SAMPLE OUTPUT: 12 Explanation: Starting from (0,0), the optimal path that maximizes the gold collection is 1 -> 3 -> 5 -> 1 -> 2 -> 1, which sums to 12.","solution":"def max_gold(n, grid): # Initialize a 2D dp array with the same size as the grid dp = [[0] * n for _ in range(n)] # Start from the top-left corner dp[0][0] = grid[0][0] # Fill the first row (can only come from left) for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from top) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right corner will have the answer return dp[n - 1][n - 1]"},{"question":"You are given an array of integers representing the available timeslots for meetings in a day. Each element corresponds to a specific time slot and contains either 0 (available) or 1 (booked). You need to find the maximum number of consecutive available timeslots that can be used for scheduling a meeting. Write a function `maxConsecutiveAvailableSlots(arr)` that takes in the array of timeslots and returns the length of the maximum sequence of consecutive available timeslots. -----Input----- - A single list `arr` of length n (1 leq n leq 10^5) containing 0s and 1s, where 0 represents an available slot and 1 represents a booked slot. -----Output----- - An integer representing the length of the maximum sequence of consecutive available timeslots. -----Examples----- Input [1, 0, 0, 1, 0, 0, 0, 1, 0] Output 3 Input [0, 1, 1, 0, 0, 1] Output 2 -----Note----- In the first example, the maximum length of consecutive available timeslots is 3, which occurs from the fifth to seventh index. In the second example, the maximum length of consecutive available timeslots is 2, which occurs from the third to fourth index.","solution":"def maxConsecutiveAvailableSlots(arr): Returns the length of the maximum sequence of consecutive available timeslots. max_count = 0 current_count = 0 for slot in arr: if slot == 0: current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 0 return max_count"},{"question":"A stockbroker wants to analyze historical stock prices to assist in making investment decisions. You are given an array of integers representing the daily stock prices of a particular stock over a given period. The stockbroker wants to identify the maximum possible profit from buying and selling on different days. The goal is to determine the maximum difference between any two prices such that the purchase happens before the sale. Your task is to write a function that finds this maximum profit. Function Description Complete the `maxProfit` function in the editor below. `maxProfit` has the following parameter(s): - `prices`: an list of integers representing daily stock prices Returns - `int`: the maximum profit that can be achieved, or 0 if no profitable transactions are possible Input Format - A single list of integers. Constraints - 0 leq text{length of prices} leq 10^5 - 0 leq text{prices}[i] leq 10^4 Sample Input ``` [7, 1, 5, 3, 6, 4] ``` Sample Output ``` 5 ``` Explanation The best action is to buy on day 2 (price = 1) and sell on day 5 (price = 6), resulting in a profit of 6-1 = 5.","solution":"def maxProfit(prices): Returns the maximum achievable profit from a list of daily stock prices. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: min_price = min(min_price, price) profit = price - min_price max_profit = max(max_profit, profit) return max_profit"},{"question":"Given an array of integers, write a function to identify all the contiguous subarrays within the array that have a sum equal to a specified number. Function Description Complete the function findSubarrays in the editor below. The function should return the number of contiguous subarrays whose sums equal the specified number. findSubarrays has the following parameters: - arr: an array of integers. - target: an integer denoting the target sum. Input Format The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers arr[i], the elements of the array. The third line contains an integer target, the target sum. Constraints 1 leq n leq 10^5 -10^4 leq arr[i] leq 10^4 -10^9 leq target leq 10^9 Output Format Print the number of contiguous subarrays that have a sum equal to target. Sample Input 0 5 1 2 3 4 2 6 Sample Output 0 2 Explanation 0 We find the following subarrays whose sums are equal to the target 6: - [2, 3, 1]: These elements sum to 6. - [4, 2]: These elements also sum to 6. Sample Input 1 4 1 -1 1 -1 0 Sample Output 1 4 Explanation 1 We find the following subarrays whose sums are equal to the target 0: - [1, -1]: These elements sum to 0. - [-1, 1]: These elements sum to 0. - [1, -1, 1, -1]: This entire array sums to 0. - [-1, 1, -1]: These elements sum to 0.","solution":"def findSubarrays(arr, target): Given an array of integers and a target sum, return the number of contiguous subarrays that sum to the specified target. # Dictionary to store the cumulative sum and their frequencies sum_count = {0: 1} cumulative_sum = 0 result = 0 for num in arr: cumulative_sum += num if (cumulative_sum - target) in sum_count: result += sum_count[cumulative_sum - target] if cumulative_sum in sum_count: sum_count[cumulative_sum] += 1 else: sum_count[cumulative_sum] = 1 return result"},{"question":"A famous amusement park has introduced a new roller coaster ride where each car has a specific weight limit, and visitors are weighed before boarding. The goal is to maximize the number of visitors that can ride based on their combined weight and the car\'s weight limit. You are given the following: - An integer `w` representing the weight limit of the car. - An integer `n` representing the number of visitors standing in line. - An array `weights` of length `n` where each element `weights[i]` is the weight of the `i`-th visitor. Write a function called `maxVisitors` which takes in the car\'s weight limit and the list of visitors\' weights and returns the maximum number of visitors that can ride the roller coaster such that their total weight does not exceed the weight limit. Ensure that the visitors are chosen in such a way that the total weight does not exceed the car\'s weight limit, while maximizing the number of riders. Your function must have the following signature: ```python def maxVisitors(w: int, weights: List[int]) -> int: ``` # Input - An integer `w` (1 le w le 10^5) — the weight limit of the car. - An integer `n` (1 le n le 1000) — the number of visitors. - An array `weights` (1 le weights[i] le 1000) — the weights of the visitors. # Output - Return a single integer, the maximum number of visitors that can ride without exceeding the weight limit. # Example ```python assert maxVisitors(10, [3, 5, 4, 2]) == 3 assert maxVisitors(15, [3, 5, 6, 7, 2]) == 4 ```","solution":"from typing import List def maxVisitors(w: int, weights: List[int]) -> int: weights.sort() total_weight = 0 count = 0 for weight in weights: if total_weight + weight <= w: total_weight += weight count += 1 else: break return count"},{"question":"In a kingdom, there are n cities connected by m one-directional roads. Each road has a certain length. The king wishes to establish a new policy such that all cities will have a way to transport goods back and forth efficiently. He wants to ensure that for every pair of cities (i, j), there is a way to transport goods from city i to city j and vice versa. The kingdom’s procurement department can introduce at most k additional roads to meet this requirement, since the cost of building new roads is quite high. Your task is to determine if it\'s possible to ensure that all cities are mutually reachable by adding at most k roads. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input The first line of the input contains three integer numbers n, m, and k (2 ≤ n ≤ 100, 1 ≤ m ≤ 10,000, 0 ≤ k ≤ 50) — the number of cities, the number of existing roads, and the maximum number of additional roads the king can introduce, respectively. The next m lines describe the existing roads. Each road is described by two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating there is a one-directional road from city u to city v. Output Print \\"YES\\" if it is possible to make all cities mutually reachable by adding at most k roads. Otherwise print \\"NO\\". Examples Input 4 4 2 1 2 2 3 3 4 4 1 Output YES Input 3 2 1 1 2 3 1 Output NO Note In the first example, the cities are already mutually reachable, so no additional roads are needed. In the second example, one additional road is not enough to make all three cities mutually reachable. For instance, no single road can connect city 2 and city 3 indirectly via city 1.","solution":"def is_mutually_reachable(n, m, k, roads): from collections import defaultdict, deque def bfs(start, graph, visited): queue = deque([start]) while queue: city = queue.popleft() for neighbor in graph[city]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in roads: graph[u].append(v) reverse_graph[v].append(u) for city in range(1, n + 1): visited = set([city]) bfs(city, graph, visited) if len(visited) != n: needed_roads = n - len(visited) if needed_roads > k: return \\"NO\\" visited = set([city]) bfs(city, reverse_graph, visited) if len(visited) != n: needed_roads = n - len(visited) if needed_roads > k: return \\"NO\\" return \\"YES\\""},{"question":"In a small town, there\'s a library where the librarian wants to keep track of all the books. Each book has a unique ID and a specific category it belongs to. The librarian wants to organize the books such that: 1. Books are grouped by their category. 2. Within each category group, books are sorted by their unique ID. Write a program to help the librarian achieve this task. INPUT: The first line contains an integer N, the number of books. The next N lines contain two space-separated strings: a unique book ID and the category it belongs to. OUTPUT: For each category, print the category name followed by the list of book IDs sorted by their unique ID. Each category should be printed in alphabetical order of the category names, and the book IDs within each category should be sorted in ascending order. SAMPLE INPUT 6 B001 Fiction B002 Non-Fiction B003 Fiction B004 Science B005 Science B006 Non-Fiction SAMPLE OUTPUT Fiction: B001 B003 Non-Fiction: B002 B006 Science: B004 B005","solution":"def organize_books(n, books): Organizes books by category and sorts each category by unique book ID. Parameters: n (int): Number of books. books (list of tuples): Each tuple contains (book_id, category). Returns: dict: A dictionary with categories as keys and sorted list of book IDs as values. from collections import defaultdict books_by_category = defaultdict(list) for book_id, category in books: books_by_category[category].append(book_id) sorted_books = {} for category in sorted(books_by_category): sorted_books[category] = sorted(books_by_category[category]) return sorted_books"},{"question":"You are given a list of words and need to identify the length of the longest word that can be formed by concatenating other words in the list. Words can only be formed using other words from the list, and each word can be used more than once in forming other words. Input: The first line of input contains an integer n, the number of words. The next n lines each contain one word. Output: Output the length of the longest word that can be formed. If no such word can be formed, return 0. Constraints: 1 ≤ n ≤ 1000 1 ≤ length of each word ≤ 100 Example: Input: 6 cat bat rat catbat batcat catrat Output: 6 Explanation: \'catbat\' and \'batcat\' are the longest words that can be formed by concatenating other words in the list, with lengths of 6. Thus, the output is 6.","solution":"def longest_concatenated_word_length(words): Returns the length of the longest word that can be formed by concatenating other words in the list. words_set = set(words) memo = {} def can_form(word): if word in memo: return memo[word] for i in range(1, len(word)): prefix = word[:i] suffix = word[i:] if prefix in words_set and (suffix in words_set or can_form(suffix)): memo[word] = True return True memo[word] = False return False max_length = 0 for word in words: if can_form(word): max_length = max(max_length, len(word)) return max_length # Example usage: # words = [\'cat\', \'bat\', \'rat\', \'catbat\', \'batcat\', \'catrat\'] # print(longest_concatenated_word_length(words)) # Output: 6"},{"question":"You\'re given an array of integers and a target sum. Your task is to determine if any two distinct elements in the array sum up to the given target sum. A pair of elements (a, b) is considered to be \\"distinct\\" if they do not occupy the same index in the array. For example, given the array [1, 2, 3, 4, 5] and the target sum 8, the pair (3, 5) sums up to 8. Hence, the answer in this case is \\"Yes\\". If no such pair exists, the answer should be \\"No\\". Input - The first line of the input contains a single integer n (2 ≤ n ≤ 100,000) — the number of elements in the array. - The second line of the input contains n integers separated by spaces, which are the elements of the array. - The third line contains a single integer t — the target sum. Output - Print \\"Yes\\" if there exists any two distinct elements in the array that sum up to the target sum. Otherwise, print \\"No\\". Examples Input 5 1 2 3 4 5 8 Output Yes Input 4 1 2 3 4 10 Output No","solution":"def has_pair_with_sum(n, arr, target_sum): Determines if there are any two distinct elements in the array that sum up to the given target sum. Parameters: n (int): The number of elements in the array arr (list of int): The array of integers target_sum (int): The target sum Returns: str: \\"Yes\\" if there exist two distinct elements that sum up to the target sum, otherwise \\"No\\". seen = set() for num in arr: if target_sum - num in seen: return \\"Yes\\" seen.add(num) return \\"No\\""},{"question":"Chef is planning a new challenge for the hill jumping competition, where he will also be one of the judges. The competition takes place on a series of platforms with different heights, and participants need to demonstrate their agility by performing jumps according to the judges\' instructions. In this new challenge, there are N platforms in a row, each with an initial height Hi. The judges will give each participant a card with three numbers, i, j, and k. The participants must perform a sequence of jumps starting from the i-th platform and end on the j-th platform after exactly k jumps. Participants can only jump between neighboring platforms. If the number of jumps needed to reach from platform i to platform j is less than or higher than k, it is impossible to perform exactly k jumps to reach from i to j. In such a case, the participant’s result is \\"IMPOSSIBLE\\". Your task is to help Chef by creating a program that will evaluate the participants\' performances based on the given rules. The program should read the initial heights of the platforms and support the following operation: Type: Given three numbers i, j, and k, your program should output whether it is possible to start from the i-th platform and end at the j-th platform after exactly k jumps. If it is possible, output \\"POSSIBLE\\"; otherwise, output \\"IMPOSSIBLE\\". -----Input----- - The first line contains two integers N and Q, denoting the number of platforms and number of queries respectively. - The second line contains N space-separated integers H1, H2, ..., HN denoting the initial heights of the platforms. - Each of the next Q lines describes a query with three integers i, j, and k representing the starting platform, the target platform, and the number of jumps respectively. -----Output----- For each query, output \\"POSSIBLE\\" if it is possible to reach from the i-th platform to the j-th platform after exactly k jumps; otherwise, output \\"IMPOSSIBLE\\". -----Constraints----- - 1 ≤ N, Q ≤ 100,000 - 1 ≤ Hi ≤ 1,000,000 - 1 ≤ i, j ≤ N - 0 ≤ k ≤ 1,000,000 -----Example----- Input: 5 3 2 3 1 5 4 1 3 2 2 5 4 1 4 1 Output: POSSIBLE IMPOSSIBLE POSSIBLE -----Explanation----- - In the first query, it is possible to move from platform 1 to platform 3 in exactly 2 jumps (1 -> 2 -> 3). - In the second query, it is impossible to move from platform 2 to platform 5 in exactly 4 jumps. - In the third query, it is possible to move from platform 1 to platform 4 in exactly 1 jump (1 -> 4).","solution":"def is_possible(n, heights, i, j, k): Determines if it is possible to go from platform i to platform j in exactly k jumps. :param n: Number of platforms :param heights: List of heights of the platforms :param i: Starting platform (1-indexed) :param j: Ending platform (1-indexed) :param k: Exact number of jumps required :return: \\"POSSIBLE\\" if it is possible, otherwise \\"IMPOSSIBLE\\" distance = abs(j - i) if distance <= k and (k - distance) % 2 == 0: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\" # Function to process multiple queries def process_queries(n, heights, queries): results = [] for i, j, k in queries: result = is_possible(n, heights, i, j, k) results.append(result) return results"},{"question":"You are given a list of non-negative integers representing the heights of blocks where each block has a width of 1. Compute how much water is able to be trapped after raining. Example: Given the following block heights: ``` height = [0,1,0,2,1,0,1,3,2,1,2,1] ``` Your function should return `6`, as illustrated in the array below: ``` | | | |#|| | #_|#|| |_#_|#|_| 0 1 0 2 1 0 1 3 2 1 2 1 ``` Explanation: We can trap 6 units of water in this set of blocks.","solution":"def trap(height): Calculate how much water can be trapped after raining. :param height: List[int] - List of non-negative integers representing the heights of blocks. :return: int - Total amount of trapped water. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Alorna is working on a special string manipulator, which can carry out a sequence of operations to modify strings in specific ways. Initially, Alorna has an empty string. She can perform three types of operations: 1. **Append** boldsymbol{s}: Append the string boldsymbol{s} to the end of the current string. 2. **Remove** boldsymbol{k}: Remove the last boldsymbol{k} characters from the current string. 3. **Print** boldsymbol{k}: Print the boldsymbol{k}{}^{th} character of the current string (1-based index). Alorna will perform boldsymbol{Q} operations on the string as per the input and expects the output for the print operations. Input Format - The first line contains boldsymbol{Q}. - The boldsymbol{Q} subsequent lines each contain an operation to be performed in the format described above. Constraints - 1 leq Q leq 10^5 - For the append operation: 1 leq s.length leq 10^4 - For the remove operation: 1 leq k leq current_string.length - For the print operation: 1 leq k leq current_string.length Output Format - For each print operation, output the character in a new line. Sample Input 5 Append abc Print 2 Append xy Remove 3 Print 2 Sample Output b c Explanation - Initially, the string is empty. - After the first operation \\"Append abc\\", the string becomes \\"abc\\". - After the second operation \\"Print 2\\", the output is \'b\'. - After the third operation \\"Append xy\\", the string becomes \\"abcxy\\". - After the fourth operation \\"Remove 3\\", the last three characters \'x\', \'y\', \'c\' are removed, leaving the string as \\"ab\\". - After the fifth operation \\"Print 2\\", the output is \'b\'. Thus, the output is: ``` b c ```","solution":"def string_manipulator(operations): result = [] current_string = [] for operation in operations: parts = operation.split() op = parts[0] if op == \'Append\': current_string.extend(parts[1]) elif op == \'Remove\': k = int(parts[1]) current_string = current_string[:-k] elif op == \'Print\': k = int(parts[1]) result.append(current_string[k - 1]) return result"},{"question":"Your task is to write a function to find the longest common substring of two given strings. A substring is a contiguous block of characters in the string. Write a function `longest_common_substring(s1, s2)` that accepts two strings s1 and s2 and returns the longest common substring between them. If there are multiple longest common substrings with the same length, return any one of them. -----Input----- The function `longest_common_substring(s1, s2)` should accept two strings, `s1` and `s2`, where: - `1 leq len(s1), len(s2) leq 1000` - Strings comprise lowercase English letters only. -----Output----- Return the longest common substring between the two input strings. If there are multiple, return any one of them. -----Examples----- Sample Input: s1 = \\"abcdef\\" s2 = \\"zcdemf\\" Sample Output: \\"cde\\" Sample Input: s1 = \\"geeksforgeeks\\" s2 = \\"geeksquiz\\" Sample Output: \\"geeks\\" Sample Input: s1 = \\"abcdxyz\\" s2 = \\"xyzabcd\\" Sample Output: \\"abcd\\" # or \\"xyz\\" Note: 1. The solution should be efficient in terms of time complexity. 2. Consider edge cases such as when one or both strings are empty, although these are not part of the given input constraints.","solution":"def longest_common_substring(s1, s2): Returns the longest common substring between two provided strings s1 and s2. If there are multiple substrings of the same length, returns any one of them. m, n = len(s1), len(s2) # Creating a 2D array to store lengths of longest common suffixes # substring[i][j] will be the length of the longest common substring # of s1[0...i-1] and s2[0...j-1] substring = [[0] * (n + 1) for _ in range(m + 1)] longest_length = 0 end_index = 0 # End index of the longest common substring in s1 # Build the substring[][] table in a bottom-up fashion for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: substring[i][j] = substring[i - 1][j - 1] + 1 if substring[i][j] > longest_length: longest_length = substring[i][j] end_index = i else: substring[i][j] = 0 # The longest common substring is from end_index - longest_length to end_index in s1 return s1[end_index - longest_length: end_index]"},{"question":"Determine If a String Is a Valid Anagram You are given two strings `s` and `t`. Write a function to determine if `t` is an anagram of `s`. An anagram is formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Example 1: Input: s = \\"anagram\\", t = \\"nagaram\\" Output: True Example 2: Input: s = \\"rat\\", t = \\"car\\" Output: False Your Task: You don\'t need to read or print anything. Your task is to complete the function `isAnagram()` which takes two strings `s` and `t` as parameters and returns a boolean (True or False) indicating if `t` is an anagram of `s`. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1. 1 <= length of `s` <= 5 * 10^4 2. `s` and `t` consist of lowercase English letters.","solution":"def isAnagram(s, t): Determine if t is an anagram of s. Args: s (str): First string. t (str): Second string to check as an anagram of s. Returns: bool: True if t is an anagram of s, otherwise False. if len(s) != len(t): return False count_s = {} count_t = {} for char in s: count_s[char] = count_s.get(char, 0) + 1 for char in t: count_t[char] = count_t.get(char, 0) + 1 return count_s == count_t"},{"question":"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Given a list of words, write a program that groups the words that are anagrams of each other. Input The first line contains an integer n, the number of words in the list (1 ≤ n ≤ 1000). The next n lines each contain a single word. Each word consists of lowercase English letters and its length is at most 100. Output Output the grouped anagrams, with each group of anagrams on a new line. Words within the same group should be printed in the order they appear in the input. The groups should be printed in the order in which their first words appear in the input. Example Input 6 listen silent enlists google inlets banana Output listen silent inlets enlists google banana","solution":"def group_anagrams(n, words): from collections import defaultdict anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) result = [] for key in anagrams: result.append(\' \'.join(anagrams[key])) return result"},{"question":"You are assisting a spy organization to disguise their communication. The spies use a simple substitution cipher to encode and decode messages. The cipher works by replacing each letter in the original alphabet with a corresponding letter from a given key string. For a given message, you have to encode it using the key. If the key doesn\'t have all unique letters, print \\"Invalid key.\\" Any character in the message that is not a lowercase letter should remain unchanged. For example, given the key \\"bcdefghijklmnopqrstuvwxyza\\" and the message \\"hello world\\", the encoded message should be \\"ifmmp xpsme\\". Write a function to encode messages, following these rules: - The function should take 2 strings, key and message, as input. - The key should be a permutation of the lowercase alphabet with each letter appearing exactly once. - If the key is invalid (i.e., does not have 26 unique lowercase letters), print \\"Invalid key\\". - Preserve the spacing and any non-alphabetic characters in the message. Input: The first line contains one string, the key. The second line contains one string, the message to encode. Output: Output the encoded message or \\"Invalid key\\" if the key is invalid. Constraints: - key will have a maximum length of 26 characters. - message can have a length from 1 to 10^5 characters. SAMPLE INPUT 1 bcdefghijklmnopqrstuvwxyza hello world SAMPLE OUTPUT 1 ifmmp xpsme SAMPLE INPUT 2 abcdefghijklmnopqrstuvwxyz quick brown fox SAMPLE OUTPUT 2 rjvdl cpsxq gpy SAMPLE INPUT 3 abcdefghijklmnopqrstuvwxyza spy mission SAMPLE OUTPUT 3 Invalid key Explanation: In the first example, each character in the message \\"hello world\\" is replaced by its corresponding character in the key. In the second example, the message is also encoded correctly. In the third example, the key is invalid because it doesn\'t contain all 26 unique lowercase letters (the letter \'a\' appears twice), so the output is \\"Invalid key\\".","solution":"def encode_message(key, message): Encodes the message using the given substitution cipher key. Parameters: key (str): A string representing the substitution key. message (str): The message to encode. Returns: str: The encoded message or \\"Invalid key\\" if the key is invalid. # Check if the key is valid if len(key) != 26 or len(set(key)) != 26: return \\"Invalid key\\" # Create a dictionary for the substitution cipher alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" cipher_dict = {alphabet[i]: key[i] for i in range(26)} # Encode the message encoded_message = [] for char in message: if char in cipher_dict: encoded_message.append(cipher_dict[char]) else: encoded_message.append(char) return \\"\\".join(encoded_message)"},{"question":"A string is called a K-palindrome if it can be transformed into a palindrome by removing at most K characters. For example, \\"abac\\" is a 1-palindrome because removing the character \'b\' transforms it into \\"aac\\" which is a palindrome. Given a string s and an integer K, determine whether the string is a K-palindrome. -----Input----- The first line contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. Each of the next T pairs of lines contains: - The first line of each test case contains an integer K (1 ≤ K ≤ 10). - The second line of each test case contains a string s (1 ≤ |s| ≤ 1000) — the string to be tested. -----Output----- For each test case, output \\"YES\\" if the string is a K-palindrome, otherwise output \\"NO\\". -----Examples----- Input 3 1 abac 2 racecar 0 hello Output YES YES NO -----Note----- In the first example, \\"abac\\" can be transformed into the palindrome \\"aac\\" by removing 1 character, so it is a 1-palindrome. In the second example, \\"racecar\\" is already a palindrome and needs no removals, so it is a 2-palindrome. In the third example, \\"hello\\" cannot be transformed into a palindrome with 0 removals, so it is not a K-palindrome.","solution":"def is_k_palindrome(s, k): def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] lps_length = longest_palindromic_subsequence(s) return (len(s) - lps_length) <= k def process_test_cases(test_cases): results = [] for k, s in test_cases: if is_k_palindrome(s, k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of n integers and q queries. Each query is one of the following types: 1. 1 l r: print the sum of the elements from index l to r (both inclusive). 2. 2 x y: swap elements at indices x and y. 3. 3 x v: update the element at index x to v. Implement a program to handle these queries efficiently. Input The first line of input contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of queries to be processed. The second line contains n space-separated integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9) — the initial array elements. The next q lines contain the queries. Each query follows one of the following formats: - 1 l r (1 ≤ l ≤ r ≤ n): print the sum of the elements from index l to r (both inclusive). - 2 x y (1 ≤ x, y ≤ n): swap elements at indices x and y. - 3 x v (1 ≤ x ≤ n, |v| ≤ 10^9): update the element at index x to v. Output For each query of the first type, print the sum of the elements from index l to r (both inclusive). Example Input 5 5 1 2 3 4 5 1 1 3 2 2 4 1 2 5 3 3 10 1 1 3 Output 6 15 12 Explanation Initially, the array is [1, 2, 3, 4, 5]. - The sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. - After swapping elements at indices 2 and 4, the array becomes [1, 4, 3, 2, 5]. - The sum of elements from index 2 to 5 is 4 + 3 + 2 + 5 = 14. - After updating the element at index 3 to 10, the array becomes [1, 4, 10, 2, 5]. - The sum of elements from index 1 to 3 is 1 + 4 + 10 = 15.","solution":"class ArrayOperations: def __init__(self, array): self.array = array def sum_range(self, l, r): return sum(self.array[l-1:r]) def swap_elements(self, x, y): self.array[x-1], self.array[y-1] = self.array[y-1], self.array[x-1] def update_element(self, x, v): self.array[x-1] = v"},{"question":"# Problem Description: Tournament Matches Scheduling --- You are organizing a round-robin tournament where every team plays against every other team exactly once. The competition structure ensures each match outcome is either a win for one team or a win for the other team (no draws are allowed). You need to devise a way to track and verify the match results. Your task is to write a function that takes the number of teams `T` and a list of match results. Each result is a tuple `(A, B)` which means Team A won against Team B. The function should return a matrix representing the tournament results. The matrix should be a nested list where the element at index `[i][j]` is: - `1` if Team i won against Team j, - `-1` if Team i lost against Team j, - `0` if i == j (diagonal elements), because a team can\'t play against itself. # Function Signature: ```python def tournament_results(T: int, results: List[Tuple[int, int]]) -> List[List[int]]: pass ``` # Input: - `T`: An integer representing the number of teams. - `results`: A list of tuples where each tuple `(A, B)` indicates that Team A won against Team B. # Output: - A 2D list representing the tournament results matrix. # Examples: ```python # Example 1 T = 3 results = [(0, 1), (1, 2), (2, 0)] print(tournament_results(T, results)) # Output: # [ # [0, 1, -1], # Team 0: Won against 1, Lost to 2 # [-1, 0, 1], # Team 1: Lost to 0, Won against 2 # [1, -1, 0] # Team 2: Won against 0, Lost to 1 # ] # Example 2 T = 4 results = [(0, 1), (0, 3), (1, 2), (3, 1), (3, 2)] print(tournament_results(T, results)) # Output: # [ # [0, 1, 0, 1], # Team 0: Won against 1, 3, did not play against 2 # [-1, 0, 1, -1], # Team 1: Lost to 0, 3, Won against 2 # [0, -1, 0, -1], # Team 2: Lost to 1, 3, did not play against 0 # [-1, 1, 1, 0] # Team 3: Won against 1, 2, Lost to 0 # ] ``` # Constraints: - `2 <= T <= 100` - `0 <= A, B < T` - Each team plays every other team exactly once.","solution":"from typing import List, Tuple def tournament_results(T: int, results: List[Tuple[int, int]]) -> List[List[int]]: # Initialize the results matrix with 0s matrix = [[0] * T for _ in range(T)] # Fill the matrix with the results for A, B in results: matrix[A][B] = 1 # A won against B matrix[B][A] = -1 # B lost against A return matrix"},{"question":"Given a binary tree, write a function to perform in-order traversal (left, root, right) without using recursion or a stack. Your function should return the in-order traversal of the tree as a list of integers. Example 1: Input: 1 2 / 3 Output: [1, 3, 2] Explanation: Inorder traversal of the given binary tree is [1, 3, 2]. Example 2: Input: 4 / 2 5 / 1 3 Output: [1, 2, 3, 4, 5] Explanation: Inorder traversal of the given binary tree is [1, 2, 3, 4, 5]. Your Task: You don\'t need to read input or print anything. Complete the function `inorderTraversal` which takes the root of the binary tree as input and returns the in-order traversal as a list of integers. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) (Morris Traversal uses O(1) space for the traversal process.) Constraints: 1 ≤ Number of nodes ≤ 10^4 Note: The function should use Morris Traversal method to achieve O(1) space complexity.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorderTraversal(root): Perform the in-order traversal of a binary tree using Morris Traversal. :param root: TreeNode, the root of the binary tree :return: List[int], the in-order traversal as a list of integers result = [] current = root while current: if current.left is None: result.append(current.val) current = current.right else: # Find the predecessor predecessor = current.left while predecessor.right and predecessor.right is not current: predecessor = predecessor.right if predecessor.right is None: # Make current as the right child of its predecessor predecessor.right = current current = current.left else: # Revert the changes made in the tree predecessor.right = None result.append(current.val) current = current.right return result"},{"question":"Write a program that calculates the sum of all prime numbers up to a given number n. Constraints * 2 leq n leq 10^4 Input A single integer n is provided in the first line. Output Print the sum of all prime numbers less than or equal to n. Examples Input 10 Output 17 Input 20 Output 77","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_primes(n): Returns the sum of all prime numbers less than or equal to n. total = 0 for i in range(2, n + 1): if is_prime(i): total += i return total"},{"question":"A magical garden is designed using a system of interconnected water pipes. Each pipe either directs water in one of four cardinal directions (North, South, East, West). The connections between the pipes determine the water flow in the garden. The layout of the pipes and the flow they create can be described by a sequence of commands. Each sequence of commands represents the layout and connection of pipes starting from a central reservoir. Positive integers in the commands mark branching points where new pipes start. For example, the command \\"1 N 1 E 3 S\\" indicates that the main pipe heads North, with a branch at the starting point heading East, and another branch at a specific point marked as \\"3\\" heading South. Your task is to determine if two given descriptions of pipe systems represent the same water flow. Two pipe systems are considered the same if they can be transformed into each other by rotating the entire grid 90 degrees (clockwise or counterclockwise) or by shuffling the order of the commands without changing the structure. Input The input consists of multiple pairs of pipe system descriptions followed by a zero to indicate the end of input. For p pairs of descriptions, the format is as follows: pipe-description1-a pipe-description1-b pipe-description2-a pipe-description2-b ... pipe-descriptionp-a pipe-descriptionp-b 0 Each pipe description (pipe-description) is in the format: n elem1 elem2 ... elemm Where n is a positive integer indicating the number of elements, and each element elemi is either one of the four cardinal directions (N, S, E, W), or a positive integer marking a branching point. Output The output should be p lines, with each line containing either \\"Identical\\" if the two descriptions of a pair represent the same system of pipes (after potential rotations or shuffling), or \\"Different\\" if they do not. Examples Input 12 1 N 1 E 2 S 2 W 12 1 N 1 E 2 S 2 W 15 1 N 1 E 2 S 2 W 3 N 15 1 N 2 S 3 N 1 E 2 W 8 1 N 2 E 1 S 2 W 8 1 N 1 E 2 S 2 W 0 Output Identical Different Different","solution":"def normalize_description(description): Normalize the pipe description by sorting elements and handling rotations. parts = description.split() n = int(parts[0]) elements = parts[1:] def rotate90(elements): rotated = [] for el in elements: if el == \'N\': rotated.append(\'E\') elif el == \'E\': rotated.append(\'S\') elif el == \'S\': rotated.append(\'W\') elif el == \'W\': rotated.append(\'N\') else: rotated.append(el) return rotated normalized_sets = set() # Try all rotations to find a normalized form for _ in range(4): normalized_elements = \\"\\".join(rotate90(elements)) normalized_sets.add(normalized_elements) elements = rotate90(elements) return normalized_sets def compare_descriptions(desc1, desc2): Compare two descriptions to check if they are identical after normalization. norm_desc1 = normalize_description(desc1) norm_desc2 = normalize_description(desc2) # Compare all normalized forms return norm_desc1 == norm_desc2 def check_pipe_systems(input_list): For each pair, check if they represent the same pipe system. results = [] for i in range(0, len(input_list) - 1, 2): desc1 = input_list[i] desc2 = input_list[i + 1] if compare_descriptions(desc1, desc2): results.append(\\"Identical\\") else: results.append(\\"Different\\") return results"},{"question":"Design a new coding assessment question according to the given Task, Objective, and Guidelines: Implement a function to generate all distinct palindromic substrings of a given string. A substring is palindromic if it reads the same forward and backward. -----Input----- The input is a single line containing a string `s` consisting of lowercase English letters (1 ≤ |s| ≤ 100). -----Output----- Output the number of distinct palindromic substrings in `s`. -----Examples----- Input abaaa Output 5 Input abc Output 3 -----Note----- In the first example, the distinct palindromic substrings are [\\"a\\", \\"b\\", \\"aa\\", \\"aaa\\", \\"aba\\"]. In the second example, the distinct palindromic substrings are [\\"a\\", \\"b\\", \\"c\\"].","solution":"def count_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the given string s. def is_palindrome(sub): return sub == sub[::-1] n = len(s) substrings = set() for i in range(n): for j in range(i, n): sub = s[i:j+1] if is_palindrome(sub): substrings.add(sub) return len(substrings)"},{"question":"Emma recently discovered an old board game in her attic. The board consists of a grid with `N` rows and `M` columns, where each cell contains either a `0` (representing a blocked cell) or a `1` (representing a free cell through which a player can move). She wants to determine if there is a path from the top-left cell (position `(0, 0)`) to the bottom-right cell (position `(N-1, M-1)`). The player can only move to adjacent cells (right, left, up, and down) and cannot move through blocked cells. Your task is to write a program to help Emma determine if a path exists from the top-left to the bottom-right cell in the given board. Input format: - The first line contains two integers, `N` and `M`, denoting the number of rows and columns in the board, respectively. - Each of the next `N` lines contains `M` space-separated integers, representing the board. Output format: - Print \\"YES\\" if there is a path from the top-left to the bottom-right cell. Otherwise, print \\"NO\\". Constraints: - 1 ≤ N, M ≤ 100 - Each cell in the board contains either `0` or `1`. SAMPLE INPUT 1: 3 3 1 1 0 0 1 1 1 1 1 SAMPLE OUTPUT 1: YES SAMPLE INPUT 2: 3 3 1 0 0 0 1 1 1 1 1 SAMPLE OUTPUT 2: NO Explanation: In the first sample, the path from `(0, 0)` to `(N-1, M-1)` is: (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2). In the second sample, there is no available path from `(0, 0)` to `(N-1, M-1)` due to the blocked cells.","solution":"def is_path_exist(board): Determines if there is a path from the top-left to the bottom-right cell in the given board. if not board or board[0][0] == 0 or board[-1][-1] == 0: return \\"NO\\" def dfs(x, y): if x < 0 or x >= len(board) or y < 0 or y >= len(board[0]) or board[x][y] == 0: return False if (x, y) == (len(board) - 1, len(board[0]) - 1): return True board[x][y] = 0 # Mark as visited to prevent loops # Explore all four possible directions if (dfs(x + 1, y) or dfs(x - 1, y) or dfs(x, y + 1) or dfs(x, y - 1)): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Given an array of integers textbf{arr} and an integer boldsymbol{k}, determine the maximum number of distinct integers present in any subarray of length boldsymbol{k}. A subarray is a contiguous part of an array. For example, if textbf{arr} = [4, 1, 2, 1, 3, 1, 2, 1, 3] and boldsymbol{k} = 5, the subarrays of length boldsymbol{k} are: [4, 1, 2, 1, 3] [1, 2, 1, 3, 1] [2, 1, 3, 1, 2] [1, 3, 1, 2, 1] [3, 1, 2, 1, 3] The number of distinct integers in these subarrays are: 4 (subarray [4, 1, 2, 1, 3]) 3 (subarray [1, 2, 1, 3, 1]) 3 (subarray [2, 1, 3, 1, 2]) 3 (subarray [1, 3, 1, 2, 1]) 3 (subarray [3, 1, 2, 1, 3]) Hence, the maximum number of distinct integers in any subarray of length boldsymbol{k} is 4. Function Description Complete the maxDistinctInSubarray function in the editor below. It must return an integer representing the maximum number of distinct integers in any subarray of length boldsymbol{k}. maxDistinctInSubarray has the following parameter(s): arr: an array of integers k: an integer, the length of the subarray Input Format The first line contains a single integer boldsymbol{n}, the length of the array textbf{arr}. The second line contains boldsymbol{n} space-separated integers, the elements of textbf{arr}. The third line contains the integer boldsymbol{k}. Constraints 1 leq n leq 10^5 1 leq arr[i] leq 10^5 1 leq k leq n Output Format Return the maximum number of distinct integers in any subarray of length boldsymbol{k}. Sample Input 0 7 2 1 2 3 4 1 2 4 Sample Output 0 4 Explanation 0 Here textbf{arr} = [2, 1, 2, 3, 4, 1, 2] and k = 4. Testing all subarrays of length 4: [2, 1, 2, 3] has 3 distinct integers: 2, 1, 3 [1, 2, 3, 4] has 4 distinct integers: 1, 2, 3, 4 [2, 3, 4, 1] has 4 distinct integers: 2, 3, 4, 1 [3, 4, 1, 2] has 4 distinct integers: 3, 4, 1, 2 The maximum number of distinct integers in any subarray of length 4 is 4. Sample Input 1 5 3 3 3 3 3 3 Sample Output 1 1 Explanation 1 Here textbf{arr} = [3, 3, 3, 3, 3] and k = 3. Testing all subarrays of length 3: [3, 3, 3] has 1 distinct integer: 3 In all cases, the number of distinct integers is 1. Thus, the maximum number of distinct integers in any subarray of length 3 is 1.","solution":"def maxDistinctInSubarray(arr, k): from collections import defaultdict max_distinct = 0 current_count = defaultdict(int) distinct_cnt = 0 for i in range(len(arr)): if current_count[arr[i]] == 0: distinct_cnt += 1 current_count[arr[i]] += 1 if i >= k: if current_count[arr[i - k]] == 1: distinct_cnt -= 1 current_count[arr[i - k]] -= 1 if i >= k - 1: max_distinct = max(max_distinct, distinct_cnt) return max_distinct"},{"question":"You are organizing a marathon, and you need to determine the time ranking of runners based on their completion times. Each runner has a unique ID and a list of segments they have completed. Each segment has a completion time in seconds. The final time for each runner is the sum of their segment completion times. Write a function that takes a list of runners and returns a list of objects representing the runners ranked by their total time. If two or more runners have the same total time, rank them by their ID in ascending order. Each runner object contains the “id” and “segments” properties. For example, given the input: ``` [ {id: \\"runner1\\", segments: [300, 200, 400]}, {id: \\"runner2\\", segments: [250, 300, 350]}, {id: \\"runner3\\", segments: [300, 200, 100]} ] ``` The function should return the following output: ``` [ {id: \\"runner3\\", total_time: 600}, {id: \\"runner1\\", total_time: 900}, {id: \\"runner2\\", total_time: 900} ] ``` Note that if two runners have the same total time, they should be ordered by their ID in ascending order.","solution":"def rank_runners(runners): Ranks runners based on their completion times. Parameters: runners (list of dict): List of runners, each with an \\"id\\" and \\"segments\\" properties. Returns: list of dict: List of runners with their \\"id\\" and \\"total_time\\", ranked by total_time and id. # Calculate total time for each runner for runner in runners: runner[\'total_time\'] = sum(runner[\'segments\']) # Sort runners by total_time, and then by id if total_time is the same ranked_runners = sorted(runners, key=lambda runner: (runner[\'total_time\'], runner[\'id\'])) # Form the final output return [{\'id\': runner[\'id\'], \'total_time\': runner[\'total_time\']} for runner in ranked_runners]"},{"question":"Alice loves squares and unique colors. She has a board divided into an `n x n` grid. Each cell in the grid can be painted in any one color. Alice finds a grid beautiful if no two adjacent cells (horizontally or vertically) have the same color. She wants to paint the entire grid in the most beautiful way possible using exactly `k` different colors. Given the size of the grid `n` and the number of colors `k`, can you find a way to paint the grid beautifully? If it is possible, provide one possible configuration; otherwise, state that it is not possible. -----Input----- The first line contains an integer `T` denoting the number of test cases. Each of the next `T` lines describes a test case, which contains two space-separated integers `n` and `k`. -----Output----- For each test case, if it is possible to paint the grid, output \\"YES\\" followed by the grid configuration in `n` lines with `n` integers each representing the colors for that cell (`0` to `k-1`). If it is not possible, output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 1000 - 1 ≤ k ≤ 100 -----Example----- Input: 2 3 4 4 2 Output: YES 0 1 2 1 2 3 2 3 0 YES 0 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 -----Explanation----- Example case 1. With `n=3` and `k=4`, it\'s possible to paint the grid in such a way that no two adjacent cells have the same color. Example case 2. With `n=4` and `k=2`, we can paint the grid in a checkerboard pattern using 2 colors.","solution":"def can_paint_grid(T, test_cases): results = [] for n, k in test_cases: if k < 2 and n > 1: results.append(\\"NO\\") continue result = [[\\"\\" for _ in range(n)] for _ in range(n)] for i in range(n): for j in range(n): result[i][j] = (i + j) % k results.append(\\"YES\\") results.append(\\"n\\".join(\\" \\".join(map(str, row)) for row in result)) return results def main(input_string): input_lines = input_string.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [tuple(map(int, line.split())) for line in input_lines[1:]] results = can_paint_grid(T, test_cases) return \\"n\\".join(results)"},{"question":"You are working on a project management software and need to implement a feature to distribute tasks among team members. Each task has a unique name, a priority level, and a time estimate in hours required to complete the task. Your goal is to assign tasks to team members in such a way that each team member gets approximately the same total estimated time of tasks. You can assume that each team member has the same capacity and can handle any type of task. -----Input----- Input consists of: - A line containing two integers T, the number of tasks, with 1 leq T leq 100, and M, the number of team members, with 1 leq M leq 20. - T lines, each containing a string name representing the task name (unique, with a maximum length of 50 characters), an integer priority representing the priority level of the task (1 = high, 2 = medium, 3 = low), and an integer time representing the estimated time in hours (1 leq time leq 100) to complete the task. -----Output----- Output M lines, each containing the names of the tasks assigned to a particular team member, separated by a space. The output does not need to specify which line corresponds to which team member, just that each team member\'s line contains their assigned tasks. Ensure the distribution aims for an approximately equal total estimated time for each team member. -----Examples----- Sample Input 1: 4 2 task1 1 3 task2 2 5 task3 1 2 task4 3 4 Sample Output 1: task1 task3 task2 task4 Sample Input 2: 5 3 task1 2 4 task2 1 6 task3 3 8 task4 2 3 task5 1 2 Sample Output 2: task1 task5 task2 task3 task4","solution":"def distribute_tasks(T, M, tasks): Distributes tasks among team members to balance the total estimated time of tasks for each member. Parameters: T (int): The number of tasks. M (int): The number of team members. tasks (List[Tuple[str, int, int]]): A list of tuples where each tuple contains task name, priority, and time. Returns: List[List[str]]: A list of lists where each list contains the task names assigned to a particular team member. sorted_tasks = sorted(tasks, key=lambda x: x[2], reverse=True) result = [[] for _ in range(M)] times = [0] * M for task in sorted_tasks: least_loaded_member = times.index(min(times)) result[least_loaded_member].append(task[0]) times[least_loaded_member] += task[2] return result"},{"question":"In a distant kingdom, there is a carnival held every year, and one of the main attractions is an entertaining game where participants have to guess a hidden sequence of numbers. The game master gives a few hints to help the participants. You are given an array of integers `A` of size `N` and an integer `D`. The game master performs the following operation to generate the hints: 1. For every index `i` (1 ≤ i ≤ N - D + 1), consider the subarray `A[i...i+D-1]` (a subarray of length `D`). 2. Compute the maximum and minimum values in this subarray. 3. Compute the absolute difference between these maximum and minimum values. You are required to write a program to reproduce the hints for your friends. Input format: - The first line contains two space-separated integers, `N` and `D` representing the size of the array `A` and the length of the subarray. - The second line contains `N` space-separated integers representing the elements of array `A`. Output format: - Output the result for every subarray of length `D`. Each result should be printed on a new line in the order mentioned above. Constraints: 1 ≤ N ≤ 10^5 1 ≤ D ≤ N 1 ≤ A[i] ≤ 10^9 SAMPLE INPUT 6 3 1 3 4 1 5 2 SAMPLE OUTPUT 3 3 4 4 Explanation: For the given array A = [1, 3, 4, 1, 5, 2] and D = 3: 1. Subarray [1, 3, 4] -> max: 4, min: 1, |4 - 1| = 3 2. Subarray [3, 4, 1] -> max: 4, min: 1, |4 - 1| = 3 3. Subarray [4, 1, 5] -> max: 5, min: 1, |5 - 1| = 4 4. Subarray [1, 5, 2] -> max: 5, min: 1, |5 - 1| = 4","solution":"def compute_hints(N, D, A): Given an array A of size N and an integer D, compute the maximum and minimum difference within each subarray of length D. results = [] for i in range(N - D + 1): subarray = A[i:i + D] difference = max(subarray) - min(subarray) results.append(difference) return results def parse_input(input_str): Parse the input string and return the values of N, D, and A. lines = input_str.strip().split(\\"n\\") N, D = map(int, lines[0].split()) A = list(map(int, lines[1].split())) return N, D, A def hints_from_input(input_str): Takes raw input string and returns the computed hints as a list of integers. N, D, A = parse_input(input_str) return compute_hints(N, D, A)"},{"question":"Given an array of integers nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums. Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. Note: The given array is guaranteed to contain at least one element. Example 1: Input: nums = [1, 1, 2] Output: 2, nums = [1, 2, _] Explanation: The function should return the number of unique elements, which is 2. You should modify the input array to contain these unique elements first: [1, 2], followed by any values. It doesn\'t matter what you leave beyond the returned count. Example 2: Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: 5, nums = [0, 1, 2, 3, 4, _, _, _, _, _] Explanation: The function should return the number of unique elements, which is 5. You should modify the input array to contain these unique elements first: [0, 1, 2, 3, 4], followed by any values. It doesn\'t matter what you leave beyond the returned count. Constraints: - 1 <= nums.length <= 3 * 104 - -100 <= nums[i] <= 100 - nums is sorted in non-decreasing order.","solution":"def remove_duplicates(nums): Removes duplicates from sorted array in place and returns the number of unique elements. Args: nums (List[int]): The input sorted list of integers. Returns: int: The number of unique elements in the list. if not nums: return 0 unique_count = 1 # Start with the first element being unique for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[unique_count] = nums[i] unique_count += 1 return unique_count"},{"question":"Given an array of positive integers representing the amount of time required to complete each task, and an integer limit representing the maximum amount of time you can spend, determine the maximum number of tasks you can complete without exceeding the limit. ``` For example: Given tasks = [2, 1, 3, 2, 4, 1] and limit = 5... max_tasks([2, 1, 3, 2, 4, 1], 5) = 3. The maximum number of tasks you can complete are [2, 1, 1], which takes 4 units of time. Given tasks = [4, 2, 1, 3, 5] and limit = 7... max_tasks([4, 2, 1, 3, 5], 7) = 3. The maximum number of tasks you can complete are [2, 1, 3], which takes exactly 7 units of time. Given tasks = [5, 3, 8, 2] and limit = 6... max_tasks([5, 3, 8, 2], 6) = 2. The maximum number of tasks you can complete are [5, 1], which takes 6 units of time. ``` You may assume that the input array and limit are all positive integers. More examples in test cases. Good luck!","solution":"def max_tasks(tasks, limit): Determines the maximum number of tasks that can be completed without exceeding the given time limit. Args: tasks (list): List of positive integers representing the time required for each task. limit (int): Maximum amount of time that can be spent. Returns: int: Maximum number of tasks that can be completed without exceeding the limit. tasks.sort() time_spent = 0 count = 0 for task in tasks: if time_spent + task <= limit: time_spent += task count += 1 else: break return count"},{"question":"A company has an employee directory which contains information about all employees and their managers. Each employee, except the CEO, has one direct manager. Given the employee-manager relationships, you need to find out the common manager of two given employees. The employee-manager relationships are given in the following format: Employee name, followed by a space, followed by \\"->\\", followed by a single space, and then the manager\'s name. There will be one relationship per line. The first line specifies the relationship of the CEO with no manager in the format \\"CEO -> None\\". Employee name and manager name are non-empty sequences of English letters. Each name will consist of at most 50 characters and is unique. Input: - The first line will be a string representing the employee-manager relationship of the CEO. - The next lines will be strings representing employee-manager relationships. - The next two lines will be the names of the two employees for whom you need to find the common manager. Output: - The name of the common manager with the fewest levels between them and the CEO (including the CEO if applicable). You may assume that no cyclic relationships exist in the hierarchy and that the two employee names will always be valid and present in the input. Input CEO -> None Alice -> Bob Bob -> Martin Sophie -> Alice Martin -> None Jake -> Sophie Edward -> Sophie Alice Jake Output Bob Input CEO -> None David -> CEO Sarah -> CEO Alan -> David Emma -> David Lucas -> Sarah Sophia -> Sarah Emma Lucas Output CEO","solution":"def find_common_manager(employee_relations, emp1, emp2): # Create a dictionary to store employee to manager mapping emp_to_manager = {} # Process the employee-manager relationships for relation in employee_relations: emp, manager = relation.split(\' -> \') emp_to_manager[emp] = manager # Function to find the hierarchy path from employee to CEO def get_hierarchy_path(emp): path = [] while emp != \\"None\\": path.append(emp) emp = emp_to_manager[emp] return path # Get the hierarchy paths for both employees path1 = get_hierarchy_path(emp1) path2 = get_hierarchy_path(emp2) # Reverse the paths to start from the CEO path1.reverse() path2.reverse() # Find the common manager with the fewest levels between them common_manager = None for m1, m2 in zip(path1, path2): if m1 == m2: common_manager = m1 else: break return common_manager"},{"question":"Given a string S consisting of lowercase English letters, Chef wants to perform the following operation any number of times (including zero): Select any two adjacent characters in the string and replace them with one of those two characters. For example, if the string is \\"ab\\", you can either replace it with \\"a\\" or \\"b\\". Chef wants to make the string as short as possible. Since he is busy with other work, help Chef determine the minimum possible length of the string S after performing the operation described any number of times. ------ Input Format ------ - The first line of input contains a single integer T , denoting the number of test cases. - Each of the next T lines contains a single string S . ------ Output Format ------ For each test case, output the minimum possible length of the string S after the operations. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ text{length of } S ≤ 100 ----- Sample Input 1 ------ 3 abacb aaaa ab ----- Sample Output 1 ------ 1 1 1 ----- explanation 1 ------ Test case 1: The string \\"abacb\\" can be reduced to a single character \\"a\\" or \\"b\\". Test case 2: The string \\"aaaa\\" is already composed of identical characters, so the length can be reduced to 1 by choosing any of the \'a\'s. Test case 3: The string \\"ab\\" can be reduced to either \\"a\\" or \\"b\\".","solution":"def min_possible_length_after_operations(T, strings): Returns a list containing the minimum possible length of the strings after performing the given operations. Args: - T: An integer denoting the number of test cases. - strings: A list of input strings, one for each test case. Returns: - A list of integers representing the minimum possible length of each string after performing the operations. # the minimum possible length of any string after performing the operations # is 1, since we can always reduce it down to any character in the string return [1 for _ in range(T)]"},{"question":"You are given a rectangular grid of size N x M representing a map where each cell in the grid contains either a 1 (land) or 0 (water). An island is formed by a group of connected 1\'s horizontally or vertically. Find the maximum area of an island in the given grid. The area of an island is the number of cells with a value 1 in the island. If there are no islands, the maximum area is 0. Example 1: Input: [ [0,1,0,1,0], [1,1,0,1,1], [0,0,0,1,0], [1,1,0,0,0] ] Output: 4 Explanation: The grid contains multiple islands. The largest island has an area of 4 connected lands. Example 2: Input: [ [1,0], [0,1] ] Output: 1 Explanation: Each cell with 1 forms an island of area 1. Note: - The given grid will have at most 50 rows and 50 columns.","solution":"def max_area_of_island(grid): Finds the maximum area of an island in a grid. :param grid: List[List[int]]: 2D grid where 1 represents land and 0 represents water. :return: int: Maximum area of an island. if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == 0 or visited[r][c]: return 0 visited[r][c] = True return (1 + dfs(r+1, c) + dfs(r-1, c) + dfs(r, c+1) + dfs(r, c-1)) max_area = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1 and not visited[r][c]: max_area = max(max_area, dfs(r, c)) return max_area"},{"question":"Given a sorted linked list with head node root, write a function to remove all duplicates such that each element appears only once. Return the root of the modified list. Examples 1->1->2 Output: [1, 2] Example 1: Input: root = [1, 1, 2] Output: [1, 2] Explanation: The input root has root.val = 1, root.next.val = 1, root.next.next.val = 2, and root.next.next.next is null. The output should be a list where each element appears only once. Example 2: Input: root = [1, 1, 2, 3, 3] Output: [1, 2, 3] Explanation: The input root has duplicates, but the output should have each element appearing only once in sorted order. Note: The length of root will be in the range [0, 1000]. Each value of a node in the input will be an integer in the range [0, 999].","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def delete_duplicates(root): Removes duplicates from a sorted linked list. :param root: ListNode representing the head of the list. :return: ListNode representing the head of the modified list. current = root while current and current.next: if current.val == current.next.val: current.next = current.next.next else: current = current.next return root def list_to_linkedlist(arr): if not arr: return None head = ListNode(arr[0]) current = head for val in arr[1:]: current.next = ListNode(val) current = current.next return head def linkedlist_to_list(root): result = [] current = root while current: result.append(current.val) current = current.next return result"},{"question":"Write a function that returns all the prime numbers up to a given integer n. The function should use the Sieve of Eratosthenes algorithm. In this algorithm, you iterate from 2 to the square root of n, marking the multiples of each prime number starting from 2. The function should take one argument (an integer n) and return a list of all prime numbers less than or equal to n. For example, for n = 30, the function should return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]. Test cases will provide various values of n up to 10^6. Ensure your solution is efficient and can handle large values of n within reasonable time limits.","solution":"def sieve_of_eratosthenes(n): Returns all prime numbers up to a given integer n using the Sieve of Eratosthenes algorithm. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False p = 2 while p * p <= n: if is_prime[p]: for multiple in range(p * p, n + 1, p): is_prime[multiple] = False p += 1 return [num for num in range(2, n + 1) if is_prime[num]]"},{"question":"Create the reverse phrase. Write a function that takes a string as input and returns a new string where the order of characters in each word is reversed, but the order of words remains the same. Words are separated by spaces, and you should ensure that multiple spaces between words are preserved in the output. Example ```python Input: \\"Hello world\\" Output: \\"olleH dlrow\\" ``` ```python Input: \\"Python is fun\\" Output: \\"nohtyP si nuf\\" ```","solution":"def reverse_phrase(s): Returns a new string where the order of characters in each word is reversed, but the order of words remains the same. Multiple spaces between words are preserved. return \' \'.join(word[::-1] for word in s.split(\' \'))"},{"question":"Sarah loves creating mosaics using colored tiles. She has a variety of colors, and each color is represented by an uppercase letter. She wants to create a continuous pattern on a wall that can be divided into identical segments. Your task is to determine the minimum length of such a segment. This segment should be the smallest possible length such that repeating it multiple times constructs the original mosaic pattern. For example, if the pattern is \\"ABABAB\\", the smallest segment that can be repeated to form this pattern is \\"AB\\". For the pattern \\"AAAA\\", the smallest segment is \\"A\\". Write a program that takes several mosaic patterns and determines the minimum segment length for each one. Input The input consists of several test cases. The first line contains the number of test cases, T (1 ≤ T ≤ 100). Each of the following T lines contains a string representing a mosaic pattern. Each string is between 1 and 100 characters long and consists only of uppercase letters. Output For each test case, print the minimum segment length that can be repeated to recreate the original mosaic pattern. Example Input 3 ABABAB AAAA ABCABC Output 2 1 3","solution":"def min_segment_length(pattern): Returns the minimum length of the segment that can be repeated to form the pattern. n = len(pattern) for i in range(1, n + 1): if n % i == 0: if pattern[:i] * (n // i) == pattern: return i return n def find_min_segment_lengths(test_cases): Input: list of strings representing mosaic patterns Output: list of integers with the minimum segment length for each pattern results = [] for pattern in test_cases: results.append(min_segment_length(pattern)) return results"},{"question":"Define a function `frequencyCounter` that takes a list of strings as input and returns a dictionary with the frequency count of each string. The keys in the dictionary should be the strings from the list, and the values should be the corresponding counts of how often they appear in the list. You should ignore the case when counting the frequencies. For example, `frequencyCounter([\'apple\', \'Banana\', \'Apple\', \'banana\', \'Cherry\', \'cherry\', \'cherry\'])` should return ``` {\'apple\': 2, \'banana\': 2, \'cherry\': 3} ```","solution":"def frequencyCounter(lst): Returns a dictionary with the frequency count of each string in the list, ignoring case. Parameters: lst (list of str): A list of strings to count frequencies for. Returns: dict: A dictionary with the strings as keys and their frequency counts as values. freq = {} for item in lst: item_lower = item.lower() if item_lower in freq: freq[item_lower] += 1 else: freq[item_lower] = 1 return freq"},{"question":"Task: Write a function `number_matrix` that generates a matrix of numbers in a spiral order, given an integer `n`. The function should return the matrix as a list of lists. Input: - An integer `n` (1 <= n <= 20) Output: - A 2D list representing the matrix of numbers in a spiral order. # Examples: + number_matrix(3): [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] + number_matrix(4): [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] # Note: - The number sequence starts from 1 and increases sequentially. - The numbers fill the matrix in a clockwise spiral order. ```py def number_matrix(n): # Your code here # You can then call the function with any integer value between 1 and 20 inclusive # For example, calling number_matrix(3) should return the 3x3 matrix in spiral order as shown in the examples. ```","solution":"def number_matrix(n): Generates a matrix of numbers in a spiral order. Parameters: n (int): The size of the matrix (1 <= n <= 20) Returns: List[List[int]]: A 2D list representing the matrix in spiral order. # Initialize the matrix with zeros matrix = [[0] * n for _ in range(n)] # Define the directions for movement (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] curr_dir = 0 # Start by moving to the right row, col = 0, 0 # Start at the top-left corner for num in range(1, n * n + 1): matrix[row][col] = num # Calculate the next position next_row, next_col = row + directions[curr_dir][0], col + directions[curr_dir][1] # Check if the next position is within bounds and not yet visited if 0 <= next_row < n and 0 <= next_col < n and matrix[next_row][next_col] == 0: row, col = next_row, next_col else: # Change direction curr_dir = (curr_dir + 1) % 4 row, col = row + directions[curr_dir][0], col + directions[curr_dir][1] return matrix"},{"question":"You are given a 2D grid of characters and a string. The grid and the string are guaranteed to contain only uppercase English letters. The goal is to determine if the string can be found in the grid by moving either right or down (but not diagonally). The string can start at any cell in the grid. -----Constraints----- - 1 leq n, m leq 100 - 1 leq |S| leq 100 - All values in input are integers or strings. -----Input----- Input is given from Standard Input in the following format: n m grid S The first line contains two integers, n and m, representing the number of rows and columns in the grid. The next n lines each contain m characters, representing the grid. The final line contains the string S that we need to search for within the grid. -----Output----- Print \\"YES\\" if the string can be found, otherwise print \\"NO\\". -----Sample Input----- 3 4 ABCE SFCS ADEE SFC -----Sample Output----- YES -----Explanation----- Starting from the cell (3, 1) of the grid, the string \\"SFC\\" can be found going right in the first row of the grid. Thus, the answer is \\"YES\\".","solution":"def can_find_string(grid, n, m, S): length = len(S) def search_right(x, y): if y + length > m: return False for i in range(length): if grid[x][y + i] != S[i]: return False return True def search_down(x, y): if x + length > n: return False for i in range(length): if grid[x + i][y] != S[i]: return False return True for i in range(n): for j in range(m): if search_right(i, j) or search_down(i, j): return \\"YES\\" return \\"NO\\" def main(): import sys input = sys.stdin.read data = input().split() n, m = int(data[0]), int(data[1]) grid = [data[i + 2] for i in range(n)] S = data[-1] result = can_find_string(grid, n, m, S) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Write a program that finds the length of the longest increasing subsequence in a given sequence. The algorithm should be based on dynamic programming technique. Constraints 1 ≤ N ≤ 1000 1 ≤ Ai ≤ 10000 Input The first line of the input includes an integer N, the number of elements in the sequence. In the second line, N elements of the sequence are given separated by spaces characters. Output The output consists of a single line: the length of the longest increasing subsequence. Examples Input 6 10 22 9 33 21 50 Output 4 Input 5 1 2 1 5 3 Output 3","solution":"def length_of_lis(sequence): Returns the length of the longest increasing subsequence in the given sequence. if not sequence: return 0 n = len(sequence) dp = [1] * n # dp array initialized to 1 for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given two sorted arrays arr1 and arr2 of size n and m respectively. Your task is to find intersections of these two arrays, i.e., elements common to both arrays. The intersection should be sorted in increasing order. -----Input----- - The first line contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers n and m denoting the sizes of the two arrays arr1 and arr2. - The second line contains n space-separated integers denoting the elements of arr1. - The third line contains m space-separated integers denoting the elements of arr2. -----Output----- For each test case, output a single line containing the sorted intersection of the two arrays. If there are no common elements, print \\"empty\\". -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ n, m ≤ 100 - 1 ≤ arr1[i], arr2[i] ≤ 1000 -----Example----- Input 3 5 6 1 2 4 5 6 2 3 5 7 9 10 3 3 1 2 3 4 5 6 4 5 1 3 4 5 1 3 4 5 6 Output 2 5 empty 1 3 4 5 -----Explanation----- Example case 1: The common elements of the two arrays are [2, 5], which are sorted and printed. Example case 2: There are no common elements between [1, 2, 3] and [4, 5, 6], so the output is \\"empty\\". Example case 3: The common elements of the two arrays are [1, 3, 4, 5], which are already sorted.","solution":"def find_intersection(n, arr1, m, arr2): Returns the intersection of two sorted arrays. # Use set to find the intersection set1 = set(arr1) set2 = set(arr2) # Find the common elements intersection = list(set1 & set2) # If empty, return string \\"empty\\" if not intersection: return \\"empty\\" # Sort the intersection before returning intersection.sort() return \\" \\".join(map(str, intersection)) def process_test_cases(T, test_cases): Process multiple test cases and return the results. results = [] for i in range(T): n = test_cases[i][0] m = test_cases[i][1] arr1 = test_cases[i][2] arr2 = test_cases[i][3] result = find_intersection(n, arr1, m, arr2) results.append(result) return results"},{"question":"You are given an array of integers representing the positions of houses along a straight street where some people want to place flower pots. A flower pot can be placed in front of a house, but not directly between houses. Additionally, no two flower pots can be placed at the same position. Given an integer \'k\', return the maximum number of flower pots that can be placed according to the rules described above. Example 1: Input: houses = [1, 2, 3, 7, 10], k = 3 Output: 3 Explanation: One way to place flower pots is at positions 4, 8, and 11. - Place a pot at position 4 (between houses 3 and 7) - Place a pot at position 8 (between houses 7 and 10) - Place a pot at position 11 (after house 10) Thus a total of 3 flower pots can be placed. Example 2: Input: houses = [1, 2, 3, 7], k = 2 Output: 2 Explanation: One way to place flower pots is at positions 4 and 8. - Place a pot at position 4 (between houses 3 and 7) - Place a pot at position 8 (after house 7) Thus a total of 2 flower pots can be placed. Note: 1. The array houses is sorted in strictly increasing order. 2. 1 <= houses.length <= 1000 3. 1 <= k <= 1000 4. 1 <= houses[i] <= 10000","solution":"def max_flower_pots(houses, k): Returns the maximum number of flower pots that can be placed according to the rules described in the question. max_pos = 0 max_pots = 0 n = len(houses) # To place k flower pots, the maximum position required is the last house position + k max_pos = houses[-1] + k for i in range(1, k + 1): if houses[-1] + i <= max_pos: max_pots += 1 # Check between the houses for i in range(1, n): if houses[i] - houses[i - 1] > 1: max_pots += 1 if max_pots < k else 0 return max_pots"},{"question":"You are given a list of strings where each string consists of lowercase alphabets. Your task is to find the longest string chain that can be formed from the given list. A string chain is defined as follows: if a string A can be reduced to string B by removing exactly one character, then A is considered to be chained to B. Your goal is to determine the length of the longest possible string chain. Example 1: Input: words = [\\"a\\", \\"b\\", \\"ba\\", \\"bca\\", \\"bda\\", \\"bdca\\"] Output: 4 Explanation: The longest chain is \\"a\\" -> \\"ba\\" -> \\"bda\\" -> \\"bdca\\". Example 2: Input: words = [\\"xbc\\", \\"pcxbcf\\", \\"xb\\", \\"cxbc\\", \\"pcxbc\\"] Output: 5 Explanation: The longest chain is \\"xb\\" -> \\"xbc\\" -> \\"cxbc\\" -> \\"pcxbc\\" -> \\"pcxbcf\\". Your Task: You don\'t need to read input or print anything. Your task is to implement the function longestStrChain() which takes a list of strings (words) and returns the length of the longest string chain that can be formed. Expected Time Complexity: O(N * log(N) + N * L^2) where N is the number of strings and L is the length of the longest string. Expected Auxiliary Space: O(N) Constraints: 1 <= words.length <= 1000 1 <= words[i].length <= 16 words[i] consists only of lowercase English letters.","solution":"def longestStrChain(words): Returns the length of the longest string chain that can be formed from the given list of words. words.sort(key=len) dp = {} max_len = 1 for word in words: dp[word] = 1 for i in range(len(word)): prev_word = word[:i] + word[i+1:] if prev_word in dp: dp[word] = max(dp[word], dp[prev_word] + 1) max_len = max(max_len, dp[word]) return max_len"},{"question":"You are given a grid representing a minefield, with some cells containing landmines, and others being safe. The goal is to help a robot move from the top-left corner to the bottom-right corner, while avoiding direct contact with landmines. The robot can only move right or down at each step. Each cell in the grid can have one of the following values: - 0: Safe cell - 1: Cell with a landmine Write a function to determine the number of different paths the robot can take to reach the bottom-right corner without stepping on a landmine. Input format: - The first line of input contains a single integer t, the number of test cases. - For each test case, the first line contains two integers n and m, the dimensions of the grid. - The next n lines each contain m integers representing the minefield grid. Output format: For each test case, output a single integer: the number of different paths the robot can take from the top-left corner to the bottom-right corner. If there is no possible path, print 0. Constraints: 1 ≤ t ≤ 10 1 ≤ n, m ≤ 15 0 ≤ grid[i][j] ≤ 1 Example Input: 2 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 0 1 0 0 0 0 Example Output: 2 1 Explanation: In the first test case, the robot can take the following paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second test case, the robot has only one path: 1. Right -> Down -> Down -> Right","solution":"def unique_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def process_test_cases(test_cases): results = [] for grid in test_cases: results.append(unique_paths(grid)) return results"},{"question":"You are given two lists: one containing integers and another containing string representations of integers. Your task is to create a function that merges these two lists into a single sorted list of integers. Function signature: `def merge_and_sort(int_list, str_list):` # Input - `int_list` : A list of integers. (`1 <= len(int_list) <= 50`) - `str_list` : A list of strings, where each string is a valid integer representation. (`1 <= len(str_list) <= 50`) # Output - The function should return a single list of integers, sorted in ascending order. # Constraints - The total number of elements (integers) to be merged will not exceed 100. - Each integer will be within the range `[-1000, 1000]`. # Sample Input ```python int_list = [3, 1, 4] str_list = [\\"2\\", \\"5\\"] ``` # Sample Output ```python [1, 2, 3, 4, 5] ``` # Explanation The function combines the `int_list` and the parsed integers from `str_list`, then sorts them to give the final output `[1, 2, 3, 4, 5]`.","solution":"def merge_and_sort(int_list, str_list): Merges a list of integers and a list of string representations of integers, and returns a sorted list of integers. :param int_list: List of integers :param str_list: List of strings, where each string is a valid integer representation :return: Sorted list of integers # Convert str_list to a list of integers str_list_as_int = list(map(int, str_list)) # Merge both lists merged_list = int_list + str_list_as_int # Sort the merged list in ascending order merged_list.sort() return merged_list"},{"question":"You are given a list of integers representing the heights of stacks of blocks in a warehouse. Your task is to make all the stacks equal in height by either removing blocks or placing blocks on top of the stacks. You can choose the height of the stacks after modification, which can be any integer. Calculate the minimum number of block modifications (either removals or additions) required to achieve this. Input Format The first line contains an integer N representing the number of stacks. The second line contains N space-separated integers denoting the heights of the stacks. Output Format Print a single integer, the minimum number of block modifications required to make all stacks equal in height. Constraints 1 ≤ N ≤ 1000 1 ≤ height of each stack ≤ 10000 SAMPLE INPUT 5 5 6 3 9 2 SAMPLE OUTPUT 10 Explanation To make all the stacks equal in height, you can choose any height from 2 to 9. One possible way to equalize all stacks is as follows: - Choose height 5 (the most frequent height). - Modify other stack heights to 5: - Stack with height 6: Remove 1 block (6 -> 5) - Stack with height 3: Add 2 blocks (3 -> 5) - Stack with height 9: Remove 4 blocks (9 -> 5) - Stack with height 2: Add 3 blocks (2 -> 5) - Total modifications: 1 + 2 + 4 + 3 = 10 blocks Choosing any other height will result in a higher number of modifications.","solution":"def min_modifications_to_equalize_stacks(heights): Calculate the minimum number of block modifications (either removals or additions) required to make all stacks equal in height. :param heights: List of integers representing the heights of stacks. :return: Minimum number of block modifications required. N = len(heights) if N == 0: return 0 heights.sort() median_height = heights[N//2] total_modifications = sum(abs(height - median_height) for height in heights) return total_modifications"},{"question":"Tina is organizing a charity run and needs to distribute water bottles along the track. The track is represented as a line with length l. There are n spots along the track where water stations can be placed. Each spot i is defined by a location x_i (0 ≤ x_i ≤ l). Tina needs to place exactly m water stations (0 < m ≤ n) at these spots such that the minimum distance between any two water stations is maximized. Help Tina determine the largest possible minimum distance she can achieve between any two water stations. -----Input----- The first line contains two integers n and m (1 ≤ m ≤ n ≤ 1000) — the number of potential spots and the number of water stations to place. The second line contains n integers x_i (0 ≤ x_i ≤ l) — the positions of the potential spots along the track. -----Output----- Print one number — the largest possible minimum distance between any two water stations. -----Examples----- Input 5 3 1 2 8 4 9 Output 3 Input 6 4 0 1 2 5 8 10 Output 2 -----Note----- In the first example, the best option is to place water stations at positions 1, 4, and 8. The minimum distance between any two water stations is 3. In the second example, the best option is to place water stations at positions 0, 2, 5, and 8. The minimum distance between any two water stations is 2.","solution":"def largest_min_distance(n, m, positions): positions.sort() def can_place_stations(min_dist): count = 1 last_position = positions[0] for i in range(1, n): if positions[i] - last_position >= min_dist: count += 1 last_position = positions[i] if count >= m: return True return False low, high = 0, positions[-1] - positions[0] while low < high: mid = (low + high + 1) // 2 if can_place_stations(mid): low = mid else: high = mid - 1 return low"},{"question":"**Problem Statement:** A group of N friends plans to host a secret Santa gift exchange. Each friend should give a gift to exactly one other friend, and each should receive exactly one gift. Your task is to find the number of possible ways they can organize this gift exchange under these conditions. To make things more interesting, the friends decide that the gift-giving should form a \\"derangement\\" where no friend can give a gift to themselves. A derangement is a permutation of a set where none of the elements appear in their original positions. Write a function `countDerangements(N)` that takes an integer N (the number of friends) and returns the number of derangements possible. If N is less than or equal to 1, you should return 0 since derangements are not possible in these cases. **Function Signature:** ```python def countDerangements(N: int) -> int: pass ``` **Input:** - A single integer N representing the number of friends (1 ≤ N ≤ 20). **Output:** - An integer representing the number of derangements of N friends. **Example:** ```python assert countDerangements(3) == 2 assert countDerangements(4) == 9 assert countDerangements(5) == 44 ``` **Explanation:** - For N = 3, the two valid derangements are: [2, 3, 1] and [3, 1, 2]. - For N = 4, there are 9 possible derangements in total. - For N = 5, there are 44 possible derangements in total. **Constraints:** - 1 ≤ N ≤ 20","solution":"def countDerangements(N: int) -> int: Returns the number of derangements (permutations where no element appears in its original position) for N items. Parameters: N (int): The number of friends/items Returns: int: The number of derangements if N <= 1: return 0 # D(n) = (n - 1) * ( D(n-1) + D(n-2) ) # Base cases derangements = [0] * (N + 1) derangements[0] = 1 if N > 0: derangements[1] = 0 if N > 1: derangements[2] = 1 # Fill the table using the recursive definition for i in range(3, N + 1): derangements[i] = (i - 1) * (derangements[i - 1] + derangements[i - 2]) return derangements[N]"},{"question":"Given a binary tree, your task is to delete a node with a given key and return the new root of the modified tree. If the key value is not present in the tree, then do not change the tree and return the original root. The tree should maintain its Binary Search Tree (BST) properties after deletion. Example 1: Input: 5 / 3 6 / 2 4 key = 3 Output: 5 / 4 6 / 2 Explanation: Node with key 3 is deleted, and the new tree structure is produced where the inorder successor (4) replaces the deleted node. Example 2: Input: 1 2 3 key = 4 Output: 1 2 3 Explanation: Key 4 is not found in the BST, so the original tree remains unchanged. Your Task: The task is to complete the function deleteNode() that takes a root reference and a key as arguments and returns the root of the modified tree if a node with the given key is present, otherwise returns the original root. Expected Time Complexity: O(H) Expected Auxiliary Space: O(H) Constraints: 1 <= Number of nodes in the tree <= 10^4 1 <= Key value, Node value <= 10^5","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def deleteNode(root: TreeNode, key: int) -> TreeNode: if not root: return root if key < root.val: root.left = deleteNode(root.left, key) elif key > root.val: root.right = deleteNode(root.right, key) else: if not root.left: return root.right elif not root.right: return root.left temp = findMin(root.right) root.val = temp.val root.right = deleteNode(root.right, temp.val) return root def findMin(node): current = node while current.left: current = current.left return current"},{"question":"# Task You are given a list of integers. Your task is to create a function that finds all the unique pairs of numbers in the list that add up to a given target sum. # What do we need to do? Write a function `findPairs(arr, target)` that takes in two arguments: - `arr`: a list of integers - `target`: an integer representing the target sum The function should return a list of tuples with each tuple representing a unique pair of integers from the list that add up to the target sum. Each pair of numbers should be sorted in ascending order, and the list of pairs should be sorted in ascending order based on the first element of the pairs. # Example: ``` findPairs([1, 2, 3, 4, 5, 6], 7) => [(1, 6), (2, 5), (3, 4)] findPairs([1, 2, 2, 3, 4, 4], 6) => [(2, 4)] ``` # Constraints: - The integers in the list can be both positive and negative. - Each element in the list should be used at most once in the pairs. - The list and target sum can contain any value within the 32-bit signed integer range.","solution":"def findPairs(arr, target): Returns a list of unique pairs from arr that sum up to the target. Each pair will be sorted in ascending order, and the list of pairs will be sorted based on the first element. # Use a set to keep track of the numbers we\'ve seen so far seen = set() # Use a set to store the pairs to automatically avoid duplicates pairs = set() for num in arr: complement = target - num if complement in seen: # add a tuple of the sorted pair to the pairs set pairs.add(tuple(sorted((num, complement)))) seen.add(num) # convert the set of pairs to a sorted list return sorted(pairs)"},{"question":"Given a matrix of size N x M, your task is to find the largest submatrix whose sum is less than or equal to a given number K. You need to write a function largestSubmatrix which takes three arguments: an integer N (number of rows), an integer M (number of columns), and a 2D array matrix representing the elements of the matrix. The function should return the size of the largest submatrix that has its sum less than or equal to K. Example 1: Input: N = 3 M = 3 matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] K = 15 Output: 4 Explanation: The largest submatrix with sum <= 15 is: [[1, 2], [4, 5]] Example 2: Input: N = 2 M = 2 matrix = [[2, 2], [2, 2]] K = 3 Output: 1 Explanation: The largest submatrix with sum <= 3 is any single element submatrix. Your Task: You do not need to take any input. The function should return an integer denoting the size of the largest submatrix (number of elements) whose sum is less than or equal to K. Expected Time Complexity: O(N^2 * M^2) Expected Auxiliary Space: O(N * M) Constraints: 1 ≤ N, M ≤ 100 1 ≤ matrix[i][j] ≤ 100 1 ≤ K ≤ 5000","solution":"def largestSubmatrix(N, M, matrix, K): # Function to compute the prefix sum matrix def build_prefix_sum(matrix): prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) return prefix_sum # Initializing prefix sum matrix prefix_sum = build_prefix_sum(matrix) largest_area = 0 # Loop through all possible submatrices for i1 in range(1, N + 1): for j1 in range(1, M + 1): for i2 in range(i1, N + 1): for j2 in range(j1, M + 1): current_sum = (prefix_sum[i2][j2] - prefix_sum[i1-1][j2] - prefix_sum[i2][j1-1] + prefix_sum[i1-1][j1-1]) if current_sum <= K: area = (i2 - i1 + 1) * (j2 - j1 + 1) largest_area = max(largest_area, area) return largest_area"},{"question":"The company RSA Security wants to generate secure pins for their users. Each pin must be a 6-digit number following stringent security rules: 1. The pin must be a palindromic number. A palindromic number reads the same backward as forward. 2. Each digit should be an even number (i.e., the digits can only be 0, 2, 4, 6, or 8). Your task is to write a program that checks if a given 6-digit number is a valid RSA Security pin. -----Input----- The input consists of a single line containing a 6-digit integer P. -----Output----- Print \\"VALID\\" if the number meets the criteria of a palindromic number with all even digits, otherwise print \\"INVALID\\". -----Constraints----- The input number P is a positive integer with exactly 6 digits and no leading zeros. -----Sample Input 1----- 246642 -----Sample Output 1----- VALID -----Sample Input 2----- 248248 -----Sample Output 2----- INVALID -----Sample Input 3----- 223322 -----Sample Output 3----- INVALID -----Explanation----- In the first example, 246642 is a palindromic number and all its digits (2, 4, 6, 6, 4, 2) are even, so it is a valid pin. In the second example, 248248 is a palindromic number but contains the digit 1,5 which is not even, so it is invalid. In the third example, 223322 is a palindromic number but contains the digits 3 which are not even, so it is invalid.","solution":"def is_valid_rsa_pin(pin): Checks if the given 6-digit pin is a valid RSA Security pin. A valid RSA Security pin is: - 6 digits long - A palindromic number (reads the same backward as forward) - Contains only even digits (0, 2, 4, 6, 8) Args: pin (int): The 6-digit number to check Returns: str: \\"VALID\\" if the pin meets the criteria, otherwise \\"INVALID\\" pin_str = str(pin) if len(pin_str) != 6: return \\"INVALID\\" if pin_str != pin_str[::-1]: return \\"INVALID\\" even_digits = {\'0\', \'2\', \'4\', \'6\', \'8\'} for digit in pin_str: if digit not in even_digits: return \\"INVALID\\" return \\"VALID\\""},{"question":"Write a function that determines if a given string contains all the digits from 0 to 9 at least once. In case it does, return \\"YES\\", otherwise return \\"NO\\". Input A single string comprising alphanumeric characters and special symbols. Output A single word: \\"YES\\" or \\"NO\\". Example Input abc123 0def456ghi789 Output YES Input abc123def Output NO","solution":"def contains_all_digits(s): Determines if the string contains all digits from 0 to 9 at least once. :param s: Input string comprising alphanumeric characters and special symbols. :return: \\"YES\\" if the string contains all digits from 0 to 9, otherwise \\"NO\\". digits = set(\'0123456789\') for char in s: if char in digits: digits.remove(char) if not digits: return \\"YES\\" return \\"NO\\""},{"question":"Trevor is developing a library management system and needs help with one part of the system that deals with sorting. He wants to implement a feature that will sort a list of book titles in a particular way: 1. Titles should be sorted by their length (ascending order). 2. If two titles have the same length, they should be sorted in lexicographical order (dictionary order). Write a function that takes a list of book titles and returns the sorted list according to the above criteria. ----- Input ----- - The first line of input contains an integer N, the number of book titles. - The next N lines each contain a book title, where each title is a string consisting of uppercase and lowercase letters and spaces. ----- Output ----- Print the sorted list of book titles, one per line. ----- Constraints ----- - 1 leq N leq 100 - Length of each title is in [1 .. 100] ----- Sample Input ----- 4 The Great Gatsby To Kill a Mockingbird 1984 A Tale of Two Cities ----- Sample Output ----- 1984 A Tale of Two Cities The Great Gatsby To Kill a Mockingbird ----- Explanation ----- The title \\"1984\\" has the shortest length (4), so it comes first. The titles \\"A Tale of Two Cities\\" (18), \\"The Great Gatsby\\" (15), and \\"To Kill a Mockingbird\\" (21) follow according to their lengths. Since none of the titles have the same length, lexicographical order is not considered in this case.","solution":"def sort_titles(titles): Sorts a list of book titles by their length, and if two titles have the same length, in lexicographical order. :param titles: List of book titles :return: Sorted List of book titles by the specified criteria return sorted(titles, key=lambda x: (len(x), x))"},{"question":"Given a string of lowercase letters, determine the minimum number of characters to remove from the string so that the remaining string contains no more than two different characters. Return the integer count of characters removed. Example s=text{\'aabbcc\'} To achieve a string with no more than two different characters, you can remove \'b\' and \'c\', resulting in either \'aabb\' or \'aacc\'. Therefore, the minimum number of characters to remove is 2. Return 2. Function Description Complete the minRemovals function below. minRemovals has the following parameter(s): string s: a string to analyze Returns int: the minimum number of characters to remove Input Format A single line which contains boldsymbol{mathrm{~S~}}. Constraints 1 leq text{len}(s) leq 10^5 boldsymbol{mathrm{~S~}} contains only lowercase letters in the range aldots z Sample Input 0 abccba Sample Output 0 2 Explanation 0 To achieve the goal, remove \'b\' and \'c\', resulting in \'aaaa\'. Hence, the count of removed characters is 2. Sample Input 1 aabbcc Sample Output 1 2 Explanation 1 In one possible scenario, remove two \'c\' characters, resulting in \'aabb\'. Hence, the count of removed characters is 2. Sample Input 2 xyz Sample Output 2 1 Explanation 2 A string with three different characters will require at least one removal to be left with no more than two different characters. Hence, the count of removed characters is 1.","solution":"def minRemovals(s): Returns the minimum number of characters to remove from the string so that the remaining string contains no more than two different characters. from collections import Counter # Get the frequency of each character in the string freq = Counter(s) # If the number of unique characters in the string is already less than or equal to 2, return 0 if len(freq) <= 2: return 0 # Get the frequencies of characters sorted in descending order freq_values = sorted(freq.values(), reverse=True) # Sum the frequencies of the characters to be removed to leave only two most frequent characters removals = sum(freq_values[2:]) return removals"},{"question":"You are given an array of integers and a set of queries. Each query asks for the sum of a subarray defined by a range of indices. Your task is to preprocess the array so that each query can be answered efficiently. -----Input:----- - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers, the elements of the array. - The third line contains an integer Q, the number of queries. - The next Q lines contain two integers L and R, indicating the start and end indices (0-based, inclusive) of the subarray for which the sum is required. -----Output:----- - For each query, print a single line containing one integer, the sum of the subarray from index L to index R. -----Constraints----- - 1 le N le 10^5 - 1 le Q le 10^4 - 1 le Array elements le 10^3 - 0 le L le R < N -----Sample Input:----- 6 1 2 3 4 5 6 3 0 2 1 3 2 5 -----Sample Output:----- 6 9 18 -----Explanation:----- For the first query, the subarray is [1, 2, 3] and the sum is 1 + 2 + 3 = 6. For the second query, the subarray is [2, 3, 4] and the sum is 2 + 3 + 4 = 9. For the third query, the subarray is [3, 4, 5, 6] and the sum is 3 + 4 + 5 + 6 = 18.","solution":"def preprocess_array(arr): Preprocess the input array to create a prefix sum array to allow efficient range sum queries. prefix_sums = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] return prefix_sums def range_sum(prefix_sums, L, R): Calculate the sum of the subarray arr[L:R+1] using the prefix sums array. return prefix_sums[R + 1] - prefix_sums[L] def process_queries(arr, queries): Processes multiple queries on the given array using the prefix sum array. prefix_sums = preprocess_array(arr) results = [] for L, R in queries: results.append(range_sum(prefix_sums, L, R)) return results"},{"question":"Write a function `isPalindrome` that takes the head of a singly linked list as input and determines if the list is a palindrome. Input: The input line contains an integer T, denoting the number of test cases. Each test case contains two lines: the first line contains an integer N (size of the linked list). The second line contains N elements of the linked list separated by space. Output: For each test case, print \\"Yes\\" (without quotes) if the linked list is a palindrome, otherwise print \\"No\\" (without quotes) in a new line. User Task: You need to complete the function `isPalindrome` that takes the head of the linked list as an input parameter and returns a boolean value (True for palindrome, False otherwise). Constraints: 1 <= T <= 100 0 <= N <= 10^3 1 <= A[i] <= 10^3 Example: Input: 2 3 1 2 1 4 1 2 3 4 Output: Yes No Explanation: Testcase 1: The linked list has elements 1 -> 2 -> 1, which reads the same forward and backward. Testcase 2: The linked list has elements 1 -> 2 -> 3 -> 4, which does not read the same forward and backward.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def isPalindrome(head): Returns True if the linked list is a palindrome, False otherwise. if not head or not head.next: return True # Find the middle of the linked list slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next # Reverse the second half of the linked list prev, curr = None, slow while curr: next_node = curr.next curr.next = prev prev = curr curr = next_node # Compare the two halves first_half, second_half = head, prev while second_half: if first_half.val != second_half.val: return False first_half = first_half.next second_half = second_half.next return True def create_linked_list(arr): Utility function to create a linked list from an array of values. if not arr: return None head = ListNode(arr[0]) current = head for val in arr[1:]: current.next = ListNode(val) current = current.next return head def check_palindromes(test_cases): Utility function to run multiple test cases. results = [] for tc in test_cases: n, arr = tc head = create_linked_list(arr) if isPalindrome(head): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"There is a circular garden with n flower beds arranged in a circle. Each flower bed contains some number of flowers. For a given sequence of flowers, a valid bouquet is defined as any contiguous sequence of flower beds. You need to determine if there exists a bouquet where the number of flowers is greater than or equal to a specified integer m. Note that the bouquet can start from any flower bed and continue in a circular manner. ---Input--- The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10000) — the number of flower beds and the minimum number of flowers required for a valid bouquet. The second line contains n integers representing the number of flowers in each flower bed. ---Output--- Print \\"YES\\" if there exists a bouquet with the number of flowers greater than or equal to m, otherwise print \\"NO\\". ---Examples--- Input 5 10 1 2 3 4 5 Output YES Input 4 15 2 2 2 2 Output NO ---Note--- In the first sample, one possible bouquet is formed by the flower beds with 4 and 5 flowers, which sums to 9. Another possible bouquet is formed by summing the last and first flower beds together, which gives at least 6. In the second sample, no matter how you form a contiguous sequence, it is not possible to achieve a bouquet with 15 flowers, hence the answer is \\"NO\\".","solution":"def can_form_bouquet(n, m, flowers): # Extend array by appending itself extended_flowers = flowers + flowers for start in range(n): current_sum = 0 for length in range(1, n+1): current_sum += extended_flowers[start + length - 1] if current_sum >= m: return \\"YES\\" return \\"NO\\""},{"question":"In a certain large city, there is a grid of streets that form n by n intersections with buildings at each intersection. Each building can either be a commercial building (represented by the value 1) or a residential building (represented by the value 0). The city council wants to ensure that there is a commercial area within the grid that forms a perfect sub-square of identical commercial buildings. In other words, they want to verify if there exists a sub-square of size at least l x l within the grid that contains only commercial buildings. Your task is to determine whether there exists such a sub-square of size at least l x l. If it exists, return the top-left corner of one such sub-square. If multiple such sub-squares exist, return any one of them. Otherwise, return \\"No\\". Input The first line contains two integers n and l (1 ≤ l ≤ n ≤ 500) — the size of the grid and the minimum size of the sub-square. Each of the next n lines contains n integers (0 or 1), representing the grid. Output Print \\"Yes\\" followed by two integers x and y — the coordinates (1-based) of the top-left corner of any sub-square of size at least l x l containing only commercial buildings. If no such sub-square exists, print \\"No\\". Examples Input 5 3 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 Output Yes 2 2 Input 4 2 1 0 1 1 1 1 0 1 1 0 1 0 0 1 1 1 Output No","solution":"def find_commercial_sub_square(n, l, grid): Determines if there exists a sub-square of size at least l x l within the grid that contains only commercial buildings. Args: n : int : Size of the grid (n x n) l : int : Minimum size of the sub-square (l x l) grid : List[List[int]] : Grid containing 0 for residential buildings and 1 for commercial buildings Returns: str : \\"Yes\\" followed by two integers x and y if such a sub-square exists, otherwise \\"No\\" for x in range(n - l + 1): for y in range(n - l + 1): all_commercial = True for i in range(l): for j in range(l): if grid[x+i][y+j] != 1: all_commercial = False break if not all_commercial: break if all_commercial: return f\\"Yesn{x+1} {y+1}\\" return \\"No\\""},{"question":"You are given a grid of characters representing a rectangular board in a word search puzzle. Your task is to find if a given word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. Write a function that receives as input the grid and the word, and returns True if the word exists in the grid, and False otherwise. The function should handle grids up to a maximum size of 200x200, and words up to a length of 200. Function Signature: ```python def word_search(grid: List[List[str]], word: str) -> bool: # Your code here ``` # Constraints: - The grid has a size of up to 200x200. - The word length is up to 200. - The grid contains only lowercase English letters. - The word contains only lowercase English letters. # Input: - A 2D list of characters representing the grid. - A string representing the word. # Output: - A boolean representing whether the word exists in the grid. # Example: ```python # Example 1 grid = [ [\'a\', \'b\', \'c\', \'e\'], [\'s\', \'f\', \'c\', \'s\'], [\'a\', \'d\', \'e\', \'e\'] ] word = \\"abcced\\" print(word_search(grid, word)) # Output: True # Example 2 grid = [ [\'a\', \'b\', \'c\', \'e\'], [\'s\', \'f\', \'c\', \'s\'], [\'a\', \'d\', \'e\', \'e\'] ] word = \\"see\\" print(word_search(grid, word)) # Output: True # Example 3 grid = [ [\'a\', \'b\', \'c\', \'e\'], [\'s\', \'f\', \'c\', \'s\'], [\'a\', \'d\', \'e\', \'e\'] ] word = \\"abcb\\" print(word_search(grid, word)) # Output: False ``` # Explanation: **Example 1:** In the first example, the sequence \\"abcced\\" can be found starting from the top left corner (0, 0). **Example 2:** In the second example, the sequence \\"see\\" can be found starting at position (2, 1). **Example 3:** In the third example, the word \\"abcb\\" cannot be found in any path as it requires revisiting the same cell twice which is not allowed.","solution":"from typing import List def word_search(grid: List[List[str]], word: str) -> bool: rows, cols = len(grid), len(grid[0]) def dfs(r, c, index): if index == len(word): return True if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] != word[index]: return False tmp, grid[r][c] = grid[r][c], \'#\' found = ( dfs(r+1, c, index+1) or dfs(r-1, c, index+1) or dfs(r, c+1, index+1) or dfs(r, c-1, index+1) ) grid[r][c] = tmp return found for i in range(rows): for j in range(cols): if dfs(i, j, 0): return True return False"},{"question":"You have been given a binary tree and your task is to implement the functions flatten_left() and preorder_traverse(). The function flatten_left() will flatten the binary tree such that each node\'s left child points to the next node in a preorder traversal, and all right children are nullified. The function preorder_traverse() should return an array containing the values of nodes in preorder traversal after the tree is flattened. Example: Input: 1 / 2 5 / 3 4 6 flatten_left() should transform the tree to: 1 / 2 / 3 / 4 / 5 / 6 preorder_traverse() should return: [1, 2, 3, 4, 5, 6] Your Task: Complete the function flatten_left() which transforms the tree as described above, and the function preorder_traverse() which returns the preorder traversal as a list. Expected Time Complexity: O(N) where N is the number of nodes in the tree. Expected Auxiliary Space: O(N) for the preorder_traverse(). Constraints: 1<= Number of nodes <= 100 1<= value of each node <= 1000","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def flatten_left(root): def helper(node): if not node: return None left_tail = helper(node.left) right_tail = helper(node.right) if node.right: if left_tail: left_tail.left = node.right else: node.left = node.right node.right = None return right_tail if right_tail else left_tail if left_tail else node helper(root) def preorder_traverse(root): result = [] def preorder(node): if not node: return result.append(node.val) preorder(node.left) preorder(root) return result"},{"question":"Given an integer array nums, return the number of consecutive sequences of length k that are strictly increasing. A sequence is strictly increasing if each number is strictly greater than the preceding one in the array. Example 1: Input: nums = [1, 2, 3, 4, 5], k = 3 Output: 3 Explanation: The consecutive sequences of length 3 that are strictly increasing are [1, 2, 3], [2, 3, 4], and [3, 4, 5]. Example 2: Input: nums = [3, 1, 4, 1, 5], k = 2 Output: 2 Explanation: The consecutive sequences of length 2 that are strictly increasing are [1, 4] and [1, 5]. Example 3: Input: nums = [7, 3, 5, 1, 6, 8], k = 3 Output: 1 Explanation: The only consecutive sequence of length 3 that is strictly increasing is [1, 6, 8]. Note: The length of nums will be in the range [0, 10^4]. All integers in nums will be in the range [-10^6, 10^6]. The integer k will be in the range [1, 10^4] and will be less than or equal to the length of nums.","solution":"def count_consecutive_increasing_sequences(nums, k): Returns the number of consecutive sequences of length k that are strictly increasing. Parameters: nums (List[int]): List of integers k (int): Length of the sequences Returns: int: Number of strictly increasing sequences of length k if len(nums) < k: return 0 count = 0 for i in range(len(nums) - k + 1): if all(nums[j] < nums[j + 1] for j in range(i, i + k - 1)): count += 1 return count"},{"question":"# Description: You have a list of integers `arr` representing the heights of buildings. You have to find the maximum amount of water that can be trapped between the buildings. The width of each building is 1 unit. The water trapped between the buildings is determined by the heights of the buildings and the distance between them. For example: ``` arr = [3, 0, 0, 2, 0, 4] maxWater(arr) === 10 ``` # Note: - Consider non-negative integers only. - If no water can be trapped, return 0. - Focus on the performance of the code, especially for large arrays. Aim to achieve a linear time complexity O(n). # Some Examples ``` maxWater([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]) === 6 maxWater([3, 0, 0, 2, 0, 4]) === 10 maxWater([1, 1, 1, 1, 1]) === 0 maxWater([6, 5, 4, 3, 2, 1]) === 0 maxWater([1, 2, 3, 4, 5, 6]) === 0 ```","solution":"def maxWater(arr): Returns the maximum amount of water that can be trapped between the buildings. if not arr or len(arr) < 3: return 0 n = len(arr) left_max = [0] * n right_max = [0] * n # Fill the left max array left_max[0] = arr[0] for i in range(1, n): left_max[i] = max(left_max[i-1], arr[i]) # Fill the right max array right_max[n-1] = arr[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], arr[i]) # Calculate the total water trapped water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - arr[i] return water_trapped"},{"question":"You have been tasked with designing a parking lot system for a multi-level parking structure. Each level of the parking structure has a number of spaces, and we need to efficiently assign cars to spaces across levels. Here\'s how the system works: When a car enters the parking lot, it is assigned to the first available space in the lowest level. If a level is fully occupied, the system checks the next level, and so on until an available space is found. Each parking space has a unique identifier based on its level and position within that level. --- **Input:** The first line contains an integer `T`, the number of test cases. Each test case starts with two integers `L` and `S`, where `L` denotes the number of levels in the parking structure and `S` denotes the number of spaces per level. This is followed by a single integer `C` which indicates the number of cars entering the parking lot. **Output:** For each test case, output the parking space identifiers for the `C` cars in the order they are assigned. Each identifier is in the form `\\"Lx-Sy\\"` where `Lx` is the level number starting from 1 and `Sy` is the space number within that level starting from 1. **Constraints:** 1 ≤ T ≤ 50 1 ≤ L ≤ 100 1 ≤ S ≤ 100 1 ≤ C ≤ L * S **Sample Input:** ``` 2 3 4 5 2 3 6 ``` **Sample Output:** ``` L1-S1 L1-S2 L1-S3 L1-S4 L2-S1 L1-S1 L1-S2 L1-S3 L2-S1 L2-S2 L2-S3 ``` **Explanation:** For the first test case: - With 3 levels and 4 spaces per level, the first 5 cars will be assigned to L1-S1, L1-S2, L1-S3, L1-S4, and L2-S1 respectively. For the second test case: - With 2 levels and 3 spaces per level, the 6 cars will be assigned as follows: L1-S1, L1-S2, L1-S3, L2-S1, L2-S2, and L2-S3 respectively.","solution":"def assign_parking_spaces(T, test_cases): results = [] for i in range(T): L, S, C = test_cases[i] assigned_spaces = [] for j in range(C): level = (j // S) + 1 space = (j % S) + 1 assigned_spaces.append(f\\"L{level}-S{space}\\") results.append(assigned_spaces) return results # Example usage test_cases = [ (3, 4, 5), (2, 3, 6) ] print(assign_parking_spaces(2, test_cases))"},{"question":"Given an array of integers, you must find a subarray (contiguous subsequence) that has the maximum sum among all subarrays of the given array. Your task is to implement a function that returns the start and end indices (1-based) of this subarray. If there are multiple such subarrays, return the one with the smallest start index. If there is still a tie, return the one with the smallest end index. # Input - The first line contains an integer `t` (1 ≤ t ≤ 100), indicating the number of test cases. - The first line of each test case contains an integer `n` (1 ≤ n ≤ 10^5), the size of the array. - The next line contains `n` integers separated by spaces, representing the elements of the array. The elements are integers in the range [-10^9, 10^9]. # Output For each test case, output a single line containing two integers, the start and end indices (1-based) of the subarray which has the maximum sum. # Example Input ``` 2 5 -2 1 -3 4 -1 2 1 -5 4 3 1 2 3 ``` Output ``` 4 7 1 3 ``` # Note For the first test case, the maximum sum subarray is `[4, -1, 2, 1]` with indexes 4 to 7 (1-based). For the second test case, the maximum sum subarray is `[1, 2, 3]` with indexes 1 to 3 (1-based).","solution":"def max_subarray_indices(nums): n = len(nums) max_sum_end_here = nums[0] max_sum_so_far = nums[0] start_index = 0 end_index = 0 temp_start_index = 0 for i in range(1, n): # Update current subarray sum if nums[i] > max_sum_end_here + nums[i]: max_sum_end_here = nums[i] temp_start_index = i else: max_sum_end_here += nums[i] # Update global maximum subarray sum if max_sum_end_here > max_sum_so_far: max_sum_so_far = max_sum_end_here start_index = temp_start_index end_index = i return (start_index + 1, end_index + 1) def process_test_cases(t, test_cases): results = [] for i in range(t): n, nums = test_cases[i] results.append(max_subarray_indices(nums)) return results"},{"question":"Given an undirected connected graph with n vertices and m edges. Each vertex has a color, either black or white. The vertices are numbered from 1 to n. Determine the number of connected components that only contain vertices of the same color. A connected component is defined as a maximal set of vertices such that there is a path between any two vertices in this set. For example, let n = 6, m = 5, and the graph looks like the figure below: - Vertex 1: black - Vertex 2: white - Vertex 3: black - Vertex 4: white - Vertex 5: black - Vertex 6: white Edges: 1 - 2, 2 - 3, 3 - 4, 4 - 5, 5 - 6 The connected components of vertices of the same color are: - Black: {1}, {3}, {5} - White: {2}, {4}, {6} Thus, there are six connected components with vertices of the same color. -----Input----- The first line of the input contains the number t (1 le t le 10^4) — the number of test cases. Before each test case, there is a blank line. The first line of each test case contains two numbers n and m (1 le n le 2 cdot 10^5, 0 le m le 2 cdot 10^5) — the number of vertices and edges in the graph. The second line contains a string of length n with characters \'B\' or \'W\', representing the color of each vertex (Black or White). The following m lines contain descriptions of edges: the ith line contains two integers u_i, v_i (1 le u_i, v_i le n) — the numbers of vertices that connect the ith edge. It is guaranteed that the graph is connected. It is guaranteed that the sum of values n on all test cases of input data does not exceed 2 cdot 10^5. Similarly, it is guaranteed that the sum of values m on all test cases of input data does not exceed 2 cdot 10^5. -----Output----- For each test case, output a single number — the number of connected components that only contain vertices of the same color. -----Examples----- Input 2 6 5 BWBWBW 1 2 2 3 3 4 4 5 5 6 5 4 BBBBW 1 2 1 3 2 4 3 5 Output 6 2 -----Note----- None","solution":"def count_same_color_components(n, m, colors, edges): from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) component_count = 0 def bfs(start): queue = deque([start]) component_color = colors[start - 1] while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor] and colors[neighbor - 1] == component_color: visited[neighbor] = True queue.append(neighbor) for vertex in range(1, n + 1): if not visited[vertex]: visited[vertex] = True component_color = colors[vertex - 1] component_count += 1 bfs(vertex) return component_count def solve(test_cases): results = [] for n, m, colors, edges in test_cases: results.append(count_same_color_components(n, m, colors, edges)) return results"},{"question":"Given an array of integers, implement a data structure that supports the following operations: * add(x): Add element x to the array. * delete(x): Remove one occurrence of element x from the array. If the element does not exist, do nothing. * findFirstGreaterThan(x): Find and print the smallest element in the array that is strictly greater than x. If no such element exists, print \\"None\\". The array is initially empty. Constraints * 1 leq n leq 300,000 * -1,000,000,000 leq x leq 1,000,000,000 Input The input is given in the following format: n query_1 query_2 : query_n Each query query_i is given by: add x or delete x or findFirstGreaterThan x Output For each findFirstGreaterThan query, print the corresponding result in a new line. Example Input 8 add 5 add 3 add 7 findFirstGreaterThan 4 delete 3 findFirstGreaterThan 4 delete 5 findFirstGreaterThan 6 Output 5 5 7","solution":"import bisect class DataStructure: def __init__(self): self.data = [] def add(self, x): bisect.insort(self.data, x) def delete(self, x): index = bisect.bisect_left(self.data, x) if index < len(self.data) and self.data[index] == x: self.data.pop(index) def findFirstGreaterThan(self, x): index = bisect.bisect_right(self.data, x) if index < len(self.data): return self.data[index] else: return \\"None\\" # Function to process the input def process_queries(n, queries): ds = DataStructure() results = [] for query in queries: parts = query.split() if parts[0] == \'add\': ds.add(int(parts[1])) elif parts[0] == \'delete\': ds.delete(int(parts[1])) elif parts[0] == \'findFirstGreaterThan\': result = ds.findFirstGreaterThan(int(parts[1])) results.append(result) return results"},{"question":"Given an array of integers, move all the zeroes to the end of the array while maintaining the relative order of the non-zero elements. Implement a function with the following signature: ```python def move_zeroes(nums: List[int]) -> List[int]: ``` # Example Input: nums = [0, 1, 0, 3, 12] Output: [1, 3, 12, 0, 0] Explanation: In the given array, non-zero elements are [1, 3, 12] and zero elements are [0, 0]. By maintaining the relative order of non-zero elements and shifting zero elements to the end, we get the resultant array [1, 3, 12, 0, 0]. Input: nums = [0, 0, 1, 0, 3, 12, 0] Output: [1, 3, 12, 0, 0, 0, 0] Explanation: In the given array, non-zero elements are [1, 3, 12] and zero elements are [0, 0, 0, 0]. By maintaining the relative order of non-zero elements and shifting zero elements to the end, we get the resultant array [1, 3, 12, 0, 0, 0, 0]. # Your Task: You only need to implement the given function `move_zeroes()`. The function takes an array of integers `nums` as its argument and returns a new array with all zeroes moved to the end while maintaining the relative order of the non-zero elements. Do not read input or print anything. # Constraints: - 1 <= nums.length <= 10^4 - -10^4 <= nums[i] <= 10^4 # Expected Time Complexity: O(n) # Expected Auxiliary Space: O(1)","solution":"from typing import List def move_zeroes(nums: List[int]) -> List[int]: Moves all zeroes to the end of the list while maintaining the relative order of the non-zero elements. index = 0 # Pointer to place the next non-zero element # First pass: Move all non-zero elements to the front of the array for num in nums: if num != 0: nums[index] = num index += 1 # Second pass: Fill the remainder of the array with zeroes for i in range(index, len(nums)): nums[i] = 0 return nums"},{"question":"Given a list of integers representing the duration each task takes to complete, and a worker who can perform exactly one task per day. The worker can choose to rest on any day. The worker cannot switch tasks on the same day but must complete the chosen task before starting the next one. Return the minimum number of days the worker needs to complete at least k tasks. Example 1: Input: durations = [2, 3, 1, 4, 2], k = 3 Output: 5 Explanation: - Day 1: complete task with duration 2 - Day 2: complete task with duration 3 - Day 3: rest - Day 4: complete task with duration 1 - The worker completed 3 tasks in 5 days. Example 2: Input: durations = [1, 2, 3], k = 2 Output: 3 Explanation: - Day 1: complete task with duration 1 - Day 2: complete task with duration 2 - The worker completed 2 tasks in 3 days (1 day to rest) Example 3: Input: durations = [6, 5, 4, 3, 2, 1], k = 4 Output: 10 Explanation: The worker will need at least 10 days to complete 4 tasks due to taking rests in between. Example 4: Input: durations = [5, 4, 3, 2, 1], k = 1 Output: 1 Explanation: The worker can complete 1 task in the first day without any rest. Constraints: - 1 <= durations.length <= 100 - 1 <= durations[i] <= 100 - 1 <= k <= durations.length","solution":"def minimum_days_to_complete_tasks(durations, k): if k > len(durations): return -1 # if k is more than the number of tasks, it\'s impossible to complete k tasks rest_days = k - 1 # worker needs rest days between completing tasks days_to_complete_tasks = k # each task takes one day return days_to_complete_tasks + rest_days"},{"question":"An adventurous squirrel named Squeaky loves collecting nuts throughout a grid. The grid is represented as a 2D matrix where each cell contains a given number of nuts or is empty. Squeaky starts at the top-left corner of the grid and wants to collect as many nuts as possible and reach the bottom-right corner. However, Squeaky can only move either to the right or down from the current cell. Your task is to find out the maximum number of nuts Squeaky can collect by the time he reaches the bottom-right corner. Input: - The first line contains \'T\', the number of test cases. - Each test case starts with two integers \'R\' and \'C\', the number of rows and columns in the grid. - The next \'R\' lines contain \'C\' integers each, representing the number of nuts present in each cell of the grid. Output: - For each test case, output a single integer which is the maximum number of nuts Squeaky can collect. Constraints: 1 ≤ T ≤ 50 1 ≤ R, C ≤ 100 0 ≤ Nuts in each cell ≤ 1000 SAMPLE INPUT: 2 3 3 1 3 1 1 5 1 4 2 1 2 2 8 2 2 3 SAMPLE OUTPUT: 12 13","solution":"def max_nuts(T, test_cases): results = [] for case in test_cases: R, C, grid = case[\'R\'], case[\'C\'], case[\'grid\'] # Create a DP table to store the maximum nuts up to each cell dp = [[0] * C for _ in range(R)] # Initialize the first cell dp[0][0] = grid[0][0] # Fill the first row for j in range(1, C): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, R): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, R): for j in range(1, C): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer for this case is the total nuts at the bottom-right corner results.append(dp[R-1][C-1]) return results def parse_input(input_data): lines = input_data.splitlines() T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): R, C = map(int, lines[index].split()) grid = [] for i in range(R): grid.append(list(map(int, lines[index + 1 + i].split()))) test_cases.append({\'R\': R, \'C\': C, \'grid\': grid}) index += R + 1 return T, test_cases"},{"question":"A \\"magic square\\" is a square array of numbers where the sums of the numbers in each row, in each column, and along both diagonals are the same. For this problem, consider a 3x3 grid. Write a function named `isMagicSquare`/`IsMagicSquare`/`is_magic_square()` that takes a 2D list (or array) of integers representing a 3x3 grid and returns `true` if it is a magic square, and `false` otherwise. # Examples: ``` [[2, 7, 6], [9, 5, 1], [4, 3, 8]] => true (as sum of each row, column, and diagonal is 15) [[3, 5, 7], [8, 1, 6], [4, 9, 2]] => false (as sums are not equal) ``` The input grid is always a 3x3 matrix of integers.","solution":"def is_magic_square(grid): Determines if a given 3x3 grid is a magic square. Parameters: grid (list of list of int): A 3x3 grid of integers. Returns: bool: True if the grid is a magic square, False otherwise. if len(grid) != 3 or any(len(row) != 3 for row in grid): return False # Calculate the sum of the first row to set our magic sum target magic_sum = sum(grid[0]) # Check sums of all rows for row in grid: if sum(row) != magic_sum: return False # Check sums of all columns for col in range(3): if sum(grid[row][col] for row in range(3)) != magic_sum: return False # Check sums of the two diagonals if sum(grid[i][i] for i in range(3)) != magic_sum: return False if sum(grid[i][2-i] for i in range(3)) != magic_sum: return False return True"},{"question":"A hacker has managed to break into a secured system and has left a trove of encrypted messages. Each message is an encoded string where each letter has been shifted by a fixed number of positions in the alphabet (similar to a Caesar cipher). The encoded string only consists of lowercase English letters. The task is to write a function that can decode a single message string given the encoded message and the number of positions each letter was shifted by. -----Input----- The first line contains the encoded string `s` (1 ≤ length of s ≤ 100). The second line contains an integer `k` (1 ≤ k ≤ 25) — the number of positions each letter in the encoded string was shifted by. -----Output----- Output the decoded string. -----Examples----- Input xyz 2 Output vwx Input abc 3 Output xyz","solution":"def decode_caesar_cipher(s, k): Decodes a Caesar cipher encrypted string `s` which was shifted by `k` positions. Parameters: s (str): Encrypted string k (int): Number of positions each letter was shifted by Returns: str: Decoded string decoded_string = [] for char in s: # Calculate original position using modular arithmetic original_position = (ord(char) - ord(\'a\') - k) % 26 + ord(\'a\') decoded_string.append(chr(original_position)) return \'\'.join(decoded_string)"},{"question":"You are given a positive integer k. Find any integer m which satisfies these conditions, or report that there are no such numbers: In the decimal representation of m: m geq 0, m consists of exactly k digits, each digit of m is either even or zero, and the number of zero digits in m is minimal. -----Input----- The input consists of multiple test cases. The first line of the input contains a single integer q (1 leq q leq 250), the number of test cases. The next q lines each describe a test case. Each test case contains one positive integer k (1 leq k leq 10^5). It is guaranteed that the sum of k for all test cases does not exceed 10^5. -----Output----- For each test case, print an integer m which satisfies the conditions described above, or \\"-1\\" (without quotes), if no such number exists. If there are multiple possible solutions for m, print any solution. -----Example----- Input 3 1 2 4 Output 4 28 2468 -----Note----- In the first test case, the possible solutions are: 2, 4, 6, 8. As there are no zero digits in these numbers, any of them can be a solution. For the second test case, the possible solutions are: 20, 22, 24, 26, 28, 40, 42, 44, 46, 48, 60, 62, 64, 66, 68, 80, 82, 84, 86, 88. However, solutions like 00, 02, 04 are not acceptable since they contain too many zero digits. Hence, any number like 28 where zero digits are minimal and all digits are even can be printed. For the third test case, possible solutions like 2468 or 8246 fit the criteria with zero digits being minimal and all digits being even.","solution":"def find_minimal_zero_even_digit_number(k): Given a positive integer k, finds an integer m such that: - m consists of exactly k digits. - Each digit of m is either even or zero. - The number of zero digits in m is minimal. if k == 1: return \'2\' # Single digit case: possible solutions are 2, 4, 6, 8; using smallest one # Construct a number with the first k-1 digits as minimal non-zero even digits number = \'2\' + \'4\' * (k - 1) return number def process_cases(cases): return [find_minimal_zero_even_digit_number(k) for k in cases]"},{"question":"Kira loves to experiment with strings, and today she wants to reverse the words in a given sentence while maintaining the order of the characters within those words. Can you help her write a program to accomplish this? -----Input----- The first line of the input contains an integer T denoting the number of test cases. T test cases follow. The first line of each test case contains a string S, which is a sentence consisting of words separated by spaces. -----Output----- For each test case, output the sentence with the words in reversed order. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ length of S ≤ 1000 - S consists of printable ASCII characters. -----Example----- Input: 2 hello world coding is fun Output: olleh dlrow gnidoc si nuf -----Explanation----- Example case 1. \\"hello world\\" becomes \\"olleh dlrow\\". Example case 2. \\"coding is fun\\" becomes \\"gnidoc si nuf\\".","solution":"def reverse_words(sentence): Reverses each word in the given sentence while maintaining the order of words. words = sentence.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words) def process_test_cases(T, test_cases): Processes T test cases and returns the result list with reversed words in each sentence. results = [] for sentence in test_cases: results.append(reverse_words(sentence)) return results"},{"question":"You are given a list of integers. You need to rearrange the list so that all even integers appear before all the odd integers, while maintaining the relative order of the even and odd integers in the original list. Constraints: 1 leq n leq 10^5 Each integer in the list is between 0 and 10^9. Input Format The first line contains the integer, n. The second line contains n space-separated integers. Output Format Output a single line of n space-separated integers after rearranging them according to the described condition. Sample Input 7 1 2 3 4 5 6 7 Sample Output 2 4 6 1 3 5 7 Explanation In the given input list, the even integers are 2, 4, and 6. The odd integers are 1, 3, 5, and 7. After rearranging the list such that all even integers appear before all odd integers and maintaining their relative order, the output is 2 4 6 1 3 5 7.","solution":"def rearrange_list(n, integers): Rearranges the list so that all even numbers come before all odd numbers, while maintaining relative order. Args: - n (int): the number of integers in the list. - integers (list): the list of integers to be rearranged. Returns: - list: the rearranged list with even numbers first and odd numbers second. evens = [num for num in integers if num % 2 == 0] odds = [num for num in integers if num % 2 != 0] return evens + odds"},{"question":"You are given a string s consisting of lowercase English letters and question marks (?). Each question mark can be replaced with any lowercase English letter. Your task is to replace all the question marks in such a way that no two adjacent characters are the same. -----Input----- The input contains a single string s, which has a length between 1 and 1000 and consists of lowercase English letters and question marks. -----Output----- Print the modified string s after replacing all question marks with lowercase English letters such that no two adjacent characters are the same. If it is impossible to achieve such a configuration, print \\"Impossible\\". -----Examples----- Input a?b?c Output acbac Input ?? Output ab Input aa? Output Impossible","solution":"def replace_question_marks(s): Replace question marks in the string such that no two adjacent characters are the same. If impossible, return \\"Impossible\\". s = list(s) n = len(s) for i in range(n): if s[i] == \'?\': for ch in \'abc\': if (i > 0 and s[i-1] == ch) or (i < n-1 and s[i+1] == ch): continue s[i] = ch break for i in range(1, n): if s[i] == s[i-1]: return \\"Impossible\\" return \\"\\".join(s)"},{"question":"You are given a list of n integers. Determine if it is possible to rearrange the list such that the absolute difference between any two adjacent elements in the rearranged list is at most k. -----Input----- The first line contains one integer t (1 leq t leq 1000) — the number of test cases. Each test case consists of two lines. The first line contains two integers n and k (2 leq n leq 2 cdot 10^5, 1 leq k leq 10^9). The second line contains n integers a_1, a_2, dots, a_n (-10^9 leq a_i leq 10^9). It is guaranteed that the sum of n across all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, output \\"YES\\" (without quotes) if it is possible to rearrange the list to satisfy the condition, and \\"NO\\" (without quotes) otherwise. You can output \\"YES\\" and \\"NO\\" in any case (for example, strings \\"yEs\\", \\"yes\\" and \\"Yes\\" will be recognized as a positive response). -----Examples----- Input 3 3 2 1 3 5 4 4 -1 -5 3 2 2 0 100 100 Output YES YES YES -----Note----- In the first test case, one possible way to rearrange the elements is [1, 3, 5]. The absolute differences are |3 - 1| = 2 and |5 - 3| = 2, both of which are less than or equal to 2. In the second test case, one possible way to rearrange the elements is [-1, 2, 3, -5]. The absolute differences are |2 - (-1)| = 3, |3 - 2| = 1, and |-5 - 3| = 8. To satisfy the condition, another valid arrangement could be [2, 3, -1, -5], with absolute differences |3 - 2| = 1, |-1 - 3| = 4, and |-5 - (-1)|\' = 4, where the maximum absolute difference is 4, satisfying the condition k. In the third test case, any permutation of the list [100, 100] will satisfy the condition since the absolute differences will be zero, which is less than or equal to the given k = 0.","solution":"def can_rearrange(n, k, arr): Determines if the list can be rearranged such that the absolute difference between any two adjacent elements is at most k. arr.sort() for i in range(1, n): if arr[i] - arr[i-1] > k: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for test_case in test_cases: n, k, arr = test_case result = can_rearrange(n, k, arr) results.append(result) return results # Example usage to process input similarly to described format def main(t, raw_test_cases): Main function to handle input and output. test_cases = [] for i in range(t): n, k = raw_test_cases[2 * i] arr = raw_test_cases[2 * i + 1] test_cases.append((n, k, arr)) return process_test_cases(test_cases)"},{"question":"You have been given an array of integers representing the number of pages in N books, and an integer K representing the number of students. Your task is to allocate books to each student in such a way that - Each student gets at least one book. - The maximum number of pages assigned to a student is minimized. To achieve this, we define a valid allocation as one where each student gets a contiguous subarray of books, and the maximum number of pages assigned to any student is minimized. You need to determine what this minimized maximum number of pages is. -----Constraints----- - 2 leq N leq 10^5 - 1 leq K leq N - 1 leq pages_i leq 10^4 (1 leq i leq N) -----Input----- Input is given from Standard Input in the following format: N K pages_1 pages_2 ... pages_N -----Output----- Print the minimized maximum number of pages that can be allocated to a student. -----Sample Input----- 4 2 12 34 67 90 -----Sample Output----- 113 Explanation: You can allocate books in the following way: - [12, 34, 67] to the first student - [90] to the second student The maximum pages assigned to a student is 113 which is the minimized value possible for this allocation. Another way to allocate books is: - [12, 34] to the first student - [67, 90] to the second student Here, the maximum pages assigned to a student is 157 which is not optimal. Thus, the minimized maximum number of pages among all students is 113.","solution":"def can_allocate(pages, N, K, max_pages): Helper function to determine if it is possible to allocate books such that the maximum number of pages assigned to any student does not exceed max_pages. student_count = 1 current_pages = 0 for i in range(N): if pages[i] > max_pages: return False if current_pages + pages[i] > max_pages: student_count += 1 current_pages = pages[i] if student_count > K: return False else: current_pages += pages[i] return True def allocate_books(pages, N, K): Determines the minimized maximum number of pages to be allocated to a student. if K == 1: return sum(pages) if K >= N: return max(pages) low, high = max(pages), sum(pages) result = high while low <= high: mid = (low + high) // 2 if can_allocate(pages, N, K, mid): result = mid high = mid - 1 else: low = mid + 1 return result if __name__ == \'__main__\': import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) pages = list(map(int, data[2:])) result = allocate_books(pages, N, K) print(result)"},{"question":"David loves solving puzzles and recently, he came across a puzzle that involves arranging numbers in a grid. The grid has n rows and m columns, and it contains any permutation of the numbers from 1 to n cdot m. David wants to transform this permutation into a grid where the numbers in each row should be sorted in non-decreasing order and each column should also be sorted in non-decreasing order. Help David find if it is possible to rearrange the numbers in the given grid to achieve his goal, and if so, provide one possible solution. -----Input----- The first line contains two integers n and m (1 le n, m le 500) — the number of rows and columns of the grid. The next n lines contain m integers each, representing the grid. Each grid cell contains a unique integer from 1 to n cdot m. -----Output----- If it is possible to rearrange the grid such that the rows and columns are both sorted in non-decreasing order, print \\"YES\\" followed by the rearranged grid. Otherwise, print \\"NO\\". -----Examples----- Input 2 2 3 1 4 2 Output YES 1 2 3 4 Input 3 3 9 1 8 3 2 6 7 5 4 Output YES 1 2 3 4 5 6 7 8 9 Input 2 2 3 1 2 4 Output NO","solution":"def can_transform_grid(n, m, grid): Transforms the grid to have both rows and columns sorted in non-decreasing order. If it\'s possible, returns \\"YES\\" and the transformed grid. Otherwise, returns \\"NO\\". # Flatten the grid to a single list numbers = [cell for row in grid for cell in row] # Sort the numbers numbers.sort() # Populate the sorted grid sorted_grid = [] for i in range(n): row = [] for j in range(m): row.append(numbers[i * m + j]) sorted_grid.append(row) return \\"YES\\", sorted_grid def format_output(result): Format the output based on the result. if result[0] == \\"NO\\": return result[0] else: formatted_grid = \\"n\\".join(\\" \\".join(str(num) for num in row) for row in result[1]) return f\\"{result[0]}n{formatted_grid}\\""},{"question":"Given a positive integer N, write a function to determine if it is a Fibonacci number. A Fibonacci number is defined as a number that appears in the Fibonacci sequence, where each number is the sum of the two preceding ones, usually starting with 0 and 1 (i.e., 0, 1, 1, 2, 3, 5, 8, 13, ...). Example 1: Input: N = 8 Output: 1 Explanation: 8 is a Fibonacci number as it appears in the Fibonacci sequence. Example 2: Input: N = 10 Output: 0 Explanation: 10 is not a Fibonacci number as it does not appear in the Fibonacci sequence. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isFibonacci() which takes an integer N as input parameters and returns an integer, 1 if N is a Fibonacci number or 0 otherwise. Expected Time Complexity: O(log(N)) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10^{18}","solution":"import math def is_fibonacci(N): Checks if a given number N is a Fibonacci number. A number is a Fibonacci number if and only if one or both of (5*N^2 + 4) or (5*N^2 - 4) is a perfect square. Parameters: N (int): A positive integer to check if it is a Fibonacci number. Returns: int: 1 if N is a Fibonacci number, 0 otherwise. def is_perfect_square(x): s = int(math.sqrt(x)) return s * s == x if is_perfect_square(5 * N * N + 4) or is_perfect_square(5 * N * N - 4): return 1 else: return 0"},{"question":"Given an `n`-length array of integers, `A`, write a function to determine whether it\'s possible to partition the array into two non-empty subarrays, such that the product of the sums of these subarrays is a perfect square. # Input Format - The first line contains a single integer `n`, the size of array `A`. - The second line contains `n` space-separated integers representing the array `A`. # Constraints - 2 leq n leq 10^5 - 1 leq a_i leq 10^9 # Output Format - Print \\"YES\\" if it\'s possible to partition the array into two subarrays with the required property. Otherwise, print \\"NO\\". # Sample Input 0 ``` 4 1 2 3 4 ``` # Sample Output 0 ``` YES ``` # Explanation 0 One possible partition is [1, 2] and [3, 4]. The sum of [1, 2] is 3, and the sum of [3, 4] is 7. Their product is 3 * 7 = 21, which is not a perfect square. By checking all possible partitions, we find that it\'s possible to achieve a perfect square product, hence the result is \\"YES\\". # Sample Input 1 ``` 3 1 6 5 ``` # Sample Output 1 ``` NO ``` # Explanation 1 There is no partition of the array into two non-empty subarrays such that their product of sums is a perfect square. Hence, the result is \\"NO\\".","solution":"import math def is_product_of_sums_perfect_square(n, A): total_sum = sum(A) prefix_sum = 0 for i in range(n - 1): prefix_sum += A[i] rest_sum = total_sum - prefix_sum product = prefix_sum * rest_sum if is_perfect_square(product): return \\"YES\\" return \\"NO\\" def is_perfect_square(x): s = int(math.isqrt(x)) return s * s == x"},{"question":"Calculate the greatest common divisor (GCD) of two positive integers `a` and `b`. Random tests will include values up to `a, b = 1,000,000`. Examples ```python gcd(4, 10) == 2 # the common divisors are 1 and 2; the greatest is 2 gcd(18, 24) == 6 # the common divisors are 1, 2, 3, 6; the greatest is 6 gcd(48, 180) == 12 # the common divisors are 1, 2, 3, 4, 6, 12; the greatest is 12 gcd(101, 103) == 1 # the common divisor is 1; the greatest is 1 (since both are prime) ```","solution":"def gcd(a, b): Returns the greatest common divisor of a and b using the Euclidean algorithm. while b: a, b = b, a % b return a"},{"question":"Given an array of integers, you have to rotate the array in a circular manner by k positions to the right. For example, if you have an array [1,2,3,4,5] and k = 2, then after rotating the array should be [4,5,1,2,3]. Your task is to implement a function that performs this rotation. Function Signature: ```python def rotate_array(arr: List[int], k: int) -> List[int]: ``` **Input:** - A list `arr` of integers. - A non-negative integer `k`, where 0 ≤ k ≤ 10^9+6. **Output:** - A list of integers representing the array after k rotations to the right. **Examples:** **Example 1:** Input: ``` arr = [1, 2, 3, 4, 5] k = 2 ``` Output: ``` [4, 5, 1, 2, 3] ``` **Example 2:** Input: ``` arr = [10, 20, 30, 40, 50] k = 3 ``` Output: ``` [30, 40, 50, 10, 20] ``` **Explanation:** In Example 1, rotating [1, 2, 3, 4, 5] by 2 positions to the right results in the array [4, 5, 1, 2, 3]. In Example 2, rotating [10, 20, 30, 40, 50] by 3 positions to the right results in the array [30, 40, 50, 10, 20].","solution":"from typing import List def rotate_array(arr: List[int], k: int) -> List[int]: Rotates the array `arr` to the right by `k` positions. n = len(arr) if n == 0: return arr # Use mod operator to handle cases where k > n k = k % n return arr[-k:] + arr[:-k]"},{"question":"Example Input 5 10 20 20 30 30 20 20 10 20 20 Output 2","solution":"def most_frequent_second_element(n, pairs): Finds the most frequent second element in a list of n pairs. :param n: Integer, the number of pairs :param pairs: List of tuples, each containing a pair of integers :return: Integer, the most frequent second element from collections import Counter # Extract the second elements second_elements = [pair[1] for pair in pairs] # Count the frequency of each second element counter = Counter(second_elements) # Get the element with the highest frequency most_frequent_element = None max_frequency = 0 for elem, freq in counter.items(): if freq > max_frequency: most_frequent_element = elem max_frequency = freq return most_frequent_element"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},F={class:"card-container"},j={key:0,class:"empty-state"},Y=["disabled"],P={key:0},z={key:1};function R(s,e,u,p,r,a){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",F,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",j,' No results found for "'+h(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",P,"See more"))],8,Y)):l("",!0)])}const M=d(A,[["render",R],["__scopeId","data-v-87649af3"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/29.md","filePath":"deepseek/29.md"}'),L={name:"deepseek/29.md"},G=Object.assign(L,{setup(s){return(e,u)=>(n(),i("div",null,[x(M)]))}});export{B as __pageData,G as default};
