import{_ as c,o as n,c as i,a as t,m as h,t as d,C as g,M as _,U as y,f as u,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},E={class:"review-title"},A={class:"review-content"};function I(r,e,l,p,s,a){return n(),i("div",T,[t("div",q,[t("div",E,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),h(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",A,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),h(d(l.poem.solution),1)])])])}const C=c(k,[["render",I],["__scopeId","data-v-5e21d714"]]),S=JSON.parse('[{"question":"# Problem Statement **Sorting a Nearly Sorted List** is a classic problem where an array is almost sorted in ascending order except that each element is at most `k` positions away from its sorted position. Given an array `arr` of `n` elements where each element is at most `k` positions away from its sorted position, your task is to sort the array efficiently. # Task Write a function `sort_nearly_sorted(arr: List[int], k: int) -> List[int]` that takes in an integer array `arr` and an integer `k`, and returns the sorted array. # Input * `arr (List[int])`: The array of integers. * `k (int)`: The maximum distance of each element from its sorted position. # Output * Return the sorted array in ascending order. # Example Consider the following examples to gain clarity: ```python >>> sort_nearly_sorted([6, 5, 3, 2, 8, 10, 9], 3) [2, 3, 5, 6, 8, 9, 10] >>> sort_nearly_sorted([10, 9, 8, 7, 4, 70, 60, 50], 4) [4, 7, 8, 9, 10, 50, 60, 70] ``` # Constraints 1. The input array length `n` will be between `1` and `10^5`. 2. The value `k` will be between `1` and `n-1`. 3. All elements in the array will be distinct integers within the range of `1` and `10^6`. # Performance Requirements Ensure your solution handles large inputs efficiently in both time and space complexities, ideally using a heap-based approach or a similar optimized algorithm.","solution":"import heapq from typing import List def sort_nearly_sorted(arr: List[int], k: int) -> List[int]: Sorts a nearly sorted array where every element is at most k positions away from its sorted position. Parameters: arr (List[int]): The nearly sorted array. k (int): The maximum distance of each element from its sorted position. Returns: List[int]: The sorted array. if not arr: return [] # Create a min-heap with the first k+1 elements heap = arr[:k + 1] heapq.heapify(heap) # The index in the result array target_index = 0 # Process the remaining elements in the array for remaining_index in range(k + 1, len(arr)): arr[target_index] = heapq.heappop(heap) heapq.heappush(heap, arr[remaining_index]) target_index += 1 # Collect the remaining elements from the heap while heap: arr[target_index] = heapq.heappop(heap) target_index += 1 return arr"},{"question":"# Flight Itinerary Generator Scenario You have been hired by a travel agency to develop an itinerary generator for their customers. The itinerary must show the order of flights taken based on a given list of flight segments. Each flight segment indicates a departure and an arrival location, and proper sequencing is required to generate the complete route. Task Implement a function `generate_itinerary(flights: List[Tuple[str, str]]) -> List[str]` that takes in a list of flight segments and generates the complete flight itinerary in the correct order. Input and Output Formats * The input parameter `flights` is a list of tuples, where each tuple contains two strings representing the departure and arrival locations. * The output should be a list of strings representing the complete itinerary. Itinerary Generation Process 1. Identify the starting location (a location that does not appear as an arrival in any segment). 2. Sequence the flight segments to form a continuous route. 3. Ensure that all given segments are used exactly once and the itinerary correctly connects all locations. Constraints * Each flight segment is unique. * There is exactly one valid itinerary for each input. * The length of the list `flights` is between 1 and 10^4. * Each location string\'s length is between 1 and 30, and consists of English letters only. Example ```python def generate_itinerary(flights: List[Tuple[str, str]]) -> List[str]: # TODO: Implement this function pass >>> generate_itinerary([(\\"JFK\\", \\"ATL\\"), (\\"ATL\\", \\"SFO\\"), (\\"SFO\\", \\"LAX\\")]) [\'JFK\', \'ATL\', \'SFO\', \'LAX\'] >>> generate_itinerary([(\\"LAX\\", \\"JFK\\"), (\\"SFO\\", \\"LAX\\"), (\\"ATL\\", \\"SFO\\")]) [\'ATL\', \'SFO\', \'LAX\', \'JFK\'] ``` Notes * Use efficient data structures to manage lookup and insertion of segments. * Consider edge cases such as single segment flights or circular itineraries. * Ensure to handle the itinerary formation even if input segments are unordered.","solution":"from typing import List, Tuple, Dict def generate_itinerary(flights: List[Tuple[str, str]]) -> List[str]: # Create a graph to represent the flights as an adjacency list graph = {} in_degree = {} out_degree = {} for departure, arrival in flights: if departure not in graph: graph[departure] = [] graph[departure].append(arrival) if departure not in out_degree: out_degree[departure] = 0 if arrival not in in_degree: in_degree[arrival] = 0 out_degree[departure] += 1 in_degree[arrival] += 1 if arrival not in out_degree: out_degree[arrival] = 0 if departure not in in_degree: in_degree[departure] = 0 # Find the starting point: the node with out_degree and no in_degree start = None for location in out_degree: if out_degree[location] == in_degree.get(location, 0) + 1: start = location break elif start is None: start = location if start is None: return [] # Hierholzer\'s algorithm to find Eulerian Path/Circuit def visit(airport: str, result: List[str]): while graph.get(airport): next_airport = graph[airport].pop() visit(next_airport, result) result.append(airport) result = [] visit(start, result) return list(reversed(result))"},{"question":"# Task Description: Write a function `reverse_even_sublists` that takes in a list of integers and returns a new list where all the contiguous sublists of even numbers are reversed in place, while odd numbers remain in their original position. # Function Signature: ```python def reverse_even_sublists(numbers: list) -> list: Given a list of integers, reverse the contiguous sublists of even numbers in place. Parameters: numbers (list): A list of integers. Returns: list: A new list with even number sublists reversed, and odd numbers unchanged. pass ``` # Constraints: 1. The input list will contain at least one integer and at most 10000 integers. 2. Each integer in the list will be between -1000 and 1000. # Example: ```python numbers = [1, 2, 8, 4, 3, 6, 6, 7, 9, 2, 2, 12, 1] print(reverse_even_sublists(numbers)) # Expected output: [1, 4, 8, 2, 3, 6, 6, 7, 9, 12, 2, 2, 1] numbers = [10, 12, 14, 17, 18, 20, 3] print(reverse_even_sublists(numbers)) # Expected output: [14, 12, 10, 17, 20, 18, 3] ``` # Notes: 1. The function should process the list in a single pass, without using additional library functions for reversing sublists. 2. Preserve the relative order of elements that are not part of any even sublist. 3. Consider the edge cases where there are no even-numbered sublists, or where the entire list comprises even numbers.","solution":"def reverse_even_sublists(numbers: list) -> list: Given a list of integers, reverse the contiguous sublists of even numbers in place. Parameters: numbers (list): A list of integers. Returns: list: A new list with even number sublists reversed, and odd numbers unchanged. result = [] i = 0 n = len(numbers) while i < n: if numbers[i] % 2 == 0: even_start = i while i < n and numbers[i] % 2 == 0: i += 1 even_sublist = numbers[even_start:i][::-1] result.extend(even_sublist) else: result.append(numbers[i]) i += 1 return result"},{"question":"# Problem Statement You are given an array of integers that represents heights of columns of varied width, each with a width of 1 unit. Your task is to implement a function to find the area of the largest rectangle that can be formed within these columns. # Function Signature ```python def largest_rectangle_area(heights: List[int]) -> int: pass ``` # Input Format * A list of integers heights where `1 <= len(heights) <= 10^5` and `0 <= heights[i] <= 10^4`. # Output Format * Return an integer representing the area of the largest rectangle that can be formed. # Example ```python heights = [2, 1, 5, 6, 2, 3] print(largest_rectangle_area(heights)) # Output: 10 ``` # Explanation In the above example, the largest rectangle can be formed using the heights `[5, 6]`, which results in an area of `5 * 2 = 10`. # Notes * Ensure the function handles edge cases effectively, such as an array with all elements being the same height or heights containing zeroes. * Consider the algorithm\'s time complexity, given the input size limits. An optimal solution should aim to achieve a time complexity close to O(n).","solution":"from typing import List def largest_rectangle_area(heights: List[int]) -> int: Function to find the area of the largest rectangle that can be formed within given heights. # Create a stack to keep indices of bars stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"# Subject: Data Structure Manipulation and Simulation You are tasked with implementing a system to manage a sequence of operations on a stack data structure, simulating a typical use-case scenario in various real-world applications. # Description A basic stack supports two primary operations: 1. **Push(x)**: Add element x to the top of the stack. 2. **Pop()**: Remove the element from the top of the stack and return it. If the stack is empty, return `-1`. You are required to simulate a series of stack operations and, after processing the operations, return a list of the results from the `Pop` operations. # Implementation Functions 1. **`simulate_stack_operations(operations: List[Tuple[str, int]]) -> List[int]`**: - **Input**: A list of operations, where each operation is a tuple. If the operation is `Push`, the tuple is of the form `(\\"Push\\", x)` where x is an integer. If the operation is `Pop`, the tuple is of the form `(\\"Pop\\", None)`. - **Output**: A list of integers representing the results of the `Pop` operations in the order they were executed. # Function Definition ```python def simulate_stack_operations(operations: List[Tuple[str, int]]) -> List[int]: Simulates a sequence of stack operations and collects results of Pop operations. Args: operations (List[Tuple[str, int]]): The list of stack operations to perform. Returns: List[int]: The results of the Pop operations. pass ``` # Requirements - Use only standard Python data structures and language features. - Your solution must handle edge cases such as performing `Pop` on an empty stack. - Ensure your solution is efficient and works within a reasonable time for up to 10,000 operations. # Examples ```python # Example 1 operations1 = [(\\"Push\\", 1), (\\"Push\\", 2), (\\"Pop\\", None), (\\"Push\\", 3), (\\"Pop\\", None)] print(simulate_stack_operations(operations1)) # Output: [2, 3] # Example 2 operations2 = [(\\"Pop\\", None), (\\"Push\\", 4), (\\"Pop\\", None), (\\"Pop\\", None)] print(simulate_stack_operations(operations2)) # Output: [-1, 4, -1] # Example 3 operations3 = [(\\"Push\\", 5), (\\"Push\\", 10), (\\"Push\\", 15), (\\"Pop\\", None), (\\"Pop\\", None), (\\"Pop\\", None), (\\"Pop\\", None)] print(simulate_stack_operations(operations3)) # Output: [15, 10, 5, -1] ``` # Constraints - The number of operations, ( len(operations) ), will be between 1 and 10,000. - The integer values pushed onto the stack will be between (-10^9) and (10^9). - Ensure to handle the stack being empty during `Pop` operations efficiently.","solution":"def simulate_stack_operations(operations): Simulates a sequence of stack operations and collects results of Pop operations. Args: operations (List[Tuple[str, int]]): The list of stack operations to perform. Returns: List[int]: The results of the Pop operations. stack = [] result = [] for operation in operations: if operation[0] == \\"Push\\": stack.append(operation[1]) elif operation[0] == \\"Pop\\": if stack: result.append(stack.pop()) else: result.append(-1) return result"},{"question":"# Coding Assessment Question You are required to extend a program that processes and analyzes weather data. The existing implementation fetches current weather conditions from a public weather API and logs temperature changes over time. Now, extend the functionality to include fetching historical weather data for a particular location and computing average temperatures. Task: 1. Implement a function `get_historical_weather(api_key: str, location: str, date: str) -> dict` that: - Fetches historical weather data for the given location and date from the weather API. - Returns a dictionary containing key weather metrics (temperature, humidity, wind speed) for that date. 2. Implement the function `calculate_average_temperature(api_key: str, location: str, start_date: str, end_date: str) -> float` that: - Fetches historical weather data for each date within the specified date range. - Computes and returns the average temperature over that period. Expected Input and Output: * `get_historical_weather`: - **Input**: `api_key`: str, `location`: str, `date`: str (in YYYY-MM-DD format). - **Output**: Dictionary (containing \'temperature\', \'humidity\', \'wind_speed\'). * `calculate_average_temperature`: - **Input**: `api_key`: str, `location`: str, `start_date`: str (in YYYY-MM-DD format), `end_date`: str (in YYYY-MM-DD format). - **Output**: Float (average temperature over the date range). Constraints: - All input strings will be non-empty and properly formatted as per their descriptions. - The date range will be valid (i.e., the end date will always be equal to or after the start date). Performance Requirements: - Ensure network requests are handled efficiently. - Include basic error handling to manage potential failure scenarios (e.g., invalid API key, network timeout). Hints: - Utilize Python\'s `requests` library for making HTTP requests. - Handle JSON responses and potential exceptions gracefully. - Use a date handling library such as `datetime` to iterate over date ranges. Implement the following: ```python import requests from datetime import datetime, timedelta def get_historical_weather(api_key: str, location: str, date: str) -> dict: Fetch historical weather data for the given location and date from the weather API. url = f\\"https://api.weatherapi.com/v1/history.json\\" params = { \\"key\\": api_key, \\"q\\": location, \\"dt\\": date } try: response = requests.get(url, params=params, timeout=10) response.raise_for_status() data = response.json()[\\"forecast\\"][\\"forecastday\\"][0][\\"day\\"] return { \\"temperature\\": data[\\"avgtemp_c\\"], \\"humidity\\": data[\\"avghumidity\\"], \\"wind_speed\\": data[\\"maxwind_kph\\"] } except requests.RequestException as e: print(f\\"An error occurred: {e}\\") return {} def calculate_average_temperature(api_key: str, location: str, start_date: str, end_date: str) -> float: Fetch historical weather data for each date within the specified date range, and compute the average temperature. start = datetime.strptime(start_date, \\"%Y-%m-%d\\") end = datetime.strptime(end_date, \\"%Y-%m-%d\\") date_range = (end - start).days + 1 total_temp = 0.0 valid_days = 0 for day in range(date_range): date = (start + timedelta(days=day)).strftime(\\"%Y-%m-%d\\") weather_data = get_historical_weather(api_key, location, date) if \\"temperature\\" in weather_data: total_temp += weather_data[\\"temperature\\"] valid_days += 1 if valid_days == 0: return 0.0 return total_temp / valid_days ```","solution":"import requests from datetime import datetime, timedelta def get_historical_weather(api_key: str, location: str, date: str) -> dict: Fetch historical weather data for the given location and date from the weather API. url = f\\"https://api.weatherapi.com/v1/history.json\\" params = { \\"key\\": api_key, \\"q\\": location, \\"dt\\": date } try: response = requests.get(url, params=params, timeout=10) response.raise_for_status() data = response.json()[\\"forecast\\"][\\"forecastday\\"][0][\\"day\\"] return { \\"temperature\\": data[\\"avgtemp_c\\"], \\"humidity\\": data[\\"avghumidity\\"], \\"wind_speed\\": data[\\"maxwind_kph\\"] } except requests.RequestException as e: print(f\\"An error occurred: {e}\\") return {} def calculate_average_temperature(api_key: str, location: str, start_date: str, end_date: str) -> float: Fetch historical weather data for each date within the specified date range, and compute the average temperature. start = datetime.strptime(start_date, \\"%Y-%m-%d\\") end = datetime.strptime(end_date, \\"%Y-%m-%d\\") date_range = (end - start).days + 1 total_temp = 0.0 valid_days = 0 for day in range(date_range): date = (start + timedelta(days=day)).strftime(\\"%Y-%m-%d\\") weather_data = get_historical_weather(api_key, location, date) if \\"temperature\\" in weather_data: total_temp += weather_data[\\"temperature\\"] valid_days += 1 if valid_days == 0: return 0.0 return total_temp / valid_days"},{"question":"# Scenario You have been hired to create a software system for a local bookstore. One of the key features needed is a recommendation engine that suggests books based on the similarity of their genres. Each book belongs to exactly one genre, and the system should be able to identify the most common genre among a list of favorite books provided by the user. # Task Implement the function `recommend_genre`, which takes a list of favorite books and returns the genre that appears most frequently. If there is a tie, return the genre that comes first alphabetically. # Requirements 1. **Function Signature**: ```python def recommend_genre(favorite_books: list[tuple[str, str]]) -> str: pass ``` 2. **Parameters**: - `favorite_books` (list of tuples): A list where each tuple contains two strings; the title of the book and its genre. 3. **Returns**: - (str): The most frequently occurring genre or the alphabetically first genre in case of a tie. 4. **Constraints**: - The list of favorite books will have at least one book. - Each tuple in the list will contain exactly one book title and one genre, both of which are non-empty strings. - Genres are case-insensitive. # Examples Consider the following examples: ```python >>> recommend_genre([(\\"Harry Potter\\", \\"Fantasy\\"), (\\"The Hobbit\\", \\"Fantasy\\"), (\\"1984\\", \\"Dystopian\\")]) \\"Fantasy\\" >>> recommend_genre([(\\"To Kill a Mockingbird\\", \\"Fiction\\"), (\\"The Great Gatsby\\", \\"Fiction\\"), (\\"Pride and Prejudice\\", \\"Romance\\"), (\\"Jane Eyre\\", \\"Romance\\")]) \\"Fiction\\" >>> recommend_genre([(\\"Book A\\", \\"Science\\"), (\\"Book B\\", \\"Math\\"), (\\"Book C\\", \\"Science\\"), (\\"Book D\\", \\"Math\\")]) \\"Math\\" ``` # Additional Notes Consider edge cases such as: - List containing only one book. - Multiple genres with the same frequency.","solution":"from collections import Counter def recommend_genre(favorite_books: list[tuple[str, str]]) -> str: Returns the most frequently occurring genre among the user\'s favorite books. In case of a tie, returns the alphabetically first genre. genres = [genre.lower() for _, genre in favorite_books] genre_count = Counter(genres) most_common = genre_count.most_common() # Find all genres with the maximum count max_count = most_common[0][1] most_frequent_genres = [genre for genre, count in most_common if count == max_count] # Return the alphabetically first genre return min(most_frequent_genres)"},{"question":"# Problem Statement: Logistic Regression Enhancement You are provided with a basic implementation of logistic regression using gradient descent for binary classification. The current implementation uses a simple gradient descent algorithm with a fixed learning rate. Your task is to improve this implementation by adding two features: 1. Implement the learning rate schedules (constant, time-based decay, and exponential decay). 2. Implement the option to include L2 regularization to prevent overfitting. # Function Signature ```python import numpy as np def sigmoid(z: np.ndarray) -> np.ndarray: Apply the sigmoid function to the input array. Parameters: z (np.ndarray): Numpy array of input values. Returns: np.ndarray: Numpy array with sigmoid applied to each element. pass def initialize_weights(n_features: int) -> np.ndarray: Initialize weights for the logistic regression model. Parameters: n_features (int): Number of features in the dataset. Returns: np.ndarray: Numpy array of initialized weights. pass def logistic_regression(data: np.ndarray, targets: np.ndarray, learning_rate: float = 0.01, epochs: int = 1000, schedule: str = \\"constant\\", reg_lambda: float = 0.0) -> np.ndarray: Perform logistic regression using gradient descent with an optional learning rate schedule and L2 regularization. Parameters: data (np.ndarray): Numpy array of data points with shape (n_samples, n_features). targets (np.ndarray): Numpy array of binary target labels with shape (n_samples,). learning_rate (float, optional): Initial learning rate for gradient descent. epochs (int, optional): Number of iterations for gradient descent. schedule (str, optional): Learning rate schedule (\\"constant\\", \\"time-based\\", \\"exponential\\"). reg_lambda (float, optional): Regularization strength for L2 regularization. Returns: np.ndarray: Numpy array of learned weights. pass ``` # Input * `data`: A 2D numpy array of shape (n_samples, n_features) representing the dataset. * `targets`: A 1D numpy array of shape (n_samples,) representing the binary target labels. * `learning_rate`: A float representing the initial learning rate. * `epochs`: An integer representing the number of epochs for training. * `schedule`: A string indicating the learning rate schedule (\\"constant\\", \\"time-based\\", or \\"exponential\\"). * `reg_lambda`: A float representing the regularization strength for L2 regularization. # Output * `sigmoid`: A 2D numpy array with the sigmoid function applied to each element of the input. * `initialize_weights`: A 1D numpy array of shape (n_features,) representing the initialized weights. * `logistic_regression`: A 1D numpy array of shape (n_features,) representing the learned weights. # Constraints * Ensure the gradient descent with different learning rate schedules works efficiently and effectively for large datasets. * Validate that the provided learning rate schedule is among the allowed options and handle invalid schedules gracefully. * Implement and handle L2 regularization properly within the gradient descent iterations. # Example Usage ```python data = np.array([[0.5, 1.0], [1.5, 1.8], [5.0, 7.0], [6.8, 8.5], [1.2, 0.5], [8.1, 9.8]]) targets = np.array([0, 0, 1, 1, 0, 1]) learning_rate = 0.01 epochs = 1000 reg_lambda = 0.1 # Test logistic regression with different learning rate schedules and L2 regularization for schedule in [\\"constant\\", \\"time-based\\", \\"exponential\\"]: weights = logistic_regression(data, targets, learning_rate, epochs, schedule, reg_lambda) print(f\\"Learned Weights using {schedule} learning rate schedule and L2 regularization:\\") print(weights) ``` # Solution Requirements * Implement the function `sigmoid` that applies the sigmoid function element-wise to an input array. * Implement the function `initialize_weights` to create an initial set of weights for the logistic regression model. * Implement the function `logistic_regression` to perform binary logistic regression, incorporating different learning rate schedules and L2 regularization. * Ensure your solution passes the provided example usage scenario.","solution":"import numpy as np def sigmoid(z: np.ndarray) -> np.ndarray: Apply the sigmoid function to the input array. Parameters: z (np.ndarray): Numpy array of input values. Returns: np.ndarray: Numpy array with sigmoid applied to each element. return 1 / (1 + np.exp(-z)) def initialize_weights(n_features: int) -> np.ndarray: Initialize weights for the logistic regression model. Parameters: n_features (int): Number of features in the dataset. Returns: np.ndarray: Numpy array of initialized weights. return np.zeros(n_features) def logistic_regression(data: np.ndarray, targets: np.ndarray, learning_rate: float = 0.01, epochs: int = 1000, schedule: str = \\"constant\\", reg_lambda: float = 0.0) -> np.ndarray: Perform logistic regression using gradient descent with an optional learning rate schedule and L2 regularization. Parameters: data (np.ndarray): Numpy array of data points with shape (n_samples, n_features). targets (np.ndarray): Numpy array of binary target labels with shape (n_samples,). learning_rate (float, optional): Initial learning rate for gradient descent. epochs (int, optional): Number of iterations for gradient descent. schedule (str, optional): Learning rate schedule (\\"constant\\", \\"time-based\\", \\"exponential\\"). reg_lambda (float, optional): Regularization strength for L2 regularization. Returns: np.ndarray: Numpy array of learned weights. n_samples, n_features = data.shape weights = initialize_weights(n_features) def update_learning_rate(epoch: int, lr: float, sch: str) -> float: if sch == \\"constant\\": return lr elif sch == \\"time-based\\": return lr / (1 + epoch) elif sch == \\"exponential\\": return lr * np.exp(-0.1 * epoch) else: raise ValueError(\\"Unsupported learning rate schedule.\\") for epoch in range(epochs): lr = update_learning_rate(epoch, learning_rate, schedule) predictions = sigmoid(np.dot(data, weights)) errors = predictions - targets gradient = np.dot(data.T, errors) / n_samples if reg_lambda != 0: gradient += reg_lambda * weights / n_samples weights -= lr * gradient return weights"},{"question":"# Question: Generate Fibonacci Sequence Using Dynamic Programming You are required to implement a function that generates the Fibonacci sequence up to the `n`-th term using dynamic programming. The Fibonacci sequence is defined as follows: * `F(0) = 0` * `F(1) = 1` * `F(n) = F(n-1) + F(n-2)` for `n >= 2` # Requirements: 1. Implement the function `generate_fibonacci(n: int) -> List[int]`: * **`n` (int)**: The index of the final term in the Fibonacci sequence to be generated. 2. Use dynamic programming to efficiently calculate the sequence up to `n`-th term. 3. The function should return a list of integers representing the Fibonacci sequence from `F(0)` to `F(n)`. # Example: ```python generate_fibonacci(10) ``` This should return the list: ```python [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] ``` # Constraints: * 0 <= n <= 1000 # Performance Requirements: * The function should run in O(n) time complexity. * The function should use O(n) additional space. # Additional Notes: * Ensure that the implementation handles edge cases where `n` is 0 or 1 correctly. * Optimize for both time and space, using an iterative approach with dynamic programming to avoid redundant calculations. --- The above question assesses the candidate\'s understanding and application of dynamic programming to efficiently produce the Fibonacci sequence. This aligns with the existing set\'s objective of testing algorithmic thinking and optimization techniques.","solution":"def generate_fibonacci(n: int) -> list: Generates the Fibonacci sequence up to the n-th term. Parameters: n (int): The index of the final term in the Fibonacci sequence to be generated. Returns: list: A list of integers representing the Fibonacci sequence from F(0) to F(n). if n < 0: raise ValueError(\\"The input must be a non-negative integer.\\") if n == 0: return [0] elif n == 1: return [0, 1] # DP array to store Fibonacci numbers fib = [0] * (n + 1) fib[0] = 0 fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib"},{"question":"# Question: Custom String Reverser Design and implement a function that reverses a string but only for the alphabetic characters, leaving non-alphabetic characters in their original positions. Your task is to write a function `custom_string_reverser` that takes one argument: 1. `input_str`: A string that contains both alphabetic and non-alphabetic characters. The function should return a new string where the alphabetic characters are reversed in order but the non-alphabetic characters remain in the same positions as in the original string. Implementation ```python def custom_string_reverser(input_str: str) -> str: Returns a string with alphabetic characters reversed and non-alphabetic characters in their original positions Parameters: input_str (str): The input string containing both alphabetic and non-alphabetic characters Returns: str: The resulting string with alphabetic characters reversed Example: >>> custom_string_reverser(\\"a,bc\\") \\"c,ba\\" >>> custom_string_reverser(\\"Ab,c?!De\\") \\"eD,c?!bA\\" # Extract alphabetic characters and reverse them letters = [char for char in input_str if char.isalpha()] reversed_letters = letters[::-1] # Reconstruct the string with reversed letters and original non-alphabetic characters result = [] letter_index = 0 for char in input_str: if char.isalpha(): result.append(reversed_letters[letter_index]) letter_index += 1 else: result.append(char) return \'\'.join(result) ``` Input and Output Format: - **Input**: A single string containing both alphabetic and non-alphabetic characters. - **Output**: A string with alphabetic characters reversed and non-alphabetic characters in their original positions. Constraints: - Assume the input string contains only printable ASCII characters. Example: **Input**: ```python print(custom_string_reverser(\\"a,bc\\")) ``` **Output**: ```python c,ba ``` **Note**: This problem requires handling both alphabetic and non-alphabetic characters appropriately, ensuring the non-alphabetic characters remain unchanged while reversing the alphabetic characters.","solution":"def custom_string_reverser(input_str: str) -> str: Returns a string with alphabetic characters reversed and non-alphabetic characters in their original positions Parameters: input_str (str): The input string containing both alphabetic and non-alphabetic characters Returns: str: The resulting string with alphabetic characters reversed Example: >>> custom_string_reverser(\\"a,bc\\") \\"c,ba\\" >>> custom_string_reverser(\\"Ab,c?!De\\") \\"eD,c?!bA\\" # Extract alphabetic characters and reverse them letters = [char for char in input_str if char.isalpha()] reversed_letters = letters[::-1] # Reconstruct the string with reversed letters and original non-alphabetic characters result = [] letter_index = 0 for char in input_str: if char.isalpha(): result.append(reversed_letters[letter_index]) letter_index += 1 else: result.append(char) return \'\'.join(result)"},{"question":"# Sorting an Array of Strings by Character Frequency You need to write a function that sorts an array of strings based on the frequency of a specified character in each string. If two strings have the same frequency of the specified character, they should be sorted lexicographically. **Function Signature** ```python def sort_by_char_frequency(strings: List[str], char: str) -> List[str]: ``` # Input 1. `strings` (List[str]): List of strings to be sorted. 2. `char` (str): Character to be used for frequency calculation. # Output A list of strings sorted primarily by the frequency of the character `char` and secondarily lexicographically, both in ascending order. # Constraints * 1 ≤ number of strings ≤ 10^3 * 1 ≤ length of each string ≤ 100 * The `char` will be a single character and will be present in all strings. * All strings contain only lowercase English letters. **Examples** ```python strings = [\\"apple\\", \\"banana\\", \\"cherry\\"] char = \\"a\\" result = sort_by_char_frequency(strings, char) print(result) # Output: [\'apple\', \'banana\', \'cherry\'] # Explanation: \\"apple\\" has 1 \'a\', \\"banana\\" has 3 \'a\'s, and \\"cherry\\" has 0 \'a\'s. # After sorting by frequency: [\'cherry\', \'apple\', \'banana\'] strings = [\\"doodle\\", \\"good\\", \\"bool\\"] char = \\"o\\" result = sort_by_char_frequency(strings, char) print(result) # Output: [\'bool\', \'doodle\', \'good\'] # Explanation: \\"bool\\" has 1 \'o\', \\"doodle\\" has 2 \'o\'s, and \\"good\\" has 2 \'o\'s. # After sorting by frequency and then lexicographically: [\'bool\', \'doodle\', \'good\'] ``` # Hint * You may find the `sorted` function useful with a custom sorting key. * Use the `count` method of strings to find the frequency of the specified character.","solution":"from typing import List def sort_by_char_frequency(strings: List[str], char: str) -> List[str]: Returns the list of strings sorted primarily by the frequency of the specified character char and secondarily lexicographically. return sorted(strings, key=lambda x: (x.count(char), x))"},{"question":"# Coding Assessment Question You are tasked with determining the most frequently occurring word in a given paragraph of text, ignoring common stop words. # Problem Statement Write a function `most_common_word(paragraph: str, banned: List[str]) -> str` that returns the most common word in the paragraph that is not in the provided list of banned words. # Input - A string `paragraph` representing the text. - A list of strings `banned` containing the words that should be ignored. # Output - A string representing the most frequently occurring word that is not in the banned list. # Constraints - The input string `paragraph` will contain lowercase and uppercase letters, and punctuation. - The length of `paragraph` will not exceed 10^4 characters. - The words in the paragraph will be separated by spaces or punctuations. - The length of the `banned` list will not exceed 100 words. # Example ```python >>> most_common_word(\\"Bob hit a ball, the hit BALL flew far after it was hit.\\", [\\"hit\\"]) \\"ball\\" >>> most_common_word(\\"a.\\", []) \\"a\\" >>> most_common_word(\\"Bob. hIt, baLl\\", [\\"bob\\", \\"hit\\"]) \\"ball\\" ``` # Notes - The comparison should be case-insensitive. - You should ignore punctuation and treat words with different cases as the same word (e.g., \\"Ball\\" should be considered the same as \\"ball\\"). - Ensure efficiency when processing the text and searching through the banned words list. # Implementation Hints 1. Consider using a regular expression to split the paragraph into words while removing punctuation. 2. Utilize a dictionary or collection to count the frequency of each word. 3. Handle the conversion of words to lower case to ensure case insensitivity.","solution":"import re from collections import Counter from typing import List def most_common_word(paragraph: str, banned: List[str]) -> str: Returns the most common word in the paragraph that is not in the banned list. # Convert paragraph to lowercase and split into words words = re.findall(r\'w+\', paragraph.lower()) # Count occurrence of each word word_count = Counter(words) # Remove banned words from the count for word in banned: if word in word_count: del word_count[word] # Return the most common word return word_count.most_common(1)[0][0]"},{"question":"# Problem Statement You are asked to write a function that finds the longest subsequence of balanced parentheses in a given string. A subsequence is obtained by deleting zero or more characters from the string without changing the order of the remaining characters. # Function Signature ```python def longest_balanced_subsequence(s: str) -> int: pass ``` # Input - A string `s` containing only characters \'(\' and \')\', with a length between 1 and 10^5. # Output - An integer representing the length of the longest balanced subsequence of parentheses in the input string. # Constraints - Your solution should have a time complexity of O(n), where n is the length of the input string. # Example 1. Consider the call: ```python longest_balanced_subsequence(\\"(()))(()\\") ``` The expected output is `6` since the longest balanced subsequence is \\"()(())\\" or \\"(()())\\". 2. Consider the call: ```python longest_balanced_subsequence(\\")))))(((\\") ``` The expected output is `0` since there are no balanced subsequences. # Additional Notes - The input string can contain unmatched parentheses. - The order of parentheses must remain unchanged when forming the subsequence. - Think about a greedy or counting approach to solve this problem efficiently. # Test Cases ```python assert longest_balanced_subsequence(\\"(()))(()\\") == 6 assert longest_balanced_subsequence(\\")))))(((\\") == 0 assert longest_balanced_subsequence(\\"(())\\") == 4 assert longest_balanced_subsequence(\\"()()()\\") == 6 assert longest_balanced_subsequence(\\"\\") == 0 ```","solution":"def longest_balanced_subsequence(s: str) -> int: Finds the length of the longest balanced subsequence of parentheses. open_count = 0 close_count = 0 # First pass: count \'(\' and valid pairs for char in s: if char == \'(\': open_count += 1 elif char == \')\' and open_count > 0: open_count -= 1 close_count += 1 # Each valid pair contributes 2 to the length of the balanced subsequence return close_count * 2"},{"question":"# Coding Assessment Question Scenario In data organization tasks, it is common to categorize sequences of elements such as strings based on certain properties. One such categorization task might involve identifying \\"palindromic sequences\\" within a set of strings. A palindrome is a string that reads the same forwards as backwards, ignoring case and non-alphanumeric characters. This requires a deeper understanding of string manipulation, filtering, and case normalization. Problem Statement Write a function `is_palindromic_sequence(word: str) -> bool` that takes a string `word` and returns a boolean indicating whether the given string is a palindrome. Non-alphanumeric characters should be ignored, and the comparison should be case-insensitive. Input and Output - **Input**: A single string `word` containing ASCII characters. (0 ≤ len(word) ≤ 1000) - **Output**: A boolean value `True` if the string is a palindrome, otherwise `False`. Constraints - You must ignore case and all non-alphanumeric characters when determining if the string is a palindrome. - You cannot use built-in string palindrome checking methods. Example ```python >>> is_palindromic_sequence(\\"A man, a plan, a canal, Panama\\") True >>> is_palindromic_sequence(\\"No lemon, no melon\\") True >>> is_palindromic_sequence(\\"Hello, World!\\") False >>> is_palindromic_sequence(\\"\\") True ``` Provide the implementation for the `is_palindromic_sequence` function. Ensure your code passes the given examples and consider any edge cases.","solution":"def is_palindromic_sequence(word: str) -> bool: Returns True if the word is a palindromic sequence, ignoring case and non-alphanumeric characters. # Filter only alphanumeric characters and convert them to lower case filtered_word = \'\'.join(char.lower() for char in word if char.isalnum()) # Check if the filtered word reads the same forwards and backwards return filtered_word == filtered_word[::-1]"},{"question":"# Problem Statement Context: You have been asked to create a file processing utility that reads a text file, processes the lines based on certain criteria, and writes the results to a new file. Instructions: 1. **Create a function `process_file`**: - This function will read a text file and process each line to filter out lines containing a specific keyword. - Input: `input_filename` (str) - the name of the text file to read, `output_filename` (str) - the name of the text file to write the filtered content to, and `keyword` (str) - the word to filter out lines containing it. - Output: The function should return the number of lines written to the output file after filtering. 2. **Implement validation in `process_file`**: - Ensure that `input_filename`, `output_filename`, and `keyword` are strings. - If any of the parameters are not strings, raise a `TypeError` exception. Specifications: - **Function Signature**: ```python def process_file(input_filename: str, output_filename: str, keyword: str) -> int: ... ``` - **Input/Output Examples**: ```python # Assuming \'input.txt\' has the following content: # hello world # this is a test # filter this line # another test line # # And the function call is made as: >>> process_file(\'input.txt\', \'output.txt\', \'test\') 2 # The \'output.txt\' would contain: # hello world # filter this line >>> process_file(\'input.txt\', \'output.txt\', 123) Traceback (most recent call last): ... TypeError: All parameters must be strings. ``` - **Constraints**: - `input_filename`, `output_filename`, and `keyword` must be strings. - Function should handle exceptions related to file operations (e.g., file not found). - Each line in the input file should be read and written individually. - **Performance Requirements**: - Aim for a solution that efficiently processes the lines, ensuring file I/O operations are handled properly to minimize memory usage.","solution":"def process_file(input_filename: str, output_filename: str, keyword: str) -> int: Processes the lines of a given input file, filtering out lines containing the specified keyword, and writes the filtered lines to an output file. Parameters: - input_filename (str): The name of the input file to read. - output_filename (str): The name of the output file to write to. - keyword (str): The keyword to use for filtering lines. Returns: - int: The number of lines written to the output file after filtering. Raises: - TypeError: If any of the parameters are not strings. # Validate input types if not all(isinstance(arg, str) for arg in [input_filename, output_filename, keyword]): raise TypeError(\\"All parameters must be strings.\\") lines_written = 0 try: with open(input_filename, \'r\') as infile, open(output_filename, \'w\') as outfile: for line in infile: if keyword not in line: outfile.write(line) lines_written += 1 except FileNotFoundError as e: raise e # Re-raise the FileNotFoundError return lines_written"},{"question":"# Scenario You are given a list of tasks to be completed, where each task has a unique identifier and a specified duration in hours. Additionally, certain tasks depend on the completion of other tasks, meaning a task can only be started once all the tasks it depends on have been completed. The tasks and dependencies form a Directed Acyclic Graph (DAG). # Task Implement a function `def schedule_tasks(tasks: List[Task], dependencies: List[Tuple[int, int]]) -> int:` that calculates the minimum total time required to complete all tasks, ensuring that all dependencies are respected. # Input and Output Formats 1. **Input**: - `tasks` (List[Task]): A list of Task objects, where each Task has a unique `id` (integer) and a `duration` (integer representing the time needed to complete the task). - `dependencies` (List[Tuple[int, int]]): A list of tuples where each tuple (a, b) represents a dependency indicating task `a` must be completed before task `b` can start. 2. **Output**: - An integer representing the minimum total time to complete all tasks. # Constraints 1. Each task\'s `id` is unique and an integer. 2. The task durations are positive integers. 3. The list of tasks and dependencies represent a valid DAG. 4. There are no cycles in the tasks and dependencies. 5. `len(tasks) <= 10^4` 6. `len(dependencies) <= 10^4` # Examples ```python @dataclass class Task: id: int duration: int # Example usage of Task class and the schedule_tasks function tasks = [Task(1, 2), Task(2, 3), Task(3, 4), Task(4, 1)] dependencies = [(1, 2), (1, 3), (3, 4)] # Explanations: # - Task 1 must be completed before Task 2 and Task 3 # - Task 3 must be completed before Task 4 # The minimal schedule time would be 7: # - Time 0-2: Task 1 runs (duration 2) # - Time 2-5: Task 2 runs (duration 3), Task 3 runs (duration 3) # - Time 5-6: Task 4 runs (duration 1) assert schedule_tasks(tasks, dependencies) == 6 tasks = [Task(1, 2), Task(2, 2)] dependencies = [(1, 2)] # Task 1 must be completed before Task 2, minimal schedule time is 4: # - Time 0-2: Task 1 runs (duration 2) # - Time 2-4: Task 2 runs (duration 2) assert schedule_tasks(tasks, dependencies) == 4 ``` Make sure to handle edge cases like no dependencies and a single task appropriately.","solution":"from dataclasses import dataclass from typing import List, Tuple, Dict from collections import defaultdict, deque @dataclass class Task: id: int duration: int def schedule_tasks(tasks: List[Task], dependencies: List[Tuple[int, int]]) -> int: graph = defaultdict(list) in_degree = defaultdict(int) task_duration = dict() for task in tasks: task_duration[task.id] = task.duration in_degree[task.id] = 0 for pred, succ in dependencies: graph[pred].append(succ) in_degree[succ] += 1 queue = deque() earliest_finish = dict() for task_id in task_duration.keys(): if in_degree[task_id] == 0: queue.append(task_id) earliest_finish[task_id] = task_duration[task_id] while queue: task_id = queue.popleft() for neighbour in graph[task_id]: in_degree[neighbour] -= 1 if in_degree[neighbour] == 0: queue.append(neighbour) earliest_finish[neighbour] = max( earliest_finish.get(neighbour, 0), earliest_finish[task_id] + task_duration[neighbour] ) return max(earliest_finish.values(), default=0)"},{"question":"# Graph Traversal and Shortest Path You are tasked with implementing a Python class that provides methods for graph traversal and finding the shortest path between nodes in an unweighted graph. The graph should be represented using adjacency lists. # Specifications: * **Class Name**: `Graph` * **Methods**: - `add_edge(v1, v2)`: Adds an undirected edge between two vertices. - `bfs(start)`: Performs Breadth-First Search starting from the given vertex and returns the order of traversal. - `dfs(start)`: Performs Depth-First Search starting from the given vertex and returns the order of traversal. - `shortest_path(start, end)`: Finds the shortest path between two vertices using BFS and returns the path as a list of vertices. # Constraints: * All vertex identifiers will be integers. * Methods should raise appropriate Python exceptions for invalid inputs: - `TypeError` if inputs are not integers. - `ValueError` if the vertices do not exist in the graph. # Example Usage: ```python graph = Graph() graph.add_edge(1, 2) graph.add_edge(1, 3) graph.add_edge(2, 4) graph.add_edge(3, 4) # Breadth-First Search bfs_result = graph.bfs(1) print(bfs_result) # Output: [1, 2, 3, 4] # Depth-First Search dfs_result = graph.dfs(1) print(dfs_result) # Output: [1, 3, 4, 2] # Shortest Path shortest_path_result = graph.shortest_path(1, 4) print(shortest_path_result) # Output: [1, 2, 4] ``` # Implementation: Implement the `Graph` class with the specified methods. Ensure each method validates its inputs and performs the required operations correctly. Exercise thorough error handling and consider edge cases such as non-existent vertices or disconnected graphs.","solution":"from collections import deque class Graph: def __init__(self): self.adjacency_list = {} def add_edge(self, v1, v2): if not isinstance(v1, int) or not isinstance(v2, int): raise TypeError(\\"Both vertices must be integers\\") if v1 not in self.adjacency_list: self.adjacency_list[v1] = [] if v2 not in self.adjacency_list: self.adjacency_list[v2] = [] self.adjacency_list[v1].append(v2) self.adjacency_list[v2].append(v1) def bfs(self, start): if not isinstance(start, int): raise TypeError(\\"Start vertex must be an integer\\") if start not in self.adjacency_list: raise ValueError(\\"Start vertex does not exist in the graph\\") visited = set() queue = deque([start]) order = [] while queue: vertex = queue.popleft() if vertex not in visited: visited.add(vertex) order.append(vertex) for neighbor in self.adjacency_list[vertex]: if neighbor not in visited: queue.append(neighbor) return order def dfs(self, start): if not isinstance(start, int): raise TypeError(\\"Start vertex must be an integer\\") if start not in self.adjacency_list: raise ValueError(\\"Start vertex does not exist in the graph\\") visited = set() stack = [start] order = [] while stack: vertex = stack.pop() if vertex not in visited: visited.add(vertex) order.append(vertex) for neighbor in self.adjacency_list[vertex]: if neighbor not in visited: stack.append(neighbor) return order def shortest_path(self, start, end): if not isinstance(start, int) or not isinstance(end, int): raise TypeError(\\"Both start and end vertices must be integers\\") if start not in self.adjacency_list or end not in self.adjacency_list: raise ValueError(\\"One or both vertices do not exist in the graph\\") visited = set() queue = deque([(start, [start])]) while queue: current, path = queue.popleft() if current == end: return path if current not in visited: visited.add(current) for neighbor in self.adjacency_list[current]: if neighbor not in visited: queue.append((neighbor, path + [neighbor])) return None # No path found"},{"question":"# Question: Implement an Efficient Prime Factorization Function You are required to implement a function that performs prime factorization of an integer in an efficient manner. The existing naive solution is suboptimal for very large numbers, primarily due to its high time complexity. Your task is to optimize the function for better performance. # Requirements: 1. Implement the function `prime_factors(n: int) -> List[int]`: * **`n` (int)**: The integer to be factorized. * **returns**: A list of prime factors of `n`. 2. Optimize the algorithm to reduce the number of unnecessary computations. 3. Utilize efficient mathematical techniques to find the prime factors, avoiding standard trial division for larger factors. # Example: ```python print(prime_factors(60)) ``` This should return `[2, 2, 3, 5]`, as the prime factorization of `60` is (2^2 cdot 3 cdot 5). # Constraints: - 2 <= n <= 10^12 # Performance Requirements: - The function should run efficiently for all integers within the given range without significant delays. # Hints: - Consider using optimizations like checking for divisibility only up to the square root of `n`. - Handle small prime factors separately before moving on to larger ones. - Utilize a sieve algorithm to preprocess small primes if necessary for faster factor checking.","solution":"def prime_factors(n: int): Returns a list of prime factors of the given integer n. factors = [] # Handle the number of 2s that divide n while n % 2 == 0: factors.append(2) n //= 2 # n must be odd at this point so a skip of 2 (i.e., 3, 5, 7, 9, ...) can be used for i in range(3, int(n**0.5) + 1, 2): # While i divides n, add i and divide n while n % i == 0: factors.append(i) n //= i # Condition if n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"# Hangman Game Implementation Your task is to implement a simple Hangman game where the user attempts to guess a hidden word one letter at a time. The game continues until the user either guesses the word correctly or exceeds the allowed number of incorrect attempts. Function Signatures: 1. `def display_word(word: str, guessed_letters: set) -> str:` - **Input**: - `word`: the word to be guessed - `guessed_letters`: a set of letters that have been guessed so far - **Output**: - A string showing the word with unguessed letters replaced by underscores and guessed letters revealed 2. `def guess_letter(word: str, guessed_letters: set, letter: str) -> tuple[set, bool]:` - **Input**: - `word`: the word to be guessed - `guessed_letters`: a set of letters that have been guessed so far - `letter`: the letter being guessed - **Output**: - A tuple containing the updated set of guessed letters and a boolean indicating whether the guessed letter is in the word 3. `def check_win(word: str, guessed_letters: set) -> bool:` - **Input**: - `word`: the word to be guessed - `guessed_letters`: a set of letters that have been guessed so far - **Output**: - A boolean indicating whether the word has been fully guessed 4. `def hangman(word: str, max_attempts: int = 6) -> bool:` - **Input**: - `word`: the word to be guessed - `max_attempts`: maximum number of incorrect guesses allowed (default is 6) - **Output**: - A boolean indicating whether the user won or lost the game Constraints: - The word to be guessed must only contain lowercase alphabets. - The maximum number of incorrect attempts should be a positive integer. Example: ```python word_to_guess = \\"python\\" result = hangman(word_to_guess) if result: print(\\"Congratulations! You\'ve guessed the word correctly.\\") else: print(\\"Game over! Better luck next time.\\") ``` Notes: - Increment the number of incorrect attempts only for invalid guesses (guessing the same letter again should not count as incorrect). - Ensure edge cases are handled, such as invalid inputs and edge game scenarios.","solution":"def display_word(word: str, guessed_letters: set) -> str: Returns the word with unguessed letters replaced by underscores and guessed letters revealed. return \'\'.join([letter if letter in guessed_letters else \'_\' for letter in word]) def guess_letter(word: str, guessed_letters: set, letter: str) -> tuple: Updates the set of guessed letters and returns a tuple indicating whether the letter is in the word. if letter in guessed_letters: return guessed_letters, False guessed_letters.add(letter) return guessed_letters, letter in word def check_win(word: str, guessed_letters: set) -> bool: Checks whether all the letters in the word have been guessed. return all(letter in guessed_letters for letter in word) def hangman(word: str, max_attempts: int = 6) -> bool: Implements the hangman game logic. Returns True if the user wins, False otherwise. guessed_letters = set() incorrect_attempts = 0 while incorrect_attempts < max_attempts: current_display_word = display_word(word, guessed_letters) print(f\\"Current word: {current_display_word}\\") guess = input(\\"Guess a letter: \\").lower() guessed_letters, correct_guess = guess_letter(word, guessed_letters, guess) if not correct_guess: incorrect_attempts += 1 print(f\\"Incorrect guess. Attempts left: {max_attempts - incorrect_attempts}.\\") if check_win(word, guessed_letters): return True return False"},{"question":"# Coding Question: Iterative In-order Traversal of a Binary Tree **Objective**: Write a function to perform the in-order traversal of a binary tree iteratively and return a list of values in in-order sequence. # Context In-order traversal of a binary tree visits the nodes in the following order: left subtree, root node, right subtree. Using an iterative approach (without recursion) can be challenging but offers better control over stack size and potential performance benefits. # Input and Output Format - **Input**: - `root`: A `TreeNode` which represents the root of the binary tree. - **Output**: - A `List[int]` representing the node values in in-order sequence. # TreeNode Class Definition ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Constraints - The number of nodes in the tree will not exceed `10^4`. - Each node value will be in the range of `-10^5` to `10^5`. - The tree node values may not be unique. - Tree might be unbalanced. # Performance Requirements - Minimize the memory usage and optimize the time complexity as much as possible. - Using an explicit stack is acceptable. # Examples ```python def iterative_inorder_traversal(root: TreeNode) -> List[int]: pass # Example 1: # Input: # root = [1, None, 2, 3] # 1 # # 2 # / # 3 # Output: # [1, 3, 2] # Example 2: # Input: # root = [4, 2, 5, 1, 3] # 4 # / # 2 5 # / # 1 3 # Output: # [1, 2, 3, 4, 5] ``` # Additional Notes 1. Pay attention to stack management to avoid infinite loops or excessive memory usage. 2. Ensure the solution can handle both left-heavy and right-heavy trees efficiently. 3. Consider corner cases such as an empty tree (`root` is `None`).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def iterative_inorder_traversal(root: TreeNode): stack = [] inorder_list = [] current = root while current is not None or stack: # Reach the leftmost node of the current node while current is not None: stack.append(current) current = current.left # Current must be None at this point current = stack.pop() inorder_list.append(current.val) # We have visited the node and its left subtree. # Now, it\'s right subtree\'s turn current = current.right return inorder_list"},{"question":"Question: Implement a Function to Calculate Intersection of Multiple Sorted Lists Your task is to implement a function that finds the common elements (intersection) among multiple sorted lists of integers. The result should be a sorted list of integers that appear in every input list. # Function Signature ```python def common_elements(lists: List[List[int]]) -> List[int]: Given a list of sorted integer lists, returns a sorted list containing integers that are present in every list. Args: lists: List[List[int]] - A list of sorted lists of integers. Returns: List[int] - A sorted list containing integers that are common to all input lists. ``` # Input * A list `lists` where each element is a sorted list of integers. Each sublist is sorted in non-decreasing order. # Output * A sorted list containing the common elements that appear in every input list. # Constraints * 0 <= len(lists) <= 10^3 * 0 <= len(lists[i]) <= 10^4 * -10^6 <= lists[i][j] <= 10^6 # Example ```python >>> common_elements([[1, 2, 3, 4], [2, 3, 5], [2, 3, 6, 7]]) [2, 3] >>> common_elements([[1, 3, 4], [4], [4, 5, 6]]) [4] >>> common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) [] ``` # Performance Requirements * The solution should be efficient in handling large input sizes. * The expected time complexity should be optimized given the constraints. # Notes * Ensure to handle edge cases, such as when there are no input lists or when lists do not have common elements. * The result list must be sorted, even if the input lists are already sorted. # Additional Context Consider you are dealing with data that originate from several sensors providing sorted numeric readings. You want to identify specific readings that are consistently reported by all sensors. This function should help aggregate this information efficiently, even for large datasets. Handle edge cases like empty lists or no common elements gracefully while keeping the overall performance scalable.","solution":"from typing import List def common_elements(lists: List[List[int]]) -> List[int]: if not lists: return [] # Start with the first list as the base set of common elements common = set(lists[0]) for lst in lists[1:]: common.intersection_update(lst) # Convert to a sorted list return sorted(common)"},{"question":"# Coding Assessment Question: Real-time Weather Data Aggregation **Scenario**: You are tasked with developing a system for collecting and processing real-time weather data from various sensors in different locations. Each sensor records temperature, humidity, and wind speed at regular intervals. The data from the sensors is to be sent to a central system that aggregates the data for reporting and analysis. **Objective**: You need to implement a function `aggregate_weather_data` that takes in a list of weather data entries and aggregates the information to provide average temperature, average humidity, and average wind speed for each location over a specified time window. Additionally, you will implement helper functions for computing these aggregated metrics. Input: - `weather_data`: A list of `WeatherData` objects, each representing a single recorded entry. - `window_size`: An integer representing the size of the time window for aggregation in minutes. - `current_time`: A string in \\"HH:MM\\" format representing the current time, which marks the end of the aggregation window. The `WeatherData` class definition is provided, and you will be implementing the central system class with the aggregation logic. Output: - A dictionary where the keys are location names and the values are dictionaries containing average temperature, average humidity, and average wind speed over the specified time window. ```python class WeatherData: def __init__(self, location: str, time: str, temperature: float, humidity: float, wind_speed: float) -> None: self.location = location self.time = time self.temperature = temperature self.humidity = humidity self.wind_speed = wind_speed class CentralSystem: def __init__(self, window_size: int, current_time: str) -> None: self.window_size = window_size self.current_time = current_time def aggregate_weather_data(self, weather_data: list[WeatherData]) -> dict[str, dict[str, float]]: Core function to aggregate weather data over a specified time window. # Placeholder: Implement the aggregation logic here. pass def parse_time(self, time: str) -> int: Helper function to convert time string \\"HH:MM\\" to minutes from start of the day. # Placeholder: Implement the time parsing logic here. pass def filter_by_time_window(self, weather_data: list[WeatherData]) -> list[WeatherData]: Helper function to filter the weather data based on the time window. # Placeholder: Implement the time window filtering logic here. pass # Example usage: if __name__ == \\"__main__\\": data = [ WeatherData(\\"Location1\\", \\"12:00\\", 22.5, 65, 10.0), WeatherData(\\"Location1\\", \\"12:05\\", 23.0, 63, 12.0), WeatherData(\\"Location2\\", \\"12:00\\", 18.0, 55, 15.0), WeatherData(\\"Location2\\", \\"12:10\\", 19.5, 58, 14.0), WeatherData(\\"Location1\\", \\"11:55\\", 21.0, 67, 11.0), # Outside the time window for current_time=\\"12:10\\" and window_size=10 ] current_time = \\"12:10\\" window_size = 10 # 10 minutes central_system = CentralSystem(window_size, current_time) results = central_system.aggregate_weather_data(data) print(results) ``` Constraints: 1. The `window_size` should be an integer representing the number of minutes. 2. The `current_time` must be a valid time in \\"HH:MM\\" format. 3. Handle edge cases such as overlapping and non-overlapping time windows gracefully. 4. Ensure the aggregation logic is efficient and scalable. Requirements: - Correctly implement `aggregate_weather_data`, `parse_time`, and `filter_by_time_window` methods based on the provided scenario and specifications. - Ensure your solution is tested for correctness and edge cases using the class provided. **Note**: This question assesses your ability to work with time-based data, perform aggregation, and filter data based on specified time windows.","solution":"from datetime import datetime, timedelta class WeatherData: def __init__(self, location: str, time: str, temperature: float, humidity: float, wind_speed: float) -> None: self.location = location self.time = time self.temperature = temperature self.humidity = humidity self.wind_speed = wind_speed class CentralSystem: def __init__(self, window_size: int, current_time: str) -> None: self.window_size = window_size self.current_time = current_time def parse_time(self, time: str) -> datetime: Helper function to convert time string \\"HH:MM\\" to a datetime object. return datetime.strptime(time, \\"%H:%M\\") def filter_by_time_window(self, weather_data: list[WeatherData]) -> list[WeatherData]: Helper function to filter the weather data based on the time window. end_time = self.parse_time(self.current_time) start_time = end_time - timedelta(minutes=self.window_size) return [entry for entry in weather_data if start_time <= self.parse_time(entry.time) <= end_time] def aggregate_weather_data(self, weather_data: list[WeatherData]) -> dict[str, dict[str, float]]: Core function to aggregate weather data over a specified time window. filtered_data = self.filter_by_time_window(weather_data) aggregated_data = {} for entry in filtered_data: if entry.location not in aggregated_data: aggregated_data[entry.location] = { \'temperature_total\': 0.0, \'humidity_total\': 0.0, \'wind_speed_total\': 0.0, \'count\': 0 } aggregated_data[entry.location][\'temperature_total\'] += entry.temperature aggregated_data[entry.location][\'humidity_total\'] += entry.humidity aggregated_data[entry.location][\'wind_speed_total\'] += entry.wind_speed aggregated_data[entry.location][\'count\'] += 1 for location in aggregated_data: count = aggregated_data[location][\'count\'] aggregated_data[location] = { \'average_temperature\': aggregated_data[location][\'temperature_total\'] / count, \'average_humidity\': aggregated_data[location][\'humidity_total\'] / count, \'average_wind_speed\': aggregated_data[location][\'wind_speed_total\'] / count } return aggregated_data"},{"question":"# Longest Consecutive Sequence in an Array Context Finding the longest consecutive elements sequence in an array is a frequent task in data structure and algorithm challenges. This problem helps in understanding how to effectively use hash sets in Python to solve array-related problems. Task Given an unsorted array of integers, implement a function to find the length of the longest consecutive elements sequence. This is critical in scenarios where ranges or streaks need to be identified. Function Signature ```python def longest_consecutive_sequence(nums: list[int]) -> int: Given an unsorted array of integers, finds the length of the longest consecutive elements sequence. :param nums: List of integers representing the array. :return: Integer representing the length of the longest consecutive elements sequence. Constraints: - The length of the `nums` list will be at most 10^5. - All integers in the list will be distinct and in the range of [-10^9, 10^9]. ``` Explanation **Input:** 1. A list of integers representing the array. **Output:** - Return the length of the longest consecutive elements sequence in the array. **Example:** ```python assert longest_consecutive_sequence([100, 4, 200, 1, 3, 2]) == 4 # The sequence is [1, 2, 3, 4] assert longest_consecutive_sequence([0,3,7,2,5,8,4,6,0,1]) == 9 # The sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8] assert longest_consecutive_sequence([]) == 0 # No elements in the array ``` Constraints - The array will have at most 10^5 elements. - Elements in the array are distinct and fall within the range of [-10^9, 10^9]. Hints - Consider using a set to check if an element is the start of a sequence. - A nested loop can help find the length of a sequence starting from any element.","solution":"def longest_consecutive_sequence(nums): Given an unsorted array of integers, finds the length of the longest consecutive elements sequence. :param nums: List of integers representing the array. :return: Integer representing the length of the longest consecutive elements sequence. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # Check if \'num\' is the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"# Problem Statement As a software engineer working on resource allocation in cloud computing, you are required to track the utilization of CPU resources. The server logs the CPU utilization every second for a given time duration. However, the log can sometimes contain missing data (represented as -1) due to network issues, and these gaps need to be interpolated using a linear interpolation method. Implement a function that fills in the missing data in the CPU utilization log using linear interpolation. If there are consecutive missing data points, the missing values should be interpolated based on the closest non-missing values on either side. If missing data is at the start or end of the log, keep them as -1. # Function Signature ```python def interpolate_cpu_log(cpu_log): Interpolates the missing values in the CPU utilization log using linear interpolation. Arguments: cpu_log -- list of integers representing the CPU utilization log, with missing values represented as -1. Returns: A list of integers where the missing values have been interpolated. pass ``` # Input * `cpu_log` (list of integers): A list representing the CPU utilization log for each second, where missing values are represented as -1. # Output * List of integers representing the CPU utilization log with interpolated values. # Constraints * The length of `cpu_log` is between 2 and 10,000. * CPU utilization values (except for missing data) are integers between 0 and 100. * At least two non-missing values will be present in the log. # Example ```python # Define the CPU log cpu_log = [95, -1, -1, 80, 60, -1, 70, -1, 90] # Call the function interpolated_log = interpolate_cpu_log(cpu_log) # Example output # [95, 90, 85, 80, 60, 65, 70, 80, 90] ``` # Explanation The function fills in the missing values of the log using linear interpolation: - The values between the first missing value (-1) after 95 and before 80 are interpolated as 90 and 85, respectively. - The single missing value (-1) between 60 and 70 is interpolated as 65. - The value after 70 and before 90 is interpolated as 80. If the log starts or ends with missing values, they remain as -1 as no meaningful interpolation can be performed with missing boundaries.","solution":"def interpolate_cpu_log(cpu_log): Interpolates the missing values in the CPU utilization log using linear interpolation. Arguments: cpu_log -- list of integers representing the CPU utilization log, with missing values represented as -1. Returns: A list of integers where the missing values have been interpolated. n = len(cpu_log) result = cpu_log[:] i = 0 while i < n: if result[i] == -1: # find the start and end indices of the missing segment start = i - 1 while i < n and result[i] == -1: i += 1 end = i # linear interpolation between result[start] and result[end] if start >= 0 and end < n: increment = (result[end] - result[start]) / (end - start) for j in range(start + 1, end): result[j] = result[start] + increment * (j - start) # skip over this segment else: i += 1 return result"},{"question":"# Binary Tree Maximum Depth Calculation You are required to calculate the maximum depth of a binary tree. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Function Signature: ```python def max_depth(root: TreeNode) -> int: ``` Input: - **root**: The root node of a binary tree. Each node contains an integer value and pointers to the left and right children. Output: - An integer representing the maximum depth of the tree. Constraints: - The number of nodes in the tree is in the range [0, 1000]. - The value of each node is in the range [-1000, 1000]. Examples: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right # Example 1 root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) assert max_depth(root) == 3 # Example 2 root = TreeNode(1) root.left = TreeNode(2) assert max_depth(root) == 2 ``` Scenario: Imagine you are designing a video game where you need to generate hierarchical levels of challenges for the player. Each level is dependent on completing previous levels. The levels form a binary tree structure. The maximum depth of this tree represents the total number of stages from the start to the final challenge. Your goal is to calculate the maximum depth of this binary tree to understand the game’s complexity and depth.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root: TreeNode) -> int: if not root: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"# Problem Statement: You are working on a file system utility for managing and organizing files in a directory. One of the core features is to generate a simplified, but accurate list of file paths within a given directory that can also indicate the depth of each file in the directory hierarchy. To accomplish this, you need to write a function `list_directory_paths` that takes a directory structure represented as a nested dictionary and returns a list of all file paths with their corresponding depths. # Function Signature: ```python def list_directory_paths(directory: dict, current_path: str = \\"\\", current_depth: int = 0) -> list[tuple[str, int]]: ``` # Input Format: * `directory`: A dictionary where keys are folder names, and values are either lists of files in that folder or another dictionary representing a subdirectory. * `current_path`: A string representing the current path being traversed. Default is an empty string. * `current_depth`: An integer representing the depth in the directory hierarchy. Default is `0`. # Output Format: * Return a list of tuples where each tuple contains a file path (str) and its corresponding depth (int). # Constraints: * The directory structure can have an arbitrary depth but will contain no more than 10^3 files. * Folder names and file names consist of alphanumeric characters and periods, with no special or whitespace characters. # Example: ```python >>> directory = { ... \\"folderA\\": [\\"file1.txt\\", \\"file2.txt\\"], ... \\"folderB\\": { ... \\"subfolderB1\\": [\\"file3.txt\\"], ... \\"subfolderB2\\": [\\"file4.txt\\", \\"file5.txt\\"] ... }, ... \\"folderC\\": [] ... } >>> list_directory_paths(directory) [(\'folderA/file1.txt\', 1), (\'folderA/file2.txt\', 1), (\'folderB/subfolderB1/file3.txt\', 2), (\'folderB/subfolderB2/file4.txt\', 2), (\'folderB/subfolderB2/file5.txt\', 2)] ``` # Explanation: In this example, the function traverses the directory structure and collects all file paths with their respective depths. For example, `folderA/file1.txt` is at depth 1, and `folderB/subfolderB1/file3.txt` is at depth 2. The resulting list accurately represents the structure and depths of the files within the input directory.","solution":"def list_directory_paths(directory, current_path=\\"\\", current_depth=0): Generates a list of file paths with their corresponding depths in a directory structure. Args: - directory (dict): The directory structure represented as a nested dictionary. - current_path (str): The current path being traversed. Default is an empty string. - current_depth (int): The depth in the directory hierarchy. Default is 0. Returns: - list of tuples: Each tuple contains a file path (str) and its corresponding depth (int). paths = [] for key, value in directory.items(): if isinstance(value, list): for file in value: paths.append((f\\"{current_path}/{key}/{file}\\".strip(\'/\'), current_depth + 1)) elif isinstance(value, dict): paths.extend(list_directory_paths(value, f\\"{current_path}/{key}\\".strip(\'/\'), current_depth + 1)) return paths"},{"question":"# Problem Description: A balanced number is a number where the sum of the digits to the left of the middle digit(s) is equal to the sum of the digits to the right of the middle digit(s). For even-length numbers, it means the sum of the first half equals the sum of the second half. For odd-length numbers, excluding the middle digit, the sum of the digits before and after the middle digit must match. Your task is to write a function to check whether a given number is balanced or not. # Requirements: 1. Write a function `is_balanced_number(number: int) -> bool` that returns `True` if the number is balanced, otherwise `False`. 2. The function should handle numbers of varying lengths efficiently. # Input: - A single integer `number` (1 ≤ |number| < 10^100) # Output: - Returns a boolean value indicating whether the given number is balanced. Constraints: - The input will always be a non-negative integer with at least one digit. - The number will be provided without leading zeros. # Example: ```python def is_balanced_number(number: int) -> bool: # Implementation here # Example print(is_balanced_number(12321)) # Output: True print(is_balanced_number(1233)) # Output: False ``` In this example, `is_balanced_number(12321)` should return `True` because the sum of the digits before the middle digit (1 + 2) equals the sum of the digits after the middle digit (2 + 1). Similarly, `is_balanced_number(1233)` should return `False` because the sum of the digits before the midpoint (1 + 2) does not equal the sum of the digits after the midpoint (3 + 3). # Scoring: - Correctness (50%): The function accurately determines whether the number is balanced. - Efficiency (30%): The implementation efficiently handles large numbers. - Edge Handling (20%): Properly handles edge cases, including very large numbers and edge lengths.","solution":"def is_balanced_number(number: int) -> bool: str_num = str(number) length = len(str_num) # Even length number if length % 2 == 0: mid = length // 2 left_sum = sum(int(digit) for digit in str_num[:mid]) right_sum = sum(int(digit) for digit in str_num[mid:]) # Odd length number else: mid = length // 2 left_sum = sum(int(digit) for digit in str_num[:mid]) right_sum = sum(int(digit) for digit in str_num[mid+1:]) return left_sum == right_sum"},{"question":"# Question Design a function to simulate a simple banking transaction system. Your task is to create and manipulate user accounts, perform transactions among them, and ensure the integrity of the data through concurrent operations. # Function Specification You need to implement the following functions: 1. `create_account` 2. `deposit` 3. `withdraw` 4. `transfer` **Functions to Implement**: ```python def create_account(account_id: int, initial_balance: float) -> None: pass def deposit(account_id: int, amount: float) -> None: pass def withdraw(account_id: int, amount: float) -> bool: pass def transfer(from_account_id: int, to_account_id: int, amount: float) -> bool: pass ``` **Parameters**: * `create_account`: * `account_id` (int): A unique identifier for the account. * `initial_balance` (float): The starting balance for the account. * `deposit`: * `account_id` (int): The identifier of the account to receive the deposit. * `amount` (float): The amount to be deposited into the account. * `withdraw`: * `account_id` (int): The identifier of the account from which to withdraw money. * `amount` (float): The amount to be withdrawn from the account. * `transfer`: * `from_account_id` (int): The identifier of the account from which to transfer money. * `to_account_id` (int): The identifier of the account to receive the money. * `amount` (float): The amount to be transferred. **Returns**: * `withdraw` and `transfer` return `True` if the operation was successful, and `False` otherwise. * All other functions return `None`. # Constraints: * Users should not be able to deposit or withdraw negative amounts. * Users should not be able to withdraw more money than available in their account. * The system should handle concurrent operations reliably (consider using threading locks). * Each account\'s balance should be able to handle at least 2 decimal points. # Implementation Notes: * Use a dictionary to store account information with account_id as the key and balance as the value. * Ensure thread safety when modifying balances to handle concurrent deposits and withdrawals. # Examples: ```python # Create accounts create_account(101, 1000.0) create_account(102, 500.0) # Perform transactions deposit(101, 250.0) # Account 101 balance: 1250.0 withdraw(102, 100.0) # Account 102 balance: 400.0 (returns True) transfer(101, 102, 250.0) # Account 101 balance: 1000.0, Account 102 balance: 650.0 (returns True) # Invalid transactions withdraw(102, 700.0) # Insufficient funds (returns False) transfer(101, 103, 50.0) # Invalid account (returns False) ```","solution":"import threading # Dictionary to store account balances accounts = {} # A lock to ensure thread safety lock = threading.Lock() def create_account(account_id: int, initial_balance: float) -> None: with lock: accounts[account_id] = initial_balance def deposit(account_id: int, amount: float) -> None: if amount < 0: return with lock: if account_id in accounts: accounts[account_id] += amount def withdraw(account_id: int, amount: float) -> bool: if amount < 0: return False with lock: if account_id in accounts and accounts[account_id] >= amount: accounts[account_id] -= amount return True else: return False def transfer(from_account_id: int, to_account_id: int, amount: float) -> bool: if amount < 0: return False with lock: if from_account_id in accounts and to_account_id in accounts and accounts[from_account_id] >= amount: accounts[from_account_id] -= amount accounts[to_account_id] += amount return True else: return False"},{"question":"# Introduction You will implement a simple Graph data structure using an Adjacency List representation. # Objective Write a class `SimpleGraph` that implements: 1. The method `add_vertex` to add a vertex to the graph. 2. The method `add_edge` to add an edge between two vertices. 3. The method `remove_vertex` to remove a vertex from the graph. 4. The method `remove_edge` to remove an edge between two vertices. 5. The method `bfs` to perform a Breadth-First Search (BFS) traversal starting from a given vertex. # Specifications Add Vertex ```python def add_vertex(self, vertex: int) -> None: Adds a vertex to the graph. :param vertex: The vertex to be added. ``` Add Edge ```python def add_edge(self, src: int, dest: int) -> None: Adds an edge between two vertices in the graph. :param src: The source vertex. :param dest: The destination vertex. ``` Remove Vertex ```python def remove_vertex(self, vertex: int) -> None: Removes a vertex from the graph. :param vertex: The vertex to be removed. ``` Remove Edge ```python def remove_edge(self, src: int, dest: int) -> None: Removes an edge between two vertices in the graph. :param src: The source vertex. :param dest: The destination vertex. ``` Breadth-First Search (BFS) ```python def bfs(self, start_vertex: int) -> List[int]: Performs a Breadth-First Search traversal starting from the given vertex. :param start_vertex: The vertex to start the BFS traversal from. :return: A list of vertices in the order they were visited. ``` # Constraints * The graph will have at most 100 vertices. * Vertices will be non-negative integers. * The graph can be either directed or undirected. * Ensure that adding an edge between two non-existing vertices or any invalid operation is handled gracefully. * BFS traversal should visit each vertex only once and order should be preserved starting from the given start vertex. * If BFS is started from a non-existent vertex, return an empty list. # Example ```python graph = SimpleGraph() graph.add_vertex(0) graph.add_vertex(1) graph.add_vertex(2) graph.add_edge(0, 1) graph.add_edge(1, 2) print(graph.bfs(0)) # [0, 1, 2] graph.remove_edge(1, 2) print(graph.bfs(1)) # [1] graph.remove_vertex(1) print(graph.bfs(1)) # [] ``` # Note Carefully design your methods to ensure that all operations (adding/removing vertices or edges, and BFS traversal) are performed correctly, and edge cases such as non-existing vertices or duplicate edges are handled appropriately.","solution":"from collections import deque from typing import List, Dict, Set class SimpleGraph: def __init__(self): self.adj_list: Dict[int, Set[int]] = {} def add_vertex(self, vertex: int) -> None: if vertex not in self.adj_list: self.adj_list[vertex] = set() def add_edge(self, src: int, dest: int) -> None: if src in self.adj_list and dest in self.adj_list: self.adj_list[src].add(dest) self.adj_list[dest].add(src) # Considering undirected graph def remove_vertex(self, vertex: int) -> None: if vertex in self.adj_list: for neighbor in list(self.adj_list[vertex]): self.adj_list[neighbor].remove(vertex) del self.adj_list[vertex] def remove_edge(self, src: int, dest: int) -> None: if src in self.adj_list and dest in self.adj_list: if dest in self.adj_list[src]: self.adj_list[src].remove(dest) if src in self.adj_list[dest]: self.adj_list[dest].remove(src) def bfs(self, start_vertex: int) -> List[int]: if start_vertex not in self.adj_list: return [] visited = set() queue = deque([start_vertex]) result = [] while queue: vertex = queue.popleft() if vertex not in visited: visited.add(vertex) result.append(vertex) for neighbor in self.adj_list[vertex]: if neighbor not in visited: queue.append(neighbor) return result"},{"question":"# Graph Path Finder with Constraints You are required to implement a path-finding algorithm in an undirected weighted graph. Given a start node, an end node, and a set of constraints, the algorithm should find a valid path from the start node to the end node that satisfies the constraints. # Problem 1. **Graph Construction**: - Define a class `Graph` that represents an undirected weighted graph. - Implement a method `add_edge(node1, node2, weight)` to add an edge between `node1` and `node2` with the given `weight`. 2. **Path Finder with Constraints**: - Write a function `find_path(graph, start, end, constraints)` to find a valid path from `start` to `end`, adhering to the given constraints. - `constraints` is a function that takes a list of nodes representing the current path and returns `True` if the path is valid under the given constraints, and `False` otherwise. # Function Signatures ```python class Graph: def __init__(self): self.adj_list = {} def add_edge(self, node1: Any, node2: Any, weight: float): # Implement this function def find_path(graph: Graph, start: Any, end: Any, constraints: Callable[[List[Any]], bool]) -> Optional[List[Any]]: # Implement this function ``` # Requirements 1. **Input**: - `Graph.add_edge(node1, node2, weight)`: takes two nodes `node1`, `node2`, and a floating point `weight` representing the edge weight. - `find_path(graph, start, end, constraints)`: - `graph`: an instance of the `Graph` class. - `start`: the starting node. - `end`: the ending node. - `constraints`: a callable that accepts the current path and returns a boolean indicating if the path meets the constraints. 2. **Output**: - `Graph.add_edge(node1, node2, weight)`: adds an edge to the graph with the specified weight. - `find_path(graph, start, end, constraints)`: returns a list of nodes representing a valid path from `start` to `end` that satisfies the constraints, or `None` if no such path exists. 3. **Constraints**: - A path must satisfy the constraints function at every addition of a new node. - The graph may have cycles and multiple valid paths. - Optimize for finding a valid constrained path in reasonable time. # Example Constructing a graph and finding a constrained path: ```python def path_length_constraint(path): Constraint function: Path length must not exceed 4 nodes. return len(path) <= 4 graph = Graph() graph.add_edge(\'A\', \'B\', 1.0) graph.add_edge(\'B\', \'C\', 2.0) graph.add_edge(\'A\', \'C\', 3.0) graph.add_edge(\'C\', \'D\', 4.0) graph.add_edge(\'B\', \'D\', 2.0) path = find_path(graph, \'A\', \'D\', path_length_constraint) print(path) # Output: [\'A\', \'B\', \'D\'] or any other valid path within constraints ``` # Additional Notes - Ensure your graph handles edge cases like disconnected nodes or no possible path under the given constraints. - The `constraints` function could enforce various kinds of restrictions, such as maximum path length, specific nodes avoidance, or custom conditions. - Optimize for both space and time complexity.","solution":"from collections import defaultdict, deque from typing import Any, Callable, List, Optional, Tuple class Graph: def __init__(self): self.adj_list = defaultdict(list) def add_edge(self, node1: Any, node2: Any, weight: float): self.adj_list[node1].append((node2, weight)) self.adj_list[node2].append((node1, weight)) def find_path(graph: Graph, start: Any, end: Any, constraints: Callable[[List[Any]], bool]) -> Optional[List[Any]]: def bfs_path(): queue = deque([(start, [start])]) while queue: current_node, path = queue.popleft() if current_node == end and constraints(path): return path for neighbor, weight in graph.adj_list[current_node]: if neighbor not in path: # Avoid visiting the same node to prevent cycles new_path = path + [neighbor] if constraints(new_path): queue.append((neighbor, new_path)) return None return bfs_path()"},{"question":"# Problem Statement You are given a binary search tree (BST) and a target value. Your task is to implement the `find_closest_value_bst` function that finds and returns the value in the BST that is closest to the target value. Function Signature ```python def find_closest_value_bst(tree: \'TreeNode\', target: float) -> int: pass ``` Input * `tree` (TreeNode): The root node of the binary search tree (BST). * `target` (float): The target value to which you need to find the closest value in the BST. Output * `int`: The value in the BST that is closest to the target value. Constraints * The BST will contain at least one node. * The values of the BST nodes are unique and can range from -10^9 to 10^9. * The `TreeNode` class will have the following attributes: ```python class TreeNode: def __init__(self, value: int): self.value = value self.left = None self.right = None ``` Performance Requirements * The solution should run in O(log n) time complexity on average, where `n` is the number of nodes in the tree, given that the BST is balanced. * Space complexity should be O(1), ignoring the recursion stack. Scenario Consider a scenario where you have a list of house prices organized in a BST. Given a target price, you need to find the closest house price to your target. Example ```python # Example 1 # Constructing the BST # 10 # / # 5 15 # / # 2 5 22 # # target is 12 root = TreeNode(10) root.left = TreeNode(5) root.right = TreeNode(15) root.left.left = TreeNode(2) root.left.right = TreeNode(5) root.right.right = TreeNode(22) target = 12 # Explanation: The closest value to 12 in the BST is 10. assert find_closest_value_bst(root, target) == 10 # Example 2 # Same tree as above, target is 13 target = 13 # Explanation: The closest value to 13 in the BST is 15. assert find_closest_value_bst(root, target) == 15 ``` Notes * You should traverse the BST and keep track of the closest value encountered so far. * Utilize the properties of the BST to minimize the number of nodes you need to visit.","solution":"class TreeNode: def __init__(self, value: int): self.value = value self.left = None self.right = None def find_closest_value_bst(tree: TreeNode, target: float) -> int: Finds the value in the BST that is closest to the target value. closest = tree.value current_node = tree while current_node is not None: if abs(target - closest) > abs(target - current_node.value): closest = current_node.value if target < current_node.value: current_node = current_node.left elif target > current_node.value: current_node = current_node.right else: break # target is exactly equal to current_node.value return closest"},{"question":"# Fibonacci Search Algorithm Assessment Question Context The Fibonacci search algorithm is a search algorithm that applies to sorted arrays. It uses Fibonacci numbers to divide the array into segments for the search process. This algorithm is particularly useful for search operations in environments where access to the index is relatively expensive, and it has a similar performance to binary search but with fewer comparisons. Task You are required to implement the Fibonacci search algorithm to find the position of a given target number in a sorted array of integers. Function Signature ```python def fibonacci_search(arr: list[int], target: int) -> int: pass ``` # Input 1. **arr**: A list of integers where each integer represents an element in a sorted array. - (0 leq text{len(arr)} leq 1000) - All integers in arr are distinct. 2. **target**: An integer representing the number to be searched in the array. - (-10^6 leq text{target} leq 10^6) # Output An integer representing the index of the target in the sorted array. Return -1 if the target is not found. # Constraints - Ensure the algorithm handles edge cases such as an empty array. - The function should not use any built-in search libraries. Example ```python # Example 1 arr = [1, 3, 5, 8, 10, 15, 20, 25, 30] target = 10 print(fibonacci_search(arr, target)) # Expected Output: 4 # Example 2 arr = [6, 7, 9, 10, 12, 15, 18] target = 9 print(fibonacci_search(arr, target)) # Expected Output: 2 # Example 3 arr = [2, 4, 6, 8, 10, 12] target = 5 print(fibonacci_search(arr, target)) # Expected Output: -1 ``` Notes - Assume all inputs (the array and the target) are valid and within the given constraints. - Ensure your implementation is optimized for performance and efficiently utilizes the Fibonacci series. - You can use helper functions to structure your code logically.","solution":"def fibonacci_search(arr: list[int], target: int) -> int: Perform Fibonacci search on a sorted array to find the position of the target. :param arr: List of sorted integers. :param target: Integer to search for. :return: Index of target if found, else -1. n = len(arr) # Initialize Fibonacci numbers fib_mm2 = 0 # (m - 2)\'th Fibonacci number fib_mm1 = 1 # (m - 1)\'th Fibonacci number fib_m = fib_mm1 + fib_mm2 # m\'th Fibonacci number while (fib_m < n): fib_mm2 = fib_mm1 fib_mm1 = fib_m fib_m = fib_mm1 + fib_mm2 offset = -1 while (fib_m > 1): i = min(offset + fib_mm2, n - 1) if (arr[i] < target): fib_m = fib_mm1 fib_mm1 = fib_mm2 fib_mm2 = fib_m - fib_mm1 offset = i elif (arr[i] > target): fib_m = fib_mm2 fib_mm1 = fib_mm1 - fib_mm2 fib_mm2 = fib_m - fib_mm1 else: return i if(fib_mm1 and offset + 1 < n and arr[offset + 1] == target): return offset + 1 return -1"},{"question":"# Question: Morse Code Translator **Scenario**: You are creating a program that translates English text into Morse code and vice versa. Morse code is a method of encoding text characters as sequences of dots (.) and dashes (-). For example, the letter \\"A\\" is encoded as \\".-\\" and the letter \\"B\\" as \\"-...\\". Your task is to create a function that performs this translation. Problem Statement Write a function `morse_code_translator` that can translate a given string into Morse code and also translate a given Morse code string back into English text. Function Signature ```python def morse_code_translator(text: str, to_morse: bool = True) -> str: pass ``` Input - `text`: A string containing either English text or Morse code. - If the input is English text, it will only include the letters A-Z, numbers 0-9, and spaces. - If the input is Morse code, it will consist of dots, dashes, and spaces. - `to_morse`: A boolean flag indicating the direction of the translation. - If `True`, the function should translate English text to Morse code. - If `False`, the function should translate Morse code to English text. Output - Returns a string containing the translated text. - For English-to-Morse translation, separate Morse code characters with spaces and words with \\" / \\". - For Morse-to-English translation, assumes Morse code characters are separated by spaces and words by \\" / \\". Constraints - The `text` input will not exceed 500 characters. - Ensure proper handling of invalid characters or Morse code sequences by raising a `ValueError`. Example ```python english_text = \\"HELLO WORLD\\" morse_code = \\".... . .-.. .-.. --- / .-- --- .-. .-.. -..\\" # Translate English to Morse code assert morse_code_translator(english_text, to_morse=True) == \\".... . .-.. .-.. --- / .-- --- .-. .-.. -..\\" # Translate Morse code to English assert morse_code_translator(morse_code, to_morse=False) == \\"HELLO WORLD\\" ``` Requirements - Define a dictionary for translating between English characters and their Morse code equivalents. - Implement error handling to raise `ValueError` for invalid characters or Morse sequences. - Ensure that the function handles both translation directions correctly and efficiently.","solution":"def morse_code_translator(text: str, to_morse: bool = True) -> str: morse_dict = {} inversed_morse_dict = {v: k for k, v in morse_dict.items()} if to_morse: translated = [] for char in text.upper(): if char == \' \': translated.append(\'/\') elif char in morse_dict: translated.append(morse_dict[char]) else: raise ValueError(f\\"Invalid character for Morse code translation: {char}\\") return \' \'.join(translated) else: translated = [] words = text.split(\\" / \\") for word in words: chars = word.split() for char in chars: if char in inversed_morse_dict: translated.append(inversed_morse_dict[char]) else: raise ValueError(f\\"Invalid Morse code sequence for translation: {char}\\") translated.append(\' \') return \'\'.join(translated).strip()"},{"question":"Finding Top K Frequent Elements Given a non-empty list of integers `nums`, return the `k` most frequent elements in the list. You must output the elements in descending order of their frequency. If two elements have the same frequency, they should be output in ascending order of their numerical value. # Requirements: 1. Implement the function `top_k_frequent(nums: List[int], k: int) -> List[int]` that returns a list containing the `k` most frequent elements. 2. If there are fewer than `k` unique elements, the function should raise a `ValueError`. 3. You cannot use any standard library functions to sort or heapify; you must implement the necessary steps yourself. # Constraints: - `1 <= len(nums) <= 10^5` - `k` is an integer such that `1 <= k <= len(nums)` - The elements in the list and the required `k` will always be valid integers. # Example: ```python # Example 1 nums = [1, 1, 1, 2, 2, 3] k = 2 top_k_frequent(nums, k) => [1, 2] # Example 2 nums = [1] k = 1 top_k_frequent(nums, k) => [1] # Example 3 nums = [4, 4, 1, 1, 2, 2, 3] k = 3 top_k_frequent(nums, k) => [1, 2, 4] ``` # Edge Cases: 1. `nums` contains exactly `k` unique elements should return all elements sorted by frequency. 2. Minimum input list size should be handled correctly. 3. All elements in the list are the same (with `k` equal to `1`). # Performance Consideration: - Your solution should efficiently handle the counting and sorting steps to ensure it works within reasonable time limits for large inputs. Aim for O(n log n) complexity due to sorting steps if applicable. # Function Signature: ```python def top_k_frequent(nums: List[int], k: int) -> List[int]: pass ``` # Implementation Note: - You must validate input to ensure `nums` contains non-empty list and `k` is appropriate. Raise a `ValueError` otherwise. - Ensure your function efficiently computes frequency counts and determines the top `k` elements without relying on built-in sorting or heapify methods.","solution":"from typing import List def top_k_frequent(nums: List[int], k: int) -> List[int]: if not nums: raise ValueError(\\"The input list cannot be empty.\\") if len(set(nums)) < k: raise ValueError(\\"There are fewer than k unique elements in nums.\\") # Step 1: Count the frequencies of each element frequency_map = {} for num in nums: if num in frequency_map: frequency_map[num] += 1 else: frequency_map[num] = 1 # Step 2: Create a list of (number, frequency) pairs frequency_list = [(num, freq) for num, freq in frequency_map.items()] # Step 3: Sort the frequency list based on frequency (desc) and then number (asc) # We implement a simple sorting algorithm to avoid using built-in sorting def sort_key(item): num, freq = item return (-freq, num) frequency_list.sort(key=sort_key) # Step 4: Extract the top k elements top_k_elements = [num for num, freq in frequency_list[:k]] return top_k_elements"},{"question":"# Transforming Nested Dictionaries into Flat Dictionaries with Concatenated Keys Background: You are provided with a nested dictionary which may contain dictionaries within dictionaries to an arbitrary depth. Your task is to transform this nested dictionary into a flat dictionary where the keys are the concatenation of the nested keys, separated by periods (`.`), representing the hierarchy of the original keys. Task: Write a function to flatten the nested dictionary by concatenating the keys with periods. The function should handle dictionaries nested to any depth. Requirements: 1. **Key Concatenation**: - If a key in the nested dictionary points to another dictionary, concatenate this key with the key from the inner dictionary, separated by a period (`.`). 2. **Maintain Values**: - The values in the final flattened dictionary should be the same as the original values in the nested dictionary. Function Implementation: Implement the following function: ```python def flatten_dict(d: Dict[str, Any], parent_key: str = \'\', sep: str = \'.\') -> Dict[str, Any]: Flattens a nested dictionary by concatenating nested keys. Parameters: d (Dict[str, Any]): The nested dictionary to flatten. parent_key (str): The base key to concatenate with nested keys (used internally). sep (str): Separator used during key concatenation (default is \'.\'). Returns: Dict[str, Any]: The flattened dictionary with concatenated keys. result = {} for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): result.update(flatten_dict(v, new_key, sep)) else: result[new_key] = v return result ``` Input and Output **Example**: ```python nested_dict = { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3 } }, \\"f\\": { \\"g\\": 4 } } flattened_dict = flatten_dict(nested_dict) print(flattened_dict) # Expected Output: # { # \\"a\\": 1, # \\"b.c\\": 2, # \\"b.d.e\\": 3, # \\"f.g\\": 4 # } ``` **Constraints**: - Keys in the dictionary are strings containing alphanumeric characters. - Values in the dictionary can be integers, floats, strings, or other dictionaries. - The depth of nesting will be at most 10 levels. **Performance Requirements**: - The function should maintain O(n) time complexity where n is the total number of nodes in the nested dictionary, as it needs to look at each node once. This question continues the theme of handling nested structures and data transformations, similar to the processing of hash maps and addressing different types and scenarios.","solution":"from typing import Any, Dict def flatten_dict(d: Dict[str, Any], parent_key: str = \'\', sep: str = \'.\') -> Dict[str, Any]: Flattens a nested dictionary by concatenating nested keys. Parameters: d (Dict[str, Any]): The nested dictionary to flatten. parent_key (str): The base key to concatenate with nested keys (used internally). sep (str): Separator used during key concatenation (default is \'.\'). Returns: Dict[str, Any]: The flattened dictionary with concatenated keys. result = {} for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): result.update(flatten_dict(v, new_key, sep)) else: result[new_key] = v return result"},{"question":"# **Matrix Spiral Order Traversal** You are required to implement a function that takes a 2D matrix and returns a list of its elements in spiral order. This will test your ability to navigate and process 2D structures efficiently. Function Specifications: - **Function Name**: `spiral_order` - **Input**: A list of lists representing a 2D matrix of integers. - **Output**: A list of integers in the matrix\'s spiral order. Constraints: * The matrix can have up to (10^3) rows and (10^3) columns. * The elements in the matrix are integers and can be both positive and negative. * The matrix may not be square, but each row will have the same number of columns. Performance Requirements: * The function should run with a time complexity of O(m*n), where m is the number of rows and n is the number of columns in the matrix. * Use only O(1) additional space apart from the space required to store the output list. Example: ```python assert spiral_order([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 6, 9, 8, 7, 4, 5] assert spiral_order([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7] assert spiral_order([[1]]) == [1] assert spiral_order([[2, 5, 8], [4, 0, -1]]) == [2, 5, 8, -1, 0, 4] assert spiral_order([]) == [] ``` # Additional Challenge: Ensure the function can handle edge cases such as: 1. An empty matrix (`[]`). 2. A matrix with one element (e.g., `[[1]]`). 3. A long single row matrix (e.g., `[[1, 2, 3, 4, 5]]`). 4. A long single column matrix (e.g., `[[1], [2], [3], [4], [5]]`). # Hint: Consider how you can use directions (right, down, left, up) to control the traversal of the matrix, updating the bounds as you process each layer.","solution":"def spiral_order(matrix): if not matrix or not matrix[0]: return [] result = [] top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right along the top row for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse from top to bottom along the right column for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left along the bottom row for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top along the left column for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"Problem: Maximum Consecutive Increasing Subsequence Length Given a list of integers, find the length of the longest consecutive increasing subsequence in the list. A consecutive increasing subsequence is a sequence where each subsequent element is exactly one more than the previous element. # Input: - A list of integers ( nums ) where ( 1 leq text{len}(nums) leq 10^5 ) and each integer ( -10^6 leq nums[i] leq 10^6 ). # Output: - An integer representing the length of the longest consecutive increasing subsequence in the list. # Function Signature: ```python def max_consecutive_increasing_length(nums: List[int]) -> int: ``` # Constraints: - Focus on efficient time complexity given the large size of possible input. # Example: ```python >>> max_consecutive_increasing_length([1, 2, 4, 7, 8, 9]) 3 >>> >>> max_consecutive_increasing_length([3, 10, 2, 1, 9, 8]) 1 ``` # Explanation: - For the first example, the longest consecutive increasing subsequence is [7, 8, 9], of length 3. - For the second example, there are no consecutive increasing subsequences longer than 1, hence the result is 1. # Notes: - Ensure to handle edge cases such as empty lists, lists with all identical elements, etc. - Consider edge cases where the longest subsequence might occur at the beginning or end of the list.","solution":"def max_consecutive_increasing_length(nums): Returns the length of the longest consecutive increasing subsequence. if not nums: return 0 max_length = 1 current_length = 1 for i in range(1, len(nums)): if nums[i] == nums[i-1] + 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length)"},{"question":"# Configuration Challenge: Dynamic Resource Allocation in Cloud Systems Background You are working on a cloud platform that needs to dynamically allocate resources based on workload demands. The platform manages various services, each requiring different resources like CPU, memory, and disk I/O. Your task is to implement a strategy that optimizes resource allocation to balance workload while minimizing cost. Task Your goal is to design an efficient resource allocation algorithm using predictive analytics. Specifically, you need to implement the following: 1. Develop a workload predictor based on historical data using a machine learning model (e.g., linear regression, decision trees). 2. Implement a dynamic allocation strategy that provisions resources based on predicted workloads. Requirements 1. Use a machine learning model to predict workloads for each service based on the provided historical data. 2. Implement a resource allocation algorithm that dynamically adjusts resources according to the predicted workload to ensure optimal performance and cost efficiency. Inputs and Outputs - The input consists of a history of workloads for multiple services over time. - Output the recommended resource allocation for each service at each time step. Constraints - You may assume historical workload data is available in a list of dictionaries, where each dictionary contains timestamps and workload metrics for services. - Resource adjustment decisions should be taken every hour. - You can assume a maximum of 100 services and a resource scaling time step of one hour. Instructions 1. Develop a `WorkloadPredictor` class using an appropriate machine learning model to predict future resource requirements. 2. Create a `ResourceAllocator` class that dynamically scales resources based on predictions. 3. Ensure your implementation accounts for under-provisioning and over-provisioning, balancing performance with cost. Example ```python historical_data = [ {\\"timestamp\\": \\"2023-01-01 00:00\\", \\"service_1\\": 50, \\"service_2\\": 75, ...}, {\\"timestamp\\": \\"2023-01-01 01:00\\", \\"service_1\\": 55, \\"service_2\\": 80, ...}, ... ] predictor = WorkloadPredictor(historical_data) allocator = ResourceAllocator(predictor) for timestamp in future_timestamps: resource_allocation = allocator.allocate_resources(timestamp) print(f\\"Resource allocation at {timestamp}: {resource_allocation}\\") ``` Ensure your implementation cleanly integrates prediction and allocation components, with modular, well-documented code.","solution":"import pandas as pd from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split class WorkloadPredictor: def __init__(self, historical_data): self.historical_data = pd.DataFrame(historical_data) self.models = {} self._train_models() def _train_models(self): services = [col for col in self.historical_data.columns if col != \'timestamp\'] self.historical_data[\'timestamp\'] = pd.to_datetime(self.historical_data[\'timestamp\']) self.historical_data[\'hour\'] = self.historical_data[\'timestamp\'].dt.hour for service in services: X = self.historical_data[[\'hour\']] y = self.historical_data[service] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) model = LinearRegression() model.fit(X_train, y_train) self.models[service] = model def predict(self, timestamp): hour = pd.to_datetime(timestamp).hour predictions = {} for service, model in self.models.items(): predicted_workload = model.predict([[hour]])[0] predictions[service] = predicted_workload return predictions class ResourceAllocator: def __init__(self, predictor, scaling_factor=1.1): self.predictor = predictor self.scaling_factor = scaling_factor def allocate_resources(self, timestamp): predicted_workloads = self.predictor.predict(timestamp) resource_allocation = {service: int(workload * self.scaling_factor) for service, workload in predicted_workloads.items()} return resource_allocation"},{"question":"# Sorting a List of Dictionaries by Multiple Keys You are required to implement a function that sorts a list of dictionaries based on multiple keys. The sequence of keys will determine the primary, secondary, tertiary, and so on, sorting order. The function you write should follow the example provided. **Problem**: Given a list of dictionaries, sort the list based on specified keys in a given order. Each key in the order determines the priority for sorting - the first key being the highest, followed by the second, and so forth. **Function Signature**: ```python def sort_dict_list(dict_list: List[Dict[str, Any]], key_order: List[str]) -> List[Dict[str, Any]]: ``` **Input**: - `dict_list`: A list of dictionaries where each dictionary can contain multiple key-value pairs. (1 ≤ len(dict_list) ≤ 1000) - `key_order`: A list of strings representing the keys in priority order for sorting. (1 ≤ len(key_order) ≤ 10) **Output**: - A list of dictionaries sorted according to the specified order of keys. **Example**: ```python >>> data = [ ... {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"city\\": \\"New York\\"}, ... {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"city\\": \\"San Francisco\\"}, ... {\\"name\\": \\"Charlie\\", \\"age\\": 25, \\"city\\": \\"New York\\"}, ... {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"city\\": \\"Los Angeles\\"} ... ] >>> key_order = [\\"name\\", \\"age\\", \\"city\\"] >>> sort_dict_list(data, key_order) [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"city\\": \\"New York\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"city\\": \\"Los Angeles\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"city\\": \\"San Francisco\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 25, \\"city\\": \\"New York\\"} ] >>> key_order = [\\"age\\", \\"city\\"] >>> sort_dict_list(data, key_order) [ {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"city\\": \\"Los Angeles\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 25, \\"city\\": \\"New York\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"city\\": \\"San Francisco\\"}, {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"city\\": \\"New York\\"} ] >>> key_order = [\\"city\\", \\"age\\"] >>> sort_dict_list(data, key_order) [ {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"city\\": \\"Los Angeles\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 25, \\"city\\": \\"New York\\"}, {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"city\\": \\"New York\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"city\\": \\"San Francisco\\"} ] ``` **Constraints**: - Keys used for sorting will exist in all dictionaries. - Dictionaries may have additional keys not used in sorting. - Keys and their values will be primitive data types like integers and strings. Implement the function, ensure it handles the sorting correctly based on the multiple keys provided, and address various edge cases.","solution":"from typing import List, Dict, Any def sort_dict_list(dict_list: List[Dict[str, Any]], key_order: List[str]) -> List[Dict[str, Any]]: Sorts a list of dictionaries based on the specified keys in order of priority. Parameters: dict_list (List[Dict[str, Any]]): List of dictionaries to sort. key_order (List[str]): List of keys in order of priority for sorting. Returns: List[Dict[str, Any]]: Sorted list of dictionaries. # Reverse the key_order to sort by the last key first for key in reversed(key_order): dict_list.sort(key=lambda x: x[key]) return dict_list"},{"question":"# Problem Statement A company is implementing a new customer relationship management (CRM) system, and they need to keep track of all customer interactions efficiently. You are tasked with constructing a program to help identify and count the occurrences of specific keywords within the interaction logs. # Problem Description Given a list of strings representing customer interactions (each interaction is a separate string), you need to count the occurrences of each keyword from a list of keywords within these interactions. # Requirements * Implement the function `count_keywords_in_interactions(interactions: List[str], keywords: List[str]) -> Dict[str, int]`. * Combine all interactions to form a single string. Ensure each interaction is separated by a space. * For each keyword in the `keywords` list, count its total occurrences in the combined string. * Return a dictionary where each key is a keyword, and the corresponding value is the count of its occurrences. # Input * `interactions` - A list of strings, representing customer interaction logs. ```python interactions = [\\"Customer called to inquire about product availability.\\", \\"Product was shipped but arrived late.\\", \\"Customer is unhappy with the product quality and shipment delay.\\"] ``` * `keywords` - A list of strings, representing the keywords to search for in the combined interactions. ```python keywords = [\\"product\\", \\"Customer\\", \\"shipped\\", \\"availability\\", \\"delayed\\"] ``` # Output * Return a dictionary where the keys are the keywords, and the values are integers representing the count of occurrences of each keyword in the combined interactions. ```python { \\"product\\": 3, \\"Customer\\": 2, \\"shipped\\": 1, \\"availability\\": 1, \\"delayed\\": 0 } ``` # Constraints * The total length of the combined interactions should not exceed (10^5) characters. * Each keyword should not exceed 100 characters in length. * Keywords and interactions are case-sensitive. # Function Signature ```python from typing import List, Dict def count_keywords_in_interactions(interactions: List[str], keywords: List[str]) -> Dict[str, int]: pass ``` # Example Input ```python interactions = [\\"Apple\'s customer service is excellent.\\", \\"I had issues with Apple\'s product.\\", \\"The product needs improvement.\\", \\"Great Apple support!\\"] keywords = [\\"product\\", \\"Apple\\", \\"service\\", \\"issues\\", \\"support\\"] ``` Output ```python { \\"product\\": 2, \\"Apple\\": 3, \\"service\\": 1, \\"issues\\": 1, \\"support\\": 1 } ``` # Note - Ensure the function counts the occurrences accurately and adheres to the case sensitivity of both interactions and keywords. - Use efficient string searching algorithms to ensure the solution scales well with input size.","solution":"from typing import List, Dict def count_keywords_in_interactions(interactions: List[str], keywords: List[str]) -> Dict[str, int]: # Combine all interactions into a single string separated by space combined_interactions = \' \'.join(interactions) # Create a dictionary to store the count for each keyword keyword_counts = {keyword: 0 for keyword in keywords} # Count occurrences of each keyword for keyword in keywords: keyword_counts[keyword] = combined_interactions.count(keyword) return keyword_counts"},{"question":"# Question: Implementing a Simple Linear Regression in Python **Scenario:** You are required to implement a basic version of linear regression, which is a statistical method for modeling the relationship between a dependent variable and one or more independent variables. Unlike advanced models, this one will simply handle a single independent variable (univariate linear regression). **Task:** Implement a function `simple_linear_regression` that fits a line to a given dataset using the least-squares method and returns the slope and intercept of the best-fit line. **Function Signature:** ```python def simple_linear_regression(x: List[float], y: List[float]) -> Tuple[float, float]: pass ``` **Input:** - `x` (List[float]): A list of floats representing the independent variable. - `y` (List[float]): A list of floats representing the dependent variable. **Output:** - (Tuple[float, float]): A tuple containing two floats: the slope and the intercept of the best-fit line. **Constraints:** - Length of `x` and `y` lists are equal and greater than 1. - All elements in `x` and `y` are real numbers. **Example:** ```python >>> x = [1, 2, 3, 4, 5] >>> y = [2, 4, 5, 4, 5] >>> simple_linear_regression(x, y) (0.6, 2.2) ``` **Explanation:** Your function `simple_linear_regression` should calculate the linear regression line defined by the equation `y = mx + b`, where `m` is the slope and `b` is the intercept. The function should return the values of `m` and `b` that minimize the sum of squared differences between the observed values (`y`) and the values predicted by the model.","solution":"from typing import List, Tuple def simple_linear_regression(x: List[float], y: List[float]) -> Tuple[float, float]: Fits a simple linear regression model to the data points (x, y) and returns the slope (m) and intercept (b) of the best-fit line. n = len(x) # Calculate means of x and y x_mean = sum(x) / n y_mean = sum(y) / n # Calculate the numerator and denominator for the slope (m) numerator = sum((x[i] - x_mean) * (y[i] - y_mean) for i in range(n)) denominator = sum((x[i] - x_mean) ** 2 for i in range(n)) # Slope (m) m = numerator / denominator # Intercept (b) b = y_mean - (m * x_mean) return m, b"},{"question":"# Coding Assessment Question: Implementing a Custom Syntax Highlighting System **Scenario:** You are developing a new Integrated Development Environment (IDE) for a programming language called \'Pixl\'. As part of this project, you need to implement a feature that performs syntax highlighting. This feature should identify specific language keywords and other notable patterns within the source code and apply unique styles to them. **Problem Statement:** Write a function named `syntax_highlight` that processes a given Pixl source code string and highlights keywords, comments, and strings. For simplicity, assume that Pixl has only three keywords: `function`, `var`, and `class`. Strings in Pixl are enclosed in double quotes `\\"` and comments start with `#` extending to the end of the line. **Function Signature:** ```python def syntax_highlight(code: str) -> str: ``` **Input:** - `code` (str): A string of length `n` (0 ≤ n ≤ 10^6) containing Pixl source code. The string may include any printable ASCII characters. **Output:** - A string where Pixl keywords, strings, and comments are highlighted by wrapping them in HTML tags: - Keywords should be wrapped in `<span class=\\"keyword\\"></span>`. - Strings should be wrapped in `<span class=\\"string\\"></span>`. - Comments should be wrapped in `<span class=\\"comment\\"></span>`. **Constraints:** - The function should handle empty inputs correctly and return an empty string. - All strings and comments should be correctly detected and highlighted even if they appear after keywords. **Examples:** ```python >>> syntax_highlight(\'function hello() { var name = \\"World\\"; # Greet the worldn}\') \'<span class=\\"keyword\\">function</span> hello() { <span class=\\"keyword\\">var</span> name = <span class=\\"string\\">\\"World\\"</span>; <span class=\\"comment\\"># Greet the world</span>n}\' >>> syntax_highlight(\'# Comment onlynvar x = \\"test\\";\') \'<span class=\\"comment\\"># Comment only</span>n<span class=\\"keyword\\">var</span> x = <span class=\\"string\\">\\"test\\"</span>;\' >>> syntax_highlight(\'class MyClass {}\') \'<span class=\\"keyword\\">class</span> MyClass {}\' ``` **Note:** - Take care to correctly identify and highlight overlapping syntax elements. - Ensure that your function is optimized for large inputs while maintaining the integrity of the highlighting process. - Handle edge cases, such as escaped quotes within strings and comments that include keywords, appropriately. Good luck, and happy coding!","solution":"import re def syntax_highlight(code: str) -> str: Highlights Pixl source code by wrapping keywords, strings, and comments in HTML tags. # Define patterns for Pixl syntax elements keyword_pattern = r\'b(function|var|class)b\' string_pattern = r\'\\"(?:.|[^\\"])*\\"\' comment_pattern = r\'#.*\' # Create combined pattern with named groups for easy replacement combined_pattern = f\'(?P<keyword>{keyword_pattern})|(?P<string>{string_pattern})|(?P<comment>{comment_pattern})\' # Function to wrap matched patterns with appropriate HTML span tags def replacer(match): if match.group(\'keyword\'): return f\'<span class=\\"keyword\\">{match.group(\\"keyword\\")}</span>\' elif match.group(\'string\'): return f\'<span class=\\"string\\">{match.group(\\"string\\")}</span>\' elif match.group(\'comment\'): return f\'<span class=\\"comment\\">{match.group(\\"comment\\")}</span>\' return match.group(0) # Apply the substitution using the replacer function highlighted_code = re.sub(combined_pattern, replacer, code) return highlighted_code"},{"question":"# Question Objective You need to implement a function called `normalize_vector`. This function normalizes the vector such that its norm (magnitude) is `1`. This technique is often used in machine learning and data preprocessing to make sure features have a standard range. Scenario Given a vector of numeric values, you are to normalize it by dividing each element by the Euclidean norm (L2 norm) of the vector. Function Signature ```python def normalize_vector(vector: np.ndarray) -> np.ndarray: ``` # Input - `vector`: A 1D numpy array of numeric values. # Output - Return a numpy array that has been normalized to a unit vector. # Constraints - The input vector will have at least one non-zero element. - Vector length can be up to (10^6) elements. # Examples ```python >>> vector = np.array([1, 2, 2]) >>> normalize_vector(vector) array([0.33333333, 0.66666667, 0.66666667]) ``` # Detailed Breakdown 1. **Vector Input**: Evaluate the input vector to calculate its Euclidean norm. 2. **Normalization**: - Calculate the Euclidean norm of the vector: ( text{norm} = sqrt{x_1^2 + x_2^2 + ldots + x_n^2} ) - Divide each element of the vector by its Euclidean norm to get the unit vector. Implement the function considering performance, especially for large input sizes as per the stated constraints.","solution":"import numpy as np def normalize_vector(vector: np.ndarray) -> np.ndarray: Normalizes the vector such that its norm (magnitude) is 1. Parameters: vector (np.ndarray): A 1D numpy array of numeric values. Returns: np.ndarray: A numpy array that has been normalized to a unit vector. norm = np.linalg.norm(vector) return vector / norm"},{"question":"# Coding Assessment Question **Find Longest Proper Prefix which is also Suffix (LPS Array Calculation)** Given a string, write a function `calculate_lps_array(s: str) -> list[int]` that computes the Longest Proper Prefix which is also Suffix array used in the KMP (Knuth-Morris-Pratt) string matching algorithm. **Function Signature:** ```python def calculate_lps_array(s: str) -> list[int]: ``` **Input:** * A string ( s ) where ( 1 leq text{len}(s) leq 10000 ). **Output:** * A list of integers representing the LPS array for the input string. **Constraints:** * The string ( s ) contains only lowercase English letters. **Examples:** ```python >>> calculate_lps_array(\\"abcab\\") [0, 0, 0, 1, 2] >>> calculate_lps_array(\\"aaaa\\") [0, 1, 2, 3] >>> calculate_lps_array(\\"abcd\\") [0, 0, 0, 0] ``` **Explanation:** * The LPS array represents the length of the longest proper prefix of the substring which is also a suffix. * For string `abcab`: - The longest proper prefix of `a` that is also a suffix is 0. - The longest proper prefix of `ab` that is also a suffix is 0. - The longest proper prefix of `abc` that is also a suffix is 0. - The longest proper prefix of `abca` that is also a suffix is 1 (a). - The longest proper prefix of `abcab` that is also a suffix is 2 (ab). **Context:** * The LPS array is vital for the KMP algorithm which performs substring searches efficiently by avoiding unnecessary re-comparison. * Understanding and computing the LPS array helps in optimizing pattern matching algorithms, which are fundamental in text processing and bioinformatics applications. **Requirements:** 1. Implement the LPS array computation accurately based on the KMP algorithm principles. 2. Ensure the function works efficiently for the upper limits of the input constraints. 3. Validate the input to ensure it meets the specified requirements.","solution":"def calculate_lps_array(s: str) -> list[int]: Computes the Longest Proper Prefix which is also Suffix (LPS) array for the given string. Args: s (str): The input string containing only lowercase English letters. Returns: list[int]: The LPS array for the input string. lps = [0] * len(s) j = 0 # length of the previous longest prefix suffix i = 1 while i < len(s): if s[i] == s[j]: j += 1 lps[i] = j i += 1 else: if j != 0: j = lps[j - 1] else: lps[i] = 0 i += 1 return lps"},{"question":"# Coding Question **Context**: Trees are fundamental data structures in computer science, often used to represent hierarchical data. In practice, binary trees where each node has at most two children are quite common. Your task is to manage the traversal of such trees to calculate path sums. **Objective**: Write a function `find_path_sums(root: Optional[TreeNode]) -> List[int]` that finds all root-to-leaf path sums in a given binary tree. # Criteria: 1. **Input**: * A `TreeNode` representing the root of the binary tree. 2. **Output**: * A list of integers, where each integer represents the sum of one root-to-leaf path. 3. **Constraints**: * Consider edge cases where the tree might be empty. * Handle trees with varying depths and structures. 4. **Performance**: * The function should efficiently compute the sums, even for large trees. # Definitions: - The `TreeNode` class is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Example: Consider the following binary tree: ``` 1 / 2 3 / 4 5 6 ``` The root-to-leaf paths are: 1. 1 -> 2 -> 4 (sum: 7) 2. 1 -> 2 -> 5 (sum: 8) 3. 1 -> 3 -> 6 (sum: 10) Hence, the output will be `[7, 8, 10]`. # Example Usage: ```python def find_path_sums(root: Optional[TreeNode]) -> List[int]: # Your implementation here # create the tree nodes root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) root.right.right = TreeNode(6) print(find_path_sums(root)) # Expected: [7, 8, 10] ``` Write your function to solve this problem, ensuring correct and efficient handling of the structure and constraints described.","solution":"from typing import Optional, List class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_path_sums(root: Optional[TreeNode]) -> List[int]: if not root: return [] def dfs(node, current_sum): if not node: return [] current_sum += node.val # If it\'s a leaf node if not node.left and not node.right: return [current_sum] # Process children left_sums = dfs(node.left, current_sum) right_sums = dfs(node.right, current_sum) return left_sums + right_sums return dfs(root, 0)"},{"question":"**Scenario**: You have been tasked with developing a utility to handle URL shortening and expansion. The general idea is to convert a long URL into a shorter, unique identifier and be able to reverse this process reliably. **Challenge**: Implement the following functions: `url_shorten` and `url_expand`. Your implementations should adhere to the following rules: 1. `url_shorten(url: str) -> str`: Shortens the input URL into a unique shortened URL. 2. `url_expand(short_url: str) -> str`: Expands the shortened URL back to the original long URL. Both functions should handle edge cases, such as very short or very long URLs. The `url_expand` function must ensure that the expanded URL matches the original and raise a meaningful error if the short URL is invalid or unrecognized. # Function Signatures ```python def url_shorten(url: str) -> str: pass def url_expand(short_url: str) -> str: pass ``` # Example Usage ```python # Shortening examples original_url1 = \\"https://www.example.com/some/really/long/url\\" short_url1 = url_shorten(original_url1) assert short_url1 == \\"http://short.ly/a1B2c3\\" assert url_expand(short_url1) == original_url1 original_url2 = \\"http://example.com\\" short_url2 = url_shorten(original_url2) assert short_url2 == \\"http://short.ly/XYZ123\\" assert url_expand(short_url2) == original_url2 # Invalid short URL try: url_expand(\\"http://short.ly/invalid\\") except ValueError: pass # Expected error ``` # Constraints and Performance Requirements * Ensure the URL shortening process is fast and the length of the shortened URL is significantly smaller than the original. * The `url_expand` function should be able to map back the short URL to the original URL without delay. * The system should be capable of handling up to 10,000 unique URLs efficiently. # Notes * Consider using a dictionary or a database to store the mappings between original URLs and shortened versions. * Ensure the shortened URLs are unique and do not collide. * Handle invalid or malformed input gracefully and design error handling appropriately. * Include sufficient error handling to deal with potential issues like invalid URL formats or unrecognized short URLs.","solution":"import hashlib import random import string # Dictionary to store URL mappings url_mapping = {} def url_shorten(url: str) -> str: Shortens the input URL into a unique shortened URL. # Generate a unique hash for the URL url_hash = hashlib.md5(url.encode()).hexdigest() short_part = url_hash[:6] # Use the first 6 characters of the hash for the short URL short_url = f\\"http://short.ly/{short_part}\\" # Storing the short URL to original URL mapping url_mapping[short_url] = url return short_url def url_expand(short_url: str) -> str: Expands the shortened URL back to the original long URL. if short_url in url_mapping: return url_mapping[short_url] else: raise ValueError(\\"Short URL is invalid or unrecognized.\\")"},{"question":"# Scenario You are responsible for developing a data processing module in a social media analytics application. One of the key features is to identify trending hashtags from a large dataset of social media posts. To accomplish this, you need to implement a function that extracts the most frequently occurring hashtags from the given dataset. # Task Implement the `find_trending_hashtags` function that identifies and returns the top `k` most frequently occurring hashtags from a list of social media posts. # Function Signature ```python def find_trending_hashtags(posts: list[str], k: int) -> list[str]: pass ``` # Parameters * `posts` (list[str]): A list of strings, where each string represents the text content of a social media post. * `k` (int): The number of top trending hashtags to return. # Output * Returns a list of strings representing the top `k` trending hashtags. # Constraints * Hashtags in the posts are case insensitive (e.g., `#HASHTAG` and `#hashtag` should be considered the same). * If `k` is greater than the number of unique hashtags, return all unique hashtags sorted by frequency. * Hashtags are words beginning with the character `#` and cannot contain spaces or punctuation (e.g., `#example`, `#hello_world`). # Requirements 1. **Input Validation**: * Ensure that the list of posts contains only strings. * Ensure that `k` is a positive integer. * Handle cases where the input is empty or does not contain any hashtags. 2. **Algorithm Implementation**: * Extract hashtags from each post, considering case insensitivity. * Count the frequency of each unique hashtag. * Return the top `k` most frequent hashtags. 3. **Error Handling**: * Raise appropriate errors for invalid inputs. # Example ```python >>> posts = [\\"Just posted a photo! #sunset #travel #happy\\", \\"Amazing trip #Travel #adventure\\", \\"Back to work! #mondayblues\\", \\"Exploring the city #Travel #urban\\"] >>> find_trending_hashtags(posts, 2) [\'#travel\', \'#sunset\'] >>> find_trending_hashtags(posts, 5) [\'#travel\', \'#sunset\', \'#happy\', \'#adventure\', \'#mondayblues\'] ``` # Notes Consider optimizing the function for performance, especially when dealing with large datasets. Efficient data structures and algorithms should be employed to handle the extraction and counting of hashtags effectively.","solution":"import re from collections import Counter def find_trending_hashtags(posts: list[str], k: int) -> list[str]: if not isinstance(posts, list) or not all(isinstance(post, str) for post in posts): raise ValueError(\\"Posts must be a list of strings.\\") if not isinstance(k, int) or k <= 0: raise ValueError(\\"k must be a positive integer.\\") hashtags = [] for post in posts: hashtags.extend(re.findall(r\\"#w+\\", post.lower())) hashtag_counts = Counter(hashtags) top_hashtags = hashtag_counts.most_common(k) return [hashtag for hashtag, count in top_hashtags]"},{"question":"# Question: Maximal Sum of Non-Adjacent Numbers You\'re working on a data analytics application that processes sequences of events. In one of the processes, you need to analyze a series of numbers and find the maximal sum of non-adjacent numbers. Implement a function `max_sum_of_non_adjacent(nums: list[int]) -> int` that returns the maximum sum of non-adjacent numbers in the given list. Numbers in the list are not necessarily positive, and non-adjacent means no two selected numbers should be directly next to each other in the sequence. # Input - A list of integers `nums`. # Output - An integer representing the maximal sum of non-adjacent numbers in the list. # Constraints - The length of the list, `len(nums)`, can be at most 10^4. - The values in the list can range from -10^4 to 10^4. - Aim for a solution with a time complexity of O(N). # Example ```python # Example 1 nums = [3, 2, 5, 10, 7] max_sum_of_non_adjacent(nums) # Expected Output: 15 # Example 2 nums = [-2, 1, 3, -4, 5, -1, 2] max_sum_of_non_adjacent(nums) # Expected Output: 10 # Example 3 nums = [3, 2, 7, 10] max_sum_of_non_adjacent(nums) # Expected Output: 13 # Example 4 nums = [3, 2, 5, 10, 7, -1, -2, -3, 8] max_sum_of_non_adjacent(nums) # Expected Output: 23 # Example 5 nums = [] max_sum_of_non_adjacent(nums) # Expected Output: 0 ``` # Notes - If the list is empty, the function should return 0. - Ensure the implementation is optimal to handle larger lists efficiently. - Consider edge cases such as lists with all negative numbers or lists with only one or two elements.","solution":"def max_sum_of_non_adjacent(nums): if not nums: return 0 elif len(nums) == 1: return max(0, nums[0]) # Initialize the variables to store the maximum sum including or excluding the current element incl = max(0, nums[0]) excl = 0 for i in range(1, len(nums)): # Current max excluding i new_excl = max(incl, excl) # Current max including i incl = excl + nums[i] excl = new_excl # Return the maximum of incl and excl which have the final results return max(incl, excl)"},{"question":"# Analyzing a Social Network using Graph Algorithms In a social network, people are represented as nodes, and their friendships are represented as edges. Your task is to analyze the network to identify the shortest path of friendships between two people using the Breadth-First Search (BFS) algorithm. # Input Format - `persons`: An integer representing the number of people in the network. - `friendships`: A list of tuples `(a, b)` where `a` and `b` are integers representing a bidirectional friendship between person `a` and person `b`. - `start`: An integer representing the starting person. - `goal`: An integer representing the goal person. # Output Format - Return a list of integers representing the sequence of people from the start person to the goal person indicating the shortest path via friendships. # Constraints - The number of persons `persons` will be between `2` and `1000`. - Each friendship is unique and bidirectional. - The network is connected, meaning there is always a path between any two persons. - `0 <= a, b < persons` - `0 <= start, goal < persons` - `start` and `goal` will not be the same. # Example ```python persons = 5 friendships = [(0, 1), (0, 2), (1, 2), (1, 3), (3, 4)] start = 0 goal = 4 path = find_shortest_path(persons, friendships, start, goal) # Output: [0, 1, 3, 4] ``` Your task is to implement the function `find_shortest_path` that returns the shortest path of friendships between the start and goal persons. # Implementation ```python def find_shortest_path(persons, friendships, start, goal): # Your code here ```","solution":"from collections import deque def find_shortest_path(persons, friendships, start, goal): if start == goal: return [start] # Create adjacency list adj_list = {i: [] for i in range(persons)} for a, b in friendships: adj_list[a].append(b) adj_list[b].append(a) # Initialize BFS queue = deque([start]) visited = {start} parent = {start: None} # Perform BFS while queue: current = queue.popleft() if current == goal: # If goal is found, construct the path from goal to start using parent pointers path = [] while current is not None: path.append(current) current = parent[current] return path[::-1] # reverse the path to get from start to goal for neighbor in adj_list[current]: if neighbor not in visited: visited.add(neighbor) parent[neighbor] = current queue.append(neighbor) return [] # If no path is found, though it should not happen in a connected graph # Example usage: # persons = 5 # friendships = [(0, 1), (0, 2), (1, 2), (1, 3), (3, 4)] # start = 0 # goal = 4 # path = find_shortest_path(persons, friendships, start, goal) # print(path) # Output: [0, 1, 3, 4]"},{"question":"# Coding Assessment Question: You are given a list of integers where each integer appears an even number of times, except for one integer that appears an odd number of times. Your task is to implement a function `find_odd_occurrence` to find and return the integer that appears an odd number of times. # Function Signature: ```python def find_odd_occurrence(nums: List[int]) -> int: pass ``` # Input: * A single list `nums` consisting of integers. * Constraints: The length of the list `nums` is 1 <= len(nums) <= 10^6. # Output: * Returns the integer that appears an odd number of times. # Examples: ```python >>> find_odd_occurrence([1, 2, 2, 1, 3, 3, 4]) 4 >>> find_odd_occurrence([10]) 10 >>> find_odd_occurrence([5, 7, 7, 5, 3]) 3 >>> find_odd_occurrence([0, 0, 1, 1, 2, 2, 2]) 2 ``` # Performance Requirements: * The solution must have a time complexity of O(n) and a space complexity of O(1), where n is the length of the input list.","solution":"from typing import List def find_odd_occurrence(nums: List[int]) -> int: odd_occurrence = 0 for num in nums: odd_occurrence ^= num return odd_occurrence"},{"question":"# In-Game Reward System In a popular online game, players can earn rewards based on their achievements in different levels. Each achievement has a point value, and players\' cumulative points determine their reward tier. Your task is to write a function `reward_tier` that takes a list of integers representing achievement points, calculates the total points, and returns the respective reward tier based on the following criteria: - Tier 1: 0 - 99 points - Tier 2: 100 - 199 points - Tier 3: 200 - 299 points - Tier 4: 300 - 499 points - Tier 5: 500 points and above If the input list is empty, assume the cumulative points are zero and assign Tier 1. # Function Signature ```python def reward_tier(achievement_points: List[int]) -> str: pass ``` # Input * `achievement_points`: A list of integers representing points earned from achievements. # Output * Returns a string representing the reward tier (\\"Tier 1\\", \\"Tier 2\\", \\"Tier 3\\", \\"Tier 4\\", or \\"Tier 5\\"). # Constraints * Each integer in the `achievement_points` list is between 1 and 100. * The length of the `achievement_points` list will be less than or equal to 100. # Example ```python >>> reward_tier([10, 20, 30]) \'Tier 1\' >>> reward_tier([50, 60, 100, 200]) \'Tier 4\' >>> reward_tier([500, 10]) \'Tier 5\' >>> reward_tier([]) \'Tier 1\' >>> reward_tier([50, 20, 15, 5, 10]) \'Tier 1\' ``` Write a function that accurately calculates the total points collected and determines the respective reward tier based on the given criteria. Ensure that your solution handles various cases including empty input and different point distributions efficiently.","solution":"from typing import List def reward_tier(achievement_points: List[int]) -> str: total_points = sum(achievement_points) if total_points >= 500: return \\"Tier 5\\" elif total_points >= 300: return \\"Tier 4\\" elif total_points >= 200: return \\"Tier 3\\" elif total_points >= 100: return \\"Tier 2\\" else: return \\"Tier 1\\""},{"question":"# Robot in a Grid: Unique Paths with Obstacles **Scenario**: You are given a grid representing a labyrinth filled with obstacles. Each cell in the grid can either be an open cell or an obstacle. Your task is to determine the number of unique paths from the top-left corner to the bottom-right corner of the grid. This problem is a classic example of dynamic programming applied to pathfinding in a constrained environment. **Problem Statement**: Write a function `unique_paths_with_obstacles(grid: list[list[int]]) -> int` that computes the number of unique paths from the top-left corner to the bottom-right corner in a grid filled with obstacles. **Input**: - A 2D integer list `grid` with dimensions m x n (1 <= m, n <= 100). - Each element in `grid` is either 0 (representing an open cell) or 1 (representing an obstacle). **Output**: - Returns an integer representing the number of unique paths from the top-left to the bottom-right corner. **Constraints**: - You can only move either down or right at any point in time. - If the starting cell or the ending cell is an obstacle, return 0, as no paths can be made. **Function Signature**: ```python def unique_paths_with_obstacles(grid: list[list[int]]) -> int: pass ``` **Example**: ```python grid1 = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] print(unique_paths_with_obstacles(grid1)) # Output: 2 # Explanation: # There are two unique paths: # 1. Right -> Right -> Down -> Down # 2. Down -> Down -> Right -> Right grid2 = [ [0, 1], [0, 0] ] print(unique_paths_with_obstacles(grid2)) # Output: 1 # Explanation: # There is one unique path: # Down -> Right ``` **Notes**: - Use dynamic programming to solve this problem efficiently. - Ensure your solution handles edge cases such as grids full of obstacles or entirely open grids effectively.","solution":"def unique_paths_with_obstacles(grid: list[list[int]]) -> int: if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(1, n): dp[0][i] = dp[0][i - 1] if grid[0][i] == 0 else 0 for j in range(1, m): dp[j][0] = dp[j - 1][0] if grid[j][0] == 0 else 0 for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i - 1][j] + dp[i][j - 1] else: dp[i][j] = 0 return dp[-1][-1]"},{"question":"# Problem Statement Design a function that takes a file path to a CSV (Comma Separated Value) file as input and returns a summary of descriptive statistics for each numerical column. Implement the function `csv_summary(file_path: str) -> Dict[str, Dict[str, float]]`, where `file_path` is a string representing the path to the CSV file. The function should return a dictionary where the keys are the column names and the values are dictionaries containing the mean, standard deviation, min, and max of the column. # Input * `file_path`: A string representing the path to the CSV file. # Output * A dictionary with the structure {column_name: {\\"mean\\": float, \\"std\\": float, \\"min\\": float, \\"max\\": float}} where `column_name` is the name of each numerical column in the CSV and the values are the calculated statistics. # Constraints 1. Assume the CSV file will have at least one numerical column. 2. Non-numerical columns should be ignored in the statistics. 3. Handle potential reading errors gracefully (e.g., file not found). # Requirements * Read the CSV file and parse its content. * Calculate the mean, standard deviation, minimum, and maximum for each numerical column. * Handle missing or invalid values appropriately by excluding them from the computation. * Use Python\'s built-in libraries (e.g., pandas) to facilitate CSV parsing and computation. # Example Consider a CSV file named `data.csv` with the following content: ``` name,age,salary Alice,30,70000 Bob,35,80000 Charlie,25,60000 David,45,90000 ``` ```python # Example usage summary = csv_summary(\'data.csv\') print(summary) # Output should be something like: # { # \\"age\\": {\\"mean\\": 33.75, \\"std\\": 8.5391, \\"min\\": 25.0, \\"max\\": 45.0}, # \\"salary\\": {\\"mean\\": 75000.0, \\"std\\": 12909.94, \\"min\\": 60000.0, \\"max\\": 90000.0} # } ```","solution":"import pandas as pd import os from typing import Dict def csv_summary(file_path: str) -> Dict[str, Dict[str, float]]: Read a CSV file and return a dictionary with descriptive statistics for each numerical column. Args: file_path (str): The path to the CSV file. Returns: Dict[str, Dict[str, float]]: A dictionary with the structure {column_name: {\\"mean\\": float, \\"std\\": float, \\"min\\": float, \\"max\\": float}} where column_name is the name of each numerical column in the CSV and the values are the calculated statistics. if not os.path.exists(file_path): raise FileNotFoundError(f\'File {file_path} does not exist.\') df = pd.read_csv(file_path) stats_summary = {} for column in df.select_dtypes(include=[\'number\']).columns: stats_summary[column] = { \\"mean\\": df[column].mean(), \\"std\\": df[column].std(), \\"min\\": df[column].min(), \\"max\\": df[column].max() } return stats_summary"},{"question":"# Question: Implement a Trie with Insert, Search, and Delete Operations Implement a Trie data structure that supports insertion, searching, and deletion of words efficiently. Problem Statement Implement a class `Trie` with the following methods: * `insert(word: str) -> None`: Inserts the word into the Trie. * `search(word: str) -> bool`: Returns `True` if the word is in the Trie, `False` otherwise. * `delete(word: str) -> None`: Deletes the word from the Trie if it exists. Input * `word`: A string containing only lowercase letters (a-z) with a maximum length of 100. Output * The `insert` method does not return anything. * The `search` method returns a boolean. * The `delete` method does not return anything. Constraints * All insertions and deletions are valid words. * A word is deleted only if it exists in the Trie. Example ```python trie = Trie() # Insert words into the Trie trie.insert(\\"hello\\") trie.insert(\\"helium\\") # Search for words print(trie.search(\\"hello\\")) # True print(trie.search(\\"hellium\\")) # False # Delete a word trie.delete(\\"hello\\") print(trie.search(\\"hello\\")) # False # The word \\"helium\\" should still exist print(trie.search(\\"helium\\")) # True ``` Notes 1. Implement the Trie with nodes representing each character. 2. Each node should contain: * A dictionary mapping characters to subsequent Trie nodes. * A boolean flag indicating if the node marks the end of a word. 3. Ensure efficient memory usage by only allocating nodes as needed. 4. Handle edge cases, such as deleting a word that partially overlaps with another word. Implement the `Trie` class and test your implementation with various words to ensure correctness and efficiency.","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word: str) -> None: node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def search(self, word: str) -> bool: node = self.root for char in word: if char not in node.children: return False node = node.children[char] return node.is_end_of_word def delete(self, word: str) -> None: def _delete(node, word, depth): if depth == len(word): if node.is_end_of_word: node.is_end_of_word = False return len(node.children) == 0 char = word[depth] if char in node.children: should_delete_child = _delete(node.children[char], word, depth + 1) if should_delete_child: del node.children[char] return len(node.children) == 0 and not node.is_end_of_word return False _delete(self.root, word, 0)"},{"question":"# Temperature Conversion You are required to write a function that converts temperature measurements between different units: Celsius, Fahrenheit, and Kelvin. The given function `temperature_conversion` converts a value given in one temperature unit to another using predefined conversion formulas. Your task is to ensure that the function handles all three specified temperature units accurately and gracefully manages invalid inputs by printing a user-friendly error message. # Requirements: 1. **Unit Conversions to Handle**: - **Celsius (C)**: - Conversion to Fahrenheit: (°C × 9/5) + 32 = °F - Conversion to Kelvin: °C + 273.15 = K - Conversion from Fahrenheit: (°F - 32) × 5/9 = °C - Conversion from Kelvin: K - 273.15 = °C - **Fahrenheit (F)**: - Conversion to Celsius: (°F - 32) × 5/9 = °C - Conversion to Kelvin: (°F + 459.67) × 5/9 = K - Conversion from Celsius: (°C × 9/5) + 32 = °F - Conversion from Kelvin: (K × 9/5) - 459.67 = °F - **Kelvin (K)**: - Conversion to Celsius: K - 273.15 = °C - Conversion to Fahrenheit: (K × 9/5) - 459.67 = °F - Conversion from Celsius: °C + 273.15 = K - Conversion from Fahrenheit: (°F + 459.67) × 5/9 = K 2. **Error Handling**: - Modify the error message for invalid units to be more user-friendly. 3. **Function Signature**: - `def temperature_conversion(value: float, from_type: str, to_type: str) -> float:` 4. **Example**: ```python >>> temperature_conversion(100, \\"Celsius\\", \\"Fahrenheit\\") 212.0 >>> temperature_conversion(0, \\"Celsius\\", \\"Kelvin\\") 273.15 >>> temperature_conversion(32, \\"Fahrenheit\\", \\"Celsius\\") 0.0 >>> temperature_conversion(212, \\"Fahrenheit\\", \\"Kelvin\\") 373.15 >>> temperature_conversion(500, \\"Kelvin\\", \\"Celsius\\") 226.85 >>> temperature_conversion(200, \\"Kelvin\\", \\"Fahrenheit\\") -99.67 >>> temperature_conversion(1, \\"Kelvin\\", \\"Kelvin\\") 1 >>> temperature_conversion(1, \\"Rankine\\", \\"Celsius\\") Traceback (most recent call last): ... ValueError: Invalid \'from_type\' value: \'Rankine\'.nAvailable units are: Celsius, Fahrenheit, Kelvin ``` # Constraints: 1. If input units are not valid, raise a `ValueError` with a message listing available units. 2. The function should work with input values up to a precision of `1e-2` for floating-point calculations.","solution":"def temperature_conversion(value: float, from_type: str, to_type: str) -> float: from_type = from_type.lower() to_type = to_type.lower() valid_units = {\\"celsius\\", \\"fahrenheit\\", \\"kelvin\\"} if from_type not in valid_units or to_type not in valid_units: raise ValueError(f\\"Invalid units. Available units are: Celsius, Fahrenheit, Kelvin\\") if from_type == to_type: return value # Conversion from \'from_type\' to Celsius if from_type == \\"celsius\\": celsius_value = value elif from_type == \\"fahrenheit\\": celsius_value = (value - 32) * 5/9 elif from_type == \\"kelvin\\": celsius_value = value - 273.15 # Conversion from Celsius to \'to_type\' if to_type == \\"celsius\\": return celsius_value elif to_type == \\"fahrenheit\\": return (celsius_value * 9/5) + 32 elif to_type == \\"kelvin\\": return celsius_value + 273.15"},{"question":"# Question: Matrix Diagonal Sum with Skip Constraint You are given an algorithm to calculate the sum of the main diagonal elements of an `n x n` matrix. Your task is to implement a function that computes this sum, but skips any elements that are negative. Function Signature ```python def diagonal_sum(matrix: list[list[int]]) -> int: pass ``` # Input * `matrix` (list[list[int]]): A square matrix (i.e., the number of rows is equal to the number of columns). The matrix will contain integers. # Output * Return the sum of the diagonal elements, excluding any that are negative. # Constraints 1. The matrix must be non-empty. If it is empty, raise a `ValueError` with the message \\"Matrix cannot be empty.\\" 2. The matrix must be square (i.e., the number of rows equals the number of columns). If it is not, raise a `ValueError` with the message \\"Matrix must be square.\\" # Example ```python diagonal_sum([[1, 2, 3], [4, 5, -6], [7, -8, 9]]) # Returns 15 (1 + 5 + 9) diagonal_sum([[10, -2], [-3, 20]]) # Returns 30 (10 + 20) diagonal_sum([[5]]) # Returns 5 diagonal_sum([[-5]]) # Returns 0 diagonal_sum([]) # Raises ValueError: Matrix cannot be empty diagonal_sum([[1, 2], [3]]) # Raises ValueError: Matrix must be square ``` # Notes 1. Ensure your implementation handles edge cases effectively. 2. Optimize the implementation to be efficient even with larger matrices.","solution":"def diagonal_sum(matrix: list[list[int]]) -> int: Calculate the sum of the main diagonal elements of a square matrix, skipping any negative elements. Parameters: - matrix: list[list[int]], a square matrix (n x n). Returns: - int, the sum of the main diagonal elements excluding negative elements. Raises: - ValueError: if the matrix is empty or not square. if not matrix: raise ValueError(\\"Matrix cannot be empty\\") n = len(matrix) for row in matrix: if len(row) != n: raise ValueError(\\"Matrix must be square\\") return sum(matrix[i][i] for i in range(n) if matrix[i][i] >= 0)"},{"question":"# Coding Question Scenario As a software developer, you are often required to manipulate text data for various purposes such as formatting, data cleaning, and processing. One common task is to convert a given list of strings such that each string is split into individual words and these words are then joined together to form a single string in alternating uppercase and lowercase formats. Requirements Implement a function `alternate_case_conversion` that takes a list of strings and returns a single string where words from the list are joined together in alternating uppercase and lowercase formats. Function Signature ```python def alternate_case_conversion(strings: list[str]) -> str: ``` Input * `strings`: A list of strings where each string contains multiple words separated by spaces. Output * A single string where words are joined together in alternating uppercase and lowercase formats. Starting with the first word in uppercase, the second word in lowercase, and so on. Constraints 1. Each string in the `strings` list will contain only alphabetical characters and spaces. 2. The strings list will not be empty and each string will contain at least one word. Example ```python >>> alternate_case_conversion([\\"hello world\\", \\"coding is fun\\"]) \'HELLO world CODING is FUN\' >>> alternate_case_conversion([\\"a b c\\", \\"d e\\", \\"f g h\\"]) \'A b C d F g H\' ``` Edge Cases 1. A string in the list contains only one word. 2. There is a string with multiple words, but all are to be converted correctly in the alternating pattern.","solution":"def alternate_case_conversion(strings: list[str]) -> str: Converts a list of strings such that each string is split into individual words and these words are then joined together to form a single string in alternating uppercase and lowercase formats. Args: strings (list[str]): List of strings containing words to be converted. Returns: str: A single string with alternating uppercase and lowercase formatted words. words = [] for string in strings: words.extend(string.split()) for i in range(len(words)): if i % 2 == 0: words[i] = words[i].upper() else: words[i] = words[i].lower() return \' \'.join(words)"},{"question":"# Problem Statement You are given a function called `duration_between` that calculates the duration between two times represented in a 24-hour format (\\"HH:MM\\"). Your task is to expand the implementation to account for more complex time scenarios and edge cases. You need to implement the following three functions: 1. `is_valid_time(time_str: str) -> bool` 2. `minutes_since_midnight(time: str) -> int` 3. `duration_between(start: str, end: str) -> str` # Function Specifications 1. is_valid_time(time_str: str) -> bool * This function checks whether a given time string is in a valid \\"HH:MM\\" format. * **Input**: A string representing the time. * **Output**: A boolean indicating whether the given time string is valid. Example: ```python >>> is_valid_time(\\"18:45\\") True >>> is_valid_time(\\"25:00\\") False ``` 2. minutes_since_midnight(time: str) -> int * This function converts a valid \\"HH:MM\\" time string to the number of minutes since midnight. * **Input**: A string representing a valid time. * **Output**: An integer representing the total minutes since midnight. Example: ```python >>> minutes_since_midnight(\\"02:30\\") 150 >>> minutes_since_midnight(\\"12:00\\") 720 ``` 3. duration_between(start: str, end: str) -> str * This function calculates the duration between two given times in a 24-hour format. If the ending time is earlier or equal to the starting time, it considers it to be on the next day. * **Input**: - A string representing the starting time in \\"HH:MM\\" format. - A string representing the ending time in \\"HH:MM\\" format. * **Output**: A string representing the duration in \\"HH hours and MM minutes\\" format. Example: ```python >>> duration_between(\\"23:30\\", \\"01:15\\") \'1 hours and 45 minutes\' >>> duration_between(\\"09:00\\", \\"18:00\\") \'9 hours and 0 minutes\' >>> duration_between(\\"06:15\\", \\"06:15\\") \'24 hours and 0 minutes\' ``` # Constraints * The functions should handle all times within a valid 24-hour period. * Assume the input times are valid time strings for the second and third functions. * Errors should be handled gracefully, and input validation is required for the first function. # Requirements 1. Implement detailed validation within `is_valid_time` to ensure the format is accurate. 2. Ensure precise calculations in `minutes_since_midnight` for converting time to minutes. 3. Implement robust logic in `duration_between` to handle crossing over to the next day correctly. 4. Add any necessary comments to describe the code functionality, ensuring clarity and maintainability.","solution":"def is_valid_time(time_str: str) -> bool: Checks whether a given time string is in a valid \\"HH:MM\\" format. Args: time_str (str): The time string to validate. Returns: bool: True if the time string is valid, False otherwise. if len(time_str) != 5 or time_str[2] != \':\': return False hh, mm = time_str.split(\':\') if not (hh.isdigit() and mm.isdigit()): return False hours = int(hh) minutes = int(mm) return 0 <= hours < 24 and 0 <= minutes < 60 def minutes_since_midnight(time: str) -> int: Converts a valid \\"HH:MM\\" time string to the number of minutes since midnight. Args: time (str): A valid time string. Returns: int: The total minutes since midnight. hh, mm = map(int, time.split(\':\')) return hh * 60 + mm def duration_between(start: str, end: str) -> str: Calculates the duration between two given times in a 24-hour format. Args: start (str): The starting time in \\"HH:MM\\" format. end (str): The ending time in \\"HH:MM\\" format. Returns: str: The duration in \\"HH hours and MM minutes\\" format. start_minutes = minutes_since_midnight(start) end_minutes = minutes_since_midnight(end) if end_minutes <= start_minutes: end_minutes += 24 * 60 total_minutes = end_minutes - start_minutes hours = total_minutes // 60 minutes = total_minutes % 60 return f\\"{hours} hours and {minutes} minutes\\""},{"question":"# Context Dynamic programming is a powerful technique used to solve complex problems by breaking them down into simpler subproblems. One common problem that leverages dynamic programming is the knapsack problem, which involves selecting a subset of items to maximize a value sum without exceeding a capacity constraint. # Question Write a function `knapsack` that determines the maximum value that can be obtained by selecting items with given weights and values, without exceeding a specified capacity. # Function Signature ```python def knapsack(values: List[int], weights: List[int], capacity: int) -> int: Determines the maximum value that can be obtained by selecting items based on their weights and values, without exceeding the given capacity. :param values: List of integers representing the values of the items. :param weights: List of integers representing the weights of the items. :param capacity: Integer representing the maximum capacity of the knapsack. :return: The maximum value that can be obtained within the given capacity. ``` # Input * `values`: List of integers, e.g., `[60, 100, 120]` * `weights`: List of integers, e.g., `[10, 20, 30]` * `capacity`: Integer, e.g., `50` # Output * Maximum integer value, e.g., `220` # Constraints * The input lists `values` and `weights` have the same length. * All integers in `values` and `weights` are positive. * The integer `capacity` is non-negative. # Examples ```python assert knapsack([60, 100, 120], [10, 20, 30], 50) == 220 assert knapsack([10, 20, 30], [1, 1, 1], 2) == 50 assert knapsack([100, 200, 300], [1, 3, 4], 4) == 300 assert knapsack([5, 6, 3, 9], [2, 2, 1, 3], 4) == 12 ```","solution":"from typing import List def knapsack(values: List[int], weights: List[int], capacity: int) -> int: Determines the maximum value that can be obtained by selecting items based on their weights and values, without exceeding the given capacity. :param values: List of integers representing the values of the items. :param weights: List of integers representing the weights of the items. :param capacity: Integer representing the maximum capacity of the knapsack. :return: The maximum value that can be obtained within the given capacity. n = len(values) dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] for i in range(n + 1): for w in range(capacity + 1): if i == 0 or w == 0: dp[i][w] = 0 elif weights[i - 1] <= w: dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]) else: dp[i][w] = dp[i - 1][w] return dp[n][capacity]"},{"question":"# Coding Question: Array Manipulation with Bit Masking You are given an integer array `arr` and an integer `mask`. The binary representation of the `mask` determines a subarray such that only the elements whose corresponding bits are set to `1` are included in this subarray. **Scenario**: You are tasked with extracting a subarray from the given array `arr` based on the bits set in the `mask`. Specifically, if the `i-th` bit is set in the binary representation of the `mask`, then the `i-th` element of `arr` should be included in the resulting subarray. You then need to return the sum of elements in this subarray. Function Signature ```python def sum_of_masked_subarray(arr: List[int], mask: int) -> int: pass ``` Input * `arr` (List[int]): A list of integers, representing the array. * `mask` (int): A positive integer, representing the bit mask. Output * Returns an integer, the sum of the elements in the subarray defined by the `mask`. Constraints * The length of `arr` is less than or equal to 32. * Both `arr` elements and `mask` are positive integers. * The length of `arr` and the bits set in `mask` will not exceed 32 bits. Example ```python assert sum_of_masked_subarray([1, 2, 3, 4], 5) == 4 # Binary of 5: 101, subarray: [1, 3]. Sum = 4. assert sum_of_masked_subarray([10, 20, 30], 3) == 30 # Binary of 3: 011, subarray: [10, 20]. Sum = 30. assert sum_of_masked_subarray([5, 10, 15, 20], 10) == 30 # Binary of 10: 1010, subarray: [10, 20]. Sum = 30. ``` Notes * Ensure that the array elements are processed according to the position of the bits in `mask`. * Consider edge cases such as when `mask` has no bits set (returns 0) and when all bits in the valid range are set. * Maintain robustness in your function, handling potential issues that might arise with unexpected inputs.","solution":"def sum_of_masked_subarray(arr, mask): Returns the sum of elements in the subarray defined by the mask. The binary representation of the mask determines which elements from arr to include in the subarray. subarray_sum = 0 # Initialize sum of subarray for i in range(len(arr)): if (mask & (1 << i)) != 0: subarray_sum += arr[i] return subarray_sum"},{"question":"# Coding Question **Context**: Alan is building a software that helps users manage their daily tasks. He wants to include a feature that allows tracking the progress of a given task list, offering a summary at any point in time. **Task**: Write a Python class `TaskManager` that: 1. Allows adding new tasks with an initial status of \\"not started\\". 2. Provides methods to update the status of a task to either \\"in progress\\" or \\"completed\\". 3. Offers a method to get a summary of the number of tasks in each status (\\"not started\\", \\"in progress\\", \\"completed\\"). **Class Signature**: ```python class TaskManager: def __init__(self): Initializes the TaskManager with an empty task list. pass def add_task(self, task: str) -> None: Adds a new task with an initial status of \'not started\'. :param task: str - description of the task pass def update_task(self, task: str, status: str) -> None: Updates the status of an existing task. :param task: str - description of the task :param status: str - new status of the task, should be either \'in progress\' or \'completed\' :raises ValueError: if the status is invalid or the task does not exist pass def get_summary(self) -> dict: Returns a summary of the number of tasks in each status. :return: dict - a dictionary with keys \'not started\', \'in progress\', \'completed\' and their respective counts as values pass ``` **Constraints**: * The class should handle cases where tasks are updated to an invalid status or do not exist in the task list. * The `get_summary` method should always return a summary, even if no tasks have been added. * Ensure the implementation is efficient in terms of time and space complexity. **Example**: ```python tm = TaskManager() tm.add_task(\\"Buy groceries\\") tm.add_task(\\"Write code\\") tm.update_task(\\"Buy groceries\\", \\"in progress\\") print(tm.get_summary()) # Output: {\'not started\': 1, \'in progress\': 1, \'completed\': 0} tm.update_task(\\"Buy groceries\\", \\"completed\\") tm.update_task(\\"Write code\\", \\"in progress\\") tm.add_task(\\"Read book\\") print(tm.get_summary()) # Output: {\'not started\': 1, \'in progress\': 1, \'completed\': 1} ``` **Additional Notes**: - Consider edge cases such as adding the same task more than once or updating a task that was never added. - Make sure that the class methods handle any exceptions appropriately, providing useful error messages.","solution":"class TaskManager: def __init__(self): Initializes the TaskManager with an empty task list. self.tasks = {} def add_task(self, task: str) -> None: Adds a new task with an initial status of \'not started\'. :param task: str - description of the task self.tasks[task] = \\"not started\\" def update_task(self, task: str, status: str) -> None: Updates the status of an existing task. :param task: str - description of the task :param status: str - new status of the task, should be either \'in progress\' or \'completed\' :raises ValueError: if the status is invalid or the task does not exist if task not in self.tasks: raise ValueError(\\"Task does not exist\\") if status not in [\\"not started\\", \\"in progress\\", \\"completed\\"]: raise ValueError(\\"Invalid status\\") self.tasks[task] = status def get_summary(self) -> dict: Returns a summary of the number of tasks in each status. :return: dict - a dictionary with keys \'not started\', \'in progress\', \'completed\' and their respective counts as values summary = {\\"not started\\": 0, \\"in progress\\": 0, \\"completed\\": 0} for status in self.tasks.values(): summary[status] += 1 return summary"},{"question":"# Coding Assessment Question Array Formation: You are tasked with solving a problem that involves checking if an array can be formed by concatenating subarrays from another array. Specifically, you are given two arrays `arr` and `pieces`. `Arr` is a target array, and `pieces` is a list of subarrays. Each subarray in `pieces` is guaranteed to be distinct. Your objective is to determine whether `arr` can be formed by concatenating the subarrays in `pieces` in any order. Function Definition: Implement a function `can_form_array(arr, pieces)` that takes two parameters: a list of integers `arr` and a list of lists of integers `pieces`, and returns a boolean indicating if `arr` can be formed by concatenating the subarrays in `pieces`. Input: - `arr`: A list of integers. - `pieces`: A list of lists of integers. Output: - A boolean, True or False. Example: ```python >>> arr = [85, 1, 5, 11, 7, 41] >>> pieces = [[1, 5, 11], [85], [7, 41]] >>> can_form_array(arr, pieces) True >>> arr = [49, 18, 16] >>> pieces = [[16, 18, 49]] >>> can_form_array(arr, pieces) False ``` Constraints: 1. The length of `arr` will be between `1` and `100`. 2. The length of `pieces` will be between `1` and `100`. 3. The sum of all the lengths of `pieces` will be equal to the length of `arr`. 4. Each element of `arr` and each subarray of `pieces` will contain integers between `1` and `100`. Good luck!","solution":"def can_form_array(arr, pieces): arr_index_map = {num: idx for idx, num in enumerate(arr)} for piece in pieces: if piece[0] not in arr_index_map: return False start_idx = arr_index_map[piece[0]] for i in range(len(piece)): if start_idx + i >= len(arr) or arr[start_idx + i] != piece[i]: return False return True"},{"question":"# Problem Statement You are given a string containing a mix of lowercase letters and whitespace characters. Your task is to implement a function that reverses the order of the words in the string, while preserving the whitespace between words. # Function Signature ```python def reverse_words_preserving_whitespace(sentence: str) -> str: :param sentence: String containing words separated by whitespace. :return: A string where the words are reversed, but the original whitespace structure is preserved. ``` # Input - `sentence`: A string of length `n` where `1 <= n <= 10^5`. The string consists of lowercase letters and whitespace characters only. # Output - A string where the words in the original string are reversed in order, while preserving the spaces between them. # Examples ```python >>> reverse_words_preserving_whitespace(\\"hello world\\") \\"world hello\\" >>> reverse_words_preserving_whitespace(\\" this is an example \\") \\" example an is this \\" >>> reverse_words_preserving_whitespace(\\"a\\") \\"a\\" >>> reverse_words_preserving_whitespace(\\" \\") \\" \\" >>> reverse_words_preserving_whitespace(\\"one more test\\") \\"test more one\\" ``` # Constraints - You must complete the rearrangement with a time complexity of O(n). - Preserve the number of whitespace characters and their relative positions. # Additional Notes - Consider edge cases such as strings with multiple adjacent spaces or only whitespace. - Make sure your implementation does not alter the original positions of the whitespaces.","solution":"def reverse_words_preserving_whitespace(sentence: str) -> str: Reverses the words in a sentence while preserving the whitespace structure. :param sentence: String containing words separated by whitespace. :return: A string where the words are reversed, but the original whitespace structure is preserved. # Split the sentence into parts (will include whitespace) based on non-whitespace import re parts = re.split(r\'(s+)\', sentence) # Extract the words only words = [part for part in parts if not part.isspace()] # Reverse the list of words words.reverse() # Replace original words with their reversed order while keeping whitespaces intact result = [] word_index = 0 for part in parts: if part.isspace(): result.append(part) else: result.append(words[word_index]) word_index += 1 return \'\'.join(result)"},{"question":"Order Statistics: Kth Smallest Element Background Finding the k-th smallest element in a collection of elements is a classic problem in computer science known as order statistics. Various algorithms, including sorting, quickselect, and min-heaps, can solve this problem efficiently for different scenarios. Task Your task is to implement a function that finds the k-th smallest element in an unsorted array. Use the quickselect algorithm, which has an average time complexity of O(n), making it well-suited for this purpose. The function should be robust enough to handle edge cases and invalid inputs. # Function Signature ```python def kth_smallest_element(arr: list[int], k: int) -> int: Finds the k-th smallest element in an unsorted array using the quickselect algorithm. Parameters: - arr (list[int]): A non-empty list of integers. - k (int): The 1-based index of the smallest element to find. Returns: - int: The k-th smallest element in the array. ``` # Input Constraints - `arr` should be a non-empty list of integers. - `k` should be a positive integer within the range from 1 to the length of `arr`. # Output - Return the k-th smallest element in the array. - If the inputs are invalid (e.g., `k` is out of the valid range), raise a `ValueError` with an appropriate message. # Example Usage ```python # Example 1 arr = [7, 10, 4, 3, 20, 15] k = 3 print(kth_smallest_element(arr, k)) # Expected output: 7 # Example 2 arr = [1, 1, 1, 1, 1] k = 1 print(kth_smallest_element(arr, k)) # Expected output: 1 # Example 3 arr = [12, 3, 5, 7, 19] k = 4 print(kth_smallest_element(arr, k)) # Expected output: 12 # Invalid Input: k out of range arr = [1, 2, 3] k = 5 print(kth_smallest_element(arr, k)) # Expected outcome: ValueError ``` # Additional Notes - Use of built-in functions such as `sorted` is not allowed to directly solve this problem. - Implement the quickselect algorithm within the function to ensure an average time complexity of O(n).","solution":"def quickselect(arr, left, right, k): Helper function to perform the quickselect algorithm. if left == right: return arr[left] pivot_index = partition(arr, left, right) if k == pivot_index: return arr[k] elif k < pivot_index: return quickselect(arr, left, pivot_index - 1, k) else: return quickselect(arr, pivot_index + 1, right, k) def partition(arr, left, right): Helper function to partition the array. pivot = arr[right] i = left for j in range(left, right): if arr[j] <= pivot: arr[i], arr[j] = arr[j], arr[i] i += 1 arr[i], arr[right] = arr[right], arr[i] return i def kth_smallest_element(arr: list[int], k: int) -> int: if not arr: raise ValueError(\\"Array should not be empty.\\") if k < 1 or k > len(arr): raise ValueError(\\"k is out of the valid range.\\") return quickselect(arr, 0, len(arr) - 1, k - 1)"},{"question":"# Scenario Sorting and searching are fundamental operations in computer science, frequently utilized for various applications, including data analysis and algorithm optimization. This problem will test your ability to manipulate and analyze sorted data efficiently through binary search. # Problem Statement You are given a list of integers, where each integer may appear multiple times. Your task is to implement a function that returns the number of occurrences of a specific integer in the sorted list using binary search for both locating the target integer and determining its frequency. # Function Signature ```python def count_occurrences(sorted_list: list[int], target: int) -> int: pass ``` # Input - `sorted_list`: A list of integers sorted in non-decreasing order (1 ≤ len(sorted_list) ≤ 10^6). - `target`: An integer (-10^6 ≤ target ≤ 10^6) for which you need to find the number of occurrences in the `sorted_list`. # Output - An integer representing the count of occurrences of the `target` in the `sorted_list`. # Constraints - The solution should be efficient with a time complexity of O(log n) for searching operations. # Examples ```python assert count_occurrences([1, 2, 2, 2, 3, 4, 5], 2) == 3 assert count_occurrences([1, 3, 3, 3, 3, 3, 6], 3) == 5 assert count_occurrences([1, 2, 3, 4, 5, 6, 7, 8], 5) == 1 assert count_occurrences([1, 3, 3, 5, 7, 8, 9, 9], 4) == 0 ``` # Explanation 1. For the sorted list `[1, 2, 2, 2, 3, 4, 5]` with `target = 2`, the function will return 3, as the number 2 appears three times. 2. In the list `[1, 3, 3, 3, 3, 3, 6]` with `target = 3`, the function will return 5, indicating that the number 3 occurs five times. 3. For `[1, 2, 3, 4, 5, 6, 7, 8]` with `target = 5`, the return value will be 1 because 5 appears once. 4. Given `[1, 3, 3, 5, 7, 8, 9, 9]` and `target = 4`, the function will return 0 since 4 is not in the list. # Note To achieve the optimal time complexity, consider using a modified version of binary search to first locate an occurrence of the target, then determine the range of its occurrences through additional binary searches.","solution":"def count_occurrences(sorted_list: list[int], target: int) -> int: def find_leftmost_index(): left, right = 0, len(sorted_list) - 1 while left <= right: mid = (left + right) // 2 if sorted_list[mid] < target: left = mid + 1 else: right = mid - 1 return left def find_rightmost_index(): left, right = 0, len(sorted_list) - 1 while left <= right: mid = (left + right) // 2 if sorted_list[mid] > target: right = mid - 1 else: left = mid + 1 return right left_index = find_leftmost_index() right_index = find_rightmost_index() if left_index <= right_index: return right_index - left_index + 1 else: return 0"},{"question":"# Prime Factors Decomposition You need to develop a function that returns the list of distinct prime factors of a given positive integer. Function Signature ```python def prime_factors(n: int) -> list: Compute the distinct prime factors of the given positive integer. :param n: A positive integer (>= 2) :return: List of distinct prime factors in ascending order. ``` Input - `n (int)`: A positive integer (>= 2). Output - `list`: A list of distinct prime factors in ascending order. Constraints 1. The input integer must be greater than or equal to 2. 2. The function should handle inputs up to `10^6`. Performance - The function should run efficiently with a time complexity of approximately O(sqrt(n)) for factorization. Example ```python >>> prime_factors(28) [2, 7] >>> prime_factors(45) [3, 5] >>> prime_factors(97) [97] >>> prime_factors(600) [2, 3, 5] >>> prime_factors(1024) [2] ``` Additional Notes - Ensure the list of prime factors is returned in ascending order. - Consider edge cases with very large prime numbers or highly composite numbers.","solution":"def prime_factors(n: int) -> list: Compute the distinct prime factors of the given positive integer. :param n: A positive integer (>= 2) :return: List of distinct prime factors in ascending order. factors = [] # Check for the smallest prime factor 2 if n % 2 == 0: factors.append(2) while n % 2 == 0: n //= 2 # Check for all odd numbers from 3 to sqrt(n) factor = 3 while factor * factor <= n: if n % factor == 0: factors.append(factor) while n % factor == 0: n //= factor factor += 2 # If n becomes a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Graph Traversal and Shortest Path Calculation Given a `Graph` class that supports basic operations for graph traversal, improve and extend this class with additional functionalities and optimizations. # Problem Statement 1. **Implementation**: - Implement the Dijkstra algorithm for finding the shortest path from a source vertex to all other vertices. - Implement the Depth First Search (DFS) to explore all nodes and identify if the graph is connected. - Optimize the graph representation to use adjacency lists for space efficiency. 2. **Function Signature**: ```python class Graph: ... def dijkstra(self, start_vertex: int) -> dict: Finds the shortest path from start_vertex to all other vertices using Dijkstra\'s algorithm. pass def depth_first_search(self, start_vertex: int) -> bool: Performs DFS from start_vertex and returns True if the graph is connected, otherwise False. pass def add_edge(self, vertex_1: int, vertex_2: int, weight: float) -> None: Adds an edge between vertex_1 and vertex_2 with the given weight. pass ``` # Input and Output - `dijkstra`: - **Input**: An integer representing the start vertex. - **Output**: A dictionary where keys are vertices and values are the shortest path distances from the start vertex. - `depth_first_search`: - **Input**: An integer representing the start vertex. - **Output**: A boolean value indicating whether the graph is connected. - `add_edge`: - **Input**: Two integers representing the vertices to connect, and a floating point number representing the edge weight. - **Output**: None. # Constraints - The graph is represented as a set of vertices connected by weighted edges. - The number of vertices can be large, up to 1000, hence optimized algorithms are crucial. - The weights on the edges are non-negative real numbers (floating point). - Ensure the graph efficiently uses memory by employing adjacency lists. # Example ```python # Create the Graph g = Graph() # Adding Edges edges = [ (0, 1, 4), (0, 7, 8), (1, 2, 8), (1, 7, 11), (2, 3, 7), (2, 8, 2), (2, 5, 4), (3, 4, 9), (3, 5, 14), (4, 5, 10), (5, 6, 2), (6, 7, 1), (6, 8, 6), (7, 8, 7), ] for v1, v2, weight in edges: g.add_edge(v1, v2, weight) # Dijkstra Shortest Path shortest_paths = g.dijkstra(0) print(shortest_paths) # Expected: {0: 0, 1: 4, 2: 12, 3: 19, 4: 21, 5: 11, 6: 9, 7: 8, 8: 14} # Depth First Search to Check Connectivity is_connected = g.depth_first_search(0) print(is_connected) # Expected: True if the graph is connected, otherwise False ``` # Note Ensure your solution is efficient and can handle large graphs with many vertices and edges while using memory efficiently.","solution":"import heapq from collections import defaultdict class Graph: def __init__(self): self.adjacency_list = defaultdict(list) def add_edge(self, vertex_1, vertex_2, weight): self.adjacency_list[vertex_1].append((vertex_2, weight)) self.adjacency_list[vertex_2].append((vertex_1, weight)) # Assuming the graph is undirected def dijkstra(self, start_vertex): distances = {vertex: float(\'infinity\') for vertex in self.adjacency_list} distances[start_vertex] = 0 priority_queue = [(0, start_vertex)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in self.adjacency_list[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def depth_first_search(self, start_vertex): visited = set() def dfs(vertex): visited.add(vertex) for neighbor, _ in self.adjacency_list[vertex]: if neighbor not in visited: dfs(neighbor) dfs(start_vertex) return len(visited) == len(self.adjacency_list)"},{"question":"# Scenario You are building a part of a text-editing application that allows users to check their documents for certain types of formatting errors. One common formatting error to identify is the presence of extra spaces between words. # Task Implement a function to clean up a string by removing any extra spaces between words. The function should ensure that there is exactly one space between each word in the returned string. # Detailed Requirements 1. **Function**: `clean_up_spaces` - Input: A string `text` representing the document content. - Output: Returns a new string where any extra spaces between words are removed, and there is exactly one space between words. Leading and trailing spaces should also be removed. 2. Assume that the text contains only printable ASCII characters. # Constraints 1. The length of the text (n) will be `0 <= n <= 10^5`. 2. The text may contain multiple consecutive spaces between words, leading or trailing spaces. # Example Usage ```python # Example text: \\" This is a sample text. \\" cleaned_text = clean_up_spaces(\\" This is a sample text. \\") # Expected output: \\"This is a sample text.\\" # Example with no extra spaces cleaned_text = clean_up_spaces(\\"No extra spaces here.\\") # Expected output: \\"No extra spaces here.\\" # Example with multiple leading, trailing, and intermediate spaces cleaned_text = clean_up_spaces(\\" Hello world! \\") # Expected output: \\"Hello world!\\" ``` Provide the function implementation with sufficient unittests to validate the correctness of your implementation.","solution":"def clean_up_spaces(text): Returns a new string where any extra spaces between words are removed, and there is exactly one space between words. Leading and trailing spaces are also removed. words = text.strip().split() cleaned_text = \' \'.join(words) return cleaned_text"},{"question":"Spreadsheet Cell Calculation # Background: You\'ve been hired to develop an internal tool for a financial company. As part of this tool, you need to handle basic spreadsheet calculations where cell references, along with basic arithmetic operations, can be used. # Task: Create a simple spreadsheet implementation in Python that processes cell calculations based on given formulas. # Requirements: 1. You will be provided with a `Spreadsheet` class, which needs the functionality to store and compute values. 2. You need to implement a method that can evaluate cell values from given formulas referring to other cells. # Algorithm Implementation: 1. **Spreadsheet Class**: * This class will store cell data/formulas in a dictionary with cell names as keys. * It should have a function `set_cell` to set the value/formula of a given cell. * Implement a method called `get_value` to retrieve the evaluated value of a cell. 2. **Evaluation Function**: * The `get_value` method should evaluate the cell content. * If the content is a formula, it should calculate the value. * Support operations such as addition (\'+\'), subtraction (\'-\'), multiplication (\'*\'), and division (\'/\'). # Class and Function Definitions: ```python class Spreadsheet: def __init__(self): self.cells = {} def set_cell(self, cell_name: str, content: str): self.cells[cell_name] = content def get_value(self, cell_name: str): content = self.cells.get(cell_name, \\"\\") if content.isdigit() or (content.replace(\'.\', \'\', 1).isdigit() if \'.\' in content else False): return float(content) try: # Split and process formula result = eval(content, {}, {k: self.get_value(k) for k in self.cells}) return float(result) except Exception as e: raise ValueError(f\\"Error evaluating cell \'{cell_name}\': {e}\\") # Example Usage: sheet = Spreadsheet() sheet.set_cell(\\"A1\\", \\"5\\") sheet.set_cell(\\"B1\\", \\"A1 + 3\\") sheet.set_cell(\\"C1\\", \\"B1 * 2\\") result = sheet.get_value(\\"C1\\") print(result) # Output should be 16.0 ``` # Input/Output: * **Input**: Cell names and their corresponding formulas/values. * Example: ```python sheet.set_cell(\\"A1\\", \\"5\\") sheet.set_cell(\\"B1\\", \\"A1 + 3\\") sheet.set_cell(\\"C1\\", \\"B1 * 2\\") ``` * **Output**: Evaluated value of the cell. * Example Output: ```python 16.0 ``` # Constraints: * Formulas will be simplified to only use \'+\' (addition), \'-\' (subtraction), \'*\' (multiplication), and \'/\' (division). * Assume the input will be well-formed without circular references. * Handle cells without dependencies separately as independent evaluations.","solution":"class Spreadsheet: def __init__(self): self.cells = {} def set_cell(self, cell_name: str, content: str): self.cells[cell_name] = content def get_value(self, cell_name: str): content = self.cells.get(cell_name, \\"\\") if content.isdigit() or (content.replace(\'.\', \'\', 1).isdigit() if \'.\' in content else False): return float(content) try: # Replace cell references with their actual values in the formula formula = content for ref in self.cells: if ref in formula: formula = formula.replace(ref, str(self.get_value(ref))) result = eval(formula) return float(result) except Exception as e: raise ValueError(f\\"Error evaluating cell \'{cell_name}\': {e}\\")"},{"question":"# Question: Counting Valid Parentheses Strings **Scenario:** You are tasked with evaluating various strings to determine how many of them are valid parentheses strings. A valid parentheses string is defined by the following conditions: 1. An empty string is a valid parentheses string. 2. If \\"s\\" is a valid parentheses string, then \\"(\\" + \\"s\\" + \\")\\" is a valid parentheses string. 3. If \\"s1\\" and \\"s2\\" are valid parentheses strings, then \\"s1\\" + \\"s2\\" is a valid parentheses string. For example, `\\"\\"`, `\\"()\\"`, `\\"(())\\"`, and `\\"()()\\"` are all valid parentheses strings, while `\\")(\\"`, `\\"(()\\"`, and `\\"())(\\"` are not. **Your Task:** Write a Python function `count_valid_parentheses(strings: List[str]) -> int` that takes a list of strings and returns the count of strings that are valid parentheses strings according to the above conditions. **Function Signature:** ```python def count_valid_parentheses(strings: List[str]) -> int: pass ``` **Input and Output:** * **Input:** A list of strings `strings` where each string consists only of the characters `(` and `)`. * **Output:** An integer representing the count of valid parentheses strings. **Constraints:** * The length of the list `strings` is between 1 and 100. * The length of each string in the list is between 0 and 200. **Requirements:** * Validate if each string is a valid parentheses string using an efficient method. * Your solution should handle edge cases such as empty strings or strings with only one type of parentheses. **Examples:** ```python assert count_valid_parentheses([\\"(\\", \\"()\\", \\"(())\\", \\"()\\", \\"(()\\"]) == 3 # Only \\"()\\", \\"(())\\", and \\"()\\" are valid assert count_valid_parentheses([\\"\\", \\"()\\", \\"()()\\", \\"(()())\\", \\"((()\\"]) == 4 # \\"\\", \\"()\\", \\"()()\\", and \\"(()())\\" are valid assert count_valid_parentheses([\\")\\", \\"((()())\\", \\"(()))\\", \\"()()()\\"]) == 1 # Only \\"()()()\\" is valid assert count_valid_parentheses([\\"()(\\", \\")()(\\", \\"(())()\\"]) == 1 # Only \\"(())()\\" is valid ``` **Performance:** * Your solution should run efficiently for the given constraints. * Aim for a linear pass through each string when validating. **Tips:** * Use a stack-based approach to validate the parentheses strings. * Ensure that you keep track of the balance between opening and closing parentheses.","solution":"from typing import List def is_valid_parentheses(s: str) -> bool: Helper function to determine if the given string is a valid parentheses string. stack = [] for char in s: if char == \'(\': stack.append(\'(\') elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0 def count_valid_parentheses(strings: List[str]) -> int: Counts the number of valid parentheses strings in the given list. count = 0 for s in strings: if is_valid_parentheses(s): count += 1 return count"},{"question":"# Question: Simulating a Simple Traffic Light System In this task, you need to implement a function that simulates a simple traffic light system over a given number of cycles. A cycle is defined as the series of transitions through the colors green, yellow, and red. The transition timings for these colors are fixed as follows: - Green: 60 seconds - Yellow: 5 seconds - Red: 55 seconds The function should return a list representing the color of the traffic light at each second over the given number of cycles. # Function Signature ```python def traffic_light_simulation(cycles: int) -> list: pass ``` # Input * `cycles`: A positive integer representing the number of full cycles to simulate. # Output * Returns a list of strings where each string represents the color of the traffic light (\'Green\', \'Yellow\', or \'Red\') for each second in the simulation. # Constraints * The input parameter `cycles` should be a positive integer. * The function should raise a `ValueError` if `cycles` is not positive. # Example ```python >>> traffic_light_simulation(1) [\'Green\', \'Green\', ..., \'Green\', \'Yellow\', \'Yellow\', ..., \'Yellow\', \'Red\', \'Red\', ..., \'Red\'] >>> traffic_light_simulation(2) [\'Green\', \'Green\', ..., \'Green\', \'Yellow\', \'Yellow\', ..., \'Yellow\', \'Red\', \'Red\', ..., \'Red\', \'Green\', \'Green\', ..., \'Green\', \'Yellow\', \'Yellow\', ..., \'Yellow\', \'Red\', \'Red\', ..., \'Red\'] ``` (Note: The ellipses (...) indicate repeated values according to the defined durations.) # Edge Cases Handle the following: * `traffic_light_simulation(0)` raises `ValueError: Cycles must be a positive integer.` # Requirements * Ensure the function follows the constraints provided. * Ensure the efficiency of the function even for a large number of cycles. * Include appropriate error handling for edge cases. Good luck!","solution":"def traffic_light_simulation(cycles: int) -> list: if cycles <= 0: raise ValueError(\\"Cycles must be a positive integer.\\") # Define the durations for each color timings = { \'Green\': 60, \'Yellow\': 5, \'Red\': 55 } # Generate the list of colors for one cycle one_cycle = [\'Green\'] * timings[\'Green\'] + [\'Yellow\'] * timings[\'Yellow\'] + [\'Red\'] * timings[\'Red\'] # Repeat the cycle for the given number of cycles full_simulation = one_cycle * cycles return full_simulation"},{"question":"# Question You have been provided with a partially implemented **Circular Queue** in Python. Your task is to provide an additional method called `peek_nth`. This method should retrieve the n-th element in the queue without removing it. **Function Signature**: ```python def peek_nth(self, n: int) -> int | None: pass ``` # Instructions 1. **Function Details**: - **Input**: An integer `n` - **Output**: Returns the value of the n-th element in the queue, where `n` is 1-based indexing. Returns `None` if `n` is out of bounds (i.e., n <= 0 or n > current size of the queue). - **Constraints**: - You should not remove elements from the queue. Only retrieve their values. 2. **Examples**: ```python # Example 1 queue = CircularQueue(3) queue.enqueue(1) queue.enqueue(2) queue.enqueue(3) assert queue.peek_nth(1) == 1 assert queue.peek_nth(2) == 2 assert queue.peek_nth(3) == 3 queue.enqueue(4) # this will overwrite the oldest element (1) assert queue.peek_nth(1) == 2 assert queue.peek_nth(2) == 3 assert queue.peek_nth(3) == 4 # Example 2 queue = CircularQueue(5) assert queue.peek_nth(1) is None queue.enqueue(1) queue.enqueue(2) queue.enqueue(3) assert queue.peek_nth(1) == 1 assert queue.peek_nth(2) == 2 assert queue.peek_nth(3) == 3 assert queue.peek_nth(4) is None ``` 3. **Guidelines**: - Ensure that your implementation does not remove items from the queue or alter their ordering. - Handle edge cases, such as when the queue is empty. Implement the `peek_nth` method in the `CircularQueue` class: # Code to Implement ```python class CircularQueue: def __init__(self, k: int): self.queue = [None] * k self.head = self.tail = -1 self.capacity = k def enqueue(self, value: int) -> bool: if (self.tail + 1) % self.capacity == self.head: self.head = (self.head + 1) % self.capacity # overwrite if self.head == -1: self.head = 0 self.tail = (self.tail + 1) % self.capacity self.queue[self.tail] = value return True def dequeue(self) -> int | None: if self.head == -1: return None # queue is empty result = self.queue[self.head] if self.head == self.tail: self.head = self.tail = -1 # queue becomes empty else: self.head = (self.head + 1) % self.capacity return result def peek_nth(self, n: int) -> int | None: if n <= 0 or self.head == -1 or n > self.size(): return None index = (self.head + n - 1) % self.capacity return self.queue[index] def size(self) -> int: if self.head == -1: return 0 if self.tail >= self.head: return self.tail - self.head + 1 return self.capacity - self.head + self.tail + 1 ```","solution":"class CircularQueue: def __init__(self, k: int): self.queue = [None] * k self.head = self.tail = -1 self.capacity = k def enqueue(self, value: int) -> bool: if (self.tail + 1) % self.capacity == self.head: self.head = (self.head + 1) % self.capacity # overwrite if self.head == -1: self.head = 0 self.tail = (self.tail + 1) % self.capacity self.queue[self.tail] = value return True def dequeue(self) -> int | None: if self.head == -1: return None # queue is empty result = self.queue[self.head] if self.head == self.tail: self.head = self.tail = -1 # queue becomes empty else: self.head = (self.head + 1) % self.capacity return result def peek_nth(self, n: int) -> int | None: Returns the value of the n-th element in the queue, where n is 1-based indexing. Returns None if n is out of bounds. if n <= 0 or self.head == -1 or n > self.size(): return None index = (self.head + n - 1) % self.capacity return self.queue[index] def size(self) -> int: Returns the current number of elements in the queue. if self.head == -1: return 0 if self.tail >= self.head: return self.tail - self.head + 1 return self.capacity - self.head + self.tail + 1"},{"question":"# Problem Description You are given a list of integers, and you need to determine if there are three distinct elements in the list that sum up to zero. Your task is to implement an algorithm that finds such a triplet if it exists. # Requirements 1. Implement a method `find_triplet_sum_zero` to identify a triplet (if any) that sums to zero. 2. If such a triplet is found, return the triplet in an ascending order list. 3. If no such triplet exists, return an empty list. # Input and Output * **Input**: * A list of integers, e.g., `[-1, 0, 1, 2, -1, -4]`. * **Output**: * A list of three integers that sum up to zero, sorted in ascending order, e.g., `[-1, 0, 1]`. * An empty list if no such triplet exists. # Constraints * The list may contain negative elements and duplicates. * The total number of elements in the list will be at most 10^3. # Example Scenarios 1. **Example 1**: * Input: `[-1, 0, 1, 2, -1, -4]` * Expected Output: `[-1, -1, 2]` or `[-1, 0, 1]` (order can vary as long as triplet is correct) 2. **Example 2**: * Input: `[1, 2, -2, -1]` * Expected Output: `[]` # Implementation Template ```python def find_triplet_sum_zero(nums): Find a triplet in the list that sums up to zero. :param nums: List of integers. :return: List of three integers in ascending order forming a triplet that sums to zero, or an empty list. nums.sort() n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue l, r = i + 1, n - 1 while l < r: triplet_sum = nums[i] + nums[l] + nums[r] if triplet_sum == 0: return [nums[i], nums[l], nums[r]] elif triplet_sum < 0: l += 1 else: r -= 1 return [] ``` Implement the `find_triplet_sum_zero` function to correctly identify and return a triplet that sums to zero according to the requirements. If no such triplet exists, ensure the function returns an empty list.","solution":"def find_triplet_sum_zero(nums): Find a triplet in the list that sums up to zero. :param nums: List of integers. :return: List of three integers in ascending order forming a triplet that sums to zero, or an empty list. nums.sort() n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue l, r = i + 1, n - 1 while l < r: triplet_sum = nums[i] + nums[l] + nums[r] if triplet_sum == 0: return [nums[i], nums[l], nums[r]] elif triplet_sum < 0: l += 1 else: r -= 1 return []"},{"question":"# Problem Statement You are given a list of strings representing a series of log entries. Each log entry contains a timestamp (in the format \'YYYY-MM-DD HH:MM:SS\') followed by an event description. Your task is to write a function that returns the log entry with the earliest timestamp. # Function Signature ```python def earliest_log_entry(logs: List[str]) -> str: ``` # Input - `logs`: A list of strings where each string represents a log entry. The log entries will be non-empty and follow the format `\'YYYY-MM-DD HH:MM:SS Event_description\'`. # Output - Returns a string, the log entry that has the earliest timestamp. # Constraints - The list of logs will have at least one log entry and at most 10^4 log entries. - Each timestamp is unique. # Example ```python logs = [ \\"2023-09-15 14:48:00 Server rebooted\\", \\"2023-09-15 10:15:00 User login\\", \\"2023-09-14 09:00:00 System backup completed\\", \\"2023-09-15 16:30:00 Error: Disk quota exceeded\\" ] print(earliest_log_entry(logs)) # Expected Output: \\"2023-09-14 09:00:00 System backup completed\\" ``` # Instructions 1. Implement the function `earliest_log_entry(logs: List[str]) -> str`. 2. Your function should correctly identify and return the log entry with the earliest timestamp. 3. Parse the timestamps accurately and consider the comparison of different timestamp components (year, month, day, hour, minute, second) to find the earliest one. 4. Ensure efficiency and correctness of your solution given the constraints. 5. Write clear and readable code, with comments explaining key steps if necessary. # Notes - You do not need to handle input parsing; assume the function will be called with a properly formatted list of log entries. - Consider edge cases such as logs spanning multiple years or logs with events occurring in quick succession.","solution":"from typing import List def earliest_log_entry(logs: List[str]) -> str: Returns the log entry with the earliest timestamp. # Split each log entry to extract the timestamp and sort the logs based on the timestamp. logs.sort(key=lambda log: log[:19]) # Consider only the timestamp part for sorting return logs[0] # The first entry after sorting will be the earliest"},{"question":"# Fibonacci Sequence Generator **Context:** A company is developing a feature for generating a series of Fibonacci numbers, which are critical in various algorithms and mathematical computations. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, typically starting with 0 and 1. **Task:** Implement the `generate_fibonacci_sequence` function in Python, which generates the first `n` Fibonacci numbers. **Function Signature:** ```python def generate_fibonacci_sequence(n: int) -> list[int]: pass ``` **Input:** * `n` (int): An integer representing the number of Fibonacci numbers to generate. Must be a non-negative integer. **Output:** * Returns a list of integers representing the first `n` Fibonacci numbers. **Constraints:** * If `n` is less than 0, raise a `ValueError` with the message \\"The number of elements should be a non-negative integer\\". * Handle edge cases where `n` is 0 or 1 appropriately. **Performance Requirements:** * Ensure the implementation is efficient and can handle up to a significant number of Fibonacci numbers. **Examples:** ```python >>> generate_fibonacci_sequence(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> generate_fibonacci_sequence(1) [0] >>> generate_fibonacci_sequence(0) [] >>> generate_fibonacci_sequence(-5) Traceback (most recent call last): ... ValueError: The number of elements should be a non-negative integer ``` Ensure the function is efficient and handles edge cases appropriately while providing accurate results.","solution":"def generate_fibonacci_sequence(n: int) -> list[int]: Generates the first n Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate. Must be a non-negative integer. Returns: list[int]: A list containing the first n Fibonacci numbers. Raises: ValueError: If the input n is a negative integer. if n < 0: raise ValueError(\\"The number of elements should be a non-negative integer\\") # Base cases if n == 0: return [] elif n == 1: return [0] # Start the sequence with the first two Fibonacci numbers fib_sequence = [0, 1] # Generate the rest of the sequence for _ in range(2, n): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence"},{"question":"Question # Context: You are designing an elevator system for a building with `N` floors. The elevator can be either on \\"Idle,\\" \\"Moving Up,\\" or \\"Moving Down\\" states. The system receives requests to pick up passengers at specific floors or requests to drop off passengers at specific floors. The elevator starts on the ground floor (Floor 0) and needs to process the incoming requests in a way that optimizes the total travel time. # Task: Write a Python class `Elevator` that manages the state and processes the requests. The class should have methods to add pickup and drop-off requests, and to move the elevator one step at a time. The `move` method should make one step in the optimal direction based on pending requests. # Class Definition: ```python class Elevator: def __init__(self, total_floors: int): pass # Initialize the elevator state with the total number of floors. def add_pickup_request(self, floor: int) -> None: pass # Add a pickup request from the given floor. def add_dropoff_request(self, floor: int) -> None: pass # Add a drop-off request at the given floor. def move(self) -> int: pass # Make one move and return the current floor of the elevator. ``` # Input: - `total_floors`: An integer representing the total number of floors in the building. - Methods `add_pickup_request` and `add_dropoff_request` will receive a floor number as input. - Method `move` will make the elevator change its position. # Output: - Method `move` will return the current floor number after the move. # Constraints: - The building has `1 <= N <= 100` floors. - Requests are guaranteed to be within the range of the building floors. - The system should work with multiple requests and optimize total travel time. # Example: ```python elevator = Elevator(10) elevator.add_pickup_request(3) elevator.add_dropoff_request(7) elevator.add_pickup_request(2) # Moving the elevator step by step print(elevator.move()) # Expected output: 1 print(elevator.move()) # Expected output: 2 print(elevator.move()) # Expected output: 3 print(elevator.move()) # Expected output: 4 ``` # Requirements: - The elevator should move optimally based on pending requests. - Handle multiple pickup and drop-off requests. - Optimize the solution to reduce the total travel time. - Consider idle state handling when there are no requests.","solution":"class Elevator: def __init__(self, total_floors: int): self.total_floors = total_floors self.current_floor = 0 self.requests_up = set() self.requests_down = set() self.direction = \'Idle\' # \'Idle\', \'Up\', \'Down\' def add_pickup_request(self, floor: int) -> None: if floor > self.current_floor: self.requests_up.add(floor) elif floor < self.current_floor: self.requests_down.add(floor) # If the request is on the same floor, we do not need to add it, as we are already there def add_dropoff_request(self, floor: int) -> None: self.add_pickup_request(floor) def _set_direction(self): if not self.requests_up and not self.requests_down: self.direction = \'Idle\' elif self.direction in [\'Idle\', \'Up\']: if self.requests_up: self.direction = \'Up\' elif self.requests_down: self.direction = \'Down\' elif self.direction == \'Down\': if self.requests_down: self.direction = \'Down\' elif self.requests_up: self.direction = \'Up\' def _move_up(self): self.current_floor += 1 if self.current_floor in self.requests_up: self.requests_up.remove(self.current_floor) def _move_down(self): self.current_floor -= 1 if self.current_floor in self.requests_down: self.requests_down.remove(self.current_floor) def move(self) -> int: self._set_direction() if self.direction == \'Up\': self._move_up() elif self.direction == \'Down\': self._move_down() return self.current_floor"},{"question":"# Context Graph theory is widely used in various computational problems, including network analysis, pathfinding, and optimization. Efficiently managing and traversing graphs is crucial for developing solutions to complex scenarios. # Problem Statement You need to implement a class `Graph` that encapsulates an undirected graph and provides methods to determine specific properties and characteristics of the graph. Specifically, you need to implement methods for `is_connected` and `shortest_path`. # Function Specifications: is_connected: **Input**: - No input parameters. **Output**: - Returns `True` if the graph is connected, otherwise `False`. shortest_path: **Input**: - `start` (int): The starting vertex. - `end` (int): The target vertex. **Output**: - Returns the shortest path between `start` and `end` as a list of vertices. If no path exists, returns an empty list. # Example: ```python g = Graph() g.add_edge(0, 1) g.add_edge(0, 2) g.add_edge(1, 2) g.add_edge(2, 3) g.add_edge(3, 4) # Should print True as all the nodes are connected print(g.is_connected()) # Output: True # Should print the shortest path from node 0 to node 4 print(g.shortest_path(0, 4)) # Output: [0, 2, 3, 4] ``` # Class Definition and Methods: The `Graph` class should have the following methods: 1. `add_edge(self, v1, v2)`: Adds an edge between vertices `v1` and `v2`. 2. `is_connected(self)`: Checks if the graph is connected. 3. `shortest_path(self, start, end)`: Finds the shortest path from `start` to `end`. # Constraints: - The graph has a maximum of 1000 vertices. - You may assume vertex IDs are non-negative integers. # Additional Notes: - Avoid using graph libraries; implement your graph using basic data structures. - Consider edge cases such as disconnected graphs or isolated vertices.datatables()","solution":"from collections import defaultdict, deque class Graph: def __init__(self): self.graph = defaultdict(list) def add_edge(self, v1, v2): self.graph[v1].append(v2) self.graph[v2].append(v1) def is_connected(self): if not self.graph: return True # An empty graph is trivially connected visited = set() def dfs(v): visited.add(v) for neighbor in self.graph[v]: if neighbor not in visited: dfs(neighbor) start_vertex = next(iter(self.graph)) dfs(start_vertex) return len(visited) == len(self.graph) def shortest_path(self, start, end): if start not in self.graph or end not in self.graph: return [] queue = deque([(start, [start])]) visited = set([start]) while queue: current_vertex, path = queue.popleft() if current_vertex == end: return path for neighbor in self.graph[current_vertex]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, path + [neighbor])) return []"},{"question":"# Question: Find the Longest Increasing Subsequence You\'re working as a developer for an educational software company. One of the modules you\'re working on involves analyzing student performance metrics to identify trends. You need to identify periods of continuous improvement for each student, represented as the longest increasing subsequence in their performance scores. Implement a function `longest_increasing_subsequence(arr: list[int]) -> int` that returns the length of the longest increasing subsequence in the given list of integers representing performance scores. # Input - A list of integers `arr` representing performance scores. # Output - An integer representing the length of the longest increasing subsequence. # Constraints - The input list can contain positive integers. - The length of the list, `len(arr)`, can be at most 10^3. - The longest increasing subsequence is a list of integers `a1, a2, ..., ak` such that `a1 < a2 < ... < ak` and they appear in the same order in the original list. # Example ```python # Example 1 arr = [10, 9, 2, 5, 3, 7, 101, 18] longest_increasing_subsequence(arr) # Expected Output: 4 (The longest increasing subsequence is [2, 3, 7, 101]) # Example 2 arr = [0, 1, 0, 3, 2, 3] longest_increasing_subsequence(arr) # Expected Output: 4 (The longest increasing subsequence is [0, 1, 2, 3]) # Example 3 arr = [7, 7, 7, 7, 7, 7, 7] longest_increasing_subsequence(arr) # Expected Output: 1 (The longest increasing subsequence is [7]) # Example 4 arr = [50, 3, 10, 7, 40, 80] longest_increasing_subsequence(arr) # Expected Output: 4 (The longest increasing subsequence is [3, 7, 40, 80]) ``` # Notes - Consider edge cases such as the empty list or having only one unique performance score. - Aim for an efficient solution that can handle the upper limit of the input list size. - Common techniques to solve this problem efficiently include dynamic programming or using a combination of binary search and dynamic programming to achieve a time complexity of O(N log N). This question should blend seamlessly with the provided set, maintaining similar style, complexity, and scope, and challenge participants to implement an efficient solution.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the given list of integers. if not arr: return 0 n = len(arr) lis = [1] * n # Initialize LIS values for all indexes # Compute optimized LIS values in bottom up manner for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return the maximum value in lis[] return max(lis)"},{"question":"# Task Create a function that checks if a given integer is a power of two using bit manipulation techniques. # Requirements Write a function `is_power_of_two` that takes an integer as input and returns a boolean indicating whether the integer is a power of two. # Inputs: * `n` (integer): The integer to be checked. # Outputs: * `True` if the integer `n` is a power of two, otherwise `False`. # Constraints: 1. The input is a 32-bit signed integer. 2. The function should not use built-in functions or conditional statements to directly check if a number is a power of two. # Example ```python def is_power_of_two(n: int) -> bool: Check if an integer is a power of two. Parameters: n (int): The integer to check Returns: bool: True if the integer is a power of two, False otherwise Examples: >>> is_power_of_two(1) True >>> is_power_of_two(2) True >>> is_power_of_two(3) False >>> is_power_of_two(4) True >>> is_power_of_two(16) True >>> is_power_of_two(18) False pass # Test cases assert is_power_of_two(1) == True, \\"Test case 1 failed\\" assert is_power_of_two(2) == True, \\"Test case 2 failed\\" assert is_power_of_two(3) == False, \\"Test case 3 failed\\" assert is_power_of_two(4) == True, \\"Test case 4 failed\\" assert is_power_of_two(16) == True, \\"Test case 5 failed\\" assert is_power_of_two(18) == False, \\"Test case 6 failed\\" assert is_power_of_two(0) == False, \\"Test case 7 failed\\" assert is_power_of_two(-2) == False, \\"Test case 8 failed\\" print(\\"All test cases pass\\") ``` Write the function `is_power_of_two` based on the above description and make sure it passes the provided test cases.","solution":"def is_power_of_two(n: int) -> bool: Check if an integer is a power of two using bit manipulation. Parameters: n (int): The integer to check Returns: bool: True if the integer is a power of two, False otherwise Examples: >>> is_power_of_two(1) True >>> is_power_of_two(2) True >>> is_power_of_two(3) False >>> is_power_of_two(4) True >>> is_power_of_two(16) True >>> is_power_of_two(18) False return n > 0 and (n & (n - 1)) == 0"},{"question":"# Coding Question: Identify Rotated Array\'s Pivot Index Given a rotated sorted array of unique integers, your task is to implement two functions to identify the pivot point (index) and determine whether a given target is present in the array. 1. **Function 1: `find_pivot_index(arr: list[int]) -> int`**: * **Input**: A list of unique integers `arr` that has been rotated at some pivot unknown to you beforehand. * **Output**: The index of the pivot element (the smallest element in the rotated array). * **Constraints**: The list has at least one element. * **Note**: The array is originally sorted in ascending order and then rotated. 2. **Function 2: `search_in_rotated_array(arr: list[int], target: int) -> int`**: * **Input**: A list of unique integers `arr` that has been rotated at some pivot unknown to you beforehand and an integer `target`. * **Output**: The index of `target` in the rotated array if present; otherwise, return `-1`. * **Constraints**: The list has at least one element. # Example ```python # Test case 1 arr = [4, 5, 6, 7, 0, 1, 2] assert find_pivot_index(arr) == 4 assert search_in_rotated_array(arr, 0) == 4 assert search_in_rotated_array(arr, 3) == -1 # Test case 2 arr = [12, 15, 18, 2, 3, 6] assert find_pivot_index(arr) == 3 assert search_in_rotated_array(arr, 15) == 1 assert search_in_rotated_array(arr, 6) == 5 # Test case 3 arr = [1] assert find_pivot_index(arr) == 0 assert search_in_rotated_array(arr, 1) == 0 assert search_in_rotated_array(arr, 0) == -1 ``` # Your implementation should handle edge cases such as: * Arrays that are not rotated. * Arrays with a single element. * The target being the pivot element itself. * Arrays where the pivot is at the beginning or the end.","solution":"def find_pivot_index(arr): Finds the index of the smallest element (pivot) in the rotated sorted array. left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] > arr[right]: left = mid + 1 else: right = mid return left def search_in_rotated_array(arr, target): Searches for the target in the rotated sorted array and returns its index, or -1 if not found. pivot = find_pivot_index(arr) n = len(arr) def binary_search(left, right): while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1 if target >= arr[pivot] and target <= arr[n - 1]: return binary_search(pivot, n - 1) else: return binary_search(0, pivot - 1)"},{"question":"# Implement a Simple File System Objective You are required to implement a basic file system that supports file creation, writing data to files, reading data from files, and listing directory contents. # Task Description 1. **Class Implementation**: - Implement a `FileSystem` class to manage directories and files. 2. **Methods**: - `__init__(self)`: Initializes the file system with root directory. - `create_file(self, path: str) -> bool`: Creates a new file at the given path. Returns `True` if successful, `False` if the file already exists or if an invalid path is provided. - `write_to_file(self, path: str, data: str) -> bool`: Writes data to the file at the given path. Returns `True` if successful, `False` if the file does not exist. - `read_file(self, path: str) -> Optional[str]`: Reads and returns the data from the file at the given path, or `None` if the file does not exist. - `list_directory(self, path: str) -> List[str]`: Lists all files and subdirectories in the given directory. If the directory does not exist, returns an empty list. 3. **Assumptions**: - Path strings will always start with a forward slash `/` representing the root directory. - There will not be any nested directories; all files and directories will be created directly within the root directory. # Constraints - Only basic string operations and data structures (lists, dictionaries) are to be used. - Path strings and file contents are limited to a maximum length of `10^3` characters. - Operations should handle up to `10^3` files. # Input Format - File system commands will be provided as a list of commands: ```python commands = [ (\\"create\\", \\"/file1\\"), (\\"write\\", \\"/file1\\", \\"Hello World\\"), (\\"read\\", \\"/file1\\"), (\\"list\\", \\"/\\") ] ``` Each command is a tuple, where: * `\\"create\\"` command is followed by a file path. * `\\"write\\"` command is followed by a file path and the data to write to the file. * `\\"read\\"` command is followed by a file path. * `\\"list\\"` command is followed by a directory path that must be `/`. # Output Format - Output should be a list of results for each `\\"read\\"` and `\\"list\\"` operation: ```python results = [ \\"Hello World\\", # Result of read operation. [\\"file1\\"] # Result of list operation. ] ``` # Example ```python commands = [ (\\"create\\", \\"/file1\\"), (\\"write\\", \\"/file1\\", \\"Hello World\\"), (\\"read\\", \\"/file1\\"), (\\"list\\", \\"/\\") ] # Expected Output: # [ # \\"Hello World\\", # Result of read operation. # [\\"file1\\"] # Result of list operation. # ] ``` Implement the FileSystem class and accompanying methods to execute the provided commands and produce the expected results.","solution":"from typing import List, Optional, Dict class FileSystem: def __init__(self): self.files = {} def create_file(self, path: str) -> bool: if not path.startswith(\'/\') or path in self.files: return False self.files[path] = \'\' return True def write_to_file(self, path: str, data: str) -> bool: if path not in self.files: return False self.files[path] = data return True def read_file(self, path: str) -> Optional[str]: return self.files.get(path, None) def list_directory(self, path: str) -> List[str]: if path != \'/\': return [] return sorted([file.strip(\'/\') for file in self.files.keys()]) def execute_commands(commands: List) -> List: fs = FileSystem() results = [] for command in commands: if command[0] == \\"create\\": fs.create_file(command[1]) elif command[0] == \\"write\\": fs.write_to_file(command[1], command[2]) elif command[0] == \\"read\\": results.append(fs.read_file(command[1])) elif command[0] == \\"list\\": results.append(fs.list_directory(command[1])) return results"},{"question":"# Circular Array Rotation You need to design a function that performs right rotations on an array. Given an array and a number of rotations, you should return a new array that results from performing the specified number of right rotations. **Problem Statement:** Write a function `circular_array_rotation` to rotate the elements of the input array to the right k times. - The first parameter `array` is a list of integers representing the input array. - The second parameter `k` is an integer representing the number of right rotations to be performed. **Function Signature:** ```python def circular_array_rotation(array: list[int], k: int) -> list[int]: ``` **Input Format:** - `array`: a list of integers of length n (0 ≤ n ≤ 10^5). - `k`: an integer (0 ≤ k ≤ 10^9). **Output Format:** - Return a list of integers representing the array after k right rotations. **Examples:** ```python >>> circular_array_rotation([1, 2, 3, 4, 5], 2) [4, 5, 1, 2, 3] >>> circular_array_rotation([7, 8, 9], 3) [7, 8, 9] >>> circular_array_rotation([1, 2, 3], 0) [1, 2, 3] ``` **Constraints:** - The length of `array` will be in the range [0, 10^5]. - The number of rotations `k` can be very large, up to 10^9. You should optimize your solution to handle even the largest values of `k` efficiently. **Scoring:** - Correctness: Solutions will be judged on accurate completion of the specified rotations. - Efficiency: Solutions must efficiently handle the upper limits of input size and rotation number, especially when `k` is significantly larger than the length of the array.","solution":"def circular_array_rotation(array: list[int], k: int) -> list[int]: Rotates the array to the right k times and returns the resulting array. n = len(array) if n == 0 or k == 0: return array # To handle cases where k is larger than n k = k % n return array[-k:] + array[:-k]"},{"question":"# Problem Statement Implement a function `longest_common_substring_matrix(str1: str, str2: str) -> str` that computes and returns the longest common substring between two given strings `str1` and `str2` using a dynamic programming matrix. # Implementation Details * **Input Format**: Two strings `str1` and `str2`. The length of each string can be up to `10^4` characters. * **Output Format**: A string representing the longest common substring between `str1` and `str2`. * **Constraints**: * If there are multiple longest common substrings, return any one of them. * The implementation must use dynamic programming for efficient computation. * **Performance Requirements**: * The function should run efficiently even for large strings up to the given length constraints. # Example ```python >>> longest_common_substring_matrix(\\"abcde\\", \\"abfde\\") \\"ab\\" >>> longest_common_substring_matrix(\\"helloworld\\", \\"lowor\\") \\"lowor\\" >>> longest_common_substring_matrix(\\"abc\\", \\"def\\") \\"\\" >>> longest_common_substring_matrix(\\"ababc\\", \\"abc\\") \\"abc\\" ``` # Explanation The function `longest_common_substring_matrix` builds a dynamic programming matrix where `dp[i][j]` represents the length of the longest common suffix of the substrings `str1[0:i]` and `str2[0:j]`. By tracking the maximum length among all cells in this matrix, you can identify the longest common substring efficiently. The function should handle large input sizes by carefully managing the matrix dimensions and accessing only relevant portions of the input strings.","solution":"def longest_common_substring_matrix(str1: str, str2: str) -> str: Computes the longest common substring between two given strings str1 and str2 using a dynamic programming matrix. if not str1 or not str2: return \\"\\" m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] max_length = 0 end_index_str1 = 0 for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > max_length: max_length = dp[i][j] end_index_str1 = i return str1[end_index_str1 - max_length: end_index_str1]"},{"question":"# Question: Compute the nth Catalan Number Catalan numbers form a sequence of natural numbers that have many applications in combinatorial mathematics. The nth Catalan number can be computed using the recursive formula: [ C_0 = 1 ] [ C_n = sum_{i=0}^{n-1} C_i cdot C_{n-1-i} ] or using the direct binomial coefficient formula: [ C_n = frac{1}{n+1} binom{2n}{n} ] Task Write a function `catalan_number(n: int) -> int` that returns the nth Catalan number. Function Signature ```python def catalan_number(n: int) -> int: pass ``` Input - `n` (int): The position of the Catalan number to generate. Must be a non-negative integer. Output - (int): The nth Catalan number. Constraints - `0 <= n <= 30` (Ensure efficient computation for the values within the given range) - Raise a `ValueError` for any input value of `n` that is negative. Examples ```python >>> catalan_number(0) 1 >>> catalan_number(1) 1 >>> catalan_number(2) 2 >>> catalan_number(3) 5 >>> catalan_number(4) 14 >>> catalan_number(-1) Traceback (most recent call last): ... ValueError: param `n` must be non-negative ``` Performance Requirements Your function should operate efficiently within the given constraint range. Automated precomputation or memoization can be used to optimize performance if necessary.","solution":"def catalan_number(n: int) -> int: if n < 0: raise ValueError(\\"param `n` must be non-negative\\") # Base case if n == 0: return 1 # Using the binomial coefficient formula for direct calculation: C = [0] * (n + 1) C[0] = 1 # C0 is 1 for i in range(1, n + 1): C[i] = 0 for j in range(i): C[i] += C[j] * C[i - 1 - j] return C[n]"},{"question":"# Coding Assessment Question You are asked to develop a system that processes a list of messages, where each message consists of a sender, a receiver, and a content. Your task is to create a function that identifies and counts spam messages based on given criteria. # Task Write a function `count_spam_messages(messages: List[Dict[str, str]], spam_keywords: List[str]) -> int` that: 1. Accepts a list of messages, where each message is a dictionary with keys: `sender`, `receiver`, and `content`. 2. Accepts a list of spam keywords. 3. Returns the total number of spam messages, where a message is considered spam if its content contains any of the spam keywords (case-insensitive). # Constraints - Each message dictionary contains three keys: `sender`, `receiver`, and `content`. All keys have values as strings. - The function should be case insensitive when checking for spam keywords in messages. # Input - `messages` (List[Dict[str, str]]): A list of message dictionaries. - `spam_keywords` (List[str]): A list of keywords considered to be spam. # Output - Returns an integer representing the number of messages identified as spam. # Example ```python messages = [ {\\"sender\\": \\"alice@example.com\\", \\"receiver\\": \\"bob@example.com\\", \\"content\\": \\"Win a free iPhone now!\\"}, {\\"sender\\": \\"carol@example.com\\", \\"receiver\\": \\"david@example.com\\", \\"content\\": \\"Meeting at 10am\\"}, {\\"sender\\": \\"mallory@example.com\\", \\"receiver\\": \\"eve@example.com\\", \\"content\\": \\"Congratulations! You have won a lottery!\\"}, {\\"sender\\": \\"bob@example.com\\", \\"receiver\\": \\"alice@example.com\\", \\"content\\": \\"Make big money working from home!\\"}, ] spam_keywords = [\\"win\\", \\"free\\", \\"congratulations\\", \\"money\\"] print(count_spam_messages(messages, spam_keywords)) ``` *Output*: ``` 3 ``` # Implementation Notes - Ensure your function correctly handles diverse content cases (e.g., different capitalizations). - Consider using any efficient string matching or searching libraries as needed. - Pay careful attention to edge cases, such as empty messages or absence of spam keywords.","solution":"from typing import List, Dict def count_spam_messages(messages: List[Dict[str, str]], spam_keywords: List[str]) -> int: Counts the number of spam messages based on given spam keywords. Args: messages (List[Dict[str, str]]): List of messages where each message is a dictionary with keys: \'sender\', \'receiver\', and \'content\'. spam_keywords (List[str]): List of spam keywords. Returns: int: Number of messages identified as spam. # Convert spam keywords to lowercase for case insensitive comparison spam_keywords_lower = [keyword.lower() for keyword in spam_keywords] spam_count = 0 for message in messages: content_lower = message[\\"content\\"].lower() # Check if any of the spam keywords are in the message content if any(keyword in content_lower for keyword in spam_keywords_lower): spam_count += 1 return spam_count"},{"question":"# Coding Assessment Question: Merge Sorted Lists You are required to implement a function that merges two given sorted linked lists and returns a new sorted linked list. The function should maintain the order and eliminate any duplicate values. # Task Implement a function `merge_sorted_lists(head1: ListNode, head2: ListNode) -> ListNode` that merges two sorted linked lists into a single sorted linked list containing distinct elements. # Inputs * Two linked list heads `head1` and `head2`. # Outputs * A head of a new sorted linked list that contains the values from both input lists, with duplicates removed. # Constraints * The input linked lists are sorted in non-decreasing order. * The output linked list should also be sorted in non-decreasing order. * Avoid using extra space for another linked list. * Only unique elements should be present in the resulting list. # Function Signature ```python class ListNode: def __init__(self, x: int = 0, next: \'ListNode\' = None): self.val = x self.next = next def merge_sorted_lists(head1: ListNode, head2: ListNode) -> ListNode: pass ``` # Example ```python # Example 1 # Input List 1: 1 -> 3 -> 5 # Input List 2: 1 -> 2 -> 4 # Output List: 1 -> 2 -> 3 -> 4 -> 5 # Example 2 # Input List 1: 10 -> 20 -> 30 # Input List 2: 5 -> 10 -> 15 # Output List: 5 -> 10 -> 15 -> 20 -> 30 # Helper function to create linked lists for testing purpose def create_linked_list(vals): head = ListNode(vals[0]) current = head for val in vals[1:]: current.next = ListNode(val) current = current.next return head # Test Example 1 head1 = create_linked_list([1, 3, 5]) head2 = create_linked_list([1, 2, 4]) output = merge_sorted_lists(head1, head2) # Expected: 1 -> 2 -> 3 -> 4 -> 5 # Test Example 2 head1 = create_linked_list([10, 20, 30]) head2 = create_linked_list([5, 10, 15]) output = merge_sorted_lists(head1, head2) # Expected: 5 -> 10 -> 15 -> 20 -> 30 ``` # Performance Requirements * Time Complexity: O(n + m), where `n` and `m` are the lengths of the input linked lists. * Space Complexity: O(1), apart from the space required to store the merged list. # Notes * The input linked lists should be non-empty. * You may assume the ListNode class has been provided. * The result should be returned as a new linked list without modifying the input lists.","solution":"class ListNode: def __init__(self, x: int = 0, next: \'ListNode\' = None): self.val = x self.next = next def merge_sorted_lists(head1: ListNode, head2: ListNode) -> ListNode: dummy = ListNode() current = dummy while head1 and head2: if head1.val < head2.val: if not current.next or current.next.val != head1.val: current.next = ListNode(head1.val) current = current.next head1 = head1.next elif head1.val > head2.val: if not current.next or current.next.val != head2.val: current.next = ListNode(head2.val) current = current.next head2 = head2.next else: if not current.next or current.next.val != head1.val: current.next = ListNode(head1.val) current = current.next head1 = head1.next head2 = head2.next # Process the remaining nodes in head1 while head1: if not current.next or current.next.val != head1.val: current.next = ListNode(head1.val) current = current.next head1 = head1.next # Process the remaining nodes in head2 while head2: if not current.next or current.next.val != head2.val: current.next = ListNode(head2.val) current = current.next head2 = head2.next return dummy.next def create_linked_list(vals): if not vals: return None head = ListNode(vals[0]) current = head for val in vals[1:]: current.next = ListNode(val) current = current.next return head def linked_list_to_list(head): result = [] while head: result.append(head.val) head = head.next return result"},{"question":"# Problem Statement: You are given an array of integers where each value represents the height of a vertical line drawn at that index on a Cartesian plane. The task is to find the maximum area of water that can be contained between two of these lines. You are to implement a function `max_container_area` that returns this maximum area. # Input: - An array of integers `heights` where each integer is between 0 and 10^4, and the length of the array is between 2 and 10^5. # Output: - An integer representing the maximum area of water that can be contained. # Constraints: - The height of the lines (integers in the array) will be non-negative. - The length of the array will be at least 2. Function Signature: ```python def max_container_area(heights: list[int]) -> int: pass ``` # Example: ```python assert max_container_area([1,8,6,2,5,4,8,3,7]) == 49 assert max_container_area([1,1]) == 1 assert max_container_area([4,3,2,1,4]) == 16 ``` # Additional Context: This problem is inspired from the \\"Container With Most Water\\" problem, which involves finding two lines that together with the x-axis forms a container, such that the container contains the most water. # Notes: - You should consider an optimal approach that respects the constraints, like the two-pointer technique, to ensure efficiency. - Think about how the width and heights of the container walls affect the overall area.","solution":"def max_container_area(heights: list[int]) -> int: Returns the maximum area of water that can be contained between two lines. left, right = 0, len(heights) - 1 max_area = 0 while left < right: # Calculate the area with the current left and right pointers height = min(heights[left], heights[right]) width = right - left current_area = height * width # Update the maximum area if the current one is larger max_area = max(max_area, current_area) # Move the pointer for the shorter line inward if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"Question # Scenario You have been assigned to implement a system that processes sequences of student grades and identifies significant trends. The goal is to find the longest contiguous subarray where the grades strictly increase and return its length. The sequences could be large, so efficiency in finding the solution is crucial. # Task Implement a function: ```python def longest_increasing_subarray(grades: List[int]) -> int: Find the length of the longest contiguous subarray with strictly increasing grades. ``` # Input * A list of integers `grades` (1 <= len(grades) <= 100,000; 0 <= grades[i] <= 100). # Output * Return an integer representing the length of the longest contiguous subarray where the grades are in strictly increasing order. # Constraints 1. The grades must be strictly increasing (each subsequent grade greater than the previous one). 2. The function should handle large input sizes efficiently. # Example ```python assert longest_increasing_subarray([2, 2, 2, 2, 2]) == 1 assert longest_increasing_subarray([1, 3, 5, 4, 7]) == 3 assert longest_increasing_subarray([10, 20, 30, 10, 0, 50, 60, 70]) == 4 ``` # Notes 1. The problem requires finding the maximum length of any increasing subarray. Hence, if the input has no strictly increasing section, the result should be 1 (each individual grade is considered a subarray of length 1). 2. Consider optimized approaches to handle the input efficiently, given the constraint of up to 100,000 grades. 3. Edge cases such as all elements being the same or all elements in descending order should be well thought out.","solution":"from typing import List def longest_increasing_subarray(grades: List[int]) -> int: if not grades: return 0 max_length = 1 current_length = 1 for i in range(1, len(grades)): if grades[i] > grades[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"# Sorting an Array of 0s, 1s, and 2s You are tasked with implementing a function to sort an array of size `n` which consists only of 0s, 1s, and 2s. Your solution should be efficient in terms of both time and space complexity. Function Signature ```python def sort012(arr: list[int]) -> list[int]: pass ``` Description 1. The function `sort012` receives an array `arr` containing only the integers 0, 1, and 2. 2. It returns the sorted array with all 0s, 1s, and 2s in non-decreasing order. 3. Aim to perform the sorting in a single pass with minimal space usage. Input - A single list `arr` of length `n`, where (1 leq n leq 10^6). - All elements in `arr` will be either 0, 1, or 2. Output - A list of integers representing the sorted array. Constraints - The function should handle input efficiently within the provided bounds. - The function should use constant extra space (not accounting for the input array itself). Performance Requirements - Overall time complexity should be kept around (O(n)). # Example ```python print(sort012([0, 2, 1, 2, 0, 1, 0, 2, 1])) Output: [0, 0, 0, 1, 1, 1, 2, 2, 2] print(sort012([2, 1, 0])) Output: [0, 1, 2] print(sort012([0, 0, 0, 0, 0])) Output: [0, 0, 0, 0, 0] ``` # Edge Cases 1. **Single element arrays**: Return the array as is. 2. **Arrays with only one type of element**: Return the same array. 3. **Arrays with mixed elements in various orders** should be handled efficiently within the constraints.","solution":"def sort012(arr): Sort an array of 0s, 1s, and 2s in-place and return the sorted array. low = 0 high = len(arr) - 1 mid = 0 while mid <= high: if arr[mid] == 0: arr[low], arr[mid] = arr[mid], arr[low] low += 1 mid += 1 elif arr[mid] == 1: mid += 1 else: arr[high], arr[mid] = arr[mid], arr[high] high -= 1 return arr"},{"question":"# K-Means Clustering Algorithm Implementation **Problem Statement:** As a data scientist, one common task you encounter is segmenting data into distinct clusters. K-Means is a widely used clustering method to partition data into K clusters based on feature similarity. Your task is to implement the K-Means clustering algorithm from scratch. **Requirements:** 1. Implement a function `k_means` that takes the dataset (`data`), the number of clusters (`k`), the maximum number of iterations (`max_iterations`), and a tolerance (`tol`). 2. The function should return the cluster centroids and the assignments of each data point to the clusters. 3. Ensure the implementation efficiently handles cases where the data is large. **Function Signature:** ```python def k_means(data: np.ndarray, k: int, max_iterations: int = 300, tol: float = 1e-4) -> Tuple[np.ndarray, np.ndarray]: ... ``` **Input:** - `data`: An (N x M) numpy array where N is the number of data points and M is the number of features. - `k`: An integer, the number of clusters. - `max_iterations`: An integer, the maximum number of iterations (default is 300). - `tol`: A float, the tolerance for convergence (default is 1e-4). **Output:** - `centroids`: A (k x M) numpy array of cluster centroids. - `assignments`: An (N,) numpy array where each element is the index of the assigned cluster for each data point. **Constraints:** - The dataset `data` will have at least one data point and at least one feature. - The number of clusters `k` will be less than or equal to the number of data points. - The solution must converge within the given maximum iterations or once the change in centroids is less than the specified tolerance. **Performance Requirements:** 1. The algorithm should handle large datasets efficiently. 2. Ensure that the centroids update correctly and convergence checks are robust. **Example:** ```python import numpy as np data = np.array([ [1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0], [8.0, 2.0], [10.0, 2.0], [9.0, 3.0] ]) k = 2 centroids, assignments = k_means(data, k) print(centroids) print(assignments) # Expected output (approximate): # Centroids: # [[1.16666667 1.46666667] # [8.5 5.66666667]] # Assignments: # [0 0 1 1 0 1 1 1 1] ``` **Note:** - Use NumPy for array and matrix operations. - Initialize the centroids by randomly selecting `k` unique data points from the dataset. - Use Euclidean distance as the metric for clustering. - Optionally, you may include helper functions to facilitate the computation of distances and centroid updates.","solution":"import numpy as np def k_means(data: np.ndarray, k: int, max_iterations: int = 300, tol: float = 1e-4) -> tuple: Performs K-Means clustering on the given data. Parameters: - data (np.ndarray): The dataset (N x M) where N is the number of samples and M is the number of features. - k (int): The number of clusters. - max_iterations (int): The maximum number of iterations. - tol (float): The tolerance for convergence. Returns: - centroids (np.ndarray): The final centroids (k x M). - assignments (np.ndarray): The cluster assignments for each data point (N,). def initialize_centroids(data, k): indices = np.random.choice(data.shape[0], k, replace=False) return data[indices] def assign_clusters(data, centroids): distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2) return np.argmin(distances, axis=1) def update_centroids(data, assignments, k): new_centroids = np.array([data[assignments == i].mean(axis=0) for i in range(k)]) return new_centroids centroids = initialize_centroids(data, k) for _ in range(max_iterations): assignments = assign_clusters(data, centroids) new_centroids = update_centroids(data, assignments, k) if np.all(np.abs(new_centroids - centroids) < tol): break centroids = new_centroids return centroids, assignments"},{"question":"# Coding Challenge # Problem Statement Create a Python function called `rotate_and_find` that takes an input array of unique integers that has been rotated an unknown number of times and a target integer. The function will return the index of the target integer in the rotated array. If the target is not found, it should return -1. Your solution must have a time complexity of O(log n). # Input * A list of unique integers `nums` which is a rotated sorted array. * An integer `target` which is the value to search for in the array. # Output * An integer representing the index of the `target`. If the target does not exist in the array, return -1. # Constraints * The input list `nums` will have at least one integer. * The length of `nums` will be between 1 and 10^5. * The array `nums` is non-empty and was originally sorted in ascending order before being rotated. # Example ```python def rotate_and_find(nums: List[int], target: int) -> int: pass # Example usage: assert rotate_and_find([4, 5, 6, 7, 0, 1, 2], 0) == 4 assert rotate_and_find([4, 5, 6, 7, 0, 1, 2], 3) == -1 assert rotate_and_find([1], 0) == -1 assert rotate_and_find([1], 1) == 0 ``` # Instructions * Implement the `rotate_and_find` function. * Ensure the solution has a time complexity of O(log n). * Handle edge cases such as single-element arrays and arrays where the target does not exist. * You can use any helper functions if necessary, but avoid changing the input array. # Hints * Consider the properties of the rotated sorted array to devise your search algorithm. * Using a modified binary search can help maintain the required time complexity. # Performance considerations * Ensure the algorithm processes large inputs efficiently. * The solution must handle rotations and different target values correctly within the specified constraints.","solution":"def rotate_and_find(nums, target): Finds the index of target in the rotated sorted array nums. If the target is not found, returns -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid if nums[left] <= nums[mid]: # Left side is sorted if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: # Right side is sorted if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"# Matrix Diagonal Sum Challenge You are given a class `Matrix` that supports initialization and basic operations on a 2D matrix of integers. Your task is to enhance this Matrix implementation with a new method that calculates the sum of the main diagonal elements. # Requirements 1. Implement a method `diagonal_sum` which returns the sum of the main diagonal elements of the matrix. 2. Ensuring your method correctly handles square matrices where the number of rows equals the number of columns. # Input - There are no inputs passed directly to your method. The matrix is stored within the class instance. # Output - The method should return an integer which is the sum of the main diagonal elements. # Example ```python # Matrix instance m m = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # The matrix looks like this: # [1, 2, 3] # [4, 5, 6] # [7, 8, 9] # Calling your diagonal_sum method m.diagonal_sum() # Output should be: 15 (1 + 5 + 9) ``` # Constraints 1. The matrix will always be square (n x n). 2. Avoid modifying existing methods or matrix structure. 3. Ensure your method can handle matrices with both positive and negative integers efficiently.","solution":"class Matrix: def __init__(self, matrix): Initialize the Matrix with a 2D list of integers. self.matrix = matrix def diagonal_sum(self): Returns the sum of the main diagonal elements of the matrix. return sum(self.matrix[i][i] for i in range(len(self.matrix)))"},{"question":"# Matrix Rotator You are given a 2D matrix of integers, and your task is to implement functions which rotate the matrix clockwise and counter-clockwise by 90 degrees. 1. **`rotate_clockwise(matrix: List[List[int]]) -> List[List[int]]`**: - Input: A 2D list `matrix` representing the matrix to be rotated. - Output: A 2D list representing the matrix rotated by 90 degrees clockwise. 2. **`rotate_counter_clockwise(matrix: List[List[int]]) -> List[List[int]]`**: - Input: A 2D list `matrix` representing the matrix to be rotated. - Output: A 2D list representing the matrix rotated by 90 degrees counter-clockwise. # Constraints - Each `matrix` will have `m` rows and `n` columns, where `1 ≤ m, n ≤ 50`. - The matrix elements will be integers in the range `-1000 ≤ matrix[i][j] ≤ 1000`. # Example ```python # Example usage: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(rotate_clockwise(matrix)) # Output should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] print(rotate_counter_clockwise(matrix)) # Output should be: # [ # [3, 6, 9], # [2, 5, 8], # [1, 4, 7] # ] ``` # Notes - Ensure the functions handle matrices of various dimensions properly. - Avoid using in-built library functions that directly perform the rotation. Implement the rotation operations manually to demonstrate understanding of matrix manipulations.","solution":"from typing import List def rotate_clockwise(matrix: List[List[int]]) -> List[List[int]]: Rotates the matrix 90 degrees clockwise. rows, cols = len(matrix), len(matrix[0]) rotated_matrix = [[0] * rows for _ in range(cols)] for i in range(rows): for j in range(cols): rotated_matrix[j][rows - 1 - i] = matrix[i][j] return rotated_matrix def rotate_counter_clockwise(matrix: List[List[int]]) -> List[List[int]]: Rotates the matrix 90 degrees counter-clockwise. rows, cols = len(matrix), len(matrix[0]) rotated_matrix = [[0] * rows for _ in range(cols)] for i in range(rows): for j in range(cols): rotated_matrix[cols - 1 - j][i] = matrix[i][j] return rotated_matrix"},{"question":"# Sorting Custom Objects Based on Multiple Criteria Context You are given a list of student objects, where each student has a name, a grade, and an age. You need to sort these students first by grade (descending), and in case of ties, by age (ascending). Finally, if the grade and age are the same for multiple students, they should be sorted by name in lexicographical order (ascending). Objective Write a Python function to sort a list of student objects based on the specified criteria. Implement the custom comparator and ensure the sort is stable. Class Definition ```python class Student: def __init__(self, name, grade, age): self.name = name self.grade = grade self.age = age def __repr__(self): return f\\"Student(name=\'{self.name}\', grade={self.grade}, age={self.age})\\" ``` Core Implementation Requirements 1. Define a function `sort_students(students: List[Student]) -> List[Student]` that takes a list of `Student` objects and returns a new list of `Student` objects sorted based on the aforementioned criteria. 2. Implement a custom comparator or use a key-based sorting approach to achieve the desired order. Example Here is an example of how the `sort_students` function should be implemented and used: ```python def sort_students(students): return sorted(students, key=lambda student: (-student.grade, student.age, student.name)) if __name__ == \\"__main__\\": students = [ Student(\\"Alice\\", 90, 20), Student(\\"Bob\\", 85, 21), Student(\\"Charlie\\", 90, 19), Student(\\"David\\", 85, 22), Student(\\"Eve\\", 90, 20) ] sorted_students = sort_students(students) for student in sorted_students: print(student) ``` Expected Output The following should be the output of the example usage above: ``` Student(name=\'Charlie\', grade=90, age=19) Student(name=\'Alice\', grade=90, age=20) Student(name=\'Eve\', grade=90, age=20) Student(name=\'Bob\', grade=85, age=21) Student(name=\'David\', grade=85, age=22) ``` Your task is to complete the `sort_students` function to meet the specified sorting requirements.","solution":"from typing import List class Student: def __init__(self, name, grade, age): self.name = name self.grade = grade self.age = age def __repr__(self): return f\\"Student(name=\'{self.name}\', grade={self.grade}, age={self.age})\\" def sort_students(students: List[Student]) -> List[Student]: return sorted(students, key=lambda student: (-student.grade, student.age, student.name))"},{"question":"# New Question: You are tasked with creating a staircase using wood planks. Each plank can either represent a step up (length of 1 unit vertically and 1 unit horizontally) or a flat step (length of 2 units horizontally). Write a function `count_staircase_ways(height: int) -> int` that calculates the number of ways to build a staircase of a certain height where each step must either be a standard step up or a flat step. # Input: * An integer `height` representing the total height of the staircase. # Output: * An integer representing the number of ways to build the staircase with the given constraints. # Constraints: * The height of the staircase will be between 0 and 100 inclusive. * Each step up increases the height by 1 unit. * Each flat step increases the height by 0 units but extends the staircase horizontally by 2 units. # Requirements: * Optimize the function for time efficiency within the specified constraint. # Example: ```python assert count_staircase_ways(3) == 3 assert count_staircase_ways(5) == 8 assert count_staircase_ways(10) == 89 ``` # Notes: * This problem requires an understanding of combinatorial patterns and the ability to efficiently calculate the number of possible sequences. * Consider edge cases where the height is very small and examine the patterns emerging from different heights. * Think about recursive definitions and memoization techniques to enhance the performance of the solution.","solution":"def count_staircase_ways(height: int) -> int: Returns the number of ways to build a staircase of a given height using either a step up (1 unit vertically and 1 unit horizontally) or a flat step (0 units vertically and 2 units horizontally). if height == 0: return 1 if height == 1: return 1 # Use dynamic programming to store the number of ways to build staircases of each height dp = [0] * (height + 1) dp[0] = 1 dp[1] = 1 for i in range(2, height + 1): dp[i] = dp[i-1] + dp[i-2] return dp[height]"},{"question":"# Question: Longest Repeated Substring Scenario In the field of bioinformatics, the analysis of DNA sequences often involves searching for repeated patterns or motifs. One way to measure such patterns is by finding the longest repeated substring within a DNA sequence. A repeated substring is a sequence of characters that appears at least twice in the input string. # Task Write a function: ```python def longest_repeated_substring(dna_sequence: str) -> str: Find and return the longest repeated substring within the given DNA sequence. If there is no repeated substring, return an empty string. Args: dna_sequence (str): A string representing the DNA sequence composed of characters \'A\', \'C\', \'G\', \'T\'. Returns: str: The longest repeated substring within the provided DNA sequence. ``` # Input - `dna_sequence`: A string representing the DNA sequence. Length will be between 1 and 20,000 characters. # Output - The function should return a string representing the longest substring that repeats within the input DNA sequence. - If no repeated substring exists, return an empty string. # Constraints - The DNA sequence will only contain characters \'A\', \'C\', \'G\', \'T\'. - There may be multiple repeated substrings of the same maximum length; any one of them can be the correct output. # Performance Requirements - Ensure the solution efficiently handles sequences up to the maximum length. - Aim to optimize time complexity to manage large input sizes effectively. # Examples - `>>> longest_repeated_substring(\\"ATCGATCGA\\")` - Output: \\"ATCGA\\" - `>>> longest_repeated_substring(\\"GATCAGATCA\\")` - Output: \\"GATCA\\" - `>>> longest_repeated_substring(\\"ACGTACGTGCGT\\")` - Output: \\"ACGT\\" - `>>> longest_repeated_substring(\\"AGTC\\")` - Output: \\"\\" # Notes - Consider utilizing suffix arrays or trees for an optimized solution. - Ensure handling edge cases such as very short or highly repetitive sequences without compromising performance. # Hints - Use efficient data structures to manage and compare substrings. - Preprocessing steps like constructing suffix arrays can significantly reduce computational time. - Consider the sliding window approach or binary search to narrow down the search space for the longest repeated substring effectively.","solution":"def longest_repeated_substring(dna_sequence: str) -> str: Find and return the longest repeated substring within the given DNA sequence. If there is no repeated substring, return an empty string. Args: dna_sequence (str): A string representing the DNA sequence composed of characters \'A\', \'C\', \'G\', \'T\'. Returns: str: The longest repeated substring within the provided DNA sequence. def has_repeated_substring_of_length(L): Check if there is any repeated substring of length L. seen = set() for i in range(len(dna_sequence) - L + 1): substring = dna_sequence[i:i + L] if substring in seen: return True seen.add(substring) return False left, right = 1, len(dna_sequence) while left <= right: mid = (left + right) // 2 if has_repeated_substring_of_length(mid): left = mid + 1 else: right = mid - 1 max_length = right seen = {} for i in range(len(dna_sequence) - max_length + 1): substring = dna_sequence[i:i + max_length] if substring in seen: return substring seen[substring] = True return \\"\\""},{"question":"# Coding Question Context You are developing a library management system. One of the functionalities required is to recommend books based on the user\'s reading history and preferences. The system needs to process the user\'s reading data and return book titles that align with their interests. Task Write a function `recommend_books` that recommends books to a user based on their reading history and preferences. Your function should be robust, handle edge cases, and be efficient in processing the data. Function Signature ```python def recommend_books(user_id: int, reading_history: List[str], preferences: Dict[str, int], max_recommendations: int = 5) -> List[str]: pass ``` Requirements 1. **Input**: * `user_id` (int): Unique identifier for the user. * `reading_history` (List[str]): A list of book titles previously read by the user. * `preferences` (Dict[str, int]): A dictionary where keys are genres, and values are the user\'s preference score for that genre. * `max_recommendations` (int): Maximum number of book recommendations to return. 2. **Output**: * A list of recommended book titles (List[str]). 3. **Constraints**: * Use the reading history to infer genres the user likes. * Prioritize recommendations based on the user\'s preference scores. * Ensure that no book already read by the user is recommended again. * Return up to `max_recommendations` book titles. * If there are not enough books to recommend, return as many as possible. * Handle cases where the reading history or preferences might be empty. 4. **Performance**: * Ensure that the function performs efficiently, even with large input data. Example: ```python if __name__ == \\"__main__\\": reading_history = [\\"Book A\\", \\"Book B\\", \\"Book C\\"] preferences = {\\"Fiction\\": 5, \\"Mystery\\": 3, \\"Sci-Fi\\": 4} recommendations = recommend_books(user_id=1, reading_history=reading_history, preferences=preferences) print(recommendations) ``` Notes: * Implement logging for error conditions and recommendation process. * Write clean and readable code with adequate comments.","solution":"from typing import List, Dict import logging # Set up logging logging.basicConfig(level=logging.INFO) # Assume we have a database of books and their genres BOOK_DATABASE = { \\"Book D\\": \\"Fiction\\", \\"Book E\\": \\"Mystery\\", \\"Book F\\": \\"Sci-Fi\\", \\"Book G\\": \\"Romance\\", \\"Book H\\": \\"Fiction\\", \\"Book I\\": \\"Sci-Fi\\", \\"Book J\\": \\"Mystery\\", # Add more books as needed } def get_books_by_genre(genre: str) -> List[str]: Helper function to get books by genre return [book for book, book_genre in BOOK_DATABASE.items() if book_genre == genre] def recommend_books(user_id: int, reading_history: List[str], preferences: Dict[str, int], max_recommendations: int = 5) -> List[str]: Recommend books to a user based on their reading history and preferences. logging.info(f\\"Starting book recommendations for user_id: {user_id}\\") recommended_books = [] # If reading history and preferences are empty, return an empty list if not reading_history and not preferences: logging.warning(\\"Reading history and preferences both are empty. Returning empty list.\\") return [] # Prioritize books based on user\'s preferences sorted_preferences = sorted(preferences.items(), key=lambda item: item[1], reverse=True) already_read_books_set = set(reading_history) for genre, preference_score in sorted_preferences: if len(recommended_books) >= max_recommendations: break genre_books = get_books_by_genre(genre) for book in genre_books: if book not in already_read_books_set and book not in recommended_books: recommended_books.append(book) if len(recommended_books) >= max_recommendations: break logging.info(f\\"Recommended books: {recommended_books}\\") return recommended_books"},{"question":"# Question: Create a Custom Heap Data Structure Design and implement a custom MinHeap data structure from scratch, including fundamental operations like insert, remove, and find-minimum. Ensure efficient handling of heap properties during these operations. Requirements: 1. **Class**: Implement a `MinHeap` class. 2. **Methods**: - `insert(val: int) -> None`: Adds a new integer to the heap. - `remove() -> int`: Removes and returns the minimum element from the heap. - `find_min() -> int`: Returns the minimum element without removing it. 3. **Constraints**: - The class should use a list internally to represent the heap. - Handle cases where the heap might be empty for `remove` and `find_min` operations by raising appropriate exceptions. 4. **Performance**: - Maintain `O(log n)` time complexity for insert and remove operations. - `find_min` should operate in `O(1)` time. ```python class MinHeap: def __init__(self): Initialize an empty MinHeap. self.heap = [] def insert(self, val: int) -> None: Add a new integer to the heap. :param val: The value to be added to the heap # Your code here def remove(self) -> int: Remove and return the minimum element from the heap. :return: The minimum element :raises: IndexError if the heap is empty # Your code here def find_min(self) -> int: Return the minimum element without removing it. :return: The minimum element :raises: IndexError if the heap is empty # Your code here if __name__ == \\"__main__\\": min_heap = MinHeap() min_heap.insert(3) min_heap.insert(1) min_heap.insert(4) min_heap.insert(1) min_heap.insert(5) assert min_heap.find_min() == 1 assert min_heap.remove() == 1 assert min_heap.find_min() == 1 assert min_heap.remove() == 1 assert min_heap.find_min() == 3 assert min_heap.remove() == 3 ``` # Explanation: - **Class and Methods**: - The class `MinHeap` will handle dynamic operations on the heap. - Key methods (`insert`, `remove`, `find_min`) ensure interaction with the heap is straightforward and efficient. - **Performance**: - The `insert` operation places a new value in the appropriate position to maintain heap properties with a time complexity of `O(log n)`. - `remove` ensures the minimum value is removed, while readjusting the heap. - `find_min` permits constant-time access to the smallest value without altering the structure.","solution":"class MinHeap: def __init__(self): Initialize an empty MinHeap. self.heap = [] def insert(self, val: int) -> None: Add a new integer to the heap. :param val: The value to be added to the heap self.heap.append(val) self._bubble_up(len(self.heap) - 1) def remove(self) -> int: Remove and return the minimum element from the heap. :return: The minimum element :raises: IndexError if the heap is empty if not self.heap: raise IndexError(\\"remove from empty heap\\") self._swap(0, len(self.heap) - 1) min_val = self.heap.pop() self._bubble_down(0) return min_val def find_min(self) -> int: Return the minimum element without removing it. :return: The minimum element :raises: IndexError if the heap is empty if not self.heap: raise IndexError(\\"find_min from empty heap\\") return self.heap[0] def _bubble_up(self, index: int) -> None: parent_index = (index - 1) // 2 if parent_index >= 0 and self.heap[parent_index] > self.heap[index]: self._swap(parent_index, index) self._bubble_up(parent_index) def _bubble_down(self, index: int) -> None: left_child_index = 2 * index + 1 right_child_index = 2 * index + 2 smallest = index if (left_child_index < len(self.heap) and self.heap[left_child_index] < self.heap[smallest]): smallest = left_child_index if (right_child_index < len(self.heap) and self.heap[right_child_index] < self.heap[smallest]): smallest = right_child_index if smallest != index: self._swap(smallest, index) self._bubble_down(smallest) def _swap(self, i: int, j: int) -> None: self.heap[i], self.heap[j] = self.heap[j], self.heap[i]"},{"question":"# Throttle Control System Objective: Write a function `throttle_control` that takes two input strings `old_throttle` and `new_throttle`, each representing the throttle settings of a vehicle expressed in binary (formed only by characters \'0\' and \'1\'). The function should return the number of bit changes needed to transform `old_throttle` into `new_throttle`. Function Signature: ```python def throttle_control(old_throttle: str, new_throttle: str) -> int: ``` Input: * **old_throttle**: A string `old_throttle` consisting of binary characters (\'0\' and \'1\'). Length of this string will be between 1 and (10^6) (inclusive). * **new_throttle**: A string `new_throttle` consisting of binary characters (\'0\' and \'1\'). Length of this string will be the same as `old_throttle`. Output: * An integer representing the number of bit changes required to transform `old_throttle` into `new_throttle`. Constraints: * The length of both input strings will be the same and not exceed (10^6) characters. * Ensure your solution is optimized for performance given potential input lengths. Example: ```python >>> throttle_control(\\"1100\\", \\"1001\\") 2 >>> throttle_control(\\"1111\\", \\"0000\\") 4 >>> throttle_control(\\"101010\\", \\"101011\\") 1 ``` Notes: * The function should count the number of different corresponding bits between `old_throttle` and `new_throttle` and return this count. * Pay attention to performance considerations due to potentially large input sizes.","solution":"def throttle_control(old_throttle: str, new_throttle: str) -> int: Returns the number of bit changes needed to transform old_throttle into new_throttle. return sum(1 for o, n in zip(old_throttle, new_throttle) if o != n)"},{"question":"# String Pattern Finder: Substring Occurrence Counter **Context:** You are creating a program that identifies how many times a particular pattern appears within a given string. **Problem:** Write a function `count_occurrences(text: str, pattern: str) -> int` to count the number of times the specific pattern appears in the text. **Requirements:** 1. **Function:** * **Input:** - `text` (str): The main text to search within. - `pattern` (str): The substring pattern to count occurrences of. * **Output:** - An integer representing the count of non-overlapping occurrences of the pattern in the text. **Constraints:** * `text` length is between 1 and 1000. * `pattern` length is between 1 and 100. * Both `text` and `pattern` contain only ASCII characters. **Example:** ```python def count_occurrences(text: str, pattern: str) -> int: # Your implementation here pass # Example Usage text = \\"abracadabra\\" pattern = \\"abra\\" result = count_occurrences(text, pattern) print(result) # Output: 2 text = \\"aaaaaa\\" pattern = \\"aaa\\" result = count_occurrences(text, pattern) print(result) # Output: 2 text = \\"mississippi\\" pattern = \\"iss\\" result = count_occurrences(text, pattern) print(result) # Output: 2 # Test your solution with the example and additional cases ``` # Notes: Ensure your solution: * Accounts for overlapping and non-overlapping occurrences as per the example requirements. * Efficiently traverses the text to find matches. Good Luck!","solution":"def count_occurrences(text: str, pattern: str) -> int: Counts the number of non-overlapping occurrences of a pattern in a given text. Parameters: text (str): The main text to search within. pattern (str): The substring pattern to count occurrences of. Returns: int: The count of non-overlapping occurrences of the pattern in the text. count = 0 pos = 0 while pos < len(text): pos = text.find(pattern, pos) if pos == -1: break count += 1 pos += len(pattern) # Move past this occurrence return count"},{"question":"# Problem Statement Given an integer `n`, you are required to determine how many numbers between 1 and `n` (inclusive) have an even number of divisors. Recall that a divisor of an integer `x` is any integer `d` such that `x % d == 0`. Your task is to write a function that returns the count of such numbers. # Function Signature ```python def count_even_divisors(n: int) -> int: pass ``` # Input * `n` (1 ≤ n ≤ 10^6): An integer representing the upper limit of the range. # Output * An integer representing the count of numbers within the range [1, n] that have an even number of divisors. # Example ```python # Example case assert count_even_divisors(10) == 7 # Numbers with even divisors: 2, 3, 4, 5, 6, 7, 8, 9, 10 assert count_even_divisors(15) == 12 # Numbers with even divisors: 2-15 except perfect squares like 4, 9 assert count_even_divisors(20) == 16 # Numbers with even divisors: 2-20 except perfect squares like 4, 9, 16 ``` # Constraints and Considerations * A number has an even number of divisors if and only if it is not a perfect square. * Efficiently determine the numbers that are not perfect squares within the given range to ensure performance under the upper constraint. * Make use of mathematical properties to minimize redundant calculations.","solution":"def count_even_divisors(n: int) -> int: Returns the count of numbers between 1 and n that have an even number of divisors. A number has an even number of divisors if and only if it is not a perfect square. # Calculate the number of perfect squares between 1 and n max_square_root = int(n**0.5) perfect_squares_count = max_square_root # since there are max_square_root perfect squares from 1 to n # Total numbers between 1 and n minus the perfect squares gives us the numbers with even divisors even_divisors_count = n - perfect_squares_count return even_divisors_count"},{"question":"# Problem: String Pattern Search with Wildcards You are tasked with implementing a function `find_pattern_in_string(s: str, p: str) -> bool` that determines if a given string pattern `p` can be found in another string `s`. The pattern `p` may include the wildcard characters `?` and `*`. - The character `?` matches exactly one character in the string `s`. - The character `*` matches zero or more characters in the string `s`. Your function should return `True` if the pattern `p` matches any substring of `s` and `False` otherwise. # Requirements Implement the function `find_pattern_in_string(s: str, p: str) -> bool`, adhering to the following requirements: 1. **Input**: - `s` (string): The string in which to search for the pattern. - `p` (string): The pattern, which may include the wildcards `?` and `*`. 2. **Output**: - A boolean value indicating if the pattern `p` matches any substring of `s`. 3. **Constraints**: - The string `s` can be any combination of ASCII characters, including letters, digits, and special characters. - The pattern `p` is guaranteed to contain only ASCII characters and the wildcards `?` and `*`. - Both `s` and `p` have lengths between 1 and 1000 characters. # Examples ```python print(find_pattern_in_string(\\"abefcdgiescdfimde\\", \\"ab*cd?i*de\\")) # Output: True print(find_pattern_in_string(\\"mississippi\\", \\"mis*is*ip*\\")) # Output: True print(find_pattern_in_string(\\"abc\\", \\"a*dc\\")) # Output: False print(find_pattern_in_string(\\"abcdef\\", \\"a?c*f\\")) # Output: True print(find_pattern_in_string(\\"hello\\", \\"h*l?o\\")) # Output: True print(find_pattern_in_string(\\"hello\\", \\"h*el*?o\\")) # Output: True ``` # Additional Considerations Your solution should efficiently handle the wildcard matching, considering edge cases such as: - Patterns with consecutive `*` wildcards. - Patterns that start or end with wildcards. - Patterns containing only wildcard characters. You are not permitted to use any external regular expression libraries; the implementation must be done using basic string manipulation techniques.","solution":"def find_pattern_in_string(s: str, p: str) -> bool: Determines if the pattern p matches any substring of s, considering wildcards \'?\' and \'*\'. def match(text, pattern): dp = [[False] * (len(pattern) + 1) for _ in range(len(text) + 1)] dp[0][0] = True for j in range(1, len(pattern) + 1): if pattern[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] for i in range(1, len(text) + 1): for j in range(1, len(pattern) + 1): if pattern[j - 1] == \'*\': dp[i][j] = dp[i - 1][j] or dp[i][j - 1] elif pattern[j - 1] == \'?\' or pattern[j - 1] == text[i - 1]: dp[i][j] = dp[i - 1][j - 1] return dp[len(text)][len(pattern)] for i in range(len(s)): if match(s[i:], p): return True return False"},{"question":"# Sorting for Unique Elements in a Matrix **Context:** You are working on a text processing application that needs to analyze the frequency of characters in a given piece of text. One of the tasks involves counting the occurrence of each character and then sorting these characters based on their frequency. **Objective:** Write a function `sort_characters_by_frequency` that takes in a string and returns a list of tuples where each tuple contains a character and its frequency, sorted by frequency in descending order. In case of a tie in frequency, the characters should be sorted in alphabetical order. **Function Signature:** ```python def sort_characters_by_frequency(s: str) -> List[Tuple[str, int]]: ``` **Inputs:** * `s (str)`: A string representing the text to be analyzed. **Outputs:** * A `List[Tuple[str, int]]` where each tuple contains a character and its frequency, sorted by frequency in descending order. Characters with the same frequency should appear in alphabetical order. **Constraints:** * The input string `s` can contain any characters including spaces, punctuation, and numbers. * The length of `s` will not exceed 10,000 characters. * The comparison of characters should be case-sensitive, meaning \'A\' and \'a\' are considered different characters. **Example Usage:** ```python text = \\"abracadabra\\" result = sort_characters_by_frequency(text) print(result) # Output: [(\'a\', 5), (\'b\', 2), (\'r\', 2), (\'c\', 1), (\'d\', 1)] ``` **Notes:** * Consider edge cases such as an empty string or a string with all unique characters. * Ensure your solution efficiently handles the upper constraint of the input length.","solution":"from typing import List, Tuple from collections import Counter def sort_characters_by_frequency(s: str) -> List[Tuple[str, int]]: Returns a list of tuples where each tuple contains a character and its frequency, sorted by frequency in descending order. Ties are broken alphabetically. # Count the frequency of each character in the string frequency = Counter(s) # Sort the items first by frequency (descending) then alphabetically sorted_items = sorted(frequency.items(), key=lambda item: (-item[1], item[0])) return sorted_items"},{"question":"# Coding Assessment Question Scenario In the world of data processing, text parsing plays a significant role in understanding and organizing information extracted from various sources. As a coding challenge, you need to write a function that takes a string containing mathematical expressions and variables, extracts the individual components, and returns the result in a specified format. Task Write a function `parse_expression` that parses a given string containing a mathematical expression with variables, ensuring it adheres to specific constraints. The function should extract numbers (integer and float), variable names, and operators, and return them in a list. Requirements 1. The string can contain: - Numbers (integer and float). - Variable names (containing only alphabetic characters). - Operators: `+`, `-`, `*`, `/`, `^`. 2. The function should not segment numbers incorrectly (e.g., \\"12.34\\" should be extracted as a single float, not \\"12\\", \\".\\", \\"34\\"). 3. The function should throw a `ValueError` with the message \\"Invalid character in expression\\" if it encounters any character other than the ones specified above. Function Signature ```python def parse_expression(expression: str) -> list: pass ``` Inputs - `expression` (str): A string containing a mathematical expression with variables (e.g. `\\"3a + 4b*2 - c/5\\"`). Outputs - list: A list of strings, each representing a number, variable, or operator extracted from the input string. Constraints - The input string will only contain alphabetic characters, digits, spaces, and operators as specified. - There will be no invalid combinations like multiple continuous operators (e.g., \\"++\\", \\"--\\"). - Numbers can be positive or negative but will not appear immediately after another number (e.g., \\"4-3\\" is not valid, it would be \\"4 - 3\\"). Example ```python >>> parse_expression(\\"3a + 4b*2 - c/5\\") [\'3\', \'a\', \'+\', \'4\', \'b\', \'*\', \'2\', \'-\', \'c\', \'/\', \'5\'] >>> parse_expression(\\"2.5a - 3.14b + x^2 / y\\") [\'2.5\', \'a\', \'-\', \'3.14\', \'b\', \'+\', \'x\', \'^\', \'2\', \'/\', \'y\'] >>> parse_expression(\\"4 + 5 ? 2\\") Traceback (most recent call last): ... ValueError: Invalid character in expression ``` Implement this function and ensure it handles all edge cases and constraints as specified.","solution":"import re def parse_expression(expression: str) -> list: Parses a mathematical expression containing numbers, variables, and operators. Args: - expression (str): The input expression string. Returns: - list: A list of strings representing numbers, variables, and operators. Raises: - ValueError: If an invalid character is found within the expression. # Define the allowed characters as regex token_pattern = re.compile(r\'d+.d+|d+|[a-zA-Z]+|[+-*/^]\') # Find all matches using the regex pattern tokens = token_pattern.findall(expression) # Iterate through the expression to check for all valid characters for char in expression: if not re.match(r\'[d.+-*/^s]|[a-zA-Z]\', char): raise ValueError(\\"Invalid character in expression\\") return tokens"},{"question":"# Sum of Unique Elements in a List Write a function that takes a list of integers and returns the sum of elements that appear only once in the list. Your implementation should efficiently handle the problem by utilizing appropriate data structures to keep track of the element counts. Function Signature ```python def sum_of_unique_elements(nums: list) -> int: ``` Input - `nums` (list): A list of integers. Constraints: -10^4 ≤ nums[i] ≤ 10^4, 1 ≤ len(nums) ≤ 10^4 Output - (int): The sum of elements that appear only once in the list. If there are no unique elements, return 0. Constraints - Your function should raise a `TypeError` if the input is not a list of integers. - Ensure that the function works efficiently for large input lists within the specified range. Examples ```python print(sum_of_unique_elements([1, 2, 2, 3, 4, 4, 5])) # Output: 9 (1 + 3 + 5) print(sum_of_unique_elements([5, 5, 5, 5, 5])) # Output: 0 print(sum_of_unique_elements([-1, 2, -1, 3, 4, 3])) # Output: 6 (2 + 4) print(sum_of_unique_elements([10, 20, 30, 40])) # Output: 100 (10 + 20 + 30 + 40) print(sum_of_unique_elements([])) # Output: 0 print(sum_of_unique_elements([1, 1, 2, 2, 3, 3])) # Output: 0 ``` Notes - Edge cases such as an empty list or a list with all duplicate elements should be handled appropriately. - Utilize appropriate data structures such as dictionaries or sets to keep track of element counts for efficient computation. - Be mindful of the function\'s performance, especially for large input lists.","solution":"from collections import Counter def sum_of_unique_elements(nums: list) -> int: # Ensure the input is a list of integers if not isinstance(nums, list) or not all(isinstance(n, int) for n in nums): raise TypeError(\\"Input must be a list of integers\\") # Use Counter to count the frequency of each element in the list counts = Counter(nums) # Sum only the elements that appear exactly once result = sum(num for num, count in counts.items() if count == 1) return result"},{"question":"# Problem Statement You need to determine whether a sequence of integers is a subsequence of another sequence occurring in the same relative order, but not necessarily consecutively. # Function Signature ```python def is_subsequence(subseq: list[int], seq: list[int]) -> bool: # Your code implementation here ``` # Input 1. **subseq** (list of integers): The sequence to be checked as a subsequence. * 0 <= len(subseq) <= 1,000 * -10^6 <= subseq[i] <= 10^6 2. **seq** (list of integers): The main sequence in which to look for the subsequence. * 0 <= len(seq) <= 10,000 * -10^6 <= seq[i] <= 10^6 # Output * **bool**: Returns `True` if `subseq` is a subsequence of `seq`, otherwise `False`. # Constraints * Both inputs will be valid lists of integers. * The function should be optimized for performance. # Examples ```python assert is_subsequence([1, 3, 5], [1, 2, 3, 4, 5]) == True assert is_subsequence([1, 4, 5], [1, 2, 3, 4, 5]) == True assert is_subsequence([2, 6], [1, 2, 3, 4, 5]) == False assert is_subsequence([], [1, 2, 3, 4, 5]) == True assert is_subsequence([3, 2, 1], [1, 2, 3, 4, 5]) == False ``` # Explanation * For the first example, [1, 3, 5] is a subsequence of [1, 2, 3, 4, 5] in the same relative order. * For the second example, [1, 4, 5] is also a subsequence of [1, 2, 3, 4, 5]. * For the third example, [2, 6] is not a subsequence as 6 does not appear in the main sequence. * For the fourth example, an empty subsequence is always a valid subsequence. * For the fifth example, [3, 2, 1] is not a subsequence of [1, 2, 3, 4, 5] as the order is not preserved.","solution":"def is_subsequence(subseq: list[int], seq: list[int]) -> bool: Determines whether `subseq` is a subsequence of `seq`. it = iter(seq) return all(item in it for item in subseq)"},{"question":"# Question: Implement a Custom Object Sorting Algorithm Consider a list of custom objects where each object represents a student with the following attributes: `name` (string), `age` (integer), and `grade` (float). Your task is to write a function that sorts the list of students in descending order by `grade`, and in case of a tie, it sorts by `name` in alphabetical order. **Function Signature:** ```python def sort_students(students: list[dict]) -> list[dict]: pass ``` **Input:** * `students`: A list of dictionaries where each dictionary represents a student with the following keys: - `name`: a string representing the student\'s name. - `age`: an integer representing the student\'s age. - `grade`: a float representing the student\'s grade. **Output:** * Return a new list of dictionaries where the students are sorted based on the criteria specified. **Constraints:** * The input list can contain up to (10^4) students. * Strings will only contain uppercase and lowercase letters. * Grades will be between 0.0 and 4.0 inclusive. * Ages will be between 10 and 100 inclusive. **Examples:** ```python students = [ {\\"name\\": \\"Alice\\", \\"age\\": 20, \\"grade\\": 3.5}, {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"grade\\": 3.7}, {\\"name\\": \\"Charlie\\", \\"age\\": 21, \\"grade\\": 3.7}, {\\"name\\": \\"David\\", \\"age\\": 23, \\"grade\\": 3.2} ] sorted_students = sort_students(students) # Expected Output: # [ # {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"grade\\": 3.7}, # {\\"name\\": \\"Charlie\\", \\"age\\": 21, \\"grade\\": 3.7}, # {\\"name\\": \\"Alice\\", \\"age\\": 20, \\"grade\\": 3.5}, # {\\"name\\": \\"David\\", \\"age\\": 23, \\"grade\\": 3.2} # ] students = [ {\\"name\\": \\"Eve\\", \\"age\\": 25, \\"grade\\": 3.0}, {\\"name\\": \\"Frank\\", \\"age\\": 22, \\"grade\\": 2.5}, ] sorted_students = sort_students(students) # Expected Output: # [ # {\\"name\\": \\"Eve\\", \\"age\\": 25, \\"grade\\": 3.0}, # {\\"name\\": \\"Frank\\", \\"age\\": 22, \\"grade\\": 2.5} # ] students = [] sorted_students = sort_students(students) # Expected Output: # [] ```","solution":"def sort_students(students: list) -> list: Sorts a list of students based on their grades in descending order. If grades are the same, sorts by name in ascending order. Args: students (list of dict): List of student dictionaries with keys \'name\', \'age\', and \'grade\'. Returns: list of dict: Sorted list of student dictionaries. return sorted(students, key=lambda student: (-student[\\"grade\\"], student[\\"name\\"]))"},{"question":"# Problem Overview You are given two strings, `str1` and `str2`, which represent two large non-negative integers. Your task is to write a function that computes their multiplication directly as strings, without converting them to integers at any point in your implementation. The result should also be returned as a string. # Function Signature ```python def multiply_strings(str1: str, str2: str) -> str: pass ``` # Input * `str1`: A string representing a non-negative integer. * `str2`: A string representing a non-negative integer. # Output A string representing the product of the two input numbers. # Constraints 1. 1 <= len(str1), len(str2) <= 1000 2. `str1` and `str2` consist only of digits (\'0\'-\'9\'). 3. `str1` and `str2` do not contain leading zeros unless the number itself is zero. # Examples ```python # Example 1 print(multiply_strings(\\"123\\", \\"456\\")) # Expected Output: \\"56088\\" # Example 2 print(multiply_strings(\\"999\\", \\"999\\")) # Expected Output: \\"998001\\" # Example 3 print(multiply_strings(\\"0\\", \\"12345\\")) # Expected Output: \\"0\\" # Example 4 print(multiply_strings(\\"1\\", \\"1\\")) # Expected Output: \\"1\\" ``` # Notes * Consider the manual multiplication method that we use when multiplying by hand (long multiplication) and how you can simulate it with string operations. * Ensure to handle edge cases like multiplying by zero or one, both for `str1` and `str2`. * This problem requires efficient handling of string manipulation to avoid exceeding time limits.","solution":"def multiply_strings(str1: str, str2: str) -> str: if str1 == \\"0\\" or str2 == \\"0\\": return \\"0\\" len1, len2 = len(str1), len(str2) result = [0] * (len1 + len2) for i in range(len1 - 1, -1, -1): for j in range(len2 - 1, -1, -1): mul = int(str1[i]) * int(str2[j]) p1, p2 = i + j, i + j + 1 sum_ = mul + result[p2] result[p2] = sum_ % 10 result[p1] += sum_ // 10 result_str = \'\'.join(map(str, result)) return result_str.lstrip(\'0\') or \'0\'"},{"question":"# Compressing Large Text Files Challenge Background: You are working on an application that deals with storing and transmitting large text files. To optimize storage and speed up transmission, you decide to implement a function that compresses text using Run-Length Encoding (RLE). RLE is a simple form of lossless data compression where consecutive elements of data, which are the same, are stored as a single data value and count. Objective: Write a function `rle_compress(text: str) -> str` that compresses a given string using the RLE algorithm. Requirements: * Implement the function using the following signature: ```python def rle_compress(text: str) -> str: ``` * Your function should follow the Run-Length Encoding steps: 1. Traverse the input text. 2. For each sequence of consecutive, identical characters, replace it with that character followed by the number of repetitions. * It should return the compressed string. Input and Output: * **Input**: A string `text` consisting of alphanumeric characters. * **Output**: A compressed string using Run-Length Encoding. Constraints: * 1 ≤ len(text) ≤ 10^6 Performance Expectations: * Your implementation should efficiently handle very large text files up to the size of 1,000,000 characters. Example: ```python print(rle_compress(\\"aaabbcccc\\")) # Expected output: \\"a3b2c4\\" print(rle_compress(\\"abcd\\")) # Expected output: \\"a1b1c1d1\\" print(rle_compress(\\"wwwwww\\")) # Expected output: \\"w6\\" print(rle_compress(\\"a\\")) # Expected output: \\"a1\\" ``` Edge cases to consider: * A string with only one character should return that character followed by \'1\'. * Strings with no consecutive repeating characters should return each character followed by \'1\'. Note: This basic RLE algorithm does not address cases where the compressed data might actually become larger than the original data, so your function should prioritize following the basic algorithm as described.","solution":"def rle_compress(text: str) -> str: Compresses the input text using Run-Length Encoding (RLE). Args: text (str): The input string to be compressed. Returns: str: The compressed string using RLE. if not text: return \\"\\" compressed = [] count = 1 for i in range(1, len(text)): if text[i] == text[i-1]: count += 1 else: compressed.append(f\\"{text[i-1]}{count}\\") count = 1 # Append the last character and its count compressed.append(f\\"{text[-1]}{count}\\") return \'\'.join(compressed)"},{"question":"# Binary Search Tree (BST) Implementation and Operations You are tasked with implementing a `BinarySearchTree` data structure that efficiently supports operations for inserting values, finding the minimum and maximum values, and checking for the presence of specific values. Function Specifications 1. **Initialization**: Define an initializer to create an empty Binary Search Tree. 2. **Insert**: Implement an `insert(value)` method that adds a value to the BST while maintaining the BST properties. 3. **Find**: Implement a `find(value)` method that returns `True` if the value exists in the BST and `False` otherwise. 4. **Find Min**: Implement a `find_min()` method that returns the minimum value in the BST. If the tree is empty, return `None`. 5. **Find Max**: Implement a `find_max()` method that returns the maximum value in the BST. If the tree is empty, return `None`. 6. **Inorder Traversal**: Implement an `inorder_traversal()` method that returns a list of all values in the BST, sorted in ascending order. Input and Output Specifications **Input**: - None for initialization. - `insert(value)` where `value` is an integer to be added to the BST. - `find(value)` where `value` is an integer to search for in the BST. - `find_min()` and `find_max()` are methods without additional inputs. - `inorder_traversal()` is a method without additional inputs. **Output**: - `insert(value)` should return None. - `find(value)` should return a boolean indicating the presence of `value`. - `find_min()` should return the minimum integer value in the BST or `None` if the tree is empty. - `find_max()` should return the maximum integer value in the BST or `None` if the tree is empty. - `inorder_traversal()` should return a list of integers in ascending order. # Example Test Cases ```python bst = BinarySearchTree() assert bst.find_min() == None assert bst.find_max() == None assert bst.find(10) == False bst.insert(10) assert bst.find(10) == True assert bst.find_min() == 10 assert bst.find_max() == 10 bst.insert(5) bst.insert(20) bst.insert(1) bst.insert(7) assert bst.find_min() == 1 assert bst.find_max() == 20 assert bst.find(7) == True assert bst.find(15) == False assert bst.inorder_traversal() == [1, 5, 7, 10, 20] bst.insert(15) assert bst.find(15) == True assert bst.inorder_traversal() == [1, 5, 7, 10, 15, 20] ``` Implement the `BinarySearchTree` class according to these specifications and ensure your implementation passes all the given example test cases.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None def insert(self, value): Inserts a value into the BST. if self.root is None: self.root = TreeNode(value) else: self._insert(self.root, value) def _insert(self, node, value): if value < node.value: if node.left is None: node.left = TreeNode(value) else: self._insert(node.left, value) elif value > node.value: if node.right is None: node.right = TreeNode(value) else: self._insert(node.right, value) def find(self, value): Returns True if the value exists in the BST, otherwise returns False. return self._find(self.root, value) def _find(self, node, value): if node is None: return False if value == node.value: return True elif value < node.value: return self._find(node.left, value) else: return self._find(node.right, value) def find_min(self): Returns the minimum value in the BST. if self.root is None: return None return self._find_min(self.root).value def _find_min(self, node): current = node while current.left is not None: current = current.left return current def find_max(self): Returns the maximum value in the BST. if self.root is None: return None return self._find_max(self.root).value def _find_max(self, node): current = node while current.right is not None: current = current.right return current def inorder_traversal(self): Returns a list of all values in the BST sorted in ascending order. result = [] self._inorder_traversal(self.root, result) return result def _inorder_traversal(self, node, result): if node is not None: self._inorder_traversal(node.left, result) result.append(node.value) self._inorder_traversal(node.right, result)"},{"question":"Problem Description You are tasked with implementing a basic arithmetic expression evaluator for addition and subtraction operations only. The expressions will be provided as strings containing integers and the operators `+` or `-`. Parentheses are allowed to alter the precedence of operations, but you do not need to handle any other operators. Task 1. **Implement the Expression Evaluator**: * Write a function `evaluate_expression` that takes an arithmetic expression as a string input and evaluates it to produce the correct result. * The expression can have integers, `+`, `-`, and parentheses `(` and `)`. * Handle whitespace gracefully by stripping it out before processing. * Ensure that the input validation is efficient and can handle unexpected characters gracefully. # Input and Output Formats Function: `evaluate_expression` * **Input**: * An `expression` (string) containing integers, `+`, `-`, `(`, `)`, and possibly spaces. * Constraints: The expression is guaranteed to be valid in terms of syntactical correctness. * **Output**: * An integer which is the result of evaluating the arithmetic expression. * **Example**: ```python evaluate_expression(\\"1 + 2 - 3\\") == 0 evaluate_expression(\\"(1 + 2) - (3 + 4)\\") == -4 evaluate_expression(\\"10 + (2 - 1) + 3\\") == 14 evaluate_expression(\\"((2 + 3) - 1) + 7\\") == 11 ``` Implementation Details 1. **Tokenizer**: * Convert the input string into tokens for easier processing. * Remove any unnecessary whitespace during tokenization. 2. **Parser**: * Construct an abstraction of the expression using a stack-based approach or recursive descent parsing to process sub-expressions within parentheses. 3. **Evaluation**: * Traverse the tokenized structure to evaluate the expression according to arithmetic rules, handling precedence using parentheses correctly. * Accumulate the result by performing additions and subtractions as specified. # Example Function Calls ```python def evaluate_expression(expression: str) -> int: # Your implementation here # Example use cases print(evaluate_expression(\\"1 + 2 - 3\\")) # Output should be 0 print(evaluate_expression(\\"(1 + 2) - (3 + 4)\\")) # Output should be -4 print(evaluate_expression(\\"10 + (2 - 1) + 3\\")) # Output should be 14 print(evaluate_expression(\\"((2 + 3) - 1) + 7\\")) # Output should be 11 ``` Ensure the function handles all edge cases such as consecutive operations, nested parentheses, leading and trailing spaces, and solely whitespace inputs.","solution":"def evaluate_expression(expression: str) -> int: def tokenize(expression): tokens = [] current_num = 0 num_buffer = False for char in expression: if char.isdigit(): current_num = current_num * 10 + int(char) num_buffer = True else: if num_buffer: tokens.append(current_num) current_num = 0 num_buffer = False if char in \'+-()\': tokens.append(char) if num_buffer: tokens.append(current_num) return tokens def parse(tokens): def helper(): stack = [] num = 0 sign = 1 while tokens: token = tokens.pop(0) if type(token) == int: num = token elif token == \'+\': stack.append(sign * num) num = 0 sign = 1 elif token == \'-\': stack.append(sign * num) num = 0 sign = -1 elif token == \'(\': num = helper() elif token == \')\': break stack.append(sign * num) return sum(stack) return helper() tokens = tokenize(expression.replace(\\" \\", \\"\\")) return parse(tokens)"},{"question":"**Question 2: Sum of Unique Elements** You are given an array of integers, where each integer may appear zero or more times. Your task is to write a function that returns the sum of all unique elements in the array (i.e., elements that appear exactly once). Implement the function `sum_of_unique_elements(arr: List[int]) -> int` that returns the sum of all unique elements in the provided array. # Constraints: - The length of the array will not exceed 1000. - Each element in the array will be an integer in the range (-1000 leq text{arr}[i] leq 1000). # Input: A list of integers `arr` containing the elements. # Output: An integer representing the sum of all unique elements in the list. # Example: ```python from typing import List def sum_of_unique_elements(arr: List[int]) -> int: Compute the sum of all unique elements in the list. Args: arr (List[int]): List of integers. Returns: int: The sum of unique elements in the list. # Your code here ``` # Test Cases: ```python assert sum_of_unique_elements([1, 2, 3, 2, 1, 4]) == 7 # (3 + 4) assert sum_of_unique_elements([1, 1, 1, 1, 1]) == 0 # No unique elements assert sum_of_unique_elements([5, 6, 7, 8, 9, 10]) == 45 # All elements are unique assert sum_of_unique_elements([-1, -2, -2, -3, -4, -1]) == -7 # (-3 + -4) assert sum_of_unique_elements([]) == 0 # No elements in the list # Explanation: - For `arr = [1, 2, 3, 2, 1, 4]`, the numbers `3` and `4` are unique in the array. Their sum is `7`. - For `arr = [1, 1, 1, 1, 1]`, there are no unique elements, so the sum is `0`. - For `arr = [5, 6, 7, 8, 9, 10]`, all the elements are unique, so the sum is `45`. - For `arr = [-1, -2, -2, -3, -4, -1]`, the unique numbers are `-3` and `-4`, and their sum is `-7`. - For `arr = []`, the array is empty and thus the sum is `0`. Analyze and think of different cases to ensure correctness and performance.","solution":"from typing import List def sum_of_unique_elements(arr: List[int]) -> int: Compute the sum of all unique elements in the list. Args: arr (List[int]): List of integers. Returns: int: The sum of unique elements in the list. element_count = {} for num in arr: element_count[num] = element_count.get(num, 0) + 1 unique_sum = sum(num for num, count in element_count.items() if count == 1) return unique_sum"},{"question":"# Problem Statement You need to design and implement a data structure that efficiently supports both addition of elements to a rolling window and calculation of the moving average for the last `k` elements. The rolling window should be fixed in size, meaning that once the window is full, the oldest element is removed to make room for a new element. # Input 1. The fixed size of the rolling window `k`. 2. A series of `add` operations, where each operation adds a new integer to the rolling window and optionally, returns the current moving average of the last `k` elements. # Output For each `add` operation that requests the moving average, return the moving average of the last `k` elements in the rolling window. # Operations 1. `add(value)`: Add a new integer to the rolling window. Optionally, it can return the current moving average of the last `k` elements. # Constraints * The window size `k` will be between 1 and 10000. * Each value added will be an integer between -10000 and 10000. * There will be at most 100000 `add` operations. * The moving average should be calculated as the sum of the last `k` elements divided by `k`. # Example ```python window = RollingWindow(3) print(window.add(1)) # Should return None print(window.add(10)) # Should return None print(window.add(3)) # Should return 4.666666666666667 (average of [1, 10, 3]) print(window.add(5)) # Should return 6.0 (average of [10, 3, 5]) ``` # Requirements Implement the `RollingWindow` class with the following method stub: ```python class RollingWindow: def __init__(self, k): Initializes the rolling window with the given size. def add(self, value): Adds a new value to the rolling window and optionally returns the current moving average. ``` # Implementation Notes * Consider using a queue or deque to efficiently manage the rolling window. * Ensure that each `add` operation runs in constant time, O(1). * The moving average calculation should also run in constant time, O(1), to maintain efficiency.","solution":"from collections import deque class RollingWindow: def __init__(self, k): Initializes the rolling window with the given size. self.k = k self.window = deque(maxlen=k) self.window_sum = 0 def add(self, value): Adds a new value to the rolling window and optionally returns the current moving average. if len(self.window) == self.k: self.window_sum -= self.window[0] self.window.append(value) self.window_sum += value if len(self.window) < self.k: return None else: return self.window_sum / self.k"},{"question":"# Sum of Unique Elements in a List You are given a list of integers. Write a function that returns the sum of all unique elements in the list. An element is considered unique if it appears exactly once in the list. Function Signature ```python def sum_of_unique_elements(lst: List[int]) -> int: ``` Input * A list `lst` of integers (0 ≤ len(lst) ≤ 10^4). Each integer in the list will be in the range of -10^6 to 10^6. Output * An integer representing the sum of all unique elements. Constraints * The list can be empty, in which case the sum should be 0. * Optimize the solution to handle large lists efficiently. Example ```python print(sum_of_unique_elements([1, 2, 2, 3])) # Output: 4 print(sum_of_unique_elements([5, 5, 5, 5])) # Output: 0 print(sum_of_unique_elements([4, 5, 6, 4, 5, 7])) # Output: 13 ``` Notes * You can use a dictionary or collections.Counter to keep track of the frequency of each element. * Ensure your function handles positive, negative, and zero values in the list correctly.","solution":"from typing import List from collections import Counter def sum_of_unique_elements(lst: List[int]) -> int: Returns the sum of all unique elements in the list. An element is considered unique if it appears exactly once in the list. element_count = Counter(lst) return sum(key for key, count in element_count.items() if count == 1)"},{"question":"# Coding Assessment Question Context: Bob is working on a word frequency analysis program. He wants to analyze written text and determine the most frequently occurring word. Your task is to help him by writing a function to find the word that appears the most in a given multiline string. # Objective: Write a Python function `most_frequent_word(text: str) -> str` that returns the word which appears the most frequently within the given text. Words are defined as sequences of characters separated by spaces or punctuation. # Input and Output Formats: - **Input**: A single string `text` which can contain multiple lines and a mix of alphabetic words and punctuation. - **Output**: A string representing the most frequently occurring word in the given text. If there are ties, return the lexicographically smallest word. # Constraints: - The function should be case-insensitive. - Punctuation should be ignored, and words should be normalized to lowercase for frequency counting. # Example: ```python def most_frequent_word(text: str) -> str: pass # Example usage print(most_frequent_word(\\"Hello world! Hello everyone.\\")) # \\"hello\\" print(most_frequent_word(\\"To be or not to be, that is the question.\\")) # \\"be\\" print(most_frequent_word(\\"In winter, snow is white. In summer, snow is rare.\\")) # \\"in\\" print(most_frequent_word(\\"\\")) # \\"\\" ``` # Criteria: - Function should have an efficient implementation with proper handling of strings and their normalization. - Utilize Python libraries for text processing and frequency counting optimally. # Additional Notes: - Take into account the handling of edge cases such as empty strings or strings full of punctuation and spaces. - Consider using Python’s `collections.Counter` for efficient word frequency counting. - Use regular expressions to handle punctuation separation if needed.","solution":"import re from collections import Counter def most_frequent_word(text: str) -> str: Returns the most frequently occurring word in the given text. Words are case-insensitive and punctuation is ignored. Lexicographically smallest word is chosen in case of ties. if not text: return \\"\\" # Normalize the text: lowercase and remove punctuation words = re.findall(r\'bw+b\', text.lower()) if not words: return \\"\\" # Count the frequency of each word frequency = Counter(words) # Find the most common word(s) most_frequent = frequency.most_common() max_frequency = most_frequent[0][1] # Filter words with the maximum frequency most_frequent_words = [word for word, count in most_frequent if count == max_frequency] # Return the lexicographically smallest word return min(most_frequent_words)"},{"question":"# Question: Implement a Naive Bayes Classifier Your task is to implement a Naive Bayes classifier for binary classification. Naive Bayes classifiers are based on applying Bayes\' theorem with strong (naive) independence assumptions between the features. The classifier works by calculating the probability of each class given the input features and selecting the class with the highest probability. For binary classification, the probabilities for a data point x = (x_1, x_2, ..., x_d) to belong to class y in {0, 1} can be computed as: [ P(y mid x) = frac{ P(x mid y) cdot P(y) }{ P(x) } ] But since P(x) is the same for all classes, we can compare the numerator only: [ P(y mid x) propto P(y) cdot prod_{i=1}^{d} P(x_i mid y) ] Where: - ( P(y) ) is the prior probability of class y. - ( P(x_i mid y) ) is the likelihood of feature ( x_i ) given class y. You can assume that each feature is normally distributed. Given feature ( x_i ) for class y: [ P(x_i mid y) = frac{1}{sqrt{2 pi sigma_{y,i}^2}} exp left( - frac{ (x_i - mu_{y,i})^2 }{2 sigma_{y,i}^2} right) ] Where ( mu_{y,i} ) and ( sigma_{y,i}^2 ) are the mean and variance of feature ( x_i ) in class y. Requirements: 1. Implement the NaiveBayes class with `fit` and `predict` methods. 2. The `fit` method should calculate the mean and variance of each feature for both classes, as well as the prior probabilities. 3. The `predict` method should use the calculated parameters to predict the class of new observations. 4. Add appropriate validation checks for input data. Input: - Observations: A list of ndarrays representing the feature vectors of the training data. - Classes: An ndarray of integers {0, 1} representing the class labels of the training data. - A single test observation: An ndarray representing a new data point to classify. Output: - Predicted class: An integer value from {0, 1} corresponding to the predicted class of the observation. Constraints: - Inputs to the `fit` method can have up to 10,000 observations with up to 100 features each. - Inputs to the `predict` method must be the same dimensionality as the observations used in `fit`. # Example: ```python import numpy as np class NaiveBayes: def __init__(self): self.priors = {} self.means = {} self.vars = {} def fit(self, observations, classes): n_features = observations[0].shape[0] for c in np.unique(classes): obs_c = [obs for (obs, label) in zip(observations, classes) if label == c] self.priors[c] = len(obs_c) / len(observations) self.means[c] = np.mean(obs_c, axis=0) self.vars[c] = np.var(obs_c, axis=0) def predict(self, observation): posteriors = [] for c in self.priors: prior = np.log(self.priors[c]) conditional = np.sum(-0.5 * np.log(2 * np.pi * self.vars[c]) - 0.5 * ((observation - self.means[c]) ** 2) / self.vars[c]) posteriors.append(prior + conditional) return np.argmax(posteriors) # Initialize the NaiveBayes classifier nb = NaiveBayes() # Fit the classifier with training data observations = [ np.asarray([1.0, 2.0]), np.asarray([1.0, 1.5]), np.asarray([2.0, 1.0]), np.asarray([2.5, 1.0]) ] classes = np.asarray([0, 0, 1, 1]) nb.fit(observations, classes) # Predict a new observation new_observation = np.asarray([1.5, 1.0]) print(nb.predict(new_observation)) # Expected output: 1 (example) ``` Ensure your implementation meets these requirements and passes the provided example tests.","solution":"import numpy as np class NaiveBayes: def __init__(self): self.priors = {} self.means = {} self.vars = {} def fit(self, observations, classes): n_features = observations[0].shape[0] obs_by_class = {0: [], 1: []} for obs, cls in zip(observations, classes): if cls not in [0, 1]: raise ValueError(\\"Class labels must be 0 or 1.\\") obs_by_class[cls].append(obs) for c in [0, 1]: obs_c = np.array(obs_by_class[c]) self.priors[c] = len(obs_c) / len(observations) self.means[c] = np.mean(obs_c, axis=0) self.vars[c] = np.var(obs_c, axis=0) def predict(self, observation): if len(observation) != len(self.means[0]): raise ValueError(f\\"Expected observation length of {len(self.means[0])}, got {len(observation)}\\") posteriors = [] for c in self.priors: prior = np.log(self.priors[c]) conditional = np.sum(-0.5 * np.log(2 * np.pi * self.vars[c]) - 0.5 * ((observation - self.means[c]) ** 2) / self.vars[c]) posteriors.append(prior + conditional) return np.argmax(posteriors)"},{"question":"# Coding Challenge: Count Unique Subarrays You are given an integer array `arr` of length `n` and an integer `k`. Your task is to find the count of unique subarrays of length `k` that contain only distinct elements. Implement a function `count_unique_subarrays(arr: List[int], k: int) -> int` that: 1. Takes as input an integer array `arr` of length `n` and an integer `k`. 2. Returns the count of unique subarrays of length `k` containing only distinct elements. Input: - An integer array `arr` of length `n`. - An integer `k`. Output: - An integer representing the count of unique subarrays of length `k` containing only distinct elements. Constraints: - The length of the array `n` will be between `1` and `10000`. - The value of `k` will be between `1` and `n`. Example: ```python arr = [1, 2, 3, 1, 2, 3] k = 3 ``` For the given array and `k`, the subarrays of length 3 are: - `arr[0:3] = [1, 2, 3]` - `arr[1:4] = [2, 3, 1]` - `arr[2:5] = [3, 1, 2]` - `arr[3:6] = [1, 2, 3]` Among these, the unique subarrays with all distinct elements are: - `[1, 2, 3]` (appears twice) - `[2, 3, 1]` - `[3, 1, 2]` Thus, the function should return `3`. ```python def count_unique_subarrays(arr, k): # Your implementation here pass ``` Note: Make sure to handle edge cases such as subarrays where `k` is larger than `n` and arrays with many repeated elements efficiently.","solution":"def count_unique_subarrays(arr, k): if k > len(arr): return 0 unique_subarrays = set() for i in range(len(arr) - k + 1): subarray = arr[i:i + k] if len(set(subarray)) == k: # Check if all elements are distinct unique_subarrays.add(tuple(subarray)) return len(unique_subarrays)"},{"question":"# Problem Statement: Balanced Binary Search Tree from Sorted Array You need to implement a function that constructs a height-balanced binary search tree (BST) from a sorted array. A height-balanced BST is defined as a binary tree in which the depth of the two subtrees of every node never differs by more than one. Function Signature ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_array_to_bst(nums: List[int]) -> TreeNode: pass ``` Input - **nums** (List[int]): A sorted list of integers. Output - **result** (TreeNode): The root node of the height-balanced BST. Constraints - The length of `nums` will be in the range of `[0, 10^4]`. - The values in `nums` will be distinct and sorted in ascending order. Detailed Description Implement the function `sorted_array_to_bst` which builds a height-balanced BST from the given sorted array `nums`. The function should recursively divide the array: 1. Select the middle element of the sorted array as the root of the BST. 2. Recursively build the left subtree using the left half of the array. 3. Recursively build the right subtree using the right half of the array. This will ensure the BST is height-balanced. Example ```python # Example 1: sorted_array_to_bst([-10, -3, 0, 5, 9]) # Output: TreeNode with root value 0 and left subtree [-10, -3], right subtree [5, 9] # Example 2: sorted_array_to_bst([1, 3]) # Output: TreeNode with root value 3 and left child [1] (or root value 1 and right child [3]) ``` Notes - The TreeNode class has been provided. You can use it to build the nodes of your BST. - You can assume that the `TreeNode` class definition means that you will have to implement the tree node constructor and use it to create the tree structure. - Ensure that the function runs efficiently for the given constraints. - Visualize or print the BST for small inputs to verify the structure manually. This problem tests your ability to implement recursive functions and understand the properties of binary search trees and their balanced variations.","solution":"from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_array_to_bst(nums: List[int]) -> Optional[TreeNode]: if not nums: return None # Find the middle element and use it as a root mid = len(nums) // 2 root = TreeNode(nums[mid]) # Recursively build the left and right subtrees root.left = sorted_array_to_bst(nums[:mid]) root.right = sorted_array_to_bst(nums[mid+1:]) return root"},{"question":"# Subarray Sum Problem In this problem, you are given an array of integers. Your task is to determine how many distinct subarrays sum up to a given target value. A subarray is defined as a contiguous non-empty sequence of elements within the array. The subarrays must be evaluated to identify how many of them equal the target sum. **Objective**: Design a function `subarray_sum(arr: List[int], target: int) -> int` that returns the number of distinct subarrays whose elements sum up to the target value. **Function Signature**: ```python def subarray_sum(arr: List[int], target: int) -> int: pass ``` **Input**: - `arr` (List[int]): an array of integers where 1 ≤ len(arr) ≤ 10^4, and -10^4 ≤ arr[i] ≤ 10^4. - `target` (int): the target sum, where -10^8 ≤ target ≤ 10^8 **Output**: - Returns an integer representing the number of distinct subarrays that sum to the given target value. **Example**: ```python >>> subarray_sum([1, 1, 1], 2) 2 >>> subarray_sum([1, 2, 3], 3) 2 ``` # Detailed Requirements: You need to: 1. Calculate the frequency of each subarray sum within the array. 2. Return the count of subarrays that match the target sum. # Performance Constraints: - The function should efficiently handle the upper boundaries of input sizes, making sure to optimize time complexity. # Notes: - The solution must handle both positive and negative integers within the array. - The function should consider all possible subarrays and evaluate their sums. - Ensure to count subarrays accurately without missing any due to overlapping subarray computations. **Hint**: Consider using prefix sums and hash maps to efficiently count the possible subarrays. This added problem tests understanding of arrays, subarrays, prefix sums, and hash maps, aligning with the required complexity and scope of the provided sample question.","solution":"from typing import List def subarray_sum(arr: List[int], target: int) -> int: Returns the number of distinct subarrays whose elements sum up to the target value. current_sum = 0 count = 0 prefix_sum = {0: 1} for num in arr: current_sum += num if (current_sum - target) in prefix_sum: count += prefix_sum[current_sum - target] if current_sum in prefix_sum: prefix_sum[current_sum] += 1 else: prefix_sum[current_sum] = 1 return count"},{"question":"**Longest Common Substring** You need to implement a function `longest_common_substring` that takes two strings and returns the longest common substring. In case there are multiple substrings with the same length, return the one that appears first in the first input string. # Function Signature ```python def longest_common_substring(s1: str, s2: str) -> str: ``` # Parameters * `s1` (str): A string (1 <= len(s1) <= 1000). * `s2` (str): A string (1 <= len(s2) <= 1000). # Output * str: The longest common substring. If there are multiple longest common substrings, return the one that appears first in `s1`. If there is no common substring, return an empty string. # Constraints * The function should be case-sensitive. # Examples ```python >>> longest_common_substring(\\"abcdef\\", \\"zcdemf\\") \\"cde\\" >>> longest_common_substring(\\"abcdef\\", \\"ghijkl\\") \\"\\" >>> longest_common_substring(\\"abcde\\", \\"abfde\\") \\"ab\\" ``` # Requirements 1. Implement the function using a dynamic programming approach. 2. Ensure the solution is efficient and can handle the upper constraint limits. 3. The function should be robust against edge cases such as completely disjoint strings or when one of the strings is empty. # Tips 1. Use a 2D table to store the lengths of the longest common suffixes of substrings. 2. Track the maximum length and the ending index to reconstruct the longest common substring. 3. Ensure that the function handles inputs of various lengths efficiently within the given constraints.","solution":"def longest_common_substring(s1: str, s2: str) -> str: Returns the longest common substring between two strings. len1, len2 = len(s1), len(s2) if len1 == 0 or len2 == 0: return \\"\\" # Create a 2D list to store lengths of longest common suffixes of substrings dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] max_len = 0 # Length of longest common substring end_index = 0 # Ending index of longest common substring in s1 # Build the dp array for i in range(1, len1 + 1): for j in range(1, len2 + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > max_len: max_len = dp[i][j] end_index = i # The longest common substring return s1[end_index - max_len:end_index]"},{"question":"# Text File Compressor You are tasked with implementing a simplified text file compressor with encoding and decoding capabilities. The goal is to demonstrate your understanding of basic data compression algorithms, file I/O, and string manipulations. # Functional Requirements: 1. **Compress**: Implement a basic lossless compression technique, such as Run-Length Encoding (RLE), to compress the contents of a text file. 2. **Decompress**: Implement the corresponding decompression to revert the compressed file back to its original form. 3. **File Handling**: Provide functionalities to compress a text file and save the result, and to decompress a text file and save the restored content. # Input and Output Formats: - **Input**: 1. File path of the text file to be compressed. 2. File path where the compressed file will be saved. 3. File path of the compressed file to be decompressed. 4. File path where the decompressed file will be saved. - **Output**: Functions returning the status of operations (success or failure). # Constraints: 1. Ensure that the compression method results in a smaller file size (for typical text data). 2. The decompression should perfectly restore the original data. 3. Handle edge cases like empty files and files with no repetitive data. # Performance Requirements: 1. Efficient string and file manipulations to ensure good performance. 2. Minimal memory overhead for processing large text files. # Implementation Scenario: You are required to implement the following functions: 1. `compress_text_file(input_file: str, output_file: str) -> bool` 2. `decompress_text_file(input_file: str, output_file: str) -> bool` ```python def compress_text_file(input_file: str, output_file: str) -> bool: try: with open(input_file, \'r\') as f: content = f.read() compressed_content = \\"\\" # Implement RLE compression here count = 1 for i in range(1, len(content)): if content[i] == content[i - 1]: count += 1 else: compressed_content += content[i - 1] + str(count) count = 1 compressed_content += content[-1] + str(count) # last character with open(output_file, \'w\') as f: f.write(compressed_content) return True except Exception as e: print(f\\"Error: {e}\\") return False def decompress_text_file(input_file: str, output_file: str) -> bool: try: with open(input_file, \'r\') as f: content = f.read() decompressed_content = \\"\\" # Implement RLE decompression here i = 0 while i < len(content): char = content[i] j = i + 1 count = 0 while j < len(content) and content[j].isdigit(): count = count * 10 + int(content[j]) j += 1 decompressed_content += char * count i = j with open(output_file, \'w\') as f: f.write(decompressed_content) return True except Exception as e: print(f\\"Error: {e}\\") return False ``` *Note*: The full structure should include any necessary error handling and optimizations for the compression and decompression algorithms as needed.","solution":"def compress_text_file(input_file: str, output_file: str) -> bool: try: with open(input_file, \'r\') as f: content = f.read() if not content: # Handle the case of empty files with open(output_file, \'w\') as f: f.write(\\"\\") return True compressed_content = \\"\\" count = 1 for i in range(1, len(content)): if content[i] == content[i - 1]: count += 1 else: compressed_content += content[i - 1] + str(count) count = 1 compressed_content += content[-1] + str(count) # last character with open(output_file, \'w\') as f: f.write(compressed_content) return True except Exception as e: print(f\\"Error: {e}\\") return False def decompress_text_file(input_file: str, output_file: str) -> bool: try: with open(input_file, \'r\') as f: content = f.read() if not content: # Handle the case of empty files with open(output_file, \'w\') as f: f.write(\\"\\") return True decompressed_content = \\"\\" i = 0 while i < len(content): char = content[i] j = i + 1 count = 0 while j < len(content) and content[j].isdigit(): count = count * 10 + int(content[j]) j += 1 decompressed_content += char * count i = j with open(output_file, \'w\') as f: f.write(decompressed_content) return True except Exception as e: print(f\\"Error: {e}\\") return False"},{"question":"# Question: Implementing a Custom Sort Function You are asked to implement a custom sort function that sorts a list of integers based on the frequency of the elements. If two elements have the same frequency, the smaller element should come first. Your task is to write a function that takes a list of integers and returns a list of integers sorted by the described criteria. Function Signature ```python def custom_sort(arr: list[int]) -> list[int]: ``` Input * `arr`: A list of integers which can be both positive and negative and can contain duplicates. Output * Returns a list of integers sorted first by frequency in ascending order, and then by value in ascending order when frequencies match. Constraints * The list can contain up to 10^4 integers. * Integers in the list can range from -10^6 to 10^6. Example ```python # Expected to return the sort by frequency: [4, 5, 6, 5, 6, 6] print(custom_sort([6, 5, 4, 5, 6, 6])) # Expected to return [1, -1, -1, 2, 2, 2] print(custom_sort([1, 2, 2, 2, -1, -1])) # Expected to return [-1, -1, 2, 3, 3] print(custom_sort([3, 3, 2, -1, -1])) ``` Note * In the first example, the frequency count is: 4 → 1, 5 → 2, 6 → 3. So the sorted list becomes [4, 5, 5, 6, 6, 6]. * In the second example, the frequency count is: 1 → 1, -1 → 2, 2 → 3. So the sorted list becomes [1, -1, -1, 2, 2, 2]. * In the third example, the frequency count is: -1 → 2, 2 → 1, 3 → 2. 2 should come first because it has a lower frequency, followed by -1 (smaller value) and 3. Make sure the solution handles edge cases and large input sizes efficiently.","solution":"from collections import Counter def custom_sort(arr: list[int]) -> list[int]: This function sorts a list of integers based on the frequency of the elements in ascending order. If two elements have the same frequency, the smaller element should come first. count = Counter(arr) # Sort based on frequency, and then by the value arr.sort(key=lambda x: (count[x], x)) return arr"},{"question":"**Scenario**: You are developing a file system management component for an operating system, and your task is to simulate the First-Come, First-Served (FCFS) disk scheduling algorithm. The algorithm processes disk I/O requests in the order they arrive. **Task**: Create a function `fcfs_disk_scheduling(requests: List[int], head: int) -> Tuple[int, List[int]]` that implements the FCFS disk scheduling algorithm. The function will receive a list of integers representing the disk I/O requests and an integer representing the initial position of the disk head. You need to: 1. Calculate and return the total number of head movements the disk scheduler takes to satisfy all the requests in order. 2. Return the sequence of head movements for each request. 3. Print the total head movement required. # Input * A list of integers `requests`: A list containing the requested track numbers to be accessed. * An integer `head`: The initial position of the disk head. # Output * A tuple containing: - **int**: The total number of head movements. - **List[int]**: The sequence of head movements (the track number where the head moves for each request). * Print statement showing total head movement. # Example: ```python requests = [98, 183, 37, 122, 14, 124, 65, 67] head = 53 total_movement, movement_sequence = fcfs_disk_scheduling(requests, head) Total head movement = 640 ``` # Constraints: * The list `requests` may have up to 1000 request entries. * Track numbers are non-negative integers. * The disk head initial position and track numbers are within the range of 0 to 199. Implement the function to demonstrate your understanding and proficiency in disk scheduling algorithms. **Note**: Your solution should not use any external libraries and should handle edge cases efficiently.","solution":"from typing import List, Tuple def fcfs_disk_scheduling(requests: List[int], head: int) -> Tuple[int, List[int]]: Simulate the FCFS disk scheduling algorithm. Args: requests (List[int]): A list of integers representing the disk I/O requests. head (int): The initial position of the disk head. Returns: Tuple[int, List[int]]: A tuple containing: - The total number of head movements. - The sequence of head movements for each request. total_head_movement = 0 movement_sequence = [] current_position = head for request in requests: movement = abs(request - current_position) total_head_movement += movement movement_sequence.append(request) current_position = request print(f\\"Total head movement = {total_head_movement}\\") return total_head_movement, movement_sequence"},{"question":"# String Manipulation and Data Formatting You are required to process employee data stored in a text file and transform it into a structured format. Your Task Write a Python function, `process_employee_data`, which will: 1. Read an input text file named `\\"employees.txt\\"` containing employee records. 2. Format and store the data in a CSV file named `\\"formatted_employees.csv\\"`. # Function Signature ```python def process_employee_data() -> None: ``` Implementation Details - The input file `\\"employees.txt\\"` has the following format: ``` Employee Name: John Doe, Employee ID: 1234, Department: IT Employee Name: Jane Smith, Employee ID: 5678, Department: HR ... ``` - Extract the names, IDs, and departments from each line. - Write the extracted data into a CSV file with columns \\"Employee Name\\", \\"Employee ID\\", and \\"Department\\". Example If the input file `\\"employees.txt\\"` contains: ``` Employee Name: John Doe, Employee ID: 1234, Department: IT Employee Name: Jane Smith, Employee ID: 5678, Department: HR ``` After running your function, the `\\"formatted_employees.csv\\"` should contain: ``` Employee Name,Employee ID,Department John Doe,1234,IT Jane Smith,5678,HR ``` # Constraints - Handle potential file reading and writing errors. - Ensure the CSV is properly formatted and is readable. # Hints - Use Python\'s `csv` library for writing CSV files. - Use regular expressions or string manipulation to extract data from each line.","solution":"import csv import re def process_employee_data() -> None: try: with open(\\"employees.txt\\", \\"r\\") as infile: employee_lines = infile.readlines() with open(\\"formatted_employees.csv\\", \\"w\\", newline=\'\') as outfile: writer = csv.writer(outfile) # Write the header writer.writerow([\\"Employee Name\\", \\"Employee ID\\", \\"Department\\"]) for line in employee_lines: name_match = re.search(r\'Employee Name: (.*?),\', line) id_match = re.search(r\'Employee ID: (d+),\', line) dept_match = re.search(r\'Department: (.*)\', line) if name_match and id_match and dept_match: name = name_match.group(1) emp_id = id_match.group(1) department = dept_match.group(1) writer.writerow([name, emp_id, department]) except FileNotFoundError: print(\\"The input file (employees.txt) was not found.\\") except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"# Context Vertical sum of a binary tree is an important concept that helps in visualizing the tree\'s nodes based on their horizontal distance from the root. Each node\'s position can be described using its horizontal distance, calculated from the root node (which is at horizontal distance zero). Nodes to the left of the root decrease the horizontal distance, and nodes to the right increase it. # Problem You are required to implement a function `vertical_sum(root: TreeNode) -> dict[int, int]` that accepts the root of a binary tree and returns a dictionary where the keys are the horizontal distances and the values are the sums of the node values vertically aligned at these distances. # Detailed Requirements 1. **Node Class**: - You must first implement a class `TreeNode` to represent nodes in the binary tree. - Each `TreeNode` object will have three attributes: `val`, `left`, and `right`. 2. **Horizontal Distance Calculation**: - Calculate the horizontal distance for each node relative to the root node. - Horizontal distance of the root is 0. For any node: - Horizontal distance of the left child is `horizontal distance of parent - 1`. - Horizontal distance of the right child is `horizontal distance of parent + 1`. 3. **Summing Values**: - Sum the values of nodes that fall at the same horizontal distance. 4. **Edge Cases**: - If the tree is empty, return an empty dictionary. 5. **Return Value**: The function should return a dictionary where keys are sorted horizontal distances, and values are the corresponding sums of node values. # Function Signatures ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def vertical_sum(root: TreeNode) -> dict[int, int]: ``` # Example ```python # Binary tree: # 1 # / # 2 3 # / / # 4 5 6 7 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) root.right.left = TreeNode(6) root.right.right = TreeNode(7) >>> vertical_sum(root) {-2: 4, -1: 2, 0: 12, 1: 3, 2: 7} # Binary tree: # 10 # / # 7 12 # / # 5 9 15 root = TreeNode(10) root.left = TreeNode(7) root.right = TreeNode(12) root.left.left = TreeNode(5) root.left.right = TreeNode(9) root.right.right = TreeNode(15) >>> vertical_sum(root) {-2: 5, -1: 7, 0: 19, 1: 12, 2: 15} >>> vertical_sum(None) {} ``` # Constraints 1. Each node\'s value will be an integer. 2. The tree can have at most 10^4 nodes. 3. The tree values can range from -10^9 to 10^9. # Notes - Utilize efficient traversal methods to handle large trees. - Ensure your solution is optimized for both time and space complexity aspects.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def vertical_sum(root: TreeNode) -> dict[int, int]: if not root: return {} # Dictionary to store the sum of nodes at each horizontal distance column_sums = {} # Queue to store nodes along with their horizontal distance queue = [(root, 0)] # Level order traversal while queue: node, hd = queue.pop(0) if hd in column_sums: column_sums[hd] += node.val else: column_sums[hd] = node.val if node.left: queue.append((node.left, hd - 1)) if node.right: queue.append((node.right, hd + 1)) # Convert dictionary to a sorted dictionary based on keys sorted_column_sums = dict(sorted(column_sums.items())) return sorted_column_sums"},{"question":"# Question You are tasked with implementing a simplified version of a Database Management System (DBMS) that supports a single table with basic CRUD (Create, Read, Update, Delete) operations. The table will have dynamic fields and will ensure data integrity by maintaining unique primary keys. # Function Requirements create_table * **Input**: List of strings `fields` representing the column names, with the first field being the primary key. * **Output**: None; initializes the table. insert_record * **Input**: Dictionary `record` where keys are column names and values are the corresponding data. * **Output**: None; adds the record to the table. * **Constraint**: Ensure the primary key is unique. get_record * **Input**: Primary key `key` of the record. * **Output**: Dictionary representing the record with the given primary key. If no such record exists, return `None`. update_record * **Input**: Primary key `key` and dictionary `updated_values` where keys are column names to be updated and values are the new data. * **Output**: None; updates the given record with new values. * **Constraint**: Ensure the given primary key exists. delete_record * **Input**: Primary key `key` of the record to be deleted. * **Output**: None; deletes the record. * **Constraint**: Ensure the given primary key exists. # Constraints * Assume there will be at most `10^6` records. * The primary key will always be a string. * All field names and keys in the input dictionaries will be strings. * All values in the records will be strings, integers, or floats. # Example ```python fields = [\'id\', \'name\', \'age\'] # Create table create_table(fields) # Insert records insert_record({\'id\': \'101\', \'name\': \'Alice\', \'age\': 25}) insert_record({\'id\': \'102\', \'name\': \'Bob\', \'age\': 30}) # Get record print(get_record(\'101\')) # Output: {\'id\': \'101\', \'name\': \'Alice\', \'age\': 25} # Update record update_record(\'101\', {\'age\': 26}) print(get_record(\'101\')) # Output: {\'id\': \'101\', \'name\': \'Alice\', \'age\': 26} # Delete record delete_record(\'101\') print(get_record(\'101\')) # Output: None ``` Notes: * All operations should be efficient. * You must handle and report errors gracefully, such as attempting to insert a record with a duplicate primary key or trying to update/delete a non-existing record.","solution":"class DBMS: def __init__(self): self.table = {} self.fields = [] def create_table(self, fields): Initializes the table with the provided fields. The first field is considered as the primary key. self.fields = fields def insert_record(self, record): Inserts a record into the table. Ensures the primary key is unique. primary_key = record[self.fields[0]] if primary_key in self.table: raise ValueError(\\"Record with this primary key already exists.\\") self.table[primary_key] = record def get_record(self, key): Retrieves a record from the table based on the primary key. Returns None if the record does not exist. return self.table.get(key, None) def update_record(self, key, updated_values): Updates a record in the table with the given primary key. Ensures the record exists. if key not in self.table: raise ValueError(\\"Record with this primary key does not exist.\\") for field, value in updated_values.items(): self.table[key][field] = value def delete_record(self, key): Deletes a record from the table based on the primary key. Ensures the record exists. if key not in self.table: raise ValueError(\\"Record with this primary key does not exist.\\") del self.table[key]"},{"question":"# Coding Question Problem Statement Create a function that reads a string representation of an arithmetic expression and evaluates it, respecting the standard order of operations (parentheses, exponents, multiplication and division, addition, and subtraction). Your implementation should handle nested parentheses and support the four basic arithmetic operators: `+`, `-`, `*`, and `/`. Requirements 1. **Input**: - A single string `expression` containing a valid arithmetic expression. - The expression may contain integers, parentheses, and the operators `+`, `-`, `*`, `/`. 2. **Output**: - An integer or float representing the evaluated result of the arithmetic expression. 3. **Constraints**: - The expression string will contain between 1 and 1000 characters. - The expression will be valid, and division by zero will not occur in the input. Example ```python assert evaluate_expression(\\"3 + 5 * 2\\") == 13 assert evaluate_expression(\\"(3 + 5) * 2\\") == 16 assert evaluate_expression(\\"10 + 2 * 6 / 2 - 4\\") == 12.0 assert evaluate_expression(\\"(1 + (2 * 3) - (4 / 2))\\") == 5.0 assert evaluate_expression(\\"((2-3)*(2+4))\\") == -6 ``` Implementation Details Please implement the following function: ```python def evaluate_expression(expression: str) -> Union[int, float]: Evaluate a given arithmetic expression string and return the evaluated result. Args: expression (str): The arithmetic expression to evaluate. Returns: int or float: The result of evaluating the expression. # Your code here ```","solution":"import re def evaluate_expression(expression: str): Evaluate a given arithmetic expression string and return the evaluated result. Args: expression (str): The arithmetic expression to evaluate. Returns: int or float: The result of evaluating the expression. def parse_expression(expression): tokens = re.findall(r\'[-+*/()]|d+\', expression) return tokens def apply_operation(operation, second_operand, first_operand): if operation == \'+\': return first_operand + second_operand elif operation == \'-\': return first_operand - second_operand elif operation == \'*\': return first_operand * second_operand elif operation == \'/\': return first_operand / second_operand def greater_precedence(op1, op2): precedences = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} return precedences[op1] > precedences[op2] def evaluate(tokens): values = [] operations = [] idx = 0 while idx < len(tokens): token = tokens[idx] if token.isdigit(): values.append(float(token)) elif token == \'(\': operations.append(token) elif token == \')\': while operations and operations[-1] != \'(\': operation = operations.pop() second_operand = values.pop() first_operand = values.pop() values.append(apply_operation(operation, second_operand, first_operand)) operations.pop() # remove the \'(\' from stack else: while (operations and operations[-1] != \'(\' and greater_precedence(operations[-1], token)): operation = operations.pop() second_operand = values.pop() first_operand = values.pop() values.append(apply_operation(operation, second_operand, first_operand)) operations.append(token) idx += 1 while operations: operation = operations.pop() second_operand = values.pop() first_operand = values.pop() values.append(apply_operation(operation, second_operand, first_operand)) return values[0] tokens = parse_expression(expression) result = evaluate(tokens) if int(result) == result: return int(result) else: return result"},{"question":"# Question: Implement a Balanced Substring Check Given a string consisting only of the characters \'a\' and \'b\', a substring is considered \\"balanced\\" if it contains equal numbers of \'a\'s and \'b\'s. Your task is to implement a function that checks if it\'s possible to rearrange the given string such that it contains at least one balanced substring of length greater than 1. # Objective Implement a function `contains_balanced_substring(s: str) -> bool` that takes a string and returns a boolean indicating whether it\'s possible to rearrange the string to have at least one balanced substring of length greater than 1. # Input * `s` (string): A string consisting only of \'a\' and \'b\' characters. # Output * A boolean value: `True` if it\'s possible to rearrange the string to have at least one balanced substring of length greater than 1, otherwise `False`. # Constraints * The length of the input string `s` will be between 2 and 10^5 inclusive. # Performance Requirement * Aim for an efficient implementation given the potential length of the string. # Example ```python print(contains_balanced_substring(\\"aabbb\\")) # Output: True # Explanation: One of the possible rearrangements is \\"ababb\\", which contains a balanced substring \\"abab\\". print(contains_balanced_substring(\\"aaaabb\\")) # Output: True # Explanation: One possible rearrangement is \\"aabb\\", which contains a balanced substring. print(contains_balanced_substring(\\"aaaa\\")) # Output: False # Explanation: No rearrangement can create a balanced substring. ``` # Guidelines To determine if a balanced substring is possible: 1. Count the number of \'a\'s and \'b\'s in the string. 2. If both counts are non-zero, it\'s possible to create a balanced substring by rearranging the string. 3. If either \'a\' or \'b\' is zero, it\'s impossible to create a balanced substring. The function signature is as follows: ```python def contains_balanced_substring(s: str) -> bool: # Your code here ```","solution":"def contains_balanced_substring(s: str) -> bool: Determines if it is possible to rearrange the string such that it contains at least one balanced substring. A balanced substring has an equal number of \'a\'s and \'b\'s. Args: s (str): A string consisting only of \'a\' and \'b\'. Returns: bool: True if a balanced substring is possible, otherwise False. count_a = s.count(\'a\') count_b = s.count(\'b\') # A balanced substring is possible if both \'a\' and \'b\' are present in the string return count_a > 0 and count_b > 0"},{"question":"# Coding Assessment Question Problem Context: A Fibonacci sequence is a series of numbers in which each number ( Fibonacci number ) is the sum of the two preceding numbers. The simplest is the series 1, 1, 2, 3, 5, 8, etc. Create a function to return the nth Fibonacci number using a recursive approach. For example, the 1st and 2nd Fibonacci numbers are 1 and the subsequent number is the sum of the previous two, hence 2, 3, 5, and so on. Task: Write a function that returns the nth Fibonacci number. Function Signature: ```python def fibonacci_recursive(n: int) -> int: ``` Input: * An integer ( n ) (1 ≤ n ≤ 30): The position in the Fibonacci sequence. Output: * An integer: The nth Fibonacci number. Constraints: * Ensure the solution uses recursion and handles edge cases appropriately. Example: ```python >>> fibonacci_recursive(1) 1 >>> fibonacci_recursive(2) 1 >>> fibonacci_recursive(10) 55 >>> fibonacci_recursive(30) 832040 ``` Notes: * The Fibonacci sequence starts with 1 and 1. * For ( n = 1 ), the result should be 1. * For ( n = 2 ), the result should be 1. * Optimize your recursive approach considering the constraints and edge cases.","solution":"def fibonacci_recursive(n: int) -> int: Recursively returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"Input should be a positive integer\\") if n == 1 or n == 2: return 1 return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)"},{"question":"# Coding Assessment Question 2 **Context**: You need to implement a function that finds the longest path in a Directed Acyclic Graph (DAG). A path in a DAG is a sequence of vertices such that there is a directed edge between each pair of consecutive vertices. **Challenge**: Implement the function `longest_path_dag(graph: List[List[int]]) -> List[int]` that receives an adjacency list of a directed acyclic graph and returns the longest path as a list of node indices. **Specifications**: - The graph is represented as an adjacency list. Each index `i` represents a node, and each element `graph[i]` is a list of nodes that node `i` has directed edges to. - The function should return the longest path in any valid order. - Nodes can be numbered from 0 to n-1 where n is the total number of nodes. **Input**: - `graph`: List of lists where `graph[i]` is the list of nodes connected by an outgoing edge from node `i`. **Output**: - A list of integers representing the node indices in the longest path. **Constraints**: - The number of nodes (n) is such that (0 leq n leq 10^4). - The number of edges (e) is such that (0 leq e leq 10^4). - The graph is guaranteed to be acyclic. **Example**: ```python # Input graph = [ [1, 2], # Node 0 has edges to Nodes 1 and 2 [3], # Node 1 has an edge to Node 3 [3], # Node 2 has an edge to Node 3 [4], # Node 3 has an edge to Node 4 [] # Node 4 has no outgoing edges ] # Output print(longest_path_dag(graph)) # Possible Output: [0, 2, 3, 4] (or [0, 1, 3, 4] as both are valid longest paths) ``` **Note**: - If there are multiple longest paths, any one of them can be returned. - Ensure edge cases like an empty graph or nodes with no outgoing edges are handled correctly. **Additional Notes**: - You may use helper functions to modularize your code. - Consider using topological sorting as part of your approach since the graph is acyclic. - Make sure to account for large graphs in your solution design.","solution":"def longest_path_dag(graph): from collections import defaultdict, deque def topological_sort(graph): n = len(graph) in_degree = [0] * n for u in range(n): for v in graph[u]: in_degree[v] += 1 queue = deque([u for u in range(n) if in_degree[u] == 0]) topo_order = [] while queue: u = queue.popleft() topo_order.append(u) for v in graph[u]: in_degree[v] -= 1 if in_degree[v] == 0: queue.append(v) return topo_order topo_order = topological_sort(graph) n = len(graph) dist = [-float(\'inf\')] * n predecessor = [-1] * n if topo_order: dist[topo_order[0]] = 0 for u in topo_order: for v in graph[u]: if dist[v] < dist[u] + 1: dist[v] = dist[u] + 1 predecessor[v] = u u = dist.index(max(dist)) longest_path = [] while u != -1: longest_path.append(u) u = predecessor[u] longest_path.reverse() return longest_path"},{"question":"# Sum of All Unique Elements You are given an integer array `nums` where each element appears either once or exactly twice. Your task is to write a function `sum_of_unique(nums: List[int]) -> int` that returns the sum of all unique elements (elements which appear exactly once) in the array. Input * A list `nums` of integers. * It is guaranteed that `nums` will have at least one element and each element is an integer in the range ([-1000, 1000]). The length of `nums` will not exceed 100. Output * A single integer representing the sum of all unique elements in the array. # Constraints * The function should handle the input efficiently and compute the result within a reasonable time frame. * Consider edge cases such as all elements appearing twice or none appearing twice. # Example ```python nums = [4, 5, 7, 5, 6, 7] assert sum_of_unique(nums) == 10 # explanation: 4 + 6 = 10 nums = [10, 10, 20, 30, 40] assert sum_of_unique(nums) == 90 # explanation: 20 + 30 + 40 = 90 nums = [1, 2, 3, 2] assert sum_of_unique(nums) == 4 # explanation: 1 + 3 = 4 ``` Additional Guidelines * Provide a clear explanation of the approach used to solve the problem. * Discuss edge cases and how the function handles them. * Ensure the code is optimized to handle the given constraints without excessive memory usage or runtime.","solution":"from typing import List def sum_of_unique(nums: List[int]) -> int: Returns the sum of all unique elements in the nums array. from collections import Counter # Use Counter to count the frequency of each element counts = Counter(nums) # Sum elements that appear only once return sum(num for num, count in counts.items() if count == 1)"},{"question":"# Problem Statement You are given an integer array `nums` and an integer `k`. Your task is to determine if there exists any subarray of `nums` with a sum equal to `k`. # Function Signature ```python def has_subarray_sum(nums: List[int], k: int) -> bool: pass ``` # Input * `nums` (1 <= len(nums) <= 10<sup>5</sup>): An array of integers. * `k` (-10<sup>9</sup> <= k <= 10<sup>9</sup>): An integer representing the target sum value. # Output * Return `True` if there is any subarray of `nums` that sums to `k`, otherwise return `False`. # Example ```python assert has_subarray_sum([1, 2, 3, 4, 5], 9) == True assert has_subarray_sum([1, 2, 3], 6) == True assert has_subarray_sum([1, 2, 3], 7) == False ``` # Constraints * `nums` is a list of integers with both positive and negative values allowed. * The sum `k` can be both positive and negative. * You must implement this function efficiently with regard to time complexity. # Scenarios 1. For `nums = [1, 2, 3, 4, 5]` and `k = 9`, the function returns `True` because the subarray `[2, 3, 4]` sums to `9`. 2. For `nums = [1, 2, 3]` and `k = 6`, the function returns `True` because the subarray `[1, 2, 3]` sums to `6`. 3. For `nums = [1, 2, 3]` and `k = 7`, the function returns `False` because no subarray sums to `7`. # Hints - Consider using a hash map to store the sum of elements up to the current index and check if any previous sum satisfies the condition. - You can use the sliding window technique to manage the subarray sum within linear time complexity.","solution":"from typing import List def has_subarray_sum(nums: List[int], k: int) -> bool: Determines if there exists any subarray of nums with a sum equal to k. current_sum = 0 sum_map = {} for num in nums: current_sum += num if current_sum == k: return True if (current_sum - k) in sum_map: return True sum_map[current_sum] = True return False"},{"question":"Custom K-Means Clustering Implementation and Analysis You are tasked with implementing the K-Means clustering algorithm from scratch without using scikit-learn\'s `KMeans`. Your implementation will be applied to the provided Wine dataset. The task includes handling the data correctly, initializing centroids, assigning clusters, updating centroids, and iterating until convergence. Additionally, you are required to analyze the clustering performance using internal validation metrics. Function Specifications 1. **data_preparation(data: dict) -> np.ndarray**: - **Input**: A dictionary containing \'data\' with a feature array. - **Output**: A numpy array containing the features. 2. **initialize_centroids(features: np.ndarray, k: int) -> np.ndarray**: - **Input**: - `features`: numpy array of shape `(n_samples, n_features)` containing the feature data. - `k`: integer representing the number of clusters. - **Output**: numpy array of shape `(k, n_features)` initialized with centroids. 3. **assign_clusters(features: np.ndarray, centroids: np.ndarray) -> np.ndarray**: - **Input**: - `features`: numpy array of shape `(n_samples, n_features)`. - `centroids`: numpy array of shape `(k, n_features)`. - **Output**: numpy array of shape `(n_samples,)` containing the cluster assignments. 4. **update_centroids(features: np.ndarray, assignments: np.ndarray, k: int) -> np.ndarray**: - **Input**: - `features`: numpy array of shape `(n_samples, n_features)`. - `assignments`: numpy array of shape `(n_samples,)` containing the current cluster assignments. - `k`: integer representing the number of clusters. - **Output**: numpy array of shape `(k, n_features)` containing the updated centroids. 5. **kmeans_clustering(features: np.ndarray, k: int, max_iters: int = 300) -> tuple**: - **Input**: - `features`: numpy array of shape `(n_samples, n_features)`. - `k`: integer representing the number of clusters. - `max_iters`: integer representing the maximum number of iterations. - **Output**: tuple containing: - Final centroids of shape `(k, n_features)`. - Final cluster assignments of shape `(n_samples,)`. Additional Requirements - You need to handle the situation when the centroids remain unchanged between iterations. - Provide a function to calculate internal validation metrics, such as the silhouette score, to evaluate the clustering performance. Function Specifications for Validation 6. **calculate_silhouette_score(features: np.ndarray, assignments: np.ndarray) -> float**: - **Input**: - `features`: numpy array of shape `(n_samples, n_features)`. - `assignments`: numpy array of shape `(n_samples,)` containing cluster assignments. - **Output**: Calculated silhouette score. # Example ```python # Expected usage example: # Load Wine dataset wine = load_wine() # Prepare data features = data_preparation(wine) # Number of clusters k = 3 # Apply K-Means clustering centroids, assignments = kmeans_clustering(features, k) # Compute silhouette score silhouette = calculate_silhouette_score(features, assignments) print(f\'Silhouette Score: {silhouette:.2f}\') ``` # Constraints - Assume the dataset is correctly formatted as provided by sklearn\'s `load_wine()`. - Your solution should be efficient and handle large datasets effectively. - Write clean, readable, and well-documented code.","solution":"import numpy as np from sklearn.datasets import load_wine from sklearn.metrics import silhouette_score def data_preparation(data: dict) -> np.ndarray: Prepares the feature array from the input data dictionary. Args: data (dict): A dictionary containing \'data\' with a feature array. Returns: np.ndarray: Numpy array containing the features. return np.array(data[\'data\']) def initialize_centroids(features: np.ndarray, k: int) -> np.ndarray: Initializes the centroids for K-Means clustering. Args: features (np.ndarray): Feature data array. k (int): Number of clusters. Returns: np.ndarray: Initialized centroids. np.random.seed(42) random_indices = np.random.permutation(len(features)) centroids = features[random_indices[:k]] return centroids def assign_clusters(features: np.ndarray, centroids: np.ndarray) -> np.ndarray: Assigns each feature to the nearest centroid. Args: features (np.ndarray): Feature data array. centroids (np.ndarray): Current centroids. Returns: np.ndarray: Cluster assignments for each feature. distances = np.linalg.norm(features[:, np.newaxis] - centroids, axis=2) return np.argmin(distances, axis=1) def update_centroids(features: np.ndarray, assignments: np.ndarray, k: int) -> np.ndarray: Updates the centroids based on the current assignments. Args: features (np.ndarray): Feature data array. assignments (np.ndarray): Current cluster assignments. k (int): Number of clusters. Returns: np.ndarray: Updated centroids. new_centroids = np.array([features[assignments == i].mean(axis=0) for i in range(k)]) return new_centroids def kmeans_clustering(features: np.ndarray, k: int, max_iters: int = 300) -> tuple: Performs K-Means clustering on the features. Args: features (np.ndarray): Feature data array. k (int): Number of clusters. max_iters (int): Maximum number of iterations. Returns: tuple: Final centroids and cluster assignments. centroids = initialize_centroids(features, k) for _ in range(max_iters): assignments = assign_clusters(features, centroids) new_centroids = update_centroids(features, assignments, k) if np.all(centroids == new_centroids): break centroids = new_centroids return centroids, assignments def calculate_silhouette_score(features: np.ndarray, assignments: np.ndarray) -> float: Calculates the silhouette score for the given cluster assignments. Args: features (np.ndarray): Feature data array. assignments (np.ndarray): Cluster assignments. Returns: float: Silhouette score. return silhouette_score(features, assignments) # Example usage (this part would be in a script or REPL, not in the solution function definitions): # wine = load_wine() # features = data_preparation(wine) # k = 3 # centroids, assignments = kmeans_clustering(features, k) # silhouette = calculate_silhouette_score(features, assignments) # print(f\'Silhouette Score: {silhouette:.2f}\')"},{"question":"# Array Transformations: Change Detection Context: In many real-world applications, it\'s necessary to detect changes in a dataset over time. This problem involves transforming an array of integers according to specific rules and determining if certain changes occur repeatedly within a given threshold. Problem Statement: Write a function `detect_repeated_changes(arr: List[int], transformations: List[Tuple[int, int, int]], threshold: int) -> int` that detects how many times a specific change has occurred consecutively across multiple transformations. * The `arr` is an initial list of integers. * `transformations` is a list of transformations where each transformation is a tuple `(index, operation, value)`. * `index` is the zero-based index in the array `arr`. * `operation` is an integer representing the type of operation: `1` for addition and `2` for multiplication. * `value` is the integer to add or multiply at the given `index`. * The `threshold` is an integer representing the number of consecutive transformations that need to produce the same result for it to be counted as a repeated change. Input: * `arr` - a list of integers where `1 ≤ len(arr) ≤ 1000`. * `transformations` - a list of tuples representing the transformations. * `threshold` - an integer representing the threshold for consecutive changes (1 ≤ threshold ≤ 100). Output: * Return an integer representing the number of times a specific change has occurred exactly `threshold` times consecutively. Example: ```python arr = [1, 2, 3] transformations = [ (0, 1, 4), (0, 2, 2), (2, 1, -1), (0, 1, 4), (0, 1, 4), (1, 2, 3) ] threshold = 2 print(detect_repeated_changes(arr, transformations, threshold)) ``` Expected Output: ```python 1 ``` Constraints: 1. Ensure that all indices in `transformations` are valid within the bounds of `arr`. 2. The repeated change must be detected within the exact `threshold` number of times, not more or less. Function Signature: ```python from typing import List, Tuple def detect_repeated_changes(arr: List[int], transformations: List[Tuple[int, int, int]], threshold: int) -> int: pass ``` Notes: * Consider edge cases where the array `arr` is empty or transformations list is empty. * Optimize your solution to handle the edge cases efficiently within the given constraints. --- The new question aims to test proficiency in array manipulations, use of tuples for maintaining operations, and counting subarray patterns, thus aligning with typical competency expectations for coding assessments.","solution":"from typing import List, Tuple def detect_repeated_changes(arr: List[int], transformations: List[Tuple[int, int, int]], threshold: int) -> int: change_count = 0 # Track the current number of consecutive changes current_streak = 0 last_change = None for index, operation, value in transformations: # Apply the transformation if operation == 1: # Addition new_value = arr[index] + value elif operation == 2: # Multiplication new_value = arr[index] * value change = (index, operation, value) # Check if this change is the same as the last one if change == last_change: current_streak += 1 else: current_streak = 1 last_change = change # Increment the change count if current streak meets the threshold if current_streak == threshold: change_count += 1 # Update the array arr[index] = new_value return change_count"},{"question":"# Problem Statement You are required to implement a function that takes a string and returns the first non-repeating character in it. If all characters are repeating or the string is empty, return an underscore (\'_\'). Your implementation should be optimized for efficiency. # Input Format * A single string ( s ) where the length of the string can range from ( 0 ) to ( 10^5 ). # Output Format * A single character which is the first non-repeating character or an underscore (\'_\') if no such character exists. # Constraints * The string can contain only lowercase and uppercase English letters. # Example ```python For an input string \\"stress\\", the output should be \'t\'. For an input string \\"aabbcc\\", the output should be \'_\'. ``` # Instructions 1. Do not use additional data structures apart from basic arrays or dictionaries. 2. Optimize for time complexity. # Solution Template Here is a starting template for your solution: ```python def first_non_repeating_char(string): char_count = {} # First pass to count characters for char in string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass to find the first non-repeating character for char in string: if char_count[char] == 1: return char return \'_\' if __name__ == \\"__main__\\": user_input = input(\\"Enter the string:n\\").strip() print(first_non_repeating_char(user_input)) ``` In your implementation, make sure to handle edge cases effectively and test the function against a variety of input scenarios before finalizing your code.","solution":"def first_non_repeating_char(s): This function finds the first non-repeating character in a given string. If all characters are repeating or the string is empty, it returns an underscore (\'_\'). char_count = {} # First pass to count characters for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass to find the first non-repeating character for char in s: if char_count[char] == 1: return char return \'_\'"},{"question":"# Question Description You are given a string consisting of only digits from \'0\' to \'9\' and a target integer. Your task is to write a Python function that inserts the operators `+`, `-`, or `*` between the digits to form valid mathematical expressions, such that the expression evaluates to the target integer. The function should return all possible expressions that can be formed in this way. Your function should use recursion (backtracking) to explore all possible ways to insert the operators and validate each expression. # Function Signature ```python def add_operators(num: str, target: int) -> list[str]: Generates all possible expressions by adding operators between the digits of `num` that evaluate to the given `target`. Parameters: num (str): The input string containing digits. target (int): The target integer the expressions should evaluate to. Returns: list[str]: A list containing all possible valid expressions. Constraints: - 1 <= len(num) <= 10 - The input string contains only digits from \'0\' to \'9\' - The target integer can be any value. Note: - Do not add additional leading zeros in any operand. ``` # Input - A string `num` consisting of digits from \'0\' to \'9\', with length between 1 and 10. - An integer `target`, which is the value you want the expressions to evaluate to. # Output - A list of strings, where each string represents a valid expression that evaluates to the target. # Example ```python >>> add_operators(\\"123\\", 6) [\\"1+2+3\\", \\"1*2*3\\"] >>> add_operators(\\"232\\", 8) [\\"2*3+2\\", \\"2+3*2\\"] >>> add_operators(\\"105\\", 5) [\\"1*0+5\\", \\"10-5\\"] >>> add_operators(\\"00\\", 0) [\\"0+0\\", \\"0-0\\", \\"0*0\\"] >>> add_operators(\\"3456237490\\", 9191) [] ``` # Constraints - Ensure the input string `num` contains only digits and has a length between 1 and 10. - Make sure no operand has leading zeros. - The function should handle cases where no valid expression can be formed. # Notes - Recursive helper functions can be used to explore all possible insertions of the operators. - Validate each expression to ensure it correctly evaluates to the target.","solution":"def add_operators(num: str, target: int) -> list[str]: def backtrack(index, prev_operand, current_operand, value, string): if index == len(num): if value == target and current_operand == 0: results.append(\\"\\".join(string[1:])) return current_operand = current_operand * 10 + int(num[index]) str_operand = str(current_operand) if current_operand > 0: backtrack(index + 1, prev_operand, current_operand, value, string) string.append(\'+\') string.append(str_operand) backtrack(index + 1, current_operand, 0, value + current_operand, string) string.pop() string.pop() if string: string.append(\'-\') string.append(str_operand) backtrack(index + 1, -current_operand, 0, value - current_operand, string) string.pop() string.pop() string.append(\'*\') string.append(str_operand) backtrack(index + 1, current_operand * prev_operand, 0, value - prev_operand + (current_operand * prev_operand), string) string.pop() string.pop() results = [] if num: backtrack(0, 0, 0, 0, []) return results"},{"question":"# Segment Tree for Range Sum Queries and Updates Background Scenario Segment Trees are versatile data structures for handling range queries efficiently. These trees are particularly useful when dealing with problems that involve dynamic array operations, such as range sum queries and updates. You are tasked with implementing a Segment Tree that can handle these operations on an array of integers. Function Description Implement three functions: 1. `construct_segment_tree(arr: List[int]) -> SegmentTreeNode`: This function takes an integer array and constructs the segment tree. 2. `range_sum_query(tree: SegmentTreeNode, left: int, right: int) -> int`: This function takes the constructed segment tree and a range [left, right], and returns the sum of the elements within the range. 3. `update_value(tree: SegmentTreeNode, index: int, value: int) -> None`: This function takes the constructed segment tree, an index, and a new value, and updates the array element at that index, then adjusts the segment tree accordingly. Expected Input and Output: 1. `construct_segment_tree(arr: List[int]) -> SegmentTreeNode` * **Input**: A list `arr` of length `n` containing integers. * **Output**: The root node of the constructed segment tree. 2. `range_sum_query(tree: SegmentTreeNode, left: int, right: int) -> int` * **Input**: A `SegmentTreeNode` representing the root of the segment tree and two integers, `left` and `right`. * **Output**: An integer representing the sum of the elements in the range. 3. `update_value(tree: SegmentTreeNode, index: int, value: int) -> None` * **Input**: A `SegmentTreeNode` representing the root of the segment tree, an integer `index`, and an integer `value`. * **Output**: None, but the segment tree should be updated to reflect the change. Constraints: 1. Array length `n` is between 1 and 10^5. 2. `arr` consists of integers where each integer is between -10^5 and 10^5. 3. The time complexity for segment tree construction should be O(n). 4. The time complexity for range queries and updates should aim for O(log n). Specification: ```python class SegmentTreeNode: def __init__( self, start: int, end: int, total: int, left: \'SegmentTreeNode\' = None, right: \'SegmentTreeNode\' = None ) -> None: Initializes a segment tree node. Parameters: start (int): The start index of the range this node represents. end (int): The end index of the range this node represents. total (int): The total sum of the range this node represents. left (SegmentTreeNode): The left child node. right (SegmentTreeNode): The right child node. self.start = start self.end = end self.total = total self.left = left self.right = right def construct_segment_tree(arr: List[int]) -> SegmentTreeNode: Constructs a segment tree for the given array. Parameters: arr (List[int]): The array for which to construct the segment tree. Returns: SegmentTreeNode: The root of the constructed segment tree. # Task implementation here pass def range_sum_query(tree: SegmentTreeNode, left: int, right: int) -> int: Queries the segment tree for the sum of the elements within the range. Parameters: tree (SegmentTreeNode): The root of the segment tree. left (int): The start index of the range. right (int): The end index of the range. Returns: int: The sum of the elements in the range. # Task implementation here pass def update_value(tree: SegmentTreeNode, index: int, value: int) -> None: Updates the value at the specified index in the segment tree. Parameters: tree (SegmentTreeNode): The root of the segment tree. index (int): The index of the element to update. value (int): The new value for the element. Returns: None # Task implementation here pass ``` Example: ```python arr = [1, 3, 5, 7, 9, 11] segment_tree = construct_segment_tree(arr) print(range_sum_query(segment_tree, 1, 3)) # Output: 15 update_value(segment_tree, 1, 10) print(range_sum_query(segment_tree, 1, 3)) # Output: 22 ```","solution":"from typing import List, Tuple class SegmentTreeNode: def __init__( self, start: int, end: int, total: int, left: \'SegmentTreeNode\' = None, right: \'SegmentTreeNode\' = None ) -> None: self.start = start self.end = end self.total = total self.left = left self.right = right def construct_segment_tree(arr: List[int]) -> SegmentTreeNode: def build_tree(start: int, end: int) -> SegmentTreeNode: if start == end: return SegmentTreeNode(start, end, arr[start]) mid = (start + end) // 2 left_child = build_tree(start, mid) right_child = build_tree(mid + 1, end) total = left_child.total + right_child.total return SegmentTreeNode(start, end, total, left_child, right_child) return build_tree(0, len(arr) - 1) def range_sum_query(tree: SegmentTreeNode, left: int, right: int) -> int: def query(node: SegmentTreeNode, left: int, right: int) -> int: if node is None or left > node.end or right < node.start: return 0 if left <= node.start and node.end <= right: return node.total return query(node.left, left, right) + query(node.right, left, right) return query(tree, left, right) def update_value(tree: SegmentTreeNode, index: int, value: int) -> None: def update(node: SegmentTreeNode, index: int, value: int): if node.start == node.end: node.total = value return mid = (node.start + node.end) // 2 if index <= mid: update(node.left, index, value) else: update(node.right, index, value) node.total = node.left.total + node.right.total update(tree, index, value)"},{"question":"# Context Sorting algorithms are fundamental in computer science. One of the well-known techniques is Radix Sort, which efficiently sorts numbers by processing individual digits. Typically, Radix Sort is performed using base 10 (decimal numbers) or base 2 (binary numbers). # Question Write a function `radix_sort_base` that sorts a given list of non-negative integers using Radix Sort for any specified base `b`. The base `b` will always be greater than or equal to 2. # Function Signature ```python def radix_sort_base(array: List[int], base: int) -> List[int]: Sorts the given list using Radix Sort in the specified base. :param array: The list of non-negative integers to be sorted. :param base: The base to be used for sorting. :return: A sorted list in ascending order. ``` # Input * `array`: List of non-negative integers, e.g., `[170, 45, 75, 90, 802, 24, 2, 66]` * `base`: The base to be used for sorting, e.g., `10` # Output * Sorted list of integers in ascending order, e.g., `[2, 24, 45, 66, 75, 90, 170, 802]` # Constraints * The input list `array` can be of any length (including an empty list). * Each element in the array is a non-negative integer. * The base `b` is an integer and `b >= 2`. # Examples ```python assert radix_sort_base([170, 45, 75, 90, 802, 24, 2, 66], 10) == [2, 24, 45, 66, 75, 90, 170, 802] assert radix_sort_base([170, 45, 75, 90, 802, 24, 2, 66], 2) == [2, 24, 45, 66, 75, 90, 170, 802] assert radix_sort_base([5, 3, 8, 7], 16) == [3, 5, 7, 8] assert radix_sort_base([1, 9, 4, 7], 3) == [1, 4, 7, 9] ```","solution":"from typing import List def radix_sort_base(array: List[int], base: int) -> List[int]: Sorts the given list using Radix Sort in the specified base. :param array: The list of non-negative integers to be sorted. :param base: The base to be used for sorting. :return: A sorted list in ascending order. if not array: return array def counting_sort(arr, exp, base): n = len(arr) output = [0] * n count = [0] * base for i in range(n): index = arr[i] // exp count[index % base] += 1 for i in range(1, base): count[i] += count[i - 1] for i in range(n - 1, -1, -1): index = arr[i] // exp output[count[index % base] - 1] = arr[i] count[index % base] -= 1 for i in range(n): arr[i] = output[i] max_num = max(array) exp = 1 while max_num // exp > 0: counting_sort(array, exp, base) exp *= base return array"},{"question":"# Question: Sum of Digits in a String You are given a string that contains a combination of letters and digits. Your task is to write a function to calculate the sum of all digits present in the string. **Function Signature**: `def sum_of_digits(s: str) -> int:` **Input**: - A string `s` where `1 <= len(s) <= 1000`. **Output**: - Return an integer representing the sum of digits in the string. If there are no digits, return `0`. **Constraints**: - The string can contain both uppercase and lowercase letters. - The string may not contain any digits, in which case the sum should be `0`. **Example**: ```python assert sum_of_digits(\\"abc123\\") == 6 assert sum_of_digits(\\"a1b2c3\\") == 6 assert sum_of_digits(\\"hello\\") == 0 assert sum_of_digits(\\"h3ll0\\") == 3 assert sum_of_digits(\\"4you2\\") == 6 ``` **Notes**: 1. Loop through the string and check each character to determine if it is a digit. 2. Use appropriate methods to convert string digits to integers for summing. 3. Ensure the function handles all edge cases, such as strings with no digits or strings consisting entirely of digits. Implement your solution in the following function definition: ```python def sum_of_digits(s: str) -> int: # Your code here ```","solution":"def sum_of_digits(s: str) -> int: Calculate the sum of all digits present in the string. Args: s (str): The input string containing a combination of letters and digits. Returns: int: Sum of all digits in the input string. If no digits are present, return 0. total_sum = 0 for char in s: if char.isdigit(): total_sum += int(char) return total_sum"},{"question":"Labyrinth Path Finder # Context Navigating through labyrinths or mazes is a classic problem that appears in various contexts, including robotics, pathfinding algorithms, and game development. This problem will focus on constructing a solution to navigate a given labyrinth represented as a 2D grid. # Task Write a Python function `find_path_in_labyrinth()` that determines the shortest path from the start position to the end position in a given labyrinth. The labyrinth is represented as a 2D list of integers where: - `0` represents a walkable path - `1` represents an obstacle # Function Signature ```python def find_path_in_labyrinth(labyrinth: List[List[int]], start: Tuple[int, int], end: Tuple[int, int]) -> List[Tuple[int, int]]: pass ``` # Input - `labyrinth`: A 2D list of integers representing the labyrinth grid. - `start`: A tuple of two integers representing the starting coordinates (row, column) in the grid. - `end`: A tuple of two integers representing the ending coordinates (row, column) in the grid. # Output - A list of tuples representing the coordinates of the shortest path from start to end, inclusive. If no path exists, return an empty list. # Requirements - Implement a search algorithm (e.g., Breadth-First Search) to find the shortest path. - Return a list containing the coordinates of each step in the path from start to end. - Handle scenarios where no path exists by returning an empty list. # Constraints 1. The labyrinth will always have at least one row and one column. 2. The start and end coordinates are always valid positions within the grid. 3. The labyrinth will not contain negative values or values above 1. # Example ```python labyrinth = [[0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 0, 0, 0]] start = (0, 0) end = (4, 4) result = find_path_in_labyrinth(labyrinth, start, end) print(result) # Expected output: [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (4, 2), (4, 3), (4, 4)] ``` # Notes - Use data structures such as queues to aid in the pathfinding process. - Carefully handle edge cases where the start or end is surrounded by obstacles, or no valid path exists due to the labyrinth design. - Time complexity should be considered, and the algorithm should handle medium-sized grids efficiently.","solution":"from collections import deque from typing import List, Tuple def find_path_in_labyrinth(labyrinth: List[List[int]], start: Tuple[int, int], end: Tuple[int, int]) -> List[Tuple[int, int]]: rows, cols = len(labyrinth), len(labyrinth[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start, [start])]) visited = set() visited.add(start) while queue: (current_row, current_col), path = queue.popleft() if (current_row, current_col) == end: return path for direction in directions: next_row, next_col = current_row + direction[0], current_col + direction[1] if 0 <= next_row < rows and 0 <= next_col < cols: if (next_row, next_col) not in visited and labyrinth[next_row][next_col] == 0: visited.add((next_row, next_col)) queue.append(((next_row, next_col), path + [(next_row, next_col)])) return []"},{"question":"# Binary Search Tree (BST) Validation and Tree Traversal Context Binary Search Trees (BSTs) are fundamental data structures used in various applications such as database indexing and searching. Given the property that the left subtree of a node contains only nodes with keys less than the node\'s key, and the right subtree only nodes with keys greater, validating whether a tree is a valid BST and performing tree traversals are crucial for many algorithms. Task Write a function to validate if a given binary tree is a valid Binary Search Tree (BST), and implement in-order traversal to confirm it returns a sorted sequence. Specific Objectives 1. **Validation**: Verify if the binary tree adheres to BST properties. 2. **In-order Traversal**: Implement the in-order traversal method to ensure elements are retrieved in sorted order. Function Signatures ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root: TreeNode) -> bool: pass def inorder_traversal(root: TreeNode) -> list: pass ``` Input - `root`: The root node of the binary tree. Output - For `is_valid_bst`: A boolean indicating if the tree is a valid BST. - For `inorder_traversal`: A list of node values obtained from in-order traversal. Constraints - Tree nodes contain integer values within the range ([-10^5, 10^5]). - While checking BST property, ensure considering boundary conditions such as extreme values. Requirements - Validate the BST without using extra space for storing node values. - Ensure the in-order traversal returns a sorted list only if the tree is a valid BST. Example ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root: TreeNode) -> bool: def validate(node, low=-float(\'inf\'), high=float(\'inf\')): if not node: return True if node.val <= low or node.val >= high: return False return validate(node.left, low, node.val) and validate(node.right, node.val, high) return validate(root) def inorder_traversal(root: TreeNode) -> list: result = [] def traverse(node): if node: traverse(node.left) result.append(node.val) traverse(node.right) traverse(root) return result if __name__ == \\"__main__\\": # Example usage root = TreeNode(2) root.left = TreeNode(1) root.right = TreeNode(3) print(is_valid_bst(root)) # Output: True print(inorder_traversal(root)) # Output: [1, 2, 3] root.right.left = TreeNode(2) print(is_valid_bst(root)) # Output: False print(inorder_traversal(root)) # Output: The result may not be ordered since the tree is not a valid BST ``` Good luck!","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root: TreeNode) -> bool: def validate(node, low=-float(\'inf\'), high=float(\'inf\')): if not node: return True if node.val <= low or node.val >= high: return False return validate(node.left, low, node.val) and validate(node.right, node.val, high) return validate(root) def inorder_traversal(root: TreeNode) -> list: result = [] def traverse(node): if node: traverse(node.left) result.append(node.val) traverse(node.right) traverse(root) return result"},{"question":"# Graph Traversal - Shortest Path **Scenario**: As part of your job at a company that implements navigation systems, you need to develop a feature that finds the shortest path between two locations in a city represented as a graph. The graph nodes represent locations and edges represent the roads with weights as the distances between the locations. **Problem**: Implement the function `shortest_path(graph: Dict[str, Dict[str, int]], start: str, end: str) -> Tuple[List[str], int]` that computes the shortest path from the start location to the end location using Dijkstra\'s algorithm. The function should return a tuple containing the list of nodes in the shortest path and the total distance of this path. **Input**: * `graph`: A dictionary where the keys are the node names (locations) and the values are dictionaries with neighboring node names as keys and the distances to these neighbors as values. * `start`: A string representing the starting location. * `end`: A string representing the end location. **Output**: * A tuple where the first element is the list of node names in the order they appear in the shortest path, and the second element is the total distance of this path. **Constraints**: * The graph will contain at least one path from the start to the end. * All nodes have unique names. * The distances are all positive integers. **Example**: ```python graph = { \'A\': {\'B\': 1, \'C\': 4}, \'B\': {\'C\': 2, \'D\': 5}, \'C\': {\'D\': 1}, \'D\': {} } # Find the shortest path from A to D result = shortest_path(graph, \'A\', \'D\') print(result) # Output should be ([\'A\', \'B\', \'C\', \'D\'], 4) ``` **Requirements**: * Implement an efficient solution using Dijkstra\'s algorithm. * Ensure that the returned path is the shortest in terms of total distance.","solution":"import heapq from typing import List, Tuple, Dict def shortest_path(graph: Dict[str, Dict[str, int]], start: str, end: str) -> Tuple[List[str], int]: Compute the shortest path from start to end in a given graph using Dijkstra\'s algorithm. :param graph: The graph represented as a dictionary where keys are node names, and values are dictionaries of neighboring nodes with distances. :param start: The starting node. :param end: The ending node. :return: A tuple containing the list of nodes in the shortest path and the total distance. # Priority queue to store (distance, node, path) queue = [(0, start, [])] # Dictionary to store the shortest known distance to each node distances = {node: float(\'inf\') for node in graph} # Set the distance to the start node to 0 distances[start] = 0 # Set to store the visited nodes visited = set() while queue: # Get the node with the smallest distance current_distance, current_node, path = heapq.heappop(queue) if current_node in visited: continue # Add the current node to the visited set visited.add(current_node) # Append the current node to the path path = path + [current_node] # If we reached the end node, return the path and distance if current_node == end: return (path, current_distance) # Check all neighbors of the current node for neighbor, weight in graph[current_node].items(): distance = current_distance + weight # Only consider this new path if it\'s better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor, path)) return ([], float(\'inf\'))"},{"question":"# Frequent Element Finder **Objective**: Develop a function to identify the most frequent element in a list. **Problem Statement**: Write a function `most_frequent_element(numbers: List[int]) -> int` that takes a list of integers and returns the integer that appears most frequently in the list. In case of a tie (more than one element having the same frequency), return the smallest integer among them. **Constraints**: 1. The input list contains non-null integers. 2. The list\'s length ranges from 1 to 10^5. 3. The integers in the list range from -10^9 to 10^9. **Expected Input and Output**: *Function Signature*: ```python from typing import List def most_frequent_element(numbers: List[int]) -> int: pass ``` - Input: ```python most_frequent_element([1, 3, 1, 3, 2, 1]) ``` - Output: ```python 1 ``` **Examples**: 1. `most_frequent_element([4, 4, 1, 2, 3, 3, 3, 4])` should return `4` because `4` appears the most frequently (3 times). 2. `most_frequent_element([5, 5, 6, 6])` should return `5` because `5` and `6` both appear twice, but `5` is the smallest. 3. `most_frequent_element([7])` should return `7` because `7` is the only element in the list. **Performance Requirements**: 1. Time Complexity: O(n) 2. Space Complexity: O(n) # Additional Information To handle edge cases: 1. If the list contains only one element, the function should return that element. 2. Ensure your function efficiently handles very large lists. Write your function considering the constraints and requirements mentioned. Ensure to handle edge cases and validate the correctness with comprehensive test cases.","solution":"from typing import List from collections import Counter def most_frequent_element(numbers: List[int]) -> int: Returns the most frequent element in the list. In case of a tie, it returns the smallest integer among the most frequent elements. if not numbers: raise ValueError(\\"The input list should not be empty.\\") count = Counter(numbers) max_frequency = max(count.values()) # Get the list of elements with the highest frequency most_frequent = [k for k, v in count.items() if v == max_frequency] # Return the smallest element among the most frequent elements return min(most_frequent)"},{"question":"# Problem Description You need to implement a function to compute the total bill for orders placed in a restaurant by considering special discount rules. The restaurant provides a discount based on the day of the week. If the order is placed on a weekend (Saturday and Sunday), a 10% discount is applied. For weekdays (Monday through Friday), no discount is given. Furthermore, all orders have a fixed sales tax of 5% that should be applied on the discounted price (if applicable). If the input for the day of the week is invalid, the function should raise a `ValueError`. # Function Signature ```python def compute_total_bill( order_amount: float, day_of_week: str ) -> float: pass ``` # Input * **order_amount** (float): A positive float number representing the total amount of the order before discounts and taxes. * **day_of_week** (str): A string representing the day of the week, e.g., \\"Monday\\", \\"Tuesday\\", etc. # Output * **total_bill** (float): A floating-point number representing the final bill amount with appropriate discounts and taxes applied. # Constraints * **order_amount** must be a positive float number. * **day_of_week** must be one of [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"]. * If **order_amount** is not positive or **day_of_week** is invalid, the function should raise a `ValueError`. # Examples ```python >>> compute_total_bill(100.0, \\"Saturday\\") 94.5 >>> compute_total_bill(200.0, \\"Wednesday\\") 210.0 >>> compute_total_bill(150.0, \\"Sunday\\") 141.75 >>> compute_total_bill(50.0, \\"Monday\\") 52.5 >>> compute_total_bill(0, \\"Monday\\") Traceback (most recent call last): ... ValueError: Order amount must be positive. >>> compute_total_bill(100.0, \\"Funday\\") Traceback (most recent call last): ... ValueError: Invalid day of week. ``` # Note - Only the days of the week mentioned in the constraint are valid. - Ensure to consider edge cases like invalid day names and non-positive order amounts. - The discount is applied before adding the tax.","solution":"def compute_total_bill(order_amount: float, day_of_week: str) -> float: Computes the total bill amount including discounts and taxes based on the day of the week. :param order_amount: The initial amount of the order before discounts and taxes. :param day_of_week: The day on which the order is placed. :return: The final bill amount after applying any discounts and taxes. :raises ValueError: If the order_amount is not positive or if the day_of_week is invalid. weekdays = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\"] weekends = [\\"Saturday\\", \\"Sunday\\"] # Validate order amount if order_amount <= 0: raise ValueError(\\"Order amount must be positive.\\") # Validate day of the week if day_of_week not in weekdays + weekends: raise ValueError(\\"Invalid day of week.\\") # Apply discount if it is a weekend if day_of_week in weekends: order_amount *= 0.9 # Apply 10% discount # Apply sales tax total_bill = order_amount * 1.05 # Apply 5% tax return total_bill"},{"question":"# Bookstore Inventory Management Your task is to develop a feature for a Bookstore Inventory Management system that tracks book details and calculates the total value of stock. # Objective Implement a class `Book` to represent a book and a class `Inventory` to manage a collection of books. The `Inventory` class should be able to add books, remove books by their ISBN, and calculate the total inventory value. # Implementation Details Class: `Book` 1. **Attributes**: - `title`: a string representing the title of the book. - `author`: a string representing the author of the book. - `isbn`: a string representing the ISBN of the book. - `price`: a float representing the price of the book. - `quantity`: an integer representing the number of copies in stock. 2. **Initializer**: - Initializes all attributes. 3. **Methods**: - `__str__`: Returns a string representation of the book details. Class: `Inventory` 1. **Attributes**: - `books`: a list to store `Book` objects. 2. **Initializer**: - Initializes the `books` list. 3. **Methods**: - `add_book(book: Book) -> None`: Adds a `Book` object to the inventory. - `remove_book(isbn: str) -> bool`: Removes a book from inventory by its ISBN. Returns `True` if the book was removed, `False` otherwise. - `get_total_value() -> float`: Returns the total value of all books in the inventory. # Class Signature ```python class Book: def __init__(self, title: str, author: str, isbn: str, price: float, quantity: int) -> None: ... def __str__(self) -> str: ... class Inventory: def __init__(self) -> None: ... def add_book(self, book: Book) -> None: ... def remove_book(self, isbn: str) -> bool: ... def get_total_value(self) -> float: ... ``` # Example ```python # Example Usage book1 = Book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", \\"1234567890\\", 10.99, 3) book2 = Book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", \\"1234567891\\", 8.99, 5) inventory = Inventory() inventory.add_book(book1) inventory.add_book(book2) print(inventory.get_total_value()) # Output: 89.88 print(inventory.remove_book(\\"1234567890\\")) # Output: True print(inventory.get_total_value()) # Output: 44.95 print(book1) # Output: \\"The Great Gatsby by F. Scott Fitzgerald, ISBN: 1234567890, Price: 10.99, Quantity: 3\\" ``` # Constraints - ISBN will be unique for each book. - Book price and quantity will be non-negative. Ensure your implementation properly handles edge cases and maintains performance for inventories containing a large number of books.","solution":"class Book: def __init__(self, title: str, author: str, isbn: str, price: float, quantity: int) -> None: self.title = title self.author = author self.isbn = isbn self.price = price self.quantity = quantity def __str__(self) -> str: return f\\"{self.title} by {self.author}, ISBN: {self.isbn}, Price: {self.price:.2f}, Quantity: {self.quantity}\\" class Inventory: def __init__(self) -> None: self.books = [] def add_book(self, book: Book) -> None: self.books.append(book) def remove_book(self, isbn: str) -> bool: for i, book in enumerate(self.books): if book.isbn == isbn: del self.books[i] return True return False def get_total_value(self) -> float: return sum(book.price * book.quantity for book in self.books)"},{"question":"# Array Manipulation: Efficient Range Updates In this task, you are required to implement an efficient way to manage multiple updates to an array where each update is a range of indices. Scenario: You are in charge of maintaining an array of integers for a web application that performs bulk updates on the array\'s elements over various ranges. Each update operation specifies a range and a value to be added to all elements within that range. Objective: Implement a function `apply_updates` that takes an integer array and a list of update operations. Each update operation specifies a start index, an end index, and a value to add. The function should apply all updates efficiently. Additionally, implement a function `get_final_array` that returns the updated array after all updates are applied. # Specifications: 1. Functions: * `apply_updates` - Takes an integer array and a list of update operations, and applies each update. * `get_final_array` - Takes the array with all applied updates and returns the final updated array. 2. Input/Output Formats: * **Input**: * For `apply_updates`: * `array`: A list of integers. * `updates`: A list of tuples, each containing three integers `(start_index, end_index, value)` indicating the start and end indices (inclusive) of the range to be updated, and the value to add. * For `get_final_array`: * `array`: The list of integers after applying all updates. * **Output**: * For `apply_updates`: The function does not need to return anything. It modifies the `array` in place. * For `get_final_array`: A list of integers representing the final updated array. Function Signatures: ```python def apply_updates(array: list, updates: list) -> None: pass def get_final_array(array: list) -> list: pass ``` Example Usage: ```python array = [0, 0, 0, 0, 0] updates = [(0, 2, 10), (1, 4, 5)] apply_updates(array, updates) final_array = get_final_array(array) print(final_array) # Output: [10, 15, 15, 5, 5] ``` Constraints: * The length of the `array` is between 1 and 10^5. * The number of update operations is between 1 and 10^5. * Start and end indices are valid indices within the array. * The value to add in each update operation is an integer.","solution":"def apply_updates(array: list, updates: list) -> None: Applies the updates to the array using a difference array technique. Args: array (list): The array to be updated. updates (list): List of updates, where each update is a tuple (start_index, end_index, value). n = len(array) diff = [0] * (n + 1) # Applying range increments using the difference array for start, end, value in updates: diff[start] += value if end + 1 < n: diff[end + 1] -= value # Calculating the final values in the array using the difference array array[0] += diff[0] for i in range(1, n): diff[i] += diff[i - 1] array[i] += diff[i] def get_final_array(array: list) -> list: Returns the updated array after all updates. Args: array (list): The array post updates to be returned. Returns: list: The updated array. return array"},{"question":"# Question You have been assigned to build a basic inventory management system for a small bookstore. The system needs to facilitate the core operations of adding, removing, and searching books in the inventory. Each book is represented by a unique identifier (ISBN), a title, and an author. Function Specifications: 1. **add_book(inventory: Dict[str, Dict[str, str]], isbn: str, title: str, author: str) -> None** * Adds a new book to the `inventory`. The `isbn` is the key, and the value is a dictionary containing the `title` and `author`. * If a book with the same ISBN already exists, do not add it again. 2. **remove_book(inventory: Dict[str, Dict[str, str]], isbn: str) -> bool** * Removes a book from the `inventory` using the `isbn`. * Returns `True` if the book was found and removed, otherwise `False`. 3. **search_books_by_title(inventory: Dict[str, Dict[str, str]], title: str) -> List[str]** * Searches for books that contain the given `title` string (case-insensitive) in their title. * Returns a list of ISBNs for the books that match the search criteria. 4. **search_books_by_author(inventory: Dict[str, Dict[str, str]], author: str) -> List[str]** * Searches for books by the given `author` (case-insensitive). * Returns a list of ISBNs for the books that match the search criteria. Input/Output Requirements: * The `inventory` is represented as a dictionary where each key is an ISBN (string), and each value is a dictionary with `title` and `author` as keys. * The `isbn`, `title`, and `author` are all strings. * The returned list from search functions should be sorted in ascending order of ISBNs. Constraints: * Ensure the `inventory` can handle up to 10,000 books efficiently. * ISBNs are unique and guaranteed to be valid strings. * Maintain O(1) time complexity for adding and removing books. * Aim for O(n) complexity for the search functions, where n is the number of books in the inventory. Example: ```python def test_inventory_management(): inventory = {} add_book(inventory, \\"978-3-16-148410-0\\", \\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\") add_book(inventory, \\"978-0-14-118263-6\\", \\"1984\\", \\"George Orwell\\") add_book(inventory, \\"978-0-452-28423-4\\", \\"To Kill a Mockingbird\\", \\"Harper Lee\\") assert remove_book(inventory, \\"978-3-16-148410-0\\") == True assert remove_book(inventory, \\"978-3-16-148410-0\\") == False assert search_books_by_title(inventory, \\"1984\\") == [\\"978-0-14-118263-6\\"] assert search_books_by_author(inventory, \\"Harper Lee\\") == [\\"978-0-452-28423-4\\"] test_inventory_management() ``` Additional Context: This system will enable the bookstore owner to keep track of their inventory efficiently and automate basic operations. The search functionality will help quickly locate books by either title or author, and removing books will be a straightforward process ensuring accurate representation of the inventory.","solution":"from typing import Dict, List def add_book(inventory: Dict[str, Dict[str, str]], isbn: str, title: str, author: str) -> None: Adds a book to the inventory if the ISBN does not already exist. if isbn not in inventory: inventory[isbn] = {\'title\': title, \'author\': author} def remove_book(inventory: Dict[str, Dict[str, str]], isbn: str) -> bool: Removes a book from the inventory by its ISBN. Returns True if the book was found and removed, otherwise False. if isbn in inventory: del inventory[isbn] return True return False def search_books_by_title(inventory: Dict[str, Dict[str, str]], title: str) -> List[str]: Searches for books by title (case-insensitive). Returns a sorted list of ISBNs matching the search criteria. title = title.lower() result = [isbn for isbn, details in inventory.items() if title in details[\'title\'].lower()] return sorted(result) def search_books_by_author(inventory: Dict[str, Dict[str, str]], author: str) -> List[str]: Searches for books by author (case-insensitive). Returns a sorted list of ISBNs matching the search criteria. author = author.lower() result = [isbn for isbn, details in inventory.items() if author in details[\'author\'].lower()] return sorted(result)"},{"question":"# Problem Statement You\'re tasked with writing a function to find the longest contiguous subarray with an equal number of 0s and 1s. Balancing subarrays like these is a common challenge in data structure optimization for various analytical applications. # The context A data analytics company needs your help to develop a feature that identifies balanced subarrays in their binary data streams. This feature will help in ensuring even distribution of binary events which is crucial for their analytics engine. # Function Specification Implement the `findLongestBalancedSubarray` function that returns the length of the longest contiguous subarray that contains an equal number of 0s and 1s. Function Signature ```python def findLongestBalancedSubarray(arr: List[int]) -> int: pass ``` Inputs * `arr`: A list of integers consisting of only 0s and 1s. Outputs * An integer representing the length of the longest balanced subarray. Constraints * The length of `arr` will be between 1 and 10^5. * The elements of `arr` will be only 0s and 1s. # Example ```python result = findLongestBalancedSubarray([0, 1, 0, 0, 1, 1, 0]) print(result) # Expected output: 6 ``` # Hints * Consider how the cumulative sum could be used to track the balance between the numbers of 0s and 1s. * Use a dictionary to store the first occurrence of cumulative sum values to help in identifying the longest subarray. # Solution Approach 1. Use a transformed array that considers 0s as -1s, thereby transforming the problem into finding the longest subarray with sum 0. 2. Maintain a cumulative sum and use a hash map to store the first occurrence of each cumulative sum value. 3. For each index, check if the cumulative sum has been seen before; if so, calculate the subarray length. 4. Update the maximum length whenever a longer subarray is found. By analyzing patterns and similarities with the provided questions, this newly created question fits seamlessly into the existing set in terms of style, complexity, and scope. It introduces a unique problem scenario while adhering to the guidelines and maintains the technical rigor expected of a coding assessment question.","solution":"from typing import List def findLongestBalancedSubarray(arr: List[int]) -> int: Finds the length of the longest contiguous subarray with an equal number of 0s and 1s. # Replace 0 with -1 for ease of calculation. transformed = [-1 if x == 0 else 1 for x in arr] sum_index_map = {0: -1} # Cumulative sum to its first index map max_length = 0 cumulative_sum = 0 for i, num in enumerate(transformed): cumulative_sum += num if cumulative_sum in sum_index_map: max_length = max(max_length, i - sum_index_map[cumulative_sum]) else: sum_index_map[cumulative_sum] = i return max_length"},{"question":"# Sudoku Solver Objective Implement a Sudoku solver that fills in the empty cells of a Sudoku board. The board is a 9x9 grid partially filled with digits from 1 to 9, and empty cells represented by the character \'.\'. Input * A 9x9 grid `board` represented as a list of lists. Each inner list contains 9 characters, which can be digits (\'1\'-\'9\') or \'.\'. Output * Modify the input grid `board` in-place, filling in the empty cells to solve the Sudoku puzzle. Constraints 1. The input grid will be a valid Sudoku puzzle (including partially filled grids). 2. The solution must uniquely solve the Sudoku puzzle. 3. You do not need to return the grid; modify it in-place. Examples ```python # Example 1: board = [ [\'5\', \'3\', \'.\', \'.\', \'7\', \'.\', \'.\', \'.\', \'.\'], [\'6\', \'.\', \'.\', \'1\', \'9\', \'5\', \'.\', \'.\', \'.\'], [\'.\', \'9\', \'8\', \'.\', \'.\', \'.\', \'.\', \'6\', \'.\'], [\'8\', \'.\', \'.\', \'.\', \'6\', \'.\', \'.\', \'.\', \'3\'], [\'4\', \'.\', \'.\', \'8\', \'.\', \'3\', \'.\', \'.\', \'1\'], [\'7\', \'.\', \'.\', \'.\', \'2\', \'.\', \'.\', \'.\', \'6\'], [\'.\', \'6\', \'.\', \'.\', \'.\', \'.\', \'2\', \'8\', \'.\'], [\'.\', \'.\', \'.\', \'4\', \'1\', \'9\', \'.\', \'.\', \'5\'], [\'.\', \'.\', \'.\', \'.\', \'8\', \'.\', \'.\', \'7\', \'9\'] ] solve_sudoku(board) # The board should be modified in-place to: # [ # [\'5\', \'3\', \'4\', \'6\', \'7\', \'8\', \'9\', \'1\', \'2\'], # [\'6\', \'7\', \'2\', \'1\', \'9\', \'5\', \'3\', \'4\', \'8\'], # [\'1\', \'9\', \'8\', \'3\', \'4\', \'2\', \'5\', \'6\', \'7\'], # [\'8\', \'5\', \'9\', \'7\', \'6\', \'1\', \'4\', \'2\', \'3\'], # [\'4\', \'2\', \'6\', \'8\', \'5\', \'3\', \'7\', \'9\', \'1\'], # [\'7\', \'1\', \'3\', \'9\', \'2\', \'4\', \'8\', \'5\', \'6\'], # [\'9\', \'6\', \'1\', \'5\', \'3\', \'7\', \'2\', \'8\', \'4\'], # [\'2\', \'8\', \'7\', \'4\', \'1\', \'9\', \'6\', \'3\', \'5\'], # [\'3\', \'4\', \'5\', \'2\', \'8\', \'6\', \'1\', \'7\', \'9\'] # ] ``` Feel free to modify the board as required to test your solution. Ensure your implementation can handle all valid Sudoku puzzles and fill in the empty cells correctly.","solution":"def solve_sudoku(board): def is_valid(r, c, k): for i in range(9): if board[r][i] == k: return False if board[i][c] == k: return False if board[r//3*3 + i//3][c//3*3 + i%3] == k: return False return True def solve(): for i in range(9): for j in range(9): if board[i][j] == \'.\': for k in \'123456789\': if is_valid(i, j, k): board[i][j] = k if solve(): return True board[i][j] = \'.\' return False return True solve()"},{"question":"# Question: Neural Network Activation Functions As part of a deep learning module, you are tasked with implementing three commonly used activation functions and their corresponding derivatives. These are crucial for understanding how neural networks learn and are used in the backpropagation algorithm. # Function Requirements 1. **Sigmoid Activation Function**: - **Function Name**: `sigmoid` - **Parameters**: - `x` (ndarray): A NumPy array of any shape representing the input to the activation function. - **Returns**: - A NumPy array of the same shape as `x`, with the sigmoid function applied to each element. 2. **ReLU (Rectified Linear Unit) Activation Function**: - **Function Name**: `relu` - **Parameters**: - `x` (ndarray): A NumPy array of any shape representing the input to the activation function. - **Returns**: - A NumPy array of the same shape as `x`, with the ReLU function applied to each element. 3. **Tanh Activation Function**: - **Function Name**: `tanh` - **Parameters**: - `x` (ndarray): A NumPy array of any shape representing the input to the activation function. - **Returns**: - A NumPy array of the same shape as `x`, with the tanh function applied to each element. 4. **Derivative of Sigmoid Activation Function**: - **Function Name**: `sigmoid_derivative` - **Parameters**: - `x` (ndarray): A NumPy array of any shape representing the input to the activation function. - **Returns**: - A NumPy array of the same shape as `x`, representing the derivative of the sigmoid function applied to each element. 5. **Derivative of ReLU Activation Function**: - **Function Name**: `relu_derivative` - **Parameters**: - `x` (ndarray): A NumPy array of any shape representing the input to the activation function. - **Returns**: - A NumPy array of the same shape as `x`, representing the derivative of the ReLU function applied to each element. 6. **Derivative of Tanh Activation Function**: - **Function Name**: `tanh_derivative` - **Parameters**: - `x` (ndarray): A NumPy array of any shape representing the input to the activation function. - **Returns**: - A NumPy array of the same shape as `x`, representing the derivative of the tanh function applied to each element. # Constraints - The input array `x` will contain real numbers and can have any shape. - The implementation should use NumPy operations to ensure compatibility and efficiency. - Use only NumPy library; any other dependency will cause the solution to be rejected. # Example Given the input array `x` as shown below: ```python x = np.array([-1.0, 0.0, 1.0]) ``` **Sigmoid Example Call**: ```python sigmoid_output = sigmoid(x) ``` **ReLU Example Call**: ```python relu_output = relu(x) ``` **Tanh Example Call**: ```python tanh_output = tanh(x) ``` **Sigmoid Derivative Example Call**: ```python sigmoid_deriv_output = sigmoid_derivative(x) ``` **ReLU Derivative Example Call**: ```python relu_deriv_output = relu_derivative(x) ``` **Tanh Derivative Example Call**: ```python tanh_deriv_output = tanh_derivative(x) ``` Write your implementation for `sigmoid`, `relu`, `tanh`, `sigmoid_derivative`, `relu_derivative`, and `tanh_derivative` functions.","solution":"import numpy as np def sigmoid(x): Applies the sigmoid activation function to the input array. return 1 / (1 + np.exp(-x)) def relu(x): Applies the ReLU activation function to the input array. return np.maximum(0, x) def tanh(x): Applies the tanh activation function to the input array. return np.tanh(x) def sigmoid_derivative(x): Computes the derivative of the sigmoid activation function. s = sigmoid(x) return s * (1 - s) def relu_derivative(x): Computes the derivative of the ReLU activation function. return np.where(x > 0, 1, 0) def tanh_derivative(x): Computes the derivative of the tanh activation function. return 1 - np.tanh(x)**2"},{"question":"# Longest Common Subsequence **Problem Statement**: You are given two strings, `s1` and `s2`. Your task is to find and return the length of their longest common subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. # Function Signature ```python def longest_common_subsequence(s1: str, s2: str) -> int: pass ``` # Input - Two strings `s1` and `s2`. - The lengths of `s1` and `s2` are between 1 and 1000. # Output - Return an integer that represents the length of the longest common subsequence between `s1` and `s2`. # Constraints - `1 <= len(s1), len(s2) <= 1000` # Example ```python s1 = \\"abcde\\" s2 = \\"ace\\" assert longest_common_subsequence(s1, s2) == 3 # The longest common subsequence is \\"ace\\" s1 = \\"abc\\" s2 = \\"abc\\" assert longest_common_subsequence(s1, s2) == 3 # The longest common subsequence is \\"abc\\" s1 = \\"abc\\" s2 = \\"def\\" assert longest_common_subsequence(s1, s2) == 0 # No common subsequence ``` # Detailed Explanation: 1. Use dynamic programming approach to solve the Longest Common Subsequence problem. 2. Define a 2-dimensional DP table where `dp[i][j]` represents the length of the longest common subsequence of `s1[:i]` and `s2[:j]`. 3. Initialize the DP table with zeros. 4. Iterate through each character of `s1` and `s2`. If the characters match, `dp[i][j] = dp[i-1][j-1] + 1`. If not, `dp[i][j] = max(dp[i-1][j], dp[i][j-1])`. 5. The value at `dp[len(s1)][len(s2)]` will be the length of the longest common subsequence. Continue with validating the solution against provided test cases to ensure correctness.","solution":"def longest_common_subsequence(s1: str, s2: str) -> int: Returns the length of the longest common subsequence between s1 and s2. n = len(s1) m = len(s2) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"# Coding Assessment Question Objective Create a function that performs operations on a list of bank transactions, helping to determine the account balance after a series of transactions, as well as generating a summary of all transactions by type. Problem Statement Given a list of bank transactions, each represented as a dictionary with keys `type` (either \\"deposit\\" or \\"withdrawal\\") and `amount` (a positive float), write a function to calculate the final account balance and summarize the frequency and total value of each transaction type. Function Specifications 1. **Function Name**: `analyze_transactions` 2. **Input Parameters**: - `initial_balance`: float; The initial balance of the account. - `transactions`: list; A list of dictionaries, each containing: - `\\"type\\"`: string; The type of transaction (\\"deposit\\" or \\"withdrawal\\"). - `\\"amount\\"`: float; The amount of the transaction. 3. **Output**: - A tuple containing: 1. The final account balance (float). 2. A dictionary summarizing the transactions with the following structure: - `\\"deposit\\"`: A dictionary containing: - `\\"count\\"`: The number of deposit transactions (int). - `\\"total\\"`: The total amount deposited (float). - `\\"withdrawal\\"`: A dictionary containing: - `\\"count\\"`: The number of withdrawal transactions (int). - `\\"total\\"`: The total amount withdrawn (float). - If the initial balance or any transaction amount is negative, raise a `ValueError` with a descriptive message. 4. **Constraints**: - The initial balance and all transaction amounts must be non-negative. - Assume all withdrawals are valid and do not cause the account balance to go negative. - An empty transactions list should simply return the initial balance and zero summaries. ```python def analyze_transactions( initial_balance: float, transactions: list[dict] ) -> tuple[float, dict] | ValueError: Input Parameters: ----------------- initial_balance: Initial balance of the account (positive float). transactions: A list of transaction dictionaries, where each dictionary has: - \\"type\\": string; Either \\"deposit\\" or \\"withdrawal\\". - \\"amount\\": positive float Returns: -------- The function returns a tuple: 1. Final account balance (float). 2. A dictionary summarizing transactions: - \\"deposit\\": {\\"count\\": int, \\"total\\": float} - \\"withdrawal\\": {\\"count\\": int, \\"total\\": float} If the inputs are invalid, raises a ValueError with an appropriate error message. Examples: --------- >>> analyze_transactions(100.0, [{\\"type\\": \\"deposit\\", \\"amount\\": 50.0}, {\\"type\\": \\"withdrawal\\", \\"amount\\": 30.0}, {\\"type\\": \\"deposit\\", \\"amount\\": 20.0}]) (140.0, {\'deposit\': {\'count\': 2, \'total\': 70.0}, \'withdrawal\': {\'count\': 1, \'total\': 30.0}}) >>> analyze_transactions(-100.0, [{\\"type\\": \\"deposit\\", \\"amount\\": 50.0}]) ValueError(\\"Input Error: Initial balance must be non-negative.\\") pass # Your code here ``` Notes: 1. Ensure sufficient validation of the input values and raise informative error messages when necessary. 2. Optimize your function for clarity and efficiency. 3. Include inline comments as necessary to explain your logic.","solution":"def analyze_transactions(initial_balance, transactions): Analyzes a list of bank transactions and returns the final balance and a summary of transactions by type. Parameters: ----------- initial_balance : float The initial balance of the account. transactions : list of dict The list of transactions, each represented by a dictionary with \\"type\\" (either \\"deposit\\" or \\"withdrawal\\") and \\"amount\\" (positive float). Returns: -------- tuple A tuple containing the final balance (float) and a summary dictionary of transactions by type. Raises: ------- ValueError If the initial balance or any transaction amount is negative. if initial_balance < 0: raise ValueError(\\"Initial balance must be non-negative.\\") summary = { \\"deposit\\": {\\"count\\": 0, \\"total\\": 0.0}, \\"withdrawal\\": {\\"count\\": 0, \\"total\\": 0.0} } balance = initial_balance for transaction in transactions: transaction_type = transaction[\\"type\\"] amount = transaction[\\"amount\\"] if amount < 0: raise ValueError(\\"Transaction amounts must be non-negative.\\") if transaction_type == \\"deposit\\": balance += amount summary[\\"deposit\\"][\\"count\\"] += 1 summary[\\"deposit\\"][\\"total\\"] += amount elif transaction_type == \\"withdrawal\\": balance -= amount summary[\\"withdrawal\\"][\\"count\\"] += 1 summary[\\"withdrawal\\"][\\"total\\"] += amount else: raise ValueError(\\"Transaction type must be either \'deposit\' or \'withdrawal\'\\") return balance, summary"},{"question":"# Context: You are working on a scheduling application where users can book appointments at different times throughout the day. To ensure no overlap, booked time slots should be validated against existing bookings. # Task: Write a function `is_bookable` that determines if a new appointment can be booked without overlapping with existing appointments. # Specifications: * **Input**: A list of tuples representing existing booked time slots and a tuple representing the new time slot. Each time slot is a tuple of two integers `(start_time, end_time)`, where `start_time < end_time`. - Example: `existing_slots = [(1, 3), (5, 6)]`, `new_slot = (3, 5)` * **Output**: Boolean; `True` if the new time slot does not overlap with any existing ones, `False` otherwise. # Constraints: 1. Both existing and new time slots should: - Have integer start and end times. - Follow the condition `0 <= start_time < end_time <= 24`. 2. If the input for any slot is invalid, raise a `ValueError`: - For instance, if start_time is greater than or equal to end_time, or outside the [0, 24] range. # Performance: - Ensure the solution efficiently handles a large number of existing time slots. # Function Signature: ```python def is_bookable(existing_slots: list[tuple[int, int]], new_slot: tuple[int, int]) -> bool: # Implement the function that meets the outlined specifications ``` # Examples: ```python assert is_bookable([(1, 3), (5, 6)], (3, 5)) == True assert is_bookable([(1, 3), (4, 6)], (2, 5)) == False assert is_bookable([(0, 1), (3, 4), (5, 6)], (4, 5)) == True assert is_bookable([], (10, 12)) == True assert is_bookable([(1, 3), (8, 10), (10, 12)], (0, 8)) == False try: is_bookable([(1, 3), (5, 6)], (6, 5)) except ValueError as e: assert str(e) == \\"Invalid time slot range\\" try: is_bookable([(1, 3), (25, 27)], (6, 8)) except ValueError as e: assert str(e) == \\"Time slots must be within [0, 24] range\\" ``` # Additional Notes: - Carefully handle edge cases, especially related to input validation. - Consider efficient lookup and comparison to support a potentially large number of existing slots.","solution":"def is_bookable(existing_slots, new_slot): Determines if a new appointment can be booked without overlapping existing appointments. Args: - existing_slots (list[tuple[int, int]]): List of existing booked time slots. - new_slot (tuple[int, int]): The new time slot to check if it can be booked. Returns: - bool: True if the new time slot can be booked without overlapping, False otherwise. Raises: - ValueError: If any time slot is invalid. def is_valid_slot(slot): start, end = slot return 0 <= start < end <= 24 # Validate the new_slot if not is_valid_slot(new_slot): raise ValueError(\\"Invalid time slot range\\") for slot in existing_slots: if not is_valid_slot(slot): raise ValueError(\\"Time slots must be within [0, 24] range\\") start1, end1 = slot start2, end2 = new_slot # Check for overlap if not ((end2 <= start1) or (start2 >= end1)): return False return True"},{"question":"# Coding Assessment Question **Objective:** Write a function to determine if a number is a Happy number using efficient algorithms and cycle detection techniques. Your implementation should handle edge cases and optimize the performance as best as possible. **Function Signature:** ```python def is_happy_number(n: int) -> bool: pass ``` **Input/Output Format:** - Input: A single integer `n` which is to be tested whether it\'s a Happy number. - Output: Return `True` if `n` is a Happy number, otherwise `False`. **Constraints:** - `n` should be a positive integer in the range [1, 10^6]. **Example:** ```python assert is_happy_number(19) == True assert is_happy_number(2) == False assert is_happy_number(7) == True assert is_happy_number(20) == False assert is_happy_number(1) == True ``` **Performance Requirements:** - Solution must handle large inputs efficiently using appropriate cycle detection techniques to prevent infinite loops. **Scenario:** You are part of a team responsible for developing mathematical utilities for an educational software that helps students understand various number properties. You need to implement a function to check if a number is a Happy number to be used in a module teaching number theory concepts interactively.","solution":"def is_happy_number(n: int) -> bool: Determines if a number is a Happy number. :param n: Positive integer to be tested :return: True if n is a Happy number, otherwise False def get_next_number(num): total_sum = 0 while num > 0: digit = num % 10 total_sum += digit ** 2 num //= 10 return total_sum slow = n fast = get_next_number(n) while fast != 1 and slow != fast: slow = get_next_number(slow) fast = get_next_number(get_next_number(fast)) return fast == 1"},{"question":"# Coding Assessment Question **Context**: You need to manage inventory for a warehouse to optimize the ordering process of various products. The goal is to reorder products before stock runs out, considering the average daily usage rate of each product. **Task**: Write a function `generate_reorder_list` that reads a file containing product data and generates a list of products that should be reordered based on the given threshold days of inventory left. **Requirements**: The function must: 1. Read a file where each line contains comma-separated values representing `product_id`, `product_name`, `stock_qty`, and `daily_usage`. 2. Calculate the expected days of inventory left for each product. 3. Compare the calculated days against a given threshold and include products that fall below this threshold in the reorder list. Use the following function prototype: ```python def generate_reorder_list(filename: str, threshold_days: int) -> list[str]: pass ``` **Input**: - `filename`: A string representing the path to the file containing product data. - `threshold_days`: An integer representing the threshold of days of inventory left, below which products need to be reordered. **Output**: - A list of strings, each representing a `product_name` that needs reordering. **Constraints**: - Each line in the file contains: `product_id`, `product_name`, `stock_qty`, `daily_usage`. - `stock_qty` and `daily_usage` are positive integers. - Assume there is at least one product in the file. **Test Case**: 1. **Input**: A test file containing: ``` 101, Widget, 20, 2 102, Gizmo, 50, 10 103, Thingamajig, 15, 5 ``` and `threshold_days` of 5. - Explanation: All products with less than or equal to 5 days of inventory left should be reordered. - **Expected Output**: `[\'Gizmo\', \'Thingamajig\']` **Hints**: - Calculate days of inventory left as `stock_qty / daily_usage`. - Read file and parse lines using `split`. - Use list comprehensions to filter products meeting the reorder condition. This problem assesses comprehension of file I/O operations, basic arithmetic calculations, and filtering data based on conditions.","solution":"def generate_reorder_list(filename: str, threshold_days: int) -> list[str]: Reads product data from a file and generates a list of products that need reordering. :param filename: str: The path to the file containing product data. :param threshold_days: int: The threshold of days of inventory left. :return: list[str]: A list of product names that need reordering. reorder_list = [] try: with open(filename, \'r\') as file: for line in file: parts = line.strip().split(\', \') product_id, product_name = parts[0], parts[1] stock_qty, daily_usage = int(parts[2]), int(parts[3]) # Calculate days of inventory left days_of_inventory_left = stock_qty / daily_usage # Check if it is below the threshold if days_of_inventory_left <= threshold_days: reorder_list.append(product_name) except FileNotFoundError: print(f\\"File {filename} not found.\\") return reorder_list"},{"question":"**Duplicate Zeroes Problem** Problem Statement: You are tasked with a problem where you need to modify a list by duplicating each occurrence of zero, shifting the remaining elements to the right. Some elements may need to be dropped from the array to achieve this without extending the array\'s length. Requirements: - Implement a function `duplicate_zeros` that duplicates each zero in the list. - The input list is modified in place and must not use extra space for another list. - Provide a solution that is efficient for large lists. Input: - A list of integers `arr` where `1 <= len(arr) <= 10000`. Output: - The function returns `None`, but the input list `arr` should be modified in place. Constraints: - Do not return anything from your function. - Modifying the list in place means that the final length of the list should remain the same as the input length. # Function Signature: ```python def duplicate_zeros(arr: List[int]) -> None: # Duplicates each zero in the list, modifying the list in place without extra space. pass ``` Example: ```python arr1 = [1, 0, 2, 3, 0, 4, 5, 0] duplicate_zeros(arr1) assert arr1 == [1, 0, 0, 2, 3, 0, 0, 4] arr2 = [1, 2, 3] duplicate_zeros(arr2) assert arr2 == [1, 2, 3] arr3 = [0, 0, 1] duplicate_zeros(arr3) assert arr3 == [0, 0, 0] ```","solution":"from typing import List def duplicate_zeros(arr: List[int]) -> None: Duplicates each zero in the list, modifying the list in place without extra space. n = len(arr) zeros = arr.count(0) # Traverse the list backwards for i in range(n - 1, -1, -1): if i + zeros < n: arr[i + zeros] = arr[i] if arr[i] == 0: zeros -= 1 if i + zeros < n: arr[i + zeros] = 0"},{"question":"# Coding Assessment Question Context You are given an integer array `nums` where each element represents a number in the sequence. The array may contain both positive and negative numbers. Write a function that finds the contiguous subarray (containing at least one number) which has the largest sum and returns its sum. Objective Implement the function `max_subarray_sum(nums: list[int]) -> int` that returns the maximum sum of a contiguous subarray within the input array. Input/Output Format - **Input**: A list of integers, `nums`, where each integer can be positive, negative, or zero. - **Output**: An integer representing the maximum sum of a contiguous subarray within the input list. Constraints - `1 <= len(nums) <= 10^5` - `-10^4 <= nums[i] <= 10^4` Example ```python >>> max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) 6 # subarray [4,-1,2,1] has the largest sum 6 >>> max_subarray_sum([1]) 1 # single element is the maximum sum subarray >>> max_subarray_sum([5, 4, -1, 7, 8]) 23 # subarray [5, 4, -1, 7, 8] has the largest sum 23 >>> max_subarray_sum([-1, -2, -3, -4]) -1 # subarray [-1] has the largest sum -1 >>> max_subarray_sum([8, -19, 5, -4, 20]) 21 # subarray [5, -4, 20] has the largest sum 21 ``` Requirements 1. Ensure the function handles both positive and negative values appropriately. 2. The solution must run in linear time O(n) and use O(1) extra space. 3. The input list will always contain at least one integer.","solution":"def max_subarray_sum(nums): Finds the contiguous subarray with the largest sum and returns its sum. max_so_far = nums[0] current_max = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) max_so_far = max(max_so_far, current_max) return max_so_far"},{"question":"# Coding Question Maximum Subarray Sum with One Deletion Given an integer array, `arr`, you have the option to delete at most one element and compute the maximum possible sum of the resulting subarray. A subarray is defined as a contiguous part of the array. # Task Description Implement the function `max_subarray_sum_with_one_deletion(arr: List[int]) -> int` that performs the following: 1. Finds the maximum subarray sum possible after deleting at most one element from the array. # Input * A list of integers `arr` with `1 <= len(arr) <= 10^5` and `-10^4 <= arr[i] <= 10^4`. # Output * Return the maximum subarray sum after deleting at most one element. # Constraints * Optimize for time complexity. * Address edge cases where the array has one or all negative numbers. # Performance Requirements * The algorithm should handle large arrays with up to 100,000 elements efficiently. # Examples 1. Input: `arr = [1, -2, 0, 3]` Output: `4` Explanation: Delete -2 to get the subarray [1, 0, 3] with sum 4. 2. Input: `arr = [1, -2, 3, -5, 8, -1]` Output: `11` Explanation: Delete -5 to get the subarray [1, -2, 3, 8, -1] with sum 11. # Notes * Consider using dynamic programming techniques or a variation of Kadane\'s algorithm to solve the problem efficiently. Function Signature ```python def max_subarray_sum_with_one_deletion(arr: List[int]) -> int: pass ```","solution":"from typing import List def max_subarray_sum_with_one_deletion(arr: List[int]) -> int: n = len(arr) if n == 1: return arr[0] max_end_here = [0] * n max_start_here = [0] * n max_end_here[0] = arr[0] max_so_far = arr[0] for i in range(1, n): max_end_here[i] = max(arr[i], max_end_here[i - 1] + arr[i]) max_so_far = max(max_so_far, max_end_here[i]) max_start_here[-1] = arr[-1] for i in range(n - 2, -1, -1): max_start_here[i] = max(arr[i], max_start_here[i + 1] + arr[i]) for i in range(1, n - 1): potential_max = max_end_here[i - 1] + max_start_here[i + 1] max_so_far = max(max_so_far, potential_max) return max_so_far"},{"question":"# Code Exercise: Write a function that finds the first `k` numbers in the Fibonacci sequence which are also prime numbers. Return these prime Fibonacci numbers as a list. # Function Signature ```python def prime_fibonacci(k: int) -> list: ``` # Input - An integer `k`, where 1 ≤ `k` ≤ 10,000. This represents the number of prime Fibonacci numbers to find. # Output - A list of integers containing the first `k` Fibonacci numbers that are prime. # Constraints - Use optimized techniques to generate Fibonacci numbers and check for primality efficiently. # Scenario You are developing a numerical library that offers advanced functionality for sequence analysis. One feature request is to identify prime numbers within the Fibonacci sequence, which can help in complex research areas such as cryptography and computational theory. Your task is to write a function that fulfills this need. # Example ```python # Example usage: print(prime_fibonacci(5)) # Output: [2, 3, 5, 13, 89] print(prime_fibonacci(10)) # Output: [2, 3, 5, 13, 89, 233, 1597, 28657, 514229, 433494437] ```","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_fibonacci(k): if k <= 0: return [] prime_fibs = [] a, b = 1, 1 while len(prime_fibs) < k: if is_prime(a): prime_fibs.append(a) a, b = b, a + b return prime_fibs"},{"question":"# Problem Statement You are given an undirected graph represented as an adjacency matrix. Your task is to determine if the graph is bipartite. # Context A graph is bipartite if its vertices can be divided into two disjoint sets such that no two graph vertices within the same set are adjacent. This property can be useful in various applications including network theory, matching algorithms, and scheduling problems. # Function Signature ```python def is_bipartite(adj_matrix: List[List[int]]) -> bool: ``` # Input - `adj_matrix`: A 2D list of integers representing the adjacency matrix of an undirected graph, where `adj_matrix[i][j]` is 1 if there is an edge between vertex `i` and vertex `j`, and 0 otherwise. # Output - A boolean value indicating whether the graph is bipartite (`True` if the graph is bipartite, `False` otherwise). # Constraints - The input adjacency matrix will be a square matrix. - The values in the adjacency matrix will only be 0 or 1. - The graph will have no self-loops (`adj_matrix[i][i] = 0` for all `i`). # Example ```python # Example 1: adj_matrix = [ [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0] ] result = is_bipartite(adj_matrix) print(result) # Should output: True # Example 2: adj_matrix = [ [0, 1, 1], [1, 0, 1], [1, 1, 0] ] result = is_bipartite(adj_matrix) print(result) # Should output: False ``` # Specifications 1. Implement the function using graph traversal techniques such as Breadth-First Search (BFS) or Depth-First Search (DFS). 2. Handle edge cases such as graphs with no vertices or only one vertex. 3. Ensure the function runs efficiently within the limits of typical graph sizes encountered in practice.","solution":"from typing import List from collections import deque def is_bipartite(adj_matrix: List[List[int]]) -> bool: n = len(adj_matrix) if n == 0: return True # An empty graph is trivially bipartite # Color array to store colors assigned to all vertices (two colors: 0 and 1) color = [-1] * n # This function performs BFS, checking for bipartite property def bfs_check(start): queue = deque([start]) color[start] = 0 while queue: u = queue.popleft() for v in range(n): if adj_matrix[u][v] == 1: # There is an edge between u and v if color[v] == -1: # If v is not colored # Assign alternate color to this adjacent vertex color[v] = 1 - color[u] queue.append(v) elif color[v] == color[u]: # If u and v have the same color return False return True for i in range(n): if color[i] == -1: # For unvisited nodes, start a BFS if not bfs_check(i): return False return True"},{"question":"# Coding Assessment Question Consecutive Subarray Sum You are required to write a Python function to solve the problem of finding a subarray with a specified sum. This will test your understanding of array manipulation, sliding window techniques, and summation algorithms. Problem Statement Given an array of integers and a target sum, write a function `find_subarray_with_sum` that returns `True` if there exists a contiguous subarray that sums to the given target, and `False` otherwise. Input * `arr`: A list of integers representing the array. * `target`: An integer value representing the desired sum. Output * A boolean value indicating whether there exists a contiguous subarray that sums to the `target`. Constraints * The elements of the array are integers, and the array can be of length up to 10^5. * The integer values in the array can be negative, zero, or positive. * Your solution should be efficient enough to handle large inputs within acceptable time limits. Function Signature ```python def find_subarray_with_sum(arr: list, target: int) -> bool: ``` Example Input: ``` arr = [5, 3, 2, -4, 6, 1] target = 7 ``` Output: ``` True ``` Explanation: There exists a subarray [3, 2, -4, 6] with the sum 7. Additional Notes: 1. Use of loops and sliding window technique is expected. 2. Avoid brute-force solutions to ensure efficiency. 3. Consider edge cases including possible empty subarrays or arrays with single elements. Good luck and make sure to test your code thoroughly to ensure correctness and efficiency.","solution":"def find_subarray_with_sum(arr: list, target: int) -> bool: Returns True if a contiguous subarray with sum equal to target exists in the list arr, otherwise returns False. current_sum = 0 sum_map = {} for i in range(len(arr)): current_sum += arr[i] if current_sum == target: return True if (current_sum - target) in sum_map: return True sum_map[current_sum] = i return False"},{"question":"# Scenario You have been asked to develop a feature for a photography application that allows users to resize their images. The resizing needs to maintain the original aspect ratio to avoid any distortion in the images. # Task Write a function `resize_image` that calculates the new dimensions of an image when either the width or height is changed, while maintaining the original aspect ratio. # Expected Function Signature ```python def resize_image(original_width: int, original_height: int, new_width: int = None, new_height: int = None) -> Tuple[int, int]: pass ``` # Input - `original_width`: An integer representing the original width of the image. - `original_height`: An integer representing the original height of the image. - `new_width`: An optional integer representing the new width of the image. Defaults to `None`. - `new_height`: An optional integer representing the new height of the image. Defaults to `None`. # Output - Returns a tuple containing two integers: the new width and the new height of the image while maintaining the original aspect ratio. # Constraints - Either `new_width` or `new_height` must be provided, but not both. - Both `original_width` and `original_height` are positive integers. - Both `new_width` and `new_height` (if provided) must be positive integers. # Performance Requirements - The function must run in constant time O(1) and use constant space O(1). # Examples ```python assert resize_image(1920, 1080, new_width=960) == (960, 540) assert resize_image(1920, 1080, new_height=540) == (960, 540) assert resize_image(400, 300, new_width=200) == (200, 150) assert resize_image(400, 300, new_height=150) == (200, 150) ``` # Notes 1. If both `new_width` and `new_height` are provided, return a meaningful error message. 2. Return a meaningful error message if neither `new_width` nor `new_height` is provided.","solution":"def resize_image(original_width: int, original_height: int, new_width: int = None, new_height: int = None) -> tuple: Calculate the new dimensions of the image while maintaining the original aspect ratio. Args: - original_width (int): Original width of the image. - original_height (int): Original height of the image. - new_width (int, optional): New width of the image. Defaults to None. - new_height (int, optional): New height of the image. Defaults to None. Returns: - tuple: New dimensions (width, height) of the image maintaining the original aspect ratio. Raises: - ValueError: If both new_width and new_height are provided or both are None. if (new_width is None and new_height is None) or (new_width is not None and new_height is not None): raise ValueError(\\"Either new_width or new_height must be provided, but not both.\\") if new_width is not None: new_height = int((new_width / original_width) * original_height) return (new_width, new_height) if new_height is not None: new_width = int((new_height / original_height) * original_width) return (new_width, new_height)"},{"question":"# Matrix Transpose with Restrictive Properties You have been provided with a mathematical problem involving matrix transposition with specific properties and constraints. Problem Statement Implement the function `matrix_transpose(matrix: List[List[int]]) -> List[List[int]]`. This function should transpose the given matrix following these specific rules: 1. The matrix should not be empty, and it must be a matrix with a number of rows and columns greater than zero. 2. The matrix can be either rectangular or square, making the function versatile for various input dimensions. 3. No additional libraries should be used, the solution should rely on basic Python constructs. # Input - `matrix` (List[List[int]]): A 2D list representing an m x n matrix. # Output - Returns a 2D list representing the transposed matrix of dimensions n x m. # Constraints - The input matrix will consist of integers. - Matrix dimensions m and n are both in the range of 1 to 100. # Performance Requirements - The algorithm should run with a time complexity of O(m * n) and space complexity of O(m * n), where m is the number of rows and n is the number of columns in the original matrix. # Example ```python matrix = [ [1, 2, 3], [4, 5, 6] ] transposed = matrix_transpose(matrix) assert transposed == [ [1, 4], [2, 5], [3, 6] ] matrix = [ [7, 8], [9, 10], [11, 12] ] transposed = matrix_transpose(matrix) assert transposed == [ [7, 9, 11], [8, 10, 12] ] ``` Your task is to implement the function `matrix_transpose` that performs this task while considering the constraints and requirements outlined above. # Additional Notes - Aim to make the function efficient and handle edge cases such as matrices with only one row or one column effectively. - Ensure the function adheres closely to the given constraints and performance requirements.","solution":"def matrix_transpose(matrix): Returns the transpose of the given matrix. if not matrix or not matrix[0]: raise ValueError(\\"Matrix must not be empty and must have at least one row and one column.\\") m = len(matrix) n = len(matrix[0]) transposed_matrix = [[0] * m for _ in range(n)] for i in range(m): for j in range(n): transposed_matrix[j][i] = matrix[i][j] return transposed_matrix"},{"question":"**Subarray Sum with Fixed Length** **Context:** Subarray problems are a common challenge in competitive programming and coding interviews. Identifying sums of subarrays with fixed lengths helps in optimizing algorithms and memory usage. **Task:** Implement a function `fixed_length_subarray_sum(arr: list, k: int) -> list` that computes the sum of every subarray of length `k` within the given list `arr`. **Input:** - `arr`: A list of integers. - `k`: An integer representing the length of the subarrays. **Output:** - Returns a list of integers where each integer is the sum of a subarray of length `k`. **Constraints:** - `1 <= len(arr) <= 1000` - `1 <= k <= len(arr)` **Examples:** ```python >>> fixed_length_subarray_sum([1, 2, 3, 4, 5], 3) [6, 9, 12] >>> fixed_length_subarray_sum([10, 20, -10, 5, 15], 2) [30, 10, -5, 20] >>> fixed_length_subarray_sum([1, 1, 1, 1, 1], 4) [4, 4] ``` **Instructions:** 1. Implement the `fixed_length_subarray_sum` function in Python. 2. Make sure that your function efficiently computes the sums, possibly using a sliding window technique to avoid redundant calculations. 3. Consider edge cases and handle them appropriately, ensuring valid inputs are processed correctly.","solution":"def fixed_length_subarray_sum(arr, k): Compute the sum of every subarray of length k within the given list arr. :param arr: List of integers. :param k: Integer representing the length of the subarrays. :return: List of integers where each integer is the sum of a subarray of length k. if k > len(arr): return [] result = [] current_sum = sum(arr[:k]) result.append(current_sum) for i in range(1, len(arr) - k + 1): current_sum = current_sum - arr[i - 1] + arr[i + k - 1] result.append(current_sum) return result"},{"question":"# Question: Game of Life Evolution You are given a 2D grid representing the Game of Life, which is an infinite, two-dimensional orthogonal grid of square cells, each of which is in one of two possible states, live or dead. Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following rules: 1. Any live cell with fewer than two live neighbors dies (underpopulation). 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies (overpopulation). 4. Any dead cell with exactly three live neighbors becomes a live cell (reproduction). Write a Python function to compute the next state (after one iteration) of the grid. Function Signature ```python def game_of_life(grid: List[List[int]]) -> List[List[int]]: ``` # Input * `grid` - a list of lists of integers representing the current state of the cells. Each element is either 0 (dead) or 1 (live). # Output * Return a list of lists of integers representing the state of the grid after one iteration, following the rules of the Game of Life. # Constraints * The grid will have dimensions m x n where 1 <= m, n <= 50. * The initial state grid is guaranteed to conform to the constraints. # Example Given the following initial state grid: ```python grid = [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] ``` Your function, when called as `game_of_life(grid)`, should return ```python [ [0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0] ] ``` # Additional Information: * The function should handle edge cases, ensuring cells at the boundaries are processed correctly. * Implement boundary checks efficiently to avoid index errors. * Consider auxiliary space to store the next state for in-place computation. # Implementation Guidelines: - Use nested loops to iterate through the grid elements. - Track neighbor counts efficiently. - Update the new state based on the current state and neighbor counts. - Use additional structures judiciously to maintain clarity and performance.","solution":"from typing import List def game_of_life(grid: List[List[int]]) -> List[List[int]]: def count_live_neighbors(x, y): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_neighbors = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == 1: live_neighbors += 1 return live_neighbors m, n = len(grid), len(grid[0]) next_state = [[0] * n for _ in range(m)] for i in range(m): for j in range(n): live_neighbors = count_live_neighbors(i, j) if grid[i][j] == 1: if live_neighbors < 2 or live_neighbors > 3: next_state[i][j] = 0 # Cell dies else: next_state[i][j] = 1 # Cell lives else: if live_neighbors == 3: next_state[i][j] = 1 # Cell becomes alive return next_state"},{"question":"# Problem Statement You are required to write a Python function that determines if a given string is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards, ignoring spaces and punctuation. A permutation is a rearrangement of letters. The function should ignore case and non-alphabetic characters for determining if the string is a permutation of a palindrome. # Input - A string `s` where 1 <= `len(s)` <= 1000 # Output - A boolean value `True` if the string is a permutation of a palindrome, and `False` otherwise. # Constraints - The function should have a time complexity of O(n), where `n` is the length of the string. - The function should use additional space proportional to the length of the string. - The function should handle edge cases, including empty strings and strings with only alphabetic characters. # Example ```python >>> is_permutation_of_palindrome(\\"Tact Coa\\") True >>> is_permutation_of_palindrome(\\"aab\\") True >>> is_permutation_of_palindrome(\\"code\\") False >>> is_permutation_of_palindrome(\\"abcdefg\\") False >>> is_permutation_of_palindrome(\\"A man, a plan, a canal, Panama!\\") True ``` # Hints 1. Consider using a frequency counter for the characters to determine the number of odd occurrences. 2. A string that is a permutation of a palindrome can have at most one character with an odd frequency count. 3. Ignore case and non-alphabetic characters by standardizing the input string. ```python def is_permutation_of_palindrome(s: str) -> bool: Determines if the given string is a permutation of a palindrome. Args: s (str): Input string. Returns: bool: True if the string is a permutation of a palindrome, False otherwise. pass if __name__ == \\"__main__\\": import doctest doctest.testmod() ```","solution":"def is_permutation_of_palindrome(s: str) -> bool: Determines if the given string is a permutation of a palindrome. Args: s (str): Input string. Returns: bool: True if the string is a permutation of a palindrome, False otherwise. from collections import Counter # Filter only alphabetic characters and convert to lower case filtered_s = \'\'.join(c.lower() for c in s if c.isalpha()) # Count the frequency of each character counter = Counter(filtered_s) # Count how many characters have an odd frequency odd_count = sum(1 for count in counter.values() if count % 2 == 1) # A string that is a permutation of a palindrome can have at most one odd frequency return odd_count <= 1"},{"question":"# Problem Statement You are given a dataset of user activities on a platform with columns: userID, activityType, and timestamp. Your task is to design a function that processes this dataset to find the user with the highest number of distinct activities in a given time window. # Function Specifications Function Signature ```python def most_active_user(dataset: List[Dict[str, Any]], start_time: int, end_time: int) -> str: ``` Input - `dataset (List[Dict[str, Any]])`: A list of dictionaries where each dictionary represents an activity entry with keys: \'userID\', \'activityType\', and \'timestamp\'. - `start_time (int)`: The starting timestamp of the time window. - `end_time (int)`: The ending timestamp of the time window. Output - `str`: The `userID` of the user with the highest number of distinct activities within the provided time window. If there is a tie, return any one of the users. # Constraints - All timestamps are in Unix time format. - All dictionary keys are guaranteed to be present in each dictionary. - The dataset contains at least one activity. - The `start_time` is always less than `end_time`. # Example ```python dataset = [ {\'userID\': \'user1\', \'activityType\': \'login\', \'timestamp\': 1610000000}, {\'userID\': \'user2\', \'activityType\': \'purchase\', \'timestamp\': 1610000300}, {\'userID\': \'user1\', \'activityType\': \'logout\', \'timestamp\': 1610000600}, {\'userID\': \'user3\', \'activityType\': \'login\', \'timestamp\': 1610000900}, {\'userID\': \'user1\', \'activityType\': \'login\', \'timestamp\': 1610001200}, {\'userID\': \'user2\', \'activityType\': \'login\', \'timestamp\': 1610001500} ] start_time = 1610000000 end_time = 1610001000 result = most_active_user(dataset, start_time, end_time) print(result) # Output: \'user1\' ``` # Notes - Ensure the function efficiently handles large datasets. - Only consider user activities that fall within the specified time window inclusive of start_time and end_time. - Use Python\'s standard libraries for any necessary data processing. - The function should be robust and handle edge cases gracefully. --- This question should align well with the existing questions in terms of style, scope, and complexity. It also introduces a data processing and time-based filtering challenge, similar to the problem-solving requirements of the original question set.","solution":"from typing import List, Dict, Any from collections import defaultdict def most_active_user(dataset: List[Dict[str, Any]], start_time: int, end_time: int) -> str: user_activities = defaultdict(set) # Dictionary to store unique activities for each user # Iterate through each activity in the dataset for activity in dataset: user_id = activity[\'userID\'] activity_type = activity[\'activityType\'] timestamp = activity[\'timestamp\'] # Check if the activity is within the specified time window if start_time <= timestamp <= end_time: user_activities[user_id].add(activity_type) # Find the user with the maximum number of distinct activities max_activities = 0 most_active_user_id = None for user_id, activities in user_activities.items(): if len(activities) > max_activities: max_activities = len(activities) most_active_user_id = user_id return most_active_user_id"},{"question":"# ISBN-10 Verification System **Scenario**: You are tasked with developing a verification system for ISBN-10. An ISBN-10 (International Standard Book Number) is a 10-digit code used for book identification. The verifying digit is the last digit of the ISBN, which can be a number or the letter \'X\', representing the value 10. Your job is to create a program that can verify and correct ISBN-10 numbers. **Requirements**: 1. Write a function `calculate_check_digit(isbn: str) -> str` that takes a 9-character string representing the first 9 digits of an ISBN-10 number and returns the correct check digit (0-9 or \'X\'). 2. Write a function `validate_isbn(isbn: str) -> bool` that takes a 10-character string representing a complete ISBN-10 number and returns `True` if the ISBN is valid, otherwise returns `False`. **Function Signatures**: ```python def calculate_check_digit(isbn: str) -> str: pass def validate_isbn(isbn: str) -> bool: pass ``` **Input/Output**: * `calculate_check_digit`: * **Input**: * A string `isbn` (a 9-character string containing digits only). * **Output**: * A string representing the correct check digit (0-9 or \'X\'). * `validate_isbn`: * **Input**: * A string `isbn` (a 10-character string where the last character can be a digit or \'X\'). * **Output**: * A boolean value `True` if the ISBN-10 is valid, `False` otherwise. **Constraints**: * The input to `calculate_check_digit` will always be a string of 9 digits. * The input to `validate_isbn` will always be a string of 10 characters where the last character can be a digit or \'X\'. * Do not use any external libraries other than built-in ones. * Ensure the functions handle edge cases and raise appropriate errors if the input format is invalid. **Example**: ```python >>> calculate_check_digit(\'030640615\') \'2\' >>> validate_isbn(\'0306406152\') True >>> validate_isbn(\'030640615X\') False >>> validate_isbn(\'0306406155\') False ``` **Additional Notes**: Your solution will be evaluated for correctness, efficiency, and adherence to best coding practices. Ensure to write clean and readable code with appropriate comments. **Hint**: The check digit is calculated by summing the products of the first 9 digits by their positional values (i.e., 10 to 2) and taking the modulo 11 of that sum. If the result is 10, the check digit is \'X\'.","solution":"def calculate_check_digit(isbn: str) -> str: Calculate the check digit for the given 9-character ISBN-10. Parameters: isbn (str): A string of 9 characters representing the first 9 digits of an ISBN-10. Returns: str: The check digit, which can be a number (0-9) or \'X\'. if len(isbn) != 9 or not isbn.isdigit(): raise ValueError(\\"ISBN must be a 9-character string of digits.\\") total = sum((10 - i) * int(char) for i, char in enumerate(isbn)) remainder = total % 11 if remainder == 0: check_digit = \'0\' elif remainder == 1: check_digit = \'X\' else: check_digit = str(11 - remainder) return check_digit def validate_isbn(isbn: str) -> bool: Validate the given 10-character ISBN-10. Parameters: isbn (str): A string of 10 characters representing a complete ISBN-10. Returns: bool: True if the ISBN-10 is valid, False otherwise. if len(isbn) != 10 or not (isbn[:-1].isdigit() and (isbn[-1].isdigit() or isbn[-1] == \'X\')): return False check_digit = isbn[-1] calculated_check_digit = calculate_check_digit(isbn[:-1]) return check_digit == calculated_check_digit"},{"question":"# Coding Assessment Question In a system that processes a large volume of user activities, you need to analyze user interaction data to identify unique sequences of activities. Each user has an ordered list of activities, and you must determine whether any of these sequences are repeated across different users. **Task**: Implement a function `find_repeated_sequences` that identifies any sequence of activities that appears in the activity logs of at least two different users. Function Signature ```python def find_repeated_sequences(activity_logs: Dict[str, List[str]]) -> Set[Tuple[str]]: pass ``` Input * `activity_logs` (Dict[str, List[str]]): A dictionary where keys are user identifiers (strings) and values are lists of activities (strings) in the order they occurred. Output * Returns a set of tuples, where each tuple represents a sequence of activities that is repeated across different users. Constraints * The number of users will not exceed 1000. * Each user can have up to 1000 activities. * Activities are represented by non-empty strings and can contain alphanumeric characters. Performance Requirements * The function should efficiently handle cases where multiple users have lengthy activity logs. # Example Example Input ```python activity_logs = { \\"user1\\": [\\"login\\", \\"view\\", \\"logout\\"], \\"user2\\": [\\"login\\", \\"shop\\", \\"logout\\"], \\"user3\\": [\\"login\\", \\"view\\", \\"logout\\"], \\"user4\\": [\\"login\\", \\"view\\", \\"comment\\"], } ``` Example Output ```python { (\\"login\\", \\"view\\", \\"logout\\") } ``` **Note**: In the example, the sequence (\\"login\\", \\"view\\", \\"logout\\") appears in the logs of both \\"user1\\" and \\"user3\\". Your task is to implement the function to efficiently find and return these repeated sequences, considering possible performance issues with large datasets.","solution":"from typing import Dict, List, Set, Tuple from collections import defaultdict def find_repeated_sequences(activity_logs: Dict[str, List[str]]) -> Set[Tuple[str]]: sequence_map = defaultdict(set) for user, activities in activity_logs.items(): activities_tuple = tuple(activities) sequence_map[activities_tuple].add(user) repeated_sequences = {seq for seq, users in sequence_map.items() if len(users) > 1} return repeated_sequences"},{"question":"# Calendar Event Scheduler You are required to implement a scheduling feature for a simple calendar application. This involves working with date and time manipulations, handling overlapping events, and ensuring all scheduled events are valid within a day. Function 1: Add Event Write a function `add_event` that adds a new event to the calendar if it does not overlap with existing events. The function should adhere to the following constraints: - **Input**: A list of tuples representing the existing events where each tuple contains a start and end time in the format `\\"HH:MM\\"`. - **Event**: A tuple representing the new event to be added in the format `\\"HH:MM\\"`. - **Output**: A boolean indicating whether the event was successfully added (`True` for success, `False` for overlap). Function 2: List Events Write a function `list_events` that returns the list of events sorted by their start time. The function should adhere to the following constraints: - **Input**: A list of tuples representing the existing events where each tuple contains a start and end time in the format `\\"HH:MM\\"`. - **Output**: A list of tuples representing the events sorted by start time, maintaining the format `\\"HH:MM\\"`. # Expected Function Signatures ```python def add_event(events: list[tuple[str, str]], new_event: tuple[str, str]) -> bool: pass def list_events(events: list[tuple[str, str]]) -> list[tuple[str, str]]: pass ``` # Example Scenarios & Expected Outputs * `add_event([(\\"09:00\\", \\"10:00\\"), (\\"11:00\\", \\"12:00\\")], (\\"10:00\\", \\"11:00\\"))` should return `True` * `add_event([(\\"09:00\\", \\"10:00\\"), (\\"10:30\\", \\"11:30\\")], (\\"10:00\\", \\"11:00\\"))` should return `False` * `list_events([(\\"10:00\\", \\"11:00\\"), (\\"09:00\\", \\"10:00\\")])` should return `[(\\"09:00\\", \\"10:00\\"), (\\"10:00\\", \\"11:00\\")]` # Constraints & Conditions - Ensure that input times are valid and in the proper format. - Handle potential edge cases gracefully such as back-to-back events. - Ensure inputs and outputs respect the time format `\\"HH:MM\\"` and do not rely on any external libraries. - Assume the calendar starts at `\\"00:00\\"` and ends at `\\"23:59\\"`. Implement these functions and provide thorough test cases to demonstrate their correctness. Consider edge cases and explore the effectiveness of your implementation extensively.","solution":"def time_to_minutes(time): Convert time in HH:MM format to minutes since 00:00. hours, minutes = map(int, time.split(\\":\\")) return hours * 60 + minutes def add_event(events, new_event): Adds a new event to the calendar if it does not overlap with existing events. Parameters: events (list of tuple of str): List of existing events where each event is a tuple (\\"start_time\\", \\"end_time\\"). new_event (tuple of str): A tuple (\\"start_time\\", \\"end_time\\") representing the new event to be added. Returns: bool: True if the event was successfully added, False if it overlaps with an existing event. new_start, new_end = new_event new_start_minutes = time_to_minutes(new_start) new_end_minutes = time_to_minutes(new_end) for (start, end) in events: start_minutes = time_to_minutes(start) end_minutes = time_to_minutes(end) if not (new_end_minutes <= start_minutes or new_start_minutes >= end_minutes): return False events.append(new_event) return True def list_events(events): Returns the list of events sorted by their start time. Parameters: events (list of tuple of str): List of existing events where each event is a tuple (\\"start_time\\", \\"end_time\\"). Returns: list of tuple of str: List of tuples representing the events sorted by start time. return sorted(events, key=lambda event: time_to_minutes(event[0]))"},{"question":"# Binary Search Tree Enhancement You have been provided with an implementation of a Binary Search Tree (BST) in Python. The current implementation includes basic functionalities such as insertion, deletion, searching, and traversal (in-order, pre-order, and post-order). Your task is to enhance this Binary Search Tree implementation with these additional features while adhering to the given constraints: 1. **Find Kth Smallest Element (`find_kth_smallest`)**: Add a method to find the k-th smallest element in the BST. 2. **Find Kth Largest Element (`find_kth_largest`)**: Add a method to find the k-th largest element in the BST. 3. **Check Balanced (`is_balanced`)**: Implement a method to check if the BST is height-balanced. Constraints * The methods should handle edge cases effectively. For example, `find_kth_smallest` and `find_kth_largest` should raise an appropriate exception if `k` is out of range. * You must not use any additional space beyond what is necessary for traversal and temporary variable storage. * The `is_balanced` method should have a time complexity of O(n). Function Signatures ```python class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BinarySearchTree: def __init__(self): self.root = None # Your existing implementation... def find_kth_smallest(self, k: int) -> int: # Implement find_kth_smallest here def find_kth_largest(self, k: int) -> int: # Implement find_kth_largest here def is_balanced(self) -> bool: # Implement is_balanced here ``` Example Usage ```python # Example usage bst = BinarySearchTree() bst.insert(5).insert(3).insert(7).insert(2).insert(4).insert(6).insert(8) print(bst.find_kth_smallest(1)) # Output: 2 print(bst.find_kth_smallest(3)) # Output: 4 print(bst.find_kth_largest(1)) # Output: 8 print(bst.find_kth_largest(2)) # Output: 7 print(bst.is_balanced()) # Output: True (the tree is balanced) bst.insert(1) print(bst.is_balanced()) # Output: False (if the tree is no longer balanced) ``` Build upon the original Binary Search Tree implementation by completing these features. Ensure that you include tests to verify the correctness of your implementations.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) return self def _insert(self, node, key): if key < node.val: if node.left is None: node.left = TreeNode(key) else: self._insert(node.left, key) else: if node.right is None: node.right = TreeNode(key) else: self._insert(node.right, key) def in_order_traversal(self, node, result): if node is not None: self.in_order_traversal(node.left, result) result.append(node.val) self.in_order_traversal(node.right, result) def find_kth_smallest(self, k: int) -> int: result = [] self.in_order_traversal(self.root, result) if k-1 >= len(result) or k <= 0: raise IndexError(\\"k is out of range\\") return result[k-1] def find_kth_largest(self, k: int) -> int: result = [] self.in_order_traversal(self.root, result) if k-1 >= len(result) or k <= 0: raise IndexError(\\"k is out of range\\") return result[-k] def is_balanced(self) -> bool: def height(node): if not node: return 0 left_height = height(node.left) right_height = height(node.right) if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return height(self.root) != -1"},{"question":"# Scenario You work for a company that handles massive datasets related to social networks. One of your tasks is to develop a function to identify clusters of users who frequently interact with each other. # Task Implement a function that finds and returns all connected components (clusters) in an undirected graph representing a social network. Each node in the graph represents a user, and an edge represents an interaction between two users. # Function Signature ```python def find_connected_components(n, edges): ``` # Inputs - `n` (int): Number of nodes (users) in the graph. - `edges` (List[Tuple[int, int]]): A list of tuples where each tuple (u, v) represents an undirected edge (interaction) between node `u` and node `v`. # Outputs - A list of lists (List[List[int]]): Each inner list represents a connected component, containing the nodes (users) in that component. # Constraints - `1 <= n <= 1000` - There are no self-loops or multiple edges between two nodes. # Example Given the graph: ``` n = 6 edges = [ (0, 1), (0, 2), (1, 2), (3, 4), (4, 5) ] ``` The function should output: ``` [ [0, 1, 2], [3, 4, 5] ] ``` # Remarks - Nodes within each connected component can be listed in any order. - Ensure your solution is optimal and handles the upper limit efficiently. - You can solve this problem using Depth-First Search (DFS) or Breadth-First Search (BFS).","solution":"def find_connected_components(n, edges): def dfs(node, visited, graph, component): visited[node] = True component.append(node) for neighbor in graph[node]: if not visited[neighbor]: dfs(neighbor, visited, graph, component) # Create adjacency list graph = [[] for _ in range(n)] for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * n components = [] for node in range(n): if not visited[node]: component = [] dfs(node, visited, graph, component) components.append(component) return components"},{"question":"Implement a function `kth_largest_element(nums: List[int], k: int) -> int` that returns the k-th largest element in an unsorted array. # Input - **List of Integers**, `nums`, where ( 1 leq n leq 10^4 ) and the values can range from -(10^4) to (10^4). - **Integer**, `k`, where ( 1 leq k leq n ). # Output - **Integer** value representing the k-th largest element in the array. # Constraints - The array may contain duplicate values. - The k-th largest element is determined from the sorted order of the array in descending order. # Example ```python nums_1 = [3, 2, 1, 5, 6, 4] k_1 = 2 print(kth_largest_element(nums_1, k_1)) # Output: 5 nums_2 = [3, 2, 3, 1, 2, 4, 5, 5, 6] k_2 = 4 print(kth_largest_element(nums_2, k_2)) # Output: 4 ``` Implement the function `kth_largest_element(nums: List[int], k: int) -> int` by completing this task. Notes - Consider using a Max-Heap or a Min-Heap to efficiently find the k-th largest element. - Ensure the function performs well for the maximum constraint values.","solution":"from typing import List import heapq def kth_largest_element(nums: List[int], k: int) -> int: Returns the k-th largest element in the list nums. # To find the k-th largest element, we can use a Min-Heap of size k. # The top of the Min-Heap will be the k-th largest element. min_heap = nums[:k] heapq.heapify(min_heap) # Convert the first k elements to a heap. for num in nums[k:]: if num > min_heap[0]: heapq.heapreplace(min_heap, num) # Replace and re-heapify. return min_heap[0]"},{"question":"# Problem Statement You are given a collection of points in a 2D plane. Your task is to find if there is any rectangle that can be formed such that all four of its vertices are present in the collection of points. # Function to Implement Implement the function `can_form_rectangle(points: List[Tuple[int, int]]) -> bool`. This function should return `True` if there exists a rectangle that can be formed using four points from the given list, otherwise `False`. # Input * `points` (List[Tuple[int, int]]): A list of tuples, where each tuple contains two integers representing the x and y coordinates of a point. # Output * (bool): `True` if there is at least one rectangle that can be formed, `False` otherwise. # Constraints 1. 0 ≤ length of `points` ≤ 5000 2. Each point in this list is unique. 3. Coordinate values are integers in the range -10,000 ≤ x, y ≤ 10,000. # Examples ```python assert can_form_rectangle([(1, 1), (2, 2), (1, 2), (2, 1)]) == True assert can_form_rectangle([(1, 1), (2, 2), (3, 3), (4, 4)]) == False assert can_form_rectangle([(0, 0), (1, 1), (1, 0), (0, 1), (2, 1), (1, 2)]) == True assert can_form_rectangle([(0, 0)]) == False ``` # Additional Notes * A rectangle in a 2D plane requires four distinct points. * You may want to use hashing to efficiently check for existence of potential vertices that would complete a rectangle. * Consider edge cases where the number of points is very small or very large within the allowed range. # Scenario This function can be useful in computational geometry problems, such as calculation of urban planning areas, optimizing layout algorithms in user interface design, or detecting rectangular shapes in digital image processing.","solution":"from typing import List, Tuple def can_form_rectangle(points: List[Tuple[int, int]]) -> bool: point_set = set(points) for i in range(len(points)): for j in range(i + 1, len(points)): (x1, y1), (x2, y2) = points[i], points[j] if x1 != x2 and y1 != y2: if (x1, y2) in point_set and (x2, y1) in point_set: return True return False"},{"question":"# Problem: Shape Perimeter Calculation System Your task is to design a shape perimeter calculation system that integrates various geometric perimeter calculation functions into a unified module. The goal is to develop functions for each of these shapes, ensuring proper input validation, and efficient computation while adhering to geometric formulas. Task Requirements: 1. **Function Signature**: - Implement functions corresponding to each of the following shapes: * Square * Rectangle * Triangle * Circle * Right Circular Cylinder (Perimeter of the base) * Regular Pentagon * Regular Hexagon * Regular Octagon - The function names should be prefixed with `perim_` followed by the shape name (e.g., `perim_square`). 2. **Input and Output**: - The shapes functions should accept `float` values and return the perimeter as a `float`. - If invalid values are provided (e.g. negative dimensions), the function should raise a `ValueError` with an appropriate message. 3. **Constraints**: - All inputs must be non-negative floats or integers. 4. **Performance Requirements**: - Ensure that the functions run in constant time O(1) and use constant space O(1). Example Functions: 1. **Square Perimeter** ```python def perim_square(side_length: float) -> float: if side_length < 0: raise ValueError(\\"perim_square() only accepts non-negative values\\") return 4 * side_length ``` 2. **Circle Perimeter (Circumference)** ```python def perim_circle(radius: float) -> float: if radius < 0: raise ValueError(\\"perim_circle() only accepts non-negative values\\") from math import pi return 2 * pi * radius ``` 3. **Rectangle Perimeter** ```python def perim_rectangle(length: float, width: float) -> float: if length < 0 or width < 0: raise ValueError(\\"perim_rectangle() only accepts non-negative values\\") return 2 * (length + width) ``` Test Your Functions: Ensure to cover the following cases in your tests: - Typical valid inputs showing correct perimeter calculations. - Boundary inputs like zero dimensions. - Invalid inputs like negative dimensions raising appropriate errors. Provide at least one test example for each perimeter calculation function in the form of `assert` statements to validate their behavior. Examples: ```python # Test for perim_square assert perim_square(5) == 20 assert perim_square(0) == 0 # Test for perim_circle assert perim_circle(3) == 18.84955592153876 # 2 * pi * 3 # Test for perim_rectangle assert perim_rectangle(4, 7) == 22 assert perim_rectangle(0, 5) == 10 ```","solution":"def perim_square(side_length: float) -> float: if side_length < 0: raise ValueError(\\"perim_square() only accepts non-negative values\\") return 4 * side_length def perim_circle(radius: float) -> float: if radius < 0: raise ValueError(\\"perim_circle() only accepts non-negative values\\") from math import pi return 2 * pi * radius def perim_rectangle(length: float, width: float) -> float: if length < 0 or width < 0: raise ValueError(\\"perim_rectangle() only accepts non-negative values\\") return 2 * (length + width) def perim_triangle(a: float, b: float, c: float) -> float: if a < 0 or b < 0 or c < 0: raise ValueError(\\"perim_triangle() only accepts non-negative values\\") return a + b + c def perim_right_circular_cylinder_base(radius: float) -> float: if radius < 0: raise ValueError(\\"perim_right_circular_cylinder_base() only accepts non-negative values\\") from math import pi return 2 * pi * radius def perim_pentagon(side_length: float) -> float: if side_length < 0: raise ValueError(\\"perim_pentagon() only accepts non-negative values\\") return 5 * side_length def perim_hexagon(side_length: float) -> float: if side_length < 0: raise ValueError(\\"perim_hexagon() only accepts non-negative values\\") return 6 * side_length def perim_octagon(side_length: float) -> float: if side_length < 0: raise ValueError(\\"perim_octagon() only accepts non-negative values\\") return 8 * side_length"},{"question":"# Problem: Longest Subsequence Without Repetition You are tasked with writing a function that finds the length of the longest subsequence of a given string where no characters repeat. The function should identify the subsequence with the maximum length such that all its characters are distinct. # Function Signature ```python def longest_unique_subsequence(s: str) -> int: pass ``` # Input 1. `s` (string): A string consisting of lowercase alphabets only. # Output * An integer representing the length of the longest subsequence with all distinct characters. # Constraints 1. The length of the input string `s` is in the range [1, 5000]. # Examples ```python # Example 1 print(longest_unique_subsequence(\\"abcabcbb\\")) # Expected Output: 3 # Explanation: The answer is \\"abc\\", which has length 3. # Example 2 print(longest_unique_subsequence(\\"bbbbb\\")) # Expected Output: 1 # Explanation: The answer is \\"b\\", with the length of 1. # Example 3 print(longest_unique_subsequence(\\"pwwkew\\")) # Expected Output: 3 # Explanation: The answer is \\"wke\\", which has length 3. Note that \\"pwke\\" is a subsequence, not a substring. ``` # Scenario You are analyzing a set of DNA sequences to find the longest segment where no base (A, T, C, G) repeats. This will help you in identifying unique patterns in the DNA data. The function will assist in determining such unique sequences effectively.","solution":"def longest_unique_subsequence(s: str) -> int: Returns the length of the longest subsequence in the given string `s` where no character is repeated. if not s: return 0 # Use a set to keep track of seen characters seen = set() max_length = 0 left_pointer = 0 for right_pointer in range(len(s)): while s[right_pointer] in seen: seen.remove(s[left_pointer]) left_pointer += 1 seen.add(s[right_pointer]) max_length = max(max_length, right_pointer - left_pointer + 1) return max_length"},{"question":"# Coding Question - Implementing a Circular Buffer As an essential part of a real-time data processing system, you need to implement a circular buffer (ring buffer) data structure. This buffer is used to store a continuous stream of incoming data and allows for reading and writing data efficiently. # Scenario A streaming application relies on a circular buffer to manage a fixed-size buffer for incoming data. The buffer must efficiently handle wrapping and ensure that reads and writes do not cause data corruption. # Task 1. Implement the `CircularBuffer` class according to the given specification. 2. Extend the buffer to handle scenarios where the buffer is either full or empty, and manage read and write pointers accordingly. # Class Signature ```python class CircularBuffer: def __init__(self, size: int): pass def write(self, data: int) -> bool: pass def read(self) -> int: pass ``` # Input * `size`: An integer specifying the size of the buffer. * `data`: An integer to be written into the buffer. # Output * All methods should return values as specified below. `write` method: * Return `True` if the write operation is successful. * Return `False` if the buffer is full and the write operation is not possible. `read` method: * Return the integer read from the buffer. * Return `-1` if the buffer is empty and no data can be read. # Constraints * Handle buffer sizes of arbitrary lengths within typical system memory bounds. * Optimize for speed and simplicity in your implementation. * Ensure the buffer correctly wraps and maintains data integrity for interleaved read and write operations. # Performance Requirements * Aim to maintain O(1) time complexity for both write and read operations. * Use fixed space complexity proportional to the size of the buffer. # Example ```python buffer = CircularBuffer(3) assert buffer.write(1) == True assert buffer.write(2) == True assert buffer.write(3) == True assert buffer.write(4) == False # Buffer is now full assert buffer.read() == 1 assert buffer.write(4) == True assert buffer.read() == 2 assert buffer.read() == 3 assert buffer.read() == 4 assert buffer.read() == -1 # Buffer is now empty ``` # Additional Notes * Ensure that you handle edge cases such as empty buffer reads and full buffer writes appropriately. * Avoid relying on external libraries for buffer management to maintain simplicity and portability.","solution":"class CircularBuffer: def __init__(self, size: int): self.size = size self.buffer = [None] * size self.read_pointer = 0 self.write_pointer = 0 self.full = False def write(self, data: int) -> bool: if self.full: return False self.buffer[self.write_pointer] = data self.write_pointer = (self.write_pointer + 1) % self.size if self.write_pointer == self.read_pointer: self.full = True return True def read(self) -> int: if self.is_empty(): return -1 data = self.buffer[self.read_pointer] self.buffer[self.read_pointer] = None self.read_pointer = (self.read_pointer + 1) % self.size self.full = False return data def is_empty(self): return not self.full and self.read_pointer == self.write_pointer"},{"question":"# Question Context: You are developing a file management system that needs to handle multiple files and their respective versions. Each file has various versions represented by different integers, and versions need to be sorted and queried efficiently. # Coding Task: Implement a function `merge_sorted_versions` which takes as input a list of lists where each inner list contains version numbers of a file, and an integer `v`. Each list represents the versions of a different file. You need to merge these lists and check if the version `v` exists in the merged list. # Input: * A list of lists where each inner list contains integers representing versions of a file, sorted in non-decreasing order. * An integer v representing the version to check for in the merged list. # Output: * A boolean value `True` if the version `v` exists in the merged list, otherwise `False`. # Constraints: * Each list (versions) is sorted in non-decreasing order. * The total number of version numbers in all lists combined will not exceed 10^5. # Performance Requirements: * Your solution should efficiently merge the lists and check for the existence of the version v. * Aim to achieve a time complexity close to O(n log n) for merging and O(log n) for search operations. # Scenario: Consider the following example scenario to better understand the task requirements. ```python def merge_sorted_versions(files: List[List[int]], v: int) -> bool: # Your implementation here pass # Example: files = [ [1, 3, 5], [2, 4, 6], [7, 8, 9] ] v = 4 # Calling the function should return True since the version 4 exists in the merged list [1, 2, 3, 4, 5, 6, 7, 8, 9] print(merge_sorted_versions(files, v)) # Output: True ``` Additional Example: ```python files = [ [10, 20, 30], [5, 9, 15], [3, 7, 13] ] v = 8 # Calling the function should return False since the version 8 does not exist in the merged list [3, 5, 7, 9, 10, 13, 15, 20, 30] print(merge_sorted_versions(files, v)) # Output: False ```","solution":"from typing import List def merge_sorted_versions(files: List[List[int]], v: int) -> bool: from heapq import merge # Use heapq.merge to merge sorted lists efficiently merged_list = list(merge(*files)) # Perform binary search to check if `v` exists in the merged list left, right = 0, len(merged_list) - 1 while left <= right: mid = (left + right) // 2 if merged_list[mid] == v: return True elif merged_list[mid] < v: left = mid + 1 else: right = mid - 1 return False"},{"question":"# Coding Assessment Question: Implementation of MinHeap **Scenario**: You have been tasked with implementing a basic MinHeap data structure in Python for educational purposes. A MinHeap is a binary tree where the value of each node is less than or equal to the values of its children. This property makes it useful for implementing priority queues. **Objective**: Write a class called `MinHeap` that allows inserting elements and extracting the minimum element. **Class Signature**: ```python class MinHeap: def __init__(self): pass def insert(self, val: int) -> None: pass def extract_min(self) -> int: pass ``` **Constructor**: - `__init__()`: Initializes an empty heap. **Methods**: - `insert(val: int) -> None`: Inserts a new integer `val` into the heap. - `extract_min() -> int`: Removes and returns the smallest element from the heap. If the heap is empty, it should raise an appropriate exception. **Constraints**: - Implement the heap operations using lists. - The heap should maintain the MinHeap property after each insertion and extraction. - Assume that the number of insert operations will not exceed 10^6. **Performance Requirements**: - Both `insert` and `extract_min` operations should have an average-case time complexity of O(log n). **Example**: ```python heap = MinHeap() heap.insert(3) heap.insert(2) heap.insert(15) print(heap.extract_min()) # Expected output: 2 heap.insert(5) heap.insert(4) heap.insert(45) print(heap.extract_min()) # Expected output: 3 ``` Additionally, ensure your implementation passes the following test: ```python heap = MinHeap() heap.insert(9) heap.insert(3) heap.insert(7) heap.insert(1) assert heap.extract_min() == 1 heap.insert(8) assert heap.extract_min() == 3 ```","solution":"class MinHeap: def __init__(self): self.heap = [] def insert(self, val: int) -> None: self.heap.append(val) self._bubble_up(len(self.heap) - 1) def extract_min(self) -> int: if len(self.heap) == 0: raise IndexError(\\"extract_min() called on empty heap\\") min_val = self.heap[0] last_val = self.heap.pop() if len(self.heap) > 0: self.heap[0] = last_val self._bubble_down(0) return min_val def _bubble_up(self, index: int) -> None: parent_index = (index - 1) // 2 if parent_index >= 0 and self.heap[index] < self.heap[parent_index]: self.heap[index], self.heap[parent_index] = self.heap[parent_index], self.heap[index] self._bubble_up(parent_index) def _bubble_down(self, index: int) -> None: smallest = index left_child_index = 2 * index + 1 right_child_index = 2 * index + 2 if left_child_index < len(self.heap) and self.heap[left_child_index] < self.heap[smallest]: smallest = left_child_index if right_child_index < len(self.heap) and self.heap[right_child_index] < self.heap[smallest]: smallest = right_child_index if smallest != index: self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index] self._bubble_down(smallest)"},{"question":"# Dynamic Array Manipulation You are tasked with implementing the `dynamic_array` function, which manipulates an array based on a series of operation commands. Each command instructs the function to perform a specific operation on the array. Your function should process each command in sequence and apply the corresponding changes to the array. The function should: 1. Accept an integer `n` representing the initial size of the array, an integer `q` representing the number of queries, and a list of tuples `queries` where each tuple contains the operation name as a string and other parameters as integers or floats if needed. 2. The array is initially filled with zeroes of length `n`. 3. Support the following operations: - `\\"update(i, value)\\"`: Update the element at index `i` to `value`. - `\\"add(i, value)\\"`: Add `value` to the element at index `i`. - `\\"multiply(i, value)\\"`: Multiply the element at index `i` by `value`. - `\\"reset()\\"`: Reset all elements of the array back to zero. 4. Return the final state of the array after processing all commands. **Function Signature**: ```python from typing import List, Tuple, Union def dynamic_array(n: int, q: int, queries: List[Tuple[str, Union[int, float]]]) -> List[Union[int, float]]: pass ``` # Example: ```python n = 5 q = 5 queries = [ (\\"update\\", 2, 5), (\\"add\\", 2, 3), (\\"multiply\\", 2, 2), (\\"reset\\",), (\\"update\\", 1, 7) ] output = dynamic_array(n, q, queries) print(output) # Output should be: # [0, 7, 0, 0, 0] ``` # Constraints: 1. `n` and `q` will be between 1 and 10^5. 2. Index `i` for operations will always be a valid index within the array. 3. The `value` for operations will be a non-negative integer or float less than or equal to 10^3. # Performance: Ensure that your implementation adheres to O(Q) complexity where Q is the number of queries.","solution":"from typing import List, Tuple, Union def dynamic_array(n: int, q: int, queries: List[Tuple[str, Union[int, float]]]) -> List[Union[int, float]]: # Initialize the array with zeroes of length n array = [0] * n for query in queries: operation = query[0] if operation == \\"update\\": i, value = query[1], query[2] array[i] = value elif operation == \\"add\\": i, value = query[1], query[2] array[i] += value elif operation == \\"multiply\\": i, value = query[1], query[2] array[i] *= value elif operation == \\"reset\\": array = [0] * n return array"},{"question":"# Question: Implement Matrix Rotation and Sum Calculation As a software engineer, you need to manipulate a list of numbers presented in a square matrix format. Your task is to rotate this matrix by 90 degrees clockwise and then calculate the sum of the elements in the resulting matrix. Your Task 1. Implement a function `rotate_matrix_90` that takes a square matrix (a list of lists) and rotates it by 90 degrees clockwise. 2. Implement a function `sum_rotated_matrix` that computes the sum of the elements in the rotated matrix using the `rotate_matrix_90` function. Function Signatures ```python def rotate_matrix_90(matrix: list[list[int]]) -> list[list[int]]: pass def sum_rotated_matrix(matrix: list[list[int]]) -> int: pass ``` # Parameters * **matrix (list[list[int]])**: A square matrix represented as a list of lists, where each inner list is a row of the matrix. # Returns For `rotate_matrix_90` function: * A new matrix (list of lists) that is the original matrix rotated by 90 degrees clockwise. For `sum_rotated_matrix` function: * An integer which is the sum of all the elements in the rotated matrix. # Examples ```python # Example for rotate_matrix_90 rotate_matrix_90([[1, 2], [3, 4]]) # Expected: [[3, 1], [4, 2]] rotate_matrix_90([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # Expected: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] # Example for sum_rotated_matrix sum_rotated_matrix([[1, 2], [3, 4]]) # Expected: 10 sum_rotated_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # Expected: 45 ``` # Constraints * The input matrix is guaranteed to be a square matrix, i.e., the number of rows equals the number of columns. * All elements of the matrix are integers. * The matrix will have at least 1 row and 1 column and at most 100 rows and 100 columns.","solution":"def rotate_matrix_90(matrix): Rotates a square matrix by 90 degrees clockwise. Parameters: matrix (list[list[int]]): A square matrix represented as a list of lists. Returns: list[list[int]]: A new matrix rotated by 90 degrees clockwise. n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix def sum_rotated_matrix(matrix): Computes the sum of the elements in a 90-degree clockwise rotated matrix. Parameters: matrix (list[list[int]]): A square matrix represented as a list of lists. Returns: int: The sum of all elements in the rotated matrix. rotated_matrix = rotate_matrix_90(matrix) total_sum = sum(sum(row) for row in rotated_matrix) return total_sum"},{"question":"# Fibonacci Sequence Generator Variation The Fibonacci sequence is a famous sequence in mathematics where each number is the sum of the two preceding ones, usually starting with 0 and 1. However, for this question, we are going to create a variation of the Fibonacci sequence. Instead of starting with 0 and 1, your task is to generate a Fibonacci-like sequence where the first two numbers are provided by the user. Function Signature ```python def generate_fibonacci_like_sequence(a: int, b: int, n: int) -> List[int]: pass ``` Input - **a**: An integer, representing the first number in the sequence. - **b**: An integer, representing the second number in the sequence. - **n**: An integer, representing the length of the sequence to be generated. Output - A list of integers representing the Fibonacci-like sequence of length `n`. Constraints - (0 leq a, b leq 10^9) - (1 leq n leq 100) # Sample Input ```python a = 3 b = 5 n = 10 ``` # Sample Output ```python [3, 5, 8, 13, 21, 34, 55, 89, 144, 233] ``` # Description - Start the sequence with `a` and `b`. - The next number in the sequence should be the sum of the previous two numbers. - Continue generating numbers until the length of the sequence reaches `n`. - If `n` is 1, return a list containing only `a`. - If `n` is 2, return a list containing `a` and `b`. # Additional Information - Ensure that your function handles edge cases where `a` or `b` are at their maximum limits. - Efficiency and accuracy should be considered when implementing the algorithm.","solution":"from typing import List def generate_fibonacci_like_sequence(a: int, b: int, n: int) -> List[int]: Generates a Fibonacci-like sequence of length n starting with a and b. if n == 1: return [a] if n == 2: return [a, b] sequence = [a, b] for _ in range(2, n): next_number = sequence[-1] + sequence[-2] sequence.append(next_number) return sequence"},{"question":"# Program Description In mathematics, a Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. Your task is to implement a function that returns the n-th Fibonacci number. The Fibonacci sequence is defined as: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 # Function Signature ```python def fibonacci(n: int) -> int: ``` # Input - **n**: A non-negative integer representing the position in the Fibonacci sequence. # Output - An integer corresponding to the n-th Fibonacci number. # Constraints - (0 leq n leq 10^6) # Exceptions The function should raise a `ValueError` in the following cases: - The input is negative. # Example ```python >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(10) 55 >>> fibonacci(-5) Traceback (most recent call last): ... ValueError: Negative index is not allowed ``` # Implementation Notes - Ensure the function is efficient, particularly for large values of n. - Consider using an iterative approach to avoid potential recursion limits and stack overflow issues for large n values.","solution":"def fibonacci(n: int) -> int: Returns the n-th Fibonacci number. Parameters: n (int): The position in the Fibonacci sequence (0-based index) Returns: int: The n-th Fibonacci number Raises: ValueError: If n is a negative integer if n < 0: raise ValueError(\\"Negative index is not allowed\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"# String Matching with KMP Algorithm Write a function that uses the Knuth-Morris-Pratt (KMP) algorithm to find all occurrences of a substring (pattern) within a given string (text). The KMP algorithm should preprocess the pattern to create an LPS (Longest Prefix Suffix) array and use it during the search phase to achieve efficient string matching. Input Format: - A string `text` where you will search for occurrences of the given pattern. - A string `pattern` which you want to locate within the `text`. Output Format: - Return a list of starting indices where the pattern is found in the text. If the pattern is not found, return an empty list. Constraints: - Both `text` and `pattern` will consist of lowercase English letters. - The length of `text` will not exceed 100,000 characters. - The length of `pattern` will not exceed 10,000 characters. Performance Requirements: - The solution should run in O(n + m) time complexity, where n is the length of the text and m is the length of the pattern. - Your solution should efficiently handle large inputs within the specified constraints. Example ```python text = \\"ababcabcabababd\\" pattern = \\"ababd\\" find_pattern(text, pattern) ``` Output: ``` [10] ``` In this example, the pattern \\"ababd\\" is found once in the text starting at index 10. **Function Signature:** ```python def find_pattern(text: str, pattern: str) -> List[int]: pass ``` Implement the function `find_pattern` which uses the KMP algorithm to locate all occurrences of `pattern` in the given `text`.","solution":"def compute_lps(pattern): Preprocesses the pattern to create the LPS (Longest Prefix Suffix) array. m = len(pattern) lps = [0] * m j = 0 # length of the previous longest prefix suffix i = 1 while i < m: if pattern[i] == pattern[j]: j += 1 lps[i] = j i += 1 else: if j != 0: j = lps[j - 1] else: lps[i] = 0 i += 1 return lps def find_pattern(text, pattern): Uses the KMP algorithm to find all occurrences of the pattern in the text. Returns the starting indices of the pattern in the text. n = len(text) m = len(pattern) if m == 0: return [] lps = compute_lps(pattern) result = [] i = 0 # index for text j = 0 # index for pattern while i < n: if text[i] == pattern[j]: i += 1 j += 1 if j == m: result.append(i - j) j = lps[j - 1] elif i < n and text[i] != pattern[j]: if j != 0: j = lps[j - 1] else: i += 1 return result"},{"question":"# Coding Assessment Question Context: You are working on a project that involves the implementation of a basic RSA encryption system, which is essential for secure data communication. The RSA system relies heavily on the generation of large prime numbers and the computation of modular exponentiation. Proper implementation of these components ensures strong encryption. Problem Statement: Your task is to implement the main functions required for the RSA encryption and decryption process: `generate_primes`, `compute_keys`, and `rsa_encrypt_decrypt`. **Function 1: Prime Number Generation** Implement a function `generate_primes(bits: int) -> tuple[int, int]` that generates two distinct large prime numbers each of approximated to the specified bit length. **Function 2: Key Pair Computation** Implement a function `compute_keys(prime1: int, prime2: int) -> tuple[tuple[int, int], tuple[int, int]]` that computes the public and private keys using the generated prime numbers. **Function 3: RSA Encryption and Decryption** Implement a function `rsa_encrypt_decrypt(message: int, key: tuple[int, int], n: int) -> int` that performs RSA encryption or decryption based on the provided key and modulus. **Constraints and Requirements:** 1. **Prime Number Generation**: - The number of bits specified is always a power of 2 (e.g., 1024, 2048, etc.). - Ensure the primes generated are distinct and validate their primality. 2. **Key Computation**: - Compute the modulus ( n = text{prime1} times text{prime2} ). - Calculate the public exponent ( e ), usually 65537. - Compute the private exponent ( d ) such that ( e times d equiv 1 mod phi(n) ). 3. **Encryption and Decryption**: - Perform modular exponentiation for efficient computation. - The function should be able to handle both encryption (using the public key) and decryption (using the private key). **Expected Input and Output:** 1. `generate_primes(bits: int) -> tuple[int, int]`: - **Input**: A bit length for the prime numbers. - **Output**: A tuple of two distinct prime numbers. 2. `compute_keys(prime1: int, prime2: int) -> tuple[tuple[int, int], tuple[int, int]]`: - **Input**: Two distinct prime numbers. - **Output**: A tuple of two tuples representing the public key and private key. 3. `rsa_encrypt_decrypt(message: int, key: tuple[int, int], n: int) -> int`: - **Input**: An integer message, a key tuple (exponent, modulus), and the modulus ( n ). - **Output**: The encrypted/decrypted integer message. **Performance Requirements:** - Efficient generation of large primes and computation of keys to avoid timeouts. - Ensure robustness for large bit lengths and handle edge cases appropriately. **Example Usage:** ```python # Example usage: # Generate two large prime numbers of 1024 bits each. prime1, prime2 = generate_primes(1024) print(prime1, prime2) # Output: Two large prime numbers # Compute RSA keys from the generated primes. public_key, private_key = compute_keys(prime1, prime2) print(public_key) # Output: A tuple representing the public key (e, n) print(private_key) # Output: A tuple representing the private key (d, n) # RSA encryption and decryption. message = 42 n = public_key[1] encrypted_message = rsa_encrypt_decrypt(message, public_key, n) decrypted_message = rsa_encrypt_decrypt(encrypted_message, private_key, n) print(encrypted_message) # Output: Encrypted message as integer print(decrypted_message) # Output: Original message 42 ```","solution":"import random from sympy import isprime, mod_inverse def generate_primes(bits: int) -> tuple[int, int]: Generates two distinct large prime numbers each of the specified bit length. prime1 = prime2 = 1 while prime1 == prime2: prime1 = random.getrandbits(bits) prime2 = random.getrandbits(bits) # Ensure they are prime while not isprime(prime1): prime1 = random.getrandbits(bits) while not isprime(prime2): prime2 = random.getrandbits(bits) return prime1, prime2 def compute_keys(prime1: int, prime2: int) -> tuple[tuple[int, int], tuple[int, int]]: Computes the RSA public and private keys from two prime numbers. n = prime1 * prime2 phi_n = (prime1 - 1) * (prime2 - 1) e = 65537 d = mod_inverse(e, phi_n) return (e, n), (d, n) def rsa_encrypt_decrypt(message: int, key: tuple[int, int], n: int) -> int: Encrypts/Decrypts a message using the provided key and modulus. Performs modular exponentiation. exponent, modulus = key return pow(message, exponent, modulus)"},{"question":"# Question Create a function that generates a list of integers representing the Nth row of Pascal\'s Triangle. Pascal\'s Triangle is formed by summing adjacent elements in the previous row, starting with [1] at row 0. The Nth row contains N + 1 elements. Function Signature ```python def generate_pascals_triangle_row(n: int) -> List[int]: ... ``` Input - **n** (int): the index of the row to generate. Must be a non-negative integer. Output - (List[int]): the list of integers representing the Nth row of Pascal\'s Triangle. Constraints - ( 0 leq n leq 30 ) - Do not use recursion. Performance Requirement - Implement in O(n^2) time complexity. Examples ```python >>> generate_pascals_triangle_row(0) [1] >>> generate_pascals_triangle_row(1) [1, 1] >>> generate_pascals_triangle_row(4) [1, 4, 6, 4, 1] >>> generate_pascals_triangle_row(5) [1, 5, 10, 10, 5, 1] ```","solution":"from typing import List def generate_pascals_triangle_row(n: int) -> List[int]: Generates the Nth row of Pascal\'s Triangle. if n == 0: return [1] row = [1] for k in range(1, n + 1): val = row[k - 1] * (n - k + 1) // k row.append(val) return row"},{"question":"# Truck Delivery Route Optimization You are responsible for assigning routes to a set of delivery trucks in such a way that the total distance traveled by all trucks is minimized. Each truck has a maximum distance it can travel in a day, and each route comprises a list of cities with specific distances between them. Your task is to determine the minimum total distance that all trucks can travel to cover all routes. # Function Signature ```python def minimize_total_distance(trucks: List[int], routes: List[List[int]]) -> int: pass ``` # Input * `trucks` (List[int]): A list where each element represents the maximum distance a truck can travel in a day. * For example, `[100, 200, 150]` means: * Truck 0 can travel up to 100 units of distance. * Truck 1 can travel up to 200 units of distance. * Truck 2 can travel up to 150 units of distance. * `routes` (List[List[int]]): A list where each element is a list representing the distances between cities on a specific route. * For example, `[[50, 60, 70], [80, 30], [90, 40, 20]]` means: * Route 0 includes distances of 50, 60, and 70 units between cities. * Route 1 includes distances of 80 and 30 units between cities. * Route 2 includes distances of 90, 40, and 20 units between cities. # Output * Returns (int): The minimum total distance that all trucks can travel to cover all routes. # Constraints * 1 <= len(trucks) <= 10 * 1 <= len(routes) <= 10 * Each distance in routes is a positive integer. # Example ```python assert minimize_total_distance([100, 200, 150], [[50, 60, 70], [80, 30], [90, 40, 20]]) == 330 ``` # Explanation For the provided example, the function should return `330`, meaning the minimum total distance that the trucks need to travel to cover all routes is 330 units. # Notes * Ensure each route\'s total distance does not exceed the maximum distance any corresponding truck can travel. * Factor in edge cases such as routes that cannot be completed by any truck, routes of zero distance, etc. * Utilize suitable algorithms like dynamic programming or greedy techniques to find an optimal solution.","solution":"from typing import List def minimize_total_distance(trucks: List[int], routes: List[List[int]]) -> int: # The main idea is to sort both trucks and routes based on their capacities and requirements. trucks.sort(reverse=True) routes = sorted(routes, key=lambda x: sum(x), reverse=True) total_distance = 0 for route in routes: required_distance = sum(route) for i in range(len(trucks)): if trucks[i] >= required_distance: total_distance += required_distance trucks.pop(i) break return total_distance"},{"question":"# Scenario You are tasked with developing a scheduling system for a conference where multiple sessions can be held concurrently, but rooms are limited. To ensure optimal room utilization, you need to implement a mechanism that allocates rooms in a way that maximizes their usage without overlapping any sessions in the same room. # Challenge Implement a custom scheduling system that assigns sessions to rooms without any overlaps. Sessions are defined with a start time and end time and need to be allocated to rooms such that no two sessions in the same room overlap. # Task 1. Implement the `add_session` method to handle the addition of new sessions. Ensure this method checks for potential overlaps and finds an appropriate room or creates a new one if necessary. 2. Implement a `room_utilization` method to calculate the current utilization percentage of each room, which is the ratio of the total scheduled time in the room to the total possible time. 3. Enhance the `_optimize_schedule` method to improve room utilization by potentially re-allocating sessions based on certain heuristics. # Requirements - Implement the methods as specified. - Ensure the system handles multiple sessions and rooms efficiently. - Optimize for space and time complexity in the scheduling algorithm. - Consider edge cases such as simultaneous start and end times. # Input and Output - Input: A series of session objects with start and end times to be added to the schedule. - Output: After each addition, return the current list of rooms and their utilization percentages. # Example Suppose you have the following sequence of operations: ```python sched = ConferenceScheduler() sched.add_session(\\"Session1\\", start_time=9, end_time=10) print(sched.room_utilization()) # Output current room utilization sched.add_session(\\"Session2\\", start_time=9.5, end_time=11) print(sched.room_utilization()) # Output current room utilization sched.add_session(\\"Session3\\", start_time=10, end_time=11) print(sched.room_utilization()) # Output current room utilization ``` # Constraints - Sessions have a start time and end time represented as floats (e.g., 9.0, 10.5). - The scheduling system should handle at least 10 rooms and 100 sessions efficiently. - Aim to use the least amount of rooms necessary for scheduling. Implement the `ConferenceScheduler` class with the required methods, ensuring it efficiently manages sessions and room utilization.","solution":"class ConferenceScheduler: def __init__(self): self.rooms = [] def add_session(self, session_name, start_time, end_time): for room in self.rooms: if all(s[1] <= start_time or s[0] >= end_time for s in room): room.append((start_time, end_time)) return self.rooms.append([(start_time, end_time)]) def room_utilization(self): utilizations = [] total_time = 24.0 # Assuming the conference day lasts 24 hours for room in self.rooms: occupied_time = sum(e-s for s, e in room) utilization = (occupied_time / total_time) * 100 utilizations.append(utilization) return utilizations"},{"question":"Matrix Zigzag Order You are tasked with writing a function `matrix_zigzag_order` that takes a 2D matrix of integers as input and returns a list of integers representing the elements of the matrix traversed in a zigzag order. In zigzag order, the traversal starts from the top-left corner, moves right, then diagonally down-left until the boundary, after which it moves down, then diagonally up-right, and so forth. Function Signature ```python def matrix_zigzag_order(matrix: List[List[int]]) -> List[int]: pass ``` Input - `matrix` (List[List[int]]): A 2D matrix containing integers (1 <= len(matrix), len(matrix[0]) <= 100). Output - Returns a list of integers representing the traversal of the matrix in zigzag order. Examples ```python >>> matrix_zigzag_order([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) [1, 2, 4, 7, 5, 3, 6, 8, 9] >>> matrix_zigzag_order([[1, 2], [3, 4]]) [1, 2, 3, 4] >>> matrix_zigzag_order([[1]]) [1] ``` Approach - Start the traversal from the top-left corner of the matrix. - Continue moving in a zigzag pattern: right, then diagonally down-left until you hit a boundary, then down, and diagonally up-right until you hit a boundary, and repeat. - Ensure to handle cases when the matrix has only one row or one column seamlessly.","solution":"from typing import List def matrix_zigzag_order(matrix: List[List[int]]) -> List[int]: if not matrix or not matrix[0]: return [] rows = len(matrix) cols = len(matrix[0]) result = [] row, col = 0, 0 up = True while row < rows and col < cols: result.append(matrix[row][col]) if up: if col == cols - 1: row += 1 up = False elif row == 0: col += 1 up = False else: row -= 1 col += 1 else: if row == rows - 1: col += 1 up = True elif col == 0: row += 1 up = True else: row += 1 col -= 1 return result"},{"question":"# Question Scenario: As part of a larger financial application, you need to implement a function that summarizes transactions for a given list of daily transactions. Each transaction includes the day and the amount transacted. Your task is to create a summary of these transactions by calculating the total amount transacted for each day. Task: Implement the function `summarize_transactions` that takes a list of tuples where each tuple contains a day represented as an integer (1-31) and a transaction amount as a float. The function should return a list of tuples where each tuple contains a day and the total amount of transactions for that day, sorted by the day. Implementation: 1. Define the function `summarize_transactions(transactions: List[Tuple[int, float]]) -> List[Tuple[int, float]]`. 2. Ensure the function handles the following: * Properly adds up the transaction amounts for each day. * Returns the results sorted by the day in ascending order. * Input validation to ensure each transaction is correctly structured. 3. Optimize for performance (O(n) time complexity where n is the number of transactions). Input: * A list of tuples `transactions` where each tuple contains: * An integer representing the day (1-31). * A float representing the transaction amount. Output: * A list of tuples where each tuple contains: * An integer representing the day. * A float representing the total transaction amount for that day. * The list should be sorted by the day in ascending order. Constraints: * Each day is an integer between 1 and 31. * Transaction amounts are floating point numbers and can be positive or negative. * The list of transactions may be empty. Examples: ```python >>> summarize_transactions([(1, 100.50), (2, 200.75), (1, -50.25), (3, 150.00), (2, 100.25)]) [(1, 50.25), (2, 301.0), (3, 150.0)] >>> summarize_transactions([(4, 500.00), (4, -200.50), (4, 100.25)]) [(4, 399.75)] >>> summarize_transactions([]) [] ``` Performance Requirements: The function should run efficiently with a linear time complexity with respect to the number of transactions, ensuring it can handle a large number of transactions efficiently.","solution":"from typing import List, Tuple from collections import defaultdict def summarize_transactions(transactions: List[Tuple[int, float]]) -> List[Tuple[int, float]]: Summarizes transactions by day. Parameters: transactions (List[Tuple[int, float]]): List of tuples where each tuple contains a day (int) and a transaction amount (float). Returns: List[Tuple[int, float]]: List of tuples with each tuple containing a day and the total amount of transactions for that day, sorted by the day. summary = defaultdict(float) for day, amount in transactions: summary[day] += amount # Convert the dictionary to a sorted list of tuples summarized_list = sorted(summary.items()) return summarized_list"},{"question":"# Find the Second Largest Number You are tasked with writing a function to find the second largest number in a list of integers. This function is essential in scenarios where determining the runner-up value is required for comparative analysis or decision-making processes. # Function Signature: ```python def find_second_largest(numbers: list[int]) -> int: pass ``` # Input * `numbers` (list of int): A list of integers, which may include both positive and negative numbers and can have duplicates. The list will always contain at least two distinct numbers. # Output * An integer representing the second largest number in the list. # Constraints * 2 <= len(numbers) <= 10^6 * -10^9 <= numbers[i] <= 10^9 # Example ```python # Example 1 print(find_second_largest([1, 3, 5, 7, 7])) # Output: 5 # Example 2 print(find_second_largest([-1, -3, -5, -7])) # Output: -3 # Example 3 print(find_second_largest([1, 2, 3, 4, 5])) # Output: 4 ``` # Scenario: In a ranking system where scores are given to participants, you need to identify the runner-up score to grant a bonus prize. This functionality is crucial for fairness in competitive environments. Your solution should ensure efficiency to handle large datasets typically found in ranking applications. Your solution should handle the list processing efficiently and avoid unnecessary computations, ensuring performance remains optimal even for the higher range of input sizes.","solution":"def find_second_largest(numbers: list[int]) -> int: first = second = -float(\'inf\') for number in numbers: if number > first: second = first first = number elif number > second and number != first: second = number return second"},{"question":"# Scenario You are developing a feature for a text editor that auto-formats code according to specified guidelines. One such guideline is ensuring the proper indentation of nested blocks of code. You have decided to implement a function that corrects the indentation of a given code snippet. The code snippet uses curly braces `{}` for denoting blocks of code. # Task Implement a function to properly indent a given code snippet. The function should take a list of strings, where each string is a line of code, and return a list of strings with corrected indentation. Each level of indentation should be represented by four spaces. # Function Signature ```python def correct_indentation(code: List[str]) -> List[str]: pass ``` # Input * `code` (List of strings): The code snippet to be formatted, where each string represents a single line of code. # Output * A list of strings representing the code snippet with correctly adjusted indentation. # Constraints * The length of each string will not exceed 100 characters. * The function should ensure that the code is readable and properly indented according to nested blocks. * All opening `{` and closing `}` braces are correctly matched and properly nested in the input. # Examples ```python assert correct_indentation([ \\"def example():\\", \\"{\\", \\"x = 1\\", \\"if x == 1:\\", \\"{\\", \\"print(\'X is 1\')\\", \\"}\\", \\"}\\" ]) == [ \\"def example():\\", \\"{\\", \\" x = 1\\", \\" if x == 1:\\", \\" {\\", \\" print(\'X is 1\')\\", \\" }\\", \\"}\\" ] assert correct_indentation([ \\"def main():\\", \\"{\\", \\"built_in_func()\\", \\"custom_func()\\", \\"if condition:\\", \\"{\\", \\"perform_action()\\", \\"}\\", \\"another_action()\\", \\"}\\" ]) == [ \\"def main():\\", \\"{\\", \\" built_in_func()\\", \\" custom_func()\\", \\" if condition:\\", \\" {\\", \\" perform_action()\\", \\" }\\", \\" another_action()\\", \\"}\\" ] ``` Implement this function to ensure proper indentation in code snippets.","solution":"from typing import List def correct_indentation(code: List[str]) -> List[str]: Correctly indents a list of lines of code using 4 spaces for each indentation level. result = [] indent_level = 0 indent_str = \\" \\" * 4 for line in code: stripped_line = line.strip() if stripped_line == \\"}\\": indent_level -= 1 result.append(indent_str * indent_level + stripped_line) if stripped_line == \\"{\\": indent_level += 1 return result"},{"question":"**Function to Process Real-time Stock Prices and Alert Trigger** You are developing a stock trading application that needs to monitor real-time stock prices. The application should fetch the latest stock prices at regular intervals and trigger an alert if certain conditions are met. **Objective**: Create a function that processes real-time stock prices and triggers alerts based on predefined conditions. You will enhance the provided code snippet to include error handling, asynchronous data fetching, and alert functionality. **Tasks**: 1. **Asynchronous Data Fetching**: Modify the `fetch_stock_price` function to fetch stock prices asynchronously for multiple stocks concurrently using the `aiohttp` library. 2. **Error Handling**: Ensure the function correctly handles potential errors such as network issues, 404 Not Found, and unexpected API responses by raising appropriate exceptions. 3. **Price Monitoring**: Implement logic to compare fetched prices against predefined conditions (e.g., price threshold) and trigger alerts (print to console) when conditions are met. 4. **Retries**: Implement a retry mechanism with exponential backoff for transient network errors, retrying up to 3 times before giving up. 5. **Documentation**: Clearly document your code, explaining how asynchronous fetching, error handling, and alert triggering are implemented. **Input and Output**: * Input: Dictionary of stock symbols and their respective price thresholds. ```python {\\"AAPL\\": 150, \\"GOOGL\\": 2800, \\"TSLA\\": 700} ``` * Output: None. Print alerts to console when stock prices meet or exceed thresholds. **Constraints**: * Use asynchronous programming for fetching stock prices. * Implement comprehensive error handling and retry logic. * Ensure the solution is efficient and does not block execution while waiting for responses. * For demonstration purposes, you can use a mock API endpoint with sample data. Here is the original code snippet for reference: ```python import aiohttp import asyncio STOCK_API_URL = \\"https://api.mockstocktrading.com/price\\" async def fetch_stock_price(session: aiohttp.ClientSession, symbol: str) -> float: async with session.get(f\\"{STOCK_API_URL}/{symbol}\\") as response: response.raise_for_status() data = await response.json() return float(data[\\"price\\"]) async def check_stock_prices(stock_thresholds: dict[str, float]): async with aiohttp.ClientSession() as session: tasks = [fetch_stock_price(session, symbol) for symbol in stock_thresholds.keys()] prices = await asyncio.gather(*tasks, return_exceptions=True) for symbol, price in zip(stock_thresholds.keys(), prices): if isinstance(price, Exception): print(f\\"Error fetching price for {symbol}: {price}\\") elif price >= stock_thresholds[symbol]: print(f\\"Alert: {symbol} price has reached {price}\\") if __name__ == \\"__main__\\": stock_thresholds = {\\"AAPL\\": 150, \\"GOOGL\\": 2800, \\"TSLA\\": 700} asyncio.run(check_stock_prices(stock_thresholds)) ```","solution":"import aiohttp import asyncio import time STOCK_API_URL = \\"https://api.mockstocktrading.com/price\\" class StockFetchError(Exception): pass async def fetch_stock_price(session: aiohttp.ClientSession, symbol: str, retries=3, backoff_in_seconds=1) -> float: for attempt in range(retries): try: async with session.get(f\\"{STOCK_API_URL}/{symbol}\\") as response: if response.status == 404: raise StockFetchError(f\\"Stock symbol {symbol} not found\\") response.raise_for_status() data = await response.json() if \\"price\\" in data: return float(data[\\"price\\"]) else: raise StockFetchError(f\\"Unexpected response structure: {data}\\") except aiohttp.ClientError as e: if attempt + 1 == retries: raise StockFetchError(f\\"Failed to fetch stock {symbol} after {retries} attempts\\") from e time.sleep(backoff_in_seconds * (2 ** attempt)) raise StockFetchError(f\\"Failed to fetch stock price for {symbol}\\") async def check_stock_prices(stock_thresholds: dict[str, float]): async with aiohttp.ClientSession() as session: tasks = [fetch_stock_price(session, symbol) for symbol in stock_thresholds.keys()] prices = await asyncio.gather(*tasks, return_exceptions=True) for symbol, result in zip(stock_thresholds.keys(), prices): if isinstance(result, Exception): print(f\\"Error fetching price for {symbol}: {result}\\") elif result >= stock_thresholds[symbol]: print(f\\"Alert: {symbol} price has reached {result}\\") if __name__ == \\"__main__\\": stock_thresholds = {\\"AAPL\\": 150, \\"GOOGL\\": 2800, \\"TSLA\\": 700} asyncio.run(check_stock_prices(stock_thresholds))"},{"question":"# Combination Sum with a Target **Scenario**: You need to develop a system that helps users find combinations of numbers that add up to a specific target sum. The users can input a list of numbers and a target sum, and the system should return all unique combinations where the numbers sum to the target. **Problem**: Design a function `combination_sum` that identifies all unique combinations in a list of positive integers `candidates` where the numbers sum to a `target` sum. Each number in `candidates` can be used multiple times in a combination. Your task is to implement this function using a backtracking approach to efficiently explore all possible combinations. **Input/Output**: - **Input**: - `candidates`: A list of distinct positive integers. - `target`: A positive integer representing the target sum. - **Output**: A list of lists, where each list is a unique combination of numbers that sum to the `target`. **Constraints**: - The length of `candidates` will be between 1 and 20. - The values in `candidates` will be between 1 and 200. - The `target` will be a positive integer not exceeding 500. **Function Signature**: ```python def combination_sum(candidates: List[int], target: int) -> List[List[int]]: pass ``` **Example**: ```python assert combination_sum([2, 3, 6, 7], 7) == [[2, 2, 3], [7]] assert combination_sum([2, 3, 5], 8) == [[2, 2, 2, 2], [2, 3, 3], [3, 5]] assert combination_sum([2], 1) == [] assert combination_sum([1], 1) == [[1]] assert combination_sum([1], 2) == [[1, 1]] ``` You are expected to handle various edge cases and ensure the solution explores the combinations efficiently.","solution":"from typing import List def combination_sum(candidates: List[int], target: int) -> List[List[int]]: def backtrack(start, remaining, path): if remaining == 0: result.append(list(path)) return for i in range(start, len(candidates)): if candidates[i] > remaining: continue path.append(candidates[i]) backtrack(i, remaining - candidates[i], path) path.pop() result = [] candidates.sort() backtrack(0, target, []) return result"},{"question":"# Problem Statement You are required to write a function that finds all the prime numbers less than or equal to a given number. The function should return these prime numbers as a list. # Function Signature ```python def prime_numbers_up_to(n: int) -> list: ``` # Input and Output * **Input**: A single integer `n` (0 ≤ n ≤ 10^6) * **Output**: A list of integers representing all prime numbers less than or equal to `n`. # Example ```python assert prime_numbers_up_to(10) == [2, 3, 5, 7] assert prime_numbers_up_to(1) == [] assert prime_numbers_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19] assert prime_numbers_up_to(2) == [2] assert prime_numbers_up_to(0) == [] ``` # Constraints * The function should handle the input efficiently even for large values of `n`. # Hint You may use the Sieve of Eratosthenes algorithm to find all the prime numbers up to `n` efficiently.","solution":"def prime_numbers_up_to(n: int) -> list: Finds all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) # Create a boolean array \\"sieve\\" and initialize all entries as true sieve[0], sieve[1] = False, False # 0 and 1 are not prime numbers p = 2 while p * p <= n: if sieve[p]: # If sieve[p] is not changed, then it is a prime for i in range(p * p, n + 1, p): sieve[i] = False p += 1 primes = [p for p in range(n + 1) if sieve[p]] return primes"},{"question":"# Problem Statement **City Park Tree Allocation** You are working on a tree allocation system for the parks department of a city. The city has several parks, each identified by a unique name, and each park has a capacity that indicates the maximum number of trees it can accommodate. Your task is to create a Python function that helps allocate trees to parks and ensures that no park exceeds its capacity. Write a Python function `allocate_trees(parks: Dict[str, int], allocations: List[Tuple[str, int]]) -> Dict[str, int]` that allocates trees to the parks. **Input Format:** - A dictionary `parks` where the key is the park name (a string) and the value is the maximum capacity of trees (an integer). - A list `allocations` of tuples, where each tuple contains the park name (a string) and the number of trees (an integer) to be allocated to that park. **Output Format:** - Returns a dictionary where the key is the park name (a string) and the value is the total number of trees allocated to that park. If an allocation exceeds the park\'s capacity, raise a `ValueError` with an appropriate message. **Constraints:** - Park names are unique. - Tree allocations in `allocations` list can be zero or positive integers. - Park capacities in `parks` dictionary are positive integers. - The function should handle incorrect input types by raising an appropriate error. **Examples:** ```python >>> parks = { ... \\"Central Park\\": 100, ... \\"Riverside Park\\": 120, ... \\"Madison Square Park\\": 50 ... } >>> allocations = [ ... (\\"Central Park\\", 40), ... (\\"Riverside Park\\", 80), ... (\\"Central Park\\", 20), ... (\\"Madison Square Park\\", 60) ... ] >>> allocate_trees(parks, allocations) Traceback (most recent call last): ... ValueError: Allocation exceeds capacity for Madison Square Park >>> allocations = [ ... (\\"Central Park\\", 40), ... (\\"Riverside Park\\", 80), ... (\\"Central Park\\", 20), ... (\\"Madison Square Park\\", 30) ... ] >>> allocate_trees(parks, allocations) {\'Central Park\': 60, \'Riverside Park\': 80, \'Madison Square Park\': 30} >>> allocations = [ ... (\\"Central Park\\", 40), ... (\\"Riverside Park\\", -10), ... (\\"Central Park\\", 20), ... (\\"Madison Square Park\\", 30) ... ] >>> allocate_trees(parks, allocations) Traceback (most recent call last): ... ValueError: Allocation counts must be non-negative integers. >>> parks = { ... \\"Central Park\\": 100, ... \\"Riverside Park\\": 120, ... \\"Madison Square Park\\": 50 ... } >>> allocations = [ ... (\\"Central Park\\", 40), ... (4032, 80), ... (\\"Central Park\\", 20), ... (\\"Madison Square Park\\", 30) ... ] >>> allocate_trees(parks, allocations) Traceback (most recent call last): ... ValueError: Invalid park name in allocations list. >>> allocate_trees(\\"hello\\", allocations) Traceback (most recent call last): ... ValueError: Parks must be a dictionary with park names and their capacities. >>> parks = { ... \\"Central Park\\": 100, ... \\"Riverside Park\\": 120, ... \\"Madison Square Park\\": 50 ... } >>> allocations = \\"allocations\\" >>> allocate_trees(parks, allocations) Traceback (most recent call last): ... ValueError: Allocations must be a list of tuples with park names and tree quantities. ``` Implement the function using the algorithm description provided.","solution":"def allocate_trees(parks, allocations): Allocates trees to parks based on the given allocations and ensures no park exceeds its capacity. Parameters: parks (dict): A dictionary where the keys are park names and the values are the maximum capacity of trees. allocations (list): A list of tuples where each tuple contains the park name and the number of trees to be allocated. Returns: dict: A dictionary with the total number of trees allocated to each park. Raises: ValueError: If an allocation exceeds the park\'s capacity, if invalid park names are used, or if inputs are incorrect types. # Check if parks is a dictionary if not isinstance(parks, dict): raise ValueError(\\"Parks must be a dictionary with park names and their capacities.\\") # Check if allocations is a list if not isinstance(allocations, list): raise ValueError(\\"Allocations must be a list of tuples with park names and tree quantities.\\") # Initialize a dictionary to keep track of tree allocations allocated_trees = {park: 0 for park in parks} for park, count in allocations: # Check if park name is valid if park not in parks: raise ValueError(f\\"Invalid park name in allocations list.\\") # Check if count is a non-negative integer if not isinstance(count, int) or count < 0: raise ValueError(\\"Allocation counts must be non-negative integers.\\") # Add the count to the current allocation allocated_trees[park] += count # Check if the allocation exceeds the park\'s capacity if allocated_trees[park] > parks[park]: raise ValueError(f\\"Allocation exceeds capacity for {park}\\") return allocated_trees"},{"question":"# Question You are given a list of strings that represent file names with their extensions. Your task is to write a function that categorizes these file names based on their extensions and outputs a dictionary where each key is an extension and each value is a list of file names with that extension. # Function Signature ```python def categorize_files(file_names: list) -> dict: pass ``` # Input - `file_names` (list of str): A list of strings where each string is a file name with an extension. # Output - Returns a dictionary where each key is a string representing a file extension and each value is a list of file names (including their extensions) that have that extension. The dictionary should be sorted by extension alphabetically. # Constraints - The input list will contain at least one file name. - Each file name will contain exactly one extension. - File names and extensions will be case insensitive. - File names will not contain any special characters except for underscores (`_`) and dots (`.`). # Examples ```python >>> categorize_files([\\"file1.txt\\", \\"file2.txt\\", \\"image1.jpg\\", \\"document1.pdf\\", \\"script.py\\"]) {\'jpg\': [\'image1.jpg\'], \'pdf\': [\'document1.pdf\'], \'py\': [\'script.py\'], \'txt\': [\'file1.txt\', \'file2.txt\']} >>> categorize_files([\\"file.TXT\\", \\"script.PY\\", \\"image.JPEG\\", \\"document.PDF\\", \\"anotherfile.Txt\\"]) {\'jpeg\': [\'image.JPEG\'], \'pdf\': [\'document.PDF\'], \'py\': [\'script.PY\'], \'txt\': [\'file.TXT\', \'anotherfile.Txt\']} >>> categorize_files([\\"music.mp3\\", \\"song.MP3\\", \\"video.mp4\\", \\"clip.MP4\\", \\"photo.JPG\\"]) {\'jpg\': [\'photo.JPG\'], \'mp3\': [\'music.mp3\', \'song.MP3\'], \'mp4\': [\'video.mp4\', \'clip.MP4\']} ``` # Requirements * Return a dictionary where keys (extensions) are lowercase, while file names maintain their original case. * Implement the function in a clear and efficient manner.","solution":"def categorize_files(file_names: list) -> dict: Categorizes file names based on their extensions. Args: file_names (list of str): A list of file names with their extensions. Returns: dict: A dictionary where each key is an extension (lowercase) and each value is a list of file names that have that extension. from collections import defaultdict categorized_files = defaultdict(list) for file_name in file_names: # Split the file name into name and extension parts name, extension = file_name.rsplit(\'.\', 1) # Convert the extension to lowercase to maintain case insensitivity extension = extension.lower() # Add the file name to the corresponding extension key categorized_files[extension].append(file_name) # Convert defaultdict to dict and sort by extension keys sorted_categorized_files = dict(sorted(categorized_files.items())) return sorted_categorized_files"},{"question":"# Description: Given a list of strings, determine the longest common suffix among them. The common suffix is the substring that appears at the end of each string in the list. # Task: You need to implement a function, `find_longest_common_suffix(strings: List[str]) -> str`, which returns the longest common suffix shared by all strings in the given list. If the list is empty, the function should return an empty string. # Input: - A list of strings `strings`, with a length `n` (0 <= n <= 1000). # Output: - The longest common suffix shared by all the strings in the list. If no common suffix exists, return an empty string. # Constraints: - The length of each string will be between 0 and 100. # Performance Requirements: - The solution should be efficient in handling inputs up to the specified constraints. # Example: ```python def find_longest_common_suffix(strings: List[str]) -> str: # (Your logic here) pass print(find_longest_common_suffix([\\"flower\\", \\"tower\\", \\"power\\"])) # Output: \\"ower\\" print(find_longest_common_suffix([\\"dog\\", \\"racecar\\", \\"car\\"])) # Output: \\"\\" print(find_longest_common_suffix([])) # Output: \\"\\" ``` # Instructions: 1. If the input list is empty, return an empty string. 2. Initialize the common suffix as the full length of the first string in the list. 3. Iterate through each string and progressively check ending substrings to determine the common suffix. 4. Update the common suffix based on the comparisons. 5. Return the final common suffix.","solution":"from typing import List def find_longest_common_suffix(strings: List[str]) -> str: if not strings: return \\"\\" # Reverse all strings to compare suffixes as prefixes reversed_strings = [s[::-1] for s in strings] common_suffix_reversed = reversed_strings[0] for s in reversed_strings[1:]: i = 0 # Find the common prefix in the reversed strings while i < len(common_suffix_reversed) and i < len(s) and common_suffix_reversed[i] == s[i]: i += 1 common_suffix_reversed = common_suffix_reversed[:i] # update based on the common prefix found # Reverse back the common prefix to get the suffix return common_suffix_reversed[::-1]"},{"question":"# Matrix Rotation Validator **Problem Statement:** You are given a square matrix and an angle of rotation. Your task is to determine whether rotating the matrix by the given angle results in the matrix matching a specified target matrix. You need to write a function that verifies if rotating the given matrix by the specified angle (90, 180, or 270 degrees clockwise) would result in the target matrix. **Function Signature:** ```python def is_matrix_rotation_valid(original: list, target: list, angle: int) -> bool: Checks if the target matrix is a valid rotation of the original matrix by the given angle. :param original: A square matrix represented as a list of lists of integers. :param target: A square matrix represented as a list of lists of integers to compare against. :param angle: An integer representing the rotation angle (90, 180, or 270 degrees). :return: True if the target matrix matches the rotated original matrix, otherwise False. pass ``` **Input:** * A matrix `original` of size (n times n) where: * (1 leq n leq 100) * Elements in the matrix are integers and can range between (-1000) to (1000). * A matrix `target` of size (n times n) where: * (1 leq n leq 100) * Elements in the matrix are integers and can range between (-1000) to (1000). * An integer `angle` which can be 90, 180, or 270. **Output:** * The function should return `True` if rotating the `original` matrix by the specified `angle` results in the `target` matrix. Otherwise, it should return `False`. **Constraints:** * The original and target matrices are always square matrices of the same size `n`. **Example Test Cases:** 1. ```python original = [ [1, 2], [3, 4] ] target = [ [3, 1], [4, 2] ] angle = 90 is_matrix_rotation_valid(original, target, angle) # should return True ``` 2. ```python original = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] target = [ [9, 8, 7], [6, 5, 4], [3, 2, 1] ] angle = 180 is_matrix_rotation_valid(original, target, angle) # should return True ``` 3. ```python original = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] target = [ [9, 6, 3], [8, 5, 2], [7, 4, 1] ] angle = 270 is_matrix_rotation_valid(original, target, angle) # should return False ``` 4. ```python original = [ [1, 2], [3, 4] ] target = [ [4, 3], [2, 1] ] angle = 180 is_matrix_rotation_valid(original, target, angle) # should return True ``` **Performance Requirements:** * Ensure that your solution is efficient in terms of both time and space given the constraints. **Note:** * The rotation should be performed clockwise. * Write helper functions if necessary to avoid redundancy in code.","solution":"def rotate_90(original): Rotates the matrix 90 degrees clockwise. n = len(original) return [[original[n - j - 1][i] for j in range(n)] for i in range(n)] def rotate_180(original): Rotates the matrix 180 degrees clockwise. return rotate_90(rotate_90(original)) def rotate_270(original): Rotates the matrix 270 degrees clockwise. return rotate_90(rotate_180(original)) def is_matrix_rotation_valid(original, target, angle): Checks if the target matrix is a valid rotation of the original matrix by the given angle. :param original: A square matrix represented as a list of lists of integers. :param target: A square matrix represented as a list of lists of integers to compare against. :param angle: An integer representing the rotation angle (90, 180, or 270 degrees). :return: True if the target matrix matches the rotated original matrix, otherwise False. if angle == 90: rotated = rotate_90(original) elif angle == 180: rotated = rotate_180(original) elif angle == 270: rotated = rotate_270(original) else: return False # Invalid angle return rotated == target"},{"question":"# Dynamic Programming - Longest Common Subsequence You are tasked with implementing a function to find the length of the longest common subsequence (LCS) between two given strings using dynamic programming. The LCS of two strings is the longest sequence that can be derived from both strings by deleting some characters without reordering the remaining characters. # Requirements: 1. Create a function `longest_common_subsequence` that takes two strings as input and returns an integer representing the length of their LCS. 2. Use a dynamic programming approach to solve the problem. Create a 2D table to store lengths of LCSs of substrings. 3. Ensure that your solution efficiently handles edge cases, such as empty strings. # Constraints: * Both input strings will only contain alphabetic characters (a-z, A-Z). * The length of each string will be at most 1000. # Input Format: * Two strings, `str1` and `str2`. # Output Format: * An integer representing the length of the longest common subsequence. # Example Usage: ```python str1 = \\"ABCD\\" str2 = \\"AEBD\\" print(longest_common_subsequence(str1, str2)) # Output: 3 str1 = \\"AGGTAB\\" str2 = \\"GXTXAYB\\" print(longest_common_subsequence(str1, str2)) # Output: 4 str1 = \\"\\" str2 = \\"ABC\\" print(longest_common_subsequence(str1, str2)) # Output: 0 str1 = \\"ABCD\\" str2 = \\"EFGH\\" print(longest_common_subsequence(str1, str2)) # Output: 0 ``` Implement the function `longest_common_subsequence` to find and return the length of the longest common subsequence of the two input strings.","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence between str1 and str2. m = len(str1) n = len(str2) # Create a 2D array to store the lengths of longest common subsequences. dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"# String Pattern Occurrence Counter You are given a string `s` and a pattern `p`. Write a function `count_pattern_occurrences` to count the number of times the pattern `p` appears in the string `s`, including overlapping occurrences. The function should efficiently find and count all occurrences of `p` in `s`. Requirements: 1. Implement the function `count_pattern_occurrences(s: str, p: str) -> int` to compute the number of overlapping occurrences of `p` in `s`. 2. The implementation should use efficient string searching techniques or algorithms. 3. Do not use regular expression libraries for this task. Constraints: - The input strings `s` and `p` will only contain lowercase English letters. - The length of `s` and `p` will be between 1 and 1000. Expected Input and Output Formats: - **Function Call**: `result = count_pattern_occurrences(s, p)` should return the number of times the pattern `p` occurs in the string `s`, including overlaps. Example Scenario: ```python # Example 1 s = \\"ababcababc\\" p = \\"ab\\" result = count_pattern_occurrences(s, p) print(result) # Output: 4 # Example 2 s = \\"aaaaaa\\" p = \\"aaa\\" result = count_pattern_occurrences(s, p) print(result) # Output: 4 ``` Explanation: In Example 1, the pattern \\"ab\\" appears 4 times in \\"ababcababc\\". The overlapping occurrences are considered. In Example 2, the pattern \\"aaa\\" appears 4 times in \\"aaaaaa\\". The overlapping occurrences are considered. Implement the `count_pattern_occurrences` function with the above requirements and example in mind. Make sure to handle all edge cases, such as when `p` is longer than `s` or when `s` and `p` are identical.","solution":"def count_pattern_occurrences(s: str, p: str) -> int: Counts the number of times the pattern p appears in the string s, including overlapping occurrences. Args: s (str): The input string in which to count occurrences of the pattern. p (str): The pattern to count in the input string s. Returns: int: The number of times the pattern p appears in the string s. if not s or not p: return 0 count = 0 i = 0 while i <= len(s) - len(p): if s[i:i + len(p)] == p: count += 1 i += 1 # Move one step forward to check overlapping occurrences else: i += 1 return count"},{"question":"# Coding Assessment Question **Context**: You have been tasked with developing a program to analyze a list of numbers and identify a pattern in their prime factorization. Specifically, you need to determine how many numbers in the list have exactly three distinct prime factors. **Task**: Write a function `count_numbers_with_three_prime_factors(numbers: List[int]) -> int` that: 1. Receives a list of integers `numbers` (1 ≤ len(numbers) ≤ 100,000) where each integer is between 2 and 1,000,000. 2. Returns the count of numbers in the list that have exactly three distinct prime factors. **Input**: - A list of integers `numbers`. **Output**: - An integer representing the count of numbers with exactly three distinct prime factors. **Constraints**: - Your solution should be optimized to handle the upper constraint efficiently. **Example**: ```python print(count_numbers_with_three_prime_factors([30, 60, 90, 20])) # Output: 3 print(count_numbers_with_three_prime_factors([6, 15, 77, 50])) # Output: 0 ``` **Function Signature**: ```python from typing import List def count_numbers_with_three_prime_factors(numbers: List[int]) -> int: pass ``` Ensure your solution accurately identifies and counts numbers with three distinct prime factors using an efficient algorithm.","solution":"from typing import List import math def count_numbers_with_three_prime_factors(numbers: List[int]) -> int: def count_distinct_prime_factors(n: int) -> int: distinct_primes = set() # Check for factors of 2 if n % 2 == 0: distinct_primes.add(2) while n % 2 == 0: n //= 2 # Check for odd factors for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: distinct_primes.add(i) while n % i == 0: n //= i # If n becomes a prime number greater than 2 if n > 2: distinct_primes.add(n) return len(distinct_primes) count = 0 for number in numbers: if count_distinct_prime_factors(number) == 3: count += 1 return count"},{"question":"# Finding the Largest Island in a Grid You are given a 2D grid map of `\'1\'`s (land) and `\'0\'`s (water). An island is a group of adjacent lands connected horizontally or vertically (not diagonally). You need to find the size of the largest island. The size of an island is the number of `\'1\'`s in it. # Function Signature ```python def largest_island(grid: List[List[str]]) -> int: pass ``` # Input - `grid`: A list of lists of strings representing the 2D grid where each element is either `\'0\'` or `\'1\'`. # Output - An integer representing the size of the largest island. # Constraints - The grid has dimensions within the range `1 <= rows, columns <= 1000`. - The grid contains only the characters `\'0\'` and `\'1\'`. # Example ```python grid = [ [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"0\\", \\"1\\", \\"1\\"] ] print(largest_island(grid)) # Output: 4 ``` # Explanation The largest island is formed by the top left 2x2 grid of `\'1\'`s, which has a size of 4. # Notes - To find the largest island, you will need to explore the grid and keep track of visited land cells to avoid counting them multiple times. - Depth-First Search (DFS) or Breadth-First Search (BFS) algorithms can be used for exploring adjacent lands to determine the size of an island. - Ensure the solution handles the edge cases where the grid has minimum or maximum dimensions efficiently.","solution":"from typing import List def largest_island(grid: List[List[str]]) -> int: if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False] * cols for _ in range(rows)] def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == \'0\' or visited[r][c]: return 0 visited[r][c] = True size = 1 size += dfs(r+1, c) size += dfs(r-1, c) size += dfs(r, c+1) size += dfs(r, c-1) return size max_island_size = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'1\' and not visited[r][c]: max_island_size = max(max_island_size, dfs(r, c)) return max_island_size"},{"question":"# Matrix Chain Multiplication You are required to implement a function that computes the minimum number of scalar multiplications needed to multiply a chain of matrices using dynamic programming. The `matrix_chain_order` function should take a list of integers where each integer represents the dimension of the matrices in the chain such that the i-th matrix has dimensions `p[i-1] x p[i]`. Requirements: 1. **Function Signature**: - Define the function `matrix_chain_order(p: List[int]) -> int`. 2. **Computation**: - Implement the function to compute the minimum number of multiplications needed for a chain of matrices, leveraging dynamic programming techniques. - The solution should efficiently handle the problem with a time complexity of O(n^3). Input: * A list of integers `p` where the length of `p` is `n+1` (where `2 ≤ n ≤ 100`) representing the dimensions of `n` matrices. Output: * Return the minimum number of scalar multiplications needed. Constraints: * Consider the constraints on time and space complexity, ensuring an efficient solution for the problem constraints. Example: ```python # Example 1 p = [1, 2, 3, 4] assert matrix_chain_order(p) == 18 # Example 2 p = [10, 20, 30, 40, 30] assert matrix_chain_order(p) == 30000 # Example 3 p = [40, 20, 30, 10, 30] assert matrix_chain_order(p) == 26000 ``` Implementation Hint: * Utilize the Matrix Chain Multiplication dynamic programming approach, where you keep track of the minimum number of multiplications needed to multiply from matrix `i` to matrix `j` in a 2D table. ```python from typing import List def matrix_chain_order(p: List[int]) -> int: n = len(p) - 1 dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 dp[i][j] = float(\'inf\') for k in range(i, j): cost = dp[i][k] + dp[k + 1][j] + p[i] * p[k + 1] * p[j + 1] dp[i][j] = min(dp[i][j], cost) return dp[0][n - 1] ``` Note: Ensure your implementation correctly utilizes the dynamic programming approach to minimize the scalar multiplications needed for matrix multiplication.","solution":"from typing import List def matrix_chain_order(p: List[int]) -> int: n = len(p) - 1 dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 dp[i][j] = float(\'inf\') for k in range(i, j): cost = dp[i][k] + dp[k + 1][j] + p[i] * p[k + 1] * p[j + 1] dp[i][j] = min(dp[i][j], cost) return dp[0][n - 1]"},{"question":"# Binary Search Tree (BST) and Finding the Kth Smallest Element You are required to implement a Binary Search Tree (BST) from scratch and use it to find the Kth smallest element in the tree. A BST is a tree data structure where each node has at most two children, which are referred to as the left child and the right child. For each node, its left subtree values are less, and its right subtree values are greater. # Problem 1. **Implement the BST Construction**: - Write a function `insert_into_bst(root, value)` to insert a value into the BST. - `root` is the root node of the BST, and `value` is the value to be inserted. 2. **Implement the Function to Find the Kth Smallest Element**: - Write a function `kth_smallest_element(root, k)` to find the Kth smallest element in the BST. - `root` is the root node of the BST, and `k` is an integer representing the position of the smallest element to find. # Function Signatures ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def insert_into_bst(root: Optional[TreeNode], value: int) -> TreeNode: # Implement this function def kth_smallest_element(root: Optional[TreeNode], k: int) -> int: # Implement this function ``` # Requirements 1. **Input**: - `insert_into_bst(root, value)`: the root node of the BST and an integer `value` to be inserted. - `kth_smallest_element(root, k)`: the root node of the BST and an integer `k` representing the position of the smallest element to find. 2. **Output**: - `insert_into_bst(root, value)`: returns the root node of the BST after the value is inserted. - `kth_smallest_element(root, k)`: returns an integer which is the Kth smallest element in the BST. 3. **Constraints**: - The BST will not contain duplicate values. - Values are non-negative integers. - Assume `k` is always valid (1 ≤ k ≤ number of nodes in the BST). # Example Constructing a BST and finding the Kth smallest element: ```python # Constructing the BST root = None values = [5, 3, 6, 2, 4, 1] for value in values: root = insert_into_bst(root, value) # Finding kth smallest elements print(kth_smallest_element(root, 3)) # Output: 3 print(kth_smallest_element(root, 1)) # Output: 1 print(kth_smallest_element(root, 6)) # Output: 6 ``` # Additional Notes - Ensure your BST handles edge cases like empty input and insertion at different levels. - Optimize for both space and time complexity, especially for the kth smallest element search.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def insert_into_bst(root, value): Insert `value` into the BST rooted at `root` and return the root node. if root is None: return TreeNode(value) if value < root.value: root.left = insert_into_bst(root.left, value) else: root.right = insert_into_bst(root.right, value) return root def kth_smallest_element(root, k): Find the Kth smallest element in the BST rooted at `root`. stack = [] while True: while root is not None: stack.append(root) root = root.left root = stack.pop() k -= 1 if k == 0: return root.value root = root.right"},{"question":"# Scenario In data science, normalization is a common preprocessing step. It is used to scale each feature to a given range, often between 0 and 1. This ensures that no single feature dominates the others due to differences in scale. # Problem Create two functions: 1. `normalize(data: list) -> list`: This function should accept a list of numerical values and return a new list where the data has been normalized to the range [0, 1]. 2. `denormalize(normalized_data: list, original_min: float, original_max: float) -> list`: This function should accept a list of normalized values, along with the original minimum and maximum values, and return the data denormalized back to their original scale. # Requirements - Implement these functions to correctly handle the provided calculations. - Raise a `ValueError` with an appropriate message if the input list for normalization is empty or if `original_min` is greater than or equal to `original_max` in the denormalization function. - Ensure that the normalization and denormalization processes are accurate. # Function Signatures ```python def normalize(data: list) -> list: ... def denormalize(normalized_data: list, original_min: float, original_max: float) -> list: ... ``` # Input and Output - `normalize`: - **Input**: A list of numerical values. - **Output**: A list of normalized values ranging between [0, 1]. - `denormalize`: - **Input**: A list of normalized values, the original minimum value `original_min`, and the original maximum value `original_max`. - **Output**: A list of denormalized values, scaled back to the original range [original_min, original_max]. # Constraints - The input list for normalization will have between 1 and 10^6 elements. - The original minimum and maximum values used in `denormalize` will be in the range -10^6 to 10^6. - Handling of input validation for empty lists and invalid min/max values is required. # Examples - `normalize([1, 2, 3, 4, 5])` should return `[0.0, 0.25, 0.5, 0.75, 1.0]`. - `denormalize([0.0, 0.25, 0.5, 0.75, 1.0], 1, 5)` should return `[1.0, 2.0, 3.0, 4.0, 5.0]`. - `normalize([])` should raise a `ValueError` with the message \\"Input list is empty.\\" - `denormalize([0.0, 0.25, 0.5], 10, 5)` should raise a `ValueError` with the message \\"original_min must be less than original_max.\\" # Testing Use Python\'s built-in `doctest` module to provide test cases demonstrating the usage and correctness of the functions.","solution":"def normalize(data: list) -> list: if not data: raise ValueError(\\"Input list is empty.\\") min_val = min(data) max_val = max(data) if min_val == max_val: return [0.5] * len(data) # Assuming all values are the same, return the middle of [0,1] return [(x - min_val) / (max_val - min_val) for x in data] def denormalize(normalized_data: list, original_min: float, original_max: float) -> list: if original_min >= original_max: raise ValueError(\\"original_min must be less than original_max.\\") return [x * (original_max - original_min) + original_min for x in normalized_data]"},{"question":"# Question: **Context**: You are tasked with implementing a priority queue utilizing a binary heap. A priority queue is a data structure where each element has a priority. Elements with higher priorities are served before elements with lower priorities. **Objective**: Implement a class `BinaryHeap` that supports inserting elements, removing the element with the highest priority, and peeking at the element with the highest priority. **Class Definition**: ```python class BinaryHeap: def __init__(self): pass def insert(self, value: int) -> None: pass def extract_max(self) -> int: pass def peek_max(self) -> int: pass ``` # Methods: * **`insert(value: int) -> None`**: Inserts an integer into the priority queue. * **`extract_max() -> int`**: Removes and returns the integer with the highest priority (maximum value). * **`peek_max() -> int`**: Returns the integer with the highest priority (maximum value) without removing it. # Constraints: * You may assume that the heap will never contain more than 10^6 elements. * All integer values inserted into the heap will be in the range -10^9 to 10^9. # Example: ```python pq = BinaryHeap() pq.insert(10) pq.insert(5) pq.insert(30) pq.insert(20) print(pq.peek_max()) # Expected: 30 print(pq.extract_max()) # Expected: 30 print(pq.peek_max()) # Expected: 20 ``` # Notes: * Use a max binary heap to manage the priority queue. * Implement the heap operations (insert, extract max, and peek max) with the appropriate time complexities to ensure efficient performance. * Carefully manage the heap property during insertions and extractions to maintain the correct order of priorities.","solution":"class BinaryHeap: def __init__(self): self.heap = [] def insert(self, value: int) -> None: self.heap.append(value) self._sift_up(len(self.heap) - 1) def extract_max(self) -> int: if not self.heap: raise IndexError(\\"Extracting from an empty heap\\") maximum = self.heap[0] if len(self.heap) > 1: self.heap[0] = self.heap.pop() self._sift_down(0) else: self.heap.pop() return maximum def peek_max(self) -> int: if not self.heap: raise IndexError(\\"Peeking into an empty heap\\") return self.heap[0] def _sift_up(self, index): parent_index = (index - 1) // 2 if index > 0 and self.heap[index] > self.heap[parent_index]: self.heap[index], self.heap[parent_index] = self.heap[parent_index], self.heap[index] self._sift_up(parent_index) def _sift_down(self, index): left_child_index = 2 * index + 1 right_child_index = 2 * index + 2 max_index = index if left_child_index < len(self.heap) and self.heap[left_child_index] > self.heap[max_index]: max_index = left_child_index if right_child_index < len(self.heap) and self.heap[right_child_index] > self.heap[max_index]: max_index = right_child_index if max_index != index: self.heap[index], self.heap[max_index] = self.heap[max_index], self.heap[index] self._sift_down(max_index)"},{"question":"# Task: Implement a Function for Fast Fourier Transform (FFT) of a 1D Array You are tasked with implementing a function to compute the Fast Fourier Transform of a given 1D array. This process should efficiently convert the input array from its time domain representation to its frequency domain representation. Function Signature ```python def fft(arr: np.ndarray) -> np.ndarray: Compute the Fast Fourier Transform of a 1D array. Arguments: arr -- a numpy.ndarray of shape (n,) where n is a power of 2. Returns: A numpy.ndarray of shape (n,) representing the frequency domain representation. ``` Input * `arr`: A 1D NumPy array of shape (n,) representing the time domain data. `n` will always be a power of 2. Output * A NumPy array of shape (n,) representing the frequency domain representation of the input array. Constraints 1. (1 leq n leq 2^{16}) 2. The array elements are real or complex numbers. Requirements 1. Implement the FFT algorithm using the Cooley-Tukey method. 2. Ensure the implementation is efficient and leverages the divide-and-conquer approach. Efficiency The implementation should handle arrays up to length (2^{16}) efficiently considering both time and space complexities. Example: ```python import numpy as np # Example input array time_data = np.array([1, 2, 3, 4, 3, 2, 1, 0], dtype=float) # Call to the function freq_data = fft(time_data) # Expected behavior checks: assert len(freq_data) == len(time_data) # You can add more specific checks using known algorithms or inverse FFT for complete verification. ``` **Note**: Ensure to handle the recursive breakdown and combination of the array segments properly for accurate results.","solution":"import numpy as np def fft(arr: np.ndarray) -> np.ndarray: Compute the Fast Fourier Transform of a 1D array. Arguments: arr -- a numpy.ndarray of shape (n,) where n is a power of 2. Returns: A numpy.ndarray of shape (n,) representing the frequency domain representation. n = arr.shape[0] # Base case if n == 1: return arr # FFT using the Cooley-Tukey algorithm even = fft(arr[0::2]) odd = fft(arr[1::2]) t = np.exp(-2j * np.pi * np.arange(n) / n) return np.concatenate([even + t[:n // 2] * odd, even + t[n // 2:] * odd])"},{"question":"# Sum of Minutes in 12-Hour Clock Context: In a 12-hour clock format, the hours are numbered from 1 to 12, and the minutes from 0 to 59. You are developing an application that requires the calculation of the total minutes of multiple given times ignoring the AM/PM distinction. Task: Write a Python function named `sum_minutes` that takes a list of strings as input where each string represents a time in the \\"HH:MM\\" format (e.g., \\"01:45\\", \\"12:30\\"). The goal is to calculate the total number of minutes from the start of the day (00:00) until each given time. * **Input**: A list of strings `times` where each string is in the \\"HH:MM\\" format. * **Output**: An integer representing the total number of minutes. Constraints: 1. The input list length will not exceed (10^4) elements. 2. Each time string is valid and follows the \\"HH:MM\\" format. Example: ```python def sum_minutes(times: list) -> int: # Your implementation goes here # Example usage: times = [\\"01:30\\", \\"02:40\\", \\"12:05\\"] print(sum_minutes(times)) # Expected output: 705 ``` Ensure your function is efficient and able to handle the maximum input size within a reasonable time frame.","solution":"def sum_minutes(times): Calculate the total number of minutes from the start of the day until each given time in a list of \\"HH:MM\\" formatted strings. total_minutes = 0 for time in times: hours, minutes = map(int, time.split(\':\')) current_minutes = hours * 60 + minutes total_minutes += current_minutes return total_minutes"},{"question":"# Problem Description You are asked to implement a function to determine if there is a subset of a given set of `N` integers that sums to a given target `S`. # Input * An integer `N`, the number of integers in the set (1 ≤ N ≤ 100). * An integer `S`, the target sum (1 ≤ S ≤ 10^4). * A list `arr` of `N` integers, where each integer `arr[i]` (1 ≤ arr[i] ≤ 100). # Output Return a boolean value: * `True` if there is a subset of the provided integers that sum to `S`. * `False` if no such subset exists. # Constraints * Each number in the set is a positive integer. * You may assume that there are no duplicate numbers in the set. # Performance Requirement Your function should complete in `O(NS)` time. # Function Signature ```python def subset_sum(N: int, S: int, arr: List[int]) -> bool: ``` # Example **Input:** ```python N = 5 S = 9 arr = [3, 34, 4, 12, 5] ``` **Output:** ```python True ``` # Explanation In the given example, there is a subset `[4, 5]` that sums to the target sum `9`. # Additional Example **Input:** ```python N = 3 S = 7 arr = [1, 2, 3] ``` **Output:** ```python False ``` # Explanation In this example, no subset of `[1, 2, 3]` sums to the target `7`.","solution":"from typing import List def subset_sum(N: int, S: int, arr: List[int]) -> bool: # Initialize a list to keep track of the possible subset sums up to S. dp = [False] * (S + 1) # There is always a subset with sum 0, the empty subset dp[0] = True for num in arr: # Traverse the dp array backwards to avoid using the same number more than once for s in range(S, num - 1, -1): dp[s] = dp[s] or dp[s - num] return dp[S]"},{"question":"**Objective**: Write a function to determine the minimum number of moves required to transform one string into another using a given set of operations. **Function Signature**: ```python def min_operations(source: str, target: str) -> int: pass ``` **Input Format**: * `source`: A string containing the initial sequence of characters. * `target`: A string containing the desired sequence of characters. **Output Format**: * An integer representing the minimum number of operations required to transform the source string into the target string. **Operations**: * Insert a character. * Delete a character. * Replace a character. **Constraints**: * The lengths of both strings will be between 1 and 1000. * Both strings will contain only lowercase English letters. **Example**: ```python source = \\"intention\\" target = \\"execution\\" min_operations(source, target) # Expected output: 5 ``` **Scenario**: Imagine you have a spell-check feature which suggests corrections by transforming a given word into the correct word via a sequence of edit operations (insertion, deletion, or replacement of characters). Your task is to determine the minimum number of such operations needed to convert the given misspelled word into the correct word fairly efficiently. Your logic should consider dynamic programming to compute the solution for the given input strings, ensuring that performance is kept within a feasible boundary for the given constraint sizes.","solution":"def min_operations(source: str, target: str) -> int: Calculate the minimum number of operations required to transform source string into target string. Operations allowed are insert, delete, and replace a character. # Get the lengths of both strings m, n = len(source), len(target) # Create a table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to # insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to # remove all characters of second string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore the last character # and recur for the remaining substring elif source[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If the last character is different, consider all possibilities # and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"# Coding Question: Implementing the A* Search Algorithm Problem Statement Given a grid where each cell represents a node, write a function `a_star_search` to find the shortest path from a start node to a goal node using the A* search algorithm. Each cell in the grid can either be traversable (represented by 0) or blocked (represented by 1). Function Signature ```python def a_star_search(grid: List[List[int]], start: Tuple[int, int], goal: Tuple[int, int]) -> List[Tuple[int, int]]: ``` Input - `grid`: A 2D list of integers representing the grid. The grid is rectangular and can be of size up to `200 x 200`. - `start`: A tuple `(x, y)` representing the starting node. - `goal`: A tuple `(x, y)` representing the goal node. Output - A list of tuples representing the coordinates of the nodes in the shortest path from `start` to `goal` (inclusive). If no path exists, return an empty list. Constraints - The grid size will not exceed `200 x 200`. - The `start` and `goal` nodes are valid and distinct cells within the grid. - If no path is possible, return an empty list. Example ```python grid = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0] ] start = (0, 0) goal = (4, 4) a_star_search(grid, start, goal) # Output: [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (1, 2), (0, 2), (0, 3), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4)] ``` Ensure your solution efficiently handles the constraints and edge cases such as no possible path, the start being the goal, and grids with varying sizes. Use appropriate heuristic functions for the A* algorithm.","solution":"import heapq from typing import List, Tuple def a_star_search(grid: List[List[int]], start: Tuple[int, int], goal: Tuple[int, int]) -> List[Tuple[int, int]]: def heuristic(a, b): return abs(a[0] - b[0]) + abs(a[1] - b[1]) def get_neighbors(node): directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] for d in directions: neighbor = (node[0] + d[0], node[1] + d[1]) if (0 <= neighbor[0] < len(grid)) and (0 <= neighbor[1] < len(grid[0])) and grid[neighbor[0]][neighbor[1]] == 0: yield neighbor open_set = [] heapq.heappush(open_set, (0 + heuristic(start, goal), 0, start, None)) came_from = {} g_score = {start: 0} f_score = {start: heuristic(start, goal)} while open_set: current = heapq.heappop(open_set)[2] if current == goal: path = [] while current: path.append(current) current = came_from.get(current) return path[::-1] for neighbor in get_neighbors(current): tentative_g_score = g_score[current] + 1 if neighbor not in g_score or tentative_g_score < g_score[neighbor]: came_from[neighbor] = current g_score[neighbor] = tentative_g_score f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal) heapq.heappush(open_set, (f_score[neighbor], tentative_g_score, neighbor, current)) return []"},{"question":"# Coding Assessment Question You are developing a simple payroll system for a company. Implement the `Payroll` class to compute the total salary of employees based on their working hours and hourly pay rate. The company has different policies for overtime pay. **Requirements**: 1. Implement the `Payroll` class constructor to initialize employee data including the hourly rate and policy for each employee. 2. Implement the `calculate_salary` method: - Calculate the total salary including overtime. - Overtime is calculated as 1.5 times the hourly rate for hours worked over 40 hours in a week. 3. Implement the `add_employee` method to add new employees along with their hourly rate and policy. 4. Ensure the system correctly updates the salary when new employees are added. **Function Signatures**: ```python class Payroll: def __init__(self) -> None: Init method to store employee data. def add_employee(self, employee_id: int, hourly_rate: float) -> None: Add a new employee with a given hourly rate. def calculate_salary(self, employee_id: int, hours_worked: float) -> float: Calculate the salary for an employee based on hours worked and hourly rate, including overtime. ``` **Input**: * **employee_id**: An integer representing the employee\'s unique identification number. * **hourly_rate**: A float representing the employee\'s hourly wage. * **hours_worked**: A float representing the number of hours worked by the employee in a week. **Output**: * **calculate_salary**: Return the salary of the given employee based on hours worked, including overtime pay if applicable. **Example**: ```python payroll = Payroll() payroll.add_employee(1, 20) payroll.add_employee(2, 25) print(payroll.calculate_salary(1, 45)) # Output: 950.0 (40 * 20 + 5 * (20 * 1.5)) print(payroll.calculate_salary(2, 50)) # Output: 1375.0 (40 * 25 + 10 * (25 * 1.5)) print(payroll.calculate_salary(1, 30)) # Output: 600.0 (30 * 20) ``` **Constraints**: * There are up to (10^3) employees. * `employee_id` is unique and an integer within (1) to (10^3). * `hourly_rate` is a float within (0.0) to (100.0). * `hours_worked` is a float within (0.0) to (100.0). The `Payroll` class should seamlessly integrate into the existing system, handling various employee pay scenarios including overtime calculation.","solution":"class Payroll: def __init__(self) -> None: Init method to store employee data. self.employees = {} def add_employee(self, employee_id: int, hourly_rate: float) -> None: Add a new employee with a given hourly rate. self.employees[employee_id] = hourly_rate def calculate_salary(self, employee_id: int, hours_worked: float) -> float: Calculate the salary for an employee based on hours worked and hourly rate, including overtime. rate = self.employees[employee_id] if hours_worked <= 40: return hours_worked * rate else: overtime_hours = hours_worked - 40 return (40 * rate) + (overtime_hours * rate * 1.5)"},{"question":"# Coding Assessment Question Background & Context You are working on a natural language processing tool that utilizes a Markov Chain algorithm for text generation. The tool generates text based on the probabilities of the occurrence of words following a given sequence of words. Task Write a function `generate_text` that takes in a path to a text corpus and generates a specified number of words of random yet coherent text using a Markov Chain. The Markov Chain should use a context size of two words to determine the next word. Function Signature ```python def generate_text(corpus_path: str, num_words: int) -> str: Generates a sequence of text of the given number of words using a Markov Chain. :param corpus_path: str, path to the input text corpus :param num_words: int, number of words to generate :return: str, generated text sequence ``` Input and Output Format * **Input**: - `corpus_path` (str): Path to the input text corpus file. - `num_words` (int): The number of words to generate. * **Output**: - Returns a string representing the generated sequence of words. Constraints * The corpus file contains a large text with sentences and punctuations. * The context size should be exactly two words (bigram model). * Words should be separated by a single space, and punctuation should be treated as separate words. * Utilize efficient data structures for storage and lookup of word sequences. Example Suppose the corpus file at `corpus_path` contains the following text: ``` The cat sat on the mat. The cat saw a rat. The rat ran away. ``` Calling `generate_text(corpus_path, 5)` could generate the text: ``` \\"The cat sat on the\\" ``` Notes * You may assume that the corpus is large enough to generate the desired number of words. * Handle edge cases where the corpus might be too small by returning as many words as possible up to `num_words`. * Ensure your implementation handles punctuation properly according to typical English sentence structure.","solution":"import random import re from collections import defaultdict def generate_text(corpus_path: str, num_words: int) -> str: Generates a sequence of text of the given number of words using a Markov Chain. :param corpus_path: str, path to the input text corpus :param num_words: int, number of words to generate :return: str, generated text sequence # Read the corpus file with open(corpus_path, \'r\') as file: text = file.read() # Tokenize the text into words and punctuations words = re.findall(r\'bw+b|[.,!?;]\', text) # Create a dictionary to store the Markov Chain model markov_chain = defaultdict(list) # Build the Markov Chain with a context size of 2 words for i in range(len(words) - 2): key = (words[i], words[i + 1]) next_word = words[i + 2] markov_chain[key].append(next_word) # Choose a random starting point for the text generation start_key = random.choice(list(markov_chain.keys())) generated_words = list(start_key) # Generate words based on the Markov Chain for _ in range(num_words - 2): key = (generated_words[-2], generated_words[-1]) next_words = markov_chain.get(key) if not next_words: break next_word = random.choice(next_words) generated_words.append(next_word) return \' \'.join(generated_words)"},{"question":"# Coding Assessment Question A software company maintains different levels of memberships for its users: Bronze, Silver, and Gold. Each type of membership comes with a certain amount of free usage in hours and a cost per hour after exceeding the free usage. Given a user\'s membership type and their usage in hours for the current month, calculate the total cost they need to pay. The details for each membership type are as follows: - **Bronze**: 10 hours free, 2 per additional hour. - **Silver**: 20 hours free, 1.5 per additional hour. - **Gold**: 30 hours free, 1 per additional hour. # Function Signature ```python def calculate_membership_cost(membership_type: str, usage_hours: int) -> float: pass ``` # Input * `membership_type` (string): The type of membership which can be either \\"Bronze\\", \\"Silver\\", or \\"Gold\\". * `usage_hours` (integer): The number of hours the user has utilized in the current month. # Output * Returns a float representing the total cost for the user\'s usage in the current month. # Constraints * `usage_hours` will be a non-negative integer. * membership_type will be one of \\"Bronze\\", \\"Silver\\", \\"Gold\\". # Examples ```python # Example 1: # For Bronze membership with 15 hours used, the cost is 10 assert calculate_membership_cost(\\"Bronze\\", 15) == 10.0 # Example 2: # For Silver membership with 25 hours used, the cost is 7.5 assert calculate_membership_cost(\\"Silver\\", 25) == 7.5 # Example 3: # For Gold membership with 28 hours used, the cost is 0 assert calculate_membership_cost(\\"Gold\\", 28) == 0.0 # Example 4: # For Gold membership with 40 hours used, the cost is 10 assert calculate_membership_cost(\\"Gold\\", 40) == 10.0 ``` # Explanation 1. Determine the membership type and corresponding free hours and additional cost per hour. 2. Calculate the overage hours if the usage exceeds the free hours, otherwise, the overage is zero. 3. Compute the total cost by multiplying the overage hours with the additional cost per hour and add any base charges if described. 4. Return the total cost as a float. # Notes - Ensure the function handles edge cases such as zero usage hours. - The function should be efficient and clear in its calculation logic.","solution":"def calculate_membership_cost(membership_type: str, usage_hours: int) -> float: membership_details = { \\"Bronze\\": {\\"free_hours\\": 10, \\"cost_per_hour\\": 2.0}, \\"Silver\\": {\\"free_hours\\": 20, \\"cost_per_hour\\": 1.5}, \\"Gold\\": {\\"free_hours\\": 30, \\"cost_per_hour\\": 1.0} } details = membership_details.get(membership_type) if details is None: raise ValueError(\\"Invalid membership type\\") free_hours = details[\\"free_hours\\"] cost_per_hour = details[\\"cost_per_hour\\"] overage_hours = max(usage_hours - free_hours, 0) total_cost = overage_hours * cost_per_hour return total_cost"},{"question":"# Problem Statement You are tasked with implementing a function that takes a list of integers and returns another list where each integer is replaced by the product of all other integers in the original list except the one at that index. This is commonly known as the \\"product of array except self\\" problem. # Function Signature ```python def product_except_self(nums: List[int]) -> List[int]: pass ``` # Input - `nums` (List[int]): A list of integers. The length of the list will be at least 1 and at most 10,000. # Output - (List[int]): A list where each element at index `i` is the product of all elements in the input list except `nums[i]`. # Constraints - The input list will contain at least one element and at most 10,000 elements. - It is guaranteed that the product of all elements will fit within a 32-bit signed integer. # Examples ```python assert product_except_self([1, 2, 3, 4]) == [24, 12, 8, 6] assert product_except_self([0, 1]) == [1, 0] assert product_except_self([4, 5, 1, 8, 2]) == [80, 64, 320, 40, 160] assert product_except_self([1, 2, 1, 1]) == [2, 1, 2, 2] ``` # Additional Notes - Do not use division to calculate the product of array except self. - The function should run in O(n) time complexity and use only O(1) additional space complexity (not counting the output array). - Handle cases where the input list contains zero(s).","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: n = len(nums) result = [1] * n left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"# Description: You are provided with a function, `is_prime`, which checks if a given integer is a prime number. Your task is to implement another function that enumerates all prime numbers between two given integers (inclusive). # Task: Implement a function `list_primes(start: int, end: int) -> list[int]` that: 1. Uses the `is_prime` function to determine prime numbers. 2. Returns a list of all prime numbers between `start` and `end`, inclusive. 3. If no prime numbers are found, returns an empty list. # Constraints: - The range specified by `start` and `end` is always valid (i.e., `start <= end`). - The function must handle both negative and positive integers. Note that prime numbers are positive integers greater than 1. # Inputs: - `start` (int): The starting integer of the range. - `end` (int): The ending integer of the range. # Output: - A list of integers that are prime numbers within the specified range. # Example Usage: ```python >>> list_primes(10, 50) [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47] >>> list_primes(1, 10) [2, 3, 5, 7] >>> list_primes(-10, 10) [2, 3, 5, 7] >>> list_primes(20, 25) [23] >>> list_primes(30, 30) [] ``` # Note: - Ensure your implementation is efficient and handles edge cases correctly. - You can use the following `is_prime` function or write your own. ```python def is_prime(n: int) -> bool: if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def list_primes(start: int, end: int) -> list[int]: primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes ```","solution":"def is_prime(n: int) -> bool: if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def list_primes(start: int, end: int) -> list[int]: primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"# Rotate Matrix by 90 Degrees You are tasked with creating a function that rotates a given square matrix by 90 degrees in the clockwise direction. This involves transforming the matrix such that the rows become columns, and columns become rows, with each move shifted 90 degrees clockwise. Given this task, you need to implement the following functions: 1. `rotate_matrix(matrix: list[list[int]]) -> list[list[int]]`: Rotate the given matrix by 90 degrees clockwise. 2. `print_matrix(matrix: list[list[int]]) -> None`: Print the matrix in a formatted manner, where each row is on a new line and columns are separated by single spaces. Input and Output Formats **`rotate_matrix` function:** * Input: `matrix` (2-D list of ints) - An N x N matrix. * Output: 2-D list representing the rotated matrix. **`print_matrix` function:** * Input: `matrix` (2-D list of ints) - An N x N matrix. * Output: None. The function should print the matrix to the console in a formatted manner. Constraints * The input matrix must be square (i.e., same number of rows and columns) and contain integers. * Handle invalid inputs by raising appropriate exceptions (e.g., if the matrix is not square). Examples ```python >>> rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) [[7, 4, 1], [8, 5, 2], [9, 6, 3]] >>> rotate_matrix([[1, 2], [3, 4]]) [[3, 1], [4, 2]] >>> rotate_matrix([[1]]) [[1]] >>> print_matrix([[7, 4, 1], [8, 5, 2], [9, 6, 3]]) 7 4 1 8 5 2 9 6 3 ``` Ensure that the functions handle edge cases such as an empty matrix or a single element matrix gracefully.","solution":"def rotate_matrix(matrix): Rotates a given square matrix by 90 degrees clockwise. Args: matrix (list[list[int]]): A 2-D list representing the matrix. Returns: list[list[int]]: The rotated matrix. if not matrix or not all(len(row) == len(matrix) for row in matrix): raise ValueError(\\"Input must be a non-empty square matrix.\\") n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - i - 1] = matrix[i][j] return rotated def print_matrix(matrix): Prints a given matrix in a formatted manner. Args: matrix (list[list[int]]): A 2-D list representing the matrix. for row in matrix: print(\\" \\".join(map(str, row))) # Helper function for creating test matrices def create_matrix(n): return [[j + i * n for j in range(1, n + 1)] for i in range(n)]"},{"question":"# Problem Statement You are tasked with finding all the possible ways to decode a given string representing encoded alphabetical letters, where \'A\' to \'Z\' are represented by \'1\' to \'26\' respectively. Each digit or two-digit combination in the string can map to a letter. Implement a function `decode_ways(s: str) -> int` that determines the total number of ways to decode the given string. # Input: * A single string `s` consisting of digits only. # Output: * Return an integer representing the total number of ways to decode the string. # Constraints: * The length of the string `s` will be between 1 and 100 inclusive. * The input string will not contain any leading zeros unless it is \\"0\\" representing invalid input. # Example: ```python def test_decode_ways(): assert decode_ways(\\"12\\") == 2 # \\"AB\\" (1 2) or \\"L\\" (12) assert decode_ways(\\"226\\") == 3 # \\"BZ\\" (2 26), \\"VF\\" (22 6), \\"BBF\\" (2 2 6) assert decode_ways(\\"06\\") == 0 # No valid ways to decode test_decode_ways() ``` # Performance Considerations: * Consider using dynamic programming to optimize the calculation of possible decoding ways. * Handle edge cases where certain digits or combinations do not map to valid letters.","solution":"def decode_ways(s: str) -> int: Returns the total number of ways to decode the given string. if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 if s[0] != \'0\' else 0 for i in range(2, n + 1): one_digit = int(s[i - 1]) two_digit = int(s[i - 2:i]) if 1 <= one_digit <= 9: dp[i] += dp[i - 1] if 10 <= two_digit <= 26: dp[i] += dp[i - 2] return dp[n]"},{"question":"# Longest Increasing Subsequence Your task is to write a function that finds the length of the longest increasing subsequence (LIS) in a given list of integers. The longest increasing subsequence is defined as the longest subsequence of the list such that all elements of the subsequence are sorted in strictly increasing order. # Requirements: 1. **Input**: A list of integers. 2. **Output**: An integer representing the length of the longest increasing subsequence. 3. **Function Implementation**: Write a function `length_of_lis(nums: list[int]) -> int`. # Constraints: 1. The length of the input list does not exceed 2500. 2. The elements of the list are within the range of `-10^4` to `10^4`. # Example: ```python def length_of_lis(nums: list[int]) -> int: # Your implementation # Test case nums = [10, 9, 2, 5, 3, 7, 101, 18] print(length_of_lis(nums)) # Output: 4, as the longest increasing subsequence is [2, 3, 7, 101] ``` # Scenario: Imagine you are analyzing the stock prices of a company and you want to find a period in which the stock prices show the greatest increase. The solution to this problem helps you identify such periods by assessing the daily stock prices and finding the longest period where each day\'s price is higher than the previous day\'s price. # Notes: - Carefully consider the edge cases, such as an empty list or a list with all elements being the same. - Optimize your solution for performance, keeping in mind the constraint on the length of the input list. - There are multiple approaches to solve this problem, such as dynamic programming, so choose the one that offers the best time complexity.","solution":"def length_of_lis(nums: list[int]) -> int: Finds the length of the longest increasing subsequence in the given list of integers. if not nums: return 0 dp = [1] * len(nums) for i in range(len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"# Problem Statement Create a function that will transform a given sentence by converting all occurrences of a specified word to their synonyms while preserving the original structure and punctuation of the sentence. For this exercise, use a pre-defined dictionary of synonyms. # Function Signature ```python def transform_sentence(sentence: str, word: str, synonyms: dict) -> str: pass ``` # Parameters - **`sentence`** (str): The original sentence to be transformed. - **`word`** (str): The word in the sentence which needs to be replaced by its synonyms. - **`synonyms`** (dict): A dictionary where the key is a word (str) and the value is a list of synonyms (list of strings). # Output - Returns a new sentence (str) where each occurrence of the word in the original sentence is replaced by one of its synonyms chosen at random. The structure and punctuation of the sentence must be maintained. # Constraints - If we encounter a word in a different case (e.g., \\"Hello\\" vs \\"hello\\"), it should still be replaced with a correct synonym respecting the case (maintain the original case of the word). - If the word is not found in the sentence, the function should return the sentence unchanged. - The given synonyms dictionary will have at least one synonym for each word. # Example ```python synonyms_dict = { \\"quick\\": [\\"speedy\\", \\"fast\\"], \\"brown\\": [\\"dark\\", \\"chocolate\\"], \\"fox\\": [\\"hound\\", \\"vixen\\"] } sentence = \\"The quick brown fox jumps over the lazy dog.\\" print(transform_sentence(sentence, \\"quick\\", synonyms_dict)) ``` Possible Output: ``` \\"The speedy brown fox jumps over the lazy dog.\\" ``` Or ``` \\"The fast brown fox jumps over the lazy dog.\\" ``` # Implementation Notes - Consider using Python\'s `random.choice` to select a random synonym. - Pay attention to punctuation marks and whitespace to maintain the structure of the original sentence. - The solution should be case-insensitive but preserve the case of each word in the original sentence. # Performance Requirements - Ensure that the function handles sentences up to 1000 words efficiently.","solution":"import random import re def transform_sentence(sentence: str, word: str, synonyms: dict) -> str: Transform the given sentence by replacing all occurrences of the specified word with its synonyms from the given dictionary, maintaining the original case and punctuation of the sentence. Parameters: - sentence (str): The original sentence to be transformed. - word (str): The word in the sentence to be replaced by its synonyms. - synonyms (dict): A dictionary where key is a word, and value is a list of synonyms. Returns: - str: The transformed sentence. def replace(match): original_word = match.group(0) synonym = random.choice(synonyms[word.lower()]) if original_word.istitle(): return synonym.capitalize() return synonym pattern = re.compile(r\'b{}b\'.format(word), re.IGNORECASE) transformed_sentence = pattern.sub(replace, sentence) return transformed_sentence"},{"question":"# Problem Statement You are tasked with implementing a function that calculates the **Geometric Median** of a set of 2D points. The geometric median minimizes the sum of distances to all given points and is useful in various applications such as clustering or determining a central point in spatial data. # Requirements 1. Write a function `geometric_median(points: List[Tuple[float, float]]) -> Tuple[float, float]` that computes the geometric median for a given list of 2D points. 2. Use an iterative optimization method, like Weiszfeld\'s Algorithm, to find the geometric median. # Inputs and Outputs * **Input**: * `points`: A list of tuples, where each tuple represents the coordinates of a point in 2D space. * **Output**: * A tuple representing the coordinates of the geometric median. # Constraints * The input list will contain between 1 and 1000 points. * Handle edge cases such as: * A single point (the median is the point itself). * Duplicates or very close points. * Your implementation should be efficient and handle convergence properly. # Function Signature ```python def geometric_median(points: List[Tuple[float, float]]) -> Tuple[float, float]: pass ``` # Examples ```python >>> geometric_median([(1, 1), (2, 2), (3, 3), (4, 4)]) (2.5, 2.5) >>> geometric_median([(0, 0), (0, 2), (2, 2), (2, 0)]) (1.0, 1.0) ``` # Additional Context The geometric median is the point that minimizes the sum of Euclidean distances to all points in a given set. Unlike the arithmetic mean, the geometric median is robust to outliers and provides a better representation of the central tendency of a set of spatial data. Weiszfeld\'s Algorithm is an iterative method to find the geometric median. It updates the estimate of the median by considering the weighted average of points, with the weights being inversely proportional to the distance from the current estimate. This process continues until convergence criteria are met or a set number of iterations is reached.","solution":"import math from typing import List, Tuple def geometric_median(points: List[Tuple[float, float]], epsilon: float = 1e-5) -> Tuple[float, float]: def distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def weiszfeld(x0, y0): while True: num_x, num_y, denom = 0.0, 0.0, 0.0 for (xi, yi) in points: dist = distance((x0, y0), (xi, yi)) if dist == 0: continue weight = 1 / dist num_x += xi * weight num_y += yi * weight denom += weight if denom == 0: return (x0, y0) new_x, new_y = num_x / denom, num_y / denom if distance((new_x, new_y), (x0, y0)) < epsilon: return new_x, new_y x0, y0 = new_x, new_y initial_guess = (sum(p[0] for p in points) / len(points), sum(p[1] for p in points) / len(points)) return weiszfeld(*initial_guess)"},{"question":"# Context You are tasked with creating a `PriorityQueue` class that simulates a priority queue behavior using a binary heap. The priority queue should store elements such that the highest priority element can be retrieved and removed efficiently. # Task Your task is to implement the `PriorityQueue` class, following the outlined requirements and methods. The `PriorityQueue` class should support basic operations required for handling elements based on their priority. # Requirements 1. **Constructor**: `PriorityQueue()` initializes an empty priority queue. 2. **Methods**: * `push(self, item, priority)`: Inserts an item with the given priority. * `pop(self)`: Removes and returns the item with the highest priority. * `peek(self)`: Returns the item with the highest priority without removing it. * `is_empty(self)`: Returns a boolean indicating if the priority queue is empty. * `change_priority(self, item, new_priority)`: Changes the priority of the given item. 3. **Constraints**: - Use a binary heap (min-heap or max-heap) to manage the priorities efficiently. - Handle edge cases such as popping from an empty queue or trying to change the priority of a non-existent item. - Ensure that the `push`, `pop`, and `change_priority` operations have logarithmic complexity. # Example ```python # Example demonstrating basic operations pq = PriorityQueue() pq.push(\'urgent task\', 1) pq.push(\'normal task\', 5) pq.push(\'low task\', 10) assert pq.peek() == \'urgent task\' assert pq.pop() == \'urgent task\' assert pq.peek() == \'normal task\' pq.change_priority(\'low task\', 2) assert pq.pop() == \'low task\' assert pq.is_empty() is False assert pq.pop() == \'normal task\' assert pq.is_empty() is True ``` Implement your `PriorityQueue` class and ensure it passes all tests that validate its behavior and performance.","solution":"import heapq class PriorityQueue: def __init__(self): self._queue = [] self._entry_finder = {} self._REMOVED = \'<removed-task>\' def push(self, item, priority): if item in self._entry_finder: self.change_priority(item, priority) else: entry = [priority, item] self._entry_finder[item] = entry heapq.heappush(self._queue, entry) def pop(self): while self._queue: priority, item = heapq.heappop(self._queue) if item is not self._REMOVED: del self._entry_finder[item] return item raise KeyError(\'pop from an empty priority queue\') def peek(self): while self._queue: priority, item = self._queue[0] if item is not self._REMOVED: return item heapq.heappop(self._queue) raise KeyError(\'peek from an empty priority queue\') def is_empty(self): return all(item[1] == self._REMOVED for item in self._queue) def change_priority(self, item, new_priority): if item in self._entry_finder: entry = self._entry_finder.pop(item) entry[-1] = self._REMOVED self.push(item, new_priority) else: raise KeyError(\'item not found in the priority queue\')"},{"question":"# Coding Assessment Question Context and Scenario: You are working on a contact management application which stores users\' contact information. The contacts are arranged in alphabetical order by the last name. Each contact contains a `first_name`, `last_name`, and `phone_number`. You need to implement functions that can insert a new contact, ensuring the order is maintained, and search for a contact by the last name using binary search. Task: 1. **Function 1: Sorted Contact Insertion** Write a function `insert_contact(contacts, new_contact)` that inserts a `new_contact` (a dictionary) into the sorted list of contacts `contacts` such that the list remains in alphabetical order by the `last_name`. ```python def insert_contact(contacts: list[dict], new_contact: dict) -> None: Insert a new contact into the sorted list of contacts while maintaining alphabetical order by last name. :param contacts: A list of dictionaries where each dictionary represents a contact. Each dictionary contains \'first_name\', \'last_name\', and \'phone_number\'. :param new_contact: A dictionary to insert containing \'first_name\', \'last_name\', and \'phone_number\'. pass ``` **Example:** ```python contacts = [ {\\"first_name\\": \\"John\\", \\"last_name\\": \\"Doe\\", \\"phone_number\\": \\"123-456-7890\\"}, {\\"first_name\\": \\"Jane\\", \\"last_name\\": \\"Smith\\", \\"phone_number\\": \\"098-765-4321\\"} ] new_contact = {\\"first_name\\": \\"Alice\\", \\"last_name\\": \\"Brown\\", \\"phone_number\\": \\"555-555-5555\\"} insert_contact(contacts, new_contact) print(contacts) # Output: [ # {\\"first_name\\": \\"Alice\\", \\"last_name\\": \\"Brown\\", \\"phone_number\\": \\"555-555-5555\\"}, # {\\"first_name\\": \\"John\\", \\"last_name\\": \\"Doe\\", \\"phone_number\\": \\"123-456-7890\\"}, # {\\"first_name\\": \\"Jane\\", \\"last_name\\": \\"Smith\\", \\"phone_number\\": \\"098-765-4321\\"} # ] ``` 2. **Function 2: Binary Search Contact** Write a function `binary_search_contact(contacts, last_name)` that searches for a contact by `last_name` in a sorted list of contacts using binary search. Return the contact details if found, otherwise return None. ```python def binary_search_contact(contacts: list[dict], last_name: str) -> dict: Searches for a contact by last name using binary search. :param contacts: A list of dictionaries where each dictionary represents a contact. Each dictionary contains \'first_name\', \'last_name\', and \'phone_number\'. :param last_name: A string representing the last name to search for. :return: The contact details as a dictionary if found, otherwise None. pass ``` **Example:** ```python contacts = [ {\\"first_name\\": \\"Alice\\", \\"last_name\\": \\"Brown\\", \\"phone_number\\": \\"555-555-5555\\"}, {\\"first_name\\": \\"John\\", \\"last_name\\": \\"Doe\\", \\"phone_number\\": \\"123-456-7890\\"}, {\\"first_name\\": \\"Jane\\", \\"last_name\\": \\"Smith\\", \\"phone_number\\": \\"098-765-4321\\"} ] contact = binary_search_contact(contacts, \\"Smith\\") print(contact) # Output: {\\"first_name\\": \\"Jane\\", \\"last_name\\": \\"Smith\\", \\"phone_number\\": \\"098-765-4321\\"} contact = binary_search_contact(contacts, \\"Adams\\") print(contact) # Output: None ``` Constraints: - Each contact in the input collection is represented as a dictionary with keys \'first_name\', \'last_name\', and \'phone_number\'. - Ensure the input collection remains sorted after insertion. - Handle edge cases (empty list, single-element list, last name not found). - Implement the binary search logic without using any external libraries. Performance Requirements: - Your solution should effectively handle up to ( 10^6 ) contacts for both insertion and search functions. - The insertion operation should run in linear time complexity. - The search operation should run in logarithmic time complexity.","solution":"def insert_contact(contacts, new_contact): Insert a new contact into the sorted list of contacts while maintaining alphabetical order by last name. :param contacts: A list of dictionaries where each dictionary represents a contact. Each dictionary contains \'first_name\', \'last_name\', and \'phone_number\'. :param new_contact: A dictionary to insert containing \'first_name\', \'last_name\', and \'phone_number\'. if not contacts: contacts.append(new_contact) return left, right = 0, len(contacts) - 1 while left <= right: mid = (left + right) // 2 if contacts[mid][\'last_name\'] < new_contact[\'last_name\']: left = mid + 1 else: right = mid - 1 contacts.insert(left, new_contact) def binary_search_contact(contacts, last_name): Searches for a contact by last name using binary search. :param contacts: A list of dictionaries where each dictionary represents a contact. Each dictionary contains \'first_name\', \'last_name\', and \'phone_number\'. :param last_name: A string representing the last name to search for. :return: The contact details as a dictionary if found, otherwise None. left, right = 0, len(contacts) - 1 while left <= right: mid = (left + right) // 2 if contacts[mid][\'last_name\'] == last_name: return contacts[mid] elif contacts[mid][\'last_name\'] < last_name: left = mid + 1 else: right = mid - 1 return None"},{"question":"# Minimum Spanning Tree (MST) using Kruskal\'s Algorithm Objective: Given a graph represented with a list of edges, implement Kruskal\'s algorithm to find the Minimum Spanning Tree (MST) and return its total weight. Guidelines: 1. Implement a class `KruskalMST` with the following methods: * `__init__(self, edges: List[Tuple[int, int, int]], num_nodes: int)`: Constructor to initialize the graph with the given edges and the number of nodes. * `find_mst(self) -> int`: Method to find the MST using Kruskal\'s algorithm and return its total weight. 2. You will also need to implement the necessary helper methods and data structures, like the Union-Find (Disjoint Set) for efficient cycle detection. Expected Input and Output: - **Input**: - `edges` (list of tuples): Each tuple (u, v, w) represents an edge between nodes `u` and `v` with weight `w`. - `num_nodes` (integer): The number of nodes in the graph. - **Output**: - An integer representing the total weight of the minimum spanning tree. Constraints: - The number of nodes (num_nodes) will not exceed 1000. - The number of edges can be up to 5000. - Node indices are zero-based and range from 0 to num_nodes-1. Performance Requirements: - The implementation should take at most (O(E log E + E alpha V)) time, where (E) is the number of edges, (V) is the number of nodes, and (alpha) is the inverse Ackermann function, which is very slow growing and considered constant for practical purposes. Example: ```python # Example Usage edges = [ (0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4) ] num_nodes = 4 kruskal = KruskalMST(edges, num_nodes) print(kruskal.find_mst()) # Output: 19 ``` Additional Notes: - Ensure your implementation efficiently handles cycle detection. - Consider edge cases such as disconnected graphs or graphs with no edges (the MST total weight in these cases will be 0). - Use appropriate data structures for sorting and union-find operations to enhance the efficiency of your solution.","solution":"from typing import List, Tuple class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 class KruskalMST: def __init__(self, edges: List[Tuple[int, int, int]], num_nodes: int): self.edges = edges self.num_nodes = num_nodes def find_mst(self) -> int: self.edges.sort(key=lambda x: x[2]) # Sort edges by weight uf = UnionFind(self.num_nodes) mst_weight = 0 for (u, v, weight) in self.edges: if uf.find(u) != uf.find(v): uf.union(u, v) mst_weight += weight return mst_weight"},{"question":"# Problem Statement You are tasked with writing a function to determine the shortest path from the top-left corner to the bottom-right corner of a grid. Each cell in the grid may either be passable (indicated by 0) or impassable (indicated by 1). You may only move up, down, left, or right. If a path exists, return the length of the shortest path; otherwise, return -1. # Function Signature ```python def shortest_path(grid: List[List[int]]) -> int: pass ``` # Input - `grid` (List[List[int]]): A 2D list representing the grid where `1 <= len(grid), len(grid[0]) <= 100` and the value in each cell is either 0 or 1. # Output - The function should return an integer representing the length of the shortest path from the top-left corner to the bottom-right corner. If no path exists, return -1. # Example ```python assert shortest_path([[0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 1, 0], [0, 0, 0, 0]]) == 7 assert shortest_path([[0, 1], [1, 0]]) == -1 ``` # Constraints - Assume a high level of computational efficiency. Consider optimizations that may enhance performance given the constraints. - The grid is guaranteed to have at least one cell (1x1 grid is the minimum size). # Notes - Your implementation should be as efficient and clean as possible, respecting the constraints. - If the top-left or bottom-right cell is an impassable cell (1), the function should return -1 immediately. - You may use a Breadth-First Search (BFS) approach to find the shortest path efficiently.","solution":"from typing import List from collections import deque def shortest_path(grid: List[List[int]]) -> int: if grid[0][0] == 1 or grid[-1][-1] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == rows - 1 and c == cols - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] == 0: queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) return -1"},{"question":"# Question: Optimized Fibonacci Sequence Calculation Context Fibonacci sequences are a common problem in computer science. The sequence is defined recursively, with the first two numbers being 0 and 1. Each subsequent number is the sum of the previous two. Calculating large Fibonacci numbers using simple recursive methods is inefficient due to exponential time complexity. Problem Statement Implement an optimized version of the Fibonacci sequence calculation that ensures efficiency for large input values. Utilize memoization or iterative techniques to improve performance and avoid redundant calculations. # Function Signature ```python def optimized_fibonacci(n: int) -> int: Calculate the n-th Fibonacci number efficiently. Parameters: - n (int): The position in the Fibonacci sequence (≥ 0). Returns: - int: The n-th Fibonacci number. Raises: - ValueError: If the input constraints are violated. ``` # Constraints - `n >= 0` - Your solution should handle up to 10^6 efficiently. # Requirements 1. Validate the input as per the specified constraints. 2. Implement an optimized version of the Fibonacci calculation using memoization or an iterative approach. 3. Ensure the solution works within reasonable time and space limits. # Examples ```python >>> optimized_fibonacci(10) 55 >>> optimized_fibonacci(50) 12586269025 >>> optimized_fibonacci(0) 0 ```","solution":"def optimized_fibonacci(n: int) -> int: Calculate the n-th Fibonacci number efficiently. Parameters: - n (int): The position in the Fibonacci sequence (≥ 0). Returns: - int: The n-th Fibonacci number. Raises: - ValueError: If the input constraints are violated. if n < 0: raise ValueError(\\"The input must be a non-negative integer.\\") if n <= 1: return n a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"# Question: Implement Rolling Average Filter In this task, you will implement a rolling average filter, which is a common technique for smoothing noisy signals in data processing and analysis. Given a list of numerical data points, your function should compute the rolling average with a specified window size. Write a Python function `rolling_average(data: List[float], window_size: int) -> List[float]` that takes a list of floating-point numbers and an integer `window_size`, then returns a list of the rolling averages. If the window is larger than the available data points at the edges, the function should compute the average of all available points within the window. # Input * A list of floating-point numbers `data`. * An integer `window_size` which specifies the size of the window for the rolling average computation. # Output * A list of floating-point numbers representing the rolling averages. # Example ```python >>> data = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0] >>> window_size = 3 >>> rolling_average(data, window_size) [2.0, 3.0, 4.0, 5.0, 5.5] >>> data = [1.0, 3.0, 2.5, 5.0, 10.0] >>> window_size = 2 >>> rolling_average(data, window_size) [2.0, 2.75, 3.75, 7.5] ``` # Constraints * The length of the input list `data` is between `0` and `10^6`. * The `window_size` will be a positive integer and will not exceed the length of the list `data`. * The input list elements will be valid floating-point numbers.","solution":"from typing import List def rolling_average(data: List[float], window_size: int) -> List[float]: Computes the rolling average of the given data with the specified window size. if not data or window_size <= 0: return [] n = len(data) rolling_averages = [] for i in range(n): start = max(0, i - window_size + 1) end = i + 1 window = data[start:end] avg = sum(window) / len(window) rolling_averages.append(avg) return rolling_averages"},{"question":"# String Compression You are tasked with implementing a string compression algorithm. The compression algorithm encodes a string by counting consecutive characters. For example, the string `\\"aaabbcc\\"` would be encoded as `\\"a3b2c2\\"`. If the compressed string is not shorter than the original string, the function should return the original string. Your Task 1. **Implement Compression**: Write a function that compresses the input string using the described algorithm. 2. **Optimized Return**: Ensure the function returns the original string if the compressed version is not shorter. Requirements - Implement the function `compress_string(sequence: str) -> str` that performs the described compression. - The function should be case-sensitive and maintain the order of characters. Input - A string `sequence` consisting of printable ASCII characters. Output - A compressed string or the original string based on the algorithm described. Constraints - The input string length will be ≤ 10^5. Performance - The implementation should handle the compression efficiently, respecting the constraints provided. Example ```python >>> compress_string(\\"aabcccccaaa\\") \'a2b1c5a3\' >>> compress_string(\\"abcdef\\") \'abcdef\' >>> compress_string(\\"aabbccdd\\") \'aabbccdd\' ``` This new question aligns with the existing set in style, length, complexity, and topic. It requires understanding of string manipulation and optimization techniques, similar to the provided sample question.","solution":"def compress_string(sequence: str) -> str: Compress the input string using the described algorithm. if not sequence: return sequence compressed = [] count = 1 for i in range(1, len(sequence)): if sequence[i] == sequence[i - 1]: count += 1 else: compressed.append(sequence[i - 1] + str(count)) count = 1 # Don\'t forget to add the last character group compressed.append(sequence[-1] + str(count)) compressed_str = \'\'.join(compressed) # Return the original string if compressed string is not shorter return compressed_str if len(compressed_str) < len(sequence) else sequence"},{"question":"# Problem Statement You are given a list of integers where each integer represents the number of hours a student studied on a particular day. Your task is to write a function that segments this study log into sessions. A session is defined as a continuous streak of studying days where the number of hours studied on each day is in non-decreasing order. Implement a function `segment_study_sessions` that takes a list of integers and returns a list of lists, where each sublist is a valid study session. # Requirements Function Signature ```python def segment_study_sessions(study_log: list) -> list: ``` Input * `study_log`: A list of integers where each integer represents the number of hours studied on a particular day. The list is guaranteed to contain at least one element. Output * A list of lists, where each sublist represents a continuous study session with non-decreasing hours. Example ```python >>> segment_study_sessions([2, 3, 3, 2, 4, 4, 5]) [[2, 3, 3], [2, 4, 4, 5]] >>> segment_study_sessions([1, 2, 2, 1, 3, 3, 3]) [[1, 2, 2], [1, 3, 3, 3]] ``` Constraints * Ensure the solution is efficient for large input sizes. * If a day has fewer hours studied than the previous day, it starts a new session. # Notes * The function should handle edge cases such as a single-element list gracefully. * Segmenting is strictly based on non-decreasing order; equal values are allowed within a session.","solution":"def segment_study_sessions(study_log): Segments the study log into sessions where each session is in non-decreasing order. Parameters: study_log (list): List of integers representing hours studied per day. Returns: list: A list of lists, where each sublist represents a non-decreasing study session. if not study_log: return [] sessions = [] session = [study_log[0]] for i in range(1, len(study_log)): if study_log[i] >= study_log[i - 1]: session.append(study_log[i]) else: sessions.append(session) session = [study_log[i]] sessions.append(session) return sessions"},{"question":"# Array Range Sum Query You are given an array of integers and a set of range queries. Each query asks for the sum of elements between two specified indices in the array. Your task is to implement a class that efficiently processes these queries. Requirements 1. **Create the class `RangeSumQuery`**: This class should take in an array and preprocess it to allow efficient range sum queries. 2. **Implement a method for range sum queries**: Add a method `range_sum(left, right)` that returns the sum of the elements between index `left` and index `right` (inclusive). 3. **Include robustness checks**: Ensure that the given array is non-empty, and the indices are within valid bounds. Constraints * The array will contain between 1 and 10^5 integers. * Each integer in the array will be between -10^4 and 10^4 inclusive. * The number of queries will be between 1 and 10^5. * Indices `left` and `right` will be within the bounds of the array, and `left <= right`. # Function Signature ```python class RangeSumQuery: def __init__(self, array): # preprocessing step def range_sum(self, left, right): # query sum implementation ``` Input * For creating an instance of `RangeSumQuery`: * `array`, a list of integers. * For method `range_sum(left, right)`: * `left`, an integer representing the starting index of the range. * `right`, an integer representing the ending index of the range. Output * Method `range_sum(self, left, right)` should return the sum of the elements between the indices `left` and `right` inclusive. # Example ```python # Creating an instance of RangeSumQuery array = [1, 2, 3, 4, 5] rsq = RangeSumQuery(array) # Performing range sum queries print(rsq.range_sum(0, 2)) # Output: 6 (1+2+3) print(rsq.range_sum(1, 4)) # Output: 14 (2+3+4+5) print(rsq.range_sum(3, 3)) # Output: 4 (single element at index 3) ```","solution":"class RangeSumQuery: def __init__(self, array): Initializes the data structure. Preprocesses the array to allow efficient range sum queries. self.array = array self.prefix_sum = self._preprocess(array) def _preprocess(self, array): Preprocesses the array to create a prefix sum array. prefix_sum = [0] * (len(array) + 1) for i in range(1, len(array) + 1): prefix_sum[i] = prefix_sum[i - 1] + array[i - 1] return prefix_sum def range_sum(self, left, right): Returns the sum of the elements between index `left` and `right` (inclusive). return self.prefix_sum[right + 1] - self.prefix_sum[left]"},{"question":"# Problem Statement A researcher needs to process data streams containing packets of integers. Each packet is represented as a list of integers. The researcher must implement a system that checks for duplicate packets compared to all previous packets received. Specifically, create a function that returns the first duplicate packet detected in the stream. If no duplicates are found, return an empty list. # Function Signature ```python def find_first_duplicate_packet(stream: List[List[int]]) -> List[int]: Returns the first duplicate packet found in the stream. Parameters: stream (List[List[int]]): List of packets, each packet is a list of integers Returns: List[int]: The first duplicate packet found, or an empty list if no duplicates are found ``` # Input and Output Format Input * `stream`: A list of packets, each of which is a list of integers (1 ≤ len(packet) ≤ 1000, -10^6 ≤ packet[i] ≤ 10^6). Output * A list of integers representing the first duplicate packet found in the stream, or an empty list if no duplicate packets are detected. # Constraints * The function should handle large streams efficiently. * Each packet is unique until the first duplicate. * The stream can contain up to 10^5 packets in total. # Example ```python assert find_first_duplicate_packet([[1, 2, 3], [4, 5], [1, 2, 3], [6, 7, 8], [4, 5]]) == [1, 2, 3] assert find_first_duplicate_packet([[10], [20, 30], [40, 50, 60]]) == [] assert find_first_duplicate_packet([[1], [1], [1, 2], [2, 1], [1, 2]]) == [1] ``` # Explanation * In the first example, `[1, 2, 3]` is the first packet to be duplicated. * In the second example, no duplicates are found, so the output is an empty list. * In the third example, `[1]` is the first packet to be duplicated. # Additional Notes * Use an efficient data structure to keep track of seen packets to ensure the solution handles large streams efficiently. * Make sure your solution can handle the constraints and edge cases effectively. This new question has been crafted to match the given sample questions in terms of style, complexity, and length. It introduces a problem that assesses understanding of data handling, efficiency, and de-duplication within a stream processing context.","solution":"from typing import List def find_first_duplicate_packet(stream: List[List[int]]) -> List[int]: Returns the first duplicate packet found in the stream. Parameters: stream (List[List[int]]): List of packets, each packet is a list of integers Returns: List[int]: The first duplicate packet found, or an empty list if no duplicates are found seen_packets = set() for packet in stream: packet_tuple = tuple(packet) if packet_tuple in seen_packets: return packet seen_packets.add(packet_tuple) return []"},{"question":"# Problem Statement: You are given a function that generates the Fibonacci sequence up to the n-th term. Your task is to implement a new function named `is_fibonacci_subsequence(arr: List[int]) -> bool` which takes a list of integers and determines if the list forms a subsequence of the Fibonacci sequence. # Requirements: 1. If `arr` is empty, return `True`. 2. Ensure the function handles all edge cases appropriately, such as very short or long lists. 3. Aim to maintain optimal performance by efficiently checking the subsequence property. # Function Signature: ```python def is_fibonacci_subsequence(arr: List[int]) -> bool: pass ``` # Input Format: * `arr`: A list of integers. # Output Format: * A boolean value indicating whether the provided list forms a subsequence of the Fibonacci sequence. # Examples: ```python # Example 1 arr = [0, 1, 1, 2, 3, 5, 8, 13] # The array is a direct subsequence of the Fibonacci sequence. print(is_fibonacci_subsequence(arr)) # Expected output: True # Example 2 arr = [1, 4, 5, 14] # 4 and 14 are not in the Fibonacci sequence, so this is not a subsequence. print(is_fibonacci_subsequence(arr)) # Expected output: False # Example 3 arr = [2, 3, 5, 8] # This is a valid subsequence of the Fibonacci sequence. print(is_fibonacci_subsequence(arr)) # Expected output: True ``` # Constraints: * The length of `arr` can be up to 10^5. * Each element of `arr` can be any integer within the range of 32-bit signed integers.","solution":"def is_fibonacci_subsequence(arr): Returns True if the given list `arr` forms a subsequence of the Fibonacci sequence. if not arr: return True # Function to generate Fibonacci numbers up to a certain limit. def generate_fibonacci_upto(n): fib = [0, 1] while fib[-1] <= n: fib.append(fib[-1] + fib[-2]) return set(fib[:-1]) max_value = max(arr) fibonacci_numbers = generate_fibonacci_upto(max_value) return all(num in fibonacci_numbers for num in arr)"},{"question":"# Problem Statement Write a function `find_max_collatz_length(limit: int) -> Tuple[int, int]` that computes and returns a tuple containing the number less than or equal to `limit` that produces the longest Collatz sequence and the length of that sequence. The Collatz sequence of a number `n` is generated as follows: - Start with `n`. - If `n` is even, the next term is `n / 2`. - If `n` is odd, the next term is `3 * n + 1`. - The sequence ends when `n` becomes 1. # Input Format - A single integer `limit`. # Output Format - A tuple `(number, length)`, where `number` is the number less than or equal to `limit` that generates the longest Collatz sequence, and `length` is the length of that sequence. # Constraints - `1 leq limit leq 10^6`. # Performance Requirements - Your implementation should be efficient in both time and space complexity, considering the constraints. # Examples 1. `find_max_collatz_length(10)` should return `(9, 20)`. - (The sequence for 9 is: 9, 28, 14, 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1) 2. `find_max_collatz_length(15)` should return `(9, 20)`. - (The sequence for 9 is the longest among numbers up to 15) 3. `find_max_collatz_length(1)` should return `(1, 1)`. - (The sequence for 1 is simply: 1) # Additional Notes - Ensure that your function handles invalid cases by raising appropriate exceptions: - Non-integer input should raise a `TypeError`. - Non-positive integer input should raise a `ValueError`. # Function Signature ```python def find_max_collatz_length(limit: int) -> Tuple[int, int]: pass ```","solution":"from typing import Tuple def find_max_collatz_length(limit: int) -> Tuple[int, int]: if not isinstance(limit, int): raise TypeError(\\"Input must be an integer.\\") if limit <= 0: raise ValueError(\\"Input must be a positive integer greater than 0.\\") def collatz_length(n: int, memo={1: 1}) -> int: if n in memo: return memo[n] if n % 2 == 0: next_n = n // 2 else: next_n = 3 * n + 1 memo[n] = 1 + collatz_length(next_n, memo) return memo[n] max_length = 0 number_with_max_length = 1 for i in range(1, limit + 1): length = collatz_length(i) if length > max_length: max_length = length number_with_max_length = i return (number_with_max_length, max_length)"},{"question":"# Problem Description You are given a list of integers representing the heights of towers in a city skyline. You need to find out the maximum rectangle area that can be formed in the skyline using consecutive towers. Each rectangle\'s height is determined by the shortest tower in that range. # Function Signature ```python def max_rectangle_area(towers: list) -> int: ``` # Input * `towers` (list of int): A list of positive integers representing the heights of the towers. The length of the list will be at least 1 and at most 10^5. # Output * (int): The area of the largest rectangle that can be formed using consecutive towers. # Constraints * The number of towers, `n`, will be in the range [1, 10^5]. * The height of each tower will be in the range [1, 10^4]. # Performance Requirements * The solution must handle up to 100,000 towers efficiently. * Consider using a stack-based approach for optimal performance in finding the largest rectangle. # Example Cases Example 1: ```python towers = [2, 1, 5, 6, 2, 3] output = 10 ``` Example 2: ```python towers = [3, 1, 3, 2, 2] output = 6 ``` Example 3: ```python towers = [5, 5, 5, 5, 5] output = 25 ``` # Additional Information 1. Your code should handle edge cases such as a single tower and large lists of towers. 2. Consider providing a stack-based implementation to ensure optimal performance.","solution":"def max_rectangle_area(towers: list) -> int: Returns the maximum rectangle area that can be formed in the skyline using consecutive towers. def largestRectangleArea(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area return largestRectangleArea(towers)"},{"question":"# Problem Statement You are given the implementation of a file system simulation, where files and directories are represented as objects. Extend the current implementation to support file copying and moving functionalities, ensuring the preservation of the directory structure and file contents. Optimize the operations to handle large directory trees efficiently. # Requirements: 1. **Class `FileSystem`**: - Initialize with a root directory. - Method `copy` to copy a file or directory from a source path to a destination path: - Name: `copy` - Input: Two strings: `src` (source path) and `dst` (destination path). - Output: Boolean indicating success or failure. - Constraints: - Ensure the file or directory structure is preserved. - Handle cases where the destination path already exists appropriately. - Raise appropriate exceptions for invalid paths. - Method `move` to move a file or directory from a source path to a destination path: - Name: `move` - Input: Two strings: `src` (source path) and `dst` (destination path). - Output: Boolean indicating success or failure. - Constraints: - Ensure the file or directory structure is preserved. - Handle cases where the destination path already exists appropriately. - Raise appropriate exceptions for invalid paths. 2. **Classes `File` and `Directory`**: - Represent files and directories with appropriate attributes and methods. - Ensure all necessary metadata and content are correctly handled during copying and moving. # Example: ```python class FileSystem: def __init__(self): self.root = Directory(\\"/\\") def copy(self, src: str, dst: str) -> bool: # Your implementation here pass def move(self, src: str, dst: str) -> bool: # Your implementation here pass class File: def __init__(self, name: str, content: str): self.name = name self.content = content class Directory: def __init__(self, name: str): self.name = name self.contents = {} def add(self, item): # Add file or directory to contents pass def get(self, name: str): # Retrieve file or directory by name pass def remove(self, name: str): # Remove file or directory by name pass ``` # Notes: - Ensure proper handling of edge cases, such as copying to a non-existent destination or moving non-empty directories. - Optimize the implementation to perform efficiently with large and deep directory structures. - Include comprehensive tests to validate your solution against various cases, including empty and nested directories.","solution":"class FileSystem: def __init__(self): self.root = Directory(\\"/\\") def copy(self, src: str, dst: str) -> bool: # Extract the source and destination directories and file names src_dir_path, src_name = src.rsplit(\'/\', 1) dst_dir_path, dst_name = dst.rsplit(\'/\', 1) src_dir = self.resolve_path(src_dir_path) dst_dir = self.resolve_path(dst_dir_path) if not src_dir or not dst_dir: raise ValueError(\\"Invalid source or destination path\\") item_to_copy = src_dir.get(src_name) if not item_to_copy: raise ValueError(\\"Source file or directory does not exist\\") if not item_to_copy.copy(dst_dir, dst_name): return False return True def move(self, src: str, dst: str) -> bool: # Perform copy first and then delete the source if self.copy(src, dst): src_dir_path, src_name = src.rsplit(\'/\', 1) src_dir = self.resolve_path(src_dir_path) src_dir.remove(src_name) return True return False def resolve_path(self, path: str): # Helper function to resolve the directory from a given path parts = path.strip(\'/\').split(\'/\') current_dir = self.root for part in parts: if not part: continue current_dir = current_dir.get(part) if not current_dir or not isinstance(current_dir, Directory): return None return current_dir class File: def __init__(self, name: str, content: str = \\"\\"): self.name = name self.content = content def copy(self, target_dir, new_name): if new_name in target_dir.contents: raise ValueError(\\"Destination already contains a file or directory with the same name\\") target_dir.contents[new_name] = File(new_name, self.content) return True class Directory: def __init__(self, name: str): self.name = name self.contents = {} def add(self, item): self.contents[item.name] = item def get(self, name: str): return self.contents.get(name) def remove(self, name: str): if name in self.contents: del self.contents[name] def copy(self, target_dir, new_name): if new_name in target_dir.contents: raise ValueError(\\"Destination already contains a file or directory with the same name\\") new_dir = Directory(new_name) target_dir.contents[new_name] = new_dir for item in self.contents.values(): item.copy(new_dir, item.name) return True"},{"question":"# Scenario You are required to create a file processing script that reads a text file containing numerical data, processes it, and writes the results to another file. The input file (`input.txt`) contains a list of integers, with one integer per line. The task is to compute the square of each integer and write the results to a new file (`output.txt`), where each squared value appears on a new line. # Task Write a function `process_file(input_file, output_file)` which performs the following: * Reads integers from `input_file`, one line at a time. * Computes the square of each integer. * Writes each squared value to `output_file`, with each result on a new line. # Expected Input and Output * **Input**: * `input_file` (a string representing the path to the input file). * `output_file` (a string representing the path to the output file). * **Output**: The function does not return anything, however, it must correctly process the input file and create/populate the output file with the squared values. # Constraints * The input file will always exist and contain valid integer numbers, one per line. * You must handle file reading and writing using Python standard file handling techniques. * You cannot use any external libraries for this task. Example Suppose `input.txt` contains: ``` 2 5 10 ``` After running `process_file(\'input.txt\', \'output.txt\')`, the `output.txt` should contain: ``` 4 25 100 ``` Your solution should correctly implement the described functionality given the constraints above.","solution":"def process_file(input_file, output_file): Reads integers from the input_file, computes the square of each integer, and writes the squared values to the output_file. with open(input_file, \'r\') as infile: numbers = infile.readlines() squared_numbers = [str(int(num.strip()) ** 2) for num in numbers] with open(output_file, \'w\') as outfile: outfile.write(\'n\'.join(squared_numbers) + \'n\')"},{"question":"# Coding Question Context In managing user data for an online platform, you sometimes need to identify the longest username from a given list of usernames. Usernames are stored as strings, and each username contains only lowercase letters and digits. Implement a function to find the longest username in the list. If there is a tie (multiple usernames with the same length), return the username that comes first alphabetically. Objective Write a function `longest_username` that takes a list of strings representing usernames and returns the longest username. If two or more usernames have the same length, return the smallest username lexicographically. Function Signature ```python def longest_username(usernames: list[str]) -> str: ``` Input * `usernames`: a list of strings where each string is a username. Constraints: 1 <= len(usernames) <= 1000 and 1 <= len(usernames[i]) <= 100. Output * A string representing the longest username. In case of a tie, return the one that appears first alphabetically. Examples ```python >>> longest_username([\\"alice\\", \\"bob\\", \\"charlie\\", \\"dave\\"]) \\"charlie\\" >>> longest_username([\\"alex\\", \\"adam\\", \\"albert\\"]) \\"albert\\" >>> longest_username([\\"john\\", \\"jane\\", \\"doe\\", \\"josephine\\"]) \\"josephine\\" >>> longest_username([\\"bob\\", \\"bobbie\\", \\"bobster\\", \\"bobs\\"]) \\"bobster\\" ``` Constraints * Your function should handle the sorting and comparison of strings efficiently. * The function should not assume that the input list will always be sorted. Notes 1. Consider edge cases such as a single username in the list, or usernames with varying lengths. 2. Ensure your function handles valid input data only.","solution":"def longest_username(usernames): Returns the longest username from the list of usernames. In case of a tie, returns the smallest username lexicographically. # Sort the usernames first by length (descending) and then lexicographically (ascending) sorted_usernames = sorted(usernames, key=lambda u: (-len(u), u)) return sorted_usernames[0]"},{"question":"# Tower of Hanoi Recursive Solution and Analysis **Background**: The Tower of Hanoi is a classic problem in computer science that involves moving a set of disks from one peg to another, following specific rules. This problem is often used to teach recursion and algorithmic thinking. **Objective**: You are asked to implement a recursive version of the Tower of Hanoi solution and analyze the number of moves required for a given number of disks. **Task**: 1. Implement the `tower_of_hanoi` function to solve the problem recursively. 2. Write a function `solve_hanoi(num_disks: int) -> int` that calculates and returns the number of moves required to solve the Tower of Hanoi problem with the given number of disks. **Function Signature**: ```python def solve_hanoi(num_disks: int) -> int: ``` **Input**: - `num_disks`: An integer representing the number of disks. Example: `3` **Output**: - An integer representing the minimum number of moves required to solve the problem. Example: `7` **Constraints**: - The number of disks `n` is such that `1 <= n <= 20`. **Example**: ```python num_disks = 3 result = solve_hanoi(num_disks) print(result) # Output: 7 ``` **Helper Function**: - You may implement a helper function to recursively move disks between pegs. For example: ```python def tower_of_hanoi(n, source, target, auxiliary): if n == 1: print(f\\"Move disk 1 from {source} to {target}\\") return tower_of_hanoi(n - 1, source, auxiliary, target) print(f\\"Move disk {n} from {source} to {target}\\") tower_of_hanoi(n - 1, auxiliary, target, source) ``` In this implementation, you do not need to print the moves but focus on calculating the number of moves required.","solution":"def tower_of_hanoi(n, source, target, auxiliary): if n == 1: return 1 else: moves_before = tower_of_hanoi(n - 1, source, auxiliary, target) move_disk = 1 moves_after = tower_of_hanoi(n - 1, auxiliary, target, source) return moves_before + move_disk + moves_after def solve_hanoi(num_disks: int) -> int: return tower_of_hanoi(num_disks, \'A\', \'C\', \'B\')"},{"question":"**Problem Statement: Implement an Efficient Prime Factorization Function** You are required to implement a function that performs prime factorization of a given integer efficiently, accounting for both small and large integers. The aim is to decompose the number into its prime factors and return them as a list. # Function Signature ```python def prime_factors(n: int) -> list: Return the list of prime factors of the given integer n. Parameters: n (int): The input integer to be factorized. Returns: list: A list containing the prime factors of n in ascending order. ``` # Requirements 1. The function should handle both small and large integers efficiently. 2. It should return the prime factors in ascending order. 3. Ensure that the function correctly handles edge cases such as negative numbers and 0. 4. The function must not use any external libraries for prime factorization. 5. Include at least 5 test cases in the documentation demonstrating correctness, including edge cases. # Input Format - A single integer, ( -10^{18} le n le 10^{18} ). # Output Format - A list of integers representing the prime factors of ( n ) in ascending order. # Constraints - The function should work within reasonable time limits for large integers, considering their prime factors. # Example ```python >>> prime_factors(28) [2, 2, 7] >>> prime_factors(45) [3, 3, 5] >>> prime_factors(101) [101] >>> prime_factors(-60) [2, 2, 3, 5] >>> prime_factors(1) [] ``` Ensure to provide clear documentation of your function to explain your approach and the way edge cases are handled.","solution":"def prime_factors(n: int) -> list: Return the list of prime factors of the given integer n. Parameters: n (int): The input integer to be factorized. Returns: list: A list containing the prime factors of n in ascending order. factors = [] if n == 0: return factors # Work with the absolute value of n abs_n = abs(n) # Check divisibility by 2 while abs_n % 2 == 0: factors.append(2) abs_n //= 2 # Check divisibility by odd numbers from 3 onwards divisor = 3 while divisor * divisor <= abs_n: while abs_n % divisor == 0: factors.append(divisor) abs_n //= divisor divisor += 2 # If n is a prime number greater than 2 if abs_n > 2: factors.append(abs_n) return factors"},{"question":"Problem Statement # Objective Write a function `is_happy_number(n: int) -> bool` that determines if a given positive integer `n` is a happy number. # Constraints - The function must take a single integer `n` >= 1. - The function should raise a `ValueError` if n < 1. - The function should raise a `TypeError` if the input is not an integer. # Input - `n` (int): A positive integer, which needs to be checked if it\'s a happy number. # Output - The function should return a boolean value (`True` or `False`) indicating whether the number is happy. # Examples ```python >>> is_happy_number(19) True >>> is_happy_number(2) False >>> is_happy_number(1) True >>> is_happy_number(0) Traceback (most recent call last): ... ValueError: Input value of [number=0] must be > 0 >>> is_happy_number(-7) Traceback (most recent call last): ... ValueError: Input value of [number=-7] must be > 0 >>> is_happy_number(19.0) Traceback (most recent call last): ... TypeError: Input value of [number=19.0] must be an integer ``` # Performance Requirements - The function should operate efficiently, taking into account the cyclical nature of unhappy numbers. - The function should use O(1) additional space aside from the input value. # Task Implement the `is_happy_number` function in Python, ensuring that you handle edge cases appropriately and validate the input.","solution":"def is_happy_number(n: int) -> bool: Returns True if n is a happy number, False otherwise. A happy number is a number that eventually reaches 1 when replaced by the sum of the square of each digit. Args: n: int - the number to be checked Returns: bool - True if n is a happy number, otherwise False. Raises: ValueError: if n < 1. TypeError: if n is not an integer. if not isinstance(n, int): raise TypeError(f\\"Input value of [number={n}] must be an integer\\") if n < 1: raise ValueError(f\\"Input value of [number={n}] must be > 0\\") def get_next(number): return sum(int(char) ** 2 for char in str(number)) slow, fast = n, get_next(n) while fast != 1 and slow != fast: slow = get_next(slow) fast = get_next(get_next(fast)) return fast == 1"},{"question":"# Problem Statement You are tasked with implementing a queue data structure for an event management system that processes a sequence of tasks. Queues must support typical operations and handle error conditions gracefully. **Specifications**: Implement a `Queue` class with the following methods: 1. `enqueue(data: T)`: Add an element `data` to the end of the queue. 2. `dequeue() -> T`: Remove and return the front element of the queue. 3. `peek() -> T`: Return (but do not remove) the front element of the queue. 4. `is_empty() -> bool`: Return `True` if the queue is empty, `False` otherwise. 5. `is_full() -> bool`: Return `True` if the queue is full, `False` otherwise. 6. `size() -> int`: Return the number of elements currently in the queue. **Error Handling**: - *QueueOverflowError*: Raised when attempting to enqueue into a full queue. - *QueueUnderflowError*: Raised when attempting to dequeue from or peek into an empty queue. **Input/Output**: - Ensure that operations handle edge cases properly. - The queue should be limited by a maximum size constraint upon initialization. # Inputs: - Integer `limit`: Defines the maximum number of elements the queue can hold. - Sequence of operations requests including `enqueue`, `dequeue`, `peek`, `is_empty`, `is_full`, `size`. # Outputs: - For `enqueue`: None. - For `dequeue` and `peek`: The respective element. - For `is_empty`, `is_full`: Boolean value indicating the state of the queue. - For `size`: Integer indicating the queue\'s current size. # Example: ```python Q = Queue(3) Q.enqueue(10) Q.enqueue(20) print(Q.dequeue()) # Output: 10 print(Q.peek()) # Output: 20 print(Q.is_empty()) # Output: False Q.enqueue(30) print(Q.is_full()) # Output: False Q.enqueue(40) Q.enqueue(50) # Raises QueueOverflowError: Too many elements ``` # Constraints: - Queue size `limit` ranges from 1 to 10^4. - Operations on the queue should be optimized for efficiency. # Task: Implement the `Queue` class described above, ensuring proper function and error handling compliance.","solution":"class QueueOverflowError(Exception): pass class QueueUnderflowError(Exception): pass class Queue: def __init__(self, limit=10): self.limit = limit self.queue = [] def enqueue(self, data): if self.size() >= self.limit: raise QueueOverflowError(\\"Queue is full\\") self.queue.append(data) def dequeue(self): if self.is_empty(): raise QueueUnderflowError(\\"Queue is empty\\") return self.queue.pop(0) def peek(self): if self.is_empty(): raise QueueUnderflowError(\\"Queue is empty\\") return self.queue[0] def is_empty(self): return len(self.queue) == 0 def is_full(self): return len(self.queue) >= self.limit def size(self): return len(self.queue)"},{"question":"**Context**: You are to design a function that analyzes a given list of integer numbers and classifies each as \\"prime\\", \\"fibonacci\\", or \\"both\\". A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Fibonacci numbers are a sequence where each number is the sum of the two preceding ones, starting from 0 and 1. The function must categorize each number appropriately and print lists of numbers fitting each category. **Task**: Create a function `classify_numbers` that takes a list of integers and classifies each number as \\"prime\\", \\"fibonacci\\", or \\"both\\". **Function Signature**: ```python def classify_numbers(numbers: List[int]) -> None: ``` **Input**: - `numbers`: A list of integers. **Output**: - Print lists of numbers classified as: - Prime numbers. - Fibonacci numbers. - Numbers that are both prime and Fibonacci. **Examples**: ```python numbers = [2, 3, 5, 8, 13, 21, 34, 89] classify_numbers(numbers) ``` Expected Output: ``` Prime numbers: [2, 3, 5, 13, 89] Fibonacci numbers: [2, 3, 5, 8, 13, 21, 34, 89] Numbers that are both prime and Fibonacci: [2, 3, 5, 13, 89] ``` **Constraints**: - The list `numbers` will contain between 1 and 100 integers. - Integers in the list range from 0 to 10,000. - The input list will not contain duplicate numbers. Ensure that your implementation handles all constraints and edge cases effectively.","solution":"from typing import List def is_prime(n: int) -> bool: if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def generate_fibonacci_upto(n: int) -> set: fibs = set() a, b = 0, 1 while a <= n: fibs.add(a) a, b = b, a + b return fibs def classify_numbers(numbers: List[int]) -> None: max_number = max(numbers) if numbers else 0 primes = [num for num in numbers if is_prime(num)] fibonacci_numbers = generate_fibonacci_upto(max_number) fibs = [num for num in numbers if num in fibonacci_numbers] both = set(primes) & set(fibs) print(\\"Prime numbers:\\") print(primes) print(\\"Fibonacci numbers:\\") print(fibs) print(\\"Numbers that are both prime and Fibonacci:\\") print(list(both))"},{"question":"# Coding Assessment Question Scenario You are tasked with developing an algorithm for a simulation game that revolves around resource management. One of the key challenges in the game is to determine the order in which players gather resources. The order is determined based on a simple mathematical pattern known as the Prime Fibonacci sequence. In this task, you need to write a function that generates a list of the first `n` numbers in the Prime Fibonacci sequence. Task Implement a function `prime_fibonacci(n: int) -> List[int]` that returns a list containing the first `n` numbers of the Prime Fibonacci sequence. The Prime Fibonacci sequence is defined as the list of prime numbers found in the standard Fibonacci sequence. Requirements * **Input**: An integer `n` (1 ≤ n ≤ 15) * **Output**: A list of the first `n` numbers in the Prime Fibonacci sequence. Constraints * Ensure the input value `n` is a positive integer. * Validate the input to ensure it meets the specified constraints. * The function should handle cases where prime numbers are not easily identifiable and should use efficient checking for prime numbers. Example ```python prime_fibonacci(1) # Output: [2] prime_fibonacci(3) # Output: [2, 3, 5] prime_fibonacci(5) # Output: [2, 3, 5, 13, 89] ``` Notes * The Fibonacci sequence is defined as: `F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) for n >= 2`. * Use a helper function to check for primality of each Fibonacci number. * Optimize the approach to avoid recomputation of Fibonacci numbers and primality tests where possible.","solution":"from typing import List def is_prime(num: int) -> bool: Returns True if num is a prime number, otherwise False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_fibonacci(n: int) -> List[int]: Returns a list of the first n prime numbers in the Fibonacci sequence. if n < 1 or n > 15: raise ValueError(\\"Input must be between 1 and 15 inclusive\\") fib_primes = [] a, b = 0, 1 while len(fib_primes) < n: a, b = b, a + b if is_prime(a): fib_primes.append(a) return fib_primes"},{"question":"# Problem Statement You are to implement a function named `is_symmetric` that checks whether a given binary tree is symmetric around its center. # Function Signature ```python def is_symmetric(root: TreeNode) -> bool: pass ``` # Input * `root`: A `TreeNode` representing the root of the binary tree. Each node contains an integer. A `TreeNode` is defined as follows: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` # Output * Return `True` if the binary tree is symmetric around its center, otherwise `False`. # Example ```python # Example 1 # Input: # 1 # / # 2 2 # / / # 3 4 4 3 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(2) root.left.left = TreeNode(3) root.left.right = TreeNode(4) root.right.left = TreeNode(4) root.right.right = TreeNode(3) assert is_symmetric(root) == True # Example 2 # Input: # 1 # / # 2 2 # # 3 3 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(2) root.left.right = TreeNode(3) root.right.right = TreeNode(3) assert is_symmetric(root) == False ``` # Constraints * The number of nodes in the tree is in the range [0, 100]. * The value of each node is an integer in the range [-100, 100]. # Requirements * You should implement a solution that efficiently checks the tree\'s symmetry. * Consider both iterative and recursive approaches to solving this problem.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_symmetric(root: TreeNode) -> bool: def is_mirror(t1: TreeNode, t2: TreeNode) -> bool: if not t1 and not t2: return True if not t1 or not t2: return False return (t1.val == t2.val) and is_mirror(t1.right, t2.left) and is_mirror(t1.left, t2.right) if not root: return True return is_mirror(root.left, root.right)"},{"question":"# Problem Statement You are given a list of unsorted integers where every integer appears exactly twice, except for one integer which appears exactly once. Write a function to find that single unique integer. Function Signature ```python def find_unique_number(nums: list[int]) -> int: ``` Input - A list of integers `nums` such that every integer appears exactly twice, except for one integer which appears exactly once. - The list can have both positive and negative integers. - The length of the list will be between 1 and 10^7. Output - Return the integer that appears exactly once. Constraints - The list will not be empty. - There will be exactly one integer that appears only once. Examples ```python assert find_unique_number([1, 2, 2, 3, 3]) == 1 assert find_unique_number([-1, -1, 2, 2, -3, -3, 4]) == 4 assert find_unique_number([5, -7, 5, -7, 4]) == 4 assert find_unique_number([10, 20, 10, 30, 20]) == 30 ``` Additional Notes - Ensure your solution runs efficiently for large lists. - Validate the input to confirm it meets the requirements. Scenario Imagine you are analyzing a database where each record is identified by a unique ID. Occasionally, the system crashes and duplicates some of the records. In order to maintain data integrity, you need to quickly identify any unique record that might have been mistakenly marked, so that appropriate actions can be taken.","solution":"def find_unique_number(nums: list[int]) -> int: This function finds the single unique integer in the list of integers nums. Every integer in the list appears exactly twice, except for one integer which appears exactly once. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"**Graph Traversal Optimization** You are given a graph with `N` nodes and `M` edges, represented by an adjacency list. Your task is to build a data structure that supports the following operations efficiently: 1. **Depth-First Search**: Perform a depth-first search starting from a given node and return the list of nodes in the order they are visited. 2. **Breadth-First Search**: Perform a breadth-first search starting from a given node and return the list of nodes in the order they are visited. 3. **Shortest Path Calculation**: Given two nodes, return the length of the shortest path between them using BFS (assuming the graph is unweighted). # Task 1. **Implement the Graph Initialization**: Create a class `Graph` that takes the number of nodes and the list of edges as input and initializes an adjacency list representation of the graph. 2. **Implement DFS**: - Method: `dfs` - Input: Starting node. - Output: List of nodes in the order they are visited. 3. **Implement BFS**: - Method: `bfs` - Input: Starting node. - Output: List of nodes in the order they are visited. 4. **Implement Shortest Path Calculation**: - Method: `shortest_path` - Input: Two nodes, `start` and `end`. - Output: Length of the shortest path between `start` and `end`. # Requirements 1. **Graph Initialization**: - Input: Integer `N` (number of nodes), list of tuples (each tuple represents an edge with two integers `u` and `v` indicating a bidirectional edge between `u` and `v`). - Output: Initialized graph object with an adjacency list. 2. **DFS**: - Input: Start node - Output: List of nodes in the order they are visited during DFS. 3. **BFS**: - Input: Start node - Output: List of nodes in the order they are visited during BFS. 4. **Shortest Path Calculation**: - Input: Start node, end node - Output: Integer representing the length of the shortest path between the start and end nodes. # Constraints - The graph will have at most `10^4` nodes and `10^5` edges. - The nodes are 0-indexed. - The graph may be disconnected. - Ensure efficient handling of edge cases, including disconnected nodes and non-existent paths. # Example ```python edges = [(0, 1), (0, 2), (1, 2), (1, 3), (2, 4), (3, 4)] graph = Graph(5, edges) print(graph.dfs(0)) # Output: [0, 1, 2, 4, 3] print(graph.bfs(0)) # Output: [0, 1, 2, 3, 4] print(graph.shortest_path(0, 4)) # Output: 2 print(graph.shortest_path(0, 3)) # Output: 2 print(graph.shortest_path(3, 0)) # Output: 2 print(graph.shortest_path(0, 6)) # Output: -1 (assuming nonexistent paths return a special value like -1) ``` Please implement these functionalities optimally.","solution":"from collections import deque, defaultdict class Graph: def __init__(self, N, edges): self.N = N self.adj_list = defaultdict(list) for u, v in edges: self.adj_list[u].append(v) self.adj_list[v].append(u) def dfs(self, start): visited = set() result = [] self._dfs_util(start, visited, result) return result def _dfs_util(self, node, visited, result): if node in visited: return visited.add(node) result.append(node) for neighbor in self.adj_list[node]: self._dfs_util(neighbor, visited, result) def bfs(self, start): visited = set() result = [] queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) result.append(node) for neighbor in self.adj_list[node]: queue.append(neighbor) return result def shortest_path(self, start, end): if start == end: return 0 visited = set() queue = deque([(start, 0)]) while queue: node, distance = queue.popleft() if node == end: return distance if node not in visited: visited.add(node) for neighbor in self.adj_list[node]: queue.append((neighbor, distance + 1)) return -1 # if no path is found"},{"question":"# Coding Assessment Question: Rotate and Normalize a 2D Array Context You are currently working on a project that involves manipulating 2D matrices (image processing or data tables). To standardize the data, you need to rotate these matrices 90 degrees clockwise and normalize their values. Task Write two functions: 1. A function `rotate_2d_array(matrix: list[list[int]]) -> list[list[int]]` that takes a 2D array (a list of lists) and returns a new 2D array rotated 90 degrees clockwise. 2. A function `normalize_2d_array(matrix: list[list[int]]) -> list[list[float]]` that takes a 2D array of integers and returns a new 2D array with normalized float values, where each value is divided by the maximum value in the original matrix. Specifications * `rotate_2d_array(matrix: list[list[int]]) -> list[list[int]]` * **Input**: * `matrix`: A 2D array represented as a list of lists of integers. * **Output**: * A new 2D array rotated 90 degrees clockwise. * `normalize_2d_array(matrix: list[list[int]]) -> list[list[float]]` * **Input**: * `matrix`: A 2D array represented as a list of lists of integers. * **Output**: * A new 2D array of the same dimensions where each value is divided by the maximum value in the original matrix. Constraints * All rows in the input 2D array have the same number of columns. * The input 2D matrix is non-empty. Examples * Example 1: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] result = rotate_2d_array(matrix) assert result == [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] result = normalize_2d_array(matrix) assert result == [ [1/9, 2/9, 3/9], [4/9, 5/9, 6/9], [7/9, 8/9, 9/9] ] ``` * Example 2: ```python matrix = [ [10, 20], [30, 40] ] result = rotate_2d_array(matrix) assert result == [ [30, 10], [40, 20] ] result = normalize_2d_array(matrix) assert result == [ [0.25, 0.5], [0.75, 1.0] ] ``` Notes * Ensure to handle edge cases such as single row or single column matrices. * Floating-point precision issues might arise during normalization; it’s enough to keep up to 4 decimal places for normalized values. By completing these tasks, you will demonstrate proficiency in matrix manipulation and normalization techniques, which are critical in data preprocessing workflows.","solution":"def rotate_2d_array(matrix: list[list[int]]) -> list[list[int]]: Rotates a 2D array 90 degrees clockwise. return [list(reversed(col)) for col in zip(*matrix)] def normalize_2d_array(matrix: list[list[int]]) -> list[list[float]]: Normalizes a 2D array by dividing each value by the maximum value in the original matrix. max_val = max(max(row) for row in matrix) return [[round(element / max_val, 4) for element in row] for row in matrix]"},{"question":"# Coding Assessment Question **Title**: Longest Increasing Subsequence **Problem Statement**: Given an array of integers, write a function `length_of_LIS(nums: list[int]) -> int` that computes the length of the longest strictly increasing subsequence. **Input**: - An array of integers represented as a list of integers, where ( 1 leq |nums| leq 2500 ) and (-10^4 leq nums[i] leq 10^4). **Output**: - An integer representing the length of the longest increasing subsequence. **Constraints**: - The elements of the array will be integers. **Performance Requirements**: - The solution should work efficiently for input close to the constraint limits. **Examples**: ```python nums1 = [10, 9, 2, 5, 3, 7, 101, 18] print(length_of_LIS(nums1)) # Expected output: 4 nums2 = [0, 1, 0, 3, 2, 3] print(length_of_LIS(nums2)) # Expected output: 4 nums3 = [7, 7, 7, 7, 7, 7, 7] print(length_of_LIS(nums3)) # Expected output: 1 ``` **Scenario**: You are tasked with analyzing financial data to determine trends over time. One key metric is identifying the length of the longest increasing sequence of stock prices. Implement the `length_of_LIS` function to automate this part of the analysis. **Additional Notes**: - The longest increasing subsequence does not need to be contiguous. - Consider both time and space complexity when designing your solution. - Use dynamic programming or other efficient algorithms to achieve optimal performance.","solution":"def length_of_LIS(nums): if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Here\'s a new question that aligns with the existing set in terms of style, complexity, and scope. # Bookstore Inventory Management You are tasked with managing the inventory of a bookstore. Given a list of transactions, each representing books sold or restocked, calculate the final stock of each book. # Function Signature ```python def manage_inventory(transactions: list[tuple[str, int]]) -> dict: Returns the final inventory of books. ``` # Input * A list `transactions` where each item is a tuple containing a book title (string) and the quantity (integer) sold (negative value) or restocked (positive value). # Output * A dictionary representing the final stock of each book title. The keys are book titles, and the values are the total quantity of books available. # Constraints * All book titles are non-empty strings. * The quantity of each transaction is an integer (positive for restocking or negative for selling). * No initial stock is given. Assume starting stock for all books is zero before the transactions. # Example ```python >>> manage_inventory([(\\"Harry Potter\\", 10), (\\"The Hobbit\\", 5), (\\"Harry Potter\\", -3), (\\"The Hobbit\\", 2), (\\"The Alchemist\\", 7), (\\"Harry Potter\\", -2), (\\"The Alchemist\\", -1)]) {\'Harry Potter\': 5, \'The Hobbit\': 7, \'The Alchemist\': 6} >>> manage_inventory([(\\"Inferno\\", 8), (\\"To Kill a Mockingbird\\", 3), (\\"Inferno\\", -2), (\\"To Kill a Mockingbird\\", -1), (\\"1984\\", 6), (\\"Inferno\\", -6), (\\"1984\\", 2), (\\"Inferno\\", 5)]) {\'Inferno\': 5, \'To Kill a Mockingbird\': 2, \'1984\': 8} ``` # Scenario A bookstore needs to keep track of its inventory based on a series of transactions that include sales and restocking of books. You are tasked with writing a function that processes these transactions to determine the final inventory of each book. # Performance Requirements Your solution should efficiently handle up to 1,000 transactions efficiently, assuming each book title and transaction is processed in constant time.","solution":"def manage_inventory(transactions: list[tuple[str, int]]) -> dict: Returns the final inventory of books. inventory = {} for book, change in transactions: if book in inventory: inventory[book] += change else: inventory[book] = change return inventory"},{"question":"# Problem Statement You are tasked with implementing an algorithm that generates all possible combinations of `k` elements from a given list of integers. The order of elements in the combinations does not matter, and each combination should be unique. # Function Specifications **Function Name**: `generate_combinations` **Input**: - A list of integers `arr` (0 <= len(arr) <= 10) - An integer `k` (0 <= k <= len(arr)) **Output**: A list of tuples, each representing a combination of `k` elements from the input list `arr`. # Constraints - The input list `arr` will contain integers and may include both positive and negative values. - The length of `arr` will not exceed 10, and `0 <= k <= len(arr)`. # Performance Requirements - The time complexity should align with the expected O(C(n, k)) for generating combinations. - Your solution should handle edge cases effectively, like when `k` is 0 or `k` is equal to the length of `arr`. # Examples ```python >>> generate_combinations([], 0) [()] >>> generate_combinations([1], 1) [(1,)] >>> generate_combinations([1, 2], 1) [(1,), (2,)] >>> generate_combinations([1, 2, 3], 2) [(1, 2), (1, 3), (2, 3)] ``` # Notes - Do not use built-in combination functions such as `itertools.combinations`. - Focus on writing clean, readable, and efficient code that adheres to the principles of combination generation.","solution":"def generate_combinations(arr, k): Generates all possible combinations of `k` elements from the list `arr`. def backtrack(start, path): if len(path) == k: result.append(tuple(path)) return for i in range(start, len(arr)): path.append(arr[i]) backtrack(i + 1, path) path.pop() result = [] backtrack(0, []) return result"},{"question":"# Data Clustering with K-Means Algorithm Context You are required to implement a K-Means clustering algorithm to group a given set of data points into `k` clusters. This task will help assess your understanding of unsupervised learning, distance metrics, and algorithmic implementation. Task 1. **Implement K-Means Clustering**: - Write a function to initialize `k` centroids randomly from the input data. - Implement the K-Means clustering algorithm: - Assign each data point to the nearest centroid. - Recompute the centroids as the mean of all points assigned to each centroid. - Repeat the assignment and recomputation steps until the centroids do not change significantly or a maximum number of iterations is reached. 2. **Calculate Distances**: - Use the Euclidean distance metric for computing distances between data points and centroids. Expected Function Implementation 1. **Initialize Centroids**: ```python def initialize_centroids(data: np.ndarray, k: int) -> np.ndarray: # Your code here to randomly select k data points as initial centroids ``` 2. **K-Means Algorithm**: ```python def k_means(data: np.ndarray, k: int, max_iters: int = 100) -> (np.ndarray, np.ndarray): # Your code here to implement the K-Means clustering algorithm # Return the final centroids and data point assignments ``` 3. **Distance Calculation**: ```python def euclidean_distance(a: np.ndarray, b: np.ndarray) -> float: # Your code here to compute the Euclidean distance between two points ``` Input and Output **Input**: - Data points as a 2D NumPy array (shape: `n_samples x n_features`) - Number of clusters `k` (integer) - Maximum number of iterations (integer, optional, default is 100) **Output**: - Centroids after clustering as a 2D NumPy array (shape: `k x n_features`) - Cluster assignments for each data point as a 1D NumPy array (length: `n_samples`) Constraints - Input data should be a valid 2D NumPy array. - Number of clusters `k` should be a positive integer and less than or equal to the number of data points. - The maximum number of iterations should be a positive integer. Scenario Implement the required functions, then apply the K-Means algorithm on some example data. Verify the implementation by checking that the algorithm correctly groups the data points into clusters and the centroids are computed as expected.","solution":"import numpy as np def initialize_centroids(data: np.ndarray, k: int) -> np.ndarray: Randomly selects k data points from the input data as initial centroids. indices = np.random.choice(data.shape[0], k, replace=False) return data[indices] def euclidean_distance(a: np.ndarray, b: np.ndarray) -> float: Computes the Euclidean distance between two points a and b. return np.sqrt(np.sum((a - b) ** 2)) def k_means(data: np.ndarray, k: int, max_iters: int = 100) -> (np.ndarray, np.ndarray): Performs K-Means clustering algorithm. Parameters: data (np.ndarray): The input data points (n_samples x n_features). k (int): The number of clusters. max_iters (int): The maximum number of iterations. Returns: centroids (np.ndarray): The final centroids (k x n_features). labels (np.ndarray): The cluster assignments for each data point (n_samples). centroids = initialize_centroids(data, k) for _ in range(max_iters): # Assign each data point to the nearest centroid labels = np.array([np.argmin([euclidean_distance(x, centroid) for centroid in centroids]) for x in data]) # Compute new centroids new_centroids = np.array([data[labels == i].mean(axis=0) for i in range(k)]) # Check for convergence (i.e., if centroids do not change) if np.all(centroids == new_centroids): break centroids = new_centroids return centroids, labels"},{"question":"# Matrix Rotation You are given a two-dimensional matrix of integers and a function to rotate it 90 degrees clockwise. The task is to create a function that accomplishes this and verifies if the rotation is valid. Objective Create a function `rotate_matrix(matrix: List[List[int]]) -> List[List[int]]` that: 1. Rotates the given matrix 90 degrees clockwise. 2. Ensures that the input matrix remains intact after rotation. 3. Verifies that the rotated matrix dimensions are correct and every element is repositioned as expected. Your task is to: - Implement the `rotate_matrix` function. - Ensure proper handling of edge cases such as empty matrices or matrices with only one row or one column. - Verify the integrity of the input matrix post-rotation. - Return the correctly rotated matrix. # Function Signature ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: pass ``` Input - `matrix`: A list of lists of integers representing the original matrix. Each sub-list represents a row of the matrix. Output - A list of lists of integers representing the rotated matrix. Example ```python # Example matrix: # 1 2 3 # 4 5 6 # 7 8 9 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] # Rotated matrix should be: # 7 4 1 # 8 5 2 # 9 6 3 print(rotate_matrix(matrix)) ``` # Constraints - Ensure the function handles all valid input matrices, including non-square matrices. - Ensure the integrity of the original input matrix remains unchanged after rotation.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates the given matrix 90 degrees clockwise. Args: matrix: A list of lists of integers representing the original matrix. Returns: A list of lists of integers representing the rotated matrix. if not matrix or not matrix[0]: # In case of an empty matrix return [] rows, cols = len(matrix), len(matrix[0]) rotated_matrix = [[0] * rows for _ in range(cols)] for r in range(rows): for c in range(cols): rotated_matrix[c][rows - 1 - r] = matrix[r][c] return rotated_matrix"},{"question":"# Merge k Sorted Arrays Challenge **Context:** You are given `k` sorted arrays. Your task is to merge these arrays into a single sorted array. This problem tests your ability to effectively use data structures and algorithms for efficient merging of multiple sorted sequences. **Problem Statement:** Implement a function `merge_k_sorted_arrays(arrays)` that receives: 1. A list of `k` sorted arrays, each of which is sorted in ascending order. Your function should output a single sorted array that contains all the elements from the `k` sorted arrays. **Function Signature:** ```python def merge_k_sorted_arrays(arrays: List[List[int]]) -> List[int]: pass ``` **Input:** - `arrays`: A list of `k` sorted arrays. Each array is sorted individually in ascending order. **Output:** - A single sorted array containing all the elements from the `k` sorted arrays. **Constraints:** - The total number of elements across all arrays is at most 10,000. - The elements within each array are integers ranging from -10^5 to 10^5. **Example:** ```python # Example input arrays = [ [1, 4, 5], [1, 3, 4], [2, 6], ] # Example output [1, 1, 2, 3, 4, 4, 5, 6] ``` **Notes:** - You should aim to achieve an efficient solution with respect to both time and space. - Consider utilizing a min-heap to facilitate the merging process. - Handle edge cases, such as arrays with different lengths and empty arrays, appropriately.","solution":"from heapq import heappush, heappop from typing import List def merge_k_sorted_arrays(arrays: List[List[int]]) -> List[int]: Merges k sorted arrays into a single sorted array. min_heap = [] result = [] # Push the first element from each array onto the heap along with the array index and element index for i, array in enumerate(arrays): if array: # Ensure array is not empty heappush(min_heap, (array[0], i, 0)) while min_heap: val, array_idx, element_idx = heappop(min_heap) result.append(val) next_element_idx = element_idx + 1 if next_element_idx < len(arrays[array_idx]): heappush(min_heap, (arrays[array_idx][next_element_idx], array_idx, next_element_idx)) return result"},{"question":"# Coding Assessment Question **Title**: Implement a Custom Sorting Algorithm for a List of Students **Objective**: To assess the student\'s ability to implement custom sorting using comparator functions and their understanding of sorting algorithms and data handling in Python. Problem Statement: You are required to implement a sorting functionality for a list of student records. Each student is represented by a `Student` class, which contains the student\'s name, age, and GPA. The goal is to sort the students based on multiple criteria: primarily by GPA (in descending order), then by age (in ascending order), and finally by name (in alphabetical order). To complete this task, you will need to: 1. Define the `Student` class with attributes for name, age, and GPA. 2. Implement a comparator function to be used for sorting. 3. Use the comparator function to sort a list of students according to the specified criteria. Function Signature ```python class Student: ... def custom_sort(students: List[Student]) -> List[Student]: ... ``` Input - A list of `Student` objects, each initialized with a name (string), age (integer), and GPA (float). Output - A list of `Student` objects sorted primarily by GPA (highest first), then by age (youngest first), and finally by name (alphabetically). Constraints - All GPA values will be in the range 0.0 to 4.0. - All age values will be positive integers. - The name will be a non-empty string. Examples ```python # Example 1: Typical case students = [ Student(name=\\"Alice\\", age=22, GPA=3.8), Student(name=\\"Bob\\", age=20, GPA=3.9), Student(name=\\"Charlie\\", age=22, GPA=3.8) ] sorted_students = custom_sort(students) assert [(student.name, student.age, student.GPA) for student in sorted_students] == [ (\\"Bob\\", 20, 3.9), (\\"Alice\\", 22, 3.8), (\\"Charlie\\", 22, 3.8) ] # Example 2: Edge case with same GPA and age students = [ Student(name=\\"Eve\\", age=21, GPA=3.5), Student(name=\\"David\\", age=21, GPA=3.5) ] sorted_students = custom_sort(students) assert [(student.name, student.age, student.GPA) for student in sorted_students] == [ (\\"David\\", 21, 3.5), (\\"Eve\\", 21, 3.5) ] ``` **Notes** - Your implementation should be efficient and handle edge cases gracefully. - Apply principles of clean coding and proper use of data structures in Python. - Ensure the comparator function is properly defined to handle the multiple criteria for sorting. By solving this task, the student should demonstrate a firm grasp of sorting algorithms, custom comparators, and handling complex sorting requirements in Python.","solution":"from typing import List class Student: def __init__(self, name: str, age: int, GPA: float): self.name = name self.age = age self.GPA = GPA def custom_sort(students: List[Student]) -> List[Student]: return sorted(students, key=lambda student: (-student.GPA, student.age, student.name))"},{"question":"# Question: Rotate Image 90 Degrees Clockwise Given an `n x n` 2D matrix, rotate the image by 90 degrees (clockwise). # Function Signature ```python def rotate_image(matrix: list[list[int]]) -> None: ``` # Input * **matrix**: A list of n lists, each containing n integers. Constraints: `1 <= n <= 20`, `-1000 <= matrix[i][j] <= 1000`. # Output * Rotates the input matrix in-place and returns `None`. # Constraints * Optimize the solution such that it uses O(1) additional space aside from the input `matrix`. # Example ```python >>> mat = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] >>> rotate_image(mat) >>> mat [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] >>> mat = [ [ 5, 1, 9, 11], [ 2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ] >>> rotate_image(mat) >>> mat [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ] ``` # Explanation For Example 1: * Original Matrix: ``` 1 2 3 4 5 6 7 8 9 ``` * Rotated Matrix: ``` 7 4 1 8 5 2 9 6 3 ``` For Example 2: * Original Matrix: ``` 5 1 9 11 2 4 8 10 13 3 6 7 15 14 12 16 ``` * Rotated Matrix: ``` 15 13 2 5 14 3 4 1 12 6 8 9 16 7 10 11 ``` # Additional Requirements * Ensure the function modifies the input matrix in-place. * Write at least three additional test cases to handle varying sizes and edge conditions of input matrices. # Notes Consider edge cases such as the smallest possible matrix (1x1) and matrices with negative numbers. Optimize your solution to minimize the number of operations.","solution":"def rotate_image(matrix: list[list[int]]) -> None: Rotates the image represented by the n x n matrix by 90 degrees clockwise in place. n = len(matrix) # First, transpose the matrix for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Then, reverse each row for i in range(n): matrix[i].reverse()"},{"question":"# Problem Statement Write a function `matrix_diagonal_sum` that calculates the sum of the diagonal elements in a given square matrix. The function should consider both the primary and secondary diagonals and ensure that any elements that overlap are only counted once. # Requirements * The function should raise a ValueError with the message \\"Input must be a square matrix\\" if the input is not a square matrix. * The function must not mutate the input matrix. * The function should handle edge cases where the matrix dimensions are minimal (e.g., 1x1 matrix). # Input * A 2D list of integers `matrix` representing an n x n square matrix. # Output * An integer representing the sum of the diagonal elements. # Function Signature ```python def matrix_diagonal_sum(matrix: list[list[int]]) -> int: pass ``` # Example ```python >>> matrix_diagonal_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) 25 # (1 + 5 + 9) + (3 + 5 + 7) - 5 (center element counted twice) >>> matrix_diagonal_sum([[7]]) 7 >>> matrix_diagonal_sum([[2, 9], [3, 5]]) 19 # (2 + 5) + (9 + 5) - 5 (center element counted twice) >>> matrix_diagonal_sum([[1, 2, 3], [4, 5, 6]]) Traceback (most recent call last): ... ValueError: Input must be a square matrix ``` # Constraints * The matrix can have at most dimensions of 10^3 x 10^3. * Each element in the matrix is an integer between -10^6 and 10^6 inclusive.","solution":"def matrix_diagonal_sum(matrix: list[list[int]]) -> int: Calculates the sum of the diagonal elements in a given square matrix, considering both primary and secondary diagonals and ensuring that any elements that overlap are only counted once. Parameters: matrix (list[list[int]]): The n x n square matrix. Returns: int: The sum of the diagonal elements. Raises: ValueError: If the input is not a square matrix. n = len(matrix) for row in matrix: if len(row) != n: raise ValueError(\\"Input must be a square matrix\\") diagonal_sum = 0 for i in range(n): diagonal_sum += matrix[i][i] # Primary diagonal diagonal_sum += matrix[i][n - 1 - i] # Secondary diagonal # If the matrix has an odd size, subtract the middle element as it was counted twice if n % 2 == 1: diagonal_sum -= matrix[n // 2][n // 2] return diagonal_sum"},{"question":"# Context: You are developing a simplified version of a stock price prediction system using a linear regression model. The objective is to predict the future prices of a given stock based on its historical prices. # Task: 1. **Implement Linear Regression**: - Implement the linear regression model from scratch, including functions for fitting the model (training) and making predictions. - Use gradient descent as the optimization algorithm to minimize the mean squared error (MSE). 2. **Data Standardization**: - Implement a function to standardize the training data (zero mean and unit variance). # Requirements: 1. **Linear Regression Implementation**: - **Fit Function**: This function should take the training data and update the model\'s parameters using gradient descent. - **Predict Function**: This function should take new input data and return the predicted values based on the fitted model. - The gradient descent algorithm should update the weights iteratively to minimize the MSE. 2. **Data Standardization**: - The standardized feature (x) is calculated as: [ x\' = frac{x - mu}{sigma} ] where (mu) is the mean and (sigma) is the standard deviation of the training data. # Implementation: - Implement the `LinearRegression` class with methods for fitting the model (`fit`), making predictions (`predict`), and standardizing data (`standardize`). - Use a simple linear data structure (e.g., numpy arrays) for the input features and target values. # Input & Output: - **Input**: - Training data: historical stock prices as a 2D numpy array where each row represents a different time point and each column represents a feature (e.g., price at different intervals). - Target values: the stock price at the next time point as a 1D numpy array. - Model parameters: learning rate, number of iterations, and convergence threshold. - **Output**: - Trained linear regression model with minimal MSE. - Predictions for new input data. # Constraints: - Assume the input data is clean and there are no missing values or outliers. - The system should be efficient and capable of handling large datasets. Below is the initial structure of the code where you need to add the specified features: ```python import numpy as np class LinearRegression: def __init__(self, learning_rate=0.01, iterations=1000, tolerance=1e-6): self.learning_rate = learning_rate self.iterations = iterations self.tolerance = tolerance self.weights = None self.bias = None def standardize(self, X): self.mean = np.mean(X, axis=0) self.std = np.std(X, axis=0) return (X - self.mean) / self.std def fit(self, X, y): X = self.standardize(X) n_samples, n_features = X.shape self.weights = np.zeros(n_features) self.bias = 0 for _ in range(self.iterations): y_predicted = self.predict(X) dw = (1 / n_samples) * np.dot(X.T, (y_predicted - y)) db = (1 / n_samples) * np.sum(y_predicted - y) self.weights -= self.learning_rate * dw self.bias -= self.learning_rate * db if np.linalg.norm(dw) < self.tolerance and np.abs(db) < self.tolerance: break def predict(self, X): X = (X - self.mean) / self.std # Apply standardization to input data based on training data return np.dot(X, self.weights) + self.bias def example(): rng = np.random.default_rng() X = rng.normal(size=(100, 3)) # 100 samples, 3 features y = 3 * X[:, 0] + 2 * X[:, 1] + X[:, 2] + rng.normal(size=100) # Linear relationship + noise model = LinearRegression(learning_rate=0.01, iterations=1000, tolerance=1e-6) model.fit(X, y) X_new = rng.normal(size=(10, 3)) # New data for prediction predictions = model.predict(X_new) print(predictions) if __name__ == \\"__main__\\": example() ``` **Notes**: - Ensure the `LinearRegression` class implements gradient descent to minimize the Mean Squared Error (MSE). - Verify that the data is standardized correctly both for training and new data predictions.","solution":"import numpy as np class LinearRegression: def __init__(self, learning_rate=0.01, iterations=1000, tolerance=1e-6): self.learning_rate = learning_rate self.iterations = iterations self.tolerance = tolerance self.weights = None self.bias = None self.mean = None self.std = None def standardize(self, X): Standardizes the training data (zero mean and unit variance). self.mean = np.mean(X, axis=0) self.std = np.std(X, axis=0) return (X - self.mean) / self.std def fit(self, X, y): Trains the linear regression model using the training data. X = self.standardize(X) n_samples, n_features = X.shape self.weights = np.zeros(n_features) self.bias = 0 for _ in range(self.iterations): y_predicted = self.predict(X) dw = (1 / n_samples) * np.dot(X.T, (y_predicted - y)) db = (1 / n_samples) * np.sum(y_predicted - y) self.weights -= self.learning_rate * dw self.bias -= self.learning_rate * db if np.linalg.norm(dw) < self.tolerance and np.abs(db) < self.tolerance: break def predict(self, X): Predicts target values using the trained linear regression model. X = (X - self.mean) / self.std # Standardize input data based on training data return np.dot(X, self.weights) + self.bias def example(): rng = np.random.default_rng() X = rng.normal(size=(100, 3)) # 100 samples, 3 features y = 3 * X[:, 0] + 2 * X[:, 1] + X[:, 2] + rng.normal(size=100) # Linear relationship + noise model = LinearRegression(learning_rate=0.01, iterations=1000, tolerance=1e-6) model.fit(X, y) X_new = rng.normal(size=(10, 3)) # New data for prediction predictions = model.predict(X_new) print(predictions) if __name__ == \\"__main__\\": example()"},{"question":"# Coding Assessment Question Context: You have been tasked with solving a problem involving a custom encoding and decoding mechanism for strings. The mechanism requires specific transformations to encode a string and reverse transformations to decode it back to the original string. This problem will test your ability to manipulate strings and work with character transformations. Task: 1. Implement a function `encode_string(input_str: str) -> str` that follows these encoding rules: - Each character in the string should be replaced by the character that is found by moving two positions forward in the English alphabet. For example, \'a\' becomes \'c\', \'b\' becomes \'d\', ..., \'y\' becomes \'a\', \'z\' becomes \'b\'. - Maintain case sensitivity during the transformation (i.e., \'A\' should become \'C\', and \'Z\' should become \'B\'). 2. Implement a function `decode_string(encoded_str: str) -> str` that reverses the encoding process described above to retrieve the original string. Constraints: * The input string and the encoded string will only contain alphabetic characters (`a-z` and `A-Z`). * The length of the input string can be up to 1,000 characters. Example Input and Output: ```python >>> encode_string(\\"AbcXyz\\") \\"CdeZab\\" >>> decode_string(\\"CdeZab\\") \\"AbcXyz\\" ``` Notes: * You need to consider both lower and uppercase characters and how they wrap around at the end of the alphabet. * Ensure your solution is efficient and clearly structured. * Test your implementation with edge cases, such as strings containing characters at the start and end of the alphabet.","solution":"def encode_string(input_str: str) -> str: Encodes a given string by shifting each character two positions forward in the alphabet. encoded_str = [] for char in input_str: if \'a\' <= char <= \'z\': encoded_str.append(chr(((ord(char) - ord(\'a\') + 2) % 26) + ord(\'a\'))) elif \'A\' <= char <= \'Z\': encoded_str.append(chr(((ord(char) - ord(\'A\') + 2) % 26) + ord(\'A\'))) return \'\'.join(encoded_str) def decode_string(encoded_str: str) -> str: Decodes a given string by shifting each character two positions backward in the alphabet. decoded_str = [] for char in encoded_str: if \'a\' <= char <= \'z\': decoded_str.append(chr(((ord(char) - ord(\'a\') - 2) % 26) + ord(\'a\'))) elif \'A\' <= char <= \'Z\': decoded_str.append(chr(((ord(char) - ord(\'A\') - 2) % 26) + ord(\'A\'))) return \'\'.join(decoded_str)"},{"question":"# Consecutive Subarray Sum Problem Context Arrays and subarrays are fundamental structures in programming, often utilized in a variety of algorithms. Finding a subarray with a given sum is a common task with broad applications in fields like data analysis and optimization. For this challenge, you need to determine whether there exists a subarray within a given array that sums to a target value. Task Write a Python function `find_subarray_with_sum(arr: List[int], target: int) -> bool` that checks if there exists a contiguous subarray within the array `arr` that sums to the integer `target`. Input * A list of integers `arr` (1 ≤ len(arr) ≤ 10^6, -10^4 ≤ arr[i] ≤ 10^4) * An integer `target` (-10^9 ≤ target ≤ 10^9) Output * A boolean value `True` if there exists at least one contiguous subarray within `arr` whose sum is equal to `target`, otherwise `False`. Constraints * Your function should be optimized to handle large datasets efficiently. * Consider both positive and negative numbers in the array, as well as edge cases like an empty subarray. # Example ```python >>> find_subarray_with_sum([1, 2, 3, 4, 5], 9) True >>> find_subarray_with_sum([1, 2, 3, 4, 5], 20) False >>> find_subarray_with_sum([-1, -2, 3, 0, 2], 1) True ``` Notes To achieve optimal performance, consider using a sliding window or prefix sum technique, which can help maintain a linear time complexity when searching for a subarray with the target sum.","solution":"from typing import List def find_subarray_with_sum(arr: List[int], target: int) -> bool: Determines if there exists a contiguous subarray that sums to the target value. :param arr: List of integers. :param target: Integer target sum. :return: True if there exists at least one contiguous subarray whose sum is equal to target, otherwise, False. current_sum = 0 cumulative_sum_set = set() for num in arr: current_sum += num if current_sum == target: return True if (current_sum - target) in cumulative_sum_set: return True cumulative_sum_set.add(current_sum) return False"},{"question":"# Decimal to Binary Conversion Write a function that converts a given non-negative integer to its binary representation in the form of a string. The function should be able to handle integers ranging from 0 to 1000, inclusive. The binary representation should exclude any leading zeros except for the special case where the integer is 0, in which case the output should be \\"0\\". **Function Signature**: ```python def decimal_to_binary(n: int) -> str: ``` Input/Output Specification: - **Input**: An integer `n` within the range `[0, 1000]`. - **Output**: A string representing the binary form of the input integer. Constraints/Key Points: - Ensure there are no leading zeros in the binary output except for the integer zero. - The function should handle edge cases such as the smallest and largest numbers gracefully. Example: ```python assert decimal_to_binary(0) == \\"0\\" assert decimal_to_binary(5) == \\"101\\" assert decimal_to_binary(255) == \\"11111111\\" assert decimal_to_binary(1024) == \\"10000000000\\" ``` **Scenario/Context**: Imagine working in a low-level system where binary representations are necessary for certain operations. You need a reliable way to convert standard decimal numbers to binary format, ensuring there are no unnecessary leading zeros. This function will be used to facilitate various tasks like memory address calculations, binary file manipulations, and other low-level programming needs.","solution":"def decimal_to_binary(n: int) -> str: Converts a non-negative integer to its binary string representation. if n == 0: return \\"0\\" return bin(n)[2:]"},{"question":"# Dijkstra’s Algorithm for Shortest Path Problem **Scenario/Context:** You are working on a navigation app that requires finding the shortest path between two points on a map. You will implement Dijkstra’s algorithm to achieve this, ensuring the function can handle arbitrary graph structures and validates input correctly. **Task:** Implement Dijkstra’s algorithm to find the shortest path from a specified start node to a target node in a weighted graph. The function should validate the input graph and return the shortest path and the corresponding distance. **Function Signature:** ```python def dijkstra( graph: dict, start_node: str, target_node: str ) -> dict: pass ``` # Input 1. **graph** (dict): A dictionary where keys are node identifiers (strings) and values are dictionaries of neighboring nodes with edge weights (floats), e.g., `{\\"A\\": {\\"B\\": 1.0, \\"C\\": 4.0}, \\"B\\": {\\"A\\": 1.0, \\"C\\": 2.0}, \\"C\\": {\\"A\\": 4.0, \\"B\\": 2.0}}`. 2. **start_node** (str): The identifier of the start node. 3. **target_node** (str): The identifier of the target node. # Output - A dictionary with two keys: - `path` (list): The shortest path from `start_node` to `target_node` as a list of node identifiers (strings). - `distance` (float): The total distance of the shortest path. # Constraints - The graph contains at least two nodes and is represented as an adjacency list. - All edge weights are non-negative floats. - `start_node` and `target_node` are valid nodes within the graph. - Proper validation for missing or incorrect data. # Performance Requirements - Ensure efficient computation, ideally with O(V^2) complexity or better using a priority queue. # Example ```python graph = { \\"A\\": {\\"B\\": 1.0, \\"C\\": 4.0}, \\"B\\": {\\"A\\": 1.0, \\"C\\": 2.0, \\"D\\": 5.0}, \\"C\\": {\\"A\\": 4.0, \\"B\\": 2.0, \\"D\\": 1.0}, \\"D\\": {\\"B\\": 5.0, \\"C\\": 1.0} } start = \\"A\\" target = \\"D\\" # Expected Output: # {\'path\': [\'A\', \'B\', \'C\', \'D\'], \'distance\': 4.0} print(dijkstra(graph, start, target)) ``` # Validation Implement proper validation checks for the inputs to ensure they meet the following criteria: - `graph` must be a dictionary where each node (key) maps to another dictionary of neighbors and their weights (floats). - `start_node` and `target_node` must be valid node identifiers within the graph. - Edge weights should be non-negative floats. By structuring the implementation and validation comprehensively, the function should confidently handle various scenarios within the constraints, providing reliable shortest path calculations for navigation or related applications.","solution":"import heapq def dijkstra(graph, start_node, target_node): Implement Dijkstra\'s algorithm to find the shortest path from start_node to target_node in a weighted graph. :param graph: dict, adjacency list representation of the graph :param start_node: str, the start node :param target_node: str, the target node :return: dict, with \'path\' (list) and \'distance\' (float) # Input validation if not isinstance(graph, dict): raise ValueError(\\"Graph must be a dictionary\\") if not start_node in graph: raise ValueError(\\"Start node not in graph\\") if not target_node in graph: raise ValueError(\\"Target node not in graph\\") # Priority queue to track the minimum distance to a node priority_queue = [(0, start_node, [])] visited = set() while priority_queue: (current_distance, current_node, path) = heapq.heappop(priority_queue) # If the current node is already visited, skip it if current_node in visited: continue # Mark the current node as visited visited.add(current_node) # Include the current node in the path path = path + [current_node] # If target is reached, return the path and distance if current_node == target_node: return {\'path\': path, \'distance\': current_distance} # Explore the neighbors for neighbor, weight in graph[current_node].items(): if neighbor not in visited: heapq.heappush(priority_queue, (current_distance + weight, neighbor, path)) # If the target node is not reachable, return an error or empty path return {\'path\': [], \'distance\': float(\'inf\')}"},{"question":"# Problem Context Accurate calculations of body mass index (BMI) are pivotal in health assessments and nutritional studies. BMI is an indicator derived from an individual\'s weight and height. You are required to implement a function that computes the BMI and categorizes the health status based on the BMI value. # Problem Statement Write a Python function `calculate_bmi` that computes the body mass index given the weight and height values, and classifies the health status as `Underweight`, `Normal weight`, `Overweight`, or `Obesity` based on the computed BMI. # Function Signature ```python def calculate_bmi(weight: float, height: float) -> str: Compute the Body Mass Index and classify the health status. ``` # Input - `weight` (float): Weight of the individual in kilograms (must be positive). - `height` (float): Height of the individual in meters (must be positive). # Output - A string: One of `Underweight`, `Normal weight`, `Overweight`, or `Obesity`. # Constraints 1. `weight` and `height` must be positive values. If not, raise a `ValueError` with an appropriate message. 2. The classification is based on the BMI value `B`: - `B < 18.5`: The health status is `Underweight`. - `18.5 <= B < 24.9`: The health status is `Normal weight`. - `25 <= B < 29.9`: The health status is `Overweight`. - `B >= 30`: The health status is `Obesity`. # Example ```python assert calculate_bmi(60, 1.75) == \'Normal weight\' assert calculate_bmi(45, 1.6) == \'Underweight\' assert calculate_bmi(90, 1.75) == \'Overweight\' assert calculate_bmi(110, 1.7) == \'Obesity\' ``` # Notes Ensure that the function uses the correct BMI formula and properly validates the input. Include necessary error handling.","solution":"def calculate_bmi(weight: float, height: float) -> str: Computes the Body Mass Index (BMI) and categorizes the health status. Parameters: weight (float): Weight of the individual in kilograms (must be positive). height (float): Height of the individual in meters (must be positive). Returns: str: Health status based on BMI (Underweight, Normal weight, Overweight, Obesity). if weight <= 0: raise ValueError(\\"Weight must be a positive value\\") if height <= 0: raise ValueError(\\"Height must be a positive value\\") # Calculating BMI bmi = weight / (height ** 2) # Classifying the health status based on BMI if bmi < 18.5: return \\"Underweight\\" elif 18.5 <= bmi < 24.9: return \\"Normal weight\\" elif 25 <= bmi < 29.9: return \\"Overweight\\" else: return \\"Obesity\\""},{"question":"# Binary Search Trees - Inorder Successor Objective: Given a Binary Search Tree (BST) and a target node, determine the inorder successor of the target node in the BST. Problem Statement: Write a function `inorder_successor(root: TreeNode, target: TreeNode) -> TreeNode` to find the inorder successor of a given target node in the BST. The inorder successor of a node is the node with the smallest key greater than the target node\'s key. Input: - A reference to the root of a BST `root`. - A reference to the target node `target`. Output: - A reference to the node that is the inorder successor of the target node, or `None` if the target node has no inorder successor. Example: Consider the following BST and target nodes: Example 1: ``` 20 / 8 22 / 4 12 / 10 14 ``` Given target node `target` with value 8: ```python root = TreeNode(20) root.left = TreeNode(8) root.right = TreeNode(22) root.left.left = TreeNode(4) root.left.right = TreeNode(12) root.left.right.left = TreeNode(10) root.left.right.right = TreeNode(14) target = root.left # Node with value 8 inorder_successor(root, target) # Output: Node with value 10 ``` Example 2: Given target node `target` with value 14: ```python target = root.left.right.right # Node with value 14 inorder_successor(root, target) # Output: Node with value 20 ``` Constraints: - Each node in the tree has a unique key. - There is no parent reference in the tree nodes. - The number of nodes in the tree is between 1 and 1000. - The values of the tree nodes are between -10000 and 10000. Definition for a Binary Tree Node: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_successor(root: TreeNode, target: TreeNode) -> TreeNode: successor = None while root: if target.val < root.val: successor = root root = root.left else: root = root.right return successor"},{"question":"Problem Statement Given a list of unique integers `nums` representing position marks on a number line, your task is to determine the length of the longest consecutive elements sequence. # Function Signature ```python def longest_consecutive(nums: List[int]) -> int: ``` # Input * A single list `nums` containing unique integers (between -10^9 and 10^9). # Output * Return an integer representing the length of the longest consecutive elements sequence. # Constraints 1. The length of `nums` is between 0 and 10^5. 2. All elements in `nums` are unique integers within the specified range. # Examples ```python # Example 1 nums = [100, 4, 200, 1, 3, 2] print(longest_consecutive(nums)) # Expected output: 4 (The longest consecutive sequence is [1, 2, 3, 4]) # Example 2 nums = [1, 2, 0, 1] print(longest_consecutive(nums)) # Expected output: 3 (The longest consecutive sequence is [0, 1, 2]) # Example 3 nums = [] print(longest_consecutive(nums)) # Expected output: 0 (No elements to form a sequence) ``` # Explanation: * Identify the longest subsequence where the numbers are consecutive. * Sequence must be contiguous on the number line. * Utilize a set for O(1) average time complexity in lookups to identify sequences efficiently. # Note Handle edge cases like an empty list by returning 0 directly.","solution":"def longest_consecutive(nums): if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums: # Check if it\'s the start of a sequence if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"# Problem Statement You are given a string `s` and a pattern `p`. Your task is to write a function `is_match(s: str, p: str) -> bool` which determines if the string `s` matches the pattern `p`. The pattern `p` may contain characters and special characters: - `.` which matches any single character. - `*` which matches zero or more of the preceding element. The matching should cover the entire input string (not partial). # Expected Input and Output * **Input**: * `s` (str): A non-empty string containing only lowercase English letters. * `p` (str): A non-empty string containing only lowercase English letters and the characters `.` and `*`. * **Output**: * Return `True` if the string matches the pattern, otherwise return `False`. # Constraints * The length of the string `s` will be in the range [1, 1000]. * The length of the pattern `p` will be in the range [1, 1000]. # Example Input & Output *Example 1*: ```python s = \\"aab\\" p = \\"c*a*b\\" is_match(s, p) ``` *Output*: ```python True ``` The pattern `c*a*b` can be interpreted as `c` being ignored (0 occurrences), `a` occurring twice, and `b` occurring once, which matches the string `aab`. *Example 2*: ```python s = \\"mississippi\\" p = \\"mis*is*ip*.\\" is_match(s, p) ``` *Output*: ```python True ``` The pattern `mis*is*ip*.` can be interpreted as `mis` followed by zero or more `s`, then `is` followed by zero or more `s`, followed by `ip` followed by zero or more `p`, and finally any single character. *Example 3*: ```python s = \\"ab\\" p = \\".*\\" is_match(s, p) ``` *Output*: ```python True ``` The pattern `.*` can match any string because `.` matches any single character and `*` allows for zero or more occurrences. # Performance Requirements * The solution should handle the constraint limits efficiently, employing Dynamic Programming or other optimization techniques as necessary to avoid excessive computational overhead. # Scenario for Consideration Consider a scenario where you are developing a sophisticated text editor with advanced search capabilities. One of the features is the ability to use regular expressions to search within a text document. Use the above function to implement the regex matching functionality.","solution":"def is_match(s: str, p: str) -> bool: m, n = len(s), len(p) # dp[i][j] will be True if the first i characters in s match the first j characters in p dp = [[False] * (n + 1) for _ in range(m + 1)] dp[0][0] = True # Both strings are empty # Initialize dp for patterns with \'*\' where they could match an empty string for j in range(2, n + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 2] # Fill up the dp table for i in range(1, m + 1): for j in range(1, n + 1): if p[j - 1] == \'.\' or p[j - 1] == s[i - 1]: dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == \'*\': dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] and (p[j - 2] == s[i - 1] or p[j - 2] == \'.\')) return dp[m][n]"},{"question":"# Prime Number Generation A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. The task is to generate all prime numbers up to a given limit `n`. Given a positive integer `n`, your task is to generate a list of all prime numbers less than or equal to `n`. # Task Write a function `generate_primes` that takes an integer `n` and returns a list of all prime numbers less than or equal to `n`. # Constraints * 2 ≤ n ≤ 10^6. # Input * An integer `n` representing the upper limit. # Output * A list of integers representing all the prime numbers less than or equal to `n`. # Examples ```python >>> generate_primes(10) [2, 3, 5, 7] >>> generate_primes(30) [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] >>> generate_primes(3) [2, 3] >>> generate_primes(1) [] ``` Function Signature ```python def generate_primes(n: int) -> [int]: pass ``` # Performance Requirements Ensure the function is optimized to handle the upper limit efficiently. Use a suitable algorithm like the Sieve of Eratosthenes to generate the primes. Good luck!","solution":"def generate_primes(n: int) -> [int]: Generates a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. :param n: Integer, the upper limit to which primes should be generated. :return: A list of all prime numbers less than or equal to n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start*start, n + 1, start): sieve[i] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"# Problem Statement Given a binary tree, implement a function to determine the average value of the nodes on each level of the tree. Return the results as a list of floating-point numbers. # Function Signature ```python def average_of_levels(root: \'TreeNode\') -> List[float]: This function calculates the average value of the nodes on each level of the tree. Parameters: - root (TreeNode): The root node of the binary tree. Returns: - List[float]: A list of floating-point numbers representing the average value of the nodes on each level. ``` # Input * `root`: The root node of the given binary tree. # Output * List of floating-point numbers where each number is the average value of the nodes at the corresponding level in the tree. # Example ```python # Define the TreeNode class class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right # Create the binary tree # 3 # / # 9 20 # / # 15 7 root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20, TreeNode(15), TreeNode(7)) assert average_of_levels(root) == [3.0, 14.5, 11.0] ``` # Constraints & Limitations * The number of nodes in the tree is in the range `[1, 10^4]`. * The values of the nodes are in the range `[-10^5, 10^5]`. * Each level of the tree will have at least one node.","solution":"from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def average_of_levels(root: Optional[TreeNode]) -> List[float]: if not root: return [] from collections import deque levels = [] queue = deque([root]) while queue: level_sum = 0 level_count = 0 next_queue = deque() while queue: node = queue.popleft() level_sum += node.val level_count += 1 if node.left: next_queue.append(node.left) if node.right: next_queue.append(node.right) levels.append(level_sum / level_count) queue = next_queue return levels"},{"question":"# Question: Implement a Basic SQL Database Engine You are tasked with implementing a simple SQL database engine that supports basic SQL operations such as creating tables, inserting records, and performing simple SELECT queries. Your implementation should handle multiple tables within the database and allow for basic querying with selection and projection. Requirements: 1. **Input**: * SQL commands as strings. 2. **Output**: * The result of the executed SQL command, which could be an acknowledgment message for table creation and record insertion, or a list of tuples containing the records for SELECT queries. 3. **Constraints**: * The table names and column names are case-insensitive. * Supported SQL operations include `CREATE TABLE`, `INSERT INTO`, and `SELECT`. * Each table will have a unique name and a fixed schema upon creation. * `SELECT` queries will only support basic selection without any conditions or JOINs and will return all rows from the specified table. Example: ```python sql_commands = [ \\"CREATE TABLE students (id INT, name TEXT, age INT)\\", \\"INSERT INTO students (id, name, age) VALUES (1, \'Alice\', 21)\\", \\"INSERT INTO students (id, name, age) VALUES (2, \'Bob\', 22)\\", \\"SELECT * FROM students\\" ] assert execute_sql_commands(sql_commands) == [ \\"Table \'students\' created successfully.\\", \\"Record inserted into \'students\'.\\", \\"Record inserted into \'students\'.\\", [(1, \'Alice\', 21), (2, \'Bob\', 22)] ] ``` Steps to Implement: 1. **Parse SQL Commands**: Implement a parsing mechanism to interpret SQL command strings and distinguish between table creation, record insertion, and query retrieval. 2. **Manage Database Schema**: Maintain an internal representation of the database schema, storing table definitions including column names and types. 3. **Handle Table Creation and Insertion**: Implement methods to create new tables and insert records into the corresponding table while ensuring type consistency. 4. **Execute SELECT Queries**: Implement querying capability to retrieve and return records from a specified table formatted as list of tuples. Tips: * Use dictionaries to represent tables and their schema. * Maintain a list of records for each table where each record is also represented as a dictionary. * Implement input validation to ensure correct data types are respected during insertion. * Ensure your implementation is capable of handling multiple SQL commands in a sequence and returns appropriate results for each command.","solution":"from typing import List, Union, Tuple class SimpleSQLDatabase: def __init__(self): self.tables = {} def execute_sql_commands(self, commands: List[str]) -> List[Union[str, List[Tuple]]]: results = [] for command in commands: if command.startswith(\\"CREATE TABLE\\"): results.append(self._create_table(command)) elif command.startswith(\\"INSERT INTO\\"): results.append(self._insert_into_table(command)) elif command.startswith(\\"SELECT\\"): results.append(self._select_from_table(command)) return results def _create_table(self, command: str) -> str: command = command[len(\\"CREATE TABLE \\"):] table_name, columns_str = command.split(\'(\', 1) table_name = table_name.strip().lower() columns_str = columns_str.rstrip(\')\') columns = {} for column_def in columns_str.split(\',\'): col_name, col_type = column_def.strip().split() columns[col_name.lower()] = col_type.upper() self.tables[table_name] = { \'schema\': columns, \'data\': [], } return f\\"Table \'{table_name}\' created successfully.\\" def _insert_into_table(self, command: str) -> str: command = command[len(\\"INSERT INTO \\"):] parts = command.split(\\" VALUES \\") table_name, columns_str = parts[0].strip().rstrip(\')\').split(\'(\') table_name = table_name.strip().lower() columns_str = columns_str.strip().lower() columns = [col.strip() for col in columns_str.split(\',\')] values_str = parts[1].strip().lstrip(\'(\').rstrip(\')\') values = [self._parse_value(val.strip()) for val in values_str.split(\',\')] if len(columns) != len(values): raise ValueError(\\"Number of columns and values do not match\\") record = {column: value for column, value in zip(columns, values)} self.tables[table_name][\'data\'].append(record) return f\\"Record inserted into \'{table_name}\'.\\" def _select_from_table(self, command: str) -> List[Tuple]: command = command[len(\\"SELECT * FROM \\"):].strip().lower() table_name = command.strip() table = self.tables[table_name] data = table[\'data\'] schema = table[\'schema\'].keys() result = [] for record in data: result.append(tuple(record[col] for col in schema)) return result def _parse_value(self, value: str) -> Union[int, float, str]: if value.isdigit(): return int(value) try: return float(value) except ValueError: return value.strip(\\"\'\\").strip(\'\\"\') def execute_sql_commands(commands: List[str]) -> List[Union[str, List[Tuple]]]: database = SimpleSQLDatabase() return database.execute_sql_commands(commands)"},{"question":"# Sort an Almost Sorted Array Problem Statement Given an array of numbers where each element is at most `k` positions away from its target position in a sorted order, implement a function that sorts the array. Function Signature ```python def sort_almost_sorted_array(arr: list[int], k: int) -> list[int]: pass ``` Input - `arr` (list of int): A list of integers. - `k` (int): The maximum distance (number of positions away) an element can be from its target position. Output - Returns a list of integers sorted in non-decreasing order. Constraints - The input array `arr` contains at least 1 and at most 10^5 integers. - Each element in the input array `arr` is at most `k` positions away from its target position in a sorted order. - 1 <= k < len(arr) - Each element in `arr` is between -10^9 and 10^9 inclusive. Example ```python arr = [2, 6, 3, 12, 56, 8] k = 3 expect = [2, 3, 6, 8, 12, 56] assert sort_almost_sorted_array(arr, k) == expect ``` Notes - You may assume that the input and expected results are correctly provided for testing. - Utilize a data structure that allows efficient sorting given the problem constraints (e.g., min-heap). - Performance will be evaluated based on the efficiency of your implementation.","solution":"import heapq def sort_almost_sorted_array(arr: list[int], k: int) -> list[int]: Sorts an array where each element is at most k positions away from its target position. Uses a min-heap to achieve efficient sorting given the constraints. min_heap = [] result = [] # Build the initial min heap with the first k+1 elements for i in range(min(k+1, len(arr))): heapq.heappush(min_heap, arr[i]) # Process the rest of the elements for i in range(k+1, len(arr)): heapq.heappush(min_heap, arr[i]) result.append(heapq.heappop(min_heap)) # Extract the remaining elements from the heap while min_heap: result.append(heapq.heappop(min_heap)) return result"},{"question":"# Task In this task, you need to implement a function `k_means_clustering` to perform k-means clustering on a given set of data points. K-means clustering aims to partition the data points into k clusters where each point belongs to the cluster with the nearest mean, serving as the cluster center. # Requirements: * Implement the `k_means_clustering` function to: - Initialize k cluster centroids randomly from the set of data points. - Assign each data point to the nearest centroid. - Update the centroids by calculating the mean of all data points assigned to each cluster. - Repeat the assignment and update steps until the centroids converge. * Implement the `evaluate_clustering` function to: - Calculate and print the sum of squared distances from each data point to its assigned centroid. # Input Format: - `data_points`: A list of tuples where each tuple represents a data point in a multidimensional space. For example, [(2.3, 4.5), (1.1, 0.2), (4.4, 2.1)]. - `k`: An integer representing the number of clusters. # Output Format: - For `k_means_clustering`, return a dictionary where the keys are the cluster indices (0 to k-1) and the values are lists of data points assigned to each cluster. - For `evaluate_clustering`, print the sum of squared distances from each data point to its assigned centroid. # Example Usage: Given: ```python data_points = [(2.3, 4.5), (1.1, 0.2), (4.4, 2.1), (5.1, 1.9), (3.5, 3.5)] k = 2 ``` After running `k_means_clustering(data_points, k)` function, the output might be: ```python { 0: [(2.3, 4.5), (1.1, 0.2)], 1: [(4.4, 2.1), (5.1, 1.9), (3.5, 3.5)] } ``` After running `evaluate_clustering(data_points, k)` function, the output might be: ```python Sum of squared distances: X ``` Implement the functions `k_means_clustering` and `evaluate_clustering` to ensure your solution works correctly.","solution":"import random import math def initialize_centroids(data_points, k): return random.sample(data_points, k) def assign_clusters(data_points, centroids): clusters = {i: [] for i in range(len(centroids))} for point in data_points: closest_centroid_index = min( range(len(centroids)), key=lambda i: euclidean_distance(point, centroids[i])) clusters[closest_centroid_index].append(point) return clusters def update_centroids(clusters): new_centroids = [] for cluster_points in clusters.values(): new_centroids.append(tuple(map(lambda x: sum(x) / len(x), zip(*cluster_points)))) return new_centroids def euclidean_distance(point1, point2): return math.sqrt(sum((x - y) ** 2 for x, y in zip(point1, point2))) def k_means_clustering(data_points, k): centroids = initialize_centroids(data_points, k) previous_centroids = [] while previous_centroids != centroids: clusters = assign_clusters(data_points, centroids) previous_centroids = centroids centroids = update_centroids(clusters) return clusters def evaluate_clustering(data_points, k): clusters = k_means_clustering(data_points, k) sum_squared_distances = 0 for cluster_index, cluster_points in clusters.items(): centroid = tuple(map(lambda x: sum(x) / len(x), zip(*cluster_points))) for point in cluster_points: sum_squared_distances += euclidean_distance(point, centroid) ** 2 print(f\\"Sum of squared distances: {sum_squared_distances}\\")"},{"question":"# Question: Matrix Pathfinding with Energy Constraints **Context:** In the world of automated robots, an important task is to navigate through grids or matrices while optimizing for certain constraints. One such constraint could be energy usage. Suppose a robot needs to navigate from the top-left corner of a matrix to the bottom-right corner while minimizing its energy consumption. **Problem Statement:** You need to write a function `min_energy_path(matrix: List[List[int]], max_energy: int) -> Union[int, str]` that calculates the minimum energy required for a robot to move from the top-left corner to the bottom-right corner of a matrix. The robot can only move right or down at each step. Each cell in the matrix contains the energy cost for the robot to traverse that cell. **Requirements:** 1. The function should return the minimum energy required if it is within the `max_energy` constraint. 2. If the minimum energy required exceeds `max_energy`, the function should return \\"Energy limit exceeded\\". **Function Signature:** ```python def min_energy_path(matrix: List[List[int]], max_energy: int) -> Union[int, str]: pass ``` **Input:** * `matrix`: A 2D list of integers where each integer represents the energy cost of that cell. * `max_energy`: An integer representing the maximum allowable energy consumption for the path. **Output:** * An integer representing the minimum energy required or a string \\"Energy limit exceeded\\" if it exceeds `max_energy`. **Constraints:** * The matrix will have dimensions m x n where 1 <= m, n <= 100. * Each cell\'s energy cost in the matrix will be a non-negative integer. * `max_energy` will be a non-negative integer. **Examples:** ```python # Example 1: matrix = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] max_energy = 7 # Minimum energy path: 1 -> 3 -> 1 -> 1 -> 1 # Expected output: 7 print(min_energy_path(matrix, max_energy)) # 7 # Example 2: matrix = [ [1, 2, 2], [4, 5, 1], [3, 1, 1] ] max_energy = 6 # Minimum energy path: 1 -> 2 -> 2 -> 1 -> 1 -> 1 # Minimum energy required: 8 which exceeds max_energy # Expected output: \\"Energy limit exceeded\\" print(min_energy_path(matrix, max_energy)) # \\"Energy limit exceeded\\" ``` Ensure that your implementation efficiently calculates the minimum energy path and checks against the `max_energy` constraint.","solution":"from typing import List, Union def min_energy_path(matrix: List[List[int]], max_energy: int) -> Union[int, str]: m, n = len(matrix), len(matrix[0]) dp = [[float(\'inf\')] * n for _ in range(m)] dp[0][0] = matrix[0][0] for i in range(m): for j in range(n): if i > 0: dp[i][j] = min(dp[i][j], dp[i-1][j] + matrix[i][j]) if j > 0: dp[i][j] = min(dp[i][j], dp[i][j-1] + matrix[i][j]) min_energy = dp[m-1][n-1] if min_energy <= max_energy: return min_energy else: return \\"Energy limit exceeded\\""},{"question":"# Question: Implementing a Simple Memory Cache You\'re tasked with designing and implementing a simple memory cache system. The cache will store key-value pairs and support a given capacity. When the capacity is exceeded, the least recently used (LRU) key-value pair should be removed to make space for new entries. The cache should support basic operations such as `get` to retrieve a value associated with a key, and `put` to insert or update a key-value pair. # Task 1. Implement a class `LRUCache` to represent the cache. 2. **Implement** the following methods: - `__init__(self, capacity: int)`: Initialize the cache with a given capacity. - `get(self, key: int) -> int`: Retrieve the value associated with the given key. Return -1 if the key is not found. - `put(self, key: int, value: int) -> None`: Insert or update the key-value pair. If the cache exceeds its capacity, remove the least recently used item before adding the new item. # Requirements 1. The `LRUCache` should maintain the order of key usage. 2. The `get` and `put` methods should run in O(1) average time complexity. # Input: - A list of operations and their corresponding arguments to simulate usage of the cache. # Output: - Outputs generated by the `get` method calls. # Example: ```python cache = LRUCache(2) # Initialize cache with capacity 2 cache.put(1, 1) # cache is {1=1} cache.put(2, 2) # cache is {1=1, 2=2} print(cache.get(1)) # returns 1 and cache is {2=2, 1=1} cache.put(3, 3) # LRU key was 2, evicts key 2, cache is {1=1, 3=3} print(cache.get(2)) # returns -1 (not found) cache.put(4, 4) # LRU key was 1, evicts key 1, cache is {3=3, 4=4} print(cache.get(1)) # returns -1 (not found) print(cache.get(3)) # returns 3 print(cache.get(4)) # returns 4 ``` # Function Signatures: 1. `class LRUCache:` 2. `def __init__(self, capacity: int):` 3. `def get(self, key: int) -> int:` 4. `def put(self, key: int, value: int) -> None:` # Constraints: - 1 ≤ capacity ≤ 10^4 - 0 ≤ key, value ≤ 10^5 - At most 2 * 10^5 calls will be made to `get` and `put`. Implement the cache using data structures that support efficient key insertion, retrieval, and eviction, such as an OrderedDict or a doubly linked list combined with a dictionary for O(1) access and update times.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"# Kth Smallest Element in a Sorted Matrix You are given an `n x n` matrix where each of the rows and columns are sorted in non-decreasing order. Find the kth smallest element in the matrix. Implement the function `kth_smallest(matrix: List[List[int]], k: int) -> int` that returns the kth smallest element in the given matrix using a binary search algorithm. Input: - An integer matrix `matrix` of size `n x n` (1 ≤ n ≤ 300). - An integer `k` (1 ≤ k ≤ n^2), the position of the desired element in the sorted order. Output: - An integer that is the kth smallest element in the matrix. Constraints: - The solution must operate in O(n * log(max-min)) time complexity, where max and min are the largest and smallest elements in the matrix respectively. # Examples: ```python def test_kth_smallest(): assert kth_smallest([[1, 5, 9], [10, 11, 13], [12, 13, 15]], 8) == 13 assert kth_smallest([[1, 2], [1, 3]], 2) == 1 assert kth_smallest([[1]], 1) == 1 print(\\"All tests passed.\\") if __name__ == \\"__main__\\": test_kth_smallest() ``` Explanation of the function\'s logic: 1. **Binary Search Setup**: Initialize the binary search with the smallest and largest elements in the matrix. 2. **Midpoint Calculation**: Compute the middle element of the current search range. 3. **Counting Elements**: Count how many elements in the matrix are less than or equal to the midpoint. 4. **Adjusting Search Range**: Based on the count, adjust the binary search range to hone in on the kth smallest element. 5. **Returning Result**: Once the search range converges, the kth smallest element is found. The function must efficiently handle edge cases such as matrices with only one element and ensure the search algorithm correctly narrows down the result.","solution":"from typing import List def kth_smallest(matrix: List[List[int]], k: int) -> int: def count_less_equal(mid): count, n = 0, len(matrix) row, col = n - 1, 0 while row >= 0 and col < n: if matrix[row][col] <= mid: count += row + 1 col += 1 else: row -= 1 return count n = len(matrix) left, right = matrix[0][0], matrix[-1][-1] while left < right: mid = (left + right) // 2 if count_less_equal(mid) < k: left = mid + 1 else: right = mid return left"},{"question":"# Function Implementation Question **Scenario**: You are designing a software for an e-commerce company. As part of the shipping cost calculations, you need to develop a function that determines the minimal shipping cost based on dynamic price brackets. Each price bracket specifies a range of weights and their corresponding cost. You have to ensure the function can efficiently handle a large number of weight inputs. **Task**: Implement a function `min_shipping_cost` that calculates the minimal shipping cost for a given list of item weights. The function should take a dictionary of weight brackets to their corresponding costs and a list of item weights, and return the total minimal shipping cost. **Function Signature**: ```python def min_shipping_cost(weight_brackets: dict, item_weights: list) -> float: Calculate the minimal shipping cost for a list of item weights. Parameters: weight_brackets (dict): A dictionary where keys are tuples representing weight ranges (inclusive), and values are the corresponding shipping costs. For example: {(0, 1): 5.0, (2, 3): 10.0}. item_weights (list): A list of floats representing the weights of the items to be shipped. Returns: float: The total minimal shipping cost. Example Usage: >>> min_shipping_cost({(0, 1): 5.0, (1, 2): 7.5}, [0.5, 1.5, 2.0]) 20.0 >>> min_shipping_cost({(0, 1): 2.0, (1, 3): 5.0, (3, 5): 8.0}, [1.0, 3.0, 2.5]) 12.0 # Your code here ``` **Constraints**: - The weight brackets are tuples of positive floats where the first element is the lower bound (inclusive) and the second element is the upper bound (inclusive). - The shipping costs associated with each weight bracket are positive floats. - Each item weight is a positive float within the range [0.01, 1000.0]. - The number of elements in `item_weights` list does not exceed 10^5. - The function should execute efficiently within a reasonable time limit and with optimal memory usage, considering large inputs. Ensure your implementation handles different ranges appropriately and considers potential edge cases, such as weights that are right on the boundaries of brackets or weights that do not fit into any provided bracket.","solution":"def min_shipping_cost(weight_brackets, item_weights): Calculate the minimal shipping cost for a list of item weights. Parameters: weight_brackets (dict): A dictionary where keys are tuples representing weight ranges (inclusive), and values are the corresponding shipping costs. For example: {(0, 1): 5.0, (2, 3): 10.0}. item_weights (list): A list of floats representing the weights of the items to be shipped. Returns: float: The total minimal shipping cost. total_cost = 0.0 for weight in item_weights: cost = float(\'inf\') for (lower, upper), bracket_cost in weight_brackets.items(): if lower <= weight <= upper: cost = min(cost, bracket_cost) if cost == float(\'inf\'): raise ValueError(f\\"No available shipping rate for item weight: {weight}\\") total_cost += cost return total_cost"},{"question":"# Unique Substring Concatenation Scenario: You are developing a feature for a text processing tool that requires identifying certain uniqueness patterns within strings. Your task is to write a function to determine the length of the shortest substring that contains all the characters of a given string exactly once and in any order. Task: Implement the function `shortest_unique_concat(s: str) -> int`, which returns the length of the shortest substring that contains all unique characters of the given string `s`. Details: - The string `s` consists of lowercase English letters. - If there are no unique characters in `s`, return 0. Input: 1. **s (str)** - a string of lowercase English letters. Output: - **int** - the length of the shortest substring that includes all unique characters. Examples: ```python # Example 1 s = \\"abac\\" # The unique characters are \'a\', \'b\', \'c\'. # The shortest substring containing all these characters is \\"bac\\" or \\"aba\\". print(shortest_unique_concat(\\"abac\\")) # Output: 3 # Example 2 s = \\"aabb\\" # The unique characters are \'a\', \'b\'. # The shortest substring containing both \'a\' and \'b\' is \\"ab\\" or \\"ba\\". print(shortest_unique_concat(\\"aabb\\")) # Output: 2 # Example 3 s = \\"aaaa\\" # There\'s only one unique character \'a\'. print(shortest_unique_concat(\\"aaaa\\")) # Output: 1 # Example 4 s = \\"\\" # There\'s no character in the string. print(shortest_unique_concat(\\"\\")) # Output: 0 ``` Constraints: - Ensure your solution handles strings with lengths up to 10^5 efficiently. Tips: 1. Use a sliding window technique for efficient substring checks. 2. Keep track of the frequency of characters in the current window to quickly identify when all unique characters are included.","solution":"def shortest_unique_concat(s: str) -> int: from collections import Counter # Get the unique characters of the string unique_chars = set(s) required_chars_count = len(unique_chars) if required_chars_count == 0: return 0 # Set up a dictionary to maintain window character counts window_counts = Counter() l, r = 0, 0 formed = 0 min_length = float(\'inf\') # Expand the window by moving the right pointer while r < len(s): character = s[r] window_counts[character] += 1 if window_counts[character] == 1: # A unique character has been included formed += 1 # Try to contract the window until the point where it ceases to contain all unique characters while l <= r and formed == required_chars_count: character = s[l] # Update the minimum length min_length = min(min_length, r - l + 1) # The current character being removed window_counts[character] -= 1 if window_counts[character] == 0: formed -= 1 # Move the left pointer ahead l += 1 r += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"# Coding Question: Implement a File System Path Normalizer **Scenario**: You are developing a file system utility that needs to normalize file paths. File paths can include various symbols such as `\\"..\\"` to move up one directory and `\\".\\"` to stay in the current directory. Your task is to write a function that will take a file path as input and return the canonical path. **Function Signature**: ```python def normalize_path(path: str) -> str: pass ``` **Expected Input and Output**: * **Input**: - `path` (str): A string representing the file path, consisting of lowercase letters, numbers, `\'/\'`, `\'.\'`, and `\'..\'`. * **Output**: - A string representing the normalized file path. **Example**: ```python >>> path = \\"/home//foo/\\" >>> result = normalize_path(path) >>> print(result) \\"/home/foo\\" >>> path = \\"/a/./b/../../c/\\" >>> result = normalize_path(path) >>> print(result) \\"/c\\" ``` **Constraints**: * The input path will not exceed 3000 characters. * The input path will always start with a `\'/\'`. # Requirements: 1. Split the path by `\'/\'` and process each part. 2. Use a stack to build the normalized path. 3. Ignore `\\".\\"` as it represents the current directory. 4. Use `\\"..\\"` to pop the last directory added to the stack unless the stack is empty. 5. Handle multiple consecutive slashes by treating them as a single slash. 6. Return the joined stack components with slashes to represent the canonical path. # Tips: * Utilize a list as a stack for directory parts. * Be mindful of edge cases such as multiple slashes, and leading and trailing slashes.","solution":"def normalize_path(path: str) -> str: Normalizes a given file path and returns the canonical path. parts = path.split(\'/\') stack = [] for part in parts: if part == \\"\\" or part == \\".\\": continue elif part == \\"..\\": if stack: stack.pop() else: stack.append(part) return \\"/\\" + \\"/\\".join(stack)"},{"question":"# Scenario: You are part of a data analytics team tasked with developing an algorithm to analyze customer purchase patterns. One aspect of this involves writing a function that finds the longest increasing subsequence of purchase amounts. # Task: Write a function named `longest_increasing_subsequence` that takes a list of integers representing purchase amounts and returns the longest subsequence of strictly increasing values. # Function Definition: **longest_increasing_subsequence(purchases: List[int]) -> List[int]** # Input and Output Formats: - **Input**: - `purchases` (List[int]): A list of integers representing customer purchase amounts. - **Output**: - Returns the longest subsequence of strictly increasing purchase amounts as a list of integers. # Constraints: 1. The input list will have at least one and no more than 10,000 integers. 2. Each purchase amount is a positive integer not greater than 1,000,000. 3. If there are multiple subsequences of the same maximum length, return any one of them. # Examples: - **Example 1**: ```python longest_increasing_subsequence([100, 180, 260, 310, 40, 535, 695]) # Output: [100, 180, 260, 310, 535, 695] ``` - **Example 2**: ```python longest_increasing_subsequence([1, 2, 1, 5, 6, 2, 3, 4, 8]) # Output: [1, 2, 5, 6, 8] ``` - **Example 3**: ```python longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]) # Output: [10, 22, 33, 50, 60, 80] ```","solution":"def longest_increasing_subsequence(purchases: list[int]) -> list[int]: if not purchases: return [] n = len(purchases) dp = [1] * n prev_index = [-1] * n # Loop to fill dp array for i in range(1, n): for j in range(i): if purchases[i] > purchases[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev_index[i] = j # Find the index of the maximum value in dp max_index = 0 for i in range(1, n): if dp[i] > dp[max_index]: max_index = i # Reconstruct the longest increasing subsequence lis = [] k = max_index while k != -1: lis.append(purchases[k]) k = prev_index[k] lis.reverse() return lis"},{"question":"# Find First and Last Position of Element in Sorted Array Problem Description You are given a sorted array of integers `nums` and an integer `target`. Your task is to find the starting and ending position of a given target value. If the target is not found in the array, return `[-1, -1]`. Function Signature ```python def search_range(nums: List[int], target: int) -> List[int]: ``` Input Format - `nums`: A list of integers sorted in non-decreasing order, where the values range from `-10^5` to `10^5` and the length `n` ranges from 0 to `10^4`. - `target`: An integer within the same range as the elements of `nums`. Output Format - Return a list of two integers, representing the starting and ending positions of `target` in the array. If `target` does not exist in the array, return `[-1, -1]`. Constraints - The solution should have a time complexity of O(log n) to handle larger input sizes efficiently. - You must handle special cases where the array is empty. Example ```python >>> search_range([5, 7, 7, 8, 8, 10], 8) [3, 4] >>> search_range([5, 7, 7, 8, 8, 10], 6) [-1, -1] >>> search_range([], 0) [-1, -1] >>> search_range([1], 1) [0, 0] ``` Explanation 1. In the first example, the target `8` appears at positions `[3, 4]` in the array `[5, 7, 7, 8, 8, 10]`. 2. The second example shows that the target `6` is not present in the array, thus returning `[-1, -1]`. 3. An empty array should immediately return `[-1, -1]` as there are no elements to search. 4. For a single-element array `[1]` with the target `1`, both the starting and ending positions are `0`.","solution":"from typing import List def search_range(nums: List[int], target: int) -> List[int]: def find_start(nums, target): low, high = 0, len(nums) - 1 while low <= high: mid = (low + high) // 2 if nums[mid] >= target: high = mid - 1 else: low = mid + 1 return low start = find_start(nums, target) if start >= len(nums) or nums[start] != target: return [-1, -1] end = find_start(nums, target + 1) - 1 return [start, end]"},{"question":"# Context: You are working on a project that involves tracking the development of a software by different teams. Each team works on multiple modules, and each module depends on other modules. You need to determine a valid build order for the modules based on their dependencies. # Task: Implement a function `find_build_order(dependencies: List[Tuple[int, int]], num_modules: int) -> List[int]` that returns the build order of modules using Topological Sort. # Specifications: - **Input**: - A list of dependencies where each dependency is represented as a tuple `(x, y)` meaning module (x) must be built before module (y). - An integer `num_modules` representing the total number of modules. - **Output**: A list of integers representing the build order of modules. - **Constraints**: - The modules form a Directed Acyclic Graph (DAG). - `num_modules` will not exceed (10^4). - Module indices range from `0` to (num_modules-1). # Implementation: - **Function**: ```python def find_build_order(dependencies: List[Tuple[int, int]], num_modules: int) -> List[int]: pass ``` - Be sure to account for edge cases such as modules with no dependencies or multiple independent subgraphs. - Ensure your solution is efficient in both time and space. # Example: Input: ```python dependencies = [(0, 1), (0, 2), (1, 3), (2, 3)] num_modules = 4 ``` In this example, the dependencies represent the following precedence: - Module 0 must be built before modules 1 and 2. - Module 1 must be built before module 3. - Module 2 must be built before module 3. Output: ```python [0, 1, 2, 3] ``` or ```python [0, 2, 1, 3] ``` Both outputs are valid topological sorts of the modules.","solution":"from typing import List, Tuple from collections import deque, defaultdict def find_build_order(dependencies: List[Tuple[int, int]], num_modules: int) -> List[int]: # Initialize the graph and indegree tracker graph = defaultdict(list) indegree = [0] * num_modules # Build the graph and update the in-degrees of each node for x, y in dependencies: graph[x].append(y) indegree[y] += 1 # Initialize the queue with all nodes having in-degree of 0 queue = deque([i for i in range(num_modules) if indegree[i] == 0]) build_order = [] # Process the nodes in topological order while queue: node = queue.popleft() build_order.append(node) # Decrease the in-degree of the adjacent nodes for neighbor in graph[node]: indegree[neighbor] -= 1 # If in-degree becomes 0, add it to the queue if indegree[neighbor] == 0: queue.append(neighbor) # Check if the build order has all modules if len(build_order) == num_modules: return build_order # If not, it means there\'s a cycle or disconnected node else: return []"},{"question":"# Coding Assessment Question Context A Fibonacci sequence is a series of numbers in which each number (Fibonacci number) is the sum of the two preceding ones, usually starting with 0 and 1. The sequence begins with 0, 1, 1, 2, 3, 5, 8, and so on. Task Write a function `matrix_fibonacci` that generates an `n x n` matrix where each element `(i, j)` is the Fibonacci number at position `i+j` in the Fibonacci sequence. The position in the Fibonacci sequence starts from `0`. Function Signature ```python def matrix_fibonacci(n: int) -> List[List[int]]: ``` Input - `n` (integer): The size of the matrix. `1 <= n <= 20`. Output - A 2D list (matrix) of size `n x n`, where each element is a Fibonacci number. Example - Input: `n = 3` - Output: `[[0, 1, 1], [1, 2, 3], [1, 3, 5]]` - Explanation: The first few numbers in the Fibonacci sequence are: ``` 0, 1, 1, 2, 3, 5, 8, ... ``` So, the matrix positions filled with Fibonacci numbers are: ``` 0 (F0), 1 (F1), 1 (F2) 1 (F1), 2 (F2), 3 (F3) 1 (F2), 3 (F3), 5 (F4) ``` Constraints - Ensure that the matrix generated is correctly based on the Fibonacci sequence for each position `(i, j)`. Requirements * **Edge Cases**: Handle cases where `n = 1` properly. * **Performance**: The function should run efficiently within the given constraints. Write a robust function that correctly generates the matrix based on the Fibonacci sequence. Ensure thorough testing to cover all edge cases.","solution":"from typing import List def fibonacci(n: int) -> int: Helper function to return the nth Fibonacci number. Uses memoization for efficiency. memo = [0, 1] for i in range(2, n + 1): memo.append(memo[-1] + memo[-2]) return memo[n] def matrix_fibonacci(n: int) -> List[List[int]]: Returns an n x n matrix where each element (i, j) is the Fibonacci number at position i+j in the sequence. # Initialize a list to store the first 2n-1 Fibonacci numbers (since i+j can go from 0 to 2*(n-1)). fibonacci_numbers = [fibonacci(i) for i in range(2 * n - 1)] # Create the matrix and fill it with the corresponding Fibonacci numbers. matrix = [[fibonacci_numbers[i + j] for j in range(n)] for i in range(n)] return matrix"},{"question":"# Problem Statement: You need to assist in a data preprocessing task for a machine learning project. One aspect involves normalizing a given list of numerical values. Normalization in this context means adjusting the values in the list so they fit within a specified range, typically [0,1]. Your task is to implement a function that performs this normalization efficiently. # Function Definition: ```python def normalize_values(values: list[float]) -> list[float]: Normalize the list of values to the range [0,1]. Parameters: - values: A list of float numbers representing the values to normalize. Returns: - A list of float numbers representing the normalized values. ``` # Input and Output: - **Input**: - `values`: A list of float numbers. The length of the list will not exceed 10^5. - **Output**: A list of float numbers, where each value is normalized to the range [0,1]. # Constraints: - If the list is empty, return an empty list. - If all values in the list are the same, return a list of zeros of the same length. - The values in the input list can be positive or negative. # Example: ```python normalize_values([3.0, 5.0, 1.0, 2.0, 4.0]) # Output: [0.5, 1.0, 0.0, 0.25, 0.75] normalize_values([10.0, 10.0, 10.0]) # Output: [0.0, 0.0, 0.0] normalize_values([-5.0, 0.0, 5.0]) # Output: [0.0, 0.5, 1.0] normalize_values([]) # Output: [] ``` # Notes: - The function should use efficient computational techniques suitable for handling large lists. - Make sure to handle edge cases, such as lists with the same repeating values and empty lists. - The normalization formula you need to apply is normalized_value = (value - min_value) / (max_value - min_value). Good luck, and happy coding!","solution":"def normalize_values(values: list[float]) -> list[float]: Normalize the list of values to the range [0,1]. Parameters: - values: A list of float numbers representing the values to normalize. Returns: - A list of float numbers representing the normalized values. if not values: return [] min_value = min(values) max_value = max(values) if min_value == max_value: return [0.0] * len(values) return [(value - min_value) / (max_value - min_value) for value in values]"},{"question":"# Question: Circular Buffer Implementation You need to implement a circular buffer of fixed size to store integers. A circular buffer wraps around when filled, meaning once it reaches its capacity and an additional element is added, it overwrites the oldest element in the buffer. Your implementation should provide methods to add elements to the buffer, retrieve elements, and check the current state of the buffer. **Objectives:** 1. Implement a class `CircularBuffer` with the following methods: - `write(value: int) -> None`: Adds an element to the buffer. If the buffer is full, it should overwrite the oldest element. - `read() -> int`: Retrieves and removes the oldest element from the buffer. If the buffer is empty, it should raise an `IndexError` with a custom message \\"Buffer is empty\\". - `is_full() -> bool`: Returns `True` if the buffer is full, otherwise `False`. - `is_empty() -> bool`: Returns `True` if the buffer is empty, otherwise `False`. 2. Ensure the operations handle both full and empty buffer scenarios as described. **Constraints:** - The buffer should only store integers. - The class should be initialized with a fixed capacity (size of the buffer), which is a positive integer. **Function Signatures:** - `class CircularBuffer:` - `def __init__(self, capacity: int) -> None:` - `def write(self, value: int) -> None:` - `def read(self) -> int:` - `def is_full(self) -> bool:` - `def is_empty(self) -> bool:` **Example Usage:** ```python buffer = CircularBuffer(3) buffer.write(1) buffer.write(2) buffer.write(3) print(buffer.is_full()) # Output: True buffer.write(4) # Overwrites 1 print(buffer.read()) # Output: 2 print(buffer.read()) # Output: 3 print(buffer.read()) # Output: 4 print(buffer.is_empty()) # Output: True buffer.write(5) print(buffer.read()) # Output: 5 print(buffer.read()) # Raises IndexError: \\"Buffer is empty\\" ``` Your task is to implement the `CircularBuffer` class ensuring it behaves as described and efficiently manages the circular buffer operations within the specified constraints.","solution":"class CircularBuffer: def __init__(self, capacity: int) -> None: self.capacity = capacity self.buffer = [None] * capacity self.head = 0 self.tail = 0 self.size = 0 def write(self, value: int) -> None: if self.is_full(): self.head = (self.head + 1) % self.capacity # Overwrite oldest element else: self.size += 1 self.buffer[self.tail] = value self.tail = (self.tail + 1) % self.capacity def read(self) -> int: if self.is_empty(): raise IndexError(\\"Buffer is empty\\") value = self.buffer[self.head] self.buffer[self.head] = None # Optional: Clear the read slot self.head = (self.head + 1) % self.capacity self.size -= 1 return value def is_full(self) -> bool: return self.size == self.capacity def is_empty(self) -> bool: return self.size == 0"},{"question":"# Subsequence Maximum Sum Given a list of integers, write a Python function named `max_subsequence_sum(nums: List[int]) -> int` that finds the maximum sum of any contiguous subsequence within the given list of integers (including the empty subsequence which has a sum of 0). The list may contain both positive and negative integers. # Input - `nums` (List[int]): A list of integers where the length of the list is 1 <= len(nums) <= 10^5 and the integers can range from -10^4 to 10^4. # Output - Returns an integer representing the maximum sum of any contiguous subsequence within the given list of integers. # Constraints - The function should efficiently handle large lists. - Consider edge cases where all integers might be negative or the largest subsequence could be the sum of all elements. # Example ```python assert max_subsequence_sum([1, 2, -1, 2, -3, 2, -5]) == 4 # (1 + 2 + -1 + 2) assert max_subsequence_sum([-2, -3, 4, -1, -2, 1, 5, -3]) == 7 # (4 + -1 + -2 + 1 + 5) assert max_subsequence_sum([1, 2, 3, 4, 5]) == 15 # (1 + 2 + 3 + 4 + 5) assert max_subsequence_sum([-1, -2, -3, -4, -5]) == 0 # (empty subsequence) ``` # Notes - A common approach to solve this problem involves using Kadane’s algorithm. - Make sure your implementation is optimized for performance with a time complexity of O(n).","solution":"from typing import List def max_subsequence_sum(nums: List[int]) -> int: Finds the maximum sum of any contiguous subsequence within the given list of integers. Implements Kadane\'s algorithm. max_ending_here = 0 max_so_far = 0 for num in nums: max_ending_here = max(0, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"# Subarray Sum Finder You are tasked with creating a function to determine the sum of elements in any given subarray of an input array. Specifically, you should be able to find the sum efficiently given the start and end indices of the subarray. Background A subarray is a contiguous portion of an array. Finding the sum of such subarrays is a fundamental task that can be useful in various applications, such as signal processing, statistical analysis, and financial calculations. Requirements Implement a function `subarray_sum(arr: list, start: int, end: int) -> int` that: * Takes three arguments: - `arr`: a list of integers. - `start`: an integer representing the starting index of the subarray (inclusive). - `end`: an integer representing the ending index of the subarray (inclusive). * Returns the sum of elements in the subarray from `start` to `end`. * Should handle edge cases, such as empty arrays, and out-of-bound indices. * Should not use any imports except `pprint` and `time` for testing purposes. # Function Signature ```python def subarray_sum(arr: list, start: int, end: int) -> int: pass ``` # Input - `arr`: A list of integers (1 <= len(arr) <= 1000, -1000 <= arr[i] <= 1000) - `start`: An integer (0 <= start < len(arr)) - `end`: An integer (start <= end < len(arr)) # Output - An integer representing the sum of elements in the subarray from `start` to `end`. # Constraints - The function should efficiently calculate the sum even for large arrays. Example You should include validation through docstring tests: ```python def subarray_sum(arr: list, start: int, end: int) -> int: Returns the sum of elements in subarray from start to end index. >>> subarray_sum([1, 2, 3, 4, 5], 1, 3) 9 >>> subarray_sum([-1, -2, -3, -4], 0, 3) -10 >>> subarray_sum([5], 0, 0) 5 >>> subarray_sum([1, 2, 3], 1, 1) 2 >>> subarray_sum([1, 2, 3], 2, 2) 3 >>> subarray_sum([], 0, 0) Traceback (most recent call last): ... IndexError: list index out of range >>> subarray_sum([1, 2, 3], -1, 1) Traceback (most recent call last): ... IndexError: list index out of range >>> subarray_sum([1, 2, 3], 0, 3) Traceback (most recent call last): ... IndexError: list index out of range if not arr: return 0 if start < 0 or end >= len(arr) or start > end: raise IndexError(\\"Index out of range\\") return sum(arr[start:end+1]) ``` # Testing In addition to the examples provided, ensure to test large datasets to verify the performance. Use arrays of up to 1000 elements to confirm that your function works efficiently for larger inputs.","solution":"def subarray_sum(arr: list, start: int, end: int) -> int: Returns the sum of elements in subarray from start to end index. >>> subarray_sum([1, 2, 3, 4, 5], 1, 3) 9 >>> subarray_sum([-1, -2, -3, -4], 0, 3) -10 >>> subarray_sum([5], 0, 0) 5 >>> subarray_sum([1, 2, 3], 1, 1) 2 >>> subarray_sum([1, 2, 3], 2, 2) 3 >>> subarray_sum([], 0, 0) Traceback (most recent call last): ... IndexError: list index out of range >>> subarray_sum([1, 2, 3], -1, 1) Traceback (most recent call last): ... IndexError: list index out of range >>> subarray_sum([1, 2, 3], 0, 3) Traceback (most recent call last): ... IndexError: list index out of range if not arr: raise IndexError(\\"Array is empty\\") if start < 0 or end >= len(arr) or start > end: raise IndexError(\\"Index out of range\\") return sum(arr[start:end+1])"},{"question":"# Problem Description You are given an implementation of a linked list that supports basic operations like insertion, deletion, and search. Your task is to enhance this implementation to include additional functionalities that improve its utility and performance. Specifically, you are required to: 1. Implement a method to reverse the linked list in place. 2. Implement a method to detect if the linked list contains a cycle. 3. Add a method to merge two sorted linked lists into one sorted list. # Function Specifications 1. **reverse()**: Reverses the linked list in place. - **Input**: None - **Output**: None - **Behavior**: The linked list should be reversed such that the head now points to what was previously the last node. 2. **has_cycle() -> bool**: Detects if there is a cycle in the linked list. - **Input**: None - **Output**: A boolean indicating whether the linked list contains a cycle. - **Behavior**: Return `True` if the linked list contains a cycle, otherwise return `False`. 3. **merge_with(other: \'LinkedList\') -> \'LinkedList\'**: Merges two sorted linked lists. - **Input**: Another linked list `other` which is also sorted. - **Output**: A new merged linked list that is sorted. - **Behavior**: Merge the elements of the two sorted linked lists into one new sorted linked list. # Constraints - The elements of the linked list are comparable and can be compared using standard comparison operators. - The method `merge_with` should not alter the original linked lists; both lists should remain unchanged after the operation. - The linked lists can contain varying lengths of nodes, including empty lists. # Example ```python class LinkedListNode: def __init__(self, value): self.value = value self.next = None class LinkedList: def __init__(self): # Initialize your linked list here def insert(self, value): # Insert a value into the linked list def delete(self, value): # Delete the first occurrence of a value in the list def search(self, value) -> bool: # Search for a value in the linked list def reverse(self): # Reverse the linked list in place def has_cycle(self) -> bool: # Check if the linked list has a cycle def merge_with(self, other: \'LinkedList\') -> \'LinkedList\': # Merge this linked list with another sorted linked list # Example Usage # Create linked lists list1 = LinkedList() list1.insert(1) list1.insert(3) list1.insert(5) list2 = LinkedList() list2.insert(2) list2.insert(4) list2.insert(6) # Reverse list list1.reverse() # Check for cycle print(list1.has_cycle()) # False # Merge two sorted lists merged_list = list1.merge_with(list2) # The merged list should be sorted: 1 -> 2 -> 3 -> 4 -> 5 -> 6 ``` # Requirements - Ensure your implementation is optimized for time and space efficiency. - Handle edge cases such as empty linked lists, single-element lists, and lists with cycles (for cycle detection).","solution":"class LinkedListNode: def __init__(self, value): self.value = value self.next = None class LinkedList: def __init__(self): self.head = None def insert(self, value): new_node = LinkedListNode(value) if not self.head: self.head = new_node else: current = self.head while current.next: current = current.next current.next = new_node def delete(self, value): if not self.head: return if self.head.value == value: self.head = self.head.next return current = self.head while current.next and current.next.value != value: current = current.next if current.next: current.next = current.next.next def search(self, value) -> bool: current = self.head while current: if current.value == value: return True current = current.next return False def reverse(self): prev = None current = self.head while current: next_node = current.next current.next = prev prev = current current = next_node self.head = prev def has_cycle(self) -> bool: slow = fast = self.head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False def merge_with(self, other: \'LinkedList\') -> \'LinkedList\': dummy = LinkedListNode(0) tail = dummy l1 = self.head l2 = other.head while l1 and l2: if l1.value < l2.value: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next tail.next = l1 if l1 else l2 merged_list = LinkedList() merged_list.head = dummy.next return merged_list"},{"question":"# Problem Statement You are tasked with writing a function that simulates a simple vending machine. The machine accepts coins of denominations: 1 cent, 5 cents, 10 cents, and 25 cents, and returns the number of ways to reach a target amount in cents. This calculation should be done using dynamic programming to ensure efficiency. # Function Signature ```python def vending_machine_combinations(target_cents: int) -> int: ``` # Input - `target_cents` (int): The target amount in cents to be achieved using the allowed denominations. # Output - Returns an integer representing the number of different ways to make the target amount using the available coin denominations. # Constraints - The input `target_cents` will be a non-negative integer. - The values for denominations are fixed at 1, 5, 10, and 25 cents. # Examples ```python >>> vending_machine_combinations(0) 1 >>> vending_machine_combinations(5) 2 >>> vending_machine_combinations(10) 4 >>> vending_machine_combinations(25) 13 >>> vending_machine_combinations(30) 18 ``` # Explanation 1. For `target_cents = 0`, there is exactly one way to achieve zero cents: by using no coins. 2. For `target_cents = 5`, the ways are: [1x5], [5x1]. Hence, there are 2 ways. 3. For `target_cents = 10`, the ways include: [10], [5+5], [5+1+1+1+1+1], [1x10]. Thus, 4 ways. 4. For `target_cents = 25`, you have to consider various combinations including higher denominations along with lower ones. # Additional Notes - The solution must use dynamic programming to ensure it handles larger values of `target_cents` efficiently. - Think of the problem as placing coins in bins where each bin can hold a value represented by one of the coins, and the order of placement matters.","solution":"def vending_machine_combinations(target_cents: int) -> int: # Define the coin denominations coins = [1, 5, 10, 25] # Initialize a list to hold the number of combinations for each amount up to target_cents dp = [0] * (target_cents + 1) # Base case: There is one way to make 0 cents (with no coins) dp[0] = 1 # Iterate over each coin for coin in coins: for x in range(coin, target_cents + 1): dp[x] += dp[x - coin] return dp[target_cents]"},{"question":"# Context You are a software engineer tasked with designing a spell checker module for a text editing application. This module needs to efficiently store a large dictionary of valid words and provide real-time suggestions for potential typos. # Problem Statement Implement a `SpellChecker` class that efficiently manages a dictionary of words and provides suggestion functionality based on the edit distance (Levenshtein distance) between words. # Function Requirements 1. **Initializer**: `__init__(self, words: list[str] | None = None) -> None` - Initialize the spell checker with a list of words. If no list is provided, start with an empty dictionary. 2. **Add Word**: `add_word(self, word: str) -> None` - Add a single word to the dictionary. - Time Complexity: O(1) 3. **Remove Word**: `remove_word(self, word: str) -> None` - Remove a single word from the dictionary if it exists. - Time Complexity: O(1) 4. **Check Word**: `check_word(self, word: str) -> bool` - Check if a word exists in the dictionary. - Time Complexity: O(1) 5. **Suggest Words**: `suggest(self, word: str, max_distance: int) -> list[str]` - Suggest a list of dictionary words that are within a specified Levenshtein distance from a given word. - Time Complexity: O(n*k) where n is the number of words in the dictionary and k is the maximum length of the words. # Input Format - Inputs differ for each function and are described above where applicable. # Output Format - Outputs should match the function descriptions mentioned above. # Constraints - Words contain only lowercase English letters. - Each word has a maximum length of 100. - The dictionary can contain up to 100,000 words. # Example ```python # Initializing the spell checker with a list of words checker = SpellChecker([\\"apple\\", \\"banana\\", \\"grape\\", \\"orange\\", \\"melon\\"]) # Adding a new word to the dictionary checker.add_word(\\"watermelon\\") # Removing a word from the dictionary checker.remove_word(\\"melon\\") # Checking if a word exists in the dictionary print(checker.check_word(\\"banana\\")) # Outputs True print(checker.check_word(\\"melon\\")) # Outputs False # Suggesting words within a specified edit distance print(checker.suggest(\\"appl\\", 1)) # Outputs [\'apple\'] print(checker.suggest(\\"banan\\", 2)) # Outputs [\'banana\'] print(checker.suggest(\\"grapefruit\\", 3)) # Outputs [\'grape\'] ``` --- # Implementation Notes - Ensure that the `SpellChecker` can efficiently manage the dictionary using appropriate data structures, such as hash sets for constant-time checks. - The `suggest` method should calculate the Levenshtein distance between the input word and each word in the dictionary.","solution":"class SpellChecker: def __init__(self, words=None): self.dictionary = set(words) if words is not None else set() def add_word(self, word): self.dictionary.add(word) def remove_word(self, word): self.dictionary.discard(word) def check_word(self, word): return word in self.dictionary def suggest(self, word, max_distance): return [w for w in self.dictionary if self.levenshtein_distance(word, w) <= max_distance] @staticmethod def levenshtein_distance(s1, s2): if len(s1) < len(s2): return SpellChecker.levenshtein_distance(s2, s1) if len(s2) == 0: return len(s1) previous_row = range(len(s2) + 1) for i, c1 in enumerate(s1): current_row = [i + 1] for j, c2 in enumerate(s2): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1]"},{"question":"# Problem Statement You are tasked with implementing the `largest_contiguous_subarray_sum` function. This function needs to find the sum of the largest contiguous subarray within a given list of integers using dynamic programming, following Kadane\'s Algorithm. # Function Signature ```python def largest_contiguous_subarray_sum(arr: list[int]) -> int: pass ``` # Input * **arr**: A list of integers (can be both positive and negative). # Output * Return the sum of the largest contiguous subarray. # Constraints * 1 <= len(arr) <= 10^6 * -10^4 <= arr[i] <= 10^4 # Requirements * Implement the `largest_contiguous_subarray_sum` function using Kadane\'s Algorithm to ensure an optimal solution. # Example Usage ```python arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] print(largest_contiguous_subarray_sum(arr)) # Expected output: 6 # Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum = 6. arr = [1] print(largest_contiguous_subarray_sum(arr)) # Expected output: 1 # Explanation: The contiguous subarray [1] has the largest sum = 1. arr = [-1, -2, -3, -4] print(largest_contiguous_subarray_sum(arr)) # Expected output: -1 # Explanation: The contiguous subarray with single element [-1] has the largest sum = -1. ``` # Additional Information Consider edge cases like: * Single-element array * Array with all negative numbers * Array with a mixture of positive and negative numbers * Very large arrays Your solution should handle these cases efficiently within the given constraints.","solution":"def largest_contiguous_subarray_sum(arr: list[int]) -> int: Returns the sum of the largest contiguous subarray using Kadane\'s Algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"# Coding Assessment Question Context: Bob is a software developer working on optimizing a warehouse management system. He needs a function to quickly determine whether all the product IDs in a given list are unique so that new IDs can be efficiently generated without conflicts. # Objective: Write a Python function `are_all_ids_unique(product_ids: List[str]) -> bool` that checks if all the product IDs in the given list are unique. # Input and Output Formats: - **Input**: A list of strings `product_ids` where each string represents a product ID. - **Output**: A boolean value `True` if all the product IDs in the list are unique, otherwise `False`. # Constraints: - Each product ID consists of alphanumeric characters only. - The function should handle both large and small lists efficiently. # Example: ```python def are_all_ids_unique(product_ids: List[str]) -> bool: pass # Example usage print(are_all_ids_unique([\\"ID001\\", \\"ID002\\", \\"ID003\\"])) # True, all IDs are unique print(are_all_ids_unique([\\"ID001\\", \\"ID001\\", \\"ID003\\"])) # False, \\"ID001\\" is repeated print(are_all_ids_unique([])) # True, no IDs to compare/empty list print(are_all_ids_unique([\\"id123\\", \\"ID123\\"])) # True, considering case sensitivity is inherent in string comparison ``` # Criteria: - Function should be efficient with O(n) time complexity. - Consider edge cases such as an empty list or a list with a single product ID. # Additional Notes: - Utilize appropriate data structures for optimal performance in checking for duplicate IDs. - Provide handling for edge cases, including an empty list or lists with only one product ID.","solution":"from typing import List def are_all_ids_unique(product_ids: List[str]) -> bool: return len(product_ids) == len(set(product_ids))"},{"question":"# Coding Assessment Question **Scenario**: You are required to enhance the `Node` class and implement a Priority Queue using a binary heap. This entails supporting the addition of elements with priority, retrieving/peeking the element with the highest priority, and extracting/removing the element with the highest priority. Moreover, ensure the handling of edge cases, such as an empty queue. **Requirements**: 1. **Node Representation**: Extend the `Node` class to include a priority attribute. 2. **Heap Implementation**: Implement a binary heap where elements are ordered by priority. 3. **Priority Queue Operations**: - Insert an element with a given priority. - Retrieve (without removing) the element with the highest priority. - Extract (and remove) the element with the highest priority. 4. **Edge Case Handling**: Ensure edge cases, such as attempts to peek or extract from an empty queue, are handled appropriately. **Function Implementation**: 1. **add_node(value: int, priority: int) -> None** - Parameters: - `value`: The value of the node. - `priority`: The priority of the node. - Adds a node with the given `value` and `priority` to the priority queue. 2. **peek() -> int** - Retrieves the value of the node with the highest priority without removing it. - Raises an exception if the queue is empty. 3. **extract() -> int** - Retrieves and removes the node with the highest priority from the priority queue. - Raises an exception if the queue is empty. **Input**: ```python pq = PriorityQueue() pq.add_node(10, 3) pq.add_node(15, 4) pq.add_node(5, 1) pq.add_node(20, 2) ``` **Output**: ```python # Peek the node with the highest priority: 15 # Extract the node with the highest priority: 15 # Peek the next highest priority node after extraction: 10 ``` **Constraints**: - The priority queue can contain up to 1000 nodes. - Node values and priorities are integers. - The binary heap must provide O(log n) complexity for insertion and extraction operations. Ensure you validate your solution with various test cases and edge conditions to verify its robustness and correctness.","solution":"class Node: def __init__(self, value, priority): self.value = value self.priority = priority class PriorityQueue: def __init__(self): self.heap = [] def add_node(self, value, priority): new_node = Node(value, priority) self.heap.append(new_node) self._sift_up(len(self.heap) - 1) def peek(self): if not self.heap: raise Exception(\\"Priority queue is empty\\") return self.heap[0].value def extract(self): if not self.heap: raise Exception(\\"Priority queue is empty\\") if len(self.heap) == 1: return self.heap.pop().value root_value = self.heap[0].value self.heap[0] = self.heap.pop() self._sift_down(0) return root_value def _sift_up(self, index): parent_index = (index - 1) // 2 if index > 0 and self.heap[index].priority > self.heap[parent_index].priority: self.heap[index], self.heap[parent_index] = self.heap[parent_index], self.heap[index] self._sift_up(parent_index) def _sift_down(self, index): left_child_index = 2 * index + 1 right_child_index = 2 * index + 2 largest = index if (left_child_index < len(self.heap) and self.heap[left_child_index].priority > self.heap[largest].priority): largest = left_child_index if (right_child_index < len(self.heap) and self.heap[right_child_index].priority > self.heap[largest].priority): largest = right_child_index if largest != index: self.heap[index], self.heap[largest] = self.heap[largest], self.heap[index] self._sift_down(largest)"},{"question":"# Problem Statement You are given a directed graph represented by an adjacency list. Your task is to identify all strongly connected components (SCCs) in the graph. A strongly connected component is a maximal subgraph where every vertex is reachable from every other vertex in the subgraph. # Function Signature ```python def find_sccs(adj_list: Dict[int, List[int]]) -> List[List[int]]: Determine all the strongly connected components in a directed graph. Parameters: adj_list (Dict[int, List[int]]): The adjacency list representation of the graph. Returns: List[List[int]]: A list containing all SCCs, each represented as a list of vertex ids. ``` # Input 1. **adj_list (Dict[int, List[int]>)**: A dictionary where key-value pairs represent vertices and their list of adjacent vertices. # Output * **return (List[List[int]>)**: A list of strongly connected components, each represented as a list of vertex ids. # Constraints * `1 <= number of vertices <= 10^5` * Each vertex\'s adjacent list will not contain duplicate entries. * Vertex ids are guaranteed to be unique integers. * Graph may contain self-loops and multiple edges between two vertices. # Example ```python adj_list = { 1: [2], 2: [3, 4], 3: [1], 4: [5], 5: [6], 6: [4] } assert find_sccs(adj_list) == [[1, 2, 3], [4, 5, 6]] ``` # Notes You can implement Kosaraju\'s or Tarjan\'s algorithm to find strongly connected components efficiently. Optimize for both time and space complexity while handling large input sizes.","solution":"from typing import List, Dict def find_sccs(adj_list: Dict[int, List[int]]) -> List[List[int]]: Determine all the strongly connected components in a directed graph using Tarjan\'s algorithm. Parameters: adj_list (Dict[int, List[int]]): The adjacency list representation of the graph. Returns: List[List[int]]: A list containing all SCCs, each represented as a list of vertex ids. index = 0 stack = [] indices = {} lowlink = {} on_stack = {} sccs = [] def strongconnect(node): nonlocal index # Set the depth index for node to the smallest unused index indices[node] = lowlink[node] = index index += 1 stack.append(node) on_stack[node] = True # Consider successors of node for neighbor in adj_list[node]: if neighbor not in indices: # Successor neighbor has not yet been visited; recur on it strongconnect(neighbor) lowlink[node] = min(lowlink[node], lowlink[neighbor]) elif on_stack[neighbor]: # Successor neighbor is in the stack and hence in the current SCC lowlink[node] = min(lowlink[node], indices[neighbor]) # If node is a root node, pop the stack and generate an SCC if lowlink[node] == indices[node]: scc = [] while True: w = stack.pop() on_stack[w] = False scc.append(w) if w == node: break sccs.append(scc) for node in adj_list: if node not in indices: strongconnect(node) return sccs"},{"question":"Problem Statement You are given a snippet that computes the great-circle distance between two points on the Earth\'s surface, using the Haversine formula. Your task is to implement a new function based on the given details. # Requirements Implement the function `great_circle_distance()` that calculates the shortest distance over the earth\'s surface between two points using their latitude and longitude. # Formula Given Haversine formula to calculate the distance: a = sin^2left(frac{Deltavarphi}{2}right) + cos(varphi_1) cdot cos(varphi_2) cdot sin^2left(frac{Deltalambda}{2}right) c = 2 cdot text{atan2}left(sqrt{a}, sqrt{1-a}right) d = R cdot c Where: - (varphi_1), (varphi_2): latitudes of point 1 and point 2 in radians - (lambda_1), (lambda_2): longitudes of point 1 and point 2 in radians - (Deltavarphi = varphi_2 - varphi_1) - (Deltalambda = lambda_2 - lambda_1) - (R): Earth\'s radius (mean radius = 6,371 km) - (d): Distance between the two points # Function Signature ```python def great_circle_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float | ValueError: pass ``` # Input Parameters - `lat1`: Latitude of the first point in degrees - `lon1`: Longitude of the first point in degrees - `lat2`: Latitude of the second point in degrees - `lon2`: Longitude of the second point in degrees # Output Return the distance between the two points in kilometers. If the input coordinates are not valid (i.e., latitudes not in the range of -90 to 90 or longitudes not in the range of -180 to 180), return `ValueError` with the message \\"Input Error: Invalid latitude or longitude.\\" # Example ```python >>> great_circle_distance(36.12, -86.67, 33.94, -118.40) 2887.259950607111 >>> great_circle_distance(-91, 86.67, 33.94, -118.40) ValueError(\'Input Error: Invalid latitude or longitude.\') >>> great_circle_distance(36.12, -200, 33.94, -118.40) ValueError(\'Input Error: Invalid latitude or longitude.\') >>> great_circle_distance(36.12, -86.67, 33.94) Traceback (most recent call last): ... TypeError: great_circle_distance() missing 1 required positional argument: \'lon2\' ``` # Constraints - The function should validate if the latitude values are in the range [-90, 90] and longitude values are in the range [-180, 180]. - Handle edge cases where inputs are outside the valid ranges appropriately by raising a `ValueError`. - Raise a `TypeError` if the number of provided arguments is incorrect.","solution":"import math def great_circle_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float: Calculates the shortest distance over the earth\'s surface between two points using their latitude and longitude. :param lat1: Latitude of the first point in degrees. :param lon1: Longitude of the first point in degrees. :param lat2: Latitude of the second point in degrees. :param lon2: Longitude of the second point in degrees. :return: Distance between the two points in kilometers. :raises ValueError: If any input coordinates are invalid. # Validate the input latitude and longitude if not (-90 <= lat1 <= 90) or not (-90 <= lat2 <= 90): raise ValueError(\'Input Error: Invalid latitude.\') if not (-180 <= lon1 <= 180) or not (-180 <= lon2 <= 180): raise ValueError(\'Input Error: Invalid longitude.\') # Convert latitude and longitude from degrees to radians lat1_rad = math.radians(lat1) lon1_rad = math.radians(lon1) lat2_rad = math.radians(lat2) lon2_rad = math.radians(lon2) # Haversine formula d_lat = lat2_rad - lat1_rad d_lon = lon2_rad - lon1_rad a = math.sin(d_lat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(d_lon / 2)**2 c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a)) # Earth\'s radius in kilometers R = 6371.0 # Distance in kilometers distance = R * c return distance"},{"question":"# Spreadsheet Column Summarizer You have been provided with a textual representation of a spreadsheet. Each cell contains a number and rows are separated by newline characters, while cells in each row are separated by commas. Your task is to implement the following functionalities: 1. **Sum Columns**: Implement a `sum_columns` function to compute the sum for each column and return the results as an ordered list of sums. 2. **Sum Rows**: Implement a `sum_rows` function to compute the sum for each row and return the results as an ordered list of sums. 3. **Sum Cells**: Implement a `sum_cells` function to compute the total sum of all numbers in the spreadsheet. # Input and Output Formats: **Function 1: Sum Columns** * Input: A string representation of the spreadsheet (e.g., \\"1,2,3n4,5,6n7,8,9\\"). * Output: A list of integers representing the sum of each column (e.g., [12, 15, 18]). **Function 2: Sum Rows** * Input: A string representation of the spreadsheet (e.g., \\"1,2,3n4,5,6n7,8,9\\"). * Output: A list of integers representing the sum of each row (e.g., [6, 15, 24]). **Function 3: Sum Cells** * Input: A string representation of the spreadsheet (e.g., \\"1,2,3n4,5,6n7,8,9\\"). * Output: An integer representing the total sum of all cells (e.g., 45). # Constraints: * The input string will contain only numbers and commas representing valid spreadsheet data. * The maximum number of rows and columns will be 1000 each. * The spreadsheet will be a well-formed rectangle (same number of columns in every row). # Implementation: Implement the following Python functions: ```python def sum_columns(spreadsheet: str) -> list: # Implement the function as described def sum_rows(spreadsheet: str) -> list: # Implement the function as described def sum_cells(spreadsheet: str) -> int: # Implement the function as described ``` # Example: ```python assert sum_columns(\\"1,2,3n4,5,6n7,8,9\\") == [12, 15, 18] assert sum_rows(\\"1,2,3n4,5,6n7,8,9\\") == [6, 15, 24] assert sum_cells(\\"1,2,3n4,5,6n7,8,9\\") == 45 ```","solution":"def sum_columns(spreadsheet: str) -> list: Compute the sum of each column in the spreadsheet. rows = spreadsheet.split(\\"n\\") n_cols = len(rows[0].split(\\",\\")) col_sums = [0] * n_cols for row in rows: cells = row.split(\\",\\") for i in range(n_cols): col_sums[i] += int(cells[i]) return col_sums def sum_rows(spreadsheet: str) -> list: Compute the sum of each row in the spreadsheet. rows = spreadsheet.split(\\"n\\") row_sums = [] for row in rows: cells = row.split(\\",\\") row_sum = sum(int(cell) for cell in cells) row_sums.append(row_sum) return row_sums def sum_cells(spreadsheet: str) -> int: Compute the total sum of all cells in the spreadsheet. rows = spreadsheet.split(\\"n\\") total_sum = 0 for row in rows: cells = row.split(\\",\\") total_sum += sum(int(cell) for cell in cells) return total_sum"},{"question":"# Bubble Sort Implementation and Analysis You are required to implement the **Bubble Sort** algorithm and analyze its performance on given input arrays. Write a function that sorts an array of integers using Bubble Sort, and another function that counts the number of swaps performed during the sorting process. Function Signature ```python def bubble_sort(arr: list) -> list: pass def count_bubble_sort_swaps(arr: list) -> int: pass ``` Input - `arr`: A list of integers, where 1 ≤ len(arr) ≤ 1000 and -10000 ≤ arr[i] ≤ 10000. Output - `bubble_sort(arr)`: Returns the sorted array of integers. - `count_bubble_sort_swaps(arr)`: Returns the number of swaps performed to sort the array. Constraints - Your implementation should use the Bubble Sort algorithm. Examples ```python # Example 1 arr = [4, 3, 1, 2] # Expected Output for bubble_sort(arr): [1, 2, 3, 4] # Expected Output for count_bubble_sort_swaps(arr): 5 # Example 2 arr = [5, 1, 4, 2, 8] # Expected Output for bubble_sort(arr): [1, 2, 4, 5, 8] # Expected Output for count_bubble_sort_swaps(arr): 4 ``` Note 1. Your implementation should handle different sizes of arrays efficiently. 2. Ensure that edge cases such as already sorted arrays or arrays with identical elements are handled correctly. 3. You can implement additional helper functions if needed.","solution":"def bubble_sort(arr: list) -> list: Sorts a list of integers using the Bubble Sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): # Last i elements are already in place if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def count_bubble_sort_swaps(arr: list) -> int: Counts the number of swaps performed during Bubble Sort. n = len(arr) swap_count = 0 for i in range(n): for j in range(0, n-i-1): # Last i elements are already in place if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swap_count += 1 return swap_count"},{"question":"# Maximum Subarray Sum using Divide and Conquer The Maximum Subarray Sum problem involves finding the maximum sum of a contiguous subarray within a given one-dimensional numeric array. Your task is to implement this using the Divide and Conquer approach in Python. Instructions 1. **Define a `max_crossing_sum` function:** - This function takes the array, a low index, a mid index, and a high index. - It computes the maximum sum of the subarray that crosses the mid point. 2. **Define a `max_subarray_sum` function:** - This function should be a recursive function that divides the array into subarrays. - It finds the maximum sum of the left subarray, right subarray, and the crossing subarray. - Returns the maximum of these three sums. 3. **Define the primary `maximum_subarray_sum` function:** - Takes a list of integers as input. - Calls the `max_subarray_sum` function to compute the result. - Handles edge cases such as empty arrays. Function Signature ```python def maximum_subarray_sum(arr: list[int]) -> int: ``` Examples - `maximum_subarray_sum([]) -> 0` - `maximum_subarray_sum([1]) -> 1` - `maximum_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) -> 6` - `maximum_subarray_sum([-1, -2, -3, -4]) -> -1` - `maximum_subarray_sum([5, 4, -1, 7, 8]) -> 23` Constraints - The input list may contain up to 10^5 elements. - The list may contain both positive and negative integers. Performance Expectations - Aim for time complexity of O(n log n). **Edge Cases**: - Handle empty lists appropriately. - Ensure the implementation can deal with all negative numbers in the input. - Address performance considerations for large datasets appropriately.","solution":"def max_crossing_sum(arr, low, mid, high): # Include elements on left of mid sum_left = float(\'-inf\') temp_sum = 0 for i in range(mid, low - 1, -1): temp_sum += arr[i] if temp_sum > sum_left: sum_left = temp_sum # Include elements on right of mid sum_right = float(\'-inf\') temp_sum = 0 for i in range(mid + 1, high + 1): temp_sum += arr[i] if temp_sum > sum_right: sum_right = temp_sum # Return sum of elements on left and right of mid return sum_left + sum_right def max_subarray_sum(arr, low, high): # Base Case: Only one element if low == high: return arr[low] # Find middle point mid = (low + high) // 2 # Return maximum of following three possible cases: # a) Maximum subarray sum in left half # b) Maximum subarray sum in right half # c) Maximum subarray sum such that the subarray crosses the midpoint return max(max_subarray_sum(arr, low, mid), max_subarray_sum(arr, mid + 1, high), max_crossing_sum(arr, low, mid, high)) def maximum_subarray_sum(arr): if not arr: return 0 return max_subarray_sum(arr, 0, len(arr) - 1)"},{"question":"Question: Implement Linked List Operations You are required to implement several fundamental operations for a singly linked list without using any external libraries or built-in list methods. This will assess your understanding of data structures, pointers, and basic algorithmic techniques. Ensure you handle edge cases such as empty lists or single-element lists appropriately. # Operations to Implement 1. **Insertion**: - Insert a new element at a specified position. ```python class Node: def __init__(self, data=None): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def insert(self, data: int, position: int) -> None: pass ``` 2. **Deletion**: - Delete an element at a specified position. ```python class LinkedList: def delete(self, position: int) -> None: pass ``` 3. **Traversal**: - Traverse the linked list and return its elements as a list. ```python class LinkedList: def traverse(self) -> List[int]: pass ``` 4. **Search**: - Search for an element and return its position if found, otherwise return -1. ```python class LinkedList: def search(self, data: int) -> int: pass ``` 5. **Reverse**: - Reverse the linked list. ```python class LinkedList: def reverse(self) -> None: pass ``` # Input & Output Specifications: - The linked list elements and search data will be integers. - Raise `IndexError` if the position for insertion or deletion is invalid. - Raise `TypeError` if non-integer values are passed where integers are expected. # Example Usage: ```python ll = LinkedList() ll.insert(1, 0) ll.insert(2, 1) ll.insert(3, 2) ll.insert(4, 1) print(ll.traverse()) # Output: [1, 4, 2, 3] ll.delete(1) print(ll.traverse()) # Output: [1, 2, 3] print(ll.search(2)) # Output: 1 print(ll.search(5)) # Output: -1 ll.reverse() print(ll.traverse()) # Output: [3, 2, 1] ``` # Constraints: - Assume a maximum of 1000 operations can be performed on the linked list. - Positions for insertion or deletion will be zero-based and within the current length of the list. # Performance Requirements: Ensure the operations handle the maximum limits efficiently, particularly keeping the time complexity in mind for search and reverse operations.","solution":"class Node: def __init__(self, data=None): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def insert(self, data: int, position: int) -> None: if not isinstance(data, int) or not isinstance(position, int): raise TypeError(\\"Data and position must be integers\\") new_node = Node(data) if position == 0: new_node.next = self.head self.head = new_node else: current = self.head prev = None count = 0 while current is not None and count < position: prev = current current = current.next count += 1 if count != position: raise IndexError(\\"Position out of bounds\\") new_node.next = current if prev: prev.next = new_node def delete(self, position: int) -> None: if not isinstance(position, int): raise TypeError(\\"Position must be an integer\\") if self.head is None: raise IndexError(\\"Deletion from empty list\\") if position == 0: self.head = self.head.next else: current = self.head prev = None count = 0 while current is not None and count < position: prev = current current = current.next count += 1 if current is None: raise IndexError(\\"Position out of bounds\\") prev.next = current.next def traverse(self) -> list: elements = [] current = self.head while current is not None: elements.append(current.data) current = current.next return elements def search(self, data: int) -> int: if not isinstance(data, int): raise TypeError(\\"Data must be an integer\\") position = 0 current = self.head while current is not None: if current.data == data: return position current = current.next position += 1 return -1 def reverse(self) -> None: prev = None current = self.head while current is not None: next_node = current.next current.next = prev prev = current current = next_node self.head = prev"},{"question":"**Scenario**: Imagine you are developing a personal finance management system that tracks a user\'s expenses over time. Your task is to analyze the expense data and provide insights using various utility functions. The expense data is stored in a list of dictionaries, where each dictionary represents a single expense record. **Task**: Implement a class `ExpenseAnalyzer` with the following methods: 1. `add_expense(date: str, amount: float, category: str, description: str) -> None`: Add a new expense record with the specified date (in `YYYY-MM-DD` format), amount, category, and description. 2. `get_total_expenses(start_date: str, end_date: str) -> float`: Calculate the total expenses incurred within the specified date range (both dates inclusive). 3. `get_expenses_by_category(category: str) -> list`: Retrieve all expense records for the given category. 4. `get_expense_summary() -> dict`: Provide a summary of total expenses by category. The summary should be a dictionary where keys are categories and values are total amounts spent. * Expected input and output formats: * `add_expense(\\"YYYY-MM-DD\\", amount, \\"category\\", \\"description\\")` -> None * `get_total_expenses(\\"start_date\\", \\"end_date\\")` -> float * `get_expenses_by_category(\\"category\\")` -> `[{date: str, amount: float, category: str, description: str}, ...]` * `get_expense_summary()` -> `{ \\"category\\": float, ... }` * Constraints: * Ensure that the date inputs are valid. * Handle cases where no expenses fall within the given date range. * Assume the data list does not contain duplicate expense records. * Date comparisons should be accurate. Below is the starting code for the class: ```python from datetime import datetime class ExpenseAnalyzer: def __init__(self): self.expenses = [] def add_expense(self, date: str, amount: float, category: str, description: str) -> None: # Implement the logic to add a new expense record. pass def get_total_expenses(self, start_date: str, end_date: str) -> float: # Implement the logic to calculate total expenses within the given date range. pass def get_expenses_by_category(self, category: str) -> list: # Implement the logic to retrieve all expense records for the given category. pass def get_expense_summary(self) -> dict: # Implement the logic to summarize total expenses by category. pass ```","solution":"from datetime import datetime from typing import List, Dict class ExpenseAnalyzer: def __init__(self): self.expenses = [] def add_expense(self, date: str, amount: float, category: str, description: str) -> None: try: datetime.strptime(date, \'%Y-%m-%d\') except ValueError: raise ValueError(\\"Date format should be YYYY-MM-DD\\") self.expenses.append({ \'date\': date, \'amount\': amount, \'category\': category, \'description\': description }) def get_total_expenses(self, start_date: str, end_date: str) -> float: try: start_date_dt = datetime.strptime(start_date, \'%Y-%m-%d\') end_date_dt = datetime.strptime(end_date, \'%Y-%m-%d\') except ValueError: raise ValueError(\\"Date format should be YYYY-MM-DD\\") total_expense = 0.0 for expense in self.expenses: expense_date = datetime.strptime(expense[\'date\'], \'%Y-%m-%d\') if start_date_dt <= expense_date <= end_date_dt: total_expense += expense[\'amount\'] return total_expense def get_expenses_by_category(self, category: str) -> List[Dict]: category_expenses = [expense for expense in self.expenses if expense[\'category\'] == category] return category_expenses def get_expense_summary(self) -> Dict: summary = {} for expense in self.expenses: if expense[\'category\'] in summary: summary[expense[\'category\']] += expense[\'amount\'] else: summary[expense[\'category\']] = expense[\'amount\'] return summary"},{"question":"# Question: Implement a Function to Calculate the Mode of a List You need to implement a function that calculates the mode of a given list of integers. The mode is the value that appears most frequently in the dataset. If there are multiple modes, the function should return all of them in a list, sorted in ascending order. Requirements 1. **Function Name**: find_mode 2. **Input**: A list of integers. 3. **Output**: A list containing the mode(s) of the input list, sorted in ascending order. Constraints 1. The input list can have a length ranging from 1 to 10^5. 2. The integers in the input list will be in the range from -10^5 to 10^5. Example ```python >>> find_mode([1, 3, 2, 3, 3, 2, 1, 1]) [1, 3] >>> find_mode([4, 5, 6, 6, 5, 6, 4, 4]) [4, 6] ``` Guidelines - Use appropriate data structures to store and count the frequencies efficiently. - Ensure your implementation handles both large inputs and multiple modes correctly. - Avoid using built-in functions that directly compute the mode to ensure manual implementation and understanding of the concept.","solution":"def find_mode(lst): Find the mode(s) of the list and return them sorted in ascending order. Args: lst (list of int): The input list of integers. Returns: list of int: A list containing the mode(s) sorted in ascending order. from collections import Counter if not lst: return [] freq = Counter(lst) max_freq = max(freq.values()) modes = [num for num, count in freq.items() if count == max_freq] return sorted(modes)"},{"question":"# Context Sorting techniques are a fundamental part of computer science, crucial for data organization, searching, and efficient data handling. One common sorting method is the bubble sort, which repeatedly swaps adjacent elements that are in the wrong order. However, bubble sort is not very efficient and is often used for educational purposes. # Problem Statement Write a function `optimized_bubble_sort(arr: List[int]) -> List[int]` that sorts an array of integers in ascending order using an optimized version of the bubble sort algorithm. The optimization involves stopping the algorithm if the array becomes sorted before all passes are done. # Input - `arr`: a list of integers. # Output - A list of integers sorted in ascending order. # Constraints - The length of the input list `arr` will not exceed 1000. - Each integer in `arr` will be between -10^6 and 10^6. # Example ```python >>> optimized_bubble_sort([64, 34, 25, 12, 22, 11, 90]) [11, 12, 22, 25, 34, 64, 90] >>> optimized_bubble_sort([5, 1, 4, 2, 8]) [1, 2, 4, 5, 8] >>> optimized_bubble_sort([2, 3, 4, 2, 1]) [1, 2, 2, 3, 4] >>> optimized_bubble_sort([-1, -3, -2, -5]) [-5, -3, -2, -1] ``` # Notes - The function should exit early if no swaps are made during a pass, indicating that the list is already sorted. - The implementation should be as efficient as possible while still using the bubble sort technique.","solution":"def optimized_bubble_sort(arr): Sorts an array of integers in ascending order using an optimized version of the bubble sort algorithm. Args: arr (list): A list of integers. Returns: list: A list of integers sorted in ascending order. n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break return arr"},{"question":"# Challenge: Apply Range Minimum Query **Context**: You are tasked with enhancing a data structure for efficient range queries on an array of integers. This structure must support both point updates and querying the minimum value in a range. **Problem**: Implement a class `RangeMinQuery` with the following methods: - `__init__(self, nums: List[int])`: Initialize the data structure with the list of integers `nums`. - `update(self, index: int, value: int)`: Update the element at `index` to `value`. - `min_query(self, left: int, right: int) -> int`: Return the minimum value in the subarray from `left` to `right` inclusive. **Constraints**: 1. The length of the array will be between `1` and `10^5`. 2. The value of each element in the initial array will be between `-10^9` and `10^9`. 3. The number of update and query operations will be between `1` and `10^4`. **Input**: - An initialization list `nums` of length `n` where each element `nums[i]` is an integer. - Multiple operations of the form `update(index, value)` and `min_query(left, right)`. **Output**: - For each `min_query` call, return the minimum value in the specified range of the array. **Performance Requirements**: - Both update and query operations should be optimized for performance, aiming for a logarithmic time complexity, O(log n). **Example**: ```python # Initialize the data structure rmq = RangeMinQuery([1, 3, 2, 7, 9, 11]) # Perform some queries print(rmq.min_query(1, 4)) # Output: 2 print(rmq.min_query(0, 5)) # Output: 1 # Update the array rmq.update(3, 0) # Perform another query to see the update effect print(rmq.min_query(1, 4)) # Output: 0 ``` **Note**: - Utilize segment trees or a comparable data structure to achieve the required performance. - Thoroughly test the class to ensure correctness for all edge cases.","solution":"class RangeMinQuery: def __init__(self, nums): Initialize the Range Min Query with nums. self.n = len(nums) self.tree = [0] * (2 * self.n) self.build(nums) def build(self, nums): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = nums[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, index, value): # Set value at position p p = index + self.n self.tree[p] = value # Move upward and update parents while p > 1: p //= 2 self.tree[p] = min(self.tree[2 * p], self.tree[2 * p + 1]) def min_query(self, left, right): # get minimum value in range [left, right) res = float(\'inf\') l, r = left + self.n, right + 1 + self.n while l < r: # If l is a right node, bring the value and move to parent\'s right node if l % 2: res = min(res, self.tree[l]) l += 1 # If r is a right node, bring the value of the left node and move to parent if r % 2: r -= 1 res = min(res, self.tree[r]) l //= 2 r //= 2 return res"},{"question":"**Sum of Unique Elements** You are given an array of integers, where some elements may appear multiple times. Your task is to find the sum of all elements in the array that appear exactly once. Implement the function `sum_of_unique_elements(arr: List[int]) -> int` that returns the sum of all unique elements in the array. Ensure your implementation is efficient, and handle edge cases appropriately. # Constraints: - 1 ≤ len(arr) ≤ 1000 - -1000 ≤ arr[i] ≤ 1000, where `arr[i]` is an integer in the array. # Input: A list of integers `arr`. # Output: An integer representing the sum of all unique elements in the array. # Example: ```python def sum_of_unique_elements(arr: List[int]) -> int: Find the sum of all elements that appear exactly once in the array. Args: arr (List[int]): List of integers. Returns: int: The sum of all unique elements in the array. # Your code here ``` # Test Cases: ```python assert sum_of_unique_elements([1, 2, 3, 2, 4]) == 8 # (1 + 3 + 4) assert sum_of_unique_elements([1, 1, 1, 1]) == 0 # No unique elements assert sum_of_unique_elements([3, 4, 5, 6, 6, 5]) == 7 # (3 + 4) assert sum_of_unique_elements([10]) == 10 # The only element is unique assert sum_of_unique_elements([-1, -2, -3, -2, -1, -1]) == -3 # Only -3 is unique ``` # Explanation: - For the input `[1, 2, 3, 2, 4]`, the elements that appear exactly once are `1`, `3`, and `4`. Their sum is `8`. - For the input `[1, 1, 1, 1]`, there are no unique elements, so the sum is `0`. - For the input `[3, 4, 5, 6, 6, 5]`, the unique elements are `3` and `4`, and their sum is `7`. Analyze your solution for edge cases and performance.","solution":"from typing import List def sum_of_unique_elements(arr: List[int]) -> int: Find the sum of all elements that appear exactly once in the array. Args: arr (List[int]): List of integers. Returns: int: The sum of all unique elements in the array. element_counts = {} # Count each element in the array for num in arr: if num in element_counts: element_counts[num] += 1 else: element_counts[num] = 1 # Sum elements that appear exactly once unique_sum = sum(num for num, count in element_counts.items() if count == 1) return unique_sum"},{"question":"# Task: Implement a Circular Queue You are required to implement a circular queue data structure from scratch. Your implementation should support insertion, deletion, and accessing elements efficiently. # Input: 1. **method_name (string)**: Specifies the operation to perform on the circular queue. It can be `enqueue`, `dequeue`, `front`, or `rear`. 2. **value (any type, optional)**: Only required for the `enqueue` operation. The value to be added to the queue. # Output: - For `enqueue` operation: Return `True` if the operation is successful, otherwise return `False`. - For `dequeue` operation: Return the dequeued element if the operation is successful, otherwise return `None`. - For `front` operation: Return the front element of the queue without removing it, or `None` if the queue is empty. - For `rear` operation: Return the rear element of the queue without removing it, or `None` if the queue is empty. # Constraints: - The size of the queue, `queue_size`, should be specified at initialization and should not exceed `10^6`. - Operations should be performed in constant time, O(1). # Example: ```python # Example usage: cq = CircularQueue(5) # Initialize a circular queue with size 5 assert cq.enqueue(10) == True assert cq.enqueue(20) == True assert cq.enqueue(30) == True assert cq.enqueue(40) == True assert cq.enqueue(50) == True assert cq.enqueue(60) == False # Returns False as queue is full assert cq.front() == 10 # Returns the front element without removing it assert cq.rear() == 50 # Returns the rear element without removing it assert cq.dequeue() == 10 # Removes and returns the front element assert cq.dequeue() == 20 # Removes and returns the front element assert cq.enqueue(60) == True # Enqueue operation succeeds this time assert cq.front() == 30 # Now the front element is 30 assert cq.rear() == 60 # Rear element is 60 now ``` # Additional Notes: - Implement error handling for cases such as dequeuing from an empty queue or enqueueing into a full queue. - Ensure circular nature of the queue is maintained by effectively utilizing the given size. - Carefully manage pointer updates for `front` and `rear` positions to enable circular behavior.","solution":"class CircularQueue: def __init__(self, queue_size): self.queue = [None] * queue_size self.max_size = queue_size self.front = -1 self.rear = -1 def enqueue(self, value): if (self.rear + 1) % self.max_size == self.front: # Queue is full return False if self.front == -1: # First element to be inserted self.front = 0 self.rear = (self.rear + 1) % self.max_size self.queue[self.rear] = value return True def dequeue(self): if self.front == -1: # Queue is empty return None element = self.queue[self.front] if self.front == self.rear: # Only one element was in the queue self.front = self.rear = -1 else: self.front = (self.front + 1) % self.max_size return element def front_element(self): if self.front == -1: # Queue is empty return None return self.queue[self.front] def rear_element(self): if self.rear == -1: # Queue is empty return None return self.queue[self.rear]"},{"question":"# Newton\'s Method for Square Roots Problem Description You are required to compute the square root of a non-negative number using Newton\'s method (also known as the Heron\'s method). Newton\'s method provides a way to approximate the roots of a real-valued function. Specifically, for finding the square root of a number (n), the recurrence relation is: [ x_{text{next}} = frac{1}{2} left( x + frac{n}{x} right) ] Where: - ( x ) is the current approximation. - ( x_{text{next}} ) is the next, more accurate approximation. You are to continue the iteration until the difference between ( x ) and ( x_{text{next}} ) is within a given tolerance. Task Requirements Implement the function `sqrt_newtons_method(n: float, tolerance: float = 1e-10) -> float` that computes the square root of a non-negative number (n) using Newton\'s method. The function should continue iterating until the absolute difference between consecutive approximations is less than the specified tolerance level. - `n` is the non-negative number whose square root is to be found. - `tolerance` defines the precision of the result and defaults to (1 times 10^{-10}). Return the computed square root as a float. Input and Output - **Input**: A non-negative float value `n` and an optional float `tolerance`. - **Output**: A float representing the square root of `n` to an accuracy within `tolerance`. Constraints - If `n` is negative, raise a `ValueError` with the message: `\\"Cannot compute square root of a negative number\\"`. - If the tolerance is not positive, raise a `ValueError` with the message: `\\"Tolerance must be positive\\"`. Example ```python >>> sqrt_newtons_method(25) 5.0 >>> sqrt_newtons_method(2) 1.414213562373095 >>> sqrt_newtons_method(0) 0.0 >>> sqrt_newtons_method(49, 1e-8) 7.0 ```","solution":"def sqrt_newtons_method(n: float, tolerance: float = 1e-10) -> float: Computes the square root of a non-negative number n using Newton\'s method. :param n: Non-negative number to compute the square root of. :param tolerance: Tolerance for the convergence of the method. :return: Approximated square root of n. :raises ValueError: If n is negative or tolerance is not positive. if n < 0: raise ValueError(\\"Cannot compute square root of a negative number\\") if tolerance <= 0: raise ValueError(\\"Tolerance must be positive\\") # Special cases if n == 0: return 0.0 if n == 1: return 1.0 x = n while True: x_next = 0.5 * (x + n / x) if abs(x - x_next) < tolerance: return x_next x = x_next"},{"question":"# Problem Statement As part of a software utility package, you\'re required to write a function that calculates the Greatest Common Divisor (GCD) of an array of integers. The GCD of an array is the largest positive integer that divides each of the integers without leaving a remainder. Your task is to implement a function `find_gcd` that takes a list of integers and returns their GCD. # Function Signature ```python def find_gcd(arr: List[int]) -> int: pass ``` # Input * A list of integers `arr` with the size `1 <= len(arr) <= 10^6` and each integer `1 <= arr[i] <= 10^9`. # Output * An integer that is the GCD of the input list `arr`. # Constraints * The function should handle arrays of the maximum size within a reasonable time frame. * Assume the list can contain very large integers and the solution should be efficient. # Examples ```python >>> find_gcd([12, 15, 21]) 3 >>> find_gcd([3, 5, 7]) 1 >>> find_gcd([48, 180, 240]) 12 >>> find_gcd([1024, 2048, 4096]) 1024 ``` # Notes 1. You may use the Euclidean algorithm to find the GCD of two numbers. 2. Extend the logic to find the GCD of more than two numbers efficiently. 3. The function should work within acceptable time and space complexity constraints.","solution":"from typing import List import math from functools import reduce def find_gcd(arr: List[int]) -> int: Returns the GCD of a list of integers. return reduce(math.gcd, arr)"},{"question":"# Question: You are developing a library to help with scheduling events in an application. One particular feature needs to check if any two events overlap, based on their start and end times. # Problem Statement: Implement a function `has_overlapping_events(events)` that determines if there are any overlapping events in a given list. Each event is represented by a tuple `(start, end)` where `start` and `end` are integers representing the event\'s start and end times. Implementation Requirements: - The function `has_overlapping_events(events)` should receive a list of tuples where each tuple represents an event. - It should return a boolean value: - `True` if there is at least one pair of overlapping events. - `False` otherwise. # Constraints: 1. All event times are represented as integers. 2. The list can contain up to 10,000 events. 3. An event `(start, end)` has `start` less than or equal to `end`. # Input: - A list of tuples representing events where each event is in the format `(start, end)`. # Output: - A boolean value (`True` or `False`). # Example: Assuming you have the following list of events: ```python events = [(1, 5), (6, 10), (2, 6), (11, 15)] ``` After implementing `has_overlapping_events(events)`, the function should return `True` because the events `(1, 5)` and `(2, 6)` overlap. # Instructions: 1. Implement the function `has_overlapping_events(events)` in Python. 2. Ensure it correctly identifies overlapping events as per the example. 3. Account for edge cases such as an empty list and events that do not overlap at all. 4. Optimize for efficiency given the constraint on the number of events. Good luck!","solution":"def has_overlapping_events(events): Determines if there are any overlapping events in a given list. Args: events (list of tuples): A list where each tuple (start, end) represents an event. Returns: bool: True if there are overlapping events, otherwise False. # First, sort the events based on the start time events.sort(key=lambda x: x[0]) # Iterate through the sorted events and check for overlaps for i in range(1, len(events)): # If the start time of the current event is less than the end time of the previous event, # then the events overlap. if events[i][0] < events[i-1][1]: return True return False"},{"question":"# Problem Statement: Detecting Cycles in a Directed Graph using DFS One of the classic problems in graph theory is detecting cycles in a directed graph. This problem can be efficiently solved using Depth-First Search (DFS). Your task is to implement an algorithm that checks whether a given directed graph contains any cycles. # Implementation Details You need to define a class `DirectedGraph` and implement the following methods: 1. **Constructor**: ```python def __init__(self, num_of_nodes: int) -> None ``` - Initializes a directed graph with the specified number of nodes. - `num_of_nodes`: Number of nodes in the graph. 2. **add_edge**: ```python def add_edge(self, u_node: int, v_node: int) -> None ``` - Adds a directed edge from `u_node` to `v_node`. - `u_node`: Start node of the edge. - `v_node`: End node of the edge. 3. **contains_cycle**: ```python def contains_cycle(self) -> bool ``` - Implements DFS to determine whether the graph contains any cycles. - Returns `True` if any cycle is detected, otherwise returns `False`. # Example Usage Given a directed graph with 4 nodes and the following edges: - (0, 1) - (1, 2) - (2, 0) - (2, 3) The graph should be checked for cycles. ```python g = DirectedGraph(4) for u_v in ((0, 1), (1, 2), (2, 0), (2, 3)): g.add_edge(*u_v) print(g.contains_cycle()) ``` # Expected Output The output should be: ``` True ``` # Constraints - The number of nodes (1 leq V leq 10^3) - The number of edges (0 leq E leq 10^4) - Node labels are non-negative integers Implement the `DirectedGraph` class and its methods to solve the problem. Ensure that your algorithm correctly detects cycles and handles edge cases like graphs with no edges or graphs with only a single node.","solution":"class DirectedGraph: def __init__(self, num_of_nodes: int) -> None: self.num_of_nodes = num_of_nodes self.adjacency_list = {i: [] for i in range(num_of_nodes)} def add_edge(self, u_node: int, v_node: int) -> None: self.adjacency_list[u_node].append(v_node) def contains_cycle(self) -> bool: def dfs(node, visited, rec_stack): visited[node] = True rec_stack[node] = True for neighbor in self.adjacency_list[node]: if not visited[neighbor]: if dfs(neighbor, visited, rec_stack): return True elif rec_stack[neighbor]: return True rec_stack[node] = False return False visited = [False] * self.num_of_nodes rec_stack = [False] * self.num_of_nodes for node in range(self.num_of_nodes): if not visited[node]: if dfs(node, visited, rec_stack): return True return False"},{"question":"**Scenario**: You are working on an application that helps users manage their personal budget by tracking expenses and categorizing them. To provide a comprehensive summary, the application should analyze past expenses and offer insights. **Task**: Implement a class `ExpenseManager` with the following methods: 1. `add_expense(date: str, category: str, amount: float) -> None`: Add an expense to the system. The date should be in `YYYY-MM-DD` format, category should be a string representing the type of expense, and amount should be the expense amount. 2. `get_total_expense(start_date: str, end_date: str) -> float`: Get the total expense for the specified date range (inclusive). Dates should be in `YYYY-MM-DD` format. 3. `get_expense_by_category(category: str) -> float`: Get the total expense for a specified category. * Expected input and output formats: * `add_expense(\\"YYYY-MM-DD\\", \\"category\\", amount)` -> None * `get_total_expense(\\"YYYY-MM-DD\\", \\"YYYY-MM-DD\\")` -> float * `get_expense_by_category(\\"category\\")` -> float * Constraints: * Ensure date inputs and expense amounts are valid and handled correctly. * Provide appropriate handling for cases where no expenses are found for the specified criteria. * Assume category names are case-insensitive (e.g., \\"Food\\" and \\"food\\" should be treated as the same category). Below is the starting code for the class: ```python from datetime import datetime from collections import defaultdict class ExpenseManager: def __init__(self): self.expenses = [] def add_expense(self, date: str, category: str, amount: float) -> None: # Implement the logic to add an expense. pass def get_total_expense(self, start_date: str, end_date: str) -> float: # Implement the logic to get total expense for the given date range. pass def get_expense_by_category(self, category: str) -> float: # Implement the logic to get total expense for the given category. pass ```","solution":"from datetime import datetime from collections import defaultdict class ExpenseManager: def __init__(self): self.expenses = [] def validate_date(self, date_str): try: datetime.strptime(date_str, \\"%Y-%m-%d\\") return True except ValueError: return False def add_expense(self, date: str, category: str, amount: float) -> None: if not self.validate_date(date): raise ValueError(\\"Invalid date format. Use YYYY-MM-DD.\\") if not isinstance(amount, (int, float)) or amount < 0: raise ValueError(\\"Amount must be a non-negative number.\\") self.expenses.append({\\"date\\": date, \\"category\\": category.lower(), \\"amount\\": amount}) def get_total_expense(self, start_date: str, end_date: str) -> float: if not (self.validate_date(start_date) and self.validate_date(end_date)): raise ValueError(\\"Invalid date format. Use YYYY-MM-DD.\\") total = 0.0 for expense in self.expenses: if start_date <= expense[\\"date\\"] <= end_date: total += expense[\\"amount\\"] return total def get_expense_by_category(self, category: str) -> float: total = 0.0 for expense in self.expenses: if expense[\\"category\\"] == category.lower(): total += expense[\\"amount\\"] return total"},{"question":"# Coding Assessment Question Context You are developing a function to identify and replace placeholder tags within a given string with corresponding values from a dictionary. This function is particularly useful in templating systems where dynamic content needs to be injected into preset templates. Task Write a Python function `replace_placeholders(template: str, values: dict) -> str` that takes as input a template string containing placeholder tags in the format `{tag}` and a dictionary where keys are the tags and values are the corresponding replacement strings. The function should replace all occurrences of each placeholder tag in the template string with their respective values from the dictionary. Function Specification - **Input**: - `template` (str): A string containing 0 or more placeholder tags enclosed in curly braces `{}`. - `values` (dict): A dictionary where each key is a string representing a tag and the associated value is the replacement string for that tag. - **Output**: - A string with all placeholder tags replaced by their corresponding values. Constraints - The placeholder tags and the corresponding values in the dictionary will only contain alphanumeric characters and underscores. - If a placeholder tag in the template does not have a corresponding key in the dictionary, it should be left unchanged. - The function should handle large templates efficiently. Example ```python def replace_placeholders(template: str, values: dict) -> str: # Implement the function to replace placeholders with corresponding values pass # Sample Test Cases print(replace_placeholders(\\"Hello, {name}!\\", {\\"name\\": \\"Alice\\"})) # Expected output: \\"Hello, Alice!\\" print(replace_placeholders(\\"Your order {order_id} is confirmed.\\", {\\"order_id\\": \\"12345\\"})) # Expected output: \\"Your order 12345 is confirmed.\\" print(replace_placeholders(\\"Welcome {user}, your score is {score}.\\", {\\"user\\": \\"Bob\\", \\"score\\": \\"95\\"})) # Expected output: \\"Welcome Bob, your score is 95.\\" print(replace_placeholders(\\"{greeting}, {name}!\\", {\\"greeting\\": \\"Hi\\"})) # Expected output: \\"Hi, {name}!\\" ``` Explanation In the first example, the `{name}` placeholder is replaced by \\"Alice\\". In the second example, the `{order_id}` placeholder is replaced by \\"12345\\". In the third example, both `{user}` and `{score}` placeholders are replaced. In the fourth example, `{greeting}` is replaced by \\"Hi\\" but `{name}` is left unchanged as it has no corresponding value in the dictionary. Implementation Requirements - Ensure that the function efficiently handles templates with multiple placeholders and large input strings. - Carefully consider edge cases, such as inputs with no placeholders or placeholders without corresponding dictionary values.","solution":"def replace_placeholders(template: str, values: dict) -> str: Replaces placeholders in the format {tag} within the template string with corresponding values from the dictionary. Parameters: - template (str): The template string containing placeholder tags. - values (dict): A dictionary where keys are tags and values are the replacement strings. Returns: - str: The string with all placeholder tags replaced by their corresponding values. for tag, replacement in values.items(): template = template.replace(f\'{{{tag}}}\', replacement) return template"},{"question":"# Question You are given an array of integers representing the elevations of terrain from left to right. The task is to compute the amount of water that can be trapped between the elevations after rainfall. The amount of water trapped at a given index is determined by the height of the tallest bar to the left and the tallest bar to the right. The water level at that index is the minimum of these two heights minus the elevation at that index. # Function Signature ```python def trap_rain_water(elevations: List[int]) -> int: ... ``` # Input Format - `elevations`: A list of integers of length n (0 <= n <= 10^5) representing the elevations of the terrain. # Output Format - An integer representing the total units of water that can be trapped. # Example ```python elevations = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] output = trap_rain_water(elevations) print(output) # Expected: 6 ``` # Additional Requirements: 1. The solution should be efficient with respect to time and space complexity. 2. Ensure proper handling of edge cases, such as an empty list or a list with less than 3 elements where no water can be trapped. # Constraints 1. 0 <= n <= 10^5 2. Elements in `elevations` are non-negative integers less than or equal to 10^4.","solution":"from typing import List def trap_rain_water(elevations: List[int]) -> int: if not elevations or len(elevations) < 3: return 0 n = len(elevations) left_max = [0] * n right_max = [0] * n left_max[0] = elevations[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], elevations[i]) right_max[n - 1] = elevations[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], elevations[i]) water_trapped = 0 for i in range(1, n - 1): water_trapped += max(0, min(left_max[i], right_max[i]) - elevations[i]) return water_trapped"},{"question":"# Coding Question Context In a file system, files and directories are represented as paths, and paths can be absolute or relative. Given a directory path, you need to generate all the subdirectory structures within a specified depth. Problem Statement Implement a function `list_subdirectories` that takes a directory path and a depth as input and returns a list of all subdirectory paths up to the specified depth. ```python def list_subdirectories(directory, depth): Generates all subdirectory paths within the specified depth. Parameters: directory (str): The starting directory path. depth (int): The depth up to which to list subdirectories. Returns: List[str]: A list of subdirectory paths up to the specified depth. pass ``` # Constraints 1. The `directory` input is guaranteed to be a valid absolute path. 2. `depth` is a non-negative integer. 3. The function should handle file system operations efficiently. Example ```python # Assuming the following directory structure: # /root # /root/dir1 # /root/dir1/subdir1 # /root/dir1/subdir2 # /root/dir2 # /root/dir2/subdir1 directory = \\"/root\\" depth = 1 subdirectories = list_subdirectories(directory, depth) # The output should be: # [\\"/root/dir1\\", \\"/root/dir2\\"] assert set(subdirectories) == {\\"/root/dir1\\", \\"/root/dir2\\"} directory = \\"/root\\" depth = 2 subdirectories = list_subdirectories(directory, depth) # The output should include: # [\\"/root/dir1\\", \\"/root/dir1/subdir1\\", \\"/root/dir1/subdir2\\", \\"/root/dir2\\", \\"/root/dir2/subdir1\\"] expected_output = {\\"/root/dir1\\", \\"/root/dir1/subdir1\\", \\"/root/dir1/subdir2\\", \\"/root/dir2\\", \\"/root/dir2/subdir1\\"} assert set(subdirectories) == expected_output ``` # Performance Requirements Ensure that the function handles file system traversal efficiently and minimizes unnecessary operations. The function should quickly generate lists for typical directory structures up to a reasonable depth.","solution":"import os def list_subdirectories(directory, depth): Generates all subdirectory paths within the specified depth. Parameters: directory (str): The starting directory path. depth (int): The depth up to which to list subdirectories. Returns: List[str]: A list of subdirectory paths up to the specified depth. if depth < 0: return [] subdirectories = [] for root, dirs, files in os.walk(directory): current_depth = root[len(directory):].count(os.path.sep) if current_depth < depth: for dir in dirs: subdirectories.append(os.path.join(root, dir)) dirs[:] = [d for d in dirs if current_depth < depth - 1] return subdirectories"},{"question":"# Anomalous Transaction Detection You are tasked with developing a system to identify potentially fraudulent transactions in a banking system. A simplified criterion for anomaly detection includes identifying any transaction amount that is an outlier compared to the median transaction amount within a given set. # Function Specifications 1. **Function Name**: `detect_anomalous_transactions` 2. **Parameters**: - `transactions` (List[float]): A list containing transaction amounts in float. - `threshold` (float): A multiplier for determining the anomaly threshold. Any transaction that is more than `threshold` times the median of all transactions is flagged as anomalous. 3. **Returns**: - A list of tuples, where each tuple contains the index and value of the anomalous transaction in the input list. 4. **Constraints**: - The length of the `transactions` list will be between 1 and 10^6. - Transaction amounts will be positive real numbers. # Examples ```python transactions = [100.0, 105.0, 98.0, 5000.0, 102.0, 101.0] threshold = 20.0 result = detect_anomalous_transactions(transactions, threshold) print(result) # Expected Output: [(3, 5000.0)] ``` # Implementation Details - Efficiently compute the median of the transaction amounts. - Iterate through the transaction list to identify and collect the indices and values of anomalous transactions. - Ensure the function runs efficiently even for large lists of transactions. ```python from typing import List, Tuple def detect_anomalous_transactions(transactions: List[float], threshold: float) -> List[Tuple[int, float]]: Parameters: transactions (List[float]): A list of transaction amounts. threshold (float): A factor used to flag anomalies more than this many times the median. Returns: List[Tuple[int, float]]: A list of tuples with the index and value of anomalous transactions. if not transactions: return [] sorted_transactions = sorted(transactions) n = len(sorted_transactions) # Compute median if n % 2 == 1: median = sorted_transactions[n // 2] else: median = (sorted_transactions[n // 2 - 1] + sorted_transactions[n // 2]) / 2 # Find anomalies anomalies = [] for i, amount in enumerate(transactions): if amount > threshold * median: anomalies.append((i, amount)) return anomalies # Example usage transactions = [100.0, 105.0, 98.0, 5000.0, 102.0, 101.0] threshold = 20.0 print(detect_anomalous_transactions(transactions, threshold)) # Output: [(3, 5000.0)] ``` Implement and test your function thoroughly to ensure it accurately identifies anomalous transactions and handles large inputs efficiently.","solution":"from typing import List, Tuple def detect_anomalous_transactions(transactions: List[float], threshold: float) -> List[Tuple[int, float]]: Parameters: transactions (List[float]): A list of transaction amounts. threshold (float): A factor used to flag anomalies more than this many times the median. Returns: List[Tuple[int, float]]: A list of tuples with the index and value of anomalous transactions. if not transactions: return [] sorted_transactions = sorted(transactions) n = len(sorted_transactions) # Compute median if n % 2 == 1: median = sorted_transactions[n // 2] else: median = (sorted_transactions[n // 2 - 1] + sorted_transactions[n // 2]) / 2 # Find anomalies anomalies = [] for i, amount in enumerate(transactions): if amount > threshold * median: anomalies.append((i, amount)) return anomalies"},{"question":"# Problem Statement You are tasked with writing a Python function to simulate the encoding mechanism of a popular data compression algorithm known as Run-Length Encoding (RLE). This algorithm compresses data by reducing the physical size of a repeating character sequence. Write a function `run_length_encoding(s: str) -> str` that takes a single string `s` and returns its run-length encoded format. The encoding works as follows: - For a character `char` that appears consecutively `n` times in the string, it is replaced by `char` followed by `n`. - If `char` appears only once, it is replaced by `char1`. # Input - A string `s` where ( 1 leq len(s) leq 10^5 ). - The string `s` contains only lowercase English letters. # Output - A string representing the run-length encoded format of `s`. # Example ```python # Example usage print(run_length_encoding(\\"aaabbccccdaa\\")) # Output: \'a3b2c4d1a2\' print(run_length_encoding(\\"abcde\\")) # Output: \'a1b1c1d1e1\' ``` # Note - Do not use any built-in library that directly provides run-length encoding functionalities. - Ensure the output string accurately reflects the run-length encoding as described.","solution":"def run_length_encoding(s: str) -> str: Returns the run-length encoded format of the input string `s`. if not s: return \\"\\" encoded_str = [] current_char = s[0] current_count = 1 for char in s[1:]: if char == current_char: current_count += 1 else: encoded_str.append(f\\"{current_char}{current_count}\\") current_char = char current_count = 1 encoded_str.append(f\\"{current_char}{current_count}\\") return \\"\\".join(encoded_str)"},{"question":"# Coding Question: Transaction Log Anomaly Detector You are building a financial monitoring system that detects anomalies in a series of transaction logs. Each log entry consists of a timestamp and the transaction amount. To ensure the system is robust, you need to implement a function to determine if there are any repetitive misdemeanors (i.e., unusual repeated patterns that might indicate fraud). Your goal is to write a function `detect_anomalies` that identifies and reports the most frequent transaction amount for each distinct hour (if such a pattern is significant). Function Signature ```python def detect_anomalies(logs: List[Tuple[str, float]]) -> Dict[str, float]: ``` Parameters - **logs**: (list of tuples) Each tuple contains a string representing a timestamp in the format \\"YYYY-MM-DD HH:MM:SS\\" and a float representing the transaction amount. Returns - (dictionary) A dictionary where the keys are hour strings in the format \\"YYYY-MM-DD HH\\" and the values are the transaction amounts that occurred most frequently during that hour. Constraints - If there is a tie for the most frequently occurring transaction amount within a specific hour, return any one of them. - The logs list is guaranteed to contain valid timestamps and non-negative transaction amounts. Example Usage ```python transaction_logs = [ (\\"2023-10-01 08:01:22\\", 125.00), (\\"2023-10-01 08:23:45\\", 125.00), (\\"2023-10-01 08:45:00\\", 130.00), (\\"2023-10-01 09:05:01\\", 200.00), (\\"2023-10-01 09:20:56\\", 200.00), (\\"2023-10-01 09:45:12\\", 150.00) ] print(detect_anomalies(transaction_logs)) # Output: {\'2023-10-01 08\': 125.00, \'2023-10-01 09\': 200.00} ``` Notes - The solution should efficiently handle a large list of logs. - Focus on finding the most frequent transaction amount for each hour block to assess potentially significant patterns.","solution":"from typing import List, Tuple, Dict from collections import defaultdict, Counter def detect_anomalies(logs: List[Tuple[str, float]]) -> Dict[str, float]: Detects the most frequent transaction amount for each distinct hour from the transaction logs. Parameters: logs (List[Tuple[str, float]]): List of transaction logs where each entry is a tuple containing a timestamp and a transaction amount. Returns: Dict[str, float]: Dictionary where keys are hour strings and values are the most frequent transaction amounts for that hour. hour_logs = defaultdict(list) # Group the transaction amounts by hours for timestamp, amount in logs: hour = timestamp[:13] # Extract the \\"YYYY-MM-DD HH\\" part of the timestamp hour_logs[hour].append(amount) # Find the most frequent transaction amount for each hour most_frequent = {} for hour, amounts in hour_logs.items(): amount_frequency = Counter(amounts) most_frequent_amount = amount_frequency.most_common(1)[0][0] most_frequent[hour] = most_frequent_amount return most_frequent"},{"question":"# Stock Price Trend Analysis Scenario You are tasked with creating a program that analyzes stock price data for a specified company and determines the trend over a given period. The stock price data includes dates, opening prices, closing prices, highest prices, lowest prices, and volumes. This task will help you demonstrate your understanding of data analysis and handling time series data using Python. Problem Statement Implement the function `analyze_stock_trend` that takes a company\'s stock symbol and a time period (start date and end date) as input, retrieves historical stock price data from a financial API (e.g., Alpha Vantage), and identifies the overall trend (upward, downward, or stable) over the specified period. Function Signature ```python def analyze_stock_trend(symbol: str, start_date: str, end_date: str) -> str: pass ``` Input - `symbol`: A string representing the stock symbol of the company (e.g., \\"AAPL\\" for Apple). - `start_date`: A string representing the start date of the period in the format \\"YYYY-MM-DD\\". - `end_date`: A string representing the end date of the period in the format \\"YYYY-MM-DD\\". Output - A string indicating the overall trend of the stock over the specified period, which can be one of the following: - \\"Upward\\" - \\"Downward\\" - \\"Stable\\" Constraints - Ensure the dates are valid and the end date is not before the start date. - Handle exceptions for missing or partial data. - Consider network or parsing errors and retry mechanisms. Example ```python trend = analyze_stock_trend(\\"AAPL\\", \\"2023-01-01\\", \\"2023-06-30\\") print(trend) ``` This should display \\"Upward\\", \\"Downward\\", or \\"Stable\\" based on the trend analysis of Apple\'s stock over the given period. Tips - Use the `requests` library to fetch data from the financial API. - Use pandas for data handling and time series analysis. - Define your logic to determine the trend based on closing prices and their variation over time. - Handle exceptions gracefully and ensure data completeness before performing the analysis.","solution":"import requests import pandas as pd from datetime import datetime def analyze_stock_trend(symbol: str, start_date: str, end_date: str) -> str: API_KEY = \'demo\' # Replace with your Alpha Vantage API key URL = \'https://www.alphavantage.co/query\' params = { \'function\': \'TIME_SERIES_DAILY_ADJUSTED\', \'symbol\': symbol, \'apikey\': API_KEY, \'outputsize\': \'full\' } response = requests.get(URL, params=params) if response.status_code != 200: raise Exception(\\"Failed to retrieve data from Alpha Vantage\\") data = response.json().get(\'Time Series (Daily)\', {}) if not data: raise Exception(\\"Incomplete or missing data received\\") df = pd.DataFrame.from_dict(data, orient=\'index\') df.index = pd.to_datetime(df.index) df = df.sort_index() df_filtered = df[start_date:end_date] if df_filtered.empty: raise Exception(\\"No data available for the specified date range\\") df_filtered[\'close\'] = df_filtered[\'5. adjusted close\'].astype(float) closing_prices = df_filtered[\'close\'] start_price = closing_prices.iloc[0] end_price = closing_prices.iloc[-1] if end_price > start_price: return \\"Upward\\" elif end_price < start_price: return \\"Downward\\" else: return \\"Stable\\""},{"question":"# Problem Statement You are tasked with developing a program that simulates a ticket reservation system for a movie theater. The theater has a fixed number of rows and each row contains a fixed number of seats. Your job is to create a function that will enable users to reserve seats, check the availability, and get a list of currently available seats. # Requirements Function Signature ```python class MovieTheater: def __init__(self, rows: int, seats_per_row: int): ... def reserve_seat(self, row: int, seat: int) -> bool: ... def is_seat_available(self, row: int, seat: int) -> bool: ... def available_seats(self) -> list: ... ``` Inputs * `rows` (int): The number of rows in the theater. * `seats_per_row` (int): The number of seats in each row. * `row` (int): The row number of the seat to reserve or check availability. * `seat` (int): The seat number in the given row to reserve or check availability. Outputs * `reserve_seat`: Returns `True` if the seat was successfully reserved, `False` otherwise. * `is_seat_available`: Returns `True` if the seat is available, `False` otherwise. * `available_seats`: Returns a list of tuples representing the available seats, where each tuple contains the row and seat number. Constraints * Both `rows` and `seats_per_row` are positive integers. * Row and seat numbers are 0-indexed. * A seat cannot be reserved more than once. * The reservation system should handle at most 100 rows and 100 seats per row efficiently. # Example ```python theater = MovieTheater(5, 5) # Attempt to reserve a seat print(theater.reserve_seat(2, 3)) # True # Attempt to reserve the same seat again print(theater.reserve_seat(2, 3)) # False # Check if a specific seat is available print(theater.is_seat_available(2, 3)) # False print(theater.is_seat_available(1, 4)) # True # Get all available seats print(theater.available_seats()) # [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), ..., (4, 4)] ``` # Implementation Hints - Use nested lists or sets to keep track of reserved seats. - Ensure the methods handle invalid inputs or out-of-bound indices gracefully.","solution":"class MovieTheater: def __init__(self, rows: int, seats_per_row: int): self.rows = rows self.seats_per_row = seats_per_row self.seats = [[False] * seats_per_row for _ in range(rows)] def reserve_seat(self, row: int, seat: int) -> bool: if not (0 <= row < self.rows and 0 <= seat < self.seats_per_row): return False if self.seats[row][seat]: return False self.seats[row][seat] = True return True def is_seat_available(self, row: int, seat: int) -> bool: if not (0 <= row < self.rows and 0 <= seat < self.seats_per_row): return False return not self.seats[row][seat] def available_seats(self) -> list: available = [] for r in range(self.rows): for s in range(self.seats_per_row): if not self.seats[r][s]: available.append((r, s)) return available"},{"question":"# Question: Nested Bracket Validation You need to write a function that validates whether a string containing multiple types of brackets (i.e., `()`, `{}`, `[]`) is correctly nested. The string must be processed to verify that every opening bracket has a corresponding closing bracket and that the brackets are properly nested. Requirements: 1. **Balanced Brackets**: For the string to be valid, all types of brackets must be properly opened and closed. 2. **Proper Nesting**: Brackets must respect the order and structure; for instance, `({[()]})` is valid but `({[)]})` is invalid. 3. **Empty String**: An empty string is considered valid. 4. **Characters**: The function should ignore characters that are not brackets. Input/Output: - `input_string` (str): The string containing the brackets to be validated. Example: ```python input_string = \\"{[()()]}\\" result = is_valid_bracket_sequence(input_string) assert result == True ``` # Implementation: Define the following function to complete this task: 1. `is_valid_bracket_sequence(input_string: str) -> bool` Function Specs: 1. `is_valid_bracket_sequence`: - Args: `input_string` (str). - Returns: `bool` indicating whether the brackets in the input string are correctly nested and balanced. - Functionality: Validate the nesting and balance of brackets in the input string. ```python def is_valid_bracket_sequence(input_string: str) -> bool: stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in input_string: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket.keys(): if stack == [] or matching_bracket[char] != stack.pop(): return False return stack == [] # Test cases assert is_valid_bracket_sequence(\\"{[()()]}\\") == True assert is_valid_bracket_sequence(\\"{[(])}\\") == False assert is_valid_bracket_sequence(\\"{[(([]))]}\\") == True assert is_valid_bracket_sequence(\\"}{\\") == False assert is_valid_bracket_sequence(\\"\\") == True ``` This question assesses the ability to work with stacks and parentheses nesting, common issues in algorithmic problems, and ensures a deep understanding of data structure basics and traversal techniques.","solution":"def is_valid_bracket_sequence(input_string: str) -> bool: Validates if the input string has correctly nested and balanced brackets. Args: input_string (str): The string containing the brackets to be validated. Returns: bool: True if the brackets are correctly nested and balanced, False otherwise. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in input_string: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket.keys(): if stack == [] or matching_bracket[char] != stack.pop(): return False return stack == []"},{"question":"# Problem Description You are tasked with designing a system to manage and query event schedules efficiently. Each event has a starting time and an ending time, and events may overlap. Your goal is to implement a function that inserts an event into the schedule without overlap and a function that queries the events that are active during a given time interval. # Task Implement two functions: 1. `insert_event(schedule: list[tuple[int, int]], new_event: tuple[int, int]) -> list[tuple[int, int]]` which takes an existing schedule of events and a new event, and returns a new schedule with the event added without overlapping other events. 2. `query_events(schedule: list[tuple[int, int]], start_time: int, end_time: int) -> list[tuple[int, int]]` which returns the list of events that overlap with the given query interval. # Function Signatures ```python def insert_event(schedule: list[tuple[int, int]], new_event: tuple[int, int]) -> list[tuple[int, int]]: pass def query_events(schedule: list[tuple[int, int]], start_time: int, end_time: int) -> list[tuple[int, int]]: pass ``` # Input - `schedule` (list of tuple): each tuple represents an event with (start_time, end_time) - `new_event` (tuple): a tuple representing the new event (start_time, end_time) to be added. - `start_time` (int): the start time of the query interval. - `end_time` (int): the end time of the query interval. # Output - For `insert_event`, return a list of tuples representing the updated schedule. - For `query_events`, return a list of tuples representing the events active during the given interval. # Constraints - Events are represented as tuples with two integers `(start_time, end_time)` where `0 <= start_time < end_time`. - Assume the schedule is sorted by start times. - The time intervals are within the range [0, 1000] for queries and events. - Events in the schedule do not overlap each other. # Examples ```python # Function signature for inserting an event def insert_event(schedule, new_event): pass # Function signature for querying events def query_events(schedule, start_time, end_time): pass # Sample schedule of events schedule = [(1, 3), (5, 7), (8, 10)] # Insert Event assert insert_event(schedule, (2, 4)) == [(1, 3), (5, 7), (8, 10)] assert insert_event(schedule, (3, 5)) == [(1, 3), (5, 7), (8, 10), (3, 5)] assert insert_event(schedule, (6, 9)) == [(1, 3), (5, 7), (10, 10), (6, 9)] # Query Events assert query_events(schedule, 1, 2) == [(1, 3)] assert query_events(schedule, 5, 7) == [(5, 7)] assert query_events(schedule, 6, 8) == [(5, 7), (8, 10)] assert query_events(schedule, 10, 11) == [] ``` # Hints - For `insert_event`, ensure you do not introduce overlapping events in the schedule. You may need to merge events or discard the new event if it overlaps. - For `query_events`, consider how to efficiently search through the interval to find overlapping events. - Think about edge cases like inserting an event in an empty schedule or querying an interval where no events are active.","solution":"def insert_event(schedule, new_event): Inserts an event into the schedule without overlap. If the new event overlaps with existing events, it is discarded. :param schedule: list of tuples, each tuple representing (start_time, end_time) :param new_event: tuple representing the event (start_time, end_time) to be added :return: updated schedule as a list of tuples start, end = new_event for s, e in schedule: if not (end <= s or start >= e): return schedule # overlap detected, return original schedule # if no overlap detected, insert event and sort schedule schedule.append(new_event) return sorted(schedule) def query_events(schedule, start_time, end_time): Queries the events that overlap with a given time interval. :param schedule: list of tuples, each tuple representing (start_time, end_time) :param start_time: start time of the query interval :param end_time: end time of the query interval :return: list of tuples representing overlapping events result = [] for s, e in schedule: if not (end_time <= s or start_time >= e): result.append((s, e)) return result"},{"question":"# Coding Question **Scenario:** You are developing a text processing tool that needs functionality to manage word frequencies in a given text and retrieve the most frequent words. In this challenge, you are required to write a function that processes a paragraph and determines the n most frequently occurring words. # Problem Statement: Write a function `top_n_words(paragraph: str, n: int) -> list[str]` that returns a list of the `n` most frequent words in the given paragraph. The words in the returned list should be ordered by their frequency in descending order. In case of a tie (words with the same frequency), sort the tied words alphabetically. # Input: - A string `paragraph` that represents a block of text (1 <= len(paragraph) <= 10^5). - An integer `n` representing the number of top frequent words to return (1 <= n <= 100). # Output: - A list of the `n` most frequent words, sorted by frequency in descending order, and alphabetically in case of ties. # Constraints: - Words are defined as sequences of alphanumeric characters. - The function should handle punctuation and capitalization properly, treating \\"word\\" and \\"Word\\" as the same word. - If the number of unique words is less than `n`, return all unique words sorted by frequency and alphabetically for ties. # Example: ```python >>> top_n_words(\\"Hello world! Hello everyone. This is a test. Hello test world.\\", 2) [\'hello\', \'test\'] >>> top_n_words(\\"a quick brown fox jumps over the lazy dog. a quick brown fox.\\", 3) [\'a\', \'brown\', \'fox\'] >>> top_n_words(\\"This is a test paragraph. The test is great. Great test!\\", 4) [\'test\', \'great\', \'is\', \'a\'] >>> top_n_words(\\"Apple orange banana apple banana orange apple\\", 1) [\'apple\'] >>> top_n_words(\\"Only one word appears once.\\", 5) [\'appears\', \'once\', \'one\', \'only\', \'word\'] ``` # Detailed Steps: 1. Sanitize and normalize the input paragraph (e.g., by converting to lower case and removing punctuation). 2. Split the normalized paragraph into words. 3. Use the `Counter` from the `collections` module to count occurrences of each word. 4. Sort the counts to get the most frequent words first. Break ties by sorting words alphabetically. 5. Return the first `n` words from the sorted list. # Notes: - Ensure the function handles paragraphs with varying punctuation and capitalization. - Consider edge cases with fewer unique words than `n`.","solution":"import re from collections import Counter def top_n_words(paragraph: str, n: int) -> list[str]: Returns the list of `n` most frequent words in the given `paragraph`. Words with the same frequency are sorted alphabetically. # Convert the paragraph to lower case and remove punctuation normalized_paragraph = re.sub(r\'[^a-zA-Z0-9s]\', \'\', paragraph.lower()) # Split the paragraph into individual words words = normalized_paragraph.split() # Count the frequency of each word word_counts = Counter(words) # Sort the words first by frequency (descending) then alphabetically sorted_words = sorted(word_counts.items(), key=lambda item: (-item[1], item[0])) # Extract the top n words top_n = [word for word, count in sorted_words[:n]] return top_n"},{"question":"# Problem Statement You are tasked with developing a function for an online learning platform. The platform has a feature that records the time students spend on different activities. You need to implement a function that determines the maximum amount of time a student spends on a single activity in a given period of time. Write a function `max_consecutive_time` that finds the longest consecutive period a student spends on a single activity given a list of time intervals. # Function Signature ```python def max_consecutive_time(times: List[int]) -> int: ``` # Input * `times` (List[int]): A list of integers representing the amount of time (in minutes) the student spent on consecutive activities. # Output * Returns an integer representing the maximum time spent on any single activity. # Constraints * The input list `times` will contain at least one element. * Each element in `times` is a non-negative integer (0 <= times[i] <= 10^4) # Examples ```python >>> max_consecutive_time([15, 10, 20, 10, 5, 5, 5, 15]) 15 >>> max_consecutive_time([0, 0, 0]) 0 >>> max_consecutive_time([30, 10, 30, 30, 5, 5, 30]) 30 >>> max_consecutive_time([10]) 10 >>> max_consecutive_time([5, 5, 5, 5]) 5 ``` # Hints * Iterate through the list while keeping track of the maximum time encountered so far. * Consider edge cases where the list contains identical values or a single element.","solution":"from typing import List def max_consecutive_time(times: List[int]) -> int: Returns the maximum time spent on any single activity. if not times: return 0 max_time = times[0] for time in times: if time > max_time: max_time = time return max_time"},{"question":"# Coding Question: Implementing Binary Search with Duplicates In this task, you will implement the binary search algorithm to find the first and last occurrence of a target value in a sorted list that may contain duplicate values. Function Signature: ```python def search_range(nums: list[int], target: int) -> list[int]: pass ``` # Input: - **nums**: A list of integers sorted in non-decreasing order. - **target**: An integer representing the value to search for. # Output: - A list with two integers, where the first integer is the index of the first occurrence of `target` in `nums`, and the second integer is the index of the last occurrence of `target` in `nums`. If `target` is not found in `nums`, return `[-1, -1]`. # Constraints: - The length of `nums` is `n` (0 <= n <= 10^5). - The elements of `nums` and `target` are integers. # Examples: 1. **Input**: ```python nums = [5, 7, 7, 8, 8, 10] target = 8 ``` **Output**: ```python [3, 4] ``` 2. **Input**: ```python nums = [5, 7, 7, 8, 8, 10] target = 6 ``` **Output**: ```python [-1, -1] ``` 3. **Input**: ```python nums = [] target = 0 ``` **Output**: ```python [-1, -1] ``` # Explanation: In the first example, the target value `8` appears first at index `3` and last at index `4`. In the second example, the target `6` is not present in the list, so the output is `[-1, -1]`. In the third example, the list is empty, so the output is `[-1, -1]`. # Notes: Ensure that your implementation handles edge cases such as: - The target value not being present in `nums`. - The list `nums` being empty. - All elements in the list being the same as the target value.","solution":"def search_range(nums: list[int], target: int) -> list[int]: def binary_search(nums, target, find_first): left, right = 0, len(nums) - 1 result = -1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: result = mid if find_first: right = mid - 1 else: left = mid + 1 elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return result first_occurrence = binary_search(nums, target, True) last_occurrence = binary_search(nums, target, False) return [first_occurrence, last_occurrence]"},{"question":"# Scenario A software development team is creating a web application that allows users to manage their daily tasks. The core of this application is a task management system where users can create, update, delete, and get a list of tasks. Each task has a unique ID, a description, a status (e.g., \\"Pending\\", \\"Completed\\"), and a due date. The team has noticed performance issues when dealing with a large number of tasks and aims to improve the efficiency of the system by implementing an indexing mechanism. # Task You are required to improve the existing task management system by adding a rudimentary indexing mechanism to speed up retrieval operations. Specifically, implement a method to add an index on task descriptions to facilitate fast searches based on task descriptions. **Function to Implement**: Create a class `TaskManager` with the following methods: - `add_task(task)`: Adds a new task to the system. The task is a dictionary with keys \\"id\\", \\"description\\", \\"status\\", and \\"due_date\\". - `remove_task(task_id)`: Removes a task from the system by its unique ID. - `get_task(task_id)`: Retrieves a task by its unique ID. - `find_tasks_by_description(keyword)`: Returns a list of tasks containing the specified keyword in their description. This method should use the index to enable fast search operations. **Input and Output Formats**: - All method inputs will be standard Python types (integers, strings, and dictionaries). - `add_task` and `remove_task` do not return any value. - `get_task` returns a task dictionary if found, otherwise returns `None`. - `find_tasks_by_description` returns a list of task dictionaries with descriptions containing the specified keyword. **Constraints**: - Ensure that indexing operations (adding, removing, and searching) are optimized for performance. - Assume that tasks are unique by their ID. # Steps to Complete 1. Implement a class `TaskManager` with the methods outlined above. 2. Implement an index structure within the class to facilitate fast lookups by task descriptions. 3. Ensure that the `add_task`, `remove_task`, `get_task`, and `find_tasks_by_description` methods work efficiently using the index. **Example Usage**: ```python task_manager = TaskManager() task_manager.add_task({\\"id\\": 1, \\"description\\": \\"Write unit tests\\", \\"status\\": \\"Pending\\", \\"due_date\\": \\"2023-11-01\\"}) task_manager.add_task({\\"id\\": 2, \\"description\\": \\"Implement feature A\\", \\"status\\": \\"Completed\\", \\"due_date\\": \\"2023-10-15\\"}) task = task_manager.get_task(1) # Should return the task with ID 1 tasks = task_manager.find_tasks_by_description(\\"unit\\") # Should return a list containing the task with description \\"Write unit tests\\" task_manager.remove_task(2) task = task_manager.get_task(2) # Should return None, as task with ID 2 has been removed ``` **Note:** Emphasis should be on ensuring the indexing mechanism optimizes for searching by descriptions, reflecting improvements in performance over basic linear search methods.","solution":"from collections import defaultdict class TaskManager: def __init__(self): self.tasks = {} self.index = defaultdict(list) def add_task(self, task): self.tasks[task[\\"id\\"]] = task for word in task[\\"description\\"].split(): self.index[word.lower()].append(task[\\"id\\"]) def remove_task(self, task_id): if task_id in self.tasks: task = self.tasks[task_id] for word in task[\\"description\\"].split(): self.index[word.lower()].remove(task_id) del self.tasks[task_id] def get_task(self, task_id): return self.tasks.get(task_id, None) def find_tasks_by_description(self, keyword): keyword = keyword.lower() if keyword in self.index: return [self.tasks[task_id] for task_id in self.index[keyword]] return [] # Example usage of the TaskManager class: task_manager = TaskManager() task_manager.add_task({\\"id\\": 1, \\"description\\": \\"Write unit tests\\", \\"status\\": \\"Pending\\", \\"due_date\\": \\"2023-11-01\\"}) task_manager.add_task({\\"id\\": 2, \\"description\\": \\"Implement feature A\\", \\"status\\": \\"Completed\\", \\"due_date\\": \\"2023-10-15\\"}) task = task_manager.get_task(1) tasks = task_manager.find_tasks_by_description(\\"unit\\") task_manager.remove_task(2) task = task_manager.get_task(2)"},{"question":"**Scenario**: You are developing a system for managing an online library catalog. One of the critical features of this system is the ability to manage a set of books, including adding, removing, and searching for books by their title. Each book is identified by a unique title and also contains an author\'s name. **Task**: Write a class implementation that can manage the collection of books. Your class should be named `LibraryCatalog` and include the following methods: 1. `add_book(title: str, author: str) -> None` 2. `remove_book(title: str) -> None` 3. `search_book(title: str) -> str` Each method should: - `add_book`: Add a new book with a given title and author to the collection. If a book with the same title already exists, it should update the author\'s name. - `remove_book`: Remove a book from the collection by its title. If the book does not exist, it should do nothing. - `search_book`: Search for a book by its title. Return the author\'s name if the book is found. If it\'s not found, return a message indicating the book is not in the catalog. # Constraints 1. The title and author names are non-empty strings with a maximum length of 100 characters. 2. The catalog can hold at most 10,000 books. # Requirements 1. Ensure that the implementation handles edge cases, such as attempting to remove or search for a non-existent book. 2. Provide error handling for potential issues (e.g., invalid input data). # Expected Input and Output Format * **add_book(title: str, author: str) -> None** - **Input**: `title = \\"1984\\"`, `author = \\"George Orwell\\"` - **Output**: `None` * **remove_book(title: str) -> None** - **Input**: `title = \\"1984\\"` - **Output**: `None` * **search_book(title: str) -> str** - **Input**: `title = \\"1984\\"` - **Output**: `\\"George Orwell\\"` # Performance 1. The solution should be efficient with operations like add, remove, and search running in average constant time. # Example Usage ```python catalog = LibraryCatalog() catalog.add_book(\\"1984\\", \\"George Orwell\\") assert catalog.search_book(\\"1984\\") == \\"George Orwell\\" catalog.add_book(\\"1984\\", \\"G. Orwell\\") assert catalog.search_book(\\"1984\\") == \\"G. Orwell\\" catalog.remove_book(\\"1984\\") assert catalog.search_book(\\"1984\\") == \\"Book not found in catalog\\" ```","solution":"class LibraryCatalog: def __init__(self): self.books = {} # Using a dictionary to store the books def add_book(self, title: str, author: str) -> None: if not title or not author or len(title) > 100 or len(author) > 100: raise ValueError(\\"Title and author must be non-empty strings with a maximum length of 100 characters.\\") self.books[title] = author def remove_book(self, title: str) -> None: if title in self.books: del self.books[title] def search_book(self, title: str) -> str: return self.books.get(title, \\"Book not found in catalog\\")"},{"question":"# Context You are developing a video streaming service that needs to buffer video data efficiently. To optimize performance, you have been assigned to implement a feature that calculates the maximum buffer time that can be provided without disrupting the streaming service. This involves managing buffer sizes dynamically based on incoming data packets. # Problem Statement Create a function `max_buffer_time` which takes the following arguments: 1. `packet_sizes`: a list of integers, where each integer represents the size of a data packet arriving to be buffered. 2. `total_buffer_size`: an integer representing the maximum buffer size. The function should return an integer representing the maximum buffer time, measured in terms of the number of packets that can be accommodated consecutively without exceeding the total buffer size. # Input - `packet_sizes`: List of integers `[p1, p2, ..., pn]` (1 ≤ packet_sizes[i] ≤ 1000) where `1 ≤ n ≤ 1000` indicates the size of each incoming data packet. - `total_buffer_size`: an integer (1 ≤ total_buffer_size ≤ 10,000) representing the total buffer capacity. # Output - Returns a single integer representing the maximum number of consecutive packets that can be buffered without exceeding the total buffer size. # Constraints Ensure your function handles various edge cases, including: - Packets with the same size. - Total buffer size smaller than any single packet size. - Large number of packets and variations in packet sizes. # Example ```python packet_sizes = [100, 200, 300, 400, 500] total_buffer_size = 800 max_buffer_time(packet_sizes, total_buffer_size) # Expected Output: 3 ``` # Notes - The function should aim for an efficient solution, preferably in O(n) or O(n log n) time complexity. - Test your implementation with different buffer sizes and packet arrangements to ensure robustness. # Explanation In the given example, the function calculates that the maximum number of packets which fit consecutively into the buffer without exceeding the buffer size of 800 is 3 (i.e., the packets [100, 200, 300]). The 4th packet would exceed the buffer size, thus the function returns 3.","solution":"def max_buffer_time(packet_sizes, total_buffer_size): Returns the maximum number of consecutive packets that can be buffered without exceeding the total buffer size. :param packet_sizes: List of integers representing the sizes of incoming data packets. :param total_buffer_size: Integer representing the total buffer size capacity. :return: Integer representing the maximum number of consecutive packets that can be buffered. current_sum = 0 max_packets = 0 for packet in packet_sizes: if current_sum + packet <= total_buffer_size: current_sum += packet max_packets += 1 else: break return max_packets"},{"question":"# Coding Assessment Question Context You are developing a feature for a search engine that filters stop words out of search queries. Stop words are commonly used words (such as \\"the\\", \\"is\\", \\"in\\") that are typically ignored to enhance the search results\' relevance. Task Write a function `filter_stop_words(query: str, stop_words: set) -> str` that takes a search query and a set of stop words. This function should return the query after removing all stop words, preserving the order of the remaining words. Input * A single string `query`, where `0 <= len(query) <= 1000`. * A set of strings `stop_words`, where each stop word is a lowercase alphanumeric string and the set contains up to 1000 words. Output * A string with all stop words removed. If all words are removed, return an empty string. Constraints * The query will consist of words separated by single spaces. * Stop words are case-insensitive, so both \\"The\\" and \\"the\\" should be treated the same. * Preserve the original ordering and spacing of the words that are not stop words. * Your solution should handle large queries efficiently. Examples ```python assert filter_stop_words(\\"The quick brown fox jumps over the lazy dog\\", {\\"the\\", \\"over\\", \\"is\\"}) == \\"quick brown fox jumps lazy dog\\" assert filter_stop_words(\\"Hello world\\", {\\"hello\\"}) == \\"world\\" assert filter_stop_words(\\"To be or not to be\\", {\\"to\\", \\"be\\", \\"or\\", \\"not\\"}) == \\"\\" assert filter_stop_words(\\"\\", {\\"a\\", \\"the\\"}) == \\"\\" assert filter_stop_words(\\"a b c d e\\", {\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\"}) == \\"\\" assert filter_stop_words(\\"Python programming is fun\\", {\\"is\\", \\"fun\\"}) == \\"Python programming\\" ``` **Note**: Words in the query should be compared in a case-insensitive manner when filtering stop words, but the case of the remaining words should be preserved in the output.","solution":"def filter_stop_words(query: str, stop_words: set) -> str: Filters out the stop words from the query. Parameters: query (str): The search query from which to filter out the stop words. stop_words (set): A set of stop words to filter out from the query. Returns: str: The query with the stop words removed, preserving the order of the remaining words. # Convert stop_words to lower case to handle case insensitivity stop_words = {word.lower() for word in stop_words} # Split the query into words and filter those not in stop_words filtered_words = [word for word in query.split() if word.lower() not in stop_words] # Join the filtered words back into a single string with spaces return \' \'.join(filtered_words)"},{"question":"# Scenario A social media platform is working on enhancing its recommendation system for friend suggestions. As part of this, they want to analyze the degree of similarity between the interests of users. This involves calculating the cosine similarity between interest vectors of different users. # Task Implement a function `cosine_similarity` which takes two lists of integers `user1_interests` and `user2_interests` representing the interests of two users, and returns the cosine similarity between them. # Input - Two lists of integers: - `user1_interests` (list of integers representing the first user\'s interests) - `user2_interests` (list of integers representing the second user\'s interests) # Output - A single floating-point number representing the cosine similarity between the two interest vectors. # Constraints - Both lists will have the same length. - Each integer in the lists will range from 0 to 1 (0 meaning no interest and 1 meaning interest). - The list length will be between 1 and 100 inclusive. # Performance Requirements - Your solution should handle typical use cases efficiently but does not need to optimize for extremely high precision. # Example Given two users with the following interest vectors: - `user1_interests = [1, 0, 1, 1, 0, 1]` - `user2_interests = [0, 1, 1, 0, 1, 1]` The function should return approximately `0.5`. # Note Do not alter the prototype of the provided function. Make sure to handle cases when the lists have no common interest i.e., one of the possible outputs is `0.0` when there is no similarity. ```python from typing import List import math def cosine_similarity(user1_interests: List[int], user2_interests: List[int]) -> float: Calculate the cosine similarity between two interest vectors. Args: user1_interests (list): Interest vector of the first user. user2_interests (list): Interest vector of the second user. Returns: float: Cosine similarity between the two interest vectors. # Validate that the two lists have the same length if len(user1_interests) != len(user2_interests): raise ValueError(\\"Interest lists must have the same length.\\") # Compute the dot product of the interest vectors dot_product = sum(u1 * u2 for u1, u2 in zip(user1_interests, user2_interests)) # Compute the magnitude of each interest vector magnitude_user1 = math.sqrt(sum(u1 ** 2 for u1 in user1_interests)) magnitude_user2 = math.sqrt(sum(u2 ** 2 for u2 in user2_interests)) # Handle the case where one of the vectors has zero magnitude if magnitude_user1 == 0 or magnitude_user2 == 0: return 0.0 # Compute the cosine similarity cosine_similarity_value = dot_product / (magnitude_user1 * magnitude_user2) if not (0 <= cosine_similarity_value <= 1): raise ValueError(\\"Cosine similarity should be in the range [0, 1].\\") return cosine_similarity_value ```","solution":"from typing import List import math def cosine_similarity(user1_interests: List[int], user2_interests: List[int]) -> float: Calculate the cosine similarity between two interest vectors. Args: user1_interests (list): Interest vector of the first user. user2_interests (list): Interest vector of the second user. Returns: float: Cosine similarity between the two interest vectors. # Validate that the two lists have the same length if len(user1_interests) != len(user2_interests): raise ValueError(\\"Interest lists must have the same length.\\") # Compute the dot product of the interest vectors dot_product = sum(u1 * u2 for u1, u2 in zip(user1_interests, user2_interests)) # Compute the magnitude of each interest vector magnitude_user1 = math.sqrt(sum(u1 ** 2 for u1 in user1_interests)) magnitude_user2 = math.sqrt(sum(u2 ** 2 for u2 in user2_interests)) # Handle the case where one of the vectors has zero magnitude if magnitude_user1 == 0 or magnitude_user2 == 0: return 0.0 # Compute the cosine similarity cosine_similarity_value = dot_product / (magnitude_user1 * magnitude_user2) return cosine_similarity_value"},{"question":"# Problem Statement Design and implement a function `reverse_list_of_words` that takes a string of words separated by spaces, and returns a new string with the words in reverse order. The function should ensure that the relative order of the words is reversed and trailing or leading spaces are removed. Function Signature ```python def reverse_list_of_words(sentence: str) -> str: ``` # Input * `sentence`: A string containing words separated by spaces. It may have leading, trailing, or multiple spaces between words. # Output * Returns a string with words in reversed order, with single spaces separating words and no leading or trailing spaces. # Constraints * The length of `sentence` will be in the range [0, 10000]. # Performance Requirements * Aim for a solution that processes the input string in a linear pass (O(n) complexity), where n is the length of the string. # Examples ```python assert reverse_list_of_words(\\"Hello World\\") == \\"World Hello\\" assert reverse_list_of_words(\\" The sky is blue \\") == \\"blue is sky The\\" assert reverse_list_of_words(\\"a good example\\") == \\"example good a\\" assert reverse_list_of_words(\\" This code rocks \\") == \\"rocks code This\\" ``` # Description The provided examples highlight typical uses where the sentence should be split into words, reversed, and joined back together with a single space. The function should handle spaces correctly by removing any excess leading, trailing, or multiple spaces between words. # Edge Cases * Empty string input. * String with only spaces. * String with multiple spaces between words. Design your function `reverse_list_of_words` by appropriately splitting, reversing, and joining the words while handling various spacing scenarios to meet the requirements.","solution":"def reverse_list_of_words(sentence: str) -> str: This function takes a string of words separated by spaces and returns a new string with the words in reverse order with single spaces separating words and no leading or trailing spaces. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"# Problem Statement You are responsible for maintaining the performance of a certain system that relies on a queue structure to handle tasks. The queue follows a first-in-first-out (FIFO) policy. Your task is to create a function that simulates the behavior of this queue system for a series of operations. Each operation is represented by a tuple, where: - The first element is a string indicating the type of operation: `\\"enqueue\\"` or `\\"dequeue\\"`. - The second element for an `\\"enqueue\\"` operation is an integer representing the task ID to be added to the queue. - The second element for a `\\"dequeue\\"` operation is ignored. Write a function named `simulate_queue` that takes a list of such operations and returns a list of integers representing the IDs of the tasks that were successfully dequeued in the order they were removed from the queue. # Requirements: Implement the following function: ```python from typing import List, Tuple def simulate_queue(operations: List[Tuple[str, int]]) -> List[int]: pass ``` # Example: ```python # Example Usage operations = [ (\\"enqueue\\", 5), (\\"enqueue\\", 3), (\\"dequeue\\", None), (\\"enqueue\\", 7), (\\"dequeue\\", None) ] print(simulate_queue(operations)) # Output: [5, 3] ``` # Additional Examples: ```python operations = [ (\\"enqueue\\", 1), (\\"enqueue\\", 2), (\\"enqueue\\", 3), (\\"dequeue\\", None), (\\"dequeue\\", None), (\\"dequeue\\", None), ] print(simulate_queue(operations)) # Output: [1, 2, 3] operations = [ (\\"dequeue\\", None), (\\"enqueue\\", 4), (\\"dequeue\\", None), (\\"dequeue\\", None), (\\"enqueue\\", 8) ] print(simulate_queue(operations)) # Output: [4] operations = [ (\\"enqueue\\", 10), (\\"enqueue\\", 20), (\\"enqueue\\", 30), (\\"dequeue\\", None), (\\"enqueue\\", 40), (\\"dequeue\\", None), (\\"dequeue\\", None), (\\"dequeue\\", None) ] print(simulate_queue(operations)) # Output: [10, 20, 30, 40] ``` # Notes: * If a `\\"dequeue\\"` operation is attempted on an empty queue, ignore it. * Ensure the function handles multiple operations, and the return list order matches the order of successful dequeues. * The input list of operations may be empty, in which case the function should return an empty list.","solution":"from typing import List, Tuple def simulate_queue(operations: List[Tuple[str, int]]) -> List[int]: queue = [] dequeued_items = [] for operation in operations: if operation[0] == \\"enqueue\\": queue.append(operation[1]) elif operation[0] == \\"dequeue\\" and queue: dequeued_items.append(queue.pop(0)) return dequeued_items"},{"question":"# Task Distribution Problem You are given a set of `N` tasks and `M` workers. Each worker has a certain skill level that allows them to perform specific tasks. A worker can only take on a task if their skill level is greater than or equal to the required skill level for that task. Each worker can only complete one task, and each task must be assigned to exactly one worker. Your goal is to determine the maximum number of tasks that can be completed given these constraints. # Function Signature ```python def max_completed_tasks(task_skills: List[int], worker_skills: List[int]) -> int: pass ``` # Input * `task_skills` (List[int]): A list of integers where each element represents the skill level required to complete a specific task. * For example, `[2, 3, 1, 4]` means: * Task 0 requires a skill level of 2. * Task 1 requires a skill level of 3. * Task 2 requires a skill level of 1. * Task 3 requires a skill level of 4. * `worker_skills` (List[int]): A list of integers where each element represents the skill level of a worker. * For example, `[3, 2, 4]` means: * Worker 0 has a skill level of 3. * Worker 1 has a skill level of 2. * Worker 2 has a skill level of 4. # Output * Returns (int): The maximum number of tasks that can be completed according to the given constraints. # Constraints * 1 <= len(task_skills) <= 50 * 1 <= len(worker_skills) <= 50 * 1 <= task_skills[i] <= 100 * 1 <= worker_skills[i] <= 100 # Example ```python assert max_completed_tasks([2, 3, 1, 4], [3, 2, 4]) == 3 ``` # Explanation For the provided example, the function should return `3`, meaning there are 3 tasks that can be completed given the worker skills. Notes * A greedy algorithm or a sorting-based approach might be appropriate to solve this problem efficiently. * Consider edge cases such as no workers, no tasks, and skill mismatches.","solution":"from typing import List def max_completed_tasks(task_skills: List[int], worker_skills: List[int]) -> int: Returns the maximum number of tasks that can be completed given the workers\' skills. # Sort both lists task_skills.sort() worker_skills.sort() # Initialize pointers for both lists task_index = worker_index = 0 completed_tasks = 0 while task_index < len(task_skills) and worker_index < len(worker_skills): if worker_skills[worker_index] >= task_skills[task_index]: # Assign the task to the worker completed_tasks += 1 task_index += 1 # Move to the next worker worker_index += 1 return completed_tasks"},{"question":"# Problem Statement You are given two lists of integers representing the coordinates of two points in a 2D plane. Your task is to compute the Euclidean distance between these two points and to determine whether the point represented by the second list is at an integer distance from the point represented by the first list. 1. **Compute Euclidean Distance**: Write a function named `euclidean_distance` that accepts two lists of integers, each containing exactly two elements, and returns a float representing the Euclidean distance between the points. If the input does not meet the criteria, your function should raise a `ValueError`. 2. **Check for Integer Distance**: Write a function named `is_integer_distance` that accepts two lists of integers, each containing exactly two elements, and returns a boolean indicating whether the Euclidean distance between the points is an integer. If the input does not meet the criteria, your function should raise a `ValueError`. # Requirements * Implement the functions according to the following prototypes: ```python def euclidean_distance(point1: list, point2: list) -> float: # Your code here def is_integer_distance(point1: list, point2: list) -> bool: # Your code here ``` * **Input Constraints**: * Each list, `point1` and `point2`, contains exactly two integers representing x and y coordinates, respectively. * Valid input consists of finite integers only. # Examples The `euclidean_distance` function should work as follows: * `euclidean_distance([0, 0], [3, 4])` should return `5.0`. * `euclidean_distance([2, 3], [6, 8])` should return approximately `6.4031`. * `euclidean_distance([1, 1], [1, 1])` should return `0.0`. * `euclidean_distance([1, 2], [3])` should raise a `ValueError`. The `is_integer_distance` function should work as follows: * `is_integer_distance([0, 0], [3, 4])` should return `True`. * `is_integer_distance([2, 3], [6, 8])` should return `False`. * `is_integer_distance([1, 1], [1, 1])` should return `True`. * `is_integer_distance([1, 2], [3])` should raise a `ValueError`. # Notes: * Ensure that your code is efficient and handles edge cases effectively. * Use appropriate error handling to manage invalid inputs.","solution":"import math def euclidean_distance(point1: list, point2: list) -> float: Calculate the Euclidean distance between two points in a 2D plane. Args: point1 (list): List containing two integers representing the first point. point2 (list): List containing two integers representing the second point. Returns: float: Euclidean distance between the two points. Raises: ValueError: If the input lists do not contain exactly two elements each. if len(point1) != 2 or len(point2) != 2: raise ValueError(\\"Each point must contain exactly two integers.\\") return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) def is_integer_distance(point1: list, point2: list) -> bool: Check whether the Euclidean distance between two points is an integer. Args: point1 (list): List containing two integers representing the first point. point2 (list): List containing two integers representing the second point. Returns: bool: True if the Euclidean distance is an integer; otherwise, False. Raises: ValueError: If the input lists do not contain exactly two elements each. distance = euclidean_distance(point1, point2) return distance.is_integer()"},{"question":"# Binary Tree Node Swap You are given a binary tree, and your task is to implement a function that swaps every left node with its corresponding right node at every level of the tree. Task Implement a function named `swap_at_each_level` that performs the swapping operation on a given binary tree. Input * The binary tree is represented using its root node, and each node has two pointers, `left` and `right`, which point to the left and right children, respectively. * The `swap_at_each_level` function should take the root node of the binary tree as its single input. Output * The function should return the root node of the modified binary tree after performing the swaps. Constraints * If the tree is empty (i.e., the root node is `None`), the function should return `None`. Examples Consider the following binary tree: ``` 1 / 2 3 / / 4 5 6 7 ``` After performing `swap_at_each_level`, the tree should become: ``` 1 / 3 2 / / 7 6 5 4 ``` Implementation ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def swap_at_each_level(root: TreeNode) -> TreeNode: Swaps every left node with its corresponding right node at each level. Parameters: - root: (TreeNode) The root node of the binary tree. Returns: - TreeNode: The root node of the binary tree after swaps. if not root: return None queue = [root] while queue: next_queue = [] for node in queue: if node.left and node.right: node.left, node.right = node.right, node.left if node.left: next_queue.append(node.left) if node.right: next_queue.append(node.right) queue = next_queue return root ``` Additional Information Make sure your function accurately handles empty trees and completes the level-wise swaps correctly for both balanced and unbalanced trees.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def swap_at_each_level(root: TreeNode) -> TreeNode: Swaps every left node with its corresponding right node at each level. Parameters: - root: (TreeNode) The root node of the binary tree. Returns: - TreeNode: The root node of the binary tree after swaps. if not root: return None queue = [root] while queue: next_queue = [] for node in queue: if node.left and node.right: node.left, node.right = node.right, node.left if node.left: next_queue.append(node.left) if node.right: next_queue.append(node.right) queue = next_queue return root"},{"question":"# Problem Statement You are given a list of `n` integers, representing the heights of buildings in a row, and you are asked to compute the number of \\"sunset views\\". A building has a sunset view if it is strictly taller than all the buildings that come after it to the right. Write a function to count the number of buildings that have such a view. # Function Signature ```python def count_sunset_views(buildings: List[int]) -> int: pass ``` # Input - A list of integers `buildings` (1 ≤ len(buildings) ≤ 100,000). Each integer represents a height of a building, where (1 ≤ text{height} ≤ 10,000). # Output - An integer representing the number of buildings that have a sunset view. # Constraints - The buildings are numbered from left to right. - Your implementation should efficiently handle the upper limits of the constraints. # Example ```python assert count_sunset_views([3, 7, 8, 3, 6, 1]) == 3 assert count_sunset_views([1, 4, 5, 8]) == 1 assert count_sunset_views([9, 7, 1, 2, 8]) == 3 ``` # Explanation - For the list `[3, 7, 8, 3, 6, 1]`, the buildings with sunset views are those at indices 2, 4, and 5 (i.e., heights 8, 6, and 1). - For the list `[1, 4, 5, 8]`, only the last building can see the sunset. - For the list `[9, 7, 1, 2, 8]`, the buildings with sunset views are those at indices 0, 3, and 4 (i.e., heights 9, 2, and 8). Write a solution that performs efficiently and correctly handles the given input constraints.","solution":"from typing import List def count_sunset_views(buildings: List[int]) -> int: Returns the number of buildings with a sunset view. A building has a sunset view if it is strictly taller than all the buildings that come after it. Args: buildings (List[int]): List of integers representing heights of buildings. Returns: int: Number of buildings with a sunset view. if not buildings: return 0 sunset_views = 0 max_height = 0 # Iterate from the end to the beginning of the list. for height in reversed(buildings): if height > max_height: sunset_views += 1 max_height = height return sunset_views"},{"question":"# Largest Palindromic Substring Context You are developing a text processing software, and one of the features requires checking for palindromic substrings within a given string of characters. To optimize this feature, you need to implement an efficient algorithm that can find the largest palindromic substring. Task Write a function `longest_palindromic_substring(s: str) -> str` to find the longest palindromic substring in the given string `s`. Input - `s`: A string `s` of length `n` (1 <= n <= 10^3), which represents the input text. Output - Returns a string, which is the largest palindromic substring in `s`. If there are multiple such substrings of the maximum length, return the one that appears first. Constraints - The characters are case-sensitive; thus, \\"A\\" and \\"a\\" are treated differently. - The solution must handle the constraints efficiently within the given input size limits. Example ```python print(longest_palindromic_substring(\\"babad\\")) # Output: \\"bab\\" or \\"aba\\" print(longest_palindromic_substring(\\"cbbd\\")) # Output: \\"bb\\" print(longest_palindromic_substring(\\"a\\")) # Output: \\"a\\" print(longest_palindromic_substring(\\"ac\\")) # Output: \\"a\\" or \\"c\\" ``` Criteria - The solution must be of O(n^2) time complexity or better. - Handle edge cases like single-character strings correctly. - Ensure characters are correctly treated as case-sensitive. Your task is to design a robust function that can efficiently find the longest palindromic substring even when the input size approaches its upper limits.","solution":"def longest_palindromic_substring(s: str) -> str: def expand_around_center(left: int, right: int) -> str: while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] if len(s) == 0: return \\"\\" longest = \\"\\" for i in range(len(s)): # Odd length palindromes odd_palindrome = expand_around_center(i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Even length palindromes even_palindrome = expand_around_center(i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"# Anagram Checker with Constraints You are given a function that checks whether two input strings are anagrams of each other. The function should consider anagrams case-insensitively and should disregard non-alphabetic characters in the comparison. Additionally, the function should indicate if the anagram is valid within a certain range of a given string length. Function Signature ```python def is_valid_anagram(s1: str, s2: str, min_length: int, max_length: int) -> bool: ``` # Input * `s1` (str): The first input string. * `s2` (str): The second input string. * `min_length` (int): The minimum length of the strings to be considered for checking anagram (inclusive). * `max_length` (int): The maximum length of the strings to be considered for checking anagram (inclusive). # Output * (bool): `True` if the strings are valid anagrams within the specified length constraints, `False` otherwise. # Implementation Steps 1. **String Cleanup**: Remove all non-alphabetic characters from both `s1` and `s2` and convert them to lower case. 2. **Length Check**: Verify if the cleaned strings\' lengths are within the specified range `[min_length, max_length]`. 3. **Anagram Check**: Determine if the cleaned strings are anagrams of each other. 4. **Return Result**: Return `True` if both the length check and anagram check pass, otherwise return `False`. # Constraints * The lengths of the input strings `s1` and `s2` will be in the range [1, 10^5]. * The range `[min_length, max_length]` will be such that `1 ≤ min_length ≤ max_length ≤ 10^5`. # Example ```python # Test case 1 s1 = \\"Astronomer\\" s2 = \\"Moon starer!\\" min_length = 3 max_length = 12 print(is_valid_anagram(s1, s2, min_length, max_length)) # Expected output: True (since \'astronomer\' and \'moonstarer\' are anagrams and lengths are within range) # Test case 2 s1 = \\"Hello, World!\\" s2 = \\"dlroW ,olleH\\" min_length = 5 max_length = 15 print(is_valid_anagram(s1, s2, min_length, max_length)) # Expected output: True (since \'helloworld\' and \'dlrowolleh\' are anagrams and lengths are within range) # Test case 3 s1 = \\"Hi\\" s2 = \\"ih\\" min_length = 3 max_length = 10 print(is_valid_anagram(s1, s2, min_length, max_length)) # Expected output: False (since lengths are less than the minimum required length) ``` # Hints * Utilize Python\'s `str` methods `isalpha()`, `lower()`, and `sorted()` for string manipulation and comparison. * Consider edge cases such as strings with only special characters and different cases.","solution":"def is_valid_anagram(s1: str, s2: str, min_length: int, max_length: int) -> bool: Check if two strings are valid anagrams considering non-alphabetic characters and case-insensitively, and if their lengths are within the specified range. # Clean up strings: remove non-alphabetic characters and convert to lower case cleaned_s1 = \'\'.join(filter(str.isalpha, s1)).lower() cleaned_s2 = \'\'.join(filter(str.isalpha, s2)).lower() # Check if lengths are within the specified range if not (min_length <= len(cleaned_s1) <= max_length and min_length <= len(cleaned_s2) <= max_length): return False # Check if cleaned strings are anagrams return sorted(cleaned_s1) == sorted(cleaned_s2)"},{"question":"# Problem Statement: You are required to implement a function that finds the longest substring without repeating characters from a given string. Your function should return the length of that substring. Focus on an efficient solution that utilizes sliding window and hashing techniques to handle the task in linear time. # Function Signature: ``` def length_of_longest_substring(s: str) -> int: ``` # Input: - `s`: a string containing English letters, digits, symbols, and spaces. # Output: - An integer representing the length of the longest substring without repeating characters. # Constraints: * The length of the string `s` will be in the range [0, 10000]. # Example: Example 1: ``` Input: s = \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. ``` Example 2: ``` Input: s = \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. ``` Example 3: ``` Input: s = \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. ``` Example 4: ``` Input: s = \\"\\" Output: 0 Explanation: The answer is 0, as there are no characters in the string. ``` # Requirements: - Optimize for both time and space complexity. - Ensure the solution handles edge cases, such as an empty string. # Hint: Consider using a sliding window to track the current substring and a set or dictionary to record the characters and their positions in the string. This way, you can efficiently move the window and keep track of the longest substring found.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_map = {} left = 0 longest = 0 for right in range(len(s)): if s[right] in char_map: left = max(char_map[s[right]] + 1, left) char_map[s[right]] = right longest = max(longest, right - left + 1) return longest"},{"question":"# Problem: Movie Ratings Data Aggregator You are given a list of movie reviews from different critics. Each review consists of a movie title, the critic\'s name, and a rating which is an integer between 1 and 10. Your task is to write a function that aggregates these reviews and provides the average rating for each movie. Additionally, the function should handle the following enhancements: 1. **Error Handling**: Manage scenarios where the input data might be improperly formatted or ratings are out of the valid range. 2. **Performance**: Ensure the solution remains efficient even with a large list of reviews. 3. **Extensibility**: Allow the function to be easily modified in the future if additional review details need to be captured (e.g., review date). # Input - A list of tuples, where each tuple contains three elements: - `title` (string): The title of the movie. - `critic` (string): The name of the critic. - `rating` (integer): The rating given by the critic (between 1 and 10). # Output - A dictionary where each key is a movie title and the value is the average rating of that movie. # Constraints - The rating must be an integer between 1 and 10 (inclusive). If the rating is out of this range or any data is improperly formatted, ignore that review. - The solution should handle up to 10,000 reviews efficiently. - Round the average rating to one decimal place. # Example Usage ```python reviews = [ (\\"Inception\\", \\"Critic A\\", 9), (\\"Inception\\", \\"Critic B\\", 8), (\\"The Matrix\\", \\"Critic C\\", 10), (\\"Inception\\", \\"Critic D\\", 7), (\\"The Matrix\\", \\"Critic D\\", 9) ] result = aggregate_movie_ratings(reviews) print(result) # Expected output: { # \\"Inception\\": 8.0, # \\"The Matrix\\": 9.5 # } ``` # Implementation Tips - Use a dictionary to keep track of the total ratings and count of ratings for each movie. - Consider using `try-except` blocks to handle improperly formatted data. - Calculate the average rating by dividing the total of each movie\'s ratings by the count of ratings, and round to one decimal place. - Ensure the function has efficient time complexity to handle large inputs. Solution Template ```python def aggregate_movie_ratings(reviews): from collections import defaultdict totals = defaultdict(int) counts = defaultdict(int) for review in reviews: try: title, critic, rating = review if not isinstance(title, str) or not isinstance(critic, str) or not isinstance(rating, int): continue if rating < 1 or rating > 10: continue totals[title] += rating counts[title] += 1 except ValueError: continue averages = {} for title in totals: averages[title] = round(totals[title] / counts[title], 1) return averages # Example usage: reviews = [ (\\"Inception\\", \\"Critic A\\", 9), (\\"Inception\\", \\"Critic B\\", 8), (\\"The Matrix\\", \\"Critic C\\", 10), (\\"Inception\\", \\"Critic D\\", 7), (\\"The Matrix\\", \\"Critic D\\", 9) ] print(aggregate_movie_ratings(reviews)) ```","solution":"def aggregate_movie_ratings(reviews): from collections import defaultdict totals = defaultdict(int) counts = defaultdict(int) for review in reviews: try: title, critic, rating = review if not isinstance(title, str) or not isinstance(critic, str) or not isinstance(rating, int): continue if rating < 1 or rating > 10: continue totals[title] += rating counts[title] += 1 except ValueError: continue averages = {} for title in totals: averages[title] = round(totals[title] / counts[title], 1) return averages # Example usage: reviews = [ (\\"Inception\\", \\"Critic A\\", 9), (\\"Inception\\", \\"Critic B\\", 8), (\\"The Matrix\\", \\"Critic C\\", 10), (\\"Inception\\", \\"Critic D\\", 7), (\\"The Matrix\\", \\"Critic D\\", 9) ] print(aggregate_movie_ratings(reviews))"},{"question":"# Problem Statement You are given a list of positive integers. Write a Python function that determines the smallest number of elements needed from the list to sum up to at least a given target value. If it is not possible to reach the target sum with the provided integers, the function should return -1. # Input 1. A list of positive integers. 2. An integer, representing the target value. # Output An integer, representing the smallest number of elements needed to reach or exceed the target sum, or -1 if it is not possible. # Constraints 1. The list will contain between 1 and 1000 elements. 2. Each element in the list will be between 1 and 1000 (inclusive). 3. The target value will be a positive integer. # Requirements 1. Your solution should efficiently handle the constraints. 2. Provide complete and well-documented code. # Example Consider the following example list and target value: ```python lst = [1, 2, 3, 4, 5] target = 11 ``` The correct output would be `3` (since `[4, 4, 3]` or `[5, 4, 2]` or any other combination that sums to at least 11 can be achieved with 3 elements). # Function Signature ```python def min_elements_to_sum(lst: List[int], target: int) -> int: # Add your implementation here ``` # Implementation Implement the `min_elements_to_sum` function and ensure that it returns the correct result for the provided example and other test cases that meet the constraints.","solution":"from typing import List def min_elements_to_sum(lst: List[int], target: int) -> int: Determines the smallest number of elements needed from the list to sum up to at least the target value. Returns -1 if it is not possible to reach the target sum with the provided integers. Parameters: lst (List[int]): The list of positive integers. target (int): The target sum value. Returns: int: The smallest number of elements needed, or -1 if not possible. lst.sort(reverse=True) current_sum = 0 count = 0 for num in lst: current_sum += num count += 1 if current_sum >= target: return count return -1"},{"question":"You are tasked with implementing a function that translates text using the Google Translate API. The objective is to write a function that takes in text and a target language code and returns the translated text. # Function to Implement Implement a function `translate_text(text: str, target_language: str) -> str` that takes a string `text` and a target language code `target_language`, and returns the translated text string. # Constraints * The `text` input can be any non-empty string containing alphabetic and punctuation characters. * The `target_language` should be a valid language code (e.g., \'en\' for English, \'es\' for Spanish, \'fr\' for French, etc.). * Your function should handle API errors gracefully by returning an empty string. * You can assume the `text` and `target_language` inputs are valid and do not require further validation within the function. # API Instructions * Use the Google Translate API endpoint for translation. * You will need to include the appropriate headers and parameters as required by the Google Translate API. * Handle possible exceptions related to network errors, API errors, and JSON decoding errors appropriately. # Expected Input and Output * **Input**: A valid text string and a target language code. * **Output**: The translated text as a string. In case of errors, return an empty string. # Example ```python translate_text(\\"Hello, how are you?\\", \\"es\\") ``` Expected output: ```python \\"Hola, ¿cómo estás?\\" ``` # Implementation Note Use the `requests` module to make the HTTP call, and ensure to include appropriate error handling for network and API issues. remember to include any necessary imports and settings required for API authentication. ```python import requests def translate_text(text: str, target_language: str) -> str: url = \\"https://translation.googleapis.com/language/translate/v2\\" payload = { \'q\': text, \'target\': target_language, \'format\': \'text\' } headers = { \'Content-Type\': \'application/json\', \'Authorization\': \'Bearer YOUR_API_KEY\' } try: response = requests.post(url, json=payload, headers=headers) response.raise_for_status() data = response.json() return data[\'data\'][\'translations\'][0][\'translatedText\'] except (requests.exceptions.RequestException, KeyError, IndexError): return \\"\\" ```","solution":"import requests def translate_text(text: str, target_language: str) -> str: url = \\"https://translation.googleapis.com/language/translate/v2\\" payload = { \'q\': text, \'target\': target_language, \'format\': \'text\', \'key\': \'YOUR_API_KEY\' } headers = { \'Content-Type\': \'application/json\' } try: response = requests.post(url, json=payload, headers=headers) response.raise_for_status() data = response.json() return data[\'data\'][\'translations\'][0][\'translatedText\'] except (requests.exceptions.RequestException, KeyError, IndexError): return \\"\\""},{"question":"# Prime Factors Calculation You are tasked with writing a function that finds all the prime factors of a given integer. The function should return a list where each element is a prime factor of the input number, repeated as many times as it divides the number. Function Signature ```python def prime_factors(n: int) -> list: Computes the prime factors of the given integer. Args: n: The input integer (as a positive integer greater than 1). Returns: A list of integers representing the prime factors of the input number. Example: >>> prime_factors(28) [2, 2, 7] >>> prime_factors(45) [3, 3, 5] # Your code goes here ``` Input and Output * **Input**: * `n` (int): The integer for which you need to find the prime factors. It will always be greater than 1. * **Output**: - Return a list of integers representing the prime factors of the input number. Each prime factor should be included in the list the number of times it appears in the factorization. Constraints * The input integer `n` will always be greater than 1. Performance Requirements * The function should efficiently handle prime factorization, ideally with a time complexity of O(sqrt(n)). This completes the additional question that maintains the consistency and complexity as stipulated by the guidelines.","solution":"def prime_factors(n: int) -> list: Computes the prime factors of the given integer. Args: n: The input integer (as a positive integer greater than 1). Returns: A list of integers representing the prime factors of the input number. factors = [] divisor = 2 while n >= divisor * divisor: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 if n > 1: factors.append(n) return factors"},{"question":"# Problem Statement You are tasked with designing a class that represents a 3D vector and provides various methods for vector operations. Implement a class `Vector3D` that supports vector addition, subtraction, dot product, cross product, and normalization. Additionally, provide a method that returns the magnitude of the vector. # Class Signature ```python class Vector3D: def __init__(self, x: float, y: float, z: float): Initialize a 3D vector with coordinates x, y, and z. def add(self, other: \'Vector3D\') -> \'Vector3D\': Return a new vector that is the sum of this vector and another vector. def subtract(self, other: \'Vector3D\') -> \'Vector3D\': Return a new vector that is the difference between this vector and another vector. def dot(self, other: \'Vector3D\') -> float: Return the dot product of this vector and another vector. def cross(self, other: \'Vector3D\') -> \'Vector3D\': Return a new vector that is the cross product of this vector and another vector. def normalize(self) -> \'Vector3D\': Return a new vector that is the normalized version of this vector. def magnitude(self) -> float: Return the magnitude of this vector. def __repr__(self) -> str: Return a string representation of the vector. ``` # Inputs 1. `x`, `y`, `z`: Float values representing the coordinates of the vector. # Outputs 1. Methods `add`, `subtract`, `dot`, `cross`, and `normalize` should return new vectors or scalar values as described. 2. Method `magnitude` should return a float representing the vector\'s magnitude. 3. Method `__repr__` should return a string in the format \\"Vector3D(x, y, z)\\". # Example ```python v1 = Vector3D(1.0, 2.0, 3.0) v2 = Vector3D(4.0, 5.0, 6.0) assert v1.add(v2) == Vector3D(5.0, 7.0, 9.0) assert v1.subtract(v2) == Vector3D(-3.0, -3.0, -3.0) assert v1.dot(v2) == 32.0 assert v1.cross(v2) == Vector3D(-3.0, 6.0, -3.0) assert v1.magnitude() == (1.0**2 + 2.0**2 + 3.0**2)**0.5 assert v1.normalize().magnitude() == 1.0 # Resulting vector has magnitude 1 assert repr(v1) == \\"Vector3D(1.0, 2.0, 3.0)\\" ``` # Notes - Ensure robust handling of edge cases such as attempting to normalize a zero vector. - Use appropriate numerical precision to avoid floating-point errors. - Make use of Python\'s operator overloading to facilitate more intuitive operations if necessary.","solution":"class Vector3D: def __init__(self, x: float, y: float, z: float): Initialize a 3D vector with coordinates x, y, and z. self.x = x self.y = y self.z = z def add(self, other: \'Vector3D\') -> \'Vector3D\': Return a new vector that is the sum of this vector and another vector. return Vector3D(self.x + other.x, self.y + other.y, self.z + other.z) def subtract(self, other: \'Vector3D\') -> \'Vector3D\': Return a new vector that is the difference between this vector and another vector. return Vector3D(self.x - other.x, self.y - other.y, self.z - other.z) def dot(self, other: \'Vector3D\') -> float: Return the dot product of this vector and another vector. return self.x * other.x + self.y * other.y + self.z * other.z def cross(self, other: \'Vector3D\') -> \'Vector3D\': Return a new vector that is the cross product of this vector and another vector. return Vector3D(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x) def normalize(self) -> \'Vector3D\': Return a new vector that is the normalized version of this vector. mag = self.magnitude() if mag == 0: raise ValueError(\\"Cannot normalize a zero vector\\") return Vector3D(self.x / mag, self.y / mag, self.z / mag) def magnitude(self) -> float: Return the magnitude of this vector. return (self.x**2 + self.y**2 + self.z**2)**0.5 def __repr__(self) -> str: Return a string representation of the vector. return f\\"Vector3D({self.x}, {self.y}, {self.z})\\" def __eq__(self, other): Override the equality operator to compare vectors correctly. return self.x == other.x and self.y == other.y and self.z == other.z"},{"question":"# Scenario Data compression is a fundamental concept in computer science that reduces the size of data to save storage space and transmission time. One of the simplest and most widely used data compression methods is Run-Length Encoding (RLE), which replaces sequences of repeated characters with a single character and a count. # Problem Create two functions: 1. `compress_rle(data: str) -> str`: This function should compress the input `data` string using Run-Length Encoding. 2. `decompress_rle(data: str) -> str`: This function should decompress the RLE compressed string back to its original form. # Requirements - Implement these functions to handle strings consisting of only uppercase English letters (A-Z). - Ensure the `compress_rle` function reduces the size of long sequences efficiently. - Ensure the `decompress_rle` function accurately recovers the original string from the RLE format. - Raise a `ValueError` if the input string for `decompress_rle` is not properly formatted or contains invalid characters. # Function Signatures ```python def compress_rle(data: str) -> str: ... def decompress_rle(data: str) -> str: ... ``` # Input and Output - `compress_rle`: - **Input**: A string `data` consisting of uppercase English letters. - **Output**: A compressed string using RLE, where each sequence of identical characters is replaced by the character followed by its count. - `decompress_rle`: - **Input**: An RLE compressed string. - **Output**: The original string before compression. # Examples - `compress_rle(\\"AAAABBBCCDAA\\")` should return \\"4A3B2C1D2A\\". - `decompress_rle(\\"4A3B2C1D2A\\")` should return \\"AAAABBBCCDAA\\". - `compress_rle(\\"A\\")` should return \\"1A\\". - `decompress_rle(\\"1A\\")` should return \\"A\\". - `decompress_rle(\\"4A3B2C1D2\\")` should raise a `ValueError` with the message \\"Invalid RLE format.\\" # Testing Use Python\'s built-in `doctest` module to provide test cases demonstrating the usage and correctness of the functions.","solution":"def compress_rle(data: str) -> str: if not data: return \'\' compressed = [] i = 0 while i < len(data): count = 1 while i + 1 < len(data) and data[i] == data[i + 1]: i += 1 count += 1 compressed.append(f\\"{count}{data[i]}\\") i += 1 return \'\'.join(compressed) def decompress_rle(data: str) -> str: decompressed = [] i = 0 while i < len(data): if not data[i].isdigit(): raise ValueError(\\"Invalid RLE format\\") count = 0 while i < len(data) and data[i].isdigit(): count = count * 10 + int(data[i]) i += 1 if i >= len(data) or not data[i].isalpha(): raise ValueError(\\"Invalid RLE format\\") decompressed.append(data[i] * count) i += 1 return \'\'.join(decompressed)"},{"question":"# Problem Statement You are tasked to create a function that summarizes a list of integers by calculating the sum, product, maximum, and minimum values of the list. The intention is to offer a multi-statistical overview in one function call, which might be useful in various data analysis or processing contexts. **Function Signature:** ```python def summarize_list(numbers: List[int]) -> Tuple[int, int, int, int]: pass ``` # Input * A list of `n` integers. * ( 1 leq n leq 10^5 ) * Each integer in the list can span from `-10^4` to `10^4`. # Output * A tuple of four integers: the sum, the product, the maximum, and the minimum of the input list. # Constraints * Ensure that your solution handles large lists efficiently, considering both time and space complexity. * Be mindful of integer overflow, especially while calculating the product of a large list of numbers. # Example ```python def summarize_list(numbers: List[int]) -> Tuple[int, int, int, int]: Summarizes the list of integers by calculating the sum, product, maximum, and minimum. Parameters: numbers (List[int]): List of integers. Returns: Tuple[int, int, int, int]: Tuple containing the sum, product, maximum, and minimum of the input list. total_sum = sum(numbers) total_product = 1 for num in numbers: total_product *= num max_val = max(numbers) min_val = min(numbers) return total_sum, total_product, max_val, min_val if __name__ == \\"__main__\\": # Example 1 numbers = [3, 5, 7, 2, 8] print(summarize_list(numbers)) # Expected Output: (25, 1680, 8, 2) # Example 2 numbers = [-1, 2, -3, 4, -5] print(summarize_list(numbers)) # Expected Output: (-3, 120, 4, -5) ``` # Notes * Make sure to follow the provided function signature. * Validate your approach with different input sizes to ensure correctness and performance. * Be aware of potential issues related to integer overflow due to the product calculation. Although Python handles large integers gracefully, optimization considerations might be useful.","solution":"from typing import List, Tuple def summarize_list(numbers: List[int]) -> Tuple[int, int, int, int]: Summarizes the list of integers by calculating the sum, product, maximum, and minimum. Parameters: numbers (List[int]): List of integers. Returns: Tuple[int, int, int, int]: Tuple containing the sum, product, maximum, and minimum of the input list. total_sum = sum(numbers) total_product = 1 for num in numbers: total_product *= num max_val = max(numbers) min_val = min(numbers) return total_sum, total_product, max_val, min_val"},{"question":"# Coding Assessment Question Scenario You have been recruited to enhance a software system that needs efficient text manipulation functionalities. One of your tasks involves implementing an algorithm for reversing the words in a given sentence without altering the sequence of the characters within the words. Task Implement the `reverse_words_in_sentence` function in Python, according to the provided guidelines. The function should take a string containing a sentence and return a string with the words reversed, but the characters within each word should remain in their original order. Guidelines - Implement the `reverse_words_in_sentence` function. - The function should handle edge cases, including empty strings and strings with multiple spaces between words. - Preserve all the whitespace in the original sentence. Function Signature ```python def reverse_words_in_sentence(sentence: str) -> str: pass ``` Input - `sentence`: A string containing a sentence with words separated by spaces. Output - A string with the words reversed but with the characters within each word in their original order. Constraints - Do **not** use Python\'s built-in `split()`, `reverse()`, or `join()` methods. Example ```python assert reverse_words_in_sentence(\\"hello world\\") == \\"world hello\\" assert reverse_words_in_sentence(\\"a b c\\") == \\"c b a\\" assert reverse_words_in_sentence(\\" space in front\\") == \\"front in space \\" ``` Performance Considerations - Aim to achieve a time complexity of O(n) where n is the length of the string, and a space complexity of O(n).","solution":"def reverse_words_in_sentence(sentence: str) -> str: Reverses the words in a given sentence without altering the sequence of characters within the words. if not sentence: return sentence length = len(sentence) result = [] word = [] for i in range(length): if sentence[i] != \' \': word.append(sentence[i]) else: if word: result.insert(0, \'\'.join(word)) word = [] result.insert(0, \' \') if word: result.insert(0, \'\'.join(word)) return \'\'.join(result)"},{"question":"# Problem Statement You\'re working with a text processing system and need to implement additional functionality to handle large bodies of text efficiently. Your goal is to enhance the text editor\'s capabilities with new features. Tasks 1. **Implement \'find_longest_word\' function** Enhance the TextEditor class by adding a method `find_longest_word() -> str`. The function should return the longest word within the text. If there are multiple words with the maximum length, return the first one encountered. 2. **Implement \'replace_word\' function** Add a method `replace_word(old_word: str, new_word: str) -> None` to the TextEditor class. This function should replace all occurrences of `old_word` with `new_word` within the text. # Constraints - The text consists only of words separated by spaces and punctuation (.,;:?!) - The `find_longest_word` method should ignore punctuation when determining the longest word. - The `replace_word` method should ensure that whole words are matched and replaced, and it should be case-sensitive. # Function Signatures ```python def find_longest_word(self) -> str: pass def replace_word(self, old_word: str, new_word: str) -> None: pass ``` # Example - **Before operations** ```python te = TextEditor(\\"This is a sample text, with several words. Longestword should be here.\\") ``` - **Finding the Longest Word** ```python print(te.find_longest_word()) # Output should be \'Longestword\' ``` - **Replacing Word** ```python te.replace_word(\\"sample\\", \\"example\\") print(te.text) # Output should be \'This is a example text, with several words. Longestword should be here.\' ``` **Note**: The provided TextEditor class and text initialization are to be used and modified according to the task requirements.","solution":"import re class TextEditor: def __init__(self, text): self.text = text def find_longest_word(self) -> str: words = re.findall(r\'bw+b\', self.text) longest_word = max(words, key=len) return longest_word def replace_word(self, old_word: str, new_word: str) -> None: pattern = re.compile(rf\'b{re.escape(old_word)}b\') self.text = pattern.sub(new_word, self.text) # Example Usage # te = TextEditor(\\"This is a sample text, with several words. Longestword should be here.\\") # print(te.find_longest_word()) # Outputs: \'Longestword\' # te.replace_word(\\"sample\\", \\"example\\") # print(te.text) # Outputs: \'This is a example text, with several words. Longestword should be here.\'"},{"question":"# Question: Temperature Conversion Between Fahrenheit and Celsius # Context: Temperature conversion is a common task in various applications such as weather forecasts, scientific research, and daily activities. Being able to accurately convert temperatures between Fahrenheit and Celsius is essential for these applications. Given functions to convert temperatures between these two units: # Task: Implement two functions: 1. `fahrenheit_to_celsius` that converts a temperature from Fahrenheit to Celsius. 2. `celsius_to_fahrenheit` that converts a temperature from Celsius to Fahrenheit. # Function Signatures: ```python def fahrenheit_to_celsius(fahrenheit: float) -> float: pass def celsius_to_fahrenheit(celsius: float) -> float: pass ``` # Input: * `fahrenheit` (float): Temperature in Fahrenheit. * `celsius` (float): Temperature in Celsius. # Output: * A float rounded to two decimal points representing the temperature in the converted unit. # Constraints: * The input temperature values can range from -1e3 to 1e3. # Example: ```python >>> fahrenheit_to_celsius(212) 100.00 >>> fahrenheit_to_celsius(32) 0.00 >>> fahrenheit_to_celsius(-40) -40.00 >>> celsius_to_fahrenheit(100) 212.00 >>> celsius_to_fahrenheit(0) 32.00 >>> celsius_to_fahrenheit(-40) -40.00 ``` # Notes: * Use the following formulas for conversion: - Celsius to Fahrenheit: F = (C * 9/5) + 32 - Fahrenheit to Celsius: C = (F - 32) * 5/9 * Ensure the results are accurate up to two decimal points. * Handle both positive and negative temperature values effectively.","solution":"def fahrenheit_to_celsius(fahrenheit: float) -> float: Converts Fahrenheit to Celsius and returns the value rounded to two decimal points. celsius = (fahrenheit - 32) * 5 / 9 return round(celsius, 2) def celsius_to_fahrenheit(celsius: float) -> float: Converts Celsius to Fahrenheit and returns the value rounded to two decimal points. fahrenheit = (celsius * 9 / 5) + 32 return round(fahrenheit, 2)"},{"question":"Question You have been provided with a partially implemented singly linked list. This linked list is composed of nodes, where each node contains a data value and a pointer to the next node. Your task is to implement a method `reverse()` in the `SinglyLinkedList` class. This method should reverse the order of the nodes in the linked list. # Function Signature ```python def reverse(self) -> SinglyLinkedList: ``` # Returns - The modified list (self) with nodes in reversed order. # Constraints - The linked list can have nodes with any data type (generic). - Handle the case where the linked list is empty or contains a single node. # Edge Cases to Consider - Reversing an empty list should not change the list. - Reversing a list with a single node should not change the list. # Example Usage ```python # Example for an existing list llist = SinglyLinkedList() llist.append(1).append(2).append(3) llist.reverse() print(llist) # Should output: [3, 2, 1] # Example for a single-node list single_node_list = SinglyLinkedList() single_node_list.append(1) single_node_list.reverse() print(single_node_list) # Should output: [1] # Example for an empty list empty_list = SinglyLinkedList() empty_list.reverse() print(empty_list) # Should output: [] ```","solution":"class Node: def __init__(self, data): self.data = data self.next = None class SinglyLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if not self.head: self.head = new_node else: current = self.head while current.next: current = current.next current.next = new_node return self def reverse(self) -> \'SinglyLinkedList\': prev = None current = self.head while current: next_node = current.next current.next = prev prev = current current = next_node self.head = prev return self def __str__(self): result = [] current = self.head while current: result.append(current.data) current = current.next return str(result)"},{"question":"# Coding Assessment Question Scenario You are developing a communication platform, where users can send and receive messages. To ensure the safety and sanity of the platform, you need to implement a feature that can detect and remove profane words from messages. We will use the technique of \\"Censoring\\" where you replace each character of the profane word with an asterisk (\'*\'). Task Implement a function `censor_message` that censors the specified list of profane words in the given message string. The function should be case-insensitive and consider words boundaries to replace the exact matches only. Function Signature ```python def censor_message(message: str, profane_words: Sequence[str]) -> str: pass ``` Input * `message`: A string representing the message to be filtered. * `profane_words`: A sequence of strings where each string is considered a profane word. Output * Returns a string where every character in the profane words appearing in the original message is replaced by an asterisk (\'*\'). Constraints * Profane words are non-empty strings. * The message could be empty. * The resultant string should maintain the original message structure, only replacing exact matches of the profane words with asterisks. Performance Requirement * Aim for efficiency in detecting and replacing the profane words. Example ```python >>> censor_message(\\"This is a badword and another badword.\\", [\\"badword\\"]) \\"This is a ******* and another *******.\\" >>> censor_message(\\"Beware of the ugly parts of the city.\\", [\\"ugly\\", \\"parts\\"]) \\"Beware of the **** ***** of the city.\\" >>> censor_message(\\"Clean words only here!\\", [\\"dirty\\"]) \\"Clean words only here!\\" ``` Edge Cases * Verify behavior with an empty message. * Verify handling with no profane words in the message. * Ensure the function is case-insensitive but replaces the matched word with the same case. Additional Challenge Consider optimizing the implementation using techniques from text searching, such as the Aho-Corasick algorithm, for large sets of profane words.","solution":"import re from typing import Sequence def censor_message(message: str, profane_words: Sequence[str]) -> str: Replaces each character of the profane words in the message with asterisks \'*\' def censor_word(match): return \'*\' * len(match.group()) # Create regex pattern for all profane words (case insensitive) pattern = re.compile(r\'b(\' + \'|\'.join(re.escape(word) for word in profane_words) + r\')b\', re.IGNORECASE) # Replace each match with asterisks censored_message = pattern.sub(censor_word, message) return censored_message"},{"question":"# Function Implementation Question **Scenario**: As a software engineer, you frequently encounter situations where you need to verify whether a given data structure maintains certain order constraints. A common task is to validate the structure of a binary search tree (BST). **Task**: Implement a function `is_valid_bst` that checks whether a given binary tree is a valid binary search tree. A binary tree is considered a valid BST if it satisfies the following constraints: 1. The left subtree of a node contains only nodes with keys less than the node\'s key. 2. The right subtree of a node contains only nodes with keys greater than the node\'s key. 3. Both the left and right subtrees must also be binary search trees. **Function Signature**: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root: TreeNode) -> bool: Determine if the binary tree rooted at \'root\' is a valid binary search tree (BST). Parameters: root (TreeNode): The root node of the binary tree to check. Returns: bool: True if the tree is a valid BST, False otherwise. Example Usage: >>> root = TreeNode(2) >>> root.left = TreeNode(1) >>> root.right = TreeNode(3) >>> is_valid_bst(root) True >>> root = TreeNode(5) >>> root.left = TreeNode(1) >>> root.right = TreeNode(4) >>> root.right.left = TreeNode(3) >>> root.right.right = TreeNode(6) >>> is_valid_bst(root) False # Your code here ``` **Constraints**: - The number of nodes in the tree is in the range [0, 10^4]. - The values of the nodes are within the range [-2^31, 2^31 - 1]. **Hints**: - You can implement a helper function to recursively check the validity of the BST. - Consider the properties of BSTs and use a range to validate the node values. Ensure your solution handles various edge cases, such as an empty tree, a tree with duplicate values, and large trees with several layers.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root: TreeNode) -> bool: Determine if the binary tree rooted at \'root\' is a valid binary search tree (BST). def validate(node, low=-float(\'inf\'), high=float(\'inf\')): # An empty tree is a valid BST if not node: return True # The current node\'s value must be between the low and high bounds if not (low < node.val < high): return False # Recursively check the subtrees with updated bounds return (validate(node.left, low, node.val) and validate(node.right, node.val, high)) return validate(root)"},{"question":"# Problem: Implement a Binary Search Tree You are provided with an incomplete implementation of a Binary Search Tree (BST) in Python. Your task is to complete the functionality of inserting a new node, searching for a node, and deleting a node in the BST. # Requirements 1. **Insert a Node**: - Implement the insertion method to add a new node with a given key into the BST, ensuring the tree properties are maintained. 2. **Search for a Node**: - Implement the search method to find if a node with a given key exists in the BST. The method should return True if the node is found, otherwise False. 3. **Delete a Node**: - Implement the delete method to remove a node with a given key from the BST, ensuring the tree properties are maintained. # Class Specification You need to complete the `BinarySearchTree` class with the following methods: - `insert(self, key)`: Inserts a node with the specified key into the BST. - `search(self, key)`: Searches for a node with the specified key in the BST and returns True if found, False otherwise. - `delete(self, key)`: Deletes a node with the specified key from the BST. Here\'s the partially completed class: ```python class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): # Your code here for inserting a node with \'key\' def search(self, key): # Your code here for searching a node with \'key\' def delete(self, key): # Your code here for deleting a node with \'key\' ``` # Constraints 1. All keys will be unique. 2. Assume the keys are integers and the BinarySearchTree class will only hold integer values. 3. The BST should remain valid (i.e., every node\'s left subtree contains only nodes with keys less than the node\'s key, and every node\'s right subtree contains only nodes with keys greater than the node\'s key). # Example ```python bst = BinarySearchTree() bst.insert(15) bst.insert(10) bst.insert(20) bst.insert(8) bst.insert(12) bst.insert(17) bst.insert(25) print(bst.search(10)) # Output: True print(bst.search(22)) # Output: False bst.delete(20) print(bst.search(20)) # Output: False ``` # Notes 1. **Consistency**: Ensure you preserve the BST properties when implementing the insert and delete methods. 2. **Edge Cases**: Consider scenarios such as deleting a node with no children, one child, or two children. By completing the implementation of the given methods, you will create a functional Binary Search Tree capable of handling basic operations efficiently.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert_rec(self.root, key) def _insert_rec(self, node, key): if key < node.val: if node.left is None: node.left = TreeNode(key) else: self._insert_rec(node.left, key) else: if node.right is None: node.right = TreeNode(key) else: self._insert_rec(node.right, key) def search(self, key): return self._search_rec(self.root, key) def _search_rec(self, node, key): if node is None or node.val == key: return node is not None if key < node.val: return self._search_rec(node.left, key) else: return self._search_rec(node.right, key) def delete(self, key): self.root = self._delete_rec(self.root, key) def _delete_rec(self, node, key): if node is None: return node if key < node.val: node.left = self._delete_rec(node.left, key) elif key > node.val: node.right = self._delete_rec(node.right, key) else: if node.left is None: return node.right elif node.right is None: return node.left temp_val = self._min_value(node.right) node.val = temp_val node.right = self._delete_rec(node.right, temp_val) return node def _min_value(self, node): while node.left is not None: node = node.left return node.val"},{"question":"# Analyzing and Sorting a List of Tuples by an Attribute You are required to create a function that processes a list of tuples, where each tuple represents a record containing multiple attributes. The function should sort the list of tuples based on a specified attribute, either in ascending or descending order. The function should be able to handle empty lists and raise appropriate exceptions for incorrect inputs. Function Signature: ```python def sort_tuples_by_attribute(records: List[Tuple[Any, ...]], attr_index: int, descending: bool = False) -> List[Tuple[Any, ...]]: pass ``` Input: * `records` (List[Tuple[Any, ...]]): A list of tuples where each tuple contains several attributes of mixed types (e.g., integers, strings, etc.). * `attr_index` (int): The index of the attribute within each tuple by which to sort the list. * `descending` (bool): A boolean flag indicating whether the sorting should be in descending order (default is `False` for ascending order). Output: * List[Tuple[Any, ...]]: A list of tuples sorted based on the specified attribute. Constraints: * If `attr_index` is out of bounds for the tuples, raise an `IndexError`. * If the input list is empty, return an empty list. * The attribute at `attr_index` must be of a type that supports comparison operations; otherwise, raise a `TypeError`. Example: ```python >>> sort_tuples_by_attribute([(1, \'apple\', 5.0), (2, \'banana\', 3.2), (3, \'cherry\', 6.1)], 2) [(2, \'banana\', 3.2), (1, \'apple\', 5.0), (3, \'cherry\', 6.1)] >>> sort_tuples_by_attribute([(1, \'apple\', 5.0), (2, \'banana\', 3.2), (3, \'cherry\', 6.1)], 1, True) [(3, \'cherry\', 6.1), (2, \'banana\', 3.2), (1, \'apple\', 5.0)] >>> sort_tuples_by_attribute([], 0) [] >>> sort_tuples_by_attribute([(1, \'apple\'), (2, \'banana\')], 3) Traceback (most recent call last): ... IndexError: Index out of bounds for the tuples >>> sort_tuples_by_attribute([(1, \'apple\', 5.0), (2, \'banana\', \'three\'), (3, \'cherry\', 6.1)], 2) Traceback (most recent call last): ... TypeError: The attribute at position 2 does not support comparison operations ``` Scenario: You are building a report generation tool that processes and sorts a variety of records fetched from a database. These records are represented as tuples of different attributes. The tool needs to display the records sorted by a user-specified attribute so that the reports are clear and organized. The function you develop will help in efficiently sorting these records based on different criteria set by the user.","solution":"from typing import List, Tuple, Any def sort_tuples_by_attribute(records: List[Tuple[Any, ...]], attr_index: int, descending: bool = False) -> List[Tuple[Any, ...]]: try: # Check if the attribute index is within bounds if records and (attr_index < 0 or attr_index >= len(records[0])): raise IndexError(\\"Index out of bounds for the tuples\\") # Attempt to sort the records; this will naturally raise a TypeError if comparison is not supported sorted_records = sorted(records, key=lambda x: x[attr_index], reverse=descending) return sorted_records except IndexError as ie: raise ie except Exception: # Raise a TypeError if comparison fails raise TypeError(f\\"The attribute at position {attr_index} does not support comparison operations\\")"},{"question":"# Context You are creating a simplified game where players can collect and manage a collection of unique items. # Problem Statement Write a Python class `Player` that supports the following functionalities: 1. **Initialization**: Should initialize a player with a given starting set of items. 2. **Add Item**: Method to add a new unique item to the player\'s collection. 3. **Remove Item**: Method to remove an existing item from the player\'s collection. 4. **Has Item**: Method to check whether the player has a specific item. 5. **String Representation**: Method to return a string representation of the player\'s collection. Additionally, implement a proper unit test suite to validate these functionalities. Ensure to cover edge cases, error handling, and the behavior when adding or removing items that may or may not exist. # Implementation Details 1. **Initialization**: ```python class Player: def __init__(self, items: List[str]) -> None: ... ``` 2. **Add Item**: ```python def add_item(self, item: str) -> None: ... ``` 3. **Remove Item**: ```python def remove_item(self, item: str) -> None: ... ``` 4. **Has Item**: ```python def has_item(self, item: str) -> bool: ... ``` 5. **String Representation**: ```python def __str__(self) -> str: ... ``` # Constraints - Ensure that all items are unique in the player\'s collection. - The items are case-sensitive, meaning \\"Sword\\" and \\"sword\\" are considered different items. - The input list of items for initialization can be empty or contain multiple items. # Unit Tests Create a test class `TestPlayer` using `unittest` that validates all aspects of your implementation. Cover typical edge cases and error scenarios such as adding a duplicate item or removing a non-existing item. # Example ```python player = Player([\\"Sword\\", \\"Shield\\", \\"Potion\\"]) # Test Add Item player.add_item(\\"Helmet\\") print(player) # Should print items including \\"Helmet\\". # Test Remove Item player.remove_item(\\"Shield\\") print(player) # Should print items excluding \\"Shield\\". # Test Has Item print(player.has_item(\\"Potion\\")) # Should return True. print(player.has_item(\\"Bow\\")) # Should return False. # Test String Representation print(str(player)) # Should return string of items separated by commas. ```","solution":"class Player: def __init__(self, items): Initialize the player with a given starting set of items. :param items: List[str] - starting items for the player self.items = set(items) def add_item(self, item): Add a new unique item to the player\'s collection. :param item: str - the item to add self.items.add(item) def remove_item(self, item): Remove an existing item from the player\'s collection. :param item: str - the item to remove self.items.discard(item) def has_item(self, item): Check whether the player has a specific item. :param item: str - the item to check :return: bool - True if the player has the item, False otherwise return item in self.items def __str__(self): Return a string representation of the player\'s collection. :return: str - comma-separated list of items return \\", \\".join(self.items)"},{"question":"# Question **Context**: You are tasked with optimizing the performance of a recommendation system for a streaming service. The system suggests content based on user ratings. To improve the recommendations, you need to identify groups of users who have similar viewing patterns. **Task**: Implement a function that finds user clusters based on their ratings, using the k-means clustering algorithm. Given a matrix where each row represents a user and each column represents their rating for a specific content item, group the users into a specified number of clusters. **Function Signature**: ```python def k_means_clustering(ratings: list[list[float]], k: int, max_iterations: int = 100) -> list[int]: Args: - ratings: A list of lists where each inner list contains the ratings given by a user. - k: The number of clusters to form. - max_iterations: The maximum number of iterations for the algorithm to converge. Returns: - A list of integers where the ith element is the cluster index assigned to the ith user. ``` **Requirements**: 1. Implement the function `k_means_clustering` that takes in: * `ratings`: A list of lists of floats, where each inner list contains the ratings by a user. * `k`: An integer representing the number of clusters. * `max_iterations` (optional): An integer for the maximum number of iterations for the algorithm to run. 2. The function should return a list of integers representing the cluster index assigned to each user. 3. Ensure the k-means algorithm can handle up to (10^4) users and (10^3) content items efficiently. 4. Use the provided docstrings for testing with examples to ensure the correctness of your implementation. **Examples**: ```python >>> ratings = [ ... [1.0, 2.0, 3.0], ... [4.0, 5.0, 6.0], ... [1.1, 2.1, 3.1], ... [6.0, 7.0, 8.0] ... ] >>> k_means_clustering(ratings, 2) [0, 1, 0, 1] >>> ratings = [ ... [1.5, 1.7], ... [2.0, 2.1], ... [1.6, 1.8], ... [8.0, 8.1], ... [8.2, 8.4], ... [8.1, 8.5] ... ] >>> k_means_clustering(ratings, 2) [0, 0, 0, 1, 1, 1] ``` **Constraints**: * Each user\'s ratings are represented as a list of floats. * The number of users (rows of the `ratings` matrix) can be up to (10^4). * The number of content items (columns of the `ratings` matrix) can be up to (10^3). Good luck, and happy clustering!","solution":"import random import numpy as np def k_means_clustering(ratings, k, max_iterations=100): K-Means clustering algorithm to cluster users based on their ratings. Args: - ratings: A list of lists where each inner list contains the ratings given by a user. - k: The number of clusters to form. - max_iterations: The maximum number of iterations for the algorithm to converge. Returns: - A list of integers where the ith element is the cluster index assigned to the ith user. def initialize_centroids(ratings, k): return random.sample(ratings, k) def assign_clusters(ratings, centroids): clusters = [] for rating in ratings: distances = [np.linalg.norm(np.array(rating) - np.array(centroid)) for centroid in centroids] clusters.append(np.argmin(distances)) return clusters def update_centroids(ratings, clusters, k): centroids = [] for i in range(k): cluster_points = [ratings[j] for j in range(len(ratings)) if clusters[j] == i] if cluster_points: centroids.append(np.mean(cluster_points, axis=0).tolist()) else: centroids.append(random.choice(ratings)) return centroids # Initialize centroids centroids = initialize_centroids(ratings, k) for _ in range(max_iterations): clusters = assign_clusters(ratings, centroids) new_centroids = update_centroids(ratings, clusters, k) if np.allclose(centroids, new_centroids): break centroids = new_centroids return clusters"},{"question":"# Question: Matrix Rotation Scenario Your team is developing a feature for a photo editing application that involves manipulating image data. One of the fundamental operations required is rotating an image represented by a matrix of pixels by 90 degrees clockwise. Your task is to implement a function that performs this rotation. Task Write a function `rotate_matrix` that takes a square matrix and rotates it 90 degrees clockwise, modifying the matrix in place. Function Signature ```python def rotate_matrix(matrix: List[List[int]]) -> None: pass ``` Input * `matrix`: A list of lists of integers representing a square matrix (n times n) with (1 leq n leq 1000). Output * The function should modify the matrix in place and not return anything. Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) assert matrix == [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] matrix = [ [5, 1], [2, 4] ] rotate_matrix(matrix) assert matrix == [ [2, 5], [4, 1] ] ``` Constraints * Elements of the matrix will be within the range of ( -10^9 ) to ( 10^9 ). * The input matrix is guaranteed to be non-empty and square. Implementation Details * Ensure the function works in-place by modifying the original matrix directly. * Consider layers of the matrix and systematically move elements within the matrix to achieve the rotation. * Avoid unnecessary auxiliary space utilization, maintaining an efficient time complexity ideally (O(n^2)).","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> None: Rotates a given n x n matrix by 90 degrees clockwise in place. Args: matrix (List[List[int]]): A square matrix of integers. n = len(matrix) for layer in range(n // 2): first = layer last = n - 1 - layer for i in range(first, last): offset = i - first # save top top = matrix[first][i] # left -> top matrix[first][i] = matrix[last - offset][first] # bottom -> left matrix[last - offset][first] = matrix[last][last - offset] # right -> bottom matrix[last][last - offset] = matrix[i][last] # top -> right matrix[i][last] = top"},{"question":"# Context String manipulation and parsing are fundamental skills in programming, often required in tasks such as data processing, text analysis, and format conversions. Writing functions that accurately and efficiently process text data is essential for a variety of applications. # Problem Statement You are required to implement a utility class `StringProcessor` with the following methods: 1. **Camel Case Conversion**: Implement a method `to_camel_case` that converts a given string to camelCase. 2. **URL Query Parsing**: Implement a method `parse_query_string` that parses a URL query string into a dictionary. # Function Specifications: To Camel Case: **Input**: - `text`: A string containing words separated by spaces, underscores, or hyphens (e.g., \\"hello world\\", \\"hello_world\\", \\"hello-world\\"). **Output**: - Returns the input string converted to camelCase as a string (e.g., \\"helloWorld\\"). Parse Query String: **Input**: - `query`: A string representing a URL query string (e.g., \\"name=John&age=30&city=New+York\\"). **Output**: - Returns a dictionary where the keys are the query parameters and the values are the corresponding values (e.g., `{\\"name\\": \\"John\\", \\"age\\": \\"30\\", \\"city\\": \\"New York\\"}`). # Example: ```python processor = StringProcessor() # Should print camelCase representation of the input string print(processor.to_camel_case(\\"hello_world\\")) # Output: \\"helloWorld\\" print(processor.to_camel_case(\\"Convert-to-Camel-CASE\\")) # Output: \\"convertToCamelCase\\" # Should print the parsed query string as a dictionary print(processor.parse_query_string(\\"name=John&age=30&city=New+York\\")) # Output: {\\"name\\": \\"John\\", \\"age\\": \\"30\\", \\"city\\": \\"New York\\"} ``` # Constraints: - For `to_camel_case`, you may assume the input string contains only lowercase and uppercase alphabetic characters, spaces, underscores, and hyphens. - For `parse_query_string`, you may assume the input string is a well-formed query string with no malformed parameters or encoding issues. - Handle edge cases such as an empty string input for both methods. # Additional Notes: - For `to_camel_case`, the first word in the string should remain in lowercase while subsequent words should have their first letter capitalized. - For `parse_query_string`, consider the possible presence of URL-encoded characters such as \'+\' for spaces and ensure they are properly decoded in the output dictionary.","solution":"import urllib.parse class StringProcessor: @staticmethod def to_camel_case(text): words = text.replace(\'-\', \' \').replace(\'_\', \' \').split() if not words: return \'\' return words[0].lower() + \'\'.join(word.capitalize() for word in words[1:]) @staticmethod def parse_query_string(query): return {k: v for k, v in urllib.parse.parse_qsl(query)} # Example usage # processor = StringProcessor() # print(processor.to_camel_case(\\"hello_world\\")) # Output: \\"helloWorld\\" # print(processor.to_camel_case(\\"Convert-to-Camel-CASE\\")) # Output: \\"convertToCamelCase\\" # print(processor.parse_query_string(\\"name=John&age=30&city=New+York\\")) # Output: {\\"name\\": \\"John\\", \\"age\\": \\"30\\", \\"city\\": \\"New York\\"}"},{"question":"# Problem Description Implement a function that validates a given string using a specific pattern of allowed characters. The string can only contain lowercase letters (\'a\' to \'z\') and spaces. Any other character is considered illegal, and the function should return `False` if such characters are present in the input string. Additionally, consecutive spaces are not allowed. # Function Signature ```python def is_valid_string(s: str) -> bool: pass ``` # Input * A single string `s` where it can have up to 10^5 characters. # Output * A boolean value: `True` if the given string is valid according to the described rules, `False` otherwise. # Constraints * For the input to be considered valid, it must contain only lowercase letters and spaces. * No consecutive spaces are allowed within the string. Spaces should be single and separate words only. # Performance Requirements * The function should efficiently handle strings up to the maximum length of 10^5 characters. # Examples ```python >>> is_valid_string(\\"hello world\\") True >>> is_valid_string(\\"hello world\\") False >>> is_valid_string(\\"hello, world\\") False >>> is_valid_string(\\"helloworld\\") True >>> is_valid_string(\\"\\") True ``` # Detailed Example Walkthrough 1. For input `is_valid_string(\\"hello world\\")`: The string contains only lowercase letters and a single space between \\"hello\\" and \\"world\\", so it returns `True`. 2. For input `is_valid_string(\\"hello world\\")`: The string contains consecutive spaces, so it returns `False`. 3. For input `is_valid_string(\\"hello, world\\")`: The string contains a comma, which is not an allowed character, so it returns `False`. 4. For input `is_valid_string(\\"helloworld\\")`: The string contains only lowercase letters without any spaces, so it returns `True`. 5. For input `is_valid_string(\\"\\")`: An empty string is considered valid as it does not contain any illegal characters, so it returns `True`. # Notes * Consider edge cases such as an empty string, a string with only spaces, and a string with a mix of letters and spaces. * Do not assume that the input will be trimmed; the string can start or end with spaces, but they should not be consecutive.","solution":"def is_valid_string(s: str) -> bool: Validates a string based on the following criteria: - The string can contain only lowercase letters (\'a\' to \'z\') and spaces. - No consecutive spaces are allowed. Args: s (str): The input string to validate. Returns: bool: True if the string is valid, False otherwise. # Check if the string contains any illegal characters for i in range(len(s)): if not (s[i].islower() or s[i] == \' \'): return False if i > 0 and s[i] == \' \' and s[i-1] == \' \': # Check for consecutive spaces return False return True"},{"question":"**Problem Statement: Morris-Pratt Pattern Matching Algorithm** You are tasked with implementing a function that uses the Morris-Pratt (MP) pattern matching algorithm to find the position of the first occurrence of a pattern string within a text string. If the pattern is not found within the text, the function should return -1. # Function Signature ```python def morris_pratt_pattern_matching(text: str, pattern: str) -> int: pass ``` # Input * (text{text}) (0 ≤ text{len(text)} ≤ ( 10^6 )): A string containing the text to be searched. * (text{pattern}) (0 ≤ text{len(pattern)} ≤ ( 10^6 )): A string containing the pattern to search for. # Output * Returns the index of the first occurrence of the pattern inside the text, or -1 if the pattern is not found. # Example ```python >>> morris_pratt_pattern_matching(\\"abracadabra\\", \\"cad\\") 4 >>> morris_pratt_pattern_matching(\\"mississippi\\", \\"issip\\") 4 >>> morris_pratt_pattern_matching(\\"hello\\", \\"world\\") -1 ``` # Constraints * Both strings consist of lowercase English letters only. * The function should have a linear time complexity in terms of the length of the text. # Notes 1. **Using the Morris-Pratt Algorithm**: - Construct the \\"partial match\\" table (also known as \\"failure table\\") which will be used to skip forward in the text if a mismatch occurs. - Use the constructed table to perform the actual search efficiently. 2. **Partial Match Table Construction**: - Iterate through the pattern and build a table that indicates the longest proper prefix which is also a suffix for each of the substrings in the pattern. 3. **Pattern Matching**: - Use the partial match table to skip characters in the text when a mismatch is found, ensuring that the overall time complexity remains linear.","solution":"def morris_pratt_pattern_matching(text: str, pattern: str) -> int: if not pattern: return 0 # If the pattern is empty, it is found at index 0 by definition. if not text or len(pattern) > len(text): return -1 # If text is empty or pattern length is greater than text length, pattern is not found. # Step 1: Construct the partial match table (failure function) def compute_partial_match_table(pattern): partial_match = [0] * len(pattern) j = 0 for i in range(1, len(pattern)): while j > 0 and pattern[j] != pattern[i]: j = partial_match[j - 1] if pattern[j] == pattern[i]: j += 1 partial_match[i] = j return partial_match partial_match_table = compute_partial_match_table(pattern) # Step 2: Using the partial match table to find the pattern in the text j = 0 for i in range(len(text)): while j > 0 and text[i] != pattern[j]: j = partial_match_table[j - 1] if text[i] == pattern[j]: j += 1 if j == len(pattern): return i - j + 1 # Match found return -1 # No match found"},{"question":"# JSON Formatter You are provided with a function `format_json` that is supposed to format a JSON string into a more readable form with proper indentation. Your task is to complete the function by implementing the correct logic to accomplish this task. Keep in mind the following considerations: - The input string `json_string` represents a JSON object or array. - The output should be a JSON string that is pretty-printed with an indentation of 4 spaces. - Return a `ValueError` with the message \\"Invalid JSON string\\" if the input string is not a valid JSON. **Function Signature**: ```python def format_json(json_string: str) -> str: pass ``` **Input**: - A single string `json_string` that represents a JSON object or array. **Output**: - A pretty-printed JSON string with an indentation of 4 spaces. **Constraints**: - The input string may contain whitespace characters at the beginning or end. - The function should handle typical JSON structures: dictionaries, lists, nested dictionaries, and lists. **Example**: ```python >>> format_json(\'{\\"name\\":\\"John\\", \\"age\\":30, \\"city\\":\\"New York\\"}\') { \\"name\\": \\"John\\", \\"age\\": 30, \\"city\\": \\"New York\\" } >>> format_json(\'[{\\"name\\":\\"John\\", \\"age\\":30},{\\"name\\":\\"Jane\\", \\"age\\":25}]\') [ { \\"name\\": \\"John\\", \\"age\\": 30 }, { \\"name\\": \\"Jane\\", \\"age\\": 25 } ] >>> format_json(\'not a json\') Traceback (most recent call last): ... ValueError: Invalid JSON string >>> format_json(\'\') Traceback (most recent call last): ... ValueError: Invalid JSON string ``` Please, implement the function `format_json` in your solution.","solution":"import json def format_json(json_string: str) -> str: Takes a JSON string and returns a pretty-printed JSON string with an indentation of 4 spaces. If the input is not a valid JSON, raises a ValueError. try: json_object = json.loads(json_string.strip()) return json.dumps(json_object, indent=4) except json.JSONDecodeError: raise ValueError(\\"Invalid JSON string\\")"},{"question":"# Problem Statement: In a small village, there is one main road that connects several houses. Each house is represented by a number in a list, which indicates the distance from the starting point of the road (in meters). The mayor wants to create a system to easily find the center of the village road, which is defined as the median distance of all houses present on the road. Given a list of house distances, your task is to find the median distance. If the number of houses is odd, the median is the middle element. If the number of houses is even, the median is the average of the two middle numbers. # Function Signature: ```python def find_median_distance(house_distances: List[int]) -> float: pass ``` # Parameters: - `house_distances` (List[int]): A list of integers representing the distances of houses from the starting point of the road. # Returns: - `float`: The median distance of all the houses. # Constraints: - 1 ≤ len(house_distances) ≤ 10^5 - 1 ≤ house_distances[i] ≤ 10^9 # Example: ```python assert find_median_distance([2, 6, 3, 8, 1]) == 3.0 assert find_median_distance([5, 2, 7, 4]) == 4.5 assert find_median_distance([12]) == 12.0 ``` **Note:** - Ensure the function handles both even and odd number of houses correctly. - Use an efficient method to calculate the median, considering the large possible size of the input list. # Performance Requirements: - The solution should be optimized to handle the upper limits of the constraints efficiently, both in terms of time and space complexity.","solution":"from typing import List def find_median_distance(house_distances: List[int]) -> float: Returns the median distance of the houses on the road. If the number of houses is odd, the median is the middle element. If the number of houses is even, the median is the average of the two middle elements. Parameters: house_distances (List[int]): A list of integers representing the distances of houses from the starting point. Returns: float: The median distance of all the houses. house_distances.sort() n = len(house_distances) mid_index = n // 2 if n % 2 == 0: # Even number of elements, return the average of the two middle elements return (house_distances[mid_index - 1] + house_distances[mid_index]) / 2 else: # Odd number of elements, return the middle element return house_distances[mid_index]"},{"question":"# Introduction A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization. For this task, you will determine if a given sentence is a palindrome. # Task Write a function named `is_palindrome(sentence: str) -> bool` that checks if the given sentence is a palindrome, complying with the rules for ignoring spaces, capitalization, and punctuation. # Requirements * **Function Signature**: `def is_palindrome(sentence: str) -> bool:` * **Input**: A single string `sentence` containing the sentence to be checked. The input will contain letters, digits, spaces, and common punctuation marks. * **Output**: A boolean value - `True` if the sentence is a palindrome, and `False` otherwise. # Constraints 1. Treat letters case-insensitively (e.g., \'A\' and \'a\' are considered the same). 2. Ignore spaces, punctuation, and digits while checking for palindromes. 3. Return `False` if the input is an empty string or contains only spaces. 4. If the initial string is `None`, return `False`. 5. Do not use any external libraries for string manipulations. # Examples ```python >>> is_palindrome(\\"A man, a plan, a canal, Panama\\") True >>> is_palindrome(\\"No \'x\' in Nixon\\") True >>> is_palindrome(\\"Was it a car or a cat I saw?\\") True >>> is_palindrome(\\"Not a palindrome\\") False >>> is_palindrome(\\" \\") False >>> is_palindrome(\\"\\") False >>> is_palindrome(None) False ``` # Additional Notes * Ensure your function effectively handles a variety of cases by thoroughly testing it, especially with different punctuation and capitalization. * Assume the caller will pass strings that may contain letters, digits, spaces, and punctuation, so validation is essential to discard non-alphabetic characters appropriately.","solution":"def is_palindrome(sentence: str) -> bool: if sentence is None: return False cleaned_sentence = \'\'.join( char.lower() for char in sentence if char.isalpha() ) if len(cleaned_sentence) == 0: return False return cleaned_sentence == cleaned_sentence[::-1]"},{"question":"# Roman Numeral Converter Context: Roman numerals are represented by combinations of letters from the Latin alphabet: * `I`=1, `V`=5, `X`=10, `L`=50, `C`=100, `D`=500, `M`=1000. You need to write a function that converts an integer to a roman numeral. To efficiently perform the conversion, consider the subtraction rule used in Roman numerals: * The numeral for 4 is not `IIII`; instead, it\'s `IV`. * The number 9 is written as `IX`. * The number 40 is written as `XL`, and the number 90 as `XC`. * The number 400 is written as `CD`, and the number 900 as `CM`. Requirements: * Write a function `integer_to_roman(num: int) -> str` that converts a given integer to its corresponding Roman numeral. * The function should handle invalid inputs gracefully, returning an empty string for non-positive integers, non-integer values, and any value outside the range of 1 to 3999 inclusive. * Ensure the function follows the subtraction rule correctly as described. Input: * A single integer `num` representing the number to be converted to a Roman numeral. Output: * A string representing the Roman numeral equivalent of the input integer if valid. Empty string otherwise. Constraints: * `1 <= num <= 3999` Examples: ```python # Example 1 integer_to_roman(3) # Output: \\"III\\" # Example 2 integer_to_roman(58) # Output: \\"LVIII\\" # Example 3 integer_to_roman(1994) # Output: \\"MCMXCIV\\" # Example 4 integer_to_roman(-15) # Output: \\"\\" # Example 5 integer_to_roman(4500) # Output: \\"\\" ``` Ensure your function accurately transforms integers into Roman numerals covering all edge cases efficiently.","solution":"def integer_to_roman(num: int) -> str: if not isinstance(num, int) or num < 1 or num > 3999: return \\"\\" val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] symbols = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = \\"\\" for i in range(len(val)): while num >= val[i]: roman_numeral += symbols[i] num -= val[i] return roman_numeral"},{"question":"# Coding Assessment Question **Context:** Imagine you are developing software for a logistics company. One of the key features required is to sort the list of delivery packages based on their weights. The company\'s warehouse management system would benefit from an efficient algorithm which sorts the weights using the merge sort technique because of its stability and guaranteed (O(n log n)) time performance. # Task: Implement a function `merge_sort_packages(packages: List[float]) -> List[float]` that uses the merge sort algorithm to sort a list of package weights in ascending order. Function Signature: ```python def merge_sort_packages(packages: List[float]) -> List[float]: pass ``` # Input: - A list `packages` of floating-point values representing the weights of the packages. # Output: - Return a new list of floating-point values representing the weights sorted in ascending order. # Constraints: - The input list `packages` will have the following properties: * (0 leq text{len(packages)} leq 10^6) * Each weight will be a non-negative floating-point number. * The list may contain duplicate weights. # Performance: - The solution should have a time complexity of (O(n log n)). # Examples: ```python >>> merge_sort_packages([5.5, 2.1, 9.8, 4.4, 1.0]) [1.0, 2.1, 4.4, 5.5, 9.8] >>> merge_sort_packages([0.5, 2.1, 2.1, 4.4]) [0.5, 2.1, 2.1, 4.4] >>> merge_sort_packages([]) [] >>> merge_sort_packages([3.3]) [3.3] ``` **Note:** Ensure your function is optimally implemented to handle the upper constraint limits efficiently.","solution":"from typing import List def merge_sort_packages(packages: List[float]) -> List[float]: if len(packages) <= 1: return packages mid = len(packages) // 2 left_half = merge_sort_packages(packages[:mid]) right_half = merge_sort_packages(packages[mid:]) return merge(left_half, right_half) def merge(left: List[float], right: List[float]) -> List[float]: sorted_list = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_list.append(left[left_index]) left_index += 1 else: sorted_list.append(right[right_index]) right_index += 1 # Append remaining elements sorted_list.extend(left[left_index:]) sorted_list.extend(right[right_index:]) return sorted_list"},{"question":"# Scenario: You are developing a feature for a library management system that helps librarians quickly identify books based on their unique ISBN numbers. Your task is to implement an algorithm that efficiently checks if a given list of ISBN numbers exists within a sorted list of records. Since the ISBN list is sorted, leveraging efficient search algorithms is crucial for performance. # Task: Write a function `find_isbns` that takes two arguments: 1. `records` (list of strings): A sorted list of ISBN numbers. 2. `isbns` (list of strings): A list of ISBN numbers to search within the records. The function should return a list of boolean values, where each boolean corresponds to whether the ISBN in the `isbns` list is found in the `records` list. # Input Formats: - The `records` list (length n): 1 <= n <= 1000000 - The `isbns` list (length k): 1 <= k <= 1000 # Output Format: - A list of boolean values where each value indicates the presence of the corresponding ISBN in the `records`. # Constraints: - Ensure the efficiency of the search algorithm considering the large size of the `records`. - The `records` list is guaranteed to be sorted. # Example: ```python records = [\\"0000000000\\", \\"1234567890\\", \\"2345678901\\", \\"3456789012\\", \\"4567890123\\", \\"5678901234\\"] isbns = [\\"1234567890\\", \\"3456789012\\", \\"9876543210\\"] # Expected Output: # [True, True, False] ``` # Implementation: Implement the `find_isbns` function using an efficient search algorithm such as binary search for this task. ```python def binary_search(records, isbn): left, right = 0, len(records) - 1 while left <= right: mid = (left + right) // 2 if records[mid] == isbn: return True elif records[mid] < isbn: left = mid + 1 else: right = mid - 1 return False def find_isbns(records, isbns): return [binary_search(records, isbn) for isbn in isbns] records = [\\"0000000000\\", \\"1234567890\\", \\"2345678901\\", \\"3456789012\\", \\"4567890123\\", \\"5678901234\\"] isbns = [\\"1234567890\\", \\"3456789012\\", \\"9876543210\\"] print(find_isbns(records, isbns)) ```","solution":"def binary_search(records, isbn): left, right = 0, len(records) - 1 while left <= right: mid = (left + right) // 2 if records[mid] == isbn: return True elif records[mid] < isbn: left = mid + 1 else: right = mid - 1 return False def find_isbns(records, isbns): Takes a sorted list of records and a list of ISBNs, and returns a list of boolean values indicating if each ISBN in the list is found in the records. return [binary_search(records, isbn) for isbn in isbns]"},{"question":"# Question You are given the task to implement a string processing utility that performs run-length encoding (RLE) compression. Your implementation should address the following requirements: 1. Efficiently encode a given string of characters by replacing sequences of the same character with the character followed by the count of repetitions. 2. Include a method to decode the run-length encoded string back to its original form. 3. Handle edge cases such as an empty string or very high repetition counts gracefully. # Function Requirements encode_rle * **Input**: A string `input_string` consisting of alphanumeric characters and spaces. * **Output**: A run-length encoded string. decode_rle * **Input**: A string `encoded_string` obtained from the `encode_rle` function. * **Output**: The original uncompressed string. # Constraints * Assume the length of input string `input_string` will not exceed `10^6` characters. * The encoding should correctly handle sequences of 10 or more repeated characters. # Example ```python input_string = \'aaabbbbccdddddeeeeeee\' encoded_string = encode_rle(input_string) print(encoded_string) # Should output \'a3b4c2d5e7\' encoded_string = \'a3b4c2d5e7\' decoded_string = decode_rle(encoded_string) print(decoded_string) # Should match \'aaabbbbccdddddeeeeeee\' ``` Notes: * Ensure that the encoded string is concise, and decoding accurately reconstructs the original string. * Your functions should handle invalid inputs gracefully, such as non-alphanumeric characters in the input or malformed encoded strings.","solution":"def encode_rle(input_string): Encode the input string using Run-Length Encoding (RLE). Parameters: input_string (str): The string to be encoded. Returns: str: The run-length encoded string. if not input_string: return \\"\\" encoded_string = [] count = 1 prev_char = input_string[0] for char in input_string[1:]: if char == prev_char: count += 1 else: if count > 1: encoded_string.append(f\\"{prev_char}{count}\\") else: encoded_string.append(prev_char) prev_char = char count = 1 if count > 1: encoded_string.append(f\\"{prev_char}{count}\\") else: encoded_string.append(prev_char) return \'\'.join(encoded_string) def decode_rle(encoded_string): Decode the run-length encoded string back to its original form. Parameters: encoded_string (str): The run-length encoded string. Returns: str: The original uncompressed string. if not encoded_string: return \\"\\" decoded_string = [] i = 0 while i < len(encoded_string): char = encoded_string[i] j = i + 1 while j < len(encoded_string) and encoded_string[j].isdigit(): j += 1 if j > i + 1: count = int(encoded_string[i+1:j]) decoded_string.extend([char] * count) else: decoded_string.append(char) i = j return \'\'.join(decoded_string)"},{"question":"# Scenario: You are developing a system for a library to manage and retrieve book information efficiently. One specific requirement is to implement a search function that returns titles of books containing all specified keywords in any order within their titles. The keywords are separated by spaces and are case-insensitive. This function must be able to handle large numbers of book entries and frequent searches efficiently. # Problem Description: Implement a function `search_books` that takes a list of strings representing book titles and a string representing the search query. The function should return a list of titles that contain all the keywords in the search query in any order. Ensure that the search is case-insensitive. # Function Signature: `def search_books(books: list, query: str) -> list:` # Input: - `books`: A list of strings where each string is a book title. - `query`: A string containing keywords separated by spaces that the titles must contain. # Output: - Returns a list of strings representing the titles of books that contain all the keywords specified in the query, in any order. The titles in the returned list should appear in the same order they were in the input list. # Constraints: - The search should be case-insensitive. - The query can have one or more keywords. - The function should handle large lists of book titles efficiently. # Example: ```python books = [ \\"The Great Gatsby\\", \\"To Kill a Mockingbird\\", \\"The Catcher in the Rye\\", \\"Great Expectations\\", \\"Gone with the Wind\\" ] print(search_books(books, \\"Great\\")) # Output: [\\"The Great Gatsby\\", \\"Great Expectations\\"] print(search_books(books, \\"a Mockingbird\\")) # Output: [\\"To Kill a Mockingbird\\"] ``` # Notes: - You may use helper functions to break down the problem if necessary. - Consider edge cases such as empty query strings or titles with punctuation.","solution":"def search_books(books: list, query: str) -> list: Returns a list of book titles that contain all the keywords specified in the query, in any order. The search is case-insensitive. if not query.strip(): return [] query_keywords = set(query.lower().split()) matched_books = [] for title in books: title_keywords = set(title.lower().split()) if query_keywords.issubset(title_keywords): matched_books.append(title) return matched_books"},{"question":"# Context Develop a library management system where members can borrow and return books. The system should keep track of the borrowed books and ensure that no duplicate borrowings occur. It should also provide functionality to check whether a specific book is currently borrowed by any member. # Task Implement a class `LibrarySystem` to manage book borrowings. The system should support the following operations: 1. **Borrow a book**: Given a book title and member name, register the book as borrowed by the member. 2. **Return a book**: Given a book title, mark it as returned. 3. **Check if a book is borrowed**: Given a book title, check if the book is currently borrowed and return the member name if it is. Books are represented as strings, and member names are also represented as strings. Implement methods with the following signatures: ```python class LibrarySystem: def borrow(self, book: str, member: str) -> None: pass def return_book(self, book: str) -> None: pass def is_borrowed(self, book: str) -> Optional[str]: pass ``` # Requirements 1. Your methods should efficiently handle the operations with an average-case time complexity of O(1) for `borrow`, O(1) for `return_book`, and O(1) for `is_borrowed`. 2. Handle edge cases such as borrowing a book that is already borrowed, returning a book that is not borrowed, and checking the status of books that are not in the system. 3. Use appropriate data structures to ensure that borrow and return operations are efficient. # Constraints * Book and member strings have a maximum length of 100 characters. # Example ```python library = LibrarySystem() library.borrow(\\"The Great Gatsby\\", \\"Alice\\") library.borrow(\\"1984\\", \\"Bob\\") print(library.is_borrowed(\\"The Great Gatsby\\")) # Output: \\"Alice\\" library.return_book(\\"The Great Gatsby\\") print(library.is_borrowed(\\"The Great Gatsby\\")) # Output: None library.borrow(\\"The Great Gatsby\\", \\"Charlie\\") print(library.is_borrowed(\\"The Great Gatsby\\")) # Output: \\"Charlie\\" ``` Submission Submit a class `LibrarySystem` implemented in Python, with the specified methods to manage book borrowings efficiently as described.","solution":"from typing import Optional class LibrarySystem: def __init__(self): self.borrowed_books = {} def borrow(self, book: str, member: str) -> None: if book not in self.borrowed_books: self.borrowed_books[book] = member def return_book(self, book: str) -> None: if book in self.borrowed_books: del self.borrowed_books[book] def is_borrowed(self, book: str) -> Optional[str]: return self.borrowed_books.get(book, None)"},{"question":"# Question: Implementing a Text Compression and Decompression using Huffman Coding You are given a string of text that you need to compress using Huffman coding and then decompress to verify its correctness. Your task is to implement two functions: one to compress the given text and one to decompress the compressed output back to the original text. Function Signatures ```python def compress_text(text: str) -> tuple[dict, str]: ``` ```python def decompress_text(huffman_tree: dict, compressed_text: str) -> str: ``` # Input 1. `text` (str): The string to be compressed. It contains only lowercase alphabetical characters. # Output 1. `compress_text` should return a tuple containing: * `huffman_tree` (dict): A dictionary representing the Huffman tree, where keys are characters, and values are their corresponding Huffman codes. * `compressed_text` (str): A string of 0s and 1s representing the compressed form of the input text. 2. `decompress_text` should return: * `original_text` (str): The original text decompressed from the provided Huffman tree and compressed text. # Constraints * `0 < len(text) <= 10^4` # Example ```python text = \\"huffmancompression\\" huffman_tree, compressed_text = compress_text(text) # Example Output: {\'h\': \'00\', \'u\': \'01\', \'f\': \'11\', ...}, \'000110011...\' decompressed_text = decompress_text(huffman_tree, compressed_text) # Expected Output: \'huffmancompression\' ``` # Explanation 1. `compress_text`: - Generate the frequency table for each character. - Build the Huffman tree based on frequency. - Generate the Huffman codes for each character. - Encode the original text using these Huffman codes. 2. `decompress_text`: - Use the Huffman tree to decode the compressed binary string back into the original text. # Note 1. Ensure that the Huffman tree is correctly built and the text is compressed and decompressed without any loss of information. 2. Use a priority queue or min-heap to assist in building the Huffman tree. # Grading Criteria * Correctness: The functions should correctly compress and decompress text as described. * Efficiency: The functions should handle the input constraints within a reasonable time. * Structure: The Huffman tree should be built correctly and used effectively for both compression and decompression. Hints 1. When building the Huffman tree, consider edge cases where the text has only one unique character. 2. Ensure that the Huffman tree and codes are reversible for accurate decompression.","solution":"import heapq from collections import defaultdict, Counter, namedtuple class Node(namedtuple(\\"Node\\", [\\"left\\", \\"right\\"])): def walk(self, code, acc): self.left.walk(code, acc + \\"0\\") self.right.walk(code, acc + \\"1\\") class Leaf(namedtuple(\\"Leaf\\", [\\"char\\"])): def walk(self, code, acc): code[self.char] = acc or \\"0\\" def compress_text(text: str): h = [] for char, freq in Counter(text).items(): h.append((freq, len(h), Leaf(char))) heapq.heapify(h) count = len(h) while len(h) > 1: freq1, _count1, left = heapq.heappop(h) freq2, _count2, right = heapq.heappop(h) heapq.heappush(h, (freq1 + freq2, count, Node(left, right))) count += 1 if h: [(_, _, tree)] = h code = {} tree.walk(code, \\"\\") else: code = {} compressed_text = \'\'.join(code[char] for char in text) return code, compressed_text def decompress_text(huffman_tree, compressed_text): decode_map = {v: k for k, v in huffman_tree.items()} current_code = \\"\\" original_text = [] for bit in compressed_text: current_code += bit if current_code in decode_map: original_text.append(decode_map[current_code]) current_code = \\"\\" return \'\'.join(original_text)"},{"question":"**Problem Statement**: You are tasked with designing an algorithm to determine the n-th Fibonacci number. Your challenge is to implement two functions: 1. `fibonacci_recursive(n: int) -> int`: Calculates the n-th Fibonacci number using a recursive approach. 2. `fibonacci_iterative(n: int) -> int`: Calculates the n-th Fibonacci number using an iterative approach. **Function Specifications**: 1. `fibonacci_recursive(n: int) -> int`: - **Input**: An integer `n`, - **Output**: Returns the n-th Fibonacci number. - **Constraints**: `n` will be a non-negative integer. 2. `fibonacci_iterative(n: int) -> int`: - **Input**: An integer `n`. - **Output**: Returns the n-th Fibonacci number. - **Constraints**: `n` will be a non-negative integer. - **Error Handling**: Raise a `ValueError` if `n` is less than 0, or a `TypeError` if `n` is not an integer or castable to an integer. **Example Cases**: ```python >>> fibonacci_recursive(0) 0 >>> fibonacci_recursive(1) 1 >>> fibonacci_recursive(5) 5 >>> fibonacci_recursive(10) 55 >>> fibonacci_iterative(0) 0 >>> fibonacci_iterative(1) 1 >>> fibonacci_iterative(5) 5 >>> fibonacci_iterative(10) 55 # Error Handling >>> fibonacci_iterative(-1) Traceback (most recent call last): ... ValueError: Parameter n must be a non-negative integer. >>> fibonacci_iterative(\\"abcd\\") Traceback (most recent call last): ... TypeError: Parameter n must be int or castable to int. ``` Implement these functions to calculate the n-th Fibonacci number and verify their working with the provided example cases. **Assessment Criteria**: - Correctness: Ensure the solution provides accurate results for a variety of test cases. - Efficiency: Optimize the solution to handle large values of `n` effectively, especially in the iterative implementation. - Robustness: Handle invalid inputs and edge cases gracefully.","solution":"def fibonacci_recursive(n: int) -> int: Returns the n-th Fibonacci number using a recursive approach. if n < 0: raise ValueError(\\"Parameter n must be a non-negative integer.\\") if n == 0: return 0 elif n == 1: return 1 else: return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2) def fibonacci_iterative(n: int) -> int: Returns the n-th Fibonacci number using an iterative approach. if not isinstance(n, int): if isinstance(n, float) and n.is_integer(): n = int(n) else: raise TypeError(\\"Parameter n must be an int or castable to int.\\") if n < 0: raise ValueError(\\"Parameter n must be a non-negative integer.\\") a, b = 0, 1 for _ in range(n): a, b = b, a + b return a"},{"question":"# Base Conversion and Arithmetic Operations In this problem, you are expected to implement functionality that allows converting numbers between different bases (2 through 16) and performing arithmetic operations (addition, subtraction, multiplication, and division) on numbers in these bases. **Task**: Write the following functions: 1. `convert_base(number: str, from_base: int, to_base: int) -> str` 2. `base_addition(number1: str, number2: str, base: int) -> str` 3. `base_subtraction(number1: str, number2: str, base: int) -> str` 4. `base_multiplication(number1: str, number2: str, base: int) -> str` 5. `base_division(number1: str, number2: str, base: int) -> str` Each function must: 1. Handle bases ranging from 2 to 16. 2. Raise a `ValueError` if the base is outside the range 2-16 with the message: - `\\"Invalid base. Base must be between 2 and 16 inclusive.\\"` 3. Ensure the input numbers are valid within their specified bases and raise a `ValueError` if not: - `\\"Invalid number for the specified base.\\"` 4. Use appropriate methods to perform base conversions and arithmetic operations. # Function Descriptions and Examples 1. **convert_base** - **Input**: - `number` (str): The number to be converted. - `from_base` (int): The base of the input number. - `to_base` (int): The base to which the number needs to be converted. - **Output**: - Returns the converted number (str) as a string in the new base. - **Examples**: ```python assert convert_base(\'1010\', 2, 10) == \'10\' assert convert_base(\'A\', 16, 2) == \'1010\' ``` 2. **base_addition** - **Input**: - `number1` (str): The first number. - `number2` (str): The second number. - `base` (int): The base in which the addition is to be performed. - **Output**: - Returns the sum (str) of the two numbers in the same base. - **Examples**: ```python assert base_addition(\'1010\', \'1101\', 2) == \'10111\' assert base_addition(\'A\', \'5\', 16) == \'F\' ``` 3. **base_subtraction** - **Input**: - `number1` (str): The first number. - `number2` (str): The second number. - `base` (int): The base in which the subtraction is to be performed. - **Output**: - Returns the difference (str) of the two numbers in the same base. - **Examples**: ```python assert base_subtraction(\'1101\', \'1010\', 2) == \'11\' assert base_subtraction(\'F\', \'A\', 16) == \'5\' ``` 4. **base_multiplication** - **Input**: - `number1` (str): The first number. - `number2` (str): The second number. - `base` (int): The base in which the multiplication is to be performed. - **Output**: - Returns the product (str) of the two numbers in the same base. - **Examples**: ```python assert base_multiplication(\'101\', \'11\', 2) == \'1111\' assert base_multiplication(\'B\', \'5\', 16) == \'37\' ``` 5. **base_division** - **Input**: - `number1` (str): The first number. - `number2` (str): The second number. - `base` (int): The base in which the division is to be performed. - **Output**: - Returns the quotient (str) of the two numbers in the same base. - Return integer division result only. - **Examples**: ```python assert base_division(\'1010\', \'10\', 2) == \'101\' assert base_division(\'37\', \'5\', 16) == \'B\' ``` Make sure the functions raise appropriate errors for invalid bases and invalid number inputs as described above.","solution":"def validate_base(base): if base < 2 or base > 16: raise ValueError(\\"Invalid base. Base must be between 2 and 16 inclusive.\\") def validate_number_for_base(number, base): try: int(number, base) except ValueError: raise ValueError(\\"Invalid number for the specified base.\\") def convert_base(number, from_base, to_base): validate_base(from_base) validate_base(to_base) validate_number_for_base(number, from_base) decimal_number = int(number, from_base) if decimal_number == 0: return \'0\' digits = [] while decimal_number: remainder = decimal_number % to_base if remainder < 10: digits.append(str(remainder)) else: digits.append(chr(ord(\'A\') + remainder - 10)) decimal_number //= to_base return \'\'.join(digits[::-1]) def base_addition(number1, number2, base): validate_base(base) validate_number_for_base(number1, base) validate_number_for_base(number2, base) sum_decimal = int(number1, base) + int(number2, base) return convert_base(str(sum_decimal), 10, base) def base_subtraction(number1, number2, base): validate_base(base) validate_number_for_base(number1, base) validate_number_for_base(number2, base) difference_decimal = int(number1, base) - int(number2, base) return convert_base(str(difference_decimal), 10, base) def base_multiplication(number1, number2, base): validate_base(base) validate_number_for_base(number1, base) validate_number_for_base(number2, base) product_decimal = int(number1, base) * int(number2, base) return convert_base(str(product_decimal), 10, base) def base_division(number1, number2, base): validate_base(base) validate_number_for_base(number1, base) validate_number_for_base(number2, base) quotient_decimal = int(number1, base) // int(number2, base) return convert_base(str(quotient_decimal), 10, base)"},{"question":"# Problem Statement You need to implement a function `is_bipartite(graph)` that checks if a given undirected graph is bipartite. A graph is considered bipartite if it is possible to divide its set of vertices into two disjoint sets such that there are no edges between vertices within the same set. # Input Format - `graph`: A dictionary where keys are vertex identifiers and values are lists of adjacent vertices. # Output Format - Return `True` if the graph is bipartite. - Return `False` otherwise. # Constraints 1. All vertices in the graph have integer identifiers. 2. Assume that the graph is well-defined (i.e., no self-loops, no multiple edges between the same pair of vertices). # Example ```python def example(): graph = {1: [2, 3], 2: [1, 4], 3: [1, 4], 4: [2, 3]} result = is_bipartite(graph) print(result) # Output: True graph = {1: [2], 2: [1, 3], 3: [2, 4], 4: [3, 5], 5: [4, 6], 6: [5, 2]} result = is_bipartite(graph) print(result) # Output: False graph = {1: [2, 4], 2: [1, 3], 3: [2, 4], 4: [1, 3]} result = is_bipartite(graph) print(result) # Output: True example() ``` # Note In the provided examples, the function should handle cases with both even and odd cycles, which can be tested through BFS or DFS coloring methods to determine if the graph can be split into two sets without intra-set edges.","solution":"def is_bipartite(graph): Check if the given undirected graph is bipartite using BFS. Parameters: graph (dict): A dictionary representing the graph where keys are vertex identifiers and values are lists of adjacent vertices. Returns: bool: True if the graph is bipartite, False otherwise. color = {} for start in graph: if start not in color: # BFS to check bipartiteness from this node queue = [start] color[start] = 0 # Arbitrary color choice for starting node while queue: node = queue.pop(0) current_color = color[node] next_color = 1 - current_color # Alternate color for neighbor in graph[node]: if neighbor not in color: color[neighbor] = next_color queue.append(neighbor) elif color[neighbor] == current_color: # Neighbor has the same color, not bipartite return False return True"},{"question":"# Scenario A marketing company wants to analyze customer review trends for their clients. They need a function that can identify the most frequently occurring word in a list of customer reviews, excluding common stop words. # Task Implement a function `most_frequent_word(reviews: List[str], stop_words: List[str]) -> str` to find the most repeated non-stop word in the provided reviews. Ignore punctuation, and consider words case-insensitively. # Input - `reviews`: A list of strings where each string is a customer review. - `stop_words`: A list of strings representing common stop words that should be excluded from consideration. # Output - A string representing the most frequent word that is not a stop word. # Constraints and Notes - The list `reviews` can be of arbitrary length, each review is non-empty and can contain multiple words. - The list `stop_words` will contain at least one word. - If there are multiple words with the same highest frequency, return the lexicographically smallest one. - Pay attention to edge cases, like all words being stop words or reviews containing only punctuation. # Example ```python >>> reviews = [\\"This product is great, I love it!\\", \\"I love the product too\\", \\"Great service and great product\\"] >>> stop_words = [\\"is\\", \\"I\\", \\"the\\", \\"and\\", \\"too\\"] >>> most_frequent_word(reviews, stop_words) \'great\' >>> reviews = [\\"Best service ever!!!\\", \\"Service was okay...\\", \\"Okay service.\\"] >>> stop_words = [\\"ever\\", \\"was\\"] >>> most_frequent_word(reviews, stop_words) \'okay\' ``` # Performance Requirements - Your solution should efficiently handle large lists of reviews and stop words. - Expected to have a time complexity better than O(n^2) where n is the total number of words in all reviews combined. # Additional Notes - Ensure your implementation handles punctuation and capitalization appropriately (e.g., \\"product!\\" and \\"Product\\" should be treated as the same word \\"product\\"). - Validation of results through comprehensive test cases is recommended to cover various potential edge cases and scenarios.","solution":"import re from collections import Counter from typing import List def most_frequent_word(reviews: List[str], stop_words: List[str]) -> str: Returns the most frequent non-stop word in the provided list of reviews. Args: reviews (List[str]): A list of customer reviews. stop_words (List[str]): A list of common stop words to be excluded. Returns: str: The most frequent non-stop word. # List of words to exclude stop_words_set = set(map(str.lower, stop_words)) # Word frequency dictionary word_freq = Counter() # Iterate over each review for review in reviews: # Remove punctuation and convert to lower case words = re.findall(r\'bw+b\', review.lower()) for word in words: if word not in stop_words_set: word_freq[word] += 1 # Find the most frequent word, with lexicographical order tie-breaking most_frequent = None highest_frequency = 0 for word, freq in word_freq.items(): if freq > highest_frequency or (freq == highest_frequency and word < most_frequent): highest_frequency = freq most_frequent = word return most_frequent"},{"question":"**2-Sum Pair Indices** Your task is to implement a function that returns the indices of two distinct elements in a given list that add up to a specific target integer. If there are multiple pairs that satisfy the requirement, return the pair with the smallest indices (first pair found). If no such pair exists, return an empty list. # Function Signature ```python def two_sum(nums: List[int], target: int) -> List[int]: pass ``` # Input - `nums`: A list of integers. - `target`: An integer representing the target sum. # Output - A list containing two integers representing the indices of the two numbers that add up to the target sum. - An empty list if no such pair exists. # Constraints - `nums` will always contain at least two integers. - You may not use the same element twice. - Indices should be zero-based. # Example - If `nums` is `[2, 7, 11, 15]` and `target` is `9`, the function should return `[0, 1]` because `nums[0] + nums[1] = 2 + 7 = 9`. - If `nums` is `[1, 2, 3, 4, 5]` and `target` is `10`, the function should return `[]` because there are no two numbers in the list that add up to 10. # Performance Requirements - The solution should efficiently find the pair of indices without unnecessary calculations. - The solution should preferably have a time complexity of O(n). # Scenario/Context You are given a common algorithmic problem often used in coding assessments and interviews. Your function should effectively identify the pair of indices that sum up to the target integer, returning them as a list in the required format.","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: Returns the indices of two distinct elements in nums that add up to the target. If no such pair exists, returns an empty list. index_map = {} for i, num in enumerate(nums): complement = target - num if complement in index_map: return [index_map[complement], i] index_map[num] = i return []"},{"question":"# Frequency Counter with Memory Optimization **Scenario**: You are tasked with creating a memory-efficient frequency counter to track the occurrences of different elements (such as items in a stream of data). This implementation will help solidify your understanding of data structures and memory management techniques. You will implement the counter with the ability to efficiently handle large datasets and avoid excessive memory usage. **Task**: 1. **Understand** the concept of a frequency counter and the challenges of handling large datasets. 2. **Implement** a `FrequencyCounter` class with the following features: - Use a space-efficient data structure to track element frequencies. - Implement a method that can efficiently merge data from another frequency counter. - Allow limitations on the memory footprint and gracefully handle scenarios exceeding set memory limits. 3. Verify your implementation with provided test cases and ensure its correctness. **Function Signature**: ```python class FrequencyCounter: def __init__(self, max_memory_mb: int) -> None: def add(self, item: str) -> None: def count(self, item: str) -> int: def merge(self, other: \'FrequencyCounter\') -> None: ``` **Expected Input and Output**: 1. **init()**: - Parameters: - `max_memory_mb` (int): Maximum memory footprint in megabytes that the counter can use. - Returns: None 2. **add()**: - Parameters: - `item` (str): The item to add to the counter. - Returns: None 3. **count()**: - Parameters: - `item` (str): The item to get the count for. - Returns: - int: Count of the item. 4. **merge()**: - Parameters: - `other` (FrequencyCounter): Another frequency counter to merge data from. - Returns: None **Constraints and Limitations**: - Ensure the memory usage remains within the specified limit. - Efficiently handle the merging of two frequency counters to aggregate data without duplicating records. - Test your implementation on large datasets to validate memory usage and performance. **Example Usage**: ```python # Create frequency counters with a memory limit fc1 = FrequencyCounter(max_memory_mb=10) fc2 = FrequencyCounter(max_memory_mb=10) # Add items to the frequency counter fc1.add(\\"apple\\") fc1.add(\\"banana\\") fc1.add(\\"apple\\") fc2.add(\\"banana\\") fc2.add(\\"orange\\") # Retrieve item counts print(fc1.count(\\"apple\\")) # Output: 2 print(fc1.count(\\"banana\\")) # Output: 1 print(fc2.count(\\"orange\\")) # Output: 1 # Merge fc2 into fc1 fc1.merge(fc2) # Retrieve item counts after merge print(fc1.count(\\"banana\\")) # Output: 2 print(fc1.count(\\"orange\\")) # Output: 1 ``` **Example Constraint Handling**: For memory optimization, consider leveraging algorithms or data structures such as: - HyperLogLog - Count-Min Sketch Ensure that when the memory limit is exceeded, the counter gracefully degrades (e.g., by using approximate counting techniques) instead of failing or throwing an error. Implement these features and demonstrate your implementation\'s functionality with relevant test cases on large and small datasets.","solution":"from collections import defaultdict class FrequencyCounter: def __init__(self, max_memory_mb: int) -> None: self.max_memory_mb = max_memory_mb self.counter = defaultdict(int) def add(self, item: str) -> None: self.counter[item] += 1 def count(self, item: str) -> int: return self.counter[item] def merge(self, other: \'FrequencyCounter\') -> None: for item, count in other.counter.items(): self.counter[item] += count"},{"question":"# Question: You are given a string containing digits from \'0\' to \'9\'. Write a function to find the largest 5-digit number that can be formed from consecutive digits within the input string. Your solution should implement a function `largest_five_digit_number` in Python that processes the string efficiently and leverages optimal algorithms. # Requirements: * The function signature should be: ```python def largest_five_digit_number(s: str) -> int: ``` * The function should return an integer representing the largest 5-digit number found in the string. * The function should raise a `ValueError` if the input string contains less than 5 digits. * Ensure your implementation is optimized for performance, especially when dealing with large input strings. # Constraints: * The input string will have at most `10^6` characters. * The characters in the input string will be digits from \'0\' to \'9\'. # Performance Requirements: * The function should have a time complexity of O(n), where n is the length of the input string. * Space complexity should remain within a feasible range to handle the maximum constraints. # Examples: ```python assert largest_five_digit_number(\\"1234567890\\") == 67890 assert largest_five_digit_number(\\"98765432123456\\") == 98765 assert largest_five_digit_number(\\"012345\\") == 12345 try: largest_five_digit_number(\\"1234\\") except ValueError as e: print(e) # Expected output: Input string must contain at least 5 digits ```","solution":"def largest_five_digit_number(s: str) -> int: Returns the largest 5-digit number found in the string of digits. :param s: A string of digits :return: The largest 5-digit number represented as an integer if len(s) < 5: raise ValueError(\\"Input string must contain at least 5 digits\\") max_number = 0 for i in range(len(s) - 4): current_number = int(s[i:i + 5]) if current_number > max_number: max_number = current_number return max_number"},{"question":"# Substring Search in a Composite String You are given two strings, `source` and `target`. Your task is to determine if the `target` string can be constructed by concatenating repeated substrings of the `source` string. If possible, return `True`; otherwise, return `False`. Implement the function `can_construct` which takes in the following parameters: - `source`: A non-empty string. - `target`: A non-empty string. The function should return a boolean indicating whether the `target` string can be constructed from repeated substrings of the `source` string. Example ```python source = \\"abc\\" target = \\"abcabcabc\\" print(can_construct(source, target)) # Output: True source = \\"ab\\" target = \\"abababab\\" print(can_construct(source, target)) # Output: True source = \\"abc\\" target = \\"abcab\\" print(can_construct(source, target)) # Output: False ``` Constraints 1. Both `source` and `target` will consist of lowercase alphabetical characters only. 2. The length of the `source` string will not exceed 100. 3. The length of the `target` string will not exceed 10^4. Requirements - Implement the function efficiently to handle large input sizes. - Minimize space complexity where possible. Notes 1. Consider edge cases like `source` being a single character or `target` length not being a multiple of `source` length. 2. Ensure proper handling when `target` cannot be formed from the `source` substrings.","solution":"def can_construct(source, target): Determine if the target string can be constructed by concatenating repeated substrings of the source string. Parameters: source (str): The source string. target (str): The target string. Returns: bool: True if the target can be constructed, False otherwise. # Check if length of target is a multiple of the source length if len(target) % len(source) != 0: return False # Calculate the number of times the source needs to be repeated repeat_count = len(target) // len(source) # Form the repeated string repeated_source = source * repeat_count # Check if repeated string matches the target return repeated_source == target"},{"question":"# Coding Assessment Question Scenario You are given a sequence of brackets that consists of only \'[\' and \']\'. You need to determine if the brackets are balanced. A sequence of brackets is balanced if every opening \'[\' has a corresponding closing \']\', and the sequence properly nests these pairs. For example, the sequence \\"[[[]]]\\" is balanced, but the sequence \\"[[]][\\" is not. Problem Statement Implement a function, `is_balanced(s: str) -> bool`, that takes a string `s` consisting of brackets and returns a boolean indicating whether the sequence is balanced. Constraints * The string `s` will only contain the characters \'[\' and \']\'. * The length of `s` will be between 1 and 10^5. Input * A string `s` containing only \'[\' and \']\' characters. Output * A boolean which is `True` if the sequence is balanced, otherwise `False`. Example ```python def is_balanced(s: str) -> bool: # Your implementation here # Example Usages: print(is_balanced(\\"[[]]\\")) # Output: True print(is_balanced(\\"[[[]\\")) # Output: False print(is_balanced(\\"[][][]\\")) # Output: True print(is_balanced(\\"[]][[]\\")) # Output: False ```","solution":"def is_balanced(s: str) -> bool: Determines if the bracket sequence is balanced. :param s: A string containing only \'[\' and \']\' characters. :return: True if the sequence is balanced, otherwise False. balance = 0 for char in s: if char == \'[\': balance += 1 elif char == \']\': balance -= 1 if balance < 0: return False return balance == 0"},{"question":"# Context In the world of search and file management, it is often necessary to identify and rank files based on certain criteria, such as frequency of keyword occurrence. This is particularly useful in search engines, document management systems, and database queries. # Task You need to write a function that takes a directory path and a keyword, searches all text files within that directory for the keyword, and returns a list of files sorted by the frequency of the keyword\'s occurrence. If two files have the same frequency, they should be sorted alphabetically by their filenames. # Function Signature: ```python def rank_files_by_keyword(directory_path: str, keyword: str) -> list[str]: pass ``` # Input - `directory_path`: A string representing the path to the directory containing text files. - `keyword`: A string representing the keyword to search for. # Output - A list of strings, where each string is a filename sorted by the frequency of the keyword\'s occurrence in descending order. If two files have the same frequency, they should be sorted alphabetically by their filenames. # Constraints 1. Only text files (with a `.txt` extension) in the given directory should be considered. 2. The keyword search should be case-insensitive. 3. If the directory contains no text files, the function should return an empty list. 4. If a file contains the keyword multiple times in a single line, each occurrence should be counted separately. # Performance Requirements - Time Complexity: O(n * m), where n is the number of files and m is the average number of lines per file. - Space Complexity: O(f), where f is the number of files. # Example Consider a directory `sample_dir` containing the following text files: - `file1.txt`: \\"hello world. This is a hello test.\\" - `file2.txt`: \\"Another text file. Testing the keyword \'hello\'.\\" - `file3.txt`: \\"file without the target keyword.\\" Running the function: ```python print(rank_files_by_keyword(\'sample_dir\', \'hello\')) ``` Should output: ``` [\'file1.txt\', \'file2.txt\'] ``` # Notes - Your function should handle any potential file reading errors gracefully, such as file access permissions, and skip to the next file if any such errors occur. - Ensure that you use best practices for file handling, including using context managers. # Example Implementation ```python import os def rank_files_by_keyword(directory_path: str, keyword: str) -> list[str]: keyword = keyword.lower() file_keyword_frequency = [] for filename in os.listdir(directory_path): if filename.endswith(\'.txt\'): try: with open(os.path.join(directory_path, filename), \'r\') as file: content = file.read().lower() keyword_count = content.count(keyword) if keyword_count > 0: file_keyword_frequency.append((filename, keyword_count)) except Exception as e: continue file_keyword_frequency.sort(key=lambda x: (-x[1], x[0])) return [file[0] for file in file_keyword_frequency] # Example Output print(rank_files_by_keyword(\'sample_dir\', \'hello\')) ``` # Explanation - The function reads through all `.txt` files in the specified directory. - It counts occurrences of the keyword in a case-insensitive manner. - It returns the filenames sorted by the frequency of the keyword in descending order, and alphabetically by filename when frequencies are equal.","solution":"import os def rank_files_by_keyword(directory_path: str, keyword: str) -> list[str]: keyword = keyword.lower() file_keyword_frequency = [] for filename in os.listdir(directory_path): if filename.endswith(\'.txt\'): try: with open(os.path.join(directory_path, filename), \'r\', encoding=\'utf-8\') as file: content = file.read().lower() keyword_count = content.count(keyword) if keyword_count > 0: file_keyword_frequency.append((filename, keyword_count)) except Exception as e: continue file_keyword_frequency.sort(key=lambda x: (-x[1], x[0])) return [file[0] for file in file_keyword_frequency]"},{"question":"Prime Number Checker Scenario A software development firm is working on a project that requires checking if numbers are prime. Your task is to write a function that determines whether a given integer is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Task 1. Write a function `is_prime(number: int) -> bool` that takes a single integer as input and returns a boolean indicating whether the number is a prime. 2. The function should raise a `ValueError` if the input is not a positive integer greater than 1. 3. Optimize the function to handle larger integers efficiently. Input and Output Formats * **Input**: An integer number. * **Output**: A boolean value `True` if the number is a prime, otherwise `False`. Constraints & Limitations * The input number will have a value of `2 <= number <= 10^6`. * The function should raise a `ValueError` for non-integer inputs or integers not greater than 1. Example ```python >>> is_prime(5) True >>> is_prime(4) False >>> is_prime(-3) Traceback (most recent call last): ... ValueError: Input must be a positive integer greater than 1. ``` Performance Requirements * Aim for a solution with optimized time complexity, ideally around O(sqrt(n)). Additional Notes Consider edge cases such as the smallest prime number and large prime numbers.","solution":"def is_prime(number: int) -> bool: Checks if the given number is a prime number. :param number: integer to check :return: True if the number is prime, False otherwise :raises ValueError: if the input is not a positive integer greater than 1 if not isinstance(number, int) or number <= 1: raise ValueError(\\"Input must be a positive integer greater than 1.\\") if number == 2: return True if number % 2 == 0: return False for i in range(3, int(number**0.5) + 1, 2): if number % i == 0: return False return True"},{"question":"# Task You are required to implement a function that calculates and returns the convolution of two lists of integers. The convolution operation should produce a new list which is the discrete, linear convolution of the input lists. # Function Signature ```python def discrete_convolution(lst1: list[int], lst2: list[int]) -> list[int]: pass ``` # Input * `lst1 (list[int])`: A list of integers representing the first sequence. * `lst2 (list[int])`: A list of integers representing the second sequence. # Output * A list of integers representing the convolution of the two input lists. # Constraints * Both input lists will have at least one and at most 1000 elements. * Each integer in the lists will be between -1000 and 1000 inclusive. # Example ```python # Example inputs lst1 = [1, 2, 3] lst2 = [0, 1, 0.5] # Calculating the convolution result = discrete_convolution(lst1, lst2) print(result) ``` Expected Output: ```python [0.0, 1.0, 2.5, 4.0, 1.5] ``` # Notes The convolution operation for two sequences `lst1` and `lst2` is defined as follows: * The resulting list length will be `len(lst1) + len(lst2) - 1`. * Each element in the resulting list is the sum of products of corresponding elements from `lst1` and a reversed `lst2` that are aligned based on the current index position.","solution":"def discrete_convolution(lst1: list[int], lst2: list[int]) -> list[int]: Calculates the discrete convolution of two lists of integers. n = len(lst1) m = len(lst2) result = [0] * (n + m - 1) for i in range(n): for j in range(m): result[i + j] += lst1[i] * lst2[j] return result"},{"question":"# Unique Identifier Generation for Database Records **Objective**: Implement a function to generate unique identifiers for new database records, ensuring these identifiers are truly unique despite the database scale. **Scenario**: In a database system, each record needs a unique identifier for referencing. The challenge is to create a function that generates these identifiers efficiently, ensuring they remain unique even as the database grows in size. **Requirements**: - Define a function `generate_unique_id(existing_ids: set) -> str` that: - Takes a set of existing IDs already in the database. - Returns a string representing a new unique identifier. - The identifier should be a 10-character alphanumeric string. - Ensure the ID generation is quick and efficient, even for a large set of existing IDs. - The identifier must be case-sensitive (e.g., \'a\' and \'A\' are different). **Function Signature**: ```python def generate_unique_id(existing_ids: set) -> str: pass ``` **Constraints**: - The set of existing IDs can be large (up to 1,000,000 entries). - Each ID in the set is a non-empty string of 10 characters. **Examples**: 1. `generate_unique_id({\\"abc123XYZ9\\", \\"1234567890\\", \\"A1B2C3D4E5\\"})` - Might return: ```python \\"Z2X3V4T5H6\\" ``` 2. `generate_unique_id(set())` - Should return: ```python \\"A1B2C3D4E5\\" ``` 3. If `\\"1A2B3C4D5E\\"` already exists in the set: - The function should ensure the newly generated ID is not `\\"1A2B3C4D5E\\"`. # Note: - Generating the same ID as an existing one should be impossible. - The function should handle worst-case scenarios efficiently, ensuring rapid ID generation despite the scale of `existing_ids`.","solution":"import random import string def generate_unique_id(existing_ids: set) -> str: Generates a unique 10-character alphanumeric string that is not present in existing_ids. Args: - existing_ids (set): A set of strings representing the existing unique IDs in the database. Returns: - str: A new unique 10-character alphanumeric string. characters = string.ascii_letters + string.digits while True: new_id = \'\'.join(random.choices(characters, k=10)) if new_id not in existing_ids: return new_id"},{"question":"# Scenario A music service platform needs a functionality in their system to calculate the total playtime of a playlist. The playlist contains multiple songs, each with its specific duration in minutes and seconds. You need to write a function to sum up all durations and return the total playtime. # Task Description Implement a function `total_playtime` that takes a list of strings `playlist` and returns a string representing the total playtime in the format \\"H:MM:SS\\". Each string in `playlist` indicates the duration of a song in the format \\"M:SS\\". # Function Signature ```python def total_playtime(playlist: list[str]) -> str: pass ``` # Input * A list of strings `playlist` with each string in the format \\"M:SS\\". The list may contain up to 1000 songs. Each song duration is composed of positive integers. # Output * A single string representing the total playtime, formatted as \\"H:MM:SS\\". # Constraints * The input list will contain at least one song. * The total time will not exceed 999 hours. # Example Example 1 ```python playlist = [\\"4:10\\", \\"2:30\\", \\"3:50\\"] print(total_playtime(playlist)) # Output: \\"0:10:30\\" ``` Example 2 ```python playlist = [\\"59:59\\", \\"0:01\\", \\"0:10\\"] print(total_playtime(playlist)) # Output: \\"1:00:10\\" ``` Example 3 ```python playlist = [\\"120:45\\"] print(total_playtime(playlist)) # Output: \\"2:00:45\\" ``` Example 4 ```python playlist = [\\"12:10\\", \\"46:50\\", \\"23:45\\", \\"6:05\\"] print(total_playtime(playlist)) # Output: \\"1:28:50\\" ``` # Notes * Ensure that you consider scenarios where the summed-up seconds exceed 60, and minutes roll over to hours accordingly. * Use only the Python standard library to solve this problem.","solution":"def total_playtime(playlist): total_seconds = 0 for song in playlist: minutes, seconds = map(int, song.split(\':\')) total_seconds += minutes * 60 + seconds hours = total_seconds // 3600 total_seconds %= 3600 minutes = total_seconds // 60 seconds = total_seconds % 60 return f\\"{hours}:{minutes:02}:{seconds:02}\\""},{"question":"**Task**: Implement a function that performs sentiment analysis on a string of text using a simple rule-based approach. # Scenario You are tasked with developing a rudimentary sentiment analysis tool that can classify pieces of text as \\"positive\\", \\"negative\\", or \\"neutral\\" based on predefined sets of positive and negative words. # Implementation Write a function called `simple_sentiment_analysis` with the following signature: ```python def simple_sentiment_analysis(text: str, positive_words: list, negative_words: list) -> str: Determines the sentiment of the given text based on predefined positive and negative words. Parameters: - text (str): The input text to analyze. - positive_words (list): A list of words considered positive. - negative_words (list): A list of words considered negative. Returns: - str: \\"positive\\", \\"negative\\", or \\"neutral\\" based on the content of the text. ``` # Requirements 1. Check each word in the input `text` against the lists of `positive_words` and `negative_words`. 2. Count the occurrences of positive and negative words. 3. Determine the overall sentiment: - Return \\"positive\\" if there are more positive word occurrences than negative. - Return \\"negative\\" if there are more negative word occurrences than positive. - Return \\"neutral\\" if the counts of positive and negative words are equal or both are zero. 4. The function should be case insensitive. # Constraints - The input text `text` can be any standard string of words. - The function should handle punctuation and special characters appropriately (e.g., \\"happy!\\" should be recognized as \\"happy\\"). # Example Usage ```python positive_words = [\\"happy\\", \\"joy\\", \\"love\\", \\"excellent\\", \\"good\\"] negative_words = [\\"sad\\", \\"hate\\", \\"bad\\", \\"terrible\\", \\"awful\\"] print(simple_sentiment_analysis(\\"I am feeling very happy today!\\", positive_words, negative_words)) # Expected output: \\"positive\\" print(simple_sentiment_analysis(\\"This is absolutely terrible and awful.\\", positive_words, negative_words)) # Expected output: \\"negative\\" print(simple_sentiment_analysis(\\"I have no opinion on this matter.\\", positive_words, negative_words)) # Expected output: \\"neutral\\" print(simple_sentiment_analysis(\\"\\", positive_words, negative_words)) # Expected output: \\"neutral\\" print(simple_sentiment_analysis(\\"It is a mix of good and bad.\\", positive_words, negative_words)) # Expected output: \\"neutral\\" ``` # Notes - Ensure to handle various edge cases such as empty strings, punctuation, and mixed case words properly. - Consider making enhancements to the function, such as handling emoticons or common abbreviations, and document any added features.","solution":"import re def simple_sentiment_analysis(text: str, positive_words: list, negative_words: list) -> str: Determines the sentiment of the given text based on predefined positive and negative words. Parameters: - text (str): The input text to analyze. - positive_words (list): A list of words considered positive. - negative_words (list): A list of words considered negative. Returns: - str: \\"positive\\", \\"negative\\", or \\"neutral\\" based on the content of the text. # Normalize the text to lower case and remove punctuation text = text.lower() words = re.findall(r\'bw+b\', text) positive_count = sum(1 for word in words if word in positive_words) negative_count = sum(1 for word in words if word in negative_words) if positive_count > negative_count: return \\"positive\\" elif negative_count > positive_count: return \\"negative\\" else: return \\"neutral\\""},{"question":"# Coding Assessment Question: Decode a Unique Sequence You are given a sequence of words that has been encoded by reversing the order of characters in each word. Your task is to decode the sequence by reversing each word to restore the original sequence. Problem Description Given a list of encoded words, where each word has been formed by reversing its original characters, implement a function `decode_sequence(encoded_words: list) -> list` that decodes the words by reversing them back to their original form. Input - `encoded_words`: A list of strings where each string represents an encoded word. Output - Returns a list of strings that are the decoded words. Example ```python def decode_sequence(encoded_words: list) -> list: # Implement the function here pass encoded_words = [\\"retsam\\", \\"si\\", \\"gnortsm\\", \\"evah\\", \\"nohtyP\\", \\"taht\\", \\"ray\\"] decoded_words = decode_sequence(encoded_words) print(decoded_words) # Expected Output: [\\"master\\", \\"is\\", \\"strong\\", \\"have\\", \\"Python\\", \\"that\\", \\"ray\\"] ``` Constraints - Each word in the `encoded_words` list has a length between 1 and 100 characters. - The list `encoded_words` contains at most 10,000 words. Performance Requirements - Time complexity should be O(W), where W is the total number of characters in all words. - Space complexity should be O(W).","solution":"def decode_sequence(encoded_words: list) -> list: Decodes a list of encoded words by reversing each word to restore the original sequence. :param encoded_words: List of strings, where each string is an encoded word. :return: List of strings with decoded words. return [word[::-1] for word in encoded_words]"},{"question":"# Context In string manipulation, the concept of the longest palindromic substring is a common problem where the goal is to find the maximum-length substring within a given string that reads the same forwards and backwards. This problem has applications in various fields such as bioinformatics, data compression, and information retrieval. # Task Implement a class `PalindromeSubstring` that can efficiently identify and handle the longest palindromic substring problem. The class should support the following functionalities: 1. **Finding the longest palindromic substring**. 2. **Checking if a given substring is palindromic**. # Your Task Function Implementations **Class**: `PalindromeSubstring` 1. **__init__(self, s: str)** - **Input**: A string `s`. - **Functionality**: Stores the input string for subsequent operations. 2. **longest_palindrome(self) -> str** - **Output**: Returns the longest palindromic substring in the stored string. - **Time Complexity**: O(n^2), where `n` is the length of the string. 3. **is_palindromic(self, start: int, end: int) -> bool** - **Input**: Indices `start` and `end` defining a substring. - **Output**: Returns `True` if the substring `s[start:end+1]` is a palindrome, otherwise `False`. - **Time Complexity**: O(n). Constraints - The length of the input string will not exceed `1000`. - The input string consists of printable ASCII characters. # Example ```python # Assuming the implementation is already done. ps = PalindromeSubstring(\\"babad\\") # Find the longest palindromic substring print(ps.longest_palindrome()) # Output: \\"bab\\" or \\"aba\\" # Check if the substring from index 0 to 2 is palindromic print(ps.is_palindromic(0, 2)) # Output: True ```","solution":"class PalindromeSubstring: def __init__(self, s: str): Initializes the PalindromeSubstring with the provided string. self.s = s def is_palindromic(self, start: int, end: int) -> bool: Checks if the substring from \'start\' to \'end\' (inclusive) is a palindrome. while start < end: if self.s[start] != self.s[end]: return False start += 1 end -= 1 return True def longest_palindrome(self) -> str: Finds the longest palindromic substring in the stored string. n = len(self.s) if n == 0: return \\"\\" start, max_length = 0, 1 for i in range(n): low, high = i - 1, i + 1 while high < n and self.s[high] == self.s[i]: high += 1 while low >= 0 and self.s[low] == self.s[i]: low -= 1 while low >= 0 and high < n and self.s[low] == self.s[high]: low -= 1 high += 1 length = high - low - 1 if length > max_length: start = low + 1 max_length = length return self.s[start:start + max_length]"},{"question":"# Coding Question Scenario In a software product that deals with managing large datasets, you want to implement an efficient algorithm to find pairs of elements in a sorted array of integers that sum up to a specified target value. The solution needs to be optimized to avoid unnecessary computations to handle large datasets effectively. Problem Statement Write a function `find_pairs_with_sum` that identifies all unique pairs of integers in a sorted array whose sum is equal to a given target value. The function should return a list of tuples representing these pairs, with each tuple containing two integers. Implementation - The function `find_pairs_with_sum` should accept: - A list of integers `arr`, which is sorted in non-decreasing order. - An integer `target` representing the target sum. - The function should return a list of tuples, where each tuple represents a unique pair of integers that sum up to `target`. Input - `arr`: A sorted list of integers `List[int]` - `target`: An integer `int` representing the sum to find pairs for Output - A list of tuples `List[Tuple[int, int]]` where each tuple is a pair of integers from `arr` that sum up to `target`. Constraints - The length of `arr` will be between 1 and 100,000. - The integers in `arr` will be in the range `-10^6` to `10^6`. - Each element in `arr` is unique. Example ```python def find_pairs_with_sum(arr, target): # implementation here print(find_pairs_with_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 10)) # Output should be [(1, 9), (2, 8), (3, 7), (4, 6)] print(find_pairs_with_sum([-10, -5, 0, 5, 10], 0)) # Output should be [(-10, 10), (-5, 5)] ``` Ensure that your implementation is efficient, especially with large arrays. Utilize appropriate data structures and algorithms to minimize the time complexity.","solution":"def find_pairs_with_sum(arr, target): Finds all unique pairs in a sorted array that sum up to the target value. left = 0 right = len(arr) - 1 result = [] while left < right: current_sum = arr[left] + arr[right] if current_sum == target: result.append((arr[left], arr[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return result"},{"question":"Longest Consecutive Sequence in a Binary Tree Given a binary tree, find the length of the longest consecutive sequence path. The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The consecutive sequence must be strictly increasing by exactly 1 at each step. Function Signature ```python def longest_consecutive_sequence(root: Node | None) -> int: ``` Input * `root`: The root node of a binary tree. Output * `result`: An integer representing the length of the longest consecutive sequence path. Constraints * The number of nodes in the tree is in the range [0, 10⁴]. * The value of each node is an integer between -10⁴ and 10⁴. Example ```python # Input Tree: # 1 # # 3 # / # 2 4 # # 5 root = Node(1) root.right = Node(3) root.right.left = Node(2) root.right.right = Node(4) root.right.right.right = Node(5) print(longest_consecutive_sequence(root)) # Output: # 3 (1 -> 2 -> 3) # Input Tree: # 2 # # 3 # / # 2 # / # 1 new_root = Node(2) new_root.right = Node(3) new_root.right.left = Node(2) new_root.right.left.left = Node(1) print(longest_consecutive_sequence(new_root)) # Output: # 2 (2 -> 3) ``` Notes Your implementation should traverse the tree to find paths with consecutive values, keeping track of the longest path found. This will require a good understanding of tree traversal and how to manage state as you recursively process each node in the tree.","solution":"class Node: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longest_consecutive_sequence(root: Node) -> int: def dfs(node, parent, length): if not node: return length if parent and node.val == parent.val + 1: length += 1 else: length = 1 left_length = dfs(node.left, node, length) right_length = dfs(node.right, node, length) return max(length, left_length, right_length) return dfs(root, None, 0)"},{"question":"# Problem Statement You are tasked with implementing a function to sort a list of strings based on their lengths. If two or more strings have the same length, they should be sorted lexicographically (alphabetically). # Functional Requirements - **Function Name**: `sort_strings_by_length` - **Input**: - A list of strings (`string_list`). - **Output**: - A list of strings, sorted first by their lengths in ascending order and then by lexicographical order for strings of the same length. - **Constraints**: - The input list may contain empty strings. - Handle non-list inputs by returning an appropriate empty list. # Non-Functional Requirements - **Error Handling**: Ensure the function gracefully handles empty, null, and non-list inputs by returning an appropriate empty list. - **Performance**: The solution should efficiently handle large lists without significant time or memory overhead. # Example Input/Output ```python >>> sort_strings_by_length([\\"apple\\", \\"banana\\", \\"kiwi\\", \\"grape\\"]) [\'kiwi\', \'apple\', \'grape\', \'banana\'] >>> sort_strings_by_length([\\"a\\", \\"abc\\", \\"ab\\", \\"\\"]) [\'\', \'a\', \'ab\', \'abc\'] >>> sort_strings_by_length([\\"car\\", \\"bike\\", \\"train\\", \\"bus\\"]) [\'car\', \'bus\', \'bike\', \'train\'] >>> sort_strings_by_length([]) [] >>> sort_strings_by_length([\\"\\"] [\'\'] >>> sort_strings_by_length(None) [] ``` # Implementation Implement the function `sort_strings_by_length` based on the requirements specified above. ```python def sort_strings_by_length(string_list): if not isinstance(string_list, list): return [] return sorted(string_list, key=lambda x: (len(x), x))","solution":"def sort_strings_by_length(string_list): if not isinstance(string_list, list): return [] return sorted(string_list, key=lambda x: (len(x), x))"},{"question":"# Task Programming Task: Generate All Anagrams **Context**: Anagrams are different words or phrases formed by rearranging the letters of a given word or phrase. Finding all possible anagrams of a word is a common problem that tests string manipulation and permutation generation algorithms. # Problem Statement Write a function `generate_anagrams(word: str) -> list` that takes a single word as input and returns a list of all unique anagrams that can be formed by rearranging its letters. # Input and Output Format **Input**: 1. `word` (str): The input word for which anagrams need to be generated. The word will consist only of lowercase alphabetical characters. **Output**: - Returns a `list` of strings, where each string is a unique anagram of the input word. # Constraints: - `1 <= len(word) <= 9`: The input string\'s length will not exceed 9 characters to ensure that the output list can be reasonably large without performance issues. # Example Input: ```python word = \\"abc\\" ``` Output: ```python [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] ``` Input: ```python word = \\"aab\\" ``` Output: ```python [\'aab\', \'aba\', \'baa\'] ``` # Edge Cases to Consider - Words with duplicate letters. - The length of the word is 1 (i.e., the word itself is the only possible anagram). # Additional Instructions Ensure the function correctly handles words with repeated characters by producing unique anagrams only and is efficient within the given constraints.","solution":"from itertools import permutations def generate_anagrams(word: str) -> list: Generates all unique anagrams of a given word. :param word: Input word as a string :return: A list of unique anagrams # Generate all permutations of the word all_permutations = [\'\'.join(p) for p in permutations(word)] # Use a set to remove duplicates unique_anagrams = list(set(all_permutations)) # Sort the list to have a consistent order for testing unique_anagrams.sort() return unique_anagrams"},{"question":"# Longest Subarray with Distinct Values **Background**: This question assesses your ability to work with arrays, specifically focusing on identifying subarrays with unique values. This is a common problem that involves sliding window techniques and hash maps for efficiently tracking occurrences of elements. **Problem Statement**: Implement a function `find_longest_distinct_subarray(arr: List[int]) -> int` that takes a list of integers `arr` and returns the length of the longest subarray with all distinct values. # Implementation Details 1. **Sliding Window**: Use a sliding window approach to keep track of the current subarray of distinct elements. Adjust the window whenever a duplicate is encountered. 2. **Hash Map**: Utilize a hash map to store the last occurrence index of each element to efficiently shift the window. # Function Signature ```python def find_longest_distinct_subarray(arr: List[int]) -> int: pass ``` # Input * `arr`: List of integers (1 ≤ len(arr) ≤ 100,000) # Output * Returns an integer representing the length of the longest subarray containing all distinct elements. # Example ```python assert find_longest_distinct_subarray([2, 1, 2, 3, 4, 1]) == 4 assert find_longest_distinct_subarray([1, 2, 3, 4, 5]) == 5 assert find_longest_distinct_subarray([4, 4, 4, 4, 4]) == 1 ``` # Constraints * Optimize for time and space, considering the constraints and potential large input sizes. * Handle invalid or edge-case inputs gracefully, such as an empty list or single-element list. Document any assumptions made. # Additional Notes - This problem tests the ability to efficiently manage data structures for tracking unique elements and dynamically adjusting subarray boundaries. - Emphasize edge cases such as repeated elements and varying input sizes, ensuring your solution is robust under all scenarios.","solution":"from typing import List def find_longest_distinct_subarray(arr: List[int]) -> int: element_index_map = {} start = 0 max_length = 0 for end in range(len(arr)): if arr[end] in element_index_map: start = max(start, element_index_map[arr[end]] + 1) element_index_map[arr[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"# Problem Statement: You are tasked with creating a utility class `ArrayManipulator` that provides several methods for manipulating lists of integers. The class should allow for operations such as finding the nth smallest element, rotating the list by k positions, and finding the longest consecutive sequence of elements. # Detailed Requirements: 1. Create a class `ArrayManipulator` with the following methods: * `find_nth_smallest(self, arr: List[int], n: int) -> int`: Accepts a list `arr` of integers and an integer `n`, and returns the n-th smallest element in the list. If `n` is not valid (greater than the length of the list or less than 1), return `-1`. * `rotate(self, arr: List[int], k: int) -> List[int]`: Rotates the list to the right by `k` positions and returns the rotated list. * `longest_consecutive_sequence(self, arr: List[int]) -> int`: Returns the length of the longest consecutive elements sequence. 2. Constraints: * The input list `arr` can contain duplicate elements. * Assume the list `arr` contains at least one element. * `k` can be any non-negative integer. 3. Input and Output formats: * The methods will receive and return values as specified above. * Sample input: `find_nth_smallest([3, 1, 2, 1, 4], 3)`, `rotate([1, 2, 3, 4, 5], 2)`, `longest_consecutive_sequence([100, 4, 200, 1, 3, 2])` * Sample output: `2`, `[4, 5, 1, 2, 3]`, `4` # Performance: * The `find_nth_smallest` and `rotate` methods should have linear time complexity O(n), where n is the length of the input list. * The `longest_consecutive_sequence` method should have linear time complexity O(n). # Example: ```python # Sample usage of the ArrayManipulator class manipulator = ArrayManipulator() # Finding the nth smallest element nth_smallest = manipulator.find_nth_smallest([3, 1, 2, 1, 4], 3) print(nth_smallest) # Output: 2 # Rotating the list rotated_list = manipulator.rotate([1, 2, 3, 4, 5], 2) print(rotated_list) # Output: [4, 5, 1, 2, 3] # Finding the longest consecutive sequence longest_sequence = manipulator.longest_consecutive_sequence([100, 4, 200, 1, 3, 2]) print(longest_sequence) # Output: 4 ```","solution":"from typing import List class ArrayManipulator: def find_nth_smallest(self, arr: List[int], n: int) -> int: Returns the n-th smallest element in the list arr. If n is not valid (greater than the length of the list or less than 1), return -1. if n < 1 or n > len(arr): return -1 return sorted(arr)[n-1] def rotate(self, arr: List[int], k: int) -> List[int]: Rotates the list arr to the right by k positions. k = k % len(arr) # Handle the case where k is greater than length of the list. return arr[-k:] + arr[:-k] def longest_consecutive_sequence(self, arr: List[int]) -> int: Returns the length of the longest consecutive sequence. if not arr: return 0 arr = set(arr) max_length = 0 for num in arr: if num - 1 not in arr: current_num = num current_streak = 1 while current_num + 1 in arr: current_num += 1 current_streak += 1 max_length = max(max_length, current_streak) return max_length"},{"question":"# Coding Question: Dijkstra’s Algorithm for Shortest Path in a Graph In this task, you are required to implement Dijkstra\'s algorithm to find the shortest path from a start node to all other nodes in a given directed weighted graph. Function Signature: ```python def dijkstra(graph: list[list[int]], start: int) -> list[int]: pass ``` # Input: - **graph**: A 2D list where `graph[i][j]` represents the weight of the edge from node `i` to node `j`. If there is no edge from node `i` to node `j`, the value is represented as `float(\'inf\')`. - **start**: An integer representing the starting node for the shortest path calculation. # Output: - A list of integers where the value at index `i` represents the shortest distance from the starting node to node `i`. If a node is unreachable, its distance should be represented as `float(\'inf\')`. # Constraints: - The number of nodes in the graph is `n` (1 <= n <= 100). - There are no negative weight edges. - The graph is represented as an adjacency matrix. # Examples: 1. **Input**: ```python graph = [ [0, 1, 4, float(\'inf\')], [1, 0, 4, 2], [4, 4, 0, 1], [float(\'inf\'), 2, 1, 0] ] start = 0 ``` **Output**: ```python [0, 1, 4, 3] ``` 2. **Input**: ```python graph = [ [0, 3, float(\'inf\'), float(\'inf\')], [3, 0, 1, float(\'inf\')], [float(\'inf\'), 1, 0, 2], [float(\'inf\'), float(\'inf\'), 2, 0] ] start = 1 ``` **Output**: ```python [3, 0, 1, 3] ``` # Explanation: In the first example, starting from node 0: - The shortest path to node 1 is 1. - The shortest path to node 2 is 4. - The shortest path to node 3 is 3 (1 -> 1 -> 3). In the second example, starting from node 1: - The shortest path to node 0 is 3. - The shortest path to node 2 is 1. - The shortest path to node 3 is 3 (1 -> 2 -> 3). # Notes: Ensure that your implementation: - Correctly initializes distances and the priority queue. - Efficiently updates distances to nodes as they are explored. - Handles edge cases such as graph with only one node or nodes that are unreachable from the start.","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra\'s algorithm to find the shortest path from a start node to all other nodes in a graph. :param graph: A 2D list where graph[i][j] represents the weight of the edge from node i to node j. If there is no edge from node i to node j, the value is represented as float(\'inf\'). :param start: An integer representing the starting node for the shortest path calculation. :return: A list of integers where the value at index i represents the shortest distance from the starting node to node i. n = len(graph) distances = [float(\'inf\')] * n distances[start] = 0 pq = [(0, start)] # Priority queue of (distance, node) while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in enumerate(graph[current_node]): if weight < float(\'inf\'): # There is an edge distance = current_distance + weight # Only consider this new path if it\'s better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances"},{"question":"**Scenario**: A logistics company wants to optimize their delivery routes by understanding the shortest paths based on real-time traffic data. You are assigned the task to implement a service that calculates the shortest path between two locations in a city using Dijkstra’s algorithm. # Problem Statement You need to implement a function with the following specifications: # Function Signature ```python def dijkstra(graph: dict, start: str, end: str) -> list: pass ``` # Input Format 1. **graph (dict)**: A dictionary where keys are location names (strings) and values are dictionaries. The nested dictionary contains neighboring locations (keys are strings) and the travel time to those locations (values are positive integers). 2. **start (str)**: The starting location. 3. **end (str)**: The destination location. # Output Format **Returns (list)**: The shortest path from the start location to the end location as a list of location names (strings). # Constraints - The graph is connected, and each location can reach any other location. - There are no negative travel times in the graph. - Locations are denoted by strings and are unique. - The travel times are positive integers. # Performance Requirements - Your function should be efficient enough to handle large maps with many locations and connections. # Examples ```python # Example 1 graph = { \\"A\\": {\\"B\\": 2, \\"C\\": 5}, \\"B\\": {\\"A\\": 2, \\"C\\": 1, \\"D\\": 4}, \\"C\\": {\\"A\\": 5, \\"B\\": 1, \\"D\\": 2}, \\"D\\": {\\"B\\": 4, \\"C\\": 2}, } start = \\"A\\" end = \\"D\\" assert dijkstra(graph, start, end) == [\\"A\\", \\"B\\", \\"C\\", \\"D\\"] # Example 2 graph = { \\"X\\": {\\"Y\\": 3, \\"Z\\": 6}, \\"Y\\": {\\"X\\": 3, \\"Z\\": 2, \\"W\\": 1}, \\"Z\\": {\\"X\\": 6, \\"Y\\": 2, \\"W\\": 1}, \\"W\\": {\\"Y\\": 1, \\"Z\\": 1}, } start = \\"X\\" end = \\"W\\" assert dijkstra(graph, start, end) == [\\"X\\", \\"Y\\", \\"W\\"] ``` Your task is to implement the given function as described, ensuring to handle all edge cases while adhering to the input constraints.","solution":"import heapq def dijkstra(graph, start, end): Calculate the shortest path between start and end using Dijkstra\'s algorithm. :param graph: A dictionary representing the graph where keys are node names and values are dictionaries with neighboring nodes as keys and travel times as values. :param start: The starting node. :param end: The destination node. :return: A list of nodes representing the shortest path from start to end. # Set up the priority queue priority_queue = [(0, start, [])] # A dictionary to store the shortest path to each node shortest_paths = {start: (0, [])} visited = set() while priority_queue: # Get the node with the least travel time current_distance, current_node, path = heapq.heappop(priority_queue) if current_node in visited: continue # Mark the node as visited visited.add(current_node) path = path + [current_node] # If we reached the destination, return the path if current_node == end: return path # Explore the neighbors for neighbor, weight in graph.get(current_node, {}).items(): if neighbor in visited: continue distance = current_distance + weight if neighbor not in shortest_paths or distance < shortest_paths[neighbor][0]: shortest_paths[neighbor] = (distance, path) heapq.heappush(priority_queue, (distance, neighbor, path)) return []"},{"question":"# Sales Data Analysis In this task, you are provided with sales data for a company over a period of time. Your job is to write a function that will analyze this data to identify the sales trends. Input * A list of tuples representing daily sales data. Each tuple contains two elements: - A `date` (string in the format \'YYYY-MM-DD\'). - Sales amount for that day (an integer representing the amount in dollars). Output * A dictionary with the following keys: - `\\"total_sales\\"`: Total sales over the entire period. - `\\"average_sales_per_day\\"`: Average sales per day. - `\\"best_sales_day\\"`: The date with the highest sales. - `\\"worst_sales_day\\"`: The date with the lowest sales. - `\\"sales_in_last_30_days\\"`: Total sales for the last 30 days from the latest date in the list. If there are fewer than 30 days of data, it should return the total sales for all available days. Function Signature ```python def analyze_sales_data(sales_data: List[Tuple[str, int]]) -> Dict[str, Any]: Analyze the given sales data and return the sales trends. Parameters: sales_data (List[Tuple[str, int]]): The input sales data where each tuple contains a date (string \'YYYY-MM-DD\') and the sales amount (int). Returns: Dict[str, Any]: A dictionary containing the sales analysis. ``` Requirements * The function should handle empty input gracefully, returning a dictionary with all values set to `None` except `\\"total_sales\\"` and `\\"average_sales_per_day\\"`, which should be `0`. * Assume all input dates are valid and unique. * Handle any edge cases that may arise from the sales data (e.g., consistent values). Example Usage: ```python sales_data = [ (\\"2023-09-01\\", 1500), (\\"2023-09-02\\", 3500), (\\"2023-09-03\\", 2000), (\\"2023-09-04\\", 4000), (\\"2023-09-05\\", 1000), ] analysis = analyze_sales_data(sales_data) print(analysis) # Example Output: # { # \\"total_sales\\": 12000, # \\"average_sales_per_day\\": 2400.0, # \\"best_sales_day\\": \\"2023-09-04\\", # \\"worst_sales_day\\": \\"2023-09-05\\", # \\"sales_in_last_30_days\\": 12000 # } ``` This question assesses your ability to manipulate data structures, particularly lists and dictionaries, and apply basic statistical calculations with a focus on real-world applications.","solution":"from typing import List, Tuple, Dict, Any from datetime import datetime, timedelta def analyze_sales_data(sales_data: List[Tuple[str, int]]) -> Dict[str, Any]: if not sales_data: return { \\"total_sales\\": 0, \\"average_sales_per_day\\": 0, \\"best_sales_day\\": None, \\"worst_sales_day\\": None, \\"sales_in_last_30_days\\": 0 } total_sales = sum([amount for date, amount in sales_data]) average_sales_per_day = total_sales / len(sales_data) best_sales_day = max(sales_data, key=lambda x: x[1])[0] worst_sales_day = min(sales_data, key=lambda x: x[1])[0] sales_data_sorted = sorted(sales_data, key=lambda x: datetime.strptime(x[0], \'%Y-%m-%d\')) last_date = datetime.strptime(sales_data_sorted[-1][0], \'%Y-%m-%d\') cutoff_date = last_date - timedelta(days=30) sales_in_last_30_days = sum( amount for date, amount in sales_data if datetime.strptime(date, \'%Y-%m-%d\') > cutoff_date ) return { \\"total_sales\\": total_sales, \\"average_sales_per_day\\": average_sales_per_day, \\"best_sales_day\\": best_sales_day, \\"worst_sales_day\\": worst_sales_day, \\"sales_in_last_30_days\\": sales_in_last_30_days }"},{"question":"# Coding Assessment Task Context You are given a set of functions to handle a simple linear regression problem, including generating synthetic data, training the model, and evaluating the results. Your task is to enhance the provided functionalities and refactor it for efficiency and modern practices. Objective Implement a new class `LinearRegressionModel` that encapsulates all necessary functionalities for handling a linear regression task, from data generation to model training and evaluation. Your implementation should include: 1. **Data Generation**: Methods to generate synthetic data with a linear relationship. 2. **Model Training**: Train a linear regression model on the generated data. 3. **Prediction and Evaluation**: Methods to predict new data points and evaluate the model\'s performance. Requirements - Use `numpy` for data generation and manipulation. - Use `sklearn.linear_model` for training the linear regression model. - Implement methods to generate synthetic linear data with noise. - Implement methods to train the model and evaluate it using Mean Squared Error (MSE) as the metric. - Properly handle exceptions and edge cases. # Function Specifications `LinearRegressionModel` * **Attributes**: - `model`: Instance of `sklearn.linear_model.LinearRegression`. - `X_train`: Training feature data. - `y_train`: Training target data. - `X_test`: Testing feature data. - `y_test`: Testing target data. * **Methods**: - `__init__(self)`: Initializes the model. - `generate_data(self, num_samples, noise=0.1)`: Generate synthetic linear data with the specified number of samples and noise level. - `train_model(self)`: Train the linear regression model on the training data. - `predict(self, X)`: Predict target values for given feature data. - `evaluate_model(self)`: Evaluate the model\'s performance using MSE on the test data. # Constraints - Use `numpy` for data generation and manipulation. - Use `sklearn` for implementing the linear regression model. - Generate data with a specified noise level to simulate real-world data. Example Usage ```python lr_model = LinearRegressionModel() lr_model.generate_data(num_samples=100, noise=0.2) lr_model.train_model() predictions = lr_model.predict(lr_model.X_test) mse = lr_model.evaluate_model() print(f\'Mean Squared Error: {mse}\') ``` # Hints - Use `numpy.random` to generate synthetic data with noise. - Use `sklearn.metrics.mean_squared_error` to calculate the MSE. - The `predict` method can directly use `self.model.predict` after training the model.","solution":"import numpy as np from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error from sklearn.model_selection import train_test_split class LinearRegressionModel: def __init__(self): self.model = LinearRegression() self.X_train = None self.y_train = None self.X_test = None self.y_test = None def generate_data(self, num_samples, noise=0.1): np.random.seed(0) X = 2 * np.random.rand(num_samples, 1) y = 4 + 3 * X + np.random.randn(num_samples, 1) * noise self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(X, y, test_size=0.2, random_state=0) def train_model(self): self.model.fit(self.X_train, self.y_train) def predict(self, X): return self.model.predict(X) def evaluate_model(self): predictions = self.model.predict(self.X_test) mse = mean_squared_error(self.y_test, predictions) return mse"},{"question":"Coding Assessment Question: Context: Circular primes are prime numbers that remain prime under all rotations of their digits. For instance, the digits of the number 197 can be rotated to form 971, and 719, all of which are prime numbers. Your task is to identify such circular primes up to a given limit. Problem Statement: Write a Python function that, given an integer `limit`, returns a list of all circular primes less than the `limit`. ```python def find_circular_primes(limit: int) -> list: Find all circular primes less than \'limit\'. Args: limit (int): An upper bound for the search (non-inclusive). Returns: list: A list of integers representing the circular primes less than \'limit\'. Examples: >>> find_circular_primes(100) [2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97] >>> find_circular_primes(50) [2, 3, 5, 7, 11, 13, 17, 31, 37] >>> find_circular_primes(1) [] # Implement your code here... ``` Constraints: - `limit` is a positive integer indicating the upper bound (non-inclusive). - You can assume `limit` will be a reasonably large integer allowing computation within acceptable runtimes. Expected output: - The solution must return a list of integers representing the circular primes less than the given limit. Example: For `limit = 100`, the circular primes are `[2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97]`. Evaluation Criteria: Your solution will be evaluated based on: 1. Correctness: The function should return accurate lists of circular primes. 2. Efficiency: The function should handle large values of `limit` efficiently. 3. Coding Style: Use clear and descriptive variable names, and make sure the code is readable and well-documented.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def get_rotations(n): Helper function to get all rotations of digits of a number. rotations = [] s = str(n) for i in range(len(s)): rotation = s[i:] + s[:i] rotations.append(int(rotation)) return rotations def find_circular_primes(limit): Find all circular primes less than \'limit\'. Args: limit (int): An upper bound for the search (non-inclusive). Returns: list: A list of integers representing the circular primes less than \'limit\'. circular_primes = [] for num in range(2, limit): if is_prime(num): rotations = get_rotations(num) if all(is_prime(rot) for rot in rotations): circular_primes.append(num) return circular_primes"},{"question":"# Problem Statement You are required to implement a function that, given a list of integers, returns the number of unique integers in the list. Your task is to design a function that is both space and time-efficient. # Function Signature ```python def count_unique_integers(arr: list) -> int: Take in a list of integers and return the count of unique integers in the list. :param arr: A list of integers :return: An integer representing the count of unique integers in the list Raise TypeError if the input is not a list. Raise TypeError if any of the elements in the list are not integers. ``` # Input * A single parameter `arr`, which is a list of integers. # Output * Return a single integer representing the count of unique integers in the list. # Constraints * The list can contain up to `10^6` integers. * Both positive and negative integers, as well as zero, are allowed. * Duplicates may be present in the list and should be counted only once. * Type errors and invalid element types should be handled appropriately by raising `TypeError`. # Examples ```python assert count_unique_integers([1, 2, 2, 3, 4, 4, 4, 5]) == 5 assert count_unique_integers([-1, -2, -3, -1, -2, 0, 1, 2, 3]) == 7 assert count_unique_integers([1, 1, 1, 1, 1, 1, 1]) == 1 assert count_unique_integers([100, 101, 102, 103, 104]) == 5 assert count_unique_integers([]) == 0 ``` # Error Handling ```python try: count_unique_integers(\\"some string\\") except TypeError as e: assert str(e) == \\"Input must be a list of integers\\" try: count_unique_integers(12345) except TypeError as e: assert str(e) == \\"Input must be a list of integers\\" try: count_unique_integers([1, 2, 3, 4.5]) except TypeError as e: assert str(e) == \\"All elements in the list must be integers\\" try: count_unique_integers([\\"a\\", \\"b\\", \\"c\\"]) except TypeError as e: assert str(e) == \\"All elements in the list must be integers\\" ``` # Implementation Notes To achieve the desired efficiency, consider using a data structure that leverages hash functions, such as a set, to filter out duplicates and quickly count the number of unique elements. Additionally, ensure that proper type checks are in place to validate the input. This problem tests the ability to manage collections, understand hashing, and perform error handling effectively.","solution":"def count_unique_integers(arr): Returns the count of unique integers in the list `arr`. :param arr: A list of integers :return: An integer representing the count of unique integers in the list Raise TypeError if the input is not a list. Raise TypeError if any of the elements in the list are not integers. if not isinstance(arr, list): raise TypeError(\\"Input must be a list of integers\\") for item in arr: if not isinstance(item, int): raise TypeError(\\"All elements in the list must be integers\\") return len(set(arr))"},{"question":"# Coding Assessment Question Context: You have been asked to develop a simple system for managing a to-do list. The system should support basic operations such as adding tasks, marking tasks as completed, and viewing both incomplete and completed tasks. To facilitate this, you will write a set of functions to handle these operations. Task: 1. Implement a function to add a task to the to-do list. 2. Implement a function to mark a task as completed. 3. Implement a function to list all incomplete tasks. 4. Implement a function to list all completed tasks. 5. Include a main function to demonstrate the functionality of the to-do list system via user input. Requirements: 1. **Function `add_task(task_list: Dict[str, bool], task: str) -> None`** - Receive a dictionary representing the to-do list and a string representing the task to be added. - Add the task to the dictionary with a value of `False` indicating the task is incomplete. 2. **Function `complete_task(task_list: Dict[str, bool], task: str) -> None`** - Receive a dictionary representing the to-do list and a string representing the task to be marked as complete. - If the task exists in the dictionary, set its value to `True`. 3. **Function `list_incomplete_tasks(task_list: Dict[str, bool]) -> List[str]`** - Receive a dictionary representing the to-do list. - Return a list of incomplete tasks (tasks with a value of `False`). 4. **Function `list_completed_tasks(task_list: Dict[str, bool]) -> List[str]`** - Receive a dictionary representing the to-do list. - Return a list of completed tasks (tasks with a value of `True`). 5. **Function `main()`** - Present a menu to the user with options to add a task, mark a task as complete, list incomplete tasks, and list completed tasks. - Accept input from the user to perform these operations. - Continue accepting input until the user chooses to exit. Constraints: - Task descriptions are unique and non-empty strings. - The system should handle a reasonable number of tasks (e.g., n ≤ 100). Example: For an initial empty to-do list: - Calling `add_task({}, \\"Buy groceries\\")` results in `{\\"Buy groceries\\": False}`. - Calling `add_task({\\"Buy groceries\\": False}, \\"Read a book\\")` results in `{\\"Buy groceries\\": False, \\"Read a book\\": False}`. - Calling `complete_task({\\"Buy groceries\\": False, \\"Read a book\\": False}, \\"Buy groceries\\")` results in `{\\"Buy groceries\\": True, \\"Read a book\\": False}`. - Calling `list_incomplete_tasks({\\"Buy groceries\\": True, \\"Read a book\\": False})` returns `[\\"Read a book\\"]`. - Calling `list_completed_tasks({\\"Buy groceries\\": True, \\"Read a book\\": False})` returns `[\\"Buy groceries\\"]`.","solution":"from typing import Dict, List def add_task(task_list: Dict[str, bool], task: str) -> None: Adds a new task to the task_list with a status of False (incomplete). task_list[task] = False def complete_task(task_list: Dict[str, bool], task: str) -> None: Marks an existing task as complete (True). if task in task_list: task_list[task] = True def list_incomplete_tasks(task_list: Dict[str, bool]) -> List[str]: Returns a list of incomplete tasks. return [task for task, completed in task_list.items() if not completed] def list_completed_tasks(task_list: Dict[str, bool]) -> List[str]: Returns a list of completed tasks. return [task for task, completed in task_list.items() if completed] def main(): task_list = {} while True: print(\\"nTo-Do List Menu:\\") print(\\"1. Add Task\\") print(\\"2. Complete Task\\") print(\\"3. List Incomplete Tasks\\") print(\\"4. List Completed Tasks\\") print(\\"5. Exit\\") choice = input(\\"Enter your choice: \\") if choice == \'1\': task = input(\\"Enter the task description: \\") add_task(task_list, task) elif choice == \'2\': task = input(\\"Enter the task to mark as completed: \\") complete_task(task_list, task) elif choice == \'3\': incomplete_tasks = list_incomplete_tasks(task_list) print(\\"Incomplete Tasks:\\") for task in incomplete_tasks: print(f\\"- {task}\\") elif choice == \'4\': completed_tasks = list_completed_tasks(task_list) print(\\"Completed Tasks:\\") for task in completed_tasks: print(f\\"- {task}\\") elif choice == \'5\': break else: print(\\"Invalid choice. Please try again.\\") if __name__ == \\"__main__\\": main()"},{"question":"**[Question 2]:** You are responsible for creating a function that splits a long string into an array of words, but with the added complexity of stripping out specific punctuation and handling different forms of whitespace. # Task: Write a function `split_and_clean_string` that takes a single string `s` and returns a list of words. The function should remove punctuation characters (.,!?) and split the string into words, while normalizing whitespace (multiple spaces, tabs, and newlines should be treated as a single space). # Specifications: * **Input**: A single string `s` (1 ≤ |s| ≤ 10^6). * **Output**: A list of strings, where each string is a cleaned word from the input string `s`. # Requirements: * You must ensure that the function handles large strings efficiently. * Utilize string operations to minimize unnecessary use of additional memory. * The output list should only include non-empty words. # Constraints: * Do not use regular expressions (`re` module). * Ensure the function works correctly for edge cases such as strings with only punctuation or whitespace. # Example: ```python def split_and_clean_string(s: str) -> list: pass # Example Usage: # split_and_clean_string(\\"Hello, world! Welcome to coding.\\") should return [\\"Hello\\", \\"world\\", \\"Welcome\\", \\"to\\", \\"coding\\"] # split_and_clean_string(\\" This is a test! \\") should return [\\"This\\", \\"is\\", \\"a\\", \\"test\\"] ``` Notes: - You can assume the string only contains ASCII characters from `a-z`, `A-Z`, `0-9`, spaces, tabs (`t`), newlines (`n`), and the punctuation characters `.,!?`. - Pay special attention to edge cases such as empty strings or strings with only punctuation and whitespace characters.","solution":"def split_and_clean_string(s: str) -> list: Splits a long string into an array of words, stripping out specific punctuation and handling different forms of whitespace. Args: s (str): The input string. Returns: list: A list of cleaned words. # Characters to be removed punctuation = \\".,!?\\" # Remove punctuation and normalize spaces by building the result string. cleaned_string = \'\'.join(char if char not in punctuation else \' \' for char in s) # Split the cleaned_string using whitespace and return non-empty words return [word for word in cleaned_string.split() if word]"},{"question":"# Problem Statement You are tasked with writing a function for a simple text editor that performs a set of operations on a string. The text editor can perform four types of operations: 1. `APPEND <string>`: Append the given string to the end of the current text. 2. `DELETE <k>`: Delete the last `k` characters from the current text. 3. `PRINT <k>`: Print the `k`-th character of the current text (1-based indexing). 4. `UNDO`: Undo the last operation performed. The undo operation can be of any type (APPEND, DELETE). # Objective Implement a class `SimpleTextEditor` that: - Initializes the current text as an empty string. - Supports methods for each of the four operations specified above. The class should have the following methods: - `append(string: str) -> None` - `delete(k: int) -> None` - `print_char(k: int) -> str` - `undo() -> None` # Rules & Constraints 1. Operations are given one at a time, and you need to maintain the state accordingly. 2. If `UNDO` is called when there is no previous operation to undo, do nothing. 3. The text starts empty and can grow to an arbitrary length. 4. You can assume the input will be within the range of typical use cases for a text editor (e.g., editing a few thousand characters). # Methods Description 1. `append(string: str) -> None`: Append the given string to the end of the current text. 2. `delete(k: int) -> None`: Delete the last `k` characters from the current text. 3. `print_char(k: int) -> str`: Print the `k`-th character of the current text (1-based indexing). 4. `undo() -> None`: Undo the last operation performed. # Examples ```python editor = SimpleTextEditor() editor.append(\\"hello\\") assert editor.print_char(1) == \\"h\\" assert editor.print_char(5) == \\"o\\" editor.append(\\" world\\") assert editor.print_char(6) == \\" \\" editor.delete(6) assert editor.print_char(5) == \\"o\\" editor.undo() assert editor.print_char(6) == \\" \\" editor.undo() assert editor.print_char(1) == \\"h\\" editor.undo() assert editor.print_char(1) == \\"\\" assert editor.print_char(2) == \\"\\" ``` # Notes - The function should handle edge cases gracefully, such as undoing when no operations have been performed or printing a character index that does not exist. - Implement efficient operations to balance performance for all methods.","solution":"class SimpleTextEditor: def __init__(self): self.text = \\"\\" self.history = [] def append(self, string: str) -> None: self.history.append(self.text) # Save current state to history self.text += string def delete(self, k: int) -> None: self.history.append(self.text) # Save current state to history self.text = self.text[:-k] def print_char(self, k: int) -> str: if 1 <= k <= len(self.text): return self.text[k - 1] else: return \\"\\" # Return empty string if index is out of range def undo(self) -> None: if self.history: self.text = self.history.pop() # Revert to last saved state"},{"question":"# LRU Cache Implementation Context As a systems engineer, you are required to implement an efficient caching mechanism for a high-traffic web service. To maintain a balance between speed and memory usage, the Least Recently Used (LRU) cache policy is chosen. The LRU cache should support efficient retrieval and updating of data. Task Create a class `LRUCache` that simulates the LRU caching mechanism. The cache should support retrieving values associated with keys and inserting key-value pairs, with the retrieval and insertion operations being performed in constant time. **Class Definition and Function Signatures**: ```python class LRUCache: def __init__(self, capacity: int): self.capacity = capacity def get(self, key: int) -> int: pass def put(self, key: int, value: int) -> None: pass ``` Inputs - `capacity` (int): An integer representing the maximum number of items the cache can hold. - `key` (int): An integer representing the key of the item to retrieve or insert. - `value` (int): An integer representing the value to be associated with a specific key. Outputs - For the `get` method, return the value associated with the key if present, or -1 if the key does not exist in the cache. Constraints - All operations of the `LRUCache` class should run in O(1) time complexity. - Handle cases gracefully when the capacity is exhausted by discarding the least recently used items first. - Assume that all keys are unique and both `key` and `value` are non-negative integers. Examples 1. **Example 1**: ```python cache = LRUCache(2) cache.put(1, 1) # cache is {1=1} cache.put(2, 2) # cache is {1=1, 2=2} cache.get(1) # returns 1 cache.put(3, 3) # Evicts key 2, cache is {1=1, 3=3} cache.get(2) # returns -1 (not found) cache.put(4, 4) # Evicts key 1, cache is {4=4, 3=3} cache.get(1) # returns -1 (not found) cache.get(3) # returns 3 cache.get(4) # returns 4 ``` 2. **Example 2**: ```python cache = LRUCache(1) cache.put(1, 1) # cache is {1=1} cache.put(2, 2) # Evicts key 1, cache is {2=2} cache.get(1) # returns -1 (not found) cache.get(2) # returns 2 ``` Follow the guidelines to implement the `LRUCache` class that meets the outlined requirements and ensure it passes all test cases efficiently.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = OrderedDict() def get(self, key: int) -> int: if key not in self.cache: return -1 self.cache.move_to_end(key) # Mark the key as recently used return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) # Mark the key as recently used self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False) # Remove the least recently used element"},{"question":"Problem Statement You are given a string that may contain letters (both uppercase and lowercase), digits, and other characters. The task is to count how many of these characters are numeric digits. # Function Signature ```python def count_digits(input_string: str) -> int: ``` # Input - `input_string` (1 ≤ len(input_string) ≤ 1000): A string containing letters, digits, and possibly other characters. # Output - An integer representing the number of numeric digits in the input string. # Constraints - The implementation should handle strings of varying lengths and mixed content. - Ensure that the function works for edge cases such as strings with no digits and strings composed entirely of digits. # Performance Requirements - The function should effectively handle the maximum input length within a reasonable time frame. # Example ```python count_digits(input_string=\\"a1b2c3d4\\") # Expected output: 4, as the digits in the string are 1, 2, 3, and 4 count_digits(input_string=\\"hello123world\\") # Expected output: 3, as the digits in the string are 1, 2, and 3 count_digits(input_string=\\"\\") # Expected output: 0, since there are no digits in an empty string ``` Write the implementation for the function `count_digits` according to the above specifications.","solution":"def count_digits(input_string: str) -> int: Counts the number of numeric digits in the input string. Parameters: input_string (str): The string to be analyzed. Returns: int: The number of numeric digits in the input string. return sum(1 for char in input_string if char.isdigit())"},{"question":"Maximal Subarray of Non-Negative Numbers You\'re tasked with implementing a function that finds the maximal subarray of non-negative numbers from a given list. The resultant subarray should have the largest sum. If there is more than one subarray with the same maximum sum, return the one which has the largest length. If there is more than one of the same length, return the one that starts with the smallest index. Function Specification 1. **Function name**: `max_non_negative_subarray` - **Input**: `arr` (List of integers) - list of integers that can contain both non-negative and negative numbers. - **Output**: (List of integers) - the subarray with the maximum sum from the input list. - **Constraints**: - The input list can have up to `10^5` elements. - Each element in the list can be in the range `-10^9` to `10^9`. Implementation Details **max_non_negative_subarray**: - Traverse through the list to find all contiguous subarrays of non-negative numbers. - Track the subarray which has the largest sum. - In case of ties (same sum), prefer the longer subarray. - In case of further ties (same length), prefer the one which appears earlier in the list. Example *Inputs*: ```python print(max_non_negative_subarray([-1, 2, 3, -4, 5, 6, 7, -8])) # Expected output: [5, 6, 7] print(max_non_negative_subarray([1, 2, 5, -7, 2, 3])) # Expected output: [1, 2, 5] print(max_non_negative_subarray([-1, -2, -3, -4])) # Expected output: [] print(max_non_negative_subarray([1, 2, 3, 4, 5, 6])) # Expected output: [1, 2, 3, 4, 5, 6] ``` *Outputs*: ```python [5, 6, 7] [1, 2, 5] [] [1, 2, 3, 4, 5, 6] ``` Requirements - Implement and thoroughly test the function. - Handle edge cases and invalid inputs appropriately.","solution":"def max_non_negative_subarray(arr): Returns the maximal subarray of non-negative numbers. :param arr: List[int] - list of integers :return: List[int] - maximal subarray of non-negative numbers max_sum = -1 max_length = 0 max_subarray = [] current_sum = 0 current_subarray = [] for num in arr: if num >= 0: current_sum += num current_subarray.append(num) else: if (current_sum > max_sum or (current_sum == max_sum and len(current_subarray) > max_length)): max_sum = current_sum max_length = len(current_subarray) max_subarray = current_subarray[:] current_sum = 0 current_subarray = [] # Final check after loop in case the best subarray is the last segment if (current_sum > max_sum or (current_sum == max_sum and len(current_subarray) > max_length)): max_subarray = current_subarray return max_subarray"},{"question":"# Image Segmentation Using K-Means Clustering Background: Image segmentation is the process of partitioning an image into multiple segments to make it easier to analyze. One common approach is using K-means clustering to segment the image based on the colors of its pixels. Task: Implement the `segment_image_with_kmeans` function that performs image segmentation using K-means clustering. This function will segment an image, grouping pixels into `k` clusters based on their RGB color values. Function Signature: ```python def segment_image_with_kmeans(image: list[list[tuple[int, int, int]]], k: int) -> list[list[int]]: pass ``` Input: - `image`: A 2D list where each element is a tuple representing the RGB values of a pixel (e.g., `(255, 0, 0)` for red). The image is a rectangular grid of pixels. - `k`: An integer indicating the number of clusters to segment the image into. Output: - Returns a 2D list of integers where each integer represents the assigned cluster (from `0` to `k-1`) for each corresponding pixel in the input image. Constraints: - The input image will have dimensions `m x n` where `1 ≤ m, n ≤ 500`. - The RGB values for each pixel will be in the range `0-255`. - `2 ≤ k ≤ 10`. Example: Given the following image (represented as a 2D list of pixels): ``` image = [ [(255, 0, 0), (0, 255, 0), (0, 0, 255)], [(255, 255, 0), (0, 255, 255), (255, 0, 255)] ] ``` And `k = 2`. One possible output could be: ``` [ [0, 1, 0], [1, 1, 1] ] ``` Which means the pixels were segmented into two clusters. Additional Information: - Students should ensure their implementation efficiently handles images of varying sizes. - Edge cases such as a homogeneous image (all pixels having the same color) or very high values of `k` (relative to the number of unique colors) should be considered. - The K-means algorithm should iterate until convergence for optimal results. - Various initialization methods can be used for the initial cluster centroids. Good Luck!","solution":"import numpy as np from sklearn.cluster import KMeans def segment_image_with_kmeans(image, k): Segments an image using K-means clustering by grouping pixels into `k` clusters based on their RGB color values. :param image: 2D list of tuples representing the RGB values of the pixels :param k: Integer indicating the number of clusters :return: 2D list of integers representing the assigned cluster for each pixel # Flatten the 2D image array to a 2D array of pixels pixels = [pixel for row in image for pixel in row] pixel_array = np.array(pixels) # Fit K-means clustering kmeans = KMeans(n_clusters=k, random_state=42) kmeans.fit(pixel_array) # Get the cluster labels for each pixel labels = kmeans.labels_ # Reshape the labels back into the original 2D shape of the image segmented_image = [] index = 0 for row in image: segmented_image.append([labels[index + j] for j in range(len(row))]) index += len(row) return segmented_image"},{"question":"# Context You have been asked to design a basic library management system that allows adding books, borrowing books, and returning books. Each book is characterized by a unique identifier (ID), title, and author. The system should keep track of which books are currently available and which are borrowed, as well as handle multiple users. # Task You are required to implement the `Library` class that manages the collection of books and implements user interactions. The `Library` class should provide functionality to add books, borrow books based on the user, and return books. # Requirements 1. **Constructor**: `Library()` initializes the library with an empty collection. 2. **Methods**: * `add_book(self, book_id, title, author)`: Adds a book with the given ID, title, and author to the library. * `borrow_book(self, book_id, user)`: Allows a user to borrow a book by its ID. Raises an exception if the book is already borrowed. * `return_book(self, book_id, user)`: Allows a user to return a book by its ID. Raises an exception if the book is not currently borrowed by the user. * `get_available_books(self)`: Returns a list of books that are currently available. * `get_borrowed_books(self)`: Returns a dictionary with user names as keys and a list of book IDs they have borrowed as values. 3. **Constraints**: - The same user cannot borrow the same book more than once. - A book can only be returned by the user who borrowed it. - Ensure efficient retrieval and update operations. # Example ```python # Initializing the library library = Library() # Adding books library.add_book(\'001\', \'The Great Gatsby\', \'F. Scott Fitzgerald\') library.add_book(\'002\', \'1984\', \'George Orwell\') # Borrowing books library.borrow_book(\'001\', \'Alice\') assert library.get_available_books() == [(\'002\', \'1984\', \'George Orwell\')] assert library.get_borrowed_books() == {\'Alice\': [\'001\']} # Returning books library.return_book(\'001\', \'Alice\') assert library.get_available_books() == [(\'001\', \'The Great Gatsby\', \'F. Scott Fitzgerald\'), (\'002\', \'1984\', \'George Orwell\')] assert library.get_borrowed_books() == {} ``` Ensure that your implementation correctly handles all scenarios according to the given requirements and passes any provided tests.","solution":"class Library: def __init__(self): # Initialize the library with an empty collection of books self.books = {} self.borrowed_books = {} def add_book(self, book_id, title, author): # Add a book with the given ID, title, and author to the library if book_id not in self.books: self.books[book_id] = {\\"title\\": title, \\"author\\": author, \\"borrowed_by\\": None} def borrow_book(self, book_id, user): # Allows a user to borrow a book by its ID if book_id not in self.books: raise ValueError(f\\"Book ID {book_id} does not exist.\\") if self.books[book_id][\\"borrowed_by\\"] is not None: raise ValueError(f\\"Book ID {book_id} is already borrowed.\\") self.books[book_id][\\"borrowed_by\\"] = user if user not in self.borrowed_books: self.borrowed_books[user] = [] self.borrowed_books[user].append(book_id) def return_book(self, book_id, user): # Allows a user to return a book by its ID if book_id not in self.books: raise ValueError(f\\"Book ID {book_id} does not exist.\\") if self.books[book_id][\\"borrowed_by\\"] != user: raise ValueError(f\\"Book ID {book_id} was not borrowed by user {user}.\\") self.books[book_id][\\"borrowed_by\\"] = None self.borrowed_books[user].remove(book_id) if not self.borrowed_books[user]: del self.borrowed_books[user] def get_available_books(self): # Returns a list of books that are currently available available_books = [ (book_id, info[\\"title\\"], info[\\"author\\"]) for book_id, info in self.books.items() if info[\\"borrowed_by\\"] is None ] return available_books def get_borrowed_books(self): # Returns a dictionary with user names as keys and a list of book IDs they have borrowed as values return self.borrowed_books"},{"question":"# Sorting Algorithm Visualization You are tasked with creating a command-line program that visualizes the process of the Insertion Sort algorithm. Your task involves: 1. **Algorithm Implementation**: Implement the Insertion Sort algorithm. 2. **Visualization**: Provide a visualization of the sorting process by printing the array at each step of the algorithm. 3. **Custom Input**: Allow the user to input a list of integers to be sorted. Function Specification Write a function `insertion_sort_visualize` that accepts the following parameters: - `arr` (list): A list of integers to be sorted. The function should print the array at each step of the sorting process and return the sorted array. Requirements: 1. **Input and Output**: - The input consists of `arr` (list of integers). - The output is the sorted array. 2. **Constraints**: - Ensure the function sorts the array in ascending order using the Insertion Sort algorithm. - Print the array after each insertion operation to visualize the sorting process. 3. **Example**: - For input `[4, 3, 2, 1]`, the function should print: ``` Step 1: [3, 4, 2, 1] Step 2: [2, 3, 4, 1] Step 3: [1, 2, 3, 4] ``` - And then return `[1, 2, 3, 4]`. ```python def insertion_sort_visualize(arr): Sorts the given list of integers using the Insertion Sort algorithm and prints the array at each step of the process. Parameters: arr (list): List of integers to be sorted Returns: list: Sorted list of integers n = len(arr) for i in range(1, n): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are greater than key, # to one position ahead of their current position while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key print(f\\"Step {i}: {arr}\\") return arr # Example usage if __name__ == \\"__main__\\": arr = list(map(int, input(\\"Enter a list of numbers, separated by spaces: \\").split())) sorted_arr = insertion_sort_visualize(arr) print(\\"Sorted array:\\", sorted_arr) ``` Make sure to test your function with different lists of integers to ensure proper visualization of the sorting process.","solution":"def insertion_sort_visualize(arr): Sorts the given list of integers using the Insertion Sort algorithm and prints the array at each step of the process. Parameters: arr (list): List of integers to be sorted Returns: list: Sorted list of integers n = len(arr) for i in range(1, n): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key print(f\\"Step {i}: {arr}\\") return arr"},{"question":"Question # Problem: You are tasked with implementing a function that determines the most frequent character in a given string. If there is a tie, return all of the most frequent characters in alphabetical order as a single concatenated string. # Function Signature: ```python def most_frequent_characters(s: str) -> str: pass ``` # Input: - `s`: A string consisting of lowercase English letters. # Output: - A string containing the most frequent character(s) in alphabetical order. # Constraints: - `s` will have at least one character and at most 10^5 characters. # Example: ```python example_1 = \\"aabbbcccc\\" result_1 = most_frequent_characters(example_1) # Expected output: \\"c\\" example_2 = \\"abcabcabc\\" result_2 = most_frequent_characters(example_2) # Expected output: \\"abc\\" ``` # Notes: - The output should take into account ties for character frequency. In case of a tie, the result should be characters concatenated in alphabetical order. - The function should efficiently handle strings up to the maximum length constraint. # Hints: - Consider using a dictionary to count character frequencies. - An efficient way to find the maximum frequency and handle ties is key for large input sizes.","solution":"def most_frequent_characters(s: str) -> str: from collections import Counter # Count the frequency of each character frequency = Counter(s) # Find the maximum frequency max_freq = max(frequency.values()) # Collect characters with the maximum frequency most_frequent = [char for char, freq in frequency.items() if freq == max_freq] # Return the characters sorted and concatenated return \'\'.join(sorted(most_frequent))"},{"question":"# Coding Assessment Question: String Transformation into Palindrome Given a string, the task is to determine the minimum number of character deletions required to transform it into a palindrome. A palindrome is a string that reads the same forward and backward. # Input Format A single string `s` (1 ≤ `len(s)` ≤ 10^4), consisting only of lowercase English letters. # Output Format Return an integer representing the minimum number of deletions needed to make the string a palindrome. # Constraints * The input will always be a valid string. * The input string can have any combination of lowercase letters. # Example Example 1: ```python >> solution(\\"abac\\") ``` **Output:** ```python 1 ``` *Explanation:* Deleting \'b\' results in the palindrome \\"aca\\". Example 2: ```python >> solution(\\"racecar\\") ``` **Output:** ```python 0 ``` *Explanation:* The string \\"racecar\\" is already a palindrome and requires no deletions. Example 3: ```python >> solution(\\"abcdef\\") ``` **Output:** ```python 5 ``` *Explanation:* Deleting all characters except \'a\' results in the palindrome \\"a\\". # Function Signature ```python def solution(s: str) -> int: pass ``` # Explanation: For the given string: * Use dynamic programming to find the length of the longest palindromic subsequence. * Subtract the length of this subsequence from the total length of the string to get the number of deletions needed. * Return the result.","solution":"def solution(s: str) -> int: n = len(s) # Create a DP table to store results of subproblems dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table. The outer loop is for substrings of increasing length. for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # Length of the longest palindromic subsequence lps = dp[0][n - 1] # Minimum deletions required return n - lps"},{"question":"# Scenario A warehouse management system requires a feature to track the inventory levels of various items. Each item has a unique identifier, a name, and a quantity. Inventory levels should be periodically checked to ensure stock is adequate. If any item\'s quantity falls below a predefined threshold, it should be flagged for restocking. # Task Implement the class `Inventory` with the following methods: 1. `add_item(item_id: int, name: str, quantity: int) -> None`: Adds a new item to the inventory. Raises a `ValueError` if an item with the same `item_id` already exists. 2. `update_quantity(item_id: int, quantity: int) -> None`: Updates the quantity of an existing item. Raises a `ValueError` if the item does not exist. 3. `check_restock(threshold: int) -> List[str]`: Checks which items need restocking. Returns a list of item names where the quantity is less than the threshold. # Class Definition ```python class Inventory: def __init__(self): self.items = {} def add_item(self, item_id: int, name: str, quantity: int) -> None: pass def update_quantity(self, item_id: int, quantity: int) -> None: pass def check_restock(self, threshold: int) -> List[str]: pass ``` # Input * `item_id` (int): The unique identifier for an item. * `name` (str): The name of the item. * `quantity` (int): The quantity of the item. * `threshold` (int): The quantity threshold for restocking notifications. # Output * `add_item`: None * `update_quantity`: None * `check_restock`: List of item names below the threshold. # Constraints * Each item will have a unique `item_id`. * `name` will not exceed 100 characters. * `quantity` will be a non-negative integer. * `threshold` will be a non-negative integer. # Example ```python inventory = Inventory() inventory.add_item(1, \\"Widget\\", 50) inventory.add_item(2, \\"Gadget\\", 30) inventory.update_quantity(1, 20) restock_items = inventory.check_restock(25) print(restock_items) # Output: [\\"Widget\\", \\"Gadget\\"] ``` # Notes * Efficiently manage item lookup and updates using an appropriate data structure. * Ensure that error messages are informative and relevant. * Aim for clean and readable code with appropriate use of methods and class structure.","solution":"from typing import List class Inventory: def __init__(self): self.items = {} def add_item(self, item_id: int, name: str, quantity: int) -> None: if item_id in self.items: raise ValueError(f\\"Item with ID {item_id} already exists.\\") self.items[item_id] = {\'name\': name, \'quantity\': quantity} def update_quantity(self, item_id: int, quantity: int) -> None: if item_id not in self.items: raise ValueError(f\\"Item with ID {item_id} does not exist.\\") self.items[item_id][\'quantity\'] = quantity def check_restock(self, threshold: int) -> List[str]: restock_list = [] for item in self.items.values(): if item[\'quantity\'] < threshold: restock_list.append(item[\'name\']) return restock_list"},{"question":"# Problem Statement You are required to implement a function `k_largest_elements(arr: List[int], k: int) -> List[int]` that finds and returns the `k` largest elements from the input list `arr`. The result should be sorted in descending order. # Input Format * A list of integers `arr` (1 <= len(arr) <= 10^5, -10^6 <= arr[i] <= 10^6) * An integer `k` (1 <= k <= len(arr)) # Output Format * A list of integers containing the `k` largest elements from `arr`, sorted in descending order. # Constraints * All elements of the input list and the value of `k` adhere to the specified ranges. # Detailed Explanation * The function should use an efficient algorithm to find the `k` largest elements. * The output list should be sorted in descending order. * Consider using a heap data structure to optimize the solution. * Ensure edge cases such as `k` being equal to the length of the list are handled correctly. # Performance Requirements * The solution should be optimized for both time and space, with efficient handling of large inputs up to 10^5 in length. # Example ```python from typing import List import heapq def k_largest_elements(arr: List[int], k: int) -> List[int]: # Your code goes here pass # Test cases print(k_largest_elements([3, 2, 1, 5, 6, 4], 2)) # Expected output: [6, 5] print(k_largest_elements([1, 9, 8, 4, 7, 3, 2], 3)) # Expected output: [9, 8, 7] print(k_largest_elements([10, 10, 10], 1)) # Expected output: [10] ``` # Notes * Ensure the function is robust and handles various edge cases, such as lists with duplicate values. * Avoid unnecessary complexity and strive for a clear, concise implementation. * Remember to include thorough test coverage for different input scenarios.","solution":"from typing import List import heapq def k_largest_elements(arr: List[int], k: int) -> List[int]: Finds the k largest elements in the array and returns them sorted in descending order. # Using a min heap to keep track of the k largest elements min_heap = arr[:k] heapq.heapify(min_heap) for num in arr[k:]: if num > min_heap[0]: heapq.heappushpop(min_heap, num) # Converting the heap to a sorted list in descending order return sorted(min_heap, reverse=True)"},{"question":"# Sorting Students by Scores in Multidimensional Array Context: You are given a multidimensional array representing students and their scores in different subjects. Each sub-array holds a student\'s name (a string) and their scores in various subjects (integers). You aim to sort the students based on their total scores in descending order. If two students have the same total score, they should be sorted alphabetically by their names. Function Signature: ```python def sort_students_by_scores(students: list[list[str, int]]) -> list[list[str, int]]: pass ``` Input: - A list of lists, where each sub-list contains a student\'s name (a string) followed by their scores (integers). Output: - A list of lists sorted primarily by the total scores (descending) and secondarily by names (alphabetically). Constraints: - The input list can be empty. - Each student has a unique name. - Each student\'s score is a non-negative integer. - All names are non-empty strings. - The number of subjects (scores) is the same for every student. Example: ```python students = [ [\\"Alice\\", 95, 85, 90], [\\"Bob\\", 75, 85, 80], [\\"Charlie\\", 95, 85, 90], [\\"David\\", 95, 85, 91] ] print(sort_students_by_scores(students)) # Output: [[\'David\', 95, 85, 91], [\'Alice\', 95, 85, 90], [\'Charlie\', 95, 85, 90], [\'Bob\', 75, 85, 80]] ``` # Description: In the above example: - Alice\'s total score is 270 (95+85+90), Bob\'s total score is 240 (75+85+80), Charlie\'s total score is 270 (95+85+90), and David\'s total score is 271 (95+85+91). - Thus, the sorted order by total scores descending is David, Alice, Charlie, and Bob. Alice and Charlie have the same score, so they are sorted alphabetically by their names. # Requirements: - Implement the function `sort_students_by_scores` to handle the sorting as described. - Use built-in sorting functions appropriately to ensure the function is efficient and readable. - Edge cases such as an empty list should return an empty list. # Note: - Ensure your code does not include any print statements. - Handle the sorting mechanism within the function efficiently.","solution":"def sort_students_by_scores(students): Sorts students based on their total scores in descending order. In case of a tie, students are sorted alphabetically by their names. if not students: return [] # Calculate total scores and sort sorted_students = sorted( students, key=lambda student: (-sum(student[1:]), student[0]) ) return sorted_students"},{"question":"# Context: In many technical systems, it is often required to find unique combinations or permutations of particular elements to satisfy specific conditions. In this challenge, you will create a program to generate the smallest lexicographical permutation of a given integer (as a string) using all its digits exactly once. # Task: Write a function `find_smallest_permutation` that takes a string representation of a non-negative integer and returns the smallest lexicographical permutation of its digits. # Function Signature: ```python def find_smallest_permutation(num: str) -> str: pass ``` # Input: * `num` (str): A string representation of a non-negative integer. # Output: * Returns the smallest lexicographical permutation of the given integer\'s digits as a string. # Example: ```python assert find_smallest_permutation(\\"943\\") == \\"349\\" assert find_smallest_permutation(\\"120\\") == \\"012\\" ``` # Constraints: * The input string `num` will only contain digits (\'0\'-\'9\') and will always be a valid non-negative integer representation. * The length of `num` will be between 1 and 100, inclusive. * Leading zeros in the output are allowed since it must be the smallest lexicographical permutation. # Notes: * You can assume that the input does not contain any non-digit characters. * You do not need to handle invalid inputs, as all provided inputs will be valid according to the constraints. # Guidelines: * Focus on optimizing the function for readability and performance given the constraints. * Consider standard library utilities that can help to efficiently derive permutations and sort them. ```python def find_smallest_permutation(num: str) -> str: Returns the smallest lexicographical permutation of num. return \'\'.join(sorted(num)) ```","solution":"def find_smallest_permutation(num: str) -> str: Returns the smallest lexicographical permutation of num. return \'\'.join(sorted(num))"},{"question":"# Problem Statement You are working on a project that involves organizing a collection of books in a library. Each book has a unique ISBN number, a title, an author\'s name, and a publication year. Your task is to implement a system that can manage these books and perform specific operations to maintain and retrieve information about the library\'s collection. You need to implement three functions: `add_book`, `remove_book`, and `find_books_by_author`. # Input and Output Format Function 1: `add_book(library: dict, isbn: str, title: str, author: str, year: int) -> None` * **Input**: * `library` (dict): The library\'s collection represented as a dictionary where the ISBN is the key, and the value is a dictionary with keys `title`, `author`, and `year`. * `isbn` (str): The unique ISBN number of the book. * `title` (str): The title of the book. * `author` (str): The author of the book. * `year` (int): The publication year of the book. * **Output**: * Adds the book to the library\'s collection. Raises a `ValueError` with a meaningful message if a book with the same ISBN already exists. Function 2: `remove_book(library: dict, isbn: str) -> None` * **Input**: * `library` (dict): The library\'s collection represented as a dictionary where the ISBN is the key, and the value is a dictionary with keys `title`, `author`, and `year`. * `isbn` (str): The unique ISBN number of the book to remove. * **Output**: * Removes the book from the library\'s collection. Raises a `ValueError` with a meaningful message if no book with the specified ISBN exists. Function 3: `find_books_by_author(library: dict, author: str) -> list` * **Input**: * `library` (dict): The library\'s collection represented as a dictionary where the ISBN is the key, and the value is a dictionary with keys `title`, `author`, and `year`. * `author` (str): The author whose books are to be found. * **Output**: * Returns a list of tuples, where each tuple contains the ISBN, title, and year of books written by the specified author. The list should be sorted alphabetically by title. Returns an empty list if no books by the specified author are found. # Requirements 1. Ensure that each function correctly handles the addition, removal, and querying of books. 2. Implement error checking to handle cases where operations cannot be performed (e.g., adding a book with an existing ISBN, removing a non-existent book, finding books by an author with no books in the collection). 3. Follow the specified input and output formats precisely. # Example ```python library = {} add_book(library, \\"978-3-16-148410-0\\", \\"Book One\\", \\"Author A\\", 2001) add_book(library, \\"978-0-12-345678-9\\", \\"Book Two\\", \\"Author B\\", 2002) add_book(library, \\"978-1-23-456789-0\\", \\"Another Book\\", \\"Author A\\", 2005) # Example of adding a book try: add_book(library, \\"978-0-12-345678-9\\", \\"Duplicate Book\\", \\"Author C\\", 2020) except ValueError as e: print(e) # Expected output: Book with this ISBN already exists. # Example of removing a book remove_book(library, \\"978-0-12-345678-9\\") # Try to remove a book that does not exist try: remove_book(library, \\"978-0-12-345678-9\\") except ValueError as e: print(e) # Expected output: No book found with the specified ISBN. # Example of finding books by author books_by_author_a = find_books_by_author(library, \\"Author A\\") print(books_by_author_a) # Expected output: [(\'978-1-23-456789-0\', \'Another Book\', 2005), (\'978-3-16-148410-0\', \'Book One\', 2001)] # Example of finding books by author with no books in collection books_by_unknown = find_books_by_author(library, \\"Author Unknown\\") print(books_by_unknown) # Expected output: [] ``` # Constraints * ISBNs, titles, and author names are non-empty strings. * Years are positive integers. * The library dictionary is initially empty. * The library dictionary keys (ISBNs) are unique. You are expected to implement these functions in Python, ensuring correctness and efficiency.","solution":"def add_book(library: dict, isbn: str, title: str, author: str, year: int) -> None: Adds a book to the library\'s collection. Args: library (dict): Collection of books where ISBN is the key. isbn (str): Unique ISBN number of the book. title (str): Title of the book. author (str): Author of the book. year (int): Publication year of the book. Raises: ValueError: If a book with the same ISBN already exists. if isbn in library: raise ValueError(\\"Book with this ISBN already exists.\\") library[isbn] = {\\"title\\": title, \\"author\\": author, \\"year\\": year} def remove_book(library: dict, isbn: str) -> None: Removes a book from the library\'s collection. Args: library (dict): Collection of books where ISBN is the key. isbn (str): Unique ISBN number of the book to remove. Raises: ValueError: If no book with the specified ISBN exists. if isbn not in library: raise ValueError(\\"No book found with the specified ISBN.\\") del library[isbn] def find_books_by_author(library: dict, author: str) -> list: Finds books by a specific author. Args: library (dict): Collection of books where ISBN is the key. author (str): Author whose books are to be found. Returns: list: List of tuples with ISBN, title, and year of books written by the specified author, sorted alphabetically by title. books_by_author = [(isbn, details[\\"title\\"], details[\\"year\\"]) for isbn, details in library.items() if details[\\"author\\"] == author] return sorted(books_by_author, key=lambda x: x[1])"},{"question":"# Coding Challenge: Finding Missing Element in Integer Sequence Context You are tasked with implementing an algorithm to find a missing element in a list that is supposed to contain all integers from 1 to n in a shuffled order. One number is missing, and your job is to identify it. Problem Statement Write a Python function `find_missing_number(nums: List[int]) -> int` that returns the missing number in the sequence by exploiting the properties of arithmetic sequences. Function Signature ```python def find_missing_number(nums: List[int]) -> int: pass ``` Parameters * `nums`: A list of integers containing all values from 1 to n except one, shuffled in a random order. Returns * Integer value representing the missing number in the sequence. Constraints 1. The list `nums` will not contain duplicates. 2. The length of `nums` will always be `n - 1` where `1 <= n <= 10^6`. 3. The function should run in O(n) time complexity and O(1) space complexity. Examples ```python # Example 1 result = find_missing_number([3, 7, 1, 2, 8, 4, 5, 6]) assert result == 9 # Example 2 result = find_missing_number([1, 2, 4]) assert result == 3 # Example 3 result = find_missing_number([5, 3, 2, 6, 1]) assert result == 4 # Example 4 result = find_missing_number([2, 1]) assert result == 3 # Example 5 result = find_missing_number([1]) assert result == 2 ``` Approach The sum of the first `n` natural numbers is given by the formula `n * (n + 1) / 2`. By comparing this expected sum with the actual sum of the provided list, you can identify the missing number.","solution":"from typing import List def find_missing_number(nums: List[int]) -> int: n = len(nums) + 1 total = n * (n + 1) // 2 sum_nums = sum(nums) return total - sum_nums"},{"question":"# Coding Assessment Question: You are given a list of non-negative integers and a target sum. Your task is to implement a function called `find_subset_sum` that determines if there is a subset of the given list such that the subset\'s sum is equal to the target sum. Your solution should use a recursive approach with memoization to optimize performance. Function Signature ```python def find_subset_sum(nums: List[int], target: int) -> bool: ``` Input - `nums` - A list of non-negative integers. - `target` - A non-negative integer representing the target sum. Output - Return `True` if there exists a subset within `nums` that sums to `target`, otherwise return `False`. Constraints 1. The list `nums` will have at most 20 elements. 2. All elements in `nums` and the `target` will be non-negative integers. 3. The target value can range from 0 to 1000. Explanation Consider the list `nums = [1, 2, 3]` and `target = 5`. There exists a subset `[2, 3]` whose sum is equal to `5`. Hence, the function should return `True`. Performance Ensure your solution employs recursive memoization to improve efficiency and handles the edge cases appropriately. Example ```python >>> find_subset_sum([1, 2, 3], 4) True >>> find_subset_sum([1, 2, 3], 5) True >>> find_subset_sum([1, 2, 3], 7) False >>> find_subset_sum([1, 2, 3, 4, 5], 10) True >>> find_subset_sum([1, 2, 3, 4, 5], 11) True >>> find_subset_sum([2, 4, 8], 5) False ``` Edge Cases to Consider * Handling an empty list. * Whether the target sum is zero. * No valid subset exists leading to the target sum.","solution":"from typing import List, Tuple, Dict def find_subset_sum(nums: List[int], target: int) -> bool: memo: Dict[Tuple[int, int], bool] = {} def dfs(index: int, current_sum: int) -> bool: if current_sum == target: return True if current_sum > target or index == len(nums): return False if (index, current_sum) in memo: return memo[(index, current_sum)] # Include the current number include = dfs(index + 1, current_sum + nums[index]) # Exclude the current number exclude = dfs(index + 1, current_sum) memo[(index, current_sum)] = include or exclude return memo[(index, current_sum)] return dfs(0, 0)"},{"question":"Problem Statement You are given a string that represents a mathematical expression where the only operations allowed are addition and multiplication. Implement a function to evaluate the expression and return the result as an integer. Ensure that the operations respect the standard order of operations (multiplication before addition). # Function Signature ```python def evaluate_expression(expression: str) -> int: ``` # Input - **expression** (str): A string representing a mathematical expression, consisting of non-negative integers, \'+\', \'*\', and no spaces. The length of the string will not exceed 1000 characters. # Output - **int**: The result of evaluating the given expression, respecting the standard order of operations. # Example ```python result = evaluate_expression(\\"3+5*2+8\\") # Expect: 19 # Explanation: 3 + (5 * 2) + 8 = 3 + 10 + 8 = 21 result = evaluate_expression(\\"10*2+3*4\\") # Expect: 28 # Explanation: (10 * 2) + (3 * 4) = 20 + 12 = 32 result = evaluate_expression(\\"2+3*4+5\\") # Expect: 19 # Explanation: 2 + (3 * 4) + 5 = 2 + 12 + 5 = 19 ``` # Constraints - The expression contains only non-negative integers, \'+\', and \'*\'. - The expression is always valid and does not result in an undefined or division by zero situation. # Hint Use two stacks or a single stack with a current value and current operation indicator to handle the problem.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression string with \'+\' and \'*\' operators, respecting the standard order of operations (multiplication before addition). def apply_operation(ops, nums): if ops[-1] == \'+\': nums[-2] += nums[-1] elif ops[-1] == \'*\': nums[-2] *= nums[-1] nums.pop() ops.pop() nums = [] ops = [] i = 0 n = len(expression) while i < n: if expression[i].isdigit(): num = 0 while i < n and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 nums.append(num) i -= 1 elif expression[i] in \'+*\': while ops and ops[-1] == \'*\': apply_operation(ops, nums) ops.append(expression[i]) i += 1 while ops: apply_operation(ops, nums) return nums[0]"},{"question":"# Scenario You are developing a utility for a library that manages a large collection of books. One of the features needed is to recommend books to a user based on their reading history. You need to write a function that identifies authors whose books the user has not read yet, based on an existing list of books the user has already read. # Coding Task Implement the function `recommend_authors` as described below. The function should return a list of authors whose books are available but have not yet been read by the user. Function Signature ```python def recommend_authors(user_read_books: List[str], available_books: Dict[str, List[str]]) -> List[str]: ``` Input Parameters * `user_read_books` (List[str]): A list of book titles that the user has already read. * `available_books` (Dict[str, List[str]]): A dictionary where the keys are author names and the values are lists of book titles by that author. Output * Returns a list of authors whose books the user has not read. The list should be sorted in alphabetical order. # Constraints * If all books by an author have already been read by the user, that author should not appear in the output list. * Both input lists may contain up to 1000 items. * Each book title in the user-read list and available-books dictionary is unique. # Example Usage ```python >>> user_read_books = [\\"Book1\\", \\"Book2\\", \\"Book3\\"] >>> available_books = { \\"AuthorA\\": [\\"Book1\\", \\"Book4\\"], \\"AuthorB\\": [\\"Book2\\", \\"Book5\\"], \\"AuthorC\\": [\\"Book6\\", \\"Book7\\"] } >>> recommend_authors(user_read_books, available_books) [\'AuthorA\', \'AuthorB\', \'AuthorC\'] >>> user_read_books = [\\"Book1\\", \\"Book2\\", \\"Book3\\", \\"Book6\\", \\"Book7\\"] >>> available_books = { \\"AuthorA\\": [\\"Book1\\", \\"Book4\\"], \\"AuthorB\\": [\\"Book2\\", \\"Book5\\"], \\"AuthorC\\": [\\"Book6\\", \\"Book7\\"] } >>> recommend_authors(user_read_books, available_books) [\'AuthorA\', \'AuthorB\'] >>> user_read_books = [\\"Book1\\"] >>> available_books = { \\"AuthorA\\": [\\"Book1\\"], \\"AuthorB\\": [\\"Book2\\", \\"Book3\\"], \\"AuthorC\\": [\\"Book4\\", \\"Book5\\"] } >>> recommend_authors(user_read_books, available_books) [\'AuthorB\', \'AuthorC\'] ``` # Performance Requirements * The function should run in O(n * m) time complexity, where n is the number of authors and m is the average number of books per author. * Ensure proper handling of edge cases, such as empty input lists or non-overlapping sets of books.","solution":"from typing import List, Dict def recommend_authors(user_read_books: List[str], available_books: Dict[str, List[str]]) -> List[str]: user_read_set = set(user_read_books) recommendable_authors = [] for author, books in available_books.items(): if any(book not in user_read_set for book in books): recommendable_authors.append(author) return sorted(recommendable_authors)"},{"question":"# Array Element Rotation In this task, you are required to rotate elements of an array. The concept of rotating an array means that elements at the end of the array will appear at the beginning, shifting all other elements to the right. You need to implement a function that rotates the array `k` positions to the right. Task Write a Python function `rotate_array(arr: list, k: int) -> list` that rotates the elements of the input list `arr` `k` positions to the right and returns the resulting list. # Input - An array `arr` of integers. - An integer `k` representing the number of positions to rotate the array. # Output - A new list representing the array rotated `k` positions to the right. # Requirements and Constraints 1. **Constraints**: - The input array `arr` has a length of `n` where `0 ≤ n ≤ 10^6`. - The number of rotations `k` is such that `0 ≤ k ≤ 10^6`. 2. **Edge Cases**: - If `k` is 0 or equal to the length of the array, the output should be the same as the input array. - If the array is empty, the output should also be an empty array. # Example: Suppose the input array is: ```python arr = [1, 2, 3, 4, 5] k = 2 ``` Your function should return: ```python [4, 5, 1, 2, 3] ``` Another example: Suppose the input array is: ```python arr = [10, 20, 30, 40, 50, 60] k = 3 ``` Your function should return: ```python [40, 50, 60, 10, 20, 30] ``` # Note: To achieve this, consider the properties of array slicing and modular arithmetic to handle cases where `k` is larger than the length of the array. Implement the function `rotate_array` that meets the above description and requirements.","solution":"def rotate_array(arr: list, k: int) -> list: Rotates the elements of the input list `arr` `k` positions to the right. n = len(arr) if n == 0: return arr k %= n # In case k is greater than the length of the array return arr[-k:] + arr[:-k]"},{"question":"# Problem Statement You are tasked with implementing a function to determine the top k most frequent words from a list of words. This function should be efficient in terms of time complexity, especially for large datasets. # Objectives 1. Given a list of words, determine the k most frequently occurring words. 2. If multiple words have the same frequency, sort the words lexicographically. 3. Ensure the function handles large inputs efficiently. # Function Signature ```python from typing import List def top_k_frequent_words(words: List[str], k: int) -> List[str]: pass ``` # Input * `words` (List[str]): A list of words where each word is a non-empty string consisting of lowercase English letters. The length of the list can be up to (10^5) words. * `k` (int): The number of top frequent words to return. It is guaranteed that 1 ≤ k ≤ number of unique words. # Output * Returns a list containing the top k most frequent words, sorted by their frequency in descending order. If multiple words have the same frequency, they should be sorted in lexicographical order. # Constraints * The input list contains only lowercase English letters without any punctuation or special characters. * Handle cases with ties in frequency by lexicographical sorting. # Example ```python >>> top_k_frequent_words([\\"i\\", \\"love\\", \\"leetcode\\", \\"i\\", \\"love\\", \\"coding\\"], 2) [\'i\', \'love\'] >>> top_k_frequent_words([\\"the\\", \\"day\\", \\"is\\", \\"sunny\\", \\"the\\", \\"the\\", \\"the\\", \\"is\\", \\"is\\"], 4) [\'the\', \'is\', \'day\', \'sunny\'] >>> top_k_frequent_words([\\"a\\", \\"aa\\", \\"aaa\\"], 1) [\'a\'] ``` # Notes * Consider using a heap or dictionary to keep track of word frequencies efficiently. * Explain your approach and any design decisions within your code comments.","solution":"from typing import List from collections import Counter import heapq def top_k_frequent_words(words: List[str], k: int) -> List[str]: Given a list of words, returns the k most frequently occurring words. If multiple words have the same frequency, sorts the words lexicographically. Args: words (List[str]): A list of words. k (int): The number of top frequent words to return. Returns: List[str]: A list of the top k frequent words, sorted by frequency and lexicographically. # Get the frequency count of each word using Counter word_count = Counter(words) # Debug print statement to show word_count # print(f\\"Word Count: {word_count}\\") # Min-Heap to keep track of k most frequent words # Using (-freq, word) to keep the heap based on most frequent words # Tie-breaking automatically handled by lexicographical order of word heap = [] for word, freq in word_count.items(): # Push negative frequency to simulate max-heap using min-heap heapq.heappush(heap, (-freq, word)) # Extracting the top k elements from the heap top_k_words = [] for _ in range(k): top_k_words.append(heapq.heappop(heap)[1]) return top_k_words"},{"question":"# Coding Assessment Question Problem: You are provided with a library that calculates the number of ways to make change for a given amount using a specified set of coin denominations. You need to implement a function to determine the minimum number of coins required to make a specified amount using this set of denominations. Function Signature: ```python def min_coins_to_make_change(amount: int, denominations: List[int]) -> int: Calculate the minimum number of coins required to make the given amount. Input Parameters: ----------------- amount: An integer representing the total amount of money. denominations: A list of integers representing the coin denominations available. Returns: -------- An integer representing the minimum number of coins required to make the amount. If the amount cannot be made up with the given denominations, return -1. pass ``` Input: - `amount` is a non-negative integer representing the total amount to be made. - `denominations` is a list of positive integers representing the available coin denominations. Output: - Return an integer representing the minimum number of coins required to make the given amount. If it\'s not possible to make the amount with the given denominations, return -1. Constraints: * You must utilize the provided library functions for this implementation. * The `denominations` list will always contain at least one element and all elements will be unique. * The `amount` will be between 0 and 10,000 inclusive. Examples: ```python min_coins_to_make_change(11, [1, 2, 5]) # Output: 3 (using two 5-coin and one 1-coin) min_coins_to_make_change(0, [1, 2, 5]) # Output: 0 (no coins are needed to make amount 0) min_coins_to_make_change(7, [2, 6]) # Output: -1 (not possible to make 7 with denominations of 2 and 6) ``` You should manage potential exceptions that may arise due to invalid inputs or unexpected library function behavior, ensuring robustness in your solution.","solution":"from typing import List def min_coins_to_make_change(amount: int, denominations: List[int]) -> int: Calculate the minimum number of coins required to make the given amount. Input Parameters: ----------------- amount: An integer representing the total amount of money. denominations: A list of integers representing the coin denominations available. Returns: -------- An integer representing the minimum number of coins required to make the amount. If the amount cannot be made up with the given denominations, return -1. # Base case: if amount is 0, no coins are needed. if amount == 0: return 0 # Initialize an array to store the minimum number of coins for each amount up to the target amount. # Setting an initial large value for comparison. max_val = float(\'inf\') min_coins = [max_val] * (amount + 1) min_coins[0] = 0 # 0 coins are needed to make amount 0. for i in range(1, amount + 1): for coin in denominations: if i >= coin: min_coins[i] = min(min_coins[i], min_coins[i - coin] + 1) return min_coins[amount] if min_coins[amount] != max_val else -1"},{"question":"**Advanced Temperature Conversion System** You are required to enhance an existing temperature conversion utility. This utility currently supports converting values between Celsius, Fahrenheit, and Kelvin among others. Function Signature ```python def temperature_conversion(value: float, from_unit: str, to_unit: str) -> float: pass ``` # Instructions 1. **Functionality**: You are provided with a function `temperature_conversion` that, given a `value`, a `from_unit`, and a `to_unit`, converts the `value` from the unit `from_unit` to the unit `to_unit`. 2. **Extending the Functionality**: Extend this functionality to: - Consider additional units (add a few unique ones like \'Rankine\', and \'Delisle\'). - Be case-insensitive and should handle plural forms where applicable. - Include detailed error messaging for unrecognized units. 3. **New Units**: Add the following new units: - `Rankine` (°R) - conversion relations: - (°R = K times frac{9}{5}) - `Delisle` (°D) - conversion relations: - (°D = (100 - °C) times frac{3}{2}) - (°D = (212 - °F) times frac{5}{6}) # Expected Input and Output * **Input**: - `value`: a float representing the temperature in the `from_unit`. - `from_unit`: a string representing the unit of the input value (e.g., \'Celsius\', \'Fahrenheit\'). - `to_unit`: a string representing the unit to which the temperature should be converted (e.g., \'Kelvin\', \'Rankine\'). * **Output**: - A float representing the converted temperature in the `to_unit`. # Constraints 1. The provided units must be valid and recognizable. 2. The conversion should handle case-insensitive comparisons and singular/plural forms properly. 3. An invalid unit should raise a `ValueError` with a clear message specifying the error. # Example ```python >>> temperature_conversion(100, \\"Celsius\\", \\"Fahrenheit\\") 212.0 >>> temperature_conversion(273.15, \\"Kelvin\\", \\"Rankine\\") 491.67 >>> temperature_conversion(212, \\"Fahrenheit\\", \\"Delisle\\") 0.0 ``` # Note Ensure the function handles all valid conversion cases accurately and raises informative errors for invalid cases.","solution":"def temperature_conversion(value: float, from_unit: str, to_unit: str) -> float: # Common unit names and their abbreviations/singular/plural forms unit_map = { \'celsius\': [\'c\', \'celsius\', \'celsiuses\'], \'fahrenheit\': [\'f\', \'fahrenheit\', \'fahrenheits\'], \'kelvin\': [\'k\', \'kelvin\', \'kelvins\'], \'rankine\': [\'r\', \'rankine\', \'rankines\'], \'delisle\': [\'d\', \'delisle\', \'delisles\'] } # Normalize unit names from_unit = from_unit.lower() to_unit = to_unit.lower() def normalize_unit(unit): for standard_name, variations in unit_map.items(): if unit in variations: return standard_name raise ValueError(f\\"Unrecognized unit: {unit}\\") # Convert input units to standard form from_unit = normalize_unit(from_unit) to_unit = normalize_unit(to_unit) # Define conversion functions def celsius_to_fahrenheit(c): return c * 9 / 5 + 32 def fahrenheit_to_celsius(f): return (f - 32) * 5 / 9 def celsius_to_kelvin(c): return c + 273.15 def kelvin_to_celsius(k): return k - 273.15 def kelvin_to_rankine(k): return k * 9 / 5 def rankine_to_kelvin(r): return r * 5 / 9 def celsius_to_delisle(c): return (100 - c) * 3 / 2 def delisle_to_celsius(d): return 100 - d * 2 / 3 def fahrenheit_to_delisle(f): return (212 - f) * 5 / 6 def delisle_to_fahrenheit(d): return 212 - d * 6 / 5 # Dictionary to store conversion chain conversions = { \'celsius\': { \'fahrenheit\': celsius_to_fahrenheit, \'kelvin\': celsius_to_kelvin, \'delisle\': celsius_to_delisle }, \'fahrenheit\': { \'celsius\': fahrenheit_to_celsius, \'delisle\': fahrenheit_to_delisle }, \'kelvin\': { \'celsius\': kelvin_to_celsius, \'rankine\': kelvin_to_rankine }, \'rankine\': { \'kelvin\': rankine_to_kelvin }, \'delisle\': { \'celsius\': delisle_to_celsius, \'fahrenheit\': delisle_to_fahrenheit } } # Direct conversion if in dictionary if from_unit in conversions and to_unit in conversions[from_unit]: return conversions[from_unit][to_unit](value) # Convert via intermediate units if from_unit == \'kelvin\' and to_unit == \'fahrenheit\': return celsius_to_fahrenheit(kelvin_to_celsius(value)) if from_unit == \'fahrenheit\' and to_unit == \'kelvin\': return celsius_to_kelvin(fahrenheit_to_celsius(value)) if from_unit == \'rankine\' and to_unit == \'celsius\': return kelvin_to_celsius(rankine_to_kelvin(value)) if from_unit == \'celsius\' and to_unit == \'rankine\': return kelvin_to_rankine(celsius_to_kelvin(value)) raise ValueError(f\\"Conversion from {from_unit} to {to_unit} is not supported.\\")"},{"question":"# Sum of Primes in a Range Context In many applications, it\'s crucial to identify and work with prime numbers efficiently. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. For instance, the primes between 1 and 10 are 2, 3, 5, and 7. Given this context, you are required to calculate the sum of all prime numbers in a given range from `a` to `b` inclusive, where `1 ≤ a ≤ b ≤ 1000`. Task Write a function `sum_of_primes(a: int, b: int) -> int` that returns the sum of all prime numbers within the specified range `[a, b]`. Example ``` Input: a = 10, b = 20 Output: 60 Explanation: The prime numbers between 10 and 20 are 11, 13, 17, and 19. Their sum is 11 + 13 + 17 + 19 = 60. Input: a = 1, b = 5 Output: 10 Explanation: The prime numbers between 1 and 5 are 2, 3, and 5. Their sum is 2 + 3 + 5 = 10. ``` # Constraints - Input `a` and `b` are integers such that 1 ≤ a ≤ b ≤ 1000. - The function should efficiently determine the prime status of numbers within the range.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def sum_of_primes(a, b): Returns the sum of all prime numbers in the range [a, b]. return sum(x for x in range(a, b + 1) if is_prime(x))"},{"question":"# Problem Scenario/Context You are assigned to develop a system that helps in the management of a digital library. This library contains both books and articles, and each item has unique attributes to store. You are tasked with creating a function that categorizes items based on specified attributes and returns an organized structure. # Task You are to write a function `organize_library` that takes in a list of dictionary items and returns a dictionary where each key is an attribute given as a parameter, and each value is a list of items that share the same attribute value. Function Signature ```python def organize_library(items: list, attribute: str) -> dict: pass ``` Input * `items` (list): a list of dictionaries, where each dictionary represents an item in the library with at least the key corresponding to the provided attribute. * `attribute` (str): the attribute by which to categorize the library items. Output * `dict`: a dictionary where keys are unique values of the given attribute, and values are lists of items (dictionaries) that have that attribute value. # Constraints * Each item dictionary will contain at least the specified attribute and it will have a non-empty value. * The list of items may contain up to 1000 items. * The attribute values will be of type string or integer. # Example ```python >>> library_items = [ {\\"title\\": \\"Book A\\", \\"category\\": \\"Fiction\\", \\"author\\": \\"Author 1\\"}, {\\"title\\": \\"Book B\\", \\"category\\": \\"Non-Fiction\\", \\"author\\": \\"Author 2\\"}, {\\"title\\": \\"Article C\\", \\"category\\": \\"Science\\", \\"author\\": \\"Author 3\\"}, {\\"title\\": \\"Book D\\", \\"category\\": \\"Fiction\\", \\"author\\": \\"Author 1\\"}, {\\"title\\": \\"Article E\\", \\"category\\": \\"Science\\", \\"author\\": \\"Author 4\\"} ] >>> organize_library(library_items, \\"category\\") { \\"Fiction\\": [ {\\"title\\": \\"Book A\\", \\"category\\": \\"Fiction\\", \\"author\\": \\"Author 1\\"}, {\\"title\\": \\"Book D\\", \\"category\\": \\"Fiction\\", \\"author\\": \\"Author 1\\"} ], \\"Non-Fiction\\": [ {\\"title\\": \\"Book B\\", \\"category\\": \\"Non-Fiction\\", \\"author\\": \\"Author 2\\"} ], \\"Science\\": [ {\\"title\\": \\"Article C\\", \\"category\\": \\"Science\\", \\"author\\": \\"Author 3\\"}, {\\"title\\": \\"Article E\\", \\"category\\": \\"Science\\", \\"author\\": \\"Author 4\\"} ] } ``` # Requirements * Your function should handle cases where no items match the specified attribute value. * Ensure the function runs efficiently, even with the upper limit of items.","solution":"def organize_library(items, attribute): Organizes library items based on a specified attribute. Args: items (list): A list of dictionaries, where each dictionary represents an item in the library. attribute (str): The attribute by which to categorize the library items. Returns: dict: A dictionary where keys are unique values of the given attribute, and values are lists of items that have that attribute value. organized = {} for item in items: key = item.get(attribute) if key not in organized: organized[key] = [] organized[key].append(item) return organized"},{"question":"# Binary Search in a Sorted Array Binary search is a classical algorithm used to efficiently find elements within a sorted array. The algorithm divides the search interval in half repeatedly, comparing the target with the middle element of the array, and narrowing down the search space accordingly. Your task is to implement a binary search function that finds the index of a target element in a sorted array. If the target element does not exist in the array, the function should return `-1`. Function Signature ```python def binary_search(arr: List[int], target: int) -> int: pass ``` Input - **arr**: A sorted list of integers where the size can be between 1 and 1000. - **target**: An integer that needs to be found in the array. Output - An integer representing the index of the target in the array if found, otherwise `-1`. Constraints - The array will be sorted in non-decreasing order. - You must aim to keep the time complexity at O(log n). # Sample Input ```python arr = [1, 2, 4, 5, 6, 8, 9] target = 5 ``` # Sample Output ```python 3 ``` # Explanation - In the sample input, the integer `5` is found at index `3` in the array. # Additional Information - If there are multiple occurrences of the target element, the function should return the index of any one of the occurrences. - Handling edge cases such as an empty array or a single-element array should be considered. Here\'s a non-detailed example of the binary search function: ```python def binary_search(arr, target): left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1 ``` This should get you started on implementing your own version with appropriate modifications.","solution":"from typing import List def binary_search(arr: List[int], target: int) -> int: left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"# Question: Implement a Depth-First Search (DFS) to Detect Cycles in an Undirected Graph You are given an undirected graph represented as an adjacency list. Your task is to implement an algorithm using Depth-First Search (DFS) to detect if there is a cycle in the graph. The graph is represented as follows: - An integer **V**, representing the number of vertices in the graph. - A list of edges **edges** where each edge is represented as a tuple **(u, v)** indicating there is an edge between the vertices **u** and **v**. # Input * An integer **V** (1 <= V <= 1000) -- the number of vertices. * A list of tuples **edges** where each tuple **(u, v)** (0 <= u, v < V) represents an edge between vertex **u** and vertex **v**. # Output * A boolean value **True** if there is a cycle in the graph, otherwise **False**. # Constraints * The graph is undirected. * The graph may be disconnected. * Edges are listed exactly once (no duplicate edges). # Example ```python Input: V = 5 edges = [(0, 1), (1, 2), (2, 0), (1, 3), (3, 4)] Output: True Input: V = 4 edges = [(0, 1), (1, 2), (2, 3)] Output: False ``` # Note - Make sure to handle edge cases such as graphs with no edges and graphs where all vertices form a single cycle. Implement the function `detect_cycle_dfs(V, edges)` to solve the problem. Here’s a template to get you started: ```python def detect_cycle_dfs(V, edges): from collections import defaultdict def dfs(v, visited, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, visited, v): return True elif neighbor != parent: return True return False # Build the graph as an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * V for vertex in range(V): if not visited[vertex]: if dfs(vertex, visited, -1): return True return False ```","solution":"def detect_cycle_dfs(V, edges): from collections import defaultdict def dfs(v, visited, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, visited, v): return True elif neighbor != parent: return True return False # Build the graph as an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * V for vertex in range(V): if not visited[vertex]: if dfs(vertex, visited, -1): return True return False"},{"question":"# Question: Unique Element Finder You need to implement a function that finds the unique element in a list of integers where every element except one appears exactly twice. The function should return the integer that only appears once. Assume that the input list will always contain at least one element and that there is exactly one integer that appears only once. Function Definition ```python def find_unique_element(lst: [int]) -> int: Finds and returns the unique element in a list where every other element appears twice. Arguments: lst -- a list of integers where exactly one element appears once and all others appear twice Returns: The unique integer that appears only once in the list. ``` Input Format - A list of integers, `lst`, where every integer except one appears twice. Output Format - A single integer representing the unique element in the list. Constraints - (1 leq text{len}(lst) leq 10^5) - The list contains only integers. - There is exactly one unique element that appears only once. # Example Input/Output ```python find_unique_element([4, 1, 2, 1, 2]) # Output: 4 find_unique_element([2, 2, 1]) # Output: 1 find_unique_element([1, 2, 3, 4, 1, 2, 3]) # Output: 4 find_unique_element([0, 0, 1, 2, 2]) # Output: 1 find_unique_element([11, 22, 22, 33, 33]) # Output: 11 ``` Additional Notes - You should aim for a linear time complexity solution. - Consider using bitwise XOR operation which is optimal for this problem. - Ensure the function handles both small and large lists efficiently.","solution":"def find_unique_element(lst): Finds and returns the unique element in a list where every other element appears twice. Arguments: lst -- a list of integers where exactly one element appears once and all others appear twice Returns: The unique integer that appears only once in the list. unique_element = 0 for number in lst: unique_element ^= number return unique_element"},{"question":"# Problem Statement You are tasked with enhancing a software module that processes lists of integers. The module needs to include additional functionality to efficiently find the k-th smallest element in an unsorted list. The current implementation uses a basic sorting approach, which is not optimal for large datasets. # Objectives 1. **Implement an efficient algorithm to find the k-th smallest element** in an unsorted list. 2. **Ensure the solution optimizes both time and space complexity**. 3. **Validate input parameters** and handle potential edge cases effectively. # Requirements 1. Implement the function `find_kth_smallest` which accepts the following parameters: * `nums` (list): A list of integers. * `k` (int): An integer representing the k-th position (1-indexed) of the smallest element you need to find in the list. 2. Validate the input parameters: * Ensure `nums` is a list of integers. * Ensure `k` is an integer such that `1 <= k <= len(nums)`. * Raise appropriate error messages for invalid inputs. 3. Use an efficient algorithm to find the k-th smallest element: * Aim for a solution with average time complexity O(n), such as the Quickselect algorithm. 4. Return the k-th smallest element from the list. # Input Format * `nums`: A list of integers. * `k`: An integer where 1 <= k <= len(nums). # Output Format An integer representing the k-th smallest element in the list. # Example ```python find_kth_smallest([7, 10, 4, 3, 20, 15], 3) # Output: 7 find_kth_smallest([7, 10, 4, 3, 20, 15], 4) # Output: 10 ``` # Constraints * Your solution should efficiently handle the input list with a maximum time complexity of O(n) for average cases. * The list `nums` can contain up to 10^5 integers. * The integers in `nums` can each be in the range of -10^9 to 10^9.","solution":"def find_kth_smallest(nums, k): Finds the k-th smallest element in an unsorted list using Quickselect algorithm. Args: nums (list): A list of integers. k (int): An integer representing the k-th position (1-indexed) of the smallest element. Returns: int: The k-th smallest element in the list. Raises: ValueError: If input parameters are invalid. if not isinstance(nums, list): raise ValueError(\\"nums must be a list\\") if not all(isinstance(num, int) for num in nums): raise ValueError(\\"All elements in nums must be integers\\") if not isinstance(k, int) or not (1 <= k <= len(nums)): raise ValueError(\\"k must be an integer within the range 1 to len(nums)\\") def quickselect(l, r, k_smallest): if l == r: return nums[l] pivot_index = partition(l, r) if k_smallest == pivot_index: return nums[k_smallest] elif k_smallest < pivot_index: return quickselect(l, pivot_index - 1, k_smallest) else: return quickselect(pivot_index + 1, r, k_smallest) def partition(l, r): pivot = nums[r] i = l for j in range(l, r): if nums[j] < pivot: nums[i], nums[j] = nums[j], nums[i] i += 1 nums[i], nums[r] = nums[r], nums[i] return i return quickselect(0, len(nums) - 1, k - 1)"},{"question":"**Introduction**: You are asked to design a function that validates if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. This problem will test your string manipulation skills and understanding of two-pointer techniques. **Problem**: Implement the function `is_palindrome(s: str) -> bool` that checks if the input string is a palindrome. **Input**: - A single string `s` which may include spaces, punctuation, and special characters. **Output**: - A boolean value `True` if the string is a palindrome, and `False` otherwise. **Constraints**: - The length of the string `s` is at most 1000 characters. - Consider only alphanumeric characters (\'a\'-\'z\', \'A\'-\'Z\', \'0\'-\'9\'). - Ignore cases when determining if the string is a palindrome. **Example**: ```python >>> is_palindrome(\\"A man, a plan, a canal: Panama\\") True >>> is_palindrome(\\"race a car\\") False >>> is_palindrome(\\" \\") True ``` **Requirements**: - Implement the solution in O(n) time complexity where n is the length of the string. - Utilize the two-pointer technique to efficiently check for palindrome properties. - Handle all edge cases, including empty strings which are considered palindromes, and strings containing only non-alphanumeric characters. **Additional**: - You may use built-in string methods to filter out non-alphanumeric characters and convert the string to lower case. - Ensure your solution is robust and handles large input sizes within the constraints given.","solution":"def is_palindrome(s: str) -> bool: Returns True if the given string s is a palindrome, considering only alphanumeric characters and ignoring case. Returns False otherwise. # Filter out non-alphanumeric characters and convert to lower case filtered_string = \'\'.join(char.lower() for char in s if char.isalnum()) # Use two-pointer technique to check palindrome left, right = 0, len(filtered_string) - 1 while left < right: if filtered_string[left] != filtered_string[right]: return False left += 1 right -= 1 return True"},{"question":"# Coding Assessment Question **Scenario**: You are developing a data-processing module for a social media analytics platform that tracks changes in user engagement metrics over time. The platform needs to efficiently calculate the prefix sum of engagement scores for a sequence of users. Efficient insertion and querying of user engagement scores will be pivotal for real-time analytics. **Task**: Implement a Fenwick Tree (Binary Indexed Tree) that supports dynamic updates and prefix sum queries to handle user engagement scores efficiently. **Requirements**: 1. **Initialization**: - Provide a class `FenwickTree` that initializes with a list of engagement scores. 2. **Updates**: - Implement an `update` method to increment the engagement score of a specific user. 3. **Prefix Sum Queries**: - Implement a `prefix_sum` method that returns the sum of engagement scores from the start up to a specified user index. # Function Details - **Class**: `FenwickTree` - **Constructor**: - `__init__(self, arr: List[int]) -> None` - Initializes the Fenwick Tree using the provided list of engagement scores. - **Methods**: - `update(self, index: int, delta: int) -> None` - Increments the score at the specified index by the given delta value. - `prefix_sum(self, index: int) -> int` - Returns the prefix sum of scores from index 0 to the specified index. **Constraints**: - Array size `N` where `1 <= N <= 10^5`. - Value range for elements and updates within `-10^9` to `10^9`. - Support both positive and negative integers. # Input Format: - The initial engagement score array followed by multiple updates and queries. - Example: `arr = [3, 2, -1, 6, 5]` - Operations example: - `prefix_sum(3)` should return the sum of elements from index 0 to 3. - `update(2, 4)` should increment the score at index 2 by 4. # Output Format: - For each `prefix_sum` operation, output the result of the query. # Example: ```python arr = [3, 2, -1, 6, 5] ft = FenwickTree(arr) print(ft.prefix_sum(3)) # Output: 10 ft.update(2, 4) print(ft.prefix_sum(3)) # Output: 14 ``` --- By implementing these methods, you\'ll ensure that the platform can handle dynamic updates and efficient queries necessary for real-time analytics, aligning with the requirements of social media engagement tracking.","solution":"class FenwickTree: def __init__(self, arr): Initializes the Fenwick Tree using the provided list of engagement scores. self.n = len(arr) self.tree = [0] * (self.n + 1) for idx, value in enumerate(arr): self._add(idx + 1, value) def _add(self, index, value): Helper method to add value to the tree at a given index. while index <= self.n: self.tree[index] += value index += index & -index def update(self, index, delta): Increments the score at the specified index by the given delta value. if index < 0 or index >= self.n: raise IndexError(\\"Index out of bounds\\") self._add(index + 1, delta) def prefix_sum(self, index): Returns the prefix sum of scores from index 0 to the specified index. if index < 0 or index >= self.n: raise IndexError(\\"Index out of bounds\\") sum_val = 0 index += 1 while index > 0: sum_val += self.tree[index] index -= index & -index return sum_val"},{"question":"# Coding Assessment Question Context You are part of a software engineering team that is building a simple simulation for a vending machine\'s inventory management system. A crucial function is to determine if the machine can dispense a certain number of items given the current inventory and the item requested. Problem Statement **Task**: Implement a `can_dispense` function in Python that checks if the vending machine can dispense the requested number of items and then decrement the inventory accordingly. Additionally, you need to implement a `release_inventory` function that provides a formatted string of the current inventory. * **Function Specifications**: - **Function 1**: `can_dispense` - **Input**: A dictionary (`inventory`) where keys are item names (strings) and values are integers representing the number of items available, a string (`item`) representing the item name, and an integer (`quantity`) representing the quantity requested. - **Output**: Boolean value (`True` if the request can be fulfilled, `False` otherwise). - **Function 2**: `release_inventory` - **Input**: A dictionary (`inventory`) where keys are item names (strings) and values are integers representing the number of items available. - **Output**: A formatted string displaying the inventory in the form: ``` Inventory: Item1: Quantity1 Item2: Quantity2 ... (and so on for all items) ``` * **Constraints**: - Quantities in the inventory must be non-negative integers. - If the requested item is not in the inventory, `can_dispense` should return `False`. - If the requested quantity is more than what\'s available, `can_dispense` should return `False` without modifying the inventory. - If `can_dispense` returns `True`, the inventory should be updated to reflect the removal of the requested quantity. * **Performance Requirements**: - The solution should be optimal in terms of both time and space complexity, with O(1) complexity for checking and updating a specific item\'s availability. Example Usage ```python def can_dispense(inventory: dict, item: str, quantity: int) -> bool: >>> inventory = {\'soda\': 5, \'chips\': 3} >>> can_dispense(inventory, \'soda\', 2) True >>> inventory {\'soda\': 3, \'chips\': 3} >>> can_dispense(inventory, \'chips\', 5) False >>> inventory {\'soda\': 3, \'chips\': 3} >>> can_dispense(inventory, \'water\', 1) False >>> inventory {\'soda\': 3, \'chips\': 3} def release_inventory(inventory: dict) -> str: >>> inventory = {\'soda\': 3, \'chips\': 3} >>> print(release_inventory(inventory)) Inventory: soda: 3 chips: 3 # Your program should be able to execute the following if __name__ == \\"__main__\\": import doctest doctest.testmod() inventory = {\'soda\': 3, \'chips\': 3} print(can_dispense(inventory, \'soda\', 2)) # True print(release_inventory(inventory)) # Inventory: soda: 1, chips: 3 print(can_dispense(inventory, \'chips\', 4)) # False print(release_inventory(inventory)) # Inventory: soda: 1, chips: 3 ``` **Note**: Ensure your solution passes the provided doctest cases without modification and adheres to the constraints and specifications listed.","solution":"def can_dispense(inventory: dict, item: str, quantity: int) -> bool: if item not in inventory or inventory[item] < quantity: return False inventory[item] -= quantity return True def release_inventory(inventory: dict) -> str: inventory_str = \\"Inventory:n\\" for item, quantity in inventory.items(): inventory_str += f\\"{item}: {quantity}n\\" return inventory_str.strip()"},{"question":"# Data Transformation and Aggregation in a Nested Dictionary You are working on a data processing system that operates on a nested dictionary structure. Each dictionary within the structure represents data records, where keys represent record identifiers and values are dictionaries containing various attributes about those records. Your task is to implement a function that transforms and aggregates data from this nested dictionary structure according to specific rules. Input and Output: - **Input**: * A nested dictionary `data` where each key is a string identifier and its value is another dictionary of attributes. For example: ```python { \\"record1\\": {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"score\\": 85}, \\"record2\\": {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"score\\": 75}, \\"record3\\": {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"score\\": 95} } ``` * A list of `keys_to_aggregate` indicating the attributes to be aggregated. For example, `[\\"age\\", \\"score\\"]`. - **Output**: * A new dictionary where: * Keys are unique values from the specified attributes combined. * Values are dictionaries containing the count of occurrences of each unique combination and the combined sum of the specified attributes. For example: ```python { (\\"Alice\\", 30): {\\"count\\": 2, \\"score_sum\\": 180}, (\\"Bob\\", 22): {\\"count\\": 1, \\"score_sum\\": 75} } ``` Constraints: - There may be up to 100,000 records, each with a varying number of attributes. - The aggregation should be efficient, considering both time and memory constraints. Example: ```python data = { \\"record1\\": {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"score\\": 85}, \\"record2\\": {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"score\\": 75}, \\"record3\\": {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"score\\": 95} } keys_to_aggregate = [\\"name\\", \\"age\\"] # Expected Output: { (\\"Alice\\", 30): {\\"count\\": 2, \\"score_sum\\": 180}, (\\"Bob\\", 22): {\\"count\\": 1, \\"score_sum\\": 75} } print(aggregate_data(data, keys_to_aggregate)) ``` Function Signature: ```python def aggregate_data(data: Dict[str, Dict[str, Any]], keys_to_aggregate: List[str]) -> Dict[Tuple[Any, ...], Dict[str, int]]: pass ``` Provide the implementation for the `aggregate_data` function, ensuring it handles all constraints and edge cases listed above.","solution":"from typing import Dict, List, Any, Tuple def aggregate_data(data: Dict[str, Dict[str, Any]], keys_to_aggregate: List[str]) -> Dict[Tuple[Any, ...], Dict[str, int]]: result = {} for record in data.values(): # Generate the key from keys_to_aggregate list aggregate_key = tuple(record[key] for key in keys_to_aggregate) # Initialize or update the result dictionary if aggregate_key not in result: result[aggregate_key] = {\\"count\\": 0, \\"score_sum\\": 0} result[aggregate_key][\\"count\\"] += 1 result[aggregate_key][\\"score_sum\\"] += record.get(\\"score\\", 0) return result"},{"question":"# Querying and Updating a Running Total Array # You\'ve been tasked to design a class that efficiently maintains a running total array, also known as a cumulative sum array. Your class should support the following operations: 1. **Update the value at a specified index of the array.** 2. **Get the total sum of any segment of the array.** # Task: Extend the provided `RunningTotal` class with the following functionalities: 1. A method `update(index: int, value: int)` which updates the element at the specified index to the given value and adjusts the running total array accordingly. 2. A method `segment_sum(start: int, end: int)` which returns the total sum from the start index to the end index, inclusive. # Inputs and Outputs: **Method 1: update** - **Input:** index: Integer, index of the array to be updated; value: Integer, the new value to set at the given index. - **Output:** None (updates the internal array and running total) **Method 2: segment_sum** - **Input:** start: Integer, starting index of the segment; end: Integer, ending index of the segment. - **Output:** Integer, the sum of the elements from `start` to `end` in the array. # Examples: 1. For `update`: ```python array = [2, 4, 5, 7, 8] rt = RunningTotal(array) rt.update(2, 10) # Mutation: array becomes [2, 4, 10, 7, 8] ``` 2. For `segment_sum`: ```python array = [2, 4, 5, 7, 8] rt = RunningTotal(array) print(rt.segment_sum(1, 3)) ``` **Output:** ``` 16 # Array segment: [4, 5, 7] ``` # Constraints: - The array length will be in the range [1, 10^4]. - Elements of the array and values to be updated will be integers. - The indices for the methods will be valid according to the array\'s length. # Implementation: ```python class RunningTotal: def __init__(self, array: list[int]) -> None: self.array = array[:] self.running_total = [0] * len(array) if len(array) > 0: self.running_total[0] = array[0] for i in range(1, len(array)): self.running_total[i] = self.running_total[i - 1] + array[i] def update(self, index: int, value: int) -> None: Updates the element at the specified index to the new value and adjusts the running total array. # Implement this method def segment_sum(self, start: int, end: int) -> int: Returns the total sum from the start index to the end index, inclusive. # Implement this method ```","solution":"class RunningTotal: def __init__(self, array: list[int]) -> None: self.array = array[:] self.running_total = [0] * len(array) if len(array) > 0: self.running_total[0] = array[0] for i in range(1, len(array)): self.running_total[i] = self.running_total[i - 1] + array[i] def update(self, index: int, value: int) -> None: Updates the element at the specified index to the new value and adjusts the running total array. old_value = self.array[index] # Update the value in the original array self.array[index] = value # Adjusting the running total from the index to the end of the array difference = value - old_value for i in range(index, len(self.array)): self.running_total[i] += difference def segment_sum(self, start: int, end: int) -> int: Returns the total sum from the start index to the end index, inclusive. if start == 0: return self.running_total[end] else: return self.running_total[end] - self.running_total[start - 1]"},{"question":"# Matrix Rotation Objective Implement a function to rotate a given square matrix 90 degrees clockwise. This will test your understanding of matrix manipulation and your ability to correctly implement algorithms involving multi-dimensional arrays. Function Signature ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: pass ``` Inputs - `matrix` (List[List[int]]): A 2D list representing an `n x n` square matrix of integers. Outputs - A 2D list representing the input matrix rotated 90 degrees clockwise. Constraints - The input matrix is guaranteed to be a square matrix with dimensions `n x n` where `1 <= n <= 100`. - Each element in the matrix is an integer in the range `-1000` to `1000`. Example ```python matrix1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] matrix2 = [ [0, 1], [2, 3] ] print(rotate_matrix(matrix1)) # Output: [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] print(rotate_matrix(matrix2)) # Output: [ # [2, 0], # [3, 1] # ] ``` Scenario You are developing a photo editing application, and one of the features is to rotate an image 90 degrees clockwise. Since the image can be represented as a matrix of pixel values, you need to implement the `rotate_matrix` function to handle this operation. Ensure your solution is efficient and handles the constraints provided.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates a given n x n square matrix 90 degrees clockwise. Args: matrix: A 2D list representing an n x n square matrix of integers. Returns: A 2D list representing the matrix rotated 90 degrees clockwise. n = len(matrix) # Create a new matrix with the same dimensions rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - 1 - i] = matrix[i][j] return rotated"},{"question":"# Coding Assessment Question: Secure Message Transfer with Public-Private Key Encryption Scenario: You are developing a secure messaging system where messages are encrypted using a public key and decrypted with a private key. The system uses RSA (Rivest–Shamir–Adleman) algorithm for encryption and decryption. Challenge: Implement a `SecureMessage` class that utilizes RSA public and private keys to securely encrypt and decrypt messages. Requirements: 1. **Input Format**: - A message string `message` that needs to be encrypted. - A pair of keys: `public_key` for encryption and `private_key` for decryption. Both keys are tuples, where the public key is `(n, e)` and the private key is `(n, d)`. 2. **Output Format**: - The `encrypt` method should return the encrypted message as a list of integers. - The `decrypt` method should return the original message string. 3. **Constraints**: - The message is a string containing ASCII characters. - The key values `n`, `e`, and `d` are positive integers. - Assume the RSA keys provided are valid and correctly generated. Example: Implement the encryption and decryption methods and demonstrate them with provided keys. ```python # Example usage message = \\"HELLO\\" public_key = (3233, 17) # (n, e) private_key = (3233, 2753) # (n, d) sm = SecureMessage(public_key, private_key) encrypted = sm.encrypt(message) print(encrypted) # Expected output: Encrypted message as a list of integers. decrypted = sm.decrypt(encrypted) print(decrypted) # Expected output: \\"HELLO\\" ``` Implementation: You need to implement the `SecureMessage` class\' `__init__`, `encrypt`, and `decrypt` methods, and ensure they meet the given requirements. ```python class SecureMessage: def __init__(self, public_key, private_key): self.public_key = public_key self.private_key = private_key def encrypt(self, message): n, e = self.public_key encrypted_message = [pow(ord(char), e, n) for char in message] return encrypted_message def decrypt(self, encrypted_message): n, d = self.private_key decrypted_message = \'\'.join([chr(pow(char, d, n)) for char in encrypted_message]) return decrypted_message ``` Make sure the implementation handles the encryption and decryption correctly and complies with the RSA algorithm\'s encryption and decryption processes.","solution":"class SecureMessage: def __init__(self, public_key, private_key): self.public_key = public_key self.private_key = private_key def encrypt(self, message): n, e = self.public_key encrypted_message = [pow(ord(char), e, n) for char in message] return encrypted_message def decrypt(self, encrypted_message): n, d = self.private_key decrypted_message = \'\'.join([chr(pow(char, d, n)) for char in encrypted_message]) return decrypted_message"},{"question":"# Coding Question: Player Rank Leaderboard Your company is developing a gaming application that requires a ranking system to track the scores of players and rank them accordingly in real-time. You need to implement a function `update_ranking` that manages this leaderboard. Function Signature ```python def update_ranking(players: List[str], scores: List[int]) -> List[Tuple[str, int]]: ``` Parameters - **players**: A list of strings representing the names of the players. - **scores**: A list of integers representing the scores of the players, where the score at index i corresponds to the player at index i in the `players` list. Returns - A list of tuples, where each tuple contains a player\'s name and their score, sorted in descending order of scores. If two players have the same score, maintain their relative order as they appear in the input list. Constraints - The length of the `players` list will be equal to the length of the `scores` list. - Both lists will have at least one pair and at most 10^5 pairs. - Scores will be non-negative integers. Example Usage ```python players = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"Diana\\"] scores = [1500, 1700, 1700, 1600] print(update_ranking(players, scores)) # Output: [(\'Bob\', 1700), (\'Charlie\', 1700), (\'Diana\', 1600), (\'Alice\', 1500)] ``` Additional Notes - Consider edge cases, such as when all players have the same score or when there\'s a significant tie in score values. - The function should be optimized for performance, given the potential size of the input lists.","solution":"from typing import List, Tuple def update_ranking(players: List[str], scores: List[int]) -> List[Tuple[str, int]]: Returns a list of tuples, where each tuple contains a player\'s name and their score, sorted in descending order of scores. If two players have the same score, they maintain their relative order as they appear in the input list. # Combine players and their corresponding scores into a list of tuples player_scores = list(zip(players, scores)) # Sort the player_scores by the score in descending order, preserving relative order for ties sorted_player_scores = sorted(player_scores, key=lambda ps: (-ps[1], players.index(ps[0]))) return sorted_player_scores"},{"question":"Book Store Inventory Management You are developing a small inventory management system for a bookstore. The system needs to be able to update the stock, add new books, and calculate the total value of the inventory based on the stock and price of each book. **Book Data Structure**: * Each book is represented as a dictionary with the following keys: * `title`: The title of the book (string). * `author`: The author of the book (string). * `price`: The price of the book in USD (float). * `stock`: The number of copies available in the store (integer). **Input**: - A list of books currently in the inventory where each book is a dictionary. - A list of updates, where each update is a dictionary with one of the following operations: * `add`: Adds a new book to the inventory. The dictionary contains the same keys as a book dictionary. * `update_stock`: Updates the stock of an existing book. The dictionary contains `title` and `stock_change` keys, where `stock_change` is an integer. **Output**: - A tuple containing: 1. The updated inventory list of books. 2. The total value of the inventory (float). # Task: 1. Implement the function `update_inventory(inventory: List[Dict[str, Union[str, float, int]]], updates: List[Dict[str, Union[str, float, int]]]) -> Tuple[List[Dict[str, Union[str, float, int]]], float]` that performs the necessary operations and calculates the total inventory value. 2. Ensure the function handles cases where the book to be updated does not exist in the inventory. # Example Usages: ```python initial_inventory = [ {\\"title\\": \\"Book A\\", \\"author\\": \\"Author 1\\", \\"price\\": 10.0, \\"stock\\": 5}, {\\"title\\": \\"Book B\\", \\"author\\": \\"Author 2\\", \\"price\\": 15.0, \\"stock\\": 3} ] updates = [ {\\"add\\": {\\"title\\": \\"Book C\\", \\"author\\": \\"Author 3\\", \\"price\\": 20.0, \\"stock\\": 2}}, {\\"update_stock\\": {\\"title\\": \\"Book A\\", \\"stock_change\\": 3}}, {\\"update_stock\\": {\\"title\\": \\"Book B\\", \\"stock_change\\": -1}} ] result = update_inventory(initial_inventory, updates) assert result[0] == [ {\\"title\\": \\"Book A\\", \\"author\\": \\"Author 1\\", \\"price\\": 10.0, \\"stock\\": 8}, {\\"title\\": \\"Book B\\", \\"author\\": \\"Author 2\\", \\"price\\": 15.0, \\"stock\\": 2}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Author 3\\", \\"price\\": 20.0, \\"stock\\": 2} ] assert result[1] == 180.0 # (8*10 + 2*15 + 2*20) ```","solution":"def update_inventory(inventory, updates): Updates the bookstore inventory based on the given updates and calculates the total value of the inventory. Parameters: inventory (List[Dict[str, Union[str, float, int]]]): Current book inventory. updates (List[Dict[str, Union[str, float, int]]]): List of updates - either adding a new book or updating stock. Returns: Tuple[List[Dict[str, Union[str, float, int]]], float]: Updated inventory and total inventory value. inventory_dict = {book[\'title\']: book for book in inventory} for update in updates: if \'add\' in update: new_book = update[\'add\'] inventory_dict[new_book[\'title\']] = new_book elif \'update_stock\' in update: stock_update = update[\'update_stock\'] title = stock_update[\'title\'] stock_change = stock_update[\'stock_change\'] if title in inventory_dict: inventory_dict[title][\'stock\'] += stock_change else: continue updated_inventory = list(inventory_dict.values()) total_value = sum(book[\'price\'] * book[\'stock\'] for book in updated_inventory) return updated_inventory, total_value"},{"question":"# Problem: Counting Subarrays with Sum Less Than K You are tasked with determining the number of contiguous subarrays within an array of positive integers such that the sum of the elements in the subarray is strictly less than a given integer `K`. **Objective**: Write a function `count_subarrays_with_sum_less_than_k(nums: List[int], K: int) -> int` that computes and returns the number of such subarrays. **Function Signature**: `def count_subarrays_with_sum_less_than_k(nums: List[int], K: int) -> int:` **Input**: - `nums` (List[int]): A list of positive integers representing the input array. (1 ≤ len(nums) ≤ 1000, 1 ≤ nums[i] ≤ 1000 for all `i`) - `K` (integer): The target sum threshold. (1 ≤ K ≤ 10^6) **Output**: - An integer representing the number of contiguous subarrays whose sum is strictly less than `K`. **Constraints**: - All input numbers are positive integers. - Both the length of the `nums` list and the values within the list are bounded within the problem constraints. **Examples**: ```python print(count_subarrays_with_sum_less_than_k([1, 2, 3], 5)) # Output: 4 print(count_subarrays_with_sum_less_than_k([4, 2, 1, 7], 8)) # Output: 7 ``` **Detailed Explanation**: 1. Iterate through each possible starting point of the subarray within the list. 2. For each starting point, iterate through possible ending points and keep a cumulative sum. 3. Check if the cumulative sum is less than `K` and, if so, increment the count. 4. Reset the cumulative sum for each new starting point. 5. Continue this process for all possible starting points. 6. Return the total count of valid subarrays. **Requirements**: - The function should efficiently handle the constraints, particularly given the potential for larger values in the `nums` list and the target sum `K`. - Ensure the solution optimizes performance, given the constraints of the problem.","solution":"from typing import List def count_subarrays_with_sum_less_than_k(nums: List[int], K: int) -> int: total_count = 0 n = len(nums) for start in range(n): current_sum = 0 for end in range(start, n): current_sum += nums[end] if current_sum < K: total_count += 1 else: break return total_count"},{"question":"# Custom Stack - Min Element Tracking You are required to design a custom stack class with an additional feature that allows tracking the minimum element in the stack in constant time. Your task is to implement the class `CustomStack` with the methods `push`, `pop`, `top`, and `get_min`. **Expected Input and Output Formats**: * **Input**: The methods may receive various integer values to push into the stack. * **Output**: The methods will return specific values based on the stack\'s state. **Constraints/Limitations**: * All method calls should have constant time complexity, O(1). * The stack can contain both positive and negative integers. * If `pop` or `get_min` is called on an empty stack, return `None`. **Performance Requirements**: * Ensure that all operations (push, pop, top, get_min) maintain O(1) time complexity. **Class Signature**: ```python class CustomStack: def __init__(self): ... def push(self, val: int) -> None: ... def pop(self) -> int: ... def top(self) -> int: ... def get_min(self) -> int: ... ``` # Example: ```python # Example usage and validation stack = CustomStack() stack.push(3) stack.push(5) print(stack.get_min()) # Should output 3 stack.push(2) stack.push(1) print(stack.get_min()) # Should output 1 stack.pop() print(stack.get_min()) # Should output 2 stack.pop() print(stack.top()) # Should output 5 stack.pop() print(stack.get_min()) # Should output 3 # Edge case: empty stack stack.pop() print(stack.pop()) # Should output None print(stack.get_min()) # Should output None ``` **Notes**: * Ensure appropriate handling of edge cases such as operations on an empty stack. * Avoid using extra space proportional to the number of elements in the stack for tracking the minimum element. Instead, make use of auxiliary data structures wisely.","solution":"class CustomStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, val: int) -> None: self.stack.append(val) if not self.min_stack or val <= self.get_min(): self.min_stack.append(val) def pop(self) -> int: if not self.stack: return None val = self.stack.pop() if val == self.get_min(): self.min_stack.pop() return val def top(self) -> int: if not self.stack: return None return self.stack[-1] def get_min(self) -> int: if not self.min_stack: return None return self.min_stack[-1]"},{"question":"# Coding Question You are tasked with implementing a function that determines if there are two numbers in a given list that add up to a specified target sum. The function should return the indices of the two numbers if they exist, otherwise, it should return an empty list. Ensure your solution has an optimal time complexity. # Function Signature ```python def two_sum(numbers: list, target: int) -> list: pass ``` # Input * `numbers` (list of int): A list of integers which can potentially be unsorted. * `target` (int): The target sum that you are trying to find by adding two different elements from the list. # Output * A list containing two indices of the elements that add up to the target sum. If no such pair exists, return an empty list. # Constraints * The length of the list, `n` is such that `1 ≤ n ≤ 10^4`. * The value of each element in the list is an integer in the range `[10^6-10^6]`. # Example ```python print(two_sum([2, 7, 11, 15], 9)) # Output: [0, 1] print(two_sum([3, 2, 4], 6)) # Output: [1, 2] print(two_sum([3, 3], 6)) # Output: [0, 1] print(two_sum([1, 2, 3, 4], 8)) # Output: [] print(two_sum([0, 1, -1], 0)) # Output: [1, 2] ``` # Description Implement the `two_sum` function to find and return the indices of the two numbers in the list that add up to the specified target. Ensure that your code handles edge cases and finds the solution in an efficient manner. The returned indices should be in ascending order.","solution":"def two_sum(numbers: list, target: int) -> list: Function to find indices of two numbers that add up to a target sum. :param numbers: List of integers (unsorted) :param target: Target sum (integer) :return: List containing two indices of elements that add up to target sum or an empty list if no such pair exists num_map = {} for i, num in enumerate(numbers): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i return []"},{"question":"# Question: Calculate the Next 10 Leap Years from a Given Year Context: A leap year in the Gregorian calendar is a year that is divisible by 4, except for years that are divisible by 100 but not by 400. For example, 1996 and 2000 are leap years, but 1900 and 2100 are not. Task: Implement a Python function that takes a starting year as input and returns a list of the next 10 leap years following (and including) the given year. Function Signature: ```python def next_ten_leap_years(start_year: int) -> list: pass ``` Input: * **start_year** (int): A four-digit year in the Gregorian calendar. Output: * **leap_years** (list): A list of the next 10 leap years (as integers). Constraints: * Ensure the implementation accurately determines leap years according to the given rules. * The function should be efficient and handle large years without performance issues. Example: ```python >>> next_ten_leap_years(2021) [2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060] ``` Notes: * The function should correctly account for the different rules governing leap years. * The start_year should be included in the list if it is a leap year itself.","solution":"def is_leap_year(year): Check if a given year is a leap year. return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) def next_ten_leap_years(start_year): Returns a list of the next 10 leap years starting from the given year. Parameters: start_year (int): A four-digit year in the Gregorian calendar. Returns: list: A list of the next 10 leap years. leap_years = [] year = start_year while len(leap_years) < 10: if is_leap_year(year): leap_years.append(year) year += 1 return leap_years"},{"question":"# Problem Statement You are required to implement a more efficient and dynamic variant of the Dijkstra\'s shortest path algorithm. Introduce optimizations that enhance the speed and memory usage of the algorithm while preserving its primary functionality and correctness. # Specifications * **Function**: `optimized_dijkstra(graph: dict, start: str) -> dict` * **Input**: * A dictionary `graph` where keys are node identifiers (strings) and values are dictionaries with neighboring node identifiers as keys and edge weights as values. * A string `start` representing the starting node. * **Output**: A dictionary with node identifiers as keys and their respective minimum distance from the starting node as values. # Constraints * The graph provided will be a connected and directed graph with a maximum of `10^5` nodes and `10^6` edges. * Edge weights will be non-negative integers. * Avoid using unnecessary loops that may slow down the execution. * Use data structures that optimize the performance of key operations used in Dijkstra\'s algorithm (e.g., priority queue). # Performance Requirements * Ensure the algorithm operates efficiently on large graphs. * Minimize the space complexity while storing intermediate data structures. # Examples ```python # Given the following graph graph = { \'A\': {\'B\': 1, \'C\': 4}, \'B\': {\'C\': 2, \'D\': 5}, \'C\': {\'D\': 1}, \'D\': {} } # Start node \'A\' start = \'A\' # After running optimized_dijkstra on the graph from the start node distances = optimized_dijkstra(graph, start) # distances should return {\'A\': 0, \'B\': 1, \'C\': 3, \'D\': 4} ``` # Explanation * The shortest path from \'A\' to \'A\' is 0. * The shortest path from \'A\' to \'B\' is 1 (A -> B). * The shortest path from \'A\' to \'C\' is 3 (A -> B -> C). * The shortest path from \'A\' to \'D\' is 4 (A -> B -> C -> D).","solution":"import heapq def optimized_dijkstra(graph, start): Optimized Dijkstra\'s algorithm to find the shortest path in a graph. :param graph: Dictionary where keys are node identifiers and values are dictionaries with neighboring node identifiers as keys and edge weights as values. :param start: Starting node identifier :return: Dictionary with node identifiers as keys and their respective minimum distance from the starting node as values # Min-heap priority queue priority_queue = [(0, start)] # Dictionary to store shortest path to each node distances = {node: float(\'inf\') for node in graph} distances[start] = 0 while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # Skip processing if we have already found a better way if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node].items(): distance = current_distance + weight # Only consider this new path if it\'s better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"# Coding Assessment Question Scenario You are contributing to a text-processing library used for data analysis. One important functionality that the library currently lacks is the ability to compress and decompress strings using Run-Length Encoding (RLE) technique. In RLE, sequences of the same data value (character) are stored as a single data value and count. Task Your task is to implement two functions: `compress_rle` and `decompress_rle`. - The `compress_rle` function should compress a given string using the RLE technique. - The `decompress_rle` function should decompress a string that was compressed using the RLE technique. Requirements - The `compress_rle` function takes one input, a string `text`. - The `decompress_rle` function takes one input, a string `compressed_text`. - The characters in the string can include lowercase and uppercase letters, numbers, and special characters. Input Format: - For `compress_rle`: a single string `text` that may include lower and upper case letters, numbers, and special characters. - For `decompress_rle`: a single string `compressed_text` that represents the RLE compressed version. Output Format: - For `compress_rle`: a single string representing the RLE compressed version of the input. - For `decompress_rle`: a single string representing the decompressed original string. Constraints: - Assume the length of the string is at most ( 10^4 ) characters. - In the compressed format, the count of consecutive characters will always be a positive integer. Example: ``` Input to compress_rle: \\"aaabbcdddaaa\\" Output from compress_rle: \\"a3b2c1d3a3\\" Input to decompress_rle: \\"a3b2c1d3a3\\" Output from decompress_rle: \\"aaabbcdddaaa\\" ``` Function Signatures: ```python def compress_rle(text: str) -> str: pass def decompress_rle(compressed_text: str) -> str: pass ``` **Hint**: Pay attention to characters and their counts when implementing RLE compression and decompression. Good luck!","solution":"def compress_rle(text: str) -> str: if not text: return \\"\\" compressed = [] count = 1 for i in range(1, len(text)): if text[i] == text[i-1]: count += 1 else: compressed.append(text[i-1] + str(count)) count = 1 compressed.append(text[-1] + str(count)) return \'\'.join(compressed) def decompress_rle(compressed_text: str) -> str: if not compressed_text: return \\"\\" decompressed = [] i = 0 while i < len(compressed_text): char = compressed_text[i] count_str = [] i += 1 while i < len(compressed_text) and compressed_text[i].isdigit(): count_str.append(compressed_text[i]) i += 1 count = int(\'\'.join(count_str)) decompressed.append(char * count) return \'\'.join(decompressed)"},{"question":"**Problem Statement** Implement a function to determine if a given number is a Lychrel number. A Lychrel number is a natural number that cannot form a palindrome through the iterative process of repeatedly reversing its digits and adding the resulting numbers. For this task, assume that if a palindrome is not found within 50 iterations, the number can be considered a Lychrel number. # Function Signature ```python def is_lychrel(number: int) -> bool: pass ``` # Input - `number` (integer): The positive integer to be checked. # Output - Returns `True` if the number is a Lychrel number, otherwise returns `False`. # Constraints 1. The number will be a positive integer greater than 0 and less than 10^8. # Examples ```python # Example 1 print(is_lychrel(56)) # False (56 + 65 = 121, which is a palindrome) # Example 2 print(is_lychrel(196)) # True (196 is considered a Lychrel number, as no palindrome is found within 50 iterations) ``` # Note - A palindrome is a number that reads the same backward as forward. - Ensure proper handling for large numbers and edge cases. - Consider that 50 iterations are enough to determine if a number is a Lychrel number for the scope of this problem.","solution":"def is_palindrome(number: int) -> bool: Checks if a number is a palindrome. return str(number) == str(number)[::-1] def is_lychrel(number: int) -> bool: Determines if a number is a Lychrel number. for _ in range(50): number = number + int(str(number)[::-1]) if is_palindrome(number): return False return True"},{"question":"# Budget Planning Tool You have been tasked to create a budget planning tool. The tool needs to categorize expenses and ensure you don\'t exceed the available budget allocated for various categories. # Problem Description Create a function `plan_budget` that takes in a list of initial budget allocations, a list of expenses, and allocates those expenses to the correct category without exceeding the initial budget for any category. # Requirements 1. The function should accept an initial budget for each category. 2. It should allocate expenses to their respective categories if the expense does not exceed the remaining budget for that category. 3. If an expense exceeds the remaining budget in its category, it should return a message indicating so. # Function Signature ```python def plan_budget(categories: list, initial_budget: list, expenses: list) -> list: ``` # Input * `categories` (list of str): The names of the budget categories. * `initial_budget` (list of float): The initial budget for each category. * `expenses` (list of tuples): Each tuple contains a category name (str) and an expense amount (float). # Output * Returns a list of strings indicating if an expense was successful or denied. # Constraints 1. The length of `categories` matches the length of `initial_budget`. 2. The `expenses` list contains valid category names present in the `categories` list. 3. All budget amounts and expenses are non-negative. # Example ```python def plan_budget(categories: list, initial_budget: list, expenses: list) -> list: >>> plan_budget([\'groceries\', \'utilities\', \'entertainment\'], [200.0, 150.0, 100.0], [(\'groceries\', 50.0), (\'utilities\', 100.0), (\'entertainment\', 120.0)]) [\'Expense successful\', \'Expense successful\', \'Budget exceeded for entertainment\'] >>> plan_budget([\'office\', \'transport\'], [300.0, 100.0], [(\'office\', 200.0), (\'transport\', 100.0), (\'office\', 120.0), (\'transport\', 20.0)]) [\'Expense successful\', \'Expense successful\', \'Budget exceeded for office\', \'Budget exceeded for transport\'] budget_dict = {category: budget for category, budget in zip(categories, initial_budget)} results = [] for expense in expenses: category, amount = expense if budget_dict[category] >= amount: budget_dict[category] -= amount results.append(\'Expense successful\') else: results.append(f\'Budget exceeded for {category}\') return results ```","solution":"def plan_budget(categories: list, initial_budget: list, expenses: list) -> list: Allocates expenses to their respective categories without exceeding the initial budget. Args: categories (list of str): The names of the budget categories. initial_budget (list of float): The initial budget for each category. expenses (list of tuples): Each tuple contains a category name (str) and an expense amount (float). Returns: list: A list of strings indicating if an expense was successful or denied. budget_dict = {category: budget for category, budget in zip(categories, initial_budget)} results = [] for expense in expenses: category, amount = expense if budget_dict[category] >= amount: budget_dict[category] -= amount results.append(\'Expense successful\') else: results.append(f\'Budget exceeded for {category}\') return results"},{"question":"# Problem Statement You need to write a function that organizes a festival activity roster. The function will take a list of participant names and their corresponding availability schedules. Each schedule consists of the days a participant is available. The function will output a list of days with the participants scheduled for each day, ensuring each participant is allocated to as many days as possible according to their availability. **Function Signature**: ```python def organize_festival_roster(participants: List[Tuple[str, List[int]]]) -> Dict[int, List[str]]: Organizes a festival activity roster based on participants\' availability. @input: participants (A list of tuples with each tuple containing a participant\'s name and their list of available days). @returns: A dictionary with days as keys and lists of participants\' names scheduled for each day as values. @example: >>> organize_festival_roster([(\'Alice\', [1, 2, 4]), (\'Bob\', [2, 3]), (\'Charlie\', [1, 3, 4])]) {1: [\'Alice\', \'Charlie\'], 2: [\'Alice\', \'Bob\'], 3: [\'Bob\', \'Charlie\'], 4: [\'Alice\', \'Charlie\']} pass ``` # Requirements: 1. **Input Constraints**: - The list of participants will contain between 1 and 1000 elements. - Each participant\'s availability list will contain between 1 and 20 days. - Days are represented as integers starting from 1 and can go up to 365. 2. **Output**: - A dictionary where each key is a day and each value is a list of participant names available on that day. 3. **Performance**: - The function should handle up to 1000 participants and respective availability efficiently. # Description - Organize the festival roster by mapping participants to each day they are available. - Ensure that each participant is scheduled for all the days they are available. # Example You can validate your solution with the following example: ```python print(organize_festival_roster([(\'Alice\', [1, 2, 4]), (\'Bob\', [2, 3]), (\'Charlie\', [1, 3, 4])])) # Expected Output: # {1: [\'Alice\', \'Charlie\'], 2: [\'Alice\', \'Bob\'], 3: [\'Bob\', \'Charlie\'], 4: [\'Alice\', \'Charlie\']} ``` # Note: - The input list will contain unique participant names. - Days are inclusive and start from 1 up to 365. - If a day does not have any participants, it should be omitted from the output dictionary.","solution":"from typing import List, Tuple, Dict def organize_festival_roster(participants: List[Tuple[str, List[int]]]) -> Dict[int, List[str]]: roster = {} for participant, days in participants: for day in days: if day not in roster: roster[day] = [] roster[day].append(participant) return roster"},{"question":"# Coding Assessment Question: Scenario: You are developing a simplified version of a text editor, and you need to implement a function to find and replace a given substring in a text block. The function should work efficiently even for large text blocks. Task: Write a function `find_and_replace(text: str, target: str, replacement: str) -> str` that: 1. Takes a text block `text`, a target substring `target`, and a replacement substring `replacement`. 2. Searches for all occurrences of the target substring within the text block. 3. Replaces each occurrence of the target substring with the replacement substring. 4. Returns the modified text block. Input: - A text block `text` consisting of alphabetic characters, spaces, and punctuation. - A target substring `target` and a replacement substring `replacement` consisting of alphabetic characters. Output: - A string representing the modified text block after replacements. Constraints: - The length of `text` will be between 1 and 10^6 characters. - The length of `target` and `replacement` will each be between 1 and 100 characters. - If `target` is not found within `text`, return the original `text` unchanged. - Ensure the function handles edge cases such as overlapping substrings gracefully. Example: ```python find_and_replace(\\"The quick brown fox jumps over the lazy dog\\", \\"fox\\", \\"cat\\") # Returns \\"The quick brown cat jumps over the lazy dog\\" find_and_replace(\\"hello world, world\\", \\"world\\", \\"earth\\") # Returns \\"hello earth, earth\\" find_and_replace(\\"aaaa\\", \\"aa\\", \\"b\\") # Returns \\"bb\\" ``` Requirements: - Optimize for performance to handle large text blocks efficiently. - Ensure readability and maintainability of the code.","solution":"def find_and_replace(text: str, target: str, replacement: str) -> str: Finds all occurrences of the target substring and replaces them with the replacement substring. Args: text (str): The original text block. target (str): The target substring to be replaced. replacement (str): The substring to replace the target with. Returns: str: The modified text block after replacements. if not target: return text # No replacement if target is empty return text.replace(target, replacement)"},{"question":"# Problem Statement You are given a list of words. Implement a function that sorts the words\' list such that the words with the highest frequency of occurrences appear first. If two words have the same frequency, then the words should be sorted by their lexicographical order in ascending order. # Input - A list of strings where each string represents a word. # Output - A list of strings sorted based on the frequency and lexicographical order. # Constraints - **Length of list**: (1 leq len(words) leq 10^4) - **Length of word**: (1 leq len(word) leq 10) - Assume all words contain only lowercase English letters. # Function Signature ```python def frequency_sort(words: list[str]) -> list[str]: pass ``` # Examples ```python >>> frequency_sort([\'apple\', \'banana\', \'apple\', \'cherry\', \'banana\', \'banana\']) [\'banana\', \'apple\', \'cherry\'] >>> frequency_sort([\'dog\', \'dog\', \'cat\', \'cat\', \'elephant\', \'dog\']) [\'dog\', \'cat\', \'elephant\'] >>> frequency_sort([\'a\', \'b\', \'a\', \'c\', \'a\', \'b\', \'c\', \'b\']) [\'a\', \'b\', \'c\'] ``` Detailed Explanation & Tips 1. **Word Frequency Count**: Use a dictionary or collections.Counter to count the frequency of each word in the list. 2. **Sorting Criteria**: - First, sort the words based on their frequency in descending order. - If frequencies are the same, sort based on lexicographical order in ascending order. 3. **Stable Sorting**: Use Python\'s `sorted` function or `sort` method which maintain relative order for equal elements, ensuring lexicographical order is respected for words with the same frequency. This problem requires understanding of counting frequencies, sorting with multiple keys, and leveraging Python data structures efficiently.","solution":"def frequency_sort(words: list[str]) -> list[str]: from collections import Counter # Count the frequency of each word word_counts = Counter(words) # Sort primarily by frequency (in descending order) and secondarily by word (in ascending order) sorted_words = sorted(word_counts.keys(), key=lambda word: (-word_counts[word], word)) return sorted_words"},{"question":"# Problem Statement You are required to implement a function that, given a list of integers, returns the second largest unique integer in the list. If there is no such second largest unique integer, return `None`. **Function Signature**: ```python def find_second_largest(nums: List[int]) -> Union[int, None]: pass ``` **Input**: - A single list `nums` containing integers. **Output**: - The second largest unique integer in the list or `None` if no such element exists. **Constraints**: - The input list will contain at most (10^6) elements. - Each element in the input list will be an integer in the range (-10^9) to (10^9). - The list may include duplicate values. **Performance Requirements**: - The function should ideally have a time complexity of (O(n)). # Example ```python assert find_second_largest([4, 2, 1, 3, 3, 1, 4]) == 3 assert find_second_largest([10, 20, 20, 10]) == 10 assert find_second_largest([1]) == None assert find_second_largest([-5, 0, -3, -4]) == -3 assert find_second_largest([]) == None ``` # Explanation The task requires identifying the second largest unique integer from a list of integers. Unique means that duplicates are not considered in determining ranking. The function must handle cases where the second largest unique integer does not exist, returning `None` appropriately.","solution":"from typing import List, Union def find_second_largest(nums: List[int]) -> Union[int, None]: Returns the second largest unique integer in the list. If there is no such element, returns None. if len(nums) < 2: return None unique_nums = set(nums) if len(unique_nums) < 2: return None unique_nums = list(unique_nums) unique_nums.sort(reverse=True) return unique_nums[1]"},{"question":"# Problem Statement A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding itself. For example, the proper divisors of 6 are 1, 2, and 3, and 1 + 2 + 3 = 6, so 6 is a perfect number. Define a function `is_perfect_number(n: int) -> bool` that checks if a given positive integer is a perfect number. Then, implement another function `count_perfect_numbers_in_range(lower: int, upper: int) -> int` that returns the total number of perfect numbers within a given range `[lower, upper]` (inclusive). Function Signatures ```python def is_perfect_number(n: int) -> bool: pass def count_perfect_numbers_in_range(lower: int, upper: int) -> int: pass ``` Input - `n`: A positive integer (1 ≤ n ≤ ( 10^6 )). - `lower`: A positive integer (1 ≤ lower ≤ ( 10^6 )). - `upper`: A positive integer (1 ≤ upper ≤ ( 10^6 )). Output - `is_perfect_number`: A boolean indicating whether the given number is a perfect number. - `count_perfect_numbers_in_range`: An integer representing the count of perfect numbers within the inclusive range `[lower, upper]`. Constraints - Ensure that the solution for counting perfect numbers in a range is efficient, even for the upper limit of ( 10^6 ). - To identify perfect numbers, proper divisors must be summed without including the number itself. Examples ```python >>> is_perfect_number(28) True >>> is_perfect_number(12) False >>> count_perfect_numbers_in_range(1, 10000) 4 >>> count_perfect_numbers_in_range(500, 800) 0 ``` # Requirements 1. Implement a helper function to check if a number is a perfect number. 2. Use the helper function in the main `count_perfect_numbers_in_range` function to efficiently count perfect numbers within a given range. 3. Ensure the implementation can handle the upper constraint limits effectively.","solution":"def is_perfect_number(n: int) -> bool: if n < 2: return False divisors_sum = 1 for i in range(2, int(n**0.5) + 1): if n % i == 0: divisors_sum += i if i != n // i: divisors_sum += n // i return divisors_sum == n def count_perfect_numbers_in_range(lower: int, upper: int) -> int: count = 0 for num in range(lower, upper + 1): if is_perfect_number(num): count += 1 return count"},{"question":"# Problem Statement Write a function `flatten_dictionary` that takes a dictionary `d` with nested dictionaries and returns a flattened dictionary where the keys are the original keys joined with dots. If a sub-dictionary is empty, represent it with an empty string in the output dictionary. Function Signature ```python def flatten_dictionary(d: dict) -> dict: ``` Input - `d` (dict): A dictionary which can contain nested dictionaries. Output - A dictionary with all nested keys flattened as dot-separated keys. Constraints - The input dictionary can have a maximum depth of 10. - The total number of key-value pairs in the dictionary will not exceed 1000. - Keys are strings consisting of lowercase English letters and digits. # Example ```python d = { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3 }, \\"f\\": {} } } print(flatten_dictionary(d)) # Output should be: # { # \\"a\\": 1, # \\"b.c\\": 2, # \\"b.d.e\\": 3, # \\"b.f\\": \\"\\" # } ``` # Additional Notes - Use a helper function if necessary to aid in traversing nested structures. - Ensure the output matches the expected format, especially with how keys are concatenated and how empty dictionaries are represented.","solution":"def flatten_dictionary(d: dict) -> dict: def flatten(subdict, parent_key=\\"\\"): items = [] for k, v in subdict.items(): new_key = f\\"{parent_key}.{k}\\" if parent_key else k if isinstance(v, dict): if v: items.extend(flatten(v, new_key).items()) else: items.append((new_key, \\"\\")) else: items.append((new_key, v)) return dict(items) return flatten(d)"},{"question":"# Problem Statement Given an integer `n`, generate all structurally unique Binary Search Trees (BSTs) that store values 1 through `n`. A BST is defined as a binary tree in which for each node, all values in the left subtree are less than the node\'s value, and all values in the right subtree are greater than the node\'s value. Write a function that returns a list of root nodes of all possible BSTs. # Function Signature ```python from typing import List def generate_unique_bsts(n: int) -> List[Node | None]: ``` # Input * `n` (int): The number of nodes in the BST, where 0 ≤ `n` ≤ 8. # Output * Returns a list of root nodes of all unique BSTs that can be made with `n` nodes. # Constraints * The structure of each BST must be unique. * You need to use the provided `Node` class to represent nodes in the binary tree. # Node Class Definition ```python class Node: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` # Example ```python trees = generate_unique_bsts(3) for tree in trees: print_preorder(tree) print() ``` Expected Preorder Traversal Output (order of trees may vary): ``` 1 2 3 1 3 2 2 1 3 3 1 2 3 2 1 ``` # Additional Information: * Implement a helper function `print_preorder(root: Node | None) -> None` that prints the preorder traversal of the tree, ensuring nodes are visited in the order: current node, left subtree, right subtree. * A separate function can be used to generate the trees, if needed, to keep the main function concise.","solution":"from typing import List class Node: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def generate_unique_bsts(n: int) -> List[Node]: if n == 0: return [None] def generate_trees(start, end): if start > end: return [None] all_trees = [] for i in range(start, end + 1): left_trees = generate_trees(start, i - 1) right_trees = generate_trees(i + 1, end) for left in left_trees: for right in right_trees: current_tree = Node(i) current_tree.left = left current_tree.right = right all_trees.append(current_tree) return all_trees return generate_trees(1, n)"},{"question":"# Maximum Rectangle Sum in a Matrix **Context**: Given a 2D matrix of integers, you are required to find the submatrix (contiguous rectangular area) within this 2D matrix which has the largest sum. This problem is critical for applications in image processing and dynamic programming optimization. **Objective**: Find the submatrix within a given matrix that has the maximum possible sum. The solution should be optimized for performance to handle larger matrices effectively. **Task**: Implement a function, `max_rectangle_sum(matrix: List[List[int]]) -> int`, which receives a 2D list of integers representing the matrix and returns an integer representing the maximum sum of any rectangular submatrix within the input matrix. # Input and Output Specifications: * **matrix**: A 2D list of integers, representing the input matrix. * **Return**: An integer representing the maximum sum of any rectangular submatrix. * **Constraints**: * The number of rows and columns in the provided matrix will be positive. * The matrix might contain positive, negative, or zero values. * Expected time complexity is O(n^3) for an n x n matrix thanks to optimized submatrix techniques. # Function Signature: ```python from typing import List def max_rectangle_sum(matrix: List[List[int]]) -> int: pass ``` # Examples: ```python >>> matrix = [ ... [1, 2, -1, -4, -20], ... [-8, -3, 4, 2, 1], ... [3, 8, 10, 1, 3], ... [-4, -1, 1, 7, -6] ... ] >>> max_rectangle_sum(matrix) 29 >>> matrix = [ ... [1, 2, 3], ... [4, 5, 6], ... [7, 8, 9] ... ] >>> max_rectangle_sum(matrix) 45 >>> matrix = [ ... [1, -2, 3], ... [-4, 5, -6], ... [7, -8, 9] ... ] >>> max_rectangle_sum(matrix) 9 >>> matrix = [ ... [-1, -2, -3], ... [-4, -5, -6], ... [-7, -8, -9] ... ] >>> max_rectangle_sum(matrix) -1 ``` # Details to Note: 1. If the matrix is empty (i.e., no rows or columns), return 0. 2. Ensure to handle matrices containing negative values, ensuring the sum calculation logic identifies the correct maximum sum even if the maximum value is a single negative element. 3. Aim for an efficient utilization of space while maintaining clarity of code and readability. # Performance Requirements: 1. Time complexity target is O(n^3) for an n x n matrix. 2. Manageable space complexity to allow performance on reasonably large matrices.","solution":"from typing import List def max_rectangle_sum(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) max_sum = float(\'-inf\') for left in range(cols): temp = [0] * rows for right in range(left, cols): for row in range(rows): temp[row] += matrix[row][right] current_max = kadane(temp) max_sum = max(max_sum, current_max) return max_sum def kadane(arr: List[int]) -> int: current_max = arr[0] global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"# Unique Value Counter with Minimum Frequency Problem Statement: You are tasked with writing a program to count the number of unique values in a list that appear at least a specified number of times. This task involves both counting occurrences and comparing those counts against a threshold. Requirements: 1. Implement a function `unique_values_with_min_frequency(lst: List[int], min_freq: int) -> int` that returns the number of unique values in `lst` that appear at least `min_freq` times. 2. The function should handle a potentially large list efficiently, ensuring performance remains acceptable as the list size scales. Function Signature: ```python def unique_values_with_min_frequency(lst: List[int], min_freq: int) -> int: pass ``` Constraints: * `lst` will contain integers in the range of -10^6 to 10^6. * `len(lst)` will be between 1 and 10^6. * `min_freq` will be a positive integer, and 1 ≤ `min_freq` ≤ len(lst). Example: ```python assert unique_values_with_min_frequency([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 2) == 3 # [2, 3, 4] appear at least twice assert unique_values_with_min_frequency([1, 2, 3, 4, 5], 1) == 5 # All values appear at least once assert unique_values_with_min_frequency([1, 1, 1, 2, 3, 4], 3) == 1 # Only [1] appears at least three times assert unique_values_with_min_frequency([], 1) == 0 # Empty list, no values to count ``` Performance Requirements: * The function should efficiently handle large lists, ideally using a single pass to count frequencies followed by a filtering pass. * Aim for a time complexity of O(n), where n is the length of `lst`.","solution":"from typing import List from collections import Counter def unique_values_with_min_frequency(lst: List[int], min_freq: int) -> int: Returns the number of unique values in the list that appear at least `min_freq` times. Parameters: - lst: List[int]: The list of integers. - min_freq: int: The minimum frequency a value must appear to be counted. Returns: - int: The number of unique values that appear at least `min_freq` times. if not lst: return 0 frequency_counter = Counter(lst) return sum(1 for count in frequency_counter.values() if count >= min_freq)"},{"question":"# Problem Description You are responsible for managing a collection of books in a library system. Each book belongs to one or more genres and has a popularity score based on the number of times it has been borrowed. You need to identify the most popular book for each genre. # Your Task Write a function that takes in a list of books, each with its title, genres, and popularity score, and returns the most popular book title for each genre. If two or more books have the same highest popularity score within the same genre, return the book that appears first in the input list. # Input Your function will take one parameter: 1. `books` (a list of dictionaries): Each dictionary represents a book and has the following keys: - `title` (string): The title of the book. - `genres` (list of strings): A list of genres to which the book belongs. - `popularity` (int): The popularity score of the book. # Output Your function should return a dictionary where each key is a genre and its value is the title of the most popular book within that genre. # Constraints * The input list will contain at most 1000 books. * Each book will have at most 5 genres. * Each genre is a string of length at most 15 characters. * The popularity score is a non-negative integer. # Example ```python books = [ {\\"title\\": \\"Book1\\", \\"genres\\": [\\"Mystery\\", \\"Thriller\\"], \\"popularity\\": 80}, {\\"title\\": \\"Book2\\", \\"genres\\": [\\"Sci-Fi\\"], \\"popularity\\": 150}, {\\"title\\": \\"Book3\\", \\"genres\\": [\\"Mystery\\"], \\"popularity\\": 90}, {\\"title\\": \\"Book4\\", \\"genres\\": [\\"Thriller\\"], \\"popularity\\": 85}, {\\"title\\": \\"Book5\\", \\"genres\\": [\\"Sci-Fi\\", \\"Mystery\\"], \\"popularity\\": 95}, ] ``` * Expected Output: `{\\"Mystery\\": \\"Book5\\", \\"Thriller\\": \\"Book4\\", \\"Sci-Fi\\": \\"Book2\\"}` # Function Signature ```python from typing import List, Dict def find_most_popular_books(books: List[Dict[str, Any]]) -> Dict[str, str]: pass # You might include the following example usage if __name__ == \\"__main__\\": books = [ {\\"title\\": \\"Book1\\", \\"genres\\": [\\"Mystery\\", \\"Thriller\\"], \\"popularity\\": 80}, {\\"title\\": \\"Book2\\", \\"genres\\": [\\"Sci-Fi\\"], \\"popularity\\": 150}, {\\"title\\": \\"Book3\\", \\"genres\\": [\\"Mystery\\"], \\"popularity\\": 90}, {\\"title\\": \\"Book4\\", \\"genres\\": [\\"Thriller\\"], \\"popularity\\": 85}, {\\"title\\": \\"Book5\\", \\"genres\\": [\\"Sci-Fi\\", \\"Mystery\\"], \\"popularity\\": 95}, ] print(find_most_popular_books(books)) # Should return {\'Mystery\': \'Book5\', \'Thriller\': \'Book4\', \'Sci-Fi\': \'Book2\'} ```","solution":"from typing import List, Dict, Any def find_most_popular_books(books: List[Dict[str, Any]]) -> Dict[str, str]: genre_to_book = {} for book in books: title = book[\'title\'] genres = book[\'genres\'] popularity = book[\'popularity\'] for genre in genres: if genre not in genre_to_book or genre_to_book[genre][\'popularity\'] < popularity: genre_to_book[genre] = book return {genre: info[\'title\'] for genre, info in genre_to_book.items()}"},{"question":"# Problem Scenario You are tasked with developing a system to simulate a simplified airline ticket booking platform. Each ticket booking request can be either a \\"purchase\\" or a \\"refund.\\" Implement a system to manage a list of tickets with unique identifiers and keep track of the number of tickets purchased and refunded. # Function Implementations Implement the following functions: 1. **add_ticket(ticket_list: List[str], ticket_id: str) -> None** - Input: A list of strings representing the current tickets and a string representing the ticket identifier to be added. - Output: None. The ticket_id should be added to the list of tickets. - Note: If the ticket_id already exists in the list, do not add it again. 2. **remove_ticket(ticket_list: List[str], ticket_id: str) -> None** - Input: A list of strings representing the current tickets and a string representing the ticket identifier to be removed. - Output: None. The ticket_id should be removed from the list of tickets. - Note: If the ticket_id does not exist in the list, do nothing. 3. **number_of_purchases(ticket_list: List[str]) -> int** - Input: A list of strings representing the current tickets. - Output: An integer representing the number of tickets purchased. 4. **number_of_refunds(initial_list: List[str], current_list: List[str]) -> int** - Input: Two lists of strings: the first representing the initial list of tickets and the second representing the current list of tickets. - Output: An integer representing the number of tickets refunded. - Note: A refund is counted when a ticket identifier is present in the initial list but not in the current list. # Constraints - The number of tickets (n) can range from 1 to (10^5). - Each ticket identifier is a unique string with a length between 1 and 20 characters. - All ticket identifiers will consist of alphanumeric characters. # Example ```python # Example Usage: initial_tickets = [\\"T123\\", \\"T456\\", \\"T789\\"] current_tickets = [\\"T123\\", \\"T789\\"] add_ticket(current_tickets, \\"T000\\") remove_ticket(current_tickets, \\"T123\\") purchases = number_of_purchases(current_tickets) refunds = number_of_refunds(initial_tickets, current_tickets) assert current_tickets == [\\"T789\\", \\"T000\\"] assert purchases == 2 assert refunds == 2 print(\\"Ticket management system is operating as expected!\\") ``` # Notes - Ensure to handle edge cases, such as operations on an empty list. - The implementation should be efficient and handle the maximum constraints smoothly.","solution":"def add_ticket(ticket_list, ticket_id): Add a ticket to the ticket list if it does not already exist. if ticket_id not in ticket_list: ticket_list.append(ticket_id) def remove_ticket(ticket_list, ticket_id): Remove a ticket from the ticket list if it exists. if ticket_id in ticket_list: ticket_list.remove(ticket_id) def number_of_purchases(ticket_list): Return the number of tickets purchased, which is the length of the current ticket list. return len(ticket_list) def number_of_refunds(initial_list, current_list): Return the number of tickets refunded, calculated as the difference between the initial list and the current list. initial_set = set(initial_list) current_set = set(current_list) refunds = initial_set - current_set return len(refunds)"},{"question":"# Question: You are given a task to develop a function that calculates the average height of a group of people represented by an array of height measurements. Additionally, you need to identify and exclude any height measurements that are outliers before calculating the average. An outlier is defined as any height measurement that is more than two standard deviations away from the mean of the heights array. Write a function `average_height(heights: List[float]) -> float` that computes the average height of a group after excluding outliers. Make sure to handle any invalid input gracefully. Your function should raise a `ValueError` with an appropriate message if the list of heights is empty or if any height in the list is not a positive number. # Input: - `heights` (List[float]): A list of float numbers representing the heights of individuals measured in centimeters (cm). Each number must be positive and the list must not be empty. # Output: A single float representing the average height of the group after excluding outliers, measured in centimeters (cm). # Constraints: - Each height in the list should be a realistic positive number. - Perform input validations to prevent invalid or impossible calculations. # Examples: 1. For an array of heights `[160, 165, 170, 175, 180, 185, 600]`: ```python average_height([160, 165, 170, 175, 180, 185, 600]) ``` Should return approximately 172.5 cm after excluding 600 cm as an outlier. 2. For an array of heights `[150, 152, 149, 153, 151]`: ```python average_height([150, 152, 149, 153, 151]) ``` Should return exactly 151.0 cm, as there are no outliers. # Additional Notes: - Use appropriate mathematical functions and modules to handle statistical calculations. - Implement robust error checking for the input values. - Include test cases to verify the correctness of your implementation.","solution":"from typing import List import statistics def average_height(heights: List[float]) -> float: Calculate the average height after excluding outliers. if not heights: raise ValueError(\\"Heights list must not be empty.\\") if any(h <= 0 for h in heights): raise ValueError(\\"All height measurements must be positive numbers.\\") mean_height = statistics.mean(heights) stdev_height = statistics.stdev(heights) lower_bound = mean_height - 2 * stdev_height upper_bound = mean_height + 2 * stdev_height filtered_heights = [h for h in heights if lower_bound <= h <= upper_bound] if not filtered_heights: raise ValueError(\\"No heights remain after excluding outliers.\\") return round(statistics.mean(filtered_heights), 1)"},{"question":"# Problem Statement You are building a financial application that helps users track their daily expenses. One of the features the application offers is to analyze spending patterns over a given period and provide daily average spending for specific categories. Your task is to write a function that calculates daily average spending for each category over a specified period. # Requirements 1. Implement the function `get_daily_averages(records: list[tuple[str, str, float]], start_date: str, end_date: str) -> dict[str, float]`. 2. Each `record` is a tuple containing three elements: - The date of the transaction in the format `\'YYYY-MM-DD\'`. - The category of spending as a string (e.g., `\'groceries\'`, `\'entertainment\'`). - The amount spent as a floating-point number. 3. The `start_date` and `end_date` define the period over which to calculate averages, inclusive. 4. Compute the average daily spending for each category only for the transactions within the specified date range. 5. Return a dictionary where keys are the category names and values are the average daily spending for that category. # Input Format * A list of tuples where each tuple contains: - A string representing the date in `\'YYYY-MM-DD\'` format. - A string representing the spending category. - A float representing the amount spent. * Two strings for the start and end dates in the format `\'YYYY-MM-DD\'`. # Output Format * A dictionary with category names as keys and their respective average daily spending as values. The values should be rounded to two decimal places. # Constraints * Assume there will always be at least one transaction in the given date range. * The `start_date` will always be less than or equal to `end_date`. * The date strings will always be valid and in the correct `\'YYYY-MM-DD\'` format. * Date range can span up to 31 days. # Example ```python # Input records = [ (\\"2023-01-01\\", \\"groceries\\", 50.0), (\\"2023-01-01\\", \\"entertainment\\", 20.0), (\\"2023-01-02\\", \\"groceries\\", 40.0), (\\"2023-01-03\\", \\"groceries\\", 30.0), (\\"2023-01-03\\", \\"entertainment\\", 10.0), (\\"2023-01-03\\", \\"transport\\", 15.0) ] start_date = \\"2023-01-01\\" end_date = \\"2023-01-03\\" # Output { \\"groceries\\": 40.0, # (50 + 40 + 30) / 3 days \\"entertainment\\": 10.0, # (20 + 0 + 10) / 3 days \\"transport\\": 5.0 # (0 + 0 + 15) / 3 days } Implement the function `get_daily_averages` that meets the above requirements. ```","solution":"from datetime import datetime, timedelta from collections import defaultdict def get_daily_averages(records, start_date, end_date): Calculate daily average spending for each category over a specified period. Parameters: - records: a list of tuples (date, category, amount) - start_date: a string representing the start date in \'YYYY-MM-DD\' format - end_date: a string representing the end date in \'YYYY-MM-DD\' format Returns: A dictionary with category names as keys and average daily spending as values. start_date = datetime.strptime(start_date, \'%Y-%m-%d\') end_date = datetime.strptime(end_date, \'%Y-%m-%d\') # Calculate the number of days in the period (inclusive) days_count = (end_date - start_date).days + 1 category_totals = defaultdict(float) category_days = defaultdict(set) for record in records: date_str, category, amount = record date = datetime.strptime(date_str, \'%Y-%m-%d\') # Consider only records within the date range if start_date <= date <= end_date: category_totals[category] += amount category_days[category].add(date) # Calculate the daily averages category_averages = {} for category in category_totals: num_days = len(category_days[category]) if num_days > 0: category_averages[category] = round(category_totals[category] / days_count, 2) return category_averages"},{"question":"# String Permutation Check You are tasked with implementing a function to determine if two strings are permutations of each other. A permutation is a rearrangement of the characters in the string. The function should check if one string can be rearranged to become the other string. Problem Statement Implement the function `are_permutations` to check if two given strings are permutations of each other. - **are_permutations(str1: str, str2: str) -> bool**: - **Input**: - `str1`: A string containing the first word or phrase. - `str2`: A string containing the second word or phrase. - **Output**: Returns `True` if `str1` and `str2` are permutations of each other, otherwise returns `False`. Constraints * Both strings `str1` and `str2` contain only ASCII characters. * The strings `str1` and `str2` can include spaces, punctuation, and any characters. * Case sensitivity matters, that is \\"abc\\" is different from \\"ABC\\". Example ```python assert are_permutations(\'listen\', \'silent\') == True assert are_permutations(\'triangle\', \'integral\') == True assert are_permutations(\'apple\', \'pale\') == False assert are_permutations(\'Dormitory\', \'dirty room\') == False ``` Function Definition ```python def are_permutations(str1: str, str2: str) -> bool: pass ``` # Requirements - Use an appropriate algorithm to check if the two strings are permutations of each other. - Ensure your function handles edge cases as specified in the analysis. - Efficiency is important; aim for O(n) time complexity, where n is the length of the strings.","solution":"def are_permutations(str1: str, str2: str) -> bool: Returns True if str1 and str2 are permutations of each other, else False. # If the lengths are not the same, they cannot be permutations of each other if len(str1) != len(str2): return False # Create dictionaries to count the frequency of characters in both strings char_count1 = {} char_count2 = {} for char in str1: char_count1[char] = char_count1.get(char, 0) + 1 for char in str2: char_count2[char] = char_count2.get(char, 0) + 1 # Compare the two dictionaries return char_count1 == char_count2"},{"question":"# Question: Sorting K-Sorted Arrays You are provided with an array in which each element is at most `k` positions away from its sorted position. Your task is to write a function that sorts this nearly sorted (or k-sorted) array efficiently. There are multiple ways to achieve this, but using a min-heap is particularly efficient given the properties of a nearly sorted array. # Input * A list `arr` of integers representing the nearly sorted array. * An integer `k` where 0 <= k < len(arr), indicating that any element in the array is at most `k` positions away from its sorted position. # Output * A sorted version of the input list. # Example ```python def sort_k_sorted_array(arr, k): # Your code here # Example Usage arr = [3, 2, 1, 5, 4, 7, 6, 5] k = 2 print(sort_k_sorted_array(arr, k)) # Output: [1, 2, 3, 4, 5, 5, 6, 7] arr = [10, 9, 8, 7, 4, 70, 60, 50] k = 4 print(sort_k_sorted_array(arr, k)) # Output: [4, 7, 8, 9, 10, 50, 60, 70] ``` # Constraints * The function should maintain a balance between efficiency and readability. * Assume that the input `arr` contains at least one element and `k` is a valid integer within the constraints. # Notes When implementing this function, consider choosing a data structure that takes advantage of the properties of a k-sorted array to optimize for time complexity, such as a min-heap, which allows for efficient insertion and extraction of elements. Explanation of Example In the first example array `[3, 2, 1, 5, 4, 7, 6, 5]` with `k = 2`, the element `3` at index 0 can be at index 1 or 2 at max in the sorted array, and similar adjustments apply for the other elements, resulting in a final sorted array `[1, 2, 3, 4, 5, 5, 6, 7]`. In the second example, the array `[10, 9, 8, 7, 4, 70, 60, 50]` with `k = 4` results in a final sorted array `[4, 7, 8, 9, 10, 50, 60, 70]`.","solution":"import heapq def sort_k_sorted_array(arr, k): Sorts a k-sorted array where each element is at most k positions away from its sorted position. Parameters: arr (list of int): The nearly sorted array k (int): The maximum distance an element is away from its sorted position Returns: list of int: The sorted array min_heap = [] result = [] # Build the initial min heap from the first k+1 elements for i in range(min(k + 1, len(arr))): heapq.heappush(min_heap, arr[i]) # Iterate over the remaining elements for i in range(k + 1, len(arr)): heapq.heappush(min_heap, arr[i]) smallest = heapq.heappop(min_heap) result.append(smallest) # Extract the remaining elements from the heap while min_heap: smallest = heapq.heappop(min_heap) result.append(smallest) return result"},{"question":"# Merge Two Sorted Linked Lists Problem Statement You are given two linked lists that are sorted in non-decreasing order. Your task is to merge the two linked lists into one sorted linked list and return the head of the merged list. Function Signature ```python def merge_two_sorted_lists(l1: ListNode, l2: ListNode) -> ListNode: ``` Input - `l1`: The head of the first sorted linked list. The `ListNode` class has the following structure: ```python class ListNode: def __init__(self, val: int = 0, next: ListNode = None): self.val = val self.next = next ``` - `l2`: The head of the second sorted linked list. It has the same `ListNode` class structure as `l1`. Output - Return the head of the merged linked list. Example ```python # Example 1: l1 = ListNode(1, ListNode(2, ListNode(4))) l2 = ListNode(1, ListNode(3, ListNode(4))) # Result: 1 -> 1 -> 2 -> 3 -> 4 -> 4 # Example 2: l1 = ListNode(2, ListNode(6)) l2 = ListNode(1, ListNode(5)) # Result: 1 -> 2 -> 5 -> 6 # Example 3: l1 = None l2 = ListNode(0) # Result: 0 # Example 4: l1 = None l2 = None # Result: None ``` Constraints - The number of nodes in both lists is in the range [0, 50]. - The values of the nodes are in the range [-100, 100]. Additional Information - This problem can be solved both iteratively and recursively. - Consider edge cases such as empty linked lists or lists with only one node. Hints - You might find it helpful to use a dummy node to simplify the merging process. - Start by comparing the nodes at the head of both lists and progressively move to the next nodes. - Ensure that the final merged list maintains all elements in sorted order.","solution":"class ListNode: def __init__(self, val: int = 0, next: \'ListNode\' = None): self.val = val self.next = next def merge_two_sorted_lists(l1: ListNode, l2: ListNode) -> ListNode: # Initialize a prehead node to help in merging process. prehead = ListNode(-1) # Maintain a reference to the current node to build the new linked list. current = prehead # Traverse both lists while both are non-empty. while l1 and l2: if l1.val <= l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # If either list is non-empty, append the remaining elements. current.next = l1 if l1 else l2 # The prehead\'s next node will be the head of the merged list. return prehead.next"},{"question":"# Matrix Diagonal Traversal You are tasked with implementing a function to traverse the diagonals of a given matrix. The traversal should return the elements in a list such that all elements of the first diagonal are followed by elements of the second diagonal, and so on. Each diagonal is accessed in a top-left to bottom-right manner. Input and Output Format: - **Input**: - `matrix` (List[List[int]]): A non-empty 2D list of integers representing the matrix. - **Output**: - A list of integers, representing the elements of the matrix, collected in a diagonal traversal pattern. Constraints: - The matrix will have at least 1 row and 1 column. - The matrix is rectangular, i.e., not necessarily square (the number of rows and columns may differ). Function Signature: ```python def diagonal_traversal(matrix: List[List[int]]) -> List[int]: pass ``` Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] assert diagonal_traversal(matrix) == [1, 2, 4, 3, 5, 7, 6, 8, 9] matrix = [ [10, 20], [30, 40], [50, 60] ] assert diagonal_traversal(matrix) == [10, 20, 30, 40, 50, 60] ``` Requirements: 1. You shall not use any external libraries. 2. Your solution should run efficiently for reasonably sized matrices. 3. Handle both rectangular and square matrices effectively. This problem tests your ability to work with matrix traversal and to manage algorithmic complexity efficiently. Good luck! Apply your knowledge of iteration and indexing to solve this challenge.","solution":"from typing import List def diagonal_traversal(matrix: List[List[int]]) -> List[int]: Returns the elements of the matrix in a diagonal traversal order. if not matrix: return [] rows, cols = len(matrix), len(matrix[0]) result = [] for d in range(rows + cols - 1): intermediate = [] r = 0 if d < cols else d - cols + 1 c = d if d < cols else cols - 1 while r < rows and c >= 0: intermediate.append(matrix[r][c]) r += 1 c -= 1 result.extend(intermediate) return result"},{"question":"# Implement a Custom JSON Parser You are tasked with creating a custom JSON parser for a specific subset of JSON data. The parser should be able to handle JSON objects that include strings, numbers, booleans, and null values. Your task is to implement two functions: `parse_json` and `stringify_json`. # Task 1. **parse_json(data: str) -> dict** - Input: A `str` containing the JSON data to be parsed. - Output: A `dict` representing the parsed JSON object. - Functionality: - The input string should strictly follow JSON format rules for objects. - Keys are strings, and values can be strings, numbers, booleans, or null. - The function should handle nested objects. - If the input string is invalid, the function should raise a `ValueError`. 2. **stringify_json(data: dict) -> str** - Input: A `dict` representing the JSON object to be converted to a JSON string. - Output: A `str` containing the JSON representation of the input dictionary. - Functionality: - The output string should follow JSON format rules for objects. - Ensure proper usage of quotes for keys and string values, and no quotes for numbers, booleans, or null. - Handle nested objects in the input dictionary. - If the input dictionary contains any non-JSON types, the function should raise a `TypeError`. # Example Usage ```python >>> parse_json(\'{\\"name\\": \\"John\\", \\"age\\": 30, \\"is_student\\": false, \\"courses\\": null}\') {\'name\': \'John\', \'age\': 30, \'is_student\': False, \'courses\': None} >>> stringify_json({\'name\': \'John\', \'age\': 30, \'is_student\': False, \'courses\': None}) \'{\\"name\\": \\"John\\", \\"age\\": 30, \\"is_student\\": false, \\"courses\\": null}\' ``` # Additional Requirements 1. **Error Handling**: - The `parse_json` function should raise a `ValueError` if the input string is not a valid JSON representation. - The `stringify_json` function should raise a `TypeError` if the input dictionary contains values that are not strings, numbers, booleans, null, or other dictionaries. 2. **Edge Cases**: - Ensure that an empty JSON object (e.g., `{}`) is correctly handled by both functions. - Ensure that deeply nested objects and various data types within the JSON object are handled correctly by both functions. Implement these two functions with the described requirements and error handling.","solution":"import json def parse_json(data: str) -> dict: Parses a JSON string and returns a dictionary. :param data: JSON string to be parsed. :return: Dictionary representation of parsed JSON. :raises ValueError: If the input string is not a valid JSON. try: return json.loads(data) except json.JSONDecodeError: raise ValueError(\\"Invalid JSON string\\") def stringify_json(data: dict) -> str: Converts a dictionary into a JSON string. :param data: Dictionary to convert to JSON string. :return: JSON string representation of the dictionary. :raises TypeError: If input dictionary contains non-JSON-compatible types. try: return json.dumps(data) except TypeError: raise TypeError(\\"Input contains non-JSON-compatible types\\")"},{"question":"# Coding Assessment Question You are tasked with implementing a data structure that efficiently tracks the insertion order of numeric elements and allows access to the k-th most recently added element. Your data structure should support insertion of new elements, deletion of specific elements, and retrieval of the k-th most recently inserted element. # Function Signature ```python class RecentList: def __init__(self): Initialize your data structure here. def add(self, x: int) -> None: Add an integer x to the RecentList. def remove(self, x: int) -> bool: Remove an integer x from the RecentList. Returns True if the element was found and removed, False otherwise. def get_kth_recent(self, k: int) -> int: Retrieve the k-th most recent inserted element. Throws an IndexError if k is out of bounds. ``` # Input - `x`: An integer to be added or removed from the RecentList. - `k`: An integer indicating the order of retrieval of the element, where 1 returns the most recently added element, 2 the second most recent, and so on. # Output - The `add` method does not return anything. - The `remove` method returns a boolean indicating whether the specified element was successfully removed. - The `get_kth_recent` method returns the k-th most recent integer if it exists, otherwise raises an `IndexError`. # Constraints - Multiple elements can be added in any order. - It is possible to remove elements that did not exist in the list, in which case `remove` should return `False`. - The `get_kth_recent` method should retrieve elements based on their insertion order, not their value. - The data structure should handle up to 10^5 operations. # Example ```python recent_list = RecentList() recent_list.add(1) recent_list.add(2) recent_list.add(3) print(recent_list.get_kth_recent(1)) # Output: 3 print(recent_list.get_kth_recent(2)) # Output: 2 print(recent_list.remove(2)) # Output: True print(recent_list.get_kth_recent(2)) # Output: 1 print(recent_list.remove(2)) # Output: False ``` # Additional Information - You may assume that all input values are valid integers. - Ensure the data structure manages memory efficiently, especially when dealing with a large number of operations. - Consider the performance of each method to maintain the real-time constraints of up to 10^5 operations.","solution":"from collections import deque class RecentList: def __init__(self): Initialize your data structure here. self.recent_list = deque() self.elements = set() def add(self, x: int) -> None: Add an integer x to the RecentList. self.recent_list.append(x) self.elements.add(x) def remove(self, x: int) -> bool: Remove an integer x from the RecentList. Returns True if the element was found and removed, False otherwise. if x in self.elements: self.recent_list.remove(x) self.elements.remove(x) return True else: return False def get_kth_recent(self, k: int) -> int: Retrieve the k-th most recent inserted element. Throws an IndexError if k is out of bounds. if k <= 0 or k > len(self.recent_list): raise IndexError(\\"Index out of bounds\\") return self.recent_list[-k]"},{"question":"# Context Bob is responsible for managing a social network platform, and he wants to implement a feature that suggests new friends to users based on mutual friends. The idea is to recommend users who have the highest number of mutual friends with the given user. If multiple users have the same number of mutual friends, they should all be recommended. # Task Write a function `suggest_friends` that accepts an undirected graph represented as an adjacency list and a user identifier, and returns a list of suggested friends based on mutual friends count. The function should suggest users who are not already friends with the given user and have the highest number of mutual friends with them. # Input - The input graph is represented as a dictionary where keys are user identifiers and values are lists of adjacent nodes (friends). - The graph is guaranteed to be connected and undirected. - The input also includes a user identifier for whom the friend suggestions will be made. # Output - A list of integers representing the suggested friends for the given user, sorted in ascending order. # Example ```python graph = { 1: [2, 3, 4], 2: [1, 4, 5], 3: [1, 4, 6], 4: [1, 2, 3], 5: [2], 6: [3] } suggest_friends(graph, 1) ``` Expected Output: ``` [5, 6] ``` # Constraints - The graph has up to 1000 vertices and up to 5000 edges. - Each user identifier is a unique integer. # Performance Requirements - Optimize to handle large inputs efficiently. - Avoid excessive memory usage.","solution":"def suggest_friends(graph, user_id): Suggest friends for the given user based on mutual friends count. Args: graph (dict): An undirected graph represented as an adjacency list. user_id (int): The user identifier for whom the friend suggestions will be made. Returns: list: A list of suggested friends, sorted in ascending order. user_friends = set(graph[user_id]) mutual_friends_count = {} for friend in user_friends: for mutual_friend in graph[friend]: if mutual_friend != user_id and mutual_friend not in user_friends: if mutual_friend not in mutual_friends_count: mutual_friends_count[mutual_friend] = 0 mutual_friends_count[mutual_friend] += 1 if not mutual_friends_count: return [] max_mutual_friends = max(mutual_friends_count.values()) suggested_friends = [user for user, count in mutual_friends_count.items() if count == max_mutual_friends] return sorted(suggested_friends)"},{"question":"# **Find Peak Element in a 2D Matrix** **Scenario:** You are given a 2D matrix `mat` where every row is sorted in ascending order from left to right, but the matrix is not necessarily sorted column-wise. Your task is to find a peak element in the matrix. An element is considered a peak if it is greater than or equal to its four possible neighbors (above, below, left, and right). For edge elements, only consider the valid neighbors. **Task:** Implement the `find_peak_element` function that returns the value of any peak element found in the matrix. **Specifications:** # **Function Signature:** ```python def find_peak_element(mat: list[list[int]]) -> int: ``` # **Input:** - `mat`: A 2D list of integers representing the matrix. (1 ≤ len(mat), len(mat[0]) ≤ 500) # **Output:** - An integer representing the value of a peak element in the matrix. # **Constraints:** - You can assume there is always at least one peak element in the matrix. - The matrix dimensions are such that it fits into the memory constraints typically available for competitive programming. **Example:** ```python >>> find_peak_element([[10, 20, 15], [21, 30, 14], [7, 16, 32]]) 30 >>> find_peak_element([[1, 4, 3], [6, 5, 2], [7, 8, 9]]) 9 >>> find_peak_element([[ 1, 2, 3, 6], [ 5, 6, 7, 8], [ 9, 12,11,10], [13, 14,15,16]]) 16 ``` *Note: In the first example, the number `30` is a peak element as it is greater than all its neighbors `21`, `20`, and `15`.* **Hints:** - Consider a divide-and-conquer approach. - Investigate the mid column and find the global maximum in this column. - Use the global maximum to determine the peak by comparing it to its neighbors and adjusting the search space accordingly.","solution":"def find_peak_element(mat): def find_max_in_column(matrix, mid_col): max_row = 0 max_val = matrix[0][mid_col] for row in range(len(matrix)): if matrix[row][mid_col] > max_val: max_val = matrix[row][mid_col] max_row = row return max_row, max_val def find_peak_recursive(matrix, left_col, right_col): mid_col = (left_col + right_col) // 2 max_row, max_val = find_max_in_column(matrix, mid_col) # Compare the max in the mid column with its neighbors if (mid_col > 0 and matrix[max_row][mid_col] < matrix[max_row][mid_col - 1]): # Peak lies to the left of mid_col return find_peak_recursive(matrix, left_col, mid_col - 1) elif (mid_col < len(matrix[0]) - 1 and matrix[max_row][mid_col] < matrix[max_row][mid_col + 1]): # Peak lies to the right of mid_col return find_peak_recursive(matrix, mid_col + 1, right_col) else: # Mid column max is a peak return matrix[max_row][mid_col] return find_peak_recursive(mat, 0, len(mat[0]) - 1)"},{"question":"Implementing a Word Frequency Counter with Exclusions In this exercise, you will create functions to count the frequency of words in a provided text, excluding specified common words (also known as stopwords). Your implementation should be case-insensitive and should ignore punctuation. # Function to Implement 1. **clean_text**: This function should transform the input text by removing punctuation and converting all letters to lowercase. 2. **count_word_frequencies**: Count the frequency of each word in the cleaned text, excluding the stopwords. 3. **most_common_word**: Find the most frequently occurring word in the text that is not excluded by the stopwords. # Input and Output * **Input**: - A text string that may contain sentences with punctuation and mixed cases. - A list of stopwords which should be excluded from the word frequency count. * **Output**: - For **clean_text**: A cleaned version of the text (lowercase, no punctuation). - For **count_word_frequencies**: A dictionary with words as keys and their frequencies as values, excluding specified stopwords. - For **most_common_word**: The most common word in the text that is not in the stopwords list. # Constraints * The text length will be at most 10^6 characters. * The number of stopwords will be at most 10^3. * Each word (excluding punctuation) in the text is separated by whitespace and is at most 100 characters long. # Example ```python def clean_text(text: str) -> str: pass def count_word_frequencies(cleaned_text: str, stopwords: list) -> dict: pass def most_common_word(frequencies: dict) -> str: pass # Example usage: text = \\"Hello, world! Hello everyone. This is a test, isn\'t it?\\" stopwords = [\\"is\\", \\"a\\", \\"it\\"] cleaned = clean_text(text) print(cleaned) # Example Output: \\"hello world hello everyone this is a test isnt it\\" frequencies = count_word_frequencies(cleaned, stopwords) print(frequencies) # Example Output: {\'hello\': 2, \'world\': 1, \'everyone\': 1, \'this\': 1, \'test\': 1, \'isnt\': 1} common_word = most_common_word(frequencies) print(common_word) # Example Output: \\"hello\\" ``` # Requirements 1. Your **clean_text** function must handle punctuation and case conversion accurately. 2. Your **count_word_frequencies** function should correctly exclude stopwords from the count. 3. The **most_common_word** function should efficiently find the word with the highest frequency that is not a stopword.","solution":"import string from collections import Counter def clean_text(text): This function transforms the input text by removing punctuation and converting all letters to lowercase. translator = str.maketrans(\'\', \'\', string.punctuation) return text.translate(translator).lower() def count_word_frequencies(cleaned_text, stopwords): This function counts the frequency of each word in the cleaned text, excluding the stopwords. words = cleaned_text.split() filtered_words = [word for word in words if word not in stopwords] return dict(Counter(filtered_words)) def most_common_word(frequencies): This function finds the most frequently occurring word in the text that is not excluded by the stopwords. return max(frequencies.items(), key=lambda x: x[1])[0]"},{"question":"# Maze Solver You are given a maze represented by a grid, where each cell can either be a wall (`\'W\'`) or an open path (`\'O\'`). You need to determine whether there is a path from the start cell (top-left corner at `(0,0)`) to the end cell (bottom-right corner at `(n-1,m-1)`). **Task**: Implement a function that takes the maze grid as input and returns `True` if there is a path from the start cell to the end cell, or `False` otherwise. Function Signature ```python def is_path(maze: List[List[str]]) -> bool: pass ``` Implementation Requirements: 1. Utilize Breadth-First Search (BFS) or Depth-First Search (DFS) to traverse the maze. 2. Ensure to mark visited cells to avoid cycles and redundant checks. 3. Consider edge cases such as the start or end cell being a wall. Input - A 2D list of strings representing the maze grid. Output - A boolean value indicating whether there is a path from the top-left to the bottom-right corner. Example ```python >>> maze = [ ... [\'O\', \'O\', \'W\', \'O\'], ... [\'O\', \'W\', \'O\', \'O\'], ... [\'O\', \'O\', \'O\', \'W\'], ... [\'W\', \'W\', \'O\', \'O\'] ... ] >>> is_path(maze) True >>> maze = [ ... [\'O\', \'W\', \'O\'], ... [\'W\', \'W\', \'O\'], ... [\'O\', \'O\', \'O\'] ... ] >>> is_path(maze) False ``` Constraints - The maze will always be non-empty with dimensions n × m (1 ≤ n, m ≤ 100). - Cells are either \'W\' for walls or \'O\' for open paths. - You can only move up, down, left, or right. Note - Ensure that your solution is efficient and handles large grids within a reasonable time frame. - Properly handle the edge cases where the grid might be a single cell or completely blocked by walls.","solution":"from collections import deque from typing import List def is_path(maze: List[List[str]]) -> bool: This function checks if there is a path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) in a given maze represented by a grid where \'W\' represents walls and \'O\' represents open paths. It uses Breadth-First Search (BFS) to traverse the maze. if not maze or maze[0][0] == \'W\' or maze[-1][-1] == \'W\': return False rows, cols = len(maze), len(maze[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up # Queue for BFS queue = deque([(0, 0)]) # Set of visited cells visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() # Check if we\'ve reached the bottom-right corner if (x, y) == (rows - 1, cols - 1): return True # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == \'O\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False"},{"question":"# Scenario You are working on a system that manages a warehouse\'s inventory. Each item has a unique SKU (Stock Keeping Unit) number, a quantity in stock, and a restocking threshold. When an item\'s stock falls below its threshold, it needs to be reordered to ensure adequate supply. # Task Implement the function `check_reorder_items(items: List[Dict[str, Any]]) -> List[str]` in Python, which takes a list of items in the warehouse and returns a list of SKUs that need to be reordered. # Requirements 1. **Input**: - `items`: A list of dictionaries where each dictionary represents an item with the following keys: - `\\"sku\\"`: (str) The unique Stock Keeping Unit identifier. - `\\"quantity\\"`: (int) The current quantity in stock. - `\\"threshold\\"`: (int) The restocking threshold. 2. **Output**: - A list of SKUs (str) that need to be reordered, sorted in ascending order. # Input/Output Format - **Input**: `items = [{\\"sku\\": \\"A123\\", \\"quantity\\": 5, \\"threshold\\": 10}, {\\"sku\\": \\"B456\\", \\"quantity\\": 15, \\"threshold\\": 5}, {\\"sku\\": \\"C789\\", \\"quantity\\": 3, \\"threshold\\": 3}, {\\"sku\\": \\"D012\\", \\"quantity\\": 7, \\"threshold\\": 8}]` - **Output**: `[\\"A123\\", \\"D012\\"]` # Constraints 1. Each item dictionary contains the keys `\\"sku\\"`, `\\"quantity\\"`, and `\\"threshold\\"` with appropriate types (string for `\\"sku\\"` and integers for `\\"quantity\\"` and `\\"threshold\\"`). 2. The `\\"quantity\\"` and `\\"threshold\\"` values are non-negative integers. 3. The list of items will have at most 10,000 entries. 4. An item needs to be reordered if its `quantity` is less than its `threshold`. # Performance Requirements - Your solution should efficiently handle up to 10,000 items ensuring the reordering check and sorting is performed within a reasonable timeframe. # Example ```python >>> check_reorder_items([{\\"sku\\": \\"A123\\", \\"quantity\\": 5, \\"threshold\\": 10}, {\\"sku\\": \\"B456\\", \\"quantity\\": 15, \\"threshold\\": 5}, {\\"sku\\": \\"C789\\", \\"quantity\\": 3, \\"threshold\\": 3}, {\\"sku\\": \\"D012\\", \\"quantity\\": 7, \\"threshold\\": 8}]) [\\"A123\\", \\"D012\\"] >>> check_reorder_items([{\\"sku\\": \\"X001\\", \\"quantity\\": 2, \\"threshold\\": 5}, {\\"sku\\": \\"Y002\\", \\"quantity\\": 0, \\"threshold\\": 1}]) [\\"X001\\", \\"Y002\\"] >>> check_reorder_items([{\\"sku\\": \\"T098\\", \\"quantity\\": 12, \\"threshold\\": 5}, {\\"sku\\": \\"U123\\", \\"quantity\\": 10, \\"threshold\\": 10}]) [\\"U123\\"] ``` # Notes - Ensure that the list of SKUs returned is sorted in ascending order. - Handle edge cases such as an empty list of items gracefully. - No two items will have the same SKU. Implement your `check_reorder_items` function to ensure it meets these requirements and constraints.","solution":"from typing import List, Dict, Any def check_reorder_items(items: List[Dict[str, Any]]) -> List[str]: Given a list of items, this function returns a list of SKUs that need to be reordered. An item needs to be reordered if its quantity is less than its threshold. The returned list of SKUs is sorted in ascending order. reorder_list = [item[\\"sku\\"] for item in items if item[\\"quantity\\"] < item[\\"threshold\\"]] return sorted(reorder_list)"},{"question":"# Coding Assessment Question **Problem Statement:** You are provided with an undirected graph implementation in Python, which includes methods for adding edges and performing a depth-first search (DFS). Your task is to extend the given implementation to include additional functionality for detecting cycles and finding the shortest path between two nodes using Breadth-First Search (BFS). Requirements: 1. **Cycle Detection**: Implement a function `detect_cycle` that determines if the undirected graph contains any cycles. The function should return a boolean value indicating the presence of a cycle. 2. **Shortest Path**: Implement a function `shortest_path` that finds the shortest path between two nodes in the graph using BFS. The function should return a list of nodes representing the shortest path from the start node to the end node. If no path exists, return an empty list. Input: - A list of tuples where each tuple contains two integers representing an edge between two nodes. - Two integers representing the start and end nodes for the shortest path. Output: - A boolean value indicating whether a cycle is present in the graph. - A list of nodes representing the shortest path from the start node to the end node. Constraints: - The input list will contain at most 10^4 edges. - The nodes are labeled with unique integers between 1 and 10^3. Function Signature: ```python class Graph: ... def detect_cycle(graph: Graph) -> bool: ... def shortest_path(graph: Graph, start_node: int, end_node: int) -> list[int]: ... # Example Usage: # edges = [(1, 2), (2, 3), (3, 4), (4, 2)] # graph = Graph() # for u, v in edges: # graph.add_edge(u, v) # has_cycle = detect_cycle(graph) # print(has_cycle) # Expected output: True # path = shortest_path(graph, 1, 4) # print(path) # Expected output: [1, 2, 3, 4] ``` --- **Example:** ```python class Graph: def __init__(self): self.graph = defaultdict(list) def add_edge(self, u: int, v: int): self.graph[u].append(v) self.graph[v].append(u) def detect_cycle(graph: Graph) -> bool: def dfs(v, parent): visited.add(v) for neighbor in graph.graph[v]: if neighbor not in visited: if dfs(neighbor, v): return True elif neighbor != parent: return True return False visited = set() for node in graph.graph: if node not in visited: if dfs(node, -1): return True return False def shortest_path(graph: Graph, start_node: int, end_node: int) -> list[int]: from collections import deque queue = deque([(start_node, [start_node])]) visited = set() while queue: node, path = queue.popleft() if node == end_node: return path if node not in visited: visited.add(node) for neighbor in graph.graph[node]: if neighbor not in visited: queue.append((neighbor, path + [neighbor])) return [] # Test edges = [(1, 2), (2, 3), (3, 4), (4, 2)] graph = Graph() for u, v in edges: graph.add_edge(u, v) has_cycle = detect_cycle(graph) print(has_cycle) # Expected output: True path = shortest_path(graph, 1, 4) print(path) # Expected output: [1, 2, 3, 4] ``` You are expected to design the `detect_cycle` and `shortest_path` methods to address the cycle detection and pathfinding challenges in the graph effectively.","solution":"from collections import deque, defaultdict class Graph: def __init__(self): self.graph = defaultdict(list) def add_edge(self, u: int, v: int): self.graph[u].append(v) self.graph[v].append(u) def detect_cycle(graph: Graph) -> bool: def dfs(node, parent): visited.add(node) for neighbor in graph.graph[node]: if neighbor not in visited: if dfs(neighbor, node): return True elif neighbor != parent: return True return False visited = set() for node in graph.graph: if node not in visited: if dfs(node, -1): return True return False def shortest_path(graph: Graph, start_node: int, end_node: int) -> list[int]: queue = deque([(start_node, [start_node])]) visited = set() while queue: node, path = queue.popleft() if node == end_node: return path if node not in visited: visited.add(node) for neighbor in graph.graph[node]: if neighbor not in visited: queue.append((neighbor, path + [neighbor])) return []"},{"question":"# Coding Assessment Question: Word Ladder Transformation Objective: Implement a function that determines the minimum number of steps required to transform one word into another by changing one letter at a time, such that each intermediate word is a valid word in a given dictionary. Detailed Requirements: 1. **Function Signature**: `def word_ladder_length(start: str, end: str, word_dict: set) -> int:` 2. **Input**: - `start`: A string representing the starting word. - `end`: A string representing the ending word. - `word_dict`: A set of strings representing the dictionary of valid words. 3. **Output**: An integer representing the minimum number of transformation steps required to change the start word into the end word. If the transformation is not possible, return -1. 4. **Constraints**: - All words (start, end, and words in the dictionary) are lowercase alphabetic strings. - Both `start` and `end` words are guaranteed to be of the same length. - The function should handle cases where no possible transformations exist. - Ensure the solution is efficient, with an appropriate algorithm for handling potentially large word dictionaries. Performance: - Aim for a time complexity within O(n * m^2) and space complexity within O(n), where `n` is the number of words in the dictionary and `m` is the length of each word. Example: ```python assert word_ladder_length(\\"hit\\", \\"cog\\", {\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"}) == 5 assert word_ladder_length(\\"hit\\", \\"cog\\", {\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\"}) == -1 assert word_ladder_length(\\"hit\\", \\"hot\\", {\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\"}) == 2 assert word_ladder_length(\\"angel\\", \\"devil\\", {\\"angel\\", \\"angle\\", \\"anglo\\", \\"devel\\", \\"devil\\"}) == -1 ``` Scenario: This function is particularly useful in word games and puzzles where you need to find the shortest path of transformations between words, ensuring each step forms a valid intermediate word from the dictionary. This problem is a classic example of a graph traversal where words are nodes and edges represent one-letter transformations.","solution":"from collections import deque def word_ladder_length(start: str, end: str, word_dict: set) -> int: if end not in word_dict: return -1 word_dict.add(end) queue = deque([(start, 1)]) alphabet = \'abcdefghijklmnopqrstuvwxyz\' while queue: current_word, steps = queue.popleft() if current_word == end: return steps for i in range(len(current_word)): prefix, suffix = current_word[:i], current_word[i+1:] for char in alphabet: if char != current_word[i]: next_word = prefix + char + suffix if next_word in word_dict: queue.append((next_word, steps + 1)) word_dict.remove(next_word) return -1"},{"question":"# Determining Minimal Strictly Increasing Subsequence Problem Statement Given an array of integers, you need to find the length of the minimal strictly increasing subsequence that contains all distinct elements of the array. A subsequence is derived by deleting some or no elements without changing the order of the remaining elements. Task Write a function `minimal_strictly_increasing_subsequence_length` that returns the length of the minimal strictly increasing subsequence containing all distinct elements from the given array. # Function Signature ```python def minimal_strictly_increasing_subsequence_length(arr: List[int]) -> int: ``` Parameters - `arr` (List[int]): The input array of integers. Returns - `int`: The length of the minimal strictly increasing subsequence that contains all distinct elements of the array. Example ```python assert minimal_strictly_increasing_subsequence_length([4, 3, 2, 1, 4, 3, 2, 1]) == 4 assert minimal_strictly_increasing_subsequence_length([7, 2, 3, 1, 5, 2, 3, 4, 6, 7, 8]) == 8 assert minimal_strictly_increasing_subsequence_length([1, 3, 2, 4, 2, 5, 2, 3, 6, 5, 4]) == 6 ``` Constraints - 1 ≤ len(arr) ≤ 10^4 - -10^9 ≤ arr[i] ≤ 10^9 Scenario You are working on a data analysis tool that involves processing sequences of numbers. The tool requires a function to extract and evaluate minimal strictly increasing subsequences in these data sequences for further statistical analysis and pattern recognition tasks.","solution":"def minimal_strictly_increasing_subsequence_length(arr): Returns the length of the minimal strictly increasing subsequence that contains all distinct elements of the array. Parameters: arr (List[int]): The input array of integers. Returns: int: The length of the minimal strictly increasing subsequence containing all distinct elements. # Convert the array to a set to remove duplicates, then sort distinct_sorted = sorted(set(arr)) # The length of this sorted list is the result return len(distinct_sorted)"},{"question":"# Implement a Rate Limiter Implement a class `RateLimiter` that limits the number of operations that can be performed within a given time window. The rate limiter should enforce limits on the number of operations performed, ensuring that no more than `max_calls` operations can occur within a time window defined by `time_window_seconds`. Class Definition Your task is to implement the `RateLimiter` class with the following methods: - `__init__(self, max_calls: int, time_window_seconds: int)`: Initializes the rate limiter with a maximum number of allowed calls (`max_calls`) within a time window (`time_window_seconds`). - `allow_request(self) -> bool`: Returns `True` if a new request can be allowed under the rate limit, otherwise returns `False`. - `__str__(self) -> str`: Returns a string representation indicating the number of remaining allowed calls and the time left in the current window. Requirements: 1. Ensure the class enforces the rate limit strictly by keeping track of the timestamp of each allowed request. 2. The `allow_request` method should respect the time window and the maximum number of calls allowed within that window. 3. The class should efficiently manage and check the timing of requests. Constraints: - Consider the system clock functions for getting current time accurately. - The implementation should handle edge cases such as requests exactly on the boundary of the time window. - The rate limiter should be able to handle calls spaced arbitrarily close together. Example: ```python from time import time, sleep class RateLimiter: def __init__(self, max_calls: int, time_window_seconds: int): self.max_calls = max_calls self.time_window_seconds = time_window_seconds self.call_timestamps = [] def allow_request(self) -> bool: current_time = time() # Remove outdated timestamps while self.call_timestamps and self.call_timestamps[0] <= current_time - self.time_window_seconds: self.call_timestamps.pop(0) if len(self.call_timestamps) < self.max_calls: self.call_timestamps.append(current_time) return True return False def __str__(self) -> str: if not self.call_timestamps: remaining_calls = self.max_calls time_left = self.time_window_seconds else: current_time = time() time_left = max(0, self.time_window_seconds - (current_time - self.call_timestamps[0])) remaining_calls = max(0, self.max_calls - len(self.call_timestamps)) return f\\"Remaining calls: {remaining_calls}, Time left in window: {time_left:.2f} seconds\\" # Example usage: # limiter = RateLimiter(5, 60) # Allow up to 5 calls per 60 seconds # assert limiter.allow_request() == True # assert limiter.allow_request() == True # print(limiter) # Remaining calls: 3, Time left in window: 60.00 seconds # for _ in range(3): # limiter.allow_request() # print(limiter) # Remaining calls: 0, Time left in window: X seconds (less than 60) # assert limiter.allow_request() == False # sleep(60) # Wait for time window to reset # assert limiter.allow_request() == True ``` The above class definition includes part of the structure. Implement the methods to satisfy the described functionality and ensure robustness under the stated constraints.","solution":"from time import time class RateLimiter: def __init__(self, max_calls: int, time_window_seconds: int): self.max_calls = max_calls self.time_window_seconds = time_window_seconds self.call_timestamps = [] def allow_request(self) -> bool: current_time = time() # Remove outdated timestamps self.call_timestamps = [ timestamp for timestamp in self.call_timestamps if timestamp > current_time - self.time_window_seconds ] if len(self.call_timestamps) < self.max_calls: self.call_timestamps.append(current_time) return True return False def __str__(self) -> str: if not self.call_timestamps: remaining_calls = self.max_calls time_left = self.time_window_seconds else: current_time = time() time_left = max(0, self.time_window_seconds - (current_time - self.call_timestamps[0])) remaining_calls = max(0, self.max_calls - len(self.call_timestamps)) return f\\"Remaining calls: {remaining_calls}, Time left in window: {time_left:.2f} seconds\\""},{"question":"# Scenario You are developing a software program that outputs a personalized greeting message based on the recipient\'s name, age, and city of residence. The message should adjust appropriately to different inputs, producing a friendly and readable string. # Problem Statement Write a function `generate_personalized_greeting` that constructs a string containing a personalized greeting message based on the provided input details. # Function Signature ```python def generate_personalized_greeting(name: str, age: int, city: str) -> str: Parameters: 1. name (str): The name of the recipient. 2. age (int): The age of the recipient. 3. city (str): The city of residence of the recipient. Returns: str: A personalized greeting message. Raises: ValueError: If \'age\' is not a positive integer. ``` # Input * `name` is a string indicating the name of the recipient. * `age` is an integer indicating the age of the recipient (must be positive). * `city` is a string indicating the city of residence of the recipient. # Output * A string containing the personalized greeting message in the format: \\"Hello [name]! You are [age] years old and live in [city]. Have a great day!\\" # Constraints * Ensure `age` is a positive integer. # Examples ```python # Example 1 message = generate_personalized_greeting(\\"Alice\\", 30, \\"New York\\") print(message) # Expected output: \\"Hello Alice! You are 30 years old and live in New York. Have a great day!\\" # Example 2 message = generate_personalized_greeting(\\"Bob\\", 25, \\"San Francisco\\") print(message) # Expected output: \\"Hello Bob! You are 25 years old and live in San Francisco. Have a great day!\\" # Edge Case 1 try: message = generate_personalized_greeting(\\"Charlie\\", -1, \\"London\\") except ValueError as e: print(e) # Expected: Age must be a positive integer. ``` # Additional Notes You should raise appropriate exceptions for invalid inputs according to the constraints described. The function must handle varying string inputs gracefully, ensuring correct capitalization and punctuation.","solution":"def generate_personalized_greeting(name: str, age: int, city: str) -> str: Constructs a personalized greeting message based on the provided details. Parameters: 1. name (str): The name of the recipient. 2. age (int): The age of the recipient. 3. city (str): The city of residence of the recipient. Returns: str: A personalized greeting message. Raises: ValueError: If \'age\' is not a positive integer. if age <= 0: raise ValueError(\'Age must be a positive integer.\') return f\\"Hello {name}! You are {age} years old and live in {city}. Have a great day!\\""},{"question":"**Design an HTML Table Generator** # **Objective:** Create a Python function that generates an HTML table from a given list of dictionaries, ensuring that the resulting HTML table can be displayed correctly in a web browser. # **Requirements:** 1. **Function Definition**: Define a function `generate_html_table(data_list)` where `data_list` is a list of dictionaries containing the data for the table rows. 2. **Table Headers**: The function should automatically generate table headers based on the keys of the first dictionary in the list. 3. **Table Rows**: Each dictionary in the list represents a row in the table, and the values of the dictionary correspond to the cell values in that row. 4. **Handling Missing Keys**: If a dictionary in the list is missing keys present in other dictionaries, the function should leave corresponding cells empty. # **Input & Output Format:** - **Input**: - `data_list`: A list of dictionaries where each dictionary represents a row of data in the table. Keys of the dictionaries represent column names. - **Output**: - A string representing the HTML code of the generated table. # **Example:** ```python # Sample Input data_list = [ {\\"Name\\": \\"Alice\\", \\"Age\\": 30, \\"City\\": \\"New York\\"}, {\\"Name\\": \\"Bob\\", \\"Age\\": 24}, {\\"Name\\": \\"Charlie\\", \\"Age\\": 29, \\"City\\": \\"San Francisco\\", \\"Occupation\\": \\"Engineer\\"} ] # Function Call html_table = generate_html_table(data_list) # Expected Output print(html_table) ``` Output: ```html <table> <thead> <tr> <th>Name</th> <th>Age</th> <th>City</th> <th>Occupation</th> </tr> </thead> <tbody> <tr> <td>Alice</td> <td>30</td> <td>New York</td> <td></td> </tr> <tr> <td>Bob</td> <td>24</td> <td></td> <td></td> </tr> <tr> <td>Charlie</td> <td>29</td> <td>San Francisco</td> <td>Engineer</td> </tr> </tbody> </table> ``` # **Constraints:** - **Empty Input List**: If `data_list` is empty, return a message indicating that there is no data to display. - **Uniform Headers**: Ensure that all columns in the table have headers, even if some rows are missing values for these columns. - **HTML Validity**: The generated HTML should be valid and display correctly in standard browsers. # **Performance:** - Ensure efficient handling of lists with a large number of rows and columns. - The function should be able to handle up to 1000 rows and 100 columns with reasonable performance. Implement the function to generate the HTML table according to the above requirements and verify your implementation with the provided example and edge cases.","solution":"def generate_html_table(data_list): Generates an HTML table from a given list of dictionaries. # Handle empty input if not data_list: return \\"<p>No data available</p>\\" # Determine the headers (all unique keys in the list of dictionaries) headers = set() for row in data_list: headers.update(row.keys()) headers = sorted(headers) # Optional: sort headers alphabetically # Start forming the HTML html = [\\"<table>\\"] # Generate the header row html.append(\\" <thead>\\") html.append(\\" <tr>\\") for header in headers: html.append(f\\" <th>{header}</th>\\") html.append(\\" </tr>\\") html.append(\\" </thead>\\") # Generate the body rows html.append(\\" <tbody>\\") for row in data_list: html.append(\\" <tr>\\") for header in headers: html.append(f\\" <td>{row.get(header, \'\')}</td>\\") html.append(\\" </tr>\\") html.append(\\" </tbody>\\") # Close the table html.append(\\"</table>\\") return \\"n\\".join(html)"},{"question":"# Scenario You are tasked with developing a feature for a text editor that allows users to rotate the words in a sentence. The goal is to shift each word in the sentence to the right by a specified number of positions. When a word is shifted beyond the end of the sentence, it wraps around to the beginning. For example, given the sentence \\"The quick brown fox\\" and a rotation value of 2, the result would be \\"brown fox The quick\\". # Task Write a function `rotate_sentence(sentence: str, positions: int) -> str` that takes a sentence and an integer representing the number of positions to rotate the words and returns the rotated sentence. # Constraints * The input sentence will only contain alphabetic characters and spaces, and there will be no leading or trailing spaces. * The number of positions will be a non-negative integer. # Input and Output Formats * **Function**: * Input: A string `sentence` and an integer `positions`. * Output: A string that is the sentence with its words rotated by the given number of positions. --- # Example Rotation ```python >>> rotate_sentence(\\"The quick brown fox\\", 2) \'brown fox The quick\' >>> rotate_sentence(\\"Hello world\\", 1) \'world Hello\' ``` # Edge Cases 1. Rotating an empty sentence: ```python >>> rotate_sentence(\\"\\", 3) \\"\\" ``` 2. Rotating a sentence by `0` positions should return the same sentence: ```python >>> rotate_sentence(\\"The quick brown fox\\", 0) \\"The quick brown fox\\" ``` 3. Rotating a sentence with only one word should return the same word, regardless of the positions: ```python >>> rotate_sentence(\\"Python\\", 5) \\"Python\\" ``` 4. Rotating a sentence by a number of positions larger than the number of words in the sentence: ```python >>> rotate_sentence(\\"A B C\\", 4) \\"C A B\\" ``` Ensure the function handles these scenarios properly.","solution":"def rotate_sentence(sentence: str, positions: int) -> str: Rotates the words in the sentence by the given number of positions. words = sentence.split() if len(words) == 0: return sentence positions %= len(words) # Handle positions greater than number of words rotated_words = words[-positions:] + words[:-positions] return \' \'.join(rotated_words)"},{"question":"# Context You are tasked with refactoring an existing implementation of the binary search algorithm. The goal is to ensure that the implementation follows the iterative approach rather than the recursive one, which is currently being used. # Task 1. Refactor the given `binary_search` function from a recursive to an iterative implementation. 2. The function should return the index of the target element if found; otherwise, it should return -1. 3. Ensure the function is robust and handles edge cases appropriately (e.g., empty array). # Given Function ```python def binary_search(arr: list, target: int) -> int: def search_helper(arr, target, low, high): if low > high: return -1 mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] < target: return search_helper(arr, target, mid + 1, high) else: return search_helper(arr, target, low, mid - 1) return search_helper(arr, target, 0, len(arr) - 1) ``` # Expected Function Signature ```python def binary_search(arr: List[int], target: int) -> int: # Your code here ``` # Constraints * The array `arr` is sorted in non-decreasing order and contains unique elements. * The `target` is an integer that may or may not be present in the array. # Example ```python print(binary_search([1, 2, 3, 4, 5], 3)) # Output: 2 print(binary_search([1, 2, 3, 4, 5], 6)) # Output: -1 print(binary_search([], 3)) # Output: -1 print(binary_search([1], 1)) # Output: 0 print(binary_search([1], 2)) # Output: -1 ``` # Performance Requirements * The function should execute in O(log n) time complexity, where `n` is the number of elements in the array.","solution":"from typing import List def binary_search(arr: List[int], target: int) -> int: Iterative implementation of binary search. Returns the index of the target element if found; otherwise, returns -1. low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return -1"},{"question":"# Context: You are building a software system for a national magic library. The library has many wizards working together, and each has a unique wand. Each wand has a certain initial magical power level and magical stones embedded within it. You need to efficiently handle the following operations: 1. Increase or decrease the magical power of all wands within a given range due to changes in magical influx. 2. Find out the total magical power of a specific range of wands. # Task: Implement a Fenwick Tree (also known as a Binary Indexed Tree) from the given template to support the operations mentioned. Complete the Fenwick Tree class with the necessary functions `update` and `query_prefix` in the provided outline below. ```python class FenwickTree: def __init__(self, size: int) -> None: # Implementation details def update(self, index: int, value: int) -> None: # To be implemented by students def query_prefix(self, index: int) -> int: # To be implemented by students def query_range(self, left: int, right: int) -> int: # Implemented, but may rely on query_prefix ``` # Requirements: - Implement the `update` function to increase the magical power by `value` at a given index. - Implement the `query_prefix` function to return the sum of magical power levels from the start up to the specified index. - Use `query_prefix` to implement `query_range` function to return the sum of magical power levels from `left` to `right` indices. # Constraints: - 1 ≤ size ≤ 10^5 - 1 ≤ index, left, right ≤ size - -10^6 ≤ value ≤ 10^6 - The operations will be designed to fit within reasonable time and space requirements essential for competitive programming. # Examples: ```python A = [2, 4, 5, 7, 9, 10, 3, 8, 6, 11] fenwick_tree = FenwickTree(10) for idx, power in enumerate(A, 1): fenwick_tree.update(idx, power) print(fenwick_tree.query_range(1, 5)) # Should print 27 (2+4+5+7+9) print(fenwick_tree.query_range(6, 10)) # Should print 38 (10+3+8+6+11) fenwick_tree.update(4, 3) print(fenwick_tree.query_range(1, 5)) # Should print 30 (2+4+5+(7+3)+9) ```","solution":"class FenwickTree: def __init__(self, size: int) -> None: self.size = size self.tree = [0] * (size + 1) def update(self, index: int, value: int) -> None: while index <= self.size: self.tree[index] += value index += index & -index def query_prefix(self, index: int) -> int: sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def query_range(self, left: int, right: int) -> int: return self.query_prefix(right) - self.query_prefix(left - 1)"},{"question":"# Coding Question You are required to implement a class that models the behavior of a basic bank account. The class should enable depositing and withdrawing money while maintaining the balance and ensuring an appropriate minimum balance is upheld. **Class: `BankAccount`** ```python class BankAccount: def __init__(self, initial_balance: float, minimum_balance: float): Initializes a new bank account with an initial balance and a minimum balance. :param initial_balance: Initial amount in the bank account (float). :param minimum_balance: Minimum required balance in the bank account (float). Example: >>> account = BankAccount(1000.0, 100.0) >>> account.balance 1000.0 # your code here def deposit(self, amount: float) -> None: Deposits the given amount into the bank account. :param amount: The amount to deposit (float). Example: >>> account = BankAccount(1000.0, 100.0) >>> account.deposit(500.0) >>> account.balance 1500.0 # your code here def withdraw(self, amount: float) -> None: Withdraws the given amount from the bank account if it doesn\'t go below the minimum balance. :param amount: The amount to withdraw (float). Example: >>> account = BankAccount(1000.0, 100.0) >>> account.withdraw(800.0) >>> account.balance 200.0 >>> account.withdraw(200.0) Traceback (most recent call last): ... Exception: Cannot withdraw amount as it breaches the minimum balance >>> account.balance 200.0 # your code here ``` # Constraints: - The initial balance must be a non-negative real number. - The minimum balance must be a non-negative real number. - Deposits must be positive real numbers. - Withdrawals must ensure the balance does not drop below the minimum balance. - If an invalid withdrawal is attempted (balance would go below the minimum balance), an appropriate exception should be raised without altering the balance. # Example Input/Output: **Sample Script** ```python # Initializing a bank account with an initial balance of 1000 and a minimum balance of 100. account = BankAccount(1000.0, 100.0) # Depositing an amount of 500 into the account. account.deposit(500.0) print(\\"Balance after deposit:\\", account.balance) # Expected: 1500.0 # Withdrawing an amount of 800 from the account. account.withdraw(800.0) print(\\"Balance after withdrawal:\\", account.balance) # Expected: 700.0 # Attempting to withdraw an amount that will breach the minimum balance. try: account.withdraw(650.0) except Exception as e: print(e) # Expected: Cannot withdraw amount as it breaches the minimum balance print(\\"Final Balance:\\", account.balance) # Expected: 700.0 ``` Write the class `BankAccount` with the methods `deposit` and `withdraw` including appropriate checks and functionality as described.","solution":"class BankAccount: def __init__(self, initial_balance: float, minimum_balance: float): Initializes a new bank account with an initial balance and a minimum balance. :param initial_balance: Initial amount in the bank account (float). :param minimum_balance: Minimum required balance in the bank account (float). Example: >>> account = BankAccount(1000.0, 100.0) >>> account.balance 1000.0 if initial_balance < 0 or minimum_balance < 0: raise ValueError(\\"Initial balance and minimum balance must be non-negative.\\") self.balance = initial_balance self.minimum_balance = minimum_balance def deposit(self, amount: float) -> None: Deposits the given amount into the bank account. :param amount: The amount to deposit (float). Example: >>> account = BankAccount(1000.0, 100.0) >>> account.deposit(500.0) >>> account.balance 1500.0 if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.balance += amount def withdraw(self, amount: float) -> None: Withdraws the given amount from the bank account if it doesn\'t go below the minimum balance. :param amount: The amount to withdraw (float). Example: >>> account = BankAccount(1000.0, 100.0) >>> account.withdraw(800.0) >>> account.balance 200.0 >>> account.withdraw(200.0) Traceback (most recent call last): ... Exception: Cannot withdraw amount as it breaches the minimum balance >>> account.balance 200.0 if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if self.balance - amount < self.minimum_balance: raise Exception(\\"Cannot withdraw amount as it breaches the minimum balance\\") self.balance -= amount"},{"question":"# Coding Assessment Question Context In mathematics, a Tetranacci sequence is a sequence of numbers where each term is the sum of the preceding four terms. The sequence often starts with four predetermined terms, with all subsequent terms being the sum of the four preceding numbers. The initial terms can differ, but the most common starting point is 0, 0, 0, 1. The nth Tetranacci number ( t_n ) can be defined as: [ t_n = t_{n-1} + t_{n-2} + t_{n-3} + t_{n-4} ] Given the initial values: [ t_0 = 0, t_1 = 0, t_2 = 0, t_3 = 1 ] Your task is to implement a function to generate the first N Tetranacci numbers in the sequence. Problem Statement You need to write a Python function `generate_tetranacci_numbers(length: int) -> list[int]` that returns a list of the first `length` Tetranacci numbers. The function should handle invalid inputs appropriately. # Constraints * The input `length` will be a positive integer (1 ≤ length ≤ 10^6). # Expected Function Signature ```python def generate_tetranacci_numbers(length: int) -> list[int]: ``` # Input * An integer `length` representing the number of Tetranacci numbers to be generated. # Output * List of integers representing the first `length` Tetranacci numbers. # Example ```python print(generate_tetranacci_numbers(10)) # Output: [0, 0, 0, 1, 1, 2, 4, 8, 15, 29] print(generate_tetranacci_numbers(5)) # Output: [0, 0, 0, 1, 1] print(generate_tetranacci_numbers(1)) # Output: [0] print(generate_tetranacci_numbers(0)) # Output: ValueError: Length must be a positive integer. ``` # Constraints 1. The function should raise a `ValueError` with the message \\"Length must be a positive integer.\\" if the input is zero or a negative value. 2. The function should be efficient enough to handle large values of `length` up to 10^6 within a reasonable time frame. Additional Notes * Validate the input to ensure it is a positive integer. * Use efficient computation techniques to handle the potentially large size of the sequence.","solution":"def generate_tetranacci_numbers(length: int) -> list[int]: Generates the first `length` Tetranacci numbers. Parameters: length (int): The number of Tetranacci numbers to generate. Returns: list[int]: A list of the first `length` Tetranacci numbers. Raises: ValueError: If the input `length` is not a positive integer. if length <= 0: raise ValueError(\\"Length must be a positive integer.\\") # Initial known values of Tetranacci sequence tetranacci_sequence = [0, 0, 0, 1] # Return early if the length requested is less than or equal to 4 if length <= 4: return tetranacci_sequence[:length] for _ in range(4, length): next_value = sum(tetranacci_sequence[-4:]) tetranacci_sequence.append(next_value) return tetranacci_sequence"},{"question":"# Problem Statement: You are tasked with implementing a function to calculate the Minkowski distance between two points in an n-dimensional space. The Minkowski distance is a generalized metric that encompasses other distance metrics such as Manhattan and Euclidean distances. It is useful in various machine learning, clustering, and distance measurement tasks. # Function Signature: ```python def minkowski_distance(point1: np.ndarray, point2: np.ndarray, p: float) -> float: pass ``` # Input: * `point1` (np.ndarray): The first point as a 1D numpy array of floats. * `point2` (np.ndarray): The second point as a 1D numpy array of floats. * `p` (float): The parameter `p` representing the order of the distance, a positive float (e.g., `p=2` for Euclidean distance, `p=1` for Manhattan distance). # Output: * Returns the Minkowski distance (a float) between `point1` and `point2`. # Constraints: * `point1` and `point2` must have the same length. * The length of `point1` and `point2` is at most `10^6`. * `p` is a positive float and at least 1.0. * The function should handle large arrays efficiently. # Example: ```python import numpy as np def minkowski_distance(point1: np.ndarray, point2: np.ndarray, p: float) -> float: return np.sum(np.abs(point1 - point2) ** p) ** (1/p) # Example Usage print(minkowski_distance(np.array([1, 2, 3]), np.array([4, 5, 6]), 3)) # Output: 3.3019272488946263 ``` # Requirements: 1. Implement the function `minkowski_distance` that fulfills the objectives. 2. Consider potential edge cases, such as `point1` and `point2` of different magnitudes and very high-dimensional cases. 3. Test the function thoroughly with various points and `p` values. # Hints: 1. Use numpy for efficient mathematical operations and array manipulation. 2. Ensure to handle large values of `p` by ensuring numerical stability in the computation.","solution":"import numpy as np def minkowski_distance(point1: np.ndarray, point2: np.ndarray, p: float) -> float: Calculate the Minkowski distance between two points in n-dimensional space. Parameters: point1 (np.ndarray): The first point as a 1D numpy array of floats. point2 (np.ndarray): The second point as a 1D numpy array of floats. p (float): The parameter p representing the order of the distance. Returns: float: The Minkowski distance between point1 and point2. if p <= 0: raise ValueError(\\"p must be a positive float and at least 1.0\\") if point1.shape != point2.shape: raise ValueError(\\"point1 and point2 must have the same dimensions\\") return np.sum(np.abs(point1 - point2) ** p) ** (1 / p)"},{"question":"# Problem Statement Write a function called `next_lexicographic_permutation` that takes a list of integers as input and returns the next lexicographically greater permutation of the list. If no such permutation exists (the input list is the highest permutation), the function should rearrange the list in ascending order as the smallest permutation and return it. # Function Signature ```python def next_lexicographic_permutation(nums: list[int]) -> list[int]: # Your code here ``` # Input * `nums` (list[int]): A list of integers representing the current permutation. # Output * `list[int]`: The next lexicographic permutation of the list, or the smallest permutation if the input is the largest permutation. # Constraints * The length of `nums` will be in the range [1, 1000]. * The integers in `nums` will be within the range [-1000, 1000]. # Example ```python >>> next_lexicographic_permutation([1, 2, 3]) [1, 3, 2] >>> next_lexicographic_permutation([3, 2, 1]) [1, 2, 3] >>> next_lexicographic_permutation([1, 1, 5]) [1, 5, 1] >>> next_lexicographic_permutation([1]) [1] ``` # Additional Notes * The function should rearrange the list in-place if possible to conserve memory. * Consider edge cases, such as single-element lists or lists with repetitive elements. * Aim to be efficient, ideally aiming for O(n) time complexity and O(1) space complexity for the core permutation logic. Make sure that your implementation effectively handles all edge cases and adheres to proper algorithmic principles for finding the next lexicographic permutation.","solution":"def next_lexicographic_permutation(nums: list[int]) -> list[int]: Modify the input list to its next lexicographic permutation. If the list is the highest permutation, rearrange it to the lowest permutation. n = len(nums) # Step 1: Find the largest index k such that nums[k] < nums[k + 1]. k = -1 for i in range(n - 1): if nums[i] < nums[i + 1]: k = i if k == -1: # nums is in descending order, so we just reverse it nums.reverse() else: # Step 2: Find the largest index l such that nums[k] < nums[l] l = -1 for i in range(k + 1, n): if nums[k] < nums[i]: l = i # Step 3: Swap nums[k] with nums[l] nums[k], nums[l] = nums[l], nums[k] # Step 4: Reverse the sub-array nums[k + 1:] nums[k + 1:] = reversed(nums[k + 1:]) return nums"},{"question":"# Counting Distinct Elements in a Subarray You are given an integer array `arr` and an integer `k`. Write a function `count_distinct_elements_in_subarray(arr: list[int], k: int) -> list[int]` that returns a list of integers, where each integer corresponds to the number of distinct elements in the subarray of length `k` for every possible subarray within `arr`. Input: - `arr`: A list of integers (1 ≤ len(arr) ≤ 10^5, 1 ≤ arr[i] ≤ 10^6) - `k`: An integer denoting the length of the subarray (1 ≤ k ≤ len(arr)) Output: - A list of integers representing the count of distinct elements in each subarray of length `k`. Constraints: - You must achieve a time complexity of O(n) and a space complexity of O(k). Example: ```python >>> count_distinct_elements_in_subarray([1, 2, 1, 3, 4, 2, 3], 4) [3, 4, 4, 3] >>> count_distinct_elements_in_subarray([1, 2, 4, 4], 2) [2, 2, 1] >>> count_distinct_elements_in_subarray([1, 2, 2, 1, 1], 3) [2, 2, 2] ``` Context: Understanding the diversity of elements within fixed-length segments of a sequence can have applications in signal processing, network traffic analysis, and data compression. By efficiently counting the number of distinct elements within successive subarrays, you can gain insights into the variability and information content of the data.","solution":"def count_distinct_elements_in_subarray(arr, k): from collections import defaultdict n = len(arr) if k > n: return [] distinct_count = [] freq_map = defaultdict(int) distinct_elements = 0 # Initialize the first window for i in range(k): if freq_map[arr[i]] == 0: distinct_elements += 1 freq_map[arr[i]] += 1 distinct_count.append(distinct_elements) # Slide the window from start to end for i in range(k, n): # Remove the influence of the element going out of the window if freq_map[arr[i - k]] == 1: distinct_elements -= 1 freq_map[arr[i - k]] -= 1 # Add the influence of the new element coming into the window if freq_map[arr[i]] == 0: distinct_elements += 1 freq_map[arr[i]] += 1 distinct_count.append(distinct_elements) return distinct_count"},{"question":"# **Question**: Calculate Digital Root and Sum of Digit Frequency Given an integer, the **digital root** is defined as the single digit obtained by summing all the digits of the number repeatedly until a single digit is obtained. The Sum of Digit Frequency is defined as the sum of all the counts of each unique digit in the number. Your task is to implement a function `digital_root_and_digit_frequency_sum(num: int) -> (int, int)` that returns a tuple containing the digital root of the given number and the sum of digit frequencies. **Input Format** - A single integer `num`, which can be positive or zero. **Output Format** - A tuple containing two integers: the digital root and the sum of digit frequencies of the given number. **Constraints** - If the input is negative or not an integer, raise a `ValueError` with an appropriate message. - Performance considerations should handle numbers up to 10^9. **Function Signature** ```python def digital_root_and_digit_frequency_sum(num: int) -> (int, int): pass ``` **Examples** 1. `digital_root_and_digit_frequency_sum(9875)` should return `(2, 31)`, because: - Digital Root calculation steps: 9 + 8 + 7 + 5 = 29, 2 + 9 = 11, 1 + 1 = 2. - Sum of Digit Frequency: 9 (appears 1 time) + 8 (appears 1 time) + 7 (appears 1 time) + 5 (appears 1 time) = 9 + 8 + 7 + 5 = 29. 2. `digital_root_and_digit_frequency_sum(123)` should return `(6, 6)`, because: - Digital Root calculation steps: 1 + 2 + 3 = 6. - Sum of Digit Frequency: 1 (appears 1 time) + 2 (appears 1 time) + 3 (appears 1 time) = 1 + 2 + 3 = 6. **Note**: Assume function `calculate_digital_root(num: int) -> int` is available in the runtime environment to determine the digital root. You need to implement the sum of digit frequencies within your solution.","solution":"def digital_root_and_digit_frequency_sum(num: int) -> (int, int): Returns a tuple containing the digital root and the sum of digit frequencies of the given number. if not isinstance(num, int) or num < 0: raise ValueError(\\"Input must be a non-negative integer\\") def calculate_digital_root(x): while x >= 10: x = sum(int(digit) for digit in str(x)) return x # Calculate the digital root digital_root = calculate_digital_root(num) # Calculate the sum of digit frequencies digit_frequency_sum = sum(int(digit) for digit in str(num)) return digital_root, digit_frequency_sum"},{"question":"# Problem Statement You are tasked with implementing a basic version of the K-Means clustering algorithm to classify a set of data points into `k` clusters. # Function to Implement Implement the function `k_means_clustering(data_points: List[List[float]], k: int, max_epochs: int) -> Tuple[List[List[float]], List[int]]` which: * Executes the K-Means clustering algorithm on the provided data points. * Returns the final positions of the cluster centroids and the cluster assignments for each point. # Input Format 1. `data_points` (List[List[float]]): A list of `n` data points, each of which is a list of `d` float values representing the point\'s coordinates. 2. `k` (int): The number of clusters. 3. `max_epochs` (int): The maximum number of iterations to perform. # Output Format * Returns a tuple containing: * `centroids` (List[List[float]]): A list of `k` centroids, each of which is a list of `d` float values representing the centroid\'s coordinates. * `assignments` (List[int]): A list of `n` integers where each integer represents the index of the centroid to which the corresponding data point is assigned. # Constraints * `1 <= len(data_points) <= 1000` * `1 <= len(data_points[0]) <= 10` * `1 <= k <= min(len(data_points), 10)` * `1 <= max_epochs <= 1000` # Example Given the following input: ```python data_points = [[1.0, 2.0], [3.0, 4.0], [1.0, 0.0], [4.0, 2.0], [3.5, 3.5]] k = 2 max_epochs = 5 ``` The expected output is: ```python ([[1.0, 1.0], [3.5, 3.625]], [0, 1, 0, 1, 1]) ``` # Notes * The function should initialize the centroids randomly from the data points. * Implement the standard K-Means algorithm: 1. Assign each data point to the nearest centroid. 2. Update the positions of the centroids based on the mean position of the points assigned to each centroid. 3. Repeat steps 1 and 2 for `max_epochs` or until the centroids no longer change. * Ensure the algorithm handles common edge cases efficiently and produces accurate results.","solution":"import random import math from typing import List, Tuple def euclidean_distance(point1: List[float], point2: List[float]) -> float: return math.sqrt(sum((x - y) ** 2 for x, y in zip(point1, point2))) def k_means_clustering(data_points: List[List[float]], k: int, max_epochs: int) -> Tuple[List[List[float]], List[int]]: # Randomly initialize the centroids by selecting k random data points centroids = random.sample(data_points, k) assignments = [-1] * len(data_points) for _ in range(max_epochs): new_assignments = [] # Step 1: Assign each data point to the nearest centroid for point in data_points: distances = [euclidean_distance(point, centroid) for centroid in centroids] new_assignments.append(distances.index(min(distances))) # Step 2: Update centroids new_centroids = [[0] * len(data_points[0]) for _ in range(k)] counts = [0] * k for assignment, point in zip(new_assignments, data_points): for i in range(len(point)): new_centroids[assignment][i] += point[i] counts[assignment] += 1 for i in range(k): if counts[i] != 0: for j in range(len(new_centroids[i])): new_centroids[i][j] /= counts[i] if new_assignments == assignments: break centroids = new_centroids assignments = new_assignments return centroids, assignments"},{"question":"# Implementing Dijkstra\'s Algorithm **Context**: You are building a navigation system that estimates the shortest paths between multiple points in a city represented as nodes in a graph. The graph\'s edges have varying weights representing travel time. **Task**: Implement Dijkstra\'s Algorithm to find the shortest path from a starting node to all other nodes in a given weighted, directed graph. **Function Signature**: ```python def dijkstra(graph: dict, start: int) -> dict: pass ``` **Input**: * `graph`: A dictionary where keys are integers representing nodes, and values are dictionaries with neighboring nodes as keys and edge weights (travel time) as values. The graph does not contain negative weights. * `start`: An integer representing the starting node. **Output**: * A dictionary where keys are nodes and values are the shortest travel time from the starting node to the respective node. **Constraints**: * The graph can contain up to 10^3 nodes. * Edge weights are positive integers and do not exceed 10^6. * The graph is connected, meaning there is a path between any pair of nodes. **Examples**: ```python graph = { 0: {1: 2, 2: 5}, 1: {0: 2, 2: 1, 3: 4}, 2: {0: 5, 1: 1, 3: 7}, 3: {1: 4, 2: 7} } assert dijkstra(graph, 0) == {0: 0, 1: 2, 2: 3, 3: 6} graph = { 1: {2: 1, 3: 4}, 2: {1: 1, 3: 2, 4: 5}, 3: {1: 4, 2: 2, 4: 1}, 4: {2: 5, 3: 1} } assert dijkstra(graph, 1) == {1: 0, 2: 1, 3: 3, 4: 4} ``` **Additional Information**: * You may use a priority queue to help manage the nodes to explore next efficiently. * Focus on ensuring that your function efficiently calculates and returns the shortest paths from the starting node.","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra\'s algorithm to find the shortest path from start node to all other nodes. Parameters: graph (dict): A dictionary where keys are integers representing nodes, and values are dictionaries with neighboring nodes as keys and edge weights as values. start (int): The starting node. Returns: dict: A dictionary where keys are nodes and values are the shortest travel time from the start node to the respective node. # Initial distances to all nodes set to infinity distances = {node: float(\'infinity\') for node in graph} distances[start] = 0 # Distance to the start node is 0 # Priority queue priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # This check is crucial to avoid outdated queue entries if current_distance > distances[current_node]: continue # Explore the neighbors for neighbor, weight in graph[current_node].items(): distance = current_distance + weight # Only consider this new path if it\'s better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"# Scenario You are developing a file management system that includes the ability to compress and decompress data files. Your task is to implement a feature that can compress a string using a simple run-length encoding (RLE) algorithm, which is a basic form of lossless data compression where consecutive elements are replaced with their count and the element itself. # Task Write a function `rle_encode` that takes a string and returns its run-length encoded version. If the compressed string is not shorter than the original string, return the original string instead. # Function Signature ```python def rle_encode(text: str) -> str: ``` # Input - `text`: A string consisting of printable ASCII characters. # Output - Returns a string representing the run-length encoded version of the input string or the original string if RLE compression does not reduce the size. # Constraints - The input text will not be empty and will be up to 1000 characters long. - The output should be optimized for cases where the RLE would not actually reduce the size. # Examples ```python # Example 1 print(rle_encode(\\"aaabbbbbcc\\")) # Output: \\"3a5b2c\\" # Example 2 print(rle_encode(\\"abcd\\")) # Output: \\"abcd\\" (since RLE results in \\"1a1b1c1d\\" which is longer than \\"abcd\\") # Example 3 print(rle_encode(\\"wwwwaaadexxxxxx\\")) # Output: \\"4w3a1d1e6x\\" # Example 4 print(rle_encode(\\"aabcccdee\\")) # Output: \\"aabcccdee\\" (since RLE results in \\"2a1b3c1d2e\\" which is not shorter) ``` # Notes - The compression should only replace runs of characters with their counts if this actually results in a shorter string. - Take care to handle both small and large strings efficiently. - This task does not require handling of decompression.","solution":"def rle_encode(text: str) -> str: Encodes the given string using Run-Length Encoding algorithm. If the encoded string is not shorter than the original, returns the original string. n = len(text) if n == 0: return text encoded_string = [] i = 0 while i < n: count = 1 while i < n - 1 and text[i] == text[i + 1]: i += 1 count += 1 encoded_string.append(str(count) + text[i]) i += 1 encoded_string = \'\'.join(encoded_string) return encoded_string if len(encoded_string) < n else text"},{"question":"# Coding Challenge: Topological Sort Using Kahn\'s Algorithm Context You are tasked with implementing the Topological Sort algorithm using Kahn\'s Algorithm. Topological Sort is an ordering of the nodes in a directed acyclic graph (DAG) such that for any directed edge `uv` from node `u` to node `v`, `u` comes before `v` in the ordering. Problem Statement Write a Python function `topological_sort(graph: Dict[int, List[int]]) -> List[int]` that performs a topological sort on the given directed acyclic graph (DAG) represented by an adjacency list. Function Signature ```python def topological_sort(graph: Dict[int, List[int]]) -> List[int]: pass ``` Parameters * `graph`: A dictionary where keys are node integers and values are lists of integers representing the directed edges from the key node to other nodes. Returns * A list of integers representing the topological ordering of the nodes. Constraints 1. The graph is guaranteed to be a DAG. 2. If there are multiple possible topological orderings, return any of them. Examples ```python # Example 1 graph = { 0: [1, 2], 1: [2, 3], 2: [], 3: [4], 4: [] } result = topological_sort(graph) assert result in [[0, 1, 2, 3, 4], [0, 1, 3, 2, 4], [0, 2, 1, 3, 4], [0, 1, 3, 4, 2]] # Example 2 graph = { 1: [2, 3], 2: [4], 3: [4], 4: [] } result = topological_sort(graph) assert result in [[1, 2, 3, 4], [1, 3, 2, 4]] # Example 3 graph = { 5: [2, 0], 4: [0, 1], 2: [3], 3: [1], 1: [], 0: [] } result = topological_sort(graph) assert result in [[4, 5, 0, 2, 3, 1], [5, 4, 2, 0, 3, 1]] # Example 4 graph = { 0: [1], 1: [2, 3], 2: [3], 3: [4, 5], 4: [], 5: [] } result = topological_sort(graph) assert result in [[0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 5, 4]] # Example 5 graph = { 0: [1, 2, 3], 1: [4], 2: [4], 3: [4], 4: [] } result = topological_sort(graph) assert result in [[0, 1, 2, 3, 4], [0, 1, 3, 2, 4], [0, 2, 1, 3, 4], [0, 1, 2, 4, 3]] ```","solution":"def topological_sort(graph): Performs a topological sort on the given DAG represented by an adjacency list. Args: graph: Dict[int, List[int]] - The graph represented as an adjacency list. Returns: List[int] - A list of integers representing the topological ordering of the nodes. from collections import deque # Step 1: Compute in-degree of each node in_degree = {u: 0 for u in graph} # Initialize in-degree of all nodes to 0 for u in graph: for v in graph[u]: in_degree[v] += 1 # Step 2: Collect nodes with zero in-degree zero_in_degree = deque([u for u in in_degree if in_degree[u] == 0]) # Step 3: Process nodes with zero in-degree topo_order = [] while zero_in_degree: u = zero_in_degree.popleft() topo_order.append(u) for v in graph[u]: in_degree[v] -= 1 if in_degree[v] == 0: zero_in_degree.append(v) return topo_order"},{"question":"# Coding Assessment Question: You are given the task of creating a function that will assist an e-commerce platform in determining the number of ways customers can select items in different combinations from a provided list with special constraints. **Function Details**: * Write a function `count_combinations(items: List[int], target: int) -> int` that calculates and returns the number of unique combinations of items that sum up to the target value. **Input**: * `items` (List[int]): A list of item prices represented as positive integers. Must contain at least one element. * `target` (int): The target sum. Must be a positive integer. **Output**: * A single integer representing the number of unique combinations of items that sum up to the target value. **Constraints**: * Multiple combinations are not allowed to reuse the same items in different orders. For example, [1, 2] and [2, 1] count as the same combination. **Performance Requirements**: * The solution must efficiently handle inputs where `len(items) <= 15` and `target <= 1000`. **Scenario**: The e-commerce platform wants to offer customer choice bundles and needs to calculate all possible ways a customer can combine items to reach a particular spending amount to optimize packaging and promotional deals. **Example Use Cases**: * `count_combinations([2, 3, 6, 7], 7)` should return `2` because the possible combinations are [7] and [2, 2, 3]. * `count_combinations([2, 3, 5], 8)` should return `3` because the possible combinations are [3, 5], [2, 3, 3], and [2, 2, 2, 2]. **Edge Cases**: * Inputs like `count_combinations([], 7)` should raise an exception: `\\"The list of items cannot be empty\\"`. * Inputs like `count_combinations([2, 3, 5], 0)` should raise an exception: `\\"Target sum must be a positive integer\\"`. * Inputs like `count_combinations([2, 4, 6], 1)` should return `0` because no combination sums to `1`.","solution":"from typing import List def count_combinations(items: List[int], target: int) -> int: if not items: raise ValueError(\\"The list of items cannot be empty\\") if target <= 0: raise ValueError(\\"Target sum must be a positive integer\\") def backtrack(start, target): if target == 0: return 1 if target < 0: return 0 count = 0 for i in range(start, len(items)): count += backtrack(i, target - items[i]) return count return backtrack(0, target)"},{"question":"# Scenario: As a software engineer at a logistics company, you are developing a system to track packages as they move through various warehouses. Each package has a unique tracking ID, and your task is to determine the position in the delivery route where a package with a specific tracking ID goes off the radar. The system logs the arrival and departure at each warehouse as separate events in sequential order. # Task: Implement a function `find_missing_package(logs: list, track_id: int) -> int` that identifies the last known position (zero-based index) of a package with a given tracking ID before it goes missing. # Function Signature: ```python def find_missing_package(logs: list, track_id: int) -> int: pass ``` # Input: * `logs`: A list of strings where each string contains an event in the format \\"event_type tracking_id\\". * `event_type`: a string, either \\"arrival\\" or \\"departure\\". * `tracking_id`: an integer representing the package\'s unique tracking ID. * `track_id`: An integer denoting the tracking ID of the package to search for. # Output: * Return an integer representing the zero-based index of the last event for the given `track_id`. * If no events are found for the given `track_id`, return -1. # Example: ```python >>> find_missing_package([\\"arrival 101\\", \\"departure 101\\", \\"arrival 202\\", \\"arrival 101\\", \\"departure 202\\"], 101) 3 >>> find_missing_package([\\"arrival 101\\", \\"arrival 202\\", \\"departure 202\\", \\"departure 101\\"], 202) 2 >>> find_missing_package([\\"arrival 101\\", \\"arrival 202\\", \\"departure 202\\"], 303) -1 ``` # Constraints: * Expect to handle lists with a length up to 10,000 elements efficiently. * Assume the logs are sorted in the sequence of occurrences.","solution":"def find_missing_package(logs: list, track_id: int) -> int: Determines the last known position (zero-based index) of a package with a given tracking ID before it goes missing in the delivery route logs. :param logs: A list of strings where each string contains an event in the format \\"event_type tracking_id\\". :param track_id: An integer representing the package\'s unique tracking ID. :return: An integer representing the zero-based index of the last event for the given track_id. Returns -1 if no events are found for the given track_id. last_known_position = -1 for index, log in enumerate(logs): event_type, id_str = log.split() id_num = int(id_str) if id_num == track_id: last_known_position = index return last_known_position"},{"question":"# Rotate Matrix Context You are designing a feature for an image editing software that allows rotating an NxN image (represented as a matrix) 90 degrees clockwise. Each pixel in the image is represented by an integer value. Objective Write a function `rotate_matrix(matrix: List[List[int]]) -> List[List[int]]` that rotates the given NxN matrix 90 degrees clockwise. Input * `matrix`: A list of lists of integers representing the matrix, where each integer is a pixel value. * The matrix will have `n` rows and `n` columns where `1 <= n <= 100`. Output * Returns the rotated matrix as a new list of lists. Constraints * The matrix is guaranteed to be a square matrix (NxN). * The matrix will only contain integers. Example ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: # Your code here # Example usage: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(rotate_matrix(matrix)) # Output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` Explanation For the given example, the original 3x3 matrix is rotated 90 degrees clockwise, resulting in the new matrix where the first row becomes the first column in reverse order, the second row becomes the second column in reverse order, and the third row becomes the third column in reverse order.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates the NxN matrix 90 degrees clockwise. Parameters: matrix (List[List[int]]): The NxN matrix to rotate Returns: List[List[int]]: The rotated matrix n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - 1 - i] = matrix[i][j] return rotated"},{"question":"# Problem Statement You are required to implement a system that manages and scores a simple multiple-choice quiz. The quiz consists of a set of questions, where each question has one correct answer out of four possible choices. Your task is to create functions to administer the quiz, track user responses, and calculate the final score. Function Descriptions 1. **register_question(question: str, choices: list[str], correct_choice: int) -> dict** - Input: A question string, a list of four choices, and the index (0-3) of the correct choice. - Output: A dictionary representing the question, including the question text, choices, and the correct answer index. - Example: ```python register_question(\\"What is the capital of France?\\", [\\"Berlin\\", \\"London\\", \\"Paris\\", \\"Rome\\"], 2) # returns {\'question\': \'What is the capital of France?\', \'choices\': [\'Berlin\', \'London\', \'Paris\', \'Rome\'], \'correct_choice\': 2} ``` 2. **administer_quiz(questions: list[dict], responses: list[int]) -> int** - Input: A list of question dictionaries (as returned by `register_question`) and a list of user responses (indexes corresponding to selected choices). - Output: The total score representing the number of correct responses. - Example: ```python questions = [ register_question(\\"What is the capital of France?\\", [\\"Berlin\\", \\"London\\", \\"Paris\\", \\"Rome\\"], 2), register_question(\\"Which planet is known as the Red Planet?\\", [\\"Earth\\", \\"Mars\\", \\"Jupiter\\", \\"Saturn\\"], 1) ] administer_quiz(questions, [2, 1]) # returns 2 administer_quiz(questions, [1, 0]) # returns 0 ``` # Constraints: - Each question will always have exactly four choices. - The correct_choice index will be a valid index (0-3). - The responses list length will match the length of the questions list. # Implementation Implement the following functions: ```python def register_question(question: str, choices: list[str], correct_choice: int) -> dict: # Your implementation here pass def administer_quiz(questions: list[dict], responses: list[int]) -> int: # Your implementation here pass ```","solution":"def register_question(question: str, choices: list[str], correct_choice: int) -> dict: Registers a question with its possible choices and the index of the correct choice. :param question: str - The question text. :param choices: list[str] - A list of four choices for the question. :param correct_choice: int - The index (0-3) of the correct choice in the choices list. :return: dict - A dictionary representing the question, including the question text, choices, and correct answer index. return { \\"question\\": question, \\"choices\\": choices, \\"correct_choice\\": correct_choice } def administer_quiz(questions: list[dict], responses: list[int]) -> int: Administers the quiz and calculates the final score based on user responses. :param questions: list[dict] - A list of question dictionaries. :param responses: list[int] - A list of user responses (indexes corresponding to selected choices). :return: int - The total score representing the number of correct responses. score = 0 for question, response in zip(questions, responses): if response == question[\\"correct_choice\\"]: score += 1 return score"},{"question":"# Problem Statement You are asked to create a class `StringManipulator` that works with strings and supports several operations. Your implementation should allow: 1. **Initialization**: Instantiate the class with a given string. 2. **Reverse Substring**: Reverse a specific substring. 3. **Query Substring**: Retrieve the substring between two indices (inclusive). 4. **Check Palindrome Substring**: Determine if a substring is a palindrome. The class should handle these operations efficiently even if they are performed multiple times. # Function Signatures ```python class StringManipulator: def __init__(self, string: str) -> None: Initializes the data structure with the given string. def reverse_substring(self, start: int, end: int) -> None: Reverses the substring from start to end indices (inclusive). def query_substring(self, start: int, end: int) -> str: Returns the substring from start to end indices (inclusive). def is_palindrome(self, start: int, end: int) -> bool: Returns True if the substring from start to end indices (inclusive) is a palindrome, otherwise False. ``` # Input Constraints - The input string will have a length of up to `10^5` characters. - The characters in the string will be lowercase English letters. - The indices provided for queries and updates will be valid within the bounds of the string. # Example Usage ```python # Initialize the data structure sm = StringManipulator(\\"madamimadam\\") # Query the substring from index 0 to 4 (inclusive) print(sm.query_substring(0, 4)) # Output: \\"madam\\" # Check if the substring from index 0 to 4 is a palindrome print(sm.is_palindrome(0, 4)) # Output: True # Reverse the substring from index 0 to 4 (inclusive) sm.reverse_substring(0, 4) # Query again the substring from index 0 to 4 (inclusive) print(sm.query_substring(0, 4)) # Output: \\"madam\\" # Check if the substring from index 0 to 4 is a palindrome print(sm.is_palindrome(0, 4)) # Output: True # Reverse the substring from index 0 to 4 (inclusive) back to original sm.reverse_substring(0, 4) # Check if the substring from index 0 to 10 is a palindrome print(sm.is_palindrome(0, 10)) # Output: True ``` # Constraints - Your solution should handle edge cases such as empty strings and invalid indices gracefully. - Optimize for performance to efficiently handle frequent updates and queries.","solution":"class StringManipulator: def __init__(self, string: str) -> None: Initializes the data structure with the given string. self.string = list(string) # Store the string as a list of characters for easy manipulation def reverse_substring(self, start: int, end: int) -> None: Reverses the substring from start to end indices (inclusive). while start < end: self.string[start], self.string[end] = self.string[end], self.string[start] start += 1 end -= 1 def query_substring(self, start: int, end: int) -> str: Returns the substring from start to end indices (inclusive). return \'\'.join(self.string[start:end+1]) def is_palindrome(self, start: int, end: int) -> bool: Returns True if the substring from start to end indices (inclusive) is a palindrome, otherwise False. substring = self.string[start:end+1] return substring == substring[::-1]"},{"question":"# Scenario A popular online shopping platform employs a user recommendation system to enhance customer experience and increase sales. The system analyzes user browsing and purchase history to suggest relevant products. However, the current system tends to recommend highly popular items frequently, creating a lack of diverse recommendations for users with unique preferences. # Task Your task is to improve the recommendation algorithm by incorporating diversity into the recommendation list. This involves modifying an existing collaborative filtering algorithm to ensure that the recommended items are not only relevant but also diverse, thereby improving user satisfaction. **Function to Implement**: You need to implement a new method `diversify_recommendations` within the `RecommendationSystem` class. This method should adjust the recommendation scores to de-emphasize items that are already highly popular and promote items that increase the diversity of the recommendations. **Input**: - `recommendations`: A dictionary where keys are item IDs and values are their recommendation scores. - `user_id`: The ID of the user for whom the recommendations are being made. - `top_n`: The number of top recommendations to return. The `RecommendationSystem` class has access to the following attributes: - `user_item_matrix`: A matrix representing user interactions (ratings) with items. - `item_popularity`: A dictionary where keys are item IDs and values are their popularity scores. **Output**: - A list of `top_n` item IDs with adjusted recommendation scores that reflect both relevance and diversity. **Constraints**: - Ensure a balance between relevance and diversity in the recommendations. - Avoid recommending items that are not relevant to the user. # Steps to Complete 1. Implement the `diversify_recommendations` method in the `RecommendationSystem` class. 2. Utilize the `user_item_matrix` to assess item relevance. 3. Adjust the recommendation scores to incorporate diversity by considering item popularity and relevance. 4. Ensure the method returns a list of `top_n` items that provide a good mix of relevant and diverse recommendations. **Example Usage**: ```python recommendations = { \\"item1\\": 0.9, \\"item2\\": 0.85, \\"item3\\": 0.8, \\"item4\\": 0.75, \\"item5\\": 0.7 } user_id = \\"user123\\" top_n = 3 rec_sys = RecommendationSystem() diverse_recommendations = rec_sys.diversify_recommendations(recommendations, user_id, top_n) print(diverse_recommendations) # Output should be a list of 3 item IDs that are relevant to user123 and diverse in nature. ```","solution":"class RecommendationSystem: def __init__(self, user_item_matrix, item_popularity): Initializes the RecommendationSystem with user-item interaction matrix and item popularity. self.user_item_matrix = user_item_matrix self.item_popularity = item_popularity def diversify_recommendations(self, recommendations, user_id, top_n): Adjust the recommendation scores to ensure diversity and return top_n recommended items. Args: recommendations (dict): A dictionary where keys are item IDs and values are their recommendation scores. user_id (str): The ID of the user for whom the recommendations are. top_n (int): The number of top recommendations to return. Returns: list: Top n item IDs that are both relevant and diverse. # Incorporate diversity by scaling scores down based on item popularity. adjusted_scores = { item: score / (1 + self.item_popularity.get(item, 0)) for item, score in recommendations.items() } # Sort by adjusted scores in descending order and take the top_n sorted_items = sorted(adjusted_scores.items(), key=lambda x: x[1], reverse=True) top_items = [item for item, score in sorted_items[:top_n]] return top_items"},{"question":"# Pathfinding in a Grid You are required to write a function `find_path` that takes a 2D grid representing a maze and tries to find a path from the top-left corner to the bottom-right corner. If a path exists, the function should return the path as a list of coordinates. If no path exists, it should return an empty list. * **Input**: A 2D list `grid` where `0` represents an empty cell and `1` represents a wall. * **Output**: The function should return a list of tuples, where each tuple represents the coordinates `(row, col)` of a step in the path from the start to the end. If no path exists, return an empty list. **Constraints**: 1. The input grid will always be a non-empty rectangular matrix. 2. The start position (0, 0) and the end position (n-1, m-1) will always be empty cells (`0`). Function Signature ```python def find_path(grid: list[list[int]]) -> list[tuple[int, int]]: pass ``` # Example ```python # Example 1 input_grid = [ [0, 0, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0], [0, 1, 1, 0], ] print(find_path(input_grid)) # Output should be a list of coordinates representing the path, for example: # [(0, 0), (0, 1), (1, 1), (2, 1), (2, 2), (2, 3), (3, 3)] # Example 2 no_path_grid = [ [0, 1, 1, 0], [1, 1, 1, 0], [0, 1, 0, 0], [0, 1, 1, 0], ] print(find_path(no_path_grid)) # Output should be an empty list [], as there is no path from start to end. ``` Requirements for implementation: 1. Ensure that the grid respects the constraints of the problem. 2. Handle edge cases such as grids that have no possible path from start to end or grids that are already at the destination. 3. The solution should be efficient and avoid unnecessary computations. 4. Consider using algorithms suitable for pathfinding in grids, such as BFS or DFS.","solution":"def find_path(grid: list[list[int]]) -> list[tuple[int, int]]: from collections import deque def get_neighbors(r, c): for dr, dc in [(1, 0), (0, 1), (0, -1), (-1, 0)]: nr, nc = r + dr, c + dc if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and grid[nr][nc] == 0: yield nr, nc def bfs(): queue = deque([(0, 0, [(0, 0)])]) visited = set((0, 0)) while queue: r, c, path = queue.popleft() if (r, c) == (len(grid) - 1, len(grid[0]) - 1): return path for nr, nc in get_neighbors(r, c): if (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, path + [(nr, nc)])) return [] return bfs()"},{"question":"# Maze Solver using BFS and DFS You are given a scenario where you need to navigate through a maze represented as a 2D grid. Your task is to find a path from the start point to the end point using both Breadth-First Search (BFS) and Depth-First Search (DFS) algorithms. # Function Definitions Implement the following functions: 1. **`bfs_solve_maze`**: Finds a path in the maze using the BFS algorithm. ```python def bfs_solve_maze(maze: List[List[int]], start: Tuple[int, int], end: Tuple[int, int]) -> List[Tuple[int, int]]: Solves the maze using BFS and returns the path from start to end. :param maze: A 2D list representing the maze where \'0\' is a path and \'1\' is a wall. :param start: The starting point in the maze as a tuple (row, col). :param end: The end point in the maze as a tuple (row, col). :return: A list of tuples representing the path from start to end. pass ``` 2. **`dfs_solve_maze`**: Finds a path in the maze using the DFS algorithm. ```python def dfs_solve_maze(maze: List[List[int]], start: Tuple[int, int], end: Tuple[int, int], path: Optional[List[Tuple[int, int]]] = None) -> List[Tuple[int, int]]: Solves the maze using DFS and returns the path from start to end. :param maze: A 2D list representing the maze where \'0\' is a path and \'1\' is a wall. :param start: The starting point in the maze as a tuple (row, col). :param end: The end point in the maze as a tuple (row, col). :param path: The current path being followed (used for recursive calls). :return: A list of tuples representing the path from start to end. pass ``` # Requirements 1. **Performance**: * Ensure the BFS implementation runs in **O(n)** time complexity where n is the number of cells in the maze. * Ensure the DFS implementation utilizes a stack-based or recursive approach with a comparable time complexity. 2. **Edge Cases**: * Handle cases where the start or end points are on a wall. * Test with a maze having no possible path from start to end. * Test with the simplest mazes and larger, more complicated ones. # Input and Output * **Input**: A 2D list representing the maze, and tuples for start and end points. * **Output**: A list of tuples representing the path from start to end. # Example ```python # Example maze maze = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0] ] # Start and end points start = (0, 0) end = (4, 4) # Solve maze with BFS bfs_path = bfs_solve_maze(maze, start, end) # Solve maze with DFS dfs_path = dfs_solve_maze(maze, start, end) print(bfs_path) print(dfs_path) ``` *Expected Output*: ```python # Possible BFS Path Output [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (4, 2), (4, 3), (4, 4)] # Possible DFS Path Output (may vary due to the nature of DFS) [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (4, 2), (4, 3), (4, 4)] ```","solution":"from typing import List, Tuple, Optional from collections import deque def bfs_solve_maze(maze: List[List[int]], start: Tuple[int, int], end: Tuple[int, int]) -> List[Tuple[int, int]]: if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1: return [] # If start or end is a wall, no path is possible. rows, cols = len(maze), len(maze[0]) queue = deque([([start], start)]) visited = set() visited.add(start) while queue: path, (row, col) = queue.popleft() if (row, col) == end: return path for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: r, c = row + dr, col + dc if 0 <= r < rows and 0 <= c < cols and maze[r][c] == 0 and (r, c) not in visited: queue.append((path + [(r, c)], (r, c))) visited.add((r, c)) return [] def dfs_solve_maze(maze: List[List[int]], start: Tuple[int, int], end: Tuple[int, int], path: Optional[List[Tuple[int, int]]] = None) -> List[Tuple[int, int]]: if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1: return [] # If start or end is a wall, no path is possible. if path is None: path = [] path.append(start) if start == end: return path row, col = start rows, cols = len(maze), len(maze[0]) for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: r, c = row + dr, col + dc if 0 <= r < rows and 0 <= c < cols and maze[r][c] == 0 and (r, c) not in path: result = dfs_solve_maze(maze, (r, c), end, path.copy()) if result: return result return []"},{"question":"# Complex String Transformation You are assigned to work with a text manipulation tool for creating coded messages. The task is to implement the `transform_string` function to analyze and transform a given string based on a series of specified operations. Each operation consists of a command and an optional argument. There are three commands: - `REVERSE`: Reverse the entire string. - `REMOVE_VOWELS`: Remove all vowels from the string (`a, e, i, o, u` in both uppercase and lowercase). - `REPLACE`: Replace all occurrences of a specified character with another character. The series of operations is provided as a list of tuples. Each tuple contains a command string and, in the case of the `REPLACE` command, will have two additional arguments: the character to be replaced and the character to replace with. Implement the `transform_string` function that processes the input string through the specified operations and returns the final transformed string. **Function Signature** ```python def transform_string(input_string: str, operations: List[Tuple[str, Optional[str], Optional[str]]]) -> str: ``` ```python def transform_string(input_string: str, operations: List[Tuple[str, Optional[str], Optional[str]]]) -> str: Transform the input string based on a series of operations. Parameters ---------- input_string : str The initial string to be transformed. operations : List[Tuple[str, Optional[str], Optional[str]]] List of tuples containing operations. Each operation is a tuple where: - The first element is the command type: \'REVERSE\', \'REMOVE_VOWELS\', or \'REPLACE\'. - The second element, if applicable, is the character to be replaced (only for \'REPLACE\'). - The third element, if applicable, is the character to replace with (only for \'REPLACE\'). Returns ------- result : str The transformed string after applying all operations sequentially. Example ------- >>> transform_string(\\"Hello, World!\\", [(\\"REPLACE\\", \\"o\\", \\"X\\"), (\\"REMOVE_VOWELS\\", None, None), (\\"REVERSE\\", None, None)]) \'!dlrXW ,XllH\' result = input_string for operation in operations: command, arg1, arg2 = operation if command == \\"REVERSE\\": result = result[::-1] elif command == \\"REMOVE_VOWELS\\": vowels = \\"aeiouAEIOU\\" result = \'\'.join([char for char in result if char not in vowels]) elif command == \\"REPLACE\\": if arg1 is None or arg2 is None: raise ValueError(\\"REPLACE command requires two characters as arguments.\\") result = result.replace(arg1, arg2) else: raise ValueError(\\"Invalid command.\\") return result ``` **Constraints** - The `input_string` will only contain printable ASCII characters. - Each command in `operations` will be one of `REVERSE`, `REMOVE_VOWELS`, or `REPLACE`. - In the case of the `REPLACE` command, both the character to be replaced and the replacement character will be provided. **Notes** - Ensure proper handling of edge cases, such as empty strings or invalid commands. - Invalid commands should raise a `ValueError` with an appropriate message. - The provided example demonstrates the expected behavior of applying the operations in sequence.","solution":"def transform_string(input_string: str, operations: list) -> str: Transform the input string based on a series of operations. Parameters ---------- input_string : str The initial string to be transformed. operations : List[Tuple[str, Optional[str], Optional[str]]] List of tuples containing operations. Each operation is a tuple where: - The first element is the command type: \'REVERSE\', \'REMOVE_VOWELS\', or \'REPLACE\'. - The second element, if applicable, is the character to be replaced (only for \'REPLACE\'). - The third element, if applicable, is the character to replace with (only for \'REPLACE\'). Returns ------- result : str The transformed string after applying all operations sequentially. Example ------- >>> transform_string(\\"Hello, World!\\", [(\\"REPLACE\\", \\"o\\", \\"X\\"), (\\"REMOVE_VOWELS\\", None, None), (\\"REVERSE\\", None, None)]) \'!dlrXW ,XllH\' result = input_string for operation in operations: command, arg1, arg2 = operation if command == \\"REVERSE\\": result = result[::-1] elif command == \\"REMOVE_VOWELS\\": vowels = \\"aeiouAEIOU\\" result = \'\'.join([char for char in result if char not in vowels]) elif command == \\"REPLACE\\": if arg1 is None or arg2 is None: raise ValueError(\\"REPLACE command requires two characters as arguments.\\") result = result.replace(arg1, arg2) else: raise ValueError(\\"Invalid command.\\") return result"},{"question":"# Sentence Reversal Task You are tasked with creating a function that reverses the order of words in a given sentence while maintaining the original punctuation and capitalization. # Objective: Write a function `reverse_sentence(sentence: str) -> str` that takes a sentence as input and returns a new sentence with the words in reverse order but without altering the original punctuation, capitalization, or spacing. # Requirements: 1. The input sentence can contain alphabets, punctuation marks, and whitespace characters. 2. Preserve the original punctuation attached to words (e.g., \\"Hello,\\" becomes \\",olleH\\"). 3. Maintain the capitalization of words (e.g., \\"Hello\\" should still start with an uppercase \'H\' if it precedes a comma). 4. Any leading or trailing whitespace should be preserved in the output. # Constraints: 1. `1 <= len(sentence) <= 10^4` - The sentence can contain up to 10,000 characters. 2. The sentence will contain printable ASCII characters (0-127). # Example: ```python >>> reverse_sentence(\\"Hello, world!\\") \\"world! Hello,\\" >>> reverse_sentence(\\"This is a test.\\") \\"test. a is This\\" >>> reverse_sentence(\\" Leading and trailing spaces \\") \\" spaces trailing and Leading \\" ``` # Hints: - Consider splitting the sentence by whitespace to isolate words, then reverse the list of words. - Pay special attention to punctuation attached to words and ensure proper placement. - Use built-in Python methods to handle string manipulations efficiently.","solution":"def reverse_sentence(sentence: str) -> str: Reverses the order of words in a given sentence, maintaining original punctuation, capitalization, and spacing. # Splitting sentence into words while preserving spaces words = sentence.split(\' \') # Reversing the list of words reversed_words = words[::-1] # Joining words back with spaces reversed_sentence = \' \'.join(reversed_words) return reversed_sentence"},{"question":"**Problem Statement:** Given a string `S` and a set of rules that define how certain characters can be replaced, your task is to implement a function `replace_characters(S, rules)` that returns the resulting string after all possible replacements are applied iteratively until no more replacements can be made. # Function Signature ```python def replace_characters(S: str, rules: dict) -> str: pass ``` # Input - **S** (str): The input string which needs to be processed (1 ≤ len(S) ≤ 1000). - **rules** (dict): A dictionary where each key is a character in the string and the corresponding value is the character it should be replaced with. The dictionary can have at most 26 key-value pairs (representing possible replacements for each alphabet letter). # Output - **str**: The final processed string after all possible replacements have been made. # Constraints - Ensure the input values are within the specified constraints. If not, raise a `ValueError` with the message `\\"Invalid input\\"`. # Example ```python assert replace_characters(\\"abc\\", {\\"a\\": \\"b\\", \\"b\\": \\"c\\"}) == \\"ccc\\" assert replace_characters(\\"abcdef\\", {\\"a\\": \\"b\\", \\"b\\": \\"c\\", \\"c\\": \\"d\\"}) == \\"ddddef\\" assert replace_characters(\\"aaa\\", {\\"a\\": \\"b\\"}) == \\"bbb\\" assert replace_characters(\\"xyz\\", {}) == \\"xyz\\" ``` # Additional Information - Characters should only be replaced according to the provided rules. If a character has no corresponding replacement rule, it remains unchanged. - Multiple passes through the string should be made until no further replacements are possible. - Ensure to handle edge cases such as: - Strings with no characters that need to be replaced. - Rules that do not apply to any character in the string. # Tips - Consider implementing a loop that applies the replacements continuously until the string remains unchanged. - Ensure the solution is efficient enough to handle the upper limits of the constraints. - Test thoroughly with various edge cases to ensure correctness.","solution":"def replace_characters(S: str, rules: dict) -> str: if not isinstance(S, str) or not isinstance(rules, dict): raise ValueError(\\"Invalid input\\") if not (1 <= len(S) <= 1000) or len(rules) > 26: raise ValueError(\\"Invalid input\\") while True: new_S = \'\'.join(rules.get(char, char) for char in S) if new_S == S: break S = new_S return S"},{"question":"# Coding Assessment Question Context You are tasked with developing a part of a program for managing a contact list. The program needs to filter and sort the contacts based on specific criteria. Each contact consists of a name and a phone number. The phone number is a string containing digits and may include spaces, dashes, or parentheses for formatting purposes. Task Write a Python function `filter_and_sort_contacts` that performs the following operations: 1. Filter contacts whose phone numbers contain a specific sequence of digits. 2. Sort the filtered contacts by their names in ascending order. Function Signature ```python def filter_and_sort_contacts(contacts: list, digit_sequence: str) -> list: ``` Input * `contacts` (a list of tuples): Each tuple contains two elements: - `name` (a string): The name of the contact. - `phone_number` (a string): The contact\'s phone number. * `digit_sequence` (a string): A sequence of digits to filter the phone numbers. Output * A list of tuples containing the filtered and sorted contacts. - Each tuple contains the `name` and `phone_number`. - The list should be sorted in ascending order by the `name`. Constraints 1. Each contact\'s name and phone number will each have a maximum length of `100` characters. 2. The list of contacts will have at most `1000` entries. 3. The digit sequence will contain between `1` and `10` digits. Example ```python # Example contacts = [ (\\"Alice Johnson\\", \\"123-456-7890\\"), (\\"Bob Smith\\", \\"(123) 456-7890\\"), (\\"Charlie Brown\\", \\"555 123 4567\\"), (\\"David Tennant\\", \\"456-789-0123\\") ] digit_sequence = \\"123\\" print(filter_and_sort_contacts(contacts, digit_sequence)) # Output: [(\\"Alice Johnson\\", \\"123-456-7890\\"), (\\"Charlie Brown\\", \\"555 123 4567\\"), (\\"Bob Smith\\", \\"(123) 456-7890\\")] contacts = [ (\\"Emily Clarke\\", \\"987-654-3210\\"), (\\"Frank Lampard\\", \\"123-789-6543\\"), (\\"George Michael\\", \\"123 456 7890\\") ] digit_sequence = \\"654\\" print(filter_and_sort_contacts(contacts, digit_sequence)) # Output: [(\\"Frank Lampard\\", \\"123-789-6543\\"), (\\"Emily Clarke\\", \\"987-654-3210\\")] contacts = [ (\\"Helen Mirren\\", \\"789-(123) 4567\\"), (\\"Ian McKellen\\", \\"123-891-2345\\"), (\\"Jack Black\\", \\"912-345-6789\\") ] digit_sequence = \\"891\\" print(filter_and_sort_contacts(contacts, digit_sequence)) # Output: [(\\"Ian McKellen\\", \\"123-891-2345\\")] ``` Notes * Ignore spaces, dashes, and other non-digit characters in the phone number during the filtering process. * If no contact matches the digit sequence, the function should return an empty list. * Consider possible edge cases where the input might be empty or contain no matching contacts.","solution":"def filter_and_sort_contacts(contacts, digit_sequence): Filters contacts whose phone numbers contain a specific sequence of digits, and sorts the filtered contacts by their names in ascending order. :param contacts: List of tuples, where each tuple contains (name, phone_number) :param digit_sequence: The sequence of digits to filter the phone numbers :return: Filtered and sorted list of tuples def clean_phone(phone): return \'\'.join(filter(str.isdigit, phone)) filtered_contacts = [contact for contact in contacts if digit_sequence in clean_phone(contact[1])] return sorted(filtered_contacts, key=lambda x: x[0])"},{"question":"# Find the Intersection of Two Arrays Write a function `find_intersection` that finds the intersection of two arrays, returning a new array that contains only the common elements between the two input arrays, without duplicates. Function Signature ```python def find_intersection(arr1: List[int], arr2: List[int]) -> List[int]: pass ``` # Input - `arr1` and `arr2`: Two input arrays of integers. # Output - A new list of integers containing the common elements from both arrays, without duplicates. # Constraints - Elements in the arrays can be any integers, including negative values. - The output should be in ascending order. - The result should not contain any duplicates. # Example ```python # Example inputs arr1 = [1, 2, 2, 1, 4, 5] arr2 = [2, 2, 3, 4, 4] # Example output result = find_intersection(arr1, arr2) print(result) # Output: [2, 4] ``` # Additional Requirements - Handle edge cases such as one or both arrays being empty. - Ensure that the function is efficient in terms of time complexity. - Do not use any built-in functions that directly solve the problem. # Note You should handle the possibility that the input arrays may contain duplicates. The output should only include each common element once and it should be sorted in ascending order.","solution":"from typing import List def find_intersection(arr1: List[int], arr2: List[int]) -> List[int]: Finds the intersection of two arrays, returning a sorted list of unique common elements. # Convert both lists to sets to remove duplicates set1 = set(arr1) set2 = set(arr2) # Find the intersection of both sets intersection = set1 & set2 # Convert the intersection set to a sorted list result = sorted(list(intersection)) return result"},{"question":"You are working on a project that involves manipulating dates and times. One of the tasks is to find out the day of the week for a given date. Specifically, you need to implement a function that can determine the day of the week for any given date in the Gregorian calendar. # Task: Write a function `day_of_week` that takes three integers representing a year, a month, and a day, and returns the corresponding day of the week as a string. Function Signature: ```python def day_of_week(year: int, month: int, day: int) -> str: pass ``` # Input: 1. `year` (int): An integer representing the year (1900 ≤ year ≤ 2100). 2. `month` (int): An integer representing the month (1 ≤ month ≤ 12). 3. `day` (int): An integer representing the day (1 ≤ day ≤ 31). # Output: - A string representing the day of the week (e.g., \\"Monday\\", \\"Tuesday\\", etc.). # Examples: ```python # Example 1: year = 2021 month = 10 day = 5 # Expected output: \\"Tuesday\\" # Example 2: year = 2000 month = 1 day = 1 # Expected output: \\"Saturday\\" ``` # Constraints: - The given date will always be valid within the given range. # Notes: - You might find the algorithm known as Zeller’s Congruence useful for solving this problem. - Ensure to handle leap years correctly where February has 29 days. - The output should always be one of the following strings: \\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\". Good luck!","solution":"import datetime def day_of_week(year: int, month: int, day: int) -> str: Returns the day of the week for the given date (year, month, day) as a string. weekday = datetime.date(year, month, day).strftime(\'%A\') return weekday"},{"question":"# Context You are given an array of integers where each element represents the maximum number of steps you can jump forward in the array. Your goal is to determine the minimum number of jumps required to reach the end of the array starting from the first element. # Problem Statement Write a function `min_jumps(arr: List[int]) -> int` that takes a list of integers and returns the minimum number of jumps required to reach the last element of the array. # Expected Input and Output Formats - **Input**: A list of integers. - Example: `[2, 3, 1, 1, 4]` - **Output**: An integer representing the minimum number of jumps to reach the end. - Example for above input: `2` (jump from index 0 to index 1 and then to the end) # Constraints 1. The elements of the array will be non-negative integers. 2. The length of the array can be up to 10^4. 3. It is always possible to reach the end of the array. # Performance Requirements - Your solution should be efficient in terms of time and space complexities while handling the stated constraints. # Notes - Example 1: For the array `[2, 3, 1, 1, 4]` - Start at index 0, you can jump to index 1 or 2. - From index 1 (3 steps), you can directly reach the end. - Hence, the minimum number of jumps is 2. - Example 2: For the array `[2, 3, 0, 1, 4]` - Start at index 0, you can jump to index 1 or 2. - From index 1 (3 steps), you can directly reach the end without needing to touch index 2. - Hence, the minimum number of jumps is 2. # Implementation: Implement the function with the following signature: ```python from typing import List def min_jumps(arr: List[int]) -> int: # Your implementation here ```","solution":"from typing import List def min_jumps(arr: List[int]) -> int: n = len(arr) if n == 1: return 0 jumps = 0 farthest = 0 current_end = 0 for i in range(n-1): farthest = max(farthest, i + arr[i]) if i == current_end: jumps += 1 current_end = farthest return jumps"},{"question":"Task: Determine String Permutations Your task is to write a program that generates all the permutations of a given string. A permutation is an arrangement of the characters of the string where all characters appear only once per permutation. # Requirements - Implement a function `find_permutations(s: str) -> List[str]` that returns all possible permutations of the input string. - Output the permutations in any order. - The function should handle strings of varying lengths efficiently. # Inputs - String s: the string for which you need to find all permutations (1 ≤ len(s) ≤ 10). # Outputs - A list of strings, each string representing a unique permutation of the input string. # Constraints - The input string will consist of lowercase English letters. - Ensure that all characters of the string are used in each permutation. # Example ```python def find_permutations(s: str) -> List[str]: # Your code here # Example usage: permutations = find_permutations(\\"abc\\") print(permutations) # Outputs (order may vary): # [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] permutations = find_permutations(\\"a\\") print(permutations) # Outputs (order may vary): # [\'a\'] permutations = find_permutations(\\"ab\\") print(permutations) # Outputs (order may vary): # [\'ab\', \'ba\'] ``` **Prompt** Using the described algorithm and principles above: 1. Implement the `find_permutations` function. 2. Ensure the function showcases good performance practices. 3. Provide meaningful comments and documentation within the code.","solution":"from typing import List from itertools import permutations def find_permutations(s: str) -> List[str]: Returns all permutations of the input string s. Parameters: s (str): Input string Returns: List[str]: A list of all permutations of the input string. return [\'\'.join(p) for p in permutations(s)]"},{"question":"# Flight Route Scheduler Scenario You are tasked with developing a flight route scheduler that minimizes the total travel time for passengers. The input data consists of flight segments between various cities and their corresponding travel times. The goal is to find the shortest possible route from a given source city to a destination city. Task Implement a function `shortest_flight_route(flights: List[Tuple[str, str, int]], source: str, destination: str) -> List[str]` that: 1. Takes a list of `flights`, where each flight is represented as a tuple containing the source city, destination city, and travel time in minutes. 2. Identifies the shortest route from the `source` city to the `destination` city based on the travel time. 3. Returns the route as a list of cities in the order they will be traveled. Requirements 1. **Input Format**: * `flights`: `List[Tuple[str, str, int]]` - a list of flight segments, each represented as a tuple: `(\'source_city\', \'destination_city\', travel_time)`. * `source`: `str` - the starting city. * `destination`: `str` - the destination city. 2. **Output Format**: * `List[str]` - List of cities in the order they will be traveled, starting from `source` to `destination`. 3. **Constraints**: * All city names are case-sensitive strings. * Travel times are positive integers. * If no route exists between the `source` and `destination`, return an empty list. 4. **Performance**: * Consider using appropriate algorithms (e.g., Dijkstra\'s algorithm) for finding the shortest path. * Optimize to handle large datasets efficiently. Example ```python from typing import List, Tuple def shortest_flight_route(flights: List[Tuple[str, str, int]], source: str, destination: str) -> List[str]: # Your implementation here pass # Sample Usage flights = [ (\'A\', \'B\', 30), (\'A\', \'C\', 100), (\'B\', \'C\', 50), (\'B\', \'D\', 90), (\'C\', \'D\', 10) ] route = shortest_flight_route(flights, \'A\', \'D\') print(route) # Expected Output: [\'A\', \'B\', \'C\', \'D\'] ``` Implement the above function following the requirements. Ensure your solution efficiently handles all edge cases, such as disconnected graphs and cycles.","solution":"from typing import List, Tuple import heapq def shortest_flight_route(flights: List[Tuple[str, str, int]], source: str, destination: str) -> List[str]: # Create a graph from the flights data graph = {} for start, end, time in flights: if start not in graph: graph[start] = [] graph[start].append((end, time)) # Priority queue to hold the cities to be explored priority_queue = [(0, source, [])] # (total_time, current_city, path) # Dictionary to hold the shortest path to each city shortest_paths = {source: (0, [])} while priority_queue: current_time, current_city, current_path = heapq.heappop(priority_queue) # Adding the current city to the path current_path = current_path + [current_city] # If we reached the destination city, return the path if current_city == destination: return current_path # Explore neighboring cities for neighbor, travel_time in graph.get(current_city, []): time = current_time + travel_time if neighbor not in shortest_paths or time < shortest_paths[neighbor][0]: shortest_paths[neighbor] = (time, current_path) heapq.heappush(priority_queue, (time, neighbor, current_path)) # If destination is not reachable return [] # Sample Usage flights = [ (\'A\', \'B\', 30), (\'A\', \'C\', 100), (\'B\', \'C\', 50), (\'B\', \'D\', 90), (\'C\', \'D\', 10) ] route = shortest_flight_route(flights, \'A\', \'D\') print(route) # Expected Output: [\'A\', \'B\', \'C\', \'D\']"},{"question":"# Sum of Divisors of a Number Task Write a function `sum_of_divisors(n: int) -> int` that computes the sum of all positive divisors of a given positive integer `n`. The function should cater to small, large, and edge case values of `n` efficiently. Specifications - **Input**: A single integer `n` where `1 <= n <= 10^12`. - **Output**: The sum of all positive divisors of `n`. - **Constraints**: - Your solution should handle the edge cases efficiently (low and high bounds). - The solution should be optimized in terms of time complexity. - **Performance**: - Should ideally complete within 1 second for the upper limit of n. Example ```python def sum_of_divisors(n: int) -> int: # (Implement your solution here) pass print(sum_of_divisors(12)) # Output should be 28 (1, 2, 3, 4, 6, 12) print(sum_of_divisors(6)) # Output should be 12 (1, 2, 3, 6) print(sum_of_divisors(97)) # Output should be 98 (1, 97) ``` Hints: 1. Consider iterating up to the square root of `n` to find factors efficiently. 2. Remember that for each divisor `d` that you find up to the square root, `n / d` is also a divisor. 3. Edge cases such as 1, which has only one divisor (itself), should return 1. Provide a well-optimized solution considering the constraints and explain the core idea behind chosen optimization techniques.","solution":"import math def sum_of_divisors(n: int) -> int: Returns the sum of all positive divisors of the given positive integer n. The sum includes n itself. if n == 1: return 1 total = 0 sqrt_n = int(math.isqrt(n)) for i in range(1, sqrt_n + 1): if n % i == 0: total += i if i != n // i: total += n // i return total"},{"question":"# Handling and Analyzing Employee Data in a Company As a developer, you are tasked with creating a function `analyze_employee_data` that processes a dictionary containing employee information and returns specific analysis. The dictionary represents each employee with their ID as keys and a nested dictionary as values, containing their name, department, and salary. 1. **Data Structure**: - The employee data is provided in the form of a dictionary: ```python { \'employee_id1\': { \'name\': \'John Doe\', \'department\': \'Engineering\', \'salary\': 50000 }, ... } ``` 2. **Analysis**: - **Average Salary Calculation**: Calculate the average salary of all employees. - **Department-wise Employee Count**: Count the number of employees in each department. - **Highest Salary Identification**: Identify the employee(s) with the highest salary. 3. **Output**: - Return a dictionary containing the following keys with their corresponding values: - \'average_salary\': average salary of all employees. - \'department_counts\': dictionary with department names as keys and respective employee counts as values. - \'highest_earners\': list of employee names with the highest salary. # Function Signature ```python def analyze_employee_data(employee_data: dict) -> dict: pass ``` # Expected Output A dictionary with the calculated analysis: 1. \'average_salary\' (a float representing the average salary) 2. \'department_counts\' (a dictionary with counts of employees per department) 3. \'highest_earners\' (a list of names of employee(s) with the highest salary) # Example Usage ```python employee_data = { \'001\': {\'name\': \'John Doe\', \'department\': \'Engineering\', \'salary\': 50000}, \'002\': {\'name\': \'Jane Smith\', \'department\': \'Marketing\', \'salary\': 60000}, \'003\': {\'name\': \'Alice Johnson\', \'department\': \'Engineering\', \'salary\': 80000}, \'004\': {\'name\': \'Mike Brown\', \'department\': \'HR\', \'salary\': 40000}, \'005\': {\'name\': \'Emily Davis\', \'department\': \'Engineering\', \'salary\': 80000} } result = analyze_employee_data(employee_data) print(result) ``` Expected Output: ```python { \'average_salary\': 62000.0, \'department_counts\': { \'Engineering\': 3, \'Marketing\': 1, \'HR\': 1 }, \'highest_earners\': [\'Alice Johnson\', \'Emily Davis\'] } ```","solution":"def analyze_employee_data(employee_data: dict) -> dict: # Initialize variables for calculations total_salary = 0 department_counts = {} highest_salary = float(\'-inf\') highest_earners = [] # Iterate over employee data to gather necessary information for employee_id, employee_info in employee_data.items(): # Add this employee\'s salary to the total salary salary = employee_info[\'salary\'] total_salary += salary # Count the number of employees in each department department = employee_info[\'department\'] if department not in department_counts: department_counts[department] = 0 department_counts[department] += 1 # Determine if this employee has the highest salary if salary > highest_salary: highest_salary = salary highest_earners = [employee_info[\'name\']] elif salary == highest_salary: highest_earners.append(employee_info[\'name\']) # Calculate average salary average_salary = total_salary / len(employee_data) if employee_data else 0 # Create and return the result dictionary return { \'average_salary\': average_salary, \'department_counts\': department_counts, \'highest_earners\': highest_earners, }"},{"question":"# Scenario: You are working as a software engineer for a logistics company. Your task is to implement a function that will help in optimizing the delivery routes. Each delivery route is represented as a list of integers, where each integer indicates the distance (in miles) between consecutive delivery points. The efficiency of a route can be represented by the sum of the distances between the points. However, there\'s a constraint: the maximum allowed distance for any delivery route is a given threshold. If the total distance of the route exceeds this threshold, the route is considered inefficient. # Task: Implement the function `validate_route` that takes a list of integers and an integer threshold as inputs and returns `True` if the route\'s total distance does not exceed the threshold, and `False` otherwise. # Function Signature: ```python def validate_route(distances: list[int], threshold: int) -> bool: ``` # Input/Output: * **Input**: * `distances` (list[int]): A list of distances (1 ≤ len(distances) ≤ 10^5, 1 ≤ distances[i] ≤ 1000). * `threshold` (int): The maximum allowed distance for the route (1 ≤ threshold ≤ 10^9). * **Output**: * (bool): `True` if the total distance is less than or equal to the threshold, `False` otherwise. # Constraints: * The function should run efficiently, ideally in linear time, O(n). # Example: ```python >>> validate_route([50, 100, 150], 300) True >>> validate_route([50, 100, 150], 200) False >>> validate_route([1, 2, 3, 4, 5], 20) True >>> validate_route([1, 2, 3, 4, 5], 10) True >>> validate_route([1, 2, 3, 4, 5], 14) False ``` # Notes: - The provided function signature and example tests should be followed. - Ensure the function handles large inputs efficiently.","solution":"def validate_route(distances: list[int], threshold: int) -> bool: Returns True if the sum of distances does not exceed the threshold, else False. total_distance = sum(distances) return total_distance <= threshold"},{"question":"**Scenario**: You are developing a secure e-commerce application that includes a notification feature for order status updates. To ensure the user is not overwhelmed with repetitive notifications, each notification should only be sent once. The system logs all the notifications that have been sent in a daily log file. **Objective**: Write a function `track_notifications` that manages and tracks sent notifications using the example `NotificationTracker` class. The function should ensure that duplicate notifications are identified and skipped, while allowing new notifications to be sent. # Function Signature ```python def track_notifications(tracker: NotificationTracker, notification: str) -> bool: pass ``` # Input - `tracker`: An instance of `NotificationTracker` class which tracks notifications. - `notification`: A string representing the new notification to be sent. # Output - A boolean value: `True` if the notification was sent successfully (i.e., it was a new notification), and `False` if the notification was skipped (i.e., it was a duplicate). # Constraints - The function should handle tracking up to 100,000 notifications efficiently. - The `NotificationTracker` class supports the following methods: - `add_notification(notification: str) -> None`: Adds the notification to the tracker log. - `has_notification(notification: str) -> bool`: Returns `True` if the notification has already been sent, otherwise `False`. # Example Usage ```python class NotificationTracker: def __init__(self): self.sent_notifications = set() def add_notification(self, notification: str) -> None: self.sent_notifications.add(notification) def has_notification(self, notification: str) -> bool: return notification in self.sent_notifications tracker = NotificationTracker() print(track_notifications(tracker, \\"Order Shipped\\")) # True print(track_notifications(tracker, \\"Order Delivered\\")) # True print(track_notifications(tracker, \\"Order Shipped\\")) # False print(track_notifications(tracker, \\"Order Delivered\\")) # False print(track_notifications(tracker, \\"Order Cancelled\\")) # True ``` # Additional Notes - Ensure the function can handle duplicate notification efficiently. - Consider edge cases, such as when no notifications have been sent or when a very large number of notifications have already been sent.","solution":"def track_notifications(tracker, notification: str) -> bool: Tracks and sends new notifications only if they have not been sent before. Args: tracker (NotificationTracker): The tracker instance to manage notifications. notification (str): The notification string to be sent. Returns: bool: True if the notification was sent, False if it was a duplicate. if tracker.has_notification(notification): return False else: tracker.add_notification(notification) return True # Example NotificationTracker class implementation class NotificationTracker: def __init__(self): self.sent_notifications = set() def add_notification(self, notification: str) -> None: self.sent_notifications.add(notification) def has_notification(self, notification: str) -> bool: return notification in self.sent_notifications"},{"question":"# Problem Statement Write a function `merge_alternately` that takes two strings and merges them by alternating characters from both strings. The merging should continue with the remaining characters of the longer string once the shorter string is exhausted. Ensure to handle invalid inputs gracefully. # Function Signature ```python def merge_alternately(s1: str, s2: str) -> str: pass ``` # Input * Two parameters `s1` and `s2`, which are both strings consisting of lowercase English letters (\'a\' to \'z\'). # Output * A single string that represents the alternately merged version of the two input strings. # Constraints * The input strings will only contain lowercase English letters. * The length of each input string will be between 0 and 10^3. # Requirements * The function should continue from where the shorter string ends if one string length is greater. * Invalid inputs (non-string types) should raise a `TypeError` with the message \\"Both inputs must be strings of lowercase English letters\\". # Example ```python >>> merge_alternately(\\"abc\\", \\"def\\") \'adbecf\' >>> merge_alternately(\\"abc\\", \\"d\\") \'adbc\' >>> merge_alternately(\\"a\\", \\"xyz\\") \'axyz\' >>> merge_alternately(\\"\\", \\"xyz\\") \'xyz\' >>> merge_alternately(\\"hello\\", 123) Traceback (most recent call last): ... TypeError: Both inputs must be strings of lowercase English letters >>> merge_alternately(\\"abc\\", \\"DE\\") \'adbc\' >>> merge_alternately(\\"ab\\", [\\"x\\", \\"y\\"]) Traceback (most recent call last): ... TypeError: Both inputs must be strings of lowercase English letters ``` # Hints * Utilize string concatenation to build the result string. * Consider using a loop to alternate characters from both strings until both are exhausted. * Validate the input before processing to ensure they are strings of lowercase English letters.","solution":"import re def merge_alternately(s1: str, s2: str) -> str: Merge two strings by alternating characters from both strings. Continue with the remaining characters of the longer string if the lengths are not equal. Handles invalid inputs gracefully. if not isinstance(s1, str) or not isinstance(s2, str): raise TypeError(\\"Both inputs must be strings of lowercase English letters\\") if not re.fullmatch(r\'[a-z]*\', s1) or not re.fullmatch(r\'[a-z]*\', s2): raise TypeError(\\"Both inputs must be strings of lowercase English letters\\") merged = [] len1, len2 = len(s1), len(s2) min_len = min(len1, len2) for i in range(min_len): merged.append(s1[i]) merged.append(s2[i]) # Append remaining characters if any if len1 > min_len: merged.extend(s1[min_len:]) elif len2 > min_len: merged.extend(s2[min_len:]) return \'\'.join(merged)"},{"question":"# Scenario You have been contracted by a logistics company to develop an algorithm for merging inventory lists from multiple warehouses. Each warehouse provides a list of items it currently has in stock, sorted by item IDs. Your task is to merge these lists from different warehouses into a single consolidated list, while maintaining the sorted order. # Task Implement a function that takes multiple sorted lists and merges them into one sorted list. Provide both an iterative and a recursive solution to demonstrate different approaches to merge sorted lists. # Input - A list of k sorted lists, where each list contains n sorted elements - Constraints: The total number of elements across all lists will not exceed 10000. # Output - A single sorted list containing all elements from the input lists. # Function Signature ```python from typing import List def merge_sorted_lists_iter(lists: List[List[int]]) -> List[int]: pass def merge_sorted_lists_recur(lists: List[List[int]]) -> List[int]: pass ``` # Example ```python # Examples # Iterative version print(merge_sorted_lists_iter([[1, 3, 5], [2, 4, 6], [0, 7, 8]])) # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8] print(merge_sorted_lists_iter([[], [1, 2], [3, 4]])) # Output: [1, 2, 3, 4] print(merge_sorted_lists_iter([[1, 5, 10], [2, 4, 11], [-1, 3, 6]])) # Output: [-1, 1, 2, 3, 4, 5, 6, 10, 11] # Recursive version print(merge_sorted_lists_recur([[1, 3, 5], [2, 4, 6], [0, 7, 8]])) # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8] print(merge_sorted_lists_recur([[], [1, 2], [3, 4]])) # Output: [1, 2, 3, 4] print(merge_sorted_lists_recur([[1, 5, 10], [2, 4, 11], [-1, 3, 6]])) # Output: [-1, 1, 2, 3, 4, 5, 6, 10, 11] # Complex example import random lists_arg = [sorted(random.sample(range(-50, 50), 100)) for _ in range(5)] expected_merged_list = sorted([item for sublist in lists_arg for item in sublist]) assert merge_sorted_lists_iter(lists_arg) == expected_merged_list assert merge_sorted_lists_recur(lists_arg) == expected_merged_list ``` # Constraints - The function must handle edge cases efficiently. - Consider both time and space complexities. - Do not use built-in sort functions. You may use heap data structures for merging, if needed.","solution":"from typing import List import heapq def merge_sorted_lists_iter(lists: List[List[int]]) -> List[int]: Merges multiple sorted lists into a single sorted list iteratively. merged_list = [] min_heap = [] # Initialize the heap with the first element from each list, along with the index of the list and the element index for i, lst in enumerate(lists): if lst: heapq.heappush(min_heap, (lst[0], i, 0)) # Extract elements from the heap and push the next element from the same list into the heap while min_heap: value, list_index, element_index = heapq.heappop(min_heap) merged_list.append(value) next_index = element_index + 1 if next_index < len(lists[list_index]): heapq.heappush(min_heap, (lists[list_index][next_index], list_index, next_index)) return merged_list def merge_sorted_lists_recur(lists: List[List[int]]) -> List[int]: Merges multiple sorted lists into a single sorted list recursively. if not lists: return [] def merge_two_lists(l1, l2): merged = [] i = j = 0 while i < len(l1) and j < len(l2): if l1[i] < l2[j]: merged.append(l1[i]) i += 1 else: merged.append(l2[j]) j += 1 if i < len(l1): merged.extend(l1[i:]) if j < len(l2): merged.extend(l2[j:]) return merged def merge_recursive(lists): if len(lists) == 1: return lists[0] mid = len(lists) // 2 left_merged = merge_recursive(lists[:mid]) right_merged = merge_recursive(lists[mid:]) return merge_two_lists(left_merged, right_merged) return merge_recursive(lists)"},{"question":"# Problem Statement: You are tasked with writing a function to validate a password based on a given set of criteria. The password must meet the following conditions: - At least 8 characters long - Contains both uppercase and lowercase letters - Includes at least one numerical digit - Contains at least one special character from the set `!@#%^&*()-_` Requirements: 1. **Function Name**: `validate_password` 2. **Input**: Takes a single argument—a string `password` representing the password to validate. 3. **Output**: Returns `True` if the password meets all criteria, `False` otherwise. Constraints: * The password must be a non-empty string. Example: ```python def validate_password(password: str) -> bool: # Your implementation here # Example Usage >>> validate_password(\\"StrongPass1!\\") True >>> validate_password(\\"weakpass\\") False >>> validate_password(\\"NoDigits!!\\") False >>> validate_password(\\"SHOUT123!\\") False >>> validate_password(\\"Valid1-Pass\\") True ``` Notes: 1. Consider edge cases such as passwords that are almost valid but are missing one criterion. 2. Ensure your function is efficient and readable, making use of regular expressions or other Python string methods as needed. 3. You may assume the input will always be a string containing at least one character. Detailed Steps: 1. Check if the password length is at least 8 characters. 2. Check if the password contains at least one uppercase letter. 3. Check if the password contains at least one lowercase letter. 4. Check if the password contains at least one numerical digit. 5. Check if the password contains at least one special character from the specified set. 6. Return `True` if all conditions are met; otherwise, return `False`.","solution":"import re def validate_password(password: str) -> bool: Validates the password based on the given criteria. if len(password) < 8: return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'[0-9]\', password): return False if not re.search(r\'[!@#%^&*()-_[]{}]\', password): return False return True"},{"question":"# Question Given a list of integers, you are required to form the largest possible integer by concatenating the elements of the list. Each integer in the list should appear in the resultant integer exactly once, but the order of concatenation can be chosen to maximize the resultant integer. Write a function `largest_concatenated_number(lst: List[int]) -> str` that takes a list of non-negative integers and returns the largest concatenated integer as a string. # Input - A list `lst` containing non-negative integers where each integer is within the range ([0, 10^9]). - The length of the list `lst` is between 1 and 100. # Output - A string representing the largest concatenated number formed by the elements in the list. # Constraints - The solution should handle edge cases where the list might contain zero or one elements. - Ensure that the result is returned as a string to accommodate very large integers. # Example ```python >>> largest_concatenated_number([10, 2]) \'210\' >>> largest_concatenated_number([3, 30, 34, 5, 9]) \'9534330\' >>> largest_concatenated_number([1]) \'1\' >>> largest_concatenated_number([10, 0, 0]) \'100\' ``` # Notes - The key to solving this problem is deciding the order of concatenation, which is more complex than simply sorting the numbers. - A custom comparator or sorting logic is necessary to get the desired ordering.","solution":"from typing import List def largest_concatenated_number(lst: List[int]) -> str: if not lst: return \'0\' # Convert integers to strings for custom sorting lst = list(map(str, lst)) # Custom sort comparator: sorts by the concatenated result of two numbers lst.sort(key=lambda x: x*10, reverse=True) # Edge case check: if the highest number after sorting is \'0\', the whole number is \'0\' if lst[0] == \'0\': return \'0\' return \'\'.join(lst)"},{"question":"# Question: Implement a Simple Simulation of a Queue System Context Queue systems are fundamental in various scenarios such as customer service management, computer processing, and network packet handling. Understanding the behavior of such systems helps in analyzing and optimizing performance. This problem requires simulating a simple FIFO (First In, First Out) queue system. Task Implement a class `QueueSystem` that simulates a queue with the following characteristics: 1. The queue operates on a FIFO basis. 2. It supports operations to enqueue (add) elements, dequeue (remove) elements, and check the current state of the queue. 3. The queue can handle an arbitrary number of elements. Requirements 1. **Class Signature**: ```python class QueueSystem: def __init__(self): # Initialize the queue system pass def enqueue(self, element): # Add an element to the end of the queue pass def dequeue(self): # Remove an element from the front of the queue and return it pass def current_state(self): # Return a list of elements currently in the queue pass ``` 2. **Methods**: - `enqueue(element)`: Takes an element and adds it to the end of the queue. - `dequeue()`: Removes the frontmost element from the queue and returns it. If the queue is empty, raise an `IndexError` with the message \\"Queue is empty\\". - `current_state()`: Returns a list of all elements currently in the queue in the order they were added. 3. **Constraints**: - Elements can be of any data type. Examples ```python >>> q = QueueSystem() >>> q.enqueue(10) >>> q.enqueue(20) >>> q.enqueue(30) >>> q.current_state() [10, 20, 30] >>> q.dequeue() 10 >>> q.current_state() [20, 30] >>> q.dequeue() 20 >>> q.dequeue() 30 >>> q.dequeue() Traceback (most recent call last): ... IndexError: Queue is empty ``` <details> <summary>Hint</summary> Use a list to maintain the elements in the queue and implement operations to manipulate this list appropriately to maintain FIFO behavior. </details>","solution":"class QueueSystem: def __init__(self): self.queue = [] def enqueue(self, element): self.queue.append(element) def dequeue(self): if not self.queue: raise IndexError(\\"Queue is empty\\") return self.queue.pop(0) def current_state(self): return self.queue[:]"},{"question":"# Coding Assessment Question Scenario You are contributing to a library management system that helps in categorizing books and their authors. One feature needed is to generate a bibliographic summary of an author\'s works given a list of their books and publication years. The summary should list the titles in alphabetical order, each followed by the year it was published. Task Write a function `bibliographic_summary` that takes a list of tuples as input, where each tuple contains the title of a book (a string) and its publication year (an integer). The function should return a single string where each line contains a book title followed by the publication year, and the titles must be listed in alphabetical order. Input * A single list of tuples `books` where each tuple `(title, year)` represents: * `title` (1 ≤ |title| ≤ 100) is a string containing the title of the book. * `year` (1500 ≤ year ≤ 2023) is an integer representing the year the book was published. * The list can contain between 1 and 1000 tuples. Output * A single string where each line contains a title followed by the year of publication, with book titles sorted in alphabetical order. Constraints * The function must efficiently handle a list of up to 1000 tuples. * The function must return a string representation of the bibliographic summary with titles sorted alphabetically. Example ```python assert bibliographic_summary([(\\"The Great Gatsby\\", 1925), (\\"1984\\", 1949), (\\"Brave New World\\", 1932)]) == \\"1984 1949nBrave New World 1932nThe Great Gatsby 1925\\" assert bibliographic_summary([(\\"A Tale of Two Cities\\", 1859), (\\"Les Misérables\\", 1862)]) == \\"A Tale of Two Cities 1859nLes Misérables 1862\\" assert bibliographic_summary([(\\"Dune\\", 1965), (\\"A Clockwork Orange\\", 1962), (\\"Fahrenheit 451\\", 1953)]) == \\"A Clockwork Orange 1962nDune 1965nFahrenheit 451 1953\\" ```","solution":"def bibliographic_summary(books): Generates a bibliographic summary of an author\'s works, given a list of their books and publication years. Args: books (list of tuples): A list of tuples where each tuple contains a book title (string) and its publication year (int). Returns: str: A single string where each line contains a book title followed by the publication year, titles sorted in alphabetical order. # Sort the list of books by the title (first element of each tuple) sorted_books = sorted(books, key=lambda book: book[0]) # Generate the summary string summary_lines = [f\\"{title} {year}\\" for title, year in sorted_books] return \\"n\\".join(summary_lines)"},{"question":"# Scenario You are developing a software application for a logistics company to help manage their inventory. The company keeps track of products using a unique identifier and stores these products in various warehouses. They need a way to efficiently find the total quantity of any given product across all warehouses or the total quantity stored in a specific warehouse. # Task Write a class `Inventory` that provides methods to: 1. Add products to the inventory. 2. Retrieve the total quantity of a specific product across all warehouses. 3. Retrieve the total quantity of all products in a specific warehouse. # Class Definition ```python class Inventory: def __init__(self): self.inventory = {} def add_product(self, warehouse: str, product_id: str, quantity: int) -> None: Adds the specified quantity of the product to the specified warehouse. Args: - warehouse (str): The name of the warehouse. - product_id (str): The unique identifier of the product. - quantity (int): The quantity of the product to be added. Raises: - ValueError: If quantity is negative. if quantity < 0: raise ValueError(\\"Quantity cannot be negative\\") if warehouse not in self.inventory: self.inventory[warehouse] = {} if product_id in self.inventory[warehouse]: self.inventory[warehouse][product_id] += quantity else: self.inventory[warehouse][product_id] = quantity def get_product_quantity(self, product_id: str) -> int: Retrieves the total quantity of the specified product across all warehouses. Args: - product_id (str): The unique identifier of the product. Returns: - int: The total quantity of the product. total_quantity = 0 for warehouse in self.inventory: if product_id in self.inventory[warehouse]: total_quantity += self.inventory[warehouse][product_id] return total_quantity def get_warehouse_quantity(self, warehouse: str) -> int: Retrieves the total quantity of all products in the specified warehouse. Args: - warehouse (str): The name of the warehouse. Returns: - int: The total quantity of all products. if warehouse not in self.inventory: return 0 return sum(self.inventory[warehouse].values()) ``` # Example ```python # Create an Inventory instance inv = Inventory() # Add products inv.add_product(\\"Warehouse_A\\", \\"Product_1\\", 50) inv.add_product(\\"Warehouse_A\\", \\"Product_2\\", 20) inv.add_product(\\"Warehouse_B\\", \\"Product_1\\", 30) inv.add_product(\\"Warehouse_B\\", \\"Product_3\\", 100) # Retrieve the total quantity of a specific product across all warehouses print(inv.get_product_quantity(\\"Product_1\\")) # Output: 80 # Retrieve the total quantity of all products in a specific warehouse print(inv.get_warehouse_quantity(\\"Warehouse_A\\")) # Output: 70 ``` # Constraints * `warehouse` and `product_id` are non-empty strings. * `quantity` is a non-negative integer. * If the warehouse does not exist, the methods should handle it appropriately without raising exceptions.","solution":"class Inventory: def __init__(self): self.inventory = {} def add_product(self, warehouse: str, product_id: str, quantity: int) -> None: Adds the specified quantity of the product to the specified warehouse. Args: - warehouse (str): The name of the warehouse. - product_id (str): The unique identifier of the product. - quantity (int): The quantity of the product to be added. Raises: - ValueError: If quantity is negative. if quantity < 0: raise ValueError(\\"Quantity cannot be negative\\") if warehouse not in self.inventory: self.inventory[warehouse] = {} if product_id in self.inventory[warehouse]: self.inventory[warehouse][product_id] += quantity else: self.inventory[warehouse][product_id] = quantity def get_product_quantity(self, product_id: str) -> int: Retrieves the total quantity of the specified product across all warehouses. Args: - product_id (str): The unique identifier of the product. Returns: - int: The total quantity of the product. total_quantity = 0 for warehouse in self.inventory: if product_id in self.inventory[warehouse]: total_quantity += self.inventory[warehouse][product_id] return total_quantity def get_warehouse_quantity(self, warehouse: str) -> int: Retrieves the total quantity of all products in the specified warehouse. Args: - warehouse (str): The name of the warehouse. Returns: - int: The total quantity of all products. if warehouse not in self.inventory: return 0 return sum(self.inventory[warehouse].values())"},{"question":"# Coding Assessment Question Context You are tasked with implementing a system that helps manage and optimize the schedule of a flight plan. Each flight has a duration, departure time, and arrival time. For any given point in time, it\'s important to know how many flights are in the air. Problem Statement Write a function that, given a list of flights, returns the maximum number of flights that are in the air simultaneously. Each flight is described by its departure and arrival times. Input - **flights** (List of List of Integers): Each flight is represented as a list of two integers `[dep_time, arr_time]`, where `dep_time` is the departure time and `arr_time` is the arrival time. Output - An integer representing the maximum number of flights that are in the air at any same time. Constraints - `1 <= len(flights) <= 1000` - `0 <= dep_time < arr_time <= 10^9` - Each flight\'s departure and arrival times will be distinct integers. Function Signature ```python def max_flights_in_air(flights: List[List[int]]) -> int: pass ``` Example ```python input: flights = [ [1, 5], [2, 6], [3, 7], [4, 8], [5, 9] ] output: 4 ``` Notes * You may assume that the input times do not overlap within a single flight and are given in a 24-hour format where `0 <= time < 60 * 24`. * Optimize your solution to handle up to 1000 flights efficiently. * Think about events-based simulation or a suitable data structure to manage overlapping intervals.","solution":"def max_flights_in_air(flights): Returns the maximum number of flights that are in the air simultaneously. events = [] for flight in flights: dep_time, arr_time = flight events.append((dep_time, \'departure\')) events.append((arr_time, \'arrival\')) events.sort() max_flights = 0 current_flights = 0 for event in events: if event[1] == \'departure\': current_flights += 1 max_flights = max(max_flights, current_flights) else: current_flights -= 1 return max_flights"},{"question":"# Question: Evaluate Postfix Expression Using Stack You need to implement a function that evaluates a given postfix expression (also known as Reverse Polish Notation). Postfix notation is a mathematical notation in which operators follow their operands. The expression is given as a list of strings, where each string can be an operand or operator. 1. **Function Implementation**: - `evaluate_postfix(expression: List[str]) -> int`: Evaluate the postfix expression and return the resulting integer value. 2. **Input and Output Formats**: - Input: A list of strings `expression` where each element is either an integer represented as a string, or one of the operators `+`, `-`, `*`, or `/`. - Output: A single integer which is the result of evaluating the postfix expression. 3. **Constraints**: - The length of the input list will not exceed 100. - Every intermediate and final result will be within the 32-bit signed integer range. - Division should truncate towards zero (integer division). 4. **Example**: ```python print(evaluate_postfix([\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"])) # Output: 9 print(evaluate_postfix([\\"4\\", \\"13\\", \\"5\\", \\"/\\", \\"+\\"])) # Output: 6 print(evaluate_postfix([\\"10\\", \\"6\\", \\"9\\", \\"3\\", \\"+\\", \\"-11\\", \\"*\\", \\"/\\", \\"*\\", \\"17\\", \\"+\\", \\"5\\", \\"+\\"])) # Output: 22 ``` 5. **Edge Cases**: - The expression contains only one operand. - The division operation should handle negative numbers correctly. - Expressions that lead to zero results. # Requirements Your implementation will be evaluated based on: - Correctness of the evaluated result. - Proper handling of integer division and truncation. - Efficiency in processing the postfix expression using a stack data structure. # Submission Submit your implementation of the `evaluate_postfix` function. Ensure to include edge case handling and consider the requirements specified.","solution":"from typing import List def evaluate_postfix(expression: List[str]) -> int: stack = [] for token in expression: if token.isdigit() or (token[0] == \'-\' and len(token) > 1): stack.append(int(token)) else: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(int(a / b)) # Truncate towards zero return stack[0]"},{"question":"# Problem Statement Create a function to compute the \\"look-and-say\\" sequence for a given number of terms. The look-and-say sequence is a sequence of numbers where each term is generated by describing the digits of the previous term. For example, starting with \\"1\\" (the first term), the second term is \\"11\\" (one 1), the third term is \\"21\\" (two 1s), the fourth term is \\"1211\\" (one 2, one 1), and so on. Function Definition **`look_and_say_sequence`**: - **Input**: A positive integer `n` representing the number of terms to generate. - **Output**: A list of the first `n` terms of the look-and-say sequence, each represented as a string. Example: ```python def look_and_say_sequence(n: int) -> list: pass # Your implementation here. ``` Requirements - The function should raise a `ValueError` for non-positive integers and non-integer inputs. - Input constraints: ( 1 leq n leq 30 ). Example Scenarios - `look_and_say_sequence(1)` should return `[\\"1\\"]`. - `look_and_say_sequence(5)` should return `[\\"1\\", \\"11\\", \\"21\\", \\"1211\\", \\"111221\\"]`. Constraints & Performance - The algorithm should handle generating terms in a reasonable amount of time given the constraints. - Ensure the solution minimizes memory usage by not storing unnecessary intermediate results. - Avoid excessive string concatenations within your loops to optimize performance.","solution":"def look_and_say_sequence(n: int) -> list: if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") def next_term(term): result = [] i = 0 while i < len(term): count = 1 while i + 1 < len(term) and term[i] == term[i + 1]: i += 1 count += 1 result.append(f\\"{count}{term[i]}\\") i += 1 return \'\'.join(result) sequence = [\\"1\\"] for _ in range(n - 1): sequence.append(next_term(sequence[-1])) return sequence"},{"question":"# Reverse Words in a String Background The goal of this exercise is to assess your ability to manipulate strings and reverse words in a given input string. Task Your task is to implement a function: 1. `reverse_words_in_string(sentence: str) -> str`: Reverses the order of words in the given sentence. Each word in the output should appear in the opposite order it appeared in the input sentence. Details: - The `sentence` is a string that includes only alphabetic characters and spaces. - Words are sequences of alphabetic characters separated by spaces. - Ensure that the order of the words is preserved, but their internal characters are reversed. Input - `sentence`: A string containing the sentence to be processed. Output - A string where each word has its characters reversed, but the order of words remains the same. Examples ```python assert reverse_words_in_string(\'Hello World\') == \'olleH dlroW\' assert reverse_words_in_string(\'The quick brown fox\') == \'ehT kciuq nworb xof\' assert reverse_words_in_string(\'Python\') == \'nohtyP\' assert reverse_words_in_string(\'Racecar\') == \'racecaR\' ``` Requirements - Implement the function to reverse the characters in each word of the sentence. - Maintain the order of the words as they appear in the original sentence. Constraints - The sentence will contain only alphabetic characters and spaces. - The sentence will not be empty and will not contain leading or trailing spaces. - Length of the sentence: 1 ≤ length of sentence ≤ 10^5","solution":"def reverse_words_in_string(sentence: str) -> str: Reverses the order of characters in each word of the given sentence. Parameters: - sentence: str : A string containing the sentence to be processed. Returns: - str : A string where each word has its characters reversed, but the order of words remains the same. words = sentence.split(\' \') reversed_words = [\'\'.join(reversed(word)) for word in words] return \' \'.join(reversed_words)"},{"question":"# Scenario Consider solving a problem in which you are required to process a sequence of unique integers and organize them into an optimal binary search tree (BST). The challenge here is to ensure that the height of the tree is minimal, as it would affect the efficiency of search operations. # Task Write a function `generate_minimal_bst(arr: List[int]) -> Optional[TreeNode]` that constructs a minimal height binary search tree from a sorted list of unique integers. # Function Signature ```python from typing import List, Optional class TreeNode: def __init__(self, key: int): self.left = None self.right = None self.val = key def generate_minimal_bst(arr: List[int]) -> Optional[TreeNode]: ``` # Input * A list `arr` of unique integers sorted in ascending order. The length of the list will be between 0 and 50, inclusive. # Output * The root node of the binary search tree. # Constraints * The input list contains unique integers sorted in ascending order. * The length of the list can be as small as 0 (producing an empty BST) and as large as 50. * The binary search tree should be balanced, with minimal height. # Example 1. For an input `arr = []` - The function should return `None` representing an empty tree. 2. For an input `arr = [1, 2, 3]` - The function should return the root node of the following tree: ``` 2 / 1 3 ``` 3. For an input `arr = [1, 2, 3, 4, 5, 6, 7]` - The function should return the root node of the following tree: ``` 4 / 2 6 / / 1 3 5 7 ``` # Additional Requirements * Ensure the function handles edge cases like an empty list and large list sizes efficiently. * The BST should have minimal height, balancing the nodes as evenly as possible.","solution":"from typing import List, Optional class TreeNode: def __init__(self, key: int): self.left = None self.right = None self.val = key def generate_minimal_bst(arr: List[int]) -> Optional[TreeNode]: if not arr: return None def build_bst(start: int, end: int) -> Optional[TreeNode]: if start > end: return None mid = (start + end) // 2 root = TreeNode(arr[mid]) root.left = build_bst(start, mid - 1) root.right = build_bst(mid + 1, end) return root return build_bst(0, len(arr) - 1)"}]'),F={name:"App",components:{PoemCard:C},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},L={class:"search-container"},O={class:"card-container"},N={key:0,class:"empty-state"},R=["disabled"],z={key:0},P={key:1};function D(r,e,l,p,s,a){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",L,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",O,[(n(!0),i(b,null,w(a.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",N,' No results found for "'+d(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",z,"See more"))],8,R)):u("",!0)])}const Y=c(F,[["render",D],["__scopeId","data-v-38c08263"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/54.md","filePath":"deepseek/54.md"}'),j={name:"deepseek/54.md"},V=Object.assign(j,{setup(r){return(e,l)=>(n(),i("div",null,[x(Y)]))}});export{M as __pageData,V as default};
