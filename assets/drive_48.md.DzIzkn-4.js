import{_ as p,o as n,c as i,a as t,m as h,t as d,C as g,M as _,U as y,f as u,F as b,p as v,e as w,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function N(r,e,l,c,s,a){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),h(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),h(d(l.poem.solution),1)])])])}const O=p(k,[["render",N],["__scopeId","data-v-c3df498d"]]),A=JSON.parse('[{"question":"Given the class definitions for a `Node`, `DirectedEdge`, and a `DirectedGraph`, implement a function that performs a Depth-First Search (DFS) starting from a given node in a directed graph. Your task is to determine if there is a path from the starting node to all other nodes in the graph. # Function Signature: ```python def dfs_traversal(graph: DirectedGraph, start_node: str) -> List[str]: Perform DFS on the given directed graph starting from the start_node. Parameters: - graph: DirectedGraph instance representing the directed graph. - start_node: A string representing the name of the starting node. Returns: - List of node names in the order they are visited during the DFS traversal, starting from start_node. ``` # Input: - A `DirectedGraph` object which already contains the graph nodes and edges. - A string representing the name of the starting node. # Output: - A list of node names in the order they were visited during DFS traversal starting from the start_node. # Constraints: - Assume all node names are unique. - The starting node will always be part of the graph. - The graph may contain cycles and disconnected components. # Example: ```python # Constructing a sample graph graph_dict = { \'A\': [\'B\', \'C\'], \'B\': [\'D\', \'E\'], \'C\': [\'F\'], \'D\': [], \'E\': [\'F\'], \'F\': [] } graph = DirectedGraph(graph_dict) # Running the dfs_traversal function print(dfs_traversal(graph, \'A\')) # Output: [\'A\', \'B\', \'D\', \'E\', \'F\', \'C\'] ``` # Note: - The order of node visits may vary as long as it follows the DFS traversal method. Multiple correct answers may exist due to the nature of graph traversal. # Additional Requirements: - Ensure the function handles graphs with cycles without infinite recursion. - The function should be able to handle disconnected nodes gracefully.","solution":"class Node: def __init__(self, name: str): self.name = name self.edges = [] def add_edge(self, node): self.edges.append(node) class DirectedGraph: def __init__(self): self.nodes = {} def add_node(self, name: str): if name not in self.nodes: self.nodes[name] = Node(name) def add_edge(self, from_node: str, to_node: str): if from_node in self.nodes and to_node in self.nodes: self.nodes[from_node].add_edge(self.nodes[to_node]) def dfs_traversal(graph: DirectedGraph, start_node: str) -> list: visited = set() result = [] def dfs(node): if node.name not in visited: visited.add(node.name) result.append(node.name) for edge in node.edges: dfs(edge) start = graph.nodes[start_node] dfs(start) return result"},{"question":"You are provided with a function for generating prime numbers less than a given integer ( n ) using a modified version of the Sieve of Eratosthenes algorithm. Your task is to extend this functionality in the following ways: 1. **Prime Count**: Write a function `count_primes(n)` which uses `get_primes(n)` and returns the count of prime numbers less than ( n ). 2. **Prime Sum**: Write a function `sum_primes(n)` which uses `get_primes(n)` and returns the sum of all prime numbers less than ( n ). # Expected Input and Output * **Input**: * `n` (integer): A positive integer greater than or equal to 2. * **Output**: * `count_primes(n)`: An integer representing the number of prime numbers less than ( n ). * `sum_primes(n)`: An integer representing the sum of all prime numbers less than ( n ). # Function Signatures ```python def count_primes(n: int) -> int: pass def sum_primes(n: int) -> int: pass ``` # Examples ```python # Example 1 n = 10 print(count_primes(n)) # Output: 4 print(sum_primes(n)) # Output: 17 # Example 2 n = 20 print(count_primes(n)) # Output: 8 print(sum_primes(n)) # Output: 77 ``` # Constraints * ( n ) will be a positive integer greater than or equal to 2. * Ensure that your implementations of `count_primes` and `sum_primes` are optimized for performance.","solution":"def get_primes(n): Return a list of all prime numbers less than n if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start*start, n, start): sieve[i] = False return [num for num, is_prime in enumerate(sieve) if is_prime] def count_primes(n): Returns the count of prime numbers less than n primes = get_primes(n) return len(primes) def sum_primes(n): Returns the sum of all prime numbers less than n primes = get_primes(n) return sum(primes)"},{"question":"You are tasked with writing a function that computes the minimum number of bit flips required to convert one integer to another. Given two integers, `A` and `B`, determine the number of differing bits between their binary representations. # Details * **Function Name**: `minimal_bit_flips` * **Input**: Two integers, `A` and `B`. * **Output**: An integer representing the minimal number of bit flips required to transform `A` into `B`. # Input & Output Format * `A` and `B` will be non-negative integers (0 ≤ `A`, `B` ≤ 10^9). **Example**: ```python assert minimal_bit_flips(29, 15) == 2 assert minimal_bit_flips(7, 8) == 4 assert minimal_bit_flips(123, 456) == 6 ``` # Constraints * Your solution should handle edge cases efficiently. * Performance is critical; the function should operate within an acceptable time frame for the given constraints. # Explanation: 1. Compute the XOR of `A` and `B`. 2. Count the number of `1`s in the resulting binary number - each `1` represents a differing bit. 3. Return the count of these `1`s. # Function Signature ```python def minimal_bit_flips(A: int, B: int) -> int: # Implementation here ``` Developers should ensure they handle large inputs efficiently and that their solution is optimized for performance within the provided constraints.","solution":"def minimal_bit_flips(A, B): Returns the minimal number of bit flips required to convert integer A to integer B. # Compute XOR of A and B x = A ^ B # Count the number of 1s in the binary representation of the XOR result count = bin(x).count(\'1\') return count"},{"question":"# Question: Implement an Optimized Power Function with Detailed Analysis You\'re required to implement a power function that calculates `a` raised to the power `n` efficiently. The function should also be capable of returning the result modulo `mod` if `mod` is specified. Implement it using both an iterative and a recursive approach to demonstrate your understanding of different problem-solving methods. Function Signature ```python def power(a: int, n: int, mod: int = None) -> int: pass def power_recur(a: int, n: int, mod: int = None) -> int: pass ``` # Input * An integer `a` (1 <= |a| <= 10^9) representing the base. * An integer `n` (0 <= n <= 10^9) representing the exponent. * An optional integer `mod` (2 <= mod <= 10^9), which is the number to compute the result modulo. If `mod` is not provided, you should return the result as a standard integer. # Output * The function should return the result of `a` raised to the power `n`. If `mod` is given, return `a^n % mod`. # Constraints * Ensure that your implementations are efficient to avoid timeouts for large inputs. * Handle edge cases such as `n` being zero, `a` being one, and handle the optional `mod` correctly. # Example ```python # Examples without mod print(power(2, 10)) # Output: 1024 print(power_recur(2, 10)) # Output: 1024 # Examples with mod print(power(2, 10, 1000)) # Output: 24 print(power_recur(2, 10, 1000)) # Output: 24 # Edge cases print(power(2, 0)) # Output: 1 print(power_recur(2, 0)) # Output: 1 ``` # Explanation 1. **No Modulo**: For `power(2, 10)`, the function should return `2^10 = 1024`. 2. **With Modulo**: For `power(2, 10, 1000)`, the function should return `(2^10) % 1000 = 24`. 3. **Edge Cases**: For `power(2, 0)`, the function should return `1` since any number to the power of zero is one. Ensure to consider efficient implementation principles during coding to handle large numbers and prevent overflow errors where applicable.","solution":"def power(a: int, n: int, mod: int = None) -> int: Iterative method to calculate a raised to the power n efficiently. If mod is provided, return the result modulo mod. result = 1 base = a if mod is None else a % mod while n > 0: if n % 2 == 1: result = result * base if mod is None else (result * base) % mod base = base * base if mod is None else (base * base) % mod n //= 2 return result def power_recur(a: int, n: int, mod: int = None) -> int: Recursive method to calculate a raised to the power n efficiently. If mod is provided, return the result modulo mod. if n == 0: return 1 half_power = power_recur(a, n // 2, mod) if mod is not None: half_power = half_power % mod if n % 2 == 0: return (half_power * half_power) % mod if mod is not None else half_power * half_power else: return (half_power * half_power * a) % mod if mod is not None else half_power * half_power * a"},{"question":"Problem Statement You are tasked to implement a function that finds all numbers within a given range [low, high] that have a unique property. Specifically, a number has this property if it equals the sum of its digits each raised to consecutive powers starting from 1. For example: - 89 has the property because 8^1 + 9^2 = 89. - 135 has the property because 1^1 + 3^2 + 5^3 = 135. Write a function `digit_power_sum_numbers` that takes two integers, `low` and `high`, and returns a list of all numbers within the given range [low, high] with this property. Function Signature ```python def digit_power_sum_numbers(low: int, high: int) -> list: pass ``` Input * `low` (int): The lower bound of the range (1 ≤ low ≤ high ≤ 10^6). * `high` (int): The upper bound of the range. Output * List of integers having the property described, ordered from `low` to `high`. Constraints * The function should handle ranges up to [1, 10^6]. * Ensure the function runs efficiently for larger ranges. Examples ```python # Example 1 # Input: low = 1, high = 150 # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 89, 135] print(digit_power_sum_numbers(1, 150)) # Example 2 # Input: low = 1, high = 10 # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] print(digit_power_sum_numbers(1, 10)) ``` Performance Requirements * The function should be optimized to avoid unnecessary calculations. * Aim for the most efficient time and space complexity without sacrificing code clarity and correctness.","solution":"def digit_power_sum_numbers(low, high): Returns a list of all numbers within the given range [low, high] that equal the sum of their digits each raised to consecutive powers starting from 1. result = [] for num in range(low, high + 1): digits = list(map(int, str(num))) digit_sum_power = sum(digit ** (i + 1) for i, digit in enumerate(digits)) if digit_sum_power == num: result.append(num) return result"},{"question":"Context You are given a large array of numbers, and you need to frequently perform range queries to find the sum of elements within a specified range. Implement the Segment Tree to efficiently handle these range sum queries. Task Implement a class `SumSegmentTree` with the following methods: 1. **`__init__(self, arr: List[int])`**: Initializes the Segment Tree with the given array `arr` and prepares it to handle sum queries. 2. **`query(self, L: int, R: int) -> int`**: Returns the sum of elements in the range `[L, R]` (both inclusive). Input and Output - The `__init__` method will receive a list of integers `arr` of size `n` (1 ≤ n ≤ 10^5). - The `query` method will receive two integers, `L` and `R` (0 ≤ L ≤ R < n). - The `query` method should return the sum of the elements from index `L` to `R`. Constraints - The input array will have at most 100,000 elements. - Each sum query should be answered in O(log n) time. Example ```python # Example usage arr = [2, 4, 5, 3, 4] seg_tree = SumSegmentTree(arr) print(seg_tree.query(2, 4)) # Output: 12 print(seg_tree.query(0, 3)) # Output: 14 ``` Additional Notes - You do not need to handle updates to the array. - You may assume that the input parameters are always valid and within the specified constraints.","solution":"class SumSegmentTree: def __init__(self, arr): n = len(arr) self.n = n self.tree = [0] * (2 * n) # Build the segment tree for i in range(n): self.tree[n + i] = arr[i] for i in range(n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def query(self, L, R): res = 0 L += self.n R += self.n while L <= R: if L % 2 == 1: res += self.tree[L] L += 1 if R % 2 == 0: res += self.tree[R] R -= 1 L //= 2 R //= 2 return res"},{"question":"You are tasked with implementing a mathematically-based encryption scheme where the sum of two numbers is treated differently than usual. Instead of using the `+` operator, you are to simulate addition using bitwise operations. This helps in digging deeper into the nature of computer arithmetic and bit manipulation. # Function Signature: `def add_bitwise_operator(x: int, y: int) -> int:` # Input: * Two integers, `x` and `y` where `0 <= x, y <= 10^9`. # Output: * Return the sum of `x` and `y` obtained using bitwise operations. # Constraints: * Do not use the `+` operator directly or indirectly in your function. * The function will be tested with 0 <= x <= 10^9 and 0 <= y <= 10^9. * Ensure the function runs efficiently in O(n) time, where n is the number of bits in the largest number. # Example: ```python assert add_bitwise_operator(2, 3) == 5 assert add_bitwise_operator(0, 7) == 7 assert add_bitwise_operator(9, 10) == 19 ``` # Remarks: Your solution will be judged on correctness, efficiency, and adherence to not using the addition operator. Consider edge cases and thoroughly test your implementation before submission.","solution":"def add_bitwise_operator(x: int, y: int) -> int: while y != 0: carry = x & y # calculate the carry bits x = x ^ y # sum without carry y = carry << 1 # shift carry left by one position to add in the next step return x"},{"question":"# Question: Hierarchical Data Visualization You are given a nested dictionary representing a hierarchical data structure in which each key is associated with a list of sub-elements. Write a function `enhanced_tree_print(tree: dict) -> None` that prints the hierarchical structure of this data in a visually clear format. Each level of hierarchy should be appropriately indented to reflect the depth of elements. Input Format: - `tree`: A dictionary where each key is a string, and each associated value is a list of sub-elements, which can either be strings or further lists. Output Format: - The function should print each key followed by its sub-elements, with each sub-level indented using four spaces representing child elements. # Example: ```python tree = { \'a\': [\'Adam\', \'Book\', 4], \'b\': [\'Bill\', [\'Computer\', 5], \'TV\', 6, [\'Jill\', \'Sports\', 1]], \'c\': [\'Bill\', \'Sports\', 3], \'d\': [\'Adam\', [\'Computer\', 3], [\'Quin\', \'Computer\', 3]], \'e\': [\'Quin\', \'Book\', 5, \'TV\', 2], \'f\': [\'Adam\', [\'Computer\', 7]] } # Expected Output: # a -> Adam -> Book -> 4 # b -> Bill -> # -> Computer -> 5 # -> TV -> 6 # -> Jill -> Sports -> 1 # c -> Bill -> Sports -> 3 # d -> Adam -> # -> Computer -> 3 # -> Quin -> Computer -> 3 # e -> Quin -> Book -> 5 # -> TV -> 2 # f -> Adam -> # -> Computer -> 7 ``` # Constraints: - The function should handle trees with up to 1000 nodes and a nesting depth of up to 10 levels. - Each sub-element in lists can either be a string or another list. Notes: - Consider enhancing the current implementation by reducing the redundancy of dictionary lookups and handling deeper nesting gracefully. - Ensure that the indentation reflects the hierarchical structure accurately.","solution":"def enhanced_tree_print(tree, indent_level=0): Function to print hierarchical tree structure with proper indentation. indent = \' \' * 4 * indent_level for key, elements in tree.items(): print(f\\"{indent}{key} ->\\") for element in elements: if isinstance(element, list): enhanced_tree_print({key: element}, indent_level+1) else: print(f\\"{indent}{\' \' * 4}{element}\\") # Example tree structure for testing tree = { \'a\': [\'Adam\', \'Book\', 4], \'b\': [\'Bill\', [\'Computer\', 5], \'TV\', 6, [\'Jill\', \'Sports\', 1]], \'c\': [\'Bill\', \'Sports\', 3], \'d\': [\'Adam\', [\'Computer\', 3], [\'Quin\', \'Computer\', 3]], \'e\': [\'Quin\', \'Book\', 5, \'TV\', 2], \'f\': [\'Adam\', [\'Computer\', 7]] } enhanced_tree_print(tree)"},{"question":"# Scenario You are a software developer tasked with implementing a music playlist management system. Your playlist needs to support efficient insertion, deletion, and traversal operations. Given the benefits of linked lists for such applications, you decide to implement a doubly linked list to manage the playlist. # Task Write a `DoublyLinkedList` class that supports the following operations: 1. **Insert at the head**: Insert a new song at the beginning of the playlist. 2. **Insert at the tail**: Insert a new song at the end of the playlist. 3. **Delete**: Delete a song by its value from the playlist. 4. **Traverse forward**: Traverse the playlist from the beginning to the end. 5. **Traverse backward**: Traverse the playlist from the end to the beginning. # Requirements * **Class Name**: `DoublyLinkedList` * **Node Class**: `DoublyLinkedListNode` (provided) * **Methods**: ```python class DoublyLinkedList: def __init__(self): pass def insert_at_head(self, value): pass def insert_at_tail(self, value): pass def delete(self, value): pass def traverse_forward(self): pass def traverse_backward(self): pass ``` # Input and Output * The `insert_at_head` and `insert_at_tail` methods take a song title (string) as an argument. * The `delete` method takes a song title (string) to be deleted from the playlist. * The `traverse_forward` and `traverse_backward` methods return a list of song titles in the respective order. # Constraints * The song titles are unique. * The operations should handle appropriate edge cases (e.g., inserting into and deleting from an empty list).","solution":"class DoublyLinkedListNode: def __init__(self, value=None): self.value = value self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None self.tail = None def insert_at_head(self, value): new_node = DoublyLinkedListNode(value) if not self.head: self.head = self.tail = new_node else: new_node.next = self.head self.head.prev = new_node self.head = new_node def insert_at_tail(self, value): new_node = DoublyLinkedListNode(value) if not self.tail: self.head = self.tail = new_node else: new_node.prev = self.tail self.tail.next = new_node self.tail = new_node def delete(self, value): current = self.head while current and current.value != value: current = current.next if current is None: return # Value not found if current.prev: current.prev.next = current.next else: self.head = current.next if current.next: current.next.prev = current.prev else: self.tail = current.prev def traverse_forward(self): current = self.head result = [] while current: result.append(current.value) current = current.next return result def traverse_backward(self): current = self.tail result = [] while current: result.append(current.value) current = current.prev return result"},{"question":"# Problem Description You are required to implement a function for sorting a list of non-negative integers using the Radix Sort algorithm. Your implementation should efficiently sort the list and work within reasonable time and space constraints. # Function Specification **Function Name**: `radix_sort` **Input**: - `arr`: A list of non-negative integers you need to sort. - `simulation` (optional): A boolean flag to show intermediate sorting steps for educational purposes. Default is `False`. **Output**: - A sorted list of integers. # Constraints - The list `arr` will contain at most `10^4` integers. - Each integer in the list is guaranteed to be non-negative and less than `10^8`. # Example ```python def radix_sort(arr, simulation=False): position = 1 max_number = max(arr) iteration = 0 if simulation: print(\\"iteration\\", iteration, \\":\\", *arr) while position <= max_number: queue_list = [list() for _ in range(10)] for num in arr: digit_number = num // position % 10 queue_list[digit_number].append(num) index = 0 for numbers in queue_list: for num in numbers: arr[index] = num index += 1 if simulation: iteration = iteration + 1 print(\\"iteration\\", iteration, \\":\\", *arr) position *= 10 return arr # Example Usage arr = [170, 45, 75, 90, 802, 24, 2, 66] sorted_arr = radix_sort(arr) print(sorted_arr) # Expected Output: [2, 24, 45, 66, 75, 90, 170, 802] ``` # Notes - While implementing, consider edge cases such as empty input list, single-element list, or list with identical elements. - Make sure to test the function to ensure it handles these edge cases correctly.","solution":"def radix_sort(arr, simulation=False): if not arr: # Edge case: Check if the array is empty return arr position = 1 max_number = max(arr) iteration = 0 if simulation: print(\\"iteration\\", iteration, \\":\\", *arr) while position <= max_number: queue_list = [list() for _ in range(10)] for num in arr: digit_number = num // position % 10 queue_list[digit_number].append(num) index = 0 for numbers in queue_list: for num in numbers: arr[index] = num index += 1 if simulation: iteration += 1 print(\\"iteration\\", iteration, \\":\\", *arr) position *= 10 return arr"},{"question":"# Question: URL Query String Sanitizer **Context**: Imagine you are developing a web service that takes URLs as input and sanitizes their query strings to remove any duplicate query parameters and any parameters matching a given list. The goal is to return cleaned-up URLs free of unnecessary or sensitive data. **Task**: Write a function `sanitize_url(url: str, params_to_strip: list = []) -> str` that takes: - `url`: a string representing the full URL. - `params_to_strip`: an optional list of strings, each representing a query parameter key to be removed. The function should: 1. Remove any duplicate query string parameters, keeping only the first occurrence. 2. Remove any query parameters specified within the `params_to_strip` list. Return the sanitized URL as a string. **Input**: - `url` (string): The URL to be sanitized, which may or may not contain query parameters. - `params_to_strip` (list): Optional list of query parameter keys to be removed. **Output**: - A sanitized URL (string) with no duplicate query parameters and without the specified parameters. **Constraints**: - `url` length ≤ 2000 characters. - `params_to_strip` length ≤ 20 elements. - Individual query strings ≤ 100 characters. **Example**: ```python assert sanitize_url(\'www.saadbenn.com?a=1&b=2&a=2\', []) == \'www.saadbenn.com?a=1&b=2\' assert sanitize_url(\'www.saadbenn.com?a=1&b=2&a=2\', [\'b\']) == \'www.saadbenn.com?a=1\' assert sanitize_url(\'www.saadbenn.com\', [\'a\']) == \'www.saadbenn.com\' ``` **Note**: - Consider edge cases such as URLs without query parameters, URLs with only parameters to be stripped, repeated parameters in varying orders, and total absence of query parameters. **Performance Requirements**: - The function should handle URLs of up to 2000 characters efficiently within acceptable runtime limits for typical web request handling.","solution":"from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse def sanitize_url(url: str, params_to_strip: list = []) -> str: parsed_url = urlparse(url) query_params = parse_qsl(parsed_url.query) seen_params = set() sanitized_params = [] for key, value in query_params: if key not in seen_params and key not in params_to_strip: sanitized_params.append((key, value)) seen_params.add(key) sanitized_query = urlencode(sanitized_params) sanitized_url = urlunparse( (parsed_url.scheme, parsed_url.netloc, parsed_url.path, parsed_url.params, sanitized_query, parsed_url.fragment) ) return sanitized_url"},{"question":"# Transitive Closure of a Directed Graph A software company is developing a tool for analyzing dependencies between various modules in a large project. The modules and their dependencies are represented as a directed graph. Your task is to develop an algorithm to determine the reachability of each module from every other module using the transitive closure concept. Task Implement a function `find_transitive_closure(V, edges)` that computes the transitive closure of a directed graph. The function should take the following parameters: - `V` (int): The number of vertices in the graph. - `edges` (List[Tuple[int, int]]): A list of tuples where each tuple (source, target) represents a directed edge from `source` to `target`. The function should return a 2D list (matrix) where the value at the cell `(i, j)` is 1 if there is a path from node `i` to node `j`, and 0 otherwise. # Example Input ``` V = 4 edges = [(0, 1), (0, 2), (1, 2), (2, 0), (2, 3), (3, 3)] ``` Output ``` [ [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [0, 0, 0, 1] ] ``` # Constraints 1. 1 ≤ V ≤ 100 2. 0 ≤ len(edges) ≤ V(V-1) # Notes 1. You may assume the graph does not have multiple edges or loops. 2. Aim for time complexity of O(V(V + E)). 3. Ensure you handle graphs with no edges and graphs with self-loops correctly.","solution":"def find_transitive_closure(V, edges): Computes the transitive closure of a directed graph. Parameters: V (int): The number of vertices in the graph. edges (List[Tuple[int, int]]): A list of tuples where each tuple (source, target) represents a directed edge from `source` to `target`. Returns: List[List[int]]: 2D list (matrix) where the value at cell (i, j) is 1 if there is a path from node `i` to node `j`, and 0 otherwise. # Initialize the transitive closure matrix with 0\'s closure = [[0] * V for _ in range(V)] # Set the diagonal to 1 since each node is reachable from itself for i in range(V): closure[i][i] = 1 # Set the direct edges for (source, target) in edges: closure[source][target] = 1 # Apply Floyd-Warshall algorithm for k in range(V): for i in range(V): for j in range(V): closure[i][j] = closure[i][j] or (closure[i][k] and closure[k][j]) return closure"},{"question":"Given the function for calculating the binomial coefficient using recursion, your task is to implement an optimized version of this function using dynamic programming (memoization) to improve its efficiency for large values of (n) and (k). # Requirements: Function Signature ```python def binomial_coefficient(n: int, k: int) -> int: ``` Input * `n` (integer): The total number of items. * `k` (integer): The number of items to choose. Output * Returns the binomial coefficient (C(n, k)) (integer), which represents the number of ways to choose k items from n items. Constraints * (0 leq k leq n leq 1000) Example ```python # Example 1 print(binomial_coefficient(5, 0)) # Output: 1 # Example 2 print(binomial_coefficient(8, 2)) # Output: 28 # Example 3 print(binomial_coefficient(500, 300)) # Output: a large number ``` # Additional Information: * Your implementation should handle large inputs efficiently by optimizing the recursive function. * Ensure that your function does not exceed the maximum recursion depth for large values of `n`.","solution":"def binomial_coefficient(n: int, k: int) -> int: Calculate the binomial coefficient C(n, k) using dynamic programming (memoization). # If k is 0 or n, C(n, k) is 1 if k == 0 or k == n: return 1 # Create a 2D table to store results of subproblems C = [[0 for x in range(k+1)] for x in range(n+1)] # Calculate value of Binomial Coefficient in bottom-up manner for i in range(n+1): for j in range(min(i, k)+1): # Base case: C(n, 0) = C(n, n) = 1 if j == 0 or j == i: C[i][j] = 1 else: C[i][j] = C[i-1][j-1] + C[i-1][j] return C[n][k]"},{"question":"# Question: Count Empty Branches in a Binary Tree Given a binary tree, write a function `num_empty(root)` that counts the number of empty branches in the tree. An empty branch refers to a `None` node pointer. A leaf node has two empty branches. If the root itself is `None`, it is considered as one empty branch. Input - The input parameter is `root`, which is the root node of the binary tree. Each node is an object with `left` and `right` attributes pointing to its child nodes (or `None` if no child exists). Output - The function should return an integer representing the total number of empty branches in the binary tree. Constraints - The number of nodes in the tree is between `0` and `10^5`. - Any node in the binary tree can have attributes `left` and `right` referring to their child nodes. Performance Requirements - The solution should have a time complexity of O(n), where n is the number of nodes in the tree. - Use a recursive approach with a space complexity of O(h), where h is the height of the tree. Example ```python class Node: def __init__(self, key): self.left = None self.right = None self.val = key def num_empty(root): if root is None: return 1 return (1 if root.left is None else 0) + (1 if root.right is None else 0) + num_empty(root.left) + num_empty(root.right) # Example binary tree: # 9 # / # 6 12 # / / # 3 8 10 15 # # 7 18 root = Node(9) root.left = Node(6) root.right = Node(12) root.left.left = Node(3) root.left.right = Node(8) root.right.left = Node(10) root.right.right = Node(15) root.left.right.left = Node(7) root.right.right.right = Node(18) print(num_empty(root)) # Output: 10 ``` Your task is to implement the function `num_empty` and ensure it passes the provided example.","solution":"class Node: def __init__(self, key): self.left = None self.right = None self.val = key def num_empty(root): Counts the number of empty branches in a binary tree. Parameters: root (Node): The root of the binary tree. Returns: int: Total number of empty branches. if root is None: return 1 empty_count = 0 if root.left is None: empty_count += 1 else: empty_count += num_empty(root.left) if root.right is None: empty_count += 1 else: empty_count += num_empty(root.right) return empty_count"},{"question":"Implement Red-Black Tree Deletion Enhancement Context A Red-Black Tree is an efficient self-balancing binary search tree that is commonly used in various applications where fast insertion, deletion, and lookup operations are essential. Understanding and implementing Red-Black Tree operations is crucial for mastering advanced data structures. Problem Statement Given the provided implementation of a Red-Black Tree, your task is to extend its functionality to support two new operations: 1. **Find Kth Smallest Element**: Implement a method to find the k-th smallest element in the Red-Black Tree. 2. **Rank of an Element**: Implement a method to determine the rank (1-based) of a given element in the Red-Black Tree. # Function Signatures 1. **Find Kth Smallest Element**: ```python def kth_smallest(self, k: int) -> int: Find the k-th smallest element in the Red-Black Tree. :param k: the k-th position (1-based) to find :return: the value of the k-th smallest element in the tree pass ``` 2. **Rank of an Element**: ```python def rank(self, value: int) -> int: Determine the rank of a given value in the Red-Black Tree. :param value: the value to find the rank of :return: the rank (1-based) of the given value in the tree pass ``` # Input and Output Formats 1. **For kth_smallest**: - **Input**: An integer `k` indicating the position. - **Output**: An integer representing the value of the k-th smallest element. - **Constraints**: * 1 ≤ k ≤ n (where n is the number of elements in the tree) 2. **For rank**: - **Input**: An integer `value` representing the value whose rank needs to be found. - **Output**: An integer representing the rank of the given value. - **Constraints**: * The value must exist in the tree. # Constraints - The Red-Black Tree will contain only unique integers. - Implement and integrate these methods into the provided Red-Black Tree class. Example Scenario ```python rb = RBTree() values = [20, 15, 25, 10, 17, 8, 13, 22, 30] for value in values: node = RBNode(value, 1) rb.insert(node) # Find the 4th smallest element k = 4 print(rb.kth_smallest(k)) # Output: 15 # Find the rank of the element 17 value = 17 print(rb.rank(value)) # Output: 5 ``` Notes - Your implementation should take into consideration the properties of the Red-Black Tree to ensure efficient searching and ranking. - Ensure your solution handles all edge cases effectively.","solution":"class RBNode: def __init__(self, data, color, left=None, right=None, parent=None): self.data = data self.color = color # 0 for black, 1 for red self.left = left self.right = right self.parent = parent self.size = 1 # size attribute to store the size of the subtree rooted at this node class RBTree: def __init__(self): self.TNULL = RBNode(0, 0) self.TNULL.size = 0 # size of TNULL should be 0 self.root = self.TNULL def __update_size(self, node): while node != self.TNULL: node.size = 1 + node.left.size + node.right.size node = node.parent def insert(self, key): # Ordinary Binary Search Insertion node = RBNode(key, 1) node.left = self.TNULL node.right = self.TNULL node.parent = None y = None x = self.root while x != self.TNULL: y = x x.size += 1 # Increment the size of each node on the path to the insertion point if node.data < x.data: x = x.left else: x = x.right node.parent = y if y is None: self.root = node elif node.data < y.data: y.left = node else: y.right = node node.left = self.TNULL node.right = self.TNULL node.color = 1 # Fix the tree self.__fix_insert(node) def __fix_insert(self, k): # Fixing the red-black tree after insertion while k != self.root and k.parent.color == 1: if k.parent == k.parent.parent.right: u = k.parent.parent.left if u.color == 1: u.color = 0 k.parent.color = 0 k.parent.parent.color = 1 k = k.parent.parent else: if k == k.parent.left: k = k.parent self.__right_rotate(k) k.parent.color = 0 k.parent.parent.color = 1 self.__left_rotate(k.parent.parent) else: u = k.parent.parent.right if u.color == 1: u.color = 0 k.parent.color = 0 k.parent.parent.color = 1 k = k.parent.parent else: if k == k.parent.right: k = k.parent self.__left_rotate(k) k.parent.color = 0 k.parent.parent.color = 1 self.__right_rotate(k.parent.parent) self.root.color = 0 def __left_rotate(self, x): y = x.right x.right = y.left if y.left != self.TNULL: y.left.parent = x y.parent = x.parent if x.parent is None: self.root = y elif x == x.parent.left: x.parent.left = y else: x.parent.right = y y.left = x x.parent = y y.size = x.size x.size = 1 + x.left.size + x.right.size def __right_rotate(self, x): y = x.left x.left = y.right if y.right != self.TNULL: y.right.parent = x y.parent = x.parent if x.parent is None: self.root = y elif x == x.parent.right: x.parent.right = y else: x.parent.left = y y.right = x x.parent = y y.size = x.size x.size = 1 + x.left.size + x.right.size def __find_kth_smallest(self, node, k): left_size = node.left.size if k == left_size + 1: return node.data if k <= left_size: return self.__find_kth_smallest(node.left, k) else: return self.__find_kth_smallest(node.right, k - left_size - 1) def kth_smallest(self, k): if self.root.size < k: raise ValueError(\\"k is larger than the size of the tree\\") return self.__find_kth_smallest(self.root, k) def __find_rank(self, node, value): if node == self.TNULL: return -1 if value == node.data: return node.left.size + 1 if value < node.data: return self.__find_rank(node.left, value) right_rank = self.__find_rank(node.right, value) if right_rank == -1: return -1 return node.left.size + 1 + right_rank def rank(self, value): rank_value = self.__find_rank(self.root, value) if rank_value == -1: raise ValueError(\\"Value not found in the tree\\") return rank_value"},{"question":"# Coding Challenge: Longest Unique Substring Finder Context You are helping develop a text editing application and need to implement a feature that identifies the longest substring without repeating characters. This is crucial for functionality that allows users to analyze uniqueness in their text edits. Task Implement a function `longest_unique_substring` which operates as efficiently as possible to find the longest substring without any repeating characters. Function Signature ```python def longest_unique_substring(s: str) -> Tuple[int, str]: pass ``` Input * A single string `s` Output * A tuple: * The length of the longest substring without repeating characters. * The longest substring itself. Constraints * The input string will contain up to 10^6 characters. * The string may contain any printable ASCII characters. Examples ```python assert longest_unique_substring(\\"abcabcbb\\") == (3, \\"abc\\") assert longest_unique_substring(\\"bbbbb\\") == (1, \\"b\\") assert longest_unique_substring(\\"pwwkew\\") == (3, \\"wke\\") assert longest_unique_substring(\\"\\") == (0, \\"\\") assert longest_unique_substring(\\"dvdf\\") == (3, \\"vdf\\") ``` Note * Ensure that your solution is optimized for both time and space complexity. * Handle edge cases such as an empty input string.","solution":"from typing import Tuple def longest_unique_substring(s: str) -> Tuple[int, str]: Finds the longest substring without repeating characters. Parameters: s (str): The input string Returns: Tuple[int, str]: A tuple containing the length of the longest substring and the substring itself start = 0 max_len = 0 max_substr = \\"\\" char_index_map = {} for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end current_len = end - start + 1 if current_len > max_len: max_len = current_len max_substr = s[start:end+1] return max_len, max_substr"},{"question":"# Merge Sort Implementation Given an array of integers, implement the Merge Sort algorithm to sort the array in non-decreasing order. Function Signature ```python def merge_sort(arr: List[int]) -> List[int]: ``` Input - `arr`: A list of integers (1 <= len(arr) <= 10^5), where each integer fits within the 32-bit signed integer range. Output - Returns a sorted list of integers in non-decreasing order. Constraints - Your implementation should follow the principles of the merge sort algorithm. - The solution should efficiently handle up to the maximum input size within a reasonable time frame. Example ```python # Example 1 arr = [34, 7, 23, 32, 5, 62] print(merge_sort(arr)) # Output: [5, 7, 23, 32, 34, 62] # Example 2 arr = [2, 3, 5, 5, 7, 7, 19] print(merge_sort(arr)) # Output: [2, 3, 5, 5, 7, 7, 19] # Example 3 arr = [1] print(merge_sort(arr)) # Output: [1] # Example 4 arr = [] print(merge_sort(arr)) # Output: [] ``` Notes 1. Ensure to handle all edge cases including empty arrays and arrays with a single element. 2. Focus on the time and space complexity for performance given the constraint on input size.","solution":"from typing import List def merge_sort(arr: List[int]) -> List[int]: Merge Sort implementation that sorts an array in non-decreasing order. # Base case: a list of zero or one elements is already sorted if len(arr) <= 1: return arr # Recursive case: split the list into two sublists mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) # Merge the two sorted halves return merge(left_half, right_half) def merge(left: List[int], right: List[int]) -> List[int]: Merges two sorted lists into one sorted list. sorted_list = [] left_index, right_index = 0, 0 # Compare the elements of the left and right sublists and merge them in order while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_list.append(left[left_index]) left_index += 1 else: sorted_list.append(right[right_index]) right_index += 1 # If there are remaining elements in the left sublist, add them while left_index < len(left): sorted_list.append(left[left_index]) left_index += 1 # If there are remaining elements in the right sublist, add them while right_index < len(right): sorted_list.append(right[right_index]) right_index += 1 return sorted_list"},{"question":"# Binary Tree Construction and Inorder Traversal Given two arrays representing the preorder and postorder traversal of a full binary tree, write a function to construct the binary tree and return its inorder traversal as a list. A full binary tree has the property that every node has either 0 or 2 children. # Instructions 1. Implement the function `binary_tree_inorder(preorder: List[int], postorder: List[int]) -> List[int]`: - **preorder**: A list of integers depicting preorder traversal of the tree. - **postorder**: A list of integers depicting postorder traversal of the tree. - **Returns** the inorder traversal as a list of integers. 2. **Constraints**: - 1 <= len(preorder), len(postorder) <= 1000 - The input arrays are a valid preorder and postorder traversal of the same full binary tree. - Elements in both arrays are unique. 3. Optimize the function to have a linear time complexity (O(n)) if possible. # Example Example 1 ```plaintext Input: preorder = [1, 2, 4, 8, 9, 5, 3, 6, 7] postorder = [8, 9, 4, 5, 2, 6, 7, 3, 1] Output: [8, 4, 9, 2, 5, 1, 6, 3, 7] ``` Example 2 ```plaintext Input: preorder = [1, 2, 3] postorder = [2, 3, 1] Output: [2, 1, 3] ``` # Note Upon receiving the lists preorder and postorder, ensure that: 1. You avoid excessive recursive depth or memory usage. 2. The solution should be efficient and handle edge cases robustly.","solution":"from typing import List class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(preorder, postorder): Helper function to build the binary tree. if not preorder or not postorder: return None root_val = preorder[0] root = TreeNode(root_val) if len(preorder) == 1: return root # Find the root of the left subtree left_subroot_val = preorder[1] # Length of the left subtree\'s nodes left_subtree_length = postorder.index(left_subroot_val) + 1 root.left = build_tree(preorder[1:1+left_subtree_length], postorder[:left_subtree_length]) root.right = build_tree(preorder[1+left_subtree_length:], postorder[left_subtree_length:-1]) return root def inorder_traversal(root): if root is None: return [] return inorder_traversal(root.left) + [root.val] + inorder_traversal(root.right) def binary_tree_inorder(preorder: List[int], postorder: List[int]) -> List[int]: root = build_tree(preorder, postorder) return inorder_traversal(root)"},{"question":"# Task: Implement the function **is_match(s: str, p: str) -> bool**, which determines if the input string `s` matches the pattern `p`. The pattern `p` may contain `.` which matches any single character or `\'*\'` which matches zero or more of the preceding character. Input: - `s`: A string representing the input string to match. - `p`: A string representing the pattern, which may contain `.` and `*`. Output: - Return `True` if the input string matches the pattern, otherwise, return `False`. Constraints: - Both `s` and `p` shall not be empty. - Ensure that the performance does not degrade significantly for longer strings and patterns. Examples: - `is_match(\\"aa\\",\\"a\\")` → `False` - `is_match(\\"aa\\",\\"aa\\")` → `True` - `is_match(\\"aaa\\",\\"aa\\")` → `False` - `is_match(\\"aa\\", \\"a*\\")` → `True` - `is_match(\\"aa\\", \\".*\\")` → `True` - `is_match(\\"ab\\", \\".*\\")` → `True` - `is_match(\\"aab\\", \\"c*a*b\\")` → `True` Scenario: You are developing a text editor that provides advanced search capabilities. Users should be able to search through documents using regular expressions with `.` and `*` wildcards. Implement the matching function to validate user queries against the document content.","solution":"def is_match(s: str, p: str) -> bool: Determines if the string s matches the pattern p. - \'.\' Matches any single character. - \'*\' Matches zero or more of the preceding element. # Lookup table to store the results of subproblems dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)] dp[0][0] = True # Two empty strings match # Patterns like a*, a*b*, a*b*c* can match an empty string for j in range(2, len(p) + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 2] # Fill the table for i in range(1, len(s) + 1): for j in range(1, len(p) + 1): if p[j - 1] == s[i - 1] or p[j - 1] == \'.\': dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == \'*\': # Consider zero occurrence of the character before \'*\' dp[i][j] = dp[i][j - 2] # Consider one or more occurrence of the character before \'*\' if p[j - 2] == s[i - 1] or p[j - 2] == \'.\': dp[i][j] = dp[i][j] or dp[i - 1][j] return dp[len(s)][len(p)]"},{"question":"# Question Scenario You have been tasked to write a program that computes factorials for large numbers efficiently. The factorial result may also need to be computed under a modulo to prevent extremely large numbers. Problem Statement Write a function `factorial_mod` that computes the factorial of a given non-negative integer `n`. If a positive integer `mod` is provided, return the factorial modulo `mod`. **Function Signature**: ```python def factorial_mod(n: int, mod: int = None) -> int: ``` Input - `n`: an integer where `0 <= n <= 10^6` - `mod`: an optional integer where `1 <= mod <= 10^9` Output - Returns the factorial of `n` modulo `mod` if `mod` is provided. - If `mod` is not provided, returns the factorial of `n`. Constraints - You must handle large values efficiently. - Ensure that your solution does not run into stack overflow issues for large `n`. Example ```python print(factorial_mod(5)) # Output: 120 print(factorial_mod(5, 3)) # Output: 0 (since 120 mod 3 is 0) print(factorial_mod(10, 1000)) # Output: 800 (since 3628800 mod 1000 is 800) print(factorial_mod(0)) # Output: 1 (since 0! is 1) ```","solution":"def factorial_mod(n: int, mod: int = None) -> int: if n == 0 or n == 1: return 1 factorial = 1 for i in range(2, n + 1): factorial *= i if mod: factorial %= mod return factorial if mod is None else factorial % mod"},{"question":"# Zigzag Iterator Coding Challenge You are tasked with implementing a Zigzag Iterator that iterates over multiple input lists in an alternating fashion. Input * Two input lists `v1` and `v2` of integers. Output * An iterator implementing the following methods: - `__init__(self, v1: List[int], v2: List[int])`: Initializes the iterator with two lists. - `next(self) -> int`: Returns the next element in alternating order. - `has_next(self) -> bool`: Returns whether there are any more elements to iterate over. Constraints * The input lists `v1` and `v2` can have different lengths. * The methods `next` and `has_next` should both run in O(1) time complexity. Example ```python l1 = [1, 2] l2 = [3, 4, 5, 6] it = ZigZagIterator(l1, l2) while it.has_next(): print(it.next(), end=\' \') # Expected Output: 1 3 2 4 5 6 ``` Notes Ensure that your iterator is robust and handles edge cases like empty lists and one list being substantially longer than the other. Test your solution thoroughly.","solution":"class ZigzagIterator: def __init__(self, v1, v2): Initializes the iterator with two lists. self.queues = [v1, v2] self.index = 0 def next(self) -> int: Returns the next element in alternating order. while not self.queues[self.index]: self.index = (self.index + 1) % len(self.queues) val = self.queues[self.index].pop(0) self.index = (self.index + 1) % len(self.queues) return val def has_next(self) -> bool: Returns whether there are any more elements to iterate over. return any(self.queues)"},{"question":"You are tasked with implementing a search function for a list of names in a database. Although the names are not sorted alphabetically, you need to find the given name and return its position. # Function Signature Implement the function `find_name_position(names: List[str], query: str) -> int:`: # Input - `names`: A list of strings representing names. ( 1 <= len(names) <= 10^5, 1 <= len(names[i]) <= 100) - `query`: A string representing the name to find. (1 <= len(query) <= 100) # Output - Return the index (zero-based) of the first occurrence of `query` in the list `names`. - If `query` is not present in the list, return `-1`. # Constraints - The list can be quite long, but the space complexity should remain O(1), meaning no additional data structures should be used that scale with the input size. - Performance with respect to time complexity should be O(n). # Example ```python assert find_name_position([\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"Bob\\"], \\"Bob\\") == 1 assert find_name_position([\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"Bob\\"], \\"Eve\\") == -1 assert find_name_position([], \\"Alice\\") == -1 assert find_name_position([\\"Alice\\", \\"Bob\\", \\"Charlie\\"], \\"Charlie\\") == 2 ``` # Task Write the function `find_name_position` and ensure passing of the provided examples.","solution":"from typing import List def find_name_position(names: List[str], query: str) -> int: Finds the first occurrence of the query string in the names list and returns its index. Returns -1 if the query is not present in the list. Args: names (List[str]): List of names. query (str): Name to find in the list. Returns: int: Index of the first occurrence of query, or -1 if not found. for i, name in enumerate(names): if name == query: return i return -1"},{"question":"# Question You are provided with the skeleton of an **Undirected Graph Node** class and three methods for cloning an undirected graph (with BFS, iterative DFS, and recursive DFS). Your task is to implement a new function `optimized_clone_graph(node)` that clones an undirected graph using an optimized approach that minimizes the chances of recursion depth issues and handles large graphs efficiently. Function Signature ```python def optimized_clone_graph(node: \'UndirectedGraphNode\') -> \'UndirectedGraphNode\': # Implementation details ``` Implementation Details 1. **Input**: A node `(UndirectedGraphNode)` which is a part of the graph. 2. **Output**: A new graph (deep copy) as seen from the input node. 3. **Constraints**: - Node labels are unique for each node. - The graph may contain cycles. - Memory usage should be optimized where possible. 4. **Notes**: - Handle edge cases appropriately, such as an empty graph (i.e., when `node` is `None`). - Ensure the cloned graph maintains the same structure and connections as the original graph. Example Given the graph represented by the example serialization `{0,1,2#1,2#2,2}`, your function should produce a deep copy that mirrors the structure: **Original Graph:** ``` 1 / / 0 --- 2 / _/ ``` **Cloned Graph:** ``` 1\' / / 0\'---2\' / _/ ``` Test Cases 1. Test with an empty graph (input node is `None`). 2. Test with a simple single node with no neighbors. 3. Test with a graph containing a self-loop. 4. Test with a larger graph containing multiple nodes and varied connections.","solution":"# Definition for an undirected graph node. class UndirectedGraphNode: def __init__(self, x): self.label = x self.neighbors = [] def optimized_clone_graph(node: \'UndirectedGraphNode\') -> \'UndirectedGraphNode\': if not node: return None # A dictionary to save the cloned nodes cloned_nodes = {} # Initialize the queue with the starting node queue = [node] # Clone the root node cloned_nodes[node] = UndirectedGraphNode(node.label) while queue: # Pop a node from the front of the queue current_node = queue.pop(0) for neighbor in current_node.neighbors: if neighbor not in cloned_nodes: # Clone the neighbor if it hasn\'t been cloned yet cloned_nodes[neighbor] = UndirectedGraphNode(neighbor.label) # Add it to the queue to visit its neighbors later queue.append(neighbor) # Add the cloned neighbor to the current node\'s clone\'s neighbors cloned_nodes[current_node].neighbors.append(cloned_nodes[neighbor]) return cloned_nodes[node]"},{"question":"You are given a 2D grid map of \'1\'s (land) and \'0\'s (water). Your task is to write a Python function to count the number of islands formed by \'1\'s connected horizontally or vertically. You are required to implement the Breadth-First Search (BFS) algorithm to solve this problem. # Input - A 2D list of integers `grid`, where each integer is either `1` (land) or `0` (water). # Output - An integer representing the number of islands. # Constraints - All four edges of the grid are surrounded by water. - The grid is rectangular, i.e., `M x N` grid. - `1 <= M, N <= 1000` # Performance Requirements - Time Complexity: (O(M times N)) - Space Complexity: (O(M times N)) # Example Scenarios Example 1: ```python grid = [ [1, 1, 1, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0] ] # Expected Output: 1 ``` Example 2: ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] # Expected Output: 3 ``` Example 3: ```python grid = [ [1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0] ] # Expected Output: 3 ``` Example 4: ```python grid = [ [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 0] ] # Expected Output: 5 ``` # Function Signature ```python def count_islands(grid: List[List[int]]) -> int: pass ```","solution":"from collections import deque from typing import List def count_islands(grid: List[List[int]]) -> int: if not grid: return 0 rows = len(grid) cols = len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def bfs(r, c): queue = deque() queue.append((r, c)) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while queue: curr_r, curr_c = queue.popleft() for d in directions: new_r, new_c = curr_r + d[0], curr_c + d[1] if 0 <= new_r < rows and 0 <= new_c < cols and not visited[new_r][new_c] and grid[new_r][new_c] == 1: visited[new_r][new_c] = True queue.append((new_r, new_c)) island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1 and not visited[r][c]: bfs(r, c) island_count += 1 return island_count"},{"question":"# Question: Shortest Distance from All Buildings You are given a grid of size `m x n` filled with the following three possible values: * **1** - represents a building. * **0** - represents an empty space. * **2** - represents an obstacle. You are tasked with writing a function `shortest_distance(grid: List[List[int]]) -> int` to find a location for the new building such that the sum of the shortest distances from the new building to all the existing buildings is minimized. If it\'s not possible to build such a building, return `-1`. # Function Signature ```python def shortest_distance(grid: List[List[int]]) -> int: pass ``` # Input * `grid`: A list of lists of integers where each integer is one of {0, 1, 2}. - `1 <= len(grid) <= 100` - `1 <= len(grid[0]) <= 100` # Output * The minimum sum of shortest distances from the new building to all existing buildings, or `-1` if it is impossible. # Constraints * It is guaranteed that there will be at least one building. * An empty space cannot be traversed through obstacles. # Example ```python grid = [[1, 0, 2, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0]] assert shortest_distance(grid) == 7 ``` # Explanation For the above example grid, placing the new building at `grid[1][2]` yields the shortest distance sum of 7 (3+3+1=7). # Notes - Use BFS to calculate the shortest distance from each building to all reachable empty spaces. - You may modify the input grid as needed.","solution":"from collections import deque from typing import List def shortest_distance(grid: List[List[int]]) -> int: m, n = len(grid), len(grid[0]) # Directions for all 4 possible movements (right, down, left, up). directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS to compute shortest paths from given start to all 0\'s. def bfs(start_x, start_y, distances, reach): visited = [[False] * n for _ in range(m)] queue = deque([(start_x, start_y, 0)]) visited[start_x][start_y] = True while queue: x, y, d = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == 0: visited[nx][ny] = True distances[nx][ny] += d + 1 reach[nx][ny] += 1 queue.append((nx, ny, d + 1)) buildings = [(i, j) for i in range(m) for j in range(n) if grid[i][j] == 1] distances = [[0] * n for _ in range(m)] reach = [[0] * n for _ in range(m)] for building in buildings: bfs(building[0], building[1], distances, reach) result = float(\'inf\') for i in range(m): for j in range(n): if grid[i][j] == 0 and reach[i][j] == len(buildings): result = min(result, distances[i][j]) return result if result < float(\'inf\') else -1"},{"question":"Histogram Frequency Counter A histogram is an accurate representation of the distribution of numerical data. Your task is to implement a function that computes the frequency of each unique element in a given list and outputs this frequency in the form of a dictionary. Function Signature ```python def compute_histogram(values: list) -> dict: ``` Input - `values` (list): A list containing numerical elements. Output - Returns a dictionary where the keys are the unique elements from the input list and the values are their corresponding frequencies in the list. Constraints - The input will be a list of integers, which can include negative numbers and duplicate values. - The length of the list will not exceed 10^6 elements. - All elements in the list are between -10^9 and 10^9. Performance Requirements - The function should have a linear time complexity, O(n), in terms of the number of elements in the input list. - The function\'s space complexity should be O(k), where k is the number of unique elements in the list. Example ```python compute_histogram([3, 3, 2, 1]) # Returns: {1: 1, 2: 1, 3: 2} compute_histogram([2, 3, 5, 5, 5, 6, 4, 3, 7]) # Returns: {2: 1, 3: 2, 4: 1, 5: 3, 6: 1, 7: 1} ``` Edge Cases - If the input list is empty, the function should return an empty dictionary `{}`. - If the input list has all identical elements, the function should return a dictionary with a single key. Additional Challenges - Extend the function to handle lists of strings or mixed data types. - Handle cases where the input might contain non-numerical data, raising appropriate exceptions.","solution":"def compute_histogram(values: list) -> dict: Computes the frequency of each unique element in a given list and returns this frequency as a dictionary. Parameters: values (list): A list containing numerical elements. Returns: dict: A dictionary where the keys are the unique elements from the input list and the values are their corresponding frequencies. frequency_dict = {} for value in values: if value in frequency_dict: frequency_dict[value] += 1 else: frequency_dict[value] = 1 return frequency_dict"},{"question":"# Queue Data Structure Implementation Context: Queues are an essential abstract data type used in numerous applications such as task scheduling, breadth-first search (BFS) in graphs, and managing requests in servers. In this task, you will implement your own queue data structure, but with a twist: you need to ensure that the implementation is efficient in both operations and space usage. Requirements: 1. **Class Definition**: * Define a class `CircularQueue` that implements the queue ADT using a circular buffer. * This class should utilize an array to store the data. 2. **Methods**: Implement the following methods in the `CircularQueue` class: * `__init__(self, capacity=10)`: Initializes the queue with a given capacity (default is 10). * `enqueue(self, value)`: Adds a new item to the rear of the queue. * `dequeue(self)`: Removes the front item from the queue and returns it. * `peek(self)`: Returns the front item without removing it. * `isEmpty(self)`: Returns `True` if the queue is empty, `False` otherwise. * `size(self)`: Returns the number of items in the queue. * `__iter__(self)`: Returns an iterator for the queue. 3. **Constraints**: * Ensure the queue operates efficiently with the given capacity. * Use a circular buffer to handle the queue operations without unnecessary resizing. 4. **Edge Cases**: * Handle attempts to `dequeue` or `peek` from an empty queue gracefully by raising an `IndexError`. # Function Signature: ```python class CircularQueue: def __init__(self, capacity=10): pass def enqueue(self, value): pass def dequeue(self): pass def peek(self): pass def isEmpty(self): pass def size(self): pass def __iter__(self): pass ``` Example Usage: ```python cq = CircularQueue(5) cq.enqueue(1) cq.enqueue(2) print(cq.peek()) # Output: 1 print(cq.dequeue()) # Output: 1 print(cq.size()) # Output: 1 print(cq.isEmpty()) # Output: False cq.dequeue() print(cq.isEmpty()) # Output: True ``` # Deliverables: 1. The complete implementation of the `CircularQueue` class. 2. Make sure the provided methods adhere to the specifications. 3. Ensure that the implementation efficiently handles queue operations using a circular buffer.","solution":"class CircularQueue: def __init__(self, capacity=10): self.capacity = capacity self.queue = [None] * capacity self.front = -1 self.rear = -1 def enqueue(self, value): if (self.rear + 1) % self.capacity == self.front: raise IndexError(\\"Queue is full\\") if self.isEmpty(): self.front = 0 self.rear = (self.rear + 1) % self.capacity self.queue[self.rear] = value def dequeue(self): if self.isEmpty(): raise IndexError(\\"Queue is empty\\") value = self.queue[self.front] if self.front == self.rear: self.front = self.rear = -1 else: self.front = (self.front + 1) % self.capacity return value def peek(self): if self.isEmpty(): raise IndexError(\\"Queue is empty\\") return self.queue[self.front] def isEmpty(self): return self.front == -1 def size(self): if self.isEmpty(): return 0 if self.rear >= self.front: return self.rear - self.front + 1 return self.capacity - self.front + self.rear + 1 def __iter__(self): idx = self.front while idx != self.rear: yield self.queue[idx] idx = (idx + 1) % self.capacity if not self.isEmpty(): yield self.queue[self.rear]"},{"question":"# Range Sum Query with Segment Tree **Objective**: Implement a `RangeSumSegmentTree` class that supports range sum queries and updates in an integer array. **Description**: You are required to build a segment tree structure to support the following operations efficiently: 1. `update(index, value)`: Updates the element at the specified index to the given value. 2. `query(left, right)`: Returns the sum of elements in the array from the `left` index to the `right` index inclusive. **Constraints**: * 1 ≤ array length ≤ 10^5 * The array will contain integers within the range [-10^9, 10^9] * 1 ≤ number of queries/updates ≤ 10^5 **Input and Output**: - Initialization: ```python arr = [2, 4, 5, 3, 4] st = RangeSumSegmentTree(arr) ``` - `update(index, value)`: * Input: An integer `index` and an integer `value`. * Output: None. ```python st.update(3, 6) ``` - `query(left, right)`: * Input: Two integers `left` and `right`. * Output: An integer representing the sum of array elements from `left` to `right`. ```python result = st.query(1, 3) # returns 15 ``` **Explanation**: 1. Initialize the segment tree with the given array. 2. The `update` method should efficiently update the value at the specified index and adjust the segment tree accordingly. 3. The `query` method should return the sum of elements in the specified range. **Function Signatures**: ```python class RangeSumSegmentTree: def __init__(self, arr): pass def update(self, index, value): pass def query(self, left, right): pass ``` **Example**: ```python arr = [2, 4, 5, 3, 4] st = RangeSumSegmentTree(arr) print(st.query(1, 3)) # Output: 12 st.update(2, 10) print(st.query(1, 3)) # Output: 17 ```","solution":"class RangeSumSegmentTree: def __init__(self, arr): self.n = len(arr) self.tree = [0] * (2 * self.n) # build the segment tree self._build(arr) def _build(self, arr): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = arr[i] # Initialize internal nodes for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, index, value): # Set value at position p pos = self.n + index self.tree[pos] = value # Update the tree while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def query(self, left, right): # Get the sum of elements between indices left and right result = 0 left += self.n right += self.n + 1 while left < right: if left % 2 == 1: result += self.tree[left] left += 1 if right % 2 == 1: right -= 1 result += self.tree[right] left //= 2 right //= 2 return result"},{"question":"# Problem: Encode and Decode Strings You are given two functions, `encode` and `decode`, tasked with converting a list of strings into a single string and back. **Function Definitions**: 1. `encode(strs: List[str]) -> str`: Encodes a list of strings to a single string. 2. `decode(s: str) -> List[str]`: Decodes a single string to a list of strings. **Input**: - `encode` takes a list of strings `strs` where each string consists of alphanumeric characters and optional spaces. - `decode` takes a single encoded string `s` which is the output of the `encode` function. **Output**: - `encode` returns a single string that is an encoded representation of the list. - `decode` returns a list of strings that were originally encoded. **Constraints**: - Ensure the functions handle: * Encoding and decoding an empty list. * Strings containing special characters including \\":\\" properly, ensuring no conflict with the delimiter. - Aim for linear time complexity with respect to the size of the input data. **Performance requirements**: - Efficient handling for large lists and long strings without significant increase in computational complexity or memory usage. **Example**: ```python Example encode: Input: [\\"hello\\", \\"world\\"] Output: \\"5:hello5:world\\" Example decode: Input: \\"5:hello5:world\\" Output: [\\"hello\\", \\"world\\"] ``` **Note**: You must consider edge cases in your implementation, ensuring that the encoded string can always be accurately decoded to the original list of strings.","solution":"from typing import List def encode(strs: List[str]) -> str: Encodes a list of strings to a single string. The encoding format is: length of string followed by \':\' and the string itself. encoded_str = \\"\\" for s in strs: encoded_str += f\\"{len(s)}:{s}\\" return encoded_str def decode(s: str) -> List[str]: Decodes a single string to a list of strings. decoded_list = [] i = 0 while i < len(s): # Find the delimiter \':\' j = i while s[j] != \':\': j += 1 length = int(s[i:j]) decoded_list.append(s[j+1:j+1+length]) i = j + 1 + length return decoded_list"},{"question":"You are given an unsorted list of integers and your task is to implement the insertion sort algorithm to sort the list in ascending order. However, instead of performing a linear search to find the correct position for an element, you are to use the provided `search_insert` function that uses binary search to find the appropriate insertion index more efficiently. # Function Signature ```python def insertion_sort(array: List[int]) -> List[int]: pass ``` # Input - A list of integers, `array`, where `0 <= len(array) <= 1000`. # Output - A new list of integers representing the original list sorted in ascending order. # Constraints - The time complexity of finding the insertion point should be optimized using the `search_insert` function. - The sorting should be done in-place. # Example Example 1 Input: [4, 3, 2, 10, 12, 1, 5, 6] Output: [1, 2, 3, 4, 5, 6, 10, 12] Example 2 Input: [] Output: [] Example 3 Input: [1, 1, 1, 1, 1] Output: [1, 1, 1, 1, 1] # Explanation In the first example, the list `[4, 3, 2, 10, 12, 1, 5, 6]` is sorted in an ascending order resulting in `[1, 2, 3, 4, 5, 6, 10, 12]`. # Notes - Utilize the `search_insert` function provided for an efficient insertion point search. - Ensure in-place sorting to adhere to the space complexity requirements. - Handle edge cases like empty arrays or arrays with all identical elements appropriately.","solution":"from typing import List def search_insert(array: List[int], value: int, start: int, end: int) -> int: Uses binary search to find the index where value should be inserted to keep the array sorted between start and end. while start < end: mid = (start + end) // 2 if array[mid] < value: start = mid + 1 else: end = mid return start def insertion_sort(array: List[int]) -> List[int]: Sorts the input array using the insertion sort algorithm with binary search for insertion index. for i in range(1, len(array)): value = array[i] j = search_insert(array, value, 0, i) array = array[:j] + [value] + array[j:i] + array[i+1:] return array"},{"question":"**Context**: Your task is to implement a function that filters a given list such that each element appears at most `N` times. The ordering of elements must be preserved. **Function Signature**: ```python def limit_occurrences(lst: List[int], n: int) -> List[int]: pass ``` # Input and Output * **Input**: * `lst` (List[int]): A list of integers. (0 ≤ len(lst) ≤ 10^6) * `n` (int): A non-negative integer that specifies the maximum number of occurrences for any element in the returned list. * **Output**: * Returns a list of integers containing elements from `lst` such that each element appears at most `N` times, while maintaining the order of their first occurrences. # Constraints: 1. If `n <= 0`, return an empty list. 2. The list should not contain more than one million elements. 3. Element values in the list are between -10^9 and 10^9. # Performance Requirements: * The solution should ideally run in O(n) time complexity. # Examples: ```python assert limit_occurrences([1,2,3,1,2,1,2,3], 2) == [1,2,3,1,2,3] assert limit_occurrences([1,2,3,1,2,1,2,3], 1) == [1,2,3] assert limit_occurrences([], 1) == [] assert limit_occurrences([4, 4, 4, 4], 0) == [] assert limit_occurrences([1,1,1,2,2,2,3,3,3], 1) == [1,2,3] ``` **Note**: Your function is expected to handle large lists efficiently and correctly implement the constraints.","solution":"from typing import List def limit_occurrences(lst: List[int], n: int) -> List[int]: Filters the provided list such that each element appears at most `n` times, while maintaining order. if n <= 0: return [] result = [] count = {} for number in lst: if count.get(number, 0) < n: result.append(number) count[number] = count.get(number, 0) + 1 return result"},{"question":"# Question: Inserting a Batch of Keys in an AVL Tree The AVL tree implementation in the provided code snippet supports inserting a single key and rebalancing the tree accordingly. Your task is to: 1. **Enhance the given AVL tree code snippet to support bulk insertion** of multiple keys at once. 2. **Implement a function `batch_insert`** which takes a list of keys as input and inserts them into the AVL tree. # Input - A list of integers, representing the keys to be inserted in the AVL tree. # Output - **None**. The function should modify the AVL tree in place. # Constraints - Each key is an integer that falls within the range of -10^6 to 10^6. - The list can contain up to 10^5 keys. # Example ```python # Initial AVL tree avl_tree = AvlTree() keys = [7, 5, 9, 4, 6, 8, 10] # Insert keys in batch avl_tree.batch_insert(keys) # Check the in-order traversal of the tree print(avl_tree.in_order_traverse()) # Output: [4, 5, 6, 7, 8, 9, 10] ``` # Performance Requirements - Ensure that the overall complexity of inserting n keys is kept within an acceptable range, avoiding redundant operations and rebalances whenever possible. *Implementation*: You should start off by completing the `batch_insert` method of the AVL tree. ```python class AvlTree(object): # Existing methods here... def batch_insert(self, keys): Insert a list of keys into the AVL tree. for key in keys: self.insert(key) ``` **Hint**: Think about how to optimize the batch insertion so it doesn\'t perform poorly on large lists due to repeated rebalancing.","solution":"class Node: def __init__(self, key, left=None, right=None, height=1): self.key = key self.left = left self.right = right self.height = height class AvlTree: def __init__(self): self.root = None def insert(self, key): if not self.root: self.root = Node(key) else: self.root = self._insert(self.root, key) def _insert(self, node, key): if not node: return Node(key) if key < node.key: node.left = self._insert(node.left, key) else: node.right = self._insert(node.right, key) node.height = 1 + max(self._get_height(node.left), self._get_height(node.right)) balance = self._get_balance(node) if balance > 1 and key < node.left.key: return self._rotate_right(node) if balance < -1 and key > node.right.key: return self._rotate_left(node) if balance > 1 and key > node.left.key: node.left = self._rotate_left(node.left) return self._rotate_right(node) if balance < -1 and key < node.right.key: node.right = self._rotate_right(node.right) return self._rotate_left(node) return node def _rotate_left(self, z): y = z.right T2 = y.left y.left = z z.right = T2 z.height = 1 + max(self._get_height(z.left), self._get_height(z.right)) y.height = 1 + max(self._get_height(y.left), self._get_height(y.right)) return y def _rotate_right(self, z): y = z.left T3 = y.right y.right = z z.left = T3 z.height = 1 + max(self._get_height(z.left), self._get_height(z.right)) y.height = 1 + max(self._get_height(y.left), self._get_height(y.right)) return y def _get_height(self, node): if not node: return 0 return node.height def _get_balance(self, node): if not node: return 0 return self._get_height(node.left) - self._get_height(node.right) def in_order_traverse(self): result = [] self._in_order_traverse(self.root, result) return result def _in_order_traverse(self, node, result): if not node: return self._in_order_traverse(node.left, result) result.append(node.key) self._in_order_traverse(node.right, result) def batch_insert(self, keys): Insert a list of keys into the AVL tree. for key in keys: self.insert(key)"},{"question":"# Question: Efficient Insertion Sort Implementation You are tasked with implementing the insertion sort algorithm for a list of integers, but with a twist: instead of using a linear search to find the position where a new element should be inserted, you will use binary search as outlined in the provided code snippet. # Function Signature ```python def insertion_sort(arr: List[int]) -> None: Sorts the given list in place using the binary search assisted insertion sort. Parameters: arr (List[int]): The list of integers to be sorted. Returns: None: The list is sorted in place. pass ``` # Description **Input** * A list `arr` of integers where `1 <= len(arr) <= 10^5`. **Output** * The function should sort the list `arr` in place. The function does not return anything. **Constraints** * The algorithm should maintain the overall time complexity of approximate O(n^2) but should utilize binary search for finding the insertion index to enhance performance. * The list may contain duplicate values. **Requirements** * The use of any built-in sort function or library is not permitted. * The implementation must leverage the provided `search_insert` function to locate the appropriate insertion position. # Examples ```python arr = [12, 11, 13, 5, 6] insertion_sort(arr) print(arr) # Output: [5, 6, 11, 12, 13] arr = [4, 3, 2, 10, 12] insertion_sort(arr) print(arr) # Output: [2, 3, 4, 10, 12] ``` **Hint**: Use the `search_insert` function to determine the correct position for each element being inserted into the sorted portion of the array.","solution":"from typing import List def search_insert(arr: List[int], value: int, hi: int) -> int: lo = 0 while lo < hi: mid = (lo + hi) // 2 if arr[mid] < value: lo = mid + 1 else: hi = mid return lo def insertion_sort(arr: List[int]) -> None: for i in range(1, len(arr)): value = arr[i] pos = search_insert(arr, value, i) # Move elements of arr[0..i-1], to one position ahead # of their current position for j in range(i, pos, -1): arr[j] = arr[j-1] arr[pos] = value"},{"question":"**Context**: You are tasked with implementing a utility that standardizes file paths for workspaces in a large-scale collaborative environment. Users might provide various path formats, and it is your job to ensure they are converted to absolute paths for consistency. # Brief Implement a function `standardize_path(relative_path)` that accepts a relative file path as its input and returns the absolute version of that path. The function should also handle expanding the user directory symbol (`~`) to the actual home directory. Input * `relative_path` (string): A relative path which may include home directory symbols and other standardized relative references. Output * Returns a string representing the absolute version of the path. Constraints 1. The function must correctly expand the user directory symbol `~`. 2. The function must convert a relative path to an absolute path. Performance Requirements 1. Time: O(n), where n is the length of the path string. 2. Space: O(n). **Example** ```python assert standardize_path(\'~/documents/file.txt\') == \'/home/username/documents/file.txt\' # assuming home directory is /home/username assert standardize_path(\'../folder/file.txt\') == \'/absolute/path/to/parent/folder/file.txt\' # assuming script is run in /absolute/path/to/current ``` # Implementation Your task is to implement the `standardize_path` function following the provided requirements and constraints.","solution":"import os def standardize_path(relative_path): Converts a relative file path, which may include home directory symbols, to an absolute path. Parameters: relative_path (str): Input relative path. Returns: str: Absolute path. # Expand the user directory symbol ~ to the actual home directory expanded_path = os.path.expanduser(relative_path) # Convert the relative path to an absolute path absolute_path = os.path.abspath(expanded_path) return absolute_path"},{"question":"Optimized Array Flattening Context Your task is to implement a robust, efficient function to flatten deeply nested arrays. The function should carefully handle various edge cases and optimize for performance where possible. # Problem Statement **Function Name**: `optimized_flatten` **Input**: - `arr: List[Any]` - A list that can contain any mix of nested lists, and atomic elements (integers, strings, booleans, etc.). - **Constraints**: - Nested arrays can be arbitrarily deep. - Elements inside arrays can be of data types: integer, float, string, boolean, or any mix thereof. - Arrays may also contain empty arrays or single elements. **Output**: - A flattened list with no nested arrays, containing all elements from the input array. **Performance Requirements**: - The implementation should handle large and deeply nested arrays efficiently, avoiding stack overflow. # Example: ```python def optimized_flatten(arr): pass # Example usage: input_arr = [1, [2, [3, 4], [], 5], [6, [7, 8, [9, []]], 10], 11] print(optimized_flatten(input_arr)) # Expected Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] nested_list = [1, \'hello\', [2, \'world\'], [[[3], 4], \'!\', [], [5, [\'Python\']]], 6] print(optimized_flatten(nested_list)) # Expected Output: [1, \'hello\', 2, \'world\', 3, 4, \'!\', 5, \'Python\', 6] empty_list = [] print(optimized_flatten(empty_list)) # Expected Output: [] complex_list = [[[[[[[[[[[]]]]]]]]]], [42]] print(optimized_flatten(complex_list)) # Expected Output: [42] ``` Implement the `optimized_flatten` function such that it meets the input-output specifications and performance requirements.","solution":"def optimized_flatten(arr): Flattens a nested array into a single list. Parameters: arr (list): The input list which can contain nested lists. Returns: list: A single flattened list containing all elements from the input list. flat_list = [] def flatten_helper(sub_arr): for item in sub_arr: if isinstance(item, list): flatten_helper(item) else: flat_list.append(item) flatten_helper(arr) return flat_list"},{"question":"# Question: Simplify Unix-Style Absolute Path You are given an absolute path for a file (Unix-style), and you need to simplify this path. Unix paths use the forward slash (\\"/\\") as directory separators. The main operations are: - A single dot (\\".\\") refers to the current directory; - A double dot (\\"..\\") moves up to the parent directory; - Multiple consecutive slashes (\\"/\\") are treated as a single slash. Your task is to write a function `simplify_abspath(path: str) -> str` that simplifies the given Unix-style path. Constraints: - The path is a non-empty string. - The path always starts with a forward slash (\\"/\\"). Input: - A string `path` representing the absolute Unix-style path. Output: - A string representing the simplified canonical path. Examples: ```python >>> simplify_abspath(\\"/home/\\") \\"/home\\" >>> simplify_abspath(\\"/a/./b/../../c/\\") \\"/c\\" >>> simplify_abspath(\\"/../\\") \\"/\\" >>> simplify_abspath(\\"/home//foo/\\") \\"/home/foo\\" >>> simplify_abspath(\\"/a//b////c/d//././/..\\") \\"/a/b/c\\" ``` Craft an optimal solution considering edge cases and typical constraints. Your implementation should be careful about performance for longer paths.","solution":"def simplify_abspath(path: str) -> str: Simplifies the given Unix-style absolute path. Args: path (str): The absolute path to simplify. Returns: str: Simplified canonical path. components = path.split(\'/\') stack = [] for component in components: if component == \'..\': if stack: stack.pop() elif component and component != \'.\': stack.append(component) return \'/\' + \'/\'.join(stack)"},{"question":"You are part of a team working on an image processing application, and one of the functionalities includes rotating images. Each image is represented by an ( n times n ) matrix. Task Write a function `rotate_matrix(matrix: List[List[int]]) -> None` that modifies the given ( n times n ) 2D matrix by 90 degrees clockwise rotation in-place. Input * `matrix`: A list of lists of integers ( matrix ) representing an ( n times n ) matrix. Output * The function should modify the input matrix in-place and does not return any value. Constraints * ( 1 leq n leq 20 ) * Elements in the matrix are integers. Example ```python Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) # the matrix should be rotated in-place Output: matrix = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Additional Constraints * Ensure the function is optimized for both time and space considerations. * The input matrix should be directly modified; do not return a new matrix. * Consider edge cases such as an empty matrix or a matrix with one element. Implementation Focus on providing the correct implementation of the `rotate_matrix` function as described with consideration of the described edge cases and performance requirements.","solution":"def rotate_matrix(matrix): Rotates the given n x n matrix by 90 degrees clockwise in-place. Parameters: matrix (List[List[int]]): The n x n matrix to be rotated if not matrix or len(matrix) == 1: return # No need to rotate for empty or single-element matrix n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"# Primality Test Implementation Objective Implement the Rabin-Miller Primality Test function to determine whether a given number is prime. Description You are provided with the function definition for `is_prime(n, k)`, a probabilistic algorithm called the Rabin-Miller Primality Test. This function must decide if a number `n` (>= 5) is prime or composite with a provided level of certainty determined by `k`. # Function Signature ```python def is_prime(n: int, k: int) -> bool: pass ``` Inputs - `n` (int): The number to be tested for primality. - `k` (int): The number of iterations to perform for accuracy. Outputs - Returns `True` if the number `n` is probably prime. - Returns `False` if the number `n` is definitely composite. Constraints - (5 leq n leq 10^{18}) - (1 leq k leq 100) Example ```python print(is_prime(31, 5)) # Output: True print(is_prime(18, 5)) # Output: False ``` # Notes - For every iteration, the accuracy of the primality test improves. More iterations (larger k) reduce the probability of a composite number being falsely identified as prime. - Handle special conditions where n is less than 5 appropriately, ensuring the function works for all edge cases. Implement the `is_prime` function in Python based on the provided template.","solution":"import random def is_prime(n: int, k: int) -> bool: Rabin-Miller Primality Test to check if a number is prime with a probability. Parameters: n (int): The number to be tested for primality. k (int): The number of iterations to perform for accuracy. Returns: bool: True if n is probably prime, False if n is definitely composite. # Special cases for n less than 5 if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False # Write n as 2^r * d + 1 with d odd by factoring powers of 2 from n - 1 r, d = 0, n - 1 while d % 2 == 0: r += 1 d //= 2 # Perform k trials of the test for _ in range(k): a = random.randint(2, n - 2) x = pow(a, d, n) if x == 1 or x == n - 1: continue for _ in range(r - 1): x = pow(x, 2, n) if x == n - 1: break else: return False return True"},{"question":"# Bucket Sort Implementation Challenge Objective: Implement the Bucket Sort algorithm to effectively sort a given list of floating-point numbers. Problem Statement: You are given a list of floating-point numbers (arr) where each element is uniformly distributed in the range [0, 1). Sort the list using the Bucket Sort algorithm. You are required to implement both the bucket sorting mechanism and a sorting mechanism within each bucket. You may use the provided insertion sort as the sorting mechanism within buckets. Function Signature: ```python def bucket_sort(arr: List[float]) -> List[float]: pass ``` Input: - A list of floating-point numbers (arr) where (0 leq arr[i] < 1). Output: - The sorted list of floating-point numbers. Constraints: - (0 leq text{len(arr)} leq 10^6) Example: ```python assert bucket_sort([0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68]) == [0.12, 0.17, 0.21, 0.23, 0.26, 0.39, 0.68, 0.72, 0.78, 0.94] ``` Additional Challenge: Optimize the `bucket_sort` for a large dataset containing up to (10^6) elements to maintain efficient performance without exceeding memory constraints.","solution":"from typing import List def insertion_sort(arr: List[float]) -> List[float]: A helper function to perform insertion sort on a list. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr def bucket_sort(arr: List[float]) -> List[float]: Perform bucket sort on a list of floating-point numbers in the range [0, 1). if not arr: return [] # Create an empty list of buckets num_buckets = len(arr) buckets = [[] for _ in range(num_buckets)] # Distribute the elements into the buckets for value in arr: index = int(value * num_buckets) buckets[index].append(value) # Sort individual buckets using insertion sort, and concatenate the results sorted_arr = [] for bucket in buckets: sorted_bucket = insertion_sort(bucket) sorted_arr.extend(sorted_bucket) return sorted_arr"},{"question":"# Question: Summarize Sorted Integer Array Ranges **Context**: You have been assigned the task of summarizing ranges within a sorted integer array which does not contain any duplicates. This is commonly needed in scenarios like summarizing log ranges, date ranges, or any sequence data in analytics where ranges represent consecutive data points. **Problem Statement**: Write a function `summarize_ranges(array: List[int]) -> List[str]` that takes a sorted list of integers and returns a list of strings where each string represents a range of consecutive integers. **Input**: - A sorted list of integers `array` without duplicates, where `0 <= len(array) <= 100`. **Output**: - A list of strings where each string represents a summarized range of consecutive integers. - For a consecutive range, represent it as \\"start-end\\". - For a single number, represent it as \\"start\\". **Constraints**: - You must ensure your solution has time complexity of O(n) and space complexity of O(1) auxiliary space. **Examples**: 1. Given the input `[0, 1, 2, 4, 5, 7]`, the function should return `[\\"0-2\\", \\"4-5\\", \\"7\\"]`. 2. Given the input `[1, 3, 5, 7]`, the function should return `[\\"1\\", \\"3\\", \\"5\\", \\"7\\"]`. 3. Given the input `[0]`, the function should return `[\\"0\\"]`. **Edge Cases to Consider**: - An empty array should yield an empty list. - Arrays with no consecutive numbers. - Arrays where all elements are consecutive. Implement the function `summarize_ranges` in the provided template: ```python from typing import List def summarize_ranges(array: List[int]) -> List[str]: res = [] if len(array) == 0: return res if len(array) == 1: return [str(array[0])] start = end = array[0] for num in array[1:]: if num - end == 1: end = num else: res.append(f\\"{start}-{end}\\" if start != end else str(start)) start = end = num res.append(f\\"{start}-{end}\\" if start != end else str(start)) return res ```","solution":"from typing import List def summarize_ranges(array: List[int]) -> List[str]: res = [] if len(array) == 0: return res start = end = array[0] for num in array[1:]: if num - end == 1: end = num else: res.append(f\\"{start}-{end}\\" if start != end else str(start)) start = end = num res.append(f\\"{start}-{end}\\" if start != end else str(start)) return res"},{"question":"You are tasked with implementing a function that computes the **Least Common Multiple (LCM)** of two non-negative integers using the **Greatest Common Divisor (GCD)** algorithm, but with bitwise operations for efficiency. Write a function `efficient_lcm(a, b)` that takes two non-negative integers `a` and `b`, and returns their LCM using an efficient method for calculating GCD with bitwise operations. # Expected Function Signature ```python def efficient_lcm(a: int, b: int) -> int: ``` # Input and Output Formats * **Input**: Two non-negative integers `a` and `b` (0 <= a, b <= 10^9). * **Output**: The LCM of `a` and `b`. # Constraints * The integers `a` and `b` will not both be zero at the same time. * The function should handle large inputs efficiently. # Example ```python assert efficient_lcm(12, 18) == 36 assert efficient_lcm(0, 5) == 0 assert efficient_lcm(21, 6) == 42 ``` # Performance Requirements * The function should run efficiently within time complexity O((log(min(a, b)))^2). * Ensure minimal space usage, O(1) additional space. # Scenario Imagine you are working on developing a low-level system where minimizing computational cycles is critical. The system requires frequent calculations of LCM efficiently to ensure smooth operation, making the performance and correctness of this function paramount. Ensure your implementation handles edge cases and input constraints effectively.","solution":"def gcd(a: int, b: int) -> int: while b != 0: a, b = b, a % b return a def efficient_lcm(a: int, b: int) -> int: if a == 0 or b == 0: return 0 return (a * b) // gcd(a, b)"},{"question":"Generate Power Set Scenario Imagine you are a software engineer tasked with developing a feature for a data analysis tool. This feature should allow users to select subsets of a dataset to experiment with different feature combinations. For this, you need to implement a function that can generate all possible subsets of a given list of integers. Task Write a function `generate_subsets(nums)` that generates all possible subsets of a list of distinct integers `nums`. The solution should cover both recursive (backtracking) and iterative approaches. Function Signature ```python def generate_subsets(nums: List[int]) -> List[List[int]]: pass ``` Input - `nums` (List[int]): A list of distinct integers (1 <= len(nums) <= 20, -10 <= nums[i] <= 10). Output - List[List[int]]: A list of lists containing all possible subsets of the input list `nums`. Example ```python assert generate_subsets([1, 2, 3]) == [ [], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3] ] ``` Constraints - The subsets within the list can be in any order. - Each subset itself can be in any order. Performance Requirements - Ensure the solution runs efficiently given the constraints on input size (len(nums) <= 20). Additional Instructions - Consider edge cases such as an empty list or a list with one element. - Implement both the recursive (backtracking) and iterative variations within your function.","solution":"from typing import List def generate_subsets(nums: List[int]) -> List[List[int]]: Returns all possible subsets of a given list of nums. # Iterative approach to generate subsets def iterative_subsets(nums): result = [[]] for num in nums: result += [current + [num] for current in result] return result # Helper function for the recursive approach def recursive_backtrack(start, path): # Append the generated subset (path) subsets.append(path) for i in range(start, len(nums)): # Move forward with the next number included in the path recursive_backtrack(i + 1, path + [nums[i]]) # Generate subsets using the iterative approach result_iterative = iterative_subsets(nums) # Generate subsets using the recursive approach subsets = [] recursive_backtrack(0, []) return result_iterative # Or return subsets if you want to check the recursive result"},{"question":"# Question: Remove Duplicates from Singly Linked List You are provided with a singly linked list where each node contains a value (which can be a string or an integer). Your task is to implement a function to remove duplicate values from this linked list. You must implement two versions of the function: 1. Using additional space (such as a hashset) to track the occurrences of values. 2. Without using any additional space (just manipulating pointers). Function Signature ```python def remove_dups(head): Removes duplicates from the linked list using additional space. Parameters: head (Node): head node of the singly linked list. Returns: Node: head node of the modified linked list. def remove_dups_without_set(head): Removes duplicates from the linked list without using additional space. Parameters: head (Node): head node of the singly linked list. Returns: Node: head node of the modified linked list. ``` Node Class ```python class Node: def __init__(self, val = None): self.val = val self.next = None ``` Constraints - The linked list may contain at most 10^5 nodes. - Node values are not limited to integers and can also be strings. Example ```python # Example Linked List: A -> A -> B -> C -> D -> C -> F -> G a1 = Node(\\"A\\") a2 = Node(\\"A\\") b = Node(\\"B\\") c1 = Node(\\"C\\") d = Node(\\"D\\") c2 = Node(\\"C\\") f = Node(\\"F\\") g = Node(\\"G\\") a1.next = a2 a2.next = b b.next = c1 c1.next = d d.next = c2 c2.next = f f.next = g remove_dups(a1) # Output: \\"A -> B -> C -> D -> F -> G\\" print_linked_list(a1) # Implementation for print_linked_list is not required for the task remove_dups_without_set(a1) # Output: \\"A -> B -> C -> D -> F -> G\\" print_linked_list(a1) # Implementation for print_linked_list is not required for the task ``` Note: The function **print_linked_list** is provided in the code snippet for testing and debugging purposes and is not part of the assessment task. Also, ensure the linked list remains intact and properly connected after removing duplicates.","solution":"class Node: def __init__(self, val=None): self.val = val self.next = None def remove_dups(head): if head is None: return None current = head seen = set() seen.add(current.val) while current.next is not None: if current.next.val in seen: current.next = current.next.next # Remove the node else: seen.add(current.next.val) current = current.next return head def remove_dups_without_set(head): if head is None: return None current = head while current is not None: runner = current while runner.next is not None: if runner.next.val == current.val: runner.next = runner.next.next # Remove the node else: runner = runner.next current = current.next return head"},{"question":"# Question You are required to design a stack with both Array-based and LinkedList-based implementations that support the following operations efficiently: 1. **push(item)**: Add `item` to the top of the stack. 2. **pop()**: Remove the top item from the stack and return it. 3. **peek()**: Return the current top item of the stack without removing it. 4. **is_empty()**: Check if the stack is empty. To demonstrate your understanding, implement two subclasses of an abstract stack class: 1. **ArrayStack**: Uses a dynamic array with an initial capacity and doubles the size when the capacity is reached. 2. **LinkedListStack**: Uses singly linked nodes to form the stack. Function signatures: ```python class ArrayStack(AbstractStack): def __init__(self, size=10): # constructor def __iter__(self): # iterator implementation def push(self, value): # push method def pop(self): # pop method def peek(self): # peek method class LinkedListStack(AbstractStack): def __init__(self): # constructor def __iter__(self): # iterator implementation def push(self, value): # push method def pop(self): # pop method def peek(self): # peek method ``` Constraints: 1. **ArrayStack:** - Initial size of the array should be 10 or user-provided value. - The stack should double its array size when capacity is reached. 2. **LinkedListStack:** - Use singly linked nodes for stack operations. - Handle edge cases such as popping from an empty stack. Input: - Various method calls like `push(value)`, `pop()`, `peek()`, and `is_empty()` on stack objects. Output: - For each `push` method call, modify the stack. - For each `pop` method call, return the top element of the stack. - For each `peek` method call, return the top element of the stack without modifying it. - For each `is_empty` method call, return a boolean indicating if the stack is empty. Implement these classes accurately while considering edge cases and ensuring that both time and space complexities are taken care of.","solution":"class AbstractStack: def push(self, item): raise NotImplementedError def pop(self): raise NotImplementedError def peek(self): raise NotImplementedError def is_empty(self): raise NotImplementedError class ArrayStack(AbstractStack): def __init__(self, size=10): self.size = size self.array = [None] * self.size self.top = -1 def push(self, item): if self.top == self.size - 1: self._resize() self.top += 1 self.array[self.top] = item def pop(self): if self.is_empty(): raise IndexError(\\"Pop from empty stack\\") item = self.array[self.top] self.array[self.top] = None self.top -= 1 return item def peek(self): if self.is_empty(): raise IndexError(\\"Peek from empty stack\\") return self.array[self.top] def is_empty(self): return self.top == -1 def _resize(self): self.size *= 2 new_array = [None] * self.size for i in range(self.top + 1): new_array[i] = self.array[i] self.array = new_array class Node: def __init__(self, value=None, next_node=None): self.value = value self.next_node = next_node class LinkedListStack(AbstractStack): def __init__(self): self.head = None def push(self, item): new_node = Node(item) new_node.next_node = self.head self.head = new_node def pop(self): if self.is_empty(): raise IndexError(\\"Pop from empty stack\\") item = self.head.value self.head = self.head.next_node return item def peek(self): if self.is_empty(): raise IndexError(\\"Peek from empty stack\\") return self.head.value def is_empty(self): return self.head is None"},{"question":"# Binary Search Depth Application In a sorted array, finding just one occurrence of a target value is relatively straightforward using binary search. However, more complex scenarios involve finding the first and last occurrence of a value in the same sorted array, which is essential in many applications, such as frequency counting or range queries. Task Write a function `find_first_and_last(array: List[int], target: int) -> Tuple[int, int]` that finds the first and last positions of a given target value in the sorted array `array`. If the target is not found in the array, the function should return `(-1, -1)`. # Input Format - `array`: A list of integers sorted in ascending order. - `target`: An integer value to be found in the array. # Output Format A tuple of two integers: - The index of the first occurrence of the target. - The index of the last occurrence of the target. - If the target is not present, return `(-1, -1)`. # Constraints - 1 <= len(array) <= 10^4 - -10^6 <= array[i], target <= 10^6 # Examples ```python assert find_first_and_last([5, 7, 7, 8, 8, 10], 8) == (3, 4) assert find_first_and_last([5, 7, 7, 8, 8, 10], 6) == (-1, -1) assert find_first_and_last([], 0) == (-1, -1) assert find_first_and_last([2, 2, 2, 2, 2], 2) == (0, 4) ``` # Explanation - In the array `[5, 7, 7, 8, 8, 10]`: - The first occurrence of `8` is at index `3`. - The last occurrence of `8` is at index `4`. - In the array `[5, 7, 7, 8, 8, 10]`, the target `6` does not exist, hence the output is `(-1, -1)`. - An empty array returns `(-1, -1)`. - In the array `[2, 2, 2, 2, 2]`, the target `2` is present from index `0` to `4`. You are required to implement the function efficiently with an overall time complexity of O(log(n)).","solution":"from typing import List, Tuple def find_first_and_last(array: List[int], target: int) -> Tuple[int, int]: def binary_search_left(array, target): low, high = 0, len(array) while low < high: mid = (low + high) // 2 if array[mid] < target: low = mid + 1 else: high = mid return low def binary_search_right(array, target): low, high = 0, len(array) while low < high: mid = (low + high) // 2 if array[mid] <= target: low = mid + 1 else: high = mid return low left_index = binary_search_left(array, target) right_index = binary_search_right(array, target) - 1 if left_index <= right_index and left_index < len(array) and array[left_index] == target: return (left_index, right_index) else: return (-1, -1)"},{"question":"# Binary Tree Height Calculation **Objective**: Write a function to compute the height of a binary tree. **Scenario**: You are building a software module to perform various operations on binary trees. One essential feature is to calculate the height of a given binary tree. This function will be used in balancing procedures, and to ensure optimal performance of tree operations, analyzing tree height efficiently is crucial. **Function to Implement**: * Function Name: `height` * Input: A single parameter - `root`, which is the root node of a binary tree. * Output: Returns a single integer representing the height of the tree. **Requirements**: 1. The function must handle an empty tree and return 0. 2. It should perform the calculation using recursion. 3. The solution should be efficient in terms of both time and space complexity. *Constraints*: - The number of nodes in the binary tree will not exceed 10^5. - Each node\'s value is unique and within integer limits. **Example**: Consider the binary tree shown below: ``` 9 / 6 12 / / 3 8 10 15 / 7 18 ``` The height of the tree is 4. **Your Task**: Implement the `height` function to correctly determine tree height for various test cases. Ensure thorough testing by including edge cases such as empty trees, trees with one node, and balanced vs. unbalanced trees. ```python class Node: def __init__(self, value): self.value = value self.left = None self.right = None class BST: def __init__(self): self.root = None def insert(self, value): if self.root is None: self.root = Node(value) else: self._insert_recursive(self.root, value) def _insert_recursive(self, current, value): if value < current.value: if current.left is None: current.left = Node(value) else: self._insert_recursive(current.left, value) else: if current.right is None: current.right = Node(value) else: self._insert_recursive(current.right, value) def height(root): # Your implementation here pass # Example of how your function might be tested import unittest class TestSuite(unittest.TestCase): def setUp(self): self.tree = BST() self.tree.insert(9) self.tree.insert(6) self.tree.insert(12) self.tree.insert(3) self.tree.insert(8) self.tree.insert(10) self.tree.insert(15) self.tree.insert(7) self.tree.insert(18) def test_height(self): self.assertEqual(4, height(self.tree.root)) if __name__ == \'__main__\': unittest.main() ``` ***Note***: You need not worry about constructing the tree; you may assume a working BST insertion method is provided. Focus solely on implementing the `height` function effectively, considering performance and edge cases.","solution":"class Node: def __init__(self, value): self.value = value self.left = None self.right = None class BST: def __init__(self): self.root = None def insert(self, value): if self.root is None: self.root = Node(value) else: self._insert_recursive(self.root, value) def _insert_recursive(self, current, value): if value < current.value: if current.left is None: current.left = Node(value) else: self._insert_recursive(current.left, value) else: if current.right is None: current.right = Node(value) else: self._insert_recursive(current.right, value) def height(root): if root is None: return 0 left_height = height(root.left) right_height = height(root.right) return max(left_height, right_height) + 1"},{"question":"**Matrix Inversion Challenge** You are tasked with implementing an algorithm to compute the inverse of a given n x n matrix. This problem will assess your understanding of matrix operations, recursive determinant calculation, and optimization of matrix traversals. # Problem Statement Write a function `invert_matrix(matrix)` which takes a two-dimensional list `matrix` of integers or floating-point numbers, representing an n x n matrix, and returns its inverse. If the matrix is not invertible, the function should return an error message. # Input Format - `matrix`: a list of lists, where each list represents a row of the matrix. Each row contains exactly n numbers and there are exactly n rows in total. # Output Format - A list of lists: representing the inverse matrix where each list is a row of the matrix. - Error messages: - Return `[[ -1 ]]` if the input is not a matrix. - Return `[[ -2 ]]` if the matrix is not square. - Return `[[ -3 ]]` if the matrix dimensions are smaller than 2x2. - Return `[[ -4 ]]` if the matrix is singular and cannot be inverted (determinant = 0). # Constraints - The matrix will contain integers or floating-point numbers. - Avoid using libraries like NumPy, use basic Python constructs. # Sample Input and Output Input ```python matrix = [ [4, 7], [2, 6] ] ``` Output ```python invert_matrix(matrix) # Output: [[0.6, -0.7], [-0.2, 0.4]] ``` # Evaluation Criteria - Correctness: Your implementation should correctly handle edge cases and produce the correct inverse for valid matrices. - Efficiency: Optimize recursive calls and matrix traversals to reduce time complexity, particularly for larger matrices. - Code Quality: Ensure readability, proper error handling, and appropriate use of helper functions for modularity. **Important Notes**: - You need to deal with fractional values meticulously to avoid floating-point precision issues. - Clearly handle all error messages for invalid inputs as specified in the constraints.","solution":"def get_matrix_minor(matrix, row, col): return [r[:col] + r[col+1:] for r in (matrix[:row] + matrix[row+1:])] def get_matrix_determinant(matrix): if len(matrix) == 2: return matrix[0][0]*matrix[1][1] - matrix[0][1]*matrix[1][0] determinant = 0 for c in range(len(matrix)): determinant += ((-1)**c) * matrix[0][c] * get_matrix_determinant(get_matrix_minor(matrix, 0, c)) return determinant def get_matrix_inverse(matrix): determinant = get_matrix_determinant(matrix) if determinant == 0: return [[-4]] if len(matrix) == 2: return [ [matrix[1][1]/determinant, -1*matrix[0][1]/determinant], [-1*matrix[1][0]/determinant, matrix[0][0]/determinant] ] cofactors = [] for r in range(len(matrix)): cofactorRow = [] for c in range(len(matrix)): minor = get_matrix_minor(matrix, r, c) cofactorRow.append(((-1)**(r+c)) * get_matrix_determinant(minor)) cofactors.append(cofactorRow) cofactors = list(map(list, zip(*cofactors))) for r in range(len(cofactors)): for c in range(len(cofactors)): cofactors[r][c] = cofactors[r][c]/determinant return cofactors def invert_matrix(matrix): if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix): return [[-1]] n = len(matrix) if n == 0 or any(len(row) != n for row in matrix): return [[-2]] if n < 2: return [[-3]] return get_matrix_inverse(matrix)"},{"question":"# Bit Manipulation Enhanced Function In this task, you will use the basic bit manipulation operations to create a more complex function. This function should take an integer `num` and a list of tuples `operations`, where each tuple contains three values indicating the type of operation (get, set, clear, or update), the bit position, and the value if necessary. # Function Signature ```python def process_bits(num: int, operations: list[tuple[str, int, int]]) -> list[int]: ``` # Input * `num` is an integer representing the original number on which to perform the operations. * `operations` is a list of tuples: - The first value in each tuple is a string representing the operation (`\'get\'`, `\'set\'`, `\'clear\'`, or `\'update\'`). - The second value is the bit position (0-indexed). - The third value is only used for the update operation, representing the new bit value (0 or 1), and should be ignored for other operations. # Output * The function should return a list of integers. Each integer represents the result of a `\'get\'` operation in the order they appear in the operations list. Other operations should be performed but not included in the output list. # Example ```python num = 29 # In binary: 11101 operations = [ (\'get\', 2, 0), # Expected to return 1 (\'set\', 0, 0), # Change num from 11101 to 11101 (already set) (\'clear\', 3, 0), # Change num from 11101 to 10101 (\'update\', 1, 1), # Change num from 10101 to 10111 (\'get\', 1, 0) # Expected to return 1 ] assert process_bits(num, operations) == [1, 1] ``` # Constraints * Operations list length is up to 1000. * Bit positions are non-negative integers. * For update operations, the value will always be either 0 or 1. * `num` will be within the range of 32-bit integers. # Implementation Notes Use the provided bit manipulation functions (`get_bit`, `set_bit`, `clear_bit`, `update_bit`) in your implementation.","solution":"def get_bit(num, pos): Return 1 if the bit at \'pos\' is set (1), otherwise return 0. return (num >> pos) & 1 def set_bit(num, pos): Return an integer with the bit at \'pos\' set to 1. return num | (1 << pos) def clear_bit(num, pos): Return an integer with the bit at \'pos\' cleared to 0. return num & ~(1 << pos) def update_bit(num, pos, value): Return an integer with the bit at \'pos\' updated to \'value\'. value = value & 1 # Ensure value is either 0 or 1 return (num & ~(1 << pos)) | (value << pos) def process_bits(num, operations): Process a list of bit manipulation operations on the given number. result = [] for operation in operations: op_type, pos, value = operation if op_type == \'get\': result.append(get_bit(num, pos)) elif op_type == \'set\': num = set_bit(num, pos) elif op_type == \'clear\': num = clear_bit(num, pos) elif op_type == \'update\': num = update_bit(num, pos, value) return result"},{"question":"# Two Sum Problem in Python You are given an array of integers and a target integer. Your task is to write a function that returns the indices of the two numbers such that they add up to the target. You may assume each input would have exactly one solution, and you may not use the same element twice. Input Format The function will receive two parameters: 1. **array**: List of integers. 2. **target**: An integer representing the target sum. Output Format Return a tuple of two integers representing the indices of the two numbers that add up to the specified target. If no such pair exists, return `None`. Function signature: ```python def two_sum(array: List[int], target: int) -> Tuple[int, int]: pass ``` Constraints - Each input list will have exactly one solution. - The list will have at least two elements. - Elements within the list may include negative numbers, zero, and positive numbers. - The same element cannot be used twice. Example ```python def test_two_sum(): assert two_sum([2, 7, 11, 15], 9) == (0, 1) assert two_sum([3, 2, 4], 6) == (1, 2) assert two_sum([3, 3], 6) == (0, 1) ``` Scenario Imagine you are a software engineer at an e-commerce company. You are tasked with creating a feature that identifies two products from a product list that together enable customers to use a specific discount. Implement the function to determine the indices of the products (elements) that sum up to a given target. Performance Requirement The solution should be optimized for both time and space, working efficiently even with large input sizes.","solution":"from typing import List, Tuple def two_sum(array: List[int], target: int) -> Tuple[int, int]: Returns the indices of two numbers such that they add up to the target. Args: array (List[int]): List of integers. target (int): Target sum. Returns: Tuple[int, int]: Indices of the two numbers that add up to the target. num_to_index = {} for index, num in enumerate(array): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return None"},{"question":"# Context: A hospital wants to manage its patients based on the urgency of their cases. They decided to use a priority queue to ensure that each patient is treated in the order of the severity of their condition. To facilitate this, you are tasked with implementing a priority queue using a linear array. # Problem Statement: Implement a priority queue that supports the following operations: 1. **Insert (item, priority)**: Insert an item with the given priority. If no priority is given, assign the item as its priority. 2. **Pop**: Remove and return the item with the lowest priority. Implement the following methods in the `PriorityQueue` class: - `push(self, item, priority=None)`: Inserts an item into the priority queue. - `pop(self)`: Removes and returns the item with the lowest priority. # Input and Output: - The `push` method will take two parameters: `item` (the data to be stored) and `priority` (an integer representing the item\'s priority, optional). - The `pop` method will return the item with the lowest priority. If the queue is empty, return `None`. # Constraints: - The priority queue will have at most 1000 elements. - All priorities are integers and can be negative. # Example: ```python pq = PriorityQueue() pq.push(\\"Patient A\\", priority=3) pq.push(\\"Patient B\\", priority=1) pq.push(\\"Patient C\\", priority=2) assert pq.pop() == \\"Patient B\\" # Item with priority 1 assert pq.pop() == \\"Patient C\\" # Item with priority 2 assert pq.pop() == \\"Patient A\\" # Item with priority 3 assert pq.pop() == None # No more items in the queue ``` # Notes: - Your implementation should ensure the queue remains sorted by priority after each insertion. - Think about the edge cases like handling insertions with the same priority and popping from an empty queue.","solution":"class PriorityQueue: def __init__(self): self.queue = [] def push(self, item, priority=None): Insert an item into the priority queue with optional priority. if priority is None: priority = item self.queue.append((priority, item)) self.queue.sort(key=lambda x: x[0]) def pop(self): Remove and return the item with the lowest priority. if not self.queue: return None return self.queue.pop(0)[1]"},{"question":"# Context You are tasked with developing a robust method to compute the square root of a positive integer N with a defined precision factor P using iterative methods. The goal is to implement this and understand its performance characteristics, ensuring it handles various edge cases efficiently. # Task Implement a function `approximate_square_root` that takes in: - An integer `N` (1 ≤ N ≤ 10^9) - A floating-point `P` (0 < P < 1) The function should return a float representing the square root of `N` with an absolute error not greater than `P`. # Input - An integer `N`: The number for which the square root is to be calculated. - A float `P`: The allowed error margin for the approximation. # Output - A float representing the square root of `N` such that the result has an absolute error no greater than `P`. # Example ```python >>> approximate_square_root(5, 0.001) 2.236 >>> approximate_square_root(10, 0.0001) 3.162 ``` # Constraints & Requirements - Ensure that your solution efficiently handles the upper limits of N within reasonable time. - Consider edge cases where the initial guess might affect performance. - Return the result that satisfies the precision constraints. ```python def approximate_square_root(n, p): Calculate the square root of \'n\' within an absolute error of \'p\'. :param n: int - the number to find the square root of :param p: float - the precision of the result :return: float - the square root approximation of \'n\' guess = n / 2.0 while abs(guess * guess - n) > p: guess = (guess + n / guess) / 2.0 return guess # Example Test Cases print(approximate_square_root(5, 0.001)) # Expected: Close to 2.236 print(approximate_square_root(10, 0.0001)) # Expected: Close to 3.162 ``` # Considerations - Analyze your solution for performance bottlenecks especially in terms of iteration count. - Ensure the function handles various edge cases effectively, including testing with large values of N.","solution":"def approximate_square_root(n, p): Calculate the square root of \'n\' within an absolute error of \'p\'. :param n: int - the number to find the square root of :param p: float - the precision of the result :return: float - the square root approximation of \'n\' guess = n / 2.0 while abs(guess * guess - n) > p: guess = (guess + n / guess) / 2.0 return guess"},{"question":"# Context You\'re tasked with creating a utility to flatten deeply nested lists which is a common requirement in data preprocessing. Flattening an array means converting a potentially nested array into a single-level array, preserving the order of elements. # Problem Statement Write a Python function named `custom_flatten` that accepts a nested list (which can contain other lists at any depth) and returns a flattened list where all the elements are brought to a single level. # Function Signature ```python def custom_flatten(input_list): pass ``` # Input * `input_list`: A list that can contain nested lists, integers, strings, and other types. # Output * A single list containing all elements from the nested lists in their original order. # Constraints * Do not use any in-built flattening functions. * Nested list structure can be arbitrary and include multiple levels of nested lists. * The function should handle empty lists correctly. # Example ```python assert custom_flatten([1, [2, [3, 4]], 5, [[6, [7, 8], 9]]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9] assert custom_flatten([[[\'a\']], \'b\', [[\'c\', [1, [2]]]]]) == [\'a\', \'b\', \'c\', 1, 2] assert custom_flatten([]) == [] assert custom_flatten([[], [[], []]]) == [] ``` # Additional Guidelines * Consider both recursive and generator-based approaches. * Ensure your code handles edge cases such as nested empty lists and mixed data types. * Aim for both correctness and efficiency in your implementation.","solution":"def custom_flatten(input_list): Flatten a nested list into a single-level list. Args: input_list (list): A list that can contain nested lists of arbitrary depth. Returns: list: A single-level list with all the elements from the nested lists. output_list = [] def flatten(item): if isinstance(item, list): for sub_item in item: flatten(sub_item) else: output_list.append(item) flatten(input_list) return output_list"},{"question":"# Scenario You\'re working with large sets of time-series data where you must continuously find the highest values within a sliding window to promptly react to rapid changes. This is a common task in monitoring systems for things like stock prices, temperatures in a data center, or requests per second on a server. # Problem Statement Given an array `nums` of integers and a sliding window size `k`, write a function `max_sliding_window(nums, k)` to find the maximum value in each sliding window as it moves from left to right across the array. You should implement the function with the following signature: ```python def max_sliding_window(nums, k): :type nums: List[int] :type k: int :rtype: List[int] ``` # Input & Output * **Input**: * `nums`: A list of integers. * `k`: An integer representing the size of the sliding window. * **Output**: * A list of integers representing the maximum values in each sliding window. # Constraints * `1 <= len(nums) <= 10^5` * `-10^4 <= nums[i] <= 10^4` * `1 <= k <= len(nums)` # Examples ```python assert max_sliding_window([1, 3, -1, -3, 5, 3, 6, 7], 3) == [3, 3, 5, 5, 6, 7] assert max_sliding_window([1, -1], 1) == [1, -1] assert max_sliding_window([9, 11], 2) == [11] ``` # Function Behavior Ensure your function: 1. Efficiently computes the maximum within each sliding window using a linear time solution. 2. Handles edge cases where `nums` might have only one element, or where `k` is equal to the length of `nums`. 3. Properly manages windows that might contain negative numbers or very large values spread across the array.","solution":"from collections import deque def max_sliding_window(nums, k): Returns the maximum values in each sliding window of size k as it moves from left to right across nums. deq = deque() res = [] for i, num in enumerate(nums): # Remove indices of elements not within the sliding window if deq and deq[0] < i - k + 1: deq.popleft() # Remove elements not useful, i.e., smaller than the current element while deq and nums[deq[-1]] < num: deq.pop() # Add current element\'s index deq.append(i) # Add the maximum of the current window to the result list if i >= k - 1: res.append(nums[deq[0]]) return res"},{"question":"Design and implement a function that computes the sum of two polynomials represented using the `Polynomial` class. The function signature should be: ```python def add_polynomials(p1: Polynomial, p2: Polynomial) -> Polynomial: pass ``` # Input: - `p1`: A `Polynomial` object. - `p2`: A `Polynomial` object. # Output: - A `Polynomial` object representing the sum of `p1` and `p2`. # Constraints: 1. Both inputs will be valid `Polynomial` objects. 2. The polynomials may have integer, float, or Fraction coefficients. 3. The monomials in the polynomials may have positive, negative, or zero powers. # Requirements: 1. Implement the function `add_polynomials` to compute and return the sum of the two input polynomial objects. 2. Ensure the resulting polynomial is normalized, meaning it should not have any monomials with zero coefficients or zero powers unless the polynomial is zero. 3. The function should utilize the existing methods in the `Polynomial` class to ensure efficiency and correctness. # Example: ```python from fractions import Fraction p1 = Polynomial([Monomial({1: 1}, 2), Monomial({2: 2}, Fraction(3, 2))]) p2 = Polynomial([Monomial({1: 1}, 3), Monomial({2: 2}, Fraction(-3, 2)), Monomial({}, 4)]) result = add_polynomials(p1, p2) print(result) # Output should be a representation of Polynomial: 5(a_1) + 4 ``` # Execution: You should provide a working implementation of the function, along with a few test cases to validate its correctness.","solution":"class Monomial: def __init__(self, variables, coefficient): self.variables = variables # dict with variable as key and power as value self.coefficient = coefficient def __eq__(self, other): return self.variables == other.variables and self.coefficient == other.coefficient def __add__(self, other): if self.variables == other.variables: return Monomial(self.variables, self.coefficient + other.coefficient) raise ValueError(\\"Monomials with different variables cannot be added\\") def __repr__(self): vars_str = \'\'.join(f\'{var}^{exp}\' for var, exp in self.variables.items()) return f\'{self.coefficient}{vars_str}\' class Polynomial: def __init__(self, monomials): self.monomials = {} for monomial in monomials: if frozenset(monomial.variables.items()) in self.monomials: self.monomials[frozenset(monomial.variables.items())] += monomial.coefficient else: self.monomials[frozenset(monomial.variables.items())] = monomial.coefficient # Remove zero coefficient monomials self.monomials = {k: v for k, v in self.monomials.items() if v != 0} def __add__(self, other): result = self.monomials.copy() for key, coeff in other.monomials.items(): if key in result: result[key] += coeff else: result[key] = coeff # Remove zero coefficient monomials result = {k: v for k, v in result.items() if v != 0} return Polynomial([Monomial(dict(k), v) for k, v in result.items()]) def __eq__(self, other): return self.monomials == other.monomials def __repr__(self): return \' + \'.join([f\\"{v}{\'\'.join(f\'{var}^{exp}\' for var, exp in dict(k).items())}\\" for k, v in self.monomials.items()]) def add_polynomials(p1: Polynomial, p2: Polynomial) -> Polynomial: return p1 + p2"},{"question":"# Question: Implement a Red-Black Tree Lookup You are tasked with implementing a lookup function for a Red-Black Tree. Your function should allow users to search for a specific value within the tree. You are provided with a partially completed implementation of a Red-Black Tree, and you need to add the lookup functionality. # Constraints: * The tree will contain at most (10^4) nodes. * Each node in the tree will contain a unique integer value. # Requirements: 1. Implement the function `lookup(self, val: int) -> bool` in the `RBTree` class provided below. 2. The function should return `True` if the value exists in the tree, and `False` otherwise. 3. The function should execute in O(log n) time complexity. ```python class RBNode: def __init__(self, val, is_red, parent=None, left=None, right=None): self.val = val self.parent = parent self.left = left self.right = right self.color = is_red class RBTree: def __init__(self): self.root = None # Method to implement def lookup(self, val: int) -> bool: Search for a value in the Red-Black Tree. :param val: Value to be searched. :return: True if value exists, False otherwise. # Your code here # Sample Usage if __name__ == \\"__main__\\": rb = RBTree() children = [11, 2, 14, 1, 7, 15, 5, 8, 4] for child in children: node = RBNode(child, 1) rb.insert(node) assert rb.lookup(7) == True assert rb.lookup(10) == False ``` # Additional Notes: * You do not need to alter the `RBNode` or `RBTree` class constructors, or any other method except `lookup`. * You may assume the rest of the Red-Black Tree implementation (insertion, deletion, rotations, etc.) works as intended.","solution":"class RBNode: def __init__(self, val, is_red, parent=None, left=None, right=None): self.val = val self.parent = parent self.left = left self.right = right self.color = is_red class RBTree: def __init__(self): self.root = None def lookup(self, val: int) -> bool: Search for a value in the Red-Black Tree. :param val: Value to be searched. :return: True if value exists, False otherwise. current = self.root while current: if current.val == val: return True elif current.val < val: current = current.right else: current = current.left return False def insert(self, node): # Simplified insertion that places nodes in the same way as a regular BST for testing purposes if self.root is None: self.root = node return current = self.root while True: if node.val < current.val: if current.left is None: current.left = node node.parent = current break else: current = current.left else: if current.right is None: current.right = node node.parent = current break else: current = current.right"},{"question":"You are given an array of integers `arr` sorted in ascending order, which is rotated at an unknown pivot index `k` (0 <= k < arr.length) such that the resulting array is `[arr[k], arr[k+1], ..., arr[n-1], arr[0], arr[1], ..., arr[k-1]]`. Given a target value `target`, write a function `search_rotated_array(arr, target)` that searches for `target` in the array. If `target` is found, return its index. Otherwise, return `-1`. Your algorithm\'s runtime complexity must be in the order of O(log n). # Input * `arr` - A list of integers where 1 <= len(arr) <= 5000, and the array may contain negative values. * `target` - An integer value to search for in the array. # Output * An integer representing the index of `target` in the array or `-1` if `target` is not found. # Constraints * The array is rotated at least once. * The array will have no duplicate elements. # Examples Example 1: ```python arr = [4, 5, 6, 7, 0, 1, 2] target = 0 Output: 4 ``` Example 2: ```python arr = [4, 5, 6, 7, 0, 1, 2] target = 3 Output: -1 ``` Example 3: ```python arr = [6, 7, 1, 2, 3, 4, 5] target = 6 Output: 0 ``` Example 4: ```python arr = [1] target = 0 Output: -1 ``` # Implementation ```python def search_rotated_array(arr, target): Search for the target in the rotated sorted array and return its index. If the target is not found, return -1. :param arr: List[int] - Rotated sorted array :param target: int - Target to search for :return: int - Index of target or -1 if not found low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return mid if arr[low] <= arr[mid]: if arr[low] <= target <= arr[mid]: high = mid - 1 else: low = mid + 1 else: if arr[mid] <= target <= arr[high]: low = mid + 1 else: high = mid - 1 return -1 ``` # Testing You should test your implementation with various edge cases and varying sizes of input arrays to ensure correctness and performance.","solution":"def search_rotated_array(arr, target): Search for the target in the rotated sorted array and return its index. If the target is not found, return -1. :param arr: List[int] - Rotated sorted array :param target: int - Target to search for :return: int - Index of target or -1 if not found low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return mid if arr[low] <= arr[mid]: if arr[low] <= target <= arr[mid]: high = mid - 1 else: low = mid + 1 else: if arr[mid] <= target <= arr[high]: low = mid + 1 else: high = mid - 1 return -1"},{"question":"Context Imagine you are developing a text-processing engine that will need to reverse the order of words in a given paragraph for a certain formatting requirement. The engine needs to process large volumes of text quickly and efficiently. Task Write a function `reverse_words_in_string` that takes a string as input and returns a new string with the words in reverse order. Each word is defined as a sequence of non-space characters and is separated by spaces. Multiple contiguous spaces and punctuation should be preserved in their original position in the output string. Requirements 1. **Function Signature**: ```python def reverse_words_in_string(s: str) -> str: ``` 2. **Input**: A string `s` which may contain letters, numbers, punctuation, and multiple spaces. 3. **Output**: A new string with the words in reversed order, while preserving the original formatting, punctuation, and spacing to the best extent. 4. **Constraints**: - The input string\'s length `|s|` will be at most (10^6). Example Scenarios: - Example 1: - Input: `\\"Hello, world! This is a test.\\"` - Output: `\\"test a is This world! Hello,\\"` - Example 2: - Input: `\\" Multiple spaces should be preserved \\"` - Output: `\\" preserved be should spaces Multiple \\"` Performance Requirements Ensure your solution runs efficiently even for large input strings with up to (10^6) characters. The solution should be optimized for both time and space complexity. Edge Cases to Consider - Handling of empty strings. - Handling multiple spaces and punctuation correctly. - Strings with leading or trailing spaces. You are encouraged to include error handling for inputs that are not strings and validate the input before processing.","solution":"def reverse_words_in_string(s: str) -> str: Reverses the order of words in the input string. Args: s (str): The input string which may contain letters, numbers, punctuation, and multiple spaces. Returns: str: A new string with the words in reversed order, preserving original formatting, punctuation, and spacing. # Split string by spaces to handle multiple contiguous spaces and preserve them words = s.split(\' \') # Reverse only the words and rejoin with spaces preserved reversed_words = \' \'.join(reversed(words)) return reversed_words"},{"question":"# Question: Implement Endian Conversion Functions You are tasked with implementing two conversion functions that convert an integer into its respective big-endian and little-endian byte representations and vice versa. Additionally, construct a utility to verify the correctness of these conversions. # Function 1: `int_to_bytes_big_endian` * **Input**: An integer `num` (0 <= num <= 2^64 - 1) * **Output**: A byte array representing the integer in big-endian format. # Function 2: `int_to_bytes_little_endian` * **Input**: An integer `num` (0 <= num <= 2^64 - 1) * **Output**: A byte array representing the integer in little-endian format. # Function 3: `bytes_big_endian_to_int` * **Input**: A byte array `bytestr`. * **Output**: An integer represented by the byte array in big-endian format. # Function 4: `bytes_little_endian_to_int` * **Input**: A byte array `bytestr`. * **Output**: An integer represented by the byte array in little-endian format. # Constraints * The input integer will be a non-negative integer within the range of typical 64-bit unsigned integers. * The input byte array will not exceed 8 bytes. # Example ```python assert int_to_bytes_big_endian(305419896) == b\'x12x34x56x78\' assert int_to_bytes_little_endian(305419896) == b\'x78x56x34x12\' assert bytes_big_endian_to_int(b\'x12x34x56x78\') == 305419896 assert bytes_little_endian_to_int(b\'x78x56x34x12\') == 305419896 ``` # Performance * Ensure the conversion functions handle large integers and bytes arrays efficiently within the constraints. * Your solutions should be optimized for both time and space complexity suitable for large-scale computations. Implement the functions in Python: ```python def int_to_bytes_big_endian(num): # Implement this function pass def int_to_bytes_little_endian(num): # Implement this function pass def bytes_big_endian_to_int(bytestr): # Implement this function pass def bytes_little_endian_to_int(bytestr): # Implement this function pass ```","solution":"def int_to_bytes_big_endian(num): Converts an integer to its big-endian byte representation. return num.to_bytes((num.bit_length() + 7) // 8, byteorder=\'big\') or b\'x00\' def int_to_bytes_little_endian(num): Converts an integer to its little-endian byte representation. return num.to_bytes((num.bit_length() + 7) // 8, byteorder=\'little\') or b\'x00\' def bytes_big_endian_to_int(bytestr): Converts a big-endian byte array to its integer representation. return int.from_bytes(bytestr, byteorder=\'big\') def bytes_little_endian_to_int(bytestr): Converts a little-endian byte array to its integer representation. return int.from_bytes(bytestr, byteorder=\'little\')"},{"question":"Prime Campus Recruitment Your task is to assess candidates based on their understanding of algorithm analysis and testing, applied to a real-world application scenario. You are working as a lead developer for Prime Campus Recruitment, a startup that will use large prime numbers for cryptographic purposes in their system. Fast and reliable primality checks are crucial for securing transactions. Your task is to implement the Rabin-Miller primality test, ensuring reliability for very large numbers. # Problem Statement Implement a function `is_prime(n: int, k: int) -> bool` that determines if a number `n` is \\"probably prime\\" using the Rabin-Miller primality test with `k` iterations. The function should return `False` if `n` is definitely composite and `True` if `n` is probably prime. # Input - A positive integer `n` (1 ≤ n ≤ 10^12) to be tested for primality. - Integer `k` (1 ≤ k ≤ 100), representing the number of iterations for accuracy. # Output - Return `False` if `n` is composite. - Return `True` if `n` is probably prime. # Constraints - Handle edge cases for small values of `n`. - Ensure the performance is optimized for large values of `n`, using efficient algorithms. # Example ```python print(is_prime(561, 5)) # output: False print(is_prime(13, 5)) # output: True print(is_prime(97, 10)) # output: True ``` # Additional Guidance - Explain why the Rabin-Miller test is used in cryptographic applications. - Provide detailed inline comments or documentation within the code to describe your approach and thought process. - Ensure your implementation passes tests with very large values of `n` to guarantee reliability.","solution":"import random def is_prime(n: int, k: int) -> bool: Determine if a number n is \\"probably prime\\" using the Rabin-Miller primality test with k iterations. :param n: Positive integer to be tested for primality. :param k: Number of iterations for accuracy. :return: False if n is definitely composite, True if n is probably prime. # Handle edge cases if n <= 1: return False if n <= 3: return True if n > 1 else False if n % 2 == 0: return False # Write n-1 as d*2^r where d is odd def decompose(n): r, d = 0, n - 1 while d % 2 == 0: r += 1 d //= 2 return r, d r, d = decompose(n) # Perform k tests def miller_rabin_test(a, r, d, n): x = pow(a, d, n) if x == 1 or x == n - 1: return True for _ in range(r - 1): x = pow(x, 2, n) if x == n - 1: return True return False for _ in range(k): a = random.randint(2, n - 2) if not miller_rabin_test(a, r, d, n): return False return True"},{"question":"# Anagram Checker with Full ASCII Support Context: You have been provided a basic function that verifies if two given strings are anagrams by counting the frequency of each character. However, the current implementation only supports lowercase English letters (\'a\' to \'z\'). Your task is to enhance this function to handle any printable ASCII characters and improve its reliability. Task: Write a function `is_anagram(s1: str, s2: str) -> bool` that checks if two strings are anagrams, allowing any printable ASCII characters. Input and Output Format: * Function signature: `def is_anagram(s1: str, s2: str) -> bool:` * **Input**: Two strings, `s1` and `s2`. * `s1` and `s2` are strings of printable ASCII characters. * **Output**: A boolean value `True` if `s1` and `s2` are anagrams, otherwise `False`. Constraints: * `0 <= len(s1), len(s2) <= 1000` Performance Requirements: * The function should run efficiently within a linear time complexity O(n). * The space complexity should be kept within constant O(1) or linear O(m) where m is the range of printable ASCII characters. Example Cases: * Example 1: * Input: `s1 = \\"listen\\", s2 = \\"silent\\"` * Output: `True` * Example 2: * Input: `s1 = \\"hello\\", s2 = \\"billion\\"` * Output: `False` * Example 3: * Input: `s1 = \\"123\\", s2 = \\"321\\"` * Output: `True` * Example 4: * Input: `s1 = \\"anagram\\", s2 = \\"naga ram\\"` * Output: `False` (space character included in comparison) Notes: Consider the diversity of printable ASCII characters, and ensure your function handles all possible edge cases, including but not limited to empty strings and strings containing special characters.","solution":"def is_anagram(s1: str, s2: str) -> bool: Returns True if s1 and s2 are anagrams, considering all printable ASCII characters. Otherwise, returns False. from collections import Counter # Use Counter to count the frequency of each character in the strings return Counter(s1) == Counter(s2)"},{"question":"# Markov Chain Simulator You are tasked with creating a Markov Chain sequence predictor. Given a Markov Chain represented as a dictionary and an initial state, implement a function to simulate the sequence of state transitions over a specified number of steps. Your task is to implement the function `generate_state_sequence(chain, initial_state, steps)` which generates and returns a list of states starting from the `initial_state` and iterating the Markov Chain `steps` times. Function Signature ```python def generate_state_sequence(chain: dict, initial_state: str, steps: int) -> list: pass ``` Input * `chain`: A dictionary mapping each state (string) to a sub-dictionary that contains next states and their transition probabilities (as floats). The probabilities will always sum up to 1. * `initial_state`: A string representing the starting state. * `steps`: An integer representing the number of steps to simulate. Output * A list of `steps + 1` states representing the sequence of transitions from the initial state. Constraints * Each state\'s transition probabilities will sum up to 1. * `steps` is a non-negative integer. Example ```python chain = { \'A\': {\'A\': 0.6, \'B\': 0.4}, \'B\': {\'A\': 0.3, \'B\': 0.7} } initial_state = \'A\' steps = 5 expected_output = [\'A\', \'A\', \'B\', \'B\', \'B\', \'A\'] # Example (actual output may vary due to randomness) assert generate_state_sequence(chain, initial_state, steps) == expected_output ``` Requirements * Handle potential edge cases such as non-existing states gracefully. * Ensure that the transition probabilities are correctly used to select the next state.","solution":"import random def generate_state_sequence(chain, initial_state, steps): Generates a list of states starting from `initial_state` and iterating the Markov Chain `steps` times. Parameters: - chain (dict): A dictionary representing the Markov Chain. - initial_state (str): The starting state. - steps (int): Number of steps to simulate. Returns: - list: Sequence of states starting from the initial state. state_sequence = [initial_state] current_state = initial_state for _ in range(steps): next_state = random.choices( population=list(chain[current_state].keys()), weights=list(chain[current_state].values()), k=1 )[0] state_sequence.append(next_state) current_state = next_state return state_sequence"},{"question":"# Detecting the Start of a Cycle in a Linked List Given a singly linked list, write a function to detect the node where the cycle begins. If there is no cycle, return `None`. Input Format - The input will be a head node of a singly linked list where each node has an integer value and a pointer to the next node. Output Format - Return the node where the cycle begins. If no cycle exists, return `None`. Example ```python # Example 1: # Input: head = [3,2,0,-4], pos = 1 (indicates tail connects to node at position 1) # Output: Node with value 2 # Example 2: # Input: head = [], pos = -1 (indicates no cycle) # Output: None # Example 3: # Input: head = [1], pos = -1 (indicates no cycle) # Output: None # Example 4: # Input: head = [1,2], pos = 0 (indicates tail connects to node at position 0) # Output: Node with value 1 # Constraints: - The length of the linked list is between 0 and 10^4. - The node values are between -10^5 and 10^5. ``` Function Signature ```python class ListNode: def __init__(self, x): self.val = x self.next = None def detectCycle(head: ListNode) -> ListNode: :type head: ListNode :rtype: ListNode # Your code here ``` Additional Notes - Ensure the solution handles edge cases such as empty lists and lists with one node appropriately. - Design the solution to be efficient both in terms of time and space.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def detectCycle(head: ListNode) -> ListNode: Detect the node where the cycle begins in a singly linked list. Return None if there is no cycle. if not head or not head.next: return None slow = head fast = head # Detect if there is a cycle using two pointers (Floyd\'s Tortoise and Hare algorithm) while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break else: # No cycle return None # Find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"**Scenario**: You have been hired by an online retail company to optimize their search feature within the inventory system. The inventory always remains sorted based on item IDs. However, with the ever-expanding items in the inventory, the current search method is proving to be slow and inefficient. To address this, you propose using the Jump Search algorithm. Your task is to implement a function `optimized_search` that will help in quickly finding the position of an item given its ID in a sorted list of IDs. **Function Signature**: ```python def optimized_search(arr: list, target: int) -> int: ``` **Input**: * `arr`: A list of integers `[int]` which are sorted in ascending order, representing the IDs of items in the inventory. * `target`: An integer `target`, representing the ID of the item to search for. **Output**: * The function should return the index of the `target` in the list `arr`. If the target is not present in the list, return `-1`. **Constraints**: * The list length will be between 1 and (10^6). * The target will be in the range between (-10^9) and (10^9). **Performance Requirement**: Ensure the search operation is efficient, aiming for a time complexity of O(√n). **Examples**: ```python assert optimized_search([1, 3, 4, 5, 9, 12, 15, 18, 20], 15) == 6 assert optimized_search([2, 8, 11, 15, 23, 28, 35], 23) == 4 assert optimized_search([5, 8, 12, 14, 17, 21], 10) == -1 ```","solution":"import math def optimized_search(arr: list, target: int) -> int: Perform Jump Search on the sorted list `arr` to find the index of `target`. Returns the index of `target` if present, else returns -1. n = len(arr) step = int(math.sqrt(n)) prev = 0 # Finding the block where the target is possibly located while arr[min(step, n)-1] < target: prev = step step += int(math.sqrt(n)) if prev >= n: return -1 # Linear search within the identified block while arr[prev] < target: prev += 1 if prev == min(step, n): return -1 # Check if the element is found if arr[prev] == target: return prev return -1"},{"question":"# Priority Queue Task **Objective**: Implement the `PriorityQueue` class using a different algorithm that optimizes insertion time complexity. Use a binary heap instead of a linear array. This will require the following methods to be implemented: 1. **Push** - Insert an item with a given priority. 2. **Pop** - Extract the item with the lowest priority. 3. **Peek** - Return the item with the lowest priority without removing it. 4. **Size** - Get the current number of elements in the priority queue. # Function Details 1. **Push** - **Input**: `item` and `priority`. If `priority` is not provided, it defaults to the item\'s value. - **Output**: None (Inserts an element into the priority queue) - **Complexity**: O(log n) 2. **Pop** - **Input**: None - **Output**: Returns the item with the lowest priority. - **Complexity**: O(log n) 3. **Peek** - **Input**: None - **Output**: Returns the item with the lowest priority without removing it. - **Complexity**: O(1) 4. **Size** - **Input**: None - **Output**: Returns the number of elements in the priority queue. - **Complexity**: O(1) # Implementation Requirements * Use a `Binary Heap` for implementing the priority queue. * Handle edge cases like attempting to `pop` or `peek` from an empty queue. * Optimize for both time and space complexity compared to the given linear array method. # Example ```python class PriorityQueue: def __init__(self): # Implement your binary heap here pass def push(self, item, priority=None): pass def pop(self): pass def peek(self): pass def size(self): pass ``` * **Push Example**: `pq.push(\\"task1\\", priority=3)` * **Pop Example**: `pq.pop()` should return `\\"task1\\"` * **Peek Example**: `pq.peek()` should return `\\"task1\\"` * **Size Example**: `pq.size()` should return `1` after one insertion Create your methods in a separate class and ensure they adhere to the time complexities mentioned. Testing will be done based on these specifications.","solution":"import heapq class PriorityQueue: def __init__(self): self.heap = [] self.count = 0 def push(self, item, priority=None): if priority is None: priority = item heapq.heappush(self.heap, (priority, self.count, item)) self.count += 1 def pop(self): if self.size() == 0: raise IndexError(\\"pop from empty priority queue\\") return heapq.heappop(self.heap)[2] def peek(self): if self.size() == 0: raise IndexError(\\"peek from empty priority queue\\") return self.heap[0][2] def size(self): return len(self.heap)"},{"question":"Question Context You are tasked with developing an algorithm that converts a binary search tree (BST) into a doubly linked list. The list should be sorted in ascending order. Each TreeNode in the BST has a left child, right child, and a value. Objective Write a function `convert_bst_to_doubly_list` to convert the given BST into a doubly linked list. Function Signature ```python def convert_bst_to_doubly_list(root: TreeNode) -> TreeNode: pass ``` # Definition for TreeNode ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` # Expected Input & Output Format * **Input**: A `TreeNode` object named `root` representing the root of the BST. * The object may be: * `None` (representing an empty tree). * A single node. * A complete or incomplete binary tree. * **Output**: The head node of the doubly linked list. * The nodes\' `right` pointers point to the next node in the list. * The nodes\' `left` pointers point to the previous node in the list. * If the tree is empty, return `None`. # Performance Requirements * Efficient handling of BST conversion for trees with a large number of nodes. * Minimal additional memory usage beyond the stack memory for recursion. # Edge Cases * Tree with only one node. * Trees with all left or all right children nodes. * Empty tree. # Constraints * Assume that the tree fits in memory. * Nodes contain integer values. # Example ```python # Given the following BST: # 4 # / # 2 5 # / # 1 3 # After conversion, the doubly linked list should be: # 1 <-> 2 <-> 3 <-> 4 <-> 5 # Example TreeNode instantiation: root = TreeNode(4) root.left = TreeNode(2) root.right = TreeNode(5) root.left.left = TreeNode(1) root.left.right = TreeNode(3) # Function call: head = convert_bst_to_doubly_list(root) # Print doubly linked list: # -> 1 <-> 2 <-> 3 <-> 4 <-> 5 node = head while node: print(node.val, end=\\" <-> \\" if node.right else \\"n\\") node = node.right ```","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def convert_bst_to_doubly_list(root: TreeNode) -> TreeNode: if not root: return None def inorder_traversal(node): if node: yield from inorder_traversal(node.left) yield node yield from inorder_traversal(node.right) dummy = TreeNode(0) prev = dummy for curr in inorder_traversal(root): prev.right = curr curr.left = prev prev = curr head = dummy.right if head: head.left = None return head"},{"question":"You are building a web application where you need to frequently concatenate base URLs with path segments to construct complete URLs dynamically. Similarly, you might have to work with file system paths on the server backend. Write a function, `path_join(base, suffix)`, that takes two strings: - `base`: A string representing the base URL or base directory path. - `suffix`: A string representing the path segment or the file name to be appended to the base URL or directory. The function should return a correctly constructed path/URL ensuring that: 1. There is exactly one slash (`/`) between the base and suffix. 2. Any leading or trailing whitespace in the suffix is removed. 3. Handles situations where base or suffix are just slashes or empty. # Input Format - The `base` and `suffix` will be non-empty strings. - The `base` may end with a trailing slash or not. - The `suffix` may start with a leading slash or not and may contain slashes internally. # Output Format - Return a single string representing the combined path/URL. # Example 1. **Input**: ```python path_join(\\"http://algorithms.com\\", \\"path/to/resource\\") ``` **Output**: ```python \\"http://algorithms.com/path/to/resource\\" ``` 2. **Input**: ```python path_join(\\"http://algorithms.com/\\", \\"/path/to/resource\\") ``` **Output**: ```python \\"http://algorithms.com/path/to/resource\\" ``` 3. **Input**: ```python path_join(\\"path/to/dir\\", \\"file\\") ``` **Output**: ```python \\"path/to/dir/file\\" ``` # Constraints 1. Assume that base and suffix will be strings composed of printable ASCII characters. 2. Do not use any built-in path joining functions like `os.path.join()` but string manipulation methods are allowed. # Performance Requirements - Ensure the function operates within a reasonable time frame for input lengths typical of URLs and file paths.","solution":"def path_join(base, suffix): Combines a base URL or directory path with a suffix path or file name ensuring exactly one slash between the two parts and removes any surrounding whitespace from the suffix. Parameters: base (str): The base URL or directory path suffix (str): The path segment or file name to be appended Returns: str: The correctly combined path or URL # Trim any spaces from the suffix suffix = suffix.strip() # Ensure base ends with exactly one slash and suffix does not start with a slash if base.endswith(\'/\'): base = base.rstrip(\'/\') if suffix.startswith(\'/\'): suffix = suffix.lstrip(\'/\') return f\\"{base}/{suffix}\\""},{"question":"Filter Array within Limits You are given an array of integers and optional minimum and maximum value limits. Write a function `filter_within_limits(arr, min_lim=None, max_lim=None)` that returns a new array consisting of elements from the original array that fall within the specified range limits, inclusively. * If `min_lim` is None, consider the smallest element of the array as the minimum limit. * If `max_lim` is None, consider the largest element of the array as the maximum limit. * If both `min_lim` and `max_lim` are None, return the array as is. * If the input array is empty, return an empty array. Input: * `arr`: List of integers, the input array. * `min_lim`: Integer or None, the minimum value limit or None. * `max_lim`: Integer or None, the maximum value limit or None. Output: * A list of integers, containing the elements from `arr` that lie within the specified limits. Constraints: * The input array can have up to (10^6) elements. * Each element in the array is an integer between (-10^9) and (10^9). * `min_lim` and `max_lim` are integers within the same range as elements or None. Example: ```python # Example 1: # Input: arr = [1, 2, 3, 4, 5], min_lim = None, max_lim = 3 # Output: [1, 2, 3] # Example 2: # Input: arr = [10, 20, 30, 40, 50], min_lim = 15, max_lim = 35 # Output: [20, 30] # Example 3: # Input: arr = [], min_lim = 10, max_lim = 100 # Output: [] # Example 4: # Input: arr = [5, 15, 25, 35], min_lim = None, max_lim = None # Output: [5, 15, 25, 35] ``` Function Signature: ```python def filter_within_limits(arr: list[int], min_lim: int, max_lim: int) -> list[int]: pass ``` You need to implement the function `filter_within_limits` based on the above specifications.","solution":"def filter_within_limits(arr, min_lim=None, max_lim=None): Filters the array within the given minimum and maximum limits. Parameters: arr (list): The input array of integers. min_lim (int or None): The minimum limit, or None. max_lim (int or None): The maximum limit, or None. Returns: list: The array filtered within the specified limits. if not arr: return arr if min_lim is None: min_lim = min(arr) if max_lim is None: max_lim = max(arr) return [x for x in arr if min_lim <= x <= max_lim]"},{"question":"# Question **Problem Statement:** You are given a string containing characters of varying cases and symbols. Your task is to write a function `delete_reoccurring_characters` that removes all recurring characters from the string while preserving the order of their first appearance. Write a function in Python to accomplish this: ```python def delete_reoccurring_characters(string: str) -> str: pass ``` **Input:** * A string `string` with length `n` (0 ≤ n ≤ 10^6). **Output:** * A string with all recurring characters removed, retaining the order of their first appearance. **Example:** ```python assert delete_reoccurring_characters(\\"abbaccc\\") == \\"abc\\" assert delete_reoccurring_characters(\\"abcabcabc\\") == \\"abc\\" assert delete_reoccurring_characters(\\"a\\") == \\"a\\" assert delete_reoccurring_characters(\\"aabbcc\\") == \\"abc\\" assert delete_reoccurring_characters(\\"\\") == \\"\\" ``` **Constraints:** 1. Handle both uppercase and lowercase characters without distinction. 2. Ensure the function runs efficiently within the given input constraints. # Additional Notes: - Focus on optimizing the performance of your solution. - Think about edge cases like an empty string and strings with no recurring characters.","solution":"def delete_reoccurring_characters(string: str) -> str: Removes all recurring characters from the string while preserving the order of their first appearance. seen = set() result = [] for char in string: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"Calculate the Unknown Side Length of a Right-Angled Triangle You are to write a function to determine the length of the unknown side of a right-angled triangle using the Pythagorean theorem. You will be provided the lengths of two sides, and a \\"?\\" to indicate the side whose length needs to be calculated. Function Signature ```python def find_missing_length(opposite: Union[float, str], adjacent: Union[float, str], hypotenuse: Union[float, str]) -> str: pass ``` Input - **opposite**: A float representing the length of the opposite side, or \\"?\\" if the length is to be calculated. - **adjacent**: A float representing the length of the adjacent side, or \\"?\\" if the length is to be calculated. - **hypotenuse**: A float representing the length of the hypotenuse side, or \\"?\\" if the length is to be calculated. Output - A string representing the length of the unknown side formatted as \\"Side = value\\". - Return an error message \\"Invalid input\\" in case of invalid scenarios. Constraints - Only one of the inputs will be \\"?\\". - The values of the known sides will be positive decimal numbers. - The hypotenuse, if provided, will be the longest side. - Edge cases like one side being zero or negative should be handled. Example ```python # Example 1 input: opposite=\\"?\\", adjacent=4.0, hypotenuse=5.0 output: \\"Opposite = 3.0\\" # Example 2 input: opposite=3.0, adjacent=\\"?\\", hypotenuse=5.0 output: \\"Adjacent = 4.0\\" # Example 3 input: opposite=3.0, adjacent=4.0, hypotenuse=\\"?\\" output: \\"Hypotenuse = 5.0\\" # Example 4 input: opposite=3.0, adjacent=4.0, hypotenuse=5.0 output: \\"Invalid input\\" ``` Write a function `find_missing_length` that implements this functionality.","solution":"import math from typing import Union def find_missing_length(opposite: Union[float, str], adjacent: Union[float, str], hypotenuse: Union[float, str]) -> str: if sum(1 for x in [opposite, adjacent, hypotenuse] if x == \\"?\\") != 1: return \\"Invalid input\\" if opposite == \\"?\\": if isinstance(adjacent, (int, float)) and isinstance(hypotenuse, (int, float)): if hypotenuse > adjacent: opposite = math.sqrt(hypotenuse**2 - adjacent**2) return f\\"Opposite = {opposite:.1f}\\" elif adjacent == \\"?\\": if isinstance(opposite, (int, float)) and isinstance(hypotenuse, (int, float)): if hypotenuse > opposite: adjacent = math.sqrt(hypotenuse**2 - opposite**2) return f\\"Adjacent = {adjacent:.1f}\\" elif hypotenuse == \\"?\\": if isinstance(opposite, (int, float)) and isinstance(adjacent, (int, float)): hypotenuse = math.sqrt(opposite**2 + adjacent**2) return f\\"Hypotenuse = {hypotenuse:.1f}\\" return \\"Invalid input\\""},{"question":"Context: You are working in a computer architecture lab, and your task is to assess the correctness and minimal transformation required between digital signals. Your specific task is to determine the minimal number of bit flips required to convert one integer signal to another. Bitwise operations are crucial in digital systems for such tasks. Problem: Write a function `count_flips_to_convert(a: int, b: int) -> int` that determines the minimum number of bit flips necessary to convert the integer `a` to the integer `b`. Input: - Two non-negative integers `a` and `b` where (0 leq a, b leq 10^9). Output: - An integer representing the minimal number of bit flips required to convert `a` to `b`. Constraints: - The integers `a` and `b` will have a binary representation no longer than 30 bits. Example: ```python # Example usage: a = 29 # (or: 11101 in binary) b = 15 # (or: 01111 in binary) print(count_flips_to_convert(a, b)) # Output should be 2 ``` **Performance Requirements:** The solution should be efficient in terms of both time and space complexity, specifically within O(n) time complexity where n is the number of bits, and O(1) space complexity.","solution":"def count_flips_to_convert(a: int, b: int) -> int: Returns the minimum number of bit flips needed to convert integer `a` to integer `b`. xor = a ^ b count = 0 while xor: count += xor & 1 xor >>= 1 return count"},{"question":"# Binary Search Tree Enhancement Task **Objective**: Implement and enhance a Binary Search Tree (BST) by adding a method for finding the kth smallest element and by ensuring that students handle edge cases and test their implementation thoroughly. Description A Binary Search Tree (BST) is a data structure that maintains sorted order of elements and supports efficient searching, insertion, and deletion operations. You are required to enhance the BST implementation to include a method that finds the kth smallest element in the tree. The kth smallest element is defined as the element that would appear in the kth position in an inorder traversal of the tree. Requirements 1. **Function to Implement**: - `kth_smallest_element(k)` 2. This function should take an integer `k` as input and return the kth smallest element in the BST. 3. Handle potential edge cases such as: - `k` being less than 1. - `k` being greater than the size of the tree. 4. The function should assume that the tree does not contain duplicate elements. Input and Output Format - **Input**: - An integer `k` (1 <= k <= N, where N is the number of elements in the BST). - **Output**: - The data value of the kth smallest element in the BST. Constraints - The BST should only contain unique integer elements. - You are forbidden from using additional space for storing elements (inorder traversal should not store the elements in an array). Example ```python # Example tree structure: # 10 # / # 5 15 # / / # 3 7 12 18 tree = BST() tree.insert(10) tree.insert(5) tree.insert(15) tree.insert(3) tree.insert(7) tree.insert(12) tree.insert(18) assert tree.kth_smallest_element(1) == 3 assert tree.kth_smallest_element(3) == 7 assert tree.kth_smallest_element(5) == 12 ``` # Implementation Enhance the provided BST class to include the `kth_smallest_element` method by implementing the function directly within the BST class. Ensure that you handle edge cases effectively. # Testing Complete the `TestSuite` class by adding tests to ensure the correct implementation of `kth_smallest_element` method. ```python # Complete your implementation here class BST(object): # (existing methods) def kth_smallest_element(self, k): # Implement this method pass # Testing your implementation class TestSuite(unittest.TestCase): # (existing setup and tests) def test_kth_smallest_element(self): self.tree.insert(3) self.tree.insert(7) self.tree.insert(12) self.tree.insert(18) self.assertEqual(self.tree.kth_smallest_element(1), 3) self.assertEqual(self.tree.kth_smallest_element(3), 7) self.assertEqual(self.tree.kth_smallest_element(5), 12) if __name__ == \'__main__\': unittest.main() ```","solution":"class Node: def __init__(self, key): self.left = None self.right = None self.val = key class BST: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = Node(key) else: self._insert(self.root, key) def _insert(self, root, key): if key < root.val: if root.left is None: root.left = Node(key) else: self._insert(root.left, key) else: if root.right is None: root.right = Node(key) else: self._insert(root.right, key) def kth_smallest_element(self, k): self.count = 0 self.result = None self._inorder(self.root, k) if self.result is not None: return self.result else: raise ValueError(\\"k is out of the range of the number of nodes in the tree\\") def _inorder(self, node, k): if node is None: return self._inorder(node.left, k) self.count += 1 if self.count == k: self.result = node.val return self._inorder(node.right, k)"},{"question":"# Question: Range-Based Array Filter **Scenario**: You are given a large dataset of numeric values representing daily measurements of a certain parameter over a year. Your task is to filter this dataset to focus on values within a specific range, which will help in analyzing only significant or relevant measurements. # Task Implement a function `range_filter` that accepts a list of integers and two integer values, `min_val` and `max_val`. The function should return a list containing only those integers from the input list that are greater than or equal to `min_val` and less than or equal to `max_val`. If either `min_val` or `max_val` is unspecified (None), the function should only apply the other limit. # Function Signature ```python def range_filter(arr: list, min_val: int = None, max_val: int = None) -> list: pass ``` # Input - An array of integers, `arr` (0 ≤ len(arr) ≤ 10^6, -10^9 ≤ arr[i] ≤ 10^9). - An integer `min_val` (optional) with range -10^9 ≤ min_val ≤ 10^9. - An integer `max_val` (optional) with range -10^9 ≤ max_val ≤ 10^9. # Output - A list of integers filtered based on the provided `min_val` and `max_val`. # Constraints - If `min_val` is not provided, there should be no lower bound for filtering. - If `max_val` is not provided, there should be no upper bound for filtering. - If neither `min_val` nor `max_val` is provided, return the original list. # Examples 1. `range_filter([1, 3, 5, 7, 9], min_val=4, max_val=8)` should return `[5, 7]`. 2. `range_filter([20, 30, 15, 10, 25], min_val=None, max_val=20)` should return `[15, 10]`. 3. `range_filter([12, 4, 6, 8, 10], min_val=5)` should return `[12, 6, 8, 10]`. 4. `range_filter([], min_val=5, max_val=10)` should return `[]`. # Notes - Ensure your solution handles edge cases efficiently. - Consider performance implications for large datasets.","solution":"def range_filter(arr, min_val = None, max_val = None): Filters the list `arr` to include only those elements that are within the specified range. Parameters: arr (list): The list of integers to be filtered. min_val (int, optional): The minimum value (inclusive) for filtering. Defaults to None. max_val (int, optional): The maximum value (inclusive) for filtering. Defaults to None. Returns: list: A list of integers filtered based on the provided min_val and max_val. if min_val is None and max_val is None: return arr elif min_val is None: return [x for x in arr if x <= max_val] elif max_val is None: return [x for x in arr if x >= min_val] else: return [x for x in arr if min_val <= x <= max_val]"},{"question":"Challenge: Polynomial Derivatives You are given a class structure for Monomials and Polynomials. Extend this structure to implement a method for calculating the derivative of a Polynomial with respect to a given variable. # Objective Write a method `derivative` in the Polynomial class that accepts a variable index and returns a new Polynomial which is the derivative of the original Polynomial with respect to that variable. # Requirements 1. **Input**: * `variable_index`: An integer representing the variable with respect to which the derivative is to be found. 2. **Output**: * A new Polynomial object representing the derivative of the original Polynomial with respect to the given variable. 3. **Constraints**: * Variables indices are positive integers. * The Polynomial derivative should respect the rules of differentiation (power rule). # Example ```python # Polynomial: 3(a_1)^2(a_2) - 2(a_1)(a_2)^2 + 4(a_3) poly = Polynomial([ Monomial({1: 2, 2: 1}, 3), Monomial({1: 1, 2: 2}, -2), Monomial({3: 1}, 4) ]) # Derivative with respect to a_1: derivative_poly = poly.derivative(1) # Expected output: Polynomial representing 6(a_1)(a_2) - 2(a_2)^2 print(derivative_poly) ``` # Hints - Use the power rule for differentiation: ( frac{d}{dx} a_i^n = n cdot a_i^{n-1} ) - Handle cases where the differentiation results in a coefficient of zero. - Ensure proper simplification of Monomials after differentiation. # Implementation Details Implement the following method inside the Polynomial class: ```python def derivative(self, variable_index: int) -> Polynomial: pass ```","solution":"class Monomial: def __init__(self, variables, coefficient): Initializes a monomial with the given variables and coefficient. :param variables: Dictionary where keys are variable indices and values are their exponents. :param coefficient: The coefficient of the monomial. self.variables = variables self.coefficient = coefficient def derivative(self, variable_index): Computes the derivative of the monomial with respect to the given variable index. :param variable_index: The variable index with respect to which the derivative is taken. :return: A new Monomial which is the derivative, or None if the derivative is zero. if variable_index in self.variables: power = self.variables[variable_index] new_coefficient = self.coefficient * power if power == 1: # Remove the variable from the monomial if the new power is zero new_variables = {k: v for k, v in self.variables.items() if k != variable_index} else: new_variables = self.variables.copy() new_variables[variable_index] -= 1 return Monomial(new_variables, new_coefficient) else: # Derivative with respect to a variable that does not exist in the monomial is zero return None class Polynomial: def __init__(self, monomials): Initializes a polynomial with the given list of monomials. :param monomials: List of Monomial instances. self.monomials = monomials def derivative(self, variable_index): Computes the derivative of the polynomial with respect to the given variable index. :param variable_index: The variable index with respect to which the derivative is taken. :return: A new Polynomial which is the derivative. derived_monomials = [] for monomial in self.monomials: derived_monomial = monomial.derivative(variable_index) if derived_monomial is not None: derived_monomials.append(derived_monomial) return Polynomial(derived_monomials) def __repr__(self): return \\" + \\".join(f\\"{m.coefficient}{\'\'.join([f\'a_{k}^{v}\' if v != 1 else f\'a_{k}\' for k, v in m.variables.items()])}\\" for m in self.monomials)"},{"question":"Decoding Encoded Messages with Nested Structures # Problem Statement You are provided with an encoded string following the specific format, where k[encoded_string] indicates that `encoded_string` should be repeated exactly `k` times. Your task is to decode the given string into its expanded form. # Detailed Requirements 1. Write a function `decode_string(s: str) -> str` that returns the decoded string. 2. The encoding rule is k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. 3. Assume the input string is always valid (i.e., no extra white spaces, well-formed square brackets). 4. Digits are used solely for the repeat numbers k and do not appear in other parts of the string. # Input - A single encoded string `s` (1 <= |s| <= 30). # Output - Return the decoded string. # Examples ```python s = \\"3[a]2[bc]\\" # returns \\"aaabcbc\\" s = \\"3[a2[c]]\\" # returns \\"accaccacc\\" s = \\"2[abc]3[cd]ef\\" # returns \\"abcabccdcdcdef\\" ``` # Constraints - The length of the input string will be at most 30 characters. - The input string will always be valid (no extra white spaces, square brackets are well-formed). - The original data does not contain any digits, only those used for repeat counts k. # Notes - Your solution should handle nested encoded structures efficiently. - Ensure your code adheres to the specified time and space complexities.","solution":"def decode_string(s: str) -> str: Decodes the encoded string following the k[encoded_string] format. stack = [] current_num = 0 current_string = \'\' for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append((current_string, current_num)) current_string, current_num = \'\', 0 elif char == \']\': last_string, num = stack.pop() current_string = last_string + current_string * num else: current_string += char return current_string"},{"question":"Context You are working on implementation for a new cryptographic system that involves a lot of modular exponentiation calculations. These calculations are fundamental to ensuring the security and integrity of your encryption algorithms. Task Implement a function `secure_mod_exp(base, exponent, mod)` that computes `(base ^ exponent) % mod` efficiently using the technique of exponentiation by squaring. Input * `base` (int): The base integer which can be negative or positive but will always be an integer within the range `-10^9 <= base <= 10^9`. * `exponent` (int): A non-negative integer representing the exponent, `0 <= exponent <= 10^9`. * `mod` (int): A positive integer modulus within the range `1 <= mod <= 10^9`. Output * Returns an integer which is the result of `(base ^ exponent) % mod`. Constraints * The exponent will always be a non-negative integer. * The modulus will always be a positive integer and at least 1. * Handle large values for `base` and `exponent` efficiently. Example ```python def secure_mod_exp(base, exponent, mod): # Your implementation here # Example 1 print(secure_mod_exp(2, 10, 1000)) # Output: 24 # Example 2 print(secure_mod_exp(3, 100, 50)) # Output: 1 # Example 3 print(secure_mod_exp(7, 0, 13)) # Output: 1 ``` Note: Ensure your solution handles edge cases such as base = 0, exponent = 0, and very large values efficiently.","solution":"def secure_mod_exp(base, exponent, mod): Returns (base ^ exponent) % mod using the technique of exponentiation by squaring result = 1 base = base % mod # Handle negative base and base larger than mod while exponent > 0: if exponent % 2 == 1: result = (result * base) % mod exponent = exponent >> 1 base = (base * base) % mod return result"},{"question":"You are given a `Union` data structure implementing the Union-Find operations to manage a partitioned set of elements and their connections. Your task is to enhance the `Union` class to support tracking separate connected components in an undirected graph. # Task Requirements: 1. **Implementation**: Extend the `Union` class to add a method `connected_components_count` that returns the number of connected components in the graph. 2. **Additional Method**: Implement a method `largest_component_size` that returns the size of the largest connected component in the graph. # Input and Output: 1. Method: `connected_components_count()` - *Input*: None - *Output*: An integer representing the number of connected components. 2. Method: `largest_component_size()` - *Input*: None - *Output*: An integer representing the size of the largest connected component. # Example: ```python union = Union() union.add(1) union.add(2) union.add(3) union.add(4) union.unite(1, 2) union.unite(3, 4) assert union.connected_components_count() == 2 # {1, 2}, {3, 4} assert union.largest_component_size() == 2 # {1, 2} or {3, 4} union.unite(2, 3) assert union.connected_components_count() == 1 # {1, 2, 3, 4} assert union.largest_component_size() == 4 # {1, 2, 3, 4} ``` # Constraints: - You can assume that `add` and `unite` operations will be called correctly as per the given methods. - The maximum number of elements handled will be within reasonable limits for typical competitive programming scenarios. Implementation of additional methods should consider the principles of Union-Find to maintain efficiency.","solution":"class Union: def __init__(self): self.parent = {} self.rank = {} self.size = {} def add(self, item): if item not in self.parent: self.parent[item] = item self.rank[item] = 0 self.size[item] = 1 def find(self, item): if self.parent[item] != item: self.parent[item] = self.find(self.parent[item]) return self.parent[item] def unite(self, item1, item2): root1 = self.find(item1) root2 = self.find(item2) if root1 != root2: if self.rank[root1] > self.rank[root2]: self.parent[root2] = root1 self.size[root1] += self.size[root2] elif self.rank[root1] < self.rank[root2]: self.parent[root1] = root2 self.size[root2] += self.size[root1] else: self.parent[root2] = root1 self.rank[root1] += 1 self.size[root1] += self.size[root2] def connected_components_count(self): roots = {self.find(item) for item in self.parent} return len(roots) def largest_component_size(self): if not self.parent: return 0 root_sizes = [self.size[self.find(item)] for item in self.parent] return max(root_sizes) # Example usage: union = Union() union.add(1) union.add(2) union.add(3) union.add(4) union.unite(1, 2) union.unite(3, 4) assert union.connected_components_count() == 2 # {1, 2}, {3, 4} assert union.largest_component_size() == 2 # {1, 2} or {3, 4} union.unite(2, 3) assert union.connected_components_count() == 1 # {1, 2, 3, 4} assert union.largest_component_size() == 4 # {1, 2, 3, 4}"},{"question":"You have been hired by a whimsical company that takes pride in inefficiency for humorous purposes. They\'ve heard about the wonders of Bogo Sort and would like you to implement it with a slight twist. # Objective Write a function `bogo_sort_with_limit(arr: List[int], limit: int) -> List[int]` that sorts an array using Bogo Sort but terminates after a certain number of iterations if it fails to sort the array, returning the best attempt (i.e., the closest to a sorted array within the limit). # Input - `arr`: A list of integers (1 ≤ len(arr) ≤ 10). - `limit`: An integer indicating the maximum number of iterations to attempt (1 ≤ limit ≤ 100000). # Output - A list of integers representing the best sorted array found within the given number of iterations. # Constraints 1. All values in `arr` are distinct. 2. If the array is sorted within the limit, return the sorted array. 3. If the limit is reached without finding a sorted permutation, return the array that was closest to being sorted. - Distance to sortedness can be defined as the number of inversions (pairs where first element > second element). # Example ```python def bogo_sort_with_limit(arr: List[int], limit: int) -> List[int]: # implementation here # Example Usage: print(bogo_sort_with_limit([3, 2, 1], 100)) # Output could be [1, 2, 3] if sorted within limit, otherwise the closest attempt. print(bogo_sort_with_limit([1, 3, 2], 1)) # Output: [1, 3, 2] if the limit is too low to achieve a sorted array. ``` # Explanation - In the first example, the function will attempt to sort the array [3, 2, 1] and since the array length is only 3, it is likely to succeed within 100 attempts. - In the second example, the function will attempt to sort [1, 3, 2] but with only 1 iteration allowed, it may return it unsorted or as close as possible. # Performance Requirements Considerations of performance are mostly theoretical as the very nature of Bogo Sort precludes efficient operation. The implementation should handle the constraints gracefully, attempting the sort for the given limit and then evaluating the \\"best\\" sorted output.","solution":"import random from typing import List def bogo_sort_with_limit(arr: List[int], limit: int) -> List[int]: def is_sorted(arr): return all(arr[i] <= arr[i+1] for i in range(len(arr) - 1)) def calculate_inversions(arr): inversions = 0 for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: inversions += 1 return inversions best_attempt = arr[:] lowest_inversions = calculate_inversions(arr) for _ in range(limit): random.shuffle(arr) if is_sorted(arr): return arr inversions = calculate_inversions(arr) if inversions < lowest_inversions: best_attempt = arr[:] lowest_inversions = inversions return best_attempt"},{"question":"You are given a directed acyclic graph (DAG) representing a set of tasks with dependencies. Your task is to implement a function `topological_sort` that returns the topological order of the vertices. If the graph contains a cycle, the function should raise a `ValueError`. # Function Signature: ```python def topological_sort(graph: Dict[int, List[int]]) -> List[int]: pass ``` # Input: * `graph`: A dictionary where the key is an integer representing a vertex and the value is a list of integers representing the vertices that the key vertex points to (its dependencies). # Output: * Returns a list of integers representing the vertices in topologically sorted order. * Raises `ValueError` if the graph contains a cycle. # Constraints: * All node values are unique integers. * The graph is a directed graph. # Examples: ```python graph1 = { 0: [1, 2], 1: [2], 2: [] } assert topological_sort(graph1) == [0, 1, 2] graph2 = { 0: [1], 1: [2], 2: [0] } try: topological_sort(graph2) except ValueError as e: print(e) # This should print \'cycle\' ``` # Notes: * Consider edge cases such as an empty graph, graphs with one vertex, and detecting cycles within complex structures. * Ensure the function adheres to the O(V + E) time complexity requirement.","solution":"def topological_sort(graph): Performs topological sorting on a given DAG. Args: graph (dict): A dictionary representation of the graph where keys are vertices and values are lists of vertices that the key vertex has edges to. Returns: list: A list of vertices in topologically sorted order. Raises: ValueError: If the graph contains a cycle. from collections import deque, defaultdict # Find all in-degrees in_degree = defaultdict(int) for node in graph: if node not in in_degree: in_degree[node] = 0 for neighbor in graph[node]: in_degree[neighbor] += 1 # Collect nodes with zero in-degree zero_in_degree_queue = deque([node for node in in_degree if in_degree[node] == 0]) topological_order = [] while zero_in_degree_queue: node = zero_in_degree_queue.popleft() topological_order.append(node) # Reduce in-degree of neighboring nodes if node in graph: for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) # If topological_order contains all vertices, return it; otherwise, raise ValueError due to cycle. if len(topological_order) == len(in_degree): return topological_order else: raise ValueError(\\"cycle\\")"},{"question":"# Coding Assessment: Maximum Flow in a Network Scenario: You are given a directed graph representing a simplified model of a city\'s traffic network, where intersections are represented as nodes and roads as edges with specific capacity limits (the maximum number of vehicles that can traverse a road). Your task is to compute the maximum traffic flow from a source intersection to a destination intersection. Problem Statement: Implement a function `compute_maximum_flow` that determines the maximum possible flow from the source (node `0`) to the sink (the last node) in a given graph using the Ford-Fulkerson method with the Breadth-First Search (BFS) approach. Function Signature: ```python def compute_maximum_flow(adjacency_matrix: List[List[int]]) -> int: pass ``` Input: * `adjacency_matrix`: A list of lists (int), where `adjacency_matrix[i][j]` is the capacity of the edge from node `i` to node `j`. The graph is always square (n x n). Output: * An integer representing the maximum flow from the source to the sink. Constraints: * The number of nodes (2 leq n leq 100). * All capacities are non-negative integers. * There is at least one valid path from the source to the sink. Example: ```python graph = [ [0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0] ] assert compute_maximum_flow(graph) == 23 ``` Additional Notes: * Use the Ford-Fulkerson method with BFS to find augmenting paths. * Pay attention to maintaining the residual capacities and ensuring path augmentation is performed correctly. * Consider edge cases such as graphs with zero capacity edges or disconnected components. Implement the solution with adequate validation and testing to ensure correctness and efficiency.","solution":"from collections import deque from typing import List def bfs(rGraph, s, t, parent): visited = [False] * len(rGraph) queue = deque([s]) visited[s] = True while queue: u = queue.popleft() for ind, val in enumerate(rGraph[u]): if visited[ind] == False and val > 0: queue.append(ind) visited[ind] = True parent[ind] = u if ind == t: return True return False def compute_maximum_flow(adjacency_matrix: List[List[int]]) -> int: graph = adjacency_matrix source = 0 sink = len(graph) - 1 rGraph = [row[:] for row in graph] parent = [-1] * len(graph) max_flow = 0 while bfs(rGraph, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, rGraph[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] rGraph[u][v] -= path_flow rGraph[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow"},{"question":"# Scenario You are given a large binary search tree (BST) to work with in a computational geometry tool. The requirement is to traverse the tree in increasing order to process elements sequentially. To achieve this, you need to design an iterator that efficiently walks through the BST nodes. The tree is generally balanced, but in some exceptional cases, it might be skewed. # Task Implement a class `BSTIterator` with the following methods: * `__init__(self, root)` - Initializes the BSTIterator object using the root of the BST. * `next(self)` - Returns the next smallest number in the BST. * `has_next(self)` - Returns a boolean indicating whether there are more nodes to be iterated. # Input and Output Formats * The initializer `__init__` accepts `root` (TreeNode), which is the root of the BST. * The `next(self)` method returns the next value (integer) in the in-order sequence. * The `has_next(self)` method returns a boolean indicating if there are more nodes to iterate over. # Constraints * The BST nodes contain integer values. * The `next()` method will always be called only if `has_next()` returns True. * The maximum height of the BST will be limited by the constraints (1 ≤ node count ≤ 10^4). # Example ```python # Example Tree: # 7 # / # 3 15 # / # 9 20 root = TreeNode(7) root.left = TreeNode(3) root.right = TreeNode(15) root.right.left = TreeNode(9) root.right.right = TreeNode(20) iterator = BSTIterator(root) iterator.next() # return 3 iterator.next() # return 7 iterator.has_next() # return True iterator.next() # return 9 iterator.has_next() # return True iterator.next() # return 15 iterator.has_next() # return True iterator.next() # return 20 iterator.has_next() # return False ``` # Notes * Ensure to handle edge cases where the tree is skewed or empty. * Optimize for space where feasible without losing clarity.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class BSTIterator: def __init__(self, root): Initializes the BSTIterator object using the root of the BST. self.stack = [] # Initialize the stack with the leftmost path of the tree self._leftmost_inorder(root) def _leftmost_inorder(self, root): Helper function to traverse the leftmost path of the tree. while root: self.stack.append(root) root = root.left def next(self): Returns the next smallest number in the BST. # Node on top of the stack is the next smallest element topmost_node = self.stack.pop() # If the popped node has a right child, we add the right child and its leftmost path to the stack if topmost_node.right: self._leftmost_inorder(topmost_node.right) return topmost_node.val def has_next(self): Returns a boolean indicating whether there are more nodes to be iterated. return len(self.stack) > 0"},{"question":"# Question: Priority Queue Implementation Objective Implement a Priority Queue using the heap data structure that supports the following operations: * `insert(key, priority)`: Insert an element with the given priority. * `extract_max()`: Remove and return the element with the highest priority. * `peek_max()`: Return the element with the highest priority without removing it. * `is_empty()`: Check if the queue is empty. Description 1. **Insert Operation (`insert(key, priority)`)**: - This operation should insert the element in a way that maintains the heap property. 2. **Extract Maximum (`extract_max()`)**: - This operation should remove the element with the highest priority (the root of the heap). - Ensure you reheapify the structure to maintain the heap property after removal. 3. **Peek Maximum (`peek_max()`)**: - This operation returns the element with the highest priority without modifying the heap. 4. **Empty Check (`is_empty()`)**: - This operation checks if the heap is empty and returns a boolean value. Input and Output Formats * **insert(key, priority)**: Takes a tuple, where `key` is the element to insert, and `priority` is the priority value. * **extract_max()**: Returns a tuple `(key, priority)` of the element with the highest priority. * **peek_max()**: Returns a tuple `(key, priority)` without removing the element. * **is_empty()**: Returns a boolean value indicating whether the heap is empty. Constraints 1. The priority values are unique integers. 2. Assume that there are no duplicate `key` values. 3. Expected to handle operations efficiently with a time complexity of O(log n) for insert and extract operations. Example ``` pq = PriorityQueue() pq.insert(\'task1\', 5) pq.insert(\'task2\', 1) pq.insert(\'task3\', 3) print(pq.peek_max()) # Output: (\'task1\', 5) print(pq.extract_max()) # Output: (\'task1\', 5) print(pq.peek_max()) # Output: (\'task3\', 3) print(pq.is_empty()) # Output: False ```","solution":"import heapq class PriorityQueue: def __init__(self): self.heap = [] self.entry_finder = {} self.REMOVED = \\"<removed-task>\\" self.counter = 0 def insert(self, key, priority): if key in self.entry_finder: self.remove_task(key) count = self.counter self.counter += 1 entry = [-priority, count, key] self.entry_finder[key] = entry heapq.heappush(self.heap, entry) def remove_task(self, key): entry = self.entry_finder.pop(key) entry[-1] = self.REMOVED def extract_max(self): while self.heap: priority, count, key = heapq.heappop(self.heap) if key != self.REMOVED: del self.entry_finder[key] return (key, -priority) raise KeyError(\\"pop from an empty priority queue\\") def peek_max(self): while self.heap: priority, count, key = self.heap[0] if key != self.REMOVED: return (key, -priority) heapq.heappop(self.heap) raise KeyError(\\"peek from an empty priority queue\\") def is_empty(self): return not self.entry_finder"},{"question":"# Fenwick Tree Implementation for Range Queries Scenario: You are employed at a company that maintains a large dataset of user transactions indexed by time. Frequently, you need to answer queries about the total transaction value within a given time range, and update the transaction value at specific times due to corrections or errors. Task: Using the principles of Fenwick Tree (Binary Indexed Tree), implement a data structure to efficiently support both range sum queries and single element updates. Instructions: Define a `FenwickTree` class with the following methods: 1. **`__init__(self, size)`**: * Initializes the Fenwick Tree for a given size of the dataset. 2. **`update(self, index, value)`**: * Updates the value at the given `index` in the dataset. * Parameters: - `index`: integer, the position in the dataset to update. - `value`: integer, the new value to add to the current value at `index`. 3. **`range_sum(self, left, right)`**: * Computes the sum of elements in the dataset from index `left` to `right` inclusive. * Parameters: - `left`: integer, the starting index of the range. - `right`: integer, the ending index of the range. Ensure the methods work efficiently within the constraints. Example: ```python fenwick_tree = FenwickTree(5) # Initial dataset: [0, 0, 0, 0, 0] fenwick_tree.update(0, 3) # Update index 0 to value 3 fenwick_tree.update(1, 2) # Update index 1 to value 2 fenwick_tree.update(2, -1) # Update index 2 to value -1 print(fenwick_tree.range_sum(0, 2)) # Output: 4 print(fenwick_tree.range_sum(1, 2)) # Output: 1 ``` Constraints: 1. The size of the dataset will not exceed (10^5). 2. The values at any index will be integers within the range ([-10^9, 10^9]). 3. The number of operations (updates + queries) will not exceed (10^5).","solution":"class FenwickTree: def __init__(self, size): Initialize the Fenwick Tree for a given size. self.size = size self.tree = [0] * (size + 1) def update(self, index, value): Update the value at the given index in the dataset by adding the value. index += 1 # Fenwick Tree is 1-based index while index <= self.size: self.tree[index] += value index += index & -index def prefix_sum(self, index): Compute the prefix sum from 0 to index. index += 1 # Fenwick Tree is 1-based index result = 0 while index > 0: result += self.tree[index] index -= index & -index return result def range_sum(self, left, right): Compute the sum of elements in the dataset from index left to right inclusive. return self.prefix_sum(right) - self.prefix_sum(left - 1)"},{"question":"# Anagram Detection Problem Statement Write a function `is_anagram(str1, str2)` that determines if the two given strings `str1` and `str2` are anagrams of each other. For the purposes of this problem, a string is defined to contain only lowercase alphabetical characters (\'a\' to \'z\'). Input - `str1`: A string of lowercase alphabetical characters (1 ≤ len(str1) ≤ 1000). - `str2`: A string of lowercase alphabetical characters (1 ≤ len(str2) ≤ 1000). Output - Return `True` if `str1` and `str2` are anagrams of each other, otherwise return `False`. Constraints - Both strings will contain only lowercase alphabetical characters. - Assume both strings will have lengths within the given bounds. Example ```python assert is_anagram(\\"apple\\", \\"pleap\\") == True assert is_anagram(\\"apple\\", \\"cherry\\") == False assert is_anagram(\\"listen\\", \\"silent\\") == True assert is_anagram(\\"triangle\\", \\"integral\\") == True assert is_anagram(\\"apple\\", \\"pale\\") == False ``` Notes * Be mindful of efficient character counting. * Ensure your algorithm handles edge cases such as one or both strings being empty correctly within allowable constraints. Implementation ```python def is_anagram(str1, str2): # Your code here ```","solution":"def is_anagram(str1, str2): Determines if str1 and str2 are anagrams of each other. if len(str1) != len(str2): return False # Create frequency dictionaries for both strings freq1 = {} freq2 = {} for char in str1: if char in freq1: freq1[char] += 1 else: freq1[char] = 1 for char in str2: if char in freq2: freq2[char] += 1 else: freq2[char] = 1 # Compare frequency dictionaries return freq1 == freq2"},{"question":"You are tasked with calculating the binomial coefficient ( C(n, k) ), which represents the number of ways to choose ( k ) items from ( n ) items without regard to the order of selection. The binomial coefficient is calculated using the formula: [ C(n, k) = frac{n!}{k!(n-k)!} ] However, computing factorials directly can lead to very large numbers and inefficient calculations. Instead, you should use a recursive approach as described below. # Objectives 1. Implement a function `efficient_binomial_coefficient(n, k)` that computes the binomial coefficient ( C(n, k) ) using an efficient recursive approach. 2. Ensure that your implementation considers edge cases and optimizes for time complexity. # Input - Two integers `n` and `k` such that ( 0 leq k leq n ). # Output - An integer representing the binomial coefficient ( C(n, k) ). # Constraints - ( 0 leq k leq n leq 500 ) # Requirements - Your function should be optimized to handle large values of `n` and `k` efficiently. - Handle invalid inputs appropriately by raising an error if ( n < k ). - Optimize for recursion depth issues and consider implementing memoization or an iterative approach if necessary. # Example ```python def efficient_binomial_coefficient(n, k): # Your implementation here # Examples print(efficient_binomial_coefficient(5, 0)) # Should return 1 print(efficient_binomial_coefficient(8, 2)) # Should return 28 print(efficient_binomial_coefficient(500, 300)) # Should return a large number ``` In your implementation, consider all edge cases, optimize for large inputs, and ensure the correctness of your calculations.","solution":"def efficient_binomial_coefficient(n, k): if k > n: raise ValueError(\\"k should not be greater than n\\") if k == 0 or k == n: return 1 k = min(k, n - k) # DP table to store binomial coefficients C = [0] * (k + 1) C[0] = 1 # C(n, 0) is always 1 for i in range(1, n + 1): for j in range(min(k, i), 0, -1): C[j] = C[j] + C[j - 1] return C[k]"},{"question":"# Scenario You are developing an educational tool that helps students understand numeric systems. As part of this, you need to implement a function that converts given integers into their corresponding Roman numeral representations. # Task Write a Python function `int_to_roman(num)` that converts a given integer (within the range of 1 to 3999) to its Roman numeral representation. # Input - An integer `num` where 1 <= num <= 3999. # Output - A string representing the Roman numeral of the input integer. # Constraints - Ensure that the function is efficient and operates within constant time complexity constraints. # Examples 1. `int_to_roman(3)` should return `\\"III\\"`. 2. `int_to_roman(58)` should return `\\"LVIII\\"`. 3. `int_to_roman(1994)` should return `\\"MCMXCIV\\"`. # Additional Notes - The Roman numeral system does not have a concept of zero or negative numbers. - You must ensure the function adheres to the constraints; do not handle inputs outside the specified range. # Guidance Use pre-defined mappings for thousands, hundreds, tens, and units places, indexed by digit values to construct the Roman numeral string efficiently.","solution":"def int_to_roman(num): Convert an integer to its Roman numeral representation. :param num: Integer between 1 and 3999 (inclusive). :return: Roman numeral representation of the integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \\"\\" i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"# Problem Description Implement a function `optimized_insertion_sort` that sorts an array using the Insertion Sort algorithm. In this implementation, you should optimize the sorting process by using binary search to find the position where the current element should be inserted. This optimization should help in reducing the number of comparisons required. Function Signature ```python def optimized_insertion_sort(arr: list) -> list: ``` # Input * `arr` (List[int]): A list of integers to be sorted. # Output * Returns a sorted list of integers in ascending order. # Constraints * The length of `arr` ranges from 0 to 10^4. * Each integer in `arr` is within the range -10^6 to 10^6. # Performance Requirements * The implementation should maintain O(n^2) time complexity. # Hints 1. Use binary search to locate the correct position for the current element. 2. Shift the elements right only once the correct position is identified by binary search. # Example ```python # Example 1 input_array = [5, 2, 9, 1, 5, 6] sorted_array = optimized_insertion_sort(input_array) print(sorted_array) # Output: [1, 2, 5, 5, 6, 9] # Example 2 input_array = [] sorted_array = optimized_insertion_sort(input_array) print(sorted_array) # Output: [] # Example 3 input_array = [2] sorted_array = optimized_insertion_sort(input_array) print(sorted_array) # Output: [2] ```","solution":"def binary_search(arr, val, start, end): if start == end: if arr[start] > val: return start else: return start + 1 if start > end: return start mid = (start + end) // 2 if arr[mid] < val: return binary_search(arr, val, mid + 1, end) elif arr[mid] > val: return binary_search(arr, val, start, mid - 1) else: return mid def optimized_insertion_sort(arr): for i in range(1, len(arr)): val = arr[i] j = binary_search(arr, val, 0, i - 1) arr = arr[:j] + [val] + arr[j:i] + arr[i+1:] return arr"},{"question":"**Network Maximum Flow** Network flow problems are commonly encountered in various fields and require precise calculation of the maximum possible flow from a source to a sink in a given network. You are provided with the code implementations of three maximum flow algorithms: Ford-Fulkerson, Edmonds-Karp, and Dinic\'s algorithm. # Task Implement a function `network_max_flow` that selects the appropriate algorithm based on the properties of the input graph and computes the maximum flow from the source to the sink. # Function Signature ```python def network_max_flow(algorithm: str, capacity: List[List[int]], source: int, sink: int) -> int: ``` # Inputs - `algorithm`: a string that indicates the algorithm to use (`\\"ford_fulkerson\\"`, `\\"edmonds_karp\\"`, or `\\"dinic\\"`). - `capacity`: a list of lists where `capacity[i][j]` implies the capacity of the edge from node `i` to node `j`. If there is no edge, capacity should be 0. - `source`: an integer denoting the source node. - `sink`: an integer denoting the sink node. # Output - An integer representing the maximum flow from the source to the sink. # Constraints - Capacity matrix will be a square matrix of size `n x n` where `2 ≤ n ≤ 100`. - Values in the capacity matrix will be non-negative integers. # Example ```python capacity = [ [0, 16, 13, 0, 0, 0], [16, 0, 10, 12, 0, 0], [13, 4, 0, 0, 14, 0], [0, 12, 9, 0, 0, 20], [0, 0, 14, 7, 0, 4], [0, 0, 0, 20, 4, 0] ] source = 0 sink = 5 algorithm = \\"dinic\\" print(network_max_flow(algorithm, capacity, source, sink)) # Output should be 23 ``` # Note - You must implement the selection of the algorithm within the `network_max_flow` function. - Use the provided implementations of each algorithm as a reference for your solution.","solution":"from collections import deque def ford_fulkerson(capacity, source, sink): n = len(capacity) flow = 0 parent = [-1] * n def bfs(s, t): visited = [False] * n queue = deque([s]) visited[s] = True while queue: u = queue.popleft() for v in range(n): if not visited[v] and capacity[u][v] - max_flow[u][v] > 0: queue.append(v) visited[v] = True parent[v] = u if v == t: return True return False max_flow = [[0] * n for _ in range(n)] while bfs(source, sink): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[parent[s]][s] - max_flow[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] max_flow[u][v] += path_flow max_flow[v][u] -= path_flow v = parent[v] flow += path_flow return flow def edmonds_karp(capacity, source, sink): n = len(capacity) flow = 0 parent = [-1] * n def bfs(s, t): visited = [False] * n queue = deque([s]) visited[s] = True while queue: u = queue.popleft() for v in range(n): if not visited[v] and capacity[u][v] - max_flow[u][v] > 0: queue.append(v) visited[v] = True parent[v] = u if v == t: return True return False max_flow = [[0] * n for _ in range(n)] while bfs(source, sink): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[parent[s]][s] - max_flow[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] max_flow[u][v] += path_flow max_flow[v][u] -= path_flow v = parent[v] flow += path_flow return flow def dinic(capacity, source, sink): n = len(capacity) level = [-1] * n max_flow = [[0] * n for _ in range(n)] def bfs(s, t): nonlocal level level = [-1] * n level[s] = 0 queue = deque([s]) while queue: u = queue.popleft() for v in range(n): if level[v] < 0 and capacity[u][v] - max_flow[u][v] > 0: level[v] = level[u] + 1 queue.append(v) return level[t] >= 0 def dfs(u, t, flow): if u == t: return flow for v in range(n): if level[v] == level[u] + 1 and capacity[u][v] - max_flow[u][v] > 0: min_flow = min(flow, capacity[u][v] - max_flow[u][v]) result = dfs(v, t, min_flow) if result > 0: max_flow[u][v] += result max_flow[v][u] -= result return result return 0 flow = 0 while bfs(source, sink): while True: result = dfs(source, sink, float(\'Inf\')) if result == 0: break flow += result return flow def network_max_flow(algorithm, capacity, source, sink): if algorithm == \\"ford_fulkerson\\": return ford_fulkerson(capacity, source, sink) elif algorithm == \\"edmonds_karp\\": return edmonds_karp(capacity, source, sink) elif algorithm == \\"dinic\\": return dinic(capacity, source, sink) else: raise ValueError(\\"Unknown algorithm type\\")"},{"question":"Assume you have two sparse matrices **A** and **B**. Your task is to write a function to compute the result of the matrix multiplication (AB). Input - A matrix ( A ), which is a list of lists where each sub-list represents a row of the matrix. - A matrix ( B ), which is a list of lists where each sub-list represents a row of the matrix. * You may assume that ( A )\'s column number is equal to ( B )\'s row number. Output - Return a matrix ( C ) which is the result of ( AB ). The output should be in the same format as the input. Constraints - (1 leq ) number of rows in ( A ) ( leq 100) - (1 leq ) number of columns in ( A ) = number of rows in ( B ) ( leq 100) - (1 leq ) number of columns in ( B ) ( leq 100) - The input matrices might contain a large number of zero elements. Example Input: ```python A = [ [1, 0, 0], [-1, 0, 3] ] B = [ [7, 0, 0], [0, 0, 0], [0, 0, 1] ] ``` Output: ```python C = [ [7, 0, 0], [-7, 0, 3] ] ``` Function Signature ```python def multiply(A: List[List[int]], B: List[List[int]]) -> List[List[int]]: pass ``` Requirements * The function must handle the sparse nature of the matrices to optimize performance. * Any naive solution will be awarded partial credit; optimized solutions will receive full credit.","solution":"from typing import List def multiply(A: List[List[int]], B: List[List[int]]) -> List[List[int]]: # Get dimensions of the input matrices n, m = len(A), len(A[0]) m_, k = len(B), len(B[0]) # Initialize result matrix with zeroes res = [[0] * k for _ in range(n)] # Precompute positions of non-zero entries in A and B to take advantage of sparsity non_zero_A = {} for i in range(n): for j in range(m): if A[i][j] != 0: if i not in non_zero_A: non_zero_A[i] = [] non_zero_A[i].append(j) non_zero_B = {} for j in range(m): for l in range(k): if B[j][l] != 0: if j not in non_zero_B: non_zero_B[j] = [] non_zero_B[j].append(l) # Compute the multiplications only at non-zero positions for i in non_zero_A: for j in non_zero_A[i]: if j in non_zero_B: for l in non_zero_B[j]: res[i][l] += A[i][j] * B[j][l] return res"},{"question":"**Context**: You are working as a software developer, and your team needs to implement a feature where you must sort a list of tasks based on their priority. The tasks are initially unordered, and their priorities are integers. To kick-start this, you decided to use the Exchange Sort algorithm to refresh your basics of sorting algorithms. **Task Description**: Write a function to sort a list of integers in ascending order using the Exchange Sort algorithm. Your function should be named `custom_exchange_sort`. It should take a list of integers as input and return a new list of integers sorted in ascending order. **Function Signature**: ```python def custom_exchange_sort(arr: List[int]) -> List[int]: pass ``` **Input Format**: - A list of integers `arr` where ( 1 leq len(arr) leq 1000 ) - ( -10^3 leq arr[i] leq 10^3 ) for each integer ( arr[i] ) **Output Format**: - A list of integers sorted in ascending order. **Constraints**: - The list may contain duplicate values. - Try to minimize swaps where possible. - Optimize your algorithm for best performance within the given constraints. **Example**: Input: `[34, 2, -5, 29, 100, -100]` Output: `[-100, -5, 2, 29, 34, 100]` **Edge Cases**: 1. Input: `[]` (Empty list) Output: `[]` 2. Input: `[42]` (Single element) Output: `[42]` 3. Input: `[7, 5, 7, 3, 5]` (With duplicates) Output: `[3, 5, 5, 7, 7]` **Notes**: - The implementation should handle and return results for edge cases correctly. - Do not use built-in sorting functions; implement the sorting algorithm from scratch.","solution":"from typing import List def custom_exchange_sort(arr: List[int]) -> List[int]: Sort the given list of integers in ascending order using the Exchange Sort algorithm. n = len(arr) for i in range(n): for j in range(i + 1, n): if arr[i] > arr[j]: # Swap elements arr[i], arr[j] = arr[j], arr[i] return arr"},{"question":"You are given a 2D grid map of \'1\'s (lands) and \'0\'s (waters). An island is formed by connecting adjacent lands horizontally or vertically. Islands are surrounded by water, and you may assume all four edges of the grid are surrounded by water. Write a function that returns the number of islands in the given grid. # Input Format - `grid`: A list of lists of integers, where `grid[i][j]` is either `1` (land) or `0` (water). # Output Format - An integer representing the number of islands. # Example ```python grid1 = [ [1, 1, 1, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0] ] # Output: 1 grid2 = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] # Output: 3 ``` # Constraints - The dimensions of the grid are at most 300x300. # Detailed Specification 1. Implement the `num_islands(grid)` function that takes `grid` as input and returns the number of islands. 2. Use DFS to explore each connected component of \'1\'s in the grid. 3. Ensure to mark visited cells to avoid recounting. **Note**: Handle edge cases such as an empty grid, very large contiguous land areas, and grids composed only of water (\'0\'s). # Coding Requirement - Implement the function using DFS (recursive or iterative) to traverse the grid. - Optimize to avoid issues with large recursion depth where necessary. - Ensure correctness for all provided and edge cases.","solution":"def num_islands(grid): if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0: return grid[i][j] = 0 # mark as visited # explore all four directions dfs(grid, i + 1, j) dfs(grid, i - 1, j) dfs(grid, i, j + 1) dfs(grid, i, j - 1) num_islands = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: dfs(grid, i, j) num_islands += 1 return num_islands"},{"question":"# Radix Sort Implementation and Analysis Scenario You are tasked with writing an efficient sorting algorithm for a large finance application. The input consists of millions of records, each identified by a unique transaction ID, which is a non-negative integer. Task Implement the Radix Sort algorithm to sort a given list of non-negative integers representing the transaction IDs. Additionally, include a detailed analysis of your implementation considering edge cases, performance bottlenecks, and potential optimizations. Function Signature ```python def radix_sort(arr: List[int]) -> List[int]: # your implementation here ``` Requirements 1. **Input**: - A list of non-negative integers, `arr`, where `0 <= arr[i] <= 10^9` and `0 <= len(arr) <= 10^6`. 2. **Output**: - A list of integers sorted in non-decreasing order. 3. **Constraints**: - The implementation should handle edge cases like an empty list, all elements being the same, and very large numbers with up to 9 digits. 4. **Performance**: - The algorithm should efficiently handle the upper limits of the input size and value range. 5. **Simulation (Optional)**: - If a `simulation` flag is set to `True`, your implementation should print each iteration\'s state of the list for debugging purposes. Example ```python # Example 1: arr = [170, 45, 75, 90, 802, 24, 2, 66] print(radix_sort(arr)) # Output: [2, 24, 45, 66, 75, 90, 170, 802] # Example 2: arr = [5, 2, 2, 8, 3] print(radix_sort(arr)) # Output: [2, 2, 3, 5, 8] # Example 3: arr = [] print(radix_sort(arr)) # Output: [] # Example 4: arr = [123456789] print(radix_sort(arr)) # Output: [123456789] ```","solution":"from typing import List def counting_sort_for_radix(arr, exp, simulation=False): n = len(arr) output = [0] * n count = [0] * 10 for i in range(n): index = arr[i] // exp count[index % 10] += 1 for i in range(1, 10): count[i] += count[i - 1] for i in range(n - 1, -1, -1): index = arr[i] // exp output[count[index % 10] - 1] = arr[i] count[index % 10] -= 1 for i in range(n): arr[i] = output[i] if simulation: print(f\\"Sorting with exp={exp}, intermediate array: {arr}\\") def radix_sort(arr: List[int], simulation=False) -> List[int]: if len(arr) == 0: return arr max_val = max(arr) exp = 1 while max_val // exp > 0: counting_sort_for_radix(arr, exp, simulation) exp *= 10 return arr"},{"question":"Scenario You are tasked with finding a unique integer in a list where every other integer appears exactly three times. This problem arises often in situations such as noise filtering from repeated signals or finding unique occurrences in duplicated datasets. Your solution must run in linear time and use constant space. Task Implement a function `find_unique_number(nums: List[int]) -> int` that takes a list of integers where every integer appears exactly three times except for one unique integer which appears only once, and returns that single integer. # Function Signature ```python def find_unique_number(nums: List[int]) -> int: pass ``` # Input * `nums`: A list of integers with length `n` (1 ≤ n ≤ 10^6). Each integer in the list appears exactly three times except for one integer which appears only once. The numbers can be both positive and negative. # Output * Returns the integer that appears only once. Constraints 1. The algorithm must run in linear time, O(n). 2. No extra memory usage is allowed apart from a fixed number of variables. # Example ```python find_unique_number([2, 2, 3, 2]) # Should return 3 find_unique_number([0, 1, 0, 1, 0, 1, 99]) # Should return 99 ``` # Explanation For `find_unique_number([2, 2, 3, 2])`, the integer `3` is the only number not appearing three times. For `find_unique_number([0, 1, 0, 1, 0, 1, 99])`, `99` is the unique number while others appear three times. # Notes Consider edge cases like the presence of negative numbers or exact placement of the unique number within the list.","solution":"from typing import List def find_unique_number(nums: List[int]) -> int: ones, twos = 0, 0 for num in nums: twos |= ones & num ones ^= num common_bitmask = ~(ones & twos) ones &= common_bitmask twos &= common_bitmask return ones"},{"question":"# Scenario You are working on an e-commerce platform where you need to process a list of product prices for sorting in ascending order. You have learned about Heap Sort and are tasked to implement both Max-Heap Sort and Min-Heap Sort for this purpose. # Problem Statement Your task is to implement the heap sort algorithm in Python. You need to implement two functions: `max_heap_sort` and `min_heap_sort`. Each function should sort the given array of integers in ascending order. You can use the provided helper functions `max_heapify` and `min_heapify`. # Function Signatures ```python def max_heap_sort(arr: List[int]) -> List[int]: pass def min_heap_sort(arr: List[int]) -> List[int]: pass ``` # Input - `arr`: A list of integers `arr` representing the prices of the products. # Output - Both functions should return a sorted list of integers in ascending order. # Constraints - The length of the array `arr` will be between 1 and 10^5 inclusive. - Each integer in the array will be between -10^6 and 10^6 inclusive. # Examples ```python # Example 1: arr = [10, 5, 3, 15, 8] print(max_heap_sort(arr)) # Output: [3, 5, 8, 10, 15] print(min_heap_sort(arr)) # Output: [3, 5, 8, 10, 15] # Example 2: arr = [7, 14, 2, 18, 4, 11] print(max_heap_sort(arr)) # Output: [2, 4, 7, 11, 14, 18] print(min_heap_sort(arr)) # Output: [2, 4, 7, 11, 14, 18] ``` # Notes - The example test cases provided should guide you in ensuring the correctness of your implementation. - Aim for a solution that executes in O(n log n) time complexity for optimal performance.","solution":"def max_heapify(arr, n, i): largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[left] > arr[largest]: largest = left if right < n and arr[right] > arr[largest]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] max_heapify(arr, n, largest) def max_heap_sort(arr): n = len(arr) for i in range(n // 2 - 1, -1, -1): max_heapify(arr, n, i) for i in range(n-1, 0, -1): arr[i], arr[0] = arr[0], arr[i] max_heapify(arr, i, 0) return arr def min_heapify(arr, n, i): smallest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[left] < arr[smallest]: smallest = left if right < n and arr[right] < arr[smallest]: smallest = right if smallest != i: arr[i], arr[smallest] = arr[smallest], arr[i] min_heapify(arr, n, smallest) def min_heap_sort(arr): n = len(arr) for i in range(n // 2 - 1, -1, -1): min_heapify(arr, n, i) sorted_arr = [] for i in range(n-1, -1, -1): arr[0], arr[i] = arr[i], arr[0] sorted_arr.append(arr.pop()) min_heapify(arr, i, 0) return sorted_arr"},{"question":"# Question: Implement a Robust Square Root Function using Newton\'s Method Implement a function `custom_square_root(n: float, epsilon: float = 0.001) -> float` that calculates the square root of a given positive number `n` using Newton\'s Method. The resulting approximation should have an absolute error less than or equal to `epsilon`. Input - A positive floating-point number `n` (1 ≤ n ≤ 10^7), representing the number for which the square root is to be calculated. - A positive floating-point precision factor `epsilon` (0 < epsilon ≤ 10^-3), representing the maximum allowable error in the result. Output - A floating-point number representing the square root of `n` having an absolute error less than or equal to `epsilon`. Constraints - The function should handle edge cases such as extremely large numbers efficiently. - Ensure the function runs in logarithmic time complexity and holds constant space complexity. Example ```python assert abs(custom_square_root(5, 0.001) - 2.236) <= 0.001 assert abs(custom_square_root(100, 0.0001) - 10) <= 0.0001 assert abs(custom_square_root(1e7, 0.001) - 3162.277) <= 0.001 assert abs(custom_square_root(10, 1e-5) - 3.16228) <= 1e-5 ``` # Guidelines * Use Newton\'s Method iteratively to approximate the square root. * Ensure your implementation is optimized for both time and space complexity. * Write a function that is robust, handling different edge cases elegantly.","solution":"def custom_square_root(n: float, epsilon: float = 0.001) -> float: Calculate the square root of a given positive number n using Newton\'s Method with accuracy epsilon. :param n: A positive floating-point number for which the square root is to be calculated. :param epsilon: A positive floating-point precision factor representing the maximum allowable error. :return: A floating-point number representing the square root of n. if n < 0: raise ValueError(\\"The input number must be positive.\\") if epsilon <= 0: raise ValueError(\\"The epsilon must be a positive number.\\") approx = n while True: better_approx = 0.5 * (approx + n / approx) if abs(better_approx - approx) <= epsilon: return better_approx approx = better_approx"},{"question":"# Permutation Generation: Optimization Challenge You are tasked with optimizing an existing algorithm that generates all possible permutations of a list of distinct elements. The current implementation uses a recursive approach, which can be inefficient for larger inputs due to deep recursion and high memory usage. Objective Refactor the given permutation generation function to improve its performance characteristics, especially aiming for reduced memory usage without compromising the correctness or completeness of the permutation enumeration. Function Signature ```python def optimized_permute(elements): Generate all possible permutations of a list of distinct elements in a memory-efficient manner. Args: elements (List[int]): A list of distinct integers. Returns: List[List[int]]: A list of lists, where each inner list is a unique permutation of the input list. pass ``` Expected Input and Output * **Input Format**: A list of distinct integers, 0 ≤ len(elements) ≤ 9. * **Output Format**: A list of lists, with each inner list being one permutation of the input list. Constraints 1. The function should handle up to 9 elements efficiently. 2. The output should maintain the order of permutations as specified in the input list\'s lexicographical order. 3. The function should use as minimal additional memory as possible, prefering iterative approaches over recursive where applicable. Example ```python assert optimized_permute([1, 2, 3]) == [ [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1] ] assert optimized_permute([]) == [[]] assert optimized_permute([1]) == [[1]] ``` Notes - Focus on reducing memory usage by avoiding storing unnecessary intermediate results. - You can make use of Python\'s standard library, but recursive stack depth should be considered.","solution":"from itertools import permutations def optimized_permute(elements): Generate all possible permutations of a list of distinct elements in a memory-efficient manner. Args: elements (list(int)): A list of distinct integers. Returns: list(list(int)): A list of lists, where each inner list is a unique permutation of the input list. if len(elements) == 0: return [[]] # Use itertools.permutations which generates permutations lazily return list(permutations(elements))"},{"question":"# Problem Description: You are tasked with implementing a resizable hash table in Python, using the provided `HashTable` as a starting point. Your implementation should support basic hash table operations with dynamic resizing based on the load factor. # Assignment: 1. Implement the **ResizableHashTable** class in Python which extends the given `HashTable` class. 2. Ensure the hash table supports resizing — double the size of the table when the load factor exceeds 2/3. 3. Handle edge cases effectively, such as: * Collision handling using linear probing. * Proper handling of the `_deleted` sentinel during deletions and lookups. # Specifications: 1. Implement the `ResizableHashTable` ensuring all necessary functions (`put`, `get`, `del_`, `__resize`, etc.) work correctly. 2. Handle time complexity and space constraints to ensure efficient operation: * **Time Complexity**: Amortized O(1) for insert, delete, and access. * **Space Complexity**: O(n) where `n` is the total elements. # Example Usage: ```python ht = ResizableHashTable() ht.put(1, \'value1\') ht.put(2, \'value2\') print(ht.get(1)) # Output: value1 print(ht.get(2)) # Output: value2 ht.put(1, \'value3\') # Update value for key 1 print(ht.get(1)) # Output: value3 ht.del_(1) print(ht.get(1)) # Output: None ``` # Constraints: * The initial table size should be 8. * You must use linear probing for collision resolution. * Implement dynamic resizing when the load factor exceeds 2/3 of the table size. * Ensure handling of both `_deleted` and `_empty` markers appropriately. Your task is to modify the `ResizableHashTable` class provided above to meet these requirements.","solution":"class ResizableHashTable: _empty = object() _deleted = object() def __init__(self, capacity=8): self.table = [self._empty] * capacity self.capacity = capacity self.size = 0 def _hash(self, key): return hash(key) % self.capacity def _resize(self): old_table = self.table old_capacity = self.capacity self.capacity *= 2 self.table = [self._empty] * self.capacity self.size = 0 for slot in old_table: if slot is not self._empty and slot is not self._deleted: key, value = slot self.put(key, value) def put(self, key, value): if self.size / self.capacity > 2 / 3: self._resize() idx = self._hash(key) while self.table[idx] not in {self._empty, self._deleted}: k, _ = self.table[idx] if k == key: self.table[idx] = (key, value) return idx = (idx + 1) % self.capacity self.table[idx] = (key, value) self.size += 1 def get(self, key): idx = self._hash(key) while self.table[idx] is not self._empty: if self.table[idx] is not self._deleted: k, v = self.table[idx] if k == key: return v idx = (idx + 1) % self.capacity return None def del_(self, key): idx = self._hash(key) while self.table[idx] is not self._empty: if self.table[idx] is not self._deleted: k, _ = self.table[idx] if k == key: self.table[idx] = self._deleted self.size -= 1 return idx = (idx + 1) % self.capacity return None"},{"question":"# Coding Challenge Scenario: As a software engineer at a robotics company, you are tasked with implementing low-level operations for a custom embedded processor that lacks an arithmetic unit. Instead, it provides basic bitwise operations. Task: Write a function `add_checksum` that takes a list of non-negative integers and returns their sum. The function must use bitwise operations to compute the sum of the elements. You must not use the `+` operator or any higher-level arithmetic functions. Function Signature: ```python def add_checksum(nums: List[int]) -> int: ``` Input: - `nums`: A list of non-negative integers `[a1, a2, ..., an]`. - `1 <= len(nums) <= 10^4` - `0 <= ai <= 10^9` for each `ai` in `nums`. Output: - Return the sum of the elements in `nums`. Constraints: - You must use bitwise operations to compute the sum. - Do not use the `+` operator or standard library functions to sum the list. Example: ```python # Example 1 nums = [1, 2, 3, 4, 5] print(add_checksum(nums)) # Expected output: 15 # Example 2 nums = [0, 0, 0] print(add_checksum(nums)) # Expected output: 0 # Example 3 nums = [10, 25, 100] print(add_checksum(nums)) # Expected output: 135 ```","solution":"def add_checksum(nums): Returns the sum of a list of non-negative integers using bitwise operations. def bitwise_add(a, b): while b != 0: carry = a & b a = a ^ b b = carry << 1 return a result = 0 for num in nums: result = bitwise_add(result, num) return result"},{"question":"# Graph Cloning Challenge **Context**: You are given an undirected graph represented by its nodes, where each node contains a label and a list of its neighbors. Your task is to write a function that will produce a deep copy of the graph. # Requirements Implement a function `clone_graph(node)` that, given a node from an undirected graph, returns a deep copy of the entire graph. You need to ensure that the copied graph replicates the original structure and data accurately. ```python class UndirectedGraphNode: def __init__(self, label): self.label = label self.neighbors = [] ``` # Guidelines * Use an appropriate traversal method (DFS or BFS) to achieve the cloning. * The input graph can contain cycles, self-loops, or even be entirely disconnected. * Ensure minimal time and space complexity considering the nature of graph traversals. * The function should handle `None` input gracefully by returning `None`. # Input Format ```python def clone_graph(node: UndirectedGraphNode) -> UndirectedGraphNode: pass ``` * `node` - A reference to a single node in the undirected graph. # Output Format * Returns the reference to the root node of the newly cloned graph. # Constraints * The number of nodes in the graph is `1 <= N <= 10000`. * The node labels are unique within the graph. * Each node\'s neighbor list represents all the nodes connected to it. # Example Input graph: ``` 1 / / 0 --- 2 / _/ ``` Usage ```python node = UndirectedGraphNode(0) node1 = UndirectedGraphNode(1) node2 = UndirectedGraphNode(2) node.neighbors = [node1, node2] node1.neighbors = [node2] node2.neighbors = [node2] # self loop cloned_graph = clone_graph(node) ``` **Note**: The instance returned from `clone_graph(node)` should be a deeply cloned graph preserving the same structure.","solution":"class UndirectedGraphNode: def __init__(self, label): self.label = label self.neighbors = [] def clone_graph(node: UndirectedGraphNode) -> UndirectedGraphNode: if not node: return None copied_nodes = {} def dfs(node: UndirectedGraphNode) -> UndirectedGraphNode: if node.label in copied_nodes: return copied_nodes[node.label] copy = UndirectedGraphNode(node.label) copied_nodes[node.label] = copy for neighbor in node.neighbors: copy.neighbors.append(dfs(neighbor)) return copy return dfs(node)"},{"question":"# Preorder Traversal of a Binary Tree You are given a binary tree and need to implement functions for its preorder traversal. Preorder traversal visits nodes in the order: root, left subtree, right subtree. Your task is to write two functions: 1. `preorder(root: Node) -> List[int]`: which performs the preorder traversal using an iterative approach. 2. `preorder_rec(root: Node) -> List[int]`: which performs the preorder traversal using a recursive approach. Both functions should return a list of values representing the traversal order. # Input * `root`: The root node of the binary tree. It can be `None` if the tree is empty. # Output * A list of integers containing the node values in preorder traversal order. # Constraints * The number of nodes in the tree is in the range [0, 10^4]. * The values of the nodes are integers and can be duplicate. # Example Given the binary tree: ``` 1 / 2 3 / 4 5 ``` Calling `preorder(root)` or `preorder_rec(root)` should return the list `[1, 2, 4, 5, 3]`. # Requirements * The iterative solution should leverage a stack for iterative DFS traversal. * The recursive solution should make use of function call stack to achieve preorder traversal. Make sure to handle edge cases like an empty tree or single-node tree.","solution":"from typing import List, Optional class Node: def __init__(self, value: int, left: \'Node\' = None, right: \'Node\' = None): self.value = value self.left = left self.right = right def preorder(root: Optional[Node]) -> List[int]: Perform preorder traversal of a binary tree iteratively. if root is None: return [] stack, result = [root], [] while stack: node = stack.pop() result.append(node.value) if node.right: stack.append(node.right) if node.left: stack.append(node.left) return result def preorder_rec(root: Optional[Node]) -> List[int]: Perform preorder traversal of a binary tree recursively. result = [] def helper(node: Optional[Node]): if node is None: return result.append(node.value) helper(node.left) helper(node.right) helper(root) return result"},{"question":"You are given a universe ( U ) of ( n ) elements and a collection of subsets ( S ) with associated costs, and you need to find a minimum-cost subcollection of ( S ) that covers all elements of ( U ). Complete the function `enhanced_optimal_set_cover` that utilizes memoization to optimize the execution to some extent for the set cover problem. # Function Signature ```python def enhanced_optimal_set_cover(universe: set, subsets: dict, costs: dict) -> tuple: ``` # Input * `universe` (set): Universe of elements `{e1, e2, ..., en}`. * `subsets` (dict): Dictionary of subsets of ( U ) represented by `{Si: subset_elements_set}`. * `costs` (dict): Dictionary containing the cost of each subset in ( S ) represented by `{Si: cost}`. # Output * Returns the minimum cost set cover as a tuple where: 1. First element is a list of subsets that form the minimal cost cover. 2. Second element is the total cost of this cover. # Constraints * All elements of ( U ) are present in at least one subset of ( S ). * ( n leq 20 ). Note for larger ( n ), the solution will be infeasible due to exponential complexity. # Example Given: ```python universe = {1, 2, 3, 4, 5} subsets = { \'S1\': {4, 1, 3}, \'S2\': {2, 5}, \'S3\': {1, 4, 3, 2} } costs = { \'S1\': 5, \'S2\': 10, \'S3\': 3 } ``` Output: ```python ([\'S2\', \'S3\'], 13) ``` # Guidelines - Use memoization or dynamic programming to enhance the performance. - Ensure edge cases are handled appropriately. - Handle invalid input gracefully by returning None if the universe cannot be fully covered.","solution":"def enhanced_optimal_set_cover(universe: set, subsets: dict, costs: dict) -> tuple: from functools import lru_cache # Convert subsets dictionary to a list for better indexing subset_list = list(subsets.items()) @lru_cache(None) def dp(current_cover, index): # If universe is covered, return an empty set and cost 0 if current_cover == universe: return [], 0 if index >= len(subset_list): return None # Subset and cost for current index subset_name, subset_elements = subset_list[index] subset_cost = costs[subset_name] # Option 1: Skip current subset skip_solution = dp(current_cover, index + 1) # Option 2: Include current subset new_cover = current_cover | subset_elements include_solution = dp(new_cover, index + 1) if include_solution is not None: include_solution = ([subset_name] + include_solution[0], subset_cost + include_solution[1]) # Determine the better option if skip_solution is None: return include_solution if include_solution is None: return skip_solution if skip_solution[1] < include_solution[1]: return skip_solution else: return include_solution result = dp(frozenset(), 0) return result"},{"question":"# Scenario You are given a dataset of survey responses, and you need to identify the most frequently selected options to analyze the popular choices among the respondents. Your task is to implement a function that identifies the mode(s) of the given dataset. # Function Signature ```python def find_modes(arr: List[int]) -> List[int]: Given an array of integers, find and return all the mode(s) in the array as a list. If there are multiple modes, return them all in any order. :param arr: List of integers :return: List of integers being the modes ``` # Input * `arr`: A list of integers representing survey responses. (1 <= len(arr) <= 10^5, -10^6 <= arr[i] <= 10^6) # Output * Returns a list of integers representing the mode(s). If no integers are present, return an empty list. # Constraints * The function should be efficient with a time complexity of O(n). * Handle multiple modes by returning all equally frequent elements. # Examples 1. `find_modes([1, 1, 2, 2, 3, 4])` should return `[1, 2]` 2. `find_modes([4, 4, 4, 6, 6])` should return `[4]` 3. `find_modes([])` should return `[]` 4. `find_modes([1])` should return `[1]`","solution":"from typing import List from collections import Counter def find_modes(arr: List[int]) -> List[int]: Given an array of integers, find and return all the mode(s) in the array as a list. If there are multiple modes, return them all in any order. :param arr: List of integers :return: List of integers being the modes if not arr: return [] count = Counter(arr) max_freq = max(count.values()) modes = [num for num, freq in count.items() if freq == max_freq] return modes"},{"question":"# Bubble Sort Variation with Performance Analysis **Problem**: You are given a list of integers. Your task is to write a function that sorts this list using the Bubble Sort algorithm and returns the sorted list. Additionally, this function should count and return the number of swaps it made during the sorting process. Implement the following function: ```python def bubble_sort_with_swaps(arr: List[int]) -> Tuple[List[int], int]: Sorts the list using Bubble Sort and returns a tuple: the sorted list and the number of swaps. Args: arr (List[int]): A list of integers to sort. Returns: Tuple[List[int], int]: A tuple containing the sorted list and the number of swaps made. ``` **Input Format**: - A single list of integers `arr` of length `n` where (1 leq n leq 1000). **Output Format**: - A tuple containing: 1. The sorted list of integers. 2. An integer representing the number of swaps made during the sorting process. **Constraints**: - Use the Bubble Sort algorithm. - Do not use any built-in sorting functions. - Optimize for early exit if the list becomes sorted before completing all passes. **Examples**: ```python assert bubble_sort_with_swaps([3, 2, 1]) == ([1, 2, 3], 3) assert bubble_sort_with_swaps([1, 2, 3]) == ([1, 2, 3], 0) assert bubble_sort_with_swaps([5, 1, 4, 2, 8]) == ([1, 2, 4, 5, 8], 4) ``` **Performance Notes**: - Ensure your function can handle the maximum constraint efficiently and is optimized for early exit when the array is already sorted partway through the algorithm.","solution":"from typing import List, Tuple def bubble_sort_with_swaps(arr: List[int]) -> Tuple[List[int], int]: Sorts the list using Bubble Sort and returns a tuple: the sorted list and the number of swaps. Args: arr (List[int]): A list of integers to sort. Returns: Tuple[List[int], int]: A tuple containing the sorted list and the number of swaps made. n = len(arr) swaps = 0 for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swaps += 1 swapped = True if not swapped: break return arr, swaps"},{"question":"# Matrix Chain Multiplication **Objective**: Implement the matrix chain multiplication algorithm to find the optimal order of matrix multiplication that minimizes the total multiplication cost. **Problem Statement**: Given an array `array` of dimensions for a chain of matrices, where the ( i )-th matrix has dimensions array[i-1] x array[i], write a function `matrix_chain_order` that computes the minimum multiplication cost and the optimal parenthesization of matrices. **Function Signature**: ```python def matrix_chain_order(array: List[int]) -> Tuple[int, List[List[int]]]: pass ``` **Input**: - `array` (List[int]): The dimensions of matrices, where the length is ( n ) and ( n-1 ) matrices are considered. **Output**: - Returns a tuple: - The minimum number of scalar multiplications required. - A 2D list representing the optimal parenthesization of matrices. **Constraints**: - ( 1 leq n leq 100 ) - Dimensions in the array are positive integers. **Example**: ```python array = [30, 35, 15, 5, 10, 20, 25] result = matrix_chain_order(array) print(result) ``` **Expected Output**: ```python (15125, [[0, 0, 0, 0, 0], [0, 0, 15750, 7875, 9375, 11875, 15125], [0, 0, 0, 2625, 4375, 7125, 10500], [0, 0, 0, 0, 750, 2500, 5375], [0, 0, 0, 0, 0, 1000, 3500], [0, 0, 0, 0, 0, 0, 5000], [0, 0, 0, 0, 0, 0, 0]]) ``` **Notes**: - Implement helper functions if needed, for instance, to print the optimal parenthesization solution using a given 2D list of split points. - Ensure to handle edge cases, such as invalid inputs or single matrix scenarios. **Advanced Consideration**: - Optimize the space complexity if possible. - Use the result of the solution to print a readable form of matrix multiplication order.","solution":"from typing import List, Tuple def matrix_chain_order(array: List[int]) -> Tuple[int, List[List[int]]]: n = len(array) m = [[0] * n for _ in range(n)] s = [[0] * n for _ in range(n)] for l in range(2, n): for i in range(1, n - l + 1): j = i + l - 1 m[i][j] = float(\'inf\') for k in range(i, j): q = m[i][k] + m[k + 1][j] + array[i - 1] * array[k] * array[j] if q < m[i][j]: m[i][j] = q s[i][j] = k return m[1][n - 1], s"},{"question":"You are tasked with implementing a function `count_primes(n)` that returns the count of all prime numbers less than the given integer `n`. Utilize an efficient algorithm and consider enhanced performance by integrating the concept of the sieve of Eratosthenes with optimizations suggested in the analysis. # Function Signature ```python def count_primes(n: int) -> int: pass ``` # Input - `n` (int): A positive integer representing the upper limit (exclusive) for prime number counting. # Output - (int): The count of all prime numbers less than `n`. # Constraints 1. `n` will always be a positive integer. 2. You should handle large values of `n` efficiently, considering both time and space complexity. # Example ```python assert count_primes(10) == 4 # Primes less than 10: [2, 3, 5, 7] assert count_primes(20) == 8 # Primes less than 20: [2, 3, 5, 7, 11, 13, 17, 19] assert count_primes(1) == 0 # No primes less than 1 assert count_primes(2) == 0 # No primes less than 2 ``` # Notes 1. Edge cases such as `n = 1` or `n = 2` should be handled gracefully. 2. Focus on optimizing both time and space efficiency.","solution":"def count_primes(n: int) -> int: Returns the number of prime numbers less than n. if n < 2: return 0 sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return sum(sieve)"},{"question":"Given a list of numbers that might contain duplicates, write a Python function `unique_permutations` to return all possible unique permutations of the given list. # Input and Output Formats - **Input**: A list of integers `nums`, which may contain duplicates. - Example: `[1, 1, 2]` - **Output**: A list of lists, where each list is a unique permutation of the input list. - Example: `[ [1, 1, 2], [1, 2, 1], [2, 1, 1] ]` # Constraints - All elements of `nums` are integers. - Length of `nums` will not exceed 10. - The function should efficiently handle the duplicated elements to not generate repeated permutations. # Performance Requirements - The solution should focus on limiting the generation of duplicate permutations by appropriately managing the inclusion and exclusion of elements while building permutations. # Function Signature ```python def unique_permutations(nums): pass ``` # Example Input ```python unique_permutations([1, 1, 2]) ``` Output ```python [ [1, 1, 2], [1, 2, 1], [2, 1, 1] ] ``` # Scenario Imagine a scenario where you are designing a puzzle generator that arranges tiles numbered with digits. The tiles may have some digits repeated. Your goal is to list all unique ways of arranging these tiles on a 1-D grid, ensuring no duplicate layouts. Implementing `unique_permutations` will help generate these unique arrangements considering the repeated numbers efficiently.","solution":"from itertools import permutations def unique_permutations(nums): Returns all unique permutations of a list that may contain duplicates. unique_perms = set(permutations(nums)) return [list(perm) for perm in unique_perms]"},{"question":"# Stooge Sort Enhancement Stooge Sort is known for its simplicity and inefficiency. Given its poor performance, enhance the implementation provided to make it more educational by adding the following features: 1. Ensure that the function keeps track of the number of comparisons made. 2. Improve the code readability by using clear variable names and additional comments. 3. Implement a function to handle invalid input, such as non-integer elements. 4. Provide a detailed `docstring` for your enhanced Stooge Sort function. **Function Signature**: ```python def enhanced_stoogesort(arr: list[int], l: int, h: int) -> tuple[list[int], int]: Perform Stooge Sort on the given array and return the sorted array along with the number of comparisons made. Parameters: arr (list[int]): The list of integers to sort. l (int): The starting index of the subarray to sort. h (int): The ending index of the subarray to sort. Returns: tuple[list[int], int]: A tuple where the first element is the sorted array and the second element is the number of comparisons made. def validate_input(arr: list) -> bool: Validate the input array to ensure all elements are integers. Parameters: arr (list): The list of elements to validate. Returns: bool: True if all elements are integers, False otherwise. ``` **Example**: ```python array = [1, 3, 64, 5, 7, 8] is_valid = validate_input(array) if is_valid: sorted_array, comparison_count = enhanced_stoogesort(array, 0, len(array)-1) print(\\"Sorted Array:\\", sorted_array) print(\\"Comparisons Made:\\", comparison_count) else: print(\\"Invalid input: all elements must be integers.\\") ``` **Constraints**: * The input list will contain at most 1000 elements (to prevent excessive recursion depth). * Each element in the list, if valid, will be an integer between -1000 and 1000. **Performance Requirements**: * Ensure that the function executes without exceeding the default recursion limit for Python. * Handle invalid inputs gracefully without crashing the program.","solution":"def enhanced_stoogesort(arr: list[int], l: int, h: int, comparisons: int = 0) -> tuple[list[int], int]: Perform Stooge Sort on the given array and return the sorted array along with the number of comparisons made. Parameters: arr (list[int]): The list of integers to sort. l (int): The starting index of the subarray to sort. h (int): The ending index of the subarray to sort. Returns: tuple[list[int], int]: A tuple where the first element is the sorted array and the second element is the number of comparisons made. if l >= h: return arr, comparisons comparisons += 1 if arr[l] > arr[h]: arr[l], arr[h] = arr[h], arr[l] if (h - l + 1) > 2: t = (h - l + 1) // 3 arr, comparisons = enhanced_stoogesort(arr, l, h - t, comparisons) arr, comparisons = enhanced_stoogesort(arr, l + t, h, comparisons) arr, comparisons = enhanced_stoogesort(arr, l, h - t, comparisons) return arr, comparisons def validate_input(arr: list) -> bool: Validate the input array to ensure all elements are integers. Parameters: arr (list): The list of elements to validate. Returns: bool: True if all elements are integers, False otherwise. return all(isinstance(x, int) for x in arr)"},{"question":"# Binary Search Implementation Challenge **Objective**: Implement the binary search algorithm in both iterative and recursive versions. Given a sorted array of integers and a target value, return the index at which the target is found. If the target does not exist in the array, return -1. **Function Signature**: ```python def iterative_binary_search(array: List[int], target: int) -> int: pass def recursive_binary_search(array: List[int], low: int, high: int, target: int) -> int: pass ``` **Input**: 1. `array`: A list of integers sorted in ascending order. 2. `target`: An integer to be searched within the array. 3. For the recursive function, the initial call will be with `low = 0` and `high = len(array) - 1`. **Output**: * The index of the target in the array if found. * `-1` if the target is not found. **Constraints**: * The function should have a logarithmic time complexity. * Avoid using built-in search functions. * The array length can be up to (10^6). * The integers in the array are within the range (-10^9) to (10^9). **Examples**: ```python # Example 1 iterative_binary_search([1, 2, 3, 4, 5], 3) # Output: 2 # Example 2 iterative_binary_search([1, 2, 3, 4, 5], 6) # Output: -1 # Example 3 recursive_binary_search([1, 2, 3, 4, 5], 0, 4, 4) # Output: 3 # Example 4 recursive_binary_search([1, 2, 3, 4, 5], 0, 4, 1) # Output: 0 ``` **Note**: * Ensure to handle edge cases such as empty arrays and arrays with one element. * Carefully manage array indices to avoid out-of-bound errors and infinite loops.","solution":"from typing import List def iterative_binary_search(array: List[int], target: int) -> int: Performs iterative binary search on a sorted array to find the index of the target value. Returns -1 if the target is not found. low, high = 0, len(array) - 1 while low <= high: mid = (low + high) // 2 if array[mid] == target: return mid elif array[mid] < target: low = mid + 1 else: high = mid - 1 return -1 def recursive_binary_search(array: List[int], low: int, high: int, target: int) -> int: Performs recursive binary search on a sorted array to find the index of the target value. Returns -1 if the target is not found. if low > high: return -1 mid = (low + high) // 2 if array[mid] == target: return mid elif array[mid] < target: return recursive_binary_search(array, mid + 1, high, target) else: return recursive_binary_search(array, low, mid - 1, target)"},{"question":"# Atbash Cipher Implementation Implement a function that translates an input string using the Atbash cipher, where each letter is replaced by its reverse in the alphabet. Non-alphabet characters should remain unchanged. ```python def atbash_cipher(message: str) -> str: Translate the input string using the Atbash cipher. Parameters: message (str): The string to be encoded. Returns: str: The encoded string. pass ``` # Input & Output * **Input**: A single string `message` which is a mix of alphabetic and non-alphabetic characters. * **Output**: A single string translated using the Atbash cipher, with non-alphabetic characters unaltered. # Constraints * The input string can contain both uppercase and lowercase alphabetic characters. * The input string can include spaces and punctuation, which should remain unchanged in the output. * The length of the input string will be between 0 and (10^6). # Examples Example 1 **Input**: `\\"Attack at dawn\\"` **Output**: `\\"Zggzxp zg wzdm\\"` Example 2 **Input**: `\\"Hello, World!\\"` **Output**: `\\"Svool, Dliow!\\"` Example 3 **Input**: `\\"\\"` **Output**: `\\"\\"` # Explanation In Example 1, `\'A\'` maps to `\'Z\'`, `\'t\'` maps to `\'g\'`, and the space remains unchanged. This pattern continues for the entire input string. In Example 2, `\'H\'` maps to `\'S\'`, `\'e\'` maps to `\'v\'`, and non-alphabetic characters such as `\',\'` and `\'!\'` remain unchanged.","solution":"def atbash_cipher(message: str) -> str: def translate_char(c): if \'A\' <= c <= \'Z\': return chr(25 - (ord(c) - ord(\'A\')) + ord(\'A\')) elif \'a\' <= c <= \'z\': return chr(25 - (ord(c) - ord(\'a\')) + ord(\'a\')) else: return c return \'\'.join(translate_char(c) for c in message)"},{"question":"# Question: Implementation of an Optimized Search Algorithm **Problem Statement**: You are provided with an array of integers. Your task is to implement a more efficient search algorithm than linear search by using binary search. Binary search works only on sorted arrays. If the array is not sorted, your function should first sort the array and then perform the binary search. **Function Signature**: ```python def optimized_search(array: List[int], query: int) -> int: Find the index of the query element in the sorted array. If the element couldn\'t be found, returns -1. ``` **Input**: - `array`: a list of integers - `query`: an integer to search for in the array **Output**: - Return the index of the query element in the sorted array, or -1 if the element is not found. **Constraints**: - The array can be empty. - The array may contain duplicates, but you should return the index of the first occurrence after sorting. **Example**: ``` Input: array = [5, 1, 8, 3, 2, 6], query = 3 Output: 2 Input: array = [1, 2, 3, 4, 5], query = 6 Output: -1 ``` **Requirements**: - The solution must be implemented with a time complexity of O(n log n) due to sorting and O(log n) for searching. - You need to handle cases where the array is unsorted by sorting it first before performing the binary search. **Hint**: Python has a built-in sorting function `sorted()` which you might find useful.","solution":"from typing import List def optimized_search(array: List[int], query: int) -> int: Find the index of the query element in the sorted array. If the element couldn\'t be found, returns -1. # First sort the array sorted_array = sorted(array) # Implement Binary Search left, right = 0, len(sorted_array) - 1 while left <= right: mid = (left + right) // 2 if sorted_array[mid] == query: # Since array might contain duplicates; # find the first occurrence after sorting while mid > 0 and sorted_array[mid - 1] == query: mid -= 1 return mid elif sorted_array[mid] < query: left = mid + 1 else: right = mid - 1 return -1"},{"question":"You are given an implementation of a Segment Tree that supports range queries and updates on an array efficiently. The Segment Tree can handle any commutative function expression. Your task is to extend this Segment Tree class with additional functionality and ensure robustness against edge cases. Part 1: Range Product Query Extend the `SegmentTree` class to include a method `range_product(l, r)` that returns the product of elements in the range `[l, r]`. The product should be computed using modulo (10^9 + 7). Part 2: Logging Mechanism Add a logging functionality to the `SegmentTree` class which logs any updates made to the tree. This should be done using a method `get_logs()` which returns a list of all updates in the format `(index, updated_value)`. Implementation Requirements: 1. **Function**: Extend the `SegmentTree` class with the following methods: - `range_product(l, r)` : Returns the product of elements in the range `[l, r]` modulo (10^9 + 7). - `get_logs()` : Returns a list of tuples containing index and updated value for each update operation. 2. **Constraints**: - Input array elements are non-negative integers and their length does not exceed (10^5). - Updates and queries are performed in any arbitrary order. 3. **Performance**: - Ensure that each query and update operation is efficient, adhering to the complexities of a Segment Tree [i.e., O(log N)]. Example: ```python # Creating Segment Tree with sum function arr = [1, 2, 3, 4, 5] sg_tree = SegmentTree(arr, lambda a, b: a + b) # Extending functionality print(sg_tree.range_product(1, 3)) # Expected: 24 (2 * 3 * 4 % 10^9 + 7) sg_tree.update(2, 6) print(sg_tree.get_logs()) # Expected: [(2, 6)] print(sg_tree.range_product(1, 3)) # Expected number to be 36 (2 * 6 * 4 % 10^9 + 7) ```","solution":"class SegmentTree: def __init__(self, data, func): Initializes the segment tree with \'data\', and segment tree will compute operation \'func\' over ranges. self.data = data self.func = func self.n = len(data) self.tree = [0] * (2 * self.n) # Segment tree array self.logs = [] # Logs for updates self._build() def _build(self): Builds the segment tree. # Insert leaf nodes in tree for i in range(self.n): self.tree[self.n + i] = self.data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = self.func(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, idx, value): Update the element at index \'idx\' to \'value\' and log the update. # Update the leaf node pos = idx + self.n self.tree[pos] = value self.logs.append((idx, value)) # Update internal nodes while pos > 1: pos //= 2 self.tree[pos] = self.func(self.tree[2 * pos], self.tree[2 * pos + 1]) def query(self, l, r): Query the function over the range [l, r). res = None l += self.n r += self.n while l < r: if l % 2: res = self.tree[l] if res is None else self.func(res, self.tree[l]) l += 1 if r % 2: r -= 1 res = self.tree[r] if res is None else self.func(res, self.tree[r]) l //= 2 r //= 2 return res def range_product(self, l, r): Returns the product of elements in the range [l, r] modulo 10^9 + 7. MOD = 10**9 + 7 res = 1 l += self.n r += self.n + 1 while l < r: if l % 2: res = (res * self.tree[l]) % MOD l += 1 if r % 2: r -= 1 res = (res * self.tree[r]) % MOD l //= 2 r //= 2 return res def get_logs(self): Returns a list of all updates in the format (index, updated_value). return self.logs"},{"question":"You are given a string `s` consisting of lowercase alphabets. Your task is to write a function `delete_reoccurring_characters` that removes any recurring character (subsequent occurrences of characters already seen) from the string and returns the resultant string with the first occurrence of every character remaining in the order they first appear. # Function Signature ```python def delete_reoccurring_characters(s: str) -> str: pass ``` # Input * A single string `s` (1 ≤ len(s) ≤ 1000) consisting only of lowercase English letters. # Output * A string with all recurring characters removed, retaining only the first occurrence of the characters. # Constraints * The input string will contain only lowercase alphabets. * The final output must preserve the order of characters as they appear in the input string. # Example ```python assert delete_reoccurring_characters(\\"google\\") == \\"gole\\" assert delete_reoccurring_characters(\\"abcd\\") == \\"abcd\\" assert delete_reoccurring_characters(\\"bookkeeper\\") == \\"bokepr\\" assert delete_reoccurring_characters(\\"aabbcc\\") == \\"abc\\" assert delete_reoccurring_characters(\\"\\") == \\"\\" assert delete_reoccurring_characters(\\"a\\") == \\"a\\" ``` # Performance Requirements * The solution must run efficiently within the constraints provided. * You should consider time and space complexity, aiming for O(n) time complexity. # Hint * Consider using an auxiliary data structure to keep track of characters that have already been added to the output string.","solution":"def delete_reoccurring_characters(s: str) -> str: seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"**Digit-wise Addition For Arbitrarily Large Numbers** You are given a non-negative integer represented as an array of digits, where each element in the array is a single non-negative digit. The digits are stored in big-endian order, meaning the most significant digit is at the beginning of the list. Your task is to increment the integer by one and return the resulting array of digits. # Function Signature ```python def plus_one(digits: List[int]) -> List[int]: ``` # Input * `digits`: A list of integers where each integer `0 <= digits[i] <= 9` represents part of the non-negative integer. The list will contain at least one digit. # Output * A list of integers representing the incremented number. # Constraints * The input list will consist only of non-negative digits (`0-9`). * The input list will have a length in the range [1, 10^4]. * You may not use built-in functions that directly convert the list to a single integer or handle arbitrary precision integers directly. # Performance Requirements * Your solution must work efficiently with a time complexity of O(n) and a space complexity of O(1) (excluding the space for the input and output). # Example ```python assert plus_one([1, 2, 3]) == [1, 2, 4] assert plus_one([9, 9, 9]) == [1, 0, 0, 0] assert plus_one([0]) == [1] assert plus_one([9]) == [1, 0] ``` # Explanation 1. For the input [1, 2, 3], adding one results in [1, 2, 4]. 2. For the input [9, 9, 9], adding one results in [1, 0, 0, 0] due to carrying over. 3. For the input [0], adding one results in [1]. 4. For the input [9], adding one results in [1, 0] due to carrying over. Your solution should handle the edge cases appropriately and perform the calculations efficiently.","solution":"def plus_one(digits): Increment the integer represented by an array of digits by one. n = len(digits) # Traverse the list from the end for i in range(n-1, -1, -1): if digits[i] < 9: digits[i] += 1 return digits digits[i] = 0 # If we are here, that means we have a carry that went through all digits return [1] + digits"},{"question":"Question: International Morse Code defines a standard encoding where each letter maps to a series of dots and dashes. Here is the full table for the English alphabet: ```plaintext \'a\':\\".-\\", \'b\':\\"-...\\", \'c\':\\"-.-.\\", \'d\': \\"-..\\", \'e\':\\".\\", \'f\':\\"..-.\\", \'g\':\\"--.\\", \'h\':\\"....\\", \'i\':\\"..\\", \'j\':\\".---\\", \'k\':\\"-.-\\", \'l\':\\".-..\\", \'m\':\\"--\\", \'n\':\\"-.\\", \'o\':\\"---\\", \'p\':\\".--.\\", \'q\':\\"--.-\\", \'r\':\\".-.\\", \'s\':\\"...\\", \'t\':\\"-\\", \'u\':\\"..-\\", \'v\':\\"...-\\", \'w\':\\".--\\", \'x\':\\"-..-\\", \'y\':\\"-.--\\", \'z\':\\"--..\\" ``` Create a Python function `unique_morse_representations(words: List[str]) -> int` that takes a list of words and returns the number of unique Morse code transformations for those words. **Function Signature:** ```python def unique_morse_representations(words: List[str]) -> int: ``` **Input:** * `words`: A list of strings representing the words (1 ≤ words.length ≤ 100, 1 ≤ words[i].length ≤ 12) **Output:** * An integer representing the number of unique Morse code transformations. **Example:** ```python words = [\\"gin\\", \\"zen\\", \\"gig\\", \\"msg\\"] output = unique_morse_representations(words) print(output) # 2 ``` **Explanation:** - The transformation of each word is: - \\"gin\\" -> \\"--...-.\\" - \\"zen\\" -> \\"--...-.\\" - \\"gig\\" -> \\"--...--.\\" - \\"msg\\" -> \\"--...--.\\" - There are 2 unique transformations: \\"--...-.\\" and \\"--...--.\\" **Constraints:** * Words contain only lowercase English letters. **Hints:** - Use a dictionary to map each letter to its Morse code representation. - Convert each word to its Morse code transformation. - Use a set to collect unique transformations for efficiency.","solution":"from typing import List def unique_morse_representations(words: List[str]) -> int: morse_code_dict = { \'a\': \\".-\\", \'b\': \\"-...\\", \'c\': \\"-.-.\\", \'d\': \\"-..\\", \'e\': \\".\\", \'f\': \\"..-.\\", \'g\': \\"--.\\", \'h\': \\"....\\", \'i\': \\"..\\", \'j\': \\".---\\", \'k\': \\"-.-\\", \'l\': \\".-..\\", \'m\': \\"--\\", \'n\': \\"-.\\", \'o\': \\"---\\", \'p\': \\".--.\\", \'q\': \\"--.-\\", \'r\': \\".-.\\", \'s\': \\"...\\", \'t\': \\"-\\", \'u\': \\"..-\\", \'v\': \\"...-\\", \'w\': \\".--\\", \'x\': \\"-..-\\", \'y\': \\"-.--\\", \'z\': \\"--..\\" } unique_transformations = set() for word in words: morse_transformation = \'\'.join(morse_code_dict[char] for char in word) unique_transformations.add(morse_transformation) return len(unique_transformations)"},{"question":"# Decoding Encrypted Messages Problem Statement A message containing letters from A-Z is encoded to numbers using the following mapping: ``` \'A\' -> 1 \'B\' -> 2 ... \'Z\' -> 26 ``` Given an encoded message containing digits, determine the total number of ways to decode it. For example: Given encoded message `\\"12\\"`, it could be decoded as `\\"AB\\"` (1 2) or `\\"L\\"` (12). Hence, the number of ways decoding `\\"12\\"` is 2. Function Signature ```python def num_decodings(enc_mes: str) -> int: :param enc_mes: str - input encoded message :return: int - number of ways to decode the message ``` Input * `enc_mes` (string): Encoded message containing only digits \'0\' to \'9\'. * Constraints: * 1 ≤ `len(enc_mes)` ≤ 100 Output * Return an integer representing the number of ways to decode the given message. Examples 1. `num_decodings(\\"12\\")` should return `2` 2. `num_decodings(\\"226\\")` should return `3` ([\\"2\\" \\"26\\"], [\\"22\\" \\"6\\"], [\\"2\\" \\"2\\" \\"6\\"]). 3. `num_decodings(\\"0\\")` should return `0` Explanation 1. For input `\\"12\\"`, it can be decoded as: * `\\"AB\\"` (1 2) * `\\"L\\"` (12) So, there are 2 ways. 2. For input `\\"226\\"`, it can be decoded as: * `\\"BZ\\"` (2 26) * `\\"VF\\"` (22 6) * `\\"BBF\\"` (2 2 6) So, there are 3 ways. Additional Requirements * The implementation must have a time complexity of O(n). * Ensure to handle edge cases like strings starting with \'0\' properly.","solution":"def num_decodings(enc_mes: str) -> int: :param enc_mes: str - input encoded message :return: int - number of ways to decode the message if not enc_mes or enc_mes[0] == \'0\': return 0 n = len(enc_mes) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): one_digit = int(enc_mes[i - 1]) two_digits = int(enc_mes[i - 2:i]) if 1 <= one_digit <= 9: dp[i] += dp[i - 1] if 10 <= two_digits <= 26: dp[i] += dp[i - 2] return dp[n]"},{"question":"# Question: Implement Directory and File Name Split Function **Context**: You are working on a file management system where users frequently upload files. You need to store the directory path and the file name separately. To achieve this, you need to write a function that splits a full file path or URL into two parts: the directory path and the file name. **Task**: Write a function `split_path(path: str) -> list[str]` that splits the given path into a list of two parts: the directory path (up to but not including the last \'/\') and the file name (everything after the last \'/\'). **Input**: * `path` (string): A Unix-style file path or URL consisting of \'/\' separators. **Output**: * List of strings: A list containing two elements: 1. The directory path as the first element. 2. The file name as the second element. **Constraints**: * The path string may include but not be limited to: * Empty string. * Paths with or without trailing slashes. * Paths with no slashes at all. * The function should handle edge cases gracefully. **Examples**: 1. `split_path(\\"https://algorithms/unix/test.py\\")` should return `[\\"https://algorithms/unix\\", \\"test.py\\"]` 2. `split_path(\\"algorithms/unix/test.py\\")` should return `[\\"algorithms/unix\\", \\"test.py\\"]` 3. `split_path(\\"test.py\\")` should return `[\\"\\", \\"test.py\\"]` 4. `split_path(\\"\\")` should return `[\\"\\", \\"\\"]` 5. `split_path(\\"a/b/c/d/\\")` should return `[\\"a/b/c/d\\", \\"\\"]` **Performance Requirements**: Ensure the function runs efficiently even for paths exceeding 1000 characters. **Note**: Do not use external libraries; rely purely on native Python functionalities.","solution":"def split_path(path: str) -> list[str]: Splits a given path into a directory path and a file name. Parameters: path (str): A Unix-style file path or URL. Returns: list[str]: A list containing the directory path and the file name. if \'/\' not in path: return [\\"\\", path] # Finding the last occurrence of \'/\' last_slash_index = path.rfind(\'/\') # Directory part is everything before the last \'/\' directory = path[:last_slash_index] # File part is everything after the last \'/\' file_name = path[last_slash_index + 1:] return [directory, file_name]"},{"question":"**Problem Statement: Graph Traversal Analysis and Implementation** Alice is working on a project that involves traversing a social network graph to determine connections and the shortest path to friends. As part of this project, she needs to implement traversal methods to explore the graph efficiently. Your task is to write Python functions that perform Depth-First Search (DFS) and Breadth-First Search (BFS) on a given graph. You should implement both iterative and recursive versions for DFS and an iterative version for BFS. # Function Signatures: 1. `def dfs_traverse(graph: dict, start: str) -> set:` 2. `def bfs_traverse(graph: dict, start: str) -> set:` 3. `def dfs_traverse_recursive(graph: dict, start: str, visited: set = None) -> set:` # Input: - `graph` (dict): A dictionary representation of a graph where keys are node identifiers (strings) and values are lists of adjacent nodes (strings). - `start` (str): The node from which the traversal should begin. # Output: - A set of all nodes visited during the traversal. # Constraints: - The graph can have at most (10^5) nodes and (2 times 10^5) edges. - All node identifiers are non-empty strings of small length. # Requirements: 1. Implement DFS using an iterative approach with a stack. 2. Implement recursive DFS. 3. Implement BFS using an iterative approach with a queue. 4. Ensure all functions return the set of visited nodes in the order they were visited. # Example: ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\'] } start_node = \'A\' # Should return sets of visited nodes print(dfs_traverse(graph, start_node)) # {\'A\', \'B\', \'E\', \'F\', \'C\', \'D\'} print(dfs_traverse_recursive(graph, start_node)) # {\'A\', \'B\', \'D\', \'E\', \'F\', \'C\'} print(bfs_traverse(graph, start_node)) # {\'A\', \'B\', \'C\', \'D\', \'E\', \'F\'} ``` # Notes: - You must handle graphs with cycles appropriately to avoid infinite loops. - Ensure that your solution is efficient and adheres to the provided complexity constraints.","solution":"def dfs_traverse(graph, start): Perform a depth-first search (DFS) traversal iteratively using a stack. :param graph: Dictionary - graph representation :param start: String - start node for the traversal :return: Set - visited nodes visited = set() stack = [start] while stack: node = stack.pop() if node not in visited: visited.add(node) # Add the unvisited neighbors to the stack stack.extend(neigh for neigh in graph[node] if neigh not in visited) return visited def bfs_traverse(graph, start): Perform a breadth-first search (BFS) traversal iteratively using a queue. :param graph: Dictionary - graph representation :param start: String - start node for the traversal :return: Set - visited nodes visited = set() queue = [start] while queue: node = queue.pop(0) if node not in visited: visited.add(node) # Add the unvisited neighbors to the queue queue.extend(neigh for neigh in graph[node] if neigh not in visited) return visited def dfs_traverse_recursive(graph, start, visited=None): Perform a depth-first search (DFS) traversal recursively. :param graph: Dictionary - graph representation :param start: String - start node for the traversal :param visited: Set (default None) - set of visited nodes :return: Set - visited nodes if visited is None: visited = set() visited.add(start) for neighbor in graph[start]: if neighbor not in visited: dfs_traverse_recursive(graph, neighbor, visited) return visited"},{"question":"# Binary Tree to Sorted Doubly Linked List You are given the root of a binary search tree (BST). Write a function `convert_bst_to_dll(root)` that will convert this binary search tree to a sorted doubly linked list. The resulting doubly linked list should be sorted in ascending order as per the in-order traversal of the tree. # Input * The input is a `TreeNode` object representing the root of the binary search tree. * A TreeNode is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Output * Return the head of the doubly linked list. # Constraints * The number of nodes in the tree is in the range `[0, 1000]`. * -10^5 <= Node.val <= 10^5 # Performance Requirements * Your algorithm should run in O(N) time complexity and use O(H) space complexity, where N is the number of nodes and H is the height of the tree. # Example ```python # Example tree node definition class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def display_dll(head): result = [] while head: result.append(head.val) head = head.right return result # Example usage root = TreeNode(4) root.left = TreeNode(2) root.right = TreeNode(5) root.left.left = TreeNode(1) root.left.right = TreeNode(3) head_dll = convert_bst_to_dll(root) print(display_dll(head_dll)) # Output: [1, 2, 3, 4, 5] ``` # Function Signature ```python def convert_bst_to_dll(root: TreeNode) -> TreeNode: # Your implementation here ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def convert_bst_to_dll(root: TreeNode) -> TreeNode: Convert a BST to a sorted doubly linked list. if not root: return None def in_order_traversal(node): nonlocal last_node, head if not node: return # Traverse the left subtree in_order_traversal(node.left) # Process the current node if last_node: last_node.right = node node.left = last_node else: head = node last_node = node # Traverse the right subtree in_order_traversal(node.right) head = last_node = None in_order_traversal(root) return head"},{"question":"Objective Implement a function to find the k closest points to the origin from a given list of points using an efficient algorithm. Your function should leverage data structures and algorithms appropriately to maintain efficiency and correctness. Function Signature ```python def k_closest(points: List[Tuple[int, int]], k: int, origin: Tuple[int, int] = (0, 0)) -> List[Tuple[int, int]]: pass ``` Input Format * `points`: A list containing tuples of two integers, representing the coordinates of each point `[Tuple[int, int]]`. * `k`: An integer representing the number of closest points to find. * `origin`: An optional tuple representing the coordinates of the origin point, defaulting to `(0, 0)`. Output Format * A list of tuples, representing the k closest points to the origin in any order. Constraints * `1 <= len(points) <= 10^4` * `1 <= k <= len(points)` Requirements * The solution must run efficiently for large lists of points. * Handle edge cases where all points have the same distance. * Ensure that the program does not use excessive memory or computational resources. Performance Expectations * Expected time complexity: O(k + (n-k)log(k)) * Expected space complexity: O(k) Example ```python points = [(1, 2), (2, 3), (3, 4), (0, 1)] k = 2 output = k_closest(points, k) # Example output: [(1, 2), (0, 1)] ``` Notes * Implement the function using a heap to ensure that your solution meets the performance requirements. * Correctness will be validated based on your implementation and its ability to handle the specified constraints and edge cases.","solution":"import heapq import math from typing import List, Tuple def k_closest(points: List[Tuple[int, int]], k: int, origin: Tuple[int, int] = (0, 0)) -> List[Tuple[int, int]]: Find the k closest points to the origin. # Function to calculate the squared Euclidean distance def distance_squared(point): return (point[0] - origin[0]) ** 2 + (point[1] - origin[1]) ** 2 # Create a max-heap of size k max_heap = [] for point in points: dist = distance_squared(point) if len(max_heap) < k: heapq.heappush(max_heap, (-dist, point)) else: heapq.heappushpop(max_heap, (-dist, point)) # Extract the points from the heap closest_points = [heapq.heappop(max_heap)[1] for _ in range(len(max_heap))] return closest_points"},{"question":"# Smallest Letter Greater Than Target **Scenario**: You are designing a letter-based cyclic schedule for a system that processes tasks marked with single lowercase letters. The lists of scheduled letters are always sorted alphabetically. **Task**: Write a function `next_greatest_letter(letters, target)` to find the smallest letter in the list `letters` that is strictly greater than the given `target` letter. The letters wrap around, meaning if `target` is the highest letter \'z\' in `letters`, the result should be the smallest element in the list. The list `letters` is always sorted at initialization. # Function Signature: ```python def next_greatest_letter(letters: List[str], target: str) -> str: ``` # Input: - `letters`: A sorted list of lowercase letters, `letters` (1 <= len(letters) <= 104) - `target`: A single lowercase letter # Output: - Return the smallest letter in `letters` that is greater than `target`. # Constraints: - `letters` will not have duplicates. - The function should execute with time complexity better than O(N). # Example: ```python # Example 1 letters = [\\"c\\", \\"f\\", \\"j\\"] target = \\"a\\" print(next_greatest_letter(letters, target)) # Expected output: \\"c\\" # Example 2 letters = [\\"c\\", \\"f\\", \\"j\\"] target = \\"c\\" print(next_greatest_letter(letters, target)) # Expected output: \\"f\\" # Example 3 letters = [\\"c\\", \\"f\\", \\"j\\"] target = \\"d\\" print(next_greatest_letter(letters, target)) # Expected output: \\"f\\" # Example 4 letters = [\\"c\\", \\"f\\", \\"j\\"] target = \\"j\\" print(next_greatest_letter(letters, target)) # Expected output: \\"c\\" ``` **Requirements**: - You are encouraged to use binary search approach. - Your implementation should handle wrap-around properly.","solution":"from typing import List def next_greatest_letter(letters: List[str], target: str) -> str: Finds the smallest letter in the list `letters` that is greater than the given `target` letter. The letters wrap around, meaning if `target` is the highest letter \'z\' in `letters`, the result should be the smallest element in the list. Parameters: letters (List[str]): A sorted list of lowercase letters. target (str): A single lowercase letter. Returns: str: The smallest letter that is greater than `target`. left, right = 0, len(letters) - 1 # If target is greater than or equal to the last element, wrap around to the first element. if target >= letters[-1]: return letters[0] # Binary search to find the element while left < right: mid = left + (right - left) // 2 if letters[mid] > target: right = mid else: left = mid + 1 return letters[left]"},{"question":"You are tasked with implementing a Shell Sort algorithm to help the data processing team efficiently sort their moderately large datasets. Shell Sort is chosen because of its performance benefits over other O(n^2) algorithms and its low memory overhead. # Function Signature ```python def shell_sort(arr: List[int]) -> List[int]: ``` # Input * A list `arr` of integers where `1 <= len(arr) <= 1000`. # Output * A list of integers sorted in ascending order. # Constraints * The sorting should be performed in-place to satisfy the space complexity constraint. * Consider optimizing the performance with a better gap sequence. # Example ```python assert shell_sort([12, 34, 54, 2, 3]) == [2, 3, 12, 34, 54] assert shell_sort([5, 3, 1, 2, 4]) == [1, 2, 3, 4, 5] ``` # Performance Requirements * Implement an optimized Shell Sort with a better-than-O(n^2) average time complexity if possible. # Additional Instructions * Ensure your implementation handles edge cases effectively. * Avoid using any built-in sorting functions directly.","solution":"def shell_sort(arr): Perform an in-place shell sort on the list `arr` and return the sorted list. n = len(arr) gap = n // 2 # Initial gap size. while gap > 0: for i in range(gap, n): # From gap to the end of the list. temp = arr[i] j = i while j >= gap and arr[j - gap] > temp: arr[j] = arr[j - gap] j -= gap arr[j] = temp gap //= 2 # Reduce the gap size. return arr"},{"question":"Permutation Generator You are tasked with implementing a function that generates all possible permutations of a given list of distinct integers. Your implementation should handle both recursive and iterative approaches. Ensure your implementation covers edge cases, performance considerations, and handles input constraints efficiently. Function Definition ```python def generate_permutations(elements: List[int]) -> List[List[int]]: Generates all possible permutations of a given list of distinct integers. Args: elements (List[int]): Input list of distinct integers. Returns: List[List[int]]: A list containing all permutations of the input list. pass ``` # Input and Output * **Input**: A list `elements` containing `n` distinct integers (0 <= n <= 8). * **Output**: A list of lists, where each inner list is a unique permutation of the input list. # Constraints * The input list will contain distinct integers. * The output should be sorted in lexicographical order. # Examples ```python assert generate_permutations([1, 2, 3]) == [ [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1] ] assert generate_permutations([0, 1]) == [ [0, 1], [1, 0] ] ``` # Performance Requirements * Aim to optimize both time and space complexity as much as possible within the given constraints. Scenario/Context Imagine you\'re working on a puzzle where you need to test all possible configurations of a set of pieces. To facilitate this, you need a method to generate all unique ways to arrange these pieces, which is what your function should achieve. Additionally, the permutations should be sorted to maintain consistency in evaluation.","solution":"from typing import List def generate_permutations(elements: List[int]) -> List[List[int]]: Generates all possible permutations of a given list of distinct integers. Args: elements (List[int]): Input list of distinct integers. Returns: List[List[int]]: A list containing all permutations of the input list. def permute(nums): if not nums: return [[]] permutations = [] for i in range(len(nums)): remaining = nums[:i] + nums[i+1:] for p in permute(remaining): permutations.append([nums[i]] + p) return permutations return sorted(permute(elements))"},{"question":"# Bit Manipulation Assessment Problem Statement You are given a 32-bit signed integer. Your task is to write a function that determines if a given bit is set in the integer. Additionally, implement functions to set, clear, and update specific bits. You will then use these functions to parse and determine specific properties of integer-to-binary conversions. Write the following functions: 1. `get_bit(num, i)`: Returns whether the bit at position `i` of integer `num` is set (returns `True` or `False`). 2. `set_bit(num, i)`: Returns an integer with the bit at position `i` set to 1. 3. `clear_bit(num, i)`: Returns an integer with the bit at position `i` cleared to 0. 4. `update_bit(num, i, bit)`: Returns an integer with the bit at position `i` updated to the given bit value (0 or 1). **Function Signatures**: ```python def get_bit(num: int, i: int) -> bool: pass def set_bit(num: int, i: int) -> int: pass def clear_bit(num: int, i: int) -> int: pass def update_bit(num: int, i: int, bit: int) -> int: pass ``` Example Usage ```python # Example integer representation: num = 42 (binary: 101010) num = 42 i = 1 print(get_bit(num, i)) # True, since the second least significant bit is 1 (101010) print(set_bit(num, 1)) # Still 42 as the bit is already set print(clear_bit(num, 3)) # Returns 34, as the fourth least significant bit (index 3) is cleared (100010) print(update_bit(num, 2, 1)) # Returns 46, as the third least significant bit (index 2) is set to 1 (101110) print(update_bit(num, 2, 0)) # Returns 42, as the third least significant bit (index 2) is set to 0 stays the same ``` Constraints: * `num` will be a 32-bit signed integer, i.e., -2^31 <= num <= 2^31 - 1. * `i` will be a non-negative integer and must be less than 32. * `bit` will be either 0 or 1. Ensure your implementation handles all edge cases gracefully and is efficient with respect to time and space complexity.","solution":"def get_bit(num: int, i: int) -> bool: Returns whether the bit at position `i` of integer `num` is set (returns `True` or `False`). return (num & (1 << i)) != 0 def set_bit(num: int, i: int) -> int: Returns an integer with the bit at position `i` set to 1. return num | (1 << i) def clear_bit(num: int, i: int) -> int: Returns an integer with the bit at position `i` cleared to 0. return num & ~(1 << i) def update_bit(num: int, i: int, bit: int) -> int: Returns an integer with the bit at position `i` updated to the given bit value (0 or 1). mask = ~(1 << i) return (num & mask) | (bit << i)"},{"question":"**Scenario**: You are developing a signal processing module that continuously logs integer signals. Due to possible noise during transmission, occasionally, an integer may be dropped. Your task is to extract the missing signal identifier from a logged sequence. # Problem Description Implement a function `find_missing_signal` to identify the missing signal identifier from a given sequence of unique integers ranging from `0` to `n` in random order. If no numbers are missing, the function should return the next number in the sequence. Function Signature ```python def find_missing_signal(nums: List[int]) -> int: ``` Input * `nums`: A list of unique integers ranging `[0, n]` (0 ≤ `nums[i]` ≤ `n`). The list contains `n` elements with one number missing. Output * Return the missing integer in the sequence if a number is missing, else return `n + 1`. Constraints * Your solution should run in O(n) time complexity and use O(1) additional space. # Example ```python # Example 1 # Input: nums = [3, 0, 1] # Output: 2 # Example 2 # Input: nums = [0, 1] # Output: 2 # Example 3 # Input: nums = [9,6,4,2,3,5,7,0,1] # Output: 8 ``` Implement the function keeping in mind edge cases such as empty list inputs and single-element lists.","solution":"def find_missing_signal(nums): Given a list of unique integers ranging from 0 to n with exactly one missing, find and return the missing integer. n = len(nums) # Calculate the expected sum of numbers from 0 to n expected_sum = n * (n + 1) / 2 # Calculate the actual sum of numbers in the list actual_sum = sum(nums) # The difference is the missing number return int(expected_sum - actual_sum)"},{"question":"# Unique BSTs - Counting Algorithm Context: You are tasked with determining the number of structurally unique Binary Search Trees (BSTs) that can be constructed using `n` distinct nodes (with values ranging from 1 to `n`). Objective: Write a function `count_unique_bsts(n: int) -> int` that computes the number of structurally unique BSTs which can store values from `1` to `n`. Details: - **Input**: A single integer `n` where `0 <= n <= 18`. - **Output**: A single integer representing the number of unique BSTs that can be formed with `n` nodes. # Constraints: - Time complexity should be ideally O(n^2). - Space complexity should not exceed O(n). Your function will be evaluated on multiple test cases, including the following considerations: - Handling of the smallest (`n=0`) and largest (`n=18`) possible values efficiently. - Ensuring correctness through the principles of dynamic programming applied on the problem. # Example: ```python assert count_unique_bsts(3) == 5 # As there are 5 unique BSTs for n=3. assert count_unique_bsts(1) == 1 # Only one unique BST for n=1. assert count_unique_bsts(0) == 1 # By definition, there is one empty tree. ``` Complete the implementation based on the provided information, ensuring the solution adheres to constraints and efficiently solves the problem.","solution":"def count_unique_bsts(n: int) -> int: Returns the number of structurally unique BSTs that can be constructed with n nodes. if n == 0: return 1 dp = [0] * (n + 1) dp[0] = 1 # Base case: one empty tree for i in range(1, n + 1): for j in range(1, i + 1): dp[i] += dp[j - 1] * dp[i - j] return dp[n]"},{"question":"# Resizable Hash Table with Custom Load Factor You are required to implement a resizable hash table with a custom load factor threshold. The hash table should follow the fundamental principles of hashing, collision resolution through linear probing, and dynamic resizing. Here are the requirements and specifications for your task: # Requirements 1. Implement a class `CustomHashTable`. 2. The dictionary should resize itself when the load factor exceeds a given threshold. 3. Collision resolution must be handled via linear probing. 4. Provide functionalities to add new key-value pairs, retrieve values by keys, and remove key-value pairs. # Specifications Class: `CustomHashTable` * **Constructor**: `__init__(self, initial_size=16, load_factor=0.75)` * Initializes the hash table with a given initial size and load factor. * **Methods**: * `put(self, key, value)`: Inserts a key-value pair. Resizes the table if the current load factor exceeds the specified threshold. * `get(self, key)`: Retrieves the value associated with the given key or returns `None` if the key is absent. * `del_(self, key)`: Deletes the key-value pair associated with the key. * `resize(self)`: Increases the size of the table and rehashes all existing key-value pairs. * `hash(self, key)`: Computes the hash index for a given key. * `rehash(self, old_hash)`: Computes the next index in case of a collision. # Constraints * Keys and values are both integers. * The table should grow by doubling its size. # Example ```python # Usage example: htable = CustomHashTable(initial_size=8, load_factor=0.75) htable.put(1, 10) htable.put(2, 20) htable.put(3, 30) assert htable.get(1) == 10 assert htable.get(4) == None htable.del_(2) assert htable.get(2) == None ``` # Notes 1. Ensure that your implementation efficiently handles collisions and maintains the average case time complexities. 2. Thorough handling of edge cases like duplicate key insertions and deletions is expected. 3. Optimize the rehashing process to minimize the performance impact during resizing.","solution":"class CustomHashTable: def __init__(self, initial_size=16, load_factor=0.75): self.initial_size = initial_size self.load_factor = load_factor self.size = initial_size self.count = 0 self.table = [None] * initial_size def put(self, key, value): if self.count / self.size >= self.load_factor: self.resize() index = self.hash(key) while self.table[index] is not None: if self.table[index][0] == key: self.table[index] = (key, value) return index = self.rehash(index) self.table[index] = (key, value) self.count += 1 def get(self, key): index = self.hash(key) while self.table[index] is not None: if self.table[index][0] == key: return self.table[index][1] index = self.rehash(index) return None def del_(self, key): index = self.hash(key) while self.table[index] is not None: if self.table[index][0] == key: self.table[index] = None self.count -= 1 self.rehash_deleted_item(index) return index = self.rehash(index) def resize(self): old_table = self.table self.size *= 2 self.table = [None] * self.size self.count = 0 for item in old_table: if item is not None: self.put(item[0], item[1]) def hash(self, key): return key % self.size def rehash(self, old_hash): return (old_hash + 1) % self.size def rehash_deleted_item(self, index): next_index = self.rehash(index) while self.table[next_index] is not None: key, value = self.table[next_index] self.table[next_index] = None self.count -= 1 self.put(key, value) next_index = self.rehash(next_index)"},{"question":"# Context: You are tasked with developing a feature in a software application which involves analyzing all subsets of a given set of distinct integers. Given the importance of efficiency and correctness, you need to demonstrate a thorough understanding of algorithm design by implementing a function to generate all possible subsets of an input list of distinct integers. # Problem Statement: Write a function `generate_subsets(nums: List[int]) -> Set[Tuple[int]]` that takes a list of distinct integers `nums` and returns a set of tuples, each tuple representing a possible subset of `nums`. # Input and Output Formats: - **Input**: A list `nums` of distinct integers (1 <= len(nums) <= 15). - **Output**: A set of tuples, where each tuple is a subset of `nums`. # Constraints: - The elements in `nums` are unique. - The elements in the subsets can be of any order. - The solution set must not contain duplicate subsets. - Aim to achieve a solution with time complexity O(n * 2^n), where n is the length of `nums`. # Examples: - Example 1: - Input: `nums = [1, 2, 3]` - Output: `{(), (1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)}` - Example 2: - Input: `nums = [4, 5]` - Output: `{(), (4,), (5,), (4, 5)}` # Function Signature: ```python from typing import List, Set, Tuple def generate_subsets(nums: List[int]) -> Set[Tuple[int]]: pass ``` # Notes: - Pay close attention to the edge cases and ensure the function returns all subsets correctly. - Utilize bit manipulation as the underlying method for solving the problem.","solution":"from typing import List, Set, Tuple from itertools import chain, combinations def generate_subsets(nums: List[int]) -> Set[Tuple[int]]: Generates all possible subsets of a given list of distinct integers. Args: nums (List[int]): A list of distinct integers. Returns: Set[Tuple[int]]: A set of tuples, each tuple representing a possible subset of nums. # Using itertools combinations to generate all possible subsets return set(chain.from_iterable(combinations(nums, r) for r in range(len(nums)+1)))"},{"question":"# Question Alice and Bob want to securely share a secret key using the Diffie-Hellman key exchange algorithm. You are provided with the following functions to help you build the system: 1. `prime_check(num)`: Checks if a number is a prime. 2. `find_primitive_root(n)`: Finds all primitive roots of a given number `n`. 3. `euler_totient(n)`: Calculates Euler\'s totient function of `n`. # Task Implement the function `secure_key_exchange(a, p)` which takes: * `a` (an integer ensuring `a` is a primitive root of `p`) * `p` (a large prime number) The function should: 1. Validate that `p` is a prime number. 2. Validate that `a` is a primitive root of `p`. 3. Generate Alice\'s and Bob\'s private keys in the range (1, p-1) inclusively. 4. Compute their corresponding public keys. 5. Generate and verify the computed shared secret keys. # Expected Input and Output * **Input**: Two integers `a`, `p` * **Output**: Two integers representing Alice\'s and Bob\'s computed shared secret key, respectively. If any validation fails, return \'Invalid Input\'. # Constraints * (2 <= a < p) * (p < 10^6) # Example ```python result = secure_key_exchange(2, 13) print(result) # Output: (Shared Secret Key, Shared Secret Key) or \'Invalid Input\' ``` # Additional Notes * You may use Python\'s `random` module to generate private keys. * Pay attention to edge cases such as non-prime `p` or `a` not being a primitive root of `p`.","solution":"import random def prime_check(num): Check if a number is a prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def euler_totient(n): Calculates Euler\'s totient function of n. result = n p = 2 while p * p <= n: if n % p == 0: while n % p == 0: n //= p result -= result // p p += 1 if n > 1: result -= result // n return result def find_primitive_root(n): Finds all primitive roots of a given number n. if not prime_check(n): return [] phi = euler_totient(n) factors = set() i = 2 while i * i <= phi: if phi % i == 0: factors.add(i) if i != phi // i: factors.add(phi // i) i += 1 factors.add(phi) roots = [] for r in range(2, n): flag = True for factor in factors: if pow(r, phi // factor, n) == 1: flag = False break if flag: roots.append(r) return roots def secure_key_exchange(a, p): Securely share a secret key using the Diffie-Hellman key exchange algorithm. if not prime_check(p): return \'Invalid Input\' if a < 2 or a >= p: return \'Invalid Input\' primitive_roots = find_primitive_root(p) if a not in primitive_roots: return \'Invalid Input\' alice_private_key = random.randint(1, p - 1) bob_private_key = random.randint(1, p - 1) alice_public_key = pow(a, alice_private_key, p) bob_public_key = pow(a, bob_private_key, p) alice_shared_secret = pow(bob_public_key, alice_private_key, p) bob_shared_secret = pow(alice_public_key, bob_private_key, p) if alice_shared_secret != bob_shared_secret: return \'Invalid Input\' return (alice_shared_secret, bob_shared_secret)"},{"question":"# Insertion Sort Algorithm Challenge **Context**: You are a software developer tasked with improving a legacy system by optimizing its sorting routines. The system currently processes small, frequently nearly sorted datasets that need sorting as promptly as possible. **Task**: Implement a function `optimized_insertion_sort(arr)` which sorts an input array of integers using the Insertion Sort algorithm. Additionally, extend this basic function to handle and improve sorting for nearly sorted arrays by reducing redundant movements. # Function Signature: ```python def optimized_insertion_sort(arr: List[int]) -> List[int]: ``` **Input**: - A list of integers `arr` where ( 1 leq arr leq 1000 ) **Output**: - A sorted list of integers in ascending order. **Constraints**: - The array length will not exceed 1000 elements. - Optimize the function to handle scenarios where the list is nearly sorted efficiently. **Performance Requirements**: - Ensure the function runs within O(n) best-case time complexity and O(n^2) average/worst-case time complexity. # Testing Cases: 1. `optimized_insertion_sort([5, 2, 9, 1, 5, 6])` should return `[1, 2, 5, 5, 6, 9]` 2. `optimized_insertion_sort([1, 2, 3, 4, 5])` should return `[1, 2, 3, 4, 5]` 3. `optimized_insertion_sort([5, 4, 3, 2, 1])` should return `[1, 2, 3, 4, 5]` 4. `optimized_insertion_sort([])` should return `[]` 5. `optimized_insertion_sort([2, 3, 5, 4, 6])` should return `[2, 3, 4, 5, 6]` Ensure your implementation correctly handles these edge cases and efficiently sorts the nearly sorted datasets.","solution":"from typing import List def optimized_insertion_sort(arr: List[int]) -> List[int]: Sorts an input array of integers using the Insertion Sort algorithm. Optimized for nearly sorted arrays by reducing redundant movements. n = len(arr) for i in range(1, n): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position while j >= 0 and arr[j] > key: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"# Context: You are asked to implement a class `CustomHashTable` that extends the provided `ResizableHashTable` class. The extension should introduce a new feature: automatically increasing the table by a factor of 3 instead of 2 when the load factor reaches 3/4. Additionally, you\'ve been tasked with implementing a feature for tracking and returning the number of resizes that have occurred. # Task: Implement the `CustomHashTable` class with the following requirements: 1. Inherits from `ResizableHashTable` provided in the code snippet. 2. Overrides the `put` method to resize the table by a factor of 3 when the load factor reaches 3/4. 3. Introduces a method `num_resizes` that returns the number of times the hash table has resized. # Method Signatures: ```python class CustomHashTable(ResizableHashTable): def put(self, key: int, value: any) -> None: # Insert the key-value pair into the table, resizing if necessary. def num_resizes(self) -> int: # Return the number of resizes that have occurred. ``` # Constraints: - Key values are guaranteed to be integers. - You can ignore the implementation of other methods like `get`, `delete`, etc., as they are inherited from the parent class. - Assume that rehashing and probing mechanisms are correctly handled by the parent class. # Example: ```python ht = CustomHashTable() ht.put(10, \\"value1\\") ht.put(20, \\"value2\\") ht.put(30, \\"value3\\") # After several insertions, assuming the table resized multiple times: print(ht.num_resizes()) # Output should indicate the number of resizes that have occurred. ```","solution":"class ResizableHashTable: def __init__(self, initial_capacity=8): self.table = [None] * initial_capacity self.size = 0 def put(self, key: int, value: any) -> None: # Basic put method which should handle insertion and resizing if self.size / len(self.table) >= 0.75: self.resize(2 * len(self.table)) hash_index = self.hash(key) while self.table[hash_index] is not None: if self.table[hash_index][0] == key: self.table[hash_index] = (key, value) return hash_index = self.probe(hash_index) self.table[hash_index] = (key, value) self.size += 1 def resize(self, new_capacity: int): old_table = self.table self.table = [None] * new_capacity self.size = 0 for item in old_table: if item is not None: self.put(item[0], item[1]) def hash(self, key: int) -> int: return key % len(self.table) def probe(self, index: int) -> int: return (index + 1) % len(self.table) class CustomHashTable(ResizableHashTable): def __init__(self, initial_capacity=8): super().__init__(initial_capacity) self.resize_count = 0 def put(self, key: int, value: any) -> None: if self.size / len(self.table) >= 0.75: self.resize(3 * len(self.table)) self.resize_count += 1 super().put(key, value) def resize(self, new_capacity: int): super().resize(new_capacity) def num_resizes(self) -> int: return self.resize_count"},{"question":"# Scenario: You are working on a software module that manages a collection of tasks that need to be processed. The tasks are represented and stored in a doubly linked list due to the need for frequent insertions and deletions. Each task has a unique ID and a description. Your task is to implement a part of the module that handles adding a new task, removing a task by its ID, and finding a task by its ID. # Task: Write functions to perform the following operations on a doubly linked list: 1. `add_task`: Adds a new task to the end of the list. 2. `remove_task`: Removes a task by its ID. 3. `find_task`: Finds and returns the description of a task by its ID. # Input and Output Formats: Function `add_task`: - **Input**: `task_id` (integer), `description` (string) - **Output**: None Function `remove_task`: - **Input**: `task_id` (integer) - **Output**: None Function `find_task`: - **Input**: `task_id` (integer) - **Output**: `description` (string) # Constraints: - `task_id` is a unique integer. - `description` is a non-empty string. - If a task with the given `task_id` does not exist for `remove_task` and `find_task`, handle it gracefully (e.g., return an appropriate message). # Performance Requirements: - These operations should be efficient given the constraints of a linked list: - `add_task`: O(1) if the tail of the list is known. - `remove_task`: O(n) due to the need to find the task. - `find_task`: O(n) due to the need to traverse the list. # Example: ```python class DoublyLinkedListNode: def __init__(self, task_id, description): self.task_id = task_id self.description = description self.next = None self.prev = None class TaskManager: def __init__(self): self.head = None self.tail = None def add_task(self, task_id, description): # Implement this method def remove_task(self, task_id): # Implement this method def find_task(self, task_id): # Implement this method # Add, remove, and find tasks manager = TaskManager() manager.add_task(1, \\"Do the dishes\\") manager.add_task(2, \\"Walk the dog\\") print(manager.find_task(1)) # Output: \\"Do the dishes\\" manager.remove_task(1) print(manager.find_task(1)) # Output: Task not found or similar message ```","solution":"class DoublyLinkedListNode: def __init__(self, task_id, description): self.task_id = task_id self.description = description self.next = None self.prev = None class TaskManager: def __init__(self): self.head = None self.tail = None def add_task(self, task_id, description): new_node = DoublyLinkedListNode(task_id, description) if self.tail is None: self.head = self.tail = new_node else: self.tail.next = new_node new_node.prev = self.tail self.tail = new_node def remove_task(self, task_id): current = self.head while current: if current.task_id == task_id: if current.prev: current.prev.next = current.next if current.next: current.next.prev = current.prev if current == self.head: self.head = current.next if current == self.tail: self.tail = current.prev return current = current.next def find_task(self, task_id): current = self.head while current: if current.task_id == task_id: return current.description current = current.next return \\"Task not found\\""},{"question":"# Question: Advanced Factor Combination Generator You are to write a function `get_factor_combinations(n)` that takes an integer `n` (where (1 le n le 10^5)) and returns all possible combinations of its factors. Each combination should be represented as a list of integers, and the order within each combination does not matter. The factors should be greater than 1 and less than n. The function should aim to handle large numbers efficiently by utilizing techniques to avoid deep recursion and unnecessary computations. Input - A single integer n (1 ≤ n ≤ 100000) Output - A list of lists, where each inner list contains a valid combination of factors for the input number n. Examples - Input: `12` Output: `[[2, 6], [2, 2, 3], [3, 4]]` - Input: `32` Output: `[[2, 16], [2, 2, 8], [2, 2, 2, 4], [2, 2, 2, 2, 2], [2, 4, 4], [4, 8]]` - Input: `37` Output: `[]` (since 37 is a prime number) - Input: `1` Output: `[]` (since there are no valid factors other than 1) # Constraints 1. Your function must account for edge cases effectively — such as n being 1 or a prime number. 2. You must consider performance implications, ensuring that your solution can handle the upper limit of the input size within a reasonable time. 3. The function should not use any built-in factorization libraries or methods but instead implement the logic from scratch. # Notes 1. A depth-first search (DFS) approach with backtracking may help in achieving the desired combinations efficiently. 2. Consider using an iterative method to avoid deep recursion. 3. You may also define helper functions if necessary to break down the problem.","solution":"def get_factor_combinations(n): Returns all unique combinations of factors of n (excepting 1 and n itself). if n <= 1: return [] result = [] def dfs(start, path, remaining): for i in range(start, int(remaining ** 0.5) + 1): if remaining % i == 0: result.append(path + [i, remaining // i]) dfs(i, path + [i], remaining // i) dfs(2, [], n) return result"},{"question":"# Bubble Sort Simulation and Optimizer The Bubble Sort algorithm is a simple yet instructive sorting technique. Your task is to improve and implement a sorting function based on Bubble Sort by incorporating an optimization. # Problem You are given an unsorted list of integers. Implement a function, `optimized_bubble_sort(arr, simulation=False)`, which not only sorts the list in ascending order but also optimizes the Bubble Sort algorithm by stopping early if no elements were swapped during an iteration. Additionally, if the `simulation` parameter is set to `True`, your function should print the array after each iteration to demonstrate the sorting process. # Function Signature ```python def optimized_bubble_sort(arr: List[int], simulation: bool = False) -> List[int]: pass ``` # Inputs and Outputs * **Input**: * `arr`: A list of integers. * `simulation`: A boolean flag, defaulting to `False`. If `True`, print the list after each iteration of the outer loop. * **Output**: * Return the sorted list of integers. # Example ```python >>> optimized_bubble_sort([4, 3, 2, 1], simulation=True) iteration 1: 3 2 1 4 iteration 2: 2 1 3 4 iteration 3: 1 2 3 4 [1, 2, 3, 4] >>> optimized_bubble_sort([1, 2, 3, 4, 5], simulation=True) iteration 1: 1 2 3 4 5 [1, 2, 3, 4, 5] >>> optimized_bubble_sort([3, 5, 1, 4, 2]) [1, 2, 3, 4, 5] ``` # Constraints * The list can contain up to 10,000 integers. * You should not use any additional data structures other than auxiliary variables for swapping. # Requirements * Your function should be able to handle edge cases like empty lists and single-element lists effectively. * Ensure that the simulation output precisely matches the example output for correctness verification.","solution":"from typing import List def optimized_bubble_sort(arr: List[int], simulation: bool = False) -> List[int]: Sorts a list of integers using an optimized bubble sort algorithm that stops early if no elements were swapped during an iteration. If simulation is True, prints the list after each iteration. n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if simulation: print(f\\"iteration {i+1}: {\' \'.join(map(str, arr))}\\") if not swapped: break return arr"},{"question":"You are tasked with implementing an `ArrayQueue` and `LinkedListQueue`, two variations of the Queue Abstract Data Type (ADT). Your goal is to implement the operations as described in the guidelines, ensuring that you handle edge cases and optimize for performance. Class Definitions **ArrayQueue**: - `__init__(self, capacity=10)`: Initializes the queue with a fixed capacity or the given input capacity. - `enqueue(self, value)`: Adds a new item to the rear of the queue. - `dequeue(self)`: Removes the front item from the queue and returns it. - `peek(self)`: Returns the front item from the queue without removing it. - `__iter__(self)`: Iterates through the queue. **LinkedListQueue**: - `__init__(self)`: Initializes an empty queue. - `enqueue(self, value)`: Adds a new item to the rear of the queue. - `dequeue(self)`: Removes the front item from the queue and returns it. - `peek(self)`: Returns the front item from the queue without removing it. - `__iter__(self)`: Iterates through the queue. Input and Output Formats - There are no explicit input or output formats as you will be implementing classes and methods. Constraints - Do not use Python\'s built-in collections (like `deque`) that implement queue functionalities. - Ensure all operations (`enqueue`, `dequeue`, and `peek`) have a time complexity of O(1). - Properly handle empty queue scenarios by raising appropriate exceptions. Performance Requirements - Optimize array resizing in `ArrayQueue` to minimize the number of resizing operations. - Ensure `LinkedListQueue` uses memory efficiently while managing nodes. # Example Usage Your implementations should allow the following use cases: ```python # ArrayQueue Example queue = ArrayQueue(2) queue.enqueue(1) queue.enqueue(2) print(queue.peek()) # Output: 1 queue.enqueue(3) # This should trigger the array to resize print(queue.dequeue()) # Output: 1 print(queue.dequeue()) # Output: 2 # LinkedListQueue Example ll_queue = LinkedListQueue() ll_queue.enqueue(1) ll_queue.enqueue(2) print(ll_queue.peek()) # Output: 1 print(ll_queue.dequeue()) # Output: 1 print(ll_queue.dequeue()) # Output: 2 ``` Implement these classes based on the provided specifications.","solution":"class ArrayQueue: def __init__(self, capacity=10): self.capacity = capacity self.queue = [None]*capacity self.front = 0 self.rear = -1 self.size = 0 def enqueue(self, value): if self.size == self.capacity: self._resize(2 * self.capacity) self.rear = (self.rear + 1) % self.capacity self.queue[self.rear] = value self.size += 1 def dequeue(self): if self.size == 0: raise IndexError(\\"dequeue from empty queue\\") value = self.queue[self.front] self.queue[self.front] = None self.front = (self.front + 1) % self.capacity self.size -= 1 if self.size > 0 and self.size == self.capacity // 4: self._resize(self.capacity // 2) return value def peek(self): if self.size == 0: raise IndexError(\\"peek from empty queue\\") return self.queue[self.front] def _resize(self, new_capacity): new_queue = [None]*new_capacity for i in range(self.size): new_queue[i] = self.queue[(self.front + i) % self.capacity] self.queue = new_queue self.front = 0 self.rear = self.size - 1 self.capacity = new_capacity def __iter__(self): return (self.queue[(self.front + i) % self.capacity] for i in range(self.size)) class LinkedListQueue: class Node: def __init__(self, value=None, next_node=None): self.value = value self.next = next_node def __init__(self): self.front = None self.rear = None self.size = 0 def enqueue(self, value): new_node = self.Node(value) if self.rear: self.rear.next = new_node self.rear = new_node if self.front is None: self.front = new_node self.size += 1 def dequeue(self): if self.size == 0: raise IndexError(\\"dequeue from empty queue\\") value = self.front.value self.front = self.front.next if self.front is None: self.rear = None self.size -= 1 return value def peek(self): if self.size == 0: raise IndexError(\\"peek from empty queue\\") return self.front.value def __iter__(self): current = self.front while current: yield current.value current = current.next"},{"question":"Context You are tasked with implementing and enhancing an existing algorithm, the Exchange Sort. However, given its inefficiency for large datasets, your goal is to adapt or combine it with another efficient sorting algorithm. Requirements Write two functions: 1. **exchange_sort**: Enhance the provided Exchange Sort for educational purposes by implementing boundary checks and optimizing where possible. 2. **hybrid_sort**: Implement a hybrid sorting approach that uses Exchange Sort for small partitions of the array and a more efficient algorithm (like Merge Sort) for larger partitions. # Function Specifications 1. **Function 1: exchange_sort(arr)** - **Input**: A list of integers, `arr`. - **Output**: A sorted list of integers. - **Constraints**: Handle edge cases where the input might be an empty list or contain duplicate values. 2. **Function 2: hybrid_sort(arr)** - **Input**: A list of integers, `arr`. - **Output**: A sorted list of integers. - **Constraints**: Use Exchange Sort for partitions of size <=15. For larger partitions, use Merge Sort. Ensure that the function handles large datasets efficiently. # Example ```python # Example Input arr = [64, 34, 25, 12, 22, 11, 90] # Calling the functions sorted_array_exchange = exchange_sort(arr.copy()) sorted_array_hybrid = hybrid_sort(arr.copy()) # Example Output print(sorted_array_exchange) # Output: [11, 12, 22, 25, 34, 64, 90] print(sorted_array_hybrid) # Output: [11, 12, 22, 25, 34, 64, 90] ``` # Constraints - 1 <= len(arr) <= 10^5 - -10^6 <= arr[i] <= 10^6 **Note**: Make sure to test your solution with arrays containing edge cases such as already sorted arrays, arrays with all identical elements, and arrays with negative numbers.","solution":"def exchange_sort(arr): Exchanges elements to sort the array. n = len(arr) for i in range(n - 1): for j in range(i + 1, n): if arr[i] > arr[j]: arr[i], arr[j] = arr[j], arr[i] return arr def merge_sort(arr): Implements merge sort algorithm. if len(arr) > 1: mid = len(arr) // 2 L = arr[:mid] R = arr[mid:] merge_sort(L) merge_sort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 return arr def hybrid_sort(arr): Hybrid sorting using exchange sort for small partitions and merge sort for larger partitions. def hybrid_sort_helper(arr): if len(arr) <= 15: return exchange_sort(arr) else: return merge_sort(arr) return hybrid_sort_helper(arr)"},{"question":"In combinatorics, combination calculation (`nCr`) is a common problem used to find the number of ways to choose `r` items from `n` items without regard to the order of selection. Write a function `combination_dp` that efficiently computes the combination value using an iterative dynamic programming approach. This function should avoid the overhead and depth limitations of recursion by using an iterative tabulation method. # Function Signature ```python def combination_dp(n: int, r: int) -> int: pass ``` # Input - `n` (0 <= n <= 100): The total number of items. - `r` (0 <= r <= n): The number of items to choose. # Output - Returns an integer representing the number of ways to choose `r` items from `n` items. # Constraints - The function must execute within a reasonable time frame for the given input limits (`0 <= n <= 100`). - The solution should optimize for both time and space. # Example ```python assert combination_dp(5, 2) == 10 assert combination_dp(6, 3) == 20 assert combination_dp(0, 0) == 1 assert combination_dp(10, 10) == 1 assert combination_dp(100, 50) == 100891344545564193334812497256 ``` # Scenario Imagine you are developing a program for a combinatorial study tool where students need to frequently compute combinations. Your task is to implement this function ensuring it performs efficiently even for large inputs. # Tips 1. Use a 2D list to store intermediate results. 2. Utilize the property: C(n, r) = C(n-1, r-1) + C(n-1, r).","solution":"def combination_dp(n: int, r: int) -> int: if r > n: return 0 if r == 0 or r == n: return 1 # Create a 2D array to store the computed values dp = [[0 for _ in range(r + 1)] for _ in range(n + 1)] # Loop to calculate the combination values using dynamic programming for i in range(n + 1): for j in range(min(i, r) + 1): if j == 0 or j == i: dp[i][j] = 1 else: dp[i][j] = dp[i-1][j-1] + dp[i-1][j] return dp[n][r]"},{"question":"Enhanced Exchange Sort Context You\'ve been tasked to improve the performance of an Exchange Sort implementation. Your goal is to minimize unnecessary comparisons and swaps by optimizing the algorithm to recognize when the list is already sorted during the sorting process. Problem Statement Implement an enhanced version of the `exchange_sort` function named `optimized_exchange_sort` that stops early if the list becomes sorted before completing all passes. Function Signature ```python def optimized_exchange_sort(arr: list) -> list: ``` Input * A list of integers `arr` (0 ≤ len(arr) ≤ 10^3; -10^4 ≤ arr[i] ≤ 10^4) Output * The list sorted in non-decreasing order. Constraints * You must utilize the Exchange Sort algorithm and apply an optimization to stop early if no swaps are made during a complete pass. * You are not allowed to use Python\'s built-in sorting functions. * Your function should run efficiently for the size constraints provided. Example ```python assert optimized_exchange_sort([4, 2, 6, 5, 1, 3]) == [1, 2, 3, 4, 5, 6] assert optimized_exchange_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5] assert optimized_exchange_sort([]) == [] assert optimized_exchange_sort([3, -2, -1, 0]) == [-2, -1, 0, 3] assert optimized_exchange_sort([2, 2, 2, 2]) == [2, 2, 2, 2] ``` Guidelines 1. Review the existing `exchange_sort` implementation for reference. 2. Consider introducing a flag that checks if any swaps are made in a single pass through the array. 3. Design the enhanced function to terminate the sorting process if the list is already sorted before making all passes through the list. 4. Thoroughly test your implementation with given example cases and additional edge cases to ensure correctness and efficiency.","solution":"def optimized_exchange_sort(arr: list) -> list: Enhanced Exchange Sort that stops early if the list becomes sorted before completing all passes. n = len(arr) for i in range(n): swapped = False for j in range(n - 1, i, -1): if arr[j] < arr[j - 1]: arr[j], arr[j - 1] = arr[j - 1], arr[j] swapped = True # If no elements were swapped in the inner loop, then the list is sorted if not swapped: break return arr"},{"question":"# Context Suppose you are working on a data-processing algorithm where each value needs to be verified twice for redundancy. To simulate this process, you need to duplicate each entry in a stack of integers. # Problem Statement You are given a stack of integers. Write a function, `stutter_stack`, that takes the stack as an input and replaces every value in the stack with two occurrences of that value in the same order. You must implement two variations of the function: 1. `stutter_stack_with_stack` using a single stack as auxiliary storage. 2. `stutter_stack_with_queue` using a single queue as auxiliary storage. Your implementations should handle edge cases, such as an empty stack or a stack with a single element, effectively. # Function Signatures ```python def stutter_stack_with_stack(stack: list) -> list: pass def stutter_stack_with_queue(stack: list) -> list: pass ``` # Input - `stack`: A list of integers representing a stack with the top of the stack at the end of the list. # Output - A modified stack as a list where each integer value is duplicated. # Constraints - Do not use any additional data structures except for a single extra stack or queue as specified. - The maximum length of the stack will be 10000 elements. - The integers in the stack are between -10000 and 10000. # Example ```python # Example for stutter_stack_with_stack print(stutter_stack_with_stack([3, 7, 1, 14, 9])) # Output: [3, 3, 7, 7, 1, 1, 14, 14, 9, 9] # Example for stutter_stack_with_queue print(stutter_stack_with_queue([3, 7, 1, 14, 9])) # Output: [3, 3, 7, 7, 1, 1, 14, 14, 9, 9] ``` **Note**: Ensure the order of elements in the stack is preserved after duplication.","solution":"def stutter_stack_with_stack(stack: list) -> list: Duplicates each element in the stack using another stack as auxiliary storage. aux_stack = [] # While there are elements in the stack, pop them and push twice into auxiliary stack while stack: elem = stack.pop() aux_stack.append(elem) aux_stack.append(elem) # Reverse the elements back to the original stack to maintain order while aux_stack: stack.append(aux_stack.pop()) return stack def stutter_stack_with_queue(stack: list) -> list: Duplicates each element in the stack using a queue as auxiliary storage. from collections import deque queue = deque() # Move elements from the stack to the queue, duplicating each element while stack: elem = stack.pop() queue.appendleft(elem) queue.appendleft(elem) # Move elements back to the original stack to maintain order while queue: stack.append(queue.popleft()) return stack"},{"question":"# Question: Calculate the Height of a Binary Tree Context You are tasked with calculating the height of a binary tree. The height of the tree is the number of levels it contains. For instance, an empty tree has height 0, a tree with only a root node has height 1, and so on. Understanding the height is fundamental in various applications, such as analyzing the efficiency of tree operations or balancing trees. Problem Statement Implement a function `height` to compute the height of a binary tree. The function will operate recursively, traversing from the root to the leaves and calculating the maximum height considering both the left and right subtrees. Function Signature ```python def height(root): Calculate the height of a binary tree. Parameters: root (Node): The root node of the binary tree. Returns: int: The height of the tree. ``` Input - `root`: The root of the binary tree of type `Node`. A node has properties: - `left`: The left child node, or `None` if there isn\'t one. - `right`: The right child node, or `None` if there isn\'t one. Output - An integer representing the height of the tree. Constraints - The height should be calculated correctly for an empty tree (which should return 0). - The function should handle trees with varying structures. Performance Requirements - The solution should be efficient, with a time complexity of O(n) where n is the number of nodes in the tree. - Carefully handle deep recursive calls to avoid stack overflow for very large trees. Example Consider a tree represented in the following structure: ``` 9 / 6 12 / / 3 8 10 15 / 7 18 ``` The function call `height(root)` should return `4`. Additional Information The provided testing class `TestSuite` contains a tree construction and a test case to validate the `height` function. ```python import unittest from bst import Node from bst import bst class TestSuite(unittest.TestCase): def setUp(self): self.tree = bst() self.tree.insert(9) self.tree.insert(6) self.tree.insert(12) self.tree.insert(3) self.tree.insert(8) self.tree.insert(10) self.tree.insert(15) self.tree.insert(7) self.tree.insert(18) def test_height(self): self.assertEqual(4, height(self.tree.root)) if __name__ == \'__main__\': unittest.main() ```","solution":"class Node: def __init__(self, key): self.left = None self.right = None self.val = key def height(root): Calculate the height of a binary tree. Parameters: root (Node): The root node of the binary tree. Returns: int: The height of the tree. if root is None: return 0 else: left_height = height(root.left) right_height = height(root.right) return max(left_height, right_height) + 1"},{"question":"# Flatten a Nested Array # Problem Statement You are given an array that may contain nested arrays (i.e., arrays within arrays of any depth). Your task is to write a function `flatten` which takes this nested array structure and returns a single, flat array with all the elements in the same order as they appear in the input. # Function Signature ```python def flatten(input_array: list) -> list: pass ``` # Input - `input_array`: A list which may contain nested lists of any depth. - Example: `[1, [2, [3, [4]], 5]]` # Output - Returns a list that contains all the elements from the nested lists but flattened into a single list. - Example: `[1, 2, 3, 4, 5]` # Constraints 1. The elements in the nested lists can be of any type that is not iterable (except strings). 2. Strings should be treated as atomic elements and not split into characters. 3. The depth of nested lists can go as deep as supported by the Python recursion limit. # Example ```python assert flatten([1, [], [2, [3, [4, \'hello\']], 5]]) == [1, 2, 3, 4, \'hello\', 5] assert flatten([[], [[]]]) == [] ``` # Notes - Think about how your solution handles edge cases like empty arrays, deeply nested structures, and mixed data types. - Analyze the performance and ensure your solution handles large input sizes efficiently.","solution":"def flatten(input_array: list) -> list: Flattens a nested array into a single, flat array. result = [] def _flatten(nested_list): for element in nested_list: if isinstance(element, list): _flatten(element) else: result.append(element) _flatten(input_array) return result"},{"question":"Efficient Boat Loading **Scenario**: You are in charge of loading boxes onto a boat. The boat has a weight limit that cannot be exceeded. Each box has a specific weight, and you need to maximize the number of boxes loaded onto the boat without exceeding the weight limit. **Objective**: Implement a sorting-based algorithm to solve this loading problem efficiently. **Requirements**: 1. Write a function `max_boxes(weights, weight_limit)` that takes: * `weights`: a list of integers representing the weight of each box. * `weight_limit`: an integer representing the maximum weight the boat can carry. 2. Return the maximum number of boxes that can be loaded onto the boat without exceeding the weight limit. **Constraints**: 1. The number of boxes (n) will be 1 ≤ n ≤ 10^4. 2. The weight of each box and the boat\'s weight limit will be 1 ≤ weight ≤ 10^4 and 1 ≤ weight_limit ≤ 10^6 respectively. **Input/Output**: * **Input**: - `weights`: List[int] - `weight_limit`: int * **Output**: - `int` **Performance**: * The solution should aim to operate with a time complexity better than O(n^2) and ideally close to O(n log n). **Example**: * If `weights = [3, 7, 2, 9, 4]` and `weight_limit = 10`, then the function should return `3` as we can load the boxes with weights `[3, 2, 4]`. **Edge Cases**: 1. No boxes available. 2. All boxes individually exceed the weight limit. 3. All boxes have the same weight.","solution":"def max_boxes(weights, weight_limit): Returns the maximum number of boxes that can be loaded onto the boat without exceeding the weight limit. # Sort weights in ascending order weights.sort() total_weight = 0 count = 0 for weight in weights: if total_weight + weight <= weight_limit: total_weight += weight count += 1 else: break return count"},{"question":"# Question: Implement Stooge Sort and Analyze Its Performance Context: Stooge Sort is an inefficient and less known sorting algorithm that uses a recursive approach to sort an array. While not practical for real-world applications, it serves as a good exercise for understanding recursion and divide-and-conquer strategies in sorting. Task: Write a function `stooge_sort` that takes a list of integers and sorts it in non-decreasing order using the Stooge Sort algorithm. Additionally, provide a detailed analysis of the algorithm\'s performance on various input sizes and scenarios. Function Signature: ```python def stooge_sort(arr: list, l: int = 0, h: int = None) -> None: pass ``` Input: - A list of integers `arr` (1 ≤ len(arr) ≤ 10^3). - The starting index `l` (default to 0 when called initially). - The ending index `h` (default to the last index of the list when called initially). Output: - The function should modify the input list `arr` in-place to be sorted in non-decreasing order. Constraints: - Use the Stooge Sort algorithm. - You are allowed to define helper functions if needed. Example: ```python arr = [5, 2, 9, 1, 5, 6] stooge_sort(arr) print(arr) # Output: [1, 2, 5, 5, 6, 9] ``` Analysis Task: 1. **Edge Cases Handling**: Explain how the algorithm handles edge cases such as already sorted arrays, arrays with duplicates, and very small arrays (size <= 2). 2. **Performance Evaluation**: Analyze the time complexity of Stooge Sort and discuss its expected performance on arrays of different sizes (e.g., 10, 100, 1000 elements). 3. **Comparison**: Compare Stooge Sort with more efficient sorting algorithms (e.g., Merge Sort, Quick Sort) in terms of time complexity and practical efficiency. 4. **Visualization**: (Optional) Provide a visual representation or step-by-step breakdown of how Stooge Sort works on a sample array.","solution":"def stooge_sort(arr: list, l: int = 0, h: int = None) -> None: if h is None: h = len(arr) - 1 if l >= h: return if arr[l] > arr[h]: arr[l], arr[h] = arr[h], arr[l] if h - l + 1 > 2: t = (h - l + 1) // 3 stooge_sort(arr, l, h - t) stooge_sort(arr, l + t, h) stooge_sort(arr, l, h - t)"},{"question":"You are tasked with enhancing the functionality of a simple power-of-two checker function. The current implementation only determines if a given integer is a power of two. Your task is to extend this functionality to check if a list of integers contains any power-of-two values. # Requirements: 1. Implement a function `contains_power_of_two(numbers)` which: * Takes a list `numbers` of integers. * Returns `True` if any of the integers in the list is a power of two, otherwise returns `False`. # Input and Output Formats: * **Input**: * `numbers`: a list of integers, e.g., `[0, 1, -2, 3, 4, 8]` * **Output**: * A boolean value (`True` or `False`). # Constraints: * All elements in `numbers` are integers. * The list can contain up to 10^5 elements. * Each integer can be in the range [-10^9, 10^9]. # Performance Requirements: * The solution should have a time complexity of O(n) where n is the number of elements in the list. # Example: ```python input1 = [0, 1, 2, 3, 4] output1 = True # Explanation: 1, 2, and 4 are powers of two. input2 = [-1, -2, 3, 5, 7] output2 = False # Explanation: None of the elements are powers of two. ``` # Function Signature: ```python def contains_power_of_two(numbers): Determine if a list contains any power of two elements. :param numbers: List[int] - List of integers to check :return: bool - True if any element is a power of two, False otherwise. pass ```","solution":"def contains_power_of_two(numbers): Determine if a list contains any power of two elements. :param numbers: List[int] - List of integers to check :return: bool - True if any element is a power of two, False otherwise. def is_power_of_two(n): Helper function to determine if a number is a power of two. :param n: int - number to check :return: bool - True if n is a power of two, False otherwise if n <= 0: return False return (n & (n - 1)) == 0 for num in numbers: if is_power_of_two(num): return True return False"},{"question":"# Problem: You are given an ( n times n ) invertible matrix represented as a list of lists (nested list) in Python. Your task is to write a function that calculates the inverse of the matrix. The function should handle matrices of sizes 2x2 and larger, and provide meaningful error messages for cases where the matrix is invalid or non-invertible. # Function Signature: ```python def invert_matrix(matrix: List[List[float]]) -> List[List[float]]: pass ``` # Input: * An ( n times n ) matrix, `matrix`, represented as a nested list of floats, where ( 2 leq n ). # Output: * A nested list of floats representing the inverse of the input matrix. # Constraints: * ( 2 leq n leq 10 ) * Elements of the matrix will be floating-point numbers. * The matrix is guaranteed to be invertible if it is square and non-zero determinant. * You are required to handle invalid/edge cases and return specific error matrices: * If the matrix is not a matrix: return `[[-1]]` * If the matrix is not square: return `[[-2]]` * If the matrix size is too small (1x1): return `[[-3]]` * If the matrix is singular (determinant = 0): return `[[-4]]` # Example: ```python # Example 1: 2x2 matrix inversion matrix = [[1, 2], [3, 4]] output = invert_matrix(matrix) # Expected output: [[-2.0, 1.0], [1.5, -0.5]] # Example 2: Invalid matrix (not a matrix) matrix = [1, 2, 3, 4] output = invert_matrix(matrix) # Expected output: [[-1]] # Example 3: Non-square matrix matrix = [[1, 2, 3], [4, 5, 6]] output = invert_matrix(matrix) # Expected output: [[-2]] # Your implementation should pass additional complex and edge test cases. ``` # Notes: * Use recursive determinant calculation and matrix of minors as per the principles outlined in the analysis. * Ensure edge cases are considered and proper error messages are returned based on the above constraints.","solution":"from typing import List def invert_matrix(matrix: List[List[float]]) -> List[List[float]]: Calculate the inverse of a given square matrix if it\'s invertible. Args: matrix (List[List[float]]): A list of lists representing a square matrix. Returns: List[List[float]]: Inverted matrix or error matrix as specified. def is_square(matrix: List[List[float]]) -> bool: Check if the given matrix is square. return all(len(row) == len(matrix) for row in matrix) def determinant(matrix: List[List[float]]) -> float: Calculate the determinant of a given square matrix. n = len(matrix) if n == 1: return matrix[0][0] elif n == 2: return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0] det = 0 for c in range(n): det += ((-1) ** c) * matrix[0][c] * determinant([[matrix[i][j] for j in range(n) if j != c] for i in range(1, n)]) return det def matrix_of_minors(matrix: List[List[float]]) -> List[List[float]]: Get the matrix of minors for a given matrix. minors = [] n = len(matrix) for i in range(n): minor_row = [] for j in range(n): minor = [[matrix[x][y] for y in range(n) if y != j] for x in range(n) if x != i] minor_row.append(determinant(minor)) minors.append(minor_row) return minors def transpose(matrix: List[List[float]]) -> List[List[float]]: Transpose the given matrix. return list(map(list, zip(*matrix))) def cofactor(matrix: List[List[float]]) -> List[List[float]]: Calculate the cofactor matrix of a given matrix. minors = matrix_of_minors(matrix) for i in range(len(matrix)): for j in range(len(matrix)): minors[i][j] *= (-1) ** (i + j) return minors if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix): return [[-1]] if not is_square(matrix): return [[-2]] if len(matrix) < 2: return [[-3]] det = determinant(matrix) if det == 0: return [[-4]] cofact = cofactor(matrix) adjugate = transpose(cofact) inverse = [[elem / det for elem in row] for row in adjugate] return inverse"},{"question":"# Kth Smallest Element in a Binary Search Tree You are given the root of a binary search tree (BST) and an integer `k`. Write a function to find the k-th smallest element in the BST. # Function Signature: ```python def kth_smallest(root: Node, k: int) -> int: ``` # Input: - `root`: The root node of the BST. Each node is represented as a `Node` object with attributes `val`, `left`, and `right`. - `k`: An integer representing the rank (k-th smallest element to find). # Output: - An integer representing the k-th smallest element in the BST. # Constraints: - The number of nodes in the tree will be between 1 and 10^4. - Assume k is valid (1 ≤ k ≤ number of nodes in the BST). # Example ```python # Example BST Structure 100 / 50 150 / / 25 75 125 175 # For k=2, the 2nd smallest element is 50 root = Node(100, Node(50, Node(25), Node(75)), Node(150, Node(125), Node(175))) k = 2 assert kth_smallest(root, k) == 50 ``` # Problem Requirements 1. Implement the function using an efficient algorithm. 2. Consider both time and space complexity for a large number of nodes.","solution":"class Node: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def kth_smallest(root: Node, k: int) -> int: Returns the k-th smallest element in the BST rooted at `root`. def inorder_traversal(node): if node is None: return [] return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) return inorder_traversal(root)[k-1]"},{"question":"You are given two functions, `serialize` and `deserialize`, which convert a binary tree to a string and reconstruct a binary tree from a string, respectively. Implement an additional function `is_same_tree` that will help verify if two given binary trees are structurally identical and have the same node values. # Function Signature ```python def is_same_tree(p: TreeNode, q: TreeNode) -> bool: ``` # Input - `p`: The root of the first binary tree. - `q`: The root of the second binary tree. # Output: - Returns a boolean value `True` if the two trees are identical, otherwise `False`. # Constraints: - The number of nodes in the tree is in the range [0, 1000]. - TreeNode values are in the range [-10^4, 10^4]. # Example Scenarios: ```python Example 1: Input: p = [1, 2, 3], q = [1, 2, 3] Output: True Example 2: Input: p = [1, 2], q = [1, None, 2] Output: False Example 3: Input: p = [], q = [] Output: True ``` # Performance Requirements: Your `is_same_tree` function should run in O(n) time complexity and O(h) space complexity where n is the number of nodes in the tree and h is the height of the tree. The function should handle edge cases where trees have different structures or are empty. # Scenario: You are working for a company that deals with saving and loading game states. Each game state is saved as a binary tree, where each node represents a game checkpoint with a specific value. Your job is to make sure that the saved and loaded states of the game correspond accurately. Use the function `is_same_tree` to ensure that the serialized and deserialized trees are identical.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_same_tree(p: TreeNode, q: TreeNode) -> bool: # Base cases for recursion if not p and not q: return True if not p or not q: return False if p.val != q.val: return False # Recursively compare left and right subtrees return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)"},{"question":"# Word Pattern Matching Challenge Given a pattern and a string, you need to determine whether the string follows the same pattern using the following rules: A pattern follows a string if there is a bijection between a letter in the pattern and a non-empty word in the string. Specifically, each character in the pattern should map to a unique non-empty word in the string such that no two characters in the pattern map to the same word, and no two words in the string map to the same character in the pattern. Input and Output **Input**: The function `word_pattern(pattern: str, sentence: str) -> bool` should take: * `pattern`: A string, containing only lowercase letters. * `sentence`: A string of words separated by a single space. **Output**: A boolean value indicating whether the `sentence` follows the given `pattern`. Constraints 1. `1 <= len(pattern) <= 300` 2. `1 <= len(sentence.split()) <= 300` 3. Both `pattern` and words in `sentence` consist of lowercase English letters only. Examples *Example 1:* ```plaintext Input: pattern = \\"abba\\", sentence = \\"dog cat cat dog\\" Output: True ``` *Example 2:* ```plaintext Input: pattern = \\"abba\\", sentence = \\"dog cat cat fish\\" Output: False ``` *Example 3:* ```plaintext Input: pattern = \\"aaaa\\", sentence = \\"dog cat cat dog\\" Output: False ``` *Example 4:* ```plaintext Input: pattern = \\"abba\\", sentence = \\"dog dog dog dog\\" Output: False ``` You need to implement the function `word_pattern` that successfully passes all the above examples and edge cases.","solution":"def word_pattern(pattern, sentence): words = sentence.split() if len(pattern) != len(words): return False char_to_word = {} word_to_char = {} for char, word in zip(pattern, words): if char in char_to_word: if char_to_word[char] != word: return False else: char_to_word[char] = word if word in word_to_char: if word_to_char[word] != char: return False else: word_to_char[word] = char return True"},{"question":"# Context You are given an array representing students\' IDs and you need to find the index of a particular student\'s ID. However, the array may contain duplicate IDs due to data entry errors. In such cases, your task is to find the index of the last occurrence of the specified ID. # Problem Statement Implement a function `find_last_occurrence` that takes an array `students_ids` and an integer `student_id` as input. The function should return the index of the last occurrence of `student_id` in `students_ids`. If `student_id` is not found, return -1. # Function Signature ```python def find_last_occurrence(students_ids: list, student_id: int) -> int: ``` # Input * `students_ids`: A list of integers, where each integer represents a student ID (e.g., `[101, 102, 103, 102, 104]`). * `student_id`: An integer representing the student ID to search for (e.g., `102`). # Output * An integer representing the index of the last occurrence of the `student_id` in the list. If not found, return -1. # Constraints * The length of `students_ids` can be up to 10^5. * Each `student_id` in the list is a positive integer. * The `student_id` to search for is a positive integer. # Example ```python # Example 1 students_ids = [101, 102, 103, 102, 104] student_id = 102 # The last occurrence of 102 is at index 3 find_last_occurrence(students_ids, student_id) # Should return 3 # Example 2 students_ids = [101, 102, 103, 104] student_id = 105 # The student_id 105 is not in the list, thus return -1 find_last_occurrence(students_ids, student_id) # Should return -1 ``` # Requirements 1. Solve the problem with a linear time complexity O(n). 2. Efficiently handle up to 10^5 elements in the list.","solution":"def find_last_occurrence(students_ids: list, student_id: int) -> int: Returns the index of the last occurrence of student_id in students_ids. If student_id is not found, returns -1. # Traverse the list from the end towards the beginning for i in range(len(students_ids) - 1, -1, -1): if students_ids[i] == student_id: return i return -1"},{"question":"# Question You are tasked with writing a function that generates all possible abbreviations for a given word using recursive backtracking. The word can consist of lowercase letters only. Context Consider that you are working on an autoreplacement tool that suggests multiple short forms of a word. These short forms need to cover all possible ways the word can be abbreviated, including partial and full abbreviations. Function Signature ```python def generate_abbreviations(word: str) -> List[str]: ``` Input - `word` (string): A string consisting of only lowercase letters, with a length constraint of 1 <= len(word) <= 50. Output - Returns a list of strings, where each string represents a unique abbreviation of the input word. Constraints - All input strings will be non-empty and within the given length constraints. - We expect the function to run within reasonable time limits for the given constraints. Example ```python # Example 1: input_word = \\"word\\" output = [\\"word\\", \\"wor1\\", \\"wo1d\\", \\"wo2\\", \\"w1rd\\", \\"w1r1\\", \\"w2d\\", \\"w3\\", \\"1ord\\", \\"1or1\\", \\"1o1d\\", \\"1o2\\", \\"2rd\\", \\"2r1\\", \\"3d\\", \\"4\\"] assert generate_abbreviations(input_word) == output # Example 2: input_word = \\"a\\" output = [\\"a\\", \\"1\\"] assert generate_abbreviations(input_word) == output ``` In your function, ensure you correctly implement the recursive backtracking mechanism to explore all possible states of abbreviation and aggregate results accordingly.","solution":"from typing import List def generate_abbreviations(word: str) -> List[str]: result = [] def backtrack(start: int, current: List[str], count: int): if start == len(word): if count > 0: current.append(str(count)) result.append(\\"\\".join(current)) if count > 0: current.pop() return # Option 1: Abbreviate the current character backtrack(start + 1, current, count + 1) # Option 2: Do not abbreviate the current character if count > 0: current.append(str(count)) current.append(word[start]) backtrack(start + 1, current, 0) current.pop() if count > 0: current.pop() backtrack(0, [], 0) return result"},{"question":"You are tasked with creating two functions, `encode` and `decode`, to handle the serialization and deserialization of a list of strings. This process is critical for reliable data transmission and storage. # Function Specifications: Function 1: encode * **Input**: a list of non-empty strings, `strs` (List[str]). * **Output**: a single encoded string (str). Function 2: decode * **Input**: a single encoded string, `s` (str). * **Output**: a list of strings (List[str]). # Requirements: * Each string in the list must be properly encoded such that it can be decoded without loss or error. * The encoded string must include the length of each string followed by a special delimiter, ensuring a clear separation between strings. * The decoding function must correctly parse the length prefix and delimiter to extract the original list of strings. # Constraints: * `strs` will only contain non-empty strings, but it may include empty lists. * Each string will contain characters which can include alphabets, numbers, and special characters. # Example: ```python # Example 1 input_strs = [\\"hello\\", \\"world\\"] encoded_str = encode(input_strs) print(encoded_str) # Output might be: \'5:hello5:world\' decoded_strs = decode(encoded_str) print(decoded_strs) # Output: [\\"hello\\", \\"world\\"] # Example 2 input_strs = [\\"\\", \\"foo\\", \\"bar\\"] encoded_str = encode(input_strs) print(encoded_str) # Output might be: \'0:3:foo3:bar\' decoded_strs = decode(encoded_str) print(decoded_strs) # Output: [\\"\\", \\"foo\\", \\"bar\\"] ``` Implement the `encode` and `decode` functions to ensure they handle encoding and decoding of strings efficiently and correctly.","solution":"def encode(strs): Encode a list of strings to a single string. :param strs: List of strings :return: Encoded single string return \'\'.join(f\'{len(s)}:{s}\' for s in strs) def decode(s): Decode a single string to a list of strings. :param s: Encoded single string :return: List of strings strs = [] i = 0 while i < len(s): # Find the delimiter delimiter_index = s.find(\':\', i) # Extract length of next string str_length = int(s[i:delimiter_index]) # Extract the string using the length we found start = delimiter_index + 1 next_str = s[start:start + str_length] strs.append(next_str) # Move to the next starting index i = start + str_length return strs"},{"question":"Write a function `postorder_traversal(root: Node) -> List[int]` that performs a postorder traversal on a given binary tree and returns a list of node values in the postorder sequence. # Input/Output Formats: - **Input:** - The input is the `root` of a binary tree. - The tree is defined using the class `Node`, where each `Node` has the following attributes: `val` (integer value), `left` (left child of type `Node` or `None`), and `right` (right child of type `Node` or `None`). - **Output:** - The output is a list of integers representing the node values in postorder traversal order. # Constraints: - The number of nodes in the tree is in the range [0, 10^4]. - The values of the nodes are in the range [-10^4, 10^4]. # Performance Requirements: - The solution must run in O(n) time complexity. - The solution should handle trees of significant depth without causing a stack overflow. # Example: ```python # Example Tree: # 1 # / # 2 3 # / # 4 5 root = Node(1, Node(2, Node(4), Node(5)), Node(3)) # Expected output: [4, 5, 2, 3, 1] print(postorder_traversal(root)) ``` # Notes: - Carefully handle edge cases, such as an empty tree. - Ensure that the solution is efficient and can handle the maximum constraints optimally. ```python def postorder_traversal(root: Node) -> List[int]: # Implement your solution here pass ```","solution":"class Node: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def postorder_traversal(root: Node) -> list[int]: Perform postorder traversal of a binary tree and return the node values. Args: root (Node): The root of the binary tree. Returns: List[int]: List of node values in postorder traversal order. result = [] def traverse(node): if not node: return traverse(node.left) traverse(node.right) result.append(node.val) traverse(root) return result"},{"question":"**Question**: # Context In certain applications like data serialization and graphics, it is common to reconstruct data structures from their traversal outputs. One such problem is reconstructing a full binary tree from its preorder and postorder traversal outputs. # Task Given arrays representing the preorder and postorder traversal of a full binary tree, write a function that constructs the binary tree from the given traversals and returns a list representing the inorder traversal of the constructed tree. # Input * `pre` - a list of integers representing the preorder traversal of the full binary tree. * `post` - a list of integers representing the postorder traversal of the full binary tree. # Output * A list of integers representing the inorder traversal of the constructed binary tree. # Constraints * The given trees are full binary trees, meaning every node has either 0 or 2 children. * There will be no duplicate values in the tree nodes. * The length of `pre` and `post` arrays will be between 1 and 1000. # Requirements * Implement a function `construct_tree(pre: list, post: list) -> list` that returns the inorder traversal of the binary tree. # Performance * Use appropriate algorithmic techniques to ensure that your implementation efficiently constructs the tree and handles up to the maximum constraints. # Example ```python def construct_tree(pre: list, post: list) -> list: # Implement function based on the above provided algorithm pass # Test Case 1 pre = [1, 2, 4, 5, 3, 6, 7] post = [4, 5, 2, 6, 7, 3, 1] print(construct_tree(pre, post)) # Expected output: [4, 2, 5, 1, 6, 3, 7] ``` * Ensure your function correctly implements the tree reconstruction and the inorder traversal output format as illustrated in the example.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def construct_tree_helper(pre, post, pre_start, pre_end, post_start, post_end, post_map): if pre_start > pre_end or post_start > post_end: return None root = TreeNode(pre[pre_start]) if pre_start == pre_end: return root left_root_val = pre[pre_start + 1] left_root_index = post_map[left_root_val] left_size = left_root_index - post_start + 1 root.left = construct_tree_helper(pre, post, pre_start + 1, pre_start + left_size, post_start, left_root_index, post_map) root.right = construct_tree_helper(pre, post, pre_start + left_size + 1, pre_end, left_root_index + 1, post_end - 1, post_map) return root def inorder_traversal(root): if not root: return [] return inorder_traversal(root.left) + [root.val] + inorder_traversal(root.right) def construct_tree(pre: list, post: list) -> list: post_map = {val: idx for idx, val in enumerate(post)} root = construct_tree_helper(pre, post, 0, len(pre) - 1, 0, len(post) - 1, post_map) return inorder_traversal(root)"},{"question":"You are given a list of distinct integers. Your task is to generate all possible permutations of the list in an efficient manner. You need to implement the function `find_permutations`. Function Signature ```python def find_permutations(nums: List[int]) -> List[List[int]]: ``` # Input - `nums`: A list of distinct integers. Constraints: 1 ≤ nums.length ≤ 10, -100 ≤ nums[i] ≤ 100 # Output - A list of lists, where each inner list is a unique permutation of `nums`. # Constraints - Permutations must not contain any duplicate sequence. - The output list may be in any order. # Performance Requirements - The solution should be optimized to handle the upper constraint efficiently. # Example ```python assert find_permutations([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] assert find_permutations([0, -1, 1]) == [[0, -1, 1], [0, 1, -1], [-1, 0, 1], [-1, 1, 0], [1, 0, -1], [1, -1, 0]] ``` Use the inspired technique from the provided code snippets to leverage recursive depth-first search to solve this.","solution":"from typing import List def find_permutations(nums: List[int]) -> List[List[int]]: from itertools import permutations return list(map(list, permutations(nums)))"},{"question":"# Ordered Stack Implementation **Scenario**: You are tasked with implementing an `OrderedStack` class for a scheduling system that requires inserted items to be kept in order so that the system can always retrieve the highest priority task quickly. **Task**: Implement the `OrderedStack` class with the following methods: 1. **push(item)**: Insert `item` into the stack while maintaining sorted order. 2. **pop()**: Remove and return the top item from the stack. 3. **peek()**: Return the top item without removing it. 4. **is_empty()**: Check if the stack is empty. 5. **size()**: Return the number of items in the stack. **Input/Output**: - `push(item: int) -> None`: Adds an integer to the stack. - `pop() -> int`: Removes and returns the top item. - `peek() -> int`: Returns the top item without removing it. - `is_empty() -> bool`: Returns `True` if the stack is empty, `False` otherwise. - `size() -> int`: Returns the number of items in the stack. **Constraints**: - All items in the stack are non-negative integers. - The stack operations should handle typical edge cases, such as popping from an empty stack or pushing a very large number of items. **Performance Requirements**: - It is acceptable for the `push` operation to be O(n) in the worst case, but other operations should be O(1). ```python class OrderedStack: def __init__(self): self.items = [] def is_empty(self) -> bool: return self.items == [] def push(self, item: int) -> None: temp_stack = OrderedStack() if self.is_empty() or item > self.peek(): self._push_t(item) else: while not self.is_empty() and self.peek() > item: temp_stack._push_t(self.pop()) self._push_t(item) while not temp_stack.is_empty(): self._push_t(temp_stack.pop()) def _push_t(self, item: int) -> None: Private method to push an item self.items.append(item) def pop(self) -> int: if self.is_empty(): raise IndexError(\\"Stack is empty\\") return self.items.pop() def peek(self) -> int: return self.items[-1] def size(self) -> int: return len(self.items) ``` Implement the class and test it with various edge cases to ensure it works correctly. **Example Use Case**: ```python stack = OrderedStack() stack.push(5) stack.push(1) stack.push(3) print(stack.pop()) # Outputs: 5 (highest item) print(stack.size()) # Outputs: 2 print(stack.peek()) # Outputs: 3 (next highest item) ```","solution":"class OrderedStack: def __init__(self): self.items = [] def is_empty(self) -> bool: return not self.items def push(self, item: int) -> None: temp_stack = [] while self.items and self.items[-1] > item: temp_stack.append(self.items.pop()) self.items.append(item) while temp_stack: self.items.append(temp_stack.pop()) def pop(self) -> int: if self.is_empty(): raise IndexError(\\"Stack is empty\\") return self.items.pop() def peek(self) -> int: if self.is_empty(): raise IndexError(\\"Stack is empty\\") return self.items[-1] def size(self) -> int: return len(self.items)"},{"question":"# Linked List Range Removal **Scenario**: You are tasked to develop a function that efficiently processes requests to remove specific ranges from a linked list. This operation is vital in scenarios such as log data cleaning, where specific intervals of data need to be purged based on certain criteria. **Task**: Implement `remove_range(head: ListNode, start: int, end: int) -> ListNode` to achieve the following. Given a singly linked list, remove all nodes from index `start` to `end`, inclusive. Input: * `head` - The head node of a singly linked list where each node contains an integer value and a link to the next node. * `start`, `end` - Integer indices such that `0 <= start <= end < size of list`. The range is guaranteed to be valid. Output: * The function should return the head of the modified linked list. Constraints: 1. The list size will be between 1 and 1000 inclusive. 2. You may assume that `start` and `end` will be valid indices based on the size of the list. 3. The list is singly linked (i.e., each node has only one next pointer). Examples: Example 1: ```python # Given linked list: 8 -> 13 -> 17 -> 4 -> 9 -> 12 -> 98 -> 41 -> 7 -> 23 -> 0 -> 92 # start = 3, end = 8 # After remove_range operation: # Linked list becomes: 8 -> 13 -> 17 -> 23 -> 0 -> 92 ``` Example 2: ```python # Given linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 6 # start = 0, end = 2 # After remove_range operation: # Linked list becomes: 4 -> 5 -> 6 ``` **Implementation Notes**: - Ensure proper boundary checks and efficient node pointer adjustments. - Handle cases where the head node itself is part of the range to be removed. - Maintain list integrity to avoid memory leaks or dangling pointers.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_range(head: ListNode, start: int, end: int) -> ListNode: Removes nodes from index start to end in a singly linked list. Parameters: head (ListNode): The head node of the linked list. start (int): The start index (inclusive) of the range to remove. end (int): The end index (inclusive) of the range to remove. Returns: ListNode: The head of the modified linked list. dummy = ListNode(0) dummy.next = head current = dummy for _ in range(start): current = current.next node_before_range = current for _ in range(end - start + 1): current = current.next node_before_range.next = current.next return dummy.next"},{"question":"Scenario You are tasked with building a library that efficiently handles calculations for mathematical properties and relationships involving integers. The core functions include computing the greatest common divisor (GCD) using both iterative and bitwise methods, least common multiple (LCM), and counting the number of trailing zeros in a binary representation of a number. Question 1. **Function: `improved_gcd`** Write a function `improved_gcd(a: int, b: int) -> int` that computes the greatest common divisor of two positive integers `a` and `b` using Euclid’s algorithm. You must handle edge cases such as negative and zero values gracefully by raising an appropriate error message. 2. **Function: `efficient_lcm`** Write a function `efficient_lcm(a: int, b: int) -> int` that computes the least common multiple of two positive integers `a` and `b`. This should leverage the `improved_gcd` function. 3. **Function: `trailing_zero_count`** Write a function `trailing_zero_count(x: int) -> int` that calculates the number of trailing zeros in the binary representation of a positive integer `x`. 4. **Function: `gcd_with_bitwise`** Write a function `gcd_with_bitwise(a: int, b: int) -> int` to compute the greatest common divisor using bitwise operators. The function should closely follow the provided algorithm but also include necessary error handling as implemented in `improved_gcd`. Constraints * All input integers `a` and `b` should be non-negative and within the range of 1 to 10^9. * The functions should be optimized to handle large inputs efficiently. * Raise `ValueError` for any invalid inputs such as negative numbers and zeroes where applicable. Example ```python assert improved_gcd(25, 15) == 5 assert efficient_lcm(4, 6) == 12 assert trailing_zero_count(40) == 3 assert gcd_with_bitwise(48, 18) == 6 ```","solution":"def improved_gcd(a: int, b: int) -> int: Compute the greatest common divisor using Euclid\'s algorithm. if a <= 0 or b <= 0: raise ValueError(\'Both inputs must be positive integers.\') while b: a, b = b, a % b return a def efficient_lcm(a: int, b: int) -> int: Compute the least common multiple using the GCD function. if a <= 0 or b <= 0: raise ValueError(\'Both inputs must be positive integers.\') return a * b // improved_gcd(a, b) def trailing_zero_count(x: int) -> int: Calculate the number of trailing zeros in the binary representation of a number. if x <= 0: raise ValueError(\'Input must be a positive integer.\') count = 0 while (x & 1) == 0: count += 1 x >>= 1 return count def gcd_with_bitwise(a: int, b: int) -> int: Compute the greatest common divisor using bitwise operators. if a < 0 or b < 0: raise ValueError(\'Both inputs must be non-negative integers.\') if a == 0: return b if b == 0: return a shift = __builtin_ctz(a | b) a >>= __builtin_ctz(a) while b != 0: b >>= __builtin_ctz(b) if a > b: a, b = b, a b -= a return a << shift def __builtin_ctz(x): if x == 0: return 32 n = 0 if (x & 0x0000FFFF) == 0: n += 16; x >>= 16 if (x & 0x000000FF) == 0: n += 8; x >>= 8 if (x & 0x0000000F) == 0: n += 4; x >>= 4 if (x & 0x00000003) == 0: n += 2; x >>= 2 if (x & 0x00000001) == 0: n += 1 return n"},{"question":"# Question Problem Statement: Given a list of digits representing a non-negative integer, write a function `increment_number(digits: List[int]) -> List[int]` that adds one to the number and returns the result as a new list of digits. The input list of digits represents a number such that the most significant digit is at the start of the list. For instance, the list [1, 2, 3] represents the number 123. Input: * `digits`: A list of integers where each integer is a digit (0-9) in the range from 0 to 9, and the list should not have leading zeros. Output: * Returns a list of integers representing the number obtained by adding one. Constraints: * The input list will be non-empty. * All elements in the list will be in the range from 0 to 9 (inclusive). Examples: ```python # Example 1 increment_number([1, 2, 3]) # Output: [1, 2, 4] # Example 2 increment_number([9, 9, 9]) # Output: [1, 0, 0, 0] # Example 3 increment_number([0]) # Output: [1] # Example 4 increment_number([2, 8, 9]) # Output: [2, 9, 0] ``` Notes: * Your function should handle edge cases like all nines correctly, and it should be efficient even for large lists.","solution":"from typing import List def increment_number(digits: List[int]) -> List[int]: Given a list of digits representing a non-negative integer, this function returns the number obtained by adding one to the input number. # Start from the end of the list for i in reversed(range(len(digits))): # Add one to the current digit if digits[i] < 9: digits[i] += 1 return digits # If it\'s a nine, make it zero and continue to the next digit digits[i] = 0 # If we finished the loop and all digits were nine, # we need to add one more digit at the beginning return [1] + digits"},{"question":"# Coding Assessment Scenario A backend server processes transaction logs by comparing records with the previous state. Your task is to identify the latest transaction appended to the logs list. Given two strings `s` and `t` where `t` is derived by randomly shuffling `s` and appending one more letter at a random position, find the additional character. Challenge Write a function `find_difference` that takes two strings `s` and `t` as inputs and returns the character in string `t` that was not present in string `s`. ```python def find_difference(s: str, t: str) -> str: # Your code here ``` Input - `s`: A string of lowercase letters with length n. - `t`: A string of lowercase letters with length n+1, containing all characters of `s` plus one additional character. Output - A single character that represents the additional letter in the string `t`. Constraints - Both `s` and `t` consist of lowercase English letters only. - Strings `s` and `t` are non-empty. - String `t` is generated by randomly shuffling `s` and adding one more letter at a random position. Example ```python Input: s = \\"abcd\\" t = \\"abecd\\" Output: \'e\' Explanation: The letter \'e\' was added to `s` to form `t`. Input: s = \\"xyz\\" t = \\"zxya\\" Output: \'a\' Explanation: The letter \'a\' was added to `s` to form `t`. ``` Additional Test Cases - `s = \\"apple\\"` and `t = \\"apples\\"` should return `\'s\'`. - `s = \\"race\\"` and `t = \\"crael\\"` should return `\'l\'`. Performance Ensure that your implementation runs efficiently even for larger strings up to length 10^4.","solution":"def find_difference(s: str, t: str) -> str: Find the additional character in string t which is not present in string s. Args: s (str): A string of lowercase letters. t (str): A string of lowercase letters which is s plus one more additional letter. Returns: str: The additional character in t. from collections import Counter # Count characters in each string count_s = Counter(s) count_t = Counter(t) # Find the character that has an additional count in t for char in count_t: if count_t[char] != count_s.get(char, 0): return char"},{"question":"Problem: Efficient Modular Exponentiation for Cryptography You are tasked with implementing a function that performs modular exponentiation effectively. Your function will be a cornerstone for cryptographic algorithms where operations under modular arithmetic are crucial. Ensure your solution is optimized for very large numbers, as it is common in cryptographic applications. # Function Signature ```python def fast_modular_exponentiation(base: int, exponent: int, modulus: int) -> int: pass ``` # Input * `base` (1 ≤ base ≤ 10^9): An integer representing the base number. * `exponent` (0 ≤ exponent ≤ 10^9): An integer representing the exponent. * `modulus` (1 ≤ modulus ≤ 10^9): An integer representing the modulus. # Output * Returns the integer result of ((base ^ exponent) % mod). # Constraints * Ensure the function handles very large numbers efficiently. * Return 1 if the exponent is 0 (since any number raised to the power of 0 is 1). # Examples ```python assert fast_modular_exponentiation(2, 10, 1000) == 24 # (2^10) % 1000 = 1024 % 1000 = 24 assert fast_modular_exponentiation(3, 7, 13) == 9 # (3^7) % 13 = 2187 % 13 = 9 assert fast_modular_exponentiation(10, 0, 5) == 1 # (10^0) % 5 = 1 ``` # Description - **Scenario**: You are working on an encryption algorithm and you need to ensure that large powers can be computed efficiently while keeping results within a specific numerical range. This prevents overflow and keeps computations manageable, which is critical for the security and performance of cryptographic systems. - **Implementation Details**: Implement the modular exponentiation algorithm as explained, ensuring it is both time and space efficient. Carefully handle edge cases like an exponent of 0, and ensure the function raises appropriate errors for invalid inputs like a negative exponent.","solution":"def fast_modular_exponentiation(base: int, exponent: int, modulus: int) -> int: Performs modular exponentiation. Returns (base^exponent) % modulus using an efficient algorithm. :param base: The base number (1 <= base <= 10^9) :param exponent: The exponent (0 <= exponent <= 10^9) :param modulus: The modulus (1 <= modulus <= 10^9) :return: The result of (base^exponent) % modulus if modulus == 1: return 0 result = 1 base = base % modulus while exponent > 0: if (exponent % 2) == 1: # If exponent is odd, multiply base with result result = (result * base) % modulus exponent = exponent >> 1 # Equivalent to exponent // 2 base = (base * base) % modulus return result"},{"question":"# Question: Implementing and Analyzing Pigeonhole Sort You are given a list of integers that need to be sorted using the pigeonhole sorting algorithm. Your task is to implement this sorting algorithm and ensure that it adheres to the principles and optimizations of pigeonhole sort. Requirements: 1. Implement the function `pigeonhole_sort(arr)` that accepts a list of integers `arr` and sorts it using the pigeonhole sort algorithm. 2. The function should return the sorted list. 3. Consider all edge cases and ensure your implementation is efficient concerning both time and space complexity. Input: - A list of integers `arr` with length `n` (0 ≤ n ≤ 10^5). - The values within `arr` will be within a reasonable range to ensure the algorithm\'s suitability. Output: - A sorted list of integers. Constraints: - The value range between the minimum and maximum in the list will not exceed 1000 for the input list. Example: ```python # Example 1 arr = [8, 3, 2, 7, 4] print(pigeonhole_sort(arr)) # Output: [2, 3, 4, 7, 8] # Example 2 arr = [5, 3, 8, -2, 1, 0] print(pigeonhole_sort(arr)) # Output: [-2, 0, 1, 3, 5, 8] # Example 3 arr = [] print(pigeonhole_sort(arr)) # Output: [] # Example 4 arr = [2] print(pigeonhole_sort(arr)) # Output: [2] ``` Remember to handle edge cases, such as empty lists, lists with one element, and lists with negative integers.","solution":"def pigeonhole_sort(arr): Sorts a list of integers using the Pigeonhole Sorting algorithm. Parameters: arr (list of int): The list of integers to be sorted. Returns: list of int: Sorted list of integers. if not arr: return arr min_val = min(arr) max_val = max(arr) size = max_val - min_val + 1 # Create an array of pigeonholes and initialize them to 0 holes = [0] * size # Populate the pigeonholes for number in arr: holes[number - min_val] += 1 # Collect the sorted elements sorted_arr = [] for index, count in enumerate(holes): sorted_arr.extend([index + min_val] * count) return sorted_arr"},{"question":"# FFT Implementation and Analysis Challenge: You are given a sequence of complex numbers, and your task is to compute their discrete Fourier transform (DFT) using the Fast Fourier Transform (FFT) algorithm. The implementation relies on the Cooley-Tukey divide-and-conquer approach. Task: 1. **Implement the `fft` function**: - Input: a list of complex numbers `x` of size ( N ) (where ( N ) is a power of two). - Output: a list of complex numbers representing the DFT of the input list. 2. **Edge Case Handling**: - Extend your function to check for non-power-of-two inputs. Raise a `ValueError` if the input size ( N ) is not a power of two. 3. **Extension Task**: - Implement an iterative version of the FFT to handle larger inputs more efficiently in terms of memory usage. ```python def fft(x): Compute the Fast Fourier Transform (FFT) of a list of complex numbers. Parameters: x (list of complex): Input list of complex numbers of size N (N is a power of two). Returns: list of complex: The FFT of the input list. pass # Replace this with your implementation # Testing the fft function with sample input input_data = [2.0+2j, 1.0+3j, 3.0+1j, 2.0+2j] output_data = fft(input_data) print(output_data) # Sample Output: [8+8j, 2j, 2-2j, -2+0j] ``` Constraints: - The input list `x` will always have complex number elements. - Your solution should work within reasonable time and space limits for input sizes up to ( N = 2^{16} ). Note: 1. Pay attention to handling edge cases, such as empty input or non-power-of-two length inputs. 2. Optimize for performance where possible. 3. Document your code properly to explain the logic for combining results during the FFT computation.","solution":"import cmath def fft(x): Compute the Fast Fourier Transform (FFT) of a list of complex numbers. Parameters: x (list of complex): Input list of complex numbers of size N (N is a power of two). Returns: list of complex: The FFT of the input list. Raises: ValueError: If the length of input list `x` is not a power of two. N = len(x) if N <= 0 or (N & (N - 1)) != 0: raise ValueError(\\"The length of input list must be a power of two.\\") if N == 1: return x even_fft = fft(x[0:N:2]) odd_fft = fft(x[1:N:2]) combined = [0] * N for k in range(N // 2): t = cmath.exp(-2j * cmath.pi * k / N) * odd_fft[k] combined[k] = even_fft[k] + t combined[k + N // 2] = even_fft[k] - t return combined"},{"question":"# Question: Detecting Cycle in a Circular Route **Scenario**: You have a circular track with nodes positioned linearly, some of which might link back to earlier nodes creating a cycle. Given a starting node, determine if there is a cycle in this circular route. # Function Signature ```python def has_cycle(start_node: Node) -> bool: pass ``` # Input * `start_node` (Node object): The starting node of the circular track. # Output * Returns `True` if there is a cycle, `False` otherwise. # Constraints * A node has the structure: ```python class Node: def __init__(self, x): self.val = x self.next = None ``` * The number of nodes ( n ) in the circular route is such that ( 1 leq n leq 10^4 ). # Example Example 1 **Input**: ``` 1 -> 2 -> 3 -> 4 -> 5 -> 2 (cycle starts again at 2) ``` **Output**: ``` True ``` Example 2 **Input**: ``` 1 -> 2 -> 3 -> 4 -> 5 -> None (no cycle) ``` **Output**: ``` False ``` # Notes To ensure efficient runtime and minimal memory usage: - **Time Complexity** should be (O(n)). - **Space Complexity** should be (O(1)). Write the function `has_cycle` to detect cycles using constant space.","solution":"class Node: def __init__(self, x): self.val = x self.next = None def has_cycle(start_node: Node) -> bool: Returns True if there\'s a cycle in the linked list starting from start_node, else False. Uses Floyd\'s Tortoise and Hare algorithm. if not start_node or not start_node.next: return False slow = start_node fast = start_node while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"# Question: Binary Tree Level Order Traversal with Sum Design a function that not only returns the level order traversal of its nodes\' values but also returns the sum of values at each level. Implement this function for a binary tree. Input - A binary tree node `root` which represents the root of the binary tree. - Each `TreeNode` has: - an integer value `val` - a left child (`left`) - a right child (`right`) Output - A list of tuples, where each tuple contains: - A list of node values at the corresponding level in the tree - The sum of the values at that level. Constraints - The number of nodes in the tree will be in the range [0, 10^4]. Example Given binary tree: ``` 3 / 9 20 / 15 7 ``` Your function should return: ``` [ ([3], 3), ([9, 20], 29), ([15, 7], 22) ] ``` Requirements - Your solution should run in O(N) time complexity. - You should try to minimize the space complexity, though O(N) space is expected given BFS traversal. Function Signature ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_with_sum(root: TreeNode) -> List[Tuple[List[int], int]]: pass ``` Happy coding!","solution":"from typing import List, Tuple, Optional from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_with_sum(root: Optional[TreeNode]) -> List[Tuple[List[int], int]]: if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) current_level = [] level_sum = 0 for _ in range(level_size): node = queue.popleft() current_level.append(node.val) level_sum += node.val if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append((current_level, level_sum)) return result"},{"question":"**Question**: You are working on a project that requires sorting a large collection of floating-point numbers efficiently. To achieve this, you intend to use the bucket sort algorithm but optimize it by utilizing an efficient sorting method for each bucket. * **Task**: Implement the `bucket_sort` function to sort a list of floating-point numbers in the range [0, 1). **Function Signature**: ```python def bucket_sort(arr: List[float]) -> List[float]: pass ``` **Input**: * A list of `n` floating-point numbers where (0 leq arr[i] < 1). **Output**: * The sorted list of floating-point numbers. **Constraints**: * The list may contain up to (10^6) floating-point numbers. * You must use the bucket sort algorithm. * Enhance the performance by employing a different sorting technique on each bucket than insertion sort, such as Timsort (which is Python’s built-in `sorted` function). **Example**: ```python input_arr = [0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68] expected_output = [0.12, 0.17, 0.21, 0.23, 0.26, 0.39, 0.68, 0.72, 0.78, 0.94] assert bucket_sort(input_arr) == expected_output ``` * **Edge Cases**: * Empty list should return an empty list. * List with identical elements should return the same list. Focus on maintaining the efficiency and correctness of the bucket sort while handling the large input constraints.","solution":"from typing import List def bucket_sort(arr: List[float]) -> List[float]: if not arr: return [] # Number of buckets n = len(arr) buckets = [[] for _ in range(n)] # Distribute input array values into buckets for val in arr: index = int(val * n) buckets[index].append(val) # Sort individual buckets and concatenate them sorted_array = [] for bucket in buckets: sorted_array.extend(sorted(bucket)) return sorted_array"},{"question":"Implement the additional method `delete` in the `BST` class to allow the removal of nodes from the Binary Search Tree. Your `delete` method should correctly remove nodes while preserving the properties of the BST. # Requirements: 1. **Input**: The value to be deleted as an integer. 2. **Output**: Return `True` if the value was successfully deleted, or `False` if the value was not found in the BST. 3. **Constraints**: * You may assume that the BST does not contain duplicate values. 4. **Performance**: Aim to maintain an average time complexity of O(log N) for deletion operations. # Instructions: - Implement the `delete` method in the `BST` class. - The method should handle: 1. Nodes with no children (leaf nodes). 2. Nodes with one child. 3. Nodes with two children (replace the node with its in-order successor or predecessor and ensure the tree remains a BST). # Example: Given the BST created in the initial code: ``` 10 / 6 15 / / 4 9 12 24 / / 7 20 30 / 18 ``` Examples of deletions: 1. Deleting a leaf node: `delete(7)` modifies the tree to: ``` 10 / 6 15 / / 4 9 12 24 / 20 30 / 18 ``` 2. Deleting a node with one child: `delete(12)` modifies the tree to: ``` 10 / 6 15 / 4 9 24 / 20 30 / 18 ``` 3. Deleting a node with two children: `delete(15)` modifies the tree to: ``` 10 / 6 18 / / 4 9 12 24 / 20 30 ``` # Unit Testing: To validate your implementation, additional unit tests should be added to the `TestSuite` class to test cases for deleting leaf nodes, nodes with one child, and nodes with two children.","solution":"class BST: class Node: def __init__(self, value): self.value = value self.left = None self.right = None def __init__(self): self.root = None def insert(self, value): if not self.root: self.root = self.Node(value) else: self._insert(value, self.root) def _insert(self, value, node): if value < node.value: if node.left: self._insert(value, node.left) else: node.left = self.Node(value) else: if node.right: self._insert(value, node.right) else: node.right = self.Node(value) def find(self, value): return self._find(value, self.root) def _find(self, value, node): if node is None: return False if value == node.value: return True if value < node.value: return self._find(value, node.left) else: return self._find(value, node.right) def delete(self, value): self.root, deleted = self._delete(self.root, value) return deleted def _delete(self, node, value): if not node: return node, False if value < node.value: node.left, deleted = self._delete(node.left, value) elif value > node.value: node.right, deleted = self._delete(node.right, value) else: # Node to be deleted found deleted = True if not node.left: return node.right, deleted if not node.right: return node.left, deleted # Node with two children: Get the in-order successor (smallest in the right subtree) min_larger_node = self._get_min(node.right) node.value = min_larger_node.value node.right, _ = self._delete(node.right, node.value) return node, deleted def _get_min(self, node): current = node while current.left: current = current.left return current"},{"question":"Find the Last Occurrence in a Sorted Array You are tasked with implementing a function that finds the index of the last occurrence of a specified target number in a given sorted array. The array is sorted in increasing order, and we assume there could be multiple occurrences of the target number. Function Signature ```python def find_last_occurrence(arr: List[int], target: int) -> int: pass ``` # Input * `arr`: A list of integers sorted in increasing order. * `target`: An integer whose last occurrence index is to be found. # Output * Returns an integer representing the index of the last occurrence of the target number in the list. * If the target number is not found, return `-1`. # Constraints * The array length is between 1 and (10^6) elements. * Each element in the array is between (-10^9) and (10^9). # Examples ```python # Example 1 arr = [1, 2, 2, 2, 3, 4, 5] target = 2 Output: 3 # Example 2 arr = [5, 7, 7, 8, 8, 10] target = 8 Output: 4 # Example 3 arr = [1, 3, 4, 6, 7] target = 5 Output: -1 # Example 4 arr = [100] target = 100 Output: 0 ``` # Requirements * Your implementation should have a logarithmic time complexity, i.e., O(log n). * Handle edge cases such as an empty array or the target not present in the array. # Notes * Ensure the input array is validated to be non-null and sorted. * You are not allowed to use external libraries for searching. Good luck, and ensure to optimize for performance and correctness.","solution":"from typing import List def find_last_occurrence(arr: List[int], target: int) -> int: Finds the index of the last occurrence of a target number in a sorted list. Args: arr - List of integers sorted in increasing order. target - The target integer to find. Returns: The index of the last occurrence of the target number in the list, or -1 if not found. left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: result = mid # target found, move right to find last occurrence left = mid + 1 elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return result"},{"question":"# Context You are working on a hardware control software that needs to manipulate binary representations of numbers for configuring different hardware registers. A common requirement is to remove bits from specific positions in the binary representation of integers. # Problem Statement Implement a function `remove_bit` that removes a bit at a given position from the binary representation of an integer. The function should handle both positive and negative integers and should validate the input for correct constraints. # Function Signature ```python def remove_bit(num: int, i: int) -> int: pass ``` # Input - An integer `num` (can be positive or negative). - A non-negative integer `i`, which is the position of the bit to be removed (0-indexed from the rightmost bit). # Output - Return the updated integer after removing the bit at position `i`. # Constraints - `num` can be any 32-bit integer. - `i` should be a valid bit position in the given integer (0 ≤ i < number of bits in `num`). # Examples ```python assert remove_bit(21, 2) == 9 # 10101 -> remove 2nd bit -> 1001 assert remove_bit(21, 4) == 5 # 10101 -> remove 4th bit -> 101 assert remove_bit(21, 0) == 10 # 10101 -> remove 0th bit -> 1010 assert remove_bit(-5, 0) == -3 # -101 -> remove 0th bit -> -11 assert remove_bit(-5, 2) == -1 # -101 -> remove 2nd bit -> -1 ``` **Note**: Ensure your implementation properly handles negative numbers and validates the bit position `i` to avoid out-of-range errors. # Additional Notes Consider the binary representation of negative numbers can be challenging due to two\'s complement representation, which you need to account for while manipulating bits.","solution":"def remove_bit(num: int, i: int) -> int: Remove the bit at the specified position i from the binary representation of num. # Shift the number right by (i + 1) to remove the bit at index i part1 = num >> (i + 1) # Shift the part1 left by i to put the bits back into their original positions part1 <<= i # Create a mask for the lower bits mask = (1 << i) - 1 # Extract lower bits from num part2 = num & mask # Combine the two parts return part1 | part2"},{"question":"# Question: **In-order Tree Traversal** You are given the task of implementing an in-order traversal function for a binary tree. Your task is to write two versions of the function: one iterative and one recursive. Function Specifications 1. **Iterative Version**: - Function Name: `inorder_iter(root: Node) -> List[int]` - Input: A `Node` representing the root of the binary tree. - Output: A list of integers representing the in-order traversal of the binary tree. 2. **Recursive Version**: - Function Name: `inorder_rec(root: Node) -> List[int]` - Input: A `Node` representing the root of the binary tree. - Output: A list of integers representing the in-order traversal of the binary tree. # Input Format - Each node of the tree is represented by an instance of the `Node` class: ```python class Node: def __init__(self, val, left=None, right=None): self.val = val self.left = left self.right = right ``` # Example Given the following binary tree, the in-order traversal should produce `[25, 50, 75, 100, 125, 150, 175]`. ``` 100 / 50 150 / / 25 75 125 175 ``` # Constraints - The number of nodes in the tree will not exceed 1000. - Node values are unique integers. # Performance Requirements Your solution should have an average time complexity of O(n) and space complexity of O(h), where n is the number of nodes and h is the height of the tree.","solution":"class Node: def __init__(self, val, left=None, right=None): self.val = val self.left = left self.right = right def inorder_iter(root: Node) -> list[int]: result = [] stack = [] current = root while current or stack: while current: stack.append(current) current = current.left current = stack.pop() result.append(current.val) current = current.right return result def inorder_rec(root: Node) -> list[int]: result = [] def helper(node): if node: helper(node.left) result.append(node.val) helper(node.right) helper(root) return result"},{"question":"String Deduplication Challenge # Context You are working on preprocessing user data where you need to ensure that no character appears more than once in any given string. Your task is to implement a function that removes all recurring characters from a string while preserving the order of first occurrence. # Problem Statement Write a function `delete_reoccurring_characters(string: str) -> str` that takes a string as input and returns a new string with all duplicate characters removed while preserving the order of their first appearance. # Input - A single string `string` where `1 <= len(string) <= 10^5`. # Output - A new string with duplicates removed. # Constraints - The input will consist of printable ASCII characters. - The function must run in O(n) time complexity. - The function should handle edge cases such as empty strings and strings with all identical characters. # Examples ```python delete_reoccurring_characters(\\"google\\") # should return \\"gole\\" delete_reoccurring_characters(\\"programming\\") # should return \\"progamin\\" delete_reoccurring_characters(\\"aabcccdd\\") # should return \\"abcd\\" delete_reoccurring_characters(\\"\\") # should return \\"\\" ``` # Notes * Ensure that your function performs efficiently for large inputs. * You should avoid using additional data structures that can increase the space complexity beyond O(n). # Additional Tests Consider adding more edge cases to ensure the robustness of your solution.","solution":"def delete_reoccurring_characters(string: str) -> str: Removes all recurring characters from a string while preserving the order of first occurrence. seen = set() result = [] for char in string: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"You are tasked with designing a validation system for a simple robotic movement simulation. The robot moves in a 2D plane starting at the origin point (0, 0). The robot can make four types of moves represented by characters in a string: \'U\' (Up), \'D\' (Down), \'L\' (Left), and \'R\' (Right). Write a function `is_circle(moves: str) -> bool` that determines whether the sequence of moves described in the string `moves` results in the robot returning to the original position (0, 0). Input - A string `moves` consisting of characters \'U\', \'D\', \'L\', and \'R\' which represent the moves of the robot. Output - A boolean value `True` if the robot returns to the origin, `False` otherwise. Constraints - The length of `moves` will be in the range [0, 10000]. - The input string will consist only of characters \'U\', \'D\', \'L\', and \'R\'. Example ```python # Example 1 moves = \\"UD\\" print(is_circle(moves)) # Output: True # Example 2 moves = \\"LL\\" print(is_circle(moves)) # Output: False ``` Detailed Requirements - Consider all scenarios including empty strings and uneven moves. - Ensure the function runs efficiently within the provided input size constraints. Explanation - The robot returns to the origin if the total number of up moves (\'U\') is equal to the total number of down moves (\'D\') and the total number of left moves (\'L\') is equal to the total number of right moves (\'R\'). Function Signature ```python def is_circle(moves: str) -> bool: # Your implementation goes here ```","solution":"def is_circle(moves: str) -> bool: Returns True if the sequence of moves results in the robot returning to the original position (0, 0), otherwise returns False. vertical = moves.count(\'U\') - moves.count(\'D\') horizontal = moves.count(\'R\') - moves.count(\'L\') return vertical == 0 and horizontal == 0"},{"question":"# Question: Strongly Connected Components in Directed Graph **Context**: You have been hired by a tech company to work on their network reliability system. Your task is to ensure that their directed network graph remains strongly connected. A strongly connected graph implies that there exists a path between any pairs of nodes in both directions. Given the importance of network reliability, you need to write a function that determines if the current network graph is strongly connected. **Function Specification**: Write a function `is_strongly_connected(vertex_count: int, edges: List[Tuple[int, int]]) -> bool` that accepts: - An integer `vertex_count`: the total number of vertices in the graph. - A list of tuples `edges`, where each tuple `(source, target)` represents a directed edge from `source` to `target`. The function should return a boolean indicating whether the given directed graph is strongly connected or not. **Input and Output Formats**: - **Input**: - `vertex_count` (1 ≤ vertex_count ≤ 10^4): Number of vertices. - `edges`: A list of up to 10^5 tuples where each tuple contains two integers representing directed edges in the graph. - **Output**: - Return `True` if the graph is strongly connected. - Return `False` otherwise. **Constraints**: - Take into account the varying sizes and connectivity of graphs. - Ensure your solution is efficient in both time and space. **Example**: ```python # Example Input 1: vertex_count = 5 edges = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 0)] # Expected Output: True # Example Input 2: vertex_count = 3 edges = [(0, 1), (1, 2)] # Expected Output: False ``` **Scenarios**: 1. You have to make sure your solution handles graphs with different connectivity levels. 2. Consider optimizations to handle edge cases and ensure that the solution is efficient for large graphs. 3. Pay attention to graph reversal and rechecking DFS to maintain correctness.","solution":"from typing import List, Tuple def is_strongly_connected(vertex_count: int, edges: List[Tuple[int, int]]) -> bool: from collections import defaultdict, deque def bfs(graph, start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) queue.extend(graph[node]) return visited # Build the original graph and the reversed graph graph = defaultdict(list) reversed_graph = defaultdict(list) for src, tgt in edges: graph[src].append(tgt) reversed_graph[tgt].append(src) # Step 1: Check reachability from the first vertex start_node = 0 visited_from_start = bfs(graph, start_node) if len(visited_from_start) != vertex_count: return False # Step 2: Check reachability in the reversed graph visited_from_reversed_start = bfs(reversed_graph, start_node) if len(visited_from_reversed_start) != vertex_count: return False return True"},{"question":"You are tasked with implementing a specialized Hash Table for a personal project. This Hash Table must support the following operations efficiently: - Insert a key-value pair. - Retrieve a value by its key. - Delete a key-value pair. - Resize the table dynamically when it\'s about 70% full to ensure efficient operations. Given a blueprint of a Hash Table data structure, your task is to implement a `ResizableHashTable` class that: 1. Uses a simple hashing function (mod the key by current table size). 2. Handles collisions using linear probing. 3. Automatically resizes the hash table when 70% of the slots are filled by enlarging its size and rehashing all the existing key-value pairs. # Requirements - Implement the `ResizableHashTable` which inherits from a provided `HashTable` base class. - Override the `put` method to include resizing logic. - Implement the `__resize` method to double the table size and rehash existing elements. # Specifications - **Class**: `ResizableHashTable` - **Methods**: - `put(key, value)`: Inserts a key-value pair into the hash table. - `__resize()`: Doubles the size of the hash table and rehashes all elements. # Input/Output Formats - **Input**: N/A (operations will be called directly for testing). - **Output**: N/A (state of the hash table will be verified via its methods). # Constraints - Only integers will be used for keys. # Performance Requirements - The operations should have an average-case time complexity of O(1). ```python class HashTable(object): # Provided implementation... class ResizableHashTable(HashTable): MIN_SIZE = 8 def __init__(self): super().__init__(self.MIN_SIZE) def put(self, key, value): rv = super().put(key, value) # TODO: Implement resizing logic when threshold is reached if len(self) >= (self.size * 2) / 3: self.__resize() def __resize(self): # TODO: Implement resize logic pass ``` Notes: - Make sure the `resize` operation preserves all the existing key-value pairs. - Test the resizing function with various load factors to ensure its correctness and efficiency. - Pay attention to edge cases such as deleting keys and inserting keys that cause collisions.","solution":"class HashTable: def __init__(self, size): self.size = size self.slots = [None] * size self.data = [None] * size def _hash_function(self, key): return key % self.size def put(self, key, value): hash_value = self._hash_function(key) if self.slots[hash_value] is None: self.slots[hash_value] = key self.data[hash_value] = value else: if self.slots[hash_value] == key: self.data[hash_value] = value else: next_slot = self._rehash(hash_value) while self.slots[next_slot] is not None and self.slots[next_slot] != key: next_slot = self._rehash(next_slot) if self.slots[next_slot] is None: self.slots[next_slot] = key self.data[next_slot] = value else: self.data[next_slot] = value def _rehash(self, old_hash): return (old_hash + 1) % self.size def get(self, key): start_slot = self._hash_function(key) position = start_slot while self.slots[position] is not None: if self.slots[position] == key: return self.data[position] position = self._rehash(position) if position == start_slot: return None return None def delete(self, key): start_slot = self._hash_function(key) position = start_slot while self.slots[position] is not None: if self.slots[position] == key: self.slots[position] = None self.data[position] = None return True position = self._rehash(position) if position == start_slot: return False return False def __len__(self): count = 0 for slot in self.slots: if slot is not None: count += 1 return count class ResizableHashTable(HashTable): MIN_SIZE = 8 def __init__(self): super().__init__(self.MIN_SIZE) def put(self, key, value): super().put(key, value) if len(self) >= (self.size * 2) / 3: self.__resize() def __resize(self): old_slots = self.slots old_data = self.data self.size = self.size * 2 self.slots = [None] * self.size self.data = [None] * self.size for i in range(len(old_slots)): if old_slots[i] is not None: super().put(old_slots[i], old_data[i])"},{"question":"Context You have recently learned about various sorting algorithms and how they operate under different circumstances. One of these algorithms, Stooge Sort, is known for its unique approach but is less practical due to its high time complexity. Now, it\'s time to put your understanding to the test! Task You are required to implement the Stooge Sort algorithm in Python, taking into consideration the performance and edge cases discussed. Function Signature ```python def stooge_sort(arr: List[int]) -> List[int]: ``` Input - A list of integers `arr` (0 ≤ len(arr) ≤ 1000) which needs to be sorted. Output - The function should return a new list of integers sorted in non-decreasing order. Constraints - Your solution should handle edge cases such as: - An empty list. - A list with all identical elements. - A list with elements in reverse order. Example ```python # Example 1: arr = [3, 1, 4, 1, 5] print(stooge_sort(arr)) # Output: [1, 1, 3, 4, 5] # Example 2: arr = [] print(stooge_sort(arr)) # Output: [] # Example 3: arr = [3, 3, 3, 3] print(stooge_sort(arr)) # Output: [3, 3, 3, 3] # Example 4: arr = [100, 50, 25, 0] print(stooge_sort(arr)) # Output: [0, 25, 50, 100] ``` # Notes - You should avoid modifying the input list `arr` directly. - Make sure to handle cases where the input list is already sorted or all elements are identical efficiently. Good luck, and happy coding!","solution":"from typing import List def stooge_sort(arr: List[int]) -> List[int]: Sorts the input list using Stooge Sort algorithm and returns a new sorted list. def stooge_sort_recursive(arr, l, h): if l >= h: return # If the first element is greater than the last, swap them if arr[l] > arr[h]: arr[l], arr[h] = arr[h], arr[l] # If there are more than two elements if h - l + 1 > 2: t = (h - l + 1) // 3 stooge_sort_recursive(arr, l, h - t) stooge_sort_recursive(arr, l + t, h) stooge_sort_recursive(arr, l, h - t) # Create a copy of the input list to avoid modifying it sorted_arr = arr[:] stooge_sort_recursive(sorted_arr, 0, len(sorted_arr) - 1) return sorted_arr"},{"question":"# String Matching Optimization Challenge Problem Statement You are given two strings, `haystack` and `needle`, and you need to return the index of the first occurrence of `needle` in `haystack`, or -1 if `needle` is not part of `haystack`. The provided implementation uses a brute-force approach with time complexity O(n*m). Your task is to implement this functionality using a more efficient algorithm with better time complexity. Requirements * Implement the function `optimized_contain_string(haystack: str, needle: str) -> int` * The function should run with time complexity O(n + m) Input/Output * **Input**: - `haystack`: A string where the search will be performed. (0 <= len(haystack) <= 5 * 10^4) - `needle`: A string to search for within `haystack`. (0 <= len(needle) <= 5 * 10^4) * **Output**: - An integer denoting the first index of `needle` in `haystack` or -1 if `needle` is not found. Constraints - If `needle` is an empty string, return 0. - If `needle` is longer than `haystack`, return -1. Example ```python assert optimized_contain_string(\\"hello\\", \\"ll\\") == 2 assert optimized_contain_string(\\"aaaaa\\", \\"bba\\") == -1 assert optimized_contain_string(\\"haystack\\", \\"\\") == 0 ``` # Note Consider using the Knuth-Morris-Pratt (KMP) string matching algorithm or any other efficient algorithm that offers O(n + m) time complexity. Good luck and happy coding!","solution":"def optimized_contain_string(haystack: str, needle: str) -> int: Return the index of the first occurrence of `needle` in `haystack`, or -1 if `needle` is not part of `haystack` using the KMP algorithm. if needle == \\"\\": return 0 if len(needle) > len(haystack): return -1 # Calculate LPS array def compute_lps(pattern: str) -> list: lps = [0] * len(pattern) length = 0 # length of the previous longest prefix suffix i = 1 while i < len(pattern): if pattern[i] == pattern[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps lps = compute_lps(needle) i = 0 # index for haystack j = 0 # index for needle while i < len(haystack): if needle[j] == haystack[i]: i += 1 j += 1 if j == len(needle): return i - j elif i < len(haystack) and needle[j] != haystack[i]: if j != 0: j = lps[j - 1] else: i += 1 return -1"},{"question":"# Question: Optimized Exchange Sort You are tasked with implementing a variant of the exchange sort algorithm designed to handle sizable datasets more efficiently. While exchange sort has quadratic time complexity, there might be optimizations possible for specific scenarios. **Scenario**: Imagine you have been provided with an array that is mostly sorted except for a few elements. Applying vanilla exchange sort algorithm isn\'t efficient. Improve the sorting mechanism to minimize unnecessary comparisons. **Alternate Requirement**: In addition, your implementation should keep track of the number of swaps it performs. This number should be returned along with the sorted array to gauge the effort the algorithm needed to sort the array. **Function Signature** ```python def optimized_exchange_sort(arr): Input: arr -> List[int]: A list of integers that needs to be sorted. Output: Tuple[List[int], int]: A tuple containing the sorted list and the number of swaps performed. ``` **Input** * A list of integers `arr` (1 ≤ len(arr) ≤ 10^4, -10^6 ≤ arr[i] ≤ 10^6). **Output** * A tuple containing: * Sorted list of integers. * The integer count of swaps performed while sorting. **Constraints** * The function should minimize the total number of swaps as efficiently as possible. * The sorting should still be accurate with respect to the array\'s original order. **Example**: ```python arr = [3, 3, 2, 1, 10] sorted_arr, swap_count = optimized_exchange_sort(arr) print(sorted_arr) # Output: [1, 2, 3, 3, 10] print(swap_count) # Output: (Number of swaps made) ``` **Notes** * You can use any approach that builds on the concept of exchange sort but optimizes it for the given constraints. * Ensure the algorithm handles all edge cases appropriately (e.g., already sorted array, empty array).","solution":"def optimized_exchange_sort(arr): Optimized exchange sort for mostly sorted arrays. Args: arr (list of int): A list of integers to be sorted. Returns: tuple: A tuple containing the sorted list and the number of swaps. n = len(arr) if n <= 1: return arr, 0 swap_count = 0 for i in range(n-1): for j in range(i+1, n): if arr[i] > arr[j]: arr[i], arr[j] = arr[j], arr[i] swap_count += 1 return arr, swap_count"},{"question":"# Question: Implement and Optimize Bitonic Sort Given the algorithm for Bitonic Sort, implement the bitonic sort function and optimize it for better performance in parallel computing environments. The function should take a list of integers and a boolean flag indicating the sorting order (ascending or descending). Ensure to handle edge cases and improve efficiency as much as possible. Requirements: 1. **Input**: - A list of integers `arr` of size `n`. - A boolean `reverse` which defaults to `False`. 2. **Output**: - The sorted list of integers in specified order. 3. **Constraints**: - The size of `arr` should be `2^k` for some integer `k >= 0`. - Optimize the sort for parallel execution (use `concurrent.futures` for parallel merging). 4. **Performance**: - The optimized implementation should demonstrate improved performance for larger arrays under parallel execution. Function Signature: ```python def bitonic_sort(arr: List[int], reverse: bool = False) -> List[int]: pass ``` Example Usage: ```python # Sorting in ascending order input_arr = [3, 7, 4, 8, 6, 2, 1, 5] print(bitonic_sort(input_arr)) # Output: [1, 2, 3, 4, 5, 6, 7, 8] # Sorting in descending order print(bitonic_sort(input_arr, reverse=True)) # Output: [8, 7, 6, 5, 4, 3, 2, 1] ``` Additional Notes: - Handle non-power-of-two inputs gracefully by raising a `ValueError`. - Optimize merging using parallel execution for an efficient high-performance solution.","solution":"from typing import List import concurrent.futures def bitonic_sort(arr: List[int], reverse: bool = False) -> List[int]: def compare_and_swap(i: int, j: int, direction: bool): if (arr[i] > arr[j]) == direction: arr[i], arr[j] = arr[j], arr[i] def bitonic_merge(start: int, size: int, direction: bool): if size > 1: mid = size // 2 for i in range(start, start + mid): compare_and_swap(i, i + mid, direction) bitonic_merge(start, mid, direction) bitonic_merge(start + mid, mid, direction) def bitonic_sort_recursive(start: int, size: int, direction: bool): if size > 1: mid = size // 2 bitonic_sort_recursive(start, mid, True) bitonic_sort_recursive(start + mid, mid, False) bitonic_merge(start, size, direction) n = len(arr) if (n & (n - 1)) != 0: raise ValueError(\\"Size of the input list must be a power of 2.\\") bitonic_sort_recursive(0, n, not reverse) return arr"},{"question":"# Binary Search in a Sorted Array Problem Statement You are given a sorted array of integers in ascending order. Implement a function `find_element` that takes the sorted array and a target value as input, and returns the index of the target in the array. If the target is not found, return `-1`. Function Signature ```python def find_element(array: List[int], target: int) -> int: ``` Input * `array`: A list of integers sorted in ascending order (e.g., `[2, 4, 6, 8, 10]`). * `target`: An integer value to search for in the array. Output * Returns the index of the target if found, otherwise returns `-1`. Constraints * The array length will be `0 <= len(array) <= 10^6`. * Elements in the array are distinct. * The values of the elements and the target will be in the range `-10^9 <= array[i], target <= 10^9`. Examples ```python assert find_element([1, 3, 5, 7, 9], 7) == 3 assert find_element([1, 3, 5, 7, 9], 4) == -1 assert find_element([], 7) == -1 assert find_element([1], 1) == 0 assert find_element([1, 2, 3], 2) == 1 ``` Explanation 1. In the first example, the target `7` is found at index `3`. 2. In the second example, the target `4` is not in the array, so the function returns `-1`. 3. In the third example, the array is empty, so the function returns `-1`. 4. In the fourth example, the single element `1` matches the target, so the function returns `0`. 5. In the fifth example, the target `2` is found at index `1`. Requirements * Implement both recursive and iterative versions of the binary search.","solution":"from typing import List def find_element(array: List[int], target: int) -> int: Performs a binary search to find the target in a sorted array. Args: array (List[int]): A sorted list of integers. target (int): The integer value to search for. Returns: int: The index of the target if found, otherwise returns -1. def iterative_binary_search(array: List[int], target: int) -> int: low, high = 0, len(array) - 1 while low <= high: mid = (low + high) // 2 if array[mid] == target: return mid elif array[mid] < target: low = mid + 1 else: high = mid - 1 return -1 return iterative_binary_search(array, target)"},{"question":"You are given the root of a binary tree. The task is to implement a function `max_depth(root)` that computes the maximum depth (or height) of the tree. The maximum depth is defined as the longest path from the root node to a leaf node. # Function Signature ```python def max_height(root: TreeNode) -> int: ``` # Input - **root** (TreeNode): The root node of the binary tree. # Output - **int**: An integer indicating the maximum depth of the tree. # Constraints - The number of nodes in the tree is between 0 and 10^4. - The value of each node is a unique integer. # Performance Requirements - Expected time complexity is O(n), where n is the number of nodes in the tree. - Expected space complexity is O(n), mainly due to the space required for the queue. # Scenario Imagine you are working on an application that visualizes hierarchical relationships, such as an organizational chart. To effectively display such structures, you need to know the maximum depth of the hierarchy to optimize layout and design. # Example ```python # Example tree construction # 10 # / # 12 15 # / / # 25 30 36 # # 100 tree = TreeNode(10) tree.left = TreeNode(12) tree.right = TreeNode(15) tree.left.left = TreeNode(25) tree.left.left.right = TreeNode(100) tree.left.right = TreeNode(30) tree.right.left = TreeNode(36) assert max_height(tree) == 4 ``` # Requirements 1. Implement the `max_height` function. 2. Ensure edge cases are handled (e.g., empty tree, trees with varying structures). 3. Optimize to meet performance constraints.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_height(root: TreeNode) -> int: Computes the maximum depth of the binary tree. Args: root (TreeNode): The root node of the binary tree. Returns: int: The maximum depth of the tree. if root is None: return 0 left_height = max_height(root.left) right_height = max_height(root.right) return max(left_height, right_height) + 1"},{"question":"You are given a sorted array of integers and a search key. Your task is to implement an enhanced interpolation search algorithm which not only finds the index of the search key but also handles additional edge cases more effectively. Specifically, you need to address the following scenarios: 1. If the sorted array contains only one element. 2. If the search key is smaller or larger than the entire range of the array. 3. If the array contains duplicate elements. # Task Write a function `enhanced_interpolation_search(array: List[int], search_key: int) -> int` that searches for the `search_key` in the `array`. The function should return the index of the `search_key` if it is present in the array, otherwise return -1. # Input * `array` (List[int]): A sorted list of integers. * `search_key` (int): The key to be searched in the array. # Output * Return the index (int) of the `search_key` in the `array` if found, otherwise return -1. # Constraints * 0 <= len(array) <= 10^6 * -10^6 <= array[i] <= 10^6 * -10^6 <= search_key <= 10^6 # Performance Requirements * The implemented function should aim to achieve O(log log n) time complexity for average cases. * Handle edge cases effectively with modified approach. # Example ```python def enhanced_interpolation_search(array: List[int], search_key: int) -> int: # Implement the enhanced interpolation search algorithm pass # Example Usage: print(enhanced_interpolation_search([-25, -12, -1, 10, 12, 15, 20, 41, 55], -1)) # Output: 2 print(enhanced_interpolation_search([5, 10, 12, 14, 17, 20, 21], 55)) # Output: -1 print(enhanced_interpolation_search([5, 10, 12, 14, 17, 20, 21], -5)) # Output: -1 print(enhanced_interpolation_search([1], 1)) # Output: 0 print(enhanced_interpolation_search([], 1)) # Output: -1 ``` # Notes: * Ensure to handle cases where the search key is outside the range of the array. * The function should handle arrays with duplicate values efficiently without leading to incorrect results or infinite loops. * Edge cases such as empty arrays or arrays with a single element should be properly managed.","solution":"from typing import List def enhanced_interpolation_search(array: List[int], search_key: int) -> int: if not array: return -1 low, high = 0, len(array) - 1 while low <= high and array[low] <= search_key <= array[high]: if low == high: if array[low] == search_key: return low break # Estimate position using interpolation formula pos = low + ((high - low) // (array[high] - array[low]) * (search_key - array[low])) # Check if found if array[pos] == search_key: return pos # If search key is larger, search in upper part if array[pos] < search_key: low = pos + 1 # If search key is smaller, search in lower part else: high = pos - 1 return -1"},{"question":"You are tasked with implementing a function to compute the number of ways to choose r items from n items without considering the order. This common combinatorial problem requires efficient handling due to its potentially high computational complexity. # Function Definition Implement the function `optimized_combination(n, r)` in Python: ```python def optimized_combination(n, r): Calculates the number of combinations (nCr) using an optimized approach. Parameters: - n: Total number of items (0 ≤ n ≤ 10^4) - r: Number of items to choose (0 ≤ r ≤ n) Returns: - An integer representing the number of ways to choose r items from n items pass ``` # Input Format - `n` (integer): Total number of items. - `r` (integer): Number of items to choose. # Output Format - Return an integer representing the number of ways to choose `r` items from `n` items. The result should fit within the bounds of a standard 64-bit integer. # Constraints - 0 ≤ n ≤ 10^4 - 0 ≤ r ≤ n - Return value fits in a standard 64-bit integer. # Requirements - Your implementation should be efficient, both in terms of time and space complexity. - Avoid excessive recursion to prevent stack overflows with high inputs. - Consider edge cases and handle them appropriately. # Example Input ```python n = 5 r = 2 ``` Output ```python 10 ```","solution":"def optimized_combination(n, r): Calculates the number of combinations (nCr) using an optimized approach. Parameters: - n: Total number of items (0 ≤ n ≤ 10^4) - r: Number of items to choose (0 ≤ r ≤ n) Returns: - An integer representing the number of ways to choose r items from n items if r > n: return 0 if r == 0 or n == r: return 1 r = min(r, n - r) # Take advantage of symmetry(nCr == nC(n-r)) num = denom = 1 for i in range(r): num *= (n - i) denom *= (i + 1) return num // denom"},{"question":"You are tasked with implementing an enhanced version of Insertion Sort. This version will use binary search to determine the position where the next element should be inserted. Your goal is to ensure the sorting algorithm works efficiently for larger datasets compared to the traditional Insertion Sort by leveraging the binary search technique. Task Write a function `binary_insertion_sort` that takes a list of integers as input and sorts it in non-decreasing order. Implement a helper function `search_insert` within your `binary_insertion_sort` function to determine the correct insertion point for each element using binary search. Function Signatures ```python def binary_insertion_sort(arr: List[int]) -> None: # Your code here def search_insert(arr: List[int], val: int) -> int: # Implement this helper function to be used within binary_insertion_sort ``` Input - A list of integers, `arr`, where `1 <= len(arr) <= 1000` and `-10^5 <= arr[i] <= 10^5`. Output - The function should return `None`. It should sort the input list `arr` in-place. Example ```python Input: [12, 11, 13, 5, 6] Output: [5, 6, 11, 12, 13] Input: [4, 2, 9, 1] Output: [1, 2, 4, 9] ``` Constraints - Use the `search_insert` function to find the correct position to insert each element. - Avoid using Python\'s built-in sort functions. Performance Requirements - Aim to reduce comparisons during insertion by leveraging the logarithmic time complexity of binary search. Notes - Ensure your code handles edge cases like empty arrays and arrays with duplicate elements correctly. - Prioritize in-place sorting, focusing on time and space complexities as outlined.","solution":"def binary_insertion_sort(arr): Sorts the input list using insertion sort with binary search for determining the insertion position. This modifies the original list in-place. def search_insert(sub_arr, val): Uses binary search to find the index where \'val\' should be inserted in an already sorted sub-array \'sub_arr\'. low, high = 0, len(sub_arr) - 1 while low <= high: mid = (low + high) // 2 if sub_arr[mid] == val: return mid elif sub_arr[mid] < val: low = mid + 1 else: high = mid - 1 return low for i in range(1, len(arr)): key = arr[i] # Find the position where key should be inserted using binary search j = search_insert(arr[0:i], key) # Instead of shifting each element one by one, use slicing arr = arr[:j] + [key] + arr[j:i] + arr[i+1:] return arr"},{"question":"# **Run-Length Encoding and Decoding Function Implementation** Scenario Imagine you are working as a software engineer needing to implement basic data compression and decompression utilities for a simple application. You decide to use Run-Length Encoding (RLE) to compress and decompress strings efficiently where there are a lot of repeating characters. Task Write two Python functions `encode_rle` and `decode_rle` to handle this compression and decompression. Function Details **Function 1: `encode_rle(input: str) -> str`** * **Input**: A string `input` consisting of alphanumeric characters. * **Output**: A string where consecutive characters are replaced by the count of repetitions followed by the character itself. * **Constraints**: Handle edge cases such as empty strings and strings with no repeated characters. **Function 2: `decode_rle(input: str) -> str`** * **Input**: A string `input` encoded with the `encode_rle` function (following the same format). * **Output**: The original string before encoding. * **Constraints**: Ensure the decoding properly interprets the counts and characters. Example ```python assert encode_rle(\\"aaabbcddd\\") == \\"3a2b1c3d\\" assert decode_rle(\\"3a2b1c3d\\") == \\"aaabbcddd\\" assert encode_rle(\\"\\") == \\"\\" assert decode_rle(\\"\\") == \\"\\" assert encode_rle(\\"abc\\") == \\"1a1b1c\\" assert decode_rle(\\"1a1b1c\\") == \\"abc\\" ``` **Note**: Your solution should be efficient and handle large inputs gracefully.","solution":"def encode_rle(input): if not input: return \\"\\" encoded_string = [] current_char = input[0] count = 1 for char in input[1:]: if char == current_char: count += 1 else: encoded_string.append(f\\"{count}{current_char}\\") current_char = char count = 1 encoded_string.append(f\\"{count}{current_char}\\") return \\"\\".join(encoded_string) def decode_rle(input): if not input: return \\"\\" decoded_string = [] count = 0 for char in input: if char.isdigit(): count = count * 10 + int(char) else: decoded_string.append(char * count) count = 0 return \\"\\".join(decoded_string)"},{"question":"# Scenario You are helping to develop an intelligent text editor that provides real-time suggestions for words as the user types. To support this feature, you need to implement a data structure to store a dictionary of words and provide capabilities to quickly look up words and prefixes. # Problem Statement Implement a `Trie` class to store words and support two primary operations: 1. `add_word(word)`: Add a word to the trie. 2. `query_prefix(prefix)`: Return the list of all words that start with the given prefix. # Input Format 1. The input for `add_word(word)` will be a single string `word` consisting only of lowercase letters a-z. 2. The input for `query_prefix(prefix)` will be a single string `prefix` consisting only of lowercase letters a-z. # Output Format 1. `add_word(word)` does not return a value. 2. `query_prefix(prefix)` returns a list of strings, where each string is a word from the dictionary that starts with `prefix`. # Constraints * The length of each string is not more than 100. * The number of strings added will not exceed 10^5. * Assume the dictionary is case-sensitive and contains only lowercase letters (a-z). # Function Signature ```python class Trie: def add_word(self, word: str) -> None: pass def query_prefix(self, prefix: str) -> List[str]: pass ``` # Example ```python trie = Trie() trie.add_word(\\"apple\\") trie.add_word(\\"app\\") trie.add_word(\\"apex\\") trie.add_word(\\"bat\\") trie.add_word(\\"ball\\") print(trie.query_prefix(\\"ap\\")) # Output: [\'apple\', \'app\', \'apex\'] print(trie.query_prefix(\\"ba\\")) # Output: [\'bat\', \'ball\'] print(trie.query_prefix(\\"bat\\")) # Output: [\'bat\'] print(trie.query_prefix(\\"zoo\\")) # Output: [] ``` # Notes * Ensure your implementation handles the addition and query operations efficiently. * Consider edge cases like querying an empty trie or non-existent prefixes.","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def add_word(self, word: str) -> None: current = self.root for char in word: if char not in current.children: current.children[char] = TrieNode() current = current.children[char] current.is_end_of_word = True def query_prefix(self, prefix: str) -> list: def dfs(node, prefix, results): if node.is_end_of_word: results.append(prefix) for char, child_node in node.children.items(): dfs(child_node, prefix + char, results) current = self.root results = [] for char in prefix: if char not in current.children: return [] current = current.children[char] dfs(current, prefix, results) return results"},{"question":"Implementation of Stooge Sort Objective To assess your understanding of sorting algorithms, you are required to implement the Stooge Sort algorithm. Task You need to write a function `stooge_sort(arr)` that takes in a list of integers and sorts it in non-decreasing order using the Stooge Sort algorithm. # Function Signature ```python def stooge_sort(arr: List[int]) -> List[int]: pass ``` # Input - **arr**: A list of integers of size (n) where (1 leq n leq 10^3). # Output - The function should return the sorted list of integers in non-decreasing order. # Constraints - Elements of the list can be positive, negative or zero. - The list can be empty or contain one element. # Example ```python # Example 1 arr = [5, 1, 3, 2, 4] print(stooge_sort(arr)) # [1, 2, 3, 4, 5] # Example 2 arr = [5, 4, 3, 2, 1] print(stooge_sort(arr)) # [1, 2, 3, 4, 5] # Example 3 arr = [1, 2, 3, 4, 5] print(stooge_sort(arr)) # [1, 2, 3, 4, 5] ``` # Notes - Ensure to handle edge cases such as an empty array or an array with one element efficiently. - Although Stooge Sort is inefficient, do not optimize using other sorting algorithms. Follow the Stooge Sort principles strictly. Good luck!","solution":"def stooge_sort(arr): def stoogesort_helper(arr, l, h): if l >= h: return if arr[l] > arr[h]: arr[l], arr[h] = arr[h], arr[l] if h - l + 1 > 2: t = (h - l + 1) // 3 stoogesort_helper(arr, l, h - t) stoogesort_helper(arr, l + t, h) stoogesort_helper(arr, l, h - t) stoogesort_helper(arr, 0, len(arr) - 1) return arr"},{"question":"# Question: Implement the Enhanced Radix Sort You need to implement an enhanced version of Radix Sort that can handle both non-negative and negative integers. The function should still maintain stability and achieve the same time complexity of O(nk). Additionally, the function should include error handling for non-integer values. Function Signature ```python def enhanced_radix_sort(arr: List[int], simulation: bool = False) -> List[int]: ``` Input * `arr` (List[int]): A list of integers to be sorted. * `simulation` (bool): A flag indicating whether to print the state of the list at each iteration for debugging purposes. Default is `False`. Output * (List[int]): A list of integers sorted in non-decreasing order. Constraints * The list `arr` may contain both positive and negative integers. * The list `arr` may contain duplicate integers. * Sorting stability must be maintained. * The function must execute within acceptable time and space limits for large input sizes (e.g., up to 10^6 elements). Example ```python # Example 1 input_list = [170, 45, 75, -90, 802, 24, 2, 66] output_list = enhanced_radix_sort(input_list) print(output_list) # Output should be [-90, 2, 24, 45, 66, 75, 170, 802] # Example 2 input_list = [3, -1, -1, 2, -4, 0] output_list = enhanced_radix_sort(input_list) print(output_list) # Output should be [-4, -1, -1, 0, 2, 3] ``` # Requirements * Ensure that the function handles both negative and positive integers efficiently. * Implement error handling for non-integer values by raising a `ValueError`.","solution":"def enhanced_radix_sort(arr, simulation=False): if not all(isinstance(x, int) for x in arr): raise ValueError(\\"All elements must be integers\\") def counting_sort(arr, exp, is_negative=False): n = len(arr) output = [0] * n count = [0] * 10 for i in range(n): if is_negative: index = abs(arr[i]) // exp else: index = arr[i] // exp count[(index % 10)] += 1 for i in range(1, 10): count[i] += count[i - 1] for i in range(n - 1, -1, -1): if is_negative: index = abs(arr[i]) // exp else: index = arr[i] // exp output[count[(index % 10)] - 1] = arr[i] count[(index % 10)] -= 1 for i in range(n): arr[i] = output[i] positive_numbers = [num for num in arr if num >= 0] negative_numbers = [num for num in arr if num < 0] if positive_numbers: max_pos = max(positive_numbers) exp = 1 while max_pos / exp > 1: counting_sort(positive_numbers, exp) if simulation: print(f\\"Sorted positives with exp={exp}: {positive_numbers}\\") exp *= 10 if negative_numbers: max_neg = max(abs(num) for num in negative_numbers) exp = 1 while max_neg / exp > 1: counting_sort(negative_numbers, exp, is_negative=True) if simulation: print(f\\"Sorted negatives with exp={exp}: {negative_numbers}\\") exp *= 10 negative_numbers = negative_numbers[::-1] return negative_numbers + positive_numbers"},{"question":"Given an array of integers, implement the Exchange Sort algorithm to sort the array in ascending order. However, to assess your understanding of edge cases and optimization, modify the Exchange Sort to handle certain constraints effectively. # Constraints 1. The array size (n) can be up to (10^4). 2. The integers in the array can be negative, zero, or positive. 3. You need to optimize the algorithm to handle already sorted arrays or arrays with repetitive elements efficiently. # Input * An array of integers, `arr`. # Output * A sorted array of integers, in ascending order. # Performance Requirements * You must optimize the original Exchange Sort to handle cases where the array is already sorted or contains many repeated elements, potentially reducing unnecessary comparisons. # Example Input ```python [64, 34, 25, 12, 22, 11, 90] ``` Output ```python [11, 12, 22, 25, 34, 64, 90] ``` Input ```python [1, 1, 1, 1, 1, 1, 1] ``` Output ```python [1, 1, 1, 1, 1, 1, 1] ``` # Notes * Ensure your function handles edge cases such as empty arrays and single-element arrays appropriately. * Discuss any enhancements you have implemented to improve the standard Exchange Sort.","solution":"def exchange_sort(arr): Sorts an array of integers using an optimized Exchange Sort algorithm, which handles already sorted arrays and arrays with repetitive elements efficiently. n = len(arr) swapped = False # To track if any swapping happened for i in range(n-1): for j in range(i+1, n): if arr[i] > arr[j]: arr[i], arr[j] = arr[j], arr[i] swapped = True # If no elements were swapped, the array is already sorted if not swapped: break # Reset swapped flag for next iteration swapped = False return arr"},{"question":"# Stooge Sort Implementation and Analysis **Problem Statement:** Implement Stooge Sort and validate its functionality. Additionally, provide a detailed analysis of its performance and characteristics when applied to input arrays of varying sizes. **Function Specification:** ```python def stoogesort(arr, l, h): Sorts the given array using Stooge Sort algorithm. Parameters: arr (list): List of integers to be sorted. l (int): Starting index of the part of the array to be sorted. h (int): Ending index of the part of the array to be sorted. Returns: None: The function sorts the array in place. pass # Your implementation here def main(): # Function for testing Stooge Sort test_cases = [ [5, 2, 9, 1, 5, 6], # Regular case [3, 0, -1], # Small array with a negative number [1, 2, 3, 4, 5], # Already sorted array [10], # Single element array [7, 10, 8, -1, 15], # Mixed positive and negative numbers ] for i, array in enumerate(test_cases): n = len(array) stoogesort(array, 0, n-1) print(f\\"Test Case {i+1}: {array}\\") if __name__ == \\"__main__\\": main() ``` **Input:** The input will be a list of integers, and indices specifying the part of the list to sort. **Output:** The output will be the sorted list. **Constraints:** 1. All array elements are integers. 2. Array length will not exceed 10^3 in the test cases to allow practical execution time. **Performance Requirements:** Due to Stooge Sort\'s inherent inefficiency, only test cases with small to medium-sized arrays should be considered to ensure practical execution time within a reasonable limit. **Scenario Context:** Stooge Sort, though not efficient, is illustrative of the principles of recursive sorting and can be used to understand the theoretical limits of algorithm performance. Extend this knowledge by implementing Stooge Sort and analyzing its performance on given test cases.","solution":"def stoogesort(arr, l, h): Sorts the given array using Stooge Sort algorithm. Parameters: arr (list): List of integers to be sorted. l (int): Starting index of the part of the array to be sorted. h (int): Ending index of the part of the array to be sorted. Returns: None: The function sorts the array in place. if l >= h: return # If the element at l is greater than the element at h, swap them if arr[l] > arr[h]: arr[l], arr[h] = arr[h], arr[l] # If there are more than 2 elements in the array if h - l + 1 > 2: t = (h - l + 1) // 3 stoogesort(arr, l, h-t) stoogesort(arr, l+t, h) stoogesort(arr, l, h-t) def main(): # Function for testing Stooge Sort test_cases = [ [5, 2, 9, 1, 5, 6], # Regular case [3, 0, -1], # Small array with a negative number [1, 2, 3, 4, 5], # Already sorted array [10], # Single element array [7, 10, 8, -1, 15], # Mixed positive and negative numbers ] for i, array in enumerate(test_cases): n = len(array) stoogesort(array, 0, n-1) print(f\\"Test Case {i+1}: {array}\\") if __name__ == \\"__main__\\": main()"},{"question":"You are given a number as input, and you need to find the next higher number that has the same set of digits as the original number. If such a number does not exist (i.e., the input number is the highest permutation of its digits), return -1. # Function Signature ```python def next_bigger(num: int) -> int: pass ``` # Input * An integer `num` where `0 ≤ num ≤ 10^18`. # Output * An integer representing the next higher permutation of the input\'s digits. If no such number exists, return -1. # Constraints * You should not use any built-in permutation generators. * The implementation should handle up to 10^18 efficiently. # Example ```python assert next_bigger(38276) == 38627 assert next_bigger(12345) == 12354 assert next_bigger(1528452) == 1528524 assert next_bigger(138654) == 143568 assert next_bigger(54321) == -1 assert next_bigger(999) == -1 assert next_bigger(5) == -1 ``` # Explanation Given the input number `38276`: 1. Identify the largest index `i` such that the digit at `i-1` is less than the digit at `i` (move from right to left). Here, it is the index 3 (7 > 6). 2. Identify the largest index `j` such that the digit at `j` is greater than the digit at `i-1`. Here, it is the index 4 (7 > 6). 3. Swap the values at these indices, modifying the sequence. 4. Reverse the subarray from `i` to the end. This step-by-step approach yields the next higher permutation.","solution":"def next_bigger(num: int) -> int: digits = list(str(num)) length = len(digits) # Step 1: Find the largest index i such that digits[i-1] < digits[i] i = length - 1 while i > 0 and digits[i-1] >= digits[i]: i -= 1 if i == 0: return -1 # The number is already in the highest permutation # Step 2: Find the largest index j such that digits[j] > digits[i-1] j = length - 1 while digits[j] <= digits[i-1]: j -= 1 # Step 3: Swap digits[i-1] with digits[j] digits[i-1], digits[j] = digits[j], digits[i-1] # Step 4: Reverse the digits from index i to the end of the list digits = digits[:i] + digits[i:][::-1] return int(\\"\\".join(digits))"},{"question":"# Sparse Matrix Multiplication Problem Given two sparse matrices ( A ) and ( B ), write a function to return the result of their multiplication ( AB ). Input * **A**: A list of lists representing matrix ( A ), where ( A[i][j] ) is the element of the matrix at row ( i ) and column ( j ). The number of columns in ( A ) will be equal to the number of rows in ( B ). * **B**: A list of lists representing matrix ( B ), where ( B[i][j] ) is the element of the matrix at row ( i ) and column ( j ). Output * Return a list of lists representing the resultant matrix ( C ), where ( C[i][j] ) is the element of the resulting matrix at row ( i ) and column ( j ). Constraints * The matrices ( A ) and ( B ) will be of sizes where the multiplication can be valid (i.e., the number of columns in ( A ) will be equal to the number of rows in ( B )). * Matrices ( A ) and ( B ) can have a large number of zero elements. Example ```python A = [ [ 1, 0, 0], [-1, 0, 3] ] B = [ [ 7, 0, 0 ], [ 0, 0, 0 ], [ 0, 0, 1 ] ] Expected Output: [ [ 7, 0, 0 ], [-7, 0, 3 ] ] ``` Implementation Implement the function `multiply(A: List[List[int]], B: List[List[int]]) -> List[List[int]]` in Python. **Performance Requirement**: The solution should be efficient in both time and memory, leveraging the sparsity of the input matrices.","solution":"def multiply(A, B): Multiplies two sparse matrices A and B. A: List[List[int]], a sparse matrix where len(A[0]) == len(B) B: List[List[int]], a sparse matrix where len(B[0]) Returns a matrix representing the result of AB. # Dimensions of the result matrix m, n, l = len(A), len(B[0]), len(A[0]) # Initialize the result matrix with zeros C = [[0] * n for _ in range(m)] # Only non-zero elements are stored in a more compact form nonzero_A = {} for i in range(m): for k in range(l): if A[i][k] != 0: if i not in nonzero_A: nonzero_A[i] = {} nonzero_A[i][k] = A[i][k] nonzero_B = {} for k in range(l): for j in range(n): if B[k][j] != 0: if k not in nonzero_B: nonzero_B[k] = {} nonzero_B[k][j] = B[k][j] # Perform the multiplication using non-zero elements for i in nonzero_A: for k in nonzero_A[i]: if k in nonzero_B: for j in nonzero_B[k]: C[i][j] += nonzero_A[i][k] * nonzero_B[k][j] return C"},{"question":"# Scenario You are working on a data analysis project where you need to filter datasets based on specific criteria. In one part of your project, you have a large array of numerical data. You need to create a function that efficiently extracts a subset of this data based on specified minimum and/or maximum bounds. # Task Implement a function `filter_data` that processes an array and returns a new array consisting of elements that lie within a given inclusive range. If no minimum or maximum values are specified, the function should not impose those bounds. # Requirements * **Input and Output Formats**: * `filter_data(arr: List[int], min_val: Optional[int], max_val: Optional[int]) -> List[int]` * **arr**: A list of integers. * **min_val**: An optional integer specifying the minimum bound (inclusive). If not provided, use `None`. * **max_val**: An optional integer specifying the maximum bound (inclusive). If not provided, use `None`. * **Returns**: A list of integers contained in `arr` that are within the specified range. # Constraints * The length of `arr` will not exceed 10^6. * Elements in `arr` will be integers between -10^6 to 10^6. # Examples 1. **Example 1**: * Input: `filter_data([1, 2, 3, 4, 5], 2, 4)` * Output: `[2, 3, 4]` 2. **Example 2**: * Input: `filter_data([10, 20, 30, 40, 50], None, 30)` * Output: `[10, 20, 30]` 3. **Example 3**: * Input: `filter_data([-10, -5, 0, 5, 10], -5, None)` * Output: `[-5, 0, 5, 10]` 4. **Example 4**: * Input: `filter_data([], 5, 10)` * Output: `[]` 5. **Example 5**: * Input: `filter_data([100, 200, 300], 150, 250)` * Output: `[200]` Ensure your function handles edge cases effectively and operates within the specified performance constraints.","solution":"from typing import List, Optional def filter_data(arr: List[int], min_val: Optional[int], max_val: Optional[int]) -> List[int]: Filters the input array based on specified minimum and/or maximum bounds. Parameters: arr (List[int]): A list of integers. min_val (Optional[int]): An optional integer specifying the minimum bound (inclusive). max_val (Optional[int]): An optional integer specifying the maximum bound (inclusive). Returns: List[int]: A list of integers that are within the specified range. if min_val is None and max_val is None: return arr filtered_arr = [] for num in arr: if (min_val is None or num >= min_val) and (max_val is None or num <= max_val): filtered_arr.append(num) return filtered_arr"},{"question":"# Hash Table Resizing Optimization Hash tables are efficient but can encounter performance issues as they grow and need to resize. In this task, you will enhance the `ResizableHashTable` class to use a different collision handling strategy and resizing heuristics. # Problem Statement Implement a more advanced resizing mechanism in the `ResizableHashTable` class. Use **quadratic probing** for collision handling, and improve the resizing strategy to reduce frequent resizing. Specifically: - Implement quadratic probing in the `put`, `get`, and `del_` methods. - Resize when the load factor exceeds 0.75 or falls below 0.25. - During resizing, adjust the new size to be the next prime number greater than twice the current size. # Function Definitions ```python def quadratic_probe(self, key, i, size): Quadratic probing function (i.e., hash(key) + i^2) % size. pass def is_prime(num): Utility function to check if num is a prime number. pass def next_prime(n): Utility function to find the smallest prime number greater than n. pass ``` # Example Use Case ```python hash_table = ResizableHashTable() hash_table[1] = \\"value1\\" hash_table[2] = \\"value2\\" assert hash_table[1] == \\"value1\\" assert hash_table[2] == \\"value2\\" # Quadratic probing collision resolution and resizing checks for i in range(20): hash_table[i] = f\\"value{i}\\" # Check the size has adapted assert len(hash_table) <= hash_table.size * 0.75 assert len(hash_table) >= hash_table.size * 0.25 ``` # Constraints - `key` is a non-negative integer. - Table initially has a prime size. - Performance requirements: Ensure average O(1) performance for put, get, and del_ operations. **Note**: Consider edge cases including empty hash table, deleting non-existent keys, and high collision scenarios.","solution":"class ResizableHashTable: def __init__(self, initial_size=11): self.size = initial_size self.table = [None] * self.size self.item_count = 0 def quadratic_probe(self, key, i, size): Quadratic probing function (i.e., hash(key) + i^2) % size. return (hash(key) + i * i) % size def is_prime(self, num): Utility function to check if num is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def next_prime(self, n): Utility function to find the smallest prime number greater than n. prime = n found = False while not found: prime += 1 if self.is_prime(prime): found = True return prime def put(self, key, value): if self.item_count / self.size >= 0.75: self._resize(self.next_prime(self.size * 2)) i = 0 while True: index = self.quadratic_probe(key, i, self.size) if self.table[index] is None or self.table[index][0] == key: if self.table[index] is None: self.item_count += 1 self.table[index] = (key, value) return i += 1 def get(self, key): i = 0 while True: index = self.quadratic_probe(key, i, self.size) if self.table[index] is None: return None if self.table[index][0] == key: return self.table[index][1] i += 1 def del_(self, key): if self.item_count / self.size <= 0.25 and self.size > 11: self._resize(self.next_prime(self.size // 2)) i = 0 while True: index = self.quadratic_probe(key, i, self.size) if self.table[index] is None: return if self.table[index][0] == key: self.table[index] = None self.item_count -= 1 return i += 1 def _resize(self, new_size): old_table = self.table self.size = new_size self.table = [None] * self.size self.item_count = 0 for item in old_table: if item is not None: self.put(item[0], item[1]) # Example usage: # hash_table = ResizableHashTable() # hash_table.put(1, \\"value1\\") # hash_table.put(2, \\"value2\\") # assert hash_table.get(1) == \\"value1\\" # assert hash_table.get(2) == \\"value2\\" # for i in range(20): # hash_table.put(i, f\\"value{i}\\")"},{"question":"You are required to implement a BSTIterator class that is able to iterate over the nodes of a binary search tree (BST) in ascending order. The class should include the following methods: * `__init__(self, root)`: Initialize your data structure, passing the root of the BST. * `has_next(self)`: Returns a boolean indicating whether there is a next smallest number. * `next(self)`: Returns the next smallest number in the BST. # Constraints: * The total number of nodes in the tree is in the range [1, 100]. * Node values are unique. * `-10^5 <= Node.val <= 10^5` * Methods `has_next` and `next` should run in average O(1) time and use O(h) memory, where `h` is the height of the tree. # Example: ```python # Define the tree structure class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right # Define the BSTIterator class BSTIterator: def __init__(self, root): # Your implementation here def has_next(self): # Your implementation here def next(self): # Your implementation here # Scenario to use the BSTIterator root = TreeNode(7) root.left = TreeNode(3) root.right = TreeNode(15) root.right.left = TreeNode(9) root.right.right = TreeNode(20) # Iterate over the BST iterator = BSTIterator(root) result = [] while iterator.has_next(): result.append(iterator.next()) print(result) # Expected Output: [3, 7, 9, 15, 20] ``` # Implementation: Implement the `BSTIterator` class by completing the methods `__init__`, `has_next`, and `next` to satisfy the constraints and requirements provided.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class BSTIterator: def __init__(self, root): self.stack = [] self._leftmost_inorder(root) def _leftmost_inorder(self, node): while node: self.stack.append(node) node = node.left def has_next(self): return len(self.stack) > 0 def next(self): topmost_node = self.stack.pop() if topmost_node.right: self._leftmost_inorder(topmost_node.right) return topmost_node.val"},{"question":"You are tasked with developing a solution to find specific words from a list within a 2D board of characters. These words may be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same cell may not be used more than once for one word. # Requirements Write a function `find_words(board, words)` to solve this problem. # Inputs: - `board`: A 2D list of characters (4x4 grid as an example) such as: ```python board = [ [\'o\',\'a\',\'a\',\'n\'], [\'e\',\'t\',\'a\',\'e\'], [\'i\',\'h\',\'k\',\'r\'], [\'i\',\'f\',\'l\',\'v\'] ] ``` - `words`: A list of words to search in the board, such as: ```python words = [\\"oath\\",\\"pea\\",\\"eat\\",\\"rain\\"] ``` # Outputs: - A list of valid words from the input list `words` that can be formed in the board. # Constraints: - All given words are required to be present exactly as in the list, no new words should be formed. - You may reuse the cell for different words but not within the same word. - The board size and the words count can vary, ensure handling of larger datasets efficiently. - You can assume all characters in both the board and words list are lowercase English letters. # Example: ```python board = [ [\'o\',\'a\',\'a\',\'n\'], [\'e\',\'t\',\'a\',\'e\'], [\'i\',\'h\',\'k\',\'r\'], [\'i\',\'f\',\'l\',\'v\'] ] words = [\\"oath\\", \\"pea\\", \\"eat\\", \\"rain\\"] find_words(board, words) ``` Output: ```python [\\"eat\\", \\"oath\\"] ``` # Performance Requirements: - Ensure the solution is optimized for both time and space. - Expected time complexity should be O(N * M * 4^L) and should handle edge cases gracefully. # Hint: - Consider utilizing a Trie for storing the words for efficient prefix lookups. - Implement backtracking to navigate the board and form words.","solution":"class TrieNode: def __init__(self): self.children = {} self.end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word): node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.end_of_word = True def find_words(board, words): def backtrack(row, col, parent, path): letter = board[row][col] curr_node = parent.children[letter] word_match = curr_node.end_of_word # Check if we found a word if word_match: result.add(path) curr_node.end_of_word = False # To avoid duplicate matches # Mark the cell as visited by temporarily changing it board[row][col] = \'#\' # Explore neighbors: up, right, down, left for dir in [(0, 1), (1, 0), (0, -1), (-1, 0)]: new_row, new_col = row + dir[0], col + dir[1] if new_row < 0 or new_row >= len(board) or new_col < 0 or new_col >= len(board[0]): continue if board[new_row][new_col] not in curr_node.children: continue backtrack(new_row, new_col, curr_node, path + board[new_row][new_col]) # Revert the marking board[row][col] = letter if not curr_node.children: # Prune the tree if no children parent.children.pop(letter) # Initialize the Trie trie = Trie() for word in words: trie.insert(word) result = set() for row in range(len(board)): for col in range(len(board[0])): if board[row][col] in trie.root.children: backtrack(row, col, trie.root, board[row][col]) return list(result)"},{"question":"# Question You are given an array of `n` integers where each integer represents a color (0 for red, 1 for white, and 2 for blue). Your task is to write a function `sort_colors` that sorts this array in place so that all objects of the same color are adjacent, with the colors in the order red, white, and blue. Function Signature ```python def sort_colors(nums: List[int]) -> None: pass ``` # Input - An array `nums` of length `n` where `0 ≤ n ≤ 10^5`. - Each element in `nums` is an integer in the range `[0, 1, 2]`. # Output - The function should modify the array `nums` in place to sort it according to the colors. # Constraints - Do not use the library\'s sort function for this problem. - The algorithm should operate with a time complexity of O(n) and a space complexity of O(1). # Example ```python nums = [2, 0, 2, 1, 1, 0] sort_colors(nums) print(nums) # Output should be [0, 0, 1, 1, 2, 2] ``` # Notes - You must achieve the sort in-place (using constant space). - Any deviation from the input format or constraints may result in incorrect results. # Scenario Imagine you are working on a visualization tool for a flag-making factory. The factory needs to sort piles of beads based on their color to ensure they produce flags correctly. Your function will be used as a key component in the sorting mechanism. Efficient and accurate sorting is crucial for maintaining the production line workflow.","solution":"from typing import List def sort_colors(nums: List[int]) -> None: Sorts the input list in place so that all objects of the same color are adjacent, with the colors in the order red (0), white (1), and blue (2). red, white, blue = 0, 0, len(nums) - 1 while white <= blue: if nums[white] == 0: nums[red], nums[white] = nums[white], nums[red] red += 1 white += 1 elif nums[white] == 1: white += 1 else: nums[white], nums[blue] = nums[blue], nums[white] blue -= 1"},{"question":"Context: You are tasked with creating a utility to handle number conversions between different bases. This utility will support conversions for bases ranging from 2 to 36. This is commonly needed for various applications, such as data encoding and digital display systems. Function Specifications: 1. `int_to_base(num: int, base: int) -> str` 2. `base_to_int(str_to_convert: str, base: int) -> int` Requirements: 1. **`int_to_base(num, base)`**: * **Input**: Two integers, `num` (which can be positive or negative) and `base` (which can range from 2 to 36). * **Output**: A string representing the number in the given base. * **Constraints**: - You should handle negative numbers. - Use characters `0-9` for values 0-9 and `A-Z` for values 10-35. 2. **`base_to_int(str_to_convert, base)`**: * **Input**: A string `str_to_convert` representing a number in the specified base and an integer `base` (which can range from 2 to 36). * **Output**: The integer representation of the number. * **Constraints**: - Consider both uppercase and lowercase characters. - Ensure that the input string only contains valid characters for the specified base. Example: ```python int_to_base(5, 2) -> \'101\' int_to_base(-100, 16) -> \'-64\' base_to_int(\'F\', 16) -> 15 base_to_int(\'101\', 2) -> 5 ``` Additional Notes: * Provide appropriate error handling for invalid inputs. * Optimize the performance for large numbers where necessary. * Remember to handle special cases like zero and edge cases like invalid characters in the input for `base_to_int`. Optional: If you\'d like to challenge yourself, consider the following: * Implement a reverse function that not only handles uppercase but also mixed case strings, e.g., `base_to_int(\'a1B\', 16)`.","solution":"def int_to_base(num, base): Converts an integer to a given base. :param num: integer number to convert :param base: base to convert the number to (2-36) :return: string representation of the number in the given base if base < 2 or base > 36: raise ValueError(\\"Base must be in the range 2-36\\") if num == 0: return \\"0\\" digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" negative = num < 0 num = abs(num) result = [] while num: result.append(digits[num % base]) num //= base if negative: result.append(\'-\') return \'\'.join(reversed(result)) def base_to_int(str_to_convert, base): Converts a string representation of a number in a given base to an integer. :param str_to_convert: string representation of the number in the given base :param base: base of the given number (2-36) :return: integer representation of the number if base < 2 or base > 36: raise ValueError(\\"Base must be in the range 2-36\\") str_to_convert = str_to_convert.strip().upper() digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" digit_map = {ch: i for i, ch in enumerate(digits)} negative = str_to_convert[0] == \'-\' if negative: str_to_convert = str_to_convert[1:] result = 0 for char in str_to_convert: if char not in digit_map or digit_map[char] >= base: raise ValueError(f\\"Invalid character \'{char}\' for base {base}\\") result = result * base + digit_map[char] if negative: result = -result return result"},{"question":"# Coding Challenge: Three-Way Partition Sort (Dutch National Flag Problem) **Context**: You have been given an array of integers where each integer represents a color: 0 (red), 1 (white), and 2 (blue). The task is to sort the array such that all elements of the same color are adjacent, and the colors are sorted in the order red (0), white (1), and blue (2). **Objective**: Implement the `sort_colors` function that rearranges the elements of the input list in the specified order. **Function Signature**: ```python def sort_colors(nums: List[int]) -> None: pass # Your implementation here ``` **Input**: - `nums` (List[int]): A list of integers representing the colors red (0), white (1), and blue (2). **Output**: - The function modifies the `nums` list in place so that it is sorted in the order of 0s, 1s, and then 2s. The function does not return any value. **Constraints**: - The list should be sorted in place and the solution should use constant space apart from the input list. - The length of the input list can be from 0 to 30000. **Examples**: 1. Given `nums = [2, 0, 2, 1, 1, 0]`, the function should modify `nums` to become `[0, 0, 1, 1, 2, 2]`. 2. Given `nums = [1]`, the function should modify `nums` to become `[1]`. 3. Given `nums = [0, 2, 1, 1, 0, 0, 2]`, the function should modify `nums` to become `[0, 0, 0, 1, 1, 2, 2]`. **Sample Code Framework**: ```python from typing import List def sort_colors(nums: List[int]) -> None: # Your implementation here if __name__ == \\"__main__\\": nums = [0, 1, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 2, 2] sort_colors(nums) print(nums) ``` Ensure your implementation is efficient and works within the problem constraints. Good luck!","solution":"from typing import List def sort_colors(nums: List[int]) -> None: Modify nums in-place to become sorted in the order of 0s, 1s, and then 2s. low, mid, high = 0, 0, len(nums) - 1 while mid <= high: if nums[mid] == 0: nums[low], nums[mid] = nums[mid], nums[low] low += 1 mid += 1 elif nums[mid] == 1: mid += 1 else: # nums[mid] == 2 nums[high], nums[mid] = nums[mid], nums[high] high -= 1"},{"question":"# Problem Descriptions You are given an algorithm to encode a list of strings into a single string for transmission or storage, and then decode it back to the original list of strings. Your task is to implement the following two functions: `encode` and `decode`. Function 1: `encode` - **Input**: A list of strings, `strs` (List[str]). - **Output**: A single encoded string (str). Function 2: `decode` - **Input**: A single string, `s` (str). - **Output**: A list of strings decoded from `s` (List[str]). Constraints - Each string in the list `strs` and in the resulting encoding string `s` should be shortened if the length value is greater than the actual length of the string. You should take care of the delimiter when encoding each string. - The algorithm should be capable of handling edge cases like an empty list or special characters within the strings. Example ```python # Example usage strs = [\\"hello\\", \\"world\\", \\"test:string\\"] encoded_string = encode(strs) print(encoded_string) # Expected output: \\"5:hello5:world11:test:string\\" decoded_list = decode(encoded_string) print(decoded_list) # Expected output: [\\"hello\\", \\"world\\", \\"test:string\\"] ``` Implementation Notes - Ensure to handle edge cases such as empty input lists or strings that may contain the delimiter character \':\'.","solution":"def encode(strs): Encodes a list of strings into a single string. encoded_string = \\"\\" for s in strs: encoded_string += f\\"{len(s)}:{s}\\" return encoded_string def decode(s): Decodes a single string into a list of strings. decoded_list = [] i = 0 while i < len(s): # Find the position of the next colon to extract the length j = s.find(\\":\\", i) if j == -1: break length = int(s[i:j]) decoded_list.append(s[j+1:j+1+length]) i = j + 1 + length return decoded_list"},{"question":"# Factorial Calculation with Extended Functionality Scenario A researcher working with large numbers in combinatorial problems frequently needs to compute factorials. However, due to the size of the numbers, the results often need to be taken modulo a specific value to avoid overflow. You are asked to implement a function that efficiently computes the factorial of a given number using both iterative and recursive approaches, with an optional modulo operation. # Task Write a function `custom_factorial` that takes three parameters: 1. `n` (int): a non-negative integer representing the number whose factorial needs to be calculated. 2. `approach` (str): specifies which approach to use for calculation - \\"iterative\\" or \\"recursive\\". 3. `mod` (int, optional): a positive integer to compute the result modulo `mod`. The function should return the factorial of `n`, computed either iteratively or recursively as specified by `approach`, and take the result modulo `mod` if `mod` is provided. # Function Signature ```python def custom_factorial(n: int, approach: str, mod: int = None) -> int: pass ``` # Input * `n` (int): a non-negative integer (0 ≤ n ≤ 10^5). * `approach` (str): either \\"iterative\\" or \\"recursive\\". * `mod` (int, optional): if provided, must be a positive integer (1 ≤ mod ≤ 10^9). # Output * Returns an integer representing `n! % mod` if `mod` is provided, otherwise returns `n!`. # Constraints * The function should raise a `ValueError` if `n` is a negative integer or not an integer. * The function should raise a `ValueError` if `mod` is provided and is not a positive integer. * The function should raise a `ValueError` if `approach` is neither \\"iterative\\" nor \\"recursive\\". # Examples Example 1: ```python custom_factorial(5, \\"iterative\\") # Output: 120 ``` Example 2: ```python custom_factorial(5, \\"recursive\\", 3) # Output: 0 (120 % 3) ``` Example 3: ```python custom_factorial(0, \\"iterative\\", 2) # Output: 1 (0! = 1) ``` # Notes * The iterative approach should handle large values of `n` smoothly without exceeding the maximum recursion limit. * The recursive approach should provide a clear example of handling recursion correctly.","solution":"def custom_factorial(n: int, approach: str, mod: int = None) -> int: if not isinstance(n, int) or n < 0: raise ValueError(\\"n must be a non-negative integer.\\") if mod is not None and (not isinstance(mod, int) or mod <= 0): raise ValueError(\\"mod must be a positive integer.\\") if approach not in [\\"iterative\\", \\"recursive\\"]: raise ValueError(\\"approach must be either \'iterative\' or \'recursive\'.\\") if approach == \\"iterative\\": return _factorial_iterative(n, mod) else: return _factorial_recursive(n, mod) def _factorial_iterative(n: int, mod: int = None) -> int: result = 1 for i in range(2, n + 1): result *= i if mod: result %= mod return result def _factorial_recursive(n: int, mod: int = None) -> int: if n == 0 or n == 1: return 1 if mod: return (n * _factorial_recursive(n - 1, mod)) % mod else: return n * _factorial_recursive(n - 1)"},{"question":"# Question Statement Scenario You have been hired as a programming consultant for a tech company to optimize their data processing procedures. One specific task is reordering a stack of integers by swapping successive pairs from the bottom. This operation helps in increasing the efficiency of certain data lookup operations in their system. Task Write a function `optimized_switch_pairs` that swaps successive pairs of numbers starting at the bottom of a given stack. You must achieve this with minimal time and space complexity. The function should use only one auxiliary data structure (either a stack or a queue). Function prototype: ```python def optimized_switch_pairs(stack: list) -> list: ``` Input * A list `stack` representing a stack of integers, where the last element is the top of the stack. Output * The modified stack with successive pairs of integers swapped. Constraints * The stack will contain no more than `1000` integers. * The integers in the stack can be positive or negative. Examples ```python # Example 1: stack = [3, 8, 17, 9, 1, 10] optimized_stack = optimized_switch_pairs(stack) print(optimized_stack) # Output: [8, 3, 9, 17, 10, 1] # Example 2: stack = [3, 8, 17, 9, 1] optimized_stack = optimized_switch_pairs(stack) print(optimized_stack) # Output: [8, 3, 9, 17, 1] # Example 3: stack = [5] optimized_stack = optimized_switch_pairs(stack) print(optimized_stack) # Output: [5] # Example 4: stack = [] optimized_stack = optimized_switch_pairs(stack) print(optimized_stack) # Output: [] ``` Requirements * Prefer a single scan with auxiliary data structure operations. * Aim for optimal space utilization.","solution":"def optimized_switch_pairs(stack: list) -> list: Reorder the given stack by swapping successive pairs of elements starting from the bottom. :param stack: A list of integers representing a stack (last element is the top) :return: A modified stack with successive pairs swapped n = len(stack) # Use a stack (list) as an auxiliary structure aux_stack = [] # Push elements from the original stack to the auxiliary stack for _ in range(n): aux_stack.append(stack.pop()) # Pop elements back to the original stack in pairs (reversed order) while aux_stack: top = aux_stack.pop() if aux_stack: second_top = aux_stack.pop() stack.append(second_top) stack.append(top) else: stack.append(top) return stack"},{"question":"Enhanced Cocktail Shaker Sort **Context**: You are working on an optimized version of the Cocktail Shaker Sort for an e-commerce platform that sorts product prices. Recently, you\'ve noticed the majority of the price lists are nearly sorted. To take advantage of this, you decide to enhance the algorithm for better performance. **Task**: Implement an enhanced version of the Cocktail Shaker Sort algorithm. This version should keep track of the last swap position to optimize subsequent forward and backward traversals. Specifically, instead of always traversing the entire list, you should limit the region based on where the last swaps occurred, hence reducing unnecessary comparisons. **Function Signature**: ```python def enhanced_cocktail_shaker_sort(arr: list) -> list: pass ``` **Input**: * A list of integers `arr` representing the prices of the products, where `1 <= len(arr) <= 1000` and `1 <= arr[i] <= 10^6`. **Output**: * A sorted list of integers in non-decreasing order. **Constraints**: * You must implement the cocktail shaker sort with the described optimization. * Aim for reducing the total number of comparisons and swaps when elements are in nearly sorted order. **Example**: ```python assert enhanced_cocktail_shaker_sort([3, 1, 9, 7, 4]) == [1, 3, 4, 7, 9] assert enhanced_cocktail_shaker_sort([5, 3, 2, 8, 6, 1]) == [1, 2, 3, 5, 6, 8] assert enhanced_cocktail_shaker_sort([1, 1, 1, 1]) == [1, 1, 1, 1] assert enhanced_cocktail_shaker_sort([]) == [] ``` **Edge Cases to Consider**: * The list being already sorted. * The list containing all identical elements. * The presence of a single element or an empty list. **Optimization Points**: * Use the last swap index to limit the next traversal range for both forward and backward passes. **Performance Requirements**: * Ensure your solution is efficient enough to handle the upper limit of input sizes within a reasonable time.","solution":"def enhanced_cocktail_shaker_sort(arr: list) -> list: Sorts the input list using an enhanced version of the Cocktail Shaker Sort. This version keeps track of the last swap positions to optimize the sorting process. n = len(arr) if n <= 1: return arr start = 0 end = n - 1 while start < end: new_end = start # Forward pass for i in range(start, end): if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] new_end = i end = new_end new_start = end # Backward pass for i in range(end, start, -1): if arr[i] < arr[i - 1]: arr[i], arr[i - 1] = arr[i - 1], arr[i] new_start = i start = new_start return arr"},{"question":"# Bucket Sort Implementation Scenario Imagine you have been given an array of floating-point numbers between 0 and 1, and you need to sort these numbers. The values are assumed to be uniformly distributed. # Task Implement a function `bucket_sort_floats` that performs the bucket sort, utilizing the provided `bucket_sort` and `next_sort` functions. # Requirements Input: - A list of floating-point numbers between 0 and 1. Output: - Returns a sorted list of these floating-point numbers. # Constraints: - The list will have at most (10^5) elements. - You need to make sure that the final sorting operation achieves better than O(n^2) where possible. - The `next_sort` function must be used as the sorting algorithm within each bucket. Example: ```python assert bucket_sort_floats([0.34, 0.23, 0.55, 0.14, 0.95]) == [0.14, 0.23, 0.34, 0.55, 0.95] ``` Implementation Provided: ```python def bucket_sort_floats(arr): \'\'\' Bucket Sort for floating point numbers between 0 and 1 \'\'\' num_buckets = len(arr) buckets = [[] for _ in range(num_buckets)] for value in arr: index = int(value * num_buckets) buckets[index].append(value) sorted_list = [] for i in range(num_buckets): sorted_list.extend(next_sort(buckets[i])) return sorted_list def next_sort(arr): for i in range(1, len(arr)): j = i - 1 key = arr[i] while arr[j] > key and j >= 0: arr[j+1] = arr[j] j -= 1 arr[j + 1] = key return arr ```","solution":"def bucket_sort_floats(arr): \'\'\' Bucket Sort for floating point numbers between 0 and 1 \'\'\' num_buckets = len(arr) if num_buckets <= 1: return arr buckets = [[] for _ in range(num_buckets)] for value in arr: index = int(value * num_buckets) buckets[index].append(value) sorted_list = [] for i in range(num_buckets): sorted_list.extend(next_sort(buckets[i])) return sorted_list def next_sort(arr): for i in range(1, len(arr)): j = i - 1 key = arr[i] while arr[j] > key and j >= 0: arr[j+1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"# Encoding and Decoding Strings You are tasked with implementing a pair of functions, `encode` and `decode`, which perform the following: 1. **encode(strs: List[str]) -> str**: - Encodes a list of strings into a single string. - **Input**: A list of strings, `strs`. Each string consists of printable ASCII characters. - **Output**: A single encoded string. 2. **decode(s: str) -> List[str]**: - Decodes the single string back into the list of strings. - **Input**: A single encoded string, `s`. - **Output**: The original list of strings. # Requirements - The encoded format should describe the length of each string followed by a delimiter (`:`) and then the string itself. - The functions should handle edge cases such as empty lists and strings containing the delimiter. # Example ```python # Example usage original_list = [\\"hello\\", \\"world\\"] encoded = encode(original_list) print(encoded) # Output could be: \'5:hello5:world\' decoded = decode(encoded) print(decoded) # Output should be: [\\"hello\\", \\"world\\"] ``` # Constraints - The list will not contain `None` elements. - Strings will only contain printable ASCII characters. **Note**: Your implementation should be efficient with respect to both time and space complexity. # Additional Challenge Add functionality to handle strings that might contain colons in an unambiguous way.","solution":"def encode(strs): Encodes a list of strings into a single string. Args: - strs: List[str] - A list of strings to be encoded. Returns: - str: The encoded string. return \'\'.join(f\'{len(s)}:{s}\' for s in strs) def decode(s): Decodes a single string back into a list of strings. Args: - s: str - The encoded string. Returns: - List[str]: The list of original strings. strs = [] i = 0 while i < len(s): j = i while s[j] != \':\': j += 1 length = int(s[i:j]) strs.append(s[j+1:j+1+length]) i = j + 1 + length return strs"},{"question":"# Coding Challenge: Bogo Sort Simulation and Alternatives Context You are tasked with implementing an inefficient, theoretical algorithm called Bogo Sort. This is mainly for educational purposes to understand why certain algorithms are impractical. In the real world, we would never use Bogo Sort due to its extreme inefficiency. Task Implement the Bogo Sort algorithm provided in the code snippets. Ensure your implementation includes a simulation mode which prints out each iteration of the sorting process. Then, compare this with a more efficient sorting algorithm of your choice (like Quick Sort, Merge Sort, or Heap Sort) by presenting both sorting times. Function Signature ```python def bogo_sort(arr, simulation=False): This function sorts an array using Bogo Sort algorithm with an option for simulation. :param arr: List[int] -> An array of integers. :param simulation: bool -> If True, prints the array at each iteration. :return: List[int] -> The sorted array. def compare_sorts(arr): This function compares Bogo Sort and a more efficient sorting algorithm. :param arr: List[int] -> An array of integers. :return: Tuple(List[int], float, List[int], float) -> The sorted arrays and their corresponding times. ``` Requirements 1. **Bogo Sort Implementation**: * Implement the Bogo Sort algorithm. * Ensure the function includes an is_sorted and random.shuffle step. * Add an optional simulation mode to print the array at each shuffle iteration. 2. **Efficient Sorting and Comparison**: * Implement a compare_sorts function that runs both Bogo Sort (with the simulation turned off) and another efficient sorting algorithm. * Measure and print the time taken for each sorting method for comparison. * The function should return the sorted arrays and the time taken for each. Constraints - The input list can have up to 10 unique integers. - The integers in the input list range from 1 to 1000. Example ```python # Example usage of bogo_sort arr = [3, 1, 2] sorted_arr = bogo_sort(arr, simulation=True) # Simulates and sorts the array # Example usage of compare_sorts compare_sorts([3, 1, 2, 9, 5]) ``` Notes - Use the `random` library for shuffling in Bogo Sort. - Use Python\'s built-in `sorted()` function as the efficient sorting algorithm for comparison.","solution":"import random import time def is_sorted(arr): Helper function to check if array is sorted. for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return False return True def bogo_sort(arr, simulation=False): This function sorts an array using Bogo Sort algorithm with an option for simulation. :param arr: List[int] -> An array of integers. :param simulation: bool -> If True, prints the array at each iteration. :return: List[int] -> The sorted array. attempts = 0 while not is_sorted(arr): attempts += 1 if simulation: print(f\'Shuffle {attempts}: {arr}\') random.shuffle(arr) return arr def compare_sorts(arr): This function compares Bogo Sort and a more efficient sorting algorithm. :param arr: List[int] -> An array of integers. :return: Tuple(List[int], float, List[int], float) -> The sorted arrays and their corresponding times. arr_bogo = arr.copy() arr_efficient = arr.copy() start_time = time.time() bogo_sorted = bogo_sort(arr_bogo, simulation=False) bogo_time = time.time() - start_time start_time = time.time() efficient_sorted = sorted(arr_efficient) efficient_time = time.time() - start_time return bogo_sorted, bogo_time, efficient_sorted, efficient_time"},{"question":"# Subset Generator You are part of a software development team that is building a feature to find all possible configurations of user-selected options in an application. Given a list of unique option identifiers, your task is to generate all possible subsets of these options that the user might select. This is crucial for helping the team to test all possible combinations of feature sets. # Task Write a function `generate_subsets(options)` which takes a list of unique integers representing option identifiers and returns a set of all possible subsets (each subset being represented as a tuple). # Input and Output Format **Input**: A list of distinct integers `options` (0 ≤ len(options) ≤ 16). **Output**: A set containing tuples, where each tuple is a subset of the input list. Each subset should be represented as a tuple of integers, and the set should contain all possible subsets. # Example ```python # Example 1 options = [1, 2, 3] print(generate_subsets(options)) # Expected Output: {(1, 2), (1, 3), (1,), (2,), (3,), (1, 2, 3), (), (2, 3)} # Example 2 options = [] print(generate_subsets(options)) # Expected Output: {()} ``` # Constraints * The list can contain up to 16 distinct integers. * The solution should be efficient enough for the upper bounds of input size considering the exponential growth of subsets. # Performance Requirements * Aim to achieve a solution with a time complexity of O(n * 2^n). # Additional Context For a given list of options like `[1, 2]`: - The possible subsets are: `{(), (1,), (2,), (1, 2)}`. Each subset corresponds to a binary number where the bit is set if the corresponding element in the list is included in the subset (e.g., `110` for `[1, 2, 3]` means the subset `(1, 2, 3)`). Implement the function to handle all necessary edge cases and ensure it performs well for the given constraints.","solution":"from itertools import chain, combinations def generate_subsets(options): Generates all subsets of the input list of options. Parameters: options (list): A list of distinct integers. Returns: set: A set containing all subsets represented as tuples. def all_subsets(options): return chain.from_iterable(combinations(options, r) for r in range(len(options) + 1)) return set(all_subsets(options))"},{"question":"# Move Zeros to the End Objective Implement a function `move_zeros(arr)` that takes an array `arr` and moves all zeros to the end while preserving the order of the other elements. Input * An array `arr` containing elements of mixed data types. Output * An array with zeros moved to the end, maintaining the order of non-zero elements. Constraints * Input array length will not exceed (10^5). * Zeros to be moved are strictly integers. Examples * `move_zeros([False, 1, 0, 1, 2, 0, 1, 3, \\"a\\"])` should return `[False, 1, 1, 2, 1, 3, \\"a\\", 0, 0]`. * `move_zeros([0, 0, 1])` should return `[1, 0, 0]`. * `move_zeros([])` should return `[]`. Implementation Notes * Avoid using extra array space if possible. * Consider the algorithm\'s efficiency and aim to optimize both the time and space complexity.","solution":"def move_zeros(arr): Moves all zeros (integer) to the end of the array while preserving the order of non-zero elements. Parameters: arr (list): A list of elements with mixed data types including integers. Returns: list: A list with all zeros moved to the end and other elements in original order. zero_count = 0 result = [] for item in arr: if item == 0 and type(item) == int: zero_count += 1 else: result.append(item) result.extend([0] * zero_count) return result"},{"question":"You are tasked with implementing a function for a binary search tree (BST). The function will insert a list of values into a BST and then perform an in-order traversal to produce a sorted list of the values. # Requirements 1. Implement a function `insert_into_bst(root, val)` to insert a new value into the BST. 2. Implement a function `in_order_traversal(root)` to perform an in-order traversal and return the values in a list. 3. Implement `construct_bst_from_list(values_list)` to construct a BST from a list of values and return the in-order traversal of the BST. # Function Signatures ```python class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None def insert_into_bst(root: TreeNode, val: int) -> TreeNode: pass def in_order_traversal(root: TreeNode) -> list: pass def construct_bst_from_list(values_list: list) -> list: pass ``` # Input 1. `insert_into_bst`: - `root`: A TreeNode representing the root of the BST. - `val`: An integer to be inserted into the BST. 2. `in_order_traversal`: - `root`: A TreeNode representing the root of the BST. 3. `construct_bst_from_list`: - `values_list`: A list of integers representing the values to be inserted into the BST. # Output 1. `insert_into_bst`: Returns the root node of the BST after insertion. 2. `in_order_traversal`: Returns a list of integers representing in-order traversal of the BST. 3. `construct_bst_from_list`: Returns a list of integers representing in-order traversal of the constructed BST. # Constraints 1. The input list for `construct_bst_from_list` will contain between 1 and 1000 integers. 2. Each element in the input list will be a distinct integer. # Example ```python # Example Usage: values = [10, 5, 15, 3, 7, 18] # Construct BST and get in-order traversal sorted_values = construct_bst_from_list(values) print(sorted_values) # Output should be [3, 5, 7, 10, 15, 18] ``` # Note - The solution must be efficient with respect to both time and space complexity. - Consider recursive and iterative approaches for implementation.","solution":"class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None def insert_into_bst(root: TreeNode, val: int) -> TreeNode: Inserts a value into the BST and returns the root of the tree. If the tree is empty, it creates a new root. if root is None: return TreeNode(val) if val < root.val: root.left = insert_into_bst(root.left, val) else: root.right = insert_into_bst(root.right, val) return root def in_order_traversal(root: TreeNode) -> list: Performs in-order traversal of the BST and returns the values in a sorted list. values = [] if root: values.extend(in_order_traversal(root.left)) values.append(root.val) values.extend(in_order_traversal(root.right)) return values def construct_bst_from_list(values_list: list) -> list: Constructs a BST from a list of values and returns the in-order traversal of the BST. root = None for val in values_list: root = insert_into_bst(root, val) return in_order_traversal(root)"},{"question":"# Question You have been provided with two functions `_l2_distance(vec)` to compute the L2 norm (Euclidean norm) of a vector and `cosine_similarity(vec1, vec2)` to compute the cosine similarity between two vectors. Using these functions as references, write a new function `vector_angle(vec1, vec2)` that computes the angle (in degrees) between two vectors. The angle θ can be derived from the cosine similarity using the formula: [ theta = arccos(text{cosine similarity}) times left(frac{180}{pi}right) ] # Requirements: 1. The function should handle vectors of equal lengths gracefully. If vectors of different lengths are provided, raise a `ValueError`. 2. Ensure to handle edge cases where the L2 norm of either vector results in zero. 3. The function should return the angle in degrees (float) between the two vectors. # Function Signature: ```python def vector_angle(vec1: List[float], vec2: List[float]) -> float: pass ``` # Examples: ```python assert round(vector_angle([1, 1, 1], [1, 2, -1]), 2) == 62.25 assert round(vector_angle([0, 0, 1], [0, 1, 0]), 2) == 90.00 ``` # Constraints: * The input vectors will have at least one element. * You must import any necessary modules. * Your implementation should have a time complexity of (O(n)), where (n) is the length of the vectors.","solution":"import math from typing import List def vector_angle(vec1: List[float], vec2: List[float]) -> float: def _l2_distance(vec: List[float]) -> float: Calculate the L2 norm (Euclidean norm) of a vector return math.sqrt(sum(x**2 for x in vec)) def cosine_similarity(vec1: List[float], vec2: List[float]) -> float: Compute the cosine similarity between two vectors dot_product = sum(x * y for x, y in zip(vec1, vec2)) l2_norm_vec1 = _l2_distance(vec1) l2_norm_vec2 = _l2_distance(vec2) if l2_norm_vec1 == 0 or l2_norm_vec2 == 0: raise ValueError(\\"One of the vectors has zero magnitude\\") return dot_product / (l2_norm_vec1 * l2_norm_vec2) if len(vec1) != len(vec2): raise ValueError(\\"Vectors must be of the same length\\") cos_sim = cosine_similarity(vec1, vec2) angle_radians = math.acos(cos_sim) angle_degrees = math.degrees(angle_radians) return angle_degrees"},{"question":"# Coding Challenge: Fill Empty Rooms with Distance to Nearest Gate You are provided with a grid where each cell can either be a wall, a gate, or an empty room. **Task**: Write a function `walls_and_gates(rooms)` to update the grid such that each empty room is filled with the distance to the nearest gate. If it is impossible to reach a gate from an empty room, leave it as `INF`. **Input**: - The input `rooms` is a list of lists, where each inner list represents a row in the grid. - Each element in the grid can be one of three values: - `-1` : A wall or an obstacle - `0` : A gate - `INF`: Infinity (2147483647), representing an empty room (distance to be calculated). **Output**: - The input grid `rooms` should be modified in place with distances to the nearest gate. **Constraints**: - The dimensions of the grid are at most 300x300. - If there are no gates, all INF-values should remain unchanged. - The grid is guaranteed to have at least one cell. # Example: **Input**: ``` rooms = [ [INF, -1, 0, INF], [INF, INF, INF, -1], [INF, -1, INF, -1], [0, -1, INF, INF] ] ``` **Output**: ``` rooms = [ [3, -1, 0, 1], [2, 2, 1, -1], [1, -1, 2, -1], [0, -1, 3, 4] ] ``` **Function Signature**: ```python def walls_and_gates(rooms): pass ``` **Clarifications**: - Your solution should handle edge cases like grids without gates or fully blocked grids robustly. - Minimize usage of additional space for optimal performance given the input size constraints. **Hints**: - Consider using Breadth-First Search (BFS) to ensure shortest path distances. - Use a queue to manage the BFS traversal from each gate.","solution":"from collections import deque def walls_and_gates(rooms): Distances each empty room to the nearest gate in the given rooms grid. Args: rooms (list of list of ints): The grid containing walls, gates, and empty rooms. Returns: None. The grid is modified in place. if not rooms: return INF = 2147483647 rows, cols = len(rooms), len(rooms[0]) queue = deque() # Enqueue all gates for r in range(rows): for c in range(cols): if rooms[r][c] == 0: queue.append((r, c)) # Breadth-First Search (BFS) from each gate directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while queue: r, c = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and rooms[nr][nc] == INF: rooms[nr][nc] = rooms[r][c] + 1 queue.append((nr, nc))"},{"question":"You are tasked with implementing a function that detects cycles in a directed graph. This is particularly useful in applications such as detecting deadlocks in operating systems or ensuring there are no circular dependencies in packages. Function Signature ```python def contains_cycle(graph: Dict[str, List[str]]) -> bool: pass ``` # Inputs - **graph**: A dictionary representing an adjacency list of the graph where the keys are nodes, and the values are lists of nodes to which the key has directed edges. # Outputs - Returns a single boolean indicating whether the given graph contains a cycle. # Constraints - The graph will have at most (10^3) nodes and (10^4) edges. - Nodes are represented by strings. # Example ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'D\'], \'C\': [\'F\'], \'D\': [\'E\', \'F\'], \'E\': [\'B\'], \'F\': [] } assert contains_cycle(graph) == True # Because the subgraph B -> D -> E -> B forms a cycle ``` # Requirements and Notes * You must use Depth-First Search. * Use traversal states to mark nodes as unvisited, visiting, or fully processed. * Aim to achieve (O(V + E)) time complexity and (O(V)) space complexity. # Hints - Consider how you might track nodes that are part of the current path being explored. - Think about how to represent the different state transitions (WHITE, GRAY, BLACK) to avoid revisiting nodes unnecessarily.","solution":"def contains_cycle(graph): Detects if a directed graph contains a cycle. :param graph: Dict[str, List[str]] - A dictionary representing an adjacency list where the keys are nodes, and the values are lists of nodes to which the key has directed edges. :return: bool - True if the graph contains a cycle, False otherwise. WHITE, GRAY, BLACK = 0, 1, 2 # Initialize all nodes to the \'unvisited\' state color = {node: WHITE for node in graph} def dfs(node): if color[node] == GRAY: return True if color[node] == BLACK: return False color[node] = GRAY for neighbor in graph[node]: if dfs(neighbor): return True color[node] = BLACK return False for node in graph: if color[node] == WHITE: if dfs(node): return True return False"},{"question":"# Unique Paths - Optimized Space Problem Statement You are given a grid with `m` rows and `n` columns. You are located at the top-left corner of the grid (start position: `(0, 0)`) and you aim to reach the bottom-right corner of the grid (end position: `(m-1, n-1)`). You can only move right or down at any point in time. Write a function `unique_paths(m, n)` that returns the number of unique paths from the start to the end position using an optimized space approach (i.e., O(n) or O(m)). Input * Two integers `m` and `n` where `1 ≤ m, n ≤ 100`. Output * An integer representing the number of unique paths from the start to the end of the grid. Constraints * Assume `m` and `n` will always be valid integers within the given range. * Optimize the solution to use O(min(m,n)) space. Example ``` unique_paths(3, 7) => 28 unique_paths(3, 2) => 3 unique_paths(1, 1) => 1 ``` Guidelines * Consider edge cases where `m` or `n` is 1. * Implement a dynamic programming approach that minimizes space usage. * Ensure your function handles different grid sizes efficiently.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of a grid with m rows and n columns. This implementation uses an optimized space approach. if m == 1 or n == 1: return 1 if m > n: m, n = n, m # Ensure that we use the smaller dimension for our array size dp = [1] * n for i in range(1, m): for j in range(1, n): dp[j] += dp[j - 1] return dp[-1]"},{"question":"Scenario You have been assigned the task of sorting a list of student grades for reporting purposes. To do this efficiently, you\'ve decided to implement the Shell Sort algorithm. Task Write a function `shell_sort_modified(arr, gap_sequence=None)` in Python that implements the Shell Sort algorithm with a customizable gap sequence. If no custom gap sequence is provided, use the default gap sequence defined as `n//2, n//4, ..., 1`. Function Definition ```python def shell_sort_modified(arr, gap_sequence=None): Sorts the input list using Shell Sort algorithm. Parameters: arr (List[int]): The list of integers to be sorted. gap_sequence (List[int], optional): The list of gap values to be used in the sorting process. Defaults to None. Returns: List[int]: The sorted list. ``` Input * `arr`: A list of integers (e.g., list of student grades). * `gap_sequence` (Optional): A list of integers representing the gap sequence to be used. If not provided, the default sequence based on halving will be used. Output * Returns the sorted list of integers. Constraints * The list length ( 0 leq n leq 10^5 ) * The integers in the list are within the range (-10^9 leq arr[i] leq 10^9) Example ```python example_input = [23, 42, 4, 16, 8, 15] sorted_output = shell_sort_modified(example_input) print(sorted_output) # Output should be: [4, 8, 15, 16, 23, 42] ``` **Note**: You are required to handle edge cases, such as empty lists or already sorted lists, and ensure efficient performance for large datasets.","solution":"def shell_sort_modified(arr, gap_sequence=None): Sorts the input list using Shell Sort algorithm. Parameters: arr (List[int]): The list of integers to be sorted. gap_sequence (List[int], optional): The list of gap values to be used in the sorting process. Defaults to None. Returns: List[int]: The sorted list. n = len(arr) if gap_sequence is None: gap_sequence = [] gap = n // 2 while gap > 0: gap_sequence.append(gap) gap //= 2 for gap in gap_sequence: for i in range(gap, n): temp = arr[i] j = i while j >= gap and arr[j - gap] > temp: arr[j] = arr[j - gap] j -= gap arr[j] = temp return arr # Example usage: example_input = [23, 42, 4, 16, 8, 15] sorted_output = shell_sort_modified(example_input) print(sorted_output) # Output should be: [4, 8, 15, 16, 23, 42]"},{"question":"You are given two positive integers ( a ) and ( n ) such that ( text{gcd}(a, n) = 1 ). Your task is to find the order of ( a ) modulo ( n ). The order of ( a ) modulo ( n ) is the smallest positive integer ( k ) such that ( a^k equiv 1 pmod{n} ). If no such ( k ) exists, return -1. # Input * Two integers ( a ) and ( n ) where ( 1 leq a, n leq 10^5 ). # Output * Return the smallest positive integer ( k ) such that ( a^k equiv 1 pmod{n} ). If no such ( k ) exists, return -1. # Constraints * ( text{gcd}(a, n) = 1 ). # Example Example 1: Input: ```plaintext a = 3 n = 7 ``` Output: ```plaintext 6 ``` Explanation: (3^6 equiv 1 pmod{7}) and there is no smaller positive integer (k) for which the equivalence holds. Example 2: Input: ```plaintext a = 10 n = 17 ``` Output: ```plaintext 16 ``` Explanation: (10^{16} equiv 1 pmod{17}). # Hints: - Ensure to verify if ( text{gcd}(a, n) = 1 ). If not, it should return -1 as the result. # Your Task Implement the function `find_order(a, n)` that takes two integers ( a ) and ( n ) and returns the smallest positive integer ( k ), if it exists, or -1 otherwise. # Function Signature ```python def find_order(a: int, n: int) -> int: # your code here ```","solution":"def find_order(a: int, n: int) -> int: def gcd(x, y): while y != 0: (x, y) = (y, x % y) return x # Check if gcd(a, n) is 1 if gcd(a, n) != 1: return -1 current = 1 for k in range(1, n + 1): current = (current * a) % n if current == 1: return k return -1"},{"question":"You are required to implement the binary search algorithm in two forms: iterative and recursive. Your implementation should return the index of the target value if it exists in the array, or -1 if it does not. Consider edge cases such as an empty array, single-element arrays, and arrays with duplicate values. Function 1: Iterative Binary Search ```python def binary_search_iterative(array, target): Perform binary search iteratively Args: array : List[int]: A list of integers sorted in ascending order. target : int: An integer value to search for in the array. Returns: int: The index of the target if found, otherwise -1. pass ``` Function 2: Recursive Binary Search ```python def binary_search_recursive(array, low, high, target): Perform binary search recursively Args: array : List[int]: A list of integers sorted in ascending order. low : int: The starting index of the array/subarray to be searched. high : int: The ending index of the array/subarray to be searched. target : int: An integer value to search for in the array. Returns: int: The index of the target if found, otherwise -1. pass ``` # Example ```python # Test Cases assert binary_search_iterative([1, 2, 3, 4, 5], 3) == 2 assert binary_search_iterative([1, 2, 3, 4, 5], 6) == -1 assert binary_search_iterative([], 3) == -1 assert binary_search_recursive([1, 2, 3, 4, 5], 0, 4, 3) == 2 assert binary_search_recursive([1, 2, 3, 4, 5], 0, 4, 6) == -1 assert binary_search_recursive([], 0, -1, 3) == -1 ``` # Constraints 1. The elements in the array are integers within the range of -10^9 to 10^9. 2. The array length does not exceed 10^5 elements. 3. The array is sorted in ascending order. Your functions must efficiently handle the constraints, ensuring a time complexity of O(log(n)) for large sorted arrays.","solution":"def binary_search_iterative(array, target): Perform binary search iteratively. Args: array : List[int]: A list of integers sorted in ascending order. target : int: An integer value to search for in the array. Returns: int: The index of the target if found, otherwise -1. low, high = 0, len(array) - 1 while low <= high: mid = (low + high) // 2 if array[mid] == target: return mid elif array[mid] < target: low = mid + 1 else: high = mid - 1 return -1 def binary_search_recursive(array, low, high, target): Perform binary search recursively. Args: array : List[int]: A list of integers sorted in ascending order. low : int: The starting index of the array/subarray to be searched. high : int: The ending index of the array/subarray to be searched. target : int: An integer value to search for in the array. Returns: int: The index of the target if found, otherwise -1. if low > high: return -1 mid = (low + high) // 2 if array[mid] == target: return mid elif array[mid] < target: return binary_search_recursive(array, mid + 1, high, target) else: return binary_search_recursive(array, low, mid - 1, target)"},{"question":"# Binary Tree Equality Check **Context**: You are working on a system that synchronizes binary tree data structures between multiple servers. To ensure data integrity, you need to verify that two given binary trees are identical in structure and values. **Task**: Write a function `is_same_tree(tree_p, tree_q)` that takes the root nodes of two binary trees `tree_p` and `tree_q`, and returns `True` if the two trees are structurally identical and the nodes have the same values. Otherwise, it returns `False`. **Function Signature**: ```python def is_same_tree(tree_p: TreeNode, tree_q: TreeNode) -> bool: pass ``` Here, `TreeNode` is a class that represents a node in a binary tree with the following structure: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` **Input**: - Two parameters `tree_p` and `tree_q`, both of which are the root nodes of two binary trees. **Output**: - A boolean value indicating whether the two binary trees are identical. **Examples**: ```python # Example 1 # Input: # Tree 1: 1 Tree 2: 1 # / / # 2 3 2 3 # Output: True # Example 2 # Input: # Tree 1: 1 Tree 2: 1 # / / # 2 3 # Output: False # Example 3 # Input: # Tree 1: 1 # Output: False # Tree 2: 1 # / # 2 ``` **Constraints**: - The number of nodes in both trees will be in the range [0, 100]. - Node values are integers and can be positive or negative. **Performance Requirements**: - Aim for O(min(N, M)) time complexity and O(min(height1, height2)) space complexity. **Guidelines**: - Consider edge cases such as one tree being empty and the other non-empty. - Recursion should be carefully handled to avoid stack overflow by ensuring base cases. **Scenario**: Bob and Alice frequently transmit large binary trees over the network. After transmission, they need a mechanism to verify if the trees have been sent correctly without any structural or data corruption. Build the function to support this verification part.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_same_tree(tree_p: TreeNode, tree_q: TreeNode) -> bool: Returns True if both trees are structurally identical and nodes have the same values. Otherwise, returns False. # Base cases if not tree_p and not tree_q: return True if not tree_p or not tree_q: return False if tree_p.val != tree_q.val: return False # Recursively check left and right subtrees return is_same_tree(tree_p.left, tree_q.left) and is_same_tree(tree_p.right, tree_q.right)"},{"question":"# Question: Implement an AVL Tree An AVL tree is a self-balancing Binary Search Tree (BST) where the difference between heights of left and right subtrees cannot be more than one for all nodes. Implement an AVL tree with the following operations: 1. **Insert** - Insert a new element into the tree. 2. **Search** - Search for an element in the tree. 3. **Size** - Return the number of nodes in the tree. 4. **Traversal** - Provide Preorder, Inorder, and Postorder traversals of the tree. Expected Input and Output Formats * **Insert(data: int)**: - Input: Single integer `data` to be inserted into the tree. - Output: None. The tree is modified in place. * **Search(data: int) -> bool**: - Input: Single integer `data` to search in the tree. - Output: Boolean indicating whether `data` exists in the tree. * **Size() -> int**: - Input: None. - Output: Number of nodes in the tree. * **Preorder()**, **Inorder()**, **Postorder()**: - Input: None. - Output: Print the elements in respective traversal order. Constraints 1. Implement height balancing to ensure the balance factor is maintained. 2. Average time complexity for insertions and searches should be O(log N). Example Scenario Construct the AVL tree by inserting the following elements in sequence: [10, 20, 30, 40, 50, 25]. 1. Invoke `Preorder()` to verify the traversal: should output in Preorder manner. 2. Invoke `Search(25)`: should return `True`. 3. Invoke `Size()`: should return `6` after inserting above elements. ```python import unittest class AVLNode: def __init__(self, key): self.left = None self.right = None self.height = 1 self.key = key class AVLTree: def insert(self, root, key): # Insert node as in BST if not root: return AVLNode(key) elif key < root.key: root.left = self.insert(root.left, key) else: root.right = self.insert(root.right, key) # Update height of ancestor node root.height = 1 + max(self.getHeight(root.left), self.getHeight(root.right)) # Get balance factor balance = self.getBalance(root) # If node is unbalanced, perform rotations # Left Left Case if balance > 1 and key < root.left.key: return self.rightRotate(root) # Right Right Case if balance < -1 and key > root.right.key: return self.leftRotate(root) # Left Right Case if balance > 1 and key > root.left.key: root.left = self.leftRotate(root.left) return self.rightRotate(root) # Right Left Case if balance < -1 and key < root.right.key: root.right = self.rightRotate(root.right) return self.leftRotate(root) return root def search(self, root, key): if root is None or root.key == key: return root is not None elif key < root.key: return self.search(root.left, key) else: return self.search(root.right, key) def size(self, root): if not root: return 0 return 1 + self.size(root.left) + self.size(root.right) def preorder(self, root): if root: print(str(root.key), end=\' \') self.preorder(root.left) self.preorder(root.right) def inorder(self, root): if root: self.inorder(root.left) print(str(root.key), end=\' \') self.inorder(root.right) def postorder(self, root): if root: self.postorder(root.left) self.postorder(root.right) print(str(root.key), end=\' \') def leftRotate(self, z): y = z.right T2 = y.left y.left = z z.right = T2 z.height = 1 + max(self.getHeight(z.left), self.getHeight(z.right)) y.height = 1 + max(self.getHeight(y.left), self.getHeight(y.right)) return y def rightRotate(self, z): y = z.left T3 = y.right y.right = z z.left = T3 z.height = 1 + max(self.getHeight(z.left), self.getHeight(z.right)) y.height = 1 + max(self.getHeight(y.left), self.getHeight(y.right)) return y def getHeight(self, root): if not root: return 0 return root.height def getBalance(self, root): if not root: return 0 return self.getHeight(root.left) - self.getHeight(root.right) class TestAVLTree(unittest.TestCase): def setUp(self): self.tree = AVLTree() self.root = None def test_insert_and_search(self): self.root = self.tree.insert(self.root, 10) self.root = self.tree.insert(self.root, 20) self.root = self.tree.insert(self.root, 30) self.root = self.tree.insert(self.root, 40) self.root = self.tree.insert(self.root, 50) self.root = self.tree.insert(self.root, 25) self.assertTrue(self.tree.search(self.root, 25)) self.assertFalse(self.tree.search(self.root, 60)) def test_size(self): self.root = self.tree.insert(self.root, 10) self.root = self.tree.insert(self.root, 20) self.assertEqual(self.tree.size(self.root), 2) if __name__ == \'__main__\': unittest.main() ```","solution":"class AVLNode: def __init__(self, key): self.left = None self.right = None self.height = 1 self.key = key class AVLTree: def __init__(self): self.root = None def insert(self, node, key): if not node: return AVLNode(key) elif key < node.key: node.left = self.insert(node.left, key) else: node.right = self.insert(node.right, key) node.height = 1 + max(self.getHeight(node.left), self.getHeight(node.right)) balance = self.getBalance(node) if balance > 1 and key < node.left.key: return self.rightRotate(node) if balance < -1 and key > node.right.key: return self.leftRotate(node) if balance > 1 and key > node.left.key: node.left = self.leftRotate(node.left) return self.rightRotate(node) if balance < -1 and key < node.right.key: node.right = self.rightRotate(node.right) return self.leftRotate(node) return node def search(self, node, key): if node is None or node.key == key: return node is not None elif key < node.key: return self.search(node.left, key) else: return self.search(node.right, key) def size(self, node): if not node: return 0 return 1 + self.size(node.left) + self.size(node.right) def preorder(self, node): result = [] if node: result.append(node.key) result.extend(self.preorder(node.left)) result.extend(self.preorder(node.right)) return result def inorder(self, node): result = [] if node: result.extend(self.inorder(node.left)) result.append(node.key) result.extend(self.inorder(node.right)) return result def postorder(self, node): result = [] if node: result.extend(self.postorder(node.left)) result.extend(self.postorder(node.right)) result.append(node.key) return result def leftRotate(self, z): y = z.right T2 = y.left y.left = z z.right = T2 z.height = 1 + max(self.getHeight(z.left), self.getHeight(z.right)) y.height = 1 + max(self.getHeight(y.left), self.getHeight(y.right)) return y def rightRotate(self, z): y = z.left T3 = y.right y.right = z z.left = T3 z.height = 1 + max(self.getHeight(z.left), self.getHeight(z.right)) y.height = 1 + max(self.getHeight(y.left), self.getHeight(y.right)) return y def getHeight(self, node): if not node: return 0 return node.height def getBalance(self, node): if not node: return 0 return self.getHeight(node.left) - self.getHeight(node.right)"},{"question":"**Scenario**: A file storage system seeks to minimize its memory writes because each write operation significantly wears down storage cells. After collecting data, you must sort the data represented as a list, with the least number of write operations to the list. Implement a function using the Cycle Sort algorithm to accomplish this. However, be careful, as the data items may contain duplicates, and the list could be very large, leading to complexity concerns. **Function Signature**: ```python def custom_cycle_sort(arr: List[int]) -> List[int]: pass ``` **Input**: - A list of integers, `arr`, where the number of elements can range from 1 to 10^4. - It can contain duplicate integers. **Output**: - Return a sorted list with a minimum number of writes. **Constraints**: - Do not use built-in sorting methods. - Optimize the code to handle edge cases efficiently. - Consider both the best and worst-case scenarios. **Performance Requirements**: The implementation should handle sorting with O(N^2) time complexity and should not utilize additional space beyond O(1). **Example**: ```python input_array = [4, 3, 2, 1] output = custom_cycle_sort(input_array) print(output) # Expected: [1, 2, 3, 4] input_array = [1, 2, 1, 2] output = custom_cycle_sort(input_array) print(output) # Expected: [1, 1, 2, 2] ``` Describe the algorithm, implement the function, and ensure it handles edge cases effectively.","solution":"from typing import List def custom_cycle_sort(arr: List[int]) -> List[int]: n = len(arr) # Traverse the array to find cycles for start in range(n - 1): item = arr[start] # Find where to put the current item pos = start for i in range(start + 1, n): if arr[i] < item: pos += 1 # If the item is already in the correct position, continue if pos == start: continue # Otherwise, put the item to the correct position (skip duplicates) while item == arr[pos]: pos += 1 arr[pos], item = item, arr[pos] # Rotate rest of the cycle while pos != start: pos = start for i in range(start + 1, n): if arr[i] < item: pos += 1 while item == arr[pos]: pos += 1 arr[pos], item = item, arr[pos] return arr"},{"question":"# Prime Performance: Efficient Prime Identification # Task You need to determine if a given integer ( p ) is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. # Function Signature ```python def is_prime(p: int) -> bool: Args: p (int): The number to check. Returns: bool: True if p is a prime number, False otherwise. ``` # Input - An integer ( p ) such that ( 0 leq p leq 10^9 ). # Output - Return `True` if the number ( p ) is prime, otherwise return `False`. # Constraints - The function should have a time complexity of ( O(sqrt{p}) ). - The function should have a space complexity of ( O(1) ). # Example ```python print(is_prime(29)) # Expected output: True print(is_prime(10)) # Expected output: False print(is_prime(1)) # Expected output: False print(is_prime(2)) # Expected output: True print(is_prime(97)) # Expected output: True print(is_prime(0)) # Expected output: False print(is_prime(25)) # Expected output: False ``` # Requirements 1. Handle edge cases such as 0, 1, and other small numbers directly. 2. Implement an efficient algorithm to check for primes in the range up to ( 10^9 ). 3. Ensure that the solution is clear, readable, and well-documented.","solution":"def is_prime(p: int) -> bool: Determines if the provided integer p is a prime number. Args: p (int): The number to check. Returns: bool: True if p is a prime number, False otherwise. if p <= 1: return False if p <= 3: return True if p % 2 == 0 or p % 3 == 0: return False i = 5 while i * i <= p: if p % i == 0 or p % (i + 2) == 0: return False i += 6 return True"},{"question":"# Scenario: You are working on a system where data needs to be optimized at a bit level for storage efficiency. One such optimization task requires the removal of specific bits from integers. This process is crucial to save memory space and improve processing speed. # Task: Implement the function `remove_bit(num, i)` that removes the bit at the `i-th` position from the binary representation of the integer `num`. # Requirements: Input: - `num` (int): The integer from which the bit will be removed. It is a non-negative integer. - `i` (int): The position (0-based) of the bit to be removed. `i` ranges from 0 to the number of bits in `num` - 1. Output: - Return an integer that represents the binary number after removing the `i-th` bit from `num`. # Constraints: 1. `0 <= i < number_of_bits_in(num)` 2. Handle cases where `i` is 0 (least significant bit) and where `i` is the index of the most significant bit. # Examples: 1. Input: `remove_bit(21, 2)` (Binary: 10101, Remove the 3rd bit from the right) Output: `9` (Binary: 1001) 2. Input: `remove_bit(21, 4)` (Binary: 10101, Remove the 5th bit from the right) Output: `5` (Binary: 101) 3. Input: `remove_bit(21, 0)` (Binary: 10101, Remove the 1st bit from the right) Output: `10` (Binary: 1010) **Function Signature**: ```python def remove_bit(num: int, i: int) -> int: pass ```","solution":"def remove_bit(num: int, i: int) -> int: Removes the bit at the i-th position from the binary representation of the integer num. :param num: The integer from which the bit will be removed. :param i: The position (0-based) of the bit to be removed. :return: An integer representing the binary number after removing the i-th bit. # Split the number into two parts - the bits before and after the bit to be removed left = num >> (i + 1) << i # Keeps the part before the bit to be removed right = num & ((1 << i) - 1) # Keeps the part after the bit to be removed return left | right # Merge the two parts, effectively removing the bit at position i"},{"question":"You are tasked with implementing the move_zeros function which is designed to move all zeros in an array to its end while preserving the order of the other elements. It should handle various types correctly, distinguishing between integer zeros and other values that could be seen as equivalent when using loose equality (such as False). # Function Signature ```python def move_zeros(array: list) -> list: ``` # Input * An array of mixed data types with an arbitrary number of elements. # Output * A new array where all zeros have been moved to the end and the order of other elements is preserved. # Constraints * **Type Distinction**: The function should strictly move only integer zeros and leave other \'falsy\' values like `False` and empty strings in place. * **Performance**: The function should be efficient with a time complexity of O(n). # Example ```python print(move_zeros([False, 1, 0, 1, 2, 0, 1, 3, \\"a\\"])) # Expected Output: [False, 1, 1, 2, 1, 3, \\"a\\", 0, 0] print(move_zeros([0, 0, 0, 1])) # Expected Output: [1, 0, 0, 0] print(move_zeros([0, \\"0\\", False, []])) # Expected Output: [\\"0\\", False, [], 0] print(move_zeros([1, 2, 3])) # Expected Output: [1, 2, 3] print(move_zeros([0, 0, 0])) # Expected Output: [0, 0, 0] ``` # Requirements - Implement the `move_zeros` function ensuring it meets the specified performance constraints. - Ensure your solution properly handles all edge cases and provides the correct output for provided examples.","solution":"def move_zeros(array: list) -> list: if not array: return array non_zeros = [x for x in array if x != 0 or type(x) == bool] zeros_count = len(array) - len(non_zeros) return non_zeros + [0] * zeros_count"},{"question":"Background You are responsible for building a management system for a botanical garden. In this garden, different plant species are planted in various sections. Connected sections form a larger plant area. The garden management wants to track connected sections of plants as they are added, identifying how many distinct plant areas exist at each stage. Given a 2D grid representing the garden: - `0` represents an empty plot. - `1` represents a plant plot. When a new plant plot is added, it can potentially connect with adjacent plant plots (up, down, left, right) to form a larger connected plant area. Requirements Write a function `track_plant_areas(n, m, positions)` that takes: - `n` (the number of rows), - `m` (the number of columns), and - `positions` (a list of positions where new plants are added), and returns a list where the `i-th` element is the number of distinct plant areas after the `i-th` plant is added. Input - `n` (1 ≤ n ≤ 1000): The number of rows in the garden. - `m` (1 ≤ m ≤ 1000): The number of columns in the garden. - `positions` (1 ≤ |positions| ≤ 10^4): A list of tuples where each tuple represents a (row, column) position. Output - A list of integers representing the number of distinct plant areas after each plant addition. Example ```python n = 3 m = 3 positions = [(0, 0), (0, 1), (1, 2), (2, 1)] track_plant_areas(n, m, positions) ``` Should return: ```python [1, 1, 2, 3] ``` Constraints You should optimize for efficient runtime given the constraints, using the Union-Find data structure. Additional Information Follow the Union-Find data structure principles for optimized operations: use path compression in the `find` operation and union by size in the `union` operation.","solution":"def track_plant_areas(n, m, positions): class UnionFind: def __init__(self): self.parent = {} self.rank = {} def find(self, x): if self.parent[x] != x: self.parent[x] = self.find(self.parent[x]) return self.parent[x] def union(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: if self.rank[rootX] > self.rank[rootY]: self.parent[rootY] = rootX elif self.rank[rootX] < self.rank[rootY]: self.parent[rootX] = rootY else: self.parent[rootY] = rootX self.rank[rootX] += 1 return False return True def add(self, x): if x not in self.parent: self.parent[x] = x self.rank[x] = 0 def get_id(row, col): return row * m + col uf = UnionFind() grid = [[0] * m for _ in range(n)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] result = [] num_areas = 0 for row, col in positions: if grid[row][col] == 1: result.append(num_areas) continue grid[row][col] = 1 num_areas += 1 current_id = get_id(row, col) uf.add(current_id) for dr, dc in directions: nr, nc = row + dr, col + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == 1: neighbor_id = get_id(nr, nc) uf.add(neighbor_id) if not uf.union(current_id, neighbor_id): num_areas -= 1 result.append(num_areas) return result"},{"question":"**Scenario**: You are given a sorted array of integers and a target value. Your task is to implement an efficient algorithm to locate the first and last positions of the target value within the array. If the target is not present, return [-1, -1]. # Task Implement the function `search_range(nums, target)` that adheres to the following specifications: ```python def search_range(nums, target): :type nums: List[int] :type target: int :rtype: List[int] ``` # Input: * `nums` (List[int]): A list of integers sorted in ascending order. * `target` (int): The integer target to find within `nums`. # Output: * (List[int]): A list containing two integers. The first integer is the starting position of the target in the list, and the second integer is the ending position of the target. If the target is not found, return [-1, -1]. # Constraints: * The length of `nums` will be in the range [0, 10^4]. * `nums` will be sorted in ascending order. * Try to achieve a time complexity better than O(n). # Performance Requirements: * Your solution should aim for O(log n) time complexity if possible. * Optimize to avoid unnecessary scans of the list to ensure performance is maintained with longer arrays. # Example: Input: `nums = [5,7,7,8,8,8,10], target = 8` Output: `[3, 5]` Input: `nums = [5,7,7,8,8,8,10], target = 11` Output: `[-1, -1]` # Additional Information It is encouraged to use binary search methods to optimize the search for both start and end positions of the target value in the sorted list. Consider edge cases and ensure you handle them appropriately.","solution":"def search_range(nums, target): def find_left_position(nums, target): left, right = 0, len(nums) - 1 left_pos = -1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: left_pos = mid right = mid - 1 # Continue searching in the left half elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return left_pos def find_right_position(nums, target): left, right = 0, len(nums) - 1 right_pos = -1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: right_pos = mid left = mid + 1 # Continue searching in the right half elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return right_pos left_pos = find_left_position(nums, target) right_pos = find_right_position(nums, target) return [left_pos, right_pos] if left_pos != -1 and right_pos != -1 else [-1, -1]"},{"question":"Problem Statement You need to implement a function that returns the number of digits in a given integer, and it must handle both positive and negative numbers efficiently. Your implementation should leverage a mathematical approach to achieve constant time complexity. Function Signature ```python def num_digits(n: int) -> int: ``` Input - An integer `n` where -10^18 <= n <= 10^18. Output - An integer representing the number of digits in the input number. Constraints - Ensure your solution runs in O(1) time. - Handle special cases such as zero and negative numbers correctly. Example ```python print(num_digits(12345)) # Output: 5 print(num_digits(-98765)) # Output: 5 print(num_digits(0)) # Output: 1 ``` Explanation - The number 12345 has 5 digits. - The number -98765 has 5 digits (negative sign does not count). - The number 0 is considered to have 1 digit. Implement the `num_digits` function using the `math.log10` method as explained. Validate input where necessary.","solution":"import math def num_digits(n: int) -> int: Returns the number of digits in a given integer. Parameters: n (int): The integer whose digits need to be counted. Returns: int: The number of digits in the integer. if n == 0: return 1 return math.floor(math.log10(abs(n))) + 1"},{"question":"Reverse the Order of Words Scenario: You are working on a text processing tool, and one of the features is to reverse the order of words in a sentence. The words in the sentence are separated by single spaces. You need to implement a function that takes a sentence as an input and returns the sentence with the words in reversed order. Function Signature: ```python def reverse_words(string: str) -> str: ``` Input: - `string` (str): A sentence consisting of words separated by single spaces. Output: - (str): The sentence with the words in reversed order. Example: Input: ```plaintext \\"I am keon kim and I like pizza\\" ``` Output: ```plaintext \\"pizza like I and kim keon am I\\" ``` Constraints: 1. The input string can be empty. 2. Words in the input string are separated by single spaces and contain only alphabetic characters. 3. Do not use any built-in reverse methods. Write the function `reverse_words` to reverse the order of words in the given sentence. **Note:** - Handle edge cases such as an empty string or a string with leading/trailing/multiple spaces. - Aim for a solution with linear time complexity and constant space complexity (ignoring input and output space).","solution":"def reverse_words(string: str) -> str: Returns the sentence with words in reversed order. words = string.split() reversed_words = \' \'.join(words[::-1]) return reversed_words"},{"question":"# Matrix Transformation Challenge You are given a square matrix of integers. You need to implement matrix transformation functions that can rotate the matrix clockwise, rotate it counter-clockwise, invert it top-left, or invert it bottom-left. # Task Implement the following functions: 1. `rotate_clockwise(matrix: List[List[int]]) -> List[List[int]]` 2. `rotate_counterclockwise(matrix: List[List[int]]) -> List[List[int]]` 3. `top_left_invert(matrix: List[List[int]]) -> List[List[int]]` 4. `bottom_left_invert(matrix: List[List[int]]) -> List[List[int]]` # Input * `matrix` (a list of lists of integers): A square matrix with dimensions n x n where 1 <= n <= 100. # Output Each of these functions should return the new transformed matrix according to the specific operation: 1. **rotate_clockwise**: Each element of the new matrix should be positioned 90 degrees to the right of its original position. 2. **rotate_counterclockwise**: This operation should rotate each element 90 degrees to the left. 3. **top_left_invert**: Transpose the matrix. 4. **bottom_left_invert**: This operation should be a 180-degree rotation followed by a transpose. # Example Scenario Starting Matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` * `rotate_clockwise` should return: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` * `rotate_counterclockwise` should return: ``` [ [3, 6, 9], [2, 5, 8], [1, 4, 7] ] ``` * `top_left_invert` should return: ``` [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] ``` * `bottom_left_invert` should return: ``` [ [9, 6, 3], [8, 5, 2], [7, 4, 1] ] ``` # Constraints * Assume the provided matrix will always be a valid square matrix. * Code quality, efficiency, and proper handling of edge cases will be considered during the evaluation.","solution":"from typing import List def rotate_clockwise(matrix: List[List[int]]) -> List[List[int]]: n = len(matrix) return [[matrix[n-j-1][i] for j in range(n)] for i in range(n)] def rotate_counterclockwise(matrix: List[List[int]]) -> List[List[int]]: n = len(matrix) return [[matrix[j][n-i-1] for j in range(n)] for i in range(n)] def top_left_invert(matrix: List[List[int]]) -> List[List[int]]: n = len(matrix) return [[matrix[j][i] for j in range(n)] for i in range(n)] def bottom_left_invert(matrix: List[List[int]]) -> List[List[int]]: n = len(matrix) inverted_matrix = [[matrix[n-1-j][n-1-i] for j in range(n)] for i in range(n)] return inverted_matrix"},{"question":"# Coding Assessment: Trie Implementation and Utilization Scenario: You are working on a predictive text feature for a new messaging application. The feature relies on a data structure that can store a large set of common words and quickly retrieve them based on user input prefixes. Task: Implement a class `PredictiveText` that leverages the Trie data structure. Your class should allow words to be added and provide suggestions based on prefixes. Specifically, implement the following methods: 1. `add_word(word: str) -> None`: Adds a word to the Trie. 2. `search_word(word: str) -> bool`: Checks if the word exists in the Trie. 3. `suggest_words(prefix: str) -> List[str]`: Returns a list of words in the Trie that start with the given prefix. Implementation Requirements: * The Trie should handle lowercase English letters (`a-z`) only. * The `suggest_words` method should return suggestions in alphabetical order. * The implementation should be efficient in terms of time complexity, leveraging the properties of the Trie structure. Constraints: * Words can have a maximum length of 100 characters. * You can assume the maximum number of words is 10^6. Example: ```python predictive_text = PredictiveText() predictive_text.add_word(\\"hello\\") predictive_text.add_word(\\"hell\\") predictive_text.add_word(\\"helicopter\\") predictive_text.add_word(\\"help\\") assert predictive_text.search_word(\\"hello\\") == True assert predictive_text.search_word(\\"helloo\\") == False assert predictive_text.suggest_words(\\"hel\\") == [\\"heli\\", \\"hell\\", \\"hello\\", \\"help\\"] assert predictive_text.suggest_words(\\"he\\") == [\\"heli\\", \\"hell\\", \\"hello\\", \\"help\\", \\"helicopter\\"] ``` Write the `PredictiveText` class below:","solution":"from typing import List class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class PredictiveText: def __init__(self): self.root = TrieNode() def add_word(self, word: str) -> None: node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def search_word(self, word: str) -> bool: node = self.root for char in word: if char not in node.children: return False node = node.children[char] return node.is_end_of_word def suggest_words(self, prefix: str) -> List[str]: def dfs(node, prefix, results): if node.is_end_of_word: results.append(prefix) for char, child_node in sorted(node.children.items()): dfs(child_node, prefix + char, results) node = self.root for char in prefix: if char not in node.children: return [] node = node.children[char] results = [] dfs(node, prefix, results) return results"},{"question":"# Coding Assessment Task **Scenario**: You are a software engineer working on a system where you need to sort a large set of floating-point numbers that are mostly well distributed. To ensure efficient sorting, you decide to implement the Bucket Sort algorithm. **Task**: Implement the Bucket Sort algorithm to sort an array of floating-point numbers within the range [0, 1). Your implementation should include the following methods: 1. `bucket_sort(arr: List[float]) -> List[float]`: This is the main function to perform bucket sort on an array of floating-point numbers. 2. `insertion_sort(arr: List[float]) -> List[float]`: This auxiliary function will be used to sort individual buckets using the insertion sort algorithm. **Function Signature**: ```python from typing import List def bucket_sort(arr: List[float]) -> List[float]: pass def insertion_sort(arr: List[float]) -> List[float]: pass ``` **Input**: * A list of floating-point numbers `arr` where: * (0 leq text{arr[i]} < 1) * (1 leq text{len(arr)} leq 10^6) **Output**: * A sorted list of floating-point numbers in ascending order. **Constraints**: * You must not use any built-in sorting functions for the primary sorting logic. * Focus on the implementation of the bucket sort and its integration with insertion sort. **Performance Requirements**: * Your algorithm should aim to achieve an average case time complexity of (O(n + k)). **Example**: ```python arr = [0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68] assert bucket_sort(arr) == [0.12, 0.17, 0.21, 0.23, 0.26, 0.39, 0.68, 0.72, 0.78, 0.94] ``` Implement the `bucket_sort` and `insertion_sort` functions to get the expected sorted list as per the provided example.","solution":"from typing import List def bucket_sort(arr: List[float]) -> List[float]: n = len(arr) if n == 0: return arr # Create buckets buckets = [[] for _ in range(n)] # Distribute input array values into buckets for num in arr: index = int(num * n) buckets[index].append(num) # Sort each bucket using insertion sort for i in range(n): buckets[i] = insertion_sort(buckets[i]) # Concatenate all sorted buckets sorted_array = [] for bucket in buckets: sorted_array.extend(bucket) return sorted_array def insertion_sort(arr: List[float]) -> List[float]: for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"# Question: Implement Bitonic Sort with Extended Error Handling You are to implement a function `bitonic_sort_with_error_handling(arr, reverse=False)` which sorts an array based on Bitonic Sort principles. Extend the original implementation to handle cases where the input array size is not a power of two. Requirements: 1. **Input**: - An array `arr` of integers. - A boolean `reverse` indicating the sorting order (default is False for ascending order). 2. **Output**: - Return the sorted array. 3. **Constraints**: - For non-power of two lengths, pad the array with the maximum integer value present in the array to make its length a power of two. - Ensure the output array does not retain the padding values. 4. **Performance Requirements**: - Implement the divide and conquer strategy as outlined in the analysis. Example: ```python # Example 1 input_arr = [3, 7, 4, 8, 6, 2, 1, 5] reverse = False expected_output = [1, 2, 3, 4, 5, 6, 7, 8] assert bitonic_sort_with_error_handling(input_arr, reverse) == expected_output # Example 2 input_arr = [3, 7, 4, 8] reverse = True expected_output = [8, 7, 4, 3] assert bitonic_sort_with_error_handling(input_arr, reverse) == expected_output ```","solution":"def bitonic_sort_with_error_handling(arr, reverse=False): def bitonic_compare_and_swap(arr, start, length, direction): dist = length // 2 for i in range(start, start + dist): if direction == (arr[i] > arr[i + dist]): arr[i], arr[i + dist] = arr[i + dist], arr[i] def bitonic_merge(arr, start, length, direction): if length > 1: bitonic_compare_and_swap(arr, start, length, direction) dist = length // 2 bitonic_merge(arr, start, dist, direction) bitonic_merge(arr, start + dist, dist, direction) def bitonic_sort_rec(arr, start, length, direction): if length > 1: dist = length // 2 bitonic_sort_rec(arr, start, dist, True) # ascending bitonic_sort_rec(arr, start + dist, dist, False) # descending bitonic_merge(arr, start, length, direction) def next_power_of_two(x): return 1 << (x - 1).bit_length() n = len(arr) if n == 0: return [] max_val = max(arr) target_length = next_power_of_two(n) padding_value = max_val + 1 # Value guaranteed to be larger than any element in the array padded_arr = arr + [padding_value] * (target_length - n) bitonic_sort_rec(padded_arr, 0, target_length, not reverse) sorted_arr = [x for x in padded_arr if x != padding_value] return sorted_arr"},{"question":"You are given a large sequence that starts with concatenating the sequence of positive integers: 123456789101112131415... Write a Python function `find_nth_digit(n)` that returns the nth digit in this sequence. ```python def find_nth_digit(n: int) -> int: Find the nth digit in the infinite sequence formed by concatenating positive integers in order. Parameters: n (int): The position (1-based) of the digit in the sequence to be found. Returns: int: The nth digit in the sequence. pass ``` # Input * A single integer `n` where `1 <= n <= 2^31 - 1`. # Output * A single integer representing the nth digit of the sequence. # Constraints * The function must run with an average time complexity of O(log(n)) and an auxiliary space complexity of O(1). * Handling of edge cases where `n` leads the digit calculation involving transitions between number lengths (e.g., from 9 to 10). # Example: ```python print(find_nth_digit(1)) # Output: 1 print(find_nth_digit(10)) # Output: 1 print(find_nth_digit(11)) # Output: 0 print(find_nth_digit(15)) # Output: 2 print(find_nth_digit(100)) # Output: 5 ``` # Explanation: * In the first example, the 1st digit of the sequence is 1. * In the second example, the 10th digit of the sequence is 1 (in the number 10). * In the third example, the 11th digit of the sequence is 0 (also from the number 10). * And so on... Implement the function to solve the problem efficiently.","solution":"def find_nth_digit(n: int) -> int: Find the nth digit in the infinite sequence formed by concatenating positive integers in order. Parameters: n (int): The position (1-based) of the digit in the sequence to be found. Returns: int: The nth digit in the sequence. # Initialize the current length of the sequence level length, count, start = 1, 9, 1 while n > length * count: n -= length * count length += 1 count *= 10 start *= 10 start += (n - 1) // length return int(str(start)[(n - 1) % length])"},{"question":"Context You are working on a simulation program that involves moving a robot on a 2D grid based on a series of commands. The robot starts at coordinates (0, 0) and you are given a sequence of movements in a string format. These moves consist of characters \'R\' (right), \'L\' (left), \'U\' (up), and \'D\' (down). Task Write a function `is_circle` that determines whether the given series of moves will bring the robot back to the starting point (0, 0). Return `true` if the robot returns to the origin, otherwise return `false`. Input and Output **Input**: * A string `moves` consisting of the characters \'R\', \'L\', \'U\', \'D\'. **Output**: * A boolean value: `true` if the robot returns to the origin, `false` otherwise. Constraints * The length of `moves` will be between 1 and 10000. Examples * Example 1: * Input: \\"UD\\" * Output: `true` * Explanation: The robot moves up and then down, returning to (0,0). * Example 2: * Input: \\"LL\\" * Output: `false` * Explanation: The robot moves left twice, ending at (-2,0) which is not the origin. Function Signature ```python def is_circle(moves: str) -> bool: pass ``` Notes * Consider possible edge cases, including situations where moves are unbalanced or where the input is an empty string.","solution":"def is_circle(moves: str) -> bool: Determine if the robot returns to the origin (0, 0) after a series of moves. Args: moves (str): A string of moves consisting of characters \'R\', \'L\', \'U\', \'D\'. Returns: bool: True if the robot returns to the origin, False otherwise. x, y = 0, 0 for move in moves: if move == \'R\': x += 1 elif move == \'L\': x -= 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return x == 0 and y == 0"},{"question":"You are tasked with creating a function to solve a Sudoku puzzle using backtracking and constraint propagation principles. Given a 9x9 Sudoku board where empty cells are denoted by \'.\', you need to fill the board such that every row, column, and 3x3 subgrid contains the digits 1 through 9, each appearing exactly once. # Input - `board`: A 2D list representing a 9x9 Sudoku puzzle, where each element is a character \'.\' (for empty cell) or a digit \'1\'-\'9\'. Example: ```python board``` # Output A solved Sudoku board, replacing all \'.\' with appropriate digits to complete the puzzle. # Function Signature You need to implement the following function: ```python def solve_sudoku(board: List[List[str]]) -> None: pass ``` - This function modifies the board in-place to represent the solved state. # Constraints 1. The board is a 9x9 grid, and each element is either \'.\' or a digit from \'1\' to \'9\'. 2. It\'s guaranteed that there will be only one unique solution for the given board. # Example Input: ```python boardsolve_sudoku(board) print(board) ``` Output: ```python [ [\\"5\\",\\"3\\",\\"4\\",\\"6\\",\\"7\\",\\"8\\",\\"9\\",\\"1\\",\\"2\\"], [\\"6\\",\\"7\\",\\"2\\",\\"1\\",\\"9\\",\\"5\\",\\"3\\",\\"4\\",\\"8\\"], [\\"1\\",\\"9\\",\\"8\\",\\"3\\",\\"4\\",\\"2\\",\\"5\\",\\"6\\",\\"7\\"], [\\"8\\",\\"5\\",\\"9\\",\\"7\\",\\"6\\",\\"1\\",\\"4\\",\\"2\\",\\"3\\"], [\\"4\\",\\"2\\",\\"6\\",\\"8\\",\\"5\\",\\"3\\",\\"7\\",\\"9\\",\\"1\\"], [\\"7\\",\\"1\\",\\"3\\",\\"9\\",\\"2\\",\\"4\\",\\"8\\",\\"5\\",\\"6\\"], [\\"9\\",\\"6\\",\\"1\\",\\"5\\",\\"3\\",\\"7\\",\\"2\\",\\"8\\",\\"4\\"], [\\"2\\",\\"8\\",\\"7\\",\\"4\\",\\"1\\",\\"9\\",\\"6\\",\\"3\\",\\"5\\"], [\\"3\\",\\"4\\",\\"5\\",\\"2\\",\\"8\\",\\"6\\",\\"1\\",\\"7\\",\\"9\\"] ] ``` # Note - Ensure to use efficient techniques to minimize computation. - Your function should solve the puzzle in a reasonable time frame, compatible with typical constraints (up to a few seconds for solution).","solution":"from typing import List def solve_sudoku(board: List[List[str]]) -> None: Solves the Sudoku puzzle using backtracking technique. Modifies the board in-place. def is_valid(board, row, col, num): for i in range(9): if board[row][i] == num: return False if board[i][col] == num: return False box_row = 3 * (row // 3) + i // 3 box_col = 3 * (col // 3) + i % 3 if board[box_row][box_col] == num: return False return True def solve(): for row in range(9): for col in range(9): if board[row][col] == \'.\': for num in map(str, range(1, 10)): if is_valid(board, row, col, num): board[row][col] = num if solve(): return True board[row][col] = \'.\' return False return True solve()"},{"question":"# Question You are required to implement a function to find all paths from a source node to a target node in a directed graph. Given the `DirectedGraph` class and its components (`Node`, `DirectedEdge`), write a function `find_all_paths(graph, start, end)` that returns all the distinct paths from the `start` node to the `end` node in the graph. The paths should be represented as lists of node names. # Function Signature ```python def find_all_paths(graph: DirectedGraph, start: str, end: str) -> List[List[str]]: pass ``` # Parameters - `graph`: a `DirectedGraph` object. - `start`: a string representing the name of the starting node. - `end`: a string representing the name of the ending node. # Returns - A list of paths, where each path is represented as a list of node names. # Constraints - The graph is a simple directed graph with no cycles. - Each node\'s name is a unique string. - There are no self-loops. # Example ```python graph_data = { \\"A\\": [\\"B\\", \\"C\\"], \\"B\\": [\\"C\\", \\"D\\"], \\"C\\": [\\"D\\"], \\"D\\": [] } graph = DirectedGraph(graph_data) all_paths = find_all_paths(graph, \\"A\\", \\"D\\") # Expected output: [[\'A\', \'B\', \'C\', \'D\'], [\'A\', \'B\', \'D\'], [\'A\', \'C\', \'D\']] print(all_paths) ``` # Edge Cases - The start node is the same as the end node. - No path exists from start to end. - A graph with only one node and no edges. # Notes - Ensure that the solution performs efficiently on large graphs with thousands of nodes and edges. - Avoid using global variables within the function. Use parameters to pass necessary data.","solution":"from typing import List, Dict class DirectedGraph: def __init__(self, adjacency_list: Dict[str, List[str]]): self.adjacency_list = adjacency_list def find_all_paths(graph: DirectedGraph, start: str, end: str) -> List[List[str]]: def _find_all_paths(current_node, end, path): path.append(current_node) if current_node == end: all_paths.append(list(path)) else: for neighbor in graph.adjacency_list.get(current_node, []): if neighbor not in path: _find_all_paths(neighbor, end, path) path.pop() all_paths = [] _find_all_paths(start, end, []) return all_paths"},{"question":"Problem Statement You are given multiple lists, each containing integer elements. You need to design an iterator that outputs elements from these lists in a zigzag (round-robin) manner. Specifically, your iterator should alternate between elements from each list until all lists are exhausted. # Function Signature ```python class MultiZigZagIterator: def __init__(self, lists: List[List[int]]): Initialize your data structure here. :type lists: List[List[int]] def next(self) -> int: :rtype: int def has_next(self) -> bool: :rtype: bool lists = [[1, 2], [3, 4, 5, 6], [7, 8, 9]] it = MultiZigZagIterator(lists) while it.has_next(): print(it.next()) # Should output 1 3 7 2 4 8 5 9 6 ``` # Input * `lists`: A list of `k` lists (each containing integers), where `1 <= k <= 1000` and `0 <= n <= 10000` for each sublist. # Output * The `next()` method should return the next integer from the lists in a round-robin fashion. * The `has_next()` method should return `True` if there are more integers to return, else `False`. # Constraints * Each element within the sublists is an integer. * The iterator should handle and correctly return elements even if some lists are empty. # Requirements * Implement efficient time and space complexity algorithms to handle the constraints. * Handle edge cases like empty lists and lists of different lengths.","solution":"from collections import deque from typing import List class MultiZigZagIterator: def __init__(self, lists: List[List[int]]): Initialize your data structure here. :type lists: List[List[int]] self.queue = deque() for i, lst in enumerate(lists): if lst: self.queue.append((i, 0)) self.lists = lists def next(self) -> int: :rtype: int if not self.has_next(): raise Exception(\\"No more elements\\") list_index, element_index = self.queue.popleft() result = self.lists[list_index][element_index] if element_index + 1 < len(self.lists[list_index]): self.queue.append((list_index, element_index + 1)) return result def has_next(self) -> bool: :rtype: bool return bool(self.queue)"},{"question":"Given an implementation of the `Interval` class that represents a range of real numbers and related functions to merge intervals, your task is to extend this class by enhancing its functionalities and fixing any logical errors in the existing implementation. # Objective: 1. Correct the logical error in the `__contains__` method of the `Interval` class. 2. Add a validation step to ensure that the start of an interval is always less than or equal to its end upon initialization. 3. Implement a method to split an interval into two non-overlapping intervals at a given point. # Function 1: `__contains__` * **Description**: Correctly check if a number is within the interval. * **Input**: `item` - An integer or float number. * **Output**: `True` if the number lies within the interval (including bounds), otherwise `False`. # Function 2: `__init__` * **Description**: Initialize the interval, ensuring `start` ≤ `end`. If not, raise a `ValueError`. * **Input**: * `start` - An integer or float. * `end` - An integer or float. * **Output**: Raise `ValueError` if `start` > `end`, otherwise initialize the object. # Function 3: `split` * **Description**: Split an interval into two non-overlapping intervals at a given point. * **Input**: * `point` - An integer or float where the split occurs. The point must lie within the interval. * **Output**: A tuple of two `Interval` objects representing the split intervals. * **Constraints**: * If the `point` is not within the interval, raise a `ValueError`. # Example Usage: ```python # Initialize intervals interval1 = Interval(1, 5) interval2 = Interval(3, 10) interval3 = Interval(-5, 0) # Merge intervals merged_intervals = Interval.merge([interval1, interval2, interval3]) # Print merged intervals Interval.print_intervals(merged_intervals) # Split an interval split_intervals = interval1.split(3) Interval.print_intervals(split_intervals) ``` # Notes: - Ensure to include proper error handling and edge cases. - Assume the input is always valid and well-formatted unless otherwise specified.","solution":"class Interval: def __init__(self, start, end): Initializes an interval ensuring start is less than or equal to end. if start > end: raise ValueError(\\"Start of the interval must be less than or equal to the end.\\") self.start = start self.end = end def __contains__(self, item): Checks if the item lies within the interval (inclusive of bounds). return self.start <= item <= self.end def split(self, point): Splits the interval into two non-overlapping intervals at the given point. The point must lie within the interval. Returns a tuple of two Interval objects. if point <= self.start or point >= self.end: raise ValueError(\\"Split point must lie within the interval.\\") return (Interval(self.start, point), Interval(point, self.end)) @staticmethod def merge(intervals): Merges a list of intervals into a list of disjoint intervals. sorted_intervals = sorted(intervals, key=lambda x: x.start) merged = [] for interval in sorted_intervals: if not merged or merged[-1].end < interval.start: merged.append(interval) else: merged[-1].end = max(merged[-1].end, interval.end) return merged @staticmethod def print_intervals(intervals): Prints the list of intervals in a readable format. for interval in intervals: print(f\\"[{interval.start}, {interval.end}]\\")"},{"question":"# Problem Description You are given an array of integers representing scores and a percentage to trim. Implement a function that computes the trimmed mean of the array by removing a certain percentage of the smallest and largest elements before calculating the mean. # Function Signature ```python def trimmed_mean(arr: List[int], percentage: float) -> float: pass ``` # Input * `arr` (List[int]): A list of integers (1 <= len(arr) <= 10^6, -10^6 <= arr[i] <= 10^6). * `percentage` (float): A percentage of the total number of elements to remove from both ends of the array (0 <= percentage < 100). # Output * Returns the trimmed mean of the array as a `float`. # Constraints * The given percentage will be such that at least one element remains. # Requirements * Implement the function `trimmed_mean(arr: List[int], percentage: float) -> float`. * The function must run efficiently to handle the upper limits of the constraints. # Example ```python assert trimmed_mean([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 20) == 5.5 assert trimmed_mean([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 30) == 5.5 assert trimmed_mean([5, 2, 7, 3, 10, 4, 1, 8, 6, 9], 10) == 5.5 assert trimmed_mean([-10, -20, 0, 10, 20], 40) == 0.0 ``` # Notes * The function should handle cases where all elements are the same, and the percentage is valid. * The function should handle large arrays efficiently.","solution":"from typing import List def trimmed_mean(arr: List[int], percentage: float) -> float: Computes the trimmed mean of the array by removing a certain percentage of the smallest and largest elements n = len(arr) k = int(n * percentage / 100) if k == 0: # no trimming is required if k is 0 return sum(arr) / n arr.sort() # sort the array to easily remove the smallest and largest elements trimmed_arr = arr[k:-k] # remove k smallest and k largest elements return sum(trimmed_arr) / len(trimmed_arr)"},{"question":"Question: Implement Enhanced Duplicate Removal in a Linked List # Objective You are required to implement a function to remove duplicate values from a singly linked list. The function should be efficient both in terms of time and space complexity. # Input - A singly linked list with nodes containing integer values. # Output - The modified linked list with duplicate values removed, retaining the first occurrence of each encountered value. # Constraints - The linked list can contain between 0 and 10^5 nodes. - All node values are integers and are within the range of -10^9 to 10^9. # Expectations 1. Implement an optimized algorithm considering both time and space complexities. 2. Handle edge cases effectively. 3. Ensure the algorithm is written in Python. # Function Signature ```python class Node: def __init__(self, val = None): self.val = val self.next = None def remove_duplicates(head: Node) -> Node: # Your code here # Example Usage: # Example Input: 1 -> 2 -> 2 -> 3 -> 1 # Example Output: 1 -> 2 -> 3 # Create a linked list for the example head = Node(1) head.next = Node(2) head.next.next = Node(2) head.next.next.next = Node(3) head.next.next.next.next = Node(1) # Remove duplicates remove_duplicates(head) # Function to print the list def print_linked_list(head: Node): res = [] while head: res.append(head.val) head = head.next print(\\" -> \\".join(map(str, res))) # Print the result print_linked_list(head) # Output should be \\"1 -> 2 -> 3\\" ``` # Performance Requirements - Aim for O(N) time complexity. - Aim for O(N) or better space complexity, considering internal data structures used.","solution":"class Node: def __init__(self, val=None): self.val = val self.next = None def remove_duplicates(head: Node) -> Node: if head is None: return None seen = set() current = head seen.add(current.val) while current.next: if current.next.val in seen: current.next = current.next.next else: seen.add(current.next.val) current = current.next return head # Utility functions to assist with testing def create_linked_list(values): if not values: return None head = Node(values[0]) current = head for value in values[1:]: current.next = Node(value) current = current.next return head def linked_list_to_list(head): values = [] current = head while current: values.append(current.val) current = current.next return values"},{"question":"**Context**: You are tasked with ensuring the reliability of a software system by detecting potential deadlocks in resource utilisation. The system\'s processes and their resource dependencies are represented as a directed graph where each process is a vertex and a directed edge A -> B indicates that process A is waiting for process B to release a resource. **Task**: Write a function `contains_deadlock(process_graph: dict) -> bool` that checks whether there is a deadlock within the given directed graph (i.e., whether the graph contains a cycle). **Function Signature**: ```python def contains_deadlock(process_graph: dict) -> bool: # Your implementation here ``` **Input**: - `process_graph` (dict): A dictionary representing the directed graph where keys are process identifiers (strings) and values are lists of processes (strings) they are waiting for. **Output**: - Returns `True` if there is a deadlock (cycle) in the graph, otherwise `False`. **Constraints**: - The graph\'s vertices (processes) are represented by unique strings. - The number of vertices (V) and edges (E) is such that 0 <= V, E <= 10^5. **Example**: ```python process_graph = { \'P1\': [\'P2\'], \'P2\': [\'P3\'], \'P3\': [\'P1\'], # Cycle P1 -> P2 -> P3 -> P1 \'P4\': [\'P5\'], \'P5\': [\'P6\'], \'P6\': [] } assert contains_deadlock(process_graph) == True ``` **Explanation**: In the example, there is a deadlock (cycle) involving processes P1, P2, and P3. **Requirements**: - Implement the function using DFS as described. - Ensure it handles the input constraints efficiently. - Consider edge cases like self-loops and disconnected components.","solution":"def contains_deadlock(process_graph: dict) -> bool: def dfs(node, visited, recursion_stack): visited.add(node) recursion_stack.add(node) for neighbor in process_graph.get(node, []): if neighbor not in visited: if dfs(neighbor, visited, recursion_stack): return True elif neighbor in recursion_stack: return True recursion_stack.remove(node) return False visited = set() recursion_stack = set() for node in process_graph: if node not in visited: if dfs(node, visited, recursion_stack): return True return False"},{"question":"# Problem Description You are tasked with implementing a B-tree and extending its functionality with a new operation and performance optimization. Specifically, you will add a function that retrieves all keys within a specified range efficiently. # Objective Implement the function `range_search` in the `BTree` class that returns all keys within a specified inclusive range `[low, high]`. # Function Signature ```python def range_search(self, low: int, high: int) -> List[int]: This function should return a list of all keys within the inclusive range [low, high]. Parameters: low (int): Lower boundary of the range. high (int): Upper boundary of the range. Returns: List[int]: A list of keys within the specified range in sorted order. ``` # Input - Two integers `low` and `high` that define the inclusive range. # Output - A list of integers that fall within the inclusive range `[low, high]`, sorted in ascending order. # Constraints - `1 <= low <= high <= 10^9`. - The number of keys in the B-tree (N) can be up to `10^6`. # Performance Requirements - The function should run in O(m + log N) time, where m is the number of keys in the range and N is the total number of keys in the tree. - Implement the search to leverage the structural properties of the B-tree for efficiency. # Example ```python # Create a B-tree and insert keys in it btree = BTree(t_val=3) keys = [20, 15, 25, 10, 5, 30, 35, 3, 17] for key in keys: btree.insert_key(key) # Perform range search in the B-tree result = btree.range_search(low=10, high=25) print(result) # Output: [10, 15, 17, 20, 25] ``` # Note - Assume the B-tree class and supporting classes are defined as provided in the code snippet. - Focus your implementation on the `range_search` method.","solution":"class BTreeNode: def __init__(self, t, leaf=False): self.t = t # Minimum degree (defines the range for the number of keys) self.leaf = leaf # True if leaf node, otherwise false self.keys = [] # List of keys in the node self.children = [] # List of child pointers def traverse_in_range(self, low, high, result): Traverse the nodes and add keys within the [low, high] range to the result list. i = 0 while i < len(self.keys) and self.keys[i] < low: i += 1 while i < len(self.keys) and self.keys[i] <= high: if not self.leaf: self.children[i].traverse_in_range(low, high, result) result.append(self.keys[i]) i += 1 if not self.leaf: self.children[i].traverse_in_range(low, high, result) class BTree: def __init__(self, t): self.root = BTreeNode(t, True) self.t = t # Minimum degree def insert_key(self, k): Insert a new key in the B-Tree. root = self.root if len(root.keys) == (2 * self.t) - 1: temp = BTreeNode(self.t, False) temp.children.insert(0, self.root) self.root = temp self._split_child(temp, 0) self._insert_non_full(temp, k) else: self._insert_non_full(root, k) def _split_child(self, x, i): t = self.t y = x.children[i] z = BTreeNode(t, y.leaf) x.children.insert(i + 1, z) x.keys.insert(i, y.keys[t - 1]) z.keys = y.keys[t:(2 * t - 1)] y.keys = y.keys[0:(t - 1)] if not y.leaf: z.children = y.children[t:(2 * t)] y.children = y.children[0:t] def _insert_non_full(self, x, k): i = len(x.keys) - 1 if x.leaf: x.keys.append(None) while i >= 0 and k < x.keys[i]: x.keys[i + 1] = x.keys[i] i -= 1 x.keys[i + 1] = k else: while i >= 0 and k < x.keys[i]: i -= 1 i += 1 if len(x.children[i].keys) == (2 * self.t) - 1: self._split_child(x, i) if k > x.keys[i]: i += 1 self._insert_non_full(x.children[i], k) def range_search(self, low, high): Return a list of all keys within the inclusive range [low, high]. result = [] if self.root: self.root.traverse_in_range(low, high, result) return result"},{"question":"# Strong Connectivity Check in a Directed Graph You are tasked with determining if a provided directed graph is strongly connected. A directed graph is strongly connected if there is a path between any two vertices in both directions. To accomplish this, you will implement the following functions: 1. `add_edge(self, source: int, target: int) -> None`: Adds a directed edge from the source vertex to the target vertex. 2. `dfs(self) -> bool`: Determines if all nodes are reachable from node 0 using Depth-First Search (DFS). 3. `dfs_util(self, source: int, visited: List[bool]) -> None`: A utility function for DFS from the given source. 4. `reverse_graph(self) -> \'Graph\'`: Creates and returns a new graph where every edge is reversed. 5. `is_strongly_connected(self) -> bool`: Checks if the graph is strongly connected by ensuring all vertices are mutually reachable. Input and Output Formats * **Input**: * A directed graph represented by its edges. * Example: [(0, 1), (1, 2), (2, 0)] for a graph with edges from 0 to 1, 1 to 2, and 2 to 0. * **Output**: * A boolean indicating if the graph is strongly connected (`True`) or not (`False`). Constraints * The number of vertices (V) will be in the range: 1 <= V <= 1000. * The number of edges (E) will be in the range: 0 <= E <= 10000. # Example **Input**: ```python g = Graph(4) edges = [(0, 1), (1, 2), (2, 3), (3, 0)] for source, target in edges: g.add_edge(source, target) print(g.is_strongly_connected()) # Output: True ``` **Explanation**: In the given example, each node can reach every other node following the directed connections, thus it is strongly connected. Implementation Provide the function implementations without assuming access to example code.","solution":"from typing import List, Dict, Set class Graph: def __init__(self, vertices: int): self.V = vertices self.graph = {i: [] for i in range(vertices)} def add_edge(self, source: int, target: int) -> None: self.graph[source].append(target) def dfs_util(self, source: int, visited: List[bool]) -> None: visited[source] = True for neighbor in self.graph[source]: if not visited[neighbor]: self.dfs_util(neighbor, visited) def dfs(self) -> List[bool]: visited = [False] * self.V self.dfs_util(0, visited) return visited def reverse_graph(self) -> \'Graph\': reversed_graph = Graph(self.V) for source in self.graph: for target in self.graph[source]: reversed_graph.add_edge(target, source) return reversed_graph def is_strongly_connected(self) -> bool: # Step 1: Perform DFS from any node (e.g., vertex 0) visited = self.dfs() if not all(visited): return False # Step 2: Reverse the graph reversed_graph = self.reverse_graph() # Step 3: Perform DFS on the reversed graph from the same node (e.g., vertex 0) visited_reversed = reversed_graph.dfs() if not all(visited_reversed): return False return True"},{"question":"# Red-Black Tree Subtree Sum In this coding assessment, your task is to implement a function that computes the sum of all the node values in the subtree rooted at a given node in a red-black tree. The red-black tree is implemented as shown in the provided code snippet. The function will be used to support queries on the tree to quickly calculate subtree sums. # Function Signature ```python def subtree_sum(tree: RBTree, value: int) -> int: This function should return the sum of all node values in the subtree rooted at the node with the given value. :param tree: An instance of RBTree :param value: The value of the node whose subtree sum needs to be calculated. :return: Sum of subtree rooted at given node\'s value ``` # Example ```python # Example usage rb = RBTree() children = [11, 2, 14, 1, 7, 15, 5, 8, 4] for child in children: node = RBNode(child, 1) rb.insert(node) # Find sum of subtree rooted at node with value 2 print(subtree_sum(rb, 2)) # Output should be 27 (sum of nodes: 2, 1, 7, 5, 8, 4) ``` # Constraints * The function should be implemented considering the properties of a red-black tree such as balancing and efficient traversal. * You can assume all node values are distinct. * Ensure that the solution has a time complexity of O(n) in the worst case. # Notes * You may not alter the provided `RBTree` and `RBNode` classes. * Assume the given `value` always exists in the tree. # Requirements * Implement the `subtree_sum` function to calculate the sum efficiently. * Think about edge cases such as when the node with the given value has no children (subtree sum should be the value itself).","solution":"class RBNode: def __init__(self, val, color, parent=None, left=None, right=None): self.val = val self.color = color self.parent = parent self.left = left self.right = right class RBTree: def __init__(self): self.nil = RBNode(None, 0) self.root = self.nil def insert(self, node): node.left = self.nil node.right = self.nil node.parent = None parent = None current = self.root while current != self.nil: parent = current if node.val < current.val: current = current.left else: current = current.right node.parent = parent if parent is None: self.root = node elif node.val < parent.val: parent.left = node else: parent.right = node node.color = 1 # red self.fix_insert(node) def fix_insert(self, node): # Fixing the tree after insertion, red-black tree specific rules pass def subtree_sum(tree: RBTree, value: int) -> int: def find_node(node: RBNode, val: int) -> RBNode: if node == tree.nil or node.val == val: return node elif val < node.val: return find_node(node.left, val) else: return find_node(node.right, val) def calculate_subtree_sum(node: RBNode) -> int: if node == tree.nil: return 0 return node.val + calculate_subtree_sum(node.left) + calculate_subtree_sum(node.right) root_node = find_node(tree.root, value) if root_node == tree.nil: return 0 return calculate_subtree_sum(root_node)"},{"question":"# Question: Decode Encoded String You are given an encoded string where the encoding follows the pattern `k[encoded_string]`, where the `encoded_string` inside the square brackets is repeated exactly `k` times. Your task is to decode the string and return the decoded string. **Function Signature** ```python def decode_string(s: str) -> str: ``` # Input - `s`: A string of length `1 <= len(s) <= 30,000`. The string is composed of lowercase English letters, digits, and square brackets (`[]`). # Output - Returns a string representing the decoded version of the input string `s`. # Constraints - The input string is guaranteed to be valid; no extra white spaces, square brackets are well-formed, etc. - Digits in the input string only represent repeat counts for the `encoded_string`; characters in `encoded_string` are only lowercase letters. # Examples - Example 1: ```python assert decode_string(\\"3[a]2[bc]\\") == \\"aaabcbc\\" ``` - Example 2: ```python assert decode_string(\\"3[a2[c]]\\") == \\"accaccacc\\" ``` - Example 3: ```python assert decode_string(\\"2[abc]3[cd]ef\\") == \\"abcabccdcdcdef\\" ``` **Note**: Aim for an efficient implementation with optimal use of space and time complexity.","solution":"def decode_string(s: str) -> str: def get_digits(i): start = i while i < len(s) and s[i].isdigit(): i += 1 return int(s[start:i]), i stack = [] i = 0 while i < len(s): if s[i].isdigit(): num, i = get_digits(i) stack.append(num) elif s[i] == \'[\': stack.append(\'[\') i += 1 elif s[i] == \']\': substr = [] while stack and stack[-1] != \'[\': substr.append(stack.pop()) stack.pop() # remove \'[\' count = stack.pop() stack.append(\'\'.join(reversed(substr)) * count) i += 1 else: stack.append(s[i]) i += 1 return \'\'.join(stack)"},{"question":"**Problem Statement**: You are tasked with writing a function to enhance a numeric utility library. Your function will efficiently determine the number of digits in an integer using an approach based on logarithmic computation. **Function Signature**: ```python def num_digits(n: int) -> int: ``` **Input**: - `n` (integer): A numerical integer `n`, which can be positive, negative, or zero. - Constraints: -10^18 <= n <= 10^18 **Output**: - Return an integer representing the number of digits in the absolute value of `n`. **Performance requirements**: - The function should operate with a time complexity of O(1). **Example Cases**: 1. **Example 1**: - Input: `n = 1234` - Output: `4` - Explanation: 1234 has 4 digits 2. **Example 2**: - Input: `n = -9876` - Output: `4` - Explanation: Absolute value of -9876 is 9876, which has 4 digits 3. **Example 3**: - Input: `n = 0` - Output: `1` - Explanation: The number 0 is considered to have one digit. **Special Note**: - Your implementation should focus on leveraging logarithmic operations for efficient calculation. Ensure your function properly handles edge cases like zero and negative numbers. **Explanation**: - Your solution should be built with the awareness of the intricacies of logarithmic operations and how they can be effectively utilized to count digits. - Ensure to validate against typical boundary conditions as well as performance against maximum input size.","solution":"import math def num_digits(n: int) -> int: Returns the number of digits in the absolute value of the given integer n using logarithmic computation. if n == 0: return 1 return math.floor(math.log10(abs(n))) + 1"},{"question":"/** * **Problem Statement**: * * You are tasked with writing a function `split_path` that takes a string representing a file path or a URL and returns a tuple containing the directory path and the file name. * The function should be designed to handle typical edge cases as described below. * * **Function Signature**: * * ```python * def split_path(path: str) -> tuple: * pass * ``` * * **Input**: * - `path` (str): A non-empty string representing the path. * * **Output**: * - (tuple): A tuple containing two strings - the directory path and the file name. * * **Constraints**: * - The input path will always be a non-empty string. * - The function must handle both URLs and file paths. * * **Performance Requirements**: * - The solution should be efficient with a time complexity of O(n), where n is the length of the string. * * **Example**: * * ```python * # Example 1 * path = \\"https://algorithms/unix/test.py\\" * print(split_path(path)) * # Output: (\\"https://algorithms/unix\\", \\"test.py\\") * * # Example 2 * path = \\"algorithms/unix/test.py\\" * print(split_path(path)) * # Output: (\\"algorithms/unix\\", \\"test.py\\") * * # Example 3 * path = \\"test.py\\" * print(split_path(path)) * # Output: (\\"\\", \\"test.py\\") * * # Example 4 * path = \\"algorithms/\\" * print(split_path(path)) * # Output: (\\"algorithms\\", \\"\\") * ``` * * **Notes**: * - Your implementation should be robust enough to handle corner cases like empty directory names or only file names. */ def split_path(path: str) -> tuple: parts = path.rpartition(\'/\') return (parts[0], parts[2])","solution":"def split_path(path: str) -> tuple: Takes a string representing a file path or a URL and returns a tuple containing the directory path and the file name. # Use rpartition to split from the rightmost \'/\' directory, _, filename = path.rpartition(\'/\') return (directory, filename)"},{"question":"**Scenario**: You are tasked with developing a function to evaluate stack-based operations efficiently. The goal is to switch successive pairs of numbers starting from the bottom of the stack. You need to write a function with a clear understanding of stack operations and auxiliary storage to achieve this. **Task**: Implement a function that modifies a given stack by switching each pair of successive elements, starting from the bottom. If there is an odd number of elements, the top element remains unchanged. **Function Signature**: ```python def switch_pairs(stack: list) -> list: Takes a list representing a stack and switches successive pairs of numbers starting from the bottom. Parameters: stack (list): A list of integers representing the stack, from bottom to top. Returns: list: Modified stack with switched pairs. pass ``` **Input**: - `stack`: A list of integers where the first element represents the bottom of the stack and the last element represents the top. **Output**: - A list of integers representing the stack with successive pairs switched. **Constraints**: - You may use a single auxiliary stack or queue to achieve the switch. - Your function should handle edge cases effectively. **Examples**: ```python assert switch_pairs([3, 8, 17, 9, 1, 10]) == [8, 3, 9, 17, 10, 1] assert switch_pairs([3, 8, 17, 9, 1]) == [8, 3, 9, 17, 1] assert switch_pairs([1]) == [1] assert switch_pairs([]) == [] ``` **Performance Requirements**: The solution must handle input stacks of varying lengths, including edge cases, efficiently within `O(n)` time complexity and `O(n)` space complexity. **Note**: - Clarify the method used (stack or queue) for auxiliary storage. - Address how your solution handles edge cases such as odd number of elements, empty stack, and single-element stack.","solution":"def switch_pairs(stack): Takes a list representing a stack and switches successive pairs of numbers starting from the bottom. Parameters: stack (list): A list of integers representing the stack, from bottom to top. Returns: list: Modified stack with switched pairs. n = len(stack) modified_stack = [] i = 0 while i < n - 1: # Swap pairs modified_stack.append(stack[i + 1]) modified_stack.append(stack[i]) i += 2 # If there\'s an odd number of elements, add the last element if i < n: modified_stack.append(stack[i]) return modified_stack"},{"question":"1-Sparse Recovery in Dynamic Streams Implement a function `one_sparse(array)` to determine if a given stream of tuples contains a unique non-zero number after considering all additions and subtractions. The stream is composed of tuples where each tuple contains a non-negative integer and a sign (\'+\' or \'-\') indicating whether to add or subtract the number. Input - `array`: List of tuples, where each tuple contains a number (non-negative integer) and a sign (either \'+\' or \'-\'). Output - Return the unique non-zero number that remains after all calculations if the stream is 1-sparse. - If the stream is not 1-sparse (i.e., contains more than one distinct non-zero number), return `None`. Constraints - Numbers in the stream will be non-negative integers. - Stream length will be at most (10^5). Example ```python # Example 1 Input: [(4,\'+\'), (2,\'+\'), (2,\'-\'), (4,\'+\'), (3,\'+\'), (3,\'-\')] Output: 4 # Comments: After canceling out 2 and 3, 4 remains. # Example 2 Input: [(2,\'+\'), (2,\'+\'), (2,\'+\'), (2,\'+\'), (2,\'+\'), (2,\'+\'), (2,\'+\')] Output: 2 # Comments: The stream contains only 2\'s with a total of 7 additions. # Example 3 Input: [(2,\'+\'), (2,\'+\'), (2,\'+\'), (2,\'+\'), (2,\'+\'), (2,\'+\') (1,\'+\')] Output: None # Comments: The stream is not 1-sparse since it contains more than one unique non-zero number. ``` Function Signature ```python def one_sparse(array: [(int, str)]) -> int: # Your code goes here ```","solution":"def one_sparse(array): Determines if the stream is 1-sparse, and returns the unique non-zero number if it is. Parameters: array (list of tuple): List of tuples where each tuple contains a number (non-negative integer) and a sign (\'+\' or \'-\'). Returns: int: The unique non-zero number if the stream is 1-sparse, else None. # Dictionary to store the net occurrence of each number count_dict = {} for num, sign in array: if sign == \'+\': count_dict[num] = count_dict.get(num, 0) + 1 elif sign == \'-\': count_dict[num] = count_dict.get(num, 0) - 1 # Filter out the numbers with non-zero net occurrences result = [num for num, count in count_dict.items() if count != 0] if len(result) == 1: return result[0] else: return None"},{"question":"Scenario: You are working on a communication protocol where messages, each consisting of a list of strings, need to be serialized into a single string for transmission. Once received, they must be deserialized back into the original list of strings. Your task is to implement these serialization (encoding) and deserialization (decoding) functions. Task: 1. Implement the `encode` function to serialize a list of strings into a single string. 2. Implement the `decode` function to deserialize a single string back into a list of strings. # Function Signature: ```python def encode(strs: List[str]) -> str: pass def decode(s: str) -> List[str]: pass ``` # Input: - `encode` receives a list of strings `strs`. - `decode` receives a single string `s`. # Output: - `encode` should return a single encoded string. - `decode` should return a list of strings. # Constraints: - The encoded string should handle any type of characters in the strings, including special characters and numbers. - The delimiter for encoding should be non-conflicting with possible string values. # Example: ```python strs = [\\"hello\\", \\"world\\"] encoded_string = encode(strs) print(encoded_string) # Example output: \\"5:hello5:world\\" decoded_list = decode(encoded_string) print(decoded_list) # Example output: [\\"hello\\", \\"world\\"] ``` # Requirements: - The solution should correctly handle empty strings and strings containing special characters. - Ensure the solution is efficient and handles large input sizes within reasonable time limits.","solution":"from typing import List def encode(strs: List[str]) -> str: Encodes a list of strings to a single string. encoded_str = \\"\\" for s in strs: length = len(s) encoded_str += f\\"{length}:{s}\\" return encoded_str def decode(s: str) -> List[str]: Decodes a single string to a list of strings. decoded_strs = [] i = 0 while i < len(s): j = s.find(\':\', i) length = int(s[i:j]) decoded_strs.append(s[j+1:j+1+length]) i = j + 1 + length return decoded_strs"},{"question":"# Context: You are assigned to optimize the processing of large datasets of non-negative integers. To this end, you have decided to implement the Radix Sort, a non-comparative sorting algorithm known for its efficiency with certain datasets. # Question: Implement a function `optimized_radix_sort` to sort an array of non-negative integers using the radix sort algorithm. The function should not simulate the iterations, but ensure an efficient and correct implementation. Your task also includes handling edge cases and ensuring minimal memory overhead where possible. # Function Signature: ```python def optimized_radix_sort(arr: List[int]) -> List[int]: pass ``` # Input: - `arr` (List[int]): A list of non-negative integers. # Output: - (List[int]): A list of integers sorted in ascending order. # Constraints: - The array can contain up to 10^6 elements. - Each element can range from 0 to 10^6. # Performance Requirements: - Your implementation should be efficient in terms of time complexity. - Minimize additional memory usage where possible. # Example: ```python assert optimized_radix_sort([170, 45, 75, 90, 802, 24, 2, 66]) == [2, 24, 45, 66, 75, 90, 170, 802] assert optimized_radix_sort([3, 3, 2, 1, 0]) == [0, 1, 2, 3, 3] assert optimized_radix_sort([]) == [] ``` # Note: - The function should handle cases like empty arrays efficiently. - Ensure that all intermediate steps are handled correctly to avoid errors and inefficiencies.","solution":"from typing import List def optimized_radix_sort(arr: List[int]) -> List[int]: Sorts a list of non-negative integers using the radix sort algorithm. if not arr: # Early exit for empty array return arr # Find the maximum number to know number of digits max_val = max(arr) # Do counting sort for every digit exp = 1 # Exponent to fetch the current digit, e.g., 1 for units, 10 for tens, etc. while max_val // exp > 0: arr = counting_sort(arr, exp) exp *= 10 return arr def counting_sort(arr: List[int], exp: int) -> List[int]: A function to do counting sort of arr[] according to the digit represented by exp n = len(arr) output = [0] * n # output array to store sorted numbers count = [0] * 10 # range for each digit is 0 to 9 # Store count of occurrences of each digit in count[] for i in range(n): index = (arr[i] // exp) % 10 count[index] += 1 # Change count[i] so that count[i] contains the actual position of this digit in output[] for i in range(1, 10): count[i] += count[i - 1] # Build the output array for i in range(n - 1, -1, -1): index = (arr[i] // exp) % 10 output[count[index] - 1] = arr[i] count[index] -= 1 # Return sorted array for this digit return output"},{"question":"# Binary Heap Implementation Exercise Context: You have been hired by a tech company to implement a basic but efficient priority queue using a binary heap. The binary heap must be a min-heap. Problem: Implement the `BinaryHeap` class with its core methods: `insert`, `remove_min`, `perc_up`, `perc_down`, and `min_child` as defined below. **Class Design:** Your `BinaryHeap` class should provide the following functionalities: 1. **insert(val)**: Insert a value `val` into the heap. 2. **remove_min()**: Remove and return the smallest value from the heap. 3. **perc_up(i)**: Used internally to maintain the heap property when inserting elements. 4. **perc_down(i)**: Used internally to maintain the heap property when removing elements. 5. **min_child(i)**: Used internally to find the smaller child of a given node. **Expected Input and Output:** - In Python, class methods do not require any external inputs in their parameters except the instance reference. - The `insert` method should increase the size of the heap for each insertion correctly. - The `remove_min` method should return the smallest element and maintain the heap property after removal. **Constraints:** - Elements to be inserted will be integers. - Assume no upper limit on the number of elements that can be handled by the heap initially. **Implementation Example:** ```python # Example usage: bh = BinaryHeap() bh.insert(4) bh.insert(50) bh.insert(7) print(bh.remove_min()) # Output: 4 ``` Your Task: Implement the `BinaryHeap` class with the methods described, ensuring that all edge cases (such as removing from an empty heap) are handled correctly. Provide the implementation below: ```python class BinaryHeap: def __init__(self): self.current_size = 0 self.heap = [(0)] def perc_up(self, i): # TO DO: Implement this method def insert(self, val): # TO DO: Implement this method def min_child(self, i): # TO DO: Implement this method def perc_down(self, i): # TO DO: Implement this method def remove_min(self): # TO DO: Implement this method ```","solution":"class BinaryHeap: def __init__(self): self.current_size = 0 self.heap = [0] # Using 0 at index 0 as a sentinel for easier index calculations def perc_up(self, i): while i // 2 > 0: if self.heap[i] < self.heap[i // 2]: self.heap[i], self.heap[i // 2] = self.heap[i // 2], self.heap[i] i //= 2 def insert(self, val): self.heap.append(val) self.current_size += 1 self.perc_up(self.current_size) def min_child(self, i): if i * 2 + 1 > self.current_size: # If there is no right child return i * 2 else: if self.heap[i * 2] < self.heap[i * 2 + 1]: return i * 2 else: return i * 2 + 1 def perc_down(self, i): while i * 2 <= self.current_size: min_child_index = self.min_child(i) if self.heap[i] > self.heap[min_child_index]: self.heap[i], self.heap[min_child_index] = self.heap[min_child_index], self.heap[i] i = min_child_index def remove_min(self): if self.current_size == 0: raise IndexError(\\"remove_min from an empty heap\\") root_val = self.heap[1] self.heap[1] = self.heap[self.current_size] self.current_size -= 1 self.heap.pop() self.perc_down(1) return root_val def __len__(self): return self.current_size def __str__(self): return str(self.heap[1:])"},{"question":"Valid Parentheses Checker Given a string `s` containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', write a function `is_valid(s: str) -> bool` that determines if the input string of parentheses is valid. A string is considered valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. Example Inputs and Outputs: * `is_valid(\\"()\\")` should return `True`. * `is_valid(\\"()[]{}\\")` should return `True`. * `is_valid(\\"(]\\")` should return `False`. * `is_valid(\\"([)]\\")` should return `False`. * `is_valid(\\"{[]}\\")` should return `True`. Constraints: * The input string `s` may contain any number of characters from 0 to 10^4. * The string only contains the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Requirements: * The function should be optimized to handle the constraints efficiently. * You are not allowed to use any libraries that provide direct validation of such structures. **Additional Context:** Imagine you are developing a new code editor. One of the features that need to be implemented is to check whether the code written by a user contains well-formed parentheses. The above function will be integrated into this feature to provide real-time feedback to the user. Implement the function to achieve the desired solution.","solution":"def is_valid(s: str) -> bool: Determines if the input string of parentheses is valid. Args: s (str): A string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: bool: True if the string is valid, else False. stack = [] mapping = {\\")\\": \\"(\\", \\"}\\": \\"{\\", \\"]\\": \\"[\\"} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"# Inverting a Square Matrix with Constraints **Objective**: Implement a function `invert_square_matrix(matrix: List[List[float]]) -> List[List[float]]` that inverts a given n x n non-singular (det ≠ 0) matrix using the described steps of the algorithm. Handle edge cases, and ensure efficient performance. **Input**: - **matrix** (`List[List[float]]`): A 2D list representing an n x n matrix where 2 ≤ n ≤ 10 and the matrix is non-singular. **Output**: - **inverted_matrix** (`List[List[float]]`): A 2D list representing the inverted n x n matrix. **Constraints**: - The input matrix is guaranteed to be square (n x n). - The matrix elements are floating-point numbers. - The determinant of the matrix is non-zero (ensuring it\'s invertible). **Performance Requirements**: - The solution should handle matrices efficiently within the given size constraints. **Scenario**: You are developing a software module for solving systems of linear equations in computer graphics transformations. This requires frequently inverting matrices to apply transformations properly. The function will be integrated into a larger framework that manipulates geometric data. **Function Signature**: ```python from typing import List def invert_square_matrix(matrix: List[List[float]]) -> List[List[float]]: pass ``` # Example **Example Input**: ```python matrix = [ [4, 7], [2, 6] ] ``` **Example Output**: ```python # Expected output is the matrix inversion [[0.6, -0.7], [-0.2, 0.4]] ``` # Notes: 1. You must handle potential errors gracefully, such as checking if the matrix is invertible and if it\'s correctly formatted. 2. Optimize the inversion process to minimize redundant calculations.","solution":"from typing import List def invert_square_matrix(matrix: List[List[float]]) -> List[List[float]]: Inverts a given non-singular n x n matrix. import numpy as np n = len(matrix) assert n >= 2 and n <= 10, \\"Matrix size should be between 2 and 10 inclusive\\" for row in matrix: assert len(row) == n, \\"Matrix must be square\\" matrix_np = np.array(matrix) determinant = np.linalg.det(matrix_np) if determinant == 0: raise ValueError(\\"Matrix is singular and cannot be inverted\\") inverted_matrix_np = np.linalg.inv(matrix_np) return inverted_matrix_np.tolist()"},{"question":"**Problem Statement**: You are given an array of integers. You need to implement a class `MyFenwickTree` that can perform the following operations efficiently: 1. **Prefix sum query**: Calculate the sum of elements from the beginning of the array to a given index `i`. 2. **Update**: Update the value of an element at a given index `i`. Implement the class `MyFenwickTree` with the following methods: * `__init__(self, arr: List[int]) -> None` : Initializes the class with the provided array. * `update(self, i: int, val: int) -> None`: Updates the value at index `i` to `val`. * `get_prefix_sum(self, i: int) -> int`: Returns the sum of the array elements from index `0` to `i`. **Input Format** : * `__init__` will receive: * `arr`: a list of integers (1 <= len(arr) <= 10^5, -10^5 <= arr[i] <= 10^5). * `update` and `get_prefix_sum` will receive: * `i`: an integer representing the index (0 <= i < len(arr)). **Output Format** : * `get_prefix_sum` will return the computed prefix sum for the given index. * `update` will not return anything. **Constraints**: * The sum queried using `get_prefix_sum` will fit in a 32-bit signed integer. **Example**: ```python ft = MyFenwickTree([1, 7, 3, 0, 7, 8, 3, 2, 6, 2]) print(ft.get_prefix_sum(5)) # Output: 26 (1+7+3+0+7+8) ft.update(3, 5) print(ft.get_prefix_sum(5)) # Output: 31 (1+7+3+5+7+8) ``` Your implementation should ensure that both `update` and `get_prefix_sum` are efficient.","solution":"from typing import List class MyFenwickTree: def __init__(self, arr: List[int]) -> None: self.n = len(arr) self.ftree = [0] * (self.n + 1) self.arr = arr[:] for i in range(self.n): self._update_internal(i, arr[i]) def _update_internal(self, i: int, delta: int) -> None: i += 1 # Fenwick tree is 1-indexed while i <= self.n: self.ftree[i] += delta i += i & -i def update(self, i: int, val: int) -> None: delta = val - self.arr[i] self.arr[i] = val self._update_internal(i, delta) def get_prefix_sum(self, i: int) -> int: sum_ = 0 i += 1 # Fenwick tree is 1-indexed while i > 0: sum_ += self.ftree[i] i -= i & -i return sum_"},{"question":"# Question: Calculate the Missing Side in a Right-Angled Triangle Given a right-angled triangle, you need to write a function to compute the length of one side of the triangle when the lengths of two sides are given. **Function Signature**: ```python def pythagoras(opposite: Union[float, str], adjacent: Union[float, str], hypotenuse: Union[float, str]) -> str: pass ``` # Input * `opposite`: The length of the opposite side of the right-angled triangle (`float`) or a question mark (`str`) indicating the side to be calculated. * `adjacent`: The length of the adjacent side of the right-angled triangle (`float`) or a question mark (`str`) indicating the side to be calculated. * `hypotenuse`: The length of the hypotenuse of the right-angled triangle (`float`) or a question mark (`str`) indicating the side to be calculated. # Output * Returns the length of the missing side in the format \\"Side = length\\", where \\"Side\\" is one of \\"Opposite\\", \\"Adjacent\\", or \\"Hypotenuse\\". If no side is missing, return \\"You already know the answer!\\". # Constraints * Only one of `opposite`, `adjacent`, or `hypotenuse` will be a question mark (`\'?\'`). * If the hypotenuse is given, it must be the longest side. * Only valid right-angled triangle dimensions will be provided. # Performance Requirements * The function should perform in constant time, O(1). # Examples ```python assert pythagoras(\\"?\\", 4.0, 5.0) == \\"Opposite = 3.0\\" assert pythagoras(3.0, \\"?\\", 5.0) == \\"Adjacent = 4.0\\" assert pythagoras(3.0, 4.0, \\"?\\") == \\"Hypotenuse = 5.0\\" assert pythagoras(3.0, 4.0, 5.0) == \\"You already know the answer!\\" ``` # Special Instructions * Be sure to handle invalid inputs gracefully by raising a `ValueError`. * Check that the hypotenuse, if provided, is indeed the largest side before performing other calculations.","solution":"from typing import Union def pythagoras(opposite: Union[float, str], adjacent: Union[float, str], hypotenuse: Union[float, str]) -> str: if opposite == \'?\' and isinstance(adjacent, float) and isinstance(hypotenuse, float): if hypotenuse <= adjacent: raise ValueError(\\"Hypotenuse must be the longest side.\\") opposite_length = (hypotenuse ** 2 - adjacent ** 2) ** 0.5 return f\\"Opposite = {opposite_length:.1f}\\" if adjacent == \'?\' and isinstance(opposite, float) and isinstance(hypotenuse, float): if hypotenuse <= opposite: raise ValueError(\\"Hypotenuse must be the longest side.\\") adjacent_length = (hypotenuse ** 2 - opposite ** 2) ** 0.5 return f\\"Adjacent = {adjacent_length:.1f}\\" if hypotenuse == \'?\' and isinstance(opposite, float) and isinstance(adjacent, float): hypotenuse_length = (opposite ** 2 + adjacent ** 2) ** 0.5 return f\\"Hypotenuse = {hypotenuse_length:.1f}\\" if all(isinstance(x, float) for x in [opposite, adjacent, hypotenuse]): return \\"You already know the answer!\\" raise ValueError(\\"Invalid input.\\")"},{"question":"You have been given a list of integers and two optional integer parameters, `min_lim` and `max_lim`. Your task is to write a function `limited_slice(arr, min_lim=None, max_lim=None)` that returns a new list containing only the values from the input list `arr` that fall within the inclusive range defined by `min_lim` and `max_lim`. If `min_lim` or `max_lim` is not provided (None), the function should consider only the other bound and include all values in the list above or below the provided bound. If both are not provided, the function should return the input list as is. # Input Format - A list of integers `arr` where `1 <= len(arr) <= 10^5` and `-10^9 <= arr[i] <= 10^9`. - An optional integer `min_lim` where `-10^9 <= min_lim <= 10^9` or None. - An optional integer `max_lim` where `-10^9 <= max_lim <= 10^9` or None. # Output Format A list of integers containing elements from `arr` that are within the provided bounds. # Constraints - The input list will have at least one element. - If `min_lim` is not provided (None), consider `min_lim` as the minimum value in the array. - If `max_lim` is not provided (None), consider `max_lim` as the maximum value in the array. # Performance Requirements - Your solution should have O(n) time complexity. - Your solution should have O(n) space complexity. # Examples 1. `limited_slice([1, 2, 3, 4, 5], None, 3)` should return `[1, 2, 3]` 2. `limited_slice([10, 20, 30, 40, 50], 20, None)` should return `[20, 30, 40, 50]` 3. `limited_slice([5, 15, 25, 35], 10, 30)` should return `[15, 25]` 4. `limited_slice([7, 14, 21, 28], None, None)` should return `[7, 14, 21, 28]` # Function Signature ```python def limited_slice(arr, min_lim=None, max_lim=None): pass ```","solution":"def limited_slice(arr, min_lim=None, max_lim=None): Returns a list of integers from arr that are within the inclusive range defined by min_lim and max_lim. If min_lim or max_lim is not provided, they are considered None. if min_lim is None: min_lim = min(arr) if max_lim is None: max_lim = max(arr) result = [num for num in arr if min_lim <= num <= max_lim] return result"},{"question":"# Question You are given a string `s` and need to reverse the characters in the string using different algorithmic approaches. To assess your understanding of recursion, iteration, and Python\'s syntactic capabilities, implement the following functions: 1. **reverse_recursive(s)**: This function should use a recursive approach to reverse the string. 2. **reverse_iterative(s)**: This function should reverse the string using an iterative approach with a two-pointer technique. 3. **reverse_pythonic(s)**: This function should reverse the string using Python\'s built-in functions and reversed iterator. 4. **reverse_ultra_pythonic(s)**: This function should reverse the string using slicing. Input Format * A single string `s` (0 ≤ |s| ≤ 1000). The string may contain any printable ASCII characters. Output Format * Return the reversed version of the input string. Example Input: ``` s = \\"hello\\" ``` Output: ``` \\"olleh\\" ``` Input: ``` s = \\"A man, a plan, a canal, Panama\\" ``` Output: ``` \\"amanaP ,lanac a ,nalp a ,nam A\\" ``` Ensure all functions handle edge cases properly, such as empty strings or strings with one character. Constraints and Performance Requirements * All functions should handle the maximum length of the input string efficiently. * No additional libraries should be used beyond standard Python.","solution":"def reverse_recursive(s): Reverse a string using a recursive approach. Args: s (str): The string to reverse. Returns: str: The reversed string. if len(s) <= 1: # Base case: empty string or single character. return s return s[-1] + reverse_recursive(s[:-1]) # Recursive case: last character + reverse of the rest. def reverse_iterative(s): Reverse a string using an iterative approach with two-pointer technique. Args: s (str): The string to reverse. Returns: str: The reversed string. s_list = list(s) left, right = 0, len(s) - 1 while left < right: s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 return \'\'.join(s_list) def reverse_pythonic(s): Reverse a string using Python\'s built-in reversed iterator. Args: s (str): The string to reverse. Returns: str: The reversed string. return \'\'.join(reversed(s)) def reverse_ultra_pythonic(s): Reverse a string using Python slicing. Args: s (str): The string to reverse. Returns: str: The reversed string. return s[::-1]"},{"question":"**Scenario**: You are tasked with developing a text formatting feature for a word processor application. The feature should justify text to create aesthetically pleasing paragraphs of a fixed width. **Problem Statement**: Given an array of words and an integer `maxWidth`, write a function `text_justification` that formats the text such that each line has exactly `maxWidth` characters and is fully justified. 1. Pack words in a greedy manner: each line should only contain as many words as fit within `maxWidth`. 2. Use spaces to ensure each line is exactly `maxWidth` characters long. Distribute extra spaces as evenly as possible between words. If spaces do not distribute evenly, the earlier slots receive more spaces. 3. The last line should be left-justified with no extra space distributed between words. **Function Signature**: ```python def text_justification(words, maxWidth): :type words: list of str :type maxWidth: int :rtype: list of str ``` **Input**: * `words`: A list of strings where each string is a word. Each word\'s length is guaranteed to be greater than 0 and not exceed `maxWidth`. * `maxWidth`: An integer indicating the maximum width of a line. **Output**: * A list of strings where each string is a fully-justified line of text with `maxWidth` characters. **Constraints**: * The length of `words` is at least 1 and each word\'s length does not exceed `maxWidth`. **Example**: ```python words = [\\"What\\",\\"must\\",\\"be\\",\\"acknowledgment\\",\\"shall\\",\\"be\\"] maxWidth = 16 Output: [ \\"What must be\\", \\"acknowledgment \\", \\"shall be \\" ] ``` **Notes**: * Ensure to handle special cases as mentioned in the analysis. * Optimize space distribution to minimize the number of intermediate string allocations and ensure performance efficiency.","solution":"def text_justification(words, maxWidth): def justify_line(line, maxWidth, is_last_line): if len(line) == 1 or is_last_line: return \' \'.join(line).ljust(maxWidth) total_length = sum(len(word) for word in line) total_spaces = maxWidth - total_length space_between_words = total_spaces // (len(line) - 1) extra_spaces = total_spaces % (len(line) - 1) justified_line = \'\' for i in range(len(line) - 1): justified_line += line[i] + \' \' * space_between_words if extra_spaces > 0: justified_line += \' \' extra_spaces -= 1 justified_line += line[-1] return justified_line result = [] current_line = [] current_length = 0 for word in words: if current_length + len(word) + len(current_line) > maxWidth: result.append(justify_line(current_line, maxWidth, False)) current_line = [] current_length = 0 current_line.append(word) current_length += len(word) result.append(justify_line(current_line, maxWidth, True)) return result"},{"question":"# Scenario: You\'ve been hired by a startup that processes large amounts of user data. As part of their data processing pipeline, you need to merge multiple logs data (which are sorted by timestamps) into a single sorted log. Each log is represented as a sorted linked list. # Task: Write a function `merge_k_lists` that takes a list of sorted linked lists and merges them into one sorted linked list. # Implementation Considerations: 1. **Function Signature**: ```python def merge_k_lists(lists: List[Optional[Node]]) -> Optional[Node]: ``` 2. **Input**: - `lists`: A list of `k` sorted linked lists (nodes of type `Node`), where `k >= 0`. 3. **Output**: - A single merged sorted linked list. 4. **Constraints**: - If the input list is empty, return `None`. - Use the already defined `Node` class. - Aim for both time and space efficiency. # Example: Given the below linked lists: ```plaintext List 1: 1 -> 4 -> 5 List 2: 1 -> 3 -> 4 List 3: 2 -> 6 ``` Your function should return: ```plaintext Merged List: 1 -> 1 -> 2 -> 3 -> 4 -> 4 -> 5 -> 6 ``` # Additional Notes: - Consider how you might optimize the merging process using a priority queue (min-heap). - Handle edge cases such as lists containing nodes with the same value, and lists of varying lengths. # Performance Requirements: - Aim for an optimized solution that can handle up to 10^4 elements efficiently.","solution":"from typing import List, Optional import heapq class Node: def __init__(self, val:int = 0, next: Optional[\'Node\'] = None): self.val = val self.next = next def merge_k_lists(lists: List[Optional[Node]]) -> Optional[Node]: if not lists: return None # Create a min heap to store the nodes min_heap = [] # Initialize the heap with the first node of each list for i in range(len(lists)): if lists[i]: heapq.heappush(min_heap, (lists[i].val, i, lists[i])) # Dummy node to hold the result dummy = Node() curr = dummy while min_heap: val, idx, node = heapq.heappop(min_heap) curr.next = node curr = curr.next # If there is a next node, push it to the heap if node.next: heapq.heappush(min_heap, (node.next.val, idx, node.next)) return dummy.next"},{"question":"# Run-Length Encoding and Decoding You are required to implement two functions: `encode_rle` and `decode_rle`. These functions should perform Run-Length Encoding (RLE) and Decoding as described below, without referencing the provided implementation directly. Function 1: `encode_rle` # Input * A string `input` containing the data to be encoded. # Output * A string that represents the encoded data using Run-Length Encoding. # Constraints * The input string will only contain alphanumeric characters. * The input string will have a maximum length of 10^5. Function 2: `decode_rle` # Input * A string `input` containing data encoded using Run-Length Encoding. # Output * A string that represents the decoded original data. # Constraints * The input encoded string will only contain valid RLE encoded data conforming to the constraints in Function 1. # Example ```python input_str = \\"aaabbbc\\" encoded_str = encode_rle(input_str) # expected output: \\"3a3b1c\\" decoded_str = decode_rle(encoded_str) # expected output: \\"aaabbbc\\" ``` # Requirements * Design your code to handle edge cases efficiently. * Ensure that the `encode_rle` function runs in O(n) time complexity. * Ensure that the `decode_rle` function runs in O(m) time complexity.","solution":"def encode_rle(input: str) -> str: Encodes the input string using Run-Length Encoding. if not input: return \\"\\" encoded = [] prev_char = input[0] count = 1 for char in input[1:]: if char == prev_char: count += 1 else: encoded.append(f\\"{count}{prev_char}\\") prev_char = char count = 1 encoded.append(f\\"{count}{prev_char}\\") return \'\'.join(encoded) def decode_rle(input: str) -> str: Decodes the encoded string using Run-Length Encoding. decoded = [] count = 0 for char in input: if char.isdigit(): count = count * 10 + int(char) else: decoded.append(char * count) count = 0 return \'\'.join(decoded)"},{"question":"# Overview Stooge Sort is an educational sorting algorithm that uses recursion to sort an array by repeatedly sorting subsets of the array and swapping elements as necessary. Despite its inefficiency, it provides a unique approach to sorting problems. # Task Implement a recursive Stooge Sort function in Python that sorts a given list of integers. # Input * An unsorted list of integers, `arr`. # Output * A sorted list of integers. # Constraints * 1 ≤ len(arr) ≤ 1000 * -10^9 ≤ arr[i] ≤ 10^9 for any valid index i # Performance Requirements Due to the high time complexity of Stooge Sort, ensure your implementation meets the function specification accurately, managing recursion carefully to prevent unnecessary calculations. # Function Signature ```python def stoogesort(arr: list, l:int, h:int) -> None: # Your implementation here pass ``` # Example ```python arr = [5, 4, 3, 2, 1] stoogesort(arr, 0, len(arr) - 1) print(arr) # Output: [1, 2, 3, 4, 5] ``` # Implementation Notes Follow the recursive approach described in the analysis. Begin by comparing and swapping the first and last elements if needed. Then, recursively sort the segments with appropriate indices. Ensure the function modifies the input list in-place and does not return a new list.","solution":"def stoogesort(arr: list, l: int, h: int) -> None: Sorts the array using Stooge Sort algorithm. The function modifies the input list in-place. Args: arr (list): The list of integers to be sorted. l (int): The starting index of the list segment to be sorted. h (int): The ending index of the list segment to be sorted. if l >= h: return # If the first element is greater than the last element, swap them if arr[l] > arr[h]: arr[l], arr[h] = arr[h], arr[l] # If there are more than two elements in the array if h - l + 1 > 2: t = (h - l + 1) // 3 # Recursively process the initial 2/3 elements stoogesort(arr, l, h - t) # Recursively process the final 2/3 elements stoogesort(arr, l + t, h) # Recursively process the initial 2/3 elements again stoogesort(arr, l, h - t)"},{"question":"You are tasked to implement an algorithm that finds the longest palindromic substring from a given input string efficiently. As a programming instructor, you want to ensure the students understand how to apply an optimized algorithm to solve this problem. **Scenario**: You are working on an application that needs to identify the longest mirrored substring (palindrome) in user-submitted text. You decided to use Manacher\'s algorithm due to its efficiency. **Function Signature**: ```python def find_longest_palindromic_substring(s: str) -> str: ``` **Input**: - `s`: A non-empty string containing between 1 and (10^6) alphanumeric characters. **Output**: - Returns the longest palindromic substring. **Constraints**: - The function must operate within (O(n)) time complexity, where (n) is the length of the input string. - Handle both odd-length and even-length palindromes uniformly. Example1: ```python input: \\"babad\\" output: \\"bab\\" or \\"aba\\" (either one is acceptable) ``` Example2: ```python input: \\"cbbd\\" output: \\"bb\\" ``` Example3: ```python input: \\"a\\" output: \\"a\\" ``` **Note**: In cases where there are multiple longest palindromic substrings of the same length, returning any one of them is acceptable.","solution":"def find_longest_palindromic_substring(s: str) -> str: def preprocess(s: str) -> str: if not s: return \\"^\\" ret = \\"^\\" for char in s: ret += f\\"#{char}\\" ret += \\"#\\" return ret T = preprocess(s) n = len(T) P = [0] * n C = R = 0 for i in range(1, n - 1): mirr = 2 * C - i if R > i: P[i] = min(R - i, P[mirr]) while T[i + 1 + P[i]] == T[i - 1 - P[i]]: P[i] += 1 if i + P[i] > R: C, R = i, i + P[i] max_len = 0 center_index = 0 for i in range(1, n - 1): if P[i] > max_len: max_len = P[i] center_index = i start = (center_index - max_len) // 2 return s[start:start + max_len]"},{"question":"# Question: Markov Chain Path Generator You are given a Markov chain represented as a dictionary, where keys are states and values are dictionaries that map possible next states to their transition probabilities. Your task is to implement a function that generates a finite path through the Markov chain, starting from a given initial state and transitioning through the chain for a specified number of steps. Write the function `generate_markov_path` that takes in three arguments: 1. `chain`: a dictionary representing the Markov chain transitions. 2. `initial_state`: a string indicating the starting state. 3. `steps`: an integer specifying the number of state transitions to perform. The function should return a list of states representing the path taken through the Markov chain, including the initial state. Input Format: - `chain`: A dictionary where each key is a state (string), and each value is another dictionary where keys are the next states (strings) and values are the probabilities (floats) of transitioning to those states. - `initial_state`: A string representing the starting state. - `steps`: An integer `n` representing the number of transitions. Output Format: - A list of strings representing the sequence of states from the initial state following `steps` transitions. Constraints: - The probabilities for each state transition given a state will sum up to 1. - The `chain` will always have at least one state. - There will always be a valid path in the Markov chain. Example: ```python chain = { \'A\': {\'A\': 0.6, \'E\': 0.4}, \'E\': {\'A\': 0.7, \'E\': 0.3} } initial_state = \'A\' steps = 5 path = generate_markov_path(chain, initial_state, steps) print(path) # Possible Output: [\'A\', \'E\', \'A\', \'A\', \'E\', \'A\'] ``` Notes: - Use a helper function similar to `__choose_state` to select the next state based on the given probabilities. - Ensure to handle edge cases where given chains or states may have no outgoing transitions.","solution":"import random def generate_markov_path(chain, initial_state, steps): Generates a path through a Markov chain. :param chain: dictionary where keys are states and values are dictionaries of transition probabilities. :param initial_state: string representing the starting state. :param steps: integer specifying the number of transitions. :return: list of states representing the path taken. path = [initial_state] current_state = initial_state for _ in range(steps): current_state = _choose_next_state(chain[current_state]) path.append(current_state) return path def _choose_next_state(transitions): Randomly chooses the next state based on transition probabilities. :param transitions: dictionary where keys are states and values are probabilities. :return: chosen state as a string. states = list(transitions.keys()) probabilities = list(transitions.values()) return random.choices(states, probabilities)[0]"},{"question":"# Anagram Checker for Variable Character Sets **Scenario**: You are developing a feature for a new text manipulation software that must be able to determine if two strings are anagrams of each other. Unlike the simple lowercase alphabetic checker, this feature needs to support a wider range of characters, including uppercase letters, digits, and special characters. **Task**: Write a function `is_anagram(s1, s2)` that checks whether two input strings `s1` and `s2` are anagrams of each other, considering a more extensive set of characters. **Function Signature**: ```python def is_anagram(s1: str, s2: str) -> bool: # Your code here ``` **Input**: * `s1` (string): First input string. * `s2` (string): Second input string. **Output**: * Returns `True` if `s1` and `s2` are anagrams, otherwise returns `False`. **Constraints**: * The input strings can contain any printable characters (letters, digits, special characters). * The comparison should be case-sensitive (e.g., \'a\' and \'A\' are different). * The function should handle up to 100,000 characters efficiently. **Examples**: ```python assert is_anagram(\\"apple\\", \\"pleap\\") == True assert is_anagram(\\"apple\\", \\"apple!\\") == False assert is_anagram(\\"12345\\", \\"54321\\") == True assert is_anagram(\\"Hello, World!\\", \\"World! Hello,\\") == True assert is_anagram(\\"aBc\\", \\"CBA\\") == False ``` **Considerations**: 1. Think about how you will account for the extensive character set efficiently. 2. Ensure your solution can handle large input sizes within acceptable performance limits. 3. Validate edge cases, including mixed character types and strings of differing lengths.","solution":"def is_anagram(s1: str, s2: str) -> bool: Check if two strings are anagrams. This considers all printable characters and is case-sensitive. # If lengths differ, they cannot be anagrams if len(s1) != len(s2): return False # Create dictionaries to count occurrences of each character in both strings count_dict_s1 = {} count_dict_s2 = {} for char in s1: count_dict_s1[char] = count_dict_s1.get(char, 0) + 1 for char in s2: count_dict_s2[char] = count_dict_s2.get(char, 0) + 1 # Compare the two dictionaries return count_dict_s1 == count_dict_s2"},{"question":"**Context**: In sophisticated data pipelines and network traversal tasks, we often encounter scenarios where data structures must be checked for cycles to ensure data integrity and to avoid infinite processing loops. Suppose you have a linked list that may or may not have a cycle. Your task is to detect if there is a cycle and, if it exists, to find the starting node of this cycle. **Task**: Implement a function `detect_cycle_start` that detects the start of a cycle in a given linked list using Floyd\'s cycle-finding algorithm (Tortoise and Hare algorithm). **Function Signature**: ```python def detect_cycle_start(head: Node) -> Node: pass ``` **Input**: * `head`: The head node of the linked list. **Output**: * Returns the Node where the cycle begins. If there is no cycle, return `None`. **Constraints**: * The input linked list can be empty. * No node values in the linked list will be the same. * The list may contain any non-negative number of nodes. **Performance Requirements**: * The solution should run in O(n) time complexity and use O(1) space complexity. **Example**: 1. For the linked list 1 → 2 → 3 → 4 → 5 → 3 (cycle at node with value 3): * Input: head of linked list * Output: Node with value 3 2. For the linked list 1 → 2 → 3 → 4 (no cycle): * Input: head of linked list * Output: None _Please note_: You can use the existing code snippet provided above as a reference for understanding but implement your solution from scratch.","solution":"class Node: def __init__(self, value): self.value = value self.next = None def detect_cycle_start(head): Detects the start of a cycle in a linked list using Floyd\'s cycle-finding algorithm. If there is no cycle, it returns None. if not head or not head.next: return None slow = head fast = head # Detect cycle using two pointers while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break else: return None # No cycle found # Find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"<|Analysis Begin|> # Core Identification * **Algorithm/Data Structure**: Tarjan\'s Algorithm for finding Strongly Connected Components (SCCs) in a directed graph. * **Type**: Graph traversal algorithm. * **Main Purpose**: Identify subgraphs in which every vertex is reachable from every other vertex within the same subgraph. # Complexity * **Time Complexity**: O(V + E) where V is the number of vertices and E is the number of edges. * **Space Complexity**: O(V) for the recursion stack and additional data storage. # Principles 1. **Initialization**: - Set the initial index to 0. - Initialize an empty stack. 2. **Traversal**: - Visit each vertex. If it hasn\'t been visited, start a DFS from it. - Assign an index and low-link value to the vertex. - Push it onto the stack and mark it as on the stack. - Recursively visit and update the low-link value for all adjacent vertices. - If a vertex’s low-link value equals its index, it’s the root of an SCC. Pop off vertices from the stack to form this SCC. # Characteristics & Applications * **Properties**: - Ensures that each SCC is identified only once. - Handles cycles within the graph effectively. * **Common Use Cases**: - Detection of cycles in a graph. - Understanding the structure of large networks like social networks, web graphs. * **Strengths**: - Linear time complexity, making it efficient for large graphs. - Intuitive and direct handling of graph traversal via DFS. * **Limitations**: - May not be suitable for extremely memory-constrained environments due to space complexity. # Implementation Challenges * **Edge Cases**: - Graph with no vertices or edges. - Graph with multiple disconnected components. - Graph with self-loops and parallel edges. * **Performance Bottlenecks**: - Deep recursion can lead to stack overflow in systems with limited stack size. * **Error Scenarios**: - Incorrectly managing the stack can lead to incomplete or incorrect SCC identification. * **Optimization Points**: - Tail-call optimizations to handle deep recursions. <|Analysis End|> <|Question Begin|> # Problem Statement You are tasked with implementing Tarjan\'s algorithm to find all Strongly Connected Components (SCCs) in a directed graph. Given a directed graph represented as an adjacency list, return the list of SCCs. Input Format: * An integer `n` representing the number of vertices, labeled from 0 to n-1. * A list of pairs `edges` representing the directed edges in the graph, where each pair [u, v] indicates a directed edge from vertex u to vertex v. Output Format: * A list of lists, where each sublist represents a SCC containing the vertices in that SCC. Constraints: 1. (0 leq n leq 10^5) 2. (0 leq text{len(edges)} leq 2 times 10^5) Example: ```python Input: n = 5 edges = [[0, 1], [1, 2], [2, 0], [1, 3], [3, 4]] Output: [[4], [3], [0, 2, 1]] ``` In this example, the graph can be visualized as: ``` 0 → 1 → 2 → 0 ↓ 3 → 4 ``` Here, the vertices [4] form an SCC on its own, [3] forms another, and the vertices [0, 1, 2] form a cycle and thus an SCC. # Task: Implement the function `tarjan_scc(n: int, edges: List[List[int]]) -> List[List[int]]` that computes the SCCs of the graph. Note: 1. The output sublists (SCCs) can be in any order. 2. Vertices within each SCC sublist should be in ascending order, and each SCC itself should also be sorted in ascending order. **Function Signature:** ```python from typing import List def tarjan_scc(n: int, edges: List[List[int]]) -> List[List[int]]: # Your code here. ```","solution":"from typing import List def tarjan_scc(n: int, edges: List[List[int]]) -> List[List[int]]: # Helper function to perform a Depth-First Search def dfs(v): nonlocal index indices[v] = index lowlink[v] = index index += 1 stack.append(v) on_stack[v] = True # Consider successors of v for w in adj_list[v]: if indices[w] == -1: # Successor w has not yet been visited; recurse on it dfs(w) lowlink[v] = min(lowlink[v], lowlink[w]) elif on_stack[w]: # Successor w is in stack and hence in the current SCC lowlink[v] = min(lowlink[v], indices[w]) # If v is a root node, pop the stack and generate an SCC if lowlink[v] == indices[v]: scc = [] while True: w = stack.pop() on_stack[w] = False scc.append(w) if w == v: break result.append(sorted(scc)) # Initialize variables index = 0 indices = [-1] * n lowlink = [-1] * n on_stack = [False] * n stack = [] result = [] # Create adjacency list for the graph adj_list = [[] for _ in range(n)] for u, v in edges: adj_list[u].append(v) # Perform DFS from each node for v in range(n): if indices[v] == -1: dfs(v) return result"},{"question":"# Bucket Sort with Enhanced Insertion Sort You are working on improving a classic sorting problem using the Bucket Sort algorithm. The current implementation uses Insertion Sort to individually sort each bucket, which can be inefficient in worst-case scenarios. Task - **Function**: `enhanced_bucket_sort(arr: List[int]) -> List[int]` - **Input**: * A list of integers `arr` where the integer range and distribution are unknown but can be assumed to be non-negative. - **Output**: * A new sorted list containing all elements from `arr` in non-decreasing order. Constraints - The input list `arr` could be empty, and you need to handle it. If `arr` is empty, return an empty list. - Assume the typical constraints in competitive programming: 1 ≤ len(arr) ≤ 10^5. Requirements 1. Implement the enhanced version of the Bucket Sort where each bucket is sorted using a more efficient sorting algorithm than Insertion Sort. 2. Ensure your solution handles edge cases such as: * All elements being the same. * All elements uniquely distinct. * The distribution of elements being clustered or sparse. 3. Optimize the sorting mechanism to handle worst-case scenarios effectively. Example ```python # Example 1 # Input arr = [29, 25, 3, 49, 9, 37, 21, 43] # Output [3, 9, 21, 25, 29, 37, 43, 49] # Example 2 # Input arr = [4, 1, 3, 2, 4, 3, 1] # Output [1, 1, 2, 3, 3, 4, 4] ``` Notes - Ensure the number of buckets is dynamically determined based on the input array. - Use a more efficient sorting algorithm (like Merge Sort or Quick Sort) for sorting the contents of each bucket. - Remember to handle edge conditions and optimize for performance and memory usage. Good luck!","solution":"from typing import List import itertools def enhanced_bucket_sort(arr: List[int]) -> List[int]: if not arr: return [] # Utilize Python\'s built-in sort (Timsort) which is highly efficient def efficient_sort(bucket): return sorted(bucket) # Determine the number of buckets number_of_buckets = len(arr) max_value = max(arr) # Create buckets buckets = [[] for _ in range(number_of_buckets)] # Distribute input array values into buckets for num in arr: index = num * number_of_buckets // (max_value + 1) buckets[index].append(num) # Sort each bucket and concatenate the result sorted_array = list(itertools.chain.from_iterable(efficient_sort(bucket) for bucket in buckets)) return sorted_array"},{"question":"You are tasked with improving the efficiency of the Shell Sort algorithm provided. The main objective is to modify the current implementation to use a more efficient gap sequence, specifically Hibbard’s sequence. Additionally, ensure that the algorithm is robust and optimized for larger arrays while maintaining correct functionality for special cases such as empty arrays or arrays with repeated elements. # Requirements * **Function Signature**: Implement the function `optimized_shell_sort(arr: list) -> list` * **Input**: - `arr` (list): An array of integers with length up to 1000. * **Output**: - (list): The sorted array in ascending order. * **Constraints**: - The algorithm should maintain an average-case time complexity better than the provided O(n^2). * **Performance Requirements**: - Handle an array of up to 1000 integers efficiently. # Rules * You must use Hibbard’s sequence for gap values in Shell Sort. * Ensure your implementation handles edge cases, such as empty arrays and arrays with repeated elements, as expected. # Example ```python assert optimized_shell_sort([23, 12, 1, 8, 34, 54, 2, 3]) == [1, 2, 3, 8, 12, 23, 34, 54] assert optimized_shell_sort([]) == [] assert optimized_shell_sort([3, 3, 3, 3]) == [3, 3, 3, 3] assert optimized_shell_sort([9, 8, 6, 1, 5, 2, 10]) == [1, 2, 5, 6, 8, 9, 10] ``` # Hints - Hibbard’s sequence gaps can be calculated as: gap = 2^k - 1, where k is an integer. - Start with the largest possible gap and reduce to 1. - Pay attention to handling potential off-by-one errors when using this sequence. # Note Your solution will be evaluated on correctness, efficiency, and the ability to handle specified edge cases effectively.","solution":"def optimized_shell_sort(arr: list) -> list: Sorts an array using the Shell Sort algorithm with Hibbard’s sequence for gaps. n = len(arr) k = 1 gaps = [] # Generate Hibbard’s sequence (2^k - 1) while (gap := 2**k - 1) < n: gaps.append(gap) k += 1 gaps.reverse() # Shell Sort using the generated Hibbard\'s sequence gaps for gap in gaps: for i in range(gap, n): temp = arr[i] j = i while j >= gap and arr[j - gap] > temp: arr[j] = arr[j - gap] j -= gap arr[j] = temp return arr"},{"question":"# Scenario You are part of a team developing a web browser. One of the features you are tasked with implementing is the \\"back button\\" functionality, which allows the user to return to the previously visited webpage. To achieve this, you decide to use a stack data structure to keep track of the browsing history. # Task Implement a class `BrowserHistory` using an array-based stack on top of the provided `ArrayStack` class. The `BrowserHistory` class should support the following operations: 1. `visit(url)`: Push a new URL onto the stack. 2. `back()`: Pop the URL from the stack and return it. 3. `current()`: Return the current URL (the one at the top of the stack) without removing it. 4. `is_empty()`: Return a boolean indicating whether the browsing history is empty. # Constraints 1. You must use the provided `ArrayStack` class for the stack implementation. 2. Handle edge cases where popping or peeking from an empty stack should raise an `IndexError` with the message \\"No previous history\\". # Expected Input and Output ```python # Example Usage history = BrowserHistory() history.visit(\'http://example.com\') history.visit(\'http://google.com\') print(history.current()) # Output: http://google.com print(history.back()) # Output: http://google.com print(history.current()) # Output: http://example.com print(history.is_empty()) # Output: False print(history.back()) # Output: http://example.com print(history.is_empty()) # Output: True history.back() # Raises IndexError: No previous history ``` # Implementation ```python class BrowserHistory: def __init__(self): self.stack = ArrayStack() def visit(self, url): self.stack.push(url) def back(self): if self.stack.is_empty(): raise IndexError(\\"No previous history\\") return self.stack.pop() def current(self): if self.stack.is_empty(): raise IndexError(\\"No previous history\\") return self.stack.peek() def is_empty(self): return self.stack.is_empty() ``` Write your implementation for the `BrowserHistory` class based on the provided structure and evaluate its functionality by creating instances and invoking methods according to the example usage.","solution":"class ArrayStack: A simple array-based stack implementation. def __init__(self): self._data = [] def push(self, item): self._data.append(item) def pop(self): if self.is_empty(): raise IndexError(\\"pop from an empty stack\\") return self._data.pop() def peek(self): if self.is_empty(): raise IndexError(\\"peek from an empty stack\\") return self._data[-1] def is_empty(self): return len(self._data) == 0 class BrowserHistory: def __init__(self): self.stack = ArrayStack() def visit(self, url): self.stack.push(url) def back(self): if self.stack.is_empty(): raise IndexError(\\"No previous history\\") return self.stack.pop() def current(self): if self.stack.is_empty(): raise IndexError(\\"No previous history\\") return self.stack.peek() def is_empty(self): return self.stack.is_empty()"},{"question":"# Convert Integer to Roman Numeral You are tasked with writing a function `convert_to_roman` that converts a given integer within a specific range into its corresponding Roman numeral string. Roman numerals are represented by the following symbols: - I, V, X, L, C, D, M The numeral system follows these rules: - The numeral I can be placed before V and X to make 4 (IV) and 9 (IX). - X can be placed before L and C to make 40 (XL) and 90 (XC). - C can be placed before D and M to make 400 (CD) and 900 (CM). Given the constraints, you need to ensure that the input integer falls between 1 and 3999 (inclusive). Function Signature ```python def convert_to_roman(num: int) -> str: ``` Input * `num` (int): An integer between 1 and 3999 (inclusive). Output * Returns a string representing the Roman numeral equivalent of `num`. Constraints * 1 <= num <= 3999 Example ```python assert convert_to_roman(1) == \\"I\\" assert convert_to_roman(1994) == \\"MCMXCIV\\" assert convert_to_roman(3999) == \\"MMMCMXCIX\\" ``` Performance Requirements * The function should have a time complexity of O(1) and a space complexity of O(1) due to fixed-size array manipulations. Implement the `convert_to_roman` function that adheres to these specifications.","solution":"def convert_to_roman(num: int) -> str: Converts an integer to its Roman numeral representation. Parameters: num (int): an integer between 1 and 3999 (inclusive) Returns: str: Roman numeral representation of the integer if num < 1 or num > 3999: raise ValueError(\\"Number out of range. Must be between 1 and 3999.\\") # Define mappings of integers to Roman numeral strings val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] symbols = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = \\"\\" for i in range(len(val)): while num >= val[i]: num -= val[i] roman_numeral += symbols[i] return roman_numeral"},{"question":"# Sort Even Indexed Elements in Descending Order Using Merge Sort **Problem Statement**: Your task is to implement a function that sorts the elements at even indices in an array in descending order, while leaving the elements at odd indices unchanged. Use the Merge Sort algorithm for sorting. **Function Signature**: ```python def sort_even_indices_desc(arr: List[int]) -> List[int]: # Implement your function here ``` **Input**: - A list of integers `arr` with length n (0 ≤ n ≤ 10^5). **Output**: - A list of integers where the elements at even indices are sorted in descending order. **Constraints**: - An empty list or lists with a single element should remain unchanged. - The solution should have a time complexity of O(n log(n)). **Example**: Input: ```python [10, 3, 2, 7, 6, 5, 4, 1] ``` Output: ```python [10, 3, 6, 7, 4, 5, 2, 1] ``` **Explanation**: The elements at even indices (0, 2, 4, 6) are [10, 2, 6, 4]. Sorting these in descending order gives [10, 6, 4, 2]. The resulting array is [10, 3, 6, 7, 4, 5, 2, 1]. **Additional Notes**: 1. The implementation should primarily focus on the correct and efficient use of the Merge Sort algorithm for sorting. 2. Consider how to handle the arrangement of even-indexed elements while ensuring the rest of the elements (at odd indices) remain unaffected.","solution":"from typing import List def merge_sort_desc(arr: List[int]) -> List[int]: if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort_desc(arr[:mid]) right = merge_sort_desc(arr[mid:]) return merge_desc(left, right) def merge_desc(left: List[int], right: List[int]) -> List[int]: result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] > right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 while i < len(left): result.append(left[i]) i += 1 while j < len(right): result.append(right[j]) j += 1 return result def sort_even_indices_desc(arr: List[int]) -> List[int]: # Extract elements at even indices even_indices_elements = [arr[i] for i in range(0, len(arr), 2)] # Sort these elements in descending order sorted_even_indices_elements = merge_sort_desc(even_indices_elements) # Replace elements at even indices with the sorted ones result = arr[:] for i in range(0, len(arr), 2): result[i] = sorted_even_indices_elements.pop(0) return result"},{"question":"# Question: Design and Implement a Dynamically Resizable Hash Table You are required to design and implement a Hash Table that dynamically resizes to maintain efficient key-value pair storage and retrieval. The Hash Table should support the following operations efficiently: - **Put(key, value)**: Insert or update a key-value pair. - **Get(key)**: Retrieve the value associated with the given key. - **Delete(key)**: Remove the key-value pair associated with the given key. - **Length()**: Return the number of key-value pairs stored. - **Contains(key)**: Check if a key is present. The table should use linear probing for collision resolution and double in size when the number of elements exceeds two-thirds of its current size. # Function Signatures: - `def put(self, key: int, value: int) -> None` - `def get(self, key: int) -> int` - `def delete(self, key: int) -> None` - `def length(self) -> int` - `def contains(self, key: int) -> bool` # Input and Output Formats: - `put(key, value)`: No output. Insert or update the key-value pair. - `get(key)`: Return the value associated with the key or None if the key is not present. - `delete(key)`: No output. Remove the key-value pair. - `length()`: Return an integer representing the number of key-value pairs. - `contains(key)`: Return True if the key is present, False otherwise. # Constraints: - Keys and values are integers. - Assume initially the hash table size is 8. - The hash function can be assumed as `key % size`. - Implement linear probing for collision resolution. - Resize the table by doubling its size when it exceeds two-thirds full. # Example Scenario: A Hash Table is initialized. The following operations are performed in sequence: 1. `put(10, 100)` 2. `put(22, 200)` 3. `put(30, 300)` 4. `get(10)` returns 100. 5. `contains(22)` returns True. 6. `delete(22)` 7. `contains(22)` returns False. 8. `length()` returns 2. **Note**: You must account for the resizing behavior during the implementation.","solution":"class HashTable: def __init__(self): self.size = 8 self.count = 0 self.table = [None] * self.size def _hash(self, key): return key % self.size def _resize(self): old_table = self.table self.size *= 2 self.table = [None] * self.size self.count = 0 for item in old_table: if item is not None: key, value = item self.put(key, value) def put(self, key, value): if self.count >= (2 * self.size) // 3: self._resize() idx = self._hash(key) while self.table[idx] is not None: stored_key, _ = self.table[idx] if stored_key == key: break idx = (idx + 1) % self.size if self.table[idx] is None: self.count += 1 self.table[idx] = (key, value) def get(self, key): idx = self._hash(key) while self.table[idx] is not None: stored_key, value = self.table[idx] if stored_key == key: return value idx = (idx + 1) % self.size return None def delete(self, key): idx = self._hash(key) while self.table[idx] is not None: stored_key, _ = self.table[idx] if stored_key == key: self.table[idx] = None self.count -= 1 self._rehash_from_idx((idx + 1) % self.size) return idx = (idx + 1) % self.size def _rehash_from_idx(self, start_idx): idx = start_idx while self.table[idx] is not None: key, value = self.table[idx] self.table[idx] = None self.count -= 1 self.put(key, value) idx = (idx + 1) % self.size def contains(self, key): return self.get(key) is not None def length(self): return self.count"},{"question":"Context In this problem, you are required to assess whether words can be typed using letters from only one single row of a standard QWERTY keyboard layout. This problem checks your understanding of set operations and efficient string manipulation. Problem Statement You are given a list of words. Write a function `find_keyboard_row` that returns a list of words that can be typed using only one row of a US QWERTY keyboard. The rows of the keyboard are as follows: ``` 1st row: \\"qwertyuiop\\" 2nd row: \\"asdfghjkl\\" 3rd row: \\"zxcvbnm\\" ``` Function Signature ```python def find_keyboard_row(words: List[str]) -> List[str]: # implementation here ``` Input - `words` (List[str]): A list of words consisting of characters [a-z, A-Z]. Output - Returns a list of words that can be typed using letters of alphabet on only one row of the keyboard. Constraints - Words are case insensitive: treat \'a\' and \'A\' as the same character. - Function should be optimal to handle up to 10^4 words, each with a length of up to 100 characters. Examples ```python assert find_keyboard_row([\\"Hello\\", \\"Alaska\\", \\"Dad\\", \\"Peace\\"]) == [\\"Alaska\\", \\"Dad\\"] assert find_keyboard_row([\\"omg\\", \\"test\\", \\"jewel\\"]) == [] ``` Performance Requirements Your function should strive to be efficient in terms of time and space complexity to handle larger inputs efficiently.","solution":"from typing import List def find_keyboard_row(words: List[str]) -> List[str]: row1 = set(\\"qwertyuiop\\") row2 = set(\\"asdfghjkl\\") row3 = set(\\"zxcvbnm\\") def is_one_row(word): word_set = set(word.lower()) return word_set <= row1 or word_set <= row2 or word_set <= row3 return [word for word in words if is_one_row(word)]"},{"question":"# String Decoding Challenge Context In this task, you are required to implement a function that decodes an encoded string. The encoding follows a specific rule: `k[encoded_string]`, where the `encoded_string` is repeated exactly `k` times. Assume the string is well-formed and there are no invalid characters or formats. Function Signature ```python def decode_string(s: str) -> str: Decodes the input string \'s\' according to the encoding rule k[encoded_string]. :param s: Encoded string to be decoded. :type s: str :return: The decoded string. :rtype: str ``` Example 1. **Input**: `s = \\"3[a]2[bc]\\"` **Output**: `\\"aaabcbc\\"` 2. **Input**: `s = \\"3[a2[c]]\\"` **Output**: `\\"accaccacc\\"` 3. **Input**: `s = \\"2[abc]3[cd]ef\\"` **Output**: `\\"abcabccdcdcdef\\"` Constraints * Assume the input string `s` is always valid as per the provided rules. * `1 <= len(s) <= 30`. Performance Requirements The function should operate with O(n) time complexity and O(m) space complexity, where `n` is the length of the string `s` and `m` is the depth of the nesting in `s`. Implementation Notes * Use a stack-driven approach to handle nested encoded strings. * Make sure your function handles multiple levels of nesting correctly. * Your function should return the decoded string after processing.","solution":"def decode_string(s: str) -> str: stack = [] current_num = 0 current_str = \'\' for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append((current_str, current_num)) current_str = \'\' current_num = 0 elif char == \']\': last_str, num = stack.pop() current_str = last_str + num * current_str else: current_str += char return current_str"},{"question":"# Spiral Matrix Traversal **Problem Statement**: Write a function `spiral_traversal(matrix)` to return all elements of the `m x n` matrix in spiral order. **Function Signature**: ```python def spiral_traversal(matrix: List[List[int]]) -> List[int]: ``` **Input**: * `matrix`: A list of lists containing integers representing a 2D matrix of dimensions m x n (0 <= m, n <= 10^3). **Output**: * A list of integers containing all the elements of the matrix in spiral order. **Constraints**: * The function should handle all edge cases, including empty matrices and matrices with only one row or one column. * The performance should be efficient even for larger matrices up to 10^6 elements. **Example**: ```python matrix = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] Output: [1, 2, 3, 6, 9, 8, 7, 4, 5] ``` **Scenario**: You are given a matrix configuration from a robotic processing unit which needs to process elements in a spiral manner for efficient coverage and data collection. Your function will direct the robot on the order it should cover the elements in the matrix. **Implementation Details**: Ensure your implementation iterates through and collects elements correctly respecting boundaries, handling special cases like empty matrices, single rows, and single columns.","solution":"from typing import List def spiral_traversal(matrix: List[List[int]]) -> List[int]: Returns elements of matrix in spiral order. if not matrix or not matrix[0]: return [] result = [] top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right on the top boundary for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse from top to bottom on the right boundary for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left on the bottom boundary for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top on the left boundary for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"# Shortest Path Race As a network engineer, you need to determine the fastest way data can travel between servers in a heavily connected data center. Each server is represented as a vertex in a directed graph, and each connection between servers has a specific non-negative transmission delay. Your task is to implement a function that uses Dijkstra\'s algorithm to find the shortest path from a given source server to all other servers. The graph is represented by an adjacency matrix where `graph[i][j]` indicates the delay from server `i` to server `j`. A `0` value indicates no direct connection. # Function Signature ```python def shortest_path(graph: List[List[int]], src: int) -> List[float]: pass ``` # Input * `graph`: A 2D list of integers where `graph[i][j]` is the non-negative transmission delay from server `i` to server `j`. * `src`: An integer representing the source server index. # Output * A list of floats where the `i-th` element represents the shortest path delay from the source server to server `i`. If a server is unreachable, the delay should be `float(\'inf\')`. # Constraints * 1 <= len(graph) <= 100 (i.e., there can be up to 100 servers) * 0 <= graph[i][j] <= 1000 * `src` will always be a valid index in the range of the graph. # Example ```python graph = [ [0, 4, 0, 0, 0, 0, 0, 8, 0], [4, 0, 8, 0, 0, 0, 0, 11, 0], [0, 8, 0, 7, 0, 4, 0, 0, 2], [0, 0, 7, 0, 9, 14, 0, 0, 0], [0, 0, 0, 9, 0, 10, 0, 0, 0], [0, 0, 4, 14, 10, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 0, 1, 6], [8, 11, 0, 0, 0, 0, 1, 0, 7], [0, 0, 2, 0, 0, 0, 6, 7, 0] ] src = 0 print(shortest_path(graph, src)) # Output should be: # [0, 4, 12, 19, 21, 11, 9, 8, 14] ``` Write a robust and efficient solution to solve this problem.","solution":"from heapq import heappush, heappop from typing import List def shortest_path(graph: List[List[int]], src: int) -> List[float]: Implements Dijkstra\'s algorithm to find the shortest path from a source to all other nodes. Parameters: graph (List[List[int]]): Adjacency matrix representing the graph. src (int): The source vertex. Returns: List[float]: List of shortest path distances from the source to each vertex. n = len(graph) dist = [float(\'inf\')] * n dist[src] = 0 priority_queue = [(0, src)] while priority_queue: current_distance, u = heappop(priority_queue) if current_distance > dist[u]: continue for v in range(n): if graph[u][v] > 0: distance = current_distance + graph[u][v] if distance < dist[v]: dist[v] = distance heappush(priority_queue, (distance, v)) return dist"},{"question":"Objective: Given a matrix that is sorted in non-decreasing order both row-wise and column-wise, write a function to locate a target key within the matrix. Task: Implement the function `search_in_sorted_matrix(mat, target)`. Function Signature: ```python def search_in_sorted_matrix(mat: List[List[int]], target: int) -> Tuple[int, int]: ``` Input: - `mat` : A list of lists, where each inner list contains integers sorted in ascending order. - `target`: An integer, the value to be searched for within the matrix. Output: - Returns a tuple (i, j) of zero-based indices where `target` is found. If the target is not found, return (-1, -1). Constraints: - The matrix dimensions are m x n where 0 <= m, n <= 10^3. - The integers in the matrix and target can be in the range of -10^9 to 10^9. - Handle edge cases such as empty matrix or target not present in the matrix properly. Example: ```python mat = [ [2, 5, 7], [4, 8, 13], [9, 11, 15], [12, 17, 20] ] target = 13 # Function call should return: (1, 2) mat = [[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]] target = 5 # Function call should return: (1, 1) mat = [[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]] target = 20 # Function call should return: (-1, -1) as target is not in matrix ``` Notes: Make sure that your implementation handles large matrices efficiently within the given constraints.","solution":"from typing import List, Tuple def search_in_sorted_matrix(mat: List[List[int]], target: int) -> Tuple[int, int]: if not mat or not mat[0]: return -1, -1 # Handle empty matrix case m, n = len(mat), len(mat[0]) i, j = 0, n - 1 # Start from the top-right corner while i < m and j >= 0: if mat[i][j] == target: return i, j # Target found elif mat[i][j] > target: j -= 1 # Move left else: i += 1 # Move down return -1, -1 # Target not found"},{"question":"# Problem: Flatten Nested Arrays You are given an array that may contain nested arrays. Your task is to implement the following two functions: 1. `flatten(input_arr)`: This function takes a nested list as input and returns a new list that contains all the elements of the nested lists, but with no nesting. 2. `flatten_iter(iterable)`: This function takes a nested iterable as input and returns a generator that yields the elements of the nested iterable, but with no nesting. # Function Descriptions Function: `flatten(input_arr)` - **Input**: A nested list `input_arr` which can contain multiple levels of lists. - **Output**: A single, flattened list with no nesting. - **Constraints**: - You can assume all elements of the array are either integers, strings, or lists. - The input can be deeply nested. Function: `flatten_iter(iterable)` - **Input**: A nested iterable `iterable` which can contain multiple levels of iterables. - **Output**: A generator yielding elements in a single, flattened sequence. - **Constraints**: - You can assume all elements of the iterable are either integers, strings, or other iterables. - The input can be deeply nested. # Examples Example 1: ```python input_arr = [1, [2, [3, 4], 5], 6, [7, 8]] assert flatten(input_arr) == [1, 2, 3, 4, 5, 6, 7, 8] assert list(flatten_iter(input_arr)) == [1, 2, 3, 4, 5, 6, 7, 8] ``` Example 2: ```python input_arr = [1, [2, [3, 4, []], [5, 6]], 7, [[]]] assert flatten(input_arr) == [1, 2, 3, 4, 5, 6, 7] assert list(flatten_iter(input_arr)) == [1, 2, 3, 4, 5, 6, 7] ``` # Performance Requirements - The recursive approach of `flatten` should handle nested depths reasonably. - The generator approach in `flatten_iter` should optimize memory usage and handle large inputs without excessive memory consumption.","solution":"def flatten(input_arr): Recursively flatten the input list. flat_list = [] for item in input_arr: if isinstance(item, list): flat_list.extend(flatten(item)) else: flat_list.append(item) return flat_list def flatten_iter(iterable): Generator that recursively flattens the input iterable. for item in iterable: if isinstance(item, (list, tuple)): for sub_item in flatten_iter(item): yield sub_item else: yield item"},{"question":"Write a function `filter_numbers_in_range(arr, min_lim=None, max_lim=None)` that filters the elements of a given list `arr` such that the returned list includes only those elements greater than or equal to `min_lim` and less than or equal to `max_lim`. Input and Output Formats: - **Input**: - `arr`: A list of integers. - `min_lim` (optional): An integer specifying the minimum limit (inclusive) or `None`. If `None`, it should be considered as the minimum value in the array. - `max_lim` (optional): An integer specifying the maximum limit (inclusive) or `None`. If `None`, it should be considered as the maximum value in the array. - **Output**: - A list of integers filtered from `arr` that lie within the [min_lim, max_lim] range. Constraints: - The input array `arr` can have up to 10^6 elements. - The elements of `arr` are integers within the range of [-10^9, 10^9]. - If both min_lim and max_lim are `None`, the entire array should be returned. - If `min_lim > max_lim`, return an empty list. Performance Requirements: - The function should run in O(n) time complexity. - The function should use O(n) additional space for the filtered list. # Examples: 1. **Example 1**: - Input: ```python filter_numbers_in_range([1, 2, 3, 4, 5], None, 3) ``` - Output: ```python [1, 2, 3] ``` 2. **Example 2**: - Input: ```python filter_numbers_in_range([10, 20, 30, 40, 50], 20, 40) ``` - Output: ```python [20, 30, 40] ``` 3. **Example 3**: - Input: ```python filter_numbers_in_range([5, -2, 15, 0, 8], -5, 5) ``` - Output: ```python [5, -2, 0] ``` 4. **Example 4**: - Input: ```python filter_numbers_in_range([], None, None) ``` - Output: ```python [] ```","solution":"def filter_numbers_in_range(arr, min_lim=None, max_lim=None): Filters the list of integers based on given minimum and maximum limits. Args: arr (list): A list of integers. min_lim (int or None): The minimum limit (inclusive) or None. Defaults to None. max_lim (int or None): The maximum limit (inclusive) or None. Defaults to None. Returns: list: A list of integers that fall within the specified range. if min_lim is None: min_lim = min(arr, default=None) if max_lim is None: max_lim = max(arr, default=None) if min_lim is None or max_lim is None: return arr if min_lim > max_lim: return [] return [x for x in arr if min_lim <= x <= max_lim]"},{"question":"# Binary Tree Inversion **Context:** In various applications such as image processing, it may be necessary to reflect data structures. A common task is to invert a binary tree, which effectively mirrors the structure by swapping left and right children. You are asked to implement a binary tree inversion function to assess your understanding of tree traversal and recursion fundamentals. **Task:** Write a function `invert_tree(root)` that takes the root of a binary tree and inverts it. **Input:** - `root` - The root node of a binary tree, where each node has the following attributes: - `val` (int): The value of the node. - `left` (TreeNode): The left child of the node. - `right` (TreeNode): The right child of the node. **Output:** - The root node of the inverted binary tree. **Constraints:** - The number of nodes in the tree is in the range [0, 1000]. - The value of each node is an integer in the range [-1000, 1000]. **Example:** ```plaintext Input: 4 / 2 7 / / 1 3 6 9 Output: 4 / 7 2 / / 9 6 3 1 ``` **Performance Requirements:** - Ensure the function operates with a time complexity of O(n), where n is the number of nodes. - Handle large depths gracefully within typical recursion limits or convert to an iterative solution if preferred. **Additional Notes:** - Provide a brief explanation of how your implementation works. - Consider edge cases like an empty tree or a tree with only one node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def invert_tree(root): Inverts a binary tree by swapping the left and right children of all nodes. Args: root (TreeNode): Root node of the binary tree to be inverted. Returns: TreeNode: Root node of the inverted binary tree. if root is None: return None # Swap the left and right children root.left, root.right = root.right, root.left # Recursively invert the left and right subtrees invert_tree(root.left) invert_tree(root.right) return root"},{"question":"# Context: You are working on a natural language processing (NLP) tool that maps patterns to strings. One of the fundamental tasks required is to verify that a given sentence follows a specified pattern. You are to implement a function that determines if a string of words follows a particular pattern. This function is crucial in ensuring the consistency of your parsing mechanism. # Task: Implement a function `word_pattern(pattern: str, str: str) -> bool` that checks if the given string of words follows the specified pattern. # Input & Output Formats: **Input:** - `pattern` (str): A string composed of lowercase letters. - `str` (str): A string composed of lowercase words separated by single spaces. **Output:** - `bool`: Return `True` if the string follows the given pattern, `False` otherwise. # Constraints: 1. Pattern string contains only lowercase letters (`a-z`). 2. Input string contains only lowercase words separated by a single space. 3. There are no leading or trailing spaces in the input string. # Examples: ```plaintext word_pattern(\\"abba\\", \\"dog cat cat dog\\") -> True word_pattern(\\"abba\\", \\"dog cat cat fish\\") -> False word_pattern(\\"aaaa\\", \\"dog cat cat dog\\") -> False word_pattern(\\"abba\\", \\"dog dog dog dog\\") -> False ``` # Guidelines: - You must handle cases where the lengths of the pattern and the number of words differ. - Ensure that your mapping respects the one-to-one correspondence between the pattern characters and the words. # Performance Consideration: Optimize for both time and space complexity, as this function may be called frequently in a high-traffic web service.","solution":"def word_pattern(pattern: str, s: str) -> bool: Determines if the given string of words follows the specified pattern. Parameters: - pattern (str): A string composed of lowercase letters. - s (str): A string composed of lowercase words separated by single spaces. Returns: - bool: True if the string follows the given pattern, False otherwise. words = s.split() if len(pattern) != len(words): return False char_to_word = {} word_to_char = {} for char, word in zip(pattern, words): if char in char_to_word: if char_to_word[char] != word: return False else: if word in word_to_char: return False char_to_word[char] = word word_to_char[word] = char return True"},{"question":"You are required to implement a function that resolves file paths to their absolute forms, expanding any home directory shortcuts and ensuring the path is complete and correct. This function will be helpful in ensuring that files are always referred to by their full paths in different scripts and applications. # Function Signature ```python def resolve_file_path(file_path: str) -> str: pass ``` # Input - `file_path` (string): The file path that may be relative or contain home directory shorthand (e.g., `~/file.txt`) # Output - A string representing the absolute path of the provided file path, expanded fully. # Constraints - The input path can contain any printable characters. - The input path will be at most 1024 characters long. # Requirements - The function should handle empty strings and invalid paths gracefully. - The function should produce the absolute path without changing the actual file content or structure on the filesystem. # Example ```python print(resolve_file_path(\\"~/myfile.txt\\")) # Output: \'/Users/username/myfile.txt\' # Assuming the user\'s home directory print(resolve_file_path(\\"docs/report.txt\\")) # Output: \'/current/working/directory/docs/report.txt\' # Assuming the current directory context ``` # Notes - You may assume the execution environment supports typical POSIX-style file paths. - No external libraries should be used other than the os module for path manipulation.","solution":"import os def resolve_file_path(file_path: str) -> str: Resolves a given file path to its absolute form, expanding any home directory shortcuts. Parameters: file_path (string): The file path that may be relative or contain home directory shorthand. Returns: str: The absolute path of the provided file path. if not file_path: return \\"\\" # Expand the user home directory symbol \'~\' if present expanded_path = os.path.expanduser(file_path) # Get the absolute path absolute_path = os.path.abspath(expanded_path) return absolute_path"},{"question":"# Scenario You are working on a machine learning project where you deal with huge datasets. Most of your data vectors consist mostly of zeros. You need an efficient way to store these vectors and calculate their dot products. Implement a method to convert a dense vector into a sparse vector representation and a method to compute the dot product of two sparse vectors. # Function Signature ```python def vector_to_index_value_list(vector: List[float]) -> List[Tuple[int, float]]: pass def dot_product(iv_list1: List[Tuple[int, float]], iv_list2: List[Tuple[int, float]]) -> float: pass ``` # Input - `vector_to_index_value_list(vector: List[float])`: - `vector`: a list of n floats representing a dense vector of size n. - `dot_product(iv_list1: List[Tuple[int, float]], iv_list2: List[Tuple[int, float]])`: - `iv_list1`: a list of tuples, where each tuple contains an integer (index) and a float (value), representing the non-zero elements of the first sparse vector. - `iv_list2`: a list of tuples, where each tuple contains an integer (index) and a float (value), representing the non-zero elements of the second sparse vector. # Output - `vector_to_index_value_list()`: Returns a list of tuples, representing the sparse vector format. - `dot_product()`: Returns a float representing the dot product of the two vectors. # Constraints - Use efficient algorithms to minimize time and space complexity. - Assume vector lengths of up to 10^6 elements. - Assume at most 10^3 non-zero elements in each vector for dot product. # Examples ```python vector = [0.0, 2.0, 0.0, 3.0] iv_list = vector_to_index_value_list(vector) # Expected output: [(1, 2.0), (3, 3.0)] iv_list1 = [(0, 1.0), (1, 2.0), (2, 3.0)] iv_list2 = [(1, 2.0), (2, 2.0)] result = dot_product(iv_list1, iv_list2) # Expected output: 10.0 ``` # Notes - Be mindful of performance when converting dense vectors to sparse representations. - Handle edge cases like empty vectors or no common indices gracefully.","solution":"from typing import List, Tuple def vector_to_index_value_list(vector: List[float]) -> List[Tuple[int, float]]: Convert a dense vector to a sparse vector representation. Each element in the output list is a tuple (index, value), where index is the position of the non-zero value in the input vector. return [(index, value) for index, value in enumerate(vector) if value != 0.0] def dot_product(iv_list1: List[Tuple[int, float]], iv_list2: List[Tuple[int, float]]) -> float: Compute the dot product of two sparse vectors represented as lists of index-value pairs. dict1 = dict(iv_list1) dict2 = dict(iv_list2) # Extract the overlapping indices from both sparse vectors common_indices = set(dict1.keys()).intersection(dict2.keys()) # Compute the dot product only for the common indices return sum(dict1[index] * dict2[index] for index in common_indices)"},{"question":"You are given an unsorted list of integers, and you need to sort this list using a better alternative to the given `exchange_sort` algorithm. Implement the **Merge Sort** algorithm to perform the sorting more efficiently. # Specifications **Input**: - `arr`: A list of integers which can be empty or contain up to 10,000 integers. **Output**: - A new list where all integers from `arr` are sorted in ascending order. # Constraints: - You may not use any built-in sorting functions. - The `arr` list should remain unmodified after the function executes. - Consider both time and space complexity in your implementation. # Performance Requirements: - The implemented algorithm should be more efficient than O(n²). # Function Signature ```python def merge_sort(arr): pass ``` # Example ```python assert merge_sort([4, 3, 1, 2]) == [1, 2, 3, 4] assert merge_sort([10, 1, 3, 5, 8]) == [1, 3, 5, 8, 10] assert merge_sort([]) == [] assert merge_sort([7, 7, 7, 7]) == [7, 7, 7, 7] ``` # Context In a software development scenario, you may need to handle large datasets where O(n²) sorting algorithms like `exchange_sort` are impractical. It\'s essential to understand and implement more efficient algorithms such as Merge Sort, which has a time complexity of O(n log n) and is well-suited for larger datasets and performance-critical applications.","solution":"def merge_sort(arr): Sorts the input list using the merge sort algorithm. :param arr: List of integers. :return: New sorted list of integers. if len(arr) <= 1: return arr def merge(left, right): sorted_arr = [] while left and right: if left[0] <= right[0]: sorted_arr.append(left.pop(0)) else: sorted_arr.append(right.pop(0)) sorted_arr.extend(left if left else right) return sorted_arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right)"},{"question":"# Scenario A retail company wants to implement a promotion system where customers can enter promotional codes to receive discounts. Each promotional code can be used only a certain number of times, so the system needs to manage these codes, keeping count of how many times each code has been used and removing them when they are exhausted. # Question Implement a class `PromoCodeManager` using a resizable hash table that supports the following operations: 1. **add_promo_code(code, max_use_count)**: Adds a new promo code with the maximum number of times it can be used. If the code already exists, it updates the max use count. 2. **use_promo_code(code)**: Tries to use the given promo code. If the code is valid and has remaining uses, it decrements the count and returns `True`. If the code is invalid or exhausted, it returns `False`. 3. **remove_promo_code(code)**: Removes the given promo code from the system. If the code does not exist, it does nothing. **Input and Output:** - Assume `code` is an integer and `max_use_count` is a positive integer. - The `add_promo_code` method should not return anything. - The `use_promo_code` method returns a boolean. - The `remove_promo_code` method should not return anything. **Constraints:** - The codes are unique positive integers. - Ensure that the operations handle edge cases such as using non-existent codes or handling maximum load factor correctly. # Performance Requirements Your implementation must ensure average-case time complexity of O(1) for add, use, and remove operations. # Example ```python pcm = PromoCodeManager() pcm.add_promo_code(12345, 5) print(pcm.use_promo_code(12345)) # True print(pcm.use_promo_code(12345)) # True print(pcm.use_promo_code(54321)) # False pcm.remove_promo_code(12345) print(pcm.use_promo_code(12345)) # False ```","solution":"class PromoCodeManager: def __init__(self): self.codes = {} def add_promo_code(self, code, max_use_count): Adds or updates a promo code with the specified maximum use count. self.codes[code] = max_use_count def use_promo_code(self, code): Tries to use the given promo code. Returns True if successful, False otherwise. if code in self.codes: if self.codes[code] > 0: self.codes[code] -= 1 return True else: del self.codes[code] return False return False def remove_promo_code(self, code): Removes the given promo code from the system. if code in self.codes: del self.codes[code]"},{"question":"# AVL Tree Implementation and Usage Implement an AVL Tree that supports basic operations such as insertion, searching, and in-order traversal. Ensure your implementation maintains tree balance after each insertion to comply with AVL tree properties. 1. Class Definition Define a class `AvlTree` containing methods to insert elements, perform balance operations (left and right rotations), and traverse the tree in-order. 2. Functionality Implement the following methods: - `insert(self, key: int)`: Inserts a new integer key into the tree while maintaining balance. - `search(self, key: int) -> bool`: Searches for an integer key in the tree and returns `True` if found, otherwise `False`. - `in_order_traverse(self) -> List[int]`: Returns a list of elements arranged in in-order traversal. 3. Input and Output * **Input**: - `insert(key: int)`: Integer key to be inserted into the AVL tree. - `search(key: int)`: Integer key to be searched in the AVL tree. * **Output**: - `insert()`: No return value. - `search(key: int)`: Returns a boolean indicating the presence of the key. - `in_order_traverse()`: Returns a list of tree elements in in-order traversal. 4. Example ```python tree = AvlTree() tree.insert(10) tree.insert(20) tree.insert(30) tree.insert(40) tree.insert(50) tree.insert(25) print(tree.in_order_traverse()) # Output: [10, 20, 25, 30, 40, 50] print(tree.search(25)) # Output: True print(tree.search(5)) # Output: False ``` 5. Constraints and Performance * Nodes contain unique integer keys. * Validates tree balance after each insertion. * Efficiently handle up to 10,000 insertions and searches within acceptable time limits (O(log n) operations). Ensure the implementation is optimal and consider all potential edge cases associated with AVL trees, including balancing and rebalancing conditions. Notes * Use the provided `TreeNode` class to facilitate node creation. * Maintain proper tree structure with height and balance updates.","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None self.height = 1 class AvlTree: def __init__(self): self.root = None def insert(self, key: int): if not self.root: self.root = TreeNode(key) else: self.root = self._insert(self.root, key) def _insert(self, node, key): if not node: return TreeNode(key) if key < node.key: node.left = self._insert(node.left, key) else: node.right = self._insert(node.right, key) node.height = 1 + max(self._get_height(node.left), self._get_height(node.right)) balance = self._get_balance(node) # Left Left Case if balance > 1 and key < node.left.key: return self._right_rotate(node) # Right Right Case if balance < -1 and key > node.right.key: return self._left_rotate(node) # Left Right Case if balance > 1 and key > node.left.key: node.left = self._left_rotate(node.left) return self._right_rotate(node) # Right Left Case if balance < -1 and key < node.right.key: node.right = self._right_rotate(node.right) return self._left_rotate(node) return node def _left_rotate(self, z): y = z.right T2 = y.left y.left = z z.right = T2 z.height = 1 + max(self._get_height(z.left), self._get_height(z.right)) y.height = 1 + max(self._get_height(y.left), self._get_height(y.right)) return y def _right_rotate(self, z): y = z.left T3 = y.right y.right = z z.left = T3 z.height = 1 + max(self._get_height(z.left), self._get_height(z.right)) y.height = 1 + max(self._get_height(y.left), self._get_height(y.right)) return y def _get_height(self, node): if not node: return 0 return node.height def _get_balance(self, node): if not node: return 0 return self._get_height(node.left) - self._get_height(node.right) def search(self, key: int) -> bool: return self._search(self.root, key) def _search(self, node, key: int) -> bool: if not node: return False if key == node.key: return True elif key < node.key: return self._search(node.left, key) else: return self._search(node.right, key) def in_order_traverse(self) -> list: result = [] self._in_order_traverse(self.root, result) return result def _in_order_traverse(self, node, result): if not node: return self._in_order_traverse(node.left, result) result.append(node.key) self._in_order_traverse(node.right, result)"},{"question":"# Edit Distance Calculation You are given two words, `word_a` and `word_b`. The task is to write a function `edit_distance(word_a, word_b)` that calculates the minimum number of operations (insertions, deletions, or substitutions) required to transform `word_a` into `word_b`. This is also known as the Edit Distance or Levenshtein Distance between two strings. Input * `word_a`: A string of length `n` (0 ≤ n ≤ 1000). * `word_b`: A string of length `m` (0 ≤ m ≤ 1000). Output * An integer representing the minimum number of operations required to convert `word_a` to `word_b`. Constraints * The function should run efficiently for inputs as large as 1000 characters. Example ```python print(edit_distance(\\"kitten\\", \\"sitting\\")) # Output: 3 print(edit_distance(\\"food\\", \\"money\\")) # Output: 4 print(edit_distance(\\"sunday\\", \\"saturday\\")) # Output: 3 print(edit_distance(\\"\\", \\"\\")) # Output: 0 print(edit_distance(\\"abc\\", \\"\\")) # Output: 3 print(edit_distance(\\"\\", \\"abc\\")) # Output: 3 print(edit_distance(\\"abc\\", \\"abc\\")) # Output: 0 ``` # Explanation The function should use a dynamic programming approach where a 2D matrix `edit` is used to keep track of the minimum edit distances for all prefixes of the input strings. 1. **Base Cases**: * If one string is empty, the edit distance is the length of the other string. 2. **Recursive Case**: * If `word_a[i-1] == word_b[j-1]`, the cost is 0 (no change). * Otherwise, the cost is 1 (a substitution). The recurrence relation is: ``` edit(i, j) = min( edit(i-1, j) + 1, # Deletion edit(i, j-1) + 1, # Insertion edit(i-1, j-1) + cost) # Substitution ``` Write a function that implements this approach.","solution":"def edit_distance(word_a, word_b): Calculates the edit distance between two words. n = len(word_a) m = len(word_b) # Create a matrix to store the distances dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)] # Initialize the matrix for i in range(n + 1): for j in range(m + 1): if i == 0: dp[i][j] = j # insert all characters of word_b elif j == 0: dp[i][j] = i # delete all characters of word_a elif word_a[i - 1] == word_b[j - 1]: # If last characters are the same dp[i][j] = dp[i - 1][j - 1] else: # If the last character is different dp[i][j] = 1 + min(dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1])# Substitution return dp[n][m]"},{"question":"You are given a dataset of strings where each string represents a word composed of lowercase letters \'a\' to \'z\'. You need to implement a `Trie` data structure to efficiently store and manage these words. Your implementation should support the following operations: 1. `insert(word)`: Insert a word into the trie. 2. `search(word)`: Check if a word exists in the trie. 3. `startsWith(prefix)`: Check if there exists any word in the trie that starts with the given prefix. # Input and Output Format * `insert(word)` * **Input**: A string `word` (1 <= len(word) <= 1000) * **Output**: None * `search(word)` * **Input**: A string `word` (1 <= len(word) <= 1000) * **Output**: A boolean value `True` if the word exists in the trie, otherwise `False`. * `startsWith(prefix)` * **Input**: A string `prefix` (1 <= len(prefix) <= 1000) * **Output**: A boolean value `True` if there is any word in the trie that starts with the prefix, otherwise `False`. # Constraints * All words contain only lowercase letters \'a\' to \'z\'. * No requirement for handling empty strings. # Requirements Implement a class `Trie` with the above functions (`insert`, `search`, `startsWith`) using an efficient approach with respect to both time and space complexities. # Example ```python trie = Trie() trie.insert(\\"apple\\") print(trie.search(\\"apple\\")) # returns True print(trie.search(\\"app\\")) # returns False print(trie.startsWith(\\"app\\")) # returns True trie.insert(\\"app\\") print(trie.search(\\"app\\")) # returns True ``` Ensure to consider edge cases and potential performance bottlenecks while designing your solution.","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word: str) -> None: node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def search(self, word: str) -> bool: node = self.root for char in word: if char not in node.children: return False node = node.children[char] return node.is_end_of_word def startsWith(self, prefix: str) -> bool: node = self.root for char in prefix: if char not in node.children: return False node = node.children[char] return True"},{"question":"You have been given a raw binary array where each element is either 0 or 1. The task is to identify the index of exactly one zero that, when flipped to one, results in the longest contiguous sequence of ones. If the array contains no zeros, the function should return -1. # Function Signature ```python def max_ones_index(arr: List[int]) -> int: ``` # Input - A list `arr` where each element is either 0 or 1. - Length of the list is between 1 and 10^5. # Output - Return the index of the zero to flip. If there are no zeros in the array, return -1. # Example ```python assert max_ones_index([1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1]) == 3 assert max_ones_index([1, 1, 1, 1, 1]) == -1 assert max_ones_index([0, 1, 1, 1, 1]) == 0 assert max_ones_index([1, 1, 1, 1, 0]) == 4 ``` # Constraints - You may assume that the input list contains at least one element and that elements are either 0 or 1. - Your solution should run in linear time O(n). # Implementation Notes - Consider edge cases where the array begins with zero, ends with zero, or contains no zeros. - Analyze the performance and ensure that the time complexity is O(n). # Performance Expectations - Your solution should handle large arrays efficiently with a focus on optimal time complexity.","solution":"from typing import List def max_ones_index(arr: List[int]) -> int: Find the index of a zero that, when flipped, results in the longest contiguous sequence of 1s in the array. If there are no zeros, return -1. n = len(arr) if 0 not in arr: return -1 max_len = -1 # Maximum length of sequence of 1s found max_index = -1 # Index of zero to flip for maximum sequence # Variables to traverse current_left = 0 current_zeros = 0 zero_index = -1 # Traverse the array for i in range(n): if arr[i] == 0: current_zeros += 1 # If we have encountered more than one zero, update left pointer while current_zeros > 1: if arr[current_left] == 0: current_zeros -= 1 current_left += 1 # Check the length of the 1s sequence if flipping the zero at `i` would be beneficial current_len = i - current_left + 1 if current_len > max_len: max_len = current_len max_index = zero_index if arr[i] != 0 else i # Update the zero index if we encounter a zero zero_index = i if arr[i] == 0 else zero_index return max_index"},{"question":"# Sudoku Solver Implementation Given an N x N Sudoku board (for standard Sudoku, N=9) partially filled with digits from \'1\' to \'9\' and empty cells represented by \'.\', implement a function that solves the Sudoku puzzle. # Function Signature ```python def solve_sudoku(board: List[List[str]]) -> None: Solves the given Sudoku puzzle in-place. Args: board (List[List[str]]): 2D list representing the N x N Sudoku board with digits \'1\'-\'9\' and \'.\' for empty cells. Returns: None: The board is modified in place to reflect the solved puzzle. Constraints: - The input board is guaranteed to be a valid, partially filled Sudoku puzzle. - The solved Sudoku solution must also be valid. ``` # Example Input: ```python board``` Output: ```python [ [\\"5\\",\\"3\\",\\"4\\",\\"6\\",\\"7\\",\\"8\\",\\"9\\",\\"1\\",\\"2\\"], [\\"6\\",\\"7\\",\\"2\\",\\"1\\",\\"9\\",\\"5\\",\\"3\\",\\"4\\",\\"8\\"], [\\"1\\",\\"9\\",\\"8\\",\\"3\\",\\"4\\",\\"2\\",\\"5\\",\\"6\\",\\"7\\"], [\\"8\\",\\"5\\",\\"9\\",\\"7\\",\\"6\\",\\"1\\",\\"4\\",\\"2\\",\\"3\\"], [\\"4\\",\\"2\\",\\"6\\",\\"8\\",\\"5\\",\\"3\\",\\"7\\",\\"9\\",\\"1\\"], [\\"7\\",\\"1\\",\\"3\\",\\"9\\",\\"2\\",\\"4\\",\\"8\\",\\"5\\",\\"6\\"], [\\"9\\",\\"6\\",\\"1\\",\\"5\\",\\"3\\",\\"7\\",\\"2\\",\\"8\\",\\"4\\"], [\\"2\\",\\"8\\",\\"7\\",\\"4\\",\\"1\\",\\"9\\",\\"6\\",\\"3\\",\\"5\\"], [\\"3\\",\\"4\\",\\"5\\",\\"2\\",\\"8\\",\\"6\\",\\"1\\",\\"7\\",\\"9\\"] ] ``` # Constraints * N = 9 (for standard Sudoku); board is a 9x9 grid. * The board is guaranteed to have at least one solution. # Solution Requirements 1. You must define the `solve_sudoku` function to solve the Sudoku puzzle. 2. The solution must modify the board in-place. 3. The implementation should efficiently find the solution using DFS and backtracking as detailed in the analysis.","solution":"def solve_sudoku(board): def is_valid(board, row, col, c): Helper function to check if placing c at board[row][col] is valid. for i in range(9): if board[i][col] == c: return False if board[row][i] == c: return False if board[3*(row//3) + i//3][3*(col//3) + i%3] == c: return False return True def solve(board): Recursive function to solve the Sudoku using backtracking. for i in range(9): for j in range(9): if board[i][j] == \'.\': for c in \'123456789\': if is_valid(board, i, j, c): board[i][j] = c if solve(board): return True else: board[i][j] = \'.\' return False return True solve(board)"},{"question":"# Question: As a new hire at a company specializing in data organization, you\'ve been tasked with designing a function that another team member can use to assess various binary tree properties for optimization purposes. Your task is to complete this function which, given the root of a binary tree, computes and returns both the minimum depth and the maximum depth of the tree. **Specifications:** **Function Signature:** ```python from tree import TreeNode def compute_tree_depths(root: TreeNode) -> tuple: :param root: TreeNode - the root of the binary tree :return: tuple - a tuple containing the minimum depth and the maximum depth of the tree pass ``` Input: * `root`: A `TreeNode` object which is the root of a binary tree. The tree node has properties: * `val` (the value of the node) * `left` (left child, another TreeNode or None) * `right` (right child, another TreeNode or None) Output: * A tuple containing two integers: * The minimum depth of the tree. * The maximum depth of the tree. Constraints: * The number of nodes in the tree is in the range `[0, 10^4]`. * The values of the nodes are not necessary to solve the problem as we are only interested in structure. # Scenario: You are optimizing data retrieval times, requiring understanding both the shortest and longest paths from the root of the binary tree to any leaf node. Efficiently determining these depths ensures better balance and performance of your data tree structure. # Examples: Example 1: ```python Input: tree = TreeNode(1) tree.left = TreeNode(2) tree.right = TreeNode(3) tree.left.left = TreeNode(4) tree.left.right = TreeNode(5) # Tree looks like: # 1 # / # 2 3 # / # 4 5 Output: (2, 3) ``` Example 2: ```python Input: tree = TreeNode(1) tree.left = TreeNode(2) # Tree looks like: # 1 # / # 2 Output: (2, 2) ``` Example 3: ```python Input: tree = None Output: (0, 0) ``` # Instructions: * **Implement the function** `compute_tree_depths` that given a tree\'s root returns a tuple containing the minimum and maximum depth of the tree. * **Test your function** with a variety of binary tree configurations to ensure robustness. * Consider edge cases, such as very deeply nested trees and very wide trees.","solution":"from typing import Optional, Tuple class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def compute_tree_depths(root: Optional[TreeNode]) -> Tuple[int, int]: if root is None: return (0, 0) def min_depth(node: TreeNode) -> int: if node is None: return float(\'inf\') if not node.left and not node.right: return 1 return 1 + min(min_depth(node.left), min_depth(node.right)) def max_depth(node: TreeNode) -> int: if node is None: return 0 return 1 + max(max_depth(node.left), max_depth(node.right)) return (min_depth(root), max_depth(root))"},{"question":"You are tasked with implementing a modified version of the Cooley-Tukey Fast Fourier Transform (FFT) algorithm that can handle input arrays of any length (not necessarily powers of 2) by appropriately padding the input array with zeros. You must also address potential performance improvements. # Function Signature ```python def fft_with_padding(x: List[complex]) -> List[complex]: pass ``` # Input - **x**: A list of complex numbers `x` where (1 leq text{len}(x) leq 10^5). # Output - Returns a list of complex numbers, representing the discrete Fourier transform of the input. # Constraints - You can assume the real and imaginary parts of the input complex numbers are each in the range ([-1000, 1000]). - The output should be correct to within a relative or absolute error of (10^{-5}). # Performance Requirements - The solution should work efficiently for the maximum input size. - Your implementation should not exceed a reasonable recursion depth to avoid stack overflow issues. # Example ```python Input: [2.0+2j, 1.0+3j, 3.0+1j, 2.0+2j] Output: [8+8j, 2j, 2-2j, -2+0j] Input: [1, 2, 3, 4, 5] Output: A correct DFT output of the padded array ``` # Notes - Ensure your function handles inputs that are not powers of 2 by padding them with zeros to the next power of 2.","solution":"from typing import List import cmath import math def fft_with_padding(x: List[complex]) -> List[complex]: Perform a Fast Fourier Transform on the input list of complex numbers, padding the input list to the next power of 2 length. def fft_internal(x): N = len(x) if N <= 1: return x even = fft_internal(x[0::2]) odd = fft_internal(x[1::2]) T = [cmath.exp(-2j * math.pi * k / N) * odd[k] for k in range(N // 2)] return [even[k] + T[k] for k in range(N // 2)] + [even[k] - T[k] for k in range(N // 2)] # Find the next power of 2 for the length of x n = len(x) next_power_of_2 = 1 << (n - 1).bit_length() # Pad x with zeros to the next power of 2 x_padded = x + [0] * (next_power_of_2 - n) return fft_internal(x_padded)"},{"question":"You have been tasked with creating a more efficient sorting algorithm for a small embedded system with limited memory. One of the algorithms available to you is Comb Sort, which is a variant of the Bubble Sort designed to optimize performance through an initially larger gap size. Implement the `comb_sort` function to sort an array of integers in non-decreasing order using the Comb Sort algorithm detailed in the provided analysis. Pay close attention to gap reduction and the importance of the initial gap size to enhance performance. Function Signature ```python def comb_sort(arr: List[int]) -> List[int]: ``` Input * `arr`: A list of integers to be sorted. The list can contain negative numbers, zeros, and positive numbers. Output * Returns a sorted list of integers in non-decreasing order. Constraints * Do not use built-in sorting functions. * The list `arr` will have at most (10^4) elements. Example ```python # Example 1 input_array = [5, 2, 9, 1, 5, 6] output_array = comb_sort(input_array) # Output: [1, 2, 5, 5, 6, 9] # Example 2 input_array = [3, 0, -1, 8, 7, 2] output_array = comb_sort(input_array) # Output: [-1, 0, 2, 3, 7, 8] ``` Ensure that you handle edge cases such as already sorted arrays, arrays with identical elements, and arrays with single or no elements appropriately.","solution":"def comb_sort(arr): Sorts an array of integers in non-decreasing order using the Comb Sort algorithm. def get_next_gap(gap): gap = (gap * 10) // 13 if gap < 1: return 1 return gap n = len(arr) gap = n swapped = True while gap != 1 or swapped: gap = get_next_gap(gap) swapped = False for i in range(n - gap): if arr[i] > arr[i + gap]: arr[i], arr[i + gap] = arr[i + gap], arr[i] swapped = True return arr"},{"question":"# Dynamic Programming Regular Expression Matching Description Implement a function `is_match(str_a: str, str_b: str) -> bool` to perform regular expression matching with support for \'.\' and \'*\'. The \'.\' character matches any single character, while \'*\' matches zero or more of the preceding element. The matching should cover the entire input string `str_a`. Function Signature ```python def is_match(str_a: str, str_b: str) -> bool: ``` Input - `str_a`: a string consisting of lowercase English letters. - `str_b`: a string containing lowercase English letters and the characters \'.\' and \'*\'. Output - Return `True` if `str_a` matches `str_b` fully, `False` otherwise. Constraints - 1 <= len(str_a), len(str_b) <= 30 Examples 1. `is_match(\\"aa\\", \\"a\\")` should return `False`. 2. `is_match(\\"aa\\", \\"aa\\")` should return `True`. 3. `is_match(\\"aaa\\", \\"aa\\")` should return `False`. 4. `is_match(\\"aa\\", \\"a*\\")` should return `True`. 5. `is_match(\\"aa\\", \\".*\\")` should return `True`. 6. `is_match(\\"ab\\", \\".*\\")` should return `True`. 7. `is_match(\\"aab\\", \\"c*a*b\\")` should return `True`. Scenario Consider a text editor which allows users to perform advanced search and replace operations using regular expressions. Your task is to implement a matching function to check if given search patterns correctly match the provided text. This function will be an essential part of the editor\'s search operation. Evaluation Criteria - Correct implementation of algorithm using dynamic programming principles. - Handling of various edge cases and error scenarios. - Adherence to expected time and space complexities.","solution":"def is_match(str_a: str, str_b: str) -> bool: # dp[i][j] will be True if str_a[0..i-1] matches str_b[0..j-1] dp = [[False] * (len(str_b) + 1) for _ in range(len(str_a) + 1)] dp[0][0] = True # Both strings are empty # Initialize dp for patterns with \'*\' for j in range(1, len(str_b) + 1): if str_b[j-1] == \'*\': dp[0][j] = dp[0][j-2] for i in range(1, len(str_a) + 1): for j in range(1, len(str_b) + 1): if str_b[j-1] == \'.\' or str_b[j-1] == str_a[i-1]: dp[i][j] = dp[i-1][j-1] elif str_b[j-1] == \'*\': dp[i][j] = dp[i][j-2] or (dp[i-1][j] if str_b[j-2] == \'.\' or str_b[j-2] == str_a[i-1] else False) else: dp[i][j] = False return dp[len(str_a)][len(str_b)]"},{"question":"Implement a Doubly and Singly Linked List with Basic Operations Context You are given the task of implementing a doubly linked list and a singly linked list to manage a dynamic set of data values for a specific application that involves frequent insertion and deletion of items. Task Implement the following classes with the described methods: 1. **DoublyLinkedListNode** and **SinglyLinkedListNode**: - Already provided. 2. **DoublyLinkedList**: - `append(value)`: Adds a new node with the specified value at the end. - `prepend(value)`: Adds a new node with the specified value at the beginning. - `delete(value)`: Deletes the first node containing the specified value. - `display()`: Displays the list from head to tail. 3. **SinglyLinkedList**: - `append(value)`: Adds a new node with the specified value at the end. - `prepend(value)`: Adds a new node with the specified value at the beginning. - `delete(value)`: Deletes the first node containing the specified value. - `display()`: Displays the list from head to tail. Constraints - Both linked lists should handle edge cases (e.g., empty list, single element list) effectively. - Maintain time efficiency as per linked list properties (e.g., O(1) insertion/deletion at specific points). Example For `DoublyLinkedList`: ```python dll = DoublyLinkedList() dll.append(10) dll.append(20) dll.prepend(5) dll.display() # Outputs: 5 -> 10 -> 20 dll.delete(10) dll.display() # Outputs: 5 -> 20 ``` For `SinglyLinkedList`: ```python sll = SinglyLinkedList() sll.append(10) sll.append(20) sll.prepend(5) sll.display() # Outputs: 5 -> 10 -> 20 sll.delete(10) sll.display() # Outputs: 5 -> 20 ```","solution":"class DoublyLinkedListNode: def __init__(self, value=0, next=None, prev=None): self.value = value self.next = next self.prev = prev class SinglyLinkedListNode: def __init__(self, value=0, next=None): self.value = value self.next = next class DoublyLinkedList: def __init__(self): self.head = None self.tail = None def append(self, value): new_node = DoublyLinkedListNode(value) if not self.head: self.head = self.tail = new_node else: self.tail.next = new_node new_node.prev = self.tail self.tail = new_node def prepend(self, value): new_node = DoublyLinkedListNode(value) if not self.head: self.head = self.tail = new_node else: new_node.next = self.head self.head.prev = new_node self.head = new_node def delete(self, value): current = self.head while current: if current.value == value: if current.prev: current.prev.next = current.next else: self.head = current.next if current.next: current.next.prev = current.prev else: self.tail = current.prev return current = current.next def display(self): nodes = [] current = self.head while current: nodes.append(current.value) current = current.next return nodes class SinglyLinkedList: def __init__(self): self.head = None def append(self, value): new_node = SinglyLinkedListNode(value) if not self.head: self.head = new_node else: current = self.head while current.next: current = current.next current.next = new_node def prepend(self, value): new_node = SinglyLinkedListNode(value) new_node.next = self.head self.head = new_node def delete(self, value): current = self.head prev = None while current: if current.value == value: if prev: prev.next = current.next else: self.head = current.next return prev = current current = current.next def display(self): nodes = [] current = self.head while current: nodes.append(current.value) current = current.next return nodes"},{"question":"Sparse Matrix Multiplication # Problem Statement You are given two sparse matrices (A) and (B). Your task is to implement a function to compute the matrix product (C = AB). Matrix (A) is of size (m times n) and matrix (B) is of size (n times l). Both matrices are represented as a list of lists in Python where the inner lists represent rows. # Inputs * **A**: A list of lists of integers representing matrix (A). * Size: (m times n). * **B**: A list of lists of integers representing matrix (B). * Size: (n times l). Matrix (B) and matrix (A) are guaranteed to be sparse, meaning that they contain a significant proportion of zero elements. # Output * **C**: A list of lists of integers representing the matrix product (C = AB). * Size: (m times l). # Constraints * (1 leq m, n, l leq 1000) * Matrix (A) and (B) contain integer values in range ([-100, 100]). # Function Signature ```python def sparse_matrix_multiply(A: List[List[int]], B: List[List[int]]) -> List[List[int]]: ``` # Example Input ```python A = [ [1, 0, 0], [-1, 0, 3] ] B = [ [7, 0, 0], [0, 0, 0], [0, 0, 1] ] ``` Output ```python [[7, 0, 0], [-7, 0, 3]] ``` # Explanation The product of the matrices in the example is calculated as follows: [ | 1 0 0 | | 7 0 0 | | 7 0 0 | | -1 0 3 | x | 0 0 0 | = | -7 0 3 | | 0 0 1 | ``` # Implementation Requirements * Your implementation should efficiently handle sparse matrices by minimizing redundant calculations involving zero elements. * Ensure that the dimensions of input matrices are compatible for matrix multiplication; if not, raise an appropriate exception. * Validate the inputs to ensure they meet the given constraints. # Performance Requirements * Your solution should strive for an optimal balance between time complexity and space complexity.","solution":"from typing import List def sparse_matrix_multiply(A: List[List[int]], B: List[List[int]]) -> List[List[int]]: Multiplies two sparse matrices A and B and returns the result as matrix C. # Dimensions of the matrices m = len(A) n = len(A[0]) l = len(B[0]) # Initialize the result matrix C with zeros C = [[0] * l for _ in range(m)] # Create a sparse representation of B to skip zero values sparse_B = {} for i in range(n): for j in range(l): if B[i][j] != 0: if i not in sparse_B: sparse_B[i] = {} sparse_B[i][j] = B[i][j] # Perform matrix multiplication by taking advantage of the sparsity for i in range(m): for k in range(n): if A[i][k] != 0: # Only if A[i][k] is non-zero if k in sparse_B: # Only if there\'s a relevant row in B for j in sparse_B[k]: C[i][j] += A[i][k] * sparse_B[k][j] return C"},{"question":"# Question: Implement Heap Sort with Custom Order You are tasked with implementing a generic heap sort algorithm that can sort an array in both ascending and descending order, depending on the specified boolean argument. Your function should handle edge cases appropriately and must adhere to the expected time and space complexity constraints. Function Signature: ```python def custom_heap_sort(arr: List[int], ascending: bool = True) -> List[int]: pass ``` Input: * `arr`: A list of integers to be sorted. * `ascending`: A boolean flag indicating the sort order. The default value is `True`. - `True` means the array should be sorted in ascending order. - `False` means the array should be sorted in descending order. Output: * Return the sorted list of integers based on the specified order. Constraints: * The input list can contain zero or more integers within the integer range. Example: ```python custom_heap_sort([4, 10, 3, 5, 1], ascending=True) # Output: [1, 3, 4, 5, 10] custom_heap_sort([4, 10, 3, 5, 1], ascending=False) # Output: [10, 5, 4, 3, 1] ``` Notes: * Implement both max-heap and min-heap based on the `ascending` flag. * Handle edge cases such as empty arrays and single-element arrays gracefully. * Ensure the implementation adheres to O(n log(n)) time complexity and O(1) space complexity constraints (in-place sorting).","solution":"from typing import List def custom_heap_sort(arr: List[int], ascending: bool = True) -> List[int]: def heapify(arr, n, i, ascending): largest_smallest = i # Initialize largest (or smallest if descending) as root left = 2 * i + 1 # left = 2*i + 1 right = 2 * i + 2 # right = 2*i + 2 if ascending: if left < n and arr[left] > arr[largest_smallest]: largest_smallest = left if right < n and arr[right] > arr[largest_smallest]: largest_smallest = right else: if left < n and arr[left] < arr[largest_smallest]: largest_smallest = left if right < n and arr[right] < arr[largest_smallest]: largest_smallest = right if largest_smallest != i: arr[i], arr[largest_smallest] = arr[largest_smallest], arr[i] # swap heapify(arr, n, largest_smallest, ascending) n = len(arr) for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i, ascending) for i in range(n-1, 0, -1): arr[i], arr[0] = arr[0], arr[i] heapify(arr, i, 0, ascending) return arr"},{"question":"# Stack Sorting in Warehouse Management A warehouse uses a stack to manage shipments where each shipment is represented by a unique integer reflecting the priority of handling it. However, due to system limitations, they need to maintain this stack such that it is always sorted. You are asked to implement an OrderedStack to aid this warehouse in managing their shipments effectively. Implement the OrderedStack class with the following methods: 1. `is_empty(self)` - Checks if the stack is empty. Returns `True` if the stack is empty, otherwise `False`. 2. `push(self, item)` - Pushes an item to the stack while maintaining sorted order (smallest at bottom and largest at top). 3. `pop(self)` - Removes the top item from the stack. Raises an `IndexError` if the stack is empty. 4. `peek(self)` - Returns the top item of the stack without removing it. Raises an `IndexError` if the stack is empty. 5. `size(self)` - Returns the number of items in the stack. Your implementation should ensure the stack remains sorted on every `push` operation. Constraints: * The stack can hold any integers including duplicates. * Consider time efficiency for each method. * Ensure error handling as specified. Examples: 1. If you perform the following operations on the stack: ```python stack.push(3) stack.push(1) stack.push(2) print(stack.pop()) # should return 3 print(stack.pop()) # should return 2 print(stack.size()) # should return 1 ``` The stack maintains its order after each `push` operation. 2. If you try to `pop` from an empty stack: ```python stack.pop() # should raise an IndexError with message \\"Stack is empty\\" ``` Please implement the OrderedStack class based on the above description and constraints.","solution":"class OrderedStack: def __init__(self): self.stack = [] def is_empty(self): Checks if the stack is empty. Returns True if the stack is empty, otherwise False. return len(self.stack) == 0 def push(self, item): Pushes an item to the stack while maintaining sorted order (smallest at bottom and largest at top). temp_stack = [] # transfer elements to temp stack until the correct spot for item is found while self.stack and self.stack[-1] > item: temp_stack.append(self.stack.pop()) # push the item self.stack.append(item) # transfer back the elements from temp stack to main stack while temp_stack: self.stack.append(temp_stack.pop()) def pop(self): Removes the top item from the stack. Raises an IndexError if the stack is empty. if self.is_empty(): raise IndexError(\\"Stack is empty\\") return self.stack.pop() def peek(self): Returns the top item of the stack without removing it. Raises an IndexError if the stack is empty. if self.is_empty(): raise IndexError(\\"Stack is empty\\") return self.stack[-1] def size(self): Returns the number of items in the stack. return len(self.stack)"},{"question":"# Missing Number Detection Given a list of unique integers `nums` that represent a sequence in the range `[0..n]` where exactly one number is missing, write a function `find_missing_number` that returns the missing number. If no number is missing, return the next integer in the sequence. Function Signature ```python def find_missing_number(nums: List[int]) -> int: pass ``` Input * `nums`: A list of unique integers in the range `[0..n]`. Output * The missing number from the sequence. Constraints * The list `nums` will contain integers in the range `[0..n]` with exactly one missing integer. Examples ```python # Example 1 nums = [4, 1, 3, 0, 6, 5, 2] # The sequence is missing the number 7 print(find_missing_number(nums)) # Output: 7 # Example 2 nums = [3, 0, 1] # The sequence is missing the number 2 print(find_missing_number(nums)) # Output: 2 # Example 3 nums = [0, 1, 2, 3] # The sequence is complete, next integer is 4 print(find_missing_number(nums)) # Output: 4 ``` **Hint**: You may use either mathematical summation or bitwise operations as outlined in the analysis to solve the problem.","solution":"from typing import List def find_missing_number(nums: List[int]) -> int: Finds the missing number in the sequence from 0 to n inclusive (with one number missing) :param nums: List of unique integers in the range [0..n] :return: The missing number in the sequence # Calculate the supposed sum of range [0..n] n = len(nums) expected_sum = n * (n + 1) // 2 # Calculate the actual sum of elements in the list actual_sum = sum(nums) # The missing number is the difference between expected sum and actual sum return expected_sum - actual_sum"},{"question":"# Base Conversion Challenge As an integral part of improving your understanding of data encodings, you are tasked with implementing two crucial number conversion functions. Specifically, your functions should handle conversion from integer to any base between 2 and 36 and vice versa. Objective Write two functions: 1. `int_to_base(num: int, base: int) -> str`: Converts an integer to its representation in the specified base. 2. `base_to_int(str_to_convert: str, base: int) -> int`: Converts a string representation of a number in the specified base back to an integer. Input and Output Formats 1. **int_to_base**: - **Input**: An integer `num` to be converted which can be negative, and an integer `base` (2 <= base <= 36). - **Output**: A string representing the number in the given base. 2. **base_to_int**: - **Input**: A string `str_to_convert` representing the number in the given base, and an integer `base` (2 <= base <= 36). - **Output**: An integer representing the converted number. Constraints 1. For `int_to_base`: - The input integer can be between -10^9 and 10^9. - The base will be between 2 and 36. 2. For `base_to_int`: - The input string will only include valid characters for the given base. - The base will be between 2 and 36. Performance Requirements Your solutions should efficiently handle conversions for numbers up to 1 billion (10^9). Example ```python # Example 1: print(int_to_base(255, 16)) # Should return \'FF\' print(base_to_int(\'FF\', 16)) # Should return 255 # Example 2: print(int_to_base(-123, 2)) # Should return \'-1111011\' print(base_to_int(\'1111011\', 2)) # Should return 123 # Example 3: print(int_to_base(0, 8)) # Should return \'0\' print(base_to_int(\'4023\', 8)) # Should return 2083 ``` Please ensure that your solution handles edge cases and validates inputs appropriately.","solution":"def int_to_base(num: int, base: int) -> str: Converts an integer to its representation in the specified base. if base < 2 or base > 36: raise ValueError(\\"Base must be between 2 and 36\\") if num == 0: return \\"0\\" digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" negative = num < 0 num = abs(num) result = \\"\\" while num: result = digits[num % base] + result num //= base if negative: result = \'-\' + result return result def base_to_int(str_to_convert: str, base: int) -> int: Converts a string representation of a number in the specified base back to an integer. if base < 2 or base > 36: raise ValueError(\\"Base must be between 2 and 36\\") str_to_convert = str_to_convert.strip().upper() digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" negative = str_to_convert[0] == \'-\' if negative: str_to_convert = str_to_convert[1:] num = 0 for char in str_to_convert: if char not in digits[:base]: raise ValueError(f\\"Invalid character {char} for base {base}\\") num = num * base + digits.index(char) return -num if negative else num"},{"question":"# Scenario: You are working on a software that suggests corrections to textual inputs and requires calculating the edit distance between two words to suggest the closest match. # Task: Write a Python function `min_edit_distance(word_a: str, word_b: str) -> int` that takes two strings, `word_a` and `word_b`, and returns the minimum number of operations required to transform `word_a` into `word_b`. The allowed operations are insertion of a character, deletion of a character, and substitution of a character. # Input: - `word_a` (1 <= len(word_a) <= 1000): The first word. - `word_b` (1 <= len(word_b) <= 1000): The second word. # Output: - An integer representing the minimum edit distance between `word_a` and `word_b`. # Constraints: 1. All input strings will consist of lowercase English letters only. 2. Both strings will not exceed a length of 1000 characters. # Example: ```python assert min_edit_distance(\\"food\\", \\"money\\") == 4 assert min_edit_distance(\\"kitten\\", \\"sitting\\") == 3 assert min_edit_distance(\\"\\", \\"hello\\") == 5 assert min_edit_distance(\\"abc\\", \\"abc\\") == 0 ``` # Additional Performance Requirements: - Solve the problem using dynamic programming. - Ensure your solution runs in O(n * m) time complexity.","solution":"def min_edit_distance(word_a: str, word_b: str) -> int: Calculate the minimum edit distance between two words using dynamic programming. len_a, len_b = len(word_a), len(word_b) # Create a (len_a+1) x (len_b+1) matrix to store distances. dp = [[0] * (len_b + 1) for _ in range(len_a + 1)] # Initialize base cases. for i in range(len_a + 1): dp[i][0] = i # Deleting all characters in word_a to match empty word_b for j in range(len_b + 1): dp[0][j] = j # Inserting all characters of word_b to match empty word_a # Fill the DP table. for i in range(1, len_a + 1): for j in range(1, len_b + 1): if word_a[i - 1] == word_b[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no operation required else: dp[i][j] = min( dp[i - 1][j] + 1, # Deletion dp[i][j - 1] + 1, # Insertion dp[i - 1][j - 1] + 1 # Substitution ) return dp[len_a][len_b]"},{"question":"# Missing Ranges Finder You need to implement a function that detects the missing ranges in a numerical sequence given a lower and upper bound. This could be useful in various contexts such as data validation, where you need to identify missing values in a sequence. Function Signature: ```python def find_missing_ranges(arr: List[int], lo: int, hi: int) -> List[Tuple[int, int]]: ``` Input: 1. `arr` - A list of non-negative integers sorted in ascending order. The list might have duplicates but no guarantees about that. 2. `lo` - An integer representing the lower bound of the range. 3. `hi` - An integer representing the upper bound of the range. Output: - A list of tuples where each tuple represents a range (inclusive) that is missing between `lo` and `hi` based on the given array. Constraints: - The list `arr` can be empty or contain elements ranging from `lo` to `hi`. - `lo` and `hi` are inclusive in the missing range calculations. - 0 <= lo <= hi <= 10^9 - 0 <= len(arr) <= 10^6 Example: ```python # Example 1 arr = [3, 5] lo = 1 hi = 10 assert find_missing_ranges(arr, lo, hi) == [(1, 2), (4, 4), (6, 10)] # Example 2 arr = [1, 2, 4, 5, 6, 10] lo = 1 hi = 10 assert find_missing_ranges(arr, lo, hi) == [(3, 3), (7, 9)] # Example 3 arr = [] lo = 5 hi = 5 assert find_missing_ranges(arr, lo, hi) == [(5, 5)] ``` Constraints to consider: - Handle cases where the array is empty. - Handle consecutive numbers. - Ensure the solution works even with the lowest or highest numbers being the missing range handles. Your task is to complete the function `find_missing_ranges` to meet the provided specifications.","solution":"from typing import List, Tuple def find_missing_ranges(arr: List[int], lo: int, hi: int) -> List[Tuple[int, int]]: if not arr: return [(lo, hi)] result = [] prev = lo - 1 for num in arr: if num == prev + 2: result.append((prev + 1, prev + 1)) elif num > prev + 2: result.append((prev + 1, num - 1)) prev = num if prev < hi: result.append((prev + 1, hi)) return result"},{"question":"# Single Number Finder You are given an array of integers where every element appears exactly twice, except for one element which appears only once. Write a function `single_number(nums)` that finds this single number using linear runtime complexity (O(n)) and without using extra memory (O(1)). Your function should follow the given signature: ```python def single_number(nums: List[int]) -> int: ``` # Input - `nums`: List of integers, ( 1 leq text{len(nums)} leq 3 times 10^4 ). Each integer is in the range ([-3 times 10^4, 3 times 10^4]). # Output - Return the single integer that appears once in the array. If no such number is found (for example, if all numbers appear twice), return 0 as per the given implementation. However, you can assume you will always have exactly one such single element following the problem constraints. # Example ```python single_number([2, 2, 1]) # returns 1 single_number([4, 1, 2, 1, 2]) # returns 4 single_number([1]) # returns 1 ``` # Constraints - Your solution must have a linear runtime complexity (O(n)). - You must not use extra memory (O(1)). # Note - The array will always contain **exactly one** element that appears once and all others appear exactly twice.","solution":"def single_number(nums): Finds the single number in the list that does not appear twice. Uses bit manipulation to achieve an O(n) complexity with O(1) space. unique = 0 for num in nums: unique ^= num return unique"},{"question":"You are given a binary array consisting of \'0\' and \'1\'. Your task is to identify the index of the \'0\' which, if replaced by \'1\', will result in the longest continuous sequence of \'1\'s. If the array does not contain any \'0\'s, return -1. # Function Definition Complete the function `find_best_zero(arr: List[int]) -> int` where: * `arr` - a list of integers representing the binary array. # Constraints * The array length (n) will be (1 leq n leq 10^6). * The array will contain only \'0\'s and \'1\'s. # Input and Output Examples Example 1: ```python arr = [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1] output = 3 ``` Example 2: ```python arr = [1, 1, 1, 1] output = -1 ``` Example 3: ```python arr = [0, 0, 0, 0] output = 0 ``` # Explanation 1. For the input array `[1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1]`, replacing the \'0\' at index 3 yields the longest sequence of \'1\'s (7 continuous \'1\'s), thus the output is `3`. 2. For the input array `[1, 1, 1, 1]`, there is no \'0\' to flip, therefore the output is `-1`. 3. For the input array `[0, 0, 0, 0]`, regardless of which \'0\' is flipped, the length of continuous \'1\'s will be 1, and flipping the \'0\' at index 0 is an equally valid operation, thus the output can be `0`. # Notes * Handle large arrays efficiently within linear time complexity. * Consider edge cases such as single-element arrays or arrays without \'0\'s.","solution":"from typing import List def find_best_zero(arr: List[int]) -> int: Finds the index of the \'0\' that, if replaced by \'1\', will result in the longest continuous sequence of \'1\'s. n = len(arr) if 0 not in arr: return -1 max_len = 0 best_zero_idx = -1 left = 0 zero_count = 0 last_zero_idx = -1 for right in range(n): if arr[right] == 0: zero_count += 1 last_zero_idx = right while zero_count > 1: if arr[left] == 0: zero_count -= 1 left += 1 if right - left + 1 > max_len: max_len = right - left + 1 best_zero_idx = last_zero_idx return best_zero_idx"},{"question":"You are developing a custom library for statistical data processing that requires efficient sorting as part of its functionality. You have decided to implement the Merge Sort algorithm due to its consistent time complexity. **Task**: Implement the `merge_sort` function that sorts an array of integers in ascending order using the Merge Sort algorithm. Ensure that the algorithm handles various input scenarios efficiently and correctly. Function Signature ```python def merge_sort(arr: List[int]) -> List[int]: pass ``` Expected Input Format * A list of integers `arr` where: * 0 <= len(arr) <= 10^5 * -10^6 <= arr[i] <= 10^6 Expected Output Format * A new list of integers sorted in ascending order. Constraints * Ensure your implementation is efficient in terms of both time and space, adhering to the Merge Sort properties. * Avoid using built-in sort functions or any library functions that provide sorting capabilities. Example ```python # Example 1 arr = [38, 27, 43, 3, 9, 82, 10] assert merge_sort(arr) == [3, 9, 10, 27, 38, 43, 82] # Example 2 arr = [] assert merge_sort(arr) == [] # Example 3 arr = [1] assert merge_sort(arr) == [1] # Example 4 arr = [5, 2, 9, 1, 5, 6] assert merge_sort(arr) == [1, 2, 5, 5, 6, 9] ``` Performance Requirements * Ensure the algorithm runs in O(n log(n)) time complexity for the input size constraints. * Minimize space usage as much as possible while maintaining the integrity of the merge sort algorithm. Additional Notes * Make sure to handle edge cases such as empty arrays and arrays with a single element gracefully. * Thoroughly test your implementation with a wide range of input scenarios to confirm its correctness and efficiency.","solution":"def merge_sort(arr): Sorts an array of integers in ascending order using the Merge Sort algorithm. if len(arr) <= 1: return arr def merge(left, right): result = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: result.append(left[left_index]) left_index += 1 else: result.append(right[right_index]) right_index += 1 # Append any remaining elements result.extend(left[left_index:]) result.extend(right[right_index:]) return result mid_point = len(arr) // 2 left_sorted = merge_sort(arr[:mid_point]) right_sorted = merge_sort(arr[mid_point:]) return merge(left_sorted, right_sorted)"},{"question":"You are required to implement a stack that uses an array as the underlying data structure, but with an added feature of allowing constant time access to the minimum element in the stack. Besides the regular stack operations, this stack should support an additional operation, `get_min()`, that returns the minimum element currently in the stack. Requirements: 1. Implement the following operations for the stack: - `push(item)`: Adds a new item to the top of the stack. - `pop()`: Removes the top item from the stack and returns it. - `peek()`: Returns the top item of the stack without removing it. - `is_empty()`: Returns `True` if the stack is empty, otherwise `False`. - `get_min()`: Returns the minimum element currently in the stack. 2. The `get_min()` operation should perform in O(1) time complexity. 3. Handle edge cases where operations are performed on an empty stack by raising appropriate exceptions. Input and Output Formats: - **Input**: - A series of stack operations and their associated data (where applicable). - **Output**: - The result of each `pop()`, `peek()`, and `get_min()` operation. Constraints: 1. The stack should handle at least 100,000 operations efficiently. 2. The elements stored in the stack will be integers. Example: ```python stack = ArrayMinStack(10) stack.push(5) stack.push(3) stack.push(7) stack.push(1) print(stack.get_min()) # Output: 1 print(stack.pop()) # Output: 1 print(stack.get_min()) # Output: 3 print(stack.peek()) # Output: 7 ``` You are expected to implement the `ArrayMinStack` class with all the required methods.","solution":"class ArrayMinStack: def __init__(self, capacity): self.stack = [] self.min_stack = [] self.capacity = capacity def push(self, item): if len(self.stack) >= self.capacity: raise IndexError(\\"Stack overflow\\") self.stack.append(item) if not self.min_stack or item <= self.min_stack[-1]: self.min_stack.append(item) def pop(self): if self.is_empty(): raise IndexError(\\"Pop from empty stack\\") item = self.stack.pop() if item == self.min_stack[-1]: self.min_stack.pop() return item def peek(self): if self.is_empty(): raise IndexError(\\"Peek from empty stack\\") return self.stack[-1] def is_empty(self): return len(self.stack) == 0 def get_min(self): if self.is_empty(): raise IndexError(\\"Get minimum from empty stack\\") return self.min_stack[-1]"},{"question":"Given a Binary Search Tree (BST) and an integer `k`, implement a function that finds the kth smallest element in the BST. Your implementation should handle edge cases and operate efficiently for large inputs. # Function Signature ```python def find_kth_smallest(root: Node, k: int) -> int: ``` # Input - `root`: The root node of a binary search tree. - `k`: An integer representing the rank of the smallest element to be found. # Output - Returns the value of the kth smallest element in the BST. # Constraints - 1 <= k <= number of nodes in the tree - Nodes contain unique integer values. # Examples ```python # Example 1 # Input: Root of BST as shown in the snippet, k = 2 # Output: 50 # Example 2 # Input: Root of BST as shown in the snippet, k = 4 # Output: 100 ``` # Notes - Focus on the efficiency of your algorithm. - Explain how you handle edge cases, such as invalid k values within the constraints. - Discuss the time and space complexity of your approach. # Scenario Imagine you are working with a large database of products organized as a BST for fast search and retrieval operations by their IDs. You need to frequently determine the kth cheapest product to optimize inventory and promotional strategies. Implement a function `find_kth_smallest` to help with this task.","solution":"class Node: def __init__(self, key): self.left = None self.right = None self.val = key def find_kth_smallest(root: Node, k: int) -> int: This function returns the kth smallest element in the BST. def inorder_traversal(node): if not node: return [] # Traverse left, visit node, traverse right return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) # Get the inorder traversal of the entire tree inorder_list = inorder_traversal(root) # Since k is 1-based, we need to access the (k-1)th element in 0-based indexing return inorder_list[k - 1]"},{"question":"Scenario Imagine you are developing a network monitoring tool. One of the features requires counting the number of active connections, which are identified by bits set to 1 in a binary configuration of server statuses. To optimize this, you need an efficient algorithm to count these bits. Task Write a Python function that takes an unsigned integer and returns the number of \'1\' bits (Hamming weight) it contains in its binary representation using Brian Kernighan\'s Algorithm. Function Signature ```python def count_ones(n: int) -> int: pass ``` Input * A single integer, ( n ), where ( 0 leq n leq 2^{32}-1 ). Output * An integer representing the number of \'1\' bits in the binary representation of ( n ). Example ```python count_ones(11) # Returns 3 ``` Constraints 1. You should provide an iterative solution. 2. Ensure your function efficiently handles the input within the given constraints. Notes - You may assume the integer is unsigned and within the 32-bit length. - Python\'s default integer type can handle larger numbers, but the function should explicitly work within the 32-bit range specified. Provide comprehensive test cases to demonstrate the correctness of your function.","solution":"def count_ones(n: int) -> int: Returns the number of \'1\' bits in the binary representation of n. Using Brian Kernighan\'s Algorithm: 1. Initialize a count variable to 0. 2. While n is not 0: - Perform bitwise AND between n and (n-1) and assign this value back to n. - Increment the count. - Each iteration removes the rightmost set bit of n. 3. Return the count. :param n: A 32-bit unsigned integer :return: int representing the number of \'1\' bits count = 0 while n: n = n & (n - 1) count += 1 return count"},{"question":"# Permutation Generation of Unique Integers Objective You are given a collection of numbers that might contain duplicates. Write a function to return all possible unique permutations of the given list. Each permutation is a distinct rearrangement of the list\'s elements. Requirements - Function Name: `permute_unique` - Arguments: A list of integers which might contain duplicates. - Returns: A list of lists, where each inner list is a unique permutation. Input and Output Formats * **Input**: - A list of integers `nums`, where 1 <= len(nums) <= 8 and -10 <= nums[i] <= 10. * **Output**: - A list of unique permutations, each permutation is itself a list of integers. Example Consider the input list `[1, 1, 2]` * **Input**: `[1, 1, 2]` * **Output**: ``` [ [1, 1, 2], [1, 2, 1], [2, 1, 1] ] ``` Constraints - The solution must handle duplicate elements efficiently. - The permutations should be unique, no duplicate permutations should be included in the output. - Performance should be considered, avoid unnecessary computations. Guidelines - Sort the input list initially to handle duplicates more efficiently. - Use a backtracking approach to generate permutations. - While generating permutations, skip the insertion of duplicates in successive positions. Scenario Imagine you\'re developing a software to suggest unique arrangements of seating for guests at a wedding, where some guests might have the same name. To ensure each seating arrangement is unique, you want to generate all possible unique seating combinations. Your task is to write an algorithm to generate these unique permutations. Write the implementation of the function `permute_unique(nums)` below.","solution":"def permute_unique(nums): Generates all unique permutations of the list of integers that might contain duplicates. def backtrack(path, remaining, result): if not remaining: result.append(path) return seen = set() for i in range(len(remaining)): if remaining[i] not in seen: seen.add(remaining[i]) backtrack(path + [remaining[i]], remaining[:i] + remaining[i+1:], result) nums.sort() result = [] backtrack([], nums, result) return result"},{"question":"You are given two strings, `text` and `pattern`. Write a function `find_pattern_index(text, pattern)` that returns the 0-based index of the first occurrence of `pattern` in `text`. If `pattern` is not part of `text`, return -1. The function signature should be: ```python def find_pattern_index(text: str, pattern: str) -> int: pass ``` # Input * `text`: a string of length `n` (1 ≤ n ≤ 10^4) * `pattern`: a string of length `m` (0 ≤ m ≤ 10^4) # Output * An integer representing the index of the first occurrence of `pattern` in `text`, or -1 if `pattern` is not part of `text`. # Example 1. Input: `text = \\"hello\\", pattern = \\"ll\\"` Output: `2` 2. Input: `text = \\"aaaaa\\", pattern = \\"bba\\"` Output: `-1` 3. Input: `text = \\"teststring\\", pattern = \\"\\"` Output: `0` # Constraints * If `pattern` is an empty string, return `0`. * The function should handle large input sizes efficiently, but a naive approach is acceptable within the given constraints. # Notes * Ensure to handle edge cases like `pattern` being longer than `text`. * Given the constraints, consider time complexity and optimal performance in your solution.","solution":"def find_pattern_index(text: str, pattern: str) -> int: Returns the 0-based index of the first occurrence of pattern in text. If pattern is not part of text, returns -1. if not pattern: return 0 return text.find(pattern)"},{"question":"Generate Permutations of a List **Objective**: Write a function to generate all possible permutations of a list of distinct integers. **Function Signature**: ```python def generate_permutations(elements: List[int]) -> List[List[int]]: pass ``` **Input**: * A list of distinct integers (0 <= len(elements) <= 8). **Output**: * A list of lists, where each sublist is a permutation of the input list. **Constraints**: * You must not use any built-in library functions for permutations. * Your solution should handle the edge cases of empty and single-element lists. * Aim to write clean and efficient code with an emphasis on readability. **Example**: ```python >>> generate_permutations([1, 2, 3]) [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] >>> generate_permutations([0]) [[0]] >>> generate_permutations([]) [[]] ``` **Scenario**: Imagine you are tasked with finding all potential orders in which you can perform a series of tasks. Each task is distinct and should be performed exactly once. By generating all possible permutations of the task list, you can evaluate and choose the best possible order for execution based on some criteria, such as minimal time or maximal efficiency. **Hints**: * Think about how you can break down the problem into smaller sub-problems (i.e., generating permutations for a smaller subset and inserting the excluded element in all possible positions). * Consider using a helper function to implement the recursive generation of permutations. **Performance Requirement**: * The function should be able to handle the input size within reasonable time and space limits for n <= 8.","solution":"from typing import List def generate_permutations(elements: List[int]) -> List[List[int]]: def permute(current: List[int], remaining: List[int], results: List[List[int]]): if not remaining: results.append(current) return for i in range(len(remaining)): new_current = current + [remaining[i]] new_remaining = remaining[:i] + remaining[i+1:] permute(new_current, new_remaining, results) results = [] permute([], elements, results) return results"},{"question":"# Question: Plus One to a Digit Array Given a non-negative integer represented as an array of digits (where each element in the array is a single digit), write a function to add one to the number. The function should return the resulting array of digits. The digits are stored such that the most significant digit is at the head of the list. Requirements 1. The function should correctly handle cases where the carry-over causes the number of digits to increase (e.g., incrementing 999 will result in 1000). 2. The function should modify the input list in place and return it. Input * `digits`: a list of integers where each element is a digit (0-9) representing the number in big-endian format. Output * The function should return the modified list of integers after adding one to the number. Constraints * The input list will have at least one digit. * The input list will only contain non-negative digits (0-9). Example ```python # Example 1 Input: [1, 2, 3] Output: [1, 2, 4] # Example 2 Input: [9, 9, 9] Output: [1, 0, 0, 0] ``` Implementation ```python def plus_one(digits): :type digits: List[int] :rtype: List[int] # Complete the method here ```","solution":"def plus_one(digits): Adds one to the number represented by the digit array. Modifies the input list in place and returns it. :type digits: List[int] :rtype: List[int] n = len(digits) for i in range(n - 1, -1, -1): if digits[i] < 9: digits[i] += 1 return digits digits[i] = 0 # If all digits were 9, we end up here digits.insert(0, 1) return digits"},{"question":"# Stock Profit Calculation Problem Problem Statement You are given an array where the ith element represents the price of a given stock on day i. Your task is to determine the maximum profit that could be achieved from a single buy-sell transaction. You can only complete at most one transaction (i.e., buy one and sell one share of the stock). Input * An integer array `prices` of length `n` representing stock prices. Output * An integer representing the maximum profit that can be achieved from the transaction. Constraints * (1 leq n leq 10^5) * (0 leq prices[i] leq 10^4) Examples 1. **Example 1:** * Input: `[7, 1, 5, 3, 6, 4]` * Output: `5` * Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit is 6 - 1 = 5. 2. **Example 2:** * Input: `[7, 6, 4, 3, 1]` * Output: `0` * Explanation: In this case, no transaction is done, profit is 0. Function Signature Define a function `max_profit(prices: List[int]) -> int`. Note Your solution should be efficient, targeting a time complexity of (O(n)).","solution":"from typing import List def max_profit(prices: List[int]) -> int: if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are tasked with implementing an efficient algorithm to check for the presence of a pattern within a given text. To achieve this, you need to implement the Rabin-Karp algorithm. Your implementation should handle edge cases and ensure the accuracy of pattern matching. # Function Signature ```python def find_pattern(text: str, pattern: str) -> int: ``` # Input * `text` (str): The text in which to search for the pattern. * `pattern` (str): The pattern you are searching for in the text. # Output * `int`: The index of the first occurrence of the pattern in the text if found, otherwise return -1. # Constraints * `1 <= len(pattern) <= len(text) <= 10^6` * All characters are lowercase English letters. * Efficient average time complexity O(n + m). # Example ```python assert find_pattern(\\"abracadabra\\", \\"rac\\") == 2 assert find_pattern(\\"aaaaaaaa\\", \\"aaa\\") == 0 assert find_pattern(\\"\\", \\"\\") == -1 assert find_pattern(\\"abc\\", \\"abcd\\") == -1 assert find_pattern(\\"abcde\\", \\"e\\") == 4 ``` # Requirements * Implement the Rabin-Karp algorithm using the rolling hash technique. * Ensure proper handling of edge cases, such as empty input strings. # Notes 1. Do not use built-in string searching functions like `str.find()`. 2. Focus on keeping the code efficient and clean, optimizing for both time and space where possible.","solution":"def find_pattern(text: str, pattern: str) -> int: Returns the index of the first occurrence of the pattern in the text using the Rabin-Karp algorithm, otherwise returns -1. if not text or not pattern or len(pattern) > len(text): return -1 base = 256 prime = 101 n = len(text) m = len(pattern) pattern_hash = 0 text_hash = 0 h = 1 for i in range(m-1): h = (h * base) % prime for i in range(m): pattern_hash = (base * pattern_hash + ord(pattern[i])) % prime text_hash = (base * text_hash + ord(text[i])) % prime for i in range(n - m + 1): if pattern_hash == text_hash: if text[i:i + m] == pattern: return i if i < n - m: text_hash = (base * (text_hash - ord(text[i]) * h) + ord(text[i + m])) % prime if text_hash < 0: text_hash += prime return -1"},{"question":"You have been hired to develop a tool to detect plagiarism in submitted essays by comparing them against a large database of canonical texts. To achieve this, you decide to use the Rabin-Karp algorithm, due to its efficiency in searching for substrings within large texts. Your task is to implement the core function `rabin_karp_search(pattern: str, text: str) -> int` which will return the starting index of the first occurrence of the `pattern` in the `text`. If the `pattern` does not exist in the `text`, the function should return `-1`. # Function Signature: ```python def rabin_karp_search(pattern: str, text: str) -> int: pass ``` # Input: * `pattern` (str): The pattern string that you need to search for (1 <= len(pattern) <= 10^4). * `text` (str): The text string in which you search the pattern (1 <= len(text) <= 10^6). # Output: * `int`: The starting index of the first occurrence of the pattern in the text, or `-1` if not found. # Constraints: * The text and pattern contain only lowercase English letters (a-z). # Example: ```python print(rabin_karp_search(\\"abc\\", \\"abcabcabc\\")) # Should return 0 print(rabin_karp_search(\\"bca\\", \\"abcabcabc\\")) # Should return 1 print(rabin_karp_search(\\"def\\", \\"abcabcabc\\")) # Should return -1 ``` # Notes: * Optimize for the possibility that the pattern might not exist in the text at all. * Design the hash to handle collisions efficiently. * Take care of integer overflow if the text or pattern is very large.","solution":"def rabin_karp_search(pattern: str, text: str) -> int: Implements the Rabin-Karp algorithm to find the starting index of the first occurrence of the pattern in the text. Returns -1 if the pattern is not found. # Define the base and the modulus (prime number) base = 256 prime = 101 m = len(pattern) n = len(text) if m > n: return -1 # Compute the hash for the pattern and the first window of the text pattern_hash = 0 window_hash = 0 h = 1 for _ in range(m-1): h = (h * base) % prime for i in range(m): pattern_hash = (base * pattern_hash + ord(pattern[i])) % prime window_hash = (base * window_hash + ord(text[i])) % prime for i in range(n - m + 1): if pattern_hash == window_hash: if text[i:i+m] == pattern: return i if i < n - m: window_hash = (base * (window_hash - ord(text[i]) * h) + ord(text[i + m])) % prime if window_hash < 0: window_hash += prime return -1"},{"question":"You are given an unsorted list of integers. Your task is to implement a function that sorts the list using the Gnome Sort algorithm. This will allow us to assess your understanding of simple sorting algorithms and your ability to manage control flow within a function. # Function Signature: ```python def gnome_sort(arr: List[int]) -> List[int]: ``` # Input: - `arr` (List[int]): A list of integers to be sorted, where 0 <= len(arr) <= 1000 and -10^6 <= arr[i] <= 10^6. # Output: - (List[int]): The sorted list in ascending order. # Constraints: - Do not use any built-in sorting functions like `sort()` or `sorted()`. - Aim for an in-place sort to minimize additional memory usage. # Example: ```python assert gnome_sort([34, 2, 78, 12, 3]) == [2, 3, 12, 34, 78] assert gnome_sort([1, 4, 3, 2, 1]) == [1, 1, 2, 3, 4] assert gnome_sort([]) == [] assert gnome_sort([1]) == [1] assert gnome_sort([5, -1, 0, 2]) == [-1, 0, 2, 5] ``` # Instructions: - Implement the `gnome_sort` function, which sorts the list using the Gnome Sort algorithm described. - Take care of edge cases and ensure the performance is suitable for the given constraints.","solution":"from typing import List def gnome_sort(arr: List[int]) -> List[int]: Sorts the list using the Gnome Sort algorithm. i = 0 while i < len(arr): if i == 0 or arr[i] >= arr[i - 1]: i += 1 else: arr[i], arr[i - 1] = arr[i - 1], arr[i] i -= 1 return arr"},{"question":"# Linked List Deduplication Context: You are given a linked list where each node contains a single character. Some characters might be duplicated. You need to implement functions to remove these duplicates. You should demonstrate two different approaches: one using extra space and one optimizing for minimal space usage. Requirements: 1. **Function `remove_dups(head)`**: Removes duplicates using additional storage (hashset). 2. **Function `remove_dups_without_set(head)`**: Removes duplicates without using extra space. Inputs and Outputs: - **Input**: `head`, the head node of the linked list containing character values. - **Output**: Modified linked list with duplicates removed. Constraints: - Linked list nodes contain only alphabetic characters (both uppercase and lowercase). - The linked list can be empty. Performance: - `remove_dups(head)` should run in O(N) time. - `remove_dups_without_set(head)` should run in O(N^2) time. Example: Given a linked list: ``` A -> A -> B -> C -> D -> C -> F -> G ``` After removing duplicates: - Using `remove_dups(head)`: ``` A -> B -> C -> D -> F -> G ``` - Using `remove_dups_without_set(head)`: ``` A -> B -> C -> D -> F -> G ``` You need to implement these functions: ```python class Node(): def __init__(self, val=None): self.val = val self.next = None def remove_dups(head): Removes duplicates from a linked list using a hashset. Time Complexity: O(N) Space Complexity: O(N) # Your implementation here def remove_dups_without_set(head): Removes duplicates from a linked list without using extra space. Time Complexity: O(N^2) Space Complexity: O(1) # Your implementation here def print_linked_list(head): Prints the linked list elements. string = \\"\\" while head.next: string += head.val + \\" -> \\" head = head.next string += head.val print(string) ``` Implement the above functions to remove duplicates from the linked list in two different ways: one that uses extra storage and one that focuses on minimal space usage.","solution":"class Node(): def __init__(self, val=None): self.val = val self.next = None def remove_dups(head): Removes duplicates from a linked list using a hashset. Time Complexity: O(N) Space Complexity: O(N) if not head: return head seen = set() current = head seen.add(current.val) while current.next: if current.next.val in seen: current.next = current.next.next else: seen.add(current.next.val) current = current.next return head def remove_dups_without_set(head): Removes duplicates from a linked list without using extra space. Time Complexity: O(N^2) Space Complexity: O(1) if not head: return head current = head while current: runner = current while runner.next: if runner.next.val == current.val: runner.next = runner.next.next else: runner = runner.next current = current.next return head def print_linked_list(head): Prints the linked list elements. result = [] while head: result.append(head.val) head = head.next return \\" -> \\".join(result)"},{"question":"# Run-Length Encoding/Decoding Implementation Challenge You are given a simple compression algorithm called Run-Length Encoding (RLE), which converts a string of characters into a series of counts and characters representing consecutive repeating values. You will need to implement both the encoding and decoding functions for this algorithm. Function Signatures ```python def encode_rle(input: str) -> str: pass def decode_rle(input: str) -> str: pass ``` Requirements 1. **Encoding Function** (`encode_rle(input: str) -> str`): - Input: A string of characters. - Output: A string representing the run-length encoded form. - Example: `encode_rle(\\"aaabbcaaa\\")` should return `\\"3a2b1c3a\\"`. 2. **Decoding Function** (`decode_rle(input: str) -> str`): - Input: A string representing the run-length encoded form. - Output: The original string before encoding. - Example: `decode_rle(\\"3a2b1c3a\\")` should return `\\"aaabbcaaa\\"`. Constraints * The input for both functions will always be valid strings consisting of only lowercase alphabetical characters. * The encoded form will always be valid, with each character being immediately preceded by its count. * You must handle possible edge cases, such as empty strings and strings with no repeated characters. **Example Scenarios**: 1. **Case 1**: - Input: `\\"aabbcc\\"` - `encode_rle(\\"aabbcc\\")` -> `\\"2a2b2c\\"` - `decode_rle(\\"2a2b2c\\")` -> `\\"aabbcc\\"` 2. **Case 2**: - Input: `\\"aaaaa\\"` - `encode_rle(\\"aaaaa\\")` -> `\\"5a\\"` - `decode_rle(\\"5a\\")` -> `\\"aaaaa\\"` 3. **Case 3**: - Input: `\\"\\"` - `encode_rle(\\"\\")` -> `\\"\\"` - `decode_rle(\\"\\")` -> `\\"\\"` 4. **Case 4**: - Input: `\\"ab\\"` - `encode_rle(\\"ab\\")` -> `\\"1a1b\\"` - `decode_rle(\\"1a1b\\")` -> `\\"ab\\"` # Implementation Tips * Make sure to thoroughly test edge cases, such as empty strings, single-character strings, and strings with varying patterns. * Ensure your functions handle consecutive character groups efficiently for both encoding and decoding. Good luck, and happy coding!","solution":"def encode_rle(input: str) -> str: Encodes the input string using Run-Length Encoding (RLE). if not input: return \\"\\" encoded = [] count = 1 previous_char = input[0] for char in input[1:]: if char == previous_char: count += 1 else: encoded.append(f\\"{count}{previous_char}\\") previous_char = char count = 1 encoded.append(f\\"{count}{previous_char}\\") # Add the last group return \\"\\".join(encoded) def decode_rle(input: str) -> str: Decodes the Run-Length Encoded (RLE) string back to the original string. if not input: return \\"\\" decoded = [] count = \\"\\" for char in input: if char.isdigit(): count += char else: decoded.append(char * int(count)) count = \\"\\" return \\"\\".join(decoded)"},{"question":"**Context**: You are tasked to enhance a data retrieval system for a large e-commerce platform. The platform\'s product catalog is vast and involves searching within a sorted array of product IDs. To improve search efficiency, implement the Interpolation Search algorithm which is tailored for uniformly distributed datasets. **Problem Statement**: Implement the `interpolation_search` function that performs interpolation search on a given sorted list of integers. **Function Signature**: ```python def interpolation_search(array: List[int], search_key: int) -> int: :param array: List[int] - The sorted list of integers to be searched. :param search_key: int - The integer key to be searched in the array. :return: int - The index of search_key in the array if found, else -1. ``` **Input**: * A sorted list `array` of integers in increasing order with length `n` (`1 <= n <= 10^5`). * An integer `search_key` which is the key to be searched in the list. **Output**: * Return the index of `search_key` in `array` if it is present; otherwise, return -1. **Constraints**: * The array will be sorted in increasing order. * The values within the list are uniformly distributed. **Performance Requirements**: * The solution should efficiently handle large arrays up to the size limit within a reasonable time frame. **Example**: ```python # Example 1 array = [-25, -12, -1, 10, 12, 15, 20, 41, 55] search_key = -1 assert interpolation_search(array, search_key) == 2 # Example 2 array = [5, 10, 12, 14, 17, 20, 21] search_key = 55 assert interpolation_search(array, search_key) == -1 # Example 3 array = [5, 10, 12, 14, 17, 20, 21] search_key = -5 assert interpolation_search(array, search_key) == -1 ``` **Description**: Your task is to carefully implement the interpolation search algorithm within the given constraints and ensure it handles edge cases effectively. Use the provided guidelines to understand the key mechanisms and optimize the algorithm for the given uniformly distributed arrays.","solution":"from typing import List def interpolation_search(array: List[int], search_key: int) -> int: Perform interpolation search on a given sorted list of integers. :param array: List[int] - The sorted list of integers to be searched. :param search_key: int - The integer key to be searched in the array. :return: int - The index of search_key in the array if found, else -1. low = 0 high = len(array) - 1 while low <= high and search_key >= array[low] and search_key <= array[high]: if low == high: if array[low] == search_key: return low return -1 # Estimate the position of the search_key using interpolation formula pos = low + ((search_key - array[low]) * (high - low) // (array[high] - array[low])) if array[pos] == search_key: return pos if array[pos] < search_key: low = pos + 1 else: high = pos - 1 return -1"},{"question":"# Context In mathematical terms, the Fibonacci sequence is defined by the recurrence relation: [ F(n) = F(n-1) + F(n-2) ] with the initial values: [ F(0) = 0, F(1) = 1 ] The Fibonacci numbers are the numbers in the sequence: [ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ldots ] Given a number ( n ), you are required to return the ( n )-th Fibonacci number using an efficient approach to handle large values of ( n ). # Task Write a Python function, `fibonacci(n)`, to compute the ( n )-th Fibonacci number. The function should use an iterative approach to ensure optimal time and space complexities. # Input * An integer ( n ) (0 ≤ ( n ) ≤ 10^5) # Output * An integer representing the ( n )-th Fibonacci number. # Constraints * The input integer ( n ) will be in the range from 0 to 100,000 inclusive. # Example ```python fibonacci(10) # Output: 55 fibonacci(0) # Output: 0 fibonacci(1) # Output: 1 fibonacci(1000) # Output: (a very large number) ``` # Notes * You should ensure the function handles large values of ( n ) efficiently, both in terms of time and space.","solution":"def fibonacci(n): Returns the n-th Fibonacci number using an iterative approach. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"# Question: Calculate the Minimum Depth of a Binary Tree Given the structure of a binary tree as shown in the code snippet below, implement a function `min_depth(self, root)` that calculates the minimum depth of the binary tree. Additionally, provide an iterative version of the same function called `min_height(root)`. **Function Signatures** ```python def min_depth(self, root: TreeNode) -> int: # Your code here def min_height(root: TreeNode) -> int: # Your code here ``` **Input** - **root**: A TreeNode representing the root of a binary tree. **Output** - An integer denoting the minimum depth of the binary tree. **Constraints** - The number of nodes in the tree is between 0 and 10^4. - Node values are unique integers. ``` Example 10 / 12 15 / / 25 30 36 100 For the above tree, the minimum depth is 2 (Path: 10->15->36). **Additional Notes** - `min_depth` should handle edge cases such as an empty tree and highly imbalanced trees. - `min_height` should use breadth-first search (BFS) for its implementation.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def min_depth(root: TreeNode) -> int: if not root: return 0 if not root.left and not root.right: return 1 if not root.left: return min_depth(root.right) + 1 elif not root.right: return min_depth(root.left) + 1 return min(min_depth(root.left), min_depth(root.right)) + 1 from collections import deque def min_height(root: TreeNode) -> int: if not root: return 0 queue = deque([(root, 1)]) while queue: node, depth = queue.popleft() if not node.left and not node.right: return depth if node.left: queue.append((node.left, depth + 1)) if node.right: queue.append((node.right, depth + 1)) return 0"},{"question":"Scenario You are working on a data serialization library that requires efficient conversion between integers and byte arrays handling both big-endian and little-endian representations. Your task is to implement these conversion functions from scratch, ensuring they work efficiently for both small and large integers. Task Overview 1. **Function 1**: Implement `int_to_bytes_big_endian(num: int) -> bytes` function. * Converts an integer to a byte array in big-endian format. * Input: A non-negative integer `num`. * Output: A `bytes` object representing the input integer in big-endian format. 2. **Function 2**: Implement `int_to_bytes_little_endian(num: int) -> bytes` function. * Converts an integer to a byte array in little-endian format. * Input: A non-negative integer `num`. * Output: A `bytes` object representing the input integer in little-endian format. 3. **Function 3**: Implement `bytes_big_endian_to_int(bytestr: bytes) -> int` function. * Converts a big-endian byte array back to an integer. * Input: A `bytes` object in big-endian format. * Output: The original integer represented by the input byte array. 4. **Function 4**: Implement `bytes_little_endian_to_int(bytestr: bytes) -> int` function. * Converts a little-endian byte array back to an integer. * Input: A `bytes` object in little-endian format. * Output: The original integer represented by the input byte array. Requirements and Constraints - The integer input `num` will be a non-negative integer (0 <= num <= 2^64 - 1). - Ensure that the implementations handle edge cases, such as `num` being 0. - The input byte arrays for the reverse conversion functions should not exceed 64 bits (8 bytes). Example Usage ```python print(int_to_bytes_big_endian(1234)) # Output: b\'x04xd2\' print(int_to_bytes_little_endian(1234)) # Output: b\'xd2x04\' print(bytes_big_endian_to_int(b\'x04xd2\')) # Output: 1234 print(bytes_little_endian_to_int(b\'xd2x04\')) # Output: 1234 ``` Ensure that your implementation is efficient and handles the provided constraints effectively.","solution":"def int_to_bytes_big_endian(num: int) -> bytes: Converts an integer to a byte array in big-endian format. if num == 0: return b\'x00\' byte_length = (num.bit_length() + 7) // 8 return num.to_bytes(byte_length, \'big\') def int_to_bytes_little_endian(num: int) -> bytes: Converts an integer to a byte array in little-endian format. if num == 0: return b\'x00\' byte_length = (num.bit_length() + 7) // 8 return num.to_bytes(byte_length, \'little\') def bytes_big_endian_to_int(bytestr: bytes) -> int: Converts a big-endian byte array back to an integer. return int.from_bytes(bytestr, \'big\') def bytes_little_endian_to_int(bytestr: bytes) -> int: Converts a little-endian byte array back to an integer. return int.from_bytes(bytestr, \'little\')"},{"question":"You are responsible for validating various datasets that are represented as singly linked lists. Each linked list contains numerical data, and you need to ensure they are in sorted order before processing them further. **Task**: Write a function `is_sorted_linked_list` that determines if a singly linked list of integers is sorted in non-decreasing order. # Function Signature ```python def is_sorted_linked_list(head: \'ListNode\') -> bool: ... ``` # Input Description * `head`: The head node of the singly linked list. Each node is an instance of the `ListNode` class provided below. ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` # Output Description * Returns `True` if the linked list is sorted in non-decreasing order. * Returns `False` otherwise. # Constraints * The linked list can be empty (`head` is None). * Each node contains an integer value `val`. * Node values can be negative, zero, or positive. # Examples ```python # Example 1 head = ListNode(1, ListNode(2, ListNode(3, ListNode(4)))) assert is_sorted_linked_list(head) == True # Example 2 head = ListNode(1, ListNode(2, ListNode(-1, ListNode(3)))) assert is_sorted_linked_list(head) == False # Example 3 head = ListNode() assert is_sorted_linked_list(None) == True ``` # Additional Notes * Ensure your implementation is efficient, focusing on linear time complexity and constant space usage. * Thoroughly test your function with edge cases, including empty lists and lists with only one element.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_sorted_linked_list(head: \'ListNode\') -> bool: Determines if the singly linked list is sorted in non-decreasing order. :param head: The head node of the singly linked list :return: True if the linked list is sorted in non-decreasing order, False otherwise if not head: return True current = head while current and current.next: if current.val > current.next.val: return False current = current.next return True"},{"question":"Introduction You are given a binary tree and you need to determine the minimum depth of this tree. The minimum depth is defined as the number of nodes from the root to the nearest leaf node. A leaf node is a node with no children. Additionally, you need to provide a function to print the values of the nodes in pre-order traversal. Implementation Details You need to implement the following functions: 1. `find_min_depth(root: TreeNode) -> int` 2. `preorder_print(root: TreeNode) -> None` Function Explanations 1. **find_min_depth(root: TreeNode) -> int** * **Input**: * `root`: A TreeNode representing the root of the binary tree. * **Output**: * Returns an integer representing the minimum depth of the tree. * **Constraints**: * The tree can be empty (`root` can be `None`). * The nodes contain integer values. 2. **preorder_print(root: TreeNode) -> None** * **Input**: * `root`: A TreeNode representing the root of the binary tree. * **Output**: * Outputs the values of the nodes to standard output in pre-order traversal. * **Constraints**: * The tree can be empty (`root` can be `None`). * The nodes contain integer values. Example ```python # Assuming TreeNode class is defined as: class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right # Sample tree creation \'\'\' 3 / 9 20 / 15 7 \'\'\' root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) # Call the functions print(find_min_depth(root)) # Output: 2 preorder_print(root) # Output: 3 9 20 15 7 ``` You are required to: * Implement the `find_min_depth` function to find the minimum depth of the tree. * Implement the `preorder_print` function to print the tree\'s node values in pre-order. Your implementation should handle general binary trees efficiently with regards to time and space complexity.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_min_depth(root: TreeNode) -> int: if root is None: return 0 if root.left is None and root.right is None: return 1 if root.left is None: return find_min_depth(root.right) + 1 if root.right is None: return find_min_depth(root.left) + 1 return min(find_min_depth(root.left), find_min_depth(root.right)) + 1 def preorder_print(root: TreeNode) -> None: if root is None: return print(root.val, end=\' \') preorder_print(root.left) preorder_print(root.right)"},{"question":"Context: You are a software developer working on a data analysis tool that needs to sort user-provided data. Your initial task is to implement a basic sorting algorithm to ensure that any provided list of numbers is arranged in non-decreasing order. Problem Statement: Implement the `selection_sort` function to sort an array of numbers in non-decreasing order. In addition, implement a parameter called `simulation` to print each iteration of the sorting process for debugging and educational purposes. Function Signature: ```python def selection_sort(arr: List[int], simulation: bool = False) -> List[int]: Sorts an array of integers using the selection sort algorithm and prints each iteration if simulation is True. Parameters: arr (List[int]): List of integers to sort. simulation (bool): If True, print the array at each iteration of the sorting process. Returns: List[int]: Sorted list of integers in non-decreasing order. ``` Input: - `arr`: A list of integers (can be positive, negative, or zero). - `simulation`: A boolean flag (default=False) indicating whether to print the iterations. Output: - The function should return a sorted list of integers. Constraints: - All elements in `arr` will be integers. - The length of `arr` will be in the range 0 ≤ len(arr) ≤ 10^3. Example: ```python # Example 1 input_arr = [64, 25, 12, 22, 11] print(selection_sort(input_arr)) # Output: [11, 12, 22, 25, 64] # Example 2 input_arr = [] print(selection_sort(input_arr)) # Output: [] # Example 3 input_arr = [1, 2, 3, 4, 5] print(selection_sort(input_arr, simulation=True)) # Output: # iteration 0 : 1 2 3 4 5 # iteration 1 : 1 2 3 4 5 # iteration 2 : 1 2 3 4 5 # iteration 3 : 1 2 3 4 5 # iteration 4 : 1 2 3 4 5 ``` Notes: - Ensure that your function handles edge cases such as an empty list or a single-element list correctly. - You do not need to optimize the algorithm beyond the standard selection sort method.","solution":"from typing import List def selection_sort(arr: List[int], simulation: bool = False) -> List[int]: Sorts an array of integers using the selection sort algorithm and prints each iteration if simulation is True. Parameters: arr (List[int]): List of integers to sort. simulation (bool): If True, print the array at each iteration of the sorting process. Returns: List[int]: Sorted list of integers in non-decreasing order. n = len(arr) for i in range(n): min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] if simulation: print(f\'iteration {i} : {\\" \\".join(map(str, arr))}\') return arr"},{"question":"Histogram with Additional Analysis Objective Write a function to compute a histogram from a list of integers, and extend it to also return the most frequent value(s) and their frequency. # Function Signature ```python def extended_histogram(input_list: list) -> tuple: :param input_list: list of integers :return: a tuple with a dictionary representing the histogram and a list of the most frequent value(s) with their frequency ``` # Input * `input_list` (list): A list of integers which can be empty or contain repeated elements. # Output The function should return a tuple containing: 1. A dictionary that represents the histogram of the input list (same as the initial problem). 2. A list of tuples, where each tuple contains a value and its frequency. The list should only contain the value(s) with the highest frequency. # Example ```python input_list = [2, 3, 5, 5, 5, 6, 4, 3, 7] extended_histogram(input_list) # Output: ({2: 1, 3: 2, 4: 1, 5: 3, 6: 1, 7: 1}, [(5, 3)]) input_list = [3, 3, 2, 1] extended_histogram(input_list) # Output: ({1: 1, 2: 1, 3: 2}, [(3, 2)]) ``` # Constraints * Do not use additional libraries except for built-in Python functions. * Assume the input list can have up to 10,000 integers. # Performance Requirements Your solution should have a time complexity of O(n) and a space complexity of O(n), where n is the number of elements in the input list. # Implementation Notes: Make sure to: * Handle edge cases such as an empty list. * Validate input where necessary and handle incorrect types gracefully. * Ensure the output list of most frequent values is sorted in ascending order by value in case of ties.","solution":"def extended_histogram(input_list: list) -> tuple: Computes the histogram from a list of integers and returns the most frequent value(s) with their frequency. :param input_list: list of integers :return: a tuple with a dictionary representing the histogram and a list of the most frequent value(s) with their frequency histogram = {} for num in input_list: if num in histogram: histogram[num] += 1 else: histogram[num] = 1 if not histogram: return (histogram, []) max_freq = max(histogram.values()) most_frequent = sorted([(num, freq) for num, freq in histogram.items() if freq == max_freq]) return (histogram, most_frequent)"},{"question":"# Limiting Element Occurrences in a List Given a list of integers and a number ( N ), write a function that returns a new list containing each number from the original list at most ( N ) times without reordering. Function Signature ```python def delete_nth(array: List[int], n: int) -> List[int]: ``` Input - `array`: A list of integers, ( 1 leq text{{len(array)}} leq 10000 ). - `n`: An integer, ( 1 leq n leq 100 ). Output - Returns a list of integers where each element appears at most ( N ) times, in the original order they appeared in the input list. Constraints - You need to ensure that the algorithm works efficiently even for the upper limits of input size. # Example ```python assert delete_nth([1, 2, 3, 1, 2, 1, 2, 3], 2) == [1, 2, 3, 1, 2, 3] assert delete_nth([1, 1, 1, 1], 2) == [1, 1] assert delete_nth([], 5) == [] assert delete_nth([20, 37, 20, 21], 1) == [20, 37, 21] ``` # Explanation - **Example 1**: For input `[1, 2, 3, 1, 2, 1, 2, 3]` with ( N = 2 ): - Take the first `1, 2, 3`. - The next `1, 2` are also acceptable as the count is within the limit. - Subsequent `1, 2` are avoided as they exceed the limit. - Finally, `3` is accepted again resulting in `[1, 2, 3, 1, 2, 3]`. - **Example 2**: For input `[1, 1, 1, 1]` with ( N = 2 ): - The first two `1`s are taken, and the rest are omitted, leading to `[1, 1]`. Implement the function considering both correctness and efficiency.","solution":"from typing import List def delete_nth(array: List[int], n: int) -> List[int]: Returns a new list containing each number from the original list at most N times without reordering. if n <= 0: return [] result = [] counts = {} for num in array: current_count = counts.get(num, 0) if current_count < n: result.append(num) counts[num] = current_count + 1 return result"},{"question":"# Problem: Clone an Undirected Graph You are given an undirected graph represented by a node class defined below. Implement a function to clone the graph. The graph nodes might contain self-loops or cycles. Node Definition ```python class UndirectedGraphNode: def __init__(self, label): self.label = label self.neighbors = [] ``` Input - A single `UndirectedGraphNode` representing the root of the graph. Output - The root node of the cloned undirected graph. # Constraints 1. Node labels are unique integers. 2. The graph can contain up to 10^4 nodes and 10^4 edges. # Function Signature ```python def clone_graph(node: \'UndirectedGraphNode\') -> \'UndirectedGraphNode\': ``` # Example Suppose the graph is serialized as follows: `{0,1,2#1,2#2,2}`. This represents a graph with three nodes: ``` 1 / / 0 --- 2 / _/ ``` Given the root node `0`, your function should return the root of the cloned graph which has exactly the same structure. # Implementation Guidance - You can employ BFS, iterative DFS, or recursive DFS to traverse the graph. - Use a dictionary to map original nodes to their corresponding copied nodes. - Ensure to handle graphs with cycles appropriately to avoid infinite loops. # Performance Considerations - Aim for O(V + E) time complexity. - Optimize space usage wherever possible while ensuring correctness.","solution":"class UndirectedGraphNode: def __init__(self, label): self.label = label self.neighbors = [] def clone_graph(node: \'UndirectedGraphNode\') -> \'UndirectedGraphNode\': if not node: return None # A dictionary to track visited nodes and their clone clone_map = {} def clone(node): if node in clone_map: return clone_map[node] # Create a clone for the current node node_clone = UndirectedGraphNode(node.label) clone_map[node] = node_clone # Iterate through the neighbors and add clones of the neighbors for neighbor in node.neighbors: node_clone.neighbors.append(clone(neighbor)) return node_clone return clone(node)"},{"question":"You are tasked with implementing a function that calculates the number of ways to choose r items from n items, denoted nCr. Your implementation should be optimized to handle large input values efficiently. # Function Signature ```python def nCr(n: int, r: int) -> int: pass ``` # Input - `n` (0 <= n <= 1000): The total number of items. - `r` (0 <= r <= n): The number of items to choose. # Output - Return the number of ways to choose r items from n items, denoted nCr. # Constraints - Your implementation should handle the case where n = r or r = 0 efficiently. - The function must be optimized to run in O(n * r) time complexity or better. - Avoid deep recursion issues which may cause stack overflow for large inputs. # Examples 1. `nCr(5, 2)` should return `10` - There are 10 ways to choose 2 items from 5 items. 2. `nCr(10, 3)` should return `120` - There are 120 ways to choose 3 items from 10 items. 3. `nCr(0, 0)` should return `1` - There is exactly one way to choose 0 items from 0 items. # Additional Information - Think about how you can utilize memoization or iterative dynamic programming to improve efficiency. - Consider edge cases such as large values of n and r, and ensure your implementation handles them without excessive time or space usage.","solution":"def nCr(n: int, r: int) -> int: Calculate the number of ways to choose r items from n items, denoted nCr, using dynamic programming to efficiently handle large inputs. if r > n: return 0 if r == 0 or r == n: return 1 r = min(r, n - r) # C(n, r) is the same as C(n, n-r), use the smaller one dp = [0] * (r + 1) dp[0] = 1 # Base case initialization for i in range(1, n + 1): for j in range(min(i, r), 0, -1): # Update the dp array from right to left dp[j] = dp[j] + dp[j - 1] return dp[r]"},{"question":"Context: You are given a series of streams where each stream is composed of `(number, sign)` tuples. These streams are dynamic and represent real-time changes where numbers can be added or removed. Your task is to determine if each stream is 1-sparse, meaning it simplifies to a single number after processing all tuples. If the stream is 1-sparse, return this number. If not, return `None`. Function Signature: ```python def is_one_sparse(stream: List[Tuple[int, str]]) -> Union[int, None]: Determines if a stream is 1-sparse and returns the unique number if so. Parameters: stream (List[Tuple[int, str]]): A list of tuples where each tuple consists of an integer and a sign (\'+\' or \'-\'). Returns: int or None: The unique non-negative integer if the stream is 1-sparse, otherwise None. ``` Input/Output: * **Input**: List of tuples, each with a non-negative integer and a string (\'+\' or \'-\') sign. * **Output**: Integer if the stream is 1-sparse, otherwise `None`. Constraints: * The stream can have a size of up to (10^6) tuples. * Each integer in the stream can be in the range `[0, 2^31 - 1]`. Examples: ```python print(is_one_sparse([(4, \'+\'), (2, \'+\'), (2, \'-\'), (4, \'+\'), (3, \'+\'), (3, \'-\')])) # Output: 4 print(is_one_sparse([(2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\')])) # Output: 2 print(is_one_sparse([(2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (1, \'+\')])) # Output: None ``` **Notes**: 1. The stream contains only non-negative integers and valid \'+\' or \'-\' signs. 2. Ensure to check bit integrity as detailed in the prompt for correct implementation. **Explanation**: The solution should properly aggregate values accounting for signs, using bitwise operations for bit integrity to determine if the stream genuinely reduces to a unique single value or not.","solution":"from typing import List, Tuple, Union def is_one_sparse(stream: List[Tuple[int, str]]) -> Union[int, None]: count_map = {} for number, sign in stream: if sign == \'+\': count_map[number] = count_map.get(number, 0) + 1 elif sign == \'-\': count_map[number] = count_map.get(number, 0) - 1 if count_map[number] == 0: del count_map[number] if len(count_map) == 1: # If there\'s only one key left, return that key return next(iter(count_map)) else: # If there\'s more than one key left or none, it\'s not 1-sparse return None"},{"question":"# Anagram Validation: Advanced Version Problem: You are given two strings, `s` and `t`. Write a function to determine if `t` is an anagram of `s`, considering any alphanumeric characters and spaces. An anagram is a word or phrase formed by rearranging the characters of another, typically using all characters exactly once. * **Input**: - String `s` and `t` containing any alphanumeric characters and spaces. * **Output**: - Boolean `True` if `t` is an anagram of `s`, `False` otherwise. Constraints: - The string can contain lowercase/uppercase alphabets, numerics and spaces. - Spaces should be ignored in the anagram check. - You may assume the input strings will not be empty. Examples: ```python Input: s = \\"anagram\\", t = \\"nag a ram\\" Output: True Input: s = \\"rat1\\", t = \\"tar 1\\" Output: True Input: s = \\"Hello, World\\", t = \\"wrld ole ohll!\\" Output: False ``` Function Signature: ```python def is_advanced_anagram(s: str, t: str) -> bool: # Your implementation here ``` Explanation: 1. Develop a method to clean both strings by removing spaces and non-alphanumeric characters. 2. Use a dictionary to count the frequency of each character for both strings. 3. Compare the dictionaries, if they match, return `True`, else `False`. The solution should maintain a time complexity of O(n) and should effectively handle varied inputs with spaces and non-alphanumeric characters.","solution":"def is_advanced_anagram(s: str, t: str) -> bool: def clean_string(s: str) -> str: return \'\'.join(char.lower() for char in s if char.isalnum()) cleaned_s = clean_string(s) cleaned_t = clean_string(t) return sorted(cleaned_s) == sorted(cleaned_t)"},{"question":"**Gnome Sort Implementation and Analysis** Gnome Sort is an intuitive sorting algorithm inspired by the way a gnome sorts flower pots. Your task is to implement this algorithm and analyze its performance on different datasets. # Task 1. **Implementation**: Write a function `gnome_sort` to sort a list of integers using the Gnome Sort algorithm. 2. **Analysis and Application**: Create a function `analyze_gnome_sort` that: * Tests the gnome_sort function on different datasets. * Provides insights into its performance (time taken, number of swaps, and comparisons) for varying sizes and initial conditions of the list (random, sorted, reverse sorted, and nearly sorted lists). # Function Signature ```python def gnome_sort(arr: List[int]) -> List[int]: Sorts the list using Gnome Sort algorithm and returns the sorted list. pass def analyze_gnome_sort(): Analyzes the performance of gnome_sort on various test cases and prints the results. pass ``` # Input * The `gnome_sort` function will take a list of integers `arr` which needs to be sorted. * The `analyze_gnome_sort` function does not take any input. # Output * The `gnome_sort` function should return the sorted list of integers. * The `analyze_gnome_sort` function should print observations on performance metrics. # Constraints * 0 ≤ len(arr) ≤ 10^5 * Dataset can have negative and positive integers. * You may assume the internal test environment will not exceed memory limits for provided constraints. # Example ```python input_list = [34, 2, 10, -9] sorted_list = gnome_sort(input_list) print(sorted_list) # Output: [-9, 2, 10, 34] analyze_gnome_sort() # Should print analysis with time taken, number of swaps, and comparisons for each test case. ``` # Notes * Ensure to handle edge cases like empty lists and single-element lists gracefully. * Consider different datasets like completely sorted, reverse sorted, nearly sorted, and random lists for performance analysis.","solution":"from typing import List import time import random def gnome_sort(arr: List[int]) -> List[int]: Sorts the list using the Gnome Sort algorithm and returns the sorted list. index = 0 n = len(arr) while index < n: if index == 0 or arr[index] >= arr[index - 1]: index += 1 else: arr[index], arr[index - 1] = arr[index - 1], arr[index] index -= 1 return arr def analyze_gnome_sort(): Analyzes the performance of gnome_sort on various test cases and prints the results. test_cases = { \\"Random List\\": [random.randint(-1000, 1000) for _ in range(10000)], \\"Sorted List\\": list(range(10000)), \\"Reverse Sorted List\\": list(range(10000, 0, -1)), \\"Nearly Sorted List\\": list(range(10000)), } # Introduce a few swaps to make \\"Nearly Sorted List\\" - barely unsorted. for _ in range(100): i = random.randint(0, 9999) j = random.randint(0, 9999) test_cases[\\"Nearly Sorted List\\"][i], test_cases[\\"Nearly Sorted List\\"][j] = test_cases[\\"Nearly Sorted List\\"][j], test_cases[\\"Nearly Sorted List\\"][i] for case_name, arr in test_cases.items(): arr_copy = arr[:] start_time = time.time() gnome_sort(arr_copy) time_taken = time.time() - start_time print(f\\"{case_name} - Time taken: {time_taken:.6f} seconds\\")"},{"question":"# Question: Range Sum Query with Updates You are given an integer array `nums` and are asked to implement a data structure that supports dynamic range sum queries and point updates efficiently. Function Signatures ```python class SegmentTree: def __init__(self, arr: List[int]): Initializes a Segment Tree with the given array of integers. def update(self, index: int, value: int) -> None: Updates the element at index `index` to the new `value`. def range_sum(self, left: int, right: int) -> int: Returns the sum of the elements between indices `left` and `right` inclusive. ``` Example Usage ```python # Initialize the segment tree with an array arr = [1, 3, 5, 7, 9, 11] seg_tree = SegmentTree(arr) # Perform a range sum query assert seg_tree.range_sum(1, 3) == 15 # 3 + 5 + 7 # Update an element at index 1 seg_tree.update(1, 10) # Perform another range sum query assert seg_tree.range_sum(1, 3) == 22 # 10 + 5 + 7 ``` Constraints * 1 <= len(nums) <= 10^5 * 0 <= index < len(nums) * -10^9 <= nums[i], value <= 10^9 * 0 <= left <= right < len(nums) Guidelines 1. Initialize the segment tree from the given array in O(N) time. 2. Ensure that range sum queries are efficient with O(log N) time complexity. 3. Implement point updates efficiently with O(log N) time complexity.","solution":"class SegmentTree: def __init__(self, arr): Initializes a Segment Tree with the given array of integers. self.n = len(arr) self.tree = [0] * (2 * self.n) self.build(arr) def build(self, arr): for i in range(self.n): self.tree[self.n + i] = arr[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, index, value): Updates the element at index `index` to the new `value`. pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, left, right): Returns the sum of the elements between indices `left` and `right` inclusive. result = 0 left += self.n right += self.n + 1 while left < right: if left % 2 == 1: result += self.tree[left] left += 1 if right % 2 == 1: right -= 1 result += self.tree[right] left //= 2 right //= 2 return result"},{"question":"# Question: Pancake Sort Algorithm Enhancement Problem Description: You are provided with an implementation of the Pancake Sort algorithm. While functional, its inefficiency makes it unsuitable for large datasets. Your task is to enhance this implementation, ensuring it remains an in-place sorting algorithm with optimizations that can improve its practical performance. Function Signature: ```python def optimized_pancake_sort(arr: List[int]) -> List[int]: pass ``` Objectives: 1. **Enhance Performance**: Modify the given Pancake Sort to optimize its performance. Focus on reducing unnecessary operations. 2. **Handle Edge Cases**: Ensure that the algorithm handles edge cases such as arrays with duplicate values and already sorted arrays. 3. **Maintain In-Place Sorting**: Your optimized implementation should continue to sort the array in-place without using extra memory proportional to the input size. Input: - An unsorted array of integers `arr` of size `N` (0 <= N <= 10^4). Output: - A sorted array of integers in non-decreasing order. Constraints: - Aim to keep the optimizations within the spirit of Pancake Sort. Avoid converting it into entirely different sorting algorithms. Performance Requirements: - The optimized pancake sort should be more efficient than the naive O(N^2) approach for typical cases. Aim to reduce flips or unnecessary operations. Example: ```python assert optimized_pancake_sort([3, 6, 1, 10, 9]) == [1, 3, 6, 9, 10] assert optimized_pancake_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5] assert optimized_pancake_sort([]) == [] ``` **Additional Context**: Consider the case where the array is already sorted. Here, the naive implementation may still perform redundant operations. Your solution should bypass these to improve efficiency.","solution":"def optimized_pancake_sort(arr): Function to perform the optimized pancake sort on the given list. def flip(sublist, k): Helper function to reverse (flip) the first k elements of the sublist. sublist[:k] = sublist[:k][::-1] n = len(arr) for size in range(n, 1, -1): # Find the index of the maximum element in arr[0:size] max_index = max(range(size), key=arr.__getitem__) # Move the maximum element to the end of the current sublist if it\'s not already at the end if max_index != size - 1: # Step 1: Flip the maximum element to the front, if it\'s not already there if max_index != 0: flip(arr, max_index + 1) # Step 2: Flip it to its final position in the current sublist flip(arr, size) return arr"},{"question":"# Task: Implement a `StackQueue` class that combines the characteristics of `ArrayQueue` and `LinkedListQueue`. Your `StackQueue` class should operate similar to a queue but maintain internal elements using stacks. Implement your class using two stacks to handle `enqueue` and `dequeue` operations. # Requirements: 1. **Constructor**: Initialize the data structure. 2. **enqueue(self, value)**: Adds an element to the end of the queue. 3. **dequeue(self)**: Removes an element from the front of the queue. 4. **peek(self)**: Returns the front element of the queue. 5. **isEmpty(self)**: Returns `True` if the queue is empty, otherwise `False`. 6. **size(self)**: Returns the number of elements in the queue. # Performance Constraints: - The `enqueue` operation should have O(1) time complexity. - The `dequeue` operation should have O(n) worst-case time complexity. - The `peek` operation should have O(n) worst-case time complexity. # Example: ```python queue = StackQueue() queue.enqueue(10) queue.enqueue(20) print(queue.dequeue()) # Output: 10 print(queue.peek()) # Output: 20 print(queue.isEmpty()) # Output: False print(queue.size()) # Output: 1 ``` # Edge Cases to Consider: - Dequeue or peek operation on an empty queue should raise an error. - Handel sequence of alternating enqueue and dequeue operations.","solution":"class StackQueue: def __init__(self): self.enqueue_stack = [] self.dequeue_stack = [] def enqueue(self, value): self.enqueue_stack.append(value) def dequeue(self): if not self.dequeue_stack: while self.enqueue_stack: self.dequeue_stack.append(self.enqueue_stack.pop()) if not self.dequeue_stack: raise IndexError(\\"dequeue from empty queue\\") return self.dequeue_stack.pop() def peek(self): if not self.dequeue_stack: while self.enqueue_stack: self.dequeue_stack.append(self.enqueue_stack.pop()) if not self.dequeue_stack: raise IndexError(\\"peek from empty queue\\") return self.dequeue_stack[-1] def isEmpty(self): return not self.enqueue_stack and not self.dequeue_stack def size(self): return len(self.enqueue_stack) + len(self.dequeue_stack)"},{"question":"# Problem: Minimum Edit Distance with Constraints Scenario You\'re building a text editor feature that suggests corrections for misspelled words. To accurately suggest corrections, you need to measure how similar two words are using the minimum edit distance. However, due to memory constraints in your system, you need to optimize the space usage of your solution. Task Given two words `A` and `B`, implement a function `min_edit_distance(a: str, b: str) -> int` that finds the minimum number of single-character insertions, deletions, or substitutions required to transform word `A` into word `B`. Your implementation should use space optimization techniques. Input - `a` and `b` are two strings consisting of only alphabetical characters (both uppercase and lowercase). - Length of `a` and `b` is at most 1000. Output - Return the minimum edit distance as an integer. Constraints - Your solution must use O(min(len(a), len(b))) space complexity. - The time complexity should remain O(len(a) * len(b)). Example ```python assert min_edit_distance(\\"kitten\\", \\"sitting\\") == 3 assert min_edit_distance(\\"flaw\\", \\"lawn\\") == 2 assert min_edit_distance(\\"intention\\", \\"execution\\") == 5 assert min_edit_distance(\\"\\", \\"hello\\") == 5 assert min_edit_distance(\\"hello\\", \\"\\") == 5 assert min_edit_distance(\\"same\\", \\"same\\") == 0 ```","solution":"def min_edit_distance(a: str, b: str) -> int: Returns the minimum number of single-character insertions, deletions, or substitutions required to transform word `a` into word `b` using space optimization techniques. len_a, len_b = len(a), len(b) # If one of the strings is empty if len_a == 0: return len_b if len_b == 0: return len_a # Ensure a is the smaller or equal sized string for space optimization if len_a > len_b: a, b = b, a len_a, len_b = len_b, len_a previous_row = list(range(len_a + 1)) current_row = [0] * (len_a + 1) for i in range(1, len_b + 1): current_row[0] = i for j in range(1, len_a + 1): if b[i-1] == a[j-1]: current_row[j] = previous_row[j-1] else: current_row[j] = min(previous_row[j-1], previous_row[j], current_row[j-1]) + 1 previous_row, current_row = current_row, previous_row return previous_row[len_a]"},{"question":"# Question: Anagram Checker with Additional Constraints Suppose you are given two strings, `s` and `t`, that may contain any printable ASCII characters, not limited to lowercase alphabets. You need to determine if `t` is an anagram of `s`. **Example 1:** Input: `s = \\"Listen\\"`, `t = \\"Silent\\"` Output: `true` **Example 2:** Input: `s = \\"Hello, World!\\"`, `t = \\"dlroW ,!olleH\\"` Output: `true` **Example 3:** Input: `s = \\"Test\\"`, `t = \\"Best\\"` Output: `false` **Constraints:** - Both strings `s` and `t` can include any printable ASCII characters. - Function should be case-insensitive (i.e., treat \'A\' and \'a\' as the same character). **Task**: Write a function `is_anagram_extended(s, t)` in Python that returns `True` if `t` is an anagram of `s` and `False` otherwise. Consider all printable ASCII characters and case insensitivity. ```python def is_anagram_extended(s, t): :type s: str :type t: str :rtype: bool # Your implementation here ``` **Performance Requirements**: - The algorithm should have O(n) time complexity, where n is the length of the input strings. - The space complexity should be O(1) with respect to the additional character frequency storage used. **Additional Requirements**: - The function must be robust and correctly handle common edge cases such as varying character cases, mixed characters (letters, digits, punctuation), and different string lengths.","solution":"def is_anagram_extended(s, t): Determines if t is an anagram of s considering case insensitivity and all printable ASCII characters. :param s: str :param t: str :return: bool from collections import Counter # Convert both strings to lower case to ensure case insensitivity s = s.lower() t = t.lower() # Use Counter from collections to count occurrences of each character in both strings return Counter(s) == Counter(t)"},{"question":"# Question: Pathfinding in a Graph with Depth-Limited Search Given a directed graph represented as an adjacency list (dictionary format), write a function `find_path_with_depth(graph, start, end, max_depth)` which tries to find a path from `start` node to `end` node but only by traversing up to `max_depth` edges. If no path exists within the depth limit, the function should return None. # Function Signature ```python def find_path_with_depth(graph: dict, start: str, end: str, max_depth: int) -> list: pass ``` # Input - `graph`: A dictionary where the keys are node names and values are lists of adjacent nodes. - `start`: The starting node (string). - `end`: The destination node (string). - `max_depth`: An integer representing the maximum depth allowed in search. # Output - A list of node names representing the path from `start` to `end` if such a path exists within the given depth, otherwise None. # Constraints - The `graph` will have at most 100 nodes. - The depth limit `max_depth` will be a non-negative integer. - Node names are unique strings. # Example ```python graph = { \\"A\\": [\\"B\\", \\"C\\"], \\"B\\": [\\"A\\", \\"D\\"], \\"C\\": [\\"D\\"], \\"D\\": [\\"C\\"] } print(find_path_with_depth(graph, \\"A\\", \\"D\\", 2)) # Output: [\'A\', \'B\', \'D\'] print(find_path_with_depth(graph, \\"A\\", \\"D\\", 1)) # Output: None print(find_path_with_depth(graph, \\"A\\", \\"A\\", 0)) # Output: [\'A\'] ``` # Notes - Ensure the function works efficiently within the constraints. - Handle edge cases like cycles, disconnected graphs, and zero depth appropriately.","solution":"def find_path_with_depth(graph: dict, start: str, end: str, max_depth: int) -> list: def dfs(current, target, depth, path): if depth > max_depth: return None if current == target: return path for neighbor in graph.get(current, []): res = dfs(neighbor, target, depth + 1, path + [neighbor]) if res: return res return None return dfs(start, end, 0, [start])"},{"question":"Flatten Nested Arrays Context You are working on a data processing pipeline that includes various hierarchical data structures. Your goal is to simplify handling of this data by flattening any nested arrays into a single, one-dimensional array. Task Write a function `flatten_array` to convert any nested arrays into a single, flat array. This function should handle arbitrary levels of nesting and produce a single iterable list containing all elements of the nested structure. Function Signature ```python def flatten_array(arr: list) -> list: pass ``` Input * `arr`: A list, which can contain nested lists within it. These nested lists can also contain other nested lists or primitive data types (integers, strings, etc.). Output * A single list containing all elements from the input list `arr`, but flattened. Constraints * Nested lists can be arbitrarily deep. * Strings should not be treated as iterables that need further flattening. * The function must handle edge cases like empty lists. Example ```python # Example 1 input_arr = [1, [2, [3, 4]], 5] output = flatten_array(input_arr) print(output) # Output: [1, 2, 3, 4, 5] # Example 2 input_arr = [1, [], [3, [[4], 5]]] output = flatten_array(input_arr) print(output) # Output: [1, 3, 4, 5] # Example 3 input_arr = [] output = flatten_array(input_arr) print(output) # Output: [] ``` Notes * Consider edge cases such as very deeply nested arrays and empty arrays. * Aim for an efficient solution in terms of both time and space complexity.","solution":"def flatten_array(arr: list) -> list: Flattens a nested list into a single, one-dimensional list. result = [] def flatten(lst): for item in lst: if isinstance(item, list): flatten(item) else: result.append(item) flatten(arr) return result"},{"question":"1-Sparse Detection from Dynamic Stream As a data scientist in a high-frequency trading firm, you need to implement an algorithm to detect if a sequence is 1-sparse. A sequence is considered 1-sparse if, after canceling out repeated elements (sign indicated), there is exactly one unique number left. You are given a sequence of tuples, each containing a number and a sign (\'+\' or \'-\'). Write a function `detect_one_sparse` to determine if the sequence is 1-sparse, and if so, return the unique number; otherwise, return `None`. # Function Signature ```python def detect_one_sparse(stream: List[Tuple[int, str]]) -> Optional[int]: # Your implementation here ``` # Input * `stream`: A list of tuples, where each tuple contains an integer and a character (\'+\' or \'-\') representing the value and its respective sign in the sequence. # Output * Return the unique number if the sequence is 1-sparse, otherwise, return `None`. # Constraints * The stream will have a length of at most 10^6 tuples. * Each value in the tuple will be a non-negative integer within the range [0, 10^6]. * Signs will be provided only as \'+\' and \'-\'. # Example ```python stream1 = [(4, \'+\'), (2, \'+\'), (2, \'-\'), (4, \'+\'), (3, \'+\'), (3, \'-\')] print(detect_one_sparse(stream1)) # Output: 4 stream2 = [(2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\')] print(detect_one_sparse(stream2)) # Output: 2 stream3 = [(2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (1, \'+\')] print(detect_one_sparse(stream3)) # Output: None ``` **Considerations**: Ensure your solution is optimized for performance, handling edge cases, and has suitable time and space complexity.","solution":"from typing import List, Tuple, Optional def detect_one_sparse(stream: List[Tuple[int, str]]) -> Optional[int]: Determine if the sequence is 1-sparse, and if so, return the unique number. If not, return None. counter = {} for num, sign in stream: if sign == \'+\': if num in counter: counter[num] += 1 else: counter[num] = 1 elif sign == \'-\': if num in counter: counter[num] -= 1 else: counter[num] = -1 unique_nums = [num for num, count in counter.items() if count != 0] if len(unique_nums) == 1: return unique_nums[0] else: return None"},{"question":"# Merge Sort Implementation Challenge You are asked to implement the Merge Sort algorithm to sort an array of integers in ascending order. Your implementation needs to follow the principles of Merge Sort and must sort the array in-place. Function Signature ```python def merge_sort(arr: List[int]) -> None: pass ``` Input - `arr`: A list of integers `arr` with `1 <= len(arr) <= 10^5`. Output - The function should sort the input list `arr` in-place and should not return anything. Constraints - The algorithm should have a time complexity of O(n log n). - The algorithm should have a space complexity of O(n). Example ```python arr = [38, 27, 43, 3, 9, 82, 10] merge_sort(arr) print(arr) # Output: [3, 9, 10, 27, 38, 43, 82] ``` Key Points to Consider - Ensure that your merge function works correctly with the end of arrays without running into index out of bounds errors. - Consider edge cases such as empty array or array of one element. Implement the `merge_sort` function along with any required helper functions to sort the list.","solution":"from typing import List def merge_sort(arr: List[int]) -> None: Sorts an array of integers in ascending order using the Merge Sort algorithm. if len(arr) > 1: mid = len(arr) // 2 # Find the middle of the array left_half = arr[:mid] # Dividing the array into two halves right_half = arr[mid:] merge_sort(left_half) # Sorting the first half merge_sort(right_half) # Sorting the second half i = j = k = 0 # Copy data to temp arrays left_half[] and right_half[] while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] j += 1 k += 1 # Checking if any element was left while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1"},{"question":"# Question You are given an array `nums` consisting of `n` integers where each integer is either 0, 1, or 2. The task is to sort the array such that all 0s appear before all 1s which in turn appear before all 2s. You are required to complete the function `sort_colors(nums)` without using the built-in sorting functions. # Function Signature ```python def sort_colors(nums: List[int]) -> None: Sorts the list nums containing integers 0, 1, and 2 in place. Args: nums (List[int]): List of integers where each integer is either 0, 1 or 2. Returns: None: The function modifies nums in place to sort it. ``` # Input - `nums` (List[int]): An array of integers with length (n), where each element is either 0, 1, or 2. # Output - The function should modify the list `nums` in place to achieve the sorted order of colors. # Constraints - All integers in `nums` must be either 0, 1, or 2. - The length of `nums` is between 0 and (10^6). # Examples Example 1 ```python nums = [2, 0, 2, 1, 1, 0] sort_colors(nums) print(nums) # Output: [0, 0, 1, 1, 2, 2] ``` Example 2 ```python nums = [2, 0, 1] sort_colors(nums) print(nums) # Output: [0, 1, 2] ``` Example 3 ```python nums = [0] sort_colors(nums) print(nums) # Output: [0] ``` Example 4 ```python nums = [1, 0] sort_colors(nums) print(nums) # Output: [0, 1] ``` # Notes - This problem can potentially be solved in a single pass (linear time) and with constant space complexity. - Consider handling edge cases such as empty lists, and lists where all elements are the same.","solution":"def sort_colors(nums): Sorts the list nums containing integers 0, 1, and 2 in place. low, mid, high = 0, 0, len(nums) - 1 while mid <= high: if nums[mid] == 0: nums[low], nums[mid] = nums[mid], nums[low] low += 1 mid += 1 elif nums[mid] == 1: mid += 1 else: # nums[mid] == 2 nums[high], nums[mid] = nums[mid], nums[high] high -= 1"},{"question":"# B-tree Implementation Challenge To test your understanding of the B-tree data structures, your task is to implement the __contains__ method of the BTree class. This method should check if a given key exists in the B-tree. # Input: - Integer key to be searched within the B-tree. # Output: - Boolean value: `True` if the key exists, `False` otherwise. # Requirements: 1. The implementation must traverse the B-tree correctly to locate the key. 2. Ensure that your solution works efficiently in O(log n) time complexity where `n` is the number of elements in the tree. 3. You must handle edge cases, such as the B-tree being empty or having one element. # Function Signature: ```python class BTree: # Existing methods are defined here... def __contains__(self, key: int) -> bool: # Your implementation here pass ``` # Example: ```python # Assume we have a pre-built BTree instance called btree btree.insert_key(10) btree.insert_key(20) btree.insert_key(5) print(10 in btree) # Output: True print(15 in btree) # Output: False ``` You are NOT allowed to use in-built search functions. Your solution must traverse the B-tree according to its structure and properties.","solution":"class BTreeNode: def __init__(self, t, leaf=False): self.t = t self.leaf = leaf self.keys = [] self.children = [] class BTree: def __init__(self, t): self.root = BTreeNode(t, True) self.t = t def __contains__(self, key: int) -> bool: Check if a key is present in the B-tree. return self._search(self.root, key) def _search(self, node, key): Recursive search function. i = 0 while i < len(node.keys) and key > node.keys[i]: i += 1 if i < len(node.keys) and key == node.keys[i]: return True elif node.leaf: return False else: return self._search(node.children[i], key) # Insert functions and other B-Tree management code would go here def insert_key(self, key): Inserts a new key into the B-tree. root = self.root if len(root.keys) == 2 * self.t - 1: new_root = BTreeNode(self.t, False) new_root.children.append(root) self._split_child(new_root, 0) self._insert_non_full(new_root, key) self.root = new_root else: self._insert_non_full(root, key) def _insert_non_full(self, node, key): i = len(node.keys) - 1 if node.leaf: node.keys.append(0) while i >= 0 and key < node.keys[i]: node.keys[i + 1] = node.keys[i] i -= 1 node.keys[i + 1] = key else: while i >= 0 and key < node.keys[i]: i -= 1 i += 1 if len(node.children[i].keys) == 2 * self.t - 1: self._split_child(node, i) if key > node.keys[i]: i += 1 self._insert_non_full(node.children[i], key) def _split_child(self, parent, i): t = self.t node = parent.children[i] new_node = BTreeNode(t, node.leaf) parent.children.insert(i + 1, new_node) parent.keys.insert(i, node.keys[t - 1]) new_node.keys = node.keys[t:(2 * t - 1)] node.keys = node.keys[0:(t - 1)] if not node.leaf: new_node.children = node.children[t:(2 * t)] node.children = node.children[0:(t - 1)]"},{"question":"Delete Reoccurring Characters Context You are tasked with writing a function for text processing that ensures each character in a string appears only once. This is a common preprocessing step in data cleaning and encryption. Objective Create a function `delete_reoccurring_characters` that takes a string as input and returns a new string after deleting any reoccurring character. Function Signature ```python def delete_reoccurring_characters(string: str) -> str: ``` Input * A single string `string` (1 <= len(string) <= 10^5) which may contain upper and lowercase letters, digits, and special characters. Output * A string where each character from the original string appears only once. Constraints * The order of the first occurrences of each character in the input string should be preserved in the output string. Performance Requirements * The solution should be efficient in terms of both time and space complexity, ideally O(n) for both. Example Case ```python assert delete_reoccurring_characters(\\"appearance\\") == \\"apernc\\" assert delete_reoccurring_characters(\\"google\\") == \\"gole\\" assert delete_reoccurring_characters(\\"example\\") == \\"exampl\\" assert delete_reoccurring_characters(\\"\\") == \\"\\" assert delete_reoccurring_characters(\\"112233\\") == \\"123\\" ```","solution":"def delete_reoccurring_characters(string: str) -> str: Returns a string where each character appears only once, preserving the order of first occurrences. seen = set() result = [] for char in string: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"# Fast Fourier Transform (FFT) Implementation Challenge You are working on a signal processing project and need to transform time-domain data into its frequency domain representation using the Fast Fourier Transform (FFT). The FFT is a highly efficient algorithm for computing the Discrete Fourier Transform (DFT). **Task**: Implement your version of the Cooley-Tukey FFT algorithm in a recursive manner. **Function Signature**: ```python def fft(x: List[complex]) -> List[complex]: ``` # Input: * A list `x` of `complex` numbers of length `N`. * N must be a power of 2. # Output: * A list of `complex` numbers of length `N` which is the discrete Fourier transform (DFT) of the input list. # Constraints: * The input list will always have a size that is a power of 2. * The input list length N (1 <= N <= 2^16). # Example: ```python # Example input input_data = [2.0+2j, 1.0+3j, 3.0+1j, 2.0+2j] # Example output output_data = [8+8j, 2j, 2-2j, -2+0j] ``` # Explanation: The given input `[2.0+2j, 1.0+3j, 3.0+1j, 2.0+2j]` transforms to `[8+8j, 2j, 2-2j, -2+0j]` using the FFT algorithm. # Notes: - You are not allowed to use any built-in library functions to directly compute FFT. The implementation should follow the Cooley-Tukey algorithm as described. Implement the FFT function in Python ensuring efficiency and correctness.","solution":"from typing import List import cmath def fft(x: List[complex]) -> List[complex]: N = len(x) if N <= 1: return x even = fft(x[0::2]) odd = fft(x[1::2]) T = [cmath.exp(-2j * cmath.pi * k / N) * odd[k] for k in range(N // 2)] return [even[k] + T[k] for k in range(N // 2)] + [even[k] - T[k] for k in range(N // 2)]"},{"question":"**Scenario:** You are working for a company that processes large sets of numerical data where the requirement is to frequently access the maximum value. You\'ve decided to use an Ordered Stack to meet this requirement efficiently. Your task is to implement an optimized variant of the Ordered Stack that improves the insertion performance. **Task:** Implement the `OptimizedOrderedStack` class that maintains the properties of an `OrderedStack` but aims to improve the performance of the `push` operation by reducing unnecessary operations. # Requirements: 1. Implement the `OptimizedOrderedStack` class with the following methods: - `is_empty()`: Returns `True` if the stack is empty, `False` otherwise. - `push(item)`: Pushes `item` onto the stack while maintaining order. - `pop()`: Removes and returns the top item from the stack. Raises an `IndexError` if the stack is empty. - `peek()`: Returns the top item from the stack without removing it. Raises an `IndexError` if the stack is empty. - `size()`: Returns the number of elements in the stack. # Constraints: - Use only standard library data structures. - Ensure that `push` method maintains the order with time complexity better than O(n*n) for n elements. - Handle typical edge cases like empty stack operations and pushing multiple elements in order. # Example: ```python s = OptimizedOrderedStack() s.push(3) s.push(1) s.push(2) print(s.peek()) # Output: 3 print(s.size()) # Output: 3 print(s.pop()) # Output: 3 print(s.pop()) # Output: 2 print(s.pop()) # Output: 1 print(s.is_empty()) # Output: True try: s.pop() except IndexError as e: print(e) # Output: Stack is empty ``` Ensure your implementation passes the above example and other edge cases you can think of.","solution":"class OptimizedOrderedStack: def __init__(self): self.stack = [] self.max_stack = [] def is_empty(self): return len(self.stack) == 0 def push(self, item): self.stack.append(item) if not self.max_stack or item >= self.max_stack[-1]: self.max_stack.append(item) def pop(self): if self.is_empty(): raise IndexError(\\"Stack is empty\\") item = self.stack.pop() if item == self.max_stack[-1]: self.max_stack.pop() return item def peek(self): if self.is_empty(): raise IndexError(\\"Stack is empty\\") return self.stack[-1] def size(self): return len(self.stack) def max(self): if self.is_empty(): raise IndexError(\\"Stack is empty\\") return self.max_stack[-1]"},{"question":"// Problem Statement: # Permutation Generation for Unique Strings You are to implement a function that generates all possible permutations of a given list of distinct characters. This exercise aims to test your understanding of recursive and iterative approaches to solve problem-laden with combinatorial explosion in possibilities. Function: ```python def generate_permutations(elements: List[str]) -> List[List[str]]: pass ``` Input: - `elements` (List[str]): A list of distinct characters (1 <= length <= 9). Output: - List[List[str]]: A list containing all possible permutations of the input list. # Constraints: 1. All elements in the input `elements` are distinct. 2. Ensure your solution does not use `itertools.permutations` or any similar direct permutation functions. Example: ```python # Input elements = [\'a\', \'b\', \'c\'] # Output [ [\'a\', \'b\', \'c\'], [\'a\', \'c\', \'b\'], [\'b\', \'a\', \'c\'], [\'b\', \'c\', \'a\'], [\'c\', \'a\', \'b\'], [\'c\', \'b\', \'a\'] ] ``` # Requirements: 1. Implement a recursive function to generate the permutations. 2. Optimize space usage by implementing a generator function using `yield`. 3. Discuss potential performance bottlenecks and any optimization avenues. # Evaluation Criteria: - Correctness: The function should return correct permutations set. - Efficiency: Solutions should be optimized for both time and space within the constraints.","solution":"from typing import List def generate_permutations(elements: List[str]) -> List[List[str]]: def backtrack(start=0): if start == len(elements): result.append(elements[:]) for i in range(start, len(elements)): elements[start], elements[i] = elements[i], elements[start] backtrack(start + 1) elements[start], elements[i] = elements[i], elements[start] result = [] backtrack() return result"},{"question":"# Regular Expression Matching Implement a function `is_match` that performs regular expression matching with support for `.` and `*`. - `.` Matches any single character. - `*` Matches zero or more of the preceding element. The function should return `True` if the pattern `p` matches the entire input string `s`. Otherwise, it should return `False`. Function signature: ```python def is_match(s: str, p: str) -> bool: # Your code here ``` # Input - `s` : a string to be matched (1 ≤ len(s) ≤ 30) - `p` : a string pattern containing letters, `.` or `*` (1 ≤ len(p) ≤ 30) # Output - Returns a boolean value (`True` or `False`) indicating whether the pattern matches the entire input string. # Constraints - Ensure the implementation uses dynamic programming to achieve the required performance. - Handle edge cases, such as empty strings, patterns starting with `*`, and strings with non-wildcard characters. - Maintain an efficient memory footprint. # Example ```python is_match(\\"aa\\", \\"a\\") # returns False is_match(\\"aa\\", \\"aa\\") # returns True is_match(\\"aaa\\", \\"aa\\") # returns False is_match(\\"aa\\", \\"a*\\") # returns True is_match(\\"aa\\", \\".*\\") # returns True is_match(\\"ab\\", \\".*\\") # returns True is_match(\\"aab\\", \\"c*a*b\\") # returns True ``` # Scenario You are developing a filtering feature for an application and need to verify if user-uploaded text files adhere to a specified regular expression pattern. Implement the function to accurately determine if the entire input string matches the given pattern, ensuring your solution can handle all possible edge cases efficiently.","solution":"def is_match(s: str, p: str) -> bool: Returns true if the input string s matches the pattern p. # Create a DP table with False values initially dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)] dp[0][0] = True # empty pattern matches empty string # Fill in first row for patterns with * for j in range(1, len(p) + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 2] for i in range(1, len(s) + 1): for j in range(1, len(p) + 1): if p[j - 1] == \'.\' or p[j - 1] == s[i - 1]: dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == \'*\': dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] if (p[j - 2] == s[i - 1] or p[j - 2] == \'.\') else False) else: dp[i][j] = False return dp[len(s)][len(p)]"},{"question":"# Problem Description You are provided with a number of utility functions dealing with integers that require efficient computation of specific quantities. Using the provided utility functions `gcd_bit`, `lcm`, and `trailing_zero`, solve the following problem: Problem Statement Given an array of positive integers, you are required to compute two quantities: 1. The greatest common divisor (GCD) of all integers in the array using the bitwise `gcd_bit` function. 2. The least common multiple (LCM) of all integers in the array using the `lcm` function. Additionally, find how many trailing zeros are there in the binary representation of each integer using the `trailing_zero` function, and return these counts in a list. # Input Format - An integer `n` (1 ≤ n ≤ 1000), which is the number of integers. - An array of `n` positive integers `arr[i]` (1 ≤ arr[i] ≤ 10^9). # Output Format - Print a single integer which is the GCD of the array elements. - Print a single integer which is the LCM of the array elements. - Print a list of integers, where each element corresponds to the count of trailing zeros in the binary representation of each integer in the input array. # Constraints - The array will contain at least one element and at most 1000 elements. - Each element in the array is a positive integer not exceeding 1 billion. # Example Input ``` 4 10 20 30 40 ``` Output ``` 10 120 [1, 2, 1, 3] ``` Explanation - The GCD of [10, 20, 30, 40] using bitwise method is 10. - The LCM of [10, 20, 30, 40] using `lcm` function is 120. - The count of trailing zeros are [1, 2, 1, 3] respectively.","solution":"from math import gcd from functools import reduce def gcd_bit(a, b): Computes the greatest common divisor using bitwise operations. if b == 0: return a return gcd_bit(b, a % b) def lcm(a, b): Computes the least common multiple of a and b. return a * b // gcd(a, b) def trailing_zero(n): Counts the number of trailing zeros in the binary representation of n. count = 0 while (n & 1) == 0 and n != 0: count += 1 n = n >> 1 return count def gcd_of_list(arr): Computes the GCD of a list of numbers. return reduce(gcd_bit, arr) def lcm_of_list(arr): Computes the LCM of a list of numbers. return reduce(lcm, arr) def compute_statistics(n, arr): gcd_val = gcd_of_list(arr) lcm_val = lcm_of_list(arr) trailing_zeros = [trailing_zero(num) for num in arr] return gcd_val, lcm_val, trailing_zeros"},{"question":"You are given an array of integers which can include negative numbers. You need to sort this array using the Counting Sort algorithm. Implement the function `custom_counting_sort` which takes an array of integers as its input and returns the sorted array. # Function Signature: ```python def custom_counting_sort(arr: List[int]) -> List[int]: pass ``` # Input: - An array of integers `arr` where -1000 <= arr[i] <= 1000 (i.e., the input range is known and bounded). # Output: - A sorted array containing the same elements as `arr`. # Constraints: - The length of the array `arr` may vary from 0 to 10^5. # Example: ```python arr = [4, 2, -1, 3, 4, 1, 0, -2] custom_counting_sort(arr) # Output: [-2, -1, 0, 1, 2, 3, 4, 4] arr = [] custom_counting_sort(arr) # Output: [] arr = [-5, -1, -3, -2, -4] custom_counting_sort(arr) # Output: [-5, -4, -3, -2, -1] ``` # Notes: - Ensure that the solution is efficient to handle the upper constraint of n (10^5 elements). - Carefully handle edge cases involving negative numbers and empty arrays. - Focus on maintaining the stability of the sort.","solution":"def custom_counting_sort(arr): Sorts an array of integers which can include negative numbers using the Counting Sort algorithm. if not arr: return arr # Find the range of the input array min_val = min(arr) max_val = max(arr) # Create the count array count_range = max_val - min_val + 1 count = [0] * count_range # Store the count of each element for num in arr: count[num - min_val] += 1 # Reconstruct the sorted array sorted_index = 0 for i in range(count_range): while count[i] > 0: arr[sorted_index] = i + min_val sorted_index += 1 count[i] -= 1 return arr"},{"question":"# Word Segmentation Problem using Dynamic Programming Context You are given a non-empty string `s` and a dictionary `wordDict` containing a list of non-empty words. Your task is to determine if the string `s` can be segmented into a sequence of one or more dictionary words. This problem has significant applications in text processing where validating and tokenizing sentences against a known vocabulary is essential. Requirements Implement a function `word_break(s: str, wordDict: List[str]) -> bool` that returns `True` if the string can be segmented, and `False` otherwise. # Input - `s`: A non-empty string of length (1 leq |s| leq 1000). - `wordDict`: A list of non-empty strings representing the dictionary. You may assume the dictionary does not contain duplicate words and its length is (1 leq |wordDict| leq 1000). # Output - A boolean value `True` if the string can be segmented, `False` otherwise. # Constraints - Each word in the dictionary and the string `s` will consist of only lowercase English letters. Function Signature ```python def word_break(s: str, wordDict: List[str]) -> bool: ``` Example ```python # Example 1 s = \\"leetcode\\" wordDict = [\\"leet\\", \\"code\\"] assert word_break(s, wordDict) == True # Example 2 s = \\"applepenapple\\" wordDict = [\\"apple\\", \\"pen\\"] assert word_break(s, wordDict) == True # Example 3 s = \\"catsandog\\" wordDict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] assert word_break(s, wordDict) == False ``` # Constraints and Optimization - Ensure your solution uses dynamic programming for optimal efficiency. - Aim for a time complexity of O(N^2) and space complexity of O(N).","solution":"from typing import List def word_break(s: str, wordDict: List[str]) -> bool: Checks if the string s can be segmented into words found in wordDict. word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)]"},{"question":"Scenario You are given a project to create a tool that identifies all possible ways to combine a list of positive integers to meet a specific target sum. The tool should be flexible such that each number can be reused an unlimited number of times in the combination. This is particularly useful in financial applications where users want to break down a monetary target into allowable denominations repeatedly. Task Write a function `combination_sum` that takes a list of positive integers `candidates` and a positive integer `target` as input, and returns a list of all unique combinations where the candidate numbers sum to the target. Each candidate number in the list can be used multiple times in the combination. Function Signature ```python def combination_sum(candidates: List[int], target: int) -> List[List[int]]: pass ``` Input * `candidates` (List[int]): A list of distinct positive integers. * `target` (int): A positive integer representing the sum to be achieved by combining elements from `candidates`. Output * List[List[int]]: A list of lists, where each inner list is a unique combination of candidate numbers summing to `target`. Constraints * All numbers in the `candidates` list, as well as the `target`, are positive integers. * The solution set must not contain duplicate combinations. * The elements in each combination should be in non-descending order. Example ```python candidates = [2, 3, 6, 7] target = 7 # Expected output: # [ # [7], # [2, 2, 3] # ] ``` Performance Requirements * The implementation should be efficient enough to handle the exponential growth due to multiple combinations, and optimized to reduce unnecessary recursive calls. Write a clear and efficient solution using DFS with backtracking. Ensure to handle edge cases and optimize your code for performance.","solution":"from typing import List def combination_sum(candidates: List[int], target: int) -> List[List[int]]: def backtrack(remain, combo, start): if remain == 0: result.append(list(combo)) return elif remain < 0: return for i in range(start, len(candidates)): combo.append(candidates[i]) backtrack(remain - candidates[i], combo, i) combo.pop() result = [] candidates.sort() backtrack(target, [], 0) return result"},{"question":"Optimized Pathfinding Context: You are tasked with optimizing a set of pathfinding functions in a large-scale social network graph where users are nodes and their connections are edges. Objective: Implement an optimized version of the function `find_all_paths_with_length` that finds all paths between two nodes and returns only those paths that are of a specific length. Function Signature: ```python def find_all_paths_with_length(graph: Dict[str, List[str]], start: str, end: str, length: int) -> List[List[str]]: pass ``` Input: - `graph`: A dictionary representing the graph where keys are node IDs and values are lists of adjacent nodes. - `start`: The node ID for the starting point. - `end`: The node ID for the endpoint. - `length`: An integer representing the required path length. Output: - A list of lists, where each inner list is a valid path from `start` to `end` with exactly `length` nodes. Constraints: - Each node ID is a unique string with a length between `1` and `10`. - The graph is a directed acyclic graph (DAG) with up to `1000` nodes. - The `length` will be a positive integer and will not exceed `100`. Performance Requirements: - Your function should be optimized to handle the constraint of `1000` nodes efficiently. - Minimize recursion depth and optimize to prevent unnecessary computations. Example: ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'C\', \'D\'], \'C\': [\'D\'], \'D\': [\'E\'], \'E\': [] } start = \'A\' end = \'D\' length = 3 # Paths from A to D of length 3: # [[\'A\', \'B\', \'C\', \'D\'], [\'A\', \'C\', \'B\', \'D\']] print(find_all_paths_with_length(graph, start, end, length)) ``` Output: ``` [[\'A\', \'B\', \'C\', \'D\']] ``` Tips: - Consider edge cases such as the `start` being the same as `end` or the graph being empty. - Ensure you handle cycles gracefully, even though it’s a DAG.","solution":"def find_all_paths_with_length(graph, start, end, length): def dfs(current_node, path): if len(path) > length + 1: return if current_node == end and len(path) == length + 1: result.append(path) return for neighbor in graph.get(current_node, []): dfs(neighbor, path + [neighbor]) result = [] dfs(start, [start]) return result"},{"question":"# Jump Search Coding Assessment Question **Context**: You have been provided with a sorted list of numbers and a target number. Your objective is to implement the Jump Search algorithm to efficiently locate the target number within the list. This task will test your understanding of efficient searching in sorted arrays. **Task**: Implement the function `jump_search(arr, target)` as defined below: ```python def jump_search(arr, target): Search for target in a sorted list using the Jump Search algorithm. Parameters: arr (list of int): A sorted list of integers. target (int): The integer to search for. Returns: int: The index of the target in the list if found, otherwise -1. Note: - The list is always sorted in ascending order. - If the target is present more than once, return the index of the first occurrence. ``` **Input Constraints**: * The length of the list `arr` will be between 1 and 10^6. * Each element in `arr` will be an integer between -10^9 and 10^9. * The target is guaranteed to be within the range of list elements but might not be present. **Output**: Return the index of the target if found; otherwise, return -1. **Examples**: ```python # Example 1 arr = [1, 3, 5, 7, 9, 11, 13, 15] target = 7 # The target 7 is in index 3 print(jump_search(arr, target)) # Output: 3 # Example 2 arr = [1, 3, 5, 7, 9, 11, 13, 15] target = 2 # The target 2 is not present in the array print(jump_search(arr, target)) # Output: -1 # Example 3 arr = [] target = 10 # The array is empty print(jump_search(arr, target)) # Output: -1 ``` Make sure your solution is efficient enough to handle large lists within reasonable time limits.","solution":"import math def jump_search(arr, target): Search for target in a sorted list using the Jump Search algorithm. Parameters: arr (list of int): A sorted list of integers. target (int): The integer to search for. Returns: int: The index of the target in the list if found, otherwise -1. n = len(arr) if n == 0: return -1 # Finding the block size to jump step = int(math.sqrt(n)) # Finding the block where the target may be present prev = 0 while arr[min(step, n) - 1] < target: prev = step step += int(math.sqrt(n)) if prev >= n: return -1 # Doing a linear search within the block while arr[prev] < target: prev += 1 # If we reached next block or end of the array # the element is not present if prev == min(step, n): return -1 # If element is found if arr[prev] == target: return prev return -1"},{"question":"# Binary Tree In-Order Traversal Objective: Write a function `custom_inorder` that performs an in-order traversal on a binary tree using recursion and returns a list of node values. Your function should demonstrate a thorough understanding of traversal algorithms and manage any edge cases appropriately. # Function Signature: ```python def custom_inorder(root: Node) -> list: pass ``` Input: - `root (Node)`: The root node of the binary tree. Output: - `list`: A list of integers representing the in-order traversal of the tree. Constraints: - The tree can have up to 10,000 nodes. - Node values are unique integers. Performance Requirements: Your solution should have: - Time complexity: O(n) - Space complexity: O(h) where h is the height of the tree. Example: Consider the binary tree represented as: ``` 100 / 50 150 / / 25 75 125 175 ``` - Input: `root` (reference to node 100) - Output: `[25, 50, 75, 100, 125, 150, 175]` # Scenario: Imagine you are developing a library for handling various binary tree operations. One of the core operations is traversing the tree in-order to retrieve all node values in sorted order. Implement the `custom_inorder` function as part of this library to provide users an efficient traversal capability.","solution":"class Node: def __init__(self, key): self.data = key self.left = None self.right = None def custom_inorder(root: Node) -> list: Performs an in-order traversal on a binary tree using recursion and returns a list of node values. def inorder_traversal(node): if node is None: return [] return inorder_traversal(node.left) + [node.data] + inorder_traversal(node.right) return inorder_traversal(root)"},{"question":"**Scenario** You are tasked with writing a function to determine how many times a given string A must be repeated for another string B to appear as a substring within the repeated version of A. **Function Signature** ```python def repeated_string_match(A: str, B: str) -> int: pass ``` **Input/Output Format** - **Input**: Two strings A and B, where `1 <= len(A), len(B) <= 10000`. - **Output**: An integer representing the minimum number of times A must be repeated for B to be a substring of it. If no such solution exists, return -1. **Constraints** - The length of A and B will be between 1 and 10000. - The function should handle large strings efficiently. **Example** ```python assert repeated_string_match(\\"abcd\\", \\"cdabcdab\\") == 3 # \\"abcdabcdabcd\\" contains \\"cdabcdab\\" assert repeated_string_match(\\"aaaa\\", \\"aa\\") == 1 # \\"aaaa\\" contains \\"aa\\" assert repeated_string_match(\\"abc\\", \\"xyz\\") == -1 # No number of repetitions can contain \\"xyz\\" ``` **Notes**: - Consider all possible edge cases, such as when A and B are of different lengths or when B cannot be a substring of any repeated version of A. - Optimize the function to handle strings up to the maximum length constraint efficiently.","solution":"def repeated_string_match(A: str, B: str) -> int: Determine the minimum number of times A must be repeated for B to be a substring of it. If no such solution exists, return -1. # Get lengths of A and B lenA = len(A) lenB = len(B) # Minimum number of times A needs to be repeated # to potentially contain B is lenB // lenA rounded up max_repeats = -(-lenB // lenA) # This is equivalent to math.ceil(lenB / lenA) # Check if B is a substring for i in range(2): repeated_A = A * (max_repeats + i) if B in repeated_A: return max_repeats + i return -1"},{"question":"# Problem Description: You are given an array of integers \'nums\' and a non-negative integer \'k\'. Your task is to write a function `rotate_array(nums, k)` that rotates the array to the right by \'k\' steps in-place. For the context of this problem, in-place means you should not use any extra array or storage for rotation. # Function Signature: ```python def rotate_array(nums: List[int], k: int) -> None: pass ``` # Input: * A list of integers \'nums\' (1 ≤ len(nums) ≤ 10^5, -10^9 ≤ nums[i] ≤ 10^9). * A non-negative integer \'k\' (0 ≤ k ≤ 10^9). # Output: * Modify the input list \'nums\' to reflect the rotated array. * The function does not need to return a value. # Constraints: * You must perform the rotation in-place with O(1) extra memory. * Optimize your solution to handle scenarios where k is larger than the length of the array. # Example: ```python nums = [1, 2, 3, 4, 5, 6, 7] k = 3 rotate_array(nums, k) print(nums) # Output should be: [5, 6, 7, 1, 2, 3, 4] ``` # Explanation: Rotate the elements of the array [1, 2, 3, 4, 5, 6, 7] to the right by 3 steps results in [5, 6, 7, 1, 2, 3, 4]. The element originally at index 0 moves to index 3, the element at index 5 moves to index 1, and so on. Your implementation should ensure efficient handling of large inputs and reduce unnecessary space or time complexities by directly modifying the input list in-place.","solution":"from typing import List def rotate_array(nums: List[int], k: int) -> None: Rotates the array to the right by k steps in-place. n = len(nums) k = k % n # Calculate modulo to handle k greater than the length of nums # Reverse the entire array nums.reverse() # Reverse the first k elements nums[:k] = reversed(nums[:k]) # Reverse the remaining elements nums[k:] = reversed(nums[k:])"},{"question":"# Graph Path Existence Check Objective You are tasked with extending the `DirectedGraph` class to include a method for checking the existence of a path between two nodes. This will require you to implement a function that determines whether there exists a directed path from a given source node to a target node. Problem Description Add a method `has_path` to the `DirectedGraph` class. This method should determine whether there is a path from node `source` to node `target` using depth-first search (DFS). Input 1. **Source Node**: A string representing the name of the starting node. 2. **Target Node**: A string representing the name of the destination node. The graph nodes and edges are defined as per the provided `DirectedGraph` implementation. Output - Return `True` if there exists a path from the source node to the target node. - Return `False` otherwise. Constraints - Assume node names are unique. - The graph can be disconnected. - The source and target nodes are guaranteed to exist in the graph. Example Given the following edges: - A -> B - B -> C - C -> D - E -> F **Input**: `source = \\"A\\"`, `target = \\"D\\"` **Output**: `True` **Input**: `source = \\"A\\"`, `target = \\"F\\"` **Output**: `False` Implementation Include any necessary imports and utility functions within the provided method. ```python class DirectedGraph: # Existing implementation... def has_path(self, source, target): # Write your code here pass ```","solution":"class DirectedGraph: def __init__(self): self.graph = {} def add_node(self, node): if node not in self.graph: self.graph[node] = [] def add_edge(self, from_node, to_node): if from_node not in self.graph: self.add_node(from_node) if to_node not in self.graph: self.add_node(to_node) self.graph[from_node].append(to_node) def has_path(self, source, target): visited = set() def dfs(node): if node == target: return True visited.add(node) for neighbor in self.graph[node]: if neighbor not in visited: if dfs(neighbor): return True return False return dfs(source)"},{"question":"# Union-Find (Disjoint Set Union) Application Question: **Context**: A network of computers is connected and you need to ensure that the network can dynamically handle addition of new connections or nodes without excessive computational overhead. Problem Statement: You are given an initial configuration of a computer network represented as an undirected graph. Nodes in the graph represent computers, and edges represent direct connections between them. You need to perform the following operations efficiently: 1. **Add a computer** to the network. 2. **Connect two computers** by adding a direct connection between them. 3. **Check the connectivity** between any two given computers to determine if they are part of the same network. These operations should be efficiently managed using the Union-Find (Disjoint Set Union) data structure. Function Signatures: You need to implement a class `Network` with the following methods: - `add_computer(computer_id: int) -> None`: Adds a new computer to the network. - `connect(computer1_id: int, computer2_id: int) -> None`: Connects two computers directly. - `query(computer1_id: int, computer2_id: int) -> bool`: Queries if two computers are currently in the same network (i.e., in the same connected component). Input and Output: - `add_computer` will add a new computer with a unique integer ID. - `connect` will connect two existing computers by their IDs. - `query` will return `True` if the two specified computers are connected, otherwise `False`. **Constraints**: - Computer IDs will be positive integers. - Each computer can be added only once. - Connections between computers are undirected. **Example**: ```python network = Network() # Add computers network.add_computer(1) network.add_computer(2) network.add_computer(3) # Connect computers network.connect(1, 2) network.connect(2, 3) # Query connectivity print(network.query(1, 3)) # Output: True print(network.query(1, 4)) # Output: False ``` **Your task** is to define the `Network` class and implement its methods to satisfy the above requirements.","solution":"class Network: def __init__(self): self.parent = {} self.rank = {} def add_computer(self, computer_id: int) -> None: if computer_id not in self.parent: self.parent[computer_id] = computer_id self.rank[computer_id] = 0 def find(self, computer_id): if self.parent[computer_id] != computer_id: self.parent[computer_id] = self.find(self.parent[computer_id]) return self.parent[computer_id] def union(self, computer1_id, computer2_id): root1 = self.find(computer1_id) root2 = self.find(computer2_id) if root1 != root2: if self.rank[root1] > self.rank[root2]: self.parent[root2] = root1 elif self.rank[root1] < self.rank[root2]: self.parent[root1] = root2 else: self.parent[root2] = root1 self.rank[root1] += 1 def connect(self, computer1_id: int, computer2_id: int) -> None: self.union(computer1_id, computer2_id) def query(self, computer1_id: int, computer2_id: int) -> bool: if computer1_id in self.parent and computer2_id in self.parent: return self.find(computer1_id) == self.find(computer2_id) else: return False"},{"question":"Coding Assessment Question # Simplify Unix Path Given an absolute path for a file in a Unix-style file system, write a function to simplify it. The input path is guaranteed to start with \\"/\\" and contain only valid characters. # Function Signature ```python def simplify_path(path: str) -> str: ``` # Input - `path`: A string representing the absolute file path (1 ≤ `len(path)` ≤ 3000). # Output - Return the canonical path which simplifies the given path. # Constraints - The output path should not end with a slash unless it\'s the root `/`. - Multiple consecutive \'/\' should be resolved to a single \'/\'. - A single dot \'.\' should be ignored. - Double dots \\"..\\" should move up one directory if possible. # Example Example 1: ```python path = \\"/home/\\" output = \\"/home\\" ``` Example 2: ```python path = \\"/a/./b/../../c/\\" output = \\"/c\\" ``` Example 3: ```python path = \\"/../\\" output = \\"/\\" ``` Example 4: ```python path = \\"/home//foo/\\" output = \\"/home/foo\\" ``` Example 5: ```python path = \\"/a/../../b/../c//.//\\" output = \\"/c\\" ``` # Guideline Write a function to solve this problem using a stack to manage directory names after splitting the path by \'/\'. Ensure the function handles all special cases such as multiple slashes, current and parent directory symbols.","solution":"def simplify_path(path: str) -> str: Simplifies a given Unix-style absolute path. :param path: An absolute file path (1 ≤ len(path) ≤ 3000) :return: The canonical path which simplifies the given path. # Split the input path by \'/\' and ignore empty segments parts = [part for part in path.split(\'/\') if part and part != \'.\'] stack = [] for part in parts: if part == \'..\': # \'..\' means go up to the parent directory, pop from the stack if possible if stack: stack.pop() else: # Otherwise, we should add the directory to the stack stack.append(part) # Join all parts with \'/\' to form the simplified canonical path return \'/\' + \'/\'.join(stack)"},{"question":"# Question: Implement a Basic Binary Search Tree Scenario: You are a software engineer responsible for implementing a basic Binary Search Tree (BST) for quick data lookup and manipulation. Given the following TreeNode structure, implement a BST that supports insertion, search, and in-order traversal operations. TreeNode Structure: ```python class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None ``` Instructions: 1. Implement a class `BinarySearchTree` with the following methods: * `insert(val: int) -> None`: Inserts a value into the BST. * `search(val: int) -> bool`: Searches for a value in the BST, returning `True` if found, else `False`. * `in_order_traversal() -> [int]`: Returns a list of values resulting from an in-order traversal of the BST. 2. Assumptions: * Values stored in the tree are unique integers. * The BST will not be empty when executing in_order_traversal and search methods. 3. Constraints: * The input values for insertion and search will always be integers within the range of 0 to 10^6. 4. Performance Requirements: * Aim to maintain O(log n) time complexity for average-case insertions and searches. Example: ```python # Example usage: bst = BinarySearchTree() bst.insert(5) bst.insert(3) bst.insert(7) print(bst.search(3)) # True print(bst.search(10)) # False print(bst.in_order_traversal()) # [3, 5, 7] ``` Add your implementation of the BinarySearchTree class below. ```python class BinarySearchTree: def __init__(self): self.root = None def insert(self, val: int) -> None: # Your implementation here pass def search(self, val: int) -> bool: # Your implementation here pass def in_order_traversal(self) -> [int]: # Your implementation here pass ```","solution":"class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None def insert(self, val: int) -> None: if self.root is None: self.root = TreeNode(val) else: self._insert(self.root, val) def _insert(self, node: TreeNode, val: int) -> None: if val < node.val: if node.left is None: node.left = TreeNode(val) else: self._insert(node.left, val) else: if node.right is None: node.right = TreeNode(val) else: self._insert(node.right, val) def search(self, val: int) -> bool: return self._search(self.root, val) def _search(self, node: TreeNode, val: int) -> bool: if node is None: return False if val == node.val: return True elif val < node.val: return self._search(node.left, val) else: return self._search(node.right, val) def in_order_traversal(self) -> [int]: result = [] self._in_order_traversal(self.root, result) return result def _in_order_traversal(self, node: TreeNode, result: [int]) -> None: if node is not None: self._in_order_traversal(node.left, result) result.append(node.val) self._in_order_traversal(node.right, result)"},{"question":"Cycle Sort Implementation Enhancement Context: Cycle Sort is a unique sorting algorithm that minimizes write operations by placing each element directly to its correct position in a cyclic manner. This characteristic makes it particularly useful in systems where write operations are costly. However, it operates with O(N^2) time complexity, making it inefficient for large datasets. We will explore an enhanced version of Cycle Sort that can handle a specific type of input efficiently but retains the core principles of cycle sorting. Problem Statement: Design an enhanced version of the `cycle_sort` function that can efficiently sort a nearly sorted array. A nearly sorted array is an array where each element is at most `k` positions away from its target position in the sorted array. Function Signature: ```python def enhanced_cycle_sort(arr: List[int], k: int) -> List[int]: pass ``` Input: * `arr`: A list of integers that is nearly sorted. * `k`: An integer indicating that in the nearly sorted array, each element is at most `k` positions away from its target position. Output: * The function should return the sorted list of integers. Constraints: * The length of the array `n` is between 1 and 10^5. * `k` is an integer between 1 and 50. Performance Requirements: * Optimize the cycle sort to handle nearly sorted arrays, improving upon the O(N^2) complexity for this specific case. Example: ```python arr = [2, 6, 3, 12, 56, 8] k = 3 print(enhanced_cycle_sort(arr, k)) # Output: [2, 3, 6, 8, 12, 56] ``` Guidance: * Incorporate the principles of Cycle Sort but leverage the property of the nearly sorted array to boost performance. * Consider using a min-heap or another efficient data structure to manage the elements within the `k`-distance efficiently.","solution":"from typing import List import heapq def enhanced_cycle_sort(arr: List[int], k: int) -> List[int]: Sorts a nearly sorted array where each element is at most k positions away from its target position using an enhanced cycle sort with min-heap. n = len(arr) # Create a min heap with the first `k+1` elements. heap = arr[:k+1] heapq.heapify(heap) target_index = 0 for i in range(k+1, n): arr[target_index] = heapq.heappop(heap) heapq.heappush(heap, arr[i]) target_index += 1 while heap: arr[target_index] = heapq.heappop(heap) target_index += 1 return arr"},{"question":"# Graph Traversal Assessment Objective Implement a function to determine the shortest path between two nodes in an unweighted graph using Breadth First Search (BFS). You may assume that the graph is represented using an adjacency list. Specifications * **Input**: * `graph`: A dictionary representing an unweighted graph, where keys are node labels and values are lists of adjacent nodes. * `start`: The starting node for the path. * `end`: The destination node for the path. * **Output**: * A list containing the shortest path from `start` to `end`, including both. If no path exists, return an empty list. * **Constraints**: * The graph may contain cycles and self-loops. * Nodes are represented as integers or strings. * The graph can be disconnected; ensure to handle such cases. * **Performance Requirements**: * Time Complexity: The solution should run in O(V + E) time. * Space Complexity: The auxiliary space used should be O(V). Example ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\'] } start = \'A\' end = \'F\' shortest_path(graph, start, end) # Expected Output: [\'A\', \'C\', \'F\'] or [\'A\', \'B\', \'E\', \'F\'] ``` Additional Information To assist you in handling the problem effectively, consider the following: - Utilize a queue to maintain the frontier of the next nodes to explore. - Keep track of the previous node for each visited node to reconstruct the path once the destination is reached.","solution":"from collections import deque def shortest_path(graph, start, end): Find the shortest path between start and end nodes in an unweighted graph. if start not in graph or end not in graph: return [] queue = deque([start]) predecessors = {start: None} while queue: current = queue.popleft() if current == end: break for neighbor in graph[current]: if neighbor not in predecessors: queue.append(neighbor) predecessors[neighbor] = current if end not in predecessors: return [] path = [] curr_node = end while curr_node is not None: path.append(curr_node) curr_node = predecessors[curr_node] path.reverse() return path"},{"question":"# Question: Unique Character Filter Context In data processing, it is common to clean up data by removing duplicate entries. This necessity often extends to strings, where we might want to retain only the first occurrence of each character. This problem simulates such a scenario, where you need to write a function that takes an input string and returns a version of that string with all duplicate characters removed, preserving the order of their first occurrence. Task Implement a function `filter_unique_characters(s: str) -> str` that takes a single string `s` and returns a new string with all duplicate characters removed. The function must preserve the order of the first occurrence of each character. Input & Output Formats * **Input**: * A single string `s` with length 0 <= len(s) <= 10^5. * The string `s` consists of printable ASCII characters. * **Output**: * A single string with duplicate characters removed, maintaining the order of their first occurrence. Constraints * The function should handle input strings of varying lengths efficiently. * Ensure the solution has a time complexity of O(n). Examples 1. `filter_unique_characters(\\"google\\")` -> \\"gole\\" 2. `filter_unique_characters(\\"abacad\\")` -> \\"abcd\\" 3. `filter_unique_characters(\\"aabbcc\\")` -> \\"abc\\" 4. `filter_unique_characters(\\"\\")` -> \\"\\" Performance Requirements * The solution should work efficiently even for strings close to the maximum length constraint.","solution":"def filter_unique_characters(s: str) -> str: Returns a new string with all duplicate characters removed, preserving the order of their first occurrence. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"# Scenario You are tasked with developing a text editor feature that supports undo operations. To efficiently manage the undo feature, you decide to use a doubly linked list to keep track of text states. You need to implement this linked list along with several operations to meet the requirements. # Task Implement a `DoublyLinkedList` class that supports the following methods: - `append(value)`: Adds a new node with the given value to the end of the list. - `prepend(value)`: Adds a new node with the given value to the beginning of the list. - `delete(value)`: Deletes the first node with the given value. - `find(value)`: Returns the node with the given value. - `to_list()`: Returns a list of the values in the linked list from head to tail. # Constraints - Values are integers within the range -1000 to 1000. - Operations should handle well with edge cases such as empty lists and single element lists. # Input/Output Formats - Input: - The `append`, `prepend`, `delete`, and `find` methods take a single integer as their argument. - The `to_list` method takes no arguments. - Output: - The `find` method returns a `DoublyLinkedListNode` or `None` if not found. - The `to_list` method returns a list of integer values. # Example ```python dll = DoublyLinkedList() dll.append(1) dll.append(2) dll.append(3) dll.prepend(0) dll.delete(2) node = dll.find(3) print(node.value) # Output: 3 print(dll.to_list()) # Output: [0, 1, 3] ``` **Good Luck!**","solution":"class DoublyLinkedListNode: def __init__(self, value=None): self.value = value self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None self.tail = None def append(self, value): new_node = DoublyLinkedListNode(value) if self.head is None: # If list is empty self.head = new_node self.tail = new_node else: self.tail.next = new_node new_node.prev = self.tail self.tail = new_node def prepend(self, value): new_node = DoublyLinkedListNode(value) if self.head is None: # If list is empty self.head = new_node self.tail = new_node else: new_node.next = self.head self.head.prev = new_node self.head = new_node def delete(self, value): current = self.head while current: if current.value == value: if current.prev: current.prev.next = current.next else: self.head = current.next # Update head if needed if current.next: current.next.prev = current.prev else: self.tail = current.prev # Update tail if needed return current = current.next def find(self, value): current = self.head while current: if current.value == value: return current current = current.next return None def to_list(self): values = [] current = self.head while current: values.append(current.value) current = current.next return values"},{"question":"You are given a `TreeNode` class representing a node in a binary tree, and two functions, `serialize` and `deserialize`, for converting the tree to and from a string representation. Your task is to: 1. Implement a function, `find_target(root, k)`, that determines if there are two elements in a Binary Search Tree (BST) whose sum equals a given target. # Function Signature ```python def find_target(root: TreeNode, k: int) -> bool: ``` # Input * `root`: The root node of the BST (of type `TreeNode`). * `k`: An integer, the target sum. # Output * Return `True` if there are two elements in the BST that add up to `k`, otherwise return `False`. # Constraints * The number of nodes in the tree is in the range [1, 10^4]. * The value of each node is in the range [-10^4, 10^4]. * The tree need not be balanced but will function as a Binary Search Tree. # Example ```python # Example 1 root = TreeNode(5) root.left = TreeNode(3) root.right = TreeNode(6) root.left.left = TreeNode(2) root.left.right = TreeNode(4) root.right.right = TreeNode(7) result = find_target(root, 9) print(result) # Output: True (5 + 4 = 9) # Example 2 result = find_target(root, 28) print(result) # Output: False ``` # Guidelines * You should consider the BST properties to optimize the search for two elements that sum to the target. * Do not use any additional helper libraries. * Ensure your solution runs efficiently for large trees within the specified constraints. # Performance Requirements * Time Complexity: O(n), where n is the number of nodes in the tree. * Space Complexity: O(n), due to the usage of a hash set to store visited nodes\' values.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_target(root, k): def inorder_traversal(node, elements): if not node: return False if inorder_traversal(node.left, elements): return True if (k - node.val) in elements: return True elements.add(node.val) return inorder_traversal(node.right, elements) elements = set() return inorder_traversal(root, elements)"},{"question":"Scenario You are working on a grid-based game where different cells represent either walls, gates, or empty rooms. You need to ensure that each empty room displays the shortest distance to the nearest gate. If an empty room is unreachable from any gate, it should remain marked as infinity. Task Write a function `walls_and_gates(rooms)` that fills each empty room in a 2D grid with the distance to its nearest gate. If it is impossible to reach a gate, it should remain filled with `INF`. Input * A 2D list `rooms` where: * `rooms[i][j] == -1` represents a wall or obstacle. * `rooms[i][j] == 0` represents a gate. * `rooms[i][j] == INF` (2147483647) represents an empty room. Output The function should update the input grid `rooms` to reflect the shortest distance from each empty room to the nearest gate. Example ```python rooms = [ [2147483647, -1, 0, 2147483647], [2147483647, 2147483647, 2147483647, -1], [2147483647, -1, 2147483647, -1], [0, -1, 2147483647, 2147483647] ] walls_and_gates(rooms) # The grid should be updated to: # [ # [3, -1, 0, 1], # [2, 2, 1, -1], # [1, -1, 2, -1], # [0, -1, 3, 4] # ] ``` Constraints * The grid dimensions are m x n where 1 <= m, n <= 200. * The number of gates is at least one and there can be at most 10,000 gates. You are encouraged to optimize for time complexity as much as possible. Consider alternative traversal methods (e.g., BFS) and justify your choice.","solution":"from collections import deque INF = 2147483647 def walls_and_gates(rooms): Fills each empty room (INF) with the distance to the nearest gate. If unreachable, the room stays as INF. if not rooms or not rooms[0]: return m, n = len(rooms), len(rooms[0]) queue = deque() for i in range(m): for j in range(n): if rooms[i][j] == 0: queue.append((i, j)) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and rooms[nx][ny] == INF: rooms[nx][ny] = rooms[x][y] + 1 queue.append((nx, ny))"},{"question":"You are given an array of integers and tasked with sorting it using Exchange Sort. However, instead of implementing the basic version, you are required to optimize it by incorporating an early exit optimization, which stops the algorithm if the array becomes sorted before completing all passes. # Function Signature ```python def optimized_exchange_sort(arr: List[int]) -> List[int]: pass ``` # Input - `arr`: A list of integers (0 <= length of `arr` <= 10^3, elements can be positive or negative). # Output - Returns a list of integers, sorted in ascending order. # Constraint - You must implement the optimization for early exit. # Example ```python assert optimized_exchange_sort([4, 2, 5, 1]) == [1, 2, 4, 5] assert optimized_exchange_sort([]) == [] assert optimized_exchange_sort([7, 9, 11, 13, 15]) == [7, 9, 11, 13, 15] assert optimized_exchange_sort([1, 2, 2, 1, 3]) == [1, 1, 2, 2, 3] ``` # Explanation - In the first example, the function sorts the array `[4, 2, 5, 1]` to `[1, 2, 4, 5]`. - The function should efficiently handle an already sorted array or array with identical elements without unnecessary iterations.","solution":"from typing import List def optimized_exchange_sort(arr: List[int]) -> List[int]: Sorts an array of integers using an optimized version of exchange sort with early exit. n = len(arr) if n <= 1: return arr for i in range(n-1): swapped = False for j in range(n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break return arr"},{"question":"# Segment Tree: Implementation and Application Objective You are required to implement a data structure that efficiently supports range queries and point updates on an array. The Segment Tree allows querying and updating information on segments of the array according to a commutative function. Task Implement the Segment Tree from scratch with the following operations: 1. **Construction**: Build the tree from an initial array and a commutative function. 2. **Update**: Update the value of an element. 3. **Range Query**: Perform a range query based on the commutative function. Specifications # Class `SegmentTree` * **__init__(self, arr, function):** * `arr`: A list of elements to build the segment tree from. * `function`: A commutative function that combines two elements. * Initializes the segment tree and builds it. * **build_tree(self):** * Constructs the internal segment tree. * **update(self, p, v):** * `p`: Index of the element to update. * `v`: New value to set at index `p`. * Updates the value at index `p` and propagates the changes in the tree. * **query(self, l, r):** * `l`: Left index of the range (inclusive). * `r`: Right index of the range (inclusive). * Returns the result of the commutative function applied over the range `[l, r]`. Input * The initial array used to build the segment tree. * A series of update and query operations. Output * For each query, return the result of the function executed over the range. Constraints * 1 <= len(arr) <= 10^5 * The function used must be commutative (e.g., max, sum, min). Example ```python # Example 1: Using max function mytree = SegmentTree([2, 4, 5, 3, 4], max) print(mytree.query(2, 4)) # Output: 5 mytree.update(3, 6) print(mytree.query(0, 3)) # Output: 6 # Example 2: Using sum function mytree = SegmentTree([4, 5, 2, 3, 4, 43, 3], lambda a, b: a + b) print(mytree.query(0, 6)) # Output: 64 mytree.update(2, -10) print(mytree.query(0, 6)) # Output: 52 # Example 3: Using tuple addition function mytree = SegmentTree([(1, 2), (4, 6), (4, 5)], lambda a, b: (a[0] + b[0], a[1] + b[1])) print(mytree.query(0, 2)) # Output: (9, 13) mytree.update(2, (-1, 2)) print(mytree.query(0, 2)) # Output: (4, 10) ```","solution":"class SegmentTree: def __init__(self, arr, function): self.n = len(arr) self.function = function self.tree = [None] * (2 * self.n) # Initialize the tree for i in range(self.n): self.tree[self.n + i] = arr[i] self.build_tree() def build_tree(self): for i in range(self.n - 1, 0, -1): self.tree[i] = self.function(self.tree[i << 1], self.tree[i << 1 | 1]) def update(self, p, v): p += self.n self.tree[p] = v while p > 1: p >>= 1 self.tree[p] = self.function(self.tree[p << 1], self.tree[p << 1 | 1]) def query(self, l, r): res = None l += self.n r += self.n while l <= r: if l & 1: res = self.tree[l] if res is None else self.function(res, self.tree[l]) l += 1 if not (r & 1): res = self.tree[r] if res is None else self.function(res, self.tree[r]) r -= 1 l >>= 1 r >>= 1 return res"},{"question":"# Question: Given the initial implementation of the Merge Sort algorithm and its core `merge` helper function, you are tasked to implement an optimized version of the Merge Sort that minimizes memory usage for large datasets by modifying the traditional merging process. Instead of using an additional array for merging, try to merge in-place to save space. # Function Signature: ```python def optimized_merge_sort(arr: List[int]) -> List[int]: pass ``` # Input: * `arr` - A list of integers that needs to be sorted. (0 <= len(arr) <= 10^6) # Output: * Return the sorted list of integers. # Constraints: * Do not use additional temporary arrays in either the `merge_sort` or `merge` functions. * Ensure the algorithm remains O(n log n) time complexity. * Handle all edge cases gracefully. # Example: ```python # Example 1: arr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5] # Output: [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9] # Example 2: arr = [5, 2, 4, 6, 1, 3] # Output: [1, 2, 3, 4, 5, 6] # Example 3: arr = [] # Output: [] # Example 4: arr = [1] # Output: [1] ``` # Notes: * Discuss any assumptions you make. * Breakdown your approach step-by-step before jumping into implementation. * Ensure that your solution is robust and can handle an array of maximum length efficiently.","solution":"def optimized_merge_sort(arr): Sorts an array in-place using a bottom-up merge sort approach to minimize memory usage. def merge(arr, left, mid, right): start1 = left end1 = mid start2 = mid + 1 end2 = right # In-place merge of sorted subarrays while start1 <= end1 and start2 <= end2: if arr[start1] <= arr[start2]: start1 += 1 else: value = arr[start2] index = start2 while index != start1: arr[index] = arr[index - 1] index -= 1 arr[start1] = value start1 += 1 end1 += 1 start2 += 1 # Bottom-up merge sort n = len(arr) curr_size = 1 while curr_size < n: left_start = 0 while left_start < n - 1: mid = min((left_start + curr_size - 1), (n - 1)) right_end = min((2 * curr_size + left_start - 1), (n - 1)) merge(arr, left_start, mid, right_end) left_start += 2 * curr_size curr_size *= 2 return arr # Example usage print(optimized_merge_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])) # [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9] print(optimized_merge_sort([5, 2, 4, 6, 1, 3])) # [1, 2, 3, 4, 5, 6] print(optimized_merge_sort([])) # [] print(optimized_merge_sort([1])) # [1]"},{"question":"# Combination Calculation with Efficient Memory Usage You are tasked with developing an optimized version of the combination function to calculate the number of ways to choose `r` items from `n` items using a dynamic programming approach. The primary goal is to reduce memory usage while maintaining or improving calculation efficiency. Function Signature: ```python def combination_optimized(n: int, r: int) -> int: pass ``` Input - `n` (integer): Number of total items (`0 <= n <= 10^3`). - `r` (integer): Number of chosen items (`0 <= r <= n`). Output - Returns an integer representing the number of ways to choose `r` items from `n` items. Constraints - `0 <= n <= 1000` - `0 <= r <= n` Examples: 1. `combination_optimized(5, 2)` should return `10` 2. `combination_optimized(6, 3)` should return `20` 3. `combination_optimized(1000, 500)` should complete without excessive memory consumption or long delays. Notes: - You are expected to implement a solution that avoids the inefficiencies of the basic recursive method and addresses the memory concerns of the memoized method. - Use a bottom-up dynamic programming approach to fill the values iteratively. - Consider optimizing memory usage by using only a single array of size `r+1` instead of a 2D table.","solution":"def combination_optimized(n: int, r: int) -> int: if r > n: return 0 if r == 0 or r == n: return 1 # Using a single array to store intermediate values. C = [0] * (r + 1) C[0] = 1 # Base case for i in range(1, n + 1): # Compute next row of pascal triangle using current row j = min(i, r) while j > 0: C[j] = C[j] + C[j - 1] j -= 1 return C[r]"},{"question":"# Question: Optimal Path for Package Delivery Scenario Imagine you are tasked with designing a delivery system for a city\'s package delivery service. The city is represented as a graph, with intersections being the vertices and roads in between being the weighted edges. Every road weight represents a distance or time taken to travel that road. Your job is to develop a program that can determine the shortest path from the delivery depot (represented as the source vertex) to all other intersections in the city. Task Implement Dijkstra\'s algorithm to find the shortest paths from a given source vertex to all other vertices in a graph. The graph is represented using an adjacency matrix. Input 1. An integer `n`, representing the number of vertices in the graph. 2. An `n x n` list of list, `graph`, where `graph[i][j]` holds the weight of the edge from vertex `i` to vertex `j` (0 if no edge exists). Positive weights represent valid paths. 3. An integer `src`, representing the source vertex. Output Return a list of distances where the `i-th` element represents the shortest distance from the source to vertex `i`. Constraints * `1 <= n <= 100` * The graph will be a directed graph. * The weights of the edges will be non-negative integers. * Any vertex can be the source. Function Signature ```python def dijkstra_shortest_path(n: int, graph: List[List[int]], src: int) -> List[int]: pass ``` Example ```python # Input: n = 5 graph = [ [0, 10, 0, 5, 0], [0, 0, 1, 2, 0], [0, 0, 0, 0, 4], [0, 3, 9, 0, 2], [7, 0, 6, 0, 0] ] src = 0 # Output: # [0, 8, 9, 5, 7] ``` Explanation The shortest paths from vertex 0 to all other vertices are calculated using Dijkstra\'s algorithm: * Distance to vertex 1 is 8 (`0 -> 3 -> 1`) * Distance to vertex 2 is 9 (`0 -> 3 -> 1 -> 2`) * Distance to vertex 3 is 5 (`0 -> 3`) * Distance to vertex 4 is 7 (`0 -> 3 -> 4`)","solution":"import heapq from typing import List def dijkstra_shortest_path(n: int, graph: List[List[int]], src: int) -> List[int]: Implements Dijkstra\'s algorithm to find the shortest path from source vertex to all other vertices. # Distance array initialized to infinity distances = [float(\'inf\')] * n # Distance to the source itself is always 0 distances[src] = 0 # Priority queue to hold the vertices to be examined priority_queue = [(0, src)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor in range(n): # If there is an edge from current_vertex to neighbor if graph[current_vertex][neighbor] > 0: distance = current_distance + graph[current_vertex][neighbor] # Only consider this new path if it\'s better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"# Three Sum Challenge # Problem Statement You are given an array of integers, `nums`. Write a function `three_sum` that finds all unique triplets `(a, b, c)` in the array such that `a + b + c = 0`. Your solution should not return duplicate triplets. # Input and Output Format **Input**: - A list of integers `nums` where `-10^3 <= nums[i] <= 10^3` and `0 <= len(nums) <= 3000`. **Output**: - A set of tuples, each representing a triplet of integers (a, b, c) that together sum to zero. # Constraints - The solution set must not contain duplicate triplets. # Examples 1. Given array `nums = [-1, 0, 1, 2, -1, -4]`, a valid solution set is: ``` {( -1, 0, 1 ), ( -1, -1, 2 )} ``` 2. Given array `nums = [0, 0, 0]`, a valid solution set is: ``` {( 0, 0, 0 )} ``` 3. Given array `nums = [1, 2, -2, -1]`, the output should be an empty set as there are no triplets summing to zero. # Guidelines * Focus on optimizing your code for performance with respect to both time and space complexity. * Consider edge cases such as arrays with fewer than three elements or arrays where no valid triplet is found. * Your function should handle the full range of allowed input sizes efficiently. ```python def three_sum(nums): :param nums: List[int] :return: Set[Tuple[int, int, int]] # Write your implementation here ``` Your task is to complete the `three_sum` function based on the given question.","solution":"def three_sum(nums): nums.sort() triplets = set() for i in range(len(nums) - 2): if i == 0 or (i > 0 and nums[i] != nums[i-1]): left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: triplets.add((nums[i], nums[left], nums[right])) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return triplets"},{"question":"# Encryption Examination We want to simulate a simple secure messaging system using RSA asymmetric encryption. Given RSA\'s complexity and implementation constraints, your task is to: 1. Implement an efficient primality test for generating large primes. 2. Optimize the modular inverse calculation for performance. 3. Encode a string using RSA, ensuring that each character is securely encrypted. # Function Specifications 1. **Function**: `is_prime(num: int) -> bool` - **Input**: An integer `num`. - **Output**: A boolean indicating whether the number is prime. - **Considerations**: Optimize for performance with numbers larger than (10^5). 2. **Function**: `optimized_modinv(a: int, m: int) -> int` - **Input**: Two integers `a` and `m`. - **Output**: The modular inverse of `a mod m`. - **Considerations**: Use the Extended Euclidean Algorithm. 3. **Function**: `encrypt_string(data: str, e: int, n: int) -> list` - **Input**: A string `data`, and integers `e` and `n`. - **Output**: A list of integers where each character is encrypted using RSA. 4. **Function**: `decrypt_string(data: list, d: int, n: int) -> str` - **Input**: A list of integers `data`, and integers `d` and `n`. - **Output**: The decrypted string. # Constraints - Prime numbers used in key generation may be up to 16 bits. - Ensure your `encrypt_string` and `decrypt_string` efficiently handle strings up to 256 characters. - Function performance should be acceptable for large primes and ensure secure encryption/decryption. # Example ```python e.g., n, e, d = generate_key(16) encrypted = encrypt_string(\'HELLO\', e, n) decrypted = decrypt_string(encrypted, d, n) assert decrypted == \'HELLO\' ``` # Edge Case ```python - Encryption/Decryption with non-ASCII characters - Handling empty strings - Large prime generation to be performant and accurate ```","solution":"import random def is_prime(num: int) -> bool: Returns True if num is a prime number, otherwise False. Uses the Miller-Rabin primality test. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False def miller_rabin(d, n): a = random.randint(2, n - 2) x = pow(a, d, n) if x == 1 or x == n - 1: return True while d != n - 1: x = (x * x) % n d *= 2 if x == n - 1: return True return False d = num - 1 while d % 2 == 0: d //= 2 k = 5 # Number of iterations for _ in range(k): if not miller_rabin(d, num): return False return True def optimized_modinv(a:int, m:int) -> int: Returns the modular inverse of a modulus m using the Extended Euclidean algorithm. If the modular inverse does not exist, raises a ValueError. def extended_gcd(a, b): if a == 0: return b, 0, 1 gcd, x1, y1 = extended_gcd(b % a, a) x = y1 - (b // a) * x1 y = x1 return gcd, x, y gcd, x, y = extended_gcd(a, m) if gcd != 1: raise ValueError(\\"Modular inverse does not exist\\") else: return x % m def encrypt_string(data: str, e: int, n: int) -> list: Encrypts the input string using the public key components e and n. Returns a list of encrypted integers. return [pow(ord(char), e, n) for char in data] def decrypt_string(data: list, d: int, n: int) -> str: Decrypts the list of encrypted integers using the private key components d and n. Returns the decrypted string. return \'\'.join([chr(pow(char, d, n)) for char in data]) def generate_key(bits: int): Generate RSA key pairs (n, e, d) with prime numbers up to the specified bit size. Returns the public key (n, e) and the private key (d). def generate_prime(bits): while True: num = random.getrandbits(bits) if is_prime(num): return num p = generate_prime(bits) q = generate_prime(bits) n = p * q phi = (p - 1) * (q - 1) e = 65537 # Commonly used prime number for e d = optimized_modinv(e, phi) return n, e, d"},{"question":"# Linked List Implementation Task You have been hired to create a text editor\'s undo feature that uses linked lists to track changes. Specifically, you will use a **doubly linked list** to allow efficient bidirectional traversal of the changes. Task Implement a `DoublyLinkedList` class with the following functionalities: 1. **Initialization**: Create an empty doubly linked list. 2. **Add Node**: Insert a node with a given value at the end of the list. 3. **Remove Node**: Remove a node with a given value from the list. 4. **Print List Forward**: Print the values in the list from head to tail. 5. **Print List Backward**: Print the values in the list from tail to head. Method Signatures ```python class DoublyLinkedListNode: def __init__(self, value): self.value = value self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None self.tail = None def add_node(self, value: int) -> None: pass def remove_node(self, value: int) -> None: pass def print_forward(self) -> None: pass def print_backward(self) -> None: pass ``` Input and Output * `add_node(value)` - Adds a node with the given value at the end of the list. No return value. * `remove_node(value)` - Removes the first node with the given value from the list. If the value is not found, the list remains unchanged. No return value. * `print_forward()` - Prints the values from head to tail in one line separated by space. * `print_backward()` - Prints the values from tail to head in one line separated by space. Constraints * The values are integers within the range [-10^6, 10^6]. * You can assume that the list will contain a maximum of 10^5 nodes. * The provided solution should handle edge cases efficiently. Example ```python dll = DoublyLinkedList() dll.add_node(1) dll.add_node(2) dll.add_node(3) dll.print_forward() # Output: 1 2 3 dll.print_backward() # Output: 3 2 1 dll.remove_node(2) dll.print_forward() # Output: 1 3 dll.print_backward() # Output: 3 1 dll.remove_node(4) # No change, value not in the list dll.print_forward() # Output: 1 3 ```","solution":"class DoublyLinkedListNode: def __init__(self, value): self.value = value self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None self.tail = None def add_node(self, value: int) -> None: new_node = DoublyLinkedListNode(value) if not self.head: self.head = self.tail = new_node else: self.tail.next = new_node new_node.prev = self.tail self.tail = new_node def remove_node(self, value: int) -> None: current = self.head while current: if current.value == value: if current.prev: current.prev.next = current.next if current.next: current.next.prev = current.prev if current == self.head: self.head = current.next if current == self.tail: self.tail = current.prev return current = current.next def print_forward(self) -> None: current = self.head while current: print(current.value, end=\' \') current = current.next print() def print_backward(self) -> None: current = self.tail while current: print(current.value, end=\' \') current = current.prev print()"},{"question":"# Word Dictionary with Wildcard Search You need to implement a `WordDictionary` class that supports adding words and searching them, including support for wildcard searches. Class Definition ```python class WordDictionary: def __init__(self): pass def add_word(self, word: str) -> None: pass def search(self, word: str) -> bool: pass ``` Methods - `add_word(word: str)`: Adds a word to the data structure. - `search(word: str) -> bool`: Returns `True` if the word is in the data structure or can match any previously added word with wildcard support (where `.` can be any letter), `False` otherwise. Example ```python wordDictionary = WordDictionary() wordDictionary.add_word(\\"bad\\") wordDictionary.add_word(\\"dad\\") wordDictionary.add_word(\\"mad\\") print(wordDictionary.search(\\"pad\\")) # Output: False print(wordDictionary.search(\\"bad\\")) # Output: True print(wordDictionary.search(\\".ad\\")) # Output: True print(wordDictionary.search(\\"b..\\")) # Output: True ``` Constraints - You may assume that all words are non-empty and contain only lowercase English letters. - All inputs are valid, and the implementation should handle large numbers of words efficiently. Performance Requirements - Your implementation should efficiently handle up to tens of thousands of word insertions and searches.","solution":"class WordDictionary: def __init__(self): self.words = [] def add_word(self, word: str) -> None: self.words.append(word) def search(self, word: str) -> bool: for w in self.words: if self.match(w, word): return True return False def match(self, word: str, pattern: str) -> bool: if len(word) != len(pattern): return False for w_char, p_char in zip(word, pattern): if p_char != \'.\' and w_char != p_char: return False return True"},{"question":"# Josephus Problem Implementation **Context**: The Josephus problem, named after the Jewish historian Flavius Josephus, is a theoretical problem related to a certain elimination game. People stand in a circle and are eliminated in stepwise order until only one person remains. Starting from a given position, every k-th person is eliminated and the process continues in a circular fashion. **Task**: Implement the Josephus problem by writing a function that simulates the elimination process and returns the order of elimination. Function Signature ```python def josephus(int_list: List[int], skip: int) -> List[int]: pass ``` Input * `int_list` (List[int]): A list of integers representing people standing in a circle. * `skip` (int): The number of people to skip before eliminating the next person. Output * List[int]: The order in which people are eliminated. Constraints * The input list will contain between 1 and 10^5 elements. * The skip value will be a positive integer less than or equal to 10^5. Example ```python # Example 1 input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9] skip = 3 print(josephus(input_list, skip)) # Output: [3, 6, 9, 4, 8, 5, 2, 7, 1] # Example 2 input_list = [1, 2, 3] skip = 2 print(josephus(input_list, skip)) # Output: [2, 1, 3] ``` # Requirements 1. The function should be efficient to handle large input sizes. 2. Ensure that the function returns the exact order of elimination.","solution":"from typing import List def josephus(int_list: List[int], skip: int) -> List[int]: Simulates the Josephus problem elimination process. Args: int_list (List[int]): List of people standing in a circle. skip (int): Number of people to skip before eliminating the next person. Returns: List[int]: The order in which people are eliminated. elimination_order = [] index = 0 while int_list: index = (index + skip - 1) % len(int_list) elimination_order.append(int_list.pop(index)) return elimination_order"},{"question":"Cycle Sort Implementation with Enhanced Features Scenario Given that you have to sort data while minimizing write operations to memory (possibly for a device with limited write cycles like flash memory), implement a Cycle Sort algorithm to sort an array. Additionally, the array may contain duplicate elements and you need to handle them correctly. Problem Statement Extend the functionality of the provided Cycle Sort algorithm to support stable sorting and efficient cycle detection/handling. Ensure that your implementation minimizes the number of writes and compares to perform sorting. # Function Specification Write a function `cycle_sort_enhanced(arr: List[int]) -> List[int]` to solve the problem. # Input - A list `arr` of integers containing (N) elements, where (1 leq N leq 10^4). # Output - A sorted list of integers, in ascending order. # Constraints - The algorithm should minimize the write operations. - Aim for the current best achievable time complexity, which remains (O(N^2)). # Performance Requirement - Efficient handling of cycles and duplicates. - The implementation should be done without using any additional sorting-related libraries or relying on built-in sort functions. Example ```python assert cycle_sort_enhanced([3, 6, 4, 1, 2]) == [1, 2, 3, 4, 6] assert cycle_sort_enhanced([4, 5, 3, 2, 1, 1]) == [1, 1, 2, 3, 4, 5] assert cycle_sort_enhanced([]) == [] assert cycle_sort_enhanced([5]) == [5] ``` Ensure your code passes these tests and consider additional edge cases to demonstrate the correctness and efficiency of your solution.","solution":"def cycle_sort_enhanced(arr): Function to perform cycle sort on a given list to minimize writes and handle duplicates correctly. writes = 0 # Go through the array to find cycles to rotate for cycle_start in range(0, len(arr) - 1): item = arr[cycle_start] # Find the position where we put the element pos = cycle_start for i in range(cycle_start + 1, len(arr)): if arr[i] < item: pos += 1 # If the item is already in the correct position if pos == cycle_start: continue # Ignore all duplicate elements while item == arr[pos]: pos += 1 arr[pos], item = item, arr[pos] writes += 1 # Rotate the rest of the cycle while pos != cycle_start: pos = cycle_start for i in range(cycle_start + 1, len(arr)): if arr[i] < item: pos += 1 while item == arr[pos]: pos += 1 arr[pos], item = item, arr[pos] writes += 1 return arr"},{"question":"# Comb Sort Implementation Background Comb Sort is a relatively simple sorting algorithm that improves upon Bubble Sort by introducing a gap sequence. The algorithm iteratively reduces the gap between elements to be compared and sorted, starting with a large gap and shrinking it gradually to 1. It thereby speeds up the process by eliminating a lot of \\"turtles\\" (small values near the end of the list that move very slowly towards the front with bubble sort). Problem Write a function `comb_sort` that takes a list of integers and sorts it in ascending order using the Comb Sort algorithm. Function Signature ```python def comb_sort(arr: List[int]) -> List[int]: pass ``` Input - `arr`: A list of integers where `1 <= len(arr) <= 10^5` and `-10^6 <= arr[i] <= 10^6`. Output - A new list of integers sorted in ascending order. Constraints - The implementation should sort in-place without using extra space for another list. - Consider edge cases where the input list is empty, has one element, or contains identical elements. - Performance should be reasonably efficient for large lists, utilizing optimal shrinking of gaps. Example ```python assert comb_sort([4, 3, 2, 1]) == [1, 2, 3, 4] assert comb_sort([34, 23, 1, 45, 78]) == [1, 23, 34, 45, 78] assert comb_sort([10, -5, 2, 7]) == [-5, 2, 7, 10] ``` Requirements Your solution should properly implement the key characteristics of Comb Sort discussed in the analysis above. Specifically: 1. **Initiate with maximum gap**. 2. **Regularly reduce the gap by a predefined shrink factor**. 3. **Perform element swaps within current gap considerations**. 4. **Handle edge cases effectively**. 5. **Ensure that the code maintains in-place sorting requirement**. Tips - Using an appropriate shrink factor is crucial. A common choice is 1.3, but you can experiment within reasonable limits. - Carefully handle the reduction of the gap to ensure all elements are considered properly. Happy coding!","solution":"def comb_sort(arr): Sorts a list of integers in ascending order using the Comb Sort algorithm. if not arr: return arr n = len(arr) gap = n shrink_factor = 1.3 sorted = False while not sorted: gap = int(gap / shrink_factor) if gap <= 1: gap = 1 sorted = True for i in range(n - gap): if arr[i] > arr[i + gap]: arr[i], arr[i + gap] = arr[i + gap], arr[i] sorted = False return arr"},{"question":"# Coding Assessment: Plus One to Array-Represented Number Context: You are tasked with implementing a key function for a system that deals with very large integers which cannot be stored directly due to their size. Instead, they are represented as a list where each element is a single digit of the number. Problem Statement: Write a function to increment an array-represented number by one. The digits are stored in such a way that the most significant digit is at the head of the list. You need to handle the incrementation correctly, including any carry-over. Function Signature: ```python def plus_one(digits: List[int]) -> List[int]: pass ``` Input: * An array of integers `digits` where `0 <= digits[i] <= 9` and `1 <= len(digits) <= 1000`. Output: * The modified list of digits representing the input integer incremented by one. Constraints: * You may not use any built-in functions that directly convert the list to an integer or vice versa. Example: ```python plus_one([1, 2, 3]) # Output: [1, 2, 4] plus_one([9, 9, 9]) # Output: [1, 0, 0, 0] ``` Notes: * Ensure that your solution handles the carry-over correctly. * Optimize for both time and space complexity where possible. * Consider edge cases like all digits being nines or a single element list. Performance Requirements: * Your function should run efficiently for the maximum input size.","solution":"def plus_one(digits): Increments the array-represented number by one. n = len(digits) carry = 1 for i in range(n-1, -1, -1): new_digit = digits[i] + carry if new_digit == 10: digits[i] = 0 carry = 1 else: digits[i] = new_digit carry = 0 break if carry == 1: digits.insert(0, 1) return digits"},{"question":"# Limited Occurrence Element Filtering You are given a list of integers `lst` and a number `N`. Your task is to write a function `limit_occurrences(lst, N)` that processes the list such that each element appears at most `N` times, while maintaining the original order of elements. Function Signature: ```python def limit_occurrences(lst: List[int], N: int) -> List[int]: ``` Parameters: * `lst`: A list of integers `lst` where `1 <= len(lst) <= 10^5`. * `N`: An integer `N` where `1 <= N <= 100`. Returns: * A list of integers with each element appearing at most `N` times in the order they first appear. Example: ```python assert limit_occurrences([1, 2, 3, 1, 2, 1, 2, 3], 2) == [1, 2, 3, 1, 2, 3] assert limit_occurrences([1, 2, 3, 1, 2, 1, 2, 3], 1) == [1, 2, 3] ``` Constraints: 1. The function should be optimized for large lists. 2. Ensure that the function handles edge cases gracefully, such as an empty list or very large values of `N`. Hints: - Consider using a hash table (dictionary) to count occurrences of the elements efficiently.","solution":"from typing import List def limit_occurrences(lst: List[int], N: int) -> List[int]: count = {} result = [] for num in lst: if count.get(num, 0) < N: result.append(num) count[num] = count.get(num, 0) + 1 return result"},{"question":"Context You are developing a performance-optimized system for managing a sorted list of transaction records in a financial application. One crucial aspect is efficiently inserting new transactions in the correct order to maintain the sorted structure of the list. Your task is to implement a function that inserts a new value into a sorted list at the appropriate position. # Problem Statement Implement a function `insert_into_sorted_list(sorted_list, value)` that inserts a given value into its correct sorted position in a provided list. You are provided with a helper function `search_insert` that you can use for determining the correct position for insertion. Function Signature ```python def insert_into_sorted_list(sorted_list: list, value: int) -> list: Inserts value into sorted_list maintaining the sorted order. Parameters: sorted_list (list of int): The list of integers sorted in ascending order. value (int): The value to be inserted. Returns: list of int: The sorted list with the new value inserted. # Your code here pass ``` Example ```python sorted_list = [1, 3, 5, 6] value = 5 print(insert_into_sorted_list(sorted_list, value)) # Output: [1, 3, 5, 5, 6] sorted_list = [1, 3, 5, 6] value = 2 print(insert_into_sorted_list(sorted_list, value)) # Output: [1, 2, 3, 5, 6] sorted_list = [1, 3, 5, 6] value = 7 print(insert_into_sorted_list(sorted_list, value)) # Output: [1, 3, 5, 6, 7] sorted_list = [1, 3, 5, 6] value = 0 print(insert_into_sorted_list(sorted_list, value)) # Output: [0, 1, 3, 5, 6] ``` Constraints * The input list is always sorted in ascending order. * You can assume the list has a reasonable maximum size, up to 10^4 elements. * Duplicate values are allowed. Your function should make the best use of the provided helper function to ensure good performance.","solution":"def search_insert(sorted_list, value): Helper function to find the position to insert the value. left, right = 0, len(sorted_list) while left < right: mid = (left + right) // 2 if sorted_list[mid] < value: left = mid + 1 else: right = mid return left def insert_into_sorted_list(sorted_list, value): Inserts value into sorted_list maintaining the sorted order. Parameters: sorted_list (list of int): The list of integers sorted in ascending order. value (int): The value to be inserted. Returns: list of int: The sorted list with the new value inserted. index = search_insert(sorted_list, value) return sorted_list[:index] + [value] + sorted_list[index:]"},{"question":"You are tasked with implementing a function that checks whether a given large integer ( n ) is probably prime using the Rabin-Miller Primality Test. Your function will have to probabilistically determine the primality by running a defined number of iterations (k) to ensure high accuracy. # Function Signature ```python def is_probably_prime(n: int, k: int) -> bool: ``` # Input * An integer `n` ( ( n geq 5 ) ) indicating the number to be checked for primality. * An integer `k` ( ( k geq 1 ) ) representing the number of iterations for the test to improve accuracy. # Output * Returns `True` if ( n ) is probably prime. * Returns `False` if ( n ) is definitely composite. # Constraints * You may assume that `n` is always an integer greater than or equal to 5. * You may also assume that `k` is a positive integer. # Requirements * Your solution should have a time complexity of ( O(k log n) ) and a space complexity of ( O(1) ). * You must factor ( n-1 ) into the form ( 2^r times d ) and utilize the modular exponentiation steps correctly. * Handling of ( n )\'s small edge cases should not be necessary as they are outside the problem constraints (`n >= 5`). # Example Usage ```python print(is_probably_prime(29, 5)) # Returns: True (29 is a prime) print(is_probably_prime(15, 5)) # Returns: False (15 is not a prime) ``` # Testing * You should include test cases for small primes, large primes, small composites, and large composites. * For higher correctness assurance, larger values of `k` should be used in practical scenarios.","solution":"import random def is_probably_prime(n: int, k: int) -> bool: Returns True if n is probably prime, using the Rabin-Miller Primality Test, with k iterations for increased accuracy. Returns False if n is definitely composite. # Check if n is not an integer >= 5. if n < 5: raise ValueError(\\"n must be an integer greater than or equal to 5.\\") # Function to perform modular exponentiation def power_mod(base, exp, modulus): result = 1 base = base % modulus while exp > 0: if exp % 2 == 1: # If exp is odd, multiply base with the result result = (result * base) % modulus exp = exp >> 1 # Divide exp by 2 base = (base * base) % modulus return result # Check if n is even if n % 2 == 0: return False # Find r and d such that n-1 = 2^r * d with d odd r = 0 d = n - 1 while d % 2 == 0: d //= 2 r += 1 # Perform k iterations of the test for _ in range(k): a = random.randint(2, n - 2) x = power_mod(a, d, n) if x == 1 or x == n - 1: continue for _ in range(r - 1): x = power_mod(x, 2, n) if x == n - 1: break else: return False # Composite return True # Probably prime"},{"question":"# Context: A company stores its hierarchical employee information in a binary tree data structure, where each node represents an employee with a unique identifier. The company\'s IT department requires a function to retrieve the identifiers of all employees in a preorder manner for further processing. # Task: Write a function `employee_preorder_traversal(root)` that takes the root node of a binary tree representing the employee hierarchy and returns a list of employee identifiers following a preorder traversal. # Input: - A `Node` class that defines each node in the tree, already provided. - `root`, which is an instance of `Node` representing the root of the tree (can be `None` if the tree is empty). # Output: - A list of integers representing the employee identifiers in preorder traversal order. # Constraints: - The number of nodes in the tree is between 0 and 10^4. - Each node contains a unique integer identifier within the range [1, 10^5]. # Example: ```python # Example use case: # Construct the following tree # 1 # / # 2 3 # / / # 4 5 6 root = Node(1) root.left = Node(2) root.right = Node(3) root.left.left = Node(4) root.right.left = Node(5) root.right.right = Node(6) print(employee_preorder_traversal(root)) # Expected output: [1, 2, 4, 3, 5, 6] ``` Implementation - Implement the function using an iterative approach. - Expected time complexity is O(n). - Ensure the function handles edge cases effectively. ```python def employee_preorder_traversal(root): # Implement the function here res = [] if not root: return res stack = [] stack.append(root) while stack: root = stack.pop() res.append(root.val) if root.right: stack.append(root.right) if root.left: stack.append(root.left) return res ``` # Notes: - Do not rely on external libraries; use only basic data structures and algorithms. - Consider both performance and readability in your solution.","solution":"class Node: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def employee_preorder_traversal(root): res = [] if not root: return res stack = [root] while stack: node = stack.pop() res.append(node.val) if node.right: stack.append(node.right) if node.left: stack.append(node.left) return res"},{"question":"# Question: Implementing Base Conversion Functions Context: You are working on a system that needs to handle and process numbers in various numeral systems, from binary (base 2) to hexadecimal (base 16), and up to base 36 (using digits 0-9 and letters A-Z). Your task involves writing functions to convert integers to these numeral systems and to convert numeral system strings back to integers. Task: 1. **`int_to_base(num, base)`**: - Convert a given integer `num` to its representation in the specified base `base`. - Handle both positive and negative integers. - Return the base representation as a string. 2. **`base_to_int(str_to_convert, base)`**: - Convert a string `str_to_convert` representing a number in the specified base `base` back to an integer. - Return the integer representation. Input and Output Formats: 1. **`int_to_base`**: - Input: - `num` (int): The integer to be converted. - `base` (int): The base to convert the integer to. (2 <= base <= 36) - Output: - A string representing the number in the specified base. 2. **`base_to_int`**: - Input: - `str_to_convert` (str): String representing the number in the specified base. - `base` (int): The base of the numeral system of the given string. (2 <= base <= 36) - Output: - An integer representing the converted value. Constraints: - The inputs will be valid integers and strings within the specified ranges. - Assume that input strings consist of valid digits and uppercase Latin letters only. Example: ```python assert int_to_base(5, 2) == \'101\' assert base_to_int(\'101\', 2) == 5 assert int_to_base(-15, 16) == \'-F\' assert base_to_int(\'F\', 16) == 15 assert int_to_base(255, 16) == \'FF\' assert base_to_int(\'FF\', 16) == 255 ``` Implement these two functions in Python: ```python def int_to_base(num, base): # Your code here def base_to_int(str_to_convert, base): # Your code here ```","solution":"def int_to_base(num, base): Convert a given integer num to its representation in the specified base. if num == 0: return \\"0\\" sign = \\"-\\" if num < 0 else \\"\\" num = abs(num) digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" result = \\"\\" while num > 0: remainder = num % base result = digits[remainder] + result num //= base return sign + result def base_to_int(str_to_convert, base): Convert a string str_to_convert representing a number in the specified base back to an integer. is_negative = str_to_convert[0] == \\"-\\" if is_negative: str_to_convert = str_to_convert[1:] digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" num = 0 for char in str_to_convert: num = num * base + digits.index(char) if is_negative: num = -num return num"},{"question":"# RSA Encryption Coding Challenge Scenario You are tasked with implementing an RSA encryption system for secure communications. The company requires you to develop functions that can generate RSA keys, encrypt data using the public key, and decrypt data using the private key. Problem Description Implement the following functions in Python: 1. `generate_key(k: int, seed: Optional[int] = None) -> Tuple[int, int, int]`: - Generates an RSA key pair with a specified bit length `k`. - Returns a tuple `(n, e, d)` where `n` is the modulus, `e` is the public exponent, and `d` is the private exponent. 2. `encrypt(data: int, e: int, n: int) -> int`: - Encrypts the given integer `data` using the public key `(e, n)`. - Returns the encrypted integer. 3. `decrypt(data: int, d: int, n: int) -> int`: - Decrypts the given integer `data` using the private key `(d, n)`. - Returns the decrypted integer. Input/Output Formats - **generate_key**: - Input: Integer `k` specifying the number of bits in `n`, optional integer `seed` for reproducibility. - Output: Tuple of integers `(n, e, d)`. - **encrypt**: - Input: Integer `data` to be encrypted, integers `e` and `n` for the public key. - Output: Integer representing the encrypted data. - **decrypt**: - Input: Integer `data` to be decrypted, integers `d` and `n` for the private key. - Output: Integer representing the decrypted data. Constraints 1. `k` is a positive integer, typically >= 16. 2. `data` is a non-negative integer. 3. Ensure the prime numbers generated for `p` and `q` are sufficiently large and differ to maintain security. 4. The function must handle conversion and computation of large integers efficiently. Example ```python # Example usage of the implemented functions n, e, d = generate_key(16) data = 20 encrypted = encrypt(data, e, n) decrypted = decrypt(encrypted, d, n) assert decrypted == data ```","solution":"import random from typing import Tuple, Optional import sympy def generate_prime(bits: int) -> int: return sympy.randprime(2**(bits-1), 2**bits) def gcd(a, b): while b: a, b = b, a % b return a def extended_gcd(a, b): if a == 0: return b, 0, 1 gcd, x1, y1 = extended_gcd(b % a, a) x = y1 - (b // a) * x1 y = x1 return gcd, x, y def mod_inverse(a, m): gcd, x, y = extended_gcd(a, m) if gcd != 1: raise Exception(\'Modular inverse does not exist\') else: return x % m def generate_key(k: int, seed: Optional[int] = None) -> Tuple[int, int, int]: if seed is not None: random.seed(seed) p = generate_prime(k // 2) q = generate_prime(k // 2) while p == q: q = generate_prime(k // 2) n = p * q phi = (p - 1) * (q - 1) e = 65537 while gcd(e, phi) != 1: e = random.randrange(2, phi) d = mod_inverse(e, phi) return (n, e, d) def encrypt(data: int, e: int, n: int) -> int: return pow(data, e, n) def decrypt(data: int, d: int, n: int) -> int: return pow(data, d, n)"},{"question":"You are given the task of implementing a function that processes a stack by duplicating each of its elements. However, unlike the previous methods that use either an additional stack or a queue for auxiliary storage, your task is to demonstrate a deeper understanding of algorithmic manipulation by implementing an optimized version without using any additional stacks or queues. # Function Signature ```python def optimized_stutter(stack: list) -> list: pass ``` # Input - A stack represented as a list in Python, where the last element of the list is the top of the stack. - Example: `[3, 7, 1, 14, 9]` # Output - The modified stack with each element duplicated. - Example: `[3, 3, 7, 7, 1, 1, 14, 14, 9, 9]` # Constraints - The input stack will contain at most 1000 elements. - Each element in the stack will be an integer. # Performance Requirements - Aim to perform the operation with O(n) time complexity. - Minimize additional space usage (beyond the input stack itself). # Scenario Imagine a system where each operation on the data needs to be logged twice for reliability. Your function `optimized_stutter` should transform the stack such that each original element appears twice sequentially while adhering to the above constraints. # Example ```python stack = [3, 7, 1, 14, 9] print(optimized_stutter(stack)) # Output: [3, 3, 7, 7, 1, 1, 14, 14, 9, 9] ``` # Notes - Be mindful of edge cases such as an empty stack or a stack with a single element. - Avoid using additional data structures such as another list, stack, or queue.","solution":"def optimized_stutter(stack: list) -> list: Duplicates each element in the stack without using additional stacks or queues. i = 0 while i < len(stack): stack.insert(i+1, stack[i]) i += 2 return stack"},{"question":"You are given an array of integers. Implement the Quick Sort algorithm to sort the array in ascending order. You should implement this algorithm in-place. # Function Signature ```python def quick_sort(arr: List[int], simulation: bool = False) -> List[int]: ``` # Input * An array `arr` of integers (0 <= len(arr) <= 10^5). * A boolean flag `simulation` which defaults to `False`. When true, print the array at each iteration. # Output * A sorted array in ascending order. # Constraints * The function should sort the array in-place without using additional storage. # Example ```python assert quick_sort([10, 7, 8, 9, 1, 5]) == [1, 5, 7, 8, 9, 10] assert quick_sort([3, 8, 5, 2, 1, 4, 7, 6]) == [1, 2, 3, 4, 5, 6, 7, 8] ``` # Notes 1. Handle edge cases where the array is already sorted or contains repeated elements. 2. Optimize the partitioning logic for better performance. Implement and test your function thoroughly to ensure its correctness and efficiency.","solution":"from typing import List def quick_sort(arr: List[int], simulation: bool = False) -> List[int]: def partition(low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] < pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quick_sort_recursive(low, high): if low < high: pivot_index = partition(low, high) if simulation: print(arr) quick_sort_recursive(low, pivot_index - 1) quick_sort_recursive(pivot_index + 1, high) quick_sort_recursive(0, len(arr) - 1) return arr"},{"question":"# Missing Ranges Challenge **Context**: You are tasked with developing a function to identify missing ranges in a sequence of ordered integers. This function will be particularly useful in systems that monitor continuous sequences such as logging data, ticket issuance systems, or network packet tracking. **Function Specification**: You need to implement the function `find_missing_ranges(arr: List[int], lo: int, hi: int) -> List[Tuple[int, int]]` which accepts three parameters: 1. `arr` - A sorted list of integers. 2. `lo` - The lower bound of the range (inclusive). 3. `hi` - The upper bound of the range (inclusive). The function should return a list of tuples, with each tuple representing the start and end of each missing range of integers within the bounds [lo, hi]. **Input and Output Requirements**: * **Input**: * `arr` - A sorted list of integers, with constraints 0 <= len(arr) <= 10^6, and each integer in arr lies within the range [lo, hi]. * `lo` and `hi` are integers where lo <= hi and lie within the typical integer range. * **Output**: * A list of tuples `[(start1, end1), (start2, end2), ...]` where each tuple represents a missing range of integers within the input list and the specified bounds. **Constraints**: * The array `arr` is sorted and can be empty. * Numbers in `arr` are guaranteed to be within the bounds [lo, hi]. **Performance**: * Ensure that your solution does not exceed O(n) time complexity, where n is the length of the input array. * Aim for O(1) auxiliary space complexity. **Examples**: 1. **Input**: * `arr = [3, 5]` * `lo = 1` * `hi = 10` **Output**: `[(1, 2), (4, 4), (6, 10)]` 2. **Input**: * `arr = [1, 2, 3, 7, 8, 9]` * `lo = 1` * `hi = 10` **Output**: `[(4, 6), (10, 10)]` 3. **Input**: * `arr = []` * `lo = 2` * `hi = 6` **Output**: `[(2, 6)]` **Edge Cases**: 1. Handle the empty array and return the full range as missing. 2. Process scenarios where no numbers are missing. 3. Ensure the function handles the lower and upper bounds correctly when they are part or outside the array. **Thought Process**: The function should handle traversal efficiently, always tracking the next expected number. If a gap is identified, record the missing range and continue until the array and bounds are fully considered.","solution":"from typing import List, Tuple def find_missing_ranges(arr: List[int], lo: int, hi: int) -> List[Tuple[int, int]]: Returns a list of tuples representing the missing ranges within the given bounds. result = [] prev = lo - 1 for num in arr: if num > prev + 1: result.append((prev + 1, num - 1)) prev = num if prev < hi: result.append((prev + 1, hi)) return result"},{"question":"# Objective We know that detecting cycles in linked lists is crucial for various practical applications, such as validating data integrity in data structures or network paths. Your task is to implement the Floyd-Warshall algorithm to find the first node in a cycle of a linked list, ensuring you handle all edge cases effectively. # Problem Statement You are provided with a linked list. Your task is to write a function `first_cyclic_node` that detects the first node of a cycle in the linked list. If no cycle exists, return `None`. # Function Signature ```python class Node: def __init__(self, x): self.val = x self.next = None def first_cyclic_node(head: Node) -> Node: pass ``` # Input * `head`: The head node of a singly-linked list. # Output * The function should return the first node of the cycle if a cycle exists. * If no cycle exists, the function should return `None`. # Constraints * Number of nodes in the linked list: (1 leq n leq 10^6) * The node values are unique strings or integers. # Examples Example 1: ```python # Linked List: 1 -> 2 -> 3 -> 4 -> 2 (cycle exists and starts at node with value 2) head = Node(1) head.next = Node(2) second = head.next second.next = Node(3) third = second.next third.next = Node(4) fourth = third.next fourth.next = second print(first_cyclic_node(head).val) # Output: 2 ``` Example 2: ```python # Linked List: 1 -> 2 -> 3 -> None (no cycle exists) head = Node(1) head.next = Node(2) head.next.next = Node(3) print(first_cyclic_node(head)) # Output: None ``` # Notes - The `Node` class is provided for your convenience. - Think about edge cases like an empty list or a list with only one element. - Consider the efficiency of your solution due to the large possible input size. # Testing Ensure to include unit tests to confirm your solution works correctly under various scenarios, including but not limited to edge cases, different list sizes, and cases with and without cycles.","solution":"class Node: def __init__(self, x): self.val = x self.next = None def first_cyclic_node(head: Node) -> Node: # Detect cycle using Floyd\'s Tortoise and Hare algorithm slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next # Cycle detected if slow == fast: break # If no cycle detected if not fast or not fast.next: return None # Find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"You are given a list of integers where every element appears twice except for one. Your task is to find that single element. Each integer in the list appears exactly twice except for one integer which appears only once. You should implement this with an algorithm that has linear runtime complexity and without using extra memory. Write a function: ```python def find_unique_number(nums: List[int]) -> int: Finds and returns the element that appears only once in a list where every other element appears twice. :param nums: List[int] - a list of integers with exactly one element appearing once, all others appear twice. :return: int - the element that appears only once. ``` # Constraints * The input array will contain at least one number. * Each element in the array is an integer within the range [-3 * 10^4, 3 * 10^4]. # Example: **Example 1:** ```python nums = [2, 2, 1] find_unique_number(nums) # Output: 1 ``` **Example 2:** ```python nums = [4, 1, 2, 1, 2] find_unique_number(nums) # Output: 4 ``` **Example 3:** ```python nums = [1] find_unique_number(nums) # Output: 1 ``` # Explanation In each example, the unique number (the one that does not repeat) is found by leveraging the properties of the XOR operation which cancels out every element that appears in pairs.","solution":"from typing import List def find_unique_number(nums: List[int]) -> int: Finds and returns the element that appears only once in a list where every other element appears twice. :param nums: List[int] - a list of integers with exactly one element appearing once, all others appear twice. :return: int - the element that appears only once. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"You are asked to write two functions: 1. `min_depth(self, root)` that calculates the minimum depth of a binary tree using recursion. 2. `min_height(root)` that calculates the minimum depth using an iterative approach. The minimum depth is defined as the number of nodes along the shortest path from the root node down to the nearest leaf node. # Input * You are provided with a binary tree node called `TreeNode`, which is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` * `root`: The root node of the binary tree. # Output * The functions should return an integer representing the minimum depth of the tree. # Constraints * The number of nodes in the tree is in the range [0, 10^4]. * All `TreeNode.val` values are unique. * The tree will at most be balanced to a degree of a typical binary search tree. Example: ```python if __name__ == \'__main__\': # Create a binary tree tree = TreeNode(10) tree.left = TreeNode(12) tree.right = TreeNode(15) tree.left.left = TreeNode(25) tree.left.left.right = TreeNode(100) tree.left.right = TreeNode(30) tree.right.left = TreeNode(36) height = min_height(tree) print(\\"Minimum height (iterative):\\", height) # Assuming min_depth is a method in a class that operates similar to the iterative function min_depth = {ClassWithMinDepthMethod}() depth = min_depth.min_depth(tree) print(\\"Minimum depth (recursive):\\", depth) ``` # Notes * Do consider edge cases such as empty trees or trees with minimal nodes. * Efficiency is key: avoid unnecessary computations. * Ensure you pass all edge cases and performance benchmarks.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class Solution: def min_depth(self, root): Calculate the minimum depth of a binary tree using recursion. :param root: TreeNode, root of the binary tree :return: int, minimum depth of the tree if root is None: return 0 if root.left is None and root.right is None: return 1 if root.left is None: return 1 + self.min_depth(root.right) if root.right is None: return 1 + self.min_depth(root.left) return 1 + min(self.min_depth(root.left), self.min_depth(root.right)) def min_height(root): Calculate the minimum depth of a binary tree using an iterative approach. :param root: TreeNode, root of the binary tree :return: int, minimum depth of the tree if root is None: return 0 queue = [(root, 1)] # (node, depth) while queue: node, depth = queue.pop(0) if not node.left and not node.right: return depth if node.left: queue.append((node.left, depth + 1)) if node.right: queue.append((node.right, depth + 1)) return 0"},{"question":"You are tasked with implementing a robust version of Binary Exponentiation that supports both positive and negative integer exponents, with optional modulo operations to prevent overflow. Your goal is to write a function `binary_exponentiation` that determines the power of a base integer using both iterative and recursive approaches. Additionally, it should support negative exponents by returning the reciprocal of the base raised to the absolute value of the exponent. # Function Signature ```python def binary_exponentiation(base: int, exponent: int, mod: int = None) -> float: pass ``` # Input 1. `base` (int): The base number, which can be any integer. 2. `exponent` (int): The exponent number, which can be any integer, positive or negative. 3. `mod` (int, optional): An optional modulus to perform (`base ** exponent % mod`). If specified, must be greater than zero. # Output - Returns a float representing `base` raised to the power of `exponent`, optionally modulated by `mod`. # Constraints - The function must handle large numbers efficiently. - If `mod` is provided, it must be greater than 0. - For negative exponents, the function should return a floating-point result representing the reciprocal. - Avoid excessive space complexity. # Examples ```python print(binary_exponentiation(2, 10)) # Output: 1024.0 print(binary_exponentiation(2, -2)) # Output: 0.25 print(binary_exponentiation(2, 10, 1000)) # Output: 24 ``` # Performance Requirements - The solution should complete within a reasonable time frame for very large values of `exponent` (up to (10^9)). - Minimize and justify any additional space usage.","solution":"def binary_exponentiation(base: int, exponent: int, mod: int = None) -> float: def mod_exp(base, exponent, mod): result = 1 base = base % mod while exponent > 0: if (exponent % 2) == 1: result = (result * base) % mod exponent = exponent >> 1 base = (base * base) % mod return result if mod is not None and mod <= 0: raise ValueError(\\"Modulus must be greater than zero.\\") if exponent == 0: return 1.0 if exponent < 0: base = 1 / base exponent = -exponent if mod is None: result = 1.0 while exponent > 0: if (exponent % 2) == 1: result *= base base *= base exponent = exponent >> 1 return result else: return mod_exp(base, exponent, mod)"},{"question":"# Problem Description You are given a list of integers `lst` and a positive integer `N`. Your task is to implement a function that creates a new list containing each integer from the original list at most `N` times, while maintaining the order. # Function Signature ```python def filter_list(lst: List[int], N: int) -> List[int]: ``` # Input - `lst` (List of ints): The list of integers. - `N` (int): The maximum number of times each integer should appear in the result list. # Output - List of integers containing each integer from `lst` at most `N` times. # Constraints - The elements in `lst` are integers 0 ≤ `lst[i]` ≤ 10^9. - 0 ≤ len(`lst`) ≤ 10^5. - 1 ≤ `N` ≤ len(`lst`). # Example ```python filter_list([1, 2, 3, 1, 2, 1, 2, 3], 2) # Returns: [1, 2, 3, 1, 2, 3] filter_list([], 2) # Returns: [] filter_list([1,1,1,1], 1) # Returns: [1] ``` # Notes - You should use an efficient method, preferably with O(n) time complexity.","solution":"def filter_list(lst, N): Creates a new list containing each integer from the original list at most N times. Args: lst (List[int]): The list of integers. N (int): The maximum number of times each integer should appear in the result list. Returns: List[int]: A list of integers containing each integer from `lst` at most `N` times. from collections import defaultdict count_dict = defaultdict(int) result = [] for num in lst: if count_dict[num] < N: result.append(num) count_dict[num] += 1 return result"},{"question":"# Question: Enhanced Gnome Sort As part of a software optimization initiative, you are required to design a more efficient sorting mechanism based on the Gnome Sort algorithm. Specifically, modify the existing Gnome Sort to utilize an early exit approach to reduce the number of comparisons and swaps in already or partially sorted arrays. Write a function `optimized_gnome_sort(arr: list) -> list` that performs the following: 1. Retains the essence of Gnome Sort but: * Implements a mechanism to detect if the array becomes sorted before completing all iterations. 2. Optimizes for partially sorted arrays to expedite sorting. Input: - A list of integers `arr` (0 ≤ len(arr) ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9). Output: - A list of integers sorted in non-decreasing order. Constraints: - Aim for time efficiency better than the classical Gnome Sort in scenarios where the array is already or nearly sorted. Example: ```python print(optimized_gnome_sort([34, 2, 10, -9])) # Output: [-9, 2, 10, 34] print(optimized_gnome_sort([-9, 2, 10, 34])) # Output: [-9, 2, 10, 34] print(optimized_gnome_sort([])) # Output: [] print(optimized_gnome_sort([1, 2, 3, 4, 5])) # Output: [1, 2, 3, 4, 5] ```","solution":"def optimized_gnome_sort(arr): Sorts a list using an optimized Gnome Sort algorithm. n = len(arr) if n == 0: return arr pos = 0 while pos < n: if pos == 0 or arr[pos] >= arr[pos - 1]: pos += 1 else: arr[pos], arr[pos - 1] = arr[pos - 1], arr[pos] pos -= 1 # Early exit check if pos == n - 1: sorted_check = all(arr[i] <= arr[i + 1] for i in range(n - 1)) if sorted_check: break return arr"},{"question":"You are given two non-negative integers `N` and `M` representing the respective lengths of the `haystack` and `needle` strings. You need to write a function `optimized_strStr(haystack, needle)` that returns the index of the first occurrence of the needle in the haystack, or -1 if the needle is not part of the haystack. The function should be optimized for performance. # Input * `haystack`: A string of length `N`. * `needle`: A string of length `M`. # Output * An integer representing the index of the first occurrence of the needle in the haystack, or -1 if the needle is not found. # Constraints 1. `0 <= N, M <= 5 * 10^4` 2. Strings `haystack` and `needle` consist only of lowercase English characters. # Performance Requirements - The function should have a time complexity better than O((N-M+1) * M) in the average case. - The function should have a space complexity of O(M). # Example ```python # Example 1: haystack = \\"hello\\" needle = \\"ll\\" print(optimized_strStr(haystack, needle)) # Output: 2 # Example 2: haystack = \\"aaaaa\\" needle = \\"bba\\" print(optimized_strStr(haystack, needle)) # Output: -1 # Example 3: haystack = \\"\\" needle = \\"\\" print(optimized_strStr(haystack, needle)) # Output: 0 # Example 4: haystack = \\"mississippi\\" needle = \\"pi\\" print(optimized_strStr(haystack, needle)) # Output: 9 ``` # Notes 1. Please handle edge cases as described in the constraints. 2. Consider using advanced algorithms like the KMP algorithm for better performance.","solution":"def computeLPSArray(needle): Helper function to compute the Longest Prefix Suffix (LPS) array for KMP algorithm. m = len(needle) lps = [0] * m length = 0 # length of the previous longest prefix suffix i = 1 while i < m: if needle[i] == needle[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length-1] else: lps[i] = 0 i += 1 return lps def optimized_strStr(haystack, needle): Finds the first occurrence of the needle in haystack using the KMP (Knuth-Morris-Pratt) pattern matching algorithm. Returns the index of the first occurrence or -1 if needle is not part of haystack. n = len(haystack) m = len(needle) if m == 0: return 0 if n == 0: return -1 lps = computeLPSArray(needle) i = 0 # index for haystack j = 0 # index for needle while i < n: if haystack[i] == needle[j]: i += 1 j += 1 if j == m: return i - j elif i < n and haystack[i] != needle[j]: if j != 0: j = lps[j-1] else: i += 1 return -1"},{"question":"**Problem Statement:** You are given an array of integers where all elements appear exactly twice except for one element, which appears only once. Implement a function called `find_single_element` that finds and returns this unique element. Your implementation must have a linear runtime complexity and should not use any extra memory (i.e., constant space complexity). Function Signature: ```python def find_single_element(nums: List[int]) -> int: pass ``` Input: * `nums` (List[int]): A non-empty list of integers where every element appears exactly twice except for one element. Output: * Returns the element that appears only once. Constraints: * Length of `nums` will be odd and at least 1. * Each of the elements in `nums` will be within the range of -10^9 to 10^9. Example: Input: ```python nums = [4, 1, 2, 1, 2] ``` Output: ```python 4 ``` Explanation: In the given list, every element appears twice except for the number 4 which appears only once. Note: You should consider all potential edge cases: - The list could contain negative numbers. - The unique number could be at any position in the list. - The list will always contain integers. Performance: Ensure that your solution works efficiently with a time complexity of O(n) and a space complexity of O(1). Good luck!","solution":"from typing import List def find_single_element(nums: List[int]) -> int: Finds the single element in the list that appears only once. All other elements appear exactly twice. unique_element = 0 for num in nums: unique_element ^= num return unique_element"},{"question":"Verifying Strongly Connected Components **Scenario**: You are working on a network analysis tool that inspects directed networks represented as graphs. One of the core functionalities is to verify whether the network graph is strongly connected. This means checking if there is a path from any node to every other node in both directions. **Task**: Implement a function that determines whether a given directed graph is strongly connected using depth-first search (DFS) and graph reversal methods. **Function Signature**: ```python def is_graph_strongly_connected(vertex_count: int, edges: List[Tuple[int, int]]) -> bool: ``` **Input**: * `vertex_count`: An integer representing the number of vertices in the graph. * `edges`: A list of tuples where each tuple (a, b) represents a directed edge from vertex `a` to vertex `b`. **Output**: * Returns `True` if the graph is strongly connected, otherwise returns `False`. **Constraints**: * 1 <= vertex_count <= 10^5 * 0 <= len(edges) <= 2 * 10^5 * Vertices are labeled from 0 to vertex_count-1. **Example**: ```python assert is_graph_strongly_connected(5, [(0, 1), (1, 2), (2, 0), (1, 3), (3, 4), (4, 1)]) == True assert is_graph_strongly_connected(5, [(0, 1), (1, 2), (2, 0), (1, 3), (3, 4)]) == False ``` **Explanation**: * In the first example, you can reach any vertex from any other vertex, both directly and after graph reversal, hence the graph is strongly connected. * In the second example, not all vertices can reach vertex `3` after graph reversal, making the graph not strongly connected. *Hint*: Consider using classes and methods similar to the provided code snippet to maintain organization and modularity in your solution.","solution":"from typing import List, Tuple def dfs(graph, start, visited): stack = [start] while stack: node = stack.pop() if not visited[node]: visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: stack.append(neighbor) def is_graph_strongly_connected(vertex_count: int, edges: List[Tuple[int, int]]) -> bool: if vertex_count == 1: return True # Create adjacency list graph = [[] for _ in range(vertex_count)] reversed_graph = [[] for _ in range(vertex_count)] for a, b in edges: graph[a].append(b) reversed_graph[b].append(a) # Step 1: Do DFS from any node (let\'s say node 0) visited = [False] * vertex_count dfs(graph, 0, visited) # If DFS does not visit all nodes, graph is not strongly connected if not all(visited): return False # Step 2: Do DFS on reversed graph from the same node reversed_visited = [False] * vertex_count dfs(reversed_graph, 0, reversed_visited) # If DFS does not visit all nodes in reversed graph, graph is not strongly connected return all(reversed_visited)"},{"question":"As a new lead developer at a tech firm, you are responsible for optimizing the company\'s data layer, which relies heavily on dynamically balanced data structures. Your task is to implement an efficient Red-Black Tree that supports insertion, deletion, search and inorder traversal. **Objective**: Implement the following methods in the `RBTree` class: `insert`, `delete`, `search`, and `inorder`. Ensure the tree maintains its Red-Black properties. # Function Signatures 1. `def insert(self, node: RBNode):` - Insert a node into the Red-Black Tree. 2. `def delete(self, node: RBNode):` - Delete a node from the Red-Black Tree. 3. `def search(self, value: int) -> bool:` - Search for a node with a specific value. 4. `def inorder(self) -> List[Dict[str, int]]:` - Return the inorder traversal of the tree nodes with their values and colors. # Constraints * Do not modify the signatures or core structure of the `RBTree` and `RBNode` classes. * Assume all values inserted are unique integers. * Handle both `is_red` boolean and `color` (0 for black, 1 for red) correctly in the `RBNode` class. # Example ```python if __name__ == \\"__main__\\": rb = RBTree() nodes = [11, 2, 14, 1, 7, 15, 5, 8, 4] for value in nodes: node = RBNode(value, 1) rb.insert(node) print(rb.inorder()) # Expected inorder output with correct values and colors node_to_delete = rb.search(7) if node_to_delete: rb.delete(node_to_delete) print(rb.inorder()) # Expected inorder output after deletion ``` # Evaluation Criteria * Correct implementation of Red-Black properties (coloring and balancing). * Correct and efficient handling of insertions and deletions. * Accurate and optimized search and traversal methods. * Proper handling of edge cases and tree rebalancing during node operations.","solution":"class RBNode: def __init__(self, key, color): self.key = key self.color = color # 1 for Red, 0 for Black self.left = None self.right = None self.parent = None class RBTree: def __init__(self): self.TNULL = RBNode(0, 0) self.root = self.TNULL def preorder(self): self._preorder_helper(self.root) def inorder(self): res = [] self._inorder_helper(self.root, res) return res def postorder(self): self._postorder_helper(self.root) def search_tree(self, key): return self._search_tree_helper(self.root, key) def balance_insert(self, k): while k.parent.color == 1: if k.parent == k.parent.parent.right: u = k.parent.parent.left if u.color == 1: u.color = 0 k.parent.color = 0 k.parent.parent.color = 1 k = k.parent.parent else: if k == k.parent.left: k = k.parent self.right_rotate(k) k.parent.color = 0 k.parent.parent.color = 1 self.left_rotate(k.parent.parent) else: u = k.parent.parent.right if u.color == 1: u.color = 0 k.parent.color = 0 k.parent.parent.color = 1 k = k.parent.parent else: if k == k.parent.right: k = k.parent self.left_rotate(k) k.parent.color = 0 k.parent.parent.color = 1 self.right_rotate(k.parent.parent) if k == self.root: break self.root.color = 0 def __preorder_helper(self, node): if node != self.TNULL: print(node.key, end=\\" \\") self.__preorder_helper(node.left) self.__preorder_helper(node.right) def _inorder_helper(self, node, res): if node != self.TNULL: self._inorder_helper(node.left, res) res.append({\\"key\\": node.key, \\"color\\": node.color}) self._inorder_helper(node.right, res) def __postorder_helper(self, node): if node != self.TNULL: self.__postorder_helper(node.left) self.__postorder_helper(node.right) print(node.key, end=\\" \\") def _search_tree_helper(self, node, key): if node == self.TNULL or key == node.key: return node if key < node.key: return self._search_tree_helper(node.left, key) return self._search_tree_helper(node.right, key) def left_rotate(self, x): y = x.right x.right = y.left if y.left != self.TNULL: y.left.parent = x y.parent = x.parent if x.parent == None: self.root = y elif x == x.parent.left: x.parent.left = y else: x.parent.right = y y.left = x x.parent = y def right_rotate(self, x): y = x.left x.left = y.right if y.right != self.TNULL: y.right.parent = x y.parent = x.parent if x.parent == None: self.root = y elif x == x.parent.right: x.parent.right = y else: x.parent.left = y y.right = x x.parent = y def insert(self, key): node = RBNode(key, 1) node.parent = None node.left = self.TNULL node.right = self.TNULL node.color = 1 y = None x = self.root while x != self.TNULL: y = x if node.key < x.key: x = x.left else: x = x.right node.parent = y if y == None: self.root = node elif node.key < y.key: y.left = node else: y.right = node if node.parent == None: node.color = 0 return if node.parent.parent == None: return self.balance_insert(node) def get_root(self): return self.root def _transplant(self, u, v): if u.parent == None: self.root = v elif u == u.parent.left: u.parent.left = v else: u.parent.right = v v.parent = u.parent def _minimum(self, node): while node.left != self.TNULL: node = node.left return node def _fix_delete(self, x): while x != self.root and x.color == 0: if x == x.parent.left: s = x.parent.right if s.color == 1: s.color = 0 x.parent.color = 1 self.left_rotate(x.parent) s = x.parent.right if s.left.color == 0 and s.right.color == 0: s.color = 1 x = x.parent else: if s.right.color == 0: s.left.color = 0 s.color = 1 self.right_rotate(s) s = x.parent.right s.color = x.parent.color x.parent.color = 0 s.right.color = 0 self.left_rotate(x.parent) x = self.root else: s = x.parent.left if s.color == 1: s.color = 0 x.parent.color = 1 self.right_rotate(x.parent) s = x.parent.left if s.left.color == 0 and s.left.color == 0: s.color = 1 x = x.parent else: if s.left.color == 0: s.right.color = 0 s.color = 1 self.left_rotate(s) s = x.parent.left s.color = x.parent.color x.parent.color = 0 s.left.color = 0 self.right_rotate(x.parent) x = self.root x.color = 0 def delete_node_helper(self, node, key): z = self.TNULL while node != self.TNULL: if node.key == key: z = node if node.key <= key: node = node.right else: node = node.left if z == self.TNULL: print(\\"Couldn\'t find key in the tree\\") return y = z y_original_color = y.color if z.left == self.TNULL: x = z.right self._transplant(z, z.right) elif z.right == self.TNULL: x = z.left self._transplant(z, z.left) else: y = self._minimum(z.right) y_original_color = y.color x = y.right if y.parent == z: x.parent = y else: self._transplant(y, y.right) y.right = z.right y.right.parent = y self._transplant(z, y) y.left = z.left y.left.parent = y y.color = z.color if y_original_color == 0: self._fix_delete(x) def delete(self, key): self.delete_node_helper(self.root, key) def search(self, key): node = self.search_tree(key) if node == self.TNULL: return None else: return node"},{"question":"Context You are working on a digital signal processing project that involves frequent computation of the Discrete Fourier Transform (DFT) of signals. To optimize the performance of your system, you decide to implement the Cooley-Tukey Fast Fourier Transform (FFT) algorithm. Function Signature Write a function `fft` that computes the Fast Fourier Transform of a given list of complex numbers. The input list has a size of N, where N is a power of 2. ```python def fft(x): # Your code here ``` # Input - A list of complex numbers `x` with length N, where N is a power of 2 (1 ≤ N ≤ 2^14). # Output - A list of complex numbers representing the DFT of the input. # Constraints - N is guaranteed to be a power of 2. - The input list can contain very small or large numbers and should be handled efficiently. # Example ```python print(fft([2.0+2j, 1.0+3j, 3.0+1j, 2.0+2j])) # Output: [8+8j, 2j, 2-2j, -2+0j] ``` Notes 1. You should use a recursive approach for the Cooley-Tukey FFT as provided in the code snippet. 2. Ensure your implementation handles complex arithmetic correctly. # Clarifications 1. Explain how to handle edge cases such as a list of length 1. 2. Discuss how your method ensures that the result is correct despite potential floating-point precision issues. Good luck! This exercise will test your ability to implement a fundamental algorithm efficiently and correctly.","solution":"import cmath def fft(x): Compute the Fast Fourier Transform of a list of complex numbers. Args: - x: list of complex numbers of length N, where N is a power of 2 Returns: - List of complex numbers representing the DFT of the input. N = len(x) if N <= 1: return x even = fft(x[0::2]) odd = fft(x[1::2]) T = [cmath.exp(-2j * cmath.pi * k / N) * odd[k] for k in range(N // 2)] return [even[k] + T[k] for k in range(N // 2)] + [even[k] - T[k] for k in range(N // 2)] # Testing the function with the provided example result = fft([2.0+2j, 1.0+3j, 3.0+1j, 2.0+2j]) print(result) # Should print approximately: [8+8j, 2j, 2-2j, -2+0j]"},{"question":"# Next Permutation Finder **Objective:** Write a function that finds the next higher number with the same set of digits as the given input number. If no such number exists, return -1. **Function Specification:** ```python def next_bigger(num: int) -> int: pass ``` **Input:** * An integer `num` (1 ≤ num ≤ 10^9). **Output:** * An integer representing the next permutation of digits. Return -1 if no higher permutation exists. **Constraints:** * The input number will always be a positive integer. **Performance Requirements:** * The algorithm should run in O(n) time complexity, where n is the number of digits in the input number. * The space complexity should ideally be O(n). **Scenario:** You’ve been asked to help improve a legacy system that deals with ticketing permutations. To integrate into this system, you need to implement a function that finds the next lexicographical permutation of a given ticket number. If the ticket number is already in its highest possible permutation, return -1. # Examples: 1. Input: `38276` Output: `38627` 2. Input: `12345` Output: `12354` 3. Input: `54321` Output: `-1` 4. Input: `999` Output: `-1` **Notes:** * Function should handle single-digit numbers by returning -1 since no greater permutation is possible. * The function will be tested with various edge cases like numbers with repeated digits. Implement the function and ensure it passes the provided test cases.","solution":"def next_bigger(num: int) -> int: digits = list(str(num)) n = len(digits) if n == 1: return -1 i = n - 2 while i >= 0 and digits[i] >= digits[i + 1]: i -= 1 if i == -1: return -1 j = n - 1 while digits[j] <= digits[i]: j -= 1 digits[i], digits[j] = digits[j], digits[i] digits = digits[:i + 1] + digits[i + 1:][::-1] return int(\\"\\".join(digits))"},{"question":"Scenario You are implementing a multiplication feature for a custom calculator which processes very large non-negative integers and returns the product as a string. Bypassing built-in large integer support is a must, to enforce understanding of low-level arithmetic implementation. Task Write a function `multiply(num1: str, num2: str) -> str` that multiplies two large non-negative integers given as strings, and returns the product as a string. You must not convert the strings to integers directly, nor use any built-in BigInteger library. Please adhere to the constraints and performance requirements. Input * `num1`, `num2`: Strings representing non-negative integers, where the length of both strings is less than 110. Output * A string representing the product of `num1` and `num2`. Constraints & Requirements * No leading zeros will be present in the inputs. * Handle edge cases such as multiplication involving zeros. * Ensure that your algorithm is efficient and manages memory properly. ```python def multiply(num1: str, num2: str) -> str: # Your code here # Examples print(multiply(\\"1\\", \\"23\\")) # Output: \\"23\\" print(multiply(\\"23\\", \\"23\\")) # Output: \\"529\\" print(multiply(\\"100\\", \\"23\\")) # Output: \\"2300\\" print(multiply(\\"100\\", \\"10000\\")) # Output: \\"1000000\\" ```","solution":"def multiply(num1: str, num2: str) -> str: if num1 == \\"0\\" or num2 == \\"0\\": return \\"0\\" # Initialize result array to store the product result = [0] * (len(num1) + len(num2)) # Reverse the numbers to make addition easier num1 = num1[::-1] num2 = num2[::-1] # Multiply each digit and add the result to the proper index in the result array for i in range(len(num1)): for j in range(len(num2)): digit_product = int(num1[i]) * int(num2[j]) result[i + j] += digit_product # Carry processing result[i + j + 1] += result[i + j] // 10 result[i + j] %= 10 # Remove leading zeros from the result array while len(result) > 1 and result[-1] == 0: result.pop() # Convert result array back to a string result = result[::-1] return \'\'.join(map(str, result))"},{"question":"You are given a function `num_digits(n)` that returns the number of digits in a given integer `n`. However, this function currently uses a logarithmic method to achieve this. Your task is to re-implement this function without using logarithms or any built-in functions that simplify this task. Objective: Write a function `num_digits_without_log(n)` that returns the number of digits in the integer `n`. Input: - An integer `n` where -10^{18} leq n leq 10^{18} . Output: - An integer representing the number of digits in `n`. Constraints: - You cannot use any logarithmic, string conversion or direct built-in digit counting functions like `len(str(n))`. - You need to handle negative integers by considering their absolute value. - Ensure your implementation handles zero as a special case correctly. Example: ```python assert num_digits_without_log(12345) == 5 assert num_digits_without_log(-12345) == 5 assert num_digits_without_log(0) == 1 assert num_digits_without_log(9876543210) == 10 ``` Edge Cases: - Single digit numbers both positive and negative, including zero. - Very large positive and negative integers.","solution":"def num_digits_without_log(n): Returns the number of digits in the integer n without using logarithms, string conversion, or any built-in digit counting functions. if n == 0: return 1 if n < 0: n = -n digit_count = 0 while n > 0: n //= 10 digit_count += 1 return digit_count"},{"question":"Context You are working on a web scraper project where you need to extract and catalog domain names from a list of URLs. The URLs may vary in format, including the presence of protocols (http, https), and potentially a \\"www\\" prefix. Your task is to develop a function that can robustly handle these variations and accurately extract the domain name. Task Write a function `extract_domain_name(url)` that receives a URL string and returns the domain name without the \\"http://\\" or \\"https://\\" protocols and the \\"www\\" prefix. Requirements: 1. Do not use any built-in libraries such as `re` (regular expressions) or `urlparse`. Use only basic string operations such as `.split()`. 2. Consider various edge cases like presence or absence of \\"www\\", and malformed URLs. Input - `url` (string): A URL string, e.g., \\"http://github.com/SaadBenn\\". Output - (string): The domain name, e.g., \\"github\\". Constraints 1. The input URL will not be an empty string. 2. The URL will contain at least one period (.) character. 3. The domain name will consist only of alphabetic characters or hyphens. Example ```python extract_domain_name(\\"http://github.com/SaadBenn\\") # Output: \\"github\\" extract_domain_name(\\"http://www.zombie-bites.com\\") # Output: \\"zombie-bites\\" extract_domain_name(\\"https://www.cnet.com\\") # Output: \\"cnet\\" ``` Implement the `extract_domain_name` function adhering to the provided constraints and requirements.","solution":"def extract_domain_name(url): Extracts the domain name from a given URL, omitting the protocol and \\"www\\" prefix. # Remove protocol if present if \\"://\\" in url: url = url.split(\\"://\\")[1] # Remove \\"www\\" if present if url.startswith(\\"www.\\"): url = url[4:] # The domain name would be the first part before the first slash or dot domain = url.split(\\"/\\")[0].split(\\".\\")[0] return domain"},{"question":"# Segment Tree Range Query Implementation Context: You are tasked with implementing a data structure that can efficiently answer range queries on an array. For instance, given an array of numbers, you may need to quickly find the maximum value or the sum of numbers in a specified sub-array. Task: Implement a `SegmentTree` class that supports efficient range queries by constructing a segment tree. Your implementation should support any associative function like sum, min, max etc. Function Specifications: 1. **Constructor**: - `__init__(self, arr: List[int], function: Callable[[int, int], int]) -> None` - Initialises the segment tree with a given array and an associative function. 2. **make_tree(self, i: int, l: int, r: int) -> None`: - Recursive function to build the segment tree. 3. **query(self, L: int, R: int) -> int**: - Provides the result of the associative function for the specified range [L, R]. 4. Function should handle inputs efficiently and prevent unnecessary recalculations. Input: * An array `arr` of `n` integers. * An associative function like sum, min, max that will be used for segment operations. Output: * The result of the associative function applied to elements between index L and R, inclusive. Example: ```python # Example usage: segment_tree = SegmentTree([2, 4, 5, 3, 4], max) print(segment_tree.query(2, 4)) # Output should be 5 (max value in range 2 to 4) print(segment_tree.query(0, 3)) # Output should be 5 (max value in range 0 to 3) segment_tree = SegmentTree([4, 5, 2, 3, 4, 43, 3], sum) print(segment_tree.query(1, 4)) # Output should be 14 (5+2+3+4) ``` **Constraints**: * You may assume that the number of queries is proportional to the size of the array. * Optimize for both time and space complexity as far as possible. **Performance Requirements**: * Your code should perform each query in (O(log N)) time. **Note**: You must handle cases where the query range might be invalid or out of bounds gracefully.","solution":"from typing import List, Callable class SegmentTree: def __init__(self, arr: List[int], function: Callable[[int, int], int]): self.n = len(arr) self.arr = arr self.tree = [None] * (4 * self.n) self.function = function self.make_tree(0, 0, self.n - 1) def make_tree(self, i: int, l: int, r: int) -> int: if l == r: self.tree[i] = self.arr[l] return self.tree[i] mid = (l + r) // 2 left_child = self.make_tree(2 * i + 1, l, mid) right_child = self.make_tree(2 * i + 2, mid + 1, r) self.tree[i] = self.function(left_child, right_child) return self.tree[i] def query(self, L: int, R: int) -> int: return self._query(0, 0, self.n - 1, L, R) def _query(self, i: int, l: int, r: int, L: int, R: int) -> int: if R < l or L > r: raise IndexError(\\"Query range is out of bounds\\") if L <= l and r <= R: return self.tree[i] mid = (l + r) // 2 if R <= mid: return self._query(2 * i + 1, l, mid, L, R) elif L > mid: return self._query(2 * i + 2, mid + 1, r, L, R) left_result = self._query(2 * i + 1, l, mid, L, R) right_result = self._query(2 * i + 2, mid + 1, r, L, R) return self.function(left_result, right_result)"},{"question":"# Radix Sort Implementation and Modification Challenge Objective You are asked to implement the Radix Sort algorithm and modify it to handle negative integers effectively. Additionally, you will evaluate and optimize its performance on different input sizes. Task 1. **Implement Radix Sort**: Write a function `radix_sort(arr)` that sorts a given list of integers. 2. **Handle Negative Numbers**: Modify the function to sort lists that may contain negative numbers. 3. **Optimization**: Assess the implementation and identify areas where time or space efficiency can be improved. Function Signature ```python def radix_sort(arr: List[int]) -> List[int]: pass ``` Expected Input and Output - **Input**: A list of integers `arr` which may include negative numbers. - **Output**: A sorted list of integers. Constraints - The list may contain up to 100,000 elements. - Each element can range from -1,000,000 to 1,000,000. Performance Requirements - The optimized solution should aim to sort the list in linear time complexity considering practical constraints. - Space complexity should be minimized while ensuring the solution remains feasible. Example ```python input_list = [170, 45, 75, -90, -802, 24, 2, 66] sorted_list = radix_sort(input_list) print(sorted_list) # Output: [-802, -90, 2, 24, 45, 66, 75, 170] ``` Notes - Include error handling for cases such as empty lists. - Evaluate and improve the performance by considering the space overhead introduced by queues and possible optimizations. Context Radix Sort is a powerful algorithm for sorting non-negative integers efficiently. Enhancing it to handle a broader range of numbers and optimizing its performance will deepen your understanding of sorting algorithms and their practical applications.","solution":"def radix_sort(arr): Perform Radix Sort on the given list of integers, including negative numbers. if not arr: return [] # Helper function to do counting sort based on a specific digit def counting_sort(arr, exp): n = len(arr) output = [0] * n count = [0] * 10 # Store count of occurrences in count[] for i in range(n): index = abs(arr[i]) // exp count[index % 10] += 1 # Change count[i] so that count[i] contains the actual position # of this digit in output[] for i in range(1, 10): count[i] += count[i - 1] # Build the output array for i in range(n - 1, -1, -1): index = abs(arr[i]) // exp output[count[index % 10] - 1] = arr[i] count[index % 10] -= 1 # Copy the output array to arr[], so that arr now # contains sorted numbers according to current digit for i in range(n): arr[i] = output[i] # Negative number handling def divide_negatives_and_positives(arr): negatives = [] positives = [] for num in arr: if num < 0: negatives.append(num) else: positives.append(num) return negatives, positives def sort_and_merge_negatives_and_positives(negatives, positives): negatives = [-num for num in negatives] max1 = max(negatives) if negatives else 0 max2 = max(positives) if positives else 0 max_val = max(max1, max2) exp = 1 while max_val // exp > 0: counting_sort(negatives, exp) counting_sort(positives, exp) exp *= 10 negatives = [-num for num in reversed(negatives)] return negatives + positives negatives, positives = divide_negatives_and_positives(arr) sorted_arr = sort_and_merge_negatives_and_positives(negatives, positives) return sorted_arr"},{"question":"Maximum Flow Problem Context: You are given a directed graph represented as an `n x n` adjacency matrix, where each element `graph[i][j]` represents the capacity of a directed edge from node `i` to node `j`. Your task is to compute the maximum possible flow from the source node (node 0) to the sink node (node n-1). The graph is guaranteed to have at least one path from the source to the sink. Problem Statement: Implement the function `max_flow(graph: List[List[int]]) -> int` that computes the maximum flow of the given graph using the BFS based approach outlined in Edmonds-Karp algorithm. Input: - `graph`: A 2D list representing the adjacency matrix of the directed graph. The element `graph[i][j]` is a non-negative integer and represents the capacity of the edge from node `i` to node `j`. If there is no edge, the capacity is 0. Output: - Return an integer representing the maximum flow from the source (0) to the sink (n-1). Constraints: - The graph will always have at least 2 nodes. - The capacity values will be integers in the range [0, 100]. - The graph contains at most 100 nodes. Example: ```python graph = [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]] # The maximum possible flow is 23. print(max_flow(graph)) # Output: 23 ``` Approach: You may follow these steps: 1. Initialize variables to track the flow, visited nodes, and use BFS to find augmenting paths. 2. Update the residual capacities of the edges and reverse edges along the augmenting path. 3. Repeat until no more augmenting paths can be found using BFS. You are encouraged to think about any potential optimizations and ensure to handle typical edge cases mentioned.","solution":"from collections import deque def bfs_capacity(graph, source, sink, parent): Returns True if there is an augmenting path from source to sink in residual graph. Also fills parent[] to store the path. visited = [False] * len(graph) queue = deque([source]) visited[source] = True while queue: u = queue.popleft() for ind, val in enumerate(graph[u]): if visited[ind] == False and val > 0: queue.append(ind) visited[ind] = True parent[ind] = u return visited[sink] def max_flow(graph): Computes the maximum flow from source (0) to sink (n-1) in a directed graph. source = 0 sink = len(graph) - 1 parent = [-1] * len(graph) max_flow = 0 while bfs_capacity(graph, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, graph[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] graph[u][v] -= path_flow graph[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow"},{"question":"# Bit Manipulation Challenge Description You are provided a function `remove_bit(num, i)` that takes an integer `num` and an index `i`, and removes the bit at index `i` from the binary representation of `num`. Specifically, removing a bit involves shifting all bits to the left of `i` and concatenating the remaining right part. Objective Implement the `remove_bit` function to meet the specified requirements and handle various edge cases effectively. Function Signature ```python def remove_bit(num: int, i: int) -> int: # Your code here ``` Input * `num` (0 <= num <= 2^31 - 1): A non-negative integer. * `i` (0 <= i < number of bits in the binary representation of `num`): An index of the bit to remove. Output * Returns the integer value after removing the bit at position `i`. Example ```python # Example 1 num = 21 # Binary: 10101 i = 2 assert remove_bit(num, i) == 9 # Binary: 1001 # Example 2 num = 21 # Binary: 10101 i = 4 assert remove_bit(num, i) == 5 # Binary: 101 # Example 3 num = 10 # Binary: 1010 i = 0 assert remove_bit(num, i) == 5 # Binary: 101 ``` Constraints * Implement the function efficiently, targeting O(1) time complexity. * Ensure proper edge case handling, such as removing the first or last bit. * Verify inputs to avoid out-of-bound errors (valid indexes).","solution":"def remove_bit(num: int, i: int) -> int: Removes the bit at index i from the binary representation of num. # Let\'s separate the bits around the index i left_part = num >> (i + 1) # Shift left part to the right right_part = num & ((1 << i) - 1) # Mask right part to keep the bits return (left_part << i) | right_part # Combine left shifted left part and right part"},{"question":"# RSA Encryption Algorithm – Function Expansion Task Context RSA encryption is a cornerstone of modern cryptography providing secure data transmission. Given the importance of this algorithm, understanding its inner workings and implementation details are crucial. Task Description Expand the RSA key generation algorithm by adding additional validation and optimization steps. You are to implement two functions: `generate_large_prime(bits, seed=None)` optimized for large prime generation, and `extended_modinv(a, m)` for efficient modular inverse calculation using the Extended Euclidean Algorithm. Instructions 1. **Function 1**: `generate_large_prime(bits, seed=None)` * **Input**: * `bits`: Number of bits for the prime number. * `seed`: Optional seed for random number generation. * **Output**: * A prime number with the specified bit length. * **Constraints**: * Ensure the prime is sufficiently large and optimize prime checking. 2. **Function 2**: `extended_modinv(a, m)` * **Input**: * `a`: Integer for which the modular inverse is to be found. * `m`: Modulus. * **Output**: * The modular inverse of `a` mod `m`. * **Constraints**: * Efficiently compute using the Extended Euclidean Algorithm. Return a tuple of ((n, e, d)) using the enhanced functions and verify the correctness of the key generation. Example Input/Output **Input**: `16` **Output**: `(n, e, d)` tuple, where each is an integer. **Input**: `20` **Output**: `(n, e, d)` tuple, where each is an integer. Function Signatures ```python def generate_large_prime(bits, seed=None): # [Your implementation here] def extended_modinv(a, m): # [Your implementation here] ``` Constraints - Prime numbers should have exactly the specified bit length. - Modular inverse calculation should be optimized. - Handle edge cases appropriately.","solution":"import random from sympy import isprime def generate_large_prime(bits, seed=None): Generates a large prime number with the specified bit length. Parameters: bits (int): The desired bit length of the prime number. seed (int, optional): Optional seed for random number generation. Returns: int: A prime number with the specified bit length. if seed is not None: random.seed(seed) while True: # Generate a random number of the specified bit length candidate = random.getrandbits(bits) # Ensure it is odd and has the exact bit length candidate |= (1 << (bits - 1)) | 1 if isprime(candidate): return candidate def extended_modinv(a, m): Computes the modular inverse of a mod m using the Extended Euclidean Algorithm. Parameters: a (int): The number for which modular inverse is to be found. m (int): The modulus. Returns: int: The modular inverse of a mod m. if m == 1: return 0 m0, x0, x1 = m, 0, 1 while a > 1: # q is quotient q = a // m m, a = a % m, m x0, x1 = x1 - q * x0, x0 return x1 + m0 if x1 < 0 else x1"},{"question":"As a software developer for a linguistic processing application, you are required to implement a function that processes strings by reversing the positions of all the vowels while leaving the rest of the string intact. This operation will help in an encryption mechanism that obfuscates the identifiable linguistic patterns in the input text. # Requirements: 1. **Function Signature**: ```python def reverse_vowels(s: str) -> str: ``` 2. **Input**: - A single string `s` containing a mix of alphabetic characters (both uppercase and lowercase). 3. **Output**: - A string where the vowels have been reversed in place and all other characters remain in their original positions. 4. **Vowels**: - The vowels that need to be considered for this operation are `A, E, I, O, U` and their lowercase counterparts `a, e, i, o, u`. # Constraints: - The length of the string ( 0 leq |s| leq 3 times 10^4 ). # Examples: 1. **Example 1**: ```python Input: \\"hello\\" Output: \\"holle\\" ``` 2. **Example 2**: ```python Input: \\"leetcode\\" Output: \\"leotcede\\" ``` 3. **Example 3**: ```python Input: \\"\\" Output: \\"\\" ``` # Performance Requirements: - The algorithm should run in O(n) time complexity, where n is the length of the string. - Space complexity should be O(n), considering string to list conversions. Implement the function `reverse_vowels(s: str) -> str` to correctly solve the problem following the requirements and constraints given.","solution":"def reverse_vowels(s: str) -> str: Reverse the vowels in the input string while leaving other characters in their original positions. vowels = \\"aeiouAEIOU\\" s_list = list(s) left, right = 0, len(s_list) - 1 while left < right: if s_list[left] in vowels and s_list[right] in vowels: s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 if s_list[left] not in vowels: left += 1 if s_list[right] not in vowels: right -= 1 return \\"\\".join(s_list)"},{"question":"Implement a function to compute the exponentiation using the binary exponentiation algorithm. The function should support both iterative and recursive approaches and include an optional modulus parameter for modular exponentiation. Also, optimize the function for handling edge cases and discuss potential improvements. # Function Signature: ```python def binary_exponentiation(a: int, n: int, mod: int = None, method: str = \'iterative\') -> int: This function computes a^n (a raised to the power n). If \'mod\' is specified, it returns the result modulo \'mod\'. The \'method\' parameter determines whether to use the \'iterative\' or \'recursive\' version of the algorithm. :param a: Base of the exponentiation (integer) :param n: Exponent (non-negative integer) :param mod: (Optional) Modulus value for modular exponentiation (integer) :param method: Specifies which approach to use (\'iterative\' or \'recursive\') :return: Result of a^n (or a^n % mod if mod is provided) pass ``` # Constraints: 1. (0 leq a, n leq 10^9) 2. If mod is specified: (1 leq mod leq 10^9 + 7) 3. Method chosen should be \'iterative\' or \'recursive\'. Default to \'iterative\' if not specified. # Input: * Four inputs - a, n, mod (optional), method (optional) # Output: * Return the computed value (int) # Examples: ```python # Without modulus print(binary_exponentiation(2, 10)) # Expected: 1024 print(binary_exponentiation(3, 5, method=\'recursive\')) # Expected: 243 # With modulus print(binary_exponentiation(2, 10, 1000)) # Expected: 24 print(binary_exponentiation(3, 5, 100, method=\'recursive\')) # Expected: 43 ``` # Evaluation Criteria: * Correctness of implementation (handling edge cases) * Efficiency of algorithm (time and space complexity) * Handling optional parameters correctly (mod, method) * Clean and readable code with comments","solution":"def binary_exponentiation(a: int, n: int, mod: int = None, method: str = \'iterative\') -> int: def iterative_exponentiation(base, exp, mod_value): result = 1 while exp > 0: if exp % 2 == 1: result = (result * base) % mod_value if mod_value is not None else result * base base = (base * base) % mod_value if mod_value is not None else base * base exp //= 2 return result def recursive_exponentiation(base, exp, mod_value): if exp == 0: return 1 half = recursive_exponentiation(base, exp // 2, mod_value) half = (half * half) % mod_value if mod_value is not None else half * half if exp % 2 != 0: half = (half * base) % mod_value if mod_value is not None else half * base return half if method not in [\'iterative\', \'recursive\']: raise ValueError(\\"Method must be either \'iterative\' or \'recursive\'\\") mod_value = mod if mod is not None else None if method == \'iterative\': return iterative_exponentiation(a, n, mod_value) else: return recursive_exponentiation(a, n, mod_value)"},{"question":"Objective Write a Python function that validates whether given words can be typed using letters from only one row on an American keyboard. Scenario Imagine you are developing a typing tutor application where the user is required to type quickly using only one specific row of the keyboard. Function Specifications Implement the function `find_keyboard_row(words)` that will: 1. Take a list of strings `words` as input. 2. Return a list of strings that can be typed using letters from only one row on an American keyboard. Input and Output Formats **Input**: A list of strings where each string represents a word. ```python words = [\\"Hello\\", \\"Alaska\\", \\"Dad\\", \\"Peace\\"] ``` **Output**: A list of strings from the input that can be typed using one row of the keyboard. ```python output = [\\"Alaska\\", \\"Dad\\"] ``` Constraints * All inputs will be valid strings containing only alphabets. * Input list can be empty. Performance Requirements Your function should run efficiently with a time complexity of O(n * m) where `n` is the number of words and `m` is the average length of each word. Edge Cases * Words that have mixed case, e.g., \\"Hello\\". * Single letter words. * All words from the input list can be from different rows, resulting in an empty output list. Function Signature ```python def find_keyboard_row(words): # Your implementation goes here ``` Example Given the input list of words `[\\"Hello\\", \\"Alaska\\", \\"Dad\\", \\"Peace\\"]`, the function should return `[\\"Alaska\\", \\"Dad\\"]` as these words can be typed using letters from only one row of the keyboard.","solution":"def find_keyboard_row(words): This function takes a list of words and returns a list of words that can be typed using letters from only one row of an American keyboard. # Define the sets for each row of the keyboard row1 = set(\\"qwertyuiop\\") row2 = set(\\"asdfghjkl\\") row3 = set(\\"zxcvbnm\\") def can_be_typed(word): Check if a word can be typed using one keyboard row lower_word = set(word.lower()) return lower_word <= row1 or lower_word <= row2 or lower_word <= row3 return [word for word in words if can_be_typed(word)]"},{"question":"# Quick Sort Function Implementation You are required to write a quick sort function that sorts an array of integers. Your implementation should handle the specified edge cases efficiently and ensure optimal performance. Function Signature ```python def quick_sort(arr: list[int]) -> list[int]: pass ``` Input - A list of integers `arr` (1 <= len(arr) <= 10^5, -10^9 <= arr[i] <= 10^9) Output - A list of integers sorted in ascending order. Constraints - Optimize the function to prevent worst-case scenarios (consider different pivot choices). - Handle large datasets efficiently. - Ensure that the sorting function performs in place to adhere to space constraints. Example ```python assert quick_sort([3, 6, 8, 10, 1, 2, 1]) == [1, 1, 2, 3, 6, 8, 10] assert quick_sort([-1, -1, 0, 5, 5, -2, -2]) == [-2, -2, -1, -1, 0, 5, 5] assert quick_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5] assert quick_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5] ``` Performance Requirements - The function should achieve O(n log n) on average. - Use an optimized pivot selection method to prevent degenerative cases. *Hints*: Consider edge cases and improve performance with an intelligent pivot selection strategy.","solution":"def quick_sort(arr: list[int]) -> list[int]: def partition(low, high): pivot = arr[(low + high) // 2] # Using middle element as pivot for better average performance while low <= high: while arr[low] < pivot: low += 1 while arr[high] > pivot: high -= 1 if low <= high: arr[low], arr[high] = arr[high], arr[low] low, high = low + 1, high - 1 return low def quick_sort_recursive(low, high): if low < high: pi = partition(low, high) quick_sort_recursive(low, pi - 1) quick_sort_recursive(pi, high) quick_sort_recursive(0, len(arr) - 1) return arr"},{"question":"# Num Digits Function Implementation Implement a function `num_digits(n)` that computes the number of digits in a given integer number `n`. Your function should handle both positive and negative integers as well as zero. The implementation must be efficient, with a constant time complexity of O(1). **Input Format**: - An integer `n` where `-10^18 <= n <= 10^18`. **Output Format**: - An integer indicating the number of digits in the number `n`. **Constraints**: - The function should correctly handle all integers within the given range. # Example Input ```python number = 12345 ``` Output ``` 5 ``` Input ```python number = -678 ``` Output ``` 3 ``` Input ```python number = 0 ``` Output ``` 1 ``` # Notes: - You must ensure your function works efficiently for all values within the given range. - Consider edge cases such as zero and negative numbers.","solution":"def num_digits(n): Returns the number of digits in the integer n. Parameters: n (int): The integer to count digits of. Returns: int: The number of digits in the absolute value of n. if n == 0: return 1 return len(str(abs(n)))"},{"question":"Graph Traversal Assessment # Context You are tasked with writing a function to determine whether a path exists between two nodes in an undirected graph. You will use graph traversal algorithms to achieve this. # Task Write two functions, `is_path_dfs` and `is_path_bfs`, that determine if there is a path between two given nodes in an undirected graph. Use Depth First Search (DFS) for `is_path_dfs` and Breadth First Search (BFS) for `is_path_bfs`. # Input * A dictionary `graph` representing an undirected graph where keys are node identifiers, and values are lists of adjacent nodes. * Two nodes, `start` and `end`, which are the identifiers of the starting and ending nodes. # Output * Return `True` if there is a path between `start` and `end`. * Return `False` otherwise. # Constraints * You can assume the graph does not contain self-loops or parallel edges. * The graph may not be connected. * Node identifiers are unique. * If `start` equals `end`, return `True`. # Example ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\'] } # Example Usage: print(is_path_dfs(graph, \'A\', \'E\')) # Output: True print(is_path_dfs(graph, \'A\', \'G\')) # Output: False print(is_path_bfs(graph, \'A\', \'E\')) # Output: True print(is_path_bfs(graph, \'A\', \'G\')) # Output: False ``` # Requirements * **Function Definitions**: * `def is_path_dfs(graph: Dict[str, List[str]], start: str, end: str) -> bool` * `def is_path_bfs(graph: Dict[str, List[str]], start: str, end: str) -> bool` * **Performance**: * Target O(V + E) time complexity for both DFS and BFS implementations. * Space complexity should be managed efficiently, especially for large graphs.","solution":"from collections import deque from typing import Dict, List def is_path_dfs(graph: Dict[str, List[str]], start: str, end: str) -> bool: Determines if there is a path between start and end nodes using Depth First Search (DFS). if start == end: return True visited = set() def dfs(node): if node == end: return True visited.add(node) for neighbor in graph.get(node, []): if neighbor not in visited: if dfs(neighbor): return True return False return dfs(start) def is_path_bfs(graph: Dict[str, List[str]], start: str, end: str) -> bool: Determines if there is a path between start and end nodes using Breadth First Search (BFS). if start == end: return True visited = set() queue = deque([start]) while queue: node = queue.popleft() if node == end: return True if node not in visited: visited.add(node) for neighbor in graph.get(node, []): if neighbor not in visited: queue.append(neighbor) return False"},{"question":"You are given an array of integers `nums` and an integer `target`. Write a function `two_sum` that finds and returns the indices of the two numbers in the array that add up to the target. You may assume that each input will have exactly one solution, and you may not use the same element twice. # Function Signature ```python def two_sum(nums: list[int], target: int) -> tuple[int, int]: ``` # Input * `nums`: A list of integers. - Constraints: `2 <= len(nums) <= 10^4`, `-10^9 <= nums[i] <= 10^9` * `target`: An integer. - Constraints: `-10^9 <= target <= 10^9` # Output * Returns a tuple of two integers representing the indices of the two numbers in the array that add up to the specified target. # Examples ```python assert two_sum([2, 7, 11, 15], 9) == (0, 1) assert two_sum([3, 2, 4], 6) == (1, 2) assert two_sum([3, 3], 6) == (0, 1) ``` # Note * You may not assume that the input array is sorted. * You should aim for an O(n) solution in terms of time complexity. # Additional Consideration 1. Ensure your solution handles large numbers efficiently. 2. Discuss potential edge cases in your reasoning and how your solution caters to them.","solution":"def two_sum(nums: list[int], target: int) -> tuple[int, int]: Finds the indices of the two numbers in the array that add up to the target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index raise ValueError(\\"No two sum solution\\")"},{"question":"# Binary Search Implementations Given a sorted list of integers, your task is to implement both iterative and recursive versions of the Binary Search algorithm. These functions will return the index of the target value if it is present in the list, otherwise, they should return -1. **Function Signatures**: ```python def iterative_binary_search(array: List[int], target: int) -> int: Parameters: array (List[int]): A sorted list of integers. target (int): The integer value to search for. Returns: int: The index of the target value if found, otherwise -1. pass def recursive_binary_search(array: List[int], low: int, high: int, target: int) -> int: Parameters: array (List[int]): A sorted list of integers. low (int): The starting index of the search interval. high (int): The ending index of the search interval. target (int): The integer value to search for. Returns: int: The index of the target value if found, otherwise -1. pass ``` # Constraints * The input array will have a maximum length of 10^6 elements. * The elements in the array will be within the range of [-10^9, 10^9]. * The target value will also be within the range of [-10^9, 10^9]. # Example ```python array1 = [-10, -5, 0, 3, 7, 9, 12, 15] target1 = 7 # iterative_binary_search(array1, target1) should return 4 # recursive_binary_search(array1, 0, len(array1) - 1, target1) should return 4 array2 = [1, 5, 9, 14, 20] target2 = 14 # iterative_binary_search(array2, target2) should return 3 # recursive_binary_search(array2, 0, len(array2) - 1, target2) should return 3 array3 = [2, 4, 6, 8, 10, 12] target3 = 5 # iterative_binary_search(array3, target3) should return -1 # recursive_binary_search(array3, 0, len(array3) - 1, target3) should return -1 ``` # Note * Ensure that your implementation is efficient and handles the edge cases appropriately. * Do not use any built-in search functions to implement the binary search logic.","solution":"def iterative_binary_search(array, target): Iteratively performs binary search to find the index of the target in the sorted array. Parameters: array (List[int]): A sorted list of integers. target (int): The integer value to search for. Returns: int: The index of the target value if found, otherwise -1. low, high = 0, len(array) - 1 while low <= high: mid = (low + high) // 2 if array[mid] == target: return mid elif array[mid] < target: low = mid + 1 else: high = mid - 1 return -1 def recursive_binary_search(array, low, high, target): Recursively performs binary search to find the index of the target in the sorted array. Parameters: array (List[int]): A sorted list of integers. low (int): The starting index of the search interval. high (int): The ending index of the search interval. target (int): The integer value to search for. Returns: int: The index of the target value if found, otherwise -1. if low > high: return -1 mid = (low + high) // 2 if array[mid] == target: return mid elif array[mid] < target: return recursive_binary_search(array, mid + 1, high, target) else: return recursive_binary_search(array, low, mid - 1, target)"},{"question":"You are given a number `n` and need to compute the n-th Fibonacci number, `F(n)`. You are required to implement a function that computes this value using a more efficient approach. # Requirements Implement a function `fib_optimized(n: int) -> int` that: * Takes an integer `n` as input. * Returns the n-th Fibonacci number. * Uses O(n) time complexity and O(1) space complexity for the computation. **Constraints**: * `0 <= n <= 10^7` # Example Input: ``` n = 10 ``` Output: ``` 55 ``` Explanation: The first 10 Fibonacci numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. Therefore, the 10-th Fibonacci number is 55. # Additional Information Your implementation should handle large values of `n` efficiently. Ensure to write clean, efficient code that adheres to the specified constraints.","solution":"def fib_optimized(n: int) -> int: Returns the n-th Fibonacci number using an optimized iterative approach. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"**Context:** Suppose you have been hired by a tech company to optimize their data processing system. One of their requirements is to enhance the performance of the sorting sub-routine in their system. The current system uses a heap sort algorithm and you are required to improve it by implementing the best strategies using your knowledge. **Problem Statement:** Given an array of integers `arr`, your task is to optimize the given `heap_sort` algorithm. Your goal is to implement a `hybrid_heap_sort` function that improves the performance of the existing solution. To facilitate your task, make use of both the max-heap and min-heap variants provided. You need to switch between max-heap and min-heap at given thresholds to gain performance benefits. Specifically, use max-heap for the first half of the sorting (i.e., while building the heap) and min-heap for the second half (i.e., while extracting elements in sorted order). # Function Signature ```python def hybrid_heap_sort(arr: [int]) -> [int]: pass ``` # Input: - `arr`: A list of integers, with length n (1 ≤ n ≤ 10^6). # Output: - Return the sorted list of integers in ascending order. # Constraints: - The function should be efficient with an overall time complexity of O(n log n). - Implementation must be in-place requiring O(1) additional space. # Example: ```python # Test Case 1 print(hybrid_heap_sort([3, 2, 5, 1, 7, 9, 8])) # Expected Output: [1, 2, 3, 5, 7, 8, 9] # Test Case 2 print(hybrid_heap_sort([-1, 6, 3, 2, 8, 5])) # Expected Output: [-1, 2, 3, 5, 6, 8] ``` # Performance Considerations: - Ensure your implementation handles edge cases (e.g., empty array, single element array, arrays with duplicate elements). - Discuss possible optimizations and their impact on time and space complexity in your code comments. # Notes: - Although simulations (iteration by iteration print) are provided in the code snippets, you do not need to use them in your final implementation. - Focus on the efficient switch between max-heap for building and min-heap for extraction to achieve a performant hybrid sort.","solution":"import heapq def hybrid_heap_sort(arr): Perform a hybrid heap sort using both max-heap and min-heap. The first half of sorting is done using max-heap (building heap), and the second half using min-heap (extracting elements in sorted order). n = len(arr) if n <= 1: return arr # Create a max-heap for the first half of sorting for i in range(n//2 - 1, -1, -1): heapify(arr, n, i) # Extract elements from the heap to place them in their correct sorted order for i in range(n-1, 0, -1): # Swap the root (maximum) with the last element arr[i], arr[0] = arr[0], arr[i] # Min-heapify the root element for the remaining part heapify(arr, i, 0) # Convert to min-heap to finalize the sorting heapq.heapify(arr) # Extract elements from min-heap in sorted order sorted_array = [heapq.heappop(arr) for _ in range(len(arr))] return sorted_array def heapify(arr, n, i): largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[left] > arr[largest]: largest = left if right < n and arr[right] > arr[largest]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify(arr, n, largest)"},{"question":"# Radix Sort Enhancement Challenge Context: You are given a list of non-negative integers that need to be sorted using the Radix Sort algorithm. The provided implementation successfully sorts the integers, but it needs to be enhanced to handle strings that represent large integer values (up to 1,000 digits). Task: Implement an enhanced version of the Radix Sort algorithm to handle a list of strings where each string represents a non-negative integer. Function Signature: ```python def enhanced_radix_sort(arr: List[str]) -> List[str]: pass ``` Input: * `arr`: A list of strings, each string representing a non-negative integer. (1 <= len(arr) <= 1000), (1 <= length of each string <= 1000). Output: * Returns a list of strings sorted in non-decreasing order of their numeric values. Constraints: * You must use digit-by-digit processing as in Radix Sort. * Your implementation should handle the cases where numbers have different lengths properly. * You need to ensure that the sorting remains stable. Example: ```python assert enhanced_radix_sort([\\"10\\", \\"1\\", \\"200\\", \\"30\\"]) == [\\"1\\", \\"10\\", \\"30\\", \\"200\\"] assert enhanced_radix_sort([\\"12345678901234567891\\", \\"12345678901234567890\\", \\"12345678901234567892\\"]) == [\\"12345678901234567890\\", \\"12345678901234567891\\", \\"12345678901234567892\\"] assert enhanced_radix_sort([\\"5\\", \\"500\\", \\"50\\", \\"5000\\", \\"50000\\"]) == [\\"5\\", \\"50\\", \\"500\\", \\"5000\\", \\"50000\\"] ``` Notes: * Consider pre-padding the strings with zeros (\'0\') to align the lengths of the numbers for easy processing. * Ensure that you handle edge cases like empty input gracefully. * Assume all input strings are valid non-negative integers without leading zeros (except \\"0\\" itself).","solution":"from typing import List def enhanced_radix_sort(arr: List[str]) -> List[str]: if not arr: return [] # Find the maximum length of the string in the list max_len = max(len(s) for s in arr) # Pad strings with zero to the left to make all strings of equal length arr = [s.zfill(max_len) for s in arr] # Perform Radix Sort starting from the least significant digit to the most significant digit for digit in range(max_len - 1, -1, -1): buckets = [[] for _ in range(10)] for number in arr: buckets[int(number[digit])].append(number) arr = [number for bucket in buckets for number in bucket] # Strip the padding zeros to return the original strings return [s.lstrip(\'0\') or \'0\' for s in arr]"},{"question":"You are given a binary tree implemented with a basic Node class. Implement a function called `inorder_with_duplicates` that will collect the values from the tree using in-order traversal. However, there is a twist: If a node\'s value appears more than once during the traversal (which means there are duplicate values in the tree), you should collect all instances of this node\'s value in a result list in their original order of appearance. Write the function `inorder_with_duplicates(root)` which will traverse the tree in-order and return a list of node values including duplicates in the order of their appearance during the traversal. Function Signature ```python def inorder_with_duplicates(root: Node) -> List[int]: # your implementation here ``` Input Format * `root` (Node): The root node of the binary tree. Output Format * A list of integers representing the node values in their in-order traversal order, including duplicates. Constraints * The tree can contain duplicate node values. * Tree can have up to 10^4 nodes. * Node value (`val`) can be a positive integer. Example **Input:** ``` Tree: 100 / 50 150 / / 25 75 125 175 75 ``` **Output:** ``` [25, 75, 75, 50, 100, 125, 150, 175] ``` **Explanation:** Following an in-order traversal, we iterate through the left subtree first. In the left subtree, we encounter 25, 75, and another 75. Therefore, the result contains both instances of 75 in the order they appear. Note The function should handle and return the results as described, maintaining the efficiency of O(n) time complexity and considering edge cases and performance constraints.","solution":"from typing import List class Node: def __init__(self, val: int, left: \'Node\' = None, right: \'Node\' = None): self.val = val self.left = left self.right = right def inorder_with_duplicates(root: Node) -> List[int]: Perform in-order traversal of a binary tree and collect node values, including duplicates in the order of their appearance during the traversal. result = [] def inorder(node: Node): if not node: return inorder(node.left) result.append(node.val) inorder(node.right) inorder(root) return result"},{"question":"# Base Conversion with Extended Digit Set You are requested to implement updated base conversion functions that support bases up to 62. The digit set for this extended range should include all digits (`0-9`), all uppercase letters (`A-Z`), and all lowercase letters (`a-z`). Task Implement two functions: 1. `int_to_base_extended(num, base)`: Converts an integer `num` to its string representation in a provided `base`. 2. `base_to_int_extended(str_to_convert, base)`: Converts a base-N string `str_to_convert` to its integer representation. # Function Signatures ```python def int_to_base_extended(num, base): :type num: int :type base: int :rtype: str def base_to_int_extended(str_to_convert, base): :type str_to_convert: str :type base: int :rtype: int ``` # Input and Output Formats * `int_to_base_extended(num, base)`: * **Input**: - `num` (int): The integer to be converted. Can be any integer. - `base` (int): The base for conversion (between 2 and 62 inclusive). * **Output**: - A string representing the number in the specified base. * `base_to_int_extended(str_to_convert, base)`: * **Input**: - `str_to_convert` (str): The string representing a number in the given base. - `base` (int): The base of the input string (between 2 and 62 inclusive). * **Output**: - An integer value corresponding to the input string. # Constraints * The base must be within the range [2, 62]. * The input strings for `base_to_int_extended` must be valid representations in the given base. # Example * For `int_to_base_extended(62, 16)`, the result is `\'3E\'`. * For `base_to_int_extended(\'3E\', 62)`, the function should return an equivalent decimal int (e.g., 232). # Guidelines 1. Ensure `int_to_base_extended` handles both positive and negative integers. 2. Validate that input strings in `base_to_int_extended` contain only valid characters for given base. 3. Use efficient string concatenation techniques when constructing the string result.","solution":"def int_to_base_extended(num, base): Converts an integer `num` to its string representation in a provided `base`. :type num: int :type base: int :rtype: str if base < 2 or base > 62: raise ValueError(\\"Base must be between 2 and 62 inclusive.\\") if num == 0: return \'0\' digits = \'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\' is_negative = num < 0 num = abs(num) result = [] while num: result.append(digits[num % base]) num //= base if is_negative: result.append(\'-\') return \'\'.join(reversed(result)) def base_to_int_extended(str_to_convert, base): Converts a base-N string `str_to_convert` to its integer representation. :type str_to_convert: str :type base: int :rtype: int if base < 2 or base > 62: raise ValueError(\\"Base must be between 2 and 62 inclusive.\\") digits = \'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\' digit_map = {digit: idx for idx, digit in enumerate(digits)} is_negative = str_to_convert[0] == \'-\' if is_negative: str_to_convert = str_to_convert[1:] num = 0 for char in str_to_convert: if char not in digit_map or digit_map[char] >= base: raise ValueError(f\\"Invalid character \'{char}\' for base {base}.\\") num = num * base + digit_map[char] return -num if is_negative else num"},{"question":"# Scenario You are asked to optimize the performance of a sorting function used in an embedded system with very limited memory. Given the constraints, you decide to work with the well-known Selection Sort algorithm due to its simplicity and in-place sorting characteristic. # Task Implement the `enhanced_selection_sort` function, optimizing it to reduce unnecessary swaps while preserving the main properties of the Selection Sort algorithm. The function should also handle arrays with repeated elements efficiently. # Input and Output * **Function Signature**: `def enhanced_selection_sort(arr: list) -> list` * **Input**: A list of numerical values, `arr` (0 <= len(arr) <= 10^5, all elements are integers). * **Output**: A list sorted in ascending order. # Constraints * Ensure minimal memory usage and in-place sorting. * Aim to reduce the total number of swaps made by the algorithm. # Example ``` Input: [64, 25, 12, 22, 11] Output: [11, 12, 22, 25, 64] Input: [64, 25, 25, 12, 22, 11] Output: [11, 12, 22, 25, 25, 64] ``` # Performance * Even though Selection Sort has a time complexity of (O(n^2)), the selected dataset is capped at (10^5) elements, and efficiency in terms of word operations (comparisons and swaps) must be optimized. Notes * Ensure that your function handles edge cases (e.g., empty list) appropriately. * Strive to minimize the total number of swaps when elements are already in the correct position.","solution":"def enhanced_selection_sort(arr): Function to perform in-place selection sort on the input list with minimized swaps. Parameters: arr (list): The list of integers to sort. Returns: list: The sorted list. n = len(arr) for i in range(n): min_index = i # Find the minimum element in the unsorted part of the array for j in range(i + 1, n): if arr[j] < arr[min_index]: min_index = j # Only swap if the found minimum is not already at the current position if min_index != i: arr[i], arr[min_index] = arr[min_index], arr[i] return arr"},{"question":"You are to implement a function that determines how many digits a given number (including negative numbers) has. Instead of using logarithmic calculations, you must develop a manual approach to ensure full numerical precision for any integer size. # Function Signature ```python def manual_num_digits(n: int) -> int: pass ``` # Input - `n` (int): An integer number which can be negative, positive, or zero. # Output - (int): The number of digits in the input number. # Constraints - The function should work for any integer value within the bounds of 64-bit integers. # Example Usage ```python assert manual_num_digits(1234567890) == 10 assert manual_num_digits(-12345) == 5 assert manual_num_digits(0) == 1 ``` # Implementation Details - Avoid using math library functions like `log10`. - Consider edge cases like `0` and large negative numbers. - You are guaranteed that input will fit within the standard integer range for your programming environment. # Performance Constraints - Your solution should run in O(d) time complexity, where d is the number of digits in `n`. # Context You are developing a utility to help format numbers cleanly inside a large system handling financial transactions. Ensuring accurate digit count is crucial for maintaining financial precision.","solution":"def manual_num_digits(n: int) -> int: Returns the number of digits in the given integer n, considering the number\'s sign. # Handle the case when n is zero if n == 0: return 1 # Make the number positive to handle digit count correctly n = abs(n) # Count digits manually digit_count = 0 while n > 0: n //= 10 digit_count += 1 return digit_count"},{"question":"**Problem Statement:** You are given a string `s`. Your task is to determine if the string can be constructed by taking a substring of it and appending multiple copies of the substring together. **Function Signature:** ```python def can_construct_from_repeating_substring(s: str) -> bool: :param s: A non-empty string :return: A boolean value stating whether the string can be constructed by repeating a substring ``` **Input:** - A single non-empty string `s` where 1 <= len(s) <= 10^4. **Output:** - Return `True` if the string can be constructed by repeating a substring of it. Otherwise, return `False`. **Examples:** 1. Input: `\\"abab\\"` Output: `True` Explanation: It\'s the substring \\"ab\\" repeated twice. 2. Input: `\\"aba\\"` Output: `False` Explanation: It doesn\'t match any repeating substring pattern. 3. Input: `\\"abcabcabcabc\\"` Output: `True` Explanation: It\'s the substring \\"abc\\" repeated four times. **Constraints:** - The input string will not be empty. - The input string will contain only lowercase Latin letters. **Additional Notes:** Consider edge cases such as: - Strings with single characters - Strings where no proper substring forms a repeating pattern - Strings which are prime length and contain no repeating patterns **Performance Requirements:** - Aim for an algorithm with linear time complexity O(n) for efficiency.","solution":"def can_construct_from_repeating_substring(s: str) -> bool: Determines if the given string can be constructed by repeating a substring. :param s: A non-empty string :return: A boolean value stating whether the string can be constructed by repeating a substring n = len(s) if n == 1: return False for i in range(1, n // 2 + 1): if n % i == 0: if s[:i] * (n // i) == s: return True return False"},{"question":"# Question: Advanced GCD and LCM Computation You are tasked with designing a function that can calculate both the greatest common divisor (GCD) and the least common multiple (LCM) of two non-negative integers. This function should improve on the traditional methods by employing bitwise operations where appropriate for efficiency gains. Your function should handle edge cases robustly and ensure optimal performance. Implement the function `gcd_lcm_advanced(a: int, b: int) -> Tuple[int, int]`: * **Input**: * `a` and `b`: Two non-negative integer inputs (0 <= a, b <= 10^9). * **Output**: * A tuple containing two integers, the GCD and the LCM of `a` and `b`. * **Constraints**: * Do not use third-party libraries. * Ensure the function works in O(log(min(a, b))) time complexity. * Raise a `ValueError` for invalid input values (e.g., negative integers, both inputs being zero). Examples: ```python # Example 1: gcd_lcm_advanced(24, 36) # Output: (12, 72) # Example 2: gcd_lcm_advanced(15, 0) # Output: (15, 0) # Example 3: gcd_lcm_advanced(7, 5) # Output: (1, 35) ``` Notes: * The GCD function should utilize bitwise operations similar to the `gcd_bit` for optimal performance. * The LCM calculation should be derived from the GCD result. * Handle edge cases such as one or both inputs being zero appropriately as per mathematical definitions.","solution":"def gcd_lcm_advanced(a, b): Calculate both GCD and LCM of two non-negative integers using bitwise operations. :param a: integer, first input :param b: integer, second input :return: tuple(int, int), GCD and LCM of a and b if a < 0 or b < 0 or (a == 0 and b == 0): raise ValueError(\\"Inputs must be non-negative integers, and not both zero.\\") def gcd(x, y): while y: x, y = y, x % y return x gcd_value = gcd(a, b) if gcd_value == 0: # happens when both a and b are zero lcm_value = 0 else: lcm_value = (a * b) // gcd_value return gcd_value, lcm_value"},{"question":"# Binary Search for Last Occurrence of an Element in a Sorted Array **Scenario**: You are building a search feature for a large-scale application, and your task is to efficiently find the last occurrence of a particular element in a sorted list. Given the dynamic nature of the data, you must ensure the solution handles various edge cases and maintains optimal performance. **Problem Statement**: Write a function `find_last_occurrence(nums, target)` that takes: - A sorted list of integers `nums`, - An integer `target`. The function should return the index of `target`\'s last occurrence in `nums`. If the `target` is not found in the list, return `-1`. # Input - `nums`: A list of integers sorted in increasing order. - `target`: An integer to search for in `nums`. # Output - An integer representing the index of the last occurrence of `target` in `nums`. Return `-1` if `target` is not present. # Constraints - You must not use any built-in functions that directly solve the problem. - The function should run with a time complexity of O(log n). # Examples ```python assert find_last_occurrence([1, 2, 2, 3, 3, 3, 4], 3) == 5 assert find_last_occurrence([1, 1, 1, 1, 1], 1) == 4 assert find_last_occurrence([1, 2, 3, 4, 5], 6) == -1 assert find_last_occurrence([], 3) == -1 assert find_last_occurrence([1, 2, 3, 4, 5], 4) == 3 ``` # Additional Information Ensure your code considers and handles the following: - The list can be empty. - The `target` might not be present in the list. - The list might contain all identical elements. # Function Signature ```python def find_last_occurrence(nums: List[int], target: int) -> int: pass ```","solution":"def find_last_occurrence(nums, target): Returns the index of the last occurrence of target in nums. If target does not exist in nums, returns -1. :param nums: List[int] - sorted list of integers :param target: int - the integer to search for :return: int - index of the last occurrence of target left, right = 0, len(nums) - 1 result = -1 # default return value if target is not found while left <= right: mid = left + (right - left) // 2 if nums[mid] == target: result = mid # found target, move right to find the last occurrence left = mid + 1 elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return result"},{"question":"# Comb Sort Implementation Challenge **Objective**: Implement the Comb Sort algorithm to sort a given list of integers. **Function Signature**: ```python def comb_sort(arr: List[int]) -> List[int]: Sorts the list of integers in ascending order using Comb Sort algorithm. :param arr: List of integers to be sorted. :return: List of sorted integers. ``` **Input Format**: * A list of integers, `arr` (0 <= len(arr) <= 10^5) where each integer is in the range `-10^9` to `10^9`. **Output Format**: * A list of integers sorted in ascending order. **Constraints**: * You should aim for an optimal shrink factor to improve efficiency. * Handle edge cases like empty lists and already sorted lists gracefully. * Ensure the solution is efficient both in terms of time and space. **Examples**: ```python assert comb_sort([64, 34, 25, 12, 22, 11, 90]) == [11, 12, 22, 25, 34, 64, 90] assert comb_sort([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7] assert comb_sort([]) == [] assert comb_sort([-1, -2, -3, -4]) == [-4, -3, -2, -1] ``` **Task**: Write a Python function `comb_sort(arr: List[int]) -> List[int]` that accomplishes the task as described above. Conduct thorough testing to ensure the correctness of your implementation against edge cases and large datasets.","solution":"from typing import List def comb_sort(arr: List[int]) -> List[int]: Sorts the list of integers in ascending order using Comb Sort algorithm. :param arr: List of integers to be sorted. :return: List of sorted integers. if not arr: # Handling the empty list case return arr gap = len(arr) shrink_factor = 1.3 sorted = False while not sorted: gap = int(gap / shrink_factor) if gap <= 1: gap = 1 sorted = True for i in range(len(arr) - gap): if arr[i] > arr[i + gap]: arr[i], arr[i + gap] = arr[i + gap], arr[i] sorted = False return arr"},{"question":"Given a binary tree, write a function `level_order_bottom` that returns the level order traversal of its nodes\' values from bottom to top. Each level of the tree should be represented as a list of integer values, and the final output should be a list of lists, where the first sublist contains the nodes at the bottom-most level of the tree and the last sublist contains the root node. # Input and Output Format * **Input**: A single input parameter `root` which represents the root of a binary tree. * **Output**: A list of lists, where each sublist contains the values of the nodes at a particular level starting from the bottom-most level to the root. # Constraints * The number of nodes in the tree can range from 0 to 10,000. * Node values are not necessarily unique. * Node structures have the following properties: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Example Example 1 ``` Input: 3 / 9 20 / 15 7 Output: [ [15,7], [9,20], [3] ] ``` Example 2 ``` Input: 1 / 2 3 / 4 Output: [ [4], [2, 3], [1] ] ``` # Instructions Write a function `level_order_bottom(root)` that takes in the root of the binary tree and returns the bottom-up level order traversal. Ensure that you handle edge cases, such as an empty binary tree, correctly.","solution":"from collections import deque from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_bottom(root: Optional[TreeNode]) -> List[List[int]]: Returns the bottom-up level order traversal of a binary tree. if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level_nodes = [] for _ in range(level_size): node = queue.popleft() level_nodes.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.insert(0, level_nodes) # Insert at the beginning to get bottom-up order return result"},{"question":"**Context**: You are tasked with creating a utility for handling conversions between various numeral systems which are widely used in computing, such as binary, decimal, and hexadecimal. **Problem Statement**: Implement two functions that convert between integer numbers and their string representations in different bases. 1. **Function 1**: `convert_to_base(num: int, base: int) -> str` 2. **Function 2**: `convert_from_base(s: str, base: int) -> int` # Function Details: `convert_to_base(num: int, base: int) -> str` * **Input**: - `num` (int): The integer number to convert. It can be positive or negative. - `base` (int): The base (between 2 and 36 inclusive) to convert the number to. * **Output**: - Returns a string representing the number in the base `base`. * **Constraints**: - The base must be between 2 and 36 inclusive. - Handle the case when `num` is zero. - Handle negative numbers correctly. `convert_from_base(s: str, base: int) -> int` * **Input**: - `s` (str): The string representation of the number in the specified base. - `base` (int): The base (between 2 and 36 inclusive) of the number representation. * **Output**: - Returns the integer value of the string in the base `base`. * **Constraints**: - The string `s` will be valid for the specified base. - Handle the case when the string represents a negative number. - Ensure the base is valid (between 2 and 36 inclusive). # Example: ```python assert convert_to_base(5, 2) == \'101\' assert convert_from_base(\'101\', 2) == 5 assert convert_to_base(-15, 16) == \'-F\' assert convert_from_base(\'-F\', 16) == -15 assert convert_to_base(0, 7) == \'0\' ``` # Additional Requirements: * Your function should not use Python\'s built-in `int` type conversion functions.","solution":"def convert_to_base(num, base): Converts an integer to a string in the specified base. if base < 2 or base > 36: raise ValueError(\\"Base must be between 2 and 36.\\") if num == 0: return \\"0\\" digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" is_negative = num < 0 num = abs(num) result = [] while num > 0: remainder = num % base result.append(digits[remainder]) num //= base if is_negative: result.append(\'-\') return \'\'.join(reversed(result)) def convert_from_base(s, base): Converts a string in the specified base to an integer. if base < 2 or base > 36: raise ValueError(\\"Base must be between 2 and 36.\\") digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" is_negative = s[0] == \'-\' if is_negative: s = s[1:] result = 0 for char in s: value = digits.index(char) result = result * base + value if is_negative: result = -result return result"},{"question":"Context: You\'ve been assigned a project in your machine learning class to optimize the operations on large sparse matrices. Given the rarity of non-zero elements, traditional matrix multiplication can be highly inefficient. Your task is to implement a function to multiply two sparse matrices efficiently. Objectives: 1. Implement an optimized function to multiply two sparse matrices. 2. Ensure your function skips the zero elements to save computation time. 3. Make use of appropriate data structures for handling the sparsity efficiently. Function Signature ```python def sparse_matrix_multiply(A: List[List[int]], B: List[List[int]]) -> List[List[int]]: Multiplies two sparse matrices A and B and returns the result. :param A: The first matrix, a 2D list of integers. :param B: The second matrix, a 2D list of integers. :return: The result of the multiplication, a 2D list of integers. pass ``` Input Format: * Two 2D lists, `A` and `B`, representing the matrices. * Each matrix will be represented as lists of lists where each sub-list represents a row of the matrix. * The number of columns in `A` will be equal to the number of rows in `B`. Output Format: * A 2D list representing the resulting matrix after multiplication. Constraints: * The matrices can contain both positive and negative integers, including zero. * The dimensions of `A` will be mxn and `B` will be nxk. * The size of matrices will not exceed 1000x1000. Example: ```python A = [ [1, 0, 0], [-1, 0, 3] ] B = [ [7, 0, 0], [0, 0, 0], [0, 0, 1] ] result = sparse_matrix_multiply(A, B) # Expected Output: # [ # [7, 0, 0], # [-7, 0, 3] # ] ``` Performance Requirements: * Your solution should handle the sparsity efficiently to run in a reasonable time frame for large matrices. * Aim to minimize unnecessary operations by leveraging the sparse nature of the matrices.","solution":"from typing import List def sparse_matrix_multiply(A: List[List[int]], B: List[List[int]]) -> List[List[int]]: Multiplies two sparse matrices A and B and returns the result. :param A: The first matrix, a 2D list of integers. :param B: The second matrix, a 2D list of integers. :return: The result of the multiplication, a 2D list of integers. # Dimensions of the matrices m, n = len(A), len(A[0]) n2, k = len(B), len(B[0]) # The result matrix result = [[0] * k for _ in range(m)] # Using dictionary to store non-zero values to exploit sparsity A_non_zero = {} B_non_zero = {} for i in range(m): for j in range(n): if A[i][j] != 0: if i not in A_non_zero: A_non_zero[i] = {} A_non_zero[i][j] = A[i][j] for i in range(n): for j in range(k): if B[i][j] != 0: if i not in B_non_zero: B_non_zero[i] = {} B_non_zero[i][j] = B[i][j] # Multiply matrices by only computing non-zero values for i in A_non_zero: for j in A_non_zero[i]: if j in B_non_zero: for l in B_non_zero[j]: result[i][l] += A_non_zero[i][j] * B_non_zero[j][l] return result"},{"question":"# Question Scenario You are tasked with processing large datasets involving integer values and need an efficient way to determine the number of digits in these integers. Instead of iterating through each digit individually, you want to utilize mathematical properties to achieve this in constant time. Task Implement a function named `count_digits` that takes an integer `n` as input and returns the number of digits in `n`. # Input - An integer `n` where `-10^12 <= n <= 10^12`. # Output - An integer representing the number of digits in `n`. # Constraints 1. The function should handle both positive and negative integers. 2. The function should return immediate output for zero. 3. Ensure the solution runs in constant time `O(1)`. # Example ```python count_digits(12345) -> 5 count_digits(-987654) -> 6 count_digits(0) -> 1 ``` Implementation Write the `count_digits` function to meet the specified requirements. ```python def count_digits(n): # Ensure input is handled correctly pass # Implement the logic based on the provided analysis and guidelines # Example usage print(count_digits(12345)) # Expected output: 5 print(count_digits(-987654)) # Expected output: 6 print(count_digits(0)) # Expected output: 1 ```","solution":"def count_digits(n): Returns the number of digits in the given integer n. # Handle the case when n is zero if n == 0: return 1 # Calculate the number of digits using the mathematical approach. return len(str(abs(n)))"},{"question":"# Coding Exercise: Custom Priority Queue Implementation You are tasked with implementing a custom priority queue that extends the provided `Queue` ADT, enforcing priority on elements. Elements with higher priority (denoted by lower numerical values) should be dequeued before elements with lower priority. Implement this priority queue based on the `LinkedListQueue`. Requirements: 1. Implement a `PriorityQueue` class inheriting from the `LinkedListQueue` class. 2. Add a `priority` parameter to the enqueue method, defaulting to 0. 3. Override the `enqueue` method to insert elements in the queue based on priority. 4. Ensure the `dequeue`, `peek`, `is_empty`, and `size` methods work efficiently and correctly without modifications. Input: * Calls to the `enqueue` method with elements and their respective priorities. * Calls to the `dequeue`, `peek`, `is_empty`, and `size` methods. Output: * The expected behavior of the `PriorityQueue` methods based on the priority of elements. Constraints: * Priorities are integers where smaller values have higher priority. * Perform all operations in O(n) time complexity where n is the number of elements in the queue. ```python # Your task is to implement the PriorityQueue class class PriorityQueue(LinkedListQueue): def enqueue(self, value, priority=0): Add an element to the queue with a given priority. Elements with higher priority (lower numerical value) are dequeued first. # Your code goes here # Other methods should be inherited from LinkedListQueue without modification # Example usage: pq = PriorityQueue() pq.enqueue(\\"task1\\", priority=2) pq.enqueue(\\"task2\\", priority=1) pq.enqueue(\\"task3\\", priority=3) print(pq.dequeue()) # Output: task2 (priority 1) print(pq.dequeue()) # Output: task1 (priority 2) print(pq.dequeue()) # Output: task3 (priority 3) ``` Evaluation Criteria: * Correctness: Your `PriorityQueue` should correctly maintain priority. * Efficiency: Operations should be optimal and adhere to the expected time complexity. * Robustness: Handle edge cases such as dequeueing from an empty queue gracefully.","solution":"class Node: def __init__(self, value, priority=0): self.value = value self.priority = priority self.next = None class LinkedListQueue: def __init__(self): self.head = None self.tail = None self._size = 0 def is_empty(self): return self.head is None def size(self): return self._size def enqueue(self, value): new_node = Node(value) if self.tail: self.tail.next = new_node self.tail = new_node if not self.head: self.head = new_node self._size += 1 def dequeue(self): if self.is_empty(): raise IndexError(\\"dequeue from empty queue\\") value = self.head.value self.head = self.head.next if self.head is None: self.tail = None self._size -= 1 return value def peek(self): if self.is_empty(): raise IndexError(\\"peek from empty queue\\") return self.head.value class PriorityQueue(LinkedListQueue): def enqueue(self, value, priority=0): new_node = Node(value, priority) if self.is_empty(): self.head = new_node self.tail = new_node else: if self.head.priority > priority: new_node.next = self.head self.head = new_node else: current = self.head while current.next and current.next.priority <= priority: current = current.next new_node.next = current.next current.next = new_node if new_node.next is None: self.tail = new_node self._size += 1 # Example usage: pq = PriorityQueue() pq.enqueue(\\"task1\\", priority=2) pq.enqueue(\\"task2\\", priority=1) pq.enqueue(\\"task3\\", priority=3)"},{"question":"# Unique BSTs Problem Given an integer `n`, write a function `num_trees(n)` that returns the number of structurally unique Binary Search Trees (BSTs) that can be constructed using `n` distinct values. Each BST must contain the values 1 to `n`. Function Signature: ```python def num_trees(n: int) -> int: ``` Input - `n` (integer): The number of nodes in the BSTs `(0 ≤ n ≤ 19)`. Output - Returns the number of unique BSTs that can be formed with nodes labeled from 1 to `n`. Example ```plaintext Input: n = 3 Output: 5 Explanation: The possible BSTs are: 1 3 3 2 1 / / / 3 2 1 1 3 2 / / 2 1 2 3 ``` # Constraints - Ensure your function handles the edge case where `n = 0` by returning 1, since there is exactly one empty BST. # Performance Requirements - Your function should run efficiently for inputs up to `n = 19`. # Scenario Imagine you are developing an application that needs to generate all favorite unique layouts for a given number of checkpoints in a security monitoring system. Designing the system requires understanding how many distinct ways you can order these points. Your task is to compute this number, which in this context is similar to counting unique BSTs.","solution":"def num_trees(n: int) -> int: Returns the number of structurally unique Binary Search Trees (BSTs) that can be constructed using n distinct values. if n == 0 or n == 1: return 1 # Initialize a list to store the number of unique BSTs for each count of nodes dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 # Fill the dp array for nodes in range(2, n + 1): for root in range(1, nodes + 1): left_trees = dp[root - 1] # Number of unique BSTs in the left subtree right_trees = dp[nodes - root] # Number of unique BSTs in the right subtree dp[nodes] += left_trees * right_trees return dp[n]"},{"question":"Scenario You are part of a team working on a project to implement cryptographic protocols in a secure communication system. To ensure the correct functioning of your protocol, you need to solve systems of simultaneous linear congruences efficiently. # Problem Statement Write a function `solve_chinese_remainder_optimized(nums: List[int], rems: List[int]) -> int` that solves the system of equations using the Chinese Remainder Theorem in a more optimized manner. The system of equations is represented as: ``` x % nums[0] = rems[0] x % nums[1] = rems[1] ... x % nums[k - 1] = rems[k - 1] ``` where `k` is the number of elements in `nums` and `rems` (k > 0). All numbers in `nums` need to be pairwise coprime, otherwise, an exception should be raised. Function Specification * Input: - `nums`: A list of positive integers, where all integers are pairwise coprime. - `rems`: A list of integers representing the remainders. * Output: - Returns the smallest non-negative integer x that satisfies all the given modular congruences. * Constraints: - Ensure that `nums` and `rems` have the same length. - Elements in `nums` are greater than 1. - Length of `nums` and `rems` lists is at least 1. Requirements 1. Define the function `solve_chinese_remainder_optimized(nums: List[int], rems: List[int]) -> int`. 2. Implement input validation to check that list lengths are equal and all elements in `nums` are greater than 1. 3. Ensure that every pair of elements in `nums` is coprime. 4. Use an optimized approach to solve the Chinese Remainder Theorem. # Example ```python nums = [3, 5, 7] rems = [2, 3, 2] result = solve_chinese_remainder_optimized(nums, rems) print(result) # Output should be 23 ``` Implement your optimized function below.","solution":"from typing import List from functools import reduce from math import gcd def modular_inverse(a, m): m0, x0, x1 = m, 0, 1 while a > 1: q = a // m m, a = a % m, m x0, x1 = x1 - q * x0, x0 return x1 + m0 if x1 < 0 else x1 def solve_chinese_remainder_optimized(nums: List[int], rems: List[int]) -> int: if len(nums) != len(rems): raise ValueError(\\"The length of nums and rems must be the same.\\") if any(n <= 1 for n in nums): raise ValueError(\\"All elements in nums must be greater than 1.\\") if not all(gcd(nums[i], nums[j]) == 1 for i in range(len(nums)) for j in range(i + 1, len(nums))): raise ValueError(\\"Elements in nums must be pairwise coprime.\\") # Calculate product of all nums prod = reduce(lambda a, b: a * b, nums) result = 0 for num, rem in zip(nums, rems): pp = prod // num inv = modular_inverse(pp, num) result += rem * inv * pp return result % prod"},{"question":"# Scenario Imagine you are managing a large collection of data where quick insertions, deletions, and lookups are critical. You have decided to use a hash table to achieve these goals. However, handling collisions in this hash table can become a performance bottleneck if not addressed properly. # Task Implement a function in Python to dynamically resize a separate chaining hash table when the load factor exceeds a given threshold to ensure efficient operations. # Requirements 1. **Function Signature**: ```python def resize_table(self, new_size): ``` 2. **Input**: - `new_size` (int): The new size for the hash table. 3. **Output**: - This function should not return anything but should update the internal storage (`_table`) of the hash table to the new size. 4. **Constraints**: - The function must rehash all existing elements for the new table size. - Ensure that all existing key-value pairs are preserved post resizing. - Aim to keep the average-case time complexity for operations close to O(1) post resizing. # Example ```python table = SeparateChainingHashTable() table.put(\'key1\', \'value1\') table.put(\'key2\', \'value2\') print(len(table)) # Output: 2 table.resize_table(23) # New table size is 23 print(table.get(\'key1\')) # Output: value1 print(table.get(\'key2\')) # Output: value2 print(len(table)) # Output: 2 ``` # Implementation Notice - You must modify the `SeparateChainingHashTable` class and provide `resize_table` method as specified. - Ensure that the `hash` method computes based on the new table size after resizing. - Linked lists should be rebuilt as per the new bucket structure. - Validate your implementation with unit tests to ensure functional correctness.","solution":"class SeparateChainingHashTable: def __init__(self, initial_size=8): self._table = [[] for _ in range(initial_size)] self._size = 0 self._capacity = initial_size def _hash(self, key): return hash(key) % self._capacity def put(self, key, value): idx = self._hash(key) for entry in self._table[idx]: if entry[0] == key: entry[1] = value return self._table[idx].append([key, value]) self._size += 1 if self._size / self._capacity > 0.7: self.resize_table(self._capacity * 2) def get(self, key): idx = self._hash(key) for entry in self._table[idx]: if entry[0] == key: return entry[1] return None def delete(self, key): idx = self._hash(key) for i, entry in enumerate(self._table[idx]): if entry[0] == key: del self._table[idx][i] self._size -= 1 return True return False def __len__(self): return self._size def resize_table(self, new_size): old_table = self._table self._capacity = new_size self._table = [[] for _ in range(new_size)] self._size = 0 # reset size and reinsert all items (put increases size) for bucket in old_table: for key, value in bucket: self.put(key, value)"},{"question":"# Question: Longest Increasing Subsequence You are given an unsorted array of integers. Your task is to implement a function to find the length of the longest increasing subsequence (LIS). A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, `[2, 3, 7, 101]` is a subsequence of `[10, 9, 2, 5, 3, 7, 101, 18]`. Input Format: - A list of integers, `sequence`. Output Format: - An integer representing the length of the LIS. Constraints: - The length of the `sequence` will be in the range `[0, 2500]`. - Each integer in `sequence` will be in the range `[-10^6, 10^6]`. Example: 1. Input: `[10, 9, 2, 5, 3, 7, 101, 18]` Output: `4` Explanation: The LIS is `[2, 3, 7, 101]`, hence the length is `4`. 2. Input: `[0, 1, 0, 3, 2, 3]` Output: `4` Explanation: The LIS is `[0, 1, 2, 3]`, hence the length is `4`. 3. Input: `[7, 7, 7, 7, 7, 7, 7]` Output: `1` Explanation: The LIS is `[7]`, hence the length is `1`. Note: 1. Consider both time and space complexities when implementing your solution. 2. Address potential edge cases such as handling an empty array. Function Signature: ```python def longest_increasing_subsequence(sequence): :type sequence: List[int] :rtype: int pass ``` Requirements: - The implemented function should be efficient and able to handle larger inputs within the constraints.","solution":"def longest_increasing_subsequence(sequence): Returns the length of the longest increasing subsequence in the given list of integers. if not sequence: return 0 # List to store the length of the LIS ending at each index n = len(sequence) lis = [1] * n # Build the LIS length array for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: lis[i] = max(lis[i], lis[j] + 1) # The length of the longest increasing subsequence is the maximum value in the lis array return max(lis)"},{"question":"You are given an array of integers. Implement the Stooge Sort algorithm to sort this array. Stooge Sort is a recursive sorting algorithm with the following procedure: 1. If the array has only one element, it is already sorted. 2. If the first element is larger than the last element, swap them. 3. Recursively sort the first two-thirds of the array. 4. Recursively sort the last two-thirds of the array. 5. Recursively sort the first two-thirds of the array again to ensure sorting consistency. **Function Signature**: ```python def stooge_sort(arr: list, l: int, h: int) -> list: pass ``` **Input**: - `arr`: A list of integers. - `l`: The starting index of the array segment to be sorted. - `h`: The ending index of the array segment to be sorted. **Output**: - A sorted array (in non-decreasing order). **Constraints**: - The length of the array will not exceed 10^3 (to handle high time complexity of Stooge Sort). - Elements of the array are integers in the range [-10^6, 10^6]. **Example**: ```python arr = [5, 3, 2, 6, 4, 1] stooge_sort(arr, 0, len(arr) - 1) print(arr) # Output should be: [1, 2, 3, 4, 5, 6] ``` # Additional Notes - Ensure your function handles the recursive logic properly. - Consider edge cases, such as arrays with a single element or all elements being the same. - Avoid unnecessary operations to minimize execution time, even though the algorithm itself is inherently inefficient.","solution":"def stooge_sort(arr: list, l: int, h: int) -> list: if l >= h: return arr # If the first element is larger than the last element, swap them if arr[l] > arr[h]: arr[l], arr[h] = arr[h], arr[l] # If the array has more than two elements if h - l + 1 > 2: t = (h - l + 1) // 3 # Recursively sort the first two-thirds stooge_sort(arr, l, h - t) # Recursively sort the last two-thirds stooge_sort(arr, l + t, h) # Recursively sort the first two-thirds again stooge_sort(arr, l, h - t) return arr"},{"question":"# Longest Increasing Subsequence Challenge Given an unsorted array of integers, your task is to determine the length of the longest increasing subsequence (LIS). Your solution should demonstrate the use of dynamic programming with an advanced data structure to optimize performance beyond the basic quadratic approach. Function Signature ```python def find_longest_increasing_subsequence(sequence: List[int]) -> int: pass ``` Input * `sequence` (List[int]): An array of integers (1 <= len(sequence) <= 10^5, -10^6 <= sequence[i] <= 10^6). Output * An integer representing the length of the LIS. Constraints * Optimize for both time and space complexity. * Handle edge cases such as empty lists and single element lists. # Scenario You are analyzing genetic sequences, and you need to identify the length of the longest increasing subsequence of gene markers (expressed as integers). This will help you determine the potential for evolutionary stability in various gene populations. You must implement the function `find_longest_increasing_subsequence` that returns an integer representing the length of the longest increasing subsequence observed. Examples **Example 1:** ```python sequence = [10,9,2,5,3,7,101,18] Output: 4 Explanation: The longest increasing subsequence is [2,3,7,101], hence the length is 4. ``` **Example 2:** ```python sequence = [4,10,4,3,8,9] Output: 3 Explanation: The longest increasing subsequence is [4,8,9], hence the length is 3. ``` **Example 3:** ```python sequence = [1,3,6,7,9,4,10,5,6] Output: 6 Explanation: The longest increasing subsequence is [1,3,6,7,9,10], hence the length is 6. ``` Constraints * You should aim for a solution with time complexity better than O(n²). * Consider utilizing advanced data structures like Segment Trees or Binary Indexed Trees to optimize performance.","solution":"import bisect from typing import List def find_longest_increasing_subsequence(sequence: List[int]) -> int: Returns the length of the longest increasing subsequence in the given array. if not sequence: return 0 # This will store the smallest tail value of all increasing subsequences # with different lengths. tails = [] for num in sequence: # Use binary search to determine the position of `num` in `tails` pos = bisect.bisect_left(tails, num) # If `pos` is equal to the length of `tails`, `num` extends the # largest subsequence. Otherwise, `num` will be the smallest value # in `tails` at position `pos`. if pos < len(tails): tails[pos] = num else: tails.append(num) # The length of `tails` will represent the length of the longest # increasing subsequence. return len(tails)"},{"question":"Context Given the critical role of the Greatest Common Divisor (GCD) in many mathematical and real-world applications, understanding its calculation and optimization is essential. In this task, you will implement a function that computes the GCD using both traditional and optimized bitwise methods individually, and then validate their results for a series of test cases. Problem Statement You are required to implement two functions to compute the GCD of two non-zero integers: 1. `gcd(a, b)`: Utilizes Euclid\'s Algorithm. 2. `gcd_bit(a, b)`: Utilizes the Bitwise GCD Algorithm. Finally, write a function `validate_gcd_methods(test_cases)` that: - Takes a list of tuples `test_cases` as input, where each tuple consists of two non-zero integers `(a, b)`. - Ensures that the GCD calculated by both `gcd(a, b)` and `gcd_bit(a, b)` functions are equal for each test case. Function Signature ```python def gcd(a, b): # Implementation here def gcd_bit(a, b): # Implementation here def validate_gcd_methods(test_cases): # Implementation here ``` Input Format - `test_cases`: A list of tuples, each tuple containing two non-zero integers `(a, b)` where `1 <= |a|, |b| <= 10^9`. Output Format - The function `validate_gcd_methods` should print \\"All test cases validated successfully!\\" if both methods produce the same GCD for all test cases. Otherwise, it should raise an AssertionError with the message \\"GCD mismatch for input (a, b)\\". Constraints - Both `a` and `b` will always be non-zero integers. Example ```python input_data = [(48, 18), (0, 34), (56, 98)] validate_gcd_methods(input_data) ``` **Expected Output:** ``` All test cases validated successfully! ``` Guidelines - Handle edge cases such as very large integers. - Ensure robustness to avoid infinite loops or incorrect results. - Validate inputs efficiently to ensure the methods handle them correctly.","solution":"def gcd(a, b): Compute the GCD using Euclid\'s Algorithm. while b: a, b = b, a % b return abs(a) def gcd_bit(a, b): Compute the GCD using the Bitwise GCD Algorithm. a, b = abs(a), abs(b) if a == 0: return b if b == 0: return a # Find common factors of 2 shift = 0 while (((a | b) & 1) == 0): a >>= 1 b >>= 1 shift += 1 while (a & 1) == 0: a >>= 1 while b != 0: while (b & 1) == 0: b >>= 1 if a > b: a, b = b, a b -= a return a << shift def validate_gcd_methods(test_cases): Validate that both GCD methods produce the same result for a series of test cases. for a, b in test_cases: gcd1 = gcd(a, b) gcd2 = gcd_bit(a, b) assert gcd1 == gcd2, f\\"GCD mismatch for input ({a}, {b})\\" print(\\"All test cases validated successfully!\\") # Example usage validate_gcd_methods([(48, 18), (56, 98), (72, 120), (81, 153)])"},{"question":"You are working with a system that needs to convert integers to their byte representations for data encoding, and vice versa. This system uses both big-endian and little-endian formats. Implement the functions described below, ensuring they handle edge cases and perform effectively. # Functions to Implement 1. `int_to_bytes_big_endian(num: int) -> bytes` - Convert the given integer `num` to its bytearray representation in big-endian format. - **Input**: Non-negative integer `num`. - **Output**: Bytearray representing the integer in big-endian format. - **Constraints**: Do not use Python\'s built-in struct module. 2. `int_to_bytes_little_endian(num: int) -> bytes` - Convert the given integer `num` to its bytearray representation in little-endian format. - **Input**: Non-negative integer `num`. - **Output**: Bytearray representing the integer in little-endian format. - **Constraints**: Do not use Python\'s built-in struct module. 3. `bytes_big_endian_to_int(bytestr: bytes) -> int` - Convert the given `bytestr` in big-endian format back into its integer representation. - **Input**: Bytearray `bytestr`. - **Output**: The integer represented by the byte array in big-endian format. 4. `bytes_little_endian_to_int(bytestr: bytes) -> int` - Convert the given `bytestr` in little-endian format back into its integer representation. - **Input**: Bytearray `bytestr`. - **Output**: The integer represented by the byte array in little-endian format. # Example ```python >>> int_to_bytes_big_endian(4660) b\'x12x34\' >>> int_to_bytes_little_endian(4660) b\'4x12\' >>> bytes_big_endian_to_int(b\'x12x34\') 4660 >>> bytes_little_endian_to_int(b\'x34x12\') 4660 ``` # Edge Cases * Convert `0` should return an empty byte array in both endian formats. * Consider byte arrays with leading zeros. * Ensure efficiency when handling integers requiring multiple bytes for conversion.","solution":"def int_to_bytes_big_endian(num: int) -> bytes: if num == 0: return b\'x00\' byte_array = bytearray() while num > 0: byte_array.append(num & 0xff) num >>= 8 return bytes(byte_array[::-1]) def int_to_bytes_little_endian(num: int) -> bytes: if num == 0: return b\'x00\' byte_array = bytearray() while num > 0: byte_array.append(num & 0xff) num >>= 8 return bytes(byte_array) def bytes_big_endian_to_int(bytestr: bytes) -> int: result = 0 for byte in bytestr: result = (result << 8) | byte return result def bytes_little_endian_to_int(bytestr: bytes) -> int: result = 0 for i, byte in enumerate(bytestr): result |= byte << (i * 8) return result"},{"question":"# Scenario: You are developing a storage system where efficient insertions and retrievals of elements are crucial. For this, you decide to use a hash table to manage data. However, the current implementation of your hash table simply handles fixed-size storage. To better cater to growing data needs, you need to implement a resizable hash table. # Task: Implement a resizable hash table that supports dynamic resizing to handle increasing entries efficiently. # Requirements: 1. Implement the `put` method to add key-value pairs to the hash table. 2. Ensure the hash table resizes when it becomes at least two-thirds full. 3. After resizing, rehash all existing key-value pairs. 4. Provide methods to get values based on keys and delete key-value pairs. 5. Ensure edge cases such as key not found, and table being full initially are handled properly. # Constraints: 1. Keys are non-negative integers. 2. Initial size of the hash table is 11. 3. Table should double in size upon resizing. # Input: - `put(key, value)` to insert or update key-value pairs. - `get(key)` to retrieve the value for a given key if it exists. - `del_(key)` to delete a key-value pair by the key. # Output: - `get(key)` returns the value associated with the key or `None` if the key is not present. - `del_(key)` removes the key-value pair corresponding to the key or returns `None` if the key is not present. # Implementation Block: ```python class HashTable(object): _empty = object() _deleted = object() def __init__(self, size=11): self.size = size self._len = 0 self._keys = [self._empty] * size self._values = [self._empty] * size def put(self, key, value): initial_hash = hash_ = self.hash(key) while True: if self._keys[hash_] is self._empty or self._keys[hash_] is self._deleted: self._keys[hash_] = key self._values[hash_] = value self._len += 1 return elif self._keys[hash_] == key: self._values[hash_] = value return hash_ = self._rehash(hash_) if initial_hash == hash_: raise ValueError(\\"Table is full\\") def get(self, key): initial_hash = hash_ = self.hash(key) while True: if self._keys[hash_] is self._empty: return None elif self._keys[hash_] == key: return self._values[hash_] hash_ = self._rehash(hash_) if initial_hash == hash_: return None def del_(self, key): initial_hash = hash_ = self.hash(key) while True: if self._keys[hash_] is self._empty: return None elif self._keys[hash_] == key: self._keys[hash_] = self._deleted self._values[hash_] = self._deleted self._len -= 1 return hash_ = self._rehash(hash_) if initial_hash == hash_: return None def hash(self, key): return key % self.size def _rehash(self, old_hash): return (old_hash + 1) % self.size def __getitem__(self, key): return self.get(key) def __delitem__(self, key): return self.del_(key) def __setitem__(self, key, value): self.put(key, value) def __len__(self): return self._len class ResizableHashTable(HashTable): MIN_SIZE = 11 def __init__(self): super().__init__(self.MIN_SIZE) def put(self, key, value): super().put(key, value) if len(self) >= (self.size * 2) // 3: self.__resize() def __resize(self): old_keys, old_values = self._keys, self._values self.size *= 2 self._len = 0 self._keys = [self._empty] * self.size self._values = [self._empty] * self.size for key, value in zip(old_keys, old_values): if key is not self._empty and key is not self._deleted: self.put(key, value) ```","solution":"class HashTable(object): _empty = object() _deleted = object() def __init__(self, size=11): self.size = size self._len = 0 self._keys = [self._empty] * size self._values = [self._empty] * size def put(self, key, value): initial_hash = hash_ = self.hash(key) while True: if self._keys[hash_] is self._empty or self._keys[hash_] is self._deleted: self._keys[hash_] = key self._values[hash_] = value self._len += 1 if self._len >= (self.size * 2) // 3: self.__resize() return elif self._keys[hash_] == key: self._values[hash_] = value return hash_ = self._rehash(hash_) if initial_hash == hash_: raise ValueError(\\"Table is full\\") def get(self, key): initial_hash = hash_ = self.hash(key) while True: if self._keys[hash_] is self._empty: return None elif self._keys[hash_] == key: return self._values[hash_] hash_ = self._rehash(hash_) if initial_hash == hash_: return None def del_(self, key): initial_hash = hash_ = self.hash(key) while True: if self._keys[hash_] is self._empty: return None elif self._keys[hash_] == key: self._keys[hash_] = self._deleted self._values[hash_] = self._deleted self._len -= 1 return hash_ = self._rehash(hash_) if initial_hash == hash_: return None def hash(self, key): return key % self.size def _rehash(self, old_hash): return (old_hash + 1) % self.size def __getitem__(self, key): return self.get(key) def __delitem__(self, key): return self.del_(key) def __setitem__(self, key, value): self.put(key, value) def __len__(self): return self._len def __resize(self): old_keys, old_values = self._keys, self._values self.size *= 2 self._len = 0 self._keys = [self._empty] * self.size self._values = [self._empty] * self.size for key, value in zip(old_keys, old_values): if key is not self._empty and key is not self._deleted: self.put(key, value)"},{"question":"# Wiggle Sort Coding Challenge Problem Statement Given an unsorted array, reorder it in place such that every number at an even index is smaller than its previous and next element, and every number at an odd index is greater than its previous and next element. Input and Output * **Input**: An unsorted array of integers with the following constraints: * `2 <= array.length <= 10^5` * `-10^6 <= array[i] <= 10^6` * **Output**: The array modified in place to follow the wiggle pattern. Detailed Example # Example 1 * **Input**: [3, 5, 2, 1, 6, 4] * **Output**: [3, 5, 1, 6, 2, 4] * **Explanation**: This is one possible output. Other correct patterns include: * [2, 3, 1, 5, 4, 6] * [1, 6, 2, 5, 3, 4] The key is that nums[0] < nums[1] > nums[2] < nums[3].... # Requirements * Implement the function `wiggle_sort(nums: List[int]) -> None:`. * The input `nums` is modified in-place to achieve the desired wiggle pattern. * Ensure the implementation takes into account the constraints for optimal performance. ```python def wiggle_sort(nums): Reorder the array to ensure nums[0] < nums[1] > nums[2] < nums[3].... Args: nums (List[int]): The unsorted array of integers. Returns: None: The function modifies the input array in place. for i in range(len(nums)): if (i % 2 == 1) == (nums[i-1] > nums[i]): nums[i-1], nums[i] = nums[i], nums[i-1] if __name__ == \\"__main__\\": array = [3, 5, 2, 1, 6, 4] print(array) wiggle_sort(array) print(array) ``` # Constraints and Performance * Be mindful of edge cases where arrays have fewer than two elements which require no sorting or reordering. * Ensure the algorithm runs efficiently for large inputs as specified in the input constraints.","solution":"def wiggle_sort(nums): Reorder the array to ensure nums[0] < nums[1] > nums[2] < nums[3].... Args: nums (List[int]): The unsorted array of integers. Returns: None: The function modifies the input array in place. for i in range(len(nums)): if (i % 2 == 1) == (nums[i-1] > nums[i]): nums[i-1], nums[i] = nums[i], nums[i-1]"},{"question":"# Generate Abbreviations You are tasked with creating a function to generate all possible abbreviations of a given word. An abbreviation is formed by replacing some letters with the count of the omitted letters, while ensuring that no two abbreviations are the same. Input: - A single string `word` which will only contain lowercase alphabetic characters (1 <= len(word) <= 20). Output: - A list of strings containing all possible abbreviations of the given word. Example: ```plaintext Input: \\"word\\" Output: [\'word\', \'wor1\', \'wo1d\', \'wo2\', \'w1rd\', \'w1r1\', \'w2d\', \'w3\', \'1ord\', \'1or1\', \'1o1d\', \'1o2\', \'2rd\', \'2r1\', \'3d\', \'4\'] ``` Constraints: - Ensure that no two abbreviations in the output are the same. - The generated list can be in any order. Performance Requirements: - Given the constraint 1 <= len(word) <= 20, ensure your solution is efficient in terms of both time and space complexity. # Implementation Write a function `generate_abbreviations(word: str) -> List[str]` that meets the requirements described above.","solution":"from typing import List def generate_abbreviations(word: str) -> List[str]: def backtrack(pos: int, cur: str, count: int): if pos == len(word): if count > 0: cur += str(count) res.append(cur) else: # Abbreviate the current character backtrack(pos + 1, cur, count + 1) # Keep the current character backtrack(pos + 1, cur + (str(count) if count > 0 else \'\') + word[pos], 0) res = [] backtrack(0, \\"\\", 0) return res"},{"question":"# Scenario You are tasked with maintaining the stability of a service that manipulates user data stored in a singly linked list. The service requires an efficient in-place update to swap every two adjacent nodes in the list. This operation should be as efficient as possible, utilizing constant space, and only changing the links between nodes, not the values. # Question Implement a function `swap_pairs(head: Node) -> Node` that takes the head of a singly linked list as input and swaps every two adjacent nodes in-place. The function should return the new head of the list. Input: * The input is the head of a singly linked list. * Each node in the list contains an integer value (you may assume the values are unique). Output: * The output should be the head of the transformed list with each pair of adjacent nodes swapped. Constraints: * You are not allowed to modify the values in the nodes. * The function must use only constant extra space and perform the operation in (O(n)) time, where (n) is the number of nodes in the list. Example: ```python class Node: def __init__(self, x): self.val = x self.next = None # Utility function to create a list and print list elements def print_list(head): current = head while current: print(current.val, end=\\" -> \\") current = current.next print(\\"None\\") # Example case head = Node(1) head.next = Node(2) head.next.next = Node(3) head.next.next.next = Node(4) new_head = swap_pairs(head) print_list(new_head) ``` For the given example, the output should be: ``` 2 -> 1 -> 4 -> 3 -> None ``` # Notes: * Consider edge cases like lists with a single node or an empty list. * You are required to submit code that passes all edge cases and works efficiently.","solution":"class Node: def __init__(self, x): self.val = x self.next = None def swap_pairs(head: Node) -> Node: if not head or not head.next: return head # Initialize the new head to be the second node new_head = head.next # Initialize pointers prev = None current = head while current and current.next: next_pair = current.next.next if prev: prev.next = current.next # Swap current node with the next node tmp = current.next tmp.next = current current.next = next_pair # Move the pointers ahead prev = current current = next_pair return new_head def print_list(head): current = head while current: print(current.val, end=\\" -> \\") current = current.next print(\\"None\\")"},{"question":"# Problem: Weighted Graph Shortest Path Finder You are tasked with implementing a graph data structure that supports finding the shortest paths from a source vertex to all other vertices using Dijkstra\'s algorithm. The graph should be represented as an adjacency matrix with weights and assume weight >= 0 for all edges. Function Signature ```python def find_shortest_paths(vertex_count: int, edges: List[Tuple[int, int, int]], src: int) -> List[float]: pass ``` Input Parameters * **vertex_count**: An integer V representing the number of vertices in the graph. * **edges**: A list of tuples (u, v, w) where `u` and `v` are vertex indices and `w` is the weight of the edge between them. * **src**: An integer representing the index of the source vertex. Output Return a list of distances where the ith position in the list represents the shortest distance from the source vertex to vertex i. If a vertex is not reachable from the source, its distance should be represented as `float(\\"inf\\")`. Constraints * 1 <= V <= 1000 (the number of vertices) * 0 <= w <= 10000 (the weight of an edge) Example ```python vertex_count = 5 edges = [ (0, 1, 10), (0, 4, 5), (1, 2, 1), (2, 3, 4), (3, 4, 2), (4, 1, 3), (4, 2, 9) ] src = 0 print(find_shortest_paths(vertex_count, edges, src)) # Output: [0, 8, 9, 13, 5] ``` Notes * Handle cases where the graph is disconnected. * Ensure the algorithm works efficiently for the upper limit of vertices.","solution":"from typing import List, Tuple import heapq def find_shortest_paths(vertex_count: int, edges: List[Tuple[int, int, int]], src: int) -> List[float]: # Initialize adjacency list representation of the graph graph = [[] for _ in range(vertex_count)] for u, v, w in edges: graph[u].append((v, w)) # Initialize distances with infinity and set the source distance to 0 distances = [float(\'inf\')] * vertex_count distances[src] = 0 # Min-heap to get the minimum distance vertex that hasn\'t been processed min_heap = [(0, src)] while min_heap: current_distance, u = heapq.heappop(min_heap) # Skip processing if we find we already have a shorter distance if current_distance > distances[u]: continue # Relax edges for v, weight in graph[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(min_heap, (distance, v)) return distances"},{"question":"# Pigeonhole Sort Challenge Objective Implement the pigeonhole sort algorithm to sort a given list of integers. Input and Output Format * **Input**: A single list `arr` of integers, where `1 <= len(arr) <= 10000` and `-10000 <= arr[i] <= 10000`. * **Output**: The sorted list of integers. Constraints * The list can contain both positive and negative integers. * All integers are bounded within the range [-10000, 10000]. * You must implement the pigeonhole sort algorithm without using built-in sort functions. Example # Input ```python [8, 3, 4, 7, 1, -2, 0, -6, -1] ``` # Output ```python [-6, -2, -1, 0, 1, 3, 4, 7, 8] ``` Edge Case # Input ```python [5, 5, 5, 5] ``` # Output ```python [5, 5, 5, 5] ``` Guidelines 1. Calculate the minimum and maximum values in the input list to find the range. 2. Create an auxiliary list (holes) to count occurrences of each integer within the range. 3. Reconstruct the sorted list using the counts stored in the holes. Performance Requirements Your implementation should efficiently handle the given constraints and should be able to sort a list in `O(n + Range)` time where `Range` is the difference between the maximum and minimum elements of the list. Function Signature ```python def pigeonhole_sort(arr: List[int]) -> List[int]: # Your code here ```","solution":"def pigeonhole_sort(arr): Sorts a list of integers using the pigeonhole sort algorithm. Args: arr (list): A list of integers to be sorted. Returns: list: The sorted list of integers. if len(arr) == 0: return [] min_value = min(arr) max_value = max(arr) size = max_value - min_value + 1 holes = [0] * size for number in arr: holes[number - min_value] += 1 sorted_arr = [] for index in range(size): while holes[index] > 0: sorted_arr.append(index + min_value) holes[index] -= 1 return sorted_arr"},{"question":"# Decoding Messages You are given a message containing digits from \'0\' to \'9\', which has been encoded using the following mapping: ``` \'A\' -> 1 \'B\' -> 2 ... \'Z\' -> 26 ``` Your task is to write a function `count_decodings(message: str) -> int` that determines the total number of ways to decode the given encoded message. This must handle all the constraints and edge cases properly. # Input - `message` (string): The encoded message containing digits. # Output - Returns an integer, the number of ways to decode the encoded message. # Constraints - The length of the input string will not exceed 100 characters. - The input string will only contain digits (\'0\'-\'9\'). # Example ```python assert count_decodings(\\"12\\") == 2 # could be decoded as \\"AB\\" or \\"L\\" assert count_decodings(\\"226\\") == 3 # could be decoded as \\"BZ\\", \\"VF\\", or \\"BBF\\" assert count_decodings(\\"0\\") == 0 # \\"0\\" cannot be decoded assert count_decodings(\\"10\\") == 1 # \\"10\\" can only be decoded as \\"J\\" ``` # Additional Notes Be sure to handle cases where the input string contains \'0\' since \'0\' is not a valid character on its own and must be part of \'10\' or \'20\'. Consider optimizing for both time and space complexity to ensure it handles longer input strings efficiently.","solution":"def count_decodings(message: str) -> int: Returns the number of ways to decode the given encoded message. if not message or message[0] == \'0\': return 0 n = len(message) dp = [0] * (n + 1) dp[0] = 1 # base case: empty string dp[1] = 1 # base case: single char that isn\'t \'0\' for i in range(2, n + 1): single_digit = int(message[i-1:i]) double_digit = int(message[i-2:i]) if 1 <= single_digit <= 9: # Can decode it as a single letter dp[i] += dp[i-1] if 10 <= double_digit <= 26: # Can decode it as a double letter dp[i] += dp[i-2] return dp[n]"},{"question":"# Question You are given an N x N 2D matrix named `image`, representing an image. You are required to rotate the image by 90 degrees in a clockwise direction. Write a function `rotate_image(image)` that accepts the 2D matrix and modifies it in-place to achieve the rotation. # Function Signature ```python def rotate_image(image: List[List[int]]) -> None: Rotate the input N x N matrix by 90 degrees clockwise in-place. Args: image (List[List[int]]): An NxN 2D list representing the image. Returns: None: The function should modify the image matrix in place. ``` # Input * `image`: A list of lists containing integers, representing an N x N 2D image matrix (1 ≤ N ≤ 20). # Output * The function does not return anything; it modifies the input matrix in place. # Constraints * You must perform the rotation **in-place** without using extra space for another matrix. * The input matrix will always be square. # Example Example 1: ```python image = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_image(image) # Expected Output: image should be changed to # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` Example 2: ```python image = [ [5] ] rotate_image(image) # Expected Output: image should be changed to # [ # [5] # ] ``` Example 3: ```python image = [ [1, 2], [3, 4] ] rotate_image(image) # Expected Output: image should be changed to # [ # [3, 1], # [4, 2] # ] ```","solution":"def rotate_image(image): Rotate the input N x N matrix by 90 degrees clockwise in-place. n = len(image) # Transpose the matrix for i in range(n): for j in range(i, n): image[i][j], image[j][i] = image[j][i], image[i][j] # Reverse each row for i in range(n): image[i].reverse()"},{"question":"Context: You have been tasked with implementing a function to determine the number of ways to segment a given string into sentences where each word in the sentence belongs to a provided dictionary. Consider different segmentations that can form valid sentences according to the dictionary. Objective: Write a function `num_sentences(s: str, dictionary: set) -> int` to compute the number of valid sentences that can be constructed from the string `s` using a set of valid words from `dictionary`. Input: * `s`: A string (1 ≤ length of s ≤ 1000). * `dictionary`: A set of strings containing valid words (1 ≤ size of dictionary ≤ 500; each word has a maximum length of 50). Output: * An integer representing the number of valid sentences formed. Constraints: * Only consider segmentations using words from the dictionary. * Ensure optimized performance to handle larger cases as per the constraints. Examples: 1. `num_sentences(\\"appletablet\\", {\\"apple\\", \\"tablet\\", \\"applet\\", \\"let\\", \\"able\\", \\"t\\"})` should return `3`. 2. `num_sentences(\\"thing\\", {\\"thing\\"})` should return `1`. 3. `num_sentences(\\"catsanddog\\", {\\"cat\\", \\"cats\\", \\"and\\", \\"sand\\", \\"dog\\"})` should return `2` for sentences like \\"cats and dog\\" and \\"cat sand dog\\". Implementation Requirement: Utilize a dynamic programming approach with memoization for optimal performance. Avoid direct recursion without caching results.","solution":"def num_sentences(s: str, dictionary: set) -> int: Function to determine the number of ways to segment a given string into sentences using a provided dictionary. def helper(start, memo): if start == len(s): return 1 if start in memo: return memo[start] count = 0 for end in range(start + 1, len(s) + 1): word = s[start:end] if word in dictionary: count += helper(end, memo) memo[start] = count return count return helper(0, {}) # Example usage: # print(num_sentences(\\"appletablet\\", {\\"apple\\", \\"tablet\\", \\"applet\\", \\"let\\", \\"able\\", \\"t\\"})) # Output: 3"},{"question":"# Advanced Sorting Implementation: Stooge Sort **Problem Statement**: Given an array of integers, implement the Stooge Sort algorithm to sort the array in ascending order. **Function Signature**: ```python def stoogesort(arr: List[int], l: int, h: int) -> None: # your code here ``` **Input**: - A list of integers `arr` where (1 leq text{len(arr)} leq 1000) - Two integer indices `l` and `h` representing the range within the array that need to be sorted, with (0 leq l leq h < text{len(arr)}) **Output**: - The function should sort the elements of `arr` between indices `l` and `h` in-place. The function returns nothing. **Constraints**: 1. You are provided the starting (`l`) and ending (`h`) indices for sorting. Assume they are always valid. 2. Use the principles of the Stooge Sort as outlined in the analysis above. **Performance**: - Efficiency is not the primary concern, but try to ensure your solution does not involve unnecessary operations. **Example**: ```python # Example Input arr = [5, 15, 8, 4, 10] stoogesort(arr, 0, len(arr) - 1) # Example Output # arr becomes [4, 5, 8, 10, 15] # Example Input arr = [1, 3, 2] stoogesort(arr, 0, len(arr) - 1) # Example Output # arr becomes [1, 2, 3] ``` **Note**: Your implementation will be tested on multiple arrays, including edge cases like arrays with duplicate elements, arrays with one element, and already sorted arrays.","solution":"from typing import List def stoogesort(arr: List[int], l: int, h: int) -> None: Sorts the array in place using the Stooge Sort algorithm. Parameters: arr (List[int]): The list of integers to be sorted l (int): The starting index of the segment to be sorted h (int): The ending index of the segment to be sorted if l >= h: return if arr[l] > arr[h]: arr[l], arr[h] = arr[h], arr[l] # Swap the elements if h - l + 1 > 2: t = (h - l + 1) // 3 stoogesort(arr, l, h - t) # Sort the initial 2/3rd part stoogesort(arr, l + t, h) # Sort the final 2/3rd part stoogesort(arr, l, h - t) # Sort the initial 2/3rd part again"},{"question":"Implement a function that takes a stack as input and replaces every value in the stack with two occurrences of that value. You should provide two solutions, one using a stack and the other using a queue as auxiliary storage. # Function Signature 1. `def first_stutter(stack: List[int]) -> List[int]:` 2. `def second_stutter(stack: List[int]) -> List[int]:` # Input - `stack`: A list of integers representing a stack where the last element represents the top of the stack. The stack contains 0 ≤ number of elements ≤ (10^4). # Output - Return the modified stack with each value replaced by two occurrences of that value. # Constraints - Do not use any library functions except for those imported previously. - Your solution should maintain the relative order of elements in the stack. # Example ```python # Initial stack: [3, 7, 1, 14, 9] # Expected output after first_stutter: [3, 3, 7, 7, 1, 1, 14, 14, 9, 9] print(first_stutter([3, 7, 1, 14, 9])) # Output: [3, 3, 7, 7, 1, 1, 14, 14, 9, 9] print(second_stutter([3, 7, 1, 14, 9])) # Output: [3, 3, 7, 7, 1, 1, 14, 14, 9, 9] ``` # Constraints - Ensure the solutions are efficient in terms of both time and space complexity. - Consider edge cases such as an empty stack or a stack with only one element. - Document any assumptions made during the implementation process.","solution":"from typing import List from collections import deque def first_stutter(stack: List[int]) -> List[int]: Replace each value in the stack with two occurrences of that value using another stack. Parameters: stack (List[int]): List of integers representing a stack. Returns: List[int]: Modified stack with each value replaced by two occurrences of that value. aux_stack = [] while stack: element = stack.pop() aux_stack.append(element) aux_stack.append(element) while aux_stack: stack.append(aux_stack.pop()) return stack def second_stutter(stack: List[int]) -> List[int]: Replace each value in the stack with two occurrences of that value using a queue. Parameters: stack (List[int]): List of integers representing a stack. Returns: List[int]: Modified stack with each value replaced by two occurrences of that value. queue = deque() while stack: element = stack.pop() queue.appendleft(element) queue.appendleft(element) while queue: stack.append(queue.popleft()) return stack"},{"question":"Custom Comb Sort Enhancement **Objective**: Enhance the provided Comb Sort algorithm to handle an additional constraint and optimize its performance for a specific data pattern. **Scenario**: In a system where you frequently need to sort lists of varying lengths, most of the lists have a special pattern: they often contain long sections of already sorted elements alternated with a few unsorted elements. You aim to enhance the Comb Sort function to take advantage of this pattern and sort such lists more efficiently. **Requirements**: 1. Implement the function `enhanced_comb_sort` which improves upon the provided Comb Sort algorithm. 2. The function should have the following signature: ```python def enhanced_comb_sort(arr: list) -> list: ``` 3. The function should identify already sorted subarrays and process these efficiently to reduce unnecessary comparisons. 4. Optimize the shrink factor or gap reduction strategy in the context of the described common pattern of input arrays. **Input**: - A list of integers `arr` where 1 <= len(arr) <= 10000. - The elements of `arr` are in the range of 1 to 10^6. **Output**: - The sorted list of integers in non-decreasing order. **Performance**: - Aim for an average-case time complexity significantly better than O(N^2) for the described input pattern. - Maintain in-place sorting and minimize additional space usage. **Examples**: Example 1: ```python input_list = [9, 8, 7, 5, 2, 1, 3, 4, 6, 0] output_list = enhanced_comb_sort(input_list) print(output_list) # Expected: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] ``` Example 2: ```python input_list = [1, 3, 5, 7, 2, 4, 6, 8, 9, 0] output_list = enhanced_comb_sort(input_list) print(output_list) # Expected: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] ``` Example 3: ```python input_list = [1, 2, 3, 5, 4] output_list = enhanced_comb_sort(input_list) print(output_list) # Expected: [1, 2, 3, 4, 5] ```","solution":"def enhanced_comb_sort(arr: list) -> list: Enhanced Comb Sort which takes advantage of the pattern where arrays have long sorted sections alternated with a few unsorted elements. n = len(arr) if n <= 1: return arr # Initial gap size gap = n # Shrink factor typically set to 1.3 in Comb Sort shrink = 1.3 # Boolean to check if any swapping happened swapped = True while gap > 1 or swapped: # Calculate the new gap value gap = int(gap / shrink) if gap < 1: gap = 1 swapped = False # Compare elements with the gap apart for i in range(n - gap): if arr[i] > arr[i + gap]: # If elements are not in order, swap them arr[i], arr[i + gap] = arr[i + gap], arr[i] swapped = True # Using bubble sort pass to identify partially sorted segments # and to avoid unnecessary comparisons for j in range(i, 0, -1): if arr[j] < arr[j - 1]: arr[j], arr[j - 1] = arr[j - 1], arr[j] else: break return arr"},{"question":"# Diffie-Hellman Key Exchange Validation In the context of secure communication, the Diffie-Hellman key exchange is used to allow two parties to securely share a symmetric key over an insecure channel. Based on the following code snippets and your understanding: 1. `def prime_check(num):` : Check if a number is prime. 2. `def find_primitive_root(n):` : Find all primitive roots of a number. 3. `def alice_private_key(p):` : Generate Alice\'s private key. 4. `def bob_private_key(p):` : Generate Bob\'s private key. 5. `def alice_public_key(a_pr_k, a, p):` : Calculate Alice\'s public key. 6. `def bob_public_key(b_pr_k, a, p):` : Calculate Bob\'s public key. 7. `def alice_shared_key(b_pu_k, a_pr_k, p):` : Calculate Alice\'s shared key. 8. `def bob_shared_key(a_pu_k, b_pr_k, p):` : Calculate Bob\'s shared key. You are required to implement a function to validate the Diffie-Hellman key exchange. The function should simulate the creation of private keys for Alice and Bob, their computation of public keys, and then the calculation of shared secret key. The function should verify that the shared secret keys computed by Alice and Bob match, confirming a successful key exchange. # Requirements: - Implement the function `diffie_hellman_key_exchange(a: int, p: int) -> bool`. - The function should return `True` if Alice and Bob compute the same shared key, otherwise `False`. - Ensure to use the provided prime checking and primitive root functions. - Consider edge cases where `p` is not a prime or `a` is not a primitive root of `p`. # Constraints: - (2 leq a, p leq 10^9) - (a) must be a primitive root of (p) # Example Input: ```python a = 5 p = 23 ``` # Example Output: ```python True ``` # Function Signature: ```python def diffie_hellman_key_exchange(a: int, p: int) -> bool: # Implementation here ```","solution":"import random def prime_check(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def find_primitive_root(n): Find primitive roots modulo n. def gcd(a, b): while b: a, b = b, a % b return a def is_primitive_root(g, p): required_set = {num for num in range(1, p) if gcd(num, p) == 1} return required_set == {pow(g, powers, p) for powers in range(1, p)} if not prime_check(n): return [] roots = [g for g in range(1, n) if is_primitive_root(g, n)] return roots def alice_private_key(p): Generate Alice\'s private key. return random.randint(2, p-2) def bob_private_key(p): Generate Bob\'s private key. return random.randint(2, p-2) def alice_public_key(a_pr_k, a, p): Calculate Alice\'s public key. return pow(a, a_pr_k, p) def bob_public_key(b_pr_k, a, p): Calculate Bob\'s public key. return pow(a, b_pr_k, p) def alice_shared_key(b_pu_k, a_pr_k, p): Calculate Alice\'s shared key. return pow(b_pu_k, a_pr_k, p) def bob_shared_key(a_pu_k, b_pr_k, p): Calculate Bob\'s shared key. return pow(a_pu_k, b_pr_k, p) def diffie_hellman_key_exchange(a, p): Validate the Diffie-Hellman key exchange. if not prime_check(p): return False if a not in find_primitive_root(p): return False # Generate private keys alice_priv = alice_private_key(p) bob_priv = bob_private_key(p) # Generate public keys alice_pub = alice_public_key(alice_priv, a, p) bob_pub = bob_public_key(bob_priv, a, p) # Compute shared keys alice_shared = alice_shared_key(bob_pub, alice_priv, p) bob_shared = bob_shared_key(alice_pub, bob_priv, p) # Validate the match of shared keys return alice_shared == bob_shared"},{"question":"You are tasked with implementing a frequency counter using our `ResizableHashTable` implementation, which counts how many times each distinct character appears in a given string. This problem will test your understanding of hash tables, collision handling, and resizing behaviour. # Specifications * Create a new class called `FrequencyCounter` that uses `ResizableHashTable` as its underlying storage. * Implement the following methods: 1. `__init__`: Initializes the `ResizableHashTable`. 2. `count_frequency(self, string)`: Takes a string, counts the frequency of each character, and stores these frequencies in the hash table. 3. `get_frequency(self, character)`: Returns the frequency of the given character if it exists, otherwise returns 0. # Constraints * The string can only contain ASCII characters (length <= 10^6). * The frequency of each character should be stored efficiently. * The `ResizableHashTable` should properly handle resizing and collision management as per specified behaviour. # Example ```python counter = FrequencyCounter() counter.count_frequency(\\"abracadabra\\") print(counter.get_frequency(\'a\')) # Output should be 5 print(counter.get_frequency(\'b\')) # Output should be 2 print(counter.get_frequency(\'z\')) # Output should be 0 ``` # Expected Input and Output Format * **Input**: * count_frequency: A string of ASCII characters. * get_frequency: A single character. * **Output**: * get_frequency: An integer representing the frequency of the character.","solution":"class ResizableHashTable: def __init__(self): self.size = 8 # Initial size of the hash table self.table = [None] * self.size self.count = 0 def _hash(self, key): return hash(key) % self.size def _resize(self): new_size = self.size * 2 new_table = [None] * new_size for item in self.table: if item is not None: for key, value in item: new_index = hash(key) % new_size if new_table[new_index] is None: new_table[new_index] = [] new_table[new_index].append((key, value)) self.size = new_size self.table = new_table def set(self, key, value): index = self._hash(key) if self.table[index] is None: self.table[index] = [] for i, (k, v) in enumerate(self.table[index]): if k == key: self.table[index][i] = (key, value) return self.table[index].append((key, value)) self.count += 1 if self.count / self.size > 0.7: self._resize() def get(self, key): index = self._hash(key) if self.table[index] is None: return None for k, v in self.table[index]: if k == key: return v return None class FrequencyCounter: def __init__(self): self.table = ResizableHashTable() def count_frequency(self, string): for char in string: frequency = self.table.get(char) if frequency is None: self.table.set(char, 1) else: self.table.set(char, frequency + 1) def get_frequency(self, character): frequency = self.table.get(character) if frequency is None: return 0 return frequency"},{"question":"*Title: Implement and Test a Min Heap* **Objective**: * You need to implement a min heap from scratch using the provided abstract methods. After implementing it, you will test it by inserting and removing elements to ensure its correctness. **Question**: Implement the abstract methods (`perc_up`, `insert`, `perc_down`, `min_child`, `remove_min`) in the `BinaryHeap` class to create a fully functional min heap. **Function Requirements**: 1. `perc_up(i: int) -> None`: Move the element at index `i` up to its appropriate position to maintain the heap property. 2. `insert(val: int) -> None`: Add a new element `val` to the heap and maintain the heap property. 3. `perc_down(i: int) -> None`: Move the element at index `i` down to its correct position within the heap. 4. `min_child(i: int) -> int`: Return the index of the smallest child of the element at index `i`. 5. `remove_min() -> int`: Remove and return the smallest element from the heap, maintaining the heap property after removal. **Input Format**: * For `insert`, an integer value to insert into the heap. * For `remove_min`, no input parameters. **Output Format**: * `insert` should not return anything. * `remove_min` should return the smallest integer element from the heap. **Constraints**: * The heap is implemented using a list starting from index 1 (not 0). * You should handle the case when removing from an empty heap gracefully, e.g., by returning `None` or an appropriate error. ```python from abc import ABCMeta, abstractmethod class AbstractHeap(metaclass=ABCMeta): Abstract Class for Binary Heap. @abstractmethod def perc_up(self, i): Move the element at index i up, maintaining the heap property. @abstractmethod def insert(self, val): Insert a new element into the heap, maintaining the heap property. @abstractmethod def perc_down(self, i): Move the element at index i down, maintaining the heap property. @abstractmethod def min_child(self, i): Return the index of the smallest child of the element at index i. @abstractmethod def remove_min(self): Remove and return the smallest element from the heap. class BinaryHeap(AbstractHeap): Binary Heap Class def __init__(self): self.current_size = 0 self.heap = [0] def perc_up(self, i): while i // 2 > 0: if self.heap[i] < self.heap[i // 2]: self.heap[i], self.heap[i // 2] = self.heap[i // 2], self.heap[i] i = i // 2 def insert(self, val): self.heap.append(val) self.current_size += 1 self.perc_up(self.current_size) def min_child(self, i): if 2 * i + 1 > self.current_size: return 2 * i if self.heap[2 * i] > self.heap[2 * i + 1]: return 2 * i + 1 return 2 * i def perc_down(self, i): while 2 * i <= self.current_size: min_child = self.min_child(i) if self.heap[i] > self.heap[min_child]: self.heap[i], self.heap[min_child] = self.heap[min_child], self.heap[i] i = min_child def remove_min(self): if self.current_size == 0: return None root = self.heap[1] self.heap[1] = self.heap[self.current_size] self.current_size -= 1 self.heap.pop() if self.current_size > 0: self.perc_down(1) return root # Testing heap = BinaryHeap() print(heap.remove_min()) # Should handle gracefully, possibly None or appropriate error heap.insert(5) heap.insert(3) heap.insert(8) heap.insert(1) print(heap.remove_min()) # Should print 1 print(heap.remove_min()) # Should print 3 ``` **Testing Scenario**: 1. Insert integers: [5, 3, 8, 1] 2. Validate proper order of removal: should return 1, then 3, then others as they follow. **Note**: Follow the provided method definitions and class structure as given, ensuring any inserted values are maintained according to the min heap\'s properties.","solution":"class BinaryHeap: def __init__(self): self.current_size = 0 self.heap = [0] def perc_up(self, i): while i // 2 > 0: if self.heap[i] < self.heap[i // 2]: self.heap[i], self.heap[i // 2] = self.heap[i // 2], self.heap[i] i = i // 2 def insert(self, val): self.heap.append(val) self.current_size += 1 self.perc_up(self.current_size) def min_child(self, i): if 2 * i + 1 > self.current_size: return 2 * i if self.heap[2 * i] > self.heap[2 * i + 1]: return 2 * i + 1 return 2 * i def perc_down(self, i): while 2 * i <= self.current_size: min_child = self.min_child(i) if self.heap[i] > self.heap[min_child]: self.heap[i], self.heap[min_child] = self.heap[min_child], self.heap[i] i = min_child def remove_min(self): if self.current_size == 0: return None root = self.heap[1] self.heap[1] = self.heap[self.current_size] self.current_size -= 1 self.heap.pop() if self.current_size > 0: self.perc_down(1) return root"},{"question":"Flatten Nested Arrays You are required to implement a function that flattens a given nested array into a single-dimensional array. The function should handle arbitrary levels of nested arrays and should ensure all elements, irrespective of nesting, are brought to the top-level in the resultant array. # Function Specifications - **Function Name**: `flatten` - **Input**: A single parameter `input_arr`, which is a list containing a mix of nested lists and other non-iterable elements. - **Output**: A single list containing all elements from `input_arr`, but flattened into a one-dimensional list. # Constraints 1. The input list can contain nested lists up to any depth. 2. The input will not contain complex objects other than lists and primitive data types (integers, floats, strings). 3. Strings are to be considered as single elements and should not be broken down into characters. # Example ```python flatten([1, [2, 3, [4, 5]], 6, [7, [8, 9]]]) ``` Expected Output: ```python [1, 2, 3, 4, 5, 6, 7, 8, 9] ``` # Performance Requirements - Must use O(n) time complexity where n is the total number of elements. - Should maintain O(n) space complexity considering the output array size. Additional Challenge (Optional) Implement a generator `flatten_iterator` that yields one element at a time from the nested array without creating the entire flattened list. This should have the following specifications: - **Function Name**: `flatten_iterator` - **Input**: A single parameter `iterable`, which is an iterable containing nested iterables and other non-iterable elements. - **Output**: A generator that yields elements in a flattened order. Verify that your implementation correctly iterates through deeply nested structures while maintaining efficient memory usage.","solution":"def flatten(input_arr): Flattens a nested array into a single-dimensional array. Parameters: input_arr (list): The list to be flattened which may contain nested lists. Returns: list: A flattened list with all elements in a single dimension. flat_list = [] def _flatten_helper(lst): for item in lst: if isinstance(item, list): _flatten_helper(item) else: flat_list.append(item) _flatten_helper(input_arr) return flat_list def flatten_iterator(iterable): A generator that yields elements from a nested iterable one at a time. Parameters: iterable (iterable): The iterable to be flattened which may contain nested iterables. Yields: element: The next flattened element in order. for item in iterable: if isinstance(item, list): yield from flatten_iterator(item) else: yield item"},{"question":"You have been asked to implement an algorithm that takes an integer and finds the next higher integer using the exact same digits. If no such integer exists (i.e., the digits are sorted in descending order), the function should return -1. # Function Signature ```python def next_bigger(num: int) -> int: ``` # Input * **num**: An integer `num` (1 ≤ num ≤ 10^18). Guaranteed to be a positive number. # Output * An integer representing the next higher number that can be formed by rearranging the digits of the input `num`. If no such number exists, return -1. # Constraints * The input number will always be a positive integer. * Do not use built-in functions that directly solve the problem. # Examples ```python assert next_bigger(38276) == 38627 assert next_bigger(12345) == 12354 assert next_bigger(99999) == -1 assert next_bigger(120) == 201 assert next_bigger(4321) == -1 assert next_bigger(1) == -1 assert next_bigger(315) == 351 ``` # Instructions 1. Implement the function `next_bigger` following the algorithm described in the analysis. 2. Consider and handle edge cases, such as when no higher permutation exists or when the input has repeated digits. 3. Ensure the implementation is efficient and runs within reasonable time limits for the upper bounds of the input size. 4. Use appropriate data structures and in-place operations to optimize space complexity.","solution":"def next_bigger(num: int) -> int: Finds the next higher integer with the same digits. If no such integer exists, returns -1. num_str = list(str(num)) n = len(num_str) # Step 1: Find the rightmost digit which is smaller than its next digit. i = n - 2 while i >= 0 and num_str[i] >= num_str[i + 1]: i -= 1 # If no such digit is found, return -1 if i == -1: return -1 # Step 2: Find the smallest digit on right of i which is larger than num_str[i] j = n - 1 while num_str[j] <= num_str[i]: j -= 1 # Step 3: Swap the digits at indices i and j num_str[i], num_str[j] = num_str[j], num_str[i] # Step 4: Reverse the digits from i+1 to the end of the list num_str = num_str[:i + 1] + num_str[i + 1:][::-1] # Convert list back to integer next_bigger_num = int(\'\'.join(num_str)) return next_bigger_num"},{"question":"# String Reversal: Different Techniques **Scenario**: You are working on a project requiring the reversal of strings using different techniques to understand various algorithmic approaches better. Task: 1. Implement the four string reversal functions as described below. 2. Compare their performance across various string lengths and analyze the results. # Function 1: Recursive Method ```python def recursive_reverse(s: str) -> str: Reverse a string using recursion. :param s: input string :return: reversed string # Your code here ``` # Function 2: Iterative Method ```python def iterative_reverse(s: str) -> str: Reverse a string using an iterative approach. :param s: input string :return: reversed string # Your code here ``` # Function 3: Pythonic Method ```python def pythonic_reverse(s: str) -> str: Reverse a string using Python\'s built-in functions. :param s: input string :return: reversed string # Your code here ``` # Function 4: Ultra Pythonic Method ```python def ultra_pythonic_reverse(s: str) -> str: Reverse a string using Python\'s slicing. :param s: input string :return: reversed string # Your code here ``` # Input Format: * A single string `s` of length `1 <= len(s) <= 10^5`. # Output Format: * Each function should return the reversed string. # Constraints: * All characters in `s` are ASCII. * Functions should handle edge cases such as empty string or single-character strings. # Performance Analysis: * Describe the time and space complexity for each method. * Experiment with strings of different lengths and document the relative performance. # Example: ```python print(recursive_reverse(\\"example\\")) # Output: \\"elpmaxe\\" print(iterative_reverse(\\"example\\")) # Output: \\"elpmaxe\\" print(pythonic_reverse(\\"example\\")) # Output: \\"elpmaxe\\" print(ultra_pythonic_reverse(\\"example\\")) # Output: \\"elpmaxe\\" ``` # Notes: * Write unit tests to validate each implementation. * Ensure your functions handle edge cases gracefully. * Analyze and discuss the performance differences in your submission.","solution":"def recursive_reverse(s: str) -> str: Reverse a string using recursion. :param s: input string :return: reversed string if len(s) == 0: return s else: return recursive_reverse(s[1:]) + s[0] def iterative_reverse(s: str) -> str: Reverse a string using an iterative approach. :param s: input string :return: reversed string reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str def pythonic_reverse(s: str) -> str: Reverse a string using Python\'s built-in functions. :param s: input string :return: reversed string return \'\'.join(reversed(s)) def ultra_pythonic_reverse(s: str) -> str: Reverse a string using Python\'s slicing. :param s: input string :return: reversed string return s[::-1]"},{"question":"# Scenario You are developing a spell check feature for a text editor. The feature will check if a given sentence can be segmented into valid English words present in a pre-defined dictionary. Given a sentence and a dictionary of valid words, you need to determine if the sentence can be segmented into a sequence of one or more dictionary words. # Problem Statement Write a function `can_segment_sentence(sentence, word_dict)` that determines if the given `sentence` can be segmented into a space-separated sequence of words present in `word_dict`. Input * A non-empty string `sentence`, where 1 <= len(sentence) <= 1000. * A list of non-empty strings `word_dict`, of length n, where each word in the dictionary is unique. 1 <= n <= 1000, and each word in the dictionary has length 1 <= len(word) <= 50. Output * Return `True` if the sentence can indeed be segmented based on the dictionary, otherwise return `False`. Constraints * You may assume the dictionary does not contain duplicate words. * You can use only the words present in the dictionary for segmentation. Example ```python # Example 1: sentence = \\"applepenapple\\" word_dict = [\\"apple\\", \\"pen\\"] # \\"applepenapple\\" can be segmented as \\"apple pen apple\\". # Expected Output: True # Example 2: sentence = \\"catsandog\\" word_dict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] # \\"catsandog\\" cannot be fully segmented using the dictionary provided. # Expected Output: False # Example 3: sentence = \\"a\\" word_dict = [\\"a\\"] # \\"a\\" can be segmented as \\"a\\". # Expected Output: True # Example 4: sentence = \\"aaaaa\\" word_dict = [\\"a\\", \\"aa\\", \\"aaa\\"] # \\"aaaaa\\" can be segmented as \\"a a a a a\\". # Expected Output: True ``` # Constraints * The execution time should be within reasonable limits for all edge cases. * Handle special cases such as empty strings and single-character strings efficiently. # Implementation Define the function `can_segment_sentence(sentence, word_dict)` as described.","solution":"def can_segment_sentence(sentence, word_dict): Determine if the sentence can be segmented into a space-separated sequence of words present in the word_dict. Args: sentence (str): The sentence to be segmented. word_dict (list): List of valid words. Returns: bool: True if the sentence can be segmented, else False. word_set = set(word_dict) n = len(sentence) dp = [False] * (n + 1) dp[0] = True # Empty string can be segmented for i in range(1, n + 1): for j in range(i): if dp[j] and sentence[j:i] in word_set: dp[i] = True break return dp[n]"},{"question":"# Task **Problem Statement**: You need to design a function called `remove_invalid_bits` which processes a list of tuples. Each tuple contains an integer and an index `i`. The function should remove the bit at the specified index for each tuple\'s integer. # Function Signature ```python def remove_invalid_bits(data: List[Tuple[int, int]]) -> List[int]: pass ``` # Input * `data`: A list of tuples, where each tuple contains: * An integer `num` (1 <= num <= 10^9). * An index `i` (0 <= i < number of bits in `num`). # Output * A list of integers with the bit at the specified position removed. # Constraints * Avoid using inbuilt functions for bit manipulation (e.g., remove calls to inbuilt functions that directly convert or operate on binary formats). * The length of `data` list will be between 1 and 10^5. # Example ```python data = [ (21, 2), # Binary of 21: 10101, remove bit at index 2 -> 1001 (9) (21, 4), # Binary of 21: 10101, remove bit at index 4 -> 101 (5) (8, 3) # Binary of 8: 1000, remove bit at index 3 -> 0 (0) ] # Expected output: # [9, 5, 0] assert remove_invalid_bits(data) == [9, 5, 0] ``` # Note Make sure to handle edge cases effectively, such as removing the least significant bit or attempting to remove a bit outside the range of the number\'s bit-length.","solution":"def remove_invalid_bits(data): def remove_bit_at_index(num, index): # Convert num to binary and store as a list of characters binary = list(bin(num)[2:]) # Calculate the position to remove (length of binary list - index - 1) remove_pos = len(binary) - 1 - index # Remove the bit at remove_pos del binary[remove_pos] # Convert the resulting list back to integer return int(\\"\\".join(binary), 2) if binary else 0 return [remove_bit_at_index(num, index) for num, index in data]"},{"question":"# Minimum Perfect Squares Representation As a mathematically inclined programmer, you are given the task of determining the minimum number of perfect square numbers which sum to a given positive integer `n`. Write a function `min_perfect_squares(n: int) -> int`: * **Input**: - `n` (1 ≤ n ≤ 10^5): an integer representing the target sum. * **Output**: - An integer representing the minimum number of perfect square numbers which sum to `n`. **Constraints**: - Ensure your code handles the maximum limit efficiently. - Avoid recursive solutions due to potential stack overflow with large numbers. - Optimize for both time and space complexity keeping the constraints in mind. **Example**: - `min_perfect_squares(9)` should return `1` (because 9 = 3^2). - `min_perfect_squares(10)` should return `2` (because 10 = 3^2 + 1^2). - `min_perfect_squares(12)` should return `3` (because 12 = 2^2 + 2^2 + 2^2). - `min_perfect_squares(31)` should return `4` (because 31 = 5^2 + 2^2 + 1^2 + 1^2). Consider any necessary edge cases where certain integer properties (like forms of specific theorems) might influence performance or correctness. Ensure your solution is both efficient and correct across the entire provided range.","solution":"import math def min_perfect_squares(n: int) -> int: Returns the minimum number of perfect square numbers which sum to n. if n <= 0: return 0 # Initialize the dp array where dp[i] means the minimum number of perfect squares sum to i dp = [float(\'inf\')] * (n + 1) dp[0] = 0 # For every number from 1 to n, compute the minimum number of perfect squares for i in range(1, n + 1): j = 1 while j * j <= i: dp[i] = min(dp[i], dp[i - j * j] + 1) j += 1 return dp[n]"},{"question":"# Histogram Representation Given a list of integers, your task is to write a function `compute_histogram` that generates a histogram representation of the number of occurrences of each integer in the list. A histogram is a way to represent the distribution of values in a list using a dictionary, where keys represent the elements of the list and values represent the frequency of those elements. **Function Signature:** ```python def compute_histogram(input_list: list) -> dict: ``` # Input * `input_list` (list) : A list of integers, where each integer is between -10^6 and 10^6. The length of the list is between 0 and 10^5. # Output * A dictionary where each key is an integer from the input list and the corresponding value is the count of that integer\'s occurrences in the list. # Constraints * The length of the input list does not exceed `10^5`. * Input integers are between `-10^6` and `10^6`. # Performance Requirement * Your solution should run in O(n) time complexity. # Examples 1. **Example 1**: * Input: `[3, 3, 2, 1]` * Output: `{1: 1, 2: 1, 3: 2}` 2. **Example 2**: * Input: `[2, 3, 5, 5, 5, 6, 4, 3, 7]` * Output: `{2: 1, 3: 2, 4: 1, 5: 3, 6: 1, 7: 1}` 3. **Example 3**: * Input: `[]` * Output: `{}` # Edge Cases to Consider * An empty list should return an empty dictionary. * A list where all occurrences are the same, for example `[1, 1, 1, 1]`, should return a dictionary with one key: `{1: 4}`.","solution":"def compute_histogram(input_list): Given a list of integers, returns a dictionary where keys are the elements and values are the number of occurrences of these elements in the list. histogram = {} for number in input_list: if number in histogram: histogram[number] += 1 else: histogram[number] = 1 return histogram"},{"question":"<|Analysis Begin|> # Algorithm/Data Structure * **Algorithm Name**: Increment Digits Array * **Type**: Array Manipulation * **Purpose**: Given a non-negative number represented as an array of digits, increment the number by one. # Complexity * **Time Complexity**: O(n), where n is the number of digits in the array. This is because in the worst case, each digit of the array needs to be checked and possibly modified. * **Space Complexity**: O(1) for algorithms `plus_one_v2` and `plus_one_v3`, as they modify the input array in place except for the case where a new digit is added at the start. O(n) for `plus_one_v1` as it creates a new list to store the result. # Principles * **Operational Steps**: 1. Identify the least significant digit and attempt to add one to it. 2. Process digits from least significant to most significant. 3. Handle overflow when a digit becomes 10 (carry the 1 to the next significant digit). 4. If there\'s a carry after processing all digits, prepend a `1` to the array. # Characteristics & Applications * **Properties**: * Handles big-endian notation, where the most significant digit is at the head of the list. * Can deal with varying lengths of input arrays. * **Common Use Cases**: * Adding one to a multi-digit number represented as an array. * Useful in applications needing precise handling of digit-by-digit arithmetic, such as custom big integer implementations. * **Strengths/Limitations**: * **Strengths**: Straightforward and easy to implement; the in-place version is space-efficient. * **Limitations**: Limited to non-negative digit arrays; does not handle floating-point or negative numbers. # Implementation Challenges * **Edge Cases**: * Arrays filled with 9s (e.g., `[9, 9, 9]` resulting in `[1, 0, 0, 0]`). * Single element arrays (e.g., `[0]` or `[9]`). * **Performance Bottlenecks**: * None significant, since operations are linear in the number of digits. * **Error Scenarios**: * Misinterpreting the structure (e.g., leading zeroes should not exist in output). * **Optimization Points**: * Switching to an in-place approach (`plus_one_v2` and `plus_one_v3`). <|Analysis End|> <|Question Begin|> # Problem Statement Write a function `plus_one` that takes a list of digits, representing a non-negative integer in big-endian notation, and returns a new list representing the integer incremented by one. # Input * A list `digits` of integers (from 0 to 9) representing a non-negative number, where the leading digit is at the start of the list. # Output * A list of integers representing the incremented number. # Examples ```python plus_one([1, 2, 3]) -> [1, 2, 4] plus_one([0]) -> [1] plus_one([9, 9, 9]) -> [1, 0, 0, 0] plus_one([2, 5, 9]) -> [2, 6, 0] ``` # Constraints 1. The input list will not contain any leading zeros except for the number `0` itself. 2. The list can have up to `10^5` elements. # Performance Requirements * Your solution should work within the time complexity of O(n). # Function Signature ```python def plus_one(digits: List[int]) -> List[int]: pass ``` # Notes * Make sure to handle all the edge cases and test your solution thoroughly. * Consider in-place modifications for space efficiency when possible.","solution":"from typing import List def plus_one(digits: List[int]) -> List[int]: Increments the given list of digits by one and returns the new list of digits. n = len(digits) # Start from the last digit and work our way to the front for i in range(n-1, -1, -1): if digits[i] < 9: digits[i] += 1 return digits digits[i] = 0 # If all the digits were 9, we have a situation like 999 + 1 = 1000 return [1] + [0]*n"},{"question":"Context You are given an unsorted linked list where each node contains an integer value. Your task is to write functions to remove duplicate elements from this linked list. Function Signature ```python class Node: def __init__(self, val=None): self.val = val self.next = None def remove_duplicates_using_set(head): Removes duplicates from a linked list using a hash set. Parameters: head (Node): The head node of the linked list. Returns: None: The linked list is modified in place. pass def remove_duplicates_without_set(head): Removes duplicates from a linked list without using extra space. Parameters: head (Node): The head node of the linked list. Returns: None: The linked list is modified in place. pass def print_linked_list(head): Helper function to print the linked list. Parameters: head (Node): The head node of the linked list. Returns: None pass ``` Requirements 1. Implement `remove_duplicates_using_set(head)` to remove duplicates using a hash set. - **Expected Time Complexity**: O(N). - **Expected Space Complexity**: O(N). 2. Implement `remove_duplicates_without_set(head)` to remove duplicates without using additional space. - **Expected Time Complexity**: O(N^2). - **Expected Space Complexity**: O(1). 3. Write helper function `print_linked_list(head)` to print the linked list in the following format: ``` 1 -> 2 -> 3 -> 4 ``` Constraints * The number of nodes in the linked list is in the range [0, 10^4]. * Node values are integer [-10^4, 10^4]. Example Given the linked list: ``` 1 -> 2 -> 2 -> 3 -> 4 -> 4 -> 4 -> 5 -> 6 -> 1 ``` After calling `remove_duplicates_using_set(head)`: ``` 1 -> 2 -> 3 -> 4 -> 5 -> 6 ``` After calling `remove_duplicates_without_set(head)` on the same initial list: ``` 1 -> 2 -> 3 -> 4 -> 5 -> 6 ``` Notes * Focus on edge cases like an empty list, all unique elements, all duplicates, etc. * Assume that the print function delivers clear, readable outputs for testing the results.","solution":"class Node: def __init__(self, val=None): self.val = val self.next = None def remove_duplicates_using_set(head): if not head: return seen = set() current = head seen.add(current.val) while current.next: if current.next.val in seen: current.next = current.next.next else: seen.add(current.next.val) current = current.next def remove_duplicates_without_set(head): if not head: return current = head while current: runner = current while runner.next: if runner.next.val == current.val: runner.next = runner.next.next else: runner = runner.next current = current.next def print_linked_list(head): current = head values = [] while current: values.append(str(current.val)) current = current.next print(\\" -> \\".join(values))"},{"question":"Scenario In an ancient library, a linguist discovered several manuscripts. Among these, one type of puzzle caught their attention: panagrams. Your task is to assist the linguist in their analysis by writing a function to determine if a given manuscript phrase is an English panagram. Objective Write a function `is_panagram(phrase: str) -> bool` that evaluates whether the given `phrase` contains every letter of the English alphabet at least once. Specifications * **Input**: A single string `phrase` containing the manuscript\'s text. * **Output**: A boolean `True` if the phrase is an English panagram, otherwise `False`. Constraints 1. The input string consists of ASCII characters including spaces and punctuation. 2. Case insensitivity: Both uppercase and lowercase characters should be considered as equivalent. Example ```python assert is_panagram(\\"The quick brown fox jumps over the lazy dog\\") == True assert is_panagram(\\"Hello World!\\") == False assert is_panagram(\\"\\") == False assert is_panagram(\\"Pack my box with five dozen liquor jugs.\\") == True ``` **Additional Constraints**: * You must ensure that the function handles unexpected edge cases gracefully. * Avoid using heavy libraries or dependencies; stick to native Python capabilities.","solution":"def is_panagram(phrase: str) -> bool: Determines if the given phrase is an English panagram. A panagram is a sentence containing every letter of the English alphabet at least once. :param phrase: The manuscript\'s text to evaluate. :return: True if the phrase is a panagram, otherwise False. # Define the alphabet set alphabet = set(\'abcdefghijklmnopqrstuvwxyz\') # Convert the phrase to lowercase and create a set of characters in the phrase phrase_set = set(phrase.lower()) # Check if all letters in the alphabet are present in the phrase return alphabet.issubset(phrase_set)"},{"question":"# Binary Tree Height Calculation **Objective**: Write a function `find_tree_height` to determine the height of a binary tree. The height of a binary tree is defined as the number of levels it contains. The tree height for an empty tree is 0, while the height for a single node is 1. Function Signature: ```python def find_tree_height(root: Optional[TreeNode]) -> int: ``` Input: - `root (TreeNode)`: The root node of the binary tree. Each node has attributes `val`, `left`, and `right` representing its value and left/right children. Output: - `int`: The height of the binary tree. Constraints: - Do not use any external libraries other than `unittest` for testing. - Assume TreeNode is a pre-defined class as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` - Your solution should handle edge cases, such as empty trees or single-node trees. # Example: Consider the binary tree: ``` 5 / 3 8 /| | 1 4 7 9 ``` * find_tree_height(TreeNode(5)) should return 3. Scenario: You are given a binary tree for pathfinding in game development. Your task is to compute the tree\'s height, which could help in balancing the tree for efficient searches. Performance Requirements: - Ensure the algorithm efficiently computes the height, with a time complexity of O(n). # Additional Notes: - Write unit tests to validate that your function works correctly for various scenarios.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_tree_height(root: TreeNode) -> int: if root is None: return 0 else: left_height = find_tree_height(root.left) right_height = find_tree_height(root.right) return max(left_height, right_height) + 1"},{"question":"# Hierarchical Tree Representation and Print Function Context In an organizational structure management system, each manager can have multiple subordinates and each subordinate can have their own teams. The structure is represented using nested dictionaries where keys are the names of individuals and values are their respective teams or responsibilities. Task Write a function `tree_print(tree: dict) -> None` in Python to display the hierarchical organization structure stored in a nested dictionary. The function should print the hierarchy where each node and its sub-elements are properly indented to represent their level in the hierarchy. Input: - `tree` (dict): A nested dictionary representing the tree structure. Each key is a string representing a person\'s name, and the value is a list which may contain strings (representing direct responsibilities) or further dictionaries (representing subordinates and their teams). Output: The function should print the hierarchical structure where each level is appropriately indented. Use `->` to indicate levels and `n` for new line after each subtree. Constraints: - Each key in the dictionary corresponds to an individual\'s name. - Each value is either a list of strings (direct responsibilities) or nested dictionaries. Example ```python tree = { \'Adam\': [\'Book\', {\'Bill\': [\'Computer\', \'TV\'], \'Jill\': [\'Sports\']}], \'Bill\': [\'Sports\'], \'Quin\': [{\'Adam\': [\'Computer\', \'Tree\']}] } tree_print(tree) ``` Expected Output ``` Adam -> Book -> -> Bill -> Computer -> TV -> -> Jill -> Sports Bill -> Sports Quin -> -> Adam -> Computer -> Tree -> ``` Instruction Implement the function `tree_print(tree: dict) -> None` to achieve this output effectively. Handle all edge cases, including deeply nested structures and empty dictionaries.","solution":"def tree_print(tree, level=0): Recursively prints the hierarchical structure stored in the tree dictionary. Args: tree (dict): A nested dictionary representing the hierarchical structure. level (int): The current level of depth in the hierarchy for indentation purposes. indent = \' \' * 4 * level for name, responsibilities in tree.items(): print(f\\"{indent}{name}\\") if isinstance(responsibilities, list): for responsibility in responsibilities: if isinstance(responsibility, dict): tree_print(responsibility, level + 1) else: print(f\\"{indent}{\' \' * 4}{responsibility}\\") # Example usage: # tree = { # \'Adam\': [\'Book\', {\'Bill\': [\'Computer\', \'TV\'], \'Jill\': [\'Sports\']}], # \'Bill\': [\'Sports\'], # \'Quin\': [{\'Adam\': [\'Computer\', \'Tree\']}] # } # tree_print(tree)"},{"question":"# Fenwick Tree Application: Flexible Prefix Sum Queries Consider an academic institute where student grades are recorded using a list of integers. We need to design a system that efficiently handles the following operations: 1. **Query**: Calculate the sum of grades in a specified range. 2. **Update**: Modify the grade of a specified student. Implement a class `FlexibleGradeSystem` using a Fenwick Tree to support these operations efficiently. Class Definition ```python class FlexibleGradeSystem: def __init__(self, grades: List[int]): # Initialize the Fenwick Tree with the provided grades def query_sum(self, start: int, end: int) -> int: # Return the sum of grades from index \'start\' to \'end\' inclusive def update_grade(self, index: int, new_grade: int): # Update the grade at the specified index to \'new_grade\' ``` Input * `grades`: List of integers representing the initial grades of the students. * `start`: Integer representing the starting index for the query (0-indexed). * `end`: Integer representing the ending index for the query (0-indexed). * `index`: Integer representing the index of the grade to update (0-indexed). * `new_grade`: Integer representing the new grade to be assigned. Output * `query_sum`: Returns the sum of grades within the specified range `[start, end]`. * `update_grade`: Modifies the grade at the specified index to `new_grade`. Examples 1. Given grades `[3, 2, 7, 3, 8, 1, 5, 2]`: * `query_sum(1, 4)` returns `2 + 7 + 3 + 8 = 20`. * `update_grade(3, 10)` updates the grades to `[3, 2, 7, 10, 8, 1, 5, 2]`. * `query_sum(1, 4)` now returns `2 + 7 + 10 + 8 = 27`. 2. For initial grades `[1, 2, 3, 4, 5]`: * `query_sum(0, 2)` returns `1 + 2 + 3 = 6`. * `update_grade(2, 10)` updates the grades to `[1, 2, 10, 4, 5]`. * `query_sum(0, 2)` now returns `1 + 2 + 10 = 13`. Constraints * 1 <= len(grades) <= 10^5 * 0 <= grades[i], new_grade <= 100 * 0 <= start <= end < len(grades) * 0 <= index < len(grades)","solution":"class FlexibleGradeSystem: def __init__(self, grades): self.n = len(grades) self.grades = grades[:] self.tree = [0] * (self.n + 1) for i in range(self.n): self._init_update(i, grades[i]) def _init_update(self, index, value): idx = index + 1 while idx <= self.n: self.tree[idx] += value idx += idx & -idx def _prefix_sum(self, index): idx = index + 1 result = 0 while idx > 0: result += self.tree[idx] idx -= idx & -idx return result def query_sum(self, start, end): if start == 0: return self._prefix_sum(end) else: return self._prefix_sum(end) - self._prefix_sum(start - 1) def update_grade(self, index, new_grade): diff = new_grade - self.grades[index] self.grades[index] = new_grade idx = index + 1 while idx <= self.n: self.tree[idx] += diff idx += idx & -idx"},{"question":"# Question: Implement a Method to Convert an Unsorted Array into a Min Heap Given an unsorted array of integers, your task is to transform it into a Min Heap. You are required to implement the function `build_min_heap(arr)` that converts the given array `arr` into a Min Heap, in place. # Input - A list of integers `arr` where `2 <= len(arr) <= 10^5`. # Output - The function should modify the list `arr` so that it fulfills the Min Heap property and return `None`. # Example ```python arr = [45, 12, 11, 7, 25, 3] build_min_heap(arr) print(arr) # Output should be a representation of a Min Heap, e.g., [3, 7, 11, 12, 25, 45] ``` # Constraints - Your solution should have a time complexity of O(N), where N is the number of elements in the array. - Do not use heapify or any built-in heap functions from Python\'s `heapq` library.","solution":"def build_min_heap(arr): def heapify(arr, n, i): smallest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[left] < arr[smallest]: smallest = left if right < n and arr[right] < arr[smallest]: smallest = right if smallest != i: arr[i], arr[smallest] = arr[smallest], arr[i] heapify(arr, n, smallest) n = len(arr) for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i)"},{"question":"# Question: Implementing Modified Kruskal\'s Algorithm to Handle Disconnected Graphs You are given an undirected graph consisting of `n` vertices and `m` edges. Your task is to find the Minimum Spanning Tree (MST) for the graph using Kruskal\'s algorithm. Additionally, if the graph is disconnected, you should identify and output all connected components along with their respective MSTs. If there are no edges in a component, simply identify the component. Input Format: 1. The first line contains two integers ( n ) and ( m ) — the number of vertices and edges, respectively. 2. Each of the next ( m ) lines contains three integers ( u ), ( v ), and ( w ) — representing an edge between vertices ( u ) and ( v ) with weight ( w ). Output Format: 1. For each connected component include: - The number of vertices in the component. - The number of edges in the MST. - The sum of the weights of the MST. Constraints: - ( 1 leq n leq 10^5 ) - ( 0 leq m leq 2 times 10^5 ) - ( 1 leq u, v leq n ) - ( 1 leq w leq 10^4 ) Example: **Input:** ``` 7 5 1 2 3 1 3 8 2 4 5 5 6 1 6 7 2 ``` **Output:** ``` Component 1: Vertices: 4 Edges in MST: 3 MST Weight Sum: 16 Component 2: Vertices: 3 Edges in MST: 2 MST Weight Sum: 3 ``` Implementation Hints: - You can use Kruskal\'s algorithm with the Union-Find structure to find the MST. - To detect and separate different components, modify the Union-Find structure to keep track of component sizes and roots. Implement the function `find_msts_for_components(n, m, edges)` that returns the information for each connected component\'s MST, according to the format described above.","solution":"def find_msts_for_components(n, m, edges): parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 edges.sort(key=lambda x: x[2]) mst_edges = {i: [] for i in range(1, n + 1)} for u, v, w in edges: root_u = find(u) root_v = find(v) if root_u != root_v: union(u, v) mst_edges[find(u)].append((u, v, w)) components = {} for i in range(1, n + 1): root = find(i) if root not in components: components[root] = set() components[root].add(i) result = [] seen_edges = set() for root, nodes in components.items(): mst_weight = 0 edge_count = 0 for u, v, w in mst_edges[root]: if (u, v) not in seen_edges and (v, u) not in seen_edges: mst_weight += w edge_count += 1 seen_edges.add((u, v)) seen_edges.add((v, u)) result.append({ \\"vertices\\": len(nodes), \\"edges_in_mst\\": edge_count, \\"mst_weight_sum\\": mst_weight }) return result"},{"question":"# Description You are provided with a class implementation for a directed graph that computes the transitive closure using Depth-First Search (DFS). The transitive closure matrix indicates whether each pair of vertices are reachable from each other. The goal is to implement a function that utilizes this class to return the transitive closure matrix of a given directed graph. # Task Implement the function `find_transitive_closure(vertex_count, edges)` where: * `vertex_count`: An integer representing the number of vertices in the graph. * `edges`: A list of tuples (u, v) where each tuple represents a directed edge from vertex `u` to vertex `v`. The function should initialize the graph, add the given edges, compute the transitive closure using the `transitive_closure` method, and return the resultant closure matrix. # Input * `vertex_count`: 1 ≤ vertex_count ≤ 100 * `edges`: 0 ≤ number of edges ≤ 10,000 # Output * A matrix of size `vertex_count x vertex_count` where element [i][j] is 1 if there is a path from vertex `i` to vertex `j`, otherwise 0. # Example ```python vertex_count = 4 edges = [(0, 1), (1, 2), (2, 3), (3, 0)] result = find_transitive_closure(vertex_count, edges) # Expected Output: # [ # [1, 1, 1, 1], # [1, 1, 1, 1], # [1, 1, 1, 1], # [1, 1, 1, 1] # ] ``` # Constraints * Make sure the implementation handles errors and edge cases. * Consider using additional helper functions to structure the solution clearly. * Aim for efficient code with clear comments explaining each critical step. # Implementation Template ```python def find_transitive_closure(vertex_count, edges): # Your implementation here class Graph: def __init__(self, vertices): self.vertex_count = vertices self.graph = {} self.closure = [[0 for j in range(vertices)] for i in range(vertices)] def add_edge(self, source, target): if source in self.graph: self.graph[source].append(target) else: self.graph[source] = [target] def dfs_util(self, source, target): self.closure[source][target] = 1 for adjacent in self.graph[target]: if self.closure[source][adjacent] == 0: self.dfs_util(source, adjacent) def transitive_closure(self): for i in range(self.vertex_count): self.dfs_util(i, i) return self.closure graph = Graph(vertex_count) for u, v in edges: graph.add_edge(u, v) return graph.transitive_closure() ```","solution":"def find_transitive_closure(vertex_count, edges): class Graph: def __init__(self, vertices): self.vertex_count = vertices self.graph = {i: [] for i in range(vertices)} self.closure = [[0 for j in range(vertices)] for i in range(vertices)] def add_edge(self, source, target): self.graph[source].append(target) def dfs_util(self, source, target): self.closure[source][target] = 1 for adjacent in self.graph[target]: if self.closure[source][adjacent] == 0: self.dfs_util(source, adjacent) def transitive_closure(self): for i in range(self.vertex_count): self.dfs_util(i, i) # Start the DFS from vertex i return self.closure graph = Graph(vertex_count) for u, v in edges: graph.add_edge(u, v) return graph.transitive_closure()"},{"question":"Cycle Detection in Linked List Given a linked list, determine if it has a cycle in it using constant extra space. # Function Signature ```python def has_cycle(head: Node) -> bool: ``` # Input * `head`: The head node of a singly linked list of integers. The linked list may contain cycles. # Output * Returns `True` if there is a cycle in the linked list, otherwise returns `False`. # Constraints * You must solve this problem without using extra space. # Example ```python # Example 1: # Create a list with a cycle head = Node(1) second = Node(2) third = Node(3) head.next = second second.next = third third.next = head # creates a cycle print(has_cycle(head)) # Output should be: True # Example 2: # Create a list without a cycle head = Node(1) second = Node(2) third = Node(3) head.next = second second.next = third third.next = None # no cycle print(has_cycle(head)) # Output should be: False ``` # Explanation In Example 1, the linked list contains a cycle because the third node points back to the first node. Thus, the function should return `True`. In Example 2, the linked list does not contain a cycle, so the function should return `False`. Include edge cases such as an empty list or a single node pointing to itself. # Performance Requirements Your solution should work efficiently for a large linked list with up to 10^6 nodes.","solution":"class Node: def __init__(self, value: int = 0, next: \'Node\' = None): self.value = value self.next = next def has_cycle(head: Node) -> bool: Detects if a linked list has a cycle in it using the Floyd\'s Cycle-Finding Algorithm. if head is None: return False slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"# Scenario You are working on a project that involves analyzing social networks to detect influence patterns and clusters. For certain operations, you need a deep copy of a given social network, represented as an undirected graph. # Problem Statement Write a function `clone_social_network(node)` that takes in a node from an undirected graph representing a social network and returns a deep copy of the entire graph. Nodes in the graph are instances of the `UndirectedGraphNode` class provided. You can assume that each node\'s label is unique. # Implementation Requirements * You must implement the deep copy using **Breadth-First Search (BFS)**. * Your solution should handle self-cycles and ensure the integrity of the original graph\'s structure. * If the input `node` is `None`, your function should return `None`. # Input - `node`: An instance of `UndirectedGraphNode` or None. # Output - Returns a new `UndirectedGraphNode` that is a deep copy of the original graph starting from the given node. # Constraints - Nodes are uniquely labeled - The graph is undirected and may contain cycles. - Each node may have between 0 and 1000 neighbors. # Example ```python # Graph Serialization: # {0,1,2#1,2#2,2} # Instantiating the graph node0 = UndirectedGraphNode(0) node1 = UndirectedGraphNode(1) node2 = UndirectedGraphNode(2) node0.add_neighbor(node1) node0.add_neighbor(node2) node1.add_neighbor(node2) node2.add_neighbor(node2) # Cloning the graph cloned_node = clone_social_network(node0) # The cloned_node should now be a deep copy of the input graph starting at node0 ``` # Hint Utilize a queue in your BFS approach to ensure you traverse the graph layer by layer and correctly establish connections between cloned nodes.","solution":"class UndirectedGraphNode: def __init__(self, label): self.label = label self.neighbors = [] def add_neighbor(self, neighbor): self.neighbors.append(neighbor) def clone_social_network(node): if not node: return None # Dictionary to track copied nodes copied_nodes = {} # Initialize the BFS queue queue = [node] # Create the root node for the cloned graph copied_nodes[node.label] = UndirectedGraphNode(node.label) while queue: current_node = queue.pop(0) for neighbor in current_node.neighbors: if neighbor.label not in copied_nodes: # Clone the neighbor copied_nodes[neighbor.label] = UndirectedGraphNode(neighbor.label) # Add the neighbor to the queue for BFS queue.append(neighbor) # Link the cloned current node to the cloned neighbor copied_nodes[current_node.label].neighbors.append(copied_nodes[neighbor.label]) return copied_nodes[node.label]"},{"question":"Scenario: You are developing a function for a data analysis software that needs to filter values from a dataset based on user-provided limits. The function should take an array of numerical values and two optional limit parameters (`min_lim` and `max_lim`). It should return a new array containing only the values within these limits. Function Specifications: * **Function Name**: `limit` * **Parameters**: - `arr` (List[int]): a list of integers. - `min_lim` (Optional[int]): an optional integer representing the minimum limit (inclusive). - `max_lim` (Optional[int]): an optional integer representing the maximum limit (inclusive). * **Return**: A list of integers filtered to include only those values from `arr` that fall between `min_lim` and `max_lim`. Constraints: * If `min_lim` is None, use the smallest value in the array as the lower limit. * If `max_lim` is None, use the largest value in the array as the upper limit. * If `arr` is empty, the function should return an empty list. * Ensure the function runs in linear time, O(n). Example Usage: ```python print(limit([1, 5, 7, 10, 15], 5, 10)) # Output: [5, 7, 10] print(limit([3, 1, 4, 1, 5, 9, 2], None, 4)) # Output: [3, 1, 4, 1, 2] print(limit([], 2, 8)) # Output: [] print(limit([1, 2, 3, 4, 5], 6, 10)) # Output: [] print(limit([12, 7, 11, 10], 8, None)) # Output: [12, 11, 10] ``` Develop the function `limit` based on the above specifications.","solution":"from typing import List, Optional def limit(arr: List[int], min_lim: Optional[int] = None, max_lim: Optional[int] = None) -> List[int]: Filters the input list of integers based on the provided limits. Parameters: arr (List[int]): Input list of integers. min_lim (Optional[int]): Minimum limit (inclusive) for filtering. max_lim (Optional[int]): Maximum limit (inclusive) for filtering. Returns: List[int]: A list of integers filtered to include only those values between `min_lim` and `max_lim`. if not arr: return [] if min_lim is None: min_lim = min(arr) if max_lim is None: max_lim = max(arr) return [x for x in arr if min_lim <= x <= max_lim]"},{"question":"# Description You are to implement the `edit_distance` function that computes the minimum number of operations (insertion, deletion, substitution) required to transform one string into another. This is a crucial measure in applications such as spell checking, DNA sequencing, and natural language processing. # Function Signature ```python def edit_distance(word_a: str, word_b: str) -> int: ``` # Input * `word_a` (str): The first word. * `word_b` (str): The second word. # Output * (int): The minimum number of operations needed to transform `word_a` into `word_b`. # Constraints * 0 ≤ len(word_a) ≤ 1000 * 0 ≤ len(word_b) ≤ 1000 # Edge Cases to Consider * Either `word_a` or `word_b` (or both) could be empty. * `word_a` and `word_b` might be the same. * One word might be a subset or permutation of the other. # Example ```python assert edit_distance(\\"kitten\\", \\"sitting\\") == 3 # kitten -> sitten -> sittin -> sitting assert edit_distance(\\"flaw\\", \\"lawn\\") == 2 # flaw -> law -> lawn assert edit_distance(\\"\\", \\"abc\\") == 3 # \\"\\" -> a -> ab -> abc ``` # Implementation Requirements Implement the function using dynamic programming with a 2D table as described: 1. Initialize the table such that `edit[i][0] = i` for all `i` representing the cost converting a non-empty prefix to an empty string. 2. Similarly, `edit[0][j] = j` for all `j` indicating the cost of converting an empty string to a non-empty prefix. 3. Fill the table by considering insertion, deletion, and substitution operations and using the minimum cost among these options. 4. Return the value in the bottom-right cell of the table which represents the final edit distance.","solution":"def edit_distance(word_a: str, word_b: str) -> int: len_a, len_b = len(word_a), len(word_b) dp = [[0] * (len_b + 1) for _ in range(len_a + 1)] # Initialize the base cases for i in range(len_a + 1): dp[i][0] = i for j in range(len_b + 1): dp[0][j] = j # Compute the cost of each transformation for i in range(1, len_a + 1): for j in range(1, len_b + 1): if word_a[i - 1] == word_b[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min( dp[i - 1][j] + 1, # Deletion dp[i][j - 1] + 1, # Insertion dp[i - 1][j - 1] + 1 # Substitution ) # Result is in the bottom-right cell return dp[len_a][len_b]"},{"question":"You are given an array of integers and need to support two types of operations efficiently: 1. **Sum of the first i elements**: Compute the sum of elements from the start of the array to the ith position. 2. **Update the value of a specified element**: Update the element at index i to a new value x. These operations should be performed multiple times, and efficiency is crucial as the array can be large. # Function Signature ```python class FenwickTree: def __init__(self, arr: List[int]): Initialize the Fenwick Tree with the given array of integers. def update(self, index: int, value: int) -> None: Update the element at the specified index to the new value. def prefix_sum(self, index: int) -> int: Return the sum of the prefix up to the specified index (inclusive). ``` # Method Details * `__init__(self, arr: List[int])` * **Input**: A list of integers `arr` representing the initial state of the array. * **Output**: Initializes the Fenwick Tree. * `update(self, index: int, value: int)` * **Input**: * `index` (int): Position in the array to update (0-based index). * `value` (int): New value to be updated at `index`. * **Output**: None. Updates the specified element in the array. * `prefix_sum(self, index: int) -> int` * **Input**: `index` (int): Position up to which the prefix sum is calculated (0-based index). * **Output**: (int) The sum of elements in the array from start to `index`. # Constraints * 0 ≤ `index` < n (n is the length of the array) * Input list size n will be in the range [1, 10^5] * Element values will be in the range [-10^4, 10^4] # Example ```python # Initialize the Fenwick Tree fenwick_tree = FenwickTree([1, 7, 3, 0, 7, 8, 3, 2, 6, 2]) # Perform prefix sum query sum_result = fenwick_tree.prefix_sum(5) print(sum_result) # Output: 26 (1 + 7 + 3 + 0 + 7 + 8) # Update index 4 to value 1 fenwick_tree.update(4, 1) # Perform another prefix sum query sum_result = fenwick_tree.prefix_sum(5) print(sum_result) # Output: 20 (1 + 7 + 3 + 0 + 1 + 8) ``` Write a class called `FenwickTree` with the above methods so that it efficiently performs the required operations using the Fenwick Tree data structure.","solution":"from typing import List class FenwickTree: def __init__(self, arr: List[int]): self.n = len(arr) self.tree = [0] * (self.n + 1) self.arr = [0] * self.n for i, num in enumerate(arr): self.update(i, num) def update(self, index: int, value: int) -> None: diff = value - self.arr[index] self.arr[index] = value i = index + 1 while i <= self.n: self.tree[i] += diff i += i & -i def prefix_sum(self, index: int) -> int: sum = 0 i = index + 1 while i > 0: sum += self.tree[i] i -= i & -i return sum"},{"question":"**Task**: Implement Tarjan\'s Algorithm to Identify Strongly Connected Components **Context**: You work for a social media platform, and you\'ve been tasked with identifying communities within the network. This can be represented as finding strongly connected components (SCCs) in a directed graph where nodes represent users and edges represent interactions. Use Tarjan\'s algorithm to efficiently group users into communities. **Function Specification** Implement the function `find_sccs(graph)` that takes a directed graph and returns its strongly connected components. **Input Format** * **graph**: A dictionary where keys are nodes (integers or strings) and values are lists of adjacent nodes, representing directed edges. **Output Format** * Returns a list of sets, where each set contains nodes belonging to a strongly connected component. **Constraints** * Nodes are unique and represented as integers or strings. * The graph can contain between 0 and 10^5 nodes. * The graph can contain between 0 and 10^5 edges. **Example Input** ```python graph = { \'A\': [\'B\'], \'B\': [\'C\', \'E\', \'F\'], \'C\': [\'D\', \'G\'], \'D\': [\'C\', \'H\'], \'E\': [\'A\', \'F\'], \'F\': [\'G\'], \'G\': [\'F\'], \'H\': [\'D\', \'G\'] } ``` **Example Output** ```python [{\'H\', \'D\', \'C\'}, {\'E\', \'A\', \'B\'}, {\'G\', \'F\'}] ``` # Implementation Rules 1. Use depth-first search (DFS) based Tarjan\'s algorithm for the implementation. 2. Maintain stack usage to manage current path and index logic to track visited nodes. 3. Ensure input graph is handled for edge cases including empty graphs and self-loops. # Performance Requirements The solution must run within the constraints and have a time complexity of O(V + E).","solution":"def find_sccs(graph): index = 0 stack = [] indices = {} lowlink = {} on_stack = set() sccs = [] def strongconnect(node): nonlocal index indices[node] = index lowlink[node] = index index += 1 stack.append(node) on_stack.add(node) for neighbor in graph.get(node, []): if neighbor not in indices: strongconnect(neighbor) lowlink[node] = min(lowlink[node], lowlink[neighbor]) elif neighbor in on_stack: lowlink[node] = min(lowlink[node], indices[neighbor]) if lowlink[node] == indices[node]: scc = set() while True: w = stack.pop() on_stack.remove(w) scc.add(w) if w == node: break sccs.append(scc) for node in graph: if node not in indices: strongconnect(node) return sccs"},{"question":"Cycle Detection in a Linked List You are given a linked list. Your task is to determine if the linked list contains a cycle and return the starting node of the cycle if it exists. If the linked list does not contain a cycle, return `None`. Function Signature: ```python def first_cyclic_node(head): :type head: Node :rtype: Node ``` # Input - `head`: The head of the linked list represented as a `Node`. # Output - Return the `Node` which is the starting node of the cycle, or `None` if no cycle exists. # Constraints - The linked list may be empty. - Nodes within the linked list contain unique values and the structure follows typical singly linked list properties. - Performance should be optimal; aim for O(n) time complexity and O(1) space complexity. # Example 1. Given a linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 2 (cycle starts at 2) - Input: `head` (linked list head node) - Output: `Node(2)` 2. Given an acyclic linked list: A -> B -> C -> D - Input: `head` (linked list head node) - Output: `None` # Scenario Imagine you are working for a robotics company where robots follow a predefined path before they repeat a cycle. As an engineer, you need to design a mechanism to detect the start of the cycle in the path to optimize the robot\'s route planning and battery usage. Thus, you are required to implement the function `first_cyclic_node` to solve this problem efficiently. **Write your implementation of the function `first_cyclic_node` in the space provided.**","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def first_cyclic_node(head): Detects the start of a cycle in a linked list using Floyd\'s Tortoise and Hare algorithm. :type head: Node :rtype: Node if not head or not head.next: return None slow = head fast = head # First part: determine if there is a cycle while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break else: # No cycle found return None # Second part: find the entry to the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"**Given Task**: You are required to implement the ternary search algorithm and then extend it to find the boundary indices of a given key in a sorted array. Specifically, find the first and the last occurrence indices of the key. **Scenario**: You are given a sorted array of integers and a key. Typically, this could be applied in scenarios such as searching a log of timestamps where multiple events have similar timestamps. **Function Signature**: ```python def find_first_and_last_occurrence(arr: List[int], key: int) -> Tuple[int, int]: Returns a tuple with the first and last occurrence index of the given key in a sorted array `arr`. If the key is not found, return (-1, -1). ``` **Input**: * A sorted array of integers `arr` (1 <= len(arr) <= 10^5). * An integer `key` to be searched for in the array. **Output**: * A tuple with two integers: * Index of the first occurrence of `key`. * Index of the last occurrence of `key`. * If the key is not found, return (-1, -1). **Constraints**: * You must use the ternary search algorithm provided. * The solution should have at most `O(log3 N)` complexity for the search. **Example**: ```python assert find_first_and_last_occurrence([1, 2, 2, 2, 3, 4, 5], 2) == (1, 3) assert find_first_and_last_occurrence([1, 1, 1, 1, 1], 1) == (0, 4) assert find_first_and_last_occurrence([1, 2, 3, 4, 5], 6) == (-1, -1) ``` **Description**: 1. **Find first occurrence**: Use ternary search to find the key. Then, continue searching to the left to find the first occurrence. 2. **Find last occurrence**: Use ternary search to find the key. Then, continue searching to the right to find the last occurrence. 3. Return the indices as a tuple. **Notes**: * Ensure you handle edge cases where the array is empty or contains only one element.","solution":"def ternary_search(arr, key, left, right): while right >= left: mid1 = left + (right - left) // 3 mid2 = right - (right - left) // 3 if arr[mid1] == key: return mid1 if arr[mid2] == key: return mid2 if key < arr[mid1]: right = mid1 - 1 elif key > arr[mid2]: left = mid2 + 1 else: left = mid1 + 1 right = mid2 - 1 return -1 def find_first_occurrence(arr, key, index): first_occurrence = index left, right = 0, index - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == key: first_occurrence = mid right = mid - 1 else: left = mid + 1 return first_occurrence def find_last_occurrence(arr, key, index): last_occurrence = index left, right = index + 1, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == key: last_occurrence = mid left = mid + 1 else: right = mid - 1 return last_occurrence def find_first_and_last_occurrence(arr, key): index = ternary_search(arr, key, 0, len(arr) - 1) if index == -1: return (-1, -1) first = find_first_occurrence(arr, key, index) last = find_last_occurrence(arr, key, index) return (first, last)"},{"question":"# Question: Implement Stooge Sort Given an array of integers, implement the Stooge Sort algorithm to sort the array in non-decreasing order. Input: - The function will receive a single argument `arr` which is a list of integers. Output: - The function should return a list of integers sorted in non-decreasing order. Constraints: - 1 <= len(arr) <= 10^3 - -10^5 <= arr[i] <= 10^5 (for each integer in array) Performance Requirements: - Aim for correctness, efficiency is not the primary focus given the inherent inefficiency of Stooge Sort. Function Signature ```python def stooge_sort(arr: List[int]) -> List[int]: pass ``` Example ```python # Example 1 input_arr = [2, 4, 5, 3, 1] output_arr = stooge_sort(input_arr) print(output_arr) # Output: [1, 2, 3, 4, 5] # Example 2 input_arr = [5, 4, 3, 2, 1] output_arr = stooge_sort(input_arr) print(output_arr) # Output: [1, 2, 3, 4, 5] ``` Implement the function `stooge_sort`.","solution":"def stooge_sort(arr): Implementation of the Stooge Sort algorithm. Sorts the array in place and returns the sorted array. def stooge_recursive(arr, l, h): if l >= h: return # If the element at l is greater than the element at h, swap them if arr[l] > arr[h]: arr[l], arr[h] = arr[h], arr[l] # If there are more than 2 elements in the array if h - l + 1 > 2: t = (h - l + 1) // 3 # Recursively sort the first 2/3 of the array stooge_recursive(arr, l, h - t) # Recursively sort the last 2/3 of the array stooge_recursive(arr, l + t, h) # Recursively sort the first 2/3 again to confirm stooge_recursive(arr, l, h - t) stooge_recursive(arr, 0, len(arr) - 1) return arr"},{"question":"# Coding Problem: Modular Inverse Finder You are given two integers, (a) and (m), where (m) is a prime number. Implement a function to find the modular inverse of (a) under modulo (m). The modular inverse of (a) modulo (m) is an integer (x) such that: [ (a times x) mod m = 1 ] If the modular inverse does not exist, state it explicitly. Function Signature ```python def modular_inverse(a: int, m: int) -> int: pass ``` Input * Two integers ( a ) and ( m ), where ( m ) is a prime number. ( 1 leq a < m ). Output * An integer ( x ) such that ((a times x) mod m = 1). If the modular inverse does not exist, return ( -1 ). Example ```python assert modular_inverse(3, 11) == 4 assert modular_inverse(10, 17) == 12 assert modular_inverse(12, 8) == -1 # Since 8 is not prime, case will show no inverse. ``` Constraints * Use the Extended Euclidean Algorithm to find the modular inverse. * Ensure the solution operates efficiently.","solution":"def modular_inverse(a: int, m: int) -> int: Find the modular inverse of a under modulo m using the Extended Euclidean Algorithm. If no modular inverse exists, return -1. def extended_gcd(a, b): Extended Euclidean Algorithm to find the gcd of a and b. It also finds x and y such that ax + by = gcd(a, b) if a == 0: return b, 0, 1 gcd, x1, y1 = extended_gcd(b % a, a) x = y1 - (b // a) * x1 y = x1 return gcd, x, y gcd, x, _ = extended_gcd(a, m) if gcd != 1: # If gcd is not 1, then inverse does not exist return -1 else: return x % m # Example assertions assert modular_inverse(3, 11) == 4 assert modular_inverse(10, 17) == 12 assert modular_inverse(12, 8) == -1 # Since 8 is not prime, case will show no inverse."},{"question":"# Question You are given a collection of distinct numbers. Your task is to write a function to return all possible permutations of the given collection. To demonstrate your understanding, you should: 1. Implement a traditional recursive approach, ensuring all edge cases are handled. 2. Implement an iterative approach using a generator for the same purpose. 3. Ensure that your solutions are efficient and avoid unnecessary computations. **Function Signatures**: ```python def permute(elements: List[int]) -> List[List[int]]: pass def permute_iter(elements: List[int]) -> Iterator[List[int]]: pass ``` **Input**: * `elements`: A list of distinct integers, `1 <= len(elements) <= 9`. **Output**: * For `permute`, a list of lists where each sublist is a unique permutation of the input list. * For `permute_iter`, an iterator that yields permutations one at a time. **Constraints**: * Input list will contain distinct numbers. * Ensure the solutions handle edge cases like empty and single-element lists. **Examples**: ```python permute([1,2,3]) # Output: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] permute_iter([1, 2]) # Output: yields [1, 2] and [2, 1] ``` The function should be efficient, and you should carefully handle recursive calls to avoid stack overflow issues for larger inputs. Additionally, ensure that your iterative version is correctly implemented using a generator to save memory.","solution":"from typing import List, Iterator def permute(elements: List[int]) -> List[List[int]]: Returns all possible permutations of the given list of distinct numbers using a recursive approach. if len(elements) <= 1: return [elements] perms = [] for i in range(len(elements)): # Remove the element to be fixed at the current position fixed = elements[i] remaining = elements[:i] + elements[i + 1:] # Recursively find all permutations of the remaining elements for p in permute(remaining): perms.append([fixed] + p) return perms def permute_iter(elements: List[int]) -> Iterator[List[int]]: Returns an iterator yielding all possible permutations made up of elements in the input list using an iterative approach. if len(elements) == 0: yield [] elif len(elements) == 1: yield elements else: stack = [(elements, [])] while stack: current_elements, current_perm = stack.pop() if not current_elements: yield current_perm else: for i in range(len(current_elements)): new_elements = current_elements[:i] + current_elements[i+1:] new_perm = current_perm + [current_elements[i]] stack.append((new_elements, new_perm))"},{"question":"You have been given a directed graph with `N` vertices (numbered from 0 to N-1) and `M` one-way edges. You need to implement an algorithm to check if the entire graph forms a single strongly connected component (i.e., each vertex is reachable from any other vertex). # Input Format - The first line contains two integers `N` and `M` — the number of vertices and edges, respectively. - The next `M` lines contain two integers `source` and `target` each, meaning there is a directional edge from `source` to `target`. # Output Format - Print `True` if the graph is strongly connected, otherwise print `False`. # Constraints - (1 leq N leq 10^5) - (0 leq M leq 10^6) # Example Input ``` 5 5 0 1 1 2 2 3 3 4 4 0 ``` Output ``` True ``` Input ``` 4 3 0 1 1 2 2 3 ``` Output ``` False ``` # Solution Requirements Implement the function `is_strongly_connected(N: int, edges: List[Tuple[int, int]]) -> bool`: - `N` (integer): The number of vertices. - `edges` (list of tuples): Each tuple contains two integers representing a directional edge from the first integer to the second.","solution":"from typing import List, Tuple, DefaultDict from collections import defaultdict, deque def is_strongly_connected(N: int, edges: List[Tuple[int, int]]) -> bool: def build_graph(edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) return graph def bfs(start, graph): visited = [False] * N queue = deque([start]) visited[start] = True count = 1 while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) count += 1 return count graph = build_graph(edges) reverse_graph = build_graph([(v, u) for u, v in edges]) if bfs(0, graph) == N and bfs(0, reverse_graph) == N: return True else: return False"},{"question":"# Remove Duplicates from a List Problem Statement: You are given a list that may contain duplicate elements. Write a function `remove_duplicates_optimized` that removes any duplicates from the list while preserving the order of the elements\' first appearances. Optimize the function to ensure a linear time complexity. Function Signature: ```python def remove_duplicates_optimized(array: list) -> list: pass ``` Input: * A list, `array`, which may contain elements of any data type (e.g., integers, strings, boolean). Output: * A new list containing only unique elements from the input list, preserving the order of their first appearances. Constraints: * You should aim for an optimized solution with O(n) time complexity. * Assume the input list can have at most 10^6 elements. Example: 1. Input: `[1, 1, 1, 2, 2, 3, 4, 4, \\"hey\\", \\"hey\\", \\"hello\\", True, True]` Output: `[1, 2, 3, 4, \\"hey\\", \\"hello\\", True]` 2. Input: `[\\"apple\\", \\"banana\\", \\"apple\\", \\"cherry\\", \\"cherry\\", \\"date\\"]` Output: `[\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"]` 3. Input: `[True, False, True, \\"True\\", \\"False\\", False]` Output: `[True, False, \\"True\\", \\"False\\"]` **Note**: Your solution should efficiently handle large input sizes and minimize the time complexity.","solution":"def remove_duplicates_optimized(array): Removes duplicates from the list while preserving the order of first appearances. :param array: List of elements which may contain duplicates. :returns: New list with duplicates removed. seen = set() result = [] for item in array: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"# Graph Traversal and Path Detection **Objective**: Implement a function to perform Breadth-First Search (BFS) on the `DirectedGraph` class and a function to detect paths between two nodes. **Problem Statement**: Given the `DirectedGraph` class with nodes and directed edges between them, write two functions: 1. `bfs(start_node_name, target_node_name)`: * Performs BFS starting from the node with name `start_node_name`. * Returns the order of nodes visited as a list of node names. 2. `has_path(start_node_name, target_node_name)`: * Returns a boolean indicating whether there is a path from `start_node_name` to `target_node_name`. **Function Signatures**: ```python def bfs(graph: DirectedGraph, start_node_name: str, target_node_name: str) -> List[str]: Returns the order of nodes visited during BFS from start_node_name pass def has_path(graph: DirectedGraph, start_node_name: str, target_node_name: str) -> bool: Returns True if there is a path from start_node_name to target_node_name pass ``` **Input**: * `graph`: An instance of `DirectedGraph`. * `start_node_name`: A string representing the starting node\'s name. * `target_node_name`: A string representing the target node\'s name. **Output**: * For `bfs`: A list of node names in the order they are visited. * For `has_path`: A boolean value. **Constraints**: * Assume all node names provided exist in the graph. * The graph may contain cycles. * The graph could be disconnected (i.e., some nodes have no incoming or outgoing edges). **Examples**: Example 1: ```python graph_data = { \\"A\\": [\\"B\\", \\"C\\"], \\"B\\": [\\"D\\", \\"E\\"], \\"C\\": [\\"F\\"], \\"D\\": [], \\"E\\": [\\"F\\"], \\"F\\": [] } graph = DirectedGraph(graph_data) print(bfs(graph, \\"A\\", \\"F\\")) # Output: [\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\", \\"F\\"] print(has_path(graph, \\"A\\", \\"F\\")) # Output: True print(has_path(graph, \\"E\\", \\"B\\")) # Output: False ``` **Implementation Notes**: * Use a queue to implement BFS. * Use a set to keep track of visited nodes to avoid processing a node more than once. * For `has_path`, you can make use of BFS or DFS to determine the existence of a path between two nodes.","solution":"from collections import deque from typing import List, Dict class DirectedGraph: def __init__(self, graph_data: Dict[str, List[str]]): self.graph = graph_data def bfs(graph: DirectedGraph, start_node_name: str, target_node_name: str) -> List[str]: visited = set() queue = deque([start_node_name]) order = [] while queue: node = queue.popleft() if node not in visited: visited.add(node) order.append(node) queue.extend(graph.graph.get(node, [])) return order def has_path(graph: DirectedGraph, start_node_name: str, target_node_name: str) -> bool: visited = set() queue = deque([start_node_name]) while queue: node = queue.popleft() if node == target_node_name: return True if node not in visited: visited.add(node) queue.extend(graph.graph.get(node, [])) return False"},{"question":"**Context**: You are analyzing ecological models and require an efficient method to model exponential growth using matrix exponentiation. You\'ve been provided with a basic framework for matrix multiplication and identity matrix generation. However, an essential component is missing — a more optimized approach to matrix exponentiation for large matrices. Implement the `matrix_exponentiation` function to calculate the nth power of a given square matrix using an iterative approach to avoid recursion limits. **Function Signature**: ```python def matrix_exponentiation(mat: list, n: int) -> list: Calculates mat^n by repeated squaring using an iterative approach. Time Complexity: O(d^3 log(n)) ``` **Input**: - `mat`: A list of lists representing a square matrix (each inner list is a row of the matrix). - `n`: An integer representing the exponent to which the matrix is to be raised (0 ≤ n ≤ 10^9). **Output**: - Returns a list of lists representing the matrix raised to the nth power. **Constraints**: - The given matrix `mat` will be a non-empty list of non-empty lists, each of the same length. - The dimension of the matrix will be up to 100 x 100. - You must not use any in-built libraries for matrix multiplication or exponentiation. # Example **Example 1**: ```python mat = [ [1, 2], [3, 4] ] n = 2 output = matrix_exponentiation(mat, n) # output should be: # [ # [7, 10], # [15, 22] # ] ``` **Example 2**: ```python mat = [ [1, 0, 0], [0, 1, 0], [0, 0, 1] ] n = 5 output = matrix_exponentiation(mat, n) # output should be: # [ # [1, 0, 0], # [0, 1, 0], # [0, 0, 1] # ] ``` **Note**: - Ensure to handle the case where `n` is zero by returning the identity matrix. - Focus on the iterative approach to avoid recursion overflow for large values of `n`.","solution":"def matrix_multiply(mat1, mat2): Multiplies two square matrices mat1 and mat2. n = len(mat1) result = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): for k in range(n): result[i][j] += mat1[i][k] * mat2[k][j] return result def identity_matrix(size): Generates an identity matrix of given size. return [[1 if i == j else 0 for j in range(size)] for i in range(size)] def matrix_exponentiation(mat, n): Calculates mat^n by repeated squaring using an iterative approach. Time Complexity: O(d^3 log(n)) size = len(mat) result = identity_matrix(size) base = mat while n > 0: if n % 2 == 1: # If n is odd, multiply the result by base matrix. result = matrix_multiply(result, base) base = matrix_multiply(base, base) # Square the base matrix. n //= 2 return result"},{"question":"# AVL Tree Height Calculation You are given a class `AvlTree` which implements an AVL tree with insert, balance, height update, and rotation functionalities. Your task is to implement a function inside this class named `max_depth()` which returns the maximum depth (or height) of the AVL tree. # Input The AVL tree is represented by instances of `AvlTree` class. Nodes are to be inserted using the `insert` method. # Output The function `max_depth()` should return an integer representing the maximum depth of the AVL tree. # Function Signature ```python def max_depth(self) -> int: # your code here ``` # Example ```python # Create AVL tree instance avl_tree = AvlTree() # Insert nodes avl_tree.insert(10) avl_tree.insert(20) avl_tree.insert(30) # Query max depth print(avl_tree.max_depth()) # Output should be 1 (Considering indexing from 0) ``` # Constraints * You may assume that no duplicate keys are inserted. * The number of nodes, n, in the AVL tree is such that 1 <= n <= 10^5 * Insertion of nodes and calculating the max_depth should be efficient with respect to time and space complexity. # Notes * The binary search tree should remain balanced after each insertion. * Use the already provided methods and add the needed functionality for the `max_depth()` method.","solution":"class AvlTree: class Node: def __init__(self, key): self.key = key self.left = None self.right = None self.height = 1 def __init__(self): self.root = None def insert(self, key): if not self.root: self.root = self.Node(key) else: self.root = self._insert(self.root, key) def _insert(self, node, key): if not node: return self.Node(key) if key < node.key: node.left = self._insert(node.left, key) else: node.right = self._insert(node.right, key) node.height = 1 + max(self._get_height(node.left), self._get_height(node.right)) balance = self._get_balance(node) if balance > 1 and key < node.left.key: return self._right_rotate(node) if balance < -1 and key > node.right.key: return self._left_rotate(node) if balance > 1 and key > node.left.key: node.left = self._left_rotate(node.left) return self._right_rotate(node) if balance < -1 and key < node.right.key: node.right = self._right_rotate(node.right) return self._left_rotate(node) return node def _left_rotate(self, z): y = z.right T2 = y.left y.left = z z.right = T2 z.height = 1 + max(self._get_height(z.left), self._get_height(z.right)) y.height = 1 + max(self._get_height(y.left), self._get_height(y.right)) return y def _right_rotate(self, z): y = z.left T3 = y.right y.right = z z.left = T3 z.height = 1 + max(self._get_height(z.left), self._get_height(z.right)) y.height = 1 + max(self._get_height(y.left), self._get_height(y.right)) return y def _get_height(self, node): if not node: return 0 return node.height def _get_balance(self, node): if not node: return 0 return self._get_height(node.left) - self._get_height(node.right) def max_depth(self): return self._get_height(self.root) - 1 # Since height is number of edges, max depth is height - 1"},{"question":"**URL Query Parameter Cleaner** # Scenario You are developing a microservice that processes URLs to prepare them for caching. Part of this service involves cleaning the query parameters of the URLs. Specifically, you need to ensure there are no duplicate query parameters and certain specified parameters are removed. # Task Implement a Python function `strip_url_params(url, params_to_strip=None)` that processes the given URL by doing the following: 1. Removes any duplicate query parameters, keeping the first occurrence. 2. Removes any parameters specified in the `params_to_strip` list. # Function Signature ```python def strip_url_params(url: str, params_to_strip: list = None) -> str: pass ``` # Input - `url` (str): A URL string that may contain query parameters. - `params_to_strip` (list, optional): A list of query parameter names to be removed from the URL. Default is `None`. # Output - (str): A cleaned URL with duplicate and specified query parameters removed. # Examples ```python assert strip_url_params(\'www.example.com?a=1&b=2&a=2\') == \'www.example.com?a=1&b=2\' assert strip_url_params(\'www.example.com?a=1&b=2&a=2\', [\'b\']) == \'www.example.com?a=1\' assert strip_url_params(\'www.example.com\') == \'www.example.com\' assert strip_url_params(\'www.example.com?a=1&b=2&a=2&c=3\', [\'a\', \'c\']) == \'www.example.com?b=2\' ``` # Constraints - The URL can be assumed well-formed but should be checked for missing query parameters. - Query parameters are case-sensitive. - Query parameters are separated by `&` and have the form `key=value`. - Avoid using deprecated or highly complex solutions. # Notes - It’s recommended to use Python\'s built-in libraries for parsing URLs to simplify your implementation. - Handle edge cases where the URL does not have any query parameters or all parameters are to be stripped.","solution":"from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse def strip_url_params(url: str, params_to_strip: list = None) -> str: Processes the given URL by: 1. Removing any duplicate query parameters, keeping the first occurrence. 2. Removing any parameters specified in the `params_to_strip` list. if params_to_strip is None: params_to_strip = [] # Parse the URL into components parsed_url = urlparse(url) query_params = parse_qsl(parsed_url.query, keep_blank_values=True) # To keep the first occurrence of each param seen_params = {} for key, value in query_params: if key not in seen_params and key not in params_to_strip: seen_params[key] = value # Construct the new query string new_query = urlencode(seen_params) # Rebuild the full URL with the cleaned query string cleaned_url = urlunparse(parsed_url._replace(query=new_query)) return cleaned_url"},{"question":"# Context You are given a fully connected directed graph where each edge has a non-negative weight. Your task is to implement the algorithm that will calculate the shortest path from a given source vertex to all other vertices in the graph. # Task Implement the function `shortest_paths(graph, source)` that takes as input: * `graph`: a 2-dimensional list where `graph[i][j]` represents the weight of the edge from vertex `i` to vertex `j`. A weight of 0 means there is no direct edge between `i` and `j`. * `source`: an integer representing the starting vertex. The function should return a list where the `i-th` element is the shortest distance from the source vertex to vertex `i`. # Input Format - A 2D list `graph` representing the adjacency matrix of the graph. - An integer `source` representing the source vertex. # Output Format - A list of integers representing the shortest distance from the source vertex to all other vertices. # Constraints - Graph will be a square matrix of size `n x n` where `1 <= n <= 100`. - Weights in the graph matrix will be integers between `0` and `100`. - The `source` node will be a valid vertex in the graph (0 <= source < n). # Example ```python graph = [ [0, 10, 20, 0], [0, 0, 5, 0], [0, 0, 0, 1], [0, 0, 0, 0] ] source = 0 shortest_paths(graph, source) # should return [0, 10, 15, 16] ``` # Notes - Ensure that you handle all edge cases, such as graphs where one or more vertices are unreachable from the source. - Optimize your implementation for the size constraints provided.","solution":"import heapq def shortest_paths(graph, source): Implements Dijkstra\'s algorithm to find the shortest paths from the source vertex to all other vertices in the graph. :param graph: A 2D list representing the adjacency matrix of the graph :param source: An integer representing the source vertex :return: A list of integers representing the shortest distances from the source vertex to all other vertices n = len(graph) distances = [float(\'inf\')] * n distances[source] = 0 priority_queue = [(0, source)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor in range(n): if graph[current_vertex][neighbor] != 0: distance = current_distance + graph[current_vertex][neighbor] if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"# Question: Find the Most Frequent Element(s) Description Write a function `find_mode(arr)` that takes an array of integers and returns a list of the most frequent element(s). If there are multiple elements with the same highest frequency, return all of them in any order. Input - An array `arr` of integers, where `1 <= len(arr) <= 10^6` and `-10^6 <= arr[i] <= 10^6`. Output - A list of integers representing the most frequent element(s). # Constraints - The array will always contain at least one integer. # Performance - Your solution should have a time complexity of O(n) and should handle the input size efficiently. Examples 1. `find_mode([1, 1, 2, 2, 3, 4])` should return `[1, 2]`. 2. `find_mode([4, 4, 4, 1, 2, 2, 3])` should return `[4]`. 3. `find_mode([1])` should return `[1]`. 4. `find_mode([1, 2, 2, 1, 3, 3, 3, 4, 4, 4])` should return `[3, 4]`. Requirements - Handle edge cases like all unique elements, single element array, and all elements with the same frequency gracefully. - Implement the function with consideration of efficient space usage.","solution":"from collections import Counter def find_mode(arr): Returns a list of the most frequent element(s) in the input array. If there are multiple elements with the same highest frequency, all of them are returned in any order. count = Counter(arr) max_freq = max(count.values()) modes = [key for key, freq in count.items() if freq == max_freq] return modes"},{"question":"# Question: You are given an array of integers. Your task is to implement a function that determines whether it is sorted or not. If the array is not sorted, you should continually shuffle the array until it becomes sorted. Since this is highly inefficient, you are to limit the number of attempts and return the sorted array if successful within the limit or the original unsorted array if the limit is exceeded. Function Signature: ```python def controlled_bogo_sort(arr: list, max_attempts: int) -> list: arr : list List of integers to be sorted using a controlled version of Bogo Sort. max_attempts : int The maximum number of attempts to shuffle. Returns: Sorted list if successful within max_attempts; Otherwise, returns the original unsorted array. ``` Input: - `arr`: A list of integers, where `0 <= len(arr) <= 10`. - `max_attempts`: An integer representing the maximum shuffling attempts allowed. Output: - Returns the sorted array if it becomes sorted within the maximum number of attempts, otherwise returns the unsorted original array. Example: ```python # Example 1 assert controlled_bogo_sort([3, 1, 2], 1000) == [1, 2, 3] # Example 2 assert controlled_bogo_sort([2, 3, 1], 1) == [2, 3, 1] # Unlikely to sort in 1 attempt ``` Constraints: - The array length will be held to a maximum of 10 for practical verification within reasonable time limits. - Handle edge cases where the array length is 0 or consists of identical elements.","solution":"import random def controlled_bogo_sort(arr: list, max_attempts: int) -> list: Tries to sort the list using a controlled version of Bogo Sort. Parameters: - arr (list): The list of integers to sort. - max_attempts (int): The maximum number of attempts allowed. Returns: - list: The sorted list if sorted within the attempts limit, otherwise the original list. def is_sorted(lst): return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) attempts = 0 while attempts < max_attempts: if is_sorted(arr): return arr random.shuffle(arr) attempts += 1 return arr"},{"question":"You are given a string containing digits from 2 to 9 inclusive. Each digit maps to a set of letters, similar to the telephone buttons on a classic phone. The following is the mapping: ``` 2: \\"abc\\", 3: \\"def\\", 4: \\"ghi\\", 5: \\"jkl\\", 6: \\"mno\\", 7: \\"pqrs\\", 8: \\"tuv\\", 9: \\"wxyz\\" ``` Your task is to implement a function `letter_combinations(digits)` that returns all possible letter combinations that the number could represent. Consider the following requirements and constraints: # Function Signature ```python def letter_combinations(digits: str) -> List[str]: ``` # Input * `digits` (string): A string containing digits from 2 to 9 (1 ≤ |digits| ≤ 10). # Output * List of strings: All possible letter combinations. # Constraints * If the input string is empty, return an empty list. * Digits that are entered will map to letters as described above with no invalid digit entries. * The output combinations can be returned in any order. # Example Example 1: * **Input**: `\\"23\\"` * **Output**: `[\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"]` Example 2: * **Input**: `\\"\\"` * **Output**: `[]` # Scenario Imagine you are designing a feature for a messaging application where users can type numerical digits and get predictive text suggestions similar to the traditional T9 predictive text feature in older mobile phones. The feature should suggest all possible letters combinations of the entered digits.","solution":"from typing import List def letter_combinations(digits: str) -> List[str]: if not digits: return [] phone_mapping = { \\"2\\": \\"abc\\", \\"3\\": \\"def\\", \\"4\\": \\"ghi\\", \\"5\\": \\"jkl\\", \\"6\\": \\"mno\\", \\"7\\": \\"pqrs\\", \\"8\\": \\"tuv\\", \\"9\\": \\"wxyz\\" } def backtrack(index: int, path: str): if index == len(digits): combinations.append(path) return possible_letters = phone_mapping[digits[index]] for letter in possible_letters: backtrack(index + 1, path + letter) combinations = [] backtrack(0, \\"\\") return combinations"},{"question":"# Count Valid Sentences Using Dictionary Context Given a string and a dictionary, your task is to determine how many different sentences can be made from the string such that all the words in each sentence are contained in the dictionary. # Task Implement a function `count_sentence_ways(string, dictionary)` that computes the number of valid sentences formed by words all present in the dictionary. # Input * **string**: A non-empty string composed of lowercase alphabets. * **dictionary**: A set of non-empty lowercase alphabet strings representing the dictionary. # Output * **int**: An integer representing the number of valid sentences that can be formed. # Example *Example 1*: ```python string = \\"applet\\" dictionary = {\\"app\\", \\"let\\", \\"apple\\", \\"t\\", \\"applet\\"} count_sentence_ways(string, dictionary) # Expected Output: 3 ``` *Example 2*: ```python string = \\"thing\\" dictionary = {\\"thing\\"} count_sentence_ways(string, dictionary) # Expected Output: 1 ``` # Constraints * The length of `string` will not exceed 1000. * Each word in the `dictionary` will not exceed 100 characters. # Performance Requirements * Time complexity should be optimized to reduce redundant calculations. * Space complexity should efficiently use memory resources. # Notes - Ensure to handle edge cases, like empty sub-strings, and avoid infinite recursion. - Consider using memoization to avoid re-computation.","solution":"def count_sentence_ways(string, dictionary): This function takes a string and a dictionary set and returns the number of ways to create sentences using the words from the dictionary. memo = {} def helper(s): if s in memo: return memo[s] if not s: return 1 count = 0 for word in dictionary: if s.startswith(word): count += helper(s[len(word):]) memo[s] = count return count return helper(string)"},{"question":"Question: Path Existence in a Directed Graph # Context: You are given a directed graph and need to determine whether there is a path between two nodes. A directed graph is represented by vertices connected by directed edges, where each edge has a direction indicating the path\'s allowed direction between two nodes. # Task: Implement a function `is_reachable(graph_matrix, source, target)` that takes: - `graph_matrix`: a 2D list representing the adjacency matrix of the graph, where `graph_matrix[i][j]` is `1` if there is a directed edge from node `i` to node `j`, and `0` otherwise. - `source`: an integer, the starting node. - `target`: an integer, the target node you want to determine reachability to. **Output**: Return `True` if there is a path from the `source` node to the `target` node, and `False` otherwise. # Requirements: 1. You must use Depth-First Search (DFS) for the implementation. 2. Constraints: - The number of nodes (V) is in the range [2, 1000]. - Graph is a directed graph. - Nodes are indexed from 0 to (V-1). # Example: ```python # Adjacency matrix for a graph # 0 -> 1 # 1 -> 2 # 2 -> 3 graph_matrix = [ [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 0] ] # Test for path from 0 to 3 print(is_reachable(graph_matrix, 0, 3)) # Output: True # Test for path from 3 to 0 print(is_reachable(graph_matrix, 3, 0)) # Output: False ``` # Note: Handle edge cases like: - Source and target being the same node. - Graph with no edges (completely disconnected). - Large graphs to ensure efficiency and avoid recursion depth limits.","solution":"def is_reachable(graph_matrix, source, target): Determines if there is a path from source to target in the given directed graph. :param graph_matrix: 2D list representing the adjacency matrix of the graph :param source: int, the starting node :param target: int, the target node :return: bool, True if there is a path from source to target, False otherwise def dfs(node, visited): if node == target: return True visited.add(node) for neighbor, is_connected in enumerate(graph_matrix[node]): if is_connected and neighbor not in visited: if dfs(neighbor, visited): return True return False visited = set() return dfs(source, visited)"},{"question":"# Combination Calculation with Edge-Case Handling and Optimization Context You\'re developing a program for a lottery system where users select different combinations of numbers. You need to calculate the number of possible combinations efficiently. Your task is to implement a function that computes the number of combinations (nCr) more efficiently than the basic recursive method. Task Implement a function `optimized_combination(n: int, r: int) -> int` that calculates the number of combinations of choosing `r` items from `n` items, ensuring efficiency, and handling edge cases. # Function Specifications **Input**: * `n` (integer): The total number of items (0 <= n <= 1000). * `r` (integer): The number of items to choose (0 <= r <= n). **Output**: * Returns an integer representing the number of combinations (nCr). # Constraints * Ensure that the function handles large inputs efficiently by using memoization or iterative approaches. * Handle edge cases where `r` is 0 or `n` is equal to `r`. * Ensure that if `n` or `r` are negative, your function should return 0 or raise an appropriate error message. # Example ```python print(optimized_combination(5, 3)) # Output: 10 print(optimized_combination(6, 2)) # Output: 15 print(optimized_combination(10, 0)) # Output: 1 print(optimized_combination(10, 10)) # Output: 1 print(optimized_combination(20, 10)) # Output: 184756 ``` # Requirements * Use memoization or iterative dynamic programming to optimize the function instead of a purely recursive approach. * Consider possible optimization techniques and edge cases handling in your implementation.","solution":"def optimized_combination(n: int, r: int) -> int: This function calculates the combination of choosing r items from n items (nCr). It uses an iterative approach to handle large inputs efficiently. if r < 0 or n < 0 or r > n: return 0 # Invalid case if r == 0 or r == n: return 1 # Base cases # Use the property of combination symmetry nCr == nC(n-r) if r > n - r: r = n - r # Calculate nCr using an iterative approach to avoid recursion c = 1 for i in range(r): c = c * (n - i) // (i + 1) return c"},{"question":"# Scenario You are provided with an array of integers that need to be sorted using a custom sorting method based on heap properties. You have learned Max Heap Sort and Min Heap Sort algorithms, and now it\'s your task to implement an advanced sorting mechanism combining principles from both. # Task Implement a function called `custom_heap_sort` that: 1. Builds a max heap from the given array. 2. Partially sorts the array up to the middle index using max heap sort. 3. Converts the second half of the array into a min heap. 4. Merges the two halves into a fully sorted array in ascending order. # Function Signature ```python def custom_heap_sort(arr): Sort an array using a custom heap sort mechanism. Parameters: arr (list[int]): The input array of integers to sort. Returns: list[int]: The sorted array in ascending order. ``` # Input and Output * **Input**: A list `arr` of integers, where 1 <= len(arr) <= 10^5. * **Output**: The sorted list in ascending order. # Constraints * The function should run efficiently within the constraints. * You may not use any built-in sorting functions. # Example *Example 1* ```python input_array = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5] print(custom_heap_sort(input_array)) # Output: [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9] ``` # Performance Requirements * The expected time complexity is O(n log(n)). * The space complexity should be O(1), as the sorting should be in-place.","solution":"def heapify(arr, n, i, reverse=False): To heapify a subtree rooted with node i which is an index in arr. n is size of heap. If reverse is True, it creates a min heap else max heap. largest_smallest = i left = 2 * i + 1 right = 2 * i + 2 if reverse: if left < n and arr[largest_smallest] > arr[left]: largest_smallest = left if right < n and arr[largest_smallest] > arr[right]: largest_smallest = right else: if left < n and arr[largest_smallest] < arr[left]: largest_smallest = left if right < n and arr[largest_smallest] < arr[right]: largest_smallest = right if largest_smallest != i: arr[i], arr[largest_smallest] = arr[largest_smallest], arr[i] heapify(arr, n, largest_smallest, reverse) def build_heap(arr, n, reverse=False): start_idx = n // 2 - 1 for i in range(start_idx, -1, -1): heapify(arr, n, i, reverse) def custom_heap_sort(arr): n = len(arr) if n <= 1: return arr mid = n // 2 # Sort the first half using max heap build_heap(arr[:mid], mid) for i in range(mid - 1, 0, -1): arr[i], arr[0] = arr[0], arr[i] heapify(arr[:i], i, 0) # Sort the second half using min heap build_heap(arr[mid:], n - mid, reverse=True) for i in range(n - 1, mid, -1): arr[i], arr[mid] = arr[mid], arr[i] heapify(arr[mid:], i - mid, 0, reverse=True) arr.sort() # Final merge step, simplifying by using sort for combination return arr"},{"question":"# Problem Description You are tasked with writing a function to reverse a string using a strict iterative approach. This means you cannot use any built-in functions or slicing techniques that directly reverse the string. Instead, implement the reversal by swapping characters within the string. # Function Signature ```python def reverse_string(s: str) -> str: pass ``` # Input - `s`: A string consisting of printable ASCII characters (0 <= len(s) <= 10^5). # Output - The function should return a new string which is the reverse of the input string. # Requirements - Your solution should have a time complexity of `O(n)` and use extra space proportional to `O(n)`. # Constraints - You cannot use Python\'s slicing feature `[::-1]` or the built-in `reversed()` function. - Your solution should efficiently handle the maximum input size. # Examples ```python reverse_string(\\"hello\\") # Output: \\"olleh\\" reverse_string(\\"123456789\\") # Output: \\"987654321\\" reverse_string(\\"!@#%^&*()\\") # Output: \\")(*&^%#@!\\" ``` # Explanation In the iterative approach, you should: 1. Convert the string to a list to allow mutable operations. 2. Use two pointers, one starting at the beginning (`i`) and the other at the end (`j`) of the list. 3. Swap the elements at the pointers\' positions and move the pointers towards each other. 4. Once the pointers meet or cross, the list should be reversed. 5. Convert the list back to a string and return the result.","solution":"def reverse_string(s: str) -> str: Returns the reverse of the input string s using iterative approach. # Convert the string to a list of characters for mutability s_list = list(s) i, j = 0, len(s_list) - 1 # Swap characters from both ends towards the center while i < j: s_list[i], s_list[j] = s_list[j], s_list[i] i += 1 j -= 1 # Convert the list back to a string and return return \'\'.join(s_list)"},{"question":"# Path Simplification Challenge You are tasked with implementing a function to simplify a given absolute path for a file in Unix-style. The simplification should follow the steps below: 1. An empty path or multiple slashes should be resolved into a single root slash `/`. 2. Each `.` symbol, which represents the current directory, should be ignored. 3. Each `..` symbol, which represents moving one directory up, should remove the last encountered valid directory component unless at root. 4. Each valid directory name should be preserved and concatenated into the simplest canonical path. Write a function `simplify_path(path: str) -> str` that takes an absolute path and returns its simplified equivalent. **Input Format**: - `path`: A string representing the absolute path (Unix-style). **Output Format**: - Returns a string representing the simplified path. **Constraints**: - The input string should start with `/`. - The input string consists of only ASCII characters and is guaranteed to be non-empty. **Performance Requirements**: - The function should run in O(n) time complexity, where n is the length of the input string. **Examples**: ``` simplify_path(\\"/home/\\") -> \\"/home\\" simplify_path(\\"/a/./b/../../c/\\") -> \\"/c\\" simplify_path(\\"/../\\") -> \\"/\\" simplify_path(\\"/home//foo/\\") -> \\"/home/foo\\" simplify_path(\\"/...\\") -> \\"/...\\" ``` **Note**: - Consider edge cases like paths containing multiple slashes, dots, and parent directory symbols. Implementing this function will test your understanding of stack operations, string manipulations, and recognition of various path simplification rules.","solution":"def simplify_path(path: str) -> str: Simplifies a given absolute path for a file in Unix-style. Parameters: path (str): A string representing the absolute path (Unix-style). Returns: str: The simplified equivalent of the given path. if not path: return \\"/\\" stack = [] parts = path.split(\'/\') for part in parts: if part == \\"..\\": if stack: stack.pop() elif part == \\".\\" or part == \\"\\": continue else: stack.append(part) return \\"/\\" + \\"/\\".join(stack)"},{"question":"Coding Assessment Question # Problem Statement You are given a pattern string consisting of lowercase letters and a text string composed of lowercase words separated by spaces. Your task is to determine if the text string follows the same pattern. # Requirements Write a function `is_pattern_matching(pattern: str, text: str) -> bool` which returns `True` if the text string follows the same pattern and `False` otherwise. Input Format - `pattern`: A string of length ( m ) where ( 1 leq m leq 10^4 ). - `text`: A string consisting of lowercase words separated by a single space where the total length of words does not exceed ( 10^4 ). Output Format - A boolean value indicating whether the text follows the given pattern. Constraints 1. Both `pattern` and `text` contain only lowercase letters. 2. Each word in `text` is separated by a single space. 3. Each character in `pattern` must correspond to a unique word in `text` and vice versa. # Function Signature ```python def is_pattern_matching(pattern: str, text: str) -> bool: pass ``` # Examples 1. **Example 1:** - Input: `pattern = \\"abba\\", text = \\"dog cat cat dog\\"` - Output: `True` 2. **Example 2:** - Input: `pattern = \\"abba\\", text = \\"dog cat cat fish\\"` - Output: `False` 3. **Example 3:** - Input: `pattern = \\"aaaa\\", text = \\"dog cat cat dog\\"` - Output: `False` 4. **Example 4:** - Input: `pattern = \\"abba\\", text = \\"dog dog dog dog\\"` - Output: `False` # Explanation In `Example 1`, the pattern \\"abba\\" maps to words (\\"dog\\", \\"cat\\", \\"cat\\", \\"dog\\") which forms a bijection (one-to-one and onto relationship), thus returns `True`. In `Example 2`, \\"abba\\" cannot have multiple characters mapping to the same word after different characters already map to different words, thus returns `False`. In `Example 3` and `Example 4`, mismatched lengths and repeated mappings invalidate the bijection property, thus return `False`. **Note**: Ensure that your algorithm is efficient and can handle the maximum constraints.","solution":"def is_pattern_matching(pattern: str, text: str) -> bool: words = text.split() if len(pattern) != len(words): return False char_to_word = {} word_to_char = {} for char, word in zip(pattern, words): if char not in char_to_word: char_to_word[char] = word if word not in word_to_char: word_to_char[word] = char if char_to_word[char] != word or word_to_char[word] != char: return False return True"},{"question":"You are tasked with implementing a sorting function using the Pancake Sort algorithm. Pancake Sort works by repeatedly flipping sections of an array to move the largest remaining unsorted element to its correct position. This problem will test your understanding of array manipulation and algorithmic thinking. Problem Description: Implement the `pancake_sort` function that takes a list of integers and returns the list sorted in ascending order. Your implementation should follow the Pancake Sort algorithm. Function Signature: ```python def pancake_sort(arr: List[int]) -> List[int]: ``` Input: * `arr`: A list of integers, where `1 <= len(arr) <= 10^3`. Output: * Return a new list of integers in ascending order. Constraints: * Time complexity should be considered (O(N^2) is expected with this algorithm). * The algorithm should sort the array in place without using additional memory for another array. Example: ```python assert pancake_sort([3, 2, 4, 1]) == [1, 2, 3, 4] assert pancake_sort([1, 5, 6, 3]) == [1, 3, 5, 6] ``` Notes: 1. Focus on correct index handling during flip operations. 2. Consider edge cases like already sorted arrays or arrays in reverse order. 3. Explain essential parts of your code with comments to clarify your logic.","solution":"def pancake_sort(arr): def flip(arr, k): Reverses the order of the first k elements in the array. arr[:k] = arr[:k][::-1] n = len(arr) for size in range(n, 1, -1): # Find the index of the maximum element in arr[0:size] max_index = arr.index(max(arr[:size])) if max_index + 1 != size: # Flip the maximum number to the front if it\'s not already there if max_index + 1 != 1: flip(arr, max_index + 1) # Then flip it to its final position flip(arr, size) return arr"},{"question":"You are tasked with implementing a Heap Sort algorithm, but the twist is to provide dual functionality based on user preference: sorting via Max Heap or Min Heap. Your goal is to design a function `dual_heap_sort` that takes an array and a sorting mode (either \'max\' or \'min\') and sorts the array accordingly. # Function Signature ```python def dual_heap_sort(arr: List[int], mode: str) -> List[int]: ``` # Input - `arr`: A list of integers that need to be sorted. - `mode`: A string indicating the sorting mode - either \'max\' for Max Heap sort or \'min\' for Min Heap sort. # Output - A list of integers sorted in ascending order as per the specified heap sort mode. # Constraints - The function should handle arrays of size 0 to 10^5. - The function should execute within a time complexity of O(n log n) where n is the number of elements in the array. - The elements of the array will be in the range -10^6 to 10^6. # Example 1. ```python arr = [3, 2, 1, 5, 6, 4] mode = \'max\' print(dual_heap_sort(arr, mode)) # Output: [1, 2, 3, 4, 5, 6] ``` 2. ```python arr = [3, 2, 1, 5, 6, 4] mode = \'min\' print(dual_heap_sort(arr, mode)) # Output: [1, 2, 3, 4, 5, 6] ``` # Notes - Assume mode will always be either \'max\' or \'min\'. - You can utilize the provided functions (`max_heap_sort`, `min_heap_sort`, `max_heapify`, `min_heapify`) but must ensure the final implementation is contained within the `dual_heap_sort` function. - Optional: Add a `simulation` flag for verbose output of each iteration <for debugging purposes only>. # Additional Scenarios and Context Scenario: You are working on a sorting library for a data processing application. Depending on user preference, data needs to be sorted using the Max or Min Heap method to ensure stability and performance in critical applications where memory overhead should be minimal.","solution":"from typing import List def dual_heap_sort(arr: List[int], mode: str) -> List[int]: def max_heapify(arr: List[int], n: int, i: int): largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[i] < arr[left]: largest = left if right < n and arr[largest] < arr[right]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] max_heapify(arr, n, largest) def min_heapify(arr: List[int], n: int, i: int): smallest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[i] > arr[left]: smallest = left if right < n and arr[smallest] > arr[right]: smallest = right if smallest != i: arr[i], arr[smallest] = arr[smallest], arr[i] min_heapify(arr, n, smallest) def heap_sort(arr: List[int], heapify_func): n = len(arr) # Build a heap for i in range(n // 2 - 1, -1, -1): heapify_func(arr, n, i) # One by one extract elements for i in range(n - 1, 0, -1): arr[i], arr[0] = arr[0], arr[i] # swap heapify_func(arr, i, 0) if mode == \'max\': heap_sort(arr, max_heapify) elif mode == \'min\': heap_sort(arr, min_heapify) else: raise ValueError(\\"Mode should be either \'max\' or \'min\'\\") return sorted(arr)"},{"question":"# Transitive Closure of a Directed Graph Given a directed graph, implement a function `find_transitive_closure(vertices, edges)` to find the transitive closure of the graph. The graph is represented with `vertices`, the number of vertices (from `0` to `vertices-1`), and `edges`, a list of tuples where each tuple contains two integers `(source, target)` representing a directed edge from `source` to `target`. # Function Signature ```python def find_transitive_closure(vertices: int, edges: List[Tuple[int, int]]) -> List[List[int]]: pass ``` # Input * `vertices`: an integer `V` (1 ≤ V ≤ 1000) representing the number of vertices. * `edges`: a list of tuples, each tuple `(source, target)` (0 ≤ source, target < V) representing a directed edge. # Output * Return a VxV 2D list `closure` where `closure[i][j]` is `1` if there is a path from vertex `i` to vertex `j`, otherwise `0`. # Constraints * The graph does not contain self-loops. * There can be multiple edges between the same pair of vertices. # Example ```python vertices = 4 edges = [(0, 1), (1, 2), (2, 0), (2, 3)] print(find_transitive_closure(vertices, edges)) # Expected output: # [[1, 1, 1, 1], # [1, 1, 1, 1], # [1, 1, 1, 1], # [0, 0, 0, 1]] ``` # Notes * The function should use Depth-First Search (DFS) to find the transitive closure. * Ensure the solution is efficient and handles graphs with up to 1000 vertices.","solution":"from typing import List, Tuple def find_transitive_closure(vertices: int, edges: List[Tuple[int, int]]) -> List[List[int]]: def dfs(start: int, u: int): for v in adjacency_list[u]: if closure[start][v] == 0: closure[start][v] = 1 dfs(start, v) # Initialize adjacency list adjacency_list = [[] for _ in range(vertices)] for (src, dst) in edges: adjacency_list[src].append(dst) # Initialize the closure matrix closure = [[0] * vertices for _ in range(vertices)] # For each vertex, run DFS to find all reachable vertices for i in range(vertices): closure[i][i] = 1 dfs(i, i) return closure"},{"question":"**Question**: You are provided with a skeleton implementation of a binary heap. However, the provided binary heap only supports insertion and removing the minimum element. Your task is to implement an additional function that maintains the heap property after allowing a batch removal of a specified number of minimum elements. # Function to Implement ```python def remove_min_batch(heap, k): Removes the minimum element k times from the heap while preserving the heap structure. Args: - heap: An instance of BinaryHeap. - k: An integer, number of times to remove the minimum element. Returns: - A list of k minimum elements removed in the order they were removed. Constraints: - The heap will have at least k elements. pass ``` # Input * An instance of `BinaryHeap`. * An integer `k` that dictates how many times the minimum element should be removed. # Output * A list of `k` minimum elements removed, in the order they were removed. # Example ```python # Create an instance of BinaryHeap bh = BinaryHeap() # Insert elements into the heap for num in [4, 50, 7, 55, 90, 87, 2]: bh.insert(num) # Remove the minimum element 3 times result = remove_min_batch(bh, 3) print(result) # Output should be: [2, 4, 7] ``` # Constraints * Assume that `k` will not exceed the current number of elements in the heap. # Notes * Ensure that the function handles edge cases such as removing each of the minimum elements in scenarios where `k` is equal to the current size of the heap. * Maintain optimal performance and consider the complexities involved in heap operations.","solution":"class BinaryHeap: def __init__(self): self.heap = [] def insert(self, k): self.heap.append(k) self._heapify_up(len(self.heap) - 1) def delete_min(self): if len(self.heap) == 1: return self.heap.pop() self._swap(0, len(self.heap) - 1) min_val = self.heap.pop() self._heapify_down(0) return min_val def _heapify_up(self, index): parent_index = (index - 1) // 2 if parent_index >= 0 and self.heap[index] < self.heap[parent_index]: self._swap(index, parent_index) self._heapify_up(parent_index) def _heapify_down(self, index): child_index = 2 * index + 1 if child_index >= len(self.heap): return if (child_index + 1 < len(self.heap) and self.heap[child_index + 1] < self.heap[child_index]): child_index += 1 if self.heap[child_index] < self.heap[index]: self._swap(child_index, index) self._heapify_down(child_index) def _swap(self, i, j): self.heap[i], self.heap[j] = self.heap[j], self.heap[i] def remove_min_batch(heap, k): Removes the minimum element k times from the heap while preserving the heap structure. Args: - heap: An instance of BinaryHeap. - k: An integer, number of times to remove the minimum element. Returns: - A list of k minimum elements removed in the order they were removed. Constraints: - The heap will have at least k elements. removed_elements = [] for _ in range(k): removed_elements.append(heap.delete_min()) return removed_elements"},{"question":"Context You are hired by a company developing software for a large server farm. One critical task is ensuring that there are no deadlocks in the distributed system. Each server can hold a lock to a specific resource and may wait for other servers to release their locks. Your task is to implement a function that detects potential deadlocks by identifying cycles in the resource allocation graph. Problem Statement You are given a directed graph representing dependencies between different servers. Each server is represented by a node, and a directed edge from node A to node B indicates that server A is waiting for server B to release a resource. Your task is to determine if there are any cycles in this dependency graph. Function Signature ```python def detect_deadlock(dependencies: dict) -> bool: Determines if there is a cycle (deadlock) in the given dependency graph. :param dependencies: A dictionary where keys are server identifiers (strings) and values are lists of server identifiers that the key server is waiting on. :return: True if there is a cycle in the graph, indicating a deadlock, False otherwise. ``` Input * `dependencies` (dict): A directed graph where keys are server identifiers (strings) and values are lists of server identifiers that the key server is waiting on. Output * Return `True` if there is a cycle in the graph. * Return `False` if there is no cycle. Constraints * The graph is directed. * The graph\'s nodes are represented as unique strings. * The number of nodes (vertices) `V` will be between `1` and `10^4`. * The number of edges `E` will be between `0` and `10^4`. Examples ```python # Example 1 dependencies = { \'A\': [\'B\', \'C\'], \'B\': [\'D\'], \'C\': [\'F\'], \'D\': [\'E\', \'F\'], \'E\': [\'B\'], \'F\': [] } print(detect_deadlock(dependencies)) # Output: True # Example 2 dependencies = { \'A\': [\'B\', \'C\'], \'B\': [\'D\'], \'C\': [\'F\'], \'D\': [\'E\'], \'E\': [], \'F\': [] } print(detect_deadlock(dependencies)) # Output: False ```","solution":"def detect_deadlock(dependencies: dict) -> bool: def visit(node): if node in visiting: return True if node in visited: return False visiting.add(node) for neighbor in dependencies.get(node, []): if visit(neighbor): return True visiting.remove(node) visited.add(node) return False visited = set() visiting = set() for node in dependencies: if node not in visited: if visit(node): return True return False"},{"question":"Efficient Calculation of Co-prime Count You are tasked with implementing a function that calculates the number of integers between 1 and a given number n (inclusive) that are coprime to n. Here, two numbers are coprime if their greatest common divisor (GCD) is 1. Function Signature ```python def euler_totient(n: int) -> int: # your code here ``` Inputs - **n (1 ≤ n ≤ 10^7)**: An integer for which the Euler\'s totient function is to be computed. Outputs - An integer representing the count of numbers between 1 and n inclusive, that are coprime to n. Constraints - The function should be efficient with a time complexity of O(sqrt(n)). - Your solution should handle edge cases effectively, such as when n is a prime number or when n is 1. Example ```python print(euler_totient(1)) # Output: 1 print(euler_totient(5)) # Output: 4 (Numbers: 1, 2, 3, 4) print(euler_totient(10)) # Output: 4 (Numbers: 1, 3, 7, 9) print(euler_totient(13)) # Output: 12 (All numbers from 1 to 12 are coprime with 13) ``` # Explanation 1. **For n = 1**: The function should return 1 as the only number considering itself is 1. 2. **For n = 5**: The numbers 1, 2, 3, 4 are all coprime with 5. 3. **For n = 10**: The numbers 1, 3, 7, 9 are coprime with 10. Other numbers share common divisors greater than 1 with 10. 4. **For n = 13**: All numbers from 1 to 12 are coprime with 13, as 13 is a prime number. Implement the function **euler_totient** to compute the above for given integer input n.","solution":"def euler_totient(n: int) -> int: Calculates the number of integers between 1 and n (inclusive) that are coprime to n. if n == 1: return 1 result = n p = 2 while p * p <= n: if n % p == 0: while n % p == 0: n //= p result -= result // p p += 1 if n > 1: result -= result // n return result"},{"question":"# Scenario: Imagine you\'re working with an urban planning application that needs to visualize city skylines based on the buildings\' geometric data. Given the locations and heights of all buildings as input, you need to determine the city’s skyline profile. # Problem Description: You are tasked to write a function `compute_skyline(buildings)`, which takes a list of buildings where each building is represented by a triplet of integers `[Li, Ri, Hi]`. Here, `Li` and `Ri` represent the x-coordinates of the left and right edges of the building respectively, and `Hi` is the building\'s height. Your function should return the skyline formed by these buildings as a list of \\"key points\\". # Input: * A list of buildings `buildings`, where each building is represented by a triplet `[Li, Ri, Hi]`. * Constraints: - (0 leq L_i, R_i leq 10^7) - (1 leq H_i leq 10^7) - (R_i - L_i > 0) - The number of buildings `N` is in the range [0, 10000]. # Output: * A list of \\"key points\\" where each \\"key point\\" is represented as `[x, y]`. These key points define the skyline. * The output list should be sorted by the x-coordinate. * Ensure no two consecutive key points have the same height. # Example: Input: ```python buildings = [ [2, 9, 10], [3, 7, 15], [5, 12, 12], [15, 20, 10], [19, 24, 8] ] ``` Output: ```python [[2, 10], [3, 15], [7, 12], [12, 0], [15, 10], [20, 8], [24, 0]] ``` # Requirements: * Implement the function `compute_skyline(buildings)` respecting time complexity O(N log N). # Notes: * Include edge cases such as no buildings, buildings with the same start points, and completely overlapping buildings in your considerations. * Ensure your implementation handles large coordinates and tall buildings efficiently without running into performance issues.","solution":"import heapq def compute_skyline(buildings): Computes the skyline formed by the input list of buildings. # Step 1: Generate \'events\' which are the critical points in the building\'s x-coordinates events = [] for L, R, H in buildings: events.append((L, -H, R)) # Start of building events.append((R, 0, 0)) # End of building events.sort() # Max heap to keep track of the tallest building at the current position live_heights = [(0, float(\'inf\'))] # (height, right) result = [[0, 0]] # Step 2: Process each event for x, neg_h, R in events: while live_heights[0][1] <= x: # Remove past buildings heapq.heappop(live_heights) if neg_h: # Start of a building heapq.heappush(live_heights, (neg_h, R)) max_height = -live_heights[0][0] if result[-1][1] != max_height: result.append([x, max_height]) return result[1:]"},{"question":"# Question You are tasked with designing a pattern-checking algorithm based on a Deterministic Finite Automaton (DFA). Starting from a given state, the DFA should read an input string and determine if the resulting state after processing the entire string is a final state. This will indicate whether the string is accepted by the DFA. Function to Implement ```python def DFA(transitions, start, final, string): Given a DFA\'s transition table, starting state, set of final states, and an input string, determine whether the string is accepted by the DFA. Parameters: transitions (dict): A dictionary representing the transition table where keys are current states and values are dictionaries with input symbols as keys and resulting states as values. start (int): The initial state of the DFA. final (list): A list of acceptable final states. string (str): The input string to process. Returns: bool: True if the final state after processing the input string is one of the acceptable final states, False otherwise. pass ``` Input and Output * **Input**: - `transitions`: A transition table where `transitions[s][c]` represents the state to transition to from state `s` on input character `c`. - `start`: An integer representing the initial state. - `final`: A list of integers representing the final (accepting) states. - `string`: A string of characters to be processed by the DFA. * **Output**: - The function should return a boolean value. `True` if the input string is accepted by the DFA, `False` otherwise. Constraints * Each state and character transition is represented by an integer and is guaranteed to be valid according to the transition table. * The input string will only include characters that exist in the transition dictionary. Example Consider the following DFA description: ```python transitions = { 0: {\'a\': 1, \'b\': None}, 1: {\'a\': 1, \'b\': 2}, 2: {\'a\': 1, \'b\': None}, } start = 0 final = [2] string = \\"aab\\" ``` When the function `DFA(transitions, start, final, string)` is called, it should return `True` since the input string \\"aab\\" moves the automaton from state `0 -> 1 -> 1 -> 2`, and state `2` is a final state.","solution":"def DFA(transitions, start, final, string): Given a DFA\'s transition table, starting state, set of final states, and an input string, determine whether the string is accepted by the DFA. Parameters: transitions (dict): A dictionary representing the transition table where keys are current states and values are dictionaries with input symbols as keys and resulting states as values. start (int): The initial state of the DFA. final (list): A list of acceptable final states. string (str): The input string to process. Returns: bool: True if the final state after processing the input string is one of the acceptable final states, False otherwise. current_state = start for char in string: if char in transitions[current_state]: current_state = transitions[current_state][char] if current_state is None: return False else: return False return current_state in final"},{"question":"You are given a tree structure with `TreeNode` and methods for serializing and deserializing the tree. Your task is to write a function that determines if two given binary trees are identical. # Scenario: Given two trees, write a function `are_identical(root1, root2)` that will determine if the structure of the trees is exactly the same, i.e., they have identical node values, and the same arrangement of nodes and null pointers. # Input: - Two binary trees represented by root nodes `root1` and `root2`. # Output: - Return `True` if both trees are identical, otherwise return `False`. # Constraints: - Each tree node will have an integer value. - Do not assume trees are balanced. - Any of the trees can be empty (represented by `None`). # Function Signature: ```python def are_identical(root1: TreeNode, root2: TreeNode) -> bool: pass ``` # Requirements: 1. Implement your solution considering edge cases like empty trees. 2. Assume each input tree can have up to 10^4 nodes. # Example: ```python # Example 1: root1 = TreeNode(1) root1.left = TreeNode(2) root1.right = TreeNode(3) root2 = TreeNode(1) root2.left = TreeNode(2) root2.right = TreeNode(3) print(are_identical(root1, root2)) # Expected output: True # Example 2: root1 = TreeNode(1) root1.left = TreeNode(2) root2 = TreeNode(1) root2.right = TreeNode(2) print(are_identical(root1, root2)) # Expected output: False ``` **Note**: This test question evaluates understanding of tree traversal, comparison mechanics, and handling various tree structures effectively.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def are_identical(root1: TreeNode, root2: TreeNode) -> bool: Determine if two binary trees are identical. if not root1 and not root2: return True if not root1 or not root2: return False return (root1.value == root2.value and are_identical(root1.left, root2.left) and are_identical(root1.right, root2.right))"},{"question":"# Context You are building a module for a data management system that needs to maintain a sorted list of timestamps efficiently. Each event\'s timestamp must be inserted into the list in the correct order to ensure the data remains sorted without the need for re-sorting after each insertion. # Problem Statement Implement a function `insert_and_maintain_order(sorted_list, new_element)` that will insert `new_element` into `sorted_list` in the correct order. # Function Signature ```python def insert_and_maintain_order(sorted_list: List[int], new_element: int) -> None: pass ``` # Input * `sorted_list`: A list of integers sorted in ascending order. * `new_element`: An integer representing the new element to insert. # Output * The function doesn\'t return anything. It should modify `sorted_list` in place to include `new_element` in the correct position. # Constraints * The input list will have at most (10^5) elements. * Each integer in the list will be in the range ([-10^9, 10^9]). # Performance Requirements * The algorithm should exhibit O(log n) complexity for finding the insertion index and O(n) complexity for the list modification. # Example ```python sorted_list = [1, 3, 5, 6] insert_and_maintain_order(sorted_list, 4) print(sorted_list) # Output: [1, 3, 4, 5, 6] sorted_list = [2, 4, 6, 8] insert_and_maintain_order(sorted_list, 1) print(sorted_list) # Output: [1, 2, 4, 6, 8] sorted_list = [1, 1, 1, 1] insert_and_maintain_order(sorted_list, 1) print(sorted_list) # Output: [1, 1, 1, 1, 1] ``` # Scenario Imagine you are tasked with managing a queue of tasks that arrive with specific timestamps. To ensure tasks are handled in chronological order, your list of timestamps must remain sorted as new tasks are continuously added.","solution":"from bisect import insort def insert_and_maintain_order(sorted_list, new_element): Inserts new_element into sorted_list maintaining the order. Parameters: sorted_list (list of int): The sorted list of integers. new_element (int): The new integer element to insert. Returns: None: The function modifies the list in place. insort(sorted_list, new_element)"},{"question":"# Context & Problem Statement You are a software engineer working on a calendar application. To provide better availability insights, you need to find the vacant slots during a day, given specific booked times. Each slot is represented as a continuous interval (start time, end time) in minutes from the beginning of the day. # Detailed Prompt Given a sorted list of non-overlapping booked intervals and a time range `[start_time, end_time]`, write a function to return a list of vacant time ranges within the given time range. Each booked interval is represented as a tuple `(start, end)` where `start` and `end` are integer values in minutes. # Function Signature: ```python def find_vacant_ranges(booked_intervals: List[Tuple[int, int]], start_time: int, end_time: int) -> List[Tuple[int, int]]: pass ``` # Input - `booked_intervals` (List[Tuple[int, int]]): A sorted list of tuples representing booked intervals within the day in minutes. - `start_time` (int): The start time of the total range to consider (inclusive). - `end_time` (int): The end time of the total range to consider (inclusive). # Output - Returns a list of tuples representing the vacant intervals within the given time range. Each vacant interval (start, end) is expressed such that `[start, end]` covers all unbooked minutes in the range. # Constraints - The intervals within `booked_intervals` do not overlap. - `0 <= start_time < end_time <= 1440` (representing minutes within 24 hours). # Example ```python # Test case 1 booked_intervals = [(30, 90), (120, 180), (240, 300)] start_time = 0 end_time = 360 print(find_vacant_ranges(booked_intervals, start_time, end_time)) # Output: [(0, 29), (91, 119), (181, 239), (301, 360)] # Test case 2 booked_intervals = [(10, 20), (30, 40), (50, 60)] start_time = 0 end_time = 70 print(find_vacant_ranges(booked_intervals, start_time, end_time)) # Output: [(0, 9), (21, 29), (41, 49), (61, 70)] # Test case 3 booked_intervals = [] start_time = 100 end_time = 200 print(find_vacant_ranges(booked_intervals, start_time, end_time)) # Output: [(100, 200)] ``` # Notes - Ensure your solution is efficient and handles edge cases properly. - Your function should not modify the input list `booked_intervals`.","solution":"from typing import List, Tuple def find_vacant_ranges(booked_intervals: List[Tuple[int, int]], start_time: int, end_time: int) -> List[Tuple[int, int]]: vacant_intervals = [] current_start = start_time for (booked_start, booked_end) in booked_intervals: if current_start < booked_start: vacant_intervals.append((current_start, booked_start - 1)) current_start = booked_end + 1 if current_start <= end_time: vacant_intervals.append((current_start, end_time)) return vacant_intervals"},{"question":"You are given an array of integers that needs to be sorted. However, instead of using an efficient sorting algorithm, you are tasked to implement the Bogo Sort algorithm to demonstrate an extreme case of algorithm inefficiency. Function Signature ```python def bogo_sort(arr: List[int]) -> List[int]: ``` Input * **arr**: A list of integers, where `1 <= len(arr) <= 10^3`. Output * A list of integers sorted in non-decreasing order. Constraints * It is assumed that the list will not exceed 10^3 elements in a competitive programming context, otherwise this could run indefinitely. Example ```python print(bogo_sort([3, 2, 1])) # Possible output: [1, 2, 3] print(bogo_sort([5, 6, 4, 3, 2])) # Possible output: [2, 3, 4, 5, 6] ``` Notes - You may assume that the input list has all unique elements to simplify the problem. - Given the inefficient nature of Bogo Sort, it is not suitable for practical use beyond educational purposes. - Please do NOT use built-in sort functions or any efficient sorting algorithm.","solution":"import random def is_sorted(arr): Helper function to check if the array is sorted. for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return False return True def bogo_sort(arr): Sorts an array using the highly inefficient Bogo Sort algorithm. while not is_sorted(arr): random.shuffle(arr) return arr"},{"question":"# Question Implement the Fibonacci sequence calculations focusing on efficiency and optimization. You have to provide two implementations of the Fibonacci function. 1. **Memoized Recursive Fibonacci**: Using memoization to store results of previous computations to optimize the recursive approach. 2. **Efficient Iterative Fibonacci with Space Optimization**: Implement an iterative approach that efficiently computes the Fibonacci number with minimal space usage. # Function Signatures ```python def fib_memo(n: int, memo: dict = None) -> int: pass def fib_optimized(n: int) -> int: pass ``` # Input * An integer `n` where `0 <= n <= 10^5`. # Output * An integer which is the n-th Fibonacci number. # Examples ```python fib_memo(0) => 0 fib_memo(1) => 1 fib_memo(10) => 55 fib_optimized(0) => 0 fib_optimized(1) => 1 fib_optimized(10) => 55 ``` # Constraints * Ensure your solution works efficiently for `n` up to `100,000`. # Notes * In `fib_memo`, you should utilize a dictionary `memo` to store intermediate results. * In `fib_optimized`, ensure space complexity remains O(1).","solution":"def fib_memo(n: int, memo: dict = None) -> int: if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fib_memo(n-1, memo) + fib_memo(n-2, memo) return memo[n] def fib_optimized(n: int) -> int: if n <= 1: return n prev, curr = 0, 1 for _ in range(2, n + 1): prev, curr = curr, prev + curr return curr"},{"question":"You are given a sorted array that has been rotated at some unknown pivot. The task is to find the minimum element in this rotated sorted array. The array does not contain any duplicate elements. Implement the function `find_minimum_in_rotated_array(arr: List[int]) -> int` to find the minimum element. The solution must have a time complexity of O(log N). Inputs: - `arr` (List[int]): Sorted and rotated array without duplicates. The length of the array is between 1 and 10^4. Output: - Returns an integer which is the minimum element in the rotated sorted array. You should write your solution in an iterative approach to optimize space complexity. Example: 1. **Input**: [3, 4, 5, 1, 2] - **Output**: 1 2. **Input**: [4, 5, 6, 7, 0, 1, 2] - **Output**: 0 3. **Input**: [11, 13, 15, 17] - **Output**: 11 Constraints: - The array contains no duplicates. - The array has been rotated at least once. - The time complexity must be O(log N).","solution":"def find_minimum_in_rotated_array(arr): Finds the minimum element in a rotated sorted array. if not arr: raise ValueError(\\"The array cannot be empty.\\") start, end = 0, len(arr) - 1 while start < end: mid = (start + end) // 2 if arr[mid] > arr[end]: start = mid + 1 else: end = mid return arr[start]"},{"question":"# AVL Tree Implementation Challenge **Context**: You are working on a project that requires maintaining a dynamically balanced tree for efficient data retrieval. An AVL Tree, a self-balancing binary search tree, is optimal for this task. It provides a balanced structure ensuring O(log N) time complexity for various operations. **Task**: Implement the following functionalities of the AVL tree: 1. **Insert**: Insert a new key into the AVL tree while maintaining the tree balance. 2. **Search**: Implement a search functionality to find if a key exists in the tree. 3. **Delete**: Implement a deletion functionality to remove a node from the AVL tree while maintaining the tree balance. 4. **In-Order Traverse**: Return the keys in the tree according to an in-order traversal. **Function Signatures**: ```python class AvlTree: def insert(self, key: int) -> None: pass def search(self, key: int) -> bool: pass def delete(self, key: int) -> None: pass def in_order_traverse(self) -> List[int]: pass ``` **Expectations**: 1. **Insert Function**: - Inserts the given key while keeping the tree balanced. - Ensure no duplicate keys are allowed. 2. **Search Function**: - Returns `True` if key exists, otherwise `False`. 3. **Delete Function**: - Removes the specified key while maintaining the balance of the tree. - Ensure the key exists before attempting deletion. 4. **In-Order Traverse Function**: - Returns a list of keys following an in-order traversal. **Example**: ```python tree = AvlTree() tree.insert(10) tree.insert(20) tree.insert(30) print(tree.in_order_traverse()) # Output: [10, 20, 30] print(tree.search(20)) # Output: True print(tree.search(40)) # Output: False tree.delete(20) print(tree.in_order_traverse()) # Output: [10, 30] ``` **Constraints**: - Keys will be distinct integers. - Perform operations assuming no other constraints beyond the algorithmic balance maintenance of an AVL Tree. - Aim for optimal performance with respect to time complexity. **Hint**: Utilize rotations (left and right) to maintain tree balance during insertion and deletion.","solution":"class AvlTree: class Node: def __init__(self, key): self.key = key self.left = None self.right = None self.height = 1 def __init__(self): self.root = None def insert(self, key: int) -> None: self.root = self._insert(self.root, key) def _insert(self, node, key): if not node: return self.Node(key) elif key < node.key: node.left = self._insert(node.left, key) elif key > node.key: node.right = self._insert(node.right, key) else: return node # No duplicate keys are allowed node.height = 1 + max(self._get_height(node.left), self._get_height(node.right)) balance = self._get_balance(node) # Left Left Case if balance > 1 and key < node.left.key: return self._right_rotate(node) # Right Right Case if balance < -1 and key > node.right.key: return self._left_rotate(node) # Left Right Case if balance > 1 and key > node.left.key: node.left = self._left_rotate(node.left) return self._right_rotate(node) # Right Left Case if balance < -1 and key < node.right.key: node.right = self._right_rotate(node.right) return self._left_rotate(node) return node def delete(self, key: int) -> None: self.root = self._delete(self.root, key) def _delete(self, node, key): if not node: return node if key < node.key: node.left = self._delete(node.left, key) elif key > node.key: node.right = self._delete(node.right, key) else: if node.left is None: return node.right elif node.right is None: return node.left temp = self._get_min_value_node(node.right) node.key = temp.key node.right = self._delete(node.right, temp.key) if node is None: return node node.height = 1 + max(self._get_height(node.left), self._get_height(node.right)) balance = self._get_balance(node) # Left Left Case if balance > 1 and self._get_balance(node.left) >= 0: return self._right_rotate(node) # Left Right Case if balance > 1 and self._get_balance(node.left) < 0: node.left = self._left_rotate(node.left) return self._right_rotate(node) # Right Right Case if balance < -1 and self._get_balance(node.right) <= 0: return self._left_rotate(node) # Right Left Case if balance < -1 and self._get_balance(node.right) > 0: node.right = self._right_rotate(node.right) return self._left_rotate(node) return node def search(self, key: int) -> bool: return self._search(self.root, key) def _search(self, node, key): if node is None: return False if key < node.key: return self._search(node.left, key) elif key > node.key: return self._search(node.right, key) else: return True def in_order_traverse(self) -> list: results = [] self._in_order_traverse(self.root, results) return results def _in_order_traverse(self, node, results): if node is not None: self._in_order_traverse(node.left, results) results.append(node.key) self._in_order_traverse(node.right, results) def _left_rotate(self, z): y = z.right T2 = y.left y.left = z z.right = T2 z.height = 1 + max(self._get_height(z.left), self._get_height(z.right)) y.height = 1 + max(self._get_height(y.left), self._get_height(y.right)) return y def _right_rotate(self, z): y = z.left T3 = y.right y.right = z z.left = T3 z.height = 1 + max(self._get_height(z.left), self._get_height(z.right)) y.height = 1 + max(self._get_height(y.left), self._get_height(y.right)) return y def _get_height(self, node): if not node: return 0 return node.height def _get_balance(self, node): if not node: return 0 return self._get_height(node.left) - self._get_height(node.right) def _get_min_value_node(self, node): if node is None or node.left is None: return node return self._get_min_value_node(node.left)"},{"question":"You are tasked with implementing a specialized hash table data structure that supports the following additional methods: `replace` (to update a key\'s value only if it exists) and `contains_value` (to check if a specific value exists in the hash table). Requirements 1. **replace(key, value)**: * Update the value associated with the specified key but only if the key exists in the hash table. * If the key does not exist, do nothing. * Return `True` if the update was successful, otherwise `False`. 2. **contains_value(value)**: * Check if the hash table contains the specified value. * Return `True` if the value exists, otherwise `False`. # Implementation You must complete the implementation of these methods and integrate them into the existing `HashTable` class. # Constraints - Key-Value pairs will consist of integers. - The `replace` method must operate in O(1) time on average. - The `contains_value` method must avoid unnecessary probing and should be efficient. # Input and Output Format - The `replace` method will be invoked as `hash_table.replace(key, value)` and should return a boolean. - The `contains_value` method will be invoked as `hash_table.contains_value(value)` and should return a boolean. Example ```python hash_table = ResizableHashTable() hash_table.put(1, 100) hash_table.put(2, 200) # replace method print(hash_table.replace(1, 150)) # Output: True print(hash_table.replace(3, 300)) # Output: False # contains_value method print(hash_table.contains_value(150)) # Output: True print(hash_table.contains_value(300)) # Output: False ``` Implement the class as specified above. # Additional Notes Ensure correct handling of edge cases such as empty tables, full tables, and rehashing during resizing operations. Pay special attention to the efficiency of the new methods.","solution":"class HashTable: def __init__(self, capacity=100): self.capacity = capacity self.size = 0 self.table = [None] * capacity self.values = set() # To efficiently check if a value is present def hash_function(self, key): return key % self.capacity def put(self, key, value): index = self.hash_function(key) while self.table[index] is not None and self.table[index][0] != key: index = (index + 1) % self.capacity if self.table[index] is None: self.size += 1 self.table[index] = (key, value) self.values.add(value) def get(self, key): index = self.hash_function(key) while self.table[index] is not None: if self.table[index][0] == key: return self.table[index][1] index = (index + 1) % self.capacity return None def replace(self, key, value): index = self.hash_function(key) while self.table[index] is not None: if self.table[index][0] == key: old_value = self.table[index][1] self.table[index] = (key, value) if old_value != value: self.values.discard(old_value) self.values.add(value) return True index = (index + 1) % self.capacity return False def contains_value(self, value): return value in self.values"},{"question":"Given a positive integer `n` and a non-negative integer `k` where `n >= k`, the binomial coefficient ( C(n, k) ) represents the number of ways to choose `k` elements from a set of `n` elements. It is given by: [ C(n, k) = frac{n!}{k!(n-k)!} ] The function `recursive_binomial_coefficient(n, k)` has been provided, which computes the binomial coefficient using recursion and optimizations. However, the recursive method can be inefficient for larger values due to the overhead of recursive calls and the risk of stack overflow. Your task is to implement an iterative version of the binomial coefficient calculation that maintains or improves upon the given time complexity while reducing auxiliary space usage. Ensure that your implementation handles large values efficiently and returns the same results as the provided function. # Function Signature ```python def iterative_binomial_coefficient(n: int, k: int) -> int: Computes the binomial coefficient C(n, k) using an iterative approach. :param n: a positive integer (n >= k) :param k: a non-negative integer :return: an integer value of the binomial coefficient C(n, k) ``` # Input * `n` (int): A positive integer where ( n geq k ). * `k` (int): A non-negative integer. # Output * Returns the binomial coefficient ( C(n, k) ) as an integer. # Constraints * ( 0 leq k leq n leq 10^5 ) * The result will always be within the range of a 64-bit signed integer. # Example ```python iterative_binomial_coefficient(5, 0) # returns 1 iterative_binomial_coefficient(8, 2) # returns 28 iterative_binomial_coefficient(500, 300) # returns a large number ``` # Requirements Your solution should: * Use an iterative approach, avoiding recursion. * Optimize for time and space efficiency. * Handle edge case scenarios such as `k = 0`, `k = n` effectively. # Context Computing binomial coefficients is crucial in various fields, including combinatorics, probability theory, and computer science. Efficient calculation methods can significantly enhance performance in applications involving large datasets and complex computations.","solution":"def iterative_binomial_coefficient(n: int, k: int) -> int: Computes the binomial coefficient C(n, k) using an iterative approach. :param n: a positive integer (n >= k) :param k: a non-negative integer :return: an integer value of the binomial coefficient C(n, k) if k > n: return 0 if k == 0 or k == n: return 1 # Since C(n, k) == C(n, n-k), minimize the number of multiplications k = min(k, n - k) result = 1 for i in range(k): result *= (n - i) result //= (i + 1) return result"},{"question":"# Scenario You have been hired by a company to optimize their existing data processing system. After reviewing their code, you noticed that their data is regularly sorted. The current sorting implementation is causing performance issues. You decide to implement a more optimized sorting algorithm to handle their data more efficiently. # Problem Statement Your task is to implement the Comb Sort algorithm. Given an array of integers, write a function `optimised_comb_sort` that sorts the array in ascending order. # Function Signature ```python def optimised_comb_sort(arr: List[int]) -> List[int]: pass ``` # Input * List of integers `arr` with 1 <= len(arr) <= 10^5 and -10^9 <= arr[i] <= 10^9. # Output * List of integers sorted in ascending order. # Constraints * The input list can contain both positive and negative integers. * There can be duplicate elements in the list. # Performance Requirements * Aim to have an average-case performance better than that of Bubble Sort. * Ensure the algorithm handles up to 100,000 elements efficiently. # Example ```python assert optimised_comb_sort([5, 2, 9, 1, 5, 6]) == [1, 2, 5, 5, 6, 9] assert optimised_comb_sort([-2, 45, 0, 11, -9]) == [-9, -2, 0, 11, 45] assert optimised_comb_sort([100, 0, 0, -1, 50]) == [-1, 0, 0, 50, 100] ``` Provide additional test cases to ensure the robustness of your implementation.","solution":"def optimised_comb_sort(arr): Sorts an array using the Comb Sort algorithm. gap = len(arr) # Initialize the gap size shrink = 1.3 # Shrinking the gap size by this factor sorted = False while not sorted: # Update the gap for the next comb gap = int(gap / shrink) if gap <= 1: gap = 1 sorted = True i = 0 # A single pass with current gap while i + gap < len(arr): if arr[i] > arr[i + gap]: arr[i], arr[i + gap] = arr[i + gap], arr[i] sorted = False i += 1 return arr"},{"question":"# Missing Number Finder Challenge You are given a sequence of unique integers ranging from 0 to n. The sequence consists of `n` integers but is missing one integer in the range `[0, n]`. Your task is to find the missing integer. If the sequence is complete, return the next integer in the sequence. Implement a function that accomplishes this in linear time. Function Signature ```python def find_missing_number(nums: List[int]) -> int: ``` # Input - `nums`: A list of `n` unique integers in the range `[0, n]`. # Output - An integer representing the missing number in the sequence, or the next integer if the sequence is complete. # Example ```python assert find_missing_number([4, 1, 3, 0, 6, 5, 2]) == 7 assert find_missing_number([0, 1, 2, 3, 4]) == 5 assert find_missing_number([0]) == 1 assert find_missing_number([1]) == 0 assert find_missing_number([]) == 0 ``` # Constraints - Linear time complexity O(n) is required. - Additional space usage should ideally be O(1). # Notes - Do not rely on any input validation. Assume `nums` always contains integers in the range `[0, len(nums)]` with no duplicates. # Hints - Consider using the properties of XOR or arithmetic sum to derive the solution efficiently.","solution":"from typing import List def find_missing_number(nums: List[int]) -> int: Finds the missing number in the given sequence of integers ranging from 0 to n. If no number is missing, returns the next integer in the sequence. n = len(nums) expected_sum = n * (n + 1) / 2 actual_sum = sum(nums) missing_number = int(expected_sum) - int(actual_sum) return missing_number"},{"question":"# Scenario You are implementing a secure communications software. As part of this software, you must include an RSA encryption system to ensure that messages can be securely transmitted. Your task is to implement the RSA key generation and encryption/decryption functions along with additional utility for testing purposes. # Task Implement the following functions: 1. **`generate_key(k, seed=None)`**: * Generates RSA keys of approximate `k` bits in length. * Should be consistent in generation if `seed` is provided. 2. **`encrypt(data, e, n)`**: * Encrypts integer `data` using public key `(e, n)`. 3. **`decrypt(data, d, n)`**: * Decrypts integer `data` using private key `d` and modulus `n`. 4. **`is_prime(num)`**: * Utility to check if `num` is a prime number (may reuse from provided code). # Function Signatures ```python def generate_key(k: int, seed: int=None) -> (int, int, int): def encrypt(data: int, e: int, n: int) -> int: def decrypt(data: int, d: int, n: int) -> int: def is_prime(num: int) -> bool: ``` # Constraints * `1 <= k <= 2048` (in practice keys are usually 1024-2048 bits for security) * `data` should be a non-negative integer less than `n`. * Use Python\'s built-in `pow()` with three arguments for efficient modular exponentiation. * Implement correct handling and testing for prime generation and modular inverse. # Example ```python n, e, d = generate_key(16, seed=42) data = 123 encrypted = encrypt(data, e, n) decrypted = decrypt(encrypted, d, n) assert decrypted == data, \\"Decryption failed!\\" ``` In this example, `generate_key(16, seed=42)` generates a consistent set of keys. The data `123` is encrypted and decrypted correctly.","solution":"import random from sympy import mod_inverse def generate_key(k, seed=None): if seed is not None: random.seed(seed) def get_prime(bit_length): while True: candidate = random.getrandbits(bit_length) if is_prime(candidate): return candidate p = get_prime(k // 2) q = get_prime(k // 2) n = p * q phi = (p - 1) * (q - 1) e = 65537 d = mod_inverse(e, phi) return (n, e, d) def encrypt(data, e, n): return pow(data, e, n) def decrypt(data, d, n): return pow(data, d, n) def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True"},{"question":"# Doubly Linked List Operations You are required to implement a **Doubly Linked List** with the following functionalities: 1. **Insert at Head**: Insert a new node at the beginning of the list. 2. **Insert at Tail**: Insert a new node at the end of the list. 3. **Delete Node by Value**: Delete the first node in the list that matches the given value. 4. **Find Node by Value**: Return the reference to the first node matching the given value, otherwise return None. Your task is to provide the implementation of the class `DoublyLinkedList` along with the required methods to achieve these operations. # Input Format - For `insert_at_head(value)` and `insert_at_tail(value)` methods, `value` is an integer. - For `delete_node(value)` and `find_node(value)`, `value` is the integer to be searched or deleted. # Output Format - `insert_at_head(value)` and `insert_at_tail(value)` should not return any value. - `delete_node(value)` should return True if the deletion was successful, False otherwise. - `find_node(value)` should return the reference to the node if found, otherwise None. # Constraints - Values will be integers. - No duplicate values will be inserted for simplicity. - Assume the node class `DoublyLinkedListNode` is already implemented as per the snippet provided. # Performance Requirements - All operations should run in O(1) time for insertion and deletion, and O(n) for finding nodes. Example: ```python dll = DoublyLinkedList() dll.insert_at_head(1) dll.insert_at_tail(2) dll.insert_at_head(3) print(dll.find_node(1)) # returns the reference of the node with value 1 print(dll.delete_node(4)) # returns False as 4 is not in the list print(dll.delete_node(1)) # returns True and deletes the node with value 1 ``` Implement the following class with its methods: ```python class DoublyLinkedList: def __init__(self): # your code here def insert_at_head(self, value): # your code here def insert_at_tail(self, value): # your code here def delete_node(self, value): # your code here def find_node(self, value): # your code here ```","solution":"class DoublyLinkedListNode: def __init__(self, value): self.value = value self.prev = None self.next = None class DoublyLinkedList: def __init__(self): self.head = None self.tail = None def insert_at_head(self, value): new_node = DoublyLinkedListNode(value) if self.head is None: self.head = self.tail = new_node else: new_node.next = self.head self.head.prev = new_node self.head = new_node def insert_at_tail(self, value): new_node = DoublyLinkedListNode(value) if self.tail is None: self.head = self.tail = new_node else: new_node.prev = self.tail self.tail.next = new_node self.tail = new_node def delete_node(self, value): current = self.head while current: if current.value == value: if current.prev: current.prev.next = current.next else: self.head = current.next if current.next: current.next.prev = current.prev else: self.tail = current.prev return True current = current.next return False def find_node(self, value): current = self.head while current: if current.value == value: return current current = current.next return None"},{"question":"You are given an array of integers where every element appears exactly three times, except for one element that appears exactly once. Implement a function to find that single element. Your solution should run in O(n) time complexity and should not use any extra memory. # Specifications: * **Function name**: `find_single` * **Input**: List of integers `nums` * **Output**: Integer that appears exactly once. * **Constraints**: - You may assume that the array has a length of at least 1 and the problem conditions (every other element appears thrice except one) are always satisfied. # Example: ```python assert(find_single([2,2,3,2]) == 3) assert(find_single([0,1,0,1,0,1,99]) == 99) ``` # Performance Requirements: * Your implementation should run in O(n) time complexity. * Extra space usage should be O(1).","solution":"def find_single(nums): Returns the single integer that appears exactly once in the list where every other element appears exactly three times. # Initialize variables to hold bits representation ones, twos = 0, 0 for num in nums: # `ones` holds bits which have appeared 1st time ones = (ones ^ num) & ~twos # `twos` holds bits which have appeared 2nd time twos = (twos ^ num) & ~ones return ones"},{"question":"Enhanced Linear Search Context You are given a list of integers and a target value. Your task is to enhance the basic linear search algorithm to handle additional constraints and provide more detailed output. Problem Statement Write a function `enhanced_linear_search(array, query)` that not only finds the index of the first occurrence of the target query but also returns the total number of comparisons made during the search process. Function Signature ```python def enhanced_linear_search(array: List[int], query: int) -> Tuple[int, int]: Parameters: array (List[int]): The input array of integers. query (int): The target integer to search for. Returns: Tuple[int, int]: A tuple where the first element is the index of the query in the array, and the second element is the number of comparisons made. If the query is not in the array, returns (-1, comparisons). ``` Examples 1. Input: `array = [4, 2, 5, 1, 3]`, `query = 5` Output: `(2, 3)` Explanation: The target value 5 is found at index 2, and it took 3 comparisons (comparing 4, 2, and 5). 2. Input: `array = [8, 6, 7, 5, 3, 0, 9]`, `query = 30` Output: `(-1, 7)` Explanation: The target value 30 is not found in the array, and it took 7 comparisons to determine that. Constraints * The array contains at most (10^6) elements. * Each element in the array is in the range ([-10^9, 10^9]). * The query value is within the same range as the elements.","solution":"from typing import List, Tuple def enhanced_linear_search(array: List[int], query: int) -> Tuple[int, int]: Enhanced linear search function that returns the index of the first occurrence of the query and the number of comparisons made. comparisons = 0 for index, value in enumerate(array): comparisons += 1 if value == query: return (index, comparisons) return (-1, comparisons)"},{"question":"# Sliding Window Maximum Function Context You are developing a monitoring system to track the maximum CPU usage over time intervals. Given the CPU usage data as an array of integers, you are required to compute the maximum usage in every contiguous subarray of a specified length `k`. Task Implement the `max_sliding_window(arr, k)` function which takes an integer array `arr` and an integer `k` as its parameters. The function should return a list containing the maximum values of each subarray of length `k`. Input * `arr`: A list of integers representing the CPU usage data. * `k`: An integer representing the length of the subarrays to consider. Output * A list of integers representing the maximum values of each subarray of length `k`. Constraints * `1 <= len(arr) <= 10^5` * `1 <= k <= len(arr)` * `-10^4 <= arr[i] <= 10^4` Example ```python # Example 1 arr = [1, 3, -1, -3, 5, 3, 6, 7] k = 3 max_sliding_window(arr, k) # Output: [3, 3, 5, 5, 6, 7] # Example 2 arr = [9, 7, 2, 4, 6, 8, 3] k = 4 max_sliding_window(arr, k) # Output: [9, 7, 6, 8] ``` Notes * The sliding window moves one position at a time from the leftmost (starting at index 0) to the rightmost end of the array. * You can assume k is always at least 1 and at most the length of the array.","solution":"from collections import deque def max_sliding_window(arr, k): Returns the maximum values of each subarray of length k. Parameters: arr (list): A list of integers representing the CPU usage data. k (int): An integer representing the length of the subarrays to consider. Returns: list: A list of integers representing the maximum values of each subarray of length k. if not arr or k <= 0: return [] deq = deque() result = [] for i, n in enumerate(arr): while deq and deq[0] < i - k + 1: deq.popleft() while deq and arr[deq[-1]] < n: deq.pop() deq.append(i) if i >= k - 1: result.append(arr[deq[0]]) return result"},{"question":"Problem Statement You are required to implement a sorting function using the Stooge Sort algorithm. Your task is to sort an array of integers in non-decreasing order. # Function Signature ```python def stooge_sort(arr: List[int]) -> List[int]: ``` # Input - `arr`: A list of integers `arr` (0 ≤ len(arr) ≤ 10^3, -10^3 ≤ arr[i] ≤ 10^3). # Output - Return a sorted list of integers in non-decreasing order. # Example Input: ```python arr = [3, 2, 1, 4, 6, 5] ``` Output: ```python [1, 2, 3, 4, 5, 6] ``` # Constraints - Do not use any in-built sorting functions like `sort()`. - Implement the Stooge Sort algorithm as described. # Explanation 1. If the array (or subarray) length is 1, it is already sorted. 2. If there are two elements, compare and swap them if they are in the wrong order. 3. For larger arrays, recursively sort the first two-thirds of the array, the last two-thirds of the array, and then the first two-thirds again. # Performance Ensure that your solution handles input arrays of up to 1000 elements efficiently despite the algorithm\'s high time complexity.","solution":"def stooge_sort(arr): def stooge_sort_recursive(arr, l, h): if l >= h: return # if first element is larger than last, swap them if arr[l] > arr[h]: arr[l], arr[h] = arr[h], arr[l] # if there are more than 2 elements in subarray if h - l + 1 > 2: t = (h - l + 1) // 3 stooge_sort_recursive(arr, l, h - t) stooge_sort_recursive(arr, l + t, h) stooge_sort_recursive(arr, l, h - t) stooge_sort_recursive(arr, 0, len(arr) - 1) return arr"},{"question":"# Permutation Puzzle You are given a collection of distinct integers. Your task is to write three functions to generate all possible permutations of the integers: 1. A function that returns the permutations as a list. 2. A function that returns an iterator yielding one permutation at a time. 3. A function that uses a depth-first search (DFS) approach to recursively find permutations. # Function Signatures ```python def permute(elements: List[int]) -> List[List[int]]: pass def permute_iter(elements: List[int]) -> Iterator[List[int]]: pass def permute_recursive(elements: List[int]) -> List[List[int]]: pass ``` # Input - A list of distinct integers `elements` where `1 <= len(elements) <= 8`. # Output - `permute`: Returns a list of lists, where each inner list is a permutation. - `permute_iter`: Returns an iterator yielding one permutation (a list) at a time. - `permute_recursive`: Returns a list of lists, where each inner list is a permutation using DFS. # Constraints - The integers in the input list are distinct. - Time Complexity: Your solution should be able to handle the worst case of n=8 within reasonable time limits. # Example ```python elements = [1, 2, 3] permute(elements) should return: [ [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1] ] permute_iter(elements) should yield: [1, 2, 3] [1, 3, 2] [2, 1, 3] [2, 3, 1] [3, 1, 2] [3, 2, 1] permute_recursive(elements) should return: [ [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1] ] ``` # Notes - Ensure to handle edge cases such as an empty list or a single-element list. - Implement the solution efficiently both in terms of time and space complexity. - Document your code with comments explaining the logic for each important step.","solution":"from typing import List, Iterator def permute(elements: List[int]) -> List[List[int]]: Generate all permutations of the input list using an iterative method. if len(elements) == 0: return [[]] result = [] def generate_permutations(current, remaining): if not remaining: result.append(current) for i in range(len(remaining)): generate_permutations(current + [remaining[i]], remaining[:i] + remaining[i+1:]) generate_permutations([], elements) return result def permute_iter(elements: List[int]) -> Iterator[List[int]]: Generate all permutations of the input list and yield them one by one. if len(elements) == 0: yield [] return def generate_permutations(current, remaining): if not remaining: yield current for i in range(len(remaining)): yield from generate_permutations(current + [remaining[i]], remaining[:i] + remaining[i+1:]) yield from generate_permutations([], elements) def permute_recursive(elements: List[int]) -> List[List[int]]: Generate all permutations of the input list using a recursive DFS approach. def dfs(current, remaining, result): if not remaining: result.append(current) for i in range(len(remaining)): dfs(current + [remaining[i]], remaining[:i] + remaining[i+1:], result) result = [] dfs([], elements, result) return result"},{"question":"Cycle Sort Implementation Objective Your task is to implement the Cycle Sort algorithm. However, to demonstrate a deeper understanding, you will modify the algorithm to count the total number of writes performed during the sorting process. Function Signature ```python def cycle_sort_and_count(arr: List[int]) -> Tuple[List[int], int]: Sorts the array using Cycle Sort and returns the sorted array along with the count of performed writes. Parameters: arr (List[int]): The list of integers to sort. Returns: Tuple[List[int], int]: A sorted version of the input list and the count of writes during sorting. ``` Input Constraints - `1 <= len(arr) <= 5000` - `-10^5 <= arr[i] <= 10^5` Output The function should return a tuple containing: - The sorted array. - The count of writes performed during the sort. Example ```python arr = [3, 5, 2, 4, 1] sorted_arr, count_writes = cycle_sort_and_count(arr) # sorted_arr should be [1, 2, 3, 4, 5] # count_writes should be the number of writes made during the Cycle Sort ``` Constraints and Requirements 1. You must utilize the Cycle Sort approach. 2. You must track and return the number of write operations. Scenario Mary is an engineer working on a project where minimizing memory writes is critical. Her system has limited endurance for write operations. She comes across the Cycle Sort algorithm and decides to use it. However, she needs to precisely know how many writes her sorting algorithm will incur to ensure it doesn\'t exceed her system\'s limits. She seeks your assistance in implementing this algorithm and providing her with the exact count of writes performed during sorting.","solution":"from typing import List, Tuple def cycle_sort_and_count(arr: List[int]) -> Tuple[List[int], int]: writes = 0 for start in range(0, len(arr) - 1): item = arr[start] pos = start for i in range(start + 1, len(arr)): if arr[i] < item: pos += 1 if pos == start: continue while item == arr[pos]: pos += 1 if pos != start: arr[pos], item = item, arr[pos] writes += 1 while pos != start: pos = start for i in range(start + 1, len(arr)): if arr[i] < item: pos += 1 while item == arr[pos]: pos += 1 if item != arr[pos]: arr[pos], item = item, arr[pos] writes += 1 return arr, writes"},{"question":"# Context: As a software engineer, you have been tasked with developing a compression algorithm that utilizes bit-level manipulations for efficient data storage and retrieval. # Task: Implement a function `count_set_bits(num: int) -> int` that counts the number of `1`s in the binary representation of an integer. Utilize bitwise operations provided in the snippets for this task. # Function Signature: ```python def count_set_bits(num: int) -> int: # Your implementation here ``` # Input: * `num` (int): An integer whose set bits need to be counted. The value can be positive, negative, or zero. # Output: * Returns (int): Number of set bits (1s) in the binary representation of `num`. # Constraints: * The function must utilize the provided bitwise operations when applicable. * The solution should have a time complexity of O(b), where b is the number of bits in the integer. # Example: ```python assert count_set_bits(5) == 2 # Binary: 0101 assert count_set_bits(-1) == 32 # Assuming 32-bit representation for negative numbers (all bits are 1) assert count_set_bits(0) == 0 # Binary: 0000 ``` # Notes: 1. Consider negative numbers in their 32-bit representation using two\'s complement representation if using Python\'s binary representation. 2. Python handles arbitrary-precision integers, so your implementation should consider standard 32-bit integers representation for simplicity.","solution":"def count_set_bits(num: int) -> int: Returns the number of set bits (1\'s) in the binary representation of the given integer. Assumes a 32-bit representation for negative numbers using two\'s complement. # Consider 32-bit representation if num < 0: num = num & 0xFFFFFFFF count = 0 while num: count += num & 1 num >>= 1 return count"},{"question":"# ZigZag Iterator for Multiple Lists You are required to implement a ZigZag iterator that can take multiple lists and iterate over them in a zigzag fashion. Objective: Extend the given ZigZagIterator class so that it can handle an arbitrary number of input lists and return elements in a round-robin manner from each list. If one list is exhausted, continue iterating through the remaining lists. Function Signature: ```python class ZigZagIterator: def __init__(self, *args: List[int]) -> None: Initialize your data structure here with multiple input lists. :param args: Multiple lists of integers pass def next(self) -> int: :returns: The next element in the zigzag iteration pass def has_next(self) -> bool: :returns: A boolean indicating if there are more elements to iterate over pass ``` Input: * The constructor will receive an arbitrary number of lists, each containing integers. * The next and has_next methods should follow the same logic as described, but generalized for multiple lists. Output: * The next method should return the next element in the alternating order. * The has_next method should return whether there are still elements to iterate over. Example: ```python l1 = [1, 2, 3, 4] l2 = [5, 6, 7] l3 = [8, 9] it = ZigZagIterator(l1, l2, l3) result = [] while it.has_next(): result.append(it.next()) print(result) # Expected output: [1, 5, 8, 2, 6, 9, 3, 7, 4] ``` Constraints: * Number of lists (k) can be up to 10. * Each list can contain up to 1000 elements. * The list elements are guaranteed to be integers.","solution":"class ZigZagIterator: def __init__(self, *args): Initialize your data structure here with multiple input lists. :param args: Multiple lists of integers self.queue = [lst for lst in args if lst] # Only add non-empty lists self.indexes = [0] * len(self.queue) # Keep track of the current index of each list def next(self) -> int: :returns: The next element in the zigzag iteration if not self.has_next(): raise Exception(\\"No more elements\\") for i in range(len(self.queue)): if self.indexes[i] < len(self.queue[i]): value = self.queue[i][self.indexes[i]] self.indexes[i] += 1 if self.indexes[i] == len(self.queue[i]): self.queue.pop(i) self.indexes.pop(i) else: self.queue.append(self.queue.pop(i)) self.indexes.append(self.indexes.pop(i)) return value def has_next(self) -> bool: :returns: A boolean indicating if there are more elements to iterate over return len(self.queue) > 0"},{"question":"You are given a list of integers and a number `N`. Your task is to write a function that transforms the list so that each number appears at most `N` times, in the order of their first appearance. Ensure your solution is efficient in terms of time complexity. Function Signature ```python def transform_list(lst: list, N: int) -> list: ``` Input 1. `lst`: A list of integers. For example, `[1, 2, 3, 1, 2, 1, 2, 3]`. 2. `N`: An integer representing the maximum number of occurrences allowed for each element. For example, `2`. Output - A list where each number appears at most `N` times in the order they first appear in the input list. Constraints 1. `lst` contains between 0 and 10^5 integers. 2. Each integer in `lst` is in the range `-10^3` to `10^3`. 3. `N` is a non-negative integer. Example ```python transform_list([1, 2, 3, 1, 2, 1, 2, 3], 2) # Expected output: [1, 2, 3, 1, 2, 3] transform_list([1, 1, 1, 1], 2) # Expected output: [1, 1] transform_list([], 2) # Expected output: [] transform_list([1, 2, 3], 0) # Expected output: [] ``` Performance Requirements - Your solution should aim for an optimal time complexity, ideally O(n), where n is the length of the list. Important Notes - The order of elements must be maintained as in the input list. - Handle edge cases appropriately, such as empty lists or when `N` is 0.","solution":"def transform_list(lst: list, N: int) -> list: if N == 0: return [] count_dict = {} result = [] for item in lst: if item not in count_dict: count_dict[item] = 0 if count_dict[item] < N: count_dict[item] += 1 result.append(item) return result"},{"question":"Context Given the problem of identifying the difference between two similar strings, one of which has an additional character, your task is to implement an efficient algorithm based on the XOR operation. Task Write a function `find_difference(s: str, t: str) -> str` to find the additional character in string `t`. # Input * `s`: a string consisting of lowercase English letters (0 <= len(s) <= 10^5). * `t`: a string that consists of the same characters as `s` plus one additional character (1 <= len(t) <= len(s) + 1). # Output * Returns a single character that is the additional character in string `t`. # Constraints * Both strings `s` and `t` are composed of only lowercase English letters. * String `t` is generated by shuffling string `s` and then adding one more letter at a random position. # Performance Requirements Your solution should be efficient with a time complexity of O(n), where n is the length of the string `s`. Example ```python assert find_difference(\\"abcd\\", \\"abecd\\") == \'e\' assert find_difference(\\"\\", \\"a\\") == \'a\' assert find_difference(\\"abc\\", \\"cbaaa\\") == \'a\' assert find_difference(\\"xyz\\", \\"zxyq\\") == \'q\' ``` # Hints - Consider using the XOR operation to simplify the problem. - Remember the properties of XOR: A XOR A = 0 and A XOR B XOR A = B.","solution":"def find_difference(s: str, t: str) -> str: Finds the additional character in string t which is not in s using XOR operation. result = 0 for char in s: result ^= ord(char) for char in t: result ^= ord(char) return chr(result)"},{"question":"You are tasked with building and managing a Binary Search Tree (BST). Specifically, you will implement a function that allows for inserting new values into the BST, another function to search for a value, and a final function to delete a value. # Function Requirements 1. **Function Name**: `insert` * **Input**: The root of the BST (`TreeNode`), an integer value `val`. * **Output**: The root of the BST after insertion. * **Description**: Insert `val` into the BST. If the value already exists, do not insert it. 2. **Function Name**: `search` * **Input**: The root of the BST (`TreeNode`), an integer value `val`. * **Output**: A boolean indicating whether `val` is present in the BST. * **Performance Requirement**: Must perform in O(log n) on average. 3. **Function Name**: `delete` * **Input**: The root of the BST (`TreeNode`), an integer value `val`. * **Output**: The root of the BST after deletion. * **Description**: Remove `val` from the BST if it exists. # Constraints * All values in the BST are integers. * Do not use any libraries that directly implement BST functionality. # Example Consider the following series of operations on an initially empty BST: ```python root = None root = insert(root, 5) root = insert(root, 3) root = insert(root, 7) print(search(root, 3)) # Output: True root = delete(root, 3) print(search(root, 3)) # Output: False ``` # Notes * Assume you have the definition of the `TreeNode` class as provided. * Ensure your implementation efficiently handles typical BST operations, including maintaining the BST property after insertions and deletions.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insert(root, key): if root is None: return TreeNode(key) if key < root.val: root.left = insert(root.left, key) elif key > root.val: root.right = insert(root.right, key) return root def search(root, key): if root is None or root.val == key: return root is not None if key < root.val: return search(root.left, key) return search(root.right, key) def delete(root, key): if root is None: return root if key < root.val: root.left = delete(root.left, key) elif key > root.val: root.right = delete(root.right, key) else: if root.left is None: return root.right elif root.right is None: return root.left temp_val = minValueNode(root.right).val root.val = temp_val root.right = delete(root.right, temp_val) return root def minValueNode(node): current = node while current.left is not None: current = current.left return current"},{"question":"Given a base integer `a`, an exponent integer `b`, and a modulo integer `m`, write a function to compute ((a^b) % m) efficiently using the principles of modular arithmetic. Your function should be efficient even for large values of `b` and `a`. Consider the constraints provided. # Function Signature ```python def modular_exponential(base: int, exponent: int, mod: int) -> int: # Your code here ``` # Input * `base` (1 ≤ |base| ≤ 10^9): The base integer. * `exponent` (0 ≤ exponent ≤ 10^9): The exponent integer. * `mod` (2 ≤ mod ≤ 10^9): The modulo integer. # Output * Return the result of ((base^exponent) % mod). # Constraints * If `exponent` is zero, your function should return `1` regardless of `base` and `mod`. * The function should handle very large integers accurately and efficiently. * It should raise a ValueError if `mod` is less than 2 or if `exponent` is negative. # Example ```python assert modular_exponential(3, 4, 5) == 1 assert modular_exponential(2, 10, 7) == 2 assert modular_exponential(7, 256, 13) == 9 ``` # Notes * Ensure the function handles edge cases where the base or mod could be at their minimum or maximum values within the constraint bounds. * Educate students to consider optimal performance by using the properties of exponential and modular arithmetic effectively.","solution":"def modular_exponential(base: int, exponent: int, mod: int) -> int: Returns (base**exponent) % mod using an efficient modular exponentiation algorithm. if mod < 2: raise ValueError(\\"mod must be at least 2\\") if exponent < 0: raise ValueError(\\"exponent must be non-negative\\") result = 1 base = base % mod while exponent > 0: if exponent % 2 == 1: result = (result * base) % mod exponent = exponent >> 1 base = (base * base) % mod return result"},{"question":"You are tasked with writing a function `is_palindrome` to determine if a given string is a palindrome. A palindrome is a string that reads the same forward and backward, ignoring spaces, punctuation, and letter casing. # Requirements 1. Implement three versions of the `is_palindrome` function: - Using a recursive approach. - Using an iterative approach. - Using Pythonic methods. 2. Each function `is_palindrome` should accept a single string `s` and return a boolean indicating whether the string is a palindrome or not. 3. Ensure you handle edge cases such as empty strings and strings with only spaces or punctuation. # Input and Output Format - **Input**: A string `s` (0 <= len(s) <= 10^6) which may contain letters, numbers, punctuation, and whitespace. - **Output**: A boolean value `True` if `s` is a palindrome, `False` otherwise. # Constraints - Ignore non-alphanumeric characters and case differences while checking for a palindrome. # Examples ```python assert is_palindrome_recursive(\\"A man, a plan, a canal, Panama\\") == True assert is_palindrome_iterative(\\"No lemon, no melon\\") == True assert is_palindrome_pythonic(\\"This is not a palindrome\\") == False ``` # Function Signature ```python def is_palindrome_recursive(s: str) -> bool: # Your code here def is_palindrome_iterative(s: str) -> bool: # Your code here def is_palindrome_pythonic(s: str) -> bool: # Your code here ```","solution":"def is_palindrome_recursive(s: str) -> bool: cleaned_s = \'\'.join(char.lower() for char in s if char.isalnum()) def helper(sub_s): if len(sub_s) <= 1: return True if sub_s[0] != sub_s[-1]: return False return helper(sub_s[1:-1]) return helper(cleaned_s) def is_palindrome_iterative(s: str) -> bool: cleaned_s = \'\'.join(char.lower() for char in s if char.isalnum()) left, right = 0, len(cleaned_s) - 1 while left < right: if cleaned_s[left] != cleaned_s[right]: return False left += 1 right -= 1 return True def is_palindrome_pythonic(s: str) -> bool: cleaned_s = \'\'.join(char.lower() for char in s if char.isalnum()) return cleaned_s == cleaned_s[::-1]"},{"question":"# Problem: Validate Sorted Linked List **Scenario**: You are a software engineer responsible for data integrity in a financial system. One of your tasks is to ensure data stored in linked lists remains sorted to be processed correctly by various algorithms later on. **Objective**: Write a function `is_sorted(head)` to determine whether a singly linked list is sorted in non-decreasing order. **Function Signature**: ```python def is_sorted(head: Node) -> bool: ``` Input: - **head**: The head node of a singly linked list where each node contains an integer value. Output: - **bool**: Return `True` if the linked list is sorted in non-decreasing order; otherwise, return `False`. Constraints: - Assumption: Linked list nodes contain integers. - The linked list can be empty, and an empty list is considered sorted. Example: ```python class Node: def __init__(self, val=0, next=None): self.val = val self.next = next # Example 1: # linked list: 1 -> 2 -> 3 -> 4 # Output: True head = Node(1, Node(2, Node(3, Node(4)))) print(is_sorted(head)) # Expected output: True # Example 2: # linked list: 1 -> 2 -> -1 -> 3 # Output: False head = Node(1, Node(2, Node(-1, Node(3)))) print(is_sorted(head)) # Expected output: False # Example 3: # linked list: None # Output: True head = None print(is_sorted(head)) # Expected output: True # Example 4: # linked list: 5 # Output: True head = Node(5) print(is_sorted(head)) # Expected output: True ``` Notes: - Do not modify the linked list during the check. - Ensure your solution handles edge cases, such as an empty list or lists with a single element. - Aim for a time complexity of O(n) and space complexity of O(1).","solution":"class Node: def __init__(self, val=0, next=None): self.val = val self.next = next def is_sorted(head: Node) -> bool: if not head: return True current = head while current.next: if current.val > current.next.val: return False current = current.next return True"},{"question":"Scenario: You are developing a machine learning application that frequently needs to compute the dot product of very large and sparse vectors. Given the sparsity, it is inefficient to store and process these vectors in their full form. Instead, you will use a data structure that stores only the non-zero elements along with their indices. Task: 1. Implement a function `vector_to_index_value_list` that converts a dense vector (list of floating-point numbers) into a list of (index, value) pairs, excluding elements where the value is 0.0. 2. Implement a function `dot_product` that computes the dot product of two lists of (index, value) pairs. 3. Handle edge cases where vectors have different lengths or are fully zero efficiently. Function Signatures: ```python def vector_to_index_value_list(vector: List[float]) -> List[Tuple[int, float]]: pass def dot_product(iv_list1: List[Tuple[int, float]], iv_list2: List[Tuple[int, float]]) -> float: pass ``` Input and Output: 1. `vector_to_index_value_list(vector)`: - **Input**: A list of floating-point numbers representing a dense vector. - **Output**: A list of tuples containing indices and values of non-zero elements. 2. `dot_product(iv_list1, iv_list2)`: - **Input**: Two lists of tuples, where each tuple contains an index and a non-zero value. - **Output**: A single floating-point number representing the dot product. Examples: 1. `vector_to_index_value_list([1.0, 0.0, 3.0])` should return `[(0, 1.0), (2, 3.0)]`. 2. Given `iv_list1 = [(0, 1.0), (2, 2.0)]` and `iv_list2 = [(1, 2.0), (2, 3.0)]`, `dot_product(iv_list1, iv_list2)` should return `6.0` (since 0*2 + 2*3 = 6). Constraints: - You may assume vector lengths do not exceed (10^5). - Consider performance requirements as the vectors are sparse but can be very large. Notes: - Pay special attention to the efficiency of your solution. - Test your solution with edge cases like empty vectors, vectors with all zeroes, and varying vector lengths.","solution":"from typing import List, Tuple def vector_to_index_value_list(vector: List[float]) -> List[Tuple[int, float]]: Converts a dense vector into a list of (index, value) pairs, excluding zero-value elements. return [(i, v) for i, v in enumerate(vector) if v != 0.0] def dot_product(iv_list1: List[Tuple[int, float]], iv_list2: List[Tuple[int, float]]) -> float: Computes the dot product of two lists of (index, value) pairs. i, j = 0, 0 result = 0.0 while i < len(iv_list1) and j < len(iv_list2): index1, value1 = iv_list1[i] index2, value2 = iv_list2[j] if index1 == index2: result += value1 * value2 i += 1 j += 1 elif index1 < index2: i += 1 else: j += 1 return result"},{"question":"# Scenario You are developing a text editor that needs to implement an efficient search functionality. Given a large volume of text, you need to find all occurrences of a specific pattern within this text to highlight and manipulate them appropriately. # Task Your task is to implement the Knuth-Morris-Pratt (KMP) string-search algorithm to achieve this efficiently. # Function Specification **Function Name**: `knuth_morris_pratt` **Parameters**: ```python def knuth_morris_pratt(text: Sequence, pattern: Sequence) -> List[int]: ``` - `text`: A sequence (string) in which the search will be performed. - `pattern`: A sequence (string) of the pattern to search for. **Returns**: - A list of starting indices where the pattern is found within the text. The list should be empty if no matches are found. # Constraints 1. The text can have a length ranging from 0 to (10^6). 2. The pattern can have a length ranging from 0 to (10^5). 3. Both text and pattern will contain only printable ASCII characters. 4. You should handle cases where the pattern is empty by returning an empty list. # Performance Requirements - The solution should have a time complexity of O(N + M) and a space complexity of O(M) where N is the length of the text and M is the length of the pattern. # Example ```python assert knuth_morris_pratt(\'hello there hero!\', \'he\') == [0, 7, 12] assert knuth_morris_pratt(\'abcabcabc\', \'abc\') == [0, 3, 6] assert knuth_morris_pratt(\'aaaaa\', \'b\') == [] assert knuth_morris_pratt(\'\', \'pattern\') == [] assert knuth_morris_pratt(\'some large text\', \'\') == [] ``` Implement the function `knuth_morris_pratt` to meet the above specifications.","solution":"from typing import List, Sequence def knuth_morris_pratt(text: Sequence, pattern: Sequence) -> List[int]: if not pattern: return [] # Build the LPS (longest prefix which is also suffix) array for the pattern def build_lps(pattern): lps = [0] * len(pattern) length = 0 i = 1 while i < len(pattern): if pattern[i] == pattern[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps lps = build_lps(pattern) result = [] i = 0 # index for text j = 0 # index for pattern while i < len(text): if text[i] == pattern[j]: i += 1 j += 1 if j == len(pattern): result.append(i - j) j = lps[j - 1] elif i < len(text) and text[i] != pattern[j]: if j != 0: j = lps[j - 1] else: i += 1 return result"},{"question":"# Question: Counting Number of Digits of an Integer You are given an integer `n`. Your task is to implement a function `num_digits` to count the number of decimal digits in this integer. The function should have the following signature: ```python def num_digits(n: int) -> int: pass ``` # Input - `n` (int): An integer which can be negative, zero, or positive. # Output - Return an integer representing the number of decimal digits in `n`. # Constraints - ( -10^{18} leq n leq 10^{18} ) # Examples 1. `num_digits(12345)` should return `5`. 2. `num_digits(-67890)` should return `5`. 3. `num_digits(0)` should return `1`. # Notes - For negative numbers, consider the number of digits without the negative sign. - You should handle the edge case where `n = 0`, ensuring it correctly returns `1`. Implement the function ensuring it works efficiently within the given constraints.","solution":"def num_digits(n: int) -> int: Returns the number of decimal digits in the integer n. return len(str(abs(n)))"},{"question":"# Context You are a cryptographer analyzing historical cipher techniques. Your goal is to implement a classical substitution cipher: the Atbash cipher. This cipher is a simple encryption method used to encode or decode strings by reversing the position of each letter in the alphabet. # Task Write a function `atbash_cipher` that takes a string `s` and applies the Atbash cipher to it. The function must preserve the case of the letters, and non-alphabetic characters should remain unchanged. # Function Signature ```python def atbash_cipher(s: str) -> str: pass ``` # Input * `s`: A string containing the text to be encoded or decoded (0 <= len(s) <= 1000). # Output * A string that represents the encoded or decoded text using the Atbash cipher. # Constraints * The input string may contain uppercase letters, lowercase letters, and non-alphabetic characters. # Example ```python print(atbash_cipher(\\"Attack at dawn\\")) # Output: \\"Zggzxp zg wzdm\\" print(atbash_cipher(\\"Hello, World!\\")) # Output: \\"Svool, Dliow!\\" print(atbash_cipher(\\"1234\\")) # Output: \\"1234\\" print(atbash_cipher(\\"\\")) # Output: \\"\\" ``` # Notes * Ensure your implementation efficiently handles the transformation. * Consider edge cases such as empty strings or strings with no alphabetic characters.","solution":"def atbash_cipher(s: str) -> str: Applies the Atbash cipher to the input string `s`. result = [] for char in s: if char.isalpha(): if char.islower(): result.append(chr(219 - ord(char))) # \'a\' + \'z\' = 219 elif char.isupper(): result.append(chr(155 - ord(char))) # \'A\' + \'Z\' = 155 else: result.append(char) return \'\'.join(result)"},{"question":"# Question: Find the nth Digit in the Infinite Sequence of Integers Context Given an infinite sequence formed by concatenating all positive integers together (1, 2, 3, 4, 5, ..., 10, 11, 12, ...), your task is to find the nth digit within this new sequence. Function Signature ```python def find_nth_digit(n: int) -> int: Given a positive integer n, return the nth digit in the concatenated sequence of positive integers. ``` Input * An integer `n` (1 <= n <= 2^31 - 1). Output * An integer representing the nth digit in the concatenated sequence of all positive integers. Constraints - You must handle very large values of n efficiently. - Implement your solution with a time complexity better than O(n). Examples ```python print(find_nth_digit(3)) # Output: 3 print(find_nth_digit(11)) # Output: 0 print(find_nth_digit(12)) # Output: 1 ``` Detailed Explanation - If n = 3, the sequence is \\"123\\", so the 3rd digit is `3`. - If n = 11, the sequence up to the 11th digit is \\"12345678910\\", so the 11th digit is `0`. - If n = 12, continuing from the previous example, the sequence becomes \\"1234567891011\\", making the 12th digit `1`. Notes - The sequence continues indefinitely, so ensure your solution handles large inputs efficiently. - Think about the range in which the nth digit might fall (single digits: 1-9, double digits: 10-99, etc.). - Make sure to account for transitions between these ranges to pinpoint the correct digit.","solution":"def find_nth_digit(n: int) -> int: Given a positive integer n, return the nth digit in the concatenated sequence of positive integers. # Step 1: Determine the length of the digits (1-digit, 2-digits, 3-digits, etc.) length = 1 count = 9 start = 1 while n > length * count: n -= length * count length += 1 count *= 10 start *= 10 # Step 2: Find the exact number that contains the nth digit start += (n - 1) // length # Step 3: Find the exact digit in that number s = str(start) return int(s[(n - 1) % length])"},{"question":"# Tree Balance Check You are asked to implement a function to determine if a given binary tree is balanced. A balanced binary tree is defined as a tree in which the depth of the two subtrees of every node never differ by more than 1. Implement the function `is_balanced` such that it checks whether a binary tree is balanced. You are required to use a helper function that computes the depth of each subtree and also ensures the balance property. Input * A binary tree node, `root`, which can be `None` (an empty tree) or contain left and right child nodes. Output * Return `True` if the tree is balanced, otherwise return `False`. # Constraints * The tree will have at most (10^4) nodes. # Function Signature ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_balanced(root: TreeNode) -> bool: ``` # Example ```python root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) root.left.left.left = TreeNode(8) print(is_balanced(root)) # Output: False ``` *Consider the tree in the example - The maximum depth of the left subtree is 4 and the right subtree is 1, which differs by more than 1, making it unbalanced.* Implementation Requirements - You must utilize a recursive helper function to calculate the depth and balance status of subtrees. - Ensure your solution has O(N) time complexity and O(h) space complexity, where h is the height of the tree.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_balanced(root: TreeNode) -> bool: Determine if the binary tree rooted at `root` is balanced. A balanced binary tree is defined as a tree in which the depth of the two subtrees of every node never differ by more than 1. def check_balance_and_depth(node: TreeNode): if not node: return True, 0 left_balanced, left_depth = check_balance_and_depth(node.left) right_balanced, right_depth = check_balance_and_depth(node.right) current_balanced = left_balanced and right_balanced and abs(left_depth - right_depth) <= 1 current_depth = 1 + max(left_depth, right_depth) return current_balanced, current_depth balanced, _ = check_balance_and_depth(root) return balanced"},{"question":"# Coding Challenge **Objective**: Implement an efficient function to compute the mode(s) of a given array. # Scenario/Context You have been hired by a company to analyze a dataset of customer responses, where you need to identify the most common feedback ratings. To do so, you need to identify the mode(s) in an array of integers denoting the feedback ratings. # Task Write a function `find_modes` that takes an array of integers `arr` and returns a list of the mode(s). If multiple integers have the highest frequency of appearance in the array, include all such integers in the result. # Input - An array of integers `arr` (0 <= len(arr) <= 10^6, -10^9 <= arr[i] <= 10^9). # Output - A list of integers representing the mode(s) of the array. # Constraints - If the input array is empty, the function should return an empty list. - The function should run in O(n) time complexity. # Examples Example 1: ```python find_modes([1, 1, 2, 2, 3, 4]) # Returns: [1, 2] ``` Example 2: ```python find_modes([5, 3, 5, 3, 3, 5, 4]) # Returns: [3, 5] ``` Example 3: ```python find_modes([]) # Returns: [] ``` # Function Signature ```python def find_modes(arr: list[int]) -> list[int]: # To be implemented ``` **Note**: Ensure your implementation handles the given constraints and edge cases efficiently.","solution":"from collections import defaultdict def find_modes(arr): Returns the mode(s) of the given array of integers. If the array is empty, it returns an empty list. If multiple integers have the same highest frequency, returns all such integers. if not arr: return [] # Dictionary to store the frequency of each element frequency_dict = defaultdict(int) # Find the frequencies of each element in the array for num in arr: frequency_dict[num] += 1 # Determine the highest frequency max_frequency = max(frequency_dict.values()) # Return the list of elements with the highest frequency modes = [num for num, freq in frequency_dict.items() if freq == max_frequency] return modes"},{"question":"Question: Decode Ways Given an encoded message containing digits from \'0\' to \'9\', return the total number of ways to decode it. Each digit or pair of digits can be mapped to a letter from \'A\' to \'Z\' using the mapping \'1\' -> \'A\', \'2\' -> \'B\', ..., \'26\' -> \'Z\'. An encoded message is valid if: - Each mapped digit or pair of digits forms a valid letter mapping. - The message does not start with \'0\', as \'0\' cannot be mapped to any letter. You need to implement a function `numWaysToDecode(s: str) -> int` that accepts an encoded message string `s` and returns the total number of possible ways it can be decoded. # Input: - `s` (string): A string containing only digits, representing the encoded message. # Output: - (int): The number of valid ways to decode the given encoded message. # Constraints: - 1 <= len(s) <= 1000 - `s` will only contain digits and will not be empty. # Example: ```python print(numWaysToDecode(\\"12\\")) # Output: 2 print(numWaysToDecode(\\"226\\")) # Output: 3 print(numWaysToDecode(\\"0\\")) # Output: 0 print(numWaysToDecode(\\"10\\")) # Output: 1 ``` # Note: - For the input \\"12\\", it could be decoded as \\"AB\\" (1 2) or \\"L\\" (12). Therefore, the total number of ways is 2. - For the input \\"226\\", it could be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6). Therefore, the total number of ways is 3. # Performance Requirements: - Your solution should run in O(n) time where `n` is the length of the string. - Optimize your approach to use O(1) space if possible for better performance. Implement the function `numWaysToDecode`.","solution":"def numWaysToDecode(s: str) -> int: if not s or s[0] == \'0\': return 0 # DP array to store the number of ways to decode up to each digit n = len(s) dp = [0] * (n + 1) # There\'s one way to decode an empty string dp[0] = 1 # There\'s one way to decode a non-\'0\' starting single character dp[1] = 1 if s[0] != \'0\' else 0 for i in range(2, n + 1): # Single digit decode is possible if s[i-1] is not \'0\' if s[i-1] != \'0\': dp[i] += dp[i-1] # Two digit decode is possible if the number formed by s[i-2] and s[i-1] is between 10 and 26 two_digit = int(s[i-2:i]) if 10 <= two_digit <= 26: dp[i] += dp[i-2] return dp[n]"},{"question":"Coding Assessment Question # Scenario You\'re tasked with implementing a feature for a library system that helps users locate books based on sorted unique first letter of book titles. Given a sorted list of unique lowercase characters representing the first letters of book titles, and a target letter, you need to find the smallest letter in the list that is larger than the given target. If such a letter doesn\'t exist, the search should wrap around to the beginning of the list. # Objectives Write a function that implements this feature using binary search to ensure it performs efficiently with large lists of data. # Function Signature ```python def find_next_greatest_letter(letters: List[str], target: str) -> str: Find the smallest letter in the sorted list that is larger than target. If such a letter doesn\'t exist, wrap around to beginning of the list. :param letters: List of sorted unique lowercase characters :param target: A single lowercase character :return: The smallest character that is greater than the target pass ``` # Input - `letters`: A list of sorted unique lowercase characters, `letters[i]` is guaranteed to be in [\'a\', \'z\']. (`1 ≤ len(letters) ≤ 10^4`) - `target`: A single lowercase character. # Output - Return the smallest character in `letters` that is greater than `target`. # Constraints - All characters in `letters` are strictly lowercase and sorted in ascending order. - `letters` does not contain duplicate characters. # Performance Requirements - The function should have a time complexity of (O(log N)). # Example ```python # Example 1: letters = [\\"c\\", \\"f\\", \\"j\\"] target = \\"a\\" # Output: \\"c\\" # Example 2: letters = [\\"c\\", \\"f\\", \\"j\\"] target = \\"c\\" # Output: \\"f\\" # Example 3: letters = [\\"c\\", \\"f\\", \\"j\\"] target = \\"d\\" # Output: \\"f\\" # Example 4: letters = [\\"a\\", \\"b\\", \\"c\\"] target = \\"z\\" # Output: \\"a\\" ``` # Note - Ensure that you correctly handle wrap-arounds if the target letter is greater than or equal to the largest letter in the list. - Avoid using linear search as it does not meet the performance requirements.","solution":"from typing import List def find_next_greatest_letter(letters: List[str], target: str) -> str: Find the smallest letter in the sorted list that is larger than the target. If such a letter doesn\'t exist, wrap around to the beginning of the list. :param letters: List of sorted unique lowercase characters :param target: A single lowercase character :return: The smallest character that is greater than the target left, right = 0, len(letters) - 1 if target >= letters[right]: return letters[0] while left < right: mid = (left + right) // 2 if letters[mid] > target: right = mid else: left = mid + 1 return letters[left]"},{"question":"# Directed Graph Algorithms You have been provided with a `DirectedGraph` class capable of representing a basic directed graph structure, including nodes and directed edges. However, the graph lacks some fundamental graph algorithms. # Task: Write a Python function `has_cycle(graph)` that determines if the given directed graph contains any cycles. Your function should return `True` if there are cycles, and `False` otherwise. # Specification: * **Input Format**: A `DirectedGraph` object `graph`. * **Output Format**: A boolean value - `True` if the graph has any cycles, `False` otherwise. * **Constraints**: - The graph can have any number of nodes and edges, including zero. - The graph can be disconnected; only the parts containing cycles matter. - There can be multiple edges and self-loops in the graph. # Example: ```python # Create a sample graph with a cycle graph_data = { \'A\': [\'B\'], \'B\': [\'C\'], \'C\': [\'D\'], \'D\': [\'B\'], # Cycle here \'E\': [\'F\'], \'F\': [] } graph = DirectedGraph(graph_data) print(has_cycle(graph)) # Output: True # Create a sample graph without any cycle graph_data = { \'A\': [\'B\'], \'B\': [\'C\'], \'C\': [\'D\'], \'E\': [\'F\'] } graph = DirectedGraph(graph_data) print(has_cycle(graph)) # Output: False ``` # Hints: Utilize Depth First Search (DFS) to traverse the graph and detect cycles. Maintain visited sets to track active nodes in DFS. # Expected Performance: Given the graph\'s potential size (n nodes and e edges): - **Time Complexity**: O(n + e), since each node and edge is processed once. - **Space Complexity**: O(n), due to visit tracking.","solution":"class DirectedGraph: def __init__(self, graph_data): Initialize the directed graph using a dictionary. :param graph_data: Dictionary representing the graph where keys are nodes and values are lists of neighbors. self.graph = graph_data def has_cycle(graph): Determines if the directed graph contains any cycles. :param graph: DirectedGraph object. :return: True if the graph has cycles, False otherwise. def dfs(node, visited, rec_stack): Depth First Search to detect a cycle. :param node: Current node. :param visited: Set of visited nodes. :param rec_stack: Stack to keep track of recursion. :return: True if a cycle is detected, False otherwise. if node not in visited: visited.add(node) rec_stack.add(node) for neighbor in graph.graph.get(node, []): if neighbor not in visited and dfs(neighbor, visited, rec_stack): return True elif neighbor in rec_stack: return True rec_stack.remove(node) return False visited = set() rec_stack = set() for node in graph.graph: if node not in visited: if dfs(node, visited, rec_stack): return True return False"},{"question":"You are provided with two strings `s` and `t`, where `t` is generated by randomly shuffling the string `s` and then adding one additional character at a random position. You need to implement a function to find the additional character introduced in `t`. # Function Signature ```python def find_difference(s: str, t: str) -> str: pass ``` # Input - `s`: A string consisting of only lowercase letters (1 ≤ len(s) ≤ 10^5). - `t`: A string generated by shuffling `s` and adding one more lowercase letter. # Output - Return the additional character that was added to `t`. # Constraints - Both strings contain only lowercase letters. - The length of `t` is exactly `len(s) + 1`. # Example Example 1 ```python s = \\"abcd\\" t = \\"abecd\\" Output: \'e\' ``` # Explanation In the example, after shuffling `s` and adding the character \'e\', we get `t`. By XORing all characters of both strings, all matching characters cancel out, leaving the added character. # Notes - Use bit manipulation (specifically XOR) to solve this problem efficiently. - Ensure your solution runs in linear time with constant space complexity.","solution":"def find_difference(s: str, t: str) -> str: Find the additional character introduced in `t` compared to `s`. Args: s (str): Original string t (str): Modified string with one extra character Returns: str: The additional character in `t` result = 0 for char in s + t: result ^= ord(char) return chr(result)"},{"question":"# Scenario You are working as a software engineer at a company that specializes in large-scale network analysis. One of your tasks is to determine if the given communication networks can be considered bipartite. Bipartite networks are significant in your analysis as they simplify many algorithms and aid in effective data segmentation. # Problem Statement Write a function `is_bipartite_graph(adj_matrix: List[List[int]]) -> bool` that determines if a given undirected graph represented as an adjacency matrix is bipartite. An undirected graph is bipartite if its vertices can be divided into two disjoint sets such that no two graph vertices within the same set are adjacent. # Function Signature ```python from typing import List def is_bipartite_graph(adj_matrix: List[List[int]]) -> bool: pass ``` # Input * `adj_matrix`: A square matrix of size `n x n` where `n` is the number of vertices in the graph. `adj_matrix[i][j] = 1` if there is an edge between vertices `i` and `j`, and `adj_matrix[i][j] = 0`. # Output * Return `True` if the graph is bipartite, `False` otherwise. # Example ```python adj_matrix = [ [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0] ] assert is_bipartite_graph(adj_matrix) == True adj_matrix = [ [0, 1, 1, 0], [1, 0, 1, 0], [1, 1, 0, 1], [0, 0, 1, 0] ] assert is_bipartite_graph(adj_matrix) == False ``` # Constraints * The number of vertices `1 <= n <= 100` * The adjacency matrix will be symmetric and contains only 0s and 1s. # Performance Requirements * The solution should have a time complexity of O(|E|) and space complexity of O(|V|).","solution":"from typing import List from collections import deque def is_bipartite_graph(adj_matrix: List[List[int]]) -> bool: n = len(adj_matrix) color = [-1] * n for start in range(n): if color[start] == -1: queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in range(n): if adj_matrix[node][neighbor] == 1: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True"},{"question":"# Scenario You are hired by a data analysis firm to implement a function that frequently needs to determine the most common (mode) values in given datasets. Your task is to write a function that receives an array of integers and returns the mode(s). # Task Implement a function `find_mode(arr)` which takes an array of integers `arr` and returns a list of the mode(s). The mode is defined as the number(s) that appear most frequently in the dataset. # Input - An array `arr` of integers, which may be empty. # Output - A list of integer(s) representing the mode(s). # Constraints - The array may contain negative integers. - If the input array is empty, the function should return an empty list. - The solution should handle large arrays efficiently. # Examples 1. `find_mode([1, 2, 2, 3, 3])` should return `[2, 3]` 2. `find_mode([4, 4, 4, 1, 2, 2, 3])` should return `[4]` 3. `find_mode([])` should return `[]` 4. `find_mode([100])` should return `[100]` # Performance Requirements The implementation should have a time complexity of O(n) and a space complexity of O(n).","solution":"from collections import Counter def find_mode(arr): Returns a list of the mode(s) of the given array. If the input array is empty, returns an empty list. if not arr: return [] count = Counter(arr) max_count = max(count.values()) modes = [num for num, freq in count.items() if freq == max_count] return modes"},{"question":"You are given a large dataset where you need to perform frequent range queries and updates efficiently. To optimize these operations, you decide to use a Segment Tree. Implement a `SegmentTree` class in Python that supports sum queries and point updates. # Requirements: 1. **Class Name**: `SegmentTree` 2. **Constructor**: `__init__(self, arr, function)` * `arr`: List of integers/floats * `function`: A commutative function passed as a parameter (e.g., `max`, a lambda for summation, etc.) 3. **Methods**: - `build_tree(self)`: Constructs the initial segment tree from the given array - `update(self, p, v)`: Updates element at index `p` to value `v` - `query(self, l, r)`: Returns the result of the function applied on the subarray from index `l` to `r` # Constraints: - Array length (`n`) is up to (10^5) - Elements of the array are integers or floating-point numbers - Queries and updates are both operations performed multiple times (up to (10^5) times) # Example: ```python # Example segment tree with sum operation arr = [4, 5, 2, 3, 4, 43, 3] seg_tree = SegmentTree(arr, lambda a, b: a + b) # Query the sum from index 0 to 6 print(seg_tree.query(0, 6)) # Output: sum of all elements # Update index 2 to -10 seg_tree.update(2, -10) # Query again after update print(seg_tree.query(0, 6)) # Output: updated sum ``` # Note: You are expected to handle edge cases like single-element arrays, queries that span the whole array, and ensuring the segment function is commutative. Implement the required `SegmentTree` class and its methods in Python.","solution":"class SegmentTree: def __init__(self, arr, function): self.arr = arr self.function = function self.n = len(arr) self.tree = [0] * (2 * self.n) self.build_tree() def build_tree(self): for i in range(self.n): self.tree[self.n + i] = self.arr[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.function(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, p, v): p += self.n self.tree[p] = v while p > 1: p //= 2 self.tree[p] = self.function(self.tree[2 * p], self.tree[2 * p + 1]) def query(self, l, r): l += self.n r += self.n + 1 res = None while l < r: if l % 2: res = self.tree[l] if res is None else self.function(res, self.tree[l]) l += 1 if r % 2: r -= 1 res = self.tree[r] if res is None else self.function(res, self.tree[r]) l //= 2 r //= 2 return res"},{"question":"# Compare Two Binary Trees for Equality Problem Statement You are given two binary trees. Write a function `are_trees_equal(tree1, tree2)` to check if the two trees are equal. Two binary trees are considered equal if they are structurally identical and the nodes have the same value. You should use a depth-first search approach but consider iterating to avoid deep recursion stack issues. Your function should return a boolean value indicating whether the trees are equal or not. Input: * `tree1`, `tree2`: The root nodes of two binary trees. Each tree node has the following structure: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Output: * A boolean value: `True` if the trees are equal, `False` otherwise. Constraints: * The number of nodes in the trees is in the range `[0, 10^4]`. * Node values are integers in the range `[-10^4, 10^4]`. Example: ```python # Tree 1 # 1 # / # 2 3 # Tree 2 # 1 # / # 2 3 tree1 = TreeNode(1, TreeNode(2), TreeNode(3)) tree2 = TreeNode(1, TreeNode(2), TreeNode(3)) assert are_trees_equal(tree1, tree2) == True # Tree 3 # 1 # / # 2 1 tree3 = TreeNode(1, TreeNode(2), TreeNode(1)) assert are_trees_equal(tree1, tree3) == False ``` Implementation Notes: * Provide an iterative implementation to avoid deep recursion. * Consider edge cases where one or both of the trees are `None`. * Optimize for both time complexity and space complexity to handle up to 10^4 nodes efficiently.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def are_trees_equal(tree1, tree2): Check if the two binary trees are equal. if not tree1 and not tree2: return True if not tree1 or not tree2: return False stack1 = [tree1] stack2 = [tree2] while stack1 and stack2: node1 = stack1.pop() node2 = stack2.pop() if node1.val != node2.val: return False if node1.right and node2.right: stack1.append(node1.right) stack2.append(node2.right) elif node1.right or node2.right: return False if node1.left and node2.left: stack1.append(node1.left) stack2.append(node2.left) elif node1.left or node2.left: return False return len(stack1) == 0 and len(stack2) == 0"},{"question":"# Summary of Ranges in a Sorted Array Given a sorted integer array without duplicates, write a function that returns the summary of its contiguous ranges. Each range should be represented as a string, where contiguous sequences are expressed as \\"start-end\\" and individual numbers are represented as \\"start\\". # Input - A list of integers `array` with 0 <= len(array) <= 10^4. # Output - A list of strings summarizing the contiguous ranges found in the array. # Example ```python summarize_ranges([0, 1, 2, 4, 5, 7]) # Output: [\\"0-2\\", \\"4-5\\", \\"7\\"] summarize_ranges([0, 2, 3, 4, 6, 8, 9]) # Output: [\\"0\\", \\"2-4\\", \\"6\\", \\"8-9\\"] summarize_ranges([0]) # Output: [\\"0\\"] ``` # Constraints - The input array must be sorted and contain no duplicates. - The function must run in linear O(n) time. # Implementation Notes - Iterating through the array, maintain pointers for the start and end of the current range. - When a gap is found, record the current range and reset pointers. - Ensure the function handles arrays with fewer than two elements correctly. Here\'s a starting point for your implementation: ```python from typing import List def summarize_ranges(array: List[int]) -> List[str]: # Your implementation here pass ``` Make sure to test your implementation with various edge cases and large inputs to validate performance and correctness.","solution":"from typing import List def summarize_ranges(array: List[int]) -> List[str]: if not array: return [] ranges = [] start = array[0] end = array[0] for num in array[1:]: if num == end + 1: end = num else: if start == end: ranges.append(f\\"{start}\\") else: ranges.append(f\\"{start}-{end}\\") start = num end = num if start == end: ranges.append(f\\"{start}\\") else: ranges.append(f\\"{start}-{end}\\") return ranges"},{"question":"# Question You are tasked with writing a function that computes the inverse Fast Fourier Transform (IFFT) of a given list of complex numbers using the Cooley-Tukey algorithm. The Inverse FFT is used to convert a signal from its frequency domain representation back to the time domain. Requirements: * Your function must take a list of `complex` numbers of size N (N must be a power of 2). * Your function should return a list of `complex` numbers representing the inverse FFT of the input. # Expected Input and Output * **Input**: A list of `complex` numbers with length N, where N is a power of 2. * **Output**: A list of `complex` numbers which is the inverse FFT of the input. # Constraints * The length of the input list should be a power of 2, i.e., 2^k for some non-negative integer k. * The function should use recursion. * You must not use any external libraries for FFT/IFFT apart from the `cmath` library for complex number operations. # Example Input ```python [8.0+8.0j, 0.0+2.0j, 2.0-2.0j, -2.0+0.0j] ``` Output ```python [2.0+2.0j, 1.0+3.0j, 3.0+1.0j, 2.0+2.0j] ``` # Scenario Imagine you have captured an audio signal\'s frequency components using FFT and now need to convert it back to the time domain to listen to the original audio. Implement the inverse FFT function to achieve this. # Implementation ```python from cmath import exp, pi def ifft(x): Recursive implementation of the Cooley-Tukey IFFT algorithm. N = len(x) if N <= 1: return x # Conjugate the input x_conj = [xi.conjugate() for xi in x] # Apply FFT to the conjugated input y = fft(x_conj) # Conjugate the result and scale by 1/N y = [yi.conjugate()/N for yi in y] return y def fft(x): Recursive implementation of the Cooley-Tukey FFT algorithm. N = len(x) if N == 1: return x # Split input into even and odd indexed elements even = fft(x[0::2]) odd = fft(x[1::2]) y = [0] * N for k in range(N//2): q = exp(-2j*pi*k/N) * odd[k] y[k] = even[k] + q y[k + N//2] = even[k] - q return y ```","solution":"from cmath import exp, pi def ifft(x): Recursive implementation of the Cooley-Tukey IFFT algorithm. N = len(x) if N == 1: return x # Conjugate the input x_conj = [xi.conjugate() for xi in x] # Apply FFT to the conjugated input y = fft(x_conj) # Conjugate the result and scale by 1/N y = [yi.conjugate() / N for yi in y] return y def fft(x): Recursive implementation of the Cooley-Tukey FFT algorithm. N = len(x) if N == 1: return x # Split input into even and odd indexed elements even = fft(x[0::2]) odd = fft(x[1::2]) y = [0] * N for k in range(N//2): q = exp(-2j * pi * k / N) * odd[k] y[k] = even[k] + q y[k + N//2] = even[k] - q return y"},{"question":"Implement an Efficient Min-Heap Scenario: A logistics company uses a prioritized task management system to handle deliveries. Tasks are assigned priorities based on their urgency; the most urgent tasks are handled first. To manage task priorities efficiently, the company uses a Min-Heap data structure. # Problem Description: You are required to implement a Min-Heap class in Python with the following methods: 1. **insert(value)**: Inserts a new task priority (an integer) into the heap. 2. **remove_min()**: Removes and returns the highest-priority task (the minimum value) from the heap. 3. **min_child(index)**: Returns the index of the smaller of the two children of the element at the given index. 4. **perc_up(index)**: Helper method to maintain the heap property by percolating an element up. 5. **perc_down(index)**: Helper method to maintain the heap property by percolating an element down. Input and Output: - The heap should be represented as a list (array based implementation of a binary heap). Constraints: - You should handle edge cases such as removing the minimum from an empty heap. - The values inserted into the heap will be integers. - The Min-Heap should handle at least up to `10^5` operations efficiently. # Function Signatures: ```python class MinHeap: def __init__(self): Initialize the heap pass def insert(self, value: int): Insert a new integer into the heap pass def remove_min(self) -> int: Remove and return the smallest integer from the heap pass def min_child(self, index: int) -> int: Return the index of the smaller child of the element at the given index pass def perc_up(self, index: int): Percolate the value at the given index up to maintain the heap property pass def perc_down(self, index: int): Percolate the value at the given index down to maintain the heap property pass ``` # Example Usage: ```python heap = MinHeap() heap.insert(10) heap.insert(4) heap.insert(15) print(heap.remove_min()) # Output: 4 heap.insert(2) print(heap.remove_min()) # Output: 2 print(heap.remove_min()) # Output: 10 ``` # Tips: - Make sure to initialize your heap properly and handle edge cases. - Ensure that your `insert` and `remove_min` methods operate within O(log N) time complexity. - Consider using the given methods (`perc_up`, `perc_down`, and `min_child`) to help maintain the heap property after each insertion or deletion.","solution":"class MinHeap: def __init__(self): Initialize the heap self.heap = [0] # The zeroth index is not used, makes integer division straightforward self.current_size = 0 def insert(self, value: int): Insert a new integer into the heap self.heap.append(value) self.current_size += 1 self.perc_up(self.current_size) def remove_min(self) -> int: Remove and return the smallest integer from the heap if self.current_size == 0: return None # or raise an exception if preferred min_val = self.heap[1] self.heap[1] = self.heap[self.current_size] self.heap.pop() self.current_size -= 1 self.perc_down(1) return min_val def min_child(self, index: int) -> int: Return the index of the smaller child of the element at the given index if index * 2 + 1 > self.current_size: return index * 2 # There is only one child else: if self.heap[index * 2] < self.heap[index * 2 + 1]: return index * 2 else: return index * 2 + 1 def perc_up(self, index: int): Percolate the value at the given index up to maintain the heap property while index // 2 > 0: if self.heap[index] < self.heap[index // 2]: self.heap[index], self.heap[index // 2] = self.heap[index // 2], self.heap[index] index = index // 2 def perc_down(self, index: int): Percolate the value at the given index down to maintain the heap property while index * 2 <= self.current_size: min_child_index = self.min_child(index) if self.heap[index] > self.heap[min_child_index]: self.heap[index], self.heap[min_child_index] = self.heap[min_child_index], self.heap[index] index = min_child_index"},{"question":"# Context In computer systems, the order in which bytes are arranged to represent integer data is crucial for compatibility and proper data interpretation. This is known as endianness. A programmer often needs to convert integers into byte arrays and vice versa according to the specific byte order. # Problem Statement Write a function that can convert an integer to a byte array and a byte array back to an integer for both big-endian and little-endian formats. You need to follow the detailed descriptions provided. Function Signatures ```python def int_to_bytes_big_endian(num: int) -> bytes: # Convert integer to byte array in big-endian format. pass def int_to_bytes_little_endian(num: int) -> bytes: # Convert integer to byte array in little-endian format. pass def bytes_big_endian_to_int(bytestr: bytes) -> int: # Convert byte array in big-endian format to integer. pass def bytes_little_endian_to_int(bytestr: bytes) -> int: # Convert byte array in little-endian format to integer. pass ``` # Constraints - The input integer `num` will be a non-negative integer. - The byte array `bytestr` can have any positive length but will represent a valid integer in its respective format. - You cannot use built-in methods that perform these exact conversions. # Example ```python # Convert integer to byte array [Big Endian] assert int_to_bytes_big_endian(258) == b\'x01x02\' # Convert integer to byte array [Little Endian] assert int_to_bytes_little_endian(258) == b\'x02x01\' # Convert byte array to int [Big Endian] assert bytes_big_endian_to_int(b\'x01x02\') == 258 # Convert byte array to int [Little Endian] assert bytes_little_endian_to_int(b\'x02x01\') == 258 ``` # Performance Requirements - Ensure your solution is optimized, targeting a time complexity of O(n) and space complexity of O(n), where n is the length of the byte array.","solution":"def int_to_bytes_big_endian(num: int) -> bytes: Convert an integer to a byte array in big-endian format. if num == 0: return b\'x00\' bytes_list = [] while num > 0: bytes_list.append(num & 0xff) num >>= 8 return bytes(bytearray(reversed(bytes_list))) def int_to_bytes_little_endian(num: int) -> bytes: Convert an integer to a byte array in little-endian format. if num == 0: return b\'x00\' bytes_list = [] while num > 0: bytes_list.append(num & 0xff) num >>= 8 return bytes(bytearray(bytes_list)) def bytes_big_endian_to_int(bytestr: bytes) -> int: Convert a byte array in big-endian format to an integer. result = 0 for byte in bytestr: result = (result << 8) + byte return result def bytes_little_endian_to_int(bytestr: bytes) -> int: Convert a byte array in little-endian format to an integer. result = 0 for idx, byte in enumerate(bytestr): result += byte << (8 * idx) return result"},{"question":"# Question: Implement Enhanced Comb Sort Comb Sort is useful as a simple in-place sorting algorithm, but its average-case performance can be suboptimal. To address this, implement an enhanced version of Comb Sort by integrating a recursive approach to reduce the gap sequence dynamically based on the already sorted sections of the array. This enhancement aims to improve the shrinking process, optimizing overall performance. Specification 1. **Function Name**: `enhanced_comb_sort` 2. **Input**: - An integer array `arr` of size `n`, where `1 <= n <= 10^4` and the elements are integers within the range of `[-10^6, 10^6]`. 3. **Output**: - Return the sorted array. 4. **Constraints**: - Ensure the implementation is in-place. - Aim for improved performance compared to the standard Comb Sort. - Handle all edge cases appropriately. 5. **Performance**: - Attempt to reduce the worst-case performance impact using an efficient gap reduction mechanism. Scenario: Consider a scenario where you have a list of random integers representing various scores in a game, and you need to sort these scores to generate a leaderboard. The given array can be large, so an optimized in-place sorting method would save time and space, providing quicker results. Write a function `enhanced_comb_sort(arr)` that accepts an array of integers and returns a sorted version of the array using the enhanced Comb Sort algorithm. Example: ```python def enhanced_comb_sort(arr): # Your code here # Example Usage: scores = [32, 45, -10, 56, 78, 12, 0, 18, 34, -4] print(enhanced_comb_sort(scores)) # Expected Output: [-10, -4, 0, 12, 18, 32, 34, 45, 56, 78] ```","solution":"def enhanced_comb_sort(arr): Implements an enhanced version of Comb Sort by integrating recursion to optimize the gap reduction process based on already sorted sections of the array. def next_gap(gap): # Using a shrink factor of 1.3 as in the original comb sort new_gap = int(gap / 1.3) if new_gap < 1: return 1 return new_gap def recursive_sort(arr, n, gap): swapped = False for i in range(n - gap): if arr[i] > arr[i + gap]: arr[i], arr[i + gap] = arr[i + gap], arr[i] swapped = True if gap > 1 or swapped: recursive_sort(arr, n, next_gap(gap)) # Start comb sort with the full array and initial gap initial_gap = len(arr) recursive_sort(arr, len(arr), initial_gap) return arr"},{"question":"Finding Special Numbers You are given a positive integer ( n ). Write a program to find all primitive roots of ( n ). Note that not all integers have primitive roots. # Input * A single integer ( n ) (1 ( leq n leq 10^6 )). # Output * A list of integers which are the primitive roots of ( n ). * If no primitive roots exist, output an empty list. # Constraints * Your solution should be efficient to handle the upper limits. # Example Input: ``` 7 ``` Output: ``` [3, 5] ``` Input: ``` 12 ``` Output: ``` [] ``` # Explanation - For ( n = 7 ), the numbers 3 and 5 are primitive roots because their orders are 6, which matches ( phi(7) ). - For ( n = 12 ), there are no numbers which can be primitive roots.","solution":"from math import gcd from sympy import isprime, primefactors from functools import reduce def euler_totient(n): Calculate Euler\'s Totient function φ(n). if n == 1: return 1 factors = set(primefactors(n)) phi = n for p in factors: phi *= (1 - 1/p) return int(phi) def is_primitive_root(g, n, phi): Check if g is a primitive root of n by verifying its order. seen_powers = set() for i in range(1, phi + 1): power = pow(g, i, n) if power in seen_powers: return False if power == 1: return i == phi seen_powers.add(power) return False def find_primitive_roots(n): Find all primitive roots of n. if not isprime(n): return [] phi = euler_totient(n) primitive_roots = [g for g in range(1, n) if gcd(g, n) == 1 and is_primitive_root(g, n, phi)] return primitive_roots"},{"question":"# Task Write a function `last_occurrence` that finds the last occurrence of a target element in a sorted (increasing order) array of integers. # Specifications: - **Input**: * `array` - A list of integers sorted in increasing order. * `query` - An integer that is the target value to find. - **Output**: * Return the index (0-based) of the last occurrence of `query` in `array`. * Return -1 if `query` is not found. # Function Signature: ```python def last_occurrence(array: List[int], query: int) -> int: pass ``` # Constraints: - The input array can be empty (0 ≤ len(array) ≤ 10^6). - The values in the array and the `query` can be any integer within the range of [-10^9, 10^9]. # Examples: ```python assert last_occurrence([1, 2, 2, 2, 3, 4, 5], 2) == 3 assert last_occurrence([1, 3, 3, 5, 7], 3) == 2 assert last_occurrence([2, 4, 4, 4, 4, 6, 7], 4) == 4 assert last_occurrence([1, 2, 3, 4, 5], 6) == -1 assert last_occurrence([], 1) == -1 ``` # Notes: - Pay attention to edge cases such as arrays with no elements, all elements being the same, or no instance of the target element at all. - Ensure the algorithm runs efficiently within the constraints.","solution":"from typing import List def last_occurrence(array: List[int], query: int) -> int: Returns the index of the last occurrence of query in the array. If query is not found, returns -1. low, high = 0, len(array) - 1 result = -1 while low <= high: mid = (low + high) // 2 if array[mid] == query: result = mid low = mid + 1 elif array[mid] < query: low = mid + 1 else: high = mid - 1 return result"},{"question":"Counting Sort with Negative Values Objective Write a function `custom_counting_sort(arr: List[int]) -> List[int]` that sorts an array of integers, which may include negative numbers, using an optimized version of the counting sort algorithm. Input and Output Formats * **Input**: A list of integers `arr` where `-10^6 <= arr[i] <= 10^6` and `1 <= len(arr) <= 10^6`. * **Output**: A new list `sorted_arr` containing the sorted elements of `arr`. Constraints * The input list can contain both negative and positive integers. * You need to handle the transformation and detransformation of negative values within the counting sort algorithm. Performance Requirements * Ensure a time complexity of O(n + k) and space complexity of O(k), where `n` is the number of elements and `k` is the range of the elements. # Example Scenario ```python # Example 1 arr = [4, -1, 0, 3, -2, -1] print(custom_counting_sort(arr)) # Output: [-2, -1, -1, 0, 3, 4] # Example 2 arr = [5, 3, 8, 6, 2, 9, -3, 6, 8] print(custom_counting_sort(arr)) # Output: [-3, 2, 3, 5, 6, 6, 8, 8, 9] ``` # Requirements * Implement the transformation of negative elements to non-negative, apply counting sort, and then transform back to maintain the original range. * Handle edge cases, such as an array with a single element, all identical elements, and large integer ranges. # Implementation Details Given the dataset\'s potential size, ensure your function is optimized both in terms of space and time. Consider appropriate handling and conversion of negative values to fit counting sort\'s requirements.","solution":"from typing import List def custom_counting_sort(arr: List[int]) -> List[int]: if not arr: return [] # Find the minimum and maximum values in arr min_val = min(arr) max_val = max(arr) # Range of the elements range_of_elements = max_val - min_val + 1 # Initialize the count array count_arr = [0] * range_of_elements output_arr = [0] * len(arr) # Store the count of each element in count_arr for num in arr: count_arr[num - min_val] += 1 # Change count_arr so that it contains the positions of elements in output_arr for i in range(1, len(count_arr)): count_arr[i] += count_arr[i - 1] # Build the output_arr for num in reversed(arr): output_arr[count_arr[num - min_val] - 1] = num count_arr[num - min_val] -= 1 return output_arr"},{"question":"# Scenario: You are tasked with developing an efficient system to monitor and analyze real-time sensor data. One of the key metrics you need to provide is a moving average of the last \'n\' data points to smooth out fluctuations and detect trends. # Problem Statement: Implement a `MovingAverage` class that calculates the moving average of the last \'n\' integers in a stream of integer data. The class should support adding new data points and immediately providing the current moving average after adding each new point. # Function Signature: ```python class MovingAverage: def __init__(self, size: int): Initialize your data structure here. :type size: int pass def next(self, val: int) -> float: Process the next integer in the stream and return the updated moving average. :type val: int :rtype: float pass ``` # Constraints: - The `size` parameter will always be a positive integer and defines the maximum number of recent elements considered in the moving average. - The input integers to the `next` method will be valid integers within the range of [-10^5, 10^5]. - You must ensure that the `next` function works efficiently even with a high volume of data points. # Expected Input and Output: - `init(size: int)`: Initializes the moving average with a window size of `size`. - `next(val: int) -> float`: Accepts an integer `val`, updates the moving average with `val`, and returns the updated moving average as a floating point number. # Example: ```python m = MovingAverage(3) print(m.next(1)) # Output: 1.0 print(m.next(10)) # Output: 5.5 print(m.next(3)) # Output: 4.66667 print(m.next(5)) # Output: 6.0 ``` Make sure to handle edge cases where the number of inputs is less than the window size effectively.","solution":"from collections import deque class MovingAverage: def __init__(self, size: int): Initialize your data structure here. :type size: int self.size = size self.queue = deque() self.sum = 0 def next(self, val: int) -> float: Process the next integer in the stream and return the updated moving average. :type val: int :rtype: float if len(self.queue) == self.size: self.sum -= self.queue.popleft() self.queue.append(val) self.sum += val return self.sum / len(self.queue)"},{"question":"# Scenario You are given a singly linked list and a specific node within that list. Your task is to delete this node from the list. This challenge tests your understanding of linked list manipulation, specifically how nodes can be removed given constraints on node access. # Task Write a function `delete_given_node(node)` that deletes a given node (except the tail) from a singly linked list. You only have access to the node that should be deleted. # Function Signature ```python def delete_given_node(node: Node) -> None: ``` # Input * `node` (Node): The node to be deleted. # Output * The function should return `None`. The node should be removed such that the linked list structure remains intact without errors. # Constraints * The node provided is guaranteed not to be the tail node. * The node\'s data type adheres to the given `Node` class structure. # Error Handling * Raise a `ValueError` if the node is `None` or the next node is `None` (indicating an attempt to delete the tail node). # Example Consider a linked list `1 -> 2 -> 3 -> 4` and you\'re given the node with value `3`. ```python # Assume the following node structure class Node: def __init__(self, x): self.val = x self.next = None # Deletion function def delete_given_node(node): if node is None or node.next is None: raise ValueError(\\"Cannot delete tail node or a null node\\") node.val = node.next.val node.next = node.next.next ``` After performing `delete_given_node(node3)`, the linked list should become `1 -> 2 -> 4`. ```python # Test case setup head = Node(1) curr = head for i in range(2, 5): curr.next = Node(i) curr = curr.next # Node to be deleted node3 = head.next.next # Node with value 3 # Deleting node3 delete_given_node(node3) # Verifying the result curr = head sequence = [] while curr: sequence.append(curr.val) curr = curr.next assert sequence == [1, 2, 4], f\\"Expected [1, 2, 4], but got {sequence}\\" ``` Write the function `delete_given_node` to complete this task.","solution":"class Node: def __init__(self, x): self.val = x self.next = None def delete_given_node(node: Node) -> None: if node is None or node.next is None: raise ValueError(\\"Cannot delete tail node or a null node\\") node.val = node.next.val node.next = node.next.next"},{"question":"# Context You have been provided with `Monomial` and `Polynomial` classes that can represent, manipulate, and perform arithmetic operations on algebraic expressions involving monomials and polynomials. These classes are designed to handle various coefficient types, including integers, floats, and fractions. However, the existing implementation has some limitations and does not support certain advanced operations. # Task Your task is to extend the functionality of these classes to support polynomial differentiation and integration. Specifically, you need to implement two methods: 1. `differentiate(self, variable: int) -> Polynomial` 2. `integrate(self, variable: int) -> Polynomial` # Specifications 1. **differentiate**: * This method should return a new `Polynomial` representing the derivative of the polynomial with respect to the specified variable. * If the specified variable does not exist in any monomial, the derivative should be zero. 2. **integrate**: * This method should return a new `Polynomial` representing the indefinite integral of the polynomial with respect to the specified variable. Assume the constant of integration is zero. * If the specified variable does not exist in any monomial, the integral should treat it as a new variable and integrate each monomial accordingly. * If the monomial\'s exponent is negative, raise a ValueError since integrating would lead to division by zero. # Input and Output Formats * **differentiate**: * **Input**: `variable` (int) * **Output**: `Polynomial` object representing the differentiated polynomial. * **integrate**: * **Input**: `variable` (int) * **Output**: `Polynomial` object representing the integrated polynomial. * **Constraints**: Must raise a `ValueError` if integrating a variable with a negative exponent. # Example ```python poly = Polynomial([Monomial({1: 2}, 5), Monomial({2: 1}, 3), Monomial({1: 1, 2: 2}, -2)]) # Differentiate with respect to variable 1 print(poly.differentiate(1)) # Expected Output: 10(a_1) + (-2)(a_2)^2 # Integrate with respect to variable 2 print(poly.integrate(2)) # Expected Output: (3/2)(a_2)^2 + (-2/3)(a_1)(a_2)^3 + 5(a_1)^2(a_2) # Input with negative exponent should raise an error poly2 = Polynomial([Monomial({1: -1}, 4)]) print(poly2.integrate(1)) # Expected Output: ValueError ``` # Constraints * Assume coefficients and exponents are valid and within reasonable ranges for standard algebraic manipulations. * Focus on the variable provided for differentiation/integration and ensure other variables are managed accordingly. * Optimize your solution for performance where possible.","solution":"from typing import List, Dict, Union class Monomial: def __init__(self, exponents: Dict[int, int], coefficient: Union[int, float]): self.exponents = exponents self.coefficient = coefficient def __repr__(self): return f\\"Monomial({self.exponents}, {self.coefficient})\\" def differentiate(self, variable: int): if variable in self.exponents: new_exponents = self.exponents.copy() new_exponent_value = new_exponents[variable] - 1 new_coefficient = self.coefficient * new_exponents[variable] if new_exponent_value == 0: del new_exponents[variable] else: new_exponents[variable] = new_exponent_value return Monomial(new_exponents, new_coefficient) else: return Monomial({}, 0) def integrate(self, variable: int): if variable in self.exponents and self.exponents[variable] < 0: raise ValueError(\\"Exponent of variable for integration cannot be negative\\") new_exponents = self.exponents.copy() new_exponent_value = new_exponents.get(variable, 0) + 1 new_coefficient = self.coefficient / new_exponent_value new_exponents[variable] = new_exponent_value return Monomial(new_exponents, new_coefficient) class Polynomial: def __init__(self, monomials: List[Monomial]): self.monomials = monomials def __repr__(self): return f\\"Polynomial({self.monomials})\\" def differentiate(self, variable: int) -> \'Polynomial\': new_monomials = [] for monomial in self.monomials: differentiated = monomial.differentiate(variable) if differentiated.coefficient != 0: new_monomials.append(differentiated) return Polynomial(new_monomials) def integrate(self, variable: int) -> \'Polynomial\': new_monomials = [] for monomial in self.monomials: integrated = monomial.integrate(variable) new_monomials.append(integrated) return Polynomial(new_monomials)"},{"question":"You are given the lengths of two of the three sides of a right-angled triangle. Your task is to write a function that returns the length of the unknown side. You will be given three parameters: `opposite`, `adjacent`, and `hypotenuse`, where one of the parameters will be the string \\"?\\" indicating the unknown side. The function should return the length of the third side rounded to two decimal places. Function Signature ```python def find_third_side(opposite: Union[float, str], adjacent: Union[float, str], hypotenuse: Union[float, str]) -> Tuple[str, float]: pass ``` Input * `opposite` (float or str): The length of the side opposite to the right angle or \\"?\\" if unknown. * `adjacent` (float or str): The length of the adjacent side to the right angle or \\"?\\" if unknown. * `hypotenuse` (float or str): The length of the hypotenuse or \\"?\\" if unknown. You can assume that: * Only one of the sides is \\"?\\". * The length of the known sides will always be positive real numbers. Output * The function should return a tuple in the format (side_name, length) where `side_name` is a string indicating the side (\\"Opposite\\", \\"Adjacent\\", or \\"Hypotenuse\\") and `length` is the length of the unknown side rounded to two decimal places. Example ```python print(find_third_side(\\"?\\", 4.0, 5.0)) # Returns: (\\"Opposite\\", 3.0) print(find_third_side(3.0, \\"?\\", 5.0)) # Returns: (\\"Adjacent\\", 4.0) print(find_third_side(3.0, 4.0, \\"?\\")) # Returns: (\\"Hypotenuse\\", 5.0) ``` Constraints * You can assume that input values will lead to valid right-angled triangle configurations.","solution":"from typing import Union, Tuple import math def find_third_side(opposite: Union[float, str], adjacent: Union[float, str], hypotenuse: Union[float, str]) -> Tuple[str, float]: if opposite == \\"?\\": # Calculate opposite side using Pythagorean theorem calculated_opposite = math.sqrt(hypotenuse ** 2 - adjacent ** 2) return (\\"Opposite\\", round(calculated_opposite, 2)) elif adjacent == \\"?\\": # Calculate adjacent side using Pythagorean theorem calculated_adjacent = math.sqrt(hypotenuse ** 2 - opposite ** 2) return (\\"Adjacent\\", round(calculated_adjacent, 2)) elif hypotenuse == \\"?\\": # Calculate hypotenuse using Pythagorean theorem calculated_hypotenuse = math.sqrt(opposite ** 2 + adjacent ** 2) return (\\"Hypotenuse\\", round(calculated_hypotenuse, 2)) else: raise ValueError(\\"One of the sides must be unknown (\'?\')\\")"},{"question":"# Problem Implement a circular buffer (also known as a circular queue) using a fixed-size array. This structure should be able to handle wraparounds and efficiently perform enqueue and dequeue operations. You need to design a class `CircularQueue`, which has the following methods: 1. **`__init__(self, k: int)`**: Constructor that initializes a queue of size k. 2. **`enqueue(self, value: int) -> bool`**: Insert an element into the circular queue. Return `True` if the operation is successful. 3. **`dequeue(self) -> bool`**: Delete an element from the circular queue. Return `True` if the operation is successful. 4. **`front(self) -> int`**: Get the front item from the queue. If the queue is empty, return `-1`. 5. **`rear(self) -> int`**: Get the last item from the queue. If the queue is empty, return `-1`. 6. **`isEmpty(self) -> bool`**: Checks whether the circular queue is empty or not. 7. **`isFull(self) -> bool`**: Checks whether the circular queue is full or not. # Constraints * Do not use any built-in queue data structures. * All operations should be performed in O(1) time complexity. * The methods `enqueue` and `dequeue` should return a boolean indicating the success of the operation. * If an operation cannot be performed due to state constraints (e.g., enqueue when the queue is full or dequeue when the queue is empty), you should handle these gracefully. # Example ```python cq = CircularQueue(3) # Initializes the queue with capacity 3. print(cq.enqueue(1)) # returns True print(cq.enqueue(2)) # returns True print(cq.enqueue(3)) # returns True print(cq.enqueue(4)) # returns False, as the queue is full print(cq.rear()) # returns 3 print(cq.isFull()) # returns True print(cq.dequeue()) # returns True print(cq.enqueue(4)) # returns True print(cq.rear()) # returns 4 ```","solution":"class CircularQueue: def __init__(self, k: int): Constructor that initializes a circular queue of size k. self.size = k self.queue = [None] * k self.front_idx = 0 self.rear_idx = -1 self.count = 0 def enqueue(self, value: int) -> bool: if self.isFull(): return False self.rear_idx = (self.rear_idx + 1) % self.size self.queue[self.rear_idx] = value self.count += 1 return True def dequeue(self) -> bool: if self.isEmpty(): return False self.front_idx = (self.front_idx + 1) % self.size self.count -= 1 return True def front(self) -> int: if self.isEmpty(): return -1 return self.queue[self.front_idx] def rear(self) -> int: if self.isEmpty(): return -1 return self.queue[self.rear_idx] def isEmpty(self) -> bool: return self.count == 0 def isFull(self) -> bool: return self.count == self.size"},{"question":"# Finding the Missing Number in a Sequence You are given a list of unique integers `nums` ranging from 0 to n where one number will be missing. Your task is to implement a function that finds this missing number. If no number is missing and the sequence is already complete, return the next integer in the sequence (i.e., n+1). Function Signature ```python def find_missing_number(nums: List[int]) -> int: ``` Input - `nums`: A list of unique integers from 0 to n (0 ≤ len(nums) ≤ 10^6). Output - An integer representing the missing number in the sequence. Constraints - The input list will have unique integers. - The differences between consecutive integers in the original sequence can\'t be more than 1. Examples ```python assert find_missing_number([4, 1, 3, 0, 6, 5, 2]) == 7 assert find_missing_number([]) == 0 assert find_missing_number([0, 1, 2, 3, 4]) == 5 assert find_missing_number([3, 0, 1]) == 2 ``` # Additional Context When utilizing the XOR-based approach: - Traverse the list, leveraging the properties of XOR to cancel out known paired elements and determine the missing number. When utilizing the Sum-based approach: - Calculate the expected sum of the integers in the range and subtract the actual sum of the given list to find the missing number. Tackle the problem considering edge cases such as an empty list or a list without missing numbers. Ensure efficiency to handle large inputs within the specified constraints.","solution":"from typing import List def find_missing_number(nums: List[int]) -> int: Finds the missing number in the sequence from 0 to n. Args: nums (List[int]): List of unique integers from 0 to n with one number missing. Returns: int: The missing integer. n = len(nums) total_sum = n * (n + 1) / 2 actual_sum = sum(nums) missing_number = int(total_sum - actual_sum) return missing_number"},{"question":"# Topological Sort of Course Prerequisites **Context**: You are tasked with designing a course prerequisite system. Given a number of courses and a list of prerequisite pairs, your goal is to determine the order in which courses should be taken to satisfy all prerequisite constraints. If there is no valid ordering (i.e., the prerequisites contain cycles), you should return an error. Problem Statement Implement a function `find_course_order(n, prerequisites)` that returns a list representing one possible order to take the courses if one exists, otherwise returns an empty list indicating it is impossible due to cyclic dependencies. Input * `n` (int): The total number of courses labeled from `0` to `n-1`. * `prerequisites` (List[Tuple[int, int]]): A list of prerequisite pairs `(a, b)` indicating that course `a` must be taken before course `b`. Output * A list of integers representing a topological order of courses if possible; otherwise, an empty list. Constraints * `1 <= n <= 10^4` * `0 <= len(prerequisites) <= 10^4` * Each `prerequisite` is a pair of integers representing a directed edge in the graph. Example ```python # Example 1: n = 4 prerequisites = [(1, 0), (2, 0), (3, 1), (3, 2)] # The function should return [0, 1, 2, 3] or [0, 2, 1, 3] # Example 2: n = 2 prerequisites = [(1, 0), (0, 1)] # The function should return [] because there exists a cycle. def find_course_order(n, prerequisites): # Implement the function here ``` **Remark**: You are expected to use a topological sort algorithm (similar to the one given) to solve the problem efficiently. Emphasize handling cycles and ensuring the accuracy of the resultant order.","solution":"from collections import deque, defaultdict def find_course_order(n, prerequisites): Finds a possible order to take courses based on prerequisites using topological sorting. Returns an empty list if a cycle is detected. # Create an adjacency list for the courses adj_list = defaultdict(list) # Create a list to count the in-degrees in_degree = [0] * n # Fill the adjacency list and in-degree list for dest, src in prerequisites: adj_list[src].append(dest) in_degree[dest] += 1 # Initialize the queue with nodes having zero in-degree zero_in_degree_queue = deque([i for i in range(n) if in_degree[i] == 0]) # List to store the topological order topo_order = [] while zero_in_degree_queue: vertex = zero_in_degree_queue.popleft() topo_order.append(vertex) # Reduce the in-degree of adjacent nodes for neighbor in adj_list[vertex]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) # If topo_order contains all the courses, return the topo_order if len(topo_order) == n: return topo_order else: # There exists a cycle, thus return an empty list return []"},{"question":"**Problem Statement**: You have been provided with a list of integers that is generally large and pre-sorted. As part of a larger application, you need to frequently insert new values into this sorted list while maintaining the sorted order. The application must perform these insertions very efficiently in terms of time complexity. Your task is to implement the `insertion_sort_with_search_insert` function, which uses the `search_insert` method provided to maintain the sorted order of the list while inserting new elements. The main function should take a list of integers and a list of values to be inserted, then insert each value into the list in the correct position using binary search for efficiency. **Function Signature**: ```python def insertion_sort_with_search_insert(sorted_array: list, values_to_insert: list) -> list: pass ``` **Input Format**: 1. `sorted_array`: A list of integers, initially sorted in ascending order. (1 <= len(sorted_array) <= 10^5) 2. `values_to_insert`: A list of integers that need to be inserted into `sorted_array`. (1 <= len(values_to_insert) <= 10^5) **Output Format**: - Return a list of integers representing the final sorted array after all insertions. **Constraints**: - The initial list (`sorted_array`) and the list of values to be inserted (`values_to_insert`) only contain integers. - All values are within the range of -10^6 to 10^6. **Example**: ```python # Example Input sorted_array = [1, 2, 4, 5, 6] values_to_insert = [3, 7, 0] # Expected Output # The function should return [0, 1, 2, 3, 4, 5, 6, 7] ``` **Implementation Notes**: - Use the provided `search_insert` helper function to determine the correct positions for insertion. - Ensure your solution is efficient and handles large inputs within a reasonable time frame.","solution":"import bisect def insertion_sort_with_search_insert(sorted_array: list, values_to_insert: list) -> list: Inserts values into a pre-sorted array while maintaining sorted order using binary search. :param sorted_array: List of sorted integers. :param values_to_insert: List of integers to insert into sorted_array. :return: New sorted list with all original and inserted values. for value in values_to_insert: # Determine the index to insert the value using binary search insert_index = bisect.bisect_right(sorted_array, value) # Insert the value into the sorted array sorted_array.insert(insert_index, value) return sorted_array"},{"question":"You are given a singly linked list where each node contains an integer value. Implement a function `swap_pairs` that swaps every two adjacent nodes and returns the modified list\'s head. For example: ``` Input: 1->2->3->4 Output: 2->1->4->3 ``` Note: * You must use only constant extra space. * You cannot modify the values within the nodes, only nodes themselves can be changed. # Function Signature ```python def swap_pairs(head: Node) -> Node: ``` # Constraints * The number of nodes in the linked list is in the range [0, 1000]. * The values in the linked list nodes are in the range `-100 <= Node.val <= 100`. # Additional Notes * You need to account for possible edge cases such as an empty list or a list with an odd number of nodes. * Your solution should be efficient in both time and space complexity, adhering to O(N) time complexity and O(1) space complexity. # Example ```python class Node: def __init__(self, x): self.val = x self.next = None def print_list(head): temp = head while temp: print(temp.val, end=\\"->\\" if temp.next else \\"n\\") temp = temp.next # List: 1->2->3->4 head = Node(1) head.next = Node(2) head.next.next = Node(3) head.next.next.next = Node(4) new_head = swap_pairs(head) print_list(new_head) # Output should be: 2->1->4->3 ```","solution":"class Node: def __init__(self, x): self.val = x self.next = None def swap_pairs(head: Node) -> Node: if not head or not head.next: return head dummy = Node(0) dummy.next = head prev = dummy while head and head.next: first = head second = head.next # Swapping first.next = second.next second.next = first prev.next = second # Reinitializing the pointers prev = first head = first.next return dummy.next"},{"question":"Context You are required to implement a part of a simple but efficient hash table using separate chaining for collision handling. This is a common method of handling hash collisions which stores all elements that hash to the same index in a linked list at that index. Given the incomplete hash table implementation provided, you need to implement a key function: `contains`. # Problem Write a method `contains` for the `SeparateChainingHashTable` class to check if the hash table contains a specific key. Your method should be efficient in terms of both time and space complexity. # Function Signature ```python def contains(self, key: object) -> bool: ``` # Input - `key`: A key to be searched in the hash table. It can be of any hashable type. # Output - Return `True` if the key is found in the hash table, otherwise return `False`. # Constraints - Your solution should ensure the function runs efficiently even if the hash table is large. - Do not modify the existing class structure or any of its members. # Example ```python table = SeparateChainingHashTable() table.put(\'hello\', \'world\') assert table.contains(\'hello\') == True assert table.contains(\'test\') == False ``` # Performance - The function should have an average-case time complexity of O(1) and a worst-case complexity of O(n).","solution":"class SeparateChainingHashTable: def __init__(self, size=10): self.size = size self.table = [[] for _ in range(size)] def _hash(self, key): return hash(key) % self.size def put(self, key, value): hashed_key = self._hash(key) for item in self.table[hashed_key]: if item[0] == key: item[1] = value return self.table[hashed_key].append([key, value]) def contains(self, key: object) -> bool: hashed_key = self._hash(key) for item in self.table[hashed_key]: if item[0] == key: return True return False"},{"question":"Path Finding in a Directed Graph # Objective You are given a directed graph with `n` vertices labeled from `0` to `n-1`. Your task is to implement a function that determines if there exists a path from a given source vertex to a target vertex. # Function Signature ```python def is_reachable(n: int, edges: List[Tuple[int, int]], source: int, target: int) -> bool: ``` # Input * `n` (1 <= `n` <= 1000): The number of vertices in the graph. * `edges`: A list of tuples where each tuple (u, v) represents a directed edge from vertex `u` to vertex `v`. * `source` (0 <= `source` < `n`): The starting vertex. * `target` (0 <= `target` < `n`): The target vertex. # Output * `True` if there is a path from `source` to `target`, otherwise `False`. # Constraints * The graph may contain cycles. * Multiple edges and self-loops are allowed. # Example ```python n = 4 edges = [(0, 1), (1, 2), (2, 3), (3, 1)] source = 0 target = 3 assert is_reachable(n, edges, source, target) == True ``` # Notes * Ensure your solution handles cycles in the graph. * Consider edge cases like isolated nodes and self-loops. * Your solution should be efficient and handle up to 1000 vertices and any reasonable number of edges within these vertices. # Solution Template ```python from typing import List, Tuple from collections import defaultdict def is_reachable(n: int, edges: List[Tuple[int, int]], source: int, target: int) -> bool: graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = [False] * n def dfs(node): if node == target: return True visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: if dfs(neighbor): return True return False return dfs(source) ```","solution":"from typing import List, Tuple from collections import defaultdict def is_reachable(n: int, edges: List[Tuple[int, int]], source: int, target: int) -> bool: graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = [False] * n def dfs(node): if node == target: return True visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: if dfs(neighbor): return True return False return dfs(source)"},{"question":"**Objective**: Implement a custom search algorithm that determines the index of a specified number in a rotated sorted array. **Scenario**: You have a rotated sorted array, which means an array that was originally sorted in increasing order is rotated at some pivot unknown to you beforehand. For example, `[15, 18, 2, 3, 6, 12]` is a rotated version of sorted array `[2, 3, 6, 12, 15, 18]`. **Task**: Write a function `rotated_search` that takes two arguments: - `rotated_array` (List[int]): The rotated sorted array. - `search_key` (int): The element to search for in the array. The function should return the index of the `search_key` if it is present in the `rotated_array`, otherwise return -1. **Function Signature**: ```python def rotated_search(rotated_array: List[int], search_key: int) -> int: pass ``` **Constraints**: - The array will not contain duplicate elements. - The function should run in (O(log n)) time complexity. - Array length (`n`) satisfies (1 leq n leq 10^4). **Expected Input and Output**: ```python >>> rotated_search([15, 18, 2, 3, 6, 12], 3) 3 >>> rotated_search([15, 18, 2, 3, 6, 12], 15) 0 >>> rotated_search([15, 18, 2, 3, 6, 12], 13) -1 >>> rotated_search([4, 5, 6, 7, 0, 1, 2], 0) 4 >>> rotated_search([4, 5, 6, 7, 0, 1, 2], 3) -1 ``` **Solution Approach**: 1. **Identify the pivot**: The point where the sorting order changes. 2. **Binary Search**: - Perform a modified binary search to find the `search_key` considering the rotation. **Example**: For `rotated_array = [15, 18, 2, 3, 6, 12]` and `search_key = 3`, the function should return index `3` as `3` is at index `3` in the array.","solution":"from typing import List def rotated_search(rotated_array: List[int], search_key: int) -> int: Returns the index of search_key in the rotated_array or -1 if not found. if not rotated_array: return -1 left, right = 0, len(rotated_array) - 1 while left <= right: mid = (left + right) // 2 if rotated_array[mid] == search_key: return mid # Determine which side is properly sorted if rotated_array[left] <= rotated_array[mid]: # Left side is sorted if rotated_array[left] <= search_key < rotated_array[mid]: right = mid - 1 else: left = mid + 1 else: # Right side is sorted if rotated_array[mid] < search_key <= rotated_array[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"You are developing a command-line utility that works with both file and web URLs, often needing to join different parts of a path, whether it be directories or route segments. Your task is to implement a function that receives two path components and returns a single, properly formatted path using a consistent \'/\' separator. This function must correctly handle suffixes with leading slashes and bases with trailing slashes, avoiding repeated slashes. # Implement the following function: ```python def join_paths(base: str, suffix: str) -> str: Joins two strings to create a standard path. Parameters: base (str): The initial part of the path (base directory or URL) suffix (str): The ending part of the path (sub-directory or route) Returns: str: A single, standardized path with concatenated base and suffix. # Example Usage: join_paths(\'http://example.com\', \'path/to/resource\') # should return \'http://example.com/path/to/resource\' join_paths(\'http://example.com/\', \'/path/to/resource\') # should return \'http://example.com/path/to/resource\' join_paths(\'/directory1\', \'subdir\') # should return \'/directory1/subdir\' join_paths(\'/directory1/\', \'/subdir\') # should return \'/directory1/subdir\' join_paths(\'\', \'file\') # should return \'file\' join_paths(\'base\', \'\') # should return \'base\' # Constraints: * The inputs will be non-empty strings. * You must preserve the original order and case of characters. * You should not assume any specific character set beyond basic ASCII. # Requirements: * Ensure no double slashes remain in the path. * Trimming of leading/trailing whitespace is handled. * Performance should be optimal with linear time complexity `O(n + m)`. ```","solution":"def join_paths(base: str, suffix: str) -> str: Joins two strings to create a standard path. Parameters: base (str): The initial part of the path (base directory or URL) suffix (str): The ending part of the path (sub-directory or route) Returns: str: A single, standardized path with concatenated base and suffix. # Handle edge cases with empty paths if not base: return suffix.lstrip(\'/\') if not suffix: return base # Remove trailing slash from base and leading slash from suffix base = base.rstrip(\'/\') suffix = suffix.lstrip(\'/\') # Combine both parts ensuring there\'s only one slash between them return f\\"{base}/{suffix}\\""},{"question":"Context: You\'ve been hired by a company developing a spell-checker tool. To enhance their system, they need functionality to generate all possible abbreviations of a given word. These abbreviations help reduce the checking space for word matching in large dictionaries. Task: Write a function, `generate_abbreviations(word: str) -> List[str]`, that takes a single string `word` as input and returns a list of all possible abbreviations of the word. Each abbreviation represents a sequence where letters from the original word can be replaced with their count of consecutive letters skipped. Input: - `word` (str): A string consisting of lowercase English letters (1 ≤ len(word) ≤ 20). Output: - (List[str]): A list containing all possible abbreviations of the given word. Example: ```python assert generate_abbreviations(\\"word\\") == [ \'word\', \'wor1\', \'wo1d\', \'wo2\', \'w1rd\', \'w1r1\', \'w2d\', \'w3\', \'1ord\', \'1or1\', \'1o1d\', \'1o2\', \'2rd\', \'2r1\', \'3d\', \'4\' ] ``` Constraints: - The order of abbreviations in the result does not matter. - Performance considerations become crucial for the upper limit of word length. - Avoid redundant calculations and ensure efficient backtracking. Please implement the function `generate_abbreviations` using a backtracking approach.","solution":"from typing import List def generate_abbreviations(word: str) -> List[str]: Generate all possible abbreviations for a given word. Parameters: word (str): The input word. Returns: List[str]: A list of all possible abbreviations. def backtrack(pos: int, cur: str, count: int): if pos == len(word): if count > 0: cur += str(count) result.append(cur) else: # Abbreviate this character backtrack(pos + 1, cur, count + 1) # Keep this character backtrack(pos + 1, cur + (str(count) if count > 0 else \'\') + word[pos], 0) result = [] backtrack(0, \\"\\", 0) return result"},{"question":"You are tasked with implementing a function to determine if a given number is a Krishnamurthy number (also known as a Strong number). # Function Signature: ```python def is_krishnamurthy_number(n: int) -> bool: ``` # Input: - `n` (int): a non-negative integer to be checked # Output: - Return `True` if the number `n` is a Krishnamurthy number, otherwise return `False`. # Constraints: - `0 ≤ n ≤ 1,000,000` # Examples: - `is_krishnamurthy_number(145)` should return `True` - `is_krishnamurthy_number(40585)` should return `True` - `is_krishnamurthy_number(357)` should return `False` - `is_krishnamurthy_number(0)` should return `False` # Performance Requirements: - The solution should efficiently handle the upper constraint. # Edge Cases: - Single-digit numbers including zero. - Numbers that are not Krishnamurthy should also be correctly handled. # Hints: - Consider using a precomputed table for the factorials of digits 0-9 to optimize the solution.","solution":"import math def is_krishnamurthy_number(n: int) -> bool: Returns True if a given number n is a Krishnamurthy number, otherwise False. A Krishnamurthy number (or strong number) is a number which is equal to the sum of the factorial of its digits. # Precompute factorials for digits 0-9 factorial = [math.factorial(i) for i in range(10)] # Calculate the sum of the factorial of the digits of n sum_of_factorials = sum(factorial[int(digit)] for digit in str(n)) # Check if the sum of factorials equals the original number return sum_of_factorials == n"},{"question":"# Scenario: You are part of a team developing a dictionary-like data structure for a high-performance application. Your manager has given you the task to improve and extend the existing hashed-based implementation. # Task: Using the provided `HashTable` and `ResizableHashTable` classes as references, implement a new class `AdvancedHashTable` that introduces the following enhancements: 1. **Quadratic Probing for Collision Resolution**: Replace the linear probing mechanism with quadratic probing to potentially reduce clustering. 2. **Load Factor Control**: Allow adjustable load factor that triggers resizing. The load factor should be passed during initialization and should by default be 2/3. 3. **Improved Hash Function**: Implement a better hash function to distribute keys more uniformly. 4. **Defragmentation**: Implement a method to defragment the table by rehashing all elements (triggered when manually called or during resize to maintain efficiency). Add or modify the necessary methods for this class as per below signature: ```python class AdvancedHashTable(ResizableHashTable): def __init__(self, size=11, load_factor=2/3): ... def improved_hash(self, key): ... def put(self, key, value): ... def defragment(self): ... ``` # Requirements: - **Input Format**: - Keys and values passed to the `put` method. - Key to be an integer for simplicity. - Value can be any type. - Load factor should be a float between 0 and 1. - **Output Format**: - `get` should return the value associated with the provided key or `None` if the key doesn’t exist. - `put` should return `None` but update the hash table accordingly. - `del_` should remove the key-value pair if it exists. - `defragment` should reorganize the table for better performance. - **Constraints**: - The table should automatically resize when the load factor exceeds the specified threshold. - The new hash function should spread keys uniformly to avoid clustering. Test your class with various scenarios to ensure its correctness and efficiency, considering edge cases like resizing during high load and deleting non-existent keys.","solution":"class AdvancedHashTable: def __init__(self, size=11, load_factor=2/3): self.size = size self.load_factor = load_factor self.table = [None] * self.size self.count = 0 def improved_hash(self, key): return (key * 2654435769) % self.size def _probe(self, key, i): return (self.improved_hash(key) + i + i*i) % self.size def put(self, key, value): if self.count + 1 > self.size * self.load_factor: self._resize() index = self.improved_hash(key) i = 0 while self.table[index] is not None: i += 1 index = self._probe(key, i) self.table[index] = (key, value) self.count += 1 def get(self, key): index = self.improved_hash(key) i = 0 while self.table[index] is not None: kv = self.table[index] if kv[0] == key: return kv[1] i += 1 index = self._probe(key, i) return None def del_(self, key): index = self.improved_hash(key) i = 0 while self.table[index] is not None: kv = self.table[index] if kv[0] == key: self.table[index] = None self.count -= 1 return i += 1 index = self._probe(key, i) def _resize(self): old_table = self.table self.size *= 2 self.table = [None] * self.size self.count = 0 for item in old_table: if item is not None: self.put(item[0], item[1]) def defragment(self): old_table = self.table self.table = [None] * self.size self.count = 0 for item in old_table: if item is not None: self.put(item[0], item[1])"},{"question":"Sort an Array with Cycle Sort **Context**: You are given an array of unique integers. Your task is to implement a sorting algorithm, Cycle Sort, that sorts the integers in ascending order using the least number of write operations. **Function Signature**: ```python def cycle_sort(arr: list[int]) -> list[int]: pass ``` **Input**: * `arr`: A list of integers, where `1 <= len(arr) <= 10^3`. **Output**: * Returns the list of integers sorted in ascending order. **Constraints**: * The array may contain duplicate elements. * You are not allowed to use any additional data structures or libraries. **Performance Requirements**: * You must optimize the number of write operations performed. **Examples**: ```python # Example 1 arr = [4, 3, 1, 5, 2] print(cycle_sort(arr)) # Output: [1, 2, 3, 4, 5] # Example 2 arr = [4, 3, 6, 2, 1, 5] print(cycle_sort(arr)) # Output: [1, 2, 3, 4, 5, 6] # Example 3 arr = [1] print(cycle_sort(arr)) # Output: [1] # Example 4 arr = [] print(cycle_sort(arr)) # Output: [] # Example 5 arr = [7, 3, 3, 1, 5] print(cycle_sort(arr)) # Output: [1, 3, 3, 5, 7] ``` # Implementation Guidelines: 1. Implement the Cycle Sort algorithm as described. 2. Ensure to handle edge cases such as empty arrays and arrays with a single element. 3. Focus on minimizing the number of write operations in your implementation.","solution":"def cycle_sort(arr: list[int]) -> list[int]: writes = 0 # Loop through the array to find cycles to rotate. for cycle_start in range(0, len(arr) - 1): item = arr[cycle_start] # Find position where we put the element. pos = cycle_start for i in range(cycle_start + 1, len(arr)): if arr[i] < item: pos += 1 # If the item is already in the correct position. if pos == cycle_start: continue # Otherwise, put the item to the right position while item == arr[pos]: pos += 1 arr[pos], item = item, arr[pos] writes += 1 # Rotate the rest of the cycle. while pos != cycle_start: pos = cycle_start for i in range(cycle_start + 1, len(arr)): if arr[i] < item: pos += 1 while item == arr[pos]: pos += 1 arr[pos], item = item, arr[pos] writes += 1 return arr"},{"question":"# Coding Challenge Scenario You are given an array of integers where exactly two elements appear only once and all the other elements appear exactly twice. Your task is to identify the two unique elements. Objective Implement a function `find_unique_numbers(nums)` that returns a list containing the two unique numbers. The order of the numbers in the output does not matter. Function Signature ```python def find_unique_numbers(nums: List[int]) -> List[int]: ``` Input - A list of integers `nums`, where the size of the list is in the range `[2, 10^6]`. Output - A list of two integers. Constraints - You must achieve a time complexity of O(N) and a space complexity of O(1). - The array will always contain exactly two unique elements, and every other element will appear exactly twice. Example ```python assert find_unique_numbers([1, 2, 1, 3, 2, 5]) in [[3, 5], [5, 3]] assert find_unique_numbers([2, -1, 3, 2, 4, -1]) in [[3, 4], [4, 3]] ``` Notes - You can utilize properties of the XOR operation to solve this problem efficiently. - Ensure to handle edge cases where arrays contain both positive and negative integers.","solution":"from typing import List def find_unique_numbers(nums: List[int]) -> List[int]: Returns a list containing the two unique numbers in `nums`. # Step 1: XOR all the elements together. The result will be the XOR of the two unique numbers. xor_result = 0 for num in nums: xor_result ^= num # Step 2: Find a set bit in the xor_result (this bit is set in only one of the two unique numbers) set_bit = xor_result & -xor_result # Step 3: Divide the elements into two groups and XOR separately num1, num2 = 0, 0 for num in nums: if num & set_bit: num1 ^= num else: num2 ^= num return [num1, num2]"},{"question":"You are given a non-negative number represented as a list of its digits. The most significant digit is at the head of the list. Write a function `plus_one` that takes this list of digits and returns a new list with the number incremented by one. # Function Signature ```python def plus_one(digits: List[int]) -> List[int]: ``` # Input - `digits`: A list of non-negative integers representing a number, where each element is a digit of the number (0-9). The most significant digit is at the head of the list and the least significant is at the tail. # Output - Returns a list of integers representing the incremented number. # Constraints - The input list `digits` will represent a non-negative integer without leading zeros except for the number zero itself. - You must not use in-built integer conversion functions. - The solution should handle numbers as large as up to 10^1000 (i.e., the list may contain up to 1000 elements). # Performance Requirements - Your solution must run in linear time `O(n)` with respect to the list size. # Examples Example 1 **Input**: `[1, 2, 3]` **Output**: `[1, 2, 4]` **Explanation**: 123 + 1 = 124 Example 2 **Input**: `[9, 9]` **Output**: `[1, 0, 0]` **Explanation**: 99 + 1 = 100 # Edge Cases to Consider - A number consisting of all nines: `[9,9,9]` should become `[1,0,0,0]`. - An empty list should return `[1]`, assuming the intention is to represent the number 0.","solution":"from typing import List def plus_one(digits: List[int]) -> List[int]: Increment the number represented by the list of digits by one and return the resulting list of digits. n = len(digits) # Traverse the digits list backwards for i in range(n - 1, -1, -1): if digits[i] < 9: # If the current digit is less than 9, just increment it and return the list digits[i] += 1 return digits # If the current digit is 9, set it to 0 and continue to the next digit digits[i] = 0 # If all digits were 9, we would have come out of the loop with all zeros # So we need to add a 1 at the beginning of the list return [1] + digits"},{"question":"# 1-Sparse Stream Processor Challenge **Background**: You are provided with a continuous stream of tuples. Each tuple contains a non-negative integer and a sign (\'+\' or \'-\'). The objective is to process this stream to determine if the stream is 1-sparse, meaning that after cancelling out pairs of positive and negative values of the same integer, only a unique integer remains. **Challenge**: Write a function `one_sparse(stream: List[Tuple[int, str]]) -> Optional[int]` that takes in a list of tuples, where each tuple includes an integer and a sign (\'+\' for positive, \'-\' for negative), and determines if the stream is 1-sparse. If the stream is 1-sparse, return the unique integer; otherwise, return `None`. **Function Signature**: ```python from typing import List, Tuple, Optional def one_sparse(stream: List[Tuple[int, str]]) -> Optional[int]: pass ``` **Input Format**: - `stream`: A list of tuples, each tuple consisting of an integer and a sign (\'+\' or \'-\'). **Output Format**: - Returns an integer if the stream is 1-sparse. - Returns `None` if the stream is not 1-sparse. **Constraints**: - The stream length `n` will be in the range `0 <= n <= 10^6`. - The integers in the stream are non-negative and no greater than `2^31 - 1`. **Examples**: 1. `[(4, \'+\'), (2, \'+\'), (2, \'-\'), (4, \'+\'), (3, \'+\'), (3, \'-\')]` should return `4`. 2. `[(2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\')]` should return `2`. 3. `[(2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (2, \'+\'), (1, \'+\')]` should return `None`. **Explanation**: 1. Since 2 and 3 gets removed. The remainder is 4 which is unique and hence 1-sparse. 2. No other numbers are present. The single number in the stream is 2. 3. The numbers do not cancel out into a single unique number hence it\'s not 1-sparse. **BONUS**: For additional challenge, can you optimize the bitwise handling to work with more efficient space utilization?","solution":"from typing import List, Tuple, Optional def one_sparse(stream: List[Tuple[int, str]]) -> Optional[int]: count_map = {} for value, sign in stream: if sign == \'+\': count_map[value] = count_map.get(value, 0) + 1 elif sign == \'-\': count_map[value] = count_map.get(value, 0) - 1 non_zero_counts = [key for key, count in count_map.items() if count != 0] if len(non_zero_counts) == 1: return non_zero_counts[0] return None"},{"question":"Scenario: You are a software engineer at a company that processes large datasets. Due to memory constraints, you need to implement an efficient sorting algorithm that optimizes for space usage while maintaining a stable sort. Task: Implement the `merge_sort_in_place` function that sorts an array of integers in non-decreasing order using an in-place merge strategy. The function should mutate the input array directly without using additional arrays for merging. Input: - An integer array `arr` of size `n`. Output: - The input array sorted in non-decreasing order. Constraints: - `1 <= arr.length <= 10^5` - `-10^9 <= arr[i] <= 10^9` Example: ```python >>> arr = [38, 27, 43, 3, 9, 82, 10] >>> merge_sort_in_place(arr) >>> print(arr) [3, 9, 10, 27, 38, 43, 82] ``` Function Signature: ```python def merge_sort_in_place(arr: List[int]) -> None: pass ``` Requirements: - The solution must use a modified merge sort algorithm that minimizes additional space usage. - The function should mutate the input array directly. - The function must handle large input sizes efficiently within the given constraints.","solution":"def merge_sort_in_place(arr): def merge(arr, start, mid, end): start2 = mid + 1 if arr[mid] <= arr[start2]: return while start <= mid and start2 <= end: if arr[start] <= arr[start2]: start += 1 else: value = arr[start2] index = start2 while index != start: arr[index] = arr[index - 1] index -= 1 arr[start] = value start += 1 mid += 1 start2 += 1 def merge_sort(arr, left, right): if left < right: mid = (left + right) // 2 merge_sort(arr, left, mid) merge_sort(arr, mid + 1, right) merge(arr, left, mid, right) merge_sort(arr, 0, len(arr) - 1)"},{"question":"# Path Finding in Directed Graphs You are given a directed graph represented as a dictionary where the key is the node and the value is a list of neighbors. Write Python functions to perform the following tasks: 1. **Find a Path**: Write a function `find_path(graph, start, end)` that finds a path from the `start` node to the `end` node. 2. **Find All Paths**: Write a function `find_all_paths(graph, start, end)` that finds all possible paths from `start` to `end`. 3. **Find Shortest Path**: Write a function `find_shortest_path(graph, start, end)` that finds the shortest path from the `start` to `end` node. # Input * `graph`: A dictionary representing a directed graph. Keys are nodes and values are lists of direct neighbors. Example: `{\'A\': [\'B\', \'C\'], \'B\': [\'C\', \'D\'], \'C\': [\'D\'], \'D\': []}` * `start`: The starting node for the path. * `end`: The ending node for the path. # Output * `find_path` returns a list of nodes representing a path from `start` to `end` if such path exists, otherwise `None`. * `find_all_paths` returns a list of lists, where each inner list is a path from `start` to `end`. * `find_shortest_path` returns a list of nodes representing the shortest path from `start` to `end` if such path exists, otherwise `None`. # Constraints * The graph is a directed graph with at most 20 nodes. * Nodes are represented as strings. * If there are multiple shortest paths, return any one of them. # Examples ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'C\', \'D\'], \'C\': [\'D\'], \'D\': [] } # Example 1: Find any path print(find_path(graph, \'A\', \'D\')) # Output: [\'A\', \'B\', \'C\', \'D\'] or any valid path from A to D # Example 2: Find all paths print(find_all_paths(graph, \'A\', \'D\')) # Output: [[\'A\', \'B\', \'C\', \'D\'], [\'A\', \'C\', \'D\'], [\'A\', \'B\', \'D\']] # Example 3: Find shortest path print(find_shortest_path(graph, \'A\', \'D\')) # Output: [\'A\', \'C\', \'D\'] ``` # Performance * Your solution should handle potential recursion depth issues and avoid infinite loops on cyclic graphs. * Code should be optimized to handle up to the maximum constraints effectively.","solution":"def find_path(graph, start, end, path=None): Finds a path from start node to end node in a directed graph. path = path or [] path = path + [start] if start == end: return path if start not in graph: return None for node in graph[start]: if node not in path: new_path = find_path(graph, node, end, path) if new_path: return new_path return None def find_all_paths(graph, start, end, path=None): Finds all paths from start node to end node in a directed graph. path = path or [] path = path + [start] if start == end: return [path] if start not in graph: return [] paths = [] for node in graph[start]: if node not in path: new_paths = find_all_paths(graph, node, end, path) for p in new_paths: paths.append(p) return paths def find_shortest_path(graph, start, end): Finds the shortest path from start node to end node in a directed graph. queue = [(start, [start])] while queue: (vertex, path) = queue.pop(0) for next_node in set(graph.get(vertex, [])) - set(path): if next_node == end: return path + [next_node] else: queue.append((next_node, path + [next_node])) return None"},{"question":"You are given a stack (implemented as a list) that contains a series of integers. Your task is to write a function `stutter` that duplicates every value in the stack. For instance, if the stack starts with [3, 7, 1, 14, 9], it should become [3, 3, 7, 7, 1, 1, 14, 14, 9, 9]. You must implement two versions of this function: 1. `stutter_with_stack`: Use an auxiliary stack (list) to achieve the result. 2. `stutter_with_queue`: Use an auxiliary queue (collections.deque) to achieve the result. # Function Signature ```python def stutter_with_stack(stack: list) -> list: pass def stutter_with_queue(stack: list) -> list: pass ``` # Input * `stack`: A list of integers representing the stack. The top of the stack is at the end of the list. # Output * The function should return the modified stack where every value is duplicated. # Constraints * The stack can contain between 0 and 1000 elements. * Each element in the stack will be an integer between -1000 and 1000. # Examples ```python assert stutter_with_stack([3, 7, 1, 14, 9]) == [3, 3, 7, 7, 1, 1, 14, 14, 9, 9] assert stutter_with_stack([]) == [] assert stutter_with_stack([5]) == [5, 5] assert stutter_with_queue([3, 7, 1, 14, 9]) == [3, 3, 7, 7, 1, 1, 14, 14, 9, 9] assert stutter_with_queue([]) == [] assert stutter_with_queue([5]) == [5, 5] ``` # Performance Requirements * Your implementations should handle the worst-case scenario (a stack with 1000 elements) efficiently within a linear time complexity.","solution":"from collections import deque def stutter_with_stack(stack): This function duplicates every value in the stack using an auxiliary stack. auxiliary_stack = [] while stack: value = stack.pop() auxiliary_stack.append(value) auxiliary_stack.append(value) while auxiliary_stack: stack.append(auxiliary_stack.pop()) return stack def stutter_with_queue(stack): This function duplicates every value in the stack using an auxiliary queue. auxiliary_queue = deque() while stack: value = stack.pop() auxiliary_queue.appendleft(value) auxiliary_queue.appendleft(value) while auxiliary_queue: stack.append(auxiliary_queue.popleft()) return stack"},{"question":"Greatest Common Divisor and Least Common Multiple Part 1: Computation of GCD using Euclid\'s Algorithm Write a function `compute_gcd` that computes the greatest common divisor (GCD) of two non-zero integers using Euclid\'s Algorithm. Function Signature: ```python def compute_gcd(a: int, b: int) -> int: ``` Input: - Two integers `a` and `b` where ( -10^6 leq a, b leq 10^6 ) and (a, b neq 0). Output: - An integer representing the GCD of `a` and `b`. Constraints: - Input integers should not be zero. - The function should handle negative numbers by considering their absolute values. Example: ```python compute_gcd(48, 18) # Output: 6 compute_gcd(-48, 18) # Output: 6 ``` Part 2: Computation of LCM Write a function `compute_lcm` that computes the lowest common multiple (LCM) of two given non-zero integers using the relationship between GCD and LCM. Function Signature: ```python def compute_lcm(a: int, b: int) -> int: ``` Input: - Two integers `a` and `b` where ( -10^6 leq a, b leq 10^6 ) and (a, b neq 0). Output: - An integer representing the LCM of `a` and `b`. Constraints: - Input integers should not be zero. - LCM should never be negative, leverage the absolute value of the integers. Example: ```python compute_lcm(48, 18) # Output: 144 compute_lcm(-48, 18) # Output: 144 ```","solution":"def compute_gcd(a: int, b: int) -> int: Computes the greatest common divisor (GCD) of two non-zero integers using Euclid\'s Algorithm. a = abs(a) b = abs(b) while b: a, b = b, a % b return a def compute_lcm(a: int, b: int) -> int: Computes the lowest common multiple (LCM) of two non-zero integers using the relationship between GCD and LCM. a, b = abs(a), abs(b) gcd = compute_gcd(a, b) return (a * b) // gcd"},{"question":"# Bit Manipulation Task You are tasked with implementing a utility class for bitwise operations. This class will provide methods to perform the following operations on a 32-bit integer: 1. **Get Bit**: Retrieve the bit at a specific position. 2. **Set Bit**: Set the bit at a specific position to 1. 3. **Clear Bit**: Clear the bit at a specific position (set it to 0). 4. **Update Bit**: Set the bit at a specific position to a given value (0 or 1). # Function Specifications Class: `BitManipulator` Implement a class `BitManipulator` that supports the following methods: ```python class BitManipulator: @staticmethod def get_bit(num: int, i: int) -> bool: Get the value of the bit at index i. :param num: The integer number. :param i: The bit position to be retrieved. :return: True if the bit is 1, False if the bit is 0. pass @staticmethod def set_bit(num: int, i: int) -> int: Set the bit at index i to 1. :param num: The integer number. :param i: The bit position to be set to 1. :return: The resulting integer with the i-th bit set. pass @staticmethod def clear_bit(num: int, i: int) -> int: Clear the bit at index i (set to 0). :param num: The integer number. :param i: The bit position to be cleared. :return: The resulting integer with the i-th bit cleared. pass @staticmethod def update_bit(num: int, i: int, bit: bool) -> int: Update the bit at index i to the given value (0 or 1). :param num: The integer number. :param i: The bit position to be updated. :param bit: The new value of the bit (True for 1, False for 0). :return: The resulting integer with the i-th bit updated. pass ``` # Constraints - The integer `num` will be a 32-bit integer. - The bit position `i` will be an integer in the range [0, 31]. - The value `bit` will be a boolean (True for 1, False for 0). # Example Usage ```python bm = BitManipulator() # Given the integer 0b101010 (decimal 42) num = 42 # Get the bit at position 1 (should return True) print(bm.get_bit(num, 1)) # Output: True # Set the bit at position 2 (result should be 0b101110, decimal 46) print(bm.set_bit(num, 2)) # Output: 46 # Clear the bit at position 5 (result should be 0b001010, decimal 10) print(bm.clear_bit(num, 5)) # Output: 10 # Update the bit at position 1 to 0 (result should be 0b101000, decimal 40) print(bm.update_bit(num, 1, False)) # Output: 40 ``` Implement the `BitManipulator` class with the above methods to pass the example usage.","solution":"class BitManipulator: @staticmethod def get_bit(num: int, i: int) -> bool: Get the value of the bit at index i. :param num: The integer number. :param i: The bit position to be retrieved. :return: True if the bit is 1, False if the bit is 0. return (num & (1 << i)) != 0 @staticmethod def set_bit(num: int, i: int) -> int: Set the bit at index i to 1. :param num: The integer number. :param i: The bit position to be set to 1. :return: The resulting integer with the i-th bit set. return num | (1 << i) @staticmethod def clear_bit(num: int, i: int) -> int: Clear the bit at index i (set to 0). :param num: The integer number. :param i: The bit position to be cleared. :return: The resulting integer with the i-th bit cleared. return num & ~(1 << i) @staticmethod def update_bit(num: int, i: int, bit: bool) -> int: Update the bit at index i to the given value (0 or 1). :param num: The integer number. :param i: The bit position to be updated. :param bit: The new value of the bit (True for 1, False for 0). :return: The resulting integer with the i-th bit updated. mask = ~(1 << i) return (num & mask) | ((1 if bit else 0) << i)"},{"question":"Prime Check Performance Analysis Objective: To assess your understanding of prime checking algorithms and your ability to enhance their efficiency. Problem Statement: You are provided with a prime checking function using a common efficient algorithm. Based on its principles and recognizing potential weaknesses, you need to implement an improved version of the `prime_check` function that can handle much larger numbers with optimized performance. Function Signature: ```python def prime_check(n: int) -> bool: pass ``` Input: * An integer `n` where (1 <= n <= 10^12). Output: * `True` if the number `n` is prime. * `False` otherwise. Constraints: 1. You should avoid using any in-built library functions related to prime checking. 2. Performance is crucial — your solution should handle the upper limit efficiently. 3. Consider edge cases and aim to reduce unnecessary checks further. Example: ```python assert prime_check(29) == True assert prime_check(100) == False assert prime_check(104729) == True # large prime check assert prime_check(1234567890) == False # large composite check ``` Additional Task: Provide a brief explanation of any optimizations or improvements you applied to enhance the performance compared to the traditional steps in the code snippet.","solution":"def prime_check(n: int) -> bool: Returns True if n is a prime number, otherwise False. Optimizations: 1. Handle base cases separately: 0, 1, and small primes. 2. Only check up to the square root of n. 3. Skip even numbers after checking 2. 4. Skip multiples of small primes using a 6k +/- 1 pattern. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"# Question: Implement the Enhanced Selection Sort with Optimization You are given an implementation of the Selection Sort algorithm which sorts an array in ascending order. However, this algorithm is not optimized and exhibits O(n^2) time complexity. Your task is to enhance the existing Selection Sort by adding an optimization to terminate early if the array is already sorted during the process. # Required Function Write a function called `optimized_selection_sort` that sorts a given list of integers using the Selection Sort algorithm with early termination optimization. Function Signature ```python def optimized_selection_sort(arr: List[int], simulation: bool = False) -> List[int]: pass ``` Parameters * `arr` (List[int]): A list of integers that need to be sorted. * `simulation` (bool): If `True`, print the array after every iteration (for debugging), default is `False`. Returns * List[int]: The sorted list in ascending order. # Constraints 1. `1 <= len(arr) <= 500` 2. `-10^3 <= arr[i] <= 10^3` for each element `arr[i]` in the list. # Example 1. Input: `[64, 25, 12, 22, 11]` Output: `[11, 12, 22, 25, 64]` 2. Input: `[1, 2, 3, 4, 5]` Output: `[1, 2, 3, 4, 5]` 3. Input: `[5, 4, 3, 2, 1]` Output: `[1, 2, 3, 4, 5]` # Performance Requirements The solution should handle edge cases efficiently and exhibit early termination in cases where the list is already sorted before completing all iterations.","solution":"from typing import List def optimized_selection_sort(arr: List[int], simulation: bool = False) -> List[int]: n = len(arr) for i in range(n): min_index = i already_sorted = True for j in range(i + 1, n): if arr[j] < arr[min_index]: min_index = j if arr[j - 1] > arr[j]: already_sorted = False arr[i], arr[min_index] = arr[min_index], arr[i] if simulation: print(f\\"Iteration {i + 1}: {arr}\\") if already_sorted: break return arr"},{"question":"Given a string as input, implement a function that removes any reoccurring characters and returns the new string with only the first occurrence of each character retained. # Input * A single string `s` (1 <= len(s) <= 10^5), containing any characters (a-z, A-Z, 0-9, and symbols). # Output * A newly formed string with duplicates removed, preserving the order of their first occurrences in the input string. # Constraints * Your solution must have a time complexity of O(n). * Your solution should handle both upper and lower-case characters as distinct. # Example ```python input: \\"programming\\" output: \\"progamin\\" input: \\"abracadabra\\" output: \\"abrcd\\" input: \\"aAa\\" output: \\"aA\\" ``` # Function Signature ```python def delete_reoccurring_characters(s: str) -> str: pass ```","solution":"def delete_reoccurring_characters(s: str) -> str: Removes any reoccurring characters and returns the new string with only the first occurrence of each character retained. seen = set() result = [] for character in s: if character not in seen: seen.add(character) result.append(character) return \'\'.join(result)"}]'),S={name:"App",components:{PoemCard:O},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},z={class:"card-container"},F={key:0,class:"empty-state"},L=["disabled"],R={key:0},Y={key:1};function j(r,e,l,c,s,a){const f=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",z,[(n(!0),i(b,null,v(a.displayedPoems,(o,m)=>(n(),w(f,{key:m,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+d(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),i("span",Y,"Loading...")):(n(),i("span",R,"See more"))],8,L)):u("",!0)])}const P=p(S,[["render",j],["__scopeId","data-v-6952ea47"]]),U=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"drive/48.md","filePath":"drive/48.md"}'),D={name:"drive/48.md"},M=Object.assign(D,{setup(r){return(e,l)=>(n(),i("div",null,[x(P)]))}});export{U as __pageData,M as default};
